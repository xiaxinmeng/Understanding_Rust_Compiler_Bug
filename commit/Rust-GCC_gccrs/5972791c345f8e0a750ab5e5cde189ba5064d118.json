{"sha": "5972791c345f8e0a750ab5e5cde189ba5064d118", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk3Mjc5MWMzNDVmOGUwYTc1MGFiNWU1Y2RlMTg5YmE1MDY0ZDExOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T12:04:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T12:04:55Z"}, "message": "[multiple changes]\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch2.adb (Expand_Entity_Reference): Do not set\n\tAtomic_Sync_Required for the case of a prefix of an attribute.\n\t* exp_ch4.adb (Expand_N_Explicit_Dereference): May require\n\tatomic synchronization\n\t(Expand_N_Indexed_Component): Ditto.\n\t(Expand_B_Selected_Component): Ditto.\n\t* sem_prag.adb (Process_Suppress_Unsuppress):\n\tDisable/Enable_Atomic_Synchronization can now occur for array\n\ttypes with pragma Atomic_Components.\n\t* sinfo.ads, sinfo.adb (Atomic_Sync_Required): Can now occur on\n\tN_Explicit_Dereference nodes and on N_Indexed_Component nodes.\n\n2011-11-04  Gary Dismukes  <dismukes@adacore.com>\n\n\t* gnat_ugn.texi: Editorial corrections for gnattest section.\n\nFrom-SVN: r180943", "tree": {"sha": "c6023d169c19bbc4f9712b3fa856fbd833835777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6023d169c19bbc4f9712b3fa856fbd833835777"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5972791c345f8e0a750ab5e5cde189ba5064d118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5972791c345f8e0a750ab5e5cde189ba5064d118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5972791c345f8e0a750ab5e5cde189ba5064d118", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5972791c345f8e0a750ab5e5cde189ba5064d118/comments", "author": null, "committer": null, "parents": [{"sha": "1a03203481f5f54af8d8ed2b1beda4cb7c47424d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a03203481f5f54af8d8ed2b1beda4cb7c47424d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a03203481f5f54af8d8ed2b1beda4cb7c47424d"}], "stats": {"total": 428, "additions": 258, "deletions": 170}, "files": [{"sha": "180718d6e73fbaf590537b139716a95c4c19abc3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5972791c345f8e0a750ab5e5cde189ba5064d118", "patch": "@@ -1,3 +1,21 @@\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch2.adb (Expand_Entity_Reference): Do not set\n+\tAtomic_Sync_Required for the case of a prefix of an attribute.\n+\t* exp_ch4.adb (Expand_N_Explicit_Dereference): May require\n+\tatomic synchronization\n+\t(Expand_N_Indexed_Component): Ditto.\n+\t(Expand_B_Selected_Component): Ditto.\n+\t* sem_prag.adb (Process_Suppress_Unsuppress):\n+\tDisable/Enable_Atomic_Synchronization can now occur for array\n+\ttypes with pragma Atomic_Components.\n+\t* sinfo.ads, sinfo.adb (Atomic_Sync_Required): Can now occur on\n+\tN_Explicit_Dereference nodes and on N_Indexed_Component nodes.\n+\n+2011-11-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat_ugn.texi: Editorial corrections for gnattest section.\n+\n 2011-11-04  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb: Minor reformatting."}, {"sha": "9726563d52ca9869596943c65f40d7300de89620", "filename": "gcc/ada/exp_ch2.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fexp_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fexp_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch2.adb?ref=5972791c345f8e0a750ab5e5cde189ba5064d118", "patch": "@@ -404,6 +404,15 @@ package body Exp_Ch2 is\n       if Nkind_In (N, N_Identifier, N_Expanded_Name)\n         and then Ekind (E) = E_Variable\n         and then (Is_Atomic (E) or else Is_Atomic (Etype (E)))\n+\n+         --  Don't go setting the flag for the prefix of an attribute because\n+         --  we don't want atomic sync for X'Size, X'Access etc.\n+\n+         --  Is this right in all cases of attributes???\n+         --  Are there other exemptions required ???\n+\n+        and then (Nkind (Parent (N)) /= N_Attribute_Reference\n+                    or else Prefix (Parent (N)) /= N)\n       then\n          declare\n             Set  : Boolean;\n@@ -444,6 +453,7 @@ package body Exp_Ch2 is\n             --  Set flag if required\n \n             if Set then\n+               Set_Atomic_Sync_Required (N);\n \n                --  Generate info message if requested\n \n@@ -457,8 +467,6 @@ package body Exp_Ch2 is\n                   Error_Msg_N\n                     (\"?info: atomic synchronization set for &\", MLoc);\n                end if;\n-\n-               Set_Atomic_Sync_Required (N);\n             end if;\n          end;\n       end if;"}, {"sha": "671c28349bfd72b50a5c6b78faba570b3b985870", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=5972791c345f8e0a750ab5e5cde189ba5064d118", "patch": "@@ -591,8 +591,7 @@ package body Exp_Ch4 is\n                --  1) Get access to the allocated object\n \n                Rewrite (N,\n-                 Make_Explicit_Dereference (Loc,\n-                   Relocate_Node (N)));\n+                 Make_Explicit_Dereference (Loc, Relocate_Node (N)));\n                Set_Etype (N, Etyp);\n                Set_Analyzed (N);\n \n@@ -4472,6 +4471,21 @@ package body Exp_Ch4 is\n       --  Insert explicit dereference call for the checked storage pool case\n \n       Insert_Dereference_Action (Prefix (N));\n+\n+      --  If the type is an Atomic type for which Atomic_Sync is enabled, then\n+      --  we set the atomic sync flag.\n+\n+      if Is_Atomic (Etype (N))\n+        and then not Atomic_Synchronization_Disabled (Etype (N))\n+      then\n+         Set_Atomic_Sync_Required (N);\n+\n+         --  Generate info message if requested\n+\n+         if Warn_On_Atomic_Synchronization then\n+            Error_Msg_N (\"?info: atomic synchronization set\", N);\n+         end if;\n+      end if;\n    end Expand_N_Explicit_Dereference;\n \n    --------------------------------------\n@@ -5245,6 +5259,7 @@ package body Exp_Ch4 is\n       Typ : constant Entity_Id  := Etype (N);\n       P   : constant Node_Id    := Prefix (N);\n       T   : constant Entity_Id  := Etype (P);\n+      Atp : Entity_Id;\n \n    begin\n       --  A special optimization, if we have an indexed component that is\n@@ -5290,6 +5305,9 @@ package body Exp_Ch4 is\n       if Is_Access_Type (T) then\n          Insert_Explicit_Dereference (P);\n          Analyze_And_Resolve (P, Designated_Type (T));\n+         Atp := Designated_Type (T);\n+      else\n+         Atp := T;\n       end if;\n \n       --  Generate index and validity checks\n@@ -5300,6 +5318,23 @@ package body Exp_Ch4 is\n          Apply_Subscript_Validity_Checks (N);\n       end if;\n \n+      --  If selecting from an array with atomic components, and atomic sync\n+      --  is not suppressed for this array type, set atomic sync flag.\n+\n+      if (Has_Atomic_Components (Atp)\n+           and then not Atomic_Synchronization_Disabled (Atp))\n+        or else (Is_Atomic (Typ)\n+                  and then not Atomic_Synchronization_Disabled (Typ))\n+      then\n+         Set_Atomic_Sync_Required (N);\n+\n+         --  Generate info message if requested\n+\n+         if Warn_On_Atomic_Synchronization then\n+            Error_Msg_N (\"?info: atomic synchronization set\", N);\n+         end if;\n+      end if;\n+\n       --  All done for the non-packed case\n \n       if not Is_Packed (Etype (Prefix (N))) then\n@@ -7869,9 +7904,6 @@ package body Exp_Ch4 is\n    -- Expand_N_Selected_Component --\n    ---------------------------------\n \n-   --  If the selector is a discriminant of a concurrent object, rewrite the\n-   --  prefix to denote the corresponding record type.\n-\n    procedure Expand_N_Selected_Component (N : Node_Id) is\n       Loc   : constant Source_Ptr := Sloc (N);\n       Par   : constant Node_Id    := Parent (N);\n@@ -8175,6 +8207,24 @@ package body Exp_Ch4 is\n          Rewrite (N, New_N);\n          Analyze (N);\n       end if;\n+\n+      --  If we still have a selected component, and the type is an Atomic\n+      --  type for which Atomic_Sync is enabled, then we set the atomic sync\n+      --  flag on the selector.\n+\n+      if Nkind (N) = N_Selected_Component\n+        and then Is_Atomic (Etype (N))\n+        and then not Atomic_Synchronization_Disabled (Etype (N))\n+      then\n+         Set_Atomic_Sync_Required (Selector_Name (N));\n+\n+         --  Generate info message if requested\n+\n+         if Warn_On_Atomic_Synchronization then\n+            Error_Msg_N\n+              (\"?info: atomic synchronization set for &\", Selector_Name (N));\n+         end if;\n+      end if;\n    end Expand_N_Selected_Component;\n \n    --------------------"}, {"sha": "8ef52f0e82c8ad632dfc479bf46d6dbd981c9613", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 159, "deletions": 159, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=5972791c345f8e0a750ab5e5cde189ba5064d118", "patch": "@@ -475,11 +475,11 @@ Creating Unit Tests Using gnattest\n * Switches for gnattest::\n * Project Attributes for gnattest::\n * Simple Example::\n-* Setting Up and Tearing Down Testing Environment::\n+* Setting Up and Tearing Down the Testing Environment::\n * Regenerating Tests::\n * Default Test Behavior::\n * Testing Primitive Operations of Tagged Types::\n-* Test Inheritance::\n+* Testing Inheritance::\n * Tagged Types Substitutability Testing::\n * Testing with Contracts::\n * Additional Tests::\n@@ -17491,7 +17491,7 @@ option @option{^--no-exception^/NO_EXCEPTION^} (see below).\n @section Running @command{gnatstub}\n \n @noindent\n-@command{gnatstub} has the command-line interface of the form\n+@command{gnatstub} has a command-line interface of the form:\n \n @smallexample\n @c $ gnatstub @ovar{switches} @var{filename} @ovar{directory}\n@@ -17673,34 +17673,34 @@ Verbose mode: generate version information.\n @findex gnattest\n \n @noindent\n-@command{gnattest} is an ASIS-based utility that creates unit tests stubs\n+@command{gnattest} is an ASIS-based utility that creates unit-test stubs\n as well as a test driver infrastructure (harness). @command{gnattest} creates\n a stub for each visible subprogram in the packages under consideration when\n they do not exist already.\n \n-In order to process source files from the project, @command{gnattest} has to\n-semantically analyze these Ada sources. Therefore, test stubs can only be\n-generated for legal Ada units. If a unit is dependent on some other units,\n-those units should be among source files of the project or of other projects\n+In order to process source files from a project, @command{gnattest} has to\n+semantically analyze the sources. Therefore, test stubs can only be\n+generated for legal Ada units. If a unit is dependent on other units,\n+those units should be among the source files of the project or of other projects\n imported by this one.\n \n-Generated stubs and harness are based on the AUnit testing framework. AUnit is\n-an Ada adaptation of the xxxUnit testing frameworks similar to JUnit for Java or\n-CppUnit for C++. While it is advised that gnattest users read AUnit manual, deep\n-knowledge of AUnit is not necessary for using gnattest. For correct operation of\n-@command{gnattest} AUnit should be installed and aunit.gpr must be on the\n-project path. This happens automatically when Aunit is installed at its default\n-location.\n+Generated stubs and harnesses are based on the AUnit testing framework. AUnit is\n+an Ada adaptation of the xxxUnit testing frameworks, similar to JUnit for Java\n+or CppUnit for C++. While it is advised that gnattest users read the AUnit\n+manual, deep knowledge of AUnit is not necessary for using gnattest. For correct\n+operation of @command{gnattest}, AUnit should be installed and aunit.gpr must be\n+on the project path. This happens automatically when Aunit is installed at its\n+default location.\n @menu\n * Running gnattest::\n * Switches for gnattest::\n * Project Attributes for gnattest::\n * Simple Example::\n-* Setting Up and Tearing Down Testing Environment::\n+* Setting Up and Tearing Down the Testing Environment::\n * Regenerating Tests::\n * Default Test Behavior::\n * Testing Primitive Operations of Tagged Types::\n-* Test Inheritance::\n+* Testing Inheritance::\n * Tagged Types Substitutability Testing::\n * Testing with Contracts::\n * Additional Tests::\n@@ -17711,7 +17711,7 @@ location.\n @section Running @command{gnattest}\n \n @noindent\n-@command{gnattest} has the command-line interface of the form\n+@command{gnattest} has a command-line interface of the form\n \n @smallexample\n @c $ gnattest @var{-Pprojname} @ovar{switches} @ovar{filename} @ovar{directory}\n@@ -17724,42 +17724,41 @@ where\n @table @var\n \n @item -Pprojname\n-specifies the project that allow locating the source files. When no [filenames]\n-are provided on the command line, all project sources are used as input. This\n-switch is mandatory.\n+specifies the project defining the location of source files. When no\n+file names are provided on the command line, all sources in the project\n+are used as input. This switch is required.\n \n @item --harness-dir=dirname\n-specifies directory to put harness packages and project file for the test\n-driver. The harness dir should be either specified by that switch or by\n-corresponding attribute in the argument project file.\n+specifies the directory that will hold the harness packages and project file\n+for the test driver. The harness directory should be specified either by that\n+switch or by the corresponding attribute in the project file.\n \n @item filename\n-is the name of the source file that contains a library unit package declaration\n-for which a test package must be created. The file name may contain the path\n-information.\n+is the name of the source file containing the library unit package declaration\n+for which a test package will be created. The file name may given with a path.\n \n @item @samp{@var{gcc_switches}} is a list of switches for\n-@command{gcc}. They will be passed on to all compiler invocations made by\n-@command{gnatstub} to generate the ASIS trees. Here you can provide\n+@command{gcc}. These switches will be passed on to all compiler invocations\n+made by @command{gnatstub} to generate a set of ASIS trees. Here you can provide\n @option{^-I^/INCLUDE_DIRS=^} switches to form the source search path,\n use the @option{-gnatec} switch to set the configuration file,\n use the @option{-gnat05} switch if sources should be compiled in\n-Ada 2005 mode etc.\n+Ada 2005 mode, etc.\n \n @item switches\n-is an optional sequence of switches as described in the next section\n+is an optional sequence of switches as described in the next section.\n \n @end table\n \n @command{gnattest} results can be found in two different places.\n \n @itemize @bullet\n @item automatic harness\n-the harnessing code which is located in the harness-dir as specified on the\n-comand line or in the project file. All this code is generated completely\n-automatically and can be destroyed and regenerated at will. It is not\n-recommended to modify manually this code since it might be overridden\n-easily. The entry point in this harnessing code is the project file called\n+the harness code, which is located either in the harness-dir as specified on\n+the command line or in the project file. All of this code is generated\n+completely automatically and can be destroyed and regenerated at will. It is not\n+recommended to modify this code manually, since it could easily be overridden\n+by mistake. The entry point in the harness code is the project file named\n @command{test_driver.gpr}. Tests can be compiled and run using a command\n such as:\n \n@@ -17772,12 +17771,12 @@ test_runner\n a test stub for each visible subprogram is created in a separate file, if it\n doesn't exist already. By default, those separate test files are located in a\n \"tests\" directory that is created in the directory containing the source file\n-itself. if it is not appropriate to create the tests in subdirs of the source,\n-option @option{--separate-root} can be used. So let say for instance that\n-a source file my_unit.ads in directory src contains a visible subprogram Proc.\n-Then, the corresponding unit test will be found in file\n-src/tests/my_unit-tests-proc_<code>.adb. <code> is an signature encoding used to\n-differentiate test names in case of overloading.\n+itself. If it is not appropriate to create the tests in subdirectories of the\n+source, option @option{--separate-root} can be used. For example, if a source\n+file my_unit.ads in directory src contains a visible subprogram Proc, then\n+the corresponding unit test will be found in file\n+src/tests/my_unit-tests-proc_<code>.adb. <code> is a signature encoding used to\n+differentiate test names in cases of overloading.\n @end itemize\n \n @node Switches for gnattest\n@@ -17789,7 +17788,7 @@ differentiate test names in case of overloading.\n @item --harness-only\n @cindex @option{--harness-only} (@command{gnattest})\n When this option is given, @command{gnattest} creates a harness for all\n-sources treating them as test packages.\n+sources, treating them as test packages.\n \n @item --additional-tests=@var{projname}\n @cindex @option{--additional-tests} (@command{gnattest})\n@@ -17798,15 +17797,15 @@ manual tests to be added to the test suite.\n \n @item -r\n @cindex @option{-r} (@command{gnattest})\n-Consider recursively all sources from all projects.\n+Recursively consider all sources from all projects.\n \n @item -q\n @cindex @option{-q} (@command{gnattest})\n-Supresses non-critical output messages.\n+Suppresses noncritical output messages.\n \n @item -v\n @cindex @option{-v} (@command{gnattest})\n-Verbose mode: generate version information.\n+Verbose mode: generates version information.\n \n @item --liskov\n @cindex @option{--liskov} (@command{gnattest})\n@@ -17820,14 +17819,14 @@ Specifies the default behavior of generated stubs. @var{val} can be either\n \n @item --separate-root=@var{dirname}\n @cindex @option{--separate-root} (@command{gnattest})\n-Directory hierarchy of tested sources is recreated in the @var{dirname} directory,\n-test packages are placed in corresponding dirs.\n+The directory hierarchy of tested sources is recreated in the @var{dirname}\n+directory, and test packages are placed in corresponding directories.\n \n @item --subdir=@var{dirname}\n @cindex @option{--subdir} (@command{gnattest})\n-Test packages are placed in subdirectories. That's the default output mode since\n-it does not require any additional input from the user. Subdirs called \"tests\"\n-will be created by default.\n+Test packages are placed in subdirectories. This is the default output mode\n+since it does not require any additional input from the user. Subdirectories\n+named \"tests\" will be created by default.\n \n @end table\n \n@@ -17838,36 +17837,36 @@ will be created by default.\n \n @noindent\n \n-Most of the command line options can be also given to the tool by adding\n+Most of the command-line options can also be passed to the tool by adding\n special attributes to the project file. Those attributes should be put in\n-package gnattest. Here is the list of the attributes.\n+package gnattest. Here is the list of attributes:\n \n @itemize @bullet\n \n @item Separate_Stub_Root\n is used to select the same output mode as with the --separate-root option.\n-This attribute cannot be used togather with Stub_Subdir.\n+This attribute cannot be used together with Stub_Subdir.\n \n @item Stub_Subdir\n-is used to select the same output mode as with the --sudbir option.\n-This attribute cannot be used togather with Separate_Stub_Root.\n+is used to select the same output mode as with the --subdir option.\n+This attribute cannot be used together with Separate_Stub_Root.\n \n @item Harness_Dir\n-is used to specify the directory to place harness packages and project\n+is used to specify the directory in which to place harness packages and project\n file for the test driver, otherwise specified by --harness-dir.\n \n @item Additional_Tests\n-is used to specify the project file otherwise given by\n+is used to specify the project file, otherwise given by\n --additional-tests switch.\n \n @item Stubs_Default\n is used to specify the default behaviour of test stubs, otherwise\n-specified by --stub-default option. The value for this attribute\n-shoul be either \"pass\" or \"fail\"\n+specified by --stub-default option. The value of this attribute\n+should be either \"pass\" or \"fail\".\n \n @end itemize\n \n-All those attributes can be overridden from command line if needed.\n+Each of those attributes can be overridden from the command line if needed.\n Other @command{gnattest} switches can also be passed via the project\n file as an attribute list called GNATtest_Switches.\n \n@@ -17877,19 +17876,19 @@ file as an attribute list called GNATtest_Switches.\n @noindent\n \n Let's take a very simple example using the first @command{gnattest} example\n-located at\n+located in:\n \n @smallexample\n <install_prefix>/share/examples/gnattest/simple\n @end smallexample\n \n-This project contains a simple package containing one subprogram. By running gnattest\n+This project contains a simple package containing one subprogram. By running gnattest:\n \n @smallexample\n $ gnattest --harness-dir=driver -Psimple.gpr\n @end smallexample\n \n-a test driver is created in dir \"driver\". It can be compiled and run:\n+a test driver is created in directory \"driver\". It can be compiled and run:\n \n @smallexample\n $ cd driver\n@@ -17898,34 +17897,34 @@ $ test_runner\n @end smallexample\n \n One failed test with diagnosis \"test not implemented\" is reported.\n-Since no special output option was specified the test package Simple.Tests\n-is located in\n+Since no special output option was specified, the test package Simple.Tests\n+is located in:\n \n @smallexample\n <install_prefix>/share/examples/gnattest/simple/src/tests\n @end smallexample\n \n For each package containing visible subprograms, a child test package is\n generated. It contains one test routine per tested subprogram. Each\n-declaration of test subprogram has a comment specifying to which tested\n-subprogram it corresponds. All the test routines have separated bodies.\n-The test routine locates at simple-tests-test_inc_5eaee3.adb has a single\n-statement - procedure Assert. It has two arguments: the boolean expression\n-which we want to check and the diagnosis message to display if the condition\n-is false.\n+declaration of a test subprogram has a comment specifying which tested\n+subprogram it corresponds to. All of the test routines have separate bodies.\n+The test routine located at simple-tests-test_inc_5eaee3.adb contains a single\n+statement: a call to procedure Assert. It has two arguments: the Boolean\n+expression we want to check and the diagnosis message to display if\n+the condition is false.\n \n That is where actual testing code should be written after a proper setup.\n-An actual check can be performed by replacing the assert statement with\n+An actual check can be performed by replacing the Assert call with:\n \n @smallexample @c ada\n Assert (Inc (1) = 2, \"wrong incrementation\");\n @end smallexample\n \n-After recompiling and running the test driver one successfully passed test\n+After recompiling and running the test driver, one successfully passed test\n is reported.\n \n-@node Setting Up and Tearing Down Testing Environment\n-@section Setting Up and Tearing Down Testing Environment\n+@node Setting Up and Tearing Down the Testing Environment\n+@section Setting Up and Tearing Down the Testing Environment\n \n @noindent\n \n@@ -17934,7 +17933,7 @@ Env_Mgmt that has two procedures: User_Set_Up and User_Tear_Down.\n User_Set_Up is called before each test routine of the package and\n User_Tear_Down is called after each test routine. Those two procedures can\n be used to perform necessary initialization and finalization,\n-memory allocation etc.\n+memory allocation, etc.\n \n @node Regenerating Tests\n @section Regenerating Tests\n@@ -17943,12 +17942,12 @@ memory allocation etc.\n \n Bodies of test routines and env_mgmt packages are never overridden after they\n have been created once. As long as the name of the subprogram, full expanded Ada\n-names and order of its parameters are the same, the old test routine will\n-fit in it's place and no test stub will be generated for this subprogram.\n+names, and the order of its parameters is the same, the old test routine will\n+fit in its place and no test stub will be generated for the subprogram.\n \n This can be demonstrated with the previous example. By uncommenting declaration\n and body of function Dec in simple.ads and simple.adb, running\n-@command{gnattest} on the project and then running the test driver:\n+@command{gnattest} on the project, and then running the test driver:\n \n @smallexample\n gnattest --harness-dir=driver -Psimple.gpr\n@@ -17957,29 +17956,29 @@ gprbuild -Ptest_driver\n test_runner\n @end smallexample\n \n-the old test is not replaced with a stub neither lost but a new test stub is\n+the old test is not replaced with a stub, nor is it lost, but a new test stub is\n created for function Dec.\n \n-The only way for regenerating tests stubs is t oremove the previously created\n+The only way of regenerating tests stubs is to remove the previously created\n tests.\n \n @node Default Test Behavior\n @section Default Test Behavior\n \n @noindent\n \n-Generated test driver can treat all unimplemented tests in two ways:\n-either count them all as failed (this is usefull to see which tests are still\n-left to implement) or as  passed (to sort out unimplemented ones from those\n-actually failing for a reason).\n+The generated test driver can treat unimplemented tests in two ways:\n+either count them all as failed (this is useful to see which tests are still\n+left to implement) or as passed (to sort out unimplemented ones from those\n+actually failing).\n \n-Test driver accepts a switch to specify this behavior: --stub-default=val,\n+The test driver accepts a switch to specify this behavior: --stub-default=val,\n where val is either \"pass\" or \"fail\" (exactly as for @command{gnattest}).\n \n The default behavior of the test driver is set with the same switch\n-passed to gnattest when generating the test driver.\n+as passed to gnattest when generating the test driver.\n \n-Passing it to the driver generated on the first example\n+Passing it to the driver generated on the first example:\n \n @smallexample\n test_runner --stub-default=pass\n@@ -17992,58 +17991,58 @@ makes both tests pass, even the unimplemented one.\n \n @noindent\n \n-Creating test stubs for primitive operations of tagged types have a number\n+Creation of test stubs for primitive operations of tagged types entails a number\n of features. Test routines for all primitives of a given tagged type are\n-placed in a separate child package named after the tagged type (so if you\n-have tagged type T in package P all tests for primitives of T will be in\n-P.T_Tests).\n+placed in a separate child package named according to the tagged type. For\n+example, if you have tagged type T in package P, all tests for primitives\n+of T will be in P.T_Tests.\n \n-By running gnattest on the second example (actual tests for this example\n-are already written so no need to worry if the tool reports that 0 new stubs\n-were generated).\n+Consider running gnattest on the second example (note: actual tests for this\n+example already exist, so there's no need to worry if the tool reports that\n+no new stubs were generated):\n \n @smallexample\n cd <install_prefix>/share/examples/gnattest/tagged_rec\n gnattest --harness-dir=driver -Ptagged_rec.gpr\n @end smallexample\n \n Taking a closer look at the test type declared in the test package\n-Speed1.Controller_Tests is necessary. It is declared in\n+Speed1.Controller_Tests is necessary. It is declared in:\n \n @smallexample\n <install_prefix>/share/examples/gnattest/tagged_rec/src/tests\n @end smallexample\n \n Test types are direct or indirect descendants of\n-AUnit.Test_Fixtures.Test_Fixture type. For non-primitive tested subprograms\n-there is no need for the user to care about them. However when generating\n-test packages for primitive operations, there are some things the user\n-should know.\n+AUnit.Test_Fixtures.Test_Fixture type. In the case of nonprimitive tested\n+subprograms, the user doesn't need to be concerned with them. However,\n+when generating test packages for primitive operations, there are some things\n+the user needs to know.\n \n-Type Test_Controller has component that allows to assign it all kinds of\n+Type Test_Controller has components that allow assignment of various\n derivations of type Controller. And if you look at the specification of\n-package Speed2.Auto_Controller, you can see, that Test_Auto_Controller\n-actually derives from Test_Controller rather that AUnit type Test_Fixture.\n-Thus test types repeat the hierarchy of tested types.\n+package Speed2.Auto_Controller, you will see that Test_Auto_Controller\n+actually derives from Test_Controller rather than AUnit type Test_Fixture.\n+Thus, test types mirror the hierarchy of tested types.\n \n The User_Set_Up procedure of Env_Mgmt package corresponding to a test package\n-of primitive operations of type T assigns Fixture with a reference to an\n-object of that exact type T. Notice however, that if the tagged type has\n-discriminants, the User_Set_Up only has a commented template of setting\n-up the fixture since filling the discriminant with actual value is up\n+of primitive operations of type T assigns to Fixture a reference to an\n+object of that exact type T. Notice, however, that if the tagged type has\n+discriminants, the User_Set_Up only has a commented template for setting\n+up the fixture, since filling the discriminant with actual value is up\n to the user.\n \n-The knowledge of the structure if test types allows to have additional testing\n+The knowledge of the structure of test types allows additional testing\n without additional effort. Those possibilities are described below.\n \n-@node Test Inheritance\n-@section Test Inheritance\n+@node Testing Inheritance\n+@section Testing Inheritance\n \n @noindent\n \n-Since test type hierarchy mimics the hierarchy of tested types, the\n-inheritance of tests take place. An example of such inheritance can be\n-shown by running the test driver generated for second example. As previously\n+Since the test type hierarchy mimics the hierarchy of tested types, the\n+inheritance of tests takes place. An example of such inheritance can be\n+seen by running the test driver generated for the second example. As previously\n mentioned, actual tests are already written for this example.\n \n @smallexample\n@@ -18052,38 +18051,37 @@ gprbuild -Ptest_driver\n test_runner\n @end smallexample\n \n-There are 6 passed tests while there are only 5 testable subprograms. Test\n-routine for function Speed has been inherited and ran against objects of the\n+There are 6 passed tests while there are only 5 testable subprograms. The test\n+routine for function Speed has been inherited and run against objects of the\n derived type.\n \n @node Tagged Types Substitutability Testing\n @section Tagged Types Substitutability Testing\n \n @noindent\n \n-Tagged Types Substitutability Testing is a way of verifying by testing\n-the Liskov substitution principle (LSP). LSP is a principle stating that if\n+Tagged Types Substitutability Testing is a way of verifying the Liskov\n+substitution principle (LSP) by testing. LSP is a principle stating that if\n S is a subtype of T (in Ada, S is a derived type of tagged type T),\n-then objects of type T may be replaced with objects of type S (i.e., objects\n-of type S may be substituted for objects of type T), without altering any of\n-the desirable properties of the program. When the properties of the program are\n-expressed in the form of subprogram pre & postconditions, LSP is formulated\n-as relations between the pre & post of primitive operations and the pre & post\n-of theirs derived operations. The pre of a derived operation should not be\n-stronger that the original pre, and the post of the derived operation should not\n-be weaker than the original post. Those relations insure that verifying if a\n-dyspatching call is safe can be done just with the pre & post of the root\n-operation.\n-\n-Verifying LSP by testing consists in running all the unit tests associated with\n+then objects of type T may be replaced with objects of type S (that is,\n+objects of type S may be substituted for objects of type T), without\n+altering any of the desirable properties of the program. When the properties\n+of the program are expressed in the form of subprogram preconditions and\n+postconditions (let's call them pre and post), LSP is formulated as relations\n+between the pre and post of primitive operations and the pre and post of their\n+derived operations. The pre of a derived operation should not be stronger than\n+the original pre, and the post of the derived operation should not be weaker\n+than the original post. Those relations ensure that verifying if a dispatching\n+call is safe can be done just by using the pre and post of the root operation.\n+\n+Verifying LSP by testing consists of running all the unit tests associated with\n the primitives of a given tagged type with objects of its derived types.\n \n-In the example used by the previous section there clearly have a violation of LSP.\n-The overriding primitive Adjust_Speed in package Speed2 removes the\n+In the example used in the previous section, there was clearly a violation of\n+LSP. The overriding primitive Adjust_Speed in package Speed2 removes the\n functionality of the overridden primitive and thus doesn't respect LSP.\n-Gnattest has a special option to run\n-overridden parent tests against objects of the type which have overriding\n-primitives.\n+Gnattest has a special option to run overridden parent tests against objects\n+of the type which have overriding primitives:\n \n @smallexample\n gnattest --harness-dir=driver --liskov -Ptagged_rec.gpr\n@@ -18093,21 +18091,21 @@ test_runner\n @end smallexample\n \n While all the tests pass by themselves, the parent test for Adjust_Speed fails\n-against object of derived type.\n+against objects of the derived type.\n \n @node Testing with Contracts\n @section Testing with Contracts\n \n @noindent\n \n-@command{gnattest} supports pragmas Precondition, Postcondition and Test_Case.\n-Test routines are generated one per each Test_Case associated with a tested\n+@command{gnattest} supports pragmas Precondition, Postcondition, and Test_Case.\n+Test routines are generated, one per each Test_Case associated with a tested\n subprogram. Those test routines have special wrappers for tested functions\n-that have composition of pre- and postcondition of the subprogram an\n-\"requires\" and \"ensures\" of the Test_Case (depending on the mode pre- and post\n-either count for Nominal mode or do not for Robustness mode).\n+that have composition of pre- and postcondition of the subprogram with\n+\"requires\" and \"ensures\" of the Test_Case (depending on the mode, pre and post\n+either count for Nominal mode or do not count for Robustness mode).\n \n-The third example demonstrates how it works:\n+The third example demonstrates how this works:\n \n @smallexample\n cd <install_prefix>/share/examples/gnattest/contracts\n@@ -18116,13 +18114,13 @@ gnattest --harness-dir=driver -Pcontracts.gpr\n \n Putting actual checks within the range of the contract does not cause any\n error reports. For example, for the test routine which corresponds to\n-test case 1\n+test case 1:\n \n @smallexample @c ada\n Assert (Sqrt (9.0) = 3.0, \"wrong sqrt\");\n @end smallexample\n \n-and for the test routine corresponding to test case 2\n+and for the test routine corresponding to test case 2:\n \n @smallexample @c ada\n Assert (Sqrt (-5.0) = -1.0, \"wrong error indication\");\n@@ -18136,31 +18134,33 @@ gprbuild -Ptest_driver\n test_runner\n @end smallexample\n \n-However, by by changing 9.0 to 25.0 and 3.0 to 5.0 for example you can get\n-a precondition violation for test case one. Also by putting any otherwise\n-correct but positive pair of numbers to the second test routine you can also\n+However, by changing 9.0 to 25.0 and 3.0 to 5.0, for example, you can get\n+a precondition violation for test case one. Also, by using any otherwise\n+correct but positive pair of numbers in the second test routine, you can also\n get a precondition violation. Postconditions are checked and reported\n the same way.\n \n @node Additional Tests\n @section Additional Tests\n \n @noindent\n-@command{gnattest} can add user written tests to the main suite of the test\n-driver. @command{gnattest} traverses given packages and searches for test\n+@command{gnattest} can add user-written tests to the main suite of the test\n+driver. @command{gnattest} traverses the given packages and searches for test\n routines. All procedures with a single in out parameter of a type which is\n-a derivation of AUnit.Test_Fixtures.Test_Fixture declared in package\n-specifications are added to the suites and then are executed by test driver.\n-(Set_Up and Tear_Down are filtered out).\n+derived from AUnit.Test_Fixtures.Test_Fixture and that are declared in package\n+specifications are added to the suites and are then executed by the test driver.\n+(Set_Up and Tear_Down are filtered out.)\n \n-An example illustrates two ways of crating test harness for user written tests.\n-Directory additional contains a AUnit based test driver written by hand.\n+An example illustrates two ways of creating test harnesses for user-written\n+tests. Directory additional_tests contains an AUnit-based test driver written\n+by hand.\n \n @smallexample\n <install_prefix>/share/examples/gnattest/additional_tests/\n @end smallexample\n \n-To create a test driver for already written tests use --harness-only option:\n+To create a test driver for already-written tests, use the --harness-only\n+option:\n \n @smallexample\n gnattest -Padditional/harness/harness.gpr --harness-dir=harness_only \\\n@@ -18169,7 +18169,7 @@ gnatmake -Pharness_only/test_driver.gpr\n harness_only/test_runner\n @end smallexample\n \n-Additional tests can also be executed together withgenerated tests:\n+Additional tests can also be executed together with generated tests:\n \n @smallexample\n gnattest -Psimple.gpr --additional-tests=additional/harness/harness.gpr \\\n@@ -18187,8 +18187,8 @@ The tool currently does not support following features:\n \n @itemize @bullet\n @item generic tests for generic packages and package instantiations\n-@item tests for protected operations and entries\n-@item acpects Pre-, Postcondition and Test_Case\n+@item tests for protected subprograms and entries\n+@item aspects Precondition, Postcondition, and Test_Case\n @end itemize\n \n @c *********************************"}, {"sha": "c301382a496914b81cea5a810216c85cc9dad8fc", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5972791c345f8e0a750ab5e5cde189ba5064d118", "patch": "@@ -5462,7 +5462,7 @@ package body Sem_Prag is\n             --  a non-atomic variable.\n \n             if C = Atomic_Synchronization\n-              and then not Is_Atomic (E)\n+              and then not (Is_Atomic (E) or else Has_Atomic_Components (E))\n             then\n                Error_Msg_N\n                  (\"pragma & requires atomic type or variable\","}, {"sha": "f6ea4b19470664e869267ef3028209781b67044a", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=5972791c345f8e0a750ab5e5cde189ba5064d118", "patch": "@@ -254,7 +254,9 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Expanded_Name\n-        or else NT (N).Nkind = N_Identifier);\n+        or else NT (N).Nkind = N_Explicit_Dereference\n+        or else NT (N).Nkind = N_Identifier\n+        or else NT (N).Nkind = N_Indexed_Component);\n       return Flag14 (N);\n    end Atomic_Sync_Required;\n \n@@ -3323,7 +3325,9 @@ package body Sinfo is\n    begin\n       pragma Assert (False\n         or else NT (N).Nkind = N_Expanded_Name\n-        or else NT (N).Nkind = N_Identifier);\n+        or else NT (N).Nkind = N_Explicit_Dereference\n+        or else NT (N).Nkind = N_Identifier\n+        or else NT (N).Nkind = N_Indexed_Component);\n       Set_Flag14 (N, Val);\n    end Set_Atomic_Sync_Required;\n "}, {"sha": "dce0c2d4c2d1b893e799c54c3354f1e26bceabbc", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5972791c345f8e0a750ab5e5cde189ba5064d118/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=5972791c345f8e0a750ab5e5cde189ba5064d118", "patch": "@@ -609,7 +609,13 @@ package Sinfo is\n    --    This flag is set in an identifier or expanded name node if the\n    --    corresponding reference (or assignment when on the left side of\n    --    an assignment) requires atomic synchronization, as a result of\n-   --    Atomic_Synchronization being enabled for the corresponding entity.\n+   --    Atomic_Synchronization being enabled for the corresponding entity\n+   --    or its type. Also set for Selector_Name of an N_Selected Component\n+   --    node if the type is atomic and requires atomic synchronization.\n+   --    Also set on an N_Explicit Dereference node if the resulting type\n+   --    is atomic and requires atomic synchronization. Finally it is set\n+   --    on an N_Indexed_Component node if the resulting type is Atomic, or\n+   --    if the array type or the array has pragma Atomic_Components set.\n \n    --  At_End_Proc (Node1)\n    --    This field is present in an N_Handled_Sequence_Of_Statements node.\n@@ -3175,6 +3181,7 @@ package Sinfo is\n       --  Sloc points to ALL\n       --  Prefix (Node3)\n       --  Actual_Designated_Subtype (Node4-Sem)\n+      --  Atomic_Sync_Required (Flag14-Sem)\n       --  plus fields for expression\n \n       -------------------------------\n@@ -3197,6 +3204,7 @@ package Sinfo is\n       --  Sloc contains a copy of the Sloc value of the Prefix\n       --  Prefix (Node3)\n       --  Expressions (List1)\n+      --  Atomic_Sync_Required (Flag14-Sem)\n       --  plus fields for expression\n \n       --  Note: if any of the subscripts requires a range check, then the"}]}