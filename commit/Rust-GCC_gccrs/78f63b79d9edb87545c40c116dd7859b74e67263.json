{"sha": "78f63b79d9edb87545c40c116dd7859b74e67263", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhmNjNiNzlkOWVkYjg3NTQ1YzQwYzExNmRkNzg1OWI3NGU2NzI2Mw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-07-22T13:25:59Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-07-22T13:25:59Z"}, "message": "common.opt (funsafe-loop-optimizations): Mark ignore.\n\n\t* common.opt (funsafe-loop-optimizations): Mark ignore.\n\t* doc/invoke.texi (funsafe-loop-optimizations): Remove.\n\t* loop-iv.c (get_simple_loop_desc): Remove unsafe-loop-optimizations\n\trelated code.\n\t* tree-ssa-loop-niter.c (finite_loop_p): Ditto.\n\t* config/bfin/bfin.c (bfin_can_use_doloop_p): Ditto.\n\nFrom-SVN: r238642", "tree": {"sha": "230f49f6c784e50a292c04e6f34f69faef898e31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/230f49f6c784e50a292c04e6f34f69faef898e31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78f63b79d9edb87545c40c116dd7859b74e67263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f63b79d9edb87545c40c116dd7859b74e67263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78f63b79d9edb87545c40c116dd7859b74e67263", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f63b79d9edb87545c40c116dd7859b74e67263/comments", "author": null, "committer": null, "parents": [{"sha": "faa1612aa309b073803613c82712bc940393ad74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa1612aa309b073803613c82712bc940393ad74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa1612aa309b073803613c82712bc940393ad74"}], "stats": {"total": 67, "additions": 13, "deletions": 54}, "files": [{"sha": "4f67430ec6f20d3649722432c6046a922967626b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78f63b79d9edb87545c40c116dd7859b74e67263", "patch": "@@ -1,3 +1,12 @@\n+2016-07-22  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* common.opt (funsafe-loop-optimizations): Mark ignore.\n+\t* doc/invoke.texi (funsafe-loop-optimizations): Remove.\n+\t* loop-iv.c (get_simple_loop_desc): Remove unsafe-loop-optimizations\n+\trelated code.\n+\t* tree-ssa-loop-niter.c (finite_loop_p): Ditto.\n+\t* config/bfin/bfin.c (bfin_can_use_doloop_p): Ditto.\n+\n 2016-07-22  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-niter.h (number_of_iterations_exit_assumptions): New"}, {"sha": "8a292ed78c8c6f1b0c18d84b388ceb8d181a0c1a", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=78f63b79d9edb87545c40c116dd7859b74e67263", "patch": "@@ -2507,8 +2507,8 @@ Perform loop unrolling for all loops.\n ; that control loops do not overflow and that the loops with nontrivial\n ; exit condition are not infinite\n funsafe-loop-optimizations\n-Common Report Var(flag_unsafe_loop_optimizations) Optimization\n-Allow loop optimizations to assume that the loops behave in normal way.\n+Common Ignore\n+Does nothing.  Preserved for backward compatibility.\n \n fassociative-math\n Common Report Var(flag_associative_math) SetByCombined Optimization"}, {"sha": "b6edf2c1c32ab101d745ccc40945980653f44443", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=78f63b79d9edb87545c40c116dd7859b74e67263", "patch": "@@ -3375,10 +3375,7 @@ bfin_can_use_doloop_p (const widest_int &, const widest_int &iterations_max,\n   /* Due to limitations in the hardware (an initial loop count of 0\n      does not loop 2^32 times) we must avoid to generate a hardware\n      loops when we cannot rule out this case.  */\n-  if (!flag_unsafe_loop_optimizations\n-      && wi::geu_p (iterations_max, 0xFFFFFFFF))\n-    return false;\n-  return true;\n+  return (wi::ltu_p (iterations_max, 0xFFFFFFFF));\n }\n \n /* Increment the counter for the number of loop instructions in the"}, {"sha": "c9e8e1d71575062a1b966cadca65eaabe0699fb1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=78f63b79d9edb87545c40c116dd7859b74e67263", "patch": "@@ -414,7 +414,7 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-switch-conversion -ftree-tail-merge -ftree-ter @gol\n -ftree-vectorize -ftree-vrp -funconstrained-commons @gol\n -funit-at-a-time -funroll-all-loops -funroll-loops @gol\n--funsafe-loop-optimizations -funsafe-math-optimizations -funswitch-loops @gol\n+-funsafe-math-optimizations -funswitch-loops @gol\n -fipa-ra -fvariable-expansion-in-unroller -fvect-cost-model -fvpt @gol\n -fweb -fwhole-program -fwpa -fuse-linker-plugin @gol\n --param @var{name}=@var{value}\n@@ -6818,15 +6818,6 @@ number of iterations of a loop are used to guide loop unrolling and peeling\n and loop exit test optimizations.\n This option is enabled by default.\n \n-@item -funsafe-loop-optimizations\n-@opindex funsafe-loop-optimizations\n-This option tells the loop optimizer to assume that loop indices do not\n-overflow, and that loops with nontrivial exit condition are not\n-infinite.  This enables a wider range of loop optimizations even if\n-the loop optimizer itself cannot prove that these assumptions are valid.\n-If you use @option{-Wunsafe-loop-optimizations}, the compiler warns you\n-if it finds this kind of loop.\n-\n @item -funconstrained-commons\n @opindex funconstrained-commons\n This option tells the compiler that variables declared in common blocks"}, {"sha": "78bec9e85217480ab01b5d4631af72e5f0810452", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=78f63b79d9edb87545c40c116dd7859b74e67263", "patch": "@@ -3027,42 +3027,6 @@ get_simple_loop_desc (struct loop *loop)\n   iv_analysis_loop_init (loop);\n   find_simple_exit (loop, desc);\n   loop->simple_loop_desc = desc;\n-\n-  if (desc->simple_p && (desc->assumptions || desc->infinite))\n-    {\n-      const char *wording;\n-\n-      /* Assume that no overflow happens and that the loop is finite.\n-\t We already warned at the tree level if we ran optimizations there.  */\n-      if (!flag_tree_loop_optimize && warn_unsafe_loop_optimizations)\n-\t{\n-\t  if (desc->infinite)\n-\t    {\n-\t      wording =\n-\t\tflag_unsafe_loop_optimizations\n-\t\t? N_(\"assuming that the loop is not infinite\")\n-\t\t: N_(\"cannot optimize possibly infinite loops\");\n-\t      warning (OPT_Wunsafe_loop_optimizations, \"%s\",\n-\t\t       gettext (wording));\n-\t    }\n-\t  if (desc->assumptions)\n-\t    {\n-\t      wording =\n-\t\tflag_unsafe_loop_optimizations\n-\t\t? N_(\"assuming that the loop counter does not overflow\")\n-\t\t: N_(\"cannot optimize loop, the loop counter may overflow\");\n-\t      warning (OPT_Wunsafe_loop_optimizations, \"%s\",\n-\t\t       gettext (wording));\n-\t    }\n-\t}\n-\n-      if (flag_unsafe_loop_optimizations && single_exit (loop))\n-\t{\n-\t  desc->assumptions = NULL_RTX;\n-\t  desc->infinite = NULL_RTX;\n-\t}\n-    }\n-\n   return desc;\n }\n "}, {"sha": "b7d7c324efd5ac82a07b1a13d238b3d707565520", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f63b79d9edb87545c40c116dd7859b74e67263/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=78f63b79d9edb87545c40c116dd7859b74e67263", "patch": "@@ -2362,8 +2362,6 @@ finite_loop_p (struct loop *loop)\n   widest_int nit;\n   int flags;\n \n-  if (flag_unsafe_loop_optimizations)\n-    return true;\n   flags = flags_from_decl_or_type (current_function_decl);\n   if ((flags & (ECF_CONST|ECF_PURE)) && !(flags & ECF_LOOPING_CONST_OR_PURE))\n     {"}]}