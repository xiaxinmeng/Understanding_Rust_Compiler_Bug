{"sha": "60698a19c77aef8c96d14238975e12fad653e7fb", "node_id": "C_kwDOANBUbNoAKDYwNjk4YTE5Yzc3YWVmOGM5NmQxNDIzODk3NWUxMmZhZDY1M2U3ZmI", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-07-01T05:17:32Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-23T09:05:02Z"}, "message": "AVX512FP16: Add fix(uns)?_truncmn2 for HF scalar and vector modes\n\nNB: 64bit/32bit vectorize for HFmode is not supported for now, will\nadjust this patch when V2HF/V4HF operations supported.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.md (fix<fixunssuffix>_trunchf<mode>2): New expander.\n\t(fixuns_trunchfhi2): Likewise.\n\t(*fixuns_trunchfsi2zext): New define_insn.\n\t* config/i386/sse.md (ssePHmodelower): New mode_attr.\n\t(fix<fixunssuffix>_trunc<ssePHmodelower><mode>2):\n\tNew expander for same element vector fix_truncate.\n\t(fix<fixunssuffix>_trunc<ssePHmodelower><mode>2):\n\tLikewise for V4HF to V4SI/V4DI fix_truncate.\n\t(fix<fixunssuffix>_truncv2hfv2di2):\n\tLikeise for V2HF to V2DI fix_truncate.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-trunchf.c: New test.\n\t* gcc.target/i386/avx512fp16-truncvnhf.c: Ditto.", "tree": {"sha": "03554bebd20e7ef196af0681af3c9ff9ea27166f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03554bebd20e7ef196af0681af3c9ff9ea27166f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60698a19c77aef8c96d14238975e12fad653e7fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60698a19c77aef8c96d14238975e12fad653e7fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60698a19c77aef8c96d14238975e12fad653e7fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60698a19c77aef8c96d14238975e12fad653e7fb/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fccd8855ed4ed9d1cc0e55fc1758b3288468657e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccd8855ed4ed9d1cc0e55fc1758b3288468657e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fccd8855ed4ed9d1cc0e55fc1758b3288468657e"}], "stats": {"total": 192, "additions": 192, "deletions": 0}, "files": [{"sha": "c6279e620c981210847f64ccecce55694110e196", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60698a19c77aef8c96d14238975e12fad653e7fb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60698a19c77aef8c96d14238975e12fad653e7fb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=60698a19c77aef8c96d14238975e12fad653e7fb", "patch": "@@ -4810,6 +4810,16 @@\n    }\n })\n \n+(define_insn \"fix<fixunssuffix>_trunchf<mode>2\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(any_fix:SWI48\n+\t  (match_operand:HF 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvttsh2<fixsuffix>si\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; Signed conversion to SImode.\n \n (define_expand \"fix_truncxfsi2\"\n@@ -4917,6 +4927,17 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*fixuns_trunchfsi2zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (unsigned_fix:SI\n+\t    (match_operand:HF 1 \"nonimmediate_operand\" \"vm\"))))]\n+  \"TARGET_64BIT && TARGET_AVX512FP16\"\n+  \"vcvttsh2usi\\t{%1, %k0|%k0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*fixuns_trunc<mode>si2_avx512f_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n@@ -4949,6 +4970,14 @@\n ;; Without these patterns, we'll try the unsigned SI conversion which\n ;; is complex for SSE, rather than the signed SI conversion, which isn't.\n \n+(define_expand \"fixuns_trunchfhi2\"\n+  [(set (match_dup 2)\n+\t(fix:SI (match_operand:HF 1 \"nonimmediate_operand\")))\n+   (set (match_operand:HI 0 \"nonimmediate_operand\")\n+\t(subreg:HI (match_dup 2) 0))]\n+  \"TARGET_AVX512FP16\"\n+  \"operands[2] = gen_reg_rtx (SImode);\")\n+\n (define_expand \"fixuns_trunc<mode>hi2\"\n   [(set (match_dup 2)\n \t(fix:SI (match_operand:MODEF 1 \"nonimmediate_operand\")))"}, {"sha": "f8a5f197f3ca1aa5c176be28bb05368c035f916a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60698a19c77aef8c96d14238975e12fad653e7fb/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60698a19c77aef8c96d14238975e12fad653e7fb/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=60698a19c77aef8c96d14238975e12fad653e7fb", "patch": "@@ -1034,6 +1034,13 @@\n    (V8DI \"V8HF\") (V4DI \"V8HF\") (V2DI \"V8HF\")\n    (V8DF \"V8HF\") (V16SF \"V16HF\") (V8SF \"V8HF\")])\n \n+;; Mapping of vector modes to vector hf modes of same element.\n+(define_mode_attr ssePHmodelower\n+  [(V32HI \"v32hf\") (V16HI \"v16hf\") (V8HI \"v8hf\")\n+   (V16SI \"v16hf\") (V8SI \"v8hf\") (V4SI \"v4hf\")\n+   (V8DI \"v8hf\") (V4DI \"v4hf\") (V2DI \"v2hf\")\n+   (V8DF \"v8hf\") (V16SF \"v16hf\") (V8SF \"v8hf\")])\n+\n ;; Mapping of vector modes to packed single mode of the same size\n (define_mode_attr ssePSmode\n   [(V16SI \"V16SF\") (V8DF \"V16SF\")\n@@ -6175,6 +6182,12 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"HF\")])\n \n+(define_expand \"fix<fixunssuffix>_trunc<ssePHmodelower><mode>2\"\n+  [(set (match_operand:VI2H_AVX512VL 0 \"register_operand\")\n+\t(any_fix:VI2H_AVX512VL\n+\t  (match_operand:<ssePHmode> 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16\")\n+\n (define_insn \"avx512fp16_fix<fixunssuffix>_trunc<mode>2<mask_name><round_saeonly_name>\"\n   [(set (match_operand:VI2H_AVX512VL 0 \"register_operand\" \"=v\")\n \t(any_fix:VI2H_AVX512VL\n@@ -6185,6 +6198,21 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"fix<fixunssuffix>_truncv4hf<mode>2\"\n+  [(set (match_operand:VI4_128_8_256 0 \"register_operand\")\n+\t(any_fix:VI4_128_8_256\n+\t  (match_operand:V4HF 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = lowpart_subreg (V8HFmode, operands[1], V4HFmode);\n+      emit_insn (gen_avx512fp16_fix<fixunssuffix>_trunc<mode>2 (operands[0],\n+\t\t\t\t\t\t\t\toperands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"avx512fp16_fix<fixunssuffix>_trunc<mode>2<mask_name>\"\n   [(set (match_operand:VI4_128_8_256 0 \"register_operand\" \"=v\")\n \t(any_fix:VI4_128_8_256\n@@ -6207,6 +6235,21 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"fix<fixunssuffix>_truncv2hfv2di2\"\n+  [(set (match_operand:V2DI 0 \"register_operand\")\n+\t(any_fix:V2DI\n+\t  (match_operand:V2HF 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = lowpart_subreg (V8HFmode, operands[1], V2HFmode);\n+      emit_insn (gen_avx512fp16_fix<fixunssuffix>_truncv2di2 (operands[0],\n+\t\t\t\t\t\t\t      operands[1]));\n+      DONE;\n+  }\n+})\n+\n (define_insn \"avx512fp16_fix<fixunssuffix>_truncv2di2<mask_name>\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n \t(any_fix:V2DI"}, {"sha": "2c025b7803c44f7f017483b3414442fa6d5d9c1f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-trunchf.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60698a19c77aef8c96d14238975e12fad653e7fb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-trunchf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60698a19c77aef8c96d14238975e12fad653e7fb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-trunchf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-trunchf.c?ref=60698a19c77aef8c96d14238975e12fad653e7fb", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2si\\[ \\\\t\\]+\\[^\\{\\n\\]*(?:%xmm\\[0-9\\]|\\\\(%esp\\\\))+, %eax(?:\\n|\\[ \\\\t\\]+#)\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2usi\\[ \\\\t\\]+\\[^\\{\\n\\]*(?:%xmm\\[0-9\\]|\\\\(%esp\\\\))+, %eax(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2si\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+, %rax(?:\\n|\\[ \\\\t\\]+#)\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"vcvttsh2usi\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+, %rax(?:\\n|\\[ \\\\t\\]+#)\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xorl\\[ \\\\t\\]+%edx, %edx\" { target ia32 } } } */\n+\n+#include <immintrin.h>\n+\n+short\n+__attribute__ ((noinline, noclone))\n+trunc_f16_to_si16 (_Float16 f)\n+{\n+  return f;\n+}\n+\n+unsigned short\n+__attribute__ ((noinline, noclone))\n+trunc_f16_to_su16 (_Float16 f)\n+{\n+  return f;\n+}\n+\n+int\n+__attribute__ ((noinline, noclone))\n+trunc_f16_to_si32 (_Float16 f)\n+{\n+  return f;\n+}\n+\n+unsigned int\n+__attribute__ ((noinline, noclone))\n+trunc_f16_to_su32 (_Float16 f)\n+{\n+  return f;\n+}\n+\n+long long\n+__attribute__ ((noinline, noclone))\n+trunc_f16_to_si64 (_Float16 f)\n+{\n+  return f;\n+}\n+\n+unsigned long long\n+__attribute__ ((noinline, noclone))\n+trunc_f16_to_su64 (_Float16 f)\n+{\n+  return f;\n+}\n+\n+unsigned long long\n+__attribute__ ((noinline, noclone))\n+trunc_f16_to_su64_zext (_Float16 f)\n+{\n+  return (unsigned int) f;\n+}\n+"}, {"sha": "ee55cd12300bd39c5bc74fb3c5f46c675698a119", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-truncvnhf.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60698a19c77aef8c96d14238975e12fad653e7fb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-truncvnhf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60698a19c77aef8c96d14238975e12fad653e7fb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-truncvnhf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-truncvnhf.c?ref=60698a19c77aef8c96d14238975e12fad653e7fb", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-slp-vectorize -mprefer-vector-width=512\" } */\n+\n+extern long long di[8];\n+extern unsigned long long udi[8];\n+extern int si[16];\n+extern unsigned int usi[16];\n+extern short hi[32];\n+extern unsigned short uhi[32];\n+extern _Float16 hf[32];\n+\n+#define DO_PRAGMA(X) _Pragma(#X)\n+\n+#define FIX_TRUNCHFVV(size, mode)\t    \\\n+  void __attribute__ ((noinline, noclone))  \\\n+fix_trunc##size##hf##v##size##mode ()   \\\n+{\\\n+  int i;  \\\n+  DO_PRAGMA (GCC unroll size)\t\\\n+  for (i = 0; i < size; i++)  \\\n+    mode[i] = hf[i];  \\\n+}\n+\n+FIX_TRUNCHFVV(32, hi)\n+FIX_TRUNCHFVV(16, hi)\n+FIX_TRUNCHFVV(8, hi)\n+FIX_TRUNCHFVV(16, si)\n+FIX_TRUNCHFVV(8, si)\n+FIX_TRUNCHFVV(4, si)\n+FIX_TRUNCHFVV(8, di)\n+FIX_TRUNCHFVV(4, di)\n+FIX_TRUNCHFVV(2, di)\n+\n+FIX_TRUNCHFVV(32, uhi)\n+FIX_TRUNCHFVV(16, uhi)\n+FIX_TRUNCHFVV(8, uhi)\n+FIX_TRUNCHFVV(16, usi)\n+FIX_TRUNCHFVV(8, usi)\n+FIX_TRUNCHFVV(4, usi)\n+FIX_TRUNCHFVV(8, udi)\n+FIX_TRUNCHFVV(4, udi)\n+FIX_TRUNCHFVV(2, udi)\n+\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2qq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uqq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2dq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2udq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2w\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvttph2uw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */"}]}