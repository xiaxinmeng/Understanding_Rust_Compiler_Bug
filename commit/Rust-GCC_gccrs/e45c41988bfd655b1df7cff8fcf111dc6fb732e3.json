{"sha": "e45c41988bfd655b1df7cff8fcf111dc6fb732e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ1YzQxOTg4YmZkNjU1YjFkZjdjZmY4ZmNmMTExZGM2ZmI3MzJlMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-14T11:36:25Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-14T11:36:25Z"}, "message": "vect: Account for unused IFN_LOAD_LANES results\n\nAt the moment, if we use only one vector of an LD4 result,\nwe'll treat the LD4 as having the cost of a single load.\nBut all 4 loads and any associated permutes take place\nregardless of which results are actually used.\n\nThis patch therefore counts the cost of unused LOAD_LANES\nresults against the first statement in a group.  An alternative\nwould be to multiply the ncopies of the first stmt by the group\nsize and treat other stmts in the group as having zero cost,\nbut I thought that might be more surprising when reading dumps.\n\ngcc/\n\t* tree-vect-stmts.c (vect_model_load_cost): Account for unused\n\tIFN_LOAD_LANES results.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cost_model_11.c: New test.\n\t* gcc.target/aarch64/sve/mask_struct_load_5.c: Use\n\t-fno-vect-cost-model.", "tree": {"sha": "85a81838fedfbd72c45587b2ca0f098b73658759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a81838fedfbd72c45587b2ca0f098b73658759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e45c41988bfd655b1df7cff8fcf111dc6fb732e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45c41988bfd655b1df7cff8fcf111dc6fb732e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45c41988bfd655b1df7cff8fcf111dc6fb732e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45c41988bfd655b1df7cff8fcf111dc6fb732e3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48f8d1d48f2c7c2bc724dee979bcf56957f233cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f8d1d48f2c7c2bc724dee979bcf56957f233cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f8d1d48f2c7c2bc724dee979bcf56957f233cb"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "d9f4ccc76de97ee1f7d1a37a7c3bf88b22103ec5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cost_model_11.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45c41988bfd655b1df7cff8fcf111dc6fb732e3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45c41988bfd655b1df7cff8fcf111dc6fb732e3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcost_model_11.c?ref=e45c41988bfd655b1df7cff8fcf111dc6fb732e3", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=128\" } */\n+\n+long\n+f (long *x, long *y, long *z, long n)\n+{\n+  long res = 0;\n+  for (long i = 0; i < n; ++i)\n+    z[i] = x[i * 4] + y[i * 4];\n+  return res;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tld4d\\t} } } */"}, {"sha": "2a33ee81d1ab1e8d3b4a8a2785ac96216ed25f5a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45c41988bfd655b1df7cff8fcf111dc6fb732e3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45c41988bfd655b1df7cff8fcf111dc6fb732e3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_5.c?ref=e45c41988bfd655b1df7cff8fcf111dc6fb732e3", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math --param aarch64-sve-compare-costs=0\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -fno-vect-cost-model\" } */\n \n #include <stdint.h>\n "}, {"sha": "4d72c4db2f72f33940312876577d7f0b792acecc", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e45c41988bfd655b1df7cff8fcf111dc6fb732e3/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e45c41988bfd655b1df7cff8fcf111dc6fb732e3/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e45c41988bfd655b1df7cff8fcf111dc6fb732e3", "patch": "@@ -1120,6 +1120,30 @@ vect_model_load_cost (vec_info *vinfo,\n      once per group anyhow.  */\n   bool first_stmt_p = (first_stmt_info == stmt_info);\n \n+  /* An IFN_LOAD_LANES will load all its vector results, regardless of which\n+     ones we actually need.  Account for the cost of unused results.  */\n+  if (first_stmt_p && !slp_node && memory_access_type == VMAT_LOAD_STORE_LANES)\n+    {\n+      unsigned int gaps = DR_GROUP_SIZE (first_stmt_info);\n+      stmt_vec_info next_stmt_info = first_stmt_info;\n+      do\n+\t{\n+\t  gaps -= 1;\n+\t  next_stmt_info = DR_GROUP_NEXT_ELEMENT (next_stmt_info);\n+\t}\n+      while (next_stmt_info);\n+      if (gaps)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t     \"vect_model_load_cost: %d unused vectors.\\n\",\n+\t\t\t     gaps);\n+\t  vect_get_load_cost (vinfo, stmt_info, ncopies * gaps, false,\n+\t\t\t      &inside_cost, &prologue_cost,\n+\t\t\t      cost_vec, cost_vec, true);\n+\t}\n+    }\n+\n   /* We assume that the cost of a single load-lanes instruction is\n      equivalent to the cost of DR_GROUP_SIZE separate loads.  If a grouped\n      access is instead being provided by a load-and-permute operation,"}]}