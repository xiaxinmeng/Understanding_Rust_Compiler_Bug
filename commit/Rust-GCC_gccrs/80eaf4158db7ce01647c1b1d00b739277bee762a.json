{"sha": "80eaf4158db7ce01647c1b1d00b739277bee762a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBlYWY0MTU4ZGI3Y2UwMTY0N2MxYjFkMDBiNzM5Mjc3YmVlNzYyYQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-06-01T19:44:22Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-06-01T19:44:22Z"}, "message": "tm.texi (Storage Layout): Remove ROUND_TYPE_SIZE and ROUND_TYPE_SIZE_UNIT.\n\n\t* doc/tm.texi (Storage Layout): Remove ROUND_TYPE_SIZE and\n\tROUND_TYPE_SIZE_UNIT.\n\n\t* stor-layout.c (finalize_record_size): Remove usages of\n\tROUND_TYPE_SIZE and ROUND_TYPE_SIZE_UNIT.\n\t(finalize_type_size): Likewise.\n\t(layout_type): Likewise.\n\n\t* system.h: Poison ROUND_TYPE_SIZE and ROUND_TYPE_SIZE_UNIT.\n\nada:\n\t* utils.c (finish_record_type): Remove usages of\n\tROUND_TYPE_SIZE and ROUND_TYPE_SIZE_UNIT.\n\nFrom-SVN: r67313", "tree": {"sha": "cb50fccda475e4350f9963df80763f153abc053d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb50fccda475e4350f9963df80763f153abc053d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80eaf4158db7ce01647c1b1d00b739277bee762a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80eaf4158db7ce01647c1b1d00b739277bee762a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80eaf4158db7ce01647c1b1d00b739277bee762a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80eaf4158db7ce01647c1b1d00b739277bee762a/comments", "author": null, "committer": null, "parents": [{"sha": "e094543212b2d376cefb9f939b40bec125994b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e094543212b2d376cefb9f939b40bec125994b5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e094543212b2d376cefb9f939b40bec125994b5b"}], "stats": {"total": 115, "additions": 31, "deletions": 84}, "files": [{"sha": "14776d02e5afb0f24d8d6499841d75afe238900d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80eaf4158db7ce01647c1b1d00b739277bee762a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80eaf4158db7ce01647c1b1d00b739277bee762a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=80eaf4158db7ce01647c1b1d00b739277bee762a", "patch": "@@ -1,3 +1,8 @@\n+2003-06-01  Andreas Jaeger  <aj@suse.de>\n+\n+\t* utils.c (finish_record_type): Remove usages of ROUND_TYPE_SIZE\n+\tand ROUND_TYPE_SIZE_UNIT.\n+\n 2003-05-22   Geert Bosch <bosch@gnat.com>\n \n \t* gnat_rm.texi : Remove reference to Ada Core Technologies.\n@@ -19,10 +24,10 @@\n \n 2003-05-01  Laurent Guerby <guerby@acm.org>\n \n-        PR ada/10546 \n+        PR ada/10546\n         * 5iosinte.ads: Increase pthread_cond_t size to match recent\n         LinuxThread and NPTL version, merge from ACT.\n-\t\n+\n 2003-04-28  Zack Weinberg  <zack@codesourcery.com>\n \n \t* utils.c (convert): No need to clear TREE_CST_RTL."}, {"sha": "8322d35e6cbafa963e4aecf2d46e1055c442b120", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80eaf4158db7ce01647c1b1d00b739277bee762a/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80eaf4158db7ce01647c1b1d00b739277bee762a/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=80eaf4158db7ce01647c1b1d00b739277bee762a", "patch": "@@ -63,7 +63,7 @@\n /* If nonzero, pretend we are allocating at global level.  */\n int force_global;\n \n-/* Tree nodes for the various types and decls we create.  */ \n+/* Tree nodes for the various types and decls we create.  */\n tree gnat_std_decls[(int) ADT_LAST];\n \n /* Functions to call for each of the possible raise reasons.  */\n@@ -84,12 +84,12 @@ static GTY(()) tree pending_elaborations;\n    lists for an inner context.  */\n \n struct e_stack GTY(()) {\n-  struct e_stack *next; \n-  tree elab_list; \n+  struct e_stack *next;\n+  tree elab_list;\n };\n static GTY(()) struct e_stack *elist_stack;\n \n-/* This variable keeps a table for types for each precision so that we only \n+/* This variable keeps a table for types for each precision so that we only\n    allocate each of them once. Signed and unsigned types are kept separate.\n \n    Note that these types are only used when fold-const requests something\n@@ -343,7 +343,7 @@ poplevel (keep, reverse, functionbody)\n   for (subblock_node = decl_chain; subblock_node;\n        subblock_node = TREE_CHAIN (subblock_node))\n     if (DECL_NAME (subblock_node) != 0)\n-      /* If the identifier was used or addressed via a local extern decl,  \n+      /* If the identifier was used or addressed via a local extern decl,\n \t don't forget that fact.   */\n       if (DECL_EXTERNAL (subblock_node))\n \t{\n@@ -509,7 +509,7 @@ gnat_init_decl_processing ()\n \n }\n \n-/* Create the predefined scalar types such as `integer_type_node' needed \n+/* Create the predefined scalar types such as `integer_type_node' needed\n    in the gcc back-end and initialize the global binding level.  */\n \n void\n@@ -589,7 +589,7 @@ init_gigi_decls (long_long_float_type, exception_type)\n     = create_subprog_decl\n     (get_identifier (\"system__soft_links__set_jmpbuf_address_soft\"),\n      NULL_TREE,\n-     build_function_type (void_type_node, \n+     build_function_type (void_type_node,\n \t\t\t  tree_cons (NULL_TREE, jmpbuf_ptr_type, endlink)),\n      NULL_TREE, 0, 1, 1, 0);\n \n@@ -681,7 +681,7 @@ init_gigi_decls (long_long_float_type, exception_type)\n   main_identifier_node = get_identifier (\"main\");\n }\n \f\n-/* This function is called indirectly from toplev.c to handle incomplete \n+/* This function is called indirectly from toplev.c to handle incomplete\n    declarations, i.e. VAR_DECL nodes whose DECL_SIZE is zero.  To be precise,\n    compile_file in toplev.c makes an indirect call through the function pointer\n    incomplete_decl_finalize_hook which is initialized to this routine in\n@@ -695,9 +695,9 @@ gnat_finish_incomplete_decl (dont_care)\n }\n \f\n /* Given a record type (RECORD_TYPE) and a chain of FIELD_DECL\n-   nodes (FIELDLIST), finish constructing the record or union type. \n+   nodes (FIELDLIST), finish constructing the record or union type.\n    If HAS_REP is nonzero, this record has a rep clause; don't call\n-   layout_type but merely set the size and alignment ourselves. \n+   layout_type but merely set the size and alignment ourselves.\n    If DEFER_DEBUG is nonzero, do not call the debugging routines\n    on this type; it will be done later. */\n \n@@ -847,14 +847,8 @@ finish_record_type (record_type, fieldlist, has_rep, defer_debug)\n       && ! TYPE_CONTAINS_TEMPLATE_P (record_type))\n     SET_TYPE_ADA_SIZE (record_type, ada_size);\n \n-#ifdef ROUND_TYPE_SIZE\n-  size = ROUND_TYPE_SIZE (record_type, size, TYPE_ALIGN (record_type));\n-  size_unit = ROUND_TYPE_SIZE_UNIT (record_type, size_unit,\n-\t\t\t\t    TYPE_ALIGN (record_type) / BITS_PER_UNIT);\n-#else\n   size = round_up (size, TYPE_ALIGN (record_type));\n   size_unit = round_up (size_unit, TYPE_ALIGN (record_type) / BITS_PER_UNIT);\n-#endif\n \n   if (has_rep\n       && ! (TREE_CODE (record_type) == RECORD_TYPE\n@@ -917,7 +911,7 @@ finish_record_type (record_type, fieldlist, has_rep, defer_debug)\n \t\t a boundary and they something was added.  Check for the\n \t\t first case first.  If not, see if there is any evidence\n \t\t of rounding.  If so, round the last position and try\n-\t\t again. \n+\t\t again.\n \n \t\t If this is a union, the position can be taken as zero. */\n \n@@ -1111,7 +1105,7 @@ split_plus (in, pvar)\n    PARM_DECL nodes that are the subprogram arguments.  CICO_LIST is the\n    copy-in/copy-out list to be stored into TYPE_CICO_LIST.\n    RETURNS_UNCONSTRAINED is nonzero if the function returns an unconstrained\n-   object.  RETURNS_BY_REF is nonzero if the function returns by reference. \n+   object.  RETURNS_BY_REF is nonzero if the function returns by reference.\n    RETURNS_WITH_DSP is nonzero if the function is to return with a\n    depressed stack pointer.  */\n \n@@ -1208,7 +1202,7 @@ create_index_type (min, max, index)\n }\n \f\n /* Return a TYPE_DECL node. TYPE_NAME gives the name of the type (a character\n-   string) and TYPE is a ..._TYPE node giving its data type. \n+   string) and TYPE is a ..._TYPE node giving its data type.\n    ARTIFICIAL_P is nonzero if this is a declaration that was generated\n    by the compiler.  DEBUG_INFO_P is nonzero if we need to write debugging\n    information about this type.  */\n@@ -1253,9 +1247,9 @@ create_type_decl (type_name, type, attr_list, artificial_p, debug_info_p)\n \n    PUBLIC_FLAG is nonzero if this definition is to be made visible outside of\n    the current compilation unit. This flag should be set when processing the\n-   variable definitions in a package specification.  EXTERN_FLAG is nonzero \n+   variable definitions in a package specification.  EXTERN_FLAG is nonzero\n    when processing an external variable declaration (as opposed to a\n-   definition: no storage is to be allocated for the variable here). \n+   definition: no storage is to be allocated for the variable here).\n \n    STATIC_FLAG is only relevant when not at top level.  In that case\n    it indicates whether to always allocate storage to the variable.   */\n@@ -1569,7 +1563,7 @@ process_attributes (decl, attr_list)\n \f\n /* Add some pending elaborations on the list.  */\n \n-void \n+void\n add_pending_elaborations (var_decl, var_init)\n      tree var_decl;\n      tree var_init;\n@@ -1759,7 +1753,7 @@ begin_subprog_body (subprog_decl)\n \n   /* Push all the PARM_DECL nodes onto the current scope (i.e. the scope of the\n      subprogram body) so that they can be recognized as local variables in the\n-     subprogram. \n+     subprogram.\n \n      The list of PARM_DECL nodes is stored in the right order in\n      DECL_ARGUMENTS.  Since ..._DECL nodes get stored in the reverse order in\n@@ -1899,7 +1893,7 @@ builtin_function (name, type, function_code, class, library_name, attrs)\n   return decl;\n }\n \n-/* Return an integer type with the number of bits of precision given by  \n+/* Return an integer type with the number of bits of precision given by\n    PRECISION.  UNSIGNEDP is nonzero if the type is unsigned; otherwise\n    it is a signed type.  */\n \n@@ -2382,7 +2376,7 @@ build_vms_descriptor (type, mech, gnat_entity)\n     case By_Descriptor_SB:\n       field_list\n \t= chainon (field_list,\n-\t\t   make_descriptor_field \n+\t\t   make_descriptor_field\n \t\t   (\"SB_L1\", gnat_type_for_size (32, 1), record_type,\n \t\t    TREE_CODE (type) == ARRAY_TYPE\n \t\t    ? TYPE_MIN_VALUE (TYPE_DOMAIN (type)) : size_zero_node));\n@@ -2627,7 +2621,7 @@ update_pointer_to (old_type, new_type)\n \t\t       build (PLACEHOLDER_EXPR, ptr),\n \t\t       TREE_CHAIN (TYPE_FIELDS (ptr)));\n \n-      update_pointer_to \n+      update_pointer_to\n \t(TREE_TYPE (TREE_TYPE (TYPE_FIELDS (ptr))),\n \t gnat_substitute_in_type (TREE_TYPE (TREE_TYPE (TYPE_FIELDS (ptr))),\n \t\t\t\t  TREE_CHAIN (TYPE_FIELDS (ptr)), new_ref));\n@@ -2920,7 +2914,7 @@ convert (type, expr)\n \n     case INDIRECT_REF:\n       /* If both types are record types, just convert the pointer and\n-\t make a new INDIRECT_REF. \n+\t make a new INDIRECT_REF.\n \n \t ??? Disable this for now since it causes problems with the\n \t code in build_binary_op for MODIFY_EXPR which wants to\n@@ -3233,7 +3227,7 @@ unchecked_convert (type, expr)\n \t\t\t\t     GET_MODE_BITSIZE (TYPE_MODE (type))))\n     {\n       tree rec_type = make_node (RECORD_TYPE);\n-      tree field = create_field_decl (get_identifier (\"OBJ\"), type, \n+      tree field = create_field_decl (get_identifier (\"OBJ\"), type,\n \t\t\t\t      rec_type, 1, 0, 0, 0);\n \n       TYPE_FIELDS (rec_type) = field;"}, {"sha": "839cf108c227112dd535727a2030fc894d5f45d4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80eaf4158db7ce01647c1b1d00b739277bee762a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80eaf4158db7ce01647c1b1d00b739277bee762a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=80eaf4158db7ce01647c1b1d00b739277bee762a", "patch": "@@ -1280,21 +1280,6 @@ Normally, this is not needed.  See the file @file{c4x.h} for an example\n of how to use this macro to prevent a structure having a floating point\n field from being accessed in an integer mode.\n \n-@findex ROUND_TYPE_SIZE\n-@item ROUND_TYPE_SIZE (@var{type}, @var{computed}, @var{specified})\n-Define this macro as an expression for the overall size of a type\n-(given by @var{type} as a tree node) when the size computed in the\n-usual way is @var{computed} and the alignment is @var{specified}.\n-\n-The default is to round @var{computed} up to a multiple of @var{specified}.\n-\n-@findex ROUND_TYPE_SIZE_UNIT\n-@item ROUND_TYPE_SIZE_UNIT (@var{type}, @var{computed}, @var{specified})\n-Similar to @code{ROUND_TYPE_SIZE}, but sizes and alignments are\n-specified in units (bytes).  If you define @code{ROUND_TYPE_SIZE},\n-you must also define this macro and they must be defined consistently\n-with each other.\n-\n @findex ROUND_TYPE_ALIGN\n @item ROUND_TYPE_ALIGN (@var{type}, @var{computed}, @var{specified})\n Define this macro as an expression for the alignment of a type (given"}, {"sha": "c02192f87fc2f77820a06fc4b061ef59c1a78d4a", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80eaf4158db7ce01647c1b1d00b739277bee762a/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80eaf4158db7ce01647c1b1d00b739277bee762a/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=80eaf4158db7ce01647c1b1d00b739277bee762a", "patch": "@@ -1279,17 +1279,9 @@ finalize_record_size (rli)\n       = size_binop (PLUS_EXPR, unpadded_size_unit, size_one_node);\n \n   /* Round the size up to be a multiple of the required alignment */\n-#ifdef ROUND_TYPE_SIZE\n-  TYPE_SIZE (rli->t) = ROUND_TYPE_SIZE (rli->t, unpadded_size,\n-\t\t\t\t\tTYPE_ALIGN (rli->t));\n-  TYPE_SIZE_UNIT (rli->t)\n-    = ROUND_TYPE_SIZE_UNIT (rli->t, unpadded_size_unit,\n-\t\t\t    TYPE_ALIGN (rli->t) / BITS_PER_UNIT);\n-#else\n   TYPE_SIZE (rli->t) = round_up (unpadded_size, TYPE_ALIGN (rli->t));\n   TYPE_SIZE_UNIT (rli->t) = round_up (unpadded_size_unit,\n \t\t\t\t      TYPE_ALIGN (rli->t) / BITS_PER_UNIT);\n-#endif\n \n   if (warn_padded && TREE_CONSTANT (unpadded_size)\n       && simple_cst_equal (unpadded_size, TYPE_SIZE (rli->t)) == 0)\n@@ -1308,13 +1300,7 @@ finalize_record_size (rli)\n       rli->unpacked_align = MAX (TYPE_ALIGN (rli->t), rli->unpacked_align);\n #endif\n \n-#ifdef ROUND_TYPE_SIZE\n-      unpacked_size = ROUND_TYPE_SIZE (rli->t, TYPE_SIZE (rli->t),\n-\t\t\t\t       rli->unpacked_align);\n-#else\n       unpacked_size = round_up (TYPE_SIZE (rli->t), rli->unpacked_align);\n-#endif\n-\n       if (simple_cst_equal (unpacked_size, TYPE_SIZE (rli->t)))\n \t{\n \t  TYPE_PACKED (rli->t) = 0;\n@@ -1470,17 +1456,9 @@ finalize_type_size (type)\n \n   if (TYPE_SIZE (type) != 0)\n     {\n-#ifdef ROUND_TYPE_SIZE\n-      TYPE_SIZE (type)\n-\t= ROUND_TYPE_SIZE (type, TYPE_SIZE (type), TYPE_ALIGN (type));\n-      TYPE_SIZE_UNIT (type)\n-\t= ROUND_TYPE_SIZE_UNIT (type, TYPE_SIZE_UNIT (type),\n-\t\t\t\tTYPE_ALIGN (type) / BITS_PER_UNIT);\n-#else\n       TYPE_SIZE (type) = round_up (TYPE_SIZE (type), TYPE_ALIGN (type));\n       TYPE_SIZE_UNIT (type)\n \t= round_up (TYPE_SIZE_UNIT (type), TYPE_ALIGN (type) / BITS_PER_UNIT);\n-#endif\n     }\n \n   /* Evaluate nonconstant sizes only once, either now or as soon as safe.  */\n@@ -1779,22 +1757,6 @@ layout_type (type)\n \tTYPE_ALIGN (type) = MAX (TYPE_ALIGN (element), BITS_PER_UNIT);\n #endif\n \tTYPE_USER_ALIGN (type) = TYPE_USER_ALIGN (element);\n-\n-#ifdef ROUND_TYPE_SIZE\n-\tif (TYPE_SIZE (type) != 0)\n-\t  {\n-\t    tree tmp\n-\t      = ROUND_TYPE_SIZE (type, TYPE_SIZE (type), TYPE_ALIGN (type));\n-\n-\t    /* If the rounding changed the size of the type, remove any\n-\t       pre-calculated TYPE_SIZE_UNIT.  */\n-\t    if (simple_cst_equal (TYPE_SIZE (type), tmp) != 1)\n-\t      TYPE_SIZE_UNIT (type) = NULL;\n-\n-\t    TYPE_SIZE (type) = tmp;\n-\t  }\n-#endif\n-\n \tTYPE_MODE (type) = BLKmode;\n \tif (TYPE_SIZE (type) != 0\n #ifdef MEMBER_TYPE_FORCES_BLK"}, {"sha": "d308323fd787b541bb9ea022b66a8c56658bda9f", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80eaf4158db7ce01647c1b1d00b739277bee762a/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80eaf4158db7ce01647c1b1d00b739277bee762a/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=80eaf4158db7ce01647c1b1d00b739277bee762a", "patch": "@@ -641,7 +641,8 @@ typedef char _Bool;\n \tFUNCTION_BLOCK_PROFILER_EXIT MACHINE_STATE_SAVE\t\t\t   \\\n \tMACHINE_STATE_RESTORE SCCS_DIRECTIVE SECTION_ASM_OP\t\t   \\\n \tASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL ASM_OUTPUT_INTERNAL_LABEL \\\n-\tOBJC_PROLOGUE ALLOCATE_TRAMPOLINE HANDLE_PRAGMA\n+\tOBJC_PROLOGUE ALLOCATE_TRAMPOLINE HANDLE_PRAGMA ROUND_TYPE_SIZE\t   \\\n+\tROUND_TYPE_SIZE_UNIT\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}