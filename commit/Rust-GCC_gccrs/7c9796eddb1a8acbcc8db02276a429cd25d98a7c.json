{"sha": "7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M5Nzk2ZWRkYjFhOGFjYmNjOGRiMDIyNzZhNDI5Y2QyNWQ5OGE3Yw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-09-22T13:16:41Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-09-22T13:16:41Z"}, "message": "make next/prev active_insn and active_insn_p take rtx_insn *\n\ngcc/ChangeLog:\n\n2016-09-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* emit-rtl.c (next_active_insn): Change argument type to\n\trtx_insn *.\n\t(prev_active_insn): Likewise.\n\t(active_insn_p): Likewise.\n\t* rtl.h: Adjust prototypes.\n\t* cfgcleanup.c (merge_blocks_move_successor_nojumps): Adjust.\n\t* config/arc/arc.md: Likewise.\n\t* config/pa/pa.c (branch_to_delay_slot_p): Likewise.\n\t(branch_needs_nop_p): Likewise.\n\t(use_skip_p): Likewise.\n\t* config/sh/sh.c (gen_block_redirect): Likewise.\n\t(split_branches): Likewise.\n\t* reorg.c (optimize_skip): Likewise.\n\t(fill_simple_delay_slots): Likewise.\n\t(fill_slots_from_thread): Likewise.\n\t(relax_delay_slots): Likewise.\n\t* resource.c (mark_target_live_regs): Likewise.\n\nFrom-SVN: r240361", "tree": {"sha": "0267556b73019ac1ac180982195b11798af482d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0267556b73019ac1ac180982195b11798af482d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/comments", "author": null, "committer": null, "parents": [{"sha": "1f00691e9b28370c9e9986afc46dd9f7c42024bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f00691e9b28370c9e9986afc46dd9f7c42024bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f00691e9b28370c9e9986afc46dd9f7c42024bc"}], "stats": {"total": 116, "additions": 75, "deletions": 41}, "files": [{"sha": "9a52dc4372c0b8ed0930bea6f7ab5975db227152", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "patch": "@@ -1,3 +1,23 @@\n+2016-09-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* emit-rtl.c (next_active_insn): Change argument type to\n+\trtx_insn *.\n+\t(prev_active_insn): Likewise.\n+\t(active_insn_p): Likewise.\n+\t* rtl.h: Adjust prototypes.\n+\t* cfgcleanup.c (merge_blocks_move_successor_nojumps): Adjust.\n+\t* config/arc/arc.md: Likewise.\n+\t* config/pa/pa.c (branch_to_delay_slot_p): Likewise.\n+\t(branch_needs_nop_p): Likewise.\n+\t(use_skip_p): Likewise.\n+\t* config/sh/sh.c (gen_block_redirect): Likewise.\n+\t(split_branches): Likewise.\n+\t* reorg.c (optimize_skip): Likewise.\n+\t(fill_simple_delay_slots): Likewise.\n+\t(fill_slots_from_thread): Likewise.\n+\t(relax_delay_slots): Likewise.\n+\t* resource.c (mark_target_live_regs): Likewise.\n+\n 2016-09-22  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* config/cris/cris.c (cris_asm_output_case_end): Change argument"}, {"sha": "2e2a63559f520cb57af305b8031fd2cc9c26da13", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "patch": "@@ -708,7 +708,7 @@ merge_blocks_move_successor_nojumps (basic_block a, basic_block b)\n   /* If there is a jump table following block B temporarily add the jump table\n      to block B so that it will also be moved to the correct location.  */\n   if (tablejump_p (BB_END (b), &label, &table)\n-      && prev_active_insn (label) == BB_END (b))\n+      && prev_active_insn (as_a<rtx_insn *> (label)) == BB_END (b))\n     {\n       BB_END (b) = table;\n     }"}, {"sha": "ac7346bc0a6dd6650912c959bb83a8de9d03036f", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "patch": "@@ -5122,16 +5122,29 @@\n \t\t  scan = as_a <rtx_insn *> (XEXP (SET_SRC (PATTERN (scan)), 0));\n \t\t  continue;\n \t\t}\n-\t      if (JUMP_LABEL (scan)\n-\t\t  /* JUMP_LABEL might be simple_return instead if an insn.  */\n-\t\t  && (!INSN_P (JUMP_LABEL (scan))\n-\t\t      || (!next_active_insn (JUMP_LABEL (scan))\n-\t\t\t  || (recog_memoized (next_active_insn (JUMP_LABEL (scan)))\n-\t\t\t      != CODE_FOR_doloop_begin_i)))\n-\t\t  && (!next_active_insn (NEXT_INSN (PREV_INSN (scan)))\n-\t\t      || (recog_memoized\n-\t\t\t   (next_active_insn (NEXT_INSN (PREV_INSN (scan))))\n-\t\t\t  != CODE_FOR_doloop_begin_i)))\n+\n+\t      rtx lab = JUMP_LABEL (scan);\n+\t      if (!lab)\n+\t\tbreak;\n+\n+\t      rtx_insn *next_scan\n+\t\t= next_active_insn (NEXT_INSN (PREV_INSN (scan)));\n+\t      if (next_scan\n+\t\t  && recog_memoized (next_scan) != CODE_FOR_doloop_begin_i)\n+\t\tbreak;\n+\n+\t      /* JUMP_LABEL might be simple_return instead if an insn.  */\n+\t      if (!INSN_P (lab))\n+\t\t{\n+\t\t  n_insns++;\n+\t\t  break;\n+\t\t}\n+\n+\t      rtx_insn *next_lab = next_active_insn (as_a<rtx_insn *> (lab));\n+\t      if (next_lab\n+\t\t  && recog_memoized (next_lab) != CODE_FOR_doloop_begin_i)\n+\t\tbreak;\n+\n \t\tn_insns++;\n \t    }\n \t  break;"}, {"sha": "a02010c9ccffbbf975d9c9e01fdc9449d1b58e06", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "patch": "@@ -6445,7 +6445,7 @@ branch_to_delay_slot_p (rtx_insn *insn)\n   if (dbr_sequence_length ())\n     return FALSE;\n \n-  jump_insn = next_active_insn (JUMP_LABEL (insn));\n+  jump_insn = next_active_insn (JUMP_LABEL_AS_INSN (insn));\n   while (insn)\n     {\n       insn = next_active_insn (insn);\n@@ -6479,7 +6479,7 @@ branch_needs_nop_p (rtx_insn *insn)\n   if (dbr_sequence_length ())\n     return FALSE;\n \n-  jump_insn = next_active_insn (JUMP_LABEL (insn));\n+  jump_insn = next_active_insn (JUMP_LABEL_AS_INSN (insn));\n   while (insn)\n     {\n       insn = next_active_insn (insn);\n@@ -6502,7 +6502,7 @@ branch_needs_nop_p (rtx_insn *insn)\n static bool\n use_skip_p (rtx_insn *insn)\n {\n-  rtx_insn *jump_insn = next_active_insn (JUMP_LABEL (insn));\n+  rtx_insn *jump_insn = next_active_insn (JUMP_LABEL_AS_INSN (insn));\n \n   while (insn)\n     {"}, {"sha": "a9b5a14e21101a3e6ddc951a8a41c0813136b4a5", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "patch": "@@ -5503,7 +5503,8 @@ gen_block_redirect (rtx_insn *jump, int addr, int need_block)\n \n   else if (optimize && need_block >= 0)\n     {\n-      rtx_insn *next = next_active_insn (next_active_insn (dest));\n+      rtx_insn *next = next_active_insn (as_a<rtx_insn *> (dest));\n+      next = next_active_insn (next);\n       if (next && JUMP_P (next)\n \t  && GET_CODE (PATTERN (next)) == SET\n \t  && recog_memoized (next) == CODE_FOR_jump_compact)\n@@ -6395,9 +6396,8 @@ split_branches (rtx_insn *first)\n \t\t/* We can't use JUMP_LABEL here because it might be undefined\n \t\t   when not optimizing.  */\n \t\t/* A syntax error might cause beyond to be NULL_RTX.  */\n-\t\tbeyond\n-\t\t  = next_active_insn (XEXP (XEXP (SET_SRC (PATTERN (insn)), 1),\n-\t\t\t\t\t    0));\n+\t\trtx temp = XEXP (XEXP (SET_SRC (PATTERN (insn)), 1), 0);\n+\t\tbeyond = next_active_insn (as_a<rtx_insn *> (temp));\n \n \t\tif (beyond\n \t\t    && (JUMP_P (beyond)"}, {"sha": "54032870535342c034467cd26bf2cb8c1c2af217", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "patch": "@@ -3490,7 +3490,7 @@ last_call_insn (void)\n    standalone USE and CLOBBER insn.  */\n \n int\n-active_insn_p (const_rtx insn)\n+active_insn_p (const rtx_insn *insn)\n {\n   return (CALL_P (insn) || JUMP_P (insn)\n \t  || JUMP_TABLE_DATA_P (insn) /* FIXME */\n@@ -3501,10 +3501,8 @@ active_insn_p (const_rtx insn)\n }\n \n rtx_insn *\n-next_active_insn (rtx uncast_insn)\n+next_active_insn (rtx_insn *insn)\n {\n-  rtx_insn *insn = safe_as_a <rtx_insn *> (uncast_insn);\n-\n   while (insn)\n     {\n       insn = NEXT_INSN (insn);\n@@ -3520,10 +3518,8 @@ next_active_insn (rtx uncast_insn)\n    standalone USE and CLOBBER insn.  */\n \n rtx_insn *\n-prev_active_insn (rtx uncast_insn)\n+prev_active_insn (rtx_insn *insn)\n {\n-  rtx_insn *insn = safe_as_a <rtx_insn *> (uncast_insn);\n-\n   while (insn)\n     {\n       insn = PREV_INSN (insn);"}, {"sha": "40f143feddf0086df27f9f9440bb4a6487ba9b1f", "filename": "gcc/reorg.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "patch": "@@ -749,7 +749,7 @@ optimize_skip (rtx_jump_insn *insn, vec<rtx_insn *> *delay_list)\n      we have one insn followed by a branch to the same label we branch to.\n      In both of these cases, inverting the jump and annulling the delay\n      slot give the same effect in fewer insns.  */\n-  if (next_trial == next_active_insn (JUMP_LABEL (insn))\n+  if (next_trial == next_active_insn (JUMP_LABEL_AS_INSN (insn))\n       || (next_trial != 0\n \t  && simplejump_or_return_p (next_trial)\n \t  && JUMP_LABEL (insn) == JUMP_LABEL (next_trial)))\n@@ -2198,7 +2198,7 @@ fill_simple_delay_slots (int non_jumps_p)\n \t      && trial\n \t      && jump_to_label_p (trial)\n \t      && simplejump_p (trial)\n-\t      && (next_trial = next_active_insn (JUMP_LABEL (trial))) != 0\n+\t      && (next_trial = next_active_insn (JUMP_LABEL_AS_INSN (trial))) != 0\n \t      && ! (NONJUMP_INSN_P (next_trial)\n \t\t    && GET_CODE (PATTERN (next_trial)) == SEQUENCE)\n \t      && !JUMP_P (next_trial)\n@@ -2238,8 +2238,8 @@ fill_simple_delay_slots (int non_jumps_p)\n \t  && simplejump_p (jump_insn)\n \t  && slots_filled != slots_to_fill)\n \tfill_slots_from_thread (jump_insn, const_true_rtx,\n-\t\t\t\tnext_active_insn (JUMP_LABEL (insn)), NULL, 1,\n-\t\t\t\t1, own_thread_p (JUMP_LABEL (insn),\n+\t\t\t\tnext_active_insn (JUMP_LABEL_AS_INSN (insn)),\n+\t\t\t\tNULL, 1, 1, own_thread_p (JUMP_LABEL (insn),\n \t\t\t\t\t\t JUMP_LABEL (insn), 0),\n \t\t\t\tslots_to_fill, &slots_filled, &delay_list);\n \n@@ -2575,7 +2575,8 @@ fill_slots_from_thread (rtx_jump_insn *insn, rtx condition,\n \t\t\t     to call update_block and delete_insn.  */\n \t\t\t  fix_reg_dead_note (prior_insn, insn);\n \t\t\t  update_reg_unused_notes (prior_insn, new_thread);\n-\t\t\t  new_thread = next_active_insn (new_thread);\n+\t\t\t  new_thread\n+\t\t\t    = next_active_insn (as_a<rtx_insn *> (new_thread));\n \t\t\t}\n \t\t      break;\n \t\t    }\n@@ -3079,7 +3080,7 @@ delete_jump (rtx_insn *insn)\n }\n \n static rtx_insn *\n-label_before_next_insn (rtx x, rtx scan_limit)\n+label_before_next_insn (rtx_insn *x, rtx scan_limit)\n {\n   rtx_insn *insn = next_active_insn (x);\n   while (insn)\n@@ -3142,7 +3143,8 @@ relax_delay_slots (rtx_insn *first)\n \t  if (ANY_RETURN_P (target_label))\n \t    target_label = find_end_label (target_label);\n \n-\t  if (target_label && next_active_insn (target_label) == next\n+\t  if (target_label\n+\t      && next_active_insn (as_a<rtx_insn *> (target_label)) == next\n \t      && ! condjump_in_parallel_p (jump_insn)\n \t      && ! (next && switch_text_sections_between_p (jump_insn, next)))\n \t    {\n@@ -3163,7 +3165,8 @@ relax_delay_slots (rtx_insn *first)\n \t  if (next && simplejump_or_return_p (next)\n \t      && any_condjump_p (jump_insn)\n \t      && target_label\n-\t      && next_active_insn (target_label) == next_active_insn (next)\n+\t      && (next_active_insn (as_a<rtx_insn *> (target_label))\n+\t\t  == next_active_insn (next))\n \t      && no_labels_between_p (jump_insn, next)\n \t      && targetm.can_follow_jump (jump_insn, next))\n \t    {\n@@ -3318,7 +3321,7 @@ relax_delay_slots (rtx_insn *first)\n \t{\n \t  /* Figure out where to emit the special USE insn so we don't\n \t     later incorrectly compute register live/death info.  */\n-\t  rtx_insn *tmp = next_active_insn (trial);\n+\t  rtx_insn *tmp = next_active_insn (as_a<rtx_insn *> (trial));\n \t  if (tmp == 0)\n \t    tmp = find_end_label (simple_return_rtx);\n \n@@ -3366,7 +3369,7 @@ relax_delay_slots (rtx_insn *first)\n       /* See if we have a simple (conditional) jump that is useless.  */\n       if (! INSN_ANNULLED_BRANCH_P (delay_jump_insn)\n \t  && ! condjump_in_parallel_p (delay_jump_insn)\n-\t  && prev_active_insn (target_label) == insn\n+\t  && prev_active_insn (as_a<rtx_insn *> (target_label)) == insn\n \t  && ! BARRIER_P (prev_nonnote_insn (as_a<rtx_insn *> (target_label)))\n \t  /* If the last insn in the delay slot sets CC0 for some insn,\n \t     various code assumes that it is in a delay slot.  We could\n@@ -3429,7 +3432,8 @@ relax_delay_slots (rtx_insn *first)\n       if (! INSN_ANNULLED_BRANCH_P (delay_jump_insn)\n \t  && any_condjump_p (delay_jump_insn)\n \t  && next && simplejump_or_return_p (next)\n-\t  && next_active_insn (target_label) == next_active_insn (next)\n+\t  && (next_active_insn (as_a<rtx_insn *> (target_label))\n+\t      == next_active_insn (next))\n \t  && no_labels_between_p (insn, next))\n \t{\n \t  rtx label = JUMP_LABEL (next);\n@@ -3480,7 +3484,8 @@ relax_delay_slots (rtx_insn *first)\n \ttry_merge_delay_insns (insn, next);\n       else if (! INSN_FROM_TARGET_P (pat->insn (1))\n \t       && own_thread_p (target_label, target_label, 0))\n-\ttry_merge_delay_insns (insn, next_active_insn (target_label));\n+\ttry_merge_delay_insns (insn,\n+\t\t\t       next_active_insn (as_a<rtx_insn *> (target_label)));\n \n       /* If we get here, we haven't deleted INSN.  But we may have deleted\n \t NEXT, so recompute it.  */"}, {"sha": "1d7ce958667e294ef3ec03ac92ee9f45e6d2d86f", "filename": "gcc/resource.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "patch": "@@ -1122,7 +1122,7 @@ mark_target_live_regs (rtx_insn *insns, rtx target_maybe_return, struct resource\n       rtx_insn *stop_insn = next_active_insn (jump_insn);\n \n       if (!ANY_RETURN_P (jump_target))\n-\tjump_target = next_active_insn (jump_target);\n+\tjump_target = next_active_insn (as_a<rtx_insn *> (jump_target));\n       mark_target_live_regs (insns, jump_target, &new_resources);\n       CLEAR_RESOURCE (&set);\n       CLEAR_RESOURCE (&needed);"}, {"sha": "22ee2e6ab94dc03e2bf2d8b81134e89b9d08e489", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9796eddb1a8acbcc8db02276a429cd25d98a7c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=7c9796eddb1a8acbcc8db02276a429cd25d98a7c", "patch": "@@ -2844,9 +2844,9 @@ extern rtx_insn *prev_nonnote_nondebug_insn (rtx_insn *);\n extern rtx_insn *next_nonnote_nondebug_insn (rtx_insn *);\n extern rtx_insn *prev_real_insn (rtx_insn *);\n extern rtx_insn *next_real_insn (rtx);\n-extern rtx_insn *prev_active_insn (rtx);\n-extern rtx_insn *next_active_insn (rtx);\n-extern int active_insn_p (const_rtx);\n+extern rtx_insn *prev_active_insn (rtx_insn *);\n+extern rtx_insn *next_active_insn (rtx_insn *);\n+extern int active_insn_p (const rtx_insn *);\n extern rtx_insn *next_cc0_user (rtx);\n extern rtx_insn *prev_cc0_setter (rtx_insn *);\n "}]}