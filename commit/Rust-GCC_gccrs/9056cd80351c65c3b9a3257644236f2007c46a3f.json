{"sha": "9056cd80351c65c3b9a3257644236f2007c46a3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA1NmNkODAzNTFjNjVjM2I5YTMyNTc2NDQyMzZmMjAwN2M0NmEzZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-14T17:51:40Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-14T17:51:40Z"}, "message": "i386: Add V2DFmode float trunc/extend functions [PR95046]\n\ngcc/ChangeLog:\n\n\tPR target/95046\n\t* config/i386/sse.md (truncv2dfv2df2): New insn pattern.\n\t(extendv2sfv2df2): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/95046\n\t* gcc.target/i386/pr95046-7.c: New test.", "tree": {"sha": "79922706abb4cd0c42a69fdb01aed1e2aff8f9a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79922706abb4cd0c42a69fdb01aed1e2aff8f9a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9056cd80351c65c3b9a3257644236f2007c46a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9056cd80351c65c3b9a3257644236f2007c46a3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9056cd80351c65c3b9a3257644236f2007c46a3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9056cd80351c65c3b9a3257644236f2007c46a3f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "098cf31aa2631db6922d4de5661c1b0ce19af0aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098cf31aa2631db6922d4de5661c1b0ce19af0aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098cf31aa2631db6922d4de5661c1b0ce19af0aa"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "2d6b6c07a3b95eb5a07d375d9df59f80ee669e9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9056cd80351c65c3b9a3257644236f2007c46a3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9056cd80351c65c3b9a3257644236f2007c46a3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9056cd80351c65c3b9a3257644236f2007c46a3f", "patch": "@@ -1,3 +1,9 @@\n+2020-05-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95046\n+\t* config/i386/sse.md (truncv2dfv2df2): New insn pattern.\n+\t(extendv2sfv2df2): Ditto.\n+\n 2020-05-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* configure: Regenerated."}, {"sha": "28d2c434caff22944910f42e39cd5ca831222367", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9056cd80351c65c3b9a3257644236f2007c46a3f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9056cd80351c65c3b9a3257644236f2007c46a3f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=9056cd80351c65c3b9a3257644236f2007c46a3f", "patch": "@@ -6504,6 +6504,25 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_insn \"truncv2dfv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=v\")\n+\t(float_truncate:V2SF\n+\t  (match_operand:V2DF 1 \"vector_operand\" \"vBm\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  if (TARGET_AVX)\n+    return \"vcvtpd2ps{x}\\t{%1, %0|%0, %1}\";\n+  else\n+    return \"cvtpd2ps\\t{%1, %0|%0, %1}\";\n+}\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"amdfam10_decode\" \"double\")\n+   (set_attr \"athlon_decode\" \"vector\")\n+   (set_attr \"bdver1_decode\" \"double\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n (define_insn \"*sse2_cvtpd2ps_mask\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SF\n@@ -6664,6 +6683,20 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V2DF\")])\n \n+(define_insn \"extendv2sfv2df2\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n+\t(float_extend:V2DF\n+\t  (match_operand:V2SF 1 \"register_operand\" \"v\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"%vcvtps2pd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"amdfam10_decode\" \"direct\")\n+   (set_attr \"athlon_decode\" \"double\")\n+   (set_attr \"bdver1_decode\" \"double\")\n+   (set_attr \"prefix_data16\" \"0\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n (define_expand \"vec_unpacks_hi_v4sf\"\n   [(set (match_dup 2)\n    (vec_select:V4SF"}, {"sha": "d82df8ea9616f801eb5f9ae08c6f6dc3158a5f6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9056cd80351c65c3b9a3257644236f2007c46a3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9056cd80351c65c3b9a3257644236f2007c46a3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9056cd80351c65c3b9a3257644236f2007c46a3f", "patch": "@@ -1,3 +1,8 @@\n+2020-05-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95046\n+\t* gcc.target/i386/pr95046-7.c: New test.\n+\n 2020-05-14  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/78446"}, {"sha": "b3702a5d761b110b5a2186a8e46502250d898f89", "filename": "gcc/testsuite/gcc.target/i386/pr95046-7.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9056cd80351c65c3b9a3257644236f2007c46a3f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9056cd80351c65c3b9a3257644236f2007c46a3f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-7.c?ref=9056cd80351c65c3b9a3257644236f2007c46a3f", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/95046 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O3 -msse2\" } */\n+\n+\n+float f[2];\n+double d[2];\n+\n+void\n+test_float_truncate (void)\n+{\n+  for (int i = 0; i < 2; i++)\n+    f[i] = d[i];\n+}\n+\n+/* { dg-final { scan-assembler \"\\tv?cvtpd2psx?\" } } */\n+\n+void\n+test_float_extend (void)\n+{\n+  for (int i = 0; i < 2; i++)\n+    d[i] = f[i];\n+}\n+\n+/* { dg-final { scan-assembler \"\\tv?cvtps2pd\" } } */"}]}