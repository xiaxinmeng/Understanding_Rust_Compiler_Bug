{"sha": "1dc090e2f4a1b952e9369c31b6a154430de175d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRjMDkwZTJmNGExYjk1MmU5MzY5YzMxYjZhMTU0NDMwZGUxNzVkMQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2014-11-07T16:21:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-11-07T16:21:15Z"}, "message": "re PR c++/63366 (C++ __complex is not equivalent to __complex double)\n\n\tPR c++/63366\n\t* decl.c (grokdeclarator): Fix __complex meaning __complex double.\n\nFrom-SVN: r217229", "tree": {"sha": "bb38c89f10c827b87445e8cc237594089faf1318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb38c89f10c827b87445e8cc237594089faf1318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dc090e2f4a1b952e9369c31b6a154430de175d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc090e2f4a1b952e9369c31b6a154430de175d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc090e2f4a1b952e9369c31b6a154430de175d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc090e2f4a1b952e9369c31b6a154430de175d1/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d296d8f327520a7cb2430212c68bfbbb493166fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d296d8f327520a7cb2430212c68bfbbb493166fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d296d8f327520a7cb2430212c68bfbbb493166fa"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "de04ab709b1472768d66b56f2cfaddcee58f78b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc090e2f4a1b952e9369c31b6a154430de175d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc090e2f4a1b952e9369c31b6a154430de175d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1dc090e2f4a1b952e9369c31b6a154430de175d1", "patch": "@@ -1,3 +1,8 @@\n+2014-11-07  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR c++/63366\n+\t* decl.c (grokdeclarator): Fix __complex meaning __complex double.\n+\n 2014-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* constexpr.c: Remove redundant enum from machine_mode."}, {"sha": "4abc1011e61e453194f19d9066e26c38628bbe44", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc090e2f4a1b952e9369c31b6a154430de175d1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc090e2f4a1b952e9369c31b6a154430de175d1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1dc090e2f4a1b952e9369c31b6a154430de175d1", "patch": "@@ -9182,11 +9182,23 @@ grokdeclarator (const cp_declarator *declarator,\n     }\n   /* No type at all: default to `int', and set DEFAULTED_INT\n      because it was not a user-defined typedef.  */\n-  if (type == NULL_TREE && (signed_p || unsigned_p || long_p || short_p))\n+  if (type == NULL_TREE)\n     {\n-      /* These imply 'int'.  */\n-      type = integer_type_node;\n-      defaulted_int = 1;\n+      if (signed_p || unsigned_p || long_p || short_p)\n+\t{\n+\t  /* These imply 'int'.  */\n+\t  type = integer_type_node;\n+\t  defaulted_int = 1;\n+\t}\n+      /* If we just have \"complex\", it is equivalent to \"complex double\".  */\n+      else if (!longlong && !explicit_intN\n+\t       && decl_spec_seq_has_spec_p (declspecs, ds_complex))\n+\t{\n+\t  type = double_type_node;\n+\t  pedwarn (declspecs->locations[ds_complex], OPT_Wpedantic,\n+\t\t   \"ISO C++ does not support plain %<complex%> meaning \"\n+\t\t   \"%<double complex%>\");\n+\t}\n     }\n   /* Gather flags.  */\n   explicit_int = declspecs->explicit_int_p;\n@@ -9371,13 +9383,8 @@ grokdeclarator (const cp_declarator *declarator,\n     {\n       if (TREE_CODE (type) != INTEGER_TYPE && TREE_CODE (type) != REAL_TYPE)\n \terror (\"complex invalid for %qs\", name);\n-      /* If we just have \"complex\", it is equivalent to\n-\t \"complex double\", but if any modifiers at all are specified it is\n-\t the complex form of TYPE.  E.g, \"complex short\" is\n-\t \"complex short int\".  */\n-      else if (defaulted_int && ! longlong && ! explicit_intN\n-\t       && ! (long_p || short_p || signed_p || unsigned_p))\n-\ttype = complex_double_type_node;\n+      /* If a modifier is specified, the resulting complex is the complex\n+\t form of TYPE.  E.g, \"complex short\" is \"complex short int\".  */\n       else if (type == integer_type_node)\n \ttype = complex_integer_type_node;\n       else if (type == float_type_node)"}, {"sha": "f08912324edf134d6826ff6addddd4a5d19f3d3e", "filename": "gcc/testsuite/g++.dg/torture/pr63366.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc090e2f4a1b952e9369c31b6a154430de175d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr63366.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc090e2f4a1b952e9369c31b6a154430de175d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr63366.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr63366.C?ref=1dc090e2f4a1b952e9369c31b6a154430de175d1", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do run }\n+// { dg-options \"-pedantic\" }\n+\n+#include <typeinfo>\n+\n+int\n+main (void)\n+{\n+  return typeid (__complex) != typeid (__complex double); /* { dg-warning \"ISO C\\\\+\\\\+ does not support plain 'complex' meaning 'double complex'\" } */\n+}"}]}