{"sha": "d2324a5ab3ff097864ae6828cb1db4dd013c70d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIzMjRhNWFiM2ZmMDk3ODY0YWU2ODI4Y2IxZGI0ZGQwMTNjNzBkMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-04-23T15:29:29Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-04-23T15:30:34Z"}, "message": "i386: Fix atomic FP peepholes [PR100182]\n\n64bit loads to/stores from x87 and SSE registers are atomic also on 32-bit\ntargets, so there is no need for additional atomic moves to a temporary\nregister.\n\nIntroduced load peephole2 patterns assume that there won't be any additional\nloads from the load location outside the peepholed sequence and wrongly\nremoved the source location initialization.\n\nOTOH, introduced store peephole2 patterns assume there won't be any additional\nloads from the stored location outside the peepholed sequence and wrongly\nremoved the destination location initialization.  Note that we can't use plain\nx87 FST instruction to initialize destination location because FST converts\nthe value to the double-precision format, changing bits during move.\n\nThe patch restores removed initializations in load and store patterns.\nAdditionally, plain x87 FST in store peephole2 patterns is prevented by\nlimiting the store operand source to SSE registers.\n\n2021-04-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100182\n\t* config/i386/sync.md (FILD_ATOMIC/FIST_ATOMIC FP load peephole2):\n\tCopy operand 3 to operand 4.  Use sse_reg_operand\n\tas operand 3 predicate.\n\t(FILD_ATOMIC/FIST_ATOMIC FP load peephole2 with mem blockage): Ditto.\n\t(LDX_ATOMIC/STX_ATOMIC FP load peephole2): Ditto.\n\t(LDX_ATOMIC/LDX_ATOMIC FP load peephole2 with mem blockage): Ditto.\n\t(FILD_ATOMIC/FIST_ATOMIC FP store peephole2):\n\tCopy operand 1 to operand 0.\n\t(FILD_ATOMIC/FIST_ATOMIC FP store peephole2 with mem blockage): Ditto.\n\t(LDX_ATOMIC/STX_ATOMIC FP store peephole2): Ditto.\n\t(LDX_ATOMIC/LDX_ATOMIC FP store peephole2 with mem blockage): Ditto.\n\ngcc/testsuite/\n\n\tPR target/100182\n\t* gcc.target/i386/pr100182.c: New test.\n\t* gcc.target/i386/pr71245-1.c (dg-final): Xfail scan-assembler-not.\n\t* gcc.target/i386/pr71245-2.c (dg-final): Ditto.", "tree": {"sha": "68372ceac8f591a9229a23ee65fca6b5eb16e613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68372ceac8f591a9229a23ee65fca6b5eb16e613"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2324a5ab3ff097864ae6828cb1db4dd013c70d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2324a5ab3ff097864ae6828cb1db4dd013c70d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2324a5ab3ff097864ae6828cb1db4dd013c70d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2324a5ab3ff097864ae6828cb1db4dd013c70d1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d87c2251c441f056e0a44f928ffcb8a8a679b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d87c2251c441f056e0a44f928ffcb8a8a679b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d87c2251c441f056e0a44f928ffcb8a8a679b6b"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "7913b918796ae8656e89a9290cc6fba5eb132cac", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2324a5ab3ff097864ae6828cb1db4dd013c70d1/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2324a5ab3ff097864ae6828cb1db4dd013c70d1/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=d2324a5ab3ff097864ae6828cb1db4dd013c70d1", "patch": "@@ -226,12 +226,13 @@\n    (set (match_operand:DI 2 \"memory_operand\")\n \t(unspec:DI [(match_dup 0)]\n \t\t   UNSPEC_FIST_ATOMIC))\n-   (set (match_operand:DF 3 \"any_fp_register_operand\")\n+   (set (match_operand:DF 3 \"sse_reg_operand\")\n \t(match_operand:DF 4 \"memory_operand\"))]\n   \"!TARGET_64BIT\n    && peep2_reg_dead_p (2, operands[0])\n    && rtx_equal_p (XEXP (operands[4], 0), XEXP (operands[2], 0))\"\n-  [(set (match_dup 3) (match_dup 5))]\n+  [(set (match_dup 3) (match_dup 5))\n+   (set (match_dup 4) (match_dup 3))]\n   \"operands[5] = gen_lowpart (DFmode, operands[1]);\")\n \n (define_peephole2\n@@ -243,14 +244,15 @@\n \t\t   UNSPEC_FIST_ATOMIC))\n    (set (mem:BLK (scratch:SI))\n \t(unspec:BLK [(mem:BLK (scratch:SI))] UNSPEC_MEMORY_BLOCKAGE))\n-   (set (match_operand:DF 3 \"any_fp_register_operand\")\n+   (set (match_operand:DF 3 \"sse_reg_operand\")\n \t(match_operand:DF 4 \"memory_operand\"))]\n   \"!TARGET_64BIT\n    && peep2_reg_dead_p (2, operands[0])\n    && rtx_equal_p (XEXP (operands[4], 0), XEXP (operands[2], 0))\"\n   [(const_int 0)]\n {\n   emit_move_insn (operands[3], gen_lowpart (DFmode, operands[1]));\n+  emit_move_insn (operands[4], operands[3]);\n   emit_insn (gen_memory_blockage ());\n   DONE;\n })\n@@ -262,12 +264,13 @@\n    (set (match_operand:DI 2 \"memory_operand\")\n \t(unspec:DI [(match_dup 0)]\n \t\t   UNSPEC_STX_ATOMIC))\n-   (set (match_operand:DF 3 \"any_fp_register_operand\")\n+   (set (match_operand:DF 3 \"sse_reg_operand\")\n \t(match_operand:DF 4 \"memory_operand\"))]\n   \"!TARGET_64BIT\n    && peep2_reg_dead_p (2, operands[0])\n    && rtx_equal_p (XEXP (operands[4], 0), XEXP (operands[2], 0))\"\n-  [(set (match_dup 3) (match_dup 5))]\n+  [(set (match_dup 3) (match_dup 5))\n+   (set (match_dup 4) (match_dup 3))]\n   \"operands[5] = gen_lowpart (DFmode, operands[1]);\")\n \n (define_peephole2\n@@ -279,14 +282,15 @@\n \t\t   UNSPEC_STX_ATOMIC))\n    (set (mem:BLK (scratch:SI))\n \t(unspec:BLK [(mem:BLK (scratch:SI))] UNSPEC_MEMORY_BLOCKAGE))\n-   (set (match_operand:DF 3 \"any_fp_register_operand\")\n+   (set (match_operand:DF 3 \"sse_reg_operand\")\n \t(match_operand:DF 4 \"memory_operand\"))]\n   \"!TARGET_64BIT\n    && peep2_reg_dead_p (2, operands[0])\n    && rtx_equal_p (XEXP (operands[4], 0), XEXP (operands[2], 0))\"\n   [(const_int 0)]\n {\n   emit_move_insn (operands[3], gen_lowpart (DFmode, operands[1]));\n+  emit_move_insn (operands[4], operands[3]);\n   emit_insn (gen_memory_blockage ());\n   DONE;\n })\n@@ -392,7 +396,8 @@\n   \"!TARGET_64BIT\n    && peep2_reg_dead_p (3, operands[2])\n    && rtx_equal_p (XEXP (operands[0], 0), XEXP (operands[3], 0))\"\n-  [(set (match_dup 5) (match_dup 1))]\n+  [(set (match_dup 0) (match_dup 1))\n+   (set (match_dup 5) (match_dup 1))]\n   \"operands[5] = gen_lowpart (DFmode, operands[4]);\")\n \n (define_peephole2\n@@ -411,6 +416,7 @@\n    && rtx_equal_p (XEXP (operands[0], 0), XEXP (operands[3], 0))\"\n   [(const_int 0)]\n {\n+  emit_move_insn (operands[0], operands[1]);\n   emit_insn (gen_memory_blockage ());\n   emit_move_insn (gen_lowpart (DFmode, operands[4]), operands[1]);\n   DONE;\n@@ -428,7 +434,8 @@\n   \"!TARGET_64BIT\n    && peep2_reg_dead_p (3, operands[2])\n    && rtx_equal_p (XEXP (operands[0], 0), XEXP (operands[3], 0))\"\n-  [(set (match_dup 5) (match_dup 1))]\n+  [(set (match_dup 0) (match_dup 1))\n+   (set (match_dup 5) (match_dup 1))]\n   \"operands[5] = gen_lowpart (DFmode, operands[4]);\")\n \n (define_peephole2\n@@ -447,6 +454,7 @@\n    && rtx_equal_p (XEXP (operands[0], 0), XEXP (operands[3], 0))\"\n   [(const_int 0)]\n {\n+  emit_move_insn (operands[0], operands[1]);\n   emit_insn (gen_memory_blockage ());\n   emit_move_insn (gen_lowpart (DFmode, operands[4]), operands[1]);\n   DONE;"}, {"sha": "2f92a04db7306c737eb35b2a6f3fb303a41c8fb6", "filename": "gcc/testsuite/gcc.target/i386/pr100182.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2324a5ab3ff097864ae6828cb1db4dd013c70d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100182.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2324a5ab3ff097864ae6828cb1db4dd013c70d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100182.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100182.c?ref=d2324a5ab3ff097864ae6828cb1db4dd013c70d1", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target ia32 } } */\n+/* { dg-options \"-O2 -march=i686\" } */\n+\n+struct S { double _M_fp; };\n+union U { double d; unsigned long long int l; };\n+\n+void\n+__attribute__((noipa))\n+foo (void)\n+{\n+  struct S a0, a1;\n+  union U u;\n+  double d0, d1;\n+  a0._M_fp = 0.0;\n+  a1._M_fp = 1.0;\n+  __atomic_store_8 (&a0._M_fp, __atomic_load_8 (&a1._M_fp, __ATOMIC_SEQ_CST), __ATOMIC_SEQ_CST);\n+  u.l = __atomic_load_8 (&a0._M_fp, __ATOMIC_SEQ_CST);\n+  d0 = u.d;\n+  u.l = __atomic_load_8 (&a1._M_fp, __ATOMIC_SEQ_CST);\n+  d1 = u.d;\n+  if (d0 != d1)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  return 0;\n+}"}, {"sha": "02c0dcb80b6591ca0610618bf6db6e764a344564", "filename": "gcc/testsuite/gcc.target/i386/pr71245-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2324a5ab3ff097864ae6828cb1db4dd013c70d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2324a5ab3ff097864ae6828cb1db4dd013c70d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-1.c?ref=d2324a5ab3ff097864ae6828cb1db4dd013c70d1", "patch": "@@ -19,4 +19,4 @@ void foo_d (void)\n   __atomic_store_n (&d.ll, tmp.ll, __ATOMIC_SEQ_CST);\n }\n \n-/* { dg-final { scan-assembler-not \"(fistp|fild)\" } } */\n+/* { dg-final { scan-assembler-not \"(fistp|fild)\" { xfail *-*-* } } } */"}, {"sha": "bf37a8cbb7138265d3df78beaee817fdb9c56335", "filename": "gcc/testsuite/gcc.target/i386/pr71245-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2324a5ab3ff097864ae6828cb1db4dd013c70d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2324a5ab3ff097864ae6828cb1db4dd013c70d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71245-2.c?ref=d2324a5ab3ff097864ae6828cb1db4dd013c70d1", "patch": "@@ -19,4 +19,4 @@ void foo_d (void)\n   __atomic_store_n (&d.ll, tmp.ll, __ATOMIC_SEQ_CST);\n }\n \n-/* { dg-final { scan-assembler-not \"movlps\" } } */\n+/* { dg-final { scan-assembler-not \"movlps\" { xfail *-*-* } } } */"}]}