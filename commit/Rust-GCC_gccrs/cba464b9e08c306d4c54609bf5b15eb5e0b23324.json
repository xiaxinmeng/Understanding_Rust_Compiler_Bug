{"sha": "cba464b9e08c306d4c54609bf5b15eb5e0b23324", "node_id": "C_kwDOANBUbNoAKGNiYTQ2NGI5ZTA4YzMwNmQ0YzU0NjA5YmY1YjE1ZWI1ZTBiMjMzMjQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-10-14T15:42:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-14T15:42:47Z"}, "message": "Merge #1590\n\n1590: AST: more dump improvements r=dafaust a=dafaust\n\nThis PR adds new AST dump visitors for several nodes, and cleans up some minor formatting issues in blocks without tail expressions and if expressions.\r\n\n\nCo-authored-by: David Faust <david.faust@oracle.com>", "tree": {"sha": "423a2dc971b8a1904556a7740154eb8e28f71e3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/423a2dc971b8a1904556a7740154eb8e28f71e3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cba464b9e08c306d4c54609bf5b15eb5e0b23324", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjSYN3CRBK7hj4Ov3rIwAAy7IIAHp/PD1e2/QIq17K8aEJiVAl\nP7+0xs49C3P7WhwwSApIV42fWIQchZyZ/gk+KMg+MrMSF74zbZeo7pJs06L8ZfB7\nmskwwwq14pBvr/8nryWJnMHO94d3CajS5Ec9jR1os1nLpZGBJ3ov3uoR4lhgGyOp\nrCCLLySKIPNpnmLOQMEevQmkquljYyqwnXVcfI175zCumgVixR6iFfn9moPqktcv\nn531i1/QbFa77s2TBGI9TtsLLNpHVYrbJhMZoMakfBiLLlDiEgTmrJxVOVSsF7xh\nnuiel6/88KGueeDdoybDme/ZVx57wxW6WfU6MW+KCoLfnE8ItlS81Pl29Ke2baE=\n=fppJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 423a2dc971b8a1904556a7740154eb8e28f71e3c\nparent fa0bd801922d095893c9318ad1d0c78141c05796\nparent d27cb6e12827b9a0d7ac024f15e3aa04650083c9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1665762167 +0000\ncommitter GitHub <noreply@github.com> 1665762167 +0000\n\nMerge #1590\n\n1590: AST: more dump improvements r=dafaust a=dafaust\n\nThis PR adds new AST dump visitors for several nodes, and cleans up some minor formatting issues in blocks without tail expressions and if expressions.\r\n\n\nCo-authored-by: David Faust <david.faust@oracle.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba464b9e08c306d4c54609bf5b15eb5e0b23324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba464b9e08c306d4c54609bf5b15eb5e0b23324", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba464b9e08c306d4c54609bf5b15eb5e0b23324/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa0bd801922d095893c9318ad1d0c78141c05796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0bd801922d095893c9318ad1d0c78141c05796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa0bd801922d095893c9318ad1d0c78141c05796"}, {"sha": "d27cb6e12827b9a0d7ac024f15e3aa04650083c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27cb6e12827b9a0d7ac024f15e3aa04650083c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d27cb6e12827b9a0d7ac024f15e3aa04650083c9"}], "stats": {"total": 168, "additions": 147, "deletions": 21}, "files": [{"sha": "8caad987538f41e2e3f2036c0d6189c4044e490f", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 147, "deletions": 21, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba464b9e08c306d4c54609bf5b15eb5e0b23324/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba464b9e08c306d4c54609bf5b15eb5e0b23324/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=cba464b9e08c306d4c54609bf5b15eb5e0b23324", "patch": "@@ -259,19 +259,44 @@ Dump::visit (MetaItemPathLit &meta_item)\n \n void\n Dump::visit (BorrowExpr &expr)\n-{}\n+{\n+  stream << '&';\n+  if (expr.get_is_double_borrow ())\n+    stream << '&';\n+  if (expr.get_is_mut ())\n+    stream << \"mut \";\n+\n+  expr.get_borrowed_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (DereferenceExpr &expr)\n-{}\n+{\n+  stream << '*';\n+  expr.get_dereferenced_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (ErrorPropagationExpr &expr)\n-{}\n+{\n+  expr.get_propagating_expr ()->accept_vis (*this);\n+  stream << '?';\n+}\n \n void\n Dump::visit (NegationExpr &expr)\n-{}\n+{\n+  switch (expr.get_expr_type ())\n+    {\n+    case NegationOperator::NEGATE:\n+      stream << '-';\n+      break;\n+    case NegationOperator::NOT:\n+      stream << '!';\n+      break;\n+    }\n+  expr.get_negated_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (ArithmeticOrLogicalExpr &expr)\n@@ -327,15 +352,65 @@ Dump::visit (ArithmeticOrLogicalExpr &expr)\n \n void\n Dump::visit (ComparisonExpr &expr)\n-{}\n+{\n+  auto op = \"\";\n+  switch (expr.get_expr_type ())\n+    {\n+    case ComparisonOperator::EQUAL:\n+      op = \"==\";\n+      break;\n+    case ComparisonOperator::NOT_EQUAL:\n+      op = \"!=\";\n+      break;\n+\n+    case ComparisonOperator::GREATER_THAN:\n+      op = \">\";\n+      break;\n+\n+    case ComparisonOperator::LESS_THAN:\n+      op = \"<\";\n+      break;\n+\n+    case ComparisonOperator::GREATER_OR_EQUAL:\n+      op = \">=\";\n+      break;\n+\n+    case ComparisonOperator::LESS_OR_EQUAL:\n+      op = \"<=\";\n+      break;\n+    }\n+\n+  expr.get_left_expr ()->accept_vis (*this);\n+  stream << \" \" << op << \" \";\n+  expr.get_right_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (LazyBooleanExpr &expr)\n-{}\n+{\n+  auto op = \"\";\n+  switch (expr.get_expr_type ())\n+    {\n+    case LazyBooleanOperator::LOGICAL_AND:\n+      op = \"&&\";\n+      break;\n+    case LazyBooleanOperator::LOGICAL_OR:\n+      op = \"||\";\n+      break;\n+    }\n+\n+  expr.get_left_expr ()->accept_vis (*this);\n+  stream << \" \" << op << \" \";\n+  expr.get_right_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (TypeCastExpr &expr)\n-{}\n+{\n+  expr.get_casted_expr ()->accept_vis (*this);\n+  stream << \" as \";\n+  expr.get_type_to_cast_to ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (AssignmentExpr &expr)\n@@ -399,23 +474,51 @@ Dump::visit (CompoundAssignmentExpr &expr)\n \n void\n Dump::visit (GroupedExpr &expr)\n-{}\n+{\n+  stream << '(';\n+  expr.get_expr_in_parens ()->accept_vis (*this);\n+  stream << ')';\n+}\n \n void\n Dump::visit (ArrayElemsValues &elems)\n-{}\n+{\n+  auto &vals = elems.get_values ();\n+  if (vals.size () >= 1)\n+    {\n+      vals[0]->accept_vis (*this);\n+      for (size_t i = 1; i < vals.size (); i++)\n+\t{\n+\t  stream << \", \";\n+\t  vals[i]->accept_vis (*this);\n+\t}\n+    }\n+}\n \n void\n Dump::visit (ArrayElemsCopied &elems)\n-{}\n+{\n+  elems.get_elem_to_copy ()->accept_vis (*this);\n+  stream << \"; \";\n+  elems.get_num_copies ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (ArrayExpr &expr)\n-{}\n+{\n+  stream << '[';\n+  expr.get_array_elems ()->accept_vis (*this);\n+  stream << ']';\n+}\n \n void\n Dump::visit (ArrayIndexExpr &expr)\n-{}\n+{\n+  expr.get_array_expr ()->accept_vis (*this);\n+  stream << '[';\n+  expr.get_index_expr ()->accept_vis (*this);\n+  stream << ']';\n+}\n \n void\n Dump::visit (TupleExpr &expr)\n@@ -498,11 +601,11 @@ Dump::visit (BlockExpr &expr)\n     {\n       stream << indentation;\n       expr.get_tail_expr ()->accept_vis (*this);\n-      stream << \" /* tail expr */\";\n+      stream << \" /* tail expr */\\n\";\n     }\n \n   indentation.decrement ();\n-  stream << \"\\n\" << indentation << \"}\\n\";\n+  stream << indentation << \"}\\n\";\n }\n \n void\n@@ -519,27 +622,46 @@ Dump::visit (BreakExpr &expr)\n \n void\n Dump::visit (RangeFromToExpr &expr)\n-{}\n+{\n+  expr.get_from_expr ()->accept_vis (*this);\n+  stream << \"..\";\n+  expr.get_to_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (RangeFromExpr &expr)\n-{}\n+{\n+  expr.get_from_expr ()->accept_vis (*this);\n+  stream << \"..\";\n+}\n \n void\n Dump::visit (RangeToExpr &expr)\n-{}\n+{\n+  stream << \"..\";\n+  expr.get_to_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (RangeFullExpr &expr)\n-{}\n+{\n+  stream << \"..\";\n+}\n \n void\n Dump::visit (RangeFromToInclExpr &expr)\n-{}\n+{\n+  expr.get_from_expr ()->accept_vis (*this);\n+  stream << \"..=\";\n+  expr.get_to_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (RangeToInclExpr &expr)\n-{}\n+{\n+  stream << \"..=\";\n+  expr.get_to_expr ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (ReturnExpr &expr)\n@@ -570,6 +692,7 @@ Dump::visit (IfExpr &expr)\n {\n   stream << \"if \";\n   expr.vis_if_condition (*this);\n+  stream << \" \";\n   expr.vis_if_block (*this);\n }\n \n@@ -578,6 +701,7 @@ Dump::visit (IfExprConseqElse &expr)\n {\n   stream << \"if \";\n   expr.vis_if_condition (*this);\n+  stream << \" \";\n   expr.vis_if_block (*this);\n   stream << indentation << \"else \";\n   expr.vis_else_block (*this);\n@@ -588,8 +712,10 @@ Dump::visit (IfExprConseqIf &expr)\n {\n   stream << \"if \";\n   expr.vis_if_condition (*this);\n+  stream << \" \";\n   expr.vis_if_block (*this);\n-  stream << indentation << \"else if \";\n+  stream << indentation << \"else \";\n+  // The \"if\" part of the \"else if\" is printed by the next visitor\n   expr.vis_conseq_if_expr (*this);\n }\n "}]}