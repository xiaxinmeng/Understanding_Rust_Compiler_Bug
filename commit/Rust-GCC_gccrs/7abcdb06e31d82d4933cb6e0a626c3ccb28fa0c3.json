{"sha": "7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3", "node_id": "C_kwDOANBUbNoAKDdhYmNkYjA2ZTMxZDgyZDQ5MzNjYjZlMGE2MjZjM2NjYjI4ZmEwYzM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-09-07T09:47:40Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-09-07T12:18:04Z"}, "message": "Restore XCOFF for DWARF on AIX.\n\n\tPR bootstrap/106855\n\ngcc/ChangeLog:\n\n\t* collect2.cc (scan_prog_file): Restore if XCOFF_DEBUGGING_INFO.\n\t* config/rs6000/rs6000.cc (rs6000_option_override_internal):\n\t  Restore usage of XCOFF_DEBUGGING_INFO.\n\t* config/rs6000/xcoff.h (XCOFF_DEBUGGING_INFO): Restore.\n\t* dwarf2asm.cc (XCOFF_DEBUGGING_INFO): Restore support for\n\t  XCOFF_DEBUGGING_INFO.\n\t(dw2_asm_output_nstring): Likewise.\n\t(USE_LINKONCE_INDIRECT): Likewise.\n\t* dwarf2out.cc (XCOFF_DEBUGGING_INFO): Likewise.\n\t(HAVE_XCOFF_DWARF_EXTRAS): Likewise.\n\t(output_fde): Likewise.\n\t(output_call_frame_info): Likewise.\n\t(have_macinfo): Likewise.\n\t(add_AT_loc_list): Likewise.\n\t(add_AT_view_list): Likewise.\n\t(output_compilation_unit_header): Likewise.\n\t(output_pubnames): Likewise.\n\t(output_aranges): Likewise.\n\t(output_line_info): Likewise.\n\t(output_macinfo): Likewise.\n\t(dwarf2out_finish): Likewise.\n\t(dwarf2out_early_finish): Likewise.", "tree": {"sha": "b4adf7a01fd9ced3a957dac3b46ea5e308b4e40e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4adf7a01fd9ced3a957dac3b46ea5e308b4e40e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a262f969d6fd936f4fb5d9e1d5756b0dcbc925b2"}], "stats": {"total": 132, "additions": 97, "deletions": 35}, "files": [{"sha": "d81c7f28f16af87a9b4a668d919565b221e3e4a5", "filename": "gcc/collect2.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3/gcc%2Fcollect2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3/gcc%2Fcollect2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.cc?ref=7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3", "patch": "@@ -2784,6 +2784,13 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n \t\t      if ((name = ldgetname (ldptr, &symbol)) == NULL)\n \t\t\tcontinue;\t\t/* Should never happen.  */\n \n+#ifdef XCOFF_DEBUGGING_INFO\n+\t\t      /* All AIX function names have a duplicate entry\n+\t\t\t beginning with a dot.  */\n+\t\t      if (*name == '.')\n+\t\t\t++name;\n+#endif\n+\n \t\t      switch (is_ctor_dtor (name))\n \t\t\t{\n #if TARGET_AIX_VERSION"}, {"sha": "7623d69a8c0896c20a6317be0d8780f13f31a38e", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3", "patch": "@@ -3821,6 +3821,12 @@ rs6000_option_override_internal (bool global_init_p)\n   if (TARGET_DEBUG_REG || TARGET_DEBUG_TARGET)\n     rs6000_print_isa_options (stderr, 0, \"before defaults\", rs6000_isa_flags);\n \n+#ifdef XCOFF_DEBUGGING_INFO\n+  /* For AIX default to 64-bit DWARF.  */\n+  if (!OPTION_SET_P (dwarf_offset_size))\n+    dwarf_offset_size = POINTER_SIZE_UNITS;\n+#endif\n+\n   /* Handle explicit -mno-{altivec,vsx,power8-vector,power9-vector} and turn\n      off all of the options that depend on those flags.  */\n   ignore_masks = rs6000_disable_incompatible_switches ();"}, {"sha": "cd0f99cb9c6b08c257fcb618758cdcd5b388138d", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3", "patch": "@@ -21,6 +21,9 @@\n \n #define TARGET_OBJECT_FORMAT OBJECT_XCOFF\n \n+/* The RS/6000 uses the XCOFF format.  */\n+#define XCOFF_DEBUGGING_INFO 1\n+\n /* Define if the object format being used is COFF or a superset.  */\n #define OBJECT_FORMAT_COFF\n "}, {"sha": "274f574f25efa9e7a67fe4bf8d3be3646549e875", "filename": "gcc/dwarf2asm.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3/gcc%2Fdwarf2asm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3/gcc%2Fdwarf2asm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.cc?ref=7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3", "patch": "@@ -35,6 +35,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"emit-rtl.h\"\n #include \"fold-const.h\"\n \n+#ifndef XCOFF_DEBUGGING_INFO\n+#define XCOFF_DEBUGGING_INFO 0\n+#endif\n+\n \f\n /* Output an unaligned integer with the given value and size.  Prefer not\n    to print a newline, since the caller may want to add a comment.  */\n@@ -380,13 +384,16 @@ dw2_asm_output_nstring (const char *str, size_t orig_len,\n \n   if (flag_debug_asm && comment)\n     {\n-      fputs (\"\\t.ascii \\\"\", asm_out_file);\n+      if (XCOFF_DEBUGGING_INFO)\n+\tfputs (\"\\t.byte \\\"\", asm_out_file);\n+      else\n+\tfputs (\"\\t.ascii \\\"\", asm_out_file);\n \n       for (i = 0; i < len; i++)\n \t{\n \t  int c = str[i];\n \t  if (c == '\\\"')\n-\t    fputc ('\\\\', asm_out_file);\n+\t    fputc (XCOFF_DEBUGGING_INFO ? '\\\"' : '\\\\', asm_out_file);\n \t  else if (c == '\\\\')\n \t    fputc ('\\\\', asm_out_file);\n \t  if (ISPRINT (c))\n@@ -906,7 +913,7 @@ static GTY(()) hash_map<const char *, tree> *indirect_pool;\n static GTY(()) int dw2_const_labelno;\n \n #if defined(HAVE_GAS_HIDDEN)\n-# define USE_LINKONCE_INDIRECT (SUPPORTS_ONE_ONLY)\n+# define USE_LINKONCE_INDIRECT (SUPPORTS_ONE_ONLY && !XCOFF_DEBUGGING_INFO)\n #else\n # define USE_LINKONCE_INDIRECT 0\n #endif"}, {"sha": "2df7590402287f9c511be3b4123ca642f36e2b3f", "filename": "gcc/dwarf2out.cc", "status": "modified", "additions": 71, "deletions": 32, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3/gcc%2Fdwarf2out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3/gcc%2Fdwarf2out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.cc?ref=7abcdb06e31d82d4933cb6e0a626c3ccb28fa0c3", "patch": "@@ -105,6 +105,14 @@ static rtx_insn *cached_next_real_insn;\n static void dwarf2out_decl (tree);\n static bool is_redundant_typedef (const_tree);\n \n+#ifndef XCOFF_DEBUGGING_INFO\n+#define XCOFF_DEBUGGING_INFO 0\n+#endif\n+\n+#ifndef HAVE_XCOFF_DWARF_EXTRAS\n+#define HAVE_XCOFF_DWARF_EXTRAS 0\n+#endif\n+\n #ifdef VMS_DEBUGGING_INFO\n int vms_file_stats_name (const char *, long long *, long *, char *, int *);\n \n@@ -600,11 +608,14 @@ output_fde (dw_fde_ref fde, bool for_eh, bool second,\n \t\t\t\t  for_eh + j);\n   ASM_GENERATE_INTERNAL_LABEL (l1, FDE_AFTER_SIZE_LABEL, for_eh + j);\n   ASM_GENERATE_INTERNAL_LABEL (l2, FDE_END_LABEL, for_eh + j);\n-  if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4 && !for_eh)\n-    dw2_asm_output_data (4, 0xffffffff, \"Initial length escape value\"\n-\t\t\t \" indicating 64-bit DWARF extension\");\n-  dw2_asm_output_delta (for_eh ? 4 : dwarf_offset_size, l2, l1,\n-\t\t\t\"FDE Length\");\n+  if (!XCOFF_DEBUGGING_INFO || for_eh)\n+    {\n+      if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4 && !for_eh)\n+\tdw2_asm_output_data (4, 0xffffffff, \"Initial length escape value\"\n+\t\t\t     \" indicating 64-bit DWARF extension\");\n+      dw2_asm_output_delta (for_eh ? 4 : dwarf_offset_size, l2, l1,\n+\t\t\t    \"FDE Length\");\n+    }\n   ASM_OUTPUT_LABEL (asm_out_file, l1);\n \n   if (for_eh)\n@@ -801,11 +812,14 @@ output_call_frame_info (int for_eh)\n   /* Output the CIE.  */\n   ASM_GENERATE_INTERNAL_LABEL (l1, CIE_AFTER_SIZE_LABEL, for_eh);\n   ASM_GENERATE_INTERNAL_LABEL (l2, CIE_END_LABEL, for_eh);\n-  if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4 && !for_eh)\n-    dw2_asm_output_data (4, 0xffffffff,\n-\t\t\t \"Initial length escape value indicating 64-bit DWARF extension\");\n-  dw2_asm_output_delta (for_eh ? 4 : dwarf_offset_size, l2, l1,\n-\t\t\t\"Length of Common Information Entry\");\n+  if (!XCOFF_DEBUGGING_INFO || for_eh)\n+    {\n+      if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4 && !for_eh)\n+\tdw2_asm_output_data (4, 0xffffffff,\n+\t  \"Initial length escape value indicating 64-bit DWARF extension\");\n+      dw2_asm_output_delta (for_eh ? 4 : dwarf_offset_size, l2, l1,\n+\t\t\t    \"Length of Common Information Entry\");\n+    }\n   ASM_OUTPUT_LABEL (asm_out_file, l1);\n \n   /* Now that the CIE pointer is PC-relative for EH,\n@@ -3665,7 +3679,8 @@ static GTY (()) vec<macinfo_entry, va_gc> *macinfo_table;\n /* True if .debug_macinfo or .debug_macros section is going to be\n    emitted.  */\n #define have_macinfo \\\n-   (debug_info_level >= DINFO_LEVEL_VERBOSE \\\n+  ((!XCOFF_DEBUGGING_INFO || HAVE_XCOFF_DWARF_EXTRAS) \\\n+   && debug_info_level >= DINFO_LEVEL_VERBOSE \\\n    && !macinfo_table->is_empty ())\n \n /* Vector of dies for which we should generate .debug_ranges info.  */\n@@ -4967,6 +4982,9 @@ add_AT_loc_list (dw_die_ref die, enum dwarf_attribute attr_kind, dw_loc_list_ref\n {\n   dw_attr_node attr;\n \n+  if (XCOFF_DEBUGGING_INFO && !HAVE_XCOFF_DWARF_EXTRAS)\n+    return;\n+\n   attr.dw_attr = attr_kind;\n   attr.dw_attr_val.val_class = dw_val_class_loc_list;\n   attr.dw_attr_val.val_entry = NULL;\n@@ -4990,6 +5008,9 @@ add_AT_view_list (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n   dw_attr_node attr;\n \n+  if (XCOFF_DEBUGGING_INFO && !HAVE_XCOFF_DWARF_EXTRAS)\n+    return;\n+\n   attr.dw_attr = attr_kind;\n   attr.dw_attr_val.val_class = dw_val_class_view_list;\n   attr.dw_attr_val.val_entry = NULL;\n@@ -11145,12 +11166,15 @@ output_dwarf_version ()\n static void\n output_compilation_unit_header (enum dwarf_unit_type ut)\n {\n-  if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4)\n-    dw2_asm_output_data (4, 0xffffffff,\n-      \"Initial length escape value indicating 64-bit DWARF extension\");\n-  dw2_asm_output_data (dwarf_offset_size,\n-\t\t       next_die_offset - DWARF_INITIAL_LENGTH_SIZE,\n-\t\t       \"Length of Compilation Unit Info\");\n+  if (!XCOFF_DEBUGGING_INFO)\n+    {\n+      if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4)\n+\tdw2_asm_output_data (4, 0xffffffff,\n+\t  \"Initial length escape value indicating 64-bit DWARF extension\");\n+      dw2_asm_output_data (dwarf_offset_size,\n+\t\t\t   next_die_offset - DWARF_INITIAL_LENGTH_SIZE,\n+\t\t\t   \"Length of Compilation Unit Info\");\n+    }\n \n   output_dwarf_version ();\n   if (dwarf_version >= 5)\n@@ -11659,11 +11683,14 @@ output_pubnames (vec<pubname_entry, va_gc> *names)\n   unsigned long pubnames_length = size_of_pubnames (names);\n   pubname_entry *pub;\n \n-  if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4)\n-    dw2_asm_output_data (4, 0xffffffff,\n-\t\t\t \"Initial length escape value indicating 64-bit DWARF extension\");\n-  dw2_asm_output_data (dwarf_offset_size, pubnames_length,\n-\t\t       \"Pub Info Length\");\n+  if (!XCOFF_DEBUGGING_INFO)\n+    {\n+      if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4)\n+\tdw2_asm_output_data (4, 0xffffffff,\n+\t  \"Initial length escape value indicating 64-bit DWARF extension\");\n+      dw2_asm_output_data (dwarf_offset_size, pubnames_length,\n+\t\t\t   \"Pub Info Length\");\n+    }\n \n   /* Version number for pubnames/pubtypes is independent of dwarf version.  */\n   dw2_asm_output_data (2, 2, \"DWARF pubnames/pubtypes version\");\n@@ -11738,11 +11765,14 @@ output_aranges (void)\n   unsigned i;\n   unsigned long aranges_length = size_of_aranges ();\n   \n-  if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4)\n-    dw2_asm_output_data (4, 0xffffffff,\n-\t\t\t \"Initial length escape value indicating 64-bit DWARF extension\");\n-  dw2_asm_output_data (dwarf_offset_size, aranges_length,\n-\t\t       \"Length of Address Ranges Info\");\n+  if (!XCOFF_DEBUGGING_INFO)\n+    {\n+      if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4)\n+\tdw2_asm_output_data (4, 0xffffffff,\n+\t  \"Initial length escape value indicating 64-bit DWARF extension\");\n+      dw2_asm_output_data (dwarf_offset_size, aranges_length,\n+\t\t\t   \"Length of Address Ranges Info\");\n+    }\n \n   /* Version number for aranges is still 2, even up to DWARF5.  */\n   dw2_asm_output_data (2, 2, \"DWARF aranges version\");\n@@ -13036,11 +13066,14 @@ output_line_info (bool prologue_only)\n   ASM_GENERATE_INTERNAL_LABEL (p2, LN_PROLOG_END_LABEL,\n \t\t\t       output_line_info_generation++);\n \n-  if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4)\n-    dw2_asm_output_data (4, 0xffffffff,\n-\t\t\t \"Initial length escape value indicating 64-bit DWARF extension\");\n-  dw2_asm_output_delta (dwarf_offset_size, l2, l1,\n-\t\t\t\"Length of Source Line Info\");\n+  if (!XCOFF_DEBUGGING_INFO)\n+    {\n+      if (DWARF_INITIAL_LENGTH_SIZE - dwarf_offset_size == 4)\n+\tdw2_asm_output_data (4, 0xffffffff,\n+\t  \"Initial length escape value indicating 64-bit DWARF extension\");\n+      dw2_asm_output_delta (dwarf_offset_size, l2, l1,\n+\t\t\t    \"Length of Source Line Info\");\n+    }\n \n   ASM_OUTPUT_LABEL (asm_out_file, l1);\n \n@@ -29111,6 +29144,8 @@ output_macinfo (const char *debug_line_label, bool early_lto_debug)\n   /* AIX Assembler inserts the length, so adjust the reference to match the\n      offset expected by debuggers.  */\n   strcpy (dl_section_ref, debug_line_label);\n+  if (XCOFF_DEBUGGING_INFO)\n+    strcat (dl_section_ref, DWARF_INITIAL_LENGTH_SIZE_STR);\n \n   /* For .debug_macro emit the section header.  */\n   if (!dwarf_strict || dwarf_version >= 5)\n@@ -32315,6 +32350,8 @@ dwarf2out_finish (const char *filename)\n   /* AIX Assembler inserts the length, so adjust the reference to match the\n      offset expected by debuggers.  */\n   strcpy (dl_section_ref, debug_line_section_label);\n+  if (XCOFF_DEBUGGING_INFO)\n+    strcat (dl_section_ref, DWARF_INITIAL_LENGTH_SIZE_STR);\n \n   if (debug_info_level >= DINFO_LEVEL_TERSE)\n     add_AT_lineptr (main_comp_unit_die, DW_AT_stmt_list,\n@@ -33030,6 +33067,8 @@ dwarf2out_early_finish (const char *filename)\n   /* AIX Assembler inserts the length, so adjust the reference to match the\n      offset expected by debuggers.  */\n   strcpy (dl_section_ref, debug_line_section_label);\n+  if (XCOFF_DEBUGGING_INFO)\n+    strcat (dl_section_ref, DWARF_INITIAL_LENGTH_SIZE_STR);\n \n   if (debug_info_level >= DINFO_LEVEL_TERSE)\n     add_AT_lineptr (comp_unit_die (), DW_AT_stmt_list, dl_section_ref);"}]}