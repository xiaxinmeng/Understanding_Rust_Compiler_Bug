{"sha": "42da303a46b048bab9a00ae44fd38ca837984e69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJkYTMwM2E0NmIwNDhiYWI5YTAwYWU0NGZkMzhjYTgzNzk4NGU2OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-11-25T19:55:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-11-25T19:55:11Z"}, "message": "re PR target/10127 (-fstack-check let's program crash)\n\n\tPR target/10127\n\tPR ada/20548\n\tPR middle-end/42004\n\t* dwarf2out.c (dwarf2out_args_size_adjust): Rename to...\n\t(dwarf2out_stack_adjust): ...this.  Do not adjust the arg size for\n\tACCUMULATE_OUTGOING_ARGS targets.  Rename former version to...\n\t(dwarf2out_notice_stack_adjust): ...this.  Adjust for above renaming.\n\t(dwarf2out_frame_debug_expr): Revert previous change and adjust for\n\tabove renaming.\n\t(dwarf2out_frame_debug): Add ??? comment.  Adjust for above renaming.\n\nFrom-SVN: r154650", "tree": {"sha": "d58606aeb47222923d07c9450d1ac0e8dfd73593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d58606aeb47222923d07c9450d1ac0e8dfd73593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42da303a46b048bab9a00ae44fd38ca837984e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42da303a46b048bab9a00ae44fd38ca837984e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42da303a46b048bab9a00ae44fd38ca837984e69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42da303a46b048bab9a00ae44fd38ca837984e69/comments", "author": null, "committer": null, "parents": [{"sha": "85b1d1bd1aeba0edb8625894287dba91350fb929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b1d1bd1aeba0edb8625894287dba91350fb929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b1d1bd1aeba0edb8625894287dba91350fb929"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "55acd66d12990feb2883563dafb0e4692ead8d36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42da303a46b048bab9a00ae44fd38ca837984e69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42da303a46b048bab9a00ae44fd38ca837984e69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42da303a46b048bab9a00ae44fd38ca837984e69", "patch": "@@ -1,3 +1,16 @@\n+2009-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/10127\n+\tPR ada/20548\n+\tPR middle-end/42004\n+\t* dwarf2out.c (dwarf2out_args_size_adjust): Rename to...\n+\t(dwarf2out_stack_adjust): ...this.  Do not adjust the arg size for\n+\tACCUMULATE_OUTGOING_ARGS targets.  Rename former version to...\n+\t(dwarf2out_notice_stack_adjust): ...this.  Adjust for above renaming.\n+\t(dwarf2out_frame_debug_expr): Revert previous change and adjust for\n+\tabove renaming.\n+\t(dwarf2out_frame_debug): Add ??? comment.  Adjust for above renaming.\n+\n 2009-11-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/predicates.md (emms_operation): New predicate."}, {"sha": "3e3cf316acbe6b4f0e7dd84268d05b53a905d36a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42da303a46b048bab9a00ae44fd38ca837984e69/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42da303a46b048bab9a00ae44fd38ca837984e69/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=42da303a46b048bab9a00ae44fd38ca837984e69", "patch": "@@ -1524,17 +1524,20 @@ dwarf2out_args_size (const char *label, HOST_WIDE_INT size)\n   add_fde_cfi (label, cfi);\n }\n \n-/* Adjust args_size based on stack adjustment OFFSET.  */\n+/* Record a stack adjustment of OFFSET bytes.  */\n \n static void\n-dwarf2out_args_size_adjust (HOST_WIDE_INT offset, const char *label)\n+dwarf2out_stack_adjust (HOST_WIDE_INT offset, const char *label)\n {\n   if (cfa.reg == STACK_POINTER_REGNUM)\n     cfa.offset += offset;\n \n   if (cfa_store.reg == STACK_POINTER_REGNUM)\n     cfa_store.offset += offset;\n \n+  if (ACCUMULATE_OUTGOING_ARGS)\n+    return;\n+\n #ifndef STACK_GROWS_DOWNWARD\n   offset = -offset;\n #endif\n@@ -1549,11 +1552,11 @@ dwarf2out_args_size_adjust (HOST_WIDE_INT offset, const char *label)\n }\n \n /* Check INSN to see if it looks like a push or a stack adjustment, and\n-   make a note of it if it does.  EH uses this information to find out how\n-   much extra space it needs to pop off the stack.  */\n+   make a note of it if it does.  EH uses this information to find out\n+   how much extra space it needs to pop off the stack.  */\n \n static void\n-dwarf2out_stack_adjust (rtx insn, bool after_p)\n+dwarf2out_notice_stack_adjust (rtx insn, bool after_p)\n {\n   HOST_WIDE_INT offset;\n   const char *label;\n@@ -1637,7 +1640,7 @@ dwarf2out_stack_adjust (rtx insn, bool after_p)\n     return;\n \n   label = dwarf2out_cfi_label (false);\n-  dwarf2out_args_size_adjust (offset, label);\n+  dwarf2out_stack_adjust (offset, label);\n }\n \n #endif\n@@ -2206,8 +2209,7 @@ dwarf2out_frame_debug_expr (rtx expr, const char *label)\n \t      && (!MEM_P (SET_DEST (elem)) || GET_CODE (expr) == SEQUENCE)\n \t      && (RTX_FRAME_RELATED_P (elem) || par_index == 0))\n \t    dwarf2out_frame_debug_expr (elem, label);\n-\t  else if (!ACCUMULATE_OUTGOING_ARGS\n-\t\t   && GET_CODE (elem) == SET\n+\t  else if (GET_CODE (elem) == SET\n \t\t   && par_index != 0\n \t\t   && !RTX_FRAME_RELATED_P (elem))\n \t    {\n@@ -2216,7 +2218,7 @@ dwarf2out_frame_debug_expr (rtx expr, const char *label)\n \t      HOST_WIDE_INT offset = stack_adjust_offset (elem, args_size, 0);\n \n \t      if (offset != 0)\n-\t\tdwarf2out_args_size_adjust (offset, label);\n+\t\tdwarf2out_stack_adjust (offset, label);\n \t    }\n \t}\n       return;\n@@ -2709,10 +2711,13 @@ dwarf2out_frame_debug (rtx insn, bool after_p)\n   if (!NONJUMP_INSN_P (insn) || clobbers_queued_reg_save (insn))\n     flush_queued_reg_saves ();\n \n-  if (! RTX_FRAME_RELATED_P (insn))\n+  if (!RTX_FRAME_RELATED_P (insn))\n     {\n+      /* ??? This should be done unconditionally since stack adjustments\n+\t matter if the stack pointer is not the CFA register anymore but\n+\t is still used to save registers.  */\n       if (!ACCUMULATE_OUTGOING_ARGS)\n-\tdwarf2out_stack_adjust (insn, after_p);\n+\tdwarf2out_notice_stack_adjust (insn, after_p);\n       return;\n     }\n "}]}