{"sha": "ecad7681ac654a8813316bf01d537015c8604a34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNhZDc2ODFhYzY1NGE4ODEzMzE2YmYwMWQ1MzcwMTVjODYwNGEzNA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-10-22T08:51:16Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-10-22T08:51:16Z"}, "message": "[AArch64] Update target testcases for gnu11\n\n  gcc/testsuite/\n    * gcc.target/aarch64/pic-constantpool1.c: Add explicit declaration.\n    * gcc.target/aarch64/pic-symrefplus.c: Likewise.\n    * gcc.target/aarch64/reload-valid-spoff.c: Likewise.\n    * gcc.target/aarch64/vect.x: Likewise.\n    * gcc.target/aarch64/vect-ld1r.x: Add return type.\n    * gcc.target/aarch64/vect-fmax-fmin.c: Likewise.\n    * gcc.target/aarch64/vect-fp.c: Likewise.\n\nFrom-SVN: r216544", "tree": {"sha": "d703dc00801429081eb42f70db1f161ca68c8173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d703dc00801429081eb42f70db1f161ca68c8173"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecad7681ac654a8813316bf01d537015c8604a34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecad7681ac654a8813316bf01d537015c8604a34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecad7681ac654a8813316bf01d537015c8604a34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecad7681ac654a8813316bf01d537015c8604a34/comments", "author": null, "committer": null, "parents": [{"sha": "188979acda77d083a006eb6589651fcf9aa70c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188979acda77d083a006eb6589651fcf9aa70c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188979acda77d083a006eb6589651fcf9aa70c18"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "559f29a4356cec17809be9ef693fa6f704c06127", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ecad7681ac654a8813316bf01d537015c8604a34", "patch": "@@ -1,3 +1,13 @@\n+2014-10-22  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/pic-constantpool1.c: Add explicit declaration.\n+\t* gcc.target/aarch64/pic-symrefplus.c: Likewise.\n+\t* gcc.target/aarch64/reload-valid-spoff.c: Likewise.\n+\t* gcc.target/aarch64/vect.x: Likewise.\n+\t* gcc.target/aarch64/vect-ld1r.x: Add return type.\n+\t* gcc.target/aarch64/vect-fmax-fmin.c: Likewise.\n+\t* gcc.target/aarch64/vect-fp.c: Likewise.\n+\n 2014-10-22  Jiong Wang  <jiong.wang@arm.com>\n \n \t* lib/compat.exp (compat-run): Remove \"unresolved\"."}, {"sha": "043f1ee2c0de9dc255cd6379fe5bab07dd6b7b2b", "filename": "gcc/testsuite/gcc.target/aarch64/pic-constantpool1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-constantpool1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-constantpool1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-constantpool1.c?ref=ecad7681ac654a8813316bf01d537015c8604a34", "patch": "@@ -2,10 +2,13 @@\n /* { dg-do compile } */\n \n extern int __finite (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));\n+extern int __finitef (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));\n+extern int __signbit (double __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));\n+extern int __signbitf (float __value) __attribute__ ((__nothrow__)) __attribute__ ((__const__));\n int\n __ecvt_r (value, ndigit, decpt, sign, buf, len)\n      double value;\n-     int ndigit, *decpt, *sign;\n+     int ndigit, *decpt, *sign, len;\n      char *buf;\n {\n   if ((sizeof (value) == sizeof (float) ? __finitef (value) : __finite (value)) && value != 0.0)"}, {"sha": "406568c9d918680809830eb8fa2fecda062b39c1", "filename": "gcc/testsuite/gcc.target/aarch64/pic-symrefplus.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-symrefplus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-symrefplus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpic-symrefplus.c?ref=ecad7681ac654a8813316bf01d537015c8604a34", "patch": "@@ -34,12 +34,16 @@ struct locale_data\n   values [];\n };\n extern const struct locale_data _nl_C_LC_TIME __attribute__ ((visibility (\"hidden\")));\n+extern void *memset (void *s, int c, size_t n);\n+extern size_t strlen (const char *s);\n+extern int __strncasecmp_l (const char *s1, const char *s2, size_t n, __locale_t locale);\n char *\n __strptime_internal (rp, fmt, tmp, statep , locale)\n      const char *rp;\n      const char *fmt;\n      __locale_t locale;\n      void *statep;\n+     int tmp;\n {\n   struct locale_data *const current = locale->__locales[__LC_TIME];\n   const char *rp_backup;\n@@ -124,5 +128,9 @@ __strptime_internal (rp, fmt, tmp, statep , locale)\n }\n char *\n __strptime_l (buf, format, tm , locale)\n+     int buf;\n+     int format;\n+     int tm;\n+     int locale;\n {\n }"}, {"sha": "c2b5464fb445c7b39bc2982bab581f3b0e0c8044", "filename": "gcc/testsuite/gcc.target/aarch64/reload-valid-spoff.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freload-valid-spoff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freload-valid-spoff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Freload-valid-spoff.c?ref=ecad7681ac654a8813316bf01d537015c8604a34", "patch": "@@ -17,6 +17,11 @@ struct arpreq\n };\n typedef struct _IO_FILE FILE;\n extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream);\n+extern void *memset (void *s, int c, size_t n);\n+extern void *memcpy (void *dest, const void *src, size_t n);\n+extern int fprintf (FILE *stream, const char *format, ...);\n+extern char * safe_strncpy (char *dst, const char *src, size_t size);\n+extern size_t strlen (const char *s);\n extern struct _IO_FILE *stderr;\n extern int optind;\n struct aftype {"}, {"sha": "33a94441613f87cb8c1bd111407bb5d8333129d2", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fmax-fmin.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fmax-fmin.c?ref=ecad7681ac654a8813316bf01d537015c8604a34", "patch": "@@ -8,11 +8,11 @@ extern void abort (void);\n #include \"vect-fmaxv-fminv.x\"\n \n #define DEFN_SETV(type) \\\n-\t\tset_vector_##type (pR##type a, type n)   \\\n-\t\t{ \t\t\t\t         \\\n-\t\t  int i;\t\t\t         \\\n-\t\t  for (i=0; i<16; i++)\t\t         \\\n-\t\t    a[i] = n;\t\t\t\t \\\n+\t\tvoid set_vector_##type (pR##type a, type n)   \\\n+\t\t{\t\t\t\t\t      \\\n+\t\t  int i;\t\t\t\t      \\\n+\t\t  for (i=0; i<16; i++)\t\t\t      \\\n+\t\t    a[i] = n;\t\t\t\t      \\\n \t\t}\n \n #define DEFN_CHECKV(type) \\"}, {"sha": "af0c524b466caf2f1c82580bd50ac92da78a28ce", "filename": "gcc/testsuite/gcc.target/aarch64/vect-fp.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-fp.c?ref=ecad7681ac654a8813316bf01d537015c8604a34", "patch": "@@ -8,11 +8,11 @@ extern void abort (void);\n \n \n #define DEFN_SETV(type) \\\n-\t\tset_vector_##type (pR##type a, type n)   \\\n-\t\t{ \t\t\t\t         \\\n-\t\t  int i;\t\t\t         \\\n-\t\t  for (i=0; i<16; i++)\t\t         \\\n-\t\t    a[i] = n;\t\t\t\t \\\n+\t\tvoid set_vector_##type (pR##type a, type n)   \\\n+\t\t{\t\t\t\t\t      \\\n+\t\t  int i;\t\t\t\t      \\\n+\t\t  for (i=0; i<16; i++)\t\t\t      \\\n+\t\t    a[i] = n;\t\t\t\t      \\\n \t\t}\n \n #define DEFN_CHECKV(type) \\"}, {"sha": "db8303636413d64e8371408fc5652b8e0854b900", "filename": "gcc/testsuite/gcc.target/aarch64/vect-ld1r.x", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-ld1r.x?ref=ecad7681ac654a8813316bf01d537015c8604a34", "patch": "@@ -7,7 +7,7 @@\n     for (i = 0; i < 8 / sizeof (TYPE); i++) \\\n       output[i] = *a; \\\n   } \\\n-  foo_ ## TYPE ## _q (TYPE *a, TYPE *output) \\\n+  void foo_ ## TYPE ## _q (TYPE *a, TYPE *output) \\\n   { \\\n     int i; \\\n     for (i = 0; i < 32 / sizeof (TYPE); i++) \\"}, {"sha": "a2b2c632d817de3a304cc8f85507cee152ec7596", "filename": "gcc/testsuite/gcc.target/aarch64/vect.x", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecad7681ac654a8813316bf01d537015c8604a34/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect.x?ref=ecad7681ac654a8813316bf01d537015c8604a34", "patch": "@@ -2,6 +2,7 @@ typedef int *__restrict__ pRINT;\n typedef unsigned int *__restrict__ pRUINT;\n typedef long long *__restrict__ pRINT64;\n typedef unsigned long long *__restrict__ pRUINT64;\n+extern int abs (int j);\n \n void test_orn (pRUINT a, pRUINT b, pRUINT c)\n {"}]}