{"sha": "81fc552558f54c6f691e7816da9ab4ad8483f7ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFmYzU1MjU1OGY1NGM2ZjY5MWU3ODE2ZGE5YWI0YWQ4NDgzZjdlZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-02-14T18:21:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-02-14T18:24:33Z"}, "message": "Fix problematic TLS sequences for the Solaris linker\n\nThis is an old thinko pertaining to the interaction between TLS\nsequences and delay slot filling: the compiler knows that it cannot\nput instructions with TLS relocations into delay slots with the\noriginal Sun TLS model, but it tests TARGET_SUN_TLS in this context,\nwhich depends only on the assembler.  So if the compiler is configured\nwith the GNU assembler and the Solaris linker, then TARGET_GNU_TLS is\nset instead and the limitation is not enforced.\n\n\tPR target/93704\n\t* config/sparc/sparc.c (eligible_for_call_delay): Test HAVE_GNU_LD\n\tin conjunction with TARGET_GNU_TLS in early return.", "tree": {"sha": "1ff990a0e49d5dffd2b9157fd108360f5e157bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ff990a0e49d5dffd2b9157fd108360f5e157bbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81fc552558f54c6f691e7816da9ab4ad8483f7ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fc552558f54c6f691e7816da9ab4ad8483f7ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81fc552558f54c6f691e7816da9ab4ad8483f7ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fc552558f54c6f691e7816da9ab4ad8483f7ef/comments", "author": null, "committer": null, "parents": [{"sha": "d8305a03b4f0bb081dd9c88917cc8c48def22a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8305a03b4f0bb081dd9c88917cc8c48def22a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8305a03b4f0bb081dd9c88917cc8c48def22a80"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "e6eb6ab4c21f76e72fb934fd8c6187bb10d2e3e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fc552558f54c6f691e7816da9ab4ad8483f7ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fc552558f54c6f691e7816da9ab4ad8483f7ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81fc552558f54c6f691e7816da9ab4ad8483f7ef", "patch": "@@ -1,3 +1,9 @@\n+2020-02-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/93704\n+\t* config/sparc/sparc.c (eligible_for_call_delay): Test HAVE_GNU_LD in\n+\tconjunction with TARGET_GNU_TLS in early return.\n+\n 2020-02-14  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* rtlanal.c (rtx_cost): Handle a SET up front. Avoid division if"}, {"sha": "aefced85fe142885b1b31fa878a0ff0dfd4e921a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81fc552558f54c6f691e7816da9ab4ad8483f7ef/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81fc552558f54c6f691e7816da9ab4ad8483f7ef/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=81fc552558f54c6f691e7816da9ab4ad8483f7ef", "patch": "@@ -3959,11 +3959,8 @@ eligible_for_call_delay (rtx_insn *trial)\n   if (get_attr_in_branch_delay (trial) == IN_BRANCH_DELAY_FALSE)\n     return 0;\n \n-  /* Binutils allows\n-       call __tls_get_addr, %tgd_call (foo)\n-        add %l7, %o0, %o0, %tgd_add (foo)\n-     while Sun as/ld does not.  */\n-  if (TARGET_GNU_TLS || !TARGET_TLS)\n+  /* The only problematic cases are TLS sequences with Sun as/ld.  */\n+  if ((TARGET_GNU_TLS && HAVE_GNU_LD) || !TARGET_TLS)\n     return 1;\n \n   pat = PATTERN (trial);"}]}