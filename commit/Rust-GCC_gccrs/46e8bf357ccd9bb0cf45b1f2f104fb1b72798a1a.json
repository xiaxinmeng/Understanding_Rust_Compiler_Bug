{"sha": "46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlOGJmMzU3Y2NkOWJiMGNmNDViMWYyZjEwNGZiMWI3Mjc5OGExYQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-27T17:17:30Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-27T17:17:30Z"}, "message": "Qualified paths have a mandatory initial segment\n\nQualified path in type's initial segment is mandatory (+) any other\nsegments are optional after the fact. see\nhttps://doc.rust-lang.org/reference/paths.html#qualified-paths\n\nThis change makes the AST have a mandatory field for the initial segment\nthe segment list now only contains the optional remaining segments.", "tree": {"sha": "322b247f975308a44e01c688c6b075b1fdb8f2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/322b247f975308a44e01c688c6b075b1fdb8f2cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b42381685595c34f21d5ce9ef1c31ceac76720d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b42381685595c34f21d5ce9ef1c31ceac76720d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b42381685595c34f21d5ce9ef1c31ceac76720d"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "6ccd3a0d4b46ed24ebd44969ba73ee4b9bc8ac61", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a", "patch": "@@ -939,6 +939,7 @@ class QualifiedPathInExpression : public PathPattern, public PathExpr\n class QualifiedPathInType : public TypeNoBounds\n {\n   QualifiedPathType path_type;\n+  std::unique_ptr<TypePathSegment> associated_segment;\n   std::vector<std::unique_ptr<TypePathSegment> > segments;\n   Location locus;\n \n@@ -953,9 +954,11 @@ class QualifiedPathInType : public TypeNoBounds\n public:\n   QualifiedPathInType (\n     QualifiedPathType qual_path_type,\n+    std::unique_ptr<TypePathSegment> associated_segment,\n     std::vector<std::unique_ptr<TypePathSegment> > path_segments,\n-    Location locus = Location ())\n+    Location locus)\n     : path_type (std::move (qual_path_type)),\n+      associated_segment (std::move (associated_segment)),\n       segments (std::move (path_segments)), locus (locus)\n   {}\n \n@@ -995,8 +998,8 @@ class QualifiedPathInType : public TypeNoBounds\n   static QualifiedPathInType create_error ()\n   {\n     return QualifiedPathInType (\n-      QualifiedPathType::create_error (),\n-      std::vector<std::unique_ptr<TypePathSegment> > ());\n+      QualifiedPathType::create_error (), nullptr,\n+      std::vector<std::unique_ptr<TypePathSegment> > (), Location ());\n   }\n \n   std::string as_string () const override;\n@@ -1010,6 +1013,11 @@ class QualifiedPathInType : public TypeNoBounds\n     return path_type;\n   }\n \n+  std::unique_ptr<TypePathSegment> &get_associated_segment ()\n+  {\n+    return associated_segment;\n+  }\n+\n   // TODO: this seems kinda dodgy\n   std::vector<std::unique_ptr<TypePathSegment> > &get_segments ()\n   {"}, {"sha": "1c0644d42aec84cb969ab22122d1aef3c0e58404", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=46e8bf357ccd9bb0cf45b1f2f104fb1b72798a1a", "patch": "@@ -6742,10 +6742,6 @@ Parser<ManagedTokenSource>::parse_qualified_path_in_type ()\n       return AST::QualifiedPathInType::create_error ();\n     }\n \n-  // parse path segments\n-  std::vector<std::unique_ptr<AST::TypePathSegment>> segments;\n-  segments.reserve (1);\n-\n   // parse initial required segment\n   if (!expect_token (SCOPE_RESOLUTION))\n     {\n@@ -6765,9 +6761,9 @@ Parser<ManagedTokenSource>::parse_qualified_path_in_type ()\n \n       return AST::QualifiedPathInType::create_error ();\n     }\n-  segments.push_back (std::move (initial_segment));\n \n   // parse optional segments (as long as scope resolution operator exists)\n+  std::vector<std::unique_ptr<AST::TypePathSegment>> segments;\n   const_TokenPtr t = lexer.peek_token ();\n   while (t->get_id () == SCOPE_RESOLUTION)\n     {\n@@ -6796,6 +6792,7 @@ Parser<ManagedTokenSource>::parse_qualified_path_in_type ()\n   segments.shrink_to_fit ();\n \n   return AST::QualifiedPathInType (std::move (qual_path_type),\n+\t\t\t\t   std::move (initial_segment),\n \t\t\t\t   std::move (segments), locus);\n }\n "}]}