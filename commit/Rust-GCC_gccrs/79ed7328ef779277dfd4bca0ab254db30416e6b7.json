{"sha": "79ed7328ef779277dfd4bca0ab254db30416e6b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzllZDczMjhlZjc3OTI3N2RmZDRiY2EwYWIyNTRkYjMwNDE2ZTZiNw==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-05-23T18:32:12Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-05-23T18:32:12Z"}, "message": "builtin-attrs.def: Update copyright years.\n\n* builtin-attrs.def: Update copyright years.\n(ATTR_NONNULL): New attribute identifier.\n(ATTR_NONNULL_1, ATTR_NONNULL_2, ATTR_NONNULL_3): New\nattribute tree lists.\n(DEF_FORMAT_ATTRIBUTE): Chain a nonnull attribute for the\nformat operand.\n(ATTR_FORMAT_ARG_1, ATTR_FORMAT_ARG_2): Use...\n(DEF_FORMAT_ARG_ATTRIBUTE): ...this to generate format_arg\nattribute lists.  Chain the appropriate nonnull attribute.\n* c-format.c (check_format_arg): Remove null format string\nwarning.\n* testsuite/gcc.dg/format/null-1.c: New test.\n\nFrom-SVN: r53801", "tree": {"sha": "a0f4ef4e49cca963a0f7c4212cd7cef8b803fee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0f4ef4e49cca963a0f7c4212cd7cef8b803fee1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79ed7328ef779277dfd4bca0ab254db30416e6b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ed7328ef779277dfd4bca0ab254db30416e6b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ed7328ef779277dfd4bca0ab254db30416e6b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ed7328ef779277dfd4bca0ab254db30416e6b7/comments", "author": null, "committer": null, "parents": [{"sha": "7d600178a1a29a16894173ce60ebf3599c571ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d600178a1a29a16894173ce60ebf3599c571ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d600178a1a29a16894173ce60ebf3599c571ea5"}], "stats": {"total": 92, "additions": 70, "deletions": 22}, "files": [{"sha": "83b976dd5475dfd1c99c7df36606aeeb02b86b2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ed7328ef779277dfd4bca0ab254db30416e6b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ed7328ef779277dfd4bca0ab254db30416e6b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79ed7328ef779277dfd4bca0ab254db30416e6b7", "patch": "@@ -1,3 +1,18 @@\n+2002-05-23  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* builtin-attrs.def: Update copyright years.\n+\t(ATTR_NONNULL): New attribute identifier.\n+\t(ATTR_NONNULL_1, ATTR_NONNULL_2, ATTR_NONNULL_3): New\n+\tattribute tree lists.\n+\t(DEF_FORMAT_ATTRIBUTE): Chain a nonnull attribute for the\n+\tformat operand.\n+\t(ATTR_FORMAT_ARG_1, ATTR_FORMAT_ARG_2): Use...\n+\t(DEF_FORMAT_ARG_ATTRIBUTE): ...this to generate format_arg\n+\tattribute lists.  Chain the appropriate nonnull attribute.\n+\t* c-format.c (check_format_arg): Remove null format string\n+\twarning.\n+\t* testsuite/gcc.dg/format/null-1.c: New test.\n+\n 2002-05-23  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* Makefile.in (ADAC): Define."}, {"sha": "56081d1cc5194212da60d869ef833e14722e587c", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ed7328ef779277dfd4bca0ab254db30416e6b7/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ed7328ef779277dfd4bca0ab254db30416e6b7/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=79ed7328ef779277dfd4bca0ab254db30416e6b7", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001 Free Software Foundation, Inc.\n+/* Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Joseph Myers <jsm28@cam.ac.uk>.\n \n This file is part of GCC.\n@@ -85,28 +85,39 @@ DEF_ATTR_IDENT (ATTR_STRFMON, \"strfmon\")\n DEF_ATTR_IDENT (ATTR_FORMAT, \"format\")\n DEF_ATTR_IDENT (ATTR_FORMAT_ARG, \"format_arg\")\n \n+DEF_ATTR_IDENT (ATTR_NONNULL, \"nonnull\")\n+\n+DEF_ATTR_TREE_LIST (ATTR_NONNULL_1, ATTR_NONNULL, ATTR_LIST_1, ATTR_NULL)\n+DEF_ATTR_TREE_LIST (ATTR_NONNULL_2, ATTR_NONNULL, ATTR_LIST_2, ATTR_NULL)\n+DEF_ATTR_TREE_LIST (ATTR_NONNULL_3, ATTR_NONNULL, ATTR_LIST_3, ATTR_NULL)\n+\n /* Construct a tree for a format attribute.  */\n-#define DEF_FORMAT_ATTRIBUTE(TYPE, VALUES)\t\t\t\t \\\n+#define DEF_FORMAT_ATTRIBUTE(TYPE, FA, VALUES)\t\t\t\t \\\n   DEF_ATTR_TREE_LIST (CONCAT4 (ATTR_,TYPE,_,VALUES), ATTR_NULL,\t\t \\\n \t\t      CONCAT2 (ATTR_,TYPE), CONCAT2 (ATTR_LIST_,VALUES)) \\\n   DEF_ATTR_TREE_LIST (CONCAT4 (ATTR_FORMAT_,TYPE,_,VALUES), ATTR_FORMAT, \\\n-\t\t      CONCAT4 (ATTR_,TYPE,_,VALUES), ATTR_NULL)\n-DEF_FORMAT_ATTRIBUTE(PRINTF,1_0)\n-DEF_FORMAT_ATTRIBUTE(PRINTF,1_2)\n-DEF_FORMAT_ATTRIBUTE(PRINTF,2_0)\n-DEF_FORMAT_ATTRIBUTE(PRINTF,2_3)\n-DEF_FORMAT_ATTRIBUTE(PRINTF,3_0)\n-DEF_FORMAT_ATTRIBUTE(PRINTF,3_4)\n-DEF_FORMAT_ATTRIBUTE(SCANF,1_0)\n-DEF_FORMAT_ATTRIBUTE(SCANF,1_2)\n-DEF_FORMAT_ATTRIBUTE(SCANF,2_0)\n-DEF_FORMAT_ATTRIBUTE(SCANF,2_3)\n-DEF_FORMAT_ATTRIBUTE(STRFTIME,3_0)\n-DEF_FORMAT_ATTRIBUTE(STRFMON,3_4)\n+\t\t      CONCAT4 (ATTR_,TYPE,_,VALUES), CONCAT2 (ATTR_NONNULL_,FA))\n+DEF_FORMAT_ATTRIBUTE(PRINTF,1,1_0)\n+DEF_FORMAT_ATTRIBUTE(PRINTF,1,1_2)\n+DEF_FORMAT_ATTRIBUTE(PRINTF,2,2_0)\n+DEF_FORMAT_ATTRIBUTE(PRINTF,2,2_3)\n+DEF_FORMAT_ATTRIBUTE(PRINTF,3,3_0)\n+DEF_FORMAT_ATTRIBUTE(PRINTF,3,3_4)\n+DEF_FORMAT_ATTRIBUTE(SCANF,1,1_0)\n+DEF_FORMAT_ATTRIBUTE(SCANF,1,1_2)\n+DEF_FORMAT_ATTRIBUTE(SCANF,2,2_0)\n+DEF_FORMAT_ATTRIBUTE(SCANF,2,2_3)\n+DEF_FORMAT_ATTRIBUTE(STRFTIME,3,3_0)\n+DEF_FORMAT_ATTRIBUTE(STRFMON,3,3_4)\n #undef DEF_FORMAT_ATTRIBUTE\n \n-DEF_ATTR_TREE_LIST (ATTR_FORMAT_ARG_1, ATTR_FORMAT_ARG, ATTR_LIST_1, ATTR_NULL)\n-DEF_ATTR_TREE_LIST (ATTR_FORMAT_ARG_2, ATTR_FORMAT_ARG, ATTR_LIST_2, ATTR_NULL)\n+/* Construct a tree for a format_arg attribute.  */\n+#define DEF_FORMAT_ARG_ATTRIBUTE(FA)\t\t\t\t\t\\\n+  DEF_ATTR_TREE_LIST (CONCAT2 (ATTR_FORMAT_ARG_,FA), ATTR_FORMAT_ARG,\t\\\n+\t\t      CONCAT2 (ATTR_LIST_,FA), CONCAT2 (ATTR_NONNULL_,FA))\n+DEF_FORMAT_ARG_ATTRIBUTE(1)\n+DEF_FORMAT_ARG_ATTRIBUTE(2)\n+#undef DEF_FORMAT_ARG_ATTRIBUTE\n \n /* Define an attribute for a function, along with the IDENTIFIER_NODE.  */\n #define DEF_FN_ATTR_IDENT(NAME, ATTRS, PREDICATE)\t\\"}, {"sha": "7e8b1374de4defbecfd7d5b8a83e9919b5d974fd", "filename": "gcc/c-format.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ed7328ef779277dfd4bca0ab254db30416e6b7/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ed7328ef779277dfd4bca0ab254db30416e6b7/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=79ed7328ef779277dfd4bca0ab254db30416e6b7", "patch": "@@ -1418,11 +1418,6 @@ check_format_arg (ctx, format_tree, arg_num)\n \n   if (integer_zerop (format_tree))\n     {\n-      /* FIXME: instead of warning about a null format string here,\n-\t functions for which we want to perform this check should be\n-\t marked with the \"nonnull\" attribute on the appropriate arguments.  */\n-      status_warning (status, \"null format string\");\n-\n       /* Skip to first argument to check, so we can see if this format\n \t has any arguments (it shouldn't).  */\n       while (arg_num + 1 < info->first_arg_num)"}, {"sha": "63501a3981e4ecc4792eb5b7d297219f3b236216", "filename": "gcc/testsuite/gcc.dg/format/null-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ed7328ef779277dfd4bca0ab254db30416e6b7/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnull-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ed7328ef779277dfd4bca0ab254db30416e6b7/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnull-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fnull-1.c?ref=79ed7328ef779277dfd4bca0ab254db30416e6b7", "patch": "@@ -0,0 +1,27 @@\n+/* Test for some aspects of null format string handling.  */\n+/* Origin: Jason Thorpe <thorpej@wasabisystems.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+extern void my_printf (const char *, ...) __attribute__((format(printf,1,2)));\n+extern const char *my_format (const char *, const char *)\n+  __attribute__((format_arg(2)));\n+\n+void\n+foo (int i1)\n+{\n+  /* Warning about a null format string has been decoupled from the actual\n+     format check.  However, we still expect to be warned about any excess\n+     arguments after a null format string.  */\n+  my_printf (NULL);\n+  my_printf (NULL, i1); /* { dg-warning \"too many\" \"null format with arguments\" } */\n+\n+  my_printf (my_format (\"\", NULL));\n+  my_printf (my_format (\"\", NULL), i1); /* { dg-warning \"too many\" \"null format_arg with arguments\" } */\n+\n+  /* While my_printf allows a null argument, dgettext does not, so we expect\n+     a null argument warning here.  */\n+  my_printf (dgettext (\"\", NULL)); /* { dg-warning \"null\" \"null format with dgettext\" } */\n+}"}]}