{"sha": "a91926b9ff33c716bfbcf1fc70a735778164f0e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkxOTI2YjlmZjMzYzcxNmJmYmNmMWZjNzBhNzM1Nzc4MTY0ZjBlNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2011-05-06T15:13:35Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-05-06T15:13:35Z"}, "message": "tree-ssa-threadupdate.c (create_block_for_threading): Do not call remove_ctrl_stmt_and_useless_edges.\n\n\t* tree-ssa-threadupdate.c (create_block_for_threading): Do not call\n\tremove_ctrl_stmt_and_useless_edges.\n\t(create_duplicates): Call remove_ctrl_stmt_and_useless_edges.\n\t(fixup_template_block, thread_single_edge): Likewise.\n\t(mark_threaded_blocks): Use THREAD_TARGET.\n\nFrom-SVN: r173492", "tree": {"sha": "e674d085db2678cbf191fad6acbe0bf2a281766e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e674d085db2678cbf191fad6acbe0bf2a281766e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a91926b9ff33c716bfbcf1fc70a735778164f0e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91926b9ff33c716bfbcf1fc70a735778164f0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a91926b9ff33c716bfbcf1fc70a735778164f0e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a91926b9ff33c716bfbcf1fc70a735778164f0e5/comments", "author": null, "committer": null, "parents": [{"sha": "1fc1b66d4a7668e4a9640edac9c6d6bd5105284d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc1b66d4a7668e4a9640edac9c6d6bd5105284d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc1b66d4a7668e4a9640edac9c6d6bd5105284d"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "22f103ed76dbbdfba7e9f0f4acb8a56460515a20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91926b9ff33c716bfbcf1fc70a735778164f0e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91926b9ff33c716bfbcf1fc70a735778164f0e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a91926b9ff33c716bfbcf1fc70a735778164f0e5", "patch": "@@ -1,3 +1,11 @@\n+2011-05-06  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-threadupdate.c (create_block_for_threading): Do not call\n+\tremove_ctrl_stmt_and_useless_edges.\n+\t(create_duplicates): Call remove_ctrl_stmt_and_useless_edges.\n+\t(fixup_template_block, thread_single_edge): Likewise.\n+\t(mark_threaded_blocks): Use THREAD_TARGET.\n+\n 2011-05-06  Alan Modra  <amodra@gmail.com>\n \n \tPR target/48900"}, {"sha": "c6e34051c9c6a6802e0a8ee51e81d4e8668cd6fa", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a91926b9ff33c716bfbcf1fc70a735778164f0e5/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a91926b9ff33c716bfbcf1fc70a735778164f0e5/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=a91926b9ff33c716bfbcf1fc70a735778164f0e5", "patch": "@@ -198,8 +198,7 @@ remove_ctrl_stmt_and_useless_edges (basic_block bb, basic_block dest_bb)\n     }\n }\n \n-/* Create a duplicate of BB which only reaches the destination of the edge\n-   stored in RD.  Record the duplicate block in RD.  */\n+/* Create a duplicate of BB.  Record the duplicate block in RD.  */\n \n static void\n create_block_for_threading (basic_block bb, struct redirection_data *rd)\n@@ -217,14 +216,6 @@ create_block_for_threading (basic_block bb, struct redirection_data *rd)\n   /* Zero out the profile, since the block is unreachable for now.  */\n   rd->dup_block->frequency = 0;\n   rd->dup_block->count = 0;\n-\n-  /* The call to duplicate_block will copy everything, including the\n-     useless COND_EXPR or SWITCH_EXPR at the end of BB.  We just remove\n-     the useless COND_EXPR or SWITCH_EXPR here rather than having a\n-     specialized block copier.  We also remove all outgoing edges\n-     from the duplicate block.  The appropriate edge will be created\n-     later.  */\n-  remove_ctrl_stmt_and_useless_edges (rd->dup_block, NULL);\n }\n \n /* Hashing and equality routines for our hash table.  */\n@@ -375,6 +366,7 @@ create_duplicates (void **slot, void *data)\n \n       /* Go ahead and wire up outgoing edges and update PHIs for the duplicate\n          block.  */\n+      remove_ctrl_stmt_and_useless_edges (rd->dup_block, NULL);\n       create_edge_and_update_destination_phis (rd, rd->dup_block);\n     }\n \n@@ -396,6 +388,7 @@ fixup_template_block (void **slot, void *data)\n      and halt the hash table traversal.  */\n   if (rd->dup_block && rd->dup_block == local_info->template_block)\n     {\n+      remove_ctrl_stmt_and_useless_edges (rd->dup_block, NULL);\n       create_edge_and_update_destination_phis (rd, rd->dup_block);\n       return 0;\n     }\n@@ -646,6 +639,7 @@ thread_single_edge (edge e)\n   rd.outgoing_edge = eto;\n \n   create_block_for_threading (bb, &rd);\n+  remove_ctrl_stmt_and_useless_edges (rd.dup_block, NULL);\n   create_edge_and_update_destination_phis (&rd, rd.dup_block);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -978,8 +972,8 @@ mark_threaded_blocks (bitmap threaded_blocks)\n       edge e = VEC_index (edge, threaded_edges, i);\n       edge *x = (edge *) XNEWVEC (edge, 1);\n \n-      x[0] = VEC_index (edge, threaded_edges, i + 1);\n       e->aux = x;\n+      THREAD_TARGET (e) = VEC_index (edge, threaded_edges, i + 1);\n       bitmap_set_bit (tmp, e->dest->index);\n     }\n "}]}