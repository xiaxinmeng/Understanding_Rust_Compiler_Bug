{"sha": "f1acc01e2d1d2d83397d9283569638e5680b0304", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhY2MwMWUyZDFkMmQ4MzM5N2Q5MjgzNTY5NjM4ZTU2ODBiMDMwNA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-04-27T00:18:41Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-04-27T00:18:41Z"}, "message": "zextract.c (find_zip_file_start): New function.\n\n\t* zextract.c (find_zip_file_start): New function.\n\t(read_zip_archive): Use it.\n\nFrom-SVN: r33451", "tree": {"sha": "80b562f8bbaf2259d24b9f032e12ca51c1fd4283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80b562f8bbaf2259d24b9f032e12ca51c1fd4283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1acc01e2d1d2d83397d9283569638e5680b0304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1acc01e2d1d2d83397d9283569638e5680b0304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1acc01e2d1d2d83397d9283569638e5680b0304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1acc01e2d1d2d83397d9283569638e5680b0304/comments", "author": null, "committer": null, "parents": [{"sha": "f4c150e50bbb3bc7262bd538429c378ac8b5a845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c150e50bbb3bc7262bd538429c378ac8b5a845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4c150e50bbb3bc7262bd538429c378ac8b5a845"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "8693331446eef55a5d40e17b484dc522a6d6d7fe", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1acc01e2d1d2d83397d9283569638e5680b0304/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1acc01e2d1d2d83397d9283569638e5680b0304/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f1acc01e2d1d2d83397d9283569638e5680b0304", "patch": "@@ -1,3 +1,8 @@\n+2000-04-26  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* zextract.c (find_zip_file_start): New function.\n+\t(read_zip_archive): Use it.\n+\n Mon Apr 24 14:59:36 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (end_class_declaration): Reset the interface number"}, {"sha": "b7ced1562a13e4bfa0d57319a26f4315bd315234", "filename": "gcc/java/zextract.c", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1acc01e2d1d2d83397d9283569638e5680b0304/gcc%2Fjava%2Fzextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1acc01e2d1d2d83397d9283569638e5680b0304/gcc%2Fjava%2Fzextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fzextract.c?ref=f1acc01e2d1d2d83397d9283569638e5680b0304", "patch": "@@ -212,6 +212,7 @@ typedef unsigned long     ulg;  /*  predefined on some systems) & match zip  */\n \n static ush makeword PARAMS ((const uch *));\n static ulg makelong PARAMS ((const uch *));\n+static long find_zip_file_start PARAMS ((int fd, long offset));\n \n /***********************/\n /* Function makeword() */\n@@ -245,6 +246,32 @@ static ulg makelong(sig)\n         + ((ulg)sig[0]);\n }\n \n+/* Examine file's header in zip file and return the offset of the\n+   start of the actual data.  Return -1 on error.  OFFSET is the\n+   offset from the beginning of the zip file of the file's header.  */\n+static long\n+find_zip_file_start (fd, offset)\n+     int fd;\n+     long offset;\n+{\n+  int filename_length, extra_field_length;\n+  unsigned char buffer[LREC_SIZE + 4];\n+\n+  if (lseek (fd, offset, SEEK_SET) < 0)\n+    return -1;\n+\n+  if (read (fd, buffer, LREC_SIZE + 4) != LREC_SIZE + 4)\n+    return -1;\n+\n+  if (buffer[0] != 'P' || strncmp (&buffer[1], LOCAL_HDR_SIG, 3))\n+    return -1;\n+\n+  filename_length = makeword (&buffer[4 + L_FILENAME_LENGTH]);\n+  extra_field_length = makeword (&buffer[4 + L_EXTRA_FIELD_LENGTH]);\n+\n+  return offset + (4 + LREC_SIZE) + filename_length + extra_field_length;\n+}\n+\n int\n read_zip_archive (zipf)\n      register ZipFile *zipf;\n@@ -294,7 +321,6 @@ read_zip_archive (zipf)\n       long uncompressed_size = makelong (&dir_ptr[4+C_UNCOMPRESSED_SIZE]);\n       long filename_length = makeword (&dir_ptr[4+C_FILENAME_LENGTH]);\n       long extra_field_length = makeword (&dir_ptr[4+C_EXTRA_FIELD_LENGTH]);\n-      long file_comment_length = makeword (&dir_ptr[4+C_FILE_COMMENT_LENGTH]);\n       int unpadded_direntry_length;\n       if ((dir_ptr-zipf->central_directory)+filename_length+CREC_SIZE+4>zipf->dir_size)\n \treturn -1;\n@@ -306,12 +332,8 @@ read_zip_archive (zipf)\n #else\n #define DIR_ALIGN sizeof(long)\n #endif\n-      zipd->filestart = makelong (&dir_ptr[4+C_RELATIVE_OFFSET_LOCAL_HEADER])\n-\t  + (LREC_SIZE+4) + filename_length + file_comment_length +\n-\t  + (extra_field_length ? extra_field_length+4 : 0);\n-      /* About the last term of the expression above. Should the same\n-\t apply if file_comment_length is not zero ?  I've never seen\n-\t the comment field uses so far. FIXME.  */\n+      zipd->filestart = find_zip_file_start (zipf->fd, \n+\t\t\t\t\t     makelong (&dir_ptr[4+C_RELATIVE_OFFSET_LOCAL_HEADER]));\n       zipd->filename_offset = CREC_SIZE+4 - dir_last_pad;\n       unpadded_direntry_length \n \t  = zipd->filename_offset + zipd->filename_length + extra_field_length;"}]}