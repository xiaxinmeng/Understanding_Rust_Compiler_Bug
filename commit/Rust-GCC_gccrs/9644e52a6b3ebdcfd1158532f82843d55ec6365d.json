{"sha": "9644e52a6b3ebdcfd1158532f82843d55ec6365d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY0NGU1MmE2YjNlYmRjZmQxMTU4NTMyZjgyODQzZDU1ZWM2MzY1ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-12-03T04:19:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-12-03T04:19:44Z"}, "message": "ipa-pure-const.c (ignore_edge): Rename to ...\n\n\n\t* ipa-pure-const.c (ignore_edge): Rename to ...\n\t(ignore_edge_for_nothrow) ... this one; also ignore eges to\n\tinterposable functions or ones that can not throw.\n\t(propagate_nothrow): Fix handling of availability.\n\nFrom-SVN: r231218", "tree": {"sha": "7ab83a95dc3db367845e5c16d2962f95c5cd9fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ab83a95dc3db367845e5c16d2962f95c5cd9fe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9644e52a6b3ebdcfd1158532f82843d55ec6365d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9644e52a6b3ebdcfd1158532f82843d55ec6365d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9644e52a6b3ebdcfd1158532f82843d55ec6365d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9644e52a6b3ebdcfd1158532f82843d55ec6365d/comments", "author": null, "committer": null, "parents": [{"sha": "89bbe9ba36dfcf71ab9e5d85c447f3511e7f8d97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89bbe9ba36dfcf71ab9e5d85c447f3511e7f8d97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89bbe9ba36dfcf71ab9e5d85c447f3511e7f8d97"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "0cb5593f5551c80839d596ea63a9b804ed2dc295", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9644e52a6b3ebdcfd1158532f82843d55ec6365d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9644e52a6b3ebdcfd1158532f82843d55ec6365d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9644e52a6b3ebdcfd1158532f82843d55ec6365d", "patch": "@@ -1,3 +1,10 @@\n+2015-12-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-pure-const.c (ignore_edge): Rename to ...\n+\t(ignore_edge_for_nothrow) ... this one; also ignore eges to\n+\tinterposable functions or ones that can not throw.\n+\t(propagate_nothrow): Fix handling of availability.\n+\n 2015-12-02  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/68184"}, {"sha": "654791ad42de43bdadc13640987f5b50ed1a523b", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9644e52a6b3ebdcfd1158532f82843d55ec6365d/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9644e52a6b3ebdcfd1158532f82843d55ec6365d/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=9644e52a6b3ebdcfd1158532f82843d55ec6365d", "patch": "@@ -1124,11 +1124,18 @@ pure_const_read_summary (void)\n     }\n }\n \n+/* We only propagate across edges that can throw externally and their callee\n+   is not interposable.  */\n \n static bool\n-ignore_edge (struct cgraph_edge *e)\n+ignore_edge_for_nothrow (struct cgraph_edge *e)\n {\n-  return (!e->can_throw_external);\n+  if (!e->can_throw_external || TREE_NOTHROW (e->callee->decl))\n+    return true;\n+\n+  enum availability avail;\n+  cgraph_node *n = e->callee->function_or_virtual_thunk_symbol (&avail);\n+  return (avail <= AVAIL_INTERPOSABLE || TREE_NOTHROW (n->decl));\n }\n \n /* Return true if NODE is self recursive function.\n@@ -1491,7 +1498,8 @@ propagate_nothrow (void)\n   int i;\n   struct ipa_dfs_info * w_info;\n \n-  order_pos = ipa_reduced_postorder (order, true, false, ignore_edge);\n+  order_pos = ipa_reduced_postorder (order, true, false,\n+\t\t\t\t     ignore_edge_for_nothrow);\n   if (dump_file)\n     {\n       cgraph_node::dump_cgraph (dump_file);\n@@ -1515,32 +1523,38 @@ propagate_nothrow (void)\n       while (w && !can_throw)\n \t{\n \t  struct cgraph_edge *e, *ie;\n-\t  funct_state w_l = get_function_state (w);\n-\n-\t  if (w_l->can_throw\n-\t      || w->get_availability () == AVAIL_INTERPOSABLE)\n-\t    can_throw = true;\n \n-\t  for (e = w->callees; e && !can_throw; e = e->next_callee)\n+\t  if (!TREE_NOTHROW (w->decl))\n \t    {\n-\t      enum availability avail;\n-\t      struct cgraph_node *y = e->callee->\n-\t\t\t\tfunction_or_virtual_thunk_symbol (&avail);\n+\t      funct_state w_l = get_function_state (w);\n \n-\t      if (avail > AVAIL_INTERPOSABLE)\n+\t      if (w_l->can_throw\n+\t\t  || w->get_availability () == AVAIL_INTERPOSABLE)\n+\t\tcan_throw = true;\n+\n+\t      for (e = w->callees; e && !can_throw; e = e->next_callee)\n \t\t{\n-\t\t  funct_state y_l = get_function_state (y);\n+\t\t  enum availability avail;\n+\n+\t\t  if (!e->can_throw_external || TREE_NOTHROW (e->callee->decl))\n+\t\t    continue;\n+\n+\t\t  struct cgraph_node *y = e->callee->\n+\t\t\t\t    function_or_virtual_thunk_symbol (&avail);\n \n-\t\t  if (y_l->can_throw && !TREE_NOTHROW (w->decl)\n-\t\t      && e->can_throw_external)\n+\t\t  /* We can use info about the callee only if we know it can\n+\t\t     not be interposed.  */\n+\t\t  if (avail <= AVAIL_INTERPOSABLE\n+\t\t      || (!TREE_NOTHROW (y->decl)\n+\t\t\t  && get_function_state (y)->can_throw))\n \t\t    can_throw = true;\n \t\t}\n-\t      else if (e->can_throw_external && !TREE_NOTHROW (y->decl))\n-\t        can_throw = true;\n+\t      for (ie = w->indirect_calls; ie && !can_throw;\n+\t\t   ie = ie->next_callee)\n+\t\tif (ie->can_throw_external\n+\t\t    && !(ie->indirect_info->ecf_flags & ECF_NOTHROW))\n+\t\t  can_throw = true;\n \t    }\n-          for (ie = w->indirect_calls; ie && !can_throw; ie = ie->next_callee)\n-\t    if (ie->can_throw_external)\n-\t      can_throw = true;\n \t  w_info = (struct ipa_dfs_info *) w->aux;\n \t  w = w_info->next_cycle;\n \t}\n@@ -1650,7 +1664,7 @@ skip_function_for_local_pure_const (struct cgraph_node *node)\n   if (node->get_availability () <= AVAIL_INTERPOSABLE)\n     {\n       if (dump_file)\n-        fprintf (dump_file, \"Function is not available or overwritable; not analyzing.\\n\");\n+        fprintf (dump_file, \"Function is not available or interposable; not analyzing.\\n\");\n       return true;\n     }\n   return false;"}]}