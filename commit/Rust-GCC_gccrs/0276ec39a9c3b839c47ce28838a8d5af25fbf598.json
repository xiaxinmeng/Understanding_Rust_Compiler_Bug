{"sha": "0276ec39a9c3b839c47ce28838a8d5af25fbf598", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI3NmVjMzlhOWMzYjgzOWM0N2NlMjg4MzhhOGQ1YWYyNWZiZjU5OA==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-30T10:58:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-30T10:58:23Z"}, "message": "Merge #399\n\n399: Improve error diagnostics in generic argument handling r=philberty a=philberty\n\nWhen we get GenericBindings such as ::<A=...> this is not allowed\r\nin this context. We can also improve the unexpected number of argument\r\nerrors to print the number of expected vs received arguments\r\n\r\nAn example error message looks like:\r\n```\r\ntest.rs:4:12: error: generic item takes at least 1 type arguments but 0 were supplied\r\n    1 | struct Foo<A>(A);\r\n      |            ~\r\n......\r\n    4 |     let a: Foo = Foo::<i32>(123);\r\n      |            ^\r\n\r\n```\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "92dfd62b9f3ebf2d73a0bfcaf2b59c513191aead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92dfd62b9f3ebf2d73a0bfcaf2b59c513191aead"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0276ec39a9c3b839c47ce28838a8d5af25fbf598", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgi+LPCRBK7hj4Ov3rIwAAg8UIAHABYgZYYxrFpS3abPKw56uT\n2GHZZRhBsXrc9ECKN99x2CkFgHlaGtXFMCVfhcRYW9Q1vNmGWySEZOpJjCLu6N/p\nwUooutDZBX4VtngsxiC5Ws+4/nwW5vn93Ovhhc3QmT5OEyVgXP2H+2ydADwcndg2\nJyeR+2DNzaITH/R2KWT/HycqhT1sAUwJqWDzOrzS3FEJ8CQK7Ixq24El0ZUB4s9K\n5lm95Ez4SaX+dojrrW36Foml9jKxa1LGfCKMi2Kq/EZYHlJP2puZ5H/cXVzkCmKp\n68R1R2DYwcDp+H1izZ9NKvuL8Wn4987Umg410ZJiUXUWpwxFXt1S4cDyQL4J+Mc=\n=8e7j\n-----END PGP SIGNATURE-----\n", "payload": "tree 92dfd62b9f3ebf2d73a0bfcaf2b59c513191aead\nparent f189f5bbab73b5d04faee4f4d2198f023c9e1522\nparent b7d95ea80be40c5ee468a5549d84e058a21fc62c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1619780303 +0000\ncommitter GitHub <noreply@github.com> 1619780303 +0000\n\nMerge #399\n\n399: Improve error diagnostics in generic argument handling r=philberty a=philberty\n\nWhen we get GenericBindings such as ::<A=...> this is not allowed\r\nin this context. We can also improve the unexpected number of argument\r\nerrors to print the number of expected vs received arguments\r\n\r\nAn example error message looks like:\r\n```\r\ntest.rs:4:12: error: generic item takes at least 1 type arguments but 0 were supplied\r\n    1 | struct Foo<A>(A);\r\n      |            ~\r\n......\r\n    4 |     let a: Foo = Foo::<i32>(123);\r\n      |            ^\r\n\r\n```\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0276ec39a9c3b839c47ce28838a8d5af25fbf598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0276ec39a9c3b839c47ce28838a8d5af25fbf598", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0276ec39a9c3b839c47ce28838a8d5af25fbf598/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f189f5bbab73b5d04faee4f4d2198f023c9e1522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f189f5bbab73b5d04faee4f4d2198f023c9e1522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f189f5bbab73b5d04faee4f4d2198f023c9e1522"}, {"sha": "b7d95ea80be40c5ee468a5549d84e058a21fc62c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d95ea80be40c5ee468a5549d84e058a21fc62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7d95ea80be40c5ee468a5549d84e058a21fc62c"}], "stats": {"total": 406, "additions": 348, "deletions": 58}, "files": [{"sha": "b6d340118405db95016772dbce631ed03c519185", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -1232,6 +1232,8 @@ class LifetimeParam : public GenericParam\n   Location locus;\n \n public:\n+  Lifetime get_lifetime () const { return lifetime; }\n+\n   // Returns whether the lifetime param has any lifetime bounds.\n   bool has_lifetime_bounds () const { return !lifetime_bounds.empty (); }\n "}, {"sha": "86da203bd71bdeef1802795b10f7d1dae853b4b5", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -124,6 +124,10 @@ struct GenericArgsBinding\n     rust_assert (type != nullptr);\n     return type;\n   }\n+\n+  Location get_locus () const { return locus; }\n+\n+  Identifier get_identifier () const { return identifier; }\n };\n \n // Generic arguments allowed in each path expression segment - inline?"}, {"sha": "16143d2c635c50f2bf818dd34ee76c06de4eadd3", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -291,6 +291,8 @@ class ASTLoweringBase : public AST::ASTVisitor\n   HIR::PathExprSegment lower_path_expr_seg (AST::PathExprSegment &s);\n \n   HIR::GenericArgs lower_generic_args (AST::GenericArgs &args);\n+\n+  HIR::GenericArgsBinding lower_binding (AST::GenericArgsBinding &binding);\n };\n \n } // namespace HIR"}, {"sha": "e6473371826fc9ee3f680d8da749f33a0c92f26a", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -265,6 +265,34 @@ class ASTLowerGenericParam : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n+  void visit (AST::LifetimeParam &param) override\n+  {\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, param.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+    HIR::Lifetime::LifetimeType ltt;\n+\n+    switch (param.get_lifetime ().get_lifetime_type ())\n+      {\n+      case AST::Lifetime::LifetimeType::NAMED:\n+\tltt = HIR::Lifetime::LifetimeType::NAMED;\n+\tbreak;\n+      case AST::Lifetime::LifetimeType::STATIC:\n+\tltt = HIR::Lifetime::LifetimeType::STATIC;\n+\tbreak;\n+      case AST::Lifetime::LifetimeType::WILDCARD:\n+\tltt = HIR::Lifetime::LifetimeType::WILDCARD;\n+\tbreak;\n+      }\n+\n+    HIR::Lifetime lt (mapping, ltt, param.get_lifetime ().get_lifetime_name (),\n+\t\t      param.get_lifetime ().get_locus ());\n+\n+    translated = new HIR::LifetimeParam (mapping, lt, param.get_locus (),\n+\t\t\t\t\t std::vector<Lifetime> ());\n+  }\n+\n   void visit (AST::TypeParam &param) override\n   {\n     HIR::Attribute outer_attr = HIR::Attribute::create_empty ();"}, {"sha": "f1129ab80a5d1f93e7b5b2016980831f9ff15979", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -314,10 +314,25 @@ ASTLoweringBase::lower_path_expr_seg (AST::PathExprSegment &s)\n \t\t\t  : HIR::GenericArgs::create_empty ());\n }\n \n+HIR::GenericArgsBinding\n+ASTLoweringBase::lower_binding (AST::GenericArgsBinding &binding)\n+{\n+  HIR::Type *lowered_type\n+    = ASTLoweringType::translate (binding.get_type ().get ());\n+  return HIR::GenericArgsBinding (binding.get_identifier (),\n+\t\t\t\t  std::unique_ptr<HIR::Type> (lowered_type),\n+\t\t\t\t  binding.get_locus ());\n+}\n+\n HIR::GenericArgs\n ASTLoweringBase::lower_generic_args (AST::GenericArgs &args)\n {\n-  std::vector<HIR::GenericArgsBinding> binding_args; // TODO\n+  std::vector<HIR::GenericArgsBinding> binding_args;\n+  for (auto &binding : args.get_binding_args ())\n+    {\n+      HIR::GenericArgsBinding b = lower_binding (binding);\n+      binding_args.push_back (std::move (b));\n+    }\n \n   std::vector<HIR::Lifetime> lifetime_args;\n   for (auto &lifetime : args.get_lifetime_args ())"}, {"sha": "648999b27fff440e40e1f396e13df70a3d115387", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -111,6 +111,18 @@ class TypeParam : public GenericParam\n \n   Identifier get_type_representation () const { return type_representation; }\n \n+  std::unique_ptr<Type> &get_type ()\n+  {\n+    rust_assert (type != nullptr);\n+    return type;\n+  }\n+\n+  Analysis::NodeMapping get_type_mappings () const\n+  {\n+    rust_assert (type != nullptr);\n+    return type->get_mappings ();\n+  }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TypeParam *clone_generic_param_impl () const override"}, {"sha": "c1634874d59d0e2bc7c8458f44727dae4b0a8a4b", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -107,6 +107,12 @@ struct GenericArgsBinding\n   GenericArgsBinding &operator= (GenericArgsBinding &&other) = default;\n \n   std::string as_string () const;\n+\n+  Identifier get_identifier () const { return identifier; }\n+\n+  std::unique_ptr<Type> &get_type () { return type; }\n+\n+  Location get_locus () const { return locus; }\n };\n \n // Generic arguments allowed in each path expression segment - inline?"}, {"sha": "244ff3d4619ca3ecd85d3e82416888f9f51ba55e", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -1106,6 +1106,15 @@ class GenericParam\n public:\n   virtual ~GenericParam () {}\n \n+  enum GenericKind\n+  {\n+    TYPE,\n+    LIFETIME,\n+\n+    // CONST generic parameter not yet handled\n+    // CONST,\n+  };\n+\n   // Unique pointer custom clone function\n   std::unique_ptr<GenericParam> clone_generic_param () const\n   {\n@@ -1120,13 +1129,19 @@ class GenericParam\n \n   Analysis::NodeMapping get_mappings () const { return mappings; }\n \n+  enum GenericKind get_kind () const { return kind; }\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual GenericParam *clone_generic_param_impl () const = 0;\n \n-  GenericParam (Analysis::NodeMapping mapping) : mappings (mapping) {}\n-\n   Analysis::NodeMapping mappings;\n+\n+  enum GenericKind kind;\n+\n+  GenericParam (Analysis::NodeMapping mapping, enum GenericKind kind = TYPE)\n+    : mappings (mapping), kind (kind)\n+  {}\n };\n \n // A lifetime generic parameter (as opposed to a type generic parameter)\n@@ -1145,6 +1160,8 @@ class LifetimeParam : public GenericParam\n   Location locus;\n \n public:\n+  Lifetime get_lifetime () { return lifetime; }\n+\n   // Returns whether the lifetime param has any lifetime bounds.\n   bool has_lifetime_bounds () const { return !lifetime_bounds.empty (); }\n \n@@ -1160,7 +1177,8 @@ class LifetimeParam : public GenericParam\n \t\t std::vector<Lifetime> lifetime_bounds\n \t\t = std::vector<Lifetime> (),\n \t\t Attribute outer_attr = Attribute::create_empty ())\n-    : GenericParam (mappings), lifetime (std::move (lifetime)),\n+    : GenericParam (mappings, GenericKind::LIFETIME),\n+      lifetime (std::move (lifetime)),\n       lifetime_bounds (std::move (lifetime_bounds)),\n       outer_attr (std::move (outer_attr)), locus (locus)\n   {}\n@@ -1169,9 +1187,9 @@ class LifetimeParam : public GenericParam\n \n   // Copy constructor with clone\n   LifetimeParam (LifetimeParam const &other)\n-    : GenericParam (other.mappings), lifetime (other.lifetime),\n-      lifetime_bounds (other.lifetime_bounds), outer_attr (other.outer_attr),\n-      locus (other.locus)\n+    : GenericParam (other.mappings, GenericKind::LIFETIME),\n+      lifetime (other.lifetime), lifetime_bounds (other.lifetime_bounds),\n+      outer_attr (other.outer_attr), locus (other.locus)\n   {}\n \n   // Overloaded assignment operator to clone attribute"}, {"sha": "d249c436686c6f6341dce5a065c50192301af54c", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -252,6 +252,12 @@ class ResolveGenericParam : public ResolverBase\n     return resolver.resolved_node;\n   };\n \n+  void visit (AST::LifetimeParam &param) override\n+  {\n+    // For now do not do anything and accept everything.\n+    ok = true;\n+  }\n+\n   void visit (AST::TypeParam &param) override\n   {\n     ok = true;"}, {"sha": "2a3e9f9d512d38cb9ca48a5e18daf616b332e295", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -59,12 +59,24 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n       {\n \tfor (auto &generic_param : function.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n \n@@ -111,12 +123,24 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n       {\n \tfor (auto &generic_param : method.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n \n@@ -180,7 +204,7 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \n   TyTy::BaseType *self;\n   std::vector<TyTy::SubstitutionParamMapping> substitutions;\n-};\n+}; // namespace Resolver\n \n class TypeCheckImplItem : public TypeCheckBase\n {"}, {"sha": "6be155298c0f9fd0d75e4dafdc36b5aade1e1b6b", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 72, "deletions": 24, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -55,12 +55,24 @@ class TypeCheckTopLevel : public TypeCheckBase\n       {\n \tfor (auto &generic_param : struct_decl.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n \n@@ -95,12 +107,24 @@ class TypeCheckTopLevel : public TypeCheckBase\n       {\n \tfor (auto &generic_param : struct_decl.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n \n@@ -152,12 +176,24 @@ class TypeCheckTopLevel : public TypeCheckBase\n       {\n \tfor (auto &generic_param : function.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n \n@@ -205,12 +241,24 @@ class TypeCheckTopLevel : public TypeCheckBase\n       {\n \tfor (auto &generic_param : impl_block.get_generic_params ())\n \t  {\n-\t    auto param_type\n-\t      = TypeResolveGenericParam::Resolve (generic_param.get ());\n-\t    context->insert_type (generic_param->get_mappings (), param_type);\n-\n-\t    substitutions.push_back (\n-\t      TyTy::SubstitutionParamMapping (generic_param, param_type));\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n "}, {"sha": "70b9cfae9b25d70a4467c501ffe3e71c8c7b90c2", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -209,8 +209,7 @@ class TypeCheckType : public TypeCheckBase\n       {\n \tstd::string sym = mapping.get_param_ty ()->get_symbol ();\n \tparam_tys.insert (sym);\n-\tparam_location_map[sym]\n-\t  = mapping.get_generic_param ()->get_locus_slow ();\n+\tparam_location_map[sym] = mapping.get_generic_param ().get_locus ();\n       }\n \n     std::set<std::string> args;\n@@ -254,6 +253,11 @@ class TypeResolveGenericParam : public TypeCheckBase\n \n   void visit (HIR::TypeParam &param) override\n   {\n+    TyTy::BaseType *default_ty_param = nullptr;\n+    if (param.has_type ())\n+      {\n+\tdefault_ty_param = TypeCheckType::Resolve (param.get_type ().get ());\n+      }\n     resolved = new TyTy::ParamType (param.get_type_representation (),\n \t\t\t\t    param.get_mappings ().get_hirid (), param);\n   }"}, {"sha": "3e9098dc5571099c4231c21bbcf4f1ff8339e0dc", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -211,16 +211,41 @@ SubstitutionParamMapping::override_context ()\n SubstitutionArgumentMappings\n SubstitutionRef::get_mappings_from_generic_args (HIR::GenericArgs &args)\n {\n-  if (args.get_type_args ().size () != substitutions.size ())\n+  if (args.get_binding_args ().size () > 0)\n     {\n-      rust_error_at (args.get_locus (),\n-\t\t     \"Invalid number of generic arguments to generic type\");\n+      RichLocation r (args.get_locus ());\n+      for (auto &binding : args.get_binding_args ())\n+\tr.add_range (binding.get_locus ());\n+\n+      rust_error_at (r, \"associated type bindings are not allowed here\");\n       return SubstitutionArgumentMappings::error ();\n     }\n \n-  std::vector<SubstitutionArg> mappings;\n+  if (args.get_type_args ().size () > substitutions.size ())\n+    {\n+      RichLocation r (args.get_locus ());\n+      r.add_range (substitutions.front ().get_param_locus ());\n+\n+      rust_error_at (\n+\tr,\n+\t\"generic item takes at most %lu type arguments but %lu were supplied\",\n+\tsubstitutions.size (), args.get_type_args ().size ());\n+      return SubstitutionArgumentMappings::error ();\n+    }\n+\n+  if (args.get_type_args ().size () < min_required_substitutions ())\n+    {\n+      RichLocation r (args.get_locus ());\n+      r.add_range (substitutions.front ().get_param_locus ());\n+\n+      rust_error_at (\n+\tr,\n+\t\"generic item takes at least %lu type arguments but %lu were supplied\",\n+\tsubstitutions.size (), args.get_type_args ().size ());\n+      return SubstitutionArgumentMappings::error ();\n+    }\n \n-  // FIXME does not support binding yet\n+  std::vector<SubstitutionArg> mappings;\n   for (auto &arg : args.get_type_args ())\n     {\n       BaseType *resolved = Resolver::TypeCheckType::Resolve (arg.get ());\n@@ -235,6 +260,22 @@ SubstitutionRef::get_mappings_from_generic_args (HIR::GenericArgs &args)\n       mappings.push_back (std::move (subst_arg));\n     }\n \n+  // we must need to fill out defaults\n+  size_t left_over\n+    = num_required_substitutions () - min_required_substitutions ();\n+  if (left_over > 0)\n+    {\n+      for (size_t offs = mappings.size (); offs < substitutions.size (); offs++)\n+\t{\n+\t  SubstitutionParamMapping &param = substitutions.at (offs);\n+\t  rust_assert (param.param_has_default_ty ());\n+\n+\t  BaseType *resolved = param.get_default_ty ();\n+\t  SubstitutionArg subst_arg (&param, resolved);\n+\t  mappings.push_back (std::move (subst_arg));\n+\t}\n+    }\n+\n   return SubstitutionArgumentMappings (mappings, args.get_locus ());\n }\n "}, {"sha": "d6a3aefa781bf3c733cf6fb7e8f196179e77fa72", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -398,8 +398,7 @@ class TupleType : public BaseType\n class SubstitutionParamMapping\n {\n public:\n-  SubstitutionParamMapping (std::unique_ptr<HIR::GenericParam> &generic,\n-\t\t\t    ParamType *param)\n+  SubstitutionParamMapping (const HIR::TypeParam &generic, ParamType *param)\n \n     : generic (generic), param (param)\n   {}\n@@ -431,8 +430,10 @@ class SubstitutionParamMapping\n \n   const ParamType *get_param_ty () const { return param; }\n \n-  std::unique_ptr<HIR::GenericParam> &get_generic_param () { return generic; };\n+  const HIR::TypeParam &get_generic_param () { return generic; };\n \n+  // this is used for the backend to override the HirId ref of the param to\n+  // what the concrete type is for the rest of the context\n   void override_context ();\n \n   bool needs_substitution () const\n@@ -444,8 +445,18 @@ class SubstitutionParamMapping\n     return p->resolve ()->get_kind () == TypeKind::PARAM;\n   }\n \n+  Location get_param_locus () const { return generic.get_locus (); }\n+\n+  bool param_has_default_ty () const { return generic.has_type (); }\n+\n+  BaseType *get_default_ty () const\n+  {\n+    TyVar var (generic.get_type_mappings ().get_hirid ());\n+    return var.get_tyty ();\n+  }\n+\n private:\n-  std::unique_ptr<HIR::GenericParam> &generic;\n+  const HIR::TypeParam &generic;\n   ParamType *param;\n };\n \n@@ -638,6 +649,7 @@ class SubstitutionRef\n     return used_arguments;\n   }\n \n+  // this is the count of type params that are not substituted fuly\n   size_t num_required_substitutions () const\n   {\n     size_t n = 0;\n@@ -649,6 +661,19 @@ class SubstitutionRef\n     return n;\n   }\n \n+  // this is the count of type params that need substituted taking into account\n+  // possible defaults\n+  size_t min_required_substitutions () const\n+  {\n+    size_t n = 0;\n+    for (auto &p : substitutions)\n+      {\n+\tif (p.needs_substitution () && !p.param_has_default_ty ())\n+\t  n++;\n+      }\n+    return n;\n+  }\n+\n   // We are trying to subst <i32, f32> into Struct Foo<X,Y> {}\n   // in the case of Foo<i32,f32>{...}\n   //"}, {"sha": "2169e3649c61a7cb343e5693d327a3649c271d7d", "filename": "gcc/testsuite/rust.test/compile/generics23.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics23.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics23.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics23.rs?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -0,0 +1,6 @@\n+struct Foo<A = f32>(A);\n+\n+fn main() {\n+    let a: Foo;\n+    a = Foo(123f32);\n+}"}, {"sha": "9d24bceb49ca2aa9ab3fe72d3e30878a121d1aa5", "filename": "gcc/testsuite/rust.test/compile/generics24.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics24.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics24.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics24.rs?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -0,0 +1,34 @@\n+struct Foo<A = (isize, char)> {\n+    a: A,\n+}\n+\n+impl Foo<isize> {\n+    fn bar(self) -> isize {\n+        self.a\n+    }\n+}\n+\n+impl Foo<char> {\n+    fn bar(self) -> char {\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        self.a\n+    }\n+}\n+\n+impl Foo {\n+    fn bar(self) {\n+        let a: (isize, char) = self.a;\n+        let b = a.0;\n+        let c = a.1;\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+        let aa: Foo<isize> = Foo { a: b };\n+        let bb: isize = aa.bar();\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    }\n+}\n+\n+fn main() {\n+    let a = Foo { a: (123, 'a') };\n+    a.bar();\n+}"}, {"sha": "151fd827b5e5d1be4380e07c63aeaa0614805134", "filename": "gcc/testsuite/rust.test/compile/lifetime1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Flifetime1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Flifetime1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Flifetime1.rs?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -0,0 +1,7 @@\n+fn foo<'a>(t: &'a str) -> &'a str {\n+    t\n+}\n+\n+fn main() {\n+    foo(\"hello world\");\n+}"}, {"sha": "4b1f704aecf9fdf9a1366dbc7aaebc791c2d0146", "filename": "gcc/testsuite/rust.test/xfail_compile/expected_type_args2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -2,5 +2,5 @@ struct Foo<A>(A);\n \n fn main() {\n     let a: Foo = Foo::<i32>(123);\n-    // { dg-error \"Invalid number of generic arguments to generic type\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"generic item takes at least 1 type arguments but 0 were supplied\" \"\" { target { *-*-* } } .-1 }\n }"}, {"sha": "dc70f767223c1b2b8c30616195eef34ebaca9ddd", "filename": "gcc/testsuite/rust.test/xfail_compile/expected_type_args3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -1,7 +1,7 @@\n struct Foo<A>(A);\n \n impl Foo {\n-    // { dg-error \"Invalid number of generic arguments to generic type\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"generic item takes at least 1 type arguments but 0 were supplied\" \"\" { target { *-*-* } } .-1 }\n     fn test() -> i32 {\n         123\n     }"}, {"sha": "a831836614f6ae65d1416f4819f14da632648a05", "filename": "gcc/testsuite/rust.test/xfail_compile/generics4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics4.rs?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -3,7 +3,7 @@ struct GenericStruct<T>(T, usize);\n \n fn main() {\n     let a2;\n-    a2 = GenericStruct::<i8, i32>(1, 456); // { dg-error \"Invalid number of generic arguments to generic type\" }\n+    a2 = GenericStruct::<i8, i32>(1, 456); // { dg-error \"generic item takes at most 1 type arguments but 2 were supplied\" }\n \n     let b2: i32 = a2.0;\n     let c2: usize = a2.1;"}, {"sha": "5e00f878a085e2bd6f96a29aa5387c0dd3e272b8", "filename": "gcc/testsuite/rust.test/xfail_compile/type-bindings1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-bindings1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0276ec39a9c3b839c47ce28838a8d5af25fbf598/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-bindings1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-bindings1.rs?ref=0276ec39a9c3b839c47ce28838a8d5af25fbf598", "patch": "@@ -0,0 +1,8 @@\n+// { dg-excess-errors \"Noisy error and debug\" }\n+struct Foo<A, B>(A, B);\n+\n+fn main() {\n+    let a;\n+    a = Foo::<A = i32, B = f32>(123f32);\n+    // { dg-error \"associated type bindings are not allowed here\" \"\" { target { *-*-* } } .-1 }\n+}"}]}