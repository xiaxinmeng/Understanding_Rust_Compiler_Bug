{"sha": "0489576ce8062475a2a90b3aae869166d9005460", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ4OTU3NmNlODA2MjQ3NWEyYTkwYjNhYWU4NjkxNjZkOTAwNTQ2MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T09:55:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T09:55:20Z"}, "message": "[multiple changes]\n\n2015-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Check_Usage): Update the calls to Usage_Error.\n\t(Usage_Error): Remove formal parameter Item. Emit a clearer message\n\tconcerning a missing dependency item and place it on the related pragma.\n\n2015-10-20  Bob Duff  <duff@adacore.com>\n\n\t* debug.adb, expander.adb: Implement -gnatd.B switch, which\n\ttriggers a bug box when an abort_statement is seen. This is\n\tuseful for testing Comperr.Compiler_Abort.\n\t* gnat1drv.adb: Trigger bug box on all exceptions other than\n\tUnrecoverable_Error.\n\nFrom-SVN: r229032", "tree": {"sha": "53fa0a054c99c1ef2de2e792abb010e01281b34e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53fa0a054c99c1ef2de2e792abb010e01281b34e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0489576ce8062475a2a90b3aae869166d9005460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0489576ce8062475a2a90b3aae869166d9005460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0489576ce8062475a2a90b3aae869166d9005460", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0489576ce8062475a2a90b3aae869166d9005460/comments", "author": null, "committer": null, "parents": [{"sha": "3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c777b50a71002d3b0cb8c62a9bbdb846e286e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c777b50a71002d3b0cb8c62a9bbdb846e286e96"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "2da6c0452ffdf200d743189d4a285b3da0e41606", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0489576ce8062475a2a90b3aae869166d9005460/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0489576ce8062475a2a90b3aae869166d9005460/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0489576ce8062475a2a90b3aae869166d9005460", "patch": "@@ -1,3 +1,17 @@\n+2015-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Check_Usage): Update the calls to Usage_Error.\n+\t(Usage_Error): Remove formal parameter Item. Emit a clearer message\n+\tconcerning a missing dependency item and place it on the related pragma.\n+\n+2015-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* debug.adb, expander.adb: Implement -gnatd.B switch, which\n+\ttriggers a bug box when an abort_statement is seen. This is\n+\tuseful for testing Comperr.Compiler_Abort.\n+\t* gnat1drv.adb: Trigger bug box on all exceptions other than\n+\tUnrecoverable_Error.\n+\n 2015-10-20  Thomas Quinot  <quinot@adacore.com>\n \n \t* Makefile.rtl: add the following..."}, {"sha": "2bc09db871005ace6ad00543f175125ec58c4f5d", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0489576ce8062475a2a90b3aae869166d9005460/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0489576ce8062475a2a90b3aae869166d9005460/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=0489576ce8062475a2a90b3aae869166d9005460", "patch": "@@ -119,7 +119,7 @@ package body Debug is\n    --  d.z  Restore previous support for frontend handling of Inline_Always\n \n    --  d.A  Read/write Aspect_Specifications hash table to tree\n-   --  d.B\n+   --  d.B  Generate a bug box on abort_statement\n    --  d.C  Generate concatenation call, do not generate inline code\n    --  d.D  Disable errors on use of overriding keyword in Ada 95 mode\n    --  d.E  Turn selected errors into warnings\n@@ -595,6 +595,13 @@ package body Debug is\n    --       for now, this is controlled by the debug flag d.A. The hash table\n    --       is only written and read if this flag is set.\n \n+   --  d.B  Generate a bug box when we see an abort_statement, even though\n+   --       there is no bug. Useful for testing Comperr.Compiler_Abort: write\n+   --       some code containing an abort_statement, and compile it with\n+   --       -gnatd.B. There is nothing special about abort_statements; it just\n+   --       provides a way to control where the bug box is generated. See \"when\n+   --       N_Abort_Statement\" in package body Expander.\n+\n    --  d.C  Generate call to System.Concat_n.Str_Concat_n routines in cases\n    --       where we would normally generate inline concatenation code.\n "}, {"sha": "2d9b6d964acfa7bd3bc59586e7402a486f85b247", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0489576ce8062475a2a90b3aae869166d9005460/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0489576ce8062475a2a90b3aae869166d9005460/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=0489576ce8062475a2a90b3aae869166d9005460", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n with Atree;     use Atree;\n+with Debug;     use Debug;\n with Debug_A;   use Debug_A;\n with Exp_Aggr;  use Exp_Aggr;\n with Exp_SPARK; use Exp_SPARK;\n@@ -67,6 +68,10 @@ package body Expander is\n      Table_Increment      => 200,\n      Table_Name           => \"Expander_Flags\");\n \n+   Abort_Bug_Box_Error : exception;\n+   --  Arbitrary exception to raise for implementation of -gnatd.B. See \"when\n+   --  N_Abort_Statement\" below. See also debug.adb.\n+\n    ------------\n    -- Expand --\n    ------------\n@@ -150,6 +155,13 @@ package body Expander is\n                when N_Abort_Statement =>\n                   Expand_N_Abort_Statement (N);\n \n+                  --  If -gnatd.B switch was given, crash the compiler. See\n+                  --  debug.adb for explanation.\n+\n+                  if Debug_Flag_Dot_BB then\n+                     raise Abort_Bug_Box_Error;\n+                  end if;\n+\n                when N_Accept_Statement =>\n                   Expand_N_Accept_Statement (N);\n "}, {"sha": "2284caf8c90b61dff98785cdeccda155c20457aa", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0489576ce8062475a2a90b3aae869166d9005460/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0489576ce8062475a2a90b3aae869166d9005460/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=0489576ce8062475a2a90b3aae869166d9005460", "patch": "@@ -1421,6 +1421,12 @@ begin\n          --  say Storage_Error, giving a strong hint.\n \n          Comperr.Compiler_Abort (\"Storage_Error\");\n+\n+      when Unrecoverable_Error =>\n+         raise;\n+\n+      when others =>\n+         Comperr.Compiler_Abort (\"exception\");\n    end;\n \n    <<End_Of_Program>>"}, {"sha": "56c9bd7003075c6b825df3cc0e03c761c3352305", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0489576ce8062475a2a90b3aae869166d9005460/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0489576ce8062475a2a90b3aae869166d9005460/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=0489576ce8062475a2a90b3aae869166d9005460", "patch": "@@ -1220,14 +1220,14 @@ package body Sem_Prag is\n          Used_Items : Elist_Id;\n          Is_Input   : Boolean)\n       is\n-         procedure Usage_Error (Item : Node_Id; Item_Id : Entity_Id);\n+         procedure Usage_Error (Item_Id : Entity_Id);\n          --  Emit an error concerning the illegal usage of an item\n \n          -----------------\n          -- Usage_Error --\n          -----------------\n \n-         procedure Usage_Error (Item : Node_Id; Item_Id : Entity_Id) is\n+         procedure Usage_Error (Item_Id : Entity_Id) is\n             Error_Msg : Name_Id;\n \n          begin\n@@ -1245,10 +1245,10 @@ package body Sem_Prag is\n \n                   Add_Item_To_Name_Buffer (Item_Id);\n                   Add_Str_To_Name_Buffer\n-                    (\" & must appear in at least one input dependence list\");\n+                    (\" & is missing from input dependence list\");\n \n                   Error_Msg := Name_Find;\n-                  SPARK_Msg_NE (Get_Name_String (Error_Msg), Item, Item_Id);\n+                  SPARK_Msg_NE (Get_Name_String (Error_Msg), N, Item_Id);\n                end if;\n \n             --  Output case (SPARK RM 6.1.5(10))\n@@ -1258,10 +1258,10 @@ package body Sem_Prag is\n \n                Add_Item_To_Name_Buffer (Item_Id);\n                Add_Str_To_Name_Buffer\n-                 (\" & must appear in exactly one output dependence list\");\n+                 (\" & is missing from output dependence list\");\n \n                Error_Msg := Name_Find;\n-               SPARK_Msg_NE (Get_Name_String (Error_Msg), Item, Item_Id);\n+               SPARK_Msg_NE (Get_Name_String (Error_Msg), N, Item_Id);\n             end if;\n          end Usage_Error;\n \n@@ -1297,13 +1297,13 @@ package body Sem_Prag is\n               and then not Contains (Used_Items, Item_Id)\n             then\n                if Is_Formal (Item_Id) then\n-                  Usage_Error (Item, Item_Id);\n+                  Usage_Error (Item_Id);\n \n                --  States and global objects are not used properly only when\n                --  the subprogram is subject to pragma Global.\n \n                elsif Global_Seen then\n-                  Usage_Error (Item, Item_Id);\n+                  Usage_Error (Item_Id);\n                end if;\n             end if;\n "}]}