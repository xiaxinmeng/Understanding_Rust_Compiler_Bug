{"sha": "a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk3NjllYjBkOTJlYTlmZmExOWZhYzFmN2EzMGMxYjMxY2FhZTRiZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-05-18T15:07:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-05-18T15:07:02Z"}, "message": "unique_ptr.h (make_unique): Define.\n\n\t* include/bits/unique_ptr.h (make_unique): Define.\n\t* testsuite/20_util/unique_ptr/creation/single.cc: New.\n\t* testsuite/20_util/unique_ptr/creation/array.cc: New.\n\t* testsuite/20_util/unique_ptr/creation/array_neg.cc: New.\n\nFrom-SVN: r199057", "tree": {"sha": "78e1e2b0669dc86877cb9443366f86073ad6e6e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78e1e2b0669dc86877cb9443366f86073ad6e6e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da2e0598d1df01f58740c81a39cc98cf43786d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da2e0598d1df01f58740c81a39cc98cf43786d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da2e0598d1df01f58740c81a39cc98cf43786d3"}], "stats": {"total": 171, "additions": 171, "deletions": 0}, "files": [{"sha": "3fba85c1989955b5cd105f8c82f16b4b104fe516", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be", "patch": "@@ -1,3 +1,10 @@\n+2013-05-18  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/unique_ptr.h (make_unique): Define.\n+\t* testsuite/20_util/unique_ptr/creation/single.cc: New.\n+\t* testsuite/20_util/unique_ptr/creation/array.cc: New.\n+\t* testsuite/20_util/unique_ptr/creation/array_neg.cc: New.\n+\n 2013-05-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* python/libstdcxx/v6/printers.py (Tr1HashtableIterator): Fix"}, {"sha": "e98b85f7da4df97339042a6a4b9406c22fc17fc1", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be", "patch": "@@ -607,6 +607,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n+#if __cplusplus > 201103L\n+  template<typename _Tp>\n+    struct _MakeUniq\n+    { typedef unique_ptr<_Tp> __single_object; };\n+\n+  template<typename _Tp>\n+    struct _MakeUniq<_Tp[]>\n+    { typedef unique_ptr<_Tp[]> __array; };\n+\n+  template<typename _Tp, size_t _Bound>\n+    struct _MakeUniq<_Tp[_Bound]>\n+    { struct __invalid_type { }; };\n+\n+  /// std::make_unique for single objects\n+  template<typename _Tp, typename... _Args>\n+    typename _MakeUniq<_Tp>::__single_object\n+    make_unique(_Args&&... __args)\n+    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }\n+\n+  /// std::make_unique for arrays of unknown bound\n+  template<typename _Tp>\n+    typename _MakeUniq<_Tp>::__array\n+    make_unique(size_t __num)\n+    { return unique_ptr<_Tp>(new typename remove_extent<_Tp>::type[__num]()); }\n+\n+  /// Disable std::make_unique for arrays of known bound\n+  template<typename _Tp, typename... _Args>\n+    typename _MakeUniq<_Tp>::__invalid_type\n+    make_unique(_Args&&...) = delete;\n+#endif\n+\n   // @} group pointer_abstractions\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "8943310004b3d8237c3e56f110fc2a445146b505", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/creation/array.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Farray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Farray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Farray.cc?ref=a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.1.4 unique_ptr creation [unique.ptr.create]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() : b(true) { }\n+  A(int) : b(false) { }\n+  bool b;\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::unique_ptr<A[]> a = std::make_unique<A[]>(3);\n+  VERIFY( a != nullptr );\n+  VERIFY( a[0].b && a[1].b && a[2].b );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "1e556226ebccade4dda4ffac77f6aa9234415f41", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/creation/array_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Farray_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Farray_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Farray_neg.cc?ref=a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be", "patch": "@@ -0,0 +1,34 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.1.4 unique_ptr creation [unique.ptr.create]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A { };\n+\n+auto p1 = std::make_unique<A[]>();      // { dg-error \"no matching function\" }\n+auto p2 = std::make_unique<A[]>(1, 2);  // { dg-error \"no matching function\" }\n+auto p3 = std::make_unique<A[1]>();     // { dg-error \"deleted\" }\n+auto p4 = std::make_unique<A[1]>(1);    // { dg-error \"deleted\" }\n+\n+// { dg-prune-output \"declared here\" }\n+// { dg-prune-output \"no type named\" }"}, {"sha": "689e849e24747d93ddd279582142887aae597f99", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/creation/single.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Fsingle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Fsingle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Fsingle.cc?ref=a9769eb0d92ea9ffa19fac1f7a30c1b31caae4be", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.1.4 unique_ptr creation [unique.ptr.create]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+  A() : b(false) { }\n+  A(int, double&, char&&, void*) : b(true) { }\n+  bool b;\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int i = 0;\n+  double d = 0;\n+  char c = 0;\n+  std::unique_ptr<A> a = std::make_unique<A>(i, d, std::move(c), nullptr);\n+  VERIFY( a != nullptr );\n+  VERIFY( a->b );\n+\n+  a = std::make_unique<A>();\n+  VERIFY( a != nullptr );\n+  VERIFY( !a->b );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}