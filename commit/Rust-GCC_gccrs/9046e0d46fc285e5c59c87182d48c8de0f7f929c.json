{"sha": "9046e0d46fc285e5c59c87182d48c8de0f7f929c", "node_id": "C_kwDOANBUbNoAKDkwNDZlMGQ0NmZjMjg1ZTVjNTljODcxODJkNDhjOGRlMGY3ZjkyOWM", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-10-08T14:16:09Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-10-08T16:53:32Z"}, "message": "[PR102627] Use at least natural mode during splitting hard reg live range\n\nIn the PR test case SImode was used to split live range of cx on x86-64\nbecause it was the biggest mode for this hard reg in the function.  But\nall 64-bits of cx contain structure members.  We need always to use at least\nnatural mode of hard reg in splitting to fix this problem.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/102627\n\t* lra-constraints.c (split_reg): Use at least natural mode of hard reg.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/102627\n\t* gcc.target/i386/pr102627.c: New test.", "tree": {"sha": "af51f6db9c95be448bf7c59cc7c2dffd1e8d80be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af51f6db9c95be448bf7c59cc7c2dffd1e8d80be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9046e0d46fc285e5c59c87182d48c8de0f7f929c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9046e0d46fc285e5c59c87182d48c8de0f7f929c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9046e0d46fc285e5c59c87182d48c8de0f7f929c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9046e0d46fc285e5c59c87182d48c8de0f7f929c/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6f6972b5f4711c110fa753c926df49415f230da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f6972b5f4711c110fa753c926df49415f230da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f6972b5f4711c110fa753c926df49415f230da"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "8f75125fc2e552bb495f60fac657ccc831b9a241", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9046e0d46fc285e5c59c87182d48c8de0f7f929c/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9046e0d46fc285e5c59c87182d48c8de0f7f929c/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=9046e0d46fc285e5c59c87182d48c8de0f7f929c", "patch": "@@ -5799,11 +5799,12 @@ split_reg (bool before_p, int original_regno, rtx_insn *insn,\n \t part of a multi-word register.  In that case, just use the reg_rtx\n \t mode.  Do the same also if the biggest mode was larger than a register\n \t or we can not compare the modes.  Otherwise, limit the size to that of\n-\t the biggest access in the function.  */\n+\t the biggest access in the function or to the natural mode at least.  */\n       if (mode == VOIDmode\n \t  || !ordered_p (GET_MODE_PRECISION (mode),\n \t\t\t GET_MODE_PRECISION (reg_rtx_mode))\n-\t  || paradoxical_subreg_p (mode, reg_rtx_mode))\n+\t  || paradoxical_subreg_p (mode, reg_rtx_mode)\n+\t  || maybe_gt (GET_MODE_PRECISION (reg_rtx_mode), GET_MODE_PRECISION (mode)))\n \t{\n \t  original_reg = regno_reg_rtx[hard_regno];\n \t  mode = reg_rtx_mode;"}, {"sha": "8ab9acaf002f6483cd9b59b1f82c024dcb950108", "filename": "gcc/testsuite/gcc.target/i386/pr102627.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9046e0d46fc285e5c59c87182d48c8de0f7f929c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102627.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9046e0d46fc285e5c59c87182d48c8de0f7f929c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102627.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102627.c?ref=9046e0d46fc285e5c59c87182d48c8de0f7f929c", "patch": "@@ -0,0 +1,41 @@\n+/* PR rtl-optimization/102627 */\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+int a, f, l, m, q, c, d, g;\n+long b, e;\n+struct g {\n+  signed h;\n+  signed i;\n+  unsigned j;\n+  unsigned k;\n+};\n+unsigned n;\n+char o;\n+int *p = &m;\n+long r(int s) { return s && b ?: b; }\n+long __attribute__((noipa)) v() {\n+  l = 0 || r(n & o);\n+  return q;\n+}\n+void w(int, unsigned, struct g x) {\n+  c ?: a;\n+  for (; d < 2; d++)\n+    *p = x.k;\n+}\n+struct g __attribute__((noipa)) y() {\n+  struct g h = {3, 908, 1, 20};\n+  for (; g; g++)\n+    ;\n+  return h;\n+}\n+int main() {\n+  long t;\n+  struct g u = y();\n+  t = e << f;\n+  w(0, t, u);\n+  v(0, 4, 4, 4);\n+  if (m != 20)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}