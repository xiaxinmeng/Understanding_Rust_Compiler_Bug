{"sha": "28b43def5a2f245bd75723f1e909d1c105d11c31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhiNDNkZWY1YTJmMjQ1YmQ3NTcyM2YxZTkwOWQxYzEwNWQxMWMzMQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2004-12-14T21:50:54Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2004-12-14T21:50:54Z"}, "message": "invoke.texi (IA-64 options): Add existing options that weren't already listed.\n\n\t* doc/invoke.texi (IA-64 options): Add existing options that\n\tweren't already listed.\n\nFrom-SVN: r92162", "tree": {"sha": "8b61512b9e3b486a50833bc2210a0e3e117bf6e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b61512b9e3b486a50833bc2210a0e3e117bf6e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28b43def5a2f245bd75723f1e909d1c105d11c31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b43def5a2f245bd75723f1e909d1c105d11c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28b43def5a2f245bd75723f1e909d1c105d11c31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b43def5a2f245bd75723f1e909d1c105d11c31/comments", "author": null, "committer": null, "parents": [{"sha": "c31d515429183e7d06664b843e65b4b378c5dd70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31d515429183e7d06664b843e65b4b378c5dd70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31d515429183e7d06664b843e65b4b378c5dd70"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "edb43c6fc74a120a5b601db91eee62599fabd02b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b43def5a2f245bd75723f1e909d1c105d11c31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b43def5a2f245bd75723f1e909d1c105d11c31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28b43def5a2f245bd75723f1e909d1c105d11c31", "patch": "@@ -1,3 +1,8 @@\n+2004-12-14  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* doc/invoke.texi (IA-64 options): Add existing options that\n+\tweren't already listed.\n+\n 2004-12-14  Jeff Law  <law@redhat.com>\n \n \t* tree-outof-ssa.c (coalesce_abnormal_edges): Pass the correct target"}, {"sha": "8316bec704b968b4d38f90c93a364f038821aad6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b43def5a2f245bd75723f1e909d1c105d11c31/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b43def5a2f245bd75723f1e909d1c105d11c31/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=28b43def5a2f245bd75723f1e909d1c105d11c31", "patch": "@@ -502,8 +502,11 @@ Objective-C and Objective-C++ Dialects}.\n -mconstant-gp  -mauto-pic  -minline-float-divide-min-latency @gol\n -minline-float-divide-max-throughput @gol\n -minline-int-divide-min-latency @gol\n--minline-int-divide-max-throughput  -mno-dwarf2-asm @gol\n--mfixed-range=@var{register-range}}\n+-minline-int-divide-max-throughput  @gol\n+-minline-sqrt-min-latency -minline-sqrt-max-throughput @gol\n+-mno-dwarf2-asm -mearly-stop-bits @gol\n+-mfixed-range=@var{register-range} -mtls-size=@var{tls-size} @gol\n+-mtune=@var{cpu-type} -mt -pthread -milp32 -mlp64}\n \n @emph{M32R/D Options}\n @gccoptlist{-m32r2 -m32rx -m32r @gol\n@@ -8840,13 +8843,31 @@ using the minimum latency algorithm.\n Generate code for inline divides of integer values\n using the maximum throughput algorithm.\n \n+@item -minline-sqrt-min-latency\n+@opindex minline-sqrt-min-latency\n+Generate code for inline square roots\n+using the minimum latency algorithm.\n+\n+@item -minline-sqrt-max-throughput\n+@opindex minline-sqrt-max-throughput\n+Generate code for inline square roots\n+using the maximum throughput algorithm.\n+\n @item -mno-dwarf2-asm\n @itemx -mdwarf2-asm\n @opindex mno-dwarf2-asm\n @opindex mdwarf2-asm\n Don't (or do) generate assembler code for the DWARF2 line number debugging\n info.  This may be useful when not using the GNU assembler.\n \n+@item -mearly-stop-bits\n+@itemx -mno-early-stop-bits\n+@opindex mearly-stop-bits\n+@opindex mno-early-stop-bits\n+Allow stop bits to be placed earlier than immediately preceding the\n+instruction that triggered the stop bit.  This can improve instruction\n+scheduling, but does not always do so.\n+\n @item -mfixed-range=@var{register-range}\n @opindex mfixed-range\n Generate code treating the given register range as fixed registers.\n@@ -8855,13 +8876,34 @@ useful when compiling kernel code.  A register range is specified as\n two registers separated by a dash.  Multiple register ranges can be\n specified separated by a comma.\n \n-@item -mearly-stop-bits\n-@itemx -mno-early-stop-bits\n-@opindex mearly-stop-bits\n-@opindex mno-early-stop-bits\n-Allow stop bits to be placed earlier than immediately preceding the\n-instruction that triggered the stop bit.  This can improve instruction\n-scheduling, but does not always do so.\n+@item -mtls-size=@var{tls-size}\n+@opindex mtls-size\n+Specify bit size of immediate TLS offsets.  Valid values are 14, 22, and\n+64.\n+\n+@item -mtune-arch=@var{cpu-type}\n+@opindex mtune-arch\n+Tune the instruction scheduling for a particular CPU, Valid values are\n+itanium, itanium1, merced, itanium2, and mckinley.\n+\n+@item -mt\n+@itemx -pthread\n+@opindex mt\n+@opindex pthread\n+Add support for multithreading using the POSIX threads library.  This\n+option sets flags for both the preprocessor and linker.  It does\n+not affect the thread safety of object code produced by the compiler or\n+that of libraries supplied with it.  These are HP-UX specific flags.\n+\n+@item -milp32\n+@itemx -mlp64\n+@opindex milp32\n+@opindex mlp64\n+Generate code for a 32-bit or 64-bit environment.\n+The 32-bit environment sets int, long and pointer to 32 bits.\n+The 64-bit environment sets int to 32 bits and long and pointer\n+to 64 bits.  These are HP-UX specific flags.\n+\n @end table\n \n @node M32R/D Options"}]}