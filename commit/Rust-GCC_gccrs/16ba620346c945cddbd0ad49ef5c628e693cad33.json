{"sha": "16ba620346c945cddbd0ad49ef5c628e693cad33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZiYTYyMDM0NmM5NDVjZGRiZDBhZDQ5ZWY1YzYyOGU2OTNjYWQzMw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-01-12T21:57:54Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-01-12T21:57:54Z"}, "message": "invoke.texi ([-Wsuggest-attribute=]): Don't use parentheses after a funtion name just to indicate it is a function.\n\n2015-01-12  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi ([-Wsuggest-attribute=]): Don't use parentheses\n\tafter a funtion name just to indicate it is a function.\n\t([-fsanitize-undefined-trap-on-error]): Likewise.\n\t([-fdbg-cnt=]): Likewise.\n\t([-mmemcpy]): Likewise.\n\t([-mflush-func]): Likewise.\n\t([-msynci]): Likewise.\n\nFrom-SVN: r219497", "tree": {"sha": "a352e42c99c520cdc37df98b40e0a8f8e1b58e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a352e42c99c520cdc37df98b40e0a8f8e1b58e26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16ba620346c945cddbd0ad49ef5c628e693cad33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ba620346c945cddbd0ad49ef5c628e693cad33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16ba620346c945cddbd0ad49ef5c628e693cad33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ba620346c945cddbd0ad49ef5c628e693cad33/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b9ad1d9aea03385ca67e0d379d0b9d5b8bddff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b9ad1d9aea03385ca67e0d379d0b9d5b8bddff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b9ad1d9aea03385ca67e0d379d0b9d5b8bddff3"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "c0ff02c891bf8216759c8d8af22a938c09a4d810", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ba620346c945cddbd0ad49ef5c628e693cad33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ba620346c945cddbd0ad49ef5c628e693cad33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16ba620346c945cddbd0ad49ef5c628e693cad33", "patch": "@@ -1,3 +1,13 @@\n+2015-01-12  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi ([-Wsuggest-attribute=]): Don't use parentheses\n+\tafter a funtion name just to indicate it is a function.\n+\t([-fsanitize-undefined-trap-on-error]): Likewise.\n+\t([-fdbg-cnt=]): Likewise.\n+\t([-mmemcpy]): Likewise.\n+\t([-mflush-func]): Likewise.\n+\t([-msynci]): Likewise.\n+\n 2015-01-12  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi ([-Wbad-function-cast]): Rewrite to avoid confusing"}, {"sha": "d84e3b798edaaf24d0f4dfc471ebd90a0d565879", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16ba620346c945cddbd0ad49ef5c628e693cad33/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16ba620346c945cddbd0ad49ef5c628e693cad33/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=16ba620346c945cddbd0ad49ef5c628e693cad33", "patch": "@@ -4242,7 +4242,7 @@ Warn about functions that might be candidates for attributes\n functions visible in other compilation units or (in the case of @code{pure} and\n @code{const}) if it cannot prove that the function returns normally. A function\n returns normally if it doesn't contain an infinite loop or return abnormally\n-by throwing, calling @code{abort()} or trapping.  This analysis requires option\n+by throwing, calling @code{abort} or trapping.  This analysis requires option\n @option{-fipa-pure-const}, which is enabled by default at @option{-O} and\n higher.  Higher optimization levels improve the accuracy of the analysis.\n \n@@ -5785,7 +5785,7 @@ Similarly @option{-fno-sanitize-recover} is equivalent to\n @item -fsanitize-undefined-trap-on-error\n @opindex fsanitize-undefined-trap-on-error\n The @option{-fsanitize-undefined-trap-on-error} instructs the compiler to\n-report undefined behavior using @code{__builtin_trap ()} rather than\n+report undefined behavior using @code{__builtin_trap} rather than\n a @code{libubsan} library routine.  The advantage of this is that the\n @code{libubsan} library is not needed and is not linked in, so this\n is usable even in freestanding environments.\n@@ -6109,7 +6109,7 @@ Set the internal debug counter upper bound.  @var{counter-value-list}\n is a comma-separated list of @var{name}:@var{value} pairs\n which sets the upper bound of each debug counter @var{name} to @var{value}.\n All debug counters have the initial upper bound of @code{UINT_MAX};\n-thus @code{dbg_cnt()} returns true always unless the upper bound\n+thus @code{dbg_cnt} returns true always unless the upper bound\n is set by this option.\n For example, with @option{-fdbg-cnt=dce:10,tail_call:0},\n @code{dbg_cnt(dce)} returns true only for first 10 invocations.\n@@ -18454,7 +18454,7 @@ Divide-by-zero checks can be completely disabled using\n @itemx -mno-memcpy\n @opindex mmemcpy\n @opindex mno-memcpy\n-Force (do not force) the use of @code{memcpy()} for non-trivial block\n+Force (do not force) the use of @code{memcpy} for non-trivial block\n moves.  The default is @option{-mno-memcpy}, which allows GCC to inline\n most constant-sized copies.\n \n@@ -18667,7 +18667,7 @@ Disable the insertion of cache barriers.  This is the default setting.\n @opindex mflush-func\n Specifies the function to call to flush the I and D caches, or to not\n call any such function.  If called, the function must take the same\n-arguments as the common @code{_flush_func()}, that is, the address of the\n+arguments as the common @code{_flush_func}, that is, the address of the\n memory range for which the cache is being flushed, the size of the\n memory range, and the number 3 (to flush both caches).  The default\n depends on the target GCC was configured for, but commonly is either\n@@ -18721,7 +18721,7 @@ It is enabled by default at optimization level @option{-O3}.\n @opindex msynci\n Enable (disable) generation of @code{synci} instructions on\n architectures that support it.  The @code{synci} instructions (if\n-enabled) are generated when @code{__builtin___clear_cache()} is\n+enabled) are generated when @code{__builtin___clear_cache} is\n compiled.\n \n This option defaults to @option{-mno-synci}, but the default can be"}]}