{"sha": "0e7a8c4b6f37d0c585accd2e6f581ae0427e6e78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU3YThjNGI2ZjM3ZDBjNTg1YWNjZDJlNmY1ODFhZTA0MjdlNmU3OA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2003-04-21T12:06:12Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-04-21T12:06:12Z"}, "message": "* cppcharset.c (_cpp_valid_ucn): Cast field precision to int.\n\nFrom-SVN: r65883", "tree": {"sha": "821db03b9b39d7877956df361a93a324f08c5be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/821db03b9b39d7877956df361a93a324f08c5be3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e7a8c4b6f37d0c585accd2e6f581ae0427e6e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7a8c4b6f37d0c585accd2e6f581ae0427e6e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7a8c4b6f37d0c585accd2e6f581ae0427e6e78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7a8c4b6f37d0c585accd2e6f581ae0427e6e78/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8de9bb0eb6b5c48572d87fd616e8b21c702b38ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de9bb0eb6b5c48572d87fd616e8b21c702b38ad"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "ef0ad87aa5003a97f113d2692a9e1b2fe04284e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7a8c4b6f37d0c585accd2e6f581ae0427e6e78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7a8c4b6f37d0c585accd2e6f581ae0427e6e78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e7a8c4b6f37d0c585accd2e6f581ae0427e6e78", "patch": "@@ -1,3 +1,7 @@\n+2003-04-21  Andreas Jaeger  <aj@suse.de>\n+\n+        * cppcharset.c (_cpp_valid_ucn): Cast field precision to int.\n+\n 2003-04-20  Chris Lattner  <sabre@nondot.org>\n \t    Zack Weinberg  <zack@codesourcery.com>\n "}, {"sha": "23a44760701cb1a7f406421b745bcf8690eb2012", "filename": "gcc/cppcharset.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7a8c4b6f37d0c585accd2e6f581ae0427e6e78/gcc%2Fcppcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7a8c4b6f37d0c585accd2e6f581ae0427e6e78/gcc%2Fcppcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppcharset.c?ref=0e7a8c4b6f37d0c585accd2e6f581ae0427e6e78", "patch": "@@ -92,7 +92,7 @@ _cpp_valid_ucn (pfile, pstr, identifier_pos)\n   if (length)\n     /* We'll error when we try it out as the start of an identifier.  */\n     cpp_error (pfile, DL_ERROR, \"incomplete universal character name %.*s\",\n-\t       str - base, base);\n+\t       (int) (str - base), base);\n   /* The standard permits $, @ and ` to be specified as UCNs.  We use\n      hex escapes so that this also works with EBCDIC hosts.  */\n   else if ((result < 0xa0\n@@ -101,7 +101,7 @@ _cpp_valid_ucn (pfile, pstr, identifier_pos)\n \t   || (result >= 0xD800 && result <= 0xDFFF))\n     {\n       cpp_error (pfile, DL_ERROR, \"%.*s is not a valid universal character\",\n-\t\t str - base, base);\n+\t\t (int) (str - base), base);\n     }\n   else if (identifier_pos)\n     {\n@@ -110,11 +110,11 @@ _cpp_valid_ucn (pfile, pstr, identifier_pos)\n       if (validity == 0)\n \tcpp_error (pfile, DL_ERROR,\n \t\t   \"universal character %.*s is not valid in an identifier\",\n-\t\t   str - base, base);\n+\t\t   (int) (str - base), base);\n       else if (validity == 2 && identifier_pos == 1)\n \tcpp_error (pfile, DL_ERROR,\n    \"universal character %.*s is not valid at the start of an identifier\",\n-\t\t   str - base, base);\n+\t\t   (int) (str - base), base);\n     }\n \n   if (result == 0)"}]}