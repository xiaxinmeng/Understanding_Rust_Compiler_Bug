{"sha": "27a4e07281d191dff6b8c109b51a62d8b0731210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhNGUwNzI4MWQxOTFkZmY2YjhjMTA5YjUxYTYyZDhiMDczMTIxMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-11-12T17:01:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-11-12T17:01:51Z"}, "message": "re PR target/35366 (gfortran.dg/equiv_7.f90 fails with -m64 -Os on powerpc-apple-darwin9)\n\n\tPR target/35366\n\tPR fortran/33759\n\t* fold-const.c (native_encode_string): New function.\n\t(native_encode_expr): Use it for STRING_CST.\n\n\t* trans-const.c (gfc_conv_constant_to_tree): Warn when\n\tconverting an integer outside of LOGICAL's range to\n\tLOGICAL.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_function,\n\tgfc_conv_intrinsic_array_transfer, gfc_conv_intrinsic_transfer):\n\tUse INTEGER_TYPE instead of BOOLEAN_TYPE for TRANSFER as\n\targument of another TRANSFER.\n\n\t* gfortran.dg/hollerith.f90: Don't assume a 32-bit value\n\tstored into logical variable will be preserved.\n\t* gfortran.dg/transfer_simplify_4.f90: Remove undefined\n\tcases.  Run at all optimization levels.  Add a couple of\n\tnew tests.\n\t* gfortran.dg/hollerith5.f90: New test.\n\t* gfortran.dg/hollerith_legacy.f90: Add dg-warning.\n\nFrom-SVN: r141790", "tree": {"sha": "90513cc0221974d0adbd9f6b5ecaf6cfe813b33b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90513cc0221974d0adbd9f6b5ecaf6cfe813b33b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27a4e07281d191dff6b8c109b51a62d8b0731210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a4e07281d191dff6b8c109b51a62d8b0731210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a4e07281d191dff6b8c109b51a62d8b0731210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a4e07281d191dff6b8c109b51a62d8b0731210/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2cf2f07a9eabdc50dd002970d3c6bf634ed1292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2cf2f07a9eabdc50dd002970d3c6bf634ed1292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2cf2f07a9eabdc50dd002970d3c6bf634ed1292"}], "stats": {"total": 184, "additions": 147, "deletions": 37}, "files": [{"sha": "fb4e453c7afcaff7d8fe12c0436be762ceda26d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27a4e07281d191dff6b8c109b51a62d8b0731210", "patch": "@@ -1,3 +1,9 @@\n+2008-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/35366\n+\t* fold-const.c (native_encode_string): New function.\n+\t(native_encode_expr): Use it for STRING_CST.\n+\n 2008-11-12  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/cond.md (cond_to_int peephole2): Don't eliminate the"}, {"sha": "8dddca19c08874c859ad3cc39e5c2d08aa319f2a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=27a4e07281d191dff6b8c109b51a62d8b0731210", "patch": "@@ -7315,6 +7315,37 @@ native_encode_vector (const_tree expr, unsigned char *ptr, int len)\n }\n \n \n+/* Subroutine of native_encode_expr.  Encode the STRING_CST\n+   specified by EXPR into the buffer PTR of length LEN bytes.\n+   Return the number of bytes placed in the buffer, or zero\n+   upon failure.  */\n+\n+static int\n+native_encode_string (const_tree expr, unsigned char *ptr, int len)\n+{\n+  tree type = TREE_TYPE (expr);\n+  HOST_WIDE_INT total_bytes;\n+\n+  if (TREE_CODE (type) != ARRAY_TYPE\n+      || TREE_CODE (TREE_TYPE (type)) != INTEGER_TYPE\n+      || GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (type))) != BITS_PER_UNIT\n+      || !host_integerp (TYPE_SIZE_UNIT (type), 0))\n+    return 0;\n+  total_bytes = tree_low_cst (TYPE_SIZE_UNIT (type), 0);\n+  if (total_bytes > len)\n+    return 0;\n+  if (TREE_STRING_LENGTH (expr) < total_bytes)\n+    {\n+      memcpy (ptr, TREE_STRING_POINTER (expr), TREE_STRING_LENGTH (expr));\n+      memset (ptr + TREE_STRING_LENGTH (expr), 0,\n+\t      total_bytes - TREE_STRING_LENGTH (expr));\n+    }\n+  else\n+    memcpy (ptr, TREE_STRING_POINTER (expr), total_bytes);\n+  return total_bytes;\n+}\n+\n+\n /* Subroutine of fold_view_convert_expr.  Encode the INTEGER_CST,\n    REAL_CST, COMPLEX_CST or VECTOR_CST specified by EXPR into the\n    buffer PTR of length LEN bytes.  Return the number of bytes\n@@ -7337,6 +7368,9 @@ native_encode_expr (const_tree expr, unsigned char *ptr, int len)\n     case VECTOR_CST:\n       return native_encode_vector (expr, ptr, len);\n \n+    case STRING_CST:\n+      return native_encode_string (expr, ptr, len);\n+\n     default:\n       return 0;\n     }"}, {"sha": "2b4fbaa9659fe734f4b40ecf91a97c8794ef8221", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=27a4e07281d191dff6b8c109b51a62d8b0731210", "patch": "@@ -1,3 +1,15 @@\n+2008-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/35366\n+\tPR fortran/33759\n+\t* trans-const.c (gfc_conv_constant_to_tree): Warn when\n+\tconverting an integer outside of LOGICAL's range to\n+\tLOGICAL.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_function,\n+\tgfc_conv_intrinsic_array_transfer, gfc_conv_intrinsic_transfer):\n+\tUse INTEGER_TYPE instead of BOOLEAN_TYPE for TRANSFER as\n+\targument of another TRANSFER.\n+\n 2008-11-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/38065"}, {"sha": "4db3512bc0ec00cee8a7c1d51b292dc1b094d3ea", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=27a4e07281d191dff6b8c109b51a62d8b0731210", "patch": "@@ -281,13 +281,19 @@ gfc_conv_constant_to_tree (gfc_expr * expr)\n \n     case BT_LOGICAL:\n       if (expr->representation.string)\n-\treturn fold_build1 (VIEW_CONVERT_EXPR,\n-\t\t\t    gfc_get_logical_type (expr->ts.kind),\n-\t\t\t    gfc_build_string_const (expr->representation.length,\n-\t\t\t\t\t\t    expr->representation.string));\n+\t{\n+\t  tree tmp = fold_build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t  gfc_get_int_type (expr->ts.kind),\n+\t\t\t\t  gfc_build_string_const (expr->representation.length,\n+\t\t\t\t\t\t\t  expr->representation.string));\n+\t  if (!integer_zerop (tmp) && !integer_onep (tmp))\n+\t    gfc_warning (\"Assigning value other than 0 or 1 to LOGICAL\"\n+\t\t\t \" has undefined result at %L\", &expr->where);\n+\t  return fold_convert (gfc_get_logical_type (expr->ts.kind), tmp);\n+\t}\n       else\n \treturn build_int_cst (gfc_get_logical_type (expr->ts.kind),\n-\t\t\t    expr->value.logical);\n+\t\t\t      expr->value.logical);\n \n     case BT_COMPLEX:\n       if (expr->representation.string)"}, {"sha": "b8d9f3ed43a12591c3b98420e9f32ddd81519c2f", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=27a4e07281d191dff6b8c109b51a62d8b0731210", "patch": "@@ -3707,6 +3707,14 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n       mold_type = gfc_get_element_type (TREE_TYPE (argse.expr));\n     }\n \n+  if (strcmp (expr->value.function.name, \"__transfer_in_transfer\") == 0)\n+    {\n+      /* If this TRANSFER is nested in another TRANSFER, use a type\n+\t that preserves all bits.  */\n+      if (arg->expr->ts.type == BT_LOGICAL)\n+\tmold_type = gfc_get_int_type (arg->expr->ts.kind);\n+    }\n+\n   if (arg->expr->ts.type == BT_CHARACTER)\n     {\n       tmp = size_of_string_in_bytes (arg->expr->ts.kind, argse.string_length);\n@@ -3835,6 +3843,13 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n \n   arg = arg->next;\n   type = gfc_typenode_for_spec (&expr->ts);\n+  if (strcmp (expr->value.function.name, \"__transfer_in_transfer\") == 0)\n+    {\n+      /* If this TRANSFER is nested in another TRANSFER, use a type\n+\t that preserves all bits.  */\n+      if (expr->ts.type == BT_LOGICAL)\n+\ttype = gfc_get_int_type (expr->ts.kind);\n+    }\n \n   if (expr->ts.type == BT_CHARACTER)\n     {\n@@ -4750,20 +4765,30 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_TRANSFER:\n-      if (se->ss)\n+      if (se->ss && se->ss->useflags)\n \t{\n-\t  if (se->ss->useflags)\n-\t    {\n-\t      /* Access the previously obtained result.  */\n-\t      gfc_conv_tmp_array_ref (se);\n-\t      gfc_advance_se_ss_chain (se);\n-\t      break;\n-\t    }\n-\t  else\n-\t    gfc_conv_intrinsic_array_transfer (se, expr);\n+\t  /* Access the previously obtained result.  */\n+\t  gfc_conv_tmp_array_ref (se);\n+\t  gfc_advance_se_ss_chain (se);\n \t}\n       else\n-\tgfc_conv_intrinsic_transfer (se, expr);\n+\t{\n+\t  /* Ensure double transfer through LOGICAL preserves all\n+\t     the needed bits.  */\n+\t  gfc_expr *source = expr->value.function.actual->expr;\n+\t  if (source->expr_type == EXPR_FUNCTION\n+\t      && source->value.function.esym == NULL\n+\t      && source->value.function.isym != NULL\n+\t      && source->value.function.isym->id == GFC_ISYM_TRANSFER\n+\t      && source->ts.type == BT_LOGICAL\n+\t      && expr->ts.type != source->ts.type)\n+\t    source->value.function.name = \"__transfer_in_transfer\";\n+\n+\t  if (se->ss)\n+\t    gfc_conv_intrinsic_array_transfer (se, expr);\n+\t  else\n+\t    gfc_conv_intrinsic_transfer (se, expr);\n+\t}\n       break;\n \n     case GFC_ISYM_TTYNAM:"}, {"sha": "cd3752a741c3c12d48a581eaab58b2493ce56dd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27a4e07281d191dff6b8c109b51a62d8b0731210", "patch": "@@ -1,5 +1,15 @@\n 2008-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/35366\n+\tPR fortran/33759\n+\t* gfortran.dg/hollerith.f90: Don't assume a 32-bit value\n+\tstored into logical variable will be preserved.\n+\t* gfortran.dg/transfer_simplify_4.f90: Remove undefined\n+\tcases.  Run at all optimization levels.  Add a couple of\n+\tnew tests.\n+\t* gfortran.dg/hollerith5.f90: New test.\n+\t* gfortran.dg/hollerith_legacy.f90: Add dg-warning.\n+\n \tPR c++/35334\n \t* gcc.dg/pr35334.c: New test.\n \t* g++.dg/other/error29.C: New test."}, {"sha": "f9836155b575849660a5b5b92bcc611886aa7eb3", "filename": "gcc/testsuite/gfortran.dg/hollerith.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith.f90?ref=27a4e07281d191dff6b8c109b51a62d8b0731210", "patch": "@@ -8,7 +8,7 @@\n character*4 z2(2,2)\n character*80 line\n integer i\n-logical l\n+integer j\n real r\n character*8 c\n \n@@ -20,15 +20,15 @@\n \n z2 (1,2) = 4h(i8)\n i = 4hHell\n-l = 4Ho wo\n+j = 4Ho wo\n r = 4Hrld! \n-write (line, '(3A4)') i, l, r\n+write (line, '(3A4)') i, j, r\n if (line .ne. 'Hello world!') call abort\n i = 2Hab\n+j = 2Hab\n r = 2Hab\n-l = 2Hab\n c = 2Hab\n-write (line, '(3A4, 8A)') i, l, r, c\n+write (line, '(3A4, 8A)') i, j, r, c\n if (line .ne. 'ab  ab  ab  ab      ') call abort\n \n write(line, '(4A8, \"!\")' ) x"}, {"sha": "ebd0a117c4f1aaba4063d7b405b630d2860f212d", "filename": "gcc/testsuite/gfortran.dg/hollerith5.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith5.f90?ref=27a4e07281d191dff6b8c109b51a62d8b0731210", "patch": "@@ -0,0 +1,8 @@\n+       ! { dg-do compile }\n+       implicit none\n+       logical b\n+       b = 4Habcd ! { dg-warning \"has undefined result\" }\n+       end\n+\n+! { dg-warning \"Hollerith constant\" \"const\" { target *-*-* } 4 }\n+! { dg-warning \"Conversion\" \"conversion\" { target *-*-* } 4 }"}, {"sha": "1bbaf3f68f9ea622559d63dffc084ad7bc922993", "filename": "gcc/testsuite/gfortran.dg/hollerith_legacy.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_legacy.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_legacy.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_legacy.f90?ref=27a4e07281d191dff6b8c109b51a62d8b0731210", "patch": "@@ -21,13 +21,13 @@\n \n z2 (1,2) = 4h(i8)\n i = 4hHell\n-l = 4Ho wo\n+l = 4Ho wo\t! { dg-warning \"has undefined result\" }\n r = 4Hrld! \n write (line, '(3A4)') i, l, r\n if (line .ne. 'Hello world!') call abort\n i = 2Hab\n r = 2Hab\n-l = 2Hab\n+l = 2Hab\t! { dg-warning \"has undefined result\" }\n c = 2Hab\n write (line, '(3A4, 8A)') i, l, r, c\n if (line .ne. 'ab  ab  ab  ab      ') call abort"}, {"sha": "65b1e41cfdf727037f1d874f0897f7ece9a1396d", "filename": "gcc/testsuite/gfortran.dg/transfer_simplify_4.f90", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a4e07281d191dff6b8c109b51a62d8b0731210/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_4.f90?ref=27a4e07281d191dff6b8c109b51a62d8b0731210", "patch": "@@ -1,30 +1,39 @@\n ! { dg-do run }\n-! { dg-options \"-O0\" }\n ! Tests that the in-memory representation of a transferred variable\n ! propagates properly.\n !\n   implicit none\n \n   integer, parameter :: ip1 = 42\n-  logical, parameter :: ap1 = transfer(ip1, .true.)\n-  integer, parameter :: ip2 = transfer(ap1, 0)\n+  integer, parameter :: ip2 = transfer(transfer(ip1, .true.), 0)\n+  integer :: i, ai(4)\n+  logical :: b\n \n-  logical :: a\n-  integer :: i\n+  if (ip2 .ne. ip1) call abort ()\n   \n   i = transfer(transfer(ip1, .true.), 0)\n   if (i .ne. ip1) call abort ()\n \n-  i = transfer(ap1, 0)\n-  if (i .ne. ip1) call abort ()\n-  \n-  a = transfer(ip1, .true.)\n-  i = transfer(a, 0)\n+  i = 42\n+  i = transfer(transfer(i, .true.), 0)\n   if (i .ne. ip1) call abort ()\n \n-  i = ip1\n-  a = transfer(i, .true.)\n-  i = transfer(a, 0)\n-  if (i .ne. ip1) call abort ()\n+  b = transfer(transfer(.true., 3.1415), .true.)\n+  if (.not.b) call abort ()\n+\n+  b = transfer(transfer(.false., 3.1415), .true.)\n+  if (b) call abort ()\n+\n+  i = 0\n+  b = transfer(i, .true.)\n+  ! The standard doesn't guarantee here that b will be .false.,\n+  ! though in gfortran for all targets it will.\n+\n+  ai = (/ 42, 42, 42, 42 /)\n+  ai = transfer (transfer (ai, .false., 4), ai)\n+  if (any(ai .ne. 42)) call abort\n \n+  ai = transfer (transfer ((/ 42, 42, 42, 42 /), &\n+&                          (/ .false., .false., .false., .false. /)), ai)\n+  if (any(ai .ne. 42)) call abort\n end"}]}