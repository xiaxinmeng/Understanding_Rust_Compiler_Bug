{"sha": "8fa2df72bb83f930d07a0a8235531464283d6f7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZhMmRmNzJiYjgzZjkzMGQwN2EwYTgyMzU1MzE0NjQyODNkNmY3Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-04-20T17:37:49Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-04-20T17:37:49Z"}, "message": "module.c (import_iso_c_binding_module): Add casts to enum type.\n\n\t* module.c (import_iso_c_binding_module): Add casts to enum type.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax): Change op to enum\n\ttree_code.\n\t(gfc_conv_intrinsic_anyall): Likewise.\n\t(gfc_conv_intrinsic_arith): Likewise.\n\t(gfc_conv_intrinsic_minmaxloc): Likewise.\n\t(gfc_conv_intrinsic_minmaxval): Likewise.\n\t(gfc_conv_intrinsic_bitop): Likewise.\n\t(gfc_conv_intrinsic_singlebitop): Likewise.\n\t(gfc_conv_intrinsic_strcmp): Likewise.\n\nFrom-SVN: r146445", "tree": {"sha": "ef0487a5d32009e5ed91db65cb26bf6667d6f3d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef0487a5d32009e5ed91db65cb26bf6667d6f3d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fa2df72bb83f930d07a0a8235531464283d6f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa2df72bb83f930d07a0a8235531464283d6f7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa2df72bb83f930d07a0a8235531464283d6f7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa2df72bb83f930d07a0a8235531464283d6f7c/comments", "author": null, "committer": null, "parents": [{"sha": "6ff078d4f495b474b9c593178de3b9a8a9902967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff078d4f495b474b9c593178de3b9a8a9902967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff078d4f495b474b9c593178de3b9a8a9902967"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "37349b78bf7045143f66850ad9b8a278b19fe880", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa2df72bb83f930d07a0a8235531464283d6f7c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa2df72bb83f930d07a0a8235531464283d6f7c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8fa2df72bb83f930d07a0a8235531464283d6f7c", "patch": "@@ -1,3 +1,16 @@\n+2009-04-20  Ian Lance Taylor  <iant@google.com>\n+\n+\t* module.c (import_iso_c_binding_module): Add casts to enum type.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmax): Change op to enum\n+\ttree_code.\n+\t(gfc_conv_intrinsic_anyall): Likewise.\n+\t(gfc_conv_intrinsic_arith): Likewise.\n+\t(gfc_conv_intrinsic_minmaxloc): Likewise.\n+\t(gfc_conv_intrinsic_minmaxval): Likewise.\n+\t(gfc_conv_intrinsic_bitop): Likewise.\n+\t(gfc_conv_intrinsic_singlebitop): Likewise.\n+\t(gfc_conv_intrinsic_strcmp): Likewise.\n+\n 2009-04-20  Vasilis Liaskovitis  <vliaskov@gmail.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "9c55c2f36ab79e94b48b0ac04fdba9121dc7bf61", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa2df72bb83f930d07a0a8235531464283d6f7c/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa2df72bb83f930d07a0a8235531464283d6f7c/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=8fa2df72bb83f930d07a0a8235531464283d6f7c", "patch": "@@ -4994,7 +4994,9 @@ import_iso_c_binding_module (void)\n \t      continue;\n \t    }\n \t  \n-\t  generate_isocbinding_symbol (iso_c_module_name, i, u->local_name);\n+\t  generate_isocbinding_symbol (iso_c_module_name,\n+\t\t\t\t       (iso_c_binding_symbol) i,\n+\t\t\t\t       u->local_name);\n \t}\n     }\n   else\n@@ -5011,7 +5013,9 @@ import_iso_c_binding_module (void)\n \t\t  break;\n \t\t}\n \t    }\n-\t  generate_isocbinding_symbol (iso_c_module_name, i, local_name);\n+\t  generate_isocbinding_symbol (iso_c_module_name,\n+\t\t\t\t       (iso_c_binding_symbol) i,\n+\t\t\t\t       local_name);\n \t}\n \n       for (u = gfc_rename_list; u; u = u->next)"}, {"sha": "47960e90bbddabcb31f322ef4e060fe1e6fdb0ef", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa2df72bb83f930d07a0a8235531464283d6f7c/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa2df72bb83f930d07a0a8235531464283d6f7c/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=8fa2df72bb83f930d07a0a8235531464283d6f7c", "patch": "@@ -1489,7 +1489,7 @@ gfc_conv_intrinsic_ttynam (gfc_se * se, gfc_expr * expr)\n /* TODO: Mismatching types can occur when specific names are used.\n    These should be handled during resolution.  */\n static void\n-gfc_conv_intrinsic_minmax (gfc_se * se, gfc_expr * expr, int op)\n+gfc_conv_intrinsic_minmax (gfc_se * se, gfc_expr * expr, enum tree_code op)\n {\n   tree tmp;\n   tree mvar;\n@@ -1725,7 +1725,7 @@ gfc_conv_intrinsic_funcall (gfc_se * se, gfc_expr * expr)\n     }\n  */\n static void\n-gfc_conv_intrinsic_anyall (gfc_se * se, gfc_expr * expr, int op)\n+gfc_conv_intrinsic_anyall (gfc_se * se, gfc_expr * expr, enum tree_code op)\n {\n   tree resvar;\n   stmtblock_t block;\n@@ -1880,7 +1880,7 @@ gfc_conv_intrinsic_count (gfc_se * se, gfc_expr * expr)\n \n /* Inline implementation of the sum and product intrinsics.  */\n static void\n-gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, int op)\n+gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op)\n {\n   tree resvar;\n   tree type;\n@@ -2107,7 +2107,7 @@ gfc_conv_intrinsic_dot_product (gfc_se * se, gfc_expr * expr)\n \n \n static void\n-gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, int op)\n+gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, enum tree_code op)\n {\n   stmtblock_t body;\n   stmtblock_t block;\n@@ -2312,7 +2312,7 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, int op)\n }\n \n static void\n-gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, int op)\n+gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, enum tree_code op)\n {\n   tree limit;\n   tree type;\n@@ -2484,7 +2484,7 @@ gfc_conv_intrinsic_btest (gfc_se * se, gfc_expr * expr)\n \n /* Generate code to perform the specified operation.  */\n static void\n-gfc_conv_intrinsic_bitop (gfc_se * se, gfc_expr * expr, int op)\n+gfc_conv_intrinsic_bitop (gfc_se * se, gfc_expr * expr, enum tree_code op)\n {\n   tree args[2];\n \n@@ -2509,7 +2509,7 @@ gfc_conv_intrinsic_singlebitop (gfc_se * se, gfc_expr * expr, int set)\n   tree args[2];\n   tree type;\n   tree tmp;\n-  int op;\n+  enum tree_code op;\n \n   gfc_conv_intrinsic_function_args (se, expr, args, 2);\n   type = TREE_TYPE (args[0]);\n@@ -3584,7 +3584,7 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n /* Intrinsic string comparison functions.  */\n \n static void\n-gfc_conv_intrinsic_strcmp (gfc_se * se, gfc_expr * expr, int op)\n+gfc_conv_intrinsic_strcmp (gfc_se * se, gfc_expr * expr, enum tree_code op)\n {\n   tree args[4];\n "}]}