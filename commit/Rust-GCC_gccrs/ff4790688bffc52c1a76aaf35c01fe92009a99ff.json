{"sha": "ff4790688bffc52c1a76aaf35c01fe92009a99ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY0NzkwNjg4YmZmYzUyYzFhNzZhYWYzNWMwMWZlOTIwMDlhOTlmZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-22T12:35:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-22T12:35:26Z"}, "message": "re PR tree-optimization/83044 (ice in contains_struct_check)\n\n\tPR tree-optimization/83044\n\t* tree-vrp.c (vrp_prop::check_array_ref): If eltsize is not\n\tINTEGER_CST or is 0, clear up_bound{,_p1} and later ignore tests\n\tthat need the upper bound.  Subtract offset from\n\tget_addr_base_and_unit_offset only if positive and subtract it\n\tbefore division by eltsize rather than after it.\n\n\t* gcc.dg/pr83044.c: New test.\n\t* c-c++-common/Warray-bounds.c (fb): Fix up MAX value.\n\nFrom-SVN: r255054", "tree": {"sha": "a521783bec9aa30d6cddf1a23ea52f02f1239b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a521783bec9aa30d6cddf1a23ea52f02f1239b4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff4790688bffc52c1a76aaf35c01fe92009a99ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4790688bffc52c1a76aaf35c01fe92009a99ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff4790688bffc52c1a76aaf35c01fe92009a99ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4790688bffc52c1a76aaf35c01fe92009a99ff/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7d3cd407ccea644f1405cf331edf3bb30e57e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d3cd407ccea644f1405cf331edf3bb30e57e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d3cd407ccea644f1405cf331edf3bb30e57e65"}], "stats": {"total": 75, "additions": 55, "deletions": 20}, "files": [{"sha": "e4936c695bac9c0f324712dd0feee07649034f49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4790688bffc52c1a76aaf35c01fe92009a99ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4790688bffc52c1a76aaf35c01fe92009a99ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff4790688bffc52c1a76aaf35c01fe92009a99ff", "patch": "@@ -1,5 +1,12 @@\n 2017-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/83044\n+\t* tree-vrp.c (vrp_prop::check_array_ref): If eltsize is not\n+\tINTEGER_CST or is 0, clear up_bound{,_p1} and later ignore tests\n+\tthat need the upper bound.  Subtract offset from\n+\tget_addr_base_and_unit_offset only if positive and subtract it\n+\tbefore division by eltsize rather than after it.\n+\n \tPR debug/83084\n \t* valtrack.c (propagate_for_debug_subst, propagate_for_debug): Reset\n \tdebug insns if they would contain UNSPEC_VOLATILE or volatile asm."}, {"sha": "b117fa88f0498bdfa7a79a3e569789af30940753", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4790688bffc52c1a76aaf35c01fe92009a99ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4790688bffc52c1a76aaf35c01fe92009a99ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff4790688bffc52c1a76aaf35c01fe92009a99ff", "patch": "@@ -1,3 +1,9 @@\n+2017-11-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/83044\n+\t* gcc.dg/pr83044.c: New test.\n+\t* c-c++-common/Warray-bounds.c (fb): Fix up MAX value.\n+\n 2017-11-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/79072"}, {"sha": "4b9d6aafd7b4321012f550dcdde383ad88d961a7", "filename": "gcc/testsuite/c-c++-common/Warray-bounds.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4790688bffc52c1a76aaf35c01fe92009a99ff/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4790688bffc52c1a76aaf35c01fe92009a99ff/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds.c?ref=ff4790688bffc52c1a76aaf35c01fe92009a99ff", "patch": "@@ -200,7 +200,7 @@ void fb (struct B *p)\n \n   T (p->a1x[9].a1[0]);\n \n-  enum { MAX = DIFF_MAX / sizeof *p->a1x - sizeof *p };\n+  enum { MAX = (DIFF_MAX - sizeof *p) / sizeof *p->a1x };\n \n   T (p->a1x[DIFF_MIN].a1);                /* { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds\" } */\n   T (p->a1x[-1].a1);                      /* { dg-warning \"array subscript -1 is below array bounds\" } */"}, {"sha": "6681071bb92077e4efb1022b1ae1056eb36baf8d", "filename": "gcc/testsuite/gcc.dg/pr83044.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4790688bffc52c1a76aaf35c01fe92009a99ff/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83044.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4790688bffc52c1a76aaf35c01fe92009a99ff/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83044.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83044.c?ref=ff4790688bffc52c1a76aaf35c01fe92009a99ff", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/83044 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -std=gnu89 -O2\" } */\n+\n+struct A { int b[0]; };\n+struct B { struct A c[0]; };\n+void bar (int *);\n+\n+void\n+foo (void)\n+{\n+  struct B d;\n+  bar (d.c->b);\n+}"}, {"sha": "ea56e9d0d2d5f00e98d26635463d25d1c1cbb7b5", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4790688bffc52c1a76aaf35c01fe92009a99ff/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4790688bffc52c1a76aaf35c01fe92009a99ff/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ff4790688bffc52c1a76aaf35c01fe92009a99ff", "patch": "@@ -4795,24 +4795,30 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n \t the size of the largest object is PTRDIFF_MAX.  */\n       tree eltsize = array_ref_element_size (ref);\n \n-      /* FIXME: Handle VLAs.  */\n-      if (TREE_CODE (eltsize) != INTEGER_CST)\n-\treturn;\n-\n-      tree maxbound = TYPE_MAX_VALUE (ptrdiff_type_node);\n-\n-      up_bound_p1 = int_const_binop (TRUNC_DIV_EXPR, maxbound, eltsize);\n-\n-      tree arg = TREE_OPERAND (ref, 0);\n+      if (TREE_CODE (eltsize) != INTEGER_CST\n+\t  || integer_zerop (eltsize))\n+\t{\n+\t  up_bound = NULL_TREE;\n+\t  up_bound_p1 = NULL_TREE;\n+\t}\n+      else\n+\t{\n+\t  tree maxbound = TYPE_MAX_VALUE (ptrdiff_type_node);\n+\t  tree arg = TREE_OPERAND (ref, 0);\n+\t  HOST_WIDE_INT off;\n+\n+\t  if (get_addr_base_and_unit_offset (arg, &off) && off > 0)\n+\t    maxbound = wide_int_to_tree (sizetype,\n+\t\t\t\t\t wi::sub (wi::to_wide (maxbound),\n+\t\t\t\t\t\t  off));\n+\t  else\n+\t    maxbound = fold_convert (sizetype, maxbound);\n \n-      HOST_WIDE_INT off;\n-      if (get_addr_base_and_unit_offset (arg, &off))\n-\tup_bound_p1 = wide_int_to_tree (sizetype,\n-\t\t\t\t\twi::sub (wi::to_wide (up_bound_p1),\n-\t\t\t\t\t\t off));\n+\t  up_bound_p1 = int_const_binop (TRUNC_DIV_EXPR, maxbound, eltsize);\n \n-      up_bound = int_const_binop (MINUS_EXPR, up_bound_p1,\n-\t\t\t\t  build_int_cst (ptrdiff_type_node, 1));\n+\t  up_bound = int_const_binop (MINUS_EXPR, up_bound_p1,\n+\t\t\t\t      build_int_cst (ptrdiff_type_node, 1));\n+\t}\n     }\n   else\n     up_bound_p1 = int_const_binop (PLUS_EXPR, up_bound,\n@@ -4823,7 +4829,7 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n   tree artype = TREE_TYPE (TREE_OPERAND (ref, 0));\n \n   /* Empty array.  */\n-  if (tree_int_cst_equal (low_bound, up_bound_p1))\n+  if (up_bound && tree_int_cst_equal (low_bound, up_bound_p1))\n     {\n       warning_at (location, OPT_Warray_bounds,\n \t\t  \"array subscript %E is above array bounds of %qT\",\n@@ -4843,7 +4849,8 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n \n   if (vr && vr->type == VR_ANTI_RANGE)\n     {\n-      if (TREE_CODE (up_sub) == INTEGER_CST\n+      if (up_bound\n+\t  && TREE_CODE (up_sub) == INTEGER_CST\n           && (ignore_off_by_one\n \t      ? tree_int_cst_lt (up_bound, up_sub)\n \t      : tree_int_cst_le (up_bound, up_sub))\n@@ -4856,7 +4863,8 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n           TREE_NO_WARNING (ref) = 1;\n         }\n     }\n-  else if (TREE_CODE (up_sub) == INTEGER_CST\n+  else if (up_bound\n+\t   && TREE_CODE (up_sub) == INTEGER_CST\n \t   && (ignore_off_by_one\n \t       ? !tree_int_cst_le (up_sub, up_bound_p1)\n \t       : !tree_int_cst_le (up_sub, up_bound)))"}]}