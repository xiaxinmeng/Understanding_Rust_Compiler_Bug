{"sha": "39b1814c02724d7390e7cc7197b552711f09c494", "node_id": "C_kwDOANBUbNoAKDM5YjE4MTRjMDI3MjRkNzM5MGU3Y2M3MTk3YjU1MjcxMWYwOWM0OTQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-16T00:16:56Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-16T00:16:56Z"}, "message": "Daily bump.", "tree": {"sha": "06ea0a52f7ceb4c045bb542911414756d6c2d1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06ea0a52f7ceb4c045bb542911414756d6c2d1f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39b1814c02724d7390e7cc7197b552711f09c494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39b1814c02724d7390e7cc7197b552711f09c494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39b1814c02724d7390e7cc7197b552711f09c494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39b1814c02724d7390e7cc7197b552711f09c494/comments", "author": null, "committer": null, "parents": [{"sha": "ea4dd8f512979db247c54d6b41377bb73699bcd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4dd8f512979db247c54d6b41377bb73699bcd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4dd8f512979db247c54d6b41377bb73699bcd7"}], "stats": {"total": 395, "additions": 394, "deletions": 1}, "files": [{"sha": "76e5dca4260336ff2363cae12fe90e8fba970129", "filename": "gcc/ChangeLog", "status": "modified", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39b1814c02724d7390e7cc7197b552711f09c494", "patch": "@@ -1,3 +1,212 @@\n+2023-03-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/109097\n+\t* diagnostic-format-sarif.cc (class sarif_invocation): New.\n+\t(class sarif_ice_notification): New.\n+\t(sarif_builder::m_invocation_obj): New field.\n+\t(sarif_invocation::add_notification_for_ice): New.\n+\t(sarif_invocation::prepare_to_flush): New.\n+\t(sarif_ice_notification::sarif_ice_notification): New.\n+\t(sarif_builder::sarif_builder): Add m_invocation_obj.\n+\t(sarif_builder::end_diagnostic): Special-case DK_ICE and\n+\tDK_ICE_NOBT.\n+\t(sarif_builder::flush_to_file): Call prepare_to_flush on\n+\tm_invocation_obj.  Pass the latter to make_top_level_object.\n+\t(sarif_builder::make_result_object): Move creation of \"locations\"\n+\tarray to...\n+\t(sarif_builder::make_locations_arr): ...this new function.\n+\t(sarif_builder::make_top_level_object): Add \"invocation_obj\" param\n+\tand pass it to make_run_object.\n+\t(sarif_builder::make_run_object): Add \"invocation_obj\" param and\n+\tuse it.\n+\t(sarif_ice_handler): New callback.\n+\t(diagnostic_output_format_init_sarif): Wire up sarif_ice_handler.\n+\t* diagnostic.cc (diagnostic_initialize): Initialize new field\n+\t\"ice_handler_cb\".\n+\t(diagnostic_action_after_output): If it is set, make one attempt\n+\tto call ice_handler_cb.\n+\t* diagnostic.h (diagnostic_context::ice_handler_cb): New field.\n+\n+2023-03-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-expand.cc (expand_vec_perm_blend):\n+\tHandle 8-byte modes only with TARGET_MMX_WITH_SSE. Handle V2SFmode\n+\tand fix V2HImode handling.\n+\t(expand_vec_perm_1): Try to emit BLEND instruction\n+\tbefore MOVSS/MOVSD.\n+\t* config/i386/mmx.md (*mmx_blendps): New insn pattern.\n+\n+2023-03-15  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* omp-low.cc (omp_runtime_api_call): Add omp_in_explicit_task.\n+\n+2023-03-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-ssa-warn-access.cc (pass_waccess::check_pointer_uses):\n+\tDo not diagnose clobbers.\n+\n+2023-03-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109139\n+\t* tree-ssa-live.cc (remove_unused_locals): Look at the\n+\tbase address for unused decls on the LHS of .DEFERRED_INIT.\n+\n+2023-03-15  Xi Ruoyao  <xry111@xry111.site>\n+\n+\tPR other/109086\n+\t* builtins.cc (inline_string_cmp): Force the character\n+\tdifference into \"result\" pseudo-register, instead of reassign\n+\tthe pseudo-register.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* config.gcc: Add thead.o to RISC-V extra_objs.\n+\t* config/riscv/peephole.md: Add mempair peephole passes.\n+\t* config/riscv/riscv-protos.h (riscv_split_64bit_move_p): New\n+\tprototype.\n+\t(th_mempair_operands_p): Likewise.\n+\t(th_mempair_order_operands): Likewise.\n+\t(th_mempair_prepare_save_restore_operands): Likewise.\n+\t(th_mempair_save_restore_regs): Likewise.\n+\t(th_mempair_output_move): Likewise.\n+\t* config/riscv/riscv.cc (riscv_save_reg): Move code.\n+\t(riscv_restore_reg): Move code.\n+\t(riscv_for_each_saved_reg): Add code to emit mempair insns.\n+\t* config/riscv/t-riscv: Add thead.cc.\n+\t* config/riscv/thead.md (*th_mempair_load_<GPR:mode>2):\n+\tNew insn.\n+\t(*th_mempair_store_<GPR:mode>2): Likewise.\n+\t(*th_mempair_load_extendsidi2): Likewise.\n+\t(*th_mempair_load_zero_extendsidi2): Likewise.\n+\t* config/riscv/thead.cc: New file.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* config/riscv/constraints.md (TARGET_XTHEADFMV ? FP_REGS : NO_REGS)\n+\tNew constraint \"th_f_fmv\".\n+\t(TARGET_XTHEADFMV ? GR_REGS : NO_REGS): New constraint\n+\t\"th_r_fmv\".\n+\t* config/riscv/riscv.cc (riscv_split_doubleword_move):\n+\tAdd split code for XTheadFmv.\n+\t(riscv_secondary_memory_needed): XTheadFmv does not need\n+\tsecondary memory.\n+\t* config/riscv/riscv.md: Add new UNSPEC_XTHEADFMV and\n+\tUNSPEC_XTHEADFMV_HW. Add support for XTheadFmv to\n+\tmovdf_hardfloat_rv32.\n+\t* config/riscv/thead.md (th_fmv_hw_w_x): New INSN.\n+\t(th_fmv_x_w): New INSN.\n+\t(th_fmv_x_hw): New INSN.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* config/riscv/riscv.md (maddhisi4): New expand.\n+\t(msubhisi4): New expand.\n+\t* config/riscv/thead.md (*th_mula<mode>): New pattern.\n+\t(*th_mulawsi): New pattern.\n+\t(*th_mulawsi2): New pattern.\n+\t(*th_maddhisi4): New pattern.\n+\t(*th_sextw_maddhisi4): New pattern.\n+\t(*th_muls<mode>): New pattern.\n+\t(*th_mulswsi): New pattern.\n+\t(*th_mulswsi2): New pattern.\n+\t(*th_msubhisi4): New pattern.\n+\t(*th_sextw_msubhisi4): New pattern.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* config/riscv/iterators.md (TARGET_64BIT): Add GPR2 iterator.\n+\t* config/riscv/riscv-protos.h (riscv_expand_conditional_move):\n+\tAdd prototype.\n+\t* config/riscv/riscv.cc (riscv_rtx_costs): Add costs for\n+\tXTheadCondMov.\n+\t(riscv_expand_conditional_move): New function.\n+\t(riscv_expand_conditional_move_onesided): New function.\n+\t* config/riscv/riscv.md: Add support for XTheadCondMov.\n+\t* config/riscv/thead.md (*th_cond_mov<GPR:mode><GPR2:mode>): Add\n+\tsupport for XTheadCondMov.\n+\t(*th_cond_gpr_mov<GPR:mode><GPR2:mode>): Likewise.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* config/riscv/bitmanip.md (clzdi2): New expand.\n+\t(clzsi2): New expand.\n+\t(ctz<mode>2): New expand.\n+\t(popcount<mode>2): New expand.\n+\t(<bitmanip_optab>si2): Rename INSN.\n+\t(*<bitmanip_optab>si2): Hide INSN name.\n+\t(<bitmanip_optab>di2): Rename INSN.\n+\t(*<bitmanip_optab>di2): Hide INSN name.\n+\t(rotrsi3): Remove INSN.\n+\t(rotr<mode>3): Add expand.\n+\t(*rotrsi3): New INSN.\n+\t(rotrdi3): Rename INSN.\n+\t(*rotrdi3): Hide INSN name.\n+\t(rotrsi3_sext): Rename INSN.\n+\t(*rotrsi3_sext): Hide INSN name.\n+\t(bswap<mode>2): Remove INSN.\n+\t(bswapdi2): Add expand.\n+\t(bswapsi2): Add expand.\n+\t(*bswap<mode>2): Hide INSN name.\n+\t* config/riscv/riscv.cc (riscv_rtx_costs): Add costs for sign\n+\textraction.\n+\t* config/riscv/riscv.md (extv<mode>): New expand.\n+\t(extzv<mode>): New expand.\n+\t* config/riscv/thead.md (*th_srri<mode>3): New INSN.\n+\t(*th_ext<mode>): New INSN.\n+\t(*th_extu<mode>): New INSN.\n+\t(*th_clz<mode>2): New INSN.\n+\t(*th_rev<mode>2): New INSN.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* config/riscv/riscv.cc (riscv_rtx_costs): Add xthead:tst cost.\n+\t* config/riscv/thead.md (*th_tst<mode>3): New INSN.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* config/riscv/riscv.md: Include thead.md\n+\t* config/riscv/thead.md: New file.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* config/riscv/riscv-cores.def (RISCV_CORE): Add \"thead-c906\".\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* common/config/riscv/riscv-common.cc: Add xthead* extensions.\n+\t* config/riscv/riscv-opts.h (MASK_XTHEADBA): New.\n+\t(MASK_XTHEADBB): New.\n+\t(MASK_XTHEADBS): New.\n+\t(MASK_XTHEADCMO): New.\n+\t(MASK_XTHEADCONDMOV): New.\n+\t(MASK_XTHEADFMEMIDX): New.\n+\t(MASK_XTHEADFMV): New.\n+\t(MASK_XTHEADINT): New.\n+\t(MASK_XTHEADMAC): New.\n+\t(MASK_XTHEADMEMIDX): New.\n+\t(MASK_XTHEADMEMPAIR): New.\n+\t(MASK_XTHEADSYNC): New.\n+\t(TARGET_XTHEADBA): New.\n+\t(TARGET_XTHEADBB): New.\n+\t(TARGET_XTHEADBS): New.\n+\t(TARGET_XTHEADCMO): New.\n+\t(TARGET_XTHEADCONDMOV): New.\n+\t(TARGET_XTHEADFMEMIDX): New.\n+\t(TARGET_XTHEADFMV): New.\n+\t(TARGET_XTHEADINT): New.\n+\t(TARGET_XTHEADMAC): New.\n+\t(TARGET_XTHEADMEMIDX): New.\n+\t(TARGET_XTHEADMEMPAIR): new.\n+\t(TARGET_XTHEADSYNC): New.\n+\t* config/riscv/riscv.opt: Add riscv_xthead_subext.\n+\n+2023-03-15  Hu, Lin1  <lin1.hu@intel.com>\n+\n+\tPR target/109117\n+\t* config/i386/i386-builtin.def (__builtin_ia32_vaesdec_v16qi,\n+\t__builtin_ia32_vaesdeclast_v16qi,__builtin_ia32_vaesenc_v16qi,\n+\t__builtin_ia32_vaesenclast_v16qi): Require OPTION_MASK_ISA_AVX512VL.\n+\n 2023-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/109109"}, {"sha": "b0f638be23e9ea43c1d7e8d8338919e8ebe540e6", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=39b1814c02724d7390e7cc7197b552711f09c494", "patch": "@@ -1 +1 @@\n-20230315\n+20230316"}, {"sha": "a9f3f61d49409dc09461001694e092db81100dc9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=39b1814c02724d7390e7cc7197b552711f09c494", "patch": "@@ -1,3 +1,38 @@\n+2023-03-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103871\n+\tPR c++/98056\n+\t* typeck.cc (cp_build_modify_expr): Allow array initialization of\n+\tDECL_ARTIFICIAL variable.\n+\n+2023-03-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107280\n+\t* constexpr.cc (cxx_eval_store_expression): Strip location wrappers.\n+\n+2023-03-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/58538\n+\t* semantics.cc (check_template_template_default_arg): Check\n+\tmaybe_get_template_decl_from_type_decl.\n+\n+2023-03-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108179\n+\tPR c++/104107\n+\tPR c++/95036\n+\t* pt.cc (coerce_template_template_parms): Use args from\n+\tDECL_CONTEXT (arg_tmpl) instead of outer_args.\n+\n+2023-03-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108179\n+\t* pt.cc\t(coerce_template_template_parms): Take the arg and parm\n+\ttemplates directly.\n+\t(coerce_template_template_parm): Adjust.\n+\t(template_template_parm_bindings_ok_p): Adjust.\n+\t(convert_template_argument): Adjust.\n+\n 2023-03-14  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/96830"}, {"sha": "22d3de49b85516ee01ce0ee4f763decd09461e70", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=39b1814c02724d7390e7cc7197b552711f09c494", "patch": "@@ -1,3 +1,10 @@\n+2023-03-15  Harald Anlauf  <anlauf@gmx.de>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/58331\n+\t* interface.cc (compare_parameter): Adjust check of array dummy\n+\targuments to handle the case of CLASS variables.\n+\n 2023-03-11  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/106945"}, {"sha": "218d6096a86854116dce9fd88822adea2eabaab1", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=39b1814c02724d7390e7cc7197b552711f09c494", "patch": "@@ -1,3 +1,9 @@\n+2023-03-15  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\tPR modula2/109125\n+\t* gm2-libs-ch/dtoa.cc (dtoa_strtod): Replace int with bool.\n+\t* gm2-libs-ch/ldtoa.cc (ldtoa_strtold): Replace int with bool.\n+\n 2023-03-14  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \tPR modula2/109125"}, {"sha": "a52a0e2312b5c94d674bb18779e7bde780d158e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b1814c02724d7390e7cc7197b552711f09c494/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39b1814c02724d7390e7cc7197b552711f09c494", "patch": "@@ -1,3 +1,131 @@\n+2023-03-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103871\n+\tPR c++/98056\n+\t* g++.dg/coroutines/co-await-initlist1.C: New test.\n+\n+2023-03-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/109097\n+\t* c-c++-common/diagnostic-format-sarif-file-1.c: Verify that we\n+\thave an invocation object marked as succeeding, with no\n+\tnotifications.\n+\t* gcc.dg/plugin/crash-test-ice-sarif.c: New test.\n+\t* gcc.dg/plugin/crash-test-ice-stderr.c: New test.\n+\t* gcc.dg/plugin/crash-test-write-though-null-sarif.c: New test.\n+\t* gcc.dg/plugin/crash-test-write-though-null-stderr.c: New test.\n+\t* gcc.dg/plugin/crash_test_plugin.c: New plugin.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add the new plugin\n+\tand test cases.\n+\n+2023-03-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/merge-1.c (dg-options): Use -mno-sse4.\n+\t* gcc.target/i386/sse2-mmx-21.c (dg-options): Ditto.\n+\t* gcc.target/i386/sse-movss-4.c (dg-options):\n+\tUse -mno-sse4.  Simplify scan-assembler-not strings.\n+\t* gcc.target/i386/sse2-movsd-3.c (dg-options): Ditto.\n+\t* gcc.target/i386/sse2-mmx-movss-1.c: New test.\n+\n+2023-03-15  Harald Anlauf  <anlauf@gmx.de>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/58331\n+\t* gfortran.dg/class_dummy_10.f90: New test.\n+\n+2023-03-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107280\n+\t* g++.dg/cpp1z/constexpr-lambda28.C: New test.\n+\n+2023-03-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* g++.dg/warn/Wuse-after-free3.C: Remove expected duplicate\n+\tdiagnostic.\n+\n+2023-03-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/58538\n+\t* g++.dg/template/ttp7.C: Remove expected error.\n+\n+2023-03-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108179\n+\tPR c++/104107\n+\tPR c++/95036\n+\t* g++.dg/template/ttp35.C: New test.\n+\n+2023-03-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/109139\n+\t* gcc.dg/torture/pr109139.c: New testcase.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* gcc.target/riscv/xtheadmempair-1.c: New test.\n+\t* gcc.target/riscv/xtheadmempair-2.c: New test.\n+\t* gcc.target/riscv/xtheadmempair-3.c: New test.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* gcc.target/riscv/xtheadfmv-fmv.c: New test.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* gcc.target/riscv/xtheadmac-mula-muls.c: New test.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* gcc.target/riscv/xtheadcondmov-mveqz-imm-eqz.c: New test.\n+\t* gcc.target/riscv/xtheadcondmov-mveqz-imm-not.c: New test.\n+\t* gcc.target/riscv/xtheadcondmov-mveqz-reg-eqz.c: New test.\n+\t* gcc.target/riscv/xtheadcondmov-mveqz-reg-not.c: New test.\n+\t* gcc.target/riscv/xtheadcondmov-mvnez-imm-cond.c: New test.\n+\t* gcc.target/riscv/xtheadcondmov-mvnez-imm-nez.c: New test.\n+\t* gcc.target/riscv/xtheadcondmov-mvnez-reg-cond.c: New test.\n+\t* gcc.target/riscv/xtheadcondmov-mvnez-reg-nez.c: New test.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* gcc.target/riscv/xtheadbb-ext.c: New test.\n+\t* gcc.target/riscv/xtheadbb-extu-2.c: New test.\n+\t* gcc.target/riscv/xtheadbb-extu.c: New test.\n+\t* gcc.target/riscv/xtheadbb-ff1.c: New test.\n+\t* gcc.target/riscv/xtheadbb-rev.c: New test.\n+\t* gcc.target/riscv/xtheadbb-srri.c: New test.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* gcc.target/riscv/xtheadbs-tst.c: New test.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* gcc.target/riscv/xtheadba-addsl.c: New test.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* gcc.target/riscv/mcpu-thead-c906.c: New test.\n+\n+2023-03-15  Christoph M\u00fcllner  <christoph.muellner@vrull.eu>\n+\n+\t* gcc.target/riscv/xtheadba.c: New test.\n+\t* gcc.target/riscv/xtheadbb.c: New test.\n+\t* gcc.target/riscv/xtheadbs.c: New test.\n+\t* gcc.target/riscv/xtheadcmo.c: New test.\n+\t* gcc.target/riscv/xtheadcondmov.c: New test.\n+\t* gcc.target/riscv/xtheadfmemidx.c: New test.\n+\t* gcc.target/riscv/xtheadfmv.c: New test.\n+\t* gcc.target/riscv/xtheadint.c: New test.\n+\t* gcc.target/riscv/xtheadmac.c: New test.\n+\t* gcc.target/riscv/xtheadmemidx.c: New test.\n+\t* gcc.target/riscv/xtheadmempair.c: New test.\n+\t* gcc.target/riscv/xtheadsync.c: New test.\n+\n+2023-03-15  Hu, Lin1  <lin1.hu@intel.com>\n+\n+\tPR target/109117\n+\t* gcc.target/i386/pr109117-1.c: New test.\n+\n 2023-03-15  Jonathan Yong  <10walls@gmail.com>\n \n \t* gcc.dg/pic-2.c: Fix expected __PIC__ value."}, {"sha": "0b9b6379dcb741acf524b41f3cd81eb785c742a3", "filename": "libgm2/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b1814c02724d7390e7cc7197b552711f09c494/libgm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b1814c02724d7390e7cc7197b552711f09c494/libgm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgm2%2FChangeLog?ref=39b1814c02724d7390e7cc7197b552711f09c494", "patch": "@@ -1,3 +1,11 @@\n+2023-03-15  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\tPR modula2/109125\n+\t* libm2pim/dtoa.cc (TRUE): Remove.\n+\t(FALSE): Remove.  Replace int with bool.\n+\t* libm2pim/ldtoa.cc (TRUE): Remove.\n+\t(FALSE): Remove.  Replace int with bool.\n+\n 2023-03-14  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \tPR modula2/109125"}]}