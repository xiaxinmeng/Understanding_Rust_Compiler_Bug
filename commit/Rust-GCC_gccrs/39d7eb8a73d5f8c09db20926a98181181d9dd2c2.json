{"sha": "39d7eb8a73d5f8c09db20926a98181181d9dd2c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlkN2ViOGE3M2Q1ZjhjMDlkYjIwOTI2YTk4MTgxMTgxZDlkZDJjMg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-18T19:01:06Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-03-03T15:51:58Z"}, "message": "testsuite: aarch64: Add tests for vcvt FP intrinsics\n\nAdd tests for vcvtx* and vcvt_fXX_fXX floating-point Neon intrinsics.\nSince these intrinsics are only supported for AArch64, these tests\nare restricted to only run on AArch64 targets.\n\ngcc/testsuite/ChangeLog:\n\n2021-02-18  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvt_fXX_fXX.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtx.c:\n\tNew test.", "tree": {"sha": "fd1b400d56309a18295ac8410718e22bc42df291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd1b400d56309a18295ac8410718e22bc42df291"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39d7eb8a73d5f8c09db20926a98181181d9dd2c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d7eb8a73d5f8c09db20926a98181181d9dd2c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39d7eb8a73d5f8c09db20926a98181181d9dd2c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d7eb8a73d5f8c09db20926a98181181d9dd2c2/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0fbf7604ed10d688f7e5b2dc4045f37c36b80b"}], "stats": {"total": 183, "additions": 183, "deletions": 0}, "files": [{"sha": "248f37a63a7defda9507172d7a00be0b1a230580", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvt_fXX_fXX.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d7eb8a73d5f8c09db20926a98181181d9dd2c2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt_fXX_fXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d7eb8a73d5f8c09db20926a98181181d9dd2c2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt_fXX_fXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt_fXX_fXX.c?ref=39d7eb8a73d5f8c09db20926a98181181d9dd2c2", "patch": "@@ -0,0 +1,100 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Expected results for vcvt_f64_f32.  */\n+VECT_VAR_DECL (expected, hfloat, 64, 2) [] = { 0x4030000000000000,\n+\t\t\t\t\t       0x402e000000000000};\n+/* Expected results for vcvt_f32_f64.  */\n+VECT_VAR_DECL (expected, hfloat, 32, 2) [] = { 0x3fc00000, 0x40200000 };\n+\n+/* Expected results for vcvt_high_f64_f32.  */\n+VECT_VAR_DECL (expected_high, hfloat, 64, 2) [] = { 0xc02c000000000000,\n+\t\t\t\t\t\t    0xc02a000000000000 };\n+/* Expected results for vcvt_high_f32_f64.  */\n+VECT_VAR_DECL (expected_high, hfloat, 32, 4) [] = { 0x40000000, 0x40000000,\n+\t\t\t\t\t\t    0x3fc00000, 0x40200000 };\n+\n+void\n+exec_vcvt (void)\n+{\n+  clean_results ();\n+\n+#define TEST_MSG \"vcvt_f64_f32\"\n+  {\n+    VECT_VAR_DECL (buffer_src, float, 32, 2) [] = { 16.0, 15.0 };\n+\n+    DECL_VARIABLE (vector_src, float, 32, 2);\n+\n+    VLOAD (vector_src, buffer_src, , float, f, 32, 2);\n+    DECL_VARIABLE (vector_res, float, 64, 2) =\n+\tvcvt_f64_f32 (VECT_VAR (vector_src, float, 32, 2));\n+    vst1q_f64 (VECT_VAR (result, float, 64, 2),\n+\t       VECT_VAR (vector_res, float, 64, 2));\n+\n+    CHECK_FP (TEST_MSG, float, 64, 2, PRIx64, expected, \"\");\n+  }\n+#undef TEST_MSG\n+\n+  clean_results ();\n+\n+#define TEST_MSG \"vcvt_f32_f64\"\n+  {\n+    VECT_VAR_DECL (buffer_src, float, 64, 2) [] = { 1.500000025, 2.500000025 };\n+    DECL_VARIABLE (vector_src, float, 64, 2);\n+\n+    VLOAD (vector_src, buffer_src, q, float, f, 64, 2);\n+    DECL_VARIABLE (vector_res, float, 32, 2) =\n+      vcvt_f32_f64 (VECT_VAR (vector_src, float, 64, 2));\n+    vst1_f32 (VECT_VAR (result, float, 32, 2),\n+\t      VECT_VAR (vector_res, float, 32, 2));\n+\n+    CHECK_FP (TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n+  }\n+#undef TEST_MSG\n+\n+  clean_results ();\n+\n+#define TEST_MSG \"vcvt_high_f64_f32\"\n+  {\n+    DECL_VARIABLE (vector_src, float, 32, 4);\n+    VLOAD (vector_src, buffer, q, float, f, 32, 4);\n+    DECL_VARIABLE (vector_res, float, 64, 2);\n+    VECT_VAR (vector_res, float, 64, 2) =\n+      vcvt_high_f64_f32 (VECT_VAR (vector_src, float, 32, 4));\n+    vst1q_f64 (VECT_VAR (result, float, 64, 2),\n+\t       VECT_VAR (vector_res, float, 64, 2));\n+    CHECK_FP (TEST_MSG, float, 64, 2, PRIx64, expected_high, \"\");\n+  }\n+#undef TEST_MSG\n+\n+  clean_results ();\n+\n+#define TEST_MSG \"vcvt_high_f32_f64\"\n+  {\n+    VECT_VAR_DECL (buffer_src, float, 64, 2) [] = { 1.500000025, 2.500000025 };\n+    DECL_VARIABLE (vector_low, float, 32, 2);\n+    VDUP (vector_low, , float, f, 32, 2, 2.0);\n+\n+    DECL_VARIABLE (vector_src, float, 64, 2);\n+    VLOAD (vector_src, buffer_src, q, float, f, 64, 2);\n+\n+    DECL_VARIABLE (vector_res, float, 32, 4) =\n+      vcvt_high_f32_f64 (VECT_VAR (vector_low, float, 32, 2),\n+\t\t\t VECT_VAR (vector_src, float, 64, 2));\n+    vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t       VECT_VAR (vector_res, float, 32, 4));\n+\n+    CHECK_FP (TEST_MSG, float, 32, 4, PRIx32, expected_high, \"\");\n+  }\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vcvt ();\n+  return 0;\n+}"}, {"sha": "8687204ab97310c731144a33943833219a3c341d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtx.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d7eb8a73d5f8c09db20926a98181181d9dd2c2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d7eb8a73d5f8c09db20926a98181181d9dd2c2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtx.c?ref=39d7eb8a73d5f8c09db20926a98181181d9dd2c2", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Expected results for vcvtx_f32_f64 and vcvtxd_f32_f64.  */\n+VECT_VAR_DECL (expected, hfloat, 32, 2) [] = { 0x3fc00001, 0x40200001 };\n+\n+/* Expected results for vcvtx_high_f32_f64.  */\n+VECT_VAR_DECL (expected_high, hfloat, 32, 4) [] = { 0x40000000, 0x40000000,\n+\t\t\t\t\t\t    0x3fc00001, 0x40200001 };\n+\n+void\n+exec_vcvtx (void)\n+{\n+  clean_results ();\n+\n+#define TEST_MSG \"vcvtx_f32_f64\"\n+  {\n+    VECT_VAR_DECL (buffer_src, float, 64, 2) [] = { 1.500000025, 2.500000025 };\n+    DECL_VARIABLE (vector_src, float, 64, 2);\n+\n+    VLOAD (vector_src, buffer_src, q, float, f, 64, 2);\n+    DECL_VARIABLE (vector_res, float, 32, 2) =\n+      vcvtx_f32_f64 (VECT_VAR (vector_src, float, 64, 2));\n+    vst1_f32 (VECT_VAR (result, float, 32, 2),\n+\t      VECT_VAR (vector_res, float, 32, 2));\n+\n+    CHECK_FP (TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n+  }\n+#undef TEST_MSG\n+\n+  clean_results ();\n+\n+#define TEST_MSG \"vcvtxd_f32_f64\"\n+  {\n+    DECL_VARIABLE (vector_src, float, 32, 2);\n+    VDUP (vector_src, , float, f, 32, 2, 0.0);\n+\n+    DECL_VARIABLE (vector_res, float, 32, 2) =\n+      vset_lane_f32(vcvtxd_f32_f64 (1.500000025),\n+\t\t    VECT_VAR (vector_src, float, 32, 2),\n+\t\t    0);\n+    VECT_VAR (vector_res, float, 32, 2) =\n+      vset_lane_f32(vcvtxd_f32_f64 (2.500000025),\n+\t\t    VECT_VAR (vector_res, float, 32, 2),\n+\t\t    1);\n+    vst1_f32 (VECT_VAR (result, float, 32, 2),\n+\t      VECT_VAR (vector_res, float, 32, 2));\n+\n+    CHECK_FP (TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n+  }\n+#undef TEST_MSG\n+\n+  clean_results ();\n+\n+#define TEST_MSG \"vcvtx_high_f32_f64\"\n+  {\n+    VECT_VAR_DECL (buffer_src, float, 64, 2) [] = { 1.500000025, 2.500000025 };\n+    DECL_VARIABLE (vector_low, float, 32, 2);\n+    VDUP (vector_low, , float, f, 32, 2, 2.0);\n+\n+    DECL_VARIABLE (vector_src, float, 64, 2);\n+    VLOAD (vector_src, buffer_src, q, float, f, 64, 2);\n+\n+    DECL_VARIABLE (vector_res, float, 32, 4) =\n+      vcvtx_high_f32_f64 (VECT_VAR (vector_low, float, 32, 2),\n+\t\t\t  VECT_VAR (vector_src, float, 64, 2));\n+    vst1q_f32 (VECT_VAR (result, float, 32, 4),\n+\t       VECT_VAR (vector_res, float, 32, 4));\n+\n+    CHECK_FP (TEST_MSG, float, 32, 4, PRIx32, expected_high, \"\");\n+  }\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vcvtx ();\n+  return 0;\n+}"}]}