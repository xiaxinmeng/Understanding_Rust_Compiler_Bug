{"sha": "65d8b1ce9fbf4b70cd210d04caf700b1506f617f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVkOGIxY2U5ZmJmNGI3MGNkMjEwZDA0Y2FmNzAwYjE1MDZmNjE3Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-25T23:48:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-25T23:48:05Z"}, "message": "(fold, case BIT_IOR_EXPR): Recognize rotates with variable count.\n\nFrom-SVN: r11614", "tree": {"sha": "fb1889b8ae488c5f7395eb8d4437982b7231fd95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb1889b8ae488c5f7395eb8d4437982b7231fd95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65d8b1ce9fbf4b70cd210d04caf700b1506f617f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d8b1ce9fbf4b70cd210d04caf700b1506f617f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65d8b1ce9fbf4b70cd210d04caf700b1506f617f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d8b1ce9fbf4b70cd210d04caf700b1506f617f/comments", "author": null, "committer": null, "parents": [{"sha": "fda924283fc7d63021aa52553b6ffe10b586d42d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda924283fc7d63021aa52553b6ffe10b586d42d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda924283fc7d63021aa52553b6ffe10b586d42d"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "2f08eadd82b19d30a7c8a40ed37052e1971ac35c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 44, "deletions": 16, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d8b1ce9fbf4b70cd210d04caf700b1506f617f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d8b1ce9fbf4b70cd210d04caf700b1506f617f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=65d8b1ce9fbf4b70cd210d04caf700b1506f617f", "patch": "@@ -3901,6 +3901,9 @@ fold (expr)\n \n     case BIT_IOR_EXPR:\n     bit_ior:\n+      {\n+      register enum tree_code code0, code1;\n+\n       if (integer_all_onesp (arg1))\n \treturn omit_one_operand (type, arg1, arg0);\n       if (integer_zerop (arg1))\n@@ -3909,28 +3912,53 @@ fold (expr)\n       if (t1 != NULL_TREE)\n \treturn t1;\n \n-      /* (a << C1) | (a >> C2) if A is unsigned and C1+C2 is the size of A\n+      /* (A << C1) | (A >> C2) if A is unsigned and C1+C2 is the size of A\n \t is a rotate of A by C1 bits.  */\n+      /* (A << B) | (A >> (Z - B)) if A is unsigned and Z is the size of A\n+\t is a rotate of A by B bits.  */\n \n-      if ((TREE_CODE (arg0) == RSHIFT_EXPR\n-\t   || TREE_CODE (arg0) == LSHIFT_EXPR)\n-\t  && (TREE_CODE (arg1) == RSHIFT_EXPR\n-\t      || TREE_CODE (arg1) == LSHIFT_EXPR)\n-\t  && TREE_CODE (arg0) != TREE_CODE (arg1)\n+      code0 = TREE_CODE (arg0);\n+      code1 = TREE_CODE (arg1);\n+      if (((code0 == RSHIFT_EXPR && code1 == LSHIFT_EXPR)\n+\t  || (code1 == RSHIFT_EXPR && code0 == LSHIFT_EXPR))\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), TREE_OPERAND (arg1,0), 0)\n-\t  && TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (arg0, 0)))\n-\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n-\t  && TREE_CODE (TREE_OPERAND (arg1, 1)) == INTEGER_CST\n-\t  && TREE_INT_CST_HIGH (TREE_OPERAND (arg0, 1)) == 0\n-\t  && TREE_INT_CST_HIGH (TREE_OPERAND (arg1, 1)) == 0\n-\t  && ((TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1))\n-\t       + TREE_INT_CST_LOW (TREE_OPERAND (arg1, 1)))\n+\t  && TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (arg0, 0))))\n+\t{\n+\t  register tree tree01, tree11;\n+\t  register enum tree_code code01, code11;\n+\n+\t  tree01 = TREE_OPERAND (arg0, 1);\n+\t  tree11 = TREE_OPERAND (arg1, 1);\n+\t  code01 = TREE_CODE (tree01);\n+\t  code11 = TREE_CODE (tree11);\n+\t  if (code01 == INTEGER_CST\n+\t    && code11 == INTEGER_CST\n+\t    && TREE_INT_CST_HIGH (tree01) == 0\n+\t    && TREE_INT_CST_HIGH (tree11) == 0\n+\t    && ((TREE_INT_CST_LOW (tree01) + TREE_INT_CST_LOW (tree11))\n \t      == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg0, 0)))))\n-\treturn build (LROTATE_EXPR, type, TREE_OPERAND (arg0, 0),\n-\t\t      TREE_CODE (arg0) == LSHIFT_EXPR\n-\t\t      ? TREE_OPERAND (arg0, 1) : TREE_OPERAND (arg1, 1));\n+\t    return build (LROTATE_EXPR, type, TREE_OPERAND (arg0, 0),\n+\t\t      code0 == LSHIFT_EXPR ? tree01 : tree11);\n+\t  else if (code11 == MINUS_EXPR\n+\t\t&& TREE_CODE (TREE_OPERAND (tree11, 0)) == INTEGER_CST\n+\t\t&& TREE_INT_CST_HIGH (TREE_OPERAND (tree11, 0)) == 0\n+\t\t&& TREE_INT_CST_LOW (TREE_OPERAND (tree11, 0))\n+\t\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg0, 0)))\n+\t\t&& operand_equal_p (tree01, TREE_OPERAND (tree11, 1), 0))\n+\t    return build (code0 == LSHIFT_EXPR ? LROTATE_EXPR : RROTATE_EXPR,\n+\t\t\ttype, TREE_OPERAND (arg0, 0), tree01);\n+\t  else if (code01 == MINUS_EXPR\n+\t\t&& TREE_CODE (TREE_OPERAND (tree01, 0)) == INTEGER_CST\n+\t\t&& TREE_INT_CST_HIGH (TREE_OPERAND (tree01, 0)) == 0\n+\t\t&& TREE_INT_CST_LOW (TREE_OPERAND (tree01, 0))\n+\t\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg0, 0)))\n+\t\t&& operand_equal_p (tree11, TREE_OPERAND (tree01, 1), 0))\n+\t    return build (code0 != LSHIFT_EXPR ? LROTATE_EXPR : RROTATE_EXPR,\n+\t\t\ttype, TREE_OPERAND (arg0, 0), tree11);\n+\t}\n \n       goto associate;\n+      }\n \n     case BIT_XOR_EXPR:\n       if (integer_zerop (arg1))"}]}