{"sha": "cf0fa607b94c0ebdd338221977a81461467877ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YwZmE2MDdiOTRjMGViZGQzMzgyMjE5NzdhODE0NjE0Njc4NzdhZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-07T13:50:08Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-07T13:50:08Z"}, "message": "reload1.c (reload_startobj, [...]): Make them static.\n\n\t* reload1.c (reload_startobj, reload_firstobj,\n\tsomething_needs_operands_changed, reload_inherited,\n\treload_inheritance_insn, reload_override_in,\n\treload_spill_index): Make them static.\n\nFrom-SVN: r96014", "tree": {"sha": "a474e5d86e78b320ffcbddd8cdd6149f94afe0d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a474e5d86e78b320ffcbddd8cdd6149f94afe0d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf0fa607b94c0ebdd338221977a81461467877ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0fa607b94c0ebdd338221977a81461467877ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0fa607b94c0ebdd338221977a81461467877ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0fa607b94c0ebdd338221977a81461467877ad/comments", "author": null, "committer": null, "parents": [{"sha": "fa8718d79986441d176217e893f759b876a69bce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa8718d79986441d176217e893f759b876a69bce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa8718d79986441d176217e893f759b876a69bce"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "c8464642cac155e98fec97d661ae7b2e451782c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fa607b94c0ebdd338221977a81461467877ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fa607b94c0ebdd338221977a81461467877ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf0fa607b94c0ebdd338221977a81461467877ad", "patch": "@@ -8,6 +8,11 @@\n \t* flow.c (regs_live_at_setjmp): Make it static.\n \t* flow.h: Remove the corresponding prototype.\n \n+\t* reload1.c (reload_startobj, reload_firstobj,\n+\tsomething_needs_operands_changed, reload_inherited,\n+\treload_inheritance_insn, reload_override_in,\n+\treload_spill_index): Make them static.\n+\n 2005-03-07  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \t* config/i386/cygwin1.c(mingw_scan): Use xstrdup in calls to putenv."}, {"sha": "32f8ddcd22ea65653948acc066d5e391d11438c4", "filename": "gcc/reload1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0fa607b94c0ebdd338221977a81461467877ad/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0fa607b94c0ebdd338221977a81461467877ad/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=cf0fa607b94c0ebdd338221977a81461467877ad", "patch": "@@ -272,11 +272,11 @@ struct obstack reload_obstack;\n \n /* Points to the beginning of the reload_obstack.  All insn_chain structures\n    are allocated first.  */\n-char *reload_startobj;\n+static char *reload_startobj;\n \n /* The point after all insn_chain structures.  Used to quickly deallocate\n    memory allocated in copy_reloads during calculate_needs_all_insns.  */\n-char *reload_firstobj;\n+static char *reload_firstobj;\n \n /* This points before all local rtl generated by register elimination.\n    Used to quickly free all memory after processing one insn.  */\n@@ -615,7 +615,7 @@ replace_pseudos_in (rtx *loc, enum machine_mode mem_mode, rtx usage)\n /* Set during calculate_needs if an insn needs register elimination.  */\n static int something_needs_elimination;\n /* Set during calculate_needs if an insn needs an operand changed.  */\n-int something_needs_operands_changed;\n+static int something_needs_operands_changed;\n \n /* Nonzero means we couldn't get enough spill regs.  */\n static int failure;\n@@ -4666,19 +4666,19 @@ reloads_conflict (int r1, int r2)\n \f\n /* Indexed by reload number, 1 if incoming value\n    inherited from previous insns.  */\n-char reload_inherited[MAX_RELOADS];\n+static char reload_inherited[MAX_RELOADS];\n \n /* For an inherited reload, this is the insn the reload was inherited from,\n    if we know it.  Otherwise, this is 0.  */\n-rtx reload_inheritance_insn[MAX_RELOADS];\n+static rtx reload_inheritance_insn[MAX_RELOADS];\n \n /* If nonzero, this is a place to get the value of the reload,\n    rather than using reload_in.  */\n-rtx reload_override_in[MAX_RELOADS];\n+static rtx reload_override_in[MAX_RELOADS];\n \n /* For each reload, the hard register number of the register used,\n    or -1 if we did not need a register for this reload.  */\n-int reload_spill_index[MAX_RELOADS];\n+static int reload_spill_index[MAX_RELOADS];\n \n /* Subroutine of free_for_value_p, used to check a single register.\n    START_REGNO is the starting regno of the full reload register"}]}