{"sha": "c285f57a299b0bb73d929bd68c0a083deaebd5d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4NWY1N2EyOTliMGJiNzNkOTI5YmQ2OGMwYTA4M2RlYWViZDVkOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "1999-11-28T08:08:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-11-28T08:08:02Z"}, "message": "combine.c (setup_incoming_promotions): Pass an outgoing regno to FUNCTION_ARG_REGNO_P which it expects.\n\n        * combine.c (setup_incoming_promotions): Pass an outgoing\n        regno to FUNCTION_ARG_REGNO_P which it expects.\n\nFrom-SVN: r30685", "tree": {"sha": "318e3e4a5abeae8e4c30c10c28ada0ede68f002b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/318e3e4a5abeae8e4c30c10c28ada0ede68f002b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c285f57a299b0bb73d929bd68c0a083deaebd5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c285f57a299b0bb73d929bd68c0a083deaebd5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c285f57a299b0bb73d929bd68c0a083deaebd5d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c285f57a299b0bb73d929bd68c0a083deaebd5d8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fad8d4ad6bdd045e2429eed20e80483c1a1c5e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fad8d4ad6bdd045e2429eed20e80483c1a1c5e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fad8d4ad6bdd045e2429eed20e80483c1a1c5e5"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "1dbf3127b0c44657efcb5e3da8040414e48ad6bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c285f57a299b0bb73d929bd68c0a083deaebd5d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c285f57a299b0bb73d929bd68c0a083deaebd5d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c285f57a299b0bb73d929bd68c0a083deaebd5d8", "patch": "@@ -1,3 +1,8 @@\n+1999-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* combine.c (setup_incoming_promotions): Pass an outgoing\n+\tregno to FUNCTION_ARG_REGNO_P which it expects.\n+\n 1999-11-28  Andreas Jaeger  <aj@suse.de>\n \n \t* mips/linux.h (CPP_PREDEFINES): Undefine before redefining."}, {"sha": "8f14d7df92746509a13ba64459d6ee5580cd70e8", "filename": "gcc/combine.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c285f57a299b0bb73d929bd68c0a083deaebd5d8/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c285f57a299b0bb73d929bd68c0a083deaebd5d8/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c285f57a299b0bb73d929bd68c0a083deaebd5d8", "patch": "@@ -768,8 +768,14 @@ setup_incoming_promotions ()\n   int unsignedp;\n   rtx first = get_insns ();\n \n+#ifndef OUTGOING_REGNO\n+#define OUTGOING_REGNO(N) N\n+#endif\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-    if (FUNCTION_ARG_REGNO_P (regno)\n+    /* Check whether this register can hold an incoming pointer\n+       argument.  FUNCTION_ARG_REGNO_P tests outgoing register\n+       numbers, so translate if necessary due to register windows.  */\n+    if (FUNCTION_ARG_REGNO_P (OUTGOING_REGNO (regno))\n \t&& (reg = promoted_input_arg (regno, &mode, &unsignedp)) != 0)\n       {\n \trecord_value_for_reg"}]}