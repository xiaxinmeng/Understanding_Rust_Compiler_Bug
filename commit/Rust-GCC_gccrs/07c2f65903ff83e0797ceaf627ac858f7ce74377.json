{"sha": "07c2f65903ff83e0797ceaf627ac858f7ce74377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdjMmY2NTkwM2ZmODNlMDc5N2NlYWY2MjdhYzg1OGY3Y2U3NDM3Nw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2013-04-24T13:19:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-24T13:19:24Z"}, "message": "gnat_rm.texi: Document pragma Assume.\n\n2013-04-24  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Document pragma Assume.\n\t* sem_prag.adb (Analyze_Pragma, case Assume): Now processed as\n\tpart of Assert, and no longer requires -gnatd.F\n\nFrom-SVN: r198231", "tree": {"sha": "ec7f0d0fcbdadb1b0fa356643c01712691aa2a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec7f0d0fcbdadb1b0fa356643c01712691aa2a6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07c2f65903ff83e0797ceaf627ac858f7ce74377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c2f65903ff83e0797ceaf627ac858f7ce74377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c2f65903ff83e0797ceaf627ac858f7ce74377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c2f65903ff83e0797ceaf627ac858f7ce74377/comments", "author": null, "committer": null, "parents": [{"sha": "7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fab69059ec2423d61dfd7b5b30b0d5fc2173f9a"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "58590108402d9cb5dc0a689beb60711aaf35ddff", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c2f65903ff83e0797ceaf627ac858f7ce74377/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c2f65903ff83e0797ceaf627ac858f7ce74377/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=07c2f65903ff83e0797ceaf627ac858f7ce74377", "patch": "@@ -1,3 +1,9 @@\n+2013-04-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Document pragma Assume.\n+\t* sem_prag.adb (Analyze_Pragma, case Assume): Now processed as\n+\tpart of Assert, and no longer requires -gnatd.F\n+\n 2013-04-24  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Document pragma Assert_And_Cut."}, {"sha": "7a8b85505b4527c4c833204908bff1e10482616b", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c2f65903ff83e0797ceaf627ac858f7ce74377/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c2f65903ff83e0797ceaf627ac858f7ce74377/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=07c2f65903ff83e0797ceaf627ac858f7ce74377", "patch": "@@ -107,6 +107,7 @@ Implementation Defined Pragmas\n * Pragma Assert::\n * Pragma Assert_And_Cut::\n * Pragma Assertion_Policy::\n+* Pragma Assume::\n * Pragma Assume_No_Invalid_Values::\n * Pragma Attribute_Definition::\n * Pragma Ast_Entry::\n@@ -863,6 +864,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Assert::\n * Pragma Assert_And_Cut::\n * Pragma Assertion_Policy::\n+* Pragma Assume::\n * Pragma Assume_No_Invalid_Values::\n * Pragma Attribute_Definition::\n * Pragma Ast_Entry::\n@@ -1336,6 +1338,40 @@ The implementation defined policy @code{Statement_Assertions}\n applies to @code{Assert}, @code{Assert_And_Cut},\n @code{Assume}, and @code{Loop_Invariant}.\n \n+@node Pragma Assume\n+@unnumberedsec Pragma Assume\n+@findex Assume\n+@noindent\n+Syntax:\n+@smallexample @c ada\n+pragma Assume (\n+  boolean_EXPRESSION\n+  [, string_EXPRESSION]);\n+@end smallexample\n+\n+@noindent\n+The effect of this pragma is identical to that of pragma @code{Assert},\n+except that in an @code{Assertion_Policy} pragma, the identifier\n+@code{Assume} is used to control whether it is ignored or checked\n+(or disabled).\n+\n+The intention is that this be used for assumptions about the\n+external environment. So you cannot expect to verify formally\n+or informally that the condition is met, this must be\n+established by examining things outside the program itself.\n+For example, we may have code that depends on the size of\n+@code{Long_Long_Integer} being at least 64. So we could write:\n+\n+@smallexample @c ada\n+pragma Assume (Long_Long_Integer'Size >= 64);\n+@end smallexample\n+\n+@noindent\n+This assumption cannot be proved from the program itself,\n+but it acts as a useful run-time check that the assumption\n+is met, and documents the need to ensure that it is met by\n+reference to information outside the program.\n+\n @node Pragma Assume_No_Invalid_Values\n @unnumberedsec Pragma Assume_No_Invalid_Values\n @findex Assume_No_Invalid_Values"}, {"sha": "c89ca848743c9b4902e1fb2de8011bd3e6481f5e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07c2f65903ff83e0797ceaf627ac858f7ce74377/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07c2f65903ff83e0797ceaf627ac858f7ce74377/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=07c2f65903ff83e0797ceaf627ac858f7ce74377", "patch": "@@ -8828,9 +8828,9 @@ package body Sem_Prag is\n             end if;\n          end Annotate;\n \n-         ---------------------------\n-         -- Assert/Assert_And_Cut --\n-         ---------------------------\n+         ----------------------------------\n+         -- Assert/Assert_And_Cut/Assume --\n+         ----------------------------------\n \n          --  pragma Assert\n          --    (   [Check => ]  Boolean_EXPRESSION\n@@ -8840,7 +8840,14 @@ package body Sem_Prag is\n          --    (   [Check => ]  Boolean_EXPRESSION\n          --     [, [Message =>] Static_String_EXPRESSION]);\n \n-         when Pragma_Assert | Pragma_Assert_And_Cut => Assert : declare\n+         --  pragma Assume\n+         --    (   [Check => ]  Boolean_EXPRESSION\n+         --     [, [Message =>] Static_String_EXPRESSION]);\n+\n+         when Pragma_Assert         |\n+              Pragma_Assert_And_Cut |\n+              Pragma_Assume         =>\n+         Assert : declare\n             Expr : Node_Id;\n             Newa : List_Id;\n \n@@ -9056,35 +9063,6 @@ package body Sem_Prag is\n             end if;\n          end Assertion_Policy;\n \n-         ------------\n-         -- Assume --\n-         ------------\n-\n-         --  pragma Assume (boolean_EXPRESSION);\n-\n-         when Pragma_Assume => Assume : declare\n-         begin\n-            GNAT_Pragma;\n-            S14_Pragma;\n-            Check_Arg_Count (1);\n-\n-            --  Pragma Assume is transformed into pragma Check in the following\n-            --  manner:\n-\n-            --    pragma Check (Assume, Expr);\n-\n-            Rewrite (N,\n-              Make_Pragma (Loc,\n-                Chars                        => Name_Check,\n-                Pragma_Argument_Associations => New_List (\n-                  Make_Pragma_Argument_Association (Loc,\n-                    Expression => Make_Identifier (Loc, Name_Assume)),\n-\n-                  Make_Pragma_Argument_Association (Loc,\n-                    Expression => Relocate_Node (Expression (Arg1))))));\n-            Analyze (N);\n-         end Assume;\n-\n          ------------------------------\n          -- Assume_No_Invalid_Values --\n          ------------------------------"}]}