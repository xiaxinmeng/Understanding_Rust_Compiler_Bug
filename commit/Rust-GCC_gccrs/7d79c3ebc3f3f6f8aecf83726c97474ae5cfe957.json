{"sha": "7d79c3ebc3f3f6f8aecf83726c97474ae5cfe957", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3OWMzZWJjM2YzZjZmOGFlY2Y4MzcyNmM5NzQ3NGFlNWNmZTk1Nw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-09-03T16:25:10Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-09-20T08:12:47Z"}, "message": "Don't record string concatenation data for 'RESERVED_LOCATION_P'\n\n'RESERVED_LOCATION_P' means 'UNKNOWN_LOCATION' or 'BUILTINS_LOCATION'.\nWe're using 'UNKNOWN_LOCATION' as a spare value for 'Empty', so should\nascertain that we don't use it as a key additionally.  Similarly for\n'BUILTINS_LOCATION' that we'd later like to use as a spare value for\n'Deleted'.\n\nAs discussed in the source code comment added, for these we didn't have\nstable behavior anyway.\n\nFollow-up to r239175 (commit 88fa5555a309e5d6c6171b957daaf2f800920869)\n\"On-demand locations within string-literals\".\n\n\tgcc/\n\t* input.c (string_concat_db::record_string_concatenation)\n\t(string_concat_db::get_string_concatenation): Skip for\n\t'RESERVED_LOCATION_P'.\n\tgcc/testsuite/\n\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c: Adjust\n\texpected error diagnostics.", "tree": {"sha": "1f8d1751e7b092c0fd11e6c37cec6434845b98c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f8d1751e7b092c0fd11e6c37cec6434845b98c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d79c3ebc3f3f6f8aecf83726c97474ae5cfe957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d79c3ebc3f3f6f8aecf83726c97474ae5cfe957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d79c3ebc3f3f6f8aecf83726c97474ae5cfe957", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d79c3ebc3f3f6f8aecf83726c97474ae5cfe957/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f92901a508305f291fcf2acae0825379477724de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92901a508305f291fcf2acae0825379477724de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92901a508305f291fcf2acae0825379477724de"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "dd753decfa0d3fa132998700f813f68a9a5f36c8", "filename": "gcc/input.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d79c3ebc3f3f6f8aecf83726c97474ae5cfe957/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d79c3ebc3f3f6f8aecf83726c97474ae5cfe957/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=7d79c3ebc3f3f6f8aecf83726c97474ae5cfe957", "patch": "@@ -1437,6 +1437,11 @@ string_concat_db::record_string_concatenation (int num, location_t *locs)\n   gcc_assert (locs);\n \n   location_t key_loc = get_key_loc (locs[0]);\n+  /* We don't record data for 'RESERVED_LOCATION_P (key_loc)' key values:\n+     any data now recorded under key 'key_loc' would be overwritten by a\n+     subsequent call with the same key 'key_loc'.  */\n+  if (RESERVED_LOCATION_P (key_loc))\n+    return;\n \n   string_concat *concat\n     = new (ggc_alloc <string_concat> ()) string_concat (num, locs);\n@@ -1460,6 +1465,10 @@ string_concat_db::get_string_concatenation (location_t loc,\n   gcc_assert (out_locs);\n \n   location_t key_loc = get_key_loc (loc);\n+  /* We don't record data for 'RESERVED_LOCATION_P (key_loc)' key values; see\n+     discussion in 'string_concat_db::record_string_concatenation'.  */\n+  if (RESERVED_LOCATION_P (key_loc))\n+    return false;\n \n   string_concat **concat = m_table->get (key_loc);\n   if (!concat)"}, {"sha": "8818192eb45435990b96b6ceba50444cd86194d2", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d79c3ebc3f3f6f8aecf83726c97474ae5cfe957/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d79c3ebc3f3f6f8aecf83726c97474ae5cfe957/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c?ref=7d79c3ebc3f3f6f8aecf83726c97474ae5cfe957", "patch": "@@ -332,8 +332,8 @@ pr87652 (const char *stem, int counter)\n \t\t\t\tOFFSET + end_idx);\t\t\\\n   } while (0)\n \n-/* { dg-error \"unable to read substring location: unable to read source line\" \"\" { target c } 329 } */\n-/* { dg-error \"unable to read substring location: failed to get ordinary maps\" \"\" { target c++ } 329 } */\n+/* { dg-error \"unable to read substring location: failed to get ordinary maps\" \"\" { target c } 329 } */\n+/* { dg-error \"unable to read substring location: macro expansion\" \"\" { target c++ } 329 } */\n /* { dg-begin-multiline-output \"\" }\n      __emit_string_literal_range(__FILE__\":%5d: \" format,        \\\n                                  ^~~~~~~~"}]}