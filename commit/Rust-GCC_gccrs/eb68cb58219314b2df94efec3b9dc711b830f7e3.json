{"sha": "eb68cb58219314b2df94efec3b9dc711b830f7e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2OGNiNTgyMTkzMTRiMmRmOTRlZmVjM2I5ZGM3MTFiODMwZjdlMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-05-03T22:25:21Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-05-03T22:25:21Z"}, "message": "cp-tree.def (THUNK_DECL): Remove.\n\n\t* cp-tree.def (THUNK_DECL): Remove.\n\t* cp-tree.h (DECL_THUNK_P): New macro.\n\t(DECL_NON_THUNK_FUNCTION_P): Likewise.\n\t(DECL_EXTERN_C_FUNCTION_P): Likewise.\n\t(SET_DECL_THUNK_P): Likewise.\n\t(DELTA_FROM_VTABLE_ENTRY): Use DECL_THUNK_P.\n\t(FNADDR_FROM_VTABLE_ENTRY): Likewise.\n\t(DECL_MAIN_P): Use DECL_EXTERN_C_FUNCTION_P.\n\t* decl.c (decls_match): Use DECL_EXTERN_C_P.\n\t(duplicate_decls): Likewise.\n\t(pushdecl): Likewise.  Adjust thunk handling.\n\t(grokfndecl): Use DECL_EXTERN_C_P.\n\t* decl2.c (mark_vtable_entries): Use DECL_THUNK_P.\n\t* dump.c (dequeue_and_dump): Remove THUNK_DECL handling.\n\t* except.c (nothrow_libfn_p): Use DECL_EXTERN_C_P.\n\t* expr.c (cplus_expand_expr): Remove THUNK_DECL handling.\n\t* method.c (make_thunk): Use SET_DECL_THUNK_P.  Set\n\tDECL_NO_STATIC_CHAIN.\n\t(emit_thunk): Don't play games with TREE_CODE on thunks.  Don't\n\tset DECL_DESTRUCTOR_P or DECL_CONSTRUCTOR_P on a thunk.\n\t* search.c (covariant_return_p): Remove THUNK_DECL handling.\n\t* ir.texi: Update.\n\nFrom-SVN: r33647", "tree": {"sha": "fb395af6f8b13f1f1cb8bcb18746ecc90790f4c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb395af6f8b13f1f1cb8bcb18746ecc90790f4c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb68cb58219314b2df94efec3b9dc711b830f7e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb68cb58219314b2df94efec3b9dc711b830f7e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb68cb58219314b2df94efec3b9dc711b830f7e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb68cb58219314b2df94efec3b9dc711b830f7e3/comments", "author": null, "committer": null, "parents": [{"sha": "6428983a537afa26f27545f5579eb594bc6407e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6428983a537afa26f27545f5579eb594bc6407e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6428983a537afa26f27545f5579eb594bc6407e0"}], "stats": {"total": 202, "additions": 122, "deletions": 80}, "files": [{"sha": "b2b62a302cec9782805c59d35db83733512eeb76", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eb68cb58219314b2df94efec3b9dc711b830f7e3", "patch": "@@ -1,3 +1,28 @@\n+2000-05-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.def (THUNK_DECL): Remove.\n+\t* cp-tree.h (DECL_THUNK_P): New macro.\n+\t(DECL_NON_THUNK_FUNCTION_P): Likewise.\n+\t(DECL_EXTERN_C_FUNCTION_P): Likewise.\n+\t(SET_DECL_THUNK_P): Likewise.\n+\t(DELTA_FROM_VTABLE_ENTRY): Use DECL_THUNK_P.\n+\t(FNADDR_FROM_VTABLE_ENTRY): Likewise.\n+\t(DECL_MAIN_P): Use DECL_EXTERN_C_FUNCTION_P.\n+\t* decl.c (decls_match): Use DECL_EXTERN_C_P.\n+\t(duplicate_decls): Likewise.\n+\t(pushdecl): Likewise.  Adjust thunk handling.\n+\t(grokfndecl): Use DECL_EXTERN_C_P.\n+\t* decl2.c (mark_vtable_entries): Use DECL_THUNK_P.\n+\t* dump.c (dequeue_and_dump): Remove THUNK_DECL handling.\n+\t* except.c (nothrow_libfn_p): Use DECL_EXTERN_C_P.\n+\t* expr.c (cplus_expand_expr): Remove THUNK_DECL handling.\n+\t* method.c (make_thunk): Use SET_DECL_THUNK_P.  Set\n+\tDECL_NO_STATIC_CHAIN.\n+\t(emit_thunk): Don't play games with TREE_CODE on thunks.  Don't\n+\tset DECL_DESTRUCTOR_P or DECL_CONSTRUCTOR_P on a thunk.\n+\t* search.c (covariant_return_p): Remove THUNK_DECL handling.\n+\t* ir.texi: Update.\n+\t\n 2000-05-01  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* tree.c (walk_tree): Set lineno."}, {"sha": "ead42bef0d16eab06eacbaa660cf8907fc43b4e3", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=eb68cb58219314b2df94efec3b9dc711b830f7e3", "patch": "@@ -158,28 +158,6 @@ DEFTREECODE (TYPENAME_TYPE, \"typename_type\", 't', 0)\n    expression in question.  */\n DEFTREECODE (TYPEOF_TYPE, \"typeof_type\", 't', 0)\n \n-/* A thunk is a stub function.\n-\n-   A THUNK_DECL is an alternate entry point for an ordinary\n-   FUNCTION_DECL.  The address of the ordinary FUNCTION_DECL is given\n-   by the DECL_INITIAL, which is always an ADDR_EXPR whose operand is\n-   a FUNCTION_DECL.  The job of the thunk is to adjust the `this'\n-   pointer before transferring control to the FUNCTION_DECL.\n-\n-   A thunk may perform either, or both, of the following operations:\n-\n-   o Adjust the `this' pointer by a constant offset.\n-   o Adjust the `this' pointer by looking up a vcall-offset\n-     in the vtable.\n-\n-   If both operations are performed, then the constant adjument to\n-   `this' is performed first.\n-\n-   The constant adjustment is given by THUNK_DELTA.  If the\n-   vcall-offset is required, the index into the vtable is given by\n-   THUNK_VCALL_OFFSET.  */\n-DEFTREECODE (THUNK_DECL, \"thunk_decl\", 'd', 0)\n-\n /* A using declaration.  DECL_INITIAL contains the specified scope.  \n    This is not an alias, but is later expanded into multiple aliases.  */\n DEFTREECODE (USING_DECL, \"using_decl\", 'd', 0)"}, {"sha": "3a4e6b31dadd6a4616ce230dafe14d326aa0f0df", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=eb68cb58219314b2df94efec3b9dc711b830f7e3", "patch": "@@ -1294,19 +1294,22 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n   ((CP_TYPE_QUALS (NODE) & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE))\t\\\n    == TYPE_QUAL_CONST)\n \n-#define DELTA_FROM_VTABLE_ENTRY(ENTRY) \\\n-  (!flag_vtable_thunks ? \\\n-     TREE_VALUE (CONSTRUCTOR_ELTS (ENTRY)) \\\n-   : TREE_CODE (TREE_OPERAND ((ENTRY), 0)) != THUNK_DECL ? integer_zero_node \\\n+#define DELTA_FROM_VTABLE_ENTRY(ENTRY)\t\t\t\t\\\n+  (!flag_vtable_thunks ?\t\t\t\t\t\\\n+     TREE_VALUE (CONSTRUCTOR_ELTS (ENTRY))\t\t\t\\\n+   : !DECL_THUNK_P (TREE_OPERAND ((ENTRY), 0)) \t\t\t\\\n+   ? integer_zero_node\t\t\t\t\t\t\\\n    : build_int_2 (THUNK_DELTA (TREE_OPERAND ((ENTRY), 0)), 0))\n \n /* Virtual function addresses can be gotten from a virtual function\n    table entry using this macro.  */\n-#define FNADDR_FROM_VTABLE_ENTRY(ENTRY) \\\n-  (!flag_vtable_thunks ? \\\n-     TREE_VALUE (TREE_CHAIN (TREE_CHAIN (CONSTRUCTOR_ELTS (ENTRY)))) \\\n-   : TREE_CODE (TREE_OPERAND ((ENTRY), 0)) != THUNK_DECL ? (ENTRY) \\\n+#define FNADDR_FROM_VTABLE_ENTRY(ENTRY)\t\t\t\t\t\\\n+  (!flag_vtable_thunks ?\t\t\t\t\t\t\\\n+     TREE_VALUE (TREE_CHAIN (TREE_CHAIN (CONSTRUCTOR_ELTS (ENTRY))))\t\\\n+   : !DECL_THUNK_P (TREE_OPERAND ((ENTRY), 0))\t\t\t\t\\\n+   ? (ENTRY)\t\t\t\t\t\t\t\t\\\n    : DECL_INITIAL (TREE_OPERAND ((ENTRY), 0)))\n+\n #define SET_FNADDR_FROM_VTABLE_ENTRY(ENTRY,VALUE) \\\n   (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (CONSTRUCTOR_ELTS (ENTRY)))) = (VALUE))\n #define FUNCTION_ARG_CHAIN(NODE) (TREE_CHAIN (TYPE_ARG_TYPES (TREE_TYPE (NODE))))\n@@ -2099,6 +2102,27 @@ struct lang_decl\n    must be overridden by derived classes.  */\n #define DECL_NEEDS_FINAL_OVERRIDER_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.needs_final_overrider)\n \n+/* Nonzero if NODE is a thunk, rather than an ordinary function.  */\n+#define DECL_THUNK_P(NODE)\t\t\t\\\n+  (TREE_CODE (NODE) == FUNCTION_DECL\t\t\\\n+   && DECL_LANG_FLAG_7 (NODE))\n+\n+/* Nonzero if NODE is a FUNCTION_DECL, but not a thunk.  */\n+#define DECL_NON_THUNK_FUNCTION_P(NODE)\t\t\t\t\\\n+  (TREE_CODE (NODE) == FUNCTION_DECL && !DECL_THUNK_P (NODE))\n+\n+/* Nonzero if NODE is `extern \"C\"'.  */\n+#define DECL_EXTERN_C_P(NODE) \\\n+  (DECL_LANGUAGE (NODE) == lang_c)\n+\n+/* Nonzero if NODE is an `extern \"C\"' function.  */\n+#define DECL_EXTERN_C_FUNCTION_P(NODE) \\\n+  (DECL_NON_THUNK_FUNCTION_P (NODE) && DECL_EXTERN_C_P (NODE))\n+\n+/* Set DECL_THUNK_P for node.  */\n+#define SET_DECL_THUNK_P(NODE) \\\n+  (DECL_LANG_FLAG_7 (NODE) = 1)\n+\n /* Nonzero if this DECL is the __PRETTY_FUNCTION__ variable in a\n    template function.  */\n #define DECL_PRETTY_FUNCTION_P(NODE) \\\n@@ -2986,6 +3010,27 @@ extern int flag_new_for_scope;\n #define DECL_REALLY_EXTERN(NODE) \\\n   (DECL_EXTERNAL (NODE) && ! DECL_NOT_REALLY_EXTERN (NODE))\n \n+/* A thunk is a stub function.\n+\n+   A thunk is an alternate entry point for an ordinary FUNCTION_DECL.\n+   The address of the ordinary FUNCTION_DECL is given by the\n+   DECL_INITIAL, which is always an ADDR_EXPR whose operand is a\n+   FUNCTION_DECL.  The job of the thunk is to adjust the `this'\n+   pointer before transferring control to the FUNCTION_DECL.\n+\n+   A thunk may perform either, or both, of the following operations:\n+\n+   o Adjust the `this' pointer by a constant offset.\n+   o Adjust the `this' pointer by looking up a vcall-offset\n+     in the vtable.\n+\n+   If both operations are performed, then the constant adjument to\n+   `this' is performed first.\n+\n+   The constant adjustment is given by THUNK_DELTA.  If the\n+   vcall-offset is required, the index into the vtable is given by\n+   THUNK_VCALL_OFFSET.  */\n+\n /* An integer indicating how many bytes should be subtracted from the\n    `this' pointer when this function is called.  */\n #define THUNK_DELTA(DECL) (DECL_CHECK (DECL)->decl.u1.i)\n@@ -3472,8 +3517,7 @@ extern tree original_function_name;\n /* Returns non-zero iff NODE is a declaration for the global function\n    `main'.  */\n #define DECL_MAIN_P(NODE)\t\t\t\t\\\n-   (TREE_CODE (NODE) == FUNCTION_DECL\t\t\t\\\n-    && DECL_LANGUAGE (NODE) == lang_c\t \t\t\\\n+   (DECL_EXTERN_C_FUNCTION_P (NODE)                     \\\n     && DECL_NAME (NODE) != NULL_TREE\t\t\t\\\n     && MAIN_NAME_P (DECL_NAME (NODE)))\n "}, {"sha": "c792e74b441729adf61a7e35214f7a0305030431", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=eb68cb58219314b2df94efec3b9dc711b830f7e3", "patch": "@@ -2927,8 +2927,8 @@ decls_match (newdecl, olddecl)\n       tree p2 = TYPE_ARG_TYPES (f2);\n \n       if (CP_DECL_CONTEXT (newdecl) != CP_DECL_CONTEXT (olddecl)\n-\t  && ! (DECL_LANGUAGE (newdecl) == lang_c\n-\t\t&& DECL_LANGUAGE (olddecl) == lang_c))\n+\t  && ! (DECL_EXTERN_C_P (newdecl)\n+\t\t&& DECL_EXTERN_C_P (olddecl)))\n \treturn 0;\n \n       if (TREE_CODE (f1) != TREE_CODE (f2))\n@@ -2937,15 +2937,17 @@ decls_match (newdecl, olddecl)\n       if (same_type_p (TREE_TYPE (f1), TREE_TYPE (f2)))\n \t{\n \t  if ((! strict_prototypes_lang_c || DECL_BUILT_IN (olddecl))\n-\t      && DECL_LANGUAGE (olddecl) == lang_c\n+\t      && DECL_EXTERN_C_P (olddecl)\n \t      && p2 == NULL_TREE)\n \t    {\n \t      types_match = self_promoting_args_p (p1);\n \t      if (p1 == void_list_node)\n \t\tTREE_TYPE (newdecl) = TREE_TYPE (olddecl);\n \t    }\n-\t  else if (!strict_prototypes_lang_c && DECL_LANGUAGE (olddecl)==lang_c\n-\t\t   && DECL_LANGUAGE (newdecl) == lang_c && p1 == NULL_TREE)\n+\t  else if (!strict_prototypes_lang_c \n+\t\t   && DECL_EXTERN_C_P (olddecl)\n+\t\t   && DECL_EXTERN_C_P (newdecl)\n+\t\t   && p1 == NULL_TREE)\n \t    {\n \t      types_match = self_promoting_args_p (p2);\n \t      TREE_TYPE (newdecl) = TREE_TYPE (olddecl);\n@@ -3094,8 +3096,8 @@ duplicate_decls (newdecl, olddecl)\n \t}\n       else if (!types_match)\n \t{\n-\t  if ((DECL_LANGUAGE (newdecl) == lang_c\n-\t       && DECL_LANGUAGE (olddecl) == lang_c)\n+\t  if ((DECL_EXTERN_C_P (newdecl)\n+\t       && DECL_EXTERN_C_P (olddecl))\n \t      || compparms (TYPE_ARG_TYPES (TREE_TYPE (newdecl)),\n \t\t\t    TYPE_ARG_TYPES (TREE_TYPE (olddecl))))\n \t    {\n@@ -3203,8 +3205,7 @@ duplicate_decls (newdecl, olddecl)\n \t}\n       if (TREE_CODE (newdecl) == FUNCTION_DECL)\n \t{\n-\t  if (DECL_LANGUAGE (newdecl) == lang_c\n-\t      && DECL_LANGUAGE (olddecl) == lang_c)\n+\t  if (DECL_EXTERN_C_P (newdecl) && DECL_EXTERN_C_P (olddecl))\n \t    {\n \t      cp_error (\"declaration of C function `%#D' conflicts with\",\n \t\t\tnewdecl);\n@@ -3801,7 +3802,7 @@ pushdecl (x)\n \t      if (duplicate_decls (x, t))\n \t\treturn t;\n \t    }\n-\t  else if (((TREE_CODE (x) == FUNCTION_DECL && DECL_LANGUAGE (x) == lang_c)\n+\t  else if ((DECL_EXTERN_C_FUNCTION_P (x)\n \t\t    || DECL_FUNCTION_TEMPLATE_P (x))\n \t\t   && is_overloaded_fn (t))\n \t    /* Don't do anything just yet. */;\n@@ -3877,14 +3878,13 @@ pushdecl (x)\n \n       /* If this is a function conjured up by the backend, massage it\n \t so it looks friendly.  */\n-      if (TREE_CODE (x) == FUNCTION_DECL\n-\t  && ! DECL_LANG_SPECIFIC (x))\n+      if (DECL_NON_THUNK_FUNCTION_P (x) && ! DECL_LANG_SPECIFIC (x))\n \t{\n \t  retrofit_lang_decl (x);\n \t  DECL_LANGUAGE (x) = lang_c;\n \t}\n \n-      if (TREE_CODE (x) == FUNCTION_DECL && ! DECL_FUNCTION_MEMBER_P (x))\n+      if (DECL_NON_THUNK_FUNCTION_P (x) && ! DECL_FUNCTION_MEMBER_P (x))\n \t{\n \t  t = push_overloaded_decl (x, PUSH_LOCAL);\n \t  if (t != x)\n@@ -3980,8 +3980,7 @@ pushdecl (x)\n \t\t the mangled name (i.e., NAME) to the DECL.  But, for\n \t\t an `extern \"C\"' function, the mangled name and the\n \t\t ordinary name are the same so we need not do this.  */\n-\t      && !(TREE_CODE (x) == FUNCTION_DECL &&\n-\t\t   DECL_LANGUAGE (x) == lang_c))\n+\t      && !DECL_EXTERN_C_FUNCTION_P (x))\n \t    {\n \t      if (TREE_CODE (x) == FUNCTION_DECL)\n \t\tmy_friendly_assert\n@@ -8711,7 +8710,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \t{\n \t  if (ANON_AGGRNAME_P (TYPE_IDENTIFIER (t)))\n \t    {\n-\t      if (DECL_LANGUAGE (decl) == lang_c)\n+\t      if (DECL_EXTERN_C_P (decl))\n \t\t/* Allow this; it's pretty common in C.  */;\n \t      else\n \t\tcp_pedwarn (\"non-local function `%#D' uses anonymous type\",\n@@ -8802,7 +8801,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \n   /* Plain overloading: will not be grok'd by grokclassfn.  */\n   if (! ctype && ! processing_template_decl\n-      && DECL_LANGUAGE (decl) != lang_c\n+      && !DECL_EXTERN_C_P (decl)\n       && (! DECL_USE_TEMPLATE (decl) || name_mangling_version < 1))\n     set_mangled_name_for_decl (decl);\n "}, {"sha": "fe22c3b5622eb2ac522e7002294aeb91f6860622", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=eb68cb58219314b2df94efec3b9dc711b830f7e3", "patch": "@@ -2338,7 +2338,7 @@ mark_vtable_entries (decl)\n \n       fn = TREE_OPERAND (fnaddr, 0);\n       TREE_ADDRESSABLE (fn) = 1;\n-      if (TREE_CODE (fn) == THUNK_DECL && DECL_EXTERNAL (fn))\n+      if (DECL_THUNK_P (fn) && DECL_EXTERNAL (fn))\n \t{\n \t  DECL_EXTERNAL (fn) = 0;\n \t  emit_thunk (fn);"}, {"sha": "96b0016e9fc396f10e5274b8557b06f774d678f5", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=eb68cb58219314b2df94efec3b9dc711b830f7e3", "patch": "@@ -556,7 +556,6 @@ dequeue_and_dump (di)\n       break;\n \n     case FUNCTION_DECL:\n-    case THUNK_DECL:\n       dump_child (\"mngl\", DECL_ASSEMBLER_NAME (t));\n       dump_child (\"args\", DECL_ARGUMENTS (t));\n       if (DECL_EXTERNAL (t))"}, {"sha": "943972e5ffbcb75578bc1d98f6ecd350dddf4adb", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=eb68cb58219314b2df94efec3b9dc711b830f7e3", "patch": "@@ -1097,7 +1097,7 @@ nothrow_libfn_p (fn)\n \n   if (TREE_PUBLIC (fn)\n       && DECL_EXTERNAL (fn)\n-      && DECL_LANGUAGE (fn) == lang_c)\n+      && DECL_EXTERN_C_P (fn))\n     /* OK */;\n   else\n     /* Can't be a C library function.  */"}, {"sha": "7573a79404c2ebf44e8e10afad70183f8943d0ab", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=eb68cb58219314b2df94efec3b9dc711b830f7e3", "patch": "@@ -128,10 +128,6 @@ cplus_expand_expr (exp, target, tmode, modifier)\n \t\t\t    target, tmode, EXPAND_NORMAL);\n       }\n \n-    case THUNK_DECL:\n-      my_friendly_assert (DECL_RTL (exp) != NULL_RTX, 20000115);\n-      return DECL_RTL (exp);\n-\n     case THROW_EXPR:\n       expand_expr (TREE_OPERAND (exp, 0), const0_rtx, VOIDmode, 0);\n       expand_internal_throw ();"}, {"sha": "9c317e4f5ab4b363525a7900188a67c5ee80f2bc", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=eb68cb58219314b2df94efec3b9dc711b830f7e3", "patch": "@@ -885,21 +885,6 @@ contains the instantiations.  The @code{TREE_VALUE} of each node is an\n instantiation of the class.  The @code{DECL_TEMPLATE_SPECIALIZATIONS}\n contains partial specializations of the class.\n \n-@item THUNK_DECL\n-\n-These nodes represent stub code that adjusts the @code{this} pointer and\n-then jumps to another function.  When the jumped-to function returns,\n-control is transferred directly to the caller, without returning to the\n-thunk.  The first parameter to the thunk is always the @code{this}\n-pointer; the thunk should add @code{THUNK_DELTA} to this value.  (The\n-@code{THUNK_DELTA} is an @code{int}, not an @code{INTEGER_CST}.)  Then,\n-the thunk should jump to the location given by @code{DECL_INITIAL}; this\n-will always be an expression for the address of a function.  \n-\n-You can use @code{DECL_ASSEMBLER_NAME}, @code{TREE_PUBLIC}, and\n-@code{DECL_ARGUMENTS} with a @code{THUNK_DECL}, just as with a\n-@code{FUNCTION_DECL}.\n-\n @item USING_DECL\n \n Back-ends can safely ignore these nodes.\n@@ -1044,6 +1029,19 @@ function.\n This predicate holds if the function is a file-scope finalization\n function.\n \n+@item DECL_THUNK_P\n+This predicate holds if the function is a thunk.\n+\n+These functions represent stub code that adjusts the @code{this} pointer\n+and then jumps to another function.  When the jumped-to function\n+returns, control is transferred directly to the caller, without\n+returning to the thunk.  The first parameter to the thunk is always the\n+@code{this} pointer; the thunk should add @code{THUNK_DELTA} to this\n+value.  (The @code{THUNK_DELTA} is an @code{int}, not an\n+@code{INTEGER_CST}.)  Then, the thunk should jump to the location given\n+by @code{DECL_INITIAL}; this will always be an expression for the\n+address of a function.\n+\n @item GLOBAL_INIT_PRIORITY\n If either @code{DECL_GLOBAL_CTOR_P} or @code{DECL_GLOBAL_DTOR_P} holds,\n then this gives the initialization priority for the function.  The\n@@ -1895,7 +1893,7 @@ by the last @code{EXPR_STMT} in the outermost scope of the\n @end example\n the value is @code{3} while in:\n @example\n-(@{ if (x) { 3; } @})\n+(@{ if (x) @{ 3; @} @})\n @end example\n (represented by a nested @code{COMPOUND_STMT}), there is no value.  If\n the @code{STMT_EXPR} does not yield a value, it's type will be"}, {"sha": "07173d7e7ab59ec4bbc1d11cb05ebc30d6279a59", "filename": "gcc/cp/method.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=eb68cb58219314b2df94efec3b9dc711b830f7e3", "patch": "@@ -2046,7 +2046,7 @@ make_thunk (function, delta, vcall_index)\n   thunk_id = get_identifier (obstack_base (&scratch_obstack));\n \n   thunk = IDENTIFIER_GLOBAL_VALUE (thunk_id);\n-  if (thunk && TREE_CODE (thunk) != THUNK_DECL)\n+  if (thunk && !DECL_THUNK_P (thunk))\n     {\n       cp_error (\"implementation-reserved name `%D' used\", thunk_id);\n       thunk = NULL_TREE;\n@@ -2058,14 +2058,17 @@ make_thunk (function, delta, vcall_index)\n       TREE_READONLY (thunk) = TREE_READONLY (func_decl);\n       TREE_THIS_VOLATILE (thunk) = TREE_THIS_VOLATILE (func_decl);\n       comdat_linkage (thunk);\n-      TREE_SET_CODE (thunk, THUNK_DECL);\n+      SET_DECL_THUNK_P (thunk);\n       DECL_INITIAL (thunk) = function;\n       THUNK_DELTA (thunk) = delta;\n       THUNK_VCALL_OFFSET (thunk) \n \t= vcall_index * int_size_in_bytes (vtable_entry_type);\n       DECL_EXTERNAL (thunk) = 1;\n       DECL_ARTIFICIAL (thunk) = 1;\n       DECL_CONTEXT (thunk) = DECL_CONTEXT (func_decl);\n+      /* Even if this thunk is a member of a local class, we don't\n+\t need a static chain.  */\n+      DECL_NO_STATIC_CHAIN (thunk) = 1;\n       /* So that finish_file can write out any thunks that need to be: */\n       pushdecl_top_level (thunk);\n     }\n@@ -2094,8 +2097,6 @@ emit_thunk (thunk_fndecl)\n   if (current_function_decl)\n     abort ();\n \n-  TREE_SET_CODE (thunk_fndecl, FUNCTION_DECL);\n-\n #ifdef ASM_OUTPUT_MI_THUNK\n   if (!flag_syntax_only && vcall_offset == 0)\n     {\n@@ -2146,6 +2147,11 @@ emit_thunk (thunk_fndecl)\n     DECL_NOT_REALLY_EXTERN (thunk_fndecl) = 1;\n     DECL_SAVED_FUNCTION_DATA (thunk_fndecl) = NULL;\n \n+    /* The thunk itself is not a constructor or destructor, even if\n+       the thing it is thunking to is.  */\n+    DECL_DESTRUCTOR_P (thunk_fndecl) = 0;\n+    DECL_CONSTRUCTOR_P (thunk_fndecl) = 0;\n+\n     push_to_top_level ();\n     start_function (NULL_TREE, thunk_fndecl, NULL_TREE, SF_PRE_PARSED);\n     store_parm_decls ();\n@@ -2207,8 +2213,6 @@ emit_thunk (thunk_fndecl)\n     if (DECL_DEFER_OUTPUT (thunk_fndecl))\n       output_inline_function (thunk_fndecl);\n   }\n-\n-  TREE_SET_CODE (thunk_fndecl, THUNK_DECL);\n }\n \f\n /* Code for synthesizing methods which have default semantics defined.  */"}, {"sha": "9b70d4e4aaa35ffd695584949b08502463c3dac2", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb68cb58219314b2df94efec3b9dc711b830f7e3/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=eb68cb58219314b2df94efec3b9dc711b830f7e3", "patch": "@@ -1989,8 +1989,7 @@ covariant_return_p (brettype, drettype)\n {\n   tree binfo;\n \n-  if (TREE_CODE (brettype) == FUNCTION_DECL\n-      || TREE_CODE (brettype) == THUNK_DECL)\n+  if (TREE_CODE (brettype) == FUNCTION_DECL)\n     {\n       brettype = TREE_TYPE (TREE_TYPE (brettype));\n       drettype = TREE_TYPE (TREE_TYPE (drettype));"}]}