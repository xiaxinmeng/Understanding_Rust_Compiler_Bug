{"sha": "681a5632e0afaa24cc2a3d50a30be08d27dbfd35", "node_id": "C_kwDOANBUbNoAKDY4MWE1NjMyZTBhZmFhMjRjYzJhM2Q1MGEzMGJlMDhkMjdkYmZkMzU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-12-24T03:08:00Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-12-27T15:29:24Z"}, "message": "RISC-V: Fix ICE of visiting non-existing block in CFG.\n\nThis patch is to fix issue of visiting non-existing block of CFG.\nSince blocks index of CFG in GCC are not always contiguous, we will potentially\nvisit a gap block which is no existing in the current CFG.\n\nThis patch can avoid visiting non existing block in CFG.\n\nI noticed such issue in my internal regression of current testsuite\nwhen I change the X86 server machine. This patch fix it:\n17:27:15      job(build_and_test_rv32): Increased FAIL List:\n17:27:15      job(build_and_test_rv32): FAIL: gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-46.c\n-O2 -flto -fno-use-linker-plugin -flto-partition=none  (internal compiler error: Segmentation fault)\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vsetvl.cc\n\t(pass_vsetvl::compute_global_backward_infos): Change to visit CFG.\n\t(pass_vsetvl::prune_expressions): Ditto.", "tree": {"sha": "fdd8a5fd752d14b0fdccc3dfa9e5082df17fc2de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdd8a5fd752d14b0fdccc3dfa9e5082df17fc2de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/681a5632e0afaa24cc2a3d50a30be08d27dbfd35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681a5632e0afaa24cc2a3d50a30be08d27dbfd35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/681a5632e0afaa24cc2a3d50a30be08d27dbfd35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681a5632e0afaa24cc2a3d50a30be08d27dbfd35/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b23c718cd29924a18e8cdd6790a9c04801c5f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b23c718cd29924a18e8cdd6790a9c04801c5f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b23c718cd29924a18e8cdd6790a9c04801c5f5"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "0d66765e09c073404df2d1e243681118ae58aa2c", "filename": "gcc/config/riscv/riscv-vsetvl.cc", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681a5632e0afaa24cc2a3d50a30be08d27dbfd35/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681a5632e0afaa24cc2a3d50a30be08d27dbfd35/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc?ref=681a5632e0afaa24cc2a3d50a30be08d27dbfd35", "patch": "@@ -1962,12 +1962,10 @@ pass_vsetvl::compute_global_backward_infos (void)\n   if (dump_file)\n     {\n       fprintf (dump_file, \"\\n\\nDirty blocks list: \");\n-      for (size_t i = 0; i < m_vector_manager->vector_block_infos.length ();\n-\t   i++)\n-\t{\n-\t  if (m_vector_manager->vector_block_infos[i].reaching_out.dirty_p ())\n-\t    fprintf (dump_file, \"%ld \", i);\n-\t}\n+      for (const bb_info *bb : crtl->ssa->bbs ())\n+\tif (m_vector_manager->vector_block_infos[bb->index ()]\n+\t      .reaching_out.dirty_p ())\n+\t  fprintf (dump_file, \"%d \", bb->index ());\n       fprintf (dump_file, \"\\n\\n\");\n     }\n }\n@@ -1976,15 +1974,16 @@ pass_vsetvl::compute_global_backward_infos (void)\n void\n pass_vsetvl::prune_expressions (void)\n {\n-  for (size_t i = 0; i < m_vector_manager->vector_block_infos.length (); i++)\n+  for (const bb_info *bb : crtl->ssa->bbs ())\n     {\n-      if (m_vector_manager->vector_block_infos[i].local_dem.valid_or_dirty_p ())\n+      if (m_vector_manager->vector_block_infos[bb->index ()]\n+\t    .local_dem.valid_or_dirty_p ())\n \tm_vector_manager->create_expr (\n-\t  m_vector_manager->vector_block_infos[i].local_dem);\n-      if (m_vector_manager->vector_block_infos[i]\n+\t  m_vector_manager->vector_block_infos[bb->index ()].local_dem);\n+      if (m_vector_manager->vector_block_infos[bb->index ()]\n \t    .reaching_out.valid_or_dirty_p ())\n \tm_vector_manager->create_expr (\n-\t  m_vector_manager->vector_block_infos[i].reaching_out);\n+\t  m_vector_manager->vector_block_infos[bb->index ()].reaching_out);\n     }\n \n   if (dump_file)"}]}