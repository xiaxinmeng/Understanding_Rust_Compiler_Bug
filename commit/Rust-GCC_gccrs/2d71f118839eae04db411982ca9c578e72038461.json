{"sha": "2d71f118839eae04db411982ca9c578e72038461", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3MWYxMTg4MzllYWUwNGRiNDExOTgyY2E5YzU3OGU3MjAzODQ2MQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-08-11T11:15:50Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-08-11T11:15:50Z"}, "message": "S/390: Provide low-level builtins with __int128 ops.\n\ngcc/ChangeLog:\n\n2016-08-11  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390-builtin-types.def: Add INT128 types.\n\t* config/s390/s390-builtins.def: Add INT128 variants for the add\n\tsub low-level builtins dealing with TImode.\n\t* config/s390/s390.c (s390_expand_builtin): Allow mode conversions\n\tvia subreg when expanding a builtin.\n\t* config/s390/s390.md: Remove UNSPEC_VEC_ADDC_U128,\n\tUNSPEC_VEC_SUB_U128, and UNSPEC_VEC_SUBC_U128 constants.\n\tFix comment.\n\t* config/s390/vecintrin.h: Adjust builtin names accordingly.\n\t* config/s390/vx-builtins.md (\"vec_add_u128\"): Remove expander.\n\t(\"vec_addc<mode>\", \"vec_addc_u128\"): Merge to\n\t\"vacc<bhfgq>_<mode>\".\n\t(\"vec_adde_u128\"): Rename to \"vacq\". Change mode to TImode.\n\t(\"vec_addec_u128\"): Rename to \"vacccq\". Change mode to TImode.\n\t(\"vec_subc<mode>\", \"vec_subc_u128\"): Merge to\n\t\"vscbi<bhfgq>_<mode>\".\n\t(\"vec_sube_u128\"): Rename to \"vsbiq\". Change mode to TImode.\n\t(\"vec_subec_u128\"): Rename to \"vsbcbiq\". Change mode to TImode.\n\nFrom-SVN: r239361", "tree": {"sha": "c60789103f8d28808cdd153dd6402412ff49c776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c60789103f8d28808cdd153dd6402412ff49c776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d71f118839eae04db411982ca9c578e72038461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d71f118839eae04db411982ca9c578e72038461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d71f118839eae04db411982ca9c578e72038461", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d71f118839eae04db411982ca9c578e72038461/comments", "author": null, "committer": null, "parents": [{"sha": "a9040a94b41b73a50c6545ceece4de4475034530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9040a94b41b73a50c6545ceece4de4475034530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9040a94b41b73a50c6545ceece4de4475034530"}], "stats": {"total": 222, "additions": 112, "deletions": 110}, "files": [{"sha": "32d3ada030f1d2bfb7a13f450b400caa7430b09c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71f118839eae04db411982ca9c578e72038461/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71f118839eae04db411982ca9c578e72038461/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d71f118839eae04db411982ca9c578e72038461", "patch": "@@ -1,3 +1,24 @@\n+2016-08-11  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390-builtin-types.def: Add INT128 types.\n+\t* config/s390/s390-builtins.def: Add INT128 variants for the add\n+\tsub low-level builtins dealing with TImode.\n+\t* config/s390/s390.c (s390_expand_builtin): Allow mode conversions\n+\tvia subreg when expanding a builtin.\n+\t* config/s390/s390.md: Remove UNSPEC_VEC_ADDC_U128,\n+\tUNSPEC_VEC_SUB_U128, and UNSPEC_VEC_SUBC_U128 constants.\n+\tFix comment.\n+\t* config/s390/vecintrin.h: Adjust builtin names accordingly.\n+\t* config/s390/vx-builtins.md (\"vec_add_u128\"): Remove expander.\n+\t(\"vec_addc<mode>\", \"vec_addc_u128\"): Merge to\n+\t\"vacc<bhfgq>_<mode>\".\n+\t(\"vec_adde_u128\"): Rename to \"vacq\". Change mode to TImode.\n+\t(\"vec_addec_u128\"): Rename to \"vacccq\". Change mode to TImode.\n+\t(\"vec_subc<mode>\", \"vec_subc_u128\"): Merge to\n+\t\"vscbi<bhfgq>_<mode>\".\n+\t(\"vec_sube_u128\"): Rename to \"vsbiq\". Change mode to TImode.\n+\t(\"vec_subec_u128\"): Rename to \"vsbcbiq\". Change mode to TImode.\n+\n 2016-08-11  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390-builtins.def: Mark last operand of s390_vlvg*"}, {"sha": "f5fcf986c8fb8ef43518ad635c123f6de078b791", "filename": "gcc/config/s390/s390-builtin-types.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def?ref=2d71f118839eae04db411982ca9c578e72038461", "patch": "@@ -66,6 +66,7 @@ DEF_TYPE (BT_FLT, B_VX, float_type_node, 0)\n DEF_TYPE (BT_UINT, 0, unsigned_type_node, 0)\n DEF_TYPE (BT_VOIDCONST, B_VX, void_type_node, 1)\n DEF_TYPE (BT_ULONG, B_VX, long_unsigned_type_node, 0)\n+DEF_TYPE (BT_INT128, B_VX, intTI_type_node, 0)\n DEF_TYPE (BT_USHORTCONST, B_VX, short_unsigned_type_node, 1)\n DEF_TYPE (BT_SHORTCONST, B_VX, short_integer_type_node, 1)\n DEF_TYPE (BT_INTCONST, B_VX, integer_type_node, 1)\n@@ -171,6 +172,7 @@ DEF_FN_TYPE_1 (BT_FN_V8HI_V8HI, B_VX, BT_V8HI, BT_V8HI)\n DEF_FN_TYPE_1 (BT_FN_VOID_INT, B_HTM, BT_VOID, BT_INT)\n DEF_FN_TYPE_1 (BT_FN_VOID_UINT, 0, BT_VOID, BT_UINT)\n DEF_FN_TYPE_2 (BT_FN_DBL_V2DF_INT, B_VX, BT_DBL, BT_V2DF, BT_INT)\n+DEF_FN_TYPE_2 (BT_FN_INT128_INT128_INT128, B_VX, BT_INT128, BT_INT128, BT_INT128)\n DEF_FN_TYPE_2 (BT_FN_INT_OV4SI_INT, B_VX, BT_INT, BT_OV4SI, BT_INT)\n DEF_FN_TYPE_2 (BT_FN_INT_OV4SI_OV4SI, B_VX, BT_INT, BT_OV4SI, BT_OV4SI)\n DEF_FN_TYPE_2 (BT_FN_INT_UV16QI_UV16QI, B_VX, BT_INT, BT_UV16QI, BT_UV16QI)\n@@ -260,6 +262,7 @@ DEF_FN_TYPE_2 (BT_FN_V8HI_V4SI_V4SI, B_VX, BT_V8HI, BT_V4SI, BT_V4SI)\n DEF_FN_TYPE_2 (BT_FN_V8HI_V8HI_V8HI, B_VX, BT_V8HI, BT_V8HI, BT_V8HI)\n DEF_FN_TYPE_2 (BT_FN_VOID_UINT64PTR_UINT64, B_HTM, BT_VOID, BT_UINT64PTR, BT_UINT64)\n DEF_FN_TYPE_2 (BT_FN_VOID_V2DF_FLTPTR, B_VX, BT_VOID, BT_V2DF, BT_FLTPTR)\n+DEF_FN_TYPE_3 (BT_FN_INT128_INT128_INT128_INT128, B_VX, BT_INT128, BT_INT128, BT_INT128, BT_INT128)\n DEF_FN_TYPE_3 (BT_FN_INT_OV4SI_OV4SI_INTPTR, B_VX, BT_INT, BT_OV4SI, BT_OV4SI, BT_INTPTR)\n DEF_FN_TYPE_3 (BT_FN_OV4SI_INT_OV4SI_INT, B_VX, BT_OV4SI, BT_INT, BT_OV4SI, BT_INT)\n DEF_FN_TYPE_3 (BT_FN_OV4SI_OV4SI_OV4SI_INT, B_VX, BT_OV4SI, BT_OV4SI, BT_OV4SI, BT_INT)"}, {"sha": "4bcdb22d529f5a57abfd7439027d992955f9a220", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=2d71f118839eae04db411982ca9c578e72038461", "patch": "@@ -741,21 +741,27 @@ B_DEF      (s390_vuplhw,                vec_unpacklv8hi,    0,\n B_DEF      (s390_vupllh,                vec_unpackl_lv8hi,  0,                  B_VX,               0,                  BT_FN_UV4SI_UV8HI)\n B_DEF      (s390_vuplf,                 vec_unpacklv4si,    0,                  B_VX,               0,                  BT_FN_V2DI_V4SI)\n B_DEF      (s390_vupllf,                vec_unpackl_lv4si,  0,                  B_VX,               0,                  BT_FN_UV2DI_UV4SI)\n-B_DEF      (s390_vaq,                   vec_add_u128,       0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n \n OB_DEF     (s390_vec_addc,              s390_vec_addc_u8,   s390_vec_addc_u64,  B_VX,               BT_FN_OV4SI_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_addc_u8,           s390_vaccb,         0,                  BT_OV_UV16QI_UV16QI_UV16QI)\n OB_DEF_VAR (s390_vec_addc_u16,          s390_vacch,         0,                  BT_OV_UV8HI_UV8HI_UV8HI)\n OB_DEF_VAR (s390_vec_addc_u32,          s390_vaccf,         0,                  BT_OV_UV4SI_UV4SI_UV4SI)\n OB_DEF_VAR (s390_vec_addc_u64,          s390_vaccg,         0,                  BT_OV_UV2DI_UV2DI_UV2DI)\n \n-B_DEF      (s390_vaccb,                 vec_addcv16qi,      0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n-B_DEF      (s390_vacch,                 vec_addcv8hi,       0,                  B_VX,               0,                  BT_FN_UV8HI_UV8HI_UV8HI)\n-B_DEF      (s390_vaccf,                 vec_addcv4si,       0,                  B_VX,               0,                  BT_FN_UV4SI_UV4SI_UV4SI)\n-B_DEF      (s390_vaccg,                 vec_addcv2di,       0,                  B_VX,               0,                  BT_FN_UV2DI_UV2DI_UV2DI)\n-B_DEF      (s390_vaccq,                 vec_addc_u128,      0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n-B_DEF      (s390_vacq,                  vec_adde_u128,      0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n-B_DEF      (s390_vacccq,                vec_addec_u128,     0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n+B_DEF      (s390_vaccb,                 vaccb_v16qi,        0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n+B_DEF      (s390_vacch,                 vacch_v8hi,         0,                  B_VX,               0,                  BT_FN_UV8HI_UV8HI_UV8HI)\n+B_DEF      (s390_vaccf,                 vaccf_v4si,         0,                  B_VX,               0,                  BT_FN_UV4SI_UV4SI_UV4SI)\n+B_DEF      (s390_vaccg,                 vaccg_v2di,         0,                  B_VX,               0,                  BT_FN_UV2DI_UV2DI_UV2DI)\n+\n+B_DEF      (s390_vec_add_u128,          addti3,             0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n+B_DEF      (s390_vec_addc_u128,         vaccq_ti,           0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n+B_DEF      (s390_vec_adde_u128,         vacq,               0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n+B_DEF      (s390_vec_addec_u128,        vacccq,             0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n+\n+B_DEF      (s390_vaq,                   addti3,             0,                  B_VX,               0,                  BT_FN_INT128_INT128_INT128)\n+B_DEF      (s390_vaccq,                 vaccq_ti,           0,                  B_VX,               0,                  BT_FN_INT128_INT128_INT128)\n+B_DEF      (s390_vacq,                  vacq,               0,                  B_VX,               0,                  BT_FN_INT128_INT128_INT128_INT128)\n+B_DEF      (s390_vacccq,                vacccq,             0,                  B_VX,               0,                  BT_FN_INT128_INT128_INT128_INT128)\n \n OB_DEF     (s390_vec_and,               s390_vec_and_b8,    s390_vec_and_dbl_c, B_VX,               BT_FN_OV4SI_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_and_b8,            s390_vn,            0,                  BT_OV_BV16QI_BV16QI_BV16QI)\n@@ -2051,21 +2057,32 @@ OB_DEF_VAR (s390_vec_srb_dbl_u64,       s390_vsrlb,         0,\n OB_DEF_VAR (s390_vec_srb_dbl_s64,       s390_vsrlb,         0,                  BT_OV_V2DF_V2DF_V2DI)\n \n B_DEF      (s390_vsrlb,                 vec_srbv16qi,       0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n-B_DEF      (s390_vsq,                   vec_sub_u128,       0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n \n OB_DEF     (s390_vec_subc,              s390_vec_subc_u8,   s390_vec_subc_u64,  B_VX,               BT_FN_OV4SI_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_subc_u8,           s390_vscbib,        0,                  BT_OV_UV16QI_UV16QI_UV16QI)\n OB_DEF_VAR (s390_vec_subc_u16,          s390_vscbih,        0,                  BT_OV_UV8HI_UV8HI_UV8HI)\n OB_DEF_VAR (s390_vec_subc_u32,          s390_vscbif,        0,                  BT_OV_UV4SI_UV4SI_UV4SI)\n OB_DEF_VAR (s390_vec_subc_u64,          s390_vscbig,        0,                  BT_OV_UV2DI_UV2DI_UV2DI)\n \n-B_DEF      (s390_vscbib,                vec_subcv16qi,      0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n-B_DEF      (s390_vscbih,                vec_subcv8hi,       0,                  B_VX,               0,                  BT_FN_UV8HI_UV8HI_UV8HI)\n-B_DEF      (s390_vscbif,                vec_subcv4si,       0,                  B_VX,               0,                  BT_FN_UV4SI_UV4SI_UV4SI)\n-B_DEF      (s390_vscbig,                vec_subcv2di,       0,                  B_VX,               0,                  BT_FN_UV2DI_UV2DI_UV2DI)\n-B_DEF      (s390_vscbiq,                vec_subc_u128,      0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n-B_DEF      (s390_vsbiq,                 vec_sube_u128,      0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n-B_DEF      (s390_vsbcbiq,               vec_subec_u128,     0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n+B_DEF      (s390_vscbib,                vscbib_v16qi,       0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n+B_DEF      (s390_vscbih,                vscbih_v8hi,        0,                  B_VX,               0,                  BT_FN_UV8HI_UV8HI_UV8HI)\n+B_DEF      (s390_vscbif,                vscbif_v4si,        0,                  B_VX,               0,                  BT_FN_UV4SI_UV4SI_UV4SI)\n+B_DEF      (s390_vscbig,                vscbig_v2di,        0,                  B_VX,               0,                  BT_FN_UV2DI_UV2DI_UV2DI)\n+\n+/* The builtin definitions requires these to use vector unsigned char.\n+   But we want the GCC low-level builtins and the insn patterns to\n+   allow int128_t and TImode.  So we rely on s390_expand_builtin to\n+   switch modes.  */\n+\n+B_DEF      (s390_vec_sub_u128,          subti3,             0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n+B_DEF      (s390_vec_subc_u128,         vscbiq_ti,          0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n+B_DEF      (s390_vec_sube_u128,         vsbiq,              0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n+B_DEF      (s390_vec_subec_u128,        vsbcbiq,            0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n+\n+B_DEF      (s390_vsq,                   subti3,       \t    0,                  B_VX,               0,                  BT_FN_INT128_INT128_INT128)\n+B_DEF      (s390_vscbiq,                vscbiq_ti,          0,                  B_VX,               0,                  BT_FN_INT128_INT128_INT128)\n+B_DEF      (s390_vsbiq,                 vsbiq,              0,                  B_VX,               0,                  BT_FN_INT128_INT128_INT128_INT128)\n+B_DEF      (s390_vsbcbiq,               vsbcbiq,            0,                  B_VX,               0,                  BT_FN_INT128_INT128_INT128_INT128)\n \n OB_DEF     (s390_vec_sum2,              s390_vec_sum2_u16,  s390_vec_sum2_u32,  B_VX,               BT_FN_OV4SI_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_sum2_u16,          s390_vsumgh,        0,                  BT_OV_UV2DI_UV8HI_UV8HI)"}, {"sha": "1abb30bcd08996ca939fc002525b12b60a3da40b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=2d71f118839eae04db411982ca9c578e72038461", "patch": "@@ -875,6 +875,7 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   arity = 0;\n   FOR_EACH_CALL_EXPR_ARG (arg, iter, exp)\n     {\n+      rtx tmp_rtx;\n       const struct insn_operand_data *insn_op;\n       unsigned int op_flags = all_op_flags & ((1 << O_SHIFT) - 1);\n \n@@ -950,6 +951,20 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t\t\t\t     copy_to_mode_reg (Pmode,\n \t\t\t\t\t       XEXP (op[arity], 0)));\n \t}\n+      /* Some of the builtins require different modes/types than the\n+\t pattern in order to implement a specific API.  Instead of\n+\t adding many expanders which do the mode change we do it here.\n+\t E.g. s390_vec_add_u128 required to have vector unsigned char\n+\t arguments is mapped to addti3.  */\n+      else if (insn_op->mode != VOIDmode\n+\t       && GET_MODE (op[arity]) != VOIDmode\n+\t       && GET_MODE (op[arity]) != insn_op->mode\n+\t       && ((tmp_rtx = simplify_gen_subreg (insn_op->mode, op[arity],\n+\t\t\t\t\t\t   GET_MODE (op[arity]), 0))\n+\t\t   != NULL_RTX))\n+\t{\n+\t  op[arity] = tmp_rtx;\n+\t}\n       else if (GET_MODE (op[arity]) == insn_op->mode\n \t       || GET_MODE (op[arity]) == VOIDmode\n \t       || (insn_op->predicate == address_operand"}, {"sha": "a63cee9ebe039b5e0c0b781058f5b7330d684301", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=2d71f118839eae04db411982ca9c578e72038461", "patch": "@@ -174,7 +174,6 @@\n    UNSPEC_VEC_UNPACKL\n    UNSPEC_VEC_UNPACKL_L\n    UNSPEC_VEC_ADDC\n-   UNSPEC_VEC_ADDC_U128\n    UNSPEC_VEC_ADDE_U128\n    UNSPEC_VEC_ADDEC_U128\n    UNSPEC_VEC_AVG\n@@ -198,9 +197,7 @@\n    UNSPEC_VEC_SRL\n    UNSPEC_VEC_SRLB\n \n-   UNSPEC_VEC_SUB_U128\n    UNSPEC_VEC_SUBC\n-   UNSPEC_VEC_SUBC_U128\n    UNSPEC_VEC_SUBE_U128\n    UNSPEC_VEC_SUBEC_U128\n \n@@ -5711,7 +5708,7 @@\n      (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_ZARCH\"\n {\n-  /* For z13 we have vaq which doesn't set CC.  */\n+  /* For z13 we have vsq which doesn't set CC.  */\n   if (TARGET_VX)\n     {\n       emit_insn (gen_rtx_SET (operands[0],"}, {"sha": "52e46ff381d7673772fdc1091751cbf10ee9d526", "filename": "gcc/config/s390/vecintrin.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvecintrin.h?ref=2d71f118839eae04db411982ca9c578e72038461", "patch": "@@ -73,17 +73,9 @@ __lcbb(const void *ptr, int bndry)\n #define vec_splat_s32 __builtin_s390_vec_splat_s32\n #define vec_splat_u64 __builtin_s390_vec_splat_u64\n #define vec_splat_s64 __builtin_s390_vec_splat_s64\n-#define vec_add_u128 __builtin_s390_vaq\n-#define vec_addc_u128 __builtin_s390_vaccq\n-#define vec_adde_u128 __builtin_s390_vacq\n-#define vec_addec_u128 __builtin_s390_vacccq\n #define vec_checksum __builtin_s390_vcksm\n #define vec_gfmsum_128 __builtin_s390_vgfmg\n #define vec_gfmsum_accum_128 __builtin_s390_vgfmag\n-#define vec_sub_u128 __builtin_s390_vsq\n-#define vec_subc_u128 __builtin_s390_vscbiq\n-#define vec_sube_u128 __builtin_s390_vsbiq\n-#define vec_subec_u128 __builtin_s390_vsbcbiq\n #define vec_ceil(X) __builtin_s390_vfidb((X), 4, 6)\n #define vec_roundp(X) __builtin_s390_vfidb((X), 4, 6)\n #define vec_floor(X) __builtin_s390_vfidb((X), 4, 7)\n@@ -169,6 +161,10 @@ __lcbb(const void *ptr, int bndry)\n #define vec_unpackh __builtin_s390_vec_unpackh\n #define vec_unpackl __builtin_s390_vec_unpackl\n #define vec_addc __builtin_s390_vec_addc\n+#define vec_add_u128 __builtin_s390_vec_add_u128\n+#define vec_addc_u128 __builtin_s390_vec_addc_u128\n+#define vec_adde_u128 __builtin_s390_vec_adde_u128\n+#define vec_addec_u128 __builtin_s390_vec_addec_u128\n #define vec_and __builtin_s390_vec_and\n #define vec_andc __builtin_s390_vec_andc\n #define vec_avg __builtin_s390_vec_avg\n@@ -219,6 +215,10 @@ __lcbb(const void *ptr, int bndry)\n #define vec_srl __builtin_s390_vec_srl\n #define vec_srb __builtin_s390_vec_srb\n #define vec_subc __builtin_s390_vec_subc\n+#define vec_sub_u128 __builtin_s390_vec_sub_u128\n+#define vec_subc_u128 __builtin_s390_vec_subc_u128\n+#define vec_sube_u128 __builtin_s390_vec_sube_u128\n+#define vec_subec_u128 __builtin_s390_vec_subec_u128\n #define vec_sum2 __builtin_s390_vec_sum2\n #define vec_sum_u128 __builtin_s390_vec_sum_u128\n #define vec_sum4 __builtin_s390_vec_sum4"}, {"sha": "444c277d997097811c15283151fce46ef10dd0f9", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 31, "deletions": 82, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71f118839eae04db411982ca9c578e72038461/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=2d71f118839eae04db411982ca9c578e72038461", "patch": "@@ -550,69 +550,38 @@\n \n ; Vector add\n \n-; vaq\n-\n-; zvector builtins uses V16QI operands.  So replace the modes in order\n-; to map this to a TImode add.  We have to keep the V16QI mode\n-; operands in the expander in order to allow some operand type\n-; checking when expanding the builtin.\n-(define_expand \"vec_add_u128\"\n-  [(match_operand:V16QI 0 \"register_operand\" \"\")\n-   (match_operand:V16QI 1 \"register_operand\" \"\")\n-   (match_operand:V16QI 2 \"register_operand\" \"\")]\n-  \"TARGET_VX\"\n-{\n-  rtx op0 = gen_rtx_SUBREG (TImode, operands[0], 0);\n-  rtx op1 = gen_rtx_SUBREG (TImode, operands[1], 0);\n-  rtx op2 = gen_rtx_SUBREG (TImode, operands[2], 0);\n-\n-  emit_insn (gen_rtx_SET (op0,\n-\t\t\t  gen_rtx_PLUS (TImode, op1, op2)));\n-  DONE;\n-})\n-\n ; Vector add compute carry\n \n-(define_insn \"vec_addc<mode>\"\n-  [(set (match_operand:VI_HW                0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\" \"%v\")\n-\t\t       (match_operand:VI_HW 2 \"register_operand\"  \"v\")]\n-\t\t      UNSPEC_VEC_ADDC))]\n+(define_insn \"vacc<bhfgq>_<mode>\"\n+  [(set (match_operand:VIT_HW                 0 \"register_operand\" \"=v\")\n+\t(unspec:VIT_HW [(match_operand:VIT_HW 1 \"register_operand\" \"%v\")\n+\t\t\t(match_operand:VIT_HW 2 \"register_operand\"  \"v\")]\n+\t\t       UNSPEC_VEC_ADDC))]\n   \"TARGET_VX\"\n   \"vacc<bhfgq>\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n-(define_insn \"vec_addc_u128\"\n-  [(set (match_operand:V16QI                0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"%v\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\"  \"v\")]\n-\t\t      UNSPEC_VEC_ADDC_U128))]\n-  \"TARGET_VX\"\n-  \"vaccq\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-\n ; Vector add with carry\n \n-(define_insn \"vec_adde_u128\"\n-  [(set (match_operand:V16QI                0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"%v\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\"  \"v\")\n-\t\t       (match_operand:V16QI 3 \"register_operand\"  \"v\")]\n-\t\t      UNSPEC_VEC_ADDE_U128))]\n+(define_insn \"vacq\"\n+  [(set (match_operand:TI             0 \"register_operand\" \"=v\")\n+\t(unspec:TI [(match_operand:TI 1 \"register_operand\" \"%v\")\n+\t\t    (match_operand:TI 2 \"register_operand\"  \"v\")\n+\t\t    (match_operand:TI 3 \"register_operand\"  \"v\")]\n+\t\t   UNSPEC_VEC_ADDE_U128))]\n   \"TARGET_VX\"\n   \"vacq\\t%v0,%v1,%v2,%v3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n \n ; Vector add with carry compute carry\n \n-(define_insn \"vec_addec_u128\"\n-  [(set (match_operand:V16QI                0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"%v\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\"  \"v\")\n-\t\t       (match_operand:V16QI 3 \"register_operand\"  \"v\")]\n-\t\t      UNSPEC_VEC_ADDEC_U128))]\n+(define_insn \"vacccq\"\n+  [(set (match_operand:TI             0 \"register_operand\" \"=v\")\n+\t(unspec:TI [(match_operand:TI 1 \"register_operand\" \"%v\")\n+\t\t    (match_operand:TI 2 \"register_operand\"  \"v\")\n+\t\t    (match_operand:TI 3 \"register_operand\"  \"v\")]\n+\t\t   UNSPEC_VEC_ADDEC_U128))]\n   \"TARGET_VX\"\n   \"vacccq\\t%v0,%v1,%v2,%v3\"\n   [(set_attr \"op_type\" \"VRR\")])\n@@ -1145,44 +1114,24 @@\n \n ; Vector subtract\n \n-(define_insn \"vec_sub_u128\"\n-  [(set (match_operand:V16QI 0 \"register_operand\"               \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VEC_SUB_U128))]\n-  \"TARGET_VX\"\n-  \"vsq\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-\n ; Vector subtract compute borrow indication\n \n-(define_insn \"vec_subc<mode>\"\n-  [(set (match_operand:VI_HW 0 \"register_operand\"               \"=v\")\n-\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\" \"v\")\n-\t\t       (match_operand:VI_HW 2 \"register_operand\" \"v\")]\n+(define_insn \"vscbi<bhfgq>_<mode>\"\n+  [(set (match_operand:VIT_HW 0 \"register_operand\"                \"=v\")\n+\t(unspec:VIT_HW [(match_operand:VIT_HW 1 \"register_operand\" \"v\")\n+\t\t\t(match_operand:VIT_HW 2 \"register_operand\" \"v\")]\n \t\t      UNSPEC_VEC_SUBC))]\n   \"TARGET_VX\"\n   \"vscbi<bhfgq>\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n-(define_insn \"vec_subc_u128\"\n-  [(set (match_operand:V16QI 0 \"register_operand\"               \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VEC_SUBC_U128))]\n-  \"TARGET_VX\"\n-  \"vscbiq\\t%v0,%v1,%v2\"\n-  [(set_attr \"op_type\" \"VRR\")])\n-\n-\n ; Vector subtract with borrow indication\n \n-(define_insn \"vec_sube_u128\"\n-  [(set (match_operand:V16QI 0 \"register_operand\"               \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")\n-\t\t       (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+(define_insn \"vsbiq\"\n+  [(set (match_operand:TI 0 \"register_operand\"               \"=v\")\n+\t(unspec:TI [(match_operand:TI 1 \"register_operand\"    \"v\")\n+\t\t       (match_operand:TI 2 \"register_operand\" \"v\")\n+\t\t       (match_operand:TI 3 \"register_operand\" \"v\")]\n \t\t      UNSPEC_VEC_SUBE_U128))]\n   \"TARGET_VX\"\n   \"vsbiq\\t%v0,%v1,%v2,%v3\"\n@@ -1191,11 +1140,11 @@\n \n ; Vector subtract with borrow compute and borrow indication\n \n-(define_insn \"vec_subec_u128\"\n-  [(set (match_operand:V16QI 0 \"register_operand\"               \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")\n-\t\t       (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+(define_insn \"vsbcbiq\"\n+  [(set (match_operand:TI 0 \"register_operand\"               \"=v\")\n+\t(unspec:TI [(match_operand:TI 1 \"register_operand\"    \"v\")\n+\t\t       (match_operand:TI 2 \"register_operand\" \"v\")\n+\t\t       (match_operand:TI 3 \"register_operand\" \"v\")]\n \t\t      UNSPEC_VEC_SUBEC_U128))]\n   \"TARGET_VX\"\n   \"vsbcbiq\\t%v0,%v1,%v2,%v3\""}]}