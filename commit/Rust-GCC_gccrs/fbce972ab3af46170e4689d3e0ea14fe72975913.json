{"sha": "fbce972ab3af46170e4689d3e0ea14fe72975913", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJjZTk3MmFiM2FmNDYxNzBlNDY4OWQzZTBlYTE0ZmU3Mjk3NTkxMw==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-08-24T23:23:00Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-08-24T23:23:00Z"}, "message": "re PR target/66609 ([sh] Relative address expressions bind at as-time, even if symbol is weak)\n\nPR target/66609\n* [SH] Take into account weak symbols for pc relative calls/sibcalls.\n\nFrom-SVN: r227155", "tree": {"sha": "0e6fd5f8e7054e4d7b2d3069a503d3e811c3c3b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e6fd5f8e7054e4d7b2d3069a503d3e811c3c3b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbce972ab3af46170e4689d3e0ea14fe72975913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbce972ab3af46170e4689d3e0ea14fe72975913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbce972ab3af46170e4689d3e0ea14fe72975913", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbce972ab3af46170e4689d3e0ea14fe72975913/comments", "author": null, "committer": null, "parents": [{"sha": "2a611178d5a983c09fe176db336b986cbaa4d8a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a611178d5a983c09fe176db336b986cbaa4d8a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a611178d5a983c09fe176db336b986cbaa4d8a3"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "2415b30354ba73b8cf5d29fbef45e65c4bb7fcf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbce972ab3af46170e4689d3e0ea14fe72975913/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbce972ab3af46170e4689d3e0ea14fe72975913/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbce972ab3af46170e4689d3e0ea14fe72975913", "patch": "@@ -1,3 +1,18 @@\n+2015-08-24  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/66609\n+\t* config/sh/sh.c (sh_asm_output_addr_const_extra): Handle\n+\tUNSPEC_PCREL.\n+\t(nonpic_symbol_mentioned_p): Likewise.\n+\t(sh_delegitimize_address): Likewise.\n+\t(sh_function_ok_for_sibcall): Take into account weak symbols.\n+\t(sh_expand_sym_label2reg): New.\n+\t* config/sh/sh-protos.h (sh_expand_sym_label2reg): Declare.\n+\t* config/sh/sh.md (UNSPEC_PCREL): New enum.\n+\t(call_pcrel): Use sh_expand_sym_label2reg.\n+\t(call_value_pcrel, sibcall_pcrel, sibcall_value_pcrel): Likewise.\n+\t(symPCREL_label2reg) New expand.\n+\n 2015-08-24  Aditya Kumar  <aditya.k7@samsung.com>\n \n \t* graphite-poly.c: Change type of region from void* to sese."}, {"sha": "3e4211be4de75afcd3f5da08504bd3aa9078b412", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbce972ab3af46170e4689d3e0ea14fe72975913/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbce972ab3af46170e4689d3e0ea14fe72975913/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=fbce972ab3af46170e4689d3e0ea14fe72975913", "patch": "@@ -159,6 +159,7 @@ extern int sh_eval_treg_value (rtx op);\n extern HOST_WIDE_INT sh_disp_addr_displacement (rtx mem_op);\n extern int sh_max_mov_insn_displacement (machine_mode mode, bool consider_sh2a);\n extern bool sh_movsf_ie_ra_split_p (rtx, rtx, rtx);\n+extern void sh_expand_sym_label2reg (rtx, rtx, rtx, bool);\n \n /* Result value of sh_find_set_of_reg.  */\n struct set_of_reg"}, {"sha": "1442b7fc7907c678256f014f9ef777c0d8952a4e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbce972ab3af46170e4689d3e0ea14fe72975913/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbce972ab3af46170e4689d3e0ea14fe72975913/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=fbce972ab3af46170e4689d3e0ea14fe72975913", "patch": "@@ -1604,6 +1604,10 @@ sh_asm_output_addr_const_extra (FILE *file, rtx x)\n \t  output_addr_const (file, XVECEXP (x, 0, 0));\n \t  fputs (\"@GOTPLT\", file);\n \t  break;\n+\tcase UNSPEC_PCREL:\n+\t  output_addr_const (file, XVECEXP (x, 0, 0));\n+\t  fputs (\"@PCREL\", file);\n+\t  break;\n \tcase UNSPEC_DTPOFF:\n \t  output_addr_const (file, XVECEXP (x, 0, 0));\n \t  fputs (\"@DTPOFF\", file);\n@@ -10441,6 +10445,7 @@ nonpic_symbol_mentioned_p (rtx x)\n \t  || XINT (x, 1) == UNSPEC_DTPOFF\n \t  || XINT (x, 1) == UNSPEC_TPOFF\n \t  || XINT (x, 1) == UNSPEC_PLT\n+\t  || XINT (x, 1) == UNSPEC_PCREL\n \t  || XINT (x, 1) == UNSPEC_SYMOFF\n \t  || XINT (x, 1) == UNSPEC_PCREL_SYMOFF))\n     return false;\n@@ -10714,7 +10719,8 @@ sh_delegitimize_address (rtx orig_x)\n \t\t  rtx symplt = XEXP (XVECEXP (y, 0, 0), 0);\n \n \t\t  if (GET_CODE (symplt) == UNSPEC\n-\t\t      && XINT (symplt, 1) == UNSPEC_PLT)\n+\t\t      && (XINT (symplt, 1) == UNSPEC_PLT\n+\t\t\t  || XINT (symplt, 1) == UNSPEC_PCREL))\n \t\t    return XVECEXP (symplt, 0, 0);\n \t\t}\n \t    }\n@@ -11702,9 +11708,24 @@ sh_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n \t      || crtl->args.info.stack_regs == 0)\n \t  && ! sh_cfun_interrupt_handler_p ()\n \t  && (! flag_pic\n-\t      || (decl && ! TREE_PUBLIC (decl))\n+\t      || (decl && ! (TREE_PUBLIC (decl) || DECL_WEAK (decl)))\n \t      || (decl && DECL_VISIBILITY (decl) != VISIBILITY_DEFAULT)));\n }\n+\n+/* Expand to appropriate sym*_label2reg for SYM and SIBCALL_P.  */\n+void\n+sh_expand_sym_label2reg (rtx reg, rtx sym, rtx lab, bool sibcall_p)\n+{\n+  const_tree decl = SYMBOL_REF_DECL (sym);\n+  bool is_weak = (decl && DECL_P (decl) && DECL_WEAK (decl));\n+\n+  if (!is_weak && SYMBOL_REF_LOCAL_P (sym))\n+    emit_insn (gen_sym_label2reg (reg, sym, lab));\n+  else if (sibcall_p)\n+    emit_insn (gen_symPCREL_label2reg (reg, sym, lab));\n+  else\n+    emit_insn (gen_symPLT_label2reg (reg, sym, lab));\n+}\n \f\n /* Machine specific built-in functions.  */\n "}, {"sha": "4e7cd169f84d71183a695e4cb32d58cb78ef1477", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbce972ab3af46170e4689d3e0ea14fe72975913/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbce972ab3af46170e4689d3e0ea14fe72975913/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=fbce972ab3af46170e4689d3e0ea14fe72975913", "patch": "@@ -135,6 +135,7 @@\n   UNSPEC_PLT\n   UNSPEC_CALLER\n   UNSPEC_GOTPLT\n+  UNSPEC_PCREL\n   UNSPEC_ICACHE\n   UNSPEC_INIT_TRAMP\n   UNSPEC_FCOSA\n@@ -9470,11 +9471,8 @@ label:\n   [(const_int 0)]\n {\n   rtx lab = PATTERN (gen_call_site ());\n-\n-  if (SYMBOL_REF_LOCAL_P (operands[0]))\n-    emit_insn (gen_sym_label2reg (operands[2], operands[0], lab));\n-  else\n-    emit_insn (gen_symPLT_label2reg (operands[2], operands[0], lab));\n+  \n+  sh_expand_sym_label2reg (operands[2], operands[0], lab, false);\n   emit_call_insn (gen_calli_pcrel (operands[2], operands[1], copy_rtx (lab)));\n   DONE;\n }\n@@ -9605,10 +9603,7 @@ label:\n {\n   rtx lab = PATTERN (gen_call_site ());\n \n-  if (SYMBOL_REF_LOCAL_P (operands[1]))\n-    emit_insn (gen_sym_label2reg (operands[3], operands[1], lab));\n-  else\n-    emit_insn (gen_symPLT_label2reg (operands[3], operands[1], lab));\n+  sh_expand_sym_label2reg (operands[3], operands[1], lab, false);\n   emit_call_insn (gen_call_valuei_pcrel (operands[0], operands[3],\n \t\t\t\t\t operands[2], copy_rtx (lab)));\n   DONE;\n@@ -10008,7 +10003,7 @@ label:\n   rtx lab = PATTERN (gen_call_site ());\n   rtx call_insn;\n \n-  emit_insn (gen_sym_label2reg (operands[2], operands[0], lab));\n+  sh_expand_sym_label2reg (operands[2], operands[0], lab, true);\n   call_insn = emit_call_insn (gen_sibcalli_pcrel (operands[2], operands[1],\n \t\t\t\t\t\t  copy_rtx (lab)));\n   SIBLING_CALL_P (call_insn) = 1;\n@@ -10200,7 +10195,7 @@ label:\n   rtx lab = PATTERN (gen_call_site ());\n   rtx call_insn;\n \n-  emit_insn (gen_sym_label2reg (operands[3], operands[1], lab));\n+  sh_expand_sym_label2reg (operands[3], operands[1], lab, true);\n   call_insn = emit_call_insn (gen_sibcall_valuei_pcrel (operands[0],\n \t\t\t\t\t\t\toperands[3],\n \t\t\t\t\t\t\toperands[2],\n@@ -10748,6 +10743,16 @@ label:\n \t\t\t     UNSPEC_SYMOFF)))]\n   \"TARGET_SH1\" \"\")\n \n+(define_expand \"symPCREL_label2reg\"\n+  [(set (match_operand:SI 0 \"\" \"\")\n+\t(const:SI\n+\t (unspec:SI\n+\t  [(const:SI (unspec:SI [(match_operand:SI 1 \"\" \"\")] UNSPEC_PCREL))\n+\t   (const:SI (plus:SI (match_operand:SI 2 \"\" \"\")\n+\t\t\t      (const_int 2)))] UNSPEC_PCREL_SYMOFF)))]\n+  \"TARGET_SH1\"\n+  \"\")\n+\n (define_expand \"symGOT_load\"\n   [(set (match_dup 2) (match_operand 1 \"\" \"\"))\n    (set (match_dup 3) (plus (match_dup 2) (reg PIC_REG)))"}]}