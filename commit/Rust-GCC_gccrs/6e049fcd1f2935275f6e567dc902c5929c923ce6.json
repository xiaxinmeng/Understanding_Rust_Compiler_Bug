{"sha": "6e049fcd1f2935275f6e567dc902c5929c923ce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwNDlmY2QxZjI5MzUyNzVmNmU1NjdkYzkwMmM1OTI5YzkyM2NlNg==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-03-15T10:08:31Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-03-15T10:08:31Z"}, "message": "re PR c++/6440 (template specializations cause ICE)\n\n\tPR c++/6440\n\t* pt.c (maybe_process_partial_specialization): Handle\n\tmember class template when enclosing class template is\n\texplicit specialized.\n\t(most_general_template): Stop looking when DECL is already\n\tspecialized.\n\n\t* g++.dg/template/spec7.C: New test.\n\t* g++.dg/template/spec8.C: Likewise.\n\nFrom-SVN: r64395", "tree": {"sha": "11be24aef8d002da647d36084647c1232523e109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11be24aef8d002da647d36084647c1232523e109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e049fcd1f2935275f6e567dc902c5929c923ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e049fcd1f2935275f6e567dc902c5929c923ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e049fcd1f2935275f6e567dc902c5929c923ce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e049fcd1f2935275f6e567dc902c5929c923ce6/comments", "author": null, "committer": null, "parents": [{"sha": "ef529bb6bb315b607b8f9ef1b914098321a5c07b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef529bb6bb315b607b8f9ef1b914098321a5c07b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef529bb6bb315b607b8f9ef1b914098321a5c07b"}], "stats": {"total": 127, "additions": 127, "deletions": 0}, "files": [{"sha": "46356856b0e811389b5025188c69554317e228c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e049fcd1f2935275f6e567dc902c5929c923ce6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e049fcd1f2935275f6e567dc902c5929c923ce6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6e049fcd1f2935275f6e567dc902c5929c923ce6", "patch": "@@ -1,3 +1,12 @@\n+2003-03-15  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/6440\n+\t* pt.c (maybe_process_partial_specialization): Handle\n+\tmember class template when enclosing class template is\n+\texplicit specialized.\n+\t(most_general_template): Stop looking when DECL is already\n+\tspecialized.\n+\n 2003-03-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/9420"}, {"sha": "410cd8fe025c3cfe37e64ba54975200f0401855f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e049fcd1f2935275f6e567dc902c5929c923ce6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e049fcd1f2935275f6e567dc902c5929c923ce6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6e049fcd1f2935275f6e567dc902c5929c923ce6", "patch": "@@ -776,8 +776,22 @@ void\n maybe_process_partial_specialization (type)\n      tree type;\n {\n+  /* TYPE maybe an ERROR_MARK_NODE.  */\n+  tree context = TYPE_P (type) ? TYPE_CONTEXT (type) : NULL_TREE;\n+\n   if (CLASS_TYPE_P (type) && CLASSTYPE_USE_TEMPLATE (type))\n     {\n+      /* This is for ordinary explicit specialization and partial\n+\t specialization of a template class such as:\n+\n+\t   template <> class C<int>;\n+\n+\t or:\n+\n+\t   template <class T> class C<T*>;\n+\n+\t Make sure that `C<int>' and `C<T*>' are implicit instantiations.  */\n+\n       if (CLASSTYPE_IMPLICIT_INSTANTIATION (type)\n \t  && !COMPLETE_TYPE_P (type))\n \t{\n@@ -795,6 +809,62 @@ maybe_process_partial_specialization (type)\n       else if (CLASSTYPE_TEMPLATE_INSTANTIATION (type))\n \terror (\"specialization of `%T' after instantiation\", type);\n     }\n+  else if (CLASS_TYPE_P (type)\n+\t   && !CLASSTYPE_USE_TEMPLATE (type)\n+\t   && CLASSTYPE_TEMPLATE_INFO (type)\n+\t   && context && CLASS_TYPE_P (context)\n+\t   && CLASSTYPE_TEMPLATE_INFO (context))\n+    {\n+      /* This is for an explicit specialization of member class\n+\t template according to [temp.expl.spec/18]:\n+\n+\t   template <> template <class U> class C<int>::D;\n+\n+\t The context `C<int>' must be an implicit instantiation.\n+\t Otherwise this is just a member class template declared\n+\t earlier like:\n+\n+\t   template <> class C<int> { template <class U> class D; };\n+\t   template <> template <class U> class C<int>::D;\n+\n+\t In the first case, `C<int>::D' is a specialization of `C<T>::D'\n+\t while in the second case, `C<int>::D' is a primary template\n+\t and `C<T>::D' may not exist.  */\n+\n+      if (CLASSTYPE_IMPLICIT_INSTANTIATION (context)\n+\t  && !COMPLETE_TYPE_P (type))\n+\t{\n+\t  tree t;\n+\n+\t  if (current_namespace\n+\t      != decl_namespace_context (CLASSTYPE_TI_TEMPLATE (type)))\n+\t    {\n+\t      pedwarn (\"specializing `%#T' in different namespace\", type);\n+\t      cp_pedwarn_at (\"  from definition of `%#D'\",\n+\t\t\t     CLASSTYPE_TI_TEMPLATE (type));\n+\t    }\n+\n+\t  /* Check for invalid specialization after instantiation:\n+\n+\t       template <> template <> class C<int>::D<int>;\n+\t       template <> template <class U> class C<int>::D;  */\n+\n+\t  for (t = DECL_TEMPLATE_INSTANTIATIONS\n+\t\t (most_general_template (CLASSTYPE_TI_TEMPLATE (type)));\n+\t       t; t = TREE_CHAIN (t))\n+\t    if (TREE_VALUE (t) != type\n+\t\t&& TYPE_CONTEXT (TREE_VALUE (t)) == context)\n+\t      error (\"specialization `%T' after instantiation `%T'\",\n+\t\t     type, TREE_VALUE (t));\n+\n+\t  /* Mark TYPE as a specialization.  And as a result, we only\n+\t     have one level of template argument for the innermost\n+\t     class template.  */\n+\t  SET_CLASSTYPE_TEMPLATE_SPECIALIZATION (type);\n+\t  CLASSTYPE_TI_ARGS (type)\n+\t    = INNERMOST_TEMPLATE_ARGS (CLASSTYPE_TI_ARGS (type));\n+\t}\n+    }\n   else if (processing_specialization)\n     error (\"explicit specialization of non-template `%T'\", type);\n }\n@@ -10124,6 +10194,10 @@ most_general_template (decl)\n       if (TREE_CODE (DECL_TI_TEMPLATE (decl)) != TEMPLATE_DECL)\n \tbreak;\n \n+      if (CLASS_TYPE_P (TREE_TYPE (decl))\n+\t  && CLASSTYPE_TEMPLATE_SPECIALIZATION (TREE_TYPE (decl)))\n+\tbreak;\n+\n       /* Stop if we run into an explicitly specialized class template.  */\n       if (!DECL_NAMESPACE_SCOPE_P (decl)\n \t  && DECL_CONTEXT (decl)"}, {"sha": "f3222e6844db6140fa9dbcb3e9efcb4a5c368087", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e049fcd1f2935275f6e567dc902c5929c923ce6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e049fcd1f2935275f6e567dc902c5929c923ce6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e049fcd1f2935275f6e567dc902c5929c923ce6", "patch": "@@ -1,3 +1,9 @@\n+2003-03-15  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/6440\n+\t* g++.dg/template/spec7.C: New test.\n+\t* g++.dg/template/spec8.C: Likewise.\n+\n 2003-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/20030313-1.c: New test."}, {"sha": "18d3c90c45e9a0f8ef30e408dcb9e00bddd0db55", "filename": "gcc/testsuite/g++.dg/template/spec7.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e049fcd1f2935275f6e567dc902c5929c923ce6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e049fcd1f2935275f6e567dc902c5929c923ce6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec7.C?ref=6e049fcd1f2935275f6e567dc902c5929c923ce6", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+\n+// PR c++/6440: Specialization of member class template.\n+\n+template<class T> struct A\n+{\n+  template<class U> struct B {};\n+}; \n+\n+template<> template<class U>\n+struct A<int>::B\n+{\n+  void f();\n+  template <class V> void g(V);\n+};\n+\n+template<> template<> template <class V> void A<int>::B<char>::g(V)\n+{\n+}\n+\n+A<int>::B<char> b;\n+\n+int h()\n+{\n+  b.f();\n+  b.g(0);\n+}"}, {"sha": "26d207b81315565b47f18bbfbf089dd936854a70", "filename": "gcc/testsuite/g++.dg/template/spec8.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e049fcd1f2935275f6e567dc902c5929c923ce6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e049fcd1f2935275f6e567dc902c5929c923ce6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec8.C?ref=6e049fcd1f2935275f6e567dc902c5929c923ce6", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+\n+// Specialization of member class template.\n+\n+template<class T1> struct A\n+{\n+  template<class T2> struct B {};\n+}; \n+\n+template <> template <> struct A<int>::B<int> {};\n+template <> template <class U> struct A<int>::B {}; // { dg-error \"specialization\" }"}]}