{"sha": "7d898fa2ca78c072f1a8dee246feac5cb4011ff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q4OThmYTJjYTc4YzA3MmYxYThkZWUyNDZmZWFjNWNiNDAxMWZmMg==", "commit": {"author": {"name": "Jim Blandy", "email": "jimb@red-bean.com", "date": "2006-03-13T19:17:46Z"}, "committer": {"name": "Jim Blandy", "email": "jimb@gcc.gnu.org", "date": "2006-03-13T19:17:46Z"}, "message": "pex-common.h (struct pex_obj): Doc fixes.\n\n2006-03-12  Jim Blandy  <jimb@red-bean.com>\n\n\t* pex-common.h (struct pex_obj): Doc fixes.\n\nFrom-SVN: r112022", "tree": {"sha": "1432454202d842cf7c02e91fc1b1615a7dd88807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1432454202d842cf7c02e91fc1b1615a7dd88807"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d898fa2ca78c072f1a8dee246feac5cb4011ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d898fa2ca78c072f1a8dee246feac5cb4011ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d898fa2ca78c072f1a8dee246feac5cb4011ff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d898fa2ca78c072f1a8dee246feac5cb4011ff2/comments", "author": {"login": "jimblandy", "id": 751272, "node_id": "MDQ6VXNlcjc1MTI3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/751272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimblandy", "html_url": "https://github.com/jimblandy", "followers_url": "https://api.github.com/users/jimblandy/followers", "following_url": "https://api.github.com/users/jimblandy/following{/other_user}", "gists_url": "https://api.github.com/users/jimblandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimblandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimblandy/subscriptions", "organizations_url": "https://api.github.com/users/jimblandy/orgs", "repos_url": "https://api.github.com/users/jimblandy/repos", "events_url": "https://api.github.com/users/jimblandy/events{/privacy}", "received_events_url": "https://api.github.com/users/jimblandy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddbbee51ec9a4fac5f046d396f73208751045085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddbbee51ec9a4fac5f046d396f73208751045085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddbbee51ec9a4fac5f046d396f73208751045085"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "68f6f38592381cec8a96cf765896f8f1b892ab6e", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d898fa2ca78c072f1a8dee246feac5cb4011ff2/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d898fa2ca78c072f1a8dee246feac5cb4011ff2/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=7d898fa2ca78c072f1a8dee246feac5cb4011ff2", "patch": "@@ -1,3 +1,7 @@\n+2006-03-12  Jim Blandy  <jimb@red-bean.com>\n+\n+\t* pex-common.h (struct pex_obj): Doc fixes.\n+\n 2006-03-11  Jim Blandy  <jimb@red-bean.com>\n \n \t* functions.texi: Regenerate."}, {"sha": "b70b38d9736428d92b2c20e21349d2af1a239a61", "filename": "libiberty/pex-common.h", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d898fa2ca78c072f1a8dee246feac5cb4011ff2/libiberty%2Fpex-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d898fa2ca78c072f1a8dee246feac5cb4011ff2/libiberty%2Fpex-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpex-common.h?ref=7d898fa2ca78c072f1a8dee246feac5cb4011ff2", "patch": "@@ -61,7 +61,7 @@ struct pex_obj\n   int next_input_name_allocated;\n   /* Number of child processes.  */\n   int count;\n-  /* PIDs of child processes; array allocated using maloc.  */\n+  /* PIDs of child processes; array allocated using malloc.  */\n   long *children;\n   /* Exit statuses of child processes; array allocated using malloc.  */\n   int *status;\n@@ -88,36 +88,39 @@ struct pex_funcs\n {\n   /* Open file NAME for reading.  If BINARY is non-zero, open in\n      binary mode.  Return >= 0 on success, -1 on error.  */\n-  int (*open_read) (struct pex_obj *, const char *name, int binary);\n+  int (*open_read) (struct pex_obj *, const char */* name */, int /* binary */);\n   /* Open file NAME for writing.  If BINARY is non-zero, open in\n      binary mode.  Return >= 0 on success, -1 on error.  */\n-  int (*open_write) (struct pex_obj *, const char *name, int binary);\n+  int (*open_write) (struct pex_obj *, const char */* name */,\n+                     int /* binary */);\n   /* Execute a child process.  FLAGS, EXECUTABLE, ARGV, ERR are from\n      pex_run.  IN, OUT, ERRDES are each a descriptor, from open_read,\n      open_write, or pipe, or they are one of STDIN_FILE_NO,\n      STDOUT_FILE_NO or STDERR_FILE_NO; if not STD*_FILE_NO, they\n      should be closed.  The function should handle the\n      PEX_STDERR_TO_STDOUT flag.  Return >= 0 on success, or -1 on\n      error and set *ERRMSG and *ERR.  */\n-  long (*exec_child) (struct pex_obj *, int flags, const char *executable,\n-\t\t      char * const * argv, int in, int out, int errdes,\n-\t\t      const char **errmsg, int *err);\n+  long (*exec_child) (struct pex_obj *, int /* flags */,\n+                      const char */* executable */, char * const * /* argv */,\n+                      int /* in */, int /* out */, int /* errdes */,\n+\t\t      const char **/* errmsg */, int */* err */);\n   /* Close a descriptor.  Return 0 on success, -1 on error.  */\n   int (*close) (struct pex_obj *, int);\n   /* Wait for a child to complete, returning exit status in *STATUS\n      and time in *TIME (if it is not null).  CHILD is from fork.  DONE\n      is 1 if this is called via pex_free.  ERRMSG and ERR are as in\n      fork.  Return 0 on success, -1 on error.  */\n-  int (*wait) (struct pex_obj *, long, int *status, struct pex_time *time,\n-\t       int done, const char **errmsg, int *err);\n+  int (*wait) (struct pex_obj *, long /* child */, int * /* status */,\n+               struct pex_time * /* time */, int /* done */,\n+               const char ** /* errmsg */, int * /* err */);\n   /* Create a pipe (only called if PEX_USE_PIPES is set) storing two\n-     descriptin in *P.  If BINARY is non-zero, open in binary mode.\n-     Return 0 on success, -1 on error.  */\n-  int (*pipe) (struct pex_obj *, int *p, int binary);\n+     descriptors in P[0] and P[1].  If BINARY is non-zero, open in\n+     binary mode.  Return 0 on success, -1 on error.  */\n+  int (*pipe) (struct pex_obj *, int * /* p */, int /* binary */);\n   /* Get a FILE pointer to read from a file descriptor (only called if\n      PEX_USE_PIPES is set).  If BINARY is non-zero, open in binary\n      mode.  Return pointer on success, NULL on error.  */\n-  FILE * (*fdopenr) (struct pex_obj *, int fd, int binary);\n+  FILE * (*fdopenr) (struct pex_obj *, int /* fd */, int /* binary */);\n   /* Free any system dependent data associated with OBJ.  May be\n      NULL if there is nothing to do.  */\n   void (*cleanup) (struct pex_obj *);"}]}