{"sha": "92898b2903528fc3747d561f26df7f6d70d0a3b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4OThiMjkwMzUyOGZjMzc0N2Q1NjFmMjZkZjdmNmQ3MGQwYTNiMw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-11T11:01:52Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-13T09:54:32Z"}, "message": "Fix bug parsing while loop expressions\n\nIf a while loop is part of an expression it needs to know it does not need\nto skip token.", "tree": {"sha": "ae7eaa341663e658907c0e6bd74a275f7e901d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae7eaa341663e658907c0e6bd74a275f7e901d13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92898b2903528fc3747d561f26df7f6d70d0a3b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92898b2903528fc3747d561f26df7f6d70d0a3b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92898b2903528fc3747d561f26df7f6d70d0a3b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92898b2903528fc3747d561f26df7f6d70d0a3b3/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6405f1438b2868418f94cc1673001ca2b50a65c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6405f1438b2868418f94cc1673001ca2b50a65c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6405f1438b2868418f94cc1673001ca2b50a65c"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "bd41ce364ed9948b20589a54f6873d06bbe16042", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92898b2903528fc3747d561f26df7f6d70d0a3b3/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92898b2903528fc3747d561f26df7f6d70d0a3b3/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=92898b2903528fc3747d561f26df7f6d70d0a3b3", "patch": "@@ -2666,7 +2666,7 @@ Parser<ManagedTokenSource>::parse_generic_params ()\n \t}\n \n       std::unique_ptr<AST::LifetimeParam> param (\n-\tnew AST::LifetimeParam (std::move (lifetime), \n+\tnew AST::LifetimeParam (std::move (lifetime),\n \t\t\t\tstd::move (lifetime_bounds),\n \t\t\t\tstd::move (outer_attr), locus));\n       generic_params.push_back (std::move (param));\n@@ -3167,9 +3167,9 @@ Parser<ManagedTokenSource>::parse_lifetime_param ()\n       // TODO: have end token passed in?\n     }\n \n-  return AST::LifetimeParam (std::move (lifetime), \n-\t\t\t     std::move (lifetime_bounds),\n-\t\t\t     std::move (outer_attr), lifetime_tok->get_locus ());\n+  return AST::LifetimeParam (std::move (lifetime), std::move (lifetime_bounds),\n+\t\t\t     std::move (outer_attr),\n+\t\t\t     lifetime_tok->get_locus ());\n }\n \n // Parses type generic parameters. Will also consume any trailing comma.\n@@ -3698,7 +3698,7 @@ Parser<ManagedTokenSource>::parse_trait_bound ()\n    * handle this) */\n   std::vector<AST::LifetimeParam> for_lifetimes;\n   if (lexer.peek_token ()->get_id () == FOR)\n-      for_lifetimes = parse_for_lifetimes ();\n+    for_lifetimes = parse_for_lifetimes ();\n \n   // handle TypePath\n   AST::TypePath type_path = parse_type_path ();\n@@ -7879,14 +7879,30 @@ Parser<ManagedTokenSource>::parse_loop_expr (\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::WhileLoopExpr>\n Parser<ManagedTokenSource>::parse_while_loop_expr (\n-  std::vector<AST::Attribute> outer_attrs, AST::LoopLabel label)\n+  std::vector<AST::Attribute> outer_attrs, AST::LoopLabel label,\n+  bool pratt_parse)\n {\n   Location locus = Linemap::unknown_location ();\n-  if (label.is_error ())\n-    locus = lexer.peek_token ()->get_locus ();\n+  if (!pratt_parse)\n+    {\n+      if (label.is_error ())\n+\tlocus = lexer.peek_token ()->get_locus ();\n+      else\n+\tlocus = label.get_locus ();\n+\n+      if (!skip_token (WHILE))\n+\t{\n+\t  skip_after_end_block ();\n+\t  return nullptr;\n+\t}\n+    }\n   else\n-    locus = label.get_locus ();\n-  skip_token (WHILE);\n+    {\n+      if (label.is_error ())\n+\tlocus = lexer.peek_token ()->get_locus () - 1;\n+      else\n+\tlocus = label.get_locus ();\n+    }\n \n   // ensure it isn't a while let loop\n   if (lexer.peek_token ()->get_id () == LET)\n@@ -12454,6 +12470,9 @@ Parser<ManagedTokenSource>::null_denotation (\n     case LOOP:\n       return parse_loop_expr (std::move (outer_attrs), AST::LoopLabel::error (),\n \t\t\t      true);\n+    case WHILE:\n+      return parse_while_loop_expr (std::move (outer_attrs),\n+\t\t\t\t    AST::LoopLabel::error (), true);\n     case MATCH_TOK:\n       // also an expression with block\n       return parse_match_expr (std::move (outer_attrs), true);"}, {"sha": "070806847d58e6fcbccabc26214ce985107418fd", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92898b2903528fc3747d561f26df7f6d70d0a3b3/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92898b2903528fc3747d561f26df7f6d70d0a3b3/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=92898b2903528fc3747d561f26df7f6d70d0a3b3", "patch": "@@ -504,10 +504,9 @@ template <typename ManagedTokenSource> class Parser\n   std::unique_ptr<AST::LoopExpr> parse_loop_expr (\n     std::vector<AST::Attribute> outer_attrs = std::vector<AST::Attribute> (),\n     AST::LoopLabel label = AST::LoopLabel::error (), bool pratt_parse = false);\n-  std::unique_ptr<AST::WhileLoopExpr>\n-  parse_while_loop_expr (std::vector<AST::Attribute> outer_attrs\n-\t\t\t = std::vector<AST::Attribute> (),\n-\t\t\t AST::LoopLabel label = AST::LoopLabel::error ());\n+  std::unique_ptr<AST::WhileLoopExpr> parse_while_loop_expr (\n+    std::vector<AST::Attribute> outer_attrs = std::vector<AST::Attribute> (),\n+    AST::LoopLabel label = AST::LoopLabel::error (), bool pratt_parse = false);\n   std::unique_ptr<AST::WhileLetLoopExpr>\n   parse_while_let_loop_expr (std::vector<AST::Attribute> outer_attrs\n \t\t\t     = std::vector<AST::Attribute> (),"}]}