{"sha": "76d2e2c547be369f04a192181df7f0a8d79cd270", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkMmUyYzU0N2JlMzY5ZjA0YTE5MjE4MWRmN2YwYThkNzljZDI3MA==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-08-04T19:30:11Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-08-04T19:30:11Z"}, "message": "inclhack.def (svr4_undeclared_getrnge): Introduce and enable.\n\n\t* fixinc/inclhack.def (svr4_undeclared_getrnge): Introduce and enable.\n\t* fixinc/inclhack.def (static_getrnge): Remove disabled hack.\n\t* fixinc/fixincl.x: Rebuild.\n\t* fixinc/tests/base/regexp.h: New test.\n\nFrom-SVN: r70153", "tree": {"sha": "7d3d4ab38382944454f09661ff4af8d30cb78402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d3d4ab38382944454f09661ff4af8d30cb78402"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76d2e2c547be369f04a192181df7f0a8d79cd270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d2e2c547be369f04a192181df7f0a8d79cd270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d2e2c547be369f04a192181df7f0a8d79cd270", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d2e2c547be369f04a192181df7f0a8d79cd270/comments", "author": null, "committer": null, "parents": [{"sha": "0e0464535ed47016fb22a3fc5a75a517545fb737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0464535ed47016fb22a3fc5a75a517545fb737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0464535ed47016fb22a3fc5a75a517545fb737"}], "stats": {"total": 133, "additions": 109, "deletions": 24}, "files": [{"sha": "583b6fcc9138f2dd51b1498ad395368ebbdc9457", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d2e2c547be369f04a192181df7f0a8d79cd270/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d2e2c547be369f04a192181df7f0a8d79cd270/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76d2e2c547be369f04a192181df7f0a8d79cd270", "patch": "@@ -1,3 +1,10 @@\n+2003-08-04  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\n+\t* fixinc/inclhack.def (svr4_undeclared_getrnge): Introduce and enable.\n+\t* fixinc/inclhack.def (static_getrnge): Remove disabled hack.\n+\t* fixinc/fixincl.x: Rebuild.\n+\t* fixinc/tests/base/regexp.h: New test.\n+\n 2003-08-04  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* c-ppoutput.c (cb_line_change): Don't skip line changing while"}, {"sha": "46741b90ccc7cae94d1cd3c07db862d75e14791b", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d2e2c547be369f04a192181df7f0a8d79cd270/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d2e2c547be369f04a192181df7f0a8d79cd270/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=76d2e2c547be369f04a192181df7f0a8d79cd270", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Friday August  1, 2003 at 06:47:22 PM EDT\n+ * It has been AutoGen-ed  Monday August  4, 2003 at 03:26:31 PM EDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Fri Aug  1 18:47:22 EDT 2003\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Mon Aug  4 15:26:31 EDT 2003\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 155 fixup descriptions.\n+ * This file contains 156 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4937,6 +4937,50 @@ static const char* apzSvr4_ProfilPatch[] = {\n     \"profil(unsigned short *, size_t, int, unsigned int)\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Svr4_Undeclared_Getrnge fix\n+ */\n+tSCC zSvr4_Undeclared_GetrngeName[] =\n+     \"svr4_undeclared_getrnge\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSvr4_Undeclared_GetrngeList[] =\n+  \"|regexp.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSvr4_Undeclared_GetrngeMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSvr4_Undeclared_GetrngeSelect0[] =\n+       \"getrnge\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSvr4_Undeclared_GetrngeBypass0[] =\n+       \"static void getrnge\";\n+\n+#define    SVR4_UNDECLARED_GETRNGE_TEST_CT  2\n+static tTestDesc aSvr4_Undeclared_GetrngeTests[] = {\n+  { TT_NEGREP,   zSvr4_Undeclared_GetrngeBypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSvr4_Undeclared_GetrngeSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Svr4_Undeclared_Getrnge\n+ */\n+static const char* apzSvr4_Undeclared_GetrngePatch[] = {\n+    \"format\",\n+    \"%0\\n\\\n+static int getrnge ();\",\n+    \"^static int[ \\t]+size;\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Sysv68_String fix\n@@ -6149,9 +6193,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          174\n+#define REGEX_COUNT          176\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            155\n+#define FIX_COUNT            156\n \n /*\n  *  Enumerate the fixes\n@@ -6280,6 +6324,7 @@ typedef enum {\n     SVR4_DISABLE_OPT_FIXIDX,\n     SVR4_GETCWD_FIXIDX,\n     SVR4_PROFIL_FIXIDX,\n+    SVR4_UNDECLARED_GETRNGE_FIXIDX,\n     SYSV68_STRING_FIXIDX,\n     SYSZ_STDLIB_FOR_SUN_FIXIDX,\n     THREAD_KEYWORD_FIXIDX,\n@@ -6930,6 +6975,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SVR4_PROFIL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSvr4_ProfilTests,   apzSvr4_ProfilPatch, 0 },\n \n+  {  zSvr4_Undeclared_GetrngeName,    zSvr4_Undeclared_GetrngeList,\n+     apzSvr4_Undeclared_GetrngeMachs,\n+     SVR4_UNDECLARED_GETRNGE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSvr4_Undeclared_GetrngeTests,   apzSvr4_Undeclared_GetrngePatch, 0 },\n+\n   {  zSysv68_StringName,    zSysv68_StringList,\n      apzSysv68_StringMachs,\n      SYSV68_STRING_TEST_CT, FD_MACH_ONLY,"}, {"sha": "c342f92a3eb1d682acf514553e67434237cf8e5a", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d2e2c547be369f04a192181df7f0a8d79cd270/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d2e2c547be369f04a192181df7f0a8d79cd270/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=76d2e2c547be369f04a192181df7f0a8d79cd270", "patch": "@@ -2304,25 +2304,6 @@ fix = {\n };\n \n \n-/*\n- *  Add a `static' declaration of `getrnge' into <regexp.h>.\n- *\n- *  Don't do this if there is already a `static void getrnge' declaration\n- *  present, since this would cause a redeclaration error.  Solaris 2.x has\n- *  such a declaration.\n- */\n-#ifdef SVR4\n-fix = {\n-    hackname = static_getrnge;\n-    files    = regexp.h;\n-    bypass   = \"static void getrnge\";\n-    sed      = \"/^static int[ \\t]*size;/c\\\\\\n\"\n-               \"static int      size ;\\\\\\n\\\\\\n\"\n-               \"static int getrnge ();\";\n-};\n-#endif\n-\n-\n /*\n  *  a missing semi-colon at the end of the statsswtch structure definition.\n  */\n@@ -2989,6 +2970,35 @@ fix = {\n #endif\n \n \n+/*\n+ *  Some SysV r4 systems, including Sequent's DYNIX/ptx, use the local\n+ *  function 'getrnge' in <regexp.h> before they declare it.  For these\n+ *  systems add a 'static int' declaration of 'getrnge' into <regexp.h>\n+ *  early on.\n+ *\n+ *  'getrnge' traditionally manipulates a file-scope global called 'size',\n+ *  so put the declaration right after the declaration of 'size'.\n+ *\n+ *  Don't do this if there is already a `static void getrnge' declaration\n+ *  present, since this would cause a redeclaration error.  Solaris 2.x has\n+ *  such a declaration.\n+ */\n+fix = {\n+    hackname  = svr4_undeclared_getrnge;\n+    files     = regexp.h;\n+    select    = \"getrnge\";\n+    bypass    = \"static void getrnge\";\n+    c_fix     = format;\n+    c_fix_arg = \"%0\\n\"\n+                \"static int getrnge ();\";\n+    c_fix_arg = \"^static int[ \\t]+size;\";\n+    test_text = \"static int size;\\n\"\n+                \"/* stuff which calls getrnge() */\\n\"\n+                \"static getrnge()\\n\"\n+                \"{}\";\n+};\n+\n+\n /*\n  *  Like svr4_mach_defines, but with newfangled syntax.\n  *  Source lines are of #define __i386 #machine(i386).   Delete them."}, {"sha": "35ec0494274feb6b7a234922e15ce220198c5557", "filename": "gcc/fixinc/tests/base/regexp.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d2e2c547be369f04a192181df7f0a8d79cd270/gcc%2Ffixinc%2Ftests%2Fbase%2Fregexp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d2e2c547be369f04a192181df7f0a8d79cd270/gcc%2Ffixinc%2Ftests%2Fbase%2Fregexp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fregexp.h?ref=76d2e2c547be369f04a192181df7f0a8d79cd270", "patch": "@@ -0,0 +1,18 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/regexp.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( SVR4_UNDECLARED_GETRNGE_CHECK )\n+static int size;\n+static int getrnge ();\n+/* stuff which calls getrnge() */\n+static getrnge()\n+{}\n+#endif  /* SVR4_UNDECLARED_GETRNGE_CHECK */"}]}