{"sha": "c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc4MzdmN2VmYmM4MWMyYTNhNGVmYTI2NDhhOGU3ZTUxZmFkNmNmOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-05-24T14:47:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-24T14:47:06Z"}, "message": "re PR c++/32080 (Can goto a function try-block)\n\n/cp\n2012-05-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/32080\n\t* parser.c (cp_parser_ctor_initializer_opt_and_function_body,\n\tcp_parser_function_body): Add a bool parameter, true when parsing\n\ta function-try-block.\n\t(cp_parser_function_try_block): Pass true to the above.\n\t(cp_parser_function_definition_after_declarator,\n\tcp_parser_function_transaction): Adjust.\n\n/testsuite\n2012-05-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/32080\n\t* g++.dg/eh/goto2.C: New.\n\nFrom-SVN: r187837", "tree": {"sha": "9d218f7ebda18691bc2375c32448bc890ccb048e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d218f7ebda18691bc2375c32448bc890ccb048e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8/comments", "author": null, "committer": null, "parents": [{"sha": "49bdc0a65dfe8dbd6d13e776a79418932d7aebc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bdc0a65dfe8dbd6d13e776a79418932d7aebc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49bdc0a65dfe8dbd6d13e776a79418932d7aebc0"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "4da78b850cb1bd0e642b18aadd3ab88964dfdeb5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8", "patch": "@@ -1,3 +1,13 @@\n+2012-05-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/32080\n+\t* parser.c (cp_parser_ctor_initializer_opt_and_function_body,\n+\tcp_parser_function_body): Add a bool parameter, true when parsing\n+\ta function-try-block.\n+\t(cp_parser_function_try_block): Pass true to the above.\n+\t(cp_parser_function_definition_after_declarator,\n+\tcp_parser_function_transaction): Adjust.\n+\n 2012-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/29185"}, {"sha": "165fdc2c4e6a886c165da2d2bde8658754da6406", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8", "patch": "@@ -1989,7 +1989,7 @@ static cp_parameter_declarator *cp_parser_parameter_declaration\n static tree cp_parser_default_argument \n   (cp_parser *, bool);\n static void cp_parser_function_body\n-  (cp_parser *);\n+  (cp_parser *, bool);\n static tree cp_parser_initializer\n   (cp_parser *, bool *, bool *);\n static tree cp_parser_initializer_clause\n@@ -2000,7 +2000,7 @@ static VEC(constructor_elt,gc) *cp_parser_initializer_list\n   (cp_parser *, bool *);\n \n static bool cp_parser_ctor_initializer_opt_and_function_body\n-  (cp_parser *);\n+  (cp_parser *, bool);\n \n /* Classes [gram.class] */\n \n@@ -17395,16 +17395,18 @@ cp_parser_default_argument (cp_parser *parser, bool template_parm_p)\n      compound_statement  */\n \n static void\n-cp_parser_function_body (cp_parser *parser)\n+cp_parser_function_body (cp_parser *parser, bool in_function_try_block)\n {\n-  cp_parser_compound_statement (parser, NULL, false, true);\n+  cp_parser_compound_statement (parser, NULL, in_function_try_block, true);\n }\n \n /* Parse a ctor-initializer-opt followed by a function-body.  Return\n-   true if a ctor-initializer was present.  */\n+   true if a ctor-initializer was present.  When IN_FUNCTION_TRY_BLOCK\n+   is true we are parsing a function-try-block.  */\n \n static bool\n-cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser)\n+cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser,\n+\t\t\t\t\t\t  bool in_function_try_block)\n {\n   tree body, list;\n   bool ctor_initializer_p;\n@@ -17431,7 +17433,7 @@ cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser)\n \tlast = STATEMENT_LIST_TAIL (list)->stmt;\n     }\n   /* Parse the function-body.  */\n-  cp_parser_function_body (parser);\n+  cp_parser_function_body (parser, in_function_try_block);\n   if (check_body_p)\n     check_constexpr_ctor_body (last, list);\n   /* Finish the function body.  */\n@@ -19707,8 +19709,8 @@ cp_parser_function_try_block (cp_parser* parser)\n   /* Let the rest of the front end know where we are.  */\n   try_block = begin_function_try_block (&compound_stmt);\n   /* Parse the function-body.  */\n-  ctor_initializer_p\n-    = cp_parser_ctor_initializer_opt_and_function_body (parser);\n+  ctor_initializer_p = cp_parser_ctor_initializer_opt_and_function_body\n+    (parser, /*in_function_try_block=*/true);\n   /* We're done with the `try' part.  */\n   finish_function_try_block (try_block);\n   /* Parse the handlers.  */\n@@ -21048,8 +21050,8 @@ cp_parser_function_definition_after_declarator (cp_parser* parser,\n   else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TRY))\n     ctor_initializer_p = cp_parser_function_try_block (parser);\n   else\n-    ctor_initializer_p\n-      = cp_parser_ctor_initializer_opt_and_function_body (parser);\n+    ctor_initializer_p = cp_parser_ctor_initializer_opt_and_function_body\n+      (parser, /*in_function_try_block=*/false);\n \n   finish_lambda_scope ();\n \n@@ -27224,8 +27226,8 @@ cp_parser_function_transaction (cp_parser *parser, enum rid keyword)\n   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TRY))\n     ctor_initializer_p = cp_parser_function_try_block (parser);\n   else\n-    ctor_initializer_p\n-      = cp_parser_ctor_initializer_opt_and_function_body (parser);\n+    ctor_initializer_p = cp_parser_ctor_initializer_opt_and_function_body\n+      (parser, /*in_function_try_block=*/false);\n \n   parser->in_transaction = old_in;\n "}, {"sha": "c00557ece63690cd162a23c53d96a97a1dda8353", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8", "patch": "@@ -1,3 +1,8 @@\n+2012-05-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/32080\n+\t* g++.dg/eh/goto2.C: New.\n+\n 2012-05-24  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/53460"}, {"sha": "de06d50b6e33b5a6145dc02d9c2df4ac58d5add4", "filename": "gcc/testsuite/g++.dg/eh/goto2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fgoto2.C?ref=c7837f7efbc81c2a3a4efa2648a8e7e51fad6cf8", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/32080\n+\n+void f()\n+try\n+  {\n+    goto l2;       // { dg-error \"from here\" }\n+  l1: ;            // { dg-error \"jump to label 'l1'\" }\n+  } catch (...)\n+  {\n+  l2: ;            // { dg-error \"jump to label 'l2'|enters catch block\" }\n+    goto l1;       // { dg-error \"from here|enters try block\" }\n+  }"}]}