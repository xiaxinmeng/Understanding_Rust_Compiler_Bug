{"sha": "e4d508663e3f14ba9b976f45808b1398a534bf2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRkNTA4NjYzZTNmMTRiYTliOTc2ZjQ1ODA4YjEzOThhNTM0YmYyYw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-10T17:43:07Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-10T17:43:07Z"}, "message": "In libobjc/: 2010-10-10 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-10-10  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc/objc-api.h: Define Method, Method_t, Category and\n        Category_t.  Prevent including this file at the same time as\n        objc/runtime.h.  Updated comments.\n        * objc/deprecated/struct_objc_method.h: Do not define Method,\n        Method_t.\n        * objc/deprecated/struct_objc_category.h: Do not define Category,\n        Category_t.\n        * objc-private/module-abi-8.h: New file containing a copy of all\n        the structure definitions.  Not used yet.\n        * objc/encoding.h (objc_aligned_size): Removed duplicate\n        declaration.  Updated comments.\n        * objc/runtime.h: Added Ivar, objc_property_t, Property, Method,\n        Category, struct objc_method_description, _C_ID and similar,\n        _C_CONST and similar and _F_CONST and similar.  Added\n        objc_sizeof_type, objc_alignof_type, objc_aligned_size,\n        objc_promoted_size, objc_skip_type_qualifier, objc_skip_typespec,\n        objc_skip_offset, objc_skip_argspec, objc_get_type_qualifiers,\n        struct objc_struct_layout, objc_layout_structure,\n        objc_layout_structure_next_member, objc_layout_finish_structure,\n        objc_layout_structure_get_info.  Prevent including this file at\n        the same time as objc/objc-api.h.\n\nFrom-SVN: r165256", "tree": {"sha": "31297c7b7c90562ff7778443d3b2187fc4b64092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31297c7b7c90562ff7778443d3b2187fc4b64092"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4d508663e3f14ba9b976f45808b1398a534bf2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d508663e3f14ba9b976f45808b1398a534bf2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4d508663e3f14ba9b976f45808b1398a534bf2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4d508663e3f14ba9b976f45808b1398a534bf2c/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9acb3234d6fe8d8fbbc3f6d94cc2cda45d4b11b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9acb3234d6fe8d8fbbc3f6d94cc2cda45d4b11b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9acb3234d6fe8d8fbbc3f6d94cc2cda45d4b11b"}], "stats": {"total": 437, "additions": 422, "deletions": 15}, "files": [{"sha": "a07be1c206983cd0331fc6fa5a9c14fef7769a95", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=e4d508663e3f14ba9b976f45808b1398a534bf2c", "patch": "@@ -1,3 +1,27 @@\n+2010-10-10  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/objc-api.h: Define Method, Method_t, Category and\n+\tCategory_t.  Prevent including this file at the same time as\n+\tobjc/runtime.h.  Updated comments.\n+\t* objc/deprecated/struct_objc_method.h: Do not define Method,\n+\tMethod_t.\n+\t* objc/deprecated/struct_objc_category.h: Do not define Category,\n+\tCategory_t.\n+\t* objc-private/module-abi-8.h: New file containing a copy of all\n+\tthe structure definitions.  Not used yet.\n+\t* objc/encoding.h (objc_aligned_size): Removed duplicate\n+\tdeclaration.  Updated comments.\n+\t* objc/runtime.h: Added Ivar, objc_property_t, Property, Method,\n+\tCategory, struct objc_method_description, _C_ID and similar,\n+\t_C_CONST and similar and _F_CONST and similar.  Added\n+\tobjc_sizeof_type, objc_alignof_type, objc_aligned_size,\n+\tobjc_promoted_size, objc_skip_type_qualifier, objc_skip_typespec,\n+\tobjc_skip_offset, objc_skip_argspec, objc_get_type_qualifiers,\n+\tstruct objc_struct_layout, objc_layout_structure,\n+\tobjc_layout_structure_next_member, objc_layout_finish_structure,\n+\tobjc_layout_structure_get_info.  Prevent including this file at\n+\tthe same time as objc/objc-api.h.\n+\t\n 2010-10-10  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* Makefile.in (OBJC_DEPRECATED_H): Added struct_objc_category.h,"}, {"sha": "7296273711c74a40e5810325a3792d1a52e9bf3d", "filename": "libobjc/objc-private/module-abi-8.h", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fmodule-abi-8.h?ref=e4d508663e3f14ba9b976f45808b1398a534bf2c", "patch": "@@ -0,0 +1,176 @@\n+/* Definitions of Module Structures used by ABI version 8\n+   Copyright (C) 1993, 1995, 1996, 1997, 2001, 2002, 2003, 2004, 2005,\n+   2007, 2009, 2010 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under the\n+terms of the GNU General Public License as published by the Free Software\n+Foundation; either version 3, or (at your option) any later version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n+details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef __objc_private_module_abi_8_INCLUDE_GNU\n+#define __objc_private_module_abi_8_INCLUDE_GNU\n+\n+/* For every class which happens to have statically allocated instances in\n+   this module, one OBJC_STATIC_INSTANCES is allocated by the compiler.\n+   INSTANCES is NULL terminated and points to all statically allocated\n+   instances of this class.  */\n+struct objc_static_instances\n+{\n+  char *class_name;\n+#ifdef __cplusplus\n+  id instances[1];\n+#else\n+  id instances[0];\n+#endif\n+};\n+\n+/* Whereas a Module (defined further down) is the root (typically) of a file,\n+   a Symtab is the root of the class and category definitions within the\n+   module.  \n+   \n+   A Symtab contains a variable length array of pointers to classes and\n+   categories  defined in the module.   */\n+struct objc_symtab\n+{\n+  unsigned long sel_ref_cnt;  /* Unknown. */\n+  SEL        refs;            /* Unknown. */\n+  unsigned short cls_def_cnt; /* Number of classes compiled (defined)\n+                                 in the module. */\n+  unsigned short cat_def_cnt; /* Number of categories compiled\n+                                 (defined) in the module. */\n+  void      *defs[1];         /* Variable array of pointers.\n+\t\t\t\t cls_def_cnt of type Class followed by\n+\t\t\t\t cat_def_cnt of type Category_t,\n+\t\t\t\t followed by a NULL terminated array\n+\t\t\t\t of objc_static_instances. */\n+};\n+\n+/* The compiler generates one of these structures for each module that\n+   composes the executable (eg main.m).\n+ \n+   This data structure is the root of the definition tree for the\n+   module.\n+ \n+   A collect program runs between ld stages and creates a ObjC ctor\n+   array.  That array holds a pointer to each module structure of the\n+   executable.  */\n+struct objc_module\n+{\n+  unsigned long version;      /* Version of the Module data\n+\t\t\t\t structure.  */\n+  unsigned long size;         /* sizeof(Module) according to the\n+\t\t\t\t compiler - only used to sanity check\n+\t\t\t\t that it matches sizeof(Module)\n+\t\t\t\t according to the runtime.  */\n+  const char* name;           /* Name of the file used to compile the\n+\t\t\t\t module - not set by modern compilers\n+\t\t\t\t for security reasons.  */\n+  struct objc_symtab *symtab; /* Pointer to the Symtab of the module.\n+\t\t\t\t The Symtab holds an array of pointers\n+\t\t\t\t to the classes and categories defined\n+\t\t\t\t in the module. */\n+};\n+\n+/* The compiler generates one of these structures for a class that has\n+   instance variables defined in its specification.  */\n+struct objc_ivar\n+{\n+  const char* ivar_name;  /* Name of the instance variable as entered\n+\t\t\t     in the class definition. */\n+  const char* ivar_type;  /* Description of the Ivar's type.  Useful\n+\t\t\t     for debuggers. */\n+  int        ivar_offset; /* Byte offset from the base address of the\n+\t\t\t     instance structure to the variable. */\n+};\n+\n+struct objc_ivar_list\n+{\n+  int   ivar_count;              /* Number of structures (Ivar)\n+\t\t\t\t    contained in the list.  One\n+\t\t\t\t    structure per instance variable\n+\t\t\t\t    defined in the class. */\n+  struct objc_ivar ivar_list[1]; /* Variable length structure. */\n+};\n+\n+/* The compiler generates one (or more) of these structures for a\n+   class that has methods defined in its specification.\n+ \n+   The implementation of a class can be broken into separate pieces in\n+   a file and categories can break them across modules. To handle this\n+   problem is a singly linked list of methods.  */\n+struct objc_method\n+{\n+  SEL         method_name;  /* This variable is the method's name.  It\n+\t\t\t       is a char*.  The unique integer passed\n+\t\t\t       to objc_msg_send is a char* too.  It is\n+\t\t\t       compared against method_name using\n+\t\t\t       strcmp. */\n+  const char* method_types; /* Description of the method's parameter\n+\t\t\t       list.  Useful for debuggers. */\n+  IMP         method_imp;   /* Address of the method in the\n+\t\t\t       executable. */\n+};\n+\n+struct objc_method_list\n+{\n+  struct objc_method_list*  method_next; /* This variable is used to\n+\t\t\t\t\t    link a method list to\n+\t\t\t\t\t    another.  It is a singly\n+\t\t\t\t\t    linked list. */\n+  int            method_count;            /* Number of methods defined\n+\t\t\t\t\t     in this structure. */\n+  struct objc_method method_list[1];      /* Variable length\n+\t\t\t\t\t     structure. */\n+};\n+\n+struct objc_protocol_list\n+{\n+  struct objc_protocol_list *next;\n+  size_t count;\n+  Protocol *list[1];\n+};\n+\n+/* The compiler generates one of these structures for each category.\n+   A class may have many categories and contain both instance and\n+   factory methods.  */\n+struct objc_category\n+{\n+  const char*   category_name;                /* Name of the category.\n+\t\t\t\t\t\t Name contained in the\n+\t\t\t\t\t\t () of the category\n+\t\t\t\t\t\t definition.  */\n+  const char*   class_name;                   /* Name of the class to\n+\t\t\t\t\t\t which the category\n+\t\t\t\t\t\t belongs.  */\n+  struct objc_method_list  *instance_methods; /* Linked list of\n+\t\t\t\t\t\t instance methods\n+\t\t\t\t\t\t defined in the\n+\t\t\t\t\t\t category. NULL\n+\t\t\t\t\t\t indicates no instance\n+\t\t\t\t\t\t methods defined.  */\n+  struct objc_method_list *class_methods;     /* Linked list of\n+\t\t\t\t\t\t factory methods\n+\t\t\t\t\t\t defined in the\n+\t\t\t\t\t\t category.  NULL\n+\t\t\t\t\t\t indicates no class\n+\t\t\t\t\t\t methods defined.  */\n+  struct objc_protocol_list *protocols;\t      /* List of Protocols\n+\t\t\t\t\t         conformed to.  */\n+};\n+\n+#endif /* __objc_private_module_abi_8_INCLUDE_GNU */"}, {"sha": "6de3980a905cc478ce621b9570721273a11dfdcd", "filename": "libobjc/objc/deprecated/struct_objc_category.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_category.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_category.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_category.h?ref=e4d508663e3f14ba9b976f45808b1398a534bf2c", "patch": "@@ -2,7 +2,7 @@\n ** The compiler generates one of these structures for each category.  A class\n ** may have many categories and contain both instance and factory methods.  \n */\n-typedef struct objc_category {\n+struct objc_category {\n   const char*   category_name;                /* Name of the category.  Name\n                                                 contained in the () of the\n                                                 category definition. */\n@@ -18,4 +18,4 @@ typedef struct objc_category {\n                                                 class methods defined. */\n   struct objc_protocol_list *protocols;\t      /* List of Protocols \n \t\t\t\t\t         conformed to */\n-} Category, *Category_t;\n+};"}, {"sha": "af83c07b6ff68cbd95e30df34820fa864c38804c", "filename": "libobjc/objc/deprecated/struct_objc_method.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_method.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_method.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fdeprecated%2Fstruct_objc_method.h?ref=e4d508663e3f14ba9b976f45808b1398a534bf2c", "patch": "@@ -6,7 +6,7 @@\n ** and categories can break them across modules. To handle this problem is a\n ** singly linked list of methods. \n */\n-typedef struct objc_method {\n+struct objc_method {\n   SEL         method_name;                  /* This variable is the method's \n                                                name.  It is a char*. \n                                                The unique integer passed to \n@@ -18,4 +18,5 @@ typedef struct objc_method {\n                                                debuggers. */\n   IMP         method_imp;                   /* Address of the method in the \n                                                executable. */\n-} Method, *Method_t;\n+};\n+"}, {"sha": "523b129f32897a042d355754f4f475112efdf9af", "filename": "libobjc/objc/encoding.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc%2Fencoding.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc%2Fencoding.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fencoding.h?ref=e4d508663e3f14ba9b976f45808b1398a534bf2c", "patch": "@@ -28,13 +28,21 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef __encoding_INCLUDE_GNU\n #define __encoding_INCLUDE_GNU\n \n+/* This file is to be used with the \"traditional\" GNU Objective-C\n+   Runtime API (the one declared in objc/objc-api.h).  If you are\n+   using the \"modern\" GNU Objective-C Runtime API, then the useful\n+   functions from this file are declared in objc/runtime.h.\n+*/\n+\n #include \"objc-api.h\"\n #include <ctype.h>\n \n #ifdef __cplusplus\n extern \"C\" {\n #endif /* __cplusplus */\n \n+/* The following are used in encode strings to describe some\n+   qualifiers of method and ivar types.  */\n #define _C_CONST\t'r'\n #define _C_IN\t\t'n'\n #define _C_INOUT\t'N'\n@@ -44,6 +52,7 @@ extern \"C\" {\n #define _C_ONEWAY\t'V'\n #define _C_GCINVISIBLE\t'|'\n \n+/* The same when used as flags.  */\n #define _F_CONST\t0x01\n #define _F_IN\t\t0x01\n #define _F_OUT\t\t0x02\n@@ -53,7 +62,6 @@ extern \"C\" {\n #define _F_ONEWAY\t0x10\n #define _F_GCINVISIBLE\t0x20\n \n-int objc_aligned_size (const char *type);\n int objc_sizeof_type (const char *type);\n int objc_alignof_type (const char *type);\n int objc_aligned_size (const char *type);"}, {"sha": "eced869d883d8ba1f9b058f84454101df9ff6ff7", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=e4d508663e3f14ba9b976f45808b1398a534bf2c", "patch": "@@ -41,11 +41,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   Objective-C Runtime API) or objc/runtime.h (to use the modern GNU\n   Objective-C Runtime API), but not both.\n */\n-/*\n #ifdef __objc_runtime_INCLUDE_GNU\n # error You can not include both objc/objc-api.h and objc/runtime.h.  Include objc/objc-api.h for the traditional GNU Objective-C Runtime API and objc/runtime.h for the modern one.\n #endif\n-*/\n \n #include \"objc.h\"\n #ifndef GNU_LIBOBJC_COMPILING_LIBOBJC_ITSELF\n@@ -71,7 +69,8 @@ struct objc_method_description\n     char *types;\t\t/* type encoding */\n };\n \n-/* Filer types used to describe Ivars and Methods.  */\n+/* The following are used in encode strings to describe the type of\n+   Ivars and Methods.  */\n #define _C_ID       '@'\n #define _C_CLASS    '#'\n #define _C_SEL      ':'\n@@ -103,12 +102,10 @@ struct objc_method_description\n #define _C_VECTOR   '!'\n #define _C_COMPLEX  'j'\n \n-/* The following one is never generated by the compiler.  You can\n-   treat it as equivalent to \"*\".\n-*/\n+/* _C_ATOM is never generated by the compiler.  You can treat it as\n+   equivalent to \"*\".  */\n #define _C_ATOM     '%'\n \n-\n #include \"deprecated/objc_error.h\"\n \n #include \"deprecated/struct_objc_static_instances.h\"\n@@ -117,6 +114,8 @@ struct objc_method_description\n #include \"deprecated/struct_objc_ivar.h\"\n #include \"deprecated/struct_objc_ivar_list.h\"\n #include \"deprecated/struct_objc_method.h\"\n+typedef struct objc_method Method, *Method_t;\n+\n #include \"deprecated/struct_objc_method_list.h\"\n #include \"deprecated/struct_objc_protocol_list.h\"\n \n@@ -169,9 +168,11 @@ struct objc_method_description\n \n #include \"deprecated/struct_objc_category.h\"\n \n+typedef struct objc_category Category, *Category_t;\n+\n /* We include message.h for compatibility with the old objc-api.h\n    which included the declarations currently in message.h.  The\n-   Apple/NeXT runtime does not do this and only include message.h in\n+   Apple/NeXT runtime does not do this and only includes message.h in\n    objc-runtime.h.  It does not matter that much since most of the\n    definitions in message.h are runtime-specific.  */\n #include \"message.h\""}, {"sha": "6f25ec8afe1e385da70607f6c8b333f91a8e9c4b", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 199, "deletions": 2, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4d508663e3f14ba9b976f45808b1398a534bf2c/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=e4d508663e3f14ba9b976f45808b1398a534bf2c", "patch": "@@ -41,16 +41,112 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   Objective-C Runtime API) or objc/runtime.h (to use the modern GNU\n   Objective-C Runtime API), but not both.\n */\n-/*\n #ifdef __objc_api_INCLUDE_GNU\n # error You can not include both objc/objc-api.h and objc/runtime.h.  Include objc/objc-api.h for the traditional GNU Objective-C Runtime API and objc/runtime.h for the modern one.\n #endif\n-*/\n \n /* TODO: This file is incomplete.  */\n \n #include \"objc.h\"\n \n+/* An 'Ivar' represents an instance variable.  It holds information\n+   about the name, type and offset of the instance variable.  */\n+typedef struct objc_ivar *Ivar;\n+\n+/* A 'Property' represents a property.  It holds information about the\n+   name of the property, and its attributes.\n+\n+   Compatibility Note: the Apple/NeXT runtime defines this as\n+   objc_property_t, so we define it that way as well, but obviously\n+   Property is the right name.  */\n+typedef struct objc_property *Property;\n+typedef struct objc_property *objc_property_t;\n+\n+/* A 'Method' represents a method.  It holds information about the\n+   name, types and the IMP of the method.  */\n+typedef struct objc_method *Method;\n+\n+/* A 'Category' represents a category.  It holds information about the\n+   name of the category, the class it belongs to, and the methods,\n+   protocols and such like provided by the category.  */\n+typedef struct objc_category *Category;\n+\n+/* 'Protocol' is defined in objc/objc.h (which is included by this\n+   file).  */\n+\n+/* Method descriptor returned by introspective Object methods.  At the\n+   moment, this is really just the first part of the more complete\n+   objc_method structure used internally by the runtime.  (PS: In the\n+   GNU Objective-C Runtime, selectors already include a type, so an\n+   objc_method_description does not add much to a SEL.  But in other\n+   runtimes, that is not the case, which is why\n+   objc_method_description exists).  */\n+struct objc_method_description\n+{\n+  SEL name;      /* Selector (name and signature) */\n+  char *types;   /* Type encoding */\n+};\n+\n+/* The following are used in encode strings to describe the type of\n+   Ivars and Methods.  */\n+#define _C_ID       '@'\n+#define _C_CLASS    '#'\n+#define _C_SEL      ':'\n+#define _C_CHR      'c'\n+#define _C_UCHR     'C'\n+#define _C_SHT      's'\n+#define _C_USHT     'S'\n+#define _C_INT      'i'\n+#define _C_UINT     'I'\n+#define _C_LNG      'l'\n+#define _C_ULNG     'L'\n+#define _C_LNG_LNG  'q'\n+#define _C_ULNG_LNG 'Q'\n+#define _C_FLT      'f'\n+#define _C_DBL      'd'\n+#define _C_LNG_DBL  'D'\n+#define _C_BFLD     'b'\n+#define _C_BOOL     'B'\n+#define _C_VOID     'v'\n+#define _C_UNDEF    '?'\n+#define _C_PTR      '^'\n+#define _C_CHARPTR  '*'\n+#define _C_ARY_B    '['\n+#define _C_ARY_E    ']'\n+#define _C_UNION_B  '('\n+#define _C_UNION_E  ')'\n+#define _C_STRUCT_B '{'\n+#define _C_STRUCT_E '}'\n+#define _C_VECTOR   '!'\n+#define _C_COMPLEX  'j'\n+\n+/* _C_ATOM is never generated by the compiler.  You can treat it as\n+   equivalent to \"*\".  */\n+#define _C_ATOM     '%'\n+\n+/* The following are used in encode strings to describe some\n+   qualifiers of method and ivar types.  */\n+#define _C_CONST\t'r'\n+#define _C_IN\t\t'n'\n+#define _C_INOUT\t'N'\n+#define _C_OUT      \t'o'\n+#define _C_BYCOPY\t'O'\n+#define _C_BYREF\t'R'\n+#define _C_ONEWAY\t'V'\n+#define _C_GCINVISIBLE\t'|'\n+\n+/* The same when used as flags.  */\n+#define _F_CONST\t0x01\n+#define _F_IN\t\t0x01\n+#define _F_OUT\t\t0x02\n+#define _F_INOUT\t0x03\n+#define _F_BYCOPY\t0x04\n+#define _F_BYREF\t0x08\n+#define _F_ONEWAY\t0x10\n+#define _F_GCINVISIBLE\t0x20\n+\n+/* TODO: Add all the functions in the API.  */\n+\n /* 'objc_enumerationMutation()' is called when a collection is\n    mutated while being \"fast enumerated\".  That is a hard error, and\n    objc_enumerationMutation is called to deal with it.  'collection'\n@@ -102,4 +198,105 @@ struct __objcFastEnumerationState\n };\n */\n \n+\n+/* Traditional GNU Objective-C Runtime functions that are currently\n+   used to implement method forwarding.\n+*/\n+\n+/* Return the size of a variable which has the specified 'type'\n+   encoding.  */\n+int objc_sizeof_type (const char *type);\n+\n+/* Return the align of a variable which has the specified 'type'\n+   encoding.  */\n+int objc_alignof_type (const char *type);\n+\n+/* Return the aligned size of a variable which has the specified\n+   'type' encoding.  The aligned size is the size rounded up to the\n+   nearest alignment.  */\n+int objc_aligned_size (const char *type);\n+\n+/* Return the promoted size of a variable which has the specified\n+   'type' encoding.  This is the size rounded up to the nearest\n+   integral of the wordsize, taken to be the size of a void *.  */\n+int objc_promoted_size (const char *type);\n+\n+\n+/* The following functions are used when parsing the type encoding of\n+   methods, to skip over parts that are ignored.  They take as\n+   argument a pointer to a location inside the type encoding of a\n+   method (which is a string) and return a new pointer, pointing to a\n+   new location inside the string after having skipped the unwanted\n+   information.  */\n+\n+/* Skip some type qualifiers (_C_CONST, _C_IN, etc).  These may\n+  eventually precede typespecs occurring in method prototype\n+  encodings.  */\n+const char *objc_skip_type_qualifiers (const char *type);\n+\n+/* Skip one typespec element (_C_CLASS, _C_SEL, etc).  If the typespec\n+  is prepended by type qualifiers, these are skipped as well.  */\n+const char *objc_skip_typespec (const char *type);\n+\n+/* Skip an offset.  */\n+const char *objc_skip_offset (const char *type);\n+\n+/* Skip an argument specification (ie, skipping a typespec, which may\n+   include qualifiers, and an offset too).  */\n+const char *objc_skip_argspec (const char *type);\n+\n+/* Read type qualifiers (_C_CONST, _C_IN, etc) from string 'type'\n+   (stopping at the first non-type qualifier found) and return an\n+   unsigned int which is the logical OR of all the corresponding flags\n+   (_F_CONST, _F_IN etc).  */\n+unsigned objc_get_type_qualifiers (const char *type);\n+\n+\n+/* Note that the following functions work for very simple structures,\n+   but get easily confused by more complicated ones (for example,\n+   containing vectors).  A better solution is required.\n+*/\n+\n+/* The following three functions can be used to determine how a\n+   structure is laid out by the compiler. For example:\n+\n+  struct objc_struct_layout layout;\n+  int i;\n+\n+  objc_layout_structure (type, &layout);\n+  while (objc_layout_structure_next_member (&layout))\n+    {\n+      int position, align;\n+      const char *type;\n+\n+      objc_layout_structure_get_info (&layout, &position, &align, &type);\n+      printf (\"element %d has offset %d, alignment %d\\n\",\n+              i++, position, align);\n+    }\n+\n+  These functions are used by objc_sizeof_type and objc_alignof_type\n+  functions to compute the size and alignment of structures. The\n+  previous method of computing the size and alignment of a structure\n+  was not working on some architectures, particulary on AIX, and in\n+  the presence of bitfields inside the structure.  */\n+struct objc_struct_layout\n+{\n+  const char *original_type;\n+  const char *type;\n+  const char *prev_type;\n+  unsigned int record_size;\n+  unsigned int record_align;\n+};\n+\n+void objc_layout_structure (const char *type,\n+                            struct objc_struct_layout *layout);\n+BOOL  objc_layout_structure_next_member (struct objc_struct_layout *layout);\n+void objc_layout_finish_structure (struct objc_struct_layout *layout,\n+                                   unsigned int *size,\n+                                   unsigned int *align);\n+void objc_layout_structure_get_info (struct objc_struct_layout *layout,\n+                                     unsigned int *offset,\n+                                     unsigned int *align,\n+                                     const char **type);\n+\n #endif"}]}