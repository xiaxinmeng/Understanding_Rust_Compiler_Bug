{"sha": "cace06d145df2f0172347f0fc2a8e187fc935d5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FjZTA2ZDE0NWRmMmYwMTcyMzQ3ZjBmYzJhOGUxODdmYzkzNWQ1Yw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-05-19T15:46:48Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-05-19T15:46:48Z"}, "message": "vqrshl.c: New file.\n\n2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrshl.c: New file.\n\nFrom-SVN: r223377", "tree": {"sha": "27758b340705924a81aea8c017b736134dc904e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27758b340705924a81aea8c017b736134dc904e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cace06d145df2f0172347f0fc2a8e187fc935d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cace06d145df2f0172347f0fc2a8e187fc935d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cace06d145df2f0172347f0fc2a8e187fc935d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cace06d145df2f0172347f0fc2a8e187fc935d5c/comments", "author": null, "committer": null, "parents": [{"sha": "396fa23a27af99ca70ce898e95ddee3b6a66adcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396fa23a27af99ca70ce898e95ddee3b6a66adcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/396fa23a27af99ca70ce898e95ddee3b6a66adcf"}], "stats": {"total": 1094, "additions": 1094, "deletions": 0}, "files": [{"sha": "df6a7fc98c82538a540707c570672368820c346f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace06d145df2f0172347f0fc2a8e187fc935d5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace06d145df2f0172347f0fc2a8e187fc935d5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cace06d145df2f0172347f0fc2a8e187fc935d5c", "patch": "@@ -1,3 +1,7 @@\n+2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrshl.c: New file.\n+\n 2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_n.c: New file."}, {"sha": "3f0cb37707291ac3488e4476172f4c210fe831cd", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrshl.c", "status": "added", "additions": 1090, "deletions": 0, "changes": 1090, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace06d145df2f0172347f0fc2a8e187fc935d5c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace06d145df2f0172347f0fc2a8e187fc935d5c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshl.c?ref=cace06d145df2f0172347f0fc2a8e187fc935d5c", "patch": "@@ -0,0 +1,1090 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag with input=0.  */\n+int VECT_VAR(expected_cumulative_sat_0,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0,uint,64,2) = 0;\n+\n+/* Expected results with input=0.  */\n+VECT_VAR_DECL(expected_0,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,64,2) [] = { 0x0, 0x0 };\n+\n+/* Expected values of cumulative_saturation flag with input=0 and\n+   negative shift amount.  */\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_neg,uint,64,2) = 0;\n+\n+/* Expected results with input=0 and negative shift amount.  */\n+VECT_VAR_DECL(expected_0_neg,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_neg,uint,64,2) [] = { 0x0, 0x0 };\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat,uint,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat,int,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat,int,64,2) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,64,2) = 1;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xe0, 0xe2, 0xe4, 0xe6,\n+\t\t\t\t       0xe8, 0xea, 0xec, 0xee };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xff80, 0xff88, 0xff90, 0xff98 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffff000, 0xfffff100 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xffffffffffffff80 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x8000, 0x8000, 0x8000, 0x8000,\n+\t\t\t\t\t0x8000, 0x8000, 0x8000, 0x8000 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x8000000000000000, 0x8000000000000000 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xffffffffffffffff,\n+\t\t\t\t\t 0xffffffffffffffff };\n+\n+/* Expected values of cumulative_saturation flag with negative shift\n+   amount.  */\n+int VECT_VAR(expected_cumulative_sat_neg,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_neg,uint,64,2) = 0;\n+\n+/* Expected results with negative shift amount.  */\n+VECT_VAR_DECL(expected_neg,int,8,8) [] = { 0xfc, 0xfc, 0xfd, 0xfd,\n+\t\t\t\t\t   0xfd, 0xfd, 0xfe, 0xfe };\n+VECT_VAR_DECL(expected_neg,int,16,4) [] = { 0xfffc, 0xfffc, 0xfffd, 0xfffd };\n+VECT_VAR_DECL(expected_neg,int,32,2) [] = { 0xfffffffe, 0xfffffffe };\n+VECT_VAR_DECL(expected_neg,int,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected_neg,uint,8,8) [] = { 0x3c, 0x3c, 0x3d, 0x3d,\n+\t\t\t\t\t    0x3d, 0x3d, 0x3e, 0x3e };\n+VECT_VAR_DECL(expected_neg,uint,16,4) [] = { 0x3ffc, 0x3ffc, 0x3ffd, 0x3ffd };\n+VECT_VAR_DECL(expected_neg,uint,32,2) [] = { 0x1ffffffe, 0x1ffffffe };\n+VECT_VAR_DECL(expected_neg,uint,64,1) [] = { 0xfffffffffffffff };\n+VECT_VAR_DECL(expected_neg,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t    0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t    0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,8,16) [] = { 0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t     0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t     0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t     0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected_neg,uint,16,8) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t     0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_neg,uint,32,4) [] = { 0x80000, 0x80000,\n+\t\t\t\t\t     0x80000, 0x80000 };\n+VECT_VAR_DECL(expected_neg,uint,64,2) [] = { 0x100000000000, 0x100000000000 };\n+\n+/* Expected values of cumulative_saturation flag with input=max and\n+   shift by -1.  */\n+int VECT_VAR(expected_cumulative_sat_minus1,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,uint,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,uint,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,uint,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,uint,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus1,uint,64,2) = 0;\n+\n+/* Expected results with input=max and shift by -1.  */\n+VECT_VAR_DECL(expected_minus1,int,8,8) [] = { 0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t      0x40, 0x40, 0x40, 0x40 };\n+VECT_VAR_DECL(expected_minus1,int,16,4) [] = { 0x4000, 0x4000, 0x4000, 0x4000 };\n+VECT_VAR_DECL(expected_minus1,int,32,2) [] = { 0x40000000, 0x40000000 };\n+VECT_VAR_DECL(expected_minus1,int,64,1) [] = { 0x4000000000000000 };\n+VECT_VAR_DECL(expected_minus1,uint,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t       0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_minus1,uint,16,4) [] = { 0x8000, 0x8000, 0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_minus1,uint,32,2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_minus1,uint,64,1) [] = { 0x8000000000000000 };\n+VECT_VAR_DECL(expected_minus1,int,8,16) [] = { 0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t       0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t       0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t       0x40, 0x40, 0x40, 0x40 };\n+VECT_VAR_DECL(expected_minus1,int,16,8) [] = { 0x4000, 0x4000, 0x4000, 0x4000,\n+\t\t\t\t\t       0x4000, 0x4000, 0x4000, 0x4000 };\n+VECT_VAR_DECL(expected_minus1,int,32,4) [] = { 0x40000000, 0x40000000,\n+\t\t\t\t\t       0x40000000, 0x40000000 };\n+VECT_VAR_DECL(expected_minus1,int,64,2) [] = { 0x4000000000000000,\n+\t\t\t\t\t       0x4000000000000000 };\n+VECT_VAR_DECL(expected_minus1,uint,8,16) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_minus1,uint,16,8) [] = { 0x8000, 0x8000, 0x8000, 0x8000,\n+\t\t\t\t\t\t0x8000, 0x8000, 0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_minus1,uint,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_minus1,uint,64,2) [] = { 0x8000000000000000,\n+\t\t\t\t\t\t0x8000000000000000 };\n+\n+/* Expected values of cumulative_saturation flag with input=max and\n+   shift by -3.  */\n+int VECT_VAR(expected_cumulative_sat_minus3,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,uint,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,uint,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,uint,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,uint,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_minus3,uint,64,2) = 0;\n+\n+/* Expected results with input=max and shift by -3.  */\n+VECT_VAR_DECL(expected_minus3,int,8,8) [] = { 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t      0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_minus3,int,16,4) [] = { 0x1000, 0x1000, 0x1000, 0x1000 };\n+VECT_VAR_DECL(expected_minus3,int,32,2) [] = { 0x10000000, 0x10000000 };\n+VECT_VAR_DECL(expected_minus3,int,64,1) [] = { 0x1000000000000000 };\n+VECT_VAR_DECL(expected_minus3,uint,8,8) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t       0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_minus3,uint,16,4) [] = { 0x2000, 0x2000, 0x2000, 0x2000 };\n+VECT_VAR_DECL(expected_minus3,uint,32,2) [] = { 0x20000000, 0x20000000 };\n+VECT_VAR_DECL(expected_minus3,uint,64,1) [] = { 0x2000000000000000 };\n+VECT_VAR_DECL(expected_minus3,int,8,16) [] = { 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t       0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t       0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t       0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_minus3,int,16,8) [] = { 0x1000, 0x1000, 0x1000, 0x1000,\n+\t\t\t\t\t       0x1000, 0x1000, 0x1000, 0x1000 };\n+VECT_VAR_DECL(expected_minus3,int,32,4) [] = { 0x10000000, 0x10000000,\n+\t\t\t\t\t       0x10000000, 0x10000000 };\n+VECT_VAR_DECL(expected_minus3,int,64,2) [] = { 0x1000000000000000,\n+\t\t\t\t\t       0x1000000000000000 };\n+VECT_VAR_DECL(expected_minus3,uint,8,16) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_minus3,uint,16,8) [] = { 0x2000, 0x2000, 0x2000, 0x2000,\n+\t\t\t\t\t\t0x2000, 0x2000, 0x2000, 0x2000 };\n+VECT_VAR_DECL(expected_minus3,uint,32,4) [] = { 0x20000000, 0x20000000,\n+\t\t\t\t\t\t0x20000000, 0x20000000 };\n+VECT_VAR_DECL(expected_minus3,uint,64,2) [] = { 0x2000000000000000,\n+\t\t\t\t\t\t0x2000000000000000 };\n+\n+/* Expected values of cumulative_saturation flag with input=max and\n+   large shift amount.  */\n+int VECT_VAR(expected_cumulative_sat_large_sh,int,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,int,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,uint,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,uint,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,uint,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,uint,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,int,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,int,64,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,uint,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,uint,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,uint,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_large_sh,uint,64,2) = 1;\n+\n+/* Expected results with input=max and large shift amount.  */\n+VECT_VAR_DECL(expected_large_sh,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_large_sh,int,16,4) [] = { 0x7fff, 0x7fff,\n+\t\t\t\t\t\t 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_large_sh,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_large_sh,int,64,1) [] = { 0x7fffffffffffffff };\n+VECT_VAR_DECL(expected_large_sh,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t 0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_large_sh,uint,16,4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL(expected_large_sh,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_large_sh,uint,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected_large_sh,int,8,16) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t\t 0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_large_sh,int,16,8) [] = { 0x7fff, 0x7fff,\n+\t\t\t\t\t\t 0x7fff, 0x7fff,\n+\t\t\t\t\t\t 0x7fff, 0x7fff,\n+\t\t\t\t\t\t 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_large_sh,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t\t 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_large_sh,int,64,2) [] = { 0x7fffffffffffffff,\n+\t\t\t\t\t\t 0x7fffffffffffffff };\n+VECT_VAR_DECL(expected_large_sh,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t  0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t  0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t  0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_large_sh,uint,16,8) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL(expected_large_sh,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n+\t\t\t\t\t\t  0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_large_sh,uint,64,2) [] = { 0xffffffffffffffff,\n+\t\t\t\t\t\t  0xffffffffffffffff };\n+\n+/* Expected values of cumulative_saturation flag with negative input and\n+   large shift amount.  */\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,8,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,64,1) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,int,64,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,8,16) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg_large_sh,uint,64,2) = 1;\n+\n+/* Expected results with negative input and large shift amount.  */\n+VECT_VAR_DECL(expected_neg_large_sh,int,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t    0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_neg_large_sh,int,16,4) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t     0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_neg_large_sh,int,32,2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_neg_large_sh,int,64,1) [] = { 0x8000000000000000 };\n+VECT_VAR_DECL(expected_neg_large_sh,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t     0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_neg_large_sh,uint,16,4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t      0xffff, 0xffff };\n+VECT_VAR_DECL(expected_neg_large_sh,uint,32,2) [] = { 0xffffffff,\n+\t\t\t\t\t\t      0xffffffff };\n+VECT_VAR_DECL(expected_neg_large_sh,uint,64,1) [] = { 0xffffffffffffffff };\n+VECT_VAR_DECL(expected_neg_large_sh,int,8,16) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t     0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t     0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t     0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_neg_large_sh,int,16,8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t     0x8000, 0x8000,\n+\t\t\t\t\t\t     0x8000, 0x8000,\n+\t\t\t\t\t\t     0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_neg_large_sh,int,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t     0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_neg_large_sh,int,64,2) [] = { 0x8000000000000000,\n+\t\t\t\t\t\t     0x8000000000000000 };\n+VECT_VAR_DECL(expected_neg_large_sh,uint,8,16) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t      0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t      0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t      0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_neg_large_sh,uint,16,8) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t      0xffff, 0xffff,\n+\t\t\t\t\t\t      0xffff, 0xffff,\n+\t\t\t\t\t\t      0xffff, 0xffff };\n+VECT_VAR_DECL(expected_neg_large_sh,uint,32,4) [] = { 0xffffffff,\n+\t\t\t\t\t\t      0xffffffff,\n+\t\t\t\t\t\t      0xffffffff,\n+\t\t\t\t\t\t      0xffffffff };\n+VECT_VAR_DECL(expected_neg_large_sh,uint,64,2) [] = { 0xffffffffffffffff,\n+\t\t\t\t\t\t      0xffffffffffffffff };\n+\n+/* Expected values of cumulative_saturation flag with max/min input and\n+   large negative shift amount.  */\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_large_neg_sh,uint,64,2) = 0;\n+\n+/* Expected results with max/min input and large negative shift amount.  */\n+VECT_VAR_DECL(expected_large_neg_sh,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_large_neg_sh,uint,64,2) [] = { 0x0, 0x0 };\n+\n+/* Expected values of cumulative_saturation flag with input=0 and\n+   large negative shift amount.  */\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,8,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,64,1) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,8,16) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_0_large_neg_sh,uint,64,2) = 0;\n+\n+/* Expected results with input=0 and large negative shift amount.  */\n+VECT_VAR_DECL(expected_0_large_neg_sh,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,uint,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,uint,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t       0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t       0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t       0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,uint,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0_large_neg_sh,uint,64,2) [] = { 0x0, 0x0 };\n+\n+#define INSN vqrshl\n+#define TEST_MSG \"VQRSHL/VQRSHLQ\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  /* Basic test: v3=vqrshl(v1,v2), then store the result.  */\n+#define TEST_VQRSHL2(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector_shift, T3, W, N));\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQRSHL1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQRSHL2(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_VQRSHL(T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\t\\\n+  TEST_VQRSHL1(INSN, T3, Q, T1, T2, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  DECL_VARIABLE_SIGNED_VARIANTS(vector_shift);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with 0, to check saturation on limits.  */\n+  VDUP(vector, , int, s, 8, 8, 0);\n+  VDUP(vector, , int, s, 16, 4, 0);\n+  VDUP(vector, , int, s, 32, 2, 0);\n+  VDUP(vector, , int, s, 64, 1, 0);\n+  VDUP(vector, , uint, u, 8, 8, 0);\n+  VDUP(vector, , uint, u, 16, 4, 0);\n+  VDUP(vector, , uint, u, 32, 2, 0);\n+  VDUP(vector, , uint, u, 64, 1, 0);\n+  VDUP(vector, q, int, s, 8, 16, 0);\n+  VDUP(vector, q, int, s, 16, 8, 0);\n+  VDUP(vector, q, int, s, 32, 4, 0);\n+  VDUP(vector, q, int, s, 64, 2, 0);\n+  VDUP(vector, q, uint, u, 8, 16, 0);\n+  VDUP(vector, q, uint, u, 16, 8, 0);\n+  VDUP(vector, q, uint, u, 32, 4, 0);\n+  VDUP(vector, q, uint, u, 64, 2, 0);\n+\n+  /* Choose init value arbitrarily, will be used as shift amount */\n+  /* Use values equal to or one-less-than the type width to check\n+     behaviour on limits.  */\n+  VDUP(vector_shift, , int, s, 8, 8, 7);\n+  VDUP(vector_shift, , int, s, 16, 4, 15);\n+  VDUP(vector_shift, , int, s, 32, 2, 31);\n+  VDUP(vector_shift, , int, s, 64, 1, 63);\n+  VDUP(vector_shift, q, int, s, 8, 16, 8);\n+  VDUP(vector_shift, q, int, s, 16, 8, 16);\n+  VDUP(vector_shift, q, int, s, 32, 4, 32);\n+  VDUP(vector_shift, q, int, s, 64, 2, 64);\n+\n+#define CMT \" (with input = 0)\"\n+  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_0, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_0, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_0, CMT);\n+\n+\n+  /* Use negative shift amounts.  */\n+  VDUP(vector_shift, , int, s, 8, 8, -1);\n+  VDUP(vector_shift, , int, s, 16, 4, -2);\n+  VDUP(vector_shift, , int, s, 32, 2, -3);\n+  VDUP(vector_shift, , int, s, 64, 1, -4);\n+  VDUP(vector_shift, q, int, s, 8, 16, -7);\n+  VDUP(vector_shift, q, int, s, 16, 8, -11);\n+  VDUP(vector_shift, q, int, s, 32, 4, -13);\n+  VDUP(vector_shift, q, int, s, 64, 2, -20);\n+\n+#undef CMT\n+#define CMT \" (input 0 and negative shift amount)\"\n+  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_0_neg, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_0_neg, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_0_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_0_neg, CMT);\n+\n+\n+  /* Test again, with predefined input values.  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Choose init value arbitrarily, will be used as shift amount.  */\n+  VDUP(vector_shift, , int, s, 8, 8, 1);\n+  VDUP(vector_shift, , int, s, 16, 4, 3);\n+  VDUP(vector_shift, , int, s, 32, 2, 8);\n+  VDUP(vector_shift, , int, s, 64, 1, 3);\n+  VDUP(vector_shift, q, int, s, 8, 16, 10);\n+  VDUP(vector_shift, q, int, s, 16, 8, 12);\n+  VDUP(vector_shift, q, int, s, 32, 4, 31);\n+  VDUP(vector_shift, q, int, s, 64, 2, 63);\n+\n+#undef CMT\n+#define CMT \"\"\n+  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, CMT);\n+\n+\n+  /* Use negative shift amounts.  */\n+  VDUP(vector_shift, , int, s, 8, 8, -2);\n+  VDUP(vector_shift, , int, s, 16, 4, -2);\n+  VDUP(vector_shift, , int, s, 32, 2, -3);\n+  VDUP(vector_shift, , int, s, 64, 1, -4);\n+  VDUP(vector_shift, q, int, s, 8, 16, -7);\n+  VDUP(vector_shift, q, int, s, 16, 8, -11);\n+  VDUP(vector_shift, q, int, s, 32, 4, -13);\n+  VDUP(vector_shift, q, int, s, 64, 2, -20);\n+\n+#undef CMT\n+#define CMT \" (negative shift amount)\"\n+  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_neg, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_neg, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_neg, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_neg, CMT);\n+\n+\n+  /* Fill input vector with max value, to check saturation on\n+     limits.  */\n+  VDUP(vector, , int, s, 8, 8, 0x7F);\n+  VDUP(vector, , int, s, 16, 4, 0x7FFF);\n+  VDUP(vector, , int, s, 32, 2, 0x7FFFFFFF);\n+  VDUP(vector, , int, s, 64, 1, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, , uint, u, 8, 8, 0xFF);\n+  VDUP(vector, , uint, u, 16, 4, 0xFFFF);\n+  VDUP(vector, , uint, u, 32, 2, 0xFFFFFFFF);\n+  VDUP(vector, , uint, u, 64, 1, 0xFFFFFFFFFFFFFFFFULL);\n+  VDUP(vector, q, int, s, 8, 16, 0x7F);\n+  VDUP(vector, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, q, uint, u, 8, 16, 0xFF);\n+  VDUP(vector, q, uint, u, 16, 8, 0xFFFF);\n+  VDUP(vector, q, uint, u, 32, 4, 0xFFFFFFFF);\n+  VDUP(vector, q, uint, u, 64, 2, 0xFFFFFFFFFFFFFFFFULL);\n+\n+  /* Use -1 shift amount to check cumulative saturation with\n+     round_const.  */\n+  VDUP(vector_shift, , int, s, 8, 8, -1);\n+  VDUP(vector_shift, , int, s, 16, 4, -1);\n+  VDUP(vector_shift, , int, s, 32, 2, -1);\n+  VDUP(vector_shift, , int, s, 64, 1, -1);\n+  VDUP(vector_shift, q, int, s, 8, 16, -1);\n+  VDUP(vector_shift, q, int, s, 16, 8, -1);\n+  VDUP(vector_shift, q, int, s, 32, 4, -1);\n+  VDUP(vector_shift, q, int, s, 64, 2, -1);\n+\n+#undef CMT\n+#define CMT \" (checking cumulative saturation: shift by -1)\"\n+  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_minus1, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_minus1, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_minus1, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_minus1, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_minus1, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_minus1, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_minus1, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_minus1, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_minus1, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_minus1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_minus1, CMT);\n+\n+\n+  /* Use -3 shift amount to check cumulative saturation with\n+     round_const. */\n+  VDUP(vector_shift, , int, s, 8, 8, -3);\n+  VDUP(vector_shift, , int, s, 16, 4, -3);\n+  VDUP(vector_shift, , int, s, 32, 2, -3);\n+  VDUP(vector_shift, , int, s, 64, 1, -3);\n+  VDUP(vector_shift, q, int, s, 8, 16, -3);\n+  VDUP(vector_shift, q, int, s, 16, 8, -3);\n+  VDUP(vector_shift, q, int, s, 32, 4, -3);\n+  VDUP(vector_shift, q, int, s, 64, 2, -3);\n+\n+#undef CMT\n+#define CMT \" (checking cumulative saturation: shift by -3)\"\n+  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_minus3, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_minus3, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_minus3, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_minus3, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_minus3, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_minus3, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_minus3, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_minus3, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_minus3, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_minus3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_minus3, CMT);\n+\n+\n+  /* Use large shift amount.  */\n+  VDUP(vector_shift, , int, s, 8, 8, 10);\n+  VDUP(vector_shift, , int, s, 16, 4, 20);\n+  VDUP(vector_shift, , int, s, 32, 2, 40);\n+  VDUP(vector_shift, , int, s, 64, 1, 70);\n+  VDUP(vector_shift, q, int, s, 8, 16, 10);\n+  VDUP(vector_shift, q, int, s, 16, 8, 20);\n+  VDUP(vector_shift, q, int, s, 32, 4, 40);\n+  VDUP(vector_shift, q, int, s, 64, 2, 70);\n+\n+#undef CMT\n+#define CMT \" (checking cumulative saturation: large shift amount)\"\n+  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_large_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_large_sh, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_large_sh, CMT);\n+\n+\n+  /* Fill input vector with negative values, to check saturation on\n+     limits.  */\n+  VDUP(vector, , int, s, 8, 8, 0x80);\n+  VDUP(vector, , int, s, 16, 4, 0x8000);\n+  VDUP(vector, , int, s, 32, 2, 0x80000000);\n+  VDUP(vector, , int, s, 64, 1, 0x8000000000000000LL);\n+  VDUP(vector, q, int, s, 8, 16, 0x80);\n+  VDUP(vector, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector, q, int, s, 32, 4, 0x80000000);\n+  VDUP(vector, q, int, s, 64, 2, 0x8000000000000000LL);\n+\n+  /* Use large shift amount.  */\n+  VDUP(vector_shift, , int, s, 8, 8, 10);\n+  VDUP(vector_shift, , int, s, 16, 4, 20);\n+  VDUP(vector_shift, , int, s, 32, 2, 40);\n+  VDUP(vector_shift, , int, s, 64, 1, 70);\n+  VDUP(vector_shift, q, int, s, 8, 16, 10);\n+  VDUP(vector_shift, q, int, s, 16, 8, 20);\n+  VDUP(vector_shift, q, int, s, 32, 4, 40);\n+  VDUP(vector_shift, q, int, s, 64, 2, 70);\n+\n+#undef CMT\n+#define CMT \" (checking cumulative saturation: large shift amount with negative input)\"\n+  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_neg_large_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_neg_large_sh, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_neg_large_sh, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_neg_large_sh, CMT);\n+\n+\n+  /* Fill input vector with negative and positive values, to check\n+   * saturation on limits */\n+  VDUP(vector, , int, s, 8, 8, 0x7F);\n+  VDUP(vector, , int, s, 16, 4, 0x7FFF);\n+  VDUP(vector, , int, s, 32, 2, 0x7FFFFFFF);\n+  VDUP(vector, , int, s, 64, 1, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, q, int, s, 8, 16, 0x80);\n+  VDUP(vector, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector, q, int, s, 32, 4, 0x80000000);\n+  VDUP(vector, q, int, s, 64, 2, 0x8000000000000000LL);\n+\n+  /* Use large negative shift amount  */\n+  VDUP(vector_shift, , int, s, 8, 8, -10);\n+  VDUP(vector_shift, , int, s, 16, 4, -20);\n+  VDUP(vector_shift, , int, s, 32, 2, -40);\n+  VDUP(vector_shift, , int, s, 64, 1, -70);\n+  VDUP(vector_shift, q, int, s, 8, 16, -10);\n+  VDUP(vector_shift, q, int, s, 16, 8, -20);\n+  VDUP(vector_shift, q, int, s, 32, 4, -40);\n+  VDUP(vector_shift, q, int, s, 64, 2, -70);\n+\n+#undef CMT\n+#define CMT \" (checking cumulative saturation: large negative shift amount)\"\n+  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_large_neg_sh, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_large_neg_sh, CMT);\n+\n+\n+  /* Fill input vector with 0, to check saturation in case of large\n+   * shift amount */\n+  VDUP(vector, , int, s, 8, 8, 0);\n+  VDUP(vector, , int, s, 16, 4, 0);\n+  VDUP(vector, , int, s, 32, 2, 0);\n+  VDUP(vector, , int, s, 64, 1, 0);\n+  VDUP(vector, q, int, s, 8, 16, 0);\n+  VDUP(vector, q, int, s, 16, 8, 0);\n+  VDUP(vector, q, int, s, 32, 4, 0);\n+  VDUP(vector, q, int, s, 64, 2, 0);\n+\n+  /* Use large shift amount  */\n+  VDUP(vector_shift, , int, s, 8, 8, -10);\n+  VDUP(vector_shift, , int, s, 16, 4, -20);\n+  VDUP(vector_shift, , int, s, 32, 2, -40);\n+  VDUP(vector_shift, , int, s, 64, 1, -70);\n+  VDUP(vector_shift, q, int, s, 8, 16, -10);\n+  VDUP(vector_shift, q, int, s, 16, 8, -20);\n+  VDUP(vector_shift, q, int, s, 32, 4, -40);\n+  VDUP(vector_shift, q, int, s, 64, 2, -70);\n+\n+#undef CMT\n+#define CMT \" (checking cumulative saturation: large negative shift amount with 0 input)\"\n+  TEST_VQRSHL(int, , int, s, 8, 8, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 16, 4, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 32, 2, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , int, s, 64, 1, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 8, 8, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 16, 4, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 32, 2, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, , uint, u, 64, 1, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 8, 16, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 16, 8, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 32, 4, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, int, s, 64, 2, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 8, 16, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 16, 8, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 32, 4, expected_cumulative_sat_large_neg_sh, CMT);\n+  TEST_VQRSHL(int, q, uint, u, 64, 2, expected_cumulative_sat_large_neg_sh, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_large_neg_sh, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_large_neg_sh, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqrshl ();\n+  return 0;\n+}"}]}