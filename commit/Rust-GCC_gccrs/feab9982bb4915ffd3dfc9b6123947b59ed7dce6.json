{"sha": "feab9982bb4915ffd3dfc9b6123947b59ed7dce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVhYjk5ODJiYjQ5MTVmZmQzZGZjOWI2MTIzOTQ3YjU5ZWQ3ZGNlNg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-06-10T17:30:32Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-06-10T17:30:32Z"}, "message": "moxie.h (FUNCTION_VALUE, [...]): Remove macros.\n\n\t* config/moxie/moxie.h (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n\tLIBCALL_VALUE, FUNCTION_VALUE_REGNO_P): Remove macros.\n\t* config/moxie/moxie-protos.h (moxie_function_value): Remove.\n\t* config/moxie/moxie.c (moxie_function_value): Make static.\n\t(moxie_libcall_value, moxie_function_value_regno_p): New functions.\n\t(TARGET_LIBCALL_VALUE, TARGET_FUNCTION_VALUE_REGNO_P): Define.\n\nFrom-SVN: r160565", "tree": {"sha": "9b0e6e691d0c825811112fa4c7651d21f996c71c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b0e6e691d0c825811112fa4c7651d21f996c71c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feab9982bb4915ffd3dfc9b6123947b59ed7dce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feab9982bb4915ffd3dfc9b6123947b59ed7dce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feab9982bb4915ffd3dfc9b6123947b59ed7dce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feab9982bb4915ffd3dfc9b6123947b59ed7dce6/comments", "author": null, "committer": null, "parents": [{"sha": "567a4beb36a461bafb7c4bb42f8289ae659a16ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567a4beb36a461bafb7c4bb42f8289ae659a16ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567a4beb36a461bafb7c4bb42f8289ae659a16ed"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "178a28332c37108ad906c251af44d8b691e56bd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feab9982bb4915ffd3dfc9b6123947b59ed7dce6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feab9982bb4915ffd3dfc9b6123947b59ed7dce6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=feab9982bb4915ffd3dfc9b6123947b59ed7dce6", "patch": "@@ -1,3 +1,12 @@\n+2010-06-10  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/moxie/moxie.h (FUNCTION_VALUE, FUNCTION_OUTGOING_VALUE,\n+\tLIBCALL_VALUE, FUNCTION_VALUE_REGNO_P): Remove macros.\n+\t* config/moxie/moxie-protos.h (moxie_function_value): Remove.\n+\t* config/moxie/moxie.c (moxie_function_value): Make static.\n+\t(moxie_libcall_value, moxie_function_value_regno_p): New functions.\n+\t(TARGET_LIBCALL_VALUE, TARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\n 2010-06-10  Martin Jambor  <mjambor@suse.cz>\n \n \t* Makefile.in (tree-sra.o): Add DBGCNT_H to dependencies."}, {"sha": "471fd99a67d92f86af7f91f86ad81b1217f3a7a9", "filename": "gcc/config/moxie/moxie-protos.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feab9982bb4915ffd3dfc9b6123947b59ed7dce6/gcc%2Fconfig%2Fmoxie%2Fmoxie-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feab9982bb4915ffd3dfc9b6123947b59ed7dce6/gcc%2Fconfig%2Fmoxie%2Fmoxie-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie-protos.h?ref=feab9982bb4915ffd3dfc9b6123947b59ed7dce6", "patch": "@@ -1,5 +1,6 @@\n /* Prototypes for moxie.c functions used in the md file & elsewhere.\n-   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -21,8 +22,6 @@ extern void  moxie_override_options (void);\n extern void  moxie_expand_prologue (void);\n extern void  moxie_expand_epilogue (void);\n extern int   moxie_initial_elimination_offset (int, int);\n-extern rtx   moxie_function_value (const_tree, const_tree, \n-\t\t\t\t   bool ATTRIBUTE_UNUSED);\n extern void  moxie_print_operand (FILE *, rtx, int);\n extern void  moxie_print_operand_address (FILE *, rtx);\n #ifdef RTX_CODE"}, {"sha": "1ce7107daff4a390bdae97cd40d12d4fd2d50228", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feab9982bb4915ffd3dfc9b6123947b59ed7dce6/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feab9982bb4915ffd3dfc9b6123947b59ed7dce6/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=feab9982bb4915ffd3dfc9b6123947b59ed7dce6", "patch": "@@ -70,14 +70,35 @@ moxie_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n \n    We always return values in register $r0 for moxie.  */\n \n-rtx\n+static rtx\n moxie_function_value (const_tree valtype, \n \t\t      const_tree fntype_or_decl ATTRIBUTE_UNUSED,\n \t\t      bool outgoing ATTRIBUTE_UNUSED)\n {\n   return gen_rtx_REG (TYPE_MODE (valtype), MOXIE_R0);\n }\n \n+/* Define how to find the value returned by a library function.\n+\n+   We always return values in register $r0 for moxie.  */\n+\n+static rtx\n+moxie_libcall_value (enum machine_mode mode,\n+                     const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (mode, MOXIE_R0);\n+}\n+\n+/* Handle TARGET_FUNCTION_VALUE_REGNO_P.\n+\n+   We always return values in register $r0 for moxie.  */\n+\n+static bool\n+moxie_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == MOXIE_R0);\n+}\n+\n /* Emit an error message when we're in an asm, and a fatal error for\n    \"normal\" insns.  Formatted output isn't easily implemented, since we\n    use output_operand_lossage to output the actual message and handle the\n@@ -530,6 +551,10 @@ moxie_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n    node node representing a data type.  */\n #undef TARGET_FUNCTION_VALUE\n #define TARGET_FUNCTION_VALUE moxie_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE moxie_libcall_value\n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P moxie_function_value_regno_p\n \n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED hook_bool_void_true"}, {"sha": "266a244c570faa72f8d23c63cdb29ede94cf8f68", "filename": "gcc/config/moxie/moxie.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feab9982bb4915ffd3dfc9b6123947b59ed7dce6/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feab9982bb4915ffd3dfc9b6123947b59ed7dce6/gcc%2Fconfig%2Fmoxie%2Fmoxie.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.h?ref=feab9982bb4915ffd3dfc9b6123947b59ed7dce6", "patch": "@@ -268,18 +268,6 @@ enum reg_class\n \n /* How Scalar Function Values Are Returned */\n \n-/* These macros are deprecated, but we still need them for now since\n-   the version of gcc we're using doesn't fully support\n-   TARGET_FUNCTION_VALUE.  */\n-#define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  moxie_function_value (VALTYPE, FUNC, 0)\n-#define FUNCTION_OUTGOING_VALUE(VALTYPE, FUNC) \\\n-  moxie_function_value (VALTYPE, FUNC, 1)\n-\n-/* A C expression to create an RTX representing the place where a\n-   library function returns a value of mode MODE.  */\n-#define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, 2)\n-\n /* STACK AND CALLING */\n \n /* Define this macro if pushing a word onto the stack moves the stack\n@@ -429,10 +417,6 @@ enum reg_class\n    register in which function arguments are sometimes passed.  */\n #define FUNCTION_ARG_REGNO_P(r) (r >= MOXIE_R0 && r <= MOXIE_R5)\n \n-/* A C expression that is nonzero if REGNO is the number of a hard\n-   register in which the values of called function may come back.  */\n-#define FUNCTION_VALUE_REGNO_P(r) (r == MOXIE_R0)\n-\n /* A macro whose definition is the name of the class to which a valid\n    base register must belong.  A base register is one used in an\n    address which is the register value plus a displacement.  */"}]}