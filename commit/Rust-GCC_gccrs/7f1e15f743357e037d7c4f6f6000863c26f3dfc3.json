{"sha": "7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "node_id": "C_kwDOANBUbNoAKDdmMWUxNWY3NDMzNTdlMDM3ZDdjNGY2ZjYwMDA4NjNjMjZmM2RmYzM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-24T15:38:14Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-24T15:38:14Z"}, "message": "json: preserve key-insertion order [PR109163]\n\nPR other/109163 notes that when we write out JSON files, we traverse\nthe keys within each object via hash_map iteration, and thus the\nordering is non-deterministic - it can arbitrarily vary from run to\nrun and from different machines, making it harder for users to compare\nresults and determine if anything has \"really\" changed.\n\nI'm running into this issue with SARIF output, but there are several\nplaces where we're currently emitting JSON:\n\n  * -fsave-optimization-record emits SRCFILE.opt-record.json.gz\n\t\"This option is experimental and the format of the data within\n\tthe compressed JSON file is subject to change.\"; see\n\toptinfo-emit-json.{h,cc}, dumpfile.cc, etc\n  * -fdiagnostics-format= with the various \"sarif\" and \"json\" options\n  * -fdump-analyzer-json is a developer option in the analyzer\n  * gcov has:\n     \"-j, --json-format: Output JSON intermediate format into\n     .gcov.json.gz file\"\n\nThis patch adds an auto_vec to class json::object to preserve\nkey-insertion order, and use it when writing out objects.  Potentially\nthis slightly slows down JSON output, but I believe that this isn't\nnormally a bottleneck, and that the benefits to the user of\ndeterministic output are worth it.\n\nI had first attempted to use ordered_hash_map.h for this, but ran into\nimpenetrable template errors, so this patch uses a simpler approach of\njust adding an auto_vec to json::object.\n\nTesting showed a failure of diagnostic-format-json-5.c, which was using\na convoluted set of regexps to consume the output; I believe that this\nwas brittle, and was intermittently failing for some of the random\norderings of output.  I rewrote these regexps to work with the expected\noutput order.  The other such tests seem to pass with the\nnow-deterministic orderings.\n\ngcc/ChangeLog:\n\tPR other/109163\n\t* json.cc: Update comments to indicate that we now preserve\n\tinsertion order of keys within objects.\n\t(object::print): Traverse keys in insertion order.\n\t(object::set): Preserve insertion order of keys.\n\t(selftest::test_writing_objects): Add an additional key to verify\n\tthat we preserve insertion order.\n\t* json.h (object::m_keys): New field.\n\ngcc/testsuite/ChangeLog:\n\tPR other/109163\n\t* c-c++-common/diagnostic-format-json-1.c: Update comment.\n\t* c-c++-common/diagnostic-format-json-2.c: Likewise.\n\t* c-c++-common/diagnostic-format-json-3.c: Likewise.\n\t* c-c++-common/diagnostic-format-json-4.c: Likewise.\n\t* c-c++-common/diagnostic-format-json-5.c: Rewrite regexps.\n\t* c-c++-common/diagnostic-format-json-stderr-1.c: Update comment.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "d0a5dd454175e6c1858bca65aaa5e78c9374ea4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0a5dd454175e6c1858bca65aaa5e78c9374ea4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0409aa5a2de9ce3164933814a4a7adc91f6acb96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0409aa5a2de9ce3164933814a4a7adc91f6acb96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0409aa5a2de9ce3164933814a4a7adc91f6acb96"}], "stats": {"total": 165, "additions": 95, "deletions": 70}, "files": [{"sha": "741e97b20e5ef484c62dab27f1e7350d8e6b375e", "filename": "gcc/json.cc", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Fjson.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Fjson.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.cc?ref=7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "patch": "@@ -31,8 +31,11 @@ using namespace json;\n /* class json::value.  */\n \n /* Dump this json::value tree to OUTF.\n-   No formatting is done.  There are no guarantees about the order\n-   in which the key/value pairs of json::objects are printed.  */\n+\n+   No formatting is done.\n+\n+   The key/value pairs of json::objects are printed in the order\n+   in which the keys were originally inserted.  */\n \n void\n value::dump (FILE *outf) const\n@@ -44,7 +47,7 @@ value::dump (FILE *outf) const\n }\n \n /* class json::object, a subclass of json::value, representing\n-   an unordered collection of key/value pairs.  */\n+   an ordered collection of key/value pairs.  */\n \n /* json:object's dtor.  */\n \n@@ -62,14 +65,17 @@ object::~object ()\n void\n object::print (pretty_printer *pp) const\n {\n-  /* Note that the order is not guaranteed.  */\n   pp_character (pp, '{');\n-  for (map_t::iterator it = m_map.begin (); it != m_map.end (); ++it)\n+\n+  /* Iterate in the order that the keys were inserted.  */\n+  unsigned i;\n+  const char *key;\n+  FOR_EACH_VEC_ELT (m_keys, i, key)\n     {\n-      if (it != m_map.begin ())\n+      if (i > 0)\n \tpp_string (pp, \", \");\n-      const char *key = const_cast <char *>((*it).first);\n-      value *value = (*it).second;\n+      map_t &mut_map = const_cast<map_t &> (m_map);\n+      value *value = *mut_map.get (key);\n       pp_doublequote (pp);\n       pp_string (pp, key); // FIXME: escaping?\n       pp_doublequote (pp);\n@@ -97,9 +103,13 @@ object::set (const char *key, value *v)\n       *ptr = v;\n     }\n   else\n-    /* If the key wasn't already present, take a copy of the key,\n-       and store the value.  */\n-    m_map.put (xstrdup (key), v);\n+    {\n+      /* If the key wasn't already present, take a copy of the key,\n+\t and store the value.  */\n+      char *owned_key = xstrdup (key);\n+      m_map.put (owned_key, v);\n+      m_keys.safe_push (owned_key);\n+    }\n }\n \n /* Get the json::value * for KEY.\n@@ -295,15 +305,17 @@ test_object_get ()\n   ASSERT_EQ (obj.get (\"not-present\"), NULL);\n }\n \n-/* Verify that JSON objects are written correctly.  We can't test more than\n-   one key/value pair, as we don't impose a guaranteed ordering.  */\n+/* Verify that JSON objects are written correctly.  */\n \n static void\n test_writing_objects ()\n {\n   object obj;\n   obj.set (\"foo\", new json::string (\"bar\"));\n-  assert_print_eq (obj, \"{\\\"foo\\\": \\\"bar\\\"}\");\n+  obj.set (\"baz\", new json::string (\"quux\"));\n+  /* This test relies on json::object writing out key/value pairs\n+     in key-insertion order.  */\n+  assert_print_eq (obj, \"{\\\"foo\\\": \\\"bar\\\", \\\"baz\\\": \\\"quux\\\"}\");\n }\n \n /* Verify that JSON arrays are written correctly.  */"}, {"sha": "057119db277861e9f95913b9da10b9830df390e7", "filename": "gcc/json.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Fjson.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Fjson.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.h?ref=7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "patch": "@@ -82,8 +82,11 @@ class value\n   void dump (FILE *) const;\n };\n \n-/* Subclass of value for objects: an unordered collection of\n-   key/value pairs.  */\n+/* Subclass of value for objects: a collection of key/value pairs\n+   preserving the ordering in which keys were inserted.\n+\n+   Preserving the order eliminates non-determinism in the output,\n+   making it easier for the user to compare repeated invocations.  */\n \n class object : public value\n {\n@@ -100,6 +103,9 @@ class object : public value\n   typedef hash_map <char *, value *,\n     simple_hashmap_traits<nofree_string_hash, value *> > map_t;\n   map_t m_map;\n+\n+  /* Keep track of order in which keys were inserted.  */\n+  auto_vec <const char *> m_keys;\n };\n \n /* Subclass of value for arrays.  */"}, {"sha": "6bab30e3e6cb0b94a3fcc2c826a512b1a2019b58", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-1.c?ref=7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "patch": "@@ -4,8 +4,7 @@\n #error message\n \n /* Use dg-regexp to consume the JSON output starting with\n-   the innermost values, and working outwards.\n-   We can't rely on any ordering of the keys.  */\n+   the innermost values, and working outwards.  */\n \n /* { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" } */\n /* { dg-regexp \"\\\"column-origin\\\": 1\" } */"}, {"sha": "3c12103c9f847746a4adb8e73bb8b73497a54356", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-2.c?ref=7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "patch": "@@ -4,8 +4,7 @@\n #warning message\n \n /* Use dg-regexp to consume the JSON output starting with\n-   the innermost values, and working outwards.\n-   We can't rely on any ordering of the keys.  */\n+   the innermost values, and working outwards.  */\n \n /* { dg-regexp \"\\\"kind\\\": \\\"warning\\\"\" } */\n /* { dg-regexp \"\\\"column-origin\\\": 1\" } */"}, {"sha": "11d74624ff1643d29300aa8567787bb9dca0076c", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-3.c?ref=7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "patch": "@@ -4,8 +4,7 @@\n #warning message\n \n /* Use dg-regexp to consume the JSON output starting with\n-   the innermost values, and working outwards.\n-   We can't rely on any ordering of the keys.  */\n+   the innermost values, and working outwards.  */\n \n /* { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" } */\n /* { dg-regexp \"\\\"column-origin\\\": 1\" } */"}, {"sha": "cec1cf924b4f77a26202cf9269e9f54560b3e89c", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-4.c?ref=7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "patch": "@@ -10,8 +10,7 @@ int test (void)\n }\n \n /* Use dg-regexp to consume the JSON output starting with\n-   the innermost values, and working outwards.\n-   We can't rely on any ordering of the keys.  */\n+   the innermost values, and working outwards.  */\n \n /* Verify nested diagnostics.  */\n "}, {"sha": "86f8c5fb3746905dd5ff4d992daa69daf4b55edc", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-5.c", "status": "modified", "additions": 56, "deletions": 44, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-5.c?ref=7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "patch": "@@ -8,49 +8,61 @@ int test (struct s *ptr)\n   return ptr->colour;\n }\n \n-/* Use dg-regexp to consume the JSON output starting with\n-   the innermost values, and working outwards.\n-   We can't rely on any ordering of the keys.  */\n+/* Verify fix-it hints.\n \n-/* { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" } */\n-/* { dg-regexp \"\\\"column-origin\\\": 1\" } */\n-/* { dg-regexp \"\\\"escape-source\\\": false\" } */\n-/* { dg-regexp \"\\\"message\\\": \\\".*\\\"\" } */\n+   Use dg-regexp to consume the JSON output from start to\n+   finish, relying on the ordering of the keys.\n+   The following uses indentation to visualize the structure\n+   of the JSON (although the actual output is all on one line).\n \n-/* Verify fix-it hints.  */\n-\n-/* { dg-regexp \"\\\"string\\\": \\\"color\\\"\" } */\n-\n-/* { dg-regexp \"\\\"start\\\": \\{\" } */\n-/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-5.c\\\"\" } */\n-/* { dg-regexp \"\\\"line\\\": 8\" } */\n-/* { dg-regexp \"\\\"column\\\": 15\" } */\n-/* { dg-regexp \"\\\"display-column\\\": 15\" } */\n-/* { dg-regexp \"\\\"byte-column\\\": 15\" } */\n-\n-/* { dg-regexp \"\\\"next\\\": \\{\" } */\n-/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-5.c\\\"\" } */\n-/* { dg-regexp \"\\\"line\\\": 8\" } */\n-/* { dg-regexp \"\\\"column\\\": 21\" } */\n-/* { dg-regexp \"\\\"display-column\\\": 21\" } */\n-/* { dg-regexp \"\\\"byte-column\\\": 21\" } */\n-\n-/* { dg-regexp \"\\\"fixits\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n-\n-/* { dg-regexp \"\\\"caret\\\": \\{\" } */\n-/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-5.c\\\"\" } */\n-/* { dg-regexp \"\\\"line\\\": 8\" } */\n-/* { dg-regexp \"\\\"column\\\": 15\" } */\n-/* { dg-regexp \"\\\"display-column\\\": 15\" } */\n-/* { dg-regexp \"\\\"byte-column\\\": 15\" } */\n-\n-/* { dg-regexp \"\\\"finish\\\": \\{\" } */\n-/* { dg-regexp \"\\\"file\\\": \\\"\\[^\\n\\r\\\"\\]*diagnostic-format-json-5.c\\\"\" } */\n-/* { dg-regexp \"\\\"line\\\": 8\" } */\n-/* { dg-regexp \"\\\"column\\\": 20\" } */\n-/* { dg-regexp \"\\\"display-column\\\": 20\" } */\n-/* { dg-regexp \"\\\"byte-column\\\": 20\" } */\n-\n-/* { dg-regexp \"\\\"locations\\\": \\[\\[\\{\\}, \\]*\\]\" } */\n-/* { dg-regexp \"\\\"children\\\": \\[\\[\\]\\[\\]\\]\" } */\n-/* { dg-regexp \"\\[\\[\\{\\}, \\]*\\]\" } */\n+  { dg-regexp {\\[} }\n+    { dg-regexp {\\{} }\n+     { dg-regexp {\"kind\": \"error\"} }\n+     { dg-regexp {, \"message\": \"'struct s' has no member named 'colour'; did you mean 'color'\\?\"} }\n+     { dg-regexp {, \"children\": \\[\\]} }\n+     { dg-regexp {, \"column-origin\": 1} }\n+     { dg-regexp {, \"locations\": } }\n+       { dg-regexp {\\[} }\n+         { dg-regexp {\\{} }\n+           { dg-regexp {\"caret\": } }\n+             { dg-regexp {\\{} }\n+               { dg-regexp {\"file\": \"[^\\n\\r\"]*diagnostic-format-json-5.c\"} }\n+               { dg-regexp {, \"line\": 8} }\n+               { dg-regexp {, \"display-column\": 15} }\n+               { dg-regexp {, \"byte-column\": 15} }\n+               { dg-regexp {, \"column\": 15} }\n+             { dg-regexp {\\}} }\n+           { dg-regexp {, \"finish\": } }\n+             { dg-regexp {\\{} }\n+               { dg-regexp {\"file\": \"[^\\n\\r\"]*diagnostic-format-json-5.c\"} }\n+               { dg-regexp {, \"line\": 8} }\n+               { dg-regexp {, \"display-column\": 20} }\n+               { dg-regexp {, \"byte-column\": 20} }\n+               { dg-regexp {, \"column\": 20} }\n+             { dg-regexp {\\}} }\n+           { dg-regexp {\\}} }\n+         { dg-regexp {\\]} }\n+       { dg-regexp {, \"fixits\": } }\n+       { dg-regexp {\\[} }\n+         { dg-regexp {\\{} }\n+           { dg-regexp {\"start\": } }\n+             { dg-regexp {\\{} }\n+               { dg-regexp {\"file\": \"[^\\n\\r\"]*diagnostic-format-json-5.c\"} }\n+               { dg-regexp {, \"line\": 8} }\n+               { dg-regexp {, \"display-column\": 15} }\n+               { dg-regexp {, \"byte-column\": 15} }\n+               { dg-regexp {, \"column\": 15} }\n+             { dg-regexp {\\}} }\n+           { dg-regexp {, \"next\": } }\n+             { dg-regexp {\\{} }\n+               { dg-regexp {\"file\": \"[^\\n\\r\"]*diagnostic-format-json-5.c\"} }\n+               { dg-regexp {, \"line\": 8} }\n+               { dg-regexp {, \"display-column\": 21} }\n+               { dg-regexp {, \"byte-column\": 21} }\n+               { dg-regexp {, \"column\": 21} }\n+             { dg-regexp {\\}} }\n+           { dg-regexp {, \"string\": \"color\"} }\n+         { dg-regexp {\\}} }\n+       { dg-regexp {\\]} }\n+     { dg-regexp {, \"escape-source\": false\\}} }\n+   { dg-regexp {\\]} }  */"}, {"sha": "bcfa92110f546e22ea9946e78201caf49a208f0a", "filename": "gcc/testsuite/c-c++-common/diagnostic-format-json-stderr-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-stderr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f1e15f743357e037d7c4f6f6000863c26f3dfc3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-stderr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdiagnostic-format-json-stderr-1.c?ref=7f1e15f743357e037d7c4f6f6000863c26f3dfc3", "patch": "@@ -6,8 +6,7 @@\n #error message\n \n /* Use dg-regexp to consume the JSON output starting with\n-   the innermost values, and working outwards.\n-   We can't rely on any ordering of the keys.  */\n+   the innermost values, and working outwards.  */\n \n /* { dg-regexp \"\\\"kind\\\": \\\"error\\\"\" } */\n /* { dg-regexp \"\\\"column-origin\\\": 1\" } */"}]}