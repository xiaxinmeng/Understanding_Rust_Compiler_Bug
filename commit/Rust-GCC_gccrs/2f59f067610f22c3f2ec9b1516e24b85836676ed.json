{"sha": "2f59f067610f22c3f2ec9b1516e24b85836676ed", "node_id": "C_kwDOANBUbNoAKDJmNTlmMDY3NjEwZjIyYzNmMmVjOWIxNTE2ZTI0Yjg1ODM2Njc2ZWQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-22T10:32:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-22T10:33:45Z"}, "message": "libiberty: Fix up debug.temp.o creation if *.o has 64K+ sections [PR104617]\n\nOn\n #define A(n) int foo1##n(void) { return 1##n; }\n #define B(n) A(n##0) A(n##1) A(n##2) A(n##3) A(n##4) A(n##5) A(n##6) A(n##7) A(n##8) A(n##9)\n #define C(n) B(n##0) B(n##1) B(n##2) B(n##3) B(n##4) B(n##5) B(n##6) B(n##7) B(n##8) B(n##9)\n #define D(n) C(n##0) C(n##1) C(n##2) C(n##3) C(n##4) C(n##5) C(n##6) C(n##7) C(n##8) C(n##9)\n #define E(n) D(n##0) D(n##1) D(n##2) D(n##3) D(n##4) D(n##5) D(n##6) D(n##7) D(n##8) D(n##9)\n E(0) E(1) E(2) D(30) D(31) C(320) C(321) C(322) C(323) C(324) C(325)\n B(3260) B(3261) B(3262) B(3263) A(32640) A(32641) A(32642)\ntestcase with\n./xgcc -B ./ -c -g -fpic -ffat-lto-objects -flto  -O0 -o foo1.o foo1.c -ffunction-sections\n./xgcc -B ./ -shared -g -fpic -flto -O0 -o foo1.so foo1.o\n/tmp/ccTW8mBm.debug.temp.o: file not recognized: file format not recognized\n(testcase too slow to be included into testsuite).\nThe problem is clearly reported by readelf:\nreadelf: foo1.o.debug.temp.o: Warning: Section 2 has an out of range sh_link value of 65321\nreadelf: foo1.o.debug.temp.o: Warning: Section 5 has an out of range sh_link value of 65321\nreadelf: foo1.o.debug.temp.o: Warning: Section 10 has an out of range sh_link value of 65323\nreadelf: foo1.o.debug.temp.o: Warning: [ 2]: Link field (65321) should index a symtab section.\nreadelf: foo1.o.debug.temp.o: Warning: [ 5]: Link field (65321) should index a symtab section.\nreadelf: foo1.o.debug.temp.o: Warning: [10]: Link field (65323) should index a string section.\nbecause simple_object_elf_copy_lto_debug_sections doesn't adjust sh_info and\nsh_link fields in ElfNN_Shdr if they are in between SHN_{LO,HI}RESERVE\ninclusive.  Not adjusting those is incorrect though, SHN_{LO,HI}RESERVE\nrange is only relevant to the 16-bit fields, mainly st_shndx in ElfNN_Sym\nwhere if one needs >= SHN_LORESERVE section number, SHN_XINDEX should be\nused instead and .symtab_shndx section should contain the real section\nindex, and in ElfNN_Ehdr e_shnum and e_shstrndx fields, where if >=\nSHN_LORESERVE value is needed it should put those into\nShdr[0].sh_{size,link}.  But, sh_{link,info} are 32-bit fields which can\ncontain any section index.\n\nNote, as simple-object-elf.c mentions, binutils from 2.12 to 2.18 (so before\n2011) used to mishandle the > 63.75K sections case and assumed there is a\nhole in between the sections, but what\nsimple_object_elf_copy_lto_debug_sections does wouldn't help in that case\nfor the debug temp object creation, we'd need to detect the case also in\nthat routine and take it into account in the remapping etc.  I think\nit is not worth it given that it is over 10 years, if somebody needs\n63.75K or more sections, better use more recent binutils.\n\n2022-02-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR lto/104617\n\t* simple-object-elf.c (simple_object_elf_match): Fix up URL\n\tin comment.\n\t(simple_object_elf_copy_lto_debug_sections): Remap sh_info and\n\tsh_link even if they are in the SHN_LORESERVE .. SHN_HIRESERVE\n\trange (inclusive).", "tree": {"sha": "1580acc8d141ed7e2666316f868a113a635747e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1580acc8d141ed7e2666316f868a113a635747e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f59f067610f22c3f2ec9b1516e24b85836676ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f59f067610f22c3f2ec9b1516e24b85836676ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f59f067610f22c3f2ec9b1516e24b85836676ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f59f067610f22c3f2ec9b1516e24b85836676ed/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d44dc131f48254fccc69ec4178fec030e0e2761d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44dc131f48254fccc69ec4178fec030e0e2761d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d44dc131f48254fccc69ec4178fec030e0e2761d"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "677a18a77761a14e8b38785c2e5e68cdde675f51", "filename": "libiberty/simple-object-elf.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f59f067610f22c3f2ec9b1516e24b85836676ed/libiberty%2Fsimple-object-elf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f59f067610f22c3f2ec9b1516e24b85836676ed/libiberty%2Fsimple-object-elf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsimple-object-elf.c?ref=2f59f067610f22c3f2ec9b1516e24b85836676ed", "patch": "@@ -528,7 +528,7 @@ simple_object_elf_match (unsigned char header[SIMPLE_OBJECT_MATCH_HEADER_LEN],\n \t     not handle objects with more than SHN_LORESERVE sections\n \t     correctly.  All large section indexes were offset by\n \t     0x100.  There is more information at\n-\t     http://sourceware.org/bugzilla/show_bug.cgi?id-5900 .\n+\t     https://sourceware.org/PR5900 .\n \t     Fortunately these object files are easy to detect, as the\n \t     GNU binutils always put the section header string table\n \t     near the end of the list of sections.  Thus if the\n@@ -1559,17 +1559,13 @@ simple_object_elf_copy_lto_debug_sections (simple_object_read *sobj,\n \t  {\n \t    sh_info = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n \t\t\t\t       shdr, sh_info, Elf_Word);\n-\t    if (sh_info < SHN_LORESERVE\n-\t\t|| sh_info > SHN_HIRESERVE)\n-\t      sh_info = sh_map[sh_info];\n+\t    sh_info = sh_map[sh_info];\n \t    ELF_SET_FIELD (type_functions, ei_class, Shdr,\n \t\t\t   shdr, sh_info, Elf_Word, sh_info);\n \t  }\n \tsh_link = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n \t\t\t\t   shdr, sh_link, Elf_Word);\n-\tif (sh_link < SHN_LORESERVE\n-\t    || sh_link > SHN_HIRESERVE)\n-\t  sh_link = sh_map[sh_link];\n+\tsh_link = sh_map[sh_link];\n \tELF_SET_FIELD (type_functions, ei_class, Shdr,\n \t\t       shdr, sh_link, Elf_Word, sh_link);\n       }"}]}