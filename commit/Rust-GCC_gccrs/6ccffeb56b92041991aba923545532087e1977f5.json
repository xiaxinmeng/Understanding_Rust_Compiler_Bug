{"sha": "6ccffeb56b92041991aba923545532087e1977f5", "node_id": "C_kwDOANBUbNoAKDZjY2ZmZWI1NmI5MjA0MTk5MWFiYTkyMzU0NTUzMjA4N2UxOTc3ZjU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-13T13:30:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:36:55Z"}, "message": "libstdc++: Implement LWG 3506 for std::priority_queue\n\nThe LWG 3506 issue ads allocator-extended versions of the constructors\nthat take iterator arguments.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_queue.h (priority_queue): Add\n\tallocator-extended overloads for constructors taking iterator.\n\t* testsuite/23_containers/priority_queue/lwg3506.cc: New test.", "tree": {"sha": "e9ff8f545b5c312140c45f3dbf6b1c1be89ba986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9ff8f545b5c312140c45f3dbf6b1c1be89ba986"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ccffeb56b92041991aba923545532087e1977f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccffeb56b92041991aba923545532087e1977f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ccffeb56b92041991aba923545532087e1977f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ccffeb56b92041991aba923545532087e1977f5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e79bde6ada42a47b0a266f1cc85efb2eed44e45a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79bde6ada42a47b0a266f1cc85efb2eed44e45a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79bde6ada42a47b0a266f1cc85efb2eed44e45a"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "4519f9f2fecec8ab51269b8d76ff9f3fc998ec86", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccffeb56b92041991aba923545532087e1977f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccffeb56b92041991aba923545532087e1977f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=6ccffeb56b92041991aba923545532087e1977f5", "patch": "@@ -626,6 +626,49 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  c.insert(c.end(), __first, __last);\n \t  std::make_heap(c.begin(), c.end(), comp);\n \t}\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3506. Missing allocator-extended constructors for priority_queue\n+      template<typename _InputIterator, typename _Alloc,\n+\t       typename = std::_RequireInputIter<_InputIterator>,\n+\t       typename _Requires = _Uses<_Alloc>>\n+\tpriority_queue(_InputIterator __first, _InputIterator __last,\n+\t\t       const _Alloc& __alloc)\n+\t: c(__first, __last, __alloc), comp()\n+\t{ std::make_heap(c.begin(), c.end(), comp); }\n+\n+      template<typename _InputIterator, typename _Alloc,\n+\t       typename = std::_RequireInputIter<_InputIterator>,\n+\t       typename _Requires = _Uses<_Alloc>>\n+\tpriority_queue(_InputIterator __first, _InputIterator __last,\n+\t\t       const _Compare& __x, const _Alloc& __alloc)\n+\t: c(__first, __last, __alloc), comp(__x)\n+\t{ std::make_heap(c.begin(), c.end(), comp); }\n+\n+      template<typename _InputIterator, typename _Alloc,\n+\t       typename = std::_RequireInputIter<_InputIterator>,\n+\t       typename _Requires = _Uses<_Alloc>>\n+\tpriority_queue(_InputIterator __first, _InputIterator __last,\n+\t\t       const _Compare& __x, const _Sequence& __s,\n+\t\t       const _Alloc& __alloc)\n+\t: c(__s, __alloc), comp(__x)\n+\t{\n+\t  __glibcxx_requires_valid_range(__first, __last);\n+\t  c.insert(c.end(), __first, __last);\n+\t  std::make_heap(c.begin(), c.end(), comp);\n+\t}\n+\n+      template<typename _InputIterator, typename _Alloc,\n+\t       typename _Requires = _Uses<_Alloc>>\n+\tpriority_queue(_InputIterator __first, _InputIterator __last,\n+\t\t       const _Compare& __x, _Sequence&& __s,\n+\t\t       const _Alloc& __alloc)\n+\t: c(std::move(__s), __alloc), comp(__x)\n+\t{\n+\t  __glibcxx_requires_valid_range(__first, __last);\n+\t  c.insert(c.end(), __first, __last);\n+\t  std::make_heap(c.begin(), c.end(), comp);\n+\t}\n #endif\n \n       /**"}, {"sha": "c9c803df8d2bf2723dcdf0ffafa28a2f6a62d181", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/lwg3506.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ccffeb56b92041991aba923545532087e1977f5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Flwg3506.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ccffeb56b92041991aba923545532087e1977f5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Flwg3506.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Flwg3506.cc?ref=6ccffeb56b92041991aba923545532087e1977f5", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do run { target c++11 } }\n+\n+#include <queue>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n+\n+void\n+test_lwg3506()\n+{\n+  // LWG 3506 Missing allocator-extended constructors for priority_queue\n+\n+  using Alloc = __gnu_test::uneq_allocator<int>;\n+\n+  using Container = std::vector<int, Alloc>;\n+\n+  struct Queue : std::priority_queue<int, Container>\n+  {\n+    using priority_queue::priority_queue;\n+\n+    Alloc get_allocator() const { return c.get_allocator(); }\n+  };\n+\n+  using Compare = Queue::value_compare;\n+\n+  const Alloc a1(1), a2(2), a3(3), a4(4);\n+  const int vals[] = { 5, 3, 9, 1, 7 };\n+  Container cont({ 20, 30, 40 }, Alloc(99));\n+\n+  Queue q1(vals, vals+5, a1);\n+  VERIFY( q1.get_allocator() == a1 );\n+  VERIFY( q1.size() == 5 );\n+  VERIFY( q1.top() == 9 );\n+\n+  Queue q2(vals, vals+5, Compare(), a2);\n+  VERIFY( q2.get_allocator() == a2 );\n+  VERIFY( q2.size() == 5 );\n+  VERIFY( q2.top() == 9 );\n+\n+  Queue q3(vals, vals+5, Compare(), cont, a3);\n+  VERIFY( q3.get_allocator() == a3 );\n+  VERIFY( q3.size() == 8 );\n+  VERIFY( q3.top() == 40 );\n+\n+  Queue q4(vals, vals+5, Compare(), std::move(cont), a4);\n+  VERIFY( q4.get_allocator() == a4 );\n+  VERIFY( q4.size() == 8 );\n+  VERIFY( q4.top() == 40 );\n+  VERIFY( cont.empty() );\n+}\n+\n+int main()\n+{\n+  test_lwg3506();\n+}"}]}