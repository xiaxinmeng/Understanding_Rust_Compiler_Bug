{"sha": "7c45393e40d63f23b2691285d5ed450ce4fb5389", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M0NTM5M2U0MGQ2M2YyM2IyNjkxMjg1ZDVlZDQ1MGNlNGZiNTM4OQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-06-16T21:17:31Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-06-16T21:17:31Z"}, "message": "config.gcc (extra_headers): Add ia32intrin.h for x86.\n\n2009-06-16  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config.gcc (extra_headers): Add ia32intrin.h for x86.\n\n\t* config/i386/i386.c (ix86_builtins): Add IX86_BUILTIN_BSRSI,\n\tIX86_BUILTIN_BSRDI.  IX86_BUILTIN_RDPMC, IX86_BUILTIN_RDTSC.\n\tIX86_BUILTIN_RDTSCP.  IX86_BUILTIN_ROLQI, IX86_BUILTIN_ROLHI,\n\tIX86_BUILTIN_RORQI and IX86_BUILTIN_RORHI.\n\t(ix86_special_builtin_type): Add UINT64_FTYPE_VOID,\n\tUINT64_FTYPE_PINT, INT_FTYPE_INT, UINT64_FTYPE_INT,\n\tINT64_FTYPE_INT64, UINT16_FTYPE_UINT16_INT and\n\tUINT8_FTYPE_UINT8_INT\n\t(bdesc_special_args): Add __builtin_ia32_rdtsc and\n\t__builtin_ia32_rdtscp.\n\t(bdesc_args): Add __builtin_ia32_bsrsi, __builtin_ia32_bsrdi,\n\t__builtin_ia32_rolqi, __builtin_ia32_rolhi, __builtin_ia32_rorqi\n\tand __builtin_ia32_rorhi,\n\t(ix86_init_mmx_sse_builtins): Handle UINT64_FTYPE_VOID,\n\tUINT64_FTYPE_PINT, INT_FTYPE_INT, UINT64_FTYPE_INT,\n\tINT64_FTYPE_INT64, UINT16_FTYPE_UINT16_INT and\n\tUINT8_FTYPE_UINT8_INT.\n\t(ix86_expand_args_builtin): Likewise.\n\t(ix86_expand_special_args_builtin): Likewise.\n\n\t* config/i386/i386.md (UNSPECV_RDTSCP): New.\n\t(UNSPECV_RDTSC): Likewise.\n\t(UNSPECV_RDPMC): Likewise.\n\t(*bsr): Removed to ...\n\t(bsr): This\n\t(*bsr_rex64): Removed to ...\n\t(bsr_rex64): This.\n\t(rdpmc): New.\n\t(*rdpmc): Likewise.\n\t(*rdpmc_rex64): Likewise.\n\t(rdtsc): Likewise.\n\t(*rdtsc): Likewise.\n\t(*rdtsc_rex64): Likewise.\n\t(rdtscp): Likewise.\n\t(*rdtscp): Likewise.\n\t(*rdtscp_rex64): Likewise.\n\n\t* config/i386/ia32intrin.h: New.\n\n\t* config/i386/x86intrin.h: Include <ia32intrin.h>.\n\nFrom-SVN: r148554", "tree": {"sha": "45ac6794a48bd3484b3e2a6c77c35d5300994e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45ac6794a48bd3484b3e2a6c77c35d5300994e10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c45393e40d63f23b2691285d5ed450ce4fb5389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c45393e40d63f23b2691285d5ed450ce4fb5389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c45393e40d63f23b2691285d5ed450ce4fb5389", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c45393e40d63f23b2691285d5ed450ce4fb5389/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd3b0fafaaebab56b17ec9f4fceff4c0f8e26aec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3b0fafaaebab56b17ec9f4fceff4c0f8e26aec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3b0fafaaebab56b17ec9f4fceff4c0f8e26aec"}], "stats": {"total": 542, "additions": 538, "deletions": 4}, "files": [{"sha": "67f67eac56314b714e257f497ae7b2ad4aa9ee92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c45393e40d63f23b2691285d5ed450ce4fb5389", "patch": "@@ -1,3 +1,48 @@\n+2009-06-16  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config.gcc (extra_headers): Add ia32intrin.h for x86.\n+\n+\t* config/i386/i386.c (ix86_builtins): Add IX86_BUILTIN_BSRSI,\n+\tIX86_BUILTIN_BSRDI.  IX86_BUILTIN_RDPMC, IX86_BUILTIN_RDTSC.\n+\tIX86_BUILTIN_RDTSCP.  IX86_BUILTIN_ROLQI, IX86_BUILTIN_ROLHI,\n+\tIX86_BUILTIN_RORQI and IX86_BUILTIN_RORHI.\n+\t(ix86_special_builtin_type): Add UINT64_FTYPE_VOID,\n+\tUINT64_FTYPE_PINT, INT_FTYPE_INT, UINT64_FTYPE_INT,\n+\tINT64_FTYPE_INT64, UINT16_FTYPE_UINT16_INT and\n+\tUINT8_FTYPE_UINT8_INT\n+\t(bdesc_special_args): Add __builtin_ia32_rdtsc and\n+\t__builtin_ia32_rdtscp.\n+\t(bdesc_args): Add __builtin_ia32_bsrsi, __builtin_ia32_bsrdi,\n+\t__builtin_ia32_rolqi, __builtin_ia32_rolhi, __builtin_ia32_rorqi\n+\tand __builtin_ia32_rorhi,\n+\t(ix86_init_mmx_sse_builtins): Handle UINT64_FTYPE_VOID,\n+\tUINT64_FTYPE_PINT, INT_FTYPE_INT, UINT64_FTYPE_INT,\n+\tINT64_FTYPE_INT64, UINT16_FTYPE_UINT16_INT and\n+\tUINT8_FTYPE_UINT8_INT.\n+\t(ix86_expand_args_builtin): Likewise.\n+\t(ix86_expand_special_args_builtin): Likewise.\n+\n+\t* config/i386/i386.md (UNSPECV_RDTSCP): New.\n+\t(UNSPECV_RDTSC): Likewise.\n+\t(UNSPECV_RDPMC): Likewise.\n+\t(*bsr): Removed to ...\n+\t(bsr): This\n+\t(*bsr_rex64): Removed to ...\n+\t(bsr_rex64): This.\n+\t(rdpmc): New.\n+\t(*rdpmc): Likewise.\n+\t(*rdpmc_rex64): Likewise.\n+\t(rdtsc): Likewise.\n+\t(*rdtsc): Likewise.\n+\t(*rdtsc_rex64): Likewise.\n+\t(rdtscp): Likewise.\n+\t(*rdtscp): Likewise.\n+\t(*rdtscp_rex64): Likewise.\n+\n+\t* config/i386/ia32intrin.h: New.\n+\n+\t* config/i386/x86intrin.h: Include <ia32intrin.h>.\n+\n 2009-06-16  Ian Lance Taylor  <iant@google.com>\n \n \t* ira-build.c (copy_info_to_removed_store_destinations):"}, {"sha": "7b599173371c9006435efc46ba61dbfb850fcbc4", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7c45393e40d63f23b2691285d5ed450ce4fb5389", "patch": "@@ -288,7 +288,7 @@ i[34567]86-*-*)\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n \t\t       nmmintrin.h bmmintrin.h mmintrin-common.h\n \t\t       wmmintrin.h immintrin.h x86intrin.h avxintrin.h \n-\t\t       cross-stdarg.h\"\n+\t\t       ia32intrin.h cross-stdarg.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -298,7 +298,7 @@ x86_64-*-*)\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n \t\t       nmmintrin.h bmmintrin.h mmintrin-common.h\n \t\t       wmmintrin.h immintrin.h x86intrin.h avxintrin.h \n-\t\t       cross-stdarg.h\"\n+\t\t       ia32intrin.h cross-stdarg.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "0e4e46c38889d2709ffad27043b08d728124982a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7c45393e40d63f23b2691285d5ed450ce4fb5389", "patch": "@@ -20769,6 +20769,16 @@ enum ix86_builtins\n   IX86_BUILTIN_MFENCE,\n   IX86_BUILTIN_LFENCE,\n \n+  IX86_BUILTIN_BSRSI,\n+  IX86_BUILTIN_BSRDI,\n+  IX86_BUILTIN_RDPMC,\n+  IX86_BUILTIN_RDTSC,\n+  IX86_BUILTIN_RDTSCP,\n+  IX86_BUILTIN_ROLQI,\n+  IX86_BUILTIN_ROLHI,\n+  IX86_BUILTIN_RORQI,\n+  IX86_BUILTIN_RORHI,\n+\n   /* SSE3.  */\n   IX86_BUILTIN_ADDSUBPS,\n   IX86_BUILTIN_HADDPS,\n@@ -21471,6 +21481,8 @@ enum ix86_special_builtin_type\n {\n   SPECIAL_FTYPE_UNKNOWN,\n   VOID_FTYPE_VOID,\n+  UINT64_FTYPE_VOID,\n+  UINT64_FTYPE_PINT,\n   V32QI_FTYPE_PCCHAR,\n   V16QI_FTYPE_PCCHAR,\n   V8SF_FTYPE_PCV4SF,\n@@ -21516,6 +21528,9 @@ enum ix86_builtin_type\n   INT_FTYPE_V4SF_V4SF_PTEST,\n   INT_FTYPE_V2DI_V2DI_PTEST,\n   INT_FTYPE_V2DF_V2DF_PTEST,\n+  INT_FTYPE_INT,\n+  UINT64_FTYPE_INT,\n+  INT64_FTYPE_INT64,\n   INT64_FTYPE_V4SF,\n   INT64_FTYPE_V2DF,\n   INT_FTYPE_V16QI,\n@@ -21626,6 +21641,8 @@ enum ix86_builtin_type\n   UINT_FTYPE_UINT_UINT,\n   UINT_FTYPE_UINT_USHORT,\n   UINT_FTYPE_UINT_UCHAR,\n+  UINT16_FTYPE_UINT16_INT,\n+  UINT8_FTYPE_UINT8_INT,\n   V8HI_FTYPE_V8HI_INT,\n   V4SI_FTYPE_V4SI_INT,\n   V4HI_FTYPE_V4HI_INT,\n@@ -21664,6 +21681,9 @@ enum ix86_builtin_type\n /* Special builtins with variable number of arguments.  */\n static const struct builtin_description bdesc_special_args[] =\n {\n+  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rdtsc, \"__builtin_ia32_rdtsc\", IX86_BUILTIN_RDTSC, UNKNOWN, (int) UINT64_FTYPE_VOID },\n+  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rdtscp, \"__builtin_ia32_rdtscp\", IX86_BUILTIN_RDTSCP, UNKNOWN, (int) UINT64_FTYPE_PINT },\n+\n   /* MMX */\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_emms, \"__builtin_ia32_emms\", IX86_BUILTIN_EMMS, UNKNOWN, (int) VOID_FTYPE_VOID },\n \n@@ -21744,6 +21764,14 @@ static const struct builtin_description bdesc_special_args[] =\n /* Builtins with variable number of arguments.  */\n static const struct builtin_description bdesc_args[] =\n {\n+  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_bsr, \"__builtin_ia32_bsrsi\", IX86_BUILTIN_BSRSI, UNKNOWN, (int) INT_FTYPE_INT },\n+  { OPTION_MASK_ISA_64BIT, CODE_FOR_bsr_rex64, \"__builtin_ia32_bsrdi\", IX86_BUILTIN_BSRDI, UNKNOWN, (int) INT64_FTYPE_INT64 },\n+  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rdpmc, \"__builtin_ia32_rdpmc\", IX86_BUILTIN_RDPMC, UNKNOWN, (int) UINT64_FTYPE_INT },\n+  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rotlqi3, \"__builtin_ia32_rolqi\", IX86_BUILTIN_ROLQI, UNKNOWN, (int) UINT8_FTYPE_UINT8_INT },\n+  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rotlhi3, \"__builtin_ia32_rolhi\", IX86_BUILTIN_ROLHI, UNKNOWN, (int) UINT16_FTYPE_UINT16_INT },\n+  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rotrqi3, \"__builtin_ia32_rorqi\", IX86_BUILTIN_RORQI, UNKNOWN, (int) UINT8_FTYPE_UINT8_INT },\n+  { ~OPTION_MASK_ISA_64BIT, CODE_FOR_rotrhi3, \"__builtin_ia32_rorhi\", IX86_BUILTIN_RORHI, UNKNOWN, (int) UINT16_FTYPE_UINT16_INT },\n+\n   /* MMX */\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv8qi3, \"__builtin_ia32_paddb\", IX86_BUILTIN_PADDB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI },\n   { OPTION_MASK_ISA_MMX, CODE_FOR_mmx_addv4hi3, \"__builtin_ia32_paddw\", IX86_BUILTIN_PADDW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI },\n@@ -23388,6 +23416,34 @@ ix86_init_mmx_sse_builtins (void)\n     = build_function_type_list (V2DF_type_node,\n \t\t\t\tV2DF_type_node, V2DI_type_node, NULL_TREE);\n \n+  /* Integer intrinsics.  */\n+  tree uint64_ftype_void\n+    = build_function_type (long_long_unsigned_type_node,\n+\t\t\t   void_list_node);\n+  tree int_ftype_int\n+    = build_function_type_list (integer_type_node,\n+\t\t\t\tinteger_type_node, NULL_TREE);\n+  tree int64_ftype_int64\n+    = build_function_type_list (long_long_integer_type_node,\n+\t\t\t\tlong_long_integer_type_node,\n+\t\t\t\tNULL_TREE);\n+  tree uint64_ftype_int\n+    = build_function_type_list (long_long_unsigned_type_node,\n+\t\t\t\tinteger_type_node, NULL_TREE);\n+  tree uint64_ftype_pint\n+    = build_function_type_list (long_long_unsigned_type_node,\n+\t\t\t\tpint_type_node, NULL_TREE);\n+  tree ushort_ftype_ushort_int\n+    = build_function_type_list (short_unsigned_type_node,\n+\t\t\t\tshort_unsigned_type_node,\n+\t\t\t\tinteger_type_node,\n+\t\t\t\tNULL_TREE);\n+  tree uchar_ftype_uchar_int\n+    = build_function_type_list (unsigned_char_type_node,\n+\t\t\t\tunsigned_char_type_node,\n+\t\t\t\tinteger_type_node,\n+\t\t\t\tNULL_TREE);\n+\n   tree ftype;\n \n   /* Add all special builtins with variable number of operands.  */\n@@ -23405,6 +23461,12 @@ ix86_init_mmx_sse_builtins (void)\n \tcase VOID_FTYPE_VOID:\n \t  type = void_ftype_void;\n \t  break;\n+\tcase UINT64_FTYPE_VOID:\n+\t  type = uint64_ftype_void;\n+\t  break;\n+\tcase UINT64_FTYPE_PINT:\n+\t  type = uint64_ftype_pint;\n+\t  break;\n \tcase V32QI_FTYPE_PCCHAR:\n \t  type = v32qi_ftype_pcchar;\n \t  break;\n@@ -23535,6 +23597,15 @@ ix86_init_mmx_sse_builtins (void)\n \tcase INT_FTYPE_V2DF_V2DF_PTEST:\n \t  type = int_ftype_v2df_v2df;\n \t  break;\n+\tcase INT_FTYPE_INT:\n+\t  type = int_ftype_int;\n+\t  break;\n+\tcase UINT64_FTYPE_INT:\n+\t  type = uint64_ftype_int;\n+\t  break;\n+\tcase INT64_FTYPE_INT64:\n+\t  type = int64_ftype_int64;\n+\t  break;\n \tcase INT64_FTYPE_V4SF:\n \t  type = int64_ftype_v4sf;\n \t  break;\n@@ -23845,6 +23916,12 @@ ix86_init_mmx_sse_builtins (void)\n \tcase UINT_FTYPE_UINT_UCHAR:\n \t  type = unsigned_ftype_unsigned_uchar;\n \t  break;\n+\tcase UINT16_FTYPE_UINT16_INT:\n+\t  type = ushort_ftype_ushort_int;\n+\t  break;\n+\tcase UINT8_FTYPE_UINT8_INT:\n+\t  type = uchar_ftype_uchar_int;\n+\t  break;\n \tcase V8HI_FTYPE_V8HI_INT:\n \t  type = v8hi_ftype_v8hi_int;\n \t  break;\n@@ -24924,6 +25001,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       return ix86_expand_sse_ptest (d, exp, target);\n     case FLOAT128_FTYPE_FLOAT128:\n     case FLOAT_FTYPE_FLOAT:\n+    case INT_FTYPE_INT:\n+    case UINT64_FTYPE_INT:\n+    case INT64_FTYPE_INT64:\n     case INT64_FTYPE_V4SF:\n     case INT64_FTYPE_V2DF:\n     case INT_FTYPE_V16QI:\n@@ -25049,6 +25129,8 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case UINT_FTYPE_UINT_UINT:\n     case UINT_FTYPE_UINT_USHORT:\n     case UINT_FTYPE_UINT_UCHAR:\n+    case UINT16_FTYPE_UINT16_INT:\n+    case UINT8_FTYPE_UINT8_INT:\n       nargs = 2;\n       break;\n     case V2DI2TI_FTYPE_V2DI_INT:\n@@ -25293,6 +25375,12 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case VOID_FTYPE_VOID:\n       emit_insn (GEN_FCN (icode) (target));\n       return 0;\n+    case UINT64_FTYPE_VOID:\n+      nargs = 0;\n+      klass = load;\n+      memory = 0;\n+      break;\n+    case UINT64_FTYPE_PINT:\n     case V2DI_FTYPE_PV2DI:\n     case V32QI_FTYPE_PCCHAR:\n     case V16QI_FTYPE_PCCHAR:\n@@ -25415,6 +25503,9 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \n   switch (nargs)\n     {\n+    case 0:\n+      pat = GEN_FCN (icode) (target);\n+      break;\n     case 1:\n       pat = GEN_FCN (icode) (target, args[0].op);\n       break;"}, {"sha": "59d9e829ed017b9098ff67fea07e09e93f73afef", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 168, "deletions": 2, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7c45393e40d63f23b2691285d5ed450ce4fb5389", "patch": "@@ -244,6 +244,9 @@\n    (UNSPECV_CLD\t\t\t15)\n    (UNSPECV_VZEROALL\t\t16)\n    (UNSPECV_VZEROUPPER\t\t17)\n+   (UNSPECV_RDTSC\t\t18)\n+   (UNSPECV_RDTSCP\t\t19)\n+   (UNSPECV_RDPMC\t\t20)\n   ])\n \n ;; Constants to represent pcomtrue/pcomfalse variants\n@@ -16153,7 +16156,7 @@\n    (set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*bsr\"\n+(define_insn \"bsr\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (const_int 31)\n \t\t  (clz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))))\n@@ -16338,7 +16341,7 @@\n    (set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*bsr_rex64\"\n+(define_insn \"bsr_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (const_int 63)\n \t\t  (clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\"))))\n@@ -22670,6 +22673,169 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n+(define_expand \"rdpmc\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"register_operand\" \"\")]\n+  \"\"\n+{\n+  rtx reg = gen_reg_rtx (DImode);\n+  rtx si;\n+\n+  /* Force operand 1 into ECX.  */\n+  rtx ecx = gen_rtx_REG (SImode, CX_REG);\n+  emit_insn (gen_rtx_SET (VOIDmode, ecx, operands[1]));\n+  si = gen_rtx_UNSPEC_VOLATILE (DImode, gen_rtvec (1, ecx),\n+\t\t\t\tUNSPECV_RDPMC);\n+\n+  if (TARGET_64BIT)\n+    {\n+      rtvec vec = rtvec_alloc (2);\n+      rtx load = gen_rtx_PARALLEL (VOIDmode, vec);\n+      rtx upper = gen_reg_rtx (DImode);\n+      rtx di = gen_rtx_UNSPEC_VOLATILE (DImode,\n+\t\t\t\t\tgen_rtvec (1, const0_rtx),\n+\t\t\t\t\tUNSPECV_RDPMC);\n+      RTVEC_ELT (vec, 0) = gen_rtx_SET (VOIDmode, reg, si);\n+      RTVEC_ELT (vec, 1) = gen_rtx_SET (VOIDmode, upper, di);\n+      emit_insn (load);\n+      upper = expand_simple_binop (DImode, ASHIFT, upper, GEN_INT (32),\n+\t\t\t\t   NULL, 1, OPTAB_DIRECT);\n+      reg = expand_simple_binop (DImode, IOR, reg, upper, reg, 1,\n+\t\t\t\t OPTAB_DIRECT);\n+    }\n+  else\n+    emit_insn (gen_rtx_SET (VOIDmode, reg, si));\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], reg));\n+  DONE;\n+})\n+\n+(define_insn \"*rdpmc\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n+  \t(unspec_volatile:DI [(match_operand:SI 1 \"register_operand\" \"c\")]\n+\t\t\t    UNSPECV_RDPMC))]\n+  \"!TARGET_64BIT\"\n+  \"rdpmc\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"*rdpmc_rex64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+  \t(unspec_volatile:DI [(match_operand:SI 2 \"register_operand\" \"c\")]\n+\t\t\t    UNSPECV_RDPMC))\n+  (set (match_operand:DI 1 \"register_operand\" \"=d\")\n+       (unspec_volatile:DI [(const_int 0)] UNSPECV_RDPMC))]\n+  \"TARGET_64BIT\"\n+  \"rdpmc\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_expand \"rdtsc\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSC))]\n+  \"\"\n+{\n+  if (TARGET_64BIT)\n+    {\n+      rtvec vec = rtvec_alloc (2);\n+      rtx load = gen_rtx_PARALLEL (VOIDmode, vec);\n+      rtx upper = gen_reg_rtx (DImode);\n+      rtx lower = gen_reg_rtx (DImode);\n+      rtx src = gen_rtx_UNSPEC_VOLATILE (DImode,\n+\t\t\t\t\t gen_rtvec (1, const0_rtx),\n+\t\t\t\t\t UNSPECV_RDTSC);\n+      RTVEC_ELT (vec, 0) = gen_rtx_SET (VOIDmode, lower, src);\n+      RTVEC_ELT (vec, 1) = gen_rtx_SET (VOIDmode, upper, src);\n+      emit_insn (load);\n+      upper = expand_simple_binop (DImode, ASHIFT, upper, GEN_INT (32),\n+\t\t\t\t   NULL, 1, OPTAB_DIRECT);\n+      lower = expand_simple_binop (DImode, IOR, lower, upper, lower, 1,\n+\t\t\t\t   OPTAB_DIRECT);\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0], lower));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*rdtsc\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n+\t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSC))]\n+  \"!TARGET_64BIT\"\n+  \"rdtsc\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"*rdtsc_rex64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSC))\n+   (set (match_operand:DI 1 \"register_operand\" \"=d\")\n+\t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSC))]\n+  \"TARGET_64BIT\"\n+  \"rdtsc\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_expand \"rdtscp\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:SI 1 \"memory_operand\" \"\")]\n+  \"\"\n+{\n+  rtx di = gen_rtx_UNSPEC_VOLATILE (DImode,\n+\t\t\t\t    gen_rtvec (1, const0_rtx),\n+\t\t\t\t    UNSPECV_RDTSCP);\n+  rtx si = gen_rtx_UNSPEC_VOLATILE (SImode,\n+\t\t\t\t    gen_rtvec (1, const0_rtx),\n+\t\t\t\t    UNSPECV_RDTSCP);\n+  rtx reg = gen_reg_rtx (DImode);\n+  rtx tmp = gen_reg_rtx (SImode);\n+\n+  if (TARGET_64BIT)\n+    {\n+      rtvec vec = rtvec_alloc (3);\n+      rtx load = gen_rtx_PARALLEL (VOIDmode, vec);\n+      rtx upper = gen_reg_rtx (DImode);\n+      RTVEC_ELT (vec, 0) = gen_rtx_SET (VOIDmode, reg, di);\n+      RTVEC_ELT (vec, 1) = gen_rtx_SET (VOIDmode, upper, di);\n+      RTVEC_ELT (vec, 2) = gen_rtx_SET (VOIDmode, tmp, si);\n+      emit_insn (load);\n+      upper = expand_simple_binop (DImode, ASHIFT, upper, GEN_INT (32),\n+\t\t\t\t   NULL, 1, OPTAB_DIRECT);\n+      reg = expand_simple_binop (DImode, IOR, reg, upper, reg, 1,\n+\t\t\t\t OPTAB_DIRECT);\n+    }\n+  else\n+    {\n+      rtvec vec = rtvec_alloc (2);\n+      rtx load = gen_rtx_PARALLEL (VOIDmode, vec);\n+      RTVEC_ELT (vec, 0) = gen_rtx_SET (VOIDmode, reg, di);\n+      RTVEC_ELT (vec, 1) = gen_rtx_SET (VOIDmode, tmp, si);\n+      emit_insn (load);\n+    }\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], reg));\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[1], tmp));\n+  DONE;\n+})\n+\n+(define_insn \"*rdtscp\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n+\t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSCP))\n+   (set (match_operand:SI 1 \"register_operand\" \"=c\")\n+\t(unspec_volatile:SI [(const_int 0)] UNSPECV_RDTSCP))]\n+  \"!TARGET_64BIT\"\n+  \"rdtscp\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"3\")])\n+\n+(define_insn \"*rdtscp_rex64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+\t(unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSCP))\n+   (set (match_operand:DI 1 \"register_operand\" \"=d\")\n+        (unspec_volatile:DI [(const_int 0)] UNSPECV_RDTSCP))\n+   (set (match_operand:SI 2 \"register_operand\" \"=c\")\n+\t(unspec_volatile:SI [(const_int 0)] UNSPECV_RDTSCP))]\n+  \"TARGET_64BIT\"\n+  \"rdtscp\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"length\" \"3\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "e701b19e2a86d0dbb11e99146abd3326459c58ad", "filename": "gcc/config/i386/ia32intrin.h", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fia32intrin.h?ref=7c45393e40d63f23b2691285d5ed450ce4fb5389", "patch": "@@ -0,0 +1,230 @@\n+/* Copyright (C) 2009 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _X86INTRIN_H_INCLUDED\n+# error \"Never use <ia32intrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+/* 32bit bsf */\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bsfd (int __X)\n+{\n+  return __builtin_ctz (__X);\n+}\n+\n+/* 32bit bsr */\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bsrd (int __X)\n+{\n+  return __builtin_ia32_bsrsi (__X);\n+}\n+\n+/* 32bit bswap */\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bswapd (int __X)\n+{\n+  return __builtin_bswap32 (__X);\n+}\n+\n+/* 32bit accumulate CRC32 (polynomial 0x11EDC6F41) value.  */\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__crc32b (unsigned int __C, unsigned char __V)\n+{\n+  return __builtin_ia32_crc32qi (__C, __V);\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__crc32w (unsigned int __C, unsigned short __V)\n+{\n+  return __builtin_ia32_crc32hi (__C, __V);\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__crc32d (unsigned int __C, unsigned int __V)\n+{\n+  return __builtin_ia32_crc32si (__C, __V);\n+}\n+\n+/* 32bit popcnt */\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__popcntd (unsigned int __X)\n+{\n+  return __builtin_popcount (__X);\n+}\n+\n+/* rdpmc */\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rdpmc (int __S)\n+{\n+  return __builtin_ia32_rdpmc (__S);\n+}\n+\n+/* rdtsc */\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rdtsc (void)\n+{\n+  return __builtin_ia32_rdtsc ();\n+}\n+\n+/* rdtscp */\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rdtscp (unsigned int *__A)\n+{\n+  return __builtin_ia32_rdtscp (__A);\n+}\n+\n+/* 8bit rol */\n+extern __inline unsigned char\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rolb (unsigned char __X, int __C)\n+{\n+  return __builtin_ia32_rolqi (__X, __C);\n+}\n+\n+/* 16bit rol */\n+extern __inline unsigned short\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rolw (unsigned short __X, int __C)\n+{\n+  return __builtin_ia32_rolhi (__X, __C);\n+}\n+\n+/* 32bit rol */\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rold (unsigned int __X, int __C)\n+{\n+  return (__X << __C) | (__X >> (32 - __C));\n+}\n+\n+/* 8bit ror */\n+extern __inline unsigned char\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rorb (unsigned char __X, int __C)\n+{\n+  return __builtin_ia32_rorqi (__X, __C);\n+}\n+\n+/* 16bit ror */\n+extern __inline unsigned short\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rorw (unsigned short __X, int __C)\n+{\n+  return __builtin_ia32_rorhi (__X, __C);\n+}\n+\n+/* 32bit ror */\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rord (unsigned int __X, int __C)\n+{\n+  return (__X >> __C) | (__X << (32 - __C));\n+}\n+\n+#ifdef __x86_64__\n+/* 64bit bsf */\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bsfq (long long __X)\n+{\n+  return __builtin_ctzll (__X);\n+}\n+\n+/* 64bit bsr */\n+extern __inline int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bsrq (long long __X)\n+{\n+  return __builtin_ia32_bsrdi (__X);\n+}\n+\n+/* 64bit bswap */\n+extern __inline long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bswapq (long long __X)\n+{\n+  return __builtin_bswap64 (__X);\n+}\n+\n+/* 64bit accumulate CRC32 (polynomial 0x11EDC6F41) value.  */\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__crc32q (unsigned long long __C, unsigned long long __V)\n+{\n+  return __builtin_ia32_crc32di (__C, __V);\n+}\n+\n+/* 64bit popcnt */\n+extern __inline long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__popcntq (unsigned long long __X)\n+{\n+  return __builtin_popcountll (__X);\n+}\n+\n+/* 64bit rol */\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rolq (unsigned long long __X, int __C)\n+{\n+  return (__X << __C) | (__X >> (64 - __C));\n+}\n+\n+/* 64bit ror */\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rorq (unsigned long long __X, int __C)\n+{\n+  return (__X >> __C) | (__X << (64 - __C));\n+}\n+\n+#define _bswap64(a)\t\t__bswapq(a)\n+#define _popcnt64(a)\t\t__popcntq(a)\n+#define _lrotl(a,b)\t\t__rolq((a), (b))\n+#define _lrotr(a,b)\t\t__rorq((a), (b))\n+#else\n+#define _lrotl(a,b)\t\t__rold((a), (b))\n+#define _lrotr(a,b)\t\t__rord((a), (b))\n+#endif\n+\n+#define _bit_scan_forward(a)\t__bsfd(a)\n+#define _bit_scan_reverse(a)\t__bsrd(a)\n+#define _bswap(a)\t\t__bswapd(a)\n+#define _popcnt32(a)\t\t__popcntd(a)\n+#define _rdpmc(a)\t\t__rdpmc(a)\n+#define _rdtsc()\t\t__rdtsc()\n+#define _rdtscp(a)\t\t__rdtscp(a)\n+#define _rotwl(a,b)\t\t__rolw((a), (b))\n+#define _rotwr(a,b)\t\t__rorw((a), (b))\n+#define _rotl(a,b)\t\t__rold((a), (b))\n+#define _rotr(a,b)\t\t__rord((a), (b))"}, {"sha": "705300c23eb13a9ad9a94a4fffca6b88ce8f6a20", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c45393e40d63f23b2691285d5ed450ce4fb5389/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=7c45393e40d63f23b2691285d5ed450ce4fb5389", "patch": "@@ -24,6 +24,8 @@\n #ifndef _X86INTRIN_H_INCLUDED\n #define _X86INTRIN_H_INCLUDED\n \n+#include <ia32intrin.h>\n+\n #ifdef __MMX__\n #include <mmintrin.h>\n #endif"}]}