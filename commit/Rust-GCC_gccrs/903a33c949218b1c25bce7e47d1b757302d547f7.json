{"sha": "903a33c949218b1c25bce7e47d1b757302d547f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzYTMzYzk0OTIxOGIxYzI1YmNlN2U0N2QxYjc1NzMwMmQ1NDdmNw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-12-19T19:00:35Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-12-19T19:00:35Z"}, "message": "lambda-code.c (can_convert_to_perfect_nest): Make checking match up with what perfect_nestify can actually handle.\n\n\n2004-12-18  Daniel Berlin  <dberlin@dberlin.org>\n\n        * lambda-code.c (can_convert_to_perfect_nest): Make checking\n\tmatch up with what perfect_nestify can actually handle.\n\t(perfect_nestify): Don't return false in the phi node loop.\n\nFrom-SVN: r92381", "tree": {"sha": "9c2fb61ace2db3672cc36610d33c2b4c8919f5b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c2fb61ace2db3672cc36610d33c2b4c8919f5b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/903a33c949218b1c25bce7e47d1b757302d547f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903a33c949218b1c25bce7e47d1b757302d547f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903a33c949218b1c25bce7e47d1b757302d547f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903a33c949218b1c25bce7e47d1b757302d547f7/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9548f05908895b7068cda919773d523f0b4e642d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9548f05908895b7068cda919773d523f0b4e642d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9548f05908895b7068cda919773d523f0b4e642d"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "80cd75b1c348c8c6609f421ea14cab8968e33ac6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903a33c949218b1c25bce7e47d1b757302d547f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903a33c949218b1c25bce7e47d1b757302d547f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=903a33c949218b1c25bce7e47d1b757302d547f7", "patch": "@@ -1,3 +1,9 @@\n+2004-12-18  Daniel Berlin  <dberlin@dberlin.org>\n+\n+        * lambda-code.c (can_convert_to_perfect_nest): Make checking\n+\tmatch up with what perfect_nestify can actually handle.\n+\t(perfect_nestify): Don't return false in the phi node loop.\n+\n 2004-12-18  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.md (SSEINT16): New."}, {"sha": "40f3ac368834df2650aaca4a8b23bf88e7b59f4d", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903a33c949218b1c25bce7e47d1b757302d547f7/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903a33c949218b1c25bce7e47d1b757302d547f7/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=903a33c949218b1c25bce7e47d1b757302d547f7", "patch": "@@ -2189,9 +2189,10 @@ can_convert_to_perfect_nest (struct loop *loop,\n \t\t\t     VEC (tree) *loopivs)\n {\n   basic_block *bbs;\n-  tree exit_condition;\n+  tree exit_condition, phi;\n   size_t i;\n   block_stmt_iterator bsi;\n+  basic_block exitdest;\n \n   /* Can't handle triply nested+ loops yet.  */\n   if (!loop->inner || loop->inner->inner)\n@@ -2233,6 +2234,16 @@ can_convert_to_perfect_nest (struct loop *loop,\n \t    }\n \t}\n     }  \n+\n+  /* We also need to make sure the loop exit only has simple copy phis in it,\n+     otherwise we don't know how to transform it into a perfect nest right\n+     now.  */\n+  exitdest = loop->single_exit->dest;\n+  \n+  for (phi = phi_nodes (exitdest); phi; phi = PHI_CHAIN (phi))\n+    if (PHI_NUM_ARGS (phi) != 1)\n+      return false;\n+\n   return true;\n }\n \n@@ -2309,9 +2320,6 @@ perfect_nestify (struct loops *loops,\n \n   for (phi = phi_nodes (olddest); phi; phi = PHI_CHAIN (phi))\n     {\n-      /* These should be simple exit phi copies.  */\n-      if (PHI_NUM_ARGS (phi) != 1)\n-\treturn false;\n       VEC_safe_push (tree, phis, PHI_RESULT (phi));\n       VEC_safe_push (tree, phis, PHI_ARG_DEF (phi, 0));\n       mark_for_rewrite (PHI_RESULT (phi));"}]}