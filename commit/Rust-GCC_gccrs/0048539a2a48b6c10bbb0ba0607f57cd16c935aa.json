{"sha": "0048539a2a48b6c10bbb0ba0607f57cd16c935aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA0ODUzOWEyYTQ4YjZjMTBiYmIwYmEwNjA3ZjU3Y2QxNmM5MzVhYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-11-07T09:44:02Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-11-07T09:44:02Z"}, "message": "Add CONSTRUCTOR_NO_CLEARING to operand_equal_p.\n\n2019-11-07  Martin Liska  <mliska@suse.cz>\n\n\t* fold-const.c (operand_compare::operand_equal_p): Add comparison\n\tof CONSTRUCTOR_NO_CLEARING.\n\t(operand_compare::hash_operand): Likewise.\n\nFrom-SVN: r277912", "tree": {"sha": "9fe928696e7ba92c45d06508b7a675dfbd0e567a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fe928696e7ba92c45d06508b7a675dfbd0e567a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0048539a2a48b6c10bbb0ba0607f57cd16c935aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0048539a2a48b6c10bbb0ba0607f57cd16c935aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0048539a2a48b6c10bbb0ba0607f57cd16c935aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0048539a2a48b6c10bbb0ba0607f57cd16c935aa/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db37dc33a6811235990e3de3e1776c82a868e4b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db37dc33a6811235990e3de3e1776c82a868e4b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db37dc33a6811235990e3de3e1776c82a868e4b6"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "94f72ddade6496c880476d036fef055f2dd299d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0048539a2a48b6c10bbb0ba0607f57cd16c935aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0048539a2a48b6c10bbb0ba0607f57cd16c935aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0048539a2a48b6c10bbb0ba0607f57cd16c935aa", "patch": "@@ -1,3 +1,9 @@\n+2019-11-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* fold-const.c (operand_compare::operand_equal_p): Add comparison\n+\tof CONSTRUCTOR_NO_CLEARING.\n+\t(operand_compare::hash_operand): Likewise.\n+\n 2019-11-07  Georg-Johann Lay  <avr@gjlay.de>\n \n \tSupport 64-bit double and 64-bit long double configurations."}, {"sha": "52cb2383db242e298194b7104eba5b51e6c39b77", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0048539a2a48b6c10bbb0ba0607f57cd16c935aa/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0048539a2a48b6c10bbb0ba0607f57cd16c935aa/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0048539a2a48b6c10bbb0ba0607f57cd16c935aa", "patch": "@@ -3475,6 +3475,9 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n     case tcc_exceptional:\n       if (TREE_CODE (arg0) == CONSTRUCTOR)\n \t{\n+\t  if (CONSTRUCTOR_NO_CLEARING (arg0) != CONSTRUCTOR_NO_CLEARING (arg1))\n+\t    return false;\n+\n \t  /* In GIMPLE constructors are used only to build vectors from\n \t     elements.  Individual elements in the constructor must be\n \t     indexed in increasing order and form an initial sequence.\n@@ -3657,6 +3660,7 @@ operand_compare::hash_operand (const_tree t, inchash::hash &hstate,\n \tunsigned HOST_WIDE_INT idx;\n \ttree field, value;\n \tflags &= ~OEP_ADDRESS_OF;\n+\thstate.add_int (CONSTRUCTOR_NO_CLEARING (t));\n \tFOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (t), idx, field, value)\n \t  {\n \t    /* In GIMPLE the indexes can be either NULL or matching i.  */"}]}