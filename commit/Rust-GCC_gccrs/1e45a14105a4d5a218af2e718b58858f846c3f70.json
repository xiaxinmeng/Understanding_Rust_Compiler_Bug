{"sha": "1e45a14105a4d5a218af2e718b58858f846c3f70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU0NWExNDEwNWE0ZDVhMjE4YWYyZTcxOGI1ODg1OGY4NDZjM2Y3MA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "1999-06-09T17:42:26Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "1999-06-09T17:42:26Z"}, "message": "Runtime.java (exec): Convert prog name and arguments to string array.\n\n\t* java/lang/Runtime.java (exec): Convert prog name and arguments\n\tto string array.\n\t* java/lang/natPosixProcess.cc (startProcess): Fix typo in\n\tenvironment array conversion. Preserve current environment if envp\n\tnot passed. Preserve PATH unless explicitly specified.\n\t* java/io/DataInputStream.java (readLine): Fix case where '\\r' is\n\tfollowed by EOF. Set a flag when a line is terminated by '\\r' and\n\tignore following '\\n' if set.\n\nFrom-SVN: r27458", "tree": {"sha": "cfcc17dc0b0ed3f23921fd3008f2b30835bad356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfcc17dc0b0ed3f23921fd3008f2b30835bad356"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e45a14105a4d5a218af2e718b58858f846c3f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e45a14105a4d5a218af2e718b58858f846c3f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e45a14105a4d5a218af2e718b58858f846c3f70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e45a14105a4d5a218af2e718b58858f846c3f70/comments", "author": null, "committer": null, "parents": [{"sha": "8d30c4ee0138e22442da8564c3a952a9ea708435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d30c4ee0138e22442da8564c3a952a9ea708435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d30c4ee0138e22442da8564c3a952a9ea708435"}], "stats": {"total": 120, "additions": 87, "deletions": 33}, "files": [{"sha": "73ff2a5feaf606d075c83570157e2feaa3c49d0a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e45a14105a4d5a218af2e718b58858f846c3f70/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e45a14105a4d5a218af2e718b58858f846c3f70/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1e45a14105a4d5a218af2e718b58858f846c3f70", "patch": "@@ -1,3 +1,14 @@\n+1999-06-09  Bryce McKinlay <bryce@albatross.co.nz>\n+\n+\t* java/lang/Runtime.java (exec): Convert prog name and arguments\n+\tto string array.\n+\t* java/lang/natPosixProcess.cc (startProcess): Fix typo in\n+\tenvironment array conversion. Preserve current environment if envp\n+\tnot passed. Preserve PATH unless explicitly specified.\n+\t* java/io/DataInputStream.java (readLine): Fix case where '\\r' is\n+\tfollowed by EOF. Set a flag when a line is terminated by '\\r' and\n+\tignore following '\\n' if set.\n+\n 1999-06-02  Warren Levy  <warrenl@cygnus.com>\n \n \t* java/net/URL.java (URL(URL,String)): Initialize port to -1."}, {"sha": "bbcf1daf8a39fc0c6be76b2c155cbe08b6e3cc40", "filename": "libjava/java/io/DataInputStream.java", "status": "modified", "additions": 52, "deletions": 15, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e45a14105a4d5a218af2e718b58858f846c3f70/libjava%2Fjava%2Fio%2FDataInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e45a14105a4d5a218af2e718b58858f846c3f70/libjava%2Fjava%2Fio%2FDataInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataInputStream.java?ref=1e45a14105a4d5a218af2e718b58858f846c3f70", "patch": "@@ -21,6 +21,11 @@\n  \n public class DataInputStream extends FilterInputStream implements DataInput\n {\n+  // readLine() hack to ensure that an '\\r' not followed by an '\\n' is\n+  // handled correctly. If set, readLine() will ignore the first char it sees\n+  // if that char is a '\\n'\n+  boolean ignoreInitialNewline = false;\n+  \n   public DataInputStream(InputStream in)\n   {\n     super(in);\n@@ -103,14 +108,29 @@ public final String readLine() throws IOException\n   {\n     StringBuffer strb = new StringBuffer();\n \n-    while (true)\n+    readloop: while (true)\n       {\n-\tint c = read();\n-\tif (c < 0)\t// got an EOF\n-\t  return strb.length() > 0 ? strb.toString() : null;\n-\tchar ch = (char) c;\n-\tif ((ch &= 0xFF) == '\\n')\n-\t  break;\n+        int c = 0;\n+        char ch = ' ';\n+        boolean getnext = true;\n+        while (getnext)\n+          {\n+\t    getnext = false;\n+\t    c = read();\n+\t    if (c < 0)\t// got an EOF\n+\t      return strb.length() > 0 ? strb.toString() : null;\n+\t    ch = (char) c;\n+\t    if ((ch &= 0xFF) == '\\n')\n+\t      // hack to correctly handle '\\r\\n' sequences\n+\t      if (ignoreInitialNewline)\n+\t\t{\n+\t\t  ignoreInitialNewline = false;\n+\t\t  getnext = true;\n+\t\t}\n+\t      else\n+\t\tbreak readloop;\n+\t  }\n+\n \tif (ch == '\\r')\n \t  {\n \t    // FIXME: The following code tries to adjust the stream back one\n@@ -134,18 +154,35 @@ public final String readLine() throws IOException\n \t    // and since it is undesirable to make non-deprecated methods\n \t    // less efficient, the following seems like the most reasonable\n \t    // approach.\n-\t    if (in instanceof BufferedInputStream && (read() & 0xFF) != '\\n')\n+\t    int next_c = 0;\n+            char next_ch = ' ';\n+\t    if (in instanceof BufferedInputStream)\n \t      {\n-\t        BufferedInputStream bin = (BufferedInputStream) in;\n-\t\tif (bin.pos > 0)\n-                  bin.pos--;\n+\t        next_c = read();\n+\t        next_ch = (char) (next_c & 0xFF);\n+\t\tif ((next_ch != '\\n') && (next_c >= 0)) \n+\t\t  {\n+\t            BufferedInputStream bin = (BufferedInputStream) in;\n+\t\t    if (bin.pos > 0)\n+                      bin.pos--;\n+\t\t  }\n \t      }\n \t    else if (markSupported())\n \t      {\n-\t\tmark(1);\n-\t\tif ((read() & 0xFF) != '\\n')\n-\t\t  reset();\n-\t      }\n+\t        next_c = read();\n+\t        next_ch = (char) (next_c & 0xFF);\n+\t\tif ((next_ch != '\\n') && (next_c >= 0)) \n+\t\t  {\n+\t\t    mark(1);\n+\t\t    if ((read() & 0xFF) != '\\n')\n+\t\t      reset();\n+\t\t  }\n+\t      } \n+\t    // In order to catch cases where 'in' isn't a BufferedInputStream\n+\t    // and doesn't support mark() (such as reading from a Socket), set \n+\t    // a flag that instructs readLine() to ignore the first character \n+\t    // it sees _if_ that character is a '\\n'.\n+\t    else ignoreInitialNewline = true;\n \t    break;\n \t  }\n \tstrb.append(ch);"}, {"sha": "cdba9a364020f053d65ddc3b139faf9db22e6db7", "filename": "libjava/java/lang/Runtime.java", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e45a14105a4d5a218af2e718b58858f846c3f70/libjava%2Fjava%2Flang%2FRuntime.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e45a14105a4d5a218af2e718b58858f846c3f70/libjava%2Fjava%2Flang%2FRuntime.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FRuntime.java?ref=1e45a14105a4d5a218af2e718b58858f846c3f70", "patch": "@@ -13,6 +13,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.StringTokenizer;\n \n /**\n  * @author Tom Tromey <tromey@cygnus.com>\n@@ -30,15 +31,15 @@\n {\n   public Process exec (String prog) throws IOException\n   {\n-    String[] a = new String[1];\n-    a[0] = prog;\n-    return exec (a, null);\n+    return exec (prog, null);\n   }\n \n   public Process exec (String prog, String[] envp) throws IOException\n   {\n-    String[] a = new String[1];\n-    a[0] = prog;\n+    StringTokenizer st = new StringTokenizer(prog);\n+    String[] a = new String[st.countTokens ()];\n+    for (int i = 0; i < a.length; i++)\n+      a[i] = st.nextToken ();\n     return exec (a, envp);\n   }\n "}, {"sha": "5c6d9a7644dfcb849a607557faeeac0c7b5af041", "filename": "libjava/java/lang/natPosixProcess.cc", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e45a14105a4d5a218af2e718b58858f846c3f70/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e45a14105a4d5a218af2e718b58858f846c3f70/libjava%2Fjava%2Flang%2FnatPosixProcess.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatPosixProcess.cc?ref=1e45a14105a4d5a218af2e718b58858f846c3f70", "patch": "@@ -20,6 +20,7 @@ details.  */\n #include <signal.h>\n #include <string.h>\n #include <stdlib.h>\n+#include <stdio.h>\n \n #include <cni.h>\n #include <jvm.h>\n@@ -115,15 +116,7 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n   // thrown we will leak memory.\n   char **args = (char **) _Jv_Malloc ((progarray->length + 1)\n \t\t\t\t      * sizeof (char *));\n-\n   char **env = NULL;\n-  if (envp)\n-    env = (char **) _Jv_Malloc ((envp->length + 1) * sizeof (char *));\n-\n-//   for (int i = 0; i < progarray->length; ++i)\n-//     args[i] = NULL;\n-//   for (int i = 0; i < envp->length; ++i)\n-//     env[i] = NULL;\n \n   // FIXME: GC will fail here if _Jv_Malloc throws an exception.\n   // That's because we have to manually free the contents, but we \n@@ -134,10 +127,11 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n \n   if (envp)\n     {\n+      env = (char **) _Jv_Malloc ((envp->length + 1) * sizeof (char *));\n       elts = elements (envp);\n       for (int i = 0; i < envp->length; ++i)\n-\targs[i] = new_string (elts[i]);\n-      args[envp->length] = NULL;\n+\tenv[i] = new_string (elts[i]);\n+      env[envp->length] = NULL;\n     }\n \n   // Create pipes for I/O.\n@@ -172,8 +166,18 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n       // Child process, so remap descriptors and exec.\n \n       if (envp)\n-\tenviron = env;\n-\n+        {\n+\t  // preserve PATH unless specified explicitly\n+\t  char *path_val = getenv(\"PATH\");\n+\t  environ = env;\n+\t  if (getenv(\"PATH\") == NULL)\n+\t    {\n+\t      char *path_env = (char *) _Jv_Malloc (strlen(path_val) + 5 + 1);\n+\t      sprintf (path_env, \"PATH=%s\", path_val); \n+\t      putenv (path_env);\n+\t    }\n+\t}\n+\t\n       // We ignore errors from dup2 because they should never occur.\n       dup2 (outp[0], 0);\n       dup2 (inp[1], 1);\n@@ -186,8 +190,9 @@ java::lang::ConcreteProcess::startProcess (jstringArray progarray,\n       close (outp[0]);\n       close (outp[1]);\n \n-      environ = env;\n       execvp (args[0], args);\n+      // FIXME: should throw an IOException if execvp() fails. Not trivial,\n+      // because _Jv_Throw won't work from child process\n       _exit (127);\n     }\n "}]}