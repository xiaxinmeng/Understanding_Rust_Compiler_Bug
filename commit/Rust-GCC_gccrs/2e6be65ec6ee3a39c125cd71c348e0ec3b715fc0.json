{"sha": "2e6be65ec6ee3a39c125cd71c348e0ec3b715fc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU2YmU2NWVjNmVlM2EzOWMxMjVjZDcxYzM0OGUwZWMzYjcxNWZjMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2007-10-16T20:24:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2007-10-16T20:24:41Z"}, "message": "dce.c (init_dce): Only initialize the obstacks for the fast pass.\n\n\t* dce.c (init_dce): Only initialize the obstacks for the fast pass.\n\t(fini_dce): Only release them for the fast pass.\n\t(end_ud_dce): Delete.\n\t(rest_of_handle_ud_dce): Do not modify df_in_progress.\n\tCall fini_dce instead of end_ud_dce.\n\t(rest_of_handle_fast_dce): Do not modify df_in_progress.\n\t(run_fast_df_dce): Reset df_in_progress to false on exit.\n\nFrom-SVN: r129384", "tree": {"sha": "e3c7cff2c37353901231c1b5d89d9ca3540607ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3c7cff2c37353901231c1b5d89d9ca3540607ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e6be65ec6ee3a39c125cd71c348e0ec3b715fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6be65ec6ee3a39c125cd71c348e0ec3b715fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6be65ec6ee3a39c125cd71c348e0ec3b715fc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6be65ec6ee3a39c125cd71c348e0ec3b715fc0/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "053cc3801ba748081d63afd85a582ebd63b89f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053cc3801ba748081d63afd85a582ebd63b89f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053cc3801ba748081d63afd85a582ebd63b89f0a"}], "stats": {"total": 126, "additions": 71, "deletions": 55}, "files": [{"sha": "69e7416d7d7a66a63a99a1e28dfca4ff1a5965bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6be65ec6ee3a39c125cd71c348e0ec3b715fc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6be65ec6ee3a39c125cd71c348e0ec3b715fc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e6be65ec6ee3a39c125cd71c348e0ec3b715fc0", "patch": "@@ -1,3 +1,13 @@\n+2007-10-16  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* dce.c (init_dce): Only initialize the obstacks for the fast pass.\n+\t(fini_dce): Only release them for the fast pass.\n+\t(end_ud_dce): Delete.\n+\t(rest_of_handle_ud_dce): Do not modify df_in_progress.\n+\tCall fini_dce instead of end_ud_dce.\n+\t(rest_of_handle_fast_dce): Do not modify df_in_progress.\n+\t(run_fast_df_dce): Reset df_in_progress to false on exit.\n+\n 2007-10-16  Paolo Bonzini  <bonzini@gnu.org>\n \t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n "}, {"sha": "e38e79732daf8fb42a3a04d8e134c2a23c963f9d", "filename": "gcc/dce.c", "status": "modified", "additions": 61, "deletions": 55, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6be65ec6ee3a39c125cd71c348e0ec3b715fc0/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6be65ec6ee3a39c125cd71c348e0ec3b715fc0/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=2e6be65ec6ee3a39c125cd71c348e0ec3b715fc0", "patch": "@@ -42,7 +42,8 @@ DEF_VEC_ALLOC_I(int,heap);\n    Core mark/delete routines\n    ------------------------------------------------------------------------- */\n \n-/* The data-flow information needed by this pass.  */\n+/* True if we are invoked while the df engine is running; in this case,\n+   we don't want to reenter it.  */\n static bool df_in_progress = false;\n \n /* True if we deleted at least one instruction.  */\n@@ -52,10 +53,13 @@ static bool something_changed;\n    yet been processed.  */\n static VEC(rtx,heap) *worklist;\n \n+/* Bitmap of instructions marked as needed indexed by INSN_UID.  */\n+static sbitmap marked;\n+\n+/* Bitmap obstacks used for block processing by the fast algorithm.  */\n static bitmap_obstack dce_blocks_bitmap_obstack;\n static bitmap_obstack dce_tmp_bitmap_obstack;\n \n-static sbitmap marked = NULL;\n \n /* A subroutine for which BODY is part of the instruction being tested;\n    either the top-level pattern, or an element of a PARALLEL.  The\n@@ -88,6 +92,7 @@ deletable_insn_p_1 (rtx body)\n     }\n }\n \n+\n /* Return true if INSN is a normal instruction that can be deleted by\n    the DCE pass.  */\n \n@@ -133,7 +138,7 @@ deletable_insn_p (rtx insn, bool fast)\n }\n \n \n-/* Return true if INSN has not been marked as needed.  */\n+/* Return true if INSN has been marked as needed.  */\n \n static inline int\n marked_insn_p (rtx insn)\n@@ -198,28 +203,6 @@ mark_nonreg_stores (rtx body, rtx insn, bool fast)\n }\n \n \n-/* Initialize global variables for a new DCE pass.  */\n-\n-static void\n-init_dce (bool fast)\n-{\n-  if (!df_in_progress)\n-    {\n-      if (!fast)\n-\tdf_chain_add_problem (DF_UD_CHAIN);\n-      df_analyze ();\n-    }\n-\n-  if (dump_file)\n-    df_dump (dump_file);\n-\n-  bitmap_obstack_initialize (&dce_blocks_bitmap_obstack);\n-  bitmap_obstack_initialize (&dce_tmp_bitmap_obstack);\n-  marked = sbitmap_alloc (get_max_uid () + 1);\n-  sbitmap_zero (marked);\n-}\n-\n-\n /* Delete all REG_EQUAL notes of the registers INSN writes, to prevent\n    bad dangling REG_EQUAL notes. */\n \n@@ -263,6 +246,7 @@ delete_unmarked_insns (void)\n   rtx insn, next;\n \n   something_changed = false;\n+\n   FOR_EACH_BB (bb)\n     FOR_BB_INSNS_SAFE (bb, insn, next)\n       if (INSN_P (insn))\n@@ -309,6 +293,7 @@ delete_unmarked_insns (void)\n \n /* Mark all insns using DELETE_PARM in the libcall that contains\n    START_INSN.  */\n+\n static void \n mark_libcall (rtx start_insn, bool delete_parm)\n {\n@@ -416,6 +401,7 @@ mark_artificial_uses (void)\n     }\n }\n \n+\n /* Mark every instruction that defines a register value that INSN uses.  */\n \n static void\n@@ -443,11 +429,44 @@ mark_reg_dependencies (rtx insn)\n }\n \n \n+/* Initialize global variables for a new DCE pass.  */\n+\n static void\n-end_ud_dce (void)\n+init_dce (bool fast)\n+{\n+  if (!df_in_progress)\n+    {\n+      if (!fast)\n+\tdf_chain_add_problem (DF_UD_CHAIN);\n+      df_analyze ();\n+    }\n+\n+  if (dump_file)\n+    df_dump (dump_file);\n+\n+  if (fast)\n+    {\n+      bitmap_obstack_initialize (&dce_blocks_bitmap_obstack);\n+      bitmap_obstack_initialize (&dce_tmp_bitmap_obstack);\n+    }\n+\n+  marked = sbitmap_alloc (get_max_uid () + 1);\n+  sbitmap_zero (marked);\n+}\n+\n+\n+/* Free the data allocated by init_dce.  */\n+\n+static void\n+fini_dce (bool fast)\n {\n   sbitmap_free (marked);\n-  gcc_assert (VEC_empty (rtx, worklist));\n+\n+  if (fast)\n+    {\n+      bitmap_obstack_release (&dce_blocks_bitmap_obstack);\n+      bitmap_obstack_release (&dce_tmp_bitmap_obstack);\n+    }\n }\n \n \n@@ -458,7 +477,6 @@ rest_of_handle_ud_dce (void)\n {\n   rtx insn;\n \n-  df_in_progress = false;\n   init_dce (false);\n \n   prescan_insns_for_dce (false);\n@@ -468,12 +486,13 @@ rest_of_handle_ud_dce (void)\n       insn = VEC_pop (rtx, worklist);\n       mark_reg_dependencies (insn);\n     }\n+\n   /* Before any insns are deleted, we must remove the chains since\n      they are not bidirectional.  */\n   df_remove_problem (df_chain);\n   delete_unmarked_insns ();\n \n-  end_ud_dce ();\n+  fini_dce (false);\n   return 0;\n }\n \n@@ -503,25 +522,12 @@ struct tree_opt_pass pass_ud_rtl_dce =\n   'w'                                   /* letter */\n };\n \n+\n /* -------------------------------------------------------------------------\n    Fast DCE functions\n    ------------------------------------------------------------------------- */\n \n-\n-/* Free the data allocated by init_dce.  */\n-\n-static void\n-fini_dce (void)\n-{\n-  sbitmap_free (marked);\n-  bitmap_obstack_release (&dce_blocks_bitmap_obstack);\n-  bitmap_obstack_release (&dce_tmp_bitmap_obstack);\n-  df_in_progress = false;\n-}\n-\n-\n-/* Process basic block BB.  Return true if the live_in set has\n-   changed.  */\n+/* Process basic block BB.  Return true if the live_in set has changed.  */\n \n static bool\n dce_process_block (basic_block bb, bool redo_out)\n@@ -655,21 +661,22 @@ dce_process_block (basic_block bb, bool redo_out)\n   return block_changed;\n }\n \n+\n+/* Perform fast DCE once initialization is done.  */\n+\n static void\n fast_dce (void)\n {\n   int *postorder = df_get_postorder (DF_BACKWARD);\n   int n_blocks = df_get_n_blocks (DF_BACKWARD);\n-  int i;\n   /* The set of blocks that have been seen on this iteration.  */\n   bitmap processed = BITMAP_ALLOC (&dce_blocks_bitmap_obstack);\n   /* The set of blocks that need to have the out vectors reset because\n      the in of one of their successors has changed.  */\n   bitmap redo_out = BITMAP_ALLOC (&dce_blocks_bitmap_obstack);\n   bitmap all_blocks = BITMAP_ALLOC (&dce_blocks_bitmap_obstack);\n   bool global_changed = true;\n-\n-  int loop_count = 0;\n+  int i, loop_count = 0;\n \n   prescan_insns_for_dce (true);\n \n@@ -745,15 +752,14 @@ fast_dce (void)\n }\n \n \n-/* Callback for running pass_rtl_dce.  */\n+/* Fast DCE.  */\n \n static unsigned int\n rest_of_handle_fast_dce (void)\n {\n   init_dce (true);\n   fast_dce ();\n-  fini_dce ();\n-  df_in_progress = false;\n+  fini_dce (true);\n   return 0;\n }\n \n@@ -765,8 +771,7 @@ rest_of_handle_fast_dce (void)\n    info, and then returns to allow the rest of the problems to be run.\n \n    This can be called by elsewhere but it will not update the bit\n-   vectors for any other problems than LR.\n-*/\n+   vectors for any other problems than LR.  */\n \n void\n run_fast_df_dce (void)\n@@ -781,19 +786,21 @@ run_fast_df_dce (void)\n       \n       df_in_progress = true;\n       rest_of_handle_fast_dce ();\n+      df_in_progress = false;\n+\n       df_set_flags (old_flags);\n     }\n }\n \n+\n static bool\n gate_fast_dce (void)\n {\n   return optimize > 0 && flag_dce;\n }\n \n \n-/* Run a fast DCE pass and return true if any instructions were\n-   deleted.  */\n+/* Run a fast DCE pass and return true if any instructions were deleted.  */\n \n bool\n run_fast_dce (void)\n@@ -820,4 +827,3 @@ struct tree_opt_pass pass_fast_rtl_dce =\n   TODO_ggc_collect,                     /* todo_flags_finish */\n   'w'                                   /* letter */\n };\n-"}]}