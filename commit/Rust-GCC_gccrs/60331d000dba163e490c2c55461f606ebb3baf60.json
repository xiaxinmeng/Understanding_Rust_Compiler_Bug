{"sha": "60331d000dba163e490c2c55461f606ebb3baf60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzMzFkMDAwZGJhMTYzZTQ5MGMyYzU1NDYxZjYwNmViYjNiYWY2MA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-02-03T01:26:34Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-02-03T01:26:34Z"}, "message": "rs6000.c (altivec_expand_vec_perm_le): Generalize for vector types other than V16QImode.\n\ngcc:\n\n2014-02-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_le): Generalize\n\tfor vector types other than V16QImode.\n\t* config/rs6000/altivec.md (altivec_vperm_<mode>): Change to a\n\tdefine_expand, and call altivec_expand_vec_perm_le when producing\n\tcode with little endian element order.\n\t(*altivec_vperm_<mode>_internal): New insn having previous\n\tbehavior of altivec_vperm_<mode>.\n\t(altivec_vperm_<mode>_uns): Change to a define_expand, and call\n\taltivec_expand_vec_perm_le when producing code with little endian\n\telement order.\n\t(*altivec_vperm_<mode>_uns_internal): New insn having previous\n\tbehavior of altivec_vperm_<mode>_uns.\n\ngcc/testsuite:\n\n2014-02-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.dg/vmx/3b-15.c: Remove special handling for little endian.\n\t* gcc.dg/vmx/perm.c: New.\n\t* gcc.dg/vmx/perm-be-order.c: New.\n\nFrom-SVN: r207415", "tree": {"sha": "088378e522bddf3e0e950b3507891f3e858f48df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/088378e522bddf3e0e950b3507891f3e858f48df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60331d000dba163e490c2c55461f606ebb3baf60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60331d000dba163e490c2c55461f606ebb3baf60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60331d000dba163e490c2c55461f606ebb3baf60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60331d000dba163e490c2c55461f606ebb3baf60/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b80afde960b6ba3f4283f5126e3b51d5bd73408f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b80afde960b6ba3f4283f5126e3b51d5bd73408f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b80afde960b6ba3f4283f5126e3b51d5bd73408f"}], "stats": {"total": 224, "additions": 205, "deletions": 19}, "files": [{"sha": "17fcb89e635008f8586576eaba43b7a613790e50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60331d000dba163e490c2c55461f606ebb3baf60", "patch": "@@ -1,3 +1,18 @@\n+2014-02-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_le): Generalize\n+\tfor vector types other than V16QImode.\n+\t* config/rs6000/altivec.md (altivec_vperm_<mode>): Change to a\n+\tdefine_expand, and call altivec_expand_vec_perm_le when producing\n+\tcode with little endian element order.\n+\t(*altivec_vperm_<mode>_internal): New insn having previous\n+\tbehavior of altivec_vperm_<mode>.\n+\t(altivec_vperm_<mode>_uns): Change to a define_expand, and call\n+\taltivec_expand_vec_perm_le when producing code with little endian\n+\telement order.\n+\t(*altivec_vperm_<mode>_uns_internal): New insn having previous\n+\tbehavior of altivec_vperm_<mode>_uns.\n+\n 2014-02-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/altivec.md (UNSPEC_VSUMSWS_DIRECT): New unspec."}, {"sha": "8a8753ff900fd46cf9c5fc283f83e793c9d13cb3", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=60331d000dba163e490c2c55461f606ebb3baf60", "patch": "@@ -1826,7 +1826,22 @@\n   \"vrfiz %0,%1\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n-(define_insn \"altivec_vperm_<mode>\"\n+(define_expand \"altivec_vperm_<mode>\"\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+\t\t   UNSPEC_VPERM))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  if (!VECTOR_ELT_ORDER_BIG)\n+    {\n+      altivec_expand_vec_perm_le (operands);\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*altivec_vperm_<mode>_internal\"\n   [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n \t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n \t\t    (match_operand:VM 2 \"register_operand\" \"v\")\n@@ -1836,7 +1851,22 @@\n   \"vperm %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vperm_<mode>_uns\"\n+(define_expand \"altivec_vperm_<mode>_uns\"\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+\t\t   UNSPEC_VPERM_UNS))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  if (!VECTOR_ELT_ORDER_BIG)\n+    {\n+      altivec_expand_vec_perm_le (operands);\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*altivec_vperm_<mode>_uns_internal\"\n   [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n \t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n \t\t    (match_operand:VM 2 \"register_operand\" \"v\")"}, {"sha": "be4c0056ae67660397dd5aaa053ecf7e21e3f8e3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=60331d000dba163e490c2c55461f606ebb3baf60", "patch": "@@ -29840,30 +29840,31 @@ altivec_expand_vec_perm_le (rtx operands[4])\n   rtx op1 = operands[2];\n   rtx sel = operands[3];\n   rtx tmp = target;\n+  rtx splatreg = gen_reg_rtx (V16QImode);\n+  enum machine_mode mode = GET_MODE (target);\n \n   /* Get everything in regs so the pattern matches.  */\n   if (!REG_P (op0))\n-    op0 = force_reg (V16QImode, op0);\n+    op0 = force_reg (mode, op0);\n   if (!REG_P (op1))\n-    op1 = force_reg (V16QImode, op1);\n+    op1 = force_reg (mode, op1);\n   if (!REG_P (sel))\n     sel = force_reg (V16QImode, sel);\n   if (!REG_P (target))\n-    tmp = gen_reg_rtx (V16QImode);\n+    tmp = gen_reg_rtx (mode);\n \n   /* SEL = splat(31) - SEL.  */\n   /* We want to subtract from 31, but we can't vspltisb 31 since\n      it's out of range.  -1 works as well because only the low-order\n      five bits of the permute control vector elements are used.  */\n   splat = gen_rtx_VEC_DUPLICATE (V16QImode,\n \t\t\t\t gen_rtx_CONST_INT (QImode, -1));\n-  emit_move_insn (tmp, splat);\n-  sel = gen_rtx_MINUS (V16QImode, tmp, sel);\n-  emit_move_insn (tmp, sel);\n+  emit_move_insn (splatreg, splat);\n+  sel = gen_rtx_MINUS (V16QImode, splatreg, sel);\n+  emit_move_insn (splatreg, sel);\n \n   /* Permute with operands reversed and adjusted selector.  */\n-  unspec = gen_rtx_UNSPEC (V16QImode, gen_rtvec (3, op1, op0, tmp),\n-\t\t\t   UNSPEC_VPERM);\n+  unspec = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op0, splatreg), UNSPEC_VPERM);\n \n   /* Copy into target, possibly by way of a register.  */\n   if (!REG_P (target))"}, {"sha": "4d1f3568fef511c520af45a61ccd679c94a11507", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60331d000dba163e490c2c55461f606ebb3baf60", "patch": "@@ -1,3 +1,9 @@\n+2014-02-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.dg/vmx/3b-15.c: Remove special handling for little endian.\n+\t* gcc.dg/vmx/perm.c: New.\n+\t* gcc.dg/vmx/perm-be-order.c: New.\n+\n 2014-02-02  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.dg/vmx/vsums.c: New."}, {"sha": "ec9cf2c5a0d506e524153d23f7738df2a98fffb1", "filename": "gcc/testsuite/gcc.dg/vmx/3b-15.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-15.c?ref=60331d000dba163e490c2c55461f606ebb3baf60", "patch": "@@ -3,11 +3,7 @@\n vector unsigned char\n f (vector unsigned char a, vector unsigned char b, vector unsigned char c)\n {\n-#ifdef __BIG_ENDIAN__\n   return vec_perm(a,b,c); \n-#else\n-  return vec_perm(b,a,c);\n-#endif\n }\n \n static void test()\n@@ -16,13 +12,8 @@ static void test()\n \t\t\t\t\t    8,9,10,11,12,13,14,15}),\n \t\t     ((vector unsigned char){70,71,72,73,74,75,76,77,\n \t\t\t\t\t    78,79,80,81,82,83,84,85}),\n-#ifdef __BIG_ENDIAN__\n \t\t     ((vector unsigned char){0x1,0x14,0x18,0x10,0x16,0x15,0x19,0x1a,\n \t\t\t\t\t    0x1c,0x1c,0x1c,0x12,0x8,0x1d,0x1b,0xe})),\n-#else\n-                     ((vector unsigned char){0x1e,0xb,0x7,0xf,0x9,0xa,0x6,0x5,\n-                                            0x3,0x3,0x3,0xd,0x17,0x2,0x4,0x11})),\n-#endif\n \t\t   ((vector unsigned char){1,74,78,70,76,75,79,80,82,82,82,72,8,83,81,14})),\n \t\"f\");\n }"}, {"sha": "604f63dc95f811a13cad9a5e987813549eedf388", "filename": "gcc/testsuite/gcc.dg/vmx/perm-be-order.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fperm-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fperm-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fperm-be-order.c?ref=60331d000dba163e490c2c55461f606ebb3baf60", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  /* Input vectors.  */\n+  vector unsigned char vuca = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector unsigned char vucb = {16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};\n+  vector signed char vsca = {-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed char vscb = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n+  vector unsigned short vusb = {8,9,10,11,12,13,14,15};\n+  vector signed short vssa = {-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed short vssb = {0,1,2,3,4,5,6,7};\n+  vector unsigned int vuia = {0,1,2,3};\n+  vector unsigned int vuib = {4,5,6,7};\n+  vector signed int vsia = {-4,-3,-2,-1};\n+  vector signed int vsib = {0,1,2,3};\n+  vector float vfa = {-4.0,-3.0,-2.0,-1.0};\n+  vector float vfb = {0.0,1.0,2.0,3.0};\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned char vucp = {15,16,14,17,13,18,12,19,11,20,10,21,9,22,8,23};\n+  vector unsigned char vscp = {15,16,14,17,13,18,12,19,11,20,10,21,9,22,8,23};\n+  vector unsigned char vusp = {15,14,17,16,13,12,19,18,11,10,21,20,9,8,23,22};\n+  vector unsigned char vssp = {15,14,17,16,13,12,19,18,11,10,21,20,9,8,23,22};\n+  vector unsigned char vuip = {15,14,13,12,19,18,17,16,11,10,9,8,23,22,21,20};\n+  vector unsigned char vsip = {15,14,13,12,19,18,17,16,11,10,9,8,23,22,21,20};\n+  vector unsigned char vfp  = {15,14,13,12,19,18,17,16,11,10,9,8,23,22,21,20};\n+#else\n+  vector unsigned char vucp = {0,31,1,30,2,29,3,28,4,27,5,26,6,25,7,24};\n+  vector unsigned char vscp = {0,31,1,30,2,29,3,28,4,27,5,26,6,25,7,24};\n+  vector unsigned char vusp = {0,1,30,31,2,3,28,29,4,5,26,27,6,7,24,25};\n+  vector unsigned char vssp = {0,1,30,31,2,3,28,29,4,5,26,27,6,7,24,25};\n+  vector unsigned char vuip = {0,1,2,3,28,29,30,31,4,5,6,7,24,25,26,27};\n+  vector unsigned char vsip = {0,1,2,3,28,29,30,31,4,5,6,7,24,25,26,27};\n+  vector unsigned char vfp  = {0,1,2,3,28,29,30,31,4,5,6,7,24,25,26,27};\n+#endif\n+\n+  /* Result vectors.  */\n+  vector unsigned char vuc;\n+  vector signed char vsc;\n+  vector unsigned short vus;\n+  vector signed short vss;\n+  vector unsigned int vui;\n+  vector signed int vsi;\n+  vector float vf;\n+\n+  /* Expected result vectors.  */\n+  vector unsigned char vucr = {0,31,1,30,2,29,3,28,4,27,5,26,6,25,7,24};\n+  vector signed char vscr = {-16,15,-15,14,-14,13,-13,12,-12,11,-11,10,-10,9,-9,8};\n+  vector unsigned short vusr = {0,15,1,14,2,13,3,12};\n+  vector signed short vssr = {-8,7,-7,6,-6,5,-5,4};\n+  vector unsigned int vuir = {0,7,1,6};\n+  vector signed int vsir = {-4,3,-3,2};\n+  vector float vfr = {-4.0,3.0,-3.0,2.0};\n+\n+  vuc = vec_perm (vuca, vucb, vucp);\n+  vsc = vec_perm (vsca, vscb, vscp);\n+  vus = vec_perm (vusa, vusb, vusp);\n+  vss = vec_perm (vssa, vssb, vssp);\n+  vui = vec_perm (vuia, vuib, vuip);\n+  vsi = vec_perm (vsia, vsib, vsip);\n+  vf  = vec_perm (vfa,  vfb,  vfp );\n+\n+  check (vec_all_eq (vuc, vucr), \"vuc\");\n+  check (vec_all_eq (vsc, vscr), \"vsc\");\n+  check (vec_all_eq (vus, vusr), \"vus\");\n+  check (vec_all_eq (vss, vssr), \"vss\");\n+  check (vec_all_eq (vui, vuir), \"vui\");\n+  check (vec_all_eq (vsi, vsir), \"vsi\");\n+  check (vec_all_eq (vf,  vfr),  \"vf\" );\n+}"}, {"sha": "be6bf3422c3fdfd828f154132a6a2c8f3df1352e", "filename": "gcc/testsuite/gcc.dg/vmx/perm.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fperm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60331d000dba163e490c2c55461f606ebb3baf60/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fperm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fperm.c?ref=60331d000dba163e490c2c55461f606ebb3baf60", "patch": "@@ -0,0 +1,69 @@\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  /* Input vectors.  */\n+  vector unsigned char vuca = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector unsigned char vucb\n+    = {16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};\n+  vector unsigned char vucp = {0,31,1,30,2,29,3,28,4,27,5,26,6,25,7,24};\n+\n+  vector signed char vsca\n+    = {-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed char vscb = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector unsigned char vscp = {0,31,1,30,2,29,3,28,4,27,5,26,6,25,7,24};\n+\n+  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n+  vector unsigned short vusb = {8,9,10,11,12,13,14,15};\n+  vector unsigned char vusp = {0,1,30,31,2,3,28,29,4,5,26,27,6,7,24,25};\n+\n+  vector signed short vssa = {-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed short vssb = {0,1,2,3,4,5,6,7};\n+  vector unsigned char vssp = {0,1,30,31,2,3,28,29,4,5,26,27,6,7,24,25};\n+\n+  vector unsigned int vuia = {0,1,2,3};\n+  vector unsigned int vuib = {4,5,6,7};\n+  vector unsigned char vuip = {0,1,2,3,28,29,30,31,4,5,6,7,24,25,26,27};\n+\n+  vector signed int vsia = {-4,-3,-2,-1};\n+  vector signed int vsib = {0,1,2,3};\n+  vector unsigned char vsip = {0,1,2,3,28,29,30,31,4,5,6,7,24,25,26,27};\n+\n+  vector float vfa = {-4.0,-3.0,-2.0,-1.0};\n+  vector float vfb = {0.0,1.0,2.0,3.0};\n+  vector unsigned char vfp = {0,1,2,3,28,29,30,31,4,5,6,7,24,25,26,27};\n+\n+  /* Result vectors.  */\n+  vector unsigned char vuc;\n+  vector signed char vsc;\n+  vector unsigned short vus;\n+  vector signed short vss;\n+  vector unsigned int vui;\n+  vector signed int vsi;\n+  vector float vf;\n+\n+  /* Expected result vectors.  */\n+  vector unsigned char vucr = {0,31,1,30,2,29,3,28,4,27,5,26,6,25,7,24};\n+  vector signed char vscr = {-16,15,-15,14,-14,13,-13,12,-12,11,-11,10,-10,9,-9,8};\n+  vector unsigned short vusr = {0,15,1,14,2,13,3,12};\n+  vector signed short vssr = {-8,7,-7,6,-6,5,-5,4};\n+  vector unsigned int vuir = {0,7,1,6};\n+  vector signed int vsir = {-4,3,-3,2};\n+  vector float vfr = {-4.0,3.0,-3.0,2.0};\n+\n+  vuc = vec_perm (vuca, vucb, vucp);\n+  vsc = vec_perm (vsca, vscb, vscp);\n+  vus = vec_perm (vusa, vusb, vusp);\n+  vss = vec_perm (vssa, vssb, vssp);\n+  vui = vec_perm (vuia, vuib, vuip);\n+  vsi = vec_perm (vsia, vsib, vsip);\n+  vf  = vec_perm (vfa,  vfb,  vfp );\n+\n+  check (vec_all_eq (vuc, vucr), \"vuc\");\n+  check (vec_all_eq (vsc, vscr), \"vsc\");\n+  check (vec_all_eq (vus, vusr), \"vus\");\n+  check (vec_all_eq (vss, vssr), \"vss\");\n+  check (vec_all_eq (vui, vuir), \"vui\");\n+  check (vec_all_eq (vsi, vsir), \"vsi\");\n+  check (vec_all_eq (vf,  vfr),  \"vf\" );\n+}"}]}