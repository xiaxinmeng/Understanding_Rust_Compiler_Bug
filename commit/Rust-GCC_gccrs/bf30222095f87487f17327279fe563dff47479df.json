{"sha": "bf30222095f87487f17327279fe563dff47479df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzMDIyMjA5NWY4NzQ4N2YxNzMyNzI3OWZlNTYzZGZmNDc0NzlkZg==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2005-08-10T20:16:29Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2005-08-10T20:16:29Z"}, "message": "re PR libfortran/22143 (missing kinds 1 and 2 for eoshift and cshift)\n\n\n2005-08-10  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR libfortran/22143\n\tgfortran.h:  Declare new function gfc_resolve_dim_arg.\n\tresolve.c:  New function gfc_resolve_dim_arg.\n\tiresolve.c (gfc_resolve_all):  Use gfc_resolve_dim_arg.\n\t(gfc_resolve_any):  Likewise.\n\t(gfc_resolve_count):  Likewise.\n\t(gfc_resolve_cshift):  Likewise.  If the kind of shift is less\n\tgfc_default_integer_kind, convert it to default integer type.\n\t(gfc_resolve_eoshift):  Likewise.\n\t(gfc_resolve_maxloc):  Use gfc_resolve_dim_arg.\n\t(gfc_resolve_maxval):  Likewise.\n\t(gfc_resolve_minloc):  Likewise.\n\t(gfc_resolve_minval):  Likewise.\n\t(gfc_resolve_product):  Likewise.\n\t(gfc_resolve_spread):  Likewise.\n\t(gfc_resolve_sum):  Likewise.\n\n2005-08-10  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR libfortran/22143\n\tgfortran.dg/shift-kind.f90:  New testcase.\n\nFrom-SVN: r102957", "tree": {"sha": "192d52eb31c60fbe56e1909dc928b0c43d08c0ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/192d52eb31c60fbe56e1909dc928b0c43d08c0ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf30222095f87487f17327279fe563dff47479df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf30222095f87487f17327279fe563dff47479df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf30222095f87487f17327279fe563dff47479df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf30222095f87487f17327279fe563dff47479df/comments", "author": null, "committer": null, "parents": [{"sha": "bb8df8a62d346532834194e96b8d3970eb8cd6e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb8df8a62d346532834194e96b8d3970eb8cd6e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb8df8a62d346532834194e96b8d3970eb8cd6e0"}], "stats": {"total": 149, "additions": 134, "deletions": 15}, "files": [{"sha": "bbbda8df05f429327ec9afbbdcfc1f4a914f32dd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30222095f87487f17327279fe563dff47479df/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30222095f87487f17327279fe563dff47479df/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bf30222095f87487f17327279fe563dff47479df", "patch": "@@ -1,3 +1,22 @@\n+2005-08-10  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/22143\n+\tgfortran.h:  Declare new function gfc_resolve_dim_arg.\n+\tresolve.c:  New function gfc_resolve_dim_arg.\n+\tiresolve.c (gfc_resolve_all):  Use gfc_resolve_dim_arg.\n+\t(gfc_resolve_any):  Likewise.\n+\t(gfc_resolve_count):  Likewise.\n+\t(gfc_resolve_cshift):  Likewise.  If the kind of shift is less\n+\tgfc_default_integer_kind, convert it to default integer type.\n+\t(gfc_resolve_eoshift):  Likewise.\n+\t(gfc_resolve_maxloc):  Use gfc_resolve_dim_arg.\n+\t(gfc_resolve_maxval):  Likewise.\n+\t(gfc_resolve_minloc):  Likewise.\n+\t(gfc_resolve_minval):  Likewise.\n+\t(gfc_resolve_product):  Likewise.\n+\t(gfc_resolve_spread):  Likewise.\n+\t(gfc_resolve_sum):  Likewise.\n+\n 2005-08-09  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* check.c (gfc_check_ttynam_sub, gfc_check_isatty): Add check"}, {"sha": "cb68ad49cb2e7cd906e380f942cf7926e1ad3881", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30222095f87487f17327279fe563dff47479df/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30222095f87487f17327279fe563dff47479df/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=bf30222095f87487f17327279fe563dff47479df", "patch": "@@ -1779,6 +1779,7 @@ int gfc_pure (gfc_symbol *);\n int gfc_elemental (gfc_symbol *);\n try gfc_resolve_iterator (gfc_iterator *, bool);\n try gfc_resolve_index (gfc_expr *, int);\n+try gfc_resolve_dim_arg (gfc_expr *);\n \n /* array.c */\n void gfc_free_array_spec (gfc_array_spec *);"}, {"sha": "ef43946a55b571836234cc044227fde5a197de0b", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30222095f87487f17327279fe563dff47479df/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30222095f87487f17327279fe563dff47479df/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=bf30222095f87487f17327279fe563dff47479df", "patch": "@@ -129,7 +129,7 @@ gfc_resolve_all (gfc_expr * f, gfc_expr * mask, gfc_expr * dim)\n \n   if (dim != NULL)\n     {\n-      gfc_resolve_index (dim, 1);\n+      gfc_resolve_dim_arg (dim);\n       f->rank = mask->rank - 1;\n       f->shape = gfc_copy_shape_excluding (mask->shape, mask->rank, dim);\n     }\n@@ -167,7 +167,7 @@ gfc_resolve_any (gfc_expr * f, gfc_expr * mask, gfc_expr * dim)\n \n   if (dim != NULL)\n     {\n-      gfc_resolve_index (dim, 1);\n+      gfc_resolve_dim_arg (dim);\n       f->rank = mask->rank - 1;\n       f->shape = gfc_copy_shape_excluding (mask->shape, mask->rank, dim);\n     }\n@@ -359,7 +359,7 @@ gfc_resolve_count (gfc_expr * f, gfc_expr * mask, gfc_expr * dim)\n   if (dim != NULL)\n     {\n       f->rank = mask->rank - 1;\n-      gfc_resolve_index (dim, 1);\n+      gfc_resolve_dim_arg (dim);\n       f->shape = gfc_copy_shape_excluding (mask->shape, mask->rank, dim);\n     }\n \n@@ -385,9 +385,19 @@ gfc_resolve_cshift (gfc_expr * f, gfc_expr * array,\n   else\n     n = 0;\n \n+  /* Convert shift to at least gfc_default_integer_kind, so we don't need\n+     kind=1 and kind=2 versions of the library functions.  */\n+  if (shift->ts.kind < gfc_default_integer_kind)\n+    {\n+      gfc_typespec ts;\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_default_integer_kind;\n+      gfc_convert_type_warn (shift, &ts, 2, 0);\n+    }\n+\n   if (dim != NULL)\n     {\n-      gfc_resolve_index (dim, 1);\n+      gfc_resolve_dim_arg (dim);\n       /* Convert dim to shift's kind, so we don't need so many variations.  */\n       if (dim->ts.kind != shift->ts.kind)\n \tgfc_convert_type_warn (dim, &shift->ts, 2, 0);\n@@ -474,10 +484,23 @@ gfc_resolve_eoshift (gfc_expr * f, gfc_expr * array,\n   if (boundary && boundary->rank > 0)\n     n = n | 2;\n \n-  /* Convert dim to the same type as shift, so we don't need quite so many\n-     variations.  */\n-  if (dim != NULL && dim->ts.kind != shift->ts.kind)\n-    gfc_convert_type_warn (dim, &shift->ts, 2, 0);\n+  /* Convert shift to at least gfc_default_integer_kind, so we don't need\n+     kind=1 and kind=2 versions of the library functions.  */\n+  if (shift->ts.kind < gfc_default_integer_kind)\n+    {\n+      gfc_typespec ts;\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_default_integer_kind;\n+      gfc_convert_type_warn (shift, &ts, 2, 0);\n+    }\n+\n+  if (dim != NULL)\n+    {\n+      gfc_resolve_dim_arg (dim);\n+      /* Convert dim to shift's kind, so we don't need so many variations.  */\n+      if (dim->ts.kind != shift->ts.kind)\n+\tgfc_convert_type_warn (dim, &shift->ts, 2, 0);\n+    }\n \n   f->value.function.name =\n     gfc_get_string (PREFIX(\"eoshift%d_%d\"), n, shift->ts.kind);\n@@ -921,7 +944,7 @@ gfc_resolve_maxloc (gfc_expr * f, gfc_expr * array, gfc_expr * dim,\n   else\n     {\n       f->rank = array->rank - 1;\n-      gfc_resolve_index (dim, 1);\n+      gfc_resolve_dim_arg (dim);\n     }\n \n   name = mask ? \"mmaxloc\" : \"maxloc\";\n@@ -940,7 +963,7 @@ gfc_resolve_maxval (gfc_expr * f, gfc_expr * array, gfc_expr * dim,\n   if (dim != NULL)\n     {\n       f->rank = array->rank - 1;\n-      gfc_resolve_index (dim, 1);\n+      gfc_resolve_dim_arg (dim);\n     }\n \n   f->value.function.name =\n@@ -982,7 +1005,7 @@ gfc_resolve_minloc (gfc_expr * f, gfc_expr * array, gfc_expr * dim,\n   else\n     {\n       f->rank = array->rank - 1;\n-      gfc_resolve_index (dim, 1);\n+      gfc_resolve_dim_arg (dim);\n     }\n \n   name = mask ? \"mminloc\" : \"minloc\";\n@@ -1001,7 +1024,7 @@ gfc_resolve_minval (gfc_expr * f, gfc_expr * array, gfc_expr * dim,\n   if (dim != NULL)\n     {\n       f->rank = array->rank - 1;\n-      gfc_resolve_index (dim, 1);\n+      gfc_resolve_dim_arg (dim);\n     }\n \n   f->value.function.name =\n@@ -1098,7 +1121,7 @@ gfc_resolve_product (gfc_expr * f, gfc_expr * array, gfc_expr * dim,\n   if (dim != NULL)\n     {\n       f->rank = array->rank - 1;\n-      gfc_resolve_index (dim, 1);\n+      gfc_resolve_dim_arg (dim);\n     }\n \n   f->value.function.name =\n@@ -1341,7 +1364,7 @@ gfc_resolve_spread (gfc_expr * f, gfc_expr * source,\n   f->rank = source->rank + 1;\n   f->value.function.name = PREFIX(\"spread\");\n \n-  gfc_resolve_index (dim, 1);\n+  gfc_resolve_dim_arg (dim);\n   gfc_resolve_index (ncopies, 1);\n }\n \n@@ -1388,7 +1411,7 @@ gfc_resolve_sum (gfc_expr * f, gfc_expr * array, gfc_expr * dim,\n   if (dim != NULL)\n     {\n       f->rank = array->rank - 1;\n-      gfc_resolve_index (dim, 1);\n+      gfc_resolve_dim_arg (dim);\n     }\n \n   f->value.function.name ="}, {"sha": "ace59588991f6826c9ab4f0e41ddfd311a4729c8", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30222095f87487f17327279fe563dff47479df/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30222095f87487f17327279fe563dff47479df/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=bf30222095f87487f17327279fe563dff47479df", "patch": "@@ -1828,6 +1828,40 @@ gfc_resolve_index (gfc_expr * index, int check_scalar)\n   return SUCCESS;\n }\n \n+/* Resolve a dim argument to an intrinsic function.  */\n+\n+try\n+gfc_resolve_dim_arg (gfc_expr *dim)\n+{\n+  if (dim == NULL)\n+    return SUCCESS;\n+\n+  if (gfc_resolve_expr (dim) == FAILURE)\n+    return FAILURE;\n+\n+  if (dim->rank != 0)\n+    {\n+      gfc_error (\"Argument dim at %L must be scalar\", &dim->where);\n+      return FAILURE;\n+  \n+    }\n+  if (dim->ts.type != BT_INTEGER)\n+    {\n+      gfc_error (\"Argument dim at %L must be of INTEGER type\", &dim->where);\n+      return FAILURE;\n+    }\n+  if (dim->ts.kind != gfc_index_integer_kind)\n+    {\n+      gfc_typespec ts;\n+\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_index_integer_kind;\n+\n+      gfc_convert_type_warn (dim, &ts, 2, 0);\n+    }\n+\n+  return SUCCESS;\n+}\n \n /* Given an expression that contains array references, update those array\n    references to point to the right array specifications.  While this is"}, {"sha": "7d4d8f2860def58a56917e7dd981ef0849a181fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30222095f87487f17327279fe563dff47479df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30222095f87487f17327279fe563dff47479df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf30222095f87487f17327279fe563dff47479df", "patch": "@@ -1,3 +1,8 @@\n+2005-08-10  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/22143\n+\tgfortran.dg/shift-kind.f90:  New testcase.\n+\n 2005-08-10  Richard Sandiford  <richard@codesourcery.com>\n \n \t* gcc.dg/arm-eabi1.c: Test aeabi_idiv, __aeabi_uidiv, __aeabi_uread4,"}, {"sha": "70d874813e844cf3de4c9b221d18369be9d3bf77", "filename": "gcc/testsuite/gfortran.dg/shift-kind.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30222095f87487f17327279fe563dff47479df/gcc%2Ftestsuite%2Fgfortran.dg%2Fshift-kind.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30222095f87487f17327279fe563dff47479df/gcc%2Ftestsuite%2Fgfortran.dg%2Fshift-kind.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fshift-kind.f90?ref=bf30222095f87487f17327279fe563dff47479df", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do compile }\n+! PR 22143:  We didn' have shift arguments to eoshift of kind=1\n+!            and kind=2.\n+program main\n+  implicit none\n+  integer, dimension (3,3) :: a, b, w\n+  integer(kind=2), dimension (3) :: sh2\n+  integer(kind=1), dimension (3) :: sh1\n+  integer, dimension(3) :: bo\n+  integer :: i,j\n+\n+  a = reshape((/(i,i=1,9)/),shape(a))\n+  sh1 = (/ -3, -1, 3 /)\n+  sh2 = (/ -3, -1, 3 /)\n+  bo = (/-999, -99, -9 /)\n+  b = cshift(a, shift=sh1)\n+  call foo(b)\n+  b = cshift(a, shift=sh2)\n+  call foo(b)\n+\n+  b = eoshift(a, shift=sh1)\n+  call foo(b)\n+  b = eoshift(a, shift=sh1, boundary=bo)\n+  call foo(b)\n+  b = eoshift(a, shift=sh2)\n+  call foo(b)\n+  b = eoshift(a, shift=sh2, boundary=bo)\n+  call foo(b)\n+\n+end program main\n+\n+subroutine foo(b)\n+  ! Do nothing but confuse the optimizer into not removing the\n+  ! function calls.\n+  integer, dimension(3,3) :: b\n+end subroutine foo\n+"}]}