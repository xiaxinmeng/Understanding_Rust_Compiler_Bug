{"sha": "3522082b2fc6caf52267ee34af0d360ad64076d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUyMjA4MmIyZmM2Y2FmNTIyNjdlZTM0YWYwZDM2MGFkNjQwNzZkMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-06-02T12:07:58Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-06-02T12:07:58Z"}, "message": "i386.md (all uses of ext_register_operand): Make sure they are VOIDmode; replace all uses outside zero_extend.\n\n\t* i386.md (all uses of ext_register_operand): Make sure they are\n\tVOIDmode; replace all uses outside zero_extend.\n\t(and?i splitters): Use ext_register_operands.\n\t(test?i peep2): Remove ignored constraints.\n\t* i386.c (ext_register_operand): Check that operand is\n\teighter pseudo or hard or 'Q' register.\n\nFrom-SVN: r42798", "tree": {"sha": "c721661721517e452dbdade1f8dfb688aca2cc81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c721661721517e452dbdade1f8dfb688aca2cc81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3522082b2fc6caf52267ee34af0d360ad64076d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3522082b2fc6caf52267ee34af0d360ad64076d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3522082b2fc6caf52267ee34af0d360ad64076d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3522082b2fc6caf52267ee34af0d360ad64076d2/comments", "author": null, "committer": null, "parents": [{"sha": "aff5d0538f08a86abb353fdb862849f6eb4f08a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff5d0538f08a86abb353fdb862849f6eb4f08a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff5d0538f08a86abb353fdb862849f6eb4f08a4"}], "stats": {"total": 65, "additions": 37, "deletions": 28}, "files": [{"sha": "1b0c0e1b288bbf437fd88f158be5fce7115ea483", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3522082b2fc6caf52267ee34af0d360ad64076d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3522082b2fc6caf52267ee34af0d360ad64076d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3522082b2fc6caf52267ee34af0d360ad64076d2", "patch": "@@ -1,3 +1,12 @@\n+Sat Jun  2 12:23:51 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (all uses of ext_register_operand): Make sure they are\n+\tVOIDmode; replace all uses outside zero_extend.\n+\t(and?i splitters): Use ext_register_operands.\n+\t(test?i peep2): Remove ignored constraints.\n+\t* i386.c (ext_register_operand): Check that operand is\n+\teighter pseudo or hard or 'Q' register.\n+\n Sat Jun  2 06:53:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree.h (struct record_layout_info_s): New field unpadded_align."}, {"sha": "4027019220cdd5d86a1063cd064021db12033f31", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3522082b2fc6caf52267ee34af0d360ad64076d2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3522082b2fc6caf52267ee34af0d360ad64076d2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3522082b2fc6caf52267ee34af0d360ad64076d2", "patch": "@@ -1694,10 +1694,17 @@ ext_register_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n+  int regno;\n   if ((!TARGET_64BIT || GET_MODE (op) != DImode)\n       && GET_MODE (op) != SImode && GET_MODE (op) != HImode)\n     return 0;\n-  return register_operand (op, VOIDmode);\n+\n+  if (!register_operand (op, VOIDmode))\n+    return 0;\n+\n+  /* Be curefull to accept only registers having upper parts.  */\n+  regno = REG_P (op) ? REGNO (op) : REGNO (SUBREG_REG (op));\n+  return (regno > LAST_VIRTUAL_REGISTER || regno < 4);\n }\n \n /* Return 1 if this is a valid binary floating-point operation."}, {"sha": "dcd205bbd66119ddc8eafe40446ed9c00ee56a19", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3522082b2fc6caf52267ee34af0d360ad64076d2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3522082b2fc6caf52267ee34af0d360ad64076d2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3522082b2fc6caf52267ee34af0d360ad64076d2", "patch": "@@ -1220,7 +1220,7 @@\n (define_insn \"*cmpqi_ext_1_rex64\"\n   [(set (reg 17)\n \t(compare\n-\t  (match_operand:QI 0 \"ext_register_operand\" \"Q\")\n+\t  (match_operand:QI 0 \"register_operand\" \"Q\")\n \t  (subreg:QI\n \t    (zero_extract:SI\n \t      (match_operand 1 \"ext_register_operand\" \"Q\")\n@@ -2142,7 +2142,7 @@\n \n (define_insn \"*movsi_extv_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=R\")\n-\t(sign_extract:SI (match_operand:SI 1 \"ext_register_operand\" \"Q\")\n+\t(sign_extract:SI (match_operand 1 \"ext_register_operand\" \"Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8)))]\n   \"\"\n@@ -2152,7 +2152,7 @@\n \n (define_insn \"*movhi_extv_1\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=R\")\n-\t(sign_extract:HI (match_operand:SI 1 \"ext_register_operand\" \"Q\")\n+\t(sign_extract:HI (match_operand 1 \"ext_register_operand\" \"Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8)))]\n   \"\"\n@@ -2162,7 +2162,7 @@\n \n (define_insn \"*movqi_extv_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=Qm,?r\")\n-        (sign_extract:QI (match_operand:SI 1 \"ext_register_operand\" \"Q,Q\")\n+        (sign_extract:QI (match_operand 1 \"ext_register_operand\" \"Q,Q\")\n                          (const_int 8)\n                          (const_int 8)))]\n   \"!TARGET_64BIT\"\n@@ -2190,7 +2190,7 @@\n \n (define_insn \"*movqi_extv_1_rex64\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=Q,?R\")\n-        (sign_extract:QI (match_operand:SI 1 \"ext_register_operand\" \"Q,Q\")\n+        (sign_extract:QI (match_operand 1 \"ext_register_operand\" \"Q,Q\")\n                          (const_int 8)\n                          (const_int 8)))]\n   \"TARGET_64BIT\"\n@@ -2327,7 +2327,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(match_operand:SI 1 \"ext_register_operand\" \"Q\"))]\n+\t(match_operand:SI 1 \"register_operand\" \"Q\"))]\n   \"TARGET_64BIT\"\n   \"mov{b}\\\\t{%b1, %h0|%h0, %b1}\"\n   [(set_attr \"type\" \"imov\")\n@@ -2337,7 +2337,7 @@\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n-\t(and:SI (lshiftrt:SI (match_operand:SI 1 \"ext_register_operand\" \"Q\")\n+\t(and:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"Q\")\n \t\t\t     (const_int 8))\n \t\t(const_int 255)))]\n   \"\"\n@@ -6777,15 +6777,15 @@\n \n \n (define_insn \"addqi_ext_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=q\")\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(plus:SI\n \t  (zero_extract:SI\n \t    (match_operand 1 \"ext_register_operand\" \"0\")\n \t    (const_int 8)\n \t    (const_int 8))\n-\t  (match_operand:QI 2 \"general_operand\" \"qmn\")))\n+\t  (match_operand:QI 2 \"general_operand\" \"Qmn\")))\n    (clobber (reg:CC 17))]\n   \"!TARGET_64BIT\"\n   \"*\n@@ -8055,7 +8055,7 @@\n \t      (const_int 8)\n \t      (const_int 8))\n \t    (zero_extend:SI\n-\t      (match_operand:QI 1 \"ext_register_operand\" \"Q\")))\n+\t      (match_operand:QI 1 \"register_operand\" \"Q\")))\n \t  (const_int 0)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\\\t{%1, %h0|%h0, %1}\"\n@@ -8271,36 +8271,29 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n+  [(set (match_operand 0 \"ext_register_operand\" \"\")\n \t(and (match_dup 0)\n \t     (const_int -65536)))\n    (clobber (reg:CC 17))]\n-  \"optimize_size\n-   && (GET_MODE (operands[0]) == SImode || GET_MODE (operands[0]) == HImode\n-       || (TARGET_64BIT && GET_MODE (operands[0]) == DImode))\"\n+  \"optimize_size\"\n   [(set (strict_low_part (match_dup 1)) (const_int 0))]\n   \"operands[1] = gen_lowpart (HImode, operands[0]);\")\n \n (define_split\n-  [(set (match_operand 0 \"q_regs_operand\" \"\")\n+  [(set (match_operand 0 \"ext_register_operand\" \"\")\n \t(and (match_dup 0)\n \t     (const_int -256)))\n    (clobber (reg:CC 17))]\n-  \"(optimize_size || !TARGET_PARTIAL_REG_STALL)\n-   && (GET_MODE (operands[0]) == SImode || GET_MODE (operands[0]) == HImode\n-       || (TARGET_64BIT && GET_MODE (operands[0]) == DImode))\"\n+  \"(optimize_size || !TARGET_PARTIAL_REG_STALL)\"\n   [(set (strict_low_part (match_dup 1)) (const_int 0))]\n   \"operands[1] = gen_lowpart (QImode, operands[0]);\")\n \n (define_split\n-  [(set (match_operand 0 \"register_operand\" \"\")\n+  [(set (match_operand 0 \"ext_register_operand\" \"\")\n \t(and (match_dup 0)\n \t     (const_int -65281)))\n    (clobber (reg:CC 17))]\n-  \"(optimize_size || !TARGET_PARTIAL_REG_STALL)\n-   && (GET_MODE (operands[0]) == SImode || GET_MODE (operands[0]) == HImode\n-       || (TARGET_64BIT && GET_MODE (operands[0]) == DImode))\n-   && (! reload_completed || ANY_QI_REG_P (operands[0]))\"\n+  \"(optimize_size || !TARGET_PARTIAL_REG_STALL)\"\n   [(parallel [(set (zero_extract:SI (match_dup 0)\n \t\t\t\t    (const_int 8)\n \t\t\t\t    (const_int 8))\n@@ -8501,7 +8494,7 @@\n \t  (and:SI\n \t    (zero_extract:SI\n \t      (match_operand 1 \"ext_register_operand\" \"0\")\n-\t\t(const_int 8)\n+\t      (const_int 8)\n \t      (const_int 8))\n \t    (match_operand 2 \"const_int_operand\" \"n\"))\n \t  (const_int 0)))\n@@ -8549,7 +8542,7 @@\n \t    (const_int 8)\n \t    (const_int 8))\n \t  (zero_extend:SI\n-\t    (match_operand:QI 2 \"ext_register_operand\" \"Q\"))))\n+\t    (match_operand 2 \"ext_register_operand\" \"Q\"))))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT\"\n   \"and{b}\\\\t{%2, %h0|%h0, %2}\"\n@@ -16835,10 +16828,10 @@\n \t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n-\t      (match_operand 0 \"ext_register_operand\" \"q\")\n+\t      (match_operand 0 \"ext_register_operand\" \"\")\n \t      (const_int 8)\n \t      (const_int 8))\n-\t    (match_operand 1 \"const_int_operand\" \"n\"))\n+\t    (match_operand 1 \"const_int_operand\" \"\"))\n \t  (const_int 0)))]\n   \"! TARGET_PARTIAL_REG_STALL\n    && ix86_match_ccmode (insn, CCNOmode)"}]}