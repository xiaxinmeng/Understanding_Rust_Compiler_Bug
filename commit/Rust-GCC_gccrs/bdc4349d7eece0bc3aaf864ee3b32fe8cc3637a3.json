{"sha": "bdc4349d7eece0bc3aaf864ee3b32fe8cc3637a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRjNDM0OWQ3ZWVjZTBiYzNhYWY4NjRlZTNiMzJmZThjYzM2MzdhMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-04T22:18:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-04T22:18:20Z"}, "message": "Don't look outside of function literal for break or continue label.\n\nFrom-SVN: r168486", "tree": {"sha": "251dd7336921b162feba9d89d792092af292fe1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/251dd7336921b162feba9d89d792092af292fe1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdc4349d7eece0bc3aaf864ee3b32fe8cc3637a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc4349d7eece0bc3aaf864ee3b32fe8cc3637a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc4349d7eece0bc3aaf864ee3b32fe8cc3637a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc4349d7eece0bc3aaf864ee3b32fe8cc3637a3/comments", "author": null, "committer": null, "parents": [{"sha": "82701bd204992a7349168cddc8b35884da478be0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82701bd204992a7349168cddc8b35884da478be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82701bd204992a7349168cddc8b35884da478be0"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "b91e2c76edad1a14ffca9cde852bda2d8c06ce4d", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc4349d7eece0bc3aaf864ee3b32fe8cc3637a3/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc4349d7eece0bc3aaf864ee3b32fe8cc3637a3/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=bdc4349d7eece0bc3aaf864ee3b32fe8cc3637a3", "patch": "@@ -46,8 +46,8 @@ Parse::Parse(Lex* lex, Gogo* gogo)\n     unget_token_(Token::make_invalid_token(0)),\n     unget_token_valid_(false),\n     gogo_(gogo),\n-    break_stack_(),\n-    continue_stack_(),\n+    break_stack_(NULL),\n+    continue_stack_(NULL),\n     iota_(0),\n     enclosing_vars_()\n {\n@@ -2569,12 +2569,24 @@ Parse::function_lit()\n   if (!this->peek_token()->is_op(OPERATOR_LCURLY))\n     return Expression::make_type(type, location);\n \n+  Bc_stack* hold_break_stack = this->break_stack_;\n+  Bc_stack* hold_continue_stack = this->continue_stack_;\n+  this->break_stack_ = NULL;\n+  this->continue_stack_ = NULL;\n+\n   Named_object* no = this->gogo_->start_function(\"\", type, true, location);\n \n   source_location end_loc = this->block();\n \n   this->gogo_->finish_function(end_loc);\n \n+  if (this->break_stack_ != NULL)\n+    delete this->break_stack_;\n+  if (this->continue_stack_ != NULL)\n+    delete this->continue_stack_;\n+  this->break_stack_ = hold_break_stack;\n+  this->continue_stack_ = hold_continue_stack;\n+\n   hold_enclosing_vars.swap(this->enclosing_vars_);\n \n   Expression* closure = this->create_closure(no, &hold_enclosing_vars,\n@@ -4515,38 +4527,44 @@ Parse::range_clause_expr(const Expression_list* vals,\n void\n Parse::push_break_statement(Statement* enclosing, const Label* label)\n {\n-  this->break_stack_.push_back(std::make_pair(enclosing, label));\n+  if (this->break_stack_ == NULL)\n+    this->break_stack_ = new Bc_stack();\n+  this->break_stack_->push_back(std::make_pair(enclosing, label));\n }\n \n // Push a statement on the continue stack.\n \n void\n Parse::push_continue_statement(Statement* enclosing, const Label* label)\n {\n-  this->continue_stack_.push_back(std::make_pair(enclosing, label));\n+  if (this->continue_stack_ == NULL)\n+    this->continue_stack_ = new Bc_stack();\n+  this->continue_stack_->push_back(std::make_pair(enclosing, label));\n }\n \n // Pop the break stack.\n \n void\n Parse::pop_break_statement()\n {\n-  this->break_stack_.pop_back();\n+  this->break_stack_->pop_back();\n }\n \n // Pop the continue stack.\n \n void\n Parse::pop_continue_statement()\n {\n-  this->continue_stack_.pop_back();\n+  this->continue_stack_->pop_back();\n }\n \n // Find a break or continue statement given a label name.\n \n Statement*\n Parse::find_bc_statement(const Bc_stack* bc_stack, const std::string& label)\n {\n+  if (bc_stack == NULL)\n+    return NULL;\n   for (Bc_stack::const_reverse_iterator p = bc_stack->rbegin();\n        p != bc_stack->rend();\n        ++p)\n@@ -4567,17 +4585,17 @@ Parse::break_stat()\n   Statement* enclosing;\n   if (!token->is_identifier())\n     {\n-      if (this->break_stack_.empty())\n+      if (this->break_stack_ == NULL || this->break_stack_->empty())\n \t{\n \t  error_at(this->location(),\n \t\t   \"break statement not within for or switch or select\");\n \t  return;\n \t}\n-      enclosing = this->break_stack_.back().first;\n+      enclosing = this->break_stack_->back().first;\n     }\n   else\n     {\n-      enclosing = this->find_bc_statement(&this->break_stack_,\n+      enclosing = this->find_bc_statement(this->break_stack_,\n \t\t\t\t\t  token->identifier());\n       if (enclosing == NULL)\n \t{\n@@ -4621,16 +4639,16 @@ Parse::continue_stat()\n   Statement* enclosing;\n   if (!token->is_identifier())\n     {\n-      if (this->continue_stack_.empty())\n+      if (this->continue_stack_ == NULL || this->continue_stack_->empty())\n \t{\n \t  error_at(this->location(), \"continue statement not within for\");\n \t  return;\n \t}\n-      enclosing = this->continue_stack_.back().first;\n+      enclosing = this->continue_stack_->back().first;\n     }\n   else\n     {\n-      enclosing = this->find_bc_statement(&this->continue_stack_,\n+      enclosing = this->find_bc_statement(this->continue_stack_,\n \t\t\t\t\t  token->identifier());\n       if (enclosing == NULL)\n \t{"}, {"sha": "6f2ac64b1f71be8be3db29109d55bec1fc2366a6", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdc4349d7eece0bc3aaf864ee3b32fe8cc3637a3/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdc4349d7eece0bc3aaf864ee3b32fe8cc3637a3/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=bdc4349d7eece0bc3aaf864ee3b32fe8cc3637a3", "patch": "@@ -294,9 +294,9 @@ class Parse\n   // The code we are generating.\n   Gogo* gogo_;\n   // A stack of statements for which break may be used.\n-  Bc_stack break_stack_;\n+  Bc_stack* break_stack_;\n   // A stack of statements for which continue may be used.\n-  Bc_stack continue_stack_;\n+  Bc_stack* continue_stack_;\n   // The current iota value.\n   int iota_;\n   // References from the local function to variables defined in"}]}