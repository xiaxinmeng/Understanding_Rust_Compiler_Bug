{"sha": "c132497f1bf72635ce53a12dac9e432f0cdb8984", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEzMjQ5N2YxYmY3MjYzNWNlNTNhMTJkYWM5ZTQzMmYwY2RiODk4NA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2007-05-26T20:50:21Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2007-05-26T20:50:21Z"}, "message": "unix.c (unix_stream): Rearrange struct members, remove small_buffer.\n\n2007-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* io/unix.c (unix_stream): Rearrange struct members, remove\n\tsmall_buffer.\n\t(int_stream): New struct.\n\t(fd_alloc): Always use existing buffer, never reallocate.\n\t(fd_sfree): Remove check for buffer != small_buffer.\n\t(fd_close): Likewise.\n\t(mem_alloc_r_at): Change to use int_stream.\n\t(mem_alloc_w_at): Likewise.\n\t(mem_read): Likewise.\n\t(mem_write): Likewise.\n\t(mem_set): Likewise.\n\t(mem_truncate): Likewise.\n\t(mem_close): Likewise.\n\t(mem_sfree): Likewise.\n\t(empty_internal_buffer): Likewise.\n\t(open_internal): Likewise.\n\nFrom-SVN: r125099", "tree": {"sha": "4e2303357e8167527ca0327de5c641ef3e67f616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e2303357e8167527ca0327de5c641ef3e67f616"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c132497f1bf72635ce53a12dac9e432f0cdb8984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c132497f1bf72635ce53a12dac9e432f0cdb8984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c132497f1bf72635ce53a12dac9e432f0cdb8984", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c132497f1bf72635ce53a12dac9e432f0cdb8984/comments", "author": null, "committer": null, "parents": [{"sha": "c830854ada623d086c7ce06e975e97f75bee31ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c830854ada623d086c7ce06e975e97f75bee31ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c830854ada623d086c7ce06e975e97f75bee31ca"}], "stats": {"total": 115, "additions": 69, "deletions": 46}, "files": [{"sha": "1df8b3c937e83f4484e19119d78afca401d9a379", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c132497f1bf72635ce53a12dac9e432f0cdb8984/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c132497f1bf72635ce53a12dac9e432f0cdb8984/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c132497f1bf72635ce53a12dac9e432f0cdb8984", "patch": "@@ -1,3 +1,22 @@\n+2007-05-26  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* io/unix.c (unix_stream): Rearrange struct members, remove\n+\tsmall_buffer.\n+\t(int_stream): New struct.\n+\t(fd_alloc): Always use existing buffer, never reallocate.\n+\t(fd_sfree): Remove check for buffer != small_buffer.\n+\t(fd_close): Likewise.\n+\t(mem_alloc_r_at): Change to use int_stream.\n+\t(mem_alloc_w_at): Likewise.\n+\t(mem_read): Likewise.\n+\t(mem_write): Likewise.\n+\t(mem_set): Likewise.\n+\t(mem_truncate): Likewise.\n+\t(mem_close): Likewise.\n+\t(mem_sfree): Likewise.\n+\t(empty_internal_buffer): Likewise.\n+\t(open_internal): Likewise.\n+\t\n 2007-05-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* io/transfer.c (unformatted_read): Use size from front end eliminating"}, {"sha": "39ee87d076f3e94602d1544aab6b22fdf85e897d", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 50, "deletions": 46, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c132497f1bf72635ce53a12dac9e432f0cdb8984/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c132497f1bf72635ce53a12dac9e432f0cdb8984/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=c132497f1bf72635ce53a12dac9e432f0cdb8984", "patch": "@@ -97,7 +97,6 @@ typedef struct\n   gfc_offset dirty_offset;\t/* Start of modified bytes in buffer */\n   gfc_offset file_length;\t/* Length of the file, -1 if not seekable. */\n \n-  char *buffer;\n   int len;\t\t\t/* Physical length of the current buffer */\n   int active;\t\t\t/* Length of valid bytes in the buffer */\n \n@@ -106,13 +105,42 @@ typedef struct\n \n   int special_file;\t\t/* =1 if the fd refers to a special file */\n \n-  unsigned unbuffered:1;\n-\n-  char small_buffer[BUFFER_SIZE];\n+  int unbuffered;               /* =1 if the stream is not buffered */\n \n+  char buffer[BUFFER_SIZE];\n }\n unix_stream;\n \n+\n+/* Stream structure for internal files. Fields must be kept in sync\n+   with unix_stream above, except for the buffer. For internal files\n+   we point the buffer pointer directly at the destination memory.  */\n+\n+typedef struct\n+{\n+  stream st;\n+\n+  int fd;\n+  gfc_offset buffer_offset;\t/* File offset of the start of the buffer */\n+  gfc_offset physical_offset;\t/* Current physical file offset */\n+  gfc_offset logical_offset;\t/* Current logical file offset */\n+  gfc_offset dirty_offset;\t/* Start of modified bytes in buffer */\n+  gfc_offset file_length;\t/* Length of the file, -1 if not seekable. */\n+\n+  int len;\t\t\t/* Physical length of the current buffer */\n+  int active;\t\t\t/* Length of valid bytes in the buffer */\n+\n+  int prot;\n+  int ndirty;\t\t\t/* Dirty bytes starting at dirty_offset */\n+\n+  int special_file;\t\t/* =1 if the fd refers to a special file */\n+\n+  int unbuffered;               /* =1 if the stream is not buffered */\n+\n+  char *buffer;\n+}\n+int_stream;\n+\n extern stream *init_error_stream (unix_stream *);\n internal_proto(init_error_stream);\n \n@@ -409,29 +437,17 @@ static void\n fd_alloc (unix_stream * s, gfc_offset where,\n \t  int *len __attribute__ ((unused)))\n {\n-  char *new_buffer;\n-  int n, read_len;\n-\n-  if (*len <= BUFFER_SIZE)\n-    {\n-      new_buffer = s->small_buffer;\n-      read_len = BUFFER_SIZE;\n-    }\n-  else\n-    {\n-      new_buffer = get_mem (*len);\n-      read_len = *len;\n-    }\n+  int n;\n \n   /* Salvage bytes currently within the buffer.  This is important for\n    * devices that cannot seek. */\n \n-  if (s->buffer != NULL && s->buffer_offset <= where &&\n+  if (s->buffer_offset <= where &&\n       where <= s->buffer_offset + s->active)\n     {\n \n       n = s->active - (where - s->buffer_offset);\n-      memmove (new_buffer, s->buffer + (where - s->buffer_offset), n);\n+      memmove (s->buffer, s->buffer + (where - s->buffer_offset), n);\n \n       s->active = n;\n     }\n@@ -442,13 +458,7 @@ fd_alloc (unix_stream * s, gfc_offset where,\n \n   s->buffer_offset = where;\n \n-  /* free the old buffer if necessary */\n-\n-  if (s->buffer != NULL && s->buffer != s->small_buffer)\n-    free_mem (s->buffer);\n-\n-  s->buffer = new_buffer;\n-  s->len = read_len;\n+  s->len = BUFFER_SIZE;\n }\n \n \n@@ -580,8 +590,7 @@ static try\n fd_sfree (unix_stream * s)\n {\n   if (s->ndirty != 0 &&\n-      (s->buffer != s->small_buffer || options.all_unbuffered ||\n-       s->unbuffered))\n+      (options.all_unbuffered || s->unbuffered))\n     return fd_flush (s);\n \n   return SUCCESS;\n@@ -782,9 +791,6 @@ fd_close (unix_stream * s)\n   if (fd_flush (s) == FAILURE)\n     return FAILURE;\n \n-  if (s->buffer != NULL && s->buffer != s->small_buffer)\n-    free_mem (s->buffer);\n-\n   if (s->fd != STDOUT_FILENO && s->fd != STDERR_FILENO)\n     {\n       if (close (s->fd) < 0)\n@@ -813,7 +819,6 @@ fd_open (unix_stream * s)\n   s->st.write = (void *) fd_write;\n   s->st.set = (void *) fd_sset;\n \n-  s->buffer = NULL;\n }\n \n \n@@ -831,7 +836,7 @@ fd_open (unix_stream * s)\n \n \n static char *\n-mem_alloc_r_at (unix_stream * s, int *len, gfc_offset where)\n+mem_alloc_r_at (int_stream * s, int *len, gfc_offset where)\n {\n   gfc_offset n;\n \n@@ -852,7 +857,7 @@ mem_alloc_r_at (unix_stream * s, int *len, gfc_offset where)\n \n \n static char *\n-mem_alloc_w_at (unix_stream * s, int *len, gfc_offset where)\n+mem_alloc_w_at (int_stream * s, int *len, gfc_offset where)\n {\n   gfc_offset m;\n \n@@ -880,7 +885,7 @@ mem_alloc_w_at (unix_stream * s, int *len, gfc_offset where)\n    routines use mem_alloc_r_at.  */\n \n static int\n-mem_read (unix_stream * s, void * buf, size_t * nbytes)\n+mem_read (int_stream * s, void * buf, size_t * nbytes)\n {\n   void *p;\n   int tmp;\n@@ -906,7 +911,7 @@ mem_read (unix_stream * s, void * buf, size_t * nbytes)\n    routines use mem_alloc_w_at.  */\n \n static int\n-mem_write (unix_stream * s, const void * buf, size_t * nbytes)\n+mem_write (int_stream * s, const void * buf, size_t * nbytes)\n {\n   void *p;\n   int tmp;\n@@ -930,7 +935,7 @@ mem_write (unix_stream * s, const void * buf, size_t * nbytes)\n \n \n static int\n-mem_seek (unix_stream * s, gfc_offset offset)\n+mem_seek (int_stream * s, gfc_offset offset)\n {\n   if (offset > s->file_length)\n     {\n@@ -944,7 +949,7 @@ mem_seek (unix_stream * s, gfc_offset offset)\n \n \n static try\n-mem_set (unix_stream * s, int c, size_t n)\n+mem_set (int_stream * s, int c, size_t n)\n {\n   void *p;\n   int len;\n@@ -963,14 +968,14 @@ mem_set (unix_stream * s, int c, size_t n)\n \n \n static int\n-mem_truncate (unix_stream * s __attribute__ ((unused)))\n+mem_truncate (int_stream * s __attribute__ ((unused)))\n {\n   return SUCCESS;\n }\n \n \n static try\n-mem_close (unix_stream * s)\n+mem_close (int_stream * s)\n {\n   if (s != NULL)\n     free_mem (s);\n@@ -980,7 +985,7 @@ mem_close (unix_stream * s)\n \n \n static try\n-mem_sfree (unix_stream * s __attribute__ ((unused)))\n+mem_sfree (int_stream * s __attribute__ ((unused)))\n {\n   return SUCCESS;\n }\n@@ -997,7 +1002,7 @@ mem_sfree (unix_stream * s __attribute__ ((unused)))\n void\n empty_internal_buffer(stream *strm)\n {\n-  unix_stream * s = (unix_stream *) strm;\n+  int_stream * s = (int_stream *) strm;\n   memset(s->buffer, ' ', s->file_length);\n }\n \n@@ -1006,10 +1011,10 @@ empty_internal_buffer(stream *strm)\n stream *\n open_internal (char *base, int length)\n {\n-  unix_stream *s;\n+  int_stream *s;\n \n-  s = get_mem (sizeof (unix_stream));\n-  memset (s, '\\0', sizeof (unix_stream));\n+  s = get_mem (sizeof (int_stream));\n+  memset (s, '\\0', sizeof (int_stream));\n \n   s->buffer = base;\n   s->buffer_offset = 0;\n@@ -1372,7 +1377,6 @@ init_error_stream (unix_stream *error)\n   error->st.sfree = (void *) fd_sfree;\n \n   error->unbuffered = 1;\n-  error->buffer = error->small_buffer;\n \n   return (stream *) error;\n }"}]}