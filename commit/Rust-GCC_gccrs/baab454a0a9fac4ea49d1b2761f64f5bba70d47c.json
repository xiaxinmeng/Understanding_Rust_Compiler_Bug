{"sha": "baab454a0a9fac4ea49d1b2761f64f5bba70d47c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFhYjQ1NGEwYTlmYWM0ZWE0OWQxYjI3NjFmNjRmNWJiYTcwZDQ3Yw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2005-10-04T16:14:52Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-10-04T16:14:52Z"}, "message": "re PR middle-end/19382 (ACATS cxb4005 cxb5002 simple To_COBOL/To_Fortran test fails at runtime on s390-linux)\n\n\tPR ada/19382\n\t* builtins.c (fold_builtin_memcmp): When constructing the pointer\n\ttype used to access data in the inlined length == 1 case, use\n\tbuild_pointer_type_for_mode with CAN_ALIAS_ALL set to true.\n\t(fold_builtin_strcmp, fold_builtin_strncmp): Likewise.\n\nFrom-SVN: r104948", "tree": {"sha": "12da54299f47090404a0a1212ec465c542c8ee64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12da54299f47090404a0a1212ec465c542c8ee64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baab454a0a9fac4ea49d1b2761f64f5bba70d47c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baab454a0a9fac4ea49d1b2761f64f5bba70d47c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baab454a0a9fac4ea49d1b2761f64f5bba70d47c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baab454a0a9fac4ea49d1b2761f64f5bba70d47c/comments", "author": null, "committer": null, "parents": [{"sha": "84c2b4da3896367ec58a62a9decf7cb650047f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c2b4da3896367ec58a62a9decf7cb650047f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c2b4da3896367ec58a62a9decf7cb650047f79"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "25a14cb6dc94882ec1d1d5192311d2bad52b1036", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baab454a0a9fac4ea49d1b2761f64f5bba70d47c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baab454a0a9fac4ea49d1b2761f64f5bba70d47c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=baab454a0a9fac4ea49d1b2761f64f5bba70d47c", "patch": "@@ -1,3 +1,11 @@\n+2005-10-04  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\tPR ada/19382\n+\t* builtins.c (fold_builtin_memcmp): When constructing the pointer\n+\ttype used to access data in the inlined length == 1 case, use\n+\tbuild_pointer_type_for_mode with CAN_ALIAS_ALL set to true.\n+\t(fold_builtin_strcmp, fold_builtin_strncmp): Likewise.\n+\n 2005-10-04  Uros Bizjak  <uros@kss-loka.si>\n \n \t* config/i386/i386.h (TARGET_FISTTP): Enable also for"}, {"sha": "a4c3bfc1bc6f5122508d65d656114df1c2388383", "filename": "gcc/builtins.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baab454a0a9fac4ea49d1b2761f64f5bba70d47c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baab454a0a9fac4ea49d1b2761f64f5bba70d47c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=baab454a0a9fac4ea49d1b2761f64f5bba70d47c", "patch": "@@ -8089,7 +8089,9 @@ fold_builtin_memcmp (tree arglist)\n   if (host_integerp (len, 1) && tree_low_cst (len, 1) == 1)\n     {\n       tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n-      tree cst_uchar_ptr_node = build_pointer_type (cst_uchar_node);\n+      tree cst_uchar_ptr_node\n+\t= build_pointer_type_for_mode (cst_uchar_node, ptr_mode, true);\n+\n       tree ind1 = fold_convert (integer_type_node,\n \t\t\t\tbuild1 (INDIRECT_REF, cst_uchar_node,\n \t\t\t\t\tfold_convert (cst_uchar_ptr_node,\n@@ -8141,7 +8143,9 @@ fold_builtin_strcmp (tree arglist)\n   if (p2 && *p2 == '\\0')\n     {\n       tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n-      tree cst_uchar_ptr_node = build_pointer_type (cst_uchar_node);\n+      tree cst_uchar_ptr_node\n+\t= build_pointer_type_for_mode (cst_uchar_node, ptr_mode, true);\n+\n       return fold_convert (integer_type_node,\n \t\t\t   build1 (INDIRECT_REF, cst_uchar_node,\n \t\t\t\t   fold_convert (cst_uchar_ptr_node,\n@@ -8152,7 +8156,9 @@ fold_builtin_strcmp (tree arglist)\n   if (p1 && *p1 == '\\0')\n     {\n       tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n-      tree cst_uchar_ptr_node = build_pointer_type (cst_uchar_node);\n+      tree cst_uchar_ptr_node\n+\t= build_pointer_type_for_mode (cst_uchar_node, ptr_mode, true);\n+\n       tree temp = fold_convert (integer_type_node,\n \t\t\t\tbuild1 (INDIRECT_REF, cst_uchar_node,\n \t\t\t\t\tfold_convert (cst_uchar_ptr_node,\n@@ -8210,7 +8216,9 @@ fold_builtin_strncmp (tree arglist)\n       && tree_int_cst_sgn (len) == 1)\n     {\n       tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n-      tree cst_uchar_ptr_node = build_pointer_type (cst_uchar_node);\n+      tree cst_uchar_ptr_node\n+\t= build_pointer_type_for_mode (cst_uchar_node, ptr_mode, true);\n+\n       return fold_convert (integer_type_node,\n \t\t\t   build1 (INDIRECT_REF, cst_uchar_node,\n \t\t\t\t   fold_convert (cst_uchar_ptr_node,\n@@ -8224,7 +8232,9 @@ fold_builtin_strncmp (tree arglist)\n       && tree_int_cst_sgn (len) == 1)\n     {\n       tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n-      tree cst_uchar_ptr_node = build_pointer_type (cst_uchar_node);\n+      tree cst_uchar_ptr_node\n+\t= build_pointer_type_for_mode (cst_uchar_node, ptr_mode, true);\n+\n       tree temp = fold_convert (integer_type_node,\n \t\t\t\tbuild1 (INDIRECT_REF, cst_uchar_node,\n \t\t\t\t\tfold_convert (cst_uchar_ptr_node,\n@@ -8237,7 +8247,9 @@ fold_builtin_strncmp (tree arglist)\n   if (host_integerp (len, 1) && tree_low_cst (len, 1) == 1)\n     {\n       tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n-      tree cst_uchar_ptr_node = build_pointer_type (cst_uchar_node);\n+      tree cst_uchar_ptr_node\n+\t= build_pointer_type_for_mode (cst_uchar_node, ptr_mode, true);\n+\n       tree ind1 = fold_convert (integer_type_node,\n \t\t\t\tbuild1 (INDIRECT_REF, cst_uchar_node,\n \t\t\t\t\tfold_convert (cst_uchar_ptr_node,"}]}