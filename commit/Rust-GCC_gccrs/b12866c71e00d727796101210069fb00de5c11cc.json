{"sha": "b12866c71e00d727796101210069fb00de5c11cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyODY2YzcxZTAwZDcyNzc5NjEwMTIxMDA2OWZiMDBkZTVjMTFjYw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-03-04T07:46:31Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-03-04T07:46:31Z"}, "message": "invoke.texi (C++ Dialect Options): Minor copy-edits to x86-specific text.\n\n2012-03-04  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi (C++ Dialect Options): Minor copy-edits to\n\tx86-specific text.\n\t(Debugging Options): Likewise.\n\t(Optimize Options): Likewise.\n\t(i386 and x86-64 Options): Discuss -march before -mtune, consistently\n\twith other architectures.  Use official processor names with correct\n\tspelling/capitalization.  Fix formatting and grammar issues.\n\t(i386 and x86-64 Windows Options): Similar cleanup here.\n\nFrom-SVN: r184879", "tree": {"sha": "300384d15b94035cd8ea45509c419a1f92bf3cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/300384d15b94035cd8ea45509c419a1f92bf3cc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b12866c71e00d727796101210069fb00de5c11cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12866c71e00d727796101210069fb00de5c11cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12866c71e00d727796101210069fb00de5c11cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12866c71e00d727796101210069fb00de5c11cc/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a491b7be7f9f60cb13d31d4fe87b4353f3520d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a491b7be7f9f60cb13d31d4fe87b4353f3520d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a491b7be7f9f60cb13d31d4fe87b4353f3520d1d"}], "stats": {"total": 576, "additions": 349, "deletions": 227}, "files": [{"sha": "ad4aa6b533eeff94fd97d21f9601b1de89bd3b7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12866c71e00d727796101210069fb00de5c11cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12866c71e00d727796101210069fb00de5c11cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b12866c71e00d727796101210069fb00de5c11cc", "patch": "@@ -1,3 +1,14 @@\n+2012-03-04  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi (C++ Dialect Options): Minor copy-edits to\n+\tx86-specific text.\n+\t(Debugging Options): Likewise.\n+\t(Optimize Options): Likewise.\n+\t(i386 and x86-64 Options): Discuss -march before -mtune, consistently\n+\twith other architectures.  Use official processor names with correct\n+\tspelling/capitalization.  Fix formatting and grammar issues.\n+\t(i386 and x86-64 Windows Options): Similar cleanup here.\n+\n 2012-03-03  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.md (abssi2): Add TARGET_SH1 condition."}, {"sha": "067dca8e1562d82034823eff245cac14114b71f5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 338, "deletions": 227, "changes": 565, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12866c71e00d727796101210069fb00de5c11cc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12866c71e00d727796101210069fb00de5c11cc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b12866c71e00d727796101210069fb00de5c11cc", "patch": "@@ -2376,14 +2376,14 @@ Instantiations of these templates may be mangled incorrectly.\n \n @end itemize\n \n-It also warns psABI related changes.  The known psABI changes at this\n+It also warns about psABI-related changes.  The known psABI changes at this\n point include:\n \n @itemize @bullet\n \n @item\n-For SYSV/x86-64, when passing union with long double, it is changed to\n-pass in memory as specified in psABI.  For example:\n+For SysV/x86-64, unions with @code{long double} members are \n+passed in memory as specified in psABI.  For example:\n \n @smallexample\n union U @{\n@@ -2393,7 +2393,7 @@ union U @{\n @end smallexample\n \n @noindent\n-@code{union U} will always be passed in memory.\n+@code{union U} is always passed in memory.\n \n @end itemize\n \n@@ -5484,7 +5484,7 @@ architectures.\n \n @item -fdump-rtl-stack\n @opindex fdump-rtl-stack\n-Dump after conversion from GCC's \"flat register file\" registers to the\n+Dump after conversion from GCC's ``flat register file'' registers to the\n x87's stack-like registers.  This pass is only run on x86 variants.\n \n @item -fdump-rtl-subreg1\n@@ -6333,7 +6333,7 @@ whether a target machine supports this flag.  @xref{Registers,,Register\n Usage, gccint, GNU Compiler Collection (GCC) Internals}.\n \n Starting with GCC version 4.6, the default setting (when not optimizing for\n-size) for 32-bit Linux x86 and 32-bit Darwin x86 targets has been changed to\n+size) for 32-bit GNU/Linux x86 and 32-bit Darwin x86 targets has been changed to\n @option{-fomit-frame-pointer}.  The default can be reverted to\n @option{-fno-omit-frame-pointer} by configuring GCC with the\n @option{--enable-frame-pointer} configure option.\n@@ -6740,7 +6740,7 @@ Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n @item -free\n @opindex free\n Attempt to remove redundant extension instructions.  This is especially\n-helpful for the x86-64 architecture which implicitly zero-extends in 64-bit\n+helpful for the x86-64 architecture, which implicitly zero-extends in 64-bit\n registers after writing to their lower 32-bit half.\n \n Enabled for x86 at levels @option{-O2}, @option{-O3}.\n@@ -12977,141 +12977,203 @@ These @samp{-m} options are defined for the i386 and x86-64 family of\n computers:\n \n @table @gcctabopt\n-@item -mtune=@var{cpu-type}\n-@opindex mtune\n-Tune to @var{cpu-type} everything applicable about the generated code, except\n-for the ABI and the set of available instructions.  The choices for\n-@var{cpu-type} are:\n-@table @emph\n-@item generic\n-Produce code optimized for the most common IA32/@/AMD64/@/EM64T processors.\n-If you know the CPU on which your code will run, then you should use\n-the corresponding @option{-mtune} option instead of\n-@option{-mtune=generic}.  But, if you do not know exactly what CPU users\n-of your application will have, then you should use this option.\n \n-As new processors are deployed in the marketplace, the behavior of this\n-option will change.  Therefore, if you upgrade to a newer version of\n-GCC, the code generated option will change to reflect the processors\n-that were most common when that version of GCC was released.\n+@item -march=@var{cpu-type}\n+@opindex march\n+Generate instructions for the machine type @var{cpu-type}.  In contrast to\n+@option{-mtune=@var{cpu-type}}, which merely tunes the generated code \n+for the specified @var{cpu-type}, @option{-march=@var{cpu-type}} allows GCC\n+to generate code that may not run at all on processors other than the one\n+indicated.  Specifying @option{-march=@var{cpu-type}} implies \n+@option{-mtune=@var{cpu-type}}.\n \n-There is no @option{-march=generic} option because @option{-march}\n-indicates the instruction set the compiler can use, and there is no\n-generic instruction set applicable to all processors.  In contrast,\n-@option{-mtune} indicates the processor (or, in this case, collection of\n-processors) for which the code is optimized.\n+The choices for @var{cpu-type} are:\n+\n+@table @samp\n @item native\n-This selects the CPU to tune for at compilation time by determining\n-the processor type of the compiling machine.  Using @option{-mtune=native}\n-will produce code optimized for the local machine under the constraints\n-of the selected instruction set.  Using @option{-march=native} will\n-enable all instruction subsets supported by the local machine (hence\n-the result might not run on different machines).\n+This selects the CPU to generate code for at compilation time by determining\n+the processor type of the compiling machine.  Using @option{-march=native}\n+enables all instruction subsets supported by the local machine (hence\n+the result might not run on different machines).  Using @option{-mtune=native}\n+produces code optimized for the local machine under the constraints\n+of the selected instruction set.  \n+\n @item i386\n-Original Intel's i386 CPU@.\n+Original Intel i386 CPU@.\n+\n @item i486\n-Intel's i486 CPU@.  (No scheduling is implemented for this chip.)\n-@item i586, pentium\n+Intel i486 CPU@.  (No scheduling is implemented for this chip.)\n+\n+@item i586\n+@itemx pentium\n Intel Pentium CPU with no MMX support.\n+\n @item pentium-mmx\n-Intel PentiumMMX CPU based on Pentium core with MMX instruction set support.\n+Intel Pentium MMX CPU, based on Pentium core with MMX instruction set support.\n+\n @item pentiumpro\n-Intel PentiumPro CPU@.\n+Intel Pentium Pro CPU@.\n+\n @item i686\n-Same as @code{generic}, but when used as @code{march} option, PentiumPro\n-instruction set will be used, so the code will run on all i686 family chips.\n+When used with @option{-march}, the Pentium Pro\n+instruction set is used, so the code runs on all i686 family chips.\n+When used with @option{-mtune}, it has the same meaning as @samp{generic}.\n+\n @item pentium2\n-Intel Pentium2 CPU based on PentiumPro core with MMX instruction set support.\n-@item pentium3, pentium3m\n-Intel Pentium3 CPU based on PentiumPro core with MMX and SSE instruction set\n+Intel Pentium II CPU, based on Pentium Pro core with MMX instruction set\n support.\n+\n+@item pentium3\n+@itemx pentium3m\n+Intel Pentium III CPU, based on Pentium Pro core with MMX and SSE instruction\n+set support.\n+\n @item pentium-m\n-Low power version of Intel Pentium3 CPU with MMX, SSE and SSE2 instruction set\n-support.  Used by Centrino notebooks.\n-@item pentium4, pentium4m\n-Intel Pentium4 CPU with MMX, SSE and SSE2 instruction set support.\n+Intel Pentium M; low-power version of Intel Pentium III CPU\n+with MMX, SSE and SSE2 instruction set support.  Used by Centrino notebooks.\n+\n+@item pentium4\n+@itemx pentium4m\n+Intel Pentium 4 CPU with MMX, SSE and SSE2 instruction set support.\n+\n @item prescott\n-Improved version of Intel Pentium4 CPU with MMX, SSE, SSE2 and SSE3 instruction\n+Improved version of Intel Pentium 4 CPU with MMX, SSE, SSE2 and SSE3 instruction\n set support.\n+\n @item nocona\n-Improved version of Intel Pentium4 CPU with 64-bit extensions, MMX, SSE,\n+Improved version of Intel Pentium 4 CPU with 64-bit extensions, MMX, SSE,\n SSE2 and SSE3 instruction set support.\n+\n @item core2\n-Intel Core2 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3 and SSSE3\n+Intel Core 2 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3 and SSSE3\n instruction set support.\n+\n @item corei7\n Intel Core i7 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1\n and SSE4.2 instruction set support.\n+\n @item corei7-avx\n Intel Core i7 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3,\n SSE4.1, SSE4.2, AVX, AES and PCLMUL instruction set support.\n+\n @item core-avx-i\n Intel Core CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3,\n SSE4.1, SSE4.2, AVX, AES, PCLMUL, FSGSBASE, RDRND and F16C instruction\n set support.\n+\n @item atom\n Intel Atom CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3 and SSSE3\n instruction set support.\n+\n @item k6\n AMD K6 CPU with MMX instruction set support.\n-@item k6-2, k6-3\n+\n+@item k6-2\n+@itemx k6-3\n Improved versions of AMD K6 CPU with MMX and 3DNow!@: instruction set support.\n-@item athlon, athlon-tbird\n+\n+@item athlon\n+@itemx athlon-tbird\n AMD Athlon CPU with MMX, 3dNOW!, enhanced 3DNow!@: and SSE prefetch instructions\n support.\n-@item athlon-4, athlon-xp, athlon-mp\n+\n+@item athlon-4\n+@itemx athlon-xp\n+@itemx athlon-mp\n Improved AMD Athlon CPU with MMX, 3DNow!, enhanced 3DNow!@: and full SSE\n instruction set support.\n-@item k8, opteron, athlon64, athlon-fx\n-AMD K8 core based CPUs with x86-64 instruction set support.  (This supersets\n-MMX, SSE, SSE2, 3DNow!, enhanced 3DNow!@: and 64-bit instruction set extensions.)\n-@item k8-sse3, opteron-sse3, athlon64-sse3\n-Improved versions of k8, opteron and athlon64 with SSE3 instruction set support.\n-@item amdfam10, barcelona\n-AMD Family 10h core based CPUs with x86-64 instruction set support.  (This\n+\n+@item k8\n+@itemx opteron\n+@itemx athlon64\n+@itemx athlon-fx\n+Processors based on the AMD K8 core with x86-64 instruction set support,\n+including the AMD Opteron, Athlon 64, and Athlon 64 FX processors.\n+(This supersets MMX, SSE, SSE2, 3DNow!, enhanced 3DNow!@: and 64-bit\n+instruction set extensions.)\n+\n+@item k8-sse3\n+@itemx opteron-sse3\n+@itemx athlon64-sse3\n+Improved versions of AMD K8 cores with SSE3 instruction set support.\n+\n+@item amdfam10\n+@itemx barcelona\n+CPUs based on AMD Family 10h cores with x86-64 instruction set support.  (This\n supersets MMX, SSE, SSE2, SSE3, SSE4A, 3DNow!, enhanced 3DNow!, ABM and 64-bit\n instruction set extensions.)\n+\n @item bdver1\n-AMD Family 15h core based CPUs with x86-64 instruction set support.  (This\n+CPUs based on AMD Family 15h cores with x86-64 instruction set support.  (This\n supersets FMA4, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A,\n SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.)\n @item bdver2\n AMD Family 15h core based CPUs with x86-64 instruction set support.  (This\n supersets BMI, TBM, F16C, FMA, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE,\n SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set \n extensions.)\n+\n @item btver1\n-AMD Family 14h core based CPUs with x86-64 instruction set support.  (This\n+CPUs based on AMD Family 14h cores with x86-64 instruction set support.  (This\n supersets MMX, SSE, SSE2, SSE3, SSSE3, SSE4A, CX16, ABM and 64-bit\n instruction set extensions.)\n+\n @item winchip-c6\n-IDT Winchip C6 CPU, dealt in same way as i486 with additional MMX instruction\n+IDT WinChip C6 CPU, dealt in same way as i486 with additional MMX instruction\n set support.\n+\n @item winchip2\n-IDT Winchip2 CPU, dealt in same way as i486 with additional MMX and 3DNow!@:\n+IDT WinChip 2 CPU, dealt in same way as i486 with additional MMX and 3DNow!@:\n instruction set support.\n+\n @item c3\n-Via C3 CPU with MMX and 3DNow!@: instruction set support.  (No scheduling is\n+VIA C3 CPU with MMX and 3DNow!@: instruction set support.  (No scheduling is\n implemented for this chip.)\n+\n @item c3-2\n-Via C3-2 CPU with MMX and SSE instruction set support.  (No scheduling is\n+VIA C3-2 (Nehemiah/C5XL) CPU with MMX and SSE instruction set support.\n+(No scheduling is\n implemented for this chip.)\n+\n @item geode\n-Embedded AMD CPU with MMX and 3DNow!@: instruction set support.\n+AMD Geode embedded processor with MMX and 3DNow!@: instruction set support.\n @end table\n \n-While picking a specific @var{cpu-type} will schedule things appropriately\n-for that particular chip, the compiler will not generate any code that\n-does not run on the default machine type without the @option{-march=@var{cpu-type}}\n-option being used. For example, if GCC is configured for i686-pc-linux-gnu\n-then @option{-mtune=pentium4} will generate code that is tuned for Pentium4\n-but will still run on i686 machines.\n+@item -mtune=@var{cpu-type}\n+@opindex mtune\n+Tune to @var{cpu-type} everything applicable about the generated code, except\n+for the ABI and the set of available instructions.  \n+While picking a specific @var{cpu-type} schedules things appropriately\n+for that particular chip, the compiler does not generate any code that\n+cannot run on the default machine type unless you use a\n+@option{-march=@var{cpu-type}} option.\n+For example, if GCC is configured for i686-pc-linux-gnu\n+then @option{-mtune=pentium4} generates code that is tuned for Pentium 4\n+but still runs on i686 machines.\n+\n+The choices for @var{cpu-type} are the same as for @option{-march}.\n+In addition, @option{-mtune} supports an extra choice for @var{cpu-type}:\n \n-@item -march=@var{cpu-type}\n-@opindex march\n-Generate instructions for the machine type @var{cpu-type}.  The choices\n-for @var{cpu-type} are the same as for @option{-mtune}.  Moreover,\n-specifying @option{-march=@var{cpu-type}} implies @option{-mtune=@var{cpu-type}}.\n+@table @samp\n+@item generic\n+Produce code optimized for the most common IA32/@/AMD64/@/EM64T processors.\n+If you know the CPU on which your code will run, then you should use\n+the corresponding @option{-mtune} or @option{-march} option instead of\n+@option{-mtune=generic}.  But, if you do not know exactly what CPU users\n+of your application will have, then you should use this option.\n+\n+As new processors are deployed in the marketplace, the behavior of this\n+option will change.  Therefore, if you upgrade to a newer version of\n+GCC, code generation controlled by this option will change to reflect\n+the processors\n+that are most common at the time that version of GCC is released.\n+\n+There is no @option{-march=generic} option because @option{-march}\n+indicates the instruction set the compiler can use, and there is no\n+generic instruction set applicable to all processors.  In contrast,\n+@option{-mtune} indicates the processor (or, in this case, collection of\n+processors) for which the code is optimized.\n+@end table\n \n @item -mcpu=@var{cpu-type}\n @opindex mcpu\n@@ -13134,14 +13196,15 @@ This is the default choice for i386 compiler.\n \n @item sse\n Use scalar floating-point instructions present in the SSE instruction set.\n-This instruction set is supported by Pentium3 and newer chips, in the AMD line\n-by Athlon-4, Athlon-xp and Athlon-mp chips.  The earlier version of SSE\n+This instruction set is supported by Pentium III and newer chips,\n+and in the AMD line\n+by Athlon-4, Athlon XP and Athlon MP chips.  The earlier version of the SSE\n instruction set supports only single-precision arithmetic, thus the double and\n extended-precision arithmetic are still done using 387.  A later version, present\n-only in Pentium4 and the future AMD x86-64 chips, supports double-precision\n+only in Pentium 4 and AMD x86-64 chips, supports double-precision\n arithmetic too.\n \n-For the i386 compiler, you need to use @option{-march=@var{cpu-type}}, @option{-msse}\n+For the i386 compiler, you must use @option{-march=@var{cpu-type}}, @option{-msse}\n or @option{-msse2} switches to enable SSE extensions and make this option\n effective.  For the x86-64 compiler, these extensions are enabled by default.\n \n@@ -13154,30 +13217,31 @@ This is the default choice for the x86-64 compiler.\n @item sse,387\n @itemx sse+387\n @itemx both\n-Attempt to utilize both instruction sets at once.  This effectively double the\n-amount of available registers and on chips with separate execution units for\n+Attempt to utilize both instruction sets at once.  This effectively doubles the\n+amount of available registers, and on chips with separate execution units for\n 387 and SSE the execution resources too.  Use this option with care, as it is\n still experimental, because the GCC register allocator does not model separate\n-functional units well resulting in instable performance.\n+functional units well, resulting in unstable performance.\n @end table\n \n @item -masm=@var{dialect}\n @opindex masm=@var{dialect}\n-Output asm instructions using selected @var{dialect}.  Supported\n-choices are @samp{intel} or @samp{att} (the default one).  Darwin does\n+Output assembly instructions using selected @var{dialect}.  Supported\n+choices are @samp{intel} or @samp{att} (the default).  Darwin does\n not support @samp{intel}.\n \n @item -mieee-fp\n @itemx -mno-ieee-fp\n @opindex mieee-fp\n @opindex mno-ieee-fp\n Control whether or not the compiler uses IEEE floating-point\n-comparisons.  These handle correctly the case where the result of a\n+comparisons.  These correctly handle the case where the result of a\n comparison is unordered.\n \n @item -msoft-float\n @opindex msoft-float\n Generate output containing library calls for floating point.\n+\n @strong{Warning:} the requisite libraries are not part of GCC@.\n Normally the facilities of the machine's usual C compiler are used, but\n this can't be done directly in cross-compilation.  You must make your\n@@ -13206,8 +13270,8 @@ Some 387 emulators do not support the @code{sin}, @code{cos} and\n @code{sqrt} instructions for the 387.  Specify this option to avoid\n generating those instructions.  This option is the default on FreeBSD,\n OpenBSD and NetBSD@.  This option is overridden when @option{-march}\n-indicates that the target CPU will always have an FPU and so the\n-instruction will not need emulation.  As of revision 2.6.1, these\n+indicates that the target CPU always has an FPU and so the\n+instruction does not need emulation.  These\n instructions are not generated unless you also use the\n @option{-funsafe-math-optimizations} switch.\n \n@@ -13218,15 +13282,15 @@ instructions are not generated unless you also use the\n Control whether GCC aligns @code{double}, @code{long double}, and\n @code{long long} variables on a two-word boundary or a one-word\n boundary.  Aligning @code{double} variables on a two-word boundary\n-produces code that runs somewhat faster on a @samp{Pentium} at the\n+produces code that runs somewhat faster on a Pentium at the\n expense of more memory.\n \n On x86-64, @option{-malign-double} is enabled by default.\n \n @strong{Warning:} if you use the @option{-malign-double} switch,\n-structures containing the above types will be aligned differently than\n+structures containing the above types are aligned differently than\n the published application binary interface specifications for the 386\n-and will not be binary compatible with structures in code compiled\n+and are not binary compatible with structures in code compiled\n without that switch.\n \n @item -m96bit-long-double\n@@ -13245,27 +13309,28 @@ to a 16-byte boundary by padding the @code{long double} with an additional\n 32-bit zero.\n \n In the x86-64 compiler, @option{-m128bit-long-double} is the default choice as\n-its ABI specifies that @code{long double} is to be aligned on 16-byte boundary.\n+its ABI specifies that @code{long double} is aligned on 16-byte boundary.\n \n Notice that neither of these options enable any extra precision over the x87\n standard of 80 bits for a @code{long double}.\n \n-@strong{Warning:} if you override the default value for your target ABI, the\n-structures and arrays containing @code{long double} variables will change\n-their size as well as function calling convention for function taking\n-@code{long double} will be modified.  Hence they will not be binary\n-compatible with arrays or structures in code compiled without that switch.\n+@strong{Warning:} if you override the default value for your target ABI, this\n+changes the size of \n+structures and arrays containing @code{long double} variables,\n+as well as modifying the function calling convention for functions taking\n+@code{long double}.  Hence they are not binary-compatible\n+with code compiled without that switch.\n \n-@item -mlarge-data-threshold=@var{number}\n-@opindex mlarge-data-threshold=@var{number}\n-When @option{-mcmodel=medium} is specified, the data greater than\n-@var{threshold} are placed in large data section.  This value must be the\n-same across all object linked into the binary and defaults to 65535.\n+@item -mlarge-data-threshold=@var{threshold}\n+@opindex mlarge-data-threshold\n+When @option{-mcmodel=medium} is specified, data objects larger than\n+@var{threshold} are placed in the large data section.  This value must be the\n+same across all objects linked into the binary, and defaults to 65535.\n \n @item -mrtd\n @opindex mrtd\n Use a different function-calling convention, in which functions that\n-take a fixed number of arguments return with the @code{ret} @var{num}\n+take a fixed number of arguments return with the @code{ret @var{num}}\n instruction, which pops their arguments while returning.  This saves one\n instruction in the caller since there is no need to pop the arguments\n there.\n@@ -13281,10 +13346,10 @@ libraries compiled with the Unix compiler.\n \n Also, you must provide function prototypes for all functions that\n take variable numbers of arguments (including @code{printf});\n-otherwise incorrect code will be generated for calls to those\n+otherwise incorrect code is generated for calls to those\n functions.\n \n-In addition, seriously incorrect code will result if you call a\n+In addition, seriously incorrect code results if you call a\n function with too many arguments.  (Normally, extra arguments are\n harmlessly ignored.)\n \n@@ -13320,7 +13385,7 @@ Studio compilers until version 12.  Later compiler versions (starting\n with Studio 12 Update@tie{}1) follow the ABI used by other x86 targets, which\n is the default on Solaris@tie{}10 and later.  @emph{Only} use this option if\n you need to remain compatible with existing code produced by those\n-previous compiler versions or older versions of GCC.\n+previous compiler versions or older versions of GCC@.\n \n @item -mpc32\n @itemx -mpc64\n@@ -13343,15 +13408,15 @@ Setting the rounding of floating-point operations to less than the default\n 80 bits can speed some programs by 2% or more.  Note that some mathematical\n libraries assume that extended-precision (80-bit) floating-point operations\n are enabled by default; routines in such libraries could suffer significant\n-loss of accuracy, typically through so-called \"catastrophic cancellation\",\n+loss of accuracy, typically through so-called ``catastrophic cancellation'',\n when this option is used to set the precision to less than extended precision.\n \n @item -mstackrealign\n @opindex mstackrealign\n Realign the stack at entry.  On the Intel x86, the @option{-mstackrealign}\n-option will generate an alternate prologue and epilogue that realigns the\n+option generates an alternate prologue and epilogue that realigns the\n run-time stack if necessary.  This supports mixing legacy codes that keep\n-a 4-byte aligned stack with modern codes that keep a 16-byte stack for\n+4-byte stack alignment with modern codes that keep 16-byte stack alignment for\n SSE compatibility.  See also the attribute @code{force_align_arg_pointer},\n applicable to individual functions.\n \n@@ -13365,9 +13430,9 @@ the default is 4 (16 bytes or 128 bits).\n @opindex mincoming-stack-boundary\n Assume the incoming stack is aligned to a 2 raised to @var{num} byte\n boundary.  If @option{-mincoming-stack-boundary} is not specified,\n-the one specified by @option{-mpreferred-stack-boundary} will be used.\n+the one specified by @option{-mpreferred-stack-boundary} is used.\n \n-On Pentium and PentiumPro, @code{double} and @code{long double} values\n+On Pentium and Pentium Pro, @code{double} and @code{long double} values\n should be aligned to an 8-byte boundary (see @option{-malign-double}) or\n suffer significant run time performance penalties.  On Pentium III, the\n Streaming SIMD Extension (SSE) data type @code{__m128} may not work\n@@ -13378,7 +13443,7 @@ must be as aligned as that required by any value stored on the stack.\n Further, every function must be generated such that it keeps the stack\n aligned.  Thus calling a function compiled with a higher preferred\n stack boundary from a function compiled with a lower preferred stack\n-boundary will most likely misalign the stack.  It is recommended that\n+boundary most likely misaligns the stack.  It is recommended that\n libraries that use callbacks always use the default setting.\n \n This extra alignment does consume extra stack space, and generally\n@@ -13451,20 +13516,20 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, F16C,\n-FMA, SSE4A, FMA4, XOP, LWP, ABM, BMI, BMI2, LZCNT or 3DNow!\n-@: extended instruction sets.\n+FMA, SSE4A, FMA4, XOP, LWP, ABM, BMI, BMI2, LZCNT or 3DNow!@: \n+extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and\n disabled by these switches.\n \n-To have SSE/SSE2 instructions generated automatically from floating-point\n+To generate SSE/SSE2 instructions automatically from floating-point\n code (as opposed to 387 instructions), see @option{-mfpmath=sse}.\n \n GCC depresses SSEx instructions when @option{-mavx} is used. Instead, it\n generates new AVX instructions or AVX equivalence for all SSEx instructions\n when needed.\n \n-These options will enable GCC to use these extended instructions in\n+These options enable GCC to use these extended instructions in\n generated code, even without @option{-mfpmath=sse}.  Applications that\n perform run-time CPU detection must compile separate files for each\n supported architecture, using the appropriate flags.  In particular,\n@@ -13489,52 +13554,58 @@ in this case.\n @opindex mvzeroupper\n This option instructs GCC to emit a @code{vzeroupper} instruction\n before a transfer of control flow out of the function to minimize\n-AVX to SSE transition penalty as well as remove unnecessary zeroupper\n+the AVX to SSE transition penalty as well as remove unnecessary @code{zeroupper}\n intrinsics.\n \n @item -mcx16\n @opindex mcx16\n-This option will enable GCC to use CMPXCHG16B instruction in generated code.\n-CMPXCHG16B allows for atomic operations on 128-bit double quadword (or oword)\n-data types.  This is useful for high resolution counters that could be updated\n+This option enables GCC to generate @code{CMPXCHG16B} instructions.\n+@code{CMPXCHG16B} allows for atomic operations on 128-bit double quadword\n+(or oword) data types.  \n+This is useful for high-resolution counters that can be updated\n by multiple processors (or cores).  This instruction is generated as part of\n atomic built-in functions: see @ref{__sync Builtins} or\n @ref{__atomic Builtins} for details.\n \n @item -msahf\n @opindex msahf\n-This option will enable GCC to use SAHF instruction in generated 64-bit code.\n-Early Intel CPUs with Intel 64 lacked LAHF and SAHF instructions supported\n-by AMD64 until introduction of Pentium 4 G1 step in December 2005.  LAHF and\n-SAHF are load and store instructions, respectively, for certain status flags.\n-In 64-bit mode, SAHF instruction is used to optimize @code{fmod}, @code{drem}\n-or @code{remainder} built-in functions: see @ref{Other Builtins} for details.\n+This option enables generation of @code{SAHF} instructions in 64-bit code.\n+Early Intel Pentium 4 CPUs with Intel 64 support,\n+prior to the introduction of Pentium 4 G1 step in December 2005,\n+lacked the @code{LAHF} and @code{SAHF} instructions\n+which were supported by AMD64.\n+These are load and store instructions, respectively, for certain status flags.\n+In 64-bit mode, the @code{SAHF} instruction is used to optimize @code{fmod},\n+@code{drem}, and @code{remainder} built-in functions;\n+see @ref{Other Builtins} for details.\n \n @item -mmovbe\n @opindex mmovbe\n-This option will enable GCC to use movbe instruction to implement\n+This option enables use of the @code{movbe} instruction to implement\n @code{__builtin_bswap32} and @code{__builtin_bswap64}.\n \n @item -mcrc32\n @opindex mcrc32\n-This option will enable built-in functions, @code{__builtin_ia32_crc32qi},\n-@code{__builtin_ia32_crc32hi}. @code{__builtin_ia32_crc32si} and\n-@code{__builtin_ia32_crc32di} to generate the crc32 machine instruction.\n+This option enables built-in functions @code{__builtin_ia32_crc32qi},\n+@code{__builtin_ia32_crc32hi}, @code{__builtin_ia32_crc32si} and\n+@code{__builtin_ia32_crc32di} to generate the @code{crc32} machine instruction.\n \n @item -mrecip\n @opindex mrecip\n-This option will enable GCC to use RCPSS and RSQRTSS instructions (and their\n-vectorized variants RCPPS and RSQRTPS) with an additional Newton-Raphson step\n-to increase precision instead of DIVSS and SQRTSS (and their vectorized\n+This option enables use of @code{RCPSS} and @code{RSQRTSS} instructions\n+(and their vectorized variants @code{RCPPS} and @code{RSQRTPS})\n+with an additional Newton-Raphson step\n+to increase precision instead of @code{DIVSS} and @code{SQRTSS}\n+(and their vectorized\n variants) for single-precision floating-point arguments.  These instructions\n are generated only when @option{-funsafe-math-optimizations} is enabled\n together with @option{-finite-math-only} and @option{-fno-trapping-math}.\n Note that while the throughput of the sequence is higher than the throughput\n of the non-reciprocal instruction, the precision of the sequence can be\n decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994).\n \n-Note that GCC implements @code{1.0f/sqrtf(@var{x})} in terms of RSQRTSS\n-(or RSQRTPS) already with @option{-ffast-math} (or the above option\n+Note that GCC implements @code{1.0f/sqrtf(@var{x})} in terms of @code{RSQRTSS}\n+(or @code{RSQRTPS}) already with @option{-ffast-math} (or the above option\n combination), and doesn't need @option{-mrecip}.\n \n Also note that GCC emits the above sequence with additional Newton-Raphson step\n@@ -13544,26 +13615,47 @@ doesn't need @option{-mrecip}.\n \n @item -mrecip=@var{opt}\n @opindex mrecip=opt\n-This option allows to control which reciprocal estimate instructions\n-may be used.  @var{opt} is a comma separated list of options, which may\n-be preceded by a @code{!} to invert the option:\n-@code{all}: enable all estimate instructions,\n-@code{default}: enable the default instructions, equivalent to @option{-mrecip},\n-@code{none}: disable all estimate instructions, equivalent to @option{-mno-recip},\n-@code{div}: enable the approximation for scalar division,\n-@code{vec-div}: enable the approximation for vectorized division,\n-@code{sqrt}: enable the approximation for scalar square root,\n-@code{vec-sqrt}: enable the approximation for vectorized square root.\n+This option controls which reciprocal estimate instructions\n+may be used.  @var{opt} is a comma-separated list of options, which may\n+be preceded by a @samp{!} to invert the option:\n+\n+@table @samp\n+@item all\n+Enable all estimate instructions.\n+\n+@item default\n+Enable the default instructions, equivalent to @option{-mrecip}.\n+\n+@item none\n+Disable all estimate instructions, equivalent to @option{-mno-recip}.\n+\n+@item div\n+Enable the approximation for scalar division.\n+\n+@item vec-div\n+Enable the approximation for vectorized division.\n \n-So for example, @option{-mrecip=all,!sqrt} would enable\n+@item sqrt\n+Enable the approximation for scalar square root.\n+\n+@item vec-sqrt\n+Enable the approximation for vectorized square root.\n+@end table\n+\n+So, for example, @option{-mrecip=all,!sqrt} enables\n all of the reciprocal approximations, except for square root.\n \n @item -mveclibabi=@var{type}\n @opindex mveclibabi\n Specifies the ABI type to use for vectorizing intrinsics using an\n-external library.  Supported types are @code{svml} for the Intel short\n-vector math library and @code{acml} for the AMD math core library style\n-of interfacing.  GCC will currently emit calls to @code{vmldExp2},\n+external library.  Supported values for @var{type} are @samp{svml} \n+for the Intel short\n+vector math library and @samp{acml} for the AMD math core library.\n+To use this option, both @option{-ftree-vectorize} and\n+@option{-funsafe-math-optimizations} have to be enabled, and an SVML or ACML \n+ABI-compatible library must be specified at link time.\n+\n+GCC currently emits calls to @code{vmldExp2},\n @code{vmldLn2}, @code{vmldLog102}, @code{vmldLog102}, @code{vmldPow2},\n @code{vmldTanh2}, @code{vmldTan2}, @code{vmldAtan2}, @code{vmldAtanh2},\n @code{vmldCbrt2}, @code{vmldSinh2}, @code{vmldSin2}, @code{vmldAsinh2},\n@@ -13573,22 +13665,20 @@ of interfacing.  GCC will currently emit calls to @code{vmldExp2},\n @code{vmlsAtan4}, @code{vmlsAtanh4}, @code{vmlsCbrt4}, @code{vmlsSinh4},\n @code{vmlsSin4}, @code{vmlsAsinh4}, @code{vmlsAsin4}, @code{vmlsCosh4},\n @code{vmlsCos4}, @code{vmlsAcosh4} and @code{vmlsAcos4} for corresponding\n-function type when @option{-mveclibabi=svml} is used and @code{__vrd2_sin},\n+function type when @option{-mveclibabi=svml} is used, and @code{__vrd2_sin},\n @code{__vrd2_cos}, @code{__vrd2_exp}, @code{__vrd2_log}, @code{__vrd2_log2},\n @code{__vrd2_log10}, @code{__vrs4_sinf}, @code{__vrs4_cosf},\n @code{__vrs4_expf}, @code{__vrs4_logf}, @code{__vrs4_log2f},\n-@code{__vrs4_log10f} and @code{__vrs4_powf} for corresponding function type\n-when @option{-mveclibabi=acml} is used. Both @option{-ftree-vectorize} and\n-@option{-funsafe-math-optimizations} have to be enabled. A SVML or ACML ABI\n-compatible library will have to be specified at link time.\n+@code{__vrs4_log10f} and @code{__vrs4_powf} for the corresponding function type\n+when @option{-mveclibabi=acml} is used.  \n \n @item -mabi=@var{name}\n @opindex mabi\n Generate code for the specified calling convention.  Permissible values\n-are: @samp{sysv} for the ABI used on GNU/Linux and other systems and\n+are @samp{sysv} for the ABI used on GNU/Linux and other systems, and\n @samp{ms} for the Microsoft ABI.  The default is to use the Microsoft\n-ABI when targeting Windows.  On all other systems, the default is the\n-SYSV ABI.  You can control this behavior for a specific function by\n+ABI when targeting Microsoft Windows and the SysV ABI on all other systems.\n+You can control this behavior for a specific function by\n using the function attribute @samp{ms_abi}/@samp{sysv_abi}.\n @xref{Function Attributes}.\n \n@@ -13610,33 +13700,34 @@ improved scheduling and reduced dependencies.\n \n @item -maccumulate-outgoing-args\n @opindex maccumulate-outgoing-args\n-If enabled, the maximum amount of space required for outgoing arguments will be\n+If enabled, the maximum amount of space required for outgoing arguments is\n computed in the function prologue.  This is faster on most modern CPUs\n because of reduced dependencies, improved scheduling and reduced stack usage\n-when preferred stack boundary is not equal to 2.  The drawback is a notable\n+when the preferred stack boundary is not equal to 2.  The drawback is a notable\n increase in code size.  This switch implies @option{-mno-push-args}.\n \n @item -mthreads\n @opindex mthreads\n-Support thread-safe exception handling on @samp{Mingw32}.  Code that relies\n+Support thread-safe exception handling on MinGW.  Programs that rely\n on thread-safe exception handling must compile and link all code with the\n @option{-mthreads} option.  When compiling, @option{-mthreads} defines\n-@option{-D_MT}; when linking, it links in a special thread helper library\n-@option{-lmingwthrd} which cleans up per thread exception handling data.\n+@code{-D_MT}; when linking, it links in a special thread helper library\n+@option{-lmingwthrd} which cleans up per-thread exception-handling data.\n \n @item -mno-align-stringops\n @opindex mno-align-stringops\n-Do not align destination of inlined string operations.  This switch reduces\n+Do not align the destination of inlined string operations.  This switch reduces\n code size and improves performance in case the destination is already aligned,\n but GCC doesn't know about it.\n \n @item -minline-all-stringops\n @opindex minline-all-stringops\n By default GCC inlines string operations only when the destination is \n known to be aligned to least a 4-byte boundary.  \n-This enables more inlining, increase code\n-size, but may improve performance of code that depends on fast memcpy, strlen\n-and memset for short lengths.\n+This enables more inlining and increases code\n+size, but may improve performance of code that depends on fast\n+@code{memcpy}, @code{strlen},\n+and @code{memset} for short lengths.\n \n @item -minline-stringops-dynamically\n @opindex minline-stringops-dynamically\n@@ -13645,18 +13736,30 @@ inline code for small blocks and a library call for large blocks.\n \n @item -mstringop-strategy=@var{alg}\n @opindex mstringop-strategy=@var{alg}\n-Overwrite internal decision heuristic about particular algorithm to inline\n-string operation with.  The allowed values are @code{rep_byte},\n-@code{rep_4byte}, @code{rep_8byte} for expanding using i386 @code{rep} prefix\n-of specified size, @code{byte_loop}, @code{loop}, @code{unrolled_loop} for\n-expanding inline loop, @code{libcall} for always expanding library call.\n+Override the internal decision heuristic for the particular algorithm to use\n+for inlining string operations.  The allowed values for @var{alg} are:\n+\n+@table @samp\n+@item rep_byte\n+@itemx rep_4byte\n+@itemx rep_8byte\n+Expand using i386 @code{rep} prefix of the specified size.\n+\n+@item byte_loop\n+@itemx loop\n+@itemx unrolled_loop\n+Expand into an inline loop.\n+\n+@item libcall\n+Always use a library call.\n+@end table\n \n @item -momit-leaf-frame-pointer\n @opindex momit-leaf-frame-pointer\n Don't keep the frame pointer in a register for leaf functions.  This\n-avoids the instructions to save, set up and restore frame pointers and\n+avoids the instructions to save, set up, and restore frame pointers and\n makes an extra register available in leaf functions.  The option\n-@option{-fomit-frame-pointer} removes the frame pointer for all functions,\n+@option{-fomit-leaf-frame-pointer} removes the frame pointer for leaf functions,\n which might make debugging harder.\n \n @item -mtls-direct-seg-refs\n@@ -13665,10 +13768,10 @@ which might make debugging harder.\n Controls whether TLS variables may be accessed with offsets from the\n TLS segment register (@code{%gs} for 32-bit, @code{%fs} for 64-bit),\n or whether the thread base pointer must be added.  Whether or not this\n-is legal depends on the operating system, and whether it maps the\n+is valid depends on the operating system, and whether it maps the\n segment to cover the entire TLS area.\n \n-For systems that use GNU libc, the default is on.\n+For systems that use the GNU C Library, the default is on.\n \n @item -msse2avx\n @itemx -mno-sse2avx\n@@ -13679,8 +13782,8 @@ prefix.  The option @option{-mavx} turns this on by default.\n @item -mfentry\n @itemx -mno-fentry\n @opindex mfentry\n-If profiling is active @option{-pg} put the profiling\n-counter call before prologue.\n+If profiling is active (@option{-pg}), put the profiling\n+counter call before the prologue.\n Note: On x86 architectures the attribute @code{ms_hook_prologue}\n isn't possible at the moment for @option{-mfentry} and @option{-pg}.\n \n@@ -13694,15 +13797,15 @@ to 255, 8-bit unsigned integer divide is used instead of\n 32-bit/64-bit integer divide.\n \n @item -mavx256-split-unaligned-load\n-@item -mavx256-split-unaligned-store\n+@itemx -mavx256-split-unaligned-store\n @opindex avx256-split-unaligned-load\n @opindex avx256-split-unaligned-store\n Split 32-byte AVX unaligned load and store.\n \n @end table\n \n These @samp{-m} switches are supported in addition to the above\n-on AMD x86-64 processors in 64-bit environments.\n+on x86-64 processors in 64-bit environments.\n \n @table @gcctabopt\n @item -m32\n@@ -13712,20 +13815,24 @@ on AMD x86-64 processors in 64-bit environments.\n @opindex m64\n @opindex mx32\n Generate code for a 32-bit or 64-bit environment.\n-The @option{-m32} option sets int, long and pointer to 32 bits and\n+The @option{-m32} option sets @code{int}, @code{long}, and pointer types\n+to 32 bits, and\n generates code that runs on any i386 system.\n-The @option{-m64} option sets int to 32 bits and long and pointer\n-to 64 bits and generates code for AMD's x86-64 architecture.\n-The @option{-mx32} option sets int, long and pointer to 32 bits and\n-generates code for AMD's x86-64 architecture.\n-For darwin only the @option{-m64} option turns off the @option{-fno-pic}\n+\n+The @option{-m64} option sets @code{int} to 32 bits and @code{long} and pointer\n+types to 64 bits, and generates code for the x86-64 architecture.\n+For Darwin only the @option{-m64} option also turns off the @option{-fno-pic}\n and @option{-mdynamic-no-pic} options.\n \n+The @option{-mx32} option sets @code{int}, @code{long}, and pointer types\n+to 32 bits, and\n+generates code for the x86-64 architecture.\n+\n @item -mno-red-zone\n @opindex mno-red-zone\n-Do not use a so called red zone for x86-64 code.  The red zone is mandated\n-by the x86-64 ABI, it is a 128-byte area beyond the location of the\n-stack pointer that will not be modified by signal or interrupt handlers\n+Do not use a so-called ``red zone'' for x86-64 code.  The red zone is mandated\n+by the x86-64 ABI; it is a 128-byte area beyond the location of the\n+stack pointer that is not modified by signal or interrupt handlers\n and therefore can be used for temporary data without adjusting the stack\n pointer.  The flag @option{-mno-red-zone} disables this red zone.\n \n@@ -13744,44 +13851,45 @@ This model has to be used for Linux kernel code.\n \n @item -mcmodel=medium\n @opindex mcmodel=medium\n-Generate code for the medium model: The program is linked in the lower 2\n+Generate code for the medium model: the program is linked in the lower 2\n GB of the address space.  Small symbols are also placed there.  Symbols\n with sizes larger than @option{-mlarge-data-threshold} are put into\n-large data or bss sections and can be located above 2GB.  Programs can\n+large data or BSS sections and can be located above 2GB.  Programs can\n be statically or dynamically linked.\n \n @item -mcmodel=large\n @opindex mcmodel=large\n-Generate code for the large model: This model makes no assumptions\n+Generate code for the large model.  This model makes no assumptions\n about addresses and sizes of sections.\n @end table\n \n @node i386 and x86-64 Windows Options\n @subsection i386 and x86-64 Windows Options\n @cindex i386 and x86-64 Windows Options\n \n-These additional options are available for Windows targets:\n+These additional options are available for Microsoft Windows targets:\n \n @table @gcctabopt\n @item -mconsole\n @opindex mconsole\n-This option is available for Cygwin and MinGW targets.  It\n+This option\n specifies that a console application is to be generated, by\n instructing the linker to set the PE header subsystem type\n required for console applications.\n-This is the default behavior for Cygwin and MinGW targets.\n+This option is available for Cygwin and MinGW targets and is\n+enabled by default on those targets.\n \n @item -mdll\n @opindex mdll\n This option is available for Cygwin and MinGW targets.  It\n-specifies that a DLL - a dynamic link library - is to be\n+specifies that a DLL---a dynamic link library---is to be\n generated, enabling the selection of the required runtime\n startup object and entry point.\n \n @item -mnop-fun-dllimport\n @opindex mnop-fun-dllimport\n This option is available for Cygwin and MinGW targets.  It\n-specifies that the dllimport attribute should be ignored.\n+specifies that the @code{dllimport} attribute should be ignored.\n \n @item -mthread\n @opindex mthread\n@@ -13790,14 +13898,14 @@ that MinGW-specific thread support is to be used.\n \n @item -municode\n @opindex municode\n-This option is available for mingw-w64 targets.  It specifies\n-that the UNICODE macro is getting pre-defined and that the\n-unicode capable runtime startup code is chosen.\n+This option is available for MinGW-w64 targets.  It causes\n+the @code{UNICODE} preprocessor macro to be predefined, and\n+chooses Unicode-capable runtime startup code.\n \n @item -mwin32\n @opindex mwin32\n This option is available for Cygwin and MinGW targets.  It\n-specifies that the typical Windows pre-defined macros are to\n+specifies that the typical Microsoft Windows predefined macros are to\n be set in the pre-processor, but does not influence the choice\n of runtime library/startup code.\n \n@@ -13811,17 +13919,17 @@ appropriately.\n @item -fno-set-stack-executable\n @opindex fno-set-stack-executable\n This option is available for MinGW targets. It specifies that\n-the executable flag for stack used by nested functions isn't\n+the executable flag for the stack used by nested functions isn't\n set. This is necessary for binaries running in kernel mode of\n-Windows, as there the user32 API, which is used to set executable\n+Microsoft Windows, as there the User32 API, which is used to set executable\n privileges, isn't available.\n \n @item -mpe-aligned-commons\n @opindex mpe-aligned-commons\n This option is available for Cygwin and MinGW targets.  It\n specifies that the GNU extension to the PE file format that\n permits the correct alignment of COMMON variables should be\n-used when generating code.  It will be enabled by default if\n+used when generating code.  It is enabled by default if\n GCC detects that the target assembler found during configuration\n supports the feature.\n @end table\n@@ -13936,7 +14044,7 @@ using the maximum throughput algorithm.\n \n @item -mno-inline-sqrt\n @opindex mno-inline-sqrt\n-Do not generate inline code for sqrt.\n+Do not generate inline code for @code{sqrt}.\n \n @item -mfused-madd\n @itemx -mno-fused-madd\n@@ -13949,7 +14057,7 @@ instructions.  The default is to use these instructions.\n @itemx -mdwarf2-asm\n @opindex mno-dwarf2-asm\n @opindex mdwarf2-asm\n-Don't (or do) generate assembler code for the DWARF2 line number debugging\n+Don't (or do) generate assembler code for the DWARF 2 line number debugging\n info.  This may be useful when not using the GNU assembler.\n \n @item -mearly-stop-bits\n@@ -13963,7 +14071,7 @@ scheduling, but does not always do so.\n @item -mfixed-range=@var{register-range}\n @opindex mfixed-range\n Generate code treating the given register range as fixed registers.\n-A fixed register is one that the register allocator can not use.  This is\n+A fixed register is one that the register allocator cannot use.  This is\n useful when compiling kernel code.  A register range is specified as\n two registers separated by a dash.  Multiple register ranges can be\n specified separated by a comma.\n@@ -13976,7 +14084,8 @@ Specify bit size of immediate TLS offsets.  Valid values are 14, 22, and\n @item -mtune=@var{cpu-type}\n @opindex mtune\n Tune the instruction scheduling for a particular CPU, Valid values are\n-itanium, itanium1, merced, itanium2, and mckinley.\n+@samp{itanium}, @samp{itanium1}, @samp{merced}, @samp{itanium2},\n+and @samp{mckinley}.\n \n @item -milp32\n @itemx -mlp64\n@@ -13992,17 +14101,17 @@ to 64 bits.  These are HP-UX specific flags.\n @opindex mno-sched-br-data-spec\n @opindex msched-br-data-spec\n (Dis/En)able data speculative scheduling before reload.\n-This will result in generation of the ld.a instructions and\n-the corresponding check instructions (ld.c / chk.a).\n+This results in generation of @code{ld.a} instructions and\n+the corresponding check instructions (@code{ld.c} / @code{chk.a}).\n The default is 'disable'.\n \n @item -msched-ar-data-spec\n @itemx -mno-sched-ar-data-spec\n @opindex msched-ar-data-spec\n @opindex mno-sched-ar-data-spec\n (En/Dis)able data speculative scheduling after reload.\n-This will result in generation of the ld.a instructions and\n-the corresponding check instructions (ld.c / chk.a).\n+This results in generation of @code{ld.a} instructions and\n+the corresponding check instructions (@code{ld.c} / @code{chk.a}).\n The default is 'enable'.\n \n @item -mno-sched-control-spec\n@@ -14011,8 +14120,8 @@ The default is 'enable'.\n @opindex msched-control-spec\n (Dis/En)able control speculative scheduling.  This feature is\n available only during region scheduling (i.e.@: before reload).\n-This will result in generation of the ld.s instructions and\n-the corresponding check instructions chk.s .\n+This results in generation of the @code{ld.s} instructions and\n+the corresponding check instructions @code{chk.s}.\n The default is 'disable'.\n \n @item -msched-br-in-data-spec\n@@ -14046,26 +14155,26 @@ The default is 'enable'.\n @itemx -msched-prefer-non-data-spec-insns\n @opindex mno-sched-prefer-non-data-spec-insns\n @opindex msched-prefer-non-data-spec-insns\n-If enabled, data speculative instructions will be chosen for schedule\n-only if there are no other choices at the moment.  This will make\n+If enabled, data-speculative instructions are chosen for schedule\n+only if there are no other choices at the moment.  This makes\n the use of the data speculation much more conservative.\n The default is 'disable'.\n \n @item -mno-sched-prefer-non-control-spec-insns\n @itemx -msched-prefer-non-control-spec-insns\n @opindex mno-sched-prefer-non-control-spec-insns\n @opindex msched-prefer-non-control-spec-insns\n-If enabled, control speculative instructions will be chosen for schedule\n-only if there are no other choices at the moment.  This will make\n+If enabled, control-speculative instructions are chosen for schedule\n+only if there are no other choices at the moment.  This makes\n the use of the control speculation much more conservative.\n The default is 'disable'.\n \n @item -mno-sched-count-spec-in-critical-path\n @itemx -msched-count-spec-in-critical-path\n @opindex mno-sched-count-spec-in-critical-path\n @opindex msched-count-spec-in-critical-path\n-If enabled, speculative dependencies will be considered during\n-computation of the instructions priorities.  This will make the use of the\n+If enabled, speculative dependencies are considered during\n+computation of the instructions priorities.  This makes the use of the\n speculation a bit more conservative.\n The default is 'disable'.\n \n@@ -14102,9 +14211,11 @@ The default value is 1.\n \n @item -msched-max-memory-insns-hard-limit\n @opindex msched-max-memory-insns-hard-limit\n-Disallow more than `msched-max-memory-insns' in instruction group.\n-Otherwise, limit is `soft' meaning that we would prefer non-memory operations\n-when limit is reached but may still schedule memory operations.\n+Makes the limit specified by @option{msched-max-memory-insns} a hard limit,\n+disallowing more than that number in an instruction group.\n+Otherwise, the limit is ``soft'', meaning that non-memory operations\n+are preferred when the limit is reached, but memory operations may still\n+be scheduled.\n \n @end table\n \n@@ -14116,8 +14227,8 @@ These @samp{-m} options are defined for the IA-64/VMS implementations:\n @table @gcctabopt\n @item -mvms-return-codes\n @opindex mvms-return-codes\n-Return VMS condition codes from main. The default is to return POSIX\n-style condition (e.g.@ error) codes.\n+Return VMS condition codes from @code{main}. The default is to return POSIX-style\n+condition (e.g.@ error) codes.\n \n @item -mdebug-main=@var{prefix}\n @opindex mdebug-main=@var{prefix}"}]}