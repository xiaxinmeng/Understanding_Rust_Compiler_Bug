{"sha": "569b7f6adb641fe57a10c76514bf670f5f479648", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY5YjdmNmFkYjY0MWZlNTdhMTBjNzY1MTRiZjY3MGY1ZjQ3OTY0OA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-08-01T03:55:03Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-08-01T03:55:03Z"}, "message": "dwarf2out.c, [...]: Fix comment typos.\n\n\t* dwarf2out.c, fold-const.c, ipa-type-escape.c,\n\tloop-invariant.c, predict.c, predict.def, reload1.c, reorg.c,\n\ttree-sra.c, config/arm/arm.c, config/crx/crx.c,\n\tconfig/i386/i386.c, config/mips/mips.h,\n\tconfig/rs6000/rs6000.h, config/sh/sh.c,\n\tconfig/stormy16/stormy16.c: Fix comment typos.\n\nFrom-SVN: r102620", "tree": {"sha": "6ff21aa552a2746964fc034a8697d9e05c27a0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ff21aa552a2746964fc034a8697d9e05c27a0a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/569b7f6adb641fe57a10c76514bf670f5f479648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569b7f6adb641fe57a10c76514bf670f5f479648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/569b7f6adb641fe57a10c76514bf670f5f479648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569b7f6adb641fe57a10c76514bf670f5f479648/comments", "author": null, "committer": null, "parents": [{"sha": "5922c21599d7fdbeb5f63701b5b364df1c086538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5922c21599d7fdbeb5f63701b5b364df1c086538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5922c21599d7fdbeb5f63701b5b364df1c086538"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "bc0f2930bc2709e109ca4f9b259e49ed1d90c84a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -1,3 +1,12 @@\n+2005-08-01  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* dwarf2out.c, fold-const.c, ipa-type-escape.c,\n+\tloop-invariant.c, predict.c, predict.def, reload1.c, reorg.c,\n+\ttree-sra.c, config/arm/arm.c, config/crx/crx.c,\n+\tconfig/i386/i386.c, config/mips/mips.h,\n+\tconfig/rs6000/rs6000.h, config/sh/sh.c,\n+\tconfig/stormy16/stormy16.c: Fix comment typos.\n+\n 2005-08-01  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/22311"}, {"sha": "289fb00159a76ea6dff1e9728c5c1dcc19fe5495", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -14738,7 +14738,7 @@ arm_unwind_emit_stm (FILE * asm_out_file, rtx p)\n   if (reg < 16)\n     {\n       /* The function prologue may also push pc, but not annotate it as it is\n-\t never restored.  We turn this into an stack pointer adjustment.  */\n+\t never restored.  We turn this into a stack pointer adjustment.  */\n       if (nregs * 4 == offset - 4)\n \t{\n \t  fprintf (asm_out_file, \"\\t.pad #4\\n\");"}, {"sha": "8eb4d0dcbbac985e1dac2d75e092304e78846be3", "filename": "gcc/config/crx/crx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Fcrx%2Fcrx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Fcrx%2Fcrx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -80,7 +80,7 @@\n   ((GET_CODE(X) == CONST_INT\t\t\t\t\\\n     && SIGNED_INT_FITS_N_BITS(INTVAL(X),n)) ? 1 : 0)\n \n-/* Nonzero if the rtx X is a unsigned const int of n bits */\n+/* Nonzero if the rtx X is an unsigned const int of n bits.  */\n #define RTX_UNSIGNED_INT_FITS_N_BITS(X,n)\t\t\\\n   ((GET_CODE(X) == CONST_INT\t\t\t\t\\\n     && UNSIGNED_INT_FITS_N_BITS(INTVAL(X),n)) ? 1 : 0)"}, {"sha": "69f7bdf8e8c46c433035eed2bf79ae3d0a52f887", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -1791,7 +1791,7 @@ x86_64_elf_unique_section (tree decl, int reloc)\n /* This says how to output assembler code to declare an\n    uninitialized external linkage data object.\n \n-   For medim model x86-64 we need to use .largecomm opcode for\n+   For medium model x86-64 we need to use .largecomm opcode for\n    large objects.  */\n void\n x86_elf_aligned_common (FILE *file,\n@@ -5789,7 +5789,7 @@ legitimate_address_p (enum machine_mode mode, rtx addr, int strict)\n   return FALSE;\n }\n \f\n-/* Return an unique alias set for the GOT.  */\n+/* Return a unique alias set for the GOT.  */\n \n static HOST_WIDE_INT\n ix86_GOT_alias_set (void)"}, {"sha": "76f81dee36985dba146cf2832712199f3f27940a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -1663,7 +1663,7 @@ extern enum reg_class mips_char_to_class[256];\n \n #define REG_CLASS_FROM_LETTER(C) mips_char_to_class[(unsigned char)(C)]\n \n-/* True if VALUE is a unsigned 6-bit number.  */\n+/* True if VALUE is an unsigned 6-bit number.  */\n \n #define UIMM6_OPERAND(VALUE) \\\n   (((VALUE) & ~(unsigned HOST_WIDE_INT) 0x3f) == 0)"}, {"sha": "01f091d366104bf264784866df0d597b82e4e045", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -1109,7 +1109,7 @@ enum reg_class\n    'T' is a constant that can be placed into a 32-bit mask operand\n    'U' is for V.4 small data references.\n    'W' is a vector constant that can be easily generated (no mem refs).\n-   'Y' is a indexed or word-aligned displacement memory operand.\n+   'Y' is an indexed or word-aligned displacement memory operand.\n    'Z' is an indexed or indirect memory operand.\n    't' is for AND masks that can be performed by two rldic{l,r} insns.  */\n "}, {"sha": "fbf8e01e8852fa29e1c864bd36106430a613d0af", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -1755,7 +1755,7 @@ unspec_caller_rtx_p (rtx pat)\n }\n \n /* Indicate that INSN cannot be duplicated.  This is true for insn\n-   that generates an unique label.  */\n+   that generates a unique label.  */\n \n static bool\n sh_cannot_copy_insn_p (rtx insn)"}, {"sha": "8a7c8d724c4d88ad3c17b2855efa41f7da17a60c", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -2479,7 +2479,7 @@ combine_bnp (rtx insn)\n \n   if (need_extend)\n     {\n-      /* LT and GE conditionals should have an sign extend before\n+      /* LT and GE conditionals should have a sign extend before\n \t them.  */\n       for (and = prev_real_insn (insn); and; and = prev_real_insn (and))\n \t{"}, {"sha": "be2f55764abc340d4eb60bd4cb518dcc51c1afea", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -13078,7 +13078,7 @@ dwarf2out_decl (tree decl)\n \t declarations.  We have to check DECL_INITIAL instead. That's because\n \t the C front-end supports some weird semantics for \"extern inline\"\n \t function definitions.  These can get inlined within the current\n-\t translation unit (an thus, we need to generate Dwarf info for their\n+\t translation unit (and thus, we need to generate Dwarf info for their\n \t abstract instances so that the Dwarf info for the concrete inlined\n \t instances can have something to refer to) but the compiler never\n \t generates any out-of-lines instances of such things (despite the fact"}, {"sha": "c74f8910374a97a3388d622cdf70210a8fcfd554", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -2029,7 +2029,7 @@ fold_convert (tree type, tree arg)\n     }\n }\n \f\n-/* Return false if expr can be assumed not to be an value, true\n+/* Return false if expr can be assumed not to be an lvalue, true\n    otherwise.  */\n \n static bool"}, {"sha": "e369d313dacd60cb9bdce0daf528c5ba4714b6ff", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -1622,7 +1622,7 @@ close_type_full_escape (tree type)\n }\n \n /* Transitively close the addressof bitmap for the type with UID.\n-   This means that if we had a.b and b.c, a would have both b an c in\n+   This means that if we had a.b and b.c, a would have both b and c in\n    its maps.  */ \n \n static bitmap"}, {"sha": "7765a0eda3572c5a8e7d1f0acccc18eaeba06605", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -470,7 +470,7 @@ find_invariant_insn (rtx insn, bool always_reached, bool always_executed,\n   create_new_invariant (def, insn, depends_on, always_executed);\n }\n \n-/* Record registers used in INSN that have an unique invariant definition.\n+/* Record registers used in INSN that have a unique invariant definition.\n    DF is the dataflow object.  */\n \n static void"}, {"sha": "412af8616e73c5ff5e55b90b851cd7741e408ca1", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -1557,11 +1557,11 @@ typedef struct block_info_def\n /* Similar information for edges.  */\n typedef struct edge_info_def\n {\n-  /* In case edge is an loopback edge, the probability edge will be reached\n+  /* In case edge is a loopback edge, the probability edge will be reached\n      in case header is.  Estimated number of iterations of the loop can be\n      then computed as 1 / (1 - back_edge_prob).  */\n   sreal back_edge_prob;\n-  /* True if the edge is an loopback edge in the natural loop.  */\n+  /* True if the edge is a loopback edge in the natural loop.  */\n   unsigned int back_edge:1;\n } *edge_info;\n "}, {"sha": "997f4d2cc987a765c665f4d8839fe86edaeb761c", "filename": "gcc/predict.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -41,7 +41,7 @@ DEF_PREDICTOR (PRED_COMBINED, \"combined\", PROB_ALWAYS, 0)\n /* An outcome estimated by Dempster-Shaffer theory.  */\n DEF_PREDICTOR (PRED_DS_THEORY, \"DS theory\", PROB_ALWAYS, 0)\n \n-/* An combined heuristics using probability determined by first\n+/* A combined heuristics using probability determined by first\n    matching heuristics from this list.  */\n DEF_PREDICTOR (PRED_FIRST_MATCH, \"first match\", PROB_ALWAYS, 0)\n "}, {"sha": "08e939bba901c40941461b87f3ddaf6f00df1b30", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -1042,7 +1042,7 @@ reload (rtx first, int global)\n \t      /* If we already deleted the insn or if it may trap, we can't\n \t\t delete it.  The latter case shouldn't happen, but can\n \t\t if an insn has a variable address, gets a REG_EH_REGION\n-\t\t note added to it, and then gets converted into an load\n+\t\t note added to it, and then gets converted into a load\n \t\t from a constant address.  */\n \t      if (NOTE_P (equiv_insn)\n \t\t  || can_throw_internal (equiv_insn))"}, {"sha": "cda716887d66257d31d1b8059516097e760f0501", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -1934,7 +1934,7 @@ reorg_redirect_jump (rtx jump, rtx nlabel)\n    that reference values used in INSN.  If we find one, then we move the\n    REG_DEAD note to INSN.\n \n-   This is needed to handle the case where an later insn (after INSN) has a\n+   This is needed to handle the case where a later insn (after INSN) has a\n    REG_DEAD note for a register used by INSN, and this later insn subsequently\n    gets moved before a CODE_LABEL because it is a redundant insn.  In this\n    case, mark_target_live_regs may be confused into thinking the register"}, {"sha": "337b79777162c164e4240997a1325494e79f0d97", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/569b7f6adb641fe57a10c76514bf670f5f479648/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=569b7f6adb641fe57a10c76514bf670f5f479648", "patch": "@@ -724,7 +724,7 @@ sra_walk_expr (tree *expr_p, block_stmt_iterator *bsi, bool is_output,\n \tgoto use_all;\n \n       case ARRAY_RANGE_REF:\n-\t/* Similarly, an subrange reference is used to modify indexing.  Which\n+\t/* Similarly, a subrange reference is used to modify indexing.  Which\n \t   means that the canonical element names that we have won't work.  */\n \tgoto use_all;\n "}]}