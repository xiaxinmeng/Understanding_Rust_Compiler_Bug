{"sha": "114042b8861a33ec7227c5ac2967058ee60c248f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0MDQyYjg4NjFhMzNlYzcyMjdjNWFjMjk2NzA1OGVlNjBjMjQ4Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-13T08:06:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-13T08:06:44Z"}, "message": "[Ada] Add/fix documentation for the Double_*_Alignment parameters\n\n2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n\t(-gnateT): Document Double_Float_Alignment parameter and fix\n\tdescription of Double_Scalar_Alignment parameter.\n\t* gnat_ugn.texi: Regenerate.\n\nFrom-SVN: r274337", "tree": {"sha": "92bc062beb3defe84279ab5d121cb65fff6ccaae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92bc062beb3defe84279ab5d121cb65fff6ccaae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/114042b8861a33ec7227c5ac2967058ee60c248f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114042b8861a33ec7227c5ac2967058ee60c248f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114042b8861a33ec7227c5ac2967058ee60c248f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114042b8861a33ec7227c5ac2967058ee60c248f/comments", "author": null, "committer": null, "parents": [{"sha": "d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71e9fb2a5f1d55a065e3b50ee5fb2a34e75ead7"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "f4ad36d2dbe2f92cffbafc253142f5ac9656c527", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114042b8861a33ec7227c5ac2967058ee60c248f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114042b8861a33ec7227c5ac2967058ee60c248f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=114042b8861a33ec7227c5ac2967058ee60c248f", "patch": "@@ -1,3 +1,10 @@\n+2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n+\t(-gnateT): Document Double_Float_Alignment parameter and fix\n+\tdescription of Double_Scalar_Alignment parameter.\n+\t* gnat_ugn.texi: Regenerate.\n+\n 2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch6.adb (Expand_Call_Helper): If back-end inlining is"}, {"sha": "beceb5130adb9ae4dbeacd22f86558113d11551b", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114042b8861a33ec7227c5ac2967058ee60c248f/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114042b8861a33ec7227c5ac2967058ee60c248f/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=114042b8861a33ec7227c5ac2967058ee60c248f", "patch": "@@ -1714,11 +1714,13 @@ Alphabetical List of All Switches\n   GCC macro ``BITS_PER_WORD`` documented as follows: `Number of bits in a word;\n   normally 32.`\n \n-  ``Double_Scalar_Alignment`` is the alignment for a scalar whose size is two\n-  machine words. It should be the same as the alignment for C ``long_long`` on\n-  most targets.\n+  ``Double_Float_Alignment``, if not zero, is the maximum alignment that the\n+  compiler can choose by default for a 64-bit floating-point type or object.\n \n-  ``Maximum_Alignment`` is the maximum alignment that the compiler might choose\n+  ``Double_Scalar_Alignment``, if not zero, is the maximum alignment that the\n+  compiler can choose by default for a 64-bit or larger scalar type or object.\n+\n+  ``Maximum_Alignment`` is the maximum alignment that the compiler can choose\n   by default for a type or object, which is also the maximum alignment that can\n   be specified in GNAT. It is computed for GCC backends as ``BIGGEST_ALIGNMENT\n   / BITS_PER_UNIT`` where GCC macro ``BIGGEST_ALIGNMENT`` is documented as"}, {"sha": "5f73ab7602e6d0e9d52ab77f32a5173030925deb", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114042b8861a33ec7227c5ac2967058ee60c248f/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114042b8861a33ec7227c5ac2967058ee60c248f/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=114042b8861a33ec7227c5ac2967058ee60c248f", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Jun 21, 2019\n+GNAT User's Guide for Native Platforms , Jul 31, 2019\n \n AdaCore\n \n@@ -9452,11 +9452,13 @@ GCC macro @code{BITS_PER_UNIT} documented as follows: @cite{Define this macro to\n @code{Bits_Per_Word} is the number of bits in a machine word, the equivalent of\n GCC macro @code{BITS_PER_WORD} documented as follows: @cite{Number of bits in a word; normally 32.}\n \n-@code{Double_Scalar_Alignment} is the alignment for a scalar whose size is two\n-machine words. It should be the same as the alignment for C @code{long_long} on\n-most targets.\n+@code{Double_Float_Alignment}, if not zero, is the maximum alignment that the\n+compiler can choose by default for a 64-bit floating-point type or object.\n \n-@code{Maximum_Alignment} is the maximum alignment that the compiler might choose\n+@code{Double_Scalar_Alignment}, if not zero, is the maximum alignment that the\n+compiler can choose by default for a 64-bit or larger scalar type or object.\n+\n+@code{Maximum_Alignment} is the maximum alignment that the compiler can choose\n by default for a type or object, which is also the maximum alignment that can\n be specified in GNAT. It is computed for GCC backends as @code{BIGGEST_ALIGNMENT\n / BITS_PER_UNIT} where GCC macro @code{BIGGEST_ALIGNMENT} is documented as"}]}