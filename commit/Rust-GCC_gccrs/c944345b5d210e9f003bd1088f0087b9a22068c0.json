{"sha": "c944345b5d210e9f003bd1088f0087b9a22068c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk0NDM0NWI1ZDIxMGU5ZjAwM2JkMTA4OGYwMDg3YjlhMjIwNjhjMA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2015-05-12T12:42:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-12T12:42:48Z"}, "message": "sem_intr.adb: (Check_Shift): Diagnose bad modulus value.\n\n2015-05-12  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_intr.adb: (Check_Shift): Diagnose bad modulus value.\n\n2015-05-12  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Default to suppressing\n\tAlignment_Checks on non-strict alignment machine.\n\t* sem_ch13.adb (Validate_Address_Clauses): Don't give\n\tcompile-time alignment warnings if run time Alignment_Check\n\tis suppressed.\n\nFrom-SVN: r223063", "tree": {"sha": "7edc43d37d922b72a4c5f190f0b566dfd2efb006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7edc43d37d922b72a4c5f190f0b566dfd2efb006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c944345b5d210e9f003bd1088f0087b9a22068c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c944345b5d210e9f003bd1088f0087b9a22068c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c944345b5d210e9f003bd1088f0087b9a22068c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c944345b5d210e9f003bd1088f0087b9a22068c0/comments", "author": null, "committer": null, "parents": [{"sha": "52ea13f2c135cdec424dc6a55346ec1250d54d2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ea13f2c135cdec424dc6a55346ec1250d54d2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ea13f2c135cdec424dc6a55346ec1250d54d2e"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "d97ba6804c79b5fb7098d7d56b7b91add598e055", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c944345b5d210e9f003bd1088f0087b9a22068c0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c944345b5d210e9f003bd1088f0087b9a22068c0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c944345b5d210e9f003bd1088f0087b9a22068c0", "patch": "@@ -1,3 +1,15 @@\n+2015-05-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_intr.adb: (Check_Shift): Diagnose bad modulus value.\n+\n+2015-05-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Default to suppressing\n+\tAlignment_Checks on non-strict alignment machine.\n+\t* sem_ch13.adb (Validate_Address_Clauses): Don't give\n+\tcompile-time alignment warnings if run time Alignment_Check\n+\tis suppressed.\n+\n 2015-05-12  Thomas Quinot  <quinot@adacore.com>\n \n \t* g-sercom.ads, g-sercom-linux.adb (GNAT.Serial_Communications."}, {"sha": "9a11a52759256552bc8839194041f4a797e23bdd", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c944345b5d210e9f003bd1088f0087b9a22068c0/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c944345b5d210e9f003bd1088f0087b9a22068c0/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=c944345b5d210e9f003bd1088f0087b9a22068c0", "patch": "@@ -565,6 +565,14 @@ procedure Gnat1drv is\n       Suppress_Options.Suppress (Atomic_Synchronization) :=\n         not Atomic_Sync_Default_On_Target;\n \n+      --  Set default for Alignment_Check, if we are on a machine with non-\n+      --  strict alignment, then we suppress this check, since it is over-\n+      --  zealous for such machines.\n+\n+      if not Ttypes.Target_Strict_Alignment then\n+         Suppress_Options.Suppress (Alignment_Check) := True;\n+      end if;\n+\n       --  Set switch indicating if back end can handle limited types, and\n       --  guarantee that no incorrect copies are made (e.g. in the context\n       --  of an if or case expression)."}, {"sha": "7f1f11036172807c0996ea14909c8c8759797c99", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c944345b5d210e9f003bd1088f0087b9a22068c0/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c944345b5d210e9f003bd1088f0087b9a22068c0/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c944345b5d210e9f003bd1088f0087b9a22068c0", "patch": "@@ -12646,12 +12646,16 @@ package body Sem_Ch13 is\n                     (\"\\??size of & is ^\", ACCR.N, ACCR.Y);\n \n                --  Check for inadequate alignment, both of the base object\n-               --  and of the offset, if any.\n+               --  and of the offset, if any. We only do this check if the\n+               --  run-time Alignment_Check is active. No point in warning\n+               --  if this check has been suppressed (or is suppressed by\n+               --  default in the non-strict alignment machine case).\n \n                --  Note: we do not check the alignment if we gave a size\n                --  warning, since it would likely be redundant.\n \n-               elsif Y_Alignment /= Uint_0\n+               elsif not Alignment_Checks_Suppressed (ACCR.Y)\n+                 and then Y_Alignment /= Uint_0\n                  and then (Y_Alignment < X_Alignment\n                              or else (ACCR.Off\n                                         and then"}, {"sha": "79f633a14ba15c8d9f66d201af10d6719974edd6", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c944345b5d210e9f003bd1088f0087b9a22068c0/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c944345b5d210e9f003bd1088f0087b9a22068c0/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=c944345b5d210e9f003bd1088f0087b9a22068c0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -430,13 +430,27 @@ package body Sem_Intr is\n       then\n          Errint\n            (\"first argument for shift must have size 8, 16, 32 or 64\",\n-             Ptyp1, N);\n+            Ptyp1, N);\n          return;\n \n       elsif Non_Binary_Modulus (Typ1) then\n          Errint\n            (\"shifts not allowed for non-binary modular types\", Ptyp1, N);\n \n+      --  For modular type, modulus must be 2**8, 2**16, 2**32, or 2**64.\n+      --  Don't apply to generic types, since we may not have a modulus value.\n+\n+      elsif Is_Modular_Integer_Type (Typ1)\n+        and then not Is_Generic_Type (Typ1)\n+        and then Modulus (Typ1) /= Uint_2 ** 8\n+        and then Modulus (Typ1) /= Uint_2 ** 16\n+        and then Modulus (Typ1) /= Uint_2 ** 32\n+        and then Modulus (Typ1) /= Uint_2 ** 64\n+      then\n+         Errint\n+           (\"modular type for shift must have modulus of 2'*'*8, \"\n+            & \"2'*'*16, 2'*'*32, or 2'*'*64\", Ptyp1, N);\n+\n       elsif Etype (Arg1) /= Etype (E) then\n          Errint\n            (\"first argument of shift must match return type\", Ptyp1, N);"}]}