{"sha": "1197ddb11e3560bf1fb0f942746b85267948e094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE5N2RkYjExZTM1NjBiZjFmYjBmOTQyNzQ2Yjg1MjY3OTQ4ZTA5NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T08:36:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T08:36:28Z"}, "message": "[multiple changes]\n\n2011-08-29  Geert Bosch  <bosch@adacore.com>\n\n\t* s-vaflop-vms-alpha.adb (Neg_F): Use subtraction instead of negation\n\tinstruction, as the latter may produce -0.0, which is not a valid VAX\n\tF float number.\n\t(Neg_G): Likewise for VAX F float.\n\n2011-08-29  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.adb: Minor reformatting.\n\n2011-08-29  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch3.adb: Minor comment update.\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* checks.adb (Apply_Type_Conversion_Checks): Use the Underlying_Type of\n\tthe operand type.\n\n2011-08-29  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb (Traverse_Declarations_Or_Statements): Do not flush\n\tcurrent statement sequence on a generic instantiation or a subprogram\n\tdeclaration.\n\nFrom-SVN: r178161", "tree": {"sha": "018a9f3e69915e6b742c71659e1f8d32888f0c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/018a9f3e69915e6b742c71659e1f8d32888f0c58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1197ddb11e3560bf1fb0f942746b85267948e094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1197ddb11e3560bf1fb0f942746b85267948e094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1197ddb11e3560bf1fb0f942746b85267948e094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1197ddb11e3560bf1fb0f942746b85267948e094/comments", "author": null, "committer": null, "parents": [{"sha": "8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "3079b209b72de15c3faf6beb3246b70f0c0920a0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1197ddb11e3560bf1fb0f942746b85267948e094", "patch": "@@ -1,3 +1,29 @@\n+2011-08-29  Geert Bosch  <bosch@adacore.com>\n+\n+\t* s-vaflop-vms-alpha.adb (Neg_F): Use subtraction instead of negation\n+\tinstruction, as the latter may produce -0.0, which is not a valid VAX\n+\tF float number.\n+\t(Neg_G): Likewise for VAX F float.\n+\n+2011-08-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.adb: Minor reformatting.\n+\n+2011-08-29  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch3.adb: Minor comment update.\n+\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* checks.adb (Apply_Type_Conversion_Checks): Use the Underlying_Type of\n+\tthe operand type.\n+\n+2011-08-29  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb (Traverse_Declarations_Or_Statements): Do not flush\n+\tcurrent statement sequence on a generic instantiation or a subprogram\n+\tdeclaration.\n+\n 2011-08-29  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_type.adb, einfo.ads, freeze.adb, exp_ch4.adb, sem_ch13.adb:"}, {"sha": "a36fedb9e26b7b4688148dcee2a6adbd89fb57ea", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=1197ddb11e3560bf1fb0f942746b85267948e094", "patch": "@@ -1545,7 +1545,7 @@ package body Checks is\n    --          Lo_OK be True.\n    --      (3) If I'Last < 0, then let Hi be F'Succ (I'Last) and let Hi_OK\n    --          be False. Otherwise let Hi be F'Pred (I'Last + 1) and let\n-   --          Hi_OK be False\n+   --          Hi_OK be True.\n \n    procedure Apply_Float_Conversion_Check\n      (Ck_Node    : Node_Id;\n@@ -2325,7 +2325,10 @@ package body Checks is\n       Target_Type : constant Entity_Id := Etype (N);\n       Target_Base : constant Entity_Id := Base_Type (Target_Type);\n       Expr        : constant Node_Id   := Expression (N);\n-      Expr_Type   : constant Entity_Id := Etype (Expr);\n+      Expr_Type   : constant Entity_Id := Underlying_Type (Etype (Expr));\n+      --  Note: if Etype (Expr) is a private type without discriminants, its\n+      --  full view might have discriminants with defaults, so we need the\n+      --  full view here to retrieve the constraints.\n \n    begin\n       if Inside_A_Generic then\n@@ -2383,7 +2386,7 @@ package body Checks is\n         and then not Is_Constrained (Target_Type)\n         and then Present (Stored_Constraint (Target_Type))\n       then\n-         --  An unconstrained derived type may have inherited discriminant\n+         --  An unconstrained derived type may have inherited discriminant.\n          --  Build an actual discriminant constraint list using the stored\n          --  constraint, to verify that the expression of the parent type\n          --  satisfies the constraints imposed by the (unconstrained!)"}, {"sha": "d4f8954c3b42f403d1bc88c1219ddb495a1de723", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=1197ddb11e3560bf1fb0f942746b85267948e094", "patch": "@@ -6431,12 +6431,12 @@ package body Exp_Util is\n             Typ := Entity (Decl);\n \n             if ((Is_Access_Type (Typ)\n-                   and then not Is_Access_Subprogram_Type (Typ)\n-                   and then Needs_Finalization\n-                              (Available_View (Designated_Type (Typ))))\n+                  and then not Is_Access_Subprogram_Type (Typ)\n+                  and then Needs_Finalization\n+                             (Available_View (Designated_Type (Typ))))\n                  or else\n-                (Is_Type (Typ)\n-                   and then Needs_Finalization (Typ)))\n+                   (Is_Type (Typ)\n+                     and then Needs_Finalization (Typ)))\n               and then Requires_Cleanup_Actions\n                          (Actions (Decl), For_Package, Nested_Constructs)\n             then"}, {"sha": "a38da051d8bc7c37ac9c3fe6d7897d37169ea9d7", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=1197ddb11e3560bf1fb0f942746b85267948e094", "patch": "@@ -1204,7 +1204,6 @@ package body Par_SCO is\n                when N_Subprogram_Declaration =>\n                   Process_Decisions_Defer\n                     (Parameter_Specifications (Specification (N)), 'X');\n-                  Set_Statement_Entry;\n \n                --  Generic subprogram declaration\n \n@@ -1213,7 +1212,6 @@ package body Par_SCO is\n                     (Generic_Formal_Declarations (N), 'X');\n                   Process_Decisions_Defer\n                     (Parameter_Specifications (Specification (N)), 'X');\n-                  Set_Statement_Entry;\n \n                --  Task or subprogram body\n "}, {"sha": "ba607f62d39ca36e08dcf14e5f54330cb50a56ec", "filename": "gcc/ada/s-vaflop-vms-alpha.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2Fs-vaflop-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2Fs-vaflop-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vaflop-vms-alpha.adb?ref=1197ddb11e3560bf1fb0f942746b85267948e094", "patch": "@@ -536,7 +536,7 @@ package body System.Vax_Float_Operations is\n       C    : F;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X));\n-      Asm (\"cpysn %1,%1,%0\", S'Asm_Output (\"=f\", B), S'Asm_Input (\"f\", A));\n+      Asm (\"subf $f31,%1,%0\", S'Asm_Output (\"=f\", B), S'Asm_Input (\"f\", A));\n       Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B));\n       return C;\n    end Neg_F;\n@@ -550,7 +550,7 @@ package body System.Vax_Float_Operations is\n       C    : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n-      Asm (\"cpysn %1,%1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n+      Asm (\"subg $f31,%1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n       Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B));\n       return C;\n    end Neg_G;"}, {"sha": "a3f5096376b4500dab850780d35542648ee162b9", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1197ddb11e3560bf1fb0f942746b85267948e094/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=1197ddb11e3560bf1fb0f942746b85267948e094", "patch": "@@ -4743,7 +4743,8 @@ package body Sem_Ch3 is\n \n          --  In formal verification mode, create an explicit subtype for every\n          --  index if not already a subtype_mark, and replace the existing type\n-         --  of index by this new type. Why are we doing this ???\n+         --  of index by this new type. Having a declaration for all type\n+         --  entities facilitates the task of the formal verification back-end.\n \n          if ALFA_Mode\n            and then not Nkind_In (Index, N_Identifier, N_Expanded_Name)\n@@ -4799,7 +4800,9 @@ package body Sem_Ch3 is\n       if Present (Component_Typ) then\n \n          --  In formal verification mode, create an explicit subtype for the\n-         --  component type if not already a subtype_mark. Why do this ???\n+         --  component type if not already a subtype_mark. Having a declaration\n+         --  for all type entities facilitates the task of the formal\n+         --  verification back-end.\n \n          if ALFA_Mode\n            and then Nkind (Component_Typ) = N_Subtype_Indication"}]}