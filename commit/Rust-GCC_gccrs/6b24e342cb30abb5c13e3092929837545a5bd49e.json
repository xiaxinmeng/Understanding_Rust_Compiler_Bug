{"sha": "6b24e342cb30abb5c13e3092929837545a5bd49e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyNGUzNDJjYjMwYWJiNWMxM2UzMDkyOTI5ODM3NTQ1YTViZDQ5ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-12-10T21:04:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-12-10T21:04:08Z"}, "message": "re PR middle-end/92825 (Unnecesary stack protection in Firefox's LightPixel.)\n\n\tPR middle-end/92825\n\t* cfgexpand.c (add_stack_protection_conflicts): Change return type\n\tfrom void to bool, return true if at least one stack_vars[i].decl\n\tis addressable.\n\t(record_or_union_type_has_array_p, stack_protect_decl_p): Remove.\n\t(expand_used_vars): Don't call stack_protect_decl_p, instead for\n\t-fstack-protector-strong set gen_stack_protect_signal to true\n\tif add_stack_protection_conflicts returned true.  Formatting fixes.\n\t* doc/invoke.texi (-fstack-protector-strong): Clarify that optimized\n\tout variables or variables not living on the stack don't count.\n\t(-fstack-protector): Likewise.  Clarify it affects >= 8 byte arrays\n\trather than > 8 byte.\n\n\t* gcc.target/i386/pr92825.c: New test.\n\nFrom-SVN: r279193", "tree": {"sha": "b77d3b21518543c4c938866fdd9afd705a527070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b77d3b21518543c4c938866fdd9afd705a527070"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b24e342cb30abb5c13e3092929837545a5bd49e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b24e342cb30abb5c13e3092929837545a5bd49e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b24e342cb30abb5c13e3092929837545a5bd49e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b24e342cb30abb5c13e3092929837545a5bd49e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b6a80654c704ee4ec9bb3c951af12353397a1b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6a80654c704ee4ec9bb3c951af12353397a1b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6a80654c704ee4ec9bb3c951af12353397a1b8"}], "stats": {"total": 122, "additions": 65, "deletions": 57}, "files": [{"sha": "4504e3c9115ed22188dc7901d697ad30dbdc2b94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b24e342cb30abb5c13e3092929837545a5bd49e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b24e342cb30abb5c13e3092929837545a5bd49e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b24e342cb30abb5c13e3092929837545a5bd49e", "patch": "@@ -1,5 +1,18 @@\n 2019-12-10  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/92825\n+\t* cfgexpand.c (add_stack_protection_conflicts): Change return type\n+\tfrom void to bool, return true if at least one stack_vars[i].decl\n+\tis addressable.\n+\t(record_or_union_type_has_array_p, stack_protect_decl_p): Remove.\n+\t(expand_used_vars): Don't call stack_protect_decl_p, instead for\n+\t-fstack-protector-strong set gen_stack_protect_signal to true\n+\tif add_stack_protection_conflicts returned true.  Formatting fixes.\n+\t* doc/invoke.texi (-fstack-protector-strong): Clarify that optimized\n+\tout variables or variables not living on the stack don't count.\n+\t(-fstack-protector): Likewise.  Clarify it affects >= 8 byte arrays\n+\trather than > 8 byte.\n+\n \t* ipa-param-manipulation.c\n \t(ipa_param_body_adjustments::register_replacement): Fix comment typo\n \t- accross -> across."}, {"sha": "36c4566346aa886982bb232f92c3d28513745fd0", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 23, "deletions": 53, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b24e342cb30abb5c13e3092929837545a5bd49e/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b24e342cb30abb5c13e3092929837545a5bd49e/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=6b24e342cb30abb5c13e3092929837545a5bd49e", "patch": "@@ -1888,17 +1888,23 @@ asan_decl_phase_3 (size_t i)\n }\n \n /* Ensure that variables in different stack protection phases conflict\n-   so that they are not merged and share the same stack slot.  */\n+   so that they are not merged and share the same stack slot.\n+   Return true if there are any address taken variables.  */\n \n-static void\n+static bool\n add_stack_protection_conflicts (void)\n {\n   size_t i, j, n = stack_vars_num;\n   unsigned char *phase;\n+  bool ret = false;\n \n   phase = XNEWVEC (unsigned char, n);\n   for (i = 0; i < n; ++i)\n-    phase[i] = stack_protect_decl_phase (stack_vars[i].decl);\n+    {\n+      phase[i] = stack_protect_decl_phase (stack_vars[i].decl);\n+      if (TREE_ADDRESSABLE (stack_vars[i].decl))\n+\tret = true;\n+    }\n \n   for (i = 0; i < n; ++i)\n     {\n@@ -1909,6 +1915,7 @@ add_stack_protection_conflicts (void)\n     }\n \n   XDELETEVEC (phase);\n+  return ret;\n }\n \n /* Create a decl for the guard at the top of the stack frame.  */\n@@ -1993,50 +2000,6 @@ estimated_stack_frame_size (struct cgraph_node *node)\n   return estimated_poly_value (size);\n }\n \n-/* Helper routine to check if a record or union contains an array field. */\n-\n-static int\n-record_or_union_type_has_array_p (const_tree tree_type)\n-{\n-  tree fields = TYPE_FIELDS (tree_type);\n-  tree f;\n-\n-  for (f = fields; f; f = DECL_CHAIN (f))\n-    if (TREE_CODE (f) == FIELD_DECL)\n-      {\n-\ttree field_type = TREE_TYPE (f);\n-\tif (RECORD_OR_UNION_TYPE_P (field_type)\n-\t    && record_or_union_type_has_array_p (field_type))\n-\t  return 1;\n-\tif (TREE_CODE (field_type) == ARRAY_TYPE)\n-\t  return 1;\n-      }\n-  return 0;\n-}\n-\n-/* Check if the current function has local referenced variables that\n-   have their addresses taken, contain an array, or are arrays.  */\n-\n-static bool\n-stack_protect_decl_p ()\n-{\n-  unsigned i;\n-  tree var;\n-\n-  FOR_EACH_LOCAL_DECL (cfun, i, var)\n-    if (!is_global_var (var))\n-      {\n-\ttree var_type = TREE_TYPE (var);\n-\tif (VAR_P (var)\n-\t    && (TREE_CODE (var_type) == ARRAY_TYPE\n-\t\t|| TREE_ADDRESSABLE (var)\n-\t\t|| (RECORD_OR_UNION_TYPE_P (var_type)\n-\t\t    && record_or_union_type_has_array_p (var_type))))\n-\t  return true;\n-      }\n-  return false;\n-}\n-\n /* Check if the current function has calls that use a return slot.  */\n \n static bool\n@@ -2103,8 +2066,7 @@ expand_used_vars (void)\n     }\n \n   if (flag_stack_protect == SPCT_FLAG_STRONG)\n-      gen_stack_protect_signal\n-\t= stack_protect_decl_p () || stack_protect_return_slot_p ();\n+    gen_stack_protect_signal = stack_protect_return_slot_p ();\n \n   /* At this point all variables on the local_decls with TREE_USED\n      set are not associated with any block scope.  Lay them out.  */\n@@ -2180,6 +2142,8 @@ expand_used_vars (void)\n \n   if (stack_vars_num > 0)\n     {\n+      bool has_addressable_vars = false;\n+\n       add_scope_conflicts ();\n \n       /* If stack protection is enabled, we don't share space between\n@@ -2189,7 +2153,10 @@ expand_used_vars (void)\n \t      || (flag_stack_protect == SPCT_FLAG_EXPLICIT\n \t\t  && lookup_attribute (\"stack_protect\",\n \t\t\t\t       DECL_ATTRIBUTES (current_function_decl)))))\n-\tadd_stack_protection_conflicts ();\n+\thas_addressable_vars = add_stack_protection_conflicts ();\n+\n+      if (flag_stack_protect == SPCT_FLAG_STRONG && has_addressable_vars)\n+\tgen_stack_protect_signal = true;\n \n       /* Now that we have collected all stack variables, and have computed a\n \t minimal interference graph, attempt to save some stack space.  */\n@@ -2206,14 +2173,16 @@ expand_used_vars (void)\n \n     case SPCT_FLAG_STRONG:\n       if (gen_stack_protect_signal\n-\t  || cfun->calls_alloca || has_protected_decls\n+\t  || cfun->calls_alloca\n+\t  || has_protected_decls\n \t  || lookup_attribute (\"stack_protect\",\n \t\t\t       DECL_ATTRIBUTES (current_function_decl)))\n \tcreate_stack_guard ();\n       break;\n \n     case SPCT_FLAG_DEFAULT:\n-      if (cfun->calls_alloca || has_protected_decls\n+      if (cfun->calls_alloca\n+\t  || has_protected_decls\n \t  || lookup_attribute (\"stack_protect\",\n \t\t\t       DECL_ATTRIBUTES (current_function_decl)))\n \tcreate_stack_guard ();\n@@ -2224,8 +2193,9 @@ expand_used_vars (void)\n \t\t\t    DECL_ATTRIBUTES (current_function_decl)))\n \tcreate_stack_guard ();\n       break;\n+\n     default:\n-      ;\n+      break;\n     }\n \n   /* Assign rtl to each variable based on these partitions.  */"}, {"sha": "236bed9272477794f3220482c5d7f0d63c07e478", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b24e342cb30abb5c13e3092929837545a5bd49e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b24e342cb30abb5c13e3092929837545a5bd49e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6b24e342cb30abb5c13e3092929837545a5bd49e", "patch": "@@ -13006,9 +13006,12 @@ on Intel Control-flow Enforcement Technology (CET).\n Emit extra code to check for buffer overflows, such as stack smashing\n attacks.  This is done by adding a guard variable to functions with\n vulnerable objects.  This includes functions that call @code{alloca}, and\n-functions with buffers larger than 8 bytes.  The guards are initialized\n-when a function is entered and then checked when the function exits.\n-If a guard check fails, an error message is printed and the program exits.\n+functions with buffers larger than or equal to 8 bytes.  The guards are\n+initialized when a function is entered and then checked when the function\n+exits.  If a guard check fails, an error message is printed and the program\n+exits.  Only variables that are actually allocated on the stack are\n+considered, optimized away variables or variables allocated in registers\n+don't count.\n \n @item -fstack-protector-all\n @opindex fstack-protector-all\n@@ -13018,7 +13021,9 @@ Like @option{-fstack-protector} except that all functions are protected.\n @opindex fstack-protector-strong\n Like @option{-fstack-protector} but includes additional functions to\n be protected --- those that have local array definitions, or have\n-references to local frame addresses.\n+references to local frame addresses.  Only variables that are actually\n+allocated on the stack are considered, optimized away variables or variables\n+allocated in registers don't count.\n \n @item -fstack-protector-explicit\n @opindex fstack-protector-explicit"}, {"sha": "1d520d6a3d2f6c8694204169baa209f898b8bc3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b24e342cb30abb5c13e3092929837545a5bd49e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b24e342cb30abb5c13e3092929837545a5bd49e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b24e342cb30abb5c13e3092929837545a5bd49e", "patch": "@@ -1,3 +1,8 @@\n+2019-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/92825\n+\t* gcc.target/i386/pr92825.c: New test.\n+\n 2019-12-10  Martin Liska  <mliska@suse.cz>\n \n \tPR fortran/92874"}, {"sha": "2c35eac433edf700fe0b9ad480d362ef895fbf42", "filename": "gcc/testsuite/gcc.target/i386/pr92825.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b24e342cb30abb5c13e3092929837545a5bd49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92825.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b24e342cb30abb5c13e3092929837545a5bd49e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92825.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92825.c?ref=6b24e342cb30abb5c13e3092929837545a5bd49e", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/92825 */\n+/* { dg-do compile { target fstack_protector } } */\n+/* { dg-options \"-O2 -fstack-protector-strong\" } */\n+/* { dg-final { scan-assembler-not \"__stack_chk_fail\" } } */\n+\n+int\n+foo (int r, int g, int b)\n+{\n+  union U { int rgba; char p[4]; } u;\n+  u.p[0] = r;\n+  u.p[1] = g;\n+  u.p[2] = b;\n+  u.p[3] = -1;\n+  return u.rgba;\n+}"}]}