{"sha": "a0324f7b5a936736a7280638998ff9d726f0349b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAzMjRmN2I1YTkzNjczNmE3MjgwNjM4OTk4ZmY5ZDcyNmYwMzQ5Yg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-05-04T07:54:06Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-05-04T07:54:06Z"}, "message": "re PR fortran/25071 (dummy argument larger than actual argument)\n\n2007-05-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/25071\n        * interface.c (compare_actual_formal): Check character length.\n\n2007-05-04  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/25071\n        * gfortran.dg/char_length_3.f90: New test.\n        * gfortran.dg/char_result_2.f90: Fix test.\n\nFrom-SVN: r124411", "tree": {"sha": "adfad803ac18d1c689a39bd23f0b027b04b4016d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adfad803ac18d1c689a39bd23f0b027b04b4016d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0324f7b5a936736a7280638998ff9d726f0349b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0324f7b5a936736a7280638998ff9d726f0349b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0324f7b5a936736a7280638998ff9d726f0349b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0324f7b5a936736a7280638998ff9d726f0349b/comments", "author": null, "committer": null, "parents": [{"sha": "916fa4f033247e40c1fc7bad3211427766d3dca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916fa4f033247e40c1fc7bad3211427766d3dca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/916fa4f033247e40c1fc7bad3211427766d3dca3"}], "stats": {"total": 97, "additions": 93, "deletions": 4}, "files": [{"sha": "aa9fb997732bbc91f1fe6d69280faa99b0157873", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0324f7b5a936736a7280638998ff9d726f0349b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0324f7b5a936736a7280638998ff9d726f0349b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a0324f7b5a936736a7280638998ff9d726f0349b", "patch": "@@ -1,6 +1,11 @@\n+2007-05-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/25071\n+\t* interface.c (compare_actual_formal): Check character length.\n+\n 2007-05-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n-        PR fortran/31732\n+\tPR fortran/31732\n \t* dependency.c (gfc_full_array_ref_p):  If the reference is\n \tto a single element, check that the array has a single\n \telement and that the correct element is referenced."}, {"sha": "22a39b5246b4cf7282dbf5b803ce5cacfeb11e0d", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0324f7b5a936736a7280638998ff9d726f0349b/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0324f7b5a936736a7280638998ff9d726f0349b/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=a0324f7b5a936736a7280638998ff9d726f0349b", "patch": "@@ -1369,6 +1369,34 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  return 0;\n \t}\n \n+       if (a->expr->ts.type == BT_CHARACTER\n+\t   && a->expr->ts.cl && a->expr->ts.cl->length\n+\t   && a->expr->ts.cl->length->expr_type == EXPR_CONSTANT\n+\t   && f->sym->ts.cl && f->sym->ts.cl && f->sym->ts.cl->length\n+\t   && f->sym->ts.cl->length->expr_type == EXPR_CONSTANT)\n+\t {\n+\t   if (mpz_cmp (a->expr->ts.cl->length->value.integer,\n+\t\t\tf->sym->ts.cl->length->value.integer) < 0)\n+\t     {\n+\t\tif (where)\n+\t\t  gfc_error (\"Character length of actual argument shorter \"\n+\t\t\t     \"than of dummy argument '%s' at %L\",\n+\t\t\t     f->sym->name, &a->expr->where);\n+\t\treturn 0;\n+\t     }\n+\n+\t   if ((f->sym->attr.pointer || f->sym->attr.allocatable)\n+\t       && (mpz_cmp (a->expr->ts.cl->length->value.integer,\n+\t\t\t   f->sym->ts.cl->length->value.integer) != 0))\n+\t     {\n+\t\tif (where)\n+\t\t  gfc_error (\"Character length mismatch between actual argument \"\n+\t\t\t     \"and pointer or allocatable dummy argument \"\n+\t\t\t     \"'%s' at %L\", f->sym->name, &a->expr->where);\n+\t\treturn 0;\n+\t     }\n+\t }\n+\n       /* Satisfy 12.4.1.2 by ensuring that a procedure actual argument is\n \t provided for a procedure formal argument.  */\n       if (a->expr->ts.type != BT_PROCEDURE"}, {"sha": "c55266ad9a135c68a067b0618eeb97db0fddeb8c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0324f7b5a936736a7280638998ff9d726f0349b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0324f7b5a936736a7280638998ff9d726f0349b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0324f7b5a936736a7280638998ff9d726f0349b", "patch": "@@ -1,3 +1,9 @@\n+2007-05-04  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/25071\n+\t* gfortran.dg/char_length_3.f90: New test.\n+\t* gfortran.dg/char_result_2.f90: Fix test.\n+\n 2007-05-03  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/30565\n@@ -81,7 +87,7 @@\n \n 2007-05-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n-        PR fortran/31732\n+\tPR fortran/31732\n \t* gfortran.dg/array_memset_2:  New test case.\n \n 2007-05-01  Dorit Nuzman  <dorit@il.ibm.com>"}, {"sha": "cee55f65f219048df18c673d4f3adbf496c93643", "filename": "gcc/testsuite/gfortran.dg/char_length_3.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0324f7b5a936736a7280638998ff9d726f0349b/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0324f7b5a936736a7280638998ff9d726f0349b/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_length_3.f90?ref=a0324f7b5a936736a7280638998ff9d726f0349b", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+! PR fortran/25071\n+! Check if actual argument is too short\n+!\n+        program test\n+           implicit none\n+           character(len=10) :: v\n+           character(len=10), target :: x\n+           character(len=20), target :: y\n+           character(len=30), target :: z\n+           character(len=10), pointer :: ptr1\n+           character(len=20), pointer :: ptr2\n+           character(len=30), pointer :: ptr3\n+           character(len=10), allocatable :: alloc1(:)\n+           character(len=20), allocatable :: alloc2(:)\n+           character(len=30), allocatable :: alloc3(:)\n+           call foo(v) ! { dg-error \"actual argument shorter than of dummy\" }\n+           call foo(x) ! { dg-error \"actual argument shorter than of dummy\" }\n+           call foo(y)\n+           call foo(z)\n+           ptr1 => x\n+           call foo(ptr1) ! { dg-error \"actual argument shorter than of dummy\" }\n+           call bar(ptr1) ! { dg-error \"actual argument shorter than of dummy\" }\n+           ptr2 => y\n+           call foo(ptr2)\n+           call bar(ptr2)\n+           ptr3 => z\n+           call foo(ptr3)\n+           call bar(ptr3) ! { dg-error \"Character length mismatch\" }\n+           allocate(alloc1(1))\n+           allocate(alloc2(1))\n+           allocate(alloc3(1))\n+           call arr(alloc1) ! { dg-error \"actual argument shorter than of dummy\" }\n+           call arr(alloc2)\n+           call arr(alloc3) ! { dg-error \"Character length mismatch\" }\n+        contains\n+        subroutine foo(y)\n+           character(len=20) :: y\n+           y = 'hello world'\n+        end subroutine\n+        subroutine bar(y)\n+           character(len=20),pointer :: y\n+           y = 'hello world'\n+        end subroutine\n+        subroutine arr(y)\n+           character(len=20),allocatable :: y(:)\n+           y(1) = 'hello world'\n+        end subroutine\n+       end"}, {"sha": "0df43aa06bca503bba62b0130d9c0b02dba1a415", "filename": "gcc/testsuite/gfortran.dg/char_result_2.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0324f7b5a936736a7280638998ff9d726f0349b/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0324f7b5a936736a7280638998ff9d726f0349b/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_result_2.f90?ref=a0324f7b5a936736a7280638998ff9d726f0349b", "patch": "@@ -42,9 +42,11 @@ end function f2\n   character (len = 80) :: text\n   character (len = 70), target :: textt\n   character (len = 70), pointer :: textp\n+  character (len = 50), pointer :: textp2\n \n   a = 42\n   textp => textt\n+  ! textp2 => textt(1:50) ! needs fixed PR31803\n \n   call test (f1 (textp), 70)\n   call test (f2 (textp, textp), 95)\n@@ -53,7 +55,7 @@ end function f2\n   call test (f5 (textp), 140)\n   call test (f6 (textp), 29)\n \n-  call indirect (textp)\n+  ! call indirect (textp2) ! needs fixed PR31803\n contains\n   function f3 (string)\n     integer, parameter :: l1 = 30\n@@ -93,7 +95,6 @@ subroutine indirect (textp2)\n     call test (f1 (textp2), 50)\n     call test (f2 (textp2, textp), 65)\n     call test (f3 (textp2), 85)\n-    call test (f4 (textp2), 192)\n     call test (f5 (textp2), 100)\n     call test (f6 (textp2), 9)\n   end subroutine indirect"}]}