{"sha": "b160939bf3cd072e1c7a05bbbe221040f7670df2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2MDkzOWJmM2NkMDcyZTFjN2EwNWJiYmUyMjEwNDBmNzY3MGRmMg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2017-06-02T15:03:54Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-06-02T15:03:54Z"}, "message": "[AArch64] Add HF vector modes to lane-to-lane INS pattern\n\n        * config/aarch64/aarch64-simd.md (*aarch64_simd_vec_copy_lane<mode>):\n        Use VALL_F16 iterator rather than VALL.\n\n        * gcc.target/aarch64/hfmode_ins_1.c: New test.\n\nFrom-SVN: r248835", "tree": {"sha": "f3303171cd508a8bbc26bdd003e6c0b98368b77f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3303171cd508a8bbc26bdd003e6c0b98368b77f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b160939bf3cd072e1c7a05bbbe221040f7670df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b160939bf3cd072e1c7a05bbbe221040f7670df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b160939bf3cd072e1c7a05bbbe221040f7670df2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b160939bf3cd072e1c7a05bbbe221040f7670df2/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d65d1bd970c3008e70a6418d2fdaace3f4f2e581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d65d1bd970c3008e70a6418d2fdaace3f4f2e581"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "079f1fd61f091760f0c50dbba36b3ee7f9a3870d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b160939bf3cd072e1c7a05bbbe221040f7670df2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b160939bf3cd072e1c7a05bbbe221040f7670df2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b160939bf3cd072e1c7a05bbbe221040f7670df2", "patch": "@@ -8,6 +8,11 @@\n \n \t* config/vx-common.h (DWARF_UNWIND_INFO): Switch #define to 1.\n \n+2017-06-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_simd_vec_copy_lane<mode>):\n+\tUse VALL_F16 iterator rather than VALL.\n+\n 2017-06-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_split_compare_and_swap):"}, {"sha": "693b476788e94e9b43a40944d66e0693307cea8d", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b160939bf3cd072e1c7a05bbbe221040f7670df2/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b160939bf3cd072e1c7a05bbbe221040f7670df2/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=b160939bf3cd072e1c7a05bbbe221040f7670df2", "patch": "@@ -565,14 +565,14 @@\n )\n \n (define_insn \"*aarch64_simd_vec_copy_lane<mode>\"\n-  [(set (match_operand:VALL 0 \"register_operand\" \"=w\")\n-\t(vec_merge:VALL\n-\t    (vec_duplicate:VALL\n+  [(set (match_operand:VALL_F16 0 \"register_operand\" \"=w\")\n+\t(vec_merge:VALL_F16\n+\t    (vec_duplicate:VALL_F16\n \t      (vec_select:<VEL>\n-\t\t(match_operand:VALL 3 \"register_operand\" \"w\")\n+\t\t(match_operand:VALL_F16 3 \"register_operand\" \"w\")\n \t\t(parallel\n \t\t  [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n-\t    (match_operand:VALL 1 \"register_operand\" \"0\")\n+\t    (match_operand:VALL_F16 1 \"register_operand\" \"0\")\n \t    (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"TARGET_SIMD\"\n   {"}, {"sha": "70a8335d5df66e4a16b32d414ff81376858ca2aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b160939bf3cd072e1c7a05bbbe221040f7670df2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b160939bf3cd072e1c7a05bbbe221040f7670df2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b160939bf3cd072e1c7a05bbbe221040f7670df2", "patch": "@@ -6,6 +6,10 @@\n \t* gcc.target/powerpc/fold-vec-minmax-longlong.c: New.\n \t* gcc.target/powerpc/fold-vec-minmax-short.c: New.\n \n+2017-06-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/hfmode_ins_1.c: New test.\n+\n 2017-06-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/atomic_cmp_exchange_zero_strong_1.c: New test."}, {"sha": "7fafe92f49042b64d24ad4d5219251645da3abfd", "filename": "gcc/testsuite/gcc.target/aarch64/hfmode_ins_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b160939bf3cd072e1c7a05bbbe221040f7670df2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fhfmode_ins_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b160939bf3cd072e1c7a05bbbe221040f7670df2/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fhfmode_ins_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fhfmode_ins_1.c?ref=b160939bf3cd072e1c7a05bbbe221040f7670df2", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Check that we can perform this in a single INS without doing any DUPs.  */\n+\n+#include <arm_neon.h>\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vsetq_lane_f16 (vgetq_lane_f16 (b, 2), a, 3);\n+}\n+\n+float16x4_t\n+bar (float16x4_t a, float16x4_t b)\n+{\n+  return vset_lane_f16 (vget_lane_f16 (b, 2), a, 3);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ins\\\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"dup\\\\t\" } } */"}]}