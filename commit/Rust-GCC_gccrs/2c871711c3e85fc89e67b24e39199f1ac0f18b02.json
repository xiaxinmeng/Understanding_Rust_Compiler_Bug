{"sha": "2c871711c3e85fc89e67b24e39199f1ac0f18b02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4NzE3MTFjM2U4NWZjODllNjdiMjRlMzkxOTlmMWFjMGYxOGIwMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-03T19:02:27Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-03T19:02:27Z"}, "message": "pa.md (fmpyadd peepholes): New peepholes to issue independent floating point multiply and add instructions...\n\n\t* pa.md (fmpyadd peepholes): New peepholes to issue independent\n\tfloating point multiply and add instructions at the same time.\n\t(fmpysub peepholes): Likewise for multiply and subtract instructions.\n\nFrom-SVN: r3069", "tree": {"sha": "42266e9434e60b77edfa9fbe0234cdfcb5f96630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42266e9434e60b77edfa9fbe0234cdfcb5f96630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c871711c3e85fc89e67b24e39199f1ac0f18b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c871711c3e85fc89e67b24e39199f1ac0f18b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c871711c3e85fc89e67b24e39199f1ac0f18b02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c871711c3e85fc89e67b24e39199f1ac0f18b02/comments", "author": null, "committer": null, "parents": [{"sha": "9d32f4a54a6978fe264486c3405ed0f380d1f3f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d32f4a54a6978fe264486c3405ed0f380d1f3f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d32f4a54a6978fe264486c3405ed0f380d1f3f7"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "af805d5cd33de7481ea2599de5da17762cc13d79", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c871711c3e85fc89e67b24e39199f1ac0f18b02/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c871711c3e85fc89e67b24e39199f1ac0f18b02/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=2c871711c3e85fc89e67b24e39199f1ac0f18b02", "patch": "@@ -2532,6 +2532,79 @@\n \t\t\t\t   (const_int 5)))))])\n \n \n+;; The next four peepholes take advantage of the new 5 operand \n+;; fmpy{add,sub} instructions available on 1.1 CPUS.  Basically\n+;; fmpyadd performs a multiply and add/sub of independent operands\n+;; at the same time.  Because the operands must be independent\n+;; combine will not try to combine such insns...  Thus we have\n+;; to use a peephole.\n+(define_peephole\n+  [(set (match_operand 0 \"register_operand\" \"=fx\")\n+\t(mult (match_operand 1 \"register_operand\" \"fx\")\n+\t      (match_operand 2 \"register_operand\" \"fx\")))\n+   (set (match_operand 3 \"register_operand\" \"+fx\")\n+\t(plus (match_operand 4 \"register_operand\" \"fx\")\n+\t      (match_operand 5 \"register_operand\" \"fx\")))]\n+  \"TARGET_SNAKE && fmpyaddoperands (operands)\"\n+  \"*\n+{\n+  if (GET_MODE (operands[0]) == DFmode)\n+    return \\\"fmpyadd,dbl %1,%2,%0,%4,%3\\\";\n+  else\n+    return \\\"fmpyadd,sgl %1,%2,%0,%4,%3\\\";\n+}\")\n+\n+\n+(define_peephole \n+  [(set (match_operand 3 \"register_operand\" \"+fx\")\n+\t(plus (match_operand 4 \"register_operand\" \"fx\")\n+\t      (match_operand 5 \"register_operand\" \"fx\")))\n+   (set (match_operand 0 \"register_operand\" \"=fx\")\n+\t(mult (match_operand 1 \"register_operand\" \"fx\")\n+\t      (match_operand 2 \"register_operand\" \"fx\")))]\n+  \"TARGET_SNAKE && fmpyaddoperands (operands)\"\n+  \"*\n+{\n+  if (GET_MODE (operands[0]) == DFmode)\n+    return \\\"fmpyadd,dbl %1,%2,%0,%4,%3\\\";\n+  else\n+    return \\\"fmpyadd,sgl %1,%2,%0,%4,%3\\\";\n+}\")\n+\n+;; Note fsub subtracts the second operand from the first while fmpysub\n+;; does the opposite for the subtraction operands!\n+(define_peephole\n+  [(set (match_operand 0 \"register_operand\" \"=fx\")\n+\t(mult (match_operand 1 \"register_operand\" \"fx\")\n+\t      (match_operand 2 \"register_operand\" \"fx\")))\n+   (set (match_operand 3 \"register_operand\" \"+fx\")\n+\t(minus (match_operand 4 \"register_operand\" \"fx\")\n+\t       (match_operand 5 \"register_operand\" \"fx\")))]\n+  \"TARGET_SNAKE && fmpysuboperands (operands)\"\n+  \"*\n+{\n+  if (GET_MODE (operands[0]) == DFmode)\n+    return \\\"fmpysub,dbl %1,%2,%0,%5,%3\\\";\n+  else\n+    return \\\"fmpysub,sgl %1,%2,%0,%5,%3\\\";\n+}\")\n+\n+(define_peephole\n+  [(set (match_operand 3 \"register_operand\" \"+fx\")\n+\t(minus (match_operand 4 \"register_operand\" \"fx\")\n+\t       (match_operand 5 \"register_operand\" \"fx\")))\n+   (set (match_operand 0 \"register_operand\" \"=fx\")\n+\t(mult (match_operand 1 \"register_operand\" \"fx\")\n+\t      (match_operand 2 \"register_operand\" \"fx\")))]\n+  \"TARGET_SNAKE && fmpysuboperands (operands)\"\n+  \"*\n+{\n+  if (GET_MODE (operands[0]) == DFmode)\n+    return \\\"fmpysub,dbl %1,%2,%0,%5,%3\\\";\n+  else\n+    return \\\"fmpysub,sgl %1,%2,%0,%5,%3\\\";\n+}\")\n+\n \n ;;- Local variables:\n ;;- mode:emacs-lisp"}]}