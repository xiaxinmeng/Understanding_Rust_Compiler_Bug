{"sha": "4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM4YTViYjg4NWMwY2U0ODA1ZGQ3OGM4ZmQwMDVkYWE1NzYyZGI3Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-08T13:13:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-08T13:13:21Z"}, "message": "[multiple changes]\n\n2009-04-08  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch8.adb: Minor reformatting.\n\tMinor code reorganization.\n\n2009-04-08  Robert Dewar  <dewar@adacore.com>\n\n\t* snames.h, einfo.adb, einfo.ads, sem_prag.adb, snames.adb,\n\tsnames.ads, freeze.adb, par-prag.adb: Add implementation of\n\tpragma Thread_Local_Storage, setting new flag\n\tHas_Pragma_Thread_Local_Storage in corresponding entities.\n\nFrom-SVN: r145725", "tree": {"sha": "f7e398604fe54a518edb2f0df2f4f8041aba00f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7e398604fe54a518edb2f0df2f4f8041aba00f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/comments", "author": null, "committer": null, "parents": [{"sha": "ecc4ddde87a9d5ddbd115e118db5101bd0249437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc4ddde87a9d5ddbd115e118db5101bd0249437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc4ddde87a9d5ddbd115e118db5101bd0249437"}], "stats": {"total": 1238, "additions": 672, "deletions": 566}, "files": [{"sha": "3d661230c6bea32b841ae0036293a4dff430ca7a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "patch": "@@ -1,3 +1,15 @@\n+2009-04-08  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch8.adb: Minor reformatting.\n+\tMinor code reorganization.\n+\n+2009-04-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* snames.h, einfo.adb, einfo.ads, sem_prag.adb, snames.adb,\n+\tsnames.ads, freeze.adb, par-prag.adb: Add implementation of\n+\tpragma Thread_Local_Storage, setting new flag\n+\tHas_Pragma_Thread_Local_Storage in corresponding entities.\n+\n 2009-04-08  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj.ads: Update comment on switches file"}, {"sha": "9baaa3f832a6de372b3ef731288afe3a37a3c6c8", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "patch": "@@ -421,6 +421,7 @@ package body Einfo is\n    --    Debug_Info_Off                  Flag166\n    --    Sec_Stack_Needed_For_Return     Flag167\n    --    Materialize_Entity              Flag168\n+   --    Has_Pragma_Thread_Local_Storage Flag169\n    --    Is_Known_Valid                  Flag170\n \n    --    Is_Hidden_Open_Scope            Flag171\n@@ -1346,6 +1347,11 @@ package body Einfo is\n       return Flag179 (Id);\n    end Has_Pragma_Pure_Function;\n \n+   function Has_Pragma_Thread_Local_Storage (Id : E) return B is\n+   begin\n+      return Flag169 (Id);\n+   end Has_Pragma_Thread_Local_Storage;\n+\n    function Has_Pragma_Unmodified (Id : E) return B is\n    begin\n       return Flag233 (Id);\n@@ -3771,6 +3777,11 @@ package body Einfo is\n       Set_Flag179 (Id, V);\n    end Set_Has_Pragma_Pure_Function;\n \n+   procedure Set_Has_Pragma_Thread_Local_Storage (Id : E; V : B := True) is\n+   begin\n+      Set_Flag169 (Id, V);\n+   end Set_Has_Pragma_Thread_Local_Storage;\n+\n    procedure Set_Has_Pragma_Unmodified (Id : E; V : B := True) is\n    begin\n       Set_Flag233 (Id, V);\n@@ -7516,6 +7527,7 @@ package body Einfo is\n       W (\"Has_Pragma_Preelab_Init\",         Flag221 (Id));\n       W (\"Has_Pragma_Pure\",                 Flag203 (Id));\n       W (\"Has_Pragma_Pure_Function\",        Flag179 (Id));\n+      W (\"Has_Pragma_Thread_Local_Storage\", Flag169 (Id));\n       W (\"Has_Pragma_Unmodified\",           Flag233 (Id));\n       W (\"Has_Pragma_Unreferenced\",         Flag180 (Id));\n       W (\"Has_Pragma_Unreferenced_Objects\", Flag212 (Id));"}, {"sha": "bc2190c9e46d46db12c72def0de57ed14f740d47", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "patch": "@@ -1611,6 +1611,10 @@ package Einfo is\n --       Pure_Function was given for the entity. In some cases, we need to\n --       know that Is_Pure was explicitly set using this pragma.\n \n+--    Has_Pragma_Thread_Local_Storage (Flag169)\n+--       Present in all entities. If set, indicates that a valid pragma\n+--       Thread_Local_Storage was given for the entity.\n+\n --    Has_Pragma_Unmodified (Flag233)\n --       Present in all entities. Can only be set for variables (E_Variable,\n --       E_Out_Parameter, E_In_Out_Parameter). Set if a valid pragma Unmodified\n@@ -4562,6 +4566,7 @@ package Einfo is\n    --    Has_Pragma_Pack                     (Flag121)  (base type only)\n    --    Has_Pragma_Pure                     (Flag203)\n    --    Has_Pragma_Pure_Function            (Flag179)\n+   --    Has_Pragma_Thread_Local_Storage     (Flag169)\n    --    Has_Pragma_Unmodified               (Flag233)\n    --    Has_Pragma_Unreferenced             (Flag180)\n    --    Has_Private_Declaration             (Flag155)\n@@ -5885,6 +5890,7 @@ package Einfo is\n    function Has_Pragma_Preelab_Init             (Id : E) return B;\n    function Has_Pragma_Pure                     (Id : E) return B;\n    function Has_Pragma_Pure_Function            (Id : E) return B;\n+   function Has_Pragma_Thread_Local_Storage     (Id : E) return B;\n    function Has_Pragma_Unmodified               (Id : E) return B;\n    function Has_Pragma_Unreferenced             (Id : E) return B;\n    function Has_Pragma_Unreferenced_Objects     (Id : E) return B;\n@@ -6442,6 +6448,7 @@ package Einfo is\n    procedure Set_Has_Pragma_Preelab_Init         (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Pure                 (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Pure_Function        (Id : E; V : B := True);\n+   procedure Set_Has_Pragma_Thread_Local_Storage (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Unmodified           (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Unreferenced         (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Unreferenced_Objects (Id : E; V : B := True);\n@@ -7089,6 +7096,7 @@ package Einfo is\n    pragma Inline (Has_Pragma_Preelab_Init);\n    pragma Inline (Has_Pragma_Pure);\n    pragma Inline (Has_Pragma_Pure_Function);\n+   pragma Inline (Has_Pragma_Thread_Local_Storage);\n    pragma Inline (Has_Pragma_Unmodified);\n    pragma Inline (Has_Pragma_Unreferenced);\n    pragma Inline (Has_Pragma_Unreferenced_Objects);\n@@ -7514,6 +7522,7 @@ package Einfo is\n    pragma Inline (Set_Has_Pragma_Preelab_Init);\n    pragma Inline (Set_Has_Pragma_Pure);\n    pragma Inline (Set_Has_Pragma_Pure_Function);\n+   pragma Inline (Set_Has_Pragma_Thread_Local_Storage);\n    pragma Inline (Set_Has_Pragma_Unmodified);\n    pragma Inline (Set_Has_Pragma_Unreferenced);\n    pragma Inline (Set_Has_Pragma_Unreferenced_Objects);"}, {"sha": "a26879af35f1ced9f60f889c4a5d080d6fdf41a6", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "patch": "@@ -1436,6 +1436,9 @@ package body Freeze is\n       Formal : Entity_Id;\n       Atype  : Entity_Id;\n \n+      Has_Default_Initialization : Boolean := False;\n+      --  This flag gets set to true for a variable with default initialization\n+\n       procedure Check_Current_Instance (Comp_Decl : Node_Id);\n       --  Check that an Access or Unchecked_Access attribute with a prefix\n       --  which is the current instance type can only be applied when the type\n@@ -2714,10 +2717,39 @@ package body Freeze is\n                       (Needs_Simple_Initialization (Etype (E))\n                         and then not Is_Internal (E)))\n                then\n+                  Has_Default_Initialization := True;\n                   Check_Restriction\n                     (No_Default_Initialization, Declaration_Node (E));\n                end if;\n \n+               --  Check that a Thread_Local_Storage variable does not have\n+               --  default initialization, and any explicit initialization must\n+               --  either be the null constant or a static constant.\n+\n+               if Has_Pragma_Thread_Local_Storage (E) then\n+                  declare\n+                     Decl : constant Node_Id := Declaration_Node (E);\n+                  begin\n+                     if Has_Default_Initialization\n+                       or else\n+                         (Has_Init_Expression (Decl)\n+                            and then\n+                             (No (Expression (Decl))\n+                                or else not\n+                                  (Is_Static_Expression (Expression (Decl))\n+                                     or else\n+                                   Nkind (Expression (Decl)) = N_Null)))\n+                     then\n+                        Error_Msg_NE\n+                          (\"Thread_Local_Storage variable& is \"\n+                           & \"improperly initialized\", Decl, E);\n+                        Error_Msg_NE\n+                          (\"\\only allowed initialization is explicit \"\n+                           & \"NULL or static expression\", Decl, E);\n+                     end if;\n+                  end;\n+               end if;\n+\n                --  For imported objects, set Is_Public unless there is also an\n                --  address clause, which means that there is no external symbol\n                --  needed for the Import (Is_Public may still be set for other"}, {"sha": "5f6ed14b766ab52ae4a53c50fbc2c7c43f8745dc", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "patch": "@@ -1187,6 +1187,7 @@ begin\n            Pragma_Task_Info                     |\n            Pragma_Task_Name                     |\n            Pragma_Task_Storage                  |\n+           Pragma_Thread_Local_Storage          |\n            Pragma_Time_Slice                    |\n            Pragma_Title                         |\n            Pragma_Unchecked_Union               |"}, {"sha": "c7cda58944620309fc9f3e573f6110d278b52bd5", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "patch": "@@ -402,8 +402,8 @@ package body Sem_Ch8 is\n    --  references the package in question.\n \n    procedure Attribute_Renaming (N : Node_Id);\n-   --  Analyze renaming of attribute as function. The renaming declaration N\n-   --  is rewritten as a function body that returns the attribute reference\n+   --  Analyze renaming of attribute as subprogram. The renaming declaration N\n+   --  is rewritten as a subprogram body that returns the attribute reference\n    --  applied to the formals of the function.\n \n    procedure Check_Frozen_Renaming (N : Node_Id; Subp : Entity_Id);\n@@ -2546,9 +2546,9 @@ package body Sem_Ch8 is\n             end if;\n \n          else\n-            --  If the use_type_clause appears in a compilation context,\n+            --  If the use_type_clause appears in a compilation unit context,\n             --  check whether it comes from a unit that may appear in a\n-            --  limited with_clause, for a better error message.\n+            --  limited_with_clause, for a better error message.\n \n             if Nkind (Parent (N)) = N_Compilation_Unit\n               and then Nkind (Id) /= N_Identifier\n@@ -2558,32 +2558,31 @@ package body Sem_Ch8 is\n                   Pref : Node_Id;\n \n                   function Mentioned (Nam : Node_Id) return Boolean;\n-                  --  check whether the prefix of expanded name for the\n-                  --  type appears in the prefix of some limited_with_clause.\n+                  --  Check whether the prefix of expanded name for the type\n+                  --  appears in the prefix of some limited_with_clause.\n+\n+                  ---------------\n+                  -- Mentioned --\n+                  ---------------\n \n                   function Mentioned (Nam : Node_Id) return Boolean is\n                   begin\n-                     if Nkind (Name (Item)) = N_Selected_Component\n-                       and then Chars (Prefix (Name (Item))) = Chars (Nam)\n-                     then\n-                        return True;\n-                     else\n-                        return False;\n-                     end if;\n+                     return Nkind (Name (Item)) = N_Selected_Component\n+                              and then\n+                            Chars (Prefix (Name (Item))) = Chars (Nam);\n                   end Mentioned;\n \n                begin\n                   Pref := Prefix (Id);\n                   Item := First (Context_Items (Parent (N)));\n-                  while Present (Item)\n-                    and then Item /= N\n-                  loop\n+\n+                  while Present (Item) and then Item /= N loop\n                      if Nkind (Item) = N_With_Clause\n                        and then Limited_Present (Item)\n                        and then Mentioned (Pref)\n                      then\n-                        Change_Error_Text (Get_Msg_Id,\n-                           \"premature usage of incomplete type\");\n+                        Change_Error_Text\n+                          (Get_Msg_Id, \"premature usage of incomplete type\");\n                      end if;\n \n                      Next (Item);\n@@ -2650,11 +2649,11 @@ package body Sem_Ch8 is\n    begin\n       Generate_Definition (New_S);\n \n-      --  This procedure is called in the context of subprogram renaming,\n-      --  and thus the attribute must be one that is a subprogram. All of\n-      --  those have at least one formal parameter, with the singular\n-      --  exception of AST_Entry (which is a real oddity, it is odd that\n-      --  this can be renamed at all!)\n+      --  This procedure is called in the context of subprogram renaming, and\n+      --  thus the attribute must be one that is a subprogram. All of those\n+      --  have at least one formal parameter, with the singular exception of\n+      --  AST_Entry (which is a real oddity, it is odd that this can be renamed\n+      --  at all!)\n \n       if not Is_Non_Empty_List (Parameter_Specifications (Spec)) then\n          if Aname /= Name_AST_Entry then\n@@ -2689,22 +2688,22 @@ package body Sem_Ch8 is\n                 Chars => Chars (Defining_Identifier (Param_Spec))));\n \n             --  The expressions in the attribute reference are not freeze\n-            --   points. Neither is the attribute as a whole, see below.\n+            --  points. Neither is the attribute as a whole, see below.\n \n             Set_Must_Not_Freeze (Last (Expr_List));\n             Next (Param_Spec);\n          end loop;\n       end if;\n \n-      --  Immediate error if too many formals. Other mismatches in numbers\n-      --  of number of types of parameters are detected when we analyze the\n-      --  body of the subprogram that we construct.\n+      --  Immediate error if too many formals. Other mismatches in number or\n+      --  types of parameters are detected when we analyze the body of the\n+      --  subprogram that we construct.\n \n       if Form_Num > 2 then\n          Error_Msg_N (\"too many formals for attribute\", N);\n \n-      --  Error if the attribute reference has expressions that look\n-      --  like formal parameters.\n+      --  Error if the attribute reference has expressions that look like\n+      --  formal parameters.\n \n       elsif Present (Expressions (Nam)) then\n          Error_Msg_N (\"illegal expressions in attribute reference\", Nam);\n@@ -2731,10 +2730,10 @@ package body Sem_Ch8 is\n          end if;\n       end if;\n \n-      --  AST_Entry is an odd case. It doesn't really make much sense to\n-      --  allow it to be renamed, but that's the DEC rule, so we have to\n-      --  do it right. The point is that the AST_Entry call should be made\n-      --  now, and what the function will return is the returned value.\n+      --  AST_Entry is an odd case. It doesn't really make much sense to allow\n+      --  it to be renamed, but that's the DEC rule, so we have to do it right.\n+      --  The point is that the AST_Entry call should be made now, and what the\n+      --  function will return is the returned value.\n \n       --  Note that there is no Expr_List in this case anyway\n "}, {"sha": "cee2069a0304c1e17a50a4c3f317e3d267b66879", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "patch": "@@ -11239,6 +11239,42 @@ package body Sem_Prag is\n             end if;\n          end Task_Storage;\n \n+         --------------------------\n+         -- Thread_Local_Storage --\n+         --------------------------\n+\n+         --  pragma Thread_Local_Storage ([Entity =>] LOCAL_NAME);\n+\n+         when Pragma_Thread_Local_Storage => Thread_Local_Storage : declare\n+            Id : Node_Id;\n+            E  : Entity_Id;\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_Arg_Count (1);\n+            Check_Optional_Identifier (Arg1, Name_Entity);\n+            Check_Arg_Is_Local_Name (Arg1);\n+\n+            Id := Expression (Arg1);\n+            Analyze (Id);\n+\n+            if not Is_Entity_Name (Id)\n+              or else Ekind (Entity (Id)) /= E_Variable\n+            then\n+               Error_Pragma_Arg (\"local variable name required\", Arg1);\n+            end if;\n+\n+            E := Entity (Id);\n+\n+            if Rep_Item_Too_Early (E, N)\n+              or else Rep_Item_Too_Late (E, N)\n+            then\n+               raise Pragma_Exit;\n+            end if;\n+\n+            Set_Has_Pragma_Thread_Local_Storage (E);\n+         end Thread_Local_Storage;\n+\n          ----------------\n          -- Time_Slice --\n          ----------------\n@@ -12367,6 +12403,7 @@ package body Sem_Prag is\n       Pragma_Task_Info                     => -1,\n       Pragma_Task_Name                     => -1,\n       Pragma_Task_Storage                  =>  0,\n+      Pragma_Thread_Local_Storage          =>  0,\n       Pragma_Time_Slice                    => -1,\n       Pragma_Title                         => -1,\n       Pragma_Unchecked_Union               =>  0,"}, {"sha": "0617391ba069e1edc62e1f64f25a467c27941105", "filename": "gcc/ada/snames.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "patch": "@@ -327,6 +327,7 @@ package body Snames is\n      \"task_info#\" &\n      \"task_name#\" &\n      \"task_storage#\" &\n+     \"thread_local_storage#\" &\n      \"time_slice#\" &\n      \"title#\" &\n      \"unchecked_union#\" &"}, {"sha": "b5fbeb1fc5b0a24edf677a4d9373e0cfa3097618", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 517, "deletions": 515, "changes": 1032, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "patch": "@@ -523,19 +523,20 @@ package Snames is\n    Name_Task_Info                      : constant Name_Id := N + 266; -- GNAT\n    Name_Task_Name                      : constant Name_Id := N + 267; -- GNAT\n    Name_Task_Storage                   : constant Name_Id := N + 268; -- VMS\n-   Name_Time_Slice                     : constant Name_Id := N + 269; -- GNAT\n-   Name_Title                          : constant Name_Id := N + 270; -- GNAT\n-   Name_Unchecked_Union                : constant Name_Id := N + 271; -- Ada 05\n-   Name_Unimplemented_Unit             : constant Name_Id := N + 272; -- GNAT\n-   Name_Universal_Aliasing             : constant Name_Id := N + 273; -- GNAT\n-   Name_Unmodified                     : constant Name_Id := N + 274; -- GNAT\n-   Name_Unreferenced                   : constant Name_Id := N + 275; -- GNAT\n-   Name_Unreferenced_Objects           : constant Name_Id := N + 276; -- GNAT\n-   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 277; -- GNAT\n-   Name_Volatile                       : constant Name_Id := N + 278;\n-   Name_Volatile_Components            : constant Name_Id := N + 279;\n-   Name_Weak_External                  : constant Name_Id := N + 280; -- GNAT\n-   Last_Pragma_Name                    : constant Name_Id := N + 280;\n+   Name_Thread_Local_Storage           : constant Name_Id := N + 269; -- GNAT\n+   Name_Time_Slice                     : constant Name_Id := N + 270; -- GNAT\n+   Name_Title                          : constant Name_Id := N + 271; -- GNAT\n+   Name_Unchecked_Union                : constant Name_Id := N + 272; -- Ada 05\n+   Name_Unimplemented_Unit             : constant Name_Id := N + 273; -- GNAT\n+   Name_Universal_Aliasing             : constant Name_Id := N + 274; -- GNAT\n+   Name_Unmodified                     : constant Name_Id := N + 275; -- GNAT\n+   Name_Unreferenced                   : constant Name_Id := N + 276; -- GNAT\n+   Name_Unreferenced_Objects           : constant Name_Id := N + 277; -- GNAT\n+   Name_Unreserve_All_Interrupts       : constant Name_Id := N + 278; -- GNAT\n+   Name_Volatile                       : constant Name_Id := N + 279;\n+   Name_Volatile_Components            : constant Name_Id := N + 280;\n+   Name_Weak_External                  : constant Name_Id := N + 281; -- GNAT\n+   Last_Pragma_Name                    : constant Name_Id := N + 281;\n \n    --  Language convention names for pragma Convention/Export/Import/Interface\n    --  Note that Name_C is not included in this list, since it was already\n@@ -546,120 +547,120 @@ package Snames is\n    --  Entry and Protected, this is because these conventions cannot be\n    --  specified by a pragma.\n \n-   First_Convention_Name               : constant Name_Id := N + 281;\n-   Name_Ada                            : constant Name_Id := N + 281;\n-   Name_Assembler                      : constant Name_Id := N + 282;\n-   Name_CIL                            : constant Name_Id := N + 283;\n-   Name_COBOL                          : constant Name_Id := N + 284;\n-   Name_CPP                            : constant Name_Id := N + 285;\n-   Name_Fortran                        : constant Name_Id := N + 286;\n-   Name_Intrinsic                      : constant Name_Id := N + 287;\n-   Name_Java                           : constant Name_Id := N + 288;\n-   Name_Stdcall                        : constant Name_Id := N + 289;\n-   Name_Stubbed                        : constant Name_Id := N + 290;\n-   Last_Convention_Name                : constant Name_Id := N + 290;\n+   First_Convention_Name               : constant Name_Id := N + 282;\n+   Name_Ada                            : constant Name_Id := N + 282;\n+   Name_Assembler                      : constant Name_Id := N + 283;\n+   Name_CIL                            : constant Name_Id := N + 284;\n+   Name_COBOL                          : constant Name_Id := N + 285;\n+   Name_CPP                            : constant Name_Id := N + 286;\n+   Name_Fortran                        : constant Name_Id := N + 287;\n+   Name_Intrinsic                      : constant Name_Id := N + 288;\n+   Name_Java                           : constant Name_Id := N + 289;\n+   Name_Stdcall                        : constant Name_Id := N + 290;\n+   Name_Stubbed                        : constant Name_Id := N + 291;\n+   Last_Convention_Name                : constant Name_Id := N + 291;\n \n    --  The following names are preset as synonyms for Assembler\n \n-   Name_Asm                            : constant Name_Id := N + 291;\n-   Name_Assembly                       : constant Name_Id := N + 292;\n+   Name_Asm                            : constant Name_Id := N + 292;\n+   Name_Assembly                       : constant Name_Id := N + 293;\n \n    --  The following names are preset as synonyms for C\n \n-   Name_Default                        : constant Name_Id := N + 293;\n+   Name_Default                        : constant Name_Id := N + 294;\n    --  Name_External (previously defined as pragma)\n \n    --  The following names are preset as synonyms for CPP\n \n-   Name_C_Plus_Plus                    : constant Name_Id := N + 294;\n+   Name_C_Plus_Plus                    : constant Name_Id := N + 295;\n \n    --  The following names are present as synonyms for Stdcall\n \n-   Name_DLL                            : constant Name_Id := N + 295;\n-   Name_Win32                          : constant Name_Id := N + 296;\n+   Name_DLL                            : constant Name_Id := N + 296;\n+   Name_Win32                          : constant Name_Id := N + 297;\n \n    --  Other special names used in processing pragmas\n \n-   Name_As_Is                          : constant Name_Id := N + 297;\n-   Name_Assertion                      : constant Name_Id := N + 298;\n-   Name_Attribute_Name                 : constant Name_Id := N + 299;\n-   Name_Body_File_Name                 : constant Name_Id := N + 300;\n-   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 301;\n-   Name_Casing                         : constant Name_Id := N + 302;\n-   Name_Code                           : constant Name_Id := N + 303;\n-   Name_Component                      : constant Name_Id := N + 304;\n-   Name_Component_Size_4               : constant Name_Id := N + 305;\n-   Name_Copy                           : constant Name_Id := N + 306;\n-   Name_D_Float                        : constant Name_Id := N + 307;\n-   Name_Descriptor                     : constant Name_Id := N + 308;\n-   Name_Dot_Replacement                : constant Name_Id := N + 309;\n-   Name_Dynamic                        : constant Name_Id := N + 310;\n-   Name_Entity                         : constant Name_Id := N + 311;\n-   Name_Entry_Count                    : constant Name_Id := N + 312;\n-   Name_External_Name                  : constant Name_Id := N + 313;\n-   Name_First_Optional_Parameter       : constant Name_Id := N + 314;\n-   Name_Form                           : constant Name_Id := N + 315;\n-   Name_G_Float                        : constant Name_Id := N + 316;\n-   Name_Gcc                            : constant Name_Id := N + 317;\n-   Name_Gnat                           : constant Name_Id := N + 318;\n-   Name_GPL                            : constant Name_Id := N + 319;\n-   Name_IEEE_Float                     : constant Name_Id := N + 320;\n-   Name_Ignore                         : constant Name_Id := N + 321;\n-   Name_Info                           : constant Name_Id := N + 322;\n-   Name_Internal                       : constant Name_Id := N + 323;\n-   Name_Link_Name                      : constant Name_Id := N + 324;\n-   Name_Lowercase                      : constant Name_Id := N + 325;\n-   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 326;\n-   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 327;\n-   Name_Max_Size                       : constant Name_Id := N + 328;\n-   Name_Mechanism                      : constant Name_Id := N + 329;\n-   Name_Message                        : constant Name_Id := N + 330;\n-   Name_Mixedcase                      : constant Name_Id := N + 331;\n-   Name_Modified_GPL                   : constant Name_Id := N + 332;\n-   Name_Name                           : constant Name_Id := N + 333;\n-   Name_NCA                            : constant Name_Id := N + 334;\n-   Name_No                             : constant Name_Id := N + 335;\n-   Name_No_Dependence                  : constant Name_Id := N + 336;\n-   Name_No_Dynamic_Attachment          : constant Name_Id := N + 337;\n-   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 338;\n-   Name_No_Requeue                     : constant Name_Id := N + 339;\n-   Name_No_Requeue_Statements          : constant Name_Id := N + 340;\n-   Name_No_Task_Attributes             : constant Name_Id := N + 341;\n-   Name_No_Task_Attributes_Package     : constant Name_Id := N + 342;\n-   Name_On                             : constant Name_Id := N + 343;\n-   Name_Parameter_Types                : constant Name_Id := N + 344;\n-   Name_Reference                      : constant Name_Id := N + 345;\n-   Name_Restricted                     : constant Name_Id := N + 346;\n-   Name_Result_Mechanism               : constant Name_Id := N + 347;\n-   Name_Result_Type                    : constant Name_Id := N + 348;\n-   Name_Runtime                        : constant Name_Id := N + 349;\n-   Name_SB                             : constant Name_Id := N + 350;\n-   Name_Secondary_Stack_Size           : constant Name_Id := N + 351;\n-   Name_Section                        : constant Name_Id := N + 352;\n-   Name_Semaphore                      : constant Name_Id := N + 353;\n-   Name_Short_Descriptor               : constant Name_Id := N + 354;\n-   Name_Simple_Barriers                : constant Name_Id := N + 355;\n-   Name_Spec_File_Name                 : constant Name_Id := N + 356;\n-   Name_State                          : constant Name_Id := N + 357;\n-   Name_Static                         : constant Name_Id := N + 358;\n-   Name_Stack_Size                     : constant Name_Id := N + 359;\n-   Name_Subunit_File_Name              : constant Name_Id := N + 360;\n-   Name_Task_Stack_Size_Default        : constant Name_Id := N + 361;\n-   Name_Task_Type                      : constant Name_Id := N + 362;\n-   Name_Time_Slicing_Enabled           : constant Name_Id := N + 363;\n-   Name_Top_Guard                      : constant Name_Id := N + 364;\n-   Name_UBA                            : constant Name_Id := N + 365;\n-   Name_UBS                            : constant Name_Id := N + 366;\n-   Name_UBSB                           : constant Name_Id := N + 367;\n-   Name_Unit_Name                      : constant Name_Id := N + 368;\n-   Name_Unknown                        : constant Name_Id := N + 369;\n-   Name_Unrestricted                   : constant Name_Id := N + 370;\n-   Name_Uppercase                      : constant Name_Id := N + 371;\n-   Name_User                           : constant Name_Id := N + 372;\n-   Name_VAX_Float                      : constant Name_Id := N + 373;\n-   Name_VMS                            : constant Name_Id := N + 374;\n-   Name_Vtable_Ptr                     : constant Name_Id := N + 375;\n-   Name_Working_Storage                : constant Name_Id := N + 376;\n+   Name_As_Is                          : constant Name_Id := N + 298;\n+   Name_Assertion                      : constant Name_Id := N + 299;\n+   Name_Attribute_Name                 : constant Name_Id := N + 300;\n+   Name_Body_File_Name                 : constant Name_Id := N + 301;\n+   Name_Boolean_Entry_Barriers         : constant Name_Id := N + 302;\n+   Name_Casing                         : constant Name_Id := N + 303;\n+   Name_Code                           : constant Name_Id := N + 304;\n+   Name_Component                      : constant Name_Id := N + 305;\n+   Name_Component_Size_4               : constant Name_Id := N + 306;\n+   Name_Copy                           : constant Name_Id := N + 307;\n+   Name_D_Float                        : constant Name_Id := N + 308;\n+   Name_Descriptor                     : constant Name_Id := N + 309;\n+   Name_Dot_Replacement                : constant Name_Id := N + 310;\n+   Name_Dynamic                        : constant Name_Id := N + 311;\n+   Name_Entity                         : constant Name_Id := N + 312;\n+   Name_Entry_Count                    : constant Name_Id := N + 313;\n+   Name_External_Name                  : constant Name_Id := N + 314;\n+   Name_First_Optional_Parameter       : constant Name_Id := N + 315;\n+   Name_Form                           : constant Name_Id := N + 316;\n+   Name_G_Float                        : constant Name_Id := N + 317;\n+   Name_Gcc                            : constant Name_Id := N + 318;\n+   Name_Gnat                           : constant Name_Id := N + 319;\n+   Name_GPL                            : constant Name_Id := N + 320;\n+   Name_IEEE_Float                     : constant Name_Id := N + 321;\n+   Name_Ignore                         : constant Name_Id := N + 322;\n+   Name_Info                           : constant Name_Id := N + 323;\n+   Name_Internal                       : constant Name_Id := N + 324;\n+   Name_Link_Name                      : constant Name_Id := N + 325;\n+   Name_Lowercase                      : constant Name_Id := N + 326;\n+   Name_Max_Entry_Queue_Depth          : constant Name_Id := N + 327;\n+   Name_Max_Entry_Queue_Length         : constant Name_Id := N + 328;\n+   Name_Max_Size                       : constant Name_Id := N + 329;\n+   Name_Mechanism                      : constant Name_Id := N + 330;\n+   Name_Message                        : constant Name_Id := N + 331;\n+   Name_Mixedcase                      : constant Name_Id := N + 332;\n+   Name_Modified_GPL                   : constant Name_Id := N + 333;\n+   Name_Name                           : constant Name_Id := N + 334;\n+   Name_NCA                            : constant Name_Id := N + 335;\n+   Name_No                             : constant Name_Id := N + 336;\n+   Name_No_Dependence                  : constant Name_Id := N + 337;\n+   Name_No_Dynamic_Attachment          : constant Name_Id := N + 338;\n+   Name_No_Dynamic_Interrupts          : constant Name_Id := N + 339;\n+   Name_No_Requeue                     : constant Name_Id := N + 340;\n+   Name_No_Requeue_Statements          : constant Name_Id := N + 341;\n+   Name_No_Task_Attributes             : constant Name_Id := N + 342;\n+   Name_No_Task_Attributes_Package     : constant Name_Id := N + 343;\n+   Name_On                             : constant Name_Id := N + 344;\n+   Name_Parameter_Types                : constant Name_Id := N + 345;\n+   Name_Reference                      : constant Name_Id := N + 346;\n+   Name_Restricted                     : constant Name_Id := N + 347;\n+   Name_Result_Mechanism               : constant Name_Id := N + 348;\n+   Name_Result_Type                    : constant Name_Id := N + 349;\n+   Name_Runtime                        : constant Name_Id := N + 350;\n+   Name_SB                             : constant Name_Id := N + 351;\n+   Name_Secondary_Stack_Size           : constant Name_Id := N + 352;\n+   Name_Section                        : constant Name_Id := N + 353;\n+   Name_Semaphore                      : constant Name_Id := N + 354;\n+   Name_Short_Descriptor               : constant Name_Id := N + 355;\n+   Name_Simple_Barriers                : constant Name_Id := N + 356;\n+   Name_Spec_File_Name                 : constant Name_Id := N + 357;\n+   Name_State                          : constant Name_Id := N + 358;\n+   Name_Static                         : constant Name_Id := N + 359;\n+   Name_Stack_Size                     : constant Name_Id := N + 360;\n+   Name_Subunit_File_Name              : constant Name_Id := N + 361;\n+   Name_Task_Stack_Size_Default        : constant Name_Id := N + 362;\n+   Name_Task_Type                      : constant Name_Id := N + 363;\n+   Name_Time_Slicing_Enabled           : constant Name_Id := N + 364;\n+   Name_Top_Guard                      : constant Name_Id := N + 365;\n+   Name_UBA                            : constant Name_Id := N + 366;\n+   Name_UBS                            : constant Name_Id := N + 367;\n+   Name_UBSB                           : constant Name_Id := N + 368;\n+   Name_Unit_Name                      : constant Name_Id := N + 369;\n+   Name_Unknown                        : constant Name_Id := N + 370;\n+   Name_Unrestricted                   : constant Name_Id := N + 371;\n+   Name_Uppercase                      : constant Name_Id := N + 372;\n+   Name_User                           : constant Name_Id := N + 373;\n+   Name_VAX_Float                      : constant Name_Id := N + 374;\n+   Name_VMS                            : constant Name_Id := N + 375;\n+   Name_Vtable_Ptr                     : constant Name_Id := N + 376;\n+   Name_Working_Storage                : constant Name_Id := N + 377;\n \n    --  Names of recognized attributes. The entries with the comment \"Ada 83\"\n    --  are attributes that are defined in Ada 83, but not in Ada 95. These\n@@ -673,486 +674,486 @@ package Snames is\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n-   First_Attribute_Name                : constant Name_Id := N + 377;\n-   Name_Abort_Signal                   : constant Name_Id := N + 377; -- GNAT\n-   Name_Access                         : constant Name_Id := N + 378;\n-   Name_Address                        : constant Name_Id := N + 379;\n-   Name_Address_Size                   : constant Name_Id := N + 380; -- GNAT\n-   Name_Aft                            : constant Name_Id := N + 381;\n-   Name_Alignment                      : constant Name_Id := N + 382;\n-   Name_Asm_Input                      : constant Name_Id := N + 383; -- GNAT\n-   Name_Asm_Output                     : constant Name_Id := N + 384; -- GNAT\n-   Name_AST_Entry                      : constant Name_Id := N + 385; -- VMS\n-   Name_Bit                            : constant Name_Id := N + 386; -- GNAT\n-   Name_Bit_Order                      : constant Name_Id := N + 387;\n-   Name_Bit_Position                   : constant Name_Id := N + 388; -- GNAT\n-   Name_Body_Version                   : constant Name_Id := N + 389;\n-   Name_Callable                       : constant Name_Id := N + 390;\n-   Name_Caller                         : constant Name_Id := N + 391;\n-   Name_Code_Address                   : constant Name_Id := N + 392; -- GNAT\n-   Name_Component_Size                 : constant Name_Id := N + 393;\n-   Name_Compose                        : constant Name_Id := N + 394;\n-   Name_Constrained                    : constant Name_Id := N + 395;\n-   Name_Count                          : constant Name_Id := N + 396;\n-   Name_Default_Bit_Order              : constant Name_Id := N + 397; -- GNAT\n-   Name_Definite                       : constant Name_Id := N + 398;\n-   Name_Delta                          : constant Name_Id := N + 399;\n-   Name_Denorm                         : constant Name_Id := N + 400;\n-   Name_Digits                         : constant Name_Id := N + 401;\n-   Name_Elaborated                     : constant Name_Id := N + 402; -- GNAT\n-   Name_Emax                           : constant Name_Id := N + 403; -- Ada 83\n-   Name_Enabled                        : constant Name_Id := N + 404; -- GNAT\n-   Name_Enum_Rep                       : constant Name_Id := N + 405; -- GNAT\n-   Name_Enum_Val                       : constant Name_Id := N + 406; -- GNAT\n-   Name_Epsilon                        : constant Name_Id := N + 407; -- Ada 83\n-   Name_Exponent                       : constant Name_Id := N + 408;\n-   Name_External_Tag                   : constant Name_Id := N + 409;\n-   Name_Fast_Math                      : constant Name_Id := N + 410; -- GNAT\n-   Name_First                          : constant Name_Id := N + 411;\n-   Name_First_Bit                      : constant Name_Id := N + 412;\n-   Name_Fixed_Value                    : constant Name_Id := N + 413; -- GNAT\n-   Name_Fore                           : constant Name_Id := N + 414;\n-   Name_Has_Access_Values              : constant Name_Id := N + 415; -- GNAT\n-   Name_Has_Discriminants              : constant Name_Id := N + 416; -- GNAT\n-   Name_Has_Tagged_Values              : constant Name_Id := N + 417; -- GNAT\n-   Name_Identity                       : constant Name_Id := N + 418;\n-   Name_Img                            : constant Name_Id := N + 419; -- GNAT\n-   Name_Integer_Value                  : constant Name_Id := N + 420; -- GNAT\n-   Name_Invalid_Value                  : constant Name_Id := N + 421; -- GNAT\n-   Name_Large                          : constant Name_Id := N + 422; -- Ada 83\n-   Name_Last                           : constant Name_Id := N + 423;\n-   Name_Last_Bit                       : constant Name_Id := N + 424;\n-   Name_Leading_Part                   : constant Name_Id := N + 425;\n-   Name_Length                         : constant Name_Id := N + 426;\n-   Name_Machine_Emax                   : constant Name_Id := N + 427;\n-   Name_Machine_Emin                   : constant Name_Id := N + 428;\n-   Name_Machine_Mantissa               : constant Name_Id := N + 429;\n-   Name_Machine_Overflows              : constant Name_Id := N + 430;\n-   Name_Machine_Radix                  : constant Name_Id := N + 431;\n-   Name_Machine_Rounding               : constant Name_Id := N + 432; -- Ada 05\n-   Name_Machine_Rounds                 : constant Name_Id := N + 433;\n-   Name_Machine_Size                   : constant Name_Id := N + 434; -- GNAT\n-   Name_Mantissa                       : constant Name_Id := N + 435; -- Ada 83\n-   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 436;\n-   Name_Maximum_Alignment              : constant Name_Id := N + 437; -- GNAT\n-   Name_Mechanism_Code                 : constant Name_Id := N + 438; -- GNAT\n-   Name_Mod                            : constant Name_Id := N + 439; -- Ada 05\n-   Name_Model_Emin                     : constant Name_Id := N + 440;\n-   Name_Model_Epsilon                  : constant Name_Id := N + 441;\n-   Name_Model_Mantissa                 : constant Name_Id := N + 442;\n-   Name_Model_Small                    : constant Name_Id := N + 443;\n-   Name_Modulus                        : constant Name_Id := N + 444;\n-   Name_Null_Parameter                 : constant Name_Id := N + 445; -- GNAT\n-   Name_Object_Size                    : constant Name_Id := N + 446; -- GNAT\n-   Name_Old                            : constant Name_Id := N + 447; -- GNAT\n-   Name_Partition_ID                   : constant Name_Id := N + 448;\n-   Name_Passed_By_Reference            : constant Name_Id := N + 449; -- GNAT\n-   Name_Pool_Address                   : constant Name_Id := N + 450;\n-   Name_Pos                            : constant Name_Id := N + 451;\n-   Name_Position                       : constant Name_Id := N + 452;\n-   Name_Priority                       : constant Name_Id := N + 453; -- Ada 05\n-   Name_Range                          : constant Name_Id := N + 454;\n-   Name_Range_Length                   : constant Name_Id := N + 455; -- GNAT\n-   Name_Result                         : constant Name_Id := N + 456; -- GNAT\n-   Name_Round                          : constant Name_Id := N + 457;\n-   Name_Safe_Emax                      : constant Name_Id := N + 458; -- Ada 83\n-   Name_Safe_First                     : constant Name_Id := N + 459;\n-   Name_Safe_Large                     : constant Name_Id := N + 460; -- Ada 83\n-   Name_Safe_Last                      : constant Name_Id := N + 461;\n-   Name_Safe_Small                     : constant Name_Id := N + 462; -- Ada 83\n-   Name_Scale                          : constant Name_Id := N + 463;\n-   Name_Scaling                        : constant Name_Id := N + 464;\n-   Name_Signed_Zeros                   : constant Name_Id := N + 465;\n-   Name_Size                           : constant Name_Id := N + 466;\n-   Name_Small                          : constant Name_Id := N + 467;\n-   Name_Storage_Size                   : constant Name_Id := N + 468;\n-   Name_Storage_Unit                   : constant Name_Id := N + 469; -- GNAT\n-   Name_Stream_Size                    : constant Name_Id := N + 470; -- Ada 05\n-   Name_Tag                            : constant Name_Id := N + 471;\n-   Name_Target_Name                    : constant Name_Id := N + 472; -- GNAT\n-   Name_Terminated                     : constant Name_Id := N + 473;\n-   Name_To_Address                     : constant Name_Id := N + 474; -- GNAT\n-   Name_Type_Class                     : constant Name_Id := N + 475; -- GNAT\n-   Name_UET_Address                    : constant Name_Id := N + 476; -- GNAT\n-   Name_Unbiased_Rounding              : constant Name_Id := N + 477;\n-   Name_Unchecked_Access               : constant Name_Id := N + 478;\n-   Name_Unconstrained_Array            : constant Name_Id := N + 479;\n-   Name_Universal_Literal_String       : constant Name_Id := N + 480; -- GNAT\n-   Name_Unrestricted_Access            : constant Name_Id := N + 481; -- GNAT\n-   Name_VADS_Size                      : constant Name_Id := N + 482; -- GNAT\n-   Name_Val                            : constant Name_Id := N + 483;\n-   Name_Valid                          : constant Name_Id := N + 484;\n-   Name_Value_Size                     : constant Name_Id := N + 485; -- GNAT\n-   Name_Version                        : constant Name_Id := N + 486;\n-   Name_Wchar_T_Size                   : constant Name_Id := N + 487; -- GNAT\n-   Name_Wide_Wide_Width                : constant Name_Id := N + 488; -- Ada 05\n-   Name_Wide_Width                     : constant Name_Id := N + 489;\n-   Name_Width                          : constant Name_Id := N + 490;\n-   Name_Word_Size                      : constant Name_Id := N + 491; -- GNAT\n+   First_Attribute_Name                : constant Name_Id := N + 378;\n+   Name_Abort_Signal                   : constant Name_Id := N + 378; -- GNAT\n+   Name_Access                         : constant Name_Id := N + 379;\n+   Name_Address                        : constant Name_Id := N + 380;\n+   Name_Address_Size                   : constant Name_Id := N + 381; -- GNAT\n+   Name_Aft                            : constant Name_Id := N + 382;\n+   Name_Alignment                      : constant Name_Id := N + 383;\n+   Name_Asm_Input                      : constant Name_Id := N + 384; -- GNAT\n+   Name_Asm_Output                     : constant Name_Id := N + 385; -- GNAT\n+   Name_AST_Entry                      : constant Name_Id := N + 386; -- VMS\n+   Name_Bit                            : constant Name_Id := N + 387; -- GNAT\n+   Name_Bit_Order                      : constant Name_Id := N + 388;\n+   Name_Bit_Position                   : constant Name_Id := N + 389; -- GNAT\n+   Name_Body_Version                   : constant Name_Id := N + 390;\n+   Name_Callable                       : constant Name_Id := N + 391;\n+   Name_Caller                         : constant Name_Id := N + 392;\n+   Name_Code_Address                   : constant Name_Id := N + 393; -- GNAT\n+   Name_Component_Size                 : constant Name_Id := N + 394;\n+   Name_Compose                        : constant Name_Id := N + 395;\n+   Name_Constrained                    : constant Name_Id := N + 396;\n+   Name_Count                          : constant Name_Id := N + 397;\n+   Name_Default_Bit_Order              : constant Name_Id := N + 398; -- GNAT\n+   Name_Definite                       : constant Name_Id := N + 399;\n+   Name_Delta                          : constant Name_Id := N + 400;\n+   Name_Denorm                         : constant Name_Id := N + 401;\n+   Name_Digits                         : constant Name_Id := N + 402;\n+   Name_Elaborated                     : constant Name_Id := N + 403; -- GNAT\n+   Name_Emax                           : constant Name_Id := N + 404; -- Ada 83\n+   Name_Enabled                        : constant Name_Id := N + 405; -- GNAT\n+   Name_Enum_Rep                       : constant Name_Id := N + 406; -- GNAT\n+   Name_Enum_Val                       : constant Name_Id := N + 407; -- GNAT\n+   Name_Epsilon                        : constant Name_Id := N + 408; -- Ada 83\n+   Name_Exponent                       : constant Name_Id := N + 409;\n+   Name_External_Tag                   : constant Name_Id := N + 410;\n+   Name_Fast_Math                      : constant Name_Id := N + 411; -- GNAT\n+   Name_First                          : constant Name_Id := N + 412;\n+   Name_First_Bit                      : constant Name_Id := N + 413;\n+   Name_Fixed_Value                    : constant Name_Id := N + 414; -- GNAT\n+   Name_Fore                           : constant Name_Id := N + 415;\n+   Name_Has_Access_Values              : constant Name_Id := N + 416; -- GNAT\n+   Name_Has_Discriminants              : constant Name_Id := N + 417; -- GNAT\n+   Name_Has_Tagged_Values              : constant Name_Id := N + 418; -- GNAT\n+   Name_Identity                       : constant Name_Id := N + 419;\n+   Name_Img                            : constant Name_Id := N + 420; -- GNAT\n+   Name_Integer_Value                  : constant Name_Id := N + 421; -- GNAT\n+   Name_Invalid_Value                  : constant Name_Id := N + 422; -- GNAT\n+   Name_Large                          : constant Name_Id := N + 423; -- Ada 83\n+   Name_Last                           : constant Name_Id := N + 424;\n+   Name_Last_Bit                       : constant Name_Id := N + 425;\n+   Name_Leading_Part                   : constant Name_Id := N + 426;\n+   Name_Length                         : constant Name_Id := N + 427;\n+   Name_Machine_Emax                   : constant Name_Id := N + 428;\n+   Name_Machine_Emin                   : constant Name_Id := N + 429;\n+   Name_Machine_Mantissa               : constant Name_Id := N + 430;\n+   Name_Machine_Overflows              : constant Name_Id := N + 431;\n+   Name_Machine_Radix                  : constant Name_Id := N + 432;\n+   Name_Machine_Rounding               : constant Name_Id := N + 433; -- Ada 05\n+   Name_Machine_Rounds                 : constant Name_Id := N + 434;\n+   Name_Machine_Size                   : constant Name_Id := N + 435; -- GNAT\n+   Name_Mantissa                       : constant Name_Id := N + 436; -- Ada 83\n+   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 437;\n+   Name_Maximum_Alignment              : constant Name_Id := N + 438; -- GNAT\n+   Name_Mechanism_Code                 : constant Name_Id := N + 439; -- GNAT\n+   Name_Mod                            : constant Name_Id := N + 440; -- Ada 05\n+   Name_Model_Emin                     : constant Name_Id := N + 441;\n+   Name_Model_Epsilon                  : constant Name_Id := N + 442;\n+   Name_Model_Mantissa                 : constant Name_Id := N + 443;\n+   Name_Model_Small                    : constant Name_Id := N + 444;\n+   Name_Modulus                        : constant Name_Id := N + 445;\n+   Name_Null_Parameter                 : constant Name_Id := N + 446; -- GNAT\n+   Name_Object_Size                    : constant Name_Id := N + 447; -- GNAT\n+   Name_Old                            : constant Name_Id := N + 448; -- GNAT\n+   Name_Partition_ID                   : constant Name_Id := N + 449;\n+   Name_Passed_By_Reference            : constant Name_Id := N + 450; -- GNAT\n+   Name_Pool_Address                   : constant Name_Id := N + 451;\n+   Name_Pos                            : constant Name_Id := N + 452;\n+   Name_Position                       : constant Name_Id := N + 453;\n+   Name_Priority                       : constant Name_Id := N + 454; -- Ada 05\n+   Name_Range                          : constant Name_Id := N + 455;\n+   Name_Range_Length                   : constant Name_Id := N + 456; -- GNAT\n+   Name_Result                         : constant Name_Id := N + 457; -- GNAT\n+   Name_Round                          : constant Name_Id := N + 458;\n+   Name_Safe_Emax                      : constant Name_Id := N + 459; -- Ada 83\n+   Name_Safe_First                     : constant Name_Id := N + 460;\n+   Name_Safe_Large                     : constant Name_Id := N + 461; -- Ada 83\n+   Name_Safe_Last                      : constant Name_Id := N + 462;\n+   Name_Safe_Small                     : constant Name_Id := N + 463; -- Ada 83\n+   Name_Scale                          : constant Name_Id := N + 464;\n+   Name_Scaling                        : constant Name_Id := N + 465;\n+   Name_Signed_Zeros                   : constant Name_Id := N + 466;\n+   Name_Size                           : constant Name_Id := N + 467;\n+   Name_Small                          : constant Name_Id := N + 468;\n+   Name_Storage_Size                   : constant Name_Id := N + 469;\n+   Name_Storage_Unit                   : constant Name_Id := N + 470; -- GNAT\n+   Name_Stream_Size                    : constant Name_Id := N + 471; -- Ada 05\n+   Name_Tag                            : constant Name_Id := N + 472;\n+   Name_Target_Name                    : constant Name_Id := N + 473; -- GNAT\n+   Name_Terminated                     : constant Name_Id := N + 474;\n+   Name_To_Address                     : constant Name_Id := N + 475; -- GNAT\n+   Name_Type_Class                     : constant Name_Id := N + 476; -- GNAT\n+   Name_UET_Address                    : constant Name_Id := N + 477; -- GNAT\n+   Name_Unbiased_Rounding              : constant Name_Id := N + 478;\n+   Name_Unchecked_Access               : constant Name_Id := N + 479;\n+   Name_Unconstrained_Array            : constant Name_Id := N + 480;\n+   Name_Universal_Literal_String       : constant Name_Id := N + 481; -- GNAT\n+   Name_Unrestricted_Access            : constant Name_Id := N + 482; -- GNAT\n+   Name_VADS_Size                      : constant Name_Id := N + 483; -- GNAT\n+   Name_Val                            : constant Name_Id := N + 484;\n+   Name_Valid                          : constant Name_Id := N + 485;\n+   Name_Value_Size                     : constant Name_Id := N + 486; -- GNAT\n+   Name_Version                        : constant Name_Id := N + 487;\n+   Name_Wchar_T_Size                   : constant Name_Id := N + 488; -- GNAT\n+   Name_Wide_Wide_Width                : constant Name_Id := N + 489; -- Ada 05\n+   Name_Wide_Width                     : constant Name_Id := N + 490;\n+   Name_Width                          : constant Name_Id := N + 491;\n+   Name_Word_Size                      : constant Name_Id := N + 492; -- GNAT\n \n    --  Attributes that designate attributes returning renamable functions,\n    --  i.e. functions that return other than a universal value and that\n    --  have non-universal arguments.\n \n-   First_Renamable_Function_Attribute  : constant Name_Id := N + 492;\n-   Name_Adjacent                       : constant Name_Id := N + 492;\n-   Name_Ceiling                        : constant Name_Id := N + 493;\n-   Name_Copy_Sign                      : constant Name_Id := N + 494;\n-   Name_Floor                          : constant Name_Id := N + 495;\n-   Name_Fraction                       : constant Name_Id := N + 496;\n-   Name_From_Any                       : constant Name_Id := N + 497; -- GNAT\n-   Name_Image                          : constant Name_Id := N + 498;\n-   Name_Input                          : constant Name_Id := N + 499;\n-   Name_Machine                        : constant Name_Id := N + 500;\n-   Name_Max                            : constant Name_Id := N + 501;\n-   Name_Min                            : constant Name_Id := N + 502;\n-   Name_Model                          : constant Name_Id := N + 503;\n-   Name_Pred                           : constant Name_Id := N + 504;\n-   Name_Remainder                      : constant Name_Id := N + 505;\n-   Name_Rounding                       : constant Name_Id := N + 506;\n-   Name_Succ                           : constant Name_Id := N + 507;\n-   Name_To_Any                         : constant Name_Id := N + 508; -- GNAT\n-   Name_Truncation                     : constant Name_Id := N + 509;\n-   Name_TypeCode                       : constant Name_Id := N + 510; -- GNAT\n-   Name_Value                          : constant Name_Id := N + 511;\n-   Name_Wide_Image                     : constant Name_Id := N + 512;\n-   Name_Wide_Wide_Image                : constant Name_Id := N + 513;\n-   Name_Wide_Value                     : constant Name_Id := N + 514;\n-   Name_Wide_Wide_Value                : constant Name_Id := N + 515;\n-   Last_Renamable_Function_Attribute   : constant Name_Id := N + 515;\n+   First_Renamable_Function_Attribute  : constant Name_Id := N + 493;\n+   Name_Adjacent                       : constant Name_Id := N + 493;\n+   Name_Ceiling                        : constant Name_Id := N + 494;\n+   Name_Copy_Sign                      : constant Name_Id := N + 495;\n+   Name_Floor                          : constant Name_Id := N + 496;\n+   Name_Fraction                       : constant Name_Id := N + 497;\n+   Name_From_Any                       : constant Name_Id := N + 498; -- GNAT\n+   Name_Image                          : constant Name_Id := N + 499;\n+   Name_Input                          : constant Name_Id := N + 500;\n+   Name_Machine                        : constant Name_Id := N + 501;\n+   Name_Max                            : constant Name_Id := N + 502;\n+   Name_Min                            : constant Name_Id := N + 503;\n+   Name_Model                          : constant Name_Id := N + 504;\n+   Name_Pred                           : constant Name_Id := N + 505;\n+   Name_Remainder                      : constant Name_Id := N + 506;\n+   Name_Rounding                       : constant Name_Id := N + 507;\n+   Name_Succ                           : constant Name_Id := N + 508;\n+   Name_To_Any                         : constant Name_Id := N + 509; -- GNAT\n+   Name_Truncation                     : constant Name_Id := N + 510;\n+   Name_TypeCode                       : constant Name_Id := N + 511; -- GNAT\n+   Name_Value                          : constant Name_Id := N + 512;\n+   Name_Wide_Image                     : constant Name_Id := N + 513;\n+   Name_Wide_Wide_Image                : constant Name_Id := N + 514;\n+   Name_Wide_Value                     : constant Name_Id := N + 515;\n+   Name_Wide_Wide_Value                : constant Name_Id := N + 516;\n+   Last_Renamable_Function_Attribute   : constant Name_Id := N + 516;\n \n    --  Attributes that designate procedures\n \n-   First_Procedure_Attribute           : constant Name_Id := N + 516;\n-   Name_Output                         : constant Name_Id := N + 516;\n-   Name_Read                           : constant Name_Id := N + 517;\n-   Name_Write                          : constant Name_Id := N + 518;\n-   Last_Procedure_Attribute            : constant Name_Id := N + 518;\n+   First_Procedure_Attribute           : constant Name_Id := N + 517;\n+   Name_Output                         : constant Name_Id := N + 517;\n+   Name_Read                           : constant Name_Id := N + 518;\n+   Name_Write                          : constant Name_Id := N + 519;\n+   Last_Procedure_Attribute            : constant Name_Id := N + 519;\n \n    --  Remaining attributes are ones that return entities\n \n-   First_Entity_Attribute_Name         : constant Name_Id := N + 519;\n-   Name_Elab_Body                      : constant Name_Id := N + 519; -- GNAT\n-   Name_Elab_Spec                      : constant Name_Id := N + 520; -- GNAT\n-   Name_Storage_Pool                   : constant Name_Id := N + 521;\n+   First_Entity_Attribute_Name         : constant Name_Id := N + 520;\n+   Name_Elab_Body                      : constant Name_Id := N + 520; -- GNAT\n+   Name_Elab_Spec                      : constant Name_Id := N + 521; -- GNAT\n+   Name_Storage_Pool                   : constant Name_Id := N + 522;\n \n    --  These attributes are the ones that return types\n \n-   First_Type_Attribute_Name           : constant Name_Id := N + 522;\n-   Name_Base                           : constant Name_Id := N + 522;\n-   Name_Class                          : constant Name_Id := N + 523;\n-   Name_Stub_Type                      : constant Name_Id := N + 524;\n-   Last_Type_Attribute_Name            : constant Name_Id := N + 524;\n-   Last_Entity_Attribute_Name          : constant Name_Id := N + 524;\n-   Last_Attribute_Name                 : constant Name_Id := N + 524;\n+   First_Type_Attribute_Name           : constant Name_Id := N + 523;\n+   Name_Base                           : constant Name_Id := N + 523;\n+   Name_Class                          : constant Name_Id := N + 524;\n+   Name_Stub_Type                      : constant Name_Id := N + 525;\n+   Last_Type_Attribute_Name            : constant Name_Id := N + 525;\n+   Last_Entity_Attribute_Name          : constant Name_Id := N + 525;\n+   Last_Attribute_Name                 : constant Name_Id := N + 525;\n \n    --  Names of recognized locking policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. C for Ceiling_Locking). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Locking_Policy_Name           : constant Name_Id := N + 525;\n-   Name_Ceiling_Locking                : constant Name_Id := N + 525;\n-   Name_Inheritance_Locking            : constant Name_Id := N + 526;\n-   Last_Locking_Policy_Name            : constant Name_Id := N + 526;\n+   First_Locking_Policy_Name           : constant Name_Id := N + 526;\n+   Name_Ceiling_Locking                : constant Name_Id := N + 526;\n+   Name_Inheritance_Locking            : constant Name_Id := N + 527;\n+   Last_Locking_Policy_Name            : constant Name_Id := N + 527;\n \n    --  Names of recognized queuing policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Queuing). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Queuing_Policy_Name           : constant Name_Id := N + 527;\n-   Name_FIFO_Queuing                   : constant Name_Id := N + 527;\n-   Name_Priority_Queuing               : constant Name_Id := N + 528;\n-   Last_Queuing_Policy_Name            : constant Name_Id := N + 528;\n+   First_Queuing_Policy_Name           : constant Name_Id := N + 528;\n+   Name_FIFO_Queuing                   : constant Name_Id := N + 528;\n+   Name_Priority_Queuing               : constant Name_Id := N + 529;\n+   Last_Queuing_Policy_Name            : constant Name_Id := N + 529;\n \n    --  Names of recognized task dispatching policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Within_Priorities). If new policy names\n    --  are added, the first character must be distinct.\n \n-   First_Task_Dispatching_Policy_Name    : constant Name_Id := N + 529;\n-   Name_EDF_Across_Priorities            : constant Name_Id := N + 529;\n-   Name_FIFO_Within_Priorities           : constant Name_Id := N + 530;\n-   Name_Non_Preemptive_Within_Priorities : constant Name_Id := N + 531;\n-   Name_Round_Robin_Within_Priorities    : constant Name_Id := N + 532;\n-   Last_Task_Dispatching_Policy_Name     : constant Name_Id := N + 532;\n+   First_Task_Dispatching_Policy_Name    : constant Name_Id := N + 530;\n+   Name_EDF_Across_Priorities            : constant Name_Id := N + 530;\n+   Name_FIFO_Within_Priorities           : constant Name_Id := N + 531;\n+   Name_Non_Preemptive_Within_Priorities : constant Name_Id := N + 532;\n+   Name_Round_Robin_Within_Priorities    : constant Name_Id := N + 533;\n+   Last_Task_Dispatching_Policy_Name     : constant Name_Id := N + 533;\n \n    --  Names of recognized checks for pragma Suppress\n \n-   First_Check_Name                    : constant Name_Id := N + 533;\n-   Name_Access_Check                   : constant Name_Id := N + 533;\n-   Name_Accessibility_Check            : constant Name_Id := N + 534;\n-   Name_Alignment_Check                : constant Name_Id := N + 535; -- GNAT\n-   Name_Discriminant_Check             : constant Name_Id := N + 536;\n-   Name_Division_Check                 : constant Name_Id := N + 537;\n-   Name_Elaboration_Check              : constant Name_Id := N + 538;\n-   Name_Index_Check                    : constant Name_Id := N + 539;\n-   Name_Length_Check                   : constant Name_Id := N + 540;\n-   Name_Overflow_Check                 : constant Name_Id := N + 541;\n-   Name_Range_Check                    : constant Name_Id := N + 542;\n-   Name_Storage_Check                  : constant Name_Id := N + 543;\n-   Name_Tag_Check                      : constant Name_Id := N + 544;\n-   Name_Validity_Check                 : constant Name_Id := N + 545; -- GNAT\n-   Name_All_Checks                     : constant Name_Id := N + 546;\n-   Last_Check_Name                     : constant Name_Id := N + 546;\n+   First_Check_Name                    : constant Name_Id := N + 534;\n+   Name_Access_Check                   : constant Name_Id := N + 534;\n+   Name_Accessibility_Check            : constant Name_Id := N + 535;\n+   Name_Alignment_Check                : constant Name_Id := N + 536; -- GNAT\n+   Name_Discriminant_Check             : constant Name_Id := N + 537;\n+   Name_Division_Check                 : constant Name_Id := N + 538;\n+   Name_Elaboration_Check              : constant Name_Id := N + 539;\n+   Name_Index_Check                    : constant Name_Id := N + 540;\n+   Name_Length_Check                   : constant Name_Id := N + 541;\n+   Name_Overflow_Check                 : constant Name_Id := N + 542;\n+   Name_Range_Check                    : constant Name_Id := N + 543;\n+   Name_Storage_Check                  : constant Name_Id := N + 544;\n+   Name_Tag_Check                      : constant Name_Id := N + 545;\n+   Name_Validity_Check                 : constant Name_Id := N + 546; -- GNAT\n+   Name_All_Checks                     : constant Name_Id := N + 547;\n+   Last_Check_Name                     : constant Name_Id := N + 547;\n \n    --  Names corresponding to reserved keywords, excluding those already\n    --  declared in the attribute list (Access, Delta, Digits, Mod, Range).\n \n-   Name_Abort                          : constant Name_Id := N + 547;\n-   Name_Abs                            : constant Name_Id := N + 548;\n-   Name_Accept                         : constant Name_Id := N + 549;\n-   Name_And                            : constant Name_Id := N + 550;\n-   Name_All                            : constant Name_Id := N + 551;\n-   Name_Array                          : constant Name_Id := N + 552;\n-   Name_At                             : constant Name_Id := N + 553;\n-   Name_Begin                          : constant Name_Id := N + 554;\n-   Name_Body                           : constant Name_Id := N + 555;\n-   Name_Case                           : constant Name_Id := N + 556;\n-   Name_Constant                       : constant Name_Id := N + 557;\n-   Name_Declare                        : constant Name_Id := N + 558;\n-   Name_Delay                          : constant Name_Id := N + 559;\n-   Name_Do                             : constant Name_Id := N + 560;\n-   Name_Else                           : constant Name_Id := N + 561;\n-   Name_Elsif                          : constant Name_Id := N + 562;\n-   Name_End                            : constant Name_Id := N + 563;\n-   Name_Entry                          : constant Name_Id := N + 564;\n-   Name_Exception                      : constant Name_Id := N + 565;\n-   Name_Exit                           : constant Name_Id := N + 566;\n-   Name_For                            : constant Name_Id := N + 567;\n-   Name_Function                       : constant Name_Id := N + 568;\n-   Name_Generic                        : constant Name_Id := N + 569;\n-   Name_Goto                           : constant Name_Id := N + 570;\n-   Name_If                             : constant Name_Id := N + 571;\n-   Name_In                             : constant Name_Id := N + 572;\n-   Name_Is                             : constant Name_Id := N + 573;\n-   Name_Limited                        : constant Name_Id := N + 574;\n-   Name_Loop                           : constant Name_Id := N + 575;\n-   Name_New                            : constant Name_Id := N + 576;\n-   Name_Not                            : constant Name_Id := N + 577;\n-   Name_Null                           : constant Name_Id := N + 578;\n-   Name_Of                             : constant Name_Id := N + 579;\n-   Name_Or                             : constant Name_Id := N + 580;\n-   Name_Others                         : constant Name_Id := N + 581;\n-   Name_Out                            : constant Name_Id := N + 582;\n-   Name_Package                        : constant Name_Id := N + 583;\n-   Name_Pragma                         : constant Name_Id := N + 584;\n-   Name_Private                        : constant Name_Id := N + 585;\n-   Name_Procedure                      : constant Name_Id := N + 586;\n-   Name_Raise                          : constant Name_Id := N + 587;\n-   Name_Record                         : constant Name_Id := N + 588;\n-   Name_Rem                            : constant Name_Id := N + 589;\n-   Name_Renames                        : constant Name_Id := N + 590;\n-   Name_Return                         : constant Name_Id := N + 591;\n-   Name_Reverse                        : constant Name_Id := N + 592;\n-   Name_Select                         : constant Name_Id := N + 593;\n-   Name_Separate                       : constant Name_Id := N + 594;\n-   Name_Subtype                        : constant Name_Id := N + 595;\n-   Name_Task                           : constant Name_Id := N + 596;\n-   Name_Terminate                      : constant Name_Id := N + 597;\n-   Name_Then                           : constant Name_Id := N + 598;\n-   Name_Type                           : constant Name_Id := N + 599;\n-   Name_Use                            : constant Name_Id := N + 600;\n-   Name_When                           : constant Name_Id := N + 601;\n-   Name_While                          : constant Name_Id := N + 602;\n-   Name_With                           : constant Name_Id := N + 603;\n-   Name_Xor                            : constant Name_Id := N + 604;\n+   Name_Abort                          : constant Name_Id := N + 548;\n+   Name_Abs                            : constant Name_Id := N + 549;\n+   Name_Accept                         : constant Name_Id := N + 550;\n+   Name_And                            : constant Name_Id := N + 551;\n+   Name_All                            : constant Name_Id := N + 552;\n+   Name_Array                          : constant Name_Id := N + 553;\n+   Name_At                             : constant Name_Id := N + 554;\n+   Name_Begin                          : constant Name_Id := N + 555;\n+   Name_Body                           : constant Name_Id := N + 556;\n+   Name_Case                           : constant Name_Id := N + 557;\n+   Name_Constant                       : constant Name_Id := N + 558;\n+   Name_Declare                        : constant Name_Id := N + 559;\n+   Name_Delay                          : constant Name_Id := N + 560;\n+   Name_Do                             : constant Name_Id := N + 561;\n+   Name_Else                           : constant Name_Id := N + 562;\n+   Name_Elsif                          : constant Name_Id := N + 563;\n+   Name_End                            : constant Name_Id := N + 564;\n+   Name_Entry                          : constant Name_Id := N + 565;\n+   Name_Exception                      : constant Name_Id := N + 566;\n+   Name_Exit                           : constant Name_Id := N + 567;\n+   Name_For                            : constant Name_Id := N + 568;\n+   Name_Function                       : constant Name_Id := N + 569;\n+   Name_Generic                        : constant Name_Id := N + 570;\n+   Name_Goto                           : constant Name_Id := N + 571;\n+   Name_If                             : constant Name_Id := N + 572;\n+   Name_In                             : constant Name_Id := N + 573;\n+   Name_Is                             : constant Name_Id := N + 574;\n+   Name_Limited                        : constant Name_Id := N + 575;\n+   Name_Loop                           : constant Name_Id := N + 576;\n+   Name_New                            : constant Name_Id := N + 577;\n+   Name_Not                            : constant Name_Id := N + 578;\n+   Name_Null                           : constant Name_Id := N + 579;\n+   Name_Of                             : constant Name_Id := N + 580;\n+   Name_Or                             : constant Name_Id := N + 581;\n+   Name_Others                         : constant Name_Id := N + 582;\n+   Name_Out                            : constant Name_Id := N + 583;\n+   Name_Package                        : constant Name_Id := N + 584;\n+   Name_Pragma                         : constant Name_Id := N + 585;\n+   Name_Private                        : constant Name_Id := N + 586;\n+   Name_Procedure                      : constant Name_Id := N + 587;\n+   Name_Raise                          : constant Name_Id := N + 588;\n+   Name_Record                         : constant Name_Id := N + 589;\n+   Name_Rem                            : constant Name_Id := N + 590;\n+   Name_Renames                        : constant Name_Id := N + 591;\n+   Name_Return                         : constant Name_Id := N + 592;\n+   Name_Reverse                        : constant Name_Id := N + 593;\n+   Name_Select                         : constant Name_Id := N + 594;\n+   Name_Separate                       : constant Name_Id := N + 595;\n+   Name_Subtype                        : constant Name_Id := N + 596;\n+   Name_Task                           : constant Name_Id := N + 597;\n+   Name_Terminate                      : constant Name_Id := N + 598;\n+   Name_Then                           : constant Name_Id := N + 599;\n+   Name_Type                           : constant Name_Id := N + 600;\n+   Name_Use                            : constant Name_Id := N + 601;\n+   Name_When                           : constant Name_Id := N + 602;\n+   Name_While                          : constant Name_Id := N + 603;\n+   Name_With                           : constant Name_Id := N + 604;\n+   Name_Xor                            : constant Name_Id := N + 605;\n \n    --  Names of intrinsic subprograms\n \n    --  Note: Asm is missing from this list, since Asm is a legitimate\n    --  convention name. So is To_Address, which is a GNAT attribute.\n \n-   First_Intrinsic_Name                 : constant Name_Id := N + 605;\n-   Name_Divide                          : constant Name_Id := N + 605;\n-   Name_Enclosing_Entity                : constant Name_Id := N + 606;\n-   Name_Exception_Information           : constant Name_Id := N + 607;\n-   Name_Exception_Message               : constant Name_Id := N + 608;\n-   Name_Exception_Name                  : constant Name_Id := N + 609;\n-   Name_File                            : constant Name_Id := N + 610;\n-   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 611;\n-   Name_Import_Address                  : constant Name_Id := N + 612;\n-   Name_Import_Largest_Value            : constant Name_Id := N + 613;\n-   Name_Import_Value                    : constant Name_Id := N + 614;\n-   Name_Is_Negative                     : constant Name_Id := N + 615;\n-   Name_Line                            : constant Name_Id := N + 616;\n-   Name_Rotate_Left                     : constant Name_Id := N + 617;\n-   Name_Rotate_Right                    : constant Name_Id := N + 618;\n-   Name_Shift_Left                      : constant Name_Id := N + 619;\n-   Name_Shift_Right                     : constant Name_Id := N + 620;\n-   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 621;\n-   Name_Source_Location                 : constant Name_Id := N + 622;\n-   Name_Unchecked_Conversion            : constant Name_Id := N + 623;\n-   Name_Unchecked_Deallocation          : constant Name_Id := N + 624;\n-   Name_To_Pointer                      : constant Name_Id := N + 625;\n-   Last_Intrinsic_Name                  : constant Name_Id := N + 625;\n+   First_Intrinsic_Name                 : constant Name_Id := N + 606;\n+   Name_Divide                          : constant Name_Id := N + 606;\n+   Name_Enclosing_Entity                : constant Name_Id := N + 607;\n+   Name_Exception_Information           : constant Name_Id := N + 608;\n+   Name_Exception_Message               : constant Name_Id := N + 609;\n+   Name_Exception_Name                  : constant Name_Id := N + 610;\n+   Name_File                            : constant Name_Id := N + 611;\n+   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 612;\n+   Name_Import_Address                  : constant Name_Id := N + 613;\n+   Name_Import_Largest_Value            : constant Name_Id := N + 614;\n+   Name_Import_Value                    : constant Name_Id := N + 615;\n+   Name_Is_Negative                     : constant Name_Id := N + 616;\n+   Name_Line                            : constant Name_Id := N + 617;\n+   Name_Rotate_Left                     : constant Name_Id := N + 618;\n+   Name_Rotate_Right                    : constant Name_Id := N + 619;\n+   Name_Shift_Left                      : constant Name_Id := N + 620;\n+   Name_Shift_Right                     : constant Name_Id := N + 621;\n+   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 622;\n+   Name_Source_Location                 : constant Name_Id := N + 623;\n+   Name_Unchecked_Conversion            : constant Name_Id := N + 624;\n+   Name_Unchecked_Deallocation          : constant Name_Id := N + 625;\n+   Name_To_Pointer                      : constant Name_Id := N + 626;\n+   Last_Intrinsic_Name                  : constant Name_Id := N + 626;\n \n    --  Names used in processing intrinsic calls\n \n-   Name_Free                           : constant Name_Id := N + 626;\n+   Name_Free                           : constant Name_Id := N + 627;\n \n    --  Reserved words used only in Ada 95\n \n-   First_95_Reserved_Word              : constant Name_Id := N + 627;\n-   Name_Abstract                       : constant Name_Id := N + 627;\n-   Name_Aliased                        : constant Name_Id := N + 628;\n-   Name_Protected                      : constant Name_Id := N + 629;\n-   Name_Until                          : constant Name_Id := N + 630;\n-   Name_Requeue                        : constant Name_Id := N + 631;\n-   Name_Tagged                         : constant Name_Id := N + 632;\n-   Last_95_Reserved_Word               : constant Name_Id := N + 632;\n+   First_95_Reserved_Word              : constant Name_Id := N + 628;\n+   Name_Abstract                       : constant Name_Id := N + 628;\n+   Name_Aliased                        : constant Name_Id := N + 629;\n+   Name_Protected                      : constant Name_Id := N + 630;\n+   Name_Until                          : constant Name_Id := N + 631;\n+   Name_Requeue                        : constant Name_Id := N + 632;\n+   Name_Tagged                         : constant Name_Id := N + 633;\n+   Last_95_Reserved_Word               : constant Name_Id := N + 633;\n \n    subtype Ada_95_Reserved_Words is\n      Name_Id range First_95_Reserved_Word .. Last_95_Reserved_Word;\n \n    --  Miscellaneous names used in semantic checking\n \n-   Name_Raise_Exception                : constant Name_Id := N + 633;\n+   Name_Raise_Exception                : constant Name_Id := N + 634;\n \n    --  Additional reserved words and identifiers used in GNAT Project Files\n    --  Note that Name_External is already previously declared\n \n-   Name_Ada_Roots                      : constant Name_Id := N + 634;\n-   Name_Aggregate                      : constant Name_Id := N + 635;\n-   Name_Archive_Builder                : constant Name_Id := N + 636;\n-   Name_Archive_Builder_Append_Option  : constant Name_Id := N + 637;\n-   Name_Archive_Indexer                : constant Name_Id := N + 638;\n-   Name_Archive_Suffix                 : constant Name_Id := N + 639;\n-   Name_Binder                         : constant Name_Id := N + 640;\n-   Name_Binder_Prefix                  : constant Name_Id := N + 641;\n-   Name_Body_Suffix                    : constant Name_Id := N + 642;\n-   Name_Builder                        : constant Name_Id := N + 643;\n-   Name_Builder_Switches               : constant Name_Id := N + 644;\n-   Name_Compiler                       : constant Name_Id := N + 645;\n-   Name_Compiler_Kind                  : constant Name_Id := N + 646;\n-   Name_Config_Body_File_Name          : constant Name_Id := N + 647;\n-   Name_Config_Body_File_Name_Pattern  : constant Name_Id := N + 648;\n-   Name_Config_File_Switches           : constant Name_Id := N + 649;\n-   Name_Config_File_Unique             : constant Name_Id := N + 650;\n-   Name_Config_Spec_File_Name          : constant Name_Id := N + 651;\n-   Name_Config_Spec_File_Name_Pattern  : constant Name_Id := N + 652;\n-   Name_Configuration                  : constant Name_Id := N + 653;\n-   Name_Cross_Reference                : constant Name_Id := N + 654;\n-   Name_Default_Language               : constant Name_Id := N + 655;\n-   Name_Default_Switches               : constant Name_Id := N + 656;\n-   Name_Dependency_Driver              : constant Name_Id := N + 657;\n-   Name_Dependency_File_Kind           : constant Name_Id := N + 658;\n-   Name_Dependency_Switches            : constant Name_Id := N + 659;\n-   Name_Driver                         : constant Name_Id := N + 660;\n-   Name_Excluded_Source_Dirs           : constant Name_Id := N + 661;\n-   Name_Excluded_Source_Files          : constant Name_Id := N + 662;\n-   Name_Excluded_Source_List_File      : constant Name_Id := N + 663;\n-   Name_Exec_Dir                       : constant Name_Id := N + 664;\n-   Name_Executable                     : constant Name_Id := N + 665;\n-   Name_Executable_Suffix              : constant Name_Id := N + 666;\n-   Name_Extends                        : constant Name_Id := N + 667;\n-   Name_Externally_Built               : constant Name_Id := N + 668;\n-   Name_Finder                         : constant Name_Id := N + 669;\n-   Name_Global_Compilation_Switches    : constant Name_Id := N + 670;\n-   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 671;\n-   Name_Global_Config_File             : constant Name_Id := N + 672;\n-   Name_Gnatls                         : constant Name_Id := N + 673;\n-   Name_Gnatstub                       : constant Name_Id := N + 674;\n-   Name_Implementation                 : constant Name_Id := N + 675;\n-   Name_Implementation_Exceptions      : constant Name_Id := N + 676;\n-   Name_Implementation_Suffix          : constant Name_Id := N + 677;\n-   Name_Include_Switches               : constant Name_Id := N + 678;\n-   Name_Include_Path                   : constant Name_Id := N + 679;\n-   Name_Include_Path_File              : constant Name_Id := N + 680;\n-   Name_Inherit_Source_Path            : constant Name_Id := N + 681;\n-   Name_Language_Kind                  : constant Name_Id := N + 682;\n-   Name_Language_Processing            : constant Name_Id := N + 683;\n-   Name_Languages                      : constant Name_Id := N + 684;\n-   Name_Library                        : constant Name_Id := N + 685;\n-   Name_Library_Ali_Dir                : constant Name_Id := N + 686;\n-   Name_Library_Auto_Init              : constant Name_Id := N + 687;\n-   Name_Library_Auto_Init_Supported    : constant Name_Id := N + 688;\n-   Name_Library_Builder                : constant Name_Id := N + 689;\n-   Name_Library_Dir                    : constant Name_Id := N + 690;\n-   Name_Library_GCC                    : constant Name_Id := N + 691;\n-   Name_Library_Interface              : constant Name_Id := N + 692;\n-   Name_Library_Kind                   : constant Name_Id := N + 693;\n-   Name_Library_Name                   : constant Name_Id := N + 694;\n-   Name_Library_Major_Minor_Id_Supported : constant Name_Id := N + 695;\n-   Name_Library_Options                : constant Name_Id := N + 696;\n-   Name_Library_Partial_Linker         : constant Name_Id := N + 697;\n-   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 698;\n-   Name_Library_Src_Dir                : constant Name_Id := N + 699;\n-   Name_Library_Support                : constant Name_Id := N + 700;\n-   Name_Library_Symbol_File            : constant Name_Id := N + 701;\n-   Name_Library_Symbol_Policy          : constant Name_Id := N + 702;\n-   Name_Library_Version                : constant Name_Id := N + 703;\n-   Name_Library_Version_Switches       : constant Name_Id := N + 704;\n-   Name_Linker                         : constant Name_Id := N + 705;\n-   Name_Linker_Executable_Option       : constant Name_Id := N + 706;\n-   Name_Linker_Lib_Dir_Option          : constant Name_Id := N + 707;\n-   Name_Linker_Lib_Name_Option         : constant Name_Id := N + 708;\n-   Name_Local_Config_File              : constant Name_Id := N + 709;\n-   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 710;\n-   Name_Locally_Removed_Files          : constant Name_Id := N + 711;\n-   Name_Map_File_Option                : constant Name_Id := N + 712;\n-   Name_Mapping_File_Switches          : constant Name_Id := N + 713;\n-   Name_Mapping_Spec_Suffix            : constant Name_Id := N + 714;\n-   Name_Mapping_Body_Suffix            : constant Name_Id := N + 715;\n-   Name_Metrics                        : constant Name_Id := N + 716;\n-   Name_Naming                         : constant Name_Id := N + 717;\n-   Name_Object_Generated               : constant Name_Id := N + 718;\n-   Name_Objects_Linked                 : constant Name_Id := N + 719;\n-   Name_Objects_Path                   : constant Name_Id := N + 720;\n-   Name_Objects_Path_File              : constant Name_Id := N + 721;\n-   Name_Object_Dir                     : constant Name_Id := N + 722;\n-   Name_Path_Syntax                    : constant Name_Id := N + 723;\n-   Name_Pic_Option                     : constant Name_Id := N + 724;\n-   Name_Pretty_Printer                 : constant Name_Id := N + 725;\n-   Name_Prefix                         : constant Name_Id := N + 726;\n-   Name_Project                        : constant Name_Id := N + 727;\n-   Name_Roots                          : constant Name_Id := N + 728;\n-   Name_Required_Switches              : constant Name_Id := N + 729;\n-   Name_Run_Path_Option                : constant Name_Id := N + 730;\n-   Name_Runtime_Project                : constant Name_Id := N + 731;\n-   Name_Shared_Library_Minimum_Switches : constant Name_Id := N + 732;\n-   Name_Shared_Library_Prefix          : constant Name_Id := N + 733;\n-   Name_Shared_Library_Suffix          : constant Name_Id := N + 734;\n-   Name_Separate_Suffix                : constant Name_Id := N + 735;\n-   Name_Source_Dirs                    : constant Name_Id := N + 736;\n-   Name_Source_Files                   : constant Name_Id := N + 737;\n-   Name_Source_List_File               : constant Name_Id := N + 738;\n-   Name_Spec                           : constant Name_Id := N + 739;\n-   Name_Spec_Suffix                    : constant Name_Id := N + 740;\n-   Name_Specification                  : constant Name_Id := N + 741;\n-   Name_Specification_Exceptions       : constant Name_Id := N + 742;\n-   Name_Specification_Suffix           : constant Name_Id := N + 743;\n-   Name_Stack                          : constant Name_Id := N + 744;\n-   Name_Switches                       : constant Name_Id := N + 745;\n-   Name_Symbolic_Link_Supported        : constant Name_Id := N + 746;\n-   Name_Sync                           : constant Name_Id := N + 747;\n-   Name_Synchronize                    : constant Name_Id := N + 748;\n-   Name_Toolchain_Description          : constant Name_Id := N + 749;\n-   Name_Toolchain_Version              : constant Name_Id := N + 750;\n-   Name_Runtime_Library_Dir            : constant Name_Id := N + 751;\n+   Name_Ada_Roots                      : constant Name_Id := N + 635;\n+   Name_Aggregate                      : constant Name_Id := N + 636;\n+   Name_Archive_Builder                : constant Name_Id := N + 637;\n+   Name_Archive_Builder_Append_Option  : constant Name_Id := N + 638;\n+   Name_Archive_Indexer                : constant Name_Id := N + 639;\n+   Name_Archive_Suffix                 : constant Name_Id := N + 640;\n+   Name_Binder                         : constant Name_Id := N + 641;\n+   Name_Binder_Prefix                  : constant Name_Id := N + 642;\n+   Name_Body_Suffix                    : constant Name_Id := N + 643;\n+   Name_Builder                        : constant Name_Id := N + 644;\n+   Name_Builder_Switches               : constant Name_Id := N + 645;\n+   Name_Compiler                       : constant Name_Id := N + 646;\n+   Name_Compiler_Kind                  : constant Name_Id := N + 647;\n+   Name_Config_Body_File_Name          : constant Name_Id := N + 648;\n+   Name_Config_Body_File_Name_Pattern  : constant Name_Id := N + 649;\n+   Name_Config_File_Switches           : constant Name_Id := N + 650;\n+   Name_Config_File_Unique             : constant Name_Id := N + 651;\n+   Name_Config_Spec_File_Name          : constant Name_Id := N + 652;\n+   Name_Config_Spec_File_Name_Pattern  : constant Name_Id := N + 653;\n+   Name_Configuration                  : constant Name_Id := N + 654;\n+   Name_Cross_Reference                : constant Name_Id := N + 655;\n+   Name_Default_Language               : constant Name_Id := N + 656;\n+   Name_Default_Switches               : constant Name_Id := N + 657;\n+   Name_Dependency_Driver              : constant Name_Id := N + 658;\n+   Name_Dependency_File_Kind           : constant Name_Id := N + 659;\n+   Name_Dependency_Switches            : constant Name_Id := N + 660;\n+   Name_Driver                         : constant Name_Id := N + 661;\n+   Name_Excluded_Source_Dirs           : constant Name_Id := N + 662;\n+   Name_Excluded_Source_Files          : constant Name_Id := N + 663;\n+   Name_Excluded_Source_List_File      : constant Name_Id := N + 664;\n+   Name_Exec_Dir                       : constant Name_Id := N + 665;\n+   Name_Executable                     : constant Name_Id := N + 666;\n+   Name_Executable_Suffix              : constant Name_Id := N + 667;\n+   Name_Extends                        : constant Name_Id := N + 668;\n+   Name_Externally_Built               : constant Name_Id := N + 669;\n+   Name_Finder                         : constant Name_Id := N + 670;\n+   Name_Global_Compilation_Switches    : constant Name_Id := N + 671;\n+   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 672;\n+   Name_Global_Config_File             : constant Name_Id := N + 673;\n+   Name_Gnatls                         : constant Name_Id := N + 674;\n+   Name_Gnatstub                       : constant Name_Id := N + 675;\n+   Name_Implementation                 : constant Name_Id := N + 676;\n+   Name_Implementation_Exceptions      : constant Name_Id := N + 677;\n+   Name_Implementation_Suffix          : constant Name_Id := N + 678;\n+   Name_Include_Switches               : constant Name_Id := N + 679;\n+   Name_Include_Path                   : constant Name_Id := N + 680;\n+   Name_Include_Path_File              : constant Name_Id := N + 681;\n+   Name_Inherit_Source_Path            : constant Name_Id := N + 682;\n+   Name_Language_Kind                  : constant Name_Id := N + 683;\n+   Name_Language_Processing            : constant Name_Id := N + 684;\n+   Name_Languages                      : constant Name_Id := N + 685;\n+   Name_Library                        : constant Name_Id := N + 686;\n+   Name_Library_Ali_Dir                : constant Name_Id := N + 687;\n+   Name_Library_Auto_Init              : constant Name_Id := N + 688;\n+   Name_Library_Auto_Init_Supported    : constant Name_Id := N + 689;\n+   Name_Library_Builder                : constant Name_Id := N + 690;\n+   Name_Library_Dir                    : constant Name_Id := N + 691;\n+   Name_Library_GCC                    : constant Name_Id := N + 692;\n+   Name_Library_Interface              : constant Name_Id := N + 693;\n+   Name_Library_Kind                   : constant Name_Id := N + 694;\n+   Name_Library_Name                   : constant Name_Id := N + 695;\n+   Name_Library_Major_Minor_Id_Supported : constant Name_Id := N + 696;\n+   Name_Library_Options                : constant Name_Id := N + 697;\n+   Name_Library_Partial_Linker         : constant Name_Id := N + 698;\n+   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 699;\n+   Name_Library_Src_Dir                : constant Name_Id := N + 700;\n+   Name_Library_Support                : constant Name_Id := N + 701;\n+   Name_Library_Symbol_File            : constant Name_Id := N + 702;\n+   Name_Library_Symbol_Policy          : constant Name_Id := N + 703;\n+   Name_Library_Version                : constant Name_Id := N + 704;\n+   Name_Library_Version_Switches       : constant Name_Id := N + 705;\n+   Name_Linker                         : constant Name_Id := N + 706;\n+   Name_Linker_Executable_Option       : constant Name_Id := N + 707;\n+   Name_Linker_Lib_Dir_Option          : constant Name_Id := N + 708;\n+   Name_Linker_Lib_Name_Option         : constant Name_Id := N + 709;\n+   Name_Local_Config_File              : constant Name_Id := N + 710;\n+   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 711;\n+   Name_Locally_Removed_Files          : constant Name_Id := N + 712;\n+   Name_Map_File_Option                : constant Name_Id := N + 713;\n+   Name_Mapping_File_Switches          : constant Name_Id := N + 714;\n+   Name_Mapping_Spec_Suffix            : constant Name_Id := N + 715;\n+   Name_Mapping_Body_Suffix            : constant Name_Id := N + 716;\n+   Name_Metrics                        : constant Name_Id := N + 717;\n+   Name_Naming                         : constant Name_Id := N + 718;\n+   Name_Object_Generated               : constant Name_Id := N + 719;\n+   Name_Objects_Linked                 : constant Name_Id := N + 720;\n+   Name_Objects_Path                   : constant Name_Id := N + 721;\n+   Name_Objects_Path_File              : constant Name_Id := N + 722;\n+   Name_Object_Dir                     : constant Name_Id := N + 723;\n+   Name_Path_Syntax                    : constant Name_Id := N + 724;\n+   Name_Pic_Option                     : constant Name_Id := N + 725;\n+   Name_Pretty_Printer                 : constant Name_Id := N + 726;\n+   Name_Prefix                         : constant Name_Id := N + 727;\n+   Name_Project                        : constant Name_Id := N + 728;\n+   Name_Roots                          : constant Name_Id := N + 729;\n+   Name_Required_Switches              : constant Name_Id := N + 730;\n+   Name_Run_Path_Option                : constant Name_Id := N + 731;\n+   Name_Runtime_Project                : constant Name_Id := N + 732;\n+   Name_Shared_Library_Minimum_Switches : constant Name_Id := N + 733;\n+   Name_Shared_Library_Prefix          : constant Name_Id := N + 734;\n+   Name_Shared_Library_Suffix          : constant Name_Id := N + 735;\n+   Name_Separate_Suffix                : constant Name_Id := N + 736;\n+   Name_Source_Dirs                    : constant Name_Id := N + 737;\n+   Name_Source_Files                   : constant Name_Id := N + 738;\n+   Name_Source_List_File               : constant Name_Id := N + 739;\n+   Name_Spec                           : constant Name_Id := N + 740;\n+   Name_Spec_Suffix                    : constant Name_Id := N + 741;\n+   Name_Specification                  : constant Name_Id := N + 742;\n+   Name_Specification_Exceptions       : constant Name_Id := N + 743;\n+   Name_Specification_Suffix           : constant Name_Id := N + 744;\n+   Name_Stack                          : constant Name_Id := N + 745;\n+   Name_Switches                       : constant Name_Id := N + 746;\n+   Name_Symbolic_Link_Supported        : constant Name_Id := N + 747;\n+   Name_Sync                           : constant Name_Id := N + 748;\n+   Name_Synchronize                    : constant Name_Id := N + 749;\n+   Name_Toolchain_Description          : constant Name_Id := N + 750;\n+   Name_Toolchain_Version              : constant Name_Id := N + 751;\n+   Name_Runtime_Library_Dir            : constant Name_Id := N + 752;\n \n    --  Other miscellaneous names used in front end\n \n-   Name_Unaligned_Valid                : constant Name_Id := N + 752;\n+   Name_Unaligned_Valid                : constant Name_Id := N + 753;\n \n    --  Ada 2005 reserved words\n \n-   First_2005_Reserved_Word            : constant Name_Id := N + 753;\n-   Name_Interface                      : constant Name_Id := N + 753;\n-   Name_Overriding                     : constant Name_Id := N + 754;\n-   Name_Synchronized                   : constant Name_Id := N + 755;\n-   Last_2005_Reserved_Word             : constant Name_Id := N + 755;\n+   First_2005_Reserved_Word            : constant Name_Id := N + 754;\n+   Name_Interface                      : constant Name_Id := N + 754;\n+   Name_Overriding                     : constant Name_Id := N + 755;\n+   Name_Synchronized                   : constant Name_Id := N + 756;\n+   Last_2005_Reserved_Word             : constant Name_Id := N + 756;\n \n    subtype Ada_2005_Reserved_Words is\n      Name_Id range First_2005_Reserved_Word .. Last_2005_Reserved_Word;\n \n    --  Mark last defined name for consistency check in Snames body\n \n-   Last_Predefined_Name                : constant Name_Id := N + 755;\n+   Last_Predefined_Name                : constant Name_Id := N + 756;\n \n    ---------------------------------------\n    -- Subtypes Defining Name Categories --\n@@ -1546,6 +1547,7 @@ package Snames is\n       Pragma_Task_Info,\n       Pragma_Task_Name,\n       Pragma_Task_Storage,\n+      Pragma_Thread_Local_Storage,\n       Pragma_Time_Slice,\n       Pragma_Title,\n       Pragma_Unchecked_Union,"}, {"sha": "5ac699df65cd4e82e250c7a18c509d14d6c01d93", "filename": "gcc/ada/snames.h", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fsnames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8a5bb885c0ce4805dd78c8fd005daa5762db72/gcc%2Fada%2Fsnames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.h?ref=4c8a5bb885c0ce4805dd78c8fd005daa5762db72", "patch": "@@ -377,23 +377,24 @@ extern unsigned char Get_Pragma_Id (int);\n #define  Pragma_Task_Info                     150\n #define  Pragma_Task_Name                     151\n #define  Pragma_Task_Storage                  152\n-#define  Pragma_Time_Slice                    153\n-#define  Pragma_Title                         154\n-#define  Pragma_Unchecked_Union               155\n-#define  Pragma_Unimplemented_Unit            156\n-#define  Pragma_Universal_Aliasing            157\n-#define  Pragma_Unmodified                    158\n-#define  Pragma_Unreferenced                  159\n-#define  Pragma_Unreferenced_Objects          160\n-#define  Pragma_Unreserve_All_Interrupts      161\n-#define  Pragma_Volatile                      162\n-#define  Pragma_Volatile_Components           163\n-#define  Pragma_Weak_External                 164\n-#define  Pragma_AST_Entry                     165\n-#define  Pragma_Fast_Math                     166\n-#define  Pragma_Interface                     167\n-#define  Pragma_Priority                      168\n-#define  Pragma_Storage_Size                  169\n-#define  Pragma_Storage_Unit                  170\n+#define  Pragma_Thread_Local_Storage          153\n+#define  Pragma_Time_Slice                    154\n+#define  Pragma_Title                         155\n+#define  Pragma_Unchecked_Union               156\n+#define  Pragma_Unimplemented_Unit            157\n+#define  Pragma_Universal_Aliasing            158\n+#define  Pragma_Unmodified                    159\n+#define  Pragma_Unreferenced                  160\n+#define  Pragma_Unreferenced_Objects          161\n+#define  Pragma_Unreserve_All_Interrupts      162\n+#define  Pragma_Volatile                      163\n+#define  Pragma_Volatile_Components           164\n+#define  Pragma_Weak_External                 165\n+#define  Pragma_AST_Entry                     166\n+#define  Pragma_Fast_Math                     167\n+#define  Pragma_Interface                     168\n+#define  Pragma_Priority                      169\n+#define  Pragma_Storage_Size                  170\n+#define  Pragma_Storage_Unit                  171\n \n /* End of snames.h (C version of Snames package spec) */"}]}