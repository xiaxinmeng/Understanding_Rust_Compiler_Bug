{"sha": "027faee730c5517d1e9b232146a0435953633781", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI3ZmFlZTczMGM1NTE3ZDFlOWIyMzIxNDZhMDQzNTk1MzYzMzc4MQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2003-01-15T10:53:22Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-01-15T10:53:22Z"}, "message": "configure.in (libgcc_visibility): Force disabled on IRIX 6 too.\n\n* configure.in (libgcc_visibility): Force disabled on IRIX 6 too.\n* configure: Rebuilt.\n\nFrom-SVN: r61323", "tree": {"sha": "95ac38c1ad06de5a10aba730b696e8bbbd621191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95ac38c1ad06de5a10aba730b696e8bbbd621191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/027faee730c5517d1e9b232146a0435953633781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/027faee730c5517d1e9b232146a0435953633781", "html_url": "https://github.com/Rust-GCC/gccrs/commit/027faee730c5517d1e9b232146a0435953633781", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/027faee730c5517d1e9b232146a0435953633781/comments", "author": null, "committer": null, "parents": [{"sha": "077dab3b42f3fa59a1bf227a7a2041adab8ef3f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/077dab3b42f3fa59a1bf227a7a2041adab8ef3f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/077dab3b42f3fa59a1bf227a7a2041adab8ef3f5"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "6cc15b05e6409a1b63cb4b4c496aae006d93bbb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027faee730c5517d1e9b232146a0435953633781/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027faee730c5517d1e9b232146a0435953633781/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=027faee730c5517d1e9b232146a0435953633781", "patch": "@@ -1,3 +1,8 @@\n+2003-01-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* configure.in (libgcc_visibility): Force disabled on IRIX 6 too.\n+\t* configure: Rebuilt.\n+\n 2003-01-15  Hartmut Penner  <hpenner@de.ibm.com>\n \n \t* config/s390/s390.c (s390_safe_attr_type): New function."}, {"sha": "bdfc30bdd977fcf84a50b5511a7b7954fc163afa", "filename": "gcc/configure", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027faee730c5517d1e9b232146a0435953633781/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027faee730c5517d1e9b232146a0435953633781/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=027faee730c5517d1e9b232146a0435953633781", "patch": "@@ -7585,18 +7585,22 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_hidden\" 1>&6\n libgcc_visibility=$gcc_cv_as_hidden\n case \"$target\" in\n-  mips-sgi-irix6*o32)\n+  mips-sgi-irix6*)\n     if test x\"$gnu_ld_flag\" = x\"no\"; then\n       # Even if using gas with .hidden support, the resulting object files\n-      # cannot be linked with the IRIX 6 O32 linker.\n+      # cannot be linked with the IRIX 6 O32 linker.  With the N32 and\n+      # N64 linkers, the problem is that the linker refuses to accept\n+      # -call_shared (passed by default to the linker) and -r (used to\n+      # link the object file generated without .hidden directives with\n+      # one that hides symbols), so we also lose.\n       libgcc_visibility=no\n     fi\n     ;;\n esac\n \n \n echo $ac_n \"checking assembler leb128 support\"\"... $ac_c\" 1>&6\n-echo \"configure:7600: checking assembler leb128 support\" >&5\n+echo \"configure:7604: checking assembler leb128 support\" >&5\n gcc_cv_as_leb128=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 11 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7641,7 +7645,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_leb128\" 1>&6\n \n echo $ac_n \"checking assembler eh_frame optimization\"\"... $ac_c\" 1>&6\n-echo \"configure:7645: checking assembler eh_frame optimization\" >&5\n+echo \"configure:7649: checking assembler eh_frame optimization\" >&5\n gcc_cv_as_eh_frame=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 12 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7722,7 +7726,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_eh_frame\" 1>&6\n \n echo $ac_n \"checking assembler section merging support\"\"... $ac_c\" 1>&6\n-echo \"configure:7726: checking assembler section merging support\" >&5\n+echo \"configure:7730: checking assembler section merging support\" >&5\n gcc_cv_as_shf_merge=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 12 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7745,7 +7749,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_shf_merge\" 1>&6\n \n echo $ac_n \"checking assembler thread-local storage support\"\"... $ac_c\" 1>&6\n-echo \"configure:7749: checking assembler thread-local storage support\" >&5\n+echo \"configure:7753: checking assembler thread-local storage support\" >&5\n gcc_cv_as_tls=no\n conftest_s=\n tls_first_major=\n@@ -7853,7 +7857,7 @@ case \"$target\" in\n   # All TARGET_ABI_OSF targets.\n   alpha*-*-osf* | alpha*-*-linux* | alpha*-*-*bsd*)\n     echo $ac_n \"checking assembler supports explicit relocations\"\"... $ac_c\" 1>&6\n-echo \"configure:7857: checking assembler supports explicit relocations\" >&5\n+echo \"configure:7861: checking assembler supports explicit relocations\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_explicit_relocs'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7903,7 +7907,7 @@ EOF\n     ;;\n   sparc*-*-*)\n     echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6\n-echo \"configure:7907: checking assembler .register pseudo-op support\" >&5\n+echo \"configure:7911: checking assembler .register pseudo-op support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_register_pseudo_op'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7931,7 +7935,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler supports -relax\"\"... $ac_c\" 1>&6\n-echo \"configure:7935: checking assembler supports -relax\" >&5\n+echo \"configure:7939: checking assembler supports -relax\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_relax_opt'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7959,7 +7963,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler and linker support unaligned pc related relocs\"\"... $ac_c\" 1>&6\n-echo \"configure:7963: checking assembler and linker support unaligned pc related relocs\" >&5\n+echo \"configure:7967: checking assembler and linker support unaligned pc related relocs\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_sparc_ua_pcrel'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7986,7 +7990,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler and linker support unaligned pc related relocs against hidden symbols\"\"... $ac_c\" 1>&6\n-echo \"configure:7990: checking assembler and linker support unaligned pc related relocs against hidden symbols\" >&5\n+echo \"configure:7994: checking assembler and linker support unaligned pc related relocs against hidden symbols\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_sparc_ua_pcrel_hidden'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -8026,7 +8030,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:8030: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:8034: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -8065,7 +8069,7 @@ EOF\n \n   i[34567]86-*-* | x86_64-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:8069: checking assembler instructions\" >&5\n+echo \"configure:8073: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -8092,7 +8096,7 @@ EOF\n     echo \"$ac_t\"\"$gcc_cv_as_instructions\" 1>&6\n \n     echo $ac_n \"checking assembler GOTOFF in data directives\"\"... $ac_c\" 1>&6\n-echo \"configure:8096: checking assembler GOTOFF in data directives\" >&5\n+echo \"configure:8100: checking assembler GOTOFF in data directives\" >&5\n     gcc_cv_as_gotoff_in_data=no\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x\n     then\n@@ -8122,7 +8126,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:8126: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:8130: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -8179,7 +8183,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_dwarf2_debug_line\" 1>&6\n \n echo $ac_n \"checking assembler --gdwarf2 support\"\"... $ac_c\" 1>&6\n-echo \"configure:8183: checking assembler --gdwarf2 support\" >&5\n+echo \"configure:8187: checking assembler --gdwarf2 support\" >&5\n gcc_cv_as_gdwarf2_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -8208,7 +8212,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gdwarf2_flag\" 1>&6\n \n echo $ac_n \"checking assembler --gstabs support\"\"... $ac_c\" 1>&6\n-echo \"configure:8212: checking assembler --gstabs support\" >&5\n+echo \"configure:8216: checking assembler --gstabs support\" >&5\n gcc_cv_as_gstabs_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -8236,7 +8240,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gstabs_flag\" 1>&6\n \n echo $ac_n \"checking linker read-only and read-write section mixing\"\"... $ac_c\" 1>&6\n-echo \"configure:8240: checking linker read-only and read-write section mixing\" >&5\n+echo \"configure:8244: checking linker read-only and read-write section mixing\" >&5\n gcc_cv_ld_ro_rw_mix=unknown\n if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n   if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 10 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n@@ -8274,7 +8278,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_ld_ro_rw_mix\" 1>&6\n \n echo $ac_n \"checking linker PT_GNU_EH_FRAME support\"\"... $ac_c\" 1>&6\n-echo \"configure:8278: checking linker PT_GNU_EH_FRAME support\" >&5\n+echo \"configure:8282: checking linker PT_GNU_EH_FRAME support\" >&5\n gcc_cv_ld_eh_frame_hdr=no\n if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n   if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 12 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n@@ -8298,7 +8302,7 @@ echo \"$ac_t\"\"$gcc_cv_ld_eh_frame_hdr\" 1>&6\n case \"$target\" in\n   mips*-*-*)\n     echo $ac_n \"checking whether libgloss uses STARTUP directives consistently\"\"... $ac_c\" 1>&6\n-echo \"configure:8302: checking whether libgloss uses STARTUP directives consistently\" >&5\n+echo \"configure:8306: checking whether libgloss uses STARTUP directives consistently\" >&5\n     gcc_cv_mips_libgloss_startup=no\n     gcc_cv_libgloss_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/libgloss\n     if test \"x$exec_prefix\" = xNONE; then\n@@ -8502,7 +8506,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:8506: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:8510: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "9b8cae29b4e1c78b098961023b91fc2cda3f9b67", "filename": "gcc/configure.in", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027faee730c5517d1e9b232146a0435953633781/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027faee730c5517d1e9b232146a0435953633781/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=027faee730c5517d1e9b232146a0435953633781", "patch": "@@ -1,7 +1,7 @@\n # configure.in for GCC\n # Process this file with autoconf to generate a configuration script.\n \n-# Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+# Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003\n # Free Software Foundation, Inc.\n \n #This file is part of GCC.\n@@ -1675,10 +1675,14 @@ fi\n AC_MSG_RESULT($gcc_cv_as_hidden)\n libgcc_visibility=$gcc_cv_as_hidden\n case \"$target\" in\n-  mips-sgi-irix6*o32)\n+  mips-sgi-irix6*)\n     if test x\"$gnu_ld_flag\" = x\"no\"; then\n       # Even if using gas with .hidden support, the resulting object files\n-      # cannot be linked with the IRIX 6 O32 linker.\n+      # cannot be linked with the IRIX 6 O32 linker.  With the N32 and\n+      # N64 linkers, the problem is that the linker refuses to accept\n+      # -call_shared (passed by default to the linker) and -r (used to\n+      # link the object file generated without .hidden directives with\n+      # one that hides symbols), so we also lose.\n       libgcc_visibility=no\n     fi\n     ;;"}]}