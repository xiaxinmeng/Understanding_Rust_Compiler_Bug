{"sha": "dc6be7c02258f6c79ed97b6886c81278ef7f264d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM2YmU3YzAyMjU4ZjZjNzllZDk3YjY4ODZjODEyNzhlZjdmMjY0ZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-04T21:26:58Z"}, "committer": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-05T06:06:16Z"}, "message": "libcc1: use variadic templates for \"call\"\n\nThis changes libcc1 to use variadic templates for the \"call\"\nfunctions.  The primary benefit is that this simplifies the code.\n\nlibcc1\n\n\t* rpc.hh (call): Use variadic template.  Remove overloads.\n\t* marshall.hh (marshall): Add base overload.  Use variadic\n\ttemplate.", "tree": {"sha": "f28421f9321410cebe73ed51df961032693293ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f28421f9321410cebe73ed51df961032693293ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc6be7c02258f6c79ed97b6886c81278ef7f264d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6be7c02258f6c79ed97b6886c81278ef7f264d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6be7c02258f6c79ed97b6886c81278ef7f264d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6be7c02258f6c79ed97b6886c81278ef7f264d/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c10a3b13fec850effc68c8b4f8861158f7fa7fed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c10a3b13fec850effc68c8b4f8861158f7fa7fed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c10a3b13fec850effc68c8b4f8861158f7fa7fed"}], "stats": {"total": 184, "additions": 25, "deletions": 159}, "files": [{"sha": "4a28a8fe4ae2bc6ed787f8f61c142c7c4aac596b", "filename": "libcc1/marshall.hh", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6be7c02258f6c79ed97b6886c81278ef7f264d/libcc1%2Fmarshall.hh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6be7c02258f6c79ed97b6886c81278ef7f264d/libcc1%2Fmarshall.hh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fmarshall.hh?ref=dc6be7c02258f6c79ed97b6886c81278ef7f264d", "patch": "@@ -52,6 +52,14 @@ namespace cc1_plugin\n   status unmarshall_array_start (connection *, char, size_t *);\n   status unmarshall_array_elmts (connection *, size_t, void *);\n \n+  // An \"empty\" marshall call -- used to handle the base case for some\n+  // variadic templates.\n+  static inline\n+  status marshall (connection *)\n+  {\n+    return OK;\n+  }\n+\n   // A template function that can handle marshalling various integer\n   // objects to the connection.\n   template<typename T>\n@@ -103,6 +111,14 @@ namespace cc1_plugin\n   // resulting array must be freed by the caller, using 'delete[]' on\n   // the elements, and 'delete' on the array object itself.\n   status unmarshall (connection *, struct gcc_type_array **);\n+\n+  template<typename T1, typename T2, typename... Arg>\n+  status marshall (connection *c, T1 arg1, T2 arg2, Arg... rest)\n+  {\n+    if (!marshall (c, arg1))\n+      return FAIL;\n+    return marshall (c, arg2, rest...);\n+  }\n };\n \n #endif // CC1_PLUGIN_MARSHALL_HH"}, {"sha": "a3631cb5d7e25c7074771beb41c78f86b2cce9f6", "filename": "libcc1/rpc.hh", "status": "modified", "additions": 9, "deletions": 159, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6be7c02258f6c79ed97b6886c81278ef7f264d/libcc1%2Frpc.hh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6be7c02258f6c79ed97b6886c81278ef7f264d/libcc1%2Frpc.hh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Frpc.hh?ref=dc6be7c02258f6c79ed97b6886c81278ef7f264d", "patch": "@@ -232,10 +232,10 @@ namespace cc1_plugin\n #endif /* GCC_CP_INTERFACE_H */\n \n   // There are two kinds of template functions here: \"call\" and\n-  // \"callback\".  They are each repeated multiple times to handle\n-  // different numbers of arguments.  (This would be improved with\n-  // C++11, though applying a call is still tricky until C++14 can be\n-  // used.)\n+  // \"callback\".  \"call\" is implemented with variadic templates, but\n+  // \"callback\" is repeated multiple times to handle different numbers\n+  // of arguments.  (This could be improved with C++17 and\n+  // std::apply.)\n \n   // The \"call\" template is used for making a remote procedure call.\n   // It starts a query ('Q') packet, marshalls its arguments, waits\n@@ -248,15 +248,17 @@ namespace cc1_plugin\n   // arguments, passes them to the wrapped function, and finally\n   // marshalls a reply packet.\n \n-  template<typename R>\n+  template<typename R, typename... Arg>\n   status\n-  call (connection *conn, const char *method, R *result)\n+  call (connection *conn, const char *method, R *result, Arg... args)\n   {\n     if (!conn->send ('Q'))\n       return FAIL;\n     if (!marshall (conn, method))\n       return FAIL;\n-    if (!marshall (conn, 0))\n+    if (!marshall (conn, (int) sizeof... (Arg)))\n+      return FAIL;\n+    if (!marshall (conn, args...))\n       return FAIL;\n     if (!conn->wait_for_result ())\n       return FAIL;\n@@ -279,25 +281,6 @@ namespace cc1_plugin\n     return marshall (conn, result);\n   }\n \n-  template<typename R, typename A>\n-  status\n-  call (connection *conn, const char *method, R *result, A arg)\n-  {\n-    if (!conn->send ('Q'))\n-      return FAIL;\n-    if (!marshall (conn, method))\n-      return FAIL;\n-    if (!marshall (conn, 1))\n-      return FAIL;\n-    if (!marshall (conn, arg))\n-      return FAIL;\n-    if (!conn->wait_for_result ())\n-      return FAIL;\n-    if (!unmarshall (conn, result))\n-      return FAIL;\n-    return OK;\n-  }\n-\n   template<typename R, typename A, R (*func) (connection *, A)>\n   status\n   callback (connection *conn)\n@@ -315,27 +298,6 @@ namespace cc1_plugin\n     return marshall (conn, result);\n   }\n \n-  template<typename R, typename A1, typename A2>\n-  status\n-  call (connection *conn, const char *method, R *result, A1 arg1, A2 arg2)\n-  {\n-    if (!conn->send ('Q'))\n-      return FAIL;\n-    if (!marshall (conn, method))\n-      return FAIL;\n-    if (!marshall (conn, 2))\n-      return FAIL;\n-    if (!marshall (conn, arg1))\n-      return FAIL;\n-    if (!marshall (conn, arg2))\n-      return FAIL;\n-    if (!conn->wait_for_result ())\n-      return FAIL;\n-    if (!unmarshall (conn, result))\n-      return FAIL;\n-    return OK;\n-  }\n-\n   template<typename R, typename A1, typename A2, R (*func) (connection *,\n \t\t\t\t\t\t\t    A1, A2)>\n   status\n@@ -357,30 +319,6 @@ namespace cc1_plugin\n     return marshall (conn, result);\n   }\n \n-  template<typename R, typename A1, typename A2, typename A3>\n-  status\n-  call (connection *conn, const char *method, R *result, A1 arg1, A2 arg2,\n-\tA3 arg3)\n-  {\n-    if (!conn->send ('Q'))\n-      return FAIL;\n-    if (!marshall (conn, method))\n-      return FAIL;\n-    if (!marshall (conn, 3))\n-      return FAIL;\n-    if (!marshall (conn, arg1))\n-      return FAIL;\n-    if (!marshall (conn, arg2))\n-      return FAIL;\n-    if (!marshall (conn, arg3))\n-      return FAIL;\n-    if (!conn->wait_for_result ())\n-      return FAIL;\n-    if (!unmarshall (conn, result))\n-      return FAIL;\n-    return OK;\n-  }\n-\n   template<typename R, typename A1, typename A2, typename A3,\n \t   R (*func) (connection *, A1, A2, A3)>\n   status\n@@ -405,32 +343,6 @@ namespace cc1_plugin\n     return marshall (conn, result);\n   }\n \n-  template<typename R, typename A1, typename A2, typename A3, typename A4>\n-  status\n-  call (connection *conn, const char *method, R *result, A1 arg1, A2 arg2,\n-\tA3 arg3, A4 arg4)\n-  {\n-    if (!conn->send ('Q'))\n-      return FAIL;\n-    if (!marshall (conn, method))\n-      return FAIL;\n-    if (!marshall (conn, 4))\n-      return FAIL;\n-    if (!marshall (conn, arg1))\n-      return FAIL;\n-    if (!marshall (conn, arg2))\n-      return FAIL;\n-    if (!marshall (conn, arg3))\n-      return FAIL;\n-    if (!marshall (conn, arg4))\n-      return FAIL;\n-    if (!conn->wait_for_result ())\n-      return FAIL;\n-    if (!unmarshall (conn, result))\n-      return FAIL;\n-    return OK;\n-  }\n-\n   template<typename R, typename A1, typename A2, typename A3, typename A4,\n \t   R (*func) (connection *, A1, A2, A3, A4)>\n   status\n@@ -458,35 +370,6 @@ namespace cc1_plugin\n     return marshall (conn, result);\n   }\n \n-  template<typename R, typename A1, typename A2, typename A3, typename A4,\n-\t   typename A5>\n-  status\n-  call (connection *conn, const char *method, R *result, A1 arg1, A2 arg2,\n-\tA3 arg3, A4 arg4, A5 arg5)\n-  {\n-    if (!conn->send ('Q'))\n-      return FAIL;\n-    if (!marshall (conn, method))\n-      return FAIL;\n-    if (!marshall (conn, 5))\n-      return FAIL;\n-    if (!marshall (conn, arg1))\n-      return FAIL;\n-    if (!marshall (conn, arg2))\n-      return FAIL;\n-    if (!marshall (conn, arg3))\n-      return FAIL;\n-    if (!marshall (conn, arg4))\n-      return FAIL;\n-    if (!marshall (conn, arg5))\n-      return FAIL;\n-    if (!conn->wait_for_result ())\n-      return FAIL;\n-    if (!unmarshall (conn, result))\n-      return FAIL;\n-    return OK;\n-  }\n-\n   template<typename R, typename A1, typename A2, typename A3, typename A4,\n \t   typename A5, R (*func) (connection *, A1, A2, A3, A4, A5)>\n   status\n@@ -517,39 +400,6 @@ namespace cc1_plugin\n     return marshall (conn, result);\n   }\n \n-  template<typename R, typename A1, typename A2, typename A3, typename A4,\n-\t   typename A5, typename A6, typename A7>\n-  status\n-  call (connection *conn, const char *method, R *result, A1 arg1, A2 arg2,\n-\tA3 arg3, A4 arg4, A5 arg5, A6 arg6, A7 arg7)\n-  {\n-    if (!conn->send ('Q'))\n-      return FAIL;\n-    if (!marshall (conn, method))\n-      return FAIL;\n-    if (!marshall (conn, 7))\n-      return FAIL;\n-    if (!marshall (conn, arg1))\n-      return FAIL;\n-    if (!marshall (conn, arg2))\n-      return FAIL;\n-    if (!marshall (conn, arg3))\n-      return FAIL;\n-    if (!marshall (conn, arg4))\n-      return FAIL;\n-    if (!marshall (conn, arg5))\n-      return FAIL;\n-    if (!marshall (conn, arg6))\n-      return FAIL;\n-    if (!marshall (conn, arg7))\n-      return FAIL;\n-    if (!conn->wait_for_result ())\n-      return FAIL;\n-    if (!unmarshall (conn, result))\n-      return FAIL;\n-    return OK;\n-  }\n-\n   template<typename R, typename A1, typename A2, typename A3, typename A4,\n \t   typename A5, typename A6, typename A7,\n \t   R (*func) (connection *, A1, A2, A3, A4, A5, A6, A7)>"}]}