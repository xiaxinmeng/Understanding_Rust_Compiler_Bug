{"sha": "20103c0ea9336d2b5286eb7f2605ace3fd49a431", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxMDNjMGVhOTMzNmQyYjUyODZlYjdmMjYwNWFjZTNmZDQ5YTQzMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:05:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:05:50Z"}, "message": "Add support for conditional shifts\n\nThis patch adds support for IFN_COND shifts left and shifts right.\nThis is mostly mechanical, but since we try to handle conditional\noperations in the same way as unconditional operations in match.pd,\nwe need to support IFN_COND shifts by scalars as well as vectors.\nE.g.:\n\n   IFN_COND_SHL (cond, a, { 1, 1, ... }, fallback)\n\nand:\n\n   IFN_COND_SHL (cond, a, 1, fallback)\n\nare the same operation, with:\n\n   (for shiftrotate (lrotate rrotate lshift rshift)\n    ...\n    /* Prefer vector1 << scalar to vector1 << vector2\n       if vector2 is uniform.  */\n    (for vec (VECTOR_CST CONSTRUCTOR)\n     (simplify\n      (shiftrotate @0 vec@1)\n      (with { tree tem = uniform_vector_p (@1); }\n       (if (tem)\n\t(shiftrotate @0 { tem; }))))))\n\npreferring the latter.  The patch copes with this by extending\ncreate_convert_operand_from to handle scalar-to-vector conversions.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\ngcc/\n\t* internal-fn.def (IFN_COND_SHL, IFN_COND_SHR): New internal functions.\n\t* internal-fn.c (FOR_EACH_CODE_MAPPING): Handle shifts.\n\t* match.pd (UNCOND_BINARY, COND_BINARY): Likewise.\n\t* optabs.def (cond_ashl_optab, cond_ashr_optab, cond_lshr_optab): New\n\toptabs.\n\t* optabs.h (create_convert_operand_from): Expand comment.\n\t* optabs.c (maybe_legitimize_operand): Allow implicit broadcasts\n\twhen mapping scalar rtxes to vector operands.\n\t* config/aarch64/iterators.md (SVE_INT_BINARY): Add ashift,\n\tashiftrt and lshiftrt.\n\t(sve_int_op, sve_int_op_rev, sve_pred_int_rhs2_operand): Handle them.\n\t* config/aarch64/aarch64-sve.md (*cond_<optab><mode>_2_const)\n\t(*cond_<optab><mode>_any_const): New patterns.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_shift_1.c: New test.\n\t* gcc.target/aarch64/sve/cond_shift_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_5.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_5_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_6.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_6_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_7.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_7_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_8.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_8_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_9.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_shift_9_run.c: Likewise.\n\nCo-Authored-By: Prathamesh Kulkarni <prathamesh.kulkarni@linaro.org>\n\nFrom-SVN: r274505", "tree": {"sha": "0ba3460062f73c67ed90ea27a6520fa537c29f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ba3460062f73c67ed90ea27a6520fa537c29f69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20103c0ea9336d2b5286eb7f2605ace3fd49a431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20103c0ea9336d2b5286eb7f2605ace3fd49a431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20103c0ea9336d2b5286eb7f2605ace3fd49a431", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20103c0ea9336d2b5286eb7f2605ace3fd49a431/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc8495056efac06fa57d36512903b06026c01470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8495056efac06fa57d36512903b06026c01470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc8495056efac06fa57d36512903b06026c01470"}], "stats": {"total": 789, "additions": 772, "deletions": 17}, "files": [{"sha": "e6c3d701ab3b043a75b2e121572ef8c817d81328", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -1,3 +1,20 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* internal-fn.def (IFN_COND_SHL, IFN_COND_SHR): New internal functions.\n+\t* internal-fn.c (FOR_EACH_CODE_MAPPING): Handle shifts.\n+\t* match.pd (UNCOND_BINARY, COND_BINARY): Likewise.\n+\t* optabs.def (cond_ashl_optab, cond_ashr_optab, cond_lshr_optab): New\n+\toptabs.\n+\t* optabs.h (create_convert_operand_from): Expand comment.\n+\t* optabs.c (maybe_legitimize_operand): Allow implicit broadcasts\n+\twhen mapping scalar rtxes to vector operands.\n+\t* config/aarch64/iterators.md (SVE_INT_BINARY): Add ashift,\n+\tashiftrt and lshiftrt.\n+\t(sve_int_op, sve_int_op_rev, sve_pred_int_rhs2_operand): Handle them.\n+\t* config/aarch64/aarch64-sve.md (*cond_<optab><mode>_2_const)\n+\t(*cond_<optab><mode>_any_const): New patterns.\n+\n 2019-08-15  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/91438"}, {"sha": "b8156a13b3e18f39d47de1b5440177cc7d880aa4", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -1772,7 +1772,10 @@\n ;; Includes:\n ;; - ADD    (merging form only)\n ;; - AND    (merging form only)\n+;; - ASR    (merging form only)\n ;; - EOR    (merging form only)\n+;; - LSL    (merging form only)\n+;; - LSR    (merging form only)\n ;; - MUL\n ;; - ORR    (merging form only)\n ;; - SMAX\n@@ -2405,6 +2408,49 @@\n   \"<shift>\\t%0.<Vetype>, %1.<Vetype>, #%2\"\n )\n \n+;; Predicated integer shift, merging with the first input.\n+(define_insn \"*cond_<optab><mode>_2_const\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (ASHIFT:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_simd_<lr>shift_imm\"))\n+\t   (match_dup 2)]\n+\t UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   <shift>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0, %2\\;<shift>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated integer shift, merging with an independent value.\n+(define_insn_and_rewrite \"*cond_<optab><mode>_any_const\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, &w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (ASHIFT:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"w, w, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_simd_<lr>shift_imm\"))\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, 0, w\")]\n+\t UNSPEC_SEL))]\n+  \"TARGET_SVE && !rtx_equal_p (operands[2], operands[4])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<shift>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0.<Vetype>, %1/m, %2.<Vetype>\\;<shift>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   #\"\n+  \"&& reload_completed\n+   && register_operand (operands[4], <MODE>mode)\n+   && !rtx_equal_p (operands[0], operands[4])\"\n+  {\n+    emit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[2],\n+\t\t\t\t\t     operands[4], operands[1]));\n+    operands[4] = operands[2] = operands[0];\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [FP] General binary arithmetic corresponding to rtx codes\n ;; -------------------------------------------------------------------------"}, {"sha": "81dddb7b3a3cc7aac5ea217154193ec82277212a", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -1280,6 +1280,7 @@\n \n ;; SVE integer binary operations.\n (define_code_iterator SVE_INT_BINARY [plus minus mult smax umax smin umin\n+\t\t\t\t      ashift ashiftrt lshiftrt\n \t\t\t\t      and ior xor])\n \n ;; SVE integer binary division operations.\n@@ -1475,6 +1476,9 @@\n \t\t\t      (smax \"smax\")\n \t\t\t      (umin \"umin\")\n \t\t\t      (umax \"umax\")\n+\t\t\t      (ashift \"lsl\")\n+\t\t\t      (ashiftrt \"asr\")\n+\t\t\t      (lshiftrt \"lsr\")\n \t\t\t      (and \"and\")\n \t\t\t      (ior \"orr\")\n \t\t\t      (xor \"eor\")\n@@ -1484,17 +1488,20 @@\n \t\t\t      (popcount \"cnt\")])\n \n (define_code_attr sve_int_op_rev [(plus \"add\")\n-\t\t\t          (minus \"subr\")\n-\t\t\t          (mult \"mul\")\n-\t\t\t          (div \"sdivr\")\n-\t\t\t          (udiv \"udivr\")\n-\t\t\t          (smin \"smin\")\n-\t\t\t          (smax \"smax\")\n-\t\t\t          (umin \"umin\")\n-\t\t\t          (umax \"umax\")\n-\t\t\t          (and \"and\")\n-\t\t\t          (ior \"orr\")\n-\t\t\t          (xor \"eor\")])\n+\t\t\t\t  (minus \"subr\")\n+\t\t\t\t  (mult \"mul\")\n+\t\t\t\t  (div \"sdivr\")\n+\t\t\t\t  (udiv \"udivr\")\n+\t\t\t\t  (smin \"smin\")\n+\t\t\t\t  (smax \"smax\")\n+\t\t\t\t  (umin \"umin\")\n+\t\t\t\t  (umax \"umax\")\n+\t\t\t\t  (ashift \"lslr\")\n+\t\t\t\t  (ashiftrt \"asrr\")\n+\t\t\t\t  (lshiftrt \"lsrr\")\n+\t\t\t\t  (and \"and\")\n+\t\t\t\t  (ior \"orr\")\n+\t\t\t\t  (xor \"eor\")])\n \n ;; The floating-point SVE instruction that implements an rtx code.\n (define_code_attr sve_fp_op [(plus \"fadd\")\n@@ -1535,6 +1542,9 @@\n    (umax \"register_operand\")\n    (smin \"register_operand\")\n    (umin \"register_operand\")\n+   (ashift \"aarch64_sve_lshift_operand\")\n+   (ashiftrt \"aarch64_sve_rshift_operand\")\n+   (lshiftrt \"aarch64_sve_rshift_operand\")\n    (and \"aarch64_sve_pred_and_operand\")\n    (ior \"register_operand\")\n    (xor \"register_operand\")])"}, {"sha": "ad86b9afd5488f2ff3cec94d966a3c320bc15919", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -3286,7 +3286,9 @@ static void (*const internal_fn_expanders[]) (internal_fn, gcall *) = {\n   T (MAX_EXPR, IFN_COND_MAX) \\\n   T (BIT_AND_EXPR, IFN_COND_AND) \\\n   T (BIT_IOR_EXPR, IFN_COND_IOR) \\\n-  T (BIT_XOR_EXPR, IFN_COND_XOR)\n+  T (BIT_XOR_EXPR, IFN_COND_XOR) \\\n+  T (LSHIFT_EXPR, IFN_COND_SHL) \\\n+  T (RSHIFT_EXPR, IFN_COND_SHR)\n \n /* Return a function that only performs CODE when a certain condition is met\n    and that uses a given fallback value otherwise.  For example, if CODE is"}, {"sha": "9461693bcd12dd54eedd0d983758947bfc016b73", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -167,6 +167,10 @@ DEF_INTERNAL_OPTAB_FN (COND_IOR, ECF_CONST | ECF_NOTHROW,\n \t\t       cond_ior, cond_binary)\n DEF_INTERNAL_OPTAB_FN (COND_XOR, ECF_CONST | ECF_NOTHROW,\n \t\t       cond_xor, cond_binary)\n+DEF_INTERNAL_OPTAB_FN (COND_SHL, ECF_CONST | ECF_NOTHROW,\n+\t\t       cond_ashl, cond_binary)\n+DEF_INTERNAL_SIGNED_OPTAB_FN (COND_SHR, ECF_CONST | ECF_NOTHROW, first,\n+\t\t\t      cond_ashr, cond_lshr, cond_binary)\n \n DEF_INTERNAL_OPTAB_FN (COND_FMA, ECF_CONST, cond_fma, cond_ternary)\n DEF_INTERNAL_OPTAB_FN (COND_FMS, ECF_CONST, cond_fms, cond_ternary)"}, {"sha": "93dcef9d66db17a1f9afb4f7282a6a113abea96d", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -83,12 +83,14 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   plus minus\n   mult trunc_div trunc_mod rdiv\n   min max\n-  bit_and bit_ior bit_xor)\n+  bit_and bit_ior bit_xor\n+  lshift rshift)\n (define_operator_list COND_BINARY\n   IFN_COND_ADD IFN_COND_SUB\n   IFN_COND_MUL IFN_COND_DIV IFN_COND_MOD IFN_COND_RDIV\n   IFN_COND_MIN IFN_COND_MAX\n-  IFN_COND_AND IFN_COND_IOR IFN_COND_XOR)\n+  IFN_COND_AND IFN_COND_IOR IFN_COND_XOR\n+  IFN_COND_SHL IFN_COND_SHR)\n \n /* Same for ternary operations.  */\n (define_operator_list UNCOND_TERNARY"}, {"sha": "9e54dda6e7f943d25f41b3660a49241860cb3241", "filename": "gcc/optabs.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -7212,7 +7212,7 @@ static bool\n maybe_legitimize_operand (enum insn_code icode, unsigned int opno,\n \t\t\t  class expand_operand *op)\n {\n-  machine_mode mode, imode;\n+  machine_mode mode, imode, tmode;\n \n   mode = op->mode;\n   switch (op->type)\n@@ -7259,9 +7259,17 @@ maybe_legitimize_operand (enum insn_code icode, unsigned int opno,\n \tgcc_assert (mode != VOIDmode);\n \n       imode = insn_data[(int) icode].operand[opno].mode;\n+      tmode = (VECTOR_MODE_P (imode) && !VECTOR_MODE_P (mode)\n+\t       ? GET_MODE_INNER (imode) : imode);\n+      if (tmode != VOIDmode && tmode != mode)\n+\t{\n+\t  op->value = convert_modes (tmode, mode, op->value, op->unsigned_p);\n+\t  mode = tmode;\n+\t}\n       if (imode != VOIDmode && imode != mode)\n \t{\n-\t  op->value = convert_modes (imode, mode, op->value, op->unsigned_p);\n+\t  gcc_assert (VECTOR_MODE_P (imode) && !VECTOR_MODE_P (mode));\n+\t  op->value = expand_vector_broadcast (imode, op->value);\n \t  mode = imode;\n \t}\n       goto input;"}, {"sha": "5283e6753f26eb0da08a393949128d09643e50dd", "filename": "gcc/optabs.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -230,6 +230,9 @@ OPTAB_D (cond_umod_optab, \"cond_umod$a\")\n OPTAB_D (cond_and_optab, \"cond_and$a\")\n OPTAB_D (cond_ior_optab, \"cond_ior$a\")\n OPTAB_D (cond_xor_optab, \"cond_xor$a\")\n+OPTAB_D (cond_ashl_optab, \"cond_ashl$a\")\n+OPTAB_D (cond_ashr_optab, \"cond_ashr$a\")\n+OPTAB_D (cond_lshr_optab, \"cond_lshr$a\")\n OPTAB_D (cond_smin_optab, \"cond_smin$a\")\n OPTAB_D (cond_smax_optab, \"cond_smax$a\")\n OPTAB_D (cond_umin_optab, \"cond_umin$a\")"}, {"sha": "897bb5d4443ad96fc9ca9a59316b953a396e55e2", "filename": "gcc/optabs.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -129,7 +129,11 @@ create_convert_operand_to (class expand_operand *op, rtx value,\n /* Make OP describe an input operand that should have the same value\n    as VALUE, after any mode conversion that the backend might request.\n    If VALUE is a CONST_INT, it should be treated as having mode MODE.\n-   UNSIGNED_P says whether VALUE is unsigned.  */\n+   UNSIGNED_P says whether VALUE is unsigned.\n+\n+   The conversion of VALUE can include a combination of numerical\n+   conversion (as for convert_modes) and duplicating a scalar to fill\n+   a vector (if VALUE is a scalar but the operand is a vector).  */\n \n static inline void\n create_convert_operand_from (class expand_operand *op, rtx value,"}, {"sha": "eed83cea42c6967c033dc0b6833e196534f04d42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -1,3 +1,25 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/cond_shift_1.c: New test.\n+\t* gcc.target/aarch64/sve/cond_shift_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_5_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_6_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_7_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_8_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_9.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_shift_9_run.c: Likewise.\n+\n 2019-08-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR testsuite/91449"}, {"sha": "f2c51b291b2e4ec0df3dd93c9d8946534d9d302f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_1.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP 3 : b[i];\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "acc403ec85390d7557840323f538e5b997a3b730", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_1_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_1_run.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP 3 : b[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "c9082c9c8d6ab234030c83b051e17bbdca084473", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_2.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP 3 : a[i];\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "4917d3af609b6c6b6904482f7f471c484f133123", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_2_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_2_run.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP 3 : a[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "55e0de8aaa437c960cf1b30055d784f806d998b3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_3.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_3.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP 3 : 72;\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\t} 16 } } */"}, {"sha": "194c75b8d5022c2a963d2eff91ca74a8ed936aa4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_3_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_3_run.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP 3 : 72))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "32dd68199126a78135f1be57205f56bfebaadfa6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_4.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_4.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP 3 : 0;\t\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z, z[0-9]+\\.b\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "ee263000d06d89a5a46c41715eac9fb90e09a73b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_4_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_4_run.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP 3 : 0))\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "1d4491531616eee00952ff2d93cf7c720aa7cef2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_5.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_5.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP c[i] : b[i];\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "35bf1b8713c327f52fccd7b8b895440da1e66996", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_5_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_5_run.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_5.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ~i & 7;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, c, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP c[i] : b[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "35cb676777e8438cc732262b83197a4ccb78e613", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_6.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_6.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP c[i] : c[i];\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tlslr\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasrr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsrr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "e601c6156258dbe5d189983083fc3a4e48d962cb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_6_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_6_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_6_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_6_run.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_6.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ~i & 7;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, c, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP c[i] : c[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "80154b25e5102c8f40094a301739d843303890d9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_7.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_7.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP c[i] : a[i];\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "d23b0093da652a1d844ac38bb02020721dfc9c76", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_7_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_7_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_7_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_7_run.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_7.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ~i & 7;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, c, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP c[i] : a[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "b478c0c4ff11fe333c2c157f054a64d2b843aa76", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_8.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_8.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP c[i] : 91;\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\t} 8 } } */"}, {"sha": "72e5a7b59237a1885d761e2e2eea0ca826876188", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_8_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_8_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_8_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_8_run.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_8.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ~i & 7;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, c, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP c[i] : 91))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "184e93ab8dbf4f5551e344e00af6fb39ff89b448", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_9.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_9.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE, NAME, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict r, TYPE *__restrict a,\t\t\\\n+\t\t\tTYPE *__restrict b, TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] OP c[i] : 0;\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, shl, <<) \\\n+  T (TYPE, shr, >>)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tlslr?\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlslr?\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasrr?\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tasrr?\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsrr?\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsrr?\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 4 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "6e41ac4da1fffc5371cd6be66986fb81c39aa2e2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_shift_9_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_9_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20103c0ea9336d2b5286eb7f2605ace3fd49a431/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_9_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_shift_9_run.c?ref=20103c0ea9336d2b5286eb7f2605ace3fd49a431", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_shift_9.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, NAME, OP)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ~i & 7;\t\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##NAME (r, a, b, c, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (TYPE) (a[i] > 20 ? b[i] OP c[i] : 0))\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}