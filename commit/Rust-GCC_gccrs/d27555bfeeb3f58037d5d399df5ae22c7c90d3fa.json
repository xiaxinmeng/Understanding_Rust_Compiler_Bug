{"sha": "d27555bfeeb3f58037d5d399df5ae22c7c90d3fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI3NTU1YmZlZWIzZjU4MDM3ZDVkMzk5ZGY1YWUyMmM3YzkwZDNmYQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-08-13T09:11:13Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-08-13T09:11:13Z"}, "message": "[RTL-ifcvt] Improve conditional select ops on immediates (fix failing x86_64 cmov tests)\n\n\tPR rtl-optimization/67103\n\t* ifcvt.c (noce_try_store_flag_constants): Move\n\tx = (-(test != 0) & (b - a)) + a transformation to...\n\t(noce_try_cmove): ... Here.  Try it if normal conditional\n\tmove fails.\n\nFrom-SVN: r226853", "tree": {"sha": "aa4ac4831baaf9824599309f3611f743a9366fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa4ac4831baaf9824599309f3611f743a9366fe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d27555bfeeb3f58037d5d399df5ae22c7c90d3fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27555bfeeb3f58037d5d399df5ae22c7c90d3fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d27555bfeeb3f58037d5d399df5ae22c7c90d3fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27555bfeeb3f58037d5d399df5ae22c7c90d3fa/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89711ff6cbe5455fb5f4b42038e072d764b30579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89711ff6cbe5455fb5f4b42038e072d764b30579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89711ff6cbe5455fb5f4b42038e072d764b30579"}], "stats": {"total": 85, "additions": 69, "deletions": 16}, "files": [{"sha": "a677510789e2317fe719a944bc1dc7f678b0b2cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27555bfeeb3f58037d5d399df5ae22c7c90d3fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27555bfeeb3f58037d5d399df5ae22c7c90d3fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d27555bfeeb3f58037d5d399df5ae22c7c90d3fa", "patch": "@@ -1,3 +1,11 @@\n+2015-08-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR rtl-optimization/67103\n+\t* ifcvt.c (noce_try_store_flag_constants): Move\n+\tx = (-(test != 0) & (b - a)) + a transformation to...\n+\t(noce_try_cmove): ... Here.  Try it if normal conditional\n+\tmove fails.\n+\n 2015-08-13  Robert Suchanek  <robert.suchanek@imgtec.com>\n \n \t* config/mips/mips.c (mips_rtx_cost_data): Remove costs for W32 and W64"}, {"sha": "9b6f6821ce6f0a81269a6e77530a1ce4c9827d8f", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 61, "deletions": 16, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27555bfeeb3f58037d5d399df5ae22c7c90d3fa/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27555bfeeb3f58037d5d399df5ae22c7c90d3fa/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=d27555bfeeb3f58037d5d399df5ae22c7c90d3fa", "patch": "@@ -1239,9 +1239,6 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n \t  normalize = -1;\n \t  reversep = true;\n \t}\n-      else if ((if_info->branch_cost >= 2 && STORE_FLAG_VALUE == -1)\n-\t       || if_info->branch_cost >= 3)\n-\tnormalize = -1;\n       else\n \treturn FALSE;\n \n@@ -1287,18 +1284,10 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n \t\t\t\t\ttarget, gen_int_mode (ifalse, mode),\n \t\t\t\t\tif_info->x, 0, OPTAB_WIDEN);\n \t}\n-\n-      /* if (test) x = a; else x = b;\n-\t =>   x = (-(test != 0) & (b - a)) + a;  */\n       else\n \t{\n-\t  target = expand_simple_binop (mode, AND,\n-\t\t\t\t\ttarget, gen_int_mode (diff, mode),\n-\t\t\t\t\tif_info->x, 0, OPTAB_WIDEN);\n-\t  if (target)\n-\t    target = expand_simple_binop (mode, PLUS,\n-\t\t\t\t\t  target, gen_int_mode (ifalse, mode),\n-\t\t\t\t\t  if_info->x, 0, OPTAB_WIDEN);\n+\t  end_sequence ();\n+\t  return FALSE;\n \t}\n \n       if (! target)\n@@ -1615,11 +1604,67 @@ noce_try_cmove (struct noce_if_info *if_info)\n \t\t\t\t   INSN_LOCATION (if_info->insn_a));\n \t  return TRUE;\n \t}\n-      else\n+      /* If both a and b are constants try a last-ditch transformation:\n+\t if (test) x = a; else x = b;\n+\t =>   x = (-(test != 0) & (b - a)) + a;\n+\t Try this only if the target-specific expansion above has failed.\n+\t The target-specific expander may want to generate sequences that\n+\t we don't know about, so give them a chance before trying this\n+\t approach.  */\n+      else if (!targetm.have_conditional_execution ()\n+\t\t&& CONST_INT_P (if_info->a) && CONST_INT_P (if_info->b)\n+\t\t&& ((if_info->branch_cost >= 2 && STORE_FLAG_VALUE == -1)\n+\t\t    || if_info->branch_cost >= 3))\n \t{\n-\t  end_sequence ();\n-\t  return FALSE;\n+\t  machine_mode mode = GET_MODE (if_info->x);\n+\t  HOST_WIDE_INT ifalse = INTVAL (if_info->a);\n+\t  HOST_WIDE_INT itrue = INTVAL (if_info->b);\n+\t  rtx target = noce_emit_store_flag (if_info, if_info->x, false, -1);\n+\t  if (!target)\n+\t    {\n+\t      end_sequence ();\n+\t      return FALSE;\n+\t    }\n+\n+\t  HOST_WIDE_INT diff = (unsigned HOST_WIDE_INT) itrue - ifalse;\n+\t  /* Make sure we can represent the difference\n+\t     between the two values.  */\n+\t  if ((diff > 0)\n+\t      != ((ifalse < 0) != (itrue < 0) ? ifalse < 0 : ifalse < itrue))\n+\t    {\n+\t      end_sequence ();\n+\t      return FALSE;\n+\t    }\n+\n+\t  diff = trunc_int_for_mode (diff, mode);\n+\t  target = expand_simple_binop (mode, AND,\n+\t\t\t\t\ttarget, gen_int_mode (diff, mode),\n+\t\t\t\t\tif_info->x, 0, OPTAB_WIDEN);\n+\t  if (target)\n+\t    target = expand_simple_binop (mode, PLUS,\n+\t\t\t\t\t  target, gen_int_mode (ifalse, mode),\n+\t\t\t\t\t  if_info->x, 0, OPTAB_WIDEN);\n+\t  if (target)\n+\t    {\n+\t      if (target != if_info->x)\n+\t\tnoce_emit_move_insn (if_info->x, target);\n+\n+\t      seq = end_ifcvt_sequence (if_info);\n+\t      if (!seq)\n+\t\treturn FALSE;\n+\n+\t      emit_insn_before_setloc (seq, if_info->jump,\n+\t\t\t\t   INSN_LOCATION (if_info->insn_a));\n+\t      return TRUE;\n+\t    }\n+\t  else\n+\t    {\n+\t      end_sequence ();\n+\t      return FALSE;\n+\t    }\n \t}\n+      else\n+\tend_sequence ();\n     }\n \n   return FALSE;"}]}