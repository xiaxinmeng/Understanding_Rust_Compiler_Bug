{"sha": "dda895f9c6216d207d277770e221939f3a42e8ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRhODk1ZjljNjIxNmQyMDdkMjc3NzcwZTIyMTkzOWYzYTQyZThmZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-06-13T15:24:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-06-13T15:24:54Z"}, "message": "trans-expr.c (gfc_conv_function_call): Return int instead of void.\n\n\t* trans-expr.c (gfc_conv_function_call): Return int instead of\n\tvoid.  Use a local variable for has_alternate_specifier and\n\treturn it.  Avoid modification of function type's return value\n\tin place, since it may be shared.\n\t* trans.h (has_alternate_specifier): Remove.\n\t(gfc_conv_function_call): Change return type.\n\t* trans-stmt.c (has_alternate_specifier): Remove.\n\t(gfc_trans_call): Add a local has_alternate_specifier variable,\n\tset it from gfc_conv_function_call return value.\n\n\t* gfortran.dg/altreturn_1.f90: New test.\n\nFrom-SVN: r100878", "tree": {"sha": "0035578b9cc54831eeec842b51ebb7c3f6932292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0035578b9cc54831eeec842b51ebb7c3f6932292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dda895f9c6216d207d277770e221939f3a42e8ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda895f9c6216d207d277770e221939f3a42e8ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda895f9c6216d207d277770e221939f3a42e8ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda895f9c6216d207d277770e221939f3a42e8ff/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "adacecf105b889e4d7f9b48dea7895724f850d66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adacecf105b889e4d7f9b48dea7895724f850d66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adacecf105b889e4d7f9b48dea7895724f850d66"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "7e8425c05d0309a1f327c2a0e8bf6e6a3574c97e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dda895f9c6216d207d277770e221939f3a42e8ff", "patch": "@@ -1,3 +1,15 @@\n+2005-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-expr.c (gfc_conv_function_call): Return int instead of\n+\tvoid.  Use a local variable for has_alternate_specifier and\n+\treturn it.  Avoid modification of function type's return value\n+\tin place, since it may be shared.\n+\t* trans.h (has_alternate_specifier): Remove.\n+\t(gfc_conv_function_call): Change return type.\n+\t* trans-stmt.c (has_alternate_specifier): Remove.\n+\t(gfc_trans_call): Add a local has_alternate_specifier variable,\n+\tset it from gfc_conv_function_call return value.\n+\n 2005-06-13  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR middle-end/21985"}, {"sha": "3a4d52a674d2afa1dbad8590afea2eb26373a4d5", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=dda895f9c6216d207d277770e221939f3a42e8ff", "patch": "@@ -1073,9 +1073,10 @@ gfc_conv_function_val (gfc_se * se, gfc_symbol * sym)\n \n \n /* Generate code for a procedure call.  Note can return se->post != NULL.\n-   If se->direct_byref is set then se->expr contains the return parameter.  */\n+   If se->direct_byref is set then se->expr contains the return parameter.\n+   Return non-zero, if the call has alternate specifiers.  */\n \n-void\n+int\n gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t\t\tgfc_actual_arglist * arg)\n {\n@@ -1091,6 +1092,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n   tree len;\n   tree stringargs;\n   gfc_formal_arglist *formal;\n+  int has_alternate_specifier = 0;\n \n   arglist = NULL_TREE;\n   stringargs = NULL_TREE;\n@@ -1123,7 +1125,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \n \t      /* Bundle in the string length.  */\n \t      se->string_length = len;\n-              return;\n+              return 0;\n             }\n \t}\n       info = &se->ss->data.info;\n@@ -1307,9 +1309,17 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n   /* Generate the actual call.  */\n   gfc_conv_function_val (se, sym);\n   /* If there are alternate return labels, function type should be\n-     integer.  */\n-  if (has_alternate_specifier)\n-    TREE_TYPE (TREE_TYPE (TREE_TYPE (se->expr))) = integer_type_node;\n+     integer.  Can't modify the type in place though, since it can be shared\n+     with other functions.  */\n+  if (has_alternate_specifier\n+      && TREE_TYPE (TREE_TYPE (TREE_TYPE (se->expr))) != integer_type_node)\n+    {\n+      gcc_assert (! sym->attr.dummy);\n+      TREE_TYPE (sym->backend_decl)\n+        = build_function_type (integer_type_node,\n+                               TYPE_ARG_TYPES (TREE_TYPE (sym->backend_decl)));\n+      se->expr = gfc_build_addr_expr (NULL, sym->backend_decl);\n+    }\n \n   fntype = TREE_TYPE (TREE_TYPE (se->expr));\n   se->expr = build3 (CALL_EXPR, TREE_TYPE (fntype), se->expr,\n@@ -1378,6 +1388,8 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t    }\n \t}\n     }\n+\n+  return has_alternate_specifier;\n }\n \n "}, {"sha": "46a69d461487f8a1c4ed2d26ba190841afef86f8", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=dda895f9c6216d207d277770e221939f3a42e8ff", "patch": "@@ -37,8 +37,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"trans-const.h\"\n #include \"arith.h\"\n \n-int has_alternate_specifier;\n-\n typedef struct iter_info\n {\n   tree var;\n@@ -206,17 +204,18 @@ tree\n gfc_trans_call (gfc_code * code)\n {\n   gfc_se se;\n+  int has_alternate_specifier;\n \n   /* A CALL starts a new block because the actual arguments may have to\n      be evaluated first.  */\n   gfc_init_se (&se, NULL);\n   gfc_start_block (&se.pre);\n \n   gcc_assert (code->resolved_sym);\n-  has_alternate_specifier = 0;\n \n   /* Translate the call.  */\n-  gfc_conv_function_call (&se, code->resolved_sym, code->ext.actual);\n+  has_alternate_specifier\n+    = gfc_conv_function_call (&se, code->resolved_sym, code->ext.actual);\n \n   /* A subroutine without side-effect, by definition, does nothing!  */\n   TREE_SIDE_EFFECTS (se.expr) = 1;"}, {"sha": "705e9f6a7f9d0c01669a63714b6c1aa3a57348be", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=dda895f9c6216d207d277770e221939f3a42e8ff", "patch": "@@ -301,7 +301,7 @@ void gfc_conv_intrinsic_function (gfc_se *, gfc_expr *);\n int gfc_is_intrinsic_libcall (gfc_expr *);\n \n /* Also used to CALL subroutines.  */\n-void gfc_conv_function_call (gfc_se *, gfc_symbol *, gfc_actual_arglist *);\n+int gfc_conv_function_call (gfc_se *, gfc_symbol *, gfc_actual_arglist *);\n /* gfc_trans_* shouldn't call push/poplevel, use gfc_push/pop_scope */\n \n /* Generate code for a scalar assignment.  */\n@@ -574,7 +574,4 @@ struct lang_decl\t\tGTY(())\n                                           arg1, arg2)\n #define build3_v(code, arg1, arg2, arg3) build3(code, void_type_node, \\\n                                                 arg1, arg2, arg3)\n-\n-/* flag for alternative return labels.  */\n-extern int has_alternate_specifier;  /* for caller */\n #endif /* GFC_TRANS_H */"}, {"sha": "af6d1b13266e51c90516360541b409757f5ba87c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dda895f9c6216d207d277770e221939f3a42e8ff", "patch": "@@ -1,3 +1,7 @@\n+2005-06-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.dg/altreturn_1.f90: New test.\n+\n 2005-06-13  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR middle-end/21985"}, {"sha": "0849358697ff14cb4ae8cc10d3067e5751cd72ed", "filename": "gcc/testsuite/gfortran.dg/altreturn_1.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda895f9c6216d207d277770e221939f3a42e8ff/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_1.f90?ref=dda895f9c6216d207d277770e221939f3a42e8ff", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+\tsubroutine foo (a)\n+\treal t, a, baz\n+\tcall bar (*10)\n+\tt = 2 * baz ()\n+\tIF (t.gt.0) t = baz ()\n+10\tEND"}]}