{"sha": "d677263e6c6ce0b40ca791e97f7b2f4ab0718f03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY3NzI2M2U2YzZjZTBiNDBjYTc5MWU5N2Y3YjJmNGFiMDcxOGYwMw==", "commit": {"author": {"name": "Renlin Li", "email": "renlin@gcc.gnu.org", "date": "2018-02-01T13:02:24Z"}, "committer": {"name": "Renlin Li", "email": "renlin@gcc.gnu.org", "date": "2018-02-01T13:02:24Z"}, "message": "[PR83370][AARCH64]Use tighter register constraint for sibcall patterns.\n\nIn aarch64 backend, ip0/ip1 register will be used in the prologue/epilogue as\ntemporary register.\n\nWhen the compiler is performing sibcall optimization. It has the chance to use\nip0/ip1 register for indirect function call to hold the address. However,\nthose two register might be clobbered by the epilogue code which makes the\nlast sibcall instruction invalid.\n\nThe patch here renames the register class CALLER_SAVE_REGS to TAILCALL_ADDR_REGS\nto reflect its usage, and remove IP registers from this class.\n\ngcc/\n\n2018-02-01  Renlin Li  <renlin.li@arm.com>\n\n\tPR target/83370\n\t* config/aarch64/aarch64.c (aarch64_class_max_nregs): Handle\n\tTAILCALL_ADDR_REGS.\n\t(aarch64_register_move_cost): Likewise.\n\t* config/aarch64/aarch64.h (reg_class): Rename CALLER_SAVE_REGS to\n\tTAILCALL_ADDR_REGS.\n\t(REG_CLASS_NAMES): Likewise.\n\t(REG_CLASS_CONTENTS): Rename CALLER_SAVE_REGS to\n\tTAILCALL_ADDR_REGS. Remove IP registers.\n\t* config/aarch64/aarch64.md (Ucs): Update register constraint.\n\ngcc/testsuite/\n\n2018-02-01  Richard Sandiford  <richard.sandiford@linaro.org>\n\n\tPR target/83370\n\t* gcc.target/aarch64/pr83370.c: New.\n\nFrom-SVN: r257294", "tree": {"sha": "ffcc73195210cedb54a0013ffe86a74100c4a82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffcc73195210cedb54a0013ffe86a74100c4a82e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/comments", "author": null, "committer": null, "parents": [{"sha": "dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3b4a20b5d83aea66758e8da31ce04a8cf3964b"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "8cec738653b15fe1044ea5751cb65012846568ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d677263e6c6ce0b40ca791e97f7b2f4ab0718f03", "patch": "@@ -1,3 +1,16 @@\n+2018-02-01  Renlin Li  <renlin.li@arm.com>\n+\n+\tPR target/83370\n+\t* config/aarch64/aarch64.c (aarch64_class_max_nregs): Handle\n+\tTAILCALL_ADDR_REGS.\n+\t(aarch64_register_move_cost): Likewise.\n+\t* config/aarch64/aarch64.h (reg_class): Rename CALLER_SAVE_REGS to\n+\tTAILCALL_ADDR_REGS.\n+\t(REG_CLASS_NAMES): Likewise.\n+\t(REG_CLASS_CONTENTS): Rename CALLER_SAVE_REGS to\n+\tTAILCALL_ADDR_REGS. Remove IP registers.\n+\t* config/aarch64/aarch64.md (Ucs): Update register constraint.\n+\n 2018-02-01  Richard Biener  <rguenther@suse.de>\n \n \t* domwalk.h (dom_walker::dom_walker): Add additional constructor"}, {"sha": "7c9c6e53169474ab6f51bf4b11db2bd16ed15f60", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d677263e6c6ce0b40ca791e97f7b2f4ab0718f03", "patch": "@@ -7523,7 +7523,7 @@ aarch64_class_max_nregs (reg_class_t regclass, machine_mode mode)\n   unsigned int nregs;\n   switch (regclass)\n     {\n-    case CALLER_SAVE_REGS:\n+    case TAILCALL_ADDR_REGS:\n     case POINTER_REGS:\n     case GENERAL_REGS:\n     case ALL_REGS:\n@@ -9687,10 +9687,10 @@ aarch64_register_move_cost (machine_mode mode,\n     = aarch64_tune_params.regmove_cost;\n \n   /* Caller save and pointer regs are equivalent to GENERAL_REGS.  */\n-  if (to == CALLER_SAVE_REGS || to == POINTER_REGS)\n+  if (to == TAILCALL_ADDR_REGS || to == POINTER_REGS)\n     to = GENERAL_REGS;\n \n-  if (from == CALLER_SAVE_REGS || from == POINTER_REGS)\n+  if (from == TAILCALL_ADDR_REGS || from == POINTER_REGS)\n     from = GENERAL_REGS;\n \n   /* Moving between GPR and stack cost is the same as GP2GP.  */"}, {"sha": "e3c52f63683506a4f5164d55b0812f62b1c2f455", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=d677263e6c6ce0b40ca791e97f7b2f4ab0718f03", "patch": "@@ -507,7 +507,7 @@ extern unsigned aarch64_architecture_version;\n enum reg_class\n {\n   NO_REGS,\n-  CALLER_SAVE_REGS,\n+  TAILCALL_ADDR_REGS,\n   GENERAL_REGS,\n   STACK_REG,\n   POINTER_REGS,\n@@ -526,7 +526,7 @@ enum reg_class\n #define REG_CLASS_NAMES\t\t\t\t\\\n {\t\t\t\t\t\t\\\n   \"NO_REGS\",\t\t\t\t\t\\\n-  \"CALLER_SAVE_REGS\",\t\t\t\t\\\n+  \"TAILCALL_ADDR_REGS\",\t\t\t\t\\\n   \"GENERAL_REGS\",\t\t\t\t\\\n   \"STACK_REG\",\t\t\t\t\t\\\n   \"POINTER_REGS\",\t\t\t\t\\\n@@ -542,7 +542,7 @@ enum reg_class\n #define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000 },\t/* NO_REGS */\t\t\\\n-  { 0x0007ffff, 0x00000000, 0x00000000 },\t/* CALLER_SAVE_REGS */\t\\\n+  { 0x0004ffff, 0x00000000, 0x00000000 },\t/* TAILCALL_ADDR_REGS */\\\n   { 0x7fffffff, 0x00000000, 0x00000003 },\t/* GENERAL_REGS */\t\\\n   { 0x80000000, 0x00000000, 0x00000000 },\t/* STACK_REG */\t\t\\\n   { 0xffffffff, 0x00000000, 0x00000003 },\t/* POINTER_REGS */\t\\"}, {"sha": "f052103e859ebc0c8707d54561216794e0dd3d59", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=d677263e6c6ce0b40ca791e97f7b2f4ab0718f03", "patch": "@@ -21,8 +21,8 @@\n (define_register_constraint \"k\" \"STACK_REG\"\n   \"@internal The stack register.\")\n \n-(define_register_constraint \"Ucs\" \"CALLER_SAVE_REGS\"\n-  \"@internal The caller save registers.\")\n+(define_register_constraint \"Ucs\" \"TAILCALL_ADDR_REGS\"\n+  \"@internal Registers suitable for an indirect tail call\")\n \n (define_register_constraint \"w\" \"FP_REGS\"\n   \"Floating point and SIMD vector registers.\")"}, {"sha": "8fb5c321031badc55099d5ea7dac9538bf2c0157", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d677263e6c6ce0b40ca791e97f7b2f4ab0718f03", "patch": "@@ -1,3 +1,8 @@\n+2018-02-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR target/83370\n+\t* gcc.target/aarch64/pr83370.c: New.\n+\n 2018-02-01  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/graphite/pr35356-1.c: Adjust."}, {"sha": "cde8876279f63c56e1a9ccc925195c136e4de7f1", "filename": "gcc/testsuite/gcc.target/aarch64/pr83370.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr83370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d677263e6c6ce0b40ca791e97f7b2f4ab0718f03/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr83370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr83370.c?ref=d677263e6c6ce0b40ca791e97f7b2f4ab0718f03", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef void (*fun) (void);\n+\n+void __attribute__ ((noipa))\n+f (fun x1)\n+{\n+  register fun x2 asm (\"x16\");\n+  int arr[5000];\n+  int *volatile ptr = arr;\n+  asm (\"mov %0, %1\" : \"=r\" (x2) : \"r\" (x1));\n+  x2 ();\n+}\n+\n+void g (void) {}\n+\n+int\n+main (void)\n+{\n+  f (g);\n+}"}]}