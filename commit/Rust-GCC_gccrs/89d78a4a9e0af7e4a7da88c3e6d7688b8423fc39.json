{"sha": "89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlkNzhhNGE5ZTBhZjdlNGE3ZGE4OGMzZTZkNzY4OGI4NDIzZmMzOQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-04-29T14:25:56Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-27T17:54:43Z"}, "message": "Initial target hook construction\n\nCreation of basic target_os, target_env, target_vendor, and target_family for all GCC targets. Also target_cpu and target_features for i386 - will do target_features for other targets when I can find exactly what is considered a target_feature by rustc", "tree": {"sha": "6f1bdd1945ce974ba5e1f7c56f968b6974dcc126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f1bdd1945ce974ba5e1f7c56f968b6974dcc126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3835d919db31892b755396b5ed8cf1257204389d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3835d919db31892b755396b5ed8cf1257204389d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3835d919db31892b755396b5ed8cf1257204389d"}], "stats": {"total": 1588, "additions": 1555, "deletions": 33}, "files": [{"sha": "0463a80aacf8158ab9707269be7e193a8eae9a92", "filename": "gcc/config/aarch64/aarch64-freebsd.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Faarch64%2Faarch64-freebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Faarch64%2Faarch64-freebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-freebsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -65,6 +65,14 @@\n   }                                           \\\n   while (false)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in aarch64-freebsd.h - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()       \\\n+  do {                              \\\n+    FBSD_TARGET_RUST_OS_INFO ();    \\\n+  } while (0)\n+\n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n \n /* Uninitialized common symbols in non-PIE executables, even with"}, {"sha": "194efc1789cfac3fba0fdc00f6a3d49189d2e562", "filename": "gcc/config/aarch64/aarch64-linux.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-linux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -1,5 +1,5 @@\n /* Machine description for AArch64 architecture.\n-   Copyright (C) 2009-2020 Free Software Foundation, Inc.\n+   Copyright (C) 2009-2019 Free Software Foundation, Inc.\n    Contributed by ARM Ltd.\n \n    This file is part of GCC.\n@@ -64,6 +64,13 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define GNU_USER_TARGET_D_CRITSEC_SIZE 48\n+\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n #define TARGET_ASM_FILE_END aarch64_file_end_indicate_exec_stack\n \n /* Uninitialized common symbols in non-PIE executables, even with"}, {"sha": "0a1c2cafda7695bc91d5383c1628394b45c6ac85", "filename": "gcc/config/aarch64/aarch64-netbsd.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Faarch64%2Faarch64-netbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Faarch64%2Faarch64-netbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-netbsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -52,6 +52,14 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in aarch64-netbsd.h - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC NETBSD_CPP_SPEC\n "}, {"sha": "5e2954b49f65a65191947e29069c043094f4118f", "filename": "gcc/config/aarch64/aarch64-vxworks.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Faarch64%2Faarch64-vxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Faarch64%2Faarch64-vxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-vxworks.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -54,6 +54,14 @@ along with GCC; see the file COPYING3.  If not see\n     VXWORKS_OS_CPP_BUILTINS ();\t\t  \\\n   } while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in aarch64-vxworks.h - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t  \\\n+  do {\t\t\t\t\t  \\\n+    VXWORKS_TARGET_RUST_OS_INFO ();\t\t  \\\n+  } while (0)\n+\n /* Static stack checking is supported.  */\n #define STACK_CHECK_STATIC_BUILTIN 1\n "}, {"sha": "cd622def40b43f646f0ad1b97f1c4ec857cd017a", "filename": "gcc/config/aarch64/rtems.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Faarch64%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Faarch64%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -31,3 +31,16 @@\n \tbuiltin_define (\"__USE_INIT_FINI__\");\t\\\n \tbuiltin_assert (\"system=rtems\");\t\\\n     } while (0)\n+\n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in rtems.h (aarch64) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n\\ No newline at end of file"}, {"sha": "4cbedf1f6821bade3d4493ddcfcc11fca4c68501", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -33,6 +33,14 @@ along with GCC; see the file COPYING3.  If not see\n \t  builtin_define (\"_GNU_SOURCE\");\t\t\t\\\n     } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\t\\\n+  do {\t\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"linux\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"gnu\");\t\t\t\\\n+  } while (0)\n+\n #undef LIB_SPEC\n #define LIB_SPEC \\\n   \"%{pthread:-lpthread} \\"}, {"sha": "3394ebefce3b4e9f6be9be35141be06ca7eb84e0", "filename": "gcc/config/alpha/netbsd.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -23,6 +23,10 @@ along with GCC; see the file COPYING3.  If not see\n \tNETBSD_OS_CPP_BUILTINS_ELF();\t\t\\\n     } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t \t\\\n+  do {\t\t\t\t\t\\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n \n /* NetBSD doesn't use the LANGUAGE* built-ins.  */\n #undef SUBTARGET_LANGUAGE_CPP_BUILTINS"}, {"sha": "2c6d467dfc7b6081d6884ad6df79cc82d74db5d4", "filename": "gcc/config/alpha/openbsd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Falpha%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Falpha%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fopenbsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -48,6 +48,11 @@ along with GCC; see the file COPYING3.  If not see\n \tOPENBSD_OS_CPP_BUILTINS_LP64();\t\t\\\n     } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    OPENBSD_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n /* Layout of source language data types.  */\n \n /* This must agree with <machine/_types.h> */"}, {"sha": "e2d8ae5d504f8c5e62ebd72800cc1a1390a53d63", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -41,6 +41,9 @@ along with GCC; see the file COPYING3.  If not see\n         builtin_define (\"__IEEE_FLOAT\");\t\\\n     } while (0)\n \n+#define SUBTARGET_RUST_OS_INFO()\t\t\\\n+  do {} while (0)\n+\n #undef PCC_STATIC_STRUCT_RETURN\n \n #define MAX_OFILE_ALIGNMENT 524288  /* 8 x 2^16 by DEC Ada Test CD40VRA */"}, {"sha": "f6ca3a1ab6044114367ac6c34bebb8dadf93ceca", "filename": "gcc/config/arc/linux.h", "status": "modified", "additions": 41, "deletions": 30, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -22,21 +22,30 @@ along with GCC; see the file COPYING3.  If not see\n #undef DWARF2_UNWIND_INFO\n #define DWARF2_UNWIND_INFO 1\n \n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      GNU_USER_TARGET_OS_CPP_BUILTINS ();\t\\\n-    }\t\t\t\t\t\t\\\n+#define TARGET_OS_CPP_BUILTINS()                                               \\\n+  do                                                                           \\\n+    {                                                                          \\\n+      GNU_USER_TARGET_OS_CPP_BUILTINS ();                                      \\\n+    }                                                                          \\\n   while (0)\n \n-#define GLIBC_DYNAMIC_LINKER\t\t\t\t\t\\\n+#define TARGET_RUST_OS_INFO()                                                  \\\n+  do                                                                           \\\n+    {                                                                          \\\n+      GNU_USER_TARGET_RUST_OS_INFO ();                                         \\\n+      /*TODO: does this properly register 'linux' as 'target_os'?*/            \\\n+    }                                                                          \\\n+  while (0)\n+\n+#define GLIBC_DYNAMIC_LINKER                                                   \\\n   \"/lib/ld-linux-arc%{mbig-endian:eb}%{mcpu=arc700:700}.so.2\"\n-#define UCLIBC_DYNAMIC_LINKER  \"/lib/ld-uClibc.so.0\"\n+#define UCLIBC_DYNAMIC_LINKER \"/lib/ld-uClibc.so.0\"\n \n /* Note that the default is to link against dynamic libraries, if they are\n    available.  Override with -static.  */\n #undef LINK_SPEC\n-#define LINK_SPEC \"%{h*} \\\n+#define LINK_SPEC                                                              \\\n+  \"%{h*} \\\n   %{static:-Bstatic} \\\n   %{shared:-shared} \\\n   %{symbolic:-Bsymbolic} \\\n@@ -49,15 +58,15 @@ along with GCC; see the file COPYING3.  If not see\n   %{mcpu=nps400:-marclinux_nps; :-marclinux}\"\n \n #undef STARTFILE_SPEC\n-#define STARTFILE_SPEC\t\t\t\t\t\t\t\\\n+#define STARTFILE_SPEC                                                         \\\n   LINUX_OR_ANDROID_LD (GNU_USER_TARGET_STARTFILE_SPEC, ANDROID_STARTFILE_SPEC)\n \n #undef ENDFILE_SPEC\n-#define ENDFILE_SPEC\t\t\t\t\t\t\t\\\n+#define ENDFILE_SPEC                                                           \\\n   LINUX_OR_ANDROID_LD (GNU_USER_TARGET_ENDFILE_SPEC, ANDROID_ENDFILE_SPEC)\n \n #undef LIB_SPEC\n-#define LIB_SPEC  \\\n+#define LIB_SPEC                                                               \\\n   \"%{pthread:-lpthread} \\\n    %{shared:-lc} \\\n    %{!shared:%{profile:-lc_p}%{!profile:-lc}}\"\n@@ -75,14 +84,15 @@ along with GCC; see the file COPYING3.  If not see\n \n /* We do not have any MULTILIB_OPTIONS specified, so there are no\n    MULTILIB_DEFAULTS.  */\n-#undef  MULTILIB_DEFAULTS\n+#undef MULTILIB_DEFAULTS\n \n /* Linux toolchains use r25 as the thread pointer register.  */\n #undef TARGET_ARC_TP_REGNO_DEFAULT\n #define TARGET_ARC_TP_REGNO_DEFAULT 25\n \n #undef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"\\\n+#define SUBTARGET_CPP_SPEC                                                     \\\n+  \"\\\n    %{pthread:-D_REENTRANT} \\\n \"\n \n@@ -103,7 +113,8 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n #undef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"\\\n+#define SUBTARGET_CPP_SPEC                                                     \\\n+  \"\\\n    %{pthread:-D_REENTRANT} \\\n \"\n \n@@ -114,25 +125,25 @@ along with GCC; see the file COPYING3.  If not see\n /* Clear the instruction cache from `beg' to `end'.  This makes an\n    inline system call to SYS_cacheflush.  */\n #undef CLEAR_INSN_CACHE\n-#define CLEAR_INSN_CACHE(beg, end)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  register unsigned long _beg __asm (\"r0\") = (unsigned long) (beg);\t\\\n-  register unsigned long _end __asm (\"r1\") = (unsigned long) (end);\t\\\n-  register unsigned long _xtr __asm (\"r2\") = 0;\t\t\t\t\\\n-  register unsigned long _scno __asm (\"r8\") = 244;\t\t\t\\\n-  __asm __volatile (\"trap_s 0\t\t; sys_cache_sync\"\t\t\\\n-\t\t    : \"=r\" (_beg)\t\t\t\t\t\\\n-\t\t    : \"0\" (_beg), \"r\" (_end), \"r\" (_xtr), \"r\" (_scno));\t\\\n-}\n+#define CLEAR_INSN_CACHE(beg, end)                                             \\\n+  {                                                                            \\\n+    register unsigned long _beg __asm(\"r0\") = (unsigned long) (beg);           \\\n+    register unsigned long _end __asm(\"r1\") = (unsigned long) (end);           \\\n+    register unsigned long _xtr __asm(\"r2\") = 0;                               \\\n+    register unsigned long _scno __asm(\"r8\") = 244;                            \\\n+    __asm __volatile(\"trap_s 0\t\t; sys_cache_sync\"                              \\\n+\t\t     : \"=r\"(_beg)                                              \\\n+\t\t     : \"0\"(_beg), \"r\"(_end), \"r\"(_xtr), \"r\"(_scno));           \\\n+  }\n \n /* Emit rtl for profiling.  Output assembler code to FILE\n    to call \"_mcount\" for profiling a function entry.  */\n-#define PROFILE_HOOK(LABEL)\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-   rtx fun, rt;\t\t\t\t\t\t\t\\\n-   rt = get_hard_reg_initial_val (Pmode, RETURN_ADDR_REGNUM);\t\\\n-   fun = gen_rtx_SYMBOL_REF (Pmode, \"_mcount\");\t\t\t\\\n-   emit_library_call (fun, LCT_NORMAL, VOIDmode, rt, Pmode);\t\\\n+#define PROFILE_HOOK(LABEL)                                                    \\\n+  {                                                                            \\\n+    rtx fun, rt;                                                               \\\n+    rt = get_hard_reg_initial_val (Pmode, RETURN_ADDR_REGNUM);                 \\\n+    fun = gen_rtx_SYMBOL_REF (Pmode, \"_mcount\");                               \\\n+    emit_library_call (fun, LCT_NORMAL, VOIDmode, rt, Pmode);                  \\\n   }\n \n /* Enter/Leave ops are default off for linux targets.  */"}, {"sha": "5e14d9102a18873d2d87eb4c7852efea745fe2ff", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -104,6 +104,17 @@\n #define TARGET_OS_CPP_BUILTINS() \\\n   TARGET_BPABI_CPP_BUILTINS()\n \n+#define BPABI_TARGET_RUST_OS_INFO() \\\n+  do { \\\n+    /*TODO: is this even an OS? What should go here?*/ \\\n+  } while (0)\n+\n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in bpabi.h - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO() \\\n+  BPABI_TARGET_RUST_OS_INFO()\n+\n /* The BPABI specifies the use of .{init,fini}_array.  Therefore, we\n    do not want GCC to put anything into the .{init,fini} sections.  */\n #undef INIT_SECTION_ASM_OP"}, {"sha": "9ceb214afbf51d54dd4d3c807b52ac0ec78a1edd", "filename": "gcc/config/arm/freebsd.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffreebsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -83,6 +83,15 @@\n     }\t\t\t\t\t\t\\\n   while (false)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in freebsd.h (arm) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO() \t\t\\\n+  do {\t\t\t\t\t\t\\\n+    FBSD_TARGET_RUST_OS_INFO ();\t\t\\\n+    BPABI_TARGET_RUST_OS_INFO ();\t\t\\\n+  } while (0)\n+\n /* We default to a soft-float ABI so that binaries can run on all\n    target hardware.  */\n #undef TARGET_DEFAULT_FLOAT_ABI"}, {"sha": "ddbec1deff92cf549da0d238099e16bb2ea64e82", "filename": "gcc/config/arm/linux-eabi.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Flinux-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-eabi.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -33,6 +33,14 @@\n #define EXTRA_TARGET_D_OS_VERSIONS()\t\t\\\n   ANDROID_TARGET_D_OS_VERSIONS();\n \n+#define EXTRA_TARGET_RUST_OS_INFO()\t\t\\\n+  do { \t\t\t\t\t\t\\\n+    BPABI_TARGET_RUST_OS_INFO();\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n+    ANDROID_TARGET_RUST_OS_INFO();\t\t\\\n+    /*TODO: ensure that this makes target_os 'linux' properly and stuff*/ \\\n+  while (0)\n+\n /* We default to a soft-float ABI so that binaries can run on all\n    target hardware.  If you override this to use the hard-float ABI then\n    change the setting of GLIBC_DYNAMIC_LINKER_DEFAULT as well.  */"}, {"sha": "611a4bb23eff6b65d709512e22215334d7138ab3", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -83,6 +83,11 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+   do {\t\t\t\t\t\t\\\n+\t   GNU_USER_TARGET_RUST_OS_INFO();\t\\\n+   } while (0)\n+\n /* Call the function profiler with a given profile label.  */\n #undef  ARM_FUNCTION_PROFILER\n #define ARM_FUNCTION_PROFILER(STREAM, LABELNO)  \t\t\t\\"}, {"sha": "0ccd1afe84c5542000412cea08b503d8fd694231", "filename": "gcc/config/arm/netbsd-eabi.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fnetbsd-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fnetbsd-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd-eabi.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -64,6 +64,16 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in netbsd-eabi.h (arm) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+  \tif (TARGET_AAPCS_BASED)\t\t\t\\\n+      BPABI_TARGET_RUST_OS_INFO();\t\t\\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC NETBSD_CPP_SPEC\n "}, {"sha": "3ac8bb9972eba5abbdb6b66ff6008fe23abffa27", "filename": "gcc/config/arm/netbsd-elf.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd-elf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -51,6 +51,14 @@\n     }\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in netbsd-elf.h (arm) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\\\n+  do {\t\t\t\t\t\\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC NETBSD_CPP_SPEC\n "}, {"sha": "005db1d02bae860aaf96ba93ea330af8dc9fcfc1", "filename": "gcc/config/arm/rtems.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -33,4 +33,18 @@\n \tTARGET_BPABI_CPP_BUILTINS();    \t\\\n     } while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in rtems.h (arm) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family - TODO*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+    BPABI_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n #define ARM_DEFAULT_SHORT_ENUMS false"}, {"sha": "0edb980d073b47602c60d49da9775a672dffd853", "filename": "gcc/config/arm/symbian.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fsymbian.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fsymbian.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsymbian.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -78,6 +78,21 @@\n     }\t\t\t\t\t\t\t\t\\\n   while (false)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in symbian.h (arm) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for symbian, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_vendor - TODO*/ \\\n+    /*some triple examples i've seen are \"arm-nokia-symbian-eabi\" and possibly \"arm-none-symbian-elf\"*/ \\\n+    builtin_rust_info (\"target_family\", \"\");\t\\\n+    builtin_rust_info (\"target_os\", \"symbian\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+    BPABI_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n /* On SymbianOS, these sections are not writable, so we use \"a\",\n    rather than \"aw\", for the section attributes.  */\n #undef ARM_EABI_CTORS_SECTION_OP"}, {"sha": "0026c5d9dcc44726783c9baa49072162575c908f", "filename": "gcc/config/arm/uclinux-eabi.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fuclinux-eabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fuclinux-eabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-eabi.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -46,6 +46,19 @@\n     }\t\t\t\t\t\t\\\n   while (false)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in uclinux-eabi.h (arm) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    BPABI_TARGET_RUST_OS_INFO();\t\\\n+    /*note: as far as I know, rustc does not distinguish between uclinux and regular linux kernels*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t   \\\n+    builtin_rust_info (\"target_os\", \"linux\");\t      \\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"gnu\");\t         \\\n+  } while (0)\n+\n #undef SUBTARGET_EXTRA_LINK_SPEC\n #define SUBTARGET_EXTRA_LINK_SPEC \" -m armelf_linux_eabi -elf2flt\" \\\n   \" --pic-veneer --target2=abs\""}, {"sha": "bb1a5537ce7c6b178c946c4d049df40a7b33f900", "filename": "gcc/config/arm/uclinux-elf.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-elf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -48,6 +48,18 @@\n     }\t\t\t\t\t\t\\\n   while (false)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in uclinux-elf.h (arm) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    /*note: as far as I know, rustc does not distinguish between uclinux and regular linux kernels*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t   \\\n+    builtin_rust_info (\"target_os\", \"linux\");\t      \\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"gnu\");\t         \\\n+  } while (0)\n+\n /* The GNU C++ standard library requires that these macros be defined.  */\n #undef CPLUSPLUS_CPP_SPEC\n #define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\""}, {"sha": "877e9c64c7a08f121be485d00a280133267e0a28", "filename": "gcc/config/arm/vxworks.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Farm%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxworks.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -75,6 +75,20 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n     MAYBE_TARGET_BPABI_CPP_BUILTINS ();\t\t\t\\\n   } while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in vxworks.h (arm) - c++ undefines it and redefines it.\"\n+#endif\n+#ifdef BPABI_TARGET_RUST_OS_INFO\n+# define MAYBE_BPABI_TARGET_RUST_OS_INFO BPABI_TARGET_RUST_OS_INFO\n+#else\n+# define MAYBE_BPABI_TARGET_RUST_OS_INFO()\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\\\n+    VXWORKS_TARGET_RUST_OS_INFO ();\t\t\t\\\n+    MAYBE_BPABI_TARGET_RUST_OS_INFO ();\t\t\t\\\n+  } while (0)\n+\n #undef SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS VXWORKS_OVERRIDE_OPTIONS\n "}, {"sha": "7a7a0ffa3d4254e535732848f9665cf2d3f4589a", "filename": "gcc/config/bfin/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fbfin%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fbfin%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -28,6 +28,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in linux.h (bfin) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n+\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n   \"%{!shared: %{pg|p|profile:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} crtreloc.o%s \\"}, {"sha": "03909049c77bf48d1d29e62a3146cbac95decf76", "filename": "gcc/config/bfin/rtems.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fbfin%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fbfin%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -31,3 +31,13 @@\n       builtin_assert (\"system=rtems\");\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n+\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n\\ No newline at end of file"}, {"sha": "02a74c669ae91a2942f07f924b35dc18b7595f3f", "filename": "gcc/config/bfin/uclinux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fbfin%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fbfin%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fuclinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -27,6 +27,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n+#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n+\n #undef LINK_GCC_C_SEQUENCE_SPEC\n #define LINK_GCC_C_SEQUENCE_SPEC \"\\\n   %{mfast-fp:-lbffastfp} %G %{!nolibc:%L} %{mfast-fp:-lbffastfp} %G \\"}, {"sha": "8e2232171560c221ef4e8f5a6a92383beb2e579a", "filename": "gcc/config/c6x/uclinux-elf.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fc6x%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fc6x%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fuclinux-elf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -32,6 +32,18 @@\n     }\t\t\t\t\t\t\\\n   while (false)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in uclinux-elf.h (c6x) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    /*note: as far as I know, rustc does not distinguish between uclinux and regular linux kernels*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t   \\\n+    builtin_rust_info (\"target_os\", \"linux\");\t      \\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"gnu\");\t         \\\n+  } while (0)\n+\n #undef  STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n   \"%{!shared:crt1%O%s} crti%O%s %{shared|pie:crtbeginS.o%s;:crtbegin.o%s}\""}, {"sha": "26ff944bcac889ebf4efce86f9fa9bf11f15ffff", "filename": "gcc/config/csky/csky-linux-elf.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fcsky%2Fcsky-linux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fcsky%2Fcsky-linux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky-linux-elf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -95,6 +95,11 @@\n     }\t\t\t\t\t    \\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n /* In crtstuff.c to control section in where code resides.\n    We have to write it as asm code.  */\n #ifdef __PIC__"}, {"sha": "5463b21d9b7402bfd7b151d3842974e8b848011f", "filename": "gcc/config/dragonfly.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fdragonfly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fdragonfly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdragonfly.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -35,6 +35,18 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n     }                                       \\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in dragonflybsd.h - c++ undefines it and redefines it.\"\n+/* TODO: ensure that this works correctly and the undef and redef reason is known */\n+#endif\n+#define TARGET_RUST_OS_INFO()                       \\\n+  do {                                              \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\\\n+    builtin_rust_info (\"target_os\", \"dragonfly\");\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\"); \\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t      \\\n+  } while (0)\n+\n #undef  CPP_SPEC\n #define CPP_SPEC \\\n  \"%(cpp_cpu) %(cpp_arch) %{posix:-D_POSIX_SOURCE}\""}, {"sha": "17d17028dd7f8ada4de2d50113fd37ba6706d32b", "filename": "gcc/config/epiphany/rtems.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fepiphany%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fepiphany%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -26,3 +26,16 @@\n \tbuiltin_define (\"__USE_INIT_FINI__\");\t\\\n \tbuiltin_assert (\"system=rtems\");\t\\\n     } while (0)\n+\n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in rtems.h (epiphany) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family - TODO*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+  } while (0)"}, {"sha": "1d00f137f2778fcf05dce34bd08ad5ae422268d1", "filename": "gcc/config/freebsd-spec.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ffreebsd-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ffreebsd-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd-spec.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -49,6 +49,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Define the default FreeBSD-specific per-CPU hook code.  */\n #define FBSD_TARGET_CPU_CPP_BUILTINS() do {} while (0)\n \n+#define FBSD_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n+  do {\t\t\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\\\n+    builtin_rust_info (\"target_os\", \"freebsd\");\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\"); \\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t      \\\n+    /*TODO: is default per-CPU hook code required here?*/ \\\n+  } while (0)\n+\n /* Provide a CPP_SPEC appropriate for FreeBSD.  We just deal with the GCC \n    option `-posix', and PIC issues.  */\n "}, {"sha": "2fb9c7a82582525dafc1df8b3f7aa322cc8b934a", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -32,6 +32,11 @@ along with GCC; see the file COPYING3.  If not see\n #undef  TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS() FBSD_TARGET_OS_CPP_BUILTINS()\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in freebsd.h - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO() FBSD_TARGET_RUST_OS_INFO()\n+\n #undef  CPP_SPEC\n #define CPP_SPEC FBSD_CPP_SPEC\n "}, {"sha": "d3c4ddc51509dde83b89673c87746298025a0e1f", "filename": "gcc/config/frv/linux.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ffrv%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ffrv%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -57,6 +57,14 @@\n     builtin_assert (\"system=linux\");\t\\\n   } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\\\n+  do {\t\t\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    builtin_rust_info (\"target_os\", \"linux\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"gnu\");\t\\\n+  } while (0)\n+\n #define HAS_INIT_SECTION 1\n #define INIT_SECTION_ASM_OP\t\"\\t.section .init,\\\"ax\\\"\"\n #define FINI_SECTION_ASM_OP\t\"\\t.section .fini,\\\"ax\\\"\""}, {"sha": "a511f22bc5e765128a68669df6bbf9a83670df7b", "filename": "gcc/config/fuchsia.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ffuchsia.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ffuchsia.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffuchsia.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -66,3 +66,19 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (false)\n \n+#ifndef EXTRA_TARGET_RUST_OS_INFO\n+#define EXTRA_TARGET_RUST_OS_INFO()\n+#endif\n+\n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in fuchsia.h - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\\\n+\t/*NOTE: target_family is subject to change if rustc decides to change it to non-unix*/ \\\n+    builtin_rust_info (\"target_os\", \"fuchsia\");\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"\"); \\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t      \\\n+\tEXTRA_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)"}, {"sha": "ba19edf90e4e56025c17bed303bef01efa5e45ef", "filename": "gcc/config/gnu.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fgnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fgnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgnu.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -37,3 +37,12 @@ along with GCC.  If not, see <http://www.gnu.org/licenses/>.\n \tbuiltin_version (\"Hurd\");\t\t\\\n \tbuiltin_version (\"CRuntime_Glibc\");\t\\\n     } while (0)\n+\n+#define GNU_USER_TARGET_RUST_OS_INFO()\t\t\\\n+\tdo { /*is this correct? or should os be \"hurd\"?*/ \\\n+\tbuiltin_rust_info (\"target_family\", \"unix\");\t\\\n+\tbuiltin_rust_info (\"target_os\", \"gnu\");\t\\\n+\tbuiltin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+\tbuiltin_rust_info (\"target_env\", \"\");\t\t\t\\\n+\t/* TODO: is target_env required?*/ \\\n+\t} while (0)\n\\ No newline at end of file"}, {"sha": "62fdccce42e54641037be39a443b5f149d224a25", "filename": "gcc/config/h8300/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fh8300%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fh8300%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -29,6 +29,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\\\n+  do {\t\t\t\t\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n #undef LINK_SPEC\n #define LINK_SPEC \"%{mh:-mh8300helf_linux} %{ms:-m h8300self_linux} %{msx:-m h8300sxelf_linux}\"\n "}, {"sha": "2441e0c65873129f2962780c5259200398f75763", "filename": "gcc/config/i386/crtdll.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fcrtdll.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcrtdll.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -31,6 +31,18 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef EXTRA_TARGET_RUST_OS_INFO\n+# error \"EXTRA_TARGET_RUST_OS_INFO already defined in crtdll.h (i386) - c++ undefines it and redefines it.\"\n+#endif\n+#define EXTRA_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"windows\");\t\\\n+    builtin_rust_info (\"target_os\", \"windows\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"pc\");\t\\\n+    /*TODO: is this the right target_env? it says gnu tools up there, but env may change.*/ \\\n+    builtin_rust_info (\"target_env\", \"gnu\");\t\\\n+  } while (0)\n+\n #undef LIBGCC_SPEC\n #define LIBGCC_SPEC \\\n   \"%{mthreads:-lmingwthrd} -lmingw32 -lgcc -lcoldname -libmingwex -lcrtdll\""}, {"sha": "8ff8cde0e5df0e13eb4bcb7feb4605cca76d493d", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -160,6 +160,11 @@ along with GCC; see the file COPYING3.  If not see\n   }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+  \tEXTRA_TARGET_RUST_OS_INFO ();\t\t\t\t\t\\\n+  } while (0)\n+\n /* Get tree.c to declare a target-specific specialization of\n    merge_decl_attributes.  */\n #define TARGET_DLLIMPORT_DECL_ATTRIBUTES 1"}, {"sha": "d784ca1981248b979e3fef641010bc72ede9b1c2", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -29,6 +29,16 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define EXTRA_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    /*TODO: derived from llvm triple - rustc has no support for cygwin, but follows llvm triple*/ \\\n+    /*target_family is defined as unix due to posix-compliance, but this is subject to change*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    builtin_rust_info (\"target_os\", \"windows\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"cygnus\");\t\\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC \"%(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\\n   %{!ansi:-Dunix} \\"}, {"sha": "e8f6fd56147e98cb26fc16d19f0192704adf65e1", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -81,6 +81,16 @@ along with GCC; see the file COPYING3.  If not see\n     darwin_cpp_builtins (pfile);\t\t\\\n   } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    /*TODO: rust actually has \"macos\", \"ios\", and \"tvos\" for darwin targets, but gcc seems to have no*/ \\\n+    /*current support for them, so assuming that target_os is always macos for now*/ \\\n+    builtin_rust_info (\"target_os\", \"macos\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"apple\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+  } while (0)\n+\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n "}, {"sha": "a5265d7a1dd5c3be6168bb2b1dd660a07e2f633a", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -57,6 +57,15 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*rustc has no support for this, so values are taken from rusty-dos' djgpp github issue guesses*/ \\\n+    builtin_rust_info (\"target_family\", \"windows\");\t\\\n+    builtin_rust_info (\"target_os\", \"msdos\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"pc\");\t\\\n+    builtin_rust_info (\"target_env\", \"djgpp\");\t\\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC \"-remap %{posix:-D_POSIX_SOURCE}\"\n "}, {"sha": "60801cc636ca66e7f46c8231951cbb875fe99e41", "filename": "gcc/config/i386/gnu-user-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -36,6 +36,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\t\t\\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "44ca0c9e096b4f86342dbffa97926cd32d45044a", "filename": "gcc/config/i386/i386-rust.c", "status": "added", "additions": 236, "deletions": 0, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fi386-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fi386-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-rust.c?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -0,0 +1,236 @@\n+/* Subroutines for the Rust front end on the x86 architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+// FIXME: remove: this is only here to make intellisense happy\n+#include \"i386.h\"\n+\n+// HACK: allows conversion of (presumably) numeric values to string\n+#ifndef STR_HELPER_RUST\n+ #define STR_HELPER_RUST(x) #x\n+#else\n+ #error \"STR_HELPER_RUST already defined!!!\"\n+#endif\n+\n+#ifndef STRINGIFY_RUST\n+ #define STRINGIFY_RUST(x) STR_HELPER_RUST(x)\n+#else\n+ #error \"STRINGIFY_RUST already defined!!!\"\n+#endif\n+\n+/* Implement TARGET_RUST_CPU_INFO for x86 targets.  */\n+\n+void\n+ix86_rust_target_cpu_info (void)\n+{\n+    if (TARGET_64BIT) {\n+        rust_add_target_info(\"target_arch\", \"x86_64\");\n+\n+        // TODO: should these go here or is there a platform-neutral way of getting them (since they aren't defined in i386-c.c or i386-d.c)?\n+        rust_add_target_info(\"target_pointer_width\", STRINGIFY_RUST(POINTER_SIZE));\n+        rust_add_target_info(\"target_endian\", BYTES_BIG_ENDIAN ? \"big\" : \"little\");\n+\n+        if (TARGET_X32) {\n+            // this means it uses 32-bit pointers with 64-bit, basically (ILP32)\n+            rust_add_target_info(\"target_pointer_width\", \"32\");\n+            // TODO: may also change x86_64-...-linux-gnu to x86_64-...-linux-gnux32\n+\n+            // is this better than just putting in pointer width outside of if statement?\n+\n+            /* TODO: compared to base linux, may also need to change max_atomic_width to 64, add \"-mx32\"\n+             * to pre-link args, make stack_probes true, make has_elf_tls false, make needs_plt true.\n+             * Also, still target_endian is \"little\", target_c_int_width is \"32\", maybe steal data layout\n+             * later from rustc spec, target_os is \"linux\", target_env is \"gnu\", target_vendor is \"unknown\"\n+             * There is no rustc support for non-gnu/linux targets with ILP32. */\n+        }\n+    } else {\n+        rust_add_target_info(\"target_arch\", \"x86\");\n+    }\n+\n+    // maybe more stuff I don't understand if evidenced by ix86_target_macros in i386-c.c\n+\n+    // note: options that don't seem to have a target feature in rust are commented out\n+\n+    if (isa_flag2 & OPTION_MASK_ISA_WBNOINVD)\n+    //def_or_undef (parse_in, \"__WBNOINVD__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_AVX512VP2INTERSECT)\n+    //def_or_undef (parse_in, \"__AVX512VP2INTERSECT__\");\n+  if (isa_flag & OPTION_MASK_ISA_MMX)\n+    rust_add_target_info(\"target_feature\", \"mmx\");\n+  if (isa_flag & OPTION_MASK_ISA_3DNOW)\n+    //def_or_undef (parse_in, \"__3dNOW__\");\n+  if (isa_flag & OPTION_MASK_ISA_3DNOW_A)\n+    //def_or_undef (parse_in, \"__3dNOW_A__\");\n+  if (isa_flag & OPTION_MASK_ISA_SSE)\n+    rust_add_target_info(\"target_feature\", \"sse\");\n+  if (isa_flag & OPTION_MASK_ISA_SSE2)\n+    rust_add_target_info(\"target_feature\", \"sse2\");\n+  if (isa_flag & OPTION_MASK_ISA_SSE3)\n+    rust_add_target_info(\"target_feature\", \"sse3\");\n+  if (isa_flag & OPTION_MASK_ISA_SSSE3)\n+    rust_add_target_info(\"target_feature\", \"ssse3\");\n+  if (isa_flag & OPTION_MASK_ISA_SSE4_1)\n+    rust_add_target_info(\"target_feature\", \"sse4.1\");\n+  if (isa_flag & OPTION_MASK_ISA_SSE4_2)\n+    rust_add_target_info(\"target_feature\", \"sse4.2\");\n+  if (isa_flag & OPTION_MASK_ISA_AES)\n+    rust_add_target_info(\"target_feature\", \"aes\");\n+  if (isa_flag & OPTION_MASK_ISA_SHA)\n+    rust_add_target_info(\"target_feature\", \"sha\");\n+  if (isa_flag & OPTION_MASK_ISA_PCLMUL)\n+    //def_or_undef (parse_in, \"__PCLMUL__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX)\n+    rust_add_target_info(\"target_feature\", \"avx\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX2)\n+    rust_add_target_info(\"target_feature\", \"avx2\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512F)\n+    //def_or_undef (parse_in, \"__AVX512F__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512ER)\n+    //def_or_undef (parse_in, \"__AVX512ER__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512CD)\n+    //def_or_undef (parse_in, \"__AVX512CD__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512PF)\n+    //def_or_undef (parse_in, \"__AVX512PF__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512DQ)\n+    //def_or_undef (parse_in, \"__AVX512DQ__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512BW)\n+    //def_or_undef (parse_in, \"__AVX512BW__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512VL)\n+    //def_or_undef (parse_in, \"__AVX512VL__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512VBMI)\n+    //def_or_undef (parse_in, \"__AVX512VBMI__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512IFMA)\n+    //def_or_undef (parse_in, \"__AVX512IFMA__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_AVX5124VNNIW)\n+    //def_or_undef (parse_in, \"__AVX5124VNNIW__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512VBMI2)\n+    //def_or_undef (parse_in, \"__AVX512VBMI2__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512VNNI)\n+    //def_or_undef (parse_in, \"__AVX512VNNI__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_PCONFIG)\n+    //def_or_undef (parse_in, \"__PCONFIG__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_SGX)\n+    //def_or_undef (parse_in, \"__SGX__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_AVX5124FMAPS)\n+    //def_or_undef (parse_in, \"__AVX5124FMAPS__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512BITALG)\n+    //def_or_undef (parse_in, \"__AVX512BITALG__\");\n+  if (isa_flag & OPTION_MASK_ISA_AVX512VPOPCNTDQ)\n+    //def_or_undef (parse_in, \"__AVX512VPOPCNTDQ__\");\n+  if (isa_flag & OPTION_MASK_ISA_FMA)\n+    rust_add_target_info(\"target_feature\", \"fma\");\n+  if (isa_flag & OPTION_MASK_ISA_RTM)\n+    //def_or_undef (parse_in, \"__RTM__\");\n+  if (isa_flag & OPTION_MASK_ISA_SSE4A)\n+    //def_or_undef (parse_in, \"__SSE4A__\");\n+  if (isa_flag & OPTION_MASK_ISA_FMA4)\n+    //def_or_undef (parse_in, \"__FMA4__\");\n+  if (isa_flag & OPTION_MASK_ISA_XOP)\n+    //def_or_undef (parse_in, \"__XOP__\");\n+  if (isa_flag & OPTION_MASK_ISA_LWP)\n+    //def_or_undef (parse_in, \"__LWP__\");\n+  if (isa_flag & OPTION_MASK_ISA_ABM)\n+    //def_or_undef (parse_in, \"__ABM__\");\n+  if (isa_flag & OPTION_MASK_ISA_BMI)\n+    rust_add_target_info(\"target_feature\", \"bmi1\");\n+  if (isa_flag & OPTION_MASK_ISA_BMI2)\n+    rust_add_target_info(\"target_feature\", \"bmi2\");\n+  if (isa_flag & OPTION_MASK_ISA_LZCNT)\n+    rust_add_target_info(\"target_feature\", \"lzcnt\");\n+  if (isa_flag & OPTION_MASK_ISA_TBM)\n+    //def_or_undef (parse_in, \"__TBM__\");\n+  if (isa_flag & OPTION_MASK_ISA_POPCNT)\n+    rust_add_target_info(\"target_feature\", \"popcnt\");\n+  if (isa_flag & OPTION_MASK_ISA_FSGSBASE)\n+    //def_or_undef (parse_in, \"__FSGSBASE__\");\n+  if (isa_flag & OPTION_MASK_ISA_RDRND)\n+    rust_add_target_info(\"target_feature\", \"rdrand\");\n+  if (isa_flag & OPTION_MASK_ISA_F16C)\n+    //def_or_undef (parse_in, \"__F16C__\");\n+  if (isa_flag & OPTION_MASK_ISA_RDSEED)\n+    rust_add_target_info(\"target_feature\", \"rdseed\");\n+  if (isa_flag & OPTION_MASK_ISA_PRFCHW)\n+    //def_or_undef (parse_in, \"__PRFCHW__\");\n+  if (isa_flag & OPTION_MASK_ISA_ADX)\n+    //def_or_undef (parse_in, \"__ADX__\");\n+  if (isa_flag & OPTION_MASK_ISA_FXSR)\n+    rust_add_target_info(\"target_feature\", \"fxsr\");\n+  if (isa_flag & OPTION_MASK_ISA_XSAVE)\n+    rust_add_target_info(\"target_feature\", \"xsave\");\n+  if (isa_flag & OPTION_MASK_ISA_XSAVEOPT)\n+    rust_add_target_info(\"target_feature\", \"xsaveopt\");\n+  if (isa_flag & OPTION_MASK_ISA_PREFETCHWT1)\n+    //def_or_undef (parse_in, \"__PREFETCHWT1__\");\n+  if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE))\n+    //def_or_undef (parse_in, \"__SSE_MATH__\");\n+  if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE2))\n+    //def_or_undef (parse_in, \"__SSE2_MATH__\");\n+  if (isa_flag & OPTION_MASK_ISA_CLFLUSHOPT)\n+    //def_or_undef (parse_in, \"__CLFLUSHOPT__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_CLZERO)\n+    //def_or_undef (parse_in, \"__CLZERO__\");\n+  if (isa_flag & OPTION_MASK_ISA_XSAVEC)\n+    rust_add_target_info(\"target_feature\", \"xsavec\");\n+  if (isa_flag & OPTION_MASK_ISA_XSAVES)\n+    rust_add_target_info(\"target_feature\", \"xsaves\");\n+  if (isa_flag & OPTION_MASK_ISA_CLWB)\n+    //def_or_undef (parse_in, \"__CLWB__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_MWAITX)\n+    //def_or_undef (parse_in, \"__MWAITX__\");\n+  if (isa_flag & OPTION_MASK_ISA_PKU)\n+    //def_or_undef (parse_in, \"__PKU__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_RDPID)\n+    //def_or_undef (parse_in, \"__RDPID__\");\n+  if (isa_flag & OPTION_MASK_ISA_GFNI)\n+    //def_or_undef (parse_in, \"__GFNI__\");\n+  if ((isa_flag & OPTION_MASK_ISA_SHSTK))\n+    //def_or_undef (parse_in, \"__SHSTK__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_VAES)\n+    //def_or_undef (parse_in, \"__VAES__\");\n+  if (isa_flag & OPTION_MASK_ISA_VPCLMULQDQ)\n+    rust_add_target_info(\"target_feature\", \"pclmulqdq\");\n+  if (isa_flag & OPTION_MASK_ISA_MOVDIRI)\n+    //def_or_undef (parse_in, \"__MOVDIRI__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_MOVDIR64B)\n+    //def_or_undef (parse_in, \"__MOVDIR64B__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_WAITPKG)\n+    //def_or_undef (parse_in, \"__WAITPKG__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_CLDEMOTE)\n+    //def_or_undef (parse_in, \"__CLDEMOTE__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_PTWRITE)\n+    //def_or_undef (parse_in, \"__PTWRITE__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_AVX512BF16)\n+    //def_or_undef (parse_in, \"__AVX512BF16__\");\n+  if (TARGET_MMX_WITH_SSE)\n+    //def_or_undef (parse_in, \"__MMX_WITH_SSE__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_ENQCMD)\n+    //def_or_undef (parse_in, \"__ENQCMD__\");\n+  if (TARGET_IAMCU)\n+    {\n+      //def_or_undef (parse_in, \"__iamcu\");\n+      //def_or_undef (parse_in, \"__iamcu__\");\n+    }\n+}\n+\n+#undef STR_HELPER_RUST\n+#undef STRINGIFY_RUST\n\\ No newline at end of file"}, {"sha": "494f136cb1c247c55ef9b4f71cc5ae85b53a0b46", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -801,6 +801,9 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n /* Target CPU versions for D.  */\n #define TARGET_D_CPU_VERSIONS ix86_d_target_versions\n \n+/* Target CPU info for Rust.  */\n+#define TARGET_RUST_CPU_INFO ix86_rust_target_cpu_info \n+\n #ifndef CC1_SPEC\n #define CC1_SPEC \"%(cc1_cpu) \"\n #endif"}, {"sha": "96dc632463fe1b991930c0dcb661f4806f686d74", "filename": "gcc/config/i386/linux-common.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Flinux-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Flinux-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux-common.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -30,6 +30,17 @@ along with GCC; see the file COPYING3.  If not see\n #define EXTRA_TARGET_D_OS_VERSIONS()\t\t\\\n   ANDROID_TARGET_D_OS_VERSIONS();\n \n+#define EXTRA_TARGET_RUST_OS_INFO()\t\t\\\n+  ANDROID_TARGET_RUST_OS_INFO();\n+// TODO: decide on whether following c frontend style or d one - leaning towards c\n+\n+#undef TARGET_RUST_OS_INFO\n+#define TARGET_RUST_OS_INFO()               \\\n+  do {                                      \\\n+    GNU_USER_TARGET_RUST_OS_INFO();         \\\n+    ANDROID_TARGET_RUST_OS_INFO();          \\\n+  } while (0)\n+\n #undef CC1_SPEC\n #define CC1_SPEC \\\n   LINUX_OR_ANDROID_CC (GNU_USER_TARGET_CC1_SPEC, \\"}, {"sha": "92eae0a842ce226a5ccc90b08528dcdebae31072", "filename": "gcc/config/i386/lynx.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flynx.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -25,6 +25,15 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*TODO: not supported by rustc and so subject to change - based on llvm triple*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    builtin_rust_info (\"target_os\", \"lynxos\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+  } while (0)\n+\n /* The svr4 ABI for the i386 says that records and unions are returned\n    in memory.  */\n "}, {"sha": "b6e8a5744f8088e76acfe818d1e091a834ebedea", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -53,6 +53,14 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define EXTRA_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"windows\");\t\\\n+    builtin_rust_info (\"target_os\", \"windows\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"pc\");\t\\\n+    builtin_rust_info (\"target_env\", \"gnu\");\t\\\n+  } while (0)\n+\n #ifndef TARGET_USE_PTHREAD_BY_DEFAULT\n #define SPEC_PTHREAD1 \"pthread\"\n #define SPEC_PTHREAD2 \"!no-pthread\""}, {"sha": "1a8d5456b51168b0e7616cc2ba6e6329f2a0d933", "filename": "gcc/config/i386/netbsd-elf.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -26,6 +26,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n \n /* Extra specs needed for NetBSD/i386 ELF.  */\n "}, {"sha": "86dc79f12de616c7772d4e10a188d165fcb6d5ba", "filename": "gcc/config/i386/netbsd64.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fnetbsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd64.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -26,6 +26,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n \n /* Extra specs needed for NetBSD/x86-64 ELF.  */\n "}, {"sha": "2dbe65248d10e78b4a057c8f2ec9e1350be929fc", "filename": "gcc/config/i386/nto.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fnto.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fnto.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnto.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -36,6 +36,18 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in nto.h (i386) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*TODO: not supported by rustc and so subject to change - based on triple found online*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    builtin_rust_info (\"target_os\", \"nto\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"pc\");\t\\\n+    builtin_rust_info (\"target_env\", \"qnx\");\t\\\n+  } while (0)\n+\n #undef THREAD_MODEL_SPEC\n #define THREAD_MODEL_SPEC \"posix\"\n "}, {"sha": "5c135b45a7a6fd88a4c08e62e8795ab925b939c1", "filename": "gcc/config/i386/openbsdelf.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -25,6 +25,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    OPENBSD_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) \\\n   (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])"}, {"sha": "b87a05b6edf494c681133e6748dc7ef58ef30476", "filename": "gcc/config/i386/rdos.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Frdos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Frdos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frdos.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -37,3 +37,14 @@ along with GCC; see the file COPYING3.  If not see\n       builtin_assert (\"system=rdos\");\t\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n+\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*TODO: not supported by rustc and so subject to change - based on triple found online*/ \\\n+    /*this seems to not refer to the 70s Data General RDOS, but one partly compatible with win32*/ \\\n+    /*as such, target_family could be windows*/ \\\n+    builtin_rust_info (\"target_family\", \"\");\t\\\n+    builtin_rust_info (\"target_os\", \"rdos\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"pc\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+  } while (0)"}, {"sha": "c81dbbf58b040b3321fcef29e53882df56e791be", "filename": "gcc/config/i386/rtemself.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Frtemself.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -33,3 +33,13 @@\n \tbuiltin_assert (\"system=rtems\");\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n+\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)"}, {"sha": "3cc012fb24147e080a9e13a8b0790bfd55cea44f", "filename": "gcc/config/i386/t-i386", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Ft-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Ft-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -45,6 +45,10 @@ i386-d.o: $(srcdir)/config/i386/i386-d.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n+i386-rust.o: $(srcdir)/config/i386/i386-rust.c\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n i386-options.o: $(srcdir)/config/i386/i386-options.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}, {"sha": "275fd6939406d0880f10fd497c396f13b0b2893e", "filename": "gcc/config/i386/vxworks.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fi386%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvxworks.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -113,6 +113,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    VXWORKS_TARGET_RUST_OS_INFO();\t\t\t\\\n+  } while (0)\n+\n #undef  CPP_SPEC\n #define CPP_SPEC VXWORKS_ADDITIONAL_CPP_SPEC\n #undef  CC1_SPEC"}, {"sha": "44e3cc23966768b7cc19d1af62623bff223b1eb8", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -52,6 +52,15 @@ do {\t\t\t\t\t\t\t\\\n \t  builtin_define(\"_ILP32\");\t\t\t\\\n } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    /*TODO: rustc has no supported for hp-ux, so this is subject to change (and guessed)*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"hpux\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"hp\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC \\\n   \"%{mt|pthread:-D_REENTRANT -D_THREAD_SAFE -D_POSIX_C_SOURCE=199506L}\""}, {"sha": "282066d06375aaa0a66c6aa7f37da379e39a0d0b", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -34,6 +34,11 @@ do {\t\t\t\t\t\t\\\n \tbuiltin_define(\"_LONGLONG\");\t\t\\\n } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n /* Need to override linux.h STARTFILE_SPEC, since it has crtbeginT.o in.  */\n #undef STARTFILE_SPEC\n #ifdef HAVE_LD_PIE"}, {"sha": "9da1a87760ac7fcc27dc87e6b35bf9e7b182a7e3", "filename": "gcc/config/ia64/vms.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fia64%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fia64%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvms.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -26,6 +26,9 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_define (\"__IEEE_FLOAT\");\t\\\n     } while (0)\n \n+#define SUBTARGET_RUST_OS_INFO()\t\t\\\n+  do {} while (0)\n+\n /* Need .debug_line info generated from gcc and gas.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_DWARF2_ASM | MASK_GNU_AS)"}, {"sha": "2d99475bd623ea22f9f72dce17e720097152f110", "filename": "gcc/config/kfreebsd-gnu.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fkfreebsd-gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fkfreebsd-gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fkfreebsd-gnu.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -35,6 +35,14 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_version (\"CRuntime_Glibc\");\t\\\n     } while (0)\n \n+#define GNU_USER_TARGET_RUST_OS_INFO()\t\t\\\n+    do {\t\t\t\t\t\\\n+  builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+  builtin_rust_info (\"target_os\", \"kfreebsd\");\t\t\t\\\n+  builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+  builtin_rust_info (\"target_env\", \"gnu\");\t\t\t\\\n+    } while (0)\n+\n #define GNU_USER_DYNAMIC_LINKER        GLIBC_DYNAMIC_LINKER\n #define GNU_USER_DYNAMIC_LINKER32      GLIBC_DYNAMIC_LINKER32\n #define GNU_USER_DYNAMIC_LINKER64      GLIBC_DYNAMIC_LINKER64"}, {"sha": "9045f660c1e25d28abecf9e7ffdb4fda73941846", "filename": "gcc/config/kopensolaris-gnu.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fkopensolaris-gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fkopensolaris-gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fkopensolaris-gnu.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -36,5 +36,17 @@ along with GCC; see the file COPYING3.  If not see\n \tbuiltin_version (\"CRuntime_Glibc\");\t\\\n     } while (0)\n \n+#ifdef GNU_USER_TARGET_RUST_OS_INFO\n+# error # error \"TARGET_RUST_OS_INFO already defined in kopensolaris-gnu.h - c++ undefines it and redefines it.\"\n+#endif\n+#define GNU_USER_TARGET_RUST_OS_INFO()\t\t\\\n+    do {\t\t\t\t\t\\\n+  builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+  builtin_rust_info (\"target_os\", \"kopensolaris\");\t\t\t\\\n+  /*the target_os is maybe not right but i can't find any better atm*/ \\\n+  builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+  builtin_rust_info (\"target_env\", \"gnu\");\t\t\t\\\n+    } while (0)\n+\n #undef GNU_USER_DYNAMIC_LINKER\n #define GNU_USER_DYNAMIC_LINKER \"/lib/ld.so.1\""}, {"sha": "9bff9d80d7ef6fb57f8518031bb44f94d40e459f", "filename": "gcc/config/linux-android.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Flinux-android.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Flinux-android.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux-android.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -31,6 +31,18 @@\n \t  builtin_version (\"Android\");\t\t\t\t\\\n     } while (0)\n \n+#define ANDROID_TARGET_RUST_OS_INFO()\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+  if (TARGET_ANDROID)\t{\t\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"android\");\t\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\t\\\n+  } else {\t\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"linux\");\t\t\t\t\\\n+  }\t/*this else is required if I'm intepreting structure of defines correctly*/\t\t\t\\\n+    } while (0)\n+\n #if ANDROID_DEFAULT\n # define NOANDROID \"mno-android\"\n #else"}, {"sha": "ae8f67be925f7e02ace217d87e7dfbf94fd06b95", "filename": "gcc/config/linux.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -66,6 +66,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \t  builtin_version (\"CRuntime_Musl\");\t\t\t\\\n     } while (0)\n \n+#define GNU_USER_TARGET_RUST_OS_INFO()\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+  builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+  builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+  /*is there way of determining target_os and target_env here since could also be android?*/\t\t\\\n+  /*target_vendor may not be \"unknown\" - FIXME ensure it is*/  \\\n+    } while (0)\n+\n /* Determine which dynamic linker to use depending on whether GLIBC or\n    uClibc or Bionic or musl is the default C library and whether\n    -muclibc or -mglibc or -mbionic or -mmusl has been passed to change"}, {"sha": "f9964c35257fa48e111149e7f37b99039d8895d4", "filename": "gcc/config/lm32/rtems.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Flm32%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Flm32%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -33,5 +33,18 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in rtems.h (lm32) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family - TODO*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+  } while (0)\n+\n /* Use the default */\n #undef LINK_GCC_C_SEQUENCE_SPEC"}, {"sha": "07757e0f01f5e27cfd8f4bad894af5841e95efe2", "filename": "gcc/config/lm32/uclinux-elf.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Flm32%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Flm32%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Fuclinux-elf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -67,6 +67,8 @@\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n+#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n+\n #define LINK_GCC_C_SEQUENCE_SPEC \\\n   \"%{static|static-pie:--start-group} %G %{!nolibc:%L} \\\n    %{static|static-pie:--end-group}%{!static:%{!static-pie:%G}}\""}, {"sha": "a85bf234c8f8401855404a69e0daef98494e65ec", "filename": "gcc/config/m32c/rtems.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm32c%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm32c%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -34,5 +34,18 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in rtems.h (m32c) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family - TODO*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+  } while (0)\n+\n /* Use the default */\n #undef LINK_GCC_C_SEQUENCE_SPEC"}, {"sha": "ac1ac1813eb69e96a8872bf944453f4b507d9029", "filename": "gcc/config/m32r/linux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm32r%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm32r%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -88,4 +88,6 @@\n                                                                                 \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n+#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n+\n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack"}, {"sha": "0e846d9fa4cbe7b1776e5f4644a3c8af27effbca", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -60,6 +60,8 @@ along with GCC; see the file COPYING3.  If not see\n /* Target OS builtins.  */\n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n+#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n+\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "2d062db39189e74ef7ddc802508175717c1da51c", "filename": "gcc/config/m68k/m68kemb.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Fm68kemb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Fm68kemb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kemb.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -39,6 +39,16 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*TODO: assuming that embedded means \"no operating system\", at least by rustc terms*/ \\\n+    /*basing this all on embedinomicon sample targets*/ \\\n+    builtin_rust_info (\"target_family\", \"\");\t\\\n+    builtin_rust_info (\"target_os\", \"none\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+  } while (0)\n+\n /* Override the default LIB_SPEC from gcc.c.  We don't currently support\n    profiling, or libg.a.  */\n "}, {"sha": "87118021d2e51f078087dc48662a165c722aa1bd", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -35,6 +35,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+   do {\t\t\t\t\t\t\\\n+      NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n+   } while (0)\n+\n /* Don't try using XFmode on the 68010.  */ \n #undef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_68020 ? 80 : 64)"}, {"sha": "49931996844f647648811c9dc13078b751daab56", "filename": "gcc/config/m68k/openbsd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fopenbsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -28,6 +28,11 @@ along with GCC; see the file COPYING3.  If not see\n    }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+   do {\t\t\t\t\t\t\\\n+      OPENBSD_TARGET_RUST_OS_INFO();\t\\\n+   } while (0)\n+\n /* Define __HAVE_68881__ in preprocessor, unless -msoft-float is specified.\n    This will control the use of inline 68881 insns in certain macros.  */\n #undef CPP_SPEC"}, {"sha": "695ff50d908a85f0f72876fea357487e249217c1", "filename": "gcc/config/m68k/rtemself.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Frtemself.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -36,3 +36,14 @@\n \tbuiltin_assert (\"system=rtems\");\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n+\n+#undef TARGET_RUST_OS_INFO /* This undef is actually necessary because m68kemb.h assumes embedded.  */\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family - TODO*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+  } while (0)"}, {"sha": "47f5bb5e9dcf9a2488ac4c75efbab780f307becf", "filename": "gcc/config/m68k/uclinux.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fm68k%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fuclinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -58,6 +58,19 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in uclinux.h (m68k) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    /*note: as far as I know, rustc does not distinguish between uclinux and regular linux kernels*/ \\\n+    /*TODO: check whether defining this as GNU_USER_TARGET_RUST_OS_INFO would have different behaviour*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t   \\\n+    builtin_rust_info (\"target_os\", \"linux\");\t      \\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"gnu\");\t         \\\n+  } while (0)\n+\n /* -msep-data is the default PIC mode on this target.  */\n #define DRIVER_SELF_SPECS \\\n   \"%{\" FPIE_OR_FPIC_SPEC \":%{!msep-data:%{!mid-shared-library: -msep-data}}}\""}, {"sha": "feb70331526770be2b3c7567aeef1b6018bdca08", "filename": "gcc/config/microblaze/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmicroblaze%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmicroblaze%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -58,4 +58,9 @@\n #undef TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in linux.h (microblaze) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n+\n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack"}, {"sha": "0a494a305a4ea82bbe1636885f03184d3204ed7f", "filename": "gcc/config/microblaze/rtems.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmicroblaze%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmicroblaze%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -29,6 +29,14 @@\n   builtin_assert( \"system=rtems\" );\t\t\\\n } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+  } while (0)\n+\n /* Redefine to include only items relevant for RTEMS */\n #undef LINK_SPEC\n #define LINK_SPEC \"%{shared:-shared} -N -relax \\"}, {"sha": "d385bdcb52a6e1c3fa5edd46bfd6c65634455a9f", "filename": "gcc/config/mips/gnu-user.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgnu-user.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -38,6 +38,11 @@ along with GCC; see the file COPYING3.  If not see\n       builtin_define (\"_GNU_SOURCE\");\t\t\t\t\\\n   } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\t\t\t\\\n+  } while (0)\n+\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "5b41c247e6f4cd02421fbe4305824eb6ae86e1a1", "filename": "gcc/config/mips/linux-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Flinux-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Flinux-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux-common.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -30,6 +30,10 @@ along with GCC; see the file COPYING3.  If not see\n #define EXTRA_TARGET_D_OS_VERSIONS()\t\t\t\t\\\n   ANDROID_TARGET_D_OS_VERSIONS();\n \n+#define EXTRA_TARGET_RUST_OS_INFO()\t\t\t\t\\\n+  ANDROID_TARGET_RUST_OS_INFO();\n+/*TODO: ensure that correct target data is being set here. */\n+\n #undef  LINK_SPEC\n #define LINK_SPEC\t\t\t\t\t\t\t\\\n   LINUX_OR_ANDROID_LD (GNU_USER_TARGET_LINK_SPEC,\t\t\t\\"}, {"sha": "4056e2aa5ca3f20028dac56c164a3070e0768eaf", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -45,6 +45,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n /* The generic MIPS TARGET_CPU_CPP_BUILTINS are incorrect for NetBSD.\n    Specifically, they define too many namespace-invasive macros.  Override\n    them here.  Note this is structured for easy comparison to the version"}, {"sha": "84017cc005d0949767a4bc5cdf78b5f1b3c14205", "filename": "gcc/config/mips/rtems.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -32,6 +32,16 @@ do {\t\t\t\t\t\\\n   builtin_assert (\"system=rtems\");\t\\\n } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n /* No sdata.\n  * The RTEMS BSPs expect -G0\n  */"}, {"sha": "cd7e678c91df14a97e9334b33795cec100bfc3ba", "filename": "gcc/config/mips/sdemtk.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Fsdemtk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Fsdemtk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsdemtk.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -53,6 +53,17 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    /*TODO: WTF is SDE and why can't I find any info on it? is it even a real os?*/ \\\n+    /*note: as far as I know, rustc has no supported for sde, so this is just guessed*/ \\\n+    /*literally everything is subject to change because of the lack of info I can find on it*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"sde\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n /* For __clear_cache in libgcc2.c.  */\n #ifdef IN_LIBGCC2\n extern void mips_sync_icache (void *beg, unsigned long len);"}, {"sha": "484010e4289f61252e8600d0274678e9490b9d1b", "filename": "gcc/config/mips/vxworks.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmips%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvxworks.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -58,6 +58,11 @@ VXWORKS_LINK_SPEC\n     }                                                   \\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\\\n+    VXWORKS_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC VXWORKS_ADDITIONAL_CPP_SPEC\n "}, {"sha": "a8ee7d9d21cdd4b3d7815c2d22d136232ed76125", "filename": "gcc/config/mn10300/linux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmn10300%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmn10300%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -24,6 +24,8 @@\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n+#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n+\n #undef  CPP_SPEC\n #define CPP_SPEC \"%{mam33:-D__AM33__} %{!mam33:-D__AM33__=2 -D__AM33_2__} \\\n   %{posix:-D_POSIX_SOURCE} \\"}, {"sha": "496e749ae7cd609b7f31c17ba919fa8502cdd70c", "filename": "gcc/config/moxie/moxiebox.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmoxie%2Fmoxiebox.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmoxie%2Fmoxiebox.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxiebox.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -28,6 +28,16 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*TODO: rustc has no supported for moxiebox, so this is just guessed - values subject to change*/ \\\n+    /*I can find virtually no info on target triples, so target_family and target_vendor most of all*/ \\\n+    builtin_rust_info (\"target_family\", \"\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"moxiebox\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n #undef LIB_SPEC\n #define LIB_SPEC \\\n \"%{!T*:-Tmoxiebox.ld} \\"}, {"sha": "0cdadff804a9dea94f3acafd6098c12afbef7acb", "filename": "gcc/config/moxie/rtems.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmoxie%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmoxie%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -33,6 +33,16 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n #undef LINK_SPEC\n #undef SIZE_TYPE\n #undef PTRDIFF_TYPE"}, {"sha": "7c3da7e8c10792ac43fbeaceda30ae69aba44b5e", "filename": "gcc/config/moxie/uclinux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmoxie%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fmoxie%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fuclinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -30,6 +30,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n+#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n+\n #undef TARGET_LIBC_HAS_FUNCTION\n #define TARGET_LIBC_HAS_FUNCTION no_c99_libc_has_function\n "}, {"sha": "a809afd727f3b6a27ae3f14dc97d81827e550c6e", "filename": "gcc/config/nds32/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fnds32%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fnds32%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -36,6 +36,11 @@\n     }                                           \\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()                 \\\n+  do {                                        \\\n+    GNU_USER_TARGET_RUST_OS_INFO();           \\\n+  } while (0)\n+\n #ifdef TARGET_BIG_ENDIAN_DEFAULT\n #define LD_SO_ENDIAN_SPEC \"%{mlittle-endian:le}%{!mlittle-endian:be}\"\n #else"}, {"sha": "b5fbb44f95c8a92f11510f967d51de0672bb67c5", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -29,6 +29,15 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+/* TARGET_RUST_OS_INFO() common to all NetBSD targets.  */\n+#define NETBSD_TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"netbsd\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n /* CPP_SPEC parts common to all NetBSD targets.  */\n #define NETBSD_CPP_SPEC\t\t\t\t\\\n   \"%{posix:-D_POSIX_SOURCE} \\"}, {"sha": "bbc32cff03c5145151aea5da792702e58601b5f1", "filename": "gcc/config/nios2/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fnios2%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fnios2%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -26,6 +26,11 @@\n     }                                           \\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()                 \\\n+  do {                                        \\\n+    GNU_USER_TARGET_RUST_OS_INFO();           \\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "d24c2c7e362cf193b9cca0caff223ffc1f601353", "filename": "gcc/config/nios2/rtems.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fnios2%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fnios2%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -32,6 +32,16 @@ do {                                    \\\n   builtin_assert (\"system=rtems\");      \\\n } while (0)\n \n+#define TARGET_RUST_OS_INFO()                         \\\n+  do {                                                \\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");      \\\n+    builtin_rust_info (\"target_os\", \"rtems\");         \\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");   \\\n+    builtin_rust_info (\"target_env\", \"\");             \\\n+  } while (0)\n+\n /* This toolchain implements the ABI for Linux Systems documented in the\n    Nios II Processor Reference Handbook.\n "}, {"sha": "4660aed4fea087afa49e4b23b544e0f91914c0b1", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -102,6 +102,14 @@ while (0)\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define OPENBSD_TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\\\n+    builtin_rust_info (\"target_os\", \"openbsd\");\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\"); \\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t      \\\n+  } while(0)\n+\n /* CPP_SPEC appropriate for OpenBSD. We deal with -posix and -pthread.\n    XXX the way threads are handled currently is not very satisfying,\n    since all code must be compiled with -pthread to work. "}, {"sha": "20b33fd26f8808604f9330cafd43c18f44f4c190", "filename": "gcc/config/or1k/linux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2For1k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2For1k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -27,6 +27,8 @@\n #define TARGET_OS_CPP_BUILTINS() \\\n   GNU_USER_TARGET_OS_CPP_BUILTINS ()\n \n+#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n+\n #define GLIBC_DYNAMIC_LINKER \"/lib/ld-linux-or1k.so.1\"\n \n #undef MUSL_DYNAMIC_LINKER"}, {"sha": "a3a79f3896f5f7f2455205972d098660d8f73783", "filename": "gcc/config/or1k/rtems.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2For1k%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2For1k%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -29,5 +29,19 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in rtems.h (or1k) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n #define RTEMS_STARTFILE_SPEC \"crtbegin%O%s\"\n #define RTEMS_ENDFILE_SPEC \"crtend%O%s\"\n+"}, {"sha": "abfb826bf96819517f96a2f57e99f6212e01963f", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -89,6 +89,18 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in pa-hpux.h (pa) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    /*TODO: rustc has no supported for hp-ux, so this is subject to change (and guessed)*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"hpux\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"hp\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n /* Like the default, except no -lg.  */\n #undef LIB_SPEC\n #define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p: -L/lib/libp/ -lc}%{pg: -L/lib/libp/ -lc}}\""}, {"sha": "22e1ea2b869f903a6babca41a87f9100f64c77f6", "filename": "gcc/config/pa/pa-hpux10.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -90,6 +90,18 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in pa-hpux10.h (pa) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    /*TODO: rustc has no supported for hp-ux, so this is subject to change (and guessed)*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"hpux\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"hp\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n #define CPP_SPEC \"%{threads: -D_REENTRANT -D_DCE_THREADS}\"\n \n /* We can debug dynamically linked executables on hpux9; we also want"}, {"sha": "bc7e653d7d091e82cf5e8e340909410ad68e0139", "filename": "gcc/config/pa/pa-hpux11.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -119,6 +119,18 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in pa-hpux11.h (pa) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    /*TODO: rustc has no supported for hp-ux, so this is subject to change (and guessed)*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"hpux\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"hp\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC \\\n   \"%{mt|pthread:-D_REENTRANT -D_THREAD_SAFE -D_POSIX_C_SOURCE=199506L}\""}, {"sha": "f3bf7633c98efa2bb327b53d31f2ab984c863ac6", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -27,6 +27,14 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in pa-linux.h (pa) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "20b796bc9dee5117fd8917b02846d65dac1955cf", "filename": "gcc/config/pa/pa-netbsd.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-netbsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -27,6 +27,14 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in pa-netbsd.h (pa) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC NETBSD_CPP_SPEC\n "}, {"sha": "be0b4b9771688cad060a1f444dbbabb566efcf6d", "filename": "gcc/config/pa/pa-openbsd.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-openbsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -27,6 +27,14 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in pa-openbsd.h (pa) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    OPENBSD_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n /* Our profiling scheme doesn't LP labels and counter words.  */\n #define NO_DEFERRED_PROFILE_COUNTERS 1\n "}, {"sha": "64e792acc74ef3c4f00fb65700793114634f266b", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -199,6 +199,8 @@ do {\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* TODO: is a TARGET_RUST_OS_INFO() required here? probably not */\n+\n #define CC1_SPEC \"%{pg:} %{p:}\"\n \n #define LINK_SPEC \"%{mlinker-opt:-O} %{!shared:-u main} %{shared:-b}\""}, {"sha": "b90c6606d47dd58c157b3ceb1325e1744d324b1c", "filename": "gcc/config/phoenix.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fphoenix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fphoenix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fphoenix.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -26,6 +26,18 @@ along with GCC; see the file COPYING3.  If not see\n       builtin_assert (\"system=unix\");      \\\n     } while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in phoenix.h - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()                       \\\n+  do {                                              \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\\\n+    builtin_rust_info (\"target_os\", \"phoenix\");\t\t  \\\n+    builtin_rust_info (\"target_vendor\", \"unknown\"); \\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t      \\\n+    /*TODO: ensure these values are correct*/       \\\n+  } while(0)\n+\n #define STD_LIB_SPEC \"%{!shared:%{g*:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}}\"\n \n /* This will prevent selecting 'unsigned long int' instead of 'unsigned int' as 'uint32_t' in stdint-newlib.h. */"}, {"sha": "3c4c37827b53fe7841d5519f48336d6f4fd46849", "filename": "gcc/config/riscv/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Friscv%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Friscv%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -22,6 +22,11 @@ along with GCC; see the file COPYING3.  If not see\n     GNU_USER_TARGET_OS_CPP_BUILTINS();\t\t\t\t\\\n   } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\t\t\t\\\n+  } while (0)\n+\n #define GLIBC_DYNAMIC_LINKER \"/lib/ld-linux-riscv\" XLEN_SPEC \"-\" ABI_SPEC \".so.1\"\n \n #define MUSL_ABI_SUFFIX \\"}, {"sha": "5de70274e2d7037fb9d7e6ddf3c514c333a41559", "filename": "gcc/config/riscv/rtems.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Friscv%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Friscv%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -29,3 +29,16 @@\n \tbuiltin_define (\"__USE_INIT_FINI__\");\t\\\n \tbuiltin_assert (\"system=rtems\");\t\\\n     } while (0)\n+\n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in rtems.h (riscv) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)"}, {"sha": "f5283305ecae42596b17010179ccf4f788d95810", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -168,6 +168,16 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define AIX_TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for aix, so this is just guessed from triple*/ \\\n+    /*target_vendor is subject to change (and target_env to a lesser extent)*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"aix\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"ibm\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n /* Define appropriate architecture macros for preprocessor depending on\n    target switches.  */\n "}, {"sha": "690f395166c197f8fbc0c26a18c0959c0b3ef5a4", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -110,6 +110,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }                                \\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in aix61.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    AIX_TARGET_RUST_OS_INFO (); \\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\t\\\n   %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\"}, {"sha": "f74913ec0b8dca98bfc4c72cf4e868d9761e1c30", "filename": "gcc/config/rs6000/aix71.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Faix71.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Faix71.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix71.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -112,6 +112,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }                                \\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in aix71.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    AIX_TARGET_RUST_OS_INFO (); \\\n+  } while (0)\n+\n #define CPP_SPEC32 \"\"\n #define CPP_SPEC64 \"-D__64BIT__\"\n #define CPP_SPEC_COMMON \"%{posix: -D_POSIX_SOURCE} \\"}, {"sha": "62c2f8725a4bdced192d1a6ec2079d6005f9b6aa", "filename": "gcc/config/rs6000/aix72.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Faix72.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Faix72.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix72.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -113,6 +113,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }                                \\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in aix72.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    AIX_TARGET_RUST_OS_INFO (); \\\n+  } while (0)\n+\n #define CPP_SPEC32 \"\"\n #define CPP_SPEC64 \"-D__64BIT__\"\n #define CPP_SPEC_COMMON \"%{posix: -D_POSIX_SOURCE} \\"}, {"sha": "54e1829c57dfc1e5986f3840e365229b2f9ee72b", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -74,6 +74,16 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    /*TODO: rust actually has \"macos\", \"ios\", and \"tvos\" for darwin targets, but gcc seems to have no*/ \\\n+    /*current support for them, so assuming that target_os is always macos for now*/ \\\n+    builtin_rust_info (\"target_os\", \"macos\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"apple\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+  } while (0)\n+\n #define SUBTARGET_OVERRIDE_OPTIONS darwin_rs6000_override_options ()\n \n #define C_COMMON_OVERRIDE_OPTIONS do {\t\t\t\t\t\\"}, {"sha": "ebb2ac64b6e29689228957d384f647e908e86797", "filename": "gcc/config/rs6000/eabi.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -39,3 +39,15 @@\n       TARGET_OS_SYSV_CPP_BUILTINS ();     \\\n     }                                     \\\n   while (0)\n+\n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in eabi.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()                 \\\n+  do {                                        \\\n+    /*TODO: values here are assumed from rustc's \"bare metal\" template*/ \\\n+    builtin_rust_info (\"target_family\", \"\");  \\\n+    builtin_rust_info (\"target_os\", \"none\");  \\\n+    builtin_rust_info (\"target_vendor\", \"\");  \\\n+    builtin_rust_info (\"target_env\", \"\");     \\\n+  } while (0)"}, {"sha": "37cfeb6a5d9ed6c41fa020ccde3461f45a29e371", "filename": "gcc/config/rs6000/eabisim.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Feabisim.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Feabisim.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabisim.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -34,6 +34,18 @@\n     }                                      \\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in eabisim.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()                 \\\n+  do {                                        \\\n+    /*TODO: values here are assumed from rustc's \"bare metal\" template*/ \\\n+    builtin_rust_info (\"target_family\", \"\");  \\\n+    builtin_rust_info (\"target_os\", \"none\");  \\\n+    builtin_rust_info (\"target_vendor\", \"\");  \\\n+    builtin_rust_info (\"target_env\", \"\");     \\\n+  } while (0)\n+\n /* Make the simulator the default */\n #undef\tLIB_DEFAULT_SPEC\n #define LIB_DEFAULT_SPEC \"%(lib_sim)\""}, {"sha": "793eb0062edd2adbac91f191c29a22bb5f758776", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -59,6 +59,14 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in linux.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()          \\\n+  do {                                 \\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n #undef\tCPP_OS_DEFAULT_SPEC\n #define CPP_OS_DEFAULT_SPEC \"%(cpp_os_linux)\"\n "}, {"sha": "4bbb3f3e6f7a4c1052c2862d940bf8933477d712", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -314,6 +314,14 @@ extern int dot_symbols;\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in linux64.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()          \\\n+  do {                                 \\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n #undef  CPP_OS_DEFAULT_SPEC\n #define CPP_OS_DEFAULT_SPEC \"%(cpp_os_linux) %(include_extra)\"\n "}, {"sha": "5d9f488cda69f72a2a357dec34208490ffa6d886", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -71,6 +71,18 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in lynx.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*TODO: not supported by rustc and so subject to change - based on llvm triple*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\\\n+    builtin_rust_info (\"target_os\", \"lynxos\");\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\\\n+  } while (0)\n+\n /* LynxOS does not do anything with .fixup plus let's not create\n    writable section for linkonce.r and linkonce.t.  */\n "}, {"sha": "8cfcbb4efd9124fce01209d76815d72da0e6b604", "filename": "gcc/config/rs6000/netbsd.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fnetbsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -34,6 +34,14 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in netbsd.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()          \\\n+  do {                                 \\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n /* Override the default from rs6000.h to avoid conflicts with macros\n    defined in NetBSD header files.  */\n "}, {"sha": "e928657aaf7f0221432b6df71c92e59c8f84125e", "filename": "gcc/config/rs6000/rtems.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -72,6 +72,19 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in rtems.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n /* Copy and paste from linux64.h and freebsd64.h */\n #undef RELOCATABLE_NEEDS_FIXUP\n #define RELOCATABLE_NEEDS_FIXUP \\"}, {"sha": "0e3020c5010dd42a0c89c45711fe80040b5df3b4", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -548,6 +548,19 @@ extern int fixuplabelno;\n   while (0)\n #endif\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in sysv4.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*TODO: everything in here is just guessed from gcc triples and assumptions - nothing really*/ \\\n+    /*targets system v anymore so hard to find info on it. as such, everything subject to change*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"sysv4\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n /* Select one of BIG_OPT, LITTLE_OPT or DEFAULT_OPT depending\n    on various -mbig, -mlittle and -mcall- options.  */\n #define ENDIAN_SELECT(BIG_OPT, LITTLE_OPT, DEFAULT_OPT)\t\\"}, {"sha": "c5f690b14471a7a893283bc00a975b5b336cc734", "filename": "gcc/config/rs6000/vxworks.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxworks.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -103,6 +103,13 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in vxworks.h (rs6000) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\\\n+    VXWORKS_TARGET_RUST_OS_INFO ();\t\t\t\\\n+  } while (0)\n \n #define VX_CPUDEF(CPUID) \\\n   \":-D\" VX_CPU_PREFIX \"CPU=\" VX_CPU_PREFIX #CPUID"}, {"sha": "ca90e0510fd2e8237f8f164404eb5f967ca4583a", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -48,6 +48,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n \n /* Target specific assembler settings.  */\n /* Rewrite -march=arch* options to the original CPU name in order to"}, {"sha": "208236d9ceaf7b65750c372c69c196a4a576b096", "filename": "gcc/config/s390/tpf.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fs390%2Ftpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fs390%2Ftpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ftpf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -69,6 +69,19 @@ along with GCC; see the file COPYING3.  If not see\n     }                                           \\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in tpf.h (s390) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\\\n+    /*TODO: everything in here is just guessed from gcc triples as rustc has no support*/ \\\n+    /*as such, stuff subject to change*/ \\\n+    builtin_rust_info (\"target_family\", \"\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"tpf\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"ibm\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n \n #define EXTRA_SPECS                             \\\n   { \"entry_spec\", ENTRY_SPEC }"}, {"sha": "0711d01afc8674f079848eaadef15560de323416", "filename": "gcc/config/sh/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsh%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsh%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -37,6 +37,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n   (TARGET_CPU_DEFAULT | TARGET_ENDIAN_DEFAULT | TARGET_OPT_DEFAULT)"}, {"sha": "0aaa8c08dc8f68f29abb2e942f4461c8f3fe7d30", "filename": "gcc/config/sh/netbsd-elf.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fnetbsd-elf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -35,6 +35,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\\\n+  } while (0)\n+\n /* Provide a LINK_SPEC appropriate for a NetBSD/sh ELF target.\n    We use the SH_LINK_SPEC from sh/sh.h, and define the appropriate\n    SUBTARGET_LINK_SPEC that pulls in what we need from a generic"}, {"sha": "f41038ccec7fff733ee588b11e3dce3d39518239", "filename": "gcc/config/sh/rtems.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsh%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsh%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -29,3 +29,13 @@\n   builtin_define( \"__rtems__\" );\t\t\\\n   builtin_assert( \"system=rtems\" );\t\t\\\n } while (0)\n+\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)"}, {"sha": "6004e1536d585a1bfe3a932656a3b7220447eb41", "filename": "gcc/config/sh/rtemself.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsh%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsh%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Frtemself.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -29,3 +29,13 @@\n   builtin_define( \"__rtems__\" );\t\t\\\n   builtin_assert( \"system=rtems\" );\t\t\\\n } while (0)\n+\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)"}, {"sha": "6b0c14dc13a351166f170ea17600f9e3f36803d3", "filename": "gcc/config/sh/vxworks.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsh%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsh%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fvxworks.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -28,6 +28,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    VXWORKS_TARGET_RUST_OS_INFO ();\t\t\\\n+  } while (0)\n+\n #undef SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\"}, {"sha": "09ca1ee0711691bb17dfe109b24090d7bb719494", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -124,6 +124,16 @@ along with GCC; see the file COPYING3.  If not see\n     solaris_override_options ();\t\t\t\\\n   } while (0)\n \n+#define EXTRA_TARGET_RUST_OS_INFO()\n+#define TARGET_RUST_OS_INFO()\t\t\t\\\n+  do {\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"solaris\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"sun\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+    EXTRA_TARGET_RUST_OS_INFO();\t\t\t\\\n+  } while (0)\n+\n #if DEFAULT_ARCH32_P\n #define MULTILIB_DEFAULTS { \"m32\" }\n #else"}, {"sha": "9825626f6d309c74c897f493bf919ebd9ee29f39", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -27,6 +27,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n   GNU_USER_TARGET_ENDFILE_SPEC \\"}, {"sha": "9655d461563a69d4b33c7cb32b5bf446404c6eeb", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -30,6 +30,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    GNU_USER_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n /* On Linux, the combination sparc64-* --with-cpu=v8 is supported and\n    selects a 32-bit compiler.  */\n #if defined(TARGET_64BIT_DEFAULT) && TARGET_CPU_DEFAULT >= TARGET_CPU_v9"}, {"sha": "d4716a8236862bb6c8e2906cc4b6b1a1d65a03ef", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -35,6 +35,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n /* CPP defines used by all NetBSD targets.  */\n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"%(netbsd_cpp_spec)\""}, {"sha": "222c12ed3c9a8f486111ada37304590abb46a8f9", "filename": "gcc/config/sparc/openbsd64.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fopenbsd64.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -41,6 +41,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    OPENBSD_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n -s %{\" FPIE_OR_FPIC_SPEC \":-K PIC} \\"}, {"sha": "9caec89e95787436786477a76ec5de6982357470", "filename": "gcc/config/sparc/rtemself.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Frtemself.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Frtemself.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Frtemself.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -36,5 +36,18 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in rtemself.h (sparc) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n /* Use the default */\n #undef LINK_GCC_C_SEQUENCE_SPEC"}, {"sha": "3b0427c71696955afb81aaedf26262218cb56953", "filename": "gcc/config/sparc/vxworks.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fsparc%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxworks.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -27,6 +27,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    VXWORKS_TARGET_RUST_OS_INFO ();\t\t\\\n+  } while (0)\n+\n #undef SUBTARGET_OVERRIDE_OPTIONS\n #define SUBTARGET_OVERRIDE_OPTIONS VXWORKS_OVERRIDE_OPTIONS\n "}, {"sha": "20e82a6e2714f99d5855ffd72d3aa7c4d1bf5b87", "filename": "gcc/config/tilegx/linux.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ftilegx%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ftilegx%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -18,6 +18,12 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*TODO: ensure that this is all that needs to be defined*/ \\\n+    GNU_USER_TARGET_RUST_OS_INFO ();\t\t\\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC \"%{pthread:-D_REENTRANT}\"\n "}, {"sha": "fb5da5d029920af89d8ac0c0aea037e3567eb1c4", "filename": "gcc/config/tilepro/linux.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ftilepro%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Ftilepro%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -18,6 +18,12 @@\n    along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*TODO: ensure that this is all that needs to be defined*/ \\\n+    GNU_USER_TARGET_RUST_OS_INFO ();\t\t\\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC \"%{pthread:-D_REENTRANT}\"\n "}, {"sha": "d23840f2d63b72d5f68cf240f4daabc45f060534", "filename": "gcc/config/v850/rtems.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fv850%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fv850%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Frtems.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -32,6 +32,16 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    /*note: as far as I know, rustc has no supported for rtems, so this is just guessed*/ \\\n+    /*everything is subject to change, especially target_env and target_family*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"rtems\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+  } while (0)\n+\n /* Map mv850e1 and mv850es to mv850e to match MULTILIB_MATCHES */\n #undef  ASM_SPEC\n #define ASM_SPEC \"%{mv850es:-mv850e} \\"}, {"sha": "46b2e9c19741ccf7248a0c6bca23d67b9fddcab0", "filename": "gcc/config/vax/linux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvax%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvax%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -20,6 +20,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n+#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n+\n /* We use GAS, G-float double and want new DI patterns.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_QMATH | MASK_G_FLOAT)"}, {"sha": "1a9590b05aab5e5dcf345ebcd71ba2d0eb9caa66", "filename": "gcc/config/vax/netbsd-elf.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvax%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvax%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fnetbsd-elf.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -27,6 +27,14 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in netbsd-elf.h (vax) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    NETBSD_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n #undef CPP_SPEC\n #define CPP_SPEC NETBSD_CPP_SPEC\n "}, {"sha": "65a01046ab12c47c37a6c6225b052456a4798668", "filename": "gcc/config/vax/openbsd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvax%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvax%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fopenbsd.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -29,6 +29,11 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    OPENBSD_TARGET_RUST_OS_INFO();\t\t\\\n+  } while (0)\n+\n /* Layout of source language data types.  */\n \n /* This must agree with <machine/ansi.h>  */"}, {"sha": "be323decf54f1242dd741c16da27f23c885071d9", "filename": "gcc/config/vms/vms.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvms%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvms%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -38,6 +38,19 @@ along with GCC; see the file COPYING3.  If not see\n     builtin_define_with_int_value (\"__VMS_VER\", vms_c_get_vms_ver ());   \\\n   } while (0)\n \n+#define TARGET_RUST_OS_INFO()\t\t\t\t\t \\\n+  do {\t\t\t\t\t \\\n+    /*target_family (and others) are subject to change - no support by rustc so unknown values - TODO*/ \\\n+    /*target_family written as unix because of supposed POSIX-compliance*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"vms\");\t\t\t\\\n+    /*target_vendor written as unknown because i don't know what it would be (maybe HP?)*/ \\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\t\t\\\n+    /*target_env is empty as not a gnu target environment*/ \\\n+    builtin_rust_info (\"target_env\", \"\");\t\t\t\\\n+    SUBTARGET_RUST_OS_INFO();\t\t\t\t\t \\\n+  } while (0)\n+\n extern void vms_c_register_includes (const char *, const char *, int);\n #define TARGET_EXTRA_INCLUDES vms_c_register_includes\n "}, {"sha": "0dfafd6c643d9b5d06a08655c57bccb6c42502a4", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -265,6 +265,14 @@ extern void vxworks_asm_out_destructor (rtx symbol, int priority);\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define VXWORKS_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n+  do {\t\t\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"vxworks\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"wrs\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"gnu\");\t\t\t\\\n+  } while (0)\n+\n /* For specific CPU macro definitions expected by the system headers,\n    different versions of VxWorks expect different forms of macros,\n    such as \"_VX_CPU=...\" on Vx7 and some variants of Vx6, or \"CPU=...\""}, {"sha": "94c2049c260aff3daba410a38f04fe0aca123296", "filename": "gcc/config/vxworksae.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvxworksae.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fvxworksae.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworksae.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -73,6 +73,15 @@ along with GCC; see the file COPYING3.  If not see\n     }                                                                   \\\n   while (0)\n \n+#define VXWORKS_TARGET_RUST_OS_INFO()\t\t\t\t\t\\\n+  do {\t\t\t\t\t\\\n+    builtin_rust_info (\"target_family\", \"unix\");\t\t\t\\\n+    builtin_rust_info (\"target_os\", \"vxworks\");\t\t\t\\\n+    builtin_rust_info (\"target_vendor\", \"wrs\");\t\t\t\\\n+    builtin_rust_info (\"target_env\", \"gnu\");\t\t\t\\\n+    /*is env correct? vxworks.h implies that this might not come with a gnu toolchain*/ \\\n+  } while (0)\n+\n /* Do VxWorks-specific parts of TARGET_OPTION_OVERRIDE.  */\n \n /* None of the VxWorks AE/653/MILS ports to date has native TLS support.  */"}, {"sha": "5f54c7ac8baf06ab381fc51ef12fd179f24c4a01", "filename": "gcc/config/xtensa/linux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fxtensa%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fxtensa%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -20,6 +20,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TARGET_OS_CPP_BUILTINS() GNU_USER_TARGET_OS_CPP_BUILTINS()\n \n+#define TARGET_RUST_OS_INFO() GNU_USER_TARGET_RUST_OS_INFO()\n+\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "f9551870cc5d6c28e8f9a479511a825dd4d00bd7", "filename": "gcc/config/xtensa/uclinux.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fxtensa%2Fuclinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Fconfig%2Fxtensa%2Fuclinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fuclinux.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -27,6 +27,19 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#ifdef TARGET_RUST_OS_INFO\n+# error \"TARGET_RUST_OS_INFO already defined in uclinux.h (xtensa) - c++ undefines it and redefines it.\"\n+#endif\n+#define TARGET_RUST_OS_INFO()\t\t\\\n+  do {\t\t\t\t\t\\\n+    /*note: as far as I know, rustc does not distinguish between uclinux and regular linux kernels*/ \\\n+    builtin_rust_info (\"target_family\", \"unix\");\t   \\\n+    builtin_rust_info (\"target_os\", \"linux\");\t      \\\n+    builtin_rust_info (\"target_vendor\", \"unknown\");\t\\\n+    builtin_rust_info (\"target_env\", \"gnu\");\t         \\\n+    /*TODO: is GNU_USER_TARGET_RUST_OS_INFO() better here or is hardcoded stuff fine?*/ \\\n+  } while (0)\n+\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n "}, {"sha": "c3ae4daedc8b34ab8320235f45332268bd105a60", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -42,6 +42,8 @@\n #include \"rust-parse.h\"\n #include \"rust-session-manager.h\"\n \n+#include \"rust-target.h\"\n+\n // Language-dependent contents of a type. GTY() mark used for garbage collector.\n struct GTY(()) lang_type {\n     char dummy;\n@@ -74,6 +76,11 @@ struct GTY(()) language_function {\n // Kinda HACK-ish - store parsing session as static variable\n static Rust::Session session;\n \n+// has to be in same compilation unit as session, so here for now\n+void rust_add_target_info(const char* key, const char* value) {\n+    session.options.target_data.insert_key_value_pair(key, value);\n+}\n+\n /* Language hooks.  */\n \n /* Initial lang hook called (possibly), used for initialisation."}, {"sha": "a52e1a5621a08d2a3e47406d4d36706fccf65daf", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -3,9 +3,14 @@\n #include \"diagnostic.h\"\n #include \"input.h\"\n \n+#include \"target.h\"\n+#include \"tm.h\"\n+\n #include \"rust-lex.h\"\n #include \"rust-parse.h\"\n \n+#include \"rust-target.h\"\n+\n #include <algorithm>\n \n extern Linemap* rust_get_linemap();\n@@ -193,7 +198,13 @@ namespace Rust {\n     }\n \n     void Session::init() {\n-        // nothing yet\n+# define builtin_rust_info(KEY, VALUE) rust_add_target_info (KEY, VALUE)\n+\n+        // initialise target hooks\n+        targetrustm.rust_cpu_info();\n+        targetrustm.rust_os_info();\n+        \n+#undef builtin_rust_info\n     }\n \n     // Initialise default options. Actually called before handle_option, unlike init itself.\n@@ -428,7 +439,7 @@ namespace Rust {\n     }\n \n     // TODO: move somewhere else\n-    bool contains_name(::std::vector<AST::Attribute> attrs, ::std::string name) {\n+    bool contains_name(const std::vector<AST::Attribute>& attrs, std::string name) {\n         for (const auto& attr : attrs) {\n             if (attr.get_path() == name) {\n                 return true;"}, {"sha": "d64bbce302db023d8e675ff7c1a10ac5678da279", "filename": "gcc/rust/rust-target-def.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Frust%2Frust-target-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Frust%2Frust-target-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target-def.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -0,0 +1,20 @@\n+/* rust-target-def.h -- Default initializers for Rust target hooks.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"rust/rust-target-hooks-def.h\"\n+#include \"tree.h\"\n+#include \"hooks.h\""}, {"sha": "3f375cbc782a54ba054968b95aa858bc65f366ba", "filename": "gcc/rust/rust-target.def", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Frust%2Frust-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Frust%2Frust-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target.def?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -0,0 +1,89 @@\n+/* rust-target.def -- Target hook definitions for the Rust front end.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* See target-hooks-macros.h for details of macros that should be\n+   provided by the including file, and how to use them here.  */\n+\n+#include \"target-hooks-macros.h\"\n+\n+#undef HOOK_TYPE\n+#define HOOK_TYPE \"Rust Target Hook\"\n+\n+HOOK_VECTOR (TARGETRUSTM_INITIALIZER, gcc_targetrustm)\n+\n+#undef HOOK_PREFIX\n+#define HOOK_PREFIX \"TARGET_\"\n+\n+/* Environmental CPU info and features (e.g. endianness, pointer size) relating to the target CPU.  */\n+DEFHOOK\n+(rust_cpu_info,\n+ \"Declare all environmental CPU info and features relating to the target CPU\\n\\\n+using the function @code{rust_add_target_info}, which takes a string representing\\n\\\n+the feature key and a string representing the feature value.  Configuration pairs\\n\\\n+predefined by this hook apply to all files that are being compiled.\",\n+ void, (void),\n+ hook_void_void)\n+\n+// TODO: remove: format of DEFHOOK is return type, (param types), default value for function that it translates to\n+\n+/* Environmental OS info relating to the target OS.  */\n+DEFHOOK\n+(/*d_os_versions*/rust_os_info,\n+ \"Similarly to @code{TARGET_RUST_CPU_INFO}, but is used for configuration info\\n\\\n+relating to the target operating system.\",\n+ void, (void),\n+ hook_void_void)\n+\n+/* The sizeof CRITICAL_SECTION or pthread_mutex_t.  */\n+/*DEFHOOK\n+(d_critsec_size,\n+ \"Returns the size of the data structure used by the target operating system\\n\\\n+for critical sections and monitors.  For example, on Microsoft Windows this\\n\\\n+would return the @code{sizeof(CRITICAL_SECTION)}, while other platforms that\\n\\\n+implement pthreads would return @code{sizeof(pthread_mutex_t)}.\",\n+ unsigned, (void),\n+ hook_uint_void_0)*/\n+\n+ /* TODO: add more if required. Possible ones include static C runtime, target_env\n+  * or vendor (if not covered by OS), and flags from the driver that may or may not\n+  * require a target hook (might instead require a different type of hook) like \n+  * test, debug_assertions, and proc_macro. */\n+\n+ /* TODO: rustc target support by tier:\n+  *   Tier 1 (definitely work):\n+  *   -  i686-pc-windows-gnu\n+  *   -  i686-pc-windows-msvc\n+  *   -  i686-unknown-linux-gnu\n+  *   -  x86_64-apple-darwin\n+  *   -  x86_64-pc-windows-gnu\n+  *   -  x86_64-pc-windows-msvc\n+  *   -  x86_64-unknown-linux-gnu\n+  *   - Basically, 32-bit and 64-bit x86 for windows (MinGW and MSVC), gnu/linux, and osx\n+  *   Other tiers have too much crap, but basic breakdown is:\n+  *   Tier 2:\n+  *   -  archs: ARM64 (aarch64), ARMv7, ARMv6, asm.js, i586 (32-bit x86 without SSE), mips, \n+  *      mips64, powerpc, powerpc64, risc-v, s390x, sparc, webasm, netbsd, redox (does gcc have support?),\n+  *      cloudabi (never head of it; i imagine no gcc support)\n+  *   -  oses: ios, fuchsia, android, windows (msvc and mingw), gnu/linux, freebsd, netbsd\n+  *   Tier 2.5:\n+  *   - powerpc SPE linux, various cloudabi stuff, sparc\n+  *   Tier 3:\n+  *   - more obscure stuff like UWP support, vxworks, openbsd, dragonflybsd, haiku, bitrig, windows xp,\n+  *     cuda, hexagon, and combinations of them and earlier stuff */\n+\n+/* Close the 'struct gcc_targetrustm' definition.  */\n+HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "b6edbd394dfa8fbbfe68dc8a15b77c80b45c831d", "filename": "gcc/rust/rust-target.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Frust%2Frust-target.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39/gcc%2Frust%2Frust-target.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target.h?ref=89d78a4a9e0af7e4a7da88c3e6d7688b8423fc39", "patch": "@@ -0,0 +1,40 @@\n+/* rust-target.h -- Data structure definitions for target-specific Rust behavior.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_RUST_TARGET_H\n+#define GCC_RUST_TARGET_H\n+\n+// TODO: find out what this stuff actually does\n+#define DEFHOOKPOD(NAME, DOC, TYPE, INIT) TYPE NAME;\n+#define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (* NAME) PARAMS;\n+#define DEFHOOK_UNDOC DEFHOOK\n+#define HOOKSTRUCT(FRAGMENT) FRAGMENT\n+\n+#include \"rust-target.def\"\n+\n+/* Each target can provide their own.  */\n+extern struct gcc_targetrustm targetrustm;\n+/* Some kind of structure to store all rust hook macros (like the TARGET_RUST_CPU_INFO).\n+ * This is required to store the function pointers for the target hooks so that the frontend can call them\n+ * and it calls the correct target-specific function.  */\n+\n+/* Used by target to add predefined version idenditiers.  */\n+//extern void d_add_builtin_version (const char *);\n+/* Used by target to add target-related info.  */\n+extern void rust_add_target_info(const char* key, const char* value);\n+\n+#endif\n\\ No newline at end of file"}]}