{"sha": "e2ddd6caaeaa5da8fb766f348718504db3986650", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJkZGQ2Y2FhZWFhNWRhOGZiNzY2ZjM0ODcxODUwNGRiMzk4NjY1MA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-06-11T23:09:58Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-06-11T23:09:58Z"}, "message": "pa.c (pa_hpux_init_libfunc): Add support for unord_optab.\n\n\t* pa.c (pa_hpux_init_libfunc): Add support for unord_optab.\n\t* pa/quadlib.c (enum qfcmp_magic): Define magic values for call to\n\t_U_Qfcmp library function.\n\t(_U_Qfltgt, _U_Qfunle, _U_Qfunlt, _U_Qfunge, _U_Qfungt, _U_Qfuneq,\n\t_U_Qfunord, _U_Qford): Add more TFmode builtin compare functions.\n\nFrom-SVN: r83004", "tree": {"sha": "3c0d0ffc34ecca00ba1d772d0801522a46d6342f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c0d0ffc34ecca00ba1d772d0801522a46d6342f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2ddd6caaeaa5da8fb766f348718504db3986650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ddd6caaeaa5da8fb766f348718504db3986650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2ddd6caaeaa5da8fb766f348718504db3986650", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ddd6caaeaa5da8fb766f348718504db3986650/comments", "author": null, "committer": null, "parents": [{"sha": "9839edf18db53d249327cd6cc128112684d13dfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9839edf18db53d249327cd6cc128112684d13dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9839edf18db53d249327cd6cc128112684d13dfd"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "39fe01a40e430e644f92ab25b754c7807a3dfd06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ddd6caaeaa5da8fb766f348718504db3986650/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ddd6caaeaa5da8fb766f348718504db3986650/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2ddd6caaeaa5da8fb766f348718504db3986650", "patch": "@@ -1,5 +1,11 @@\n 2004-06-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n+\t* pa.c (pa_hpux_init_libfunc): Add support for unord_optab.\n+\t* pa/quadlib.c (enum qfcmp_magic): Define magic values for call to\n+\t_U_Qfcmp library function.\n+\t(_U_Qfltgt, _U_Qfunle, _U_Qfunlt, _U_Qfunge, _U_Qfungt, _U_Qfuneq,\n+\t_U_Qfunord, _U_Qford): Add more TFmode builtin compare functions.\n+\n \t* pa.c (legitimize_pic_address): Use UNSPEC_DLTIND14R to identify\n \tunspec used for loading address from DLT.\n \t* pa.md: Define constants for the uses of UNSPEC and UNSPEC_VOLATILE."}, {"sha": "8bae9e32ad7ce6f9730fd85513a659a94070b98f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ddd6caaeaa5da8fb766f348718504db3986650/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ddd6caaeaa5da8fb766f348718504db3986650/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=e2ddd6caaeaa5da8fb766f348718504db3986650", "patch": "@@ -5467,6 +5467,7 @@ pa_hpux_init_libfuncs (void)\n   set_optab_libfunc (ge_optab, TFmode, \"_U_Qfge\");\n   set_optab_libfunc (lt_optab, TFmode, \"_U_Qflt\");\n   set_optab_libfunc (le_optab, TFmode, \"_U_Qfle\");\n+  set_optab_libfunc (unord_optab, TFmode, \"_U_Qfunord\");\n \n   set_conv_libfunc (sext_optab,   TFmode, SFmode, \"_U_Qfcnvff_sgl_to_quad\");\n   set_conv_libfunc (sext_optab,   TFmode, DFmode, \"_U_Qfcnvff_dbl_to_quad\");"}, {"sha": "6dbfdcfe9a58877489ee25a057814bbf6bf2c03f", "filename": "gcc/config/pa/quadlib.c", "status": "modified", "additions": 80, "deletions": 9, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ddd6caaeaa5da8fb766f348718504db3986650/gcc%2Fconfig%2Fpa%2Fquadlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ddd6caaeaa5da8fb766f348718504db3986650/gcc%2Fconfig%2Fpa%2Fquadlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fquadlib.c?ref=e2ddd6caaeaa5da8fb766f348718504db3986650", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for long double support.\n-   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -27,6 +27,17 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+/* HPUX TFmode compare requires a library call to _U_Qfcmp, which takes a\n+   magic number as its third argument, that indicates what to do.\n+   The return value is an integer to be compared against zero.  */\n+enum qfcmp_magic {\n+  QCMP_INV = 1,\t\t/* Raise FP_INVALID on SNaN as a side effect.  */\n+  QCMP_UNORD = 2,\n+  QCMP_EQ = 4,\n+  QCMP_LT = 8,\n+  QCMP_GT = 16\n+} magic;\n+\n int _U_Qfcmp (long double a, long double b, int);\n long _U_Qfcnvfxt_quad_to_sgl (long double);\n \n@@ -36,8 +47,19 @@ int _U_Qfgt (long double, long double);\n int _U_Qfge (long double, long double);\n int _U_Qflt (long double, long double);\n int _U_Qfle (long double, long double);\n+int _U_Qfltgt (long double, long double);\n+int _U_Qfunle (long double, long double);\n+int _U_Qfunlt (long double, long double);\n+int _U_Qfunge (long double, long double);\n+int _U_Qfungt (long double, long double);\n+int _U_Qfuneq (long double, long double);\n+int _U_Qfunord (long double, long double);\n+int _U_Qford (long double, long double);\n+\n int _U_Qfcomp (long double, long double);\n+\n long double _U_Qfneg (long double);\n+\n #ifdef __LP64__\n int __U_Qfcnvfxt_quad_to_sgl (long double);\n #endif\n@@ -47,49 +69,98 @@ unsigned long long _U_Qfcnvfxt_quad_to_udbl(long double);\n int\n _U_Qfeq (long double a, long double b)\n {\n-  return (_U_Qfcmp (a, b, 4) != 0);\n+  return (_U_Qfcmp (a, b, QCMP_EQ) != 0);\n }\n \n int\n _U_Qfne (long double a, long double b)\n {\n-  return (_U_Qfcmp (a, b, 4) == 0);\n+  return (_U_Qfcmp (a, b, QCMP_EQ) == 0);\n }\n \t\n int\n _U_Qfgt (long double a, long double b)\n {\n-  return (_U_Qfcmp (a, b, 17) != 0);\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_GT) != 0);\n }\n \n int\n _U_Qfge (long double a, long double b)\n {\n-  return (_U_Qfcmp (a, b, 21) != 0);\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_EQ | QCMP_GT) != 0);\n }\n \n int\n _U_Qflt (long double a, long double b)\n {\n-  return (_U_Qfcmp (a, b, 9) != 0);\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_LT) != 0);\n }\n \n int\n _U_Qfle (long double a, long double b)\n {\n-  return (_U_Qfcmp (a, b, 13) != 0);\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_EQ | QCMP_LT) != 0);\n+}\n+\n+int\n+_U_Qfltgt (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_LT | QCMP_GT) != 0);\n+}\n+\n+int\n+_U_Qfunle (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_UNORD | QCMP_EQ | QCMP_LT) != 0);\n+}\n+\n+int\n+_U_Qfunlt (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_UNORD | QCMP_LT) != 0);\n+}\n+\n+int\n+_U_Qfunge (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_UNORD | QCMP_EQ | QCMP_GT) != 0);\n+}\n+\n+int\n+_U_Qfungt (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_UNORD | QCMP_GT) != 0);\n+}\n+\n+int\n+_U_Qfuneq (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_UNORD | QCMP_EQ) != 0);\n+}\n+\n+int\n+_U_Qfunord (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_UNORD) != 0);\n+}\n+\n+int\n+_U_Qford (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, QCMP_INV | QCMP_EQ | QCMP_LT | QCMP_GT) != 0);\n }\n \n int\n _U_Qfcomp (long double a, long double b)\n {\n-  if (_U_Qfcmp (a, b, 4) == 0)\n+  if (_U_Qfcmp (a, b, QCMP_EQ) == 0)\n     return 0;\n \n-  return (_U_Qfcmp (a, b, 22) != 0 ? 1 : -1);\n+  return (_U_Qfcmp (a, b, QCMP_UNORD | QCMP_EQ | QCMP_GT) != 0 ? 1 : -1);\n }\n \n \n+/* This violates the IEEE standard.  It is better to multiply by -1.0L.  */\n long double\n _U_Qfneg (long double a)\n {"}]}