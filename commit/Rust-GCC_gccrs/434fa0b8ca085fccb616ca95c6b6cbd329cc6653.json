{"sha": "434fa0b8ca085fccb616ca95c6b6cbd329cc6653", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM0ZmEwYjhjYTA4NWZjY2I2MTZjYTk1YzZiNmNiZDMyOWNjNjY1Mw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-02-27T20:18:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-02-27T20:18:20Z"}, "message": "* physmem.c: Formatting changes from upstream.\n\nFrom-SVN: r63519", "tree": {"sha": "ee109d22bd505b110481464be744d35a87fcf3ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee109d22bd505b110481464be744d35a87fcf3ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/434fa0b8ca085fccb616ca95c6b6cbd329cc6653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434fa0b8ca085fccb616ca95c6b6cbd329cc6653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/434fa0b8ca085fccb616ca95c6b6cbd329cc6653", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434fa0b8ca085fccb616ca95c6b6cbd329cc6653/comments", "author": null, "committer": null, "parents": [{"sha": "678e68fcfdf307d5a2d2bdc1603f1cabb5a7c614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678e68fcfdf307d5a2d2bdc1603f1cabb5a7c614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/678e68fcfdf307d5a2d2bdc1603f1cabb5a7c614"}], "stats": {"total": 83, "additions": 44, "deletions": 39}, "files": [{"sha": "31d159b9317887151cd2c298fff7962c9b6d4197", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/434fa0b8ca085fccb616ca95c6b6cbd329cc6653/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/434fa0b8ca085fccb616ca95c6b6cbd329cc6653/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=434fa0b8ca085fccb616ca95c6b6cbd329cc6653", "patch": "@@ -1,3 +1,7 @@\n+2003-02-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* physmem.c: Formatting changes from upstream.\n+\n 2003-02-24  Danny Smith  <dannysmith@users.source.forge.net>\n \n \t* physmem.c (physmem_total): Add _WIN32 support."}, {"sha": "9185c1224e8ce372e57fd8b836102de3dd22135d", "filename": "libiberty/physmem.c", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/434fa0b8ca085fccb616ca95c6b6cbd329cc6653/libiberty%2Fphysmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/434fa0b8ca085fccb616ca95c6b6cbd329cc6653/libiberty%2Fphysmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fphysmem.c?ref=434fa0b8ca085fccb616ca95c6b6cbd329cc6653", "patch": "@@ -57,20 +57,21 @@\n #endif\n \n #ifdef _WIN32\n-#define WIN32_LEAN_AND_MEAN\n-#include <windows.h>\n+# define WIN32_LEAN_AND_MEAN\n+# include <windows.h>\n /*  MEMORYSTATUSEX is missing from older windows headers, so define\n-    a local replacement.  */ \n-typedef struct  {\n-\tDWORD dwLength;\n-\tDWORD dwMemoryLoad;\n-\tDWORDLONG ullTotalPhys;\n-\tDWORDLONG ullAvailPhys;\n-\tDWORDLONG ullTotalPageFile;\n-\tDWORDLONG ullAvailPageFile;\n-\tDWORDLONG ullTotalVirtual;\n-\tDWORDLONG ullAvailVirtual;\n-\tDWORDLONG ullAvailExtendedVirtual;\n+    a local replacement.  */\n+typedef struct\n+{\n+  DWORD dwLength;\n+  DWORD dwMemoryLoad;\n+  DWORDLONG ullTotalPhys;\n+  DWORDLONG ullAvailPhys;\n+  DWORDLONG ullTotalPageFile;\n+  DWORDLONG ullAvailPageFile;\n+  DWORDLONG ullTotalVirtual;\n+  DWORDLONG ullAvailVirtual;\n+  DWORDLONG ullAvailExtendedVirtual;\n } lMEMORYSTATUSEX;\n typedef WINBOOL (WINAPI *PFN_MS_EX) (lMEMORYSTATUSEX*);\n #endif\n@@ -82,7 +83,7 @@ double\n physmem_total ()\n {\n #if defined _SC_PHYS_PAGES && defined _SC_PAGESIZE\n-  {\n+  { /* This works on linux-gnu, solaris2 and cygwin.  */\n     double pages = sysconf (_SC_PHYS_PAGES);\n     double pagesize = sysconf (_SC_PAGESIZE);\n     if (0 <= pages && 0 <= pagesize)\n@@ -111,7 +112,7 @@ physmem_total ()\n \tdouble pagesize = sysconf (_SC_PAGESIZE);\n \tdouble pages = realmem.physmem;\n \tif (0 <= pages && 0 <= pagesize)\n-          return pages * pagesize;\n+\t  return pages * pagesize;\n       }\n   }\n #endif\n@@ -134,12 +135,12 @@ physmem_total ()\n #if HAVE_SYSCTL && defined HW_PHYSMEM\n   { /* This works on *bsd and darwin.  */\n     unsigned int physmem;\n-    size_t len = sizeof(physmem);\n-    static int mib[2] = {CTL_HW, HW_PHYSMEM};\n+    size_t len = sizeof physmem;\n+    static int mib[2] = { CTL_HW, HW_PHYSMEM };\n \n-    if (sysctl(mib, ARRAY_SIZE(mib), &physmem, &len, NULL, 0) == 0\n+    if (sysctl (mib, ARRAY_SIZE (mib), &physmem, &len, NULL, 0) == 0\n \t&& len == sizeof (physmem))\n-      return (double)physmem;\n+      return (double) physmem;\n   }\n #endif\n \n@@ -150,31 +151,31 @@ physmem_total ()\n \n #if defined _WIN32\n   { /* this works on windows */\n-    PFN_MS_EX pfnex; \n-    HMODULE h = GetModuleHandle(\"kernel32.dll\");\n+    PFN_MS_EX pfnex;\n+    HMODULE h = GetModuleHandle (\"kernel32.dll\");\n \n-    if (!h) \n+    if (!h)\n       return 0.0;\n \n-    /*  Use GlobalMemoryStatusEx if available.  */ \n+    /*  Use GlobalMemoryStatusEx if available.  */\n     if ((pfnex = (PFN_MS_EX) GetProcAddress (h, \"GlobalMemoryStatusEx\")))\n       {\n \tlMEMORYSTATUSEX lms_ex;\n \tlms_ex.dwLength = sizeof lms_ex;\n \tif (!pfnex (&lms_ex))\n \t  return 0.0;\n-\treturn (double)lms_ex.ullTotalPhys;\n+\treturn (double) lms_ex.ullTotalPhys;\n       }\n \n     /*  Fall back to GlobalMemoryStatus which is always available.\n-        but returns wrong results for physical memory > 4GB.  */ \n+        but returns wrong results for physical memory > 4GB.  */\n     else\n       {\n-        MEMORYSTATUS ms;\n-        GlobalMemoryStatus (&ms);\n-        return (double)ms.dwTotalPhys;\n+\tMEMORYSTATUS ms;\n+\tGlobalMemoryStatus (&ms);\n+\treturn (double) ms.dwTotalPhys;\n       }\n-   }\n+  }\n #endif\n \n   /* Return 0 if we can't determine the value.  */\n@@ -186,7 +187,7 @@ double\n physmem_available ()\n {\n #if defined _SC_AVPHYS_PAGES && defined _SC_PAGESIZE\n-  {\n+  { /* This works on linux-gnu, solaris2 and cygwin.  */\n     double pages = sysconf (_SC_AVPHYS_PAGES);\n     double pagesize = sysconf (_SC_PAGESIZE);\n     if (0 <= pages && 0 <= pagesize)\n@@ -217,7 +218,7 @@ physmem_available ()\n \tdouble pagesize = sysconf (_SC_PAGESIZE);\n \tdouble pages = realmem.availrmem;\n \tif (0 <= pages && 0 <= pagesize)\n-          return pages * pagesize;\n+\t  return pages * pagesize;\n       }\n   }\n #endif\n@@ -240,24 +241,24 @@ physmem_available ()\n #if HAVE_SYSCTL && defined HW_USERMEM\n   { /* This works on *bsd and darwin.  */\n     unsigned int usermem;\n-    size_t len = sizeof(usermem);\n-    static int mib[2] = {CTL_HW, HW_USERMEM};\n+    size_t len = sizeof usermem;\n+    static int mib[2] = { CTL_HW, HW_USERMEM };\n \n-    if (sysctl(mib, ARRAY_SIZE(mib), &usermem, &len, NULL, 0) == 0\n+    if (sysctl (mib, ARRAY_SIZE (mib), &usermem, &len, NULL, 0) == 0\n \t&& len == sizeof (usermem))\n-      return (double)usermem;\n+      return (double) usermem;\n   }\n #endif\n \n #if defined _WIN32\n   { /* this works on windows */\n-    PFN_MS_EX pfnex; \n+    PFN_MS_EX pfnex;\n     HMODULE h = GetModuleHandle (\"kernel32.dll\");\n \n     if (!h)\n       return 0.0;\n \n-    /*  Use GlobalMemoryStatusEx if available.  */ \n+    /*  Use GlobalMemoryStatusEx if available.  */\n     if ((pfnex = (PFN_MS_EX) GetProcAddress (h, \"GlobalMemoryStatusEx\")))\n       {\n \tlMEMORYSTATUSEX lms_ex;\n@@ -268,12 +269,12 @@ physmem_available ()\n       }\n \n     /*  Fall back to GlobalMemoryStatus which is always available.\n-        but returns wrong results for physical memory > 4GB  */ \n+        but returns wrong results for physical memory > 4GB  */\n     else\n       {\n \tMEMORYSTATUS ms;\n \tGlobalMemoryStatus (&ms);\n-\treturn (double)ms.dwAvailPhys;\n+\treturn (double) ms.dwAvailPhys;\n       }\n   }\n #endif"}]}