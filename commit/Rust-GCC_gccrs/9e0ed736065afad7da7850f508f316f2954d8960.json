{"sha": "9e0ed736065afad7da7850f508f316f2954d8960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUwZWQ3MzYwNjVhZmFkN2RhNzg1MGY1MDhmMzE2ZjI5NTRkODk2MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-27T04:56:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-27T04:56:12Z"}, "message": "compiler: check duplicate numeric keys in map literals\n    \n    Updates golang/go#28104\n    \n    Reviewed-on: https://go-review.googlesource.com/c/162882\n\nFrom-SVN: r269242", "tree": {"sha": "31b9e77c3af31dec1d03b664af976ab677649342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31b9e77c3af31dec1d03b664af976ab677649342"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e0ed736065afad7da7850f508f316f2954d8960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0ed736065afad7da7850f508f316f2954d8960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e0ed736065afad7da7850f508f316f2954d8960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0ed736065afad7da7850f508f316f2954d8960/comments", "author": null, "committer": null, "parents": [{"sha": "6054700c46cfee76846678750972993d8447374c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6054700c46cfee76846678750972993d8447374c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6054700c46cfee76846678750972993d8447374c"}], "stats": {"total": 118, "additions": 115, "deletions": 3}, "files": [{"sha": "5b49264d0d9d07c39c8a5efbfcaacb4eb6e7d747", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0ed736065afad7da7850f508f316f2954d8960/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0ed736065afad7da7850f508f316f2954d8960/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=9e0ed736065afad7da7850f508f316f2954d8960", "patch": "@@ -1,4 +1,4 @@\n-2c74b84184941ebea318f69fe43a81f657790b63\n+bc036b3a03e089e78b892067e40dbb0e7ecca9e2\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b1f503abffba1ef9ecaf032f721a93e86976d9c9", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 106, "deletions": 2, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0ed736065afad7da7850f508f316f2954d8960/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0ed736065afad7da7850f508f316f2954d8960/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=9e0ed736065afad7da7850f508f316f2954d8960", "patch": "@@ -14454,6 +14454,7 @@ Composite_literal_expression::lower_map(Gogo* gogo, Named_object* function,\n {\n   Location location = this->location();\n   Unordered_map(unsigned int, std::vector<Expression*>) st;\n+  Unordered_map(unsigned int, std::vector<Expression*>) nt;\n   if (this->vals_ != NULL)\n     {\n       if (!this->has_keys_)\n@@ -14488,8 +14489,8 @@ Composite_literal_expression::lower_map(Gogo* gogo, Named_object* function,\n \t  if (!(*p)->is_constant())\n \t    continue;\n \t  std::string sval;\n-\t  // Check if there are duplicate constant string keys.\n-\t  if ((*p)->string_constant_value(&sval))\n+\t  Numeric_constant nval;\n+\t  if ((*p)->string_constant_value(&sval)) // Check string keys.\n \t    {\n \t      unsigned int h = Gogo::hash_string(sval, 0);\n \t      // Search the index h in the hash map.\n@@ -14526,6 +14527,42 @@ Composite_literal_expression::lower_map(Gogo* gogo, Named_object* function,\n \t\t  mit->second.push_back(*p);\n \t\t}\n \t    }\n+\t  else if ((*p)->numeric_constant_value(&nval)) // Check numeric keys.\n+\t    {\n+\t      unsigned int h = nval.hash(0);\n+\t      Unordered_map(unsigned int, std::vector<Expression*>)::iterator mit;\n+\t      mit = nt.find(h);\n+\t      if (mit == nt.end())\n+\t\t{\n+\t\t  // No duplicate since h is a new code.\n+\t\t  // Create a new vector indexed by h and add it to the hash map.\n+\t\t  std::vector<Expression*> l;\n+\t\t  l.push_back(*p);\n+\t\t  std::pair<unsigned int, std::vector<Expression*> > val(h, l);\n+\t\t  nt.insert(val);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  // Do further check since h already exists.\n+\t\t  for (std::vector<Expression*>::iterator lit =\n+\t\t\t   mit->second.begin();\n+\t\t       lit != mit->second.end();\n+\t\t       lit++)\n+\t\t    {\n+\t\t      Numeric_constant rval;\n+\t\t      bool ok = (*lit)->numeric_constant_value(&rval);\n+\t\t      go_assert(ok);\n+\t\t      if (nval.equals(rval))\n+\t\t\t{\n+\t\t\t  go_error_at((*p)->location(),\n+\t\t\t\t      \"duplicate key in map literal\");\n+\t\t\t  return Expression::make_error(location);\n+\t\t\t}\n+\t\t    }\n+\t\t  // Add this new numeric key to the vector indexed by h.\n+\t\t  mit->second.push_back(*p);\n+\t\t}\n+\t    }\n \t}\n     }\n \n@@ -16472,6 +16509,36 @@ Numeric_constant::operator=(const Numeric_constant& a)\n   return *this;\n }\n \n+// Check equality with another numeric constant.\n+\n+bool\n+Numeric_constant::equals(const Numeric_constant& a) const\n+{\n+  if (this->classification_ != a.classification_)\n+    return false;\n+\n+  if (this->type_ != NULL && a.type_ != NULL\n+      && !Type::are_identical(this->type_, a.type_,\n+\t\t\t      Type::COMPARE_ALIASES, NULL))\n+    return false;\n+\n+  switch (a.classification_)\n+    {\n+    case NC_INVALID:\n+      break;\n+    case NC_INT:\n+    case NC_RUNE:\n+      return mpz_cmp(this->u_.int_val, a.u_.int_val) == 0;\n+    case NC_FLOAT:\n+      return mpfr_cmp(this->u_.float_val, a.u_.float_val) == 0;\n+    case NC_COMPLEX:\n+      return mpc_cmp(this->u_.complex_val, a.u_.complex_val) == 0;\n+    default:\n+      go_unreachable();\n+    }\n+  return false;\n+}\n+\n // Clear the contents.\n \n void\n@@ -17198,3 +17265,40 @@ Numeric_constant::expression(Location loc) const\n       go_unreachable();\n     }\n }\n+\n+// Calculate a hash code with a given seed.\n+\n+unsigned int\n+Numeric_constant::hash(unsigned int seed) const\n+{\n+  unsigned long val;\n+  const unsigned int PRIME = 97;\n+  long e = 0;\n+  double f = 1.0;\n+  mpfr_t m;\n+\n+  switch (this->classification_)\n+    {\n+    case NC_INVALID:\n+      return PRIME;\n+    case NC_INT:\n+    case NC_RUNE:\n+      val = mpz_get_ui(this->u_.int_val);\n+      break;\n+    case NC_COMPLEX:\n+      mpfr_init(m);\n+      mpc_abs(m, this->u_.complex_val, MPFR_RNDN);\n+      val = mpfr_get_ui(m, MPFR_RNDN);\n+      mpfr_clear(m);\n+      break;\n+    case NC_FLOAT:\n+      f = mpfr_get_d_2exp(&e, this->u_.float_val, MPFR_RNDN) * 4294967295.0;\n+      val = static_cast<unsigned long>(e + static_cast<long>(f));\n+      break;\n+    default:\n+      go_unreachable();\n+    }\n+\n+  return (static_cast<unsigned int>(val) + seed) * PRIME;\n+}\n+"}, {"sha": "5d61b69c0fa2523c951cc3d01d6b9b886569c048", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0ed736065afad7da7850f508f316f2954d8960/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0ed736065afad7da7850f508f316f2954d8960/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=9e0ed736065afad7da7850f508f316f2954d8960", "patch": "@@ -4163,6 +4163,10 @@ class Numeric_constant\n \n   Numeric_constant& operator=(const Numeric_constant&);\n \n+  // Check equality with another numeric constant.\n+  bool\n+  equals(const Numeric_constant&) const;\n+\n   // Set to an unsigned long value.\n   void\n   set_unsigned_long(Type*, unsigned long);\n@@ -4282,6 +4286,10 @@ class Numeric_constant\n   Expression*\n   expression(Location) const;\n \n+  // Calculate a hash code with a given seed.\n+  unsigned int\n+  hash(unsigned int seed) const;\n+\n  private:\n   void\n   clear();"}]}