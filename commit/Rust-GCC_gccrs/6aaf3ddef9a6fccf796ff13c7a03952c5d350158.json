{"sha": "6aaf3ddef9a6fccf796ff13c7a03952c5d350158", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhZjNkZGVmOWE2ZmNjZjc5NmZmMTNjN2EwMzk1MmM1ZDM1MDE1OA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-08-18T16:39:40Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-08-18T16:39:40Z"}, "message": "dojump.c (do_jump <unordered_bcc>): Do not recursively call self with a TRUTH_ORIF_EXPR...\n\n\t* dojump.c (do_jump <unordered_bcc>): Do not recursively call\n\tself with a TRUTH_ORIF_EXPR; generate the appropriate jump\n\tsequence inline.  Move drop_through_label code into this\n\tblock, being the only place it is used.  Adjust comments.\n\nFrom-SVN: r86192", "tree": {"sha": "1c7cb30c823791b9cb19f3cacc2cad909c5da877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c7cb30c823791b9cb19f3cacc2cad909c5da877"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aaf3ddef9a6fccf796ff13c7a03952c5d350158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aaf3ddef9a6fccf796ff13c7a03952c5d350158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aaf3ddef9a6fccf796ff13c7a03952c5d350158", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aaf3ddef9a6fccf796ff13c7a03952c5d350158/comments", "author": null, "committer": null, "parents": [{"sha": "d62294f57e859308c23fcbd156bb88b21e8f4547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62294f57e859308c23fcbd156bb88b21e8f4547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62294f57e859308c23fcbd156bb88b21e8f4547"}], "stats": {"total": 107, "additions": 54, "deletions": 53}, "files": [{"sha": "68e12d9e7c97a3dbc7fd3ac4943b21426a516925", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaf3ddef9a6fccf796ff13c7a03952c5d350158/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaf3ddef9a6fccf796ff13c7a03952c5d350158/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6aaf3ddef9a6fccf796ff13c7a03952c5d350158", "patch": "@@ -1,32 +1,39 @@\n+2004-08-18  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* dojump.c (do_jump <unordered_bcc>): Do not recursively call\n+\tself with a TRUTH_ORIF_EXPR; generate the appropriate jump\n+\tsequence inline.  Move drop_through_label code into this\n+\tblock, being the only place it is used.  Adjust comments.\n+\n 2004-08-18  Fariborz Jahanian <fjahanian@apple.com>\n \n-        * config/rs6000/altivec.md: Add new patterns for calls to\n-        save_world/rest_world functions.\n-\n-        * config/rs6000/rs6000-protos.h: (save_world_operation,\n-        restore_world_operation) new declarations.\n-\n-        * config/rs6000/rs6000.c: (struct rs6000_stack) new world_save_p\n-        field added.\n-        (rs6000_stack_info): Set world_save_p field.\n-        (save_world_operation): New function.\n-        (restore_world_operation): New function.\n-        (compute_save_world_info): New function.\n-        (rs6000_stack_info): Call compute_save_world_info.\n-        (rs6000_emit_prologue): Check for world_save_p and generate\n-        pattern to call save_world for saving all non-volatile and\n-        special registers.\n-        (rs6000_emit_epilogue): Check for world_save_p and generate\n-        pattern to call rest_world to restore saved registers.\n-\n-        config/rs6000/rs6000.h: macros FIRST_SAVED_ALTIVEC_REGNO,\n-        FIRST_SAVED_FP_REGNO, FIRST_SAVED_GP_REGNO defined.\n-        (rs6000_reg_names): New entries added for save_world_operation and\n-        restore_world_operation.\n+\t* config/rs6000/altivec.md: Add new patterns for calls to\n+\tsave_world/rest_world functions.\n+\n+\t* config/rs6000/rs6000-protos.h: (save_world_operation,\n+\trestore_world_operation) new declarations.\n+\n+\t* config/rs6000/rs6000.c: (struct rs6000_stack) new world_save_p\n+\tfield added.\n+\t(rs6000_stack_info): Set world_save_p field.\n+\t(save_world_operation): New function.\n+\t(restore_world_operation): New function.\n+\t(compute_save_world_info): New function.\n+\t(rs6000_stack_info): Call compute_save_world_info.\n+\t(rs6000_emit_prologue): Check for world_save_p and generate\n+\tpattern to call save_world for saving all non-volatile and\n+\tspecial registers.\n+\t(rs6000_emit_epilogue): Check for world_save_p and generate\n+\tpattern to call rest_world to restore saved registers.\n+\n+\tconfig/rs6000/rs6000.h: macros FIRST_SAVED_ALTIVEC_REGNO,\n+\tFIRST_SAVED_FP_REGNO, FIRST_SAVED_GP_REGNO defined.\n+\t(rs6000_reg_names): New entries added for save_world_operation and\n+\trestore_world_operation.\n \n 2004-08-18  Caroline Tice  <ctice@apple.com>\n \n-        * Makefile.in (STAGEFEEDBACK_FLAGS_TO_PASS) Add\n+\t* Makefile.in (STAGEFEEDBACK_FLAGS_TO_PASS) Add\n \t\"-freorder-blocks-and-partition\" to the flags used in second\n \tstage of profiledbootstrap.\n \t* bb-reorder.c (push_to_next_round_p): Add new variable,\n@@ -88,7 +95,7 @@\n \t* opts.c (decode_options): If both partitioning and DWARF debugging\n \tare turned on, issue a warning that this doesn't work, and change\n \tpartitiong to basic block reordering (without hot/cold partitions).\n-\t* passes.c (rest_of_handle_final): Re-set new global variable, \n+\t* passes.c (rest_of_handle_final): Re-set new global variable,\n \tuser_defined_section_attribute, to false.\n \t(rest_of_compilation): Change options for calling partitioning\n \tfunction: Don't call if the user defined the section attribute, and\n@@ -104,15 +111,15 @@\n \t* varasm.c (unlikely_section_label): New global variable.\n \t(unlikely_text_section_name): New global variable.\n \t(unlikely_text_section): Add code to initialize unlikely_text_section_name\n-\tif necessary; modify to use unlikely_text_section_name and \n+\tif necessary; modify to use unlikely_text_section_name and\n \tunlikely_section_label; also to use named_section properly.\n \t(in_unlikely_text_section):  Modify to work correctly with named_section\n \tand to use unlikely_text_section_name.\n \t(named_section):  Add code to work properly with cold section.\n \t(function_section): Clean up if-statement.\n \t* config/darwin.c (darwin_asm_named_section): Return to original code,\n \tremoving use of SECTION_FORMAT_STRING.\n-\t* config/arm/pe.h (switch_to_section):  Add case for \n+\t* config/arm/pe.h (switch_to_section):  Add case for\n \tin_unlikely_executed_text to switch statement.\n \t* config/i386/cygming.h (switch_to_section): Likewise.\n \t* config/i386/darwin.h (NORMAL_TEXT_SECTION_NAME): Remove.\n@@ -174,7 +181,7 @@\n \t(prescan_loop): Likewise. Don't check function usage for clobbered\n \tunchanging memory.\n \t* rtlanal.c (rtx_unstable_p): Check MEM_READONLY_P,\n-        not RTX_UNCHANGING_P.\n+\tnot RTX_UNCHANGING_P.\n \t(rtx_varies_p, modified_between_p, modified_in_p): Likewise.\n \t* varasm.c (force_const_mem): Likewise.\n \t* stmt.c (expand_decl): Don't set RTX_UNCHANGING_P.\n@@ -191,7 +198,7 @@\n \tMEM_READONLY_P instead of RTX_UNCHANGING_P.\n \t(machopic_indirect_call_target): Likewise.\n \t(machopic_legitimize_pic_address): Likewise.\n-\t* config/arm/arm.c (legitimize_pic_address, arm_gen_load_multiple, \n+\t* config/arm/arm.c (legitimize_pic_address, arm_gen_load_multiple,\n \tarm_gen_store_multiple, arm_gen_movmemqi): Likewise.\n \t* config/arm/arm.md (load_multiple, store_multiple): Likewise.\n \t* config/frv/frv.md (symGOT2reg): Likewise.\n@@ -303,7 +310,7 @@\n \txstormy16_below100_operand, xstormy16_below100_or_register,\n \txstormy16_onebit_set_operand, xstormy16_onebit_clr_operand): New.\n \t(PREDICATE_CODES): Add new predicates.\n-\t\n+\n \t* config/stormy16/stormy16.c\n \t(xstormy16_asm_output_aligned_common, xstormy16_below100_symbol,\n \txstormy16_below100_operand, xstormy16_below100_or_register,\n@@ -347,8 +354,8 @@\n \t* doc/invoke.texi (-fkeep-inline-functions): Update documentation.\n \n 2004-08-17  Robert Bowdidge  <bowdidge@apple.com>\n-  \n-        * config/rs6000/x-darwin: Add -mdynamic-no-pic to gcc build flags.\n+\n+\t* config/rs6000/x-darwin: Add -mdynamic-no-pic to gcc build flags.\n \n 2004-08-17  Andreas Tobler  <a.tobler@schweiz.ch>\n \n@@ -388,7 +395,7 @@\n \t* tree-ssa-phiopt.c (empty_block_p): Expose for usage out of this file.\n \t* tree-flow.h (vectorize_loops, empty_block_p): Add declaration.\n \t* tree-optimize.c (pass_vectorize): Schedule the vectorization pass.\n-\t* tree-pass.h (tree_opt_pass pass_vectorize): Declare the new \n+\t* tree-pass.h (tree_opt_pass pass_vectorize): Declare the new\n \tvectorization pass.\n \t* tree-ssa-loop.c (tree_ssa_loop_init): Call scev_initialize.\n \t(tree_ssa_loop_done): Call scev_finalize.\n@@ -475,7 +482,7 @@\n 2004-08-16  Adam Nemet  <anemet@lnxw.com>\n \n \t* Makefile.in (LIBS): Move $(LIBIBERTY) after $(BANSHEELIB).\n-\t\n+\n 2004-08-16  Andrew Pinski  <apinski@apple.com>\n \n \t* target-def.h (TARGET_EH_RETURN_FILTER_MODE): Remove"}, {"sha": "eb4f21c5a520d38f73f43f7852dffee1389e0edd", "filename": "gcc/dojump.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaf3ddef9a6fccf796ff13c7a03952c5d350158/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaf3ddef9a6fccf796ff13c7a03952c5d350158/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=6aaf3ddef9a6fccf796ff13c7a03952c5d350158", "patch": "@@ -149,19 +149,12 @@ prefer_and_bit_test (enum machine_mode mode, int bitnum)\n \n    do_jump always does any pending stack adjust except when it does not\n    actually perform a jump.  An example where there is no jump\n-   is when EXP is `(foo (), 0)' and IF_FALSE_LABEL is null.\n-\n-   This function is responsible for optimizing cases such as\n-   &&, || and comparison operators in EXP.  */\n+   is when EXP is `(foo (), 0)' and IF_FALSE_LABEL is null.  */\n \n void\n do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n {\n   enum tree_code code = TREE_CODE (exp);\n-  /* Some cases need to create a label to jump to\n-     in order to properly fall through.\n-     These cases set DROP_THROUGH_LABEL nonzero.  */\n-  rtx drop_through_label = 0;\n   rtx temp;\n   int i;\n   tree type;\n@@ -448,13 +441,23 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n             tree op0 = save_expr (TREE_OPERAND (exp, 0));\n             tree op1 = save_expr (TREE_OPERAND (exp, 1));\n             tree cmp0, cmp1;\n+\t    rtx drop_through_label = 0;\n \n             /* If the target doesn't support combined unordered\n                compares, decompose into two comparisons.  */\n+\t    if (if_true_label == 0)\n+\t      drop_through_label = if_true_label = gen_label_rtx ();\n+\t      \n             cmp0 = fold (build2 (tcode1, TREE_TYPE (exp), op0, op1));\n             cmp1 = fold (build2 (tcode2, TREE_TYPE (exp), op0, op1));\n-            exp = build2 (TRUTH_ORIF_EXPR, TREE_TYPE (exp), cmp0, cmp1);\n-            do_jump (exp, if_false_label, if_true_label);\n+\t    do_jump (cmp0, 0, if_true_label);\n+\t    do_jump (cmp1, if_false_label, if_true_label);\n+\n+\t    if (drop_through_label)\n+\t      {\n+\t\tdo_pending_stack_adjust ();\n+\t\temit_label (drop_through_label);\n+\t      }\n           }\n       }\n       break;\n@@ -528,15 +531,6 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n       else\n         abort ();\n     }\n-\n-  if (drop_through_label)\n-    {\n-      /* If do_jump produces code that might be jumped around,\n-         do any stack adjusts from that code, before the place\n-         where control merges in.  */\n-      do_pending_stack_adjust ();\n-      emit_label (drop_through_label);\n-    }\n }\n \f\n /* Given a comparison expression EXP for values too wide to be compared"}]}