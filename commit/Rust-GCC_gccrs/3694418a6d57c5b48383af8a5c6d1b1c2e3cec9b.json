{"sha": "3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY5NDQxOGE2ZDU3YzViNDgzODNhZjhhNWM2ZDFiMWMyZTNjZWM5Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-10-04T13:50:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-10-04T13:50:07Z"}, "message": "compiler: adjust code to avoid shadowing local variables\n    \n    Also add a couple of missing calls to free after mpz_get_str.\n    \n    This should make the code clean with respect to -Wshadow=local.\n    \n    Based on patch by Bernd Edlinger.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/198837\n\nFrom-SVN: r276579", "tree": {"sha": "05e7f63f70ad8f31a2d8fad27d75c50b2180dea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05e7f63f70ad8f31a2d8fad27d75c50b2180dea9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/comments", "author": null, "committer": null, "parents": [{"sha": "0ced79bc4c9925c574177cb6345c26e4aad4155f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ced79bc4c9925c574177cb6345c26e4aad4155f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ced79bc4c9925c574177cb6345c26e4aad4155f"}], "stats": {"total": 176, "additions": 85, "deletions": 91}, "files": [{"sha": "bb509943d6e0d8e523fb65728fd5b790e191f179", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "patch": "@@ -1,4 +1,4 @@\n-a3aef6b6df932ea6c7094d074695bc0b033a3d17\n+441f3f1f350b532707c48273d7f454cf1c4e959f\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a3cbda9debc55b0a63c598a5820ad50b63a81719", "filename": "gcc/go/gofrontend/ast-dump.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fast-dump.cc?ref=3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "patch": "@@ -135,11 +135,11 @@ Ast_dump_traverse_blocks_and_functions::function(Named_object* no)\n         {\n           if (it != res->begin())\n             this->ast_dump_context_->ostream() << \",\";\n-          Named_object* no = (*it);\n+          Named_object* rno = (*it);\n \n-          this->ast_dump_context_->ostream() << no->name() << \" \";\n-          go_assert(no->is_result_variable());\n-          Result_variable* resvar = no->result_var_value();\n+          this->ast_dump_context_->ostream() << rno->name() << \" \";\n+          go_assert(rno->is_result_variable());\n+          Result_variable* resvar = rno->result_var_value();\n \n           this->ast_dump_context_->dump_type(resvar->type());\n "}, {"sha": "f8e07f73cd2d7d3048167140fe14e59331f643a7", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "patch": "@@ -1541,7 +1541,6 @@ Escape_analysis_assign::expression(Expression** pexpr)\n \n   if (debug_level > 1)\n     {\n-      Node* n = Node::make_node(*pexpr);\n       std::string fn_name = this->context_->current_function_name();\n       go_debug((*pexpr)->location(), \"[%d] %s esc: %s\",\n \t       this->context_->loop_depth(), fn_name.c_str(),"}, {"sha": "9babc3485951ee8452d2352a828e995b9e55ca44", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "patch": "@@ -4104,9 +4104,11 @@ Type_conversion_expression::do_get_backend(Translate_context* context)\n             x = mpz_get_ui(intval);\n           else\n             {\n-              char* s = mpz_get_str(NULL, 16, intval);\n+              char* ms = mpz_get_str(NULL, 16, intval);\n               go_warning_at(loc, 0,\n-                            \"unicode code point 0x%s out of range in string\", s);\n+                            \"unicode code point 0x%s out of range in string\",\n+                            ms);\n+              free(ms);\n               x = 0xfffd;\n             }\n \t  Lex::append_char(x, true, &s, loc);\n@@ -8016,14 +8018,14 @@ Bound_method_expression::do_flatten(Gogo* gogo, Named_object*,\n   Expression* ret = Expression::make_struct_composite_literal(st, vals, loc);\n   ret = Expression::make_heap_expression(ret, loc);\n \n-  Node* n = Node::make_node(this);\n-  if ((n->encoding() & ESCAPE_MASK) == Node::ESCAPE_NONE)\n+  Node* node = Node::make_node(this);\n+  if ((node->encoding() & ESCAPE_MASK) == Node::ESCAPE_NONE)\n     ret->heap_expression()->set_allocate_on_stack();\n   else if (gogo->compiling_runtime()\n \t   && gogo->package_name() == \"runtime\"\n \t   && !saw_errors())\n     go_error_at(loc, \"%s escapes to heap, not allowed in runtime\",\n-                n->ast_format(gogo).c_str());\n+                node->ast_format(gogo).c_str());\n \n   // If necessary, check whether the expression or any embedded\n   // pointers are nil.\n@@ -8741,8 +8743,6 @@ Builtin_call_expression::lower_make(Statement_inserter* inserter)\n \t\t\t\t  Expression::make_nil(loc));\n       else\n \t{\n-\t  Numeric_constant nclen;\n-\t  unsigned long vlen;\n \t  if (len_arg->numeric_constant_value(&nclen)\n \t      && nclen.to_unsigned_long(&vlen) == Numeric_constant::NC_UL_VALID\n \t      && vlen <= Map_type::bucket_size)\n@@ -9053,8 +9053,7 @@ Builtin_call_expression::flatten_append(Gogo* gogo, Named_object* function,\n           else\n             {\n               Type* int32_type = Type::lookup_integer_type(\"int32\");\n-              Expression* zero =\n-                Expression::make_integer_ul(0, int32_type, loc);\n+              zero = Expression::make_integer_ul(0, int32_type, loc);\n               call = Runtime::make_call(Runtime::BUILTIN_MEMSET, loc, 3, a1,\n                                         zero, a2);\n             }\n@@ -9064,15 +9063,12 @@ Builtin_call_expression::flatten_append(Gogo* gogo, Named_object* function,\n               // For a slice containing pointers, growslice already zeroed\n               // the memory. We only need to zero in non-growing case.\n               // Note: growslice does not zero the memory in non-pointer case.\n-              Expression* left =\n-                Expression::make_temporary_reference(ntmp, loc);\n-              left = Expression::make_cast(uint_type, left, loc);\n-              Expression* right =\n-                Expression::make_temporary_reference(c1tmp, loc);\n-              right = Expression::make_cast(uint_type, right, loc);\n-              Expression* cond =\n-                Expression::make_binary(OPERATOR_GT, left, right, loc);\n-              Expression* zero = Expression::make_integer_ul(0, int_type, loc);\n+              ref = Expression::make_temporary_reference(ntmp, loc);\n+              ref = Expression::make_cast(uint_type, ref, loc);\n+              ref2 = Expression::make_temporary_reference(c1tmp, loc);\n+              ref2 = Expression::make_cast(uint_type, ref2, loc);\n+              cond = Expression::make_binary(OPERATOR_GT, ref, ref2, loc);\n+              zero = Expression::make_integer_ul(0, int_type, loc);\n               call = Expression::make_conditional(cond, call, zero, loc);\n             }\n         }\n@@ -10877,9 +10873,7 @@ Call_expression::do_lower(Gogo* gogo, Named_object* function,\n   if (this->result_count() > 1 && this->call_temp_ == NULL)\n     {\n       Struct_field_list* sfl = new Struct_field_list();\n-      Function_type* fntype = this->get_function_type();\n       const Typed_identifier_list* results = fntype->results();\n-      Location loc = this->location();\n \n       int i = 0;\n       char buf[20];\n@@ -12295,10 +12289,10 @@ Call_expression::do_get_backend(Translate_context* context)\n     }\n   else\n     {\n-      Expression* first_arg;\n-      fn = this->interface_method_function(interface_method, &first_arg,\n+      Expression* arg0;\n+      fn = this->interface_method_function(interface_method, &arg0,\n                                            location);\n-      fn_args[0] = first_arg->get_backend(context);\n+      fn_args[0] = arg0->get_backend(context);\n     }\n \n   Bexpression* bclosure = NULL;\n@@ -16453,11 +16447,11 @@ Composite_literal_expression::lower_array(Type* type)\n       traverse_order = new std::vector<unsigned long>();\n       traverse_order->reserve(v.size());\n \n-      for (V::const_iterator p = v.begin(); p != v.end(); ++p)\n+      for (V::const_iterator pv = v.begin(); pv != v.end(); ++pv)\n \t{\n-\t  indexes->push_back(p->index);\n-\t  vals->push_back(p->expr);\n-\t  traverse_order->push_back(p->traversal_order);\n+\t  indexes->push_back(pv->index);\n+\t  vals->push_back(pv->expr);\n+\t  traverse_order->push_back(pv->traversal_order);\n \t}\n     }\n \n@@ -17771,9 +17765,9 @@ Interface_info_expression::do_type()\n \n         Interface_type* itype = this->iface_->type()->interface_type();\n \n-        Hashtable::const_iterator p = result_types.find(itype);\n-        if (p != result_types.end())\n-          return p->second;\n+        Hashtable::const_iterator pr = result_types.find(itype);\n+        if (pr != result_types.end())\n+          return pr->second;\n \n         Type* pdt = Type::make_type_descriptor_ptr_type();\n         if (itype->is_empty())"}, {"sha": "a79cfc3a9a76e9d8487dc629fedfb26b8fd867ef", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "patch": "@@ -518,11 +518,11 @@ Gogo::import_package(const std::string& filename,\n       else if (ln == \".\")\n \t{\n \t  Bindings* bindings = package->bindings();\n-\t  for (Bindings::const_declarations_iterator p =\n+\t  for (Bindings::const_declarations_iterator pd =\n \t\t bindings->begin_declarations();\n-\t       p != bindings->end_declarations();\n-\t       ++p)\n-\t    this->add_dot_import_object(p->second);\n+\t       pd != bindings->end_declarations();\n+\t       ++pd)\n+\t    this->add_dot_import_object(pd->second);\n           std::string dot_alias = \".\" + package->package_name();\n           package->add_alias(dot_alias, location);\n \t}\n@@ -678,8 +678,8 @@ Gogo::recompute_init_priorities()\n            pci != ii->precursors().end();\n            ++pci)\n         {\n-          Import_init* ii = this->lookup_init(*pci);\n-          nonroots.insert(ii);\n+          Import_init* ii_init = this->lookup_init(*pci);\n+          nonroots.insert(ii_init);\n         }\n     }\n \n@@ -2613,11 +2613,11 @@ Gogo::define_global_names()\n \t    {\n \t      if (no->type_declaration_value()->has_methods())\n \t\t{\n-\t\t  for (std::vector<Named_object*>::const_iterator p =\n+\t\t  for (std::vector<Named_object*>::const_iterator pm =\n \t\t\t no->type_declaration_value()->methods()->begin();\n-\t\t       p != no->type_declaration_value()->methods()->end();\n-\t\t       p++)\n-\t\t    go_error_at((*p)->location(),\n+\t\t       pm != no->type_declaration_value()->methods()->end();\n+\t\t       pm++)\n+\t\t    go_error_at((*pm)->location(),\n \t\t\t\t\"may not define methods on non-local type\");\n \t\t}\n \t      no->set_type_value(global_no->type_value());\n@@ -6550,8 +6550,8 @@ Function::build(Gogo* gogo, Named_object* named_function)\n \n       // Build the backend representation for all the statements in the\n       // function.\n-      Translate_context context(gogo, named_function, NULL, NULL);\n-      Bblock* code_block = this->block_->get_backend(&context);\n+      Translate_context bcontext(gogo, named_function, NULL, NULL);\n+      Bblock* code_block = this->block_->get_backend(&bcontext);\n \n       // Initialize variables if necessary.\n       Translate_context icontext(gogo, named_function, this->block_,\n@@ -6608,8 +6608,8 @@ Function::build(Gogo* gogo, Named_object* named_function)\n   // If we created a descriptor for the function, make sure we emit it.\n   if (this->descriptor_ != NULL)\n     {\n-      Translate_context context(gogo, NULL, NULL, NULL);\n-      this->descriptor_->get_backend(&context);\n+      Translate_context dcontext(gogo, NULL, NULL, NULL);\n+      this->descriptor_->get_backend(&dcontext);\n     }\n }\n "}, {"sha": "e50af616421fcfb4f6c6422ca21cef20cebe101e", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "patch": "@@ -836,7 +836,7 @@ Parse::parameter_list(bool* is_varargs)\n     {\n       std::string name = token->identifier();\n       bool is_exported = token->is_identifier_exported();\n-      Location location = token->location();\n+      Location id_location = token->location();\n       token = this->advance_token();\n       if (!token->is_op(OPERATOR_COMMA))\n \t{\n@@ -861,7 +861,7 @@ Parse::parameter_list(bool* is_varargs)\n \t    }\n \n \t  this->unget_token(Token::make_identifier_token(name, is_exported,\n-\t\t\t\t\t\t\t location));\n+\t\t\t\t\t\t\t id_location));\n \t}\n       else\n \t{\n@@ -872,15 +872,15 @@ Parse::parameter_list(bool* is_varargs)\n \t  // commas as we can.\n \t  std::string id_name = this->gogo_->pack_hidden_name(name,\n \t\t\t\t\t\t\t      is_exported);\n-\t  ret->push_back(Typed_identifier(id_name, NULL, location));\n+\t  ret->push_back(Typed_identifier(id_name, NULL, id_location));\n \t  bool just_saw_comma = true;\n \t  while (this->advance_token()->is_identifier())\n \t    {\n \t      name = this->peek_token()->identifier();\n \t      is_exported = this->peek_token()->is_identifier_exported();\n-\t      location = this->peek_token()->location();\n+\t      id_location = this->peek_token()->location();\n \t      id_name = this->gogo_->pack_hidden_name(name, is_exported);\n-\t      ret->push_back(Typed_identifier(id_name, NULL, location));\n+\t      ret->push_back(Typed_identifier(id_name, NULL, id_location));\n \t      if (!this->advance_token()->is_op(OPERATOR_COMMA))\n \t\t{\n \t\t  just_saw_comma = false;\n@@ -909,7 +909,7 @@ Parse::parameter_list(bool* is_varargs)\n \t      // names.\n \t      parameters_have_names = false;\n \t      this->unget_token(Token::make_identifier_token(name, is_exported,\n-\t\t\t\t\t\t\t     location));\n+\t\t\t\t\t\t\t     id_location));\n \t      ret->pop_back();\n \t      just_saw_comma = true;\n \t    }\n@@ -2808,7 +2808,7 @@ Parse::composite_lit(Type* type, int depth, Location location)\n \t{\n \t  std::string identifier = token->identifier();\n \t  bool is_exported = token->is_identifier_exported();\n-\t  Location location = token->location();\n+\t  Location id_location = token->location();\n \n \t  if (this->advance_token()->is_op(OPERATOR_COLON))\n \t    {\n@@ -2820,14 +2820,14 @@ Parse::composite_lit(Type* type, int depth, Location location)\n \t      Gogo* gogo = this->gogo_;\n \t      val = this->id_to_expression(gogo->pack_hidden_name(identifier,\n \t\t\t\t\t\t\t\t  is_exported),\n-\t\t\t\t\t   location, false);\n+\t\t\t\t\t   id_location, false);\n \t      is_name = true;\n \t    }\n \t  else\n \t    {\n \t      this->unget_token(Token::make_identifier_token(identifier,\n \t\t\t\t\t\t\t     is_exported,\n-\t\t\t\t\t\t\t     location));\n+\t\t\t\t\t\t\t     id_location));\n \t      val = this->expression(PRECEDENCE_NORMAL, false, true, NULL,\n \t\t\t\t     NULL);\n \t    }\n@@ -2923,14 +2923,14 @@ Parse::composite_lit(Type* type, int depth, Location location)\n \t    go_error_at(this->location(), \"expected %<,%> or %<}%>\");\n \n \t  this->gogo_->mark_locals_used();\n-\t  int depth = 0;\n+\t  int edepth = 0;\n \t  while (!token->is_eof()\n-\t\t && (depth > 0 || !token->is_op(OPERATOR_RCURLY)))\n+\t\t && (edepth > 0 || !token->is_op(OPERATOR_RCURLY)))\n \t    {\n \t      if (token->is_op(OPERATOR_LCURLY))\n-\t\t++depth;\n+\t\t++edepth;\n \t      else if (token->is_op(OPERATOR_RCURLY))\n-\t\t--depth;\n+\t\t--edepth;\n \t      token = this->advance_token();\n \t    }\n \t  if (token->is_op(OPERATOR_RCURLY))"}, {"sha": "f52b33d665cfb2376be179e5faa1241731c79bb6", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "patch": "@@ -2938,7 +2938,7 @@ Thunk_statement::build_thunk(Gogo* gogo, const std::string& thunk_name)\n       go_assert(call_statement->classification() == STATEMENT_EXPRESSION);\n       Expression_statement* es =\n \tstatic_cast<Expression_statement*>(call_statement);\n-      Call_expression* ce = es->expr()->call_expression();\n+      ce = es->expr()->call_expression();\n       if (ce == NULL)\n \tgo_assert(saw_errors());\n       else\n@@ -5972,10 +5972,11 @@ Select_statement::lower_two_case(Block* b)\n           // if selectnbrecv2(&lhs, &ok, chan) { body } else { default body }\n \n           Type* booltype = Type::make_boolean_type();\n-          Temporary_statement* ts = Statement::make_temporary(booltype, NULL, loc);\n-          b->add_statement(ts);\n+          Temporary_statement* okts = Statement::make_temporary(booltype, NULL,\n+                                                                loc);\n+          b->add_statement(okts);\n \n-          okref = Expression::make_temporary_reference(ts, loc);\n+          okref = Expression::make_temporary_reference(okts, loc);\n           Expression* okaddr = Expression::make_unary(OPERATOR_AND, okref, loc);\n           call = Runtime::make_call(Runtime::SELECTNBRECV2, loc, 3, addr, okaddr,\n                                     chanref);\n@@ -6595,7 +6596,7 @@ For_range_statement::lower_range_array(Gogo* gogo,\n       iter_init = new Block(body_block, loc);\n \n       ref = Expression::make_temporary_reference(range_temp, loc);\n-      Expression* ref2 = Expression::make_temporary_reference(index_temp, loc);\n+      ref2 = Expression::make_temporary_reference(index_temp, loc);\n       Expression* index = Expression::make_index(ref, ref2, NULL, NULL, loc);\n \n       tref = Expression::make_temporary_reference(value_temp, loc);\n@@ -6693,7 +6694,7 @@ For_range_statement::lower_range_slice(Gogo* gogo,\n       iter_init = new Block(body_block, loc);\n \n       ref = Expression::make_temporary_reference(for_temp, loc);\n-      Expression* ref2 = Expression::make_temporary_reference(index_temp, loc);\n+      ref2 = Expression::make_temporary_reference(index_temp, loc);\n       Expression* index = Expression::make_index(ref, ref2, NULL, NULL, loc);\n \n       tref = Expression::make_temporary_reference(value_temp, loc);\n@@ -7179,9 +7180,9 @@ For_range_statement::lower_array_range_clear(Gogo* gogo,\n   else\n     {\n       Type* int32_type = Type::lookup_integer_type(\"int32\");\n-      Expression* zero = Expression::make_integer_ul(0, int32_type, loc);\n+      Expression* zero32 = Expression::make_integer_ul(0, int32_type, loc);\n       call = Runtime::make_call(Runtime::BUILTIN_MEMSET, loc, 3, ptr_arg,\n-                                zero, sz_arg);\n+                                zero32, sz_arg);\n     }\n   Statement* cs3 = Statement::make_statement(call, true);\n   b->add_statement(cs3);"}, {"sha": "e02b832df149d08ff1427e307f2ff206d34df6dc", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=3694418a6d57c5b48383af8a5c6d1b1c2e3cec9b", "patch": "@@ -6410,12 +6410,11 @@ Struct_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n         fvals->push_back(Expression::make_nil(bloc));\n       else\n \t{\n-\t  std::string n;\n           if (is_embedded_builtin)\n             n = gogo->package_name();\n           else\n             n = Gogo::hidden_name_pkgpath(pf->field_name());\n-\t  Expression* s = Expression::make_string(n, bloc);\n+\t  s = Expression::make_string(n, bloc);\n \t  fvals->push_back(Expression::make_unary(OPERATOR_AND, s, bloc));\n \t}\n \n@@ -6429,7 +6428,7 @@ Struct_type::do_type_descriptor(Gogo* gogo, Named_type* name)\n \tfvals->push_back(Expression::make_nil(bloc));\n       else\n \t{\n-\t  Expression* s = Expression::make_string(pf->tag(), bloc);\n+\t  s = Expression::make_string(pf->tag(), bloc);\n \t  fvals->push_back(Expression::make_unary(OPERATOR_AND, s, bloc));\n \t}\n \n@@ -6635,22 +6634,22 @@ Struct_type::do_reflection(Gogo* gogo, std::string* ret) const\n \t{\n \t  const std::string& tag(p->tag());\n \t  ret->append(\" \\\"\");\n-\t  for (std::string::const_iterator p = tag.begin();\n-\t       p != tag.end();\n-\t       ++p)\n+\t  for (std::string::const_iterator pt = tag.begin();\n+\t       pt != tag.end();\n+\t       ++pt)\n \t    {\n-\t      if (*p == '\\0')\n+\t      if (*pt == '\\0')\n \t\tret->append(\"\\\\x00\");\n-\t      else if (*p == '\\n')\n+\t      else if (*pt == '\\n')\n \t\tret->append(\"\\\\n\");\n-\t      else if (*p == '\\t')\n+\t      else if (*pt == '\\t')\n \t\tret->append(\"\\\\t\");\n-\t      else if (*p == '\"')\n+\t      else if (*pt == '\"')\n \t\tret->append(\"\\\\\\\"\");\n-\t      else if (*p == '\\\\')\n+\t      else if (*pt == '\\\\')\n \t\tret->append(\"\\\\\\\\\");\n \t      else\n-\t\tret->push_back(*p);\n+\t\tret->push_back(*pt);\n \t    }\n \t  ret->push_back('\"');\n \t}\n@@ -7197,11 +7196,11 @@ Array_type::verify_length()\n       return false;\n     case Numeric_constant::NC_UL_BIG:\n       {\n-\tmpz_t val;\n-\tif (!nc.to_int(&val))\n+\tmpz_t mval;\n+\tif (!nc.to_int(&mval))\n \t  go_unreachable();\n-\tunsigned int bits = mpz_sizeinbase(val, 2);\n-\tmpz_clear(val);\n+\tunsigned int bits = mpz_sizeinbase(mval, 2);\n+\tmpz_clear(mval);\n \tif (bits >= tbits)\n \t  {\n \t    go_error_at(this->length_->location(), \"array bound overflows\");\n@@ -7704,6 +7703,7 @@ Array_type::do_export(Export* exp) const\n         }\n       char* s = mpz_get_str(NULL, 10, val);\n       exp->write_string(s);\n+      free(s);\n       exp->write_string(\" \");\n       mpz_clear(val);\n     }\n@@ -9752,7 +9752,7 @@ Interface_type::do_import(Import* imp)\n \t  parameters = new Typed_identifier_list;\n \t  while (true)\n \t    {\n-\t      std::string name = imp->read_name();\n+\t      std::string pname = imp->read_name();\n \t      imp->require_c_string(\" \");\n \n \t      if (imp->match_c_string(\"...\"))\n@@ -9764,7 +9764,7 @@ Interface_type::do_import(Import* imp)\n \t      Type* ptype = imp->read_type();\n \t      if (is_varargs)\n \t\tptype = Type::make_array_type(ptype, NULL);\n-\t      parameters->push_back(Typed_identifier(name, ptype,\n+\t      parameters->push_back(Typed_identifier(pname, ptype,\n \t\t\t\t\t\t     imp->location()));\n \t      if (imp->peek_char() != ',')\n \t\tbreak;\n@@ -9791,10 +9791,10 @@ Interface_type::do_import(Import* imp)\n \t      imp->advance(1);\n \t      while (true)\n \t\t{\n-\t\t  std::string name = imp->read_name();\n+\t\t  std::string rname = imp->read_name();\n \t\t  imp->require_c_string(\" \");\n \t\t  Type* rtype = imp->read_type();\n-\t\t  results->push_back(Typed_identifier(name, rtype,\n+\t\t  results->push_back(Typed_identifier(rname, rtype,\n \t\t\t\t\t\t      imp->location()));\n \t\t  if (imp->peek_char() != ',')\n \t\t    break;"}]}