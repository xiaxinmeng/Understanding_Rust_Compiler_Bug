{"sha": "9cf11a478df93ab7640e207c7e73f53eba6e36c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNmMTFhNDc4ZGY5M2FiNzY0MGUyMDdjN2U3M2Y1M2ViYTZlMzZjOA==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-11-04T14:09:28Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-11-04T14:09:28Z"}, "message": "* cpp.texi: Update for _Pragma.\n\nFrom-SVN: r37253", "tree": {"sha": "d3a9744f4e11ea38aac2b668320a377327b7d1d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3a9744f4e11ea38aac2b668320a377327b7d1d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cf11a478df93ab7640e207c7e73f53eba6e36c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf11a478df93ab7640e207c7e73f53eba6e36c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cf11a478df93ab7640e207c7e73f53eba6e36c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf11a478df93ab7640e207c7e73f53eba6e36c8/comments", "author": null, "committer": null, "parents": [{"sha": "f148ca886cd0c560cf40fa45adbdabf63807be26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f148ca886cd0c560cf40fa45adbdabf63807be26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f148ca886cd0c560cf40fa45adbdabf63807be26"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "f22013986b999ecdbf70522ce6542e35788af015", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf11a478df93ab7640e207c7e73f53eba6e36c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf11a478df93ab7640e207c7e73f53eba6e36c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cf11a478df93ab7640e207c7e73f53eba6e36c8", "patch": "@@ -1,3 +1,7 @@\n+2000-11-04  Neil Booth  <neilb@earthling.net>\n+\n+\t* cpp.texi: Update for _Pragma.\n+\n 2000-11-04  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.texi (Contributing): Update URL for projects web page."}, {"sha": "b14186a3c02e44fcc189be13320e66efaa7f8514", "filename": "gcc/cpp.texi", "status": "modified", "additions": 46, "deletions": 19, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cf11a478df93ab7640e207c7e73f53eba6e36c8/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cf11a478df93ab7640e207c7e73f53eba6e36c8/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=9cf11a478df93ab7640e207c7e73f53eba6e36c8", "patch": "@@ -2702,17 +2702,8 @@ this is followed by a line number and file name as in @samp{#line}.\n @node Other Directives, Output, Line Control, Top\n @section Miscellaneous Preprocessing Directives\n \n-@cindex null directive\n-This section describes three additional preprocessing directives.  They\n-are not very useful, but are mentioned for completeness.\n-\n-The @dfn{null directive} consists of a @samp{#} followed by a newline,\n-with only whitespace (including comments) in between.  A null directive\n-is understood as a preprocessing directive but has no effect on the\n-preprocessor output.  The primary significance of the existence of the\n-null directive is that an input line consisting of just a @samp{#} will\n-produce no output, rather than a line of output containing just a\n-@samp{#}.  Supposedly some old C programs contain such lines.\n+This section describes some additional, rarely used, preprocessing\n+directives.\n \n @findex #pragma\n @findex #pragma GCC\n@@ -2730,14 +2721,6 @@ recognized without the @samp{GCC} prefix, however that use is\n deprecated.  Pragmas that are already deprecated are not recognized with\n a @samp{GCC} prefix.\n \n-@findex #ident\n-The @samp{#ident} directive is supported for compatibility with certain\n-other systems.  It is followed by a line of text.  On some systems, the\n-text is copied into a special place in the object file; on most systems,\n-the text is ignored and this directive has no effect.  Typically\n-@samp{#ident} is only used in header files supplied with those systems\n-where it is meaningful.\n-\n @findex #pragma GCC dependency\n The @samp{#pragma GCC dependency} allows you to check the relative dates\n of the current file and another file. If the other file is more recent\n@@ -2752,6 +2735,50 @@ warning message.\n #pragma GCC dependency \"/usr/include/time.h\" rerun /path/to/fixincludes\n @end smallexample\n \n+@findex _Pragma\n+The C99 standard also introduces the @samp{_Pragma} operator.  The\n+syntax is @code{_Pragma (string-literal)}, where @samp{string-literal}\n+can be either a normal or wide-character string literal.  It is\n+destringized, by replacing all @samp{\\\\} with a single @samp{\\} and all\n+@samp{\\\"} with a @samp{\"}.  The result is then processed as if it had\n+appeared as the right hand side of a @samp{#pragma} directive.  For\n+example,\n+\n+@smallexample\n+_Pragma (\"GCC dependency \\\"parse.y\\\"\")\n+@end smallexample\n+\n+@noindent has the same effect as @samp{#pragma GCC dependency\n+\"parse.y\"}.  The same effect could be achieved using macros, for example\n+\n+@smallexample\n+#define DO_PRAGMA(x) _Pragma (#x)\n+DO_PRAGMA (GCC dependency \"parse.y\")\n+@end smallexample\n+\n+The standard is unclear on where a @samp{_Pragma} operator can appear.\n+The preprocessor accepts it even within a preprocessing conditional\n+directive like @samp{#if}.  To be safe, you are probably best keeping it\n+out of directives other than @samp{#define}, and putting it on a line of\n+its own.\n+\n+@findex #ident\n+The @samp{#ident} directive is supported for compatibility with certain\n+other systems.  It is followed by a line of text.  On some systems, the\n+text is copied into a special place in the object file; on most systems,\n+the text is ignored and this directive has no effect.  Typically\n+@samp{#ident} is only used in header files supplied with those systems\n+where it is meaningful.\n+\n+@cindex null directive\n+The @dfn{null directive} consists of a @samp{#} followed by a newline,\n+with only whitespace (including comments) in between.  A null directive\n+is understood as a preprocessing directive but has no effect on the\n+preprocessor output.  The primary significance of the existence of the\n+null directive is that an input line consisting of just a @samp{#} will\n+produce no output, rather than a line of output containing just a\n+@samp{#}.  Supposedly some old C programs contain such lines.\n+\n @node Output, Implementation, Other Directives, Top\n @section C Preprocessor Output\n "}]}