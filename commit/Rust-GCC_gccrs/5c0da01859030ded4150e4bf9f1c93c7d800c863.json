{"sha": "5c0da01859030ded4150e4bf9f1c93c7d800c863", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMwZGEwMTg1OTAzMGRlZDQxNTBlNGJmOWYxYzkzYzdkODAwYzg2Mw==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2012-10-23T17:06:03Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2012-10-23T17:06:03Z"}, "message": "AArch64 [2/10]\n\n2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n\t    James Greenhalgh  <james.greenhalgh@arm.com>\n\t    Jim MacArthur  <jim.macarthur@arm.com>\n\t    Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\n\t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n\t    Nigel Stephens  <nigel.stephens@arm.com>\n\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\t    Richard Earnshaw  <rearnsha@arm.com>\n\t    Sofiane Naci  <sofiane.naci@arm.com>\n\t    Stephen Thomas  <stephen,thomas@arm.com>\n\t    Tejas Belagod  <tejas.belagod@arm.com>\n\t    Yufeng Zhang  <yufeng.zhang@arm.com>\n\n\t* doc/invoke.texi (AArch64 Options): New.\n\t* doc/md.texi (Machine Constraints): Add AArch64.\n\n\nCo-Authored-By: Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\nCo-Authored-By: James Greenhalgh <james.greenhalgh@arm.com>\nCo-Authored-By: Jim MacArthur <jim.macarthur@arm.com>\nCo-Authored-By: Marcus Shawcroft <marcus.shawcroft@arm.com>\nCo-Authored-By: Nigel Stephens <nigel.stephens@arm.com>\nCo-Authored-By: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\nCo-Authored-By: Sofiane Naci <sofiane.naci@arm.com>\nCo-Authored-By: Stephen Thomas <stephen.thomas@arm.com>\nCo-Authored-By: Tejas Belagod <tejas.belagod@arm.com>\nCo-Authored-By: Yufeng Zhang <yufeng.zhang@arm.com>\n\nFrom-SVN: r192724", "tree": {"sha": "db9613237afdf7e4dba46ea5562b4ac61f6c26c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db9613237afdf7e4dba46ea5562b4ac61f6c26c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c0da01859030ded4150e4bf9f1c93c7d800c863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0da01859030ded4150e4bf9f1c93c7d800c863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c0da01859030ded4150e4bf9f1c93c7d800c863", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0da01859030ded4150e4bf9f1c93c7d800c863/comments", "author": null, "committer": null, "parents": [{"sha": "43e9d192f17550753d62debb7f1d8bc9ecab2360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43e9d192f17550753d62debb7f1d8bc9ecab2360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43e9d192f17550753d62debb7f1d8bc9ecab2360"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "6c0628eaa981c0446aef6be01ab3d857173359a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0da01859030ded4150e4bf9f1c93c7d800c863/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0da01859030ded4150e4bf9f1c93c7d800c863/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c0da01859030ded4150e4bf9f1c93c7d800c863", "patch": "@@ -1,3 +1,19 @@\n+2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n+\t    James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Jim MacArthur  <jim.macarthur@arm.com>\n+\t    Chris Schlumberger-Socha <chris.schlumberger-socha@arm.com>\n+\t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\t    Nigel Stephens  <nigel.stephens@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Richard Earnshaw  <rearnsha@arm.com>\n+\t    Sofiane Naci  <sofiane.naci@arm.com>\n+\t    Stephen Thomas  <stephen,thomas@arm.com>\n+\t    Tejas Belagod  <tejas.belagod@arm.com>\n+\t    Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* doc/invoke.texi (AArch64 Options): New.\n+\t* doc/md.texi (Machine Constraints): Add AArch64.\n+\n 2012-10-23  Ian Bolton  <ian.bolton@arm.com>\n \t    James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Jim MacArthur  <jim.macarthur@arm.com>"}, {"sha": "6a90ff19c693284bfb1e92a184c1094d54040298", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0da01859030ded4150e4bf9f1c93c7d800c863/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0da01859030ded4150e4bf9f1c93c7d800c863/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5c0da01859030ded4150e4bf9f1c93c7d800c863", "patch": "@@ -467,6 +467,15 @@ Objective-C and Objective-C++ Dialects}.\n @c Try and put the significant identifier (CPU or system) first,\n @c so users have a clue at guessing where the ones they want will be.\n \n+@emph{AArch64 Options}\n+@gccoptlist{-mbig-endian  -mlittle-endian @gol\n+-mgeneral-regs-only @gol\n+-mcmodel=tiny  -mcmodel=small  -mcmodel=large @gol\n+-mstrict-align @gol\n+-momit-leaf-frame-pointer  -mno-omit-leaf-frame-pointer @gol\n+-mtls-dialect=desc  -mtls-dialect=traditional @gol\n+-march=@var{name}  -mcpu=@var{name}  -mtune=@var{name}}\n+\n @emph{Adapteva Epiphany Options}\n @gccoptlist{-mhalf-reg-file -mprefer-short-insn-regs @gol\n -mbranch-cost=@var{num} -mcmove -mnops=@var{num} -msoft-cmpsf @gol\n@@ -10619,6 +10628,7 @@ platform.\n @c in Machine Dependent Options\n \n @menu\n+* AArch64 Options::\n * Adapteva Epiphany Options::\n * ARM Options::\n * AVR Options::\n@@ -10828,6 +10838,125 @@ purpose.  The default is @option{-m1reg-none}.\n \n @end table\n \n+@node AArch64 Options\n+@subsection AArch64 Options\n+@cindex AArch64 Options\n+\n+These options are defined for AArch64 implementations:\n+\n+@table @gcctabopt\n+\n+@item -mbig-endian\n+@opindex mbig-endian\n+Generate big-endian code.  This is the default when GCC is configured for an\n+@samp{aarch64_be-*-*} target.\n+\n+@item -mgeneral-regs-only\n+@opindex mgeneral-regs-only\n+Generate code which uses only the general registers.\n+\n+@item -mlittle-endian\n+@opindex mlittle-endian\n+Generate little-endian code.  This is the default when GCC is configured for an\n+@samp{aarch64-*-*} but not an @samp{aarch64_be-*-*} target.\n+\n+@item -mcmodel=tiny\n+@opindex mcmodel=tiny\n+Generate code for the tiny code model.  The program and its statically defined\n+symbols must be within 1GB of each other.  Pointers are 64 bits.  Programs can\n+be statically or dynamically linked.  This model is not fully implemented and\n+mostly treated as @samp{small}.\n+\n+@item -mcmodel=small\n+@opindex mcmodel=small\n+Generate code for the small code model.  The program and its statically defined\n+symbols must be within 4GB of each other.  Pointers are 64 bits.  Programs can\n+be statically or dynamically linked.  This is the default code model.\n+\n+@item -mcmodel=large\n+@opindex mcmodel=large\n+Generate code for the large code model.  This makes no assumptions about\n+addresses and sizes of sections.  Pointers are 64 bits.  Programs can be\n+statically linked only.\n+\n+@item -mstrict-align\n+@opindex mstrict-align\n+Do not assume that unaligned memory references will be handled by the system.\n+\n+@item -momit-leaf-frame-pointer\n+@item -mno-omit-leaf-frame-pointer\n+@opindex momit-leaf-frame-pointer\n+@opindex mno-omit-leaf-frame-pointer\n+Omit or keep the frame pointer in leaf functions.  The former behaviour is the\n+default.\n+\n+@item -mtls-dialect=desc\n+@opindex mtls-dialect=desc\n+Use TLS descriptors as the thread-local storage mechanism for dynamic accesses\n+of TLS variables.  This is the default.\n+\n+@item -mtls-dialect=traditional\n+@opindex mtls-dialect=traditional\n+Use traditional TLS as the thread-local storage mechanism for dynamic accesses\n+of TLS variables.\n+\n+@item -march=@var{name}\n+@opindex march\n+Specify the name of the target architecture, optionally suffixed by one or\n+more feature modifiers.  This option has the form\n+@option{-march=@var{arch}@r{@{}+@r{[}no@r{]}@var{feature}@r{@}*}}, where the\n+only value for @var{arch} is @samp{armv8-a}.  The possible values for\n+@var{feature} are documented in the sub-section below.\n+\n+Where conflicting feature modifiers are specified, the right-most feature is\n+used.\n+\n+GCC uses this name to determine what kind of instructions it can emit when\n+generating assembly code.  This option can be used in conjunction with or\n+instead of the @option{-mcpu=} option.\n+\n+@item -mcpu=@var{name}\n+@opindex mcpu\n+Specify the name of the target processor, optionally suffixed by one or more\n+feature modifiers.  This option has the form\n+@option{-mcpu=@var{cpu}@r{@{}+@r{[}no@r{]}@var{feature}@r{@}*}}, where the\n+possible values for @var{cpu} are @samp{generic}, @samp{large}.  The\n+possible values for @var{feature} are documented in the sub-section\n+below.\n+\n+Where conflicting feature modifiers are specified, the right-most feature is\n+used.\n+\n+GCC uses this name to determine what kind of instructions it can emit when\n+generating assembly code.\n+\n+@item -mtune=@var{name}\n+@opindex mtune\n+Specify the name of the processor to tune the performance for.  The code will\n+be tuned as if the target processor were of the type specified in this option,\n+but still using instructions compatible with the target processor specified\n+by a @option{-mcpu=} option.  This option cannot be suffixed by feature\n+modifiers.\n+\n+@end table\n+\n+@subsubsection @option{-march} and @option{-mcpu} feature modifiers\n+@cindex @option{-march} feature modifiers\n+@cindex @option{-mcpu} feature modifiers\n+Feature modifiers used with @option{-march} and @option{-mcpu} can be one\n+the following:\n+\n+@table @samp\n+@item crypto\n+Enable Crypto extension.  This implies Advanced SIMD is enabled.\n+@item fp\n+Enable floating-point instructions.\n+@item simd\n+Enable Advanced SIMD instructions.  This implies floating-point instructions\n+are enabled.  This is the default for all current possible values for options\n+@option{-march} and @option{-mcpu=}.\n+@end table\n+\n @node ARM Options\n @subsection ARM Options\n @cindex ARM options"}, {"sha": "88e1ca7c4f68d0fe6a50e696766412f3d1669629", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0da01859030ded4150e4bf9f1c93c7d800c863/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0da01859030ded4150e4bf9f1c93c7d800c863/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=5c0da01859030ded4150e4bf9f1c93c7d800c863", "patch": "@@ -1671,6 +1671,66 @@ table heading for each architecture is the definitive reference for\n the meanings of that architecture's constraints.\n \n @table @emph\n+@item AArch64 family---@file{config/aarch64/constraints.md}\n+@table @code\n+@item k\n+The stack pointer register (@code{SP})\n+\n+@item w\n+Floating point or SIMD vector register\n+\n+@item I\n+Integer constant that is valid as an immediate operand in an @code{ADD}\n+instruction\n+\n+@item J\n+Integer constant that is valid as an immediate operand in a @code{SUB}\n+instruction (once negated)\n+\n+@item K\n+Integer constant that can be used with a 32-bit logical instruction\n+\n+@item L\n+Integer constant that can be used with a 64-bit logical instruction\n+\n+@item M\n+Integer constant that is valid as an immediate operand in a 32-bit @code{MOV}\n+pseudo instruction. The @code{MOV} may be assembled to one of several different\n+machine instructions depending on the value\n+\n+@item N\n+Integer constant that is valid as an immediate operand in a 64-bit @code{MOV}\n+pseudo instruction\n+\n+@item S\n+An absolute symbolic address or a label reference\n+\n+@item Y\n+Floating point constant zero\n+\n+@item Z\n+Integer constant zero\n+\n+@item Usa\n+An absolute symbolic address\n+\n+@item Ush\n+The high part (bits 12 and upwards) of the pc-relative address of a symbol\n+within 4GB of the instruction\n+\n+@item Q\n+A memory address which uses a single base register with no offset\n+\n+@item Ump\n+A memory address suitable for a load/store pair instruction in SI, DI, SF and\n+DF modes\n+\n+@item Utf\n+A memory address suitable for a load/store pair instruction in TF mode\n+\n+@end table\n+\n+\n @item ARM family---@file{config/arm/constraints.md}\n @table @code\n @item w"}]}