{"sha": "cf3b97ef62af198eacdafcbb4c6d24e0591520e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YzYjk3ZWY2MmFmMTk4ZWFjZGFmY2JiNGM2ZDI0ZTA1OTE1MjBlNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:19:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:19:17Z"}, "message": "[multiple changes]\n\n2013-10-14  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Library_Level attribute now applies to an\n\tentity name.\n\t* sem_attr.adb (Analyze_Attribute, case Library_Level): Prefix\n\tis now an entity name.\n\n2013-10-14  Jose Ruiz  <ruiz@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specification): For\n\tPriority and CPU aspects in subprograms, the expression in the\n\taspect is analyzed and exported.\n\nFrom-SVN: r203543", "tree": {"sha": "76679a8107ecb3d17bc0702a961d8e4130ecfa21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76679a8107ecb3d17bc0702a961d8e4130ecfa21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf3b97ef62af198eacdafcbb4c6d24e0591520e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3b97ef62af198eacdafcbb4c6d24e0591520e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3b97ef62af198eacdafcbb4c6d24e0591520e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3b97ef62af198eacdafcbb4c6d24e0591520e7/comments", "author": null, "committer": null, "parents": [{"sha": "5c211bfd5afac2c366e840291e8fca8f4b5e2976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c211bfd5afac2c366e840291e8fca8f4b5e2976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c211bfd5afac2c366e840291e8fca8f4b5e2976"}], "stats": {"total": 161, "additions": 138, "deletions": 23}, "files": [{"sha": "fbfb947ace95fea2e7635d9e919a16dc84e7e6db", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3b97ef62af198eacdafcbb4c6d24e0591520e7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3b97ef62af198eacdafcbb4c6d24e0591520e7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cf3b97ef62af198eacdafcbb4c6d24e0591520e7", "patch": "@@ -1,3 +1,16 @@\n+2013-10-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Library_Level attribute now applies to an\n+\tentity name.\n+\t* sem_attr.adb (Analyze_Attribute, case Library_Level): Prefix\n+\tis now an entity name.\n+\n+2013-10-14  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specification): For\n+\tPriority and CPU aspects in subprograms, the expression in the\n+\taspect is analyzed and exported.\n+\n 2013-10-14  Robert Dewar  <dewar@adacore.com>\n \n \t* s-valuti.adb, prep.adb, scng.adb, errout.adb: Minor reformatting."}, {"sha": "c10ba330217ce06473d2e702d23ed476b191be3e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3b97ef62af198eacdafcbb4c6d24e0591520e7/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3b97ef62af198eacdafcbb4c6d24e0591520e7/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=cf3b97ef62af198eacdafcbb4c6d24e0591520e7", "patch": "@@ -8348,21 +8348,20 @@ this attribute.\n @findex Library_Level\n @noindent\n @noindent\n-@code{Standard'Library_Level} (@code{Standard} is the only allowed\n-prefix) returns a Boolean value which is True if the attribute is\n-evaluated at the library level (e.g. with a package declaration),\n-and false if evaluated elsewhere (e.g. within a subprogram body).\n-In the case of generics, the value indicates the placement of\n-the instantiation, not the template, and indeed the use of this\n-attribute within a generic is the intended common application\n-as shown in this example:\n+@code{P'Library_Level}, where P is an entity name,\n+returns a Boolean value which is True if the entity is declared\n+at the library level, and False otherwise. Note that within a\n+generic instantition, the name of the generic unit denotes the\n+instance, which means that this attribute can be used to test\n+if a generic is instantiated at the library level, as shown\n+in this example:\n \n @smallexample @c ada\n generic\n   ...\n package Gen is\n   pragma Compile_Time_Error\n-    (not Standard'Library_Level,\n+    (not Gen'Library_Level,\n      \"Gen can only be instantiated at library level\");\n   ...\n end Gen;"}, {"sha": "493f544cf3a05520687d9520212edf74236eafaf", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3b97ef62af198eacdafcbb4c6d24e0591520e7/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3b97ef62af198eacdafcbb4c6d24e0591520e7/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=cf3b97ef62af198eacdafcbb4c6d24e0591520e7", "patch": "@@ -3689,11 +3689,14 @@ package body Sem_Attr is\n \n       when Attribute_Library_Level =>\n          Check_E0;\n-         Check_Standard_Prefix;\n+\n+         if not Is_Entity_Name (P) then\n+            Error_Attr_P (\"prefix of % attribute must be an entity name\");\n+         end if;\n \n          if not Inside_A_Generic then\n             Set_Boolean_Result (N,\n-              Nearest_Dynamic_Scope (Current_Scope) = Standard_Standard);\n+              Is_Library_Level_Entity (Entity (P)));\n          end if;\n \n          Set_Etype (N, Standard_Boolean);"}, {"sha": "0264d315c37282627b861048e040fd60376f8a39", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 112, "deletions": 12, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf3b97ef62af198eacdafcbb4c6d24e0591520e7/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf3b97ef62af198eacdafcbb4c6d24e0591520e7/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=cf3b97ef62af198eacdafcbb4c6d24e0591520e7", "patch": "@@ -1794,22 +1794,123 @@ package body Sem_Ch13 is\n \n                --  CPU, Interrupt_Priority, Priority\n \n-               --  These three aspects can be specified for a subprogram body,\n-               --  in which case we generate pragmas for them and insert them\n-               --  ahead of local declarations, rather than after the body.\n+               --  These three aspects can be specified for a subprogram spec\n+               --  or body, in which case we analyze the expression and export\n+               --  the value of the aspect.\n+\n+               --  Previously, we generated an equivalent pragma for bodies\n+               --  (note that the specs cannot contain these pragmas). The\n+               --  pragma was inserted ahead of local declarations, rather than\n+               --  after the body. This leads to a certain duplication between\n+               --  the processing performed for the aspect and the pragma, but\n+               --  given the straightforward handling required it is simpler\n+               --  to duplicate than to translate the aspect in the spec into\n+               --  a pragma in the declarative part of the body.\n \n                when Aspect_CPU                |\n                     Aspect_Interrupt_Priority |\n                     Aspect_Priority           =>\n \n-                  if Nkind (N) = N_Subprogram_Body then\n-                     Make_Aitem_Pragma\n-                       (Pragma_Argument_Associations => New_List (\n-                          Make_Pragma_Argument_Association (Sloc (Expr),\n-                            Expression => Relocate_Node (Expr))),\n-                        Pragma_Name                  => Chars (Id));\n+                  if Nkind_In (N, N_Subprogram_Body,\n+                                  N_Subprogram_Declaration)\n+                  then\n+                     --  Analyze the aspect expression\n+\n+                     Analyze_And_Resolve (Expr, Standard_Integer);\n+\n+                     --  Interrupt_Priority aspect not allowed for main\n+                     --  subprograms. ARM D.1 does not forbid this explicitly,\n+                     --  but ARM J.15.11 (6/3) does not permit pragma\n+                     --  Interrupt_Priority for subprograms.\n+\n+                     if A_Id = Aspect_Interrupt_Priority then\n+                        Error_Msg_N\n+                          (\"Interrupt_Priority aspect cannot apply to \"\n+                           & \"subprogram\", Expr);\n+\n+                     --  The expression must be static\n+\n+                     elsif not Is_Static_Expression (Expr) then\n+                        Flag_Non_Static_Expr\n+                          (\"aspect requires static expression!\", Expr);\n+\n+                     --  Check whether this is the main subprogram\n+\n+                     elsif Current_Sem_Unit /= Main_Unit\n+                       and then\n+                         Cunit_Entity (Current_Sem_Unit) /= Main_Unit_Entity\n+                     then\n+                        --  See ARM D.1 (14/3) and D.16 (12/3)\n+\n+                        Error_Msg_N\n+                          (\"aspect applied to subprogram other than the \"\n+                           & \"main subprogram has no effect??\", Expr);\n+\n+                     --  Otherwise check in range and export the value\n+\n+                     --  For the CPU aspect\n+\n+                     elsif A_Id = Aspect_CPU then\n+                        if Is_In_Range (Expr, RTE (RE_CPU_Range)) then\n+\n+                           --  Value is correct so we export the value to make\n+                           --  it available at execution time.\n+\n+                           Set_Main_CPU\n+                             (Main_Unit, UI_To_Int (Expr_Value (Expr)));\n+\n+                        else\n+                           Error_Msg_N\n+                             (\"main subprogram CPU is out of range\", Expr);\n+                        end if;\n+\n+                     --  For the Priority aspect\n+\n+                     elsif A_Id = Aspect_Priority then\n+                        if Is_In_Range (Expr, RTE (RE_Priority)) then\n+\n+                           --  Value is correct so we export the value to make\n+                           --  it available at execution time.\n+\n+                           Set_Main_Priority\n+                             (Main_Unit, UI_To_Int (Expr_Value (Expr)));\n+\n+                        else\n+                           Error_Msg_N\n+                             (\"main subprogram priority is out of range\",\n+                              Expr);\n+                        end if;\n+                     end if;\n+\n+                     --  Load an arbitrary entity from System.Tasking.Stages\n+                     --  or System.Tasking.Restricted.Stages (depending on\n+                     --  the supported profile) to make sure that one of these\n+                     --  packages is implicitly with'ed, since we need to have\n+                     --  the tasking run time active for the pragma Priority to\n+                     --  have any effect. Previously with with'ed the package\n+                     --  System.Tasking, but this package does not trigger the\n+                     --  required initialization of the run-time library.\n+\n+                     declare\n+                        Discard : Entity_Id;\n+                        pragma Warnings (Off, Discard);\n+                     begin\n+                        if Restricted_Profile then\n+                           Discard := RTE (RE_Activate_Restricted_Tasks);\n+                        else\n+                           Discard := RTE (RE_Activate_Tasks);\n+                        end if;\n+                     end;\n+\n+                     --  Handling for these Aspects in subprograms is complete\n+\n+                     goto Continue;\n+\n+                  --  For tasks\n \n                   else\n+                     --  Pass the aspect as an attribute\n+\n                      Aitem :=\n                        Make_Attribute_Definition_Clause (Loc,\n                          Name       => Ent,\n@@ -2566,9 +2667,8 @@ package body Sem_Ch13 is\n                      end if;\n                   end if;\n \n-                  --  If the aspect is on a subprogram body (relevant aspects\n-                  --  are Inline and Priority), add the pragma in front of\n-                  --  the declarations.\n+                  --  If the aspect is on a subprogram body (relevant aspect\n+                  --  is Inline), add the pragma in front of the declarations.\n \n                   if Nkind (N) = N_Subprogram_Body then\n                      if No (Declarations (N)) then"}]}