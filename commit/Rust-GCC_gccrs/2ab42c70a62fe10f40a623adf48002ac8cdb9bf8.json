{"sha": "2ab42c70a62fe10f40a623adf48002ac8cdb9bf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFiNDJjNzBhNjJmZTEwZjQwYTYyM2FkZjQ4MDAyYWM4Y2RiOWJmOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-04-26T10:46:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-18T09:08:37Z"}, "message": "[Ada] Fix small inefficiency in previous change to expander\n\n2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Get_Size_For_Range): Only make sure to return a\n\tsize lower than that of the original type if possible.\n\t* libgnat/s-rannum.adb (Random_Discrete): Back out optimization\n\tadded for 32-bit types.", "tree": {"sha": "678afe6359395f39320bc4b5a19193c1d7bd649a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/678afe6359395f39320bc4b5a19193c1d7bd649a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ab42c70a62fe10f40a623adf48002ac8cdb9bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab42c70a62fe10f40a623adf48002ac8cdb9bf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab42c70a62fe10f40a623adf48002ac8cdb9bf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab42c70a62fe10f40a623adf48002ac8cdb9bf8/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "424ce99fb53c994ba56f99e4b5513dc19e897463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/424ce99fb53c994ba56f99e4b5513dc19e897463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/424ce99fb53c994ba56f99e4b5513dc19e897463"}], "stats": {"total": 134, "additions": 57, "deletions": 77}, "files": [{"sha": "2adebb6f54caaf65eb593642da6167b0f8b36734", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab42c70a62fe10f40a623adf48002ac8cdb9bf8/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab42c70a62fe10f40a623adf48002ac8cdb9bf8/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=2ab42c70a62fe10f40a623adf48002ac8cdb9bf8", "patch": "@@ -13919,28 +13919,50 @@ package body Exp_Ch4 is\n       Typ    : constant Entity_Id := Etype (R);\n \n       function Get_Size_For_Range (Lo, Hi : Uint) return Nat;\n-      --  Return the size of the smallest signed integer type covering Lo .. Hi\n+      --  Return the size of a small signed integer type covering Lo .. Hi.\n+      --  The important thing is to return a size lower than that of Typ.\n \n       ------------------------\n       -- Get_Size_For_Range --\n       ------------------------\n \n       function Get_Size_For_Range (Lo, Hi : Uint) return Nat is\n-         B : Uint;\n-         S : Nat;\n+\n+         function Is_OK_For_Range (Siz : Nat) return Boolean;\n+         --  Return True if a signed integer with given size can cover Lo .. Hi\n+\n+         --------------------------\n+         -- Is_OK_For_Range --\n+         --------------------------\n+\n+         function Is_OK_For_Range (Siz : Nat) return Boolean is\n+            B : constant Uint := Uint_2 ** (Siz - 1);\n+\n+         begin\n+            --  Test B = 2 ** (size - 1) (can accommodate -B .. +(B - 1))\n+\n+            return Lo >= -B and then Hi >= -B and then Lo < B and then Hi < B;\n+         end Is_OK_For_Range;\n \n       begin\n-         S := 1;\n-         B := Uint_1;\n+         --  This is (almost always) the size of Integer\n \n-         --  S = size, B = 2 ** (size - 1) (can accommodate -B .. +(B - 1))\n+         if Is_OK_For_Range (32) then\n+            return 32;\n \n-         while Lo < -B or else Hi < -B or else Lo >= B or else Hi >= B loop\n-            B := Uint_2 ** S;\n-            S := S + 1;\n-         end loop;\n+         --  If the size of Typ is 64 then check 63\n+\n+         elsif RM_Size (Typ) = 64 and then Is_OK_For_Range (63) then\n+            return 63;\n+\n+         --  This is (almost always) the size of Long_Long_Integer\n \n-         return S;\n+         elsif Is_OK_For_Range (64) then\n+            return 64;\n+\n+         else\n+            return 128;\n+         end if;\n       end Get_Size_For_Range;\n \n       --  Local variables"}, {"sha": "baf5cbe97cbf72dc50ea2a256af04534f9fbb4d5", "filename": "gcc/ada/libgnat/s-rannum.adb", "status": "modified", "additions": 24, "deletions": 66, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab42c70a62fe10f40a623adf48002ac8cdb9bf8/gcc%2Fada%2Flibgnat%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab42c70a62fe10f40a623adf48002ac8cdb9bf8/gcc%2Fada%2Flibgnat%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-rannum.adb?ref=2ab42c70a62fe10f40a623adf48002ac8cdb9bf8", "patch": "@@ -402,10 +402,11 @@ is\n       elsif Max < Min then\n          raise Constraint_Error;\n \n+      --  In the 64-bit case, we have to be careful since not all 64-bit\n+      --  unsigned values are representable in GNAT's universal integer.\n+\n       elsif Result_Subtype'Base'Size > 32 then\n          declare\n-            --  In the 64-bit case, we have to be careful since not all 64-bit\n-            --  unsigned values are representable in GNAT's universal integer.\n             --  Ignore unequal-size warnings since GNAT's handling is correct.\n \n             pragma Warnings (\"Z\");\n@@ -422,8 +423,7 @@ is\n \n          begin\n             if N = 0 then\n-               X := Random (Gen);\n-               return Conv_To_Result (Conv_To_Unsigned (Min) + X);\n+               return Conv_To_Result (Conv_To_Unsigned (Min) + Random (Gen));\n \n             else\n                Slop := Unsigned_64'Last rem N + 1;\n@@ -437,73 +437,31 @@ is\n             end if;\n          end;\n \n-      else\n-         declare\n-            --  In the 32-bit case, unlike the above case, we need to handle\n-            --  both integer and enumeration types. If the values of the result\n-            --  subtype are contiguous, then we can still use the above trick.\n-            --  Otherwise we need to rely on 'Pos and 'Val in the computation,\n-            --  which is more costly since it will thus be done in universal\n-            --  integer. And ignore unequal-size warnings in this case too.\n+      --  In the 32-bit case, we need to handle both integer and enumeration\n+      --  types and, therefore, rely on 'Pos and 'Val in the computation.\n \n-            pragma Warnings (\"Z\");\n-            function Conv_To_Unsigned is\n-               new Unchecked_Conversion (Result_Subtype'Base, Unsigned_32);\n-            function Conv_To_Result is\n-               new Unchecked_Conversion (Unsigned_32, Result_Subtype'Base);\n-            pragma Warnings (\"z\");\n-\n-            Contiguous : constant Boolean :=\n-                              Result_Subtype'Pos (Result_Subtype'Last) -\n-                                Result_Subtype'Pos (Result_Subtype'First)\n-                                =\n-                              Result_Subtype'Enum_Rep (Result_Subtype'Last) -\n-                                Result_Subtype'Enum_Rep (Result_Subtype'First);\n+      elsif Result_Subtype'Pos (Max) - Result_Subtype'Pos (Min) = 2 ** 32 - 1\n+      then\n+         return Result_Subtype'Val\n+           (Result_Subtype'Pos (Min) + Unsigned_32'Pos (Random (Gen)));\n \n-            N, X, Slop : Unsigned_32;\n+      else\n+         declare\n+            N    : constant Unsigned_32 :=\n+                     Unsigned_32 (Result_Subtype'Pos (Max) -\n+                                    Result_Subtype'Pos (Min) + 1);\n+            Slop : constant Unsigned_32 := Unsigned_32'Last rem N + 1;\n+            X    : Unsigned_32;\n \n          begin\n-            if Contiguous then\n-               N := Conv_To_Unsigned (Max) - Conv_To_Unsigned (Min) + 1;\n-\n-               if N = 0 then\n-                  X := Random (Gen);\n-                  return Conv_To_Result (Conv_To_Unsigned (Min) + X);\n-\n-               else\n-                  Slop := Unsigned_32'Last rem N + 1;\n-\n-                  loop\n-                     X := Random (Gen);\n-                     exit when Slop = N or else X <= Unsigned_32'Last - Slop;\n-                  end loop;\n-\n-                  return Conv_To_Result (Conv_To_Unsigned (Min) + X rem N);\n-               end if;\n-\n-            else\n-               N := Unsigned_32 (Result_Subtype'Pos (Max) -\n-                                   Result_Subtype'Pos (Min) + 1);\n-\n-               if N = 0 then\n-                  X := Random (Gen);\n-                  return\n-                    Result_Subtype'Val\n-                      (Result_Subtype'Pos (Min) + Unsigned_32'Pos (X));\n-\n-               else\n-                  Slop := Unsigned_32'Last rem N + 1;\n-\n-                  loop\n-                     X := Random (Gen);\n-                     exit when Slop = N or else X <= Unsigned_32'Last - Slop;\n-                  end loop;\n+            loop\n+               X := Random (Gen);\n+               exit when Slop = N or else X <= Unsigned_32'Last - Slop;\n+            end loop;\n \n-                  return\n-                    Result_Subtype'Val\n-                      (Result_Subtype'Pos (Min) + Unsigned_32'Pos (X rem N));\n-               end if;\n-            end if;\n+            return\n+              Result_Subtype'Val\n+                (Result_Subtype'Pos (Min) + Unsigned_32'Pos (X rem N));\n          end;\n       end if;\n    end Random_Discrete;"}]}