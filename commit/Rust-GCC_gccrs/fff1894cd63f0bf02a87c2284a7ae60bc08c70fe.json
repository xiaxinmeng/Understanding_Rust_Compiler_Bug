{"sha": "fff1894cd63f0bf02a87c2284a7ae60bc08c70fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZmMTg5NGNkNjNmMGJmMDJhODdjMjI4NGE3YWU2MGJjMDhjNzBmZQ==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2009-05-06T14:27:10Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2009-05-06T14:27:10Z"}, "message": "tree-ssa.c (execute_update_address_taken): Handle TARGET_MEM_REF when processing for not_regs_needed bitmap.\n\n        * tree-ssa.c (execute_update_address_taken): Handle TARGET_MEM_REF\n        when processing for not_regs_needed bitmap.\n        * gimple.c (walk_stmt_load_store_addr_ops): When visiting address,\n        handle TARGET_MEM_REF in lhs.  Check TMR_BASE for NULL while\n        handling it for rhs.\n\nFrom-SVN: r147179", "tree": {"sha": "f42b7e6ad28124b32fb513b6b602ef7474fb842e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f42b7e6ad28124b32fb513b6b602ef7474fb842e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fff1894cd63f0bf02a87c2284a7ae60bc08c70fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff1894cd63f0bf02a87c2284a7ae60bc08c70fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fff1894cd63f0bf02a87c2284a7ae60bc08c70fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff1894cd63f0bf02a87c2284a7ae60bc08c70fe/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "700ae70ccd0670e450e76529e413cbb5e14c72f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700ae70ccd0670e450e76529e413cbb5e14c72f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700ae70ccd0670e450e76529e413cbb5e14c72f4"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "3593d748295d681f0784cf71431de08b8d4166d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff1894cd63f0bf02a87c2284a7ae60bc08c70fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff1894cd63f0bf02a87c2284a7ae60bc08c70fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fff1894cd63f0bf02a87c2284a7ae60bc08c70fe", "patch": "@@ -1,3 +1,11 @@\n+2009-05-06  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\t* tree-ssa.c (execute_update_address_taken): Handle TARGET_MEM_REF\n+\twhen processing for not_regs_needed bitmap.\n+\t* gimple.c (walk_stmt_load_store_addr_ops): When visiting address,\n+\thandle TARGET_MEM_REF in lhs.  Check TMR_BASE for NULL while \n+\thandling it for rhs. \n+\n 2009-05-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.md ((unnamed inc/dec peephole): Use"}, {"sha": "d81c3f35551b58a91759d94296b850badee4342b", "filename": "gcc/gimple.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff1894cd63f0bf02a87c2284a7ae60bc08c70fe/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff1894cd63f0bf02a87c2284a7ae60bc08c70fe/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=fff1894cd63f0bf02a87c2284a7ae60bc08c70fe", "patch": "@@ -3232,12 +3232,18 @@ walk_stmt_load_store_addr_ops (gimple stmt, void *data,\n \t  if (TREE_CODE (rhs) == ADDR_EXPR)\n \t    ret |= visit_addr (stmt, TREE_OPERAND (rhs, 0), data);\n \t  else if (TREE_CODE (rhs) == TARGET_MEM_REF\n+                   && TMR_BASE (rhs) != NULL_TREE\n \t\t   && TREE_CODE (TMR_BASE (rhs)) == ADDR_EXPR)\n \t    ret |= visit_addr (stmt, TREE_OPERAND (TMR_BASE (rhs), 0), data);\n \t  else if (TREE_CODE (rhs) == OBJ_TYPE_REF\n \t\t   && TREE_CODE (OBJ_TYPE_REF_OBJECT (rhs)) == ADDR_EXPR)\n \t    ret |= visit_addr (stmt, TREE_OPERAND (OBJ_TYPE_REF_OBJECT (rhs),\n \t\t\t\t\t\t   0), data);\n+          lhs = gimple_assign_lhs (stmt);\n+\t  if (TREE_CODE (lhs) == TARGET_MEM_REF\n+              && TMR_BASE (lhs) != NULL_TREE\n+              && TREE_CODE (TMR_BASE (lhs)) == ADDR_EXPR)\n+            ret |= visit_addr (stmt, TREE_OPERAND (TMR_BASE (lhs), 0), data);\n \t}\n       if (visit_load)\n \t{"}, {"sha": "10f84828fa8fc61c90e5c24ab20784ccc85a6bb1", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff1894cd63f0bf02a87c2284a7ae60bc08c70fe/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff1894cd63f0bf02a87c2284a7ae60bc08c70fe/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=fff1894cd63f0bf02a87c2284a7ae60bc08c70fe", "patch": "@@ -1518,14 +1518,20 @@ execute_update_addresses_taken (bool do_optimize)\n \t     a local decl that requires not to be a gimple register.  */\n \t  if (code == GIMPLE_ASSIGN || code == GIMPLE_CALL)\n \t    {\n-\t      tree lhs = gimple_get_lhs (stmt);\n-\t      /* A plain decl does not need it set.  */\n-\t      if (lhs && handled_component_p (lhs))\n-\t        {\n-\t\t  var = get_base_address (lhs);\n-\t\t  if (DECL_P (var))\n-\t\t    bitmap_set_bit (not_reg_needs, DECL_UID (var));\n-\t\t}\n+              tree lhs = gimple_get_lhs (stmt);\n+              \n+              /* We may not rewrite TMR_SYMBOL to SSA.  */\n+              if (lhs && TREE_CODE (lhs) == TARGET_MEM_REF\n+                  && TMR_SYMBOL (lhs))\n+                bitmap_set_bit (not_reg_needs, DECL_UID (TMR_SYMBOL (lhs)));\n+\n+              /* A plain decl does not need it set.  */\n+              else if (lhs && handled_component_p (lhs))\n+                {\n+                  var = get_base_address (lhs);\n+                  if (DECL_P (var))\n+                    bitmap_set_bit (not_reg_needs, DECL_UID (var));\n+                }\n \t    }\n \t}\n "}]}