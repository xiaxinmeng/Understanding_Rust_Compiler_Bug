{"sha": "4349775a30600906f5811ba7c743a5c22bdb3d7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM0OTc3NWEzMDYwMDkwNmY1ODExYmE3Yzc0M2E1YzIyYmRiM2Q3ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-19T15:13:53Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-19T15:13:53Z"}, "message": "compiler: optimize string concatenations\n    \n    runtime.concatstring{2,3,4,5} are just wrappers of concatstrings.\n    These wrappers don't provide any benefit, at least in the C\n    calling convention we use, where passing arrays by value isn't an\n    efficient thing. Change it to always use concatstrings.\n    \n    Also, the cap field of the slice passed to concatstrings is not\n    necessary. So change it to pass a pointer and a length directly,\n    which is more efficient than passing a slice header by value.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/182539\n\nFrom-SVN: r272476", "tree": {"sha": "a603f337ecccb290e61a1766664dd5ec30b5bb58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a603f337ecccb290e61a1766664dd5ec30b5bb58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4349775a30600906f5811ba7c743a5c22bdb3d7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4349775a30600906f5811ba7c743a5c22bdb3d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4349775a30600906f5811ba7c743a5c22bdb3d7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4349775a30600906f5811ba7c743a5c22bdb3d7d/comments", "author": null, "committer": null, "parents": [{"sha": "7a907deeeb0b17ed332eb6e3a181a35b1873daf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a907deeeb0b17ed332eb6e3a181a35b1873daf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a907deeeb0b17ed332eb6e3a181a35b1873daf5"}], "stats": {"total": 106, "additions": 23, "deletions": 83}, "files": [{"sha": "3b0cff742ebeac6581cfd6036382a927faf1aede", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4349775a30600906f5811ba7c743a5c22bdb3d7d/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4349775a30600906f5811ba7c743a5c22bdb3d7d/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4349775a30600906f5811ba7c743a5c22bdb3d7d", "patch": "@@ -1,4 +1,4 @@\n-0e4aa31b26a20b6a6a2ca102b85ba8c8b8cdf876\n+7822080a6e226b1e5872e2fcefac30f666f4cc1e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "864b62df3b1fd3a438be31e6226c56cdffa4a300", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 17, "deletions": 51, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4349775a30600906f5811ba7c743a5c22bdb3d7d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4349775a30600906f5811ba7c743a5c22bdb3d7d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=4349775a30600906f5811ba7c743a5c22bdb3d7d", "patch": "@@ -7442,7 +7442,7 @@ String_concat_expression::do_check_types(Gogo*)\n \n Expression*\n String_concat_expression::do_flatten(Gogo*, Named_object*,\n-\t\t\t\t     Statement_inserter*)\n+\t\t\t\t     Statement_inserter* inserter)\n {\n   if (this->is_error_expression())\n     return this;\n@@ -7497,56 +7497,22 @@ String_concat_expression::do_flatten(Gogo*, Named_object*,\n     }\n   if (buf == NULL)\n     buf = Expression::make_nil(loc);\n-  Expression* call;\n-  switch (this->exprs_->size())\n-    {\n-    case 0: case 1:\n-      go_unreachable();\n-\n-    case 2: case 3: case 4: case 5:\n-      {\n-\tExpression* len = Expression::make_integer_ul(this->exprs_->size(),\n-\t\t\t\t\t\t      NULL, loc);\n-\tArray_type* arg_type = Type::make_array_type(type, len);\n-\targ_type->set_is_array_incomparable();\n-\tExpression* arg =\n-\t  Expression::make_array_composite_literal(arg_type, this->exprs_,\n-\t\t\t\t\t\t   loc);\n-\tRuntime::Function code;\n-\tswitch (this->exprs_->size())\n-\t  {\n-\t  default:\n-\t    go_unreachable();\n-\t  case 2:\n-\t    code = Runtime::CONCATSTRING2;\n-\t    break;\n-\t  case 3:\n-\t    code = Runtime::CONCATSTRING3;\n-\t    break;\n-\t  case 4:\n-\t    code = Runtime::CONCATSTRING4;\n-\t    break;\n-\t  case 5:\n-\t    code = Runtime::CONCATSTRING5;\n-\t    break;\n-\t  }\n-\tcall = Runtime::make_call(code, loc, 2, buf, arg);\n-      }\n-      break;\n-\n-    default:\n-      {\n-\tType* arg_type = Type::make_array_type(type, NULL);\n-\tSlice_construction_expression* sce =\n-\t  Expression::make_slice_composite_literal(arg_type, this->exprs_,\n-\t\t\t\t\t\t   loc);\n-\tsce->set_storage_does_not_escape();\n-\tcall = Runtime::make_call(Runtime::CONCATSTRINGS, loc, 2, buf,\n-\t\t\t\t  sce);\n-      }\n-      break;\n-    }\n-\n+  go_assert(this->exprs_->size() > 1);\n+  Expression* len =\n+    Expression::make_integer_ul(this->exprs_->size(), NULL, loc);\n+  Array_type* array_type = Type::make_array_type(type, len);\n+  array_type->set_is_array_incomparable();\n+  Expression* array =\n+    Expression::make_array_composite_literal(array_type, this->exprs_,\n+                                             loc);\n+  Temporary_statement* ts =\n+    Statement::make_temporary(array_type, array, loc);\n+  inserter->insert(ts);\n+  Expression* ref = Expression::make_temporary_reference(ts, loc);\n+  ref = Expression::make_unary(OPERATOR_AND, ref, loc);\n+\tExpression* call =\n+    Runtime::make_call(Runtime::CONCATSTRINGS, loc, 3, buf,\n+                       ref, len->copy());\n   return Expression::make_cast(type, call, loc);\n }\n "}, {"sha": "c81ab79cc0f8a35601900bd6dcaf8315c22a7bc0", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4349775a30600906f5811ba7c743a5c22bdb3d7d/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4349775a30600906f5811ba7c743a5c22bdb3d7d/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=4349775a30600906f5811ba7c743a5c22bdb3d7d", "patch": "@@ -36,16 +36,8 @@ DEF_GO_RUNTIME(DECODERUNE, \"runtime.decoderune\", P2(STRING, INT),\n \t       R2(RUNE, INT))\n \n // Concatenate strings.\n-DEF_GO_RUNTIME(CONCATSTRINGS, \"runtime.concatstrings\", P2(POINTER, SLICE),\n-\t       R1(STRING))\n-DEF_GO_RUNTIME(CONCATSTRING2, \"runtime.concatstring2\",\n-\t       P2(POINTER, ARRAY2STRING), R1(STRING))\n-DEF_GO_RUNTIME(CONCATSTRING3, \"runtime.concatstring3\",\n-\t       P2(POINTER, ARRAY3STRING), R1(STRING))\n-DEF_GO_RUNTIME(CONCATSTRING4, \"runtime.concatstring4\",\n-\t       P2(POINTER, ARRAY4STRING), R1(STRING))\n-DEF_GO_RUNTIME(CONCATSTRING5, \"runtime.concatstring5\",\n-\t       P2(POINTER, ARRAY5STRING), R1(STRING))\n+DEF_GO_RUNTIME(CONCATSTRINGS, \"runtime.concatstrings\",\n+               P3(POINTER, POINTER, INT), R1(STRING))\n \n // Compare two strings for equality.\n DEF_GO_RUNTIME(EQSTRING, \"runtime.eqstring\", P2(STRING, STRING), R1(BOOL))"}, {"sha": "9bcfc9961c824129dd1d148887f8ac0649c08bfc", "filename": "libgo/go/runtime/string.go", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4349775a30600906f5811ba7c743a5c22bdb3d7d/libgo%2Fgo%2Fruntime%2Fstring.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4349775a30600906f5811ba7c743a5c22bdb3d7d/libgo%2Fgo%2Fruntime%2Fstring.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstring.go?ref=4349775a30600906f5811ba7c743a5c22bdb3d7d", "patch": "@@ -13,10 +13,6 @@ import (\n // themselves, so that the compiler will export them.\n //\n //go:linkname concatstrings runtime.concatstrings\n-//go:linkname concatstring2 runtime.concatstring2\n-//go:linkname concatstring3 runtime.concatstring3\n-//go:linkname concatstring4 runtime.concatstring4\n-//go:linkname concatstring5 runtime.concatstring5\n //go:linkname slicebytetostring runtime.slicebytetostring\n //go:linkname slicebytetostringtmp runtime.slicebytetostringtmp\n //go:linkname stringtoslicebyte runtime.stringtoslicebyte\n@@ -38,7 +34,9 @@ type tmpBuf [tmpStringBufSize]byte\n // If buf != nil, the compiler has determined that the result does not\n // escape the calling function, so the string data can be stored in buf\n // if small enough.\n-func concatstrings(buf *tmpBuf, a []string) string {\n+func concatstrings(buf *tmpBuf, p *string, n int) string {\n+\tvar a []string\n+\t*(*slice)(unsafe.Pointer(&a)) = slice{unsafe.Pointer(p), n, n}\n \t// idx := 0\n \tl := 0\n \tcount := 0\n@@ -73,22 +71,6 @@ func concatstrings(buf *tmpBuf, a []string) string {\n \treturn s\n }\n \n-func concatstring2(buf *tmpBuf, a [2]string) string {\n-\treturn concatstrings(buf, a[:])\n-}\n-\n-func concatstring3(buf *tmpBuf, a [3]string) string {\n-\treturn concatstrings(buf, a[:])\n-}\n-\n-func concatstring4(buf *tmpBuf, a [4]string) string {\n-\treturn concatstrings(buf, a[:])\n-}\n-\n-func concatstring5(buf *tmpBuf, a [5]string) string {\n-\treturn concatstrings(buf, a[:])\n-}\n-\n // Buf is a fixed-size buffer for the result,\n // it is not nil if the result does not escape.\n func slicebytetostring(buf *tmpBuf, b []byte) (str string) {"}]}