{"sha": "7c672dfc01a1838168baf1a63d2ca0e303eb421c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M2NzJkZmMwMWExODM4MTY4YmFmMWE2M2QyY2EwZTMwM2ViNDIxYw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-10-17T22:01:19Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-10-17T22:01:19Z"}, "message": "revert: c-typeck.c (default_function_array_conversion): Always create &a[0] for array types.\n\n2004-10-17  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        Revert:\n        2004-10-17  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * c-typeck.c (default_function_array_conversion): Always create\n        &a[0] for array types.\n        (build_unary_op): Do not fold &a[x] into a + x.\n\nFrom-SVN: r89183", "tree": {"sha": "5a372b260eab2bfd26de9d6e6aafa95c6719584e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a372b260eab2bfd26de9d6e6aafa95c6719584e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c672dfc01a1838168baf1a63d2ca0e303eb421c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c672dfc01a1838168baf1a63d2ca0e303eb421c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c672dfc01a1838168baf1a63d2ca0e303eb421c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c672dfc01a1838168baf1a63d2ca0e303eb421c/comments", "author": null, "committer": null, "parents": [{"sha": "ac8245fadcd28769e9bc2b7153da1512a37035a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8245fadcd28769e9bc2b7153da1512a37035a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8245fadcd28769e9bc2b7153da1512a37035a4"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "f2d34c62edd035a3551d244cbe2b00e51c7673da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c672dfc01a1838168baf1a63d2ca0e303eb421c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c672dfc01a1838168baf1a63d2ca0e303eb421c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c672dfc01a1838168baf1a63d2ca0e303eb421c", "patch": "@@ -1,3 +1,12 @@\n+2004-10-17  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tRevert:\n+\t2004-10-17  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+        * c-typeck.c (default_function_array_conversion): Always create\n+        &a[0] for array types.\n+        (build_unary_op): Do not fold &a[x] into a + x.\n+\n 2004-10-17  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/17925"}, {"sha": "9e4f0fb1501261328a318d858854a419ab69fe91", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c672dfc01a1838168baf1a63d2ca0e303eb421c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c672dfc01a1838168baf1a63d2ca0e303eb421c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=7c672dfc01a1838168baf1a63d2ca0e303eb421c", "patch": "@@ -1263,9 +1263,21 @@ default_function_array_conversion (tree exp)\n \n       ptrtype = build_pointer_type (restype);\n \n+      if (TREE_CODE (exp) == VAR_DECL)\n+\t{\n+\t  /* We are making an ADDR_EXPR of ptrtype.  This is a valid\n+\t     ADDR_EXPR because it's the best way of representing what\n+\t     happens in C when we take the address of an array and place\n+\t     it in a pointer to the element type.  */\n+\t  adr = build1 (ADDR_EXPR, ptrtype, exp);\n+\t  if (!c_mark_addressable (exp))\n+\t    return error_mark_node;\n+\t  TREE_SIDE_EFFECTS (adr) = 0;   /* Default would be, same as EXP.  */\n+\t  return adr;\n+\t}\n       /* This way is better for a COMPONENT_REF since it can\n \t simplify the offset for a component.  */\n-      adr = build_unary_op (ADDR_EXPR, build_array_ref (exp, integer_zero_node), 1);\n+      adr = build_unary_op (ADDR_EXPR, exp, 1);\n       return convert (ptrtype, adr);\n     }\n   return exp;\n@@ -2619,12 +2631,13 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \t  return TREE_OPERAND (arg, 0);\n \t}\n \n-      /* For &x[y], just return &x[y] */\n+      /* For &x[y], return x+y */\n       if (TREE_CODE (arg) == ARRAY_REF)\n \t{\n \t  if (!c_mark_addressable (TREE_OPERAND (arg, 0)))\n \t    return error_mark_node;\n-          return build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (arg)), arg);\n+\t  return build_binary_op (PLUS_EXPR, TREE_OPERAND (arg, 0),\n+\t\t\t\t  TREE_OPERAND (arg, 1), 1);\n \t}\n \n       /* Anything not already handled and not a true memory reference"}]}