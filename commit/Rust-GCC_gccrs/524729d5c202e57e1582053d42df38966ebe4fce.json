{"sha": "524729d5c202e57e1582053d42df38966ebe4fce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI0NzI5ZDVjMjAyZTU3ZTE1ODIwNTNkNDJkZjM4OTY2ZWJlNGZjZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-01-04T00:16:51Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-01-04T00:16:51Z"}, "message": "Initial revision\n\nFrom-SVN: r157", "tree": {"sha": "a1bdbbd9d257215882f4aead2906ad7ed670c66b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1bdbbd9d257215882f4aead2906ad7ed670c66b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/524729d5c202e57e1582053d42df38966ebe4fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524729d5c202e57e1582053d42df38966ebe4fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/524729d5c202e57e1582053d42df38966ebe4fce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524729d5c202e57e1582053d42df38966ebe4fce/comments", "author": null, "committer": null, "parents": [{"sha": "bbc83bc2cb0bcf15c047decf22b190247eb724bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc83bc2cb0bcf15c047decf22b190247eb724bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbc83bc2cb0bcf15c047decf22b190247eb724bc"}], "stats": {"total": 1031, "additions": 1031, "deletions": 0}, "files": [{"sha": "b8cb80631dd90d8fb53885aeb980e472031c11b0", "filename": "gcc/config/spur/spur.h", "status": "added", "additions": 1031, "deletions": 0, "changes": 1031, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/524729d5c202e57e1582053d42df38966ebe4fce/gcc%2Fconfig%2Fspur%2Fspur.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/524729d5c202e57e1582053d42df38966ebe4fce/gcc%2Fconfig%2Fspur%2Fspur.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspur%2Fspur.h?ref=524729d5c202e57e1582053d42df38966ebe4fce", "patch": "@@ -0,0 +1,1031 @@\n+/* Definitions of target machine for GNU compiler, for SPUR chip.\n+   Copyright (C) 1988 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+/* Note that some other tm.h files include this one and then override\n+   many of the definitions that relate to assembler syntax.  */\n+\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n+\n+#define CPP_PREDEFINES \"-Dspur\"\n+\n+/* Link with libg.a when debugging, for dbx's sake.  */\n+\n+#define LIB_SPEC \"%{g:-lg} %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p} \"\n+\n+/* Print subsidiary information on the compiler version in use.  */\n+#define TARGET_VERSION fprintf (stderr, \" (spur)\");\n+\n+/* Run-time compilation parameters selecting different hardware subsets.\n+\n+   On the SPUR, we don't yet need any.  */\n+\n+extern int target_flags;\n+\n+/* Nonzero if we should generate code to use the fpu.  */\n+#define TARGET_FPU (target_flags & 1)\n+\n+/* Nonzero if we should expand constant shifts into series of shift\n+   instructions.  */\n+#define TARGET_EXPAND_SHIFTS (target_flags & 2)\n+\n+/* Nonzero if we should generate long jumps for compares. */\n+#define TARGET_LONG_JUMPS (target_flags & 4)\n+\n+/* Macro to define tables used to set the flags.\n+   This is a list in braces of pairs in braces,\n+   each pair being { \"NAME\", VALUE }\n+   where VALUE is the bits to set or minus the bits to clear.\n+   An empty string NAME is used to identify the default VALUE.  */\n+\n+#define TARGET_SWITCHES  \\\n+  { {\"fpu\", 1},\t\t\t\\\n+    {\"soft-float\", -1},\t\t\\\n+    {\"expand-shifts\", 2},       \\\n+    {\"lib-shifts\", -2},\t\t\\\n+    {\"long-jumps\", 4},\t\t\\\n+    {\"short-jumps\", -4},\t\\\n+    { \"\", TARGET_DEFAULT}}\n+\n+#define TARGET_DEFAULT 0\n+\f\n+/* target machine storage layout */\n+\n+/* Define this if most significant bit is lowest numbered\n+   in instructions that operate on numbered bit-fields.\n+   This is a moot question on the SPUR due to the lack of bit-field insns.  */\n+#define BITS_BIG_ENDIAN 0\n+\n+/* Define this if most significant byte of a word is the lowest numbered.  */\n+/* That is not true on SPUR.  */\n+#define BYTES_BIG_ENDIAN 0\n+\n+/* Define this if most significant word of a multiword number is the lowest\n+   numbered.  */\n+/* For SPUR we can decide arbitrarily\n+   since there are no machine instructions for them.  */\n+#define WORDS_BIG_ENDIAN 0\n+\n+/* number of bits in an addressible storage unit */\n+#define BITS_PER_UNIT 8\n+\n+/* Width in bits of a \"word\", which is the contents of a machine register.\n+   Note that this is not necessarily the width of data type `int';\n+   if using 16-bit ints on a 68000, this would still be 32.\n+   But on a machine with 16-bit registers, this would be 16.  */\n+#define BITS_PER_WORD 32\n+\n+/* Width of a word, in units (bytes).  */\n+#define UNITS_PER_WORD 4\n+\n+/* Width in bits of a pointer.\n+   See also the macro `Pmode' defined below.  */\n+#define POINTER_SIZE 32\n+\n+/* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n+#define PARM_BOUNDARY 64\n+\n+/* Boundary (in *bits*) on which stack pointer should be aligned.  */\n+#define STACK_BOUNDARY 64\n+\n+/* Allocation boundary (in *bits*) for the code of a function.  */\n+#define FUNCTION_BOUNDARY 32\n+\n+/* Alignment of field after `int : 0' in a structure.  */\n+#define EMPTY_FIELD_BOUNDARY 32\n+\n+/* Every structure's size must be a multiple of this.  */\n+#define STRUCTURE_SIZE_BOUNDARY 32\n+\n+/* No data type wants to be aligned rounder than this.  */\n+#define BIGGEST_ALIGNMENT 64\n+\n+/* Define this if move instructions will actually fail to work\n+   when given unaligned data.  */\n+#define STRICT_ALIGNMENT\n+\f\n+/* Standard register usage.  */\n+\n+/* Number of actual hardware registers.\n+   The hardware registers are assigned numbers for the compiler\n+   from 0 to just below FIRST_PSEUDO_REGISTER.\n+   All registers that the compiler knows about must be given numbers,\n+   even those that are not normally considered general registers.\n+\n+   SPUR has 32 fullword registers and 15 floating point registers.  */\n+\n+#define FIRST_PSEUDO_REGISTER 47\n+\n+/* 1 for registers that have pervasive standard uses\n+   and are not available for the register allocator.\n+   On SPUR, this includes all the global registers\n+   and the callee return address register.  */\n+#define FIXED_REGISTERS  \\\n+ {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n+  1, 0, 0, 0, 0, 0,\t\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\t\\\n+  1, 0, 0, 0, 0, 0,\t\t\\\n+  1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n+\n+/* 1 for registers not available across function calls.\n+   These must include the FIXED_REGISTERS and also any\n+   registers that can be used without being saved.\n+   The latter must include the registers where values are returned\n+   and the register where structure-value addresses are passed.\n+   Aside from that, you can include as many other registers as you like.  */\n+#define CALL_USED_REGISTERS  \\\n+ {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n+  1, 0, 0, 0, 0, 0,\t\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1,\t\t\\\n+  1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}\n+\n+/* Return number of consecutive hard regs needed starting at reg REGNO\n+   to hold something of mode MODE.\n+   This is ordinarily the length in words of a value of mode MODE\n+   but can be less for certain modes in special long registers.\n+\n+   On SPUR, ordinary registers hold 32 bits worth;\n+   a single floating point register is always enough for\n+   anything that can be stored in them at all.  */\n+#define HARD_REGNO_NREGS(REGNO, MODE)   \\\n+  ((REGNO) >= 32 ? GET_MODE_NUNITS ((MODE))\t\\\n+   : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n+\n+/* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n+   On SPUR, the cpu registers can hold any mode but the float registers\n+   can hold only floating point.  And they can't hold anything if use\n+   of hardware floating point is disabled.  */\n+#define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n+  (((REGNO) < 32\t\t\t\t\t\t\t\\\n+    && (REGNO) + ((GET_MODE_UNIT_SIZE ((MODE)) + 3) / 4) <= 32)\t\t\\\n+   || (TARGET_FPU && ((MODE) == SFmode || (MODE) == DFmode\t\t\\\n+\t\t      || (MODE) == SCmode || (MODE) == DCmode)))\n+\n+/* Value is 1 if it is a good idea to tie two pseudo registers\n+   when one has mode MODE1 and one has mode MODE2.\n+   If HARD_REGNO_MODE_OK could produce different values for MODE1 and MODE2,\n+   for any hard reg, then this must be 0 for correct output.  */\n+#define MODES_TIEABLE_P(MODE1, MODE2) \\\n+  (((MODE1) == SFmode || (MODE1) == DFmode\t\t\\\n+    || (MODE1) == SCmode || (MODE1) == DCmode)\t\t\\\n+   == ((MODE2) == SFmode || (MODE2) == DFmode\t\t\\\n+       || (MODE2) == SCmode || (MODE2) == DCmode))\n+\n+/* Specify the registers used for certain standard purposes.\n+   The values of these macros are register numbers.  */\n+\n+/* SPUR pc isn't overloaded on a register that the compiler knows about.  */\n+/* #define PC_REGNUM  */\n+\n+/* Register to use for pushing function arguments.  */\n+#define STACK_POINTER_REGNUM 4\n+\n+/* Base register for access to local variables of the function.  */\n+#define FRAME_POINTER_REGNUM 25\n+\n+/* Value should be nonzero if functions must have frame pointers.\n+   Zero means the frame pointer need not be set up (and parms\n+   may be accessed via the stack pointer) in functions that seem suitable.\n+   This is computed in `reload', in reload1.c.  */\n+#define FRAME_POINTER_REQUIRED 1\n+\n+/* Base register for access to arguments of the function.  */\n+#define ARG_POINTER_REGNUM 25\n+\n+/* Register in which static-chain is passed to a function.  */\n+/* ??? */\n+#define STATIC_CHAIN_REGNUM 8\n+\n+/* Register in which address to store a structure value\n+   is passed to a function.  */\n+#define STRUCT_VALUE_REGNUM 27\n+#define STRUCT_VALUE_INCOMING_REGNUM 11\n+\f\n+/* Define the classes of registers for register constraints in the\n+   machine description.  Also define ranges of constants.\n+\n+   One of the classes must always be named ALL_REGS and include all hard regs.\n+   If there is more than one class, another class must be named NO_REGS\n+   and contain no registers.\n+\n+   The name GENERAL_REGS must be the name of a class (or an alias for\n+   another name such as ALL_REGS).  This is the class of registers\n+   that is allowed by \"g\" or \"r\" in a register constraint.\n+   Also, registers outside this class are allocated only when\n+   instructions express preferences for them.\n+\n+   The classes must be numbered in nondecreasing order; that is,\n+   a larger-numbered class must never be contained completely\n+   in a smaller-numbered class.\n+\n+   For any two classes, it is very desirable that there be another\n+   class that represents their union.  */\n+   \n+/* The 68000 has two kinds of registers, hence four classes.  */\n+\n+enum reg_class { NO_REGS, GENERAL_REGS, FP_REGS, ALL_REGS, LIM_REG_CLASSES };\n+\n+#define N_REG_CLASSES (int) LIM_REG_CLASSES\n+\n+/* Give names of register classes as strings for dump file.   */\n+\n+#define REG_CLASS_NAMES \\\n+ {\"NO_REGS\", \"GENERAL_REGS\", \"FP_REGS\", \"ALL_REGS\" }\n+\n+/* Define which registers fit in which classes.\n+   This is an initializer for a vector of HARD_REG_SET\n+   of length N_REG_CLASSES.  */\n+\n+#define REG_CLASS_CONTENTS {{0, 0}, {-1, 0}, {0, 0x7fff}, {-1, 0x7fff}}\n+\n+/* The same information, inverted:\n+   Return the class number of the smallest class containing\n+   reg number REGNO.  This could be a conditional expression\n+   or could index an array.  */\n+\n+#define REGNO_REG_CLASS(REGNO) \\\n+ ((REGNO) >= 32 ? FP_REGS : GENERAL_REGS)\n+\n+/* The class value for index registers, and the one for base regs.  */\n+#define INDEX_REG_CLASS GENERAL_REGS\n+#define BASE_REG_CLASS GENERAL_REGS\n+\n+/* Get reg_class from a letter such as appears in the machine description.  */\n+\n+#define REG_CLASS_FROM_LETTER(C) \\\n+  ((C) == 'f' ? FP_REGS : NO_REGS)\n+\n+/* The letters I, J, K, L and M in a register constraint string\n+   can be used to stand for particular ranges of immediate operands.\n+   This macro defines what the ranges are.\n+   C is the letter, and VALUE is a constant value.\n+   Return 1 if VALUE is in the range specified by C.\n+\n+   For SPUR, `I' is used for the range of constants an insn\n+   can actually contain.\n+   `J' is used for the range which is just zero (since that is R0).\n+   `K' is used for the 5-bit operand of a compare insns.  */\n+\n+#define CONST_OK_FOR_LETTER_P(VALUE, C)  \\\n+  ((C) == 'I' ? (unsigned) ((VALUE) + 0x2000) < 0x4000\t\\\n+   : (C) == 'J' ? (VALUE) == 0\t\t\t\t\\\n+   : (C) == 'K' ? (unsigned) (VALUE) < 0x20\t\t\\\n+   : 0)\n+\n+/* Similar, but for floating constants, and defining letters G and H.\n+   Here VALUE is the CONST_DOUBLE rtx itself.  */\n+\n+#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  \t\\\n+  ((C) == 'G' && CONST_DOUBLE_HIGH (VALUE) == 0\t\t\\\n+   && CONST_DOUBLE_LOW (VALUE) == 0)\n+\n+/* Given an rtx X being reloaded into a reg required to be\n+   in class CLASS, return the class of reg to actually use.\n+   In general this is just CLASS; but on some machines\n+   in some cases it is preferable to use a more restrictive class.  */\n+#define PREFERRED_RELOAD_CLASS(X,CLASS) (CLASS)\n+\n+/* Return the maximum number of consecutive registers\n+   needed to represent mode MODE in a register of class CLASS.  */\n+/* On SPUR, this is the size of MODE in words,\n+   except in the FP regs, where a single reg is always enough.  */\n+#define CLASS_MAX_NREGS(CLASS, MODE)\t\\\n+ ((CLASS) == FP_REGS ? 1\t\t\t\\\n+  : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n+\f\n+/* Stack layout; function entry, exit and calling.  */\n+\n+/* Define this if pushing a word on the stack\n+   makes the stack pointer a smaller address.  */\n+#define STACK_GROWS_DOWNWARD\n+\n+/* Define this if the nominal address of the stack frame\n+   is at the high-address end of the local variables;\n+   that is, each additional local variable allocated\n+   goes at a more negative offset in the frame.  */\n+#define FRAME_GROWS_DOWNWARD\n+\n+/* Offset within stack frame to start allocating local variables at.\n+   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n+   first local allocated.  Otherwise, it is the offset to the BEGINNING\n+   of the first local allocated.  */\n+#define STARTING_FRAME_OFFSET 0\n+\n+/* If we generate an insn to push BYTES bytes,\n+   this says how many the stack pointer really advances by.\n+   On SPUR, don't define this because there are no push insns.  */\n+/*  #define PUSH_ROUNDING(BYTES) */\n+\n+/* Offset of first parameter from the argument pointer register value.  */\n+#define FIRST_PARM_OFFSET(FNDECL) 0\n+\n+/* Value is the number of bytes of arguments automatically\n+   popped when returning from a subroutine call.\n+   FUNTYPE is the data type of the function (as a tree),\n+   or for a library call it is an identifier node for the subroutine name.\n+   SIZE is the number of bytes of arguments passed on the stack.  */\n+\n+#define RETURN_POPS_ARGS(FUNTYPE,SIZE) 0\n+\n+/* Define how to find the value returned by a function.\n+   VALTYPE is the data type of the value (as a tree).\n+   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n+   otherwise, FUNC is 0.  */\n+\n+/* On SPUR the value is found in the second \"output\" register.  */\n+\n+#define FUNCTION_VALUE(VALTYPE, FUNC)  \\\n+  gen_rtx (REG, TYPE_MODE (VALTYPE), 27)\n+\n+/* But the called function leaves it in the second \"input\" register.  */\n+\n+#define FUNCTION_OUTGOING_VALUE(VALTYPE, FUNC)  \\\n+  gen_rtx (REG, TYPE_MODE (VALTYPE), 11)\n+\n+/* Define how to find the value returned by a library function\n+   assuming the value has mode MODE.  */\n+\n+#define LIBCALL_VALUE(MODE)  gen_rtx (REG, MODE, 27)\n+\n+/* 1 if N is a possible register number for a function value\n+   as seen by the caller.\n+   On SPUR, the first \"output\" reg is the only register thus used.  */\n+\n+#define FUNCTION_VALUE_REGNO_P(N) ((N) == 27)\n+\n+/* 1 if N is a possible register number for function argument passing.\n+   On SPUR, these are the \"output\" registers.  */\n+\n+#define FUNCTION_ARG_REGNO_P(N) ((N) < 32 && (N) > 26)\n+\f\n+/* Define a data type for recording info about an argument list\n+   during the scan of that argument list.  This data type should\n+   hold all necessary information about the function itself\n+   and about the args processed so far, enough to enable macros\n+   such as FUNCTION_ARG to determine where the next arg should go.\n+\n+   On SPUR, this is a single integer, which is a number of words\n+   of arguments scanned so far (including the invisible argument,\n+   if any, which holds the structure-value-address).\n+   Thus 5 or more means all following args should go on the stack.  */\n+\n+#define CUMULATIVE_ARGS int\n+\n+/* Initialize a variable CUM of type CUMULATIVE_ARGS\n+   for a call to a function whose data type is FNTYPE.\n+   For a library call, FNTYPE is 0.\n+\n+   On SPUR, the offset normally starts at 0, but starts at 4 bytes\n+   when the function gets a structure-value-address as an\n+   invisible first argument.  */\n+\n+#define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME)\t\\\n+ ((CUM) = ((FNTYPE) != 0 && aggregate_value_p ((FNTYPE))))\n+\n+/* Update the data in CUM to advance over an argument\n+   of mode MODE and data type TYPE.\n+   (TYPE is null for libcalls where that information may not be available.)  */\n+\n+#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n+ ((CUM) += ((MODE) != BLKmode\t\t\t\\\n+\t    ? (GET_MODE_SIZE (MODE) + 3) / 4\t\\\n+\t    : (int_size_in_bytes (TYPE) + 3) / 4))\n+\n+/* Determine where to put an argument to a function.\n+   Value is zero to push the argument on the stack,\n+   or a hard register in which to store the argument.\n+\n+   MODE is the argument's machine mode.\n+   TYPE is the data type of the argument (as a tree).\n+    This is null for libcalls where that information may\n+    not be available.\n+   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n+    the preceding args and about the function being called.\n+   NAMED is nonzero if this argument is a named parameter\n+    (otherwise it is an extra parameter matching an ellipsis).  */\n+\n+/* On SPUR the first five words of args are normally in registers\n+   and the rest are pushed.  But any arg that won't entirely fit in regs\n+   is pushed.  */\n+\n+#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED)\t\t\\\n+(5 >= ((CUM)\t\t\t\t\t\t\\\n+       + ((MODE) == BLKmode\t\t\t\t\\\n+\t  ? (int_size_in_bytes (TYPE) + 3) / 4\t\t\\\n+\t  : (GET_MODE_SIZE (MODE) + 3) / 4))\t\t\\\n+ ? gen_rtx (REG, (MODE), 27 + (CUM))\t\t\t\\\n+ : 0)\n+\n+/* Define where a function finds its arguments.\n+   This is different from FUNCTION_ARG because of register windows.  */\n+\n+#define FUNCTION_INCOMING_ARG(CUM, MODE, TYPE, NAMED)\t\\\n+(5 >= ((CUM)\t\t\t\t\t\t\\\n+       + ((MODE) == BLKmode\t\t\t\t\\\n+\t  ? (int_size_in_bytes (TYPE) + 3) / 4\t\t\\\n+\t  : (GET_MODE_SIZE (MODE) + 3) / 4))\t\t\\\n+ ? gen_rtx (REG, (MODE), 11 + (CUM))\t\t\t\\\n+ : 0)\n+\n+/* For an arg passed partly in registers and partly in memory,\n+   this is the number of registers used.\n+   For args passed entirely in registers or entirely in memory, zero.  */\n+\n+#define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED) 0\n+\n+/* This macro generates the assembly code for function entry.\n+   FILE is a stdio stream to output the code to.\n+   SIZE is an int: how many units of temporary storage to allocate.\n+   Refer to the array `regs_ever_live' to determine which registers\n+   to save; `regs_ever_live[I]' is nonzero if register number I\n+   is ever used in the function.  This macro is responsible for\n+   knowing which registers should not be saved even if used.  */\n+\n+/* On spur, move-double insns between fpu and cpu need an 8-byte block\n+   of memory.  If any fpu reg is used in the function, we allocate\n+   such a block here, at the bottom of the frame, just in case it's needed.  */\n+\n+#define FUNCTION_PROLOGUE(FILE, SIZE)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  extern char call_used_regs[];\t\t\t\t\t\\\n+  extern int current_function_pretend_args_size;\t\t\\\n+  int fsize = ((SIZE) + 7) & ~7;\t\t\t\t\\\n+  int nregs, i, fp_used = 0;\t\t\t\t\t\\\n+  for (i = 32, nregs = 0; i < FIRST_PSEUDO_REGISTER; i++)\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (regs_ever_live[i] && ! call_used_regs[i])\t\t\\\n+        nregs++;\t\t\t\t\t\t\\\n+      if (regs_ever_live[i]) fp_used = 1;\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  if (fp_used) fsize += 8;\t\t\t\t\t\\\n+  fprintf (FILE, \"0:\\trd_special r24,pc\\n\");\t\t\t\\\n+  fprintf (FILE, \"\\tand r24,r24,$~0x3\\n\");\t\t\t\\\n+  fprintf (FILE, \"\\tadd_nt r25,r4,$%d\\n\",\t\t\t\\\n+\t   - current_function_pretend_args_size);\t\t\\\n+  if (fsize + nregs != 0 || current_function_pretend_args_size > 0)\\\n+    {\t\t\t\t\t\t\t\t\\\n+      int n = - fsize - nregs * 16;\t\t\t\t\\\n+      if (n >= -8192)\t\t\t\t\t\t\\\n+        fprintf (FILE, \"\\tadd_nt r4,r25,$%d\\n\", n);\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\\\n+\t  fprintf (FILE, \"\\tadd_nt r4,r25,$-8192\\n\");\t\t\\\n+\t  n += 8192;\t\t\t\t\t\t\\\n+          while (n < -8192)\t\t\t\t\t\\\n+            fprintf (FILE, \"\\tadd_nt r4,r4,$-8192\\n\"), n += 8192; \\\n+\t  if (n != 0)\t\t\t\t\t\t\\\n+            fprintf (FILE, \"\\tadd_nt r4,r4,$%d\\n\", n);\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  for (i = 32, nregs = 0; i < FIRST_PSEUDO_REGISTER; i++)\t\\\n+    if (regs_ever_live[i] && ! call_used_regs[i])\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+        fprintf (FILE, \"\\tst_ext1 %s,r4,$%d\\n\",\t\t\t\\\n+\t         reg_names[i], 8 * nregs++);\t\t\t\\\n+        fprintf (FILE, \"\\tst_ext2 %s,r4,$%d\\n\",\t\t\t\\\n+\t         reg_names[i], 8 * nregs++);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* Output assembler code to FILE to increment profiler label # LABELNO\n+   for profiling a function entry.  */\n+\n+#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n+   abort ();\n+\n+/* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n+   the stack pointer does not matter.  The value is tested only in\n+   functions that have frame pointers.\n+   No definition is equivalent to always zero.  */\n+\n+extern int current_function_calls_alloca;\n+extern int current_function_pretend_args_size;\n+\n+#define EXIT_IGNORE_STACK\t\\\n+ (get_frame_size () != 0\t\\\n+  || current_function_calls_alloca || current_function_pretend_args_size)\n+\n+/* This macro generates the assembly code for function exit,\n+   on machines that need it.  If FUNCTION_EPILOGUE is not defined\n+   then individual return instructions are generated for each\n+   return statement.  Args are same as for FUNCTION_PROLOGUE.\n+\n+   The function epilogue should not depend on the current stack pointer!\n+   It should use the frame pointer only.  This is mandatory because\n+   of alloca; we also take advantage of it to omit stack adjustments\n+   before returning.  */\n+\n+#define FUNCTION_EPILOGUE(FILE, SIZE)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  extern char call_used_regs[];\t\t\t\t\t\\\n+  extern int current_function_calls_alloca;\t\t\t\\\n+  extern int current_function_pretend_args_size;\t\t\\\n+  int fsize = ((SIZE) + 7) & ~7;\t\t\t\t\\\n+  int nregs, i, fp_used = 0;\t\t\t\t\t\\\n+  for (i = 32, nregs = 0; i < FIRST_PSEUDO_REGISTER; i++)\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (regs_ever_live[i] && ! call_used_regs[i])\t\t\\\n+\tnregs++;\t\t\t\t\t\t\\\n+      if (regs_ever_live[i]) fp_used = 1;\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  if (fp_used) fsize += 8;\t\t\t\t\t\\\n+  if (nregs != 0)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tadd_nt r4,r25,$%d\\n\", - fsize - nregs * 16); \\\n+      for (i = 32, nregs = 0; i < FIRST_PSEUDO_REGISTER; i++)\t\\\n+        if (regs_ever_live[i] && ! call_used_regs[i])\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+            fprintf (FILE, \"\\tld_ext1 %s,r4,$%d\\n\\tnop\\n\",\t\\\n+\t\t     reg_names[i], 8 * nregs++);\t\t\\\n+            fprintf (FILE, \"\\tld_ext2 %s,r4,$%d\\n\\tnop\\n\",\t\\\n+\t\t     reg_names[i], 8 * nregs++);\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  if (fsize != 0 || nregs != 0 || current_function_calls_alloca\t\\\n+      || current_function_pretend_args_size > 0)\t\t\\\n+    fprintf (FILE, \"\\tadd_nt r4,r25,$%d\\n\",\t\t\t\\\n+\t     current_function_pretend_args_size);\t\t\\\n+  fprintf (FILE, \"\\treturn r10,$8\\n\\tnop\\n\");\t\t\t\\\n+}\n+\f\n+/* Addressing modes, and classification of registers for them.  */\n+\n+/* #define HAVE_POST_INCREMENT */\n+/* #define HAVE_POST_DECREMENT */\n+\n+/* #define HAVE_PRE_DECREMENT */\n+/* #define HAVE_PRE_INCREMENT */\n+\n+/* Macros to check register numbers against specific register classes.  */\n+\n+/* These assume that REGNO is a hard or pseudo reg number.\n+   They give nonzero only if REGNO is a hard reg of the suitable class\n+   or a pseudo reg currently allocated to a suitable hard reg.\n+   Since they use reg_renumber, they are safe only once reg_renumber\n+   has been allocated, which happens in local-alloc.c.  */\n+\n+#define REGNO_OK_FOR_INDEX_P(REGNO) \\\n+((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < 32)\n+#define REGNO_OK_FOR_BASE_P(REGNO) \\\n+((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < 32)\n+#define REGNO_OK_FOR_FP_P(REGNO) \\\n+(((REGNO) ^ 0x20) < 14 || (unsigned) (reg_renumber[REGNO] ^ 0x20) < 14)\n+\n+/* Now macros that check whether X is a register and also,\n+   strictly, whether it is in a specified class.\n+\n+   These macros are specific to the SPUR, and may be used only\n+   in code for printing assembler insns and in conditions for\n+   define_optimization.  */\n+\n+/* 1 if X is an fp register.  */\n+\n+#define FP_REG_P(X) (REG_P (X) && REGNO_OK_FOR_FP_P (REGNO (X)))\n+\f\n+/* Maximum number of registers that can appear in a valid memory address.  */\n+\n+#define MAX_REGS_PER_ADDRESS 2\n+\n+/* Recognize any constant value that is a valid address.  */\n+\n+#define CONSTANT_ADDRESS_P(X)  CONSTANT_P (X)\n+\n+/* Nonzero if the constant value X is a legitimate general operand.\n+   It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n+\n+#define LEGITIMATE_CONSTANT_P(X)\t\t\\\n+ ((GET_CODE (X) == CONST_INT\t\t\t\\\n+   && (unsigned) (INTVAL (X) + 0x2000) < 0x4000)\\\n+  || (GET_CODE (X) == SYMBOL_REF && (X)->unchanging))\n+\n+/* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n+   and check its validity for a certain class.\n+   We have two alternate definitions for each of them.\n+   The usual definition accepts all pseudo regs; the other rejects\n+   them unless they have been allocated suitable hard regs.\n+   The symbol REG_OK_STRICT causes the latter definition to be used.\n+\n+   Most source files want to accept pseudo regs in the hope that\n+   they will get allocated to the class that the insn wants them to be in.\n+   Source files for reload pass need to be strict.\n+   After reload, it makes no difference, since pseudo regs have\n+   been eliminated by then.  */\n+\n+#ifndef REG_OK_STRICT\n+\n+/* Nonzero if X is a hard reg that can be used as an index\n+   or if it is a pseudo reg.  */\n+#define REG_OK_FOR_INDEX_P(X) (((unsigned) REGNO (X)) - 32 >= 14)\n+/* Nonzero if X is a hard reg that can be used as a base reg\n+   or if it is a pseudo reg.  */\n+#define REG_OK_FOR_BASE_P(X) (((unsigned) REGNO (X)) - 32 >= 14)\n+\n+#else\n+\n+/* Nonzero if X is a hard reg that can be used as an index.  */\n+#define REG_OK_FOR_INDEX_P(X) REGNO_OK_FOR_INDEX_P (REGNO (X))\n+/* Nonzero if X is a hard reg that can be used as a base reg.  */\n+#define REG_OK_FOR_BASE_P(X) REGNO_OK_FOR_BASE_P (REGNO (X))\n+\n+#endif\n+\f\n+/* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression\n+   that is a valid memory address for an instruction.\n+   The MODE argument is the machine mode for the MEM expression\n+   that wants to use this address.\n+\n+   On SPUR, the actual legitimate addresses must be REG+SMALLINT or REG+REG.\n+   Actually, REG+REG is not legitimate for stores, so \n+   it is obtained only by combination on loads.\n+   We can treat a SYMBOL_REF as legitimate if it is part of this\n+   function's constant-pool, because such addresses can actually\n+   be output as REG+SMALLINT.  */\n+\n+#define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)  \\\n+{ if (GET_CODE (X) == REG\t\t\t\\\n+      && REG_OK_FOR_BASE_P (X))\t\t\t\\\n+    goto ADDR;\t\t\t\t\t\\\n+  if (GET_CODE (X) == SYMBOL_REF && (X)->unchanging)\t\\\n+    goto ADDR;\t\t\t\t\t\\\n+  if (GET_CODE (X) == PLUS\t\t\t\\\n+      && GET_CODE (XEXP (X, 0)) == REG\t\t\\\n+      && REG_OK_FOR_BASE_P (XEXP (X, 0)))\t\\\n+    {\t\t\t\t\t\t\\\n+      if (GET_CODE (XEXP (X, 1)) == CONST_INT\t\\\n+\t  && INTVAL (XEXP (X, 1)) >= -0x2000\t\\\n+\t  && INTVAL (XEXP (X, 1)) < 0x2000)\t\\\n+\tgoto ADDR;\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+}\n+\f\n+/* Try machine-dependent ways of modifying an illegitimate address\n+   to be legitimate.  If we find one, return the new, valid address.\n+   This macro is used in only one place: `memory_address' in explow.c.\n+\n+   OLDX is the address as it was before break_out_memory_refs was called.\n+   In some cases it is useful to look at this to decide what needs to be done.\n+\n+   MODE and WIN are passed so that this macro can use\n+   GO_IF_LEGITIMATE_ADDRESS.\n+\n+   It is always safe for this macro to do nothing.  It exists to recognize\n+   opportunities to optimize the output.  */\n+\n+/* On SPUR, change REG+N into REG+REG, and REG+(X*Y) into REG+REG.  */\n+\n+#define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)\t\\\n+{ if (GET_CODE (X) == PLUS && CONSTANT_ADDRESS_P (XEXP (X, 1)))\t\\\n+    (X) = gen_rtx (PLUS, SImode, XEXP (X, 0),\t\t\t\\\n+\t\t   copy_to_mode_reg (SImode, XEXP (X, 1)));\t\\\n+  if (GET_CODE (X) == PLUS && CONSTANT_ADDRESS_P (XEXP (X, 0)))\t\\\n+    (X) = gen_rtx (PLUS, SImode, XEXP (X, 1),\t\t\t\\\n+\t\t   copy_to_mode_reg (SImode, XEXP (X, 0)));\t\\\n+  if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 0)) == MULT)\t\\\n+    (X) = gen_rtx (PLUS, SImode, XEXP (X, 1),\t\t\t\\\n+\t\t   force_operand (XEXP (X, 0), 0));\t\t\\\n+  if (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 1)) == MULT)\t\\\n+    (X) = gen_rtx (PLUS, SImode, XEXP (X, 0),\t\t\t\\\n+\t\t   force_operand (XEXP (X, 1), 0));\t\t\\\n+  if (memory_address_p (MODE, X))\t\t\t\t\\\n+    goto WIN; }\n+\n+/* Go to LABEL if ADDR (a legitimate address expression)\n+   has an effect that depends on the machine mode it is used for.\n+   On the SPUR this is never true.  */\n+\n+#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n+\f\n+/* Specify the machine mode that this machine uses\n+   for the index in the tablejump instruction.  */\n+#define CASE_VECTOR_MODE SImode\n+\n+/* Define this if the tablejump instruction expects the table\n+   to contain offsets from the address of the table.\n+   Do not define this if the table should contain absolute addresses.  */\n+/* #define CASE_VECTOR_PC_RELATIVE */\n+\n+/* Specify the tree operation to be used to convert reals to integers.  */\n+#define IMPLICIT_FIX_EXPR FIX_ROUND_EXPR\n+\n+/* This is the kind of divide that is easiest to do in the general case.  */\n+#define EASY_DIV_EXPR TRUNC_DIV_EXPR\n+\n+/* Define this as 1 if `char' should by default be signed; else as 0.  */\n+#define DEFAULT_SIGNED_CHAR 0\n+\n+/* Max number of bytes we can move from memory to memory\n+   in one reasonably fast instruction.  */\n+#define MOVE_MAX 4\n+\n+/* Nonzero if access to memory by bytes is slow and undesirable.  */\n+#define SLOW_BYTE_ACCESS 1\n+\n+/* This is BSD, so it wants DBX format.  */\n+#define DBX_DEBUGGING_INFO\n+\n+/* Do not break .stabs pseudos into continuations.  */\n+#define DBX_CONTIN_LENGTH 0\n+\n+/* Don't try to use the `x' type-cross-reference character in DBX data.\n+   Also has the consequence of putting each struct, union or enum\n+   into a separate .stabs, containing only cross-refs to the others.  */\n+#define DBX_NO_XREFS\n+\n+/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n+   is done just by pretending it is already truncated.  */\n+#define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n+\n+/* Specify the machine mode that pointers have.\n+   After generation of rtl, the compiler makes no further distinction\n+   between pointers and any other objects of this machine mode.  */\n+#define Pmode SImode\n+\n+/* A function address in a call instruction\n+   is a byte address (for indexing purposes)\n+   so give the MEM rtx a byte's mode.  */\n+#define FUNCTION_MODE SImode\n+\n+/* Define this if addresses of constant functions\n+   shouldn't be put through pseudo regs where they can be cse'd.\n+   Desirable on machines where ordinary constants are expensive\n+   but a CALL with constant address is cheap.  */\n+#define NO_FUNCTION_CSE\n+\n+/* Compute the cost of computing a constant rtl expression RTX\n+   whose rtx-code is CODE.  The body of this macro is a portion\n+   of a switch statement.  If the code is computed here,\n+   return it with a return statement.  Otherwise, break from the switch.  */\n+\n+#define CONST_COSTS(RTX,CODE) \\\n+  case CONST_INT:\t\t\t\t\t\t\\\n+    if (INTVAL (RTX) < 0x2000 && INTVAL (RTX) >= -0x2000) return 1; \\\n+  case CONST:\t\t\t\t\t\t\t\\\n+  case LABEL_REF:\t\t\t\t\t\t\\\n+  case SYMBOL_REF:\t\t\t\t\t\t\\\n+    return 2;\t\t\t\t\t\t\t\\\n+  case CONST_DOUBLE:\t\t\t\t\t\t\\\n+    return 4;\n+\f\n+/* Tell final.c how to eliminate redundant test instructions.  */\n+\n+/* Here we define machine-dependent flags and fields in cc_status\n+   (see `conditions.h').  */\n+\n+/* (None are needed on SPUR.)  */\n+\n+/* Store in cc_status the expressions\n+   that the condition codes will describe\n+   after execution of an instruction whose pattern is EXP.\n+   Do not alter them if the instruction would not alter the cc's.  */\n+\n+/* The SPUR does not really have a condition code.  */\n+\n+#define NOTICE_UPDATE_CC(EXP, INSN) \\\n+{ CC_STATUS_INIT; }\n+\f\n+/* Control the assembler format that we output.  */\n+\n+/* Output at beginning of assembler file.  */\n+\n+#define ASM_FILE_START(FILE)\n+\n+/* Output to assembler file text saying following lines\n+   may contain character constants, extra white space, comments, etc.  */\n+\n+#define ASM_APP_ON \"\"\n+\n+/* Output to assembler file text saying following lines\n+   no longer contain unusual constructs.  */\n+\n+#define ASM_APP_OFF \"\"\n+\n+/* Output before read-only data.  */\n+\n+#define TEXT_SECTION_ASM_OP \".text\"\n+\n+/* Output before writable data.  */\n+\n+#define DATA_SECTION_ASM_OP \".data\"\n+\n+/* How to refer to registers in assembler output.\n+   This sequence is indexed by compiler's hard-register-number (see above).  */\n+\n+#define REGISTER_NAMES \\\n+{\"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \"r9\",\t\t\\\n+ \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\", \"r16\", \"r17\", \"r18\", \"r19\",\t\\\n+ \"r20\", \"r21\", \"r22\", \"r23\", \"r24\", \"r25\", \"r26\", \"r27\", \"r28\", \"r29\",\t\\\n+ \"r30\", \"r31\",\t\t\t\t\t\t\t\t\\\n+ \"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\", \"f8\", \"f9\",\t\\\n+ \"f10\", \"f11\", \"f12\", \"f13\", \"f14\" }\n+\n+/* How to renumber registers for dbx and gdb.  */\n+\n+#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+\n+/* This is how to output the definition of a user-level label named NAME,\n+   such as the label on a static function or variable NAME.  */\n+\n+#define ASM_OUTPUT_LABEL(FILE,NAME)\t\\\n+  do { assemble_name (FILE, NAME); fputs (\":\\n\", FILE); } while (0)\n+\n+/* This is how to output a command to make the user-level label named NAME\n+   defined for reference from other files.  */\n+\n+#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n+  do { fputs (\".globl \", FILE); assemble_name (FILE, NAME); fputs (\"\\n\", FILE);} while (0)\n+\n+/* This is how to output a reference to a user-level label named NAME.\n+   `assemble_name' uses this.  */\n+\n+#define ASM_OUTPUT_LABELREF(FILE,NAME)\t\\\n+  fprintf (FILE, \"_%s\", NAME)\n+\n+/* This is how to output an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \"%s%d:\\n\", PREFIX, NUM)\n+\n+/* This is how to store into the string LABEL\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n+  sprintf (LABEL, \"*%s%d\", PREFIX, NUM)\n+\n+/* This is how to output an assembler line defining a `double' constant.  */\n+\n+#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n+  fprintf (FILE, \"\\t.double %.20e\\n\", (VALUE))\n+\n+/* This is how to output an assembler line defining a `float' constant.  */\n+\n+#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n+  fprintf (FILE, \"\\t.single %.12e\\n\", (VALUE))\n+\n+/* This is how to output an assembler line defining an `int' constant.  */\n+\n+#define ASM_OUTPUT_INT(FILE,VALUE)  \\\n+( fprintf (FILE, \"\\t.long \"),\t\t\t\\\n+  output_addr_const (FILE, (VALUE)),\t\t\\\n+  fprintf (FILE, \"\\n\"))\n+\n+/* Likewise for `char' and `short' constants.  */\n+\n+#define ASM_OUTPUT_SHORT(FILE,VALUE)  \\\n+( fprintf (FILE, \"\\t.word \"),\t\t\t\\\n+  output_addr_const (FILE, (VALUE)),\t\t\\\n+  fprintf (FILE, \"\\n\"))\n+\n+#define ASM_OUTPUT_CHAR(FILE,VALUE)  \\\n+( fprintf (FILE, \"\\t.byte \"),\t\t\t\\\n+  output_addr_const (FILE, (VALUE)),\t\t\\\n+  fprintf (FILE, \"\\n\"))\n+\n+/* This is how to output an assembler line for a numeric constant byte.  */\n+\n+#define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n+  fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n+\n+/* This is how to output code to push a register on the stack.\n+   It need not be very fast code.  */\n+\n+#define ASM_OUTPUT_REG_PUSH(FILE,REGNO)  \\\n+  fprintf (FILE, \"\\tadd_nt r4,r4,$-4\\n\\tst_32 %s,r4,$0\\n\", reg_names[REGNO])\n+\n+/* This is how to output an insn to pop a register from the stack.\n+   It need not be very fast code.  */\n+\n+#define ASM_OUTPUT_REG_POP(FILE,REGNO)  \\\n+  fprintf (FILE, \"\\tld_32 %s,r4,$0\\n\\tadd_nt r4,r4,$4\\n\", reg_names[REGNO])\n+\n+/* This is how to output an element of a case-vector that is absolute.  */\n+\n+#define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n+  fprintf (FILE, \"\\t.long L%d\\n\", VALUE)\n+\n+/* This is how to output an element of a case-vector that is relative.\n+   (SPUR does not use such vectors,\n+   but we must define this macro anyway.)  */\n+\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL)  \\\n+  fprintf (FILE, \"\\t.word L%d-L%d\\n\", VALUE, REL)\n+\n+/* This is how to output an assembler line\n+   that says to advance the location counter\n+   to a multiple of 2**LOG bytes.  */\n+\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n+  if ((LOG) != 0)\t\t\t\\\n+    fprintf (FILE, \"\\t.align %d\\n\", (LOG))\n+\n+#define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n+  fprintf (FILE, \"\\t.space %u\\n\", (SIZE))\n+\n+/* This says how to output an assembler line\n+   to define a global common symbol.  */\n+\n+#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\".comm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+\n+/* This says how to output an assembler line\n+   to define a local common symbol.  */\n+\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\".lcomm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+\n+/* Store in OUTPUT a string (made with alloca) containing\n+   an assembler-name for a local static variable named NAME.\n+   LABELNO is an integer which is different for each call.  */\n+\n+#define ASM_FORMAT_PRIVATE_NAME(OUTPUT, NAME, LABELNO)\t\\\n+( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n+  sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n+\n+/* Define the parentheses used to group arithmetic operations\n+   in assembler code.  */\n+\n+#define ASM_OPEN_PAREN \"(\"\n+#define ASM_CLOSE_PAREN \")\"\n+\n+/* Define results of standard character escape sequences.  */\n+#define TARGET_BELL 007\n+#define TARGET_BS 010\n+#define TARGET_TAB 011\n+#define TARGET_NEWLINE 012\n+#define TARGET_VT 013\n+#define TARGET_FF 014\n+#define TARGET_CR 015\n+\n+/* Print operand X (an rtx) in assembler syntax to file FILE.\n+   CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n+   For `%' followed by punctuation, CODE is the punctuation and X is null.\n+\n+   On SPUR, the CODE can be `r', meaning this is a register-only operand\n+   and an immediate zero should be represented as `r0'.  */\n+\n+#define PRINT_OPERAND(FILE, X, CODE)  \\\n+{ if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n+    fprintf (FILE, \"%s\", reg_names[REGNO (X)]);\t\t\t\t\\\n+  else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n+    output_address (XEXP (X, 0));\t\t\t\t\t\\\n+  else if (GET_CODE (X) == CONST_DOUBLE)\t\t\t\t\\\n+    abort ();\t\t\t\t\t\t\t\t\\\n+  else if ((CODE) == 'r' && (X) == const0_rtx)\t\t\t\t\\\n+    fprintf (FILE, \"r0\");\t\t\t\t\t\t\\\n+  else { putc ('$', FILE); output_addr_const (FILE, X); }}\n+\f\n+/* Print a memory address as an operand to reference that memory location.  */\n+\n+#define PRINT_OPERAND_ADDRESS(FILE, ADDR)  \\\n+{ register rtx base, index = 0;\t\t\t\t\t\\\n+  int offset = 0;\t\t\t\t\t\t\\\n+  register rtx addr = ADDR;\t\t\t\t\t\\\n+  if (GET_CODE (addr) == REG)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"%s,$0\", reg_names[REGNO (addr)]);\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  else if (GET_CODE (addr) == PLUS)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (GET_CODE (XEXP (addr, 0)) == CONST_INT)\t\t\\\n+\toffset = INTVAL (XEXP (addr, 0)), base = XEXP (addr, 1);\\\n+      else if (GET_CODE (XEXP (addr, 1)) == CONST_INT)\t\t\\\n+\toffset = INTVAL (XEXP (addr, 1)), base = XEXP (addr, 0);\\\n+      else\t\t\t\t\t\t\t\\\n+\tbase = XEXP (addr, 0), index = XEXP (addr, 1);\t\t\\\n+      fprintf (FILE, \"%s,\", reg_names[REGNO (base)]);\t\t\\\n+      if (index == 0)\t\t\t\t\t\t\\\n+\tfprintf (FILE, \"$%d\", offset);\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tfprintf (FILE, \"%s,\", reg_names[REGNO (index)]);\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"r24,$(\");\t\t\t\t\t\\\n+      output_addr_const (FILE, addr);\t\t\t\t\\\n+      fprintf (FILE, \"-0b)\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}"}]}