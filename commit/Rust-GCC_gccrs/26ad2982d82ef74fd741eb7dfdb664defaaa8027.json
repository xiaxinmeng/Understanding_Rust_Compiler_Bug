{"sha": "26ad2982d82ef74fd741eb7dfdb664defaaa8027", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZhZDI5ODJkODJlZjc0ZmQ3NDFlYjdkZmRiNjY0ZGVmYWFhODAyNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-10-22T22:32:57Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-10-22T22:32:57Z"}, "message": "libiberty.h (_hex_value): Const-ify.\n\ninclude:\n\t* libiberty.h (_hex_value): Const-ify.\n\t(hex_init): Delete.\n\nlibiberty:\n\t* hex.c (hex_init): Delete.\n\t(_hex_value): Const-ify and initialize at compile-time.\n\nFrom-SVN: r46417", "tree": {"sha": "ae9cc4c1fbfeb68fe417370772331169716d4a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae9cc4c1fbfeb68fe417370772331169716d4a6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26ad2982d82ef74fd741eb7dfdb664defaaa8027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ad2982d82ef74fd741eb7dfdb664defaaa8027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ad2982d82ef74fd741eb7dfdb664defaaa8027", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ad2982d82ef74fd741eb7dfdb664defaaa8027/comments", "author": null, "committer": null, "parents": [{"sha": "f20a609feb9b6f7c2bd4f6faf792915024d02cf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20a609feb9b6f7c2bd4f6faf792915024d02cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f20a609feb9b6f7c2bd4f6faf792915024d02cf3"}], "stats": {"total": 107, "additions": 94, "deletions": 13}, "files": [{"sha": "605f094157eee3ea271b7a8a44784c244f1d805a", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ad2982d82ef74fd741eb7dfdb664defaaa8027/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ad2982d82ef74fd741eb7dfdb664defaaa8027/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=26ad2982d82ef74fd741eb7dfdb664defaaa8027", "patch": "@@ -1,3 +1,8 @@\n+2001-10-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libiberty.h (_hex_value): Const-ify.\n+\t(hex_init): Delete.\n+\n 2001-10-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* demangle.h (demangler_engine): Const-ify."}, {"sha": "542eae54de4f3d94adc2a5dcb5b8a2d78e588f22", "filename": "include/libiberty.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ad2982d82ef74fd741eb7dfdb664defaaa8027/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ad2982d82ef74fd741eb7dfdb664defaaa8027/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=26ad2982d82ef74fd741eb7dfdb664defaaa8027", "patch": "@@ -240,8 +240,7 @@ extern PTR xmemdup PARAMS ((const PTR, size_t, size_t)) ATTRIBUTE_MALLOC;\n \n #define _hex_array_size 256\n #define _hex_bad\t99\n-extern char _hex_value[_hex_array_size];\n-extern void hex_init PARAMS ((void));\n+extern const char _hex_value[_hex_array_size];\n #define hex_p(c)\t(hex_value (c) != _hex_bad)\n /* If you change this, note well: Some code relies on side effects in\n    the argument being performed exactly once.  */"}, {"sha": "5ef552f6fcc732f94e255fd35ad71ceafee22548", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ad2982d82ef74fd741eb7dfdb664defaaa8027/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ad2982d82ef74fd741eb7dfdb664defaaa8027/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=26ad2982d82ef74fd741eb7dfdb664defaaa8027", "patch": "@@ -1,3 +1,8 @@\n+2001-10-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* hex.c (hex_init): Delete.\n+\t(_hex_value): Const-ify and initialize at compile-time.\n+\n 2001-10-19  H.J. Lu <hjl@gnu.org>\n \n \t* Makefile.in ($(TARGETLIB)): Also generate pic/$(TARGETLIB) if"}, {"sha": "1c1d292823bd5410d1c5dc76b2ba75c8caefd7f1", "filename": "libiberty/hex.c", "status": "modified", "additions": 83, "deletions": 11, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ad2982d82ef74fd741eb7dfdb664defaaa8027/libiberty%2Fhex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ad2982d82ef74fd741eb7dfdb664defaaa8027/libiberty%2Fhex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhex.c?ref=26ad2982d82ef74fd741eb7dfdb664defaaa8027", "patch": "@@ -1,5 +1,5 @@\n /* Hex character manipulation support.\n-   Copyright (C) 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 2001 Free Software Foundation, Inc.\n \n This file is part of the libiberty library.\n Libiberty is free software; you can redistribute it and/or\n@@ -17,17 +17,89 @@ License along with libiberty; see the file COPYING.LIB.  If\n not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+#include <stdio.h>  /* for EOF */\n #include \"libiberty.h\"\n \n-char _hex_value[_hex_array_size];\n+/* Are we ASCII? */\n+#if '\\n' == 0x0A && ' ' == 0x20 && '0' == 0x30 \\\n+  && 'A' == 0x41 && 'a' == 0x61 && '!' == 0x21 \\\n+  && EOF == -1\n \n-void hex_init ()\n+const char _hex_value[_hex_array_size] =\n {\n-  int i;\n-  for (i = 0; i < _hex_array_size; i++)\n-    _hex_value[i] = _hex_bad;\n-  for (i = 0; i < 10; i++)\n-    _hex_value['0' + i] = i;\n-  for (i = 0; i < 6; i++)\n-    _hex_value['a' + i] = _hex_value['A' + i] = 10 + i;\n-}\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* NUL SOH STX ETX */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* EOT ENQ ACK BEL */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* BS  HT  LF  VT  */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* FF  CR  SO  SI  */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* DLE DC1 DC2 DC3 */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* DC4 NAK SYN ETB */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* CAN EM  SUB ESC */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* FS  GS  RS  US  */\n+\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* SP  !   \"   #   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* $   %   &   '   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* (   )   *   +   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* ,   -   .   /   */\n+  0,        1,        2,        3,          /* 0   1   2   3   */\n+  4,        5,        6,        7,          /* 4   5   6   7   */\n+  8,        9,        _hex_bad, _hex_bad,   /* 8   9   :   ;   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* <   =   >   ?   */\n+\n+  _hex_bad, 10,       11,       12,         /* @   A   B   C   */\n+  13,       14,       15,       _hex_bad,   /* D   E   F   G   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* H   I   J   K   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* L   M   N   O   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* P   Q   R   S   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* T   U   V   W   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* X   Y   Z   [   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* \\   ]   ^   _   */\n+\n+  _hex_bad, 10,       11,       12,         /* `   a   b   c   */\n+  13,       14,       15,       _hex_bad,   /* d   e   f   g   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* h   i   j   k   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* l   m   n   o   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* p   q   r   s   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* t   u   v   w   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* x   y   z   {   */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,   /* |   }   ~   DEL */\n+\n+  /* The high half of unsigned char, all values are _hex_bad.  */\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+  _hex_bad, _hex_bad, _hex_bad, _hex_bad,\n+};\n+#else\n+ #error \"Unsupported host character set\"\n+#endif /* not ASCII */"}]}