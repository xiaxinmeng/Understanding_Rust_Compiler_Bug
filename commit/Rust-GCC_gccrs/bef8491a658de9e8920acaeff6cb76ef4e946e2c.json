{"sha": "bef8491a658de9e8920acaeff6cb76ef4e946e2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVmODQ5MWE2NThkZTllODkyMGFjYWVmZjZjYjc2ZWY0ZTk0NmUyYw==", "commit": {"author": {"name": "Sriraman Tallam", "email": "tmsriram@google.com", "date": "2013-06-18T22:45:03Z"}, "committer": {"name": "Sriraman Tallam", "email": "tmsriram@gcc.gnu.org", "date": "2013-06-18T22:45:03Z"}, "message": "Emit errors when always_inline functions cannot be inlined in -O0 mode.\n\n\t* tree-inline.c (expand_call_inline): Allow the error to be flagged\n\tin early inline pass.\n\t* ipa-inline.c (inline_always_inline_functions): Pretend always_inline\n\tfunctions are inlined during failures to flag an error.\n\t* gcc.target/i386/inline_error.c: New test.\n\t* gcc.c-torture/compile/pr44043.c: Fix test to expect an error.\n\t* gcc.c-torture/compile/pr43791.c: Fix test to expect an error.\n\nFrom-SVN: r200179", "tree": {"sha": "36b462d3fe220a71b684a5b371e52f55cfc14584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36b462d3fe220a71b684a5b371e52f55cfc14584"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bef8491a658de9e8920acaeff6cb76ef4e946e2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef8491a658de9e8920acaeff6cb76ef4e946e2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef8491a658de9e8920acaeff6cb76ef4e946e2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef8491a658de9e8920acaeff6cb76ef4e946e2c/comments", "author": {"login": "tmsri", "id": 38991943, "node_id": "MDQ6VXNlcjM4OTkxOTQz", "avatar_url": "https://avatars.githubusercontent.com/u/38991943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmsri", "html_url": "https://github.com/tmsri", "followers_url": "https://api.github.com/users/tmsri/followers", "following_url": "https://api.github.com/users/tmsri/following{/other_user}", "gists_url": "https://api.github.com/users/tmsri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmsri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmsri/subscriptions", "organizations_url": "https://api.github.com/users/tmsri/orgs", "repos_url": "https://api.github.com/users/tmsri/repos", "events_url": "https://api.github.com/users/tmsri/events{/privacy}", "received_events_url": "https://api.github.com/users/tmsri/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3dd55b2f9fdbf102dad43fca46578f4054174d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd55b2f9fdbf102dad43fca46578f4054174d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dd55b2f9fdbf102dad43fca46578f4054174d45"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "d82677b0022daa948167ec94bef27922f96df388", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bef8491a658de9e8920acaeff6cb76ef4e946e2c", "patch": "@@ -1,3 +1,10 @@\n+2013-06-18  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* ipa-inline.c (inline_always_inline_functions): Pretend always_inline\n+\tfunctions are inlined during failures to flag an error.\n+\t* tree-inline.c (expand_call_inline): Allow the error to be flagged\n+\tin early inline pass.\n+\t\n 2013-06-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (initial_ix86_tune_features): Fix a typo"}, {"sha": "d1f0089eb83b8a7565b2d2f9924c367eb7925c45", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=bef8491a658de9e8920acaeff6cb76ef4e946e2c", "patch": "@@ -1911,7 +1911,15 @@ inline_always_inline_functions (struct cgraph_node *node)\n \t}\n \n       if (!can_early_inline_edge_p (e))\n-\tcontinue;\n+\t{\n+\t  /* Set inlined to true if the callee is marked \"always_inline\" but\n+\t     is not inlinable.  This will allow flagging an error later in\n+\t     expand_call_inline in tree-inline.c.  */\n+\t  if (lookup_attribute (\"always_inline\",\n+\t\t\t\t DECL_ATTRIBUTES (callee->symbol.decl)) != NULL)\n+\t    inlined = true;\n+\t  continue;\n+\t}\n \n       if (dump_file)\n \tfprintf (dump_file, \"  Inlining %s into %s (always_inline).\\n\","}, {"sha": "be51cb3391993ce4829f068bd97a8f69fbf8714d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bef8491a658de9e8920acaeff6cb76ef4e946e2c", "patch": "@@ -1,3 +1,9 @@\n+2013-06-18  Sriraman Tallam  <tmsriram@google.com>\n+\n+\t* gcc.target/i386/inline_error.c: New test.\n+\t* gcc.c-torture/compile/pr44043.c: Fix test to expect an error.\n+\t* gcc.c-torture/compile/pr43791.c: Fix test to expect an error.\n+\n 2013-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53211"}, {"sha": "0d8c94f5aed1b456bc5a85683a88a600f0a12311", "filename": "gcc/testsuite/gcc.c-torture/compile/pr43791.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43791.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43791.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43791.c?ref=bef8491a658de9e8920acaeff6cb76ef4e946e2c", "patch": "@@ -19,3 +19,4 @@ void trylock(void) {\n      fasttrylock(slowtrylock);\n }\n \n+/* { dg-prune-output \"(inlining failed in call to always_inline.*indirect function call with a yet undetermined callee|called from here)\" } */"}, {"sha": "ea8767847c2e2ed96dc01224d49458c16829944e", "filename": "gcc/testsuite/gcc.c-torture/compile/pr44043.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44043.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44043.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44043.c?ref=bef8491a658de9e8920acaeff6cb76ef4e946e2c", "patch": "@@ -85,3 +85,5 @@ int raw_sendmsg(struct sock *sk, struct msghdr *msg, size_t len)\n {\n   raw_send_hdrinc(sk, msg->msg_iov, len, (void *)0, msg->msg_flags);\n }\n+\n+/* { dg-prune-output \"(inlining failed in call to always_inline.*indirect function call with a yet undetermined callee|called from here)\" } */"}, {"sha": "da1cea10ca07fd568272c86c49020c9cbc7f17d5", "filename": "gcc/testsuite/gcc.target/i386/inline_error.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finline_error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finline_error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finline_error.c?ref=bef8491a658de9e8920acaeff6cb76ef4e946e2c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mno-popcnt\" } */\n+\n+inline int __attribute__ ((__gnu_inline__, __always_inline__, target(\"popcnt\")))\n+foo () /* { dg-error \"inlining failed in call to always_inline .* target specific option mismatch\" } */\n+{\n+  return 0;\n+}\n+\n+int bar()\n+{\n+  return foo (); /* { dg-error \"called from here\" } */\n+}"}, {"sha": "f5247716c952f328d8e840d226f5ba3810ec686c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8491a658de9e8920acaeff6cb76ef4e946e2c/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=bef8491a658de9e8920acaeff6cb76ef4e946e2c", "patch": "@@ -3905,8 +3905,6 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n \t     for inlining, but we can't do that because frontends overwrite\n \t     the body.  */\n \t  && !cg_edge->callee->local.redefined_extern_inline\n-\t  /* Avoid warnings during early inline pass. */\n-\t  && cgraph_global_info_ready\n \t  /* PR 20090218-1_0.c. Body can be provided by another module. */\n \t  && (reason != CIF_BODY_NOT_AVAILABLE || !flag_generate_lto))\n \t{"}]}