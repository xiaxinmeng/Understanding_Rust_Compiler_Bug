{"sha": "052d6488478db2b3c55d165aac653dc63582e38b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUyZDY0ODg0NzhkYjJiM2M1NWQxNjVhYWM2NTNkYzYzNTgyZTM4Yg==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-03-18T17:38:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-12T08:29:18Z"}, "message": "[Ada] Remove redundant iterations in checks for overlapping actuals\n\n2020-06-12  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Simplify.", "tree": {"sha": "73083d7b5907156e4824af7bc98df3a262023f06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73083d7b5907156e4824af7bc98df3a262023f06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/052d6488478db2b3c55d165aac653dc63582e38b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052d6488478db2b3c55d165aac653dc63582e38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/052d6488478db2b3c55d165aac653dc63582e38b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052d6488478db2b3c55d165aac653dc63582e38b/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "879f6fa876b5b66f547a4b426145575433468572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/879f6fa876b5b66f547a4b426145575433468572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/879f6fa876b5b66f547a4b426145575433468572"}], "stats": {"total": 102, "additions": 42, "deletions": 60}, "files": [{"sha": "fab512a5ccaf85128438c4c3a21fe99d6b84182d", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 42, "deletions": 60, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052d6488478db2b3c55d165aac653dc63582e38b/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052d6488478db2b3c55d165aac653dc63582e38b/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=052d6488478db2b3c55d165aac653dc63582e38b", "patch": "@@ -3750,12 +3750,10 @@ package body Sem_Warn is\n             null;\n \n          else\n-            Form2 := First_Formal (Subp);\n-            Act2  := First_Actual (N);\n+            Form2 := Next_Formal (Form1);\n+            Act2  := Next_Actual (Act1);\n             while Present (Form2) and then Present (Act2) loop\n-               if Form1 /= Form2\n-                 and then Refer_Same_Object (Act1, Act2)\n-               then\n+               if Refer_Same_Object (Act1, Act2) then\n                   if Is_Generic_Type (Etype (Act2)) then\n                      return;\n                   end if;\n@@ -3847,71 +3845,55 @@ package body Sem_Warn is\n                           or else Error_To_Warning\n                           or else Warn_Only;\n \n-                        declare\n-                           Act  : Node_Id;\n-                           Form : Entity_Id;\n-\n-                        begin\n-                           --  Find matching actual\n-\n-                           Act  := First_Actual (N);\n-                           Form := First_Formal (Subp);\n-                           while Act /= Act2 loop\n-                              Next_Formal (Form);\n-                              Next_Actual (Act);\n-                           end loop;\n-\n-                           if Is_Elementary_Type (Etype (Act1))\n-                             and then Ekind (Form2) = E_In_Parameter\n-                           then\n-                              null;  --  No real aliasing\n-\n-                           elsif Is_Elementary_Type (Etype (Act2))\n-                             and then Ekind (Form2) = E_In_Parameter\n-                           then\n-                              null;  --  Ditto\n+                        if Is_Elementary_Type (Etype (Act1))\n+                          and then Ekind (Form2) = E_In_Parameter\n+                        then\n+                           null;  --  No real aliasing\n \n-                           --  If the call was written in prefix notation, and\n-                           --  thus its prefix before rewriting was a selected\n-                           --  component, count only visible actuals in call.\n+                        elsif Is_Elementary_Type (Etype (Act2))\n+                          and then Ekind (Form2) = E_In_Parameter\n+                        then\n+                           null;  --  Ditto\n \n-                           elsif Is_Entity_Name (First_Actual (N))\n-                             and then Nkind (Original_Node (N)) = Nkind (N)\n-                             and then Nkind (Name (Original_Node (N))) =\n-                                                           N_Selected_Component\n-                             and then\n-                               Is_Entity_Name\n-                                 (Prefix (Name (Original_Node (N))))\n-                             and then\n-                               Entity (Prefix (Name (Original_Node (N)))) =\n-                                 Entity (First_Actual (N))\n-                           then\n-                              if Act1 = First_Actual (N) then\n-                                 Error_Msg_FE\n-                                   (\"<<`IN OUT` prefix overlaps with \"\n-                                    & \"actual for&\", Act1, Form);\n+                        --  If the call was written in prefix notation, and\n+                        --  thus its prefix before rewriting was a selected\n+                        --  component, count only visible actuals in call.\n \n-                              else\n-                                 --  For greater clarity, give name of formal\n-\n-                                 Error_Msg_Node_2 := Form;\n-                                 Error_Msg_FE\n-                                   (\"<<writable actual for & overlaps with \"\n-                                    & \"actual for&\", Act1, Form);\n-                              end if;\n+                        elsif Is_Entity_Name (First_Actual (N))\n+                          and then Nkind (Original_Node (N)) = Nkind (N)\n+                          and then Nkind (Name (Original_Node (N))) =\n+                                                        N_Selected_Component\n+                          and then\n+                            Is_Entity_Name (Prefix (Name (Original_Node (N))))\n+                          and then\n+                            Entity (Prefix (Name (Original_Node (N)))) =\n+                              Entity (First_Actual (N))\n+                        then\n+                           if Act1 = First_Actual (N) then\n+                              Error_Msg_FE\n+                                (\"<<`IN OUT` prefix overlaps with \"\n+                                 & \"actual for&\", Act1, Form2);\n \n                            else\n                               --  For greater clarity, give name of formal\n \n-                              Error_Msg_Node_2 := Form;\n-\n-                              --  This is one of the messages\n-\n+                              Error_Msg_Node_2 := Form2;\n                               Error_Msg_FE\n                                 (\"<<writable actual for & overlaps with \"\n-                                 & \"actual for&\", Act1, Form1);\n+                                 & \"actual for&\", Act1, Form2);\n                            end if;\n-                        end;\n+\n+                        else\n+                           --  For greater clarity, give name of formal\n+\n+                           Error_Msg_Node_2 := Form2;\n+\n+                           --  This is one of the messages\n+\n+                           Error_Msg_FE\n+                             (\"<<writable actual for & overlaps with \"\n+                              & \"actual for&\", Act1, Form1);\n+                        end if;\n                      end if;\n                   end if;\n "}]}