{"sha": "14c2101daa9fd45e83de153275c7650950f1b7de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRjMjEwMWRhYTlmZDQ1ZTgzZGUxNTMyNzVjNzY1MDk1MGYxYjdkZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-06T20:51:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-06T20:51:52Z"}, "message": "Add support for C++0x nullptr.\n\ngcc:\n\t* c-common.c (c_common_reswords): Add nullptr.\n\t* c-common.h: Add RID_NULLPTR.  Reorganize C++0x rids.\n\t* dwarf2out.c (is_base_type): Handle NULLPTR_TYPE.\n\t(gen_type_die_with_usage): Likewise.\n\t* dbxout.c (dbxout_type): Likewise.\n\t* sdbout.c (plain_type_1): Likewise.\ngcc/cp:\n\t* cp-tree.def: Add NULLPTR_TYPE.\n\t* cp-tree.h: Add nullptr_node.\n\t(cp_tree_index): Add CPTI_NULLPTR.\n\t(SCALAR_TYPE_P): Add NULLPTR_TYPE.\n\t* call.c (null_ptr_cst_p): Handle nullptr.\n\t(standard_conversion): Likewise.\n\t(convert_arg_to_ellipsis): Likewise.\n\t* mangle.c (write_type): Likewise.\n\t* name-lookup.c (arg_assoc_type): Likewise.\n\t* parser.c (cp_parser_primary_expression): Likewise.\n\t* typeck.c (cp_build_binary_op): Likewise.\n\t(build_reinterpret_cast_1): Likewise.\n\t* error.c (dump_type): Likewise.\n\t(dump_type_prefix, dump_type_suffix): Likewise.\n\t* decl.c (cxx_init_decl_processing): Likewise.\n\t* cxx-pretty-print.c (pp_cxx_constant): Likewise.\n\t* cvt.c (ocp_convert): Likewise.\n\t* rtti.c (typeinfo_in_lib_p, emit_support_tinfos): Put\n\tnullptr_t tinfo in libsupc++.\nlibstdc++-v3:\n\t* config/abi/pre/gnu.ver: Add typeinfo for decltype(nullptr).\nlibiberty:\n\t* cp-demangle.c (cplus_demangle_builtin_types): Add nullptr.\n\t(cplus_demangle_type): Handle nullptr.\n\nFrom-SVN: r159131", "tree": {"sha": "6b6815281c65b569db623d6f41bf2f7830a753db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b6815281c65b569db623d6f41bf2f7830a753db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14c2101daa9fd45e83de153275c7650950f1b7de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c2101daa9fd45e83de153275c7650950f1b7de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c2101daa9fd45e83de153275c7650950f1b7de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c2101daa9fd45e83de153275c7650950f1b7de/comments", "author": null, "committer": null, "parents": [{"sha": "0d1141a39ee38d8a2e1af47a0a64ccd47f41b908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1141a39ee38d8a2e1af47a0a64ccd47f41b908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1141a39ee38d8a2e1af47a0a64ccd47f41b908"}], "stats": {"total": 569, "additions": 536, "deletions": 33}, "files": [{"sha": "94305fafe46bd9f18b52b5493074d72bbad9bea4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -1,3 +1,13 @@\n+2010-05-06  Magnus Fromreide  <magfr@lysator.liu.se>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.c (c_common_reswords): Add nullptr.\n+\t* c-common.h: Add RID_NULLPTR.  Reorganize C++0x rids.\n+\t* dwarf2out.c (is_base_type): Handle NULLPTR_TYPE.\n+\t(gen_type_die_with_usage): Likewise.\n+\t* dbxout.c (dbxout_type): Likewise.\n+\t* sdbout.c (plain_type_1): Likewise.\n+\n 2010-05-06  Jason Merrill  <jason@redhat.com>\n \n \t* gimplify.c (gimplify_expr): Set GS_ALL_DONE when appropriate."}, {"sha": "e11b6aff4755b7b13146a8712904cec73a49998c", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -656,6 +656,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"mutable\",\t\tRID_MUTABLE,\tD_CXXONLY | D_CXXWARN },\n   { \"namespace\",\tRID_NAMESPACE,\tD_CXXONLY | D_CXXWARN },\n   { \"new\",\t\tRID_NEW,\tD_CXXONLY | D_CXXWARN },\n+  { \"nullptr\",\t\tRID_NULLPTR,\tD_CXXONLY | D_CXX0X | D_CXXWARN },\n   { \"operator\",\t\tRID_OPERATOR,\tD_CXXONLY | D_CXXWARN },\n   { \"private\",\t\tRID_PRIVATE,\tD_CXX_OBJC | D_CXXWARN },\n   { \"protected\",\tRID_PROTECTED,\tD_CXX_OBJC | D_CXXWARN },"}, {"sha": "e32fa393751fd104a236cd23dd2e9ed7d77f7c47", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -114,7 +114,7 @@ enum rid\n   RID_IS_UNION,\n \n   /* C++0x */\n-  RID_STATIC_ASSERT, RID_CONSTEXPR, RID_DECLTYPE,\n+  RID_CONSTEXPR, RID_DECLTYPE, RID_NULLPTR, RID_STATIC_ASSERT,\n \n   /* Objective-C */\n   RID_AT_ENCODE,   RID_AT_END,\n@@ -155,8 +155,8 @@ enum rid\n   RID_FIRST_MODIFIER = RID_STATIC,\n   RID_LAST_MODIFIER = RID_ONEWAY,\n \n-  RID_FIRST_CXX0X = RID_STATIC_ASSERT,\n-  RID_LAST_CXX0X = RID_DECLTYPE,\n+  RID_FIRST_CXX0X = RID_CONSTEXPR,\n+  RID_LAST_CXX0X = RID_STATIC_ASSERT,\n   RID_FIRST_AT = RID_AT_ENCODE,\n   RID_LAST_AT = RID_AT_IMPLEMENTATION,\n   RID_FIRST_PQ = RID_IN,"}, {"sha": "860f4e7476f650d15071255dba99e466d394a9a6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -1,3 +1,27 @@\n+2010-05-06  Magnus Fromreide  <magfr@lysator.liu.se>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tAdd support for C++0x nullptr.\n+\t* cp-tree.def: Add NULLPTR_TYPE.\n+\t* cp-tree.h: Add nullptr_node.\n+\t(cp_tree_index): Add CPTI_NULLPTR.\n+\t(SCALAR_TYPE_P): Add NULLPTR_TYPE.\n+\t* call.c (null_ptr_cst_p): Handle nullptr.\n+\t(standard_conversion): Likewise.\n+\t(convert_arg_to_ellipsis): Likewise.\n+\t* mangle.c (write_type): Likewise.\n+\t* name-lookup.c (arg_assoc_type): Likewise.\n+\t* parser.c (cp_parser_primary_expression): Likewise.\n+\t* typeck.c (cp_build_binary_op): Likewise.\n+\t(build_reinterpret_cast_1): Likewise.\n+\t* error.c (dump_type): Likewise.\n+\t(dump_type_prefix, dump_type_suffix): Likewise.\n+\t* decl.c (cxx_init_decl_processing): Likewise.\n+\t* cxx-pretty-print.c (pp_cxx_constant): Likewise.\n+\t* cvt.c (ocp_convert): Likewise.\n+\t* rtti.c (typeinfo_in_lib_p, emit_support_tinfos): Put\n+\tnullptr_t tinfo in libsupc++.\n+\n 2010-05-06  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (simplify_aggr_init_expr): Use INIT_EXPR."}, {"sha": "d74eb19580f08ac052feb669f566f44fd267ab5f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -460,9 +460,11 @@ null_ptr_cst_p (tree t)\n   /* [conv.ptr]\n \n      A null pointer constant is an integral constant expression\n-     (_expr.const_) rvalue of integer type that evaluates to zero.  */\n+     (_expr.const_) rvalue of integer type that evaluates to zero or\n+     an rvalue of type std::nullptr_t. */\n   t = integral_constant_value (t);\n-  if (t == null_node)\n+  if (t == null_node\n+      || TREE_CODE (TREE_TYPE (t)) == NULLPTR_TYPE)\n     return true;\n   if (CP_INTEGRAL_TYPE_P (TREE_TYPE (t)) && integer_zerop (t))\n     {\n@@ -776,7 +778,12 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n   if (same_type_p (from, to))\n     return conv;\n \n-  if ((tcode == POINTER_TYPE || TYPE_PTR_TO_MEMBER_P (to))\n+  /* [conv.ptr]\n+     A null pointer constant can be converted to a pointer type; ... A\n+     null pointer constant of integral type can be converted to an\n+     rvalue of type std::nullptr_t. */\n+  if ((tcode == POINTER_TYPE || TYPE_PTR_TO_MEMBER_P (to)\n+       || tcode == NULLPTR_TYPE)\n       && expr && null_ptr_cst_p (expr))\n     conv = build_conv (ck_std, to, conv);\n   else if ((tcode == INTEGER_TYPE && fcode == POINTER_TYPE)\n@@ -911,17 +918,20 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \n \t  An rvalue of arithmetic, unscoped enumeration, pointer, or\n \t  pointer to member type can be converted to an rvalue of type\n-\t  bool.  */\n+\t  bool. ... An rvalue of type std::nullptr_t can be converted\n+\t  to an rvalue of type bool;  */\n       if (ARITHMETIC_TYPE_P (from)\n \t  || UNSCOPED_ENUM_P (from)\n \t  || fcode == POINTER_TYPE\n-\t  || TYPE_PTR_TO_MEMBER_P (from))\n+\t  || TYPE_PTR_TO_MEMBER_P (from)\n+\t  || fcode == NULLPTR_TYPE)\n \t{\n \t  conv = build_conv (ck_std, to, conv);\n \t  if (fcode == POINTER_TYPE\n \t      || TYPE_PTRMEM_P (from)\n \t      || (TYPE_PTRMEMFUNC_P (from)\n-\t\t  && conv->rank < cr_pbool))\n+\t\t  && conv->rank < cr_pbool)\n+              || fcode == NULLPTR_TYPE)\n \t    conv->rank = cr_pbool;\n \t  return conv;\n \t}\n@@ -5192,6 +5202,8 @@ convert_arg_to_ellipsis (tree arg)\n \t  < TYPE_PRECISION (double_type_node))\n       && !DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (arg))))\n     arg = convert_to_real (double_type_node, arg);\n+  else if (TREE_CODE (TREE_TYPE (arg)) == NULLPTR_TYPE)\n+    arg = null_pointer_node;\n   else if (INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (arg)))\n     arg = perform_integral_promotions (arg);\n \n@@ -6788,9 +6800,8 @@ compare_ics (conversion *ics1, conversion *ics2)\n     Two conversion sequences with the same rank are indistinguishable\n     unless one of the following rules applies:\n \n-    --A conversion that is not a conversion of a pointer, or pointer\n-      to member, to bool is better than another conversion that is such\n-      a conversion.\n+    --A conversion that does not a convert a pointer, pointer to member,\n+      or std::nullptr_t to bool is better than one that does.\n \n     The ICS_STD_RANK automatically handles the pointer-to-bool rule,\n     so that we do not have to check it explicitly.  */"}, {"sha": "c3e8208b40973722bdd70b48803f02391cb42acc", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -449,6 +449,9 @@ DEFTREECODE (DECLTYPE_TYPE, \"decltype_type\", tcc_type, 0)\n    instantiation time.  */\n DEFTREECODE (TEMPLATE_INFO, \"template_info\", tcc_exceptional, 0)\n \n+/* The type of a nullptr expression. This is a C++0x extension. */\n+DEFTREECODE (NULLPTR_TYPE, \"decltype(nullptr)\", tcc_type, 0)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "22a7487cf290687c0674b3135691b19beca34ff0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -775,6 +775,8 @@ enum cp_tree_index\n \n     CPTI_KEYED_CLASSES,\n \n+    CPTI_NULLPTR,\n+\n     CPTI_MAX\n };\n \n@@ -809,6 +811,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define abort_fndecl\t\t\tcp_global_trees[CPTI_ABORT_FNDECL]\n #define global_delete_fndecl\t\tcp_global_trees[CPTI_GLOBAL_DELETE_FNDECL]\n #define current_aggr\t\t\tcp_global_trees[CPTI_AGGR_TAG]\n+#define nullptr_node\t\t\tcp_global_trees[CPTI_NULLPTR]\n \n /* We cache these tree nodes so as to call get_identifier less\n    frequently.  */\n@@ -3001,16 +3004,18 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n \n /* [basic.types]\n \n-   Arithmetic types, enumeration types, pointer types, and\n-   pointer-to-member types, are collectively called scalar types.\n+   Arithmetic types, enumeration types, pointer types,\n+   pointer-to-member types, and std::nullptr_t are collectively called\n+   scalar types.\n    \n    Keep these checks in ascending code order.  */\n #define SCALAR_TYPE_P(TYPE)\t\t\t\\\n   (TYPE_PTRMEM_P (TYPE)\t\t\t\t\\\n    || TREE_CODE (TYPE) == ENUMERAL_TYPE\t\t\\\n    || ARITHMETIC_TYPE_P (TYPE)\t\t\t\\\n    || TYPE_PTR_P (TYPE)\t\t\t\t\\\n-   || TYPE_PTRMEMFUNC_P (TYPE))\n+   || TYPE_PTRMEMFUNC_P (TYPE)                  \\\n+   || TREE_CODE (TYPE) == NULLPTR_TYPE)\n \n /* Determines whether this type is a C++0x scoped enumeration\n    type. Scoped enumerations types are introduced via \"enum class\" or"}, {"sha": "b357084b681e2422ff91b9008d6fec407bbf5a18", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -704,6 +704,8 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n \n       return fold_if_not_in_template (convert_to_integer (type, e));\n     }\n+  if (code == NULLPTR_TYPE && e && null_ptr_cst_p (e))\n+    return nullptr_node;\n   if (POINTER_TYPE_P (type) || TYPE_PTR_TO_MEMBER_P (type))\n     return fold_if_not_in_template (cp_convert_to_pointer (type, e));\n   if (code == VECTOR_TYPE)"}, {"sha": "55def21f167da016c9e8fd57139c525013219cac", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -339,6 +339,14 @@ pp_cxx_constant (cxx_pretty_printer *pp, tree t)\n       }\n       break;\n \n+    case INTEGER_CST:\n+      if (TREE_CODE (TREE_TYPE (t)) == NULLPTR_TYPE)\n+\t{\n+\t  pp_string (pp, \"nullptr\");\n+\t  break;\n+\t}\n+      /* else fall through.  */\n+\n     default:\n       pp_c_constant (pp_c_base (pp), t);\n       break;"}, {"sha": "70b1041284a437d7a69e72c38082a178a637ec4a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -3526,6 +3526,17 @@ cxx_init_decl_processing (void)\n     push_cp_library_fn (VEC_NEW_EXPR, newtype);\n     global_delete_fndecl = push_cp_library_fn (DELETE_EXPR, deltype);\n     push_cp_library_fn (VEC_DELETE_EXPR, deltype);\n+\n+    {\n+      tree nullptr_type_node = make_node (NULLPTR_TYPE);\n+      TYPE_SIZE (nullptr_type_node) = bitsize_int (GET_MODE_BITSIZE (ptr_mode));\n+      TYPE_SIZE_UNIT (nullptr_type_node) = size_int (GET_MODE_SIZE (ptr_mode));\n+      TYPE_UNSIGNED (nullptr_type_node) = 1;\n+      TYPE_PRECISION (nullptr_type_node) = GET_MODE_BITSIZE (ptr_mode);\n+      SET_TYPE_MODE (nullptr_type_node, Pmode);\n+      nullptr_node = make_node (INTEGER_CST);\n+      TREE_TYPE (nullptr_node) = nullptr_type_node;\n+    }\n   }\n \n   abort_fndecl"}, {"sha": "3a03790c338047de6f57660016bf8518466a8996", "filename": "gcc/cp/error.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -475,6 +475,10 @@ dump_type (tree t, int flags)\n       pp_cxx_right_paren (cxx_pp);\n       break;\n \n+    case NULLPTR_TYPE:\n+      pp_string (cxx_pp, \"std::nullptr_t\");\n+      break;\n+\n     default:\n       pp_unsupported_tree (cxx_pp, t);\n       /* Fall through to error.  */\n@@ -703,6 +707,7 @@ dump_type_prefix (tree t, int flags)\n     case DECLTYPE_TYPE:\n     case TYPE_PACK_EXPANSION:\n     case FIXED_POINT_TYPE:\n+    case NULLPTR_TYPE:\n       dump_type (t, flags);\n       pp_base (cxx_pp)->padding = pp_before;\n       break;\n@@ -805,6 +810,7 @@ dump_type_suffix (tree t, int flags)\n     case DECLTYPE_TYPE:\n     case TYPE_PACK_EXPANSION:\n     case FIXED_POINT_TYPE:\n+    case NULLPTR_TYPE:\n       break;\n \n     default:"}, {"sha": "05d589293a17f01cc4673c85c564a05a264fa836", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -1759,6 +1759,7 @@ write_local_name (tree function, const tree local_entity,\n      <type> ::= Dt <expression> # decltype of an id-expression or \n                                 # class member access\n      <type> ::= DT <expression> # decltype of an expression\n+     <type> ::= Dn              # decltype of nullptr\n \n    TYPE is a type node.  */\n \n@@ -1932,6 +1933,10 @@ write_type (tree type)\n               write_char ('E');\n               break;\n \n+\t    case NULLPTR_TYPE:\n+              write_string (\"Dn\");\n+              break;\n+\n \t    case TYPEOF_TYPE:\n \t      sorry (\"mangling typeof, use decltype instead\");\n \t      break;"}, {"sha": "ebc689b00fb988efb7268c3c038cfc9e8448bb0e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -4859,6 +4859,7 @@ arg_assoc_type (struct arg_lookup *k, tree type)\n     case BOOLEAN_TYPE:\n     case FIXED_POINT_TYPE:\n     case DECLTYPE_TYPE:\n+    case NULLPTR_TYPE:\n       return false;\n     case RECORD_TYPE:\n       if (TYPE_PTRMEMFUNC_P (type))"}, {"sha": "05b5b661758411b0b2940cffc0c290cc8444f73e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -3368,6 +3368,11 @@ cp_parser_primary_expression (cp_parser *parser,\n \t  cp_lexer_consume_token (parser->lexer);\n \t  return null_node;\n \n+\t  /* The `nullptr' literal.  */\n+\tcase RID_NULLPTR:\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  return nullptr_node;\n+\n \t  /* Recognize the `this' keyword.  */\n \tcase RID_THIS:\n \t  cp_lexer_consume_token (parser->lexer);"}, {"sha": "9a7faec852bc3b4242dafff25abb97887b703cbf", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -1044,6 +1044,7 @@ typeinfo_in_lib_p (tree type)\n     case BOOLEAN_TYPE:\n     case REAL_TYPE:\n     case VOID_TYPE:\n+    case NULLPTR_TYPE:\n       return true;\n \n     default:\n@@ -1449,6 +1450,9 @@ create_tinfo_types (void)\n void\n emit_support_tinfos (void)\n {\n+  /* Dummy static variable so we can put nullptr in the array; it will be\n+     set before we actually start to walk the array.  */\n+  static tree nullptr_type_node;\n   static tree *const fundamentals[] =\n   {\n     &void_type_node,\n@@ -1461,6 +1465,7 @@ emit_support_tinfos (void)\n     &long_long_integer_type_node, &long_long_unsigned_type_node,\n     &float_type_node, &double_type_node, &long_double_type_node,\n     &dfloat32_type_node, &dfloat64_type_node, &dfloat128_type_node,\n+    &nullptr_type_node,\n     0\n   };\n   int ix;\n@@ -1477,6 +1482,7 @@ emit_support_tinfos (void)\n   if (!dtor || DECL_EXTERNAL (dtor))\n     return;\n   doing_runtime = 1;\n+  nullptr_type_node = TREE_TYPE (nullptr_node);\n   for (ix = 0; fundamentals[ix]; ix++)\n     {\n       tree bltn = *fundamentals[ix];"}, {"sha": "61d5f224cabb480efb212794b28083787cc01dcb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -3993,6 +3993,9 @@ cp_build_binary_op (location_t location,\n \t    }\n \t  result_type = type1;\n \t}\n+      else if (null_ptr_cst_p (op0) && null_ptr_cst_p (op1))\n+\t/* One of the operands must be of nullptr_t type.  */\n+        result_type = TREE_TYPE (nullptr_node);\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  result_type = type0;\n@@ -4192,12 +4195,13 @@ cp_build_binary_op (location_t location,\n       else if (code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n \tresult_type = composite_pointer_type (type0, type1, op0, op1,\n \t\t\t\t\t      CPO_COMPARISON, complain);\n-      else if (code0 == POINTER_TYPE && TREE_CODE (op1) == INTEGER_CST\n-\t       && integer_zerop (op1))\n+      else if (code0 == POINTER_TYPE && null_ptr_cst_p (op1))\n \tresult_type = type0;\n-      else if (code1 == POINTER_TYPE && TREE_CODE (op0) == INTEGER_CST\n-\t       && integer_zerop (op0))\n+      else if (code1 == POINTER_TYPE && null_ptr_cst_p (op0))\n \tresult_type = type1;\n+      else if (null_ptr_cst_p (op0) && null_ptr_cst_p (op1))\n+\t/* One of the operands must be of nullptr_t type.  */\n+        result_type = TREE_TYPE (nullptr_node);\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  result_type = type0;\n@@ -6020,8 +6024,11 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \n   /* [expr.reinterpret.cast]\n      A pointer can be converted to any integral type large enough to\n-     hold it.  */\n-  if (CP_INTEGRAL_TYPE_P (type) && TYPE_PTR_P (intype))\n+     hold it. ... A value of type std::nullptr_t can be converted to\n+     an integral type; the conversion has the same meaning and\n+     validity as a conversion of (void*)0 to the integral type.  */\n+  if (CP_INTEGRAL_TYPE_P (type)\n+      && (TYPE_PTR_P (intype) || TREE_CODE (intype) == NULLPTR_TYPE))\n     {\n       if (TYPE_PRECISION (type) < TYPE_PRECISION (intype))\n         {\n@@ -6031,6 +6038,8 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n           else\n             return error_mark_node;\n         }\n+      if (TREE_CODE (intype) == NULLPTR_TYPE)\n+        return build_int_cst (type, 0);\n     }\n   /* [expr.reinterpret.cast]\n      A value of integral or enumeration type can be explicitly"}, {"sha": "bce57036bcc7bfee91574aa1c7f6439cd3ce7b8d", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -1867,6 +1867,7 @@ dbxout_type (tree type, int full)\n     {\n     case VOID_TYPE:\n     case LANG_TYPE:\n+    case NULLPTR_TYPE:\n       /* For a void type, just define it as itself; i.e., \"5=5\".\n \t This makes us consider it defined\n \t without saying what it is.  The debugger will make it"}, {"sha": "66ac5eb3a3cb0ef886619f3c2cb2a05342681127", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -12108,6 +12108,7 @@ is_base_type (tree type)\n     case ENUMERAL_TYPE:\n     case FUNCTION_TYPE:\n     case METHOD_TYPE:\n+    case NULLPTR_TYPE:\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n     case OFFSET_TYPE:\n@@ -19171,6 +19172,18 @@ gen_type_die_with_usage (tree type, dw_die_ref context_die,\n \t when appropriate.  */\n       return;\n \n+    case NULLPTR_TYPE:\n+      {\n+        dw_die_ref type_die = lookup_type_die (type);\n+        if (type_die == NULL)\n+          {\n+            type_die = new_die (DW_TAG_unspecified_type, comp_unit_die, type);\n+            add_name_attribute (type_die, \"decltype(nullptr)\");\n+            equate_type_number_to_die (type, type_die);\n+          }\n+      }\n+      return;\n+\n     case VOID_TYPE:\n     case INTEGER_TYPE:\n     case REAL_TYPE:"}, {"sha": "47883e258bb022d5b14917a1ccf75612f433f379", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -3077,7 +3077,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t it is invalid to pass a non-present argument on, even\n \t\t though there is no technical reason for this in gfortran.\n \t\t See Fortran 2003, Section 12.4.1.6 item (7)+(8).  */\n-\t      tree present, nullptr, type;\n+\t      tree present, null_ptr, type;\n \n \t      if (attr->allocatable\n \t\t  && (fsym == NULL || !fsym->attr.allocatable))\n@@ -3101,10 +3101,10 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t      present = fold_build2 (EQ_EXPR, boolean_type_node, present,\n \t\t\t\t     fold_convert (type, null_pointer_node));\n \t      type = TREE_TYPE (parmse.expr);\n-\t      nullptr = fold_build2 (EQ_EXPR, boolean_type_node, parmse.expr,\n-\t\t\t\t     fold_convert (type, null_pointer_node));\n+\t      null_ptr = fold_build2 (EQ_EXPR, boolean_type_node, parmse.expr,\n+\t\t\t\t      fold_convert (type, null_pointer_node));\n \t      cond = fold_build2 (TRUTH_ORIF_EXPR, boolean_type_node,\n-\t\t\t\t  present, nullptr);\n+\t\t\t\t  present, null_ptr);\n \t    }\n           else\n \t    {"}, {"sha": "6a771f4932b42d2360b0f6f4ad80d5a32bb205cd", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -493,6 +493,7 @@ plain_type_1 (tree type, int level)\n   switch (TREE_CODE (type))\n     {\n     case VOID_TYPE:\n+    case NULLPTR_TYPE:\n       return T_VOID;\n     case BOOLEAN_TYPE:\n     case INTEGER_TYPE:"}, {"sha": "8375fafc0c23c94a74585651fb4c35043ebff6f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -1,3 +1,31 @@\n+2010-05-06  Magnus Fromreide  <magfr@lysator.liu.se>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/nullptr01.C: New.\n+\t* g++.dg/cpp0x/nullptr02.C: New.\n+\t* g++.dg/cpp0x/nullptr03.C: New.\n+\t* g++.dg/cpp0x/nullptr04.C: New.\n+\t* g++.dg/cpp0x/nullptr05.C: New.\n+\t* g++.dg/cpp0x/nullptr06.C: New.\n+\t* g++.dg/cpp0x/nullptr07.C: New.\n+\t* g++.dg/cpp0x/nullptr08.C: New.\n+\t* g++.dg/cpp0x/nullptr09.C: New.\n+\t* g++.dg/cpp0x/nullptr10.C: New.\n+\t* g++.dg/cpp0x/nullptr11.C: New.\n+\t* g++.dg/cpp0x/nullptr12.C: New.\n+\t* g++.dg/cpp0x/nullptr13.C: New.\n+\t* g++.dg/cpp0x/nullptr14.C: New.\n+\t* g++.dg/cpp0x/nullptr15.C: New.\n+\t* g++.dg/cpp0x/nullptr16.C: New.\n+\t* g++.dg/cpp0x/nullptr17.C: New.\n+\t* g++.dg/cpp0x/nullptr18.C: New.\n+\t* g++.dg/cpp0x/nullptr19.C: New.\n+\t* g++.dg/cpp0x/nullptr20.C: New.\n+\t* g++.dg/cpp0x/nullptr21.C: New.\n+\t* g++.dg/cpp0x/nullptr22.C: New.\n+\t* g++.dg/debug/nullptr01.C: New.\n+\t* gcc.dg/Wcxx-compat-2.c: Test nullptr and constexpr.\n+\n 2010-05-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/40406"}, {"sha": "8de877bab50f8e8763d40c9d9f1439a21bb388cf", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr01.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr01.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test assignment to pointer\n+\n+char* const cp1 = nullptr;\n+char* const cp2 = __null;\n+char* const cp3 = 0;"}, {"sha": "2272152cf730313b5049dade47853bd78cd157f4", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr02.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr02.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test assignment to nullptr_t\n+\n+typedef decltype(nullptr) nullptr_t;\n+\n+const nullptr_t np1 = nullptr;\n+const nullptr_t np2 = __null;\n+const nullptr_t np3 = 0;"}, {"sha": "1c9e521bd889e4015bfdddc73c71785e8affc079", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr03.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr03.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test assignment to int\n+\n+const int n = nullptr;     // { dg-error \"cannot convert \" }"}, {"sha": "f092b70a46bbb23fdc6e78c5359f6c8829ac9514", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr04.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test cast to int\n+\n+const int n4 = static_cast<const int>(nullptr); // { dg-error \"invalid static_cast \" }\n+const short int n5 = reinterpret_cast<short int>(nullptr); // { dg-error \"loses precision\" }\n+const long int n6 = reinterpret_cast<long int>(nullptr);\n+const long int n7 = (long int)nullptr;"}, {"sha": "7c3f8b7093df96290a78ddfbe48fa9388bcdea2a", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr05.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr05.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr05.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr05.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test assignment to method pointer\n+\n+class F { };\n+\n+typedef void (F::*pmf)();\n+\n+const pmf pmf1 = nullptr;\n+const pmf pmf2 = __null;\n+const pmf pmf3 = 0;"}, {"sha": "5dea1fbf171eef4b9fe77811dc5b0e54d6d97c4c", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr06.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr06.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr06.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr06.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test compare to pointer\n+\n+#define assert_true(b) do { char c[2 * bool(b) - 1]; } while(0)\n+\n+char* const cp1 = nullptr;\n+\n+void fun()\n+{\n+  assert_true(cp1 == nullptr);\n+}"}, {"sha": "cebed8862dfdff07ca54de13a8f3d5998c7d1515", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr07.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr07.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr07.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr07.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test compare to int\n+\n+void fun()\n+{\n+  int n = 0;\n+  if( n == nullptr ); // { dg-error \"invalid operands of types \" }\n+  const int m = 1;\n+  if( m == nullptr ); // { dg-error \"invalid operands of types \" }\n+}"}, {"sha": "d7d9169f5a142cc3be8185cdc209c49192cf9f54", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr08.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr08.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr08.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr08.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test conversion to bool\n+\n+#define assert_true(b) do { char c[2 * bool(b) - 1]; } while(0)\n+\n+void fun()\n+{\n+  assert_true(nullptr ? false : true);\n+}"}, {"sha": "a42821cbfa6b00dddad1891732362ff446ac1c32", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr09.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr09.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr09.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr09.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test compare to literal 0\n+\n+void fun()\n+{\n+  if( nullptr == 0 );\n+}"}, {"sha": "cd131864a336cced13d3bb87995e0a715c3792d8", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr10.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr10.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test arithmetic operations\n+\n+void fun()\n+{\n+  nullptr = 0;         // { dg-error \"lvalue required as left operand\" }\n+  nullptr + 2;         // { dg-error \"invalid operands of types \" }\n+}"}, {"sha": "85402a1a2a379252ce4f0ae5717a39536effc147", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr11.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr11.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test relational operators\n+\n+#define assert_true(b) do { char c[2 * bool(b) - 1]; } while(0)\n+#define assert_false(b) do { char c[1 - 2 * bool(b)]; } while(0)\n+\n+void fun()\n+{\n+  assert_true(nullptr == nullptr);\n+  assert_false(nullptr != nullptr);\n+  assert_false(nullptr < nullptr);\n+  assert_false(nullptr > nullptr);\n+  assert_true(nullptr <= nullptr);\n+  assert_true(nullptr >= nullptr);\n+}"}, {"sha": "f68652c999e6024f8704ccf9321b11cc11e58978", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr12.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr12.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test sizeof\n+\n+static_assert(sizeof(nullptr) == sizeof(void*), \"sizeof(nullptr) is wrong\");"}, {"sha": "633e971feca30c9b30269f73e83f600ebe2a3288", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr13.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr13.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test typeid\n+\n+#include <typeinfo>\n+\n+void fun()\n+{\n+  typeid(nullptr);\n+}"}, {"sha": "0493bcca0067f48b3eee43a71c3d7eb7f5dc2bc1", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr14.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr14.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test overload preference char*/int\n+\n+template <typename T, typename U> struct tType_equal;\n+template <typename T> struct tType_equal<T, T> { typedef void type; };\n+\n+template <typename T, typename U>\n+inline typename tType_equal<T, U>::type\n+type_equal(U) { }\n+\n+char* f( char* );\n+int f( int );\n+long int f( long int );\n+\n+void test_f()\n+{\n+  // Overloading cases\n+  //\n+  type_equal<char*>(f(nullptr));\n+  type_equal<int>(f(0));\n+}"}, {"sha": "4572c535d4fa304ab20ced85ba73f06e29809277", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr15.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr15.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test template deduction\n+\n+template <typename T, typename U> struct tType_equal;\n+template <typename T> struct tType_equal<T, T> { typedef void type; };\n+\n+template <typename T, typename U>\n+inline typename tType_equal<T, U>::type\n+type_equal(U) { }\n+\n+template<typename T> T* g( T* t );\n+\n+void test_g()\n+{\n+  // Deduction to nullptr_t, no deduction to pointer type\n+  //\n+  g(nullptr);               // { dg-error \"no matching function for call to \" }\n+  type_equal<float*>(g((float*)nullptr));\n+}"}, {"sha": "7561b21cfe3628c412b90ca4b700ea28fb33767a", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr16.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr16.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test template deduction\n+\n+typedef decltype(nullptr) nullptr_t;\n+\n+template <typename T, typename U> struct tType_equal;\n+template <typename T> struct tType_equal<T, T> { typedef void type; };\n+\n+template <typename T, typename U>\n+inline typename tType_equal<T, U>::type\n+type_equal(U) { }\n+\n+template<typename T> T h( T t );\n+\n+void test_h()\n+{\n+  type_equal<int>(h(0));\n+  type_equal<nullptr_t>(h(nullptr));\n+  type_equal<float*>(h((float*)nullptr));\n+}"}, {"sha": "acedbae3787ef0e280bef01fbfef65a0a51a77fb", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr17.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr17.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test that bool is a better overload match than int\n+\n+template <typename T, typename U> struct tType_equal;\n+template <typename T> struct tType_equal<T, T> { typedef void type; };\n+\n+template <typename T, typename U>\n+inline typename tType_equal<T, U>::type\n+type_equal(U) { }\n+\n+int i( int );\n+long int i( long int );\n+bool i( bool );\n+\n+void test_i()\n+{\n+  // Overload to bool, not int\n+  type_equal<bool>(i(nullptr));\n+}"}, {"sha": "192b646efb451f470502b81d5c196bd8ea627584", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr18.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr18.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test overload of pointer versus bool when applied on a nullptr_t\n+\n+template <typename T, typename U> struct tType_equal;\n+template <typename T> struct tType_equal<T, T> { typedef void type; };\n+\n+template <typename T, typename U>\n+inline typename tType_equal<T, U>::type\n+type_equal(U) { }\n+\n+char* j( char* );\n+bool j(  bool );\n+\n+void test_j()\n+{\n+  type_equal<char*>(j(nullptr));\n+}"}, {"sha": "7eb00bb3f7ee6eb164cf2961f90ff80f92846c85", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr19.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr19.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test overload of pointer versus nullptr_t when applied on a literal 0/__null\n+\n+typedef decltype(nullptr) nullptr_t;\n+\n+char* k( char* );\t/* { dg-message \"note\" } { dg-message \"note\" } */\n+nullptr_t k( nullptr_t ); /* { dg-message \"note\" } { dg-message \"note\" } */\n+\n+void test_k()\n+{\n+  k(0); /* { dg-error \"is ambiguous\" } */\n+  k(__null); /* { dg-error \"is ambiguous\" } */\n+}"}, {"sha": "b7457ca124a911ead02bf4b340c4794c8a4e64f6", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr20.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr20.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test passing to ellipisis\n+\n+#include <cstdio>\n+#include <cstring>\n+\n+int main()\n+{\n+  char buf1[64];\n+  char buf2[64];\n+\n+  std::snprintf(buf1, sizeof(buf1), \"%p\", (void*)0);\n+  std::snprintf(buf2, sizeof(buf2), \"%p\", nullptr);\n+  return std::strcmp(buf1, buf2) != 0;\n+}"}, {"sha": "84c34dd1e0a19c646531301e1bff955eca4d74d5", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr21.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr21.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do run }\n+// { dg-options \"-std=c++0x\" }\n+\n+// Test throw and catch\n+\n+#include <cstdio>\n+\n+typedef decltype(nullptr) nullptr_t;\n+\n+int main()\n+{\n+  try {\n+    throw nullptr;\n+  } catch (void*) {\n+    printf(\"Test 1 Fail\");\n+  } catch (bool) {\n+    printf(\"Test 1 Fail\");\n+  } catch (int) {\n+    printf(\"Test 1 Fail\");\n+  } catch (long int) {\n+    printf(\"Test 1 Fail\");\n+  } catch (nullptr_t) {\n+    printf(\"Test 1 OK\");\n+  } catch (...) {\n+    printf(\"Test 1 Fail\");\n+  }  // { dg-output \"Test 1 OK\" }\n+}"}, {"sha": "13cb8e3aab1e8a00e02639f0ee24795a9c347c91", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr22.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr22.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x -Wall -Wformat=2 -Wstrict-null-sentinel\" }\n+\n+// Test various warnings\n+\n+void f1(const char*, ...) __attribute__((format(printf, 1, 2)));\n+void f2(const char*) __attribute__((nonnull));\n+void f3(const char*, ...) __attribute__((sentinel));\n+\n+void f()\n+{\n+  f1(\"%p\", nullptr);\n+  f2(nullptr); // { dg-warning \"null argument where non-null required \" }\n+  f3(\"x\", \"y\", __null); // { dg-warning \"missing sentinel in function call\" }\n+  f3(\"x\", \"y\", nullptr);\n+}"}, {"sha": "5ad9b61b83a1108ea70d5bb74a53e50d50077cc5", "filename": "gcc/testsuite/g++.dg/cpp0x/warn_cxx0x.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fwarn_cxx0x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fwarn_cxx0x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fwarn_cxx0x.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -1,7 +1,9 @@\n // { dg-options \"-std=gnu++98 -Wc++0x-compat\" }\n int static_assert; // { dg-warning \"will become a keyword\" }\n+int nullptr; // { dg-warning \"will become a keyword\" }\n \n void foo()\n {\n   static_assert = 5;\n+  nullptr = 5;\n }"}, {"sha": "ab08588f2ba6b5835af47869c093bb1598de1740", "filename": "gcc/testsuite/g++.dg/debug/nullptr01.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnullptr01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnullptr01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fnullptr01.C?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -0,0 +1,15 @@\n+// Test that debugging backends don't crash on NULLPTR_TYPE.\n+// { dg-options \"-std=c++0x\" }\n+\n+typedef decltype(nullptr) nullptr_t;\n+\n+nullptr_t np1;\n+void f (nullptr_t) { }\n+template <class T> struct A { };\n+template <class T> nullptr_t g(T t);\n+template <> nullptr_t g(A<nullptr_t>)\n+{\n+  nullptr_t local;\n+}\n+// { dg-final { scan-assembler \"_Z1fDn\" } }\n+// { dg-final { scan-assembler \"_Z1gI1AIDnEES1_T_\" } }"}, {"sha": "4578bece109dc9e1dfe0fa3e00b21e78de1d27d2", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-2.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -7,6 +7,7 @@ int char16_t;\t\t\t/* { dg-warning \"5:keyword\" } */\n int char32_t;\t\t\t/* { dg-warning \"5:keyword\" } */\n int class;\t\t\t/* { dg-warning \"5:keyword\" } */\n int const_cast;\t\t\t/* { dg-warning \"5:keyword\" } */\n+int constexpr;\t\t\t/* { dg-warning \"5:keyword\" } */\n int decltype;\t\t\t/* { dg-warning \"5:keyword\" } */\n int delete;\t\t\t/* { dg-warning \"5:keyword\" } */\n int dynamic_cast;\t\t/* { dg-warning \"5:keyword\" } */\n@@ -17,6 +18,7 @@ int friend;\t\t\t/* { dg-warning \"5:keyword\" } */\n int mutable;\t\t\t/* { dg-warning \"5:keyword\" } */\n int namespace;\t\t\t/* { dg-warning \"5:keyword\" } */\n int new;\t\t\t/* { dg-warning \"5:keyword\" } */\n+int nullptr;\t\t\t/* { dg-warning \"5:keyword\" } */\n int operator;\t\t\t/* { dg-warning \"5:keyword\" } */\n int private;\t\t\t/* { dg-warning \"5:keyword\" } */\n int protected;\t\t\t/* { dg-warning \"5:keyword\" } */"}, {"sha": "4414e04792f7d89f5a0eafda1dbf47983b4e528d", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -1,3 +1,10 @@\n+2010-05-06  Magnus Fromreide  <magfr@lysator.liu.se>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-demangle.c (cplus_demangle_builtin_types): Add nullptr.\n+\t(cplus_demangle_type): Handle nullptr.\n+\t* testsuite/demangle-expected: Test it.\n+\n 2010-04-23  Pedro Alves  <pedro@codesourcery.com>\n \n \t* lbasename.c (lbasename): Split into ..."}, {"sha": "6db1f78be3c8653556e70e324bc8929a1bfbdd86", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -1987,6 +1987,8 @@ cplus_demangle_builtin_types[D_BUILTIN_TYPE_COUNT] =\n   /* 29 */ { NL (\"half\"),\tNL (\"half\"),\t\tD_PRINT_FLOAT },\n   /* 30 */ { NL (\"char16_t\"),\tNL (\"char16_t\"),\tD_PRINT_DEFAULT },\n   /* 31 */ { NL (\"char32_t\"),\tNL (\"char32_t\"),\tD_PRINT_DEFAULT },\n+  /* 32 */ { NL (\"decltype(nullptr)\"),\tNL (\"decltype(nullptr)\"),\n+\t     D_PRINT_DEFAULT },\n };\n \n CP_STATIC_IF_GLIBCPP_V3\n@@ -2221,6 +2223,12 @@ cplus_demangle_type (struct d_info *di)\n \t  ret = d_vector_type (di);\n \t  break;\n \n+        case 'n':\n+          /* decltype(nullptr) */\n+\t  ret = d_make_builtin_type (di, &cplus_demangle_builtin_types[32]);\n+\t  di->expansion += ret->u.s_builtin.type->len;\n+\t  break;\n+\n \tdefault:\n \t  return NULL;\n \t}"}, {"sha": "eac054ed1e290613219e7b771d6172df7cc14dcd", "filename": "libiberty/cp-demangle.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/libiberty%2Fcp-demangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/libiberty%2Fcp-demangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.h?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -147,7 +147,7 @@ struct d_info\n extern const struct demangle_operator_info cplus_demangle_operators[];\n #endif\n \n-#define D_BUILTIN_TYPE_COUNT (32)\n+#define D_BUILTIN_TYPE_COUNT (33)\n \n CP_STATIC_IF_GLIBCPP_V3\n const struct demangle_builtin_type_info"}, {"sha": "a3331c45ee8374192bd8e59b738fd0f9cd49841f", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -3938,6 +3938,9 @@ decltype ((operator+)({parm#1}, {parm#1})) f<A>(A)\n --format=gnu-v3\n _Z1hI1AEDTcldtfp_miEET_\n decltype (({parm#1}.(operator-))()) h<A>(A)\n+--format=gnu-v3\n+_Z1fDn\n+f(decltype(nullptr))\n #\n # Ada (GNAT) tests.\n #"}, {"sha": "fe4b74aff560dc36ad115f2f932122a97aac4afd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -1,3 +1,7 @@\n+2010-05-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver: Add typeinfo for decltype(nullptr).\n+\n 2010-05-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/basic_string.h: Escape class names in doxygen docs."}, {"sha": "3552d59373544612c0e283e24705d87a6bd406ee", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2101daa9fd45e83de153275c7650950f1b7de/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2101daa9fd45e83de153275c7650950f1b7de/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=14c2101daa9fd45e83de153275c7650950f1b7de", "patch": "@@ -1307,12 +1307,9 @@ CXXABI_1.3.3 {\n \n CXXABI_1.3.4 {\n \n-    # typeinfo for decimal floating point types\n-    _ZTID[fde];\n-    _ZTIPD[fde];\n-    _ZTIPKD[fde];\n-    _ZTID[fde];\n-    _ZTIPD[fde];\n-    _ZTIPKD[fde];\n+    # typeinfo for decimal floating point types and decltype(nullptr)\n+    _ZTID[fden];\n+    _ZTIPD[fden];\n+    _ZTIPKD[fden];\n \n } CXXABI_1.3.3;"}]}