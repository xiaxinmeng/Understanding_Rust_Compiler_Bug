{"sha": "4f442a3bcb99205e0fe7863c3a6dde970134a64a", "node_id": "C_kwDOANBUbNoAKDRmNDQyYTNiY2I5OTIwNWUwZmU3ODYzYzNhNmRkZTk3MDEzNGE2NGE", "commit": {"author": {"name": "Cui,Lili", "email": "lili.cui@intel.com", "date": "2021-11-04T02:38:56Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-11T01:28:23Z"}, "message": "x86: Update -mtune=alderlake\n\nUpdate mtune for alderlake, Alder Lake Intel Hybrid Technology will not support\nIntel\u00ae AVX-512. ISA features such as Intel\u00ae AVX, AVX-VNNI, Intel\u00ae AVX2, and\nUMONITOR/UMWAIT/TPAUSE are supported.\n\ngcc/ChangeLog\n\n\t* config/i386/i386-options.c (m_CORE_AVX2): Remove Alderlake\n\tfrom m_CORE_AVX2.\n\t(processor_cost_table): Use alderlake_cost for Alderlake.\n\t* config/i386/i386.c (ix86_sched_init_global): Handle Alderlake.\n\t* config/i386/x86-tune-costs.h (struct processor_costs): Add alderlake\n\tcost.\n\t* config/i386/x86-tune-sched.c (ix86_issue_rate): Change Alderlake\n\tissue rate to 4.\n\t(ix86_adjust_cost): Handle Alderlake.\n\t* config/i386/x86-tune.def (X86_TUNE_SCHEDULE): Enable for Alderlake.\n\t(X86_TUNE_PARTIAL_REG_DEPENDENCY): Likewise.\n\t(X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY): Likewise.\n\t(X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY): Likewise.\n\t(X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY): Likewise.\n\t(X86_TUNE_MEMORY_MISMATCH_STALL): Likewise.\n\t(X86_TUNE_USE_LEAVE): Likewise.\n\t(X86_TUNE_PUSH_MEMORY): Likewise.\n\t(X86_TUNE_USE_INCDEC): Likewise.\n\t(X86_TUNE_INTEGER_DFMODE_MOVES): Likewise.\n\t(X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES): Likewise.\n\t(X86_TUNE_USE_SAHF): Likewise.\n\t(X86_TUNE_USE_BT): Likewise.\n\t(X86_TUNE_AVOID_FALSE_DEP_FOR_BMI): Likewise.\n\t(X86_TUNE_ONE_IF_CONV_INSN): Likewise.\n\t(X86_TUNE_AVOID_MFENCE): Likewise.\n\t(X86_TUNE_USE_SIMODE_FIOP): Likewise.\n\t(X86_TUNE_EXT_80387_CONSTANTS): Likewise.\n\t(X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL): Likewise.\n\t(X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL): Likewise.\n\t(X86_TUNE_SSE_TYPELESS_STORES): Likewise.\n\t(X86_TUNE_SSE_LOAD0_BY_PXOR): Likewise.\n\t(X86_TUNE_AVOID_4BYTE_PREFIXES): Likewise.\n\t(X86_TUNE_USE_GATHER): Disable for Alderlake.\n\t(X86_TUNE_AVX256_MOVE_BY_PIECES): Likewise.\n\t(X86_TUNE_AVX256_STORE_BY_PIECES): Likewise.", "tree": {"sha": "3bda4b3a30ffec2bfede5fb3e37fd57f01e63bac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bda4b3a30ffec2bfede5fb3e37fd57f01e63bac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f442a3bcb99205e0fe7863c3a6dde970134a64a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f442a3bcb99205e0fe7863c3a6dde970134a64a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f442a3bcb99205e0fe7863c3a6dde970134a64a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f442a3bcb99205e0fe7863c3a6dde970134a64a/comments", "author": {"login": "cuilili8868", "id": 54013017, "node_id": "MDQ6VXNlcjU0MDEzMDE3", "avatar_url": "https://avatars.githubusercontent.com/u/54013017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuilili8868", "html_url": "https://github.com/cuilili8868", "followers_url": "https://api.github.com/users/cuilili8868/followers", "following_url": "https://api.github.com/users/cuilili8868/following{/other_user}", "gists_url": "https://api.github.com/users/cuilili8868/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuilili8868/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuilili8868/subscriptions", "organizations_url": "https://api.github.com/users/cuilili8868/orgs", "repos_url": "https://api.github.com/users/cuilili8868/repos", "events_url": "https://api.github.com/users/cuilili8868/events{/privacy}", "received_events_url": "https://api.github.com/users/cuilili8868/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e166cada0813f8b382bacb7f01e1d8d235bf3b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e166cada0813f8b382bacb7f01e1d8d235bf3b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e166cada0813f8b382bacb7f01e1d8d235bf3b0f"}], "stats": {"total": 185, "additions": 155, "deletions": 30}, "files": [{"sha": "a8cc0664f11cb2f20eb967f7409e0620e638a93f", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f442a3bcb99205e0fe7863c3a6dde970134a64a/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f442a3bcb99205e0fe7863c3a6dde970134a64a/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=4f442a3bcb99205e0fe7863c3a6dde970134a64a", "patch": "@@ -131,7 +131,7 @@ along with GCC; see the file COPYING3.  If not see\n \t\t       | m_ICELAKE_CLIENT | m_ICELAKE_SERVER | m_CASCADELAKE \\\n \t\t       | m_TIGERLAKE | m_COOPERLAKE | m_SAPPHIRERAPIDS \\\n \t\t       | m_ROCKETLAKE)\n-#define m_CORE_AVX2 (m_HASWELL | m_SKYLAKE | m_ALDERLAKE | m_CORE_AVX512)\n+#define m_CORE_AVX2 (m_HASWELL | m_SKYLAKE | m_CORE_AVX512)\n #define m_CORE_ALL (m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE | m_CORE_AVX2)\n #define m_GOLDMONT (HOST_WIDE_INT_1U<<PROCESSOR_GOLDMONT)\n #define m_GOLDMONT_PLUS (HOST_WIDE_INT_1U<<PROCESSOR_GOLDMONT_PLUS)\n@@ -736,7 +736,7 @@ static const struct processor_costs *processor_cost_table[] =\n   &icelake_cost,\n   &skylake_cost,\n   &icelake_cost,\n-  &icelake_cost,\n+  &alderlake_cost,\n   &icelake_cost,\n   &intel_cost,\n   &geode_cost,"}, {"sha": "73c4d5115bbe9ee38531d246921f1e91a2f69e87", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f442a3bcb99205e0fe7863c3a6dde970134a64a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f442a3bcb99205e0fe7863c3a6dde970134a64a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4f442a3bcb99205e0fe7863c3a6dde970134a64a", "patch": "@@ -17014,6 +17014,7 @@ ix86_sched_init_global (FILE *, int, int)\n     case PROCESSOR_SANDYBRIDGE:\n     case PROCESSOR_HASWELL:\n     case PROCESSOR_TREMONT:\n+    case PROCESSOR_ALDERLAKE:\n     case PROCESSOR_GENERIC:\n       /* Do not perform multipass scheduling for pre-reload schedule\n          to save compile time.  */"}, {"sha": "dd5563d2e641e078853cc20bff6c82c8bd511d92", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f442a3bcb99205e0fe7863c3a6dde970134a64a/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f442a3bcb99205e0fe7863c3a6dde970134a64a/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=4f442a3bcb99205e0fe7863c3a6dde970134a64a", "patch": "@@ -2070,6 +2070,126 @@ struct processor_costs icelake_cost = {\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n+/* alderlake_cost should produce code tuned for alderlake family of CPUs.  */\n+static stringop_algs alderlake_memcpy[2] = {\n+  {libcall,\n+   {{256, rep_prefix_1_byte, true},\n+    {256, loop, false},\n+    {-1, libcall, false}}},\n+  {libcall,\n+   {{256, rep_prefix_1_byte, true},\n+    {256, loop, false},\n+    {-1, libcall, false}}}};\n+static stringop_algs alderlake_memset[2] = {\n+  {libcall,\n+   {{256, rep_prefix_1_byte, true},\n+    {256, loop, false},\n+    {-1, libcall, false}}},\n+  {libcall,\n+   {{256, rep_prefix_1_byte, true},\n+    {256, loop, false},\n+    {-1, libcall, false}}}};\n+static const\n+struct processor_costs alderlake_cost = {\n+  {\n+  /* Start of register allocator costs.  integer->integer move cost is 2.  */\n+  6,\t\t\t\t     /* cost for loading QImode using movzbl */\n+  {6, 6, 6},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {6, 6, 6},\t\t\t\t/* cost of storing integer registers */\n+  4,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {6, 6, 12},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  {6, 6, 12},\t\t\t\t/* cost of storing fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  2,\t\t\t\t\t/* cost of moving MMX register */\n+  {6, 6},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {6, 6},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  2, 3, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in 32,64,128,256 and 512-bit */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in 32,64,128,256 and 512-bit */\n+  6, 6,\t\t\t\t/* SSE->integer and integer->SSE moves */\n+  6, 6,\t\t\t\t/* mask->integer and integer->mask moves */\n+  {6, 6, 6},\t\t\t\t/* cost of loading mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  {6, 6, 6},\t\t\t/* cost if storing mask register\n+\t\t\t\t\t   in QImode, HImode, SImode.  */\n+  2,\t\t\t\t\t/* cost of moving mask register.  */\n+  /* End of register allocator costs.  */\n+  },\n+\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n+  COSTS_N_INSNS (1) + 1,\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n+  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t HI */\n+   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t SI */\n+   COSTS_N_INSNS (4),\t\t\t/*\t\t\t\t DI */\n+   COSTS_N_INSNS (4)},\t\t\t/*\t\t\t      other */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {COSTS_N_INSNS (16),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (22),\t\t\t/*\t\t\t    HI */\n+   COSTS_N_INSNS (30),\t\t\t/*\t\t\t    SI */\n+   COSTS_N_INSNS (74),\t\t\t/*\t\t\t    DI */\n+   COSTS_N_INSNS (74)},\t\t\t/*\t\t\t    other */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx */\n+  8,\t\t\t\t\t/* \"large\" insn */\n+  17,\t\t\t\t\t/* MOVE_RATIO */\n+  17,\t\t\t\t\t/* CLEAR_RATIO */\n+  {6, 6, 6},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {6, 6, 6},\t\t\t\t/* cost of storing integer registers */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of loading SSE register\n+\t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of storing SSE register\n+\t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of unaligned loads.  */\n+  {6, 6, 6, 10, 15},\t\t\t/* cost of unaligned storess.  */\n+  2, 3, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n+  6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n+  18, 6,\t\t\t\t/* Gather load static, per_elt.  */\n+  18, 6,\t\t\t\t/* Gather store static, per_elt.  */\n+  32,\t\t\t\t\t/* size of l1 cache.  */\n+  512,\t\t\t\t\t/* size of l2 cache.  */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  6,\t\t\t\t\t/* number of parallel prefetches */\n+  3,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (17),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (14),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (1),\t\t\t/* cost of cheap SSE instruction.  */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FMA SS instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FMA SD instruction.  */\n+  COSTS_N_INSNS (13),\t\t\t/* cost of DIVSS instruction.  */\n+  COSTS_N_INSNS (17),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (14),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (18),\t\t\t/* cost of SQRTSD instruction.  */\n+  1, 4, 3, 3,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n+  alderlake_memcpy,\n+  alderlake_memset,\n+  COSTS_N_INSNS (4),\t\t\t/* cond_taken_branch_cost.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n+};\n+\n   /* BTVER1 has optimized REP instruction for medium sized blocks, but for\n      very small blocks it is better to use loop. For large blocks, libcall can\n      do nontemporary accesses and beat inline considerably.  */"}, {"sha": "0c149a09531e6b4948ed67cdf6a6d91b37dca7e4", "filename": "gcc/config/i386/x86-tune-sched.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f442a3bcb99205e0fe7863c3a6dde970134a64a/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f442a3bcb99205e0fe7863c3a6dde970134a64a/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c?ref=4f442a3bcb99205e0fe7863c3a6dde970134a64a", "patch": "@@ -72,6 +72,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_SANDYBRIDGE:\n     case PROCESSOR_HASWELL:\n     case PROCESSOR_TREMONT:\n+    case PROCESSOR_ALDERLAKE:\n     case PROCESSOR_GENERIC:\n       return 4;\n \n@@ -431,6 +432,7 @@ ix86_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n     case PROCESSOR_SANDYBRIDGE:\n     case PROCESSOR_HASWELL:\n     case PROCESSOR_TREMONT:\n+    case PROCESSOR_ALDERLAKE:\n     case PROCESSOR_GENERIC:\n       /* Stack engine allows to execute push&pop instructions in parall.  */\n       if ((insn_type == TYPE_PUSH || insn_type == TYPE_POP)"}, {"sha": "4ae0b5698411d777df28ccd0ae7559b78adb0294", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f442a3bcb99205e0fe7863c3a6dde970134a64a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f442a3bcb99205e0fe7863c3a6dde970134a64a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=4f442a3bcb99205e0fe7863c3a6dde970134a64a", "patch": "@@ -42,7 +42,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n           m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_INTEL | m_KNL | m_KNM | m_K6_GEODE | m_AMD_MULTIPLE | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC)\n+\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE |m_GENERIC)\n \n /* X86_TUNE_PARTIAL_REG_DEPENDENCY: Enable more register renaming\n    on modern chips.  Preffer stores affecting whole integer register\n@@ -51,7 +51,7 @@ DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n           m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE | m_CORE_AVX2\n \t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_INTEL\n-\t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_TREMONT\n+\t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_TREMONT | m_ALDERLAKE\n \t  | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY: This knob promotes all store\n@@ -62,22 +62,22 @@ DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n    that can be partly masked by careful scheduling of moves.  */\n DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY, \"sse_partial_reg_dependency\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n-\t  | m_BDVER | m_ZNVER | m_TREMONT | m_GENERIC)\n+\t  | m_BDVER | m_ZNVER | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY: This knob avoids\n    partial write to the destination in scalar SSE conversion from FP\n    to FP.  */\n DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY,\n \t  \"sse_partial_reg_fp_converts_dependency\",\n \t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n-\t  | m_BDVER | m_ZNVER | m_GENERIC)\n+\t  | m_BDVER | m_ZNVER | m_ALDERLAKE| m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY: This knob avoids partial\n    write to the destination in scalar SSE conversion from integer to FP.  */\n DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY,\n \t  \"sse_partial_reg_converts_dependency\",\n \t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n-\t  | m_BDVER | m_ZNVER | m_GENERIC)\n+\t  | m_BDVER | m_ZNVER | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_SSE_SPLIT_REGS: Set for machines where the type and dependencies\n    are resolved on SSE register parts instead of whole registers, so we may\n@@ -103,14 +103,14 @@ DEF_TUNE (X86_TUNE_MOVX, \"movx\",\n           m_PPRO | m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n \t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_KNL | m_KNM | m_INTEL\n \t  | m_GOLDMONT_PLUS | m_GEODE | m_AMD_MULTIPLE\n-\t  | m_CORE_AVX2 | m_TREMONT | m_GENERIC)\n+\t  | m_CORE_AVX2 | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_MEMORY_MISMATCH_STALL: Avoid partial stores that are followed by\n    full sized loads.  */\n DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\",\n           m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_INTEL\n \t  | m_KNL | m_KNM | m_GOLDMONT | m_GOLDMONT_PLUS | m_AMD_MULTIPLE\n-\t  | m_TREMONT | m_GENERIC)\n+\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_32: Fuse compare with a subsequent\n    conditional jump instruction for 32 bit TARGET.  */\n@@ -166,14 +166,14 @@ DEF_TUNE (X86_TUNE_EPILOGUE_USING_MOVE, \"epilogue_using_move\",\n /* X86_TUNE_USE_LEAVE: Use \"leave\" instruction in epilogues where it fits.  */\n DEF_TUNE (X86_TUNE_USE_LEAVE, \"use_leave\",\n \t  m_386 | m_CORE_ALL | m_K6_GEODE | m_AMD_MULTIPLE | m_TREMONT\n-\t  | m_GENERIC)\n+\t  | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_PUSH_MEMORY: Enable generation of \"push mem\" instructions.\n    Some chips, like 486 and Pentium works faster with separate load\n    and push instructions.  */\n DEF_TUNE (X86_TUNE_PUSH_MEMORY, \"push_memory\",\n           m_386 | m_P4_NOCONA | m_CORE_ALL | m_K6_GEODE | m_AMD_MULTIPLE\n-          | m_TREMONT | m_GENERIC)\n+\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_SINGLE_PUSH: Enable if single push insn is preferred\n    over esp subtraction.  */\n@@ -243,14 +243,14 @@ DEF_TUNE (X86_TUNE_READ_MODIFY, \"read_modify\", ~(m_PENT | m_LAKEMONT | m_PPRO))\n DEF_TUNE (X86_TUNE_USE_INCDEC, \"use_incdec\",\n           ~(m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n \t    | m_BONNELL | m_SILVERMONT | m_INTEL |  m_KNL | m_KNM | m_GOLDMONT\n-\t    | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC))\n+\t    | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC))\n \n /* X86_TUNE_INTEGER_DFMODE_MOVES: Enable if integer moves are preferred\n    for DFmode copies */\n DEF_TUNE (X86_TUNE_INTEGER_DFMODE_MOVES, \"integer_dfmode_moves\",\n           ~(m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t    | m_KNL | m_KNM | m_INTEL | m_GEODE | m_AMD_MULTIPLE | m_GOLDMONT\n-\t    | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC))\n+\t    | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC))\n \n /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n    will impact LEA instruction selection. */\n@@ -298,14 +298,14 @@ DEF_TUNE (X86_TUNE_PREFER_KNOWN_REP_MOVSB_STOSB,\n DEF_TUNE (X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,\n \t  \"misaligned_move_string_pro_epilogues\",\n \t  m_386 | m_486 | m_CORE_ALL | m_AMD_MULTIPLE | m_TREMONT\n-\t  | m_GENERIC)\n+\t  | m_ALDERLAKE |m_GENERIC)\n \n /* X86_TUNE_USE_SAHF: Controls use of SAHF.  */\n DEF_TUNE (X86_TUNE_USE_SAHF, \"use_sahf\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER\n \t  | m_BTVER | m_ZNVER | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT\n-\t  | m_GENERIC)\n+\t  | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_USE_CLTD: Controls use of CLTD and CTQO instructions.  */\n DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\",\n@@ -316,12 +316,12 @@ DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\",\n DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\",\n           m_CORE_ALL | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n \t  | m_LAKEMONT | m_AMD_MULTIPLE | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_TREMONT | m_GENERIC)\n+\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_AVOID_FALSE_DEP_FOR_BMI: Avoid false dependency\n    for bit-manipulation instructions.  */\n DEF_TUNE (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI, \"avoid_false_dep_for_bmi\",\n-\t  m_SANDYBRIDGE | m_CORE_AVX2 | m_TREMONT | m_GENERIC)\n+\t  m_SANDYBRIDGE | m_CORE_AVX2 | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_ADJUST_UNROLL: This enables adjusting the unroll factor based\n    on hardware capabilities. Bdver3 hardware has a loop buffer which makes\n@@ -333,11 +333,11 @@ DEF_TUNE (X86_TUNE_ADJUST_UNROLL, \"adjust_unroll_factor\", m_BDVER3 | m_BDVER4)\n    if-converted sequence to one.  */\n DEF_TUNE (X86_TUNE_ONE_IF_CONV_INSN, \"one_if_conv_insn\",\n \t  m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_CORE_ALL | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC)\n+\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_AVOID_MFENCE: Use lock prefixed instructions instead of mfence.  */\n DEF_TUNE (X86_TUNE_AVOID_MFENCE, \"avoid_mfence\",\n-\t m_CORE_ALL | m_BDVER | m_ZNVER | m_TREMONT | m_GENERIC)\n+\t m_CORE_ALL | m_BDVER | m_ZNVER | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_EXPAND_ABS: This enables a new abs pattern by\n    generating instructions for abs (x) = (((signed) x >> (W-1) ^ x) -\n@@ -361,7 +361,8 @@ DEF_TUNE (X86_TUNE_USE_HIMODE_FIOP, \"use_himode_fiop\",\n DEF_TUNE (X86_TUNE_USE_SIMODE_FIOP, \"use_simode_fiop\",\n           ~(m_PENT | m_LAKEMONT | m_PPRO | m_CORE_ALL | m_BONNELL\n \t    | m_SILVERMONT | m_KNL | m_KNM | m_INTEL | m_AMD_MULTIPLE\n-\t    | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC))\n+\t    | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE\n+\t    | m_GENERIC))\n \n /* X86_TUNE_USE_FFREEP: Use freep instruction instead of fstp.  */\n DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\", m_AMD_MULTIPLE)\n@@ -370,7 +371,7 @@ DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\", m_AMD_MULTIPLE)\n DEF_TUNE (X86_TUNE_EXT_80387_CONSTANTS, \"ext_80387_constants\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_ATHLON_K8 | m_GOLDMONT\n-\t  | m_GOLDMONT_PLUS | m_TREMONT | m_GENERIC)\n+\t  | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /*****************************************************************************/\n /* SSE instruction selection tuning                                          */\n@@ -385,15 +386,15 @@ DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\",\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_SILVERMONT | m_KNL | m_KNM\n-\t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_TREMONT | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER | m_GENERIC)\n+\t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE\n+\t  | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER | m_GENERIC)\n \n /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores\n    instead of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_SILVERMONT | m_KNL | m_KNM\n \t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_TREMONT | m_BDVER | m_ZNVER | m_GENERIC)\n+\t  | m_TREMONT | m_ALDERLAKE | m_BDVER | m_ZNVER | m_GENERIC)\n \n /* X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL: Use packed single\n    precision 128bit instructions instead of double where possible.   */\n@@ -402,13 +403,13 @@ DEF_TUNE (X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL, \"sse_packed_single_insn_optim\n \n /* X86_TUNE_SSE_TYPELESS_STORES: Always movaps/movups for 128bit stores.   */\n DEF_TUNE (X86_TUNE_SSE_TYPELESS_STORES, \"sse_typeless_stores\",\n-\t  m_AMD_MULTIPLE | m_CORE_ALL | m_TREMONT | m_GENERIC)\n+\t  m_AMD_MULTIPLE | m_CORE_ALL | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_SSE_LOAD0_BY_PXOR: Always use pxor to load0 as opposed to\n    xorps/xorpd and other variants.  */\n DEF_TUNE (X86_TUNE_SSE_LOAD0_BY_PXOR, \"sse_load0_by_pxor\",\n \t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BDVER | m_BTVER | m_ZNVER\n-\t  | m_TREMONT | m_GENERIC)\n+\t  | m_TREMONT | m_ALDERLAKE | m_GENERIC)\n \n /* X86_TUNE_INTER_UNIT_MOVES_TO_VEC: Enable moves in from integer\n    to SSE registers.  If disabled, the moves will be done by storing\n@@ -454,11 +455,12 @@ DEF_TUNE (X86_TUNE_SLOW_PSHUFB, \"slow_pshufb\",\n \n /* X86_TUNE_AVOID_4BYTE_PREFIXES: Avoid instructions requiring 4+ bytes of prefixes.  */\n DEF_TUNE (X86_TUNE_AVOID_4BYTE_PREFIXES, \"avoid_4byte_prefixes\",\n-\t  m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_INTEL)\n+\t  m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT | m_ALDERLAKE\n+\t  | m_INTEL)\n \n /* X86_TUNE_USE_GATHER: Use gather instructions.  */\n DEF_TUNE (X86_TUNE_USE_GATHER, \"use_gather\",\n-\t  ~(m_ZNVER1 | m_ZNVER2 | m_GENERIC))\n+\t  ~(m_ZNVER1 | m_ZNVER2 | m_GENERIC | m_ALDERLAKE))\n \n /* X86_TUNE_AVOID_128FMA_CHAINS: Avoid creating loops with tight 128bit or\n    smaller FMA chain.  */\n@@ -503,12 +505,12 @@ DEF_TUNE (X86_TUNE_AVX256_OPTIMAL, \"avx256_optimal\", m_CORE_AVX512)\n /* X86_TUNE_AVX256_MOVE_BY_PIECES: Optimize move_by_pieces with 256-bit\n    AVX instructions.  */\n DEF_TUNE (X86_TUNE_AVX256_MOVE_BY_PIECES, \"avx256_move_by_pieces\",\n-\t  m_ALDERLAKE | m_CORE_AVX512)\n+\t  m_CORE_AVX512)\n \n /* X86_TUNE_AVX256_STORE_BY_PIECES: Optimize store_by_pieces with 256-bit\n    AVX instructions.  */\n DEF_TUNE (X86_TUNE_AVX256_STORE_BY_PIECES, \"avx256_store_by_pieces\",\n-\t  m_ALDERLAKE | m_CORE_AVX512)\n+\t  m_CORE_AVX512)\n \n /*****************************************************************************/\n /*****************************************************************************/"}]}