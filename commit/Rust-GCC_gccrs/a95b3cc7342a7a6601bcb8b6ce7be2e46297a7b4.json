{"sha": "a95b3cc7342a7a6601bcb8b6ce7be2e46297a7b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk1YjNjYzczNDJhN2E2NjAxYmNiOGI2Y2U3YmUyZTQ2Mjk3YTdiNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-06-11T10:04:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-06-11T10:04:23Z"}, "message": "alias.c (aliases_everything_p): Remove.\n\n2012-06-11  Richard Guenther  <rguenther@suse.de>\n\n\t* alias.c (aliases_everything_p): Remove.\n\t(DIFFERENT_ALIAS_SETS_P): Likewise.\n\t(true_dependence_1): Use mems_in_disjoint_alias_sets_p directly.\n\tDo not use aliases_everything_p or special-case ANDs.  Do not\n\tspecial-case BLKmode moves.\n\t(may_alias_p): Likewise.  Handle BLKmode similar like everywhere\n\t- for SCATCH only.\n\nFrom-SVN: r188384", "tree": {"sha": "a2bb7bc36c7d518fcbfbafcfb6fb67f770ec3144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2bb7bc36c7d518fcbfbafcfb6fb67f770ec3144"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a95b3cc7342a7a6601bcb8b6ce7be2e46297a7b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95b3cc7342a7a6601bcb8b6ce7be2e46297a7b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a95b3cc7342a7a6601bcb8b6ce7be2e46297a7b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95b3cc7342a7a6601bcb8b6ce7be2e46297a7b4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f54ee9801da8ab98c156f16770984b8eaebf1b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54ee9801da8ab98c156f16770984b8eaebf1b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f54ee9801da8ab98c156f16770984b8eaebf1b42"}], "stats": {"total": 63, "additions": 16, "deletions": 47}, "files": [{"sha": "d3127b00bb08d53a82b8f9c302519022590ff431", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95b3cc7342a7a6601bcb8b6ce7be2e46297a7b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95b3cc7342a7a6601bcb8b6ce7be2e46297a7b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a95b3cc7342a7a6601bcb8b6ce7be2e46297a7b4", "patch": "@@ -1,3 +1,13 @@\n+2012-06-11  Richard Guenther  <rguenther@suse.de>\n+\n+\t* alias.c (aliases_everything_p): Remove.\n+\t(DIFFERENT_ALIAS_SETS_P): Likewise.\n+\t(true_dependence_1): Use mems_in_disjoint_alias_sets_p directly.\n+\tDo not use aliases_everything_p or special-case ANDs.  Do not\n+\tspecial-case BLKmode moves.\n+\t(may_alias_p): Likewise.  Handle BLKmode similar like everywhere\n+\t- for SCATCH only.  \n+\n 2012-06-09  Hans-Peter Nilsson  <hp@axis.com>\n \n \tFix CRIS build errors with --enable-build-with-cxx."}, {"sha": "88a3b7e5eade562e97ce119ab4720fafe21eb078", "filename": "gcc/alias.c", "status": "modified", "additions": 6, "deletions": 47, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95b3cc7342a7a6601bcb8b6ce7be2e46297a7b4/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95b3cc7342a7a6601bcb8b6ce7be2e46297a7b4/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=a95b3cc7342a7a6601bcb8b6ce7be2e46297a7b4", "patch": "@@ -156,7 +156,6 @@ static rtx find_base_value (rtx);\n static int mems_in_disjoint_alias_sets_p (const_rtx, const_rtx);\n static int insert_subset_children (splay_tree_node, void*);\n static alias_set_entry get_alias_set_entry (alias_set_type);\n-static int aliases_everything_p (const_rtx);\n static bool nonoverlapping_component_refs_p (const_tree, const_tree);\n static tree decl_for_component_ref (tree);\n static int write_dependence_p (const_rtx, const_rtx, int);\n@@ -168,13 +167,6 @@ static void memory_modified_1 (rtx, const_rtx, void *);\n /* Returns the size in bytes of the mode of X.  */\n #define SIZE_FOR_MODE(X) (GET_MODE_SIZE (GET_MODE (X)))\n \n-/* Returns nonzero if MEM1 and MEM2 do not alias because they are in\n-   different alias sets.  We ignore alias sets in functions making use\n-   of variable arguments because the va_arg macros on some systems are\n-   not legal ANSI C.  */\n-#define DIFFERENT_ALIAS_SETS_P(MEM1, MEM2)\t\t\t\\\n-  mems_in_disjoint_alias_sets_p (MEM1, MEM2)\n-\n /* Cap the number of passes we make over the insns propagating alias\n    information through set chains.   10 is a completely arbitrary choice.  */\n #define MAX_ALIAS_LOOP_PASSES 10\n@@ -2188,20 +2180,6 @@ read_dependence (const_rtx mem, const_rtx x)\n   return MEM_VOLATILE_P (x) && MEM_VOLATILE_P (mem);\n }\n \n-/* Returns nonzero if something about the mode or address format MEM1\n-   indicates that it might well alias *anything*.  */\n-\n-static int\n-aliases_everything_p (const_rtx mem)\n-{\n-  if (GET_CODE (XEXP (mem, 0)) == AND)\n-    /* If the address is an AND, it's very hard to know at what it is\n-       actually pointing.  */\n-    return 1;\n-\n-  return 0;\n-}\n-\n /* Return true if we can determine that the fields referenced cannot\n    overlap for any pair of objects.  */\n \n@@ -2535,25 +2513,12 @@ true_dependence_1 (const_rtx mem, enum machine_mode mem_mode, rtx mem_addr,\n \t\t\t\t SIZE_FOR_MODE (x), x_addr, 0)) != -1)\n     return ret;\n \n-  if (DIFFERENT_ALIAS_SETS_P (x, mem))\n+  if (mems_in_disjoint_alias_sets_p (x, mem))\n     return 0;\n \n   if (nonoverlapping_memrefs_p (mem, x, false))\n     return 0;\n \n-  if (aliases_everything_p (x))\n-    return 1;\n-\n-  /* We cannot use aliases_everything_p to test MEM, since we must look\n-     at MEM_ADDR, rather than XEXP (mem, 0).  */\n-  if (GET_CODE (mem_addr) == AND)\n-    return 1;\n-\n-  /* ??? In true_dependence we also allow BLKmode to alias anything.  Why\n-     don't we do this in anti_dependence and output_dependence?  */\n-  if (mem_mode == BLKmode || GET_MODE (x) == BLKmode)\n-    return 1;\n-\n   return rtx_refs_may_alias_p (x, mem, true);\n }\n \n@@ -2680,10 +2645,12 @@ may_alias_p (const_rtx mem, const_rtx x)\n   if (MEM_VOLATILE_P (x) && MEM_VOLATILE_P (mem))\n     return 1;\n \n-  /* ??? In true_dependence we also allow BLKmode to alias anything. */\n-  if (GET_MODE (mem) == BLKmode || GET_MODE (x) == BLKmode)\n+  /* (mem:BLK (scratch)) is a special mechanism to conflict with everything.\n+     This is used in epilogue deallocation functions.  */\n+  if (GET_MODE (x) == BLKmode && GET_CODE (XEXP (x, 0)) == SCRATCH)\n+    return 1;\n+  if (GET_MODE (mem) == BLKmode && GET_CODE (XEXP (mem, 0)) == SCRATCH)\n     return 1;\n-    \n   if (MEM_ALIAS_SET (x) == ALIAS_SET_MEMORY_BARRIER\n       || MEM_ALIAS_SET (mem) == ALIAS_SET_MEMORY_BARRIER)\n     return 1;\n@@ -2722,14 +2689,6 @@ may_alias_p (const_rtx mem, const_rtx x)\n   if (nonoverlapping_memrefs_p (mem, x, true))\n     return 0;\n \n-  if (aliases_everything_p (x))\n-    return 1;\n-\n-  /* We cannot use aliases_everything_p to test MEM, since we must look\n-     at MEM_ADDR, rather than XEXP (mem, 0).  */\n-  if (GET_CODE (mem_addr) == AND)\n-    return 1;\n-\n   /* TBAA not valid for loop_invarint */\n   return rtx_refs_may_alias_p (x, mem, false);\n }"}]}