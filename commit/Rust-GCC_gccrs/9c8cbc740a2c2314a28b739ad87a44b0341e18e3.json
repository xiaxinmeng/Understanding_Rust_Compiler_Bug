{"sha": "9c8cbc740a2c2314a28b739ad87a44b0341e18e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM4Y2JjNzQwYTJjMjMxNGEyOGI3MzlhZDg3YTQ0YjAzNDFlMThlMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-12-16T22:35:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-12-16T22:35:35Z"}, "message": "tree-ssa-sccvn.c (vn_reference_lookup_3): Always punt if the call to get_ref_base_and_extent returns -1 as the max size.\n\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Always punt if the call to\n\tget_ref_base_and_extent returns -1 as the max size.\n\nFrom-SVN: r167958", "tree": {"sha": "786c4b9620c7cca6c269b60d2dba7e8c6dc27c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/786c4b9620c7cca6c269b60d2dba7e8c6dc27c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c8cbc740a2c2314a28b739ad87a44b0341e18e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8cbc740a2c2314a28b739ad87a44b0341e18e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c8cbc740a2c2314a28b739ad87a44b0341e18e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/comments", "author": null, "committer": null, "parents": [{"sha": "07981468ebdf268622d1fa47ce529958aefd154b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07981468ebdf268622d1fa47ce529958aefd154b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07981468ebdf268622d1fa47ce529958aefd154b"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "476d31ed83ad8106c9922deabf35e18842d58b7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c8cbc740a2c2314a28b739ad87a44b0341e18e3", "patch": "@@ -1,3 +1,8 @@\n+2010-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Always punt if the call to\n+\tget_ref_base_and_extent returns -1 as the max size.\n+\n 2010-12-16  Konrad Eisele  <konrad@gaisler.com>\n             Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "78ed8c6a589f0cf0ed4f758447cd179e243a742f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c8cbc740a2c2314a28b739ad87a44b0341e18e3", "patch": "@@ -1,3 +1,8 @@\n+2010-12-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt13.adb: New test.\n+\t* gnat.dg/opt13_pkg.ad[sb]: New helper.\n+\n 2010-12-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/43655"}, {"sha": "9e47957e9e125b8b805052bbc294f64cc3698f44", "filename": "gcc/testsuite/gnat.dg/opt13.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2Ftestsuite%2Fgnat.dg%2Fopt13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2Ftestsuite%2Fgnat.dg%2Fopt13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt13.adb?ref=9c8cbc740a2c2314a28b739ad87a44b0341e18e3", "patch": "@@ -0,0 +1,13 @@\n+-- { dg-do run }\n+-- { dg-options \"-O\" }\n+\n+with Opt13_Pkg; use Opt13_Pkg;\n+\n+procedure Opt13 is\n+  T : My_Type;\n+begin\n+  Allocate (T);\n+  if N /= 1 then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "b596a5c23445d621ef2333d2c20489f057f83cba", "filename": "gcc/testsuite/gnat.dg/opt13_pkg.adb", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2Ftestsuite%2Fgnat.dg%2Fopt13_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2Ftestsuite%2Fgnat.dg%2Fopt13_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt13_pkg.adb?ref=9c8cbc740a2c2314a28b739ad87a44b0341e18e3", "patch": "@@ -0,0 +1,31 @@\n+package body Opt13_Pkg is\r\n+\r\n+  subtype Index_Type is Natural range 0 .. 16;\r\n+\r\n+  type Arr is array (Index_Type range <>) of Integer;\r\n+\r\n+  type Rec is record\r\n+    F1, F2, F3 : Float;\r\n+    N : Natural;\r\n+    B1, B2 : Boolean;\r\n+    F4 : Float;\r\n+  end record;\r\n+\r\n+  type Data (D : Index_Type) is record\r\n+    A : Arr (1 .. D);\r\n+    R : Rec;\r\n+  end record;\r\n+\r\n+  Zero : constant Rec := (0.0, 0.0, 0.0, 0, False, False, 0.0);\r\n+\r\n+  procedure Allocate (T : out My_Type) is\r\n+  begin\r\n+    T := new Data (Index_Type'last);\r\n+    T.R := Zero;\r\n+\r\n+    for I in 1 .. T.A'last loop\r\n+      N := 1;\r\n+    end loop;\r\n+  end;\r\n+\r\n+end Opt13_Pkg;\r"}, {"sha": "39567f606d48a9f83dd68fa81c491d9e5538bfda", "filename": "gcc/testsuite/gnat.dg/opt13_pkg.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2Ftestsuite%2Fgnat.dg%2Fopt13_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2Ftestsuite%2Fgnat.dg%2Fopt13_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt13_pkg.ads?ref=9c8cbc740a2c2314a28b739ad87a44b0341e18e3", "patch": "@@ -0,0 +1,15 @@\n+package Opt13_Pkg is\r\n+\r\n+    N : Natural := 0;\r\n+\r\n+    type My_Type is private;\r\n+\r\n+    procedure Allocate (T : out My_Type);\r\n+\r\n+private\r\n+\r\n+    type Data;\r\n+\r\n+    type My_Type is access Data;\r\n+\r\n+end Opt13_Pkg;\r"}, {"sha": "970f2c0276a1ef6fcf7c8dd0f278927b146b787a", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c8cbc740a2c2314a28b739ad87a44b0341e18e3/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=9c8cbc740a2c2314a28b739ad87a44b0341e18e3", "patch": "@@ -1339,6 +1339,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n       size2 = TREE_INT_CST_LOW (gimple_call_arg (def_stmt, 2)) * 8;\n       if ((unsigned HOST_WIDE_INT)size2 / 8\n \t  == TREE_INT_CST_LOW (gimple_call_arg (def_stmt, 2))\n+\t  && maxsize2 != -1\n \t  && operand_equal_p (base, base2, 0)\n \t  && offset2 <= offset\n \t  && offset2 + size2 >= offset + maxsize)\n@@ -1362,7 +1363,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n       HOST_WIDE_INT offset2, size2, maxsize2;\n       base2 = get_ref_base_and_extent (gimple_assign_lhs (def_stmt),\n \t\t\t\t       &offset2, &size2, &maxsize2);\n-      if (operand_equal_p (base, base2, 0)\n+      if (maxsize2 != -1\n+\t  && operand_equal_p (base, base2, 0)\n \t  && offset2 <= offset\n \t  && offset2 + size2 >= offset + maxsize)\n \t{\n@@ -1383,7 +1385,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t       || handled_component_p (gimple_assign_rhs1 (def_stmt))))\n     {\n       tree base2;\n-      HOST_WIDE_INT offset2, size2;\n+      HOST_WIDE_INT offset2, size2, maxsize2;\n       int i, j;\n       VEC (vn_reference_op_s, heap) *rhs = NULL;\n       vn_reference_op_t vro;\n@@ -1396,8 +1398,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n       base2 = ao_ref_base (&lhs_ref);\n       offset2 = lhs_ref.offset;\n       size2 = lhs_ref.size;\n-      if ((base != base2\n-\t   && !operand_equal_p (base, base2, 0))\n+      maxsize2 = lhs_ref.max_size;\n+      if (maxsize2 == -1\n+\t  || (base != base2 && !operand_equal_p (base, base2, 0))\n \t  || offset2 > offset\n \t  || offset2 + size2 < offset + maxsize)\n \treturn (void *)-1;"}]}