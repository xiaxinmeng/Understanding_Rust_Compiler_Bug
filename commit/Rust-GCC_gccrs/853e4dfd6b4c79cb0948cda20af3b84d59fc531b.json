{"sha": "853e4dfd6b4c79cb0948cda20af3b84d59fc531b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzZTRkZmQ2YjRjNzljYjA5NDhjZGEyMGFmM2I4NGQ1OWZjNTMxYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-28T22:04:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-28T22:04:16Z"}, "message": "(hppa_save_pic_table_rtx): Delete variable.\n\n(hppa_expand_prologue): For PIC generation, copy the PIC register into\na fixed callee register at the end of the prologue of non-leaf\nfunctions.\n\nFrom-SVN: r10088", "tree": {"sha": "853cb032c624f3e233522696b9228af26e573d29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/853cb032c624f3e233522696b9228af26e573d29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/853e4dfd6b4c79cb0948cda20af3b84d59fc531b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853e4dfd6b4c79cb0948cda20af3b84d59fc531b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/853e4dfd6b4c79cb0948cda20af3b84d59fc531b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853e4dfd6b4c79cb0948cda20af3b84d59fc531b/comments", "author": null, "committer": null, "parents": [{"sha": "71fce386de7a2a51bd05a36ef1e2ae2e019d35b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71fce386de7a2a51bd05a36ef1e2ae2e019d35b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71fce386de7a2a51bd05a36ef1e2ae2e019d35b1"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "f2c7acc774edf2049fa4522e7261d465576ef03a", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/853e4dfd6b4c79cb0948cda20af3b84d59fc531b/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/853e4dfd6b4c79cb0948cda20af3b84d59fc531b/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=853e4dfd6b4c79cb0948cda20af3b84d59fc531b", "patch": "@@ -48,8 +48,6 @@ enum processor_type pa_cpu;\n /* String to hold which cpu we are scheduling for.  */\n char *pa_cpu_string;\n \n-rtx hppa_save_pic_table_rtx;\n-\n /* Set by the FUNCTION_PROFILER macro. */\n int hp_profile_labelno;\n \n@@ -2348,6 +2346,27 @@ hppa_expand_prologue()\n \t    fr_saved++;\n \t  }\n     }\n+\n+  /* When generating PIC code it is necessary to save/restore the\n+     PIC register around each function call.  We used to do this\n+     in the call patterns themselves, but that implementation\n+     made incorrect assumptions about using global variables to hold\n+     per-function rtl code generated in the backend.\n+\n+     So instead, we copy the PIC register into a reserved callee saved\n+     register in the prologue.  Then after each call we reload the PIC\n+     register from the callee saved register.  We also reload the PIC\n+     register from the callee saved register in the epilogue ensure the\n+     PIC register is valid at function exit.\n+\n+     This may (depending on the exact characteristics of the function)\n+     even be more efficient. \n+\n+     Avoid this if the callee saved register wasn't used (these are\n+     leaf functions.  */\n+  if (flag_pic && regs_ever_live[PIC_OFFSET_TABLE_REGNUM_SAVED])\n+    emit_move_insn (gen_rtx (REG, SImode, PIC_OFFSET_TABLE_REGNUM_SAVED),\n+\t\t    gen_rtx (REG, SImode, PIC_OFFSET_TABLE_REGNUM));\n }\n \n "}]}