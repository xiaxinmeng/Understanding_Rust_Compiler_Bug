{"sha": "903a5059b66d154ec6d064b832d896daf11aacff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzYTUwNTliNjZkMTU0ZWM2ZDA2NGI4MzJkODk2ZGFmMTFhYWNmZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-09-10T02:29:57Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-09-10T02:29:57Z"}, "message": "i386.c (ix86_split_long_move): When optimizing for size...\n\n\n\t* config/i386/i386.c (ix86_split_long_move): When optimizing for\n\tsize, and the low and high parts of a DImode constant are equal,\n\tcopy one register to another instead of loading the same immediate\n\tvalue twice.\n\nFrom-SVN: r87270", "tree": {"sha": "e955b1415e114dc923cb924605365b236096a762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e955b1415e114dc923cb924605365b236096a762"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/903a5059b66d154ec6d064b832d896daf11aacff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903a5059b66d154ec6d064b832d896daf11aacff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903a5059b66d154ec6d064b832d896daf11aacff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903a5059b66d154ec6d064b832d896daf11aacff/comments", "author": null, "committer": null, "parents": [{"sha": "469c26f1672c58c8e6e540d2066134cc67046b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469c26f1672c58c8e6e540d2066134cc67046b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469c26f1672c58c8e6e540d2066134cc67046b4e"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "06bef510120926047f2fd49df07cb6c9c6850432", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903a5059b66d154ec6d064b832d896daf11aacff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903a5059b66d154ec6d064b832d896daf11aacff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=903a5059b66d154ec6d064b832d896daf11aacff", "patch": "@@ -1,3 +1,10 @@\n+2004-09-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/i386/i386.c (ix86_split_long_move): When optimizing for\n+\tsize, and the low and high parts of a DImode constant are equal,\n+\tcopy one register to another instead of loading the same immediate\n+\tvalue twice.\n+\n 2004-09-09  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/17367"}, {"sha": "2a175452a190fc275404bb6a4495e79987d83e23", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903a5059b66d154ec6d064b832d896daf11aacff/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903a5059b66d154ec6d064b832d896daf11aacff/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=903a5059b66d154ec6d064b832d896daf11aacff", "patch": "@@ -9938,6 +9938,33 @@ ix86_split_long_move (rtx operands[])\n \t  operands[6] = part[1][1];\n \t}\n     }\n+\n+  /* If optimizing for size, attempt to locally unCSE non-zero constants.  */\n+  if (optimize_size)\n+    {\n+      if (GET_CODE (operands[5]) == CONST_INT\n+\t  && operands[5] != const0_rtx\n+\t  && REG_P (operands[2]))\n+\t{\n+\t  if (GET_CODE (operands[6]) == CONST_INT\n+\t      && INTVAL (operands[6]) == INTVAL (operands[5]))\n+\t    operands[6] = operands[2];\n+\n+\t  if (nparts == 3\n+\t      && GET_CODE (operands[7]) == CONST_INT\n+\t      && INTVAL (operands[7]) == INTVAL (operands[5]))\n+\t    operands[7] = operands[2];\n+\t}\n+\n+      if (nparts == 3\n+\t  && GET_CODE (operands[6]) == CONST_INT\n+\t  && operands[6] != const0_rtx\n+\t  && REG_P (operands[3])\n+\t  && GET_CODE (operands[7]) == CONST_INT\n+\t  && INTVAL (operands[7]) == INTVAL (operands[6]))\n+\toperands[7] = operands[3];\n+    }\n+\n   emit_move_insn (operands[2], operands[5]);\n   emit_move_insn (operands[3], operands[6]);\n   if (nparts == 3)"}]}