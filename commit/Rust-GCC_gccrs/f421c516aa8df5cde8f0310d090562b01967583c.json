{"sha": "f421c516aa8df5cde8f0310d090562b01967583c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQyMWM1MTZhYThkZjVjZGU4ZjAzMTBkMDkwNTYyYjAxOTY3NTgzYw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-09-22T16:24:57Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-09-22T16:24:57Z"}, "message": "[AArch64] Auto-generate the \"BUILTIN_\" macros for aarch64-builtins.c\n\ngcc/\n\n\t* config/aarch64/geniterators.sh: New.\n\t* config/aarch64/iterators.md (VDQF_DF): New.\n\t* config/aarch64/t-aarch64: Generate aarch64-builtin-iterators.h.\n\t* config/aarch64/aarch64-builtins.c (BUILTIN_*) Remove.\n\nFrom-SVN: r215471", "tree": {"sha": "4d4ef8278240983228bf27f3f822c3a6c1c2d4cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d4ef8278240983228bf27f3f822c3a6c1c2d4cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f421c516aa8df5cde8f0310d090562b01967583c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f421c516aa8df5cde8f0310d090562b01967583c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f421c516aa8df5cde8f0310d090562b01967583c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f421c516aa8df5cde8f0310d090562b01967583c/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7666d649f80feb0d9944e5affbe9f0687084054a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7666d649f80feb0d9944e5affbe9f0687084054a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7666d649f80feb0d9944e5affbe9f0687084054a"}], "stats": {"total": 184, "additions": 64, "deletions": 120}, "files": [{"sha": "c1e6d21e7cf28f4007d2d8f92f09c761a8267f21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421c516aa8df5cde8f0310d090562b01967583c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421c516aa8df5cde8f0310d090562b01967583c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f421c516aa8df5cde8f0310d090562b01967583c", "patch": "@@ -1,3 +1,10 @@\n+2014-09-22  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/geniterators.sh: New.\n+\t* config/aarch64/iterators.md (VDQF_DF): New.\n+\t* config/aarch64/t-aarch64: Generate aarch64-builtin-iterators.h.\n+\t* config/aarch64/aarch64-builtins.c (BUILTIN_*) Remove.\n+\n 2014-09-22  Peter A. Bigot  <pab@pabigot.com>\n \n \t* config/msp430/msp430.h (LIB_SPEC): Remove automatic addition of"}, {"sha": "3dba1b29875d7721cc82724e963f7f9bffee5fe8", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 1, "deletions": 119, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421c516aa8df5cde8f0310d090562b01967583c/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421c516aa8df5cde8f0310d090562b01967583c/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=f421c516aa8df5cde8f0310d090562b01967583c", "patch": "@@ -277,91 +277,7 @@ aarch64_types_storestruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   VAR11 (T, N, MAP, A, B, C, D, E, F, G, H, I, J, K) \\\n   VAR1 (T, N, MAP, L)\n \n-/* BUILTIN_<ITERATOR> macros should expand to cover the same range of\n-   modes as is given for each define_mode_iterator in\n-   config/aarch64/iterators.md.  */\n-\n-#define BUILTIN_DX(T, N, MAP) \\\n-  VAR2 (T, N, MAP, di, df)\n-#define BUILTIN_GPF(T, N, MAP) \\\n-  VAR2 (T, N, MAP, sf, df)\n-#define BUILTIN_SDQ_I(T, N, MAP) \\\n-  VAR4 (T, N, MAP, qi, hi, si, di)\n-#define BUILTIN_SD_HSI(T, N, MAP) \\\n-  VAR2 (T, N, MAP, hi, si)\n-#define BUILTIN_V2F(T, N, MAP) \\\n-  VAR2 (T, N, MAP, v2sf, v2df)\n-#define BUILTIN_VALL(T, N, MAP) \\\n-  VAR10 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, \\\n-\t v4si, v2di, v2sf, v4sf, v2df)\n-#define BUILTIN_VALLDI(T, N, MAP) \\\n-  VAR11 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, \\\n-\t v4si, v2di, v2sf, v4sf, v2df, di)\n-#define BUILTIN_VALLDIF(T, N, MAP) \\\n-  VAR12 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, \\\n-\t v4si, v2di, v2sf, v4sf, v2df, di, df)\n-#define BUILTIN_VB(T, N, MAP) \\\n-  VAR2 (T, N, MAP, v8qi, v16qi)\n-#define BUILTIN_VD1(T, N, MAP) \\\n-  VAR5 (T, N, MAP, v8qi, v4hi, v2si, v2sf, v1df)\n-#define BUILTIN_VDC(T, N, MAP) \\\n-  VAR6 (T, N, MAP, v8qi, v4hi, v2si, v2sf, di, df)\n-#define BUILTIN_VDIC(T, N, MAP) \\\n-  VAR3 (T, N, MAP, v8qi, v4hi, v2si)\n-#define BUILTIN_VDN(T, N, MAP) \\\n-  VAR3 (T, N, MAP, v4hi, v2si, di)\n-#define BUILTIN_VDQ(T, N, MAP) \\\n-  VAR7 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di)\n-#define BUILTIN_VDQF(T, N, MAP) \\\n-  VAR3 (T, N, MAP, v2sf, v4sf, v2df)\n-#define BUILTIN_VDQF_DF(T, N, MAP) \\\n-  VAR4 (T, N, MAP, v2sf, v4sf, v2df, df)\n-#define BUILTIN_VDQH(T, N, MAP) \\\n-  VAR2 (T, N, MAP, v4hi, v8hi)\n-#define BUILTIN_VDQHS(T, N, MAP) \\\n-  VAR4 (T, N, MAP, v4hi, v8hi, v2si, v4si)\n-#define BUILTIN_VDQIF(T, N, MAP) \\\n-  VAR9 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2sf, v4sf, v2df)\n-#define BUILTIN_VDQM(T, N, MAP) \\\n-  VAR6 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, v4si)\n-#define BUILTIN_VDQV(T, N, MAP) \\\n-  VAR5 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v4si)\n-#define BUILTIN_VDQQH(T, N, MAP) \\\n-  VAR4 (T, N, MAP, v8qi, v16qi, v4hi, v8hi)\n-#define BUILTIN_VDQ_BHSI(T, N, MAP) \\\n-  VAR6 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, v4si)\n-#define BUILTIN_VDQ_I(T, N, MAP) \\\n-  VAR7 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di)\n-#define BUILTIN_VDW(T, N, MAP) \\\n-  VAR3 (T, N, MAP, v8qi, v4hi, v2si)\n-#define BUILTIN_VD_BHSI(T, N, MAP) \\\n-  VAR3 (T, N, MAP, v8qi, v4hi, v2si)\n-#define BUILTIN_VD_HSI(T, N, MAP) \\\n-  VAR2 (T, N, MAP, v4hi, v2si)\n-#define BUILTIN_VQ(T, N, MAP) \\\n-  VAR6 (T, N, MAP, v16qi, v8hi, v4si, v2di, v4sf, v2df)\n-#define BUILTIN_VQN(T, N, MAP) \\\n-  VAR3 (T, N, MAP, v8hi, v4si, v2di)\n-#define BUILTIN_VQW(T, N, MAP) \\\n-  VAR3 (T, N, MAP, v16qi, v8hi, v4si)\n-#define BUILTIN_VQ_HSI(T, N, MAP) \\\n-  VAR2 (T, N, MAP, v8hi, v4si)\n-#define BUILTIN_VQ_S(T, N, MAP) \\\n-  VAR6 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, v4si)\n-#define BUILTIN_VSDQ_HSI(T, N, MAP) \\\n-  VAR6 (T, N, MAP, v4hi, v8hi, v2si, v4si, hi, si)\n-#define BUILTIN_VSDQ_I(T, N, MAP) \\\n-  VAR11 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di, qi, hi, si, di)\n-#define BUILTIN_VSDQ_I_BHSI(T, N, MAP) \\\n-  VAR10 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di, qi, hi, si)\n-#define BUILTIN_VSDQ_I_DI(T, N, MAP) \\\n-  VAR8 (T, N, MAP, v8qi, v16qi, v4hi, v8hi, v2si, v4si, v2di, di)\n-#define BUILTIN_VSD_HSI(T, N, MAP) \\\n-  VAR4 (T, N, MAP, v4hi, v2si, hi, si)\n-#define BUILTIN_VSQN_HSDI(T, N, MAP) \\\n-  VAR6 (T, N, MAP, v8hi, v4si, v2di, hi, si, di)\n-#define BUILTIN_VSTRUCT(T, N, MAP) \\\n-  VAR3 (T, N, MAP, oi, ci, xi)\n+#include \"aarch64-builtin-iterators.h\"\n \n static aarch64_simd_builtin_datum aarch64_simd_builtin_data[] = {\n #include \"aarch64-simd-builtins.def\"\n@@ -1446,40 +1362,6 @@ aarch64_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n #undef AARCH64_CHECK_BUILTIN_MODE\n #undef AARCH64_FIND_FRINT_VARIANT\n-#undef BUILTIN_DX\n-#undef BUILTIN_SDQ_I\n-#undef BUILTIN_SD_HSI\n-#undef BUILTIN_V2F\n-#undef BUILTIN_VALL\n-#undef BUILTIN_VB\n-#undef BUILTIN_VD1\n-#undef BUILTIN_VDC\n-#undef BUILTIN_VDIC\n-#undef BUILTIN_VDN\n-#undef BUILTIN_VDQ\n-#undef BUILTIN_VDQF\n-#undef BUILTIN_VDQH\n-#undef BUILTIN_VDQHS\n-#undef BUILTIN_VDQIF\n-#undef BUILTIN_VDQM\n-#undef BUILTIN_VDQV\n-#undef BUILTIN_VDQ_BHSI\n-#undef BUILTIN_VDQ_I\n-#undef BUILTIN_VDW\n-#undef BUILTIN_VD_BHSI\n-#undef BUILTIN_VD_HSI\n-#undef BUILTIN_VQ\n-#undef BUILTIN_VQN\n-#undef BUILTIN_VQW\n-#undef BUILTIN_VQ_HSI\n-#undef BUILTIN_VQ_S\n-#undef BUILTIN_VSDQ_HSI\n-#undef BUILTIN_VSDQ_I\n-#undef BUILTIN_VSDQ_I_BHSI\n-#undef BUILTIN_VSDQ_I_DI\n-#undef BUILTIN_VSD_HSI\n-#undef BUILTIN_VSQN_HSDI\n-#undef BUILTIN_VSTRUCT\n #undef CF0\n #undef CF1\n #undef CF2"}, {"sha": "a5bd69082ff18a3dc4fd8a6dba8a722443038c6a", "filename": "gcc/config/aarch64/geniterators.sh", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421c516aa8df5cde8f0310d090562b01967583c/gcc%2Fconfig%2Faarch64%2Fgeniterators.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421c516aa8df5cde8f0310d090562b01967583c/gcc%2Fconfig%2Faarch64%2Fgeniterators.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fgeniterators.sh?ref=f421c516aa8df5cde8f0310d090562b01967583c", "patch": "@@ -0,0 +1,45 @@\n+#!/bin/sh\n+#\n+# Copyright (C) 2014 Free Software Foundation, Inc.\n+# Contributed by ARM Ltd.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Generate aarch64-builtin-iterators.h, a file containing a series of\n+# BUILTIN_<ITERATOR> macros, which expand to VAR<N> Macros covering the\n+# same set of modes as the iterator in iterators.md\n+\n+echo \"/* -*- buffer-read-only: t -*- */\"\n+echo \"/* Generated automatically by geniterators.sh from iterators.md.  */\"\n+echo \"#ifndef GCC_AARCH64_ITERATORS_H\"\n+echo \"#define GCC_AARCH64_ITERATORS_H\"\n+\n+# Strip newlines, create records marked ITERATOR, and strip junk (anything\n+# which does not have a matching brace because it contains characters we\n+# don't want to or can't handle (e.g P, PTR iterators change depending on\n+# Pmode and ptr_mode).\n+cat $1 | tr \"\\n\" \" \" \\\n+       | sed 's/(define_mode_iterator \\([A-Za-z0-9_]*\\) \\([]\\[A-Z0-9 \\t]*\\)/\\n#define BUILTIN_\\1(T, N, MAP) \\\\ \\2\\n/g' \\\n+       | grep '#define [A-Z0-9_(), \\\\]* \\[[A-Z0-9[:space:]]*]' \\\n+       | sed 's/\\t//g' \\\n+       | sed 's/  \\+/ /g' \\\n+       | sed 's/ \\[\\([A-Z0-9 ]*\\)]/\\n\\L\\1/' \\\n+       | awk ' BEGIN { FS = \" \" ; OFS = \", \"} \\\n+\t       /#/ { print } \\\n+               ! /#/ { $1 = $1 ; printf \"  VAR%d (T, N, MAP, %s)\\n\", NF, $0 }'\n+\n+echo \"#endif /* GCC_AARCH64_ITERATORS_H  */\""}, {"sha": "daa5d9f70963208bec31f749e760b7324f579513", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421c516aa8df5cde8f0310d090562b01967583c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421c516aa8df5cde8f0310d090562b01967583c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=f421c516aa8df5cde8f0310d090562b01967583c", "patch": "@@ -95,6 +95,9 @@\n ;; Vector Float modes.\n (define_mode_iterator VDQF [V2SF V4SF V2DF])\n \n+;; Vector Float modes, and DF.\n+(define_mode_iterator VDQF_DF [V2SF V4SF V2DF DF])\n+\n ;; Vector single Float modes.\n (define_mode_iterator VDQSF [V2SF V4SF])\n "}, {"sha": "ea2b3e957ebb3e691454cfd00d2fc75fb5064a43", "filename": "gcc/config/aarch64/t-aarch64", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f421c516aa8df5cde8f0310d090562b01967583c/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f421c516aa8df5cde8f0310d090562b01967583c/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ft-aarch64?ref=f421c516aa8df5cde8f0310d090562b01967583c", "patch": "@@ -31,10 +31,17 @@ aarch64-builtins.o: $(srcdir)/config/aarch64/aarch64-builtins.c $(CONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(TREE_H) expr.h $(TM_P_H) $(RECOG_H) langhooks.h \\\n   $(DIAGNOSTIC_CORE_H) $(OPTABS_H) \\\n-  $(srcdir)/config/aarch64/aarch64-simd-builtins.def\n+  $(srcdir)/config/aarch64/aarch64-simd-builtins.def \\\n+  aarch64-builtin-iterators.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/aarch64/aarch64-builtins.c\n \n+aarch64-builtin-iterators.h: $(srcdir)/config/aarch64/geniterators.sh \\\n+\t$(srcdir)/config/aarch64/iterators.md\n+\t$(SHELL) $(srcdir)/config/aarch64/geniterators.sh \\\n+\t\t$(srcdir)/config/aarch64/iterators.md > \\\n+\t\taarch64-builtin-iterators.h\n+\n aarch-common.o: $(srcdir)/config/arm/aarch-common.c $(CONFIG_H) $(SYSTEM_H) \\\n     coretypes.h $(TM_H) $(TM_P_H) $(RTL_H) $(TREE_H) output.h $(C_COMMON_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\"}]}