{"sha": "d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc0MDMyZDllMWVmMGE0M2QzMjU5ZmNkYzhhOGVjMmIzMGVkYWNjYQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2008-06-28T10:47:36Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2008-06-28T10:47:36Z"}, "message": "re PR target/34856 (ICE with some constant vectors)\n\n\tPR target/34856\n\t* config/spu/spu.c (spu_builtin_splats): Do not generate\n\tinvalid CONST_VECTOR expressions.\n\t(spu_expand_vector_init): Likewise.\n\nFrom-SVN: r137218", "tree": {"sha": "b107b4752c95b1efc346306c10b2143f276714c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b107b4752c95b1efc346306c10b2143f276714c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca/comments", "author": null, "committer": null, "parents": [{"sha": "069a1c33f92b3a6c1088dbf194b084e0f21abcb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/069a1c33f92b3a6c1088dbf194b084e0f21abcb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/069a1c33f92b3a6c1088dbf194b084e0f21abcb2"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "3fccc8f3c21e8d6fa64536201412c6694f0bb364", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca", "patch": "@@ -1,3 +1,10 @@\n+2008-06-28  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\tPR target/34856\n+\t* config/spu/spu.c (spu_builtin_splats): Do not generate\n+\tinvalid CONST_VECTOR expressions.\n+\t(spu_expand_vector_init): Likewise.\n+\n 2008-06-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* optabs.c (libfunc_decls): New variable."}, {"sha": "e645adb22818569f1be50e87278128c71a00b8b8", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca", "patch": "@@ -4576,15 +4576,6 @@ spu_builtin_splats (rtx ops[])\n       constant_to_array (GET_MODE_INNER (mode), ops[1], arr);\n       emit_move_insn (ops[0], array_to_constant (mode, arr));\n     }\n-  else if (!flag_pic && GET_MODE (ops[0]) == V4SImode && CONSTANT_P (ops[1]))\n-    {\n-      rtvec v = rtvec_alloc (4);\n-      RTVEC_ELT (v, 0) = ops[1];\n-      RTVEC_ELT (v, 1) = ops[1];\n-      RTVEC_ELT (v, 2) = ops[1];\n-      RTVEC_ELT (v, 3) = ops[1];\n-      emit_move_insn (ops[0], gen_rtx_CONST_VECTOR (mode, v));\n-    }\n   else\n     {\n       rtx reg = gen_reg_rtx (TImode);\n@@ -4903,7 +4894,9 @@ spu_expand_vector_init (rtx target, rtx vals)\n   for (i = 0; i < n_elts; ++i)\n     {\n       x = XVECEXP (vals, 0, i);\n-      if (!CONSTANT_P (x))\n+      if (!(CONST_INT_P (x)\n+\t    || GET_CODE (x) == CONST_DOUBLE\n+\t    || GET_CODE (x) == CONST_FIXED))\n \t++n_var;\n       else\n \t{\n@@ -4940,8 +4933,13 @@ spu_expand_vector_init (rtx target, rtx vals)\n \t  /* fill empty slots with the first constant, this increases\n \t     our chance of using splats in the recursive call below. */\n \t  for (i = 0; i < n_elts; ++i)\n-\t    if (!CONSTANT_P (XVECEXP (constant_parts_rtx, 0, i)))\n-\t      XVECEXP (constant_parts_rtx, 0, i) = first_constant;\n+\t    {\n+\t      x = XVECEXP (constant_parts_rtx, 0, i);\n+\t      if (!(CONST_INT_P (x)\n+\t\t    || GET_CODE (x) == CONST_DOUBLE\n+\t\t    || GET_CODE (x) == CONST_FIXED))\n+\t\tXVECEXP (constant_parts_rtx, 0, i) = first_constant;\n+\t    }\n \n \t  spu_expand_vector_init (target, constant_parts_rtx);\n \t}\n@@ -4957,7 +4955,9 @@ spu_expand_vector_init (rtx target, rtx vals)\n       for (i = 0; i < n_elts; ++i)\n \t{\n \t  x = XVECEXP (vals, 0, i);\n-\t  if (!CONSTANT_P (x))\n+\t  if (!(CONST_INT_P (x)\n+\t\t|| GET_CODE (x) == CONST_DOUBLE\n+\t\t|| GET_CODE (x) == CONST_FIXED))\n \t    {\n \t      if (!register_operand (x, GET_MODE (x)))\n \t\tx = force_reg (GET_MODE (x), x);"}]}