{"sha": "22521c89b686b99b89ba296a8f3b9bae11f0f55a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI1MjFjODliNjg2Yjk5Yjg5YmEyOTZhOGYzYjliYWUxMWYwZjU1YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-08-17T11:03:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-08-17T11:03:59Z"}, "message": "decl.c (build_ptrmemfunc_type): Keep variant chain intact.\n\n2009-08-16  Richard Guenther  <rguenther@suse.de>\n\n\t* decl.c (build_ptrmemfunc_type): Keep variant chain intact.\n\tAvoid useless copy.\n\t(finish_enum): Keep variant chain intact.\n\t* tree.c (cp_build_reference_type): Likewise.\n\nFrom-SVN: r150839", "tree": {"sha": "1c50be19ea0eb90d701daa570a3b5e5c3aafac93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c50be19ea0eb90d701daa570a3b5e5c3aafac93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22521c89b686b99b89ba296a8f3b9bae11f0f55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22521c89b686b99b89ba296a8f3b9bae11f0f55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22521c89b686b99b89ba296a8f3b9bae11f0f55a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22521c89b686b99b89ba296a8f3b9bae11f0f55a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "241bea26410d0aec26d5f98d032061d9fa455a74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241bea26410d0aec26d5f98d032061d9fa455a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241bea26410d0aec26d5f98d032061d9fa455a74"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "52625db383670640074fd29f21be7202e170162e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22521c89b686b99b89ba296a8f3b9bae11f0f55a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22521c89b686b99b89ba296a8f3b9bae11f0f55a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=22521c89b686b99b89ba296a8f3b9bae11f0f55a", "patch": "@@ -1,3 +1,10 @@\n+2009-08-17  Richard Guenther  <rguenther@suse.de>\n+\n+\t* decl.c (build_ptrmemfunc_type): Keep variant chain intact.\n+\tAvoid useless copy.\n+\t(finish_enum): Keep variant chain intact.\n+\t* tree.c (cp_build_reference_type): Likewise.\n+\n 2009-08-16  Jason Merrill  <jason@redhat.com>\n \n \tMake TREE_USED match the [basic.def.odr] concept for FUNCTION_DECL"}, {"sha": "0746b828e7e70a0cd2318f20687bd9cd15f3e1b4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22521c89b686b99b89ba296a8f3b9bae11f0f55a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22521c89b686b99b89ba296a8f3b9bae11f0f55a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=22521c89b686b99b89ba296a8f3b9bae11f0f55a", "patch": "@@ -7056,10 +7056,14 @@ build_ptrmemfunc_type (tree type)\n   /* If this is not the unqualified form of this pointer-to-member\n      type, set the TYPE_MAIN_VARIANT for this type to be the\n      unqualified type.  Since they are actually RECORD_TYPEs that are\n-     not variants of each other, we must do this manually.  */\n+     not variants of each other, we must do this manually.\n+     As we just built a new type there is no need to do yet another copy.  */\n   if (cp_type_quals (type) != TYPE_UNQUALIFIED)\n     {\n-      t = build_qualified_type (t, cp_type_quals (type));\n+      int type_quals = cp_type_quals (type);\n+      TYPE_READONLY (t) = (type_quals & TYPE_QUAL_CONST) != 0;\n+      TYPE_VOLATILE (t) = (type_quals & TYPE_QUAL_VOLATILE) != 0;\n+      TYPE_RESTRICT (t) = (type_quals & TYPE_QUAL_RESTRICT) != 0;\n       TYPE_MAIN_VARIANT (t) = unqualified_variant;\n       TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (unqualified_variant);\n       TYPE_NEXT_VARIANT (unqualified_variant) = t;\n@@ -11164,7 +11168,8 @@ finish_enum (tree enumtype)\n       /* Set the underlying type of the enumeration type to the\n          computed enumeration type, restricted to the enumerator\n          values. */\n-      ENUM_UNDERLYING_TYPE (enumtype) = copy_node (underlying_type);\n+      ENUM_UNDERLYING_TYPE (enumtype)\n+\t= build_distinct_type_copy (underlying_type);\n       set_min_and_max_values_for_integral_type \n         (ENUM_UNDERLYING_TYPE (enumtype), precision, unsignedp);\n     }"}, {"sha": "1a406a306904cc2bfc8022983ca7f3324d63208e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22521c89b686b99b89ba296a8f3b9bae11f0f55a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22521c89b686b99b89ba296a8f3b9bae11f0f55a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=22521c89b686b99b89ba296a8f3b9bae11f0f55a", "patch": "@@ -700,12 +700,11 @@ cp_build_reference_type (tree to_type, bool rval)\n     if (TYPE_REF_IS_RVALUE (t))\n       return t;\n \n-  t = copy_node (lvalue_ref);\n+  t = build_distinct_type_copy (lvalue_ref);\n \n   TYPE_REF_IS_RVALUE (t) = true;\n   TYPE_NEXT_REF_TO (t) = TYPE_NEXT_REF_TO (lvalue_ref);\n   TYPE_NEXT_REF_TO (lvalue_ref) = t;\n-  TYPE_MAIN_VARIANT (t) = t;\n \n   if (TYPE_STRUCTURAL_EQUALITY_P (to_type))\n     SET_TYPE_STRUCTURAL_EQUALITY (t);"}]}