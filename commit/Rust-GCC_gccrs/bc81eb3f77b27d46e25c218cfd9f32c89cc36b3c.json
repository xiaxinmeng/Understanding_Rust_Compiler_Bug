{"sha": "bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM4MWViM2Y3N2IyN2Q0NmUyNWMyMThjZmQ5ZjMyYzg5Y2MzNmIzYw==", "commit": {"author": {"name": "Andrea Azzarone", "email": "azzaronea@gmail.com", "date": "2015-02-12T20:21:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-02-12T20:21:34Z"}, "message": "re PR c++/64959 (SFINAE in UDLs)\n\n\tPR c++/64959\n\t* parser.c (lookup_literal_operator): Return all candidates.\n\t(cp_parser_userdef_char_literal): Simplify error handling.\n\t(cp_parser_userdef_numeric_literal):  Pass tf_warning_or_error.\n\t(cp_parser_userdef_string_literal): Pass tf_warning_or_error.\n\tAlso give higher priority to standard string UDL operator.\n\nFrom-SVN: r220656", "tree": {"sha": "9e8f65f24d3a49b152bf5bb8ea477528a1d4764e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e8f65f24d3a49b152bf5bb8ea477528a1d4764e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/comments", "author": {"login": "azzar1", "id": 3677105, "node_id": "MDQ6VXNlcjM2NzcxMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3677105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azzar1", "html_url": "https://github.com/azzar1", "followers_url": "https://api.github.com/users/azzar1/followers", "following_url": "https://api.github.com/users/azzar1/following{/other_user}", "gists_url": "https://api.github.com/users/azzar1/gists{/gist_id}", "starred_url": "https://api.github.com/users/azzar1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azzar1/subscriptions", "organizations_url": "https://api.github.com/users/azzar1/orgs", "repos_url": "https://api.github.com/users/azzar1/repos", "events_url": "https://api.github.com/users/azzar1/events{/privacy}", "received_events_url": "https://api.github.com/users/azzar1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "864f0146f052c560b81794aced67f5d095d241a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864f0146f052c560b81794aced67f5d095d241a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/864f0146f052c560b81794aced67f5d095d241a3"}], "stats": {"total": 274, "additions": 210, "deletions": 64}, "files": [{"sha": "e460c55619d44ef9a179cf3dc86e01a43d09ab4c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "patch": "@@ -1,3 +1,12 @@\n+2015-02-12 Andrea Azzarone <azzaronea@gmail.com>\n+\n+\tPR c++/64959\n+\t* parser.c (lookup_literal_operator): Return all candidates.\n+\t(cp_parser_userdef_char_literal): Simplify error handling.\n+\t(cp_parser_userdef_numeric_literal):  Pass tf_warning_or_error.\n+\t(cp_parser_userdef_string_literal): Pass tf_warning_or_error.\n+\tAlso give higher priority to standard string UDL operator.\n+\n 2015-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/55541"}, {"sha": "e81e9d34767d57340f689eec5f43ef524600e389", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 49, "deletions": 58, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "patch": "@@ -3828,7 +3828,7 @@ lookup_literal_operator (tree name, vec<tree, va_gc> *args)\n \t\t work in presence of default arguments on the literal\n \t\t operator parameters.  */\n \t      && parmtypes == void_list_node)\n-\t    return fn;\n+\t    return decl;\n \t}\n     }\n \n@@ -3862,12 +3862,7 @@ cp_parser_userdef_char_literal (cp_parser *parser)\n     }\n   result = finish_call_expr (decl, &args, false, true, tf_warning_or_error);\n   release_tree_vector (args);\n-  if (result != error_mark_node)\n-    return result;\n-\n-  error (\"unable to find character literal operator %qD with %qT argument\",\n-\t name, TREE_TYPE (value));\n-  return error_mark_node;\n+  return result;\n }\n \n /* A subroutine of cp_parser_userdef_numeric_literal to\n@@ -3955,26 +3950,28 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n   decl = lookup_literal_operator (name, args);\n   if (decl && decl != error_mark_node)\n     {\n-      result = finish_call_expr (decl, &args, false, true, tf_none);\n-      if (result != error_mark_node)\n+      result = finish_call_expr (decl, &args, false, true,\n+\t\t\t\t tf_warning_or_error);\n+\n+      if (TREE_CODE (TREE_TYPE (value)) == INTEGER_TYPE && overflow > 0)\n+\t{\n+\t  warning_at (token->location, OPT_Woverflow,\n+\t\t      \"integer literal exceeds range of %qT type\",\n+\t\t      long_long_unsigned_type_node);\n+\t}\n+      else\n \t{\n-\t  if (TREE_CODE (TREE_TYPE (value)) == INTEGER_TYPE && overflow > 0)\n+\t  if (overflow > 0)\n \t    warning_at (token->location, OPT_Woverflow,\n-\t\t        \"integer literal exceeds range of %qT type\",\n-\t\t        long_long_unsigned_type_node);\n-\t  else\n-\t    {\n-\t      if (overflow > 0)\n-\t\twarning_at (token->location, OPT_Woverflow,\n-\t\t\t    \"floating literal exceeds range of %qT type\",\n-\t\t\t    long_double_type_node);\n-\t      else if (overflow < 0)\n-\t\twarning_at (token->location, OPT_Woverflow,\n-\t\t\t    \"floating literal truncated to zero\");\n-\t    }\n-\t  release_tree_vector (args);\n-\t  return result;\n+\t\t\t\"floating literal exceeds range of %qT type\",\n+\t\t\tlong_double_type_node);\n+\t  else if (overflow < 0)\n+\t    warning_at (token->location, OPT_Woverflow,\n+\t\t\t\"floating literal truncated to zero\");\n \t}\n+\n+      release_tree_vector (args);\n+      return result;\n     }\n   release_tree_vector (args);\n \n@@ -3986,12 +3983,10 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n   decl = lookup_literal_operator (name, args);\n   if (decl && decl != error_mark_node)\n     {\n-      result = finish_call_expr (decl, &args, false, true, tf_none);\n-      if (result != error_mark_node)\n-\t{\n-\t  release_tree_vector (args);\n-\t  return result;\n-\t}\n+      result = finish_call_expr (decl, &args, false, true,\n+\t\t\t\t tf_warning_or_error);\n+      release_tree_vector (args);\n+      return result;\n     }\n   release_tree_vector (args);\n \n@@ -4004,13 +3999,12 @@ cp_parser_userdef_numeric_literal (cp_parser *parser)\n     {\n       tree tmpl_args = make_char_string_pack (num_string);\n       decl = lookup_template_function (decl, tmpl_args);\n-      result = finish_call_expr (decl, &args, false, true, tf_none);\n-      if (result != error_mark_node)\n-\t{\n-\t  release_tree_vector (args);\n-\t  return result;\n-\t}\n+      result = finish_call_expr (decl, &args, false, true,\n+\t\t\t\t tf_warning_or_error);\n+      release_tree_vector (args);\n+      return result;\n     }\n+\n   release_tree_vector (args);\n \n   error (\"unable to find numeric literal operator %qD\", name);\n@@ -4035,40 +4029,37 @@ cp_parser_userdef_string_literal (tree literal)\n   tree decl, result;\n   vec<tree, va_gc> *args;\n \n-  /* Look for a template function with typename parameter CharT\n-     and parameter pack CharT...  Call the function with\n-     template parameter characters representing the string.  */\n+  /* Build up a call to the user-defined operator.  */\n+  /* Lookup the name we got back from the id-expression.  */\n   args = make_tree_vector ();\n+  vec_safe_push (args, value);\n+  vec_safe_push (args, build_int_cst (size_type_node, len));\n   decl = lookup_literal_operator (name, args);\n+\n   if (decl && decl != error_mark_node)\n     {\n-      tree tmpl_args = make_string_pack (value);\n-      decl = lookup_template_function (decl, tmpl_args);\n-      result = finish_call_expr (decl, &args, false, true, tf_none);\n-      if (result != error_mark_node)\n-\t{\n-\t  release_tree_vector (args);\n-\t  return result;\n-\t}\n+      result = finish_call_expr (decl, &args, false, true,\n+\t\t\t\t tf_warning_or_error);\n+      release_tree_vector (args);\n+      return result;\n     }\n   release_tree_vector (args);\n \n-  /* Build up a call to the user-defined operator  */\n-  /* Lookup the name we got back from the id-expression.  */\n+  /* Look for a template function with typename parameter CharT\n+     and parameter pack CharT...  Call the function with\n+     template parameter characters representing the string.  */\n   args = make_tree_vector ();\n-  vec_safe_push (args, value);\n-  vec_safe_push (args, build_int_cst (size_type_node, len));\n-  decl = lookup_name (name);\n-  if (!decl || decl == error_mark_node)\n+  decl = lookup_literal_operator (name, args);\n+  if (decl && decl != error_mark_node)\n     {\n-      error (\"unable to find string literal operator %qD\", name);\n+      tree tmpl_args = make_string_pack (value);\n+      decl = lookup_template_function (decl, tmpl_args);\n+      result = finish_call_expr (decl, &args, false, true,\n+\t\t\t\t tf_warning_or_error);\n       release_tree_vector (args);\n-      return error_mark_node;\n+      return result;\n     }\n-  result = finish_call_expr (decl, &args, false, true, tf_none);\n   release_tree_vector (args);\n-  if (result != error_mark_node)\n-    return result;\n \n   error (\"unable to find string literal operator %qD with %qT, %qT arguments\",\n \t name, TREE_TYPE (value), size_type_node);"}, {"sha": "c67be390f8b8662ccaade6b9e91cc6bd2d88f7f3", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-namespace-ambiguous.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-namespace-ambiguous.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-namespace-ambiguous.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-namespace-ambiguous.C?ref=bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++11 } }\n+\n+int operator\"\"_t (long long unsigned); // { dg-message \"note: candidate\"}\n+\n+namespace foo {\n+  int operator\"\"_t (long long unsigned);  // { dg-message \"note: candidate\"}\n+}\n+\n+using namespace foo;\n+int var = 10_t; // { dg-error \"call of overloaded | is ambiguous\" }"}, {"sha": "bd1f2066eade478a9bd89f48100dece489b979ca", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-namespace-using-directive.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-namespace-using-directive.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-namespace-using-directive.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-namespace-using-directive.C?ref=bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++11 } }\n+\n+int operator\"\"_t(long long unsigned) {\n+    return 0;\n+}\n+\n+namespace foo {\n+  int operator\"\"_t(long long unsigned) {\n+    return 0;\n+  }\n+}\n+\n+int main() {\n+  using foo::operator\"\"_t;\n+  10_t;\n+}"}, {"sha": "c1ceef7577fc654898279d0987584f5bae766874", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-resolve.C", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-resolve.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-resolve.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-resolve.C?ref=bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "patch": "@@ -17,15 +17,10 @@ int operator\"\" _foo(const char32_t*, std::size_t) { return 10; }\n template<char...> int operator\"\" _foo2()          { return 20; }\n int operator\"\" _foo2(unsigned long long int)      { return 21; }\n \n-namespace bar {\n-int operator\"\" _foo(unsigned long long int)       { return 101; }\n-}\n-using namespace bar;\n-\n int\n main()\n {\n-  assert(123_foo == 101);\n+  assert(123_foo == 1);\n   assert(0.123_foo == 2);\n   assert('c'_foo == 3);\n   assert(L'c'_foo == 4);"}, {"sha": "6b84eba31d68f9914333795cb964470294ea384b", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-sfinae-neg.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-sfinae-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-sfinae-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-sfinae-neg.C?ref=bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-prune-output \"note:\" }\n+\n+template<bool, typename _Tp = void> struct enable_if { };\n+template<typename _Tp> struct enable_if<true, _Tp> { typedef _Tp type; };\n+\n+template <char... c>\n+constexpr typename enable_if<sizeof...(c) == 2, int>::type operator\"\"_t () // { dg-error \"no type named|in\" }\n+{\n+  return 2;\n+}\n+\n+template <char... c>\n+constexpr typename enable_if<sizeof...(c) == 1, int>::type operator\"\"_t () // { dg-error \"no type named|in\" }\n+{\n+  return 1;\n+}\n+\n+int a = 45_t;\n+int b = 4_t;\n+int c = 100000_t; // { dg-error \"no matching function for call to\" }"}, {"sha": "e24b79d9f0bfc45116c3d10e9d417296de0cc374", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-sfinae.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-sfinae.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-sfinae.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-sfinae.C?ref=bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do run { target c++11 } }\n+\n+#include <cassert>\n+\n+template<bool, typename _Tp = void> struct enable_if { };\n+template<typename _Tp> struct enable_if<true, _Tp> { typedef _Tp type; };\n+\n+\n+template <char... c>\n+constexpr typename enable_if<sizeof...(c) == 2, int>::type operator\"\"_t ()\n+{\n+  return 2;\n+}\n+\n+template <char... c>\n+constexpr typename enable_if<sizeof...(c) == 1, int>::type operator\"\"_t ()\n+{\n+  return 1;\n+}\n+\n+template <char... c>\n+constexpr typename enable_if<sizeof...(c) >= 3, int>::type operator\"\"_t ()\n+{\n+  return 100;\n+}\n+\n+int operator\"\"_t (long double)\n+{\n+  return 200;\n+}\n+\n+int main ()\n+{\n+  assert (45_t == 2);\n+  assert (4_t == 1);\n+  assert (100000_t == 100);\n+  assert (200.0_t == 200);\n+}"}, {"sha": "b74900101a4d395f79912c3a4d4ded8cddb49833", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-char-template-sfinae-neg.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-sfinae-neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-sfinae-neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-sfinae-neg.C?ref=bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-prune-output \"note:\" }\n+\n+template<bool, typename _Tp = void>struct enable_if {};\n+template<typename _Tp> struct enable_if<true, _Tp> { typedef _Tp type; };\n+\n+\n+template<typename CharT, CharT... String>\n+typename enable_if<sizeof...(String) == 1, int>::type operator\"\" _script () { // { dg-error \"no type named|in\" }\n+  return 1;\n+}\n+\n+template<typename CharT, CharT... String>\n+typename enable_if<sizeof...(String) == 2, int>::type operator\"\" _script () {  // { dg-error \"no type named|in\" }\n+  return 2;\n+}\n+\n+int a = \"1\"_script;\n+int b = \"22\"_script;\n+int c = \"333\"_script; // { dg-error \"no matching function for call to\"}"}, {"sha": "a9c577fd110f073d4c42738e3c4679215d891730", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-char-template-sfinae.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-sfinae.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-sfinae.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-sfinae.C?ref=bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do run { target c++14 } }\n+\n+#include <cassert>\n+\n+template<bool, typename _Tp = void>struct enable_if {};\n+template<typename _Tp> struct enable_if<true, _Tp> { typedef _Tp type; };\n+\n+\n+template<typename CharT, CharT... String>\n+typename enable_if<sizeof...(String) == 6, int>::type operator\"\" _script () {\n+  return 5;\n+}\n+\n+template<typename CharT, CharT... String>\n+typename enable_if<sizeof...(String) == 3, int>::type operator\"\" _script () {\n+  return 3;\n+}\n+\n+template<typename CharT, CharT... String>\n+typename enable_if<sizeof...(String) != 3 && sizeof...(String) != 6, int>::type operator\"\" _script () {\n+  return 1;\n+}\n+\n+int main ()\n+{\n+  assert (\"hello!\"_script == 5);\n+  assert (u8\"hi!\"_script == 3);\n+  assert (\"hey!\"_script == 1);\n+}"}, {"sha": "2eb6a7daf20639c04f9ef3393daac40578e066f5", "filename": "gcc/testsuite/g++.dg/cpp1y/udlit-char-template-vs-std-literal-operator.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-vs-std-literal-operator.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-vs-std-literal-operator.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fudlit-char-template-vs-std-literal-operator.C?ref=bc81eb3f77b27d46e25c218cfd9f32c89cc36b3c", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do run { target c++14 } }\n+\n+#include <cassert>\n+\n+template<typename CharT, CharT... String>\n+int operator\"\" _script () {\n+  return 1;\n+}\n+\n+int operator\"\" _script (const char*, unsigned long) {\n+  return 2;\n+}\n+\n+int main ()\n+{\n+  assert (\"123\"_script == 2);\n+}"}]}