{"sha": "43653547e7c8da2cd861bceb4a3e4bd338787ced", "node_id": "C_kwDOANBUbNoAKDQzNjUzNTQ3ZTdjOGRhMmNkODYxYmNlYjRhM2U0YmQzMzg3ODdjZWQ", "commit": {"author": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-06-27T08:26:25Z"}, "committer": {"name": "Lulu Cheng", "email": "chenglulu@loongson.cn", "date": "2022-06-29T06:43:37Z"}, "message": "LoongArch: Remove undefined behavior from code [PR 106097]\n\nC++2017 and previous standard description:\n\nThe value of E1 << E2 is E1 left-shifted E2 bit positions;\nvacated bits are zero-filled. If E1 has an unsigned type,\nthe value of the result is E1\u00d72E2, reduced modulo one more\nthan the maximum value representable inthe result type.\nOtherwise, if E1 has a signed type and non-negative value,\nand E1\u00d72E2 is representablein the corresponding unsigned\ntype of the result type, then that value, converted to the\nresult type, is the resulting value; otherwise, the behavior\nis undefined.\n\nThe value of E1 >> E2 is E1 right-shifted E2 bit positions.\nIf E1 has an unsigned type or if E1 has a signed type and\na non-negative value, the value of the result is the integral\npart of the quotient of E1/2E2. If E1 has a signed type and\na negative value, the resulting value is implementation-defined.\n\ngcc/ChangeLog:\n\n\tPR target/106097\n\t* config/loongarch/loongarch.cc (loongarch_build_integer):\n\tRemove undefined behavior from code.", "tree": {"sha": "5ceae88828d4f0a36774914bad8785dab44cf64f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ceae88828d4f0a36774914bad8785dab44cf64f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43653547e7c8da2cd861bceb4a3e4bd338787ced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43653547e7c8da2cd861bceb4a3e4bd338787ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43653547e7c8da2cd861bceb4a3e4bd338787ced", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43653547e7c8da2cd861bceb4a3e4bd338787ced/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b93ae1a01bbad59ee77b7c84f4743a730138ba87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93ae1a01bbad59ee77b7c84f4743a730138ba87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b93ae1a01bbad59ee77b7c84f4743a730138ba87"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "48d9ccdc33101cd8b8223966c4e68ddfef0a8bee", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653547e7c8da2cd861bceb4a3e4bd338787ced/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653547e7c8da2cd861bceb4a3e4bd338787ced/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=43653547e7c8da2cd861bceb4a3e4bd338787ced", "patch": "@@ -160,7 +160,7 @@ enum loongarch_load_imm_method\n struct loongarch_integer_op\n {\n   enum rtx_code code;\n-  unsigned HOST_WIDE_INT value;\n+  HOST_WIDE_INT value;\n   enum loongarch_load_imm_method method;\n };\n \n@@ -1468,7 +1468,7 @@ loongarch_build_integer (struct loongarch_integer_op *codes,\n   unsigned int cost = 0;\n \n   /* Get the lower 32 bits of the value.  */\n-  HOST_WIDE_INT low_part = TARGET_64BIT ? value << 32 >> 32 : value;\n+  HOST_WIDE_INT low_part = (int32_t)value;\n \n   if (IMM12_OPERAND (low_part) || IMM12_OPERAND_UNSIGNED (low_part))\n     {\n@@ -1502,6 +1502,7 @@ loongarch_build_integer (struct loongarch_integer_op *codes,\n       bool lu52i[2] = {(value & LU52I_B) == 0, (value & LU52I_B) == LU52I_B};\n \n       int sign31 = (value & (1UL << 31)) >> 31;\n+      int sign51 = (value & (1UL << 51)) >> 51;\n       /* Determine whether the upper 32 bits are sign-extended from the lower\n \t 32 bits. If it is, the instructions to load the high order can be\n \t ommitted.  */\n@@ -1512,20 +1513,20 @@ loongarch_build_integer (struct loongarch_integer_op *codes,\n       else if (lu32i[sign31])\n \t{\n \t  codes[cost].method = METHOD_LU52I;\n-\t  codes[cost].value = (value >> 52) << 52;\n+\t  codes[cost].value = value & LU52I_B;\n \t  return cost + 1;\n \t}\n \n       codes[cost].method = METHOD_LU32I;\n-      codes[cost].value = ((value << 12) >> 44) << 32;\n+      codes[cost].value = (value & LU32I_B) | (sign51 ? LU52I_B : 0);\n       cost++;\n \n       /* Determine whether the 52-61 bits are sign-extended from the low order,\n \t and if not, load the 52-61 bits.  */\n       if (!lu52i[(value & (1ULL << 51)) >> 51])\n \t{\n \t  codes[cost].method = METHOD_LU52I;\n-\t  codes[cost].value = (value >> 52) << 52;\n+\t  codes[cost].value = value & LU52I_B;\n \t  cost++;\n \t}\n     }"}]}