{"sha": "1a7748ad4c356f37d324a36c21054735f2ca6f89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE3NzQ4YWQ0YzM1NmYzN2QzMjRhMzZjMjEwNTQ3MzVmMmNhNmY4OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-03-02T11:58:01Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-09T08:09:06Z"}, "message": "[Ada] Remove kludge for AI05-0087\n\n2020-06-09  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch5.adb (Expand_N_Assignment): Remove kludge for\n\tAI05-0087.\n\t* sem_ch12.adb (Validate_Derived_Type_Instance): Implement\n\tAI05-0087 retroactively since it's a binding interpretation.", "tree": {"sha": "bef1cf5d49edafc93838e6d377c033fc8876b283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bef1cf5d49edafc93838e6d377c033fc8876b283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a7748ad4c356f37d324a36c21054735f2ca6f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7748ad4c356f37d324a36c21054735f2ca6f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7748ad4c356f37d324a36c21054735f2ca6f89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7748ad4c356f37d324a36c21054735f2ca6f89/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "148c86d1ab9a1cc02651056a2da3b67003f1a51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148c86d1ab9a1cc02651056a2da3b67003f1a51a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/148c86d1ab9a1cc02651056a2da3b67003f1a51a"}], "stats": {"total": 55, "additions": 14, "deletions": 41}, "files": [{"sha": "3e37f15356626352f2e450b993f09f99c2db40f2", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7748ad4c356f37d324a36c21054735f2ca6f89/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7748ad4c356f37d324a36c21054735f2ca6f89/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=1a7748ad4c356f37d324a36c21054735f2ca6f89", "patch": "@@ -29,7 +29,6 @@ with Checks;   use Checks;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n-with Errout;   use Errout;\n with Exp_Aggr; use Exp_Aggr;\n with Exp_Ch6;  use Exp_Ch6;\n with Exp_Ch7;  use Exp_Ch7;\n@@ -2664,25 +2663,13 @@ package body Exp_Ch5 is\n                          and then\n                            not Restriction_Active (No_Dispatching_Calls))\n             then\n-               if Is_Limited_Type (Typ) then\n-\n-                  --  This can happen in an instance when the formal is an\n-                  --  extension of a limited interface, and the actual is\n-                  --  limited. This is an error according to AI05-0087, but\n-                  --  is not caught at the point of instantiation in earlier\n-                  --  versions. We also must verify that the limited type does\n-                  --  not come from source as corner cases may exist where\n-                  --  an assignment was not intended like the pathological case\n-                  --  of a raise expression within a return statement.\n-\n-                  --  This is wrong, error messages cannot be issued during\n-                  --  expansion, since they would be missed in -gnatc mode ???\n-\n-                  if Comes_From_Source (N) then\n-                     Error_Msg_N\n-                       (\"assignment not available on limited type\", N);\n-                  end if;\n+               --  We should normally not encounter any limited type here,\n+               --  except in the corner case where an assignment was not\n+               --  intended like the pathological case of a raise expression\n+               --  within a return statement.\n \n+               if Is_Limited_Type (Typ) then\n+                  pragma Assert (not Comes_From_Source (N));\n                   return;\n                end if;\n "}, {"sha": "b29c00bafc109d49c8540fb28d986944ebb52103", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7748ad4c356f37d324a36c21054735f2ca6f89/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7748ad4c356f37d324a36c21054735f2ca6f89/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=1a7748ad4c356f37d324a36c21054735f2ca6f89", "patch": "@@ -13460,17 +13460,8 @@ package body Sem_Ch12 is\n          --  explicitly so. If not declared limited, the actual cannot be\n          --  limited (see AI05-0087).\n \n-         --  Even though this AI is a binding interpretation, we enable the\n-         --  check only in Ada 2012 mode, because this improper construct\n-         --  shows up in user code and in existing B-tests.\n-\n-         if Is_Limited_Type (Act_T)\n-           and then not Is_Limited_Type (A_Gen_T)\n-           and then Ada_Version >= Ada_2012\n-         then\n-            if In_Instance then\n-               null;\n-            else\n+         if Is_Limited_Type (Act_T) and then not Is_Limited_Type (A_Gen_T) then\n+            if not In_Instance then\n                Error_Msg_NE\n                  (\"actual for non-limited & cannot be a limited type\",\n                   Actual, Gen_T);\n@@ -13479,30 +13470,25 @@ package body Sem_Ch12 is\n             end if;\n          end if;\n \n-         --  Don't check Ada_Version here (for now) because AI12-0036 is\n-         --  a binding interpretation; this decision may be reversed if\n-         --  the situation turns out to be similar to that of the preceding\n-         --  Is_Limited_Type test (see preceding comment).\n+         --  Check for AI12-0036\n \n          declare\n             Formal_Is_Private_Extension : constant Boolean :=\n               Nkind (Parent (A_Gen_T)) = N_Private_Extension_Declaration;\n \n             Actual_Is_Tagged : constant Boolean := Is_Tagged_Type (Act_T);\n+\n          begin\n             if Actual_Is_Tagged /= Formal_Is_Private_Extension then\n-               if In_Instance then\n-                  null;\n-               else\n+               if not In_Instance then\n                   if Actual_Is_Tagged then\n                      Error_Msg_NE\n-                       (\"actual for & cannot be a tagged type\",\n-                        Actual, Gen_T);\n+                       (\"actual for & cannot be a tagged type\", Actual, Gen_T);\n                   else\n                      Error_Msg_NE\n-                       (\"actual for & must be a tagged type\",\n-                        Actual, Gen_T);\n+                       (\"actual for & must be a tagged type\", Actual, Gen_T);\n                   end if;\n+\n                   Abandon_Instantiation (Actual);\n                end if;\n             end if;"}]}