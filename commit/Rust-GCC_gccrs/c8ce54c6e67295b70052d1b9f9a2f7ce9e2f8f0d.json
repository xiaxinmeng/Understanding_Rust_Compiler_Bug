{"sha": "c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhjZTU0YzZlNjcyOTViNzAwNTJkMWI5ZjlhMmY3Y2U5ZTJmOGYwZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-27T07:24:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-27T08:41:43Z"}, "message": "tree-optimization/39821 - fix cost classification for widening arith\n\nThis adjusts the vectorizer to cost vector_stmt for widening\narithmetic instead of vec_promote_demote in the line of telling\nthe target that stmt_info->stmt is the meaningful piece we cost.\n\n2021-07-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/39821\n\t* tree-vect-stmts.c (vect_model_promotion_demotion_cost): Use\n\tvector_stmt for widening arithmetic.\n\t(vectorizable_conversion): Adjust.", "tree": {"sha": "0a88568bde651ecc434b12dba73b3fb442ed8f23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a88568bde651ecc434b12dba73b3fb442ed8f23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13586172d0b70c9d7ca464fc5a2a46a8532b06d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13586172d0b70c9d7ca464fc5a2a46a8532b06d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13586172d0b70c9d7ca464fc5a2a46a8532b06d7"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "074dfdcf385f31f2ba753012131985544dfd69f8", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d", "patch": "@@ -836,20 +836,24 @@ vect_model_simple_cost (vec_info *,\n    one if two-step promotion/demotion is required, and so on.  NCOPIES\n    is the number of vector results (and thus number of instructions)\n    for the narrowest end of the operation chain.  Each additional\n-   step doubles the number of instructions required.  */\n+   step doubles the number of instructions required.  If WIDEN_ARITH\n+   is true the stmt is doing widening arithmetic.  */\n \n static void\n vect_model_promotion_demotion_cost (stmt_vec_info stmt_info,\n \t\t\t\t    enum vect_def_type *dt,\n \t\t\t\t    unsigned int ncopies, int pwr,\n-\t\t\t\t    stmt_vector_for_cost *cost_vec)\n+\t\t\t\t    stmt_vector_for_cost *cost_vec,\n+\t\t\t\t    bool widen_arith)\n {\n   int i;\n   int inside_cost = 0, prologue_cost = 0;\n \n   for (i = 0; i < pwr + 1; i++)\n     {\n-      inside_cost += record_stmt_cost (cost_vec, ncopies, vec_promote_demote,\n+      inside_cost += record_stmt_cost (cost_vec, ncopies,\n+\t\t\t\t       widen_arith\n+\t\t\t\t       ? vector_stmt : vec_promote_demote,\n \t\t\t\t       stmt_info, 0, vect_body);\n       ncopies *= 2;\n     }\n@@ -4690,6 +4694,10 @@ vectorizable_conversion (vec_info *vinfo,\n       && code != WIDEN_LSHIFT_EXPR)\n     return false;\n \n+  bool widen_arith = (code == WIDEN_PLUS_EXPR\n+\t\t      || code == WIDEN_MINUS_EXPR\n+\t\t      || code == WIDEN_MULT_EXPR\n+\t\t      || code == WIDEN_LSHIFT_EXPR);\n   op_type = TREE_CODE_LENGTH (code);\n \n   /* Check types of lhs and rhs.  */\n@@ -4779,10 +4787,7 @@ vectorizable_conversion (vec_info *vinfo,\n   nunits_in = TYPE_VECTOR_SUBPARTS (vectype_in);\n   nunits_out = TYPE_VECTOR_SUBPARTS (vectype_out);\n   if (known_eq (nunits_out, nunits_in))\n-    if (code == WIDEN_MINUS_EXPR\n-\t|| code == WIDEN_PLUS_EXPR\n-\t|| code == WIDEN_LSHIFT_EXPR\n-\t|| code == WIDEN_MULT_EXPR)\n+    if (widen_arith)\n       modifier = WIDEN;\n     else\n       modifier = NONE;\n@@ -4959,7 +4964,8 @@ vectorizable_conversion (vec_info *vinfo,\n \t  unsigned int nvectors\n \t    = (slp_node ? SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node) : ncopies);\n \t  vect_model_promotion_demotion_cost (stmt_info, dt, nvectors,\n-\t\t\t\t\t      multi_step_cvt, cost_vec);\n+\t\t\t\t\t      multi_step_cvt, cost_vec,\n+\t\t\t\t\t      widen_arith);\n \t}\n       else\n \t{\n@@ -4972,7 +4978,8 @@ vectorizable_conversion (vec_info *vinfo,\n \t       ? SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node) >> multi_step_cvt\n \t       : ncopies * 2);\n \t  vect_model_promotion_demotion_cost (stmt_info, dt, nvectors,\n-\t\t\t\t\t      multi_step_cvt, cost_vec);\n+\t\t\t\t\t      multi_step_cvt, cost_vec,\n+\t\t\t\t\t      widen_arith);\n \t}\n       interm_types.release ();\n       return true;"}]}