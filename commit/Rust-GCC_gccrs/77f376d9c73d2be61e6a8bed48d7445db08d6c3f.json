{"sha": "77f376d9c73d2be61e6a8bed48d7445db08d6c3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdmMzc2ZDljNzNkMmJlNjFlNmE4YmVkNDhkNzQ0NWRiMDhkNmMzZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-18T20:11:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-07-18T20:11:21Z"}, "message": "vector (insert(iterator, _Tp&&), [...]): Enable only when _Tp != bool.\n\n2008-07-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/debug/vector (insert(iterator, _Tp&&), push_back(_Tp&&)):\n\tEnable only when _Tp != bool.\n\n\t* testsuite/25_algorithms/heap/1.cc: Avoid unused variable warnings.\n\nFrom-SVN: r137962", "tree": {"sha": "233c3d1c66e8366676fddcf9353a7b303ec9de65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/233c3d1c66e8366676fddcf9353a7b303ec9de65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77f376d9c73d2be61e6a8bed48d7445db08d6c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f376d9c73d2be61e6a8bed48d7445db08d6c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f376d9c73d2be61e6a8bed48d7445db08d6c3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f376d9c73d2be61e6a8bed48d7445db08d6c3f/comments", "author": null, "committer": null, "parents": [{"sha": "0d3f1ce4e90900e0aa697975a59a0c68364fef70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3f1ce4e90900e0aa697975a59a0c68364fef70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d3f1ce4e90900e0aa697975a59a0c68364fef70"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "f0c63a6ad7696c65b866443901458ff509070676", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f376d9c73d2be61e6a8bed48d7445db08d6c3f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f376d9c73d2be61e6a8bed48d7445db08d6c3f/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=77f376d9c73d2be61e6a8bed48d7445db08d6c3f", "patch": "@@ -300,9 +300,11 @@ namespace __debug\n       }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      void\n-      push_back(_Tp&& __x)\n-      { emplace_back(std::move(__x)); }\n+      template<typename _Up = _Tp>\n+        typename __gnu_cxx::__enable_if<!std::__are_same<_Up, bool>::__value,\n+\t\t\t\t\tvoid>::__type\n+        push_back(_Tp&& __x)\n+\t{ emplace_back(std::move(__x)); }\n \n       template<typename... _Args>\n         void\n@@ -360,9 +362,11 @@ namespace __debug\n       }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      iterator\n-      insert(iterator __position, _Tp&& __x)\n-      { return emplace(__position, std::move(__x)); }\n+      template<typename _Up = _Tp>\n+        typename __gnu_cxx::__enable_if<!std::__are_same<_Up, bool>::__value,\n+\t\t\t\t\titerator>::__type\n+        insert(iterator __position, _Tp&& __x)\n+        { return emplace(__position, std::move(__x)); }\n #endif\n \n       void"}, {"sha": "4032ca82e326fc3779708fd96a25073ce090407e", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f376d9c73d2be61e6a8bed48d7445db08d6c3f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f376d9c73d2be61e6a8bed48d7445db08d6c3f/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2F1.cc?ref=77f376d9c73d2be61e6a8bed48d7445db08d6c3f", "patch": "@@ -89,8 +89,10 @@ test02()\n \n   Gt gt;\n \n+#ifndef _GLIBCXX_DEBUG\n   //const int logN = static_cast<int>(std::log(static_cast<double>(N)) + 0.5);\n   const int logN = 3;\n+#endif\n   \n   int s1[N];\n   std::copy(A, A + N, s1);"}]}