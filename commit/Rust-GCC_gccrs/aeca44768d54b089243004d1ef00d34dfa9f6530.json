{"sha": "aeca44768d54b089243004d1ef00d34dfa9f6530", "node_id": "C_kwDOANBUbNoAKGFlY2E0NDc2OGQ1NGIwODkyNDMwMDRkMWVmMDBkMzRkZmE5ZjY1MzA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-17T17:10:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-17T17:10:34Z"}, "message": "c++: Fix cp_genericize_target_expr for TARGET_EXPRs created for global initialization [PR104031]\n\nThe following patch is miscompiled, cp_genericize_target_expr expects\nthat for the constant part split_nonconstant_init will emit an INIT_EXPR\nthat will initialize it, but that doesn't happen and instead we get\nDECL_INITIAL on the TARGET_EXPR_SLOT that isn't initialized anywhere\nin the IL.\n\nThe problem is that the TARGET_EXPR has been created while\ncurrent_function_decl was NULL, it is inside a global var initializer.\nThat means the build_local_temp created VAR_DECL has NULL DECL_CONTEXT.\nLater on when genericizing the ssdf (current_function_decl is already\nnon-NULL), the new cp_genericize_target_expr is called and during\nsplit_nonconstant_init it checks is_local_temp, but that due to the NULL\nDECL_CONTEXT returns false.  DECL_CONTEXT is set only later on during\ngimplification.\n\nThe following patch fixes it by setting DECL_CONTEXT also inside of\ncp_genericize_target_expr, which fixes the testcase.  But if there are\nbetter spots to do that, please let me know...\n\n2022-01-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/104031\n\t* cp-gimplify.c (cp_genericize_target_expr): Set DECL_CONTEXT of\n\tTARGET_EXPR_SLOT to current_function_decl if it was NULL.\n\n\t* g++.dg/cpp1y/pr104031.C: New test.", "tree": {"sha": "02a011d8b42f22feaf41b04b75afd9ab09b5a953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02a011d8b42f22feaf41b04b75afd9ab09b5a953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeca44768d54b089243004d1ef00d34dfa9f6530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeca44768d54b089243004d1ef00d34dfa9f6530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeca44768d54b089243004d1ef00d34dfa9f6530", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeca44768d54b089243004d1ef00d34dfa9f6530/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3a57993359c9759990fe8f2aa4088684ed82190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a57993359c9759990fe8f2aa4088684ed82190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3a57993359c9759990fe8f2aa4088684ed82190"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "ad610309953da253c60a2d3f25507f9ffab55bd7", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeca44768d54b089243004d1ef00d34dfa9f6530/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeca44768d54b089243004d1ef00d34dfa9f6530/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=aeca44768d54b089243004d1ef00d34dfa9f6530", "patch": "@@ -930,9 +930,14 @@ cp_genericize_init_expr (tree *stmt_p)\n static void\n cp_genericize_target_expr (tree *stmt_p)\n {\n+  tree slot = TARGET_EXPR_SLOT (*stmt_p);\n+  /* If TARGET_EXPR is created for some global var initializer, the slot\n+     will have NULL and so is_local_temp will return false for it.  If\n+     this is a ssdf, set DECL_CONTEXT now.  */\n+  if (DECL_CONTEXT (slot) == NULL_TREE)\n+    DECL_CONTEXT (slot) = current_function_decl;\n   cp_genericize_init (&TARGET_EXPR_INITIAL (*stmt_p),\n-\t\t      TARGET_EXPR_INITIAL (*stmt_p),\n-\t\t      TARGET_EXPR_SLOT (*stmt_p));\n+\t\t      TARGET_EXPR_INITIAL (*stmt_p), slot);\n }\n \n /* Genericization context.  */"}, {"sha": "5f736621ae1959151051ce2ce1e2a4fa29b05f08", "filename": "gcc/testsuite/g++.dg/cpp1y/pr104031.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeca44768d54b089243004d1ef00d34dfa9f6530/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr104031.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeca44768d54b089243004d1ef00d34dfa9f6530/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr104031.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr104031.C?ref=aeca44768d54b089243004d1ef00d34dfa9f6530", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/104031\n+// { dg-do run { target c++14 } }\n+// { dg-options \"-O2\" }\n+\n+struct A {\n+  A () {}\n+  ~A () {}\n+};\n+struct B {\n+  A a;\n+  int b = 0;\n+};\n+struct C\n+{\n+  [[gnu::noipa]]\n+  C (B x) { if (x.b != 42) __builtin_abort (); }\n+};\n+static C c ({ .a = A{}, .b = 42 });\n+\n+int\n+main ()\n+{\n+}"}]}