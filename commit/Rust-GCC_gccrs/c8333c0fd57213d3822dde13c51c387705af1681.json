{"sha": "c8333c0fd57213d3822dde13c51c387705af1681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzMzNjMGZkNTcyMTNkMzgyMmRkZTEzYzUxYzM4NzcwNWFmMTY4MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-04-03T13:39:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-04-03T13:39:16Z"}, "message": "mt_allocator.h (__mt_alloc<>::allocate): Factor out some duplicated code.\n\n2004-04-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/mt_allocator.h (__mt_alloc<>::allocate): Factor out\n\tsome duplicated code.\n\t(__mt_alloc<>::_Bin_record): Spare the space of _M_free and _M_used\n\tin the single threaded case.\n\t* testsuite/performance/20_util/allocator/list_sort_search.cc:\n\tReorder and renumber the tests consistently with the other testfiles.\n\t* testsuite/performance/20_util/allocator/map_mt_find.cc: Ditto.\n\t* testsuite/performance/20_util/allocator/map_thread.cc: Ditto.\n\t* testsuite/performance/20_util/allocator/producer_consumer.cc: Ditto.\n\nFrom-SVN: r80375", "tree": {"sha": "e36eddc14c2be56980c947413909455e44f82cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e36eddc14c2be56980c947413909455e44f82cc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8333c0fd57213d3822dde13c51c387705af1681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8333c0fd57213d3822dde13c51c387705af1681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8333c0fd57213d3822dde13c51c387705af1681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8333c0fd57213d3822dde13c51c387705af1681/comments", "author": null, "committer": null, "parents": [{"sha": "a0eabb87e15f593e1c6ce583ee1f11112d94101d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0eabb87e15f593e1c6ce583ee1f11112d94101d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0eabb87e15f593e1c6ce583ee1f11112d94101d"}], "stats": {"total": 100, "additions": 48, "deletions": 52}, "files": [{"sha": "39cfd05674a196a652ffd267e2f6a1710ec2147d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c8333c0fd57213d3822dde13c51c387705af1681", "patch": "@@ -1,3 +1,15 @@\n+2004-04-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/mt_allocator.h (__mt_alloc<>::allocate): Factor out\n+\tsome duplicated code.\n+\t(__mt_alloc<>::_Bin_record): Spare the space of _M_free and _M_used\n+\tin the single threaded case.\n+\t* testsuite/performance/20_util/allocator/list_sort_search.cc:\n+\tReorder and renumber the tests consistently with the other testfiles.\n+\t* testsuite/performance/20_util/allocator/map_mt_find.cc: Ditto.\n+\t* testsuite/performance/20_util/allocator/map_thread.cc: Ditto.\n+\t* testsuite/performance/20_util/allocator/producer_consumer.cc: Ditto.\n+\n 2004-04-02  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/mt_allocator.h (__mt_alloc<>::deallocate):"}, {"sha": "401fc3f0d45ab7abdaf8c0befe88f1572ceb9dd2", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=c8333c0fd57213d3822dde13c51c387705af1681", "patch": "@@ -228,8 +228,8 @@ namespace __gnu_cxx\n \t// Points to the block_record of the next free block.\n         _Block_record* volatile         _M_next;\n \n-\t// The thread id of the thread which has requested this block.\n #ifdef __GTHREADS\n+\t// The thread id of the thread which has requested this block.\n         size_t                          _M_thread_id;\n #endif\n       };\n@@ -241,6 +241,7 @@ namespace __gnu_cxx\n \t// for _S_max_threads + global pool 0.\n         _Block_record** volatile        _M_first;\n \n+#ifdef __GTHREADS\n \t// An \"array\" of counters used to keep track of the amount of\n \t// blocks that are on the freelist/used for each thread id.\n \t// Memory to these \"arrays\" is allocated in _S_initialize() for\n@@ -251,7 +252,6 @@ namespace __gnu_cxx\n \t// Each bin has its own mutex which is used to ensure data\n \t// integrity while changing \"ownership\" on a block.  The mutex\n \t// is initialized in _S_initialize().\n-#ifdef __GTHREADS\n         __gthread_mutex_t*              _M_mutex;\n #endif\n       };\n@@ -359,14 +359,6 @@ namespace __gnu_cxx\n \t\t    }\n \t\t  __gthread_mutex_unlock(__bin._M_mutex);\n \t\t}\n-\t      \n-\t      // Return the first newly added block in our list and\n-\t      // update the counters\n-\t      __block = __bin._M_first[__thread_id];\n-\t      __bin._M_first[__thread_id] = __bin._M_first[__thread_id]->_M_next;\n-\t      __block->_M_thread_id = __thread_id;\n-\t      --__bin._M_free[__thread_id];\n-\t      ++__bin._M_used[__thread_id];\n \t    }\n \t  else\n #endif\n@@ -384,28 +376,20 @@ namespace __gnu_cxx\n \t\t  --__block_count;\n \t\t}\n \t      __block->_M_next = NULL;\n-\t      \n-\t      // Remove from list.\n-\t      __block = __bin._M_first[0];\n-\t      __bin._M_first[0] = __bin._M_first[0]->_M_next;\n \t    }\n \t}\n-      else\n-\t{\n-\t  // \"Default\" operation - we have blocks on our own freelist\n-\t  // grab the first record and update the counters.\n-\t  __block = __bin._M_first[__thread_id];\n-\t  __bin._M_first[__thread_id] = __bin._M_first[__thread_id]->_M_next;\n \n+      __block = __bin._M_first[__thread_id];\n+      __bin._M_first[__thread_id] = __bin._M_first[__thread_id]->_M_next;\n #ifdef __GTHREADS\n-\t  if (__gthread_active_p())\n-\t    {\n-\t      __block->_M_thread_id = __thread_id;\n-\t      --__bin._M_free[__thread_id];\n-\t      ++__bin._M_used[__thread_id];\n-\t    }\n-#endif\n+      if (__gthread_active_p())\n+\t{\n+\t  __block->_M_thread_id = __thread_id;\n+\t  --__bin._M_free[__thread_id];\n+\t  ++__bin._M_used[__thread_id];\n \t}\n+#endif\n+\n       char* __c = reinterpret_cast<char*>(__block) + sizeof(_Block_record);\n       return static_cast<_Tp*>(static_cast<void*>(__c));\n     }"}, {"sha": "317a615b4362a621bb845de8cff37d6f631c32ef", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/list_sort_search.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Flist_sort_search.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Flist_sort_search.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Flist_sort_search.cc?ref=c8333c0fd57213d3822dde13c51c387705af1681", "patch": "@@ -116,10 +116,10 @@ int main ()\n   do_test<malloc_allocator<int> >();\n #endif\n #ifdef TEST_S2\n-  do_test<bitmap_allocator<int> >();\n+  do_test<__mt_alloc<int> >();\n #endif\n #ifdef TEST_S3\n-  do_test<__mt_alloc<int> >();\n+  do_test<bitmap_allocator<int> >();\n #endif\n #ifdef TEST_S4\n   do_test<__pool_alloc<int> >();"}, {"sha": "2ee20f23d687886ab20bd2a475bb513665d48316", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/map_mt_find.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_mt_find.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_mt_find.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_mt_find.cc?ref=c8333c0fd57213d3822dde13c51c387705af1681", "patch": "@@ -142,10 +142,10 @@ int main()\n   exec_tests<malloc_allocator<int> >();\n #endif\n #ifdef TEST_T2\n-  exec_tests<bitmap_allocator<int> >();\n+  exec_tests<__mt_alloc<int> >();\n #endif\n #ifdef TEST_T3\n-  exec_tests<__mt_alloc<int> >();\n+  exec_tests<bitmap_allocator<int> >();\n #endif\n #ifdef TEST_T4\n   exec_tests<__pool_alloc<int> >();"}, {"sha": "c9cf34c6096218523b10a69e4f63ca2811c3a997", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/map_thread.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc?ref=c8333c0fd57213d3822dde13c51c387705af1681", "patch": "@@ -111,23 +111,23 @@ template<typename Container>\n \n int main(void)\n {\n-#ifdef TEST_T1\n+#ifdef TEST_T0\n   test_container(map<int, int>());\n #endif\n-#ifdef TEST_T2\n+#ifdef TEST_T1\n   test_container(map<int, int, less<const int>, new_allocator<int> >());\n #endif\n-#ifdef TEST_T3\n+#ifdef TEST_T2\n   test_container(map<int, int, less<const int>, malloc_allocator<int> >());\n #endif\n-#ifdef TEST_T4\n+#ifdef TEST_T3\n   test_container(map<int, int, less<const int>,\n                      __mt_alloc< pair<const int, int> > >());\n #endif\n-#ifdef TEST_T5\n+#ifdef TEST_T4\n   test_container(map<int, int, less<const int>, bitmap_allocator<int> >());\n #endif\n-#ifdef TEST_T6\n+#ifdef TEST_T5\n   test_container(map<int, int, less<const int>, __pool_alloc<int> >());\n #endif\n   return 0;"}, {"sha": "98f39c19709f685a7c4434a38ad4f38f2451dd16", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/producer_consumer.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fproducer_consumer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8333c0fd57213d3822dde13c51c387705af1681/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fproducer_consumer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fproducer_consumer.cc?ref=c8333c0fd57213d3822dde13c51c387705af1681", "patch": "@@ -290,51 +290,51 @@ template<typename Container>\n \n int main(void)\n {\n-#ifdef TEST_T1\n+#ifdef TEST_T0\n   test_container(vector<test_type, malloc_alloc_type>());\n #endif\n-#ifdef TEST_T2\n+#ifdef TEST_T1\n   test_container(vector<test_type, new_alloc_type>());\n #endif\n-#ifdef TEST_T3\n+#ifdef TEST_T2\n   test_container(vector<test_type, so_alloc_type>());\n #endif\n-#ifdef TEST_T4\n+#ifdef TEST_T3\n   test_container(vector<test_type, bit_alloc_type>());\n #endif\n-#ifdef TEST_T5\n+#ifdef TEST_T4\n   test_container(vector<test_type, po_alloc_type>());\n #endif\n \n-#ifdef TEST_T6\n+#ifdef TEST_T5\n   test_container(list<test_type, malloc_alloc_type>());\n #endif\n-#ifdef TEST_T7\n+#ifdef TEST_T6\n   test_container(list<test_type, new_alloc_type>());\n #endif\n-#ifdef TEST_T8\n+#ifdef TEST_T7\n   test_container(list<test_type, so_alloc_type>());\n #endif\n-#ifdef TEST_T9\n+#ifdef TEST_T8\n   test_container(list<test_type, bit_alloc_type>());\n #endif\n-#ifdef TEST_T10\n+#ifdef TEST_T9\n   test_container(list<test_type, po_alloc_type>());\n #endif\n \n-#ifdef TEST_T11\n+#ifdef TEST_T10\n   test_container(map<test_type, test_type, compare_type, malloc_alloc_type>());\n #endif\n-#ifdef TEST_T12\n+#ifdef TEST_T11\n   test_container(map<test_type, test_type, compare_type, new_alloc_type>());\n #endif\n-#ifdef TEST_T13\n+#ifdef TEST_T12\n   test_container(map<test_type, test_type, compare_type, so_alloc_type>());\n #endif\n-#ifdef TEST_T14\n+#ifdef TEST_T13\n   test_container(map<test_type, test_type, compare_type, bit_alloc_type>());\n #endif\n-#ifdef TEST_T15\n+#ifdef TEST_T14\n   test_container(map<test_type, test_type, compare_type, po_alloc_type>());\n #endif\n "}]}