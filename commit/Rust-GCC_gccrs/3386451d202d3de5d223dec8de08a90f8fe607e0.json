{"sha": "3386451d202d3de5d223dec8de08a90f8fe607e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM4NjQ1MWQyMDJkM2RlNWQyMjNkZWM4ZGUwOGE5MGY4ZmU2MDdlMA==", "commit": {"author": {"name": "Jesse Rosenstock", "email": "jmr@ugcs.caltech.edu", "date": "2002-11-18T14:15:16Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-18T14:15:16Z"}, "message": "2002-11-17  Jesse Rosenstock <jmr@ugcs.caltech.edu>\n\n\t* java/nio/charset/Charset.java\n\t(<clinit>): New method.\n\t(encode): Synchronize use of cached encoder object.\n\t(decode): Synchronize use of cached encoder object.\n\nFrom-SVN: r59218", "tree": {"sha": "93ceced0a04b7328d3bda45902eab4d028e20753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93ceced0a04b7328d3bda45902eab4d028e20753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3386451d202d3de5d223dec8de08a90f8fe607e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3386451d202d3de5d223dec8de08a90f8fe607e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3386451d202d3de5d223dec8de08a90f8fe607e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3386451d202d3de5d223dec8de08a90f8fe607e0/comments", "author": null, "committer": null, "parents": [{"sha": "ea4210ef82eac78a2a512b48c888b88c9912c6eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4210ef82eac78a2a512b48c888b88c9912c6eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4210ef82eac78a2a512b48c888b88c9912c6eb"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "7942b98059db1ce3196a4bafbb30e566b38d5357", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3386451d202d3de5d223dec8de08a90f8fe607e0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3386451d202d3de5d223dec8de08a90f8fe607e0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3386451d202d3de5d223dec8de08a90f8fe607e0", "patch": "@@ -1,3 +1,10 @@\n+2002-11-17  Jesse Rosenstock <jmr@ugcs.caltech.edu>\n+ \n+\t* java/nio/charset/Charset.java\n+\t(<clinit>): New method.\n+\t(encode): Synchronize use of cached encoder object.\n+\t(decode): Synchronize use of cached encoder object.\n+\n 2002-11-18  Michael Koch <konqueror@gmx.de>\n \n \t* gnu/java/nio/ByteBufferImpl.java,"}, {"sha": "cc60c99b9b6a5ec6a56d6daa2b3190c2e90baf31", "filename": "libjava/java/nio/charset/Charset.java", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3386451d202d3de5d223dec8de08a90f8fe607e0/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3386451d202d3de5d223dec8de08a90f8fe607e0/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fcharset%2FCharset.java?ref=3386451d202d3de5d223dec8de08a90f8fe607e0", "patch": "@@ -55,6 +55,18 @@\n  */\n public abstract class Charset implements Comparable\n {\n+  private static CharsetEncoder cachedEncoder;\n+  private static CharsetDecoder cachedDecoder;\n+ \n+  static\n+  {\n+    synchronized (Charset.class)\n+      {\n+        cachedEncoder = null;\n+        cachedDecoder = null;\n+      }\n+  }\n+\n   private final String canonicalName;\n   private final String[] aliases;\n   \n@@ -195,10 +207,21 @@ public final ByteBuffer encode (CharBuffer cb)\n   {\n     try\n       {\n-        // TODO: cache encoders between sucessive invocations\n-        return newEncoder ().onMalformedInput (CodingErrorAction.REPLACE)\n-                            .onUnmappableCharacter (CodingErrorAction.REPLACE)\n-                            .encode (cb);\n+        // NB: This implementation serializes different threads calling\n+        // Charset.encode(), a potential performance problem.  It might\n+        // be better to remove the cache, or use ThreadLocal to cache on\n+        // a per-thread basis.\n+        synchronized (Charset.class)\n+          {\n+            if (cachedEncoder == null)\n+              {\n+                cachedEncoder = newEncoder ()\n+                  .onMalformedInput (CodingErrorAction.REPLACE)\n+                  .onUnmappableCharacter (CodingErrorAction.REPLACE);\n+              }\n+\n+            return cachedEncoder.encode (cb);\n+          }\n       }\n     catch (CharacterCodingException e)\n       {\n@@ -214,11 +237,22 @@ public final ByteBuffer encode (String str)\n   public CharBuffer decode (ByteBuffer bb)\n   {\n     try\n-     {\n-        // TODO: cache encoders between sucessive invocations\n-        return newDecoder ().onMalformedInput (CodingErrorAction.REPLACE)\n-                            .onUnmappableCharacter (CodingErrorAction.REPLACE)\n-                            .decode (bb);\n+      {\n+        // NB: This implementation serializes different threads calling\n+        // Charset.decode(), a potential performance problem.  It might\n+        // be better to remove the cache, or use ThreadLocal to cache on\n+        // a per-thread basis.\n+        synchronized (Charset.class)\n+          {\n+            if (cachedDecoder == null)\n+              {\n+                cachedDecoder = newDecoder ()\n+                  .onMalformedInput (CodingErrorAction.REPLACE)\n+                  .onUnmappableCharacter (CodingErrorAction.REPLACE);\n+              }\n+\n+            return cachedDecoder.decode (bb);\n+          }\n       }\n     catch (CharacterCodingException e)\n       {"}]}