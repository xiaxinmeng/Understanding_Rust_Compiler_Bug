{"sha": "a5943075801dd08067c212ff6a6139fe62fba195", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5NDMwNzU4MDFkZDA4MDY3YzIxMmZmNmE2MTM5ZmU2MmZiYTE5NQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-22T07:25:56Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-22T07:25:56Z"}, "message": "Initial revision\n\nFrom-SVN: r7135", "tree": {"sha": "079809e976535c249e715eda45a0d76439be9178", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/079809e976535c249e715eda45a0d76439be9178"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5943075801dd08067c212ff6a6139fe62fba195", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5943075801dd08067c212ff6a6139fe62fba195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5943075801dd08067c212ff6a6139fe62fba195", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5943075801dd08067c212ff6a6139fe62fba195/comments", "author": null, "committer": null, "parents": [{"sha": "7177d104dda07e20323efae4d4560237987d77aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7177d104dda07e20323efae4d4560237987d77aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7177d104dda07e20323efae4d4560237987d77aa"}], "stats": {"total": 189, "additions": 189, "deletions": 0}, "files": [{"sha": "c1e9334fb562be23618d1c86db94c54297c0eb61", "filename": "gcc/cp/Make-lang.in", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5943075801dd08067c212ff6a6139fe62fba195/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5943075801dd08067c212ff6a6139fe62fba195/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=a5943075801dd08067c212ff6a6139fe62fba195", "patch": "@@ -0,0 +1,155 @@\n+# Top level makefile fragment for GNU C++.\n+#   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+#This file is part of GNU CC.\n+\n+#GNU CC is free software; you can redistribute it and/or modify\n+#it under the terms of the GNU General Public License as published by\n+#the Free Software Foundation; either version 2, or (at your option)\n+#any later version.\n+\n+#GNU CC is distributed in the hope that it will be useful,\n+#but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#GNU General Public License for more details.\n+\n+#You should have received a copy of the GNU General Public License\n+#along with GNU CC; see the file COPYING.  If not, write to\n+#the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n+\n+# This file provides the language dependent support in the main Makefile.\n+# Each language makefile fragment must provide the following targets:\n+#\n+# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,\n+# foo.info, foo.dvi,\n+# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,\n+# foo.uninstall, foo.distdir,\n+# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean, foo.realclean,\n+# foo.stage1, foo.stage2, foo.stage3, foo.stage4\n+#\n+# where `foo' is the name of the language.\n+#\n+# It should also provide rules for:\n+#\n+# - making any compiler driver (eg: g++)\n+# - the compiler proper (eg: cc1plus)\n+# - define the names for selecting the language in LANGUAGES.\n+\f\n+# Extra flags to pass to recursive makes.\n+CXX_FLAGS_TO_PASS = \\\n+\t\"CXX_FOR_BUILD=$(CXX_FOR_BUILD)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CXX_FOR_TARGET=$(CXX_FOR_TARGET)\"\n+\n+# Define the names for selecting c++ in LANGUAGES.\n+# Note that it would be nice to move the dependency on g++\n+# into the C++ rule, but that needs a little bit of work\n+# to do the right thing within all.cross.\n+C++ c++: cc1plus\n+\n+# Create the compiler driver for g++.\n+g++: $(srcdir)/cp/g++.c $(CONFIG_H) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) -o g++ $(srcdir)/cp/g++.c $(LIBS)\n+\n+# Create a version of the g++ driver which calls the cross-compiler.\n+g++-cross: $(srcdir)/cp/g++.c\n+\t$(CC) $(ALL_CFLAGS) $(INCLUDES) $(LDFLAGS) -o g++-cross \\\n+\t   -DGCC_NAME=\\\"$(GCC_CROSS_NAME)\\\" $(srcdir)/cp/g++.c version.o $(LIBS)\n+\n+CXX_SRCS = $(srcdir)/cp/call.c $(srcdir)/cp/decl2.c \\\n+ $(srcdir)/cp/except.c $(srcdir)/cp/input.c $(srcdir)/cp/pt.c \\\n+ $(srcdir)/cp/spew.c $(srcdir)/cp/xref.c $(srcdir)/cp/class.c \\\n+ $(srcdir)/cp/edsel.c $(srcdir)/cp/expr.c $(srcdir)/cp/lex.c \\\n+ $(srcdir)/cp/ptree.c $(srcdir)/cp/tree.c $(srcdir)/cp/cvt.c \\\n+ $(srcdir)/cp/errfn.c $(srcdir)/cp/gc.c $(srcdir)/cp/method.c \\\n+ $(srcdir)/cp/search.c $(srcdir)/cp/typeck.c $(srcdir)/cp/decl.c \\\n+ $(srcdir)/cp/error.c $(srcdir)/cp/init.c $(srcdir)/cp/parse.y \\\n+ $(srcdir)/cp/sig.c $(srcdir)/cp/typeck2.c\n+\n+cc1plus: $(P) $(CXX_SRCS) $(OBJS) $(BC_OBJS) $(LIBDEPS) c-common.o\n+\tcd cp; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1plus\n+\f\n+# Build hooks:\n+\n+c++.all.build: g++\n+c++.all.cross: g++-cross\n+c++.start.encap: g++\n+c++.rest.encap:\n+\n+c++.info:\n+c++.dvi:\n+\f\n+# Install hooks:\n+# cc1plus is installed elsewhere as part of $(COMPILERS).\n+\n+# Nothing to do here.\n+c++.install-normal:\n+\n+# Install the driver program as $(target)-g++\n+# and also as either g++ (if native) or $(tooldir)/bin/g++.\n+c++.install-common:\n+\t-if [ -f cc1plus ] ; then \\\n+\t  if [ -f gcc-cross ] ; then \\\n+\t    rm -f $(bindir)/$(target)-g++; \\\n+\t    $(INSTALL_PROGRAM) g++-cross $(bindir)/$(target)-g++; \\\n+\t    chmod a+x $(bindir)/$(target)-g++; \\\n+\t    rm -f $(bindir)/$(target)-c++; \\\n+\t    ln $(bindir)/$(target)-g++ $(bindir)/$(target)-c++; \\\n+\t  else \\\n+\t    rm -f $(bindir)/g++; \\\n+\t    $(INSTALL_PROGRAM) g++ $(bindir)/g++; \\\n+\t    chmod a+x $(bindir)/g++; \\\n+\t    rm -f $(bindir)/c++; \\\n+\t    ln $(bindir)/g++ $(bindir)/c++; \\\n+\t  fi ; \\\n+\tfi\n+\n+c++.install-info:\n+\n+c++.install-man: $(srcdir)/cp/g++.1\n+\t-if [ -f cc1plus ] ; then \\\n+\t  $(INSTALL_DATA) $(srcdir)/cp/g++.1 $(mandir)/g++$(manext) ; \\\n+\t  chmod a-x $(mandir)/g++$(manext) ; \\\n+\telse true; fi\n+\n+c++.uninstall:\n+\t-rm -rf $(bindir)/g++ $(bindir)/c++\n+\t-rm -rf $(bindir)/$(target)-g++ $(bindir)/$(target)-c++\n+\t-rm -rf $(mandir)/g++$(manext)\n+\f\n+# Clean hooks:\n+# A lot of the ancillary files are deleted by the main makefile.\n+# We just have to delete files specific to us.\n+\n+c++.mostlyclean:\n+\t-rm -f cp/*.o\n+c++.clean:\n+c++.distclean:\n+\t-rm -f cp/config.status cp/Makefile\n+\t-rm -f cp/parse.output\n+c++.extraclean:\n+c++.realclean:\n+\t-rm -f cp/parse.c cp/parse.h\n+\f\n+# Stage hooks:\n+# The main makefile has already created stage?/cp.\n+\n+c++.stage1:\n+\t-mv cp/*.o stage1/cp\n+c++.stage2:\n+\t-mv cp/*.o stage2/cp\n+c++.stage3:\n+\t-mv cp/*.o stage3/cp\n+c++.stage4:\n+\t-mv cp/*.o stage4/cp\n+\f\n+# Maintenance hooks:\n+\n+# This target creates the files that can be rebuilt, but go in the\n+# distribution anyway.  It then copies the files to the distdir directory.\n+c++.distdir:\n+\tcd cp ; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) parse.c hash.h\n+\tcd cp; \\\n+\tfor file in *[0-9a-zA-Z+]; do \\\n+\t  ln $$file ../tmp/cp >/dev/null 2>&1 || cp $$file ../tmp/cp; \\\n+\tdone"}, {"sha": "8290ac43bac17b52407fc6ab994b67c53e146bbe", "filename": "gcc/cp/config-lang.in", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5943075801dd08067c212ff6a6139fe62fba195/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5943075801dd08067c212ff6a6139fe62fba195/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=a5943075801dd08067c212ff6a6139fe62fba195", "patch": "@@ -0,0 +1,34 @@\n+# Top level configure fragment for GNU C++.\n+#   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+#This file is part of GNU CC.\n+\n+#GNU CC is free software; you can redistribute it and/or modify\n+#it under the terms of the GNU General Public License as published by\n+#the Free Software Foundation; either version 2, or (at your option)\n+#any later version.\n+\n+#GNU CC is distributed in the hope that it will be useful,\n+#but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#GNU General Public License for more details.\n+\n+#You should have received a copy of the GNU General Public License\n+#along with GNU CC; see the file COPYING.  If not, write to\n+#the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n+\n+# Configure looks for the existence of this file to auto-config each language.\n+# We define several parameters used by configure:\n+#\n+# language\t- name of language as it would appear in $(LANGUAGES)\n+# compilers\t- value to add to $(COMPILERS)\n+# stagestuff\t- files to add to $(STAGESTUFF)\n+# diff_excludes\t- files to ignore when building diffs between two versions.\n+\n+language=\"c++\"\n+\n+compilers=\"cc1plus\"\n+\n+stagestuff=\"g++ g++-cross cc1plus\"\n+\n+diff_excludes=\"-x cp/parse.c -x cp/parse.h\""}]}