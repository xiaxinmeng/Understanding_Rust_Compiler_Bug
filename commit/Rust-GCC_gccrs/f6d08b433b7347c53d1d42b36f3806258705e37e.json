{"sha": "f6d08b433b7347c53d1d42b36f3806258705e37e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZkMDhiNDMzYjczNDdjNTNkMWQ0MmIzNmYzODA2MjU4NzA1ZTM3ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-10-30T17:39:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-30T17:39:18Z"}, "message": "re PR libstdc++/41759 ([C++0x] <random> static_assert phrasing should be positive)\n\n2009-10-30  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/41759\n\t* include/bits/random.h: Tweak a bit the text of some static_asserts.\n\nFrom-SVN: r153762", "tree": {"sha": "336fd3880882a187b49726b453134bc815a1c452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/336fd3880882a187b49726b453134bc815a1c452"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6d08b433b7347c53d1d42b36f3806258705e37e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d08b433b7347c53d1d42b36f3806258705e37e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d08b433b7347c53d1d42b36f3806258705e37e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d08b433b7347c53d1d42b36f3806258705e37e/comments", "author": null, "committer": null, "parents": [{"sha": "ef4c43006d3b3e7ff1c50b2b22e1aa94570dde07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4c43006d3b3e7ff1c50b2b22e1aa94570dde07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef4c43006d3b3e7ff1c50b2b22e1aa94570dde07"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "600a93ef74b756005722e33b3d41f40ea80c12da", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d08b433b7347c53d1d42b36f3806258705e37e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d08b433b7347c53d1d42b36f3806258705e37e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f6d08b433b7347c53d1d42b36f3806258705e37e", "patch": "@@ -1,3 +1,8 @@\n+2009-10-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/41759\n+\t* include/bits/random.h: Tweak a bit the text of some static_asserts.\n+\n 2009-10-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/type_traits (__is_convertible_simple): Remove."}, {"sha": "12f484b503e8d05aceb8a2321237d33739ca7807", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d08b433b7347c53d1d42b36f3806258705e37e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d08b433b7347c53d1d42b36f3806258705e37e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=f6d08b433b7347c53d1d42b36f3806258705e37e", "patch": "@@ -154,9 +154,9 @@ namespace std\n     class linear_congruential_engine\n     {\n       static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n-\t\t    \"_UIntType not an unsigned integral type\");\n+\t\t    \"substituting _UIntType not an unsigned integral type\");\n       static_assert(__m == 0u || (__a < __m && __c < __m),\n-\t\t    \"template argument __m out of bounds\");\n+\t\t    \"template argument substituting __m out of bounds\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -341,26 +341,31 @@ namespace std\n     class mersenne_twister_engine\n     {\n       static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n-\t\t    \"_UIntType not an unsigned integral type\");\n+\t\t    \"substituting _UIntType not an unsigned integral type\");\n       static_assert(1u <= __m && __m <= __n,\n-\t\t    \"template argument __m out of bounds\");\n-      static_assert(__r <= __w, \"template argument __r out of bound\");\n-      static_assert(__u <= __w, \"template argument __u out of bound\");\n-      static_assert(__s <= __w, \"template argument __s out of bound\");\n-      static_assert(__t <= __w, \"template argument __t out of bound\");\n-      static_assert(__l <= __w, \"template argument __l out of bound\");\n+\t\t    \"template argument substituting __m out of bounds\");\n+      static_assert(__r <= __w, \"template argument substituting \"\n+\t\t    \"__r out of bound\");\n+      static_assert(__u <= __w, \"template argument substituting \"\n+\t\t    \"__u out of bound\");\n+      static_assert(__s <= __w, \"template argument substituting \"\n+\t\t    \"__s out of bound\");\n+      static_assert(__t <= __w, \"template argument substituting \"\n+\t\t    \"__t out of bound\");\n+      static_assert(__l <= __w, \"template argument substituting \"\n+\t\t    \"__l out of bound\");\n       static_assert(__w <= std::numeric_limits<_UIntType>::digits,\n-\t\t    \"template argument __w out of bound\");\n+\t\t    \"template argument substituting __w out of bound\");\n       static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n-\t\t    \"template argument __a out of bound\");\n+\t\t    \"template argument substituting __a out of bound\");\n       static_assert(__b <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n-\t\t    \"template argument __b out of bound\");\n+\t\t    \"template argument substituting __b out of bound\");\n       static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n-\t\t    \"template argument __c out of bound\");\n+\t\t    \"template argument substituting __c out of bound\");\n       static_assert(__d <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n-\t\t    \"template argument __d out of bound\");\n+\t\t    \"template argument substituting __d out of bound\");\n       static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n-\t\t    \"template argument __f out of bound\");\n+\t\t    \"template argument substituting __f out of bound\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -530,11 +535,11 @@ namespace std\n     class subtract_with_carry_engine\n     {\n       static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n-\t\t    \"_UIntType not an unsigned integral type\");\n+\t\t    \"substituting _UIntType not an unsigned integral type\");\n       static_assert(0u < __s && __s < __r,\n-\t\t    \"template argument __s out of bounds\");\n+\t\t    \"template argument substituting __s out of bounds\");\n       static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,\n-\t\t    \"template argument __w out of bounds\");\n+\t\t    \"template argument substituting __w out of bounds\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -693,7 +698,7 @@ namespace std\n     class discard_block_engine\n     {\n       static_assert(1 <= __r && __r <= __p,\n-\t\t    \"template argument __r out of bounds\");\n+\t\t    \"template argument substituting __r out of bounds\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -893,9 +898,9 @@ namespace std\n     class independent_bits_engine\n     {\n       static_assert(std::is_unsigned<_UIntType>::value, \"template argument \"\n-\t\t    \"_UIntType not an unsigned integral type\");\n+\t\t    \"substituting _UIntType not an unsigned integral type\");\n       static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,\n-\t\t    \"template argument __w out of bounds\");\n+\t\t    \"template argument substituting __w out of bounds\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -1089,7 +1094,8 @@ namespace std\n   template<typename _RandomNumberEngine, size_t __k>\n     class shuffle_order_engine\n     {\n-      static_assert(1u <= __k, \"template argument __k out of bound\");\n+      static_assert(1u <= __k, \"template argument substituing \"\n+\t\t    \"__k out of bound\");\n \n     public:\n       /** The type of the generated random value. */"}]}