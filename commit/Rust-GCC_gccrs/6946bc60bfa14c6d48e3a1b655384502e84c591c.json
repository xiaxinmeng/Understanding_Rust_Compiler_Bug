{"sha": "6946bc60bfa14c6d48e3a1b655384502e84c591c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk0NmJjNjBiZmExNGM2ZDQ4ZTNhMWI2NTUzODQ1MDJlODRjNTkxYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-10-21T09:59:32Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-10-21T09:59:32Z"}, "message": "c-common.c (c_apply_type_quals_to_decl): Don't crash when `restrict' is applied to a non-pointer variable.\n\n\t* c-common.c (c_apply_type_quals_to_decl): Don't crash when\n\t`restrict' is applied to a non-pointer variable.\n\nFrom-SVN: r23213", "tree": {"sha": "3d4c0623ef92039a6f5d9f9c5606e83c0764cb62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d4c0623ef92039a6f5d9f9c5606e83c0764cb62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6946bc60bfa14c6d48e3a1b655384502e84c591c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6946bc60bfa14c6d48e3a1b655384502e84c591c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6946bc60bfa14c6d48e3a1b655384502e84c591c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6946bc60bfa14c6d48e3a1b655384502e84c591c/comments", "author": null, "committer": null, "parents": [{"sha": "3932261a55eb9840491d2cee5bb58d6fff0533fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3932261a55eb9840491d2cee5bb58d6fff0533fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3932261a55eb9840491d2cee5bb58d6fff0533fa"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "9799e65f9c2e0935ab189d192156d4344d6ab20b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6946bc60bfa14c6d48e3a1b655384502e84c591c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6946bc60bfa14c6d48e3a1b655384502e84c591c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6946bc60bfa14c6d48e3a1b655384502e84c591c", "patch": "@@ -1,3 +1,8 @@\n+Wed Oct 21 09:58:51 1998  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* c-common.c (c_apply_type_quals_to_decl): Don't crash when\n+\t`restrict' is applied to a non-pointer variable.\n+\n Wed Oct 21 09:18:58 1998  Mark Mitchell  <mark@markmitchell.com>\n \n \t* invoke.texi: Document -flang-isoc9x."}, {"sha": "508a8c2e59913b145c119149e90e23749d615a7e", "filename": "gcc/c-common.c", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6946bc60bfa14c6d48e3a1b655384502e84c591c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6946bc60bfa14c6d48e3a1b655384502e84c591c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6946bc60bfa14c6d48e3a1b655384502e84c591c", "patch": "@@ -3037,26 +3037,34 @@ c_apply_type_quals_to_decl (type_quals, decl)\n       TREE_SIDE_EFFECTS (decl) = 1;\n       TREE_THIS_VOLATILE (decl) = 1;\n     }\n-  if ((type_quals & TYPE_QUAL_RESTRICT) && flag_strict_aliasing)\n+  if (type_quals & TYPE_QUAL_RESTRICT)\n     {\n-      /* No two restricted pointers can point at the same thing.\n-\t However, a restricted pointer can point at the same thing as\n-\t an unrestricted pointer, if that unrestricted pointer is\n-\t based on the restricted pointer.  So, we make the alias set\n-\t for the restricted pointer a subset of the alias set for the\n-\t type pointed to by the type of the decl.  */\n-\n-      int pointed_to_alias_set \n-\t= get_alias_set (TREE_TYPE (TREE_TYPE (decl)));\n-\n-      if (!pointed_to_alias_set)\n-\t/* It's not legal to make a subset of alias set zero.  */\n-\t    ;\n-      else\n+      if (!TREE_TYPE (decl)\n+\t  || !POINTER_TYPE_P (TREE_TYPE (decl))\n+\t  || !C_TYPE_OBJECT_OR_INCOMPLETE_P (TREE_TYPE (TREE_TYPE (decl))))\n+\terror (\"invalid use of `restrict'\");\n+      else if (flag_strict_aliasing)\n \t{\n-\t  DECL_POINTER_ALIAS_SET (decl) = new_alias_set ();\n-\t  record_alias_subset  (pointed_to_alias_set,\n-\t\t\t\tDECL_POINTER_ALIAS_SET (decl));\n+\t  /* No two restricted pointers can point at the same thing.\n+\t     However, a restricted pointer can point at the same thing\n+\t     as an unrestricted pointer, if that unrestricted pointer\n+\t     is based on the restricted pointer.  So, we make the\n+\t     alias set for the restricted pointer a subset of the\n+\t     alias set for the type pointed to by the type of the\n+\t     decl.  */\n+\n+\t  int pointed_to_alias_set \n+\t    = get_alias_set (TREE_TYPE (TREE_TYPE (decl)));\n+\t  \n+\t  if (!pointed_to_alias_set)\n+\t    /* It's not legal to make a subset of alias set zero.  */\n+\t    ;\n+\t  else\n+\t    {\n+\t      DECL_POINTER_ALIAS_SET (decl) = new_alias_set ();\n+\t      record_alias_subset  (pointed_to_alias_set,\n+\t\t\t\t    DECL_POINTER_ALIAS_SET (decl));\n+\t    }\n \t}\n     }\n }"}]}