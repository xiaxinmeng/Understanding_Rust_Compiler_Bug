{"sha": "47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "node_id": "C_kwDOANBUbNoAKDQ3YTZhZTU2NTg0ZjVlM2NhYWFjNzRlMTU4Yjc3YmYxYzRmZGQ3NzQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-21T00:17:52Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-10-21T00:17:52Z"}, "message": "Daily bump.", "tree": {"sha": "42c0fb98a108061dad18a6b2bef186bd2635d79c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42c0fb98a108061dad18a6b2bef186bd2635d79c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/comments", "author": null, "committer": null, "parents": [{"sha": "ecb20df4fa6d99daa635c7fb662dc0554610777e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb20df4fa6d99daa635c7fb662dc0554610777e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecb20df4fa6d99daa635c7fb662dc0554610777e"}], "stats": {"total": 334, "additions": 333, "deletions": 1}, "files": [{"sha": "0b65ec43dfc715577128e4b771cf104389454fd5", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "patch": "@@ -1,3 +1,8 @@\n+2022-10-20  Jonathan Wakely   <jwakely@redhat.com>\n+\t    Ulrich Drepper  <drepper@redhat.com>\n+\n+\t* gcc_update: Add rule for gcc/cp/std-name-hint.gperf.\n+\n 2022-10-07  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_update_version.py: Remove extra fetch."}, {"sha": "26fc404a2348b464433849c5eb70238fb6a3dbd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "patch": "@@ -1,3 +1,168 @@\n+2022-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR c++/106654\n+\t* value-query.cc (get_range_global): Handle non integer ranges for\n+\tdefault def SSA names.\n+\n+2022-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (foperator_unordered_lt::op1_range): New.\n+\t(foperator_unordered_lt::op2_range): New.\n+\n+2022-10-20  Artem Klimov  <jakmobius@gmail.com>\n+\t     Alexander Monakov   <amonakov@gcc.gnu.org>\n+\n+\tPR middle-end/99619\n+\t* ipa-visibility.cc (function_and_variable_visibility): Promote\n+\tTLS access model afer visibility optimizations.\n+\t* varasm.cc (have_optimized_refs): New helper.\n+\t(optimize_dyn_tls_for_decl_p): New helper. Use it ...\n+\t(decl_default_tls_model): ... here in place of 'optimize' check.\n+\n+2022-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (foperator_unordered_le::op1_range): Adjust\n+\tfalse side with a NAN operand.\n+\t(foperator_unordered_le::op2_range): Same.\n+\t(foperator_unordered_gt::op1_range): Same.\n+\t(foperator_unordered_gt::op2_range): Same.\n+\t(foperator_unordered_ge::op1_range): Same.\n+\t(foperator_unordered_ge::op2_range): Same.\n+\t(foperator_unordered_equal::op1_range): Same.\n+\n+2022-10-20  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR tree-optimization/107326\n+\t* tree-vect-patterns.cc (vect_recog_bitfield_ref_pattern): Change\n+\tvectype when widening container.\n+\n+2022-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.h (frange::set_varying): Do not set NAN flags for\n+\t!HONOR_NANS.\n+\t* value-range.cc (frange::normalize_kind): Adjust for no NAN when\n+\t!HONOR_NANS.\n+\t(frange::verify_range): Same.\n+\t* range-op-float.cc (maybe_isnan): Remove flag_finite_math_only check.\n+\n+2022-10-20  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (finite_operand_p): Remove.\n+\t(finite_operands_p): Rename to...\n+\t(maybe_isnan): ...this.\n+\t(frelop_early_resolve): Use maybe_isnan instead of finite_operands_p.\n+\t(foperator_equal::fold_range): Same.\n+\t(foperator_equal::op1_range): Same.\n+\t(foperator_not_equal::fold_range): Same.\n+\t(foperator_lt::fold_range): Same.\n+\t(foperator_le::fold_range): Same.\n+\t(foperator_gt::fold_range): Same.\n+\t(foperator_ge::fold_range): Same.\n+\n+2022-10-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* passes.cc (pass_manager::register_pass): Fix a comment\n+\ttypo - copmilation -> compilation.\n+\n+2022-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.cc (vect_phi_first_order_recurrence_p):\n+\tDisallow latch PHI defs.\n+\t(vectorizable_recurr): Revert previous change.\n+\n+2022-10-20  Julian Brown  <julian@codesourcery.com>\n+\n+\tPR target/105421\n+\t* config/gcn/gcn.cc (gcn_detect_incoming_pointer_arg): Any pointer\n+\targument forces FLAT addressing mode, not just\n+\tpointer-to-non-aggregate.\n+\n+2022-10-20  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* configure.ac (AC_CONFIG_MACRO_DIRS): Instantiate.\n+\t* configure: Regenerate.\n+\n+2022-10-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins.h\n+\t(gimple_folder::fold_to_cstu): New member function.\n+\t* config/aarch64/aarch64-sve-builtins.cc\n+\t(gimple_folder::fold_to_cstu): Define.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc\n+\t(svcnt_bhwd_impl::fold): Use it.\n+\n+2022-10-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins-functions.h (quiet)\n+\t(rtx_code_function, rtx_code_function_rotated, unspec_based_function)\n+\t(unspec_based_function_rotated, unspec_based_function_exact_insn)\n+\t(unspec_based_fused_function, unspec_based_fused_lane_function):\n+\tReplace constructors with using directives.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc (svcnt_bhwd_pat_impl)\n+\t(svcreate_impl, svdotprod_lane_impl, svget_impl, svld1_extend_impl)\n+\t(svld1_gather_extend_impl, svld234_impl, svldff1_gather_extend)\n+\t(svset_impl, svst1_scatter_truncate_impl, svst1_truncate_impl)\n+\t(svst234_impl, svundef_impl): Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-sve2.cc\n+\t(svldnt1_gather_extend_impl, svmovl_lb_impl): Likewise.\n+\t(svstnt1_scatter_truncate_impl): Likewise.\n+\n+2022-10-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins-base.cc: Replace CONSTEXPR\n+\twith constexpr throughout.\n+\t* config/aarch64/aarch64-sve-builtins-functions.h: Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-shapes.cc: Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-sve2.cc: Likewise.\n+\t* config/aarch64/aarch64-sve-builtins.cc: Likewise.\n+\n+2022-10-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (*aarch64_brk<brk_op>_cc): Remove\n+\tmerging alternative.\n+\t(*aarch64_brk<brk_op>_ptest): Likewise.\n+\n+2022-10-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (SVE_BRKP): New iterator.\n+\t* config/aarch64/aarch64-sve.md (*aarch64_brkn_cc): New pattern.\n+\t(*aarch64_brkn_ptest): Likewise.\n+\t(*aarch64_brk<brk_op>_cc): Restrict to SVE_BRKP.\n+\t(*aarch64_brk<brk_op>_ptest): Likewise.\n+\n+2022-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/107305\n+\tPR c/107306\n+\t* tree-cfg.h (verify_gimple_in_seq): Add parameter to\n+\tindicate whether to emit an ICE.  Add return value.\n+\t(verify_gimple_in_cfg): Likewise.\n+\t* tree-cfg.cc (verify_gimple_in_seq): Likewise.\n+\t(verify_gimple_in_cfg): Likewise.\n+\n+2022-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107240\n+\t* tree-vect-patterns.cc (vect_recog_bit_insert_pattern): Attempt to\n+\tsimplify shifted value first.\n+\n+2022-10-20  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-gori.h (compute_operand_range): Make public.\n+\t* gimple-range-infer.cc (gimple_infer_range::check_assume_func): New.\n+\t(gimple_infer_range::gimple_infer_range): Check for assume calls.\n+\t* gimple-range-infer.h (check_assume_func): Add prototype.\n+\t* gimple-range.cc (assume_query::assume_range_p): New.\n+\t(assume_query::range_of_expr): New.\n+\t(assume_query::assume_query): New.\n+\t(assume_query::calculate_op): New.\n+\t(assume_query::calculate_phi): New.\n+\t(assume_query::check_taken_edge): New.\n+\t(assume_query::calculate_stmt): New.\n+\t(assume_query::dump): New.\n+\t* gimple-range.h (class assume_query): New.\n+\t* tree-vrp.cc (pass_assumptions::execute): Add processing.\n+\n 2022-10-19  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* range-op-float.cc (build_le): Document result."}, {"sha": "0f7d77c700eb87c896cd1501f8d5eef85c956e13", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "patch": "@@ -1 +1 @@\n-20221020\n+20221021"}, {"sha": "76fe5fe0f128f75c52d047692142c772bd31ec6f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "patch": "@@ -1,3 +1,10 @@\n+2022-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/107305\n+\tPR c/107306\n+\t* gimple-parser.cc (c_parser_parse_gimple_body): Verify\n+\tthe parsed IL and zap the body on error.\n+\n 2022-10-18  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/107164"}, {"sha": "830324c045031a3395e0d22c40cc09da47b2be5d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "patch": "@@ -1,3 +1,26 @@\n+2022-10-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* pt.cc (lookup_and_finish_template_variable): Don't\n+\tinstantiate if the template's scope is dependent.\n+\t(tsubst_copy) <case TEMPLATE_DECL>: Pass entering_scope=true\n+\twhen substituting the class scope.\n+\n+2022-10-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102963\n+\t* module.cc (node_template_info): Handle CONCEPT_DECL.\n+\n+2022-10-20  Jonathan Wakely   <jwakely@redhat.com>\n+\t    Ulrich Drepper  <drepper@redhat.com>\n+\n+\t* Make-lang.in: Add rules to generate std-name-hint.gperf.  Adjust\n+\trule to generate std-name-hint.h to allow chain rule.\n+\t* std-name-hint.h: Regenerated.\n+\t* std-name-hint.gperf: This file is now generated.\n+\t* cxxapi-data.csv: New file.  CSV file with C++ API data.\n+\t* gen-cxxapi-file.py: New file.  Generate std-name-hint.gperf\n+\tand module export source (in future).\n+\n 2022-10-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/85043"}, {"sha": "ab1810edf3412669daa10aa671a69779e8f1a5bf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "patch": "@@ -1,3 +1,10 @@\n+2022-10-20  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/105633\n+\t* expr.cc (find_array_section): Move check for NULL pointers so\n+\tthat both subscript triplets and vector subscripts are covered.\n+\n 2022-10-17  Steve Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/104330"}, {"sha": "a201268405b1860a507bdbe8c6b37523f9af3d0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "patch": "@@ -1,3 +1,97 @@\n+2022-10-20  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/105633\n+\t* gfortran.dg/pr105633.f90: New test.\n+\n+2022-10-20  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>\n+\t    Yvan ROUX  <yvan.roux@foss.st.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_fenv_exceptions_double): New.\n+\t(check_effective_target_fenv_exceptions_long_double): New.\n+\t* gcc.dg/c2x-float-7.c: Split into 3 tests...\n+\t* gcc.dg/c2x-float-7a.c: Float part of c2x-float-7.c.\n+\t* gcc.dg/c2x-float-7b.c: Double part of c2x-float-7.c.\n+\t* gcc.dg/c2x-float-7c.c: Long double part of c2x-float-7.c.\n+\t* gcc.dg/pr95115.c: Switch to fenv_exceptions_double.\n+\t* gcc.dg/torture/float32x-nan-floath.c: Likewise.\n+\t* gcc.dg/torture/float32x-nan.c: Likewise.\n+\t* gcc.dg/torture/float64-nan-floath.c: Likewise.\n+\t* gcc.dg/torture/float64-nan.c: Likewise.\n+\t* gcc.dg/torture/inf-compare-1.c: Likewise.\n+\t* gcc.dg/torture/inf-compare-2.c: Likewise.\n+\t* gcc.dg/torture/inf-compare-3.c: Likewise.\n+\t* gcc.dg/torture/inf-compare-4.c: Likewise.\n+\t* gcc.dg/torture/inf-compare-5.c: Likewise.\n+\t* gcc.dg/torture/inf-compare-6.c: Likewise.\n+\t* gcc.dg/torture/inf-compare-7.c: Likewise.\n+\t* gcc.dg/torture/inf-compare-8.c: Likewise.\n+\t* gcc.dg/torture/pr52451.c: Likewise.\n+\t* gcc.dg/torture/pr82692.c: Likewise.\n+\t* gcc.dg/torture/inf-compare-1-float.c: New test.\n+\t* gcc.dg/torture/inf-compare-2-float.c: New test.\n+\t* gcc.dg/torture/inf-compare-3-float.c: New test.\n+\t* gcc.dg/torture/inf-compare-4-float.c: New test.\n+\t* gcc.dg/torture/inf-compare-5-float.c: New test.\n+\t* gcc.dg/torture/inf-compare-6-float.c: New test.\n+\t* gcc.dg/torture/inf-compare-7-float.c: New test.\n+\t* gcc.dg/torture/inf-compare-8-float.c: New test.\n+\n+2022-10-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-friend10.C: New test.\n+\n+2022-10-20  Artem Klimov  <jakmobius@gmail.com>\n+\t     Alexander Monakov   <amonakov@gcc.gnu.org>\n+\n+\tPR middle-end/99619\n+\t* gcc.dg/tls/vis-attr-gd.c: New test.\n+\t* gcc.dg/tls/vis-attr-hidden-gd.c: New test.\n+\t* gcc.dg/tls/vis-attr-hidden.c: New test.\n+\t* gcc.dg/tls/vis-flag-hidden-gd.c: New test.\n+\t* gcc.dg/tls/vis-flag-hidden.c: New test.\n+\t* gcc.dg/tls/vis-pragma-hidden-gd.c: New test.\n+\t* gcc.dg/tls/vis-pragma-hidden.c: New test.\n+\n+2022-10-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/102963\n+\t* g++.dg/modules/concept-7_a.C: New test.\n+\t* g++.dg/modules/concept-7_b.C: New test.\n+\n+2022-10-20  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.dg/vect/pr107326.c: New test.\n+\t* gcc.dg/vect/vect-bitfield-read-7.c: New test.\n+\n+2022-10-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/pr107271.c: Add -Wno-psabi to dg-options.\n+\t* gcc.dg/debug/btf/btf-function-3.c: Likewise.\n+\n+2022-10-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general/brka_1.c: Expect a separate\n+\tPTEST instruction.\n+\t* gcc.target/aarch64/sve/acle/general/brkb_1.c: Likewise.\n+\n+2022-10-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general/brkn_1.c: Expect separate\n+\tPTEST instructions.\n+\t* gcc.target/aarch64/sve/acle/general/brkn_2.c: New test.\n+\n+2022-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/107305\n+\tPR c/107306\n+\t* gcc.dg/gimplefe-error-15.c: New testcase.\n+\n+2022-10-20  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* g++.dg/cpp23/attr-assume-opt.C: New.\n+\n 2022-10-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/format/format.h (int_least8_t, int_least16_t)"}, {"sha": "36da72b33c0b683d3a5204bfb33b0730ba53e25e", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "patch": "@@ -1,3 +1,7 @@\n+2022-10-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gomp-constants.h (GOMP_DEVICE_HSA): Comment out unused define.\n+\n 2022-10-13  Xi Ruoyao  <xry111@xry111.site>\n \n \t* longlong.h [__loongarch__] (count_leading_zeros): Define."}, {"sha": "5ebda8f939185c12c0b6b80364153e6f415cd704", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "patch": "@@ -1,3 +1,17 @@\n+2022-10-20  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/lib/libgomp.exp (check_effective_target_offload_device_gcn):\n+\tNew.\n+\t* testsuite/libgomp.c-c++-common/on_device_arch.h (device_arch_gcn,\n+\ton_device_arch_gcn): New.\n+\t* testsuite/libgomp.c-c++-common/requires-4a.c: New test; copied from\n+\trequires-4.c but using heap-allocated memory.\n+\n+2022-10-20  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR target/105421\n+\t* testsuite/libgomp.oacc-c-c++-common/private-big-1.c: New.\n+\n 2022-10-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.c/reverse-offload-sm30.c: Fix nvptx-specific"}, {"sha": "a723a6a9212d36e5ca3e9d5529bd749b878e5335", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "patch": "@@ -1,3 +1,8 @@\n+2022-10-20  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* configure.ac (AC_CONFIG_MACRO_DIRS): Instantiate.\n+\t* configure: Regenerate.\n+\n 2022-10-12  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "1bfdcf6ac637b02cd0989fc4b85ac2b3e389822f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a6ae56584f5e3caaac74e158b77bf1c4fdd774/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=47a6ae56584f5e3caaac74e158b77bf1c4fdd774", "patch": "@@ -1,3 +1,11 @@\n+2022-10-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/charconv (__detail::__from_chars_alnum_to_val_table):\n+\tRedefine as a class template containing the members type, value and\n+\t_S_make_table.  Don't use a local class as the table type.\n+\t(__detail::__table): Remove.\n+\t(__detail::__from_chars_alnum_to_val): Adjust after the above.\n+\n 2022-10-19  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/ranges (views::__detail::__is_repeat_view): Define"}]}