{"sha": "0216a1a9a04c1efa19851aa4b049be3bcb4ff72c", "node_id": "C_kwDOANBUbNoAKDAyMTZhMWE5YTA0YzFlZmExOTg1MWFhNGIwNDliZTNiY2I0ZmY3MmM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-22T18:20:34Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-22T18:20:34Z"}, "message": "Remove the final hack for associated types\n\nThis removes the implicit Self::associate_type paths from the name resolver\nthese are unnessecary with the updates in the type system to resolve these.", "tree": {"sha": "893244e2b2d779d34877c6535a97147e969755d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/893244e2b2d779d34877c6535a97147e969755d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a73de5ee915b9eaa24d7b04b703b8bdfea0d754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a73de5ee915b9eaa24d7b04b703b8bdfea0d754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a73de5ee915b9eaa24d7b04b703b8bdfea0d754"}], "stats": {"total": 54, "additions": 16, "deletions": 38}, "files": [{"sha": "ef7550530438b34798e8c54c35cbad361cec935c", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=0216a1a9a04c1efa19851aa4b049be3bcb4ff72c", "patch": "@@ -54,9 +54,6 @@ class ResolveToplevelImplItem : public ResolverBase\n \tr.add_range (locus);\n \trust_error_at (r, \"redefined multiple times\");\n       });\n-    resolver->insert_new_definition (type.get_node_id (),\n-\t\t\t\t     Definition{type.get_node_id (),\n-\t\t\t\t\t\ttype.get_node_id ()});\n   }\n \n   void visit (AST::ConstantItem &constant) override\n@@ -181,16 +178,13 @@ class ResolveTopLevelTraitItems : public ResolverBase\n   {\n     auto path\n       = prefix.append (ResolveTraitItemTypeToCanonicalPath::resolve (type));\n-    resolver->get_name_scope ().insert (\n+    resolver->get_type_scope ().insert (\n       path, type.get_node_id (), type.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \tRichLocation r (type.get_locus ());\n \tr.add_range (locus);\n \trust_error_at (r, \"redefined multiple times\");\n       });\n-    resolver->insert_new_definition (type.get_node_id (),\n-\t\t\t\t     Definition{type.get_node_id (),\n-\t\t\t\t\t\ttype.get_node_id ()});\n   }\n \n private:"}, {"sha": "a4bf2619d40b115848d83ac753f756c9f946ee3b", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=0216a1a9a04c1efa19851aa4b049be3bcb4ff72c", "patch": "@@ -453,7 +453,7 @@ class ResolveItem : public ResolverBase\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n-\tresolve_impl_item (impl_item.get (), Self);\n+\tresolve_impl_item (impl_item.get ());\n       }\n \n     resolver->get_type_scope ().peek ()->clear_name (\n@@ -584,7 +584,7 @@ class ResolveItem : public ResolverBase\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n-\tresolve_impl_item (impl_item.get (), Self);\n+\tresolve_impl_item (impl_item.get ());\n       }\n \n     resolver->get_type_scope ().peek ()->clear_name (\n@@ -646,9 +646,8 @@ class ResolveItem : public ResolverBase\n   }\n \n protected:\n-  void resolve_impl_item (AST::TraitImplItem *item, const CanonicalPath &self);\n-  void resolve_impl_item (AST::InherentImplItem *item,\n-\t\t\t  const CanonicalPath &self);\n+  void resolve_impl_item (AST::TraitImplItem *item);\n+  void resolve_impl_item (AST::InherentImplItem *item);\n   void resolve_extern_item (AST::ExternalItem *item);\n \n   ResolveItem () : ResolverBase (UNKNOWN_NODEID) {}\n@@ -659,42 +658,29 @@ class ResolveImplItems : public ResolveItem\n   using Rust::Resolver::ResolveItem::visit;\n \n public:\n-  static void go (AST::InherentImplItem *item, const CanonicalPath &self)\n+  static void go (AST::InherentImplItem *item)\n   {\n-    ResolveImplItems resolver (self);\n+    ResolveImplItems resolver;\n     item->accept_vis (resolver);\n   };\n \n-  static void go (AST::TraitImplItem *item, const CanonicalPath &self)\n+  static void go (AST::TraitImplItem *item)\n   {\n-    ResolveImplItems resolver (self);\n+    ResolveImplItems resolver;\n     item->accept_vis (resolver);\n   };\n \n   void visit (AST::TypeAlias &alias) override\n   {\n     ResolveItem::visit (alias);\n \n-    auto path\n-      = self.append (CanonicalPath::new_seg (alias.get_node_id (),\n-\t\t\t\t\t     alias.get_new_type_name ()));\n-    resolver->get_type_scope ().insert (\n-      path, alias.get_node_id (), alias.get_locus (), false,\n-      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\tRichLocation r (alias.get_locus ());\n-\tr.add_range (locus);\n-\trust_error_at (r, \"redefined multiple times\");\n-      });\n-\n     // FIXME this stops the erronious unused decls which will be fixed later on\n     resolver->get_type_scope ().append_reference_for_def (alias.get_node_id (),\n \t\t\t\t\t\t\t  alias.get_node_id ());\n   }\n \n private:\n-  ResolveImplItems (const CanonicalPath &self) : ResolveItem (), self (self) {}\n-\n-  const CanonicalPath &self;\n+  ResolveImplItems () : ResolveItem () {}\n };\n \n class ResolveExternItem : public ResolverBase"}, {"sha": "39e8ee4d8bc1e4c22337f9cebce64ece678b4087", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=0216a1a9a04c1efa19851aa4b049be3bcb4ff72c", "patch": "@@ -771,17 +771,15 @@ ResolveType::visit (AST::TraitObjectType &type)\n // rust-ast-resolve-item.h\n \n void\n-ResolveItem::resolve_impl_item (AST::TraitImplItem *item,\n-\t\t\t\tconst CanonicalPath &self)\n+ResolveItem::resolve_impl_item (AST::TraitImplItem *item)\n {\n-  ResolveImplItems::go (item, self);\n+  ResolveImplItems::go (item);\n }\n \n void\n-ResolveItem::resolve_impl_item (AST::InherentImplItem *item,\n-\t\t\t\tconst CanonicalPath &self)\n+ResolveItem::resolve_impl_item (AST::InherentImplItem *item)\n {\n-  ResolveImplItems::go (item, self);\n+  ResolveImplItems::go (item);\n }\n \n void"}, {"sha": "391ea405d8db94f1be0b444fc42b64312fee47dd", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0216a1a9a04c1efa19851aa4b049be3bcb4ff72c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=0216a1a9a04c1efa19851aa4b049be3bcb4ff72c", "patch": "@@ -220,7 +220,7 @@ TypeCheckType::visit (HIR::QualifiedPathInType &path)\n   bool fully_resolved = path.get_segments ().empty ();\n   if (fully_resolved)\n     {\n-      resolver->insert_resolved_name (path.get_mappings ().get_nodeid (),\n+      resolver->insert_resolved_type (path.get_mappings ().get_nodeid (),\n \t\t\t\t      root_resolved_node_id);\n       context->insert_receiver (path.get_mappings ().get_hirid (), root);\n       return;\n@@ -517,7 +517,7 @@ TypeCheckType::resolve_segments (\n     }\n   else\n     {\n-      resolver->insert_resolved_name (expr_mappings.get_nodeid (),\n+      resolver->insert_resolved_type (expr_mappings.get_nodeid (),\n \t\t\t\t      resolved_node_id);\n     }\n "}]}