{"sha": "a7a1d2701f5d7e496d53fa19708219d192df91ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhMWQyNzAxZjVkN2U0OTZkNTNmYTE5NzA4MjE5ZDE5MmRmOTFiYQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2000-02-29T20:29:14Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-02-29T20:29:14Z"}, "message": "t-pa: Use quadlib.c instead of quadlib.asm.\n\n\t* pa/t-pa: Use quadlib.c instead of quadlib.asm.\n\t* pa/quadlib.asm: Remove.\n\t* pa/quadlib.c: New file.\n\nFrom-SVN: r32265", "tree": {"sha": "e9907e050b3bf128cb04d3594c3578261af6a48c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9907e050b3bf128cb04d3594c3578261af6a48c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7a1d2701f5d7e496d53fa19708219d192df91ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a1d2701f5d7e496d53fa19708219d192df91ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a1d2701f5d7e496d53fa19708219d192df91ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a1d2701f5d7e496d53fa19708219d192df91ba/comments", "author": null, "committer": null, "parents": [{"sha": "c4c81601892fb2066cedcae91525dec7837f5132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c81601892fb2066cedcae91525dec7837f5132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c81601892fb2066cedcae91525dec7837f5132"}], "stats": {"total": 456, "additions": 93, "deletions": 363}, "files": [{"sha": "1d3567e7f706649ce21625e372bff58cd2df037a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a1d2701f5d7e496d53fa19708219d192df91ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a1d2701f5d7e496d53fa19708219d192df91ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7a1d2701f5d7e496d53fa19708219d192df91ba", "patch": "@@ -5,6 +5,10 @@ Tue Feb 29 14:07:04 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n Tue Feb 29 10:45:59 2000  Jeffrey A Law  (law@cygnus.com)\n \n+\t* pa/t-pa: Use quadlib.c instead of quadlib.asm.\n+\t* pa/quadlib.asm: Remove.\n+\t* pa/quadlib.c: New file.\n+\n \t* configure.in (hpux10, hpux11, PA32 mode): Use i128 float format.\n \t* configure: Rebuilt.\n "}, {"sha": "eb65362e02617ff37d1b8b403ca7786dfe0f32be", "filename": "gcc/config/pa/quadlib.asm", "status": "removed", "additions": 0, "deletions": 359, "changes": 359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c81601892fb2066cedcae91525dec7837f5132/gcc%2Fconfig%2Fpa%2Fquadlib.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c81601892fb2066cedcae91525dec7837f5132/gcc%2Fconfig%2Fpa%2Fquadlib.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fquadlib.asm?ref=c4c81601892fb2066cedcae91525dec7837f5132", "patch": "@@ -1,359 +0,0 @@\n-;  Subroutines for long double support on the HPPA\n-;  Copyright (C) 1999 Free Software Foundation, Inc.\n-\n-;  This file is part of GNU CC.\n-\n-;  GNU CC is free software; you can redistribute it and/or modify\n-;  it under the terms of the GNU General Public License as published by\n-;  the Free Software Foundation; either version 2, or (at your option)\n-;  any later version.\n-\n-;  GNU CC is distributed in the hope that it will be useful,\n-;  but WITHOUT ANY WARRANTY; without even the implied warranty of\n-;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-;  GNU General Public License for more details.\n-\n-; In addition to the permissions in the GNU General Public License, the\n-; Free Software Foundation gives you unlimited permission to link the\n-; compiled version of this file with other programs, and to distribute\n-; those programs without any restriction coming from the use of this\n-; file.  (The General Public License restrictions do apply in other\n-; respects; for example, they cover modification of the file, and\n-; distribution when not linked into another program.)\n-\n-;  You should have received a copy of the GNU General Public License\n-;  along with GNU CC; see the file COPYING.  If not, write to\n-;  the Free Software Foundation, 59 Temple Place - Suite 330,\n-;  Boston, MA 02111-1307, USA.\n-\n-\t.SPACE $TEXT$\n-\t.SUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\n-\t.compiler \"quadlib.asm GNU_PA-RISC_Assembler 2.9.4\"\n-\t.IMPORT _U_Qfcmp,CODE\n-\t.IMPORT _U_Qfsub,CODE\n-\n-\t.align 4\n-\t.NSUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\n-\t;\n-\t; Check two long doubles for equality\n-\t;\n-\t.EXPORT _U_Qfeq,ENTRY,PRIV_LEV=3,ARGW0=GR,ARGW1=GR,RTNVAL=GR\n-_U_Qfeq\n-\t.PROC\n-\t.CALLINFO FRAME=64,CALLS,SAVE_RP\n-\t.ENTRY\n-\t;\n-\t; Build the frame\n-\t;\n-\tstw %r2,-20(0,%r30)\n-\tldo 64(%r30),%r30\n-\n-\t;\n-\t; Load the additional argument and call the comparison routine.\n-\t;\n-\tbl _U_Qfcmp,%r2\n-\t  ldi 4,%r24\n-\n-\t;\n-\t; The return from _U_Qfcmp is the masked C bit from the FP\n-\t; status register. Convert that to a 0 or 1.\n-\t;\n-\tcomiclr,= 0,%r28,%r28\n-\t  ldi 1,%r28\n-\n-\t;\n-\t; Return\n-\t;\n-\tldw -84(0,%r30),%r2\n-\tbv 0(%r2)\n-\t  ldo -64(%r30), %r30\n-\n-\t.EXIT\n-\t.PROCEND\n-\n-\t;\n-\t; Check two long doubles for inequality\n-\t;\n-\t.EXPORT _U_Qfne,ENTRY,PRIV_LEV=3,ARGW0=GR,ARGW1=GR,RTNVAL=GR\n-_U_Qfne\n-\t.PROC\n-\t.CALLINFO FRAME=64,CALLS,SAVE_RP\n-\t.ENTRY\n-\t;\n-\t; Build the frame\n-\t;\n-\tstw %r2,-20(0,%r30)\n-\tldo 64(%r30),%r30\n-\n-\t;\n-\t; Load the additional argument and call the comparison routine.\n-\t;\n-\tbl _U_Qfcmp,%r2\n-\tldi 4,%r24\n-\t\n-\t;\n-\t; The return from _U_Qfcmp is the masked C bit from the FP\n-\t; status register. Convert that to a 0 or 1.\n-\t;\n-\tcomiclr,<> 0,%r28,%r28\n-\t  ldi 1,%r28\n-\n-\t;\n-\t; Return\n-\t;\n-\tldw -84(0,%r30),%r2\n-\tbv 0(%r2)\n-\t  ldo -64(%r30),%r30\n-\t.EXIT\n-\t.PROCEND\n-\n-\t;\n-\t; Check if opnd1 > opnd0                \n-\t;\n-\t.EXPORT _U_Qfgt,ENTRY,PRIV_LEV=3,ARGW0=GR,ARGW1=GR,RTNVAL=GR\n-_U_Qfgt\n-\t.PROC\n-\t.CALLINFO FRAME=64,CALLS,SAVE_RP\n-\t.ENTRY\n-\t;\n-\t; Build the frame\n-\t;\n-\tstw %r2,-20(0,%r30)\n-\tldo 64(%r30),%r30\n-\n-\t;\n-\t; Load the additional argument and call the comparison routine.\n-\t;\n-\tbl _U_Qfcmp,%r2\n-\tldi 17,%r24\n-\n-\t;\n-\t; The return from _U_Qfcmp is the masked C bit from the FP\n-\t; status register. Convert that to a 0 or 1.\n-\t;\n-\tcomiclr,= 0,%r28,%r28\n-\t  ldi 1,%r28\n-\n-\t;\n-\t; Return\n-\t;\n-\tldw -84(0,%r30),%r2\n-\tbv 0(%r2)\n-\t  ldo -64(%r30), %r30\n-\n-\t.EXIT\n-\t.PROCEND\n-\n-\t;\n-\t; Check if opnd1 >= opnd0                \n-\t;\n-\t.EXPORT _U_Qfge,ENTRY,PRIV_LEV=3,ARGW0=GR,ARGW1=GR,RTNVAL=GR\n-_U_Qfge\n-\t.PROC\n-\t.CALLINFO FRAME=64,CALLS,SAVE_RP\n-\t.ENTRY\n-\t;\n-\t; Build the frame\n-\t;\n-\tstw %r2,-20(0,%r30)\n-\tldo 64(%r30),%r30\n-\n-\t;\n-\t; Load the additional argument and call the comparison routine.\n-\t;\n-\tbl _U_Qfcmp,%r2\n-\tldi 21,%r24\n-\n-\t;\n-\t; The return from _U_Qfcmp is the masked C bit from the FP\n-\t; status register. Convert that to a 0 or 1.\n-\t;\n-\tcomiclr,= 0,%r28,%r28\n-\t  ldi 1,%r28\n-\n-\t;\n-\t; Return\n-\t;\n-\tldw -84(0,%r30),%r2\n-\tbv 0(%r2)\n-\t  ldo -64(%r30), %r30\n-\n-\t.EXIT\n-\t.PROCEND\n-\n-\t;\n-\t; Check if opnd1 < opnd0                \n-\t;\n-\t.EXPORT _U_Qflt,ENTRY,PRIV_LEV=3,ARGW0=GR,ARGW1=GR,RTNVAL=GR\n-_U_Qflt\n-\t.PROC\n-\t.CALLINFO FRAME=64,CALLS,SAVE_RP\n-\t.ENTRY\n-\t;\n-\t; Build the frame\n-\t;\n-\tstw %r2,-20(0,%r30)\n-\tldo 64(%r30),%r30\n-\n-\t;\n-\t; Load the additional argument and call the comparison routine.\n-\t;\n-\tbl _U_Qfcmp,%r2\n-\tldi 9,%r24\n-\n-\t;\n-\t; The return from _U_Qfcmp is the masked C bit from the FP\n-\t; status register. Convert that to a 0 or 1.\n-\t;\n-\tcomiclr,= 0,%r28,%r28\n-\t  ldi 1,%r28\n-\n-\t;\n-\t; Return\n-\t;\n-\tldw -84(0,%r30),%r2\n-\tbv 0(%r2)\n-\t  ldo -64(%r30), %r30\n-\n-\t.EXIT\n-\t.PROCEND\n-\n-\t;\n-\t; Check if opnd1 <= opnd0                \n-\t;\n-\t.EXPORT _U_Qfle,ENTRY,PRIV_LEV=3,ARGW0=GR,ARGW1=GR,RTNVAL=GR\n-_U_Qfle\n-\t.PROC\n-\t.CALLINFO FRAME=64,CALLS,SAVE_RP\n-\t.ENTRY\n-\t;\n-\t; Build the frame\n-\t;\n-\tstw %r2,-20(0,%r30)\n-\tldo 64(%r30),%r30\n-\n-\t;\n-\t; Load the additional argument and call the comparison routine.\n-\t;\n-\tbl _U_Qfcmp,%r2\n-\tldi 13,%r24\n-\n-\t;\n-\t; The return from _U_Qfcmp is the masked C bit from the FP\n-\t; status register. Convert that to a 0 or 1.\n-\t;\n-\tcomiclr,= 0,%r28,%r28\n-\t  ldi 1,%r28\n-\n-\t;\n-\t; Return\n-\t;\n-\tldw -84(0,%r30),%r2\n-\tbv 0(%r2)\n-\t  ldo -64(%r30), %r30\n-\n-\t.EXIT\n-\t.PROCEND\n-\n-\t;\n-\t; Negate opnd0 and store in ret0                 \n-\t;\n-\t.EXPORT _U_Qfneg,ENTRY,PRIV_LEV=3,ARGW0=GR,RTNVAL=GR\n-_U_Qfneg\n-\t.PROC\n-\t.CALLINFO FRAME=128,CALLS,SAVE_RP\n-\t.ENTRY\n-\t;\n-\t; Build the frame\n-\t;\n-\tstw %r2,-20(0,%r30)\n-\tldo 128(%r30),%r30\n-\n-\t;\n-\t; copy the value to be negated to the frame.\n-\t;\n-\tldw 0(0,%r26), %r25\n-\tldw 4(0,%r26), %r24\n-\tldw 8(0,%r26), %r23\n-\tldw 12(0,%r26),%r1\n-\tstw %r25, -100(0,%r30)\n-\tstw %r24,  -96(0,%r30)\n-\tstw %r23,  -92(0,%r30)\n-\tstw %r1,   -88(0,%r30)\n-\tldo -100(%r30), %r25\n-\n-\t;\n-\t; ret0 contains a pointer to the location for the return\n-\t; value. Initialize it to zero and pass it as arg0 to\n-\t; _U_Qfsub.\n-\t;\n-\tcopy %r28,%r26\n-\tstw %r0,0(0,%r26)\n-\tstw %r0,4(0,%r26)\n-\tstw %r0,8(0,%r26)\n-\tbl _U_Qfsub,%r2\n-\t  stw %r0,12(0,%r26)\n-\n-\t;\n-\t; Return\n-\t;\n-\tldw -148(0,%r30),%r2\n-\tbv 0(%r2)\n-\t  ldo -128(%r30), %r30\n-\n-\t.EXIT\n-\t.PROCEND\n-\n-\t;\n-\t; Compare opnd0 and opnd1. If opnd0 == opnd1, return 0.\n-\t; If opnd0 is greater than opnd1, return 1.\n-\t; Otherwise, return -1.\n-\t;\n-\t.EXPORT _U_Qfcomp,ENTRY,PRIV_LEV=3,ARGW0=GR,ARGW1=GR,RTNVAL=GR\n-_U_Qfcomp\n-\t.PROC\n-\t.CALLINFO FRAME=64,CALLS,SAVE_RP\n-\t.ENTRY\n-\t;\n-\t; Build the frame\n-\t;\n-\tstw %r2,-20(0,%r30)\n-\tldo 64(%r30),%r30\n-\n-\t;\n-\t; Save arg0 and arg1.\n-\t;\n-\tstw %r26, -60(0,%r30)\n-\tstw %r25, -56(0,%r30)\n-\t;\n-\t; Check for equality\n-\t;\n-\tbl _U_Qfcmp,%r2\n-\t  ldi 4, %r24\n-\n-\tcomib,<> 0,%r28,done\n-\t  copy %r0, %r1\n-\n-\t;\n-\t; Reset the parms and test for opnd0 > opnd1.\n-\t;\n-\tldw -60(0,%r30),%r26\n-\tldw -56(0,%r30),%r25\n-\tbl _U_Qfcmp,%r2\n-\t  ldi 22,%r24\n-\n-\tldi 1,%r1\n-\tcomiclr,<> 0,%r28,0\n-\t  ldi -1,%r1\n-\n-done\n-\tcopy %r1,%r28\n-\t;\n-\t; Return\n-\t;\n-\tldw -84(0,%r30),%r2\n-\tbv 0(%r2)\n-\t  ldo -64(%r30), %r30\n-\n-\t.EXIT\n-\t.PROCEND"}, {"sha": "826c809f0f4d8342932e6992588231411b3b5951", "filename": "gcc/config/pa/quadlib.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a1d2701f5d7e496d53fa19708219d192df91ba/gcc%2Fconfig%2Fpa%2Fquadlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a1d2701f5d7e496d53fa19708219d192df91ba/gcc%2Fconfig%2Fpa%2Fquadlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fquadlib.c?ref=a7a1d2701f5d7e496d53fa19708219d192df91ba", "patch": "@@ -0,0 +1,85 @@\n+/* Subroutines for long double support.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+int _U_Qfcmp (long double a, long double b, int);\n+long _U_Qfcnvfxt_quad_to_sgl (long double);\n+\n+int\n+_U_Qfeq (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, 4) != 0);\n+}\n+\n+int\n+_U_Qfne (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, 4) == 0);\n+}\n+\t\n+int\n+_U_Qfgt (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, 17) != 0);\n+}\n+\n+int\n+_U_Qfge (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, 21) != 0);\n+}\n+\n+int\n+_U_Qflt (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, 9) != 0);\n+}\n+\n+int\n+_U_Qfle (long double a, long double b)\n+{\n+  return (_U_Qfcmp (a, b, 13) != 0);\n+}\n+\n+int\n+_U_Qfcomp (long double a, long double b)\n+{\n+  if (_U_Qfcmp (a, b, 4) == 0)\n+    return 0;\n+\n+  return (_U_Qfcmp (a, b, 22) != 0 ? 1 : -1);\n+}\n+\n+\n+long double\n+_U_Qfneg (long double a)\n+{\n+  return (0.0L - a);\n+}\n+\n+#ifdef __LP64__\n+/* This routine is only necessary for the PA64 port; for reasons unknown\n+   _U_Qfcnvfxt_quad_to_sgl returns the integer in the high 32bits of the\n+   return value.  Ugh.  */\n+int\n+__U_Qfcnvfxt_quad_to_sgl (long double a)\n+{\n+  return _U_Qfcnvfxt_quad_to_sgl (a) >> 32;\n+}\n+#endif"}, {"sha": "5d2a72ca2861de5058d8aabfe3b3f1b0a1f5c684", "filename": "gcc/config/pa/t-pa", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a1d2701f5d7e496d53fa19708219d192df91ba/gcc%2Fconfig%2Fpa%2Ft-pa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a1d2701f5d7e496d53fa19708219d192df91ba/gcc%2Fconfig%2Fpa%2Ft-pa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa?ref=a7a1d2701f5d7e496d53fa19708219d192df91ba", "patch": "@@ -1,14 +1,14 @@\n LIBGCC1=libgcc1.null\n CROSS_LIBGCC1=libgcc1.null\n ADA_CFLAGS=-mdisable-indexing\n-LIB2FUNCS_EXTRA=lib2funcs.asm quadlib.asm\n+LIB2FUNCS_EXTRA=lib2funcs.asm quadlib.c\n \n lib2funcs.asm: $(srcdir)/config/pa/lib2funcs.asm\n \trm -f lib2funcs.asm\n \tcp $(srcdir)/config/pa/lib2funcs.asm .\n \n-quadlib.asm: $(srcdir)/config/pa/quadlib.asm\n-\trm -f quadlib.asm\n-\tcp $(srcdir)/config/pa/quadlib.asm .\n+quadlib.c: $(srcdir)/config/pa/quadlib.c\n+\trm -f quadlib.c\n+\tcp $(srcdir)/config/pa/quadlib.c .\n \n TARGET_LIBGCC2_CFLAGS = -fPIC"}]}