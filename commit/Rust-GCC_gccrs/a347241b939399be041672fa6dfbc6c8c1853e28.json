{"sha": "a347241b939399be041672fa6dfbc6c8c1853e28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0NzI0MWI5MzkzOTliZTA0MTY3MmZhNmRmYmM2YzhjMTg1M2UyOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-05-23T17:21:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-05-23T17:21:39Z"}, "message": "Fix cast to rvalue reference from prvalue.\n\n\t* cvt.c (diagnose_ref_binding): Handle rvalue reference.\n\t* rtti.c (build_dynamic_cast_1): Don't try to build a reference to\n\tnon-class type.  Handle xvalue argument.\n\t* typeck.c (build_reinterpret_cast_1): Allow cast from prvalue to\n\trvalue reference.\n\t* semantics.c (finish_compound_literal): Do direct-initialization,\n\tnot cast, to initialize a reference.\n\nFrom-SVN: r260622", "tree": {"sha": "5bd0c1d1ac2778a2a49fe517118ceedcc7b8c77a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bd0c1d1ac2778a2a49fe517118ceedcc7b8c77a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a347241b939399be041672fa6dfbc6c8c1853e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a347241b939399be041672fa6dfbc6c8c1853e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a347241b939399be041672fa6dfbc6c8c1853e28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a347241b939399be041672fa6dfbc6c8c1853e28/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "955da5e5443724cb59f8fbd854c13e78c68bf000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955da5e5443724cb59f8fbd854c13e78c68bf000", "html_url": "https://github.com/Rust-GCC/gccrs/commit/955da5e5443724cb59f8fbd854c13e78c68bf000"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "f38d385e3be3e43548f9f6451334185d405996ef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a347241b939399be041672fa6dfbc6c8c1853e28", "patch": "@@ -1,5 +1,14 @@\n 2018-05-23  Jason Merrill  <jason@redhat.com>\n \n+\tFix cast to rvalue reference from prvalue.\n+\t* cvt.c (diagnose_ref_binding): Handle rvalue reference.\n+\t* rtti.c (build_dynamic_cast_1): Don't try to build a reference to\n+\tnon-class type.  Handle xvalue argument.\n+\t* typeck.c (build_reinterpret_cast_1): Allow cast from prvalue to\n+\trvalue reference.\n+\t* semantics.c (finish_compound_literal): Do direct-initialization,\n+\tnot cast, to initialize a reference.\n+\n \tCWG 616, 1213 - value category of subobject references.\n \t* tree.c (lvalue_kind): A reference to a subobject of a prvalue is\n \tan xvalue."}, {"sha": "3f87317a47d2d6f9ee1bc99e8fa96c98e70efd8f", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=a347241b939399be041672fa6dfbc6c8c1853e28", "patch": "@@ -381,7 +381,8 @@ diagnose_ref_binding (location_t loc, tree reftype, tree intype, tree decl)\n {\n   tree ttl = TREE_TYPE (reftype);\n \n-  if (!CP_TYPE_CONST_NON_VOLATILE_P (ttl))\n+  if (!TYPE_REF_IS_RVALUE (reftype)\n+      && !CP_TYPE_CONST_NON_VOLATILE_P (ttl))\n     {\n       const char *msg;\n "}, {"sha": "6692fb7ff861722c636a3b5b1d0506a074070ad2", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a347241b939399be041672fa6dfbc6c8c1853e28", "patch": "@@ -616,22 +616,22 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n   else\n     {\n       expr = mark_lvalue_use (expr);\n-\n-      exprtype = build_reference_type (TREE_TYPE (expr));\n+      exprtype = TREE_TYPE (expr);\n \n       /* T is a reference type, v shall be an lvalue of a complete class\n \t type, and the result is an lvalue of the type referred to by T.  */\n-\n-      if (! MAYBE_CLASS_TYPE_P (TREE_TYPE (exprtype)))\n+      if (! MAYBE_CLASS_TYPE_P (exprtype))\n \t{\n \t  errstr = _(\"source is not of class type\");\n \t  goto fail;\n \t}\n-      if (!COMPLETE_TYPE_P (complete_type (TREE_TYPE (exprtype))))\n+      if (!COMPLETE_TYPE_P (complete_type (exprtype)))\n \t{\n \t  errstr = _(\"source is of incomplete class type\");\n \t  goto fail;\n \t}\n+\n+      exprtype = cp_build_reference_type (exprtype, !lvalue_p (expr));\n     }\n \n   /* The dynamic_cast operator shall not cast away constness.  */"}, {"sha": "46251deaa6c363bb7c1503b458cae802e5158ef5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a347241b939399be041672fa6dfbc6c8c1853e28", "patch": "@@ -2734,7 +2734,10 @@ finish_compound_literal (tree type, tree compound_literal,\n       compound_literal\n \t= finish_compound_literal (TREE_TYPE (type), compound_literal,\n \t\t\t\t   complain, fcl_context);\n-      return cp_build_c_cast (type, compound_literal, complain);\n+      /* The prvalue is then used to direct-initialize the reference.  */\n+      tree r = (perform_implicit_conversion_flags\n+\t\t(type, compound_literal, complain, LOOKUP_NORMAL));\n+      return convert_from_reference (r);\n     }\n \n   if (!TYPE_OBJ_P (type))"}, {"sha": "a694499190fc6c6c25b79c5215964fdffead0d8f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a347241b939399be041672fa6dfbc6c8c1853e28", "patch": "@@ -7315,13 +7315,19 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n     type = cv_unqualified (type);\n \n   /* [expr.reinterpret.cast]\n-     An lvalue expression of type T1 can be cast to the type\n+     A glvalue expression of type T1 can be cast to the type\n      \"reference to T2\" if an expression of type \"pointer to T1\" can be\n      explicitly converted to the type \"pointer to T2\" using a\n      reinterpret_cast.  */\n   if (TYPE_REF_P (type))\n     {\n-      if (! lvalue_p (expr))\n+      if (TYPE_REF_IS_RVALUE (type))\n+\t{\n+\t  if (!obvalue_p (expr))\n+\t    /* Perform the temporary materialization conversion.  */\n+\t    expr = get_target_expr_sfinae (expr, complain);\n+\t}\n+      else if (!lvalue_p (expr))\n \t{\n           if (complain & tf_error)\n             error (\"invalid cast of an rvalue expression of type \""}, {"sha": "3ae5691c5fdaf42d8c1a8bfa1b2948d2bd12acc6", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-cast6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a347241b939399be041672fa6dfbc6c8c1853e28/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast6.C?ref=a347241b939399be041672fa6dfbc6c8c1853e28", "patch": "@@ -0,0 +1,11 @@\n+// Test that a prvalue can be used where a glvalue is expected.\n+// { dg-do compile { target c++11 } }\n+\n+struct A { virtual void f(); };\n+struct B : A {};\n+\n+auto && a = static_cast<A&&>(B());\n+auto && b = reinterpret_cast<A&&>(B());\n+auto && c = dynamic_cast<A&&>(B());\n+auto && d = dynamic_cast<B&&>(static_cast<A&&>(B()));\n+auto && e = const_cast<B&&>(B());"}]}