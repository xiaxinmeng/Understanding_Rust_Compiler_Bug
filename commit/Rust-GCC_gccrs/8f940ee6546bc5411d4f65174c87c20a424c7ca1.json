{"sha": "8f940ee6546bc5411d4f65174c87c20a424c7ca1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY5NDBlZTY1NDZiYzU0MTFkNGY2NTE3NGM4N2MyMGE0MjRjN2NhMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-04-18T06:54:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-04-18T06:54:33Z"}, "message": "cgraph.c (cgraph_node_name): Remove.\n\n\n\t* cgraph.c (cgraph_node_name): Remove.\n\t(dump_cgraph_node): Use dump_symtab_base; reformat.\n\t* cgraph.h (symtab_node_asm_name, symtab_node_name, dump_symtab,\n\tdebug_symtab, dump_symtab_node, debug_symtab_node, dump_symtab_base):\n\tDeclare.\n\t(cgraph_node_name, varpool_node_name): Remove.\n\t(cgraph_node_asm_name, varpool_node_asm_name,\n\tcgraph_node_name, varpool_node_name): New.\n\t* tree-pass.h (TODO_dump_cgraph): Rename to ...\n\t(TODO_dump_symtab): ... this one.\n\t* ipa-cp (pass_ipa_cp): Update.\n\t* ia-reference.c (generate_summary, read_write_all_from_decl,\n\tpropagate, ipa_reference_read_optimization_summary): Update.\n\t* cgraphunit.c (cgraph_analyze_functions): Update.\n\t(cgraph_optimize): Update.\n\t* ipa-ref.c (ipa_dump_references): Update.\n\t(ipa_dump_refering): Update.\n\t* ipa-inline.c (pass_ipa_inline): Update.\n\t* matrix-reorg.c (pass_ipa_matrix_reorg): Update.\n\t* ipa.c (pass_ipa_function_visibility,\n\tpass_ipa_whole_program_visibility): Update.\n\t* tree-sra.c (pass_early_ipa_sra): Update.\n\t* symtab.c: Include langhooks.h\n\t(symtab_node_asm_name): New.\n\t(symtab_node_name): New.\n\t(symtab_type_names): New static var.\n\t(dump_symtab_base): New.\n\t(dump_symtab_node, dump_symtab): New.\n\t(debug_symtab_node,  debug_symtab): New.\n\t* tree-ssa-structalias.c: Dump symbol table.\n\t* pases.c (execute_todo): Handle TODO_dump_symtab instead\n\tof TODO_dump_cgraph.\n\t* varpoo.c (varpool_node_name): Remove.\n\t(dump_varpool_node): Use dump_symtab_base; reformat.\n\nFrom-SVN: r186559", "tree": {"sha": "d617998b8e72778558a170df59931a3bd122e04c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d617998b8e72778558a170df59931a3bd122e04c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f940ee6546bc5411d4f65174c87c20a424c7ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f940ee6546bc5411d4f65174c87c20a424c7ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f940ee6546bc5411d4f65174c87c20a424c7ca1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f940ee6546bc5411d4f65174c87c20a424c7ca1/comments", "author": null, "committer": null, "parents": [{"sha": "cc8e7b1f5829ad7afddaee8b5c867305af6fbcc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8e7b1f5829ad7afddaee8b5c867305af6fbcc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc8e7b1f5829ad7afddaee8b5c867305af6fbcc8"}], "stats": {"total": 370, "additions": 262, "deletions": 108}, "files": [{"sha": "11bb11cdfabe59e96f679425070c6e1a058fdc26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -1,3 +1,40 @@\n+2012-04-18  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_node_name): Remove.\n+\t(dump_cgraph_node): Use dump_symtab_base; reformat.\n+\t* cgraph.h (symtab_node_asm_name, symtab_node_name, dump_symtab,\n+\tdebug_symtab, dump_symtab_node, debug_symtab_node, dump_symtab_base):\n+\tDeclare.\n+\t(cgraph_node_name, varpool_node_name): Remove.\n+\t(cgraph_node_asm_name, varpool_node_asm_name,\n+\tcgraph_node_name, varpool_node_name): New.\n+\t* tree-pass.h (TODO_dump_cgraph): Rename to ...\n+\t(TODO_dump_symtab): ... this one.\n+\t* ipa-cp (pass_ipa_cp): Update.\n+\t* ia-reference.c (generate_summary, read_write_all_from_decl,\n+\tpropagate, ipa_reference_read_optimization_summary): Update.\n+\t* cgraphunit.c (cgraph_analyze_functions): Update.\n+\t(cgraph_optimize): Update.\n+\t* ipa-ref.c (ipa_dump_references): Update.\n+\t(ipa_dump_refering): Update.\n+\t* ipa-inline.c (pass_ipa_inline): Update.\n+\t* matrix-reorg.c (pass_ipa_matrix_reorg): Update.\n+\t* ipa.c (pass_ipa_function_visibility,\n+\tpass_ipa_whole_program_visibility): Update.\n+\t* tree-sra.c (pass_early_ipa_sra): Update.\n+\t* symtab.c: Include langhooks.h\n+\t(symtab_node_asm_name): New.\n+\t(symtab_node_name): New.\n+\t(symtab_type_names): New static var.\n+\t(dump_symtab_base): New.\n+\t(dump_symtab_node, dump_symtab): New.\n+\t(debug_symtab_node,  debug_symtab): New.\n+\t* tree-ssa-structalias.c: Dump symbol table.\n+\t* pases.c (execute_todo): Handle TODO_dump_symtab instead\n+\tof TODO_dump_cgraph.\n+\t* varpoo.c (varpool_node_name): Remove.\n+\t(dump_varpool_node): Use dump_symtab_base; reformat.\n+\n 2012-04-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n         * doc/invoke.texi (Language Independent Options): @item should be"}, {"sha": "ae8c4e8e36868c6fafeaea50af1def5e82912f72", "filename": "gcc/cgraph.c", "status": "modified", "additions": 22, "deletions": 49, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -1605,13 +1605,6 @@ cgraph_inline_failed_string (cgraph_inline_failed_t reason)\n   return cif_string_table[reason];\n }\n \n-/* Return name of the node used in debug output.  */\n-const char *\n-cgraph_node_name (struct cgraph_node *node)\n-{\n-  return lang_hooks.decl_printable_name (node->symbol.decl, 2);\n-}\n-\n /* Names used to print out the availability enum.  */\n const char * const cgraph_availability_names[] =\n   {\"unset\", \"not_available\", \"overwritable\", \"available\", \"local\"};\n@@ -1625,60 +1618,44 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n   struct cgraph_edge *edge;\n   int indirect_calls_count = 0;\n \n-  fprintf (f, \"%s/%i\", cgraph_node_name (node), node->uid);\n-  dump_addr (f, \" @\", (void *)node);\n-  if (DECL_ASSEMBLER_NAME_SET_P (node->symbol.decl))\n-    fprintf (f, \" (asm: %s)\",\n-\t     IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->symbol.decl)));\n+  dump_symtab_base (f, (symtab_node) node);\n+\n   if (node->global.inlined_to)\n-    fprintf (f, \" (inline copy in %s/%i)\",\n+    fprintf (f, \"  Function %s/%i is inline copy in %s/%i\\n\",\n+\t     cgraph_node_name (node),\n+\t     node->symbol.order,\n \t     cgraph_node_name (node->global.inlined_to),\n-\t     node->global.inlined_to->uid);\n-  if (node->symbol.same_comdat_group)\n-    fprintf (f, \" (same comdat group as %s/%i)\",\n-\t     cgraph_node_name (cgraph (node->symbol.same_comdat_group)),\n-\t     cgraph (node->symbol.same_comdat_group)->uid);\n+\t     node->global.inlined_to->symbol.order);\n   if (node->clone_of)\n-    fprintf (f, \" (clone of %s/%i)\",\n-\t     cgraph_node_name (node->clone_of),\n-\t     node->clone_of->uid);\n+    fprintf (f, \"  Clone of %s/%i\\n\",\n+\t     cgraph_node_asm_name (node->clone_of),\n+\t     node->clone_of->symbol.order);\n   if (cgraph_function_flags_ready)\n-    fprintf (f, \" availability:%s\",\n+    fprintf (f, \"  Availability: %s\\n\",\n \t     cgraph_availability_names [cgraph_function_body_availability (node)]);\n+\n+  fprintf (f, \"  Function flags:\");\n   if (node->analyzed)\n     fprintf (f, \" analyzed\");\n-  if (node->symbol.in_other_partition)\n-    fprintf (f, \" in_other_partition\");\n   if (node->count)\n     fprintf (f, \" executed \"HOST_WIDEST_INT_PRINT_DEC\"x\",\n \t     (HOST_WIDEST_INT)node->count);\n   if (node->origin)\n-    fprintf (f, \" nested in: %s\", cgraph_node_name (node->origin));\n+    fprintf (f, \" nested in: %s\", cgraph_node_asm_name (node->origin));\n   if (node->needed)\n     fprintf (f, \" needed\");\n-  if (node->symbol.address_taken)\n-    fprintf (f, \" address_taken\");\n   else if (node->reachable)\n     fprintf (f, \" reachable\");\n-  else if (node->symbol.used_from_other_partition)\n-    fprintf (f, \" used_from_other_partition\");\n   if (gimple_has_body_p (node->symbol.decl))\n     fprintf (f, \" body\");\n   if (node->process)\n     fprintf (f, \" process\");\n   if (node->local.local)\n     fprintf (f, \" local\");\n-  if (node->symbol.externally_visible)\n-    fprintf (f, \" externally_visible\");\n-  if (node->symbol.resolution != LDPR_UNKNOWN)\n-    fprintf (f, \" %s\",\n- \t     ld_plugin_symbol_resolution_names[(int)node->symbol.resolution]);\n   if (node->local.finalized)\n     fprintf (f, \" finalized\");\n   if (node->local.redefined_extern_inline)\n     fprintf (f, \" redefined_extern_inline\");\n-  if (TREE_ASM_WRITTEN (node->symbol.decl))\n-    fprintf (f, \" asm_written\");\n   if (node->only_called_at_startup)\n     fprintf (f, \" only_called_at_startup\");\n   if (node->only_called_at_exit)\n@@ -1692,7 +1669,7 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n \n   if (node->thunk.thunk_p)\n     {\n-      fprintf (f, \"  thunk of %s (asm: %s) fixed offset %i virtual value %i has \"\n+      fprintf (f, \"  Thunk of %s (asm: %s) fixed offset %i virtual value %i has \"\n \t       \"virtual offset %i)\\n\",\n \t       lang_hooks.decl_printable_name (node->thunk.alias, 2),\n \t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->thunk.alias)),\n@@ -1702,20 +1679,20 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n     }\n   if (node->alias && node->thunk.alias)\n     {\n-      fprintf (f, \"  alias of %s\",\n+      fprintf (f, \"  Alias of %s\",\n \t       lang_hooks.decl_printable_name (node->thunk.alias, 2));\n       if (DECL_ASSEMBLER_NAME_SET_P (node->thunk.alias))\n         fprintf (f, \" (asm: %s)\",\n \t\t IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->thunk.alias)));\n       fprintf (f, \"\\n\");\n     }\n   \n-  fprintf (f, \"  called by: \");\n+  fprintf (f, \"  Called by: \");\n \n   for (edge = node->callers; edge; edge = edge->next_caller)\n     {\n-      fprintf (f, \"%s/%i \", cgraph_node_name (edge->caller),\n-\t       edge->caller->uid);\n+      fprintf (f, \"%s/%i \", cgraph_node_asm_name (edge->caller),\n+\t       edge->caller->symbol.order);\n       if (edge->count)\n \tfprintf (f, \"(\"HOST_WIDEST_INT_PRINT_DEC\"x) \",\n \t\t (HOST_WIDEST_INT)edge->count);\n@@ -1730,11 +1707,11 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n \tfprintf(f, \"(can throw external) \");\n     }\n \n-  fprintf (f, \"\\n  calls: \");\n+  fprintf (f, \"\\n  Calls: \");\n   for (edge = node->callees; edge; edge = edge->next_callee)\n     {\n-      fprintf (f, \"%s/%i \", cgraph_node_name (edge->callee),\n-\t       edge->callee->uid);\n+      fprintf (f, \"%s/%i \", cgraph_node_asm_name (edge->callee),\n+\t       edge->callee->symbol.order);\n       if (!edge->inline_failed)\n \tfprintf(f, \"(inlined) \");\n       if (edge->indirect_inlining_edge)\n@@ -1749,15 +1726,11 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n \tfprintf(f, \"(can throw external) \");\n     }\n   fprintf (f, \"\\n\");\n-  fprintf (f, \"  References: \");\n-  ipa_dump_references (f, &node->symbol.ref_list);\n-  fprintf (f, \"  Refering this function: \");\n-  ipa_dump_refering (f, &node->symbol.ref_list);\n \n   for (edge = node->indirect_calls; edge; edge = edge->next_callee)\n     indirect_calls_count++;\n   if (indirect_calls_count)\n-    fprintf (f, \"  has %i outgoing edges for indirect calls.\\n\",\n+    fprintf (f, \"  Has %i outgoing edges for indirect calls.\\n\",\n \t     indirect_calls_count);\n }\n "}, {"sha": "ca06622714cce9a6e7b5aeba93846a96c4b98b33", "filename": "gcc/cgraph.h", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -508,7 +508,14 @@ void symtab_unregister_node (symtab_node);\n void symtab_remove_node (symtab_node);\n symtab_node symtab_get_node (const_tree);\n symtab_node symtab_node_for_asm (const_tree asmname);\n+const char * symtab_node_asm_name (symtab_node);\n+const char * symtab_node_name (symtab_node);\n void symtab_insert_node_to_hashtable (symtab_node);\n+void dump_symtab (FILE *);\n+void debug_symtab (void);\n+void dump_symtab_node (FILE *, symtab_node);\n+void debug_symtab_node (symtab_node);\n+void dump_symtab_base (FILE *, symtab_node);\n \n /* In cgraph.c  */\n void dump_cgraph (FILE *);\n@@ -545,7 +552,6 @@ void cgraph_update_edges_for_call_stmt (gimple, tree, gimple);\n struct cgraph_local_info *cgraph_local_info (tree);\n struct cgraph_global_info *cgraph_global_info (tree);\n struct cgraph_rtl_info *cgraph_rtl_info (tree);\n-const char * cgraph_node_name (struct cgraph_node *);\n struct cgraph_edge * cgraph_clone_edge (struct cgraph_edge *,\n \t\t\t\t\tstruct cgraph_node *, gimple,\n \t\t\t\t\tunsigned, gcov_type, int, bool);\n@@ -715,7 +721,6 @@ void varpool_remove_unreferenced_decls (void);\n void varpool_empty_needed_queue (void);\n struct varpool_node * varpool_extra_name_alias (tree, tree);\n struct varpool_node * varpool_create_variable_alias (tree, tree);\n-const char * varpool_node_name (struct varpool_node *node);\n void varpool_reset_queue (void);\n bool const_value_known_p (tree);\n bool varpool_for_node_and_aliases (struct varpool_node *,\n@@ -769,6 +774,34 @@ varpool_get_node (const_tree decl)\n   return varpool (symtab_get_node (decl));\n }\n \n+/* Return asm name of cgraph node.  */\n+static inline const char *\n+cgraph_node_asm_name(struct cgraph_node *node)\n+{\n+  return symtab_node_asm_name ((symtab_node)node);\n+}\n+\n+/* Return asm name of varpool node.  */\n+static inline const char *\n+varpool_node_asm_name(struct varpool_node *node)\n+{\n+  return symtab_node_asm_name ((symtab_node)node);\n+}\n+\n+/* Return name of cgraph node.  */\n+static inline const char *\n+cgraph_node_name(struct cgraph_node *node)\n+{\n+  return symtab_node_name ((symtab_node)node);\n+}\n+\n+/* Return name of varpool node.  */\n+static inline const char *\n+varpool_node_name(struct varpool_node *node)\n+{\n+  return symtab_node_name ((symtab_node)node);\n+}\n+\n /* Walk all symbols.  */\n #define FOR_EACH_SYMBOL(node) \\\n    for ((node) = symtab_nodes; (node); (node) = (node)->symbol.next)"}, {"sha": "4342d3d30ec12945418acf310a5b9731d7ccc028", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -1273,8 +1273,7 @@ cgraph_analyze_functions (void)\n \tif (node->needed)\n \t  fprintf (cgraph_dump_file, \" %s\", cgraph_node_name (node));\n       fprintf (cgraph_dump_file, \"\\n\\nInitial \");\n-      dump_cgraph (cgraph_dump_file);\n-      dump_varpool (cgraph_dump_file);\n+      dump_symtab (cgraph_dump_file);\n     }\n \n   if (cgraph_dump_file)\n@@ -1310,8 +1309,7 @@ cgraph_analyze_functions (void)\n   if (cgraph_dump_file)\n     {\n       fprintf (cgraph_dump_file, \"\\n\\nReclaimed \");\n-      dump_cgraph (cgraph_dump_file);\n-      dump_varpool (cgraph_dump_file);\n+      dump_symtab (cgraph_dump_file);\n     }\n   bitmap_obstack_release (NULL);\n   first_analyzed = cgraph_first_function ();\n@@ -2690,8 +2688,7 @@ cgraph_optimize (void)\n   if (cgraph_dump_file)\n     {\n       fprintf (cgraph_dump_file, \"Optimized \");\n-      dump_cgraph (cgraph_dump_file);\n-      dump_varpool (cgraph_dump_file);\n+      dump_symtab (cgraph_dump_file);\n     }\n   if (post_ipa_mem_report)\n     {\n@@ -2738,8 +2735,7 @@ cgraph_optimize (void)\n   if (cgraph_dump_file)\n     {\n       fprintf (cgraph_dump_file, \"\\nFinal \");\n-      dump_cgraph (cgraph_dump_file);\n-      dump_varpool (cgraph_dump_file);\n+      dump_symtab (cgraph_dump_file);\n     }\n #ifdef ENABLE_CHECKING\n   verify_cgraph ();"}, {"sha": "d0a6ee0c8e2b7ec7143fb9b827569ea93582f991", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -2544,7 +2544,7 @@ struct ipa_opt_pass_d pass_ipa_cp =\n   0,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */\n-  TODO_dump_cgraph |\n+  TODO_dump_symtab |\n   TODO_remove_functions | TODO_ggc_collect /* todo_flags_finish */\n  },\n  ipcp_generate_summary,\t\t\t/* generate_summary */"}, {"sha": "d28bed4d8325a1ae33e7a004c320922e05b19c17", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -2025,7 +2025,7 @@ struct ipa_opt_pass_d pass_ipa_inline =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   TODO_remove_functions,\t\t/* todo_flags_finish */\n-  TODO_dump_cgraph \n+  TODO_dump_symtab \n   | TODO_remove_functions | TODO_ggc_collect\t/* todo_flags_finish */\n  },\n  inline_generate_summary,\t\t/* generate_summary */"}, {"sha": "08f5ade398fbdfe43d41722e48ba366efba528dd", "filename": "gcc/ipa-ref.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fipa-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fipa-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-ref.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -164,13 +164,13 @@ ipa_dump_references (FILE * file, struct ipa_ref_list *list)\n     {\n       if (ref->refered_type == IPA_REF_CGRAPH)\n \t{\n-\t  fprintf (file, \" fn:%s/%i (%s)\", cgraph_node_name (ipa_ref_node (ref)),\n-\t\t   ipa_ref_node (ref)->uid,\n+\t  fprintf (file, \" fn:%s/%i (%s)\", cgraph_node_asm_name (ipa_ref_node (ref)),\n+\t\t   ipa_ref_node (ref)->symbol.order,\n \t\t   ipa_ref_use_name [ref->use]);\n \t}\n       else\n \tfprintf (file, \" var:%s (%s)\",\n-\t\t varpool_node_name (ipa_ref_varpool_node (ref)),\n+\t\t varpool_node_asm_name (ipa_ref_varpool_node (ref)),\n \t\t ipa_ref_use_name [ref->use]);\n     }\n   fprintf (file, \"\\n\");\n@@ -187,12 +187,12 @@ ipa_dump_refering (FILE * file, struct ipa_ref_list *list)\n     {\n       if (ref->refering_type == IPA_REF_CGRAPH)\n \tfprintf (file, \" fn:%s/%i (%s)\",\n-\t\t cgraph_node_name (ipa_ref_refering_node (ref)),\n-\t\t ipa_ref_refering_node (ref)->uid,\n+\t\t cgraph_node_asm_name (ipa_ref_refering_node (ref)),\n+\t\t ipa_ref_refering_node (ref)->symbol.order,\n \t\t ipa_ref_use_name [ref->use]);\n       else\n \tfprintf (file, \" var:%s (%s)\",\n-\t\t varpool_node_name (ipa_ref_refering_varpool_node (ref)),\n+\t\t varpool_node_asm_name (ipa_ref_refering_varpool_node (ref)),\n \t\t ipa_ref_use_name [ref->use]);\n     }\n   fprintf (file, \"\\n\");"}, {"sha": "faf3a20ca83a3bcd817ab5108bce5717d5e14983", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -553,7 +553,7 @@ generate_summary (void)\n \t  l = &get_reference_vars_info (node)->local;\n \t  fprintf (dump_file,\n \t\t   \"\\nFunction name:%s/%i:\",\n-\t\t   cgraph_node_name (node), node->uid);\n+\t\t   cgraph_node_asm_name (node), node->symbol.order);\n \t  fprintf (dump_file, \"\\n  locals read: \");\n \t  if (l->statics_read)\n \t    EXECUTE_IF_SET_IN_BITMAP (l->statics_read,\n@@ -592,7 +592,7 @@ read_write_all_from_decl (struct cgraph_node *node, bool * read_all,\n       *read_all = true;\n       if (dump_file && (dump_flags & TDF_DETAILS))\n          fprintf (dump_file, \"   %s/%i -> read all\\n\",\n-\t\t  cgraph_node_name (node), node->uid);\n+\t\t  cgraph_node_asm_name (node), node->symbol.order);\n     }\n   else\n     {\n@@ -602,7 +602,7 @@ read_write_all_from_decl (struct cgraph_node *node, bool * read_all,\n       *write_all = true;\n       if (dump_file && (dump_flags & TDF_DETAILS))\n          fprintf (dump_file, \"   %s/%i -> read all, write all\\n\",\n-\t\t  cgraph_node_name (node), node->uid);\n+\t\t  cgraph_node_asm_name (node), node->symbol.order);\n     }\n }\n \n@@ -653,7 +653,7 @@ propagate (void)\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Starting cycle with %s/%i\\n\",\n-\t\t  cgraph_node_name (node), node->uid);\n+\t\t  cgraph_node_asm_name (node), node->symbol.order);\n \n       node_l = &node_info->local;\n       node_g = &node_info->global;\n@@ -697,7 +697,7 @@ propagate (void)\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file, \"  Visiting %s/%i\\n\",\n-\t\t      cgraph_node_name (w), w->uid);\n+\t\t      cgraph_node_asm_name (w), w->symbol.order);\n \t  /* When function is overwritable, we can not assume anything.  */\n \t  if (cgraph_function_body_availability (w) <= AVAIL_OVERWRITABLE)\n \t    read_write_all_from_decl (w, &read_all, &write_all);\n@@ -811,7 +811,7 @@ propagate (void)\n \t  node_l = &node_info->local;\n \t  fprintf (dump_file,\n \t\t   \"\\nFunction name:%s/%i:\",\n-\t\t   cgraph_node_name (node), node->uid);\n+\t\t   cgraph_node_asm_name (node), node->symbol.order);\n \t  fprintf (dump_file, \"\\n  locals read: \");\n \t  if (node_l->statics_read)\n \t    EXECUTE_IF_SET_IN_BITMAP (node_l->statics_read,\n@@ -837,7 +837,7 @@ propagate (void)\n \t\tget_reference_vars_info (w);\n \t      ipa_reference_local_vars_info_t w_l = &w_ri->local;\n \t      fprintf (dump_file, \"\\n  next cycle: %s/%i \",\n-\t\t       cgraph_node_name (w), w->uid);\n+\t\t       cgraph_node_asm_name (w), w->symbol.order);\n \t      fprintf (dump_file, \"\\n    locals read: \");\n \t      if (w_l->statics_read)\n \t\tEXECUTE_IF_SET_IN_BITMAP (w_l->statics_read,\n@@ -1148,7 +1148,7 @@ ipa_reference_read_optimization_summary (void)\n \t      if (dump_file)\n \t\tfprintf (dump_file,\n \t\t\t \"\\nFunction name:%s/%i:\\n  static not read:\",\n-\t\t\t cgraph_node_name (node), node->uid);\n+\t\t\t cgraph_node_asm_name (node), node->symbol.order);\n \n \t      /* Set the statics not read.  */\n \t      v_count = streamer_read_hwi (ib);"}, {"sha": "51a1dc0ce2fe970329f6b5e9e57b49d6fdb53434", "filename": "gcc/ipa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -989,7 +989,7 @@ struct simple_ipa_opt_pass pass_ipa_function_and_variable_visibility =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_remove_functions | TODO_dump_cgraph\n+  TODO_remove_functions | TODO_dump_symtab\n   | TODO_ggc_collect\t\t\t/* todo_flags_finish */\n  }\n };\n@@ -1047,7 +1047,7 @@ struct ipa_opt_pass_d pass_ipa_whole_program_visibility =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_remove_functions | TODO_dump_cgraph\n+  TODO_remove_functions | TODO_dump_symtab\n   | TODO_ggc_collect\t\t\t/* todo_flags_finish */\n  },\n  NULL,\t\t\t\t\t/* generate_summary */"}, {"sha": "6589e7803d3237728f3a2beedf13037ba19d068e", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -2389,6 +2389,6 @@ struct simple_ipa_opt_pass pass_ipa_matrix_reorg =\n   0,\t\t\t\t/* properties_provided */\n   0,\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */\n-  TODO_dump_cgraph      \t/* todo_flags_finish */\n+  TODO_dump_symtab      \t/* todo_flags_finish */\n  }\n };"}, {"sha": "fadb4d719a5603328702b660057aefd838653711", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -1862,7 +1862,7 @@ execute_todo (unsigned int flags)\n       cgraph_remove_unreachable_nodes (true, dump_file);\n     }\n \n-  if ((flags & TODO_dump_cgraph) && dump_file && !current_function_decl)\n+  if ((flags & TODO_dump_symtab) && dump_file && !current_function_decl)\n     {\n       gcc_assert (!cfun);\n       dump_cgraph (dump_file);"}, {"sha": "5577cb2b189e33d5ed6b447f708f263679833ee9", "filename": "gcc/symtab.c", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"tree-inline.h\"\n+#include \"langhooks.h\"\n #include \"hashtab.h\"\n #include \"ggc.h\"\n #include \"cgraph.h\"\n@@ -333,4 +334,141 @@ change_decl_assembler_name (tree decl, tree name)\n     }\n }\n \n+/* Return printable assembler name of NODE.\n+   This function is used only for debugging.  When assembler name\n+   is unknown go with identifier name.  */\n+\n+const char *\n+symtab_node_asm_name (symtab_node node)\n+{\n+  if (!DECL_ASSEMBLER_NAME_SET_P (node->symbol.decl))\n+    return lang_hooks.decl_printable_name (node->symbol.decl, 2);\n+  return IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->symbol.decl));\n+}\n+\n+/* Return printable identifier name.  */\n+\n+const char *\n+symtab_node_name (symtab_node node)\n+{\n+  return lang_hooks.decl_printable_name (node->symbol.decl, 2);\n+}\n+\n+static const char * const symtab_type_names[] = {\"symbol\", \"function\", \"variable\"};\n+\n+/* Dump base fields of symtab nodes.  Not to be used directly.  */\n+\n+void\n+dump_symtab_base (FILE *f, symtab_node node)\n+{\n+  static const char * const visibility_types[] = {\n+    \"default\", \"protected\", \"hidden\", \"internal\"\n+  };\n+\n+  fprintf (f, \"%s/%i (%s)\",\n+\t   symtab_node_asm_name (node),\n+\t   node->symbol.order,\n+\t   symtab_node_name (node));\n+  dump_addr (f, \" @\", (void *)node);\n+  fprintf (f, \"\\n  Type: %s\\n\", symtab_type_names[node->symbol.type]);\n+  fprintf (f, \"  Visibility:\");\n+\n+  if (node->symbol.in_other_partition)\n+    fprintf (f, \" in_other_partition\");\n+  if (node->symbol.used_from_other_partition)\n+    fprintf (f, \" used_from_other_partition\");\n+  if (node->symbol.resolution != LDPR_UNKNOWN)\n+    fprintf (f, \" %s\",\n+ \t     ld_plugin_symbol_resolution_names[(int)node->symbol.resolution]);\n+  if (TREE_ASM_WRITTEN (node->symbol.decl))\n+    fprintf (f, \" asm_written\");\n+  if (DECL_EXTERNAL (node->symbol.decl))\n+    fprintf (f, \" external\");\n+  if (TREE_PUBLIC (node->symbol.decl))\n+    fprintf (f, \" public\");\n+  if (DECL_COMMON (node->symbol.decl))\n+    fprintf (f, \" common\");\n+  if (DECL_WEAK (node->symbol.decl))\n+    fprintf (f, \" weak\");\n+  if (DECL_DLLIMPORT_P (node->symbol.decl))\n+    fprintf (f, \" dll_import\");\n+  if (DECL_COMDAT (node->symbol.decl))\n+    fprintf (f, \" comdat\");\n+  if (DECL_COMDAT_GROUP (node->symbol.decl))\n+    fprintf (f, \" comdat_group:%s\",\n+\t     IDENTIFIER_POINTER (DECL_COMDAT_GROUP (node->symbol.decl)));\n+  if (DECL_ONE_ONLY (node->symbol.decl))\n+    fprintf (f, \" one_only\");\n+  if (DECL_SECTION_NAME (node->symbol.decl))\n+    fprintf (f, \" section_name:%s\",\n+\t     IDENTIFIER_POINTER (DECL_SECTION_NAME (node->symbol.decl)));\n+  if (DECL_VISIBILITY_SPECIFIED (node->symbol.decl))\n+    fprintf (f, \" visibility_specified\");\n+  if (DECL_VISIBILITY (node->symbol.decl))\n+    fprintf (f, \" visibility:%s\",\n+\t     visibility_types [DECL_VISIBILITY (node->symbol.decl)]);\n+  if (DECL_VIRTUAL_P (node->symbol.decl))\n+    fprintf (f, \" virtual\");\n+  if (DECL_ARTIFICIAL (node->symbol.decl))\n+    fprintf (f, \" artificial\");\n+  fprintf (f, \"\\n\");\n+  \n+  if (node->symbol.same_comdat_group)\n+    fprintf (f, \"  Same comdat group as: %s/%i\\n\",\n+\t     symtab_node_asm_name (node->symbol.same_comdat_group),\n+\t     node->symbol.same_comdat_group->symbol.order);\n+  if (node->symbol.next_sharing_asm_name)\n+    fprintf (f, \"  next sharing asm name: %i\\n\",\n+\t     node->symbol.same_comdat_group->symbol.order);\n+  if (node->symbol.previous_sharing_asm_name)\n+    fprintf (f, \"  previous sharing asm name: %i\\n\",\n+\t     node->symbol.same_comdat_group->symbol.order);\n+\n+  if (node->symbol.address_taken)\n+    fprintf (f, \"  Address is taken.\");\n+\n+  fprintf (f, \"  References: \");\n+  ipa_dump_references (f, &node->symbol.ref_list);\n+  fprintf (f, \"  Refering: \");\n+  ipa_dump_refering (f, &node->symbol.ref_list);\n+}\n+\n+/* Dump symtab node.  */\n+\n+void\n+dump_symtab_node (FILE *f, symtab_node node)\n+{\n+  if (symtab_function_p (node))\n+    dump_cgraph_node (f, cgraph (node));\n+  else if (symtab_variable_p (node))\n+    dump_varpool_node (f, varpool (node));\n+}\n+\n+/* Dump symbol table.  */\n+\n+void\n+dump_symtab (FILE *f)\n+{\n+  symtab_node node;\n+  fprintf (f, \"Symbol table:\\n\\n\");\n+  FOR_EACH_SYMBOL (node)\n+    dump_symtab_node (f, node);\n+}\n+\n+/* Dump symtab node NODE to stderr.  */\n+\n+DEBUG_FUNCTION void\n+debug_symtab_node (symtab_node node)\n+{\n+  dump_symtab_node (stderr, node);\n+}\n+\n+/* Dump symbol table to stderr.  */\n+\n+DEBUG_FUNCTION void\n+debug_symtab (void)\n+{\n+  dump_symtab (stderr);\n+}\n+\n #include \"gt-symtab.h\""}, {"sha": "1c902bc1648bc429cc1be71be3c2e7e07f914849", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -250,7 +250,7 @@ struct dump_file_info\n #define TODO_verify_flow\t\t(1 << 3)\n #define TODO_verify_stmts\t\t(1 << 4)\n #define TODO_cleanup_cfg        \t(1 << 5)\n-#define TODO_dump_cgraph\t\t(1 << 7)\n+#define TODO_dump_symtab\t\t(1 << 7)\n #define TODO_remove_functions\t\t(1 << 8)\n #define TODO_rebuild_frequencies\t(1 << 9)\n #define TODO_verify_rtl_sharing         (1 << 10)"}, {"sha": "70b241d52376f498f5aead18f4a6e30dd0dba90e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -4865,6 +4865,6 @@ struct gimple_opt_pass pass_early_ipa_sra =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_cgraph              \t/* todo_flags_finish */\n+  TODO_dump_symtab              \t/* todo_flags_finish */\n  }\n };"}, {"sha": "28d2312e8e308156fa859b4b6334638cdd55b5ba", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -6857,7 +6857,7 @@ ipa_pta_execute (void)\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      dump_cgraph (dump_file);\n+      dump_symtab (dump_file);\n       fprintf (dump_file, \"\\n\");\n     }\n "}, {"sha": "27639935d9d8ec6191867a07439146f2f062e169", "filename": "gcc/varpool.c", "status": "modified", "additions": 3, "deletions": 26, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f940ee6546bc5411d4f65174c87c20a424c7ca1/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=8f940ee6546bc5411d4f65174c87c20a424c7ca1", "patch": "@@ -74,13 +74,6 @@ static GTY(()) symtab_node x_varpool_first_unanalyzed_node;\n /* Lists all assembled variables to be sent to debugger output later on.  */\n static GTY(()) struct varpool_node *varpool_assembled_nodes_queue;\n \n-/* Return name of the node used in debug output.  */\n-const char *\n-varpool_node_name (struct varpool_node *node)\n-{\n-  return lang_hooks.decl_printable_name (node->symbol.decl, 2);\n-}\n-\n /* Return varpool node assigned to DECL.  Create new one when needed.  */\n struct varpool_node *\n varpool_node (tree decl)\n@@ -127,17 +120,14 @@ varpool_remove_node (struct varpool_node *node)\n void\n dump_varpool_node (FILE *f, struct varpool_node *node)\n {\n-  fprintf (f, \"%s:\", varpool_node_name (node));\n-  fprintf (f, \" availability:%s\",\n+  dump_symtab_base (f, (symtab_node)node);\n+  fprintf (f, \"  Availability: %s\\n\",\n \t   cgraph_function_flags_ready\n \t   ? cgraph_availability_names[cgraph_variable_initializer_availability (node)]\n \t   : \"not-ready\");\n-  if (DECL_ASSEMBLER_NAME_SET_P (node->symbol.decl))\n-    fprintf (f, \" (asm: %s)\", IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->symbol.decl)));\n+  fprintf (f, \"  Varpool flags:\");\n   if (DECL_INITIAL (node->symbol.decl))\n     fprintf (f, \" initialized\");\n-  if (TREE_ASM_WRITTEN (node->symbol.decl))\n-    fprintf (f, \" (asm written)\");\n   if (node->needed)\n     fprintf (f, \" needed\");\n   if (node->analyzed)\n@@ -146,20 +136,7 @@ dump_varpool_node (FILE *f, struct varpool_node *node)\n     fprintf (f, \" finalized\");\n   if (node->output)\n     fprintf (f, \" output\");\n-  if (node->symbol.externally_visible)\n-    fprintf (f, \" externally_visible\");\n-  if (node->symbol.resolution != LDPR_UNKNOWN)\n-    fprintf (f, \" %s\",\n- \t     ld_plugin_symbol_resolution_names[(int)node->symbol.resolution]);\n-  if (node->symbol.in_other_partition)\n-    fprintf (f, \" in_other_partition\");\n-  else if (node->symbol.used_from_other_partition)\n-    fprintf (f, \" used_from_other_partition\");\n   fprintf (f, \"\\n\");\n-  fprintf (f, \"  References: \");\n-  ipa_dump_references (f, &node->symbol.ref_list);\n-  fprintf (f, \"  Refering this var: \");\n-  ipa_dump_refering (f, &node->symbol.ref_list);\n }\n \n /* Dump the variable pool.  */"}]}