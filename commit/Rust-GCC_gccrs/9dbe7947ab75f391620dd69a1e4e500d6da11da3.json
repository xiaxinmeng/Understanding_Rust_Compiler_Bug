{"sha": "9dbe7947ab75f391620dd69a1e4e500d6da11da3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRiZTc5NDdhYjc1ZjM5MTYyMGRkNjlhMWU0ZTUwMGQ2ZGExMWRhMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-05-24T14:21:14Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-05-24T14:21:14Z"}, "message": "invoke.texi (-fdump-unnumbered): Update docs when line number notes are gone.\n\n\t* doc/invoke.texi (-fdump-unnumbered): Update docs when line number\n\tnotes are gone.\n\t* print-rtl.c (flag_dump_unnumbered): Update comments.\n\t(print_rtl): Fix my previous change.\n\t* emit-rtl.c (emit_note_before, emit_note_after): Clear out note\n\tspecific data.\n\nFrom-SVN: r125026", "tree": {"sha": "fa0c13cb0e70d6ed10a21b63a57adb511b304704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa0c13cb0e70d6ed10a21b63a57adb511b304704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dbe7947ab75f391620dd69a1e4e500d6da11da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbe7947ab75f391620dd69a1e4e500d6da11da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dbe7947ab75f391620dd69a1e4e500d6da11da3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbe7947ab75f391620dd69a1e4e500d6da11da3/comments", "author": null, "committer": null, "parents": [{"sha": "7544f94a79e5e9c0683e8d40de919941c9bd5271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7544f94a79e5e9c0683e8d40de919941c9bd5271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7544f94a79e5e9c0683e8d40de919941c9bd5271"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "88096ccf22629c605f353e36d77962b5d250048e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbe7947ab75f391620dd69a1e4e500d6da11da3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbe7947ab75f391620dd69a1e4e500d6da11da3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9dbe7947ab75f391620dd69a1e4e500d6da11da3", "patch": "@@ -1,3 +1,12 @@\n+2007-05-24  Jan Hubicka  <jh@suse.cz>\n+\n+\t* doc/invoke.texi (-fdump-unnumbered): Update docs when line number\n+\tnotes are gone.\n+\t* print-rtl.c (flag_dump_unnumbered): Update comments.\n+\t(print_rtl): Fix my previous change.\n+\t* emit-rtl.c (emit_note_before, emit_note_after): Clear out note\n+\tspecific data.\n+\n 2007-05-24  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR middle-end/32018"}, {"sha": "47b68d73a75c3419c13a309dc81f842fb94e0882", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbe7947ab75f391620dd69a1e4e500d6da11da3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbe7947ab75f391620dd69a1e4e500d6da11da3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9dbe7947ab75f391620dd69a1e4e500d6da11da3", "patch": "@@ -4495,7 +4495,7 @@ different text / bss / data / heap / stack / dso start locations.\n @item -fdump-unnumbered\n @opindex fdump-unnumbered\n When doing debugging dumps (see @option{-d} option above), suppress instruction\n-numbers, line number note and address output.  This makes it more feasible to\n+numbers and address output.  This makes it more feasible to\n use diff on debugging dumps for compiler invocations with different\n options, in particular with and without @option{-g}.\n "}, {"sha": "17f8c2d8446b45c7b91690ab18671a3338dc1e2c", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbe7947ab75f391620dd69a1e4e500d6da11da3/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbe7947ab75f391620dd69a1e4e500d6da11da3/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=9dbe7947ab75f391620dd69a1e4e500d6da11da3", "patch": "@@ -3881,6 +3881,7 @@ emit_note_before (enum insn_note subtype, rtx before)\n   INSN_UID (note) = cur_insn_uid++;\n   NOTE_KIND (note) = subtype;\n   BLOCK_FOR_INSN (note) = NULL;\n+  memset (&NOTE_DATA (note), 0, sizeof (NOTE_DATA (note)));\n \n   add_insn_before (note, before);\n   return note;\n@@ -4078,6 +4079,7 @@ emit_note_after (enum insn_note subtype, rtx after)\n   INSN_UID (note) = cur_insn_uid++;\n   NOTE_KIND (note) = subtype;\n   BLOCK_FOR_INSN (note) = NULL;\n+  memset (&NOTE_DATA (note), 0, sizeof (NOTE_DATA (note)));\n   add_insn_after (note, after);\n   return note;\n }"}, {"sha": "5088df5cab678e37f150720a6ba0b72b957c09ea", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbe7947ab75f391620dd69a1e4e500d6da11da3/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbe7947ab75f391620dd69a1e4e500d6da11da3/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=9dbe7947ab75f391620dd69a1e4e500d6da11da3", "patch": "@@ -191,7 +191,7 @@ gendecl (const char *format)\n   const char *p;\n   int i, pos;\n \n-  printf (\"extern rtx gen_rtx_fmt_%s\\t (RTX_CODE, \", format);\n+  printf (\"extern rtx gen_rtx_fmt_%s_stat\\t (RTX_CODE, \", format);\n   printf (\"enum machine_mode mode\");\n \n   /* Write each parameter that is needed and start a new line when the line\n@@ -208,8 +208,18 @@ gendecl (const char *format)\n \tprintf (\" %sarg%d\", type_from_format (*p), i++);\n \tpos += ourlen;\n       }\n+  printf (\" MEM_STAT_DECL\");\n \n   printf (\");\\n\");\n+  printf (\"#define gen_rtx_fmt_%s(c, m\", format);\n+  for (p = format, i = 0; *p != 0; p++)\n+    if (*p != '0')\n+      printf (\", p%i\",i++);\n+  printf (\")\\\\\\n        gen_rtx_fmt_%s_stat (c, m\", format);\n+  for (p = format, i = 0; *p != 0; p++)\n+    if (*p != '0')\n+      printf (\", p%i\",i++);\n+  printf (\" MEM_STAT_INFO)\\n\\n\");\n }\n \n /* Generate macros to generate RTL of code IDX using the functions we\n@@ -257,18 +267,18 @@ gendef (const char *format)\n   /* Start by writing the definition of the function name and the types\n      of the arguments.  */\n \n-  printf (\"rtx\\ngen_rtx_fmt_%s (RTX_CODE code, enum machine_mode mode\", format);\n+  printf (\"rtx\\ngen_rtx_fmt_%s_stat (RTX_CODE code, enum machine_mode mode\", format);\n   for (p = format, i = 0; *p != 0; p++)\n     if (*p != '0')\n       printf (\",\\n\\t%sarg%d\", type_from_format (*p), i++);\n \n-  puts (\")\");\n+  puts (\" MEM_STAT_DECL)\");\n \n   /* Now write out the body of the function itself, which allocates\n      the memory and initializes it.  */\n   puts (\"{\");\n   puts (\"  rtx rt;\");\n-  puts (\"  rt = rtx_alloc (code);\\n\");\n+  puts (\"  rt = rtx_alloc_stat (code PASS_MEM_STAT);\\n\");\n \n   puts (\"  PUT_MODE (rt, mode);\");\n \n@@ -299,6 +309,7 @@ genheader (void)\n \n   puts (\"#ifndef GCC_GENRTL_H\");\n   puts (\"#define GCC_GENRTL_H\\n\");\n+  puts (\"#include \\\"statistics.h\\\"\\n\");\n \n   for (fmt = formats; *fmt; ++fmt)\n     gendecl (*fmt);"}, {"sha": "a47a02b87febfe8c70db207dae65b5784f05936e", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbe7947ab75f391620dd69a1e4e500d6da11da3/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbe7947ab75f391620dd69a1e4e500d6da11da3/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=9dbe7947ab75f391620dd69a1e4e500d6da11da3", "patch": "@@ -56,8 +56,8 @@ static void print_rtx (rtx);\n    the assembly output file.  */\n const char *print_rtx_head = \"\";\n \n-/* Nonzero means suppress output of instruction numbers and line number\n-   notes in debugging dumps.\n+/* Nonzero means suppress output of instruction numbers\n+   in debugging dumps.\n    This must be defined here so that programs like gencodes can be linked.  */\n int flag_dump_unnumbered = 0;\n \n@@ -705,6 +705,8 @@ debug_rtx_find (rtx x, int uid)\n void\n print_rtl (FILE *outf, rtx rtx_first)\n {\n+  rtx tmp_rtx;\n+\n   outfile = outf;\n   sawclose = 0;\n \n@@ -722,6 +724,12 @@ print_rtl (FILE *outf, rtx rtx_first)\n       case NOTE:\n       case CODE_LABEL:\n       case BARRIER:\n+\tfor (tmp_rtx = rtx_first; tmp_rtx != 0; tmp_rtx = NEXT_INSN (tmp_rtx))\n+\t  {\n+\t    fputs (print_rtx_head, outfile);\n+\t    print_rtx (tmp_rtx);\n+\t    fprintf (outfile, \"\\n\");\n+\t  }\n \tbreak;\n \n       default:"}]}