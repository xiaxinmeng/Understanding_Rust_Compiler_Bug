{"sha": "9e4eb5598d347211a5a50b791bcbea863dfba49b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU0ZWI1NTk4ZDM0NzIxMWE1YTUwYjc5MWJjYmVhODYzZGZiYTQ5Yg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-07-29T15:01:51Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-07-29T15:01:51Z"}, "message": "* decl.c, init.c, initialize.c: Fix comment typos.\n\nFrom-SVN: r102556", "tree": {"sha": "a79ac23ee5a75b18e8d7d071cfb7640524cc87fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a79ac23ee5a75b18e8d7d071cfb7640524cc87fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e4eb5598d347211a5a50b791bcbea863dfba49b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e4eb5598d347211a5a50b791bcbea863dfba49b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e4eb5598d347211a5a50b791bcbea863dfba49b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e4eb5598d347211a5a50b791bcbea863dfba49b/comments", "author": null, "committer": null, "parents": [{"sha": "536fa7b7bb0cec076111790ba059d5c5005680eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536fa7b7bb0cec076111790ba059d5c5005680eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/536fa7b7bb0cec076111790ba059d5c5005680eb"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "2b6b5189650b2d3da13badccf59d33cba0bbac65", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e4eb5598d347211a5a50b791bcbea863dfba49b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e4eb5598d347211a5a50b791bcbea863dfba49b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9e4eb5598d347211a5a50b791bcbea863dfba49b", "patch": "@@ -1,3 +1,7 @@\n+2005-07-29  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* decl.c, init.c, initialize.c: Fix comment typos.\n+\n 2005-07-20  Giovanni Bajo  <giovannibajo@libero.it>\n \n \tMake CONSTRUCTOR use VEC to store initializers."}, {"sha": "3909d953ff59c5da5700f0b7288a60c7a5b8ade8", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e4eb5598d347211a5a50b791bcbea863dfba49b/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e4eb5598d347211a5a50b791bcbea863dfba49b/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=9e4eb5598d347211a5a50b791bcbea863dfba49b", "patch": "@@ -5168,7 +5168,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \n       /* Compute whether we should avoid the substitution.  */\n       int reject =\n-        /* There is no point subtituting if there is no change.  */\n+        /* There is no point substituting if there is no change.  */\n         (gnu_packable_type == gnu_field_type\n          ||\n          /* The size of an aliased field must be an exact multiple of the"}, {"sha": "990d0cb5eab7ce5f06df370a43ae37ce9fd1d479", "filename": "gcc/ada/init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e4eb5598d347211a5a50b791bcbea863dfba49b/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e4eb5598d347211a5a50b791bcbea863dfba49b/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=9e4eb5598d347211a5a50b791bcbea863dfba49b", "patch": "@@ -282,7 +282,7 @@ __gnat_set_globals (int main_priority,\n    as the faulting instruction address in the corresponding signal context\n    pushed by the kernel. Leaving this address untouched may loose, because if\n    the triggering instruction happens to be the very first of a region, the\n-   later adjustements performed by the unwinder would yield an address outside\n+   later adjustments performed by the unwinder would yield an address outside\n    that region. We need to compensate for those adjustments at some point,\n    which we currently do in the GCC unwinding fallback macro.\n \n@@ -1137,7 +1137,7 @@ extern char *__gnat_error_prehandler_stack;   /* Alternate signal stack */\n \n /* Define macro symbols for the VMS conditions that become Ada exceptions.\n    Most of these are also defined in the header file ssdef.h which has not\n-   yet been converted to be recoginized by Gnu C. */\n+   yet been converted to be recognized by Gnu C. */\n \n /* Defining these as macros, as opposed to external addresses, allows\n    them to be used in a case statement (below */\n@@ -1155,7 +1155,7 @@ extern int LIB$_ACTIMAGE;\n extern int MTH$_FLOOVEMAT;       /* Some ACVC_21 CXA tests */\n \n /* These codes are non standard, which is to say the author is\n-   not sure if they are defined in the standar message libraries\n+   not sure if they are defined in the standard message libraries\n    so keep them as macros for now. */\n #define RDB$_STREAM_EOF 20480426\n #define FDL$_UNPRIKW 11829410\n@@ -1315,7 +1315,7 @@ static const struct cond_except cond_except_table [] = {\n    ??? This is not a perfect solution to deal with the possible\n    interactions between the GNAT and the DECAda exception handling\n    models and better (more general) schemes are studied.  This is so\n-   just provided as a conveniency workaround in the meantime, and\n+   just provided as a convenient workaround in the meantime, and\n    should be use with caution since the implementation has been kept\n    very simple.  */\n \n@@ -1767,7 +1767,7 @@ __gnat_init_float (void)\n   asm (\"mtfsb0 26\");\n #endif\n \n-  /* Similarily for sparc64. Achieved by masking bits in the Trap Enable Mask\n+  /* Similarly for sparc64. Achieved by masking bits in the Trap Enable Mask\n      field of the Floating-point Status Register (see the Sparc Architecture\n      Manual Version 9, p 48).  */\n #if defined (sparc64)"}, {"sha": "9d00698b37fdefce5e1fc78938507c1120988a27", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e4eb5598d347211a5a50b791bcbea863dfba49b/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e4eb5598d347211a5a50b791bcbea863dfba49b/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=9e4eb5598d347211a5a50b791bcbea863dfba49b", "patch": "@@ -123,7 +123,7 @@ __gnat_initialize (void *eh)\n      constructor fashion, typically triggered by the VxWorks loader.  This is\n      achieved by way of a special variable declaration in the crt object, the\n      name of which has been deduced by analyzing the output of the \"munching\"\n-     step documented for C++.  The de-registration is handled symetrically,\n+     step documented for C++.  The de-registration is handled symmetrically,\n      a-la C++ destructor fashion and typically triggered by the dynamic\n      unloader.  Note that since the tables shall be registered against a\n      common datastructure, libgcc should be one of the modules (vs beeing"}]}