{"sha": "7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QzMWE4MDdjZTkwZWQzNzRiYjZmZTk4ZTIxOGY3YmM2NGEzYTE3ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2009-05-23T01:34:53Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2009-05-23T01:34:53Z"}, "message": "thumb2.md: Add 16-bit multiply instructions.\n\n\t* config/arm/thumb2.md: Add 16-bit multiply instructions.\n\tgcc/testsuite/\n\n\t* lib/target-supports.exp (check_effective_target_arm_thumb2_ok):\n\tNew function.\n\t* gcc.target/arm/thumb2-mul-space.c: New file.\n\t* gcc.target/arm/thumb2-mul-space-2.c: New file.\n\t* gcc.target/arm/thumb2-mul-space-3.c: New file.\n\t* gcc.target/arm/thumb2-mul-speed.c: New file.\n\nFrom-SVN: r147812", "tree": {"sha": "157fee7699ef3fa07300adca75834cef32a72e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/157fee7699ef3fa07300adca75834cef32a72e89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/comments", "author": null, "committer": null, "parents": [{"sha": "67f43f51c4097477c00e5ff5d052ff6126462ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f43f51c4097477c00e5ff5d052ff6126462ee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f43f51c4097477c00e5ff5d052ff6126462ee9"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "a0641276d3ebb3e54025372365dd73282adf9e90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "patch": "@@ -1,3 +1,8 @@\n+2009-05-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* config/arm/thumb2.md: Add 16-bit multiply instructions.\n+\tgcc/testsuite/\n+\n 2009-05-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR tree-optimization/40219"}, {"sha": "82d3413c7bea20746e9ea8c7b2643d486be7480b", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "patch": "@@ -1162,6 +1162,71 @@\n    (set_attr \"length\" \"2\")]\n )\n \n+;; 16-bit encodings of \"muls\" and \"mul<c>\".  We only use these when\n+;; optimizing for size since \"muls\" is slow on all known\n+;; implementations and since \"mul<c>\" will be generated by\n+;; \"*arm_mulsi3_v6\" anyhow.  The assembler will use a 16-bit encoding\n+;; for \"mul<c>\" whenever possible anyhow.\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"low_register_operand\" \"\")\n+        (mult:SI (match_operand:SI 1 \"low_register_operand\" \"\")\n+                 (match_dup 0)))]\n+  \"TARGET_THUMB2 && optimize_size && peep2_regno_dead_p (0, CC_REGNUM)\"\n+  [(parallel\n+    [(set (match_dup 0)\n+           (mult:SI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC CC_REGNUM))])]\n+  \"\"\n+)\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"low_register_operand\" \"\")\n+        (mult:SI (match_dup 0)\n+\t         (match_operand:SI 1 \"low_register_operand\" \"\")))]\n+  \"TARGET_THUMB2 && optimize_size && peep2_regno_dead_p (0, CC_REGNUM)\"\n+  [(parallel\n+    [(set (match_dup 0)\n+           (mult:SI (match_dup 0) (match_dup 1)))\n+     (clobber (reg:CC CC_REGNUM))])]\n+  \"\"\n+)\n+\n+(define_insn \"*thumb2_mulsi_short\"\n+  [(set (match_operand:SI 0 \"low_register_operand\" \"=l\")\n+        (mult:SI (match_operand:SI 1 \"low_register_operand\" \"%0\")\n+                 (match_operand:SI 2 \"low_register_operand\" \"l\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_THUMB2 && optimize_size && reload_completed\"\n+  \"mul%!\\\\t%0, %2, %0\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"length\" \"2\")\n+   (set_attr \"insn\" \"muls\")])\n+\n+(define_insn \"*thumb2_mulsi_short_compare0\"\n+  [(set (reg:CC_NOOV CC_REGNUM)\n+        (compare:CC_NOOV\n+         (mult:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n+\t          (match_operand:SI 2 \"register_operand\" \"l\"))\n+         (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=l\")\n+\t(mult:SI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_THUMB2 && optimize_size\"\n+  \"muls\\\\t%0, %2, %0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"insn\" \"muls\")])\n+\n+(define_insn \"*thumb2_mulsi_short_compare0_scratch\"\n+  [(set (reg:CC_NOOV CC_REGNUM)\n+        (compare:CC_NOOV\n+         (mult:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n+\t          (match_operand:SI 2 \"register_operand\" \"l\"))\n+         (const_int 0)))\n+   (clobber (match_scratch:SI 0 \"=r\"))]\n+  \"TARGET_THUMB2 && optimize_size\"\n+  \"muls\\\\t%0, %2, %0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"insn\" \"muls\")])\n+\n (define_insn \"*thumb2_cbz\"\n   [(set (pc) (if_then_else\n \t      (eq (match_operand:SI 0 \"s_register_operand\" \"l,?r\")"}, {"sha": "1de60baf58230d3ecff38062b87b8f59ae6bfdad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "patch": "@@ -1,3 +1,12 @@\n+2009-05-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_arm_thumb2_ok):\n+\tNew function.\n+\t* gcc.target/arm/thumb2-mul-space.c: New file.\n+\t* gcc.target/arm/thumb2-mul-space-2.c: New file.\n+\t* gcc.target/arm/thumb2-mul-space-3.c: New file.\n+\t* gcc.target/arm/thumb2-mul-speed.c: New file.\n+\n 2009-05-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/38964"}, {"sha": "b53df2fa12ae3e5b72b3ff4403a71d33b45ff7c2", "filename": "gcc/testsuite/gcc.target/arm/thumb2-mul-space-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-space-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-space-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-space-2.c?ref=7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "patch": "@@ -0,0 +1,15 @@\n+/* In Thumb-2 mode, when optimizing for size, generate a \"muls\"\n+   instruction and use the resulting condition flags rather than a\n+   separate compare instruction.  */\n+/* { dg-options \"-mthumb -Os\" }  */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-final { scan-assembler \"muls\" } } */\n+/* { dg-final { scan-assembler-not \"cmp\" } } */\n+\n+int x;\n+\n+void f(int i, int j)\n+{\n+  if (i * j < 0)\n+    x = 1;\n+}"}, {"sha": "143a6deee795edda5da87edaeb99479a2abb2cec", "filename": "gcc/testsuite/gcc.target/arm/thumb2-mul-space-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-space-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-space-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-space-3.c?ref=7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "patch": "@@ -0,0 +1,17 @@\n+/* In Thumb-2 mode, when optimizing for size, generate a \"muls\"\n+   instruction and use the resulting condition flags rather than a\n+   separate compare instruction.  */\n+/* { dg-options \"-mthumb -Os\" }  */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-final { scan-assembler \"muls\" } } */\n+/* { dg-final { scan-assembler-not \"cmp\" } } */\n+\n+int x;\n+\n+int f(int i, int j)\n+{\n+  i = i * j;\n+  if (i < 0)\n+    x = 1;\n+  return i;\n+}"}, {"sha": "8cf0cb40f41822345c485c85ac01ea225f1942e8", "filename": "gcc/testsuite/gcc.target/arm/thumb2-mul-space.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-space.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-space.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-space.c?ref=7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "patch": "@@ -0,0 +1,10 @@\n+/* Use 16-bit multiply instruction in Thumb-2 mode when optimizing for\n+   size.  */\n+/* { dg-options \"-mthumb -Os\" }  */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-final { scan-assembler \"muls\" } } */\n+\n+int f(int i, int j) \n+{\n+  return i * j;\n+}"}, {"sha": "03cccdb654bcfa15dbf8d0da950ca69ab4b1a786", "filename": "gcc/testsuite/gcc.target/arm/thumb2-mul-speed.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-speed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-speed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-mul-speed.c?ref=7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "patch": "@@ -0,0 +1,27 @@\n+/* Do not use 16-bit multiply instructions in Thumb-2 mode when\n+   optimizing for speed.  */\n+/* { dg-options \"-mthumb -O2\" }  */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-final { scan-assembler-not \"muls\" } } */\n+\n+int f(int i, int j) \n+{\n+  return i * j;\n+}\n+\n+int x;\n+\n+void g(int i, int j)\n+{\n+  if (i * j < 0)\n+    x = 1;\n+}\n+\n+int h(int i, int j)\n+{\n+  i = i * j;\n+  if (i < 0)\n+    x = 1;\n+  return i;\n+}\n+"}, {"sha": "f726e6f05d00f16048699ea191e9f9bdb2a22a92", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a807ce90ed374bb6fe98e218f7bc64a3a17e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=7d31a807ce90ed374bb6fe98e218f7bc64a3a17e", "patch": "@@ -1477,6 +1477,17 @@ proc check_effective_target_arm_thumb1_ok { } {\n     } \"-mthumb\"]\n }\n \n+# Return 1 is this is an ARM target where -mthumb causes Thumb-2 to be\n+# used.\n+\n+proc check_effective_target_arm_thumb2_ok { } {\n+    return [check_no_compiler_messages arm_thumb2_ok assembly {\n+\t#if !defined(__thumb2__)\n+\t#error FOO\n+\t#endif\n+    } \"-mthumb\"]\n+}\n+\n # Return 1 if the target supports executing NEON instructions, 0\n # otherwise.  Cache the result.\n "}]}