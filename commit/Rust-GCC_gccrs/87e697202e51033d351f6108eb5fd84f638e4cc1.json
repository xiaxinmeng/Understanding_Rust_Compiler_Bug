{"sha": "87e697202e51033d351f6108eb5fd84f638e4cc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdlNjk3MjAyZTUxMDMzZDM1MWY2MTA4ZWI1ZmQ4NGY2MzhlNGNjMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:52:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:52:53Z"}, "message": "[multiple changes]\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sinfo.ads: Minor comment addition.\n\n2014-07-29  Bob Duff  <duff@adacore.com>\n\n\t* sem_eval.adb, sem_ch13.adb: Minor reformatting.\n\nFrom-SVN: r213190", "tree": {"sha": "386163c33e98a213a68cc70894aabec4ac813600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/386163c33e98a213a68cc70894aabec4ac813600"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87e697202e51033d351f6108eb5fd84f638e4cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e697202e51033d351f6108eb5fd84f638e4cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e697202e51033d351f6108eb5fd84f638e4cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e697202e51033d351f6108eb5fd84f638e4cc1/comments", "author": null, "committer": null, "parents": [{"sha": "113a9fb6c6c0b2ce325440352bc3b9039e6e07ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113a9fb6c6c0b2ce325440352bc3b9039e6e07ed"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "84d8760c7bc9f8ecff3e3ed89731336ac22d1560", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e697202e51033d351f6108eb5fd84f638e4cc1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e697202e51033d351f6108eb5fd84f638e4cc1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=87e697202e51033d351f6108eb5fd84f638e4cc1", "patch": "@@ -1,3 +1,11 @@\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sinfo.ads: Minor comment addition.\n+\n+2014-07-29  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_eval.adb, sem_ch13.adb: Minor reformatting.\n+\n 2014-07-29  Doug Rupp  <rupp@adacore.com>\n \n \t* init.c: Complete previous change."}, {"sha": "16ce6744d81ddfdfdf84a4c3410b746a243b54b4", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e697202e51033d351f6108eb5fd84f638e4cc1/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e697202e51033d351f6108eb5fd84f638e4cc1/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=87e697202e51033d351f6108eb5fd84f638e4cc1", "patch": "@@ -7579,7 +7579,7 @@ package body Sem_Ch13 is\n \n       Object_Name : constant Name_Id := New_Internal_Name ('I');\n       --  Name for argument of Predicate procedure. Note that we use the same\n-      --  name for both predicate procedure. That way the reference within the\n+      --  name for both predicate functions. That way the reference within the\n       --  predicate expression is the same in both functions.\n \n       Object_Entity : constant Entity_Id :=\n@@ -10600,7 +10600,7 @@ package body Sem_Ch13 is\n       --  all the cases above.\n \n       --  One more test that is an implementation artifact caused by the fact\n-      --  that we are analyzing not the original expresesion, but the generated\n+      --  that we are analyzing not the original expression, but the generated\n       --  expression in the body of the predicate function. This can include\n       --  references to inherited predicates, so that the expression we are\n       --  processing looks like:\n@@ -10609,7 +10609,7 @@ package body Sem_Ch13 is\n \n       --  Where the call is to a Predicate function for an inherited predicate.\n       --  We simply ignore such a call (which could be to either a dynamic or\n-      --  a static predicate, but remember that we can have Static_Predicate\n+      --  a static predicate, but remember that we can have a Static_Predicate\n       --  for a non-static subtype).\n \n       elsif Nkind (Expr) = N_Function_Call"}, {"sha": "074c2b4000f1fce63dd530d980e69879def35202", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e697202e51033d351f6108eb5fd84f638e4cc1/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e697202e51033d351f6108eb5fd84f638e4cc1/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=87e697202e51033d351f6108eb5fd84f638e4cc1", "patch": "@@ -363,8 +363,7 @@ package body Sem_Eval is\n \n       elsif Is_String_Type (Typ) then\n          if Real_Or_String_Static_Predicate_Matches\n-           (Val => Expr_Value_S (Expr),\n-            Typ => Typ)\n+           (Val => Expr_Value_S (Expr), Typ => Typ)\n          then\n             return;\n          end if;"}, {"sha": "479eb6ec39bc0575117bae822da483c9ebcb2384", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e697202e51033d351f6108eb5fd84f638e4cc1/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e697202e51033d351f6108eb5fd84f638e4cc1/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=87e697202e51033d351f6108eb5fd84f638e4cc1", "patch": "@@ -4292,13 +4292,18 @@ package Sinfo is\n       --  (explicitly set to True if missing).\n \n       --  Note: the Then_Actions and Else_Actions fields are always set to\n-      --  No_List in the tree passed to Gigi. These fields are used only\n+      --  No_List in the tree passed to the back end. These are used only\n       --  for temporary processing purposes in the expander. Even though they\n       --  are semantic fields, their parent pointers are set because analysis\n       --  of actions nodes in those lists may generate additional actions that\n       --  need to know their insertion point (for example for the creation of\n       --  transient scopes).\n \n+      --  Note: in the tree passed to the back end, if the result type is\n+      --  an unconstrained array, the if expression can only appears in the\n+      --  initializing expression of an object declaration (this avoids the\n+      --  back end having to create a variable length temporary on the fly).\n+\n       ----------------------------\n       -- 4.5.7  Case Expression --\n       ----------------------------"}]}