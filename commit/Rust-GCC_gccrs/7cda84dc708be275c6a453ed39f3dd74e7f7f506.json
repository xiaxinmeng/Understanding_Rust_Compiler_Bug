{"sha": "7cda84dc708be275c6a453ed39f3dd74e7f7f506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NkYTg0ZGM3MDhiZTI3NWM2YTQ1M2VkMzlmM2RkNzRlN2Y3ZjUwNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-04-20T08:59:25Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-04-20T08:59:25Z"}, "message": "acconfig.h (_GLIBCPP_USE_C99): Add.\n\n\n2001-04-19  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acconfig.h (_GLIBCPP_USE_C99): Add.\n\t* config.h.in: Regenerate.\n\t* acinclude.m4 (GLIBCPP_ENABLE_C99): New macro. Test for ISO/IEC\n\t9899: 1999 support.\n\t* aclocal.m4: Regenerate.\n\t* configure.in (GLIBCPP_ENABLE_C99): Use it, on by default.\n\t* configure: Regenerate.\n\t* configure.in (GLIBCPP_ENABLE_LONG_LONG): Set default to yes.\n\t* configure: Regenerate.\n\t* include/c_std/bits/std_cwchar.h: Put wcstold, wcstoll, wcstoull\n\tinto c99.\n\t* include/c_std/bits/std_cmath.h: Bring C99 functions into c99\n\tnamespace.\n\t* include/c_std/bits/std_cstdlib.h: Same.\n\t* docs/html/configopts.html: Update.\n\t* testsuite/26_numerics/c99_macros.cc: Edit, use cmath instead of\n\tmath.h\n\t(test_c99_classify): Add.\n\t* config/os/gnu-linux/bits/os_defines.h (_GNU_SOURCE): Remove.\n\t(_ISOC99_SOURCE): Remove.\n\n\t* include/bits/stl_algo.h: Use _GLIBCPP_HAVE_DRAND48.\n\t* include/bits/c++config (__STL_ASSERTIONS): Simplify.\n\t* acinclude.m4 (GLIBCPP_CHECK_STDLIB_SUPPORT): Add check for drand48.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r41451", "tree": {"sha": "f895b431b6a7bf322998be355dddd14b09763a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f895b431b6a7bf322998be355dddd14b09763a4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cda84dc708be275c6a453ed39f3dd74e7f7f506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cda84dc708be275c6a453ed39f3dd74e7f7f506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cda84dc708be275c6a453ed39f3dd74e7f7f506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cda84dc708be275c6a453ed39f3dd74e7f7f506/comments", "author": null, "committer": null, "parents": [{"sha": "856a6884331dd69910f479a3f4420ca544049d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856a6884331dd69910f479a3f4420ca544049d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/856a6884331dd69910f479a3f4420ca544049d95"}], "stats": {"total": 2991, "additions": 1911, "deletions": 1080}, "files": [{"sha": "7dc265aa801eb14a8f7482b1256f2b184fe871b1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -1,3 +1,32 @@\n+2001-04-19  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acconfig.h (_GLIBCPP_USE_C99): Add.\n+\t* config.h.in: Regenerate.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_C99): New macro. Test for ISO/IEC\n+\t9899: 1999 support.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in (GLIBCPP_ENABLE_C99): Use it, on by default.\n+\t* configure: Regenerate.\n+\t* configure.in (GLIBCPP_ENABLE_LONG_LONG): Set default to yes.\n+\t* configure: Regenerate.\n+\t* include/c_std/bits/std_cwchar.h: Put wcstold, wcstoll, wcstoull\n+\tinto c99.\n+\t* include/c_std/bits/std_cmath.h: Bring C99 functions into c99\n+\tnamespace.\n+\t* include/c_std/bits/std_cstdlib.h: Same.\n+\t* docs/html/configopts.html: Update.\n+\t* testsuite/26_numerics/c99_macros.cc: Edit, use cmath instead of\n+\tmath.h\n+\t(test_c99_classify): Add.\n+\t* config/os/gnu-linux/bits/os_defines.h (_GNU_SOURCE): Remove.\n+\t(_ISOC99_SOURCE): Remove.\n+\n+\t* include/bits/stl_algo.h: Use _GLIBCPP_HAVE_DRAND48.\n+\t* include/bits/c++config (__STL_ASSERTIONS): Simplify.\n+\t* acinclude.m4 (GLIBCPP_CHECK_STDLIB_SUPPORT): Add check for drand48.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t\n 2001-04-19  Phil Edwards  <pme@sources.redhat.com>\n \n \t* Makefile.am (doxygen):  Assume script is missing execute perms.\n@@ -29,7 +58,8 @@\n 2001-04-13  Phil Edwards  <pme@sources.redhat.com>\n \n \t* include/bits/stl_algobase.h (equal):  Use EqualOpConcept instead\n-\tof EqualityComparableConcept.\n+\tof EqualityCo\n+\tmparableConcept.\n \n 2001-04-13  Phil Edwards  <pme@sources.redhat.com>\n "}, {"sha": "8777d1f96d6b008c00a17419e45a7557f01e9af5", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -136,43 +136,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h"}, {"sha": "3c79c8c92e5a8b9e99f544b603010c677ea09b95", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -12,6 +12,9 @@\n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n \n+// Define if code specialized for wchar_t should be used.\n+#undef _GLIBCPP_USE_C99\n+\n // Include support for 'long double'.\n #undef _GLIBCPP_USE_LONG_DOUBLE\n \n@@ -30,16 +33,13 @@\n // Define if you have the copysignf function.\n #undef _GLIBCPP_HAVE_COPYSIGNF\n \n-// Define if lldiv_t exists in stdlib.h.\n-#undef HAVE_LLDIV_T\n-\n-// Define if mbstate_t exists in wchar.h.  */\n+// Define if mbstate_t exists in wchar.h.\n #undef HAVE_MBSTATE_T\n \n-// Define if you have the modff function.  */\n+// Define if you have the modff function.\n #undef HAVE_MODFF\n \n-// Define if you have the modfl function.  */\n+// Define if you have the modfl function.\n #undef HAVE_MODFL\n \n // Define if the compiler/host combination has __builtin_abs\n@@ -99,6 +99,15 @@\n // underscore, we'll handle those here. Must come after config.h.in.\n //\n \n+#if defined(_GLIBCPP_USE_C99) && defined(__cplusplus)\n+// Placeholder for declarations in c99 namespace.\n+namespace std\n+{\n+  namespace c99 { }\n+  using namespace c99;\n+}\n+#endif\n+\n #if defined (HAVE__ISNAN) && ! defined (HAVE_ISNAN)\n # define HAVE_ISNAN 1\n # define isnan _isnan"}, {"sha": "6a3fcc7fe69e000bdcc4dce9c9da10c916ba06b5", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 81, "deletions": 32, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -455,9 +455,6 @@ dnl Check to see if the (stdlib function) argument passed is\n dnl 1) declared when using the c++ compiler\n dnl 2) has \"C\" linkage\n dnl\n-dnl Define HAVE_STRTOLD if \"strtold\" is declared and links\n-dnl Define HAVE_STRTOF if \"strtof\" is declared and links\n-dnl\n dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with TWO parameters\n@@ -600,8 +597,9 @@ dnl 1) make sure the name is declared when using the c++ compiler\n dnl 2) make sure the name has \"C\" linkage\n dnl This might seem like overkill but experience has shown that it's not...\n dnl\n-dnl Define HAVE_STRTOF etc if \"strtof\" is found.\n-dnl Define HAVE_STRTOLD etc if \"strtold\" is found.\n+dnl Define HAVE_STRTOLD if \"strtold\" is declared and links\n+dnl Define HAVE_STRTOF if \"strtof\" is declared and links\n+dnl Define HAVE_DRAND48 if \"drand48\" is declared and links\n dnl\n dnl GLIBCPP_CHECK_STDLIB_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n@@ -611,6 +609,7 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n \n   AC_CHECK_FUNCS(strtof)\n   GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtold)\n+  AC_CHECK_FUNCS(drand48)\n \n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n ])\n@@ -1326,7 +1325,7 @@ dnl GLIBCPP_ENABLE_LONG_LONG\n dnl --enable-long-long defines _GLIBCPP_USE_LONG_LONG\n dnl --disable-long-long leaves _GLIBCPP_USE_LONG_LONG undefined\n dnl  +  Usage:  GLIBCPP_ENABLE_LONG_LONG[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n+dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n dnl       defaults to `no'.\n dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n dnl\n@@ -1344,44 +1343,93 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable long long]) ;;\n    esac],\n   enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n+\n+  # Option parsed, now set things appropriately\n+  if test x\"$enable_long_long\" = xyes; then\n+    AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n+  fi\n+])\n+\n  \n-  # Allow use of os-dependent settings, so that macros that turn on\n-  # C99 capabilities can be defined and used in a consistent way.\n-  OS_INC_PATH=${srcdir}/$os_include_dir\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\"-I$OS_INC_PATH\"\n+dnl\n+dnl Check for ISO/IEC 9899:1999 \"C99\" support.\n+dnl\n+dnl GLIBCPP_ENABLE_C99\n+dnl --enable-c99 defines _GLIBCPP_USE_C99\n+dnl --disable-c99 leaves _GLIBCPP_USE_C99 undefined\n+dnl  +  Usage:  GLIBCPP_ENABLE_C99[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n+dnl       defaults to `no'.\n+dnl  +  If 'C99' stuff is not available, ignores DEFAULT and sets `no'.\n+dnl\n+dnl GLIBCPP_ENABLE_C99\n+AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n+  define([GLIBCPP_ENABLE_C99_DEFAULT], ifelse($1, yes, yes, no))dnl\n \n-  # Check for the existence of functions used if long long is enabled.\n-  AC_CHECK_FUNC(strtoll,,ac_strtoll=no)\n-  AC_CHECK_FUNC(strtoull,,ac_strtoull=no)\n+  AC_ARG_ENABLE(c99,\n+  changequote(<<, >>)dnl\n+  <<--enable-c99      turns on 'ISO/IEC 9899:1999 support' [default=>>GLIBCPP_ENABLE_C99_DEFAULT],\n+  changequote([, ])dnl\n+  [case \"$enableval\" in\n+   yes) enable_c99=yes ;;\n+   no)  enable_c99=no ;;\n+   *)   AC_MSG_ERROR([Unknown argument to enable/disable C99]) ;;\n+   esac],\n+  enable_c99=GLIBCPP_ENABLE_C99_DEFAULT)dnl\n+ \n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n \n-  # Check for lldiv_t, et. al.\n+  # Check for the existence of <math.h> functions used if C99 is enabled.\n+  AC_TRY_COMPILE([#include <math.h>],[fpclassify(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isfinite(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isinf(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isnan(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isnormal(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[signbit(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isgreater(0,0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isgreaterequal(0,0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isless(0,0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[islessequal(0,0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[islessgreater(0,0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isunordered(0,0);],, [ac_c99_math=no])\n+\n+  # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n+  AC_CHECK_FUNC(strtoll,,ac_c99_stdlib=no)\n+  AC_CHECK_FUNC(strtoull,,ac_c99_stdlib=no)\n+  AC_CHECK_FUNC(llabs,,ac_c99_stdlib=no)\n+  AC_CHECK_FUNC(lldiv,,ac_c99_stdlib=no)\n+  AC_CHECK_FUNC(atoll,,ac_c99_stdlib=no)\n+\t\n   AC_MSG_CHECKING([for lldiv_t declaration])\n-  AC_CACHE_VAL(glibcpp_lldiv_t_use, [\n-  AC_TRY_COMPILE([#include <bits/os_defines.h>\n-                  #include <stdlib.h>], \n+  AC_CACHE_VAL(ac_c99_lldiv_t, [\n+  AC_TRY_COMPILE([#include <stdlib.h>], \n                    [ lldiv_t mydivt;], \n-                   [glibcpp_lldiv_t_use=yes], [glibcpp_lldiv_t_use=no])\n+                   [ac_c99_lldiv_t=yes], [ac_c99_lldiv_t=no])\n   ])\n-  AC_MSG_RESULT($glibcpp_lldiv_t_use)\n-  if test x$glibcpp_lldiv_t_use = x\"yes\"; then\n-    AC_DEFINE(HAVE_LLDIV_T)\n-  fi\n+  AC_MSG_RESULT($ac_c99_lldiv_t)\n+  if test x\"$ac_c99_lldiv_t\" = x\"no\"; then\n+    ac_c99_stdlib=no; \n+  fi; \n+\n+  # Check for the existence of <wchar.h> functions used if C99 is enabled.\n+  AC_CHECK_FUNC(wcstold,,ac_c99_wchar=no)\n+  AC_CHECK_FUNC(wcstoll,,ac_c99_wchar=no)\n+  AC_CHECK_FUNC(wcstoull,,ac_c99_wchar=no)\n \n-  AC_MSG_CHECKING([for enabled long long])\n-  if test x\"$ac_strtoll\" = xno || test x\"$ac_strtoull\" = xno; then \n-    enable_long_long=no; \n+  AC_MSG_CHECKING([for enabled ISO C99 support])\n+  if test x\"$ac_c99_math\" = x\"no\" || test x\"$ac_c99_wchar\" = x\"no\" \\\n+\t|| test x\"$ac_c99_stdlib\" = x\"no\"; then \n+    enable_c99=no; \n   fi; \n-  AC_MSG_RESULT($enable_long_long)\n+  AC_MSG_RESULT($enable_c99)\n \n   # Option parsed, now set things appropriately\n-  if test x\"$enable_long_long\" = xyes; then\n-    AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n+  if test x\"$enable_c99\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCPP_USE_C99)\n   fi\n \n-  # Reset CFLAGS\n-  CFLAGS=\"$ac_save_CFLAGS\"\n+  AC_LANG_RESTORE\n ])\n \n \n@@ -1752,3 +1800,4 @@ AC_DEFUN([AC_LIBTOOL_DLOPEN])\n AC_DEFUN([AC_PROG_LD])\n ])\n \n+"}, {"sha": "0308344d947ae448640ff5075322200aa4d55555", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 81, "deletions": 32, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -467,9 +467,6 @@ dnl Check to see if the (stdlib function) argument passed is\n dnl 1) declared when using the c++ compiler\n dnl 2) has \"C\" linkage\n dnl\n-dnl Define HAVE_STRTOLD if \"strtold\" is declared and links\n-dnl Define HAVE_STRTOF if \"strtof\" is declared and links\n-dnl\n dnl argument 1 is name of function to check\n dnl\n dnl ASSUMES argument is a math function with TWO parameters\n@@ -612,8 +609,9 @@ dnl 1) make sure the name is declared when using the c++ compiler\n dnl 2) make sure the name has \"C\" linkage\n dnl This might seem like overkill but experience has shown that it's not...\n dnl\n-dnl Define HAVE_STRTOF etc if \"strtof\" is found.\n-dnl Define HAVE_STRTOLD etc if \"strtold\" is found.\n+dnl Define HAVE_STRTOLD if \"strtold\" is declared and links\n+dnl Define HAVE_STRTOF if \"strtof\" is declared and links\n+dnl Define HAVE_DRAND48 if \"drand48\" is declared and links\n dnl\n dnl GLIBCPP_CHECK_STDLIB_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n@@ -623,6 +621,7 @@ AC_DEFUN(GLIBCPP_CHECK_STDLIB_SUPPORT, [\n \n   AC_CHECK_FUNCS(strtof)\n   GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_2(strtold)\n+  AC_CHECK_FUNCS(drand48)\n \n   CXXFLAGS=\"$ac_save_CXXFLAGS\"\n ])\n@@ -1338,7 +1337,7 @@ dnl GLIBCPP_ENABLE_LONG_LONG\n dnl --enable-long-long defines _GLIBCPP_USE_LONG_LONG\n dnl --disable-long-long leaves _GLIBCPP_USE_LONG_LONG undefined\n dnl  +  Usage:  GLIBCPP_ENABLE_LONG_LONG[(DEFAULT)]\n-dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n+dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n dnl       defaults to `no'.\n dnl  +  If 'long long' stuff is not available, ignores DEFAULT and sets `no'.\n dnl\n@@ -1356,44 +1355,93 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable long long]) ;;\n    esac],\n   enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n+\n+  # Option parsed, now set things appropriately\n+  if test x\"$enable_long_long\" = xyes; then\n+    AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n+  fi\n+])\n+\n  \n-  # Allow use of os-dependent settings, so that macros that turn on\n-  # C99 capabilities can be defined and used in a consistent way.\n-  OS_INC_PATH=${srcdir}/$os_include_dir\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\"-I$OS_INC_PATH\"\n+dnl\n+dnl Check for ISO/IEC 9899:1999 \"C99\" support.\n+dnl\n+dnl GLIBCPP_ENABLE_C99\n+dnl --enable-c99 defines _GLIBCPP_USE_C99\n+dnl --disable-c99 leaves _GLIBCPP_USE_C99 undefined\n+dnl  +  Usage:  GLIBCPP_ENABLE_C99[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.  If omitted, it\n+dnl       defaults to `no'.\n+dnl  +  If 'C99' stuff is not available, ignores DEFAULT and sets `no'.\n+dnl\n+dnl GLIBCPP_ENABLE_C99\n+AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n+  define([GLIBCPP_ENABLE_C99_DEFAULT], ifelse($1, yes, yes, no))dnl\n \n-  # Check for the existence of functions used if long long is enabled.\n-  AC_CHECK_FUNC(strtoll,,ac_strtoll=no)\n-  AC_CHECK_FUNC(strtoull,,ac_strtoull=no)\n+  AC_ARG_ENABLE(c99,\n+  changequote(<<, >>)dnl\n+  <<--enable-c99      turns on 'ISO/IEC 9899:1999 support' [default=>>GLIBCPP_ENABLE_C99_DEFAULT],\n+  changequote([, ])dnl\n+  [case \"$enableval\" in\n+   yes) enable_c99=yes ;;\n+   no)  enable_c99=no ;;\n+   *)   AC_MSG_ERROR([Unknown argument to enable/disable C99]) ;;\n+   esac],\n+  enable_c99=GLIBCPP_ENABLE_C99_DEFAULT)dnl\n+ \n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n \n-  # Check for lldiv_t, et. al.\n+  # Check for the existence of <math.h> functions used if C99 is enabled.\n+  AC_TRY_COMPILE([#include <math.h>],[fpclassify(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isfinite(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isinf(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isnan(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isnormal(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[signbit(0.0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isgreater(0,0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isgreaterequal(0,0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isless(0,0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[islessequal(0,0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[islessgreater(0,0);],, [ac_c99_math=no])\n+  AC_TRY_COMPILE([#include <math.h>],[isunordered(0,0);],, [ac_c99_math=no])\n+\n+  # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n+  AC_CHECK_FUNC(strtoll,,ac_c99_stdlib=no)\n+  AC_CHECK_FUNC(strtoull,,ac_c99_stdlib=no)\n+  AC_CHECK_FUNC(llabs,,ac_c99_stdlib=no)\n+  AC_CHECK_FUNC(lldiv,,ac_c99_stdlib=no)\n+  AC_CHECK_FUNC(atoll,,ac_c99_stdlib=no)\n+\t\n   AC_MSG_CHECKING([for lldiv_t declaration])\n-  AC_CACHE_VAL(glibcpp_lldiv_t_use, [\n-  AC_TRY_COMPILE([#include <bits/os_defines.h>\n-                  #include <stdlib.h>], \n+  AC_CACHE_VAL(ac_c99_lldiv_t, [\n+  AC_TRY_COMPILE([#include <stdlib.h>], \n                    [ lldiv_t mydivt;], \n-                   [glibcpp_lldiv_t_use=yes], [glibcpp_lldiv_t_use=no])\n+                   [ac_c99_lldiv_t=yes], [ac_c99_lldiv_t=no])\n   ])\n-  AC_MSG_RESULT($glibcpp_lldiv_t_use)\n-  if test x$glibcpp_lldiv_t_use = x\"yes\"; then\n-    AC_DEFINE(HAVE_LLDIV_T)\n-  fi\n+  AC_MSG_RESULT($ac_c99_lldiv_t)\n+  if test x\"$ac_c99_lldiv_t\" = x\"no\"; then\n+    ac_c99_stdlib=no; \n+  fi; \n+\n+  # Check for the existence of <wchar.h> functions used if C99 is enabled.\n+  AC_CHECK_FUNC(wcstold,,ac_c99_wchar=no)\n+  AC_CHECK_FUNC(wcstoll,,ac_c99_wchar=no)\n+  AC_CHECK_FUNC(wcstoull,,ac_c99_wchar=no)\n \n-  AC_MSG_CHECKING([for enabled long long])\n-  if test x\"$ac_strtoll\" = xno || test x\"$ac_strtoull\" = xno; then \n-    enable_long_long=no; \n+  AC_MSG_CHECKING([for enabled ISO C99 support])\n+  if test x\"$ac_c99_math\" = x\"no\" || test x\"$ac_c99_wchar\" = x\"no\" \\\n+\t|| test x\"$ac_c99_stdlib\" = x\"no\"; then \n+    enable_c99=no; \n   fi; \n-  AC_MSG_RESULT($enable_long_long)\n+  AC_MSG_RESULT($enable_c99)\n \n   # Option parsed, now set things appropriately\n-  if test x\"$enable_long_long\" = xyes; then\n-    AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n+  if test x\"$enable_c99\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCPP_USE_C99)\n   fi\n \n-  # Reset CFLAGS\n-  CFLAGS=\"$ac_save_CFLAGS\"\n+  AC_LANG_RESTORE\n ])\n \n \n@@ -1765,6 +1813,7 @@ AC_DEFUN([AC_PROG_LD])\n ])\n \n \n+\n # Do all the work for Automake.  This macro actually does too much --\n # some checks are only needed if your package does certain things.\n # But this isn't really a big deal."}, {"sha": "51d0e74501b01767673e6e46e5334ca9cd03987d", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -15,22 +15,22 @@\n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n \n+// Define if code specialized for wchar_t should be used.\n+#undef _GLIBCPP_USE_C99\n+\n // Include support for shadow headers, ie --enable-cshadow-headers.\n #undef _GLIBCPP_USE_SHADOW_HEADERS\n \n // Define if code specialized for wchar_t should be used.\n #undef _GLIBCPP_USE_WCHAR_T\n \n-// Define if lldiv_t exists in stdlib.h.\n-#undef HAVE_LLDIV_T\n-\n-// Define if mbstate_t exists in wchar.h.  */\n+// Define if mbstate_t exists in wchar.h.\n #undef HAVE_MBSTATE_T\n \n-// Define if you have the modff function.  */\n+// Define if you have the modff function.\n #undef HAVE_MODFF\n \n-// Define if you have the modfl function.  */\n+// Define if you have the modfl function.\n #undef HAVE_MODFL\n \n // Define if the compiler/host combination has __builtin_abs\n@@ -303,6 +303,9 @@\n /* Define if you have the cosl function.  */\n #undef HAVE_COSL\n \n+/* Define if you have the drand48 function.  */\n+#undef HAVE_DRAND48\n+\n /* Define if you have the expf function.  */\n #undef HAVE_EXPF\n \n@@ -557,6 +560,15 @@\n // underscore, we'll handle those here. Must come after config.h.in.\n //\n \n+#if defined(_GLIBCPP_USE_C99) && defined(__cplusplus)\n+// Placeholder for declarations in c99 namespace.\n+namespace std\n+{\n+  namespace c99 { }\n+  using namespace c99;\n+}\n+#endif\n+\n #if defined (HAVE__ISNAN) && ! defined (HAVE_ISNAN)\n # define HAVE_ISNAN 1\n # define isnan _isnan"}, {"sha": "72c22425534e8ca1f2506d9fc459320058409941", "filename": "libstdc++-v3/config/os/gnu-linux/bits/os_defines.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -1,6 +1,6 @@\n // Specific definitions for GNU/Linux  -*- C++ -*-\n \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,13 +29,7 @@\n \n \n #ifndef _GLIBCPP_OS_DEFINES\n-#  define _GLIBCPP_OS_DEFINES\n-\n-// By defining this, all GNU extensions are enabled.\n-#define _GNU_SOURCE 1\n-\n-// By defining this, all ISO C99 functionality is enabled.\n-#define _ISOC99_SOURCE 1\n+#define _GLIBCPP_OS_DEFINES 1\n \n // This keeps isanum, et al from being propagated as macros.\n #define __NO_CTYPE 1"}, {"sha": "334a939fcfe4f4dc3853291d9ab5da31808b1d66", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1443, "deletions": 836, "changes": 2279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506"}, {"sha": "838ce93911df593b181851147c4d2d31c3023ace", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -64,7 +64,8 @@ GLIBCPP_ENABLE_DEBUG($USE_MAINTAINER_MODE)\n GLIBCPP_ENABLE_CSTDIO\n GLIBCPP_ENABLE_CLOCALE\n GLIBCPP_ENABLE_C_MBCHAR([yes])\n-GLIBCPP_ENABLE_LONG_LONG([no])\n+GLIBCPP_ENABLE_C99([yes])\n+GLIBCPP_ENABLE_LONG_LONG([yes])\n GLIBCPP_ENABLE_CHEADERS([c_std])\n GLIBCPP_ENABLE_THREADS\n GLIBCPP_ENABLE_CXX_FLAGS([none])"}, {"sha": "69e48bcb4957c76db8fa16773833c266258c3e43", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -7,7 +7,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 configure options</TITLE>\n <LINK REL=StyleSheet HREF=\"lib3styles.css\">\n-<!-- $Id: configopts.html,v 1.8 2001/04/02 19:00:13 bkoz Exp $ -->\n+<!-- $Id: configopts.html,v 1.9 2001/04/06 01:47:11 bkoz Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -91,16 +91,31 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n  'generic'.\n      </P>\n \n+ <DT><TT>--enable-c99  </TT>\n+ <DD><P>The &quot;long long&quot; type was introduced in C99, along\n+ \twith bunches of other functions for wide characters, and math\n+ \tclassification macros, etc. If enabled, all C99 functions not\n+ \tspecified by the C++ standard will be put into namespace c99,\n+ \tand then all names in the c99 namespace will be injected into\n+ \tnamespace std, so that C99 functions can be used \"as if\" they\n+ \twere in the C++ standard (as they will eventually be in some\n+ \tfuture revision of the standard, without a doubt.) By default,\n+ \tC99 support is on, assuming the configure probes find all the\n+ \tnecessary functions and bits necessary.\n+    </P>\n+\n  <DT><TT>--enable-long-long  </TT>\n  <DD><P>The &quot;long long&quot; type was introduced in C99.  It is\n         provided as a GNU extension to C++98 in g++.  This flag builds\n         support for &quot;long long&quot; into the library\n-        (specialized templates and the like). This option is off by\n-        default:  if enabled, users will have to either use the\n-        new-style &quot;C&quot; headers by default (ie cmath not math.h)\n-        or add appropriate compile-time flags to all compile lines to\n-        allow &quot;C&quot; visibility of this feature (on GNU/Linux,\n-        the flag is -D_ISOC99_SOURCE).\n+        (specialized templates and the like for iostreams). This\n+        option is on by default: if enabled, users will have to either\n+        use the new-style &quot;C&quot; headers by default (ie cmath\n+        not math.h) or add appropriate compile-time flags to all\n+        compile lines to allow &quot;C&quot; visibility of this\n+        feature (on GNU/Linux, the flag is -D_ISOC99_SOURCE, which is\n+        added automatically via CPLUSPLUS_CPP_SPEC's addition of\n+        _GNU_SOURCE).\n      </P>\n \n  <DT><TT>--enable-cheaders=OPTION  </TT>\n@@ -197,7 +212,7 @@ <H1 CLASS=\"centered\"><A NAME=\"top\">Interesting <TT>configure</TT>\n \n <HR>\n <P CLASS=\"fineprint\"><EM>\n-$Id: configopts.html,v 1.8 2001/04/02 19:00:13 bkoz Exp $\n+$Id: configopts.html,v 1.9 2001/04/06 01:47:11 bkoz Exp $\n </EM></P>\n \n "}, {"sha": "e1571061e729b32b868f29d1e5862cc214dc24f4", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 34, "deletions": 62, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -49,6 +49,10 @@\n // by the compiler, but instead instantiated into the library binary.\n #define _GLIBCPP_FULLY_COMPLIANT_HEADERS 1\n \n+// Define this to permit user-level control of the expansion of string\n+// buffers (via a fn pointer), see basic_string.* for more.\n+//#define _GLIBCPP_ALLOC_CONTROL\n+\n // To enable older, ARM-style iostreams and other anachronisms use this.\n //#define _GLIBCPP_DEPRECATED 1\n \n@@ -59,86 +63,54 @@\n //#define _GLIBCPP_CONCEPT_CHECKS 1\n \n // From SGI's stl_config.h; generic settings and user hooks (_NOTHREADS).\n+#ifdef _REENTRANT\n+# define __STL_THREADS\n+#endif\n+\n #if defined(_PTHREADS) && !defined(_NOTHREADS)\n-#    define __STL_PTHREADS\n+# define __STL_PTHREADS\n #endif\n+\n #if defined(_UITHREADS) && !defined(_PTHREADS) && !defined(_NOTHREADS)\n-#    define __STL_UITHREADS\n+# define __STL_UITHREADS\n+#endif\n+\n+#if defined(__STL_WIN32THREADS) || defined(__STL_SGI_THREADS) \\\n+    || defined(__STL_PTHREADS)  || defined(__STL_UITHREADS)\n+# define __STL_THREADS\n+# define __STL_VOLATILE volatile\n+#else\n+# define __STL_VOLATILE\n #endif\n \n // This is also a user hook, but via -f[no-]exceptions, not direct #defines.\n #ifdef __EXCEPTIONS\n-#  define __STL_USE_EXCEPTIONS\n-#  define __STL_TRY try\n-#  define __STL_CATCH_ALL catch(...)\n-#  define __STL_THROW(x) throw x\n-#  define __STL_RETHROW throw\n-#  define __STL_NOTHROW throw()\n-#  define __STL_UNWIND(action) catch(...) { action; throw; }\n+# define __STL_USE_EXCEPTIONS\n+# define __STL_TRY try\n+# define __STL_CATCH_ALL catch(...)\n+# define __STL_THROW(x) throw x\n+# define __STL_RETHROW throw\n+# define __STL_NOTHROW throw()\n+# define __STL_UNWIND(action) catch(...) { action; throw; }\n #else\n-#  define __STL_TRY \n-#  define __STL_CATCH_ALL if (false)\n-#  define __STL_THROW(x) \n-#  define __STL_RETHROW \n-#  define __STL_NOTHROW \n-#  define __STL_UNWIND(action) \n+# define __STL_TRY \n+# define __STL_CATCH_ALL if (false)\n+# define __STL_THROW(x) \n+# define __STL_RETHROW \n+# define __STL_NOTHROW \n+# define __STL_UNWIND(action) \n #endif\n \n // This is the \"underlying allocator\" for STL.  The alternatives are\n // homegrown schemes involving a kind of mutex and free list; see stl_alloc.h.\n #define __USE_MALLOC\n \n-// Define this to permit user-level control of the expansion of string\n-// buffers (via a fn pointer), see basic_string.* for more.\n-//#define _GLIBCPP_ALLOC_CONTROL\n-\n // The remainder of the prewritten config is mostly automatic; all the\n // user hooks are listed above.\n \n-#ifdef _REENTRANT\n-#  define __STL_THREADS\n-#endif\n-#ifdef _PTHREADS\n-#  define __STL_PTHREADS\n-#endif\n-//#ifndef __STRICT_ANSI__\n-//#  define __STL_LONG_LONG\n-//#endif\n-\n-// Mingw32, GCC compiler using the Microsoft C runtime (settings taken from\n-// SGI's stl_config.h)\n-#if defined(__MINGW32__)\n-#  define __STL_NO_DRAND48\n-#  ifdef _MT\n-#    define __STL_WIN32THREADS\n-#  endif\n-#endif\n-\n-// Cygwin32, GCC compiler on MS Windows (settings taken from SGI's\n-// stl_config.h)\n-#if defined(__CYGWIN__)\n-#  define __STL_NO_DRAND48\n-#endif\n-\n-// XXX Only used in the SGI rope extensions; this is from stl_config.h and\n+// XXX \n+// Only used in the SGI rope extensions; this is from stl_config.h and\n // should be cleaned up.\n-#ifdef __STL_ASSERTIONS\n-# include <stdio.h>\n-# define __stl_assert(expr) \\\n-    if (!(expr)) { fprintf(stderr, \"%s:%d STL assertion failure: %s\\n\", \\\n-                          __FILE__, __LINE__, # expr); abort(); }\n-#else\n # define __stl_assert(expr)\n-#endif\n-\n-\n-#if defined(__STL_WIN32THREADS) || defined(__STL_SGI_THREADS) \\\n-    || defined(__STL_PTHREADS)  || defined(__STL_UITHREADS)\n-#   define __STL_THREADS\n-#   define __STL_VOLATILE volatile\n-#else\n-#   define __STL_VOLATILE\n-#endif\n-\n \n // End of prewritten config; the discovered settings follow."}, {"sha": "a1bd83cdc85cb121cb4c52a210a3d97a4d253330", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -1088,13 +1088,12 @@ _OutputIter rotate_copy(_ForwardIter __first, _ForwardIter __middle,\n // Return a random number in the range [0, __n).  This function encapsulates\n // whether we're using rand (part of the standard C library) or lrand48\n // (not standard, but a much better choice whenever it's available).\n-\n template <class _Distance>\n inline _Distance __random_number(_Distance __n) {\n-#ifdef __STL_NO_DRAND48\n-  return rand() % __n;\n-#else\n+#ifdef _GLIBCPP_HAVE_DRAND48\n   return lrand48() % __n;\n+#else\n+  return rand() % __n;\n #endif\n }\n "}, {"sha": "9ec828493e6f2a727074b0ef93aa8ed713689774", "filename": "libstdc++-v3/include/c_std/bits/std_cmath.h", "status": "modified", "additions": 130, "deletions": 18, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -67,24 +67,6 @@\n #undef tan\n #undef tanh\n \n-// These are possible macros imported from C99-land.  They tend to break\n-// well-formed C++ programs.  Just pretend we don't know about them.\n-// At some point, we should provide extensions in std:: -- Gaby\n-\n-#undef fpclassify\n-#undef isfinite\n-#undef isinf\n-#undef isnan\n-#undef isnormal\n-#undef signbit\n-\n-#undef isgreater\n-#undef isgreaterequal\n-#undef isless\n-#undef islessequal\n-#undef islessgreater\n-#undef isunordered\n-\n namespace std \n {\n   // Forward declaration of a helper function.  This really should be\n@@ -619,6 +601,136 @@ namespace std\n #endif\n } // std\n \n+\n+#if _GLIBCPP_USE_C99\n+// These are possible macros imported from C99-land. For strict\n+// conformance, remove possible C99-injected names from the\n+// global namespace, and sequester them in the c99 namespace. \n+namespace c99\n+{\n+  template<typename _Tp>\n+    int \n+    __capture_fpclassify(_Tp __f) { return fpclassify(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    __capture_isfinite(_Tp __f) { return isfinite(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    __capture_isinf(_Tp __f) { return isinf(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    __capture_isnan(_Tp __f) { return isnan(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    __capture_isnormal(_Tp __f) { return isnormal(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    __capture_signbit(_Tp __f) { return signbit(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    __capture_isgreater(_Tp __f1, _Tp __f2) { return isgreater(__f1, __f2); }\n+\n+ template<typename _Tp>\n+    int \n+    __capture_isgreaterequal(_Tp __f1, _Tp __f2) \n+    { return isgreaterequal(__f1, __f2); }\n+\n+ template<typename _Tp>\n+    int \n+    __capture_isless(_Tp __f1, _Tp __f2) { return isless(__f1, __f2); }\n+\n+ template<typename _Tp>\n+    int \n+    __capture_islessequal(_Tp __f1, _Tp __f2) \n+    { return islessequal(__f1, __f2); }\n+\n+ template<typename _Tp>\n+    int \n+    __capture_islessgreater(_Tp __f1, _Tp __f2) \n+    { return islessgreater(__f1, __f2); }\n+\n+ template<typename _Tp>\n+    int \n+    __capture_isunordered(_Tp __f1, _Tp __f2) \n+    { return isunordered(__f1, __f2); }\n+} // namespace c99\n+#endif\n+\n+#undef fpclassify\n+#undef isfinite\n+#undef isinf\n+#undef isnan\n+#undef isnormal\n+#undef signbit\n+#undef isgreater\n+#undef isgreaterequal\n+#undef isless\n+#undef islessequal\n+#undef islessgreater\n+#undef isunordered\n+\n+#if _GLIBCPP_USE_C99\n+namespace c99\n+{\n+  template<typename _Tp>\n+    int\n+    fpclassify(_Tp __f) { return __capture_fpclassify(__f); }\n+\n+  template<typename _Tp>\n+    int\n+    isfinite(_Tp __f) { return __capture_isfinite(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    isinf(_Tp __f) { return __capture_isinf(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    isnan(_Tp __f) { return __capture_isnan(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    isnormal(_Tp __f) { return __capture_isnormal(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    signbit(_Tp __f) { return __capture_signbit(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    isgreater(_Tp __f1, _Tp __f2) { return __capture_isgreater(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    int \n+    isgreaterequal(_Tp __f1, _Tp __f2) \n+    { return __capture_isgreaterequal(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    int \n+    isless(_Tp __f1, _Tp __f2) { return __capture_isless(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    int \n+    islessequal(_Tp __f1, _Tp __f2) \n+    { return __capture_islessequal(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    int \n+    islessgreater(_Tp __f) { return __capture_islessgreater(__f); }\n+\n+  template<typename _Tp>\n+    int \n+    isunordered(_Tp __f1, _Tp __f2) \n+    { return __capture_isunordered(__f1, __f2); }\n+}\n+#endif\n+  \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n #  define export\n #  include <bits/cmath.tcc>"}, {"sha": "b8365e024f2feaa25dc620f7a90ef6b70c844b51", "filename": "libstdc++-v3/include/c_std/bits/std_cstdlib.h", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -85,18 +85,6 @@ namespace std\n   using ::div_t;\n   using ::ldiv_t;\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n-# ifdef _GLIBCPP_HAVE_LLDIV_T\n-  using ::lldiv_t;\n-# else\n-  struct lldiv_t\n-  {\n-    long long quot;\n-    long long rem;\n-  };\n-# endif\n-#endif \n-\n   extern \"C\" double atof(const char*); \n   extern \"C\" int atoi(const char*); \n   extern \"C\" long int atol(const char*); \n@@ -135,8 +123,13 @@ namespace std\n \n   inline ldiv_t\n   div(long __i, long __j) { return ::ldiv(__i, __j); }\n+} // namespace std\n+\n+#if _GLIBCPP_USE_C99\n+namespace c99\n+{\n+  using ::lldiv_t;\n \n-#ifdef _GLIBCPP_USE_LONG_LONG\n   inline long long \n   abs(long long __x) { return __x >= 0 ? __x : -__x; }\n \n@@ -154,18 +147,11 @@ namespace std\n   extern \"C\" long long int atoll(const char*); \n   extern \"C\" long long int strtoll(const char*, char**, int); \n   extern \"C\" unsigned long long int strtoull(const char*, char**, int); \n-#endif\n \n #ifdef _GLIBCPP_HAVE_STRTOLD\n   extern \"C\" long double strtold(const char*, char**); \n #endif\n-}\n+} // namespace c99\n+#endif\n \n #endif \n-\n-\n-\n-\n-\n-\n-"}, {"sha": "4bf8c8338f407e4d94f821408058dab576cf243b", "filename": "libstdc++-v3/include/c_std/bits/std_cwchar.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -46,7 +46,6 @@\n #include <wchar.h>\n #endif\n \n-\n // Need to do a bit of trickery here with mbstate_t as char_traits\n // assumes it is in wchar.h, regardless of wchar_t specializations.\n #ifndef _GLIBCPP_HAVE_MBSTATE_T\n@@ -192,19 +191,21 @@ namespace std\n     return const_cast<wchar_t*>(wmemchr(const_cast<const wchar_t*>(__p), __c, __n));\n   }\n   extern \"C\" int wmemcmp(const wchar_t*, const wchar_t*, size_t); \n-  //extern \"C\" int wmemcmp(wchar_t*, const wchar_t*, size_t); \n   extern \"C\" wchar_t* wmemcpy(wchar_t*, const wchar_t*, size_t); \n   extern \"C\" wchar_t* wmemmove(wchar_t*, const wchar_t*, size_t); \n   extern \"C\" wchar_t* wmemset(wchar_t*, wchar_t, size_t); \n   extern \"C\" size_t wcsftime(wchar_t*, size_t, const wchar_t*, const struct tm*); \n+}\n \n-#if 0\n-  // Full C99 listing\n+#if _GLIBCPP_USE_C99\n+namespace c99\n+{\n   extern \"C\" long double wcstold(const wchar_t*, wchar_t**); \n   extern \"C\" long long int wcstoll(const wchar_t*, wchar_t**, int); \n   extern \"C\" unsigned long long int wcstoull(const wchar_t*, wchar_t**, int); \n-#endif\n }\n+#endif\n+\n #endif //_GLIBCPP_USE_WCHAR_T\n \n #endif "}, {"sha": "4fa586e004de01d550470bf2cfb2683023fd5b8b", "filename": "libstdc++-v3/testsuite/26_numerics/c99_macros.cc", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc99_macros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cda84dc708be275c6a453ed39f3dd74e7f7f506/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc99_macros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc99_macros.cc?ref=7cda84dc708be275c6a453ed39f3dd74e7f7f506", "patch": "@@ -1,6 +1,6 @@\n // 2001-04-06 gdr\n \n-// Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,7 +29,7 @@\n \n // { dg-do compile }\n \n-#include <math.h>\n+#include <cmath>\n \n void fpclassify() { }\n \n@@ -55,7 +55,38 @@ void islessgreater() { }\n \n void isunordered() { }\n \n+#if _GLIBCPP_USE_C99\n+template <typename _Tp>\n+  void test_c99_classify()\n+  {\n+    using namespace std;\n+    test = bool;\n+\n+    typedef _Tp fp_type;\n+    fp_type f1 = 1.0;\n+    fp_type f2 = 3.0;\n+    int res = 0;\n+    \n+    res = fpclassify(f1);\n+    res = isfinite(f2);\n+    res = isinf(f1);\n+    res = isnan(f2);\n+    res = isnormal(f1);\n+    res = signbit(f2);\n+    res = isgreater(f1, f2);\n+    res = isgreaterequal(f1, f2);\n+    res = isless(f1, f2);\n+    res = islessequal(f1,f2);\n+    res = islessgreater(f1, f2);\n+    res = isunordered(f1, f2);\n+  }\n+#endif\n+\n int main()\n {\n+#if _GLIBCPP_USE_C99\n+  test_c99_classify<float>();\n+  test_c99_classify<double>();\n+#endif\n   return 0;\n }"}]}