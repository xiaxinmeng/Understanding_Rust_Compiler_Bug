{"sha": "14b99bed0801da460db998f8ec65f31e992f0e52", "node_id": "C_kwDOANBUbNoAKDE0Yjk5YmVkMDgwMWRhNDYwZGI5OThmOGVjNjVmMzFlOTkyZjBlNTI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-17T09:21:32Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-17T09:21:32Z"}, "message": "ast: Add base Node class with get_ast_kind() function\n\nThis adds a new base class common to all abstract base classes of the\nAST: We can use it to store information shared by all nodes, such as the\nnewly introduced `AST::Kind` which helps in differentiating nodes.\nWe could also consider using it to store location info, since all AST\nnodes probably need it.", "tree": {"sha": "1a5c899063a5e769e76d278d44aa3c2ef9006c4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a5c899063a5e769e76d278d44aa3c2ef9006c4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14b99bed0801da460db998f8ec65f31e992f0e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b99bed0801da460db998f8ec65f31e992f0e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b99bed0801da460db998f8ec65f31e992f0e52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b99bed0801da460db998f8ec65f31e992f0e52/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dfc19647774cb26a0f735bda8006068a40cfba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfc19647774cb26a0f735bda8006068a40cfba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dfc19647774cb26a0f735bda8006068a40cfba0"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "65871424ea31a70adc7a4af3736240ec83cbd89f", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b99bed0801da460db998f8ec65f31e992f0e52/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b99bed0801da460db998f8ec65f31e992f0e52/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=14b99bed0801da460db998f8ec65f31e992f0e52", "patch": "@@ -36,6 +36,27 @@ namespace AST {\n class ASTVisitor;\n using AttrVec = std::vector<Attribute>;\n \n+// The available kinds of AST Nodes\n+enum Kind\n+{\n+  UNKNOWN,\n+  MACRO_RULES_DEFINITION,\n+};\n+\n+// Abstract base class for all AST elements\n+class Node\n+{\n+public:\n+  /**\n+   * Get the kind of Node this is. This is used to differentiate various AST\n+   * elements with very little overhead when extracting the derived type through\n+   * static casting is not necessary.\n+   */\n+  // FIXME: Mark this as `= 0` in the future to make sure every node implements\n+  // it\n+  virtual Kind get_ast_kind () const { return Kind::UNKNOWN; }\n+};\n+\n // Delimiter types - used in macros and whatever.\n enum DelimType\n {\n@@ -813,7 +834,7 @@ class MetaListNameValueStr;\n \n /* Base statement abstract class. Note that most \"statements\" are not allowed in\n  * top-level module scope - only a subclass of statements called \"items\" are. */\n-class Stmt\n+class Stmt : public Node\n {\n public:\n   // Unique pointer custom clone function"}, {"sha": "4adf467ad484f9da434af4008a22c6498383a933", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14b99bed0801da460db998f8ec65f31e992f0e52/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14b99bed0801da460db998f8ec65f31e992f0e52/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=14b99bed0801da460db998f8ec65f31e992f0e52", "patch": "@@ -441,6 +441,8 @@ class MacroRulesDefinition : public MacroItem\n     is_builtin_rule = true;\n   }\n \n+  Kind get_ast_kind () const override { return Kind::MACRO_RULES_DEFINITION; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}]}