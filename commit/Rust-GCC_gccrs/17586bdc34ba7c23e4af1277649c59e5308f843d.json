{"sha": "17586bdc34ba7c23e4af1277649c59e5308f843d", "node_id": "C_kwDOANBUbNoAKDE3NTg2YmRjMzRiYTdjMjNlNGFmMTI3NzY0OWM1OWU1MzA4Zjg0M2Q", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-10T10:15:52Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-11T13:52:09Z"}, "message": "[range-ops] Add tree code to range_operator.\n\nThis patch adds a tree code to range_operator in order to known which\ntree code to pass into bit-CCP.\n\nUp to now range-ops has been free of tree details, with the exception\nof the div entries which use a tree code to differentiate between\nthem.  This is still the goal going forward, but this is a stop-gap\nuntil we can merge the CCP and range-op bit handling in the next\nrelease.\n\nNo change in performance.\n\ngcc/ChangeLog:\n\n\t* range-op.cc: (range_op_table::set): Set m_code.\n\t(integral_table::integral_table): Handle shared entries.\n\t(pointer_table::pointer_table): Same.\n\t* range-op.h (class range_operator): Add m_code.", "tree": {"sha": "e0518afd6257beedff413d4e421d00fbac165cba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0518afd6257beedff413d4e421d00fbac165cba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17586bdc34ba7c23e4af1277649c59e5308f843d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17586bdc34ba7c23e4af1277649c59e5308f843d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17586bdc34ba7c23e4af1277649c59e5308f843d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17586bdc34ba7c23e4af1277649c59e5308f843d/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af96500eea72c674a5686b35c66202ef2bd9688f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af96500eea72c674a5686b35c66202ef2bd9688f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af96500eea72c674a5686b35c66202ef2bd9688f"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "1fbebd85620b4876879f5b20688082ac3b20d1f6", "filename": "gcc/range-op.cc", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17586bdc34ba7c23e4af1277649c59e5308f843d/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17586bdc34ba7c23e4af1277649c59e5308f843d/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=17586bdc34ba7c23e4af1277649c59e5308f843d", "patch": "@@ -2523,7 +2523,7 @@ class operator_cast: public range_operator\n \t\t\tconst irange &outer) const;\n   void fold_pair (irange &r, unsigned index, const irange &inner,\n \t\t\t   const irange &outer) const;\n-} op_convert;\n+};\n \n // Add a partial equivalence between the LHS and op1 for casts.\n \n@@ -3877,7 +3877,7 @@ class operator_identity : public range_operator\n \t\t\t\t\t   const irange &op1,\n \t\t\t\t\t   const irange &op2,\n \t\t\t\t\t   relation_kind rel) const;\n-} op_identity;\n+};\n \n // Determine if there is a relationship between LHS and OP1.\n \n@@ -3922,7 +3922,7 @@ class operator_unknown : public range_operator\n \t\t\t   const irange &op1,\n \t\t\t   const irange &op2,\n \t\t\t   relation_trio rel = TRIO_VARYING) const;\n-} op_unknown;\n+};\n \n bool\n operator_unknown::fold_range (irange &r, tree type,\n@@ -4245,7 +4245,7 @@ class pointer_min_max_operator : public range_operator\n   virtual void wi_fold (irange & r, tree type,\n \t\t\tconst wide_int &lh_lb, const wide_int &lh_ub,\n \t\t\tconst wide_int &rh_lb, const wide_int &rh_ub) const;\n-} op_ptr_min_max;\n+};\n \n void\n pointer_min_max_operator::wi_fold (irange &r, tree type,\n@@ -4372,8 +4372,17 @@ range_op_table::set (enum tree_code code, range_operator &op)\n {\n   gcc_checking_assert (m_range_tree[code] == NULL);\n   m_range_tree[code] = &op;\n+  gcc_checking_assert (op.m_code == ERROR_MARK || op.m_code == code);\n+  op.m_code = code;\n }\n \n+// Shared operators that require separate instantiations because they\n+// do not share a common tree code.\n+static operator_cast op_nop, op_convert;\n+static operator_identity op_ssa, op_paren, op_obj_type;\n+static operator_unknown op_realpart, op_imagpart;\n+static pointer_min_max_operator op_ptr_min, op_ptr_max;\n+\n // Instantiate a range op table for integral operations.\n \n class integral_table : public range_op_table\n@@ -4402,7 +4411,7 @@ integral_table::integral_table ()\n   set (EXACT_DIV_EXPR, op_exact_div);\n   set (LSHIFT_EXPR, op_lshift);\n   set (RSHIFT_EXPR, op_rshift);\n-  set (NOP_EXPR, op_convert);\n+  set (NOP_EXPR, op_nop);\n   set (CONVERT_EXPR, op_convert);\n   set (TRUTH_AND_EXPR, op_logical_and);\n   set (BIT_AND_EXPR, op_bitwise_and);\n@@ -4413,11 +4422,11 @@ integral_table::integral_table ()\n   set (TRUTH_NOT_EXPR, op_logical_not);\n   set (BIT_NOT_EXPR, op_bitwise_not);\n   set (INTEGER_CST, op_integer_cst);\n-  set (SSA_NAME, op_identity);\n-  set (PAREN_EXPR, op_identity);\n-  set (OBJ_TYPE_REF, op_identity);\n-  set (IMAGPART_EXPR, op_unknown);\n-  set (REALPART_EXPR, op_unknown);\n+  set (SSA_NAME, op_ssa);\n+  set (PAREN_EXPR, op_paren);\n+  set (OBJ_TYPE_REF, op_obj_type);\n+  set (IMAGPART_EXPR, op_imagpart);\n+  set (REALPART_EXPR, op_realpart);\n   set (POINTER_DIFF_EXPR, op_pointer_diff);\n   set (ABS_EXPR, op_abs);\n   set (ABSU_EXPR, op_absu);\n@@ -4437,8 +4446,8 @@ pointer_table::pointer_table ()\n {\n   set (BIT_AND_EXPR, op_pointer_and);\n   set (BIT_IOR_EXPR, op_pointer_or);\n-  set (MIN_EXPR, op_ptr_min_max);\n-  set (MAX_EXPR, op_ptr_min_max);\n+  set (MIN_EXPR, op_ptr_min);\n+  set (MAX_EXPR, op_ptr_max);\n   set (POINTER_PLUS_EXPR, op_pointer_plus);\n \n   set (EQ_EXPR, op_equal);\n@@ -4447,10 +4456,10 @@ pointer_table::pointer_table ()\n   set (LE_EXPR, op_le);\n   set (GT_EXPR, op_gt);\n   set (GE_EXPR, op_ge);\n-  set (SSA_NAME, op_identity);\n+  set (SSA_NAME, op_ssa);\n   set (INTEGER_CST, op_integer_cst);\n   set (ADDR_EXPR, op_addr);\n-  set (NOP_EXPR, op_convert);\n+  set (NOP_EXPR, op_nop);\n   set (CONVERT_EXPR, op_convert);\n \n   set (BIT_NOT_EXPR, op_bitwise_not);"}, {"sha": "c999b456f62e6d167d6e3a686376157eac6ba8d5", "filename": "gcc/range-op.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17586bdc34ba7c23e4af1277649c59e5308f843d/gcc%2Frange-op.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17586bdc34ba7c23e4af1277649c59e5308f843d/gcc%2Frange-op.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.h?ref=17586bdc34ba7c23e4af1277649c59e5308f843d", "patch": "@@ -48,7 +48,9 @@ along with GCC; see the file COPYING3.  If not see\n \n class range_operator\n {\n+  friend class range_op_table;\n public:\n+  range_operator () : m_code (ERROR_MARK) { }\n   // Perform an operation between 2 ranges and return it.\n   virtual bool fold_range (irange &r, tree type,\n \t\t\t   const irange &lh,\n@@ -106,6 +108,9 @@ class range_operator\n \t\t\t const wide_int &lh_ub,\n \t\t\t const wide_int &rh_lb,\n \t\t\t const wide_int &rh_ub) const;\n+\n+  // Tree code of the range operator or ERROR_MARK if unknown.\n+  tree_code m_code;\n };\n \n // Like range_operator above, but for floating point operators."}]}