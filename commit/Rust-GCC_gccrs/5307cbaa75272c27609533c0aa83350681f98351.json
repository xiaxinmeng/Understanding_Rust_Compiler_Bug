{"sha": "5307cbaa75272c27609533c0aa83350681f98351", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMwN2NiYWE3NTI3MmMyNzYwOTUzM2MwYWE4MzM1MDY4MWY5ODM1MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-04-24T09:42:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-04-24T09:42:16Z"}, "message": "re PR other/48748 (Undocumented type traits used in libstdc++-4.6)\n\n2011-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR other/48748\n\t* doc/extend.texi (Type Traits): Document __is_standard_layout,\n\t__is_literal_type, and __is_trivial; update throughout about\n\tpossibly cv-qualified void types.\n\nFrom-SVN: r172911", "tree": {"sha": "bf5fc1e5cd138943b4de7268d8fa1fd244102bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5fc1e5cd138943b4de7268d8fa1fd244102bbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5307cbaa75272c27609533c0aa83350681f98351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5307cbaa75272c27609533c0aa83350681f98351", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5307cbaa75272c27609533c0aa83350681f98351", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5307cbaa75272c27609533c0aa83350681f98351/comments", "author": null, "committer": null, "parents": [{"sha": "bebd5f993cce9fa80254d2c1f0a486d1de4147db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebd5f993cce9fa80254d2c1f0a486d1de4147db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bebd5f993cce9fa80254d2c1f0a486d1de4147db"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "1f191ee2e18e2e1143e8a8d7c1b1ea9ba3be20ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5307cbaa75272c27609533c0aa83350681f98351/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5307cbaa75272c27609533c0aa83350681f98351/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5307cbaa75272c27609533c0aa83350681f98351", "patch": "@@ -1,3 +1,10 @@\n+2011-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR other/48748\n+\t* doc/extend.texi (Type Traits): Document __is_standard_layout,\n+\t__is_literal_type, and __is_trivial; update throughout about\n+\tpossibly cv-qualified void types.\n+\n 2011-04-24  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/sourcebuild.texi (Ada Tests): Adjust reference to ACATS"}, {"sha": "eddff9539d046a0ca05077eb70bc8c0d793d5ed1", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5307cbaa75272c27609533c0aa83350681f98351/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5307cbaa75272c27609533c0aa83350681f98351/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5307cbaa75272c27609533c0aa83350681f98351", "patch": "@@ -14305,63 +14305,63 @@ If @code{type} is const qualified or is a reference type then the trait is\n false.  Otherwise if @code{__has_trivial_assign (type)} is true then the trait\n is true, else if @code{type} is a cv class or union type with copy assignment\n operators that are known not to throw an exception then the trait is true,\n-else it is false.  Requires: @code{type} shall be a complete type, an array\n-type of unknown bound, or is a @code{void} type.\n+else it is false.  Requires: @code{type} shall be a complete type, \n+(possibly cv-qualified) @code{void}, or an array of unknown bound.\n \n @item __has_nothrow_copy (type)\n If @code{__has_trivial_copy (type)} is true then the trait is true, else if\n @code{type} is a cv class or union type with copy constructors that\n are known not to throw an exception then the trait is true, else it is false.\n-Requires: @code{type} shall be a complete type, an array type of\n-unknown bound, or is a @code{void} type.\n+Requires: @code{type} shall be a complete type, (possibly cv-qualified)\n+@code{void}, or an array of unknown bound.\n \n @item __has_nothrow_constructor (type)\n If @code{__has_trivial_constructor (type)} is true then the trait is\n true, else if @code{type} is a cv class or union type (or array\n thereof) with a default constructor that is known not to throw an\n-exception then the trait is true, else it is false.  Requires:\n-@code{type} shall be a complete type, an array type of unknown bound,\n-or is a @code{void} type.\n+exception then the trait is true, else it is false.  Requires: \n+@code{type} shall be a complete type, (possibly cv-qualified) \n+@code{void}, or an array of unknown bound.\n \n @item __has_trivial_assign (type)\n If @code{type} is const qualified or is a reference type then the trait is\n false.  Otherwise if @code{__is_pod (type)} is true then the trait is\n true, else if @code{type} is a cv class or union type with a trivial\n copy assignment ([class.copy]) then the trait is true, else it is\n-false.  Requires: @code{type} shall be a complete type, an array type\n-of unknown bound, or is a @code{void} type.\n+false.  Requires: @code{type} shall be a complete type, (possibly \n+cv-qualified) @code{void}, or an array of unknown bound.\n \n @item __has_trivial_copy (type)\n If @code{__is_pod (type)} is true or @code{type} is a reference type \n then the trait is true, else if @code{type} is a cv class or union type\n with a trivial copy constructor ([class.copy]) then the trait\n is true, else it is false.  Requires: @code{type} shall be a complete\n-type, an array type of unknown bound, or is a @code{void} type.\n+type, (possibly cv-qualified) @code{void}, or an array of unknown bound.\n \n @item __has_trivial_constructor (type)\n If @code{__is_pod (type)} is true then the trait is true, else if\n @code{type} is a cv class or union type (or array thereof) with a\n trivial default constructor ([class.ctor]) then the trait is true,\n-else it is false.  Requires: @code{type} shall be a complete type, an\n-array type of unknown bound, or is a @code{void} type.\n+else it is false.  Requires: @code{type} shall be a complete\n+type, (possibly cv-qualified) @code{void}, or an array of unknown bound.\n \n @item __has_trivial_destructor (type)\n If @code{__is_pod (type)} is true or @code{type} is a reference type then\n the trait is true, else if @code{type} is a cv class or union type (or\n array thereof) with a trivial destructor ([class.dtor]) then the trait\n is true, else it is false.  Requires: @code{type} shall be a complete\n-type, an array type of unknown bound, or is a @code{void} type.\n+type, (possibly cv-qualified) @code{void}, or an array of unknown bound.\n \n @item __has_virtual_destructor (type)\n If @code{type} is a class type with a virtual destructor\n ([class.dtor]) then the trait is true, else it is false.  Requires:\n-@code{type}  shall be a complete type, an array type of unknown bound,\n-or is a @code{void} type.\n+@code{type} shall be a complete type, (possibly cv-qualified)\n+@code{void}, or an array of unknown bound.\n \n @item __is_abstract (type)\n If @code{type} is an abstract class ([class.abstract]) then the trait\n is true, else it is false.  Requires: @code{type} shall be a complete\n-type, an array type of unknown bound, or is a @code{void} type.\n+type, (possibly cv-qualified) @code{void}, or an array of unknown bound.\n \n @item __is_base_of (base_type, derived_type)\n If @code{base_type} is a base class of @code{derived_type}\n@@ -14386,22 +14386,37 @@ any, are bit-fields of length 0, and @code{type} has no virtual\n members, and @code{type} has no virtual base classes, and @code{type}\n has no base classes @code{base_type} for which \n @code{__is_empty (base_type)} is false.  Requires: @code{type} shall\n-be a complete type, an array type of unknown bound, or is a\n-@code{void} type.\n+be a complete type, (possibly cv-qualified) @code{void}, or an array\n+of unknown bound.\n \n @item __is_enum (type)\n If @code{type} is a cv enumeration type ([basic.compound]) the trait is\n true, else it is false.\n \n+@item __is_literal_type (type)\n+If @code{type} is a literal type ([basic.types]) the trait is\n+true, else it is false.  Requires: @code{type} shall be a complete type,\n+(possibly cv-qualified) @code{void}, or an array of unknown bound.\n+\n @item __is_pod (type)\n If @code{type} is a cv POD type ([basic.types]) then the trait is true,\n-else it is false.  Requires: @code{type} shall be a complete type, \n-an array type of unknown bound, or is a @code{void} type.\n+else it is false.  Requires: @code{type} shall be a complete type,\n+(possibly cv-qualified) @code{void}, or an array of unknown bound.\n \n @item __is_polymorphic (type)\n If @code{type} is a polymorphic class ([class.virtual]) then the trait\n is true, else it is false.  Requires: @code{type} shall be a complete\n-type, an array type of unknown bound, or is a @code{void} type.\n+type, (possibly cv-qualified) @code{void}, or an array of unknown bound.\n+\n+@item __is_standard_layout (type)\n+If @code{type} is a standard-layout type ([basic.types]) the trait is\n+true, else it is false.  Requires: @code{type} shall be a complete\n+type, (possibly cv-qualified) @code{void}, or an array of unknown bound.\n+\n+@item __is_trivial (type)\n+If @code{type} is a trivial type ([basic.types]) the trait is\n+true, else it is false.  Requires: @code{type} shall be a complete\n+type, (possibly cv-qualified) @code{void}, or an array of unknown bound.\n \n @item __is_union (type)\n If @code{type} is a cv union type ([basic.compound]) the trait is"}]}