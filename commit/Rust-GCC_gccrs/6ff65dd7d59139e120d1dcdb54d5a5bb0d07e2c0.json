{"sha": "6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmNjVkZDdkNTkxMzllMTIwZDFkY2RiNTRkNWE1YmIwZDA3ZTJjMA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2014-11-14T00:22:28Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2014-11-14T00:22:28Z"}, "message": "cgraph.h (clear_outer_type): Make public.\n\n2014-11-14  Martin Jambor  <mjambor@suse.cz>\n\n\t* cgraph.h (clear_outer_type): Make public.  Fix comment.\n\t* ipa-devirt.c (possible_polymorphic_call_targets): Use\n\tclear_outer_type when resetting the context.\n\nFrom-SVN: r217529", "tree": {"sha": "e6e110d0ed358b2d81ee2dfd2f67652dbc21d6c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6e110d0ed358b2d81ee2dfd2f67652dbc21d6c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "453f025aa7a1746bd14875577402b1ae7f09ddbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453f025aa7a1746bd14875577402b1ae7f09ddbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453f025aa7a1746bd14875577402b1ae7f09ddbd"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "98d5668abef7df0cad5140cd2905dcff72107909", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0", "patch": "@@ -1,3 +1,9 @@\n+2014-11-14  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* cgraph.h (clear_outer_type): Make public.  Fix comment.\n+\t* ipa-devirt.c (possible_polymorphic_call_targets): Use\n+\tclear_outer_type when resetting the context.\n+\n 2014-11-13  Dominique Dhumieres  <dominiq@lps.ens.fr>\n \n \tPR bootstrap/63853"}, {"sha": "82222217898f978731e86b4e1d1033c61a9303b2", "filename": "gcc/cgraph.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0", "patch": "@@ -1352,6 +1352,10 @@ class GTY(()) ipa_polymorphic_call_context {\n   /* Make context non-speculative.  */\n   void clear_speculation ();\n \n+  /* Produce context specifying all derrived types of OTR_TYPE.  If OTR_TYPE is\n+     NULL, the context is set to dummy \"I know nothing\" setting.  */\n+  void clear_outer_type (tree otr_type = NULL);\n+\n   /* Walk container types and modify context to point to actual class\n      containing OTR_TYPE (if non-NULL) as base class.\n      Return true if resulting context is valid.\n@@ -1392,7 +1396,6 @@ class GTY(()) ipa_polymorphic_call_context {\n   bool combine_speculation_with (tree, HOST_WIDE_INT, bool, tree);\n   void set_by_decl (tree, HOST_WIDE_INT);\n   bool set_by_invariant (tree, tree, HOST_WIDE_INT);\n-  void clear_outer_type (tree otr_type = NULL);\n   bool speculation_consistent_p (tree, HOST_WIDE_INT, bool, tree);\n   void make_speculative (tree otr_type = NULL);\n };\n@@ -2748,9 +2751,8 @@ ipa_polymorphic_call_context::clear_speculation ()\n   speculative_maybe_derived_type = false;\n }\n \n-/* Produce context specifying all derrived types of OTR_TYPE.\n-   If OTR_TYPE is NULL or type of the OBJ_TYPE_REF, the context is set\n-   to dummy \"I know nothing\" setting.  */\n+/* Produce context specifying all derrived types of OTR_TYPE.  If OTR_TYPE is\n+   NULL, the context is set to dummy \"I know nothing\" setting.  */\n \n inline void\n ipa_polymorphic_call_context::clear_outer_type (tree otr_type)"}, {"sha": "5e1f57131227bcedf32332a7794405d51abcfb5b", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=6ff65dd7d59139e120d1dcdb54d5a5bb0d07e2c0", "patch": "@@ -2281,10 +2281,7 @@ possible_polymorphic_call_targets (tree otr_type,\n   /* Without outer type, we have no use for offset.  Just do the\n      basic search from innter type  */\n   if (!context.outer_type)\n-    {\n-      context.outer_type = otr_type;\n-      context.offset = 0;\n-    }\n+    context.clear_outer_type (otr_type);\n   /* We need to update our hiearchy if the type does not exist.  */\n   outer_type = get_odr_type (context.outer_type, true);\n   /* If the type is complete, there are no derivations.  */"}]}