{"sha": "f50264425f97bd393878d701e11fc8788c2cf013", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUwMjY0NDI1Zjk3YmQzOTM4NzhkNzAxZTExZmM4Nzg4YzJjZjAxMw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2008-11-07T16:25:03Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2008-11-07T16:25:03Z"}, "message": "re PR ada/37681 (Building 64-bit libada fails on Solaris/x86: alignment error)\n\n\t* system-irix-n64.ads: New file.\n\t* gcc-interface/Makefile.in (mips-sgi-irix6*): Support O32 and N64\n\tmultilibs.\n\n\tPR ada/37681\n\t* system-solaris-x86_64.ads: New file.\n\t* gcc-interface/Makefile.in (*86-solaris2*): Support x86_64 multilib.\n\nFrom-SVN: r141681", "tree": {"sha": "d9fe9e8a4abc46877dd3d9b84d788c9981a86d64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9fe9e8a4abc46877dd3d9b84d788c9981a86d64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f50264425f97bd393878d701e11fc8788c2cf013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50264425f97bd393878d701e11fc8788c2cf013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f50264425f97bd393878d701e11fc8788c2cf013", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50264425f97bd393878d701e11fc8788c2cf013/comments", "author": null, "committer": null, "parents": [{"sha": "ded05576055144c7d6e945109d4dfc8297039c8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded05576055144c7d6e945109d4dfc8297039c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ded05576055144c7d6e945109d4dfc8297039c8a"}], "stats": {"total": 350, "additions": 345, "deletions": 5}, "files": [{"sha": "6bf94b0776314d9ee45b6fa8c44664cc744832a0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50264425f97bd393878d701e11fc8788c2cf013/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50264425f97bd393878d701e11fc8788c2cf013/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f50264425f97bd393878d701e11fc8788c2cf013", "patch": "@@ -1,3 +1,15 @@\n+2008-11-07  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* system-irix-n64.ads: New file.\n+\t* gcc-interface/Makefile.in (mips-sgi-irix6*): Support O32 and N64\n+\tmultilibs.\n+\n+2008-11-07  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\tPR ada/37681\n+\t* system-solaris-x86_64.ads: New file.\n+\t* gcc-interface/Makefile.in (*86-solaris2*): Support x86_64 multilib.\n+\n 2008-11-07  Bechir Zalila  <bechir.zalila@gmail.com>\n             Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "3a07dda7979179137f11890aa5bb93773cc23b4c", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50264425f97bd393878d701e11fc8788c2cf013/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50264425f97bd393878d701e11fc8788c2cf013/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=f50264425f97bd393878d701e11fc8788c2cf013", "patch": "@@ -818,9 +818,16 @@ ifeq ($(strip $(filter-out %86 solaris2%,$(arch) $(osys))),)\n   s-tasinf.ads<s-tasinf-solaris.ads \\\n   s-taspri.ads<s-taspri-solaris.ads \\\n   s-tpopsp.adb<s-tpopsp-solaris.adb \\\n-  g-bytswa.adb<g-bytswa-x86.adb \\\n-  g-soliop.ads<g-soliop-solaris.ads \\\n-  system.ads<system-solaris-x86.ads\n+  g-soliop.ads<g-soliop-solaris.ads\n+\n+  ifeq ($(strip $(MULTISUBDIR)),/amd64)\n+    LIBGNAT_TARGET_PAIRS += \\\n+    system.ads<system-solaris-x86_64.ads\n+  else\n+    LIBGNAT_TARGET_PAIRS += \\\n+    g-bytswa.adb<g-bytswa-x86.adb \\\n+    system.ads<system-solaris-x86.ads\n+  endif\n \n   TOOLS_TARGET_PAIRS=mlib-tgt-specific.adb<mlib-tgt-specific-solaris.adb\n \n@@ -1016,8 +1023,20 @@ ifeq ($(strip $(filter-out mips sgi irix%,$(targ))),)\n     s-tasinf.ads<s-tasinf-irix.ads \\\n     s-taspri.ads<s-taspri-posix.ads \\\n     s-tpopsp.adb<s-tpopsp-posix.adb \\\n-    s-traceb.adb<s-traceb-mastop.adb \\\n-    system.ads<system-irix-n32.ads\n+    s-traceb.adb<s-traceb-mastop.adb\n+\n+    ifeq ($(strip $(MULTISUBDIR)),/64)\n+      LIBGNAT_TARGET_PAIRS += \\\n+      system.ads<system-irix-n64.ads\n+    else\n+      ifeq ($(strip $(MULTISUBDIR)),/32)\n+        LIBGNAT_TARGET_PAIRS += \\\n+        system.ads<system-irix-o32.ads\n+      else\n+        LIBGNAT_TARGET_PAIRS += \\\n+        system.ads<system-irix-n32.ads\n+      endif\n+    endif\n \n     THREADSLIB = -lpthread\n     GNATLIB_SHARED = gnatlib-shared-default"}, {"sha": "216a391092dff53f56e520c1b172745c0102f319", "filename": "gcc/ada/system-irix-n64.ads", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50264425f97bd393878d701e11fc8788c2cf013/gcc%2Fada%2Fsystem-irix-n64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50264425f97bd393878d701e11fc8788c2cf013/gcc%2Fada%2Fsystem-irix-n64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-irix-n64.ads?ref=f50264425f97bd393878d701e11fc8788c2cf013", "patch": "@@ -0,0 +1,162 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                           (SGI Irix, n64 ABI)                            --\n+--                                                                          --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+   pragma Pure;\n+   --  Note that we take advantage of the implementation permission to make\n+   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n+   --  2005, this is Pure in any case (AI-362).\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 0.01;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   pragma Preelaborable_Initialization (Address);\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 64;\n+   Memory_Size  : constant := 2 ** 64;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := High_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   --  IRIX priorities as defined by realtime(5):\n+   --\n+   --  255        is for system-level interrupts\n+   --  240 - 254  are suggested for hard real-time threads\n+   --  200 - 239  are used by system device driver interrupt threads\n+   --  110 - 199  are suggested for interactive real-time applications\n+   --   90 - 109  are used by system daemon threads\n+   --    0 -  89  are suggested for soft real-time applications\n+   --\n+   --  We don't express the full range of IRIX priorities.  For now, we\n+   --  handle only the subset for soft real-time applications.\n+\n+   Max_Priority           : constant Positive := 88;\n+   Max_Interrupt_Priority : constant Positive := 89;\n+\n+   subtype Any_Priority       is Integer      range  0 .. 89;\n+   subtype Priority           is Any_Priority range  0 .. 88;\n+   subtype Interrupt_Priority is Any_Priority range 89 .. 89;\n+\n+   Default_Priority : constant Priority := 44;\n+\n+private\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := False;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := False;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n+   Support_64_Bit_Divides    : constant Boolean := True;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := True;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n+   GCC_ZCX_Support           : constant Boolean := True;\n+\n+   --  Note: Denorm is False because denormals are not supported on the\n+   --  R10000, and we want the code to be valid for this processor.\n+\n+end System;"}, {"sha": "d65d8c76655017bfd42647465c3467dda95d5870", "filename": "gcc/ada/system-solaris-x86_64.ads", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50264425f97bd393878d701e11fc8788c2cf013/gcc%2Fada%2Fsystem-solaris-x86_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50264425f97bd393878d701e11fc8788c2cf013/gcc%2Fada%2Fsystem-solaris-x86_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-solaris-x86_64.ads?ref=f50264425f97bd393878d701e11fc8788c2cf013", "patch": "@@ -0,0 +1,147 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                        (x86-64 Solaris Version)                          --\n+--                                                                          --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+   pragma Pure;\n+   --  Note that we take advantage of the implementation permission to make\n+   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n+   --  2005, this is Pure in any case (AI-362).\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 0.01;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   pragma Preelaborable_Initialization (Address);\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 64;\n+   Memory_Size  : constant := 2 ** 64;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   Max_Priority           : constant Positive := 30;\n+   Max_Interrupt_Priority : constant Positive := 31;\n+\n+   subtype Any_Priority       is Integer      range  0 .. 31;\n+   subtype Priority           is Any_Priority range  0 .. 30;\n+   subtype Interrupt_Priority is Any_Priority range 31 .. 31;\n+\n+   Default_Priority : constant Priority := 15;\n+\n+private\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := False;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n+   Support_64_Bit_Divides    : constant Boolean := True;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := False;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n+   GCC_ZCX_Support           : constant Boolean := True;\n+\n+end System;"}]}