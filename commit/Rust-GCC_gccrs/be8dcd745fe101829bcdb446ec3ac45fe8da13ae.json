{"sha": "be8dcd745fe101829bcdb446ec3ac45fe8da13ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU4ZGNkNzQ1ZmUxMDE4MjliY2RiNDQ2ZWMzYWM0NWZlOGRhMTNhZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-02T23:59:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-02T23:59:33Z"}, "message": "(regclass): Don't set REGNO_POINTER_FLAG here.\n\n(reg_scan_mark_refs): Set it here.\nAccept INSN, not UID as arg.\n(reg_scan): Call reg_scan_mark_refs with INSN, not UID.\n\nFrom-SVN: r3615", "tree": {"sha": "f513a311a9d499601d38eac8f4aeed3e7b27037d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f513a311a9d499601d38eac8f4aeed3e7b27037d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be8dcd745fe101829bcdb446ec3ac45fe8da13ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8dcd745fe101829bcdb446ec3ac45fe8da13ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be8dcd745fe101829bcdb446ec3ac45fe8da13ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8dcd745fe101829bcdb446ec3ac45fe8da13ae/comments", "author": null, "committer": null, "parents": [{"sha": "78c02237e257cb8b6f92c92add5166a807f6d375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c02237e257cb8b6f92c92add5166a807f6d375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78c02237e257cb8b6f92c92add5166a807f6d375"}], "stats": {"total": 106, "additions": 49, "deletions": 57}, "files": [{"sha": "7c5a25676d1b804cbd2307e762e56da2647f6bb7", "filename": "gcc/regclass.c", "status": "modified", "additions": 49, "deletions": 57, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be8dcd745fe101829bcdb446ec3ac45fe8da13ae/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be8dcd745fe101829bcdb446ec3ac45fe8da13ae/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=be8dcd745fe101829bcdb446ec3ac45fe8da13ae", "patch": "@@ -719,56 +719,6 @@ regclass (f, nregs)\n \t\t      continue;\n \t\t    }\n \n-\t\t  /* If this is setting a pseudo from another pseudo or the\n-\t\t     sum of a pseudo and a constant integer and the other\n-\t\t     pseudo is known to be a pointer, set the destination to\n-\t\t     be a pointer as well.\n-\n-\t\t     Likewise if it is setting the destination from an address\n-\t\t     or from a value equivalent to an address or to the sum of\n-\t\t     an address and something else.\n-\t\t     \n-\t\t     But don't do any of this if the pseudo corresponds to\n-\t\t     a user variable since it should have already been set\n-\t\t     as a pointer based on the type.\n-\n-\t\t     There is no point in doing this during our second\n-\t\t     pass since not enough should have changed.  */\n-\n-\t\t  if (pass == 0 && set != 0 && GET_CODE (SET_DEST (set)) == REG\n-\t\t      && REGNO (SET_DEST (set)) >= FIRST_PSEUDO_REGISTER\n-\t\t      && ! REG_USERVAR_P (SET_DEST (set))\n-\t\t      && ! REGNO_POINTER_FLAG (REGNO (SET_DEST (set)))\n-\t\t      && ((GET_CODE (SET_SRC (set)) == REG\n-\t\t\t   && REGNO_POINTER_FLAG (REGNO (SET_SRC (set))))\n-\t\t\t  || ((GET_CODE (SET_SRC (set)) == PLUS\n-\t\t\t       || GET_CODE (SET_SRC (set)) == LO_SUM)\n-\t\t\t      && (GET_CODE (XEXP (SET_SRC (set), 1))\n-\t\t\t\t  == CONST_INT)\n-\t\t\t      && GET_CODE (XEXP (SET_SRC (set), 0)) == REG\n-\t\t\t      && REGNO_POINTER_FLAG (REGNO (XEXP (SET_SRC (set), 0))))\n-\t\t\t  || GET_CODE (SET_SRC (set)) == CONST\n-\t\t\t  || GET_CODE (SET_SRC (set)) == SYMBOL_REF\n-\t\t\t  || GET_CODE (SET_SRC (set)) == LABEL_REF\n-\t\t\t  || (GET_CODE (SET_SRC (set)) == HIGH\n-\t\t\t      && (GET_CODE (XEXP (SET_SRC (set), 0)) == CONST\n-\t\t\t\t  || (GET_CODE (XEXP (SET_SRC (set), 0))\n-\t\t\t\t      == SYMBOL_REF)\n-\t\t\t\t  || (GET_CODE (XEXP (SET_SRC (set), 0))\n-\t\t\t\t      == LABEL_REF)))\n-\t\t\t  || ((GET_CODE (SET_SRC (set)) == PLUS\n-\t\t\t       || GET_CODE (SET_SRC (set)) == LO_SUM)\n-\t\t\t      && (GET_CODE (XEXP (SET_SRC (set), 1)) == CONST\n-\t\t\t\t  || (GET_CODE (XEXP (SET_SRC (set), 1))\n-\t\t\t\t      == SYMBOL_REF)\n-\t\t\t\t  || (GET_CODE (XEXP (SET_SRC (set), 1))\n-\t\t\t\t      == LABEL_REF)))\n-\t\t\t  || ((note = find_reg_note (insn, REG_EQUAL, 0)) != 0\n-\t\t\t      && (GET_CODE (XEXP (note, 0)) == CONST\n-\t\t\t\t  || GET_CODE (XEXP (note, 0)) == SYMBOL_REF\n-\t\t\t\t  || GET_CODE (XEXP (note, 0)) == LABEL_REF))))\n-\t\t    REGNO_POINTER_FLAG (REGNO (SET_DEST (set))) = 1;\n-\n \t\t  for (i = 0; i < noperands; i++)\n \t\t    {\n \t\t      constraints[i]\n@@ -1572,17 +1522,18 @@ reg_scan (f, nregs, repeat)\n \tif (GET_CODE (PATTERN (insn)) == PARALLEL\n \t    && XVECLEN (PATTERN (insn), 0) > max_parallel)\n \t  max_parallel = XVECLEN (PATTERN (insn), 0);\n-\treg_scan_mark_refs (PATTERN (insn), INSN_UID (insn));\n+\treg_scan_mark_refs (PATTERN (insn), insn);\n       }\n }\n \n void\n-reg_scan_mark_refs (x, uid)\n+reg_scan_mark_refs (x, insn)\n      rtx x;\n-     int uid;\n+     rtx insn;\n {\n   register enum rtx_code code = GET_CODE (x);\n   register rtx dest;\n+  register rtx note;\n \n   switch (code)\n     {\n@@ -1601,9 +1552,9 @@ reg_scan_mark_refs (x, uid)\n       {\n \tregister int regno = REGNO (x);\n \n-\tregno_last_uid[regno] = uid;\n+\tregno_last_uid[regno] = INSN_UID (insn);\n \tif (regno_first_uid[regno] == 0)\n-\t  regno_first_uid[regno] = uid;\n+\t  regno_first_uid[regno] = INSN_UID (insn);\n       }\n       break;\n \n@@ -1618,6 +1569,47 @@ reg_scan_mark_refs (x, uid)\n       if (GET_CODE (dest) == REG)\n \treg_n_sets[REGNO (dest)]++;\n \n+      /* If this is setting a pseudo from another pseudo or the sum of a\n+\t pseudo and a constant integer and the other pseudo is known to be\n+\t a pointer, set the destination to be a pointer as well.\n+\n+\t Likewise if it is setting the destination from an address or from a\n+\t value equivalent to an address or to the sum of an address and\n+\t something else.\n+\t\t     \n+\t But don't do any of this if the pseudo corresponds to a user\n+\t variable since it should have already been set as a pointer based\n+\t on the type.  */\n+\n+      if (GET_CODE (SET_DEST (x)) == REG\n+\t  && REGNO (SET_DEST (x)) >= FIRST_PSEUDO_REGISTER\n+\t  && ! REG_USERVAR_P (SET_DEST (x))\n+\t  && ! REGNO_POINTER_FLAG (REGNO (SET_DEST (x)))\n+\t  && ((GET_CODE (SET_SRC (x)) == REG\n+\t       && REGNO_POINTER_FLAG (REGNO (SET_SRC (x))))\n+\t      || ((GET_CODE (SET_SRC (x)) == PLUS\n+\t\t   || GET_CODE (SET_SRC (x)) == LO_SUM)\n+\t\t  && GET_CODE (XEXP (SET_SRC (x), 1)) == CONST_INT\n+\t\t  && GET_CODE (XEXP (SET_SRC (x), 0)) == REG\n+\t\t  && REGNO_POINTER_FLAG (REGNO (XEXP (SET_SRC (x), 0))))\n+\t      || GET_CODE (SET_SRC (x)) == CONST\n+\t      || GET_CODE (SET_SRC (x)) == SYMBOL_REF\n+\t      || GET_CODE (SET_SRC (x)) == LABEL_REF\n+\t      || (GET_CODE (SET_SRC (x)) == HIGH\n+\t\t  && (GET_CODE (XEXP (SET_SRC (x), 0)) == CONST\n+\t\t      || GET_CODE (XEXP (SET_SRC (x), 0)) == SYMBOL_REF\n+\t\t      || GET_CODE (XEXP (SET_SRC (x), 0)) == LABEL_REF))\n+\t      || ((GET_CODE (SET_SRC (x)) == PLUS\n+\t\t   || GET_CODE (SET_SRC (x)) == LO_SUM)\n+\t\t  && (GET_CODE (XEXP (SET_SRC (x), 1)) == CONST\n+\t\t      || GET_CODE (XEXP (SET_SRC (x), 1)) == SYMBOL_REF\n+\t\t      || GET_CODE (XEXP (SET_SRC (x), 1)) == LABEL_REF))\n+\t      || ((note = find_reg_note (insn, REG_EQUAL, 0)) != 0\n+\t\t  && (GET_CODE (XEXP (note, 0)) == CONST\n+\t\t      || GET_CODE (XEXP (note, 0)) == SYMBOL_REF\n+\t\t      || GET_CODE (XEXP (note, 0)) == LABEL_REF))))\n+\tREGNO_POINTER_FLAG (REGNO (SET_DEST (x))) = 1;\n+\n       /* ... fall through ... */\n \n     default:\n@@ -1627,12 +1619,12 @@ reg_scan_mark_refs (x, uid)\n \tfor (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n \t  {\n \t    if (fmt[i] == 'e')\n-\t      reg_scan_mark_refs (XEXP (x, i), uid);\n+\t      reg_scan_mark_refs (XEXP (x, i), insn);\n \t    else if (fmt[i] == 'E' && XVEC (x, i) != 0)\n \t      {\n \t\tregister int j;\n \t\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t\t  reg_scan_mark_refs (XVECEXP (x, i, j), uid);\t\t  \n+\t\t  reg_scan_mark_refs (XVECEXP (x, i, j), insn);\n \t      }\n \t  }\n       }"}]}