{"sha": "79b4a34ad062d1c4e9effcc508e8b44d6d9b5075", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzliNGEzNGFkMDYyZDFjNGU5ZWZmY2M1MDhlOGI0NGQ2ZDliNTA3NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-04T19:34:32Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-04T19:34:32Z"}, "message": "Check for multiple default cases in switch or select.\n\nFrom-SVN: r168481", "tree": {"sha": "03e7c06e8a2c45fc9e121d947b6f2feb9c7d3d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e7c06e8a2c45fc9e121d947b6f2feb9c7d3d01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79b4a34ad062d1c4e9effcc508e8b44d6d9b5075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b4a34ad062d1c4e9effcc508e8b44d6d9b5075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b4a34ad062d1c4e9effcc508e8b44d6d9b5075", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b4a34ad062d1c4e9effcc508e8b44d6d9b5075/comments", "author": null, "committer": null, "parents": [{"sha": "f36067eb52a2475e5e628cdb65eccb65c48a3953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36067eb52a2475e5e628cdb65eccb65c48a3953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f36067eb52a2475e5e628cdb65eccb65c48a3953"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "13374f40bcc9fd9db7264a0ecfbbae1a3f53b828", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b4a34ad062d1c4e9effcc508e8b44d6d9b5075/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b4a34ad062d1c4e9effcc508e8b44d6d9b5075/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=79b4a34ad062d1c4e9effcc508e8b44d6d9b5075", "patch": "@@ -3825,6 +3825,7 @@ Parse::expr_switch_body(const Label* label, Expression* switch_val,\n   this->push_break_statement(statement, label);\n \n   Case_clauses* case_clauses = new Case_clauses();\n+  bool saw_default = false;\n   while (!this->peek_token()->is_op(OPERATOR_RCURLY))\n     {\n       if (this->peek_token()->is_eof())\n@@ -3833,7 +3834,7 @@ Parse::expr_switch_body(const Label* label, Expression* switch_val,\n \t    error_at(this->location(), \"missing %<}%>\");\n \t  return NULL;\n \t}\n-      this->expr_case_clause(case_clauses);\n+      this->expr_case_clause(case_clauses, &saw_default);\n     }\n   this->advance_token();\n \n@@ -3848,7 +3849,7 @@ Parse::expr_switch_body(const Label* label, Expression* switch_val,\n // FallthroughStat = \"fallthrough\" .\n \n void\n-Parse::expr_case_clause(Case_clauses* clauses)\n+Parse::expr_case_clause(Case_clauses* clauses, bool* saw_default)\n {\n   source_location location = this->location();\n \n@@ -3880,6 +3881,16 @@ Parse::expr_case_clause(Case_clauses* clauses)\n \tthis->advance_token();\n     }\n \n+  if (is_default)\n+    {\n+      if (*saw_default)\n+\t{\n+\t  error_at(location, \"multiple defaults in switch\");\n+\t  return;\n+\t}\n+      *saw_default = true;\n+    }\n+\n   if (is_default || vals != NULL)\n     clauses->add(vals, is_default, statements, is_fallthrough, location);\n }\n@@ -3936,14 +3947,15 @@ Parse::type_switch_body(const Label* label, const Type_switch& type_switch,\n   this->push_break_statement(statement, label);\n \n   Type_case_clauses* case_clauses = new Type_case_clauses();\n+  bool saw_default = false;\n   while (!this->peek_token()->is_op(OPERATOR_RCURLY))\n     {\n       if (this->peek_token()->is_eof())\n \t{\n \t  error_at(this->location(), \"missing %<}%>\");\n \t  return NULL;\n \t}\n-      this->type_case_clause(switch_no, case_clauses);\n+      this->type_case_clause(switch_no, case_clauses, &saw_default);\n     }\n   this->advance_token();\n \n@@ -3957,7 +3969,8 @@ Parse::type_switch_body(const Label* label, const Type_switch& type_switch,\n // TypeCaseClause  = TypeSwitchCase \":\" [ StatementList ] .\n \n void\n-Parse::type_case_clause(Named_object* switch_no, Type_case_clauses* clauses)\n+Parse::type_case_clause(Named_object* switch_no, Type_case_clauses* clauses,\n+\t\t\tbool* saw_default)\n {\n   source_location location = this->location();\n \n@@ -4000,6 +4013,12 @@ Parse::type_case_clause(Named_object* switch_no, Type_case_clauses* clauses)\n   if (is_default)\n     {\n       gcc_assert(types.empty());\n+      if (*saw_default)\n+\t{\n+\t  error_at(location, \"multiple defaults in type switch\");\n+\t  return;\n+\t}\n+      *saw_default = true;\n       clauses->add(NULL, false, true, statements, location);\n     }\n   else if (!types.empty())\n@@ -4076,14 +4095,15 @@ Parse::select_stat(const Label* label)\n   this->push_break_statement(statement, label);\n \n   Select_clauses* select_clauses = new Select_clauses();\n+  bool saw_default = false;\n   while (!this->peek_token()->is_op(OPERATOR_RCURLY))\n     {\n       if (this->peek_token()->is_eof())\n \t{\n \t  error_at(this->location(), \"expected %<}%>\");\n \t  return;\n \t}\n-      this->comm_clause(select_clauses);\n+      this->comm_clause(select_clauses, &saw_default);\n     }\n \n   this->advance_token();\n@@ -4098,7 +4118,7 @@ Parse::select_stat(const Label* label)\n // CommClause = CommCase [ StatementList ] .\n \n void\n-Parse::comm_clause(Select_clauses* clauses)\n+Parse::comm_clause(Select_clauses* clauses, bool* saw_default)\n {\n   source_location location = this->location();\n   bool is_send = false;\n@@ -4130,6 +4150,16 @@ Parse::comm_clause(Select_clauses* clauses)\n       statements = this->gogo_->finish_block(this->location());\n     }\n \n+  if (is_default)\n+    {\n+      if (*saw_default)\n+\t{\n+\t  error_at(location, \"multiple defaults in select\");\n+\t  return;\n+\t}\n+      *saw_default = true;\n+    }\n+\n   if (got_case)\n     clauses->add(is_send, channel, val, var, is_default, statements, location);\n }"}, {"sha": "65f15860b4401cc69110a149e39d322b506b21b9", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b4a34ad062d1c4e9effcc508e8b44d6d9b5075/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b4a34ad062d1c4e9effcc508e8b44d6d9b5075/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=79b4a34ad062d1c4e9effcc508e8b44d6d9b5075", "patch": "@@ -238,14 +238,14 @@ class Parse\n   void if_stat();\n   void switch_stat(const Label*);\n   Statement* expr_switch_body(const Label*, Expression*, source_location);\n-  void expr_case_clause(Case_clauses*);\n+  void expr_case_clause(Case_clauses*, bool* saw_default);\n   Expression_list* expr_switch_case(bool*);\n   Statement* type_switch_body(const Label*, const Type_switch&,\n \t\t\t      source_location);\n-  void type_case_clause(Named_object*, Type_case_clauses*);\n+  void type_case_clause(Named_object*, Type_case_clauses*, bool* saw_default);\n   void type_switch_case(std::vector<Type*>*, bool*);\n   void select_stat(const Label*);\n-  void comm_clause(Select_clauses*);\n+  void comm_clause(Select_clauses*, bool* saw_default);\n   bool comm_case(bool*, Expression**, Expression**, std::string*, bool*);\n   bool send_or_recv_expr(bool*, Expression**, Expression**, std::string*);\n   void for_stat(const Label*);"}]}