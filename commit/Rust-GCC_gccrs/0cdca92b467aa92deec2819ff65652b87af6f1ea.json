{"sha": "0cdca92b467aa92deec2819ff65652b87af6f1ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkY2E5MmI0NjdhYTkyZGVlYzI4MTlmZjY1NjUyYjg3YWY2ZjFlYQ==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2003-01-10T19:49:09Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2003-01-10T19:49:09Z"}, "message": "calls.c (load_register_parameters): Add is_sibcall, sibcall_failure parameters.\n\n\n2003-01-10  Dale Johannesen <dalej@apple.com>\n        * calls.c (load_register_parameters):  Add is_sibcall, sibcall_failure\n        parameters.  Call check_sibcall_argument_overlap if indicated.\n        (check_sibcall_argument_overlap):  Add mark_stored_args_map\n        parameter.  Don't mark parameter area as clobbered if not set.\n        (expand_call):  Adjust calls to above.\n\nFrom-SVN: r61165", "tree": {"sha": "2b6cdacc2059f835c268afdacea93bde8d6f38ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b6cdacc2059f835c268afdacea93bde8d6f38ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cdca92b467aa92deec2819ff65652b87af6f1ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdca92b467aa92deec2819ff65652b87af6f1ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cdca92b467aa92deec2819ff65652b87af6f1ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdca92b467aa92deec2819ff65652b87af6f1ea/comments", "author": null, "committer": null, "parents": [{"sha": "43a4a12b15c99d7b64bd6762e08cb0c7802b65c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a4a12b15c99d7b64bd6762e08cb0c7802b65c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43a4a12b15c99d7b64bd6762e08cb0c7802b65c5"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "9111be51088bc8eb1c167b7f8bc40ae197db8399", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdca92b467aa92deec2819ff65652b87af6f1ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdca92b467aa92deec2819ff65652b87af6f1ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cdca92b467aa92deec2819ff65652b87af6f1ea", "patch": "@@ -1,4 +1,12 @@\n-2003-01-10 Kelley Cook <kelleycook@comcast.net>\n+2003-01-10  Dale Johannesen <dalej@apple.com>\n+ \n+        * calls.c (load_register_parameters):  Add is_sibcall, sibcall_failure\n+        parameters.  Call check_sibcall_argument_overlap if indicated.\n+        (check_sibcall_argument_overlap):  Add mark_stored_args_map\n+        parameter.  Don't mark parameter area as clobbered if not set.\n+        (expand_call):  Adjust calls to above.\n+ \n+ 2003-01-10 Kelley Cook <kelleycook@comcast.net>\n \n \t* configure.in (linker read-only and read-write section mixing):\n \tSquelch some assembler warnings."}, {"sha": "18c7f604f5ce22f7f461f75ac166b76fd4c396eb", "filename": "gcc/calls.c", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdca92b467aa92deec2819ff65652b87af6f1ea/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdca92b467aa92deec2819ff65652b87af6f1ea/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=0cdca92b467aa92deec2819ff65652b87af6f1ea", "patch": "@@ -182,7 +182,8 @@ static void compute_argument_addresses\t\tPARAMS ((struct arg_data *,\n \t\t\t\t\t\t\t rtx, int));\n static rtx rtx_for_function_call\t\tPARAMS ((tree, tree));\n static void load_register_parameters\t\tPARAMS ((struct arg_data *,\n-\t\t\t\t\t\t\t int, rtx *, int));\n+\t\t\t\t\t\t\t int, rtx *, int,\n+\t\t\t\t\t\t\t int, int *));\n static rtx emit_library_call_value_1 \t\tPARAMS ((int, rtx, rtx,\n \t\t\t\t\t\t\t enum libcall_type,\n \t\t\t\t\t\t\t enum machine_mode,\n@@ -191,7 +192,8 @@ static int special_function_p\t\t\tPARAMS ((tree, int));\n static rtx try_to_integrate\t\t\tPARAMS ((tree, tree, rtx,\n \t\t\t\t\t\t\t int, tree, rtx));\n static int check_sibcall_argument_overlap_1\tPARAMS ((rtx));\n-static int check_sibcall_argument_overlap\tPARAMS ((rtx, struct arg_data *));\n+static int check_sibcall_argument_overlap\tPARAMS ((rtx, struct arg_data *,\n+\t\t\t\t\t\t\t int));\n \n static int combine_pending_stack_adjustment_and_call\n                                                 PARAMS ((int, struct args_size *, int));\n@@ -1698,14 +1700,20 @@ rtx_for_function_call (fndecl, exp)\n    expressions were already evaluated.\n \n    Mark all register-parms as living through the call, putting these USE\n-   insns in the CALL_INSN_FUNCTION_USAGE field.  */\n+   insns in the CALL_INSN_FUNCTION_USAGE field.  \n+ \n+   When IS_SIBCALL, perform the check_sibcall_overlap_argument_overlap\n+   checking, setting *SIBCALL_FAILURE if appropriate.  */\n \n static void\n-load_register_parameters (args, num_actuals, call_fusage, flags)\n+load_register_parameters (args, num_actuals, call_fusage, flags, \n+\t\t\t    is_sibcall, sibcall_failure)\n      struct arg_data *args;\n      int num_actuals;\n      rtx *call_fusage;\n      int flags;\n+     int is_sibcall;\n+     int *sibcall_failure;\n {\n   int i, j;\n \n@@ -1722,6 +1730,7 @@ load_register_parameters (args, num_actuals, call_fusage, flags)\n \n       if (reg)\n \t{\n+\t  rtx before_arg = get_last_insn ();\n \t  /* Set to non-negative if must move a word at a time, even if just\n \t     one word (e.g, partial == 1 && mode == DFmode).  Set to -1 if\n \t     we just use a normal move insn.  This value can be zero if the\n@@ -1759,6 +1768,13 @@ load_register_parameters (args, num_actuals, call_fusage, flags)\n \t\t\t       validize_mem (args[i].value), nregs,\n \t\t\t       args[i].mode);\n \n+\t  /* When a parameter is a block, and perhaps in other cases, it is\n+\t     possible that it did a load from an argument slot that was\n+\t     already clobbered. */\n+\t  if (is_sibcall\n+\t      && check_sibcall_argument_overlap (before_arg, &args[i], 0))\n+\t    *sibcall_failure = 1;\n+\n \t  /* Handle calls that pass values in multiple non-contiguous\n \t     locations.  The Irix 6 ABI has examples of this.  */\n \t  if (GET_CODE (reg) == PARALLEL)\n@@ -2015,14 +2031,16 @@ check_sibcall_argument_overlap_1 (x)\n \n /* Scan sequence after INSN if it does not dereference any argument slots\n    we already clobbered by tail call arguments (as noted in stored_args_map\n-   bitmap).  Add stack slots for ARG to stored_args_map bitmap afterwards.\n-   Return nonzero if sequence after INSN dereferences such argument slots,\n-   zero otherwise.  */\n+   bitmap).  If MARK_STORED_ARGS_MAP, add stack slots for ARG to\n+   stored_args_map bitmap afterwards (when ARG is a register MARK_STORED_ARGS_MAP\n+   should be 0).  Return nonzero if sequence after INSN dereferences such argument\n+   slots, zero otherwise.  */\n \n static int\n-check_sibcall_argument_overlap (insn, arg)\n+check_sibcall_argument_overlap (insn, arg, mark_stored_args_map)\n      rtx insn;\n      struct arg_data *arg;\n+     int mark_stored_args_map;\n {\n   int low, high;\n \n@@ -2036,14 +2054,17 @@ check_sibcall_argument_overlap (insn, arg)\n \t&& check_sibcall_argument_overlap_1 (PATTERN (insn)))\n       break;\n \n+  if (mark_stored_args_map)\n+    {\n #ifdef ARGS_GROW_DOWNWARD\n-  low = -arg->slot_offset.constant - arg->size.constant;\n+      low = -arg->slot_offset.constant - arg->size.constant;\n #else\n-  low = arg->slot_offset.constant;\n+      low = arg->slot_offset.constant;\n #endif\n \n-  for (high = low + arg->size.constant; low < high; low++)\n-    SET_BIT (stored_args_map, low);\n+      for (high = low + arg->size.constant; low < high; low++)\n+\tSET_BIT (stored_args_map, low);\n+    }\n   return insn != NULL_RTX;\n }\n \n@@ -2959,7 +2980,7 @@ expand_call (exp, target, ignore)\n \t\t\t       reg_parm_stack_space)\n \t\t|| (pass == 0\n \t\t    && check_sibcall_argument_overlap (before_arg,\n-\t\t\t\t\t\t       &args[i])))\n+\t\t\t\t\t\t       &args[i], 1)))\n \t      sibcall_failure = 1;\n \t  }\n \n@@ -2983,7 +3004,7 @@ expand_call (exp, target, ignore)\n \t\t\t\t reg_parm_stack_space)\n \t\t  || (pass == 0\n \t\t      && check_sibcall_argument_overlap (before_arg,\n-\t\t\t\t\t\t\t &args[i])))\n+\t\t\t\t\t\t\t &args[i], 1)))\n \t\tsibcall_failure = 1;\n \t    }\n \n@@ -3018,7 +3039,8 @@ expand_call (exp, target, ignore)\n       funexp = prepare_call_address (funexp, fndecl, &call_fusage,\n \t\t\t\t     reg_parm_seen, pass == 0);\n \n-      load_register_parameters (args, num_actuals, &call_fusage, flags);\n+      load_register_parameters (args, num_actuals, &call_fusage, flags,\n+\t\t\t\tpass == 0, &sibcall_failure);\n \n       /* Perform postincrements before actually calling the function.  */\n       emit_queue ();"}]}