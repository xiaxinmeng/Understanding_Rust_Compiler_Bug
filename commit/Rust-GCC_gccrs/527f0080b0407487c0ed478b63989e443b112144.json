{"sha": "527f0080b0407487c0ed478b63989e443b112144", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3ZjAwODBiMDQwNzQ4N2MwZWQ0NzhiNjM5ODllNDQzYjExMjE0NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-09T22:28:15Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-09T22:28:15Z"}, "message": "cp-tree.h (begin_switch_stmt): Adjust prototype.\n\n\t* cp-tree.h (begin_switch_stmt): Adjust prototype.\n\t(finish_switch_cond): Likewise.\n\t* parse.y (simple_stmt): Adjust accordingly.\n\t* parse.c: Regenerated.\n\t* pt.c (tsubst_expr): Adjust accordingly.\n\t* semantics.c (expand_cond): New function.\n\t(FINISH_COND): New macro.\n\t(begin_switch_stmt): Build the SWITCH_STMT here.\n\t(finish_switch_stmt_cond): Not here.\n\t(expand_stmt): Adjust calls to begin_switch_stmt and\n\tfinish_switch_cond.  Use expand_cond throughout.\n\nFrom-SVN: r29246", "tree": {"sha": "5eb83d783c84045000af919d00bfe42328a92153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5eb83d783c84045000af919d00bfe42328a92153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/527f0080b0407487c0ed478b63989e443b112144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/527f0080b0407487c0ed478b63989e443b112144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/527f0080b0407487c0ed478b63989e443b112144", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/527f0080b0407487c0ed478b63989e443b112144/comments", "author": null, "committer": null, "parents": [{"sha": "8a79e5cb72647db7aacbb5d1eae29162ccee8549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a79e5cb72647db7aacbb5d1eae29162ccee8549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a79e5cb72647db7aacbb5d1eae29162ccee8549"}], "stats": {"total": 136, "additions": 99, "deletions": 37}, "files": [{"sha": "49c585ddac98332e582c328377363712946abd96", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=527f0080b0407487c0ed478b63989e443b112144", "patch": "@@ -1,5 +1,17 @@\n 1999-09-09  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (begin_switch_stmt): Adjust prototype.\n+\t(finish_switch_cond): Likewise.\n+\t* parse.y (simple_stmt): Adjust accordingly.\n+\t* parse.c: Regenerated.\n+\t* pt.c (tsubst_expr): Adjust accordingly.\n+\t* semantics.c (expand_cond): New function.\n+\t(FINISH_COND): New macro.\n+\t(begin_switch_stmt): Build the SWITCH_STMT here.\n+\t(finish_switch_stmt_cond): Not here.\n+\t(expand_stmt): Adjust calls to begin_switch_stmt and\n+\tfinish_switch_cond.  Use expand_cond throughout.\n+\n \t* dump.c (dequeue_and_dump): Dump types for constants.\n \tDescribe DECL_ARG_TYPE more intuitively.\n \tHandle ARRAY_REF."}, {"sha": "c8fc430a7146396b393bcffe13d974b887306e30", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=527f0080b0407487c0ed478b63989e443b112144", "patch": "@@ -3572,8 +3572,8 @@ extern void finish_for_expr                     PROTO((tree, tree));\n extern void finish_for_stmt                     PROTO((tree, tree));\n extern void finish_break_stmt                   PROTO((void));\n extern void finish_continue_stmt                PROTO((void));\n-extern void begin_switch_stmt                   PROTO((void));\n-extern tree finish_switch_cond                  PROTO((tree));\n+extern tree begin_switch_stmt                   PROTO((void));\n+extern void finish_switch_cond                  PROTO((tree, tree));\n extern void finish_switch_stmt                  PROTO((tree, tree));\n extern void finish_case_label                   PROTO((tree, tree));\n extern void finish_goto_stmt                    PROTO((tree));"}, {"sha": "76c762a2421058877ddd19cfc13b3b0fd3c168e8", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=527f0080b0407487c0ed478b63989e443b112144", "patch": "@@ -7623,11 +7623,11 @@ case 738:\n     break;}\n case 739:\n #line 3277 \"parse.y\"\n-{ begin_switch_stmt (); ;\n+{ yyval.ttype = begin_switch_stmt (); ;\n     break;}\n case 740:\n #line 3279 \"parse.y\"\n-{ yyval.ttype = finish_switch_cond (yyvsp[-1].ttype); ;\n+{ finish_switch_cond (yyvsp[-1].ttype, yyvsp[-3].ttype); ;\n     break;}\n case 741:\n #line 3281 \"parse.y\""}, {"sha": "1b1c8b557e29437bb9dfec25fd3f564abefdd7f9", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=527f0080b0407487c0ed478b63989e443b112144", "patch": "@@ -3274,9 +3274,9 @@ simple_stmt:\n \t  already_scoped_stmt\n                 { finish_for_stmt ($9, $<ttype>2); }\n \t| SWITCH \n-                { begin_switch_stmt (); }\n+                { $<ttype>$ = begin_switch_stmt (); }\n \t    '(' condition ')'\n-                { $<ttype>$ = finish_switch_cond ($4); }\n+                { finish_switch_cond ($4, $<ttype>2); }\n \t  implicitly_scoped_stmt\n                 { finish_switch_stmt ($4, $<ttype>6); }\n \t| CASE expr_no_commas ':'"}, {"sha": "0795a191f1e4c118f7e8b72a6d2561d9368002bc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=527f0080b0407487c0ed478b63989e443b112144", "patch": "@@ -7392,9 +7392,9 @@ tsubst_expr (t, args, complain, in_decl)\n \ttree val;\n \n \tlineno = STMT_LINENO (t);\n-\tbegin_switch_stmt ();\n+\tstmt = begin_switch_stmt ();\n \tval = tsubst_expr (SWITCH_COND (t), args, complain, in_decl);\n-\tstmt = finish_switch_cond (val);\n+\tfinish_switch_cond (val, stmt);\n \ttsubst_expr (SWITCH_BODY (t), args, complain, in_decl);\n \tfinish_switch_stmt (val, stmt);\n       }"}, {"sha": "4d6a234f238e2a9fdf122d4b8138ef1caf02ccae", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 64, "deletions": 29, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527f0080b0407487c0ed478b63989e443b112144/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=527f0080b0407487c0ed478b63989e443b112144", "patch": "@@ -44,6 +44,7 @@\n static void expand_stmts PROTO((tree));\n static void do_pushlevel PROTO((void));\n static tree do_poplevel PROTO((void));\n+static tree expand_cond PROTO((tree));\n \n /* When parsing a template, LAST_TREE contains the last statement\n    parsed.  These are chained together through the TREE_CHAIN field,\n@@ -64,6 +65,16 @@ static tree do_poplevel PROTO((void));\n #define RECHAIN_STMTS_FROM_CHAIN(stmt, substmt)\t\\\n   RECHAIN_STMTS (stmt, substmt, TREE_CHAIN (stmt))\n \n+/* Finish processing the COND, the SUBSTMT condition for STMT.  */\n+\n+#define FINISH_COND(cond, stmt, substmt) \t\\\n+  do {\t\t\t\t\t\t\\\n+    if (last_tree != stmt)\t\t\t\\\n+      RECHAIN_STMTS_FROM_LAST (stmt, substmt);\t\\\n+    else\t\t\t\t\t\\\n+      substmt = cond;\t\t\t\t\\\n+  } while (0)\n+  \n /* Finish an expression-statement, whose EXPRESSION is as indicated.  */\n \n void \n@@ -492,49 +503,51 @@ finish_continue_stmt ()\n     cp_error (\"continue statement not within a loop\");   \n }\n \n-/* Begin a switch-statement.  */\n+/* Begin a switch-statement.  Returns a new SWITCH_STMT if\n+   appropriate.  */\n \n-void\n+tree\n begin_switch_stmt ()\n {\n+  tree r;\n+\n+  if (building_stmt_tree ())\n+    {\n+      r = build_min_nt (SWITCH_STMT, NULL_TREE, NULL_TREE);\n+      add_tree (r);\n+    }\n+  else\n+    r = NULL_TREE;\n+\n   do_pushlevel ();\n+\n+  return r;\n }\n \n-/* Finish the cond of a switch-statement.  Returns a new\n-   SWITCH_STMT if appropriate.  */ \n+/* Finish the cond of a switch-statement.  */\n \n-tree\n-finish_switch_cond (cond)\n+void\n+finish_switch_cond (cond, switch_stmt)\n      tree cond;\n+     tree switch_stmt;\n {\n-  tree r;\n-\n   if (building_stmt_tree ())\n-    {\n-      r = build_min_nt (SWITCH_STMT, cond, NULL_TREE);\n-      add_tree (r);\n-    }\n+    FINISH_COND (cond, switch_stmt, SWITCH_COND (switch_stmt));\n   else if (cond != error_mark_node)\n     {\n       emit_line_note (input_filename, lineno);\n       c_expand_start_case (cond);\n-      r = NULL_TREE;\n     }\n   else\n-    {\n-      /* The code is in error, but we don't want expand_end_case to\n-         crash. */\n-      c_expand_start_case (boolean_false_node);\n-      r = NULL_TREE;\n-    }\n+    /* The code is in error, but we don't want expand_end_case to\n+       crash. */\n+    c_expand_start_case (boolean_false_node);\n \n   push_switch ();\n \n   /* Don't let the tree nodes for COND be discarded by\n      clear_momentary during the parsing of the next stmt.  */\n   push_momentary ();\n-\n-  return r;\n }\n \n /* Finish the body of a switch-statement, which may be given by\n@@ -1963,6 +1976,24 @@ finish_stmt_tree (fn)\n   DECL_SAVED_TREE (fn) = TREE_CHAIN (DECL_SAVED_TREE (fn));\n }\n \n+/* Some statements, like for-statements or if-statements, require a\n+   condition.  This condition can be a declaration.  If T is such a\n+   declaration it is processed, and an expression appropriate to use\n+   as the condition is returned.  Otherwise, T itself is returned.  */\n+\n+static tree\n+expand_cond (t)\n+     tree t;\n+{\n+  if (t && TREE_CODE (t) == DECL_STMT)\n+    {\n+      expand_stmt (t);\n+      return convert_from_reference (DECL_STMT_DECL (t));\n+    }\n+  else \n+    return t;\n+}\n+\n /* Generate RTL for the chain of statements T.  */\n \n static void \n@@ -2038,7 +2069,7 @@ expand_stmt (t)\n \tfor (tmp = FOR_INIT_STMT (t); tmp; tmp = TREE_CHAIN (tmp))\n \t  expand_stmt (tmp);\n \tfinish_for_init_stmt (NULL_TREE);\n-\tfinish_for_cond (FOR_COND (t), NULL_TREE);\n+\tfinish_for_cond (expand_cond (FOR_COND (t)), NULL_TREE);\n \ttmp = FOR_EXPR (t);\n \tfinish_for_expr (tmp, NULL_TREE);\n \texpand_stmt (FOR_BODY (t));\n@@ -2050,7 +2081,7 @@ expand_stmt (t)\n       {\n \tlineno = STMT_LINENO (t);\n \tbegin_while_stmt ();\n-\tfinish_while_stmt_cond (WHILE_COND (t), NULL_TREE);\n+\tfinish_while_stmt_cond (expand_cond (WHILE_COND (t)), NULL_TREE);\n \texpand_stmt (WHILE_BODY (t));\n \tfinish_while_stmt (NULL_TREE);\n       }\n@@ -2069,7 +2100,7 @@ expand_stmt (t)\n     case IF_STMT:\n       lineno = STMT_LINENO (t);\n       begin_if_stmt ();\n-      finish_if_stmt_cond (IF_COND (t), NULL_TREE);\n+      finish_if_stmt_cond (expand_cond (IF_COND (t)), NULL_TREE);\n       if (THEN_CLAUSE (t))\n \t{\n \t  expand_stmt (THEN_CLAUSE (t));\n@@ -2102,12 +2133,16 @@ expand_stmt (t)\n       break;\n \n     case SWITCH_STMT:\n-      lineno = STMT_LINENO (t);\n-      begin_switch_stmt ();\n-      finish_switch_cond (SWITCH_COND (t));\n-      if (TREE_OPERAND (t, 1))\n+      {\n+\ttree cond;\n+\n+\tlineno = STMT_LINENO (t);\n+\tbegin_switch_stmt ();\n+\tcond = expand_cond (SWITCH_COND (t));\n+\tfinish_switch_cond (cond, NULL_TREE);\n \texpand_stmt (SWITCH_BODY (t));\n-      finish_switch_stmt (SWITCH_COND (t), NULL_TREE);\n+\tfinish_switch_stmt (cond, NULL_TREE);\n+      }\n       break;\n \n     case CASE_LABEL:"}, {"sha": "51d2de14bdd9fa71f6c768121ecb26066d2d7e79", "filename": "gcc/testsuite/g++.old-deja/g++.pt/switch1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527f0080b0407487c0ed478b63989e443b112144/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fswitch1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527f0080b0407487c0ed478b63989e443b112144/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fswitch1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fswitch1.C?ref=527f0080b0407487c0ed478b63989e443b112144", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+template <class T>\n+void f ()\n+{\n+  int i;\n+  \n+  switch (int i = 3) {\n+  }\n+}\n+\n+template void f<int>();\n+\n+"}]}