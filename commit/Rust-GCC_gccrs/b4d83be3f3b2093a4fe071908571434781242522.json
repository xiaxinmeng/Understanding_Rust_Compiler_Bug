{"sha": "b4d83be3f3b2093a4fe071908571434781242522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRkODNiZTNmM2IyMDkzYTRmZTA3MTkwODU3MTQzNDc4MTI0MjUyMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-01-17T18:06:28Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-01-17T18:06:28Z"}, "message": "rx: Cleanup flags generation.\n\nAll arithmetic should only clobber the flags by default;\nsetting the flags to a useful value should be done by a\nseparate pattern.\n\nFrom-SVN: r168924", "tree": {"sha": "d9ee7ee1e10fd9bb090d54f2b263440f4ac821f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9ee7ee1e10fd9bb090d54f2b263440f4ac821f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4d83be3f3b2093a4fe071908571434781242522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d83be3f3b2093a4fe071908571434781242522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d83be3f3b2093a4fe071908571434781242522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d83be3f3b2093a4fe071908571434781242522/comments", "author": null, "committer": null, "parents": [{"sha": "d0acb939c929dd8ad0e4cbfeca1f0c49cb697c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0acb939c929dd8ad0e4cbfeca1f0c49cb697c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0acb939c929dd8ad0e4cbfeca1f0c49cb697c72"}], "stats": {"total": 347, "additions": 278, "deletions": 69}, "files": [{"sha": "524a605c9290b00d99ee47d257206d65e6e0337e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d83be3f3b2093a4fe071908571434781242522/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d83be3f3b2093a4fe071908571434781242522/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4d83be3f3b2093a4fe071908571434781242522", "patch": "@@ -1,5 +1,17 @@\n 2011-01-17  Richard Henderson  <rth@redhat.com>\n \n+\t* config/rx/rx.c (rx_match_ccmode): New.\n+\t* config/rx/rx-protos.h: Update.\n+\t* config/rx/rx.md (abssi2): Clobber, don't set flags.\n+\t(addsi3, adddi3, andsi3, negsi2, one_cmplsi2, iorsi3): Likewise.\n+\t(rotlsi3, rotrsi3, ashrsi3, lshrsi3, ashlsi3): Likewise.\n+\t(subsi3, subdi3, xorsi3, addsf3, divsf3, mulsf3, subsf3): Likewise.\n+\t(fix_truncsfsi2, floatsisf2): Likewise.\n+\t(*abssi2_flags, *addsi3_flags, *andsi3_flags, *negsi2_flags): New.\n+\t(*one_cmplsi2_flags, *iorsi3_flags, *rotlsi3_flags): New.\n+\t(*rotrsi3_flags, *ashrsi3_flags, *lshrsi3_flags, *ashlsi3_flags): New.\n+\t(*subsi3_flags, *xorsi3_flags): New.\n+\n \t* config/rx/rx.md (cstoresf4, *cstoresf4): New patterns.\n \n \t* config/rx/rx.c (rx_print_operand): Remove workaround for"}, {"sha": "9bb76b2afe74b979d60815fc33e5920ebec7d2b0", "filename": "gcc/config/rx/rx-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d83be3f3b2093a4fe071908571434781242522/gcc%2Fconfig%2Frx%2Frx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d83be3f3b2093a4fe071908571434781242522/gcc%2Fconfig%2Frx%2Frx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-protos.h?ref=b4d83be3f3b2093a4fe071908571434781242522", "patch": "@@ -42,6 +42,7 @@ extern void\t\trx_notice_update_cc (rtx body, rtx insn);\n extern void\t\trx_split_cbranch (Mmode, Rcode, rtx, rtx, rtx);\n extern bool\t\trx_split_fp_compare (Rcode, Rcode *, Rcode *);\n extern Mmode\t\trx_select_cc_mode (Rcode, rtx, rtx);\n+extern bool\t\trx_match_ccmode (rtx, Mmode);\n #endif\n \n #endif /* GCC_RX_PROTOS_H */"}, {"sha": "35ef862350aad846c609a5c1a07a993fad683dec", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d83be3f3b2093a4fe071908571434781242522/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d83be3f3b2093a4fe071908571434781242522/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=b4d83be3f3b2093a4fe071908571434781242522", "patch": "@@ -2755,6 +2755,34 @@ rx_split_cbranch (enum machine_mode cc_mode, enum rtx_code cmp1,\n   emit_jump_insn (x);\n }\n \n+/* A helper function for matching parallels that set the flags.  */\n+\n+bool\n+rx_match_ccmode (rtx insn, enum machine_mode cc_mode)\n+{\n+  rtx op1, flags;\n+  enum machine_mode flags_mode;\n+\n+  gcc_checking_assert (XVECLEN (PATTERN (insn), 0) == 2);\n+\n+  op1 = XVECEXP (PATTERN (insn), 0, 1);\n+  gcc_checking_assert (GET_CODE (SET_SRC (op1)) == COMPARE);\n+\n+  flags = SET_DEST (op1);\n+  flags_mode = GET_MODE (flags);\n+\n+  if (GET_MODE (SET_SRC (op1)) != flags_mode)\n+    return false;\n+  if (GET_MODE_CLASS (flags_mode) != MODE_CC)\n+    return false;\n+\n+  /* Ensure that the mode of FLAGS is compatible with CC_MODE.  */\n+  if (flags_from_mode (flags_mode) & ~flags_from_mode (cc_mode))\n+    return false;\n+\n+  return true;\n+}\n+\n \f\n #undef  TARGET_FUNCTION_VALUE\n #define TARGET_FUNCTION_VALUE\t\trx_function_value"}, {"sha": "e2cc07a2774e32c2c57bdbbd7d9f58552be409fb", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 237, "deletions": 69, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d83be3f3b2093a4fe071908571434781242522/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d83be3f3b2093a4fe071908571434781242522/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=b4d83be3f3b2093a4fe071908571434781242522", "patch": "@@ -915,23 +915,32 @@\n (define_insn \"abssi2\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=r,r\")\n         (abs:SI (match_operand:SI 1 \"register_operand\"  \"0,r\")))\n-   (set (reg:CC_ZSO CC_REG)\n-\t(compare:CC_ZSO (abs:SI (match_dup 1))\n-\t\t\t(const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"@\n   abs\\t%0\n   abs\\t%1, %0\"\n   [(set_attr \"length\" \"2,3\")]\n )\n \n+(define_insn \"*abssi2_flags\"\n+  [(set (match_operand:SI         0 \"register_operand\" \"=r,r\")\n+        (abs:SI (match_operand:SI 1 \"register_operand\"  \"0,r\")))\n+   (set (reg CC_REG)\n+\t(compare (abs:SI (match_dup 1))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSOmode)\"\n+  \"@\n+  abs\\t%0\n+  abs\\t%1, %0\"\n+  [(set_attr \"length\" \"2,3\")]\n+)\n+\n (define_insn \"addsi3\"\n   [(set (match_operand:SI          0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r,r,r,r,r,r\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,0,r,r,r,r,r,r,0\")\n \t\t (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,NEGint4,Sint08,Sint16,Sint24,i,0,r,Sint08,Sint16,Sint24,i,Q\")))\n-   (set (reg:CC_ZSC CC_REG) ;; See subsi3\n-\t(compare:CC_ZSC (plus:SI (match_dup 1) (match_dup 2))\n-\t\t\t(const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"@\n   add\\t%2, %0\n@@ -952,14 +961,39 @@\n    (set_attr \"length\"   \"2,2,2,3,4,5,6,2,3,3,4,5,6,5\")]\n )\n \n+(define_insn \"*addsi3_flags\"\n+  [(set (match_operand:SI          0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r,r,r,r,r,r\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,0,r,r,r,r,r,r,0\")\n+\t\t (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,NEGint4,Sint08,Sint16,Sint24,i,0,r,Sint08,Sint16,Sint24,i,Q\")))\n+   (set (reg CC_REG)\n+\t(compare (plus:SI (match_dup 1) (match_dup 2))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSCmode)\"\n+  \"@\n+  add\\t%2, %0\n+  add\\t%2, %0\n+  sub\\t%N2, %0\n+  add\\t%2, %0\n+  add\\t%2, %0\n+  add\\t%2, %0\n+  add\\t%2, %0\n+  add\\t%1, %0\n+  add\\t%2, %1, %0\n+  add\\t%2, %1, %0\n+  add\\t%2, %1, %0\n+  add\\t%2, %1, %0\n+  add\\t%2, %1, %0\n+  add\\t%Q2, %0\"\n+  [(set_attr \"timings\" \"11,11,11,11,11,11,11,11,11,11,11,11,11,33\")\n+   (set_attr \"length\"   \"2,2,2,3,4,5,6,2,3,3,4,5,6,5\")]\n+)\n+\n (define_insn \"adddi3\"\n   [(set (match_operand:DI          0 \"register_operand\" \"=r,r,r,r,r,r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"%0,0,0,0,0,0\")\n \t\t (match_operand:DI 2 \"rx_source_operand\"\n \t\t\t\t   \"r,Sint08,Sint16,Sint24,i,Q\")))\n-   (set (reg:CC_ZSC CC_REG) ;; See subsi3\n-\t(compare:CC_ZSC (plus:DI (match_dup 1) (match_dup 2))\n-\t\t\t(const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"add\\t%L2, %L0\\n\\tadc\\t%H2, %H0\"\n   [(set_attr \"timings\" \"22,22,22,22,22,44\")\n@@ -970,9 +1004,7 @@\n   [(set (match_operand:SI         0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r\")\n \t(and:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,r,r,0\")\n \t\t(match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,Sint08,Sint16,Sint24,i,0,r,Q\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (and:SI (match_dup 1) (match_dup 2))\n-\t\t       (const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"@\n   and\\t%2, %0\n@@ -988,6 +1020,28 @@\n    (set_attr \"length\" \"2,2,3,4,5,6,2,5,5\")]\n )\n \n+(define_insn \"*andsi3_flags\"\n+  [(set (match_operand:SI         0 \"register_operand\"  \"=r,r,r,r,r,r,r,r,r\")\n+\t(and:SI (match_operand:SI 1 \"register_operand\"  \"%0,0,0,0,0,0,r,r,0\")\n+\t\t(match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,Sint08,Sint16,Sint24,i,0,r,Q\")))\n+   (set (reg CC_REG)\n+\t(compare (and:SI (match_dup 1) (match_dup 2))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n+  \"@\n+  and\\t%2, %0\n+  and\\t%2, %0\n+  and\\t%2, %0\n+  and\\t%2, %0\n+  and\\t%2, %0\n+  and\\t%2, %0\n+  and\\t%1, %0\n+  and\\t%2, %1, %0\n+  and\\t%Q2, %0\"\n+  [(set_attr \"timings\" \"11,11,11,11,11,11,11,33,33\")\n+   (set_attr \"length\" \"2,2,3,4,5,6,2,5,5\")]\n+)\n+\n ;; Byte swap (single 32-bit value).\n (define_insn \"bswapsi2\"\n   [(set (match_operand:SI           0 \"register_operand\" \"+r\")\n@@ -1107,12 +1161,23 @@\n (define_insn \"negsi2\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=r,r\")\n         (neg:SI (match_operand:SI 1 \"register_operand\"  \"0,r\")))\n-   (set (reg:CC CC_REG)\n-\t(compare:CC (neg:SI (match_dup 1))\n-\t\t    (const_int 0)))]\n-  ;; The NEG instruction does not comply with -fwrapv semantics.\n-  ;; See gcc.c-torture/execute/pr22493-1.c for an example of this.\n-  \"! flag_wrapv\"\n+   (clobber (reg:CC CC_REG))]\n+  \"\"\n+  \"@\n+  neg\\t%0\n+  neg\\t%1, %0\"\n+  [(set_attr \"length\" \"2,3\")]\n+)\n+\n+;; Note that the O and C flags are not set as per a normal compare,\n+;; and thus are unusable in that context.\n+(define_insn \"*negsi2_flags\"\n+  [(set (match_operand:SI         0 \"register_operand\" \"=r,r\")\n+        (neg:SI (match_operand:SI 1 \"register_operand\"  \"0,r\")))\n+   (set (reg CC_REG)\n+\t(compare (neg:SI (match_dup 1))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n   \"@\n   neg\\t%0\n   neg\\t%1, %0\"\n@@ -1122,23 +1187,32 @@\n (define_insn \"one_cmplsi2\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=r,r\")\n \t(not:SI (match_operand:SI 1 \"register_operand\"  \"0,r\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (not:SI (match_dup 1))\n-\t\t       (const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"@\n   not\\t%0\n   not\\t%1, %0\"\n   [(set_attr \"length\" \"2,3\")]\n )\n \n+(define_insn \"*one_cmplsi2_flags\"\n+  [(set (match_operand:SI         0 \"register_operand\" \"=r,r\")\n+\t(not:SI (match_operand:SI 1 \"register_operand\"  \"0,r\")))\n+   (set (reg CC_REG)\n+\t(compare (not:SI (match_dup 1))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n+  \"@\n+  not\\t%0\n+  not\\t%1, %0\"\n+  [(set_attr \"length\" \"2,3\")]\n+)\n+\n (define_insn \"iorsi3\"\n   [(set (match_operand:SI         0 \"register_operand\" \"=r,r,r,r,r,r,r,r,r\")\n \t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,r,r,0\")\n \t        (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,Sint08,Sint16,Sint24,i,0,r,Q\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (ior:SI (match_dup 1) (match_dup 2))\n-\t\t       (const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"@\n   or\\t%2, %0\n@@ -1154,37 +1228,77 @@\n    (set_attr \"length\"  \"2,2,3,4,5,6,2,3,5\")]\n )\n \n+(define_insn \"*iorsi3_flags\"\n+  [(set (match_operand:SI         0 \"register_operand\" \"=r,r,r,r,r,r,r,r,r\")\n+\t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,r,r,0\")\n+\t        (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,Sint08,Sint16,Sint24,i,0,r,Q\")))\n+   (set (reg CC_REG)\n+\t(compare (ior:SI (match_dup 1) (match_dup 2))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n+  \"@\n+  or\\t%2, %0\n+  or\\t%2, %0\n+  or\\t%2, %0\n+  or\\t%2, %0\n+  or\\t%2, %0\n+  or\\t%Q2, %0\n+  or\\t%1, %0\n+  or\\t%2, %1, %0\n+  or\\t%Q2, %0\"\n+  [(set_attr \"timings\" \"11,11,11,11,11,11,11,11,33\")\n+   (set_attr \"length\"  \"2,2,3,4,5,6,2,3,5\")]\n+)\n+\n (define_insn \"rotlsi3\"\n   [(set (match_operand:SI            0 \"register_operand\" \"=r\")\n \t(rotate:SI (match_operand:SI 1 \"register_operand\"  \"0\")\n \t\t   (match_operand:SI 2 \"rx_shift_operand\" \"rn\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (rotate:SI (match_dup 1) (match_dup 2))\n-\t\t       (const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"rotl\\t%2, %0\"\n   [(set_attr \"length\" \"3\")]\n )\n \n+(define_insn \"*rotlsi3_flags\"\n+  [(set (match_operand:SI            0 \"register_operand\" \"=r\")\n+\t(rotate:SI (match_operand:SI 1 \"register_operand\"  \"0\")\n+\t\t   (match_operand:SI 2 \"rx_shift_operand\" \"rn\")))\n+   (set (reg CC_REG)\n+\t(compare (rotate:SI (match_dup 1) (match_dup 2))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n+  \"rotl\\t%2, %0\"\n+  [(set_attr \"length\" \"3\")]\n+)\n+\n (define_insn \"rotrsi3\"\n   [(set (match_operand:SI              0 \"register_operand\" \"=r\")\n \t(rotatert:SI (match_operand:SI 1 \"register_operand\"  \"0\")\n \t\t     (match_operand:SI 2 \"rx_shift_operand\" \"rn\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (rotatert:SI (match_dup 1) (match_dup 2))\n-\t\t       (const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"rotr\\t%2, %0\"\n   [(set_attr \"length\" \"3\")]\n )\n \n+(define_insn \"*rotrsi3_flags\"\n+  [(set (match_operand:SI              0 \"register_operand\" \"=r\")\n+\t(rotatert:SI (match_operand:SI 1 \"register_operand\"  \"0\")\n+\t\t     (match_operand:SI 2 \"rx_shift_operand\" \"rn\")))\n+   (set (reg CC_REG)\n+\t(compare (rotatert:SI (match_dup 1) (match_dup 2))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n+  \"rotr\\t%2, %0\"\n+  [(set_attr \"length\" \"3\")]\n+)\n+\n (define_insn \"ashrsi3\"\n   [(set (match_operand:SI              0 \"register_operand\" \"=r,r,r\")\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n \t\t     (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (ashiftrt:SI (match_dup 1) (match_dup 2))\n-\t\t       (const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"@\n   shar\\t%2, %0\n@@ -1193,13 +1307,26 @@\n   [(set_attr \"length\" \"3,2,3\")]\n )\n \n+(define_insn \"*ashrsi3_flags\"\n+  [(set (match_operand:SI              0 \"register_operand\" \"=r,r,r\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n+\t\t     (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\")))\n+   (set (reg CC_REG)\n+\t(compare (ashiftrt:SI (match_dup 1) (match_dup 2))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n+  \"@\n+  shar\\t%2, %0\n+  shar\\t%2, %0\n+  shar\\t%2, %1, %0\"\n+  [(set_attr \"length\" \"3,2,3\")]\n+)\n+\n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI              0 \"register_operand\" \"=r,r,r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n \t\t     (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (lshiftrt:SI (match_dup 1) (match_dup 2))\n-\t\t       (const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"@\n   shlr\\t%2, %0\n@@ -1208,13 +1335,26 @@\n   [(set_attr \"length\" \"3,2,3\")]\n )\n \n+(define_insn \"*lshrsi3_flags\"\n+  [(set (match_operand:SI              0 \"register_operand\" \"=r,r,r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n+\t\t     (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\")))\n+   (set (reg CC_REG)\n+\t(compare (lshiftrt:SI (match_dup 1) (match_dup 2))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n+  \"@\n+  shlr\\t%2, %0\n+  shlr\\t%2, %0\n+  shlr\\t%2, %1, %0\"\n+  [(set_attr \"length\" \"3,2,3\")]\n+)\n+\n (define_insn \"ashlsi3\"\n   [(set (match_operand:SI            0 \"register_operand\" \"=r,r,r\")\n \t(ashift:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n \t           (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (ashift:SI (match_dup 1) (match_dup 2))\n-\t\t       (const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"@\n   shll\\t%2, %0\n@@ -1223,16 +1363,26 @@\n   [(set_attr \"length\" \"3,2,3\")]\n )\n \n+(define_insn \"*ashlsi3_flags\"\n+  [(set (match_operand:SI            0 \"register_operand\" \"=r,r,r\")\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\"  \"0,0,r\")\n+\t           (match_operand:SI 2 \"rx_shift_operand\"  \"r,n,n\")))\n+   (set (reg CC_REG)\n+\t(compare (ashift:SI (match_dup 1) (match_dup 2))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n+  \"@\n+  shll\\t%2, %0\n+  shll\\t%2, %0\n+  shll\\t%2, %1, %0\"\n+  [(set_attr \"length\" \"3,2,3\")]\n+)\n+\n (define_insn \"subsi3\"\n   [(set (match_operand:SI           0 \"register_operand\" \"=r,r,r,r,r\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\"  \"0,0,0,r,0\")\n \t\t  (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,n,r,Q\")))\n-   (set (reg:CC_ZSC CC_REG)\n-\t;; Note - we do not acknowledge that the SUB instruction sets the Overflow\n-\t;; flag because its interpretation is different from comparing the result\n-\t;; against zero.  Compile and run gcc.c-torture/execute/cmpsi-1.c to see this.\n-\t(compare:CC_ZSC (minus:SI (match_dup 1) (match_dup 2))\n-\t\t\t(const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"@\n   sub\\t%2, %0\n@@ -1244,13 +1394,31 @@\n    (set_attr \"length\" \"2,2,6,3,5\")]\n )\n \n+;; Note that the O flag is set as if (compare op1 op2) not for\n+;; what is described here, (compare op0 0).\n+(define_insn \"*subsi3_flags\"\n+  [(set (match_operand:SI           0 \"register_operand\" \"=r,r,r,r,r\")\n+\t(minus:SI (match_operand:SI 1 \"register_operand\"  \"0,0,0,r,0\")\n+\t\t  (match_operand:SI 2 \"rx_source_operand\" \"r,Uint04,n,r,Q\")))\n+   (set (reg CC_REG)\n+\t(compare (minus:SI (match_dup 1) (match_dup 2))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSCmode)\"\n+  \"@\n+  sub\\t%2, %0\n+  sub\\t%2, %0\n+  add\\t%N2, %0\n+  sub\\t%2, %1, %0\n+  sub\\t%Q2, %0\"\n+  [(set_attr \"timings\" \"11,11,11,11,33\")\n+   (set_attr \"length\" \"2,2,6,3,5\")]\n+)\n+\n (define_insn \"subdi3\"\n   [(set (match_operand:DI           0 \"register_operand\" \"=r,r\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\"  \"0,0\")\n \t\t  (match_operand:DI 2 \"rx_source_operand\" \"r,Q\")))\n-   (set (reg:CC_ZSC CC_REG) ;; See subsi3\n-\t(compare:CC_ZSC (minus:DI (match_dup 1) (match_dup 2))\n-\t\t\t(const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"sub\\t%L2, %L0\\n\\tsbb\\t%H2, %H0\"\n   [(set_attr \"timings\" \"22,44\")\n@@ -1262,24 +1430,34 @@\n \t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0\")\n \t        (match_operand:SI 2 \"rx_source_operand\"\n \t\t\t\t  \"r,Sint08,Sint16,Sint24,i,Q\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (xor:SI (match_dup 1) (match_dup 2))\n-\t\t       (const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n   \"xor\\t%Q2, %0\"\n   [(set_attr \"timings\" \"11,11,11,11,11,33\")\n    (set_attr \"length\" \"3,4,5,6,7,6\")]\n )\n+\n+(define_insn \"*xorsi3_flags\"\n+  [(set (match_operand:SI         0 \"register_operand\" \"=r,r,r,r,r,r\")\n+\t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0\")\n+\t        (match_operand:SI 2 \"rx_source_operand\"\n+\t\t\t\t  \"r,Sint08,Sint16,Sint24,i,Q\")))\n+   (set (reg CC_REG)\n+\t(compare (xor:SI (match_dup 1) (match_dup 2))\n+\t\t (const_int 0)))]\n+  \"reload_completed && rx_match_ccmode (insn, CC_ZSmode)\"\n+  \"xor\\t%Q2, %0\"\n+  [(set_attr \"timings\" \"11,11,11,11,11,33\")\n+   (set_attr \"length\" \"3,4,5,6,7,6\")]\n+)\n \f\n ;; Floating Point Instructions\n \n (define_insn \"addsf3\"\n   [(set (match_operand:SF          0 \"register_operand\"  \"=r,r,r\")\n \t(plus:SF (match_operand:SF 1 \"register_operand\"  \"%0,0,0\")\n \t\t (match_operand:SF 2 \"rx_source_operand\"  \"r,F,Q\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (plus:SF (match_dup 1) (match_dup 2))\n-\t\t\t(const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"ALLOW_RX_FPU_INSNS\"\n   \"fadd\\t%2, %0\"\n   [(set_attr \"timings\" \"44,44,66\")\n@@ -1290,9 +1468,7 @@\n   [(set (match_operand:SF         0 \"register_operand\" \"=r,r,r\")\n \t(div:SF (match_operand:SF 1 \"register_operand\"  \"0,0,0\")\n \t\t(match_operand:SF 2 \"rx_source_operand\" \"r,F,Q\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (div:SF (match_dup 1) (match_dup 2))\n-\t\t\t(const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"ALLOW_RX_FPU_INSNS\"\n   \"fdiv\\t%2, %0\"\n   [(set_attr \"timings\" \"1616,1616,1818\")\n@@ -1303,9 +1479,7 @@\n   [(set (match_operand:SF          0 \"register_operand\" \"=r,r,r\")\n \t(mult:SF (match_operand:SF 1 \"register_operand\" \"%0,0,0\")\n \t\t(match_operand:SF  2 \"rx_source_operand\" \"r,F,Q\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (mult:SF (match_dup 1) (match_dup 2))\n-\t\t\t(const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"ALLOW_RX_FPU_INSNS\"\n   \"fmul\\t%2, %0\"\n   [(set_attr \"timings\" \"33,33,55\")\n@@ -1316,9 +1490,7 @@\n   [(set (match_operand:SF           0 \"register_operand\" \"=r,r,r\")\n \t(minus:SF (match_operand:SF 1 \"register_operand\"  \"0,0,0\")\n \t\t  (match_operand:SF 2 \"rx_source_operand\" \"r,F,Q\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (minus:SF (match_dup 1) (match_dup 2))\n-\t\t       (const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"ALLOW_RX_FPU_INSNS\"\n   \"fsub\\t%Q2, %0\"\n   [(set_attr \"timings\" \"44,44,66\")\n@@ -1328,9 +1500,7 @@\n (define_insn \"fix_truncsfsi2\"\n   [(set (match_operand:SI         0 \"register_operand\"  \"=r,r\")\n \t(fix:SI (match_operand:SF 1 \"rx_compare_operand\" \"r,Q\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (fix:SI (match_dup 1))\n-\t\t       (const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"ALLOW_RX_FPU_INSNS\"\n   \"ftoi\\t%Q1, %0\"\n   [(set_attr \"timings\" \"22,44\")\n@@ -1340,9 +1510,7 @@\n (define_insn \"floatsisf2\"\n   [(set (match_operand:SF           0 \"register_operand\"  \"=r,r\")\n \t(float:SF (match_operand:SI 1 \"rx_compare_operand\" \"r,Q\")))\n-   (set (reg:CC_ZS CC_REG)\n-\t(compare:CC_ZS (float:SF (match_dup 1))\n-\t\t\t(const_int 0)))]\n+   (clobber (reg:CC CC_REG))]\n   \"ALLOW_RX_FPU_INSNS\"\n   \"itof\\t%Q1, %0\"\n   [(set_attr \"timings\" \"22,44\")"}]}