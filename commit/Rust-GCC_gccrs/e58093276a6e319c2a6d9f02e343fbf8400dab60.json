{"sha": "e58093276a6e319c2a6d9f02e343fbf8400dab60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU4MDkzMjc2YTZlMzE5YzJhNmQ5ZjAyZTM0M2ZiZjg0MDBkYWI2MA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-19T18:02:57Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-22T12:51:59Z"}, "message": "Only call vrp_visit_cond_stmt if range_of_stmt doesn't resolve to a const.\n\nEevntually all functionality will be subsumed.  Until then, call it only\nif needed.\n\n\tgcc/\n\tPR tree-optimization/101496\n\t* vr-values.c (simplify_using_ranges::fold_cond): Call range_of_stmt\n\tfirst, then vrp_visit_cond_Stmt.\n\n\tgcc/testsuite\n\t* gcc.dg/pr101496.c: New.", "tree": {"sha": "0eea3cdb0858c34d8b035492f47977a5563f74fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0eea3cdb0858c34d8b035492f47977a5563f74fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e58093276a6e319c2a6d9f02e343fbf8400dab60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58093276a6e319c2a6d9f02e343fbf8400dab60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e58093276a6e319c2a6d9f02e343fbf8400dab60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e58093276a6e319c2a6d9f02e343fbf8400dab60/comments", "author": null, "committer": null, "parents": [{"sha": "a6291d88d5b6c17d41950e21d7d452f7f0f73020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6291d88d5b6c17d41950e21d7d452f7f0f73020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6291d88d5b6c17d41950e21d7d452f7f0f73020"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "091d4ad8f26cf6d4642e055085282571bacdcd2f", "filename": "gcc/testsuite/gcc.dg/pr101496.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58093276a6e319c2a6d9f02e343fbf8400dab60/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101496.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58093276a6e319c2a6d9f02e343fbf8400dab60/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101496.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101496.c?ref=e58093276a6e319c2a6d9f02e343fbf8400dab60", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/101496 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 \" } */\n+\n+int c_1, li_2, us_3, func_14_s_5;\n+\n+void func_14() {\n+  {\n+    unsigned uli_8 = 0;\n+  lbl1806324B:\n+    if (uli_8 /= us_3 |= func_14_s_5 < 0 | func_14_s_5 != c_1) {\n+      uli_8 += c_1 >= us_3;\n+      if (uli_8)\n+        ;\n+      else\n+        li_2 &&func_14_s_5 <= c_1 ?: 0;\n+      unsigned *ptr_9 = &uli_8;\n+    }\n+  }\n+  goto lbl1806324B;\n+}\n+"}, {"sha": "c999ca80f03221e8666537c9ebcd172367004561", "filename": "gcc/vr-values.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e58093276a6e319c2a6d9f02e343fbf8400dab60/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e58093276a6e319c2a6d9f02e343fbf8400dab60/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=e58093276a6e319c2a6d9f02e343fbf8400dab60", "patch": "@@ -3460,11 +3460,6 @@ range_fits_type_p (const value_range *vr,\n bool\n simplify_using_ranges::fold_cond (gcond *cond)\n {\n-  /* ?? vrp_folder::fold_predicate_in() is a superset of this.  At\n-     some point we should merge all variants of this code.  */\n-  edge taken_edge;\n-  vrp_visit_cond_stmt (cond, &taken_edge);\n-\n   int_range_max r;\n   if (query->range_of_stmt (r, cond) && r.singleton_p ())\n     {\n@@ -3475,30 +3470,39 @@ simplify_using_ranges::fold_cond (gcond *cond)\n \n       if (r.zero_p ())\n \t{\n-\t  gcc_checking_assert (!taken_edge\n-\t\t\t       || taken_edge->flags & EDGE_FALSE_VALUE);\n-\t  if (dump_file && (dump_flags & TDF_DETAILS) && !taken_edge)\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file, \"\\nPredicate evaluates to: 0\\n\");\n \t  gimple_cond_make_false (cond);\n \t}\n       else\n \t{\n-\t  gcc_checking_assert (!taken_edge\n-\t\t\t       || taken_edge->flags & EDGE_TRUE_VALUE);\n-\t  if (dump_file && (dump_flags & TDF_DETAILS) && !taken_edge)\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    fprintf (dump_file, \"\\nPredicate evaluates to: 1\\n\");\n \t  gimple_cond_make_true (cond);\n \t}\n       update_stmt (cond);\n       return true;\n     }\n \n+  /* ?? vrp_folder::fold_predicate_in() is a superset of this.  At\n+     some point we should merge all variants of this code.  */\n+  edge taken_edge;\n+  vrp_visit_cond_stmt (cond, &taken_edge);\n+\n   if (taken_edge)\n     {\n       if (taken_edge->flags & EDGE_TRUE_VALUE)\n-       gimple_cond_make_true (cond);\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"\\nVRP Predicate evaluates to: 1\\n\");\n+\t  gimple_cond_make_true (cond);\n+\t}\n       else if (taken_edge->flags & EDGE_FALSE_VALUE)\n-       gimple_cond_make_false (cond);\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \"\\nVRP Predicate evaluates to: 0\\n\");\n+\t  gimple_cond_make_false (cond);\n+\t}\n       else\n        gcc_unreachable ();\n       update_stmt (cond);"}]}