{"sha": "58f3f2c397133235dd7cce69f4a93561005fe391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmM2YyYzM5NzEzMzIzNWRkN2NjZTY5ZjRhOTM1NjEwMDVmZTM5MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-24T15:29:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-07-24T15:29:34Z"}, "message": "tree-nested.c (build_simple_mem_ref_notrap): New function.\n\n\t* tree-nested.c (build_simple_mem_ref_notrap): New function.\n\t(get_static_chain): Call it instead of build_simple_mem_ref.\n\t(get_frame_field): Likewise.\n\t(get_nonlocal_debug_decl): Likewise.\n\t(convert_nonlocal_reference_op): Likewise.\n\nFrom-SVN: r273763", "tree": {"sha": "2105650d075f4f5be1401fc51dae729d32c6ab8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2105650d075f4f5be1401fc51dae729d32c6ab8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f3f2c397133235dd7cce69f4a93561005fe391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f3f2c397133235dd7cce69f4a93561005fe391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f3f2c397133235dd7cce69f4a93561005fe391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f3f2c397133235dd7cce69f4a93561005fe391/comments", "author": null, "committer": null, "parents": [{"sha": "ce9dbf20f4e1394121d5d875e502731a9db4f7a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9dbf20f4e1394121d5d875e502731a9db4f7a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9dbf20f4e1394121d5d875e502731a9db4f7a1"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "694340e3bad711ed6791ccb54e46cf2a4af65ab1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f3f2c397133235dd7cce69f4a93561005fe391/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f3f2c397133235dd7cce69f4a93561005fe391/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58f3f2c397133235dd7cce69f4a93561005fe391", "patch": "@@ -1,3 +1,11 @@\n+2019-07-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-nested.c (build_simple_mem_ref_notrap): New function.\n+\t(get_static_chain): Call it instead of build_simple_mem_ref.\n+\t(get_frame_field): Likewise.\n+\t(get_nonlocal_debug_decl): Likewise.\n+\t(convert_nonlocal_reference_op): Likewise.\n+\n 2019-07-24  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc-protos.h (arc_output_function_epilogue): Delete"}, {"sha": "5d189572e19160cb232f658e92cd325e4ae91cca", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f3f2c397133235dd7cce69f4a93561005fe391/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f3f2c397133235dd7cce69f4a93561005fe391/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=58f3f2c397133235dd7cce69f4a93561005fe391", "patch": "@@ -169,6 +169,16 @@ create_tmp_var_for (struct nesting_info *info, tree type, const char *prefix)\n   return tmp_var;\n }\n \n+/* Like build_simple_mem_ref, but set TREE_THIS_NOTRAP on the result.  */\n+\n+static tree\n+build_simple_mem_ref_notrap (tree ptr)\n+{\n+  tree t = build_simple_mem_ref (ptr);\n+  TREE_THIS_NOTRAP (t) = 1;\n+  return t;\n+}\n+\n /* Take the address of EXP to be used within function CONTEXT.\n    Mark it for addressability as necessary.  */\n \n@@ -877,7 +887,7 @@ get_static_chain (struct nesting_info *info, tree target_context,\n \t{\n \t  tree field = get_chain_field (i);\n \n-\t  x = build_simple_mem_ref (x);\n+\t  x = build_simple_mem_ref_notrap (x);\n \t  x = build3 (COMPONENT_REF, TREE_TYPE (field), x, field, NULL_TREE);\n \t  x = init_tmp_var (info, x, gsi);\n \t}\n@@ -914,12 +924,12 @@ get_frame_field (struct nesting_info *info, tree target_context,\n \t{\n \t  tree field = get_chain_field (i);\n \n-\t  x = build_simple_mem_ref (x);\n+\t  x = build_simple_mem_ref_notrap (x);\n \t  x = build3 (COMPONENT_REF, TREE_TYPE (field), x, field, NULL_TREE);\n \t  x = init_tmp_var (info, x, gsi);\n \t}\n \n-      x = build_simple_mem_ref (x);\n+      x = build_simple_mem_ref_notrap (x);\n     }\n \n   x = build3 (COMPONENT_REF, TREE_TYPE (field), x, field, NULL_TREE);\n@@ -963,16 +973,16 @@ get_nonlocal_debug_decl (struct nesting_info *info, tree decl)\n       for (i = info->outer; i->context != target_context; i = i->outer)\n \t{\n \t  field = get_chain_field (i);\n-\t  x = build_simple_mem_ref (x);\n+\t  x = build_simple_mem_ref_notrap (x);\n \t  x = build3 (COMPONENT_REF, TREE_TYPE (field), x, field, NULL_TREE);\n \t}\n-      x = build_simple_mem_ref (x);\n+      x = build_simple_mem_ref_notrap (x);\n     }\n \n   field = lookup_field_for_decl (i, decl, INSERT);\n   x = build3 (COMPONENT_REF, TREE_TYPE (field), x, field, NULL_TREE);\n   if (use_pointer_in_frame (decl))\n-    x = build_simple_mem_ref (x);\n+    x = build_simple_mem_ref_notrap (x);\n \n   /* ??? We should be remapping types as well, surely.  */\n   new_decl = build_decl (DECL_SOURCE_LOCATION (decl),\n@@ -1060,7 +1070,7 @@ convert_nonlocal_reference_op (tree *tp, int *walk_subtrees, void *data)\n \t    if (use_pointer_in_frame (t))\n \t      {\n \t\tx = init_tmp_var (info, x, &wi->gsi);\n-\t\tx = build_simple_mem_ref (x);\n+\t\tx = build_simple_mem_ref_notrap (x);\n \t      }\n \t  }\n "}]}