{"sha": "6574d78eeac0e1ecddb05c6df33fa1b77e712bf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3NGQ3OGVlYWMwZTFlY2RkYjA1YzZkZjMzZmExYjc3ZTcxMmJmNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-05-18T11:26:25Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-05-18T11:26:25Z"}, "message": "c-common.c (c_common_type_for_size): Use NULL_TREE instead of 0.\n\n\t* c-common.c (c_common_type_for_size): Use NULL_TREE instead of 0.\n\t(c_common_fixed_point_type_for_size): Likewise.\n\t(c_common_type_for_mode): Likewise.\n\t(shorten_compare): Likewise.\n\t(c_promoting_integer_type_p): Use false/true instead of 0/1.\n\t* c-pragma.c (maybe_apply_renaming_pragma): Use NULL_TREE instead of 0.\n\n\t* c-decl.c (match_builtin_function_types): Use NULL_TREE instead of 0.\n\t(check_earlier_gotos): Likewise.\n\t(define_label): Likewise.\n\t(pending_xref_error): Likewise.\n\t(smallest_type_quals_location): Likewise.\n\t(grokdeclarator): Likewise.\n\t(grokparms): Likewise.\n\t(identifier_global_value): Likewise.\n\t* c-typeck.c (set_nonincremental_init_from_string): Likewise.\n\t(find_init_member): Likewise.\n\nFrom-SVN: r248195", "tree": {"sha": "600b21f9ed1f2db68f3d2b824355badd73f5fe57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/600b21f9ed1f2db68f3d2b824355badd73f5fe57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b656ca7ea26bb53e6058c10c0016e080c39930c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b656ca7ea26bb53e6058c10c0016e080c39930c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b656ca7ea26bb53e6058c10c0016e080c39930c"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "98b4b4e9ff92ea4055554d779c260c84f1aa1c63", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6574d78eeac0e1ecddb05c6df33fa1b77e712bf6", "patch": "@@ -1,3 +1,12 @@\n+2017-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-common.c (c_common_type_for_size): Use NULL_TREE instead of 0.\n+\t(c_common_fixed_point_type_for_size): Likewise.\n+\t(c_common_type_for_mode): Likewise.\n+\t(shorten_compare): Likewise.\n+\t(c_promoting_integer_type_p): Use false/true instead of 0/1.\n+\t* c-pragma.c (maybe_apply_renaming_pragma): Use NULL_TREE instead of 0.\n+\n 2017-05-18  Marek Polacek  <polacek@redhat.com>\n \n \t* c-common.c (self_promoting_args_p): Change the return type to bool."}, {"sha": "5f4488a908064cfa92797c6a670d3778d6da11bf", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=6574d78eeac0e1ecddb05c6df33fa1b77e712bf6", "patch": "@@ -2112,7 +2112,7 @@ c_common_type_for_size (unsigned int bits, int unsignedp)\n   if (bits <= TYPE_PRECISION (intDI_type_node))\n     return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n \n-  return 0;\n+  return NULL_TREE;\n }\n \n /* Return a fixed-point type that has at least IBIT ibits and FBIT fbits\n@@ -2138,7 +2138,7 @@ c_common_fixed_point_type_for_size (unsigned int ibit, unsigned int fbit,\n       sorry (\"GCC cannot support operators with integer types and \"\n \t     \"fixed-point types that have too many integral and \"\n \t     \"fractional bits together\");\n-      return 0;\n+      return NULL_TREE;\n     }\n \n   return c_common_type_for_mode (mode, satp);\n@@ -2359,7 +2359,7 @@ c_common_type_for_mode (machine_mode mode, int unsignedp)\n \t&& !!unsignedp == !!TYPE_UNSIGNED (TREE_VALUE (t)))\n       return TREE_VALUE (t);\n \n-  return 0;\n+  return NULL_TREE;\n }\n \n tree\n@@ -2690,7 +2690,7 @@ expr_original_type (tree expr)\n \n    LOC is the location of the comparison.\n \n-   If this function returns nonzero, it means that the comparison has\n+   If this function returns non-NULL_TREE, it means that the comparison has\n    a constant value.  What this function returns is an expression for\n    that value.  */\n \n@@ -2944,7 +2944,7 @@ shorten_compare (location_t loc, tree *op0_ptr, tree *op1_ptr,\n   else if (real1 && real2\n \t   && (DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (primop0)))\n \t       || DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (primop1)))))\n-    return 0;\n+    return NULL_TREE;\n \n   else if (real1 && real2\n \t   && (TYPE_PRECISION (TREE_TYPE (primop0))\n@@ -3038,7 +3038,7 @@ shorten_compare (location_t loc, tree *op0_ptr, tree *op1_ptr,\n \n   *restype_ptr = truthvalue_type_node;\n \n-  return 0;\n+  return NULL_TREE;\n }\n \f\n /* Return a tree for the sum or difference (RESULTCODE says which)\n@@ -4630,10 +4630,10 @@ c_promoting_integer_type_p (const_tree t)\n       return TYPE_PRECISION (t) < TYPE_PRECISION (integer_type_node);\n \n     case BOOLEAN_TYPE:\n-      return 1;\n+      return true;\n \n     default:\n-      return 0;\n+      return false;\n     }\n }\n "}, {"sha": "bc366265cd41a8eba602223dca53225cb11073e1", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=6574d78eeac0e1ecddb05c6df33fa1b77e712bf6", "patch": "@@ -594,7 +594,7 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n \t    pending_redefine_extname->unordered_remove (ix);\n \t    break;\n \t  }\n-      return 0;\n+      return NULL_TREE;\n     }\n \n   /* Find out if we have a pending #pragma redefine_extname.  */\n@@ -643,7 +643,7 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n     }\n \n   /* Nada.  */\n-  return 0;\n+  return NULL_TREE;\n }\n \n "}, {"sha": "1f572a76df001abb258bb445130946b7e333211b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6574d78eeac0e1ecddb05c6df33fa1b77e712bf6", "patch": "@@ -1,3 +1,16 @@\n+2017-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-decl.c (match_builtin_function_types): Use NULL_TREE instead of 0.\n+\t(check_earlier_gotos): Likewise.\n+\t(define_label): Likewise.\n+\t(pending_xref_error): Likewise.\n+\t(smallest_type_quals_location): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t(grokparms): Likewise.\n+\t(identifier_global_value): Likewise.\n+\t* c-typeck.c (set_nonincremental_init_from_string): Likewise.\n+\t(find_init_member): Likewise.\n+\n 2017-05-18  Marek Polacek  <polacek@redhat.com>\n \n \t* c-decl.c (start_decl): Use false/true instead of 0/1."}, {"sha": "da1e2c409e6aa00536e3792976f36d94b2df25a3", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=6574d78eeac0e1ecddb05c6df33fa1b77e712bf6", "patch": "@@ -1630,7 +1630,7 @@ match_builtin_function_types (tree newtype, tree oldtype)\n   newrettype = TREE_TYPE (newtype);\n \n   if (TYPE_MODE (oldrettype) != TYPE_MODE (newrettype))\n-    return 0;\n+    return NULL_TREE;\n \n   oldargs = TYPE_ARG_TYPES (oldtype);\n   newargs = TYPE_ARG_TYPES (newtype);\n@@ -1644,7 +1644,7 @@ match_builtin_function_types (tree newtype, tree oldtype)\n \t  || !TREE_VALUE (newargs)\n \t  || TYPE_MODE (TREE_VALUE (oldargs))\n \t     != TYPE_MODE (TREE_VALUE (newargs)))\n-\treturn 0;\n+\treturn NULL_TREE;\n \n       oldargs = TREE_CHAIN (oldargs);\n       newargs = TREE_CHAIN (newargs);\n@@ -3755,7 +3755,7 @@ check_earlier_gotos (tree label, struct c_label_vars* label_vars)\n \n /* Define a label, specifying the location in the source file.\n    Return the LABEL_DECL node for the label, if the definition is valid.\n-   Otherwise return 0.  */\n+   Otherwise return NULL_TREE.  */\n \n tree\n define_label (location_t location, tree name)\n@@ -3774,7 +3774,7 @@ define_label (location_t location, tree name)\n     {\n       error_at (location, \"duplicate label %qD\", label);\n       locate_old_decl (label);\n-      return 0;\n+      return NULL_TREE;\n     }\n   else if (label && DECL_CONTEXT (label) == current_function_decl)\n     {\n@@ -3971,7 +3971,7 @@ pending_xref_error (void)\n /* Look up NAME in the current scope and its superiors\n    in the namespace of variables, functions and typedefs.\n    Return a ..._DECL node of some kind representing its definition,\n-   or return 0 if it is undefined.  */\n+   or return NULL_TREE if it is undefined.  */\n \n tree\n lookup_name (tree name)\n@@ -5516,7 +5516,7 @@ smallest_type_quals_location (const location_t *locations,\n    determine the name and type of the object declared\n    and construct a ..._DECL node for it.\n    (In one case we can return a ..._TYPE node instead.\n-    For invalid input we sometimes return 0.)\n+    For invalid input we sometimes return NULL_TREE.)\n \n    DECLSPECS is a c_declspecs structure for the declaration specifiers.\n \n@@ -5662,7 +5662,7 @@ grokdeclarator (const struct c_declarator *declarator,\n      a function declarator.  */\n \n   if (funcdef_flag && !funcdef_syntax)\n-    return 0;\n+    return NULL_TREE;\n \n   /* If this looks like a function definition, make it one,\n      even if it occurs where parms are expected.\n@@ -6833,7 +6833,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\tif (funcdef_flag)\n \t\t  storage_class = declspecs->storage_class = csc_none;\n \t\telse\n-\t\t  return 0;\n+\t\t  return NULL_TREE;\n \t      }\n \t  }\n \n@@ -7073,20 +7073,22 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n \t     \"function declaration isn%'t a prototype\");\n \n   if (arg_types == error_mark_node)\n-    return 0;  /* don't set TYPE_ARG_TYPES in this case */\n+    /* Don't set TYPE_ARG_TYPES in this case.  */\n+    return NULL_TREE;\n \n   else if (arg_types && TREE_CODE (TREE_VALUE (arg_types)) == IDENTIFIER_NODE)\n     {\n       if (!funcdef_flag)\n \t{\n-\t  pedwarn (input_location, 0, \"parameter names (without types) in function declaration\");\n+\t  pedwarn (input_location, 0, \"parameter names (without types) in \"\n+\t\t   \"function declaration\");\n \t  arg_info->parms = NULL_TREE;\n \t}\n       else\n \targ_info->parms = arg_info->types;\n \n       arg_info->types = NULL_TREE;\n-      return 0;\n+      return NULL_TREE;\n     }\n   else\n     {\n@@ -9599,7 +9601,7 @@ identifier_global_value\t(tree t)\n     if (B_IN_FILE_SCOPE (b) || B_IN_EXTERNAL_SCOPE (b))\n       return b->decl;\n \n-  return 0;\n+  return NULL_TREE;\n }\n \n /* In C, the only C-linkage public declaration is at file scope.  */"}, {"sha": "25b7dd60253b3b71997359633c5b20e267e099c4", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6574d78eeac0e1ecddb05c6df33fa1b77e712bf6/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=6574d78eeac0e1ecddb05c6df33fa1b77e712bf6", "patch": "@@ -8774,7 +8774,7 @@ set_nonincremental_init_from_string (tree str,\n   constructor_incremental = 0;\n }\n \n-/* Return value of FIELD in pending initializer or zero if the field was\n+/* Return value of FIELD in pending initializer or NULL_TREE if the field was\n    not initialized yet.  */\n \n static tree\n@@ -8826,7 +8826,7 @@ find_init_member (tree field, struct obstack * braced_init_obstack)\n \t  && (constructor_elements->last ().index == field))\n \treturn constructor_elements->last ().value;\n     }\n-  return 0;\n+  return NULL_TREE;\n }\n \n /* \"Output\" the next constructor element.\n@@ -14007,7 +14007,7 @@ c_build_va_arg (location_t loc1, tree expr, location_t loc2, tree type)\n }\n \n /* Return truthvalue of whether T1 is the same tree structure as T2.\n-   Return 1 if they are the same. Return 0 if they are different.  */\n+   Return 1 if they are the same. Return false if they are different.  */\n \n bool\n c_tree_equal (tree t1, tree t2)"}]}