{"sha": "3df188844eefbdf39417e026cd3b763282801878", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmMTg4ODQ0ZWVmYmRmMzk0MTdlMDI2Y2QzYjc2MzI4MjgwMTg3OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-11-20T01:25:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-11-20T01:25:59Z"}, "message": "dwarf2out.c (simple_type_size_in_bits): Handle a type with no computed size as size zero.\n\n        * dwarf2out.c (simple_type_size_in_bits): Handle a type with\n        no computed size as size zero.\n        (field_byte_offset): Likewise.\n\nFrom-SVN: r37578", "tree": {"sha": "c7f9433913abe0a942f2afbaf5b53ef772aabcd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f9433913abe0a942f2afbaf5b53ef772aabcd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3df188844eefbdf39417e026cd3b763282801878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df188844eefbdf39417e026cd3b763282801878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df188844eefbdf39417e026cd3b763282801878", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df188844eefbdf39417e026cd3b763282801878/comments", "author": null, "committer": null, "parents": [{"sha": "cfd1c7ea39cd437ce827b193b4d920638111b2f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd1c7ea39cd437ce827b193b4d920638111b2f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfd1c7ea39cd437ce827b193b4d920638111b2f7"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "13a4ba82cdce375727fefe6a5af5d614434ce4c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df188844eefbdf39417e026cd3b763282801878/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df188844eefbdf39417e026cd3b763282801878/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3df188844eefbdf39417e026cd3b763282801878", "patch": "@@ -1,3 +1,9 @@\n+2000-11-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2out.c (simple_type_size_in_bits): Handle a type with\n+\tno computed size as size zero.\n+\t(field_byte_offset): Likewise.\n+\n 2000-11-20  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* config.gcc: Fix another typo."}, {"sha": "3ec00b9cbb00bac2c0e3cfd39af5deafd7879fc4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df188844eefbdf39417e026cd3b763282801878/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df188844eefbdf39417e026cd3b763282801878/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3df188844eefbdf39417e026cd3b763282801878", "patch": "@@ -7790,17 +7790,17 @@ static inline unsigned HOST_WIDE_INT\n simple_type_size_in_bits (type)\n      register tree type;\n {\n+  tree type_size_tree;\n+\n   if (TREE_CODE (type) == ERROR_MARK)\n     return BITS_PER_WORD;\n-  else\n-    {\n-      register tree type_size_tree = TYPE_SIZE (type);\n+  type_size_tree = TYPE_SIZE (type);\n \n-      if (! host_integerp (type_size_tree, 1))\n-\treturn TYPE_ALIGN (type);\n-\n-      return tree_low_cst (type_size_tree, 1);\n-    }\n+  if (type_size_tree == NULL_TREE)\n+    return 0;\n+  if (! host_integerp (type_size_tree, 1))\n+    return TYPE_ALIGN (type);\n+  return tree_low_cst (type_size_tree, 1);\n }\n \n /* Given a pointer to what is assumed to be a FIELD_DECL node, compute and\n@@ -7835,14 +7835,10 @@ field_byte_offset (decl)\n   type = field_type (decl);\n   field_size_tree = DECL_SIZE (decl);\n \n-  /* If there was an error, the size could be zero.  */\n+  /* The size could be unspecified if there was an error, or for\n+     a flexible array member.  */\n   if (! field_size_tree)\n-    {\n-      if (errorcount)\n-\treturn 0;\n-\n-      abort ();\n-    }\n+    field_size_tree = bitsize_zero_node;\n \n   /* We cannot yet cope with fields whose positions are variable, so\n      for now, when we see such things, we simply return 0.  Someday, we may\n@@ -7852,7 +7848,7 @@ field_byte_offset (decl)\n \n   bitpos_int = int_bit_position (decl);\n \n-    /* If we don't know the size of the field, pretend it's a full word.  */\n+  /* If we don't know the size of the field, pretend it's a full word.  */\n   if (host_integerp (field_size_tree, 1))\n     field_size_in_bits = tree_low_cst (field_size_tree, 1);\n   else"}]}