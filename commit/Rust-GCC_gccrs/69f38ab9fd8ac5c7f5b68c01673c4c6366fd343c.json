{"sha": "69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlmMzhhYjlmZDhhYzVjN2Y1YjY4YzAxNjczYzRjNjM2NmZkMzQzYw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2003-12-15T17:42:43Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2003-12-15T17:42:43Z"}, "message": "reload.c (reg_overlap_mentioned_for_reload_p): When looking at a PLUS in X...\n\n\t* reload.c (reg_overlap_mentioned_for_reload_p):\n\tWhen looking at a PLUS in X, avoid spuriously returning nonzero\n\twhen IN is a REG or another simple PLUS, or a MEM containing one.\n\n\t* loop.c (loop_invariant_p): Amend comment about where new registers\n\tmight come from.\n\nFrom-SVN: r74638", "tree": {"sha": "a160396a81237e124ff088404cc470129c589b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a160396a81237e124ff088404cc470129c589b51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c/comments", "author": null, "committer": null, "parents": [{"sha": "a5ac3982bc53a972881bed634e3cc3dfa2141656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ac3982bc53a972881bed634e3cc3dfa2141656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5ac3982bc53a972881bed634e3cc3dfa2141656"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "be45849cdbb3db3de3c9259b383fbfa4d14781b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c", "patch": "@@ -1,3 +1,12 @@\n+2003-12-15  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* reload.c (reg_overlap_mentioned_for_reload_p):\n+\tWhen looking at a PLUS in X, avoid spuriously returning nonzero\n+\twhen IN is a REG or another simple PLUS, or a MEM containing one.\n+\n+\t* loop.c (loop_invariant_p): Amend comment about where new registers\n+\tmight come from.\n+\n 2003-12-15  Andreas Jaeger  <aj@suse.de>\n \n \t* config/rs6000/rs6000.c (rs6000_output_function_epilogue): Remove"}, {"sha": "93bb328be349404c82b9f10155338b8da4ed5921", "filename": "gcc/loop.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c", "patch": "@@ -3298,8 +3298,14 @@ loop_invariant_p (const struct loop *loop, rtx x)\n \treturn 0;\n \n       /* Out-of-range regs can occur when we are called from unrolling.\n-\t These have always been created by the unroller and are set in\n-\t the loop, hence are never invariant.  */\n+\t These registers created by the unroller are set in the loop,\n+\t hence are never invariant.\n+\t Other out-of-range regs can be generated by load_mems; those that\n+\t are written to in the loop are not invariant, while those that are\n+\t not written to are invariant.  It would be easy for load_mems\n+\t to set n_times_set correctly for these registers, however, there\n+\t is no easy way to distinguish them from registers created by the\n+\t unroller.  */\n \n       if (REGNO (x) >= (unsigned) regs->num)\n \treturn 0;"}, {"sha": "13f6900ce3d500f807a95c0346b35028b057ddc8", "filename": "gcc/reload.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=69f38ab9fd8ac5c7f5b68c01673c4c6366fd343c", "patch": "@@ -6290,8 +6290,22 @@ reg_overlap_mentioned_for_reload_p (rtx x, rtx in)\n \t   || GET_CODE (x) == CC0)\n     return reg_mentioned_p (x, in);\n   else if (GET_CODE (x) == PLUS)\n-    return (reg_overlap_mentioned_for_reload_p (XEXP (x, 0), in)\n-\t    || reg_overlap_mentioned_for_reload_p (XEXP (x, 1), in));\n+    {\n+      /* We actually want to know if X is mentioned somewhere inside IN.\n+\t We must not say that (plus (sp) (const_int 124)) is in\n+\t (plus (sp) (const_int 64)), since that can lead to incorrect reload\n+\t allocation when spuriously changing a RELOAD_FOR_OUTPUT_ADDRESS\n+\t into a RELOAD_OTHER on behalf of another RELOAD_OTHER.  */\n+      while (GET_CODE (in) == MEM)\n+\tin = XEXP (in, 0);\n+      if (GET_CODE (in) == REG)\n+\treturn 0;\n+      else if (GET_CODE (in) == PLUS)\n+\treturn (reg_overlap_mentioned_for_reload_p (x, XEXP (in, 0))\n+\t\t|| reg_overlap_mentioned_for_reload_p (x, XEXP (in, 1)));\n+      else return (reg_overlap_mentioned_for_reload_p (XEXP (x, 0), in)\n+\t\t   || reg_overlap_mentioned_for_reload_p (XEXP (x, 1), in));\n+    }\n   else\n     abort ();\n "}]}