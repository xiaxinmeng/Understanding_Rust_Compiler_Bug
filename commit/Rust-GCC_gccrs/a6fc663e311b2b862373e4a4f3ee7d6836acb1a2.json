{"sha": "a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmYzY2M2UzMTFiMmI4NjIzNzNlNGE0ZjNlZTdkNjgzNmFjYjFhMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2019-07-18T16:37:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2019-07-18T16:37:40Z"}, "message": "Makefile.rtl, [...]: Introduce a \"STANDALONE\" mode where C runtime files do not have any dependency...\n\n\t* Makefile.rtl, expect.c, env.c, aux-io.c, mkdir.c, initialize.c,\n\tcstreams.c, raise.c, tracebak.c, adadecode.c, init.c, raise-gcc.c,\n\targv.c, adaint.c, adaint.h, ctrl_c.c, sysdep.c, rtinit.c, cio.c,\n\tseh_init.c, exit.c, targext.c: Introduce a \"STANDALONE\" mode where C\n\truntime files do not have any dependency on GCC include files.\n\tRemove unnecessary includes.\n\tRemove remaining references to VMS in runtime C file.\n\t* runtime.h: new File.\n\nFrom-SVN: r273576", "tree": {"sha": "6d0223791c112e5b47e7dd4a5dc668f65c71ca4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d0223791c112e5b47e7dd4a5dc668f65c71ca4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9a0100963b357e7e84084e45bbc51d6576410a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a0100963b357e7e84084e45bbc51d6576410a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9a0100963b357e7e84084e45bbc51d6576410a4"}], "stats": {"total": 304, "additions": 125, "deletions": 179}, "files": [{"sha": "ff3582f6837808f05f1cd844a04aaa816b3180cd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -1,3 +1,14 @@\n+2019-07-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.rtl, expect.c, env.c, aux-io.c, mkdir.c, initialize.c,\n+\tcstreams.c, raise.c, tracebak.c, adadecode.c, init.c, raise-gcc.c,\n+\targv.c, adaint.c, adaint.h, ctrl_c.c, sysdep.c, rtinit.c, cio.c,\n+\tseh_init.c, exit.c, targext.c: Introduce a \"STANDALONE\" mode where C\n+\truntime files do not have any dependency on GCC include files.\n+\tRemove unnecessary includes.\n+\tRemove remaining references to VMS in runtime C file.\n+\t* runtime.h: new File.\n+\n 2019-07-13  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* Makefile.rtl: Use g-sercom__linux.adb for all linuxes."}, {"sha": "6528df8114cc7c7eddd1a8eaab5467163d09fb1e", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -2610,7 +2610,7 @@ LIBGNAT_OBJS = adadecode.o adaint.o argv.o aux-io.o \t\t\t\\\n \n LIBGNAT_SRCS = $(patsubst %.o,%.c,$(LIBGNAT_OBJS))\t\t\t\\\n   adadecode.h adaint.h env.h gsocket.h raise.h standard.ads.h\t\t\\\n-  tb-gcc.c libgnarl/thread.c $(EXTRA_LIBGNAT_SRCS)\n+  tb-gcc.c runtime.h libgnarl/thread.c $(EXTRA_LIBGNAT_SRCS)\n \n # memtrack.o is special as not put into libgnat.\n GNATRTL_OBJS = $(GNATRTL_NONTASKING_OBJS) $(GNATRTL_TASKING_OBJS) \\"}, {"sha": "f87d421224f22c378bbb7b7397cb0bbda41f659f", "filename": "gcc/ada/adadecode.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fadadecode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fadadecode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadadecode.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -29,15 +29,7 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-\n-#if defined(IN_RTS)\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#elif defined(IN_GCC)\n-#include \"config.h\"\n-#include \"system.h\"\n-#endif\n-\n+#include \"runtime.h\"\n #include <string.h>\n #include <stdio.h>\n #include <ctype.h>"}, {"sha": "fe8d9552d9bd8b9857315831df954dbbc18395ea", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -88,8 +88,26 @@\n #endif\n \n #ifdef IN_RTS\n+\n+#ifdef STANDALONE\n+#include <errno.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <unistd.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+/* for CPU_SET/CPU_ZERO */\n+#define _GNU_SOURCE\n+#define __USE_GNU\n+\n+#include \"runtime.h\"\n+\n+#else\n #include \"tconfig.h\"\n #include \"tsystem.h\"\n+#endif\n+\n #include <sys/stat.h>\n #include <fcntl.h>\n #include <time.h>"}, {"sha": "311e240dfcce4ed86b5e42032b045ad71937fc59", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -51,7 +51,7 @@ extern \"C\" {\n    determine at compile time what support the system offers for large files.\n    For now we just list the platforms we have manually tested. */\n \n-#if defined (__GLIBC__) || defined (__sun__) || defined (__QNX__)\n+#if (defined (__GLIBC__) && !defined(STANDALONE)) || defined (__sun__) || defined (__QNX__)\n #define GNAT_FOPEN fopen64\n #define GNAT_OPEN open64\n #define GNAT_STAT stat64"}, {"sha": "ca82ed596e9d59dfa74e3d9880789af0ef548614", "filename": "gcc/ada/argv.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fargv.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -43,9 +43,8 @@\n    Ada.Command_Line.Environment package.  */\n \n #ifdef IN_RTS\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#include <sys/stat.h>\n+#include \"runtime.h\"\n+#include <string.h>\n #else\n #include \"config.h\"\n #include \"system.h\""}, {"sha": "e022b65770c562eba5d7e45a409d6c89b3e7e149", "filename": "gcc/ada/aux-io.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Faux-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Faux-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faux-io.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -31,10 +31,7 @@\n \n #include <stdio.h>\n \n-#ifdef IN_RTS\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#else\n+#ifndef IN_RTS\n #include \"config.h\"\n #include \"system.h\"\n #endif"}, {"sha": "7fca41285c0d9afe1b07db746435c3b05a322220", "filename": "gcc/ada/cio.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fcio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fcio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcio.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -30,8 +30,7 @@\n  ****************************************************************************/\n \n #ifdef IN_RTS\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n+#include \"runtime.h\"\n #include <sys/stat.h>\n #else\n #include \"config.h\""}, {"sha": "92392fcbd1c50354e5deb3295ed4f5358ee36a32", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -53,9 +53,7 @@\n #endif\n \n #ifdef IN_RTS\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#include <sys/stat.h>\n+#include <string.h>\n #else\n #include \"config.h\"\n #include \"system.h\""}, {"sha": "0e427ea5d2688cf38c6c1a88237aab4126bfb473", "filename": "gcc/ada/ctrl_c.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fctrl_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fctrl_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fctrl_c.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -29,11 +29,7 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-#ifdef IN_RTS\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#include <sys/stat.h>\n-#else\n+#ifndef IN_RTS\n #include \"config.h\"\n #include \"system.h\"\n #endif"}, {"sha": "698b17708e132767c436ee992887117571073fb5", "filename": "gcc/ada/env.c", "status": "modified", "additions": 8, "deletions": 100, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -30,15 +30,11 @@\n  ****************************************************************************/\n \n #ifdef IN_RTS\n-# include \"tconfig.h\"\n-# include \"tsystem.h\"\n+# include \"runtime.h\"\n+# include <stdio.h>\n+# include <stdlib.h>\n+# include <string.h>\n \n-# include <sys/stat.h>\n-# include <fcntl.h>\n-# include <time.h>\n-# ifdef VMS\n-#  include <unixio.h>\n-# endif\n /* We don't have libiberty, so use malloc.  */\n # define xmalloc(S) malloc (S)\n #else /* IN_RTS */\n@@ -109,89 +105,10 @@ __gnat_getenv (char *name, int *len, char **value)\n   return;\n }\n \n-/* VMS specific declarations for set_env_value.  */\n-\n-#ifdef VMS\n-\n-typedef struct _ile3\n-{\n-  unsigned short len, code;\n-  __char_ptr32 adr;\n-  __char_ptr32 retlen_adr;\n-} ile_s;\n-\n-#endif\n-\n void\n __gnat_setenv (char *name, char *value)\n {\n-#if defined (VMS)\n-  struct dsc$descriptor_s name_desc;\n-  $DESCRIPTOR (table_desc, \"LNM$PROCESS\");\n-  char *host_pathspec = value;\n-  char *copy_pathspec;\n-  int num_dirs_in_pathspec = 1;\n-  char *ptr;\n-  long status;\n-\n-  name_desc.dsc$w_length = strlen (name);\n-  name_desc.dsc$b_dtype = DSC$K_DTYPE_T;\n-  name_desc.dsc$b_class = DSC$K_CLASS_S;\n-  name_desc.dsc$a_pointer = name; /* ??? Danger, not 64bit safe.  */\n-\n-  if (*host_pathspec == 0)\n-    /* deassign */\n-    {\n-      status = LIB$DELETE_LOGICAL (&name_desc, &table_desc);\n-      /* no need to check status; if the logical name is not\n-         defined, that's fine. */\n-      return;\n-    }\n-\n-  ptr = host_pathspec;\n-  while (*ptr++)\n-    if (*ptr == ',')\n-      num_dirs_in_pathspec++;\n-\n-  {\n-    int i, status;\n-    /* Alloca is guaranteed to be 32bit.  */\n-    ile_s *ile_array = alloca (sizeof (ile_s) * (num_dirs_in_pathspec + 1));\n-    char *copy_pathspec = alloca (strlen (host_pathspec) + 1);\n-    char *curr, *next;\n-\n-    strcpy (copy_pathspec, host_pathspec);\n-    curr = copy_pathspec;\n-    for (i = 0; i < num_dirs_in_pathspec; i++)\n-      {\n-\tnext = strchr (curr, ',');\n-\tif (next == 0)\n-\t  next = strchr (curr, 0);\n-\n-\t*next = 0;\n-\tile_array[i].len = strlen (curr);\n-\n-\t/* Code 2 from lnmdef.h means it's a string.  */\n-\tile_array[i].code = 2;\n-\tile_array[i].adr = curr;\n-\n-\t/* retlen_adr is ignored.  */\n-\tile_array[i].retlen_adr = 0;\n-\tcurr = next + 1;\n-      }\n-\n-    /* Terminating item must be zero.  */\n-    ile_array[i].len = 0;\n-    ile_array[i].code = 0;\n-    ile_array[i].adr = 0;\n-    ile_array[i].retlen_adr = 0;\n-\n-    status = LIB$SET_LOGICAL (&name_desc, 0, &table_desc, 0, ile_array);\n-    if ((status & 1) != 1)\n-      LIB$SIGNAL (status);\n-  }\n-\n-#elif (defined (__vxworks) && defined (__RTP__)) || defined (__APPLE__)\n+#if (defined (__vxworks) && defined (__RTP__)) || defined (__APPLE__)\n   setenv (name, value, 1);\n \n #else\n@@ -213,10 +130,7 @@ __gnat_setenv (char *name, char *value)\n char **\n __gnat_environ (void)\n {\n-#if defined (VMS) || defined (RTX)\n-  /* Not implemented */\n-  return NULL;\n-#elif defined (__MINGW32__)\n+#if defined (__MINGW32__)\n   return _environ;\n #elif defined (__sun__)\n   extern char **_environ;\n@@ -247,10 +161,7 @@ __gnat_environ (void)\n \n void __gnat_unsetenv (char *name)\n {\n-#if defined (VMS)\n-  /* Not implemented */\n-  return;\n-#elif defined (__hpux__) || defined (__sun__) \\\n+#if defined (__hpux__) || defined (__sun__) \\\n      || (defined (__vxworks) && ! defined (__RTP__)) \\\n      || defined (_AIX) || defined (__Lynx__)\n \n@@ -306,10 +217,7 @@ void __gnat_unsetenv (char *name)\n \n void __gnat_clearenv (void)\n {\n-#if defined (VMS)\n-  /* not implemented */\n-  return;\n-#elif defined (__sun__) \\\n+#if defined (__sun__) \\\n   || (defined (__vxworks) && ! defined (__RTP__)) || defined (__Lynx__) \\\n   || defined (__PikeOS__)\n   /* On Solaris, VxWorks (not RTPs), and Lynx there is no system"}, {"sha": "3f6ef210e2fd2b95872278586d0ce36d2eb270cc", "filename": "gcc/ada/exit.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexit.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -29,21 +29,6 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-#ifdef __alpha_vxworks\n-#include \"vxWorks.h\"\n-#endif\n-\n-#ifdef IN_RTS\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n-#include <sys/stat.h>\n-#else\n-#include \"config.h\"\n-#include \"system.h\"\n-#endif\n-\n-#include \"adaint.h\"\n-\n #ifdef __cplusplus\n extern \"C\" {\n #endif"}, {"sha": "349af3f789df64293050dc8660e0414abe9b69d0", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -29,14 +29,11 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-#ifdef __alpha_vxworks\n-#include \"vxWorks.h\"\n-#endif\n-\n #ifdef IN_RTS\n #define POSIX\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n+#include \"runtime.h\"\n+#include <unistd.h>\n+\n #else\n #include \"config.h\"\n #include \"system.h\""}, {"sha": "f7e830e9259bd20d2cbdef7e35552bfa5e25a749", "filename": "gcc/ada/init.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -54,8 +54,14 @@\n #endif\n \n #ifdef IN_RTS\n+\n+#ifdef STANDALONE\n+#include \"runtime.h\"\n+#else\n #include \"tconfig.h\"\n #include \"tsystem.h\"\n+#endif\n+\n #include <sys/stat.h>\n \n /* We don't have libiberty, so use malloc.  */\n@@ -463,6 +469,7 @@ void fake_linux_sigemptyset (sigset_t *set)\n void\n __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n {\n+#ifndef STANDALONE\n   mcontext_t *mcontext = &((ucontext_t *) ucontext)->uc_mcontext;\n \n   /* On the i386 and x86-64 architectures, stack checking is performed by\n@@ -513,6 +520,7 @@ __gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n     mcontext->arm_pc+=1;\n #endif\n #endif\n+#endif\n }\n \n #endif"}, {"sha": "0e52feb1340f8cdf40ee40f369655dc08195367e", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -41,8 +41,7 @@\n #endif\n \n #ifdef IN_RTS\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n+#include \"runtime.h\"\n /* We don't have libiberty, so use malloc.  */\n #define xmalloc(S) malloc (S)\n #define xrealloc(V,S) realloc (V,S)"}, {"sha": "e0efccec36f7d602e0a3945e9f21caf7659b8973", "filename": "gcc/ada/mkdir.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fmkdir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fmkdir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmkdir.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -35,8 +35,7 @@\n #endif /* __vxworks */\n \n #ifdef IN_RTS\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n+#include \"runtime.h\"\n #include <sys/stat.h>\n #else\n #include \"config.h\""}, {"sha": "c15547dbc95ad2db1fbd6efb0a2a251870ade025", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -39,11 +39,11 @@\n   /* Don't use fancy_abort.  */\n # undef abort\n #else\n-# ifndef CERT\n+# if !defined(CERT) && !defined(STANDALONE)\n #  include \"tconfig.h\"\n #  include \"tsystem.h\"\n # else\n-#  define ATTRIBUTE_UNUSED __attribute__((unused))\n+#  include \"runtime.h\"\n #  define HAVE_GETIPINFO 1\n # endif\n #endif\n@@ -115,6 +115,10 @@ extern void __gnat_unhandled_except_handler (_Unwind_Exception *);\n /* Called in case of error during propagation.  */\n extern void __gnat_raise_abort (void) __attribute__ ((noreturn));\n #define abort() __gnat_raise_abort()\n+\n+#elif defined(STANDALONE)\n+#include <stdlib.h>\n+#define inhibit_libc\n #endif\n \n #include \"unwind-pe.h\""}, {"sha": "bf8a8797afc7083ae39f03f61695e713db45f80f", "filename": "gcc/ada/raise.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fraise.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fraise.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -33,8 +33,7 @@\n    is shared between all exception handling mechanisms.  */\n \n #ifdef IN_RTS\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n+#include \"runtime.h\"\n #else\n #include \"config.h\"\n #include \"system.h\"\n@@ -56,16 +55,6 @@ extern \"C\" {\n void\n __gnat_unhandled_terminate (void)\n {\n-#ifdef VMS\n-  /* Special termination handling for VMS */\n-  long prvhnd;\n-\n-  /* Remove the exception vector so it won't intercept any errors\n-     in the call to exit, and go into and endless loop */\n-\n-  SYS$SETEXV (1, 0, 3, &prvhnd);\n-#endif\n-\n   /* Default termination handling */\n   __gnat_os_exit (1);\n }"}, {"sha": "5c9c5ecc80e5d6f73836f22720b4f0f5b982c264", "filename": "gcc/ada/rtinit.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Frtinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Frtinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtinit.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -41,8 +41,6 @@\n #endif\n \n #ifdef IN_RTS\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n /* We don't have libiberty, so use malloc.  */\n #define xmalloc(S) malloc (S)\n #define xrealloc(V,S) realloc (V,S)"}, {"sha": "df42730c0a541088911d8396affe24503273e807", "filename": "gcc/ada/runtime.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fruntime.h?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -0,0 +1,44 @@\n+/****************************************************************************\n+ *                                                                          *\n+ *                         GNAT COMPILER COMPONENTS                         *\n+ *                                                                          *\n+ *                                 RUNTIME                                  *\n+ *                                                                          *\n+ *                              C Header File                               *\n+ *                                                                          *\n+ *          Copyright (C) 2019, Free Software Foundation, Inc.              *\n+ *                                                                          *\n+ * GNAT is free software;  you can  redistribute it  and/or modify it under *\n+ * terms of the  GNU General Public License as published  by the Free Soft- *\n+ * ware  Foundation;  either version 3,  or (at your option) any later ver- *\n+ * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *\n+ * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *\n+ * or FITNESS FOR A PARTICULAR PURPOSE.                                     *\n+ *                                                                          *\n+ * As a special exception under Section 7 of GPL version 3, you are granted *\n+ * additional permissions described in the GCC Runtime Library Exception,   *\n+ * version 3.1, as published by the Free Software Foundation.               *\n+ *                                                                          *\n+ * You should have received a copy of the GNU General Public License and    *\n+ * a copy of the GCC Runtime Library Exception along with this program;     *\n+ * see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    *\n+ * <http://www.gnu.org/licenses/>.                                          *\n+ *                                                                          *\n+ * GNAT was originally developed  by the GNAT team at  New York University. *\n+ * Extensive contributions were provided by Ada Core Technologies Inc.      *\n+ *                                                                          *\n+ ****************************************************************************/\n+\n+/* This file provides common definitions used by GNAT C runtime files.  */\n+\n+#ifdef __vxworks\n+#include \"vxWorks.h\"\n+#endif /* __vxworks */\n+\n+#ifndef ATTRIBUTE_UNUSED\n+#define ATTRIBUTE_UNUSED __attribute__((unused))\n+#endif\n+\n+#ifndef ATTRIBUTE_NORETURN\n+#define ATTRIBUTE_NORETURN __attribute__((noreturn))\n+#endif"}, {"sha": "2926605caa9850b3716f97ddd96202b5fd5cc5b0", "filename": "gcc/ada/seh_init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fseh_init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fseh_init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fseh_init.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -39,8 +39,8 @@\n #endif\n \n #ifdef IN_RTS\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n+\n+#include \"runtime.h\"\n \n /* We don't have libiberty, so use malloc.  */\n #define xmalloc(S) malloc (S)"}, {"sha": "1e1f5eeb5e6e0af489fcb5fe2d43f64b5d10f614", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -54,8 +54,10 @@\n \n #ifdef IN_RTS\n #define POSIX\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n+#include \"runtime.h\"\n+#include <string.h>\n+#include <unistd.h>\n+\n #include <fcntl.h>\n #include <sys/stat.h>\n #else"}, {"sha": "d761b2a5a56636be9bd4dd223dda0d05c417c86e", "filename": "gcc/ada/targext.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Ftargext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Ftargext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargext.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -36,14 +36,21 @@\n     the file must be compiled with IN_GCC defined, even for the library.  */\n \n #ifdef IN_RTS\n+\n+#ifndef STANDALONE\n #include \"tconfig.h\"\n #include \"tsystem.h\"\n+#endif\n+\n #else\n #include \"config.h\"\n #include \"system.h\"\n #endif\n+\n+#ifndef STANDALONE\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#endif\n \n #ifndef TARGET_OBJECT_SUFFIX\n #define TARGET_OBJECT_SUFFIX \".o\""}, {"sha": "9e74282e11fd359400e6c6a74686118e10da2761", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fc663e311b2b862373e4a4f3ee7d6836acb1a2/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=a6fc663e311b2b862373e4a4f3ee7d6836acb1a2", "patch": "@@ -50,14 +50,10 @@\n extern \"C\" {\n #endif\n \n-#ifdef __alpha_vxworks\n-#include \"vxWorks.h\"\n-#endif\n-\n #ifdef IN_RTS\n #define POSIX\n-#include \"tconfig.h\"\n-#include \"tsystem.h\"\n+#include \"runtime.h\"\n+#include <stddef.h>\n #else\n #include \"config.h\"\n #include \"system.h\""}]}