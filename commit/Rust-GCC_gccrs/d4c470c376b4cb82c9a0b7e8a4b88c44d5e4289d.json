{"sha": "d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d", "node_id": "C_kwDOANBUbNoAKGQ0YzQ3MGMzNzZiNGNiODJjOWEwYjdlOGE0Yjg4YzQ0ZDVlNDI4OWQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-10-05T19:35:21Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-10-05T19:35:21Z"}, "message": "c++: unifying equal NONTYPE_ARGUMENT_PACKs [PR102547]\n\nHere during partial ordering of the two partial specializations we end\nup in unify with parm=arg=NONTYPE_ARGUMENT_PACK<V0, V1>, and crash shortly\nthereafter because uses_template_parms(parms) calls potential_const_expr\nwhich doesn't handle NONTYPE_ARGUMENT_PACK.\n\nThis patch fixes this by extending potential_constant_expression to handle\nNONTYPE_ARGUMENT_PACK appropriately.\n\n\tPR c++/102547\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.c (potential_constant_expression_1): Handle\n\tNONTYPE_ARGUMENT_PACK.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/variadic-partial2.C: New test.\n\t* g++.dg/cpp0x/variadic-partial2a.C: New test.", "tree": {"sha": "3732ff7652e2120e50d373161c847f0970ac8b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3732ff7652e2120e50d373161c847f0970ac8b11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d/comments", "author": null, "committer": null, "parents": [{"sha": "ec0124e0acb556cdf5dba0e8d0ca6b69d9537fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0124e0acb556cdf5dba0e8d0ca6b69d9537fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec0124e0acb556cdf5dba0e8d0ca6b69d9537fcc"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "e95ff00774fce83743e3a56ebe977001eaeb839d", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d", "patch": "@@ -9043,6 +9043,16 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n     case CO_RETURN_EXPR:\n       return false;\n \n+    case NONTYPE_ARGUMENT_PACK:\n+      {\n+\ttree args = ARGUMENT_PACK_ARGS (t);\n+\tint len = TREE_VEC_LENGTH (args);\n+\tfor (int i = 0; i < len; ++i)\n+\t  if (!RECUR (TREE_VEC_ELT (args, i), any))\n+\t    return false;\n+\treturn true;\n+      }\n+\n     default:\n       if (objc_non_constant_expr_p (t))\n \treturn false;"}, {"sha": "df61f26a3c16552bd6592fa7687ff87ef2eedf70", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-partial2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-partial2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-partial2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-partial2.C?ref=d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/102547\n+// { dg-do compile { target c++11 } }\n+\n+template<int... Vs>\n+struct vals { };\n+\n+template<class V, class T>\n+struct vals_client { };\n+\n+template<int V0, int V1, class T>\n+struct vals_client<vals<V0, V1>, T> { };\n+\n+template<int V0, int V1>\n+struct vals_client<vals<V0, V1>, void> { };\n+\n+template struct vals_client<vals<1, 2>, void>; //- \"sorry, unimplemented..., ICE\""}, {"sha": "e98bdbbc07bf4d2c72c1e574c5e5223aeff1d007", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-partial2a.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-partial2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-partial2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-partial2a.C?ref=d4c470c376b4cb82c9a0b7e8a4b88c44d5e4289d", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/102547\n+// { dg-do compile { target c++11 } }\n+// A version of variadic-partial2.C where partial ordering is performed\n+// on function templates instead of class templates.\n+\n+template<int... Vs>\n+struct vals { };\n+\n+template<class V, class T>\n+void f(V, T) { };\n+\n+template<int V0, int V1, class T>\n+void f(vals<V0, V1>, T) { };\n+\n+template<int V0, int V1>\n+void f(vals<V0, V1>, char) { };\n+\n+template void f(vals<1, 2>, char); //- \"sorry, unimplemented..., ICE\"\n+\n+int main() {\n+  f(vals<1, 3>{}, 'a'); //- \"sorry, unimplemented..., ICE\"\n+}"}]}