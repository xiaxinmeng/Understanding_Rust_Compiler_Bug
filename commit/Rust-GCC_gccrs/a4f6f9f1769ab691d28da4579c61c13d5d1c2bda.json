{"sha": "a4f6f9f1769ab691d28da4579c61c13d5d1c2bda", "node_id": "C_kwDOANBUbNoAKGE0ZjZmOWYxNzY5YWI2OTFkMjhkYTQ1NzljNjFjMTNkNWQxYzJiZGE", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-02-04T17:53:43Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-12T12:38:35Z"}, "message": "[Ada] Rewrite Sem_Ch4.Find_Boolean_Types\n\nUsing a straight implementation like the one in Find_Arithmetic_Types.\n\ngcc/ada/\n\n\t* sem_ch4.adb (Find_Arithmetic_Types): Use local variables.\n\t(Find_Boolean_Types): Rewrite modeled on Find_Arithmetic_Types.", "tree": {"sha": "141e85db0e06555dfe68415798390906b6a7e8ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/141e85db0e06555dfe68415798390906b6a7e8ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4f6f9f1769ab691d28da4579c61c13d5d1c2bda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f6f9f1769ab691d28da4579c61c13d5d1c2bda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f6f9f1769ab691d28da4579c61c13d5d1c2bda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f6f9f1769ab691d28da4579c61c13d5d1c2bda/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4fc83c642213b4362533ef548c8fffe208ea59a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4fc83c642213b4362533ef548c8fffe208ea59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4fc83c642213b4362533ef548c8fffe208ea59a"}], "stats": {"total": 142, "additions": 68, "deletions": 74}, "files": [{"sha": "67e42ce0fdb74ac3cf7d135502b8af1e3612a478", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 68, "deletions": 74, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f6f9f1769ab691d28da4579c61c13d5d1c2bda/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f6f9f1769ab691d28da4579c61c13d5d1c2bda/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=a4f6f9f1769ab691d28da4579c61c13d5d1c2bda", "patch": "@@ -6450,11 +6450,6 @@ package body Sem_Ch4 is\n       Op_Id : Entity_Id;\n       N     : Node_Id)\n    is\n-      Index1 : Interp_Index;\n-      Index2 : Interp_Index;\n-      It1    : Interp;\n-      It2    : Interp;\n-\n       procedure Check_Right_Argument (T : Entity_Id);\n       --  Check right operand of operator\n \n@@ -6463,30 +6458,38 @@ package body Sem_Ch4 is\n       --------------------------\n \n       procedure Check_Right_Argument (T : Entity_Id) is\n+         I  : Interp_Index;\n+         It : Interp;\n+\n       begin\n          if not Is_Overloaded (R) then\n             Check_Arithmetic_Pair (T, Etype (R), Op_Id, N);\n \n          else\n-            Get_First_Interp (R, Index2, It2);\n-            while Present (It2.Typ) loop\n-               Check_Arithmetic_Pair (T, It2.Typ, Op_Id, N);\n-               Get_Next_Interp (Index2, It2);\n+            Get_First_Interp (R, I, It);\n+            while Present (It.Typ) loop\n+               Check_Arithmetic_Pair (T, It.Typ, Op_Id, N);\n+               Get_Next_Interp (I, It);\n             end loop;\n          end if;\n       end Check_Right_Argument;\n \n+      --  Local variables\n+\n+      I  : Interp_Index;\n+      It : Interp;\n+\n    --  Start of processing for Find_Arithmetic_Types\n \n    begin\n       if not Is_Overloaded (L) then\n          Check_Right_Argument (Etype (L));\n \n       else\n-         Get_First_Interp (L, Index1, It1);\n-         while Present (It1.Typ) loop\n-            Check_Right_Argument (It1.Typ);\n-            Get_Next_Interp (Index1, It1);\n+         Get_First_Interp (L, I, It);\n+         while Present (It.Typ) loop\n+            Check_Right_Argument (It.Typ);\n+            Get_Next_Interp (I, It);\n          end loop;\n       end if;\n    end Find_Arithmetic_Types;\n@@ -6500,86 +6503,77 @@ package body Sem_Ch4 is\n       Op_Id : Entity_Id;\n       N     : Node_Id)\n    is\n-      Index : Interp_Index;\n-      It    : Interp;\n+      procedure Check_Boolean_Pair (T1, T2 : Entity_Id);\n+      --  Check operand pair of operator\n \n-      procedure Check_Numeric_Argument (T : Entity_Id);\n-      --  Special case for logical operations one of whose operands is an\n-      --  integer literal. If both are literal the result is any modular type.\n+      procedure Check_Right_Argument (T : Entity_Id);\n+      --  Check right operand of operator\n \n-      ----------------------------\n-      -- Check_Numeric_Argument --\n-      ----------------------------\n+      ------------------------\n+      -- Check_Boolean_Pair --\n+      ------------------------\n+\n+      procedure Check_Boolean_Pair (T1, T2 : Entity_Id) is\n+         T : Entity_Id;\n \n-      procedure Check_Numeric_Argument (T : Entity_Id) is\n       begin\n-         if T = Universal_Integer then\n-            Add_One_Interp (N, Op_Id, Any_Modular);\n+         if Valid_Boolean_Arg (T1)\n+           and then Valid_Boolean_Arg (T2)\n+           and then (Covers (T1 => T1, T2 => T2)\n+                      or else Covers (T1 => T2, T2 => T1))\n+         then\n+            T := Specific_Type (T1, T2);\n+\n+            if T = Universal_Integer then\n+               T := Any_Modular;\n+            end if;\n \n-         elsif Is_Modular_Integer_Type (T) then\n             Add_One_Interp (N, Op_Id, T);\n          end if;\n-      end Check_Numeric_Argument;\n+      end Check_Boolean_Pair;\n \n-   --  Start of processing for Find_Boolean_Types\n+      --------------------------\n+      -- Check_Right_Argument --\n+      --------------------------\n \n-   begin\n-      if not Is_Overloaded (L) then\n-         if Etype (L) = Universal_Integer\n-           or else Etype (L) = Any_Modular\n-         then\n-            if not Is_Overloaded (R) then\n-               Check_Numeric_Argument (Etype (R));\n+      procedure Check_Right_Argument (T : Entity_Id) is\n+         I  : Interp_Index;\n+         It : Interp;\n \n-            else\n-               Get_First_Interp (R, Index, It);\n-               while Present (It.Typ) loop\n-                  Check_Numeric_Argument (It.Typ);\n-                  Get_Next_Interp (Index, It);\n-               end loop;\n-            end if;\n+      begin\n+         --  Defend against previous error\n \n-         --  If operands are aggregates, we must assume that they may be\n-         --  boolean arrays, and leave disambiguation for the second pass.\n-         --  If only one is an aggregate, verify that the other one has an\n-         --  interpretation as a boolean array\n+         if Nkind (R) = N_Error then\n+            null;\n \n-         elsif Nkind (L) = N_Aggregate then\n-            if Nkind (R) = N_Aggregate then\n-               Add_One_Interp (N, Op_Id, Etype (L));\n+         elsif not Is_Overloaded (R) then\n+            Check_Boolean_Pair (T, Etype (R));\n \n-            elsif not Is_Overloaded (R) then\n-               if Valid_Boolean_Arg (Etype (R)) then\n-                  Add_One_Interp (N, Op_Id, Etype (R));\n-               end if;\n+         else\n+            Get_First_Interp (R, I, It);\n+            while Present (It.Typ) loop\n+               Check_Boolean_Pair (T, It.Typ);\n+               Get_Next_Interp (I, It);\n+            end loop;\n+         end if;\n+      end Check_Right_Argument;\n \n-            else\n-               Get_First_Interp (R, Index, It);\n-               while Present (It.Typ) loop\n-                  if Valid_Boolean_Arg (It.Typ) then\n-                     Add_One_Interp (N, Op_Id, It.Typ);\n-                  end if;\n+      --  Local variables\n \n-                  Get_Next_Interp (Index, It);\n-               end loop;\n-            end if;\n+      I  : Interp_Index;\n+      It : Interp;\n \n-         elsif Valid_Boolean_Arg (Etype (L))\n-           and then Has_Compatible_Type (R, Etype (L))\n-         then\n-            Add_One_Interp (N, Op_Id, Etype (L));\n-         end if;\n+   --  Start of processing for Find_Boolean_Types\n+\n+   begin\n+      if not Is_Overloaded (L) then\n+         Check_Right_Argument (Etype (L));\n \n       else\n-         Get_First_Interp (L, Index, It);\n+         Get_First_Interp (L, I, It);\n          while Present (It.Typ) loop\n-            if Valid_Boolean_Arg (It.Typ)\n-              and then Has_Compatible_Type (R, It.Typ)\n-            then\n-               Add_One_Interp (N, Op_Id, It.Typ);\n-            end if;\n-\n-            Get_Next_Interp (Index, It);\n+            Check_Right_Argument (It.Typ);\n+            Get_Next_Interp (I, It);\n          end loop;\n       end if;\n    end Find_Boolean_Types;"}]}