{"sha": "4f0055bd4e338c4662fe9002ebeb6668310edaa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwMDU1YmQ0ZTMzOGM0NjYyZmU5MDAyZWJlYjY2NjgzMTBlZGFhMQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2015-12-05T12:53:45Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2015-12-05T12:53:45Z"}, "message": "re PR target/68609 (PowerPC reciprocal estimate missed opportunities)\n\n        PR target/68609\n        * config/rs6000/rs6000-protos.h (rs6000_emit_swsqrt): Rename and add\n        bool arguement.\n        * config/rs6000/rs6000.c (rs6000_emit_swsqrt): Rename. Add\n        non-reciporcal path.\n        * config/rs6000/rs6000.md (rsqrt<mode>2): Call new function name.\n        (sqrt<mode>2): Replace define_insn with define_expand that may call\n        rs6000_emit_swsqrt.\n\nFrom-SVN: r231317", "tree": {"sha": "8574c0b63756a5210131719de04f374a6b5560ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8574c0b63756a5210131719de04f374a6b5560ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0055bd4e338c4662fe9002ebeb6668310edaa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0055bd4e338c4662fe9002ebeb6668310edaa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0055bd4e338c4662fe9002ebeb6668310edaa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0055bd4e338c4662fe9002ebeb6668310edaa1/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5169d82c38343d6bdd34962bedc019aca036198a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5169d82c38343d6bdd34962bedc019aca036198a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5169d82c38343d6bdd34962bedc019aca036198a"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "0d4e6f2decf0ed8ddbe612c1b37a880a9f043194", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0055bd4e338c4662fe9002ebeb6668310edaa1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0055bd4e338c4662fe9002ebeb6668310edaa1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f0055bd4e338c4662fe9002ebeb6668310edaa1", "patch": "@@ -1,3 +1,14 @@\n+2015-12-05  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/68609\n+\t* config/rs6000/rs6000-protos.h (rs6000_emit_swsqrt): Rename and add\n+\tbool arguement.\n+\t* config/rs6000/rs6000.c (rs6000_emit_swsqrt): Rename. Add\n+\tnon-reciporcal path.\n+\t* config/rs6000/rs6000.md (rsqrt<mode>2): Call new function name.\n+\t(sqrt<mode>2): Replace define_insn with define_expand that may call\n+\trs6000_emit_swsqrt.\n+\t\n 2015-12-04  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "d9c7a79af3955e8a8beb651460ea73031b6eb849", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0055bd4e338c4662fe9002ebeb6668310edaa1/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0055bd4e338c4662fe9002ebeb6668310edaa1/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=4f0055bd4e338c4662fe9002ebeb6668310edaa1", "patch": "@@ -137,7 +137,7 @@ extern void rs6000_expand_atomic_compare_and_swap (rtx op[]);\n extern void rs6000_expand_atomic_exchange (rtx op[]);\n extern void rs6000_expand_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n extern void rs6000_emit_swdiv (rtx, rtx, rtx, bool);\n-extern void rs6000_emit_swrsqrt (rtx, rtx);\n+extern void rs6000_emit_swsqrt (rtx, rtx, bool);\n extern void output_toc (FILE *, rtx, int, machine_mode);\n extern rtx rs6000_longcall_ref (rtx);\n extern void rs6000_fatal_bad_address (rtx);"}, {"sha": "6b22f93e0ffbd053b1b85e4b4345e642543fad7c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0055bd4e338c4662fe9002ebeb6668310edaa1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0055bd4e338c4662fe9002ebeb6668310edaa1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4f0055bd4e338c4662fe9002ebeb6668310edaa1", "patch": "@@ -32910,7 +32910,7 @@ rs6000_emit_swdiv (rtx dst, rtx n, rtx d, bool note_p)\n    rsqrt.  Assumes no trapping math and finite arguments.  */\n \n void\n-rs6000_emit_swrsqrt (rtx dst, rtx src)\n+rs6000_emit_swsqrt (rtx dst, rtx src, bool recip)\n {\n   machine_mode mode = GET_MODE (src);\n   rtx x0 = gen_reg_rtx (mode);\n@@ -32943,6 +32943,16 @@ rs6000_emit_swrsqrt (rtx dst, rtx src)\n   emit_insn (gen_rtx_SET (x0, gen_rtx_UNSPEC (mode, gen_rtvec (1, src),\n \t\t\t\t\t      UNSPEC_RSQRT)));\n \n+  /* If (src == 0.0) filter infinity to prevent NaN for sqrt(0.0).  */\n+  if (!recip)\n+    {\n+      rtx zero = force_reg (mode, CONST0_RTX (mode));\n+      rtx target = emit_conditional_move (x0, GT, src, zero, mode,\n+\t\t\t\t\t  x0, zero, mode, 0);\n+      if (target != x0)\n+\temit_move_insn (x0, target);\n+    }\n+\n   /* y = 0.5 * src = 1.5 * src - src -> fewer constants */\n   rs6000_emit_msub (y, src, halfthree, src);\n \n@@ -32959,7 +32969,12 @@ rs6000_emit_swrsqrt (rtx dst, rtx src)\n       x0 = x1;\n     }\n \n-  emit_move_insn (dst, x0);\n+  /* If not reciprocal, multiply by src to produce sqrt.  */\n+  if (!recip)\n+    emit_insn (gen_mul (dst, src, x0));\n+  else\n+    emit_move_insn (dst, x0);\n+\n   return;\n }\n "}, {"sha": "66a62ef41863e3ddd316368dc355138ec4661d59", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0055bd4e338c4662fe9002ebeb6668310edaa1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0055bd4e338c4662fe9002ebeb6668310edaa1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=4f0055bd4e338c4662fe9002ebeb6668310edaa1", "patch": "@@ -4301,7 +4301,7 @@\n    (match_operand:RECIPF 1 \"gpc_reg_operand\" \"\")]\n   \"RS6000_RECIP_HAVE_RSQRTE_P (<MODE>mode)\"\n {\n-  rs6000_emit_swrsqrt (operands[0], operands[1]);\n+  rs6000_emit_swsqrt (operands[0], operands[1], 1);\n   DONE;\n })\n \f\n@@ -4426,7 +4426,7 @@\n   [(set_attr \"type\" \"<Fs>div\")\n    (set_attr \"fp_type\" \"fp_div_<Fs>\")])\n \n-(define_insn \"sqrt<mode>2\"\n+(define_insn \"*sqrt<mode>2_internal\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>\")\n \t(sqrt:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"<Ff>,<Fv2>\")))]\n   \"TARGET_<MODE>_FPR && !TARGET_SIMPLE_FPU\n@@ -4437,6 +4437,23 @@\n   [(set_attr \"type\" \"<Fs>sqrt\")\n    (set_attr \"fp_type\" \"fp_sqrt_<Fs>\")])\n \n+(define_expand \"sqrt<mode>2\"\n+  [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"\")\n+\t(sqrt:SFDF (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_<MODE>_FPR && !TARGET_SIMPLE_FPU\n+   && (TARGET_PPC_GPOPT || (<MODE>mode == SFmode && TARGET_XILINX_FPU))\"\n+{\n+  if (<MODE>mode == SFmode\n+      && RS6000_RECIP_HAVE_RSQRTE_P (<MODE>mode)\n+      && !optimize_function_for_size_p (cfun)\n+      && flag_finite_math_only && !flag_trapping_math\n+      && flag_unsafe_math_optimizations)\n+    {\n+      rs6000_emit_swsqrt (operands[0], operands[1], 0);\n+      DONE;\n+    }\n+})\n+\n ;; Floating point reciprocal approximation\n (define_insn \"fre<Fs>\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>\")"}]}