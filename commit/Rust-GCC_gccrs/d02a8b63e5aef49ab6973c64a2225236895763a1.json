{"sha": "d02a8b63e5aef49ab6973c64a2225236895763a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyYThiNjNlNWFlZjQ5YWI2OTczYzY0YTIyMjUyMzY4OTU3NjNhMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-07T08:57:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-07T08:57:40Z"}, "message": "bswap: Fix up recent vector CONSTRUCTOR optimization [PR98568]\n\nAs the testcase shows, bswap can match even byte-swapping or indentity\nfrom low part of some wider SSA_NAME.\nFor bswap replacement other than for vector CONSTRUCTOR the code has been\nusing NOP_EXPR casts if the types weren't compatible, but for vectors\nwe need to use VIEW_CONVERT_EXPR.  The problem with the latter is that\nwe require that it has the same size, which isn't guaranteed, so this patch\nin those cases first adds a narrowing NOP_EXPR cast and only afterwards\ndoes a VIEW_CONVERT_EXPR.\n\n2021-01-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/98568\n\t* gimple-ssa-store-merging.c (bswap_view_convert): New function.\n\t(bswap_replace): Use it.\n\n\t* g++.dg/torture/pr98568.C: New test.", "tree": {"sha": "870dab1a33b91c1c4108ff01508567926a465419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/870dab1a33b91c1c4108ff01508567926a465419"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d02a8b63e5aef49ab6973c64a2225236895763a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02a8b63e5aef49ab6973c64a2225236895763a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d02a8b63e5aef49ab6973c64a2225236895763a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02a8b63e5aef49ab6973c64a2225236895763a1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b5669752426d225b0088d57d1d2fffba9625032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b5669752426d225b0088d57d1d2fffba9625032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b5669752426d225b0088d57d1d2fffba9625032"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "f0f4a068de583b1cd0a9230e7ad5aeb88ef5a4a7", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02a8b63e5aef49ab6973c64a2225236895763a1/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02a8b63e5aef49ab6973c64a2225236895763a1/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=d02a8b63e5aef49ab6973c64a2225236895763a1", "patch": "@@ -978,6 +978,25 @@ class pass_optimize_bswap : public gimple_opt_pass\n \n }; // class pass_optimize_bswap\n \n+/* Helper function for bswap_replace.  Build VIEW_CONVERT_EXPR from\n+   VAL to TYPE.  If VAL has different type size, emit a NOP_EXPR cast\n+   first.  */\n+\n+static tree\n+bswap_view_convert (gimple_stmt_iterator *gsi, tree type, tree val)\n+{\n+  gcc_assert (INTEGRAL_TYPE_P (TREE_TYPE (val)));\n+  if (TYPE_SIZE (type) != TYPE_SIZE (TREE_TYPE (val)))\n+    {\n+      HOST_WIDE_INT prec = TREE_INT_CST_LOW (TYPE_SIZE (type));\n+      tree itype = build_nonstandard_integer_type (prec, 1);\n+      gimple *g = gimple_build_assign (make_ssa_name (itype), NOP_EXPR, val);\n+      gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+      val = gimple_assign_lhs (g);\n+    }\n+  return build1 (VIEW_CONVERT_EXPR, type, val);\n+}\n+\n /* Perform the bswap optimization: replace the expression computed in the rhs\n    of gsi_stmt (GSI) (or if NULL add instead of replace) by an equivalent\n    bswap, load or load + bswap expression.\n@@ -1100,7 +1119,7 @@ bswap_replace (gimple_stmt_iterator gsi, gimple *ins_stmt, tree fndecl,\n \t      gimple_set_vuse (load_stmt, n->vuse);\n \t      gsi_insert_before (&gsi, load_stmt, GSI_SAME_STMT);\n \t      if (conv_code == VIEW_CONVERT_EXPR)\n-\t\tval_tmp = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (tgt), val_tmp);\n+\t\tval_tmp = bswap_view_convert (&gsi, TREE_TYPE (tgt), val_tmp);\n \t      gimple_assign_set_rhs_with_ops (&gsi, conv_code, val_tmp);\n \t      update_stmt (cur_stmt);\n \t    }\n@@ -1144,7 +1163,7 @@ bswap_replace (gimple_stmt_iterator gsi, gimple *ins_stmt, tree fndecl,\n \t  if (!is_gimple_val (src))\n \t    return NULL_TREE;\n \t  if (conv_code == VIEW_CONVERT_EXPR)\n-\t    src = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (tgt), src);\n+\t    src = bswap_view_convert (&gsi, TREE_TYPE (tgt), src);\n \t  g = gimple_build_assign (tgt, conv_code, src);\n \t}\n       else if (cur_stmt)\n@@ -1227,7 +1246,7 @@ bswap_replace (gimple_stmt_iterator gsi, gimple *ins_stmt, tree fndecl,\n       tmp = make_temp_ssa_name (bswap_type, NULL, \"bswapdst\");\n       tree atmp = tmp;\n       if (conv_code == VIEW_CONVERT_EXPR)\n-\tatmp = build1 (VIEW_CONVERT_EXPR, TREE_TYPE (tgt), tmp);\n+\tatmp = bswap_view_convert (&gsi, TREE_TYPE (tgt), tmp);\n       convert_stmt = gimple_build_assign (tgt, conv_code, atmp);\n       gsi_insert_after (&gsi, convert_stmt, GSI_SAME_STMT);\n     }"}, {"sha": "5c20223c78352681a17015a6c987839802a2b683", "filename": "gcc/testsuite/g++.dg/torture/pr98568.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02a8b63e5aef49ab6973c64a2225236895763a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr98568.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02a8b63e5aef49ab6973c64a2225236895763a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr98568.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr98568.C?ref=d02a8b63e5aef49ab6973c64a2225236895763a1", "patch": "@@ -0,0 +1,37 @@\n+// PR tree-optimization/98568\n+// { dg-do compile }\n+\n+char a[2];\n+char b[4];\n+\n+void\n+foo (int x)\n+{\n+  a[1] = x >> 8;\n+  a[0] = x;\n+}\n+\n+void\n+bar (long long x)\n+{\n+  b[3] = x >> 24;\n+  b[2] = x >> 16;\n+  b[1] = x >> 8;\n+  b[0] = x;\n+}\n+\n+void\n+baz (int x)\n+{\n+  a[0] = x >> 8;\n+  a[1] = x;\n+}\n+\n+void\n+qux (long long x)\n+{\n+  b[0] = x >> 24;\n+  b[1] = x >> 16;\n+  b[2] = x >> 8;\n+  b[3] = x;\n+}"}]}