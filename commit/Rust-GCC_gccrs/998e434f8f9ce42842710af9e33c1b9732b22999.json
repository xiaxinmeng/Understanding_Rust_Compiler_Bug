{"sha": "998e434f8f9ce42842710af9e33c1b9732b22999", "node_id": "C_kwDOANBUbNoAKDk5OGU0MzRmOGY5Y2U0Mjg0MjcxMGFmOWUzM2MxYjk3MzJiMjI5OTk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-01T08:32:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-01T08:32:10Z"}, "message": "openmp: Add alloc_align attribute to omp_aligned_*alloc and testcase for omp_realloc\n\nThis patch adds alloc_align attribute to omp_aligned_{,c}alloc so that if\nthe first argument is constant, GCC can assume requested alignment.\n\nAdditionally, it adds testsuite coverage for omp_realloc which I haven't\nmanaged to write in the patch from yesterday.\n\n2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n\n\t* omp.h.in (omp_aligned_alloc, omp_aligned_calloc): Add\n\t__alloc_align__ (1) attribute.\n\t* testsuite/libgomp.c-c++-common/alloc-9.c: New test.", "tree": {"sha": "81ef10d26946e81329f6d0227fb5b3807e04b366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81ef10d26946e81329f6d0227fb5b3807e04b366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/998e434f8f9ce42842710af9e33c1b9732b22999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998e434f8f9ce42842710af9e33c1b9732b22999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/998e434f8f9ce42842710af9e33c1b9732b22999", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998e434f8f9ce42842710af9e33c1b9732b22999/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "701075864ac4d1c6cec936d10f9cfc2aeb8c1699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/701075864ac4d1c6cec936d10f9cfc2aeb8c1699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/701075864ac4d1c6cec936d10f9cfc2aeb8c1699"}], "stats": {"total": 275, "additions": 273, "deletions": 2}, "files": [{"sha": "d75ee13c16da370de6e2b333e087fb4374c6d696", "filename": "libgomp/omp.h.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998e434f8f9ce42842710af9e33c1b9732b22999/libgomp%2Fomp.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998e434f8f9ce42842710af9e33c1b9732b22999/libgomp%2Fomp.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fomp.h.in?ref=998e434f8f9ce42842710af9e33c1b9732b22999", "patch": "@@ -306,7 +306,7 @@ extern void *omp_aligned_alloc (__SIZE_TYPE__, __SIZE_TYPE__,\n \t\t\t\tomp_allocator_handle_t\n \t\t\t\t__GOMP_DEFAULT_NULL_ALLOCATOR)\n   __GOMP_NOTHROW __attribute__((__malloc__, __malloc__ (omp_free),\n-\t\t\t\t__alloc_size__ (2)));\n+\t\t\t\t__alloc_size__ (2), __alloc_align__ (1)));\n extern void *omp_calloc (__SIZE_TYPE__, __SIZE_TYPE__,\n \t\t\t omp_allocator_handle_t __GOMP_DEFAULT_NULL_ALLOCATOR)\n   __GOMP_NOTHROW __attribute__((__malloc__, __malloc__ (omp_free),\n@@ -315,7 +315,7 @@ extern void *omp_aligned_calloc (__SIZE_TYPE__, __SIZE_TYPE__, __SIZE_TYPE__,\n \t\t\t\t omp_allocator_handle_t\n \t\t\t\t __GOMP_DEFAULT_NULL_ALLOCATOR)\n   __GOMP_NOTHROW __attribute__((__malloc__, __malloc__ (omp_free),\n-\t\t\t\t__alloc_size__ (2, 3)));\n+\t\t\t\t__alloc_size__ (2, 3), __alloc_align__ (1)));\n extern void *omp_realloc (void *, __SIZE_TYPE__,\n \t\t\t  omp_allocator_handle_t __GOMP_DEFAULT_NULL_ALLOCATOR,\n \t\t\t  omp_allocator_handle_t __GOMP_DEFAULT_NULL_ALLOCATOR)"}, {"sha": "e4b7baf01b291a9b2857aff33c732f6cbde38efb", "filename": "libgomp/testsuite/libgomp.c-c++-common/alloc-9.c", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998e434f8f9ce42842710af9e33c1b9732b22999/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998e434f8f9ce42842710af9e33c1b9732b22999/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Falloc-9.c?ref=998e434f8f9ce42842710af9e33c1b9732b22999", "patch": "@@ -0,0 +1,271 @@\n+#include <omp.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+const omp_alloctrait_t traits2[]\n+= { { omp_atk_alignment, 16 },\n+    { omp_atk_sync_hint, omp_atv_default },\n+    { omp_atk_access, omp_atv_default },\n+    { omp_atk_pool_size, 1024 },\n+    { omp_atk_fallback, omp_atv_default_mem_fb },\n+    { omp_atk_partition, omp_atv_environment } };\n+omp_alloctrait_t traits3[]\n+= { { omp_atk_sync_hint, omp_atv_uncontended },\n+    { omp_atk_alignment, 32 },\n+    { omp_atk_access, omp_atv_all },\n+    { omp_atk_pool_size, 512 },\n+    { omp_atk_fallback, omp_atv_allocator_fb },\n+    { omp_atk_fb_data, 0 },\n+    { omp_atk_partition, omp_atv_default } };\n+const omp_alloctrait_t traits4[]\n+= { { omp_atk_alignment, 128 },\n+    { omp_atk_pool_size, 1024 },\n+    { omp_atk_fallback, omp_atv_null_fb } };\n+\n+int\n+main ()\n+{\n+  int *volatile p = (int *) omp_alloc (3 * sizeof (int), omp_default_mem_alloc);\n+  int *volatile q;\n+  int *volatile r;\n+  omp_alloctrait_t traits[3]\n+    = { { omp_atk_alignment, 64 },\n+\t{ omp_atk_fallback, omp_atv_null_fb },\n+\t{ omp_atk_pool_size, 4096 } };\n+  omp_alloctrait_t traits5[2]\n+    = { { omp_atk_fallback, omp_atv_null_fb },\n+\t{ omp_atk_pool_size, 4096 } };\n+  omp_allocator_handle_t a, a2;\n+\n+  if ((((uintptr_t) p) % __alignof (int)) != 0)\n+    abort ();\n+  p[0] = 1;\n+  p[1] = 2;\n+  p[2] = 3;\n+  p = (int *) omp_realloc (p, 4 * sizeof (int), omp_default_mem_alloc, omp_default_mem_alloc);\n+  if ((((uintptr_t) p) % __alignof (int)) != 0 || p[0] != 1 || p[1] != 2 || p[2] != 3)\n+    abort ();\n+  p[0] = 4;\n+  p[1] = 5;\n+  p[2] = 6;\n+  p[3] = 7;\n+  p = (int *) omp_realloc (p, 2 * sizeof (int), omp_default_mem_alloc, omp_default_mem_alloc);\n+  if ((((uintptr_t) p) % __alignof (int)) != 0 || p[0] != 4 || p[1] != 5)\n+    abort ();\n+  p[0] = 8;\n+  p[1] = 9;\n+  if (omp_realloc (p, 0, omp_null_allocator, omp_default_mem_alloc) != NULL)\n+    abort ();\n+  p = (int *) omp_realloc (NULL, 2 * sizeof (int), omp_default_mem_alloc, omp_null_allocator);\n+  if ((((uintptr_t) p) % __alignof (int)) != 0)\n+    abort ();\n+  p[0] = 1;\n+  p[1] = 2;\n+  p = (int *) omp_realloc (p, 5 * sizeof (int), omp_default_mem_alloc, omp_default_mem_alloc);\n+  if ((((uintptr_t) p) % __alignof (int)) != 0 || p[0] != 1 || p[1] != 2)\n+    abort ();\n+  p[0] = 3;\n+  p[1] = 4;\n+  p[2] = 5;\n+  p[3] = 6;\n+  p[4] = 7;\n+  omp_free (p, omp_null_allocator);\n+  omp_set_default_allocator (omp_default_mem_alloc);\n+  if (omp_realloc (NULL, 0, omp_null_allocator, omp_null_allocator) != NULL)\n+    abort ();\n+  p = (int *) omp_alloc (sizeof (int), omp_null_allocator);\n+  if ((((uintptr_t) p) % __alignof (int)) != 0)\n+    abort ();\n+  p[0] = 3;\n+  p = (int *) omp_realloc (p, 3 * sizeof (int), omp_null_allocator, omp_null_allocator);\n+  if ((((uintptr_t) p) % __alignof (int)) != 0 || p[0] != 3)\n+    abort ();\n+  p[0] = 4;\n+  p[1] = 5;\n+  p[2] = 6;\n+  if (omp_realloc (p, 0, omp_null_allocator, omp_get_default_allocator ()) != NULL)\n+    abort ();\n+  a = omp_init_allocator (omp_default_mem_space, 3, traits);\n+  if (a == omp_null_allocator)\n+    abort ();\n+  p = (int *) omp_alloc (sizeof (int), a);\n+  if ((((uintptr_t) p) % 64) != 0)\n+    abort ();\n+  p[0] = 7;\n+  p = (int *) omp_realloc (p, 3072, a, a);\n+  if ((((uintptr_t) p) % 64) != 0 || p[0] != 7)\n+    abort ();\n+  p[0] = 1;\n+  p[3071 / sizeof (int)] = 2;\n+  q = (int *) omp_alloc (sizeof (int), a);\n+  if ((((uintptr_t) q) % 64) != 0)\n+    abort ();\n+  q[0] = 8;\n+  if (omp_realloc (q, 3072, a, a) != NULL)\n+    abort ();\n+  omp_free (p, a);\n+  omp_free (q, a);\n+  p = (int *) omp_alloc (sizeof (int), a);\n+  p[0] = 42;\n+  p = (int *) omp_realloc (p, 3072, a, a);\n+  if (p[0] != 42)\n+    abort ();\n+  p[0] = 3;\n+  p[3071 / sizeof (int)] = 4;\n+  omp_realloc (p, 0, omp_null_allocator, omp_null_allocator);\n+  omp_set_default_allocator (a);\n+  if (omp_get_default_allocator () != a)\n+    abort ();\n+  p = (int *) omp_alloc (31, omp_null_allocator);\n+  if (p == NULL)\n+    abort ();\n+  p = (int *) omp_realloc (p, 3072, omp_null_allocator, omp_null_allocator);\n+  if (p == NULL)\n+    abort ();\n+  q = (int *) omp_alloc (sizeof (int), omp_null_allocator);\n+  if (q == NULL)\n+    abort ();\n+  if (omp_realloc (q, 3072, omp_null_allocator, omp_null_allocator) != NULL)\n+    abort ();\n+  omp_free (p, a);\n+  omp_free (q, a);\n+  omp_destroy_allocator (a);\n+\n+  a = omp_init_allocator (omp_default_mem_space, 2, traits5);\n+  if (a == omp_null_allocator)\n+    abort ();\n+  omp_set_default_allocator (a);\n+  if (omp_get_default_allocator () != a)\n+    abort ();\n+  p = (int *) omp_alloc (3071, omp_null_allocator);\n+  if (p == NULL)\n+    abort ();\n+  p = (int *) omp_realloc (p, 3072, omp_null_allocator, omp_null_allocator);\n+  if (p == NULL)\n+    abort ();\n+  q = (int *) omp_alloc (sizeof (int), omp_null_allocator);\n+  if (q == NULL)\n+    abort ();\n+  if (omp_realloc (q, 3072, omp_null_allocator, omp_null_allocator) != NULL)\n+    abort ();\n+  omp_free (p, a);\n+  omp_free (q, a);\n+  omp_destroy_allocator (a);\n+\n+  a = omp_init_allocator (omp_default_mem_space,\n+\t\t\t  sizeof (traits2) / sizeof (traits2[0]),\n+\t\t\t  traits2);\n+  if (a == omp_null_allocator)\n+    abort ();\n+  if (traits3[5].key != omp_atk_fb_data)\n+    abort ();\n+  traits3[5].value = (uintptr_t) a;\n+  a2 = omp_init_allocator (omp_default_mem_space,\n+\t\t\t   sizeof (traits3) / sizeof (traits3[0]),\n+\t\t\t   traits3);\n+  if (a2 == omp_null_allocator)\n+    abort ();\n+  p = (int *) omp_alloc (sizeof (int), a2);\n+  if ((((uintptr_t) p) % 32) != 0)\n+    abort ();\n+  p[0] = 84;\n+  p = (int *) omp_realloc (p, 380, a2, a2);\n+  if ((((uintptr_t) p) % 32) != 0 || p[0] != 84)\n+    abort ();\n+  p[0] = 5;\n+  p[379 / sizeof (int)] = 6;\n+  q = (int *) omp_alloc (sizeof (int), a2);\n+  if ((((uintptr_t) q) % 32) != 0)\n+    abort ();\n+  q[0] = 42;\n+  q = (int *) omp_realloc (q, 768, a2, a2);\n+  if ((((uintptr_t) q) % 16) != 0 || q[0] != 42)\n+    abort ();\n+  q[0] = 7;\n+  q[767 / sizeof (int)] = 8;\n+  r = (int *) omp_realloc (NULL, 512, a2, omp_null_allocator);\n+  if ((((uintptr_t) r) % __alignof (int)) != 0)\n+    abort ();\n+  r[0] = 9;\n+  r[511 / sizeof (int)] = 10;\n+  omp_free (p, omp_null_allocator);\n+  omp_free (q, a2);\n+  omp_free (r, omp_null_allocator);\n+  p = (int *) omp_alloc (sizeof (int), a2);\n+  if ((((uintptr_t) p) % 32) != 0)\n+    abort ();\n+  p[0] = 85;\n+  p = (int *) omp_realloc (p, 420, a, a2);\n+  if ((((uintptr_t) p) % 16) != 0 || p[0] != 85)\n+    abort ();\n+  p[0] = 5;\n+  p[419 / sizeof (int)] = 6;\n+  q = (int *) omp_alloc (sizeof (int), a);\n+  if ((((uintptr_t) q) % 16) != 0)\n+    abort ();\n+  q[0] = 43;\n+  q = (int *) omp_realloc (q, 420, a2, a);\n+  if ((((uintptr_t) q) % 32) != 0 || q[0] != 43)\n+    abort ();\n+  q[0] = 44;\n+  q[419 / sizeof (int)] = 8;\n+  q = (int *) omp_realloc (q, 768, a2, a2);\n+  if ((((uintptr_t) q) % 16) != 0 || q[0] != 44)\n+    abort ();\n+  q[0] = 7;\n+  q[767 / sizeof (int)] = 8;\n+  omp_free (p, omp_null_allocator);\n+  omp_free (q, a2);\n+  omp_destroy_allocator (a2);\n+  omp_destroy_allocator (a);\n+\n+  a = omp_init_allocator (omp_default_mem_space,\n+\t\t\t  sizeof (traits4) / sizeof (traits4[0]),\n+\t\t\t  traits4);\n+  if (a == omp_null_allocator)\n+    abort ();\n+  if (traits3[5].key != omp_atk_fb_data)\n+    abort ();\n+  traits3[5].value = (uintptr_t) a;\n+  a2 = omp_init_allocator (omp_default_mem_space,\n+\t\t\t   sizeof (traits3) / sizeof (traits3[0]),\n+\t\t\t   traits3);\n+  if (a2 == omp_null_allocator)\n+    abort ();\n+  omp_set_default_allocator (a2);\n+#ifdef __cplusplus\n+  p = static_cast <int *> (omp_realloc (NULL, 420));\n+#else\n+  p = (int *) omp_realloc (NULL, 420, omp_null_allocator, omp_null_allocator);\n+#endif\n+  if ((((uintptr_t) p) % 32) != 0)\n+    abort ();\n+  p[0] = 5;\n+  p[419 / sizeof (int)] = 6;\n+  q = (int *) omp_realloc (NULL, sizeof (int), omp_null_allocator, omp_null_allocator);\n+  if ((((uintptr_t) q) % 32) != 0)\n+    abort ();\n+  q[0] = 99;\n+  q = (int *) omp_realloc (q, 700, omp_null_allocator, omp_null_allocator);\n+  if ((((uintptr_t) q) % 128) != 0 || q[0] != 99)\n+    abort ();\n+  q[0] = 7;\n+  q[699 / sizeof (int)] = 8;\n+  if (omp_realloc (NULL, 768, omp_null_allocator, omp_null_allocator) != NULL)\n+    abort ();\n+#ifdef __cplusplus\n+  omp_free (p);\n+  if (omp_realloc (q, 0) != NULL)\n+    abort ();\n+  omp_free (NULL);\n+#else\n+  omp_free (p, omp_null_allocator);\n+  if (omp_realloc (q, 0, omp_null_allocator, omp_null_allocator) != NULL)\n+    abort ();\n+  omp_free (NULL, omp_null_allocator);\n+#endif\n+  omp_free (NULL, omp_null_allocator);\n+  omp_destroy_allocator (a2);\n+  omp_destroy_allocator (a);\n+  return 0;\n+}"}]}