{"sha": "53650abeb3960ae5e097833fdee977c4074f5f97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM2NTBhYmViMzk2MGFlNWUwOTc4MzNmZGVlOTc3YzQwNzRmNWY5Nw==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2009-04-22T23:22:53Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2009-04-22T23:22:53Z"}, "message": "re PR c/31499 (rejects vector int a[] = {1,1,1,1,1};)\n\n2009-04-22  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR C/31499\n        * c-typeck.c (process_init_element): Treat VECTOR_TYPE like ARRAY_TYPE\n        and RECORD_TYPE/UNION_TYPE.  When outputing the actual element and the\n        value is a VECTOR_CST, the element type is the element type of the\n        vector.\n\n2009-04-22  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR C/31499\n        * gcc.dg/vector-init-1.c: New testcase.\n        * gcc.dg/vector-init-2.c: New testcase.\n\nFrom-SVN: r146628", "tree": {"sha": "8a2b08aad5f448475045b459fab1de28915eed36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a2b08aad5f448475045b459fab1de28915eed36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53650abeb3960ae5e097833fdee977c4074f5f97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53650abeb3960ae5e097833fdee977c4074f5f97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53650abeb3960ae5e097833fdee977c4074f5f97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53650abeb3960ae5e097833fdee977c4074f5f97/comments", "author": null, "committer": null, "parents": [{"sha": "912bb79567a3b7bf3824b4e4a97278233bae337a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/912bb79567a3b7bf3824b4e4a97278233bae337a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/912bb79567a3b7bf3824b4e4a97278233bae337a"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "e6a6470a92b11620daee489e960f39a31e08687a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53650abeb3960ae5e097833fdee977c4074f5f97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53650abeb3960ae5e097833fdee977c4074f5f97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53650abeb3960ae5e097833fdee977c4074f5f97", "patch": "@@ -1,3 +1,11 @@\n+2009-04-22  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR C/31499\n+\t* c-typeck.c (process_init_element): Treat VECTOR_TYPE like ARRAY_TYPE\n+\tand RECORD_TYPE/UNION_TYPE.  When outputing the actual element and the\n+\tvalue is a VECTOR_CST, the element type is the element type of the\n+\tvector.\n+\n 2009-04-22  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/m32c.h: Update GTY annotations to new syntax."}, {"sha": "34960a00566aea4a4f984be5e390bf26c144f7bd", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53650abeb3960ae5e097833fdee977c4074f5f97/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53650abeb3960ae5e097833fdee977c4074f5f97/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=53650abeb3960ae5e097833fdee977c4074f5f97", "patch": "@@ -7287,7 +7287,8 @@ process_init_element (struct c_expr value, bool implicit)\n \t   || TREE_CODE (constructor_type) == UNION_TYPE)\n \t  && constructor_fields == 0)\n \tprocess_init_element (pop_init_level (1), true);\n-      else if (TREE_CODE (constructor_type) == ARRAY_TYPE\n+      else if ((TREE_CODE (constructor_type) == ARRAY_TYPE\n+\t        || TREE_CODE (constructor_type) == VECTOR_TYPE)\n \t       && (constructor_max_index == 0\n \t\t   || tree_int_cst_lt (constructor_max_index,\n \t\t\t\t       constructor_index)))\n@@ -7359,7 +7360,7 @@ process_init_element (struct c_expr value, bool implicit)\n \t\t   && value.value != error_mark_node\n \t\t   && TYPE_MAIN_VARIANT (TREE_TYPE (value.value)) != fieldtype\n \t\t   && (fieldcode == RECORD_TYPE || fieldcode == ARRAY_TYPE\n-\t\t       || fieldcode == UNION_TYPE))\n+\t\t       || fieldcode == UNION_TYPE || fieldcode == VECTOR_TYPE))\n \t    {\n \t      push_init_level (1);\n \t      continue;\n@@ -7450,7 +7451,7 @@ process_init_element (struct c_expr value, bool implicit)\n \t\t   && value.value != error_mark_node\n \t\t   && TYPE_MAIN_VARIANT (TREE_TYPE (value.value)) != fieldtype\n \t\t   && (fieldcode == RECORD_TYPE || fieldcode == ARRAY_TYPE\n-\t\t       || fieldcode == UNION_TYPE))\n+\t\t       || fieldcode == UNION_TYPE || fieldcode == VECTOR_TYPE))\n \t    {\n \t      push_init_level (1);\n \t      continue;\n@@ -7491,7 +7492,7 @@ process_init_element (struct c_expr value, bool implicit)\n \t\t   && value.value != error_mark_node\n \t\t   && TYPE_MAIN_VARIANT (TREE_TYPE (value.value)) != elttype\n \t\t   && (eltcode == RECORD_TYPE || eltcode == ARRAY_TYPE\n-\t\t       || eltcode == UNION_TYPE))\n+\t\t       || eltcode == UNION_TYPE || eltcode == VECTOR_TYPE))\n \t    {\n \t      push_init_level (1);\n \t      continue;\n@@ -7540,9 +7541,13 @@ process_init_element (struct c_expr value, bool implicit)\n \n \t  /* Now output the actual element.  */\n \t  if (value.value)\n-\t    output_init_element (value.value, value.original_type,\n-\t\t\t\t strict_string, elttype,\n-\t\t\t\t constructor_index, 1, implicit);\n+\t    {\n+\t      if (TREE_CODE (value.value) == VECTOR_CST)\n+\t\telttype = TYPE_MAIN_VARIANT (constructor_type);\n+\t      output_init_element (value.value, value.original_type,\n+\t\t\t\t   strict_string, elttype,\n+\t\t\t\t   constructor_index, 1, implicit);\n+\t    }\n \n \t  constructor_index\n \t    = size_binop (PLUS_EXPR, constructor_index, bitsize_one_node);"}, {"sha": "8869fc10d2d1219f0c6c59b4a67f3375bc482694", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53650abeb3960ae5e097833fdee977c4074f5f97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53650abeb3960ae5e097833fdee977c4074f5f97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53650abeb3960ae5e097833fdee977c4074f5f97", "patch": "@@ -1,3 +1,9 @@\n+2009-04-22  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR C/31499\n+\t* gcc.dg/vector-init-1.c: New testcase.\n+\t* gcc.dg/vector-init-2.c: New testcase.\n+\n 2009-04-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/enum2.adb: New test."}, {"sha": "5baf95688407a15e23816c7cd09a24fb93765ece", "filename": "gcc/testsuite/gcc.dg/vector-init-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53650abeb3960ae5e097833fdee977c4074f5f97/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53650abeb3960ae5e097833fdee977c4074f5f97/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-init-1.c?ref=53650abeb3960ae5e097833fdee977c4074f5f97", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+\n+/* PR C/31499, test that the C front-end treats vectors like an array. */\n+\n+#define vector __attribute__((__vector_size__(4*sizeof(int)) ))\n+vector signed int v1[]={0,1,2,3,4,5,6,7};"}, {"sha": "6527f495d81628431eac4de264d01b1867b4ee78", "filename": "gcc/testsuite/gcc.dg/vector-init-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53650abeb3960ae5e097833fdee977c4074f5f97/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53650abeb3960ae5e097833fdee977c4074f5f97/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-init-2.c?ref=53650abeb3960ae5e097833fdee977c4074f5f97", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+\n+/* PR C/31499, test that the C front-end treats vectors like an array\n+   and that it works at runtime. */\n+\n+#define vector __attribute__((__vector_size__(4*sizeof(int)) ))\n+vector signed int v1[]={0,1,2,3,4,5,6,7};\n+\n+\n+int main(void)\n+{\n+  int i;\n+  for (i = 0; i < sizeof(v1)/sizeof(v1[0]); i++)\n+  {\n+    vector int t = v1[i];\n+    int *d = (int*)&t;\n+    int j;\n+    for (j = 0; j < 4; j++)\n+      {\n+        if (d[j] != i * 4 + j)\n+\t  __builtin_abort ();\n+      }\n+  }\n+  return 0;\n+}\n\\ No newline at end of file"}]}