{"sha": "f2420d0b9230d2376c12380ce402f212be8714d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI0MjBkMGI5MjMwZDIzNzZjMTIzODBjZTQwMmYyMTJiZTg3MTRkOA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-03-12T17:51:15Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-03-12T17:51:15Z"}, "message": "(expand_expr, case COMPONENT_REF): For unaligned object in\nan aligned union, delete check for EXPAND_SUM.\n\nFrom-SVN: r11519", "tree": {"sha": "bad91d6c6f59a68e2f20191ef8ffd7d4353d193f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bad91d6c6f59a68e2f20191ef8ffd7d4353d193f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2420d0b9230d2376c12380ce402f212be8714d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2420d0b9230d2376c12380ce402f212be8714d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2420d0b9230d2376c12380ce402f212be8714d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2420d0b9230d2376c12380ce402f212be8714d8/comments", "author": null, "committer": null, "parents": [{"sha": "2af1bac84c27a3e54ea74857e9db3a5143c7d23e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af1bac84c27a3e54ea74857e9db3a5143c7d23e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af1bac84c27a3e54ea74857e9db3a5143c7d23e"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "33bfb6acb7dd1b3f9a092b6f8136af7cbae5ee8f", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2420d0b9230d2376c12380ce402f212be8714d8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2420d0b9230d2376c12380ce402f212be8714d8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f2420d0b9230d2376c12380ce402f212be8714d8", "patch": "@@ -5334,11 +5334,12 @@ expand_expr (exp, target, tmode, modifier)\n \t   an integer-mode (e.g., SImode) object.  Handle this case\n \t   by doing the extract into an object as wide as the field\n \t   (which we know to be the width of a basic mode), then\n-\t   storing into memory, and changing the mode to BLKmode.  */\n+\t   storing into memory, and changing the mode to BLKmode.\n+\t   If we ultimately want the address (EXPAND_CONST_ADDRESS or\n+\t   EXPAND_INITIALIZER), then we must not copy to a temporary.  */\n \tif (mode1 == VOIDmode\n \t    || GET_CODE (op0) == REG || GET_CODE (op0) == SUBREG\n \t    || (modifier != EXPAND_CONST_ADDRESS\n-\t\t&& modifier != EXPAND_SUM\n \t\t&& modifier != EXPAND_INITIALIZER\n \t\t&& ((mode1 != BLKmode && ! direct_load[(int) mode1])\n \t\t    /* If the field isn't aligned enough to fetch as a memref,"}]}