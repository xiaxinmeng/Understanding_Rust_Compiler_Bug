{"sha": "e9f80612564876fc089ae96504e0ceaa0c33e0e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlmODA2MTI1NjQ4NzZmYzA4OWFlOTY1MDRlMGNlYWEwYzMzZTBlOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T10:59:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T10:59:38Z"}, "message": "[multiple changes]\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch3.adb: Minor reformatting.\n\n2013-01-02  Pascal Obry  <obry@adacore.com>\n\n\t* cstreams.c (__gnat_ftell64): New routine. Use _ftelli64 on\n\tWin64 and default to ftell on other platforms.\n\t(__gnat_fsek64): Likewise.\n\t* i-cstrea.ads: Add fssek64 and ftell64 specs.\n\t* s-crtl.ads: Likewise.\n\t* a-ststio.adb, s-direio.adb (Size): Use 64 bits version when required.\n\t(Set_Position): Likewise.\n\nFrom-SVN: r194797", "tree": {"sha": "6dd29d3994fb3995d4ffbea69a6fab5906bdc0a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dd29d3994fb3995d4ffbea69a6fab5906bdc0a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9f80612564876fc089ae96504e0ceaa0c33e0e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f80612564876fc089ae96504e0ceaa0c33e0e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f80612564876fc089ae96504e0ceaa0c33e0e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f80612564876fc089ae96504e0ceaa0c33e0e8/comments", "author": null, "committer": null, "parents": [{"sha": "2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c28c7a7b503ca3b3bb04201d5971b2e55d2dff1"}], "stats": {"total": 136, "additions": 119, "deletions": 17}, "files": [{"sha": "f595d4949e30b4a5567bcce40994651e2c1dc7b7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e9f80612564876fc089ae96504e0ceaa0c33e0e8", "patch": "@@ -1,3 +1,17 @@\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch3.adb: Minor reformatting.\n+\n+2013-01-02  Pascal Obry  <obry@adacore.com>\n+\n+\t* cstreams.c (__gnat_ftell64): New routine. Use _ftelli64 on\n+\tWin64 and default to ftell on other platforms.\n+\t(__gnat_fsek64): Likewise.\n+\t* i-cstrea.ads: Add fssek64 and ftell64 specs.\n+\t* s-crtl.ads: Likewise.\n+\t* a-ststio.adb, s-direio.adb (Size): Use 64 bits version when required.\n+\t(Set_Position): Likewise.\n+\n 2013-01-02  Thomas Quinot  <quinot@adacore.com>\n \n \t* par_sco.adb: Generate X SCOs for default expressions in"}, {"sha": "91e1ef249e0647e3498df5529fe923ae71621b13", "filename": "gcc/ada/a-ststio.adb", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fa-ststio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fa-ststio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ststio.adb?ref=e9f80612564876fc089ae96504e0ceaa0c33e0e8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -367,7 +367,13 @@ package body Ada.Streams.Stream_IO is\n       FIO.Append_Set (AP (File));\n \n       if File.Mode = FCB.Append_File then\n-         File.Index := Count (ftell (File.Stream)) + 1;\n+         pragma Warnings (Off, \"*condition is always*\");\n+         if Standard'Address_Size = 64 then\n+            File.Index := Count (ftell64 (File.Stream)) + 1;\n+         else\n+            File.Index := Count (ftell (File.Stream)) + 1;\n+         end if;\n+         pragma Warnings (On, \"*condition is always*\");\n       end if;\n \n       File.Last_Op := Op_Other;\n@@ -379,10 +385,20 @@ package body Ada.Streams.Stream_IO is\n \n    procedure Set_Position (File : File_Type) is\n       use type System.CRTL.long;\n+      use type System.CRTL.ssize_t;\n+      R : int;\n    begin\n-      if fseek (File.Stream,\n-                System.CRTL.long (File.Index) - 1, SEEK_SET) /= 0\n-      then\n+      pragma Warnings (Off, \"*condition is always*\");\n+      if Standard'Address_Size = 64 then\n+         R := fseek64 (File.Stream,\n+                       System.CRTL.ssize_t (File.Index) - 1, SEEK_SET);\n+      else\n+         R := fseek (File.Stream,\n+                     System.CRTL.long (File.Index) - 1, SEEK_SET);\n+      end if;\n+      pragma Warnings (On, \"*condition is always*\");\n+\n+      if R /= 0 then\n          raise Use_Error;\n       end if;\n    end Set_Position;\n@@ -402,7 +418,13 @@ package body Ada.Streams.Stream_IO is\n             raise Device_Error;\n          end if;\n \n-         File.File_Size := Stream_Element_Offset (ftell (File.Stream));\n+         pragma Warnings (Off, \"*condition is always*\");\n+         if Standard'Address_Size = 64 then\n+            File.File_Size := Stream_Element_Offset (ftell64 (File.Stream));\n+         else\n+            File.File_Size := Stream_Element_Offset (ftell (File.Stream));\n+         end if;\n+         pragma Warnings (On, \"*condition is always*\");\n       end if;\n \n       return Count (File.File_Size);"}, {"sha": "25a867a768f85b7eda14ec23dce2809fd9917b22", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=e9f80612564876fc089ae96504e0ceaa0c33e0e8", "patch": "@@ -257,6 +257,35 @@ __gnat_full_name (char *nam, char *buffer)\n   return buffer;\n }\n \n+#ifdef _WIN64\n+  /* On Windows 64 we want to use the fseek/fteel supporting large files. This\n+     issue is due to the fact that a long on Win64 is still a 32 bits value */\n+__int64\n+__gnat_ftell64 (FILE *stream)\n+{\n+  return _ftelli64 (stream);\n+}\n+\n+int\n+__gnat_fseek64 (FILE *stream, __int64 offset, int origin)\n+{\n+  return _fseeki64 (stream, offset, origin);\n+}\n+\n+#else\n+long\n+__gnat_ftell64 (FILE *stream)\n+{\n+  return ftell (stream);\n+}\n+\n+int\n+__gnat_fseek64 (FILE *stream, long offset, int origin)\n+{\n+  return fseek (stream, offset, origin);\n+}\n+#endif\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "1a7e76a713b98ea5d9e54d2989e050cbb6ec0f20", "filename": "gcc/ada/i-cstrea.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fi-cstrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fi-cstrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cstrea.ads?ref=e9f80612564876fc089ae96504e0ceaa0c33e0e8", "patch": "@@ -42,6 +42,7 @@ package Interfaces.C_Streams is\n    subtype int is System.CRTL.int;\n    subtype long is System.CRTL.long;\n    subtype size_t is System.CRTL.size_t;\n+   subtype ssize_t is System.CRTL.ssize_t;\n    subtype voids is System.Address;\n \n    NULL_Stream : constant FILEs;\n@@ -153,9 +154,18 @@ package Interfaces.C_Streams is\n       origin : int) return int\n      renames System.CRTL.fseek;\n \n+   function fseek64\n+     (stream : FILEs;\n+      offset : ssize_t;\n+      origin : int) return int\n+     renames System.CRTL.fseek64;\n+\n    function ftell (stream : FILEs) return long\n      renames System.CRTL.ftell;\n \n+   function ftell64 (stream : FILEs) return ssize_t\n+     renames System.CRTL.ftell64;\n+\n    function fwrite\n      (buffer : voids;\n       size   : size_t;"}, {"sha": "18c43c42a6456e360b69bed1578a2d82262c28eb", "filename": "gcc/ada/s-crtl.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fs-crtl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fs-crtl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crtl.ads?ref=e9f80612564876fc089ae96504e0ceaa0c33e0e8", "patch": "@@ -122,9 +122,18 @@ package System.CRTL is\n       origin : int) return int;\n    pragma Import (C, fseek, \"fseek\");\n \n+   function fseek64\n+     (stream : FILEs;\n+      offset : ssize_t;\n+      origin : int) return int;\n+   pragma Import (C, fseek64, \"__gnat_fseek64\");\n+\n    function ftell (stream : FILEs) return long;\n    pragma Import (C, ftell, \"ftell\");\n \n+   function ftell64 (stream : FILEs) return ssize_t;\n+   pragma Import (C, ftell64, \"__gnat_ftell64\");\n+\n    function getenv (S : String) return System.Address;\n    pragma Import (C, getenv, \"getenv\");\n "}, {"sha": "f7db2e2b2620114ef60ee569a46d560e6540c75c", "filename": "gcc/ada/s-direio.adb", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fs-direio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fs-direio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-direio.adb?ref=e9f80612564876fc089ae96504e0ceaa0c33e0e8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,13 +29,13 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Ada.IO_Exceptions;      use Ada.IO_Exceptions;\n-with Interfaces.C_Streams;   use Interfaces.C_Streams;\n-with System;                 use System;\n+with Ada.IO_Exceptions;          use Ada.IO_Exceptions;\n+with Ada.Unchecked_Deallocation;\n+with Interfaces.C_Streams;       use Interfaces.C_Streams;\n+with System;                     use System;\n with System.CRTL;\n with System.File_IO;\n with System.Soft_Links;\n-with Ada.Unchecked_Deallocation;\n \n package body System.Direct_IO is\n \n@@ -280,11 +280,22 @@ package body System.Direct_IO is\n    ------------------\n \n    procedure Set_Position (File : File_Type) is\n+      use type System.CRTL.ssize_t;\n+      R : int;\n    begin\n-      if fseek\n+      pragma Warnings (Off, \"*condition is always*\");\n+      if Standard'Address_Size = 64 then\n+         R := fseek64\n+           (File.Stream, ssize_t (File.Bytes) *\n+              ssize_t (File.Index - 1), SEEK_SET);\n+      else\n+         R := fseek\n            (File.Stream, long (File.Bytes) *\n-              long (File.Index - 1), SEEK_SET) /= 0\n-      then\n+              long (File.Index - 1), SEEK_SET);\n+      end if;\n+      pragma Warnings (On, \"*condition is always*\");\n+\n+      if R /= 0 then\n          raise Use_Error;\n       end if;\n    end Set_Position;\n@@ -294,6 +305,7 @@ package body System.Direct_IO is\n    ----------\n \n    function Size (File : File_Type) return Count is\n+      use type System.CRTL.ssize_t;\n    begin\n       FIO.Check_File_Open (AP (File));\n       File.Last_Op := Op_Other;\n@@ -302,7 +314,13 @@ package body System.Direct_IO is\n          raise Device_Error;\n       end if;\n \n-      return Count (ftell (File.Stream) / long (File.Bytes));\n+      pragma Warnings (Off, \"*condition is always*\");\n+      if Standard'Address_Size = 64 then\n+         return Count (ftell64 (File.Stream) / ssize_t (File.Bytes));\n+      else\n+         return Count (ftell (File.Stream) / long (File.Bytes));\n+      end if;\n+      pragma Warnings (On, \"*condition is always*\");\n    end Size;\n \n    -----------"}, {"sha": "5764223cd060569513b2f8fea0fb81e5535986f7", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f80612564876fc089ae96504e0ceaa0c33e0e8/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e9f80612564876fc089ae96504e0ceaa0c33e0e8", "patch": "@@ -5056,8 +5056,8 @@ package body Sem_Ch3 is\n       --  In ASIS mode, analyze the profile on the original node, because\n       --  the separate copy does not provide enough links to recover the\n       --  original tree. Analysis is limited to type annotations, within\n-      --  a temporary scope that serves as an anonnymous subprogram to\n-      --  collect otherwise useless temporaries and itypes.\n+      --  a temporary scope that serves as an anonymous subprogram to collect\n+      --  otherwise useless temporaries and itypes.\n \n       if ASIS_Mode then\n          declare"}]}