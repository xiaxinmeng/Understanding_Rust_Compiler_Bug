{"sha": "e493c503f9d5a9682c18b64d9ef1a00b243fa231", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ5M2M1MDNmOWQ1YTk2ODJjMThiNjRkOWVmMWEwMGIyNDNmYTIzMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-03-14T19:17:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-03-14T19:17:03Z"}, "message": "PR c++/83916 - ICE with template template parameters.\n\n\t* pt.c (convert_template_argument): Don't substitute into type of\n\tnon-type parameter if we don't have enough arg levels.\n\t(unify): Likewise.\n\nFrom-SVN: r258533", "tree": {"sha": "255fb4ad8331f2ea13b94a876bd3e7d373693a0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/255fb4ad8331f2ea13b94a876bd3e7d373693a0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e493c503f9d5a9682c18b64d9ef1a00b243fa231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e493c503f9d5a9682c18b64d9ef1a00b243fa231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e493c503f9d5a9682c18b64d9ef1a00b243fa231", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e493c503f9d5a9682c18b64d9ef1a00b243fa231/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb90e18c68e8b0350171f45bf14f1c078637efa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb90e18c68e8b0350171f45bf14f1c078637efa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb90e18c68e8b0350171f45bf14f1c078637efa3"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "a4ffc663dc1aaddf81f9db9879bafa094af8e321", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e493c503f9d5a9682c18b64d9ef1a00b243fa231/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e493c503f9d5a9682c18b64d9ef1a00b243fa231/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e493c503f9d5a9682c18b64d9ef1a00b243fa231", "patch": "@@ -1,3 +1,10 @@\n+2018-03-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/83916 - ICE with template template parameters.\n+\t* pt.c (convert_template_argument): Don't substitute into type of\n+\tnon-type parameter if we don't have enough arg levels.\n+\t(unify): Likewise.\n+\n 2018-03-14  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/84596"}, {"sha": "14321816cdecd073e6828951f165fb9fa894f040", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e493c503f9d5a9682c18b64d9ef1a00b243fa231/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e493c503f9d5a9682c18b64d9ef1a00b243fa231/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e493c503f9d5a9682c18b64d9ef1a00b243fa231", "patch": "@@ -7974,7 +7974,11 @@ convert_template_argument (tree parm,\n     {\n       tree t = TREE_TYPE (parm);\n \n-      if (tree a = type_uses_auto (t))\n+      if (TEMPLATE_PARM_LEVEL (get_template_parm_index (parm))\n+\t  > TMPL_ARGS_DEPTH (args))\n+\t/* We don't have enough levels of args to do any substitution.  This\n+\t   can happen in the context of -fnew-ttp-matching.  */;\n+      else if (tree a = type_uses_auto (t))\n \t{\n \t  t = do_auto_deduction (t, arg, a, complain, adc_unify, args);\n \t  if (t == error_mark_node)\n@@ -21224,14 +21228,22 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t template-parameter exactly, except that a template-argument\n \t deduced from an array bound may be of any integral type.\n \t The non-type parameter might use already deduced type parameters.  */\n-      ++processing_template_decl;\n-      tparm = tsubst (TREE_TYPE (parm), targs, 0, NULL_TREE);\n-      --processing_template_decl;\n-      if (tree a = type_uses_auto (tparm))\n+      tparm = TREE_TYPE (parm);\n+      if (TEMPLATE_PARM_LEVEL (parm) > TMPL_ARGS_DEPTH (targs))\n+\t/* We don't have enough levels of args to do any substitution.  This\n+\t   can happen in the context of -fnew-ttp-matching.  */;\n+      else\n \t{\n-\t  tparm = do_auto_deduction (tparm, arg, a, complain, adc_unify);\n-\t  if (tparm == error_mark_node)\n-\t    return 1;\n+\t  ++processing_template_decl;\n+\t  tparm = tsubst (tparm, targs, tf_none, NULL_TREE);\n+\t  --processing_template_decl;\n+\n+\t  if (tree a = type_uses_auto (tparm))\n+\t    {\n+\t      tparm = do_auto_deduction (tparm, arg, a, complain, adc_unify);\n+\t      if (tparm == error_mark_node)\n+\t\treturn 1;\n+\t    }\n \t}\n \n       if (!TREE_TYPE (arg))"}, {"sha": "ff3f1f5c3acb4df16e3b33e03484424eb3363c71", "filename": "gcc/testsuite/g++.dg/template/ttp31.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e493c503f9d5a9682c18b64d9ef1a00b243fa231/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e493c503f9d5a9682c18b64d9ef1a00b243fa231/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp31.C?ref=e493c503f9d5a9682c18b64d9ef1a00b243fa231", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/83916\n+// { dg-do compile { target c++11 } }\n+\n+template<class TA,\n+\t template<TA...> class TTA, TA... VA>\n+struct A { };\n+\n+template<class UC, class TC,\n+\t template<TC...> class TTC, TC... VC>\n+struct C : A<TC, TTC, VC...> { };"}, {"sha": "a96a62d332f4884105266f3768707c8eb4faa0b4", "filename": "gcc/testsuite/g++.dg/template/ttp32.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e493c503f9d5a9682c18b64d9ef1a00b243fa231/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e493c503f9d5a9682c18b64d9ef1a00b243fa231/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fttp32.C?ref=e493c503f9d5a9682c18b64d9ef1a00b243fa231", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/83916\n+// { dg-do compile { target c++17 } }\n+\n+template<class TA,\n+\t template<auto...> class TTA, TA... VA>\n+struct A { };\n+\n+template<class UC, class TC,\n+\t template<auto...> class TTC, TC... VC>\n+struct C : A<TC, TTC, VC...> { };"}]}