{"sha": "aaf9712e79c6bdfcdb337d621e80e517aebd955b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFmOTcxMmU3OWM2YmRmY2RiMzM3ZDYyMWU4MGU1MTdhZWJkOTU1Yg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-05T15:59:06Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-05T15:59:06Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r901", "tree": {"sha": "b4c27be8e60dcd930b16f781410142baa7ecf8ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4c27be8e60dcd930b16f781410142baa7ecf8ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaf9712e79c6bdfcdb337d621e80e517aebd955b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf9712e79c6bdfcdb337d621e80e517aebd955b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf9712e79c6bdfcdb337d621e80e517aebd955b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf9712e79c6bdfcdb337d621e80e517aebd955b/comments", "author": null, "committer": null, "parents": [{"sha": "695dac07e97af3290c3b5bb8e2496177e81929dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695dac07e97af3290c3b5bb8e2496177e81929dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/695dac07e97af3290c3b5bb8e2496177e81929dc"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "a9d82ae6a6e1016ea2b12c6d0dcf31888a8ee868", "filename": "gcc/reload.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf9712e79c6bdfcdb337d621e80e517aebd955b/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf9712e79c6bdfcdb337d621e80e517aebd955b/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=aaf9712e79c6bdfcdb337d621e80e517aebd955b", "patch": "@@ -1963,12 +1963,6 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n       register RTX_CODE code = GET_CODE (recog_operand[i]);\n       modified[i] = RELOAD_READ;\n       address_reloaded[i] = 0;\n-      preferred_class[i]\n-\t= ((code == REG && REGNO (recog_operand[i]) > FIRST_PSEUDO_REGISTER)\n-\t   ? reg_preferred_class (REGNO (recog_operand[i])) : NO_REGS);\n-      pref_or_nothing[i]\n-\t= (code == REG && REGNO (recog_operand[i]) > FIRST_PSEUDO_REGISTER\n-\t   && reg_preferred_or_nothing (REGNO (recog_operand[i])));\n \n       if (constraints[i][0] == 'p')\n \t{\n@@ -2037,13 +2031,17 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t\t\t\t    &XEXP (recog_operand[i], 0),\n \t\t\t\t    recog_operand[i], ind_levels);\n \t      substed_operand[i] = recog_operand[i] = *recog_operand_loc[i];\n-\n-\t      /* This is no longer a psuedo register.  To prevent later code\n-\t\t from thinking it still is, we must reset the preferred_class\n-\t\t to NO_REGS.  */\n-\t      preferred_class[i] = NO_REGS;\n \t    }\n \t}\n+      /* If the operand is still a register (we didn't replace it with an\n+\t equivalent), get the preferred class to reload it into.  */\n+      code = GET_CODE (recog_operand[i]);\n+      preferred_class[i]\n+\t= ((code == REG && REGNO (recog_operand[i]) > FIRST_PSEUDO_REGISTER)\n+\t   ? reg_preferred_class (REGNO (recog_operand[i])) : NO_REGS);\n+      pref_or_nothing[i]\n+\t= (code == REG && REGNO (recog_operand[i]) > FIRST_PSEUDO_REGISTER\n+\t   && reg_preferred_or_nothing (REGNO (recog_operand[i])));\n     }\n \n   /* If this is simply a copy from operand 1 to operand 0, merge the"}]}