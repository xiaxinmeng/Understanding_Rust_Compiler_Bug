{"sha": "a15ffa22b5b541a385e509649dc39db59492bcdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1ZmZhMjJiNWI1NDFhMzg1ZTUwOTY0OWRjMzlkYjU5NDkyYmNkYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-22T14:40:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-22T14:40:59Z"}, "message": "re PR c++/87481 (Endless loop with optimisation in C++17)\n\n\tPR c++/87481\n\t* doc/invoke.texi (-fconstexpr-ops-limit=): Document.\n\n\t* c.opt (-fconstexpr-ops-limit=): New option.\n\n\t* constexpr.c (struct constexpr_ctx): Add constexpr_ops_count member.\n\t(cxx_eval_constant_expression): When not skipping, not constant class\n\tor location wrapper, increment *ctx->constexpr_ops_count and if it is\n\tabove constexpr_loop_nest_limit, diagnose failure.\n\t(cxx_eval_outermost_constant_expr): Add constexpr_ops_count and\n\tinitialize ctx.constexpr_ops_count to its address.\n\t(is_sub_constant_expr): Likewise.\n\n\t* g++.dg/cpp1y/constexpr-87481.C: New test.\n\nFrom-SVN: r269874", "tree": {"sha": "8606dad0f353d85630d41e4b1e4b709dce94fd2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8606dad0f353d85630d41e4b1e4b709dce94fd2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a15ffa22b5b541a385e509649dc39db59492bcdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15ffa22b5b541a385e509649dc39db59492bcdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15ffa22b5b541a385e509649dc39db59492bcdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15ffa22b5b541a385e509649dc39db59492bcdb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29e0246c68efd4b68f9593ff26b3c123fb05161d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e0246c68efd4b68f9593ff26b3c123fb05161d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e0246c68efd4b68f9593ff26b3c123fb05161d"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "aa5530eb11f045062922b116ba4830835d9105d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a15ffa22b5b541a385e509649dc39db59492bcdb", "patch": "@@ -1,3 +1,8 @@\n+2019-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/87481\n+\t* doc/invoke.texi (-fconstexpr-ops-limit=): Document.\n+\n 2019-03-22  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* config/rs6000/mmintrin.h (_mm_sub_pi32): Fix typo."}, {"sha": "e10baba8a72ce8ab2efa7c62652857c4d4957256", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a15ffa22b5b541a385e509649dc39db59492bcdb", "patch": "@@ -1,3 +1,8 @@\n+2019-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/87481\n+\t* c.opt (-fconstexpr-ops-limit=): New option.\n+\n 2019-03-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-common.c (per_file_includes_t): Use false as Lazy in hash_set"}, {"sha": "0f39ebb3adaa77117bb626c9cd4cae9fcee5a7ba", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=a15ffa22b5b541a385e509649dc39db59492bcdb", "patch": "@@ -1416,6 +1416,10 @@ fconstexpr-loop-limit=\n C++ ObjC++ Joined RejectNegative UInteger Var(constexpr_loop_limit) Init(262144)\n -fconstexpr-loop-limit=<number>\tSpecify maximum constexpr loop iteration count.\n \n+fconstexpr-ops-limit=\n+C++ ObjC++ Joined RejectNegative Host_Wide_Int Var(constexpr_ops_limit) Init(33554432)\n+-fconstexpr-ops-limit=<number>\tSpecify maximum number of constexpr operations during a single constexpr evaluation.\n+\n fdebug-cpp\n C ObjC C++ ObjC++\n Emit debug annotations during preprocessing."}, {"sha": "71f9d67edbe76a38bb64e753afa52ff77e1447fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a15ffa22b5b541a385e509649dc39db59492bcdb", "patch": "@@ -1,3 +1,14 @@\n+2019-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/87481\n+\t* constexpr.c (struct constexpr_ctx): Add constexpr_ops_count member.\n+\t(cxx_eval_constant_expression): When not skipping, not constant class\n+\tor location wrapper, increment *ctx->constexpr_ops_count and if it is\n+\tabove constexpr_loop_nest_limit, diagnose failure.\n+\t(cxx_eval_outermost_constant_expr): Add constexpr_ops_count and\n+\tinitialize ctx.constexpr_ops_count to its address.\n+\t(is_sub_constant_expr): Likewise.\n+\n 2019-03-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71446"}, {"sha": "e92ec55317b6fcfbfb69429e70622806662d85a1", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=a15ffa22b5b541a385e509649dc39db59492bcdb", "patch": "@@ -1032,6 +1032,11 @@ struct constexpr_ctx {\n   tree object;\n   /* If inside SWITCH_EXPR.  */\n   constexpr_switch_state *css_state;\n+  /* Number of cxx_eval_constant_expression calls (except skipped ones,\n+     on simple constants or location wrappers) encountered during current\n+     cxx_eval_outermost_constant_expr call.  */\n+  HOST_WIDE_INT *constexpr_ops_count;\n+\n   /* Whether we should error on a non-constant expression or fail quietly.  */\n   bool quiet;\n   /* Whether we are strictly conforming to constant expression rules or\n@@ -4402,6 +4407,20 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       return t;\n     }\n \n+  /* Avoid excessively long constexpr evaluations.  */\n+  if (!location_wrapper_p (t)\n+      && ++*ctx->constexpr_ops_count >= constexpr_ops_limit)\n+    {\n+      if (!ctx->quiet)\n+\terror_at (cp_expr_loc_or_loc (t, input_location),\n+\t\t  \"%<constexpr%> evaluation operation count exceeds limit of \"\n+\t\t  \"%wd (use -fconstexpr-ops-limit= to increase the limit)\",\n+\t\t  constexpr_ops_limit);\n+      *ctx->constexpr_ops_count = INTTYPE_MINIMUM (HOST_WIDE_INT);\n+      *non_constant_p = true;\n+      return t;\n+    }\n+\n   tree_code tcode = TREE_CODE (t);\n   switch (tcode)\n     {\n@@ -5238,9 +5257,10 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n   bool non_constant_p = false;\n   bool overflow_p = false;\n   hash_map<tree,tree> map;\n+  HOST_WIDE_INT constexpr_ctx_count = 0;\n \n   constexpr_ctx ctx = { NULL, &map, NULL, NULL, NULL, NULL,\n-\t\t\tallow_non_constant, strict,\n+\t\t\t&constexpr_ctx_count, allow_non_constant, strict,\n \t\t\tmanifestly_const_eval || !allow_non_constant };\n \n   tree type = initialized_type (t);\n@@ -5382,9 +5402,11 @@ is_sub_constant_expr (tree t)\n   bool non_constant_p = false;\n   bool overflow_p = false;\n   hash_map <tree, tree> map;\n+  HOST_WIDE_INT constexpr_ops_count = 0;\n \n   constexpr_ctx ctx\n-    = { NULL, &map, NULL, NULL, NULL, NULL, true, true, false };\n+    = { NULL, &map, NULL, NULL, NULL, NULL, &constexpr_ops_count,\n+\ttrue, true, false };\n \n   instantiate_constexpr_fns (t);\n   cxx_eval_constant_expression (&ctx, t, false, &non_constant_p,"}, {"sha": "4735b0ab673794b971e44a3b25e2151c30997285", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a15ffa22b5b541a385e509649dc39db59492bcdb", "patch": "@@ -210,7 +210,7 @@ in the following sections.\n @gccoptlist{-fabi-version=@var{n}  -fno-access-control @gol\n -faligned-new=@var{n}  -fargs-in-order=@var{n}  -fchar8_t  -fcheck-new @gol\n -fconstexpr-depth=@var{n}  -fconstexpr-loop-limit=@var{n} @gol\n--fno-elide-constructors @gol\n+-fconstexpr-ops-limit=@var{n} -fno-elide-constructors @gol\n -fno-enforce-eh-specs @gol\n -fno-gnu-keywords @gol\n -fno-implicit-templates @gol\n@@ -2525,6 +2525,16 @@ Set the maximum number of iterations for a loop in C++14 constexpr functions\n to @var{n}.  A limit is needed to detect infinite loops during\n constant expression evaluation.  The default is 262144 (1<<18).\n \n+@item -fconstexpr-ops-limit=@var{n}\n+@opindex fconstexpr-ops-limit\n+Set the maximum number of operations during a single constexpr evaluation.\n+Even when number of iterations of a single loop is limited with the above limit,\n+if there are several nested loops and each of them has many iterations but still\n+smaller than the above limit, or if in a body of some loop or even outside\n+of a loop too many expressions need to be evaluated, the resulting constexpr\n+evaluation might take too long.\n+The default is 33554432 (1<<25).\n+\n @item -fdeduce-init-list\n @opindex fdeduce-init-list\n Enable deduction of a template type parameter as"}, {"sha": "febe7b3d863065bbd98e5b92aacb2e36aafb8bd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a15ffa22b5b541a385e509649dc39db59492bcdb", "patch": "@@ -1,3 +1,8 @@\n+2019-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/87481\n+\t* g++.dg/cpp1y/constexpr-87481.C: New test.\n+\n 2019-03-22  Simon Wright  <simon@pushface.org>\n \n \tPR ada/89583"}, {"sha": "fc4decf12bcc31b7cb22d2adfaa3d3957d65bb49", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-87481.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-87481.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15ffa22b5b541a385e509649dc39db59492bcdb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-87481.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-87481.C?ref=a15ffa22b5b541a385e509649dc39db59492bcdb", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/87481\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-fconstexpr-loop-limit=98304 -fconstexpr-ops-limit=131072\" } */\n+\n+constexpr unsigned\n+foo ()\n+{\n+  unsigned int r = 0;\n+  for (int i = 0; i < 65536; i++)\n+    for (int j = 0; j < 65536; j++)\n+      for (int k = 0; k < 65536; k++)\t// { dg-error \"'constexpr' evaluation operation count exceeds limit of 131072\" \"\" { target *-*-* } 0 }\n+\tr += (i + j + k);\n+  return r;\n+}\n+\n+constexpr auto x = foo ();\t\t// { dg-message \"in 'constexpr' expansion of\" }"}]}