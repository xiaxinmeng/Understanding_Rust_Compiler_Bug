{"sha": "4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEzMjU1ZGQ0MzI4Y2Y2ZjNlYWY0Y2I4YzhmODI1ZDIxNWE1ZWNkZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-05-10T13:13:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-05-10T13:13:59Z"}, "message": "re PR tree-optimization/71039 (ICE: verify_ssa failed (error: definition in block 4 does not dominate use in block 5) w/ -O1 and above)\n\n2016-05-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71039\n\t* tree-ssa-phiprop.c: Include tree-ssa-loop.h.\n\t(chk_uses): New function.\n\t(propagate_with_phi): Verify we can safely replicate the lhs of an\n\taggregate assignment on all incoming edges.\n\n\t* gcc.dg/torture/pr71039.c: New testcase.\n\nFrom-SVN: r236079", "tree": {"sha": "7a0578cfb6e314726995d9350cdc7840b57cbe1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a0578cfb6e314726995d9350cdc7840b57cbe1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77a87b2a0e5fb069107479d1e2bd3efafd6bd3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a87b2a0e5fb069107479d1e2bd3efafd6bd3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a87b2a0e5fb069107479d1e2bd3efafd6bd3ab"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "fa3473d88cb1584eeec51b396cebe84e20586027", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf", "patch": "@@ -1,3 +1,11 @@\n+2016-05-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71039\n+\t* tree-ssa-phiprop.c: Include tree-ssa-loop.h.\n+\t(chk_uses): New function.\n+\t(propagate_with_phi): Verify we can safely replicate the lhs of an\n+\taggregate assignment on all incoming edges.\n+\n 2016-05-10  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/rx/rx-protos.h (is_interrupt_func, is_fast_interrupt_func):"}, {"sha": "1ab0fce238acf702cd193063e2a1ffb31006c170", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf", "patch": "@@ -1,3 +1,8 @@\n+2016-05-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71039\n+\t* gcc.dg/torture/pr71039.c: New testcase.\n+\n 2016-05-10  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcc.dg/nested-func-10.c: Requires alloca."}, {"sha": "e169bdca12c6de08aed3ce363326cdadc27af319", "filename": "gcc/testsuite/gcc.dg/torture/pr71039.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71039.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71039.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71039.c?ref=4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+struct wv\n+{\n+  int qi;\n+} qp, *ft;\n+void *pb;\n+\n+void\n+wz (void)\n+{\n+  struct wv *vf = pb ? (struct wv *)&pb : &qp;\n+  *ft = *vf;\n+}"}, {"sha": "20fda6cb714815252fcaf47583a8ebfc62c7cee6", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=4a3255dd4328cf6f3eaf4cb8c8f825d215a5ecdf", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"stor-layout.h\"\n+#include \"tree-ssa-loop.h\"\n \n /* This pass propagates indirect loads through the PHI node for its\n    address to make the load source possibly non-addressable and to\n@@ -230,6 +231,19 @@ phiprop_insert_phi (basic_block bb, gphi *phi, gimple *use_stmt,\n   return res;\n }\n \n+/* Verify if *idx is available at *DATA.  */\n+\n+static bool\n+chk_uses (tree, tree *idx, void *data)\n+{\n+  basic_block dom = (basic_block) data;\n+  if (TREE_CODE (*idx) == SSA_NAME)\n+    return (SSA_NAME_IS_DEFAULT_DEF (*idx)\n+\t    || ! dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t gimple_bb (SSA_NAME_DEF_STMT (*idx)), dom));\n+  return true;\n+}\n+\n /* Propagate between the phi node arguments of PHI in BB and phi result\n    users.  For now this matches\n         # p_2 = PHI <&x, &y>\n@@ -342,6 +356,13 @@ propagate_with_phi (basic_block bb, gphi *phi, struct phiprop_d *phivn,\n          insert aggregate copies on the edges instead.  */\n       if (!is_gimple_reg_type (TREE_TYPE (TREE_TYPE (ptr))))\n \t{\n+\t  /* As we replicate the lhs on each incoming edge all\n+\t     used SSA names have to be available there.  */\n+\t  if (! for_each_index (gimple_assign_lhs_ptr (use_stmt),\n+\t\t\t\tchk_uses,\n+\t\t\t\tget_immediate_dominator (CDI_DOMINATORS,\n+\t\t\t\t\t\t\t gimple_bb (phi))))\n+\t    goto next;\n \t  phiprop_insert_phi (bb, phi, use_stmt, phivn, n);\n \n \t  /* Remove old stmt.  The phi is taken care of by DCE.  */"}]}