{"sha": "f76ccf602e952b33cbfb9684e307af4e09b9a82c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2Y2NmNjAyZTk1MmIzM2NiZmI5Njg0ZTMwN2FmNGUwOWI5YTgyYw==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2004-10-13T04:33:28Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2004-10-13T04:33:28Z"}, "message": "basic-block.h (edge_iterator): Keep the address of VEC(edge) *.\n\n\t* basic-block.h (edge_iterator): Keep the address of VEC(edge) *.\n\t(ei_container): New; renamed.\n\t(ei_start, ei_last): New macros.\n\t(ei_start_1, ei_last_1): Renamed from ei_start.\n\t(ei_last_1, ei_end_p): Use ei_container() where applicable.\n\t(ei_one_before_end_p, ei_next, ei_edge): Likewise.\n\t* gcse.c (remove_reachable_equiv_notes): Use ei_container().\n\nFrom-SVN: r88966", "tree": {"sha": "6a081f1f6693d5039bffedca48954bf4f88f18fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a081f1f6693d5039bffedca48954bf4f88f18fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76ccf602e952b33cbfb9684e307af4e09b9a82c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76ccf602e952b33cbfb9684e307af4e09b9a82c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76ccf602e952b33cbfb9684e307af4e09b9a82c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76ccf602e952b33cbfb9684e307af4e09b9a82c/comments", "author": null, "committer": null, "parents": [{"sha": "86df10e35e37a9bc0a50e43503e9347719cc50e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86df10e35e37a9bc0a50e43503e9347719cc50e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86df10e35e37a9bc0a50e43503e9347719cc50e7"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "7a342012e2a14d99f627c70b38756be435cfba25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ccf602e952b33cbfb9684e307af4e09b9a82c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ccf602e952b33cbfb9684e307af4e09b9a82c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f76ccf602e952b33cbfb9684e307af4e09b9a82c", "patch": "@@ -1,3 +1,13 @@\n+2004-10-12  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* basic-block.h (edge_iterator): Keep the address of VEC(edge) *.\n+\t(ei_container): New; renamed.\n+\t(ei_start, ei_last): New macros.\n+\t(ei_start_1, ei_last_1): Renamed from ei_start.\n+\t(ei_last_1, ei_end_p): Use ei_container() where applicable.\n+\t(ei_one_before_end_p, ei_next, ei_edge): Likewise.\n+\t* gcse.c (remove_reachable_equiv_notes): Use ei_container().\n+\n 2004-10-11  Sebastian Pop  <pop@cri.ensmp.fr>\n  \n \t* Makefile.in (tree-ssa-loop-niter.o): Depends on tree-data-ref.h."}, {"sha": "ed03ac95cbbae081a8180d1dfd5f80ad6ba8f0d3", "filename": "gcc/basic-block.h", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ccf602e952b33cbfb9684e307af4e09b9a82c/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ccf602e952b33cbfb9684e307af4e09b9a82c/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=f76ccf602e952b33cbfb9684e307af4e09b9a82c", "patch": "@@ -563,12 +563,22 @@ struct edge_list\n \n typedef struct {\n   unsigned index;\n-  VEC(edge) *container;\n+  VEC(edge) **container;\n } edge_iterator;\n \n+static inline VEC(edge) *\n+ei_container (edge_iterator i)\n+{\n+  gcc_assert (i.container);\n+  return *i.container;\n+}\n+\n+#define ei_start(iter) ei_start_1 (&(iter))\n+#define ei_last(iter) ei_last_1 (&(iter))\n+\n /* Return an iterator pointing to the start of an edge vector.  */\n static inline edge_iterator\n-ei_start (VEC(edge) *ev)\n+ei_start_1 (VEC(edge) **ev)\n {\n   edge_iterator i;\n \n@@ -581,11 +591,11 @@ ei_start (VEC(edge) *ev)\n /* Return an iterator pointing to the last element of an edge\n    vector. */\n static inline edge_iterator\n-ei_last (VEC(edge) *ev)\n+ei_last_1 (VEC(edge) **ev)\n {\n   edge_iterator i;\n \n-  i.index = EDGE_COUNT (ev) - 1;\n+  i.index = EDGE_COUNT (*ev) - 1;\n   i.container = ev;\n \n   return i;\n@@ -595,22 +605,22 @@ ei_last (VEC(edge) *ev)\n static inline bool\n ei_end_p (edge_iterator i)\n {\n-  return (i.index == EDGE_COUNT (i.container));\n+  return (i.index == EDGE_COUNT (ei_container (i)));\n }\n \n /* Is the iterator `i' at one position before the end of the\n    sequence?  */\n static inline bool\n ei_one_before_end_p (edge_iterator i)\n {\n-  return (i.index + 1 == EDGE_COUNT (i.container));\n+  return (i.index + 1 == EDGE_COUNT (ei_container (i)));\n }\n \n /* Advance the iterator to the next element.  */\n static inline void\n ei_next (edge_iterator *i)\n {\n-  gcc_assert (i->index < EDGE_COUNT (i->container));\n+  gcc_assert (i->index < EDGE_COUNT (ei_container (*i)));\n   i->index++;\n }\n \n@@ -626,7 +636,7 @@ ei_prev (edge_iterator *i)\n static inline edge\n ei_edge (edge_iterator i)\n {\n-  return EDGE_I (i.container, i.index);\n+  return EDGE_I (ei_container (i), i.index);\n }\n \n /* Return an edge pointed to by the iterator.  Do it safely so that"}, {"sha": "f1e1b0aa85fa4c87c429699c49c8dad3c3b326eb", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ccf602e952b33cbfb9684e307af4e09b9a82c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ccf602e952b33cbfb9684e307af4e09b9a82c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=f76ccf602e952b33cbfb9684e307af4e09b9a82c", "patch": "@@ -6293,7 +6293,7 @@ remove_reachable_equiv_notes (basic_block bb, struct ls_expr *smexpr)\n \n   sbitmap_zero (visited);\n \n-  act = (EDGE_COUNT (ei.container) > 0 ? EDGE_I (ei.container, 0) : NULL);\n+  act = (EDGE_COUNT (ei_container (ei)) > 0 ? EDGE_I (ei_container (ei), 0) : NULL);\n   while (1)\n     {\n       if (!act)\n@@ -6351,7 +6351,7 @@ remove_reachable_equiv_notes (basic_block bb, struct ls_expr *smexpr)\n \t  if (act)\n \t    stack[sp++] = ei;\n \t  ei = ei_start (bb->succs);\n-\t  act = (EDGE_COUNT (ei.container) > 0 ? EDGE_I (ei.container, 0) : NULL);\n+\t  act = (EDGE_COUNT (ei_container (ei)) > 0 ? EDGE_I (ei_container (ei), 0) : NULL);\n \t}\n     }\n }"}]}