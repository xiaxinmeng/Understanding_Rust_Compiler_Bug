{"sha": "90c700cd2b0c0b4124a678c8c20b79db6f397361", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBjNzAwY2QyYjBjMGI0MTI0YTY3OGM4YzIwYjc5ZGI2ZjM5NzM2MQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-07-30T20:19:53Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-07-30T20:19:53Z"}, "message": "builtins.c (std_gimplify_va_arg_expr): Replace PREFERRED_STACK_BOUNDARY with MAX_SUPPORTED_STACK_ALIGNMENT.\n\n2008-07-30  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* builtins.c (std_gimplify_va_arg_expr): Replace\n\tPREFERRED_STACK_BOUNDARY with MAX_SUPPORTED_STACK_ALIGNMENT.\n\t* config/i386/i386.c (ix86_gimplify_va_arg): Likewise.\n\nFrom-SVN: r138340", "tree": {"sha": "8942e1dcdd508e630430c7db002c19722d3c4e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8942e1dcdd508e630430c7db002c19722d3c4e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90c700cd2b0c0b4124a678c8c20b79db6f397361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c700cd2b0c0b4124a678c8c20b79db6f397361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90c700cd2b0c0b4124a678c8c20b79db6f397361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c700cd2b0c0b4124a678c8c20b79db6f397361/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "d7094e2a9e477d59fb18ebf15aa402714aa516e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c700cd2b0c0b4124a678c8c20b79db6f397361/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c700cd2b0c0b4124a678c8c20b79db6f397361/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90c700cd2b0c0b4124a678c8c20b79db6f397361", "patch": "@@ -1,3 +1,9 @@\n+2008-07-30  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* builtins.c (std_gimplify_va_arg_expr): Replace\n+\tPREFERRED_STACK_BOUNDARY with MAX_SUPPORTED_STACK_ALIGNMENT.\n+\t* config/i386/i386.c (ix86_gimplify_va_arg): Likewise.\n+\n 2008-07-30  Joey Ye  <joey.ye@intel.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "ca551915c50ac0782cf63d105b52913f28ad853a", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c700cd2b0c0b4124a678c8c20b79db6f397361/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c700cd2b0c0b4124a678c8c20b79db6f397361/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=90c700cd2b0c0b4124a678c8c20b79db6f397361", "patch": "@@ -4798,11 +4798,11 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   boundary = FUNCTION_ARG_BOUNDARY (TYPE_MODE (type), type);\n \n   /* When we align parameter on stack for caller, if the parameter\n-     alignment is beyond PREFERRED_STACK_BOUNDARY, it will be\n-     aligned at PREFERRED_STACK_BOUNDARY.  We will match callee\n+     alignment is beyond MAX_SUPPORTED_STACK_ALIGNMENT, it will be\n+     aligned at MAX_SUPPORTED_STACK_ALIGNMENT.  We will match callee\n      here with caller.  */\n-  if (boundary > PREFERRED_STACK_BOUNDARY)\n-    boundary = PREFERRED_STACK_BOUNDARY;\n+  if (boundary > MAX_SUPPORTED_STACK_ALIGNMENT)\n+    boundary = MAX_SUPPORTED_STACK_ALIGNMENT;\n \n   boundary /= BITS_PER_UNIT;\n "}, {"sha": "46505cc48048f8fce2ad75694c3a6ab27690d964", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90c700cd2b0c0b4124a678c8c20b79db6f397361/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90c700cd2b0c0b4124a678c8c20b79db6f397361/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=90c700cd2b0c0b4124a678c8c20b79db6f397361", "patch": "@@ -6585,12 +6585,12 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   /* ... otherwise out of the overflow area.  */\n \n   /* When we align parameter on stack for caller, if the parameter\n-     alignment is beyond PREFERRED_STACK_BOUNDARY, it will be\n-     aligned at PREFERRED_STACK_BOUNDARY.  We will match callee\n+     alignment is beyond MAX_SUPPORTED_STACK_ALIGNMENT, it will be\n+     aligned at MAX_SUPPORTED_STACK_ALIGNMENT.  We will match callee\n      here with caller.  */\n   arg_boundary = FUNCTION_ARG_BOUNDARY (VOIDmode, type);\n-  if ((unsigned int) arg_boundary > PREFERRED_STACK_BOUNDARY)\n-     arg_boundary = PREFERRED_STACK_BOUNDARY;\n+  if ((unsigned int) arg_boundary > MAX_SUPPORTED_STACK_ALIGNMENT)\n+    arg_boundary = MAX_SUPPORTED_STACK_ALIGNMENT;\n \n   /* Care for on-stack alignment if needed.  */\n   if (arg_boundary <= 64"}]}