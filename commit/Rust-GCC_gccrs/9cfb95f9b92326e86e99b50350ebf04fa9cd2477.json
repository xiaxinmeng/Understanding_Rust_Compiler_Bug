{"sha": "9cfb95f9b92326e86e99b50350ebf04fa9cd2477", "node_id": "C_kwDOANBUbNoAKDljZmI5NWY5YjkyMzI2ZTg2ZTk5YjUwMzUwZWJmMDRmYTljZDI0Nzc", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-10T02:15:58Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-28T03:00:29Z"}, "message": "Relax condition of (vec_concat:M(vec_select op0 idx0)(vec_select op0 idx1)) to allow different modes between op0 and M, but have same inner mode.\n\nThis will enable optimization for below pattern.\n\n(set (reg:V2DF 87 [ xx ])\n    (vec_concat:V2DF (vec_select:DF (reg:V4DF 92)\n            (parallel [\n                    (const_int 2 [0x2])\n                ]))\n        (vec_select:DF (reg:V4DF 92)\n            (parallel [\n                    (const_int 3 [0x3])\n                ]))))\n\ngcc/ChangeLog:\n\n\t* simplify-rtx.c\n\t(simplify_context::simplify_binary_operation_1): Relax\n\tcondition of simplifying (vec_concat:M (vec_select op0\n\tindex0)(vec_select op1 index1)) to allow different modes\n\tbetween op0 and M, but have same inner mode.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/vect-rebuild.c: Adjust testcases.\n\t* gcc.target/i386/avx512f-vect-rebuild.c: New test.", "tree": {"sha": "fabd1771c0d17d5f629c29d5d9a941a98979fa45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fabd1771c0d17d5f629c29d5d9a941a98979fa45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cfb95f9b92326e86e99b50350ebf04fa9cd2477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfb95f9b92326e86e99b50350ebf04fa9cd2477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cfb95f9b92326e86e99b50350ebf04fa9cd2477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfb95f9b92326e86e99b50350ebf04fa9cd2477/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3540429be7ad1085af83600483908b621078fb6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3540429be7ad1085af83600483908b621078fb6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3540429be7ad1085af83600483908b621078fb6f"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "16286befd79e4c75ee51a9440c9ea623a5dfa62c", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfb95f9b92326e86e99b50350ebf04fa9cd2477/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfb95f9b92326e86e99b50350ebf04fa9cd2477/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=9cfb95f9b92326e86e99b50350ebf04fa9cd2477", "patch": "@@ -4587,7 +4587,8 @@ simplify_context::simplify_binary_operation_1 (rtx_code code,\n \tif (GET_CODE (trueop0) == VEC_SELECT\n \t    && GET_CODE (trueop1) == VEC_SELECT\n \t    && rtx_equal_p (XEXP (trueop0, 0), XEXP (trueop1, 0))\n-\t    && GET_MODE (XEXP (trueop0, 0)) == mode)\n+\t    && GET_MODE_INNER (GET_MODE (XEXP (trueop0, 0)))\n+\t       == GET_MODE_INNER(mode))\n \t  {\n \t    rtx par0 = XEXP (trueop0, 1);\n \t    rtx par1 = XEXP (trueop1, 1);"}, {"sha": "aef6855aa466914f6feb6664992b37c604b78f31", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vect-rebuild.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfb95f9b92326e86e99b50350ebf04fa9cd2477/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-rebuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfb95f9b92326e86e99b50350ebf04fa9cd2477/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-rebuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vect-rebuild.c?ref=9cfb95f9b92326e86e99b50350ebf04fa9cd2477", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mavx512vl -mavx512dq -fno-tree-forwprop\" } */\n+\n+typedef double v2df __attribute__ ((__vector_size__ (16)));\n+typedef double v4df __attribute__ ((__vector_size__ (32)));\n+\n+v2df h (v4df x)\n+{\n+  v2df xx = { x[2], x[3] };\n+  return xx;\n+}\n+\n+v4df f2 (v4df x)\n+{\n+  v4df xx = { x[0], x[1], x[2], x[3] };\n+  return xx;\n+}\n+\n+/* { dg-final { scan-assembler-not \"unpck\" } } */\n+/* { dg-final { scan-assembler-not \"valign\" } } */\n+/* { dg-final { scan-assembler-times \"\\tv?extract(?:f128|f64x2)\\[ \\t\\]\" 1 } } */"}, {"sha": "8e85b98bf1d1ffa2159a79e3fbba8b210cb03fde", "filename": "gcc/testsuite/gcc.target/i386/vect-rebuild.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfb95f9b92326e86e99b50350ebf04fa9cd2477/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-rebuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfb95f9b92326e86e99b50350ebf04fa9cd2477/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-rebuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-rebuild.c?ref=9cfb95f9b92326e86e99b50350ebf04fa9cd2477", "patch": "@@ -30,4 +30,4 @@ v2df h (v4df x)\n \n /* { dg-final { scan-assembler-not \"unpck\" } } */\n /* { dg-final { scan-assembler-times \"\\tv?permilpd\\[ \\t\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tv?extractf128\\[ \\t\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\tv?extract(?:f128|f64x2)\\[ \\t\\]\" 1 } } */"}]}