{"sha": "dfba575ff34be2ecb40b89b39ab93902a863fa3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiYTU3NWZmMzRiZTJlY2I0MGI4OWIzOWFiOTM5MDJhODYzZmEzYg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-06-26T13:57:16Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-06-26T13:57:16Z"}, "message": "[Patch AArch64 2/4] Control the FMA steering pass in tuning  structures rather than as core property\n\ngcc/\n\n\t* config/aarch64/aarch64.h (AARCH64_FL_USE_FMA_STEERING_PASS): Delete.\n\t(aarch64_tune_flags): Likewise.\n\t(AARCH64_TUNE_FMA_STEERING): Likewise.\n\t* config/aarch64/aarch64-cores.def (cortex-a57): Remove reference\n\tto AARCH64_FL_USE_FMA_STEERING_PASS.\n\t(cortex-a57.cortex-a53): Likewise.\n\t(cortex-a72): Use cortexa72_tunings.\n\t(cortex-a72.cortex-a53): Likewise.\n\t(exynos-m1): Likewise.\n\t* config/aarch64/aarch64-protos.h (tune_params): Add\n\ta field: extra_tuning_flags.\n\t* config/aarch64/aarch64-tuning-flags.def: New.\n\t* config/aarch64/aarch64-protos.h (AARCH64_EXTRA_TUNING_OPTION): New.\n\t(aarch64_extra_tuning_flags): Likewise.\n\t(aarch64_tune_params): Declare here.\n\t* config/aarch64/aarch64.c (generic_tunings): Set extra_tuning_flags.\n\t(cortexa53_tunings): Likewise.\n\t(cortexa57_tunings): Likewise.\n\t(thunderx_tunings): Likewise.\n\t(xgene1_tunings): Likewise.\n\t(cortexa72_tunings): New.\n\t* config/aarch64/cortex-a57-fma-steering.c: Include aarch64-protos.h.\n\t (gate): Check against aarch64_tune_params.\n\t* config/aarch64/t-aarch64 (cortex-a57-fma-steering.o): Depend on\n\taarch64-protos.h.\n\nFrom-SVN: r225015", "tree": {"sha": "26e7f6adf93e475016b16776286b1f856ed7d5a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26e7f6adf93e475016b16776286b1f856ed7d5a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfba575ff34be2ecb40b89b39ab93902a863fa3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfba575ff34be2ecb40b89b39ab93902a863fa3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfba575ff34be2ecb40b89b39ab93902a863fa3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfba575ff34be2ecb40b89b39ab93902a863fa3b/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "665dd6f3fab6947d834153fbbdacbd3f1348e6df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665dd6f3fab6947d834153fbbdacbd3f1348e6df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665dd6f3fab6947d834153fbbdacbd3f1348e6df"}], "stats": {"total": 153, "additions": 130, "deletions": 23}, "files": [{"sha": "787a9e33e155ad8bcf13e32ebc579052497aac2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfba575ff34be2ecb40b89b39ab93902a863fa3b", "patch": "@@ -1,3 +1,31 @@\n+2015-06-26  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64.h (AARCH64_FL_USE_FMA_STEERING_PASS): Delete.\n+\t(aarch64_tune_flags): Likewise.\n+\t(AARCH64_TUNE_FMA_STEERING): Likewise.\n+\t* config/aarch64/aarch64-cores.def (cortex-a57): Remove reference\n+\tto AARCH64_FL_USE_FMA_STEERING_PASS.\n+\t(cortex-a57.cortex-a53): Likewise.\n+\t(cortex-a72): Use cortexa72_tunings.\n+\t(cortex-a72.cortex-a53): Likewise.\n+\t(exynos-m1): Likewise.\n+\t* config/aarch64/aarch64-protos.h (tune_params): Add\n+\ta field: extra_tuning_flags.\n+\t* config/aarch64/aarch64-tuning-flags.def: New.\n+\t* config/aarch64/aarch64-protos.h (AARCH64_EXTRA_TUNING_OPTION): New.\n+\t(aarch64_extra_tuning_flags): Likewise.\n+\t(aarch64_tune_params): Declare here.\n+\t* config/aarch64/aarch64.c (generic_tunings): Set extra_tuning_flags.\n+\t(cortexa53_tunings): Likewise.\n+\t(cortexa57_tunings): Likewise.\n+\t(thunderx_tunings): Likewise.\n+\t(xgene1_tunings): Likewise.\n+\t(cortexa72_tunings): New.\n+\t* config/aarch64/cortex-a57-fma-steering.c: Include aarch64-protos.h.\n+\t (gate): Check against aarch64_tune_params.\n+\t* config/aarch64/t-aarch64 (cortex-a57-fma-steering.o): Depend on\n+\taarch64-protos.h.\n+\n 2015-06-26  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-fusion-pairs.def: New."}, {"sha": "c4e22fef3758fe7b068f4e733ff474f8e33acb4a", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=dfba575ff34be2ecb40b89b39ab93902a863fa3b", "patch": "@@ -40,13 +40,13 @@\n /* V8 Architecture Processors.  */\n \n AARCH64_CORE(\"cortex-a53\",  cortexa53, cortexa53, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa53, \"0x41\", \"0xd03\")\n-AARCH64_CORE(\"cortex-a57\",  cortexa57, cortexa57, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_USE_FMA_STEERING_PASS, cortexa57, \"0x41\", \"0xd07\")\n-AARCH64_CORE(\"cortex-a72\",  cortexa72, cortexa57, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, \"0x41\", \"0xd08\")\n-AARCH64_CORE(\"exynos-m1\",   exynosm1,  cortexa57, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, cortexa57, \"0x53\", \"0x001\")\n+AARCH64_CORE(\"cortex-a57\",  cortexa57, cortexa57, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, \"0x41\", \"0xd07\")\n+AARCH64_CORE(\"cortex-a72\",  cortexa72, cortexa57, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, \"0x41\", \"0xd08\")\n+AARCH64_CORE(\"exynos-m1\",   exynosm1,  cortexa57, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, cortexa72, \"0x53\", \"0x001\")\n AARCH64_CORE(\"thunderx\",    thunderx,  thunderx,  8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_CRYPTO, thunderx,  \"0x43\", \"0x0a1\")\n AARCH64_CORE(\"xgene1\",      xgene1,    xgene1,    8,  AARCH64_FL_FOR_ARCH8, xgene1, \"0x50\", \"0x000\")\n \n /* V8 big.LITTLE implementations.  */\n \n-AARCH64_CORE(\"cortex-a57.cortex-a53\",  cortexa57cortexa53, cortexa53, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC | AARCH64_FL_USE_FMA_STEERING_PASS, cortexa57, \"0x41\", \"0xd07.0xd03\")\n-AARCH64_CORE(\"cortex-a72.cortex-a53\",  cortexa72cortexa53, cortexa53, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, \"0x41\", \"0xd08.0xd03\")\n+AARCH64_CORE(\"cortex-a57.cortex-a53\",  cortexa57cortexa53, cortexa53, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa57, \"0x41\", \"0xd07.0xd03\")\n+AARCH64_CORE(\"cortex-a72.cortex-a53\",  cortexa72cortexa53, cortexa53, 8,  AARCH64_FL_FOR_ARCH8 | AARCH64_FL_CRC, cortexa72, \"0x41\", \"0xd08.0xd03\")"}, {"sha": "5d5787eef864f11f57a1b0a3161585d9fb7ce4cb", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=dfba575ff34be2ecb40b89b39ab93902a863fa3b", "patch": "@@ -188,6 +188,7 @@ struct tune_params\n   const int vec_reassoc_width;\n   const int min_div_recip_mul_sf;\n   const int min_div_recip_mul_df;\n+  const unsigned int extra_tuning_flags;\n };\n \n #define AARCH64_FUSION_PAIR(x, name, index) \\\n@@ -210,6 +211,26 @@ enum aarch64_fusion_pairs\n };\n #undef AARCH64_FUSION_PAIR\n \n+#define AARCH64_EXTRA_TUNING_OPTION(x, name, index) \\\n+  AARCH64_EXTRA_TUNE_##name = (1 << index),\n+/* Supported tuning flags.  */\n+enum aarch64_extra_tuning_flags\n+{\n+  AARCH64_EXTRA_TUNE_NONE = 0,\n+#include \"aarch64-tuning-flags.def\"\n+\n+/* Hacky macro to build the \"all\" flag mask.\n+   Expands to 0 | AARCH64_TUNE_index0 | AARCH64_TUNE_index1 , etc.  */\n+#undef AARCH64_EXTRA_TUNING_OPTION\n+#define AARCH64_EXTRA_TUNING_OPTION(x, name, y) \\\n+  | AARCH64_EXTRA_TUNE_##name\n+  AARCH64_EXTRA_TUNE_ALL = 0\n+#include \"aarch64-tuning-flags.def\"\n+};\n+#undef AARCH64_EXTRA_TUNING_OPTION\n+\n+extern const struct tune_params *aarch64_tune_params;\n+\n HOST_WIDE_INT aarch64_initial_elimination_offset (unsigned, unsigned);\n int aarch64_get_condition_code (rtx);\n bool aarch64_bitmask_imm (HOST_WIDE_INT val, machine_mode);"}, {"sha": "01aaca83594e791d42da209717d2c00539bf5d00", "filename": "gcc/config/aarch64/aarch64-tuning-flags.def", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def?ref=dfba575ff34be2ecb40b89b39ab93902a863fa3b", "patch": "@@ -0,0 +1,34 @@\n+/* Copyright (C) 2015 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Additional control over certain tuning parameters.  Before including\n+   this file, define a macro:\n+\n+     AARCH64_EXTRA_TUNING_OPTION (name, internal_name, index_bit)\n+\n+   Where:\n+\n+     NAME is a string giving a friendly name for the tuning flag.\n+     INTERNAL_NAME gives the internal name suitable for appending to\n+     AARCH64_TUNE_ to give an enum name.\n+     INDEX_BIT is the bit to set in the bitmask of supported tuning\n+     flags.  */\n+\n+AARCH64_EXTRA_TUNING_OPTION (\"rename_fma_regs\", RENAME_FMA_REGS, 0)\n+"}, {"sha": "c1afb9acb835e4a57be5f0777ac79d1c57f70053", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=dfba575ff34be2ecb40b89b39ab93902a863fa3b", "patch": "@@ -345,7 +345,8 @@ static const struct tune_params generic_tunings =\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n-  2\t/* min_div_recip_mul_df.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n static const struct tune_params cortexa53_tunings =\n@@ -366,7 +367,8 @@ static const struct tune_params cortexa53_tunings =\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n-  2\t/* min_div_recip_mul_df.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n static const struct tune_params cortexa57_tunings =\n@@ -387,7 +389,30 @@ static const struct tune_params cortexa57_tunings =\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n-  2\t/* min_div_recip_mul_df.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  (AARCH64_EXTRA_TUNE_RENAME_FMA_REGS)\t/* tune_flags.  */\n+};\n+\n+static const struct tune_params cortexa72_tunings =\n+{\n+  &cortexa57_extra_costs,\n+  &cortexa57_addrcost_table,\n+  &cortexa57_regmove_cost,\n+  &cortexa57_vector_cost,\n+  &generic_branch_cost,\n+  4, /* memmov_cost  */\n+  3, /* issue_rate  */\n+  (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n+   | AARCH64_FUSE_MOVK_MOVK), /* fusible_ops  */\n+  16,\t/* function_align.  */\n+  8,\t/* jump_align.  */\n+  4,\t/* loop_align.  */\n+  2,\t/* int_reassoc_width.  */\n+  4,\t/* fp_reassoc_width.  */\n+  1,\t/* vec_reassoc_width.  */\n+  2,\t/* min_div_recip_mul_sf.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n static const struct tune_params thunderx_tunings =\n@@ -407,7 +432,8 @@ static const struct tune_params thunderx_tunings =\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n-  2\t/* min_div_recip_mul_df.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n static const struct tune_params xgene1_tunings =\n@@ -427,7 +453,8 @@ static const struct tune_params xgene1_tunings =\n   4,\t/* fp_reassoc_width.  */\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n-  2\t/* min_div_recip_mul_df.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n /* A processor implementing AArch64.  */"}, {"sha": "385156482f2e98fba60cc5404356be993ab20f74", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=dfba575ff34be2ecb40b89b39ab93902a863fa3b", "patch": "@@ -203,13 +203,11 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_FP         (1 << 1)\t/* Has FP.  */\n #define AARCH64_FL_CRYPTO     (1 << 2)\t/* Has crypto.  */\n #define AARCH64_FL_CRC        (1 << 3)\t/* Has CRC.  */\n-/* Has static dispatch of FMA.  */\n-#define AARCH64_FL_USE_FMA_STEERING_PASS (1 << 4)\n /* ARMv8.1 architecture extensions.  */\n-#define AARCH64_FL_LSE\t      (1 << 5)  /* Has Large System Extensions.  */\n-#define AARCH64_FL_PAN\t      (1 << 6)  /* Has Privileged Access Never.  */\n-#define AARCH64_FL_LOR\t      (1 << 7)  /* Has Limited Ordering regions.  */\n-#define AARCH64_FL_RDMA\t      (1 << 8)  /* Has ARMv8.1 Adv.SIMD.  */\n+#define AARCH64_FL_LSE\t      (1 << 4)  /* Has Large System Extensions.  */\n+#define AARCH64_FL_PAN\t      (1 << 5)  /* Has Privileged Access Never.  */\n+#define AARCH64_FL_LOR\t      (1 << 6)  /* Has Limited Ordering regions.  */\n+#define AARCH64_FL_RDMA\t      (1 << 7)  /* Has ARMv8.1 Adv.SIMD.  */\n \n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n@@ -230,11 +228,6 @@ extern unsigned long aarch64_isa_flags;\n #define AARCH64_ISA_FP             (aarch64_isa_flags & AARCH64_FL_FP)\n #define AARCH64_ISA_SIMD           (aarch64_isa_flags & AARCH64_FL_SIMD)\n \n-/* Macros to test tuning flags.  */\n-extern unsigned long aarch64_tune_flags;\n-#define AARCH64_TUNE_FMA_STEERING \\\n-  (aarch64_tune_flags & AARCH64_FL_USE_FMA_STEERING_PASS)\n-\n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)\n "}, {"sha": "07bf8de6ab5f0458dd4eb267fcd7422f22aae6e0", "filename": "gcc/config/aarch64/cortex-a57-fma-steering.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.c?ref=dfba575ff34be2ecb40b89b39ab93902a863fa3b", "patch": "@@ -43,6 +43,7 @@\n #include \"tree-pass.h\"\n #include \"regrename.h\"\n #include \"cortex-a57-fma-steering.h\"\n+#include \"aarch64-protos.h\"\n \n #include <list>\n \n@@ -1051,7 +1052,9 @@ class pass_fma_steering : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return AARCH64_TUNE_FMA_STEERING && optimize >= 2;\n+      return (aarch64_tune_params->extra_tuning_flags\n+\t      & AARCH64_EXTRA_TUNE_RENAME_FMA_REGS)\n+\t      && optimize >= 2;\n     }\n \n   virtual unsigned int execute (function *)"}, {"sha": "af154f4b2017be50b0179b7580b743067881bacf", "filename": "gcc/config/aarch64/t-aarch64", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfba575ff34be2ecb40b89b39ab93902a863fa3b/gcc%2Fconfig%2Faarch64%2Ft-aarch64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ft-aarch64?ref=dfba575ff34be2ecb40b89b39ab93902a863fa3b", "patch": "@@ -53,7 +53,8 @@ cortex-a57-fma-steering.o: $(srcdir)/config/aarch64/cortex-a57-fma-steering.c \\\n     dominance.h cfg.h cfganal.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(RECOG_H) \\\n     output.h hash-map.h $(DF_H) $(OBSTACK_H) $(TARGET_H) $(RTL_H) \\\n     $(CONTEXT_H) $(TREE_PASS_H) regrename.h \\\n-    $(srcdir)/config/aarch64/cortex-a57-fma-steering.h\n+    $(srcdir)/config/aarch64/cortex-a57-fma-steering.h \\\n+    $(srcdir)/config/aarch64/aarch64-protos.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/aarch64/cortex-a57-fma-steering.c\n "}]}