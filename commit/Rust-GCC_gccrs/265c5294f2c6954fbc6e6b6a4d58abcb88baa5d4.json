{"sha": "265c5294f2c6954fbc6e6b6a4d58abcb88baa5d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY1YzUyOTRmMmM2OTU0ZmJjNmU2YjZhNGQ1OGFiY2I4OGJhYTVkNA==", "commit": {"author": {"name": "Dave Brolley", "email": "brolley@cygnus.com", "date": "1998-10-16T12:45:58Z"}, "committer": {"name": "Dave Brolley", "email": "brolley@gcc.gnu.org", "date": "1998-10-16T12:45:58Z"}, "message": "cccp.c (rescan): Handle multibyte chartacters ending in backslash.\n\nFri Oct 16 15:44:02 1998  Dave Brolley  <brolley@cygnus.com>\n        * cccp.c (rescan): Handle multibyte chartacters ending in backslash.\n        (rescan): Ditto.\n        (skip_if_group): Ditto.\n        (skip_to_end_of_comment): Ditto.\n        (macarg1): Ditto.\n        (discard_comments): Ditto.\n        (change_newlines): Ditto.\n\nFrom-SVN: r23135", "tree": {"sha": "472f87c1aca7fda28ddf933e7215e726f53e1caa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/472f87c1aca7fda28ddf933e7215e726f53e1caa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/265c5294f2c6954fbc6e6b6a4d58abcb88baa5d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265c5294f2c6954fbc6e6b6a4d58abcb88baa5d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265c5294f2c6954fbc6e6b6a4d58abcb88baa5d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265c5294f2c6954fbc6e6b6a4d58abcb88baa5d4/comments", "author": null, "committer": null, "parents": [{"sha": "cde7b1b0665b9fcaccca165c9f78481e8ab0c409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde7b1b0665b9fcaccca165c9f78481e8ab0c409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde7b1b0665b9fcaccca165c9f78481e8ab0c409"}], "stats": {"total": 113, "additions": 70, "deletions": 43}, "files": [{"sha": "5b0f83bfa3936ea31dffcada44ad292e041a3b41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265c5294f2c6954fbc6e6b6a4d58abcb88baa5d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265c5294f2c6954fbc6e6b6a4d58abcb88baa5d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=265c5294f2c6954fbc6e6b6a4d58abcb88baa5d4", "patch": "@@ -1,3 +1,13 @@\n+Fri Oct 16 15:44:02 1998  Dave Brolley  <brolley@cygnus.com>\n+\n+        * cccp.c (rescan): Handle multibyte chartacters ending in backslash.\n+        (rescan): Ditto.\n+        (skip_if_group): Ditto.\n+        (skip_to_end_of_comment): Ditto.\n+        (macarg1): Ditto.\n+        (discard_comments): Ditto.\n+        (change_newlines): Ditto.\n+\n Fri Oct 16 15:26:24 1998  Dave Brolley  <brolley@cygnus.com>\n \n         * c-lex.c (yylex): Fix unaligned access of wchar_t."}, {"sha": "fbea643a4af844c346c1d5c54017ea3915b49300", "filename": "gcc/cccp.c", "status": "modified", "additions": 60, "deletions": 43, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265c5294f2c6954fbc6e6b6a4d58abcb88baa5d4/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265c5294f2c6954fbc6e6b6a4d58abcb88baa5d4/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=265c5294f2c6954fbc6e6b6a4d58abcb88baa5d4", "patch": "@@ -3006,24 +3006,30 @@ do { ip = &instack[indepth];\t\t\\\n \t  U_CHAR *before_bp = ibp;\n \n \t  while (++ibp < limit) {\n-\t    if (*ibp == '\\n') {\n-\t      if (ibp[-1] != '\\\\') {\n+\t    if (*ibp == '\\n')\n+\t      {\n \t\tif (put_out_comments) {\n \t\t  bcopy ((char *) before_bp, (char *) obp, ibp - before_bp);\n \t\t  obp += ibp - before_bp;\n \t\t}\n \t\tbreak;\n \t      }\n-\t      if (warn_comments)\n-\t\twarning (\"multiline `//' comment\");\n-\t      ++ip->lineno;\n-\t      /* Copy the newline into the output buffer, in order to\n-\t\t avoid the pain of a #line every time a multiline comment\n-\t\t is seen.  */\n-\t      if (!put_out_comments)\n-\t\t*obp++ = '\\n';\n-\t      ++op->lineno;\n-\t    }\n+\t    if (*ibp == '\\\\')\n+\t      {\n+\t\tif (ibp + 1 < limit && ibp[1] == '\\n')\n+\t\t  {\n+\t\t    if (warn_comments)\n+\t\t      warning (\"multiline `//' comment\");\n+\t\t    ++ip->lineno;\n+\t\t    /* Copy the newline into the output buffer, in order to\n+\t\t       avoid the pain of a #line every time a multiline comment\n+\t\t       is seen.  */\n+\t\t    if (!put_out_comments)\n+\t\t      *obp++ = '\\n';\n+\t\t    ++op->lineno;\n+\t\t    ++ibp;\n+\t\t  }\n+\t      }\n \t    else\n \t      {\n #ifdef MULTIBYTE_CHARS\n@@ -3527,9 +3533,11 @@ do { ip = &instack[indepth];\t\t\\\n \t\t\tfor (ibp += 2; ; ibp++)\n \t\t\t  {\n \t\t\t    if (*ibp == '\\n')\n+\t\t\t      break;\n+\t\t\t    if (*ibp == '\\\\' && ibp[1] == '\\n')\n \t\t\t      {\n-\t\t\t\tif (ibp[-1] != '\\\\')\n-\t\t\t\t  break;\n+\t\t\t\tif (put_out_comments)\n+\t\t\t\t  *obp++ = *ibp++;\n \t\t\t      }\n \t\t\t    else\n \t\t\t      {\n@@ -7606,13 +7614,15 @@ skip_if_group (ip, any, op)\n \t    bp += 2;\n \t  } else if (bp[1] == '/' && cplusplus_comments) {\n \t    for (bp += 2; ; bp++) {\n-\t      if (*bp == '\\n') {\n-\t\tif (bp[-1] != '\\\\')\n-\t\t  break;\n-\t\tif (warn_comments)\n-\t\t  warning (\"multiline `//' comment\");\n-\t\tip->lineno++;\n-\t      }\n+\t      if (*bp == '\\n')\n+\t\tbreak;\n+\t      if (*bp == '\\\\' && bp[1] == '\\n')\n+\t\t{\n+\t\t  if (warn_comments)\n+\t\t    warning (\"multiline `//' comment\");\n+\t\t  ip->lineno++;\n+\t\t  bp++;\n+\t\t}\n \t      else\n \t\t{\n #ifdef MULTIBYTE_CHARS\n@@ -7969,16 +7979,21 @@ skip_to_end_of_comment (ip, line_counter, nowarn)\n   }\n   if (cplusplus_comments && bp[-1] == '/') {\n     for (; bp < limit; bp++) {\n-      if (*bp == '\\n') {\n-\tif (bp[-1] != '\\\\')\n-\t  break;\n-\tif (!nowarn && warn_comments)\n-\t  warning (\"multiline `//' comment\");\n-\tif (line_counter)\n-\t  ++*line_counter;\n-\tif (op)\n-\t  ++op->lineno;\n-      }\n+      if (*bp == '\\n')\n+\tbreak;\n+      if (*bp == '\\\\' && bp + 1 < limit && bp[1] == '\\n')\n+\t{\n+\t  if (!nowarn && warn_comments)\n+\t    warning (\"multiline `//' comment\");\n+\t  if (line_counter)\n+\t    ++*line_counter;\n+\t  if (op)\n+\t    {\n+\t      ++op->lineno;\n+\t      *op->bufp++ = *bp;\n+\t    }\n+\t  ++bp;\n+\t}\n       else\n \t{\n #ifdef MULTIBYTE_CHARS\n@@ -8951,11 +8966,15 @@ macarg1 (start, limit, macro, depthptr, newlines, comments, rest_args)\n \tfor (bp += 2; bp < limit; bp++) {\n \t  if (*bp == '\\n') {\n \t    ++*newlines;\n-\t    if (bp[-1] != '\\\\')\n-\t      break;\n-\t    if (warn_comments)\n-\t      warning (\"multiline `//' comment\");\n+\t    break;\n \t  }\n+\t  if (*bp == '\\\\' && bp + 1 < limit && bp[1] == '\\n')\n+\t    {\n+\t      ++*newlines;\n+\t      if (warn_comments)\n+\t\twarning (\"multiline `//' comment\");\n+\t      ++bp;\n+\t    }\n \t  else\n \t    {\n #ifdef MULTIBYTE_CHARS\n@@ -9077,10 +9096,9 @@ discard_comments (start, length, newlines)\n \twhile (ibp < limit)\n \t  {\n \t    if (*ibp == '\\n')\n-\t      {\n-\t\tif (ibp[-1] != '\\\\')\n-\t\t  break;\n-\t      }\n+\t      break;\n+\t    if (*ibp == '\\\\' && ibp + 1 < limit && ibp[1] == '\\n')\n+\t      ibp++;\n \t    else\n \t      {\n #ifdef MULTIBYTE_CHARS\n@@ -9215,10 +9233,9 @@ change_newlines (start, length)\n \twhile (ibp < limit) {\n \t  *obp++ = c = *ibp++;\n \t  if (c == quotec)\n-\t    {\n-\t      if (ibp[-2] != '\\\\')\n-\t\tbreak;\n-\t    }\n+\t    break;\n+\t  else if (c == '\\\\' && ibp < limit && *ibp == '\\n')\n+\t    *obp++ = *ibp++;\n \t  else if (c == '\\n')\n \t    {\n \t      if (quotec == '\\'')"}]}