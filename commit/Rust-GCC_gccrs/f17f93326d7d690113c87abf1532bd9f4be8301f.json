{"sha": "f17f93326d7d690113c87abf1532bd9f4be8301f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3ZjkzMzI2ZDdkNjkwMTEzYzg3YWJmMTUzMmJkOWY0YmU4MzAxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-03-29T08:25:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-03-29T08:25:10Z"}, "message": "re PR c++/5964 (g++ generates code that results in \"word displacement will not fit in 16 bits\" on sparcv9)\n\n\tPR c++/5964\n\t* config/sparc/sparc.md (empty_delay_slot, branch_type): New\n\tattributes.\n\t(length): Compute variable length for branches/calls/jumps here.\n\t(branch, inverted_branch, normal_fp_branch, inverted_fp_branch,\n\tnormal_fpe_branch, inverted_fpe_branch): Remove length attribute,\n\tdefine branch_type attribute.\n\t(divsi3_sp32): Maximum length is 6 not 7.\n\t(call_address_struct_value_sp32, call_symbolic_struct_value_sp32,\n\tcall_address_untyped_struct_value_sp32,\n\tcall_symbolic_untyped_struct_value_sp32): Set length to 3 not 2.\n\t* config/sparc/sparc.c (empty_delay_slot): New function.\n\t* config/sparc/sparc.h (ADJUST_INSN_LENGTH): Remove.\n\t* config/sparc/sparc-protos.h (empty_delay_slot): Add prototype.\n\n\t* g++.dg/opt/longbranch1.C: New test.\n\nFrom-SVN: r51557", "tree": {"sha": "27472513448efb25e1c2f9cda0600c46b459b56e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27472513448efb25e1c2f9cda0600c46b459b56e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f17f93326d7d690113c87abf1532bd9f4be8301f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17f93326d7d690113c87abf1532bd9f4be8301f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17f93326d7d690113c87abf1532bd9f4be8301f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17f93326d7d690113c87abf1532bd9f4be8301f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13992acae2173c407373b2a71f29f565db596324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13992acae2173c407373b2a71f29f565db596324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13992acae2173c407373b2a71f29f565db596324"}], "stats": {"total": 263, "additions": 157, "deletions": 106}, "files": [{"sha": "effce5242f713c1290e800773d1ca218f0ff3f0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f17f93326d7d690113c87abf1532bd9f4be8301f", "patch": "@@ -1,3 +1,20 @@\n+2002-03-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/5964\n+\t* config/sparc/sparc.md (empty_delay_slot, branch_type): New\n+\tattributes.\n+\t(length): Compute variable length for branches/calls/jumps here.\n+\t(branch, inverted_branch, normal_fp_branch, inverted_fp_branch,\n+\tnormal_fpe_branch, inverted_fpe_branch): Remove length attribute,\n+\tdefine branch_type attribute.\n+\t(divsi3_sp32): Maximum length is 6 not 7.\n+\t(call_address_struct_value_sp32, call_symbolic_struct_value_sp32,\n+\tcall_address_untyped_struct_value_sp32,\n+\tcall_symbolic_untyped_struct_value_sp32): Set length to 3 not 2.\n+\t* config/sparc/sparc.c (empty_delay_slot): New function.\n+\t* config/sparc/sparc.h (ADJUST_INSN_LENGTH): Remove.\n+\t* config/sparc/sparc-protos.h (empty_delay_slot): Add prototype.\n+\n 2002-03-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* combine.c (set_nonzero_bits_and_sign_copies): Don't call"}, {"sha": "d7433d49037235118d981355d90b68c4625fbff7", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=f17f93326d7d690113c87abf1532bd9f4be8301f", "patch": "@@ -99,6 +99,7 @@ extern int arith_4096_operand PARAMS ((rtx, enum machine_mode));\n extern int zero_operand PARAMS ((rtx, enum machine_mode));\n extern int fp_zero_operand PARAMS ((rtx, enum machine_mode));\n extern int reg_or_0_operand PARAMS ((rtx, enum machine_mode));\n+extern int empty_delay_slot PARAMS ((rtx));\n extern int eligible_for_epilogue_delay PARAMS ((rtx, int));\n extern int eligible_for_return_delay PARAMS ((rtx));\n extern int eligible_for_sibcall_delay PARAMS ((rtx));"}, {"sha": "a6a99c74ba31d6efa8979c2fbd49fb48876da1d9", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f17f93326d7d690113c87abf1532bd9f4be8301f", "patch": "@@ -2459,6 +2459,26 @@ leaf_return_peephole_ok ()\n   return (actual_fsize == 0);\n }\n \n+/* Return nonzero if a branch/jump/call instruction will be emitting\n+   nop into its delay slot.  */\n+\n+int\n+empty_delay_slot (insn)\n+     rtx insn;\n+{\n+  rtx seq;\n+\n+  /* If no previous instruction (should not happen), return true.  */\n+  if (PREV_INSN (insn) == NULL)\n+    return 1;\n+\n+  seq = NEXT_INSN (PREV_INSN (insn));\n+  if (GET_CODE (PATTERN (seq)) == SEQUENCE)\n+    return 0;\n+\n+  return 1;\n+}\n+\n /* Return nonzero if TRIAL can go into the function epilogue's\n    delay slot.  SLOT is the slot we are trying to fill.  */\n "}, {"sha": "e8b9cc38796c741c89f4eef3adad083d3ee79381", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=f17f93326d7d690113c87abf1532bd9f4be8301f", "patch": "@@ -2654,14 +2654,6 @@ do {                                                                    \\\n   case FLOAT:\t\t\t\t\t\t\\\n   case FIX:\t\t\t\t\t\t\\\n     return 19;\n-\n-/* Conditional branches with empty delay slots have a length of two.  */\n-#define ADJUST_INSN_LENGTH(INSN, LENGTH)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (GET_CODE (INSN) == CALL_INSN\t\t\t\t\t\\\n-      || (GET_CODE (INSN) == JUMP_INSN && ! simplejump_p (insn)))\t\\\n-    LENGTH += 1;\t\t\t\t\t\t\t\\\n-} while (0)\n \f\n /* Control the assembler format that we output.  */\n "}, {"sha": "a7769e327645be23cb541cb3ba6719d262ff7fb5", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 81, "deletions": 98, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=f17f93326d7d690113c87abf1532bd9f4be8301f", "patch": "@@ -87,8 +87,75 @@\n   \"ialu,compare,shift,load,sload,store,uncond_branch,branch,call,sibcall,call_no_delay_slot,return,imul,idiv,fpload,fpstore,fp,fpmove,fpcmove,fpcmp,fpmul,fpdivs,fpdivd,fpsqrts,fpsqrtd,cmove,multi,misc\"\n   (const_string \"ialu\"))\n \n+;; true if branch/call has empty delay slot and will emit a nop in it\n+(define_attr \"empty_delay_slot\" \"false,true\"\n+  (symbol_ref \"empty_delay_slot (insn)\"))\n+\n+(define_attr \"branch_type\" \"none,icc,fcc,reg\" (const_string \"none\"))\n+\n ;; Length (in # of insns).\n-(define_attr \"length\" \"\" (const_int 1))\n+(define_attr \"length\" \"\"\n+  (cond [(eq_attr \"type\" \"uncond_branch,call,sibcall\")\n+\t   (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t     (const_int 2)\n+\t     (const_int 1))\n+\t (eq_attr \"branch_type\" \"icc\")\n+\t   (if_then_else (match_operand 0 \"noov_compare64_op\" \"\")\n+\t     (if_then_else (lt (pc) (match_dup 1))\n+\t       (if_then_else (lt (minus (match_dup 1) (pc)) (const_int 260000))\n+\t\t (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t   (const_int 2)\n+\t\t   (const_int 1))\n+\t\t (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t   (const_int 4)\n+\t\t   (const_int 3)))\n+\t       (if_then_else (lt (minus (pc) (match_dup 1)) (const_int 260000))\n+\t\t (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t   (const_int 2)\n+\t\t   (const_int 1))\n+\t\t (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t   (const_int 4)\n+\t\t   (const_int 3))))\n+\t     (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t       (const_int 2)\n+\t       (const_int 1)))\n+\t (eq_attr \"branch_type\" \"fcc\")\n+\t   (if_then_else (match_operand 0 \"fcc0_reg_operand\" \"\")\n+\t     (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t       (const_int 2)\n+\t       (const_int 1))\n+\t     (if_then_else (lt (pc) (match_dup 2))\n+\t       (if_then_else (lt (minus (match_dup 2) (pc)) (const_int 260000))\n+\t\t (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t   (const_int 2)\n+\t\t   (const_int 1))\n+\t\t (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t   (const_int 4)\n+\t\t   (const_int 3)))\n+\t       (if_then_else (lt (minus (pc) (match_dup 2)) (const_int 260000))\n+\t\t (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t   (const_int 2)\n+\t\t   (const_int 1))\n+\t\t (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t   (const_int 4)\n+\t\t   (const_int 3)))))\n+\t (eq_attr \"branch_type\" \"reg\")\n+\t   (if_then_else (lt (pc) (match_dup 2))\n+\t     (if_then_else (lt (minus (match_dup 2) (pc)) (const_int 32000))\n+\t       (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t (const_int 2)\n+\t\t (const_int 1))\n+\t       (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t (const_int 4)\n+\t\t (const_int 3)))\n+\t     (if_then_else (lt (minus (pc) (match_dup 2)) (const_int 32000))\n+\t       (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t (const_int 2)\n+\t\t (const_int 1))\n+\t       (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n+\t\t (const_int 4)\n+\t\t (const_int 3))))\n+\t ] (const_int 1)))\n \n ;; FP precision.\n (define_attr \"fptype\" \"single,double\" (const_string \"single\"))\n@@ -1898,18 +1965,7 @@\n \t\t\t ! final_sequence, insn);\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set (attr \"length\")\n-\t(if_then_else (match_operand 0 \"noov_compare64_op\" \"\")\n-\t\t      (if_then_else (lt (pc) (match_dup 1))\n-\t\t\t\t    (if_then_else (lt (minus (match_dup 1) (pc))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3))\n-\t\t\t\t    (if_then_else (lt (minus (pc) (match_dup 1))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3)))\n-\t\t      (const_int 1)))])\n+   (set_attr \"branch_type\" \"icc\")])\n \n ;; XXX fpcmp nop braindamage\n (define_insn \"*inverted_branch\"\n@@ -1926,18 +1982,7 @@\n \t\t\t ! final_sequence, insn);\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set (attr \"length\")\n-\t(if_then_else (match_operand 0 \"noov_compare64_op\" \"\")\n-\t\t      (if_then_else (lt (pc) (match_dup 1))\n-\t\t\t\t    (if_then_else (lt (minus (match_dup 1) (pc))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3))\n-\t\t\t\t    (if_then_else (lt (minus (pc) (match_dup 1))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3)))\n-\t\t      (const_int 1)))])\n+   (set_attr \"branch_type\" \"icc\")])\n \n ;; XXX fpcmp nop braindamage\n (define_insn \"*normal_fp_branch\"\n@@ -1955,18 +2000,7 @@\n \t\t\t ! final_sequence, insn);\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set (attr \"length\")\n-\t(if_then_else (match_operand 0 \"fcc0_reg_operand\" \"\")\n-\t\t      (const_int 1)\n-\t\t      (if_then_else (lt (pc) (match_dup 2))\n-\t\t\t\t    (if_then_else (lt (minus (match_dup 2) (pc))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3))\n-\t\t\t\t    (if_then_else (lt (minus (pc) (match_dup 2))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3)))))])\n+   (set_attr \"branch_type\" \"fcc\")])\n \n ;; XXX fpcmp nop braindamage\n (define_insn \"*inverted_fp_branch\"\n@@ -1984,18 +2018,7 @@\n \t\t\t ! final_sequence, insn);\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set (attr \"length\")\n-\t(if_then_else (match_operand 0 \"fcc0_reg_operand\" \"\")\n-\t\t      (const_int 1)\n-\t\t      (if_then_else (lt (pc) (match_dup 2))\n-\t\t\t\t    (if_then_else (lt (minus (match_dup 2) (pc))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3))\n-\t\t\t\t    (if_then_else (lt (minus (pc) (match_dup 2))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3)))))])\n+   (set_attr \"branch_type\" \"fcc\")])\n \n ;; XXX fpcmp nop braindamage\n (define_insn \"*normal_fpe_branch\"\n@@ -2013,18 +2036,7 @@\n \t\t\t ! final_sequence, insn);\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set (attr \"length\")\n-\t(if_then_else (match_operand 0 \"fcc0_reg_operand\" \"\")\n-\t\t      (const_int 1)\n-\t\t      (if_then_else (lt (pc) (match_dup 2))\n-\t\t\t\t    (if_then_else (lt (minus (match_dup 2) (pc))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3))\n-\t\t\t\t    (if_then_else (lt (minus (pc) (match_dup 2))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3)))))])\n+   (set_attr \"branch_type\" \"fcc\")])\n \n ;; XXX fpcmp nop braindamage\n (define_insn \"*inverted_fpe_branch\"\n@@ -2042,18 +2054,7 @@\n \t\t\t ! final_sequence, insn);\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set (attr \"length\")\n-\t(if_then_else (match_operand 0 \"fcc0_reg_operand\" \"\")\n-\t\t      (const_int 1)\n-\t\t      (if_then_else (lt (pc) (match_dup 2))\n-\t\t\t\t    (if_then_else (lt (minus (match_dup 2) (pc))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3))\n-\t\t\t\t    (if_then_else (lt (minus (pc) (match_dup 2))\n-\t\t\t\t\t\t      (const_int 260000))\n-\t\t\t\t\t\t  (const_int 1)\n-\t\t\t\t\t\t  (const_int 3)))))])\n+   (set_attr \"branch_type\" \"fcc\")])\n \n ;; Sparc V9-specific jump insns.  None of these are guaranteed to be\n ;; in the architecture.\n@@ -2076,16 +2077,7 @@\n \t\t\t  ! final_sequence, insn);\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set (attr \"length\")\n-        (if_then_else (lt (pc) (match_dup 2))\n-\t\t      (if_then_else (lt (minus (match_dup 2) (pc))\n-\t\t\t\t\t(const_int 32000))\n-\t\t\t\t    (const_int 1)\n-\t\t\t\t    (const_int 3))\n-\t\t      (if_then_else (lt (minus (pc) (match_dup 2))\n-\t\t\t\t\t(const_int 32000))\n-\t\t\t\t    (const_int 1)\n-\t\t\t\t    (const_int 3))))])\n+   (set_attr \"branch_type\" \"reg\")])\n \n ;; XXX\n (define_insn \"*inverted_int_branch_sp64\"\n@@ -2103,16 +2095,7 @@\n \t\t\t  ! final_sequence, insn);\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set (attr \"length\")\n-        (if_then_else (lt (pc) (match_dup 2))\n-\t\t      (if_then_else (lt (minus (match_dup 2) (pc))\n-\t\t\t\t\t(const_int 32000))\n-\t\t\t\t    (const_int 1)\n-\t\t\t\t    (const_int 3))\n-\t\t      (if_then_else (lt (minus (pc) (match_dup 2))\n-\t\t\t\t\t(const_int 32000))\n-\t\t\t\t    (const_int 1)\n-\t\t\t\t    (const_int 3))))])\n+   (set_attr \"branch_type\" \"reg\")])\n \f\n ;; Load program counter insns.\n \n@@ -6473,7 +6456,7 @@\n   [(set_attr \"type\" \"multi\")\n    (set (attr \"length\")\n \t(if_then_else (eq_attr \"isa\" \"v9\")\n-\t\t      (const_int 4) (const_int 7)))])\n+\t\t      (const_int 4) (const_int 6)))])\n \n (define_insn \"divsi3_sp64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -8499,7 +8482,7 @@\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 0\"\n   \"call\\\\t%a0, %1\\\\n\\\\tnop\\\\n\\\\tunimp\\\\t%2\"\n   [(set_attr \"type\" \"call_no_delay_slot\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"3\")])\n \n ;; This is a call that wants a structure value.\n ;; There is no such critter for v9 (??? we may need one anyway).\n@@ -8512,7 +8495,7 @@\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) >= 0\"\n   \"call\\\\t%a0, %1\\\\n\\\\tnop\\\\n\\\\tunimp\\\\t%2\"\n   [(set_attr \"type\" \"call_no_delay_slot\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"3\")])\n \n ;; This is a call that may want a structure value.  This is used for\n ;; untyped_calls.\n@@ -8525,7 +8508,7 @@\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n   \"call\\\\t%a0, %1\\\\n\\\\tnop\\\\n\\\\tnop\"\n   [(set_attr \"type\" \"call_no_delay_slot\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"3\")])\n \n ;; This is a call that wants a structure value.\n (define_insn \"*call_symbolic_untyped_struct_value_sp32\"\n@@ -8537,7 +8520,7 @@\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n   \"call\\\\t%a0, %1\\\\n\\\\tnop\\\\n\\\\tnop\"\n   [(set_attr \"type\" \"call_no_delay_slot\")\n-   (set_attr \"length\" \"2\")])\n+   (set_attr \"length\" \"3\")])\n \n (define_expand \"call_value\"\n   ;; Note that this expression is not used for generating RTL."}, {"sha": "fec72b83aa3c10380ae69e9294acf48178c7aab8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f17f93326d7d690113c87abf1532bd9f4be8301f", "patch": "@@ -2,6 +2,8 @@\n \n \t* g++.dg/opt/static1.C: New test.\n \n+\t* g++.dg/opt/longbranch1.C: New test.\n+\n 2002-03-28  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* gcc.dg/weak-1.c: Fix typo in scan-assembler pattern."}, {"sha": "a64a57aea2ad4184cf407cc34cfa220c2d493be3", "filename": "gcc/testsuite/g++.dg/opt/longbranch1.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17f93326d7d690113c87abf1532bd9f4be8301f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch1.C?ref=f17f93326d7d690113c87abf1532bd9f4be8301f", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/5964\n+// This testcase failed to link on sparc -m64 -O0, because instruction\n+// lengths were incorrectly computed\n+// { dg-do link }\n+// { dg-options \"-O0\" }\n+\n+#define makecode for (int i = 1; i < 1000; ++i) i *= 3\n+#define muchcode \\\n+        makecode; makecode; makecode; makecode; makecode; makecode; \\\n+        makecode; makecode; makecode; makecode; makecode; makecode; \\\n+        makecode; makecode; makecode; makecode; makecode; makecode; \\\n+        makecode; makecode; makecode; makecode; makecode; makecode\n+\n+#define verymuchcode \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode; \\\n+        muchcode; muchcode; muchcode; muchcode; muchcode; muchcode\n+\n+int\n+main (int argc, char **argv)\n+{\n+loop:\n+  verymuchcode;\n+  delete[] argv;\n+  goto loop;\n+}"}]}