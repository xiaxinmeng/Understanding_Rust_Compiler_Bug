{"sha": "0b540bf4e57da4f21022373117d10de463888426", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI1NDBiZjRlNTdkYTRmMjEwMjIzNzMxMTdkMTBkZTQ2Mzg4ODQyNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:01:23Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:01:23Z"}, "message": "(ASM_OUTPUT_DOUBLE, PRINT_OPERAND):\n\nUse new REAL_VALUE... macros.\n\nFrom-SVN: r3967", "tree": {"sha": "322b82df11c2f263ff12ee127ede55f4672a5c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/322b82df11c2f263ff12ee127ede55f4672a5c09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b540bf4e57da4f21022373117d10de463888426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b540bf4e57da4f21022373117d10de463888426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b540bf4e57da4f21022373117d10de463888426", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b540bf4e57da4f21022373117d10de463888426/comments", "author": null, "committer": null, "parents": [{"sha": "0fa83258de63ad09dcba856b3ac43f9139fc2ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa83258de63ad09dcba856b3ac43f9139fc2ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa83258de63ad09dcba856b3ac43f9139fc2ff6"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "f20b34ec8889db1c4f99077be3f1035b0e7440f3", "filename": "gcc/config/m68k/crds.h", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b540bf4e57da4f21022373117d10de463888426/gcc%2Fconfig%2Fm68k%2Fcrds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b540bf4e57da4f21022373117d10de463888426/gcc%2Fconfig%2Fm68k%2Fcrds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcrds.h?ref=0b540bf4e57da4f21022373117d10de463888426", "patch": "@@ -4,7 +4,7 @@\n    Written by Gary E. Miller\n    bug reports to Gary_Edmunds_Miller@cup.portal.com\n \n-   Copyright (C) 1987 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -168,9 +168,9 @@ bss_section ()\t\t\t\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_DOUBLE\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-do { union { double f; long l[2];} tem;\t\t\t\\\n-     tem.f = (VALUE);\t\t\t\t\t\\\n-     fprintf (FILE, \"\\t.long 0x%x, 0x%x\\n\", tem.l[0], tem.l[1]);\t\\\n+do { long l[2];\t\t\t\t\t\t\\\n+     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n+     fprintf (FILE, \"\\t.long 0x%x, 0x%x\\n\", l[0], l[1]);\t\\\n    } while (0)\n \n /*unos has no .skip :-( */\n@@ -300,18 +300,21 @@ do { union { double f; long l[2];} tem;\t\t\t\\\n \t   && (i = standard_sun_fpa_constant_p (X)))\t\t\t\\\n     fprintf (FILE, \"%%%d\", i & 0x1ff);\t\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == SFmode)\t\\\n-    { union { double d; int i[2]; } u;\t\t\t\t\t\\\n-      union { float f; int i; } u1;\t\t\t\t\t\\\n-      u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n-      u1.f = u.d;\t\t\t\t\t\t\t\\\n+    { REAL_VALUE_TYPE r; long l;\t\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n       if (CODE == 'f')\t\t\t\t\t\t\t\\\n-\tASM_OUTPUT_FLOAT_OPERAND (FILE, u1.f);\t\t\t\t\\\n+\tASM_OUTPUT_FLOAT_OPERAND (CODE, FILE, r);\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n-        fprintf (FILE, \"$0x%x\", u1.i); }\t\t\t\t\\\n+        { REAL_VALUE_TO_TARGET_SINGLE (r, l);\t\t\t\t\\\n+          fprintf (FILE, \"$0x%x\", l); } }\t\t\t\t\\\n+  else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == XFmode)\t\\\n+    { REAL_VALUE_TYPE r;\t\t\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n+      ASM_OUTPUT_LONG_DOUBLE_OPERAND (FILE, r); }\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != DImode)\t\\\n-    { union { double d; int i[2]; } u;\t\t\t\t\t\\\n-      u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n-      ASM_OUTPUT_DOUBLE_OPERAND (FILE, u.d); }\t\t\t\t\\\n+    { REAL_VALUE_TYPE r;\t\t\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n+      ASM_OUTPUT_DOUBLE_OPERAND (FILE, r); }\t\t\t\t\\\n   else { putc ('$', FILE); output_addr_const (FILE, X); }}\n \f\n /* Note that this contains a kludge that knows that the only reason"}]}