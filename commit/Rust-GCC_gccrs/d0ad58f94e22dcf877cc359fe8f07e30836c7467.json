{"sha": "d0ad58f94e22dcf877cc359fe8f07e30836c7467", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBhZDU4Zjk0ZTIyZGNmODc3Y2MzNTlmZThmMDdlMzA4MzZjNzQ2Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-13T00:44:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-13T00:44:39Z"}, "message": "re PR c++/51060 (Temporary object stack space is not re-used)\n\n\tPR c++/51060\n\t* gimplify.c (gimplify_target_expr): Add a clobber to the cleanup.\n\t(gimplify_modify_expr): Don't try to simplify it.\n\t* cp/cp-gimplify.c (cp_gimplify_expr): Leave clobbers alone.\n\nFrom-SVN: r181332", "tree": {"sha": "27cac8d3632c8a697d809b3cfff114f8ef5675e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27cac8d3632c8a697d809b3cfff114f8ef5675e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0ad58f94e22dcf877cc359fe8f07e30836c7467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ad58f94e22dcf877cc359fe8f07e30836c7467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ad58f94e22dcf877cc359fe8f07e30836c7467", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ad58f94e22dcf877cc359fe8f07e30836c7467/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2628dce2494cefe0144f733c930d6b3b2edf728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2628dce2494cefe0144f733c930d6b3b2edf728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2628dce2494cefe0144f733c930d6b3b2edf728"}], "stats": {"total": 121, "additions": 106, "deletions": 15}, "files": [{"sha": "e90d1f68944c40c7dfc19ea294544e4e2a767923", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0ad58f94e22dcf877cc359fe8f07e30836c7467", "patch": "@@ -1,3 +1,9 @@\n+2011-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51060\n+\t* gimplify.c (gimplify_target_expr): Add a clobber to the cleanup.\n+\t(gimplify_modify_expr): Don't try to simplify it.\n+\n 2011-11-12  Dimitrios Apostolou  <jimis@gmx.net>\n \n \tPR bootstrap/51094"}, {"sha": "21f64476d96245cae5de26efaebf08b5b5d90446", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d0ad58f94e22dcf877cc359fe8f07e30836c7467", "patch": "@@ -1,3 +1,8 @@\n+2011-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51060\n+\t* cp-gimplify.c (cp_gimplify_expr): Leave clobbers alone.\n+\n 2011-11-11  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR c++/50976"}, {"sha": "9968c3dd7ee122e020887a2d1f05d70404ef12c8", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=d0ad58f94e22dcf877cc359fe8f07e30836c7467", "patch": "@@ -569,7 +569,8 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \n \telse if ((is_gimple_lvalue (op1) || INDIRECT_REF_P (op1)\n \t\t  || (TREE_CODE (op1) == CONSTRUCTOR\n-\t\t      && CONSTRUCTOR_NELTS (op1) == 0)\n+\t\t      && CONSTRUCTOR_NELTS (op1) == 0\n+\t\t      && !TREE_CLOBBER_P (op1))\n \t\t  || (TREE_CODE (op1) == CALL_EXPR\n \t\t      && !CALL_EXPR_RETURN_SLOT_OPT (op1)))\n \t\t && is_really_empty_class (TREE_TYPE (op0)))"}, {"sha": "cfe6696f59040ecf091ec8e387ff933bb2f5b8bc", "filename": "gcc/gimplify.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=d0ad58f94e22dcf877cc359fe8f07e30836c7467", "patch": "@@ -4554,6 +4554,16 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   gcc_assert (TREE_CODE (*expr_p) == MODIFY_EXPR\n \t      || TREE_CODE (*expr_p) == INIT_EXPR);\n \n+  /* Trying to simplify a clobber using normal logic doesn't work,\n+     so handle it here.  */\n+  if (TREE_CLOBBER_P (*from_p))\n+    {\n+      gcc_assert (!want_value && TREE_CODE (*to_p) == VAR_DECL);\n+      gimplify_seq_add_stmt (pre_p, gimple_build_assign (*to_p, *from_p));\n+      *expr_p = NULL;\n+      return GS_ALL_DONE;\n+    }\n+\n   /* Insert pointer conversions required by the middle-end that are not\n      required by the frontend.  This fixes middle-end type checking for\n      for example gcc.dg/redecl-6.c.  */\n@@ -5335,6 +5345,8 @@ gimplify_target_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \n   if (init)\n     {\n+      tree cleanup = NULL_TREE;\n+\n       /* TARGET_EXPR temps aren't part of the enclosing block, so add it\n \t to the temps list.  Handle also variable length TARGET_EXPRs.  */\n       if (TREE_CODE (DECL_SIZE (temp)) != INTEGER_CST)\n@@ -5369,8 +5381,30 @@ gimplify_target_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \n       /* If needed, push the cleanup for the temp.  */\n       if (TARGET_EXPR_CLEANUP (targ))\n-\tgimple_push_cleanup (temp, TARGET_EXPR_CLEANUP (targ),\n-\t\t\t     CLEANUP_EH_ONLY (targ), pre_p);\n+\t{\n+\t  if (CLEANUP_EH_ONLY (targ))\n+\t    gimple_push_cleanup (temp, TARGET_EXPR_CLEANUP (targ),\n+\t\t\t\t CLEANUP_EH_ONLY (targ), pre_p);\n+\t  else\n+\t    cleanup = TARGET_EXPR_CLEANUP (targ);\n+\t}\n+\n+      /* Add a clobber for the temporary going out of scope, like\n+\t gimplify_bind_expr.  */\n+      if (needs_to_live_in_memory (temp))\n+\t{\n+\t  tree clobber = build_constructor (TREE_TYPE (temp), NULL);\n+\t  TREE_THIS_VOLATILE (clobber) = true;\n+\t  clobber = build2 (MODIFY_EXPR, TREE_TYPE (temp), temp, clobber);\n+\t  if (cleanup)\n+\t    cleanup = build2 (COMPOUND_EXPR, void_type_node, cleanup,\n+\t\t\t      clobber);\n+\t  else\n+\t    cleanup = clobber;\n+\t}\n+\n+      if (cleanup)\n+\tgimple_push_cleanup (temp, cleanup, false, pre_p);\n \n       /* Only expand this once.  */\n       TREE_OPERAND (targ, 3) = init;"}, {"sha": "0582e49e0e5cbfae62cf871dbc59a49aa5737fb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0ad58f94e22dcf877cc359fe8f07e30836c7467", "patch": "@@ -1,3 +1,8 @@\n+2011-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51060\n+\t* g++.dg/opt/stack2.C: New.\n+\n 2011-11-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/gcc-simulate-thread.exp (simulate-thread): Do not run on"}, {"sha": "8468e1a68832f3dd1831506cae836778fec224ba", "filename": "gcc/testsuite/g++.dg/opt/stack2.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fstack2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ad58f94e22dcf877cc359fe8f07e30836c7467/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fstack2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fstack2.C?ref=d0ad58f94e22dcf877cc359fe8f07e30836c7467", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/51060\n+// { dg-options \"-Os -Wframe-larger-than=2000 -Werror\" }\n+\n+// Shows a problem of not re-using stack space:\n+// Compile as: g++ -c test_stack_reuse.cpp -o /dev/null -Wframe-larger-than=2048 -Werror -Os\n+// Result: warning: the frame size of 10240 bytes is larger than 2048 bytes [-Wframe-larger-than=]\n+//\n+\n+struct StackObject\n+{\n+  StackObject();\n+  char buffer[1024];\n+};\n+\n+void Test()\n+{\n+#define TEST_SUB() \\\n+  StackObject();\n+\n+#define TEST() \\\n+\tTEST_SUB() \\\n+\tTEST_SUB() \\\n+\tTEST_SUB() \\\n+\tTEST_SUB() \\\n+\tTEST_SUB() \\\n+\tTEST_SUB() \\\n+\tTEST_SUB() \\\n+\tTEST_SUB() \\\n+\tTEST_SUB() \\\n+\tTEST_SUB()\n+\n+  TEST()\n+}"}, {"sha": "782284365b3af1b3e0713c93d28d0730b01ddd8a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ad58f94e22dcf877cc359fe8f07e30836c7467/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ad58f94e22dcf877cc359fe8f07e30836c7467/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d0ad58f94e22dcf877cc359fe8f07e30836c7467", "patch": "@@ -1,3 +1,10 @@\n+2011-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/51060\n+\t* testsuite/25_algorithms/max/1.cc (test01): Drop references.\n+\t* testsuite/25_algorithms/min/1.cc (test01): Drop references.\n+\t* testsuite/25_algorithms/minmax/1.cc (test01): Drop references.\n+\n 2011-11-12  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/51083"}, {"sha": "1757b6a49f6b88136e0efa2ad987e54880f651d7", "filename": "libstdc++-v3/testsuite/25_algorithms/max/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ad58f94e22dcf877cc359fe8f07e30836c7467/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ad58f94e22dcf877cc359fe8f07e30836c7467/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F1.cc?ref=d0ad58f94e22dcf877cc359fe8f07e30836c7467", "patch": "@@ -25,13 +25,13 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  const int& x = std::max(1, 2);\n-  const int& y = std::max(4, 3);\n+  const int x = std::max(1, 2);\n+  const int y = std::max(4, 3);\n   VERIFY( x == 2 );\n   VERIFY( y == 4 );\n \n-  const int& xc = std::max(1, 2, std::greater<int>());\n-  const int& yc = std::max(4, 3, std::greater<int>());\n+  const int xc = std::max(1, 2, std::greater<int>());\n+  const int yc = std::max(4, 3, std::greater<int>());\n   VERIFY( xc == 1 );\n   VERIFY( yc == 3 );\n }"}, {"sha": "ca52e4972451bd1c444355a2027577c48fe526e8", "filename": "libstdc++-v3/testsuite/25_algorithms/min/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ad58f94e22dcf877cc359fe8f07e30836c7467/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ad58f94e22dcf877cc359fe8f07e30836c7467/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F1.cc?ref=d0ad58f94e22dcf877cc359fe8f07e30836c7467", "patch": "@@ -25,13 +25,13 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  const int& z = std::min(1, 2);\n-  const int& w = std::min(4, 3);\n+  const int z = std::min(1, 2);\n+  const int w = std::min(4, 3);\n   VERIFY( z == 1 );\n   VERIFY( w == 3 );\n \n-  const int& zc = std::min(1, 2, std::greater<int>());\n-  const int& wc = std::min(4, 3, std::greater<int>());\n+  const int zc = std::min(1, 2, std::greater<int>());\n+  const int wc = std::min(4, 3, std::greater<int>());\n   VERIFY( zc == 2 );\n   VERIFY( wc == 4 );\n }"}, {"sha": "5e581927d699d90d2d37cc3dbbefde9e490d549f", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ad58f94e22dcf877cc359fe8f07e30836c7467/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ad58f94e22dcf877cc359fe8f07e30836c7467/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2F1.cc?ref=d0ad58f94e22dcf877cc359fe8f07e30836c7467", "patch": "@@ -27,15 +27,15 @@ void test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  std::pair<const int&, const int&> z = std::minmax(1, 2);\n-  std::pair<const int&, const int&> w = std::minmax(4, 3);\n+  std::pair<const int, const int> z = std::minmax(1, 2);\n+  std::pair<const int, const int> w = std::minmax(4, 3);\n   VERIFY( z.first == 1 );\n   VERIFY( z.second == 2 );\n   VERIFY( w.first == 3 );\n   VERIFY( w.second == 4 );\n \n-  std::pair<const int&, const int&> zc = std::minmax(1, 2, std::greater<int>());\n-  std::pair<const int&, const int&> wc = std::minmax(4, 3, std::greater<int>());\n+  std::pair<const int, const int> zc = std::minmax(1, 2, std::greater<int>());\n+  std::pair<const int, const int> wc = std::minmax(4, 3, std::greater<int>());\n   VERIFY( zc.first == 2 );\n   VERIFY( zc.second == 1 );\n   VERIFY( wc.first == 4 );"}]}