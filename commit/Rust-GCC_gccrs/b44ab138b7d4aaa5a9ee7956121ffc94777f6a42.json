{"sha": "b44ab138b7d4aaa5a9ee7956121ffc94777f6a42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ0YWIxMzhiN2Q0YWFhNWE5ZWU3OTU2MTIxZmZjOTQ3NzdmNmE0Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-16T09:44:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-16T09:44:04Z"}, "message": "vectorizer: Remove dead scalar .COND_* calls from vectorized loops [PR99767]\n\nThe following testcase ICEs because disabling of DCE means there are dead\nstmts in the loop (though, in theory they could become dead only shortly\nbefore if-conv through some optimization), ifcvt which goes through all\nstmts in the loop if-converts them into .COND_DIV etc. internal fn calls\nin the copy of the loop meant for vectorization only, the loop is\nsuccessfully vectorized but the particular .COND_* call is not because\nit isn't a live statement and the scalar .COND_* remains in the IL until\nexpansion where it ICEs because these ifns only support vectors and not\nscalars.\n\nThese ifns are similar to .MASK_{LOAD,STORE} in this behavior.\n\nOne possible fix could be to expand scalar versions of them during\nexpansion, basically undoing what if-conv did to create them, i.e.\nexpand them as the lhs = else; if (mask) { lhs = statement; } or so.\n\nFor .MASK_LOAD we have code to replace them in vect_transform_loop already\nthough (not needed for .MASK_STORE, as stores should be always live\nand thus always vectorized), so this patch instead replaces .COND_*\nsimilarly to .MASK_LOAD in that loop, with the small difference\nthat lhs = .MASK_LOAD (...); is replaced by lhs = 0; while\nlhs = .COND_* (..., else_arg); is replaced by lhs = else_arg.\nThe statement must be dead, otherwise it would be vectorized, so I think\nit is not a big deal we don't turn it back into multiple basic blocks etc.\n(and it might be not possible to do that at that point).\n\n2021-04-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99767\n\t* tree-vect-loop.c (vect_transform_loop): Don't remove just\n\tdead scalar .MASK_LOAD calls, but also dead .COND_* calls - replace\n\tthem by their last argument.\n\n\t* gcc.target/aarch64/pr99767.c: New test.", "tree": {"sha": "de616a5300051aa39d3ce428b885f0beb71de4cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de616a5300051aa39d3ce428b885f0beb71de4cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b44ab138b7d4aaa5a9ee7956121ffc94777f6a42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44ab138b7d4aaa5a9ee7956121ffc94777f6a42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b44ab138b7d4aaa5a9ee7956121ffc94777f6a42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44ab138b7d4aaa5a9ee7956121ffc94777f6a42/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "784de5292c34e287c848b382b431599b818ea76e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784de5292c34e287c848b382b431599b818ea76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/784de5292c34e287c848b382b431599b818ea76e"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "5bbfcbdcd69331284c889a7876bd0ce51513e77d", "filename": "gcc/testsuite/gcc.target/aarch64/pr99767.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44ab138b7d4aaa5a9ee7956121ffc94777f6a42/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99767.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44ab138b7d4aaa5a9ee7956121ffc94777f6a42/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99767.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99767.c?ref=b44ab138b7d4aaa5a9ee7956121ffc94777f6a42", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/99767 */\n+/* { dg-do compile } */\n+/* { dg-options \" -O1 -fopenmp-simd -fno-tree-dce -march=armv8-a+sve\" } */\n+\n+int a[1024], b[1024];\n+\n+void\n+foo (void)\n+{\n+  #pragma omp simd\n+  for (int i = 0; i < 1024; i++)\n+    if (b[i] > 23) {\n+      a[i] = b[i] + 1;\n+      int v = 1 / 0;\t/* { dg-warning \"division by zero\" } */\n+    }\n+}"}, {"sha": "2aba503fef7b195c7dd18c3ff6977add1ab73d3c", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44ab138b7d4aaa5a9ee7956121ffc94777f6a42/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44ab138b7d4aaa5a9ee7956121ffc94777f6a42/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=b44ab138b7d4aaa5a9ee7956121ffc94777f6a42", "patch": "@@ -9676,7 +9676,10 @@ vect_transform_loop (loop_vec_info loop_vinfo, gimple *loop_vectorized_call)\n \t   !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n \t  gcall *call = dyn_cast <gcall *> (gsi_stmt (gsi));\n-\t  if (call && gimple_call_internal_p (call, IFN_MASK_LOAD))\n+\t  if (!call || !gimple_call_internal_p (call))\n+\t    continue;\n+\t  internal_fn ifn = gimple_call_internal_fn (call);\n+\t  if (ifn == IFN_MASK_LOAD)\n \t    {\n \t      tree lhs = gimple_get_lhs (call);\n \t      if (!VECTOR_TYPE_P (TREE_TYPE (lhs)))\n@@ -9686,6 +9689,17 @@ vect_transform_loop (loop_vec_info loop_vinfo, gimple *loop_vectorized_call)\n \t\t  gsi_replace (&gsi, new_stmt, true);\n \t\t}\n \t    }\n+\t  else if (conditional_internal_fn_code (ifn) != ERROR_MARK)\n+\t    {\n+\t      tree lhs = gimple_get_lhs (call);\n+\t      if (!VECTOR_TYPE_P (TREE_TYPE (lhs)))\n+\t\t{\n+\t\t  tree else_arg\n+\t\t    = gimple_call_arg (call, gimple_call_num_args (call) - 1);\n+\t\t  gimple *new_stmt = gimple_build_assign (lhs, else_arg);\n+\t\t  gsi_replace (&gsi, new_stmt, true);\n+\t\t}\n+\t    }\n \t}\n     }\t\t\t\t/* BBs in loop */\n "}]}