{"sha": "359bea1da45819206bf0a9132362ee6e0f181282", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU5YmVhMWRhNDU4MTkyMDZiZjBhOTEzMjM2MmVlNmUwZjE4MTI4Mg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2010-09-08T21:53:48Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2010-09-08T21:53:48Z"}, "message": "re PR debug/45419 (-fcompare-debug failure at -O3)\n\nPR debug/45419\nPR debug/45408\n* tree-pretty-print.c (dump_generic_node): Disregard top-level\nqualifiers in otherwise equal MEM_REF pointer types.\n* fold-const.c (operand_equal_p): Compare pointer type of MEM_REFs.\n* tree.c (iterative_hash_expr): Hash the pointer type of MEM_REFs.\n\nFrom-SVN: r164031", "tree": {"sha": "51a704702b2ef87537d068e5ea5a55d72cb03512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51a704702b2ef87537d068e5ea5a55d72cb03512"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/359bea1da45819206bf0a9132362ee6e0f181282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359bea1da45819206bf0a9132362ee6e0f181282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/359bea1da45819206bf0a9132362ee6e0f181282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359bea1da45819206bf0a9132362ee6e0f181282/comments", "author": null, "committer": null, "parents": [{"sha": "0a7822a32b830084f37e78545047ce0d4e5cd486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7822a32b830084f37e78545047ce0d4e5cd486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7822a32b830084f37e78545047ce0d4e5cd486"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "e02f98fbb610a7c22b186035dfbd0cce7f388170", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359bea1da45819206bf0a9132362ee6e0f181282/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359bea1da45819206bf0a9132362ee6e0f181282/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=359bea1da45819206bf0a9132362ee6e0f181282", "patch": "@@ -1,3 +1,12 @@\n+2010-09-08  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/45419\n+\tPR debug/45408\n+\t* tree-pretty-print.c (dump_generic_node): Disregard top-level\n+\tqualifiers in otherwise equal MEM_REF pointer types.\n+\t* fold-const.c (operand_equal_p): Compare pointer type of MEM_REFs.\n+\t* tree.c (iterative_hash_expr): Hash the pointer type of MEM_REFs.\n+\n 2010-09-08  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR target/44392"}, {"sha": "c9417037a4bc41c87ce66d36fa3af479d7ab17d6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359bea1da45819206bf0a9132362ee6e0f181282/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359bea1da45819206bf0a9132362ee6e0f181282/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=359bea1da45819206bf0a9132362ee6e0f181282", "patch": "@@ -2591,14 +2591,17 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \t  return OP_SAME (0);\n \n \tcase MEM_REF:\n-\t  /* Require equal access sizes.  We can have incomplete types\n-\t     for array references of variable-sized arrays from the\n-\t     Fortran frontent though.  */\n+\t  /* Require equal access sizes, and similar pointer types.\n+\t     We can have incomplete types for array references of\n+\t     variable-sized arrays from the Fortran frontent\n+\t     though.  */\n \t  return ((TYPE_SIZE (TREE_TYPE (arg0)) == TYPE_SIZE (TREE_TYPE (arg1))\n \t\t   || (TYPE_SIZE (TREE_TYPE (arg0))\n \t\t       && TYPE_SIZE (TREE_TYPE (arg1))\n \t\t       && operand_equal_p (TYPE_SIZE (TREE_TYPE (arg0)),\n \t\t\t\t\t   TYPE_SIZE (TREE_TYPE (arg1)), flags)))\n+\t\t  && (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (arg0, 1)))\n+\t\t      == TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (arg1, 1))))\n \t\t  && OP_SAME (0) && OP_SAME (1));\n \n \tcase ARRAY_REF:"}, {"sha": "108a0d1893750f6945ada4debc0240d20e3c4173", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359bea1da45819206bf0a9132362ee6e0f181282/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359bea1da45819206bf0a9132362ee6e0f181282/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=359bea1da45819206bf0a9132362ee6e0f181282", "patch": "@@ -809,8 +809,8 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t\t== TYPE_MODE (TREE_TYPE (TREE_OPERAND (node, 1))))\n \t    && (TYPE_REF_CAN_ALIAS_ALL (TREE_TYPE (TREE_OPERAND (node, 0)))\n \t\t== TYPE_REF_CAN_ALIAS_ALL (TREE_TYPE (TREE_OPERAND (node, 1))))\n-\t    && (TYPE_QUALS (TREE_TYPE (TREE_OPERAND (node, 0)))\n-\t\t== TYPE_QUALS (TREE_TYPE (TREE_OPERAND (node, 1))))\n+\t    && (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (node, 0)))\n+\t\t== TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (node, 1))))\n \t    /* Same value types ignoring qualifiers.  */\n \t    && (TYPE_MAIN_VARIANT (TREE_TYPE (node))\n \t\t== TYPE_MAIN_VARIANT\n@@ -829,9 +829,12 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  }\n \telse\n \t  {\n+\t    tree ptype;\n+\n \t    pp_string (buffer, \"MEM[\");\n \t    pp_string (buffer, \"(\");\n-\t    dump_generic_node (buffer, TREE_TYPE (TREE_OPERAND (node, 1)),\n+\t    ptype = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (node, 1)));\n+\t    dump_generic_node (buffer, ptype,\n \t\t\t       spc, flags | TDF_SLIM, false);\n \t    pp_string (buffer, \")\");\n \t    dump_generic_node (buffer, TREE_OPERAND (node, 0),\n@@ -1170,8 +1173,8 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t\t      == TYPE_MODE (TREE_TYPE (TREE_OPERAND (op0, 1))))\n \t\t  && (TYPE_REF_CAN_ALIAS_ALL (TREE_TYPE (TREE_OPERAND (op0, 0)))\n \t\t      == TYPE_REF_CAN_ALIAS_ALL (TREE_TYPE (TREE_OPERAND (op0, 1))))\n-\t\t  && (TYPE_QUALS (TREE_TYPE (TREE_OPERAND (op0, 0)))\n-\t\t      == TYPE_QUALS (TREE_TYPE (TREE_OPERAND (op0, 1))))\n+\t\t  && (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (op0, 0)))\n+\t\t      == TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (op0, 1))))\n \t\t  /* Same value types ignoring qualifiers.  */\n \t\t  && (TYPE_MAIN_VARIANT (TREE_TYPE (op0))\n \t\t      == TYPE_MAIN_VARIANT"}, {"sha": "677e3bbf7e42a0d3ff5ad951f36933a9db7e0f94", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/359bea1da45819206bf0a9132362ee6e0f181282/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/359bea1da45819206bf0a9132362ee6e0f181282/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=359bea1da45819206bf0a9132362ee6e0f181282", "patch": "@@ -6768,6 +6768,21 @@ iterative_hash_expr (const_tree t, hashval_t val)\n \t  }\n \treturn val;\n       }\n+    case MEM_REF:\n+      {\n+\t/* The type of the second operand is relevant, except for\n+\t   its top-level qualifiers.  */\n+\ttree type = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (t, 1)));\n+\n+\tval = iterative_hash_object (TYPE_HASH (type), val);\n+\n+\t/* We could use the standard hash computation from this point\n+\t   on.  */\n+\tval = iterative_hash_object (code, val);\n+\tval = iterative_hash_expr (TREE_OPERAND (t, 1), val);\n+\tval = iterative_hash_expr (TREE_OPERAND (t, 0), val);\n+\treturn val;\n+      }\n     case FUNCTION_DECL:\n       /* When referring to a built-in FUNCTION_DECL, use the __builtin__ form.\n \t Otherwise nodes that compare equal according to operand_equal_p might"}]}