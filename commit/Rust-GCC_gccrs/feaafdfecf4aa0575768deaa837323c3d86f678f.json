{"sha": "feaafdfecf4aa0575768deaa837323c3d86f678f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVhYWZkZmVjZjRhYTA1NzU3NjhkZWFhODM3MzIzYzNkODZmNjc4Zg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-30T11:07:52Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-30T14:50:16Z"}, "message": "Apply defaults if available to type substitutions\n\nWhen we get defaults specified to Type parameters we must resolve the type\nbefore insert the name into the name scope otherwise we can end up with\nforward declared type parameters being resolved.\n\nWhen we need to apply defaults during substitution we must check if they\nthemseleves need substitutions also with the mappings we have generated\nso far.\n\nFixes #307", "tree": {"sha": "17a411358cdcfc8d6a0ff62655a76b82c0764ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17a411358cdcfc8d6a0ff62655a76b82c0764ce5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feaafdfecf4aa0575768deaa837323c3d86f678f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feaafdfecf4aa0575768deaa837323c3d86f678f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feaafdfecf4aa0575768deaa837323c3d86f678f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feaafdfecf4aa0575768deaa837323c3d86f678f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0276ec39a9c3b839c47ce28838a8d5af25fbf598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0276ec39a9c3b839c47ce28838a8d5af25fbf598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0276ec39a9c3b839c47ce28838a8d5af25fbf598"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "a1dcb4c73f62a9e2c360e06c76a74ea9f94ca8d7", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feaafdfecf4aa0575768deaa837323c3d86f678f/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feaafdfecf4aa0575768deaa837323c3d86f678f/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=feaafdfecf4aa0575768deaa837323c3d86f678f", "patch": "@@ -262,6 +262,12 @@ class ResolveGenericParam : public ResolverBase\n   {\n     ok = true;\n \n+    // if it has a type lets resolve it\n+    if (param.has_type ())\n+      {\n+\tResolveType::go (param.get_type ().get (), param.get_node_id ());\n+      }\n+\n     // for now lets focus on handling the basics: like struct<T> { a:T, ....}\n     resolver->get_type_scope ().insert (\n       CanonicalPath (param.get_type_representation ()), param.get_node_id (),\n@@ -271,12 +277,6 @@ class ResolveGenericParam : public ResolverBase\n \t\t       \"generic param redefined multiple times\");\n \trust_error_at (locus, \"was defined here\");\n       });\n-\n-    // if it has a type lets resolve it\n-    if (param.has_type ())\n-      {\n-\tResolveType::go (param.get_type ().get (), param.get_node_id ());\n-      }\n   }\n \n private:"}, {"sha": "f5daf3a87f2e5e66f7dd040f911c8e39eec0aab9", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feaafdfecf4aa0575768deaa837323c3d86f678f/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feaafdfecf4aa0575768deaa837323c3d86f678f/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=feaafdfecf4aa0575768deaa837323c3d86f678f", "patch": "@@ -271,6 +271,20 @@ SubstitutionRef::get_mappings_from_generic_args (HIR::GenericArgs &args)\n \t  rust_assert (param.param_has_default_ty ());\n \n \t  BaseType *resolved = param.get_default_ty ();\n+\t  if (resolved->get_kind () == TypeKind::ERROR)\n+\t    return SubstitutionArgumentMappings::error ();\n+\n+\t  // this resolved default might already contain default parameters\n+\t  if (resolved->contains_type_parameters ())\n+\t    {\n+\t      SubstitutionArgumentMappings intermediate (mappings,\n+\t\t\t\t\t\t\t args.get_locus ());\n+\t      resolved = Resolver::SubstMapperInternal::Resolve (resolved,\n+\t\t\t\t\t\t\t\t intermediate);\n+\t      if (resolved->get_kind () == TypeKind::ERROR)\n+\t\treturn SubstitutionArgumentMappings::error ();\n+\t    }\n+\n \t  SubstitutionArg subst_arg (&param, resolved);\n \t  mappings.push_back (std::move (subst_arg));\n \t}"}, {"sha": "e7792e3efb31784ba5983d32eabd2b86a005a9a5", "filename": "gcc/testsuite/rust.test/compile/generics25.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feaafdfecf4aa0575768deaa837323c3d86f678f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics25.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feaafdfecf4aa0575768deaa837323c3d86f678f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics25.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics25.rs?ref=feaafdfecf4aa0575768deaa837323c3d86f678f", "patch": "@@ -0,0 +1,9 @@\n+struct Foo<A, B = (A, A)>(A, B);\n+\n+fn main() {\n+    let a: Foo<bool>;\n+    a = Foo::<bool>(true, (false, true));\n+\n+    let b: (bool, bool);\n+    b = a.1;\n+}"}, {"sha": "c1ff89b118ef8bd241c98713c5160beda94428a3", "filename": "gcc/testsuite/rust.test/xfail_compile/generics9.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feaafdfecf4aa0575768deaa837323c3d86f678f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feaafdfecf4aa0575768deaa837323c3d86f678f/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics9.rs?ref=feaafdfecf4aa0575768deaa837323c3d86f678f", "patch": "@@ -0,0 +1,11 @@\n+// { dg-excess-errors \"Noisy error and debug\" }\n+struct Foo<A, B = (A, B)>(A, B);\n+// { dg-error \"failed to resolve TypePath: B\" \"\" { target { *-*-* } } .-1 }\n+\n+fn main() {\n+    let a: Foo<bool>;\n+    a = Foo::<bool>(true, (false, true));\n+\n+    let b: (bool, bool);\n+    b = a.1;\n+}"}]}