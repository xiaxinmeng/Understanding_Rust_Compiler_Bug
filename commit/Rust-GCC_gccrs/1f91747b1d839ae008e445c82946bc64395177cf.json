{"sha": "1f91747b1d839ae008e445c82946bc64395177cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5MTc0N2IxZDgzOWFlMDA4ZTQ0NWM4Mjk0NmJjNjQzOTUxNzdjZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-06-03T08:03:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-06-03T08:03:11Z"}, "message": "re PR middle-end/71387 (ICE in emit_move_insn, at expr.c:3418 with -Og)\n\n\tPR middle-end/71387\n\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): If redirecting\n\tto noreturn e->callee->decl that has void return type and void\n\targuments, adjust gimple_call_fntype and remove lhs even if it had\n\tpreviously addressable type.\n\n\t* g++.dg/opt/pr71387.C: New test.\n\nFrom-SVN: r237053", "tree": {"sha": "7835bea89da405838a720a63a6d6f3bab2d74b35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7835bea89da405838a720a63a6d6f3bab2d74b35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f91747b1d839ae008e445c82946bc64395177cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f91747b1d839ae008e445c82946bc64395177cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f91747b1d839ae008e445c82946bc64395177cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f91747b1d839ae008e445c82946bc64395177cf/comments", "author": null, "committer": null, "parents": [{"sha": "47b8392308f4122cb327d351e0f2f34e1b4960bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b8392308f4122cb327d351e0f2f34e1b4960bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47b8392308f4122cb327d351e0f2f34e1b4960bc"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "c2eeb9033e749c3907e0b631b1e307362c9f71bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f91747b1d839ae008e445c82946bc64395177cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f91747b1d839ae008e445c82946bc64395177cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f91747b1d839ae008e445c82946bc64395177cf", "patch": "@@ -1,8 +1,16 @@\n+2016-06-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/71387\n+\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): If redirecting\n+\tto noreturn e->callee->decl that has void return type and void\n+\targuments, adjust gimple_call_fntype and remove lhs even if it had\n+\tpreviously addressable type.\n+\n 2016-06-02  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/71328\n \t* tree-ssa-threadupdate.c (duplicate_thread_path): Fix off-by-one\n-\terror when checking for a jump back onto the copied path.  */\n+\terror when checking for a jump back onto the copied path.\n \n 2016-06-02  David Malcolm  <dmalcolm@redhat.com>\n "}, {"sha": "e256dd05d357475dd7b0372e1b3307e9d97e9ebc", "filename": "gcc/cgraph.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f91747b1d839ae008e445c82946bc64395177cf/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f91747b1d839ae008e445c82946bc64395177cf/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1f91747b1d839ae008e445c82946bc64395177cf", "patch": "@@ -1512,8 +1512,20 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n       update_stmt_fn (DECL_STRUCT_FUNCTION (e->caller->decl), new_stmt);\n     }\n \n+  /* If changing the call to __cxa_pure_virtual or similar noreturn function,\n+     adjust gimple_call_fntype too.  */\n+  if (gimple_call_noreturn_p (new_stmt)\n+      && VOID_TYPE_P (TREE_TYPE (TREE_TYPE (e->callee->decl)))\n+      && TYPE_ARG_TYPES (TREE_TYPE (e->callee->decl))\n+      && (TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (e->callee->decl)))\n+\t  == void_type_node))\n+    gimple_call_set_fntype (new_stmt, TREE_TYPE (e->callee->decl));\n+\n   /* If the call becomes noreturn, remove the LHS if possible.  */\n-  if (gimple_call_noreturn_p (new_stmt) && should_remove_lhs_p (lhs))\n+  if (lhs\n+      && gimple_call_noreturn_p (new_stmt)\n+      && (VOID_TYPE_P (TREE_TYPE (gimple_call_fntype (new_stmt)))\n+\t  || should_remove_lhs_p (lhs)))\n     {\n       if (TREE_CODE (lhs) == SSA_NAME)\n \t{"}, {"sha": "c6d6392b1443bedbb7791c4794b0050efb04d706", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f91747b1d839ae008e445c82946bc64395177cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f91747b1d839ae008e445c82946bc64395177cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f91747b1d839ae008e445c82946bc64395177cf", "patch": "@@ -1,3 +1,8 @@\n+2016-06-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/71387\n+\t* g++.dg/opt/pr71387.C: New test.\n+\n 2016-06-02  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/71328"}, {"sha": "56f4a4d38b4c79b2c9e18f869adfcbb1e8e9059c", "filename": "gcc/testsuite/g++.dg/opt/pr71387.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f91747b1d839ae008e445c82946bc64395177cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr71387.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f91747b1d839ae008e445c82946bc64395177cf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr71387.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr71387.C?ref=1f91747b1d839ae008e445c82946bc64395177cf", "patch": "@@ -0,0 +1,52 @@\n+// PR middle-end/71387\n+// { dg-do compile }\n+// { dg-options \"-Og\" }\n+\n+struct A\n+{\n+  A ();\n+  inline A (const A &);\n+};\n+\n+struct B\n+{\n+  explicit B (unsigned long) : b(0), c(1) {}\n+  A a;\n+  unsigned long b;\n+  int c;\n+};\n+\n+struct C {};\n+\n+struct D\n+{\n+  explicit D (const C *) {}\n+};\n+\n+struct E : public D\n+{\n+  E (const C *x) : D(x) {}\n+  virtual A foo () const = 0;\n+  virtual A bar () const = 0;\n+};\n+\n+struct F : public B\n+{\n+  inline void baz ();\n+  F (const E *);\n+  const E *f;\n+};\n+\n+inline void\n+F::baz ()\n+{\n+  if (b == 0)\n+    a = f->bar ();\n+  else\n+    a = f->foo ();\n+}\n+\n+F::F (const E *) : B(4)\n+{\n+  baz ();\n+}"}]}