{"sha": "481817e4b9403845d7dad473bc4d134057265189", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxODE3ZTRiOTQwMzg0NWQ3ZGFkNDczYmM0ZDEzNDA1NzI2NTE4OQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-08-04T15:51:12Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-08-04T15:51:12Z"}, "message": "re PR c++/16696 (Strange message when operator++ not found)\n\n2009-08-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/16696\ncp/\n\t* call.c (build_new_op): Only try prefix operator if -fpermissive,\n\totherwise just error.\ntestsuite/\n\t* g++.dg/parse/pr16696.C: New.\n\t* g++.dg/parse/pr16696-permissive.C: New.\n\nFrom-SVN: r150461", "tree": {"sha": "ed10113afa8273ad6291ba4ffd28343a25b41bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed10113afa8273ad6291ba4ffd28343a25b41bb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/481817e4b9403845d7dad473bc4d134057265189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481817e4b9403845d7dad473bc4d134057265189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481817e4b9403845d7dad473bc4d134057265189", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481817e4b9403845d7dad473bc4d134057265189/comments", "author": null, "committer": null, "parents": [{"sha": "1b2dc47dd633bf83ec5f0730de51a3c0d0cf10c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b2dc47dd633bf83ec5f0730de51a3c0d0cf10c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b2dc47dd633bf83ec5f0730de51a3c0d0cf10c9"}], "stats": {"total": 68, "additions": 62, "deletions": 6}, "files": [{"sha": "71fed72eb921f14bdacd90d20ae012541afe9062", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481817e4b9403845d7dad473bc4d134057265189/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481817e4b9403845d7dad473bc4d134057265189/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=481817e4b9403845d7dad473bc4d134057265189", "patch": "@@ -1,3 +1,9 @@\n+2009-08-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/16696\n+\t* call.c (build_new_op): Only try prefix operator if -fpermissive,\n+\totherwise just error.\n+\n 2009-08-04  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/39706"}, {"sha": "f6a083bd6776aeeedf462b7e5adc1583c6e08e46", "filename": "gcc/cp/call.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481817e4b9403845d7dad473bc4d134057265189/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481817e4b9403845d7dad473bc4d134057265189/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=481817e4b9403845d7dad473bc4d134057265189", "patch": "@@ -4255,13 +4255,23 @@ build_new_op (enum tree_code code, int flags, tree arg1, tree arg2, tree arg3,\n \t  if (!(complain & tf_error))\n \t    return error_mark_node;\n \n-\t  /* Look for an `operator++ (int)'.  If they didn't have\n-\t     one, then we fall back to the old way of doing things.  */\n+\t  /* Look for an `operator++ (int)'. Pre-1985 C++ didn't\n+\t     distinguish between prefix and postfix ++ and\n+\t     operator++() was used for both, so we allow this with\n+\t     -fpermissive.  */\n \t  if (flags & LOOKUP_COMPLAIN)\n-\t    permerror (input_location, \"no %<%D(int)%> declared for postfix %qs, \"\n-\t\t       \"trying prefix operator instead\",\n-\t\t       fnname,\n-\t\t       operator_name_info[code].name);\n+\t    {\n+\t      const char *msg = (flag_permissive) \n+\t\t? G_(\"no %<%D(int)%> declared for postfix %qs,\"\n+\t\t     \" trying prefix operator instead\")\n+\t\t: G_(\"no %<%D(int)%> declared for postfix %qs\");\n+\t      permerror (input_location, msg, fnname,\n+\t\t\t operator_name_info[code].name);\n+\t    }\n+\n+\t  if (!flag_permissive)\n+\t    return error_mark_node;\n+\n \t  if (code == POSTINCREMENT_EXPR)\n \t    code = PREINCREMENT_EXPR;\n \t  else"}, {"sha": "cecd2a13ba0b1a744d3dff595e6c580fba986296", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481817e4b9403845d7dad473bc4d134057265189/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481817e4b9403845d7dad473bc4d134057265189/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=481817e4b9403845d7dad473bc4d134057265189", "patch": "@@ -1,3 +1,9 @@\n+2009-08-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/16696\n+\t* g++.dg/parse/pr16696.C: New.\n+\t* g++.dg/parse/pr16696-permissive.C: New.\n+\n 2009-08-04  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/40875"}, {"sha": "1d8a920ad25e544f41c766d4da7e01878e7af1c8", "filename": "gcc/testsuite/g++.dg/parse/pr16696-permissive.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481817e4b9403845d7dad473bc4d134057265189/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696-permissive.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481817e4b9403845d7dad473bc4d134057265189/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696-permissive.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696-permissive.C?ref=481817e4b9403845d7dad473bc4d134057265189", "patch": "@@ -0,0 +1,17 @@\n+// PR 16696 Strange message when operator++ not found\n+// { dg-do compile } \n+// { dg-options \"-fdiagnostics-show-option -fpermissive\" } \n+\n+\n+struct X { void operator++(); }; \n+struct Y { };\n+\n+int main () { \n+  X x; \n+  Y y;\n+  x++; // { dg-warning \"trying prefix operator\" } \n+\n+  y++; // { dg-warning \"trying prefix operator\" } \n+  // { dg-error \"no match\" \"\" { target *-*-* } 14 }\n+} \n+"}, {"sha": "902e2a1a90b5a9404db2438fa19044345e9c520a", "filename": "gcc/testsuite/g++.dg/parse/pr16696.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481817e4b9403845d7dad473bc4d134057265189/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481817e4b9403845d7dad473bc4d134057265189/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr16696.C?ref=481817e4b9403845d7dad473bc4d134057265189", "patch": "@@ -0,0 +1,17 @@\n+// PR 16696 Strange message when operator++ not found\n+// { dg-do compile } \n+// { dg-options \"-fdiagnostics-show-option\" } \n+\n+\n+struct X { void operator++(); }; \n+struct Y { };\n+\n+int main () { \n+  X x; \n+  Y y;\n+  x++; // { dg-bogus \"trying prefix operator\" } \n+  // { dg-error \"fpermissive\" \"\" { target *-*-* } 12 }\n+  y++; // { dg-bogus \"trying prefix operator\" } \n+  // { dg-error \"fpermissive\" \"\" { target *-*-* } 14 }\n+} \n+"}]}