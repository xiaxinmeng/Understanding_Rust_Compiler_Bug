{"sha": "a39a7484b11e4f6bfa4d0799671564b09f43dc24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM5YTc0ODRiMTFlNGY2YmZhNGQwNzk5NjcxNTY0YjA5ZjQzZGMyNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-24T13:16:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-24T13:16:26Z"}, "message": "(negate_rtx): Don't try to negate a constant ourself; instead call\nsimplify_unary_operation.\n\nFrom-SVN: r11611", "tree": {"sha": "b656f91e5b4306abf4cbd7bafc4f70229ba02a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b656f91e5b4306abf4cbd7bafc4f70229ba02a9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a39a7484b11e4f6bfa4d0799671564b09f43dc24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39a7484b11e4f6bfa4d0799671564b09f43dc24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a39a7484b11e4f6bfa4d0799671564b09f43dc24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39a7484b11e4f6bfa4d0799671564b09f43dc24/comments", "author": null, "committer": null, "parents": [{"sha": "3ef00709c644f236ffeae3e990704767b749221a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef00709c644f236ffeae3e990704767b749221a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef00709c644f236ffeae3e990704767b749221a"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "0d3983c183ab1437c12aee15335f435fbe109894", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39a7484b11e4f6bfa4d0799671564b09f43dc24/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39a7484b11e4f6bfa4d0799671564b09f43dc24/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=a39a7484b11e4f6bfa4d0799671564b09f43dc24", "patch": "@@ -185,21 +185,12 @@ negate_rtx (mode, x)\n      enum machine_mode mode;\n      rtx x;\n {\n-  if (GET_CODE (x) == CONST_INT)\n-    {\n-      HOST_WIDE_INT val = - INTVAL (x);\n-      if (GET_MODE_BITSIZE (mode) < HOST_BITS_PER_WIDE_INT)\n-\t{\n-\t  /* Sign extend the value from the bits that are significant.  */\n-\t  if (val & ((HOST_WIDE_INT) 1 << (GET_MODE_BITSIZE (mode) - 1)))\n-\t    val |= (HOST_WIDE_INT) (-1) << GET_MODE_BITSIZE (mode);\n-\t  else\n-\t    val &= ((HOST_WIDE_INT) 1 << GET_MODE_BITSIZE (mode)) - 1;\n-\t}\n-      return GEN_INT (val);\n-    }\n-  else\n-    return expand_unop (GET_MODE (x), neg_optab, x, NULL_RTX, 0);\n+  rtx result = simplify_unary_operation (NEG, mode, x, mode);\n+\n+  if (result = 0)\n+    result = expand_unop (mode, neg_optab, x, NULL_RTX, 0);\n+\n+  return result;\n }\n \f\n /* Generate code to store value from rtx VALUE"}]}