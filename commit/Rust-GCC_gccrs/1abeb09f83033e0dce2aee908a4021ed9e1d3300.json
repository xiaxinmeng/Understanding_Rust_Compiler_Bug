{"sha": "1abeb09f83033e0dce2aee908a4021ed9e1d3300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFiZWIwOWY4MzAzM2UwZGNlMmFlZTkwOGE0MDIxZWQ5ZTFkMzMwMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-08-07T20:35:00Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-08-07T20:35:00Z"}, "message": "i386.c (ix86_stack_protect_guard): Generate memory reference to a SSP offset in TLS address space.\n\n\t* config/i386/i386.c (ix86_stack_protect_guard): Generate\n\tmemory reference to a SSP offset in TLS address space.\n\t(ix86_print_operand) <case '@'>: Remove.\n\t(ix86_print_operand_punct_valid_p): Remove '@' code.\n\t* config/i386/i386.md (unspec): Remove UNSPEC_SP_TLS_SET and\n\tUNSPEC_SP_TLS_TEST.\n\t(stack_tls_protect_set_<mode>): Remove.\n\t(stack_protect_set): Do not call gen_stack_tls_protect_set_<mode>.\n\t(stack_tls_protect_test_<mode>): Remove.\n\t(stack_protect_test): Do not call gen_stack_tls_protect_test_<mode>.\n\nFrom-SVN: r250932", "tree": {"sha": "66a54999c9fec8fa1799741f6db2876968ab6a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66a54999c9fec8fa1799741f6db2876968ab6a95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1abeb09f83033e0dce2aee908a4021ed9e1d3300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1abeb09f83033e0dce2aee908a4021ed9e1d3300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1abeb09f83033e0dce2aee908a4021ed9e1d3300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1abeb09f83033e0dce2aee908a4021ed9e1d3300/comments", "author": null, "committer": null, "parents": [{"sha": "0cbfcdf46fa0d7eb339e338975997d2b34563677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cbfcdf46fa0d7eb339e338975997d2b34563677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cbfcdf46fa0d7eb339e338975997d2b34563677"}], "stats": {"total": 94, "additions": 37, "deletions": 57}, "files": [{"sha": "123ee7d5b16864612f0b86837e2fffb5663e1051", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1abeb09f83033e0dce2aee908a4021ed9e1d3300/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1abeb09f83033e0dce2aee908a4021ed9e1d3300/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1abeb09f83033e0dce2aee908a4021ed9e1d3300", "patch": "@@ -1,4 +1,17 @@\n-Olivier Hainque  <hainque@adacore.com>\n+2017-08-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_stack_protect_guard): Generate\n+\tmemory reference to a SSP offset in TLS address space.\n+\t(ix86_print_operand) <case '@'>: Remove.\n+\t(ix86_print_operand_punct_valid_p): Remove '@' code.\n+\t* config/i386/i386.md (unspec): Remove UNSPEC_SP_TLS_SET and\n+\tUNSPEC_SP_TLS_TEST.\n+\t(stack_tls_protect_set_<mode>): Remove.\n+\t(stack_protect_set): Do not call gen_stack_tls_protect_set_<mode>.\n+\t(stack_tls_protect_test_<mode>): Remove.\n+\t(stack_protect_test): Do not call gen_stack_tls_protect_test_<mode>.\n+\n+2017-08-07  Olivier Hainque  <hainque@adacore.com>\n \n \tPR target/81755\n \t* config/vxworksae.h (VXWORKS_HAVE_TLS): Define."}, {"sha": "dfef996e36cfdbd43653744c21191c3efe8febcb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1abeb09f83033e0dce2aee908a4021ed9e1d3300/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1abeb09f83033e0dce2aee908a4021ed9e1d3300/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1abeb09f83033e0dce2aee908a4021ed9e1d3300", "patch": "@@ -18624,7 +18624,6 @@ print_reg (rtx x, int code, FILE *file)\n    + -- print a branch hint as 'cs' or 'ds' prefix\n    ; -- print a semicolon (after prefixes due to bug in older gas).\n    ~ -- print \"i\" if TARGET_AVX2, \"f\" otherwise.\n-   @ -- print a segment register of thread base pointer load\n    ^ -- print addr32 prefix if TARGET_64BIT and Pmode != word_mode\n    ! -- print MPX prefix for jxx/call/ret instructions if required.\n  */\n@@ -19168,19 +19167,6 @@ ix86_print_operand (FILE *file, rtx x, int code)\n #endif\n \t  return;\n \n-\tcase '@':\n-\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n-\t    putc ('%', file);\n-\n-\t  /* The kernel uses a different segment register for performance\n-\t     reasons; a system call would not have to trash the userspace\n-\t     segment register, which would be expensive.  */\n-\t  if (TARGET_64BIT && ix86_cmodel != CM_KERNEL)\n-\t    fputs (\"fs\", file);\n-\t  else\n-\t    fputs (\"gs\", file);\n-\t  return;\n-\n \tcase '~':\n \t  putc (TARGET_AVX2 ? 'i' : 'f', file);\n \t  return;\n@@ -19339,8 +19325,8 @@ ix86_print_operand (FILE *file, rtx x, int code)\n static bool\n ix86_print_operand_punct_valid_p (unsigned char code)\n {\n-  return (code == '@' || code == '*' || code == '+' || code == '&'\n-\t  || code == ';' || code == '~' || code == '^' || code == '!');\n+  return (code == '*' || code == '+' || code == '&' || code == ';'\n+\t  || code == '~' || code == '^' || code == '!');\n }\n \f\n /* Print a memory operand whose address is ADDR.  */\n@@ -45810,13 +45796,31 @@ ix86_mangle_type (const_tree type)\n }\n \n #ifdef TARGET_THREAD_SSP_OFFSET\n-/* If using TLS guards, don't waste time creating and expanding\n-   __stack_chk_guard decl and MEM as we are going to ignore it.  */\n static tree\n ix86_stack_protect_guard (void)\n {\n   if (TARGET_SSP_TLS_GUARD)\n-    return NULL_TREE;\n+    {\n+      tree type_node = lang_hooks.types.type_for_mode (ptr_mode, 1);\n+      addr_space_t as = DEFAULT_TLS_SEG_REG;\n+\n+      /* The kernel uses a different segment register for performance\n+\t reasons; a system call would not have to trash the userspace\n+\t segment register, which would be expensive.  */\n+      if (ix86_cmodel == CM_KERNEL)\n+\tas = ADDR_SPACE_SEG_GS;\n+\n+      int qual = ENCODE_QUAL_ADDR_SPACE (as);\n+\n+      tree type = build_qualified_type (type_node, qual);\n+      tree asptrtype = build_pointer_type (type);\n+      tree sspoff = build_int_cst (asptrtype, TARGET_THREAD_SSP_OFFSET);\n+\n+      tree t = build2 (MEM_REF, asptrtype, sspoff,\n+\t\t       build_int_cst (asptrtype, 0));\n+      return t;\n+    }\n+\n   return default_stack_protect_guard ();\n }\n #endif"}, {"sha": "ebf63fda3dceddd0901dfd4c705d2ad71099e943", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1abeb09f83033e0dce2aee908a4021ed9e1d3300/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1abeb09f83033e0dce2aee908a4021ed9e1d3300/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1abeb09f83033e0dce2aee908a4021ed9e1d3300", "patch": "@@ -61,7 +61,6 @@\n ;; + -- print a branch hint as 'cs' or 'ds' prefix\n ;; ; -- print a semicolon (after prefixes due to bug in older gas).\n ;; ~ -- print \"i\" if TARGET_AVX2, \"f\" otherwise.\n-;; @ -- print a segment register of thread base pointer load\n ;; ^ -- print addr32 prefix if TARGET_64BIT and Pmode != word_mode\n ;; ! -- print MPX prefix for jxx/call/ret instructions if required.\n \n@@ -166,8 +165,6 @@\n   ;; SSP patterns\n   UNSPEC_SP_SET\n   UNSPEC_SP_TEST\n-  UNSPEC_SP_TLS_SET\n-  UNSPEC_SP_TLS_TEST\n \n   ;; For ROUND support\n   UNSPEC_ROUND\n@@ -18718,16 +18715,9 @@\n {\n   rtx (*insn)(rtx, rtx);\n \n-#ifdef TARGET_THREAD_SSP_OFFSET\n-  operands[1] = GEN_INT (TARGET_THREAD_SSP_OFFSET);\n-  insn = (TARGET_LP64\n-\t  ? gen_stack_tls_protect_set_di\n-\t  : gen_stack_tls_protect_set_si);\n-#else\n   insn = (TARGET_LP64\n \t  ? gen_stack_protect_set_di\n \t  : gen_stack_protect_set_si);\n-#endif\n \n   emit_insn (insn (operands[0], operands[1]));\n   DONE;\n@@ -18743,16 +18733,6 @@\n   \"mov{<imodesuffix>}\\t{%1, %2|%2, %1}\\;mov{<imodesuffix>}\\t{%2, %0|%0, %2}\\;xor{l}\\t%k2, %k2\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_insn \"stack_tls_protect_set_<mode>\"\n-  [(set (match_operand:PTR 0 \"memory_operand\" \"=m\")\n-\t(unspec:PTR [(match_operand:PTR 1 \"const_int_operand\" \"i\")]\n-\t\t    UNSPEC_SP_TLS_SET))\n-   (set (match_scratch:PTR 2 \"=&r\") (const_int 0))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n-  \"mov{<imodesuffix>}\\t{%@:%P1, %2|%2, <iptrsize> PTR %@:%P1}\\;mov{<imodesuffix>}\\t{%2, %0|%0, %2}\\;xor{l}\\t%k2, %k2\"\n-  [(set_attr \"type\" \"multi\")])\n-\n (define_expand \"stack_protect_test\"\n   [(match_operand 0 \"memory_operand\")\n    (match_operand 1 \"memory_operand\")\n@@ -18763,16 +18743,9 @@\n \n   rtx (*insn)(rtx, rtx, rtx);\n \n-#ifdef TARGET_THREAD_SSP_OFFSET\n-  operands[1] = GEN_INT (TARGET_THREAD_SSP_OFFSET);\n-  insn = (TARGET_LP64\n-\t  ? gen_stack_tls_protect_test_di\n-\t  : gen_stack_tls_protect_test_si);\n-#else\n   insn = (TARGET_LP64\n \t  ? gen_stack_protect_test_di\n \t  : gen_stack_protect_test_si);\n-#endif\n \n   emit_insn (insn (flags, operands[0], operands[1]));\n \n@@ -18791,16 +18764,6 @@\n   \"mov{<imodesuffix>}\\t{%1, %3|%3, %1}\\;xor{<imodesuffix>}\\t{%2, %3|%3, %2}\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_insn \"stack_tls_protect_test_<mode>\"\n-  [(set (match_operand:CCZ 0 \"flags_reg_operand\")\n-\t(unspec:CCZ [(match_operand:PTR 1 \"memory_operand\" \"m\")\n-\t\t     (match_operand:PTR 2 \"const_int_operand\" \"i\")]\n-\t\t    UNSPEC_SP_TLS_TEST))\n-   (clobber (match_scratch:PTR 3 \"=r\"))]\n-  \"\"\n-  \"mov{<imodesuffix>}\\t{%1, %3|%3, %1}\\;xor{<imodesuffix>}\\t{%@:%P2, %3|%3, <iptrsize> PTR %@:%P2}\"\n-  [(set_attr \"type\" \"multi\")])\n-\n (define_insn \"sse4_2_crc32<mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI"}]}