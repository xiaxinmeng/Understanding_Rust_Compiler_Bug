{"sha": "3734527dfa0d10a50aee2f088d37320000fd65bf", "node_id": "C_kwDOANBUbNoAKDM3MzQ1MjdkZmEwZDEwYTUwYWVlMmYwODhkMzczMjAwMDBmZDY1YmY", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-29T00:41:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-03-29T00:41:23Z"}, "message": "analyzer: ensure that we purge state when reusing a conjured_svalue [PR105087]\n\nPR analyzer/105087 describes a false positive from\n-Wanalyzer-double-free in which the analyzer erroneously considers two\nsuccessive inlined vasprintf calls to have allocated the same pointer.\n\nThe root cause is that the result written back from vasprintf is a\nconjured_svalue, and that we normally purge state when reusing a\nconjured_svalue, but various places in the code were calling\nregion_model_manager::get_or_create_conjured_svalue but failing to\nthen call region_model::purge_state_involving on the result.\n\nThis patch fixes things by moving responsibility for calling\nregion_model::purge_state_involving into\nregion_model_manager::get_or_create_conjured_svalue, so that it is\nalways called when reusing a conjured_svalue, fixing the false positive.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/105087\n\t* analyzer.h (class conjured_purge): New forward decl.\n\t* region-model-asm.cc (region_model::on_asm_stmt): Add\n\tconjured_purge param to calls binding_cluster::on_asm and\n\tregion_model_manager::get_or_create_conjured_svalue.\n\t* region-model-impl-calls.cc\n\t(call_details::get_or_create_conjured_svalue): Likewise for call\n\tto region_model_manager::get_or_create_conjured_svalue.\n\t(region_model::impl_call_fgets): Remove call to\n\tregion_model::purge_state_involving, as this is now done\n\timplicitly by call_details::get_or_create_conjured_svalue.\n\t(region_model::impl_call_fread): Likewise.\n\t(region_model::impl_call_strchr): Pass conjured_purge param to\n\tcall to region_model_manager::get_or_create_conjured_svalue.\n\t* region-model-manager.cc (conjured_purge::purge): New.\n\t(region_model_manager::get_or_create_conjured_svalue): Add\n\tparam \"p\".  Use it to purge state when reusing an existing\n\tconjured_svalue.\n\t* region-model.cc (region_model::on_call_pre): Replace call to\n\tregion_model::purge_state_involving with passing conjured_purge\n\tto region_model_manager::get_or_create_conjured_svalue.\n\t(region_model::handle_unrecognized_call): Pass conjured_purge to\n\tstore::on_unknown_fncall.\n\t* region-model.h\n\t(region_model_manager::get_or_create_conjured_svalue): Add param\n\t\"p\".\n\t* store.cc (binding_cluster::on_unknown_fncall): Likewise.  Pass\n\tit on to region_model_manager::get_or_create_conjured_svalue.\n\t(binding_cluster::on_asm): Likewise.\n\t(store::on_unknown_fncall): Add param \"p\" and pass it on to\n\tbinding_cluster::on_unknown_fncall.\n\t* store.h (binding_cluster::on_unknown_fncall): Add param p.\n\t(binding_cluster::on_asm): Likewise.\n\t(store::on_unknown_fncall): Likewise.\n\t* svalue.h (class conjured_purge): New.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/pr105087-1.c: New test.\n\t* gcc.dg/analyzer/pr105087-2.c: New test.\n\t* gcc.dg/analyzer/vasprintf-1.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "0885e7f4830b9064a520fd4583eb16f54c8660a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0885e7f4830b9064a520fd4583eb16f54c8660a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3734527dfa0d10a50aee2f088d37320000fd65bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3734527dfa0d10a50aee2f088d37320000fd65bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3734527dfa0d10a50aee2f088d37320000fd65bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3734527dfa0d10a50aee2f088d37320000fd65bf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1203e8f7880c9751ece5f5302e413b20f4608a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1203e8f7880c9751ece5f5302e413b20f4608a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1203e8f7880c9751ece5f5302e413b20f4608a00"}], "stats": {"total": 207, "additions": 180, "deletions": 27}, "files": [{"sha": "39934a302cb5093070d48b8a7b5f2f8c5856c831", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -70,6 +70,7 @@ class region;\n   class string_region;\n   class bit_range_region;\n class region_model_manager;\n+class conjured_purge;\n struct model_merger;\n class store_manager;\n class store;"}, {"sha": "bb73e6eed60eece94855715756e15e578827bb2c", "filename": "gcc/analyzer/region-model-asm.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fregion-model-asm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fregion-model-asm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-asm.cc?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -272,7 +272,8 @@ region_model::on_asm_stmt (const gasm *stmt, region_model_context *ctxt)\n \tcontinue;\n \n       binding_cluster *cluster = m_store.get_or_create_cluster (base_reg);\n-      cluster->on_asm (stmt, m_mgr->get_store_manager ());\n+      cluster->on_asm (stmt, m_mgr->get_store_manager (),\n+\t\t       conjured_purge (this, ctxt));\n     }\n \n   /* Update the outputs.  */\n@@ -292,8 +293,9 @@ region_model::on_asm_stmt (const gasm *stmt, region_model_context *ctxt)\n \t{\n \t  sval = m_mgr->get_or_create_conjured_svalue (TREE_TYPE (dst_expr),\n \t\t\t\t\t\t       stmt,\n-\t\t\t\t\t\t       dst_reg);\n-\t  purge_state_involving (sval, ctxt);\n+\t\t\t\t\t\t       dst_reg,\n+\t\t\t\t\t\t       conjured_purge (this,\n+\t\t\t\t\t\t\t\t       ctxt));\n \t}\n       set_value (dst_reg, sval, ctxt);\n     }"}, {"sha": "621e7002ffb38e3ae3f7fb6bf8b3374793c30fc4", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -212,13 +212,15 @@ call_details::dump (bool simple) const\n   pp_flush (&pp);\n }\n \n-/* Get a conjured_svalue for this call for REG.  */\n+/* Get a conjured_svalue for this call for REG,\n+   and purge any state already relating to that conjured_svalue.  */\n \n const svalue *\n call_details::get_or_create_conjured_svalue (const region *reg) const\n {\n   region_model_manager *mgr = m_model->get_manager ();\n-  return mgr->get_or_create_conjured_svalue (reg->get_type (), m_call, reg);\n+  return mgr->get_or_create_conjured_svalue (reg->get_type (), m_call, reg,\n+\t\t\t\t\t     conjured_purge (m_model, m_ctxt));\n }\n \n /* Implementations of specific functions.  */\n@@ -434,7 +436,6 @@ region_model::impl_call_fgets (const call_details &cd)\n     {\n       const region *base_reg = reg->get_base_region ();\n       const svalue *new_sval = cd.get_or_create_conjured_svalue (base_reg);\n-      purge_state_involving (new_sval, cd.get_ctxt ());\n       set_value (base_reg, new_sval, cd.get_ctxt ());\n     }\n }\n@@ -449,7 +450,6 @@ region_model::impl_call_fread (const call_details &cd)\n     {\n       const region *base_reg = reg->get_base_region ();\n       const svalue *new_sval = cd.get_or_create_conjured_svalue (base_reg);\n-      purge_state_involving (new_sval, cd.get_ctxt ());\n       set_value (base_reg, new_sval, cd.get_ctxt ());\n     }\n }\n@@ -830,7 +830,9 @@ region_model::impl_call_strchr (const call_details &cd)\n \t      const svalue *offset\n \t\t= mgr->get_or_create_conjured_svalue (size_type_node,\n \t\t\t\t\t\t      cd.get_call_stmt (),\n-\t\t\t\t\t\t      str_reg);\n+\t\t\t\t\t\t      str_reg,\n+\t\t\t\t\t\t      conjured_purge (model,\n+\t\t\t\t\t\t\t\t      ctxt));\n \t      result = mgr->get_or_create_binop (lhs_type, POINTER_PLUS_EXPR,\n \t\t\t\t\t\t str_sval, offset);\n \t    }"}, {"sha": "5ca333a9ed6a03c4caaa072b50145638ce7e6a03", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -1169,17 +1169,38 @@ region_model_manager::get_or_create_compound_svalue (tree type,\n   return compound_sval;\n }\n \n+/* class conjured_purge.  */\n+\n+/* Purge state relating to SVAL.  */\n+\n+void\n+conjured_purge::purge (const conjured_svalue *sval) const\n+{\n+  m_model->purge_state_involving (sval, m_ctxt);\n+}\n+\n /* Return the svalue * of type TYPE for the value conjured for ID_REG\n-   at STMT, creating it if necessary.  */\n+   at STMT, creating it if necessary.\n+   Use P to purge existing state from the svalue, for the case where a\n+   conjured_svalue would be reused along an execution path.  */\n \n const svalue *\n region_model_manager::get_or_create_conjured_svalue (tree type,\n \t\t\t\t\t\t     const gimple *stmt,\n-\t\t\t\t\t\t     const region *id_reg)\n+\t\t\t\t\t\t     const region *id_reg,\n+\t\t\t\t\t\t     const conjured_purge &p)\n {\n   conjured_svalue::key_t key (type, stmt, id_reg);\n   if (conjured_svalue **slot = m_conjured_values_map.get (key))\n-    return *slot;\n+    {\n+      const conjured_svalue *sval = *slot;\n+      /* We're reusing an existing conjured_svalue, perhaps from a different\n+\t state within this analysis, or perhaps from an earlier state on this\n+\t execution path.  For the latter, purge any state involving the \"new\"\n+\t svalue from the current program_state.  */\n+      p.purge (sval);\n+      return sval;\n+    }\n   conjured_svalue *conjured_sval\n     = new conjured_svalue (type, stmt, id_reg);\n   RETURN_UNKNOWN_IF_TOO_COMPLEX (conjured_sval);"}, {"sha": "816b4100f3a2f045b300ef5214bc7b63b64e393b", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -1324,8 +1324,9 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t     use a conjured value, and purge any prior state involving that\n \t     value (in case this is in a loop).  */\n \t  sval = m_mgr->get_or_create_conjured_svalue (TREE_TYPE (lhs), call,\n-\t\t\t\t\t\t       lhs_region);\n-\t  purge_state_involving (sval, ctxt);\n+\t\t\t\t\t\t       lhs_region,\n+\t\t\t\t\t\t       conjured_purge (this,\n+\t\t\t\t\t\t\t\t       ctxt));\n \t}\n       set_value (lhs_region, sval, ctxt);\n     }\n@@ -1802,7 +1803,8 @@ region_model::handle_unrecognized_call (const gcall *call,\n \n   /* Update bindings for all clusters that have escaped, whether above,\n      or previously.  */\n-  m_store.on_unknown_fncall (call, m_mgr->get_store_manager ());\n+  m_store.on_unknown_fncall (call, m_mgr->get_store_manager (),\n+\t\t\t     conjured_purge (this, ctxt));\n \n   /* Purge dynamic extents from any regions that have escaped mutably:\n      realloc could have been called on them.  */"}, {"sha": "23841718b5c2662377c2adfa16f5c84cca83df28", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -277,7 +277,8 @@ class region_model_manager\n   const svalue *get_or_create_compound_svalue (tree type,\n \t\t\t\t\t       const binding_map &map);\n   const svalue *get_or_create_conjured_svalue (tree type, const gimple *stmt,\n-\t\t\t\t\t       const region *id_reg);\n+\t\t\t\t\t       const region *id_reg,\n+\t\t\t\t\t       const conjured_purge &p);\n   const svalue *\n   get_or_create_asm_output_svalue (tree type,\n \t\t\t\t   const gasm *asm_stmt,"}, {"sha": "0014633c3353dc6dacc7b9cbd6c5dc778e08c396", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -1843,12 +1843,14 @@ binding_cluster::mark_as_escaped ()\n \n /* If this cluster has escaped (by this call, or by an earlier one, or\n    by being an external param), then unbind all values and mark it\n-   as \"touched\", so that it has an unknown value, rather than an\n-   initial_svalue.  */\n+   as \"touched\", so that it has a conjured value, rather than an\n+   initial_svalue.\n+   Use P to purge state involving conjured_svalues.  */\n \n void\n binding_cluster::on_unknown_fncall (const gcall *call,\n-\t\t\t\t    store_manager *mgr)\n+\t\t\t\t    store_manager *mgr,\n+\t\t\t\t    const conjured_purge &p)\n {\n   if (m_escaped)\n     {\n@@ -1857,25 +1859,27 @@ binding_cluster::on_unknown_fncall (const gcall *call,\n       /* Bind it to a new \"conjured\" value using CALL.  */\n       const svalue *sval\n \t= mgr->get_svalue_manager ()->get_or_create_conjured_svalue\n-\t    (m_base_region->get_type (), call, m_base_region);\n+\t    (m_base_region->get_type (), call, m_base_region, p);\n       bind (mgr, m_base_region, sval);\n \n       m_touched = true;\n     }\n }\n \n-/* Mark this cluster as having been clobbered by STMT.  */\n+/* Mark this cluster as having been clobbered by STMT.\n+   Use P to purge state involving conjured_svalues.  */\n \n void\n binding_cluster::on_asm (const gasm *stmt,\n-\t\t\t store_manager *mgr)\n+\t\t\t store_manager *mgr,\n+\t\t\t const conjured_purge &p)\n {\n   m_map.empty ();\n \n   /* Bind it to a new \"conjured\" value using CALL.  */\n   const svalue *sval\n     = mgr->get_svalue_manager ()->get_or_create_conjured_svalue\n-    (m_base_region->get_type (), stmt, m_base_region);\n+    (m_base_region->get_type (), stmt, m_base_region, p);\n   bind (mgr, m_base_region, sval);\n \n   m_touched = true;\n@@ -2766,13 +2770,14 @@ store::mark_as_escaped (const region *base_reg)\n    (either in this fncall, or in a prior one).  */\n \n void\n-store::on_unknown_fncall (const gcall *call, store_manager *mgr)\n+store::on_unknown_fncall (const gcall *call, store_manager *mgr,\n+\t\t\t  const conjured_purge &p)\n {\n   m_called_unknown_fn = true;\n \n   for (cluster_map_t::iterator iter = m_cluster_map.begin ();\n        iter != m_cluster_map.end (); ++iter)\n-    (*iter).second->on_unknown_fncall (call, mgr);\n+    (*iter).second->on_unknown_fncall (call, mgr, p);\n }\n \n /* Return true if a non-const pointer to BASE_REG (or something within it)"}, {"sha": "89bb352f6a5c45770e2563037bc0dfef1d6e5686", "filename": "gcc/analyzer/store.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fstore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fstore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.h?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -609,8 +609,10 @@ class binding_cluster\n \t\t\t\t store_manager *mgr);\n \n   void mark_as_escaped ();\n-  void on_unknown_fncall (const gcall *call, store_manager *mgr);\n-  void on_asm (const gasm *stmt, store_manager *mgr);\n+  void on_unknown_fncall (const gcall *call, store_manager *mgr,\n+\t\t\t  const conjured_purge &p);\n+  void on_asm (const gasm *stmt, store_manager *mgr,\n+\t       const conjured_purge &p);\n \n   bool escaped_p () const { return m_escaped; }\n   bool touched_p () const { return m_touched; }\n@@ -735,7 +737,8 @@ class store\n \t\t\t   model_merger *merger);\n \n   void mark_as_escaped (const region *base_reg);\n-  void on_unknown_fncall (const gcall *call, store_manager *mgr);\n+  void on_unknown_fncall (const gcall *call, store_manager *mgr,\n+\t\t\t  const conjured_purge &p);\n   bool escaped_p (const region *reg) const;\n \n   void get_representative_path_vars (const region_model *model,"}, {"sha": "4bbe8588b8d8b7a347266481f3ee2f1f92d0b85e", "filename": "gcc/analyzer/svalue.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fsvalue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Fanalyzer%2Fsvalue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.h?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -1306,6 +1306,27 @@ template <> struct default_hash_traits<compound_svalue::key_t>\n \n namespace ana {\n \n+/* A bundle of state for purging information from a program_state about\n+   a conjured_svalue.  We pass this whenever calling\n+   get_or_create_conjured_svalue, so that if the program_state already\n+   has information about this conjured_svalue on an execution path, we\n+   can purge that information, to avoid the analyzer confusing the two\n+   values as being the same.  */\n+\n+class conjured_purge\n+{\n+public:\n+  conjured_purge (region_model *model, region_model_context *ctxt)\n+  : m_model (model), m_ctxt (ctxt)\n+  {\n+  }\n+  void purge (const conjured_svalue *sval) const;\n+\n+private:\n+  region_model *m_model;\n+  region_model_context *m_ctxt;\n+};\n+\n /* A defined value arising from a statement, where we want to identify a\n    particular unknown value, rather than resorting to the unknown_value\n    singleton, so that the value can have sm-state."}, {"sha": "c4acf4293597a4de3c6a927d6ab37bb66308cb18", "filename": "gcc/testsuite/gcc.dg/analyzer/pr105087-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105087-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105087-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105087-1.c?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -0,0 +1,18 @@\n+#include \"analyzer-decls.h\"\n+\n+extern void *inner_alloc (void);\n+\n+void * __attribute__((noinline))\n+outer_alloc (void)\n+{\n+  return inner_alloc ();\n+}\n+\n+void test_1 (void)\n+{\n+  void *p, *q;\n+\n+  p = outer_alloc ();\n+  q = outer_alloc ();\n+  __analyzer_eval (p == q); /* { dg-warning \"UNKNOWN\" } */\n+}"}, {"sha": "7cd6591b820503b2f5c2ed4d35cbb8bfdd72e59c", "filename": "gcc/testsuite/gcc.dg/analyzer/pr105087-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105087-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105087-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105087-2.c?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -0,0 +1,20 @@\n+#include \"analyzer-decls.h\"\n+\n+extern void inner_alloc (void **);\n+\n+void * __attribute__((noinline))\n+outer_alloc (void)\n+{\n+  void *result;\n+  inner_alloc (&result);\n+  return result;\n+}\n+\n+void test_1 (void)\n+{\n+  void *p, *q;\n+\n+  p = outer_alloc ();\n+  q = outer_alloc ();\n+  __analyzer_eval (p == q);  /* { dg-warning \"UNKNOWN\" } */\n+}"}, {"sha": "061cd008c133538d5e220c4c99f844a8aca3cd70", "filename": "gcc/testsuite/gcc.dg/analyzer/vasprintf-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fvasprintf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734527dfa0d10a50aee2f088d37320000fd65bf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fvasprintf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fvasprintf-1.c?ref=3734527dfa0d10a50aee2f088d37320000fd65bf", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-additional-options \"-Wno-analyzer-too-complex\" } */\n+\n+#define NULL ((void *)0)\n+\n+extern int printf (const char *__restrict __format, ...);\n+extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,\n+\t\t      __builtin_va_list __arg)\n+  __attribute__ ((__nothrow__, __format__ (__printf__, 2, 0))) ;\n+extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));\n+\n+static char * __attribute__ ((__format__ (__printf__, 1, 2)))\n+zasprintf (const char *format, ...)\n+{\n+  char *resultp;\n+  __builtin_va_list args;\n+  __builtin_va_start (args, format);\n+  int r = vasprintf (&resultp, format, args);\n+  __builtin_va_end (args);\n+  return r < 0 ? NULL : resultp;\n+}\n+\n+int run_test() {\n+    char *buf = NULL;\n+    char *bar = NULL;\n+    char *baz = NULL;\n+    int i = 1232;\n+\n+    printf(\"static function check\\n\");\n+\n+    buf = zasprintf(\"i = %d\", i);\n+    if (buf) {\n+        printf(\"buf = %s\\nbuf = %p\\n\", buf, buf);\n+    }\n+\n+    bar = zasprintf(\"i = %d - %d\", i, i - 13);\n+    if (bar) {\n+        printf(\"bar = %s\\nbar = %p\\n\", bar, bar);\n+        printf(\"buf = %s\\nbuf = %p\\n\", buf, buf);\n+    }\n+\n+    baz = zasprintf(\"No i's here\");\n+    if (baz) {\n+        printf(\"baz = %s\\nbaz = %p\\n\", baz, baz);\n+        printf(\"bar = %s\\nbar = %p\\n\", bar, bar);\n+        printf(\"buf = %s\\nbuf = %p\\n\", buf, buf);\n+    }\n+\n+    free(buf);\n+    free(bar);\n+    free(baz);\n+\n+    return 1;\n+}\n+\n+int main(int argc, char **argv) {\n+    return run_test();\n+}"}]}