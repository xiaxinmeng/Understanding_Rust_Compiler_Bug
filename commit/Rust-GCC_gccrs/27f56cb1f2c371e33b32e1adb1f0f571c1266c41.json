{"sha": "27f56cb1f2c371e33b32e1adb1f0f571c1266c41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmNTZjYjFmMmMzNzFlMzNiMzJlMWFkYjFmMGY1NzFjMTI2NmM0MQ==", "commit": {"author": {"name": "Gerald Pfeifer", "email": "gerald@pfeifer.com", "date": "2008-02-02T13:48:16Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2008-02-02T13:48:16Z"}, "message": "* doc/extend.texi (X86 Built-in Functions): Fix grammar.\n\nFrom-SVN: r132069", "tree": {"sha": "54a5cd182203544d69272702559d0175e9d6696f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a5cd182203544d69272702559d0175e9d6696f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27f56cb1f2c371e33b32e1adb1f0f571c1266c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f56cb1f2c371e33b32e1adb1f0f571c1266c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f56cb1f2c371e33b32e1adb1f0f571c1266c41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f56cb1f2c371e33b32e1adb1f0f571c1266c41/comments", "author": {"login": "GeraldPfeifer", "id": 4573532, "node_id": "MDQ6VXNlcjQ1NzM1MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4573532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeraldPfeifer", "html_url": "https://github.com/GeraldPfeifer", "followers_url": "https://api.github.com/users/GeraldPfeifer/followers", "following_url": "https://api.github.com/users/GeraldPfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/GeraldPfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeraldPfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeraldPfeifer/subscriptions", "organizations_url": "https://api.github.com/users/GeraldPfeifer/orgs", "repos_url": "https://api.github.com/users/GeraldPfeifer/repos", "events_url": "https://api.github.com/users/GeraldPfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/GeraldPfeifer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c93d55727c0eaf11f41b4d6bb7e1a1f8472f8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c93d55727c0eaf11f41b4d6bb7e1a1f8472f8d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c93d55727c0eaf11f41b4d6bb7e1a1f8472f8d3"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "40afac69f3168e4d1e6fe2d6d7c571502a354e21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f56cb1f2c371e33b32e1adb1f0f571c1266c41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f56cb1f2c371e33b32e1adb1f0f571c1266c41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27f56cb1f2c371e33b32e1adb1f0f571c1266c41", "patch": "@@ -1,3 +1,7 @@\n+2008-02-02  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/extend.texi (X86 Built-in Functions): Fix grammar.\n+\n 2008-02-01  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR rtl-optimization/34773"}, {"sha": "7711e1f740625e7e42caae251a7ea809642a738d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f56cb1f2c371e33b32e1adb1f0f571c1266c41/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f56cb1f2c371e33b32e1adb1f0f571c1266c41/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=27f56cb1f2c371e33b32e1adb1f0f571c1266c41", "patch": "@@ -7406,12 +7406,12 @@ integers, these use @code{V4SI}.  Finally, some instructions operate on an\n entire vector register, interpreting it as a 128-bit integer, these use mode\n @code{TI}.\n \n-In the 64-bit mode, x86-64 family of processors uses additional built-in\n+In 64-bit mode, the x86-64 family of processors uses additional built-in\n functions for efficient use of @code{TF} (@code{__float128}) 128-bit\n floating point and @code{TC} 128-bit complex floating point values.\n \n-The following floating point built-in functions are made available in the\n-64-bit mode.  All of them implement the function that is part of the name.\n+The following floating point built-in functions are available in 64-bit\n+mode.  All of them implement the function that is part of the name.\n \n @smallexample\n __float128 __builtin_fabsq (__float128)"}]}