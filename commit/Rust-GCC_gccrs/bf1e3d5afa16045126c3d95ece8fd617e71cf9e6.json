{"sha": "bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxZTNkNWFmYTE2MDQ1MTI2YzNkOTVlY2U4ZmQ2MTdlNzFjZjllNg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T18:48:05Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T18:48:05Z"}, "message": "[ARM][GCC][5/5x]: MVE ACLE load intrinsics which load a byte, halfword, or word from memory.\n\nThis patch supports the following MVE ACLE load intrinsics which load a byte, halfword,\nor word from memory.\nvld1q_s8, vld1q_s32, vld1q_s16, vld1q_u8, vld1q_u32, vld1q_u16, vldrhq_gather_offset_s32,\nvldrhq_gather_offset_s16, vldrhq_gather_offset_u32, vldrhq_gather_offset_u16,\nvldrhq_gather_offset_z_s32, vldrhq_gather_offset_z_s16, vldrhq_gather_offset_z_u32,\nvldrhq_gather_offset_z_u16, vldrhq_gather_shifted_offset_s32,vldrwq_f32, vldrwq_z_f32,\nvldrhq_gather_shifted_offset_s16, vldrhq_gather_shifted_offset_u32,\nvldrhq_gather_shifted_offset_u16, vldrhq_gather_shifted_offset_z_s32,\nvldrhq_gather_shifted_offset_z_s16, vldrhq_gather_shifted_offset_z_u32,\nvldrhq_gather_shifted_offset_z_u16, vldrhq_s32, vldrhq_s16, vldrhq_u32, vldrhq_u16,\nvldrhq_z_s32, vldrhq_z_s16, vldrhq_z_u32, vldrhq_z_u16, vldrwq_s32, vldrwq_u32,\nvldrwq_z_s32, vldrwq_z_u32, vld1q_f32, vld1q_f16, vldrhq_f16, vldrhq_z_f16.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1]  https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vld1q_s8): Define macro.\n\t(vld1q_s32): Likewise.\n\t(vld1q_s16): Likewise.\n\t(vld1q_u8): Likewise.\n\t(vld1q_u32): Likewise.\n\t(vld1q_u16): Likewise.\n\t(vldrhq_gather_offset_s32): Likewise.\n\t(vldrhq_gather_offset_s16): Likewise.\n\t(vldrhq_gather_offset_u32): Likewise.\n\t(vldrhq_gather_offset_u16): Likewise.\n\t(vldrhq_gather_offset_z_s32): Likewise.\n\t(vldrhq_gather_offset_z_s16): Likewise.\n\t(vldrhq_gather_offset_z_u32): Likewise.\n\t(vldrhq_gather_offset_z_u16): Likewise.\n\t(vldrhq_gather_shifted_offset_s32): Likewise.\n\t(vldrhq_gather_shifted_offset_s16): Likewise.\n\t(vldrhq_gather_shifted_offset_u32): Likewise.\n\t(vldrhq_gather_shifted_offset_u16): Likewise.\n\t(vldrhq_gather_shifted_offset_z_s32): Likewise.\n\t(vldrhq_gather_shifted_offset_z_s16): Likewise.\n\t(vldrhq_gather_shifted_offset_z_u32): Likewise.\n\t(vldrhq_gather_shifted_offset_z_u16): Likewise.\n\t(vldrhq_s32): Likewise.\n\t(vldrhq_s16): Likewise.\n\t(vldrhq_u32): Likewise.\n\t(vldrhq_u16): Likewise.\n\t(vldrhq_z_s32): Likewise.\n\t(vldrhq_z_s16): Likewise.\n\t(vldrhq_z_u32): Likewise.\n\t(vldrhq_z_u16): Likewise.\n\t(vldrwq_s32): Likewise.\n\t(vldrwq_u32): Likewise.\n\t(vldrwq_z_s32): Likewise.\n\t(vldrwq_z_u32): Likewise.\n\t(vld1q_f32): Likewise.\n\t(vld1q_f16): Likewise.\n\t(vldrhq_f16): Likewise.\n\t(vldrhq_z_f16): Likewise.\n\t(vldrwq_f32): Likewise.\n\t(vldrwq_z_f32): Likewise.\n\t(__arm_vld1q_s8): Define intrinsic.\n\t(__arm_vld1q_s32): Likewise.\n\t(__arm_vld1q_s16): Likewise.\n\t(__arm_vld1q_u8): Likewise.\n\t(__arm_vld1q_u32): Likewise.\n\t(__arm_vld1q_u16): Likewise.\n\t(__arm_vldrhq_gather_offset_s32): Likewise.\n\t(__arm_vldrhq_gather_offset_s16): Likewise.\n\t(__arm_vldrhq_gather_offset_u32): Likewise.\n\t(__arm_vldrhq_gather_offset_u16): Likewise.\n\t(__arm_vldrhq_gather_offset_z_s32): Likewise.\n\t(__arm_vldrhq_gather_offset_z_s16): Likewise.\n\t(__arm_vldrhq_gather_offset_z_u32): Likewise.\n\t(__arm_vldrhq_gather_offset_z_u16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_s32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_s16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_u32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_u16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_s32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_s16): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_u32): Likewise.\n\t(__arm_vldrhq_gather_shifted_offset_z_u16): Likewise.\n\t(__arm_vldrhq_s32): Likewise.\n\t(__arm_vldrhq_s16): Likewise.\n\t(__arm_vldrhq_u32): Likewise.\n\t(__arm_vldrhq_u16): Likewise.\n\t(__arm_vldrhq_z_s32): Likewise.\n\t(__arm_vldrhq_z_s16): Likewise.\n\t(__arm_vldrhq_z_u32): Likewise.\n\t(__arm_vldrhq_z_u16): Likewise.\n\t(__arm_vldrwq_s32): Likewise.\n\t(__arm_vldrwq_u32): Likewise.\n\t(__arm_vldrwq_z_s32): Likewise.\n\t(__arm_vldrwq_z_u32): Likewise.\n\t(__arm_vld1q_f32): Likewise.\n\t(__arm_vld1q_f16): Likewise.\n\t(__arm_vldrwq_f32): Likewise.\n\t(__arm_vldrwq_z_f32): Likewise.\n\t(__arm_vldrhq_z_f16): Likewise.\n\t(__arm_vldrhq_f16): Likewise.\n\t(vld1q): Define polymorphic variant.\n\t(vldrhq_gather_offset): Likewise.\n\t(vldrhq_gather_offset_z): Likewise.\n\t(vldrhq_gather_shifted_offset): Likewise.\n\t(vldrhq_gather_shifted_offset_z): Likewise.\n\t* config/arm/arm_mve_builtins.def (LDRU): Use builtin qualifier.\n\t(LDRS): Likewise.\n\t(LDRU_Z): Likewise.\n\t(LDRS_Z): Likewise.\n\t(LDRGU_Z): Likewise.\n\t(LDRGU): Likewise.\n\t(LDRGS_Z): Likewise.\n\t(LDRGS): Likewise.\n\t* config/arm/mve.md (MVE_H_ELEM): Define mode iterator.\n\t(V_sz_elem1): Likewise.\n\t(VLD1Q): Define iterator.\n\t(VLDRHGOQ): Likewise.\n\t(VLDRHGSOQ): Likewise.\n\t(VLDRHQ): Likewise.\n\t(VLDRWQ): Likewise.\n\t(mve_vldrhq_fv8hf): Define RTL pattern.\n\t(mve_vldrhq_gather_offset_<supf><mode>): Likewise.\n\t(mve_vldrhq_gather_offset_z_<supf><mode>): Likewise.\n\t(mve_vldrhq_gather_shifted_offset_<supf><mode>): Likewise.\n\t(mve_vldrhq_gather_shifted_offset_z_<supf><mode>): Likewise.\n\t(mve_vldrhq_<supf><mode>): Likewise.\n\t(mve_vldrhq_z_fv8hf): Likewise.\n\t(mve_vldrhq_z_<supf><mode>): Likewise.\n\t(mve_vldrwq_fv4sf): Likewise.\n\t(mve_vldrwq_<supf>v4si): Likewise.\n\t(mve_vldrwq_z_fv4sf): Likewise.\n\t(mve_vldrwq_z_<supf>v4si): Likewise.\n\t(mve_vld1q_f<mode>): Define RTL expand pattern.\n\t(mve_vld1q_<supf><mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vld1q_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vld1q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld1q_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vldrwq_z_u32.c: Likewise.", "tree": {"sha": "6c40e22c4b60360451904f9302ae44c6bc57fad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c40e22c4b60360451904f9302ae44c6bc57fad2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429d607bc468828ea1e40852bbf8a1e9bbc34e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429d607bc468828ea1e40852bbf8a1e9bbc34e7a"}], "stats": {"total": 1615, "additions": 1610, "deletions": 5}, "files": [{"sha": "657683d21cde467b23613275e7f38b0b1b4cab4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -1,3 +1,122 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vld1q_s8): Define macro.\n+\t(vld1q_s32): Likewise.\n+\t(vld1q_s16): Likewise.\n+\t(vld1q_u8): Likewise.\n+\t(vld1q_u32): Likewise.\n+\t(vld1q_u16): Likewise.\n+\t(vldrhq_gather_offset_s32): Likewise.\n+\t(vldrhq_gather_offset_s16): Likewise.\n+\t(vldrhq_gather_offset_u32): Likewise.\n+\t(vldrhq_gather_offset_u16): Likewise.\n+\t(vldrhq_gather_offset_z_s32): Likewise.\n+\t(vldrhq_gather_offset_z_s16): Likewise.\n+\t(vldrhq_gather_offset_z_u32): Likewise.\n+\t(vldrhq_gather_offset_z_u16): Likewise.\n+\t(vldrhq_gather_shifted_offset_s32): Likewise.\n+\t(vldrhq_gather_shifted_offset_s16): Likewise.\n+\t(vldrhq_gather_shifted_offset_u32): Likewise.\n+\t(vldrhq_gather_shifted_offset_u16): Likewise.\n+\t(vldrhq_gather_shifted_offset_z_s32): Likewise.\n+\t(vldrhq_gather_shifted_offset_z_s16): Likewise.\n+\t(vldrhq_gather_shifted_offset_z_u32): Likewise.\n+\t(vldrhq_gather_shifted_offset_z_u16): Likewise.\n+\t(vldrhq_s32): Likewise.\n+\t(vldrhq_s16): Likewise.\n+\t(vldrhq_u32): Likewise.\n+\t(vldrhq_u16): Likewise.\n+\t(vldrhq_z_s32): Likewise.\n+\t(vldrhq_z_s16): Likewise.\n+\t(vldrhq_z_u32): Likewise.\n+\t(vldrhq_z_u16): Likewise.\n+\t(vldrwq_s32): Likewise.\n+\t(vldrwq_u32): Likewise.\n+\t(vldrwq_z_s32): Likewise.\n+\t(vldrwq_z_u32): Likewise.\n+\t(vld1q_f32): Likewise.\n+\t(vld1q_f16): Likewise.\n+\t(vldrhq_f16): Likewise.\n+\t(vldrhq_z_f16): Likewise.\n+\t(vldrwq_f32): Likewise.\n+\t(vldrwq_z_f32): Likewise.\n+\t(__arm_vld1q_s8): Define intrinsic.\n+\t(__arm_vld1q_s32): Likewise.\n+\t(__arm_vld1q_s16): Likewise.\n+\t(__arm_vld1q_u8): Likewise.\n+\t(__arm_vld1q_u32): Likewise.\n+\t(__arm_vld1q_u16): Likewise.\n+\t(__arm_vldrhq_gather_offset_s32): Likewise.\n+\t(__arm_vldrhq_gather_offset_s16): Likewise.\n+\t(__arm_vldrhq_gather_offset_u32): Likewise.\n+\t(__arm_vldrhq_gather_offset_u16): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_s32): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_s16): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_u32): Likewise.\n+\t(__arm_vldrhq_gather_offset_z_u16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_s32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_s16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_u32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_u16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_s32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_s16): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_u32): Likewise.\n+\t(__arm_vldrhq_gather_shifted_offset_z_u16): Likewise.\n+\t(__arm_vldrhq_s32): Likewise.\n+\t(__arm_vldrhq_s16): Likewise.\n+\t(__arm_vldrhq_u32): Likewise.\n+\t(__arm_vldrhq_u16): Likewise.\n+\t(__arm_vldrhq_z_s32): Likewise.\n+\t(__arm_vldrhq_z_s16): Likewise.\n+\t(__arm_vldrhq_z_u32): Likewise.\n+\t(__arm_vldrhq_z_u16): Likewise.\n+\t(__arm_vldrwq_s32): Likewise.\n+\t(__arm_vldrwq_u32): Likewise.\n+\t(__arm_vldrwq_z_s32): Likewise.\n+\t(__arm_vldrwq_z_u32): Likewise.\n+\t(__arm_vld1q_f32): Likewise.\n+\t(__arm_vld1q_f16): Likewise.\n+\t(__arm_vldrwq_f32): Likewise.\n+\t(__arm_vldrwq_z_f32): Likewise.\n+\t(__arm_vldrhq_z_f16): Likewise.\n+\t(__arm_vldrhq_f16): Likewise.\n+\t(vld1q): Define polymorphic variant.\n+\t(vldrhq_gather_offset): Likewise.\n+\t(vldrhq_gather_offset_z): Likewise.\n+\t(vldrhq_gather_shifted_offset): Likewise.\n+\t(vldrhq_gather_shifted_offset_z): Likewise.\n+\t* config/arm/arm_mve_builtins.def (LDRU): Use builtin qualifier.\n+\t(LDRS): Likewise.\n+\t(LDRU_Z): Likewise.\n+\t(LDRS_Z): Likewise.\n+\t(LDRGU_Z): Likewise.\n+\t(LDRGU): Likewise.\n+\t(LDRGS_Z): Likewise.\n+\t(LDRGS): Likewise.\n+\t* config/arm/mve.md (MVE_H_ELEM): Define mode iterator.\n+\t(V_sz_elem1): Likewise.\n+\t(VLD1Q): Define iterator.\n+\t(VLDRHGOQ): Likewise.\n+\t(VLDRHGSOQ): Likewise.\n+\t(VLDRHQ): Likewise.\n+\t(VLDRWQ): Likewise.\n+\t(mve_vldrhq_fv8hf): Define RTL pattern.\n+\t(mve_vldrhq_gather_offset_<supf><mode>): Likewise.\n+\t(mve_vldrhq_gather_offset_z_<supf><mode>): Likewise.\n+\t(mve_vldrhq_gather_shifted_offset_<supf><mode>): Likewise.\n+\t(mve_vldrhq_gather_shifted_offset_z_<supf><mode>): Likewise.\n+\t(mve_vldrhq_<supf><mode>): Likewise.\n+\t(mve_vldrhq_z_fv8hf): Likewise.\n+\t(mve_vldrhq_z_<supf><mode>): Likewise.\n+\t(mve_vldrwq_fv4sf): Likewise.\n+\t(mve_vldrwq_<supf>v4si): Likewise.\n+\t(mve_vldrwq_z_fv4sf): Likewise.\n+\t(mve_vldrwq_z_<supf>v4si): Likewise.\n+\t(mve_vld1q_f<mode>): Define RTL expand pattern.\n+\t(mve_vld1q_<supf><mode>): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "9991e25c8d642c8109ab9ce9f48a818508d7801c", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 378, "deletions": 0, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -1758,6 +1758,46 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vldrbq_z_u32(__base, __p) __arm_vldrbq_z_u32(__base, __p)\n #define vldrwq_gather_base_z_u32(__addr,  __offset, __p) __arm_vldrwq_gather_base_z_u32(__addr,  __offset, __p)\n #define vldrwq_gather_base_z_s32(__addr,  __offset, __p) __arm_vldrwq_gather_base_z_s32(__addr,  __offset, __p)\n+#define vld1q_s8(__base) __arm_vld1q_s8(__base)\n+#define vld1q_s32(__base) __arm_vld1q_s32(__base)\n+#define vld1q_s16(__base) __arm_vld1q_s16(__base)\n+#define vld1q_u8(__base) __arm_vld1q_u8(__base)\n+#define vld1q_u32(__base) __arm_vld1q_u32(__base)\n+#define vld1q_u16(__base) __arm_vld1q_u16(__base)\n+#define vldrhq_gather_offset_s32(__base, __offset) __arm_vldrhq_gather_offset_s32(__base, __offset)\n+#define vldrhq_gather_offset_s16(__base, __offset) __arm_vldrhq_gather_offset_s16(__base, __offset)\n+#define vldrhq_gather_offset_u32(__base, __offset) __arm_vldrhq_gather_offset_u32(__base, __offset)\n+#define vldrhq_gather_offset_u16(__base, __offset) __arm_vldrhq_gather_offset_u16(__base, __offset)\n+#define vldrhq_gather_offset_z_s32(__base, __offset, __p) __arm_vldrhq_gather_offset_z_s32(__base, __offset, __p)\n+#define vldrhq_gather_offset_z_s16(__base, __offset, __p) __arm_vldrhq_gather_offset_z_s16(__base, __offset, __p)\n+#define vldrhq_gather_offset_z_u32(__base, __offset, __p) __arm_vldrhq_gather_offset_z_u32(__base, __offset, __p)\n+#define vldrhq_gather_offset_z_u16(__base, __offset, __p) __arm_vldrhq_gather_offset_z_u16(__base, __offset, __p)\n+#define vldrhq_gather_shifted_offset_s32(__base, __offset) __arm_vldrhq_gather_shifted_offset_s32(__base, __offset)\n+#define vldrhq_gather_shifted_offset_s16(__base, __offset) __arm_vldrhq_gather_shifted_offset_s16(__base, __offset)\n+#define vldrhq_gather_shifted_offset_u32(__base, __offset) __arm_vldrhq_gather_shifted_offset_u32(__base, __offset)\n+#define vldrhq_gather_shifted_offset_u16(__base, __offset) __arm_vldrhq_gather_shifted_offset_u16(__base, __offset)\n+#define vldrhq_gather_shifted_offset_z_s32(__base, __offset, __p) __arm_vldrhq_gather_shifted_offset_z_s32(__base, __offset, __p)\n+#define vldrhq_gather_shifted_offset_z_s16(__base, __offset, __p) __arm_vldrhq_gather_shifted_offset_z_s16(__base, __offset, __p)\n+#define vldrhq_gather_shifted_offset_z_u32(__base, __offset, __p) __arm_vldrhq_gather_shifted_offset_z_u32(__base, __offset, __p)\n+#define vldrhq_gather_shifted_offset_z_u16(__base, __offset, __p) __arm_vldrhq_gather_shifted_offset_z_u16(__base, __offset, __p)\n+#define vldrhq_s32(__base) __arm_vldrhq_s32(__base)\n+#define vldrhq_s16(__base) __arm_vldrhq_s16(__base)\n+#define vldrhq_u32(__base) __arm_vldrhq_u32(__base)\n+#define vldrhq_u16(__base) __arm_vldrhq_u16(__base)\n+#define vldrhq_z_s32(__base, __p) __arm_vldrhq_z_s32(__base, __p)\n+#define vldrhq_z_s16(__base, __p) __arm_vldrhq_z_s16(__base, __p)\n+#define vldrhq_z_u32(__base, __p) __arm_vldrhq_z_u32(__base, __p)\n+#define vldrhq_z_u16(__base, __p) __arm_vldrhq_z_u16(__base, __p)\n+#define vldrwq_s32(__base) __arm_vldrwq_s32(__base)\n+#define vldrwq_u32(__base) __arm_vldrwq_u32(__base)\n+#define vldrwq_z_s32(__base, __p) __arm_vldrwq_z_s32(__base, __p)\n+#define vldrwq_z_u32(__base, __p) __arm_vldrwq_z_u32(__base, __p)\n+#define vld1q_f32(__base) __arm_vld1q_f32(__base)\n+#define vld1q_f16(__base) __arm_vld1q_f16(__base)\n+#define vldrhq_f16(__base) __arm_vldrhq_f16(__base)\n+#define vldrhq_z_f16(__base, __p) __arm_vldrhq_z_f16(__base, __p)\n+#define vldrwq_f32(__base) __arm_vldrwq_f32(__base)\n+#define vldrwq_z_f32(__base, __p) __arm_vldrwq_z_f32(__base, __p)\n #endif\n \n __extension__ extern __inline void\n@@ -11443,6 +11483,245 @@ __arm_vldrwq_gather_base_z_u32 (uint32x4_t __addr, const int __offset, mve_pred1\n   return __builtin_mve_vldrwq_gather_base_z_uv4si (__addr, __offset, __p);\n }\n \n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_s8 (int8_t const * __base)\n+{\n+  return __builtin_mve_vld1q_sv16qi ((__builtin_neon_qi *) __base);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_s32 (int32_t const * __base)\n+{\n+  return __builtin_mve_vld1q_sv4si ((__builtin_neon_si *) __base);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_s16 (int16_t const * __base)\n+{\n+  return __builtin_mve_vld1q_sv8hi ((__builtin_neon_hi *) __base);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_u8 (uint8_t const * __base)\n+{\n+  return __builtin_mve_vld1q_uv16qi ((__builtin_neon_qi *) __base);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_u32 (uint32_t const * __base)\n+{\n+  return __builtin_mve_vld1q_uv4si ((__builtin_neon_si *) __base);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_u16 (uint16_t const * __base)\n+{\n+  return __builtin_mve_vld1q_uv8hi ((__builtin_neon_hi *) __base);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_offset_s32 (int16_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrhq_gather_offset_sv4si ((__builtin_neon_hi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_offset_s16 (int16_t const * __base, uint16x8_t __offset)\n+{\n+  return __builtin_mve_vldrhq_gather_offset_sv8hi ((__builtin_neon_hi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_offset_u32 (uint16_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrhq_gather_offset_uv4si ((__builtin_neon_hi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_offset_u16 (uint16_t const * __base, uint16x8_t __offset)\n+{\n+  return __builtin_mve_vldrhq_gather_offset_uv8hi ((__builtin_neon_hi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_offset_z_s32 (int16_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_gather_offset_z_sv4si ((__builtin_neon_hi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_offset_z_s16 (int16_t const * __base, uint16x8_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_gather_offset_z_sv8hi ((__builtin_neon_hi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_offset_z_u32 (uint16_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_gather_offset_z_uv4si ((__builtin_neon_hi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_offset_z_u16 (uint16_t const * __base, uint16x8_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_gather_offset_z_uv8hi ((__builtin_neon_hi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_shifted_offset_s32 (int16_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrhq_gather_shifted_offset_sv4si ((__builtin_neon_hi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_shifted_offset_s16 (int16_t const * __base, uint16x8_t __offset)\n+{\n+  return __builtin_mve_vldrhq_gather_shifted_offset_sv8hi ((__builtin_neon_hi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_shifted_offset_u32 (uint16_t const * __base, uint32x4_t __offset)\n+{\n+  return __builtin_mve_vldrhq_gather_shifted_offset_uv4si ((__builtin_neon_hi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_shifted_offset_u16 (uint16_t const * __base, uint16x8_t __offset)\n+{\n+  return __builtin_mve_vldrhq_gather_shifted_offset_uv8hi ((__builtin_neon_hi *) __base, __offset);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_shifted_offset_z_s32 (int16_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_gather_shifted_offset_z_sv4si ((__builtin_neon_hi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_shifted_offset_z_s16 (int16_t const * __base, uint16x8_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_gather_shifted_offset_z_sv8hi ((__builtin_neon_hi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_shifted_offset_z_u32 (uint16_t const * __base, uint32x4_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_gather_shifted_offset_z_uv4si ((__builtin_neon_hi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_gather_shifted_offset_z_u16 (uint16_t const * __base, uint16x8_t __offset, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_gather_shifted_offset_z_uv8hi ((__builtin_neon_hi *) __base, __offset, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_s32 (int16_t const * __base)\n+{\n+  return __builtin_mve_vldrhq_sv4si ((__builtin_neon_hi *) __base);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_s16 (int16_t const * __base)\n+{\n+  return __builtin_mve_vldrhq_sv8hi ((__builtin_neon_hi *) __base);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_u32 (uint16_t const * __base)\n+{\n+  return __builtin_mve_vldrhq_uv4si ((__builtin_neon_hi *) __base);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_u16 (uint16_t const * __base)\n+{\n+  return __builtin_mve_vldrhq_uv8hi ((__builtin_neon_hi *) __base);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_z_s32 (int16_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_z_sv4si ((__builtin_neon_hi *) __base, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_z_s16 (int16_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_z_sv8hi ((__builtin_neon_hi *) __base, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_z_u32 (uint16_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_z_uv4si ((__builtin_neon_hi *) __base, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_z_u16 (uint16_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_z_uv8hi ((__builtin_neon_hi *) __base, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_s32 (int32_t const * __base)\n+{\n+  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_u32 (uint32_t const * __base)\n+{\n+  return __builtin_mve_vldrwq_uv4si ((__builtin_neon_si *) __base);\n+}\n+\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_z_s32 (int32_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_z_sv4si ((__builtin_neon_si *) __base, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_z_u32 (uint32_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_z_uv4si ((__builtin_neon_si *) __base, __p);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -13585,6 +13864,47 @@ __arm_vsubq_m_n_f16 (float16x8_t __inactive, float16x8_t __a, float16_t __b, mve\n   return __builtin_mve_vsubq_m_n_fv8hf (__inactive, __a, __b, __p);\n }\n \n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_f32 (float32_t const * __base)\n+{\n+  return __builtin_mve_vld1q_fv4sf((__builtin_neon_si *) __base);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vld1q_f16 (float16_t const * __base)\n+{\n+  return __builtin_mve_vld1q_fv8hf((__builtin_neon_hi *) __base);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_f32 (float32_t const * __base)\n+{\n+  return __builtin_mve_vldrwq_fv4sf((__builtin_neon_si *) __base);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrwq_z_f32 (float32_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrwq_z_fv4sf((__builtin_neon_si *) __base, __p);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_z_f16 (float16_t const * __base, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vldrhq_z_fv8hf((__builtin_neon_hi *) __base, __p);\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vldrhq_f16 (float16_t const * __base)\n+{\n+  return __builtin_mve_vldrhq_fv8hf((__builtin_neon_hi *) __base);\n+}\n #endif\n \n enum {\n@@ -16052,6 +16372,18 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vorrq_m_f16 (__ARM_mve_coerce(__p0, float16x8_t), __ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16x8_t), p3), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vorrq_m_f32 (__ARM_mve_coerce(__p0, float32x4_t), __ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32x4_t), p3));})\n \n+#define vld1q(p0) __arm_vld1q(p0)\n+#define __arm_vld1q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr]: __arm_vld1q_s8 (__ARM_mve_coerce(__p0, int8_t const *)), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr]: __arm_vld1q_s16 (__ARM_mve_coerce(__p0, int16_t const *)), \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vld1q_s32 (__ARM_mve_coerce(__p0, int32_t const *)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr]: __arm_vld1q_u8 (__ARM_mve_coerce(__p0, uint8_t const *)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr]: __arm_vld1q_u16 (__ARM_mve_coerce(__p0, uint16_t const *)), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vld1q_u32 (__ARM_mve_coerce(__p0, uint32_t const *)), \\\n+  int (*)[__ARM_mve_type_float16_t_const_ptr]: __arm_vld1q_f16 (__ARM_mve_coerce(__p0, float16_t const *)), \\\n+  int (*)[__ARM_mve_type_float32_t_const_ptr]: __arm_vld1q_f32 (__ARM_mve_coerce(__p0, float32_t const *)));})\n+\n #else /* MVE Integer.  */\n \n #define vst4q(p0,p1) __arm_vst4q(p0,p1)\n@@ -18148,6 +18480,52 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_base_p_s32 (p0, p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n   int (*)[__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_base_p_u32 (p0, p1, __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n \n+#define vld1q(p0) __arm_vld1q(p0)\n+#define __arm_vld1q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_const_ptr]: __arm_vld1q_s8 (__ARM_mve_coerce(__p0, int8_t const *)), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr]: __arm_vld1q_s16 (__ARM_mve_coerce(__p0, int16_t const *)), \\\n+  int (*)[__ARM_mve_type_int32_t_const_ptr]: __arm_vld1q_s32 (__ARM_mve_coerce(__p0, int32_t const *)), \\\n+  int (*)[__ARM_mve_type_uint8_t_const_ptr]: __arm_vld1q_u8 (__ARM_mve_coerce(__p0, uint8_t const *)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr]: __arm_vld1q_u16 (__ARM_mve_coerce(__p0, uint16_t const *)), \\\n+  int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vld1q_u32 (__ARM_mve_coerce(__p0, uint32_t const *)));})\n+\n+#define vldrhq_gather_offset(p0,p1) __arm_vldrhq_gather_offset(p0,p1)\n+#define __arm_vldrhq_gather_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_s16 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_s32 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_u16 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_u32 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+\n+#define vldrhq_gather_offset_z(p0,p1,p2) __arm_vldrhq_gather_offset_z(p0,p1,p2)\n+#define __arm_vldrhq_gather_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_s16 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_s32 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_offset_z_u16 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_offset_z_u32 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n+#define vldrhq_gather_shifted_offset(p0,p1) __arm_vldrhq_gather_shifted_offset(p0,p1)\n+#define __arm_vldrhq_gather_shifted_offset(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_s16 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_s32 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_u16 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+\n+#define vldrhq_gather_shifted_offset_z(p0,p1,p2) __arm_vldrhq_gather_shifted_offset_z(p0,p1,p2)\n+#define __arm_vldrhq_gather_shifted_offset_z(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_s16 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_s32 (__ARM_mve_coerce(__p0, int16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint16x8_t]: __arm_vldrhq_gather_shifted_offset_z_u16 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t_const_ptr][__ARM_mve_type_uint32x4_t]: __arm_vldrhq_gather_shifted_offset_z_u32 (__ARM_mve_coerce(__p0, uint16_t const *), __ARM_mve_coerce(__p1, uint32x4_t), p2));})\n+\n #endif /* MVE Integer.  */\n \n #define vldrbq_gather_offset_z(p0,p1,p2) __arm_vldrbq_gather_offset_z(p0,p1,p2)"}, {"sha": "bafc953a5e5108caa9595ea9189ed1182da2c692", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -709,3 +709,26 @@ VAR3 (LDRGS_Z, vldrbq_gather_offset_z_s, v16qi, v8hi, v4si)\n VAR3 (LDRGU_Z, vldrbq_gather_offset_z_u, v16qi, v8hi, v4si)\n VAR3 (LDRS_Z, vldrbq_z_s, v16qi, v8hi, v4si)\n VAR3 (LDRU_Z, vldrbq_z_u, v16qi, v8hi, v4si)\n+VAR3 (LDRU, vld1q_u, v16qi, v8hi, v4si)\n+VAR3 (LDRS, vld1q_s, v16qi, v8hi, v4si)\n+VAR2 (LDRU_Z, vldrhq_z_u, v8hi, v4si)\n+VAR2 (LDRU, vldrhq_u, v8hi, v4si)\n+VAR2 (LDRS_Z, vldrhq_z_s, v8hi, v4si)\n+VAR2 (LDRS, vldrhq_s, v8hi, v4si)\n+VAR2 (LDRS, vld1q_f, v8hf, v4sf)\n+VAR2 (LDRGU_Z, vldrhq_gather_shifted_offset_z_u, v8hi, v4si)\n+VAR2 (LDRGU_Z, vldrhq_gather_offset_z_u, v8hi, v4si)\n+VAR2 (LDRGU, vldrhq_gather_shifted_offset_u, v8hi, v4si)\n+VAR2 (LDRGU, vldrhq_gather_offset_u, v8hi, v4si)\n+VAR2 (LDRGS_Z, vldrhq_gather_shifted_offset_z_s, v8hi, v4si)\n+VAR2 (LDRGS_Z, vldrhq_gather_offset_z_s, v8hi, v4si)\n+VAR2 (LDRGS, vldrhq_gather_shifted_offset_s, v8hi, v4si)\n+VAR2 (LDRGS, vldrhq_gather_offset_s, v8hi, v4si)\n+VAR1 (LDRS, vldrhq_f, v8hf)\n+VAR1 (LDRS_Z, vldrhq_z_f, v8hf)\n+VAR1 (LDRS, vldrwq_f, v4sf)\n+VAR1 (LDRS, vldrwq_s, v4si)\n+VAR1 (LDRU, vldrwq_u, v4si)\n+VAR1 (LDRS_Z, vldrwq_z_f, v4sf)\n+VAR1 (LDRS_Z, vldrwq_z_s, v4si)\n+VAR1 (LDRU_Z, vldrwq_z_u, v4si)"}, {"sha": "89ff2e269e5ff0c42954cdd1f773b5456cb6251a", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 293, "deletions": 5, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -26,6 +26,7 @@\n (define_mode_iterator MVE_3 [V16QI V8HI])\n (define_mode_iterator MVE_2 [V16QI V8HI V4SI])\n (define_mode_iterator MVE_5 [V8HI V4SI])\n+(define_mode_iterator MVE_6 [V8HI V4SI])\n \n (define_c_enum \"unspec\" [VST4Q VRNDXQ_F VRNDQ_F VRNDPQ_F VRNDNQ_F VRNDMQ_F\n \t\t\t VRNDAQ_F VREV64Q_F VNEGQ_F VDUPQ_N_F VABSQ_F VREV32Q_F\n@@ -193,10 +194,13 @@\n \t\t\t VFMAQ_M_N_F VFMASQ_M_N_F VFMSQ_M_F VMAXNMQ_M_F\n \t\t\t VMINNMQ_M_F VSUBQ_M_F VSTRWQSB_S VSTRWQSB_U\n \t\t\t VSTRBQSO_S VSTRBQSO_U VSTRBQ_S VSTRBQ_U VLDRBQGO_S\n-\t\t\t VLDRBQGO_U VLDRBQ_S VLDRBQ_U VLDRWQGB_S VLDRWQGB_U])\n+\t\t\t VLDRBQGO_U VLDRBQ_S VLDRBQ_U VLDRWQGB_S VLDRWQGB_U\n+\t\t\t VLD1Q_F VLD1Q_S VLD1Q_U VLDRHQ_F VLDRHQGO_S\n+\t\t\t VLDRHQGO_U VLDRHQGSO_S VLDRHQGSO_U VLDRHQ_S VLDRHQ_U\n+\t\t\t VLDRWQ_F VLDRWQ_S VLDRWQ_U])\n \n-(define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n-\t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n+(define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\") (V8HF \"V8HI\")\n+\t\t\t    (V4SF \"V4SI\")])\n \n (define_int_attr supf [(VCVTQ_TO_F_S \"s\") (VCVTQ_TO_F_U \"u\") (VREV16Q_S \"s\")\n \t\t       (VREV16Q_U \"u\") (VMVNQ_N_S \"s\") (VMVNQ_N_U \"u\")\n@@ -348,7 +352,11 @@\n \t\t       (VSTRWQSB_S \"s\") (VSTRWQSB_U \"u\") (VSTRBQSO_S \"s\")\n \t\t       (VSTRBQSO_U \"u\") (VSTRBQ_S \"s\") (VSTRBQ_U \"u\")\n \t\t       (VLDRBQGO_S \"s\") (VLDRBQGO_U \"u\") (VLDRBQ_S \"s\")\n-\t\t       (VLDRBQ_U \"u\") (VLDRWQGB_S \"s\") (VLDRWQGB_U \"u\")])\n+\t\t       (VLDRBQ_U \"u\") (VLDRWQGB_S \"s\") (VLDRWQGB_U \"u\")\n+\t\t       (VLD1Q_S \"s\") (VLD1Q_U \"u\") (VLDRHQGO_S \"s\")\n+\t\t       (VLDRHQGO_U \"u\") (VLDRHQGSO_S \"s\") (VLDRHQGSO_U \"u\")\n+\t\t       (VLDRHQ_S \"s\") (VLDRHQ_U \"u\") (VLDRWQ_S \"s\")\n+\t\t       (VLDRWQ_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -362,10 +370,12 @@\n \t\t\t\t   (V4SI \"mve_imm_31\")])\n (define_mode_attr MVE_constraint3 [ (V8HI \"Rb\") (V4SI \"Rd\")])\n (define_mode_attr MVE_pred3 [ (V8HI \"mve_imm_8\") (V4SI \"mve_imm_16\")])\n-\n (define_mode_attr MVE_constraint1 [ (V8HI \"Ra\") (V4SI \"Rc\")])\n (define_mode_attr MVE_pred1 [ (V8HI \"mve_imm_7\") (V4SI \"mve_imm_15\")])\n (define_mode_attr MVE_B_ELEM [ (V16QI \"V16QI\") (V8HI \"V8QI\") (V4SI \"V4QI\")])\n+(define_mode_attr MVE_H_ELEM [ (V8HI \"V8HI\") (V4SI \"V4HI\")])\n+(define_mode_attr V_sz_elem1 [(V16QI \"b\") (V8HI  \"h\") (V4SI \"w\") (V8HF \"h\")\n+\t\t\t      (V4SF \"w\")])\n \n (define_int_iterator VCVTQ_TO_F [VCVTQ_TO_F_S VCVTQ_TO_F_U])\n (define_int_iterator VMVNQ_N [VMVNQ_N_U VMVNQ_N_S])\n@@ -575,6 +585,11 @@\n (define_int_iterator VLDRBGOQ [VLDRBQGO_S VLDRBQGO_U])\n (define_int_iterator VLDRBQ [VLDRBQ_S VLDRBQ_U])\n (define_int_iterator VLDRWGBQ [VLDRWQGB_S VLDRWQGB_U])\n+(define_int_iterator VLD1Q [VLD1Q_S VLD1Q_U])\n+(define_int_iterator VLDRHGOQ [VLDRHQGO_S VLDRHQGO_U])\n+(define_int_iterator VLDRHGSOQ [VLDRHQGSO_S VLDRHQGSO_U])\n+(define_int_iterator VLDRHQ [VLDRHQ_S VLDRHQ_U])\n+(define_int_iterator VLDRWQ [VLDRWQ_S VLDRWQ_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -8208,3 +8223,276 @@\n    return \"\";\n }\n   [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrhq_f]\n+;;\n+(define_insn \"mve_vldrhq_fv8hf\"\n+  [(set (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V8HF [(match_operand:V8HI 1 \"memory_operand\" \"Us\")]\n+\t VLDRHQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1]  = operands[1];\n+   output_asm_insn (\"vldrh.f16\\t%q0, %E1\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrhq_gather_offset_s vldrhq_gather_offset_u]\n+;;\n+(define_insn \"mve_vldrhq_gather_offset_<supf><mode>\"\n+  [(set (match_operand:MVE_6 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:MVE_6 [(match_operand:<MVE_H_ELEM> 1 \"memory_operand\" \"Us\")\n+\t\t       (match_operand:MVE_6 2 \"s_register_operand\" \"w\")]\n+\tVLDRHGOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   if (!strcmp (\"<supf>\",\"s\") && <V_sz_elem> == 16)\n+     output_asm_insn (\"vldrh.u16\\t%q0, [%m1, %q2]\",ops);\n+   else\n+     output_asm_insn (\"vldrh.<supf><V_sz_elem>\\t%q0, [%m1, %q2]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrhq_gather_offset_z_s vldrhq_gather_offset_z_u]\n+;;\n+(define_insn \"mve_vldrhq_gather_offset_z_<supf><mode>\"\n+  [(set (match_operand:MVE_6 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:MVE_6 [(match_operand:<MVE_H_ELEM> 1 \"memory_operand\" \"Us\")\n+\t\t       (match_operand:MVE_6 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")\n+\t]VLDRHGOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[4];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   ops[3] = operands[3];\n+   if (!strcmp (\"<supf>\",\"s\") && <V_sz_elem> == 16)\n+     output_asm_insn (\"vpst\\n\\tvldrht.u16\\t%q0, [%m1, %q2]\",ops);\n+   else\n+     output_asm_insn (\"vpst\\n\\tvldrht.<supf><V_sz_elem>\\t%q0, [%m1, %q2]\",ops);\n+   return \"\";\n+}\n+ [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrhq_gather_shifted_offset_s vldrhq_gather_shifted_offset_u]\n+;;\n+(define_insn \"mve_vldrhq_gather_shifted_offset_<supf><mode>\"\n+  [(set (match_operand:MVE_6 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:MVE_6 [(match_operand:<MVE_H_ELEM> 1 \"memory_operand\" \"Us\")\n+\t\t       (match_operand:MVE_6 2 \"s_register_operand\" \"w\")]\n+\tVLDRHGSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[3];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+      if (!strcmp (\"<supf>\",\"s\") && <V_sz_elem> == 16)\n+     output_asm_insn (\"vldrh.u16\\t%q0, [%m1, %q2, uxtw #1]\",ops);\n+   else\n+     output_asm_insn (\"vldrh.<supf><V_sz_elem>\\t%q0, [%m1, %q2, uxtw #1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrhq_gather_shifted_offset_z_s vldrhq_gather_shited_offset_z_u]\n+;;\n+(define_insn \"mve_vldrhq_gather_shifted_offset_z_<supf><mode>\"\n+  [(set (match_operand:MVE_6 0 \"s_register_operand\" \"=&w\")\n+\t(unspec:MVE_6 [(match_operand:<MVE_H_ELEM> 1 \"memory_operand\" \"Us\")\n+\t\t       (match_operand:MVE_6 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 3 \"vpr_register_operand\" \"Up\")\n+\t]VLDRHGSOQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[4];\n+   ops[0] = operands[0];\n+   ops[1] = operands[1];\n+   ops[2] = operands[2];\n+   ops[3] = operands[3];\n+   if (!strcmp (\"<supf>\",\"s\") && <V_sz_elem> == 16)\n+     output_asm_insn (\"vpst\\n\\tvldrht.u16\\t%q0, [%m1, %q2, uxtw #1]\",ops);\n+   else\n+     output_asm_insn (\"vpst\\n\\tvldrht.<supf><V_sz_elem>\\t%q0, [%m1, %q2, uxtw #1]\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;;\n+;; [vldrhq_s, vldrhq_u]\n+;;\n+(define_insn \"mve_vldrhq_<supf><mode>\"\n+  [(set (match_operand:MVE_6 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_6 [(match_operand:<MVE_H_ELEM> 1 \"memory_operand\" \"Us\")]\n+\t VLDRHQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1]  = operands[1];\n+   output_asm_insn (\"vldrh.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrhq_z_f]\n+;;\n+(define_insn \"mve_vldrhq_z_fv8hf\"\n+  [(set (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V8HF [(match_operand:V8HI 1 \"memory_operand\" \"Us\")\n+\t(match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VLDRHQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1]  = operands[1];\n+   output_asm_insn (\"vpst\\n\\tvldrht.f16\\t%q0, %E1\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrhq_z_s vldrhq_z_u]\n+;;\n+(define_insn \"mve_vldrhq_z_<supf><mode>\"\n+  [(set (match_operand:MVE_6 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_6 [(match_operand:<MVE_H_ELEM> 1 \"memory_operand\" \"Us\")\n+\t(match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VLDRHQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1]  = operands[1];\n+   output_asm_insn (\"vpst\\n\\tvldrht.<supf><V_sz_elem>\\t%q0, %E1\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrwq_f]\n+;;\n+(define_insn \"mve_vldrwq_fv4sf\"\n+  [(set (match_operand:V4SF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Us\")]\n+\t VLDRWQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1]  = operands[1];\n+   output_asm_insn (\"vldrw.f32\\t%q0, %E1\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrwq_s vldrwq_u]\n+;;\n+(define_insn \"mve_vldrwq_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Us\")]\n+\t VLDRWQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1]  = operands[1];\n+   output_asm_insn (\"vldrw.<supf>32\\t%q0, %E1\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vldrwq_z_f]\n+;;\n+(define_insn \"mve_vldrwq_z_fv4sf\"\n+  [(set (match_operand:V4SF 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SF [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t(match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VLDRWQ_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1]  = operands[1];\n+   output_asm_insn (\"vpst\\n\\tvldrwt.f32\\t%q0, %E1\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+;;\n+;; [vldrwq_z_s vldrwq_z_u]\n+;;\n+(define_insn \"mve_vldrwq_z_<supf>v4si\"\n+  [(set (match_operand:V4SI 0 \"s_register_operand\" \"=w\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"memory_operand\" \"Us\")\n+\t(match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VLDRWQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[2];\n+   int regno = REGNO (operands[0]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1]  = operands[1];\n+   output_asm_insn (\"vpst\\n\\tvldrwt.<supf>32\\t%q0, %E1\",ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"8\")])\n+\n+(define_expand \"mve_vld1q_f<mode>\"\n+  [(match_operand:MVE_0 0 \"s_register_operand\")\n+   (unspec:MVE_0 [(match_operand:<MVE_CNVT> 1 \"memory_operand\")] VLD1Q_F)\n+  ]\n+  \"TARGET_HAVE_MVE || TARGET_HAVE_MVE_FLOAT\"\n+{\n+  emit_insn (gen_mve_vldr<V_sz_elem1>q_f<mode>(operands[0],operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vld1q_<supf><mode>\"\n+  [(match_operand:MVE_2 0 \"s_register_operand\")\n+   (unspec:MVE_2 [(match_operand:MVE_2 1 \"memory_operand\")] VLD1Q)\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  emit_insn (gen_mve_vldr<V_sz_elem1>q_<supf><mode>(operands[0],operands[1]));\n+  DONE;\n+})"}, {"sha": "a86d0e66aaca6647c3a959e1678da63d4e6f6845", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -1,3 +1,48 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vld1q_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld1q_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_z_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrhq_z_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_z_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_z_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vldrwq_z_u32.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "91e39f52c0fe63dc13aeaba78469ccbfc1795239", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16_t const * base)\n+{\n+  return vld1q_f16 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16_t const * base)\n+{\n+  return vld1q (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.f16\"  }  } */"}, {"sha": "0ef33ad2e0d3fae181eec59378d797f744ecf564", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_f32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32_t const * base)\n+{\n+  return vld1q_f32 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32_t const * base)\n+{\n+  return vld1q (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.f32\"  }  } */"}, {"sha": "adf2f5b2f7fef4e3c2740305fda40ff88d5e9138", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16_t const * base)\n+{\n+  return vld1q_s16 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16_t const * base)\n+{\n+  return vld1q (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.s16\"  }  } */"}, {"sha": "94df0b4a0e49b32157c59cdba73edb7af8821d25", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32_t const * base)\n+{\n+  return vld1q_s32 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32_t const * base)\n+{\n+  return vld1q (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.s32\"  }  } */"}, {"sha": "9a8b3040af849ac3e0815b3081aec4cc67d7a63d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_s8.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8_t const * base)\n+{\n+  return vld1q_s8 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8_t const * base)\n+{\n+  return vld1q (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.s8\"  }  } */"}, {"sha": "4c5916bd9a3c24f40ccacf6ecaedd70a6de4447e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16_t const * base)\n+{\n+  return vld1q_u16 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16_t const * base)\n+{\n+  return vld1q (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */"}, {"sha": "8f4d521890b81a7716d22bd94513e042e246794d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t const * base)\n+{\n+  return vld1q_u32 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32_t const * base)\n+{\n+  return vld1q (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "3804394ad4932c016271bc7b5a20e5e686dad3d1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld1q_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld1q_u8.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8_t const * base)\n+{\n+  return vld1q_u8 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8_t const * base)\n+{\n+  return vld1q (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrb.u8\"  }  } */"}, {"sha": "ef7b5d4b90e9175d85c791cd606bb0da5633c05c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_f16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16_t const * base)\n+{\n+  return vldrhq_f16 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.f16\"  }  } */"}, {"sha": "72e5ae2a36c8d7c7b3d58cddaf26b24a2c809c96", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_s16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_offset_s16 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */"}, {"sha": "14a850a7574212944bb37430e9836d2205be5151", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_s32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16_t const * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_offset_s32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int16_t const * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.s32\"  }  } */"}, {"sha": "6e8f881c102a6e7defae472427f139cabe47e8be", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_u16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_offset_u16 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */"}, {"sha": "5e18f632931dd9cf720f55f8f0903ebc41490f30", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_u32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16_t const * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_offset_u32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16_t const * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u32\"  }  } */"}, {"sha": "625a8189f789e9759dfb420ace2ef2170c0b9281", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_s16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z_s16 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */"}, {"sha": "bb104680877940fb03cf0260630469577e42a66a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_s32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z_s32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int16_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.s32\"  }  } */"}, {"sha": "8a69d05d498f4b6c468b717e7bb6e489d4a15139", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_u16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z_u16 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */"}, {"sha": "f88dc5e2358496d8164b0e404cd5bd960fae2062", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_offset_z_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_offset_z_u32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z_u32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u32\"  }  } */"}, {"sha": "b82323f7bc4e0f2619c51bd2e423b53d2fc5b1fe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_s16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_shifted_offset_s16 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */"}, {"sha": "15f496cd7c419dff795e546f43038b7280b5ab42", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_s32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16_t const * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_shifted_offset_s32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int16_t const * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.s32\"  }  } */"}, {"sha": "ccf93d4abcd793e25098e75dd4fbb774201995de", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_u16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_shifted_offset_u16 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16_t const * base, uint16x8_t offset)\n+{\n+  return vldrhq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */"}, {"sha": "558893cc01d6ca4a243237fceff0622f02b15043", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_u32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16_t const * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_shifted_offset_u32 (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16_t const * base, uint32x4_t offset)\n+{\n+  return vldrhq_gather_shifted_offset (base, offset);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u32\"  }  } */"}, {"sha": "c2f5429a1b2c43ae9ecd2259523feab76d7ee951", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_s16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z_s16 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */"}, {"sha": "25655929c0bc649e26db6f4c7ef7b94bd580e814", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_s32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z_s32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int16_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.s32\"  }  } */"}, {"sha": "3ade33919592e6336750143fd36dc3888e8ab551", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_u16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z_u16 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16_t const * base, uint16x8_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */"}, {"sha": "c37203bb6607a9e54bf8b10b999b5e91866ba2ce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_gather_shifted_offset_z_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_gather_shifted_offset_z_u32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z_u32 (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint16_t const * base, uint32x4_t offset, mve_pred16_t p)\n+{\n+  return vldrhq_gather_shifted_offset_z (base, offset, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u32\"  }  } */"}, {"sha": "dd5b7c0e6f3c85a9384b0b799662bbd3a0345dc7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_s16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16_t const * base)\n+{\n+  return vldrhq_s16 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.s16\"  }  } */"}, {"sha": "ee3613ca5202695f380f8333536c07fd087794ce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_s32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16_t const * base)\n+{\n+  return vldrhq_s32 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.s32\"  }  } */"}, {"sha": "460931fb818585549ac8b8177468a09e3f5d9096", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_u16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16_t const * base)\n+{\n+  return vldrhq_u16 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u16\"  }  } */"}, {"sha": "1cd04f5c9678845bedb4d2ceaa92f0eb28bccc81", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_u32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16_t const * base)\n+{\n+  return vldrhq_u32 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrh.u32\"  }  } */"}, {"sha": "3ea1db7e0532fae867ee2160babe926d3d47429f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_z_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_f16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16_t const * base, mve_pred16_t p)\n+{\n+  return vldrhq_z_f16 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.f16\"  }  } */"}, {"sha": "9a700ab3f72e882602a55cc5f8293ef3b20f58e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_z_s16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16_t const * base, mve_pred16_t p)\n+{\n+  return vldrhq_z_s16 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.s16\"  }  } */"}, {"sha": "729b6272d9e7ce0854819dd9f8268d81739bc3e6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_z_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_s32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int16_t const * base, mve_pred16_t p)\n+{\n+  return vldrhq_z_s32 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.s32\"  }  } */"}, {"sha": "a511e3af9771eb0f7cbcc2117050778c7c27ac53", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_z_u16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u16.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16_t const * base, mve_pred16_t p)\n+{\n+  return vldrhq_z_u16 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u16\"  }  } */"}, {"sha": "7b0a9a26d951e8fdea7eb6c6844fed598a7cf6d7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrhq_z_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrhq_z_u32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint16_t const * base, mve_pred16_t p)\n+{\n+  return vldrhq_z_u32 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrht.u32\"  }  } */"}, {"sha": "eea45715beae15fe37b426fa3c41b8aaf5031f36", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_f32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32_t const * base)\n+{\n+  return vldrwq_f32 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.f32\"  }  } */"}, {"sha": "4f18dc675b120161792295ce64c111c3bd7d6d4c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_s32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32_t const * base)\n+{\n+  return vldrwq_s32 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.s32\"  }  } */"}, {"sha": "b3672e51e5901d7b15f028f50b7e61178ebc2474", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_u32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t const * base)\n+{\n+  return vldrwq_u32 (base);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrw.u32\"  }  } */"}, {"sha": "0af5f964d6be1ad89269eccc47eda449e211582c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_z_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_f32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32_t const * base, mve_pred16_t p)\n+{\n+  return vldrwq_z_f32 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.f32\"  }  } */"}, {"sha": "a8589cd596be840ff117729fd8386a9b600b7068", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_z_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_s32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32_t const * base, mve_pred16_t p)\n+{\n+  return vldrwq_z_s32 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.s32\"  }  } */"}, {"sha": "d5fa5cf2f21564f6b589168ef3bb41cb9615e2a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldrwq_z_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e3d5afa16045126c3d95ece8fd617e71cf9e6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldrwq_z_u32.c?ref=bf1e3d5afa16045126c3d95ece8fd617e71cf9e6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t const * base, mve_pred16_t p)\n+{\n+  return vldrwq_z_u32 (base, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vldrwt.u32\"  }  } */"}]}