{"sha": "713cc17b3c39ad7bebc1218d1cb3ebe418acb658", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEzY2MxN2IzYzM5YWQ3YmViYzEyMThkMWNiM2ViZTQxOGFjYjY1OA==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2001-12-31T04:07:11Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2001-12-31T04:07:11Z"}, "message": "tree.h (STRIP_NOPS): Remove extraneous semicolon.\n\n\n        * tree.h (STRIP_NOPS): Remove extraneous semicolon.\n        (STRIP_SIGN_NOPS): Likewise.\n        (STRIP_TYPE_NOPS): Likewise.\n        (COMPLETE_OR_UNBOUND_ARRAY_TYPE_P): Add Parenthesis around\n        macro paramater.\n\nFrom-SVN: r48409", "tree": {"sha": "0cd23db194ce8f06f404f08d5c58ee48e28e19e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cd23db194ce8f06f404f08d5c58ee48e28e19e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/713cc17b3c39ad7bebc1218d1cb3ebe418acb658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713cc17b3c39ad7bebc1218d1cb3ebe418acb658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713cc17b3c39ad7bebc1218d1cb3ebe418acb658", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713cc17b3c39ad7bebc1218d1cb3ebe418acb658/comments", "author": null, "committer": null, "parents": [{"sha": "1048f2e25d052034a613820ad5211e1a48a5100b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1048f2e25d052034a613820ad5211e1a48a5100b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1048f2e25d052034a613820ad5211e1a48a5100b"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "66ea716dc4413d5bffa92190e5faf8dbb1ede59e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713cc17b3c39ad7bebc1218d1cb3ebe418acb658/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713cc17b3c39ad7bebc1218d1cb3ebe418acb658/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=713cc17b3c39ad7bebc1218d1cb3ebe418acb658", "patch": "@@ -1,3 +1,11 @@\n+2001-12-31  Graham Stott  <grahams@redhat.com>\n+\n+\t* tree.h (STRIP_NOPS): Remove extraneous semicolon.\n+\t(STRIP_SIGN_NOPS): Likewise.\n+\t(STRIP_TYPE_NOPS): Likewise.\n+\t(COMPLETE_OR_UNBOUND_ARRAY_TYPE_P): Add Parenthesis around\n+\tmacro paramater.\n+\n 2001-12-31  Graham Stott  <grahams@redhat.com>\n \n \t* final.c (struct bb_list): Delete."}, {"sha": "eee6663cb7574feb96d6327e8d2e3a1188e8d0f0", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713cc17b3c39ad7bebc1218d1cb3ebe418acb658/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713cc17b3c39ad7bebc1218d1cb3ebe418acb658/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=713cc17b3c39ad7bebc1218d1cb3ebe418acb658", "patch": "@@ -353,7 +353,7 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n \t && TREE_OPERAND (EXP, 0) != error_mark_node\t\t\\\n \t && (TYPE_MODE (TREE_TYPE (EXP))\t\t\t\\\n \t     == TYPE_MODE (TREE_TYPE (TREE_OPERAND (EXP, 0)))))\t\\\n-    (EXP) = TREE_OPERAND (EXP, 0);\n+    (EXP) = TREE_OPERAND (EXP, 0)\n \n /* Like STRIP_NOPS, but don't let the signedness change either.  */\n \n@@ -366,7 +366,7 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n \t     == TYPE_MODE (TREE_TYPE (TREE_OPERAND (EXP, 0))))\t\\\n \t && (TREE_UNSIGNED (TREE_TYPE (EXP))\t\t\t\\\n \t     == TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (EXP, 0))))) \\\n-    (EXP) = TREE_OPERAND (EXP, 0);\n+    (EXP) = TREE_OPERAND (EXP, 0)\n \n /* Like STRIP_NOPS, but don't alter the TREE_TYPE either.  */\n \n@@ -377,7 +377,7 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n \t && TREE_OPERAND (EXP, 0) != error_mark_node\t\t\\\n \t && (TREE_TYPE (EXP)\t\t\t\t\t\\\n \t     == TREE_TYPE (TREE_OPERAND (EXP, 0))))\t\t\\\n-    (EXP) = TREE_OPERAND (EXP, 0);\n+    (EXP) = TREE_OPERAND (EXP, 0)\n \n /* Nonzero if TYPE represents an integral type.  Note that we do not\n    include COMPLEX types here.  */\n@@ -463,7 +463,7 @@ extern void tree_class_check_failed PARAMS ((const tree, int,\n \n /* Nonzero if this type is complete or is an array with unspecified bound.  */\n #define COMPLETE_OR_UNBOUND_ARRAY_TYPE_P(NODE) \\\n-  (COMPLETE_TYPE_P (TREE_CODE (NODE) == ARRAY_TYPE ? TREE_TYPE (NODE) : NODE))\n+  (COMPLETE_TYPE_P (TREE_CODE (NODE) == ARRAY_TYPE ? TREE_TYPE (NODE) : (NODE)))\n \n /* Nonzero if TYPE represents a type.  */\n "}]}