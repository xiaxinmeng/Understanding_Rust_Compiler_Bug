{"sha": "996c8821a235a2313d3574d0815044847f7b5c14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2Yzg4MjFhMjM1YTIzMTNkMzU3NGQwODE1MDQ0ODQ3ZjdiNWMxNA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-08-30T13:31:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-30T13:31:38Z"}, "message": "exp_ch5.adb, [...]: Minor reformatting\n\n2011-08-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb, sem_ch3.adb, sem_ch5.adb, einfo.adb, checks.adb,\n\tsem_util.adb, sem_util.ads, sem_res.adb, s-stposu.adb, sem_attr.adb,\n\texp_ch4.adb, exp_ch6.adb, s-bbthre.adb, lib-xref-alfa.adb,\n\tsem_ch8.adb, sem_disp.adb, exp_ch3.adb: Minor reformatting\n\n2011-08-30  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Add section on C.6(16) implementation advice for pragma\n\tvolatile.\n\nFrom-SVN: r178303", "tree": {"sha": "2f3990f111f9ff03c198e8c4705bb7595db190bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f3990f111f9ff03c198e8c4705bb7595db190bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/996c8821a235a2313d3574d0815044847f7b5c14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996c8821a235a2313d3574d0815044847f7b5c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996c8821a235a2313d3574d0815044847f7b5c14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996c8821a235a2313d3574d0815044847f7b5c14/comments", "author": null, "committer": null, "parents": [{"sha": "8ed6164c72a03658c50da50f2ead9ed18d41b727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed6164c72a03658c50da50f2ead9ed18d41b727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed6164c72a03658c50da50f2ead9ed18d41b727"}], "stats": {"total": 286, "additions": 178, "deletions": 108}, "files": [{"sha": "be07afa94e9db89d62976620a5215f40cb06e6be", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -1,3 +1,15 @@\n+2011-08-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch5.adb, sem_ch3.adb, sem_ch5.adb, einfo.adb, checks.adb,\n+\tsem_util.adb, sem_util.ads, sem_res.adb, s-stposu.adb, sem_attr.adb,\n+\texp_ch4.adb, exp_ch6.adb, lib-xref-alfa.adb,\n+\tsem_ch8.adb, sem_disp.adb, exp_ch3.adb: Minor reformatting\n+\n+2011-08-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Add section on C.6(16) implementation advice for pragma\n+\tvolatile.\n+\n 2011-08-30  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch3.adb (Expand_Freeze_Array_Type): Correct the call to"}, {"sha": "3eb0c4ec141c64193aead6dbda043c773e41d99f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -479,7 +479,7 @@ package body Checks is\n       Insert_Node : Node_Id)\n    is\n       Loc         : constant Source_Ptr := Sloc (N);\n-      Param_Ent   : Entity_Id  := Param_Entity (N);\n+      Param_Ent   : Entity_Id           := Param_Entity (N);\n       Param_Level : Node_Id;\n       Type_Level  : Node_Id;\n \n@@ -492,6 +492,7 @@ package body Checks is\n       then\n          Param_Ent := Entity (N);\n          while Present (Renamed_Object (Param_Ent)) loop\n+\n             --  Renamed_Object must return an Entity_Name here\n             --  because of preceding \"Present (E_E_A (...))\" test.\n \n@@ -510,15 +511,15 @@ package body Checks is\n       elsif Present (Param_Ent)\n          and then Present (Extra_Accessibility (Param_Ent))\n          and then UI_Gt (Object_Access_Level (N),\n-           Deepest_Type_Access_Level (Typ))\n+                         Deepest_Type_Access_Level (Typ))\n          and then not Accessibility_Checks_Suppressed (Param_Ent)\n          and then not Accessibility_Checks_Suppressed (Typ)\n       then\n          Param_Level :=\n            New_Occurrence_Of (Extra_Accessibility (Param_Ent), Loc);\n \n-         Type_Level := Make_Integer_Literal (Loc,\n-           Deepest_Type_Access_Level (Typ));\n+         Type_Level :=\n+           Make_Integer_Literal (Loc, Deepest_Type_Access_Level (Typ));\n \n          --  Raise Program_Error if the accessibility level of the access\n          --  parameter is deeper than the level of the target access type."}, {"sha": "6eaab6d946e2f82dc62bbc1d45535be575515c1e", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -5461,14 +5461,24 @@ package body Einfo is\n       Set_Uint14 (Id, No_Uint);  -- Normalized_Position\n    end Init_Component_Location;\n \n+   ----------------------------\n+   -- Init_Object_Size_Align --\n+   ----------------------------\n+\n+   procedure Init_Object_Size_Align (Id : E) is\n+   begin\n+      Set_Uint12 (Id, Uint_0);  -- Esize\n+      Set_Uint14 (Id, Uint_0);  -- Alignment\n+   end Init_Object_Size_Align;\n+\n    ---------------\n    -- Init_Size --\n    ---------------\n \n    procedure Init_Size (Id : E; V : Int) is\n    begin\n-      Set_Uint12 (Id, UI_From_Int (V));  -- Esize\n       pragma Assert (not Is_Object (Id));\n+      Set_Uint12 (Id, UI_From_Int (V));  -- Esize\n       Set_Uint13 (Id, UI_From_Int (V));  -- RM_Size\n    end Init_Size;\n \n@@ -5478,22 +5488,12 @@ package body Einfo is\n \n    procedure Init_Size_Align (Id : E) is\n    begin\n-      Set_Uint12 (Id, Uint_0);  -- Esize\n       pragma Assert (not Is_Object (Id));\n+      Set_Uint12 (Id, Uint_0);  -- Esize\n       Set_Uint13 (Id, Uint_0);  -- RM_Size\n       Set_Uint14 (Id, Uint_0);  -- Alignment\n    end Init_Size_Align;\n \n-   ----------------------------\n-   -- Init_Object_Size_Align --\n-   ----------------------------\n-\n-   procedure Init_Object_Size_Align (Id : E) is\n-   begin\n-      Set_Uint12 (Id, Uint_0);  -- Esize\n-      Set_Uint14 (Id, Uint_0);  -- Alignment\n-   end Init_Object_Size_Align;\n-\n    ----------------------------------------------\n    -- Type Representation Attribute Predicates --\n    ----------------------------------------------"}, {"sha": "338dad16c8350a1cba32cd04e16d8607f7665718", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -5271,20 +5271,25 @@ package body Exp_Ch3 is\n             Loc : constant Source_Ptr := Sloc (N);\n \n             Level : constant Entity_Id :=\n-              Make_Defining_Identifier (Sloc (N),\n-                Chars  => New_External_Name (Chars (Def_Id),\n-                                             Suffix => \"L\"));\n+                      Make_Defining_Identifier (Sloc (N),\n+                        Chars =>\n+                          New_External_Name (Chars (Def_Id), Suffix => \"L\"));\n+\n             Level_Expr : Node_Id;\n             Level_Decl : Node_Id;\n+\n          begin\n             Set_Ekind (Level, Ekind (Def_Id));\n             Set_Etype (Level, Standard_Natural);\n             Set_Scope (Level, Scope (Def_Id));\n \n             if No (Expr) then\n-               Level_Expr := Make_Integer_Literal (Loc,\n-                 -- accessibility level of null\n-                 Intval => Scope_Depth (Standard_Standard));\n+\n+               --  Set accessibility level of null\n+\n+               Level_Expr :=\n+                 Make_Integer_Literal (Loc, Scope_Depth (Standard_Standard));\n+\n             else\n                Level_Expr := Dynamic_Accessibility_Level (Expr);\n             end if;\n@@ -6019,6 +6024,7 @@ package body Exp_Ch3 is\n       --  declaration. Detect anonymous access-to-controlled components.\n \n       Has_AACC := False;\n+\n       Comp := First_Component (Def_Id);\n       while Present (Comp) loop\n          Comp_Typ := Etype (Comp);\n@@ -6036,7 +6042,7 @@ package body Exp_Ch3 is\n          then\n             Set_Has_Controlled_Component (Def_Id);\n \n-         --  Non self-referential anonymous access-to-controlled component\n+         --  Non-self-referential anonymous access-to-controlled component\n \n          elsif Ekind (Comp_Typ) = E_Anonymous_Access_Type\n            and then Needs_Finalization (Designated_Type (Comp_Typ))\n@@ -6430,7 +6436,7 @@ package body Exp_Ch3 is\n             while Present (Comp) loop\n                Comp_Typ := Etype (Comp);\n \n-               --  A non self-referential anonymous access-to-controlled\n+               --  A non-self-referential anonymous access-to-controlled\n                --  component.\n \n                if Ekind (Comp_Typ) = E_Anonymous_Access_Type\n@@ -6799,16 +6805,16 @@ package body Exp_Ch3 is\n             end if;\n \n             --  For access-to-controlled types (including class-wide types and\n-            --  Taft-amendment types which potentially have controlled\n+            --  Taft-amendment types, which potentially have controlled\n             --  components), expand the list controller object that will store\n-            --  the dynamically allocated objects. Do not do this\n-            --  transformation for expander-generated access types, but do it\n-            --  for types that are the full view of types derived from other\n-            --  private types. Also suppress the list controller in the case\n-            --  of a designated type with convention Java, since this is used\n-            --  when binding to Java API specs, where there's no equivalent of\n-            --  a finalization list and we don't want to pull in the\n-            --  finalization support if not needed.\n+            --  the dynamically allocated objects. Don't do this transformation\n+            --  for expander-generated access types, but do it for types that\n+            --  are the full view of types derived from other private types.\n+            --  Also suppress the list controller in the case of a designated\n+            --  type with convention Java, since this is used when binding to\n+            --  Java API specs, where there's no equivalent of a finalization\n+            --  list and we don't want to pull in the finalization support if\n+            --  not needed.\n \n             if not Comes_From_Source (Def_Id)\n               and then not Has_Private_Declaration (Def_Id)"}, {"sha": "a36c0afd7e687ac6ce5de33f705b724b418808b0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -4971,9 +4971,11 @@ package body Exp_Ch4 is\n                   New_N       : Node_Id;\n                   Param_Level : Node_Id;\n                   Type_Level  : Node_Id;\n+\n                begin\n                   if Is_Entity_Name (Lop) then\n                      Expr_Entity := Param_Entity (Lop);\n+\n                      if not Present (Expr_Entity) then\n                         Expr_Entity := Entity (Lop);\n                      end if;\n@@ -4996,11 +4998,11 @@ package body Exp_Ch4 is\n \n                   else\n                      if Present (Expr_Entity)\n-                       and then Present\n-                         (Effective_Extra_Accessibility (Expr_Entity))\n-                       and then UI_Gt\n-                                  (Object_Access_Level (Lop),\n-                                   Type_Access_Level (Rtyp))\n+                       and then\n+                         Present\n+                           (Effective_Extra_Accessibility (Expr_Entity))\n+                       and then UI_Gt (Object_Access_Level (Lop),\n+                                       Type_Access_Level (Rtyp))\n                      then\n                         Param_Level :=\n                           New_Occurrence_Of"}, {"sha": "dbe238b3a632a2d48652a96510b8db95071d4fa3", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -1885,8 +1885,8 @@ package body Exp_Ch5 is\n          Apply_Constraint_Check (Rhs, Etype (Lhs));\n       end if;\n \n-      --  Ada 2012 (AI05-148): Update current accessibility level if\n-      --  Rhs is a stand-alone obj of an anonymous access type.\n+      --  Ada 2012 (AI05-148): Update current accessibility level if Rhs is a\n+      --  stand-alone obj of an anonymous access type.\n \n       if Is_Access_Type (Typ)\n         and then Is_Entity_Name (Lhs)\n@@ -1903,35 +1903,49 @@ package body Exp_Ch5 is\n \n             function Lhs_Entity return Entity_Id is\n                Result : Entity_Id := Entity (Lhs);\n+\n             begin\n                while Present (Renamed_Object (Result)) loop\n+\n                   --  Renamed_Object must return an Entity_Name here\n                   --  because of preceding \"Present (E_E_A (...))\" test.\n \n                   Result := Entity (Renamed_Object (Result));\n                end loop;\n+\n                return Result;\n             end Lhs_Entity;\n \n+            --  Local Declarations\n+\n             Access_Check : constant Node_Id :=\n-              Make_Raise_Program_Error (Loc,\n-                Condition =>\n-                  Make_Op_Gt (Loc,\n-                    Left_Opnd => Dynamic_Accessibility_Level (Rhs),\n-                    Right_Opnd =>\n-                      Make_Integer_Literal (Loc,\n-                        Scope_Depth (Enclosing_Dynamic_Scope (Lhs_Entity)))),\n-                Reason => PE_Accessibility_Check_Failed);\n+                             Make_Raise_Program_Error (Loc,\n+                               Condition =>\n+                                 Make_Op_Gt (Loc,\n+                                   Left_Opnd  =>\n+                                     Dynamic_Accessibility_Level (Rhs),\n+                                   Right_Opnd =>\n+                                     Make_Integer_Literal (Loc,\n+                                       Intval =>\n+                                         Scope_Depth\n+                                           (Enclosing_Dynamic_Scope\n+                                             (Lhs_Entity)))),\n+                               Reason => PE_Accessibility_Check_Failed);\n \n             Access_Level_Update : constant Node_Id :=\n-              Make_Assignment_Statement (Loc,\n-                Name => New_Occurrence_Of (\n-                  Effective_Extra_Accessibility (Entity (Lhs)), Loc),\n-                Expression => Dynamic_Accessibility_Level (Rhs));\n+                                    Make_Assignment_Statement (Loc,\n+                                     Name       =>\n+                                       New_Occurrence_Of\n+                                         (Effective_Extra_Accessibility\n+                                            (Entity (Lhs)), Loc),\n+                                     Expression =>\n+                                        Dynamic_Accessibility_Level (Rhs));\n+\n          begin\n             if not Accessibility_Checks_Suppressed (Entity (Lhs)) then\n                Insert_Action (N, Access_Check);\n             end if;\n+\n             Insert_Action (N, Access_Level_Update);\n          end;\n       end if;"}, {"sha": "b390db4c1e16482d8dd282f15a0011adfb70b499", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -1203,38 +1203,41 @@ package body Exp_Ch6 is\n \n                if Is_Access_Type (E_Formal)\n                  and then Is_Entity_Name (Lhs)\n-                 and then Present (Effective_Extra_Accessibility\n-                 (Entity (Lhs)))\n+                 and then\n+                   Present (Effective_Extra_Accessibility (Entity (Lhs)))\n                then\n                   --  Copyback target is an Ada 2012 stand-alone object\n                   --  of an anonymous access type\n \n                   pragma Assert (Ada_Version >= Ada_2012);\n \n                   if Type_Access_Level (E_Formal) >\n-                    Object_Access_Level (Lhs) then\n-                     Append_To (Post_Call, Make_Raise_Program_Error (Loc,\n-                       Reason => PE_Accessibility_Check_Failed));\n+                     Object_Access_Level (Lhs)\n+                  then\n+                     Append_To (Post_Call,\n+                       Make_Raise_Program_Error (Loc,\n+                         Reason => PE_Accessibility_Check_Failed));\n                   end if;\n \n                   Append_To (Post_Call,\n                     Make_Assignment_Statement (Loc,\n                       Name       => Lhs,\n                       Expression => Expr));\n \n-                  --  We would like to somehow suppress generation of\n-                  --  the extra_accessibility assignment generated by\n-                  --  the expansion of the above assignment statement.\n-                  --  It's not a correctness issue because the following\n-                  --  assignment renders it dead, but generating back-to-back\n-                  --  assignments to the same target is undesirable. ???\n+                  --  We would like to somehow suppress generation of the\n+                  --  extra_accessibility assignment generated by the expansion\n+                  --  of the above assignment statement. It's not a correctness\n+                  --  issue because the following assignment renders it dead,\n+                  --  but generating back-to-back assignments to the same\n+                  --  target is undesirable. ???\n \n                   Append_To (Post_Call,\n                     Make_Assignment_Statement (Loc,\n                       Name       => New_Occurrence_Of (\n                         Effective_Extra_Accessibility (Entity (Lhs)), Loc),\n                       Expression => Make_Integer_Literal (Loc,\n                         Type_Access_Level (E_Formal))));\n+\n                else\n                   Append_To (Post_Call,\n                     Make_Assignment_Statement (Loc,\n@@ -2471,6 +2474,7 @@ package body Exp_Ch6 is\n                         --  For X'Access, pass on the level of the prefix X\n \n                         when Attribute_Access =>\n+\n                            --  If this is an Access attribute applied to the\n                            --  the current instance object passed to a type\n                            --  initialization procedure, then use the level\n@@ -2565,7 +2569,7 @@ package body Exp_Ch6 is\n               and then Ekind (Formal) /= E_Out_Parameter\n               and then Nkind (Prev) /= N_Raise_Constraint_Error\n               and then (Known_Null (Prev)\n-                          or else not Can_Never_Be_Null (Etype (Prev)))\n+                         or else not Can_Never_Be_Null (Etype (Prev)))\n             then\n                Install_Null_Excluding_Check (Prev);\n             end if;\n@@ -2611,10 +2615,10 @@ package body Exp_Ch6 is\n \n          if Validity_Checks_On then\n             if  (Ekind (Formal) = E_In_Parameter\n-                   and then Validity_Check_In_Params)\n+                  and then Validity_Check_In_Params)\n               or else\n                 (Ekind (Formal) = E_In_Out_Parameter\n-                   and then Validity_Check_In_Out_Params)\n+                  and then Validity_Check_In_Out_Params)\n             then\n                --  If the actual is an indexed component of a packed type (or\n                --  is an indexed or selected component whose prefix recursively"}, {"sha": "695b809b119d60b604e5153fa41893f90de644b7", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -7857,7 +7857,6 @@ Followed.  Executable code is generated in some cases, e.g.@: loops\n to initialize large arrays.\n \n @unnumberedsec C.5(8): Pragma @code{Discard_Names}\n-\n @sp 1\n @cartouche\n If the pragma applies to an entity, then the implementation should\n@@ -7866,6 +7865,20 @@ entity.\n @end cartouche\n Followed.\n \n+@cindex pragma Volatile\n+@findex Volatile\n+@unnumberedsec C.6(16): Definition of effect of pragma Volatile\n+@sp 1\n+@cartouche\n+All tasks of the program (on all processors) that read or update volatile\n+variables see the same order of updates to the variables.\n+@end cartouche\n+\n+The semantics for pragma volatile is that provided by the gcc back-end for\n+implementation of volatile in C or C++. On some targets this may meet the\n+serialization requirement stated above. On other targets this implementation\n+advice is not followed.\n+\n @cindex Package @code{Task_Attributes}\n @findex Task_Attributes\n @unnumberedsec C.7.2(30): The Package Task_Attributes"}, {"sha": "91d2ea06b32fc69e86bb77a147414a8656d5962f", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -23,10 +23,11 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with ALFA;        use ALFA;\n-with Einfo;       use Einfo;\n-with Nmake;       use Nmake;\n+with ALFA;     use ALFA;\n+with Einfo;    use Einfo;\n+with Nmake;    use Nmake;\n with Put_ALFA;\n+\n with GNAT.HTable;\n \n separate (Lib.Xref)\n@@ -527,9 +528,9 @@ package body ALFA is\n \n       Heap : Entity_Id;\n \n-      --  Start of processing for Add_ALFA_Xrefs\n-   begin\n+   --  Start of processing for Add_ALFA_Xrefs\n \n+   begin\n       for J in ALFA_Scope_Table.First .. ALFA_Scope_Table.Last loop\n          Set_Scope_Num (N   => ALFA_Scope_Table.Table (J).Scope_Entity,\n                         Num => ALFA_Scope_Table.Table (J).Scope_Num);\n@@ -819,6 +820,7 @@ package body ALFA is\n                   Line        => Int (Get_Logical_Line_Number (XE.Loc)),\n                   Rtype       => XE.Typ,\n                   Col         => Int (Get_Column_Number (XE.Loc))));\n+\n             else\n                ALFA_Xref_Table.Append (\n                  (Entity_Name => Cur_Entity_Name,"}, {"sha": "828c47e6f4e2eb17911313c911c606e2dc7344b2", "filename": "gcc/ada/s-stposu.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fs-stposu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fs-stposu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stposu.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -270,7 +270,7 @@ package body System.Storage_Pools.Subpools is\n          Addr := N_Addr + Header_And_Padding;\n \n          --  Homogeneous masters service the following:\n-         --\n+\n          --    1) Allocations on / Deallocations from regular pools\n          --    2) Named access types\n          --    3) Most cases of anonymous access types usage\n@@ -281,7 +281,7 @@ package body System.Storage_Pools.Subpools is\n             end if;\n \n          --  Heterogeneous masters service the following:\n-         --\n+\n          --    1) Allocations on / Deallocations from subpools\n          --    2) Certain cases of anonymous access types usage\n "}, {"sha": "36a2efa44fdb1c8081083727434527f339ee7733", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -8314,12 +8314,12 @@ package body Sem_Attr is\n                if Ada_Version >= Ada_2005\n                  and then (Is_Local_Anonymous_Access (Btyp)\n \n-                           --  Handle cases where Btyp is the\n-                           --  anonymous access type of an Ada 2012\n-                           --  stand-alone object.\n+                            --  Handle cases where Btyp is the\n+                            --  anonymous access type of an Ada 2012\n+                            --  stand-alone object.\n \n-                           or else Nkind (Associated_Node_For_Itype\n-                             (Btyp)) = N_Object_Declaration)\n+                            or else Nkind (Associated_Node_For_Itype (Btyp)) =\n+                                                        N_Object_Declaration)\n                  and then Object_Access_Level (P)\n                           > Deepest_Type_Access_Level (Btyp)\n                  and then Attr_Id = Attribute_Access"}, {"sha": "eda2fc3ff312156118f5b2e9ecf4a923904be434", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -15123,9 +15123,11 @@ package body Sem_Ch3 is\n       elsif Def_Kind = N_Access_Definition then\n          T := Access_Definition (Related_Nod, Obj_Def);\n \n-         Set_Is_Local_Anonymous_Access (T, V => (Ada_Version < Ada_2012)\n-           or else (Nkind (P) /= N_Object_Declaration)\n-           or else Is_Library_Level_Entity (Defining_Identifier (P)));\n+         Set_Is_Local_Anonymous_Access\n+           (T,\n+            V => (Ada_Version < Ada_2012)\n+                   or else (Nkind (P) /= N_Object_Declaration)\n+                   or else Is_Library_Level_Entity (Defining_Identifier (P)));\n \n       --  Otherwise, the object definition is just a subtype_mark\n "}, {"sha": "25710733a1bd2410d7f3ca0c905221989314a938", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -606,8 +606,8 @@ package body Sem_Ch5 is\n            --  of an anonymous access type.\n \n            or else (Ekind (T1) = E_Anonymous_Access_Type\n-             and then Nkind (Associated_Node_For_Itype (T1))\n-               = N_Object_Declaration)\n+                     and then Nkind (Associated_Node_For_Itype (T1)) =\n+                                                       N_Object_Declaration)\n \n          then\n             Rewrite (Rhs, Convert_To (T1, Relocate_Node (Rhs)));"}, {"sha": "e7ad178a2833caa1d6d0de57d50299b99f072910", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -1137,6 +1137,11 @@ package body Sem_Ch8 is\n       end if;\n \n       Set_Ekind (Id, E_Variable);\n+\n+      --  Initialize the object size and alignment. Note that we used to call\n+      --  Init_Size_Align here, but that's wrong for objects which have only\n+      --  an Esize, not an RM_Size field!\n+\n       Init_Object_Size_Align (Id);\n \n       if T = Any_Type or else Etype (Nam) = Any_Type then"}, {"sha": "7e0da64df67cb7a67ba7eefa9d71ea9046f6dbb4", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -850,6 +850,9 @@ package body Sem_Disp is\n                   Typ := Etype (Subp);\n                end if;\n \n+               --  The following should be better commented, especially since\n+               --  we just added several new conditions here ???\n+\n                if Comes_From_Source (Subp)\n                  and then Is_Interface (Typ)\n                  and then not Is_Class_Wide_Type (Typ)"}, {"sha": "80f31a544acff0928cb5e4468c8d9a5ad060214a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -1115,6 +1115,7 @@ package body Sem_Res is\n               and then Is_Dispatching_Operation (Entity (Selector_Name (N)))\n             then\n                Analyze_Selected_Component (N);\n+\n                if Nkind (N) /= N_Selected_Component then\n                   return;\n                end if;\n@@ -10110,13 +10111,17 @@ package body Sem_Res is\n       Report_Errs : Boolean := True) return Boolean\n    is\n       Target_Type : constant Entity_Id := Base_Type (Target);\n-      Opnd_Type   : Entity_Id := Etype (Operand);\n+      Opnd_Type   : Entity_Id          := Etype (Operand);\n \n       function Conversion_Check\n         (Valid : Boolean;\n          Msg   : String) return Boolean;\n       --  Little routine to post Msg if Valid is False, returns Valid value\n \n+      --  The following are badly named, this kind of overloading is actively\n+      --  confusing in reading code, please rename to something like\n+      --  Error_Msg_N_If_Reporting ???\n+\n       procedure Error_Msg_N (Msg : String; N : Node_Or_Entity_Id);\n       --  If Report_Errs, then calls Errout.Error_Msg_N with its arguments\n \n@@ -10530,9 +10535,8 @@ package body Sem_Res is\n \n          if Ekind (Target_Type) /= E_Anonymous_Access_Type then\n             if Type_Access_Level (Opnd_Type) >\n-              Deepest_Type_Access_Level (Target_Type)\n+               Deepest_Type_Access_Level (Target_Type)\n             then\n-\n                --  In an instance, this is a run-time check, but one we know\n                --  will fail, so generate an appropriate warning. The raise\n                --  will be generated by Expand_N_Type_Conversion.\n@@ -10543,6 +10547,7 @@ package body Sem_Res is\n                      Operand);\n                   Error_Msg_N\n                     (\"\\?Program_Error will be raised at run time\", Operand);\n+\n                else\n                   Error_Msg_N\n                     (\"cannot convert local pointer to non-local access type\",\n@@ -10632,7 +10637,7 @@ package body Sem_Res is\n          if Ekind (Target_Type) /= E_Anonymous_Access_Type\n            or else Is_Local_Anonymous_Access (Target_Type)\n            or else Nkind (Associated_Node_For_Itype (Target_Type)) =\n-             N_Object_Declaration\n+                     N_Object_Declaration\n          then\n             --  Ada 2012 (AI05-0149): Perform legality checking on implicit\n             --  conversions from an anonymous access type to a named general\n@@ -10691,7 +10696,7 @@ package body Sem_Res is\n                   --  implicit conversion is disallowed (by RM12-8.6(27.1/3)).\n \n                   elsif Type_Access_Level (Opnd_Type) >\n-                    Deepest_Type_Access_Level (Target_Type)\n+                        Deepest_Type_Access_Level (Target_Type)\n                   then\n                      Error_Msg_N\n                        (\"implicit conversion of anonymous access value \" &\n@@ -10701,9 +10706,8 @@ package body Sem_Res is\n                end if;\n \n             elsif Type_Access_Level (Opnd_Type) >\n-              Deepest_Type_Access_Level (Target_Type)\n+                    Deepest_Type_Access_Level (Target_Type)\n             then\n-\n                --  In an instance, this is a run-time check, but one we know\n                --  will fail, so generate an appropriate warning. The raise\n                --  will be generated by Expand_N_Type_Conversion.\n@@ -10740,7 +10744,7 @@ package body Sem_Res is\n \n                if Nkind (Operand) = N_Selected_Component\n                  and then Object_Access_Level (Operand) >\n-                   Deepest_Type_Access_Level (Target_Type)\n+                          Deepest_Type_Access_Level (Target_Type)\n                then\n                   --  In an instance, this is a run-time check, but one we know\n                   --  will fail, so generate an appropriate warning. The raise\n@@ -10912,7 +10916,7 @@ package body Sem_Res is\n          --  Check the static accessibility rule of 4.6(20)\n \n          if Type_Access_Level (Opnd_Type) >\n-           Deepest_Type_Access_Level (Target_Type)\n+            Deepest_Type_Access_Level (Target_Type)\n          then\n             Error_Msg_N\n               (\"operand type has deeper accessibility level than target\","}, {"sha": "ffca0d24e75cc3711f10101b5120f0ab56563ba5", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -2382,11 +2382,14 @@ package body Sem_Util is\n         and then not Is_Local_Anonymous_Access (Typ)\n         and then Nkind (Associated_Node_For_Itype (Typ)) = N_Object_Declaration\n       then\n-         --  Typ is the type of an Ada 2012 stand-alone object of an\n-         --  anonymous access type.\n+         --  Typ is the type of an Ada 2012 stand-alone object of an anonymous\n+         --  access type.\n+\n+         return\n+           Scope_Depth (Enclosing_Dynamic_Scope\n+                         (Defining_Identifier\n+                           (Associated_Node_For_Itype (Typ))));\n \n-         return Scope_Depth (Enclosing_Dynamic_Scope (Defining_Identifier (\n-           Associated_Node_For_Itype (Typ))));\n       else\n          return Type_Access_Level (Typ);\n       end if;"}, {"sha": "97d8e80825b065b6e9c79ed575ef3afba32b4206", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c8821a235a2313d3574d0815044847f7b5c14/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=996c8821a235a2313d3574d0815044847f7b5c14", "patch": "@@ -293,13 +293,12 @@ package Sem_Util is\n    --  from a library package which is not within any subprogram.\n \n    function Deepest_Type_Access_Level (Typ : Entity_Id) return Uint;\n-   --  Same as Type_Access_Level, except that if the\n-   --  type is the type of an Ada 2012 stand-alone object of an\n-   --  anonymous access type, then return the static accesssibility level\n-   --  of the object. In that case, the dynamic accessibility level\n-   --  of the object may take on values in a range. The low bound of\n-   --  of that range is returned by Type_Access_Level; this\n-   --  function yields the high bound of that range.\n+   --  Same as Type_Access_Level, except that if the type is the type of an Ada\n+   --  2012 stand-alone object of an anonymous access type, then return the\n+   --  static accesssibility level of the object. In that case, the dynamic\n+   --  accessibility level of the object may take on values in a range. The low\n+   --  bound of of that range is returned by Type_Access_Level; this function\n+   --  yields the high bound of that range.\n \n    function Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Given a declaration N, returns the associated defining entity. If the\n@@ -342,10 +341,10 @@ package Sem_Util is\n    --  name, a defining program unit name or an identifier.\n \n    function Dynamic_Accessibility_Level (Expr : Node_Id) return Node_Id;\n-   --  Expr should be an expression of an access type.\n-   --  Builds an integer literal except in cases involving anonymous\n-   --  access types where accessibility levels are tracked at runtime\n-   --  (access parameters and Ada 2012 stand-alone objects).\n+   --  Expr should be an expression of an access type. Builds an integer\n+   --  literal except in cases involving anonymous access types where\n+   --  accessibility levels are tracked at runtime (access parameters and Ada\n+   --  2012 stand-alone objects).\n \n    function Effective_Extra_Accessibility (Id : Entity_Id) return Entity_Id;\n    --  Same as Einfo.Extra_Accessibility except thtat object renames"}]}