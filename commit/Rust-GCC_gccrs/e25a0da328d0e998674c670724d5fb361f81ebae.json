{"sha": "e25a0da328d0e998674c670724d5fb361f81ebae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1YTBkYTMyOGQwZTk5ODY3NGM2NzA3MjRkNWZiMzYxZjgxZWJhZQ==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2006-11-16T03:05:28Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2006-11-16T03:05:28Z"}, "message": "data.c: Remove trailing periods from error messages.\n\n* data.c: Remove trailing periods from error messages.\n* decl.c: Likewise.\n* expr.c: Likewise.\n* io.c: Likewise.\n* match.c: Likewise.\n* module.c: Likewise.\n* options.c: Likewise.\n* resolve.c: Likewise.\n* symbol.c: Likewise.\n* trans-io.c: Likewise.\n\nFrom-SVN: r118880", "tree": {"sha": "d6fed4e42fc794f83d5aac91cc3162c7af15dc86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6fed4e42fc794f83d5aac91cc3162c7af15dc86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e25a0da328d0e998674c670724d5fb361f81ebae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25a0da328d0e998674c670724d5fb361f81ebae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e25a0da328d0e998674c670724d5fb361f81ebae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e25a0da328d0e998674c670724d5fb361f81ebae/comments", "author": null, "committer": null, "parents": [{"sha": "10612ddf52a0ff87a4d044be62de463dc0730b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10612ddf52a0ff87a4d044be62de463dc0730b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10612ddf52a0ff87a4d044be62de463dc0730b9a"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "a2bc8c814829c7bbe0474971f5dc4969d8679d06", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e25a0da328d0e998674c670724d5fb361f81ebae", "patch": "@@ -1,3 +1,16 @@\n+2006-11-15  Brooks Moses  <brooks.moses@codesourcery.com>\n+ \n+ \t* data.c: Remove trailing periods from error messages.\n+ \t* decl.c: Likewise.\n+ \t* expr.c: Likewise.\n+ \t* io.c: Likewise.\n+ \t* match.c: Likewise.\n+ \t* module.c: Likewise.\n+ \t* options.c: Likewise.\n+ \t* resolve.c: Likewise.\n+ \t* symbol.c: Likewise.\n+ \t* trans-io.c: Likewise.\n+ \n 2006-11-15  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* lang.opt: Rearrange entries back into ASCII order."}, {"sha": "a7a04c662f024055e240a0a326daac00498e0ad0", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=e25a0da328d0e998674c670724d5fb361f81ebae", "patch": "@@ -61,7 +61,7 @@ get_array_index (gfc_array_ref * ar, mpz_t * offset)\n       if ((gfc_is_constant_expr (ar->as->lower[i]) == 0)\n \t  || (gfc_is_constant_expr (ar->as->upper[i]) == 0)\n \t  || (gfc_is_constant_expr (e) == 0))\n-\tgfc_error (\"non-constant array in DATA statement %L.\", &ar->where);        \n+\tgfc_error (\"non-constant array in DATA statement %L\", &ar->where);        \n       mpz_set (tmp, e->value.integer);\n       mpz_sub (tmp, tmp, ar->as->lower[i]->value.integer);\n       mpz_mul (tmp, tmp, delta);"}, {"sha": "25fa6b58b85d21167b6250da3b458151b5dff63e", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=e25a0da328d0e998674c670724d5fb361f81ebae", "patch": "@@ -221,7 +221,7 @@ var_element (gfc_data_variable * new)\n   if (!sym->attr.function && gfc_current_ns->parent && gfc_current_ns->parent == sym->ns)\n     {\n       gfc_error (\"Host associated variable '%s' may not be in the DATA \"\n-\t\t \"statement at %C.\", sym->name);\n+\t\t \"statement at %C\", sym->name);\n       return MATCH_ERROR;\n     }\n \n@@ -1170,7 +1170,7 @@ variable_decl (int elem)\n \t    {\n \t      if (sym->as != NULL)\n \t\t{\n-\t\t  gfc_error (\"Duplicate array spec for Cray pointee at %C.\");\n+\t\t  gfc_error (\"Duplicate array spec for Cray pointee at %C\");\n \t\t  gfc_free_array_spec (cp_as);\n \t\t  m = MATCH_ERROR;\n \t\t  goto cleanup;\n@@ -2460,7 +2460,7 @@ gfc_match_data_decl (void)\n       /* Now we have an error, which we signal, and then fix up\n \t because the knock-on is plain and simple confusing.  */\n       gfc_error_now (\"Derived type at %C has not been previously defined \"\n-\t\t \"and so cannot appear in a derived type definition.\");\n+\t\t \"and so cannot appear in a derived type definition\");\n       current_attr.pointer = 1;\n       goto ok;\n     }\n@@ -3536,12 +3536,12 @@ cray_pointer_decl (void)\n \t}\n       else if (cptr->ts.type != BT_INTEGER)\n \t{\n-\t  gfc_error (\"Cray pointer at %C must be an integer.\");\n+\t  gfc_error (\"Cray pointer at %C must be an integer\");\n \t  return MATCH_ERROR;\n \t}\n       else if (cptr->ts.kind < gfc_index_integer_kind)\n \tgfc_warning (\"Cray pointer at %C has %d bytes of precision;\"\n-\t\t     \" memory addresses require %d bytes.\",\n+\t\t     \" memory addresses require %d bytes\",\n \t\t     cptr->ts.kind,\n \t\t     gfc_index_integer_kind);\n \n@@ -3590,7 +3590,7 @@ cray_pointer_decl (void)\n \t}\n       else if (as != NULL)\n \t{\n-\t  gfc_error (\"Duplicate array spec for Cray pointee at %C.\");\n+\t  gfc_error (\"Duplicate array spec for Cray pointee at %C\");\n \t  gfc_free_array_spec (as);\n \t  return MATCH_ERROR;\n \t}\n@@ -3688,7 +3688,7 @@ gfc_match_pointer (void)\n       if (!gfc_option.flag_cray_pointer)\n \t{\n \t  gfc_error (\"Cray pointer declaration at %C requires -fcray-pointer\"\n-\t\t     \" flag.\");\n+\t\t     \" flag\");\n \t  return MATCH_ERROR;\n \t}\n       return cray_pointer_decl ();"}, {"sha": "304d7c1f00d08592de5b86c6f5ed4f757389e651", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=e25a0da328d0e998674c670724d5fb361f81ebae", "patch": "@@ -2265,7 +2265,7 @@ gfc_check_assign (gfc_expr * lvalue, gfc_expr * rvalue, int conform)\n        && lvalue->ref->u.ar.as->cp_was_assumed)\n      {\n        gfc_error (\"Vector assignment to assumed-size Cray Pointee at %L\"\n-\t\t  \" is illegal.\", &lvalue->where);\n+\t\t  \" is illegal\", &lvalue->where);\n        return FAILURE;\n      }\n "}, {"sha": "24a92090f9e49a019a339da93fa5ae0b32157875", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=e25a0da328d0e998674c670724d5fb361f81ebae", "patch": "@@ -858,7 +858,7 @@ gfc_match_format (void)\n   if (gfc_current_ns->proc_name\n \t&& gfc_current_ns->proc_name->attr.flavor == FL_MODULE)\n     {\n-      gfc_error (\"Format statement in module main block at %C.\");\n+      gfc_error (\"Format statement in module main block at %C\");\n       return MATCH_ERROR;\n     }\n "}, {"sha": "413487d6f4b8132d004f57b57ecd9b27093338e7", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=e25a0da328d0e998674c670724d5fb361f81ebae", "patch": "@@ -2599,7 +2599,7 @@ gfc_match_namelist (void)\n \t  if (sym->as && sym->as->type == AS_ASSUMED_SIZE)\n \t    {\n \t      gfc_error (\"Assumed size array '%s' in namelist '%s' at \"\n-\t\t         \"%C is not allowed.\", sym->name, group_name->name);\n+\t\t         \"%C is not allowed\", sym->name, group_name->name);\n \t      gfc_error_check ();\n \t    }\n "}, {"sha": "f7b45f331c0d1826ef6cc0255e5f940fe06a563a", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=e25a0da328d0e998674c670724d5fb361f81ebae", "patch": "@@ -2690,7 +2690,7 @@ mio_namelist (gfc_symbol * sym)\n \t  check_name = find_use_name (sym->name);\n \t  if (check_name && strcmp (check_name, sym->name) != 0)\n \t    gfc_error(\"Namelist %s cannot be renamed by USE\"\n-\t\t      \" association to %s.\",\n+\t\t      \" association to %s\",\n \t\t      sym->name, check_name);\n \t}\n "}, {"sha": "a81491072eeb5e3f66ebe581259dce8879e714f8", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=e25a0da328d0e998674c670724d5fb361f81ebae", "patch": "@@ -236,7 +236,7 @@ gfc_post_options (const char **pfilename)\n       if (gfc_current_form == FORM_UNKNOWN)\n \t{\n \t  gfc_current_form = FORM_FREE;\n-\t  gfc_warning_now (\"Reading file '%s' as free form.\", \n+\t  gfc_warning_now (\"Reading file '%s' as free form\", \n \t\t\t   (filename[0] == '\\0') ? \"<stdin>\" : filename);\n \t}\n     }\n@@ -247,10 +247,10 @@ gfc_post_options (const char **pfilename)\n     {\n       if (gfc_option.flag_d_lines == 0)\n \tgfc_warning_now (\"'-fd-lines-as-comments' has no effect \"\n-\t\t\t \"in free form.\");\n+\t\t\t \"in free form\");\n       else if (gfc_option.flag_d_lines == 1)\n \tgfc_warning_now (\"'-fd-lines-as-code' has no effect \"\n-\t\t\t \"in free form.\");\n+\t\t\t \"in free form\");\n     }\n \n   flag_inline_trees = 1;"}, {"sha": "a0e8838eef6157d61d1a7d4874614fa30339fb06", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e25a0da328d0e998674c670724d5fb361f81ebae", "patch": "@@ -774,7 +774,7 @@ check_assumed_size_reference (gfc_symbol * sym, gfc_expr * e)\n     {\n       gfc_error (\"The upper bound in the last dimension must \"\n \t\t \"appear in the reference to the assumed size \"\n-\t\t \"array '%s' at %L.\", sym->name, &e->where);\n+\t\t \"array '%s' at %L\", sym->name, &e->where);\n       return true;\n     }\n   return false;\n@@ -5640,7 +5640,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \t     || !gfc_is_constant_expr (c->ts.cl->length))\n \t   {\n \t     gfc_error (\"Character length of component '%s' needs to \"\n-\t\t\t\"be a constant specification expression at %L.\",\n+\t\t\t\"be a constant specification expression at %L\",\n \t\t\tc->name,\n \t\t\tc->ts.cl->length ? &c->ts.cl->length->where : &c->loc);\n \t     return FAILURE;\n@@ -5693,7 +5693,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \t\t|| !gfc_is_constant_expr (c->as->upper[i]))\n \t    {\n \t      gfc_error (\"Component '%s' of '%s' at %L must have \"\n-\t\t\t \"constant array bounds.\",\n+\t\t\t \"constant array bounds\",\n \t\t\t c->name, sym->name, &c->loc);\n \t      return FAILURE;\n \t    }\n@@ -5952,7 +5952,7 @@ resolve_symbol (gfc_symbol * sym)\n \t&& sym->ts.derived->components == NULL)\n     {\n       gfc_error (\"The derived type '%s' at %L is of type '%s', \"\n-\t\t \"which has not been defined.\", sym->name,\n+\t\t \"which has not been defined\", sym->name,\n \t\t  &sym->declared_at, sym->ts.derived->name);\n       sym->ts.type = BT_UNKNOWN;\n       return;"}, {"sha": "d867de9fcfcddbcdc4d796cf2654aa6f0201afa9", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=e25a0da328d0e998674c670724d5fb361f81ebae", "patch": "@@ -754,7 +754,7 @@ gfc_add_cray_pointee (symbol_attribute * attr, locus * where)\n   if (attr->cray_pointee)\n     {\n       gfc_error (\"Cray Pointee at %L appears in multiple pointer()\"\n-\t\t \" statements.\", where);\n+\t\t \" statements\", where);\n       return FAILURE;\n     }\n "}, {"sha": "3e658b8c00cb4cdd7bb56d29b64e66feb25c14af", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e25a0da328d0e998674c670724d5fb361f81ebae/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=e25a0da328d0e998674c670724d5fb361f81ebae", "patch": "@@ -992,7 +992,7 @@ gfc_trans_inquire (gfc_code * code)\n \n   /* Sanity check.  */\n   if (p->unit && p->file)\n-    gfc_error (\"INQUIRE statement at %L cannot contain both FILE and UNIT specifiers.\", &code->loc);\n+    gfc_error (\"INQUIRE statement at %L cannot contain both FILE and UNIT specifiers\", &code->loc);\n \n   if (p->unit)\n     set_parameter_value (&block, var, IOPARM_common_unit, p->unit);"}]}