{"sha": "6641d6d3fe79113f8d9f3ced355aea79bffda822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0MWQ2ZDNmZTc5MTEzZjhkOWYzY2VkMzU1YWVhNzliZmZkYTgyMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-03T18:11:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-03T18:11:43Z"}, "message": "c++: Disable -frounding-math during manifestly constant evaluation [PR96862]\n\nAs discussed in the PR, fold-const.c punts on floating point constant\nevaluation if the result is inexact and -frounding-math is turned on.\n      /* Don't constant fold this floating point operation if the\n         result may dependent upon the run-time rounding mode and\n         flag_rounding_math is set, or if GCC's software emulation\n         is unable to accurately represent the result.  */\n      if ((flag_rounding_math\n           || (MODE_COMPOSITE_P (mode) && !flag_unsafe_math_optimizations))\n          && (inexact || !real_identical (&result, &value)))\n        return NULL_TREE;\nJonathan said that we should be evaluating them anyway, e.g. conceptually\nas if they are done with the default rounding mode before user had a chance\nto change that, and e.g. in C in initializers it is also ignored.\nIn fact, fold-const.c for C initializers turns off various other options:\n\n/* Perform constant folding and related simplification of initializer\n   expression EXPR.  These behave identically to \"fold_buildN\" but ignore\n   potential run-time traps and exceptions that fold must preserve.  */\n\n  int saved_signaling_nans = flag_signaling_nans;\\\n  int saved_trapping_math = flag_trapping_math;\\\n  int saved_rounding_math = flag_rounding_math;\\\n  int saved_trapv = flag_trapv;\\\n  int saved_folding_initializer = folding_initializer;\\\n  flag_signaling_nans = 0;\\\n  flag_trapping_math = 0;\\\n  flag_rounding_math = 0;\\\n  flag_trapv = 0;\\\n  folding_initializer = 1;\n\n  flag_signaling_nans = saved_signaling_nans;\\\n  flag_trapping_math = saved_trapping_math;\\\n  flag_rounding_math = saved_rounding_math;\\\n  flag_trapv = saved_trapv;\\\n  folding_initializer = saved_folding_initializer;\n\nSo, shall cxx_eval_outermost_constant_expr instead turn off all those\noptions (then warning_sentinel wouldn't be the right thing to use, but given\nthe 8 or how many return stmts in cxx_eval_outermost_constant_expr, we'd\nneed a RAII class for this.  Not sure about the folding_initializer, that\none is affecting complex multiplication and division constant evaluation\nsomehow.\n\n2020-09-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/96862\n\t* constexpr.c (cxx_eval_outermost_constant_expr): Temporarily disable\n\tflag_rounding_math during manifestly constant evaluation.\n\n\t* g++.dg/cpp1z/constexpr-96862.C: New test.", "tree": {"sha": "17816f5c34c8176c1c30bf7eb28180e5c36c9d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17816f5c34c8176c1c30bf7eb28180e5c36c9d83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6641d6d3fe79113f8d9f3ced355aea79bffda822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6641d6d3fe79113f8d9f3ced355aea79bffda822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6641d6d3fe79113f8d9f3ced355aea79bffda822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6641d6d3fe79113f8d9f3ced355aea79bffda822/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032a4b42cc5f2105f622690ce2552f1c30e1d227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/032a4b42cc5f2105f622690ce2552f1c30e1d227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/032a4b42cc5f2105f622690ce2552f1c30e1d227"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "2a5051c7b4396d6dcf5fe6eafbf3767eec0d049f", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6641d6d3fe79113f8d9f3ced355aea79bffda822/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6641d6d3fe79113f8d9f3ced355aea79bffda822/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=6641d6d3fe79113f8d9f3ced355aea79bffda822", "patch": "@@ -6680,6 +6680,8 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n \t\t\tallow_non_constant, strict,\n \t\t\tmanifestly_const_eval || !allow_non_constant };\n \n+  /* Turn off -frounding-math for manifestly constant evaluation.  */\n+  warning_sentinel rm (flag_rounding_math, ctx.manifestly_const_eval);\n   tree type = initialized_type (t);\n   tree r = t;\n   bool is_consteval = false;"}, {"sha": "0b5c2e81bd15cd2c913d219297d8392461a2a757", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-96862.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6641d6d3fe79113f8d9f3ced355aea79bffda822/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-96862.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6641d6d3fe79113f8d9f3ced355aea79bffda822/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-96862.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-96862.C?ref=6641d6d3fe79113f8d9f3ced355aea79bffda822", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/96862\n+// { dg-do compile { target c++17 } }\n+// { dg-additional-options \"-frounding-math\" }\n+\n+constexpr double a = 0x1.0p+100 + 0x1.0p-100;\n+const double b = 0x1.0p+100 + 0x1.0p-100;\n+const double &&c = 0x1.0p+100 + 0x1.0p-100;\n+static_assert (0x1.0p+100 + 0x1.0p-100 == 0x1.0p+100, \"\");\n+\n+void\n+foo ()\n+{\n+  constexpr double d = 0x1.0p+100 + 0x1.0p-100;\n+  const double e = 0x1.0p+100 + 0x1.0p-100;\n+  const double &&f = 0x1.0p+100 + 0x1.0p-100;\n+  static_assert (0x1.0p+100 + 0x1.0p-100 == 0x1.0p+100, \"\");\n+}\n+\n+const double &g = a;\n+const double &h = b;"}]}