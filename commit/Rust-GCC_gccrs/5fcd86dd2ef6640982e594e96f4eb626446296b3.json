{"sha": "5fcd86dd2ef6640982e594e96f4eb626446296b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZjZDg2ZGQyZWY2NjQwOTgyZTU5NGU5NmY0ZWI2MjY0NDYyOTZiMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2000-11-27T06:18:24Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2000-11-27T06:18:24Z"}, "message": "Fix rename registers problem; Rewrite 64-bit conditionals in terms of COND_EXEC instead of IF_THEN_ELSE\n\nFrom-SVN: r37781", "tree": {"sha": "ff0f72c609a5c638c0992d44dea1a9db1d16e7b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff0f72c609a5c638c0992d44dea1a9db1d16e7b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fcd86dd2ef6640982e594e96f4eb626446296b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcd86dd2ef6640982e594e96f4eb626446296b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fcd86dd2ef6640982e594e96f4eb626446296b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcd86dd2ef6640982e594e96f4eb626446296b3/comments", "author": null, "committer": null, "parents": [{"sha": "c383aafd3a71f334825b224538fb6e21c7eedd2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c383aafd3a71f334825b224538fb6e21c7eedd2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c383aafd3a71f334825b224538fb6e21c7eedd2c"}], "stats": {"total": 197, "additions": 79, "deletions": 118}, "files": [{"sha": "e20b02795cd2e3cbe7fd46ebaa2b6238c0346941", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 29, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcd86dd2ef6640982e594e96f4eb626446296b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcd86dd2ef6640982e594e96f4eb626446296b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fcd86dd2ef6640982e594e96f4eb626446296b3", "patch": "@@ -1,3 +1,19 @@\n+2000-11-27  Michael Meissner  <meissner@redhat.com>\n+\n+\t* d30v-protos.h (srelational_si_operator): Correctly spell\n+\tfunction.\n+\t(urelational_si_operator): Ditto.\n+\t(relational_si_operator): Ditto.\n+\t(d30v_expand_prologue): Add prototype.\n+\t(d30v_expand_epilogue): Ditto.\n+\n+\t* d30v.h (OPTIMIZATION_OPTIONS): Undo November 22nd change.\n+\n+\t* d30v.md (movcccc_*): Delete now unused patterns.\n+\t(64 bit comparison splitters): Rewrite to use COND_EXEC instead of\n+\tIF_THEN_ELSE.\n+\t(define_cond_exec): Use 'b' to select branch flags.\n+\n 2000-11-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (expand_builtin_strncmp, expand_builtin_strncpy): New\n@@ -20,8 +36,8 @@\n \n 2000-11-26  Neil Booth  <neilb@earthling.net>\n \n-        * cppmacro.c (cpp_scan_buffer_nooutput): Only scan the\n-        current buffer.\n+\t* cppmacro.c (cpp_scan_buffer_nooutput): Only scan the\n+\tcurrent buffer.\n \n 2000-11-26  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n@@ -35,41 +51,41 @@\n \ttable and call output_file_names instead.\n \t(file_info_cmp): Helper function to sort directory names.\n \n-2000-11-26  Neil Booth  <neilb@earthling.net>\n+2000-11-26  Neil Booth\t<neilb@earthling.net>\n \n-        * cpplib.h (struct cpp_reader): Remove lang_asm.\n-        (struct cpp_options): Remove c89. New members lang,\n-        extended_numbers.\n-        * cppexp.c (parse_number): Use them. \n-        * cpphash.h (VALID_SIGN): Use them.\n-        * cppinit.c (set_lang, cpp_start_read): Update.\n-        * cpplex.c (parse_string, _cpp_lex_token): Update.\n-        * cpplib.c (_cpp_handle_directive): Update.\n-        * cppmacro.c (parse_args): Update.\n-        * cppmain.c (scan_buffer): Update.\n+\t* cpplib.h (struct cpp_reader): Remove lang_asm.\n+\t(struct cpp_options): Remove c89. New members lang,\n+\textended_numbers.\n+\t* cppexp.c (parse_number): Use them. \n+\t* cpphash.h (VALID_SIGN): Use them.\n+\t* cppinit.c (set_lang, cpp_start_read): Update.\n+\t* cpplex.c (parse_string, _cpp_lex_token): Update.\n+\t* cpplib.c (_cpp_handle_directive): Update.\n+\t* cppmacro.c (parse_args): Update.\n+\t* cppmain.c (scan_buffer): Update.\n \n Sun Nov 26 10:02:37 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* fold-const.c (fold, case CONVERT_EXPR): Always return tree of\n \tproper type.\n \n-2000-11-26  Neil Booth  <neilb@earthling.net>\n+2000-11-26  Neil Booth\t<neilb@earthling.net>\n \n-        * Makefile.in: Remove MAYBE_CPPLIB and maybe_cpplib.\n-        * c-decl.c: Remove parse_in declaration.\n-        * c-lang.c: Similarly.\n-        * c-lex.c: Similarly.\n-        * c-parse.in: Similarly.\n-        * c-pragma.c: Similarly.\n-        * configure.in: Similarly.\n-        * cp/Make-lang.in: Similarly.\n-        * cp/spew.c: Similarly.\n-        * cp/decl2.c: Remove check for lang-c++ option.\n-        * cp/lang-specs.h: Remove -lang-c++ from cc1plus command line.\n-        * cp/lex.c (lang_init_options): With cpp_reader_init, default to C++.\n-        * c-lex.h: Add declaration of parse_in.\n-        * cppinit.c: Call set_lang after allocating pfile->pending.\n-        * configure: Regenerate.\n+\t* Makefile.in: Remove MAYBE_CPPLIB and maybe_cpplib.\n+\t* c-decl.c: Remove parse_in declaration.\n+\t* c-lang.c: Similarly.\n+\t* c-lex.c: Similarly.\n+\t* c-parse.in: Similarly.\n+\t* c-pragma.c: Similarly.\n+\t* configure.in: Similarly.\n+\t* cp/Make-lang.in: Similarly.\n+\t* cp/spew.c: Similarly.\n+\t* cp/decl2.c: Remove check for lang-c++ option.\n+\t* cp/lang-specs.h: Remove -lang-c++ from cc1plus command line.\n+\t* cp/lex.c (lang_init_options): With cpp_reader_init, default to C++.\n+\t* c-lex.h: Add declaration of parse_in.\n+\t* cppinit.c: Call set_lang after allocating pfile->pending.\n+\t* configure: Regenerate.\n \n 2000-11-25  Zack Weinberg  <zack@wolery.stanford.edu>\n "}, {"sha": "c395ef7cfff236ee16155ee1b5996c7ac2b0022d", "filename": "gcc/config/d30v/d30v-protos.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcd86dd2ef6640982e594e96f4eb626446296b3/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcd86dd2ef6640982e594e96f4eb626446296b3/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h?ref=5fcd86dd2ef6640982e594e96f4eb626446296b3", "patch": "@@ -65,9 +65,9 @@ extern int branch_zero_operator\t\tPARAMS ((rtx, enum machine_mode));\n extern int cond_move_dest_operand\tPARAMS ((rtx, enum machine_mode));\n extern int cond_move_operand\t\tPARAMS ((rtx, enum machine_mode));\n extern int cond_exec_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int srelational_si_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int urelational_si_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int relational_di_operand\tPARAMS ((rtx, enum machine_mode));\n+extern int srelational_si_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int urelational_si_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int relational_di_operator\tPARAMS ((rtx, enum machine_mode));\n #endif\n extern d30v_stack_t *d30v_stack_info\tPARAMS ((void));\n extern int direct_return\t\tPARAMS ((void));\n@@ -111,7 +111,9 @@ extern rtx d30v_expand_builtin_va_arg\tPARAMS ((tree, tree));\n #endif\t/* TREE_CODE */\n \n extern void d30v_function_prologue\tPARAMS ((FILE *, int));\n+extern void d30v_expand_prologue\tPARAMS ((void));\n extern void d30v_function_epilogue\tPARAMS ((FILE *, int));\n+extern void d30v_expand_epilogue\tPARAMS ((void));\n extern void d30v_function_profiler\tPARAMS ((FILE *, int));\n #ifdef RTX_CODE\n extern void d30v_split_double\t\tPARAMS ((rtx, rtx *, rtx *));"}, {"sha": "d05d2948c97907669cf9fd29c1e1e7b0737b73f0", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcd86dd2ef6640982e594e96f4eb626446296b3/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcd86dd2ef6640982e594e96f4eb626446296b3/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=5fcd86dd2ef6640982e594e96f4eb626446296b3", "patch": "@@ -545,12 +545,7 @@ extern int target_flags;\n    *Do not examine `write_symbols' in this macro!* The debugging options are\n    *not supposed to alter the generated code.  */\n \n-/* -frename-registers seems to abort on d30v, turn off until fixed.  */\n-#define OPTIMIZATION_OPTIONS(LEVEL,SIZE) \t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (LEVEL >= 3)\t\t\t\t\t\t\t\\\n-    flag_rename_registers = 0;\t\t\t\t\t\t\\\n-} while (0)\n+/* #define OPTIMIZATION_OPTIONS(LEVEL,SIZE) */\n \n /* Define this macro if debugging can be performed even without a frame\n    pointer.  If this macro is defined, GNU CC will turn on the"}, {"sha": "8034b02b29d3339fa57f86f67120fd350046b0d2", "filename": "gcc/config/d30v/d30v.md", "status": "modified", "additions": 28, "deletions": 80, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcd86dd2ef6640982e594e96f4eb626446296b3/gcc%2Fconfig%2Fd30v%2Fd30v.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcd86dd2ef6640982e594e96f4eb626446296b3/gcc%2Fconfig%2Fd30v%2Fd30v.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.md?ref=5fcd86dd2ef6640982e594e96f4eb626446296b3", "patch": "@@ -2037,60 +2037,6 @@\n   [(set_attr \"length\" \"4,8\")\n    (set_attr \"type\" \"scmp,lcmp\")])\n \n-;; Code used after splitting DI compares\n-\n-(define_insn \"*movcccc_signed_true\"\n-  [(set (match_operand:CC 0 \"flag_operand\" \"=f,f\")\n-\t(if_then_else:CC (match_operand:CC 1 \"br_flag_operand\" \"f,f\")\n-\t\t\t (match_operator:CC 3 \"srelational_si_operator\"\n-\t\t\t\t\t    [(match_operand:SI 4 \"gpr_operand\" \"d,d\")\n-\t\t\t\t\t     (match_operand:SI 5 \"gpr_or_constant_operand\" \"dI,i\")])\n-\t\t\t (match_dup 0)))]\n-  \"\"\n-  \"%R3%T1 %0,%4,%5\"\n-  [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"scmp,lcmp\")\n-   (set_attr \"predicable\" \"no\")])\n-\n-(define_insn \"*movcccc_signed_false\"\n-  [(set (match_operand:CC 0 \"flag_operand\" \"=f,f\")\n-\t(if_then_else:CC (match_operand:CC 1 \"br_flag_operand\" \"f,f\")\n-\t\t\t (match_dup 0)\n-\t\t\t (match_operator:CC 3 \"srelational_si_operator\"\n-\t\t\t\t\t    [(match_operand:SI 4 \"gpr_operand\" \"d,d\")\n-\t\t\t\t\t     (match_operand:SI 5 \"gpr_or_constant_operand\" \"dI,i\")])))]\n-  \"\"\n-  \"%R3%F1 %0,%4,%5\"\n-  [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"scmp,lcmp\")\n-   (set_attr \"predicable\" \"no\")])\n-\n-(define_insn \"*movcccc_unsigned_true\"\n-  [(set (match_operand:CC 0 \"flag_operand\" \"=f,f\")\n-\t(if_then_else:CC (match_operand:CC 1 \"br_flag_operand\" \"f,f\")\n-\t\t\t (match_operator:CC 3 \"urelational_si_operator\"\n-\t\t\t\t\t    [(match_operand:SI 4 \"gpr_operand\" \"d,d\")\n-\t\t\t\t\t     (match_operand:SI 5 \"gpr_or_constant_operand\" \"dJP,i\")])\n-\t\t\t (match_dup 0)))]\n-  \"\"\n-  \"%R3%T1 %0,%4,%5\"\n-  [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"scmp,lcmp\")\n-   (set_attr \"predicable\" \"no\")])\n-\n-(define_insn \"*movcccc_unsigned_false\"\n-  [(set (match_operand:CC 0 \"flag_operand\" \"=f,f\")\n-\t(if_then_else:CC (match_operand:CC 1 \"br_flag_operand\" \"f,f\")\n-\t\t\t (match_dup 0)\n-\t\t\t (match_operator:CC 3 \"urelational_si_operator\"\n-\t\t\t\t\t    [(match_operand:SI 4 \"gpr_operand\" \"d,d\")\n-\t\t\t\t\t     (match_operand:SI 5 \"gpr_or_constant_operand\" \"dJP,i\")])))]\n-  \"\"\n-  \"%R3%F1 %0,%4,%5\"\n-  [(set_attr \"length\" \"4,8\")\n-   (set_attr \"type\" \"scmp,lcmp\")\n-   (set_attr \"predicable\" \"no\")])\n-\n ;; 64 bit integer tests\n (define_insn \"*eqdi_internal\"\n   [(set (match_operand:CC 0 \"br_flag_operand\" \"=b,b,b\")\n@@ -2109,11 +2055,12 @@\n   [(set (match_dup 0)\n \t(eq:CC (match_dup 3)\n \t       (match_dup 4)))\n-   (set (match_dup 0)\n-\t(if_then_else:CC (match_dup 0)\n-\t\t\t (eq:CC (match_dup 5)\n-\t\t\t\t(match_dup 6))\n-\t\t\t (match_dup 0)))]\n+   (cond_exec\n+    (eq:CC (match_dup 0)\n+\t   (const_int 0))\n+    (set (match_dup 0)\n+\t (eq:CC (match_dup 5)\n+\t\t(match_dup 6))))]\n   \"\n {\n   d30v_split_double (operands[1], &operands[3], &operands[5]);\n@@ -2137,11 +2084,12 @@\n   [(set (match_dup 0)\n \t(ne:CC (match_dup 3)\n \t       (match_dup 4)))\n-   (set (match_dup 0)\n-\t(if_then_else:CC (match_dup 0)\n-\t\t\t (match_dup 0)\n-\t\t\t (ne:CC (match_dup 5)\n-\t\t\t\t(match_dup 6))))]\n+   (cond_exec\n+    (ne:CC (match_dup 0)\n+\t   (const_int 0))\n+    (set (match_dup 0)\n+\t (ne:CC (match_dup 5)\n+\t\t(match_dup 6))))]\n   \"\n {\n   d30v_split_double (operands[1], &operands[3], &operands[5]);\n@@ -2268,23 +2216,23 @@\n   d30v_split_double (operands[2], &high[0], &low[0]);\n   d30v_split_double (operands[3], &high[1], &low[1]);\n \n-  operands[5] = gen_rtx (SET, VOIDmode,\n-\t\t\t tmpflag,\n-\t\t\t gen_rtx (EQ, CCmode, high[0], high[1]));\n+  operands[5] = gen_rtx_SET (VOIDmode,\n+\t\t\t     tmpflag,\n+\t\t\t     gen_rtx_EQ (CCmode, high[0], high[1]));\n \n-  operands[6] = gen_rtx (SET, VOIDmode,\n-\t\t\t outflag,\n-\t\t\t gen_rtx (IF_THEN_ELSE, CCmode,\n-\t\t\t\t  tmpflag,\n-\t\t\t\t  outflag,\n-\t\t\t\t  gen_rtx (cond, CCmode, high[0], high[1])));\n+  operands[6] = gen_rtx_COND_EXEC (VOIDmode,\n+\t\t\t\t   gen_rtx_NE (CCmode, tmpflag, const0_rtx),\n+\t\t\t\t   gen_rtx_SET (VOIDmode, outflag,\n+\t\t\t\t\t\tgen_rtx_fmt_ee (cond, CCmode,\n+\t\t\t\t\t\t\t\thigh[0],\n+\t\t\t\t\t\t\t\thigh[1])));\n \n-  operands[7] = gen_rtx (SET, VOIDmode,\n-\t\t\t outflag,\n-\t\t\t gen_rtx (IF_THEN_ELSE, CCmode,\n-\t\t\t\t  tmpflag,\n-\t\t\t\t  gen_rtx (ucond, CCmode, low[0], low[1]),\n-\t\t\t\t  outflag));\n+  operands[7] = gen_rtx_COND_EXEC (VOIDmode,\n+\t\t\t\t   gen_rtx_EQ (CCmode, tmpflag, const0_rtx),\n+\t\t\t\t   gen_rtx_SET (VOIDmode, outflag,\n+\t\t\t\t\t\tgen_rtx_fmt_ee (ucond, CCmode,\n+\t\t\t\t\t\t\t\tlow[0],\n+\t\t\t\t\t\t\t\tlow[1])));\n }\")\n \n \f\n@@ -3407,7 +3355,7 @@\n \n (define_cond_exec\n   [(match_operator:CC 0 \"condexec_test_operator\"\n-     [(match_operand:CC 1 \"br_flag_operand\" \"f\")\n+     [(match_operand:CC 1 \"br_flag_operand\" \"b\")\n       (const_int 0)])]\n   \"\"\n   \"\")"}]}