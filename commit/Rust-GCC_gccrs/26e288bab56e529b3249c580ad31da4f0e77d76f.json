{"sha": "26e288bab56e529b3249c580ad31da4f0e77d76f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlMjg4YmFiNTZlNTI5YjMyNDljNTgwYWQzMWRhNGYwZTc3ZDc2Zg==", "commit": {"author": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-07-09T21:03:44Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-07-09T21:03:44Z"}, "message": "Enable fuse-caller-save on self-recursive functions\n\n2014-07-09  Tom de Vries  <tom@codesourcery.com>\n\n\t* final.c (get_call_fndecl): Declare.\n\t(self_recursive_call_p): New function.\n\t(collect_fn_hard_reg_usage): Handle self-recursive function calls.\n\n\t* gcc.target/i386/fuse-caller-save-rec.c: New test.\n\nFrom-SVN: r212409", "tree": {"sha": "8f870b283ee2ce1cc19e7bdf8ea4acb72ccad8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f870b283ee2ce1cc19e7bdf8ea4acb72ccad8dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26e288bab56e529b3249c580ad31da4f0e77d76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e288bab56e529b3249c580ad31da4f0e77d76f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e288bab56e529b3249c580ad31da4f0e77d76f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e288bab56e529b3249c580ad31da4f0e77d76f/comments", "author": null, "committer": null, "parents": [{"sha": "f5168e47a83d6afcab6afa176da2ba466c383dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5168e47a83d6afcab6afa176da2ba466c383dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5168e47a83d6afcab6afa176da2ba466c383dbb"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "304ae2ab6eede6ffafda002aff305d1166892601", "filename": "gcc/final.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e288bab56e529b3249c580ad31da4f0e77d76f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e288bab56e529b3249c580ad31da4f0e77d76f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=26e288bab56e529b3249c580ad31da4f0e77d76f", "patch": "@@ -225,6 +225,7 @@ static int final_addr_vec_align (rtx);\n #endif\n static int align_fuzz (rtx, rtx, int, unsigned);\n static void collect_fn_hard_reg_usage (void);\n+static tree get_call_fndecl (rtx);\n \f\n /* Initialize data in final at the beginning of a compilation.  */\n \n@@ -4746,6 +4747,16 @@ make_pass_clean_state (gcc::context *ctxt)\n   return new pass_clean_state (ctxt);\n }\n \n+/* Return true if INSN is a call to the the current function.  */\n+\n+static bool\n+self_recursive_call_p (rtx insn)\n+{\n+  tree fndecl = get_call_fndecl (insn);\n+  return (fndecl == current_function_decl\n+\t  && decl_binds_to_current_def_p (fndecl));\n+}\n+\n /* Collect hard register usage for the current function.  */\n \n static void\n@@ -4771,7 +4782,8 @@ collect_fn_hard_reg_usage (void)\n       if (!NONDEBUG_INSN_P (insn))\n \tcontinue;\n \n-      if (CALL_P (insn))\n+      if (CALL_P (insn)\n+\t  && !self_recursive_call_p (insn))\n \t{\n \t  if (!get_call_reg_set_usage (insn, &insn_used_regs,\n \t\t\t\t       call_used_reg_set))"}, {"sha": "b30a0b4dbb14d439fcf9a7dd76b3ac9ab97cbfad", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save-rec.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e288bab56e529b3249c580ad31da4f0e77d76f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e288bab56e529b3249c580ad31da4f0e77d76f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save-rec.c?ref=26e288bab56e529b3249c580ad31da4f0e77d76f", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fuse-caller-save -fomit-frame-pointer -fno-optimize-sibling-calls\" } */\n+/* { dg-additional-options \"-mregparm=1\" { target ia32 } } */\n+\n+/* Test -fuse-caller-save optimization on self-recursive function.  */\n+\n+static int __attribute__((noinline))\n+bar (int x)\n+{\n+  if (x > 4)\n+    return bar (x - 3);\n+  return 0;\n+}\n+\n+int __attribute__((noinline))\n+foo (int y)\n+{\n+  return y + bar (y);\n+}\n+\n+int\n+main (void)\n+{\n+  return !(foo (5) == 13);\n+}\n+\n+/* Verify that no registers where saved on stack.  */\n+/* { dg-final { scan-assembler-not \"\\.cfi_offset\"  } } */\n+\n+/* Verify that bar is self-recursive.  */\n+/* { dg-final { scan-assembler-times \"call\\tbar\" 2 } } */\n+"}]}