{"sha": "a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkNWQwOGQyNTcxN2MwMTY4M2U1OTJjZmM3ZjVkZGYxYmJiNWU2ZQ==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-11-26T15:06:04Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-11-26T15:06:04Z"}, "message": "[AArch64][dejagnu] Dejagnu support for ARMv8.1 Adv.SIMD.\n\n        gcc/testsuite\n\t* lib/target-supports.exp (add_options_for_arm_v8_1a_neon): New.\n\t(check_effective_target_arm_arch_FUNC_ok)\n\t(add_options_for_arm_arch_FUNC)\n\t(check_effective_target_arm_arch_FUNC_multilib): Add \"armv8.1-a\"\n\tto the list to be generated.\n\t(check_effective_target_arm_v8_1a_neon_ok_nocache): New.\n\t(check_effective_target_arm_v8_1a_neon_ok): New.\n\t(check_effective_target_arm_v8_1a_neon_hw): New.\n\nFrom-SVN: r230970", "tree": {"sha": "f736b188fb0f82723b41ccfcade8608716c77eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f736b188fb0f82723b41ccfcade8608716c77eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e/comments", "author": null, "committer": null, "parents": [{"sha": "89c9a60c99fa2cbe0ecb38964d9d98fbba5ea7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89c9a60c99fa2cbe0ecb38964d9d98fbba5ea7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89c9a60c99fa2cbe0ecb38964d9d98fbba5ea7c3"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "cf0059704044347e61ed7250066c5dff9c78310b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e", "patch": "@@ -1,3 +1,14 @@\n+2015-11-26  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* lib/target-supports.exp (add_options_for_arm_v8_1a_neon): New.\n+\t(check_effective_target_arm_arch_FUNC_ok)\n+\t(add_options_for_arm_arch_FUNC)\n+\t(check_effective_target_arm_arch_FUNC_multilib): Add \"armv8.1-a\"\n+\tto the list to be generated.\n+\t(check_effective_target_arm_v8_1a_neon_ok_nocache): New.\n+\t(check_effective_target_arm_v8_1a_neon_ok): New.\n+\t(check_effective_target_arm_v8_1a_neon_hw): New.\n+\n 2015-11-26  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcc.target/nvptx/proto-1.c: Adjust expected asm."}, {"sha": "2275fd3f44c87372e96e2ccb89e4dc64cf03402f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a1d5d08d25717c01683e592cfc7f5ddf1bbb5e6e", "patch": "@@ -2816,6 +2816,16 @@ proc add_options_for_arm_v8_neon { flags } {\n     return \"$flags $et_arm_v8_neon_flags -march=armv8-a\"\n }\n \n+# Add the options needed for ARMv8.1 Adv.SIMD.\n+\n+proc add_options_for_arm_v8_1a_neon { flags } {\n+    if { [istarget aarch64*-*-*] } {\n+\treturn \"$flags -march=armv8.1-a\"\n+    } else {\n+\treturn \"$flags\"\n+    }\n+}\n+\n proc add_options_for_arm_crc { flags } {\n     if { ! [check_effective_target_arm_crc_ok] } {\n         return \"$flags\"\n@@ -3102,7 +3112,8 @@ foreach { armfunc armflag armdef } { v4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n \t\t\t\t     v7r \"-march=armv7-r\" __ARM_ARCH_7R__\n \t\t\t\t     v7m \"-march=armv7-m -mthumb\" __ARM_ARCH_7M__\n \t\t\t\t     v7em \"-march=armv7e-m -mthumb\" __ARM_ARCH_7EM__\n-\t\t\t\t     v8a \"-march=armv8-a\" __ARM_ARCH_8A__ } {\n+\t\t\t\t     v8a \"-march=armv8-a\" __ARM_ARCH_8A__\n+\t\t\t\t     v8_1a \"-march=armv8.1a\" __ARM_ARCH_8A__ } {\n     eval [string map [list FUNC $armfunc FLAG $armflag DEF $armdef ] {\n \tproc check_effective_target_arm_arch_FUNC_ok { } {\n \t    if { [ string match \"*-marm*\" \"FLAG\" ] &&\n@@ -3259,6 +3270,25 @@ proc check_effective_target_arm_neonv2_hw { } {\n     } [add_options_for_arm_neonv2 \"\"]]\n }\n \n+# Return 1 if the target supports the ARMv8.1 Adv.SIMD extension, 0\n+# otherwise.  The test is valid for AArch64.\n+\n+proc check_effective_target_arm_v8_1a_neon_ok_nocache { } {\n+    if { ![istarget aarch64*-*-*] } {\n+\treturn 0\n+    }\n+    return [check_no_compiler_messages_nocache arm_v8_1a_neon_ok assembly {\n+\t#if !defined (__ARM_FEATURE_QRDMX)\n+\t#error \"__ARM_FEATURE_QRDMX not defined\"\n+\t#endif\n+    } [add_options_for_arm_v8_1a_neon \"\"]]\n+}\n+\n+proc check_effective_target_arm_v8_1a_neon_ok { } {\n+    return [check_cached_effective_target arm_v8_1a_neon_ok \\\n+\t\tcheck_effective_target_arm_v8_1a_neon_ok_nocache]\n+}\n+\n # Return 1 if the target supports executing ARMv8 NEON instructions, 0\n # otherwise.\n \n@@ -3277,6 +3307,31 @@ proc check_effective_target_arm_v8_neon_hw { } {\n     } [add_options_for_arm_v8_neon \"\"]]\n }\n \n+# Return 1 if the target supports executing the ARMv8.1 Adv.SIMD extension, 0\n+# otherwise.  The test is valid for AArch64.\n+\n+proc check_effective_target_arm_v8_1a_neon_hw { } {\n+    if { ![check_effective_target_arm_v8_1a_neon_ok] } {\n+\treturn 0;\n+    }\n+    return [check_runtime_nocache arm_v8_1a_neon_hw_available {\n+\tint\n+\tmain (void)\n+\t{\n+\t  __Int32x2_t a = {0, 1};\n+\t  __Int32x2_t b = {0, 2};\n+\t  __Int32x2_t result;\n+\n+\t  asm (\"sqrdmlah %0.2s, %1.2s, %2.2s\"\n+\t       : \"=w\"(result)\n+\t       : \"w\"(a), \"w\"(b)\n+\t       : /* No clobbers.  */);\n+\n+\t  return result[0];\n+\t}\n+    }  [add_options_for_arm_v8_1a_neon \"\"]]\n+}\n+\n # Return 1 if this is a ARM target with NEON enabled.\n \n proc check_effective_target_arm_neon { } {"}]}