{"sha": "fdfbd469f4a652c0caca76578ca13a3008923e63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmYmQ0NjlmNGE2NTJjMGNhY2E3NjU3OGNhMTNhMzAwODkyM2U2Mw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-06-09T22:09:58Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-06-09T22:09:58Z"}, "message": "inclhack.def (darwin_stdint_1, [...]): New fixes.\n\n\t* inclhack.def (darwin_stdint_1, darwin_stdint_2,\n\tdarwin_stdint_3, darwin_stdint_4): New fixes.\n\t* tests/base/stdint.h: Adjust test results for new fixes.\n\t* fixincl.x: Regenerate.\n\nFrom-SVN: r148328", "tree": {"sha": "8a2f897fb91b716fab1880ec2d96880ce5a9d13c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a2f897fb91b716fab1880ec2d96880ce5a9d13c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdfbd469f4a652c0caca76578ca13a3008923e63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfbd469f4a652c0caca76578ca13a3008923e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdfbd469f4a652c0caca76578ca13a3008923e63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdfbd469f4a652c0caca76578ca13a3008923e63/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "744aa42faba7eedf82eaa6c7a636ca1eb1d0c272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/744aa42faba7eedf82eaa6c7a636ca1eb1d0c272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/744aa42faba7eedf82eaa6c7a636ca1eb1d0c272"}], "stats": {"total": 356, "additions": 351, "deletions": 5}, "files": [{"sha": "9bdd28d36416145c78afb91e31a42119cd57da4c", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfbd469f4a652c0caca76578ca13a3008923e63/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfbd469f4a652c0caca76578ca13a3008923e63/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=fdfbd469f4a652c0caca76578ca13a3008923e63", "patch": "@@ -1,3 +1,10 @@\n+2009-06-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* inclhack.def (darwin_stdint_1, darwin_stdint_2, darwin_stdint_3,\n+\tdarwin_stdint_4): New fixes.\n+\t* tests/base/stdint.h: Adjust test results for new fixes.\n+\t* fixincl.x: Regenerate.\n+\n 2009-05-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* inclhack.def (solaris_int_const): New fix."}, {"sha": "433740f302811f674b808a047f28dc4ede2910b6", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 207, "deletions": 5, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfbd469f4a652c0caca76578ca13a3008923e63/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfbd469f4a652c0caca76578ca13a3008923e63/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=fdfbd469f4a652c0caca76578ca13a3008923e63", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Saturday May 30, 2009 at 12:11:05 AM CEST\n+ * It has been AutoGen-ed  Monday June  8, 2009 at 08:37:38 PM CEST\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sat May 30 00:11:05 CEST 2009\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Mon Jun  8 20:37:38 CEST 2009\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 191 fixup descriptions.\n+ * This file contains 195 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -1785,6 +1785,184 @@ static const char* apzDarwin_Private_ExternPatch[] = {\n     \"__private_extern__\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Darwin_Stdint_1 fix\n+ */\n+tSCC zDarwin_Stdint_1Name[] =\n+     \"darwin_stdint_1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zDarwin_Stdint_1List[] =\n+  \"stdint.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzDarwin_Stdint_1Machs[] = {\n+        \"*-*-darwin*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zDarwin_Stdint_1Select0[] =\n+       \"#define UINT8_C\\\\(v\\\\)[ \\t]+\\\\(v ## U\\\\)\\n\\\n+#define UINT16_C\\\\(v\\\\)[ \\t]+\\\\(v ## U\\\\)\";\n+\n+#define    DARWIN_STDINT_1_TEST_CT  1\n+static tTestDesc aDarwin_Stdint_1Tests[] = {\n+  { TT_EGREP,    zDarwin_Stdint_1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Darwin_Stdint_1\n+ */\n+static const char* apzDarwin_Stdint_1Patch[] = {\n+    \"format\",\n+    \"#define UINT8_C(v)\\tv\\n\\\n+#define UINT16_C(v)\\tv\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Darwin_Stdint_2 fix\n+ */\n+tSCC zDarwin_Stdint_2Name[] =\n+     \"darwin_stdint_2\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zDarwin_Stdint_2List[] =\n+  \"stdint.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzDarwin_Stdint_2Machs[] = {\n+        \"*-*-darwin*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zDarwin_Stdint_2Select0[] =\n+       \"#if __WORDSIZE == 64\\n\\\n+#define INTPTR_MIN[ \\t]+INT64_MIN\\n\\\n+#define INTPTR_MAX[ \\t]+INT64_MAX\\n\\\n+#else\\n\\\n+#define INTPTR_MIN[ \\t]+INT32_MIN\\n\\\n+#define INTPTR_MAX[ \\t]+INT32_MAX\\n\\\n+#endif\";\n+\n+#define    DARWIN_STDINT_2_TEST_CT  1\n+static tTestDesc aDarwin_Stdint_2Tests[] = {\n+  { TT_EGREP,    zDarwin_Stdint_2Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Darwin_Stdint_2\n+ */\n+static const char* apzDarwin_Stdint_2Patch[] = {\n+    \"format\",\n+    \"#if __WORDSIZE == 64\\n\\\n+#define INTPTR_MAX 9223372036854775807L\\n\\\n+#define INTPTR_MIN (-INTPTR_MAX-1)\\n\\\n+#else\\n\\\n+#define INTPTR_MAX 2147483647L\\n\\\n+#define INTPTR_MIN (-INTPTR_MAX-1)\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Darwin_Stdint_3 fix\n+ */\n+tSCC zDarwin_Stdint_3Name[] =\n+     \"darwin_stdint_3\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zDarwin_Stdint_3List[] =\n+  \"stdint.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzDarwin_Stdint_3Machs[] = {\n+        \"*-*-darwin*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zDarwin_Stdint_3Select0[] =\n+       \"#if __WORDSIZE == 64\\n\\\n+#define UINTPTR_MAX[ \\t]+UINT64_MAX\\n\\\n+#else\\n\\\n+#define UINTPTR_MAX[ \\t]+UINT32_MAX\\n\\\n+#endif\";\n+\n+#define    DARWIN_STDINT_3_TEST_CT  1\n+static tTestDesc aDarwin_Stdint_3Tests[] = {\n+  { TT_EGREP,    zDarwin_Stdint_3Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Darwin_Stdint_3\n+ */\n+static const char* apzDarwin_Stdint_3Patch[] = {\n+    \"format\",\n+    \"#if __WORDSIZE == 64\\n\\\n+#define UINTPTR_MAX 18446744073709551615UL\\n\\\n+#else\\n\\\n+#define UINTPTR_MAX 4294967295UL\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Darwin_Stdint_4 fix\n+ */\n+tSCC zDarwin_Stdint_4Name[] =\n+     \"darwin_stdint_4\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zDarwin_Stdint_4List[] =\n+  \"stdint.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzDarwin_Stdint_4Machs[] = {\n+        \"*-*-darwin*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zDarwin_Stdint_4Select0[] =\n+       \"#if __WORDSIZE == 64\\n\\\n+#define SIZE_MAX[ \\t]+UINT64_MAX\\n\\\n+#else\\n\\\n+#define SIZE_MAX[ \\t]+UINT32_MAX\\n\\\n+#endif\";\n+\n+#define    DARWIN_STDINT_4_TEST_CT  1\n+static tTestDesc aDarwin_Stdint_4Tests[] = {\n+  { TT_EGREP,    zDarwin_Stdint_4Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Darwin_Stdint_4\n+ */\n+static const char* apzDarwin_Stdint_4Patch[] = {\n+    \"format\",\n+    \"#if __WORDSIZE == 64\\n\\\n+#define SIZE_MAX 18446744073709551615UL\\n\\\n+#else\\n\\\n+#define SIZE_MAX 4294967295UL\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Dec_Intern_Asm fix\n@@ -7733,9 +7911,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          233\n+#define REGEX_COUNT          237\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            191\n+#define FIX_COUNT            195\n \n /*\n  *  Enumerate the fixes\n@@ -7783,6 +7961,10 @@ typedef enum {\n     DARWIN_EXTERNC_FIXIDX,\n     DARWIN_GCC4_BREAKAGE_FIXIDX,\n     DARWIN_PRIVATE_EXTERN_FIXIDX,\n+    DARWIN_STDINT_1_FIXIDX,\n+    DARWIN_STDINT_2_FIXIDX,\n+    DARWIN_STDINT_3_FIXIDX,\n+    DARWIN_STDINT_4_FIXIDX,\n     DEC_INTERN_ASM_FIXIDX,\n     DJGPP_WCHAR_H_FIXIDX,\n     ECD_CURSOR_FIXIDX,\n@@ -8145,6 +8327,26 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      DARWIN_PRIVATE_EXTERN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aDarwin_Private_ExternTests,   apzDarwin_Private_ExternPatch, 0 },\n \n+  {  zDarwin_Stdint_1Name,    zDarwin_Stdint_1List,\n+     apzDarwin_Stdint_1Machs,\n+     DARWIN_STDINT_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aDarwin_Stdint_1Tests,   apzDarwin_Stdint_1Patch, 0 },\n+\n+  {  zDarwin_Stdint_2Name,    zDarwin_Stdint_2List,\n+     apzDarwin_Stdint_2Machs,\n+     DARWIN_STDINT_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aDarwin_Stdint_2Tests,   apzDarwin_Stdint_2Patch, 0 },\n+\n+  {  zDarwin_Stdint_3Name,    zDarwin_Stdint_3List,\n+     apzDarwin_Stdint_3Machs,\n+     DARWIN_STDINT_3_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aDarwin_Stdint_3Tests,   apzDarwin_Stdint_3Patch, 0 },\n+\n+  {  zDarwin_Stdint_4Name,    zDarwin_Stdint_4List,\n+     apzDarwin_Stdint_4Machs,\n+     DARWIN_STDINT_4_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aDarwin_Stdint_4Tests,   apzDarwin_Stdint_4Patch, 0 },\n+\n   {  zDec_Intern_AsmName,    zDec_Intern_AsmList,\n      apzDec_Intern_AsmMachs,\n      DEC_INTERN_ASM_TEST_CT, FD_MACH_ONLY,"}, {"sha": "f9845cc74f501ed9060e2e6e7d30642ca733d675", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfbd469f4a652c0caca76578ca13a3008923e63/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfbd469f4a652c0caca76578ca13a3008923e63/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=fdfbd469f4a652c0caca76578ca13a3008923e63", "patch": "@@ -1022,6 +1022,108 @@ fix = {\n };\n \n \n+/*\n+ * Darwin headers have a stdint.h that defines UINT8_C and UINT16_C to\n+ * unsigned constants.\n+ */\n+fix = {\n+    hackname  = darwin_stdint_1;\n+    mach      = \"*-*-darwin*\";\n+    files     = stdint.h;\n+    c_fix     = format;\n+    c_fix_arg = \"#define UINT8_C(v)\\tv\\n#define UINT16_C(v)\\tv\";\n+    select    = \"#define UINT8_C\\\\(v\\\\)[ \\t]+\\\\(v ## U\\\\)\\n\"\n+\t\t\"#define UINT16_C\\\\(v\\\\)[ \\t]+\\\\(v ## U\\\\)\";\n+    test_text = \"#define UINT8_C(v)   (v ## U)\\n\"\n+\t\t\"#define UINT16_C(v)  (v ## U)\";\n+};\n+\n+\n+/*\n+ * Darwin headers have a stdint.h that defines INTPTR_MIN and INTPTR_MAX\n+ * with wrong types.\n+ */\n+fix = {\n+    hackname  = darwin_stdint_2;\n+    mach      = \"*-*-darwin*\";\n+    files     = stdint.h;\n+    c_fix     = format;\n+    c_fix_arg = \"#if __WORDSIZE == 64\\n\"\n+\t\t\"#define INTPTR_MAX 9223372036854775807L\\n\"\n+\t\t\"#define INTPTR_MIN (-INTPTR_MAX-1)\\n\"\n+\t\t\"#else\\n\"\n+\t\t\"#define INTPTR_MAX 2147483647L\\n\"\n+\t\t\"#define INTPTR_MIN (-INTPTR_MAX-1)\\n\"\n+\t\t\"#endif\";\n+    select    = \"#if __WORDSIZE == 64\\n\"\n+\t\t\"#define INTPTR_MIN[ \\t]+INT64_MIN\\n\"\n+\t\t\"#define INTPTR_MAX[ \\t]+INT64_MAX\\n\"\n+\t\t\"#else\\n\"\n+\t\t\"#define INTPTR_MIN[ \\t]+INT32_MIN\\n\"\n+\t\t\"#define INTPTR_MAX[ \\t]+INT32_MAX\\n\"\n+\t\t\"#endif\";\n+    test_text = \"#if __WORDSIZE == 64\\n\"\n+\t\t\"#define INTPTR_MIN        INT64_MIN\\n\"\n+\t\t\"#define INTPTR_MAX        INT64_MAX\\n\"\n+\t\t\"#else\\n\"\n+\t\t\"#define INTPTR_MIN        INT32_MIN\\n\"\n+\t\t\"#define INTPTR_MAX        INT32_MAX\\n\"\n+\t\t\"#endif\";\n+};\n+\n+\n+/*\n+ * Darwin headers have a stdint.h that defines UINTPTR_MAX with a wrong type.\n+ */\n+fix = {\n+    hackname  = darwin_stdint_3;\n+    mach      = \"*-*-darwin*\";\n+    files     = stdint.h;\n+    c_fix     = format;\n+    c_fix_arg = \"#if __WORDSIZE == 64\\n\"\n+\t\t\"#define UINTPTR_MAX 18446744073709551615UL\\n\"\n+\t\t\"#else\\n\"\n+\t\t\"#define UINTPTR_MAX 4294967295UL\\n\"\n+\t\t\"#endif\";\n+    select    = \"#if __WORDSIZE == 64\\n\"\n+\t\t\"#define UINTPTR_MAX[ \\t]+UINT64_MAX\\n\"\n+\t\t\"#else\\n\"\n+\t\t\"#define UINTPTR_MAX[ \\t]+UINT32_MAX\\n\"\n+\t\t\"#endif\";\n+    test_text = \"#if __WORDSIZE == 64\\n\"\n+\t\t\"#define UINTPTR_MAX       UINT64_MAX\\n\"\n+\t\t\"#else\\n\"\n+\t\t\"#define UINTPTR_MAX       UINT32_MAX\\n\"\n+\t\t\"#endif\";\n+};\n+\n+\n+/*\n+ * Darwin headers have a stdint.h that defines SIZE_MAX with a wrong type.\n+ */\n+fix = {\n+    hackname  = darwin_stdint_4;\n+    mach      = \"*-*-darwin*\";\n+    files     = stdint.h;\n+    c_fix     = format;\n+    c_fix_arg = \"#if __WORDSIZE == 64\\n\"\n+\t\t\"#define SIZE_MAX 18446744073709551615UL\\n\"\n+\t\t\"#else\\n\"\n+\t\t\"#define SIZE_MAX 4294967295UL\\n\"\n+\t\t\"#endif\";\n+    select    = \"#if __WORDSIZE == 64\\n\"\n+\t\t\"#define SIZE_MAX[ \\t]+UINT64_MAX\\n\"\n+\t\t\"#else\\n\"\n+\t\t\"#define SIZE_MAX[ \\t]+UINT32_MAX\\n\"\n+\t\t\"#endif\";\n+    test_text = \"#if __WORDSIZE == 64\\n\"\n+\t\t\"#define SIZE_MAX          UINT64_MAX\\n\"\n+\t\t\"#else\\n\"\n+\t\t\"#define SIZE_MAX          UINT32_MAX\\n\"\n+\t\t\"#endif\";\n+};\n+\n+\n /*\n  *  Fix <c_asm.h> on Digital UNIX V4.0:\n  *  It contains a prototype for a DEC C internal asm() function,"}, {"sha": "35039db4f2b36b4da71a016aa3f62df4f1fb3f84", "filename": "fixincludes/tests/base/stdint.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdfbd469f4a652c0caca76578ca13a3008923e63/fixincludes%2Ftests%2Fbase%2Fstdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdfbd469f4a652c0caca76578ca13a3008923e63/fixincludes%2Ftests%2Fbase%2Fstdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstdint.h?ref=fdfbd469f4a652c0caca76578ca13a3008923e63", "patch": "@@ -9,6 +9,41 @@\n \n \n \n+#if defined( DARWIN_STDINT_1_CHECK )\n+#define UINT8_C(c) __UINT8_C(c)\n+#define UINT16_C(c) __UINT16_C(c)\n+#endif  /* DARWIN_STDINT_1_CHECK */\n+\n+\n+#if defined( DARWIN_STDINT_2_CHECK )\n+#if __WORDSIZE == 64\n+#define INTPTR_MAX 9223372036854775807L\n+#define INTPTR_MIN (-INTPTR_MAX-1)\n+#else\n+#define INTPTR_MAX 2147483647L\n+#define INTPTR_MIN (-INTPTR_MAX-1)\n+#endif\n+#endif  /* DARWIN_STDINT_2_CHECK */\n+\n+\n+#if defined( DARWIN_STDINT_3_CHECK )\n+#if __WORDSIZE == 64\n+#define UINTPTR_MAX 18446744073709551615UL\n+#else\n+#define UINTPTR_MAX 4294967295UL\n+#endif\n+#endif  /* DARWIN_STDINT_3_CHECK */\n+\n+\n+#if defined( DARWIN_STDINT_4_CHECK )\n+#if __WORDSIZE == 64\n+#define SIZE_MAX __SIZE_MAX__\n+#else\n+#define SIZE_MAX __SIZE_MAX__\n+#endif\n+#endif  /* DARWIN_STDINT_4_CHECK */\n+\n+\n #if defined( GLIBC_STDINT_CHECK )\n /* This file is part of the GNU C Library.  */\n # define UINT8_C(c)\tc"}]}