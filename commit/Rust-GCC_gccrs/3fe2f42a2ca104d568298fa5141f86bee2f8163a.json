{"sha": "3fe2f42a2ca104d568298fa5141f86bee2f8163a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlMmY0MmEyY2ExMDRkNTY4Mjk4ZmE1MTQxZjg2YmVlMmY4MTYzYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-01-08T21:35:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-01-08T21:35:25Z"}, "message": "re PR c++/31863 (g++-4.1: out of memory with -O1/-O2)\n\n2008-01-08  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/31863\n\t* tree-ssa-structalias.c (push_fields_onto_fieldstack): Bail\n\tout early if the result will be unused.\n\n\t* g++.dg/torture/pr31863.C: New testcase.\n\nFrom-SVN: r131405", "tree": {"sha": "b045b940e8c675ad52a8a9376cfb9fe0fcc7abc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b045b940e8c675ad52a8a9376cfb9fe0fcc7abc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fe2f42a2ca104d568298fa5141f86bee2f8163a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe2f42a2ca104d568298fa5141f86bee2f8163a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe2f42a2ca104d568298fa5141f86bee2f8163a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe2f42a2ca104d568298fa5141f86bee2f8163a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "416a8af4dae6f8d204e168fd3137cc74238860a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/416a8af4dae6f8d204e168fd3137cc74238860a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/416a8af4dae6f8d204e168fd3137cc74238860a0"}], "stats": {"total": 795, "additions": 794, "deletions": 1}, "files": [{"sha": "475a6877da6e5013f82a86bab7294fe3f7b9b6ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe2f42a2ca104d568298fa5141f86bee2f8163a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe2f42a2ca104d568298fa5141f86bee2f8163a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fe2f42a2ca104d568298fa5141f86bee2f8163a", "patch": "@@ -1,3 +1,9 @@\n+2008-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/31863\n+\t* tree-ssa-structalias.c (push_fields_onto_fieldstack): Bail\n+\tout early if the result will be unused.\n+\n 2008-01-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/34709"}, {"sha": "171090603d5c1ae93129e4fba05172ba17ef0050", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe2f42a2ca104d568298fa5141f86bee2f8163a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe2f42a2ca104d568298fa5141f86bee2f8163a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3fe2f42a2ca104d568298fa5141f86bee2f8163a", "patch": "@@ -1,3 +1,8 @@\n+2008-01-08  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/31863\n+\t* g++.dg/torture/pr31863.C: New testcase.\n+\n 2008-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/34694"}, {"sha": "5028d99886cff7c178ea22a040d597dab6ffdcdb", "filename": "gcc/testsuite/g++.dg/torture/pr31863.C", "status": "added", "additions": 776, "deletions": 0, "changes": 776, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe2f42a2ca104d568298fa5141f86bee2f8163a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr31863.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe2f42a2ca104d568298fa5141f86bee2f8163a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr31863.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr31863.C?ref=3fe2f42a2ca104d568298fa5141f86bee2f8163a", "patch": "@@ -0,0 +1,776 @@\n+/* { dg-do link } */\n+\n+namespace Loki\n+{\n+    class NullType {};\n+    template <class T, class U>\n+    struct Typelist\n+    {\n+       typedef T Head;\n+       typedef U Tail;\n+    };\n+\n+\n+\n+    namespace TL\n+    {\n+        template\n+        <\n+                typename T1 = NullType, typename T2 = NullType, typename T3 =\n+NullType,\n+                typename T4 = NullType, typename T5 = NullType, typename T6 =\n+NullType,\n+                typename T7 = NullType, typename T8 = NullType, typename T9 =\n+NullType,\n+                typename T10 = NullType, typename T11 = NullType, typename T12\n+= NullType,\n+                typename T13 = NullType, typename T14 = NullType, typename T15\n+= NullType,\n+                typename T16 = NullType, typename T17 = NullType, typename T18\n+= NullType,\n+                typename T19 = NullType, typename T20 = NullType, typename T21\n+= NullType,\n+                typename T22 = NullType, typename T23 = NullType, typename T24\n+= NullType,\n+                typename T25 = NullType, typename T26 = NullType, typename T27\n+= NullType,\n+                typename T28 = NullType, typename T29 = NullType, typename T30\n+= NullType,\n+                typename T31 = NullType, typename T32 = NullType, typename T33\n+= NullType,\n+                typename T34 = NullType, typename T35 = NullType, typename T36\n+= NullType,\n+                typename T37 = NullType, typename T38 = NullType, typename T39\n+= NullType,\n+                typename T40 = NullType\n+        >\n+        struct MakeTypelist\n+        {\n+        private:\n+            typedef typename MakeTypelist\n+            <\n+                T2 , T3 , T4 ,\n+                T5 , T6 , T7 ,\n+                T8 , T9 , T10,\n+                T11, T12, T13,\n+                T14, T15, T16,\n+                T17, T18, T19,\n+                T20, T21, T22,\n+                T23, T24, T25,\n+                T26, T27, T28,\n+                T29, T30, T31,\n+                T32, T33, T34,\n+                T35, T36, T37,\n+                T38, T39, T40\n+            >\n+            ::Result TailResult;\n+\n+        public:\n+            typedef Typelist<T1, TailResult> Result;\n+        };\n+\n+        template<>\n+        struct MakeTypelist<>\n+        {\n+            typedef NullType Result;\n+        };\n+\n+    }\n+}\n+template <class Key>\n+class Factory;\n+\n+template <class Key, bool iW>\n+struct Context\n+{\n+    typedef Key KeyType;\n+    enum\n+    {\n+        isWrite = iW\n+    };\n+};\n+\n+namespace detail\n+{\n+\n+template <class Key, bool isWrite>\n+class CreatorUnitBaseImpl\n+{\n+public:\n+    typedef Context<Key, isWrite> Context_;\n+private:\n+    typedef void*(CreatorUnitBaseImpl::*CreateFun)(Context_&, unsigned&, const\n+Key&);\n+    CreateFun createFun_;\n+\n+protected:\n+    virtual void* createUninitialized () = 0;\n+    template <class Value>\n+    void* createImpl (Context_& ctx, unsigned& ver, const Key& k)\n+    {\n+        return createUninitialized();\n+    }\n+private:\n+    CreatorUnitBaseImpl();\n+public:\n+    template <class Value>\n+    CreatorUnitBaseImpl (Value*) :\n+        createFun_( &CreatorUnitBaseImpl::template createImpl<Value> )\n+    {\n+    }\n+\n+    virtual ~CreatorUnitBaseImpl () {}\n+\n+    CreatorUnitBaseImpl(const CreatorUnitBaseImpl& s)\n+        : createFun_(s.createFun_)\n+    {\n+    }\n+\n+    CreatorUnitBaseImpl& operator=(const CreatorUnitBaseImpl& s)\n+    {\n+        createFun_ = s.createFun_;\n+        return *this;\n+    }\n+    void* create (Context_& ctx, unsigned& ver, const Key& k)\n+    {\n+        return (this->*createFun_)(ctx, ver, k);\n+    }\n+};\n+\n+template <class Key>\n+class Creator : protected CreatorUnitBaseImpl<Key, true>, protected\n+CreatorUnitBaseImpl<Key, false>\n+{\n+public:\n+    typedef void* (*CreatorFun) ();\n+\n+private:\n+    CreatorFun fun_;\n+protected:\n+    virtual void* createUninitialized ()\n+    {\n+        if (fun_)\n+            return (*fun_)();\n+        return 0;\n+    }\n+private:\n+    Creator ();\n+public:\n+    template <class Value>\n+    Creator (CreatorFun f, Value*) :\n+        CreatorUnitBaseImpl<Key, true>((Value*)0),\n+        CreatorUnitBaseImpl<Key, false>((Value*)0),\n+        fun_(f)\n+    {\n+    }\n+\n+    Creator(const Creator& s) :\n+        CreatorUnitBaseImpl<Key, true>(s),\n+        CreatorUnitBaseImpl<Key, false>(s),\n+        fun_(s.fun_)\n+    {\n+\n+    }\n+\n+    Creator& operator=(const Creator& s)\n+    {\n+        CreatorUnitBaseImpl<Key, true>::operator=(s);\n+        CreatorUnitBaseImpl<Key, false>::operator=(s);\n+        fun_ = s.fun_;\n+        return *this;\n+    }\n+\n+    virtual ~Creator ()\n+    {\n+    }\n+\n+    template <class Context>\n+    void* createObject (Context& ctx, unsigned& ver, const Key& k)\n+    {\n+        void* r = CreatorUnitBaseImpl<Key, Context::isWrite>::create(ctx, ver,\n+k);\n+        return r;\n+    }\n+};\n+\n+}\n+\n+template <class Key>\n+class Factory\n+{\n+public:\n+    typedef Key KeyType;\n+    typedef void* (*CreatorFun) ();\n+    typedef detail::Creator<Key> Creator;\n+public:\n+    Factory () {}\n+    ~Factory () {}\n+\n+    template <class Value>\n+    bool registerCreator (const Key& k, CreatorFun fun)\n+    {\n+        return true;\n+    }\n+    template <class Context>\n+    void* createObject (const Key& k, Context& ctx, unsigned& ver)\n+    {\n+        return 0;\n+    }\n+};\n+\n+template <class Key, class Base, Key key>\n+struct ClassSpec\n+{\n+    typedef Key KeyType;\n+    typedef Base BaseType;\n+    enum {KeyValue = key};\n+};\n+\n+template <class Key, class T>\n+class Serializer;\n+\n+template <class Key, class Base, Key key>\n+class Serializer<Key, ClassSpec <Key, Base, key> >\n+    : public virtual Factory<Key>\n+{\n+    typedef Key KeyType;\n+    typedef Base BaseType;\n+    enum {KeyValue = key};\n+    typedef Factory<Key> Inherited;\n+    typedef Serializer<Key, ClassSpec< Key, Base, key > > SelfType;\n+\n+    static void* create ()\n+    {\n+        return (void*) (new BaseType);\n+    }\n+public:\n+    Serializer()\n+    {\n+        Inherited::template registerCreator<BaseType>(\n+                KeyValue,\n+                &SelfType::create);\n+    }\n+};\n+\n+template <class Key, class Head>\n+class Serializer<Key, Loki::Typelist<Head, Loki::NullType> >:\n+    public Serializer<Key, Head>\n+{\n+};\n+\n+template <class Key, class Head, class Tail>\n+class Serializer<Key, Loki::Typelist<Head, Tail> >:\n+    public virtual Serializer<Key, Head>,\n+    public virtual Serializer<Key, Tail>\n+{\n+};\n+\n+template <class Key>\n+class Serializer<Key, Loki::NullType> : public virtual Factory<Key>\n+{\n+};\n+\n+\n+\n+\n+typedef unsigned KeyType;\n+\n+\n+\n+typedef Factory<KeyType> FactoryType;\n+\n+typedef KeyType Key;\n+\n+struct A001\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 1; }\n+    static const char* className () {return \"A001\";}\n+};\n+\n+struct A002\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 2; }\n+    static const char* className () {return \"A002\";}\n+};\n+\n+struct A003\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 3; }\n+    static const char* className () {return \"A003\";}\n+};\n+\n+struct A004\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 4; }\n+    static const char* className () {return \"A004\";}\n+};\n+\n+struct A005\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 5; }\n+    static const char* className () {return \"A005\";}\n+};\n+\n+struct A006\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 6; }\n+    static const char* className () {return \"A006\";}\n+};\n+\n+struct A007\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 7; }\n+    static const char* className () {return \"A007\";}\n+};\n+\n+struct A008\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 8; }\n+    static const char* className () {return \"A008\";}\n+};\n+\n+struct A009\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 9; }\n+    static const char* className () {return \"A009\";}\n+};\n+\n+struct A010\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 10; }\n+    static const char* className () {return \"A010\";}\n+};\n+\n+struct A011\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 11; }\n+    static const char* className () {return \"A011\";}\n+};\n+\n+struct A012\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 12; }\n+    static const char* className () {return \"A012\";}\n+};\n+\n+struct A013\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 13; }\n+    static const char* className () {return \"A013\";}\n+};\n+\n+struct A014\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 14; }\n+    static const char* className () {return \"A014\";}\n+};\n+\n+struct A015\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 15; }\n+    static const char* className () {return \"A015\";}\n+};\n+\n+struct A016\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 16; }\n+    static const char* className () {return \"A016\";}\n+};\n+\n+struct A017\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 17; }\n+    static const char* className () {return \"A017\";}\n+};\n+\n+struct A018\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 18; }\n+    static const char* className () {return \"A018\";}\n+};\n+\n+struct A019\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 19; }\n+    static const char* className () {return \"A019\";}\n+};\n+\n+struct A020\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 20; }\n+    static const char* className () {return \"A020\";}\n+};\n+\n+struct A021\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 21; }\n+    static const char* className () {return \"A021\";}\n+};\n+\n+struct A022\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 22; }\n+    static const char* className () {return \"A022\";}\n+};\n+\n+struct A023\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 23; }\n+    static const char* className () {return \"A023\";}\n+};\n+\n+struct A024\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 24; }\n+    static const char* className () {return \"A024\";}\n+};\n+\n+struct A025\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 25; }\n+    static const char* className () {return \"A025\";}\n+};\n+\n+struct A026\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 26; }\n+    static const char* className () {return \"A026\";}\n+};\n+\n+struct A027\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 27; }\n+    static const char* className () {return \"A027\";}\n+};\n+\n+struct A028\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 28; }\n+    static const char* className () {return \"A028\";}\n+};\n+\n+struct A029\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 29; }\n+    static const char* className () {return \"A029\";}\n+};\n+\n+struct A030\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 30; }\n+    static const char* className () {return \"A030\";}\n+};\n+\n+struct A031\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 31; }\n+    static const char* className () {return \"A031\";}\n+};\n+\n+struct A032\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 32; }\n+    static const char* className () {return \"A032\";}\n+};\n+\n+struct A033\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 33; }\n+    static const char* className () {return \"A033\";}\n+};\n+\n+struct A034\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 34; }\n+    static const char* className () {return \"A034\";}\n+};\n+\n+struct A035\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 35; }\n+    static const char* className () {return \"A035\";}\n+};\n+\n+struct A036\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 36; }\n+    static const char* className () {return \"A036\";}\n+};\n+\n+struct A037\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 37; }\n+    static const char* className () {return \"A037\";}\n+};\n+\n+struct A038\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 38; }\n+    static const char* className () {return \"A038\";}\n+};\n+\n+struct A039\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 39; }\n+    static const char* className () {return \"A039\";}\n+};\n+\n+struct A040\n+{\n+    template <class Context>\n+    bool serialize(Context& ctx, unsigned& ver)\n+    {\n+        return true;\n+    }\n+    static Key classId() { return 40; }\n+    static const char* className () {return \"A040\";}\n+};\n+\n+Factory<Key>& getInstance()\n+{\n+    static Serializer<Key,\n+        Loki::TL::MakeTypelist<\n+            ClassSpec<Key, A001, 1>,\n+            ClassSpec<Key, A002, 2>,\n+            ClassSpec<Key, A003, 3>,\n+            ClassSpec<Key, A004, 4>,\n+            ClassSpec<Key, A005, 5>,\n+            ClassSpec<Key, A006, 6>,\n+            ClassSpec<Key, A007, 7>,\n+            ClassSpec<Key, A008, 8>,\n+            ClassSpec<Key, A009, 9>,\n+            ClassSpec<Key, A010, 10>,\n+            ClassSpec<Key, A011, 11>,\n+            ClassSpec<Key, A012, 12>,\n+            ClassSpec<Key, A013, 13>,\n+            ClassSpec<Key, A014, 14>,\n+            ClassSpec<Key, A015, 15>,\n+            ClassSpec<Key, A016, 16>,\n+            ClassSpec<Key, A017, 17>,\n+            ClassSpec<Key, A018, 18>,\n+            ClassSpec<Key, A019, 19>,\n+            ClassSpec<Key, A020, 20>,\n+            ClassSpec<Key, A021, 21>,\n+            ClassSpec<Key, A022, 22>,\n+            ClassSpec<Key, A023, 23>,\n+            ClassSpec<Key, A024, 24>,\n+            ClassSpec<Key, A025, 25>,\n+            ClassSpec<Key, A026, 26>,\n+            ClassSpec<Key, A027, 27>,\n+            ClassSpec<Key, A028, 28>,\n+            ClassSpec<Key, A029, 29>,\n+            ClassSpec<Key, A030, 30>,\n+            ClassSpec<Key, A031, 31>,\n+            ClassSpec<Key, A032, 32>,\n+            ClassSpec<Key, A033, 33>,\n+            ClassSpec<Key, A034, 34>,\n+            ClassSpec<Key, A035, 35>,\n+            ClassSpec<Key, A036, 36>,\n+            ClassSpec<Key, A037, 37>,\n+            ClassSpec<Key, A038, 38>,\n+            ClassSpec<Key, A039, 39>,\n+            ClassSpec<Key, A040, 40>\n+        >::Result\n+    > instance;\n+    return instance;\n+}\n+\n+int main ()\n+{\n+    return 0;\n+}"}, {"sha": "70a9d3212c6592bce8a059bcc80142c031b40844", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe2f42a2ca104d568298fa5141f86bee2f8163a/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe2f42a2ca104d568298fa5141f86bee2f8163a/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=3fe2f42a2ca104d568298fa5141f86bee2f8163a", "patch": "@@ -4062,7 +4062,13 @@ push_fields_onto_fieldstack (tree type, VEC(fieldoff_s,heap) **fieldstack,\n {\n   tree field;\n   int count = 0;\n-  int first_element = VEC_length (fieldoff_s, *fieldstack);\n+  unsigned int first_element = VEC_length (fieldoff_s, *fieldstack);\n+\n+  /* If the vector of fields is growing too big, bail out early.\n+     Callers check for VEC_length <= MAX_FIELDS_FOR_FIELD_SENSITIVE, make\n+     sure this fails.  */\n+  if (first_element > MAX_FIELDS_FOR_FIELD_SENSITIVE)\n+    return 0;\n \n   if (TREE_CODE (type) == COMPLEX_TYPE)\n     {"}]}