{"sha": "d01db77a06a80459acf79e963c55e3b94106eeb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAxZGI3N2EwNmE4MDQ1OWFjZjc5ZTk2M2M1NWUzYjk0MTA2ZWViMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-07T08:09:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-07T08:09:45Z"}, "message": "Cache reals for 1/4, 1/6 and 1/9\n\nWe have a global 1/2 and a cached 1/3, but recalculate 1/4, 1/6 and 1/9\neach time we need them.  That seems a bit arbitrary and makes the folding\ncode more noisy (especially once it's moved to match.pd).\n\nThis patch caches the other three constants too.  Bootstrapped &\nregression-tested on x86_64-linux-gnu.\n\ngcc/\n\t* real.h (dconst_quarter, dconst_sixth, dconst_ninth): New macros.\n\t(dconst_quarter_ptr, dconst_sixth_ptr, dconst_ninth_ptr): Declare.\n\t* real.c (CACHED_FRACTION): New helper macro.\n\t(dconst_third_ptr): Use it.\n\t(dconst_quarter_ptr, dconst_sixth_ptr, dconst_ninth_ptr): New.\n\t* builtins.c (fold_builtin_sqrt): Use dconst_quarter and\n\tdconst_sixth.\n\t(fold_builtin_cbrt): Use dconst_sixth and dconst_ninth.\n\nFrom-SVN: r228561", "tree": {"sha": "26df13af657839b7995fa4de21f93310ada1c766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26df13af657839b7995fa4de21f93310ada1c766"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d01db77a06a80459acf79e963c55e3b94106eeb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01db77a06a80459acf79e963c55e3b94106eeb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d01db77a06a80459acf79e963c55e3b94106eeb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01db77a06a80459acf79e963c55e3b94106eeb3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b5dce39b8c076c185ce1fa19d4800d6129f3f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5dce39b8c076c185ce1fa19d4800d6129f3f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b5dce39b8c076c185ce1fa19d4800d6129f3f53"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "fdef683d37c0f0b2dd61494305d27ec7424a5619", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01db77a06a80459acf79e963c55e3b94106eeb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01db77a06a80459acf79e963c55e3b94106eeb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d01db77a06a80459acf79e963c55e3b94106eeb3", "patch": "@@ -1,3 +1,14 @@\n+2015-10-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* real.h (dconst_quarter, dconst_sixth, dconst_ninth): New macros.\n+\t(dconst_quarter_ptr, dconst_sixth_ptr, dconst_ninth_ptr): Declare.\n+\t* real.c (CACHED_FRACTION): New helper macro.\n+\t(dconst_third_ptr): Use it.\n+\t(dconst_quarter_ptr, dconst_sixth_ptr, dconst_ninth_ptr): New.\n+\t* builtins.c (fold_builtin_sqrt): Use dconst_quarter and\n+\tdconst_sixth.\n+\t(fold_builtin_cbrt): Use dconst_sixth and dconst_ninth.\n+\n 2015-10-06  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/67816"}, {"sha": "8fa3927d33912e430589e7e142ca60d107ebe4f0", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01db77a06a80459acf79e963c55e3b94106eeb3/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01db77a06a80459acf79e963c55e3b94106eeb3/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d01db77a06a80459acf79e963c55e3b94106eeb3", "patch": "@@ -7742,20 +7742,10 @@ fold_builtin_sqrt (location_t loc, tree arg, tree type)\n       if (powfn)\n \t{\n \t  tree arg0 = CALL_EXPR_ARG (arg, 0);\n-\t  tree tree_root;\n-\t  /* The inner root was either sqrt or cbrt.  */\n-\t  /* This was a conditional expression but it triggered a bug\n-\t     in Sun C 5.5.  */\n-\t  REAL_VALUE_TYPE dconstroot;\n-\t  if (BUILTIN_SQRT_P (fcode))\n-\t    dconstroot = dconsthalf;\n-\t  else\n-\t    dconstroot = dconst_third ();\n-\n-\t  /* Adjust for the outer root.  */\n-\t  SET_REAL_EXP (&dconstroot, REAL_EXP (&dconstroot) - 1);\n-\t  tree_root = build_real_truncate (type, dconstroot);\n-\t  return build_call_expr_loc (loc, powfn, 2, arg0, tree_root);\n+\t  tree arg1 = (BUILTIN_SQRT_P (fcode)\n+\t\t       ? build_real (type, dconst_quarter ())\n+\t\t       : build_real_truncate (type, dconst_sixth ()));\n+\t  return build_call_expr_loc (loc, powfn, 2, arg0, arg1);\n \t}\n     }\n \n@@ -7815,11 +7805,7 @@ fold_builtin_cbrt (location_t loc, tree arg, tree type)\n \t  if (powfn)\n \t    {\n \t      tree arg0 = CALL_EXPR_ARG (arg, 0);\n-\t      tree tree_root;\n-\t      REAL_VALUE_TYPE dconstroot = dconst_third ();\n-\n-\t      SET_REAL_EXP (&dconstroot, REAL_EXP (&dconstroot) - 1);\n-\t      tree_root = build_real_truncate (type, dconstroot);\n+\t      tree tree_root = build_real_truncate (type, dconst_sixth ());\n \t      return build_call_expr_loc (loc, powfn, 2, arg0, tree_root);\n \t    }\n \t}\n@@ -7834,12 +7820,7 @@ fold_builtin_cbrt (location_t loc, tree arg, tree type)\n \n \t      if (powfn)\n \t\t{\n-\t\t  tree tree_root;\n-\t\t  REAL_VALUE_TYPE dconstroot;\n-\n-\t\t  real_arithmetic (&dconstroot, MULT_EXPR,\n-                                   dconst_third_ptr (), dconst_third_ptr ());\n-\t\t  tree_root = build_real_truncate (type, dconstroot);\n+\t\t  tree tree_root = build_real_truncate (type, dconst_ninth ());\n \t\t  return build_call_expr_loc (loc, powfn, 2, arg0, tree_root);\n \t\t}\n \t    }"}, {"sha": "f633ffd2e88fb9afb6c60136e3355463f46fa062", "filename": "gcc/real.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01db77a06a80459acf79e963c55e3b94106eeb3/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01db77a06a80459acf79e963c55e3b94106eeb3/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=d01db77a06a80459acf79e963c55e3b94106eeb3", "patch": "@@ -2395,21 +2395,26 @@ dconst_e_ptr (void)\n   return &value;\n }\n \n-/* Returns the special REAL_VALUE_TYPE corresponding to 1/3.  */\n-\n-const REAL_VALUE_TYPE *\n-dconst_third_ptr (void)\n-{\n-  static REAL_VALUE_TYPE value;\n-\n-  /* Initialize mathematical constants for constant folding builtins.\n-     These constants need to be given to at least 160 bits precision.  */\n-  if (value.cl == rvc_zero)\n-    {\n-      real_arithmetic (&value, RDIV_EXPR, &dconst1, real_digit (3));\n-    }\n-  return &value;\n-}\n+/* Returns a cached REAL_VALUE_TYPE corresponding to 1/n, for various n.  */\n+\n+#define CACHED_FRACTION(NAME, N)\t\t\t\t\t\\\n+  const REAL_VALUE_TYPE *\t\t\t\t\t\t\\\n+  NAME (void)\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    static REAL_VALUE_TYPE value;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    /* Initialize mathematical constants for constant folding builtins.\t\\\n+       These constants need to be given to at least 160 bits\t\t\\\n+       precision.  */\t\t\t\t\t\t\t\\\n+    if (value.cl == rvc_zero)\t\t\t\t\t\t\\\n+      real_arithmetic (&value, RDIV_EXPR, &dconst1, real_digit (N));\t\\\n+    return &value;\t\t\t\t\t\t\t\\\n+  }\n+\n+CACHED_FRACTION (dconst_third_ptr, 3)\n+CACHED_FRACTION (dconst_quarter_ptr, 4)\n+CACHED_FRACTION (dconst_sixth_ptr, 6)\n+CACHED_FRACTION (dconst_ninth_ptr, 9)\n \n /* Returns the special REAL_VALUE_TYPE corresponding to sqrt(2).  */\n "}, {"sha": "706859b6c64dadfb491bc43e3f985a25dcf5a926", "filename": "gcc/real.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01db77a06a80459acf79e963c55e3b94106eeb3/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01db77a06a80459acf79e963c55e3b94106eeb3/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=d01db77a06a80459acf79e963c55e3b94106eeb3", "patch": "@@ -409,15 +409,21 @@ extern REAL_VALUE_TYPE dconst2;\n extern REAL_VALUE_TYPE dconstm1;\n extern REAL_VALUE_TYPE dconsthalf;\n \n-#define dconst_e()  (*dconst_e_ptr ())\n-#define dconst_third()  (*dconst_third_ptr ())\n-#define dconst_sqrt2()  (*dconst_sqrt2_ptr ())\n+#define dconst_e() (*dconst_e_ptr ())\n+#define dconst_third() (*dconst_third_ptr ())\n+#define dconst_quarter() (*dconst_quarter_ptr ())\n+#define dconst_sixth() (*dconst_sixth_ptr ())\n+#define dconst_ninth() (*dconst_ninth_ptr ())\n+#define dconst_sqrt2() (*dconst_sqrt2_ptr ())\n \n /* Function to return the real value special constant 'e'.  */\n extern const REAL_VALUE_TYPE * dconst_e_ptr (void);\n \n-/* Returns the special REAL_VALUE_TYPE corresponding to 1/3.  */\n-extern const REAL_VALUE_TYPE * dconst_third_ptr (void);\n+/* Returns a cached REAL_VALUE_TYPE corresponding to 1/n, for various n.  */\n+extern const REAL_VALUE_TYPE *dconst_third_ptr (void);\n+extern const REAL_VALUE_TYPE *dconst_quarter_ptr (void);\n+extern const REAL_VALUE_TYPE *dconst_sixth_ptr (void);\n+extern const REAL_VALUE_TYPE *dconst_ninth_ptr (void);\n \n /* Returns the special REAL_VALUE_TYPE corresponding to sqrt(2).  */\n extern const REAL_VALUE_TYPE * dconst_sqrt2_ptr (void);"}]}