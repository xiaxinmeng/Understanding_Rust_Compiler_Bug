{"sha": "3ad33e339551b0a57ffad95cd03b964f9494fc60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FkMzNlMzM5NTUxYjBhNTdmZmFkOTVjZDAzYjk2NGY5NDk0ZmM2MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-23T10:16:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-23T10:16:47Z"}, "message": "[multiple changes]\n\n2014-10-23  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_type.adb: Minor code reorganization (use Nkind_In, Ekind_In).\n\t* sem_ch3.adb: Minor reformatting.\n\n2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Associations): If an actual for a formal\n\tobject is a call to a parameterless expression function, add\n\tthe function to the list of actuals to freeze.\n\t* freeze.adb (Check_Expression_Function): Create freeze nodes of\n\touter types that may be references in the body of the expression.\n\nFrom-SVN: r216583", "tree": {"sha": "997276eedcfa47b4462de6f74d41e2bc3cd28a37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/997276eedcfa47b4462de6f74d41e2bc3cd28a37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ad33e339551b0a57ffad95cd03b964f9494fc60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad33e339551b0a57ffad95cd03b964f9494fc60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad33e339551b0a57ffad95cd03b964f9494fc60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad33e339551b0a57ffad95cd03b964f9494fc60/comments", "author": null, "committer": null, "parents": [{"sha": "580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/580d40e8da45d4a50edb5d31d7be9b5ddbc38590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/580d40e8da45d4a50edb5d31d7be9b5ddbc38590"}], "stats": {"total": 112, "additions": 73, "deletions": 39}, "files": [{"sha": "216f814c98b7264e70522d57a1256cb93ebe347c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad33e339551b0a57ffad95cd03b964f9494fc60/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad33e339551b0a57ffad95cd03b964f9494fc60/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3ad33e339551b0a57ffad95cd03b964f9494fc60", "patch": "@@ -1,3 +1,16 @@\n+2014-10-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_type.adb: Minor code reorganization (use Nkind_In, Ekind_In).\n+\t* sem_ch3.adb: Minor reformatting.\n+\n+2014-10-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Associations): If an actual for a formal\n+\tobject is a call to a parameterless expression function, add\n+\tthe function to the list of actuals to freeze.\n+\t* freeze.adb (Check_Expression_Function): Create freeze nodes of\n+\touter types that may be references in the body of the expression.\n+\n 2014-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_util.ads, checks.ads: Minor comment reformatting."}, {"sha": "156afda2e655ed4eee4b5eb344767c72e875d77f", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad33e339551b0a57ffad95cd03b964f9494fc60/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad33e339551b0a57ffad95cd03b964f9494fc60/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=3ad33e339551b0a57ffad95cd03b964f9494fc60", "patch": "@@ -112,6 +112,11 @@ package body Freeze is\n    --  to deferred constants without completion. We report this at the freeze\n    --  point of the function, to provide a better error message.\n \n+   --  In most cases the expression itself is frozen by the time the function\n+   --  itself is frozen, because the formals will be frozen by then. However,\n+   --  Attribute references to outer types are freeze points for those types;\n+   --  this routine generates the required freeze nodes for them.\n+\n    procedure Check_Strict_Alignment (E : Entity_Id);\n    --  E is a base type. If E is tagged or has a component that is aliased\n    --  or tagged or contains something this is aliased or tagged, set\n@@ -1272,6 +1277,14 @@ package body Freeze is\n          then\n             Error_Msg_NE\n               (\"premature use of& in call or instance\", N, Entity (Nod));\n+\n+         elsif Nkind (Nod) = N_Attribute_Reference then\n+            Analyze (Prefix (Nod));\n+            if Is_Entity_Name (Prefix (Nod))\n+              and then Is_Type (Entity (Prefix (Nod)))\n+            then\n+               Freeze_Before (N, Entity (Prefix (Nod)));\n+            end if;\n          end if;\n \n          return OK;\n@@ -5983,7 +5996,7 @@ package body Freeze is\n       --  and the expressions include allocators, the designed type is frozen\n       --  as well.\n \n-      function In_Exp_Body (N : Node_Id) return Boolean;\n+      function In_Expanded_Body (N : Node_Id) return Boolean;\n       --  Given an N_Handled_Sequence_Of_Statements node N, determines whether\n       --  it is the handled statement sequence of an expander-generated\n       --  subprogram (init proc, stream subprogram, or renaming as body).\n@@ -6023,11 +6036,11 @@ package body Freeze is\n          return Empty;\n       end Find_Aggregate_Component_Desig_Type;\n \n-      -----------------\n-      -- In_Exp_Body --\n-      -----------------\n+      ----------------------\n+      -- In_Expanded_Body --\n+      ----------------------\n \n-      function In_Exp_Body (N : Node_Id) return Boolean is\n+      function In_Expanded_Body (N : Node_Id) return Boolean is\n          P  : Node_Id;\n          Id : Entity_Id;\n \n@@ -6044,7 +6057,8 @@ package body Freeze is\n          else\n             Id := Defining_Unit_Name (Specification (P));\n \n-            --  Following complex conditional could use comments ???\n+            --  The following are expander-created bodies, or bodies that\n+            --  are not freeze points.\n \n             if Nkind (Id) = N_Defining_Identifier\n               and then (Is_Init_Proc (Id)\n@@ -6061,7 +6075,7 @@ package body Freeze is\n                return False;\n             end if;\n          end if;\n-      end In_Exp_Body;\n+      end In_Expanded_Body;\n \n    --  Start of processing for Freeze_Expression\n \n@@ -6314,7 +6328,7 @@ package body Freeze is\n                --  outside this body, not inside it, and we skip past the\n                --  subprogram body that we are inside.\n \n-               if In_Exp_Body (Parent_P) then\n+               if In_Expanded_Body (Parent_P) then\n                   declare\n                      Subp : constant Node_Id := Parent (Parent_P);\n                      Spec : Entity_Id;\n@@ -6358,7 +6372,7 @@ package body Freeze is\n                      --  of F (2) would place Hidden's freeze node (1) in the\n                      --  wrong place. Avoid explicit freezing and let the usual\n                      --  scenarios do the job - for example, reaching the end\n-                     --  of the private declarations.\n+                     --  of the private declarations, or a call to F.\n \n                      if Nkind (Original_Node (Subp)) =\n                                                 N_Expression_Function"}, {"sha": "71a73272b26f49cebe5e5786acbcb5848ea25669", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad33e339551b0a57ffad95cd03b964f9494fc60/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad33e339551b0a57ffad95cd03b964f9494fc60/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=3ad33e339551b0a57ffad95cd03b964f9494fc60", "patch": "@@ -1664,6 +1664,18 @@ package body Sem_Ch12 is\n                         Assoc);\n                   end if;\n \n+                  --  If the object is a call to an expression function, this\n+                  --  is a freezing point for it.\n+\n+                  if Is_Entity_Name (Match)\n+                    and then Present (Entity (Match))\n+                    and then Nkind\n+                      (Original_Node (Unit_Declaration_Node (Entity (Match))))\n+                        = N_Expression_Function\n+                  then\n+                     Append_Elmt (Entity (Match), Actuals_To_Freeze);\n+                  end if;\n+\n                when N_Formal_Type_Declaration =>\n                   Match :=\n                     Matching_Actual ("}, {"sha": "bafeb62bbdb483b2bbcb74121713c5ebc51806ed", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad33e339551b0a57ffad95cd03b964f9494fc60/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad33e339551b0a57ffad95cd03b964f9494fc60/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3ad33e339551b0a57ffad95cd03b964f9494fc60", "patch": "@@ -6942,6 +6942,7 @@ package body Sem_Ch3 is\n          return;\n \n       elsif Has_Discriminants (Parent_Type) then\n+\n          --  Build partial view of derived type from partial view of parent.\n          --  This must be done before building the full derivation because the\n          --  second derivation will modify the discriminants of the first and"}, {"sha": "9b9034a74b01968c1c2868c78d7d09f934cb9c0c", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad33e339551b0a57ffad95cd03b964f9494fc60/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad33e339551b0a57ffad95cd03b964f9494fc60/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=3ad33e339551b0a57ffad95cd03b964f9494fc60", "patch": "@@ -765,9 +765,9 @@ package body Sem_Type is\n            Is_Private_Type (Typ1)\n              and then\n               ((Present (Full_View (Typ1))\n-                  and then Covers (Full_View (Typ1), Typ2))\n+                 and then Covers (Full_View (Typ1), Typ2))\n                 or else (Present (Underlying_Full_View (Typ1))\n-                           and then Covers (Underlying_Full_View (Typ1), Typ2))\n+                          and then Covers (Underlying_Full_View (Typ1), Typ2))\n                 or else Base_Type (Typ1) = Typ2\n                 or else Base_Type (Typ2) = Typ1);\n       end Full_View_Covers;\n@@ -989,11 +989,11 @@ package body Sem_Type is\n       --  attributes require some real type, etc. The built-in types Any_XXX\n       --  represent these classes.\n \n-      elsif (T1 = Any_Integer and then Is_Integer_Type (T2))\n-        or else (T1 = Any_Boolean and then Is_Boolean_Type (T2))\n-        or else (T1 = Any_Real and then Is_Real_Type (T2))\n-        or else (T1 = Any_Fixed and then Is_Fixed_Point_Type (T2))\n-        or else (T1 = Any_Discrete and then Is_Discrete_Type (T2))\n+      elsif     (T1 = Any_Integer  and then Is_Integer_Type     (T2))\n+        or else (T1 = Any_Boolean  and then Is_Boolean_Type     (T2))\n+        or else (T1 = Any_Real     and then Is_Real_Type        (T2))\n+        or else (T1 = Any_Fixed    and then Is_Fixed_Point_Type (T2))\n+        or else (T1 = Any_Discrete and then Is_Discrete_Type    (T2))\n       then\n          return True;\n \n@@ -1022,16 +1022,16 @@ package body Sem_Type is\n         and then Ekind (BT1) = E_General_Access_Type\n         and then Ekind (BT2) = E_Anonymous_Access_Type\n         and then (Covers (Designated_Type (T1), Designated_Type (T2))\n-                   or else Covers (Designated_Type (T2), Designated_Type (T1)))\n+                    or else\n+                  Covers (Designated_Type (T2), Designated_Type (T1)))\n       then\n          return True;\n \n       --  An Access_To_Subprogram is compatible with itself, or with an\n       --  anonymous type created for an attribute reference Access.\n \n-      elsif (Ekind (BT1) = E_Access_Subprogram_Type\n-               or else\n-             Ekind (BT1) = E_Access_Protected_Subprogram_Type)\n+      elsif Ekind_In (BT1, E_Access_Subprogram_Type,\n+                           E_Access_Protected_Subprogram_Type)\n         and then Is_Access_Type (T2)\n         and then (not Comes_From_Source (T1)\n                    or else not Comes_From_Source (T2))\n@@ -1046,10 +1046,8 @@ package body Sem_Type is\n       --  with itself, or with an anonymous type created for an attribute\n       --  reference Access.\n \n-      elsif (Ekind (BT1) = E_Anonymous_Access_Subprogram_Type\n-               or else\n-             Ekind (BT1)\n-                      = E_Anonymous_Access_Protected_Subprogram_Type)\n+      elsif Ekind_In (BT1, E_Anonymous_Access_Subprogram_Type,\n+                           E_Anonymous_Access_Protected_Subprogram_Type)\n         and then Is_Access_Type (T2)\n         and then (not Comes_From_Source (T1)\n                    or else not Comes_From_Source (T2))\n@@ -1258,7 +1256,7 @@ package body Sem_Type is\n         and then Ekind (T2) = E_Anonymous_Access_Type\n         and then Is_Generic_Type (Directly_Designated_Type (T1))\n         and then Get_Instance_Of (Directly_Designated_Type (T1)) =\n-                   Directly_Designated_Type (T2)\n+                                               Directly_Designated_Type (T2)\n       then\n          return True;\n \n@@ -1387,9 +1385,8 @@ package body Sem_Type is\n       function Is_Actual_Subprogram (S : Entity_Id) return Boolean is\n       begin\n          return In_Open_Scopes (Scope (S))\n-           and then\n-             Nkind (Unit_Declaration_Node (S)) =\n-               N_Subprogram_Renaming_Declaration\n+           and then Nkind (Unit_Declaration_Node (S)) =\n+                                         N_Subprogram_Renaming_Declaration\n \n            --  Why the Comes_From_Source test here???\n \n@@ -1542,8 +1539,8 @@ package body Sem_Type is\n \n                if Nkind (Act1) in N_Op\n                  and then Is_Overloaded (Act1)\n-                 and then (Nkind (Right_Opnd (Act1)) = N_Integer_Literal\n-                            or else Nkind (Right_Opnd (Act1)) = N_Real_Literal)\n+                 and then Nkind_In (Right_Opnd (Act1), N_Integer_Literal,\n+                                                       N_Real_Literal)\n                  and then Has_Compatible_Type (Act1, Standard_Boolean)\n                  and then Etype (F1) = Standard_Boolean\n                then\n@@ -1725,8 +1722,7 @@ package body Sem_Type is\n       if Convention (Nam1) = Convention_CIL\n         and then Convention (Nam2) = Convention_CIL\n         and then Ekind (Nam1) = Ekind (Nam2)\n-        and then (Ekind (Nam1) = E_Procedure\n-                   or else Ekind (Nam1) = E_Function)\n+        and then Ekind_In (Nam1, E_Procedure, E_Function)\n       then\n          return It2;\n       end if;\n@@ -1737,9 +1733,7 @@ package body Sem_Type is\n       --  then we must check whether the user-defined entity hides the prede-\n       --  fined one.\n \n-      if Chars (Nam1) in Any_Operator_Name\n-        and then Standard_Operator\n-      then\n+      if Chars (Nam1) in Any_Operator_Name and then Standard_Operator then\n          if        Typ = Universal_Integer\n            or else Typ = Universal_Real\n            or else Typ = Any_Integer\n@@ -2072,7 +2066,7 @@ package body Sem_Type is\n               and then\n                 In_Same_Declaration_List\n                   (Designated_Type (Operand_Type),\n-                     Unit_Declaration_Node (User_Subp))\n+                   Unit_Declaration_Node (User_Subp))\n             then\n                if It2.Nam = Predef_Subp then\n                   return It1;\n@@ -2383,9 +2377,9 @@ package body Sem_Type is\n          Get_First_Interp (N, I, It);\n          while Present (It.Typ) loop\n             if (Covers (Typ, It.Typ)\n-                  and then\n-                    (Scope (It.Nam) /= Standard_Standard\n-                       or else not Is_Invisible_Operator (N, Base_Type (Typ))))\n+                 and then\n+                   (Scope (It.Nam) /= Standard_Standard\n+                     or else not Is_Invisible_Operator (N, Base_Type (Typ))))\n \n                --  Ada 2005 (AI-345)\n "}]}