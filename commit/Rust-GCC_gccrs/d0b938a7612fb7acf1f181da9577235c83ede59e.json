{"sha": "d0b938a7612fb7acf1f181da9577235c83ede59e", "node_id": "C_kwDOANBUbNoAKGQwYjkzOGE3NjEyZmI3YWNmMWYxODFkYTk1NzcyMzVjODNlZGU1OWU", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-23T21:12:29Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-25T14:13:52Z"}, "message": "c++: alignas and alignof void [PR104944]\n\nI started looking into this PR because in GCC 4.9 we were able to\ndetect the invalid\n\n  struct alignas(void) S{};\n\nbut I broke it in r210262.\n\nIt's ill-formed code in C++:\n[dcl.align]/3: \"An alignment-specifier of the form alignas(type-id) has\nthe same effect as alignas(alignof(type-id))\", and [expr.align]/1:\n\"The operand shall be a type-id representing a complete object type,\nor an array thereof, or a reference to one of those types.\" and void\nis not a complete type.\n\nIt's also invalid in C:\n6.7.5: _Alignas(type-name) is equivalent to _Alignas(_Alignof(type-name))\n6.5.3.4: \"The _Alignof operator shall not be applied to a function type\nor an incomplete type.\"\n\nWe have a GNU extension whereby we treat sizeof(void) as 1, but I assume\nit doesn't apply to alignof, at least in C++.  However, __alignof__(void)\nis still accepted with a -Wpedantic warning.\n\nWe still say \"invalid application of 'alignof'\" rather than 'alignas' in the\nvoid diagnostic, but I felt that fixing that may not be suitable as part of\nthis patch.  The \"incomplete type\" diagnostic still always prints\n'__alignof__'.\n\n\tPR c++/104944\n\ngcc/cp/ChangeLog:\n\n\t* typeck.cc (cxx_sizeof_or_alignof_type): Diagnose alignof(void).\n\t(cxx_alignas_expr): Call cxx_sizeof_or_alignof_type with\n\tcomplain == true.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/alignas20.C: New test.", "tree": {"sha": "74058c5a3bce65a7470ade9b3b98773df09c78fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74058c5a3bce65a7470ade9b3b98773df09c78fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b938a7612fb7acf1f181da9577235c83ede59e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b938a7612fb7acf1f181da9577235c83ede59e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b938a7612fb7acf1f181da9577235c83ede59e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b938a7612fb7acf1f181da9577235c83ede59e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8570cce7c705f2ec3ffaeb8e47d58af22a075ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "26a7cb4b50d50ed858c2e0639071a6af7b58b850", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b938a7612fb7acf1f181da9577235c83ede59e/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b938a7612fb7acf1f181da9577235c83ede59e/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=d0b938a7612fb7acf1f181da9577235c83ede59e", "patch": "@@ -1873,9 +1873,9 @@ compparms (const_tree parms1, const_tree parms2)\n }\n \n \f\n-/* Process a sizeof or alignof expression where the operand is a\n-   type. STD_ALIGNOF indicates whether an alignof has C++11 (minimum alignment)\n-   or GNU (preferred alignment) semantics; it is ignored if op is\n+/* Process a sizeof or alignof expression where the operand is a type.\n+   STD_ALIGNOF indicates whether an alignof has C++11 (minimum alignment)\n+   or GNU (preferred alignment) semantics; it is ignored if OP is\n    SIZEOF_EXPR.  */\n \n tree\n@@ -1899,6 +1899,13 @@ cxx_sizeof_or_alignof_type (location_t loc, tree type, enum tree_code op,\n       else\n \treturn error_mark_node;\n     }\n+  else if (VOID_TYPE_P (type) && std_alignof)\n+    {\n+      if (complain)\n+\terror_at (loc, \"invalid application of %qs to a void type\",\n+\t\t  OVL_OP_INFO (false, op)->name);\n+      return error_mark_node;\n+    }\n \n   bool dependent_p = dependent_type_p (type);\n   if (!dependent_p)\n@@ -2132,11 +2139,13 @@ cxx_alignas_expr (tree e)\n     /* [dcl.align]/3:\n        \n \t   When the alignment-specifier is of the form\n-\t   alignas(type-id ), it shall have the same effect as\n-\t   alignas(alignof(type-id )).  */\n+\t   alignas(type-id), it shall have the same effect as\n+\t   alignas(alignof(type-id)).  */\n \n     return cxx_sizeof_or_alignof_type (input_location,\n-\t\t\t\t       e, ALIGNOF_EXPR, true, false);\n+\t\t\t\t       e, ALIGNOF_EXPR,\n+\t\t\t\t       /*std_alignof=*/true,\n+\t\t\t\t       /*complain=*/true);\n   \n   /* If we reach this point, it means the alignas expression if of\n      the form \"alignas(assignment-expression)\", so we should follow"}, {"sha": "01a55f3d4a4470b2a1e016179a6b25f0f755bd30", "filename": "gcc/testsuite/g++.dg/cpp0x/alignas20.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b938a7612fb7acf1f181da9577235c83ede59e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b938a7612fb7acf1f181da9577235c83ede59e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignas20.C?ref=d0b938a7612fb7acf1f181da9577235c83ede59e", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/104944\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wpedantic\" }\n+\n+struct inc;\n+\n+struct alignas(inc) S1 { }; // { dg-error \"invalid application\" }\n+struct alignas(void) S2 { }; // { dg-error \"invalid application\" }\n+\n+template <typename T>\n+struct alignas(T) S4 {}; // { dg-error \"invalid application\" }\n+\n+template <typename T>\n+struct alignas(T) S5 {}; // { dg-error \"invalid application\" }\n+\n+S4<void> s1;\n+S5<inc> s2;\n+\n+void\n+g ()\n+{\n+  auto s1 = alignof(void); // { dg-error \"invalid application\" }\n+  auto s2 = alignof(const void); // { dg-error \"invalid application\" }\n+  auto s3 = __alignof(void); // { dg-warning \"invalid application\" }\n+  auto s4 = alignof(inc); // { dg-error \"invalid application\" }\n+}"}]}