{"sha": "4fedf870f576c5981624c815c140130c76821f0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZlZGY4NzBmNTc2YzU5ODE2MjRjODE1YzE0MDEzMGM3NjgyMWYwZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-08-20T13:21:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-08-20T13:21:41Z"}, "message": "tree-ssa-forwprop.c (forward_propagate_addr_expr_1): More properly handle conversion/copy chains after tuplification.\n\n2008-08-20  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): More\n\tproperly handle conversion/copy chains after tuplification.\n\n\t* gcc.dg/tree-ssa/forwprop-9.c: Scan FRE dump as well.\n\t* gcc.dg/tree-ssa/forwprop-10.c: New testcase.\n\nFrom-SVN: r139288", "tree": {"sha": "4e34041dfa6c8eff66e2f74749338d6e9f6563c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e34041dfa6c8eff66e2f74749338d6e9f6563c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fedf870f576c5981624c815c140130c76821f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fedf870f576c5981624c815c140130c76821f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fedf870f576c5981624c815c140130c76821f0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fedf870f576c5981624c815c140130c76821f0f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6084ae0318f321b9f21af68fe5d5e92b3f13081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6084ae0318f321b9f21af68fe5d5e92b3f13081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6084ae0318f321b9f21af68fe5d5e92b3f13081"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "af90a99ca22ec972ff5f9f52a5e4422e43ce8ea7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fedf870f576c5981624c815c140130c76821f0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fedf870f576c5981624c815c140130c76821f0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fedf870f576c5981624c815c140130c76821f0f", "patch": "@@ -1,3 +1,8 @@\n+2008-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): More\n+\tproperly handle conversion/copy chains after tuplification.\n+\n 2008-08-20  Richard Guenther  <rguenther@suse.de>\n \n \t* passes.c (init_optimization_passes): Move the second"}, {"sha": "36c0c41d6b86c891804c3b0efaaa2fa4dc26af9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fedf870f576c5981624c815c140130c76821f0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fedf870f576c5981624c815c140130c76821f0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4fedf870f576c5981624c815c140130c76821f0f", "patch": "@@ -1,3 +1,8 @@\n+2008-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/forwprop-9.c: Scan FRE dump as well.\n+\t* gcc.dg/tree-ssa/forwprop-10.c: New testcase.\n+\n 2008-08-20  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/20030530-2.c: Scan dom2 dump."}, {"sha": "0b865245a9659497a5358c349529e914cd9cc2bf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-10.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fedf870f576c5981624c815c140130c76821f0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fedf870f576c5981624c815c140130c76821f0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-10.c?ref=4fedf870f576c5981624c815c140130c76821f0f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+int b;\n+unsigned a;\n+\n+static inline int *g(void)\n+{\n+  a = 1;\n+  return (int*)&a;\n+}\n+void test2(void)\n+{\n+  b = *g();\n+}\n+\n+/* The indirect load should be replaced by a load from a and a\n+   conversion to int.  */\n+\n+/* { dg-final { scan-tree-dump \"= a;\" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump \"= \\\\\\(int\\\\\\) \" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-not \"= \\\\\\*\" \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "4469fe7312ed8abcb47656a04e77190efbeb97f3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-9.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fedf870f576c5981624c815c140130c76821f0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fedf870f576c5981624c815c140130c76821f0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-9.c?ref=4fedf870f576c5981624c815c140130c76821f0f", "patch": "@@ -1,6 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-final_cleanup -W -Wall -fno-early-inlining\" } */\n-\n+/* { dg-options \"-O1 -fdump-tree-final_cleanup -fdump-tree-fre -W -Wall -fno-early-inlining\" } */\n \n int b;\n unsigned a;\n@@ -13,6 +12,10 @@ void f(void)\n {\n    b = *g(); \n }\n-/* We should have converted the assignments to two = 1. */\n+\n+/* We should have converted the assignments to two = 1.  FRE does this.  */\n+\n /* { dg-final { scan-tree-dump-times \" = 1\" 2 \"final_cleanup\"} } */\n+/* { dg-final { scan-tree-dump-not \" = a;\" \"fre\"} } */\n+/* { dg-final { cleanup-tree-dump \"fre\" } } */\n /* { dg-final { cleanup-tree-dump \"final_cleanup\" } } */"}, {"sha": "bf860d9075878cbef9c2fc97c505efd875599cca", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fedf870f576c5981624c815c140130c76821f0f/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fedf870f576c5981624c815c140130c76821f0f/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=4fedf870f576c5981624c815c140130c76821f0f", "patch": "@@ -689,15 +689,22 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n      a conversion to def_rhs type separate, though.  */\n   if (TREE_CODE (lhs) == SSA_NAME\n       && ((rhs_code == SSA_NAME && rhs == name)\n-\t  || CONVERT_EXPR_CODE_P (rhs_code))\n-      && useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (def_rhs)))\n+\t  || CONVERT_EXPR_CODE_P (rhs_code)))\n     {\n-      /* Only recurse if we don't deal with a single use.  */\n-      if (!single_use_p)\n+      /* Only recurse if we don't deal with a single use or we cannot\n+\t do the propagation to the current statement.  In particular\n+\t we can end up with a conversion needed for a non-invariant\n+\t address which we cannot do in a single statement.  */\n+      if (!single_use_p\n+\t  || (!useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (def_rhs))\n+\t      && !is_gimple_min_invariant (def_rhs)))\n \treturn forward_propagate_addr_expr (lhs, def_rhs);\n \n       gimple_assign_set_rhs1 (use_stmt, unshare_expr (def_rhs));\n-      gimple_assign_set_rhs_code (use_stmt, TREE_CODE (def_rhs));\n+      if (useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (def_rhs)))\n+\tgimple_assign_set_rhs_code (use_stmt, TREE_CODE (def_rhs));\n+      else\n+\tgimple_assign_set_rhs_code (use_stmt, NOP_EXPR);\n       return true;\n     }\n "}]}