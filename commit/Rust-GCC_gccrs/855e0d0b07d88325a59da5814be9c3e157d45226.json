{"sha": "855e0d0b07d88325a59da5814be9c3e157d45226", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU1ZTBkMGIwN2Q4ODMyNWE1OWRhNTgxNGJlOWMzZTE1N2Q0NTIyNg==", "commit": {"author": {"name": "Steve Ellcey", "email": "sellcey@mips.com", "date": "2013-03-25T23:12:01Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2013-03-25T23:12:01Z"}, "message": "mmips-cpus.def (74kc, [...]): Add PTF_AVOID_IMADD.\n\n2013-03-25  Steve Ellcey  <sellcey@mips.com>\n\n\t* config/mips/mmips-cpus.def (74kc, 74kf2_1, 74kf, 74kf, 74kf1_1,\n\t74kfx, 74kx, 74kf3_2): Add PTF_AVOID_IMADD.\n\t* config/mips/mips.c (mips_option_override): Set IMADD default.\n\t* config/mips/mips.h (PTF_AVOID_IMADD): New.\n\t(ISA_HAS_MADD_MSUB): Remove MIPS16 check.\n\t(GENERATE_MADD_MSUB): Remove TUNE_74K check, add MIPS16 check.\n\t* config/mips/mips.md (mimadd): New flag for integer madd/msub.\n\t* doc/invoke.texi (-mimadd/-mno-imadd): New.\n\nFrom-SVN: r197072", "tree": {"sha": "8840e5195460da8bebf3f6b8d770f613ca1e5b0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8840e5195460da8bebf3f6b8d770f613ca1e5b0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/855e0d0b07d88325a59da5814be9c3e157d45226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855e0d0b07d88325a59da5814be9c3e157d45226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855e0d0b07d88325a59da5814be9c3e157d45226", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855e0d0b07d88325a59da5814be9c3e157d45226/comments", "author": null, "committer": null, "parents": [{"sha": "f02296ddb9d4a183b90600659341baf91436f7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f02296ddb9d4a183b90600659341baf91436f7d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f02296ddb9d4a183b90600659341baf91436f7d9"}], "stats": {"total": 77, "additions": 61, "deletions": 16}, "files": [{"sha": "fbaaaaa6b841768d818c38ed1e4c8ac509b550f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=855e0d0b07d88325a59da5814be9c3e157d45226", "patch": "@@ -1,3 +1,14 @@\n+2013-03-25  Steve Ellcey  <sellcey@mips.com>\n+\n+\t* config/mips/mmips-cpus.def (74kc, 74kf2_1, 74kf, 74kf, 74kf1_1,\n+\t74kfx, 74kx, 74kf3_2): Add PTF_AVOID_IMADD.\n+\t* config/mips/mips.c (mips_option_override): Set IMADD default.\n+\t* config/mips/mips.h (PTF_AVOID_IMADD): New.\n+\t(ISA_HAS_MADD_MSUB): Remove MIPS16 check.\n+\t(GENERATE_MADD_MSUB): Remove TUNE_74K check, add MIPS16 check.\n+\t* config/mips/mips.md (mimadd): New flag for integer madd/msub.\n+\t* doc/invoke.texi (-mimadd/-mno-imadd): New.\n+\n 2013-03-25  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (record_equivalences_from_incoming_edge): Rework"}, {"sha": "9e5fd162189bee06e50723403ae65c368fb9e96d", "filename": "gcc/config/mips/mips-cpus.def", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-cpus.def?ref=855e0d0b07d88325a59da5814be9c3e157d45226", "patch": "@@ -121,13 +121,13 @@ MIPS_CPU (\"34kfx\", PROCESSOR_24KF1_1, 33, 0)\n MIPS_CPU (\"34kx\", PROCESSOR_24KF1_1, 33, 0)\n MIPS_CPU (\"34kn\", PROCESSOR_24KC, 33, 0)  /* 34K with MT but no DSP.  */\n \n-MIPS_CPU (\"74kc\", PROCESSOR_74KC, 33, 0) /* 74K with DSPr2.  */\n-MIPS_CPU (\"74kf2_1\", PROCESSOR_74KF2_1, 33, 0)\n-MIPS_CPU (\"74kf\", PROCESSOR_74KF2_1, 33, 0)\n-MIPS_CPU (\"74kf1_1\", PROCESSOR_74KF1_1, 33, 0)\n-MIPS_CPU (\"74kfx\", PROCESSOR_74KF1_1, 33, 0)\n-MIPS_CPU (\"74kx\", PROCESSOR_74KF1_1, 33, 0)\n-MIPS_CPU (\"74kf3_2\", PROCESSOR_74KF3_2, 33, 0)\n+MIPS_CPU (\"74kc\", PROCESSOR_74KC, 33, PTF_AVOID_IMADD) /* 74K with DSPr2.  */\n+MIPS_CPU (\"74kf2_1\", PROCESSOR_74KF2_1, 33, PTF_AVOID_IMADD)\n+MIPS_CPU (\"74kf\", PROCESSOR_74KF2_1, 33, PTF_AVOID_IMADD)\n+MIPS_CPU (\"74kf1_1\", PROCESSOR_74KF1_1, 33, PTF_AVOID_IMADD)\n+MIPS_CPU (\"74kfx\", PROCESSOR_74KF1_1, 33, PTF_AVOID_IMADD)\n+MIPS_CPU (\"74kx\", PROCESSOR_74KF1_1, 33, PTF_AVOID_IMADD)\n+MIPS_CPU (\"74kf3_2\", PROCESSOR_74KF3_2, 33, PTF_AVOID_IMADD)\n \n MIPS_CPU (\"1004kc\", PROCESSOR_24KC, 33, 0) /* 1004K with MT/DSP.  */\n MIPS_CPU (\"1004kf2_1\", PROCESSOR_24KF2_1, 33, 0)"}, {"sha": "d7a0749b4eecc3b1bc166b873029973c62f271ca", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=855e0d0b07d88325a59da5814be9c3e157d45226", "patch": "@@ -16912,6 +16912,21 @@ mips_option_override (void)\n     warning (0, \"the %qs architecture does not support branch-likely\"\n \t     \" instructions\", mips_arch_info->name);\n \n+  /* If the user hasn't specified -mimadd or -mno-imadd set\n+     MASK_IMADD based on the target architecture and tuning\n+     flags.  */\n+  if ((target_flags_explicit & MASK_IMADD) == 0)\n+    {\n+      if (ISA_HAS_MADD_MSUB &&\n+          (mips_tune_info->tune_flags & PTF_AVOID_IMADD) == 0)\n+\ttarget_flags |= MASK_IMADD;\n+      else\n+\ttarget_flags &= ~MASK_IMADD;\n+    }\n+  else if (TARGET_IMADD && !ISA_HAS_MADD_MSUB)\n+    warning (0, \"the %qs architecture does not support madd or msub\"\n+\t     \" instructions\", mips_arch_info->name);\n+\n   /* The effect of -mabicalls isn't defined for the EABI.  */\n   if (mips_abi == ABI_EABI && TARGET_ABICALLS)\n     {"}, {"sha": "dd694f30e5c677b96912852e5d4acf6c2ec6a751", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=855e0d0b07d88325a59da5814be9c3e157d45226", "patch": "@@ -47,8 +47,15 @@ extern int target_flags_explicit;\n    PTF_AVOID_BRANCHLIKELY\n \tSet if it is usually not profitable to use branch-likely instructions\n \tfor this target, typically because the branches are always predicted\n-\ttaken and so incur a large overhead when not taken.  */\n-#define PTF_AVOID_BRANCHLIKELY 0x1\n+\ttaken and so incur a large overhead when not taken.\n+\n+   PTF_AVOID_IMADD\n+\tSet if it is usually not profitable to use the integer MADD or MSUB\n+\tinstructions because of the overhead of getting the result out of\n+\tthe HI/LO registers.  */\n+\n+#define PTF_AVOID_BRANCHLIKELY\t0x1\n+#define PTF_AVOID_IMADD\t\t0x2\n \n /* Information about one recognized processor.  Defined here for the\n    benefit of TARGET_CPU_CPP_BUILTINS.  */\n@@ -874,14 +881,13 @@ struct mips_cpu_info {\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has integer multiply-accumulate instructions, madd and msub.  */\n-#define ISA_HAS_MADD_MSUB\t((ISA_MIPS32\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64R2)\t\t\t\\\n-\t\t\t\t && !TARGET_MIPS16)\n+#define ISA_HAS_MADD_MSUB\t(ISA_MIPS32\t\t\t\t\\\n+\t\t\t\t || ISA_MIPS32R2\t\t\t\\\n+\t\t\t\t || ISA_MIPS64\t\t\t\t\\\n+\t\t\t\t || ISA_MIPS64R2)\n \n /* Integer multiply-accumulate instructions should be generated.  */\n-#define GENERATE_MADD_MSUB      (ISA_HAS_MADD_MSUB && !TUNE_74K)\n+#define GENERATE_MADD_MSUB\t(TARGET_IMADD && !TARGET_MIPS16)\n \n /* ISA has floating-point madd and msub instructions 'd = a * b [+-] c'.  */\n #define ISA_HAS_FP_MADD4_MSUB4  ISA_HAS_FP4"}, {"sha": "e11710db3c0b0ba9ca0d8353b87173fd1b0d5751", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=855e0d0b07d88325a59da5814be9c3e157d45226", "patch": "@@ -58,6 +58,10 @@ mmad\n Target Report Var(TARGET_MAD)\n Use PMC-style 'mad' instructions\n \n+mimadd\n+Target Report Mask(IMADD)\n+Use integer madd/msub instructions\n+\n march=\n Target RejectNegative Joined Var(mips_arch_option) ToLower Enum(mips_arch_opt_value)\n -march=ISA\tGenerate code for the given ISA"}, {"sha": "3054e5c4c1223cd3ea92e30b8c80d6601bafeb87", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855e0d0b07d88325a59da5814be9c3e157d45226/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=855e0d0b07d88325a59da5814be9c3e157d45226", "patch": "@@ -766,7 +766,7 @@ Objective-C and Objective-C++ Dialects}.\n -mcheck-zero-division  -mno-check-zero-division @gol\n -mdivide-traps  -mdivide-breaks @gol\n -mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls @gol\n--mmad  -mno-mad  -mfused-madd  -mno-fused-madd  -nocpp @gol\n+-mmad -mno-mad -mimadd -mno-imadd -mfused-madd  -mno-fused-madd  -nocpp @gol\n -mfix-24k -mno-fix-24k @gol\n -mfix-r4000  -mno-fix-r4000  -mfix-r4400  -mno-fix-r4400 @gol\n -mfix-r10000 -mno-fix-r10000  -mfix-vr4120  -mno-fix-vr4120 @gol\n@@ -16481,6 +16481,15 @@ This option has no effect on abicalls code.  The default is\n Enable (disable) use of the @code{mad}, @code{madu} and @code{mul}\n instructions, as provided by the R4650 ISA@.\n \n+@item -mimadd\n+@itemx -mno-imadd\n+@opindex mimadd\n+@opindex mno-imadd\n+Enable (disable) use of the @code{madd} and @code{msub} integer\n+instructions.  The default is @option{-mimadd} on architectures\n+that support @code{madd} and @code{msub} except for the 74k \n+architecture where it was found to generate slower code.\n+\n @item -mfused-madd\n @itemx -mno-fused-madd\n @opindex mfused-madd"}]}