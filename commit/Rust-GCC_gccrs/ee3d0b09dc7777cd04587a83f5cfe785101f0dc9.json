{"sha": "ee3d0b09dc7777cd04587a83f5cfe785101f0dc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzZDBiMDlkYzc3NzdjZDA0NTg3YTgzZjVjZmU3ODUxMDFmMGRjOQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-14T18:41:26Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-08-14T18:42:24Z"}, "message": "parse if expression with unary minus or not expression\n\nAn if conditional expression doesn't need brackets, but that means\nthat it doesn't accept struct expressions. Those are not easy to\ndistinquish from the block that follows. What isn't immediately clear\nfrom the grammar is that unary conditions like minus '-' or not '!'\nalso shouldn't accept struct expressions (when part of an if\nconditional expression) because those also cannot be easily\ndistinquished from the block that follows.\n\nAdd a testcase \"ifunaryexpr.rs\" that shows a couple of contructs that\nshould be accepted as if conditional expressions and fix the parser to\npass the restriction of not accepting struct expressions after a unary\nexpression.", "tree": {"sha": "8be58e078de992e2b2743557d747521b27b173ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8be58e078de992e2b2743557d747521b27b173ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee3d0b09dc7777cd04587a83f5cfe785101f0dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3d0b09dc7777cd04587a83f5cfe785101f0dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee3d0b09dc7777cd04587a83f5cfe785101f0dc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3d0b09dc7777cd04587a83f5cfe785101f0dc9/comments", "author": null, "committer": null, "parents": [{"sha": "e53f1acb282a226cd037fd21e587c83f09c2e4af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53f1acb282a226cd037fd21e587c83f09c2e4af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53f1acb282a226cd037fd21e587c83f09c2e4af"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "fa6d409c6dc248c6b93933bab2aed2d8ba70f120", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3d0b09dc7777cd04587a83f5cfe785101f0dc9/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3d0b09dc7777cd04587a83f5cfe785101f0dc9/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=ee3d0b09dc7777cd04587a83f5cfe785101f0dc9", "patch": "@@ -12547,6 +12547,8 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n       case MINUS: { // unary minus\n \tParseRestrictions entered_from_unary;\n \tentered_from_unary.entered_from_unary = true;\n+\tif (!restrictions.can_be_struct_expr)\n+\t  entered_from_unary.can_be_struct_expr = false;\n \tstd::unique_ptr<AST::Expr> expr\n \t  = parse_expr (LBP_UNARY_MINUS, {}, entered_from_unary);\n \n@@ -12571,6 +12573,8 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n       case EXCLAM: { // logical or bitwise not\n \tParseRestrictions entered_from_unary;\n \tentered_from_unary.entered_from_unary = true;\n+\tif (!restrictions.can_be_struct_expr)\n+\t  entered_from_unary.can_be_struct_expr = false;\n \tstd::unique_ptr<AST::Expr> expr\n \t  = parse_expr (LBP_UNARY_EXCLAM, {}, entered_from_unary);\n "}, {"sha": "8f0bb87f558d354100f4abbc5757384c4b7f55a4", "filename": "gcc/testsuite/rust/compile/torture/ifunaryexpr.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3d0b09dc7777cd04587a83f5cfe785101f0dc9/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fifunaryexpr.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3d0b09dc7777cd04587a83f5cfe785101f0dc9/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fifunaryexpr.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fifunaryexpr.rs?ref=ee3d0b09dc7777cd04587a83f5cfe785101f0dc9", "patch": "@@ -0,0 +1,22 @@\n+extern \"C\"\n+{\n+  pub fn abort ();\n+}\n+\n+struct B { b: bool }\n+\n+pub fn main ()\n+{\n+  let n = 1;\n+  if 0 > -n { } else { unsafe { abort (); } }\n+\n+  let b = true;\n+  if !b { unsafe { abort (); } }\n+  if !!b { } else { unsafe { abort (); } }\n+\n+  let bb = B { b: false };\n+\n+  if !bb.b && !b { unsafe { abort (); } }\n+\n+  if (B { b: true }).b { } else { unsafe { abort (); } }\n+}"}]}