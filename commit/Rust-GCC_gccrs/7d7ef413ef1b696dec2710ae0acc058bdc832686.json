{"sha": "7d7ef413ef1b696dec2710ae0acc058bdc832686", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3ZWY0MTNlZjFiNjk2ZGVjMjcxMGFlMGFjYzA1OGJkYzgzMjY4Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-13T15:54:02Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-13T16:22:34Z"}, "message": "gcc-changelog: Support multiline parentheses wrapping\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_commit.py: Support wrapping of functions\n\tin parentheses that can take multiple lines.\n\t* gcc-changelog/test_email.py: Add tests for it.\n\t* gcc-changelog/test_patches.txt: Add 2 patches.", "tree": {"sha": "cbd67f1633c8d462bcf5fa097c2fb65704dc196a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbd67f1633c8d462bcf5fa097c2fb65704dc196a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d7ef413ef1b696dec2710ae0acc058bdc832686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7ef413ef1b696dec2710ae0acc058bdc832686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7ef413ef1b696dec2710ae0acc058bdc832686", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7ef413ef1b696dec2710ae0acc058bdc832686/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285fa338b06b804e72997c4d876ecf08a9c083af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285fa338b06b804e72997c4d876ecf08a9c083af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285fa338b06b804e72997c4d876ecf08a9c083af"}], "stats": {"total": 102, "additions": 100, "deletions": 2}, "files": [{"sha": "e9dae0a838de5f6080e5f1cb608dcc50247c3f80", "filename": "contrib/gcc-changelog/git_commit.py", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7ef413ef1b696dec2710ae0acc058bdc832686/contrib%2Fgcc-changelog%2Fgit_commit.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7ef413ef1b696dec2710ae0acc058bdc832686/contrib%2Fgcc-changelog%2Fgit_commit.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_commit.py?ref=7d7ef413ef1b696dec2710ae0acc058bdc832686", "patch": "@@ -214,6 +214,7 @@ def __init__(self, folder, authors, prs):\n         self.lines = []\n         self.files = []\n         self.file_patterns = []\n+        self.opened_parentheses = 0\n \n     def parse_file_names(self):\n         # Whether the content currently processed is between a star prefix the\n@@ -223,8 +224,14 @@ def parse_file_names(self):\n         for line in self.lines:\n             # If this line matches the star prefix, start the location\n             # processing on the information that follows the star.\n+            # Note that we need to skip macro names that can be in form of:\n+            #\n+            # * config/i386/i386.md (*fix_trunc<mode>_i387_1,\n+            # *add<mode>3_ne, *add<mode>3_eq_0, *add<mode>3_ne_0,\n+            # *fist<mode>2_<rounding>_1, *<code><mode>3_1):\n+            #\n             m = star_prefix_regex.match(line)\n-            if m:\n+            if m and len(m.group('spaces')) == 1:\n                 in_location = True\n                 line = m.group('content')\n \n@@ -328,6 +335,7 @@ def __init__(self, info, strict=True, commit_to_info_hook=None):\n             self.parse_changelog()\n             self.parse_file_names()\n             self.check_for_empty_description()\n+            self.check_for_broken_parentheses()\n             self.deduce_changelog_locations()\n             self.check_file_patterns()\n             if not self.errors:\n@@ -496,7 +504,8 @@ def parse_changelog(self):\n                 else:\n                     m = star_prefix_regex.match(line)\n                     if m:\n-                        if len(m.group('spaces')) != 1:\n+                        if (len(m.group('spaces')) != 1 and\n+                                last_entry.opened_parentheses == 0):\n                             msg = 'one space should follow asterisk'\n                             self.errors.append(Error(msg, line))\n                         else:\n@@ -508,13 +517,26 @@ def parse_changelog(self):\n                                         msg = f'empty group \"{needle}\" found'\n                                         self.errors.append(Error(msg, line))\n                             last_entry.lines.append(line)\n+                            self.process_parentheses(last_entry, line)\n                     else:\n                         if last_entry.is_empty:\n                             msg = 'first line should start with a tab, ' \\\n                                   'an asterisk and a space'\n                             self.errors.append(Error(msg, line))\n                         else:\n                             last_entry.lines.append(line)\n+                            self.process_parentheses(last_entry, line)\n+\n+    def process_parentheses(self, last_entry, line):\n+        for c in line:\n+            if c == '(':\n+                last_entry.opened_parentheses += 1\n+            elif c == ')':\n+                if last_entry.opened_parentheses == 0:\n+                    msg = 'bad wrapping of parenthesis'\n+                    self.errors.append(Error(msg, line))\n+                else:\n+                    last_entry.opened_parentheses -= 1\n \n     def parse_file_names(self):\n         for entry in self.changelog_entries:\n@@ -538,6 +560,12 @@ def check_for_empty_description(self):\n                     msg = 'missing description of a change'\n                     self.errors.append(Error(msg, line))\n \n+    def check_for_broken_parentheses(self):\n+        for entry in self.changelog_entries:\n+            if entry.opened_parentheses != 0:\n+                msg = 'bad parentheses wrapping'\n+                self.errors.append(Error(msg, entry.lines[0]))\n+\n     def get_file_changelog_location(self, changelog_file):\n         for file in self.info.modified_files:\n             if file[0] == changelog_file:"}, {"sha": "b81548f2033d8e2424edc365754a967d50985ddb", "filename": "contrib/gcc-changelog/test_email.py", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7ef413ef1b696dec2710ae0acc058bdc832686/contrib%2Fgcc-changelog%2Ftest_email.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7ef413ef1b696dec2710ae0acc058bdc832686/contrib%2Fgcc-changelog%2Ftest_email.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_email.py?ref=7d7ef413ef1b696dec2710ae0acc058bdc832686", "patch": "@@ -408,3 +408,11 @@ def test_bad_unicode_chars_in_filename(self):\n     def test_modification_of_old_changelog(self):\n         email = self.from_patch_glob('0001-fix-old-ChangeLog.patch')\n         assert not email.errors\n+\n+    def test_multiline_parentheses(self):\n+        email = self.from_patch_glob('0001-Add-macro.patch')\n+        assert not email.errors\n+\n+    def test_multiline_bad_parentheses(self):\n+        email = self.from_patch_glob('0002-Wrong-macro-changelog.patch')\n+        assert email.errors[0].message == 'bad parentheses wrapping'"}, {"sha": "9de2897255640707833b5ce62cf286f288c9e69a", "filename": "contrib/gcc-changelog/test_patches.txt", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7ef413ef1b696dec2710ae0acc058bdc832686/contrib%2Fgcc-changelog%2Ftest_patches.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7ef413ef1b696dec2710ae0acc058bdc832686/contrib%2Fgcc-changelog%2Ftest_patches.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Ftest_patches.txt?ref=7d7ef413ef1b696dec2710ae0acc058bdc832686", "patch": "@@ -3418,4 +3418,66 @@ index 6553720acad..2c170ef014a 100644\n  \n -- \n 2.29.2\n+=== 0001-Add-macro.patch ===\n+From 9b7eedc932fe594547fb060b36dfd9e4178c4f9b Mon Sep 17 00:00:00 2001\n+From: Martin Liska <mliska@suse.cz>\n+Date: Wed, 13 Jan 2021 16:26:45 +0100\n+Subject: [PATCH 1/2] Add macro.\n+\n+gcc/ChangeLog:\n+\n+\t* config/i386/i386.md (*fix_trunc<mode>_i387_1, *add<mode>3_eq,\n+\t*add<mode>3_ne, *add<mode>3_eq_0, *add<mode>3_ne_0, *add<mode>3_eq,\n+\t*fist<mode>2_<rounding>_1, *<code><mode>3_1, *<code>di3_doubleword):\n+\tUse ix86_pre_reload_split instead of can_create_pseudo_p in condition.\n+\t* config/i386/sse.md\n+\t(*fix_trunc<mode>_i387_1, *add<mode>3_eq,\n+\t*add<mode>3_ne, *add<mode>3_eq_0, *add<mode>3_ne_0, *add<mode>3_eq,\n+\t*fist<mode>2_<rounding>_1): This should also work.\n+---\n+ gcc/config/i386/i386.md | 1 +\n+ gcc/config/i386/sse.md  | 1 +\n+ 2 files changed, 2 insertions(+)\n \n+diff --git a/gcc/config/i386/i386.md b/gcc/config/i386/i386.md\n+index b60784a2908..ac63591b33f 100644\n+--- a/gcc/config/i386/i386.md\n++++ b/gcc/config/i386/i386.md\n+@@ -1 +1,2 @@\n+ \n++\n+\n+diff --git a/gcc/config/i386/sse.md b/gcc/config/i386/sse.md\n+index 7f03fc491c3..0e17997db26 100644\n+--- a/gcc/config/i386/sse.md\n++++ b/gcc/config/i386/sse.md\n+@@ -1 +1,2 @@\n+ \n++\n+\n+-- \n+2.29.2\n+\n+=== 0002-Wrong-macro-changelog.patch ===\n+From 3542802111d4c6752ac7233ef96655b7fb78aae4 Mon Sep 17 00:00:00 2001\n+From: Martin Liska <mliska@suse.cz>\n+Date: Wed, 13 Jan 2021 16:54:58 +0100\n+Subject: [PATCH 2/2] Wrong macro changelog\n+\n+gcc/ChangeLog:\n+\n+\t* config/i386/i386.md (*fix_trunc<mode>_i387_1,\n+\t(foo): Change it.\n+---\n+ gcc/config/i386/i386.md | 1 +\n+ 1 file changed, 1 insertion(+)\n+\n+diff --git a/gcc/config/i386/i386.md b/gcc/config/i386/i386.md\n+index ac63591b33f..ff4d61764e7 100644\n+--- a/gcc/config/i386/i386.md\n++++ b/gcc/config/i386/i386.md\n+@@ -1 +1,2 @@\n+ \n++\n+-- \n+2.29.2"}]}