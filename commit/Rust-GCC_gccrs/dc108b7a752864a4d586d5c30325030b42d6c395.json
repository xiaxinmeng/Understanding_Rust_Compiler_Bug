{"sha": "dc108b7a752864a4d586d5c30325030b42d6c395", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMxMDhiN2E3NTI4NjRhNGQ1ODZkNWMzMDMyNTAzMGI0MmQ2YzM5NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-04-07T09:22:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-07T09:22:10Z"}, "message": "basic-block.h (merge_blocks_nomove): Declare.\n\n        * basic-block.h (merge_blocks_nomove): Declare.\n        (tidy_fallthru_edge): Declare.\n        * flow.c (merge_blocks_nomove): Document as merging into previous\n        blocks.  Remove cruft from between blocks; remove all edges out of A.\n        (tidy_fallthru_edge): Export.\n\nFrom-SVN: r32994", "tree": {"sha": "e9ce53be6b335cccddd6f48585704963508842b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9ce53be6b335cccddd6f48585704963508842b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc108b7a752864a4d586d5c30325030b42d6c395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc108b7a752864a4d586d5c30325030b42d6c395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc108b7a752864a4d586d5c30325030b42d6c395", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc108b7a752864a4d586d5c30325030b42d6c395/comments", "author": null, "committer": null, "parents": [{"sha": "1e143002cbb4f70c6cfe87bd4cab1bd3aa539184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e143002cbb4f70c6cfe87bd4cab1bd3aa539184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e143002cbb4f70c6cfe87bd4cab1bd3aa539184"}], "stats": {"total": 208, "additions": 115, "deletions": 93}, "files": [{"sha": "04b20048c2e4c205e50f99cfe8efa274ef1be8d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc108b7a752864a4d586d5c30325030b42d6c395/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc108b7a752864a4d586d5c30325030b42d6c395/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc108b7a752864a4d586d5c30325030b42d6c395", "patch": "@@ -1,3 +1,11 @@\n+2000-04-07  Richard Henderson  <rth@cygnus.com>\n+\n+\t* basic-block.h (merge_blocks_nomove): Declare.\n+\t(tidy_fallthru_edge): Declare.\n+\t* flow.c (merge_blocks_nomove): Document as merging into previous\n+\tblocks.  Remove cruft from between blocks; remove all edges out of A.\n+\t(tidy_fallthru_edge): Export.\n+\n 2000-04-06  Alex Samuel  <samuel@codesourcery.com>\n \n \t* ssa.c (compute_conservative_reg_partition): Declare with"}, {"sha": "e59c16e6a76751353675e0f6e02288cdbbb6c22e", "filename": "gcc/basic-block.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc108b7a752864a4d586d5c30325030b42d6c395/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc108b7a752864a4d586d5c30325030b42d6c395/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=dc108b7a752864a4d586d5c30325030b42d6c395", "patch": "@@ -231,7 +231,9 @@ extern void make_edge\t\t\tPARAMS ((sbitmap *, basic_block,\n \t\t\t\t\t\t basic_block, int));\n extern void remove_edge\t\t\tPARAMS ((edge));\n extern void create_basic_block\t\tPARAMS ((int, rtx, rtx, rtx));\n-\n+extern void merge_blocks_nomove\t\tPARAMS ((basic_block, basic_block));\n+extern void tidy_fallthru_edge\t\tPARAMS ((edge, basic_block,\n+\t\t\t\t\t\t basic_block));\n \n /* Structure to hold information for each natural loop.  */\n struct loop"}, {"sha": "4dc9624b7d26f58222013cada034af02026648a2", "filename": "gcc/flow.c", "status": "modified", "additions": 104, "deletions": 92, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc108b7a752864a4d586d5c30325030b42d6c395/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc108b7a752864a4d586d5c30325030b42d6c395/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=dc108b7a752864a4d586d5c30325030b42d6c395", "patch": "@@ -302,10 +302,8 @@ static int merge_blocks_move_predecessor_nojumps PARAMS ((basic_block,\n \t\t\t\t\t\t\t  basic_block));\n static int merge_blocks_move_successor_nojumps PARAMS ((basic_block,\n \t\t\t\t\t\t\tbasic_block));\n-static void merge_blocks_nomove\t\tPARAMS ((basic_block, basic_block));\n static int merge_blocks\t\t\tPARAMS ((edge,basic_block,basic_block));\n static void try_merge_blocks\t\tPARAMS ((void));\n-static void tidy_fallthru_edge\t\tPARAMS ((edge,basic_block,basic_block));\n static void tidy_fallthru_edges\t\tPARAMS ((void));\n static int verify_wide_reg_1\t\tPARAMS ((rtx *, void *));\n static void verify_wide_reg\t\tPARAMS ((int, rtx, rtx));\n@@ -2032,6 +2030,109 @@ can_delete_label_p (label)\n   return 1;\n }\n \n+/* Blocks A and B are to be merged into a single block A.  The insns\n+   are already contiguous, hence `nomove'.  */\n+\n+void\n+merge_blocks_nomove (a, b)\n+     basic_block a, b;\n+{\n+  edge e;\n+  rtx b_head, b_end, a_end;\n+  rtx del_first = NULL_RTX, del_last = NULL_RTX;\n+  int b_empty = 0;\n+\n+  /* If there was a CODE_LABEL beginning B, delete it.  */\n+  b_head = b->head;\n+  b_end = b->end;\n+  if (GET_CODE (b_head) == CODE_LABEL)\n+    {\n+      /* Detect basic blocks with nothing but a label.  This can happen\n+\t in particular at the end of a function.  */\n+      if (b_head == b_end)\n+\tb_empty = 1;\n+      del_first = del_last = b_head;\n+      b_head = NEXT_INSN (b_head);\n+    }\n+\n+  /* Delete the basic block note.  */\n+  if (GET_CODE (b_head) == NOTE \n+      && NOTE_LINE_NUMBER (b_head) == NOTE_INSN_BASIC_BLOCK)\n+    {\n+      if (b_head == b_end)\n+\tb_empty = 1;\n+      if (! del_last)\n+\tdel_first = b_head;\n+      del_last = b_head;\n+      b_head = NEXT_INSN (b_head);\n+    }\n+\n+  /* If there was a jump out of A, delete it.  */\n+  a_end = a->end;\n+  if (GET_CODE (a_end) == JUMP_INSN)\n+    {\n+      rtx prev;\n+\n+      prev = prev_nonnote_insn (a_end);\n+      if (!prev) \n+\tprev = a->head;\n+\n+      del_first = a_end;\n+\n+#ifdef HAVE_cc0\n+      /* If this was a conditional jump, we need to also delete\n+\t the insn that set cc0.  */\n+      if (prev && sets_cc0_p (prev))\n+\t{\n+          rtx tmp = prev;\n+\t  prev = prev_nonnote_insn (prev);\n+\t  if (!prev)\n+\t    prev = a->head;\n+\t  del_first = tmp;\n+\t}\n+#endif\n+\n+      a_end = prev;\n+    }\n+\n+  /* Delete everything marked above as well as crap that might be\n+     hanging out between the two blocks.  */\n+  flow_delete_insn_chain (del_first, del_last);\n+\n+  /* Normally there should only be one successor of A and that is B, but\n+     partway though the merge of blocks for conditional_execution we'll\n+     be merging a TEST block with THEN and ELSE successors.  Free the\n+     whole lot of them and hope the caller knows what they're doing.  */\n+  while (a->succ)\n+    remove_edge (a->succ);\n+\n+  /* Adjust the edges out of B for the new owner.  */\n+  for (e = b->succ; e ; e = e->succ_next)\n+    e->src = a;\n+  a->succ = b->succ;\n+\n+  /* B hasn't quite yet ceased to exist.  Attempt to prevent mishap.  */\n+  b->pred = b->succ = NULL;\n+\n+  /* Reassociate the insns of B with A.  */\n+  if (!b_empty)\n+    {\n+      if (basic_block_for_insn)\n+\t{\n+\t  BLOCK_FOR_INSN (b_head) = a;\n+\t  while (b_head != b_end)\n+\t    {\n+\t      b_head = NEXT_INSN (b_head);\n+\t      BLOCK_FOR_INSN (b_head) = a;\n+\t    }\n+\t}\n+      a_end = b_end;\n+    }\n+  a->end = a_end;\n+\n+  expunge_block (b);\n+}\n+\n /* Blocks A and B are to be merged into a single block.  A has no incoming\n    fallthru edge, so it can be moved before B without adding or modifying\n    any jumps (aside from the jump from A to B).  */\n@@ -2145,95 +2246,6 @@ merge_blocks_move_successor_nojumps (a, b)\n   return 1;\n }\n \n-/* Blocks A and B are to be merged into a single block.  The insns\n-   are already contiguous, hence `nomove'.  */\n-\n-static void\n-merge_blocks_nomove (a, b)\n-     basic_block a, b;\n-{\n-  edge e;\n-  rtx b_head, b_end, a_end;\n-  int b_empty = 0;\n-\n-  /* If there was a CODE_LABEL beginning B, delete it.  */\n-  b_head = b->head;\n-  b_end = b->end;\n-  if (GET_CODE (b_head) == CODE_LABEL)\n-    {\n-      /* Detect basic blocks with nothing but a label.  This can happen\n-\t in particular at the end of a function.  */\n-      if (b_head == b_end)\n-\tb_empty = 1;\n-      b_head = flow_delete_insn (b_head);\n-    }\n-\n-  /* Delete the basic block note.  */\n-  if (GET_CODE (b_head) == NOTE \n-      && NOTE_LINE_NUMBER (b_head) == NOTE_INSN_BASIC_BLOCK)\n-    {\n-      if (b_head == b_end)\n-\tb_empty = 1;\n-      b_head = flow_delete_insn (b_head);\n-    }\n-\n-  /* If there was a jump out of A, delete it.  */\n-  a_end = a->end;\n-  if (GET_CODE (a_end) == JUMP_INSN)\n-    {\n-      rtx prev;\n-\n-      prev = prev_nonnote_insn (a_end);\n-      if (!prev) \n-\tprev = a->head;\n-\n-#ifdef HAVE_cc0\n-      /* If this was a conditional jump, we need to also delete\n-\t the insn that set cc0.  */\n-\n-      if (prev && sets_cc0_p (prev))\n-\t{\n-          rtx tmp = prev;\n-\t  prev = prev_nonnote_insn (prev);\n-\t  if (!prev)\n-\t    prev = a->head;\n-\t  flow_delete_insn (tmp);\n-\t}\n-#endif\n-\n-      /* Note that a->head != a->end, since we should have at least a\n-\t bb note plus the jump, so prev != insn.  */\n-      flow_delete_insn (a_end);\n-      a_end = prev;\n-    }\n-\n-  /* By definition, there should only be one successor of A, and that is\n-     B.  Free that edge struct.  */\n-  n_edges--;\n-  free (a->succ);\n-\n-  /* Adjust the edges out of B for the new owner.  */\n-  for (e = b->succ; e ; e = e->succ_next)\n-    e->src = a;\n-  a->succ = b->succ;\n-\n-  /* Reassociate the insns of B with A.  */\n-  if (!b_empty)\n-    {\n-      BLOCK_FOR_INSN (b_head) = a;\n-      while (b_head != b_end)\n-\t{\n-\t  b_head = NEXT_INSN (b_head);\n-\t  BLOCK_FOR_INSN (b_head) = a;\n-\t}\n-      a_end = b_head;\n-    }\n-  a->end = a_end;\n-  \n-  /* Compact the basic block array.  */\n-  expunge_block (b);\n-}\n-\n /* Attempt to merge basic blocks that are potentially non-adjacent.  \n    Return true iff the attempt succeeded.  */\n \n@@ -2366,7 +2378,7 @@ try_merge_blocks ()\n /* The given edge should potentially be a fallthru edge.  If that is in\n    fact true, delete the jump and barriers that are in the way.  */\n \n-static void\n+void\n tidy_fallthru_edge (e, b, c)\n      edge e;\n      basic_block b, c;"}]}