{"sha": "cb460086e1601d7ed22a2d911adede51c945c66f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I0NjAwODZlMTYwMWQ3ZWQyMmEyZDkxMWFkZWRlNTFjOTQ1YzY2Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-19T12:32:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-19T12:32:15Z"}, "message": "re PR tree-optimization/61184 (wrong code (that hangs) by LTO on x86_64-linux-gnu)\n\n2014-05-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61184\n\t* tree-vrp.c (is_negative_overflow_infinity): Use\n\tTREE_OVERFLOW_P and do that check first.\n\t(is_positive_overflow_infinity): Likewise.\n\t(is_overflow_infinity): Likewise.\n\t(vrp_operand_equal_p): Properly treat operands with\n\tdiffering overflow as not equal.\n\n\t* c-c++-common/torture/pr61184.c: New testcase.\n\nFrom-SVN: r210611", "tree": {"sha": "0b8d0d40a0143aea6a4ad6d72a1dec5c6706684e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b8d0d40a0143aea6a4ad6d72a1dec5c6706684e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb460086e1601d7ed22a2d911adede51c945c66f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb460086e1601d7ed22a2d911adede51c945c66f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb460086e1601d7ed22a2d911adede51c945c66f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb460086e1601d7ed22a2d911adede51c945c66f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bddd36713d1282de8544c94d76601bd3e83cb07a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bddd36713d1282de8544c94d76601bd3e83cb07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bddd36713d1282de8544c94d76601bd3e83cb07a"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "c69a30cff516fe0dad401dbafceca6cef79b47e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb460086e1601d7ed22a2d911adede51c945c66f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb460086e1601d7ed22a2d911adede51c945c66f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb460086e1601d7ed22a2d911adede51c945c66f", "patch": "@@ -1,3 +1,13 @@\n+2014-05-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61184\n+\t* tree-vrp.c (is_negative_overflow_infinity): Use\n+\tTREE_OVERFLOW_P and do that check first.\n+\t(is_positive_overflow_infinity): Likewise.\n+\t(is_overflow_infinity): Likewise.\n+\t(vrp_operand_equal_p): Properly treat operands with\n+\tdiffering overflow as not equal.\n+\n 2014-05-19  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* simplify-rtx.c (simplify_unary_operation_1): Use CONST_INT_P in"}, {"sha": "d731eb91da3a2258f9a629f6b9b09e4d7a540ec3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb460086e1601d7ed22a2d911adede51c945c66f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb460086e1601d7ed22a2d911adede51c945c66f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb460086e1601d7ed22a2d911adede51c945c66f", "patch": "@@ -1,3 +1,8 @@\n+2014-05-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61184\n+\t* c-c++-common/torture/pr61184.c: New testcase.\n+\n 2014-05-19  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/61195"}, {"sha": "83117b9cfb09404509aae1d1b2784454f77790b8", "filename": "gcc/testsuite/c-c++-common/torture/pr61184.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb460086e1601d7ed22a2d911adede51c945c66f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr61184.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb460086e1601d7ed22a2d911adede51c945c66f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr61184.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fpr61184.c?ref=cb460086e1601d7ed22a2d911adede51c945c66f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-fno-strict-overflow\" } */\n+\n+short a; \n+\n+void\n+foo (void)\n+{\n+  for (a = 0; a >= 0; a++)\n+    ;\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  return 0;\n+}"}, {"sha": "7f0489f3c255d59b76c863c6ffa9319a3e219b5d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb460086e1601d7ed22a2d911adede51c945c66f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb460086e1601d7ed22a2d911adede51c945c66f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=cb460086e1601d7ed22a2d911adede51c945c66f", "patch": "@@ -293,9 +293,8 @@ positive_overflow_infinity (tree type)\n static inline bool\n is_negative_overflow_infinity (const_tree val)\n {\n-  return (needs_overflow_infinity (TREE_TYPE (val))\n-\t  && CONSTANT_CLASS_P (val)\n-\t  && TREE_OVERFLOW (val)\n+  return (TREE_OVERFLOW_P (val)\n+\t  && needs_overflow_infinity (TREE_TYPE (val))\n \t  && vrp_val_is_min (val));\n }\n \n@@ -304,9 +303,8 @@ is_negative_overflow_infinity (const_tree val)\n static inline bool\n is_positive_overflow_infinity (const_tree val)\n {\n-  return (needs_overflow_infinity (TREE_TYPE (val))\n-\t  && CONSTANT_CLASS_P (val)\n-\t  && TREE_OVERFLOW (val)\n+  return (TREE_OVERFLOW_P (val)\n+\t  && needs_overflow_infinity (TREE_TYPE (val))\n \t  && vrp_val_is_max (val));\n }\n \n@@ -315,9 +313,8 @@ is_positive_overflow_infinity (const_tree val)\n static inline bool\n is_overflow_infinity (const_tree val)\n {\n-  return (needs_overflow_infinity (TREE_TYPE (val))\n-\t  && CONSTANT_CLASS_P (val)\n-\t  && TREE_OVERFLOW (val)\n+  return (TREE_OVERFLOW_P (val)\n+\t  && needs_overflow_infinity (TREE_TYPE (val))\n \t  && (vrp_val_is_min (val) || vrp_val_is_max (val)));\n }\n \n@@ -791,9 +788,7 @@ vrp_operand_equal_p (const_tree val1, const_tree val2)\n     return true;\n   if (!val1 || !val2 || !operand_equal_p (val1, val2, 0))\n     return false;\n-  if (is_overflow_infinity (val1))\n-    return is_overflow_infinity (val2);\n-  return true;\n+  return is_overflow_infinity (val1) == is_overflow_infinity (val2);\n }\n \n /* Return true, if the bitmaps B1 and B2 are equal.  */"}]}