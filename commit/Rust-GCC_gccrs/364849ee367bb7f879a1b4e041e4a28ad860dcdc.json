{"sha": "364849ee367bb7f879a1b4e041e4a28ad860dcdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY0ODQ5ZWUzNjdiYjdmODc5YTFiNGUwNDFlNGEyOGFkODYwZGNkYw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-03-01T22:23:28Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-03-01T22:23:28Z"}, "message": "rs6000.md (cceq splitter): Use operand mode, not CCEQ mode for branch_positive_comparison_operator test.\n\n\t* config/rs6000/rs6000.md (cceq splitter): Use operand mode, not\n\tCCEQ mode for branch_positive_comparison_operator test.\n\t* config/rs6000/predicates (branch_comparison_operator): Revert to\n\tdefine_predicate.\n\t(scc_comparison_operator): Same.\n\t(branch_positive_comparison_operator): Same.\n\nFrom-SVN: r95755", "tree": {"sha": "b0034a9a14af46b7741841ccd4f8acc4b7da5898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0034a9a14af46b7741841ccd4f8acc4b7da5898"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/364849ee367bb7f879a1b4e041e4a28ad860dcdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364849ee367bb7f879a1b4e041e4a28ad860dcdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/364849ee367bb7f879a1b4e041e4a28ad860dcdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364849ee367bb7f879a1b4e041e4a28ad860dcdc/comments", "author": null, "committer": null, "parents": [{"sha": "b6c8b4129734ba64712dfbbf66e6f8392a694148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c8b4129734ba64712dfbbf66e6f8392a694148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6c8b4129734ba64712dfbbf66e6f8392a694148"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "d4309b595031ee908c1a85c5b9fd4e1e7beaf842", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364849ee367bb7f879a1b4e041e4a28ad860dcdc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364849ee367bb7f879a1b4e041e4a28ad860dcdc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=364849ee367bb7f879a1b4e041e4a28ad860dcdc", "patch": "@@ -1,3 +1,12 @@\n+2005-03-01  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (cceq splitter): Use operand mode, not\n+\tCCEQ mode for branch_positive_comparison_operator test.\n+\t* config/rs6000/predicates (branch_comparison_operator): Revert to\n+\tdefine_predicate.\n+\t(scc_comparison_operator): Same.\n+\t(branch_positive_comparison_operator): Same.\n+\n 2005-03-01  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.c (cris_eligible_for_epilogue_delay)"}, {"sha": "10e12af99fe753914d2e8cec80b78d54919a0c79", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364849ee367bb7f879a1b4e041e4a28ad860dcdc/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364849ee367bb7f879a1b4e041e4a28ad860dcdc/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=364849ee367bb7f879a1b4e041e4a28ad860dcdc", "patch": "@@ -678,7 +678,7 @@\n \n ;; Return 1 if OP is a comparison operation that is valid for a branch\n ;; instruction.  We only check the opcode against the mode of the CC value.\n-(define_special_predicate \"branch_comparison_operator\"\n+(define_predicate \"branch_comparison_operator\"\n   (match_code \"eq,ne,le,lt,ge,gt,leu,ltu,geu,gtu,unordered,ordered,unge,unle\")\n {\n   enum rtx_code code = GET_CODE (op);\n@@ -698,13 +698,13 @@\n \n ;; Return 1 if OP is a comparison operation that is valid for an SCC insn --\n ;; it must be a positive comparison.\n-(define_special_predicate \"scc_comparison_operator\"\n+(define_predicate \"scc_comparison_operator\"\n   (and (match_code \"eq,lt,gt,ltu,gtu,unordered\")\n        (match_operand 0 \"branch_comparison_operator\")))\n \n ;; Return 1 if OP is a comparison operation that is valid for a branch\n ;; insn, which is true if the corresponding bit in the CC register is set.\n-(define_special_predicate \"branch_positive_comparison_operator\"\n+(define_predicate \"branch_positive_comparison_operator\"\n   (and (match_code \"eq,lt,gt,ltu,gtu,unordered\")\n        (match_operand 0 \"branch_comparison_operator\")))\n "}, {"sha": "0d1456c892a857a985f49ddc7a7d4da75557d0eb", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364849ee367bb7f879a1b4e041e4a28ad860dcdc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364849ee367bb7f879a1b4e041e4a28ad860dcdc/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=364849ee367bb7f879a1b4e041e4a28ad860dcdc", "patch": "@@ -13955,8 +13955,10 @@\n {\n   int positive_1, positive_2;\n \n-  positive_1 = branch_positive_comparison_operator (operands[1], CCEQmode);\n-  positive_2 = branch_positive_comparison_operator (operands[3], CCEQmode);\n+  positive_1 = branch_positive_comparison_operator (operands[1],\n+\t\t\t\t\t\t    GET_MODE (operands[1]));\n+  positive_2 = branch_positive_comparison_operator (operands[3],\n+\t\t\t\t\t\t    GET_MODE (operands[3]));\n \n   if (! positive_1)\n     operands[1] = gen_rtx_fmt_ee (rs6000_reverse_condition (GET_MODE (operands[2]),"}]}