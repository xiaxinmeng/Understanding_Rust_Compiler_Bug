{"sha": "eb69a49c4d3287e797e0d6279186221354905fe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2OWE0OWM0ZDMyODdlNzk3ZTBkNjI3OTE4NjIyMTM1NDkwNWZlMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-03T08:07:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-03T08:10:29Z"}, "message": "lra-constraints: Fix error-recovery for bad inline-asms [PR97971]\n\nThe following testcase has ice-on-invalid, it can't be reloaded, but we\nshouldn't ICE the compiler because the user typed non-sense.\n\nIn current_insn_transform we have:\n  if (process_alt_operands (reused_alternative_num))\n    alt_p = true;\n\n  if (check_only_p)\n    return ! alt_p || best_losers != 0;\n\n  /* If insn is commutative (it's safe to exchange a certain pair of\n     operands) then we need to try each alternative twice, the second\n     time matching those two operands as if we had exchanged them.  To\n     do this, really exchange them in operands.\n\n     If we have just tried the alternatives the second time, return\n     operands to normal and drop through.  */\n\n  if (reused_alternative_num < 0 && commutative >= 0)\n    {\n      curr_swapped = !curr_swapped;\n      if (curr_swapped)\n        {\n          swap_operands (commutative);\n          goto try_swapped;\n        }\n      else\n        swap_operands (commutative);\n    }\n\n  if (! alt_p && ! sec_mem_p)\n    {\n      /* No alternative works with reloads??  */\n      if (INSN_CODE (curr_insn) >= 0)\n        fatal_insn (\"unable to generate reloads for:\", curr_insn);\n      error_for_asm (curr_insn,\n                     \"inconsistent operand constraints in an %<asm%>\");\n      lra_asm_error_p = true;\n...\nand so handle inline asms there differently (and delete/nullify them after\nthis) - fatal_insn is only called for non-inline asm.\nBut in process_alt_operands we do:\n                /* Both the earlyclobber operand and conflicting operand\n                   cannot both be user defined hard registers.  */\n                if (HARD_REGISTER_P (operand_reg[i])\n                    && REG_USERVAR_P (operand_reg[i])\n                    && operand_reg[j] != NULL_RTX\n                    && HARD_REGISTER_P (operand_reg[j])\n                    && REG_USERVAR_P (operand_reg[j]))\n                  fatal_insn (\"unable to generate reloads for \"\n                              \"impossible constraints:\", curr_insn);\nand thus ICE even for inline-asms.\n\nI think it is inappropriate to delete/nullify the insn in\nprocess_alt_operands, as it could be done e.g. in the check_only_p mode,\nso this patch just returns false in that case, which results in the\ncaller have alt_p false, and as inline asm isn't simple move, sec_mem_p\nwill be also false (and it isn't commutative either), so for check_only_p\nit will suggests to the callers it isn't ok and otherwise will emit\nerror and delete/nullify the inline asm insn.\n\n2021-02-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/97971\n\t* lra-constraints.c (process_alt_operands): For inline asm, don't call\n\tfatal_insn, but instead return false.\n\n\t* gcc.target/i386/pr97971.c: New test.", "tree": {"sha": "c8adb8e86c802644a99925d88baab1e4fb3c0ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8adb8e86c802644a99925d88baab1e4fb3c0ccb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb69a49c4d3287e797e0d6279186221354905fe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb69a49c4d3287e797e0d6279186221354905fe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb69a49c4d3287e797e0d6279186221354905fe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb69a49c4d3287e797e0d6279186221354905fe0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b5572edb8caaed2f31a7235b8c58628da6bdb8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b5572edb8caaed2f31a7235b8c58628da6bdb8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b5572edb8caaed2f31a7235b8c58628da6bdb8f"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "6a5aa41ed55c4e79e13bc8e3b4f94bfedb90e693", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb69a49c4d3287e797e0d6279186221354905fe0/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb69a49c4d3287e797e0d6279186221354905fe0/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=eb69a49c4d3287e797e0d6279186221354905fe0", "patch": "@@ -3106,8 +3106,13 @@ process_alt_operands (int only_alternative)\n \t\t    && operand_reg[j] != NULL_RTX\n \t\t    && HARD_REGISTER_P (operand_reg[j])\n \t\t    && REG_USERVAR_P (operand_reg[j]))\n-\t\t  fatal_insn (\"unable to generate reloads for \"\n-\t\t\t      \"impossible constraints:\", curr_insn);\n+\t\t  {\n+\t\t    /* For asm, let curr_insn_transform diagnose it.  */\n+\t\t    if (INSN_CODE (curr_insn) < 0)\n+\t\t      return false;\n+\t\t    fatal_insn (\"unable to generate reloads for \"\n+\t\t\t\t\"impossible constraints:\", curr_insn);\n+\t\t  }\n \t      }\n \t  if (last_conflict_j < 0)\n \t    continue;"}, {"sha": "d07a31097c6bcfb8eaf5e525aee22f22eda5ed87", "filename": "gcc/testsuite/gcc.target/i386/pr97971.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb69a49c4d3287e797e0d6279186221354905fe0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97971.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb69a49c4d3287e797e0d6279186221354905fe0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97971.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97971.c?ref=eb69a49c4d3287e797e0d6279186221354905fe0", "patch": "@@ -0,0 +1,12 @@\n+/* PR middle-end/97971 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (void)\n+{\n+  register _Complex long a asm (\"rax\");\n+  register int b asm (\"rdx\");\n+  asm (\"# %0 %1\" : \"=&r\" (a), \"=r\" (b));\t/* { dg-error \"inconsistent operand constraints in an 'asm'\" } */\n+  return a;\n+}"}]}