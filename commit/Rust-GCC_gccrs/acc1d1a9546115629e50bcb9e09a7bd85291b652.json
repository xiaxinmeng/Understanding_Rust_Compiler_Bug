{"sha": "acc1d1a9546115629e50bcb9e09a7bd85291b652", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjMWQxYTk1NDYxMTU2MjllNTBiY2I5ZTA5YTdiZDg1MjkxYjY1Mg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-01-20T18:23:09Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-07-29T18:46:09Z"}, "message": "libstdc++: Review _Local_iterator/_Local_const_iterator implementations.\n\n_Local_iterator_base inherits _Node_iterator_base and so share the same\ncomparison operators. It avoids to expose special method _M_curr for debug\nmode to compare such iterators.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/hashtable_policy.h (_Node_iterator_base()): New.\n\t(operator==(const _Node_iterator_base&, const _Node_iterator_base&)):\n\tMake hidden friend.\n\t(operator!=(const _Node_iterator_base&, const _Node_iterator_base&)):\n\tMake hidden friend.\n\t(_Local_iterator_base<>): Inherits _Node_iterator_base.\n\t(_Local_iterator_base<>::_M_cur): Remove.\n\t(_Local_iterator_base<>::_M_curr()): Remove.\n\t(operator==(const _Local_iterator_base&, const _Local_iterator_base&)):\n\tRemove.\n\t(operator!=(const _Local_iterator_base&, const _Local_iterator_base&)):\n\tRemove.\n\t* include/debug/unordered_map (unordered_map<>::_M_invalidate): Adapt.\n\t(unordered_multimap<>::_M_invalidate): Adapt.\n\t* include/debug/unordered_set (unordered_set<>::_M_invalidate): Adapt.\n\t(unordered_multiset<>::_M_invalidate): Adapt.", "tree": {"sha": "2f041970212c9f2bf4ae693d2f09af97b0264f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f041970212c9f2bf4ae693d2f09af97b0264f5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acc1d1a9546115629e50bcb9e09a7bd85291b652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc1d1a9546115629e50bcb9e09a7bd85291b652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc1d1a9546115629e50bcb9e09a7bd85291b652", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc1d1a9546115629e50bcb9e09a7bd85291b652/comments", "author": null, "committer": null, "parents": [{"sha": "1722e2013f05f1f1f99379dbaa0c0df356da731f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1722e2013f05f1f1f99379dbaa0c0df356da731f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1722e2013f05f1f1f99379dbaa0c0df356da731f"}], "stats": {"total": 100, "additions": 39, "deletions": 61}, "files": [{"sha": "8031966f2f759372b2ad727f3bd8d4b8641c50b7", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 35, "deletions": 57, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc1d1a9546115629e50bcb9e09a7bd85291b652/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc1d1a9546115629e50bcb9e09a7bd85291b652/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=acc1d1a9546115629e50bcb9e09a7bd85291b652", "patch": "@@ -291,27 +291,26 @@ namespace __detail\n \n       __node_type*  _M_cur;\n \n+      _Node_iterator_base() = default;\n       _Node_iterator_base(__node_type* __p) noexcept\n       : _M_cur(__p) { }\n \n       void\n       _M_incr() noexcept\n       { _M_cur = _M_cur->_M_next(); }\n-    };\n-\n-  template<typename _Value, bool _Cache_hash_code>\n-    inline bool\n-    operator==(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,\n-\t       const _Node_iterator_base<_Value, _Cache_hash_code >& __y)\n-    noexcept\n-    { return __x._M_cur == __y._M_cur; }\n \n-  template<typename _Value, bool _Cache_hash_code>\n-    inline bool\n-    operator!=(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,\n-\t       const _Node_iterator_base<_Value, _Cache_hash_code>& __y)\n-    noexcept\n-    { return __x._M_cur != __y._M_cur; }\n+      friend bool\n+      operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)\n+      noexcept\n+      { return __x._M_cur == __y._M_cur; }\n+\n+#if __cpp_impl_three_way_comparison < 201907L\n+      friend bool\n+      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)\n+      noexcept\n+      { return __x._M_cur != __y._M_cur; }\n+#endif\n+    };\n \n   /// Node iterators, used to iterate through all the hashtable.\n   template<typename _Value, bool __constant_iterators, bool __cache>\n@@ -334,7 +333,7 @@ namespace __detail\n \t\t\t\t\t\t  const _Value&, _Value&>::type;\n \n       _Node_iterator() noexcept\n-      : __base_type(0) { }\n+      : __base_type(nullptr) { }\n \n       explicit\n       _Node_iterator(__node_type* __p) noexcept\n@@ -382,7 +381,7 @@ namespace __detail\n       typedef const _Value&\t\t\t\treference;\n \n       _Node_const_iterator() noexcept\n-      : __base_type(0) { }\n+      : __base_type(nullptr) { }\n \n       explicit\n       _Node_const_iterator(__node_type* __p) noexcept\n@@ -1431,41 +1430,39 @@ namespace __detail\n     struct _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t_H1, _H2, _Hash, true>\n     : private _Hashtable_ebo_helper<0, _H2>\n+    , _Node_iterator_base<_Value, true>\n     {\n     protected:\n       using __base_type = _Hashtable_ebo_helper<0, _H2>;\n+      using __base_node_iter = _Node_iterator_base<_Value, true>;\n       using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,\n \t\t\t\t\t       _H1, _H2, _Hash, true>;\n \n       _Local_iterator_base() = default;\n       _Local_iterator_base(const __hash_code_base& __base,\n \t\t\t   _Hash_node<_Value, true>* __p,\n \t\t\t   std::size_t __bkt, std::size_t __bkt_count)\n-      : __base_type(__base._M_h2()),\n-\t_M_cur(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count) { }\n+      : __base_type(__base._M_h2()), __base_node_iter(__p)\n+      , _M_bucket(__bkt), _M_bucket_count(__bkt_count) { }\n \n       void\n       _M_incr()\n       {\n-\t_M_cur = _M_cur->_M_next();\n-\tif (_M_cur)\n+\t__base_node_iter::_M_incr();\n+\tif (this->_M_cur)\n \t  {\n \t    std::size_t __bkt\n-\t      = __base_type::_M_get()(_M_cur->_M_hash_code,\n-\t\t\t\t\t   _M_bucket_count);\n+\t      = __base_type::_M_get()(this->_M_cur->_M_hash_code,\n+\t\t\t\t      _M_bucket_count);\n \t    if (__bkt != _M_bucket)\n-\t      _M_cur = nullptr;\n+\t      this->_M_cur = nullptr;\n \t  }\n       }\n \n-      _Hash_node<_Value, true>*  _M_cur;\n       std::size_t _M_bucket;\n       std::size_t _M_bucket_count;\n \n     public:\n-      const void*\n-      _M_curr() const { return _M_cur; }  // for equality ops\n-\n       std::size_t\n       _M_get_bucket() const { return _M_bucket; }  // for debug mode\n     };\n@@ -1513,17 +1510,19 @@ namespace __detail\n     struct _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t_H1, _H2, _Hash, false>\n     : __hash_code_for_local_iter<_Key, _Value, _ExtractKey, _H1, _H2, _Hash>\n+    , _Node_iterator_base<_Value, false>\n     {\n     protected:\n       using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,\n \t\t\t\t\t       _H1, _H2, _Hash, false>;\n+      using __node_iter_base = _Node_iterator_base<_Value, false>;\n \n       _Local_iterator_base() : _M_bucket_count(-1) { }\n \n       _Local_iterator_base(const __hash_code_base& __base,\n \t\t\t   _Hash_node<_Value, false>* __p,\n \t\t\t   std::size_t __bkt, std::size_t __bkt_count)\n-      : _M_cur(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count)\n+      : __node_iter_base(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count)\n       { _M_init(__base); }\n \n       ~_Local_iterator_base()\n@@ -1533,8 +1532,8 @@ namespace __detail\n       }\n \n       _Local_iterator_base(const _Local_iterator_base& __iter)\n-      : _M_cur(__iter._M_cur), _M_bucket(__iter._M_bucket),\n-        _M_bucket_count(__iter._M_bucket_count)\n+      : __node_iter_base(__iter), _M_bucket(__iter._M_bucket)\n+      , _M_bucket_count(__iter._M_bucket_count)\n       {\n \tif (_M_bucket_count != -1)\n \t  _M_init(*__iter._M_h());\n@@ -1545,7 +1544,7 @@ namespace __detail\n       {\n \tif (_M_bucket_count != -1)\n \t  _M_destroy();\n-\t_M_cur = __iter._M_cur;\n+\tthis->_M_cur = __iter._M_cur;\n \t_M_bucket = __iter._M_bucket;\n \t_M_bucket_count = __iter._M_bucket_count;\n \tif (_M_bucket_count != -1)\n@@ -1556,17 +1555,16 @@ namespace __detail\n       void\n       _M_incr()\n       {\n-\t_M_cur = _M_cur->_M_next();\n-\tif (_M_cur)\n+\t__node_iter_base::_M_incr();\n+\tif (this->_M_cur)\n \t  {\n-\t    std::size_t __bkt = this->_M_h()->_M_bucket_index(_M_cur,\n+\t    std::size_t __bkt = this->_M_h()->_M_bucket_index(this->_M_cur,\n \t\t\t\t\t\t\t      _M_bucket_count);\n \t    if (__bkt != _M_bucket)\n-\t      _M_cur = nullptr;\n+\t      this->_M_cur = nullptr;\n \t  }\n       }\n \n-      _Hash_node<_Value, false>*  _M_cur;\n       std::size_t _M_bucket;\n       std::size_t _M_bucket_count;\n \n@@ -1578,31 +1576,10 @@ namespace __detail\n       _M_destroy() { this->_M_h()->~__hash_code_base(); }\n \n     public:\n-      const void*\n-      _M_curr() const { return _M_cur; }  // for equality ops and debug mode\n-\n       std::size_t\n       _M_get_bucket() const { return _M_bucket; }  // for debug mode\n     };\n \n-  template<typename _Key, typename _Value, typename _ExtractKey,\n-\t   typename _H1, typename _H2, typename _Hash, bool __cache>\n-    inline bool\n-    operator==(const _Local_iterator_base<_Key, _Value, _ExtractKey,\n-\t\t\t\t\t  _H1, _H2, _Hash, __cache>& __x,\n-\t       const _Local_iterator_base<_Key, _Value, _ExtractKey,\n-\t\t\t\t\t  _H1, _H2, _Hash, __cache>& __y)\n-    { return __x._M_curr() == __y._M_curr(); }\n-\n-  template<typename _Key, typename _Value, typename _ExtractKey,\n-\t   typename _H1, typename _H2, typename _Hash, bool __cache>\n-    inline bool\n-    operator!=(const _Local_iterator_base<_Key, _Value, _ExtractKey,\n-\t\t\t\t\t  _H1, _H2, _Hash, __cache>& __x,\n-\t       const _Local_iterator_base<_Key, _Value, _ExtractKey,\n-\t\t\t\t\t  _H1, _H2, _Hash, __cache>& __y)\n-    { return __x._M_curr() != __y._M_curr(); }\n-\n   /// local iterators\n   template<typename _Key, typename _Value, typename _ExtractKey,\n \t   typename _H1, typename _H2, typename _Hash,\n@@ -1615,6 +1592,7 @@ namespace __detail\n       using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey,\n \t\t\t\t\t       _H1, _H2, _Hash, __cache>;\n       using __hash_code_base = typename __base_type::__hash_code_base;\n+\n     public:\n       typedef _Value\t\t\t\t\tvalue_type;\n       typedef typename std::conditional<__constant_iterators,"}, {"sha": "bae179b58acef4292fb2fbdb88e01f77a610fa95", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc1d1a9546115629e50bcb9e09a7bd85291b652/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc1d1a9546115629e50bcb9e09a7bd85291b652/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=acc1d1a9546115629e50bcb9e09a7bd85291b652", "patch": "@@ -630,7 +630,7 @@ namespace __debug\n \t  [__victim](_Base_const_iterator __it) { return __it == __victim; });\n \tthis->_M_invalidate_local_if(\n \t  [__victim](_Base_const_local_iterator __it)\n-\t  { return __it._M_curr() == __victim._M_cur; });\n+\t  { return __it == __victim; });\n       }\n \n       _Base_iterator\n@@ -1246,7 +1246,7 @@ namespace __debug\n \t  [__victim](_Base_const_iterator __it) { return __it == __victim; });\n \tthis->_M_invalidate_local_if(\n \t  [__victim](_Base_const_local_iterator __it)\n-\t  { return __it._M_curr() == __victim._M_cur; });\n+\t  { return __it == __victim; });\n       }\n \n       _Base_iterator"}, {"sha": "97e6a74ebb4286e548600750d119a355a4029466", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acc1d1a9546115629e50bcb9e09a7bd85291b652/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acc1d1a9546115629e50bcb9e09a7bd85291b652/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=acc1d1a9546115629e50bcb9e09a7bd85291b652", "patch": "@@ -515,7 +515,7 @@ namespace __debug\n \t  [__victim](_Base_const_iterator __it) { return __it == __victim; });\n \tthis->_M_invalidate_local_if(\n \t  [__victim](_Base_const_local_iterator __it)\n-\t  { return __it._M_curr() == __victim._M_cur; });\n+\t  { return __it == __victim; });\n       }\n \n       _Base_iterator\n@@ -1085,7 +1085,7 @@ namespace __debug\n \t  [__victim](_Base_const_iterator __it) { return __it == __victim; });\n \tthis->_M_invalidate_local_if(\n \t  [__victim](_Base_const_local_iterator __it)\n-\t  { return __it._M_curr() == __victim._M_cur; });\n+\t  { return __it == __victim; });\n       }\n \n       _Base_iterator"}]}