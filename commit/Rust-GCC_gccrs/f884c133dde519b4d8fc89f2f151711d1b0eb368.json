{"sha": "f884c133dde519b4d8fc89f2f151711d1b0eb368", "node_id": "C_kwDOANBUbNoAKGY4ODRjMTMzZGRlNTE5YjRkOGZjODlmMmYxNTE3MTFkMWIwZWIzNjg", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-01-16T20:02:51Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-01-27T14:32:42Z"}, "message": "Correctly detect shifts out of range\n\nget_shift_range was incorrectly communicating that it couldn't calculate\na range when the shift values was always out fo range.  Fix this and\nalwasy return [0, 0] when the shift value is always out of range.\n\n\tPR tree-optimization/108306\n\tgcc/\n\t* range-op.cc (operator_lshift::fold_range): Return [0, 0] not\n\tvarying for shifts that are always out of void range.\n\t(operator_rshift::fold_range): Return [0, 0] not\n\tvarying for shifts that are always out of void range.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr108306.c: New.", "tree": {"sha": "632798a395c88d7716eb1014daf93ae61afce005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/632798a395c88d7716eb1014daf93ae61afce005"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f884c133dde519b4d8fc89f2f151711d1b0eb368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f884c133dde519b4d8fc89f2f151711d1b0eb368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f884c133dde519b4d8fc89f2f151711d1b0eb368", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f884c133dde519b4d8fc89f2f151711d1b0eb368/comments", "author": null, "committer": null, "parents": [{"sha": "ec5e99e95954fd629283a9c9572193dd95471fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5e99e95954fd629283a9c9572193dd95471fea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5e99e95954fd629283a9c9572193dd95471fea"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "6e5754e9130e863197a05f4e3851911b3193e80a", "filename": "gcc/range-op.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884c133dde519b4d8fc89f2f151711d1b0eb368/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884c133dde519b4d8fc89f2f151711d1b0eb368/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=f884c133dde519b4d8fc89f2f151711d1b0eb368", "patch": "@@ -2166,7 +2166,7 @@ operator_lshift::fold_range (irange &r, tree type,\n       if (op2.undefined_p ())\n \tr.set_undefined ();\n       else\n-\tr.set_varying (type);\n+\tr.set_zero (type);\n       return true;\n     }\n \n@@ -2440,7 +2440,7 @@ operator_rshift::fold_range (irange &r, tree type,\n       if (op2.undefined_p ())\n \tr.set_undefined ();\n       else\n-\tr.set_varying (type);\n+\tr.set_zero (type);\n       return true;\n     }\n "}, {"sha": "1044c646de7e33e5e23ec65fb4a91a2578707410", "filename": "gcc/testsuite/gcc.dg/pr108306.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f884c133dde519b4d8fc89f2f151711d1b0eb368/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108306.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f884c133dde519b4d8fc89f2f151711d1b0eb368/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108306.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108306.c?ref=f884c133dde519b4d8fc89f2f151711d1b0eb368", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2  -fno-strict-overflow -fsanitize=shift -Warray-bounds\" } */\n+\n+enum psi_task_count {\n+\tNR_IOWAIT,\n+\tNR_PSI_TASK_COUNTS = 4,\n+};\n+\n+unsigned int tasks[NR_PSI_TASK_COUNTS];\n+\n+static void psi_group_change(unsigned int set)\n+{\n+\tunsigned int t;\n+\tunsigned int state_mask = 0;\n+\n+\tfor (t = 0; set; set &= ~(1 << t), t++)\n+\t\tif (set & (1 << t))\n+\t\t\ttasks[t]++;\n+}\n+\n+void psi_task_switch(int sleep)\n+{\n+\tint set = 0;\n+\n+\tif (sleep)\n+\t\tset |= (1 << NR_IOWAIT);\n+\n+\tpsi_group_change(set);\n+}"}]}