{"sha": "7cec010e49d84d5aad737fc040dc693615f81e78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlYzAxMGU0OWQ4NGQ1YWFkNzM3ZmMwNDBkYzY5MzYxNWY4MWU3OA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2010-06-14T15:04:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T15:04:40Z"}, "message": "sem_ch3.adb (Build_Derived_Record_Type): if derived type is an anonymous base generated when...\n\n2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Record_Type): if derived type is an\n\tanonymous base generated when the parent is a constrained discriminated\n\ttype, propagate interface list to first subtype because it may appear\n\tin a current instance within the extension part of the derived type\n\tdeclaration, and its own subtype declaration has not been elaborated\n\tyet.\n\t* exp_disp.adb (Build_Interface_Thunk): Use base type of formal to\n\tdetermine whether it has the controlling type.\n\nFrom-SVN: r160748", "tree": {"sha": "2b48b2d75c9ca98f2e6f0d8bf9147ab9126ed6bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b48b2d75c9ca98f2e6f0d8bf9147ab9126ed6bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cec010e49d84d5aad737fc040dc693615f81e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cec010e49d84d5aad737fc040dc693615f81e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cec010e49d84d5aad737fc040dc693615f81e78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cec010e49d84d5aad737fc040dc693615f81e78/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9fc91982f25c892710a0a8a00ab9d69a30481285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc91982f25c892710a0a8a00ab9d69a30481285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc91982f25c892710a0a8a00ab9d69a30481285"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "74372c0026cbdea114e8a894619338b872b77917", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cec010e49d84d5aad737fc040dc693615f81e78/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cec010e49d84d5aad737fc040dc693615f81e78/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7cec010e49d84d5aad737fc040dc693615f81e78", "patch": "@@ -1,3 +1,14 @@\n+2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Record_Type): if derived type is an\n+\tanonymous base generated when the parent is a constrained discriminated\n+\ttype, propagate interface list to first subtype because it may appear\n+\tin a current instance within the extension part of the derived type\n+\tdeclaration, and its own subtype declaration has not been elaborated\n+\tyet.\n+\t* exp_disp.adb (Build_Interface_Thunk): Use base type of formal to\n+\tdetermine whether it has the controlling type.\n+\n 2010-06-14  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* exp_ch11.adb (Expand_N_Raise_Statement): Make sure that the explicit"}, {"sha": "42ef7e06ac9ae78da5c808e4a27b097c8060abb8", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cec010e49d84d5aad737fc040dc693615f81e78/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cec010e49d84d5aad737fc040dc693615f81e78/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=7cec010e49d84d5aad737fc040dc693615f81e78", "patch": "@@ -1528,14 +1528,19 @@ package body Exp_Disp is\n       Formal        := First (Formals);\n       while Present (Formal) loop\n \n-         --  Handle concurrent types\n+         --  Handle concurrent types.\n \n          if Ekind (Target_Formal) = E_In_Parameter\n            and then Ekind (Etype (Target_Formal)) = E_Anonymous_Access_Type\n          then\n             Ftyp := Directly_Designated_Type (Etype (Target_Formal));\n          else\n-            Ftyp := Etype (Target_Formal);\n+\n+            --  if the parent is a constrained discriminated type. the\n+            --  primitive operation will have been defined on a first subtype.\n+            --  for proper matching with controlling type, use base type.\n+\n+            Ftyp := Base_Type (Etype (Target_Formal));\n          end if;\n \n          if Is_Concurrent_Type (Ftyp) then"}, {"sha": "6e0efe1fd30076dba958a6a002d3b412ad0fe9da", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cec010e49d84d5aad737fc040dc693615f81e78/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cec010e49d84d5aad737fc040dc693615f81e78/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7cec010e49d84d5aad737fc040dc693615f81e78", "patch": "@@ -3750,10 +3750,10 @@ package body Sem_Ch3 is\n       if Present (Generic_Parent_Type (N))\n         and then\n           (Nkind\n-             (Parent (Generic_Parent_Type (N))) /= N_Formal_Type_Declaration\n+            (Parent (Generic_Parent_Type (N))) /= N_Formal_Type_Declaration\n             or else Nkind\n               (Formal_Type_Definition (Parent (Generic_Parent_Type (N))))\n-                /=  N_Formal_Private_Type_Definition)\n+                /= N_Formal_Private_Type_Definition)\n       then\n          if Is_Tagged_Type (Id) then\n \n@@ -7356,6 +7356,27 @@ package body Sem_Ch3 is\n                   Exclude_Parents => True);\n \n                Set_Interfaces (Derived_Type, Ifaces_List);\n+\n+               --  If the derived type is the anonymous type created for\n+               --  a declaration whose parent has a constraint, propagate\n+               --  the interface list to the source type. This must be done\n+               --  prior to the completion of the analysis of the source type\n+               --  because the components in the extension may contain current\n+               --  instances whose legality depends on some ancestor.\n+\n+               if Is_Itype (Derived_Type) then\n+                  declare\n+                     Def : constant Node_Id :=\n+                       Associated_Node_For_Itype (Derived_Type);\n+                  begin\n+                     if Present (Def)\n+                       and then Nkind (Def) = N_Full_Type_Declaration\n+                     then\n+                        Set_Interfaces\n+                          (Defining_Identifier (Def), Ifaces_List);\n+                     end if;\n+                  end;\n+               end if;\n             end;\n          end if;\n "}]}