{"sha": "6877993c4da49315151e9d912408480070144dd3", "node_id": "C_kwDOANBUbNoAKDY4Nzc5OTNjNGRhNDkzMTUxNTFlOWQ5MTI0MDg0ODAwNzAxNDRkZDM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-20T13:46:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-21T06:59:37Z"}, "message": "Add alias disambiguation for vectorizer load/store IFNs\n\nThe following adds support for MASK_STORE, MASK_LOAD and friends\nto call_may_clobber_ref_p and ref_maybe_used_by_call_p.  Since\nthey all use a special argument to specify TBAA they are not really\nsuited for fnspec handling thus the manual support.\n\n\t* tree-ssa-alias.cc (ref_maybe_used_by_call_p_1): Special-case\n\tstore internal functions and IFN_MASK_LOAD, IFN_LEN_LOAD\n\tand IFN_MASK_LOAD_LANES.\n\t(call_may_clobber_ref_p_1): Special-case IFN_MASK_STORE,\n\tIFN_LEN_STORE and IFN_MASK_STORE_LANES.", "tree": {"sha": "4dba970626664c46a3a701287826b004b439d5de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dba970626664c46a3a701287826b004b439d5de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6877993c4da49315151e9d912408480070144dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6877993c4da49315151e9d912408480070144dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6877993c4da49315151e9d912408480070144dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6877993c4da49315151e9d912408480070144dd3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742377ed0f09313503a1c5393c4f742d69249521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742377ed0f09313503a1c5393c4f742d69249521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742377ed0f09313503a1c5393c4f742d69249521"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "390cd875074effb52dabdc42a0d5b0c2c1fa0449", "filename": "gcc/tree-ssa-alias.cc", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6877993c4da49315151e9d912408480070144dd3/gcc%2Ftree-ssa-alias.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6877993c4da49315151e9d912408480070144dd3/gcc%2Ftree-ssa-alias.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.cc?ref=6877993c4da49315151e9d912408480070144dd3", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"print-tree.h\"\n #include \"tree-ssa-alias-compare.h\"\n #include \"builtins.h\"\n+#include \"internal-fn.h\"\n \n /* Broad overview of how alias analysis on gimple works:\n \n@@ -2793,8 +2794,38 @@ ref_maybe_used_by_call_p_1 (gcall *call, ao_ref *ref, bool tbaa_p)\n   if (ref->volatile_p)\n     return true;\n \n-  callee = gimple_call_fndecl (call);\n+  if (gimple_call_internal_p (call))\n+    switch (gimple_call_internal_fn (call))\n+      {\n+      case IFN_MASK_STORE:\n+      case IFN_SCATTER_STORE:\n+      case IFN_MASK_SCATTER_STORE:\n+      case IFN_LEN_STORE:\n+\treturn false;\n+      case IFN_MASK_STORE_LANES:\n+\tgoto process_args;\n+      case IFN_MASK_LOAD:\n+      case IFN_LEN_LOAD:\n+      case IFN_MASK_LOAD_LANES:\n+\t{\n+\t  ao_ref rhs_ref;\n+\t  tree lhs = gimple_call_lhs (call);\n+\t  if (lhs)\n+\t    {\n+\t      ao_ref_init_from_ptr_and_size (&rhs_ref,\n+\t\t\t\t\t     gimple_call_arg (call, 0),\n+\t\t\t\t\t     TYPE_SIZE_UNIT (TREE_TYPE (lhs)));\n+\t      rhs_ref.ref_alias_set = rhs_ref.base_alias_set\n+\t\t= tbaa_p ? get_deref_alias_set (TREE_TYPE\n+\t\t\t\t\t(gimple_call_arg (call, 1))) : 0;\n+\t      return refs_may_alias_p_1 (ref, &rhs_ref, tbaa_p);\n+\t    }\n+\t  break;\n+\t}\n+      default:;\n+      }\n \n+  callee = gimple_call_fndecl (call);\n   if (callee != NULL_TREE)\n     {\n       struct cgraph_node *node = cgraph_node::get (callee);\n@@ -3005,7 +3036,7 @@ call_may_clobber_ref_p_1 (gcall *call, ao_ref *ref, bool tbaa_p)\n       & (ECF_PURE|ECF_CONST|ECF_LOOPING_CONST_OR_PURE|ECF_NOVOPS))\n     return false;\n   if (gimple_call_internal_p (call))\n-    switch (gimple_call_internal_fn (call))\n+    switch (auto fn = gimple_call_internal_fn (call))\n       {\n \t/* Treat these internal calls like ECF_PURE for aliasing,\n \t   they don't write to any memory the program should care about.\n@@ -3018,6 +3049,20 @@ call_may_clobber_ref_p_1 (gcall *call, ao_ref *ref, bool tbaa_p)\n       case IFN_UBSAN_PTR:\n       case IFN_ASAN_CHECK:\n \treturn false;\n+      case IFN_MASK_STORE:\n+      case IFN_LEN_STORE:\n+      case IFN_MASK_STORE_LANES:\n+\t{\n+\t  tree rhs = gimple_call_arg (call,\n+\t\t\t\t      internal_fn_stored_value_index (fn));\n+\t  ao_ref lhs_ref;\n+\t  ao_ref_init_from_ptr_and_size (&lhs_ref, gimple_call_arg (call, 0),\n+\t\t\t\t\t TYPE_SIZE_UNIT (TREE_TYPE (rhs)));\n+\t  lhs_ref.ref_alias_set = lhs_ref.base_alias_set\n+\t    = tbaa_p ? get_deref_alias_set\n+\t\t\t\t   (TREE_TYPE (gimple_call_arg (call, 1))) : 0;\n+\t  return refs_may_alias_p_1 (ref, &lhs_ref, tbaa_p);\n+\t}\n       default:\n \tbreak;\n       }"}]}