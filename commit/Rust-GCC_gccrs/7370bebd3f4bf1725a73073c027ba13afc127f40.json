{"sha": "7370bebd3f4bf1725a73073c027ba13afc127f40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM3MGJlYmQzZjRiZjE3MjVhNzMwNzNjMDI3YmExM2FmYzEyN2Y0MA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-11-30T08:15:42Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-11-30T08:15:42Z"}, "message": "* gthr-gnat.c, gthr-gnat.h, gthr.h, libgcc2.h, unwind-dw2-fde.h\n\t* unwind.h: Surround all visibility pragmas with #ifndef HIDE_EXPORTS.\n\n\t* mklibgcc.in: Drastic restructure for comprehensibility.\n\tRemove the old hidden-directive hack.\n\tEliminate support for .txt files in LIB2ADD etc (never used).\n\tEliminate support for assembly source files in LIB2ADDEH* and\n\tLIBUNWIND (also never used).\n\tBuild up dependency lists for libraries incrementally.\n\tIf we have SHLIB_LINK, compile each file twice, once for the\n\tstatic and once for the shared library; also probe for\n\t-fvisibility=hidden in the generated libgcc.mk.  If found,\n\tpass that and -DHIDE_EXPORTS to the compilation of every C\n\tsource file going into the static library.  If found, generate\n\thidden-directive lists for every assembly source file going\n\tinto the static library, but incorporate them with -include\n\tinstead of ld -r.\n\tWrite comments into generated libgcc.mk to facilitate debugging.\n\t* Makefile.in: Pass ASM_HIDDEN_OP to mklibgcc.\n\t* config/t-slibgcc-darwin: Define ASM_HIDDEN_OP.\n\n\t* config/darwin.h (REAL_LIBGCC_SPEC): Put -lgcc back in\n\t-Zdynamiclib case.\n\nFrom-SVN: r91513", "tree": {"sha": "b15ea66df5615f20de6cb22091af0ada49e70733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b15ea66df5615f20de6cb22091af0ada49e70733"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7370bebd3f4bf1725a73073c027ba13afc127f40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7370bebd3f4bf1725a73073c027ba13afc127f40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7370bebd3f4bf1725a73073c027ba13afc127f40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7370bebd3f4bf1725a73073c027ba13afc127f40/comments", "author": null, "committer": null, "parents": [{"sha": "afe849213eed9764b4579ba081c111a0b3ddde25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe849213eed9764b4579ba081c111a0b3ddde25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe849213eed9764b4579ba081c111a0b3ddde25"}], "stats": {"total": 1057, "additions": 641, "deletions": 416}, "files": [{"sha": "9185db16e2a696b6987fcb0d462ead1beaf2998f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7370bebd3f4bf1725a73073c027ba13afc127f40", "patch": "@@ -1,3 +1,29 @@\n+2004-11-30  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gthr-gnat.c, gthr-gnat.h, gthr.h, libgcc2.h, unwind-dw2-fde.h\n+\t* unwind.h: Surround all visibility pragmas with #ifndef HIDE_EXPORTS.\n+\n+\t* mklibgcc.in: Drastic restructure for comprehensibility.\n+\tRemove the old hidden-directive hack.\n+\tEliminate support for .txt files in LIB2ADD etc (never used).\n+\tEliminate support for assembly source files in LIB2ADDEH* and\n+\tLIBUNWIND (also never used).\n+\tBuild up dependency lists for libraries incrementally.\n+\tIf we have SHLIB_LINK, compile each file twice, once for the\n+\tstatic and once for the shared library; also probe for\n+\t-fvisibility=hidden in the generated libgcc.mk.  If found,\n+\tpass that and -DHIDE_EXPORTS to the compilation of every C\n+\tsource file going into the static library.  If found, generate\n+\thidden-directive lists for every assembly source file going\n+\tinto the static library, but incorporate them with -include\n+\tinstead of ld -r.\n+\tWrite comments into generated libgcc.mk to facilitate debugging.\n+\t* Makefile.in: Pass ASM_HIDDEN_OP to mklibgcc.\n+\t* config/t-slibgcc-darwin: Define ASM_HIDDEN_OP.\n+\n+\t* config/darwin.h (REAL_LIBGCC_SPEC): Put -lgcc back in\n+\t-Zdynamiclib case.\n+\n 2004-11-29  Richard Henderson  <rth@redhat.com>\n \n \t* expr.c (get_inner_reference): Handle REAL/IMAGPART_EXPR."}, {"sha": "13e659a5262b36ae16a7a3324291d9bb726dcc15", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7370bebd3f4bf1725a73073c027ba13afc127f40", "patch": "@@ -1235,6 +1235,7 @@ libgcc.mk: config.status Makefile mklibgcc $(LIB2ADD) $(LIB2ADD_ST) xgcc$(exeext\n \tSHLIB_MAPFILES='$(SHLIB_MAPFILES)' \\\n \tSHLIB_NM_FLAGS='$(SHLIB_NM_FLAGS)' \\\n \tMULTILIB_OSDIRNAMES='$(MULTILIB_OSDIRNAMES)' \\\n+\tASM_HIDDEN_OP='$(ASM_HIDDEN_OP)' \\\n \tmkinstalldirs='$(mkinstalldirs)' \\\n \t  $(SHELL) mklibgcc > tmp-libgcc.mk\n \tmv tmp-libgcc.mk libgcc.mk"}, {"sha": "5c9dc2e4cd32bd232e0c7968d63c9c5ee2e48e0d", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=7370bebd3f4bf1725a73073c027ba13afc127f40", "patch": "@@ -316,8 +316,8 @@ extern const char *darwin_fix_and_continue_switch;\n #define REAL_LIBGCC_SPEC \\\n    \"%{static|static-libgcc:-lgcc -lgcc_eh}\\\n     %{!static:%{!static-libgcc:\\\n-      %{!Zdynamiclib:%{!shared-libgcc:-lgcc  -lgcc_eh}\\\n-      %{shared-libgcc:-lgcc_s -lgcc} } %{Zdynamiclib:-lgcc_s}}}\"\n+      %{!Zdynamiclib:%{!shared-libgcc:-lgcc -lgcc_eh}\\\n+      %{shared-libgcc:-lgcc_s -lgcc}} %{Zdynamiclib:-lgcc_s -lgcc}}}\"\n \n /* We specify crt0.o as -lcrt0.o so that ld will search the library path.  */\n "}, {"sha": "8127c94455945dcc416d0685e82b134f7d20e2d2", "filename": "gcc/config/t-slibgcc-darwin", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fconfig%2Ft-slibgcc-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fconfig%2Ft-slibgcc-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-slibgcc-darwin?ref=7370bebd3f4bf1725a73073c027ba13afc127f40", "patch": "@@ -34,3 +34,6 @@ SHLIB_INSTALL = \\\n SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk\n SHLIB_MKMAP_OPTS = -v leading_underscore=1\n SHLIB_MAPFILES = $(srcdir)/libgcc-std.ver\n+\n+# Must use a different directive for hidden visibility in assembly sources.\n+ASM_HIDDEN_OP = .private_extern"}, {"sha": "2d55fdfc7aed6c7bfb46fd83fdf2f586f8549c94", "filename": "gcc/gthr-gnat.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fgthr-gnat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fgthr-gnat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-gnat.c?ref=7370bebd3f4bf1725a73073c027ba13afc127f40", "patch": "@@ -28,7 +28,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"gthr-gnat.h\"\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility push(default)\n+#endif\n \n #ifdef __cplusplus\n #define UNUSED(x)\n@@ -81,4 +83,6 @@ __gthread_mutex_unlock (__gthread_mutex_t * UNUSED (mutex))\n   return 0;\n }\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility pop\n+#endif"}, {"sha": "ee9ad947ab98a29aabe1aafb2bacb5a9d751c9ea", "filename": "gcc/gthr-gnat.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fgthr-gnat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fgthr-gnat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-gnat.h?ref=7370bebd3f4bf1725a73073c027ba13afc127f40", "patch": "@@ -28,7 +28,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_GTHR_GNAT_H\n #define GCC_GTHR_GNAT_H\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility push(default)\n+#endif\n \n /* Just provide compatibility for mutex handling.  */\n \n@@ -41,7 +43,9 @@ extern int __gthread_active_p (void);\n extern int __gthread_mutex_lock (__gthread_mutex_t *);\n extern int __gthread_mutex_unlock (__gthread_mutex_t *);\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility pop\n+#endif\n \n #endif /* ! GCC_GTHR_GNAT_H */\n "}, {"sha": "ffd40d7aa5d9d310b416d40d61724f821b8d1cae", "filename": "gcc/gthr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fgthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fgthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr.h?ref=7370bebd3f4bf1725a73073c027ba13afc127f40", "patch": "@@ -29,7 +29,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_GTHR_H\n #define GCC_GTHR_H\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility push(default)\n+#endif\n \n /* If this file is compiled with threads support, it must\n        #define __GTHREADS 1\n@@ -116,6 +118,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"gthr-single.h\"\n #endif\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility pop\n+#endif\n \n #endif /* ! GCC_GTHR_H */"}, {"sha": "87de9014865cc853ad35ccedd27d8beefcd7d585", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=7370bebd3f4bf1725a73073c027ba13afc127f40", "patch": "@@ -30,7 +30,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_LIBGCC2_H\n #define GCC_LIBGCC2_H\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility push(default)\n+#endif\n \n extern int __gcc_bcmp (const unsigned char *, const unsigned char *, size_t);\n extern void __clear_cache (char *, char *);\n@@ -324,6 +326,8 @@ extern int __parityDI2 (UDWtype);\n \n extern void __enable_execute_stack (void *);\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility pop\n+#endif\n \n #endif /* ! GCC_LIBGCC2_H */"}, {"sha": "80d016e988b9bc27bb8a03c911b721f58e12550d", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 585, "deletions": 414, "changes": 999, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=7370bebd3f4bf1725a73073c027ba13afc127f40", "patch": "@@ -40,13 +40,17 @@\n # SHLIB_NM_FLAGS\n # SHLIB_INSTALL\n # MULTILIB_OSDIRNAMES\n+# ASM_HIDDEN_OP\n \n # Make needs VPATH to be literal.\n echo 'srcdir = @srcdir@'\n echo 'VPATH = @srcdir@'\n echo 'EQ = ='\n+echo 'objects = $(filter %'$objext',$^)'\n echo\n-echo 'force:'\n+echo '# Dependencies are accumulated as we go.'\n+echo 'all: stmp-dirs'\n+echo 'dirs = libgcc'\n echo\n \n # Library members defined in libgcc2.c.\n@@ -89,290 +93,570 @@ libgcov_c_dep='stmp-dirs $(srcdir)/libgcov.c $(srcdir)/gcov-io.h $(srcdir)/gcov-\n # Dependencies for fp-bit.c\n fpbit_c_dep='stmp-dirs config.status tsystem.h'\n \n+if [ \"$SHLIB_LINK\" ]; then\n+  # Test -fvisibility=hidden.  We need both a -fvisibility=hidden on\n+  # the command line, and a #define to prevent libgcc2.h etc from\n+  # overriding that with #pragmas.  The dance with @ is to prevent\n+  # echo from seeing anything it might take for an option.\n+  echo \"vis_hide := \\$(strip \\$(subst @,-,\\\\\"\n+  echo \"    \\$(shell if echo 'void foo(void);' | \\\\\"\n+  echo \"          $gcc_compile -fvisibility=hidden -Werror \\\\\"\n+  echo \"          -c -xc - -o /dev/null 2> /dev/null; \\\\\"\n+  echo \"          then echo @fvisibility=hidden @DHIDE_EXPORTS; \\\\\"\n+  echo \"          fi)))\"\n+  echo\n+\n+  # If we have -fvisibility=hidden, then we need to generate hide\n+  # lists for object files implemented in assembly.  The default\n+  # pseudo-op for this is \".hidden\", but can be overridden with\n+  # ASM_HIDDEN_OP.\n+  [ \"$ASM_HIDDEN_OP\" ] || ASM_HIDDEN_OP=\".hidden\"\n+  \n+  echo \"ifneq (,\\$(vis_hide))\"\n+  echo \"define gen-hide-list\"\n+  echo \"\\$(NM_FOR_TARGET) ${SHLIB_NM_FLAGS} \\$< | \\\\\"\n+  # non-GNU nm emits three fields even for undefined and typeless symbols,\n+  # so explicitly omit them\n+  echo \"  \\$(AWK) 'NF == 3 && \\$\\$2 !~ /^[UN]\\$\\$/ { print \\\"\\\\t${ASM_HIDDEN_OP}\\\", \\$\\$3 }' > \\$@T\"\n+  echo \"mv -f \\$@T \\$@\"\n+  echo \"endef\"\n+  echo \"else\"\n+  echo \"gen-hide-list = echo > \\$@\"\n+  echo \"endif\"\n+  echo\n+else\n+  # It is too hard to guarantee that vis_hide and gen-hide-list will never\n+  # be referenced if SHLIB_LINK is not set, so set them to the values they'd\n+  # have if SHLIB_LINK were set and we didn't have visibility support.\n+  echo \"vis_hide =\"\n+  echo \"gen-hide-list = echo > \\$@\"\n+fi\n+\n+# Remove any objects from lib2funcs and LIB2_DIVMOD_FUNCS that are\n+# defined as optimized assembly code in LIB1ASMFUNCS.\n+for name in $LIB1ASMFUNCS; do\n+  lib2funcs=`echo $lib2funcs | sed -e 's/^'$name' //' \\\n+\t\t\t\t   -e 's/ '$name' / /' \\\n+\t\t\t\t   -e 's/ '$name'$//'`\n+  LIB2_DIVMOD_FUNCS=`echo $LIB2_DIVMOD_FUNCS | sed -e 's/^'$name' //' \\\n+\t\t\t\t                   -e 's/ '$name' / /' \\\n+\t\t\t\t                   -e 's/ '$name'$//'`\n+done\n+\n #\n-# Build libgcc1 components.\n+# Rules to generate object files.\n #\n \n-libgcc1_objs=\"\"\n+for ml in $MULTILIBS; do\n \n-for name in $LIB1ASMFUNCS; do\n-  for ml in $MULTILIBS; do\n-    dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-    flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n-    out=\"libgcc/${dir}/${name}${objext}\"\n+  # Work out relevant parameters that depend only on the multilib.\n+  dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n+  flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n+  shlib_dir=\n+  shlib_dir_qual=\n+  libgcc_a=$dir/libgcc.a\n+  libgcov_a=$dir/libgcov.a\n+  libgcc_eh_a=\n+  libgcc_s_so=\n+  libunwind_a=\n+  libunwind_so=\n \n-    echo ${out}: stmp-dirs '$(srcdir)/config/$(LIB1ASMSRC)'\n-    echo \"\t$gcc_compile\" $flags -DL$name -xassembler-with-cpp \\\n-\t  -c '$(srcdir)/config/$(LIB1ASMSRC)' -o $out\n+  if [ \"$LIBUNWIND\" ]; then\n+    libunwind_a=$dir/libunwind.a\n+  fi\n+  if [ \"$SHLIB_LINK\" ]; then\n+    if [ -z \"$SHLIB_MULTILIB\" ]; then\n+      if [ \"$dir\" = . ]; then\n+\tlibgcc_eh_a=$dir/libgcc_eh.a\n+\tlibgcc_s_so_base=$dir/libgcc_s\n+\tlibgcc_s_so=${libgcc_s_so_base}${SHLIB_EXT}\n+\tif [ \"$LIBUNWIND\" ]; then\n+\t  libunwind_so_base=$dir/libunwind\n+\t  libunwind_so=${libunwind_so_base}${SHLIB_EXT}\n+\tfi\n+      else\n+\tlibgcc_eh_a=$dir/libgcc_eh.a\n+\tlibgcc_s_so_base=$dir/libgcc_s_`echo $dir | sed s,/,_,g`\n+\tlibgcc_s_so=${libgcc_s_so_base}${SHLIB_EXT}\n+\tif [ \"$LIBUNWIND\" ]; then\n+\t  libunwind_so_base=$dir/libunwind_`echo $dir | sed s,/,_,g`\n+\t  libunwind_so=${libunwind_so_base}${SHLIB_EXT}\n+\tfi\n+      fi\n \n-    # Remove any objects from lib2funcs and LIB2_DIVMOD_FUNCS that are\n-    # defined as optimized assembly code in LIB1ASMFUNCS.\n-    lib2funcs=`echo $lib2funcs | sed -e 's/^'$name' //' \\\n-\t\t\t\t     -e 's/ '$name' / /' \\\n-\t\t\t\t     -e 's/ '$name'$//'`\n-    LIB2_DIVMOD_FUNCS=`echo $LIB2_DIVMOD_FUNCS | sed -e 's/^'$name' //' \\\n-\t\t\t\t                     -e 's/ '$name' / /' \\\n-\t\t\t\t                     -e 's/ '$name'$//'`\n-  done\n-  libgcc1_objs=\"$libgcc1_objs ${name}${objext}\"\n-done\n+      libgcc_s_soname=$libgcc_s_so_base\n+      libunwind_soname=$libunwind_so_base\n \n-#\n-# Build libgcc2 components.\n-#\n+      if [ -n \"$MULTILIB_OSDIRNAMES\" ]; then\n+\tif [ \"$dir\" != . ]; then\n+\t  gcc_multilib_dir=`./xgcc -B./ $flags --print-multi-directory`\n+\t  os_multilib_dir=`./xgcc -B./ $flags --print-multi-os-directory`\n+\t  shlib_dir=\"$dir\"/\n+\t  gcc_multilib_sup=`echo $gcc_multilib_dir | sed 's~^[^/]*/~~'`\n+\t  os_multilib_base=`echo $os_multilib_dir | sed -n \"s~/${gcc_multilib_sup}\\$~~p\"`\n+\t  if [ -z \"$os_multilib_base\" ]; then\n+\t    libgcc_s_soname=libgcc_s\n+\t    libunwind_soname=libunwind\n+\t    if [ \"$os_multilib_dir\" != \".\" ]; then\n+\t      shlib_dir_qual=\"/$os_multilib_dir\"\n+\t    fi\n+\t  else\n+\t    libgcc_s_soname=libgcc_s_`echo $gcc_multilib_sup | sed s,/,_,g`\n+\t    libunwind_soname=libunwind_`echo $gcc_multilib_sup | sed s,/,_,g`\n+\t    shlib_dir_qual=\"/$os_multilib_base\"\n+\t  fi\n+\tfi\n+      fi\n \n-libgcc2_objs=\"\"\n-libgcc2_st_objs=\"\"\n-libgcc2_eh_static_objs=\"\"\n-libgcc2_eh_shared_objs=\"\"\n+    elif [ \"$SHLIB_MULTILIB\" = \"$dir\" ]; then\n+      libgcc_eh_a=$dir/libgcc_eh.a\n+      libgcc_s_so_base=$dir/libgcc_s\n+      libgcc_s_so=${libgcc_s_so_base}${SHLIB_EXT}\n+      if [ \"$LIBUNWIND\" ]; then\n+\tlibunwind_so_base=$dir/libunwind\n+\tlibunwind_so=${libunwind_so_base}${SHLIB_EXT}\n+      fi\n \n-for name in $lib2funcs; do\n-  for ml in $MULTILIBS; do\n-    dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-    flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n-    out=\"libgcc/${dir}/${name}${objext}\"\n+      libgcc_s_soname=$libgcc_s_so_base\n+      libunwind_soname=$libunwind_so_base\n+    fi\n+  fi\n \n-    echo $out: $libgcc2_c_dep\n-    echo \"\t$gcc_compile\" $flags -DL$name \\\n-      -c '$(srcdir)/libgcc2.c' -o $out\n+  echo\n+  echo \\#\n+  echo \\# ml: $ml\n+  echo \\# dir: $dir\n+  echo \\# flags: $flags\n+  echo \\# libgcc_a: $libgcc_a\n+  echo \\# libgcov_a: $libgcov_a\n+  echo \\# libgcc_eh_a: $libgcc_eh_a\n+  echo \\# libunwind_a: $libunwind_a\n+  echo \\#\n+  echo \\# gcc_multilib_dir: $gcc_multilib_dir\n+  echo \\# gcc_multilib_sup: $gcc_multilib_sup\n+  echo \\# os_multilib_dir: $os_multilib_dir\n+  echo \\# os_multilib_base: $os_multilib_base\n+  echo \\# shlib_dir: $shlib_dir\n+  echo \\# shlib_dir_qual: $shlib_dir_qual\n+  echo \\#\n+  echo \\# libgcc_s_so: $libgcc_s_so\n+  echo \\# libgcc_s_so_base: $libgcc_s_so_base\n+  echo \\# libgcc_s_soname: $libgcc_s_soname\n+  echo \\# \n+  echo \\# libunwind_so: $libunwind_so\n+  echo \\# libunwind_so_base: $libunwind_so_base\n+  echo \\# libunwind_soname: $libunwind_soname\n+  echo \\#\n+  echo\n+\n+  # Update list of directories.\n+  if [ $dir != . ]; then\n+    echo \"dirs += ${dir} libgcc/${dir}\"\n+    echo\n+  fi\n+\n+  #\n+  # Build libgcc1 components.\n+  #\n+  for name in $LIB1ASMFUNCS; do\n+    if [ \"$libgcc_s_so\" ]; then\n+      out=\"libgcc/${dir}/${name}${objext}\"\n+      outS=\"libgcc/${dir}/${name}_s${objext}\"\n+      outV=\"libgcc/${dir}/${name}.vis\"\n+\n+      echo ${outS}: stmp-dirs '$(srcdir)/config/$(LIB1ASMSRC)'\n+      echo \"\t$gcc_compile\" $flags -DL$name -xassembler-with-cpp \\\n+\t  -c '$(srcdir)/config/$(LIB1ASMSRC)' -o $outS\n+\n+      echo ${out}: stmp-dirs '$(srcdir)/config/$(LIB1ASMSRC)' ${outV}\n+      echo \"\t$gcc_compile\" $flags -DL$name -xassembler-with-cpp \\\n+\t  -c '$(srcdir)/config/$(LIB1ASMSRC)' -include $outV -o $out\n+\n+      echo \"${outV}: ${outS}; \\$(gen-hide-list)\"\n+\n+      echo $libgcc_a: $out\n+      echo $libgcc_s_so: $outS\n+      if [ \"$SHLIB_MKMAP\" ]; then\n+        echo libgcc/${dir}/libgcc.map: $outS\n+      fi\n+    else\n+      out=\"libgcc/${dir}/${name}${objext}\"\n+      echo ${out}: stmp-dirs '$(srcdir)/config/$(LIB1ASMSRC)'\n+      echo \"\t$gcc_compile\" $flags -DL$name -xassembler-with-cpp \\\n+\t  -c '$(srcdir)/config/$(LIB1ASMSRC)' -o $out\n+      echo $libgcc_a: $out\n+    fi\n   done\n-  libgcc2_objs=\"$libgcc2_objs ${name}${objext}\"\n-done\n \n-for name in $LIB2FUNCS_ST; do\n-  for ml in $MULTILIBS; do\n-    dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-    flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n-    out=\"libgcc/${dir}/${name}${objext}\"\n+  #\n+  # Build libgcc2 components.\n+  #\n \n-    echo $out: $libgcc2_c_dep\n-    echo \"\t$gcc_compile\" $flags -DL$name \\\n-      -c '$(srcdir)/libgcc2.c' -o $out\n+  for name in $lib2funcs; do\n+    if [ \"$libgcc_s_so\" ]; then\n+      out=\"libgcc/${dir}/${name}${objext}\"\n+      outS=\"libgcc/${dir}/${name}_s${objext}\"\n+\n+      echo $outS: $libgcc2_c_dep\n+      echo \"\t$gcc_compile\" $flags -DL$name -c '$(srcdir)/libgcc2.c' -o $outS\n+\n+      echo $out: $libgcc2_c_dep\n+      echo \"\t$gcc_compile\" $flags -DL$name '$(vis_hide)' \\\n+        -c '$(srcdir)/libgcc2.c' -o $out\n+\n+      echo $libgcc_a: $out\n+      echo $libgcc_s_so: $outS\n+      if [ \"$SHLIB_MKMAP\" ]; then\n+        echo libgcc/${dir}/libgcc.map: $outS\n+      fi\n+    else\n+      out=\"libgcc/${dir}/${name}${objext}\"\n+      echo ${out}: stmp-dirs '$(srcdir)/config/$(LIB1ASMSRC)'\n+      echo \"\t$gcc_compile\" $flags -DL$name -c '$(srcdir)/libgcc2.c' -o $outS\n+      echo $libgcc_a: $out\n+    fi\n   done\n-  libgcc2_st_objs=\"$libgcc2_st_objs ${name}${objext}\"\n-done\n \n-for name in $LIB2_DIVMOD_FUNCS; do\n-  for ml in $MULTILIBS; do\n-    dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-    flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n+  for name in $LIB2FUNCS_ST; do\n     out=\"libgcc/${dir}/${name}${objext}\"\n \n     echo $out: $libgcc2_c_dep\n-    echo \"\t$gcc_compile\" $flags -DL$name \\\n-      -c '$(srcdir)/libgcc2.c' -fexceptions -fnon-call-exceptions -o $out\n+    echo \"\t$gcc_compile\" $flags -DL$name '$(vis_hide)' \\\n+      -c '$(srcdir)/libgcc2.c' -o $out\n+    echo ${dir}/libgcc.a: $out\n   done\n-  libgcc2_objs=\"$libgcc2_objs ${name}${objext}\"\n-done\n \n-if [ \"$FPBIT\" ]; then\n-  for name in $FPBIT_FUNCS; do\n-    for ml in $MULTILIBS; do\n-      dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-      flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n+  for name in $LIB2_DIVMOD_FUNCS; do\n+    if [ \"$libgcc_s_so\" ]; then\n       out=\"libgcc/${dir}/${name}${objext}\"\n+      outS=\"libgcc/${dir}/${name}_s${objext}\"\n \n-      echo $out: $FPBIT $fpbit_c_dep\n-      echo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n-\t-c $FPBIT -o $out\n-    done\n-    libgcc2_objs=\"$libgcc2_objs ${name}${objext}\"\n-  done\n-fi\n+      echo $outS: $libgcc2_c_dep\n+      echo \"\t$gcc_compile\" $flags -DL$name \\\n+        -fexceptions -fnon-call-exceptions -c '$(srcdir)/libgcc2.c' -o $outS\n \n-if [ \"$DPBIT\" ]; then\n-  for name in $DPBIT_FUNCS; do\n-    for ml in $MULTILIBS; do\n-      dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-      flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n-      out=\"libgcc/${dir}/${name}${objext}\"\n+      echo $out: $libgcc2_c_dep\n+      echo \"\t$gcc_compile\" $flags -DL$name '$(vis_hide)' \\\n+        -fexceptions -fnon-call-exceptions -c '$(srcdir)/libgcc2.c' -o $out\n \n-      echo $out: $DPBIT $fpbit_c_dep\n-      echo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n-\t-c $DPBIT -o $out\n-    done\n-    libgcc2_objs=\"$libgcc2_objs ${name}${objext}\"\n+      echo $libgcc_a: $out\n+      echo $libgcc_s_so: $outS\n+      if [ \"$SHLIB_MKMAP\" ]; then\n+        echo libgcc/${dir}/libgcc.map: $outS\n+      fi\n+    else\n+      out=\"libgcc/${dir}/${name}${objext}\"\n+      echo ${out}: stmp-dirs '$(srcdir)/config/$(LIB1ASMSRC)'\n+      echo \"\t$gcc_compile\" $flags -DL$name \\\n+        -fexceptions -fnon-call-exceptions -c '$(srcdir)/libgcc2.c' -o $outS\n+      echo $libgcc_a: $out\n+    fi\n   done\n-fi\n \n-if [ \"$TPBIT\" ]; then\n-  for name in $TPBIT_FUNCS; do\n-    for ml in $MULTILIBS; do\n-      dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-      flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n-      out=\"libgcc/${dir}/${name}${objext}\"\n+  #\n+  # Build software floating point functions.\n+  #\n+\n+  if [ \"$FPBIT\" ]; then\n+    for name in $FPBIT_FUNCS; do\n+      if [ \"$libgcc_s_so\" ]; then\n+\tout=\"libgcc/${dir}/${name}${objext}\"\n+\toutS=\"libgcc/${dir}/${name}_s${objext}\"\n+\n+\techo $outS: $FPBIT $fpbit_c_dep\n+\techo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n+\t  -c $FPBIT -o $outS\n+\n+        echo $out: $FPBIT $fpbit_c_dep\n+        echo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n+\t  '$(vis_hide)' -c $FPBIT -o $out\n+\n+\techo $libgcc_a: $out\n+\techo $libgcc_s_so: $outS\n+\tif [ \"$SHLIB_MKMAP\" ]; then\n+\t  echo libgcc/${dir}/libgcc.map: $outS\n+\tfi\n+      else\n+\tout=\"libgcc/${dir}/${name}${objext}\"\n+\techo $out: $FPBIT $fpbit_c_dep\n+\techo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n+\t  -c $FPBIT -o $out\n \n-      echo $out: $TPBIT $fpbit_c_dep\n-      echo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n-\t-c $TPBIT -o $out\n+\techo $libgcc_a: $out\n+      fi\n     done\n-    libgcc2_objs=\"$libgcc2_objs ${name}${objext}\"\n-  done\n-fi\n+  fi\n \n-for file in $LIB2ADD; do\n-  name=`echo $file | sed -e 's/[.][cSo]$//' -e 's/[.]asm$//' -e 's/[.]txt$//'`\n-  oname=`echo $name | sed -e 's,.*/,,'`\n+  if [ \"$DPBIT\" ]; then\n+    for name in $DPBIT_FUNCS; do\n+      if [ \"$libgcc_s_so\" ]; then\n+\tout=\"libgcc/${dir}/${name}${objext}\"\n+\toutS=\"libgcc/${dir}/${name}_s${objext}\"\n \n-  for ml in $MULTILIBS; do\n-    dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-    flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n-    out=\"libgcc/${dir}/${oname}${objext}\"\n-    if [ ${name}.asm = ${file} ]; then\n-      flags=\"$flags -xassembler-with-cpp\"\n-    fi\n+\techo $outS: $DPBIT $fpbit_c_dep\n+\techo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n+\t  -c $DPBIT -o $outS\n \n-    echo $out: stmp-dirs $file $libgcc_dep\n-    echo \"\t$gcc_compile\" $flags -c $file -o $out\n-  done\n-  libgcc2_objs=\"$libgcc2_objs ${oname}${objext}\"\n-done\n+        echo $out: $DPBIT $fpbit_c_dep\n+        echo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n+\t  '$(vis_hide)' -c $DPBIT -o $out\n \n-for file in $LIB2ADDEH; do\n-  name=`echo $file | sed -e 's/[.][cSo]$//' -e 's/[.]asm$//' -e 's/[.]txt$//'`\n-  oname=`echo $name | sed -e 's,.*/,,'`\n+\techo $libgcc_a: $out\n+\techo $libgcc_s_so: $outS\n+\tif [ \"$SHLIB_MKMAP\" ]; then\n+\t  echo libgcc/${dir}/libgcc.map: $outS\n+\tfi\n+      else\n+\tout=\"libgcc/${dir}/${name}${objext}\"\n+\techo $out: $DPBIT $fpbit_c_dep\n+\techo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n+\t  -c $DPBIT -o $out\n \n-  for ml in $MULTILIBS; do\n-    dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-    flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n-    out=\"libgcc/${dir}/${oname}${objext}\"\n-    if [ ${name}.asm = ${file} ]; then\n-      flags=\"$flags -xassembler-with-cpp\"\n-    fi\n+\techo $libgcc_a: $out\n+      fi\n+    done\n+  fi\n \n-    echo $out: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n-    echo \"\t$gcc_compile\" $flags -fexceptions -c $file -o $out\n-  done\n-  if [ -z \"$SHLIB_LINK\" ]; then\n-    libgcc2_objs=\"$libgcc2_objs ${oname}${objext}\"\n+  if [ \"$TPBIT\" ]; then\n+    for name in $TPBIT_FUNCS; do\n+      if [ \"$libgcc_s_so\" ]; then\n+\tout=\"libgcc/${dir}/${name}${objext}\"\n+\toutS=\"libgcc/${dir}/${name}_s${objext}\"\n+\n+\techo $outS: $TPBIT $fpbit_c_dep\n+\techo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n+\t  -c $TPBIT -o $outS\n+\n+        echo $out: $TPBIT $fpbit_c_dep\n+        echo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n+\t  '$(vis_hide)' -c $TPBIT -o $out\n+\n+\techo $libgcc_a: $out\n+\techo $libgcc_s_so: $outS\n+\tif [ \"$SHLIB_MKMAP\" ]; then\n+\t  echo libgcc/${dir}/libgcc.map: $outS\n+\tfi\n+      else\n+\tout=\"libgcc/${dir}/${name}${objext}\"\n+\techo $out: $TPBIT $fpbit_c_dep\n+\techo \"\t$gcc_compile\" -DFINE_GRAINED_LIBRARIES $flags -DL$name \\\n+\t  -c $TPBIT -o $out\n+\n+\techo $libgcc_a: $out\n+      fi\n+    done\n   fi\n-done\n \n-if [ \"$SHLIB_LINK\" ]; then\n-  # Those should be in libgcc_eh.a.\n-  for file in $LIB2ADDEHSTATIC; do\n-    name=`echo $file | sed -e 's/[.][cSo]$//' -e 's/[.]asm$//' -e 's/[.]txt$//'`\n+  for file in $LIB2ADD; do\n+    name=`echo $file | sed -e 's/[.][cS]$//' -e 's/[.]asm$//'`\n     oname=`echo $name | sed -e 's,.*/,,'`\n-    libgcc2_eh_static_objs=\"$libgcc2_eh_static_objs ${oname}${objext}\"\n-  done\n \n-  # Those should be in libgcc.so.\n-  for file in $LIB2ADDEHSHARED; do\n-    name=`echo $file | sed -e 's/[.][cSo]$//' -e 's/[.]asm$//' -e 's/[.]txt$//'`\n-    oname=`echo $name | sed -e 's,.*/,,'`\n-    libgcc2_eh_shared_objs=\"$libgcc2_eh_shared_objs ${oname}${objext}\"\n+    if [ \"$libgcc_s_so\" ]; then\n+      out=\"libgcc/${dir}/${oname}${objext}\"\n+      outS=\"libgcc/${dir}/${oname}_s${objext}\"\n+\n+      case $file in\n+\t*.c)\n+\t  echo $outS: stmp-dirs $file $libgcc_dep\n+\t  echo \"\t$gcc_compile\" $flags -c $file -o $outS\n+\n+\t  echo $out: stmp-dirs $file $libgcc_dep\n+\t  echo \"\t$gcc_compile\" $flags '$(vis_hide)' -c $file -o $out\n+\t;;\n+\n+\t*.asm | *.S)\n+\t  outV=\"libgcc/${dir}/${oname}.vis\"\n+\n+\t  echo $outS: stmp-dirs $file $libgcc_dep\n+\t  echo \"\t$gcc_compile\" $flags -xassembler-with-cpp \\\n+\t         -c $file -o $outS\n+\n+\t  echo $out: stmp-dirs $file $libgcc_dep $outV\n+\t  echo \"\t$gcc_compile\" $flags -xassembler-with-cpp \\\n+\t         -include $outV -c $file -o $out\n+\t  echo \"${outV}: ${outS}; \\$(gen-hide-list)\"\n+\t;;\n+\t\n+        *)\n+\t  echo \"Unhandled extension: $file\" >&2\n+\t  exit 1\n+\t;;\n+      esac\n+\n+      echo $libgcc_a: $out\n+      echo $libgcc_s_so: $outS\n+      if [ \"$SHLIB_MKMAP\" ]; then\n+\techo libgcc/${dir}/libgcc.map: $outS\n+      fi\n+    else\n+      out=\"libgcc/${dir}/${oname}${objext}\"\n+      case $file in\n+\t*.c)\n+\t  echo $out: stmp-dirs $file $libgcc_dep\n+\t  echo \"\t$gcc_compile\" $flags -c $file -o $out\n+\t;;\n+\n+\t*.asm | *.S)\n+\t  echo $out: stmp-dirs $file $libgcc_dep\n+\t  echo \"\t$gcc_compile\" $flags -xassembler-with-cpp \\\n+\t         -c $file -o $out\n+\t;;\n+\t\n+        *)\n+\t  echo \"Unhandled extension: $file\" >&2\n+\t  exit 1\n+\t;;\n+      esac\n+      \n+      echo $libgcc_a: $out\n+    fi\n   done\n-fi\n \n-for file in $LIB2ADD_ST; do\n-  name=`echo $file | sed -e 's/[.][cSo]$//' -e 's/[.]asm$//' -e 's/[.]txt$//'`\n-  oname=`echo $name | sed -e 's,.*/,,'`\n \n-  for ml in $MULTILIBS; do\n-    dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-    flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n+  for file in $LIB2ADD_ST; do\n+    name=`echo $file | sed -e 's/[.][cSo]$//' -e 's/[.]asm$//'`\n+    oname=`echo $name | sed -e 's,.*/,,'`\n     out=\"libgcc/${dir}/${oname}${objext}\"\n-    if [ ${name}.asm = ${file} ]; then\n-      flags=\"$flags -xassembler-with-cpp\"\n-    fi\n \n-    echo $out: stmp-dirs $file $libgcc_dep\n-    echo \"\t$gcc_compile\" $flags -c $file -o $out\n+    case $file in\n+      *.c)\n+\techo $out: stmp-dirs $file $libgcc_dep\n+\techo \"\t$gcc_compile\" $flags '$(vis_hide)' -c $file -o $out\n+      ;;\n+\n+      *.asm | *.S)\n+        # We may have to compile it twice in order to establish the list\n+        # of symbols to be marked hidden.\n+\tif [ \"$libgcc_so\" ]; then\n+\t  outV=\"libgcc/${dir}/${oname}.vis\"\n+\t  outT=\"libgcc/${dir}/${oname}_t${objext}\"\n+\t  echo ${outT}: stmp-dirs $file $libgcc_dep\n+\t  echo \"\t$gcc_compile\" $flags -xassembler-with-cpp \\\n+\t          -c $file -o ${outT}\n+\t  echo $out: stmp-dirs $file $libgcc_dep $outV\n+\t  echo \"\t$gcc_compile\" $flags -xassembler-with-cpp \\\n+\t          -include $outV -c $file -o $out\n+\t  echo \"${outV}: ${outT}; \\$(gen-hide-list)\"\n+\telse\n+\t  echo $out: stmp-dirs $file $libgcc_dep\n+\t  echo \"\t$gcc_compile\" $flags -xassembler-with-cpp \\\n+\t          -c $file -o $out\n+\tfi\n+      ;;\n+\n+      *)\n+      echo \"Unhandled extension: $file\" >&2\n+      exit 1\n+      ;;\n+    esac\n+    echo $libgcc_a: $out\n   done\n-  libgcc2_st_objs=\"$libgcc2_st_objs ${oname}${objext}\"\n-done\n \n-if [ \"$LIBUNWIND\" ]; then\n-  libunwind_static_objs=\"\"\n-  libunwind_shared_objs=\"\"\n-  for file in $LIBUNWIND; do\n-    name=`echo $file | sed -e 's/[.][cSo]$//' -e 's/[.]asm$//' -e 's/[.]txt$//'`\n-    oname=`echo $name | sed -e 's,.*/,,'`\n+  # If we don't have libgcc_eh.a, only LIB2ADDEH matters.  If we do, only\n+  # LIB2ADDEHSTATIC and LIB2ADDEHSHARED matter.  (Usually all three are\n+  # identical.)  We do _not_ handle assembly files in this context.\n \n-    for ml in $MULTILIBS; do\n-      dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-      flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n+  if [ \"$libgcc_eh_a\" ]; then\n+    for file in $LIB2ADDEHSTATIC; do\n+      case $file in\n+        *.c) ;;\n+\t*)   echo \"Unhandled extension: $file\">&2; exit 1 ;;\n+       esac\n+\n+      name=`echo $file | sed -e 's/[.]c$//'`\n+      oname=`echo $name | sed -e 's,.*/,,'`\n       out=\"libgcc/${dir}/${oname}${objext}\"\n-      if [ ${name}.asm = ${file} ]; then\n-\tflags=\"$flags -xassembler-with-cpp\"\n-      fi\n \n-      echo $out: stmp-dirs $file $LIBUNWINDDEP\n+      echo $out: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n+      echo \"\t$gcc_compile\" $flags '$(vis_hide)' -fexceptions -c $file -o $out\n+      echo $libgcc_eh_a: $out\n+    done\n+\n+    for file in $LIB2ADDEHSHARED; do\n+      case $file in\n+        *.c) ;;\n+\t*)   echo \"Unhandled extension: $file\">&2; exit 1 ;;\n+       esac\n+\n+      name=`echo $file | sed -e 's/[.]c$//'`\n+      oname=`echo $name | sed -e 's,.*/,,'`\n+      out=\"libgcc/${dir}/${oname}_s${objext}\"\n+\n+      echo $out: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n       echo \"\t$gcc_compile\" $flags -fexceptions -c $file -o $out\n-      echo ${out}s: stmp-dirs $file $LIBUNWINDDEP\n-      echo \"\t$gcc_compile\" $flags -fexceptions -DSHARED -c $file -o ${out}s\n+      echo $libgcc_s_so: $out\n+      if [ \"$SHLIB_MKMAP\" ]; then\n+\techo libgcc/${dir}/libgcc.map: $out\n+      fi\n     done\n-    libunwind_static_objs=\"$libunwind_static_objs ${oname}${objext}\"\n-    libunwind_shared_objs=\"$libunwind_shared_objs ${oname}${objext}s\"\n-  done\n-fi\n \n-#\n-# build libgcov components\n-#\n+  else # no SHLIB_LINK\n+    for file in $LIB2ADDEH; do\n+      case $file in\n+        *.c) ;;\n+\t*)   echo \"Unhandled extension: $file\">&2; exit 1 ;;\n+       esac\n \n-libgcov_objs=\"\"\n+      name=`echo $file | sed -e 's/[.]c$//'`\n+      oname=`echo $name | sed -e 's,.*/,,'`\n+      out=\"libgcc/${dir}/${oname}${objext}\"\n \n-for name in $LIBGCOV; do\n-  for ml in $MULTILIBS; do\n+      echo $out: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n+      echo \"\t$gcc_compile\" $flags -fexceptions '$(vis_hide)' -c $file -o $out\n+      echo $libgcc_a: $out\n+    done\n+  fi\n+\n+  # Again, this does not handle assembly.\n+  if [ \"$LIBUNWIND\" ]; then\n+    for file in $LIBUNWIND; do\n+      case $file in\n+        *.c) ;;\n+\t*)   echo \"Unhandled extension: $file\">&2; exit 1 ;;\n+       esac\n+\n+      name=`echo $file | sed -e 's/[.]c$//'`\n+      oname=`echo $name | sed -e 's,.*/,,'`\n+\n+      if [ \"$libunwind_so\" ]; then\n+        out=\"libgcc/${dir}/${oname}${objext}\"\n+\toutS=\"libgcc/${dir}/${oname}_s${objext}\"\n+\n+\techo $out: stmp-dirs $file $LIBUNWINDDEP\n+\techo \"\t$gcc_compile $flags -fexceptions \\$(vis_hide) -c $file -o $out\"\n+\n+\techo $outS: stmp-dirs $file $LIBUNWINDDEP\n+\techo \"\t$gcc_compile $flags -fexceptions -DSHARED -c $file -o $outS\"\n+\n+\techo $libunwind_a: $out\n+\techo $libunwind_so: $outS\n+      else\n+        out=\"libgcc/${dir}/${oname}${objext}\"\n+\techo $out: stmp-dirs $file $LIBUNWINDDEP\n+\techo \"\t$gcc_compile $flags -fexceptions \\$(vis_hide) -c $file -o $out\"\n+\techo $libunwind_a: $out\n+      fi\n+    done\n+  fi\n+\n+  #\n+  # build libgcov components\n+  #\n+  for name in $LIBGCOV; do\n     dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n     flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n     out=\"libgcc/${dir}/${name}${objext}\"\n \n     echo $out: $libgcov_c_dep\n-    echo \"\t$gcc_compile\" $flags -DL$name \\\n-      -c '$(srcdir)/libgcov.c' -o $out\n+    echo \"\t$gcc_compile $flags -DL$name -c \\$(srcdir)/libgcov.c -o $out\"\n+    echo $libgcov_a: $out\n   done\n-  libgcov_objs=\"$libgcov_objs ${name}${objext}\"\n-done\n \n-# SHLIB_MKMAP\n-# SHLIB_MKMAP_OPTS\n-# SHLIB_MAPFILES\n-for ml in $MULTILIBS; do\n+  # Library build rules.\n   dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n   flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n \n-  libgcc_objs=\"\"\n-  libgcc_eh_static_objs=\"\"\n-  libgcc_eh_shared_objs=\"\"\n-  for o in $libgcc1_objs; do\n-    libgcc_objs=\"$libgcc_objs libgcc/${dir}/$o\"\n-  done\n-  for o in $libgcc2_objs; do\n-    libgcc_objs=\"$libgcc_objs libgcc/${dir}/$o\"\n-  done\n-  for o in $libgcc2_eh_static_objs; do\n-    libgcc_eh_static_objs=\"$libgcc_eh_static_objs libgcc/${dir}/$o\"\n-  done\n-  for o in $libgcc2_eh_shared_objs; do\n-    libgcc_eh_shared_objs=\"$libgcc_eh_shared_objs libgcc/${dir}/$o\"\n-  done\n-  libgcc_sh_objs=\"$libgcc_objs $libgcc_eh_shared_objs\"\n-  shlib_deps=\"$libgcc_sh_objs\"\n-\n-  libgcc_st_objs=\"\"\n-  for o in $libgcc2_st_objs; do\n-    libgcc_st_objs=\"$libgcc_st_objs libgcc/${dir}/$o\"\n-  done\n-\n-  libgcov_a_objs=\"\"\n-  for o in $libgcov_objs; do\n-    libgcov_a_objs=\"$libgcov_a_objs libgcc/${dir}/$o\"\n-  done\n-\n-  if [ \"$LIBUNWIND\" ]; then\n-    libunwind_a_objs=\"\"\n-    for o in $libunwind_static_objs; do\n-      libunwind_a_objs=\"$libunwind_a_objs libgcc/${dir}/$o\"\n-    done\n-    libunwind_sh_objs=\"\"\n-    for o in $libunwind_shared_objs; do\n-      libunwind_sh_objs=\"$libunwind_sh_objs libgcc/${dir}/$o\"\n-    done\n-    shlibunwind_deps=\"$libunwind_sh_objs\"\n-  fi\n-  \n+  # Map-file generation.\n   if [ \"$SHLIB_LINK\" -a \"$SHLIB_MKMAP\" ]; then\n     mapfile=\"libgcc/${dir}/libgcc.map\"\n     tmpmapfile=\"libgcc/${dir}/tmp-libgcc.map\"\n@@ -381,43 +665,27 @@ for ml in $MULTILIBS; do\n     # The behavior of here documents is more predictable.\n     cat <<EOF\n \n-${mapfile}: $SHLIB_MKMAP $SHLIB_MAPFILES $libgcc_sh_objs\n-\t{ \\$(NM_FOR_TARGET) $SHLIB_NM_FLAGS $libgcc_sh_objs; echo %%; \\\\\n+${mapfile}: $SHLIB_MKMAP $SHLIB_MAPFILES\n+\t{ \\$(NM_FOR_TARGET) $SHLIB_NM_FLAGS \\$(objects); echo %%; \\\\\n \t  cat $SHLIB_MAPFILES \\\\\n \t    | sed -e '/^[   ]*#/d' \\\\\n \t          -e 's/^%\\(if\\|else\\|elif\\|endif\\|define\\)/#\\1/' \\\\\n \t    | $gcc_compile $flags -E -xassembler-with-cpp -; \\\\\n \t} | \\$(AWK) -f $SHLIB_MKMAP $SHLIB_MKMAP_OPTS > ${tmpmapfile}\n \tmv '$tmpmapfile' \\$@\n+$libgcc_s_so: ${mapfile}\n EOF\n   fi\n-  shlib_deps=\"$shlib_deps $mapfile\"\n \n   # Depend on EXTRA_MULTILIB_PARTS, since that's where crtbegin/end\n   # usually are put in a true multilib situation.\n+  shlib_extra_deps=\"\"\n   for f in $EXTRA_MULTILIB_PARTS; do\n-    shlib_deps=\"$shlib_deps $dir/$f\"\n+    shlib_extra_deps=\"$shlib_extra_deps $dir/$f\"\n   done\n+  echo $libgcc_s_so: $shlib_extra_deps\n \n-  libgcc_a_objs=\"$libgcc_objs $libgcc_st_objs\"\n-\n-  if [ \"@libgcc_visibility@\" = yes -a \"$SHLIB_LINK\" ]; then\n-    libgcc_a_objs=\n-    echo \"\"\n-    echo \"libgcc/${dir}/stacknote.s: stmp-dirs\"\n-    echo '\t@( echo | $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) '${flags}' -S -o - -xc - | grep .note.GNU-stack || : ) > $@.tmp'\n-    echo '\t@mv -f $@.tmp $@'\n-    echo \"\"\n-    for o in $libgcc_objs $libgcc_st_objs; do\n-      # .oS objects will have all non-local symbol definitions .hidden\n-      oS=`echo ${o} | sed s~${objext}'$~.oS~g'`\n-      echo \"${oS}: stmp-dirs libgcc/${dir}/stacknote.s ${o}\"\n-      # non-GNU nm emits three fields even for undefined and typeless symbols,\n-      # so explicitly omit them\n-      echo '\t( $(NM_FOR_TARGET) '${SHLIB_NM_FLAGS} ${o}' | $(AWK) '\\''NF == 3 && $$2 !~ /^[UN]$$/ { print \"\\t.hidden\", $$3 }'\\''; cat libgcc/${dir}/stacknote.s ) | $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) '${flags}' -r -nostdinc -nostdlib -o $@ '${o}' -xassembler -'\n-      libgcc_a_objs=\"${libgcc_a_objs} ${oS}\"\n-    done\n-  fi\n+  # Static libraries.\n \n   # Each of these .a files depends on stmp-dirs.  It would seem that\n   # this dependency is redundant, since each of the object files\n@@ -426,186 +694,70 @@ EOF\n   # dependency is required; the directory containing the archive must\n   # exist before the archive itself can be created.\n   echo \"\"\n-  echo \"${dir}/libgcc.a: stmp-dirs $libgcc_a_objs\"\n-  echo \"\t-rm -rf ${dir}/libgcc.a\"\n-  echo '\t$(AR_CREATE_FOR_TARGET)' ${dir}/libgcc.a $libgcc_a_objs\n-  echo '\t$(RANLIB_FOR_TARGET)' ${dir}/libgcc.a\n+  echo \"$libgcc_a: stmp-dirs\"\n+  echo \"\t-rm -f $libgcc_a\"\n+  echo '\t$(AR_CREATE_FOR_TARGET)' $libgcc_a '$(objects)'\n+  echo '\t$(RANLIB_FOR_TARGET)' $libgcc_a\n+  echo \"all: $libgcc_a\"\n \n   echo \"\"\n-  echo \"${dir}/libgcov.a: stmp-dirs $libgcov_a_objs\"\n-  echo \"\t-rm -rf ${dir}/libgcov.a\"\n-  echo '\t$(AR_CREATE_FOR_TARGET)' ${dir}/libgcov.a $libgcov_a_objs\n-  echo '\t$(RANLIB_FOR_TARGET)' ${dir}/libgcov.a\n-\n-  if [ \"$LIBUNWIND\" ]; then\n-    echo \"\"\n-    echo \"${dir}/libunwind.a: stmp-dirs $libunwind_a_objs\"\n-    echo \"\t-rm -rf ${dir}/libunwind.a\"\n-    echo '\t$(AR_CREATE_FOR_TARGET)' ${dir}/libunwind.a $libunwind_a_objs\n-    echo '\t$(RANLIB_FOR_TARGET)' ${dir}/libunwind.a\n+  echo \"$libgcov_a: stmp-dirs\"\n+  echo \"\t-rm -f $libgcov_a\"\n+  echo '\t$(AR_CREATE_FOR_TARGET)' $libgcov_a '$(objects)'\n+  echo '\t$(RANLIB_FOR_TARGET)' $libgcov_a\n+  echo \"all: $libgcov_a\"\n+\n+  # These libraries are not always built.\n+  if [ \"$libunwind_a\" ]; then\n     echo \"\"\n-    echo \"${dir}/libgcc.a: ${dir}/libunwind.a\"\n+    echo \"$libunwind_a: stmp-dirs\"\n+    echo \"\t-rm -f $libunwind_a\"\n+    echo '\t$(AR_CREATE_FOR_TARGET)' $libunwind_a '$(objects)'\n+    echo '\t$(RANLIB_FOR_TARGET)' $libunwind_a\n+    echo \"all: $libunwind_a\"\n   fi\n \n-  if [ \"$SHLIB_LINK\" ]; then\n-\n+  if [ \"$libgcc_eh_a\" ]; then\n     echo \"\"\n-    echo \"${dir}/libgcc_eh.a: stmp-dirs $libgcc_eh_static_objs\"\n-    echo \"\t-rm -rf ${dir}/libgcc_eh.a\"\n-    echo '\t$(AR_CREATE_FOR_TARGET)' ${dir}/libgcc_eh.a $libgcc_eh_static_objs\n+    echo \"${dir}/libgcc_eh.a: stmp-dirs\"\n+    echo \"\t-rm -f ${dir}/libgcc_eh.a\"\n+    echo '\t$(AR_CREATE_FOR_TARGET)' ${dir}/libgcc_eh.a '$(objects)'\n     echo '\t$(RANLIB_FOR_TARGET)' ${dir}/libgcc_eh.a\n+    echo \"all: $libgcc_eh_a\"\n+  fi\n \n-    if [ -z \"$SHLIB_MULTILIB\" ]; then\n-      if [ \"$dir\" = . ]; then\n-\tshlib_base_name=libgcc_s\n-\tshlibunwind_base_name=libunwind\n-      else\n-\tshlib_base_name=libgcc_s_`echo $dir | sed s,/,_,g`\n-\tshlibunwind_base_name=libunwind_`echo $dir | sed s,/,_,g`\n-      fi\n-      shlib_so_name=\"$shlib_base_name\"\n-      shlibunwind_so_name=\"$shlibunwind_base_name\"\n-      if [ \"$LIBUNWIND\" ]; then\n-\tshlib_deps=\"$shlib_deps ${dir}/${shlibunwind_base_name}${SHLIB_EXT}\"\n-      fi\n-      shlib_dir=\n-      shlib_slibdir_qual=\n-      if [ -n \"$MULTILIB_OSDIRNAMES\" ]; then\n-\tif [ \"$dir\" != . ]; then\n-\t  gcc_multilib_dir=`./xgcc -B./ $flags --print-multi-directory`\n-\t  os_multilib_dir=`./xgcc -B./ $flags --print-multi-os-directory`\n-\t  shlib_dir=\"$dir\"/\n-\t  gcc_multilib_sup=`echo $gcc_multilib_dir | sed 's~^[^/]*/~~'`\n-\t  os_multilib_base=`echo $os_multilib_dir | sed -n \"s~/${gcc_multilib_sup}\\$~~p\"`\n-\t  if [ -z \"$os_multilib_base\" ]; then\n-\t    shlib_so_name=libgcc_s\n-\t    shlibunwind_so_name=libunwind\n-\t    if [ \"$os_multilib_dir\" != \".\" ]; then\n-\t\tshlib_slibdir_qual=\"/$os_multilib_dir\"\n-\t    fi\n-\t  else\n-\t    shlib_so_name=libgcc_s_`echo $gcc_multilib_sup | sed s,/,_,g`\n-\t    shlibunwind_so_name=libunwind_`echo $gcc_multilib_sup | sed s,/,_,g`\n-\t    shlib_slibdir_qual=\"/$os_multilib_base\"\n-\t  fi\n-\tfi\n-      fi\n-      echo \"\"\n-      echo \"${dir}/${shlib_base_name}${SHLIB_EXT}: $shlib_deps\"\n-      echo \"\t$SHLIB_LINK\" \\\n+  # Shared libraries.\n+  if [ \"$libgcc_s_so\" ]; then\n+    echo \"\"\n+    echo \"$libgcc_s_so: stmp-dirs $libunwind_so\"\n+    echo \"\t$SHLIB_LINK\" \\\n \t | sed -e \"s%@multilib_flags@%$flags%g\" \\\n \t       -e \"s%@multilib_dir@%$dir%g\" \\\n-\t       -e \"s%@shlib_objs@%$libgcc_sh_objs%g\" \\\n-\t       -e \"s%@shlib_base_name@%$shlib_base_name%g\" \\\n+\t       -e \"s%@shlib_objs@%\\$(objects)%g\" \\\n+\t       -e \"s%@shlib_base_name@%$libgcc_s_so_base%g\" \\\n+\t       -e \"s%@shlib_so_name@%$libgcc_s_soname%g\" \\\n \t       -e \"s%@shlib_map_file@%$mapfile%g\" \\\n-\t       -e \"s%@shlib_so_name@%$shlib_so_name%g\" \\\n \t       -e \"s%@shlib_dir@%$shlib_dir%g\" \\\n-\t       -e \"s%@shlib_slibdir_qual@%%g\"\n-      if [ \"$LIBUNWIND\" ]; then\n-\techo \"\"\n-\techo \"${dir}/${shlibunwind_base_name}${SHLIB_EXT}: $shlibunwind_deps\"\n-\techo \"\t$SHLIBUNWIND_LINK\" \\\n+\t       -e \"s%@shlib_slibdir_qual@%$shlib_dir_qual%g\"\n+    echo \"all: $libgcc_s_so\"\n+  fi\n+\n+  if [ \"$libunwind_so\" ]; then\n+    echo \"\"\n+    echo \"$libunwind_so: stmp-dirs\"\n+    echo \"\t$SHLIBUNWIND_LINK\" \\\n \t   | sed -e \"s%@multilib_flags@%$flags%g\" \\\n \t\t -e \"s%@multilib_dir@%$dir%g\" \\\n-\t\t -e \"s%@shlib_objs@%$libunwind_sh_objs%g\" \\\n-\t\t -e \"s%@shlib_base_name@%$shlibunwind_base_name%g\" \\\n-\t\t -e \"s%@shlib_so_name@%$shlibunwind_so_name%g\" \\\n+\t\t -e \"s%@shlib_objs@%\\$(objects)%g\" \\\n+\t\t -e \"s%@shlib_base_name@%$libunwind_so_base%g\" \\\n+\t\t -e \"s%@shlib_so_name@%$libunwind_soname%g\" \\\n \t\t -e \"s%@shlib_dir@%$shlib_dir%g\" \\\n-\t\t -e \"s%@shlib_slibdir_qual@%%g\"\n-      fi\n-    elif [ \"$SHLIB_MULTILIB\" = \"$dir\" ]; then\n-      shlib_base_name=\"libgcc_s\";\n-      shlibunwind_base_name=\"libunwind\";\n-      echo \"\"\n-      echo \"${shlib_base_name}${SHLIB_EXT}: $shlib_deps\"\n-      echo \"\t$SHLIB_LINK\" \\\n-\t | sed -e \"s%@multilib_flags@%$flags%g\" \\\n-\t       -e \"s%@multilib_dir@%$dir%g\" \\\n-\t       -e \"s%@shlib_objs@%$libgcc_sh_objs%g\" \\\n-\t       -e \"s%@shlib_base_name@%$shlib_base_name%g\" \\\n-\t       -e \"s%@shlib_map_file@%$mapfile%g\" \\\n-\t       -e \"s%@shlib_so_name@%$shlib_base_name%g\" \\\n-\t       -e \"s%@shlib_dir@%%g\" \\\n-\t       -e \"s%@shlib_slibdir_qual@%%g\"\n-      if [ \"$LIBUNWIND\" ]; then\n-\techo \"\"\n-\techo \"${shlibunwind_base_name}${SHLIB_EXT}: $shlibunwind_deps\"\n-\techo \"\t$SHLIBUNWIND_LINK\" \\\n-\t   | sed -e \"s%@multilib_flags@%$flags%g\" \\\n-\t\t -e \"s%@multilib_dir@%$dir%g\" \\\n-\t\t -e \"s%@shlib_objs@%$libgcc_sh_objs%g\" \\\n-\t\t -e \"s%@shlib_base_name@%$shlibunwind_base_name%g\" \\\n-\t\t -e \"s%@shlib_so_name@%$shlibunwind_base_name%g\" \\\n-\t\t -e \"s%@shlib_dir@%%g\" \\\n-\t\t -e \"s%@shlib_slibdir_qual@%%g\"\n-      fi\n-    fi\n+\t\t -e \"s%@shlib_slibdir_qual@%$shlib_dir_qual%g\"\n+    echo \"all: $libunwind_so\"\n   fi\n-done\n \n-dirs=libgcc\n-for ml in $MULTILIBS; do\n-  dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-  if [ $dir != . ]; then\n-    dirs=\"$dirs ${dir} libgcc/${dir}\"\n-  fi\n-done\n-echo ''\n-echo 'libgcc-stage-start:'\n-echo '\tfor dir in '\"${dirs}\"'; do \\'\n-echo '\t  if [ -d $(stage)/$$dir ]; then true; else '$mkinstalldirs' $(stage)/$$dir; fi; \\'\n-echo '\tdone'\n-echo '\t-for dir in '\"${dirs}\"'; do \\'\n-echo '\t  mv $$dir/*'\"${objext}\"' $(stage)/$$dir; \\'\n-echo '\t  mv $$dir/*'\"${objext}s\"' $(stage)/$$dir || true; \\'\n-echo '\t  test ! -f $$dir/stacknote.s || mv $$dir/stacknote.s $(stage)/$$dir; \\'\n-echo '\t  test ! -f $$dir/libgcc.a || mv $$dir/lib* $(stage)/$$dir; \\'\n-echo '\tdone'\n-\n-echo \"\"\n-all=stmp-dirs\n-dirs=libgcc\n-\n-for ml in $MULTILIBS; do\n-  dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-  if [ $dir != . ]; then\n-    dirs=\"$dirs ${dir} libgcc/${dir}\"\n-  fi\n-  all=\"$all ${dir}/libgcc.a ${dir}/libgcov.a\"\n-  if [ \"$LIBUNWIND\" ]; then\n-    all=\"$all ${dir}/libunwind.a\"\n-  fi\n-  if [ \"$SHLIB_LINK\" ]; then\n-    all=\"$all ${dir}/libgcc_eh.a\"\n-    if [ -z \"$SHLIB_MULTILIB\" ]; then\n-      if [ \"$dir\" = \".\" ]; then\n-\tsuff=\"\";\n-      else\n-\tsuff=_`echo $dir | sed s,/,_,g`\n-      fi\n-      all=\"$all ${dir}/libgcc_s${suff}${SHLIB_EXT}\"\n-      if [ \"$LIBUNWIND\" ]; then\n-\tall=\"$all ${dir}/${dir}/libunwind${suff}${SHLIB_EXT}\"\n-      fi\n-    elif [ \"$SHLIB_MULTILIB\" = \"$dir\" ]; then\n-      all=\"$all libgcc_s${SHLIB_EXT}\"\n-      if [ \"$LIBUNWIND\" ]; then\n-\tall=\"$all ${dir}/${dir}/libunwind${SHLIB_EXT}\"\n-      fi\n-    fi\n-  fi\n-done\n-\n-echo 'stmp-dirs: force'\n-echo '\tfor d in '\"$dirs\"'; do \\'\n-echo '\t  if [ -d $$d ]; then true; else '$mkinstalldirs' $$d; fi; \\'\n-echo '\tdone'\n-echo '\tif [ -f stmp-dirs ]; then true; else touch stmp-dirs; fi'\n-\n-for f in $EXTRA_MULTILIB_PARTS; do\n-  for ml in $MULTILIBS; do\n-    dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n-    flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n+  # EXTRA_MULTILIB_PARTS.\n+  for f in $EXTRA_MULTILIB_PARTS; do\n     case $dir in\n     .) out=$f ; t= ;;\n     *) out=$dir/$f ; t=$dir/ ;;\n@@ -620,16 +772,33 @@ for f in $EXTRA_MULTILIB_PARTS; do\n     echo \"\t$make_compile\" \\\\\n     echo '\t  LIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)' $flags '\" ' \\\\\n     echo '\t  MULTILIB_CFLAGS=\"'$flags'\"' T=$t $targ\n-\n-    all=\"$all $out\"\n+    echo \"all: $out\"\n   done\n-done\n \n-echo \"\"\n-echo \"all: $all\"\n+done # ml in MULTILIBS\n+\n+echo\n+echo \"libgcc-stage-start:\"\n+echo \"\tfor dir in \\$(dirs); do \\\\\"\n+echo \"\t  if [ -d \\$(stage)/\\$\\$dir ]; then :; \\\\\"\n+echo \"\t  else $mkinstalldirs \\$(stage)/\\$\\$dir; fi; \\\\\"\n+echo \"\tdone\"\n+echo \"\t-for dir in \\$(dirs); do \\\\\"\n+echo \"\t  mv \\$\\$dir/*${objext} \\$(stage)/\\$\\$dir; \\\\\"\n+echo \"\t  mv \\$\\$dir/*.vis \\$(stage)/\\$\\$dir; \\\\\"\n+echo \"    mv \\$\\$dir/*.map \\$(stage)/\\$\\$dir; \\\\\"\n+echo \"\t  test ! -f \\$\\$dir/libgcc.a || mv \\$\\$dir/lib* \\$(stage)/\\$\\$dir; \\\\\"\n+echo \"\tdone\"\n+\n+echo \n+echo \"stmp-dirs:\"\n+echo \"\tfor d in \\$(dirs); do \\\\\"\n+echo \"\t  if [ -d \\$\\$d ]; then true; else $mkinstalldirs \\$\\$d; fi; \\\\\"\n+echo \"\tdone\"\n+echo \"\tif [ -f stmp-dirs ]; then true; else touch stmp-dirs; fi\"\n \n echo \"\"\n-echo \"install: $all\"\n+echo \"install: all\"\n for ml in $MULTILIBS; do\n   dir=`echo ${ml} | sed -e 's/;.*$//' -e 's/=/$(EQ)/g'`\n   flags=`echo ${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`;\n@@ -728,3 +897,5 @@ for f in $EXTRA_MULTILIB_PARTS; do\n     echo '\t$(INSTALL_DATA)' $out $ldir/\n   done\n done\n+\n+echo '.PHONY: all install'"}, {"sha": "93976e2fd513ffc5c7247929cb0ec140cb45e5d1", "filename": "gcc/unwind-dw2-fde.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Funwind-dw2-fde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Funwind-dw2-fde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.h?ref=7370bebd3f4bf1725a73073c027ba13afc127f40", "patch": "@@ -32,7 +32,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_UNWIND_DW2_FDE_H\n #define GCC_UNWIND_DW2_FDE_H\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility push(default)\n+#endif\n \n struct fde_vector\n {\n@@ -179,6 +181,8 @@ last_fde (struct object *obj __attribute__ ((__unused__)), const fde *f)\n #endif\n }\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility pop\n+#endif\n \n #endif /* unwind-dw2-fde.h */"}, {"sha": "7244fd457c78280a0e0b6b3817d6d9bd09bc3b16", "filename": "gcc/unwind.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Funwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7370bebd3f4bf1725a73073c027ba13afc127f40/gcc%2Funwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind.h?ref=7370bebd3f4bf1725a73073c027ba13afc127f40", "patch": "@@ -31,7 +31,9 @@\n #ifndef _UNWIND_H\n #define _UNWIND_H\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility push(default)\n+#endif\n \n #ifdef __cplusplus\n extern \"C\" {\n@@ -231,6 +233,8 @@ extern void * _Unwind_FindEnclosingFunction (void *pc);\n }\n #endif\n \n+#ifndef HIDE_EXPORTS\n #pragma GCC visibility pop\n+#endif\n \n #endif /* unwind.h */"}]}