{"sha": "6940c20bbb3b5864e8b510de162d1a618aecca88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk0MGMyMGJiYjNiNTg2NGU4YjUxMGRlMTYyZDFhNjE4YWVjY2E4OA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-31T11:31:04Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-31T13:53:44Z"}, "message": "d: Fix ICEs in the front-end when pointer size is 16-bit.\n\nIn the lowering of `bt*' intrinsics, some integer constants had\nmismatched types, and bitsize was set to the wrong value.\n\nIn base_vtable_offset, the base offset value was calculated incorrectly.\nThe TypeInfo_Class object is comprised of 18 pointers and 1 uint field,\nso now the internal classinfo type size is used instead.\n\ngcc/d/ChangeLog:\n\n\t* d-target.cc (Target::_init): Don't set classinfosize.\n\t* d-tree.h (base_vtable_offset): Move under typeinfo.cc section.\n\t* decl.cc (base_vtable_offset): Move to...\n\t* typeinfo.cc (base_vtable_offset): ...here.  Get base offset from\n\tinternal TypeInfo_Class type.\n\t* intrinsics.cc (expand_intrinsic_bt): Use pointer TYPE_SIZE for\n\tsetting bitsize value.  Build integer constants of correct type.", "tree": {"sha": "687831cd276e5ea6f4c438ddb455886d1cfbe0a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/687831cd276e5ea6f4c438ddb455886d1cfbe0a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6940c20bbb3b5864e8b510de162d1a618aecca88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6940c20bbb3b5864e8b510de162d1a618aecca88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6940c20bbb3b5864e8b510de162d1a618aecca88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6940c20bbb3b5864e8b510de162d1a618aecca88/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f089569851ca9c8a81400dd8a159f86636ed20ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f089569851ca9c8a81400dd8a159f86636ed20ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f089569851ca9c8a81400dd8a159f86636ed20ec"}], "stats": {"total": 84, "additions": 41, "deletions": 43}, "files": [{"sha": "ea425ad897c39c633c6d6025ba2b1267ea770b5b", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6940c20bbb3b5864e8b510de162d1a618aecca88/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6940c20bbb3b5864e8b510de162d1a618aecca88/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=6940c20bbb3b5864e8b510de162d1a618aecca88", "patch": "@@ -115,9 +115,6 @@ Target::_init (const Param &)\n \t\t   (TYPE_PRECISION (long_double_type_node) / BITS_PER_UNIT));\n   this->realalignsize = TYPE_ALIGN_UNIT (long_double_type_node);\n \n-  /* Size of run-time TypeInfo object.  */\n-  this->classinfosize = 19 * this->ptrsize;\n-\n   /* Much of the dmd front-end uses ints for sizes and offsets, and cannot\n      handle any larger data type without some pervasive rework.  */\n   this->maxStaticDataSize = tree_to_shwi (TYPE_MAX_VALUE (integer_type_node));"}, {"sha": "31fe5181912e5f10a6f481f2d305eef8a3985ee9", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6940c20bbb3b5864e8b510de162d1a618aecca88/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6940c20bbb3b5864e8b510de162d1a618aecca88/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=6940c20bbb3b5864e8b510de162d1a618aecca88", "patch": "@@ -622,7 +622,6 @@ extern tree make_thunk (FuncDeclaration *, int);\n extern tree start_function (FuncDeclaration *);\n extern void finish_function (tree);\n extern void mark_needed (tree);\n-extern unsigned base_vtable_offset (ClassDeclaration *, BaseClass *);\n extern tree get_vtable_decl (ClassDeclaration *);\n extern tree build_new_class_expr (ClassReferenceExp *);\n extern tree aggregate_initializer_decl (AggregateDeclaration *);\n@@ -660,6 +659,7 @@ extern tree build_libcall (libcall_fn, Type *, int ...);\n extern bool have_typeinfo_p (ClassDeclaration *);\n extern tree layout_typeinfo (TypeInfoDeclaration *);\n extern tree layout_classinfo (ClassDeclaration *);\n+extern unsigned base_vtable_offset (ClassDeclaration *, BaseClass *);\n extern tree get_typeinfo_decl (TypeInfoDeclaration *);\n extern tree get_classinfo_decl (ClassDeclaration *);\n extern tree build_typeinfo (const Loc &, Type *);"}, {"sha": "8e4237dd0561d3227378e25f79bebd640670cfcb", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6940c20bbb3b5864e8b510de162d1a618aecca88/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6940c20bbb3b5864e8b510de162d1a618aecca88/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=6940c20bbb3b5864e8b510de162d1a618aecca88", "patch": "@@ -1991,42 +1991,6 @@ mark_needed (tree decl)\n     }\n }\n \n-/* Get the offset to the BC's vtbl[] initializer from the start of CD.\n-   Returns \"~0u\" if the base class is not found in any vtable interfaces.  */\n-\n-unsigned\n-base_vtable_offset (ClassDeclaration *cd, BaseClass *bc)\n-{\n-  unsigned csymoffset = target.classinfosize;\n-  unsigned interfacesize = int_size_in_bytes (vtbl_interface_type_node);\n-  csymoffset += cd->vtblInterfaces->length * interfacesize;\n-\n-  for (size_t i = 0; i < cd->vtblInterfaces->length; i++)\n-    {\n-      BaseClass *b = (*cd->vtblInterfaces)[i];\n-      if (b == bc)\n-\treturn csymoffset;\n-      csymoffset += b->sym->vtbl.length * target.ptrsize;\n-    }\n-\n-  /* Check all overriding interface vtbl[]s.  */\n-  for (ClassDeclaration *cd2 = cd->baseClass; cd2; cd2 = cd2->baseClass)\n-    {\n-      for (size_t k = 0; k < cd2->vtblInterfaces->length; k++)\n-\t{\n-\t  BaseClass *bs = (*cd2->vtblInterfaces)[k];\n-\t  if (bs->fillVtbl (cd, NULL, 0))\n-\t    {\n-\t      if (bc == bs)\n-\t\treturn csymoffset;\n-\t      csymoffset += bs->sym->vtbl.length * target.ptrsize;\n-\t    }\n-\t}\n-    }\n-\n-  return ~0u;\n-}\n-\n /* Get the VAR_DECL of the vtable symbol for DECL.  If this does not yet exist,\n    create it.  The vtable is accessible via ClassInfo, but since it is needed\n    frequently (like for rtti comparisons), make it directly accessible.  */"}, {"sha": "1b12a3ec6fbd5945ae27e1a1b376cfa1fb6f00d2", "filename": "gcc/d/intrinsics.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6940c20bbb3b5864e8b510de162d1a618aecca88/gcc%2Fd%2Fintrinsics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6940c20bbb3b5864e8b510de162d1a618aecca88/gcc%2Fd%2Fintrinsics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fintrinsics.cc?ref=6940c20bbb3b5864e8b510de162d1a618aecca88", "patch": "@@ -303,7 +303,7 @@ expand_intrinsic_bt (intrinsic_code intrinsic, tree callexp)\n   tree type = TREE_TYPE (TREE_TYPE (ptr));\n \n   /* size_t bitsize = sizeof(*ptr) * BITS_PER_UNIT;  */\n-  tree bitsize = fold_convert (type, TYPE_SIZE (type));\n+  tree bitsize = fold_convert (type, TYPE_SIZE (TREE_TYPE (ptr)));\n \n   /* ptr[bitnum / bitsize]  */\n   ptr = build_array_index (ptr, fold_build2 (TRUNC_DIV_EXPR, type,\n@@ -312,14 +312,15 @@ expand_intrinsic_bt (intrinsic_code intrinsic, tree callexp)\n \n   /* mask = 1 << (bitnum % bitsize);  */\n   bitnum = fold_build2 (TRUNC_MOD_EXPR, type, bitnum, bitsize);\n-  bitnum = fold_build2 (LSHIFT_EXPR, type, size_one_node, bitnum);\n+  bitnum = fold_build2 (LSHIFT_EXPR, type, build_one_cst (type), bitnum);\n \n   /* cond = ptr[bitnum / size] & mask;  */\n   tree cond = fold_build2 (BIT_AND_EXPR, type, ptr, bitnum);\n \n   /* cond ? -1 : 0;  */\n   cond = build_condition (TREE_TYPE (callexp), d_truthvalue_conversion (cond),\n-\t\t\t integer_minus_one_node, integer_zero_node);\n+\t\t\t  build_minus_one_cst (TREE_TYPE (callexp)),\n+\t\t\t  build_zero_cst (TREE_TYPE (callexp)));\n \n   /* Update the bit as needed, only testing the bit for bt().  */\n   tree_code code;"}, {"sha": "2120dabae714bd19fb301a154036822eeec0e786", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6940c20bbb3b5864e8b510de162d1a618aecca88/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6940c20bbb3b5864e8b510de162d1a618aecca88/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=6940c20bbb3b5864e8b510de162d1a618aecca88", "patch": "@@ -1173,6 +1173,42 @@ layout_classinfo (ClassDeclaration *cd)\n   return v.result ();\n }\n \n+/* Get the offset to the BC's vtbl[] initializer from the start of CD.\n+   Returns \"~0u\" if the base class is not found in any vtable interfaces.  */\n+\n+unsigned\n+base_vtable_offset (ClassDeclaration *cd, BaseClass *bc)\n+{\n+  unsigned csymoffset = int_size_in_bytes (tinfo_types[TK_CLASSINFO_TYPE]);\n+  unsigned interfacesize = int_size_in_bytes (vtbl_interface_type_node);\n+  csymoffset += cd->vtblInterfaces->length * interfacesize;\n+\n+  for (size_t i = 0; i < cd->vtblInterfaces->length; i++)\n+    {\n+      BaseClass *b = (*cd->vtblInterfaces)[i];\n+      if (b == bc)\n+\treturn csymoffset;\n+      csymoffset += b->sym->vtbl.length * target.ptrsize;\n+    }\n+\n+  /* Check all overriding interface vtbl[]s.  */\n+  for (ClassDeclaration *cd2 = cd->baseClass; cd2; cd2 = cd2->baseClass)\n+    {\n+      for (size_t k = 0; k < cd2->vtblInterfaces->length; k++)\n+\t{\n+\t  BaseClass *bs = (*cd2->vtblInterfaces)[k];\n+\t  if (bs->fillVtbl (cd, NULL, 0))\n+\t    {\n+\t      if (bc == bs)\n+\t\treturn csymoffset;\n+\t      csymoffset += bs->sym->vtbl.length * target.ptrsize;\n+\t    }\n+\t}\n+    }\n+\n+  return ~0u;\n+}\n+\n /* Layout fields that immediately come after the classinfo type for DECL if\n    there's any interfaces or interface vtables to be added.\n    This must be mirrored with base_vtable_offset().  */"}]}