{"sha": "ab341f5003f8ad9f5ee30ce566d68d8284a31f00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIzNDFmNTAwM2Y4YWQ5ZjVlZTMwY2U1NjZkNjhkODI4NGEzMWYwMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-07T10:21:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-07T10:21:26Z"}, "message": "Add a generic lhd_simulate_enum_decl\n\nNormally we only create SVE ACLE functions when arm_sve.h is included.\nBut for LTO we need to do it at start-up, so that the functions are\nalready defined when streaming in the LTO objects.\n\nOne hitch with doing that is that LTO doesn't yet implement the\nsimulate_enum_decl langhook.  This patch adds a simple default\nimplementation that it can use.\n\n2020-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* langhooks-def.h (lhd_simulate_enum_decl): Declare.\n\t(LANG_HOOKS_SIMULATE_ENUM_DECL): Use it.\n\t* langhooks.c: Include stor-layout.h.\n\t(lhd_simulate_enum_decl): New function.\n\t* config/aarch64/aarch64-sve-builtins.cc (init_builtins): Call\n\thandle_arm_sve_h for the LTO frontend.\n\t(register_vector_type): Cope with null returns from pushdecl.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/pcs/asm_4.c: New test.\n\nFrom-SVN: r279954", "tree": {"sha": "0bf5b28df193c9cc10990bf5bd48d954dbc5afa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf5b28df193c9cc10990bf5bd48d954dbc5afa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab341f5003f8ad9f5ee30ce566d68d8284a31f00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab341f5003f8ad9f5ee30ce566d68d8284a31f00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab341f5003f8ad9f5ee30ce566d68d8284a31f00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "683e93d1975f676d00096b7c93b942dbd0491800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683e93d1975f676d00096b7c93b942dbd0491800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/683e93d1975f676d00096b7c93b942dbd0491800"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "9924d74c78367be5aa6b2a716a8c0cbe3041c44a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab341f5003f8ad9f5ee30ce566d68d8284a31f00", "patch": "@@ -1,3 +1,13 @@\n+2020-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* langhooks-def.h (lhd_simulate_enum_decl): Declare.\n+\t(LANG_HOOKS_SIMULATE_ENUM_DECL): Use it.\n+\t* langhooks.c: Include stor-layout.h.\n+\t(lhd_simulate_enum_decl): New function.\n+\t* config/aarch64/aarch64-sve-builtins.cc (init_builtins): Call\n+\thandle_arm_sve_h for the LTO frontend.\n+\t(register_vector_type): Cope with null returns from pushdecl.\n+\n 2020-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_sve::svbool_type_p)"}, {"sha": "6cdda30b32a228256a4999c3f06e0bccce85ad0d", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=ab341f5003f8ad9f5ee30ce566d68d8284a31f00", "patch": "@@ -3044,6 +3044,8 @@ init_builtins ()\n {\n   sve_switcher sve;\n   register_builtin_types ();\n+  if (in_lto_p)\n+    handle_arm_sve_h ();\n }\n \n /* Register vector type TYPE under its arm_sve.h name.  */\n@@ -3060,7 +3062,8 @@ register_vector_type (vector_type_index type)\n      right form, even if it doesn't have the right name.  This should give\n      better error recovery behavior than installing error_mark_node or\n      installing an incorrect type.  */\n-  if (TREE_CODE (decl) == TYPE_DECL\n+  if (decl\n+      && TREE_CODE (decl) == TYPE_DECL\n       && TYPE_MAIN_VARIANT (TREE_TYPE (decl)) == vectype)\n     vectype = TREE_TYPE (decl);\n   acle_vector_types[0][type] = vectype;"}, {"sha": "82aeb653085ad68e40e88ac72fe5d19f74f091ba", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=ab341f5003f8ad9f5ee30ce566d68d8284a31f00", "patch": "@@ -54,6 +54,8 @@ extern void lhd_print_error_function (diagnostic_context *,\n extern void lhd_set_decl_assembler_name (tree decl);\n extern void lhd_overwrite_decl_assembler_name (tree decl, tree name);\n extern bool lhd_warn_unused_global_decl (const_tree);\n+extern tree lhd_simulate_enum_decl (location_t, const char *,\n+\t\t\t\t    vec<string_int_pair>);\n extern tree lhd_type_for_size (unsigned precision, int unsignedp);\n extern void lhd_incomplete_type_error (location_t, const_tree, const_tree);\n extern tree lhd_type_promotes_to (tree);\n@@ -171,7 +173,7 @@ extern tree lhd_make_node (enum tree_code);\n extern tree lhd_unit_size_without_reusable_padding (tree);\n \n #define LANG_HOOKS_MAKE_TYPE lhd_make_node\n-#define LANG_HOOKS_SIMULATE_ENUM_DECL\tNULL\n+#define LANG_HOOKS_SIMULATE_ENUM_DECL\tlhd_simulate_enum_decl\n #define LANG_HOOKS_CLASSIFY_RECORD\tNULL\n #define LANG_HOOKS_TYPE_FOR_SIZE\tlhd_type_for_size\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error"}, {"sha": "640bd012d1c5881094920f4514cb23829bf081e2", "filename": "gcc/langhooks.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=ab341f5003f8ad9f5ee30ce566d68d8284a31f00", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-diagnostic.h\"\n #include \"output.h\"\n #include \"timevar.h\"\n+#include \"stor-layout.h\"\n \n /* Do nothing; in many cases the default hook.  */\n \n@@ -473,6 +474,44 @@ lhd_make_node (enum tree_code code)\n   return make_node (code);\n }\n \n+/* Default implementation of LANG_HOOKS_SIMULATE_ENUM_DECL.  Assume a\n+   simple int-based enumerator (which is all the hook can be used for\n+   at present) and push each decl individually without any decoration.\n+\n+   This definition is suitable for LTO and is generic enough that it\n+   might be reusable elsewhere.  */\n+tree\n+lhd_simulate_enum_decl (location_t loc, const char *name,\n+\t\t\tvec<string_int_pair> values)\n+{\n+  tree enumtype = lang_hooks.types.make_type (ENUMERAL_TYPE);\n+  tree enumdecl = build_decl (loc, TYPE_DECL, get_identifier (name), enumtype);\n+  TYPE_STUB_DECL (enumtype) = enumdecl;\n+\n+  tree value_chain = NULL_TREE;\n+  string_int_pair *value;\n+  unsigned int i;\n+  FOR_EACH_VEC_ELT (values, i, value)\n+    {\n+      tree value_decl = build_decl (loc, CONST_DECL,\n+\t\t\t\t    get_identifier (value->first), enumtype);\n+      DECL_INITIAL (value_decl) = build_int_cst (integer_type_node,\n+\t\t\t\t\t\t value->second);\n+      lang_hooks.decls.pushdecl (value_decl);\n+      value_chain = tree_cons (value_decl, DECL_INITIAL (value_decl),\n+\t\t\t       value_chain);\n+    }\n+\n+  TYPE_MIN_VALUE (enumtype) = TYPE_MIN_VALUE (integer_type_node);\n+  TYPE_MAX_VALUE (enumtype) = TYPE_MAX_VALUE (integer_type_node);\n+  SET_TYPE_ALIGN (enumtype, TYPE_ALIGN (integer_type_node));\n+  TYPE_PRECISION (enumtype) = TYPE_PRECISION (integer_type_node);\n+  layout_type (enumtype);\n+  lang_hooks.decls.pushdecl (enumdecl);\n+\n+  return enumtype;\n+}\n+\n /* Default implementation of LANG_HOOKS_TYPE_FOR_SIZE.\n    Return an integer type with PRECISION bits of precision,\n    that is unsigned if UNSIGNEDP is nonzero, otherwise signed.  */"}, {"sha": "e272d77202a5f255881454e066544fff36ea1c19", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab341f5003f8ad9f5ee30ce566d68d8284a31f00", "patch": "@@ -1,3 +1,7 @@\n+2020-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/pcs/asm_4.c: New test.\n+\n 2020-01-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* g++.target/aarch64/sve/acle/general-c++/mangle_5.C: New test."}, {"sha": "83827c20d05443015892c2fabf1d500b65a265db", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/asm_4.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fasm_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab341f5003f8ad9f5ee30ce566d68d8284a31f00/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fasm_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fasm_4.c?ref=ab341f5003f8ad9f5ee30ce566d68d8284a31f00", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -flto -ffixed-z0 -ffixed-p0\" } */\n+\n+#include \"asm_3.c\""}]}