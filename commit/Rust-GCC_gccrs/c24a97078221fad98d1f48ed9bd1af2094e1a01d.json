{"sha": "c24a97078221fad98d1f48ed9bd1af2094e1a01d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI0YTk3MDc4MjIxZmFkOThkMWY0OGVkOWJkMWFmMjA5NGUxYTAxZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-08T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-08T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "89591b24712a7fc2f177bd572beb94ae54c29b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89591b24712a7fc2f177bd572beb94ae54c29b03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c24a97078221fad98d1f48ed9bd1af2094e1a01d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24a97078221fad98d1f48ed9bd1af2094e1a01d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c24a97078221fad98d1f48ed9bd1af2094e1a01d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24a97078221fad98d1f48ed9bd1af2094e1a01d/comments", "author": null, "committer": null, "parents": [{"sha": "48e8a7a677b8356df946cd12fbb215538828e747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48e8a7a677b8356df946cd12fbb215538828e747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48e8a7a677b8356df946cd12fbb215538828e747"}], "stats": {"total": 411, "additions": 410, "deletions": 1}, "files": [{"sha": "8f06b05fe1201b9573491be884f29860b3a40ba2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24a97078221fad98d1f48ed9bd1af2094e1a01d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24a97078221fad98d1f48ed9bd1af2094e1a01d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c24a97078221fad98d1f48ed9bd1af2094e1a01d", "patch": "@@ -1,3 +1,43 @@\n+2021-07-07  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/100137\n+\tPR tree-optimization/99121\n+\tPR tree-optimization/97027\n+\t* builtins.c (access_ref::access_ref): Also set offmax.\n+\t(access_ref::offset_in_range): Define new function.\n+\t(access_ref::add_offset): Set offmax.\n+\t(access_ref::inform_access): Handle access_none.\n+\t(handle_mem_ref): Clear ostype.\n+\t(compute_objsize_r): Handle ASSERT_EXPR.\n+\t* builtins.h (struct access_ref): Add offmax member.\n+\t* gimple-array-bounds.cc (array_bounds_checker::check_mem_ref): Use\n+\tcompute_objsize() and simplify.\n+\n+2021-07-07  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (mma_init_builtins): Use VSX_BUILTIN_LXVP\n+\tand VSX_BUILTIN_STXVP.\n+\n+2021-07-07  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR target/101363\n+\t* config/aarch64/aarch64.c (aarch64_simd_lane_bounds): Remove\n+\ta stray %K from error_at() missed in r12-2088.\n+\n+2021-07-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99728\n+\t* tree-ssa-loop-im.c (gather_mem_refs_stmt): Record\n+\taggregate copies.\n+\t(mem_refs_may_alias_p): Add assert we handled aggregate\n+\tcopies elsewhere.\n+\t(sm_seq_valid_bb): Give up when running into aggregate copies.\n+\t(ref_indep_loop_p): Handle aggregate copies as never\n+\tbeing invariant themselves but allow other refs to be\n+\tdisambiguated against them.\n+\t(can_sm_ref_p): Do not try to apply store-motion to aggregate\n+\tcopies.\n+\n 2021-07-06  Indu Bhagat  <indu.bhagat@oracle.com>\n \n \tPR debug/101283"}, {"sha": "d94400224d9655cd443b5911400be929412bdb31", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24a97078221fad98d1f48ed9bd1af2094e1a01d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24a97078221fad98d1f48ed9bd1af2094e1a01d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c24a97078221fad98d1f48ed9bd1af2094e1a01d", "patch": "@@ -1 +1 @@\n-20210707\n+20210708"}, {"sha": "f04e184342e32c09bda49020ed68dce16fa0cd2d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24a97078221fad98d1f48ed9bd1af2094e1a01d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24a97078221fad98d1f48ed9bd1af2094e1a01d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c24a97078221fad98d1f48ed9bd1af2094e1a01d", "patch": "@@ -1,3 +1,249 @@\n+2021-07-07  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* s-oscons-tmplt.c (MSG_WAITALL): Remove wrong #ifdef\n+\t__MINWGW32__.\n+\n+2021-07-07  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* einfo-utils.adb (Primitive_Operations): Default to returning\n+\tDirect_Primitive_Operations in the case of concurrent types\n+\t(when Corresponding_Record_Type not present).\n+\t* sem_ch9.adb (Analyze_Protected_Type_Declaration): Initialize\n+\tDirect_Primitive_Operations to an empty element list.\n+\t(Analyze_Task_Type_Declaration): Initialize\n+\tDirect_Primitive_Operations to an empty element list.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_eval.adb (Set_Checking_Potentially_Static_Expression):\n+\tStronger assertion.\n+\n+2021-07-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Subprogram_Instantiation): Mark Anon_Id\n+\tintrinsic before calling Analyze_Instance_And_Renamings because\n+\tthis flag may be propagated to other nodes.\n+\n+2021-07-07  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* s-oscons-tmplt.c (TCP_KEEPCNT TCP_KEEPIDLE, TCP_KEEPINTVL):\n+\tHardcode on Windows if undefined.\n+\n+2021-07-07  Bob Duff  <duff@adacore.com>\n+\n+\t* checks.adb (Install_Primitive_Elaboration_Check): Do not\n+\tgenerate elaboration checks for primitives if pragma Pure or\n+\tPreelaborate is present.  Misc comment fixes, including\n+\treferring to the correct kind of check (elaboration, not\n+\taccessibility).\n+\t* checks.ads, restrict.adb, sem_cat.ads, sinfo.ads: Minor\n+\treformatting and comment fixes.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Simplify processing of pragma\n+\tCPP_Constructor.\n+\n+2021-07-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/g-debpoo.adb (Code_Address_For_Allocate_End): Default\n+\tInitialize.\n+\n+2021-07-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-atocou.ads, libgnat/s-atocou__builtin.adb: Code\n+\tcleanups.\n+\n+2021-07-07  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* freeze.adb (Check_Inherited_Conditions): Setting of Ekind,\n+\tLSP_Subprogram, and Is_Wrapper needs to happen for null\n+\tprocedures as well as other wrapper cases, so the code is moved\n+\tfrom the else part in front of the if statement.  (Fixes a\n+\tlatent bug encountered while working on this set of changes.)\n+\t* sem_attr.adb (Resolve_Attribute): Report an error for the case\n+\tof an Access attribute applied to a primitive of an abstract\n+\ttype when the primitive has any nonstatic Pre'Class or\n+\tPost'Class expressions.\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Report an error for\n+\tthe case of a actual subprogram associated with a nonabstract\n+\tformal subprogram when the actual is a primitive of an abstract\n+\ttype and the primitive has any nonstatic Pre'Class or Post'Class\n+\texpressions.\n+\t* sem_disp.adb (Check_Dispatching_Context): Remove special\n+\ttesting for null procedures, and replace it with a relaxed test\n+\tthat avoids getting an error about illegal calls to abstract\n+\tsubprograms in cases where RM 6.1.1(7/5) applies in\n+\tPre/Post'Class aspects. Also, remove special test for\n+\tPostcondition, which seems to be unnecessary, update associated\n+\tcomments, and fix a typo in one comment.\n+\t(Check_Dispatching_Call): Remove an unneeded return statement,\n+\tand report an error for the case of a nondispatching call to a\n+\tnonabstract subprogram of an abstract type where the subprogram\n+\thas nonstatic Pre/Post'Class aspects.\n+\t* sem_util.ads\n+\t(Is_Prim_Of_Abst_Type_With_Nonstatic_CW_Pre_Post): New function.\n+\t(In_Pre_Post_Condition): Add a flag formal Class_Wide_Only,\n+\tdefaulted to False, for indicating whether the function should\n+\tonly test for the node being within class-wide pre- and\n+\tpostconditions.\n+\t* sem_util.adb\n+\t(Is_Prim_Of_Abst_Type_With_Nonstatic_CW_Pre_Post): New function\n+\tto determine whether a subprogram is a primitive of an abstract\n+\ttype where the primitive has class-wide Pre/Post'Class aspects\n+\tspecified with nonstatic expressions.\n+\t(In_Pre_Post_Condition): Extend testing to account for the new\n+\tformal Class_Wide_Only.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Shared_Variable_Control_Aspects): Errors\n+\temitted via Check_Volatility_Compatibility are now emitted at\n+\tActual, just like other errors emitted by\n+\tCheck_Shared_Variable_Control_Aspects.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* uname.adb (Get_Unit_Name): Simplify with a bounded string\n+\tbuffer; also, this addresses a ??? comment about the max length\n+\tbeing exceeded.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* uname.adb (Get_Body_Name, Get_Parent_Body_Name,\n+\tGet_Parent_Spec_Name, Get_Spec_Name, Is_Child_Name,\n+\tIs_Body_Name, Is_Spec_Name, Name_To_Unit_Name): Use a local\n+\tinstead of the global buffer.\n+\n+2021-07-07  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Combine\n+\tprocessing of Size and Value_Size clauses. Ensure that\n+\tValue_Size is treated the same as Size, in the cases where both\n+\tare allowed (i.e. the prefix denotes a first subtype).  Misc\n+\tcleanup.\n+\t* einfo-utils.adb (Init_Size): Add assertions.\n+\t(Size_Clause): Return a Value_Size clause if present, instead of\n+\tjust looking for a Size clause.\n+\t* einfo.ads (Has_Size_Clause, Size_Clause): Change documentation\n+\tto include Value_Size.\n+\t* sem_ch13.ads, layout.ads, layout.adb: Comment modifications.\n+\n+2021-07-07  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_dist.adb (Add_RACW_Primitive_Declarations_And_Bodies): Add\n+\tTSS_Put_Image to list of predefined primitives that need special\n+\ttreatment.\n+\t(Build_General_Calling_Stubs, Build_Subprogram_Receiving_Stubs):\n+\tRemove previous hack for dealing with TSS_Put_Image procedures.\n+\n+2021-07-07  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/g-socket.adb (Get_Socket_Option): Add 500ms only when\n+\tMinus_500ms_Windows_Timeout is True.\n+\t(Set_Socket_Option): Use \"* 1000\" instead of \"/ 0.001\" to\n+\tconvert to milliseconds.\n+\n+2021-07-07  Bob Duff  <duff@adacore.com>\n+\n+\t* tbuild.adb (Unchecked_Convert_To): Set the Parent of the new\n+\tnode to the Parent of the old node.\n+\t* tbuild.ads (Unchecked_Convert_To): Document differences\n+\tbetween Convert_To and Unchecked_Convert_To. The previous\n+\tdocumentation claimed they are identical except for the\n+\tuncheckedness of the conversion.\n+\n+2021-07-07  Yannick Moy  <moy@adacore.com>\n+\n+\t* checks.adb (Apply_Scalar_Range_Check): Remove special case for\n+\tGNATprove mode.\n+\t* sem_res.adb (Resolve_Arithmetic_Op): Same.\n+\t* sem_util.adb (Apply_Compile_Time_Constraint_Error): Same.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Check_For_Primitive_Subprogram): Move\n+\tdeclarations of local variables after nested subprogram bodies.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_disp.adb (CPP_Num_Prims): Reuse List_Length.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb, exp_ch6.adb, sem_ch6.adb: Replace Ekind\n+\tmembership test in Private_Kind with a call to Is_Private_Type.\n+\n+2021-07-07  Bob Duff  <duff@adacore.com>\n+\n+\t* gen_il-gen-gen_entities.adb: Remove Linker_Section_Pragma\n+\tfield from Record_Field_Kind.  Minor comment improvement.\n+\n+2021-07-07  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-ngelfu.ads (Cot): Fix precondition.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par.adb (Par): A local Name variable is now a renaming of a\n+\tconstant slice.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gnat1drv.adb (Gnat1drv): Remove flagging of main unit and its\n+\tcorresponding spec as requiring code generation; now the flags\n+\tare set much earlier.\n+\t* lib-load.adb (Load_Main_Source): Set Generate_Code flag on the\n+\tmain unit source.\n+\t(Make_Instance_Unit): Copy Generate_Code flag from the main unit\n+\tto instance units.\n+\t* lib-writ.adb (Write_ALI): Remove redundant condition;\n+\tGenerate_Code flag is always set for the main unit.\n+\t* par-load.adb (Load): Set Generate_Code flag on the main unit's\n+\tcorresponding spec, if any.\n+\n+2021-07-07  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/g-socket.ads (Option_Name): Add Keep_Alive_Count,\n+\tKeep_Alive_Idle, and Keep_Alive_Interval items to enumeration.\n+\t(Option_Type): Add Keep_Alive_Count, Keep_Alive_Idle, and\n+\tKeep_Alive_Interval alternatives to the case of discriminated\n+\trecord.\n+\t* libgnat/g-socket.adb (Options): Add Keep_Alive_Count,\n+\tKeep_Alive_Idle, and Keep_Alive_Interval to items enumerator to\n+\tOS constant converter.\n+\t(Set_Socket_Option): Process Keep_Alive_Count, Keep_Alive_Idle,\n+\tand Keep_Alive_Interval socket options.\n+\t(Get_Socket_Option): Idem.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-writ.adb (Write_ALI): Exit from loop after seeing first\n+\tunit that violates No_Elaboration_Code restriction.\n+\n+2021-07-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Instantiate_Bodies): Fix white in declaration.\n+\t(Remove_Dead_Instance): Change iteration from WHILE to FOR.\n+\n+2021-07-07  Bob Duff  <duff@adacore.com>\n+\n+\t* checks.adb, exp_attr.adb, exp_ch4.adb, exp_ch6.adb,\n+\texp_ch9.adb, exp_disp.adb, exp_util.adb, inline.adb,\n+\tsem_res.adb: Change all calls to Make_Unchecked_Type_Conversion\n+\tto call Unchecked_Convert_To instead. This involves removing\n+\tNew_Occurrence_Of on the first parameter, because\n+\tUnchecked_Convert_To expects a type entity, rather than the name\n+\tof one. Also, removed calls to Relocate_Node, because\n+\tUnchecked_Convert_To takes care of that.\n+\t* sinfo.ads: Change comment to be worded more firmly.\n+\n+2021-07-07  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnarl/s-tassta.adb (Free_Task): Acquire the Task_Lock\n+\tbefore, rather than after, querying the task's Terminated flag.\n+\tAdd a corresponding Task_Unlock call.\n+\n 2021-07-06  Bob Duff  <duff@adacore.com>\n \n \t* atree.ads (Current_Error_Node): Initialize to Empty."}, {"sha": "f0b2d966a3e12b547492f6662e55e26bf1dda237", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24a97078221fad98d1f48ed9bd1af2094e1a01d/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24a97078221fad98d1f48ed9bd1af2094e1a01d/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=c24a97078221fad98d1f48ed9bd1af2094e1a01d", "patch": "@@ -1,3 +1,64 @@\n+2021-07-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-manager.cc (null_assignment_sm_context::get_state):\n+\tNew overload.\n+\t(null_assignment_sm_context::set_next_state): New overload.\n+\t(null_assignment_sm_context::get_diagnostic_tree): New.\n+\t* engine.cc (impl_sm_context::get_state): New overload.\n+\t(impl_sm_context::set_next_state): New overload.\n+\t(impl_sm_context::get_diagnostic_tree): New overload.\n+\t(impl_region_model_context::on_condition): Convert params from\n+\ttree to const svalue *.\n+\t* exploded-graph.h (impl_region_model_context::on_condition):\n+\tLikewise.\n+\t* region-model.cc (region_model::on_call_pre): Move handling of\n+\tinternal calls to before checking for get_fndecl_for_call.\n+\t(region_model::add_constraints_from_binop): New.\n+\t(region_model::add_constraint): Split out into a new overload\n+\tworking on const svalue * rather than tree.  Call\n+\tadd_constraints_from_binop.  Drop call to\n+\tadd_any_constraints_from_ssa_def_stmt.\n+\t(region_model::add_any_constraints_from_ssa_def_stmt): Delete.\n+\t(region_model::add_any_constraints_from_gassign): Delete.\n+\t(region_model::add_any_constraints_from_gcall): Delete.\n+\t* region-model.h\n+\t(region_model::add_any_constraints_from_ssa_def_stmt): Delete.\n+\t(region_model::add_any_constraints_from_gassign): Delete.\n+\t(region_model::add_any_constraints_from_gcall): Delete.\n+\t(region_model::add_constraint): Add overload decl.\n+\t(region_model::add_constraints_from_binop): New decl.\n+\t(region_model_context::on_condition): Convert params from tree to\n+\tconst svalue *.\n+\t(noop_region_model_context::on_condition): Likewise.\n+\t* sm-file.cc (fileptr_state_machine::condition): Likewise.\n+\t* sm-malloc.cc (malloc_state_machine::on_condition): Likewise.\n+\t* sm-pattern-test.cc: Include tristate.h, selftest.h,\n+\tanalyzer/call-string.h, analyzer/program-point.h,\n+\tanalyzer/store.h, and analyzer/region-model.h.\n+\t(pattern_test_state_machine::on_condition): Convert params from tree to\n+\tconst svalue *.\n+\t* sm-sensitive.cc (sensitive_state_machine::on_condition): Delete.\n+\t* sm-signal.cc (signal_state_machine::on_condition): Delete.\n+\t* sm-taint.cc (taint_state_machine::on_condition): Convert params\n+\tfrom tree to const svalue *.\n+\t* sm.cc: Include tristate.h, selftest.h, analyzer/call-string.h,\n+\tanalyzer/program-point.h, analyzer/store.h, and\n+\tanalyzer/region-model.h.\n+\t(any_pointer_p): Add overload taking const svalue *sval.\n+\t* sm.h (any_pointer_p): Add overload taking const svalue *sval.\n+\t(state_machine::on_condition): Convert params from tree to\n+\tconst svalue *.  Provide no-op default implementation.\n+\t(sm_context::get_state): Add overload taking const svalue *sval.\n+\t(sm_context::set_next_state): Likewise.\n+\t(sm_context::on_transition): Likewise.\n+\t(sm_context::get_diagnostic_tree): Likewise.\n+\t* svalue.cc (svalue::all_zeroes_p): New.\n+\t(constant_svalue::all_zeroes_p): New.\n+\t(repeated_svalue::all_zeroes_p): Convert to vfunc.\n+\t* svalue.h (svalue::all_zeroes_p): New decl.\n+\t(constant_svalue::all_zeroes_p): New decl.\n+\t(repeated_svalue::all_zeroes_p): Convert decl to vfunc.\n+\n 2021-06-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/95006"}, {"sha": "5543edbf63a806996d464d9ecb87f3b585d13bce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24a97078221fad98d1f48ed9bd1af2094e1a01d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24a97078221fad98d1f48ed9bd1af2094e1a01d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c24a97078221fad98d1f48ed9bd1af2094e1a01d", "patch": "@@ -1,3 +1,65 @@\n+2021-07-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/pattern-test-2.c: Update expected results.\n+\t* gcc.dg/plugin/analyzer_gil_plugin.c\n+\t(gil_state_machine::on_condition): Remove.\n+\n+2021-07-07  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/100137\n+\tPR tree-optimization/99121\n+\tPR tree-optimization/97027\n+\t* c-c++-common/Warray-bounds-3.c: Remove xfail\n+\t* c-c++-common/Warray-bounds-4.c: Add an expected warning.\n+\t* c-c++-common/Warray-bounds-9.c: New test.\n+\t* c-c++-common/Warray-bounds-10.c: New test.\n+\t* g++.dg/asan/asan_test.C: Suppress expected warnings.\n+\t* g++.dg/pr95768.C: Same.\n+\t* g++.dg/warn/Warray-bounds-10.C: Adjust text of expected messages.\n+\t* g++.dg/warn/Warray-bounds-11.C: Same.\n+\t* g++.dg/warn/Warray-bounds-12.C: Same.\n+\t* g++.dg/warn/Warray-bounds-13.C: Same.\n+\t* g++.dg/warn/Warray-bounds-17.C: Same.\n+\t* g++.dg/warn/Warray-bounds-20.C: Same.\n+\t* gcc.dg/Warray-bounds-29.c: Same.\n+\t* gcc.dg/Warray-bounds-30.c: Add xfail.\n+\t* gcc.dg/Warray-bounds-31.c: Adjust text of expected messages.\n+\t* gcc.dg/Warray-bounds-32.c: Same.\n+\t* gcc.dg/Warray-bounds-52.c: Same.\n+\t* gcc.dg/Warray-bounds-53.c: Same.\n+\t* gcc.dg/Warray-bounds-58.c: Remove xfail.\n+\t* gcc.dg/Warray-bounds-63.c: Adjust text of expected messages.\n+\t* gcc.dg/Warray-bounds-66.c: Same.\n+\t* gcc.dg/Warray-bounds-69.c: Same.\n+\t* gcc.dg/Wstringop-overflow-34.c: Same.\n+\t* gcc.dg/Wstringop-overflow-47.c: Same.\n+\t* gcc.dg/Wstringop-overflow-61.c: Same.\n+\t* gcc.dg/Warray-bounds-77.c: New test.\n+\t* gcc.dg/Warray-bounds-78.c: New test.\n+\t* gcc.dg/Warray-bounds-79.c: New test.\n+\n+2021-07-07  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\tPR debug/101321\n+\t* gcc.dg/debug/btf/btf-bitfields-3.c: Remove -fno-short-enums.\n+\n+2021-07-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/34195\n+\t* gcc.dg/vect/pr34195.c: New testcase.\n+\n+2021-07-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99728\n+\t* g++.dg/opt/pr99728.C: New testcase.\n+\n+2021-07-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vect-fmaddsubXXXpd.c: New test.\n+\t* gcc.target/i386/avx512f-vect-fmaddsubXXXps.c: New test.\n+\t* gcc.target/i386/avx512f-vect-fmsubaddXXXpd.c: New test.\n+\t* gcc.target/i386/avx512f-vect-fmsubaddXXXps.c: New test.\n+\n 2021-07-06  Indu Bhagat  <indu.bhagat@oracle.com>\n \n \tPR debug/101283"}]}