{"sha": "6b2f370fa915d74dff066d4b0340ddb459728046", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyZjM3MGZhOTE1ZDc0ZGZmMDY2ZDRiMDM0MGRkYjQ1OTcyODA0Ng==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-26T10:31:25Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-27T20:27:14Z"}, "message": "d: Merge upstream dmd db0df3f7e.\n\nRemoves all support code and tests for the extern(Pascal) calling\nconvention.\n\nReviewed-on: https://github.com/dlang/dmd/pull/11994\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd db0df3f7e.\n\t* types.cc (TypeVisitor::visit (TypeFunction *)): Remove LINKpascal.", "tree": {"sha": "f2f3ab7378cac5701e8d4cb4b8002ec684fdc5e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2f3ab7378cac5701e8d4cb4b8002ec684fdc5e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b2f370fa915d74dff066d4b0340ddb459728046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2f370fa915d74dff066d4b0340ddb459728046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b2f370fa915d74dff066d4b0340ddb459728046", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2f370fa915d74dff066d4b0340ddb459728046/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d"}], "stats": {"total": 990, "additions": 4, "deletions": 986}, "files": [{"sha": "453c5e8fd9cf68dcea1fc9625c9cc39c90d3c729", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -1,4 +1,4 @@\n-b6a779e49a3bba8be6272e6730e14cbb6293ef77\n+db0df3f7e6f2570f81d6c91ba173daa23361ea7b\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "8f8692668711e76361bd94590d6f78b943b901ba", "filename": "gcc/d/dmd/dmangle.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fdmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fdmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmangle.c?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -223,7 +223,6 @@ class Mangler : public Visitor\n             case LINKd:             mc = 'F';       break;\n             case LINKc:             mc = 'U';       break;\n             case LINKwindows:       mc = 'W';       break;\n-            case LINKpascal:        mc = 'V';       break;\n             case LINKcpp:           mc = 'R';       break;\n             case LINKobjc:          mc = 'Y';       break;\n             default:\n@@ -415,7 +414,6 @@ class Mangler : public Visitor\n \n                 case LINKc:\n                 case LINKwindows:\n-                case LINKpascal:\n                 case LINKobjc:\n                     buf->writestring(d->ident->toChars());\n                     return;"}, {"sha": "6aff9b4b0790f6856406404986bb355dc79e02cb", "filename": "gcc/d/dmd/globals.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fglobals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fglobals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.h?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -310,7 +310,6 @@ enum LINK\n     LINKc,\n     LINKcpp,\n     LINKwindows,\n-    LINKpascal,\n     LINKobjc,\n     LINKsystem\n };"}, {"sha": "fd4d16241c4fc95a660a374f21529fa761dc2c63", "filename": "gcc/d/dmd/hdrgen.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fhdrgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fhdrgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.c?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -1271,7 +1271,6 @@ class PrettyPrintVisitor : public Visitor\n             case LINKc:             p = \"C\";                break;\n             case LINKcpp:           p = \"C++\";              break;\n             case LINKwindows:       p = \"Windows\";          break;\n-            case LINKpascal:        p = \"Pascal\";           break;\n             case LINKobjc:          p = \"Objective-C\";      break;\n             default:\n                 assert(0);\n@@ -3367,7 +3366,6 @@ const char *linkageToChars(LINK linkage)\n         case LINKc:         return \"C\";\n         case LINKcpp:       return \"C++\";\n         case LINKwindows:   return \"Windows\";\n-        case LINKpascal:    return \"Pascal\";\n         case LINKobjc:      return \"Objective-C\";\n         case LINKsystem:    return \"System\";\n         default:            assert(0);"}, {"sha": "16f3b5f29ec5420b3baa6a201c35fd9e85da4c19", "filename": "gcc/d/dmd/idgen.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fidgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fidgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fidgen.c?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -145,7 +145,6 @@ Msgtable msgtable[] =\n     { \"C\", NULL },\n     { \"D\", NULL },\n     { \"Windows\", NULL },\n-    { \"Pascal\", NULL },\n     { \"System\", NULL },\n     { \"Objective\", NULL },\n "}, {"sha": "802de81c4c2cc4723a4803580c08bfa112319cda", "filename": "gcc/d/dmd/json.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fjson.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fjson.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fjson.c?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -323,9 +323,6 @@ class ToJsonVisitor : public Visitor\n             case LINKwindows:\n                 property(name, \"windows\");\n                 break;\n-            case LINKpascal:\n-                property(name, \"pascal\");\n-                break;\n             default:\n                 assert(false);\n         }"}, {"sha": "3e4dd066c319de0e7b6e214eb0bf2835d9430cf1", "filename": "gcc/d/dmd/parse.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Fdmd%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.c?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -1294,8 +1294,6 @@ LINK Parser::parseLinkage(Identifiers **pidents, CPPMANGLE *pcppmangle, bool *pc\n         nextToken();\n         if (id == Id::Windows)\n             link = LINKwindows;\n-        else if (id == Id::Pascal)\n-            link = LINKpascal;\n         else if (id == Id::D)\n             link = LINKd;\n         else if (id == Id::C)\n@@ -1399,7 +1397,7 @@ LINK Parser::parseLinkage(Identifiers **pidents, CPPMANGLE *pcppmangle, bool *pc\n         else\n         {\n         LinvalidLinkage:\n-            error(\"valid linkage identifiers are D, C, C++, Objective-C, Pascal, Windows, System\");\n+            error(\"valid linkage identifiers are D, C, C++, Objective-C, Windows, System\");\n             link = LINKd;\n         }\n     }"}, {"sha": "94aa1f6b9b31952bfb4b9f1fb26441ed388f5f8d", "filename": "gcc/d/types.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -791,7 +791,6 @@ class TypeVisitor : public Visitor\n     /* Handle any special support for calling conventions.  */\n     switch (t->linkage)\n       {\n-      case LINKpascal:\n       case LINKwindows:\n \t/* [attribute/linkage]\n "}, {"sha": "145ebb1420a5b7df06dd16e470642340e1ac0b23", "filename": "gcc/testsuite/gdc.test/compilable/callconv.d", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcallconv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcallconv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fcallconv.d?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -11,24 +11,6 @@ ABC abc;\n \n int x,y,z;\n \n-extern (Pascal):\n-ABC test1(int xx, int yy, int zz)\n-{\n-    x = xx;\n-    y = yy;\n-    z = zz;\n-    return abc;\n-}\n-\n-extern (Pascal):\n-ABC test1v(int xx, int yy, int zz, ...)\n-{\n-    x = xx;\n-    y = yy;\n-    z = zz;\n-    return abc;\n-}\n-\n extern (C):\n ABC test2v(int xx, int yy, int zz, ...)\n {\n@@ -71,5 +53,3 @@ ABC test4v(int xx, int yy, int zz, ...)\n     z = zz;\n     return abc;\n }\n-\n-"}, {"sha": "295c563081ad9a3e9b2948de70d2789f53fe100a", "filename": "gcc/testsuite/gdc.test/compilable/test17419.d", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17419.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17419.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17419.d?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -10,14 +10,12 @@ static assert(__traits(getLinkage, aliasc) == \"C\");\n extern (D) int food();\n extern (C++) int foocpp();\n extern (Windows) int foow();\n-extern (Pascal) int foop();\n extern (Objective-C) int fooobjc();\n extern (System) int foos();\n \n static assert(__traits(getLinkage, food) == \"D\");\n static assert(__traits(getLinkage, foocpp) == \"C++\");\n static assert(__traits(getLinkage, foow) == \"Windows\");\n-static assert(__traits(getLinkage, foop) == \"Pascal\");\n static assert(__traits(getLinkage, fooobjc) == \"Objective-C\");\n version (Windows)\n     static assert(__traits(getLinkage, foos) == \"Windows\");"}, {"sha": "0ec53c897d6100ac62a6bc402f184298d5099f4c", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail18970.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail18970.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail18970.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail18970.d?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -1,8 +1,8 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail18970.d(22): Error: no property `y` for type `fail18970.S`\n-fail_compilation/fail18970.d(29): Error: no property `yyy` for type `fail18970.S2`\n+fail_compilation/fail18970.d(22): Error: no property `y` for type `S`\n+fail_compilation/fail18970.d(29): Error: no property `yyy` for type `S2`\n ---\n */\n "}, {"sha": "40f9ccff0935f6a56cb8bbe76db32c813a8ce667", "filename": "gcc/testsuite/gdc.test/runnable/dhry.d", "status": "removed", "additions": 0, "deletions": 927, "changes": 927, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fdhry.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fdhry.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fdhry.d?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -1,927 +0,0 @@\n-// PERMUTE_ARGS:\n-// REQUIRED_ARGS: -release -O -g -inline\n-// DISABLED: freebsd\n-\n-/*\n- *************************************************************************\n- *\n- *                   \"DHRYSTONE\" Benchmark Program\n- *                   -----------------------------\n- *\n- *  Version:    C, Version 2.1\n- *\n- *  File:       dhry.h (part 1 of 3)\n- *\n- *  Date:       May 25, 1988\n- *\n- *  Author:     Reinhold P. Weicker\n- *              Siemens Nixdorf Inf. Syst.\n- *              STM OS 32\n- *              Otto-Hahn-Ring 6\n- *              W-8000 Muenchen 83\n- *              Germany\n- *                      Phone:    [+49]-89-636-42436\n- *                                (8-17 Central European Time)\n- *                      UUCP:     weicker@ztivax.uucp@unido.uucp\n- *                      Internet: weicker@ztivax.siemens.com\n- *\n- *              Original Version (in Ada) published in\n- *              \"Communications of the ACM\" vol. 27., no. 10 (Oct. 1984),\n- *              pp. 1013 - 1030, together with the statistics\n- *              on which the distribution of statements etc. is based.\n- *\n- *              In this C version, the following C library functions are\n- *              used:\n- *              - strcpy, strcmp (inside the measurement loop)\n- *              - printf, scanf (outside the measurement loop)\n- *\n- *  Collection of Results:\n- *              Reinhold Weicker (address see above) and\n- *\n- *              Rick Richardson\n- *              PC Research. Inc.\n- *              94 Apple Orchard Drive\n- *              Tinton Falls, NJ 07724\n- *                      Phone:  (201) 834-1378 (9-17 EST)\n- *                      UUCP:   ...!uunet!pcrat!rick\n- *\n- *      Please send results to Rick Richardson and/or Reinhold Weicker.\n- *      Complete information should be given on hardware and software\n- *      used. Hardware information includes: Machine type, CPU, type and\n- *      size of caches; for microprocessors: clock frequency, memory speed\n- *      (number of wait states). Software information includes: Compiler\n- *      (and runtime library) manufacturer and version, compilation\n- *      switches, OS version. The Operating System version may give an\n- *      indication about the compiler; Dhrystone itself performs no OS\n- *      calls in the measurement loop.\n- *\n- *      The complete output generated by the program should be mailed\n- *      such that at least some checks for correctness can be made.\n- *\n- *************************************************************************\n- *\n- *  History:    This version C/2.1 has been made for two reasons:\n- *\n- *              1) There is an obvious need for a common C version of\n- *              Dhrystone, since C is at present the most popular system\n- *              programming language for the class of processors\n- *              (microcomputers, minicomputers) where Dhrystone is used\n- *              most. There should be, as far as possible, only one C\n- *              version of Dhrystone such that results can be compared\n- *              without restrictions. In the past, the C versions\n- *              distributed by Rick Richardson (Version 1.1) and by\n- *              Reinhold Weicker had small (though not significant)\n- *              differences.\n- *\n- *              2) As far as it is possible without changes to the\n- *              Dhrystone statistics, optimizing compilers should be\n- *              prevented from removing significant statements.\n- *\n- *              This C version has been developed in cooperation with\n- *              Rick Richardson (Tinton Falls, NJ), it incorporates many\n- *              ideas from the \"Version 1.1\" distributed previously by\n- *              him over the UNIX network Usenet.\n- *              I also thank Chaim Benedelac (National Semiconductor),\n- *              David Ditzel (SUN), Earl Killian and John Mashey (MIPS),\n- *              Alan Smith and Rafael Saavedra-Barrera (UC at Berkeley)\n- *              for their help with comments on earlier versions of the\n- *              benchmark.\n- *\n- *  Changes:    In the initialization part, this version follows mostly\n- *              Rick Richardson's version distributed via Usenet, not the\n- *              version distributed earlier via floppy disk by Reinhold\n- *              Weicker. As a concession to older compilers, names have\n- *              been made unique within the first 8 characters. Inside the\n- *              measurement loop, this version follows the version\n- *              previously distributed by Reinhold Weicker.\n- *\n- *              At several places in the benchmark, code has been added,\n- *              but within the measurement loop only in branches that\n- *              are not executed. The intention is that optimizing\n- *              compilers should be prevented from moving code out of the\n- *              measurement loop, or from removing code altogether. Since\n- *              the statements that are executed within the measurement\n- *              loop have NOT been changed, the numbers defining the\n- *              \"Dhrystone distribution\" (distribution of statements,\n- *              operand types and locality) still hold. Except for\n- *              sophisticated optimizing compilers, execution times for\n- *              this version should be the same as for previous versions.\n- *\n- *              Since it has proven difficult to subtract the time for the\n- *              measurement loop overhead in a correct way, the loop check\n- *              has been made a part of the benchmark. This does have\n- *              an impact - though a very minor one - on the distribution\n- *              statistics which have been updated for this version.\n- *\n- *              All changes within the measurement loop are described\n- *              and discussed in the companion paper \"Rationale for\n- *              Dhrystone version 2\".\n- *\n- *              Because of the self-imposed limitation that the order and\n- *              distribution of the executed statements should not be\n- *              changed, there are still cases where optimizing compilers\n- *              may not generate code for some statements. To a certain\n- *              degree, this is unavoidable for small synthetic\n- *              benchmarks. Users of the benchmark are advised to check\n- *              code listings whether code is generated for all statements\n- *              of Dhrystone.\n- *\n- *              Version 2.1 is identical to version 2.0 distributed via\n- *              the UNIX network Usenet in March 1988 except that it\n- *              corrects some minor deficiencies that were found by users\n- *              of version 2.0. The only change within the measurement\n- *              loop is that a non-executed \"else\" part was added to the\n- *              \"if\" statement in Func_3, and a non-executed \"else\" part\n- *              removed from Proc_3.\n- *\n- *************************************************************************\n- *\n- * Defines:     The following \"Defines\" are possible:\n- *              -DROPT         (default: Not defined)\n- *                      As an approximation to what an average C\n- *                      programmer might do, the \"register\" storage class\n- *                      is applied (if enabled by -DROPT)\n- *                      - for local variables, if they are used\n- *                        (dynamically) five or more times\n- *                      - for parameters if they are used (dynamically)\n- *                        six or more times\n- *                      Note that an optimal \"register\" strategy is\n- *                      compiler-dependent, and that \"register\"\n- *                      declarations do not necessarily lead to faster\n- *                      execution.\n- *              -DNOSTRUCTASSIGN        (default: Not defined)\n- *                      Define if the C compiler does not support\n- *                      assignment of structures.\n- *              -DNOENUMS               (default: Not defined)\n- *                      Define if the C compiler does not support\n- *                      enumeration types.\n- *\n- *************************************************************************\n- *\n- *  Compilation model and measurement (IMPORTANT):\n- *\n- *  This C version of Dhrystone consists of three files:\n- *  - dhry.h (this file, containing global definitions and comments)\n- *  - dhry_1.c (containing the code corresponding to Ada package Pack_1)\n- *  - dhry_2.c (containing the code corresponding to Ada package Pack_2)\n- *\n- *  The following \"ground rules\" apply for measurements:\n- *  - Separate compilation\n- *  - No procedure merging\n- *  - Otherwise, compiler optimizations are allowed but should be\n- *    indicated\n- *  - Default results are those without register declarations\n- *  See the companion paper \"Rationale for Dhrystone Version 2\" for a more\n- *  detailed discussion of these ground rules.\n- *\n- *  For 16-Bit processors (e.g. 80186, 80286), times for all compilation\n- *  models (\"small\", \"medium\", \"large\" etc.) should be given if possible,\n- *  together with a definition of these models for the compiler system\n- *  used.\n- *\n- *************************************************************************\n- *\n- *  Dhrystone (C version) statistics:\n- *\n- *  [Comment from the first distribution, updated for version 2.\n- *   Note that because of language differences, the numbers are slightly\n- *   different from the Ada version.]\n- *\n- *  The following program contains statements of a high level programming\n- *  language (here: C) in a distribution considered representative:\n- *\n- *    assignments                  52 (51.0 %)\n- *    control statements           33 (32.4 %)\n- *    procedure, function calls    17 (16.7 %)\n- *\n- *  103 statements are dynamically executed. The program is balanced with\n- *  respect to the three aspects:\n- *\n- *    - statement type\n- *    - operand type\n- *    - operand locality\n- *         operand global, local, parameter, or constant.\n- *\n- *  The combination of these three aspects is balanced only approximately.\n- *\n- *  1. Statement Type:\n- *  -----------------             number\n- *\n- *     V1 = V2                     9\n- *       (incl. V1 = F(..)\n- *     V = Constant               12\n- *     Assignment,                 7\n- *       with array element\n- *     Assignment,                 6\n- *       with record component\n- *                                --\n- *                                34       34\n- *\n- *     X = Y +|-|\"&&\"|\"|\" Z        5\n- *     X = Y +|-|\"==\" Constant     6\n- *     X = X +|- 1                 3\n- *     X = Y *|/ Z                 2\n- *     X = Expression,             1\n- *           two operators\n- *     X = Expression,             1\n- *           three operators\n- *                                --\n- *                                18       18\n- *\n- *     if ....                    14\n- *       with \"else\"      7\n- *       without \"else\"   7\n- *           executed        3\n- *           not executed    4\n- *     for ...                     7  |  counted every time\n- *     while ...                   4  |  the loop condition\n- *     do ... while                1  |  is evaluated\n- *     switch ...                  1\n- *     break                       1\n- *     declaration with            1\n- *       initialization\n- *                                --\n- *                                34       34\n- *\n- *     P (...)  procedure call    11\n- *       user procedure      10\n- *       library procedure    1\n- *     X = F (...)\n- *             function  call      6\n- *       user function        5\n- *       library function     1\n- *                                --\n- *                                17       17\n- *                                        ---\n- *                                        103\n- *\n- *    The average number of parameters in procedure or function calls\n- *    is 1.82 (not counting the function values as implicit parameters).\n- *\n- *\n- *  2. Operators\n- *  ------------\n- *                          number    approximate\n- *                                    percentage\n- *\n- *    Arithmetic             32          50.8\n- *\n- *       +                     21          33.3\n- *       -                      7          11.1\n- *       *                      3           4.8\n- *       / (int div)            1           1.6\n- *\n- *    Comparison             27           42.8\n- *\n- *       ==                     9           14.3\n- *       /=                     4            6.3\n- *       >                      1            1.6\n- *       <                      3            4.8\n- *       >=                     1            1.6\n- *       <=                     9           14.3\n- *\n- *    Logic                   4            6.3\n- *\n- *       && (AND-THEN)          1            1.6\n- *       |  (OR)                1            1.6\n- *       !  (NOT)               2            3.2\n- *\n- *                           --          -----\n- *                           63          100.1\n- *\n- *\n- *  3. Operand Type (counted once per operand reference):\n- *  ---------------\n- *                          number    approximate\n- *                                    percentage\n- *\n- *     Integer               175        72.3 %\n- *     Character              45        18.6 %\n- *     Pointer                12         5.0 %\n- *     String30                6         2.5 %\n- *     Array                   2         0.8 %\n- *     Record                  2         0.8 %\n- *                           ---       -------\n- *                           242       100.0 %\n- *\n- *  When there is an access path leading to the final operand (e.g. a\n- *  record component), only the final data type on the access path is\n- *  counted.\n- *\n- *\n- *  4. Operand Locality:\n- *  -------------------\n- *                                number    approximate\n- *                                          percentage\n- *\n- *     local variable              114        47.1 %\n- *     global variable              22         9.1 %\n- *     parameter                    45        18.6 %\n- *        value                        23         9.5 %\n- *        reference                    22         9.1 %\n- *     function result               6         2.5 %\n- *     constant                     55        22.7 %\n- *                                 ---       -------\n- *                                 242       100.0 %\n- *\n- *\n- *  The program does not compute anything meaningful, but it is\n- *  syntactically and semantically correct. All variables have a value\n- *  assigned to them before they are used as a source operand.\n- *\n- *  There has been no explicit effort to account for the effects of a\n- *  cache, or to balance the use of long or short displacements for code\n- *  or data.\n- *\n- *************************************************************************\n- */\n-\n-import core.stdc.stdio;\n-import core.stdc.string;\n-import core.stdc.stdlib;\n-import std.string;\n-\n-\n-/* Compiler and system dependent definitions: */\n-\n-const double Mic_secs_Per_Second = 1000000.0;\n-                /* Berkeley UNIX C returns process times in seconds/HZ */\n-\n-enum {Ident_1, Ident_2, Ident_3, Ident_4, Ident_5}\n-alias int Enumeration;\n-        /* for boolean and enumeration types in Ada, Pascal */\n-\n-/* General definitions: */\n-\n-const int StrLen = 30;\n-\n-alias int     One_Thirty;\n-alias int     One_Fifty;\n-alias char    Capital_Letter;\n-alias bool    Boolean;\n-alias char    Str_30 [StrLen];\n-alias int     Arr_1_Dim [50];\n-alias int     Arr_2_Dim [50] [50];\n-\n-struct record\n-{\n-    record *Ptr_Comp;\n-    Enumeration    Discr;\n-    union V {\n-          struct V1 {\n-                  Enumeration Enum_Comp;\n-                  int         Int_Comp;\n-                  char        Str_Comp [StrLen];\n-                  }\n-          V1 var_1;\n-          struct V2 {\n-                  Enumeration E_Comp_2;\n-                  char        Str_2_Comp [StrLen];\n-                  }\n-          V2 var_2;\n-          struct V3 {\n-                  char        Ch_1_Comp;\n-                  char        Ch_2_Comp;\n-                  }\n-          V3 var_3;\n-          }\n-    V variant;\n-}\n-\n-alias record Rec_Type;\n-alias record *Rec_Pointer;\n-\n-\n-/* Global Variables: */\n-\n-Rec_Pointer     Ptr_Glob,\n-                Next_Ptr_Glob;\n-int             Int_Glob;\n-Boolean         Bool_Glob;\n-char            Ch_1_Glob,\n-                Ch_2_Glob;\n-int             Arr_1_Glob [50];\n-int             Arr_2_Glob [50] [50];\n-\n-char[StrLen] Reg_Define = \"Register option selected.\";\n-\n-/* variables for time measurement: */\n-\n-const int Too_Small_Time = 2;\n-                /* Measurements should last at least 2 seconds */\n-\n-double          Begin_Time,\n-                End_Time,\n-                User_Time;\n-\n-double          Microseconds,\n-                Dhrystones_Per_Second,\n-                Vax_Mips;\n-\n-/* end of variables for time measurement */\n-\n-\n-void main ()\n-/*****/\n-\n-  /* main program, corresponds to procedures        */\n-  /* Main and Proc_0 in the Ada version             */\n-{\n-        One_Fifty       Int_1_Loc;\n-        One_Fifty       Int_2_Loc;\n-        One_Fifty       Int_3_Loc;\n-        char            Ch_Index;\n-        Enumeration     Enum_Loc;\n-        Str_30          Str_1_Loc;\n-        Str_30          Str_2_Loc;\n-        int             Run_Index;\n-        int             Number_Of_Runs;\n-\n-/+\n-        FILE            *Ap;\n-\n-  /* Initializations */\n-\n-  if ((Ap = fopen(\"dhry.res\",\"a+\")) == null)\n-    {\n-       printf(\"Can not open dhry.res\\n\\n\");\n-       exit(1);\n-    }\n-+/\n-\n-  Next_Ptr_Glob = cast(Rec_Pointer) malloc (Rec_Type.sizeof);\n-  Ptr_Glob = cast(Rec_Pointer) malloc (Rec_Type.sizeof);\n-\n-  Ptr_Glob.Ptr_Comp                    = Next_Ptr_Glob;\n-  Ptr_Glob.Discr                       = Ident_1;\n-  Ptr_Glob.variant.var_1.Enum_Comp     = Ident_3;\n-  Ptr_Glob.variant.var_1.Int_Comp      = 40;\n-//  strcpy (Ptr_Glob.variant.var_1.Str_Comp,\n-//          \"DHRYSTONE PROGRAM, SOME STRING\");\n-//  strcpy (Str_1_Loc, \"DHRYSTONE PROGRAM, 1'ST STRING\");\n-  Ptr_Glob.variant.var_1.Str_Comp[] = \"DHRYSTONE PROGRAM, SOME STRING\";\n-  Str_1_Loc[] = \"DHRYSTONE PROGRAM, 1'ST STRING\";\n-\n-  Arr_2_Glob [8][7] = 10;\n-        /* Was missing in published program. Without this statement,    */\n-        /* Arr_2_Glob [8][7] would have an undefined value.             */\n-        /* Warning: With 16-Bit processors and Number_Of_Runs > 32000,  */\n-        /* overflow may occur for this array element.                   */\n-\n-  printf (\"\\n\");\n-  printf (\"Dhrystone Benchmark, Version 2.1 (Language: D)\\n\");\n-  printf (\"\\n\");\n-  printf (\"Please give the number of runs through the benchmark: \");\n-  {\n-    int n;\n-    //scanf (\"%d\", &n);\n-    n = 10000000;\n-    Number_Of_Runs = n;\n-  }\n-  printf (\"\\n\");\n-\n-  printf (\"Execution starts, %d runs through Dhrystone\\n\",Number_Of_Runs);\n-\n-  /***************/\n-  /* Start timer */\n-  /***************/\n-\n-  Begin_Time = dtime();\n-\n-  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)\n-  {\n-\n-    Proc_5();\n-    Proc_4();\n-      /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */\n-    Int_1_Loc = 2;\n-    Int_2_Loc = 3;\n-    //strcpy (Str_2_Loc, \"DHRYSTONE PROGRAM, 2'ND STRING\");\n-    Str_2_Loc[] = \"DHRYSTONE PROGRAM, 2'ND STRING\";\n-    Enum_Loc = Ident_2;\n-    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);\n-      /* Bool_Glob == 1 */\n-    while (Int_1_Loc < Int_2_Loc)  /* loop body executed once */\n-    {\n-      Int_3_Loc = 5 * Int_1_Loc - Int_2_Loc;\n-        /* Int_3_Loc == 7 */\n-      Proc_7 (Int_1_Loc, Int_2_Loc, &Int_3_Loc);\n-        /* Int_3_Loc == 7 */\n-      Int_1_Loc += 1;\n-    } /* while */\n-      /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */\n-    Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);\n-      /* Int_Glob == 5 */\n-    Proc_1 (Ptr_Glob);\n-    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)\n-                             /* loop body executed twice */\n-    {\n-      if (Enum_Loc == Func_1 (Ch_Index, 'C'))\n-          /* then, not executed */\n-        {\n-        Proc_6 (Ident_1, &Enum_Loc);\n-        //strcpy (Str_2_Loc, \"DHRYSTONE PROGRAM, 3'RD STRING\");\n-        Str_2_Loc[] = \"DHRYSTONE PROGRAM, 3'RD STRING\";\n-        Int_2_Loc = Run_Index;\n-        Int_Glob = Run_Index;\n-        }\n-    }\n-      /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */\n-    Int_2_Loc = Int_2_Loc * Int_1_Loc;\n-    Int_1_Loc = Int_2_Loc / Int_3_Loc;\n-    Int_2_Loc = 7 * (Int_2_Loc - Int_3_Loc) - Int_1_Loc;\n-      /* Int_1_Loc == 1, Int_2_Loc == 13, Int_3_Loc == 7 */\n-    Proc_2 (&Int_1_Loc);\n-      /* Int_1_Loc == 5 */\n-\n-  } /* loop \"for Run_Index\" */\n-\n-  /**************/\n-  /* Stop timer */\n-  /**************/\n-\n-  End_Time = dtime();\n-\n-  printf (\"Execution ends\\n\");\n-  printf (\"\\n\");\n-  printf (\"Final values of the variables used in the benchmark:\\n\");\n-  printf (\"\\n\");\n-  printf (\"Int_Glob:            %d\\n\", Int_Glob);\n-  printf (\"        should be:   %d\\n\", 5);\n-  printf (\"Bool_Glob:           %d\\n\", Bool_Glob);\n-  printf (\"        should be:   %d\\n\", 1);\n-  printf (\"Ch_1_Glob:           %c\\n\", Ch_1_Glob);\n-  printf (\"        should be:   %c\\n\", cast(int)'A');\n-  printf (\"Ch_2_Glob:           %c\\n\", Ch_2_Glob);\n-  printf (\"        should be:   %c\\n\", cast(int)'B');\n-  printf (\"Arr_1_Glob[8]:       %d\\n\", Arr_1_Glob[8]);\n-  printf (\"        should be:   %d\\n\", 7);\n-  printf (\"Arr_2_Glob[8][7]:    %d\\n\", Arr_2_Glob[8][7]);\n-  printf (\"        should be:   Number_Of_Runs + 10\\n\");\n-  printf (\"Ptr_Glob.\\n\");\n-  printf (\"  Ptr_Comp:          %d\\n\", cast(int) Ptr_Glob.Ptr_Comp);\n-  printf (\"        should be:   (implementation-dependent)\\n\");\n-  printf (\"  Discr:             %d\\n\", Ptr_Glob.Discr);\n-  printf (\"        should be:   %d\\n\", 0);\n-  printf (\"  Enum_Comp:         %d\\n\", Ptr_Glob.variant.var_1.Enum_Comp);\n-  printf (\"        should be:   %d\\n\", 2);\n-  printf (\"  Int_Comp:          %d\\n\", Ptr_Glob.variant.var_1.Int_Comp);\n-  printf (\"        should be:   %d\\n\", 17);\n-  printf (\"  Str_Comp:          %.*s\\n\", Ptr_Glob.variant.var_1.Str_Comp.length, Ptr_Glob.variant.var_1.Str_Comp.ptr);\n-  printf (\"        should be:   DHRYSTONE PROGRAM, SOME STRING\\n\");\n-  printf (\"Next_Ptr_Glob.\\n\");\n-  printf (\"  Ptr_Comp:          %d\\n\", cast(int) Next_Ptr_Glob.Ptr_Comp);\n-  printf (\"        should be:   (implementation-dependent), same as above\\n\");\n-  printf (\"  Discr:             %d\\n\", Next_Ptr_Glob.Discr);\n-  printf (\"        should be:   %d\\n\", 0);\n-  printf (\"  Enum_Comp:         %d\\n\", Next_Ptr_Glob.variant.var_1.Enum_Comp);\n-  printf (\"        should be:   %d\\n\", 1);\n-  printf (\"  Int_Comp:          %d\\n\", Next_Ptr_Glob.variant.var_1.Int_Comp);\n-  printf (\"        should be:   %d\\n\", 18);\n-  printf (\"  Str_Comp:          %.*s\\n\", Next_Ptr_Glob.variant.var_1.Str_Comp.length, Next_Ptr_Glob.variant.var_1.Str_Comp.ptr);\n-  printf (\"        should be:   DHRYSTONE PROGRAM, SOME STRING\\n\");\n-  printf (\"Int_1_Loc:           %d\\n\", Int_1_Loc);\n-  printf (\"        should be:   %d\\n\", 5);\n-  printf (\"Int_2_Loc:           %d\\n\", Int_2_Loc);\n-  printf (\"        should be:   %d\\n\", 13);\n-  printf (\"Int_3_Loc:           %d\\n\", Int_3_Loc);\n-  printf (\"        should be:   %d\\n\", 7);\n-  printf (\"Enum_Loc:            %d\\n\", Enum_Loc);\n-  printf (\"        should be:   %d\\n\", 1);\n-  printf (\"Str_1_Loc:           %.*s\\n\", Str_1_Loc.length, Str_1_Loc.ptr);\n-  printf (\"        should be:   DHRYSTONE PROGRAM, 1'ST STRING\\n\");\n-  printf (\"Str_2_Loc:           %.*s\\n\", Str_2_Loc.length, Str_2_Loc.ptr);\n-  printf (\"        should be:   DHRYSTONE PROGRAM, 2'ND STRING\\n\");\n-  printf (\"\\n\");\n-\n-  User_Time = End_Time - Begin_Time;\n-\n-  if (User_Time < Too_Small_Time)\n-  {\n-    printf (\"Measured time too small to obtain meaningful results\\n\");\n-    printf (\"Please increase number of runs\\n\");\n-    printf (\"\\n\");\n-  }\n-  else\n-  {\n-    Microseconds = User_Time * Mic_secs_Per_Second\n-                        / cast(double) Number_Of_Runs;\n-    Dhrystones_Per_Second = cast(double) Number_Of_Runs / User_Time;\n-    Vax_Mips = Dhrystones_Per_Second / 1757.0;\n-\n-    printf (\"Register option selected?  NO\\n\");\n-    strcpy(Reg_Define.ptr, \"Register option not selected.\");\n-    printf (\"Microseconds for one run through Dhrystone: \");\n-    printf (\"%7.1lf \\n\", Microseconds);\n-    printf (\"Dhrystones per Second:                      \");\n-    printf (\"%10.1lf \\n\", Dhrystones_Per_Second);\n-    printf (\"VAX MIPS rating = %10.3lf \\n\",Vax_Mips);\n-    printf (\"\\n\");\n-\n-   /+\n-  fprintf(Ap,\"\\n\");\n-  fprintf(Ap,\"Dhrystone Benchmark, Version 2.1 (Language: D)\\n\");\n-  fprintf(Ap,\"%.*s\\n\",Reg_Define.length, Reg_Define.ptr);\n-  fprintf(Ap,\"Microseconds for one loop: %7.1lf\\n\",Microseconds);\n-  fprintf(Ap,\"Dhrystones per second: %10.1lf\\n\",Dhrystones_Per_Second);\n-  fprintf(Ap,\"VAX MIPS rating: %10.3lf\\n\",Vax_Mips);\n-  fclose(Ap);\n-  +/\n-\n-  }\n-\n-}\n-\n-void Proc_1 (Rec_Pointer Ptr_Val_Par)\n-/******************/\n-\n-    /* executed once */\n-{\n-      Rec_Pointer Next_Record = Ptr_Val_Par.Ptr_Comp;\n-                                        /* == Ptr_Glob_Next */\n-  /* Local variable, initialized with Ptr_Val_Par.Ptr_Comp,    */\n-  /* corresponds to \"rename\" in Ada, \"with\" in Pascal           */\n-\n-  *Ptr_Val_Par.Ptr_Comp = *Ptr_Glob;\n-  Ptr_Val_Par.variant.var_1.Int_Comp = 5;\n-  Next_Record.variant.var_1.Int_Comp\n-        = Ptr_Val_Par.variant.var_1.Int_Comp;\n-  Next_Record.Ptr_Comp = Ptr_Val_Par.Ptr_Comp;\n-  Proc_3 (&Next_Record.Ptr_Comp);\n-    /* Ptr_Val_Par.Ptr_Comp.Ptr_Comp\n-                        == Ptr_Glob.Ptr_Comp */\n-  if (Next_Record.Discr == Ident_1)\n-    /* then, executed */\n-  {\n-    Next_Record.variant.var_1.Int_Comp = 6;\n-    Proc_6 (Ptr_Val_Par.variant.var_1.Enum_Comp,\n-           &Next_Record.variant.var_1.Enum_Comp);\n-    Next_Record.Ptr_Comp = Ptr_Glob.Ptr_Comp;\n-    Proc_7 (Next_Record.variant.var_1.Int_Comp, 10,\n-           &Next_Record.variant.var_1.Int_Comp);\n-  }\n-  else /* not executed */\n-    *Ptr_Val_Par = *Ptr_Val_Par.Ptr_Comp;\n-} /* Proc_1 */\n-\n-void Proc_2 (One_Fifty *Int_Par_Ref)\n-/******************/\n-    /* executed once */\n-    /* *Int_Par_Ref == 1, becomes 4 */\n-{\n-  One_Fifty  Int_Loc;\n-  Enumeration   Enum_Loc;\n-\n-  Int_Loc = *Int_Par_Ref + 10;\n-  do /* executed once */\n-    if (Ch_1_Glob == 'A')\n-      /* then, executed */\n-    {\n-      Int_Loc -= 1;\n-      *Int_Par_Ref = Int_Loc - Int_Glob;\n-      Enum_Loc = Ident_1;\n-    } /* if */\n-  while (Enum_Loc != Ident_1); /* true */\n-} /* Proc_2 */\n-\n-\n-void Proc_3 (Rec_Pointer *Ptr_Ref_Par)\n-/******************/\n-    /* executed once */\n-    /* Ptr_Ref_Par becomes Ptr_Glob */\n-\n-{\n-  if (Ptr_Glob !=    null)\n-    /* then, executed */\n-    *Ptr_Ref_Par = Ptr_Glob.Ptr_Comp;\n-  Proc_7 (10, Int_Glob, &Ptr_Glob.variant.var_1.Int_Comp);\n-} /* Proc_3 */\n-\n-void Proc_4 () /* without parameters */\n-/*******/\n-    /* executed once */\n-{\n-  Boolean Bool_Loc;\n-\n-  Bool_Loc = Ch_1_Glob == 'A';\n-  Bool_Glob = Bool_Loc | Bool_Glob;\n-  Ch_2_Glob = 'B';\n-} /* Proc_4 */\n-\n-\n-void Proc_5 () /* without parameters */\n-/*******/\n-    /* executed once */\n-{\n-  Ch_1_Glob = 'A';\n-  Bool_Glob = false;\n-} /* Proc_5 */\n-\n-\n-void Proc_6 (Enumeration Enum_Val_Par, Enumeration *Enum_Ref_Par)\n-/*********************************/\n-    /* executed once */\n-    /* Enum_Val_Par == Ident_3, Enum_Ref_Par becomes Ident_2 */\n-{\n-  *Enum_Ref_Par = Enum_Val_Par;\n-  if (! Func_3 (Enum_Val_Par))\n-    /* then, not executed */\n-    *Enum_Ref_Par = Ident_4;\n-  final switch (Enum_Val_Par)\n-  {\n-    case Ident_1:\n-      *Enum_Ref_Par = Ident_1;\n-      break;\n-    case Ident_2:\n-      if (Int_Glob > 100)\n-        /* then */\n-      *Enum_Ref_Par = Ident_1;\n-      else *Enum_Ref_Par = Ident_4;\n-      break;\n-    case Ident_3: /* executed */\n-      *Enum_Ref_Par = Ident_2;\n-      break;\n-    case Ident_4: break;\n-    case Ident_5:\n-      *Enum_Ref_Par = Ident_3;\n-      break;\n-  } /* switch */\n-} /* Proc_6 */\n-\n-\n-void Proc_7 (One_Fifty Int_1_Par_Val, One_Fifty Int_2_Par_Val, One_Fifty *Int_Par_Ref)\n-/**********************************************/\n-    /* executed three times                                      */\n-    /* first call:      Int_1_Par_Val == 2, Int_2_Par_Val == 3,  */\n-    /*                  Int_Par_Ref becomes 7                    */\n-    /* second call:     Int_1_Par_Val == 10, Int_2_Par_Val == 5, */\n-    /*                  Int_Par_Ref becomes 17                   */\n-    /* third call:      Int_1_Par_Val == 6, Int_2_Par_Val == 10, */\n-    /*                  Int_Par_Ref becomes 18                   */\n-{\n-  One_Fifty Int_Loc;\n-\n-  Int_Loc = Int_1_Par_Val + 2;\n-  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;\n-} /* Proc_7 */\n-\n-\n-void Proc_8 (ref Arr_1_Dim Arr_1_Par_Ref, ref Arr_2_Dim Arr_2_Par_Ref, int Int_1_Par_Val, int Int_2_Par_Val)\n-/*********************************************************************/\n-    /* executed once      */\n-    /* Int_Par_Val_1 == 3 */\n-    /* Int_Par_Val_2 == 7 */\n-{\n-      One_Fifty Int_Index;\n-      One_Fifty Int_Loc;\n-\n-  Int_Loc = Int_1_Par_Val + 5;\n-  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;\n-  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];\n-  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;\n-  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)\n-    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;\n-  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;\n-  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];\n-  Int_Glob = 5;\n-} /* Proc_8 */\n-\n-\n-Enumeration Func_1 (Capital_Letter Ch_1_Par_Val, Capital_Letter Ch_2_Par_Val)\n-/*************************************************/\n-    /* executed three times                                         */\n-    /* first call:      Ch_1_Par_Val == 'H', Ch_2_Par_Val == 'R'    */\n-    /* second call:     Ch_1_Par_Val == 'A', Ch_2_Par_Val == 'C'    */\n-    /* third call:      Ch_1_Par_Val == 'B', Ch_2_Par_Val == 'C'    */\n-{\n-  Capital_Letter        Ch_1_Loc;\n-  Capital_Letter        Ch_2_Loc;\n-\n-  Ch_1_Loc = Ch_1_Par_Val;\n-  Ch_2_Loc = Ch_1_Loc;\n-  if (Ch_2_Loc != Ch_2_Par_Val)\n-    /* then, executed */\n-    return (Ident_1);\n-  else  /* not executed */\n-  {\n-    Ch_1_Glob = Ch_1_Loc;\n-    return (Ident_2);\n-   }\n-} /* Func_1 */\n-\n-\n-Boolean Func_2 (Str_30 Str_1_Par_Ref, Str_30 Str_2_Par_Ref)\n-/*************************************************/\n-    /* executed once */\n-    /* Str_1_Par_Ref == \"DHRYSTONE PROGRAM, 1'ST STRING\" */\n-    /* Str_2_Par_Ref == \"DHRYSTONE PROGRAM, 2'ND STRING\" */\n-{\n-      One_Thirty        Int_Loc;\n-      Capital_Letter    Ch_Loc;\n-\n-  Int_Loc = 2;\n-  while (Int_Loc <= 2) /* loop body executed once */\n-    if (Func_1 (Str_1_Par_Ref[Int_Loc],\n-                Str_2_Par_Ref[Int_Loc+1]) == Ident_1)\n-      /* then, executed */\n-    {\n-      Ch_Loc = 'A';\n-      Int_Loc += 1;\n-    } /* if, while */\n-  if (Ch_Loc >= 'W' && Ch_Loc < 'Z')\n-    /* then, not executed */\n-    Int_Loc = 7;\n-  if (Ch_Loc == 'R')\n-    /* then, not executed */\n-    return (true);\n-  else /* executed */\n-  {\n-    //if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)\n-    //if (memcmp (Str_1_Par_Ref, Str_2_Par_Ref, 30) > 0)\n-    if (Str_1_Par_Ref > Str_2_Par_Ref)\n-      /* then, not executed */\n-    {\n-      Int_Loc += 7;\n-      Int_Glob = Int_Loc;\n-      return (true);\n-    }\n-    else /* executed */\n-      return (false);\n-  } /* if Ch_Loc */\n-} /* Func_2 */\n-\n-\n-Boolean Func_3 (Enumeration Enum_Par_Val)\n-/***************************/\n-    /* executed once        */\n-    /* Enum_Par_Val == Ident_3 */\n-{\n-  Enumeration Enum_Loc;\n-\n-  Enum_Loc = Enum_Par_Val;\n-  if (Enum_Loc == Ident_3)\n-    /* then, executed */\n-    return (true);\n-  else /* not executed */\n-    return (false);\n-} /* Func_3 */\n-\n-version (Windows)\n-{\n-    import core.sys.windows.windows;\n-\n-    double dtime()\n-    {\n-     double q;\n-\n-     q = cast(double)GetTickCount() * 1.0e-03;\n-\n-     return q;\n-    }\n-}\n-\n-version (linux)\n-{\n-    import core.stdc.time;\n-\n-    double dtime()\n-    {\n-     double q;\n-\n-     q = cast(double)time(null);\n-\n-     return q;\n-    }\n-}\n-\n-version (OSX)   // supplied by Anders F Bjorklund\n-{\n-    import core.sys.posix.sys.time;\n-\n-    double dtime()\n-    {\n-     double q;\n-     timeval tv;\n-\n-     gettimeofday(&tv,null);\n-     q = cast(double)tv.tv_sec + cast(double)tv.tv_usec * 1.0e-6;\n-\n-     return q;\n-    }\n-}\n-\n-version (NetBSD)\n-{\n-    import core.sys.posix.sys.time;\n-\n-    double dtime()\n-    {\n-     double q;\n-     timeval tv;\n-\n-     gettimeofday(&tv,null);\n-     q = cast(double)tv.tv_sec + cast(double)tv.tv_usec * 1.0e-6;\n-\n-     return q;\n-    }\n-}"}, {"sha": "fa012b5664e90e1b65a08ef6b52f0c5ad03a763e", "filename": "gcc/testsuite/gdc.test/runnable/nested.d", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fnested.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fnested.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Fnested.d?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -790,18 +790,9 @@ void test33()\n         return 3;\n     }\n \n-    extern (Pascal) int Foo4(int a, int b, int c)\n-    {\n-        assert(a == 1);\n-        assert(b == 2);\n-        assert(c == 3);\n-        return 4;\n-    }\n-\n     assert(Foo1(1, 2, 3) == 1);\n     assert(Foo2(1, 2, 3) == 2);\n     assert(Foo3(1, 2, 3) == 3);\n-    assert(Foo4(1, 2, 3) == 4);\n \n     printf(\"test33 success\\n\");\n }"}, {"sha": "1d035726088d4722e9ef818b6a448e082d8da701", "filename": "gcc/testsuite/gdc.test/runnable/test4.d", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest4.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b2f370fa915d74dff066d4b0340ddb459728046/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest4.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest4.d?ref=6b2f370fa915d74dff066d4b0340ddb459728046", "patch": "@@ -605,11 +605,6 @@ extern (C) int cfc(int x, int y)\n     return x * 10 + y;\n }\n \n-extern (Pascal) int cfp(int x, int y)\n-{\n-    return x * 10 + y;\n-}\n-\n int cfd(int x, int y)\n {\n     return x * 10 + y;\n@@ -618,7 +613,6 @@ int cfd(int x, int y)\n \n extern (Windows) int function (int, int) fpw;\n extern (C) int function (int, int) fpc;\n-extern (Pascal) int function (int, int) fpp;\n int function (int, int) fpd;\n \n void test20()\n@@ -628,7 +622,6 @@ void test20()\n \n     fpw = &cfw;\n     fpc = &cfc;\n-    fpp = &cfp;\n     fpd = &cfd;\n \n //printf(\"test w\\n\");\n@@ -639,10 +632,6 @@ void test20()\n     i = (*fpc)(3, 4);\n     assert(i == 34);\n \n-//printf(\"test p\\n\");\n-    i = (*fpp)(5, 6);\n-    assert(i == 56);\n-\n //printf(\"test d\\n\");\n     i = (*fpd)(7, 8);\n     assert(i == 78);\n@@ -1480,4 +1469,3 @@ int main()\n     printf(\"Success\\n\");\n     return 0;\n }\n-"}]}