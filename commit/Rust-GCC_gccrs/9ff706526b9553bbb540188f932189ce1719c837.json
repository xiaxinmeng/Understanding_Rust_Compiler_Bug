{"sha": "9ff706526b9553bbb540188f932189ce1719c837", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZmNzA2NTI2Yjk1NTNiYmI1NDAxODhmOTMyMTg5Y2UxNzE5YzgzNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-12-07T11:27:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-12-07T11:27:37Z"}, "message": "re PR debug/46799 (-fcompare-debug failure (length) with -ftree-parallelize-loops=2 -fno-tree-dce)\n\n\tPR debug/46799\n\t* tree-parloops.c (separate_decls_in_region): Use UNKNOWN_LOCATION\n\tinstead of BUILTINS_LOCATION.\n\t(create_loop_fn): Add LOC argument, pass it to build_decl instead of\n\tBUILTINS_LOCATION.\n\t(create_parallel_loop): Add LOC argument, use it for OMP clauses\n\tand GIMPLE_*OMP* statements.\n\t(gen_parallel_loop): Determine locus for the parallel loop, pass it\n\tto create_loop_fn and create_parallel_loop.\n\t* cfgexpand.c (gimple_expand_cfg): For builtin functions, call\n\tset_curr_insn_source_location (UNKNOWN_LOCATION).\n\n\t* gcc.dg/autopar/pr46799.c: New test.\n\nFrom-SVN: r167533", "tree": {"sha": "ac015b9b436b84f86d7c127a859fc2714afabbef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac015b9b436b84f86d7c127a859fc2714afabbef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ff706526b9553bbb540188f932189ce1719c837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff706526b9553bbb540188f932189ce1719c837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff706526b9553bbb540188f932189ce1719c837", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff706526b9553bbb540188f932189ce1719c837/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c4254403a6e72984c2afec386830c6415ea2a96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4254403a6e72984c2afec386830c6415ea2a96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4254403a6e72984c2afec386830c6415ea2a96"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "96c235f768bc26747ecb8c1207f9c03452af811b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff706526b9553bbb540188f932189ce1719c837/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff706526b9553bbb540188f932189ce1719c837/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ff706526b9553bbb540188f932189ce1719c837", "patch": "@@ -1,3 +1,17 @@\n+2010-12-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/46799\n+\t* tree-parloops.c (separate_decls_in_region): Use UNKNOWN_LOCATION\n+\tinstead of BUILTINS_LOCATION.\n+\t(create_loop_fn): Add LOC argument, pass it to build_decl instead of\n+\tBUILTINS_LOCATION.\n+\t(create_parallel_loop): Add LOC argument, use it for OMP clauses\n+\tand GIMPLE_*OMP* statements.\n+\t(gen_parallel_loop): Determine locus for the parallel loop, pass it\n+\tto create_loop_fn and create_parallel_loop.\n+\t* cfgexpand.c (gimple_expand_cfg): For builtin functions, call\n+\tset_curr_insn_source_location (UNKNOWN_LOCATION).\n+\n 2010-12-07  Joern Rennecke  <amylaar@spamcop.net>\n \t    Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "0ab06ead9f271c84849fd44d569941571176bc65", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff706526b9553bbb540188f932189ce1719c837/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff706526b9553bbb540188f932189ce1719c837/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=9ff706526b9553bbb540188f932189ce1719c837", "patch": "@@ -3927,6 +3927,8 @@ gimple_expand_cfg (void)\n       else\n        set_curr_insn_source_location (cfun->function_start_locus);\n     }\n+  else\n+    set_curr_insn_source_location (UNKNOWN_LOCATION);\n   set_curr_insn_block (DECL_INITIAL (current_function_decl));\n   prologue_locator = curr_insn_locator ();\n "}, {"sha": "c77146d7f60b011929146f646b517105fc45c2e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff706526b9553bbb540188f932189ce1719c837/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff706526b9553bbb540188f932189ce1719c837/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ff706526b9553bbb540188f932189ce1719c837", "patch": "@@ -1,3 +1,8 @@\n+2010-12-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/46799\n+\t* gcc.dg/autopar/pr46799.c: New test.\n+\n 2010-12-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* gfortran.dg/internal_dummy_2.f08: Fix dg-options."}, {"sha": "575e12c55599b66ce73e7ae0fe4c6553c381264c", "filename": "gcc/testsuite/gcc.dg/autopar/pr46799.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff706526b9553bbb540188f932189ce1719c837/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr46799.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff706526b9553bbb540188f932189ce1719c837/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr46799.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr46799.c?ref=9ff706526b9553bbb540188f932189ce1719c837", "patch": "@@ -0,0 +1,12 @@\n+/* PR debug/46799 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftree-parallelize-loops=2 -fno-tree-dce -ftree-pre -fcompare-debug\" } */\n+\n+int\n+foo (int i, int *a)\n+{\n+  int e;\n+  for (; i; i++)\n+    e = *a;\n+  return e;\n+}"}, {"sha": "25ef2f29454f72b8708c99c356b2a90aacb2926b", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff706526b9553bbb540188f932189ce1719c837/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff706526b9553bbb540188f932189ce1719c837/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=9ff706526b9553bbb540188f932189ce1719c837", "patch": "@@ -1202,7 +1202,7 @@ separate_decls_in_region (edge entry, edge exit, htab_t reduction_list,\n     {\n       /* Create the type for the structure to store the ssa names to.  */\n       type = lang_hooks.types.make_type (RECORD_TYPE);\n-      type_name = build_decl (BUILTINS_LOCATION,\n+      type_name = build_decl (UNKNOWN_LOCATION,\n \t\t\t      TYPE_DECL, create_tmp_var_name (\".paral_data\"),\n \t\t\t      type);\n       TYPE_NAME (type) = type_name;\n@@ -1269,7 +1269,7 @@ parallelized_function_p (tree fn)\n    a parallelized loop.  */\n \n static tree\n-create_loop_fn (void)\n+create_loop_fn (location_t loc)\n {\n   char buf[100];\n   char *tname;\n@@ -1283,8 +1283,7 @@ create_loop_fn (void)\n   name = get_identifier (tname);\n   type = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n \n-  decl = build_decl (BUILTINS_LOCATION,\n-\t\t     FUNCTION_DECL, name, type);\n+  decl = build_decl (loc, FUNCTION_DECL, name, type);\n   if (!parallelized_functions)\n     parallelized_functions = BITMAP_GGC_ALLOC ();\n   bitmap_set_bit (parallelized_functions, DECL_UID (decl));\n@@ -1299,14 +1298,12 @@ create_loop_fn (void)\n   DECL_CONTEXT (decl) = NULL_TREE;\n   DECL_INITIAL (decl) = make_node (BLOCK);\n \n-  t = build_decl (BUILTINS_LOCATION,\n-\t\t  RESULT_DECL, NULL_TREE, void_type_node);\n+  t = build_decl (loc, RESULT_DECL, NULL_TREE, void_type_node);\n   DECL_ARTIFICIAL (t) = 1;\n   DECL_IGNORED_P (t) = 1;\n   DECL_RESULT (decl) = t;\n \n-  t = build_decl (BUILTINS_LOCATION,\n-\t\t  PARM_DECL, get_identifier (\".paral_data_param\"),\n+  t = build_decl (loc, PARM_DECL, get_identifier (\".paral_data_param\"),\n \t\t  ptr_type_node);\n   DECL_ARTIFICIAL (t) = 1;\n   DECL_ARG_TYPE (t) = ptr_type_node;\n@@ -1448,7 +1445,7 @@ transform_to_exit_first_loop (struct loop *loop, htab_t reduction_list, tree nit\n \n static basic_block\n create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n-\t\t      tree new_data, unsigned n_threads)\n+\t\t      tree new_data, unsigned n_threads, location_t loc)\n {\n   gimple_stmt_iterator gsi;\n   basic_block bb, paral_bb, for_bb, ex_bb;\n@@ -1462,10 +1459,11 @@ create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n   paral_bb = single_pred (bb);\n   gsi = gsi_last_bb (paral_bb);\n \n-  t = build_omp_clause (BUILTINS_LOCATION, OMP_CLAUSE_NUM_THREADS);\n+  t = build_omp_clause (loc, OMP_CLAUSE_NUM_THREADS);\n   OMP_CLAUSE_NUM_THREADS_EXPR (t)\n     = build_int_cst (integer_type_node, n_threads);\n   stmt = gimple_build_omp_parallel (NULL, t, loop_fn, data);\n+  gimple_set_location (stmt, loc);\n \n   gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n \n@@ -1488,7 +1486,9 @@ create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n   /* Emit GIMPLE_OMP_RETURN for GIMPLE_OMP_PARALLEL.  */\n   bb = split_loop_exit_edge (single_dom_exit (loop));\n   gsi = gsi_last_bb (bb);\n-  gsi_insert_after (&gsi, gimple_build_omp_return (false), GSI_NEW_STMT);\n+  stmt = gimple_build_omp_return (false);\n+  gimple_set_location (stmt, loc);\n+  gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n \n   /* Extract data for GIMPLE_OMP_FOR.  */\n   gcc_assert (loop->header == single_dom_exit (loop)->src);\n@@ -1538,10 +1538,11 @@ create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n   /* Emit GIMPLE_OMP_FOR.  */\n   gimple_cond_set_lhs (cond_stmt, cvar_base);\n   type = TREE_TYPE (cvar);\n-  t = build_omp_clause (BUILTINS_LOCATION, OMP_CLAUSE_SCHEDULE);\n+  t = build_omp_clause (loc, OMP_CLAUSE_SCHEDULE);\n   OMP_CLAUSE_SCHEDULE_KIND (t) = OMP_CLAUSE_SCHEDULE_STATIC;\n \n   for_stmt = gimple_build_omp_for (NULL, t, 1, NULL);\n+  gimple_set_location (for_stmt, loc);\n   gimple_omp_for_set_index (for_stmt, 0, initvar);\n   gimple_omp_for_set_initial (for_stmt, 0, cvar_init);\n   gimple_omp_for_set_final (for_stmt, 0, gimple_cond_rhs (cond_stmt));\n@@ -1557,12 +1558,15 @@ create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n   /* Emit GIMPLE_OMP_CONTINUE.  */\n   gsi = gsi_last_bb (loop->latch);\n   stmt = gimple_build_omp_continue (cvar_next, cvar);\n+  gimple_set_location (stmt, loc);\n   gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n   SSA_NAME_DEF_STMT (cvar_next) = stmt;\n \n   /* Emit GIMPLE_OMP_RETURN for GIMPLE_OMP_FOR.  */\n   gsi = gsi_last_bb (ex_bb);\n-  gsi_insert_after (&gsi, gimple_build_omp_return (true), GSI_NEW_STMT);\n+  stmt = gimple_build_omp_return (true);\n+  gimple_set_location (stmt, loc);\n+  gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n \n   return paral_bb;\n }\n@@ -1585,6 +1589,8 @@ gen_parallel_loop (struct loop *loop, htab_t reduction_list,\n   edge entry, exit;\n   struct clsn_data clsn_data;\n   unsigned prob;\n+  location_t loc;\n+  gimple cond_stmt;\n \n   /* From\n \n@@ -1696,8 +1702,12 @@ gen_parallel_loop (struct loop *loop, htab_t reduction_list,\n \t\t\t    &new_arg_struct, &clsn_data);\n \n   /* Create the parallel constructs.  */\n-  parallel_head = create_parallel_loop (loop, create_loop_fn (), arg_struct,\n-\t\t\t\t\tnew_arg_struct, n_threads);\n+  loc = UNKNOWN_LOCATION;\n+  cond_stmt = last_stmt (loop->header);\n+  if (cond_stmt)\n+    loc = gimple_location (cond_stmt);\n+  parallel_head = create_parallel_loop (loop, create_loop_fn (loc), arg_struct,\n+\t\t\t\t\tnew_arg_struct, n_threads, loc);\n   if (htab_elements (reduction_list) > 0)\n     create_call_for_reduction (loop, reduction_list, &clsn_data);\n "}]}