{"sha": "b3b7bbce43e5189032c565391f2c5c98dedb3f27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNiN2JiY2U0M2U1MTg5MDMyYzU2NTM5MWYyYzVjOThkZWRiM2YyNw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2010-07-02T23:16:35Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2010-07-02T23:16:35Z"}, "message": "neon.md (UNSPEC_VAND): Delete.\n\n2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/arm/neon.md (UNSPEC_VAND): Delete.\n\t(UNSPEC_VBIC): Delete.\n\t(UNSPEC_VCLZ): Delete.\n\t(UNSPEC_VCNT): Delete.\n\t(UNSPEC_VEOR): Delete.\n\t(UNSPEC_VORN): Delete.\n\t(UNSPEC_VORR): Delete.\n\t(iordi3_neon): Rewrite RTL without unspec.  Add alternatives to handle\n\tcore registers too.\n\t(anddi3_neon): Likewise.\n\t(orndi3_neon): Likewise.\n\t(bicdi3_neon): Likewise.\n\t(xordi3_neon): Likewise.\n\t(neon_vclz<mode>): Rewrite as define_expand and clz<mode>2 to get\n\trid of unspec and handle unused operand.\n\t(neon_vcnt<mode>): Similarly, with popcount<mode>2.\n\t* config/arm/predicates.md (imm_for_neon_logic_operand):\n\tRequire TARGET_NEON.\n\t(imm_for_neon_inv_logic_operand): Likewise.\n\t* config/arm/arm.md (define_split for logical_binary_operator): \n\tDisable for NEON registers.\n\t(anddi3): Add new define_expand, and rename the insn.  Disable\n\tthis insn for NEON, where anddi3_neon now applies.\n\t(*anddi_notdi_di): Disable for TARGET_NEON, where bicdi3_neon applies.\n\t(iordi3): As for anddi3.\n\t(xordi3): Likewise.\n\t* config/arm/neon.ml (Vand): Split DImode variants and mark them\n\tas No_op to disable testing for exact instruction match.\n\t(Vorr): Likewise.\n\t(Veor): Likewise.\n\t(Vbic): Likewise.\n\t(Vorn): Likewise.\n\t* config/arm/arm_neon.h: Regenerated.\n\t* doc/arm-neon-intrinsics.texi: Regenerated.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/neon-vands64.c: New.\n\t* gcc.target/arm/neon-vandu64.c: New.\n\t* gcc.target/arm/neon-vbics64.c: New.\n\t* gcc.target/arm/neon-vbicu64.c: New.\n\t* gcc.target/arm/neon-veors64.c: New.\n\t* gcc.target/arm/neon-veoru64.c: New.\n\t* gcc.target/arm/neon-vorns64.c: New.\n\t* gcc.target/arm/neon-vornu64.c: New.\n\t* gcc.target/arm/neon-vorrs64.c: New.\n\t* gcc.target/arm/neon-vorru64.c: New.\n\t* gcc.target/arm/neon/vands64.c: Regenerated.\n\t* gcc.target/arm/neon/vandu64.c: Regenerated.\n\t* gcc.target/arm/neon/vbics64.c: Regenerated.\n\t* gcc.target/arm/neon/vbicu64.c: Regenerated.\n\t* gcc.target/arm/neon/veors64.c: Regenerated.\n\t* gcc.target/arm/neon/veoru64.c: Regenerated.\n\t* gcc.target/arm/neon/vorns64.c: Regenerated.\n\t* gcc.target/arm/neon/vornu64.c: Regenerated.\n\t* gcc.target/arm/neon/vorrs64.c: Regenerated.\n\t* gcc.target/arm/neon/vorru64.c: Regenerated.\n\nFrom-SVN: r161755", "tree": {"sha": "a25fee3a9968cad28df3933528753ab2d110e680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a25fee3a9968cad28df3933528753ab2d110e680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3b7bbce43e5189032c565391f2c5c98dedb3f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b7bbce43e5189032c565391f2c5c98dedb3f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3b7bbce43e5189032c565391f2c5c98dedb3f27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b7bbce43e5189032c565391f2c5c98dedb3f27/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4a4b582ca658258504772e8910bb8392436195d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a4b582ca658258504772e8910bb8392436195d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a4b582ca658258504772e8910bb8392436195d"}], "stats": {"total": 545, "additions": 426, "deletions": 119}, "files": [{"sha": "4baf61f26244dacebcdb15dfbb84b216cbc9530c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -1,3 +1,40 @@\n+2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/arm/neon.md (UNSPEC_VAND): Delete.\n+\t(UNSPEC_VBIC): Delete.\n+\t(UNSPEC_VCLZ): Delete.\n+\t(UNSPEC_VCNT): Delete.\n+\t(UNSPEC_VEOR): Delete.\n+\t(UNSPEC_VORN): Delete.\n+\t(UNSPEC_VORR): Delete.\n+\t(iordi3_neon): Rewrite RTL without unspec.  Add alternatives to handle\n+\tcore registers too.\n+\t(anddi3_neon): Likewise.\n+\t(orndi3_neon): Likewise.\n+\t(bicdi3_neon): Likewise.\n+\t(xordi3_neon): Likewise.\n+\t(neon_vclz<mode>): Rewrite as define_expand and clz<mode>2 to get\n+\trid of unspec and handle unused operand.\n+\t(neon_vcnt<mode>): Similarly, with popcount<mode>2.\n+\t* config/arm/predicates.md (imm_for_neon_logic_operand):\n+\tRequire TARGET_NEON.\n+\t(imm_for_neon_inv_logic_operand): Likewise.\n+\t* config/arm/arm.md (define_split for logical_binary_operator): \n+\tDisable for NEON registers.\n+\t(anddi3): Add new define_expand, and rename the insn.  Disable\n+\tthis insn for NEON, where anddi3_neon now applies.\n+\t(*anddi_notdi_di): Disable for TARGET_NEON, where bicdi3_neon applies.\n+\t(iordi3): As for anddi3.\n+\t(xordi3): Likewise.\n+\t* config/arm/neon.ml (Vand): Split DImode variants and mark them\n+\tas No_op to disable testing for exact instruction match.\n+\t(Vorr): Likewise.\n+\t(Veor): Likewise.\n+\t(Vbic): Likewise.\n+\t(Vorn): Likewise.\n+\t* config/arm/arm_neon.h: Regenerated.\n+\t* doc/arm-neon-intrinsics.texi: Regenerated.\n+\n 2010-07-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* expr.h (emit_stack_probe): Declare."}, {"sha": "f490966086b9189f658cac118310b4d9c9370a2b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -1810,6 +1810,7 @@\n \t  [(match_operand:DI 1 \"s_register_operand\" \"\")\n \t   (match_operand:DI 2 \"s_register_operand\" \"\")]))]\n   \"TARGET_32BIT && reload_completed\n+   && ! (TARGET_NEON && IS_VFP_REGNUM (REGNO (operands[0])))\n    && ! IS_IWMMXT_REGNUM (REGNO (operands[0]))\"\n   [(set (match_dup 0) (match_op_dup:SI 6 [(match_dup 1) (match_dup 2)]))\n    (set (match_dup 3) (match_op_dup:SI 6 [(match_dup 4) (match_dup 5)]))]\n@@ -1883,11 +1884,19 @@\n   }\"\n )\n \n-(define_insn \"anddi3\"\n+(define_expand \"anddi3\"\n+  [(set (match_operand:DI         0 \"s_register_operand\" \"\")\n+\t(and:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n+\t\t(match_operand:DI 2 \"neon_inv_logic_op2\" \"\")))]\n+  \"TARGET_32BIT\"\n+  \"\"\n+)\n+\n+(define_insn \"*anddi3_insn\"\n   [(set (match_operand:DI         0 \"s_register_operand\" \"=&r,&r\")\n \t(and:DI (match_operand:DI 1 \"s_register_operand\"  \"%0,r\")\n \t\t(match_operand:DI 2 \"s_register_operand\"   \"r,r\")))]\n-  \"TARGET_32BIT && ! TARGET_IWMMXT\"\n+  \"TARGET_32BIT && !TARGET_IWMMXT && !TARGET_NEON\"\n   \"#\"\n   [(set_attr \"length\" \"8\")]\n )\n@@ -2487,7 +2496,9 @@\n \t\t(match_operand:DI 2 \"s_register_operand\" \"r,0\")))]\n   \"TARGET_32BIT\"\n   \"#\"\n-  \"TARGET_32BIT && reload_completed && ! IS_IWMMXT_REGNUM (REGNO (operands[0]))\"\n+  \"TARGET_32BIT && reload_completed\n+   && ! (TARGET_NEON && IS_VFP_REGNUM (REGNO (operands[0])))\n+   && ! IS_IWMMXT_REGNUM (REGNO (operands[0]))\"\n   [(set (match_dup 0) (and:SI (not:SI (match_dup 1)) (match_dup 2)))\n    (set (match_dup 3) (and:SI (not:SI (match_dup 4)) (match_dup 5)))]\n   \"\n@@ -2611,11 +2622,19 @@\n   [(set_attr \"conds\" \"set\")]\n )\n \n-(define_insn \"iordi3\"\n+(define_expand \"iordi3\"\n+  [(set (match_operand:DI         0 \"s_register_operand\" \"\")\n+\t(ior:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n+\t\t(match_operand:DI 2 \"neon_logic_op2\" \"\")))]\n+  \"TARGET_32BIT\"\n+  \"\"\n+)\n+\n+(define_insn \"*iordi3_insn\"\n   [(set (match_operand:DI         0 \"s_register_operand\" \"=&r,&r\")\n \t(ior:DI (match_operand:DI 1 \"s_register_operand\"  \"%0,r\")\n \t\t(match_operand:DI 2 \"s_register_operand\"   \"r,r\")))]\n-  \"TARGET_32BIT && ! TARGET_IWMMXT\"\n+  \"TARGET_32BIT && !TARGET_IWMMXT && !TARGET_NEON\"\n   \"#\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -2741,11 +2760,19 @@\n   [(set_attr \"conds\" \"set\")]\n )\n \n-(define_insn \"xordi3\"\n+(define_expand \"xordi3\"\n+  [(set (match_operand:DI         0 \"s_register_operand\" \"\")\n+\t(xor:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n+\t\t(match_operand:DI 2 \"s_register_operand\" \"\")))]\n+  \"TARGET_32BIT\"\n+  \"\"\n+)\n+\n+(define_insn \"*xordi3_insn\"\n   [(set (match_operand:DI         0 \"s_register_operand\" \"=&r,&r\")\n \t(xor:DI (match_operand:DI 1 \"s_register_operand\"  \"%0,r\")\n \t\t(match_operand:DI 2 \"s_register_operand\"   \"r,r\")))]\n-  \"TARGET_32BIT && !TARGET_IWMMXT\"\n+  \"TARGET_32BIT && !TARGET_IWMMXT && !TARGET_NEON\"\n   \"#\"\n   [(set_attr \"length\" \"8\")\n    (set_attr \"predicable\" \"yes\")]"}, {"sha": "a6085bba28564c663003e090d42b522b2286229e", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -5808,12 +5808,6 @@ vget_low_s32 (int32x4_t __a)\n   return (int32x2_t)__builtin_neon_vget_lowv4si (__a);\n }\n \n-__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vget_low_s64 (int64x2_t __a)\n-{\n-  return (int64x1_t)__builtin_neon_vget_lowv2di (__a);\n-}\n-\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vget_low_f32 (float32x4_t __a)\n {\n@@ -5838,12 +5832,6 @@ vget_low_u32 (uint32x4_t __a)\n   return (uint32x2_t)__builtin_neon_vget_lowv4si ((int32x4_t) __a);\n }\n \n-__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n-vget_low_u64 (uint64x2_t __a)\n-{\n-  return (uint64x1_t)__builtin_neon_vget_lowv2di ((int64x2_t) __a);\n-}\n-\n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vget_low_p8 (poly8x16_t __a)\n {\n@@ -5856,6 +5844,18 @@ vget_low_p16 (poly16x8_t __a)\n   return (poly16x4_t)__builtin_neon_vget_lowv8hi ((int16x8_t) __a);\n }\n \n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vget_low_s64 (int64x2_t __a)\n+{\n+  return (int64x1_t)__builtin_neon_vget_lowv2di (__a);\n+}\n+\n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vget_low_u64 (uint64x2_t __a)\n+{\n+  return (uint64x1_t)__builtin_neon_vget_lowv2di ((int64x2_t) __a);\n+}\n+\n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vcvt_s32_f32 (float32x2_t __a)\n {\n@@ -10386,12 +10386,6 @@ vand_s32 (int32x2_t __a, int32x2_t __b)\n   return (int32x2_t)__builtin_neon_vandv2si (__a, __b, 1);\n }\n \n-__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vand_s64 (int64x1_t __a, int64x1_t __b)\n-{\n-  return (int64x1_t)__builtin_neon_vanddi (__a, __b, 1);\n-}\n-\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vand_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n@@ -10410,6 +10404,12 @@ vand_u32 (uint32x2_t __a, uint32x2_t __b)\n   return (uint32x2_t)__builtin_neon_vandv2si ((int32x2_t) __a, (int32x2_t) __b, 0);\n }\n \n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vand_s64 (int64x1_t __a, int64x1_t __b)\n+{\n+  return (int64x1_t)__builtin_neon_vanddi (__a, __b, 1);\n+}\n+\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vand_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n@@ -10482,12 +10482,6 @@ vorr_s32 (int32x2_t __a, int32x2_t __b)\n   return (int32x2_t)__builtin_neon_vorrv2si (__a, __b, 1);\n }\n \n-__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vorr_s64 (int64x1_t __a, int64x1_t __b)\n-{\n-  return (int64x1_t)__builtin_neon_vorrdi (__a, __b, 1);\n-}\n-\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vorr_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n@@ -10506,6 +10500,12 @@ vorr_u32 (uint32x2_t __a, uint32x2_t __b)\n   return (uint32x2_t)__builtin_neon_vorrv2si ((int32x2_t) __a, (int32x2_t) __b, 0);\n }\n \n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vorr_s64 (int64x1_t __a, int64x1_t __b)\n+{\n+  return (int64x1_t)__builtin_neon_vorrdi (__a, __b, 1);\n+}\n+\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vorr_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n@@ -10578,12 +10578,6 @@ veor_s32 (int32x2_t __a, int32x2_t __b)\n   return (int32x2_t)__builtin_neon_veorv2si (__a, __b, 1);\n }\n \n-__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-veor_s64 (int64x1_t __a, int64x1_t __b)\n-{\n-  return (int64x1_t)__builtin_neon_veordi (__a, __b, 1);\n-}\n-\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n veor_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n@@ -10602,6 +10596,12 @@ veor_u32 (uint32x2_t __a, uint32x2_t __b)\n   return (uint32x2_t)__builtin_neon_veorv2si ((int32x2_t) __a, (int32x2_t) __b, 0);\n }\n \n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+veor_s64 (int64x1_t __a, int64x1_t __b)\n+{\n+  return (int64x1_t)__builtin_neon_veordi (__a, __b, 1);\n+}\n+\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n veor_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n@@ -10674,12 +10674,6 @@ vbic_s32 (int32x2_t __a, int32x2_t __b)\n   return (int32x2_t)__builtin_neon_vbicv2si (__a, __b, 1);\n }\n \n-__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vbic_s64 (int64x1_t __a, int64x1_t __b)\n-{\n-  return (int64x1_t)__builtin_neon_vbicdi (__a, __b, 1);\n-}\n-\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vbic_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n@@ -10698,6 +10692,12 @@ vbic_u32 (uint32x2_t __a, uint32x2_t __b)\n   return (uint32x2_t)__builtin_neon_vbicv2si ((int32x2_t) __a, (int32x2_t) __b, 0);\n }\n \n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vbic_s64 (int64x1_t __a, int64x1_t __b)\n+{\n+  return (int64x1_t)__builtin_neon_vbicdi (__a, __b, 1);\n+}\n+\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vbic_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n@@ -10770,12 +10770,6 @@ vorn_s32 (int32x2_t __a, int32x2_t __b)\n   return (int32x2_t)__builtin_neon_vornv2si (__a, __b, 1);\n }\n \n-__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vorn_s64 (int64x1_t __a, int64x1_t __b)\n-{\n-  return (int64x1_t)__builtin_neon_vorndi (__a, __b, 1);\n-}\n-\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vorn_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n@@ -10794,6 +10788,12 @@ vorn_u32 (uint32x2_t __a, uint32x2_t __b)\n   return (uint32x2_t)__builtin_neon_vornv2si ((int32x2_t) __a, (int32x2_t) __b, 0);\n }\n \n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vorn_s64 (int64x1_t __a, int64x1_t __b)\n+{\n+  return (int64x1_t)__builtin_neon_vorndi (__a, __b, 1);\n+}\n+\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vorn_u64 (uint64x1_t __a, uint64x1_t __b)\n {"}, {"sha": "1b25842748159a6e9505756903d7888a09fb19c2", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 66, "deletions": 43, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -31,20 +31,15 @@\n    (UNSPEC_VADDHN\t\t73)\n    (UNSPEC_VADDL\t\t74)\n    (UNSPEC_VADDW\t\t75)\n-   (UNSPEC_VAND\t\t\t76)\n-   (UNSPEC_VBIC\t\t\t77)\n    (UNSPEC_VBSL\t\t\t78)\n    (UNSPEC_VCAGE\t\t79)\n    (UNSPEC_VCAGT\t\t80)\n    (UNSPEC_VCEQ\t\t\t81)\n    (UNSPEC_VCGE\t\t\t82)\n    (UNSPEC_VCGT\t\t\t83)\n    (UNSPEC_VCLS\t\t\t84)\n-   (UNSPEC_VCLZ\t\t\t85)\n-   (UNSPEC_VCNT\t\t\t86)\n    (UNSPEC_VCVT\t\t\t88)\n    (UNSPEC_VCVT_N\t\t89)\n-   (UNSPEC_VEOR\t\t\t92)\n    (UNSPEC_VEXT\t\t\t93)\n    (UNSPEC_VHADD\t\t97)\n    (UNSPEC_VHSUB\t\t98)\n@@ -81,8 +76,6 @@\n    (UNSPEC_VMUL_LANE\t\t129)\n    (UNSPEC_VMULL_LANE\t\t130)\n    (UNSPEC_VMUL_N\t\t131)\n-   (UNSPEC_VORN\t\t\t133)\n-   (UNSPEC_VORR\t\t\t134)\n    (UNSPEC_VPADAL\t\t135)\n    (UNSPEC_VPADD\t\t136)\n    (UNSPEC_VPADDL\t\t137)\n@@ -940,21 +933,23 @@\n )\n \n (define_insn \"iordi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,w\")\n-\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"w,0\")\n-\t\t    (match_operand:DI 2 \"neon_logic_op2\" \"w,Dl\")]\n-                    UNSPEC_VORR))]\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,w,?&r,?&r\")\n+        (ior:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0,r\")\n+\t\t(match_operand:DI 2 \"neon_logic_op2\" \"w,Dl,r,r\")))]\n   \"TARGET_NEON\"\n {\n   switch (which_alternative)\n     {\n     case 0: return \"vorr\\t%P0, %P1, %P2\";\n     case 1: return neon_output_logic_immediate (\"vorr\", &operands[2],\n \t\t     DImode, 0, VALID_NEON_QREG_MODE (DImode));\n+    case 2: return \"#\";\n+    case 3: return \"#\";\n     default: gcc_unreachable ();\n     }\n }\n-  [(set_attr \"neon_type\" \"neon_int_1\")]\n+  [(set_attr \"neon_type\" \"neon_int_1,neon_int_1,*,*\")\n+   (set_attr \"length\" \"*,*,8,8\")]\n )\n \n ;; The concrete forms of the Neon immediate-logic instructions are vbic and\n@@ -980,21 +975,23 @@\n )\n \n (define_insn \"anddi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,w\")\n-\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"w,0\")\n-\t\t    (match_operand:DI 2 \"neon_inv_logic_op2\" \"w,DL\")]\n-                    UNSPEC_VAND))]\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,w,?&r,?&r\")\n+        (and:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0,r\")\n+\t\t(match_operand:DI 2 \"neon_inv_logic_op2\" \"w,DL,r,r\")))]\n   \"TARGET_NEON\"\n {\n   switch (which_alternative)\n     {\n     case 0: return \"vand\\t%P0, %P1, %P2\";\n     case 1: return neon_output_logic_immediate (\"vand\", &operands[2],\n     \t\t     DImode, 1, VALID_NEON_QREG_MODE (DImode));\n+    case 2: return \"#\";\n+    case 3: return \"#\";\n     default: gcc_unreachable ();\n     }\n }\n-  [(set_attr \"neon_type\" \"neon_int_1\")]\n+  [(set_attr \"neon_type\" \"neon_int_1,neon_int_1,*,*\")\n+   (set_attr \"length\" \"*,*,8,8\")]\n )\n \n (define_insn \"orn<mode>3_neon\"\n@@ -1007,13 +1004,16 @@\n )\n \n (define_insn \"orndi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"w\")\n-\t\t    (match_operand:DI 2 \"s_register_operand\" \"w\")]\n-                    UNSPEC_VORN))]\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?=&r,?&r\")\n+\t(ior:DI (match_operand:DI 1 \"s_register_operand\" \"w,r,0\")\n+\t         (not:DI (match_operand:DI 2 \"s_register_operand\" \"w,0,r\"))))]\n   \"TARGET_NEON\"\n-  \"vorn\\t%P0, %P1, %P2\"\n-  [(set_attr \"neon_type\" \"neon_int_1\")]\n+  \"@\n+   vorn\\t%P0, %P1, %P2\n+   #\n+   #\"\n+  [(set_attr \"neon_type\" \"neon_int_1,*,*\")\n+   (set_attr \"length\" \"*,8,8\")]\n )\n \n (define_insn \"bic<mode>3_neon\"\n@@ -1025,14 +1025,18 @@\n   [(set_attr \"neon_type\" \"neon_int_1\")]\n )\n \n+;; Compare to *anddi_notdi_di.\n (define_insn \"bicdi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"w\")\n-\t\t     (match_operand:DI 2 \"s_register_operand\" \"w\")]\n-                    UNSPEC_VBIC))]\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?=&r,?&r\")\n+        (and:DI (not:DI (match_operand:DI 2 \"s_register_operand\" \"w,r,0\"))\n+\t\t(match_operand:DI 1 \"s_register_operand\" \"w,0,r\")))]\n   \"TARGET_NEON\"\n-  \"vbic\\t%P0, %P1, %P2\"\n-  [(set_attr \"neon_type\" \"neon_int_1\")]\n+  \"@\n+   vbic\\t%P0, %P1, %P2\n+   #\n+   #\"\n+  [(set_attr \"neon_type\" \"neon_int_1,*,*\")\n+   (set_attr \"length\" \"*,8,8\")]\n )\n \n (define_insn \"xor<mode>3\"\n@@ -1045,13 +1049,16 @@\n )\n \n (define_insn \"xordi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"w\")\n-\t\t     (match_operand:DI 2 \"s_register_operand\" \"w\")]\n-                    UNSPEC_VEOR))]\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,?&r,?&r\")\n+        (xor:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,r\")\n+\t        (match_operand:DI 2 \"s_register_operand\" \"w,r,r\")))]\n   \"TARGET_NEON\"\n-  \"veor\\t%P0, %P1, %P2\"\n-  [(set_attr \"neon_type\" \"neon_int_1\")]\n+  \"@\n+   veor\\t%P0, %P1, %P2\n+   #\n+   #\"\n+  [(set_attr \"neon_type\" \"neon_int_1,*,*\")\n+   (set_attr \"length\" \"*,8,8\")]\n )\n \n (define_insn \"one_cmpl<mode>2\"\n@@ -2359,26 +2366,42 @@\n   [(set_attr \"neon_type\" \"neon_int_1\")]\n )\n \n-(define_insn \"neon_vclz<mode>\"\n+(define_insn \"clz<mode>2\"\n   [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w\")\n-\t(unspec:VDQIW [(match_operand:VDQIW 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-\t\t      UNSPEC_VCLZ))]\n+        (clz:VDQIW (match_operand:VDQIW 1 \"s_register_operand\" \"w\")))]\n   \"TARGET_NEON\"\n   \"vclz.<V_if_elem>\\t%<V_reg>0, %<V_reg>1\"\n   [(set_attr \"neon_type\" \"neon_int_1\")]\n )\n \n-(define_insn \"neon_vcnt<mode>\"\n+(define_expand \"neon_vclz<mode>\"\n+  [(match_operand:VDQIW 0 \"s_register_operand\" \"\")\n+   (match_operand:VDQIW 1 \"s_register_operand\" \"\")\n+   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  \"TARGET_NEON\"\n+{\n+  emit_insn (gen_clz<mode>2 (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"popcount<mode>2\"\n   [(set (match_operand:VE 0 \"s_register_operand\" \"=w\")\n-\t(unspec:VE [(match_operand:VE 1 \"s_register_operand\" \"w\")\n-                    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-                   UNSPEC_VCNT))]\n+        (popcount:VE (match_operand:VE 1 \"s_register_operand\" \"w\")))]\n   \"TARGET_NEON\"\n   \"vcnt.<V_sz_elem>\\t%<V_reg>0, %<V_reg>1\"\n   [(set_attr \"neon_type\" \"neon_int_1\")]\n )\n \n+(define_expand \"neon_vcnt<mode>\"\n+  [(match_operand:VE 0 \"s_register_operand\" \"=w\")\n+   (match_operand:VE 1 \"s_register_operand\" \"w\")\n+   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+  \"TARGET_NEON\"\n+{\n+  emit_insn (gen_popcount<mode>2 (operands[0], operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"neon_vrecpe<mode>\"\n   [(set (match_operand:V32 0 \"s_register_operand\" \"=w\")\n \t(unspec:V32 [(match_operand:V32 1 \"s_register_operand\" \"w\")"}, {"sha": "d282c83a39ae587db50c923b4a4d238e71244a49", "filename": "gcc/config/arm/neon.ml", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fconfig%2Farm%2Fneon.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fconfig%2Farm%2Fneon.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.ml?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -1619,23 +1619,28 @@ let ops =\n       store_3, [P16; F32; U16; U32; S16; S32];\n \n     (* Logical operations. And.  *)\n-    Vand, [], All (3, Dreg), \"vand\", notype_2, su_8_64;\n+    Vand, [], All (3, Dreg), \"vand\", notype_2, su_8_32;\n+    Vand, [No_op], All (3, Dreg), \"vand\", notype_2, [S64; U64];\n     Vand, [], All (3, Qreg), \"vandQ\", notype_2, su_8_64;\n \n     (* Or.  *)\n-    Vorr, [], All (3, Dreg), \"vorr\", notype_2, su_8_64;\n+    Vorr, [], All (3, Dreg), \"vorr\", notype_2, su_8_32;\n+    Vorr, [No_op], All (3, Dreg), \"vorr\", notype_2, [S64; U64];\n     Vorr, [], All (3, Qreg), \"vorrQ\", notype_2, su_8_64;\n \n     (* Eor.  *)\n-    Veor, [], All (3, Dreg), \"veor\", notype_2, su_8_64;\n+    Veor, [], All (3, Dreg), \"veor\", notype_2, su_8_32;\n+    Veor, [No_op], All (3, Dreg), \"veor\", notype_2, [S64; U64];\n     Veor, [], All (3, Qreg), \"veorQ\", notype_2, su_8_64;\n \n     (* Bic (And-not).  *)\n-    Vbic, [], All (3, Dreg), \"vbic\", notype_2, su_8_64;\n+    Vbic, [], All (3, Dreg), \"vbic\", notype_2, su_8_32;\n+    Vbic, [No_op], All (3, Dreg), \"vbic\", notype_2, [S64; U64];\n     Vbic, [], All (3, Qreg), \"vbicQ\", notype_2, su_8_64;\n \n     (* Or-not.  *)\n-    Vorn, [], All (3, Dreg), \"vorn\", notype_2, su_8_64;\n+    Vorn, [], All (3, Dreg), \"vorn\", notype_2, su_8_32;\n+    Vorn, [No_op], All (3, Dreg), \"vorn\", notype_2, [S64; U64];\n     Vorn, [], All (3, Qreg), \"vornQ\", notype_2, su_8_64;\n   ]\n "}, {"sha": "211ccd3f20fc2d9d0820cf6ec7130d13d6a660b4", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -506,13 +506,15 @@\n (define_predicate \"imm_for_neon_logic_operand\"\n   (match_code \"const_vector\")\n {\n-  return neon_immediate_valid_for_logic (op, mode, 0, NULL, NULL);\n+  return (TARGET_NEON\n+          && neon_immediate_valid_for_logic (op, mode, 0, NULL, NULL));\n })\n \n (define_predicate \"imm_for_neon_inv_logic_operand\"\n   (match_code \"const_vector\")\n {\n-  return neon_immediate_valid_for_logic (op, mode, 1, NULL, NULL);\n+  return (TARGET_NEON\n+          && neon_immediate_valid_for_logic (op, mode, 1, NULL, NULL));\n })\n \n (define_predicate \"neon_logic_op2\""}, {"sha": "d21fabde1303efc8461930c3e5e19680fb623fbb", "filename": "gcc/doc/arm-neon-intrinsics.texi", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Farm-neon-intrinsics.texi?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -9713,13 +9713,11 @@\n \n @itemize @bullet\n @item uint64x1_t vand_u64 (uint64x1_t, uint64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vand @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64x1_t vand_s64 (int64x1_t, int64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vand @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n@@ -9813,13 +9811,11 @@\n \n @itemize @bullet\n @item uint64x1_t vorr_u64 (uint64x1_t, uint64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vorr @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64x1_t vorr_s64 (int64x1_t, int64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vorr @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n@@ -9913,13 +9909,11 @@\n \n @itemize @bullet\n @item uint64x1_t veor_u64 (uint64x1_t, uint64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{veor @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64x1_t veor_s64 (int64x1_t, int64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{veor @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n@@ -10013,13 +10007,11 @@\n \n @itemize @bullet\n @item uint64x1_t vbic_u64 (uint64x1_t, uint64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vbic @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64x1_t vbic_s64 (int64x1_t, int64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vbic @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n@@ -10113,13 +10105,11 @@\n \n @itemize @bullet\n @item uint64x1_t vorn_u64 (uint64x1_t, uint64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vorn @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64x1_t vorn_s64 (int64x1_t, int64x1_t)\n-@*@emph{Form of expected instruction(s):} @code{vorn @var{d0}, @var{d0}, @var{d0}}\n @end itemize\n \n "}, {"sha": "7de49b019971a43ad9750f3621806b63fa7a5fb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -1,3 +1,26 @@\n+2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gcc.target/arm/neon-vands64.c: New.\n+\t* gcc.target/arm/neon-vandu64.c: New.\n+\t* gcc.target/arm/neon-vbics64.c: New.\n+\t* gcc.target/arm/neon-vbicu64.c: New.\n+\t* gcc.target/arm/neon-veors64.c: New.\n+\t* gcc.target/arm/neon-veoru64.c: New.\n+\t* gcc.target/arm/neon-vorns64.c: New.\n+\t* gcc.target/arm/neon-vornu64.c: New.\n+\t* gcc.target/arm/neon-vorrs64.c: New.\n+\t* gcc.target/arm/neon-vorru64.c: New.\n+\t* gcc.target/arm/neon/vands64.c: Regenerated.\n+\t* gcc.target/arm/neon/vandu64.c: Regenerated.\n+\t* gcc.target/arm/neon/vbics64.c: Regenerated.\n+\t* gcc.target/arm/neon/vbicu64.c: Regenerated.\n+\t* gcc.target/arm/neon/veors64.c: Regenerated.\n+\t* gcc.target/arm/neon/veoru64.c: Regenerated.\n+\t* gcc.target/arm/neon/vorns64.c: Regenerated.\n+\t* gcc.target/arm/neon/vornu64.c: Regenerated.\n+\t* gcc.target/arm/neon/vorrs64.c: Regenerated.\n+\t* gcc.target/arm/neon/vorru64.c: Regenerated.\n+\n 2010-07-02  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* gfortran.dg/runtime_warning_1.f90: Remove extra dg line."}, {"sha": "8b6975db6e040bb2b93c126e459f58143a94dc74", "filename": "gcc/testsuite/gcc.target/arm/neon-vands64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vands64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vands64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vands64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vand_s64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x1_t out_int64x1_t = 0;\n+  int64x1_t arg0_int64x1_t = (int64x1_t)0xdeadbeef00000000LL;\n+  int64x1_t arg1_int64x1_t = (int64x1_t)0xdead00000000beefLL;\n+\n+  out_int64x1_t = vand_s64 (arg0_int64x1_t, arg1_int64x1_t);\n+  if (out_int64x1_t != (int64x1_t)0xdead000000000000LL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "a8ec3a28b4db80c360edf5ac2a8676656b1ca781", "filename": "gcc/testsuite/gcc.target/arm/neon-vandu64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vandu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vandu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vandu64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vand_u64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x1_t out_uint64x1_t = 0;\n+  uint64x1_t arg0_uint64x1_t = (uint64x1_t)0xdeadbeef00000000LL;\n+  uint64x1_t arg1_uint64x1_t = (uint64x1_t)0xdead00000000beefLL;\n+\n+  out_uint64x1_t = vand_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n+  if (out_uint64x1_t != (uint64x1_t)0xdead000000000000LL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "ec3438baef816c00501e356a3ed73b24fba7a3c2", "filename": "gcc/testsuite/gcc.target/arm/neon-vbics64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vbics64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vbics64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vbics64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbic_s64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x1_t out_int64x1_t = 0;\n+  int64x1_t arg0_int64x1_t = (int64x1_t)0xdeadbeef00000000LL;\n+  int64x1_t arg1_int64x1_t = (int64x1_t)(~0xdead00000000beefLL);\n+\n+  out_int64x1_t = vbic_s64 (arg0_int64x1_t, arg1_int64x1_t);\n+  if (out_int64x1_t != (int64x1_t)0xdead000000000000LL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "a0c1b85b40543f598ffcd4192fb2fac0c908670e", "filename": "gcc/testsuite/gcc.target/arm/neon-vbicu64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vbicu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vbicu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vbicu64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbic_u64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x1_t out_uint64x1_t = 0;\n+  uint64x1_t arg0_uint64x1_t = (uint64x1_t)0xdeadbeef00000000LL;\n+  uint64x1_t arg1_uint64x1_t = (uint64x1_t)(~0xdead00000000beefLL);\n+\n+  out_uint64x1_t = vbic_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n+  if (out_uint64x1_t != (uint64x1_t)0xdead000000000000LL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "59d5baa3579477153382fc594382bd221b2d7a2f", "filename": "gcc/testsuite/gcc.target/arm/neon-veors64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-veors64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-veors64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-veors64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `veor_s64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x1_t out_int64x1_t = 0;\n+  int64x1_t arg0_int64x1_t = (int64x1_t)0xdeadbeef00000000LL;\n+  int64x1_t arg1_int64x1_t = (int64x1_t)0xdead00000000beefLL;\n+\n+  out_int64x1_t = veor_s64 (arg0_int64x1_t, arg1_int64x1_t);\n+  if (out_int64x1_t != (int64x1_t)0x0000beef0000beefLL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "b7ff77af0d5e77cfbfc8ba3195c6879e7b088b0d", "filename": "gcc/testsuite/gcc.target/arm/neon-veoru64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-veoru64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-veoru64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-veoru64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `veor_u64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x1_t out_uint64x1_t = 0;\n+  uint64x1_t arg0_uint64x1_t = (uint64x1_t)0xdeadbeef00000000LL;\n+  uint64x1_t arg1_uint64x1_t = (uint64x1_t)0xdead00000000beefLL;\n+\n+  out_uint64x1_t = veor_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n+  if (out_uint64x1_t != (uint64x1_t)0x0000beef0000beefLL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "364dbd1904cbe9febc86eb86335460dbb146e09d", "filename": "gcc/testsuite/gcc.target/arm/neon-vorns64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vorns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vorns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vorns64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vorn_s64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x1_t out_int64x1_t = 0;\n+  int64x1_t arg0_int64x1_t = (int64x1_t)0xdeadbeef00000000LL;\n+  int64x1_t arg1_int64x1_t = (int64x1_t)(~0xdead00000000beefLL);\n+\n+  out_int64x1_t = vorn_s64 (arg0_int64x1_t, arg1_int64x1_t);\n+  if (out_int64x1_t != (int64x1_t)0xdeadbeef0000beefLL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "b352868469f3bc7407f96ec9be0c04c03304596c", "filename": "gcc/testsuite/gcc.target/arm/neon-vornu64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vornu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vornu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vornu64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vorn_u64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x1_t out_uint64x1_t = 0;\n+  uint64x1_t arg0_uint64x1_t = (uint64x1_t)0xdeadbeef00000000LL;\n+  uint64x1_t arg1_uint64x1_t = (uint64x1_t)(~0xdead00000000beefLL);\n+\n+  out_uint64x1_t = vorn_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n+  if (out_uint64x1_t != (uint64x1_t)0xdeadbeef0000beefLL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "90ced9e9c86fe4a3cda7437de68a1430b0b10d71", "filename": "gcc/testsuite/gcc.target/arm/neon-vorrs64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vorrs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vorrs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vorrs64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vorr_s64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x1_t out_int64x1_t = 0;\n+  int64x1_t arg0_int64x1_t = (int64x1_t)0xdeadbeef00000000LL;\n+  int64x1_t arg1_int64x1_t = (int64x1_t)0xdead00000000beefLL;\n+\n+  out_int64x1_t = vorr_s64 (arg0_int64x1_t, arg1_int64x1_t);\n+  if (out_int64x1_t != (int64x1_t)0xdeadbeef0000beefLL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "5b44afb07abf30b22027bf08bf8c83e660422424", "filename": "gcc/testsuite/gcc.target/arm/neon-vorru64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vorru64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vorru64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vorru64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vorr_u64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x1_t out_uint64x1_t = 0;\n+  uint64x1_t arg0_uint64x1_t = (uint64x1_t)0xdeadbeef00000000LL;\n+  uint64x1_t arg1_uint64x1_t = (uint64x1_t)0xdead00000000beefLL;\n+\n+  out_uint64x1_t = vorr_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n+  if (out_uint64x1_t != (uint64x1_t)0xdeadbeef0000beefLL)\n+    abort();\n+  return 0;\n+}"}, {"sha": "13e18fb0cbf85907d0414ae10d9dc81c2afc2451", "filename": "gcc/testsuite/gcc.target/arm/neon/vands64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -17,5 +17,4 @@ void test_vands64 (void)\n   out_int64x1_t = vand_s64 (arg0_int64x1_t, arg1_int64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d9ddf847af30f3f64cbdedb6de70e4ff6a3825e4", "filename": "gcc/testsuite/gcc.target/arm/neon/vandu64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -17,5 +17,4 @@ void test_vandu64 (void)\n   out_uint64x1_t = vand_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "379db45f4db2c4acf19e4075c399537088d4af61", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -17,5 +17,4 @@ void test_vbics64 (void)\n   out_int64x1_t = vbic_s64 (arg0_int64x1_t, arg1_int64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c276d65ebe3c724ffff0234490bb1f2a106132f2", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -17,5 +17,4 @@ void test_vbicu64 (void)\n   out_uint64x1_t = vbic_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "2781be1b2cc5803573ce000865160e22eb946ab6", "filename": "gcc/testsuite/gcc.target/arm/neon/veors64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fveors64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fveors64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fveors64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -17,5 +17,4 @@ void test_veors64 (void)\n   out_int64x1_t = veor_s64 (arg0_int64x1_t, arg1_int64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"veor\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "19d081489ede9ec9bf300f5f6b11fb540070b872", "filename": "gcc/testsuite/gcc.target/arm/neon/veoru64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fveoru64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fveoru64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fveoru64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -17,5 +17,4 @@ void test_veoru64 (void)\n   out_uint64x1_t = veor_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"veor\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d7b8e60d208fb54db5aa595b7b1c3594436caa21", "filename": "gcc/testsuite/gcc.target/arm/neon/vorns64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorns64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -17,5 +17,4 @@ void test_vorns64 (void)\n   out_int64x1_t = vorn_s64 (arg0_int64x1_t, arg1_int64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vorn\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6fb3a9502a6d9f3eee8088bcf3ef485fca93493e", "filename": "gcc/testsuite/gcc.target/arm/neon/vornu64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvornu64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -17,5 +17,4 @@ void test_vornu64 (void)\n   out_uint64x1_t = vorn_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vorn\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a1c7e5ee2225f2379833db5857b3ffca4ce12ad7", "filename": "gcc/testsuite/gcc.target/arm/neon/vorrs64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorrs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorrs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorrs64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -17,5 +17,4 @@ void test_vorrs64 (void)\n   out_int64x1_t = vorr_s64 (arg0_int64x1_t, arg1_int64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vorr\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1991b02152f8229c45ecaab6c246b91b86e1ee4a", "filename": "gcc/testsuite/gcc.target/arm/neon/vorru64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorru64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b7bbce43e5189032c565391f2c5c98dedb3f27/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorru64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvorru64.c?ref=b3b7bbce43e5189032c565391f2c5c98dedb3f27", "patch": "@@ -17,5 +17,4 @@ void test_vorru64 (void)\n   out_uint64x1_t = vorr_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n }\n \n-/* { dg-final { scan-assembler \"vorr\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}]}