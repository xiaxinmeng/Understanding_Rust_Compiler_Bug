{"sha": "e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAzYTZmYjdiNjUxYmJmZGVlYmI3MWJlZGU2NTQ1ZTBjODVmYjJlOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-21T11:29:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-21T11:29:51Z"}, "message": "basic_string.h (_M_check): Change to return a checked __pos and take an additional const char* argument.\n\n2004-01-21  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (_M_check): Change to return\n\ta checked __pos and take an additional const char* argument.\n\t(_M_fold): Rename to _M_limit, change to return a size_type,\n\tcorresponding to the __off limited to the actual length.\n\t(insert(size_type, size_type, _CharT)): Update call, call\n\treplace.\n\t(insert(iterator, _CharT)): Call replace(iterator, iterator,\n\tsize_type, _CharT) instead.\n\t(erase(size_type, size_type)): Update calls.\n\t(replace(size_type, size_type, size_type, _CharT)): Ditto.\n\t(substr(size_type, size_type)): Use _M_check.\n\t* include/bits/basic_string.tcc (basic_string(const basic_string&,\n\tsize_type, size_type)): Update calls.\n\t(basic_string(const basic_string&, size_type, size_type,\n\tconst _Alloc&)): Ditto.\n\t(assign(const basic_string&, size_type, size_type)): Use the\n\tnew _M_check and _M_limit.\n\t(insert(size_type, const basic_string&, size_type, size_type):\n\tDitto.\n\t(insert(size_type, const _CharT*, size_type)): Ditto.\n\t(replace(size_type, size_type, const _CharT*, size_type): Ditto.\n\t(replace(size_type, size_type, const basic_string&,\n\tsize_type, size_type)): Ditto.\n\t(append(const basic_string&)): Ditto.\n\t(append(const basic_string&, size_type, size_type)): Ditto.\n\t(copy(_CharT*, size_type, size_type)): Ditto.\n\t(compare(size_type, size_type, const basic_string&)): Ditto.\n\t(compare(size_type, size_type, const basic_string&,size_type,\n\tsize_type)): Ditto.\n\t(compare(size_type, size_type, const _CharT*)): Ditto.\n\t(compare(size_type, size_type, const _CharT*, size_type)): Ditto.\n\nFrom-SVN: r76274", "tree": {"sha": "b0dccf231bf0f5eb3ad319788f4779c13a9e7dcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0dccf231bf0f5eb3ad319788f4779c13a9e7dcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8/comments", "author": null, "committer": null, "parents": [{"sha": "adc04486ee5d4b2f20dfdba93f8c4fd52e1ef9b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc04486ee5d4b2f20dfdba93f8c4fd52e1ef9b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adc04486ee5d4b2f20dfdba93f8c4fd52e1ef9b9"}], "stats": {"total": 221, "additions": 106, "deletions": 115}, "files": [{"sha": "3c078e98a5832a1f2ee2caa0e2e165600ffff28d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8", "patch": "@@ -1,3 +1,37 @@\n+2004-01-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h (_M_check): Change to return\n+\ta checked __pos and take an additional const char* argument.\n+\t(_M_fold): Rename to _M_limit, change to return a size_type,\n+\tcorresponding to the __off limited to the actual length.\n+\t(insert(size_type, size_type, _CharT)): Update call, call\n+\treplace.\n+\t(insert(iterator, _CharT)): Call replace(iterator, iterator,\n+\tsize_type, _CharT) instead.\n+\t(erase(size_type, size_type)): Update calls.\n+\t(replace(size_type, size_type, size_type, _CharT)): Ditto.\n+\t(substr(size_type, size_type)): Use _M_check.\n+\t* include/bits/basic_string.tcc (basic_string(const basic_string&,\n+\tsize_type, size_type)): Update calls.\n+\t(basic_string(const basic_string&, size_type, size_type,\n+\tconst _Alloc&)): Ditto.\n+\t(assign(const basic_string&, size_type, size_type)): Use the\n+\tnew _M_check and _M_limit.\n+\t(insert(size_type, const basic_string&, size_type, size_type):\n+\tDitto.\n+\t(insert(size_type, const _CharT*, size_type)): Ditto.\n+\t(replace(size_type, size_type, const _CharT*, size_type): Ditto.\n+\t(replace(size_type, size_type, const basic_string&,\n+\tsize_type, size_type)): Ditto.\n+\t(append(const basic_string&)): Ditto.\n+\t(append(const basic_string&, size_type, size_type)): Ditto.\n+\t(copy(_CharT*, size_type, size_type)): Ditto.\n+\t(compare(size_type, size_type, const basic_string&)): Ditto.\n+\t(compare(size_type, size_type, const basic_string&,size_type,\n+\tsize_type)): Ditto.\n+\t(compare(size_type, size_type, const _CharT*)): Ditto.\n+\t(compare(size_type, size_type, const _CharT*, size_type)): Ditto.\n+\n 2004-01-19  Stefan Olsson  <stefan@snon.net>\n \n \t* include/ext/mt_allocator.h: If a thread, when it dies, still has"}, {"sha": "216c935670a95218e9651938d64ea11c3060c96d", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8", "patch": "@@ -283,21 +283,20 @@ namespace std\n \t  _M_leak_hard();\n       }\n \n-      iterator\n-      _M_check(size_type __pos) const\n+      size_type\n+      _M_check(size_type __pos, const char* __s) const\n       {\n \tif (__pos > this->size())\n-\t  __throw_out_of_range(__N(\"basic_string::_M_check\"));\n-\treturn _M_ibegin() + __pos;\n+\t  __throw_out_of_range(__N(__s));\n+\treturn __pos;\n       }\n \n-      // NB: _M_fold doesn't check for a bad __pos1 value.\n-      iterator\n-      _M_fold(size_type __pos, size_type __off) const\n+      // NB: _M_limit doesn't check for a bad __pos value.\n+      size_type\n+      _M_limit(size_type __pos, size_type __off) const\n       {\n \tconst bool __testoff =  __off < this->size() - __pos;\n-\tconst size_type __newoff = __testoff ? __off : this->size() - __pos;\n-\treturn (_M_ibegin() + __pos + __newoff);\n+\treturn __testoff ? __off : this->size() - __pos;\n       }\n \n       // _S_copy_chars is a separate template to permit specialization\n@@ -979,9 +978,10 @@ namespace std\n       */\n       basic_string&\n       insert(size_type __pos, size_type __n, _CharT __c)\n-      {\n-\tthis->insert(_M_check(__pos), __n, __c);\n-\treturn *this;\n+      { \n+\tconst iterator __iterator = this->_M_ibegin()\n+\t                            + _M_check(__pos, \"basic_string::insert\");\n+\treturn this->replace(__iterator, __iterator, __n, __c);\n       }\n \n       /**\n@@ -1002,7 +1002,7 @@ namespace std\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());\n \tconst size_type __pos = __p - _M_ibegin();\n-\tthis->insert(_M_check(__pos), size_type(1), __c);\n+\tthis->replace(__p, __p, size_type(1), __c);\n \t_M_rep()->_M_set_leaked();\n  \treturn this->_M_ibegin() + __pos;\n       }\n@@ -1043,7 +1043,8 @@ namespace std\n       basic_string&\n       erase(size_type __pos = 0, size_type __n = npos)\n       {\n-\treturn this->replace(_M_check(__pos), _M_fold(__pos, __n),\n+\treturn this->replace(_M_ibegin() + _M_check(__pos, \"basic_string::erase\"),\n+\t\t\t     _M_ibegin() + __pos + _M_limit(__pos, __n),\n \t\t\t     _M_data(), _M_data());\n       }\n \n@@ -1195,7 +1196,9 @@ namespace std\n       */\n       basic_string&\n       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)\n-      { return this->replace(_M_check(__pos), _M_fold(__pos, __n1), __n2, __c); }\n+      { return this->replace(_M_ibegin() + _M_check(__pos, \"basic_string::replace\"),\n+\t\t\t     _M_ibegin() + __pos + _M_limit(__pos, __n1),\n+\t\t\t     __n2, __c); }\n \n       /**\n        *  @brief  Replace range of characters with string.\n@@ -1843,11 +1846,7 @@ namespace std\n       */\n       basic_string\n       substr(size_type __pos = 0, size_type __n = npos) const\n-      {\n-\tif (__pos > this->size())\n-\t  __throw_out_of_range(__N(\"basic_string::substr\"));\n-\treturn basic_string(*this, __pos, __n);\n-      }\n+      { return basic_string(*this, _M_check(__pos, \"basic_string::substr\"), __n); }\n \n       /**\n        *  @brief  Compare to a string."}, {"sha": "070cd12235c79b2b8913cbc2ebb629e4d09e208c", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 53, "deletions": 95, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=e03a6fb7b651bbfdeebb71bede6545e0c85fb2e8", "patch": "@@ -206,16 +206,20 @@ namespace std\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const basic_string& __str, size_type __pos, size_type __n)\n-    : _M_dataplus(_S_construct(__str._M_check(__pos), \n-\t\t\t       __str._M_fold(__pos, __n), _Alloc()), _Alloc())\n+    : _M_dataplus(_S_construct(__str._M_ibegin()\n+\t\t\t       + __str._M_check(__pos, \"basic_string::basic_string\"), \n+\t\t\t       __str._M_ibegin() + __pos + __str._M_limit(__pos, __n),\n+\t\t\t       _Alloc()), _Alloc())\n     { }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const basic_string& __str, size_type __pos,\n \t\t size_type __n, const _Alloc& __a)\n-    : _M_dataplus(_S_construct(__str._M_check(__pos), \n-\t\t\t       __str._M_fold(__pos, __n), __a), __a)\n+    : _M_dataplus(_S_construct(__str._M_ibegin()\n+\t\t\t       + __str._M_check(__pos, \"basic_string::basic_string\"), \n+\t\t\t       __str._M_ibegin() + __pos + __str._M_limit(__pos, __n),\n+\t\t\t       __a), __a)\n     { }\n \n   // TBD: DPG annotate\n@@ -268,12 +272,9 @@ namespace std\n      basic_string<_CharT, _Traits, _Alloc>::\n      assign(const basic_string& __str, size_type __pos, size_type __n)\n      {\n-       const size_type __strsize = __str.size();\n-       if (__pos > __strsize)\n-\t __throw_out_of_range(\"basic_string::assign\");\n-       const bool __testn = __n < __strsize - __pos;\n-       const size_type __newsize = __testn ? __n : __strsize - __pos;\n-       return this->assign(__str._M_data() + __pos, __newsize);\n+       return this->assign(__str._M_data()\n+\t\t\t   + __str._M_check(__pos, \"basic_string::assign\"),\n+\t\t\t   __str._M_limit(__pos, __n));\n      }\n \n    template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -307,12 +308,9 @@ namespace std\n      insert(size_type __pos1, const basic_string& __str,\n             size_type __pos2, size_type __n)\n      {\n-       const size_type __strsize = __str.size();\n-       if (__pos2 > __strsize)\n-\t __throw_out_of_range(\"basic_string::insert\");\n-       const bool __testn = __n < __strsize - __pos2;\n-       const size_type __newsize = __testn ? __n : __strsize - __pos2;\n-       return this->insert(__pos1, __str._M_data() + __pos2, __newsize);\n+       return this->insert(__pos1, __str._M_data()\n+\t\t\t   + __str._M_check(__pos2, \"basic_string::insert\"),\n+\t\t\t   __str._M_limit(__pos2, __n));\n      }\n \n    template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -321,13 +319,11 @@ namespace std\n      insert(size_type __pos, const _CharT* __s, size_type __n)\n      {\n        __glibcxx_requires_string_len(__s, __n);\n-       const size_type __size = this->size();\n-       if (__pos > __size)\n-         __throw_out_of_range(\"basic_string::insert\");\n-       if (__size > this->max_size() - __n)\n+       __pos = _M_check(__pos, \"basic_string::insert\");\n+       if (this->size() > this->max_size() - __n)\n          __throw_length_error(\"basic_string::insert\");\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n-           || less<const _CharT*>()(_M_data() + __size, __s))\n+           || less<const _CharT*>()(_M_data() + this->size(), __s))\n          return _M_replace_safe(_M_ibegin() + __pos, _M_ibegin() + __pos,\n                                 __s, __s + __n);\n        else\n@@ -359,20 +355,17 @@ namespace std\n \t     size_type __n2)\n      {\n        __glibcxx_requires_string_len(__s, __n2);\n-       const size_type __size = this->size();\n-       if (__pos > __size)\n-         __throw_out_of_range(\"basic_string::replace\");\n-       const bool __testn1 = __n1 < __size - __pos;\n-       const size_type __foldn1 = __testn1 ? __n1 : __size - __pos;\n-       if (__size - __foldn1 > this->max_size() - __n2)\n+       __pos = _M_check(__pos, \"basic_string::replace\");\n+       __n1 = _M_limit(__pos, __n1);\n+       if (this->size() - __n1 > this->max_size() - __n2)\n          __throw_length_error(\"basic_string::replace\");\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n-           || less<const _CharT*>()(_M_data() + __size, __s))\n+           || less<const _CharT*>()(_M_data() + this->size(), __s))\n          return _M_replace_safe(_M_ibegin() + __pos,\n-\t\t\t\t_M_ibegin() + __pos + __foldn1, __s, __s + __n2);\n+\t\t\t\t_M_ibegin() + __pos + __n1, __s, __s + __n2);\n        // Todo: optimized in-place replace.\n        else\n-\t return _M_replace(_M_ibegin() + __pos, _M_ibegin() + __pos + __foldn1,\n+\t return _M_replace(_M_ibegin() + __pos, _M_ibegin() + __pos + __n1,\n \t\t\t   __s, __s + __n2);\n      }\n   \n@@ -674,52 +667,35 @@ namespace std\n     replace(size_type __pos1, size_type __n1, const basic_string& __str,\n \t    size_type __pos2, size_type __n2)\n     {\n-      const size_type __strsize = __str.size();\n-      if (__pos2 > __strsize)\n-\t__throw_out_of_range(\"basic_string::replace\");\n-      const bool __testn2 = __n2 < __strsize - __pos2;\n-      const size_type __foldn2 = __testn2 ? __n2 : __strsize - __pos2;\n-      return this->replace(__pos1, __n1,\n-\t\t\t   __str._M_data() + __pos2, __foldn2);      \n+      return this->replace(__pos1, __n1, __str._M_data()\n+\t\t\t   + __str._M_check(__pos2, \"basic_string::replace\"),\n+\t\t\t   __str._M_limit(__pos2, __n2));\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n     append(const basic_string& __str)\n-    {\n-      // Iff appending itself, string needs to pre-reserve the\n-      // correct size so that _M_mutate does not clobber the\n-      // iterators formed here.\n-      const size_type __size = __str.size();\n-      const size_type __len = __size + this->size();\n-      if (__len > this->capacity())\n-\tthis->reserve(__len);\n-      return _M_replace_safe(_M_iend(), _M_iend(), __str._M_ibegin(),\n-\t\t\t     __str._M_iend());\n-    }\n+    { return this->append(__str._M_data(), __str.size()); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n     append(const basic_string& __str, size_type __pos, size_type __n)\n     {\n-      // Iff appending itself, string needs to pre-reserve the\n-      // correct size so that _M_mutate does not clobber the\n-      // iterators formed here.\n-      const size_type __len = std::min(size_type(__str.size() - __pos),\n-\t\t\t\t       __n) + this->size();\n-      if (__len > this->capacity())\n-\tthis->reserve(__len);\n-      return _M_replace_safe(_M_iend(), _M_iend(), __str._M_check(__pos),\n-\t\t\t     __str._M_fold(__pos, __n));\n+      return this->append(__str._M_data()\n+\t\t\t  + __str._M_check(__pos, \"basic_string::append\"),\n+\t\t\t  __str._M_limit(__pos, __n));\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n     append(const _CharT* __s, size_type __n)\n     {\n+      // Iff appending itself, string needs to pre-reserve the\n+      // correct size so that _M_mutate does not clobber the\n+      // iterators formed here.\n       __glibcxx_requires_string_len(__s, __n);\n       const size_type __len = __n + this->size();\n       if (__len > this->capacity())\n@@ -762,11 +738,8 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     copy(_CharT* __s, size_type __n, size_type __pos) const\n     {\n-      if (__pos > this->size())\n-\t__throw_out_of_range(\"basic_string::copy\");\n-      \n-      if (__n > this->size() - __pos)\n-\t__n = this->size() - __pos;\n+      __pos = _M_check(__pos, \"basic_string::copy\");\n+      __n = _M_limit(__pos, __n);\n \n       __glibcxx_requires_string_len(__s, __n);\n       \n@@ -962,16 +935,13 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     compare(size_type __pos, size_type __n, const basic_string& __str) const\n     {\n-      const size_type __size = this->size();\n+      __pos = _M_check(__pos, \"basic_string::compare\");\n+      __n = _M_limit(__pos, __n);\n       const size_type __osize = __str.size();\n-      if (__pos > __size)\n-\t__throw_out_of_range(\"basic_string::compare\");\n-      \n-      const size_type __rsize= std::min(size_type(__size - __pos), __n);\n-      const size_type __len = std::min(__rsize, __osize);\n+      const size_type __len = std::min(__n, __osize);\n       int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);\n       if (!__r)\n-\t__r = __rsize - __osize;\n+\t__r = __n - __osize;\n       return __r;\n     }\n \n@@ -981,18 +951,15 @@ namespace std\n     compare(size_type __pos1, size_type __n1, const basic_string& __str,\n \t    size_type __pos2, size_type __n2) const\n     {\n-      const size_type __size = this->size();\n-      const size_type __osize = __str.size();\n-      if (__pos1 > __size || __pos2 > __osize)\n-\t__throw_out_of_range(\"basic_string::compare\");\n-      \n-      const size_type __rsize = std::min(size_type(__size - __pos1), __n1);\n-      const size_type __rosize = std::min(size_type(__osize - __pos2), __n2);\n-      const size_type __len = std::min(__rsize, __rosize);\n+      __pos1 = _M_check(__pos1, \"basic_string::compare\");\n+      __pos2 = __str._M_check(__pos2, \"basic_string::compare\");\n+      __n1 = _M_limit(__pos1, __n1);\n+      __n2 = __str._M_limit(__pos2, __n2);\n+      const size_type __len = std::min(__n1, __n2);\n       int __r = traits_type::compare(_M_data() + __pos1, \n \t\t\t\t     __str.data() + __pos2, __len);\n       if (!__r)\n-\t__r = __rsize - __rosize;\n+\t__r = __n1 - __n2;\n       return __r;\n     }\n \n@@ -1003,7 +970,6 @@ namespace std\n     compare(const _CharT* __s) const\n     {\n       __glibcxx_requires_string(__s);\n-\n       const size_type __size = this->size();\n       const size_type __osize = traits_type::length(__s);\n       const size_type __len = std::min(__size, __osize);\n@@ -1020,17 +986,13 @@ namespace std\n     compare(size_type __pos, size_type __n1, const _CharT* __s) const\n     {\n       __glibcxx_requires_string(__s);\n-\n-      const size_type __size = this->size();\n-      if (__pos > __size)\n-\t__throw_out_of_range(\"basic_string::compare\");\n-      \n+      __pos = _M_check(__pos, \"basic_string::compare\");\n+      __n1 = _M_limit(__pos, __n1);\n       const size_type __osize = traits_type::length(__s);\n-      const size_type __rsize = std::min(size_type(__size - __pos), __n1);\n-      const size_type __len = std::min(__rsize, __osize);\n+      const size_type __len = std::min(__n1, __osize);\n       int __r = traits_type::compare(_M_data() + __pos, __s, __len);\n       if (!__r)\n-\t__r = __rsize - __osize;\n+\t__r = __n1 - __osize;\n       return __r;\n     }\n \n@@ -1041,16 +1003,12 @@ namespace std\n \t    size_type __n2) const\n     {\n       __glibcxx_requires_string_len(__s, __n2);\n-\n-      const size_type __size = this->size();\n-      if (__pos > __size)\n-\t__throw_out_of_range(\"basic_string::compare\");\n-      \n-      const size_type __rsize = std::min(size_type(__size - __pos), __n1);\n-      const size_type __len = std::min(__rsize, __n2);\n+      __pos = _M_check(__pos, \"basic_string::compare\");\n+      __n1 = _M_limit(__pos, __n1);\n+      const size_type __len = std::min(__n1, __n2);\n       int __r = traits_type::compare(_M_data() + __pos, __s, __len);\n       if (!__r)\n-\t__r = __rsize - __n2;\n+\t__r = __n1 - __n2;\n       return __r;\n     }\n "}]}