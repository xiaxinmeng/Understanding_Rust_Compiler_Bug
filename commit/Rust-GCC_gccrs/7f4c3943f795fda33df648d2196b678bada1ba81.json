{"sha": "7f4c3943f795fda33df648d2196b678bada1ba81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y0YzM5NDNmNzk1ZmRhMzNkZjY0OGQyMTk2YjY3OGJhZGExYmE4MQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-08-02T17:01:46Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-08-02T17:38:18Z"}, "message": "x86: Avoid stack realignment when copying data\n\nTo avoid stack realignment, use SCRATCH_SSE_REG to copy data from one\nmemory location to another.\n\ngcc/\n\n\t* config/i386/i386-expand.c (ix86_expand_vector_move): Call\n\tix86_gen_scratch_sse_rtx to get a scratch SSE register to copy\n\tdata from one memory location to another.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/eh_return-1.c: New test.", "tree": {"sha": "0ef563ff75d073560f77fac7a91f5ed094db3479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ef563ff75d073560f77fac7a91f5ed094db3479"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f4c3943f795fda33df648d2196b678bada1ba81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4c3943f795fda33df648d2196b678bada1ba81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f4c3943f795fda33df648d2196b678bada1ba81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f4c3943f795fda33df648d2196b678bada1ba81/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bee034e012d1146d34b0d767fe28a485c210e4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bee034e012d1146d34b0d767fe28a485c210e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bee034e012d1146d34b0d767fe28a485c210e4b"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "1d469bf7221234b5b8467145b2d7750b4d19e50e", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4c3943f795fda33df648d2196b678bada1ba81/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4c3943f795fda33df648d2196b678bada1ba81/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=7f4c3943f795fda33df648d2196b678bada1ba81", "patch": "@@ -625,7 +625,9 @@ ix86_expand_vector_move (machine_mode mode, rtx operands[])\n       && !register_operand (op0, mode)\n       && !register_operand (op1, mode))\n     {\n-      emit_move_insn (op0, force_reg (GET_MODE (op0), op1));\n+      rtx tmp = ix86_gen_scratch_sse_rtx (GET_MODE (op0));\n+      emit_move_insn (tmp, op1);\n+      emit_move_insn (op0, tmp);\n       return;\n     }\n "}, {"sha": "671ba635e88ca4c4b418e8c828077d144e22f8c0", "filename": "gcc/testsuite/gcc.target/i386/eh_return-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f4c3943f795fda33df648d2196b678bada1ba81/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Feh_return-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f4c3943f795fda33df648d2196b678bada1ba81/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Feh_return-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Feh_return-1.c?ref=7f4c3943f795fda33df648d2196b678bada1ba81", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=haswell -mno-avx512f\" } */\n+\n+struct _Unwind_Context\n+{\n+  void *ra;\n+  char array[48];\n+};\n+\n+extern long uw_install_context_1 (struct _Unwind_Context *);\n+\n+void\n+_Unwind_RaiseException (void)\n+{\n+  struct _Unwind_Context this_context, cur_context;\n+  long offset = uw_install_context_1 (&this_context);\n+  __builtin_memcpy (&this_context, &cur_context,\n+\t\t    sizeof (struct _Unwind_Context));\n+  void *handler = __builtin_frob_return_addr ((&cur_context)->ra);\n+  uw_install_context_1 (&cur_context);\n+  __builtin_eh_return (offset, handler);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%ymm\" 4 } } */\n+/* No need to dynamically realign the stack here.  */\n+/* { dg-final { scan-assembler-not \"and\\[^\\n\\r]*%\\[re\\]sp\" } } */"}]}