{"sha": "6ad386b725dfac340e0d337d4c20e603929c7f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFkMzg2YjcyNWRmYWMzNDBlMGQzMzdkNGMyMGU2MDM5MjljN2Y5YQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-06-12T22:16:25Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-06-12T22:16:25Z"}, "message": "tree-vect-data-refs.c (vect_can_force_dr_alignment_p): Reorg to use symtab and decl_binds_to_current_def_p\n\n\t* tree-vect-data-refs.c (vect_can_force_dr_alignment_p): Reorg\n\tto use symtab and decl_binds_to_current_def_p\n\t* tree-vectorizer.c (increase_alignment): Increase alignment\n\tof alias target, too.\n\nFrom-SVN: r211599", "tree": {"sha": "6dbb35f6f6e7f5434f361ca39916bbb65bf16611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dbb35f6f6e7f5434f361ca39916bbb65bf16611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ad386b725dfac340e0d337d4c20e603929c7f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad386b725dfac340e0d337d4c20e603929c7f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad386b725dfac340e0d337d4c20e603929c7f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad386b725dfac340e0d337d4c20e603929c7f9a/comments", "author": null, "committer": null, "parents": [{"sha": "9cf32741aabefe8fa90bad887b694dbf7ad29726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf32741aabefe8fa90bad887b694dbf7ad29726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cf32741aabefe8fa90bad887b694dbf7ad29726"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "a8dcd62fd3da9e28626c4e12d9dd7ab4866e8fb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad386b725dfac340e0d337d4c20e603929c7f9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad386b725dfac340e0d337d4c20e603929c7f9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ad386b725dfac340e0d337d4c20e603929c7f9a", "patch": "@@ -1,3 +1,10 @@\n+2014-06-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-vect-data-refs.c (vect_can_force_dr_alignment_p): Reorg\n+\tto use symtab and decl_binds_to_current_def_p\n+\t* tree-vectorizer.c (increase_alignment): Increase alignment\n+\tof alias target, too.\n+\n 2014-06-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/61486"}, {"sha": "ff02ff3c457cd79e438c1994fa72ad4354f2512b", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad386b725dfac340e0d337d4c20e603929c7f9a/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad386b725dfac340e0d337d4c20e603929c7f9a/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=6ad386b725dfac340e0d337d4c20e603929c7f9a", "patch": "@@ -58,6 +58,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"optabs.h\"\n #include \"builtins.h\"\n+#include \"varasm.h\"\n \n /* Return true if load- or store-lanes optab OPTAB is implemented for\n    COUNT vectors of type VECTYPE.  NAME is the name of OPTAB.  */\n@@ -5316,19 +5317,26 @@ vect_can_force_dr_alignment_p (const_tree decl, unsigned int alignment)\n   if (TREE_CODE (decl) != VAR_DECL)\n     return false;\n \n-  /* We cannot change alignment of common or external symbols as another\n-     translation unit may contain a definition with lower alignment.  \n-     The rules of common symbol linking mean that the definition\n-     will override the common symbol.  The same is true for constant\n-     pool entries which may be shared and are not properly merged\n-     by LTO.  */\n-  if (DECL_EXTERNAL (decl)\n-      || DECL_COMMON (decl)\n-      || DECL_IN_CONSTANT_POOL (decl))\n-    return false;\n+  gcc_assert (!TREE_ASM_WRITTEN (decl));\n \n-  if (TREE_ASM_WRITTEN (decl))\n-    return false;\n+  if (TREE_PUBLIC (decl) || DECL_EXTERNAL (decl))\n+    {\n+      symtab_node *snode;\n+\n+      /* We cannot change alignment of symbols that may bind to symbols\n+\t in other translation unit that may contain a definition with lower\n+\t alignment.  */\n+      if (!decl_binds_to_current_def_p (decl))\n+\treturn false;\n+\n+      /* When compiling partition, be sure the symbol is not output by other\n+\t partition.  */\n+      snode = symtab_get_node (decl);\n+      if (flag_ltrans\n+\t  && (snode->in_other_partition\n+\t      || symtab_get_symbol_partitioning_class (snode) == SYMBOL_DUPLICATE))\n+\treturn false;\n+    }\n \n   /* Do not override the alignment as specified by the ABI when the used\n      attribute is set.  */\n@@ -5343,6 +5351,18 @@ vect_can_force_dr_alignment_p (const_tree decl, unsigned int alignment)\n       && !symtab_get_node (decl)->implicit_section)\n     return false;\n \n+  /* If symbol is an alias, we need to check that target is OK.  */\n+  if (TREE_STATIC (decl))\n+    {\n+      tree target = symtab_alias_ultimate_target (symtab_get_node (decl))->decl;\n+      if (target != decl)\n+\t{\n+\t  if (DECL_PRESERVE_P (target))\n+\t    return false;\n+\t  decl = target;\n+\t}\n+    }\n+\n   if (TREE_STATIC (decl))\n     return (alignment <= MAX_OFILE_ALIGNMENT);\n   else"}, {"sha": "e2939b18ffce5ee40bf8e10ec966ebf0f025e8a2", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad386b725dfac340e0d337d4c20e603929c7f9a/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad386b725dfac340e0d337d4c20e603929c7f9a/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=6ad386b725dfac340e0d337d4c20e603929c7f9a", "patch": "@@ -686,6 +686,12 @@ increase_alignment (void)\n         {\n           DECL_ALIGN (decl) = TYPE_ALIGN (vectype);\n           DECL_USER_ALIGN (decl) = 1;\n+\t  if (TREE_STATIC (decl))\n+\t    {\n+\t      tree target = symtab_alias_ultimate_target (symtab_get_node (decl))->decl;\n+              DECL_ALIGN (target) = TYPE_ALIGN (vectype);\n+              DECL_USER_ALIGN (target) = 1;\n+\t    }\n           dump_printf (MSG_NOTE, \"Increasing alignment of decl: \");\n           dump_generic_expr (MSG_NOTE, TDF_SLIM, decl);\n           dump_printf (MSG_NOTE, \"\\n\");"}]}