{"sha": "0cbf438b115b95453a1b0414c6cf628bf1ad1ead", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNiZjQzOGIxMTViOTU0NTNhMWIwNDE0YzZjZjYyOGJmMWFkMWVhZA==", "commit": {"author": {"name": "Yury Gribov", "email": "y.gribov@samsung.com", "date": "2014-06-20T13:33:28Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2014-06-20T13:33:28Z"}, "message": "asan.c (instrument_strlen_call): Fixed instrumentation of trailing byte.\n\n2014-06-18  Yury Gribov  <y.gribov@samsung.com>\n\ngcc/\n\t* asan.c (instrument_strlen_call): Fixed instrumentation of\n\ttrailing byte.\n\ngcc/testsuite/\n\t* c-c++-common/asan/strlen-overflow-1.c: New test.\n\nCo-Authored-By: Max Ostapenko <m.ostapenko@partner.samsung.com>\n\nFrom-SVN: r211849", "tree": {"sha": "fd8dcedd9f898e8f346830bcc90cd385e5f4cca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd8dcedd9f898e8f346830bcc90cd385e5f4cca4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cbf438b115b95453a1b0414c6cf628bf1ad1ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cbf438b115b95453a1b0414c6cf628bf1ad1ead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cbf438b115b95453a1b0414c6cf628bf1ad1ead", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cbf438b115b95453a1b0414c6cf628bf1ad1ead/comments", "author": null, "committer": null, "parents": [{"sha": "bec81025ed968d6ba52308b2a9824bd689628a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec81025ed968d6ba52308b2a9824bd689628a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bec81025ed968d6ba52308b2a9824bd689628a5f"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "9aaab6e3f6b0afbbf197d34a7fbd8cbce700d1b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cbf438b115b95453a1b0414c6cf628bf1ad1ead/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cbf438b115b95453a1b0414c6cf628bf1ad1ead/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cbf438b115b95453a1b0414c6cf628bf1ad1ead", "patch": "@@ -1,3 +1,10 @@\n+2014-06-20  Yury Gribov  <y.gribov@samsung.com>\n+\t    Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\tPR sanitizer/61547\n+\t* asan.c (instrument_strlen_call): Fixed instrumentation of\n+\ttrailing byte.\n+\n 2014-06-20  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/61540"}, {"sha": "9e696a4c0840c0b54d51fdc2be3544d149a1068f", "filename": "gcc/asan.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cbf438b115b95453a1b0414c6cf628bf1ad1ead/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cbf438b115b95453a1b0414c6cf628bf1ad1ead/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=0cbf438b115b95453a1b0414c6cf628bf1ad1ead", "patch": "@@ -2037,19 +2037,19 @@ instrument_strlen_call (gimple_stmt_iterator *iter)\n \n   build_check_stmt (loc, gimple_assign_lhs (str_arg_ssa), NULL_TREE, 1, iter,\n \t\t    /*non_zero_len_p*/true, /*before_p=*/true,\n-\t\t    /*is_store=*/false, /*is_scalar_access*/false, /*align*/0);\n+\t\t    /*is_store=*/false, /*is_scalar_access*/true, /*align*/0);\n \n-  gimple stmt =\n-    gimple_build_assign_with_ops (PLUS_EXPR,\n-\t\t\t\t  make_ssa_name (TREE_TYPE (len), NULL),\n-\t\t\t\t  len,\n-\t\t\t\t  build_int_cst (TREE_TYPE (len), 1));\n-  gimple_set_location (stmt, loc);\n-  gsi_insert_after (iter, stmt, GSI_NEW_STMT);\n+  gimple g =\n+    gimple_build_assign_with_ops (POINTER_PLUS_EXPR,\n+\t\t\t\t  make_ssa_name (cptr_type, NULL),\n+\t\t\t\t  gimple_assign_lhs (str_arg_ssa),\n+\t\t\t\t  len);\n+  gimple_set_location (g, loc);\n+  gsi_insert_after (iter, g, GSI_NEW_STMT);\n \n-  build_check_stmt (loc, gimple_assign_lhs (stmt), len, 1, iter,\n+  build_check_stmt (loc, gimple_assign_lhs (g), NULL_TREE, 1, iter,\n \t\t    /*non_zero_len_p*/true, /*before_p=*/false,\n-\t\t    /*is_store=*/false, /*is_scalar_access*/false, /*align*/0);\n+\t\t    /*is_store=*/false, /*is_scalar_access*/true, /*align*/0);\n \n   return true;\n }"}, {"sha": "79bbeb4247f0ba0281b83e2379195ba6bafa3f6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cbf438b115b95453a1b0414c6cf628bf1ad1ead/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cbf438b115b95453a1b0414c6cf628bf1ad1ead/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0cbf438b115b95453a1b0414c6cf628bf1ad1ead", "patch": "@@ -1,3 +1,9 @@\n+2014-06-20  Yury Gribov  <y.gribov@samsung.com>\n+\t    Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\tPR sanitizer/61547\n+\t* c-c++-common/asan/strlen-overflow-1.c: New test.\n+\n 2014-06-20  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/61540"}, {"sha": "bf6bf668fa081277119d8a00fc7c6b6f8332a6dc", "filename": "gcc/testsuite/c-c++-common/asan/strlen-overflow-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cbf438b115b95453a1b0414c6cf628bf1ad1ead/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrlen-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cbf438b115b95453a1b0414c6cf628bf1ad1ead/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrlen-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fstrlen-overflow-1.c?ref=0cbf438b115b95453a1b0414c6cf628bf1ad1ead", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+#include <sanitizer/asan_interface.h>\n+\n+char a[2] = \"0\";\n+\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+\n+__attribute__((no_sanitize_address, noinline)) __SIZE_TYPE__\n+strlen (const char *p) {\n+\n+  __SIZE_TYPE__ n = 0;\n+  for (; *p; ++n, ++p);\n+  return n;\n+}\n+\n+int main () {\n+  char *p = &a[0];\n+  asm (\"\" : \"+r\"(p));\n+  __asan_poison_memory_region ((char *)&a[1], 1);\n+  return __builtin_strlen (a);\n+}\n+\n+/* { dg-output \"READ of size 1 at 0x\\[0-9a-f\\]+ thread T0.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 0x\\[0-9a-f\\]+ (in _*main (\\[^\\n\\r]*strlen-overflow-1.c:24|\\[^\\n\\r]*:0)|\\[(\\]).*(\\n|\\r\\n|\\r)\" } */"}]}