{"sha": "9c370032cf787513298297be04ddf8b02ac2f336", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMzNzAwMzJjZjc4NzUxMzI5ODI5N2JlMDRkZGY4YjAyYWMyZjMzNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-10-25T11:16:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-25T11:16:12Z"}, "message": "re PR target/54902 (, ICE (segfault) building on arm-linux-gnueabi)\n\n2012-10-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/54902\n\t* tree-ssa-pre.c (fini_eliminate): Return TODO.\n\t(do_pre): Adjust.\n\t(execute_fre): Likewise.\n\t* tree-ssa-tailmerge.c (tail_merge_optimize): Delete unreachable\n\tblocks before computing dominators.\n\n\t* g++.dg/torture/pr54902.C: New testcase.\n\nFrom-SVN: r192804", "tree": {"sha": "8de88ebb51b852c880286c7f797faeedc6b31474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8de88ebb51b852c880286c7f797faeedc6b31474"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c370032cf787513298297be04ddf8b02ac2f336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c370032cf787513298297be04ddf8b02ac2f336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c370032cf787513298297be04ddf8b02ac2f336", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c370032cf787513298297be04ddf8b02ac2f336/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a969a32ff392ed49a60050a8b94d1dfdc05a5f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a969a32ff392ed49a60050a8b94d1dfdc05a5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a969a32ff392ed49a60050a8b94d1dfdc05a5f3"}], "stats": {"total": 161, "additions": 156, "deletions": 5}, "files": [{"sha": "59c476fa4288a196cd6bf50749dbc0c2369b12b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c370032cf787513298297be04ddf8b02ac2f336/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c370032cf787513298297be04ddf8b02ac2f336/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c370032cf787513298297be04ddf8b02ac2f336", "patch": "@@ -1,3 +1,12 @@\n+2012-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54902\n+\t* tree-ssa-pre.c (fini_eliminate): Return TODO.\n+\t(do_pre): Adjust.\n+\t(execute_fre): Likewise.\n+\t* tree-ssa-tailmerge.c (tail_merge_optimize): Delete unreachable\n+\tblocks before computing dominators.\n+\n 2012-10-25  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* expr.c (emit_block_move_via_loop): Use simplify_gen_binary"}, {"sha": "6c0a2f73921cdf9bff4f665addcee6f56ac068da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c370032cf787513298297be04ddf8b02ac2f336/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c370032cf787513298297be04ddf8b02ac2f336/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c370032cf787513298297be04ddf8b02ac2f336", "patch": "@@ -1,3 +1,8 @@\n+2012-10-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54902\n+\t* g++.dg/torture/pr54902.C: New testcase.\n+\n 2012-10-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/34892"}, {"sha": "790ffe5fcb5e681369225a6c5d499bd93d7ece3d", "filename": "gcc/testsuite/g++.dg/torture/pr54902.C", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c370032cf787513298297be04ddf8b02ac2f336/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54902.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c370032cf787513298297be04ddf8b02ac2f336/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54902.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54902.C?ref=9c370032cf787513298297be04ddf8b02ac2f336", "patch": "@@ -0,0 +1,131 @@\n+// { dg-do compile }\n+\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Iterator>     struct iterator_traits     {\n+    };\n+    template<typename _Tp>     struct iterator_traits<_Tp*>     {\n+\ttypedef _Tp& reference;\n+    };\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\"))) {\n+    using std::iterator_traits;\n+    template<typename _Iterator, typename _Container>     class __normal_iterator     {\n+\t_Iterator _M_current;\n+\ttypedef iterator_traits<_Iterator> __traits_type;\n+    public:\n+\ttypedef typename __traits_type::reference reference;\n+\texplicit       __normal_iterator(const _Iterator& __i) : _M_current(__i) {\n+\t}\n+\treference       operator*() const       {\n+\t    return *_M_current;\n+\t}\n+\t__normal_iterator       operator++(int)       {\n+\t    return __normal_iterator(_M_current++);\n+\t}\n+    };\n+    template<typename _Tp>     class new_allocator     {\n+    public:\n+\ttypedef _Tp* pointer;\n+\ttemplate<typename _Tp1>         struct rebind         {\n+\t    typedef new_allocator<_Tp1> other;\n+\t};\n+    };\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Tp>     class allocator: public __gnu_cxx::new_allocator<_Tp>     {\n+    };\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Alloc>   struct __alloc_traits   {\n+\ttypedef typename _Alloc::pointer pointer;\n+\ttemplate<typename _Tp>       struct rebind       {\n+\t    typedef typename _Alloc::template rebind<_Tp>::other other;\n+\t};\n+    };\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Tp, typename _Alloc>     struct _Vector_base     {\n+\ttypedef typename __gnu_cxx::__alloc_traits<_Alloc>::template         rebind<_Tp>::other _Tp_alloc_type;\n+\ttypedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer         pointer;\n+\tstruct _Vector_impl       : public _Tp_alloc_type       {\n+\t    pointer _M_start;\n+\t};\n+\t_Vector_impl _M_impl;\n+    };\n+    template<typename _Tp, typename _Alloc = std::allocator<_Tp> >     class vector : protected _Vector_base<_Tp, _Alloc>     {\n+\ttypedef _Vector_base<_Tp, _Alloc> _Base;\n+    public:\n+\ttypedef typename _Base::pointer pointer;\n+\ttypedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;\n+\titerator       begin()       {\n+\t    return iterator(this->_M_impl._M_start);\n+\t}\n+    };\n+}\n+class myServer {\n+    static std::vector<myServer *> server_list;\n+    class Callback;\n+    class myFolder *currentFolder;\n+    static bool eventloop(Callback *);\n+};\n+extern \"C\" {\n+    typedef unsigned int uint32_t;\n+    typedef uint32_t unicode_char;\n+    extern int strcmp (__const char *__s1, __const char *__s2)      throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));\n+};\n+class CursesObj {\n+};\n+class Curses : public CursesObj {\n+public:\n+    class Key {\n+    public:\n+\tunicode_char ukey;\n+\tconst char *keycode;\n+\tKey(unicode_char ch) : ukey(ch), keycode(0) {\n+\t}\n+\tbool plain() const {\n+\t}\n+\tbool nokey() const {\n+\t}\n+\tbool operator==(const Key &k) const   {\n+\t    return strcmp(keycode ? keycode:\n+\t\t\t  \"\",           k.keycode ? k.keycode:\n+\t\t\t  \"\") == 0 &&     ukey == k.ukey;\n+\t}\n+    };\n+    static bool processKey(const Key &k);\n+};\n+class CursesContainer : public Curses {\n+};\n+class myFolder {\n+public:\n+    void checkExpunged();\n+};\n+class Typeahead {\n+public:\n+    static Typeahead *typeahead;\n+    bool empty()  {\n+    }\n+    Curses::Key pop()  {\n+    }\n+};\n+class CursesScreen : public CursesContainer {\n+public:\n+    Key getKey();\n+};\n+using namespace std;\n+extern CursesScreen *cursesScreen;\n+bool myServer::eventloop(myServer::Callback *callback) {\n+    Curses::Key k1=    (callback == __null && !Typeahead::typeahead->empty()     ? Typeahead::typeahead->pop()     : cursesScreen->getKey());\n+    if (callback == __null || (k1.plain() && k1.ukey == '\\x03'))   {\n+\tif (!k1.nokey())    {\n+\t    bool rc=Curses::processKey(k1);\n+\t    if (rc)     {      while (k1.plain() && k1 == '\\x03' &&             !Typeahead::typeahead->empty())       Typeahead::typeahead->pop();     }\n+\t}\n+    }\n+    vector<myServer *>::iterator b=server_list.begin();\n+    while (1)   {\n+\tmyServer *p= *b++;\n+\tif (p->currentFolder)     p->currentFolder->checkExpunged();\n+    }\n+}"}, {"sha": "bc3381bd85e7c0f50cb4b10bcec819acd919ce75", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c370032cf787513298297be04ddf8b02ac2f336/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c370032cf787513298297be04ddf8b02ac2f336/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=9c370032cf787513298297be04ddf8b02ac2f336", "patch": "@@ -4448,7 +4448,7 @@ eliminate (void)\n \n /* Perform CFG cleanups made necessary by elimination.  */\n \n-static void\n+static unsigned \n fini_eliminate (void)\n {\n   bool do_eh_cleanup = !bitmap_empty_p (need_eh_cleanup);\n@@ -4464,7 +4464,8 @@ fini_eliminate (void)\n   BITMAP_FREE (need_ab_cleanup);\n \n   if (do_eh_cleanup || do_ab_cleanup)\n-    cleanup_tree_cfg ();\n+    return TODO_cleanup_cfg;\n+  return 0;\n }\n \n /* Borrow a bit of tree-ssa-dce.c for the moment.\n@@ -4728,7 +4729,7 @@ do_pre (void)\n \n   scev_finalize ();\n   fini_pre ();\n-  fini_eliminate ();\n+  todo |= fini_eliminate ();\n   loop_optimizer_finalize ();\n \n   /* TODO: tail_merge_optimize may merge all predecessors of a block, in which\n@@ -4794,7 +4795,7 @@ execute_fre (void)\n   /* Remove all the redundant expressions.  */\n   todo |= eliminate ();\n \n-  fini_eliminate ();\n+  todo |= fini_eliminate ();\n \n   free_scc_vn ();\n "}, {"sha": "79fb1a6b05b5757b7bee8b059bce421708a96066", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c370032cf787513298297be04ddf8b02ac2f336/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c370032cf787513298297be04ddf8b02ac2f336/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=9c370032cf787513298297be04ddf8b02ac2f336", "patch": "@@ -1600,7 +1600,12 @@ tail_merge_optimize (unsigned int todo)\n \n   timevar_push (TV_TREE_TAIL_MERGE);\n \n-  calculate_dominance_info (CDI_DOMINATORS);\n+  if (!dom_info_available_p (CDI_DOMINATORS))\n+    {\n+      /* PRE can leave us with unreachable blocks, remove them now.  */\n+      delete_unreachable_blocks ();\n+      calculate_dominance_info (CDI_DOMINATORS);\n+    }\n   init_worklist ();\n \n   while (!VEC_empty (same_succ, worklist))"}]}