{"sha": "859c146ca052061e4aba946a4bf5c292e3983c26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5YzE0NmNhMDUyMDYxZTRhYmE5NDZhNGJmNWMyOTJlMzk4M2MyNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:14:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:14:48Z"}, "message": "pa.c (TARGET_ASM_TRAMPOLINE_TEMPLATE, [...]): New.\n\n        * gcc/config/pa/pa.c (TARGET_ASM_TRAMPOLINE_TEMPLATE,\n        pa_asm_trampoline_template, TARGET_TRAMPOLINE_INIT,\n        pa_trampoline_init, TARGET_TRAMPOLINE_ADJUST_ADDRESS,\n        pa_trampoline_adjust_address): New.\n        * config/pa/pa.h (TRAMPOLINE_TEMPLATE): Move code to\n        pa_asm_trampoline_template.\n        (TRAMPOLINE_ALIGNMENT): New.\n        (TRAMPOLINE_CODE_SIZE): Move to pa.c.\n        (INITIALIZE_TRAMPOLINE): Move code to pa_trampoline_init;\n        adjust for hook parameters.\n        (TRAMPOLINE_ADJUST_ADDRESS): Move code to pa_trampoline_adjust_address.\n\nFrom-SVN: r152005", "tree": {"sha": "160d1c04ddf1466d4ed051270616525ba3755879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/160d1c04ddf1466d4ed051270616525ba3755879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/859c146ca052061e4aba946a4bf5c292e3983c26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859c146ca052061e4aba946a4bf5c292e3983c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859c146ca052061e4aba946a4bf5c292e3983c26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859c146ca052061e4aba946a4bf5c292e3983c26/comments", "author": null, "committer": null, "parents": [{"sha": "4601494d99331aa5c76fa0f7b892cebdf451621e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4601494d99331aa5c76fa0f7b892cebdf451621e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4601494d99331aa5c76fa0f7b892cebdf451621e"}], "stats": {"total": 354, "additions": 195, "deletions": 159}, "files": [{"sha": "cdb3ec9666796ec8746c786d85153fd76e0aa6f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859c146ca052061e4aba946a4bf5c292e3983c26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859c146ca052061e4aba946a4bf5c292e3983c26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=859c146ca052061e4aba946a4bf5c292e3983c26", "patch": "@@ -192,6 +192,18 @@\n \t(TRAMPOLINE_TEMPLATE): Move code to moxie_asm_trampoline_template.\n \t(STATIC_CHAIN, STATIC_CHAIN_INCOMING): Remove.\n \n+\t* gcc/config/pa/pa.c (TARGET_ASM_TRAMPOLINE_TEMPLATE,\n+\tpa_asm_trampoline_template, TARGET_TRAMPOLINE_INIT,\n+\tpa_trampoline_init, TARGET_TRAMPOLINE_ADJUST_ADDRESS,\n+\tpa_trampoline_adjust_address): New.\n+\t* config/pa/pa.h (TRAMPOLINE_TEMPLATE): Move code to\n+\tpa_asm_trampoline_template.\n+\t(TRAMPOLINE_ALIGNMENT): New.\n+\t(TRAMPOLINE_CODE_SIZE): Move to pa.c.\n+\t(INITIALIZE_TRAMPOLINE): Move code to pa_trampoline_init;\n+\tadjust for hook parameters.\n+\t(TRAMPOLINE_ADJUST_ADDRESS): Move code to pa_trampoline_adjust_address.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "09c830ea22c53dd896c015888d8d6c1632a7a6ab", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859c146ca052061e4aba946a4bf5c292e3983c26/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859c146ca052061e4aba946a4bf5c292e3983c26/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=859c146ca052061e4aba946a4bf5c292e3983c26", "patch": "@@ -163,6 +163,10 @@ static enum machine_mode pa_promote_function_mode (const_tree,\n \t\t\t\t\t\t   enum machine_mode, int *,\n \t\t\t\t\t\t   const_tree, int);\n \n+static void pa_asm_trampoline_template (FILE *);\n+static void pa_trampoline_init (rtx, tree, rtx);\n+static rtx pa_trampoline_adjust_address (rtx);\n+\n /* The following extra sections are only used for SOM.  */\n static GTY(()) section *som_readonly_data_section;\n static GTY(()) section *som_one_only_readonly_data_section;\n@@ -325,6 +329,13 @@ static size_t n_deferred_plabels = 0;\n #undef TARGET_EXTRA_LIVE_ON_ENTRY\n #define TARGET_EXTRA_LIVE_ON_ENTRY pa_extra_live_on_entry\n \n+#undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n+#define TARGET_ASM_TRAMPOLINE_TEMPLATE pa_asm_trampoline_template\n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT pa_trampoline_init\n+#undef TARGET_TRAMPOLINE_ADJUST_ADDRESS\n+#define TARGET_TRAMPOLINE_ADJUST_ADDRESS pa_trampoline_adjust_address\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Parse the -mfixed-range= option string.  */\n@@ -9808,4 +9819,174 @@ pa_modes_tieable_p (enum machine_mode mode1, enum machine_mode mode2)\n   return true;\n }\n \n+\f\n+/* Length in units of the trampoline instruction code.  */\n+\n+#define TRAMPOLINE_CODE_SIZE (TARGET_64BIT ? 24 : (TARGET_PA_20 ? 32 : 40))\n+\n+\n+/* Output assembler code for a block containing the constant parts\n+   of a trampoline, leaving space for the variable parts.\\\n+\n+   The trampoline sets the static chain pointer to STATIC_CHAIN_REGNUM\n+   and then branches to the specified routine.\n+\n+   This code template is copied from text segment to stack location\n+   and then patched with pa_trampoline_init to contain valid values,\n+   and then entered as a subroutine.\n+\n+   It is best to keep this as small as possible to avoid having to\n+   flush multiple lines in the cache.  */\n+\n+static void\n+pa_asm_trampoline_template (FILE *f)\n+{\n+  if (!TARGET_64BIT)\n+    {\n+      fputs (\"\\tldw\t36(%r22),%r21\\n\", f);\n+      fputs (\"\\tbb,>=,n\t%r21,30,.+16\\n\", f);\n+      if (ASSEMBLER_DIALECT == 0)\n+\tfputs (\"\\tdepi\t0,31,2,%r21\\n\", f);\n+      else\n+\tfputs (\"\\tdepwi\t0,31,2,%r21\\n\", f);\n+      fputs (\"\\tldw\t4(%r21),%r19\\n\", f);\n+      fputs (\"\\tldw\t0(%r21),%r21\\n\", f);\n+      if (TARGET_PA_20)\n+\t{\n+\t  fputs (\"\\tbve\t(%r21)\\n\", f);\n+\t  fputs (\"\\tldw\t40(%r22),%r29\\n\", f);\n+\t  fputs (\"\\t.word\t0\\n\", f);\n+\t  fputs (\"\\t.word\t0\\n\", f);\n+\t}\n+      else\n+\t{\n+\t  fputs (\"\\tldsid\t(%r21),%r1\\n\", f);\n+\t  fputs (\"\\tmtsp\t%r1,%sr0\\n\", f);\n+\t  fputs (\"\\tbe\t0(%sr0,%r21)\\n\", f);\n+\t  fputs (\"\\tldw\t40(%r22),%r29\\n\", f);\n+\t}\n+      fputs (\"\\t.word\t0\\n\", f);\n+      fputs (\"\\t.word\t0\\n\", f);\n+      fputs (\"\\t.word\t0\\n\", f);\n+      fputs (\"\\t.word\t0\\n\", f);\n+    }\n+  else\n+    {\n+      fputs (\"\\t.dword 0\\n\", f);\n+      fputs (\"\\t.dword 0\\n\", f);\n+      fputs (\"\\t.dword 0\\n\", f);\n+      fputs (\"\\t.dword 0\\n\", f);\n+      fputs (\"\\tmfia\t%r31\\n\", f);\n+      fputs (\"\\tldd\t24(%r31),%r1\\n\", f);\n+      fputs (\"\\tldd\t24(%r1),%r27\\n\", f);\n+      fputs (\"\\tldd\t16(%r1),%r1\\n\", f);\n+      fputs (\"\\tbve\t(%r1)\\n\", f);\n+      fputs (\"\\tldd\t32(%r31),%r31\\n\", f);\n+      fputs (\"\\t.dword 0  ; fptr\\n\", f);\n+      fputs (\"\\t.dword 0  ; static link\\n\", f);\n+    }\n+}\n+\n+/* Emit RTL insns to initialize the variable parts of a trampoline.\n+   FNADDR is an RTX for the address of the function's pure code.\n+   CXT is an RTX for the static chain value for the function.\n+\n+   Move the function address to the trampoline template at offset 36.\n+   Move the static chain value to trampoline template at offset 40.\n+   Move the trampoline address to trampoline template at offset 44.\n+   Move r19 to trampoline template at offset 48.  The latter two\n+   words create a plabel for the indirect call to the trampoline.\n+\n+   A similar sequence is used for the 64-bit port but the plabel is\n+   at the beginning of the trampoline.\n+\n+   Finally, the cache entries for the trampoline code are flushed.\n+   This is necessary to ensure that the trampoline instruction sequence\n+   is written to memory prior to any attempts at prefetching the code\n+   sequence.  */\n+\n+static void\n+pa_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n+{\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx start_addr = gen_reg_rtx (Pmode);\n+  rtx end_addr = gen_reg_rtx (Pmode);\n+  rtx line_length = gen_reg_rtx (Pmode);\n+  rtx r_tramp, tmp;\n+\n+  emit_block_move (m_tramp, assemble_trampoline_template (),\n+\t\t   GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);\n+  r_tramp = force_reg (Pmode, XEXP (m_tramp, 0));\n+\n+  if (!TARGET_64BIT)\n+    {\n+      tmp = adjust_address (m_tramp, Pmode, 36);\n+      emit_move_insn (tmp, fnaddr);\n+      tmp = adjust_address (m_tramp, Pmode, 40);\n+      emit_move_insn (tmp, chain_value);\n+\n+      /* Create a fat pointer for the trampoline.  */\n+      tmp = adjust_address (m_tramp, Pmode, 44);\n+      emit_move_insn (tmp, r_tramp);\n+      tmp = adjust_address (m_tramp, Pmode, 48);\n+      emit_move_insn (tmp, gen_rtx_REG (Pmode, 19));\n+\n+      /* fdc and fic only use registers for the address to flush,\n+\t they do not accept integer displacements.  We align the\n+\t start and end addresses to the beginning of their respective\n+\t cache lines to minimize the number of lines flushed.  */\n+      emit_insn (gen_andsi3 (start_addr, r_tramp,\n+\t\t\t     GEN_INT (-MIN_CACHELINE_SIZE)));\n+      tmp = force_reg (Pmode, plus_constant (r_tramp, TRAMPOLINE_CODE_SIZE-1));\n+      emit_insn (gen_andsi3 (end_addr, tmp,\n+\t\t\t     GEN_INT (-MIN_CACHELINE_SIZE)));\n+      emit_move_insn (line_length, GEN_INT (MIN_CACHELINE_SIZE));\n+      emit_insn (gen_dcacheflushsi (start_addr, end_addr, line_length));\n+      emit_insn (gen_icacheflushsi (start_addr, end_addr, line_length,\n+\t\t\t\t    gen_reg_rtx (Pmode),\n+\t\t\t\t    gen_reg_rtx (Pmode)));\n+    }\n+  else\n+    {\n+      tmp = adjust_address (m_tramp, Pmode, 56);\n+      emit_move_insn (tmp, fnaddr);\n+      tmp = adjust_address (m_tramp, Pmode, 64);\n+      emit_move_insn (tmp, chain_value);\n+\n+      /* Create a fat pointer for the trampoline.  */\n+      tmp = adjust_address (m_tramp, Pmode, 16);\n+      emit_move_insn (tmp, force_reg (Pmode, plus_constant (r_tramp, 32)));\n+      tmp = adjust_address (m_tramp, Pmode, 24);\n+      emit_move_insn (tmp, gen_rtx_REG (Pmode, 27));\n+\n+      /* fdc and fic only use registers for the address to flush,\n+\t they do not accept integer displacements.  We align the\n+\t start and end addresses to the beginning of their respective\n+\t cache lines to minimize the number of lines flushed.  */\n+      tmp = force_reg (Pmode, plus_constant (r_tramp, 32));\n+      emit_insn (gen_anddi3 (start_addr, tmp,\n+\t\t\t     GEN_INT (-MIN_CACHELINE_SIZE)));\n+      tmp = force_reg (Pmode, plus_constant (tmp, TRAMPOLINE_CODE_SIZE - 1));\n+      emit_insn (gen_anddi3 (end_addr, tmp,\n+\t\t\t     GEN_INT (-MIN_CACHELINE_SIZE)));\n+      emit_move_insn (line_length, GEN_INT (MIN_CACHELINE_SIZE));\n+      emit_insn (gen_dcacheflushdi (start_addr, end_addr, line_length));\n+      emit_insn (gen_icacheflushdi (start_addr, end_addr, line_length,\n+\t\t\t\t    gen_reg_rtx (Pmode),\n+\t\t\t\t    gen_reg_rtx (Pmode)));\n+    }\n+}\n+\n+/* Perform any machine-specific adjustment in the address of the trampoline.\n+   ADDR contains the address that was passed to pa_trampoline_init.\n+   Adjust the trampoline address to point to the plabel at offset 44.  */\n+\n+static rtx\n+pa_trampoline_adjust_address (rtx addr)\n+{\n+  if (!TARGET_64BIT)\n+    addr = memory_address (Pmode, plus_constant (addr, 46));\n+  return addr;\n+}\n+\f\n #include \"gt-pa.h\""}, {"sha": "7716e73fb91c434c0423c02288394dab63a19f22", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 159, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859c146ca052061e4aba946a4bf5c292e3983c26/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859c146ca052061e4aba946a4bf5c292e3983c26/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=859c146ca052061e4aba946a4bf5c292e3983c26", "patch": "@@ -778,74 +778,13 @@ extern int may_call_alloca;\n  (get_frame_size () != 0\t\\\n   || cfun->calls_alloca || crtl->outgoing_args_size)\n \n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.\\\n-\n-   The trampoline sets the static chain pointer to STATIC_CHAIN_REGNUM\n-   and then branches to the specified routine.\n-\n-   This code template is copied from text segment to stack location\n-   and then patched with INITIALIZE_TRAMPOLINE to contain\n-   valid values, and then entered as a subroutine.\n-\n-   It is best to keep this as small as possible to avoid having to\n-   flush multiple lines in the cache.  */\n-\n-#define TRAMPOLINE_TEMPLATE(FILE) \t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (!TARGET_64BIT)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfputs (\"\\tldw\t36(%r22),%r21\\n\", FILE);\t\t\t\\\n-\tfputs (\"\\tbb,>=,n\t%r21,30,.+16\\n\", FILE);\t\t\t\\\n-\tif (ASSEMBLER_DIALECT == 0)\t\t\t\t\t\\\n-\t  fputs (\"\\tdepi\t0,31,2,%r21\\n\", FILE);\t\t\t\\\n-\telse\t\t\t\t\t\t\t\t\\\n-\t  fputs (\"\\tdepwi\t0,31,2,%r21\\n\", FILE);\t\t\t\\\n-\tfputs (\"\\tldw\t4(%r21),%r19\\n\", FILE);\t\t\t\t\\\n-\tfputs (\"\\tldw\t0(%r21),%r21\\n\", FILE);\t\t\t\t\\\n-\tif (TARGET_PA_20)\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    fputs (\"\\tbve\t(%r21)\\n\", FILE);\t\t\t\\\n-\t    fputs (\"\\tldw\t40(%r22),%r29\\n\", FILE);\t\t\\\n-\t    fputs (\"\\t.word\t0\\n\", FILE);\t\t\t\t\\\n-\t    fputs (\"\\t.word\t0\\n\", FILE);\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\telse\t\t\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    fputs (\"\\tldsid\t(%r21),%r1\\n\", FILE);\t\t\t\\\n-\t    fputs (\"\\tmtsp\t%r1,%sr0\\n\", FILE);\t\t\t\\\n-\t    fputs (\"\\tbe\t0(%sr0,%r21)\\n\", FILE);\t\t\t\\\n-\t    fputs (\"\\tldw\t40(%r22),%r29\\n\", FILE);\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\tfputs (\"\\t.word\t0\\n\", FILE);\t\t\t\t\t\\\n-\tfputs (\"\\t.word\t0\\n\", FILE);\t\t\t\t\t\\\n-\tfputs (\"\\t.word\t0\\n\", FILE);\t\t\t\t\t\\\n-\tfputs (\"\\t.word\t0\\n\", FILE);\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfputs (\"\\t.dword 0\\n\", FILE);\t\t\t\t\t\\\n-\tfputs (\"\\t.dword 0\\n\", FILE);\t\t\t\t\t\\\n-\tfputs (\"\\t.dword 0\\n\", FILE);\t\t\t\t\t\\\n-\tfputs (\"\\t.dword 0\\n\", FILE);\t\t\t\t\t\\\n-\tfputs (\"\\tmfia\t%r31\\n\", FILE);\t\t\t\t\t\\\n-\tfputs (\"\\tldd\t24(%r31),%r1\\n\", FILE);\t\t\t\t\\\n-\tfputs (\"\\tldd\t24(%r1),%r27\\n\", FILE);\t\t\t\t\\\n-\tfputs (\"\\tldd\t16(%r1),%r1\\n\", FILE);\t\t\t\t\\\n-\tfputs (\"\\tbve\t(%r1)\\n\", FILE);\t\t\t\t\\\n-\tfputs (\"\\tldd\t32(%r31),%r31\\n\", FILE);\t\t\t\\\n-\tfputs (\"\\t.dword 0  ; fptr\\n\", FILE);\t\t\t\t\\\n-\tfputs (\"\\t.dword 0  ; static link\\n\", FILE);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\n-\n /* Length in units of the trampoline for entering a nested function.  */\n \n #define TRAMPOLINE_SIZE (TARGET_64BIT ? 72 : 52)\n \n-/* Length in units of the trampoline instruction code.  */\n+/* Alignment required by the trampoline.  */\n \n-#define TRAMPOLINE_CODE_SIZE (TARGET_64BIT ? 24 : (TARGET_PA_20 ? 32 : 40))\n+#define TRAMPOLINE_ALIGNMENT BITS_PER_WORD\n \n /* Minimum length of a cache line.  A length of 16 will work on all\n    PA-RISC processors.  All PA 1.1 processors have a cache line of\n@@ -855,102 +794,6 @@ extern int may_call_alloca;\n \n #define MIN_CACHELINE_SIZE 32\n \n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.\n-\n-   Move the function address to the trampoline template at offset 36.\n-   Move the static chain value to trampoline template at offset 40.\n-   Move the trampoline address to trampoline template at offset 44.\n-   Move r19 to trampoline template at offset 48.  The latter two\n-   words create a plabel for the indirect call to the trampoline.\n-\n-   A similar sequence is used for the 64-bit port but the plabel is\n-   at the beginning of the trampoline.\n-\n-   Finally, the cache entries for the trampoline code are flushed.\n-   This is necessary to ensure that the trampoline instruction sequence\n-   is written to memory prior to any attempts at prefetching the code\n-   sequence.  */\n-\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  rtx start_addr = gen_reg_rtx (Pmode);\t\t\t\t\t\\\n-  rtx end_addr = gen_reg_rtx (Pmode);\t\t\t\t\t\\\n-  rtx line_length = gen_reg_rtx (Pmode);\t\t\t\t\\\n-  rtx tmp;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (!TARGET_64BIT)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      tmp = memory_address (Pmode, plus_constant ((TRAMP), 36));\t\\\n-      emit_move_insn (gen_rtx_MEM (Pmode, tmp), (FNADDR));\t\t\\\n-      tmp = memory_address (Pmode, plus_constant ((TRAMP), 40));\t\\\n-      emit_move_insn (gen_rtx_MEM (Pmode, tmp), (CXT));\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      /* Create a fat pointer for the trampoline.  */\t\t\t\\\n-      tmp = memory_address (Pmode, plus_constant ((TRAMP), 44));\t\\\n-      emit_move_insn (gen_rtx_MEM (Pmode, tmp), (TRAMP));\t\t\\\n-      tmp = memory_address (Pmode, plus_constant ((TRAMP), 48));\t\\\n-      emit_move_insn (gen_rtx_MEM (Pmode, tmp),\t\t\t\t\\\n-\t\t      gen_rtx_REG (Pmode, 19));\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      /* fdc and fic only use registers for the address to flush,\t\\\n-\t they do not accept integer displacements.  We align the\t\\\n-\t start and end addresses to the beginning of their respective\t\\\n-\t cache lines to minimize the number of lines flushed.  */\t\\\n-      tmp = force_reg (Pmode, (TRAMP));\t\t\t\t\t\\\n-      emit_insn (gen_andsi3 (start_addr, tmp,\t\t\t\t\\\n-\t\t\t     GEN_INT (-MIN_CACHELINE_SIZE)));\t\t\\\n-      tmp = force_reg (Pmode,\t\t\t\t\t\t\\\n-\t\t       plus_constant (tmp, TRAMPOLINE_CODE_SIZE - 1));\t\\\n-      emit_insn (gen_andsi3 (end_addr, tmp,\t\t\t\t\\\n-\t\t\t     GEN_INT (-MIN_CACHELINE_SIZE)));\t\t\\\n-      emit_move_insn (line_length, GEN_INT (MIN_CACHELINE_SIZE));\t\\\n-      emit_insn (gen_dcacheflushsi (start_addr, end_addr, line_length));\\\n-      emit_insn (gen_icacheflushsi (start_addr, end_addr, line_length,\t\\\n-\t\t\t\t  gen_reg_rtx (Pmode),\t\t\t\\\n-\t\t\t\t  gen_reg_rtx (Pmode)));\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      tmp = memory_address (Pmode, plus_constant ((TRAMP), 56));\t\\\n-      emit_move_insn (gen_rtx_MEM (Pmode, tmp), (FNADDR));\t\t\\\n-      tmp = memory_address (Pmode, plus_constant ((TRAMP), 64));\t\\\n-      emit_move_insn (gen_rtx_MEM (Pmode, tmp), (CXT));\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      /* Create a fat pointer for the trampoline.  */\t\t\t\\\n-      tmp = memory_address (Pmode, plus_constant ((TRAMP), 16));\t\\\n-      emit_move_insn (gen_rtx_MEM (Pmode, tmp),\t\t\t\t\\\n-\t\t      force_reg (Pmode, plus_constant ((TRAMP), 32)));\t\\\n-      tmp = memory_address (Pmode, plus_constant ((TRAMP), 24));\t\\\n-      emit_move_insn (gen_rtx_MEM (Pmode, tmp),\t\t\t\t\\\n-\t\t      gen_rtx_REG (Pmode, 27));\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      /* fdc and fic only use registers for the address to flush,\t\\\n-\t they do not accept integer displacements.  We align the\t\\\n-\t start and end addresses to the beginning of their respective\t\\\n-\t cache lines to minimize the number of lines flushed.  */\t\\\n-      tmp = force_reg (Pmode, plus_constant ((TRAMP), 32));\t\t\\\n-      emit_insn (gen_anddi3 (start_addr, tmp,\t\t\t\t\\\n-\t\t\t     GEN_INT (-MIN_CACHELINE_SIZE)));\t\t\\\n-      tmp = force_reg (Pmode,\t\t\t\t\t\t\\\n-\t\t       plus_constant (tmp, TRAMPOLINE_CODE_SIZE - 1));\t\\\n-      emit_insn (gen_anddi3 (end_addr, tmp,\t\t\t\t\\\n-\t\t\t     GEN_INT (-MIN_CACHELINE_SIZE)));\t\t\\\n-      emit_move_insn (line_length, GEN_INT (MIN_CACHELINE_SIZE));\t\\\n-      emit_insn (gen_dcacheflushdi (start_addr, end_addr, line_length));\\\n-      emit_insn (gen_icacheflushdi (start_addr, end_addr, line_length,\t\\\n-\t\t\t\t  gen_reg_rtx (Pmode),\t\t\t\\\n-\t\t\t\t  gen_reg_rtx (Pmode)));\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* Perform any machine-specific adjustment in the address of the trampoline.\n-   ADDR contains the address that was passed to INITIALIZE_TRAMPOLINE.\n-   Adjust the trampoline address to point to the plabel at offset 44.  */\n-   \n-#define TRAMPOLINE_ADJUST_ADDRESS(ADDR) \\\n-  if (!TARGET_64BIT) (ADDR) = memory_address (Pmode, plus_constant ((ADDR), 46))\n \f\n /* Addressing modes, and classification of registers for them. \n "}]}