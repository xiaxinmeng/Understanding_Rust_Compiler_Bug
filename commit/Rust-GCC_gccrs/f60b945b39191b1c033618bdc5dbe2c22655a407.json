{"sha": "f60b945b39191b1c033618bdc5dbe2c22655a407", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYwYjk0NWIzOTE5MWIxYzAzMzYxOGJkYzVkYmUyYzIyNjU1YTQwNw==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-06-28T01:34:25Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-06-28T01:34:25Z"}, "message": "objc-act.c (handle_impent): Rewrite to be more portable and to use ASM_DECLARE_CLASS_REFERENCE.\n\n        * objc/objc-act.c (handle_impent): Rewrite to be more portable\n        and to use ASM_DECLARE_CLASS_REFERENCE.\n        * config/darwin.h (ASM_DECLARE_CLASS_REFERENCE): Rename from\n        undocumented DECLARE_CLASS_REFERENCE, add file argument.\n        * doc/tm.texi (ASM_DECLARE_CLASS_REFERENCE): Document.\n\nFrom-SVN: r43622", "tree": {"sha": "ef4d6372f6fe3f9bf1ff83ab2e3c6bc4a6478725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef4d6372f6fe3f9bf1ff83ab2e3c6bc4a6478725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f60b945b39191b1c033618bdc5dbe2c22655a407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60b945b39191b1c033618bdc5dbe2c22655a407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f60b945b39191b1c033618bdc5dbe2c22655a407", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60b945b39191b1c033618bdc5dbe2c22655a407/comments", "author": null, "committer": null, "parents": [{"sha": "b42abad88a72de91687aca2d9d360bd4e259b84e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42abad88a72de91687aca2d9d360bd4e259b84e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b42abad88a72de91687aca2d9d360bd4e259b84e"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "854a569ffc9617a1e920252f700b0ae0ec4cabd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60b945b39191b1c033618bdc5dbe2c22655a407/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60b945b39191b1c033618bdc5dbe2c22655a407/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f60b945b39191b1c033618bdc5dbe2c22655a407", "patch": "@@ -1,3 +1,11 @@\n+2001-06-27  Stan Shebs  <shebs@apple.com>\n+\n+\t* objc/objc-act.c (handle_impent): Rewrite to be more portable\n+\tand to use ASM_DECLARE_CLASS_REFERENCE.\n+\t* config/darwin.h (ASM_DECLARE_CLASS_REFERENCE): Rename from\n+\tundocumented DECLARE_CLASS_REFERENCE, add file argument.\n+\t* doc/tm.texi (ASM_DECLARE_CLASS_REFERENCE): Document.\n+\n Wed Jun 27 18:01:09 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* simplify-rtx.c (simplify_rtx): Canonicalize commutative expressions\n@@ -1122,7 +1130,7 @@ Tue Jun 12 12:20:12 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-06-11  Stan Shebs  <shebs@apple.com>\n \n-\t* darwin.h (ASM_FILE_END): Remove decl of language_string.\n+\t* config/darwin.h (ASM_FILE_END): Remove decl of language_string.\n \n 2001-06-11  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n@@ -1178,7 +1186,7 @@ Tue Jun 12 12:20:12 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-06-11  Stan Shebs  <shebs@apple.com>\n \n-\t* darwin.c (darwin_encode_section_info):  Rewrite to simplify\n+\t* config/darwin.c (darwin_encode_section_info):  Rewrite to simplify\n \tand fix coding mistakes.\n \n 2001-06-11  Nick Clifton  <nickc@cambridge.redhat.com>"}, {"sha": "c3a0a91c613a67b5ba90729d18ec5960f8f5a96e", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60b945b39191b1c033618bdc5dbe2c22655a407/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60b945b39191b1c033618bdc5dbe2c22655a407/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=f60b945b39191b1c033618bdc5dbe2c22655a407", "patch": "@@ -663,12 +663,12 @@ void alias_section (name, alias)\t\t\t\\\n \t }                                                              \\\n        } while (0)\n \n-#define DECLARE_CLASS_REFERENCE(NAME) \\\n-    do { extern FILE* asm_out_file;\t\t\t\t\t\\\n-\t if (asm_out_file) {\t\t\t\t\t\t\\\n-\t   fprintf (asm_out_file, \"\\t\");\t\t\t\t\\\n-\t   assemble_name (asm_out_file, NAME); \t\t\t\t\\\n-\t   fprintf (asm_out_file, \"=0\\n\");\t\t\t\t\\\n+#define ASM_DECLARE_CLASS_REFERENCE(FILE,NAME)\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\t\\\n+\t if (FILE) {\t\t\t\t\t\t\t\\\n+\t   fprintf (FILE, \"\\t\");\t\t\t\t\t\\\n+\t   assemble_name (FILE, NAME); \t\t\t\t\t\\\n+\t   fprintf (FILE, \"=0\\n\");\t\t\t\t\t\\\n \t   assemble_global (NAME);\t\t\t\t\t\\\n \t }\t\t\t\t\t\t\t\t\\\n        } while (0)"}, {"sha": "991672cd3538b6b47985db6fd4cd0baeda73ee53", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60b945b39191b1c033618bdc5dbe2c22655a407/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60b945b39191b1c033618bdc5dbe2c22655a407/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f60b945b39191b1c033618bdc5dbe2c22655a407", "patch": "@@ -6374,6 +6374,13 @@ in a category); and @var{sel_name} is the name of the selector.\n On systems where the assembler can handle quoted names, you can use this\n macro to provide more human-readable names.\n \n+@findex ASM_DECLARE_CLASS_REFERENCE\n+@item ASM_DECLARE_CLASS_REFERENCE (@var{stream}, @var{name})\n+A C statement (sans semicolon) to output to the stdio stream\n+@var{stream} commands to declare that the label @var{name} is an\n+Objective-C class reference.  This is only needed for targets whose\n+linkers have special support for NeXT-style runtimes.\n+\n @findex ASM_DECLARE_UNRESOLVED_REFERENCE\n @item ASM_DECLARE_UNRESOLVED_REFERENCE (@var{stream}, @var{name})\n A C statement (sans semicolon) to output to the stdio stream"}, {"sha": "f059472112a197b0b38e533e473a47b81d3ca35b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 30, "deletions": 45, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60b945b39191b1c033618bdc5dbe2c22655a407/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60b945b39191b1c033618bdc5dbe2c22655a407/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f60b945b39191b1c033618bdc5dbe2c22655a407", "patch": "@@ -8392,69 +8392,54 @@ static void\n handle_impent (impent)\n      struct imp_entry *impent;\n {\n+  char *string;\n+\n   implementation_context = impent->imp_context;\n   implementation_template = impent->imp_template;\n \n   if (TREE_CODE (impent->imp_context) == CLASS_IMPLEMENTATION_TYPE)\n     {\n       const char *class_name =\n \tIDENTIFIER_POINTER (CLASS_NAME (impent->imp_context));\n-      char *string = (char *) alloca (strlen (class_name) + 30);\n \n-      if (flag_next_runtime)\n-\t{\n-\t  /* Grossly unportable.\n-\t     People should know better than to assume\n-\t     such things about assembler syntax!  */\n-\t  sprintf (string, \".objc_class_name_%s=0\", class_name);\n-\t  assemble_asm (my_build_string (strlen (string) + 1, string));\n-\n-\t  sprintf (string, \".globl .objc_class_name_%s\", class_name);\n-\t  assemble_asm (my_build_string (strlen (string) + 1, string));\n-\t}\n+      string = (char *) alloca (strlen (class_name) + 30);\n \n-      else\n-\t{\n-\t  sprintf (string, \"%sobjc_class_name_%s\",\n-\t\t   (flag_next_runtime ? \".\" : \"__\"), class_name);\n-\t  assemble_global (string);\n-\t  assemble_label (string);\n-\t}\n+      sprintf (string, \"*%sobjc_class_name_%s\",\n+               (flag_next_runtime ? \".\" : \"__\"), class_name);\n     }\n-\n   else if (TREE_CODE (impent->imp_context) == CATEGORY_IMPLEMENTATION_TYPE)\n     {\n       const char *class_name =\n \tIDENTIFIER_POINTER (CLASS_NAME (impent->imp_context));\n       const char *class_super_name =\n-\tIDENTIFIER_POINTER (CLASS_SUPER_NAME (impent->imp_context));\n-      char *string = (char *) alloca (strlen (class_name)\n-\t\t\t\t      + strlen (class_super_name) + 30);\n+        IDENTIFIER_POINTER (CLASS_SUPER_NAME (impent->imp_context));\n \n-      /* Do the same for categories.  Even though no references to these\n-\t symbols are generated automatically by the compiler, it gives\n-\t you a handle to pull them into an archive by hand.  */\n-      if (flag_next_runtime)\n-\t{\n-\t  /* Grossly unportable.  */\n-\t  sprintf (string, \".objc_category_name_%s_%s=0\",\n-\t\t   class_name, class_super_name);\n-\t  assemble_asm (my_build_string (strlen (string) + 1, string));\n-\n-\t  sprintf (string, \".globl .objc_category_name_%s_%s\",\n-\t\t   class_name, class_super_name);\n-\t  assemble_asm (my_build_string (strlen (string) + 1, string));\n-\t}\n+      string = (char *) alloca (strlen (class_name)\n+\t\t\t\t+ strlen (class_super_name) + 30);\n \n-      else\n-\t{\n-\t  sprintf (string, \"%sobjc_category_name_%s_%s\",\n-\t\t   (flag_next_runtime ? \".\" : \"__\"),\n-\t\t   class_name, class_super_name);\n-\t  assemble_global (string);\n-\t  assemble_label (string);\n-\t}\n+      /* Do the same for categories.  Even though no references to\n+         these symbols are generated automatically by the compiler, it\n+         gives you a handle to pull them into an archive by hand. */\n+      sprintf (string, \"*%sobjc_category_name_%s_%s\",\n+               (flag_next_runtime ? \".\" : \"__\"), class_name, class_super_name);\n+    }\n+  else\n+    return;\n+\n+#ifdef ASM_DECLARE_CLASS_REFERENCE\n+  if (flag_next_runtime)\n+    {\n+      ASM_DECLARE_CLASS_REFERENCE (asm_out_file, string);\n+      return;\n     }\n+#endif\n+\n+  /* (Should this be a routine in varasm.c?) */\n+  readonly_data_section ();\n+  assemble_global (string);\n+  assemble_align (UNITS_PER_WORD);\n+  assemble_label (string);\n+  assemble_zeros (UNITS_PER_WORD);\n }\n \f\n void"}]}