{"sha": "cb2558bc95658155c76e1468ed4db64359452dc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyNTU4YmM5NTY1ODE1NWM3NmUxNDY4ZWQ0ZGI2NDM1OTQ1MmRjMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-05-10T10:52:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-05-10T10:52:55Z"}, "message": "gcc/\n\t* config/mips/mips-protos.h (m16_uimm3_b, m16_simm4_1, m16_nsimm4_1)\n\t(m16_simm5_1, m16_nsimm5_1, m16_uimm5_4, m16_nuimm5_4, m16_simm8_1)\n\t(m16_nsimm8_1, m16_uimm8_1, m16_nuimm8_1, m16_uimm8_m1_1, m16_uimm8_4)\n\t(m16_nuimm8_4, m16_simm8_8, m16_nsimm8_8): Delete.\n\t* config/mips/mips.c (m16_check_op, m16_uimm3_b, m16_simm4_1)\n\t(m16_nsimm4_1, m16_simm5_1, m16_nsimm5_1, m16_uimm5_4, m16_nuimm5_4)\n\t(m16_simm8_1, m16_nsimm8_1, m16_uimm8_1, m16_nuimm8_1, m16_uimm8_m1_1)\n\t(m16_uimm8_4, m16_nuimm8_4, m16_simm8_8, m16_nsimm8_8): Delete.\n\t* config/mips/constraints.md (Udb8, Usb5, Usb8, Usd8, Uub8, Uuw5)\n\t(Uuw8): New constraints.\n\t(Usb4): Move into alphabetical order.\n\t* config/mips/predicates.md (db8_operand, sb5_operand, sb8_operand)\n\t(sd8_operand, ub8_operand, uw8_operand): New predicates.\n\t* config/mips/mips.md (*xor<mode>3, *xor<mode>3_mips16): Name\n\tpreviously unnamed patterns.\n\t(*add<mode>3_mips16, *xor<mode>3_mips16, *<optab>si3_mips16)\n\t(*ashldi3_mips16, *ashrdi3_mips16, *lshrdi3_mips16)\n\t(*slt<u>_<GPR:mode><GPR2:mode>_mips16)\n\t(*sle<u>_<GPR:mode><GPR2:mode>_mips16): Use constraints instead\n\tof set_attr_alternative/if_then_else.  Use extended_mips16 instead\n\tof specific lengths.\n\nFrom-SVN: r198771", "tree": {"sha": "52eb1257b8470cfc0d3f982df40062e2f016705b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52eb1257b8470cfc0d3f982df40062e2f016705b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb2558bc95658155c76e1468ed4db64359452dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2558bc95658155c76e1468ed4db64359452dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb2558bc95658155c76e1468ed4db64359452dc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2558bc95658155c76e1468ed4db64359452dc2/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f93c0089265867666bcf71a659df21a63e0572e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f93c0089265867666bcf71a659df21a63e0572e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f93c0089265867666bcf71a659df21a63e0572e"}], "stats": {"total": 326, "additions": 125, "deletions": 201}, "files": [{"sha": "3257628b27675572f2abad4f9e128bca1b43a0cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb2558bc95658155c76e1468ed4db64359452dc2", "patch": "@@ -1,3 +1,27 @@\n+2013-05-10  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips-protos.h (m16_uimm3_b, m16_simm4_1, m16_nsimm4_1)\n+\t(m16_simm5_1, m16_nsimm5_1, m16_uimm5_4, m16_nuimm5_4, m16_simm8_1)\n+\t(m16_nsimm8_1, m16_uimm8_1, m16_nuimm8_1, m16_uimm8_m1_1, m16_uimm8_4)\n+\t(m16_nuimm8_4, m16_simm8_8, m16_nsimm8_8): Delete.\n+\t* config/mips/mips.c (m16_check_op, m16_uimm3_b, m16_simm4_1)\n+\t(m16_nsimm4_1, m16_simm5_1, m16_nsimm5_1, m16_uimm5_4, m16_nuimm5_4)\n+\t(m16_simm8_1, m16_nsimm8_1, m16_uimm8_1, m16_nuimm8_1, m16_uimm8_m1_1)\n+\t(m16_uimm8_4, m16_nuimm8_4, m16_simm8_8, m16_nsimm8_8): Delete.\n+\t* config/mips/constraints.md (Udb8, Usb5, Usb8, Usd8, Uub8, Uuw5)\n+\t(Uuw8): New constraints.\n+\t(Usb4): Move into alphabetical order.\n+\t* config/mips/predicates.md (db8_operand, sb5_operand, sb8_operand)\n+\t(sd8_operand, ub8_operand, uw8_operand): New predicates.\n+\t* config/mips/mips.md (*xor<mode>3, *xor<mode>3_mips16): Name\n+\tpreviously unnamed patterns.\n+\t(*add<mode>3_mips16, *xor<mode>3_mips16, *<optab>si3_mips16)\n+\t(*ashldi3_mips16, *ashrdi3_mips16, *lshrdi3_mips16)\n+\t(*slt<u>_<GPR:mode><GPR2:mode>_mips16)\n+\t(*sle<u>_<GPR:mode><GPR2:mode>_mips16): Use constraints instead\n+\tof set_attr_alternative/if_then_else.  Use extended_mips16 instead\n+\tof specific lengths.\n+\n 2013-05-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.md (rotateinv): New code attr."}, {"sha": "ddef8cc495d5c14cd7e82117301961e09433a206", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=cb2558bc95658155c76e1468ed4db64359452dc2", "patch": "@@ -178,6 +178,11 @@\n    A decremented unsigned constant of 7 bits.\"\n   (match_operand 0 \"db7_operand\"))\n \n+(define_constraint \"Udb8\"\n+  \"@internal\n+   A decremented unsigned constant of 8 bits.\"\n+  (match_operand 0 \"db8_operand\"))\n+\n (define_constraint \"Uead\"\n   \"@internal\n    A microMIPS encoded ADDIUR2 immediate operand.\"\n@@ -198,15 +203,45 @@\n    An unsigned, incremented constant of 3 bits.\"\n   (match_operand 0 \"ib3_operand\"))\n \n+(define_constraint \"Usb4\"\n+  \"@internal\n+   A signed constant of 4 bits.\"\n+  (match_operand 0 \"sb4_operand\"))\n+\n+(define_constraint \"Usb5\"\n+  \"@internal\n+   A signed constant of 5 bits.\"\n+  (match_operand 0 \"sb5_operand\"))\n+\n+(define_constraint \"Usb8\"\n+  \"@internal\n+   A signed constant of 8 bits.\"\n+  (match_operand 0 \"sb8_operand\"))\n+\n+(define_constraint \"Usd8\"\n+  \"@internal\n+   A signed constant of 8 bits, shifted left three places.\"\n+  (match_operand 0 \"sd8_operand\"))\n+\n+(define_constraint \"Uub8\"\n+  \"@internal\n+   An unsigned constant of 8 bits.\"\n+  (match_operand 0 \"ub8_operand\"))\n+\n+(define_constraint \"Uuw5\"\n+  \"@internal\n+   An unsigned constant of 5 bits, shifted left two places.\"\n+  (match_operand 0 \"uw5_operand\"))\n+\n (define_constraint \"Uuw6\"\n   \"@internal\n    An unsigned constant of 6 bits, shifted left two places.\"\n   (match_operand 0 \"uw6_operand\"))\n \n-(define_constraint \"Usb4\"\n+(define_constraint \"Uuw8\"\n   \"@internal\n-   A signed constant of 4 bits.\"\n-  (match_operand 0 \"sb4_operand\"))\n+   An unsigned constant of 8 bits, shifted left two places.\"\n+  (match_operand 0 \"uw8_operand\"))\n \n (define_memory_constraint \"W\"\n   \"@internal"}, {"sha": "97862cc5025e57d612bbc801ef34b6204f6b991a", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=cb2558bc95658155c76e1468ed4db64359452dc2", "patch": "@@ -211,23 +211,6 @@ extern rtx mips_strip_unspec_address (rtx);\n extern void mips_move_integer (rtx, rtx, unsigned HOST_WIDE_INT);\n extern bool mips_legitimize_move (enum machine_mode, rtx, rtx);\n \n-extern int m16_uimm3_b (rtx, enum machine_mode);\n-extern int m16_simm4_1 (rtx, enum machine_mode);\n-extern int m16_nsimm4_1 (rtx, enum machine_mode);\n-extern int m16_simm5_1 (rtx, enum machine_mode);\n-extern int m16_nsimm5_1 (rtx, enum machine_mode);\n-extern int m16_uimm5_4 (rtx, enum machine_mode);\n-extern int m16_nuimm5_4 (rtx, enum machine_mode);\n-extern int m16_simm8_1 (rtx, enum machine_mode);\n-extern int m16_nsimm8_1 (rtx, enum machine_mode);\n-extern int m16_uimm8_1 (rtx, enum machine_mode);\n-extern int m16_nuimm8_1 (rtx, enum machine_mode);\n-extern int m16_uimm8_m1_1 (rtx, enum machine_mode);\n-extern int m16_uimm8_4 (rtx, enum machine_mode);\n-extern int m16_nuimm8_4 (rtx, enum machine_mode);\n-extern int m16_simm8_8 (rtx, enum machine_mode);\n-extern int m16_nsimm8_8 (rtx, enum machine_mode);\n-\n extern rtx mips_subword (rtx, bool);\n extern bool mips_split_move_p (rtx, rtx, enum mips_split_type);\n extern void mips_split_move (rtx, rtx, enum mips_split_type);"}, {"sha": "f7c1f8cbc06aded53fe88215c8db0f1922415c18", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=cb2558bc95658155c76e1468ed4db64359452dc2", "patch": "@@ -3358,113 +3358,6 @@ mips_rewrite_small_data (rtx pattern)\n   return pattern;\n }\n \f\n-/* We need a lot of little routines to check the range of MIPS16 immediate\n-   operands.  */\n-\n-static int\n-m16_check_op (rtx op, int low, int high, int mask)\n-{\n-  return (CONST_INT_P (op)\n-\t  && IN_RANGE (INTVAL (op), low, high)\n-\t  && (INTVAL (op) & mask) == 0);\n-}\n-\n-int\n-m16_uimm3_b (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, 0x1, 0x8, 0);\n-}\n-\n-int\n-m16_simm4_1 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0x8, 0x7, 0);\n-}\n-\n-int\n-m16_nsimm4_1 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0x7, 0x8, 0);\n-}\n-\n-int\n-m16_simm5_1 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0x10, 0xf, 0);\n-}\n-\n-int\n-m16_nsimm5_1 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0xf, 0x10, 0);\n-}\n-\n-int\n-m16_uimm5_4 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0x10 << 2, 0xf << 2, 3);\n-}\n-\n-int\n-m16_nuimm5_4 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0xf << 2, 0x10 << 2, 3);\n-}\n-\n-int\n-m16_simm8_1 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0x80, 0x7f, 0);\n-}\n-\n-int\n-m16_nsimm8_1 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0x7f, 0x80, 0);\n-}\n-\n-int\n-m16_uimm8_1 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, 0x0, 0xff, 0);\n-}\n-\n-int\n-m16_nuimm8_1 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0xff, 0x0, 0);\n-}\n-\n-int\n-m16_uimm8_m1_1 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0x1, 0xfe, 0);\n-}\n-\n-int\n-m16_uimm8_4 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, 0x0, 0xff << 2, 3);\n-}\n-\n-int\n-m16_nuimm8_4 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0xff << 2, 0x0, 3);\n-}\n-\n-int\n-m16_simm8_8 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0x80 << 3, 0x7f << 3, 7);\n-}\n-\n-int\n-m16_nsimm8_8 (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  return m16_check_op (op, -0x7f << 3, 0x80 << 3, 7);\n-}\n-\f\n /* The cost of loading values from the constant pool.  It should be\n    larger than the cost of any constant we want to synthesize inline.  */\n #define CONSTANT_POOL_COST COSTS_N_INSNS (TARGET_MIPS16 ? 4 : 8)"}, {"sha": "6b0e6866e26c163642d0699181de54b5b157bde7", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 39, "deletions": 74, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=cb2558bc95658155c76e1468ed4db64359452dc2", "patch": "@@ -1166,32 +1166,23 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*add<mode>3_mips16\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=ks,d,d,d,d\")\n-\t(plus:GPR (match_operand:GPR 1 \"register_operand\" \"ks,ks,0,d,d\")\n-\t\t  (match_operand:GPR 2 \"arith_operand\" \"Q,Q,Q,O,d\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=ks,ks,d,d,d,d,d,d,d\")\n+\t(plus:GPR (match_operand:GPR 1 \"register_operand\" \"ks,ks,ks,ks,0,0,d,d,d\")\n+\t\t  (match_operand:GPR 2 \"arith_operand\" \"Usd8,Q,Uuw<si8_di5>,Q,Usb<si8_di5>,Q,Usb4,O,d\")))]\n   \"TARGET_MIPS16\"\n   \"@\n     <d>addiu\\t%0,%2\n+    <d>addiu\\t%0,%2\n+    <d>addiu\\t%0,%1,%2\n     <d>addiu\\t%0,%1,%2\n     <d>addiu\\t%0,%2\n+    <d>addiu\\t%0,%2\n+    <d>addiu\\t%0,%1,%2\n     <d>addiu\\t%0,%1,%2\n     <d>addu\\t%0,%1,%2\"\n   [(set_attr \"alu_type\" \"add\")\n    (set_attr \"mode\" \"<MODE>\")\n-   (set_attr_alternative \"length\"\n-\t\t[(if_then_else (match_operand 2 \"m16_simm8_8\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))\n-\t\t (if_then_else (match_operand 2 \"m16_uimm<si8_di5>_4\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))\n-\t\t (if_then_else (match_operand 2 \"m16_simm<si8_di5>_1\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))\n-\t\t (if_then_else (match_operand 2 \"m16_simm4_1\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))\n-\t\t (const_int 4)])])\n+   (set_attr \"extended_mips16\" \"no,yes,no,yes,no,yes,no,yes,no\")])\n \n ;; On the mips16, we can sometimes split an add of a constant which is\n ;; a 4 byte instruction into two adds which are both 2 byte\n@@ -3009,7 +3000,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*xor<mode>3\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=!u,d,d\")\n \t(xor:GPR (match_operand:GPR 1 \"register_operand\" \"%0,d,d\")\n \t\t (match_operand:GPR 2 \"uns_arith_operand\" \"!u,d,K\")))]\n@@ -3022,23 +3013,19 @@\n    (set_attr \"compression\" \"micromips,*,*\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d,t,t\")\n-\t(xor:GPR (match_operand:GPR 1 \"register_operand\" \"%0,d,d\")\n-\t\t (match_operand:GPR 2 \"uns_arith_operand\" \"d,K,d\")))]\n+(define_insn \"*xor<mode>3_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,t,t,t\")\n+\t(xor:GPR (match_operand:GPR 1 \"register_operand\" \"%0,d,d,d\")\n+\t\t (match_operand:GPR 2 \"uns_arith_operand\" \"d,Uub8,K,d\")))]\n   \"TARGET_MIPS16\"\n   \"@\n    xor\\t%0,%2\n    cmpi\\t%1,%2\n+   cmpi\\t%1,%2\n    cmp\\t%1,%2\"\n   [(set_attr \"alu_type\" \"xor\")\n    (set_attr \"mode\" \"<MODE>\")\n-   (set_attr_alternative \"length\"\n-\t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))\n-\t\t (const_int 4)])])\n+   (set_attr \"extended_mips16\" \"no,no,yes,no\")])\n \n (define_insn \"*nor<mode>3\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n@@ -5294,9 +5281,9 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*<optab>si3_mips16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(any_shift:SI (match_operand:SI 1 \"register_operand\" \"0,d\")\n-\t\t      (match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n+\t(any_shift:SI (match_operand:SI 1 \"register_operand\" \"0,d,d\")\n+\t\t      (match_operand:SI 2 \"arith_operand\" \"d,Uib3,I\")))]\n   \"TARGET_MIPS16\"\n {\n   if (which_alternative == 0)\n@@ -5307,18 +5294,14 @@\n }\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"SI\")\n-   (set_attr_alternative \"length\"\n-\t\t[(const_int 4)\n-\t\t (if_then_else (match_operand 2 \"m16_uimm3_b\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))])])\n+   (set_attr \"extended_mips16\" \"no,no,yes\")])\n \n ;; We need separate DImode MIPS16 patterns because of the irregularity\n ;; of right shifts.\n (define_insn \"*ashldi3_mips16\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"0,d\")\n-\t\t   (match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n+\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"0,d,d\")\n+\t\t   (match_operand:SI 2 \"arith_operand\" \"d,Uib3,I\")))]\n   \"TARGET_64BIT && TARGET_MIPS16\"\n {\n   if (which_alternative == 0)\n@@ -5329,16 +5312,12 @@\n }\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"DI\")\n-   (set_attr_alternative \"length\"\n-\t\t[(const_int 4)\n-\t\t (if_then_else (match_operand 2 \"m16_uimm3_b\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))])])\n+   (set_attr \"extended_mips16\" \"no,no,yes\")])\n \n (define_insn \"*ashrdi3_mips16\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-\t\t     (match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0,0\")\n+\t\t     (match_operand:SI 2 \"arith_operand\" \"d,Uib3,I\")))]\n   \"TARGET_64BIT && TARGET_MIPS16\"\n {\n   if (CONST_INT_P (operands[2]))\n@@ -5348,16 +5327,12 @@\n }\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"DI\")\n-   (set_attr_alternative \"length\"\n-\t\t[(const_int 4)\n-\t\t (if_then_else (match_operand 2 \"m16_uimm3_b\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))])])\n+   (set_attr \"extended_mips16\" \"no,no,yes\")])\n \n (define_insn \"*lshrdi3_mips16\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0\")\n-\t\t     (match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0,0,0\")\n+\t\t     (match_operand:SI 2 \"arith_operand\" \"d,Uib3,I\")))]\n   \"TARGET_64BIT && TARGET_MIPS16\"\n {\n   if (CONST_INT_P (operands[2]))\n@@ -5367,11 +5342,7 @@\n }\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"mode\" \"DI\")\n-   (set_attr_alternative \"length\"\n-\t\t[(const_int 4)\n-\t\t (if_then_else (match_operand 2 \"m16_uimm3_b\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))])])\n+   (set_attr \"extended_mips16\" \"no,no,yes\")])\n \n ;; On the mips16, we can split a 4 byte shift into 2 2 byte shifts.\n \n@@ -5756,18 +5727,14 @@\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n \n (define_insn \"*slt<u>_<GPR:mode><GPR2:mode>_mips16\"\n-  [(set (match_operand:GPR2 0 \"register_operand\" \"=t,t\")\n-\t(any_lt:GPR2 (match_operand:GPR 1 \"register_operand\" \"d,d\")\n-\t\t     (match_operand:GPR 2 \"arith_operand\" \"d,I\")))]\n+  [(set (match_operand:GPR2 0 \"register_operand\" \"=t,t,t\")\n+\t(any_lt:GPR2 (match_operand:GPR 1 \"register_operand\" \"d,d,d\")\n+\t\t     (match_operand:GPR 2 \"arith_operand\" \"d,Uub8,I\")))]\n   \"TARGET_MIPS16\"\n   \"slt<u>\\t%1,%2\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<GPR:MODE>\")\n-   (set_attr_alternative \"length\"\n-\t\t[(const_int 4)\n-\t\t (if_then_else (match_operand 2 \"m16_uimm8_1\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))])])\n+   (set_attr \"extended_mips16\" \"no,no,yes\")])\n \n (define_insn \"*sle<u>_<GPR:mode><GPR2:mode>\"\n   [(set (match_operand:GPR2 0 \"register_operand\" \"=d\")\n@@ -5782,19 +5749,17 @@\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n \n (define_insn \"*sle<u>_<GPR:mode><GPR2:mode>_mips16\"\n-  [(set (match_operand:GPR2 0 \"register_operand\" \"=t\")\n-\t(any_le:GPR2 (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t     (match_operand:GPR 2 \"sle_operand\" \"\")))]\n+  [(set (match_operand:GPR2 0 \"register_operand\" \"=t,t\")\n+\t(any_le:GPR2 (match_operand:GPR 1 \"register_operand\" \"d,d\")\n+\t\t     (match_operand:GPR 2 \"sle_operand\" \"Udb8,i\")))]\n   \"TARGET_MIPS16\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n   return \"slt<u>\\t%1,%2\";\n }\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<GPR:MODE>\")\n-   (set (attr \"length\") (if_then_else (match_operand 2 \"m16_uimm8_m1_1\")\n-\t\t\t\t      (const_int 4)\n-\t\t\t\t      (const_int 8)))])\n+   (set_attr \"extended_mips16\" \"no,yes\")])\n \f\n ;;\n ;;  ...................."}, {"sha": "e94b49c1d0eae67acd6121e07447dca9884c6cc4", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2558bc95658155c76e1468ed4db64359452dc2/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=cb2558bc95658155c76e1468ed4db64359452dc2", "patch": "@@ -150,6 +150,10 @@\n   (and (match_code \"const_int\")\n        (match_test \"mips_unsigned_immediate_p (INTVAL (op) + 1, 7, 0)\")))\n \n+(define_predicate \"db8_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_unsigned_immediate_p (INTVAL (op) + 1, 8, 0)\")))\n+\n (define_predicate \"ib3_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"mips_unsigned_immediate_p (INTVAL (op) - 1, 3, 0)\")))\n@@ -158,10 +162,26 @@\n   (and (match_code \"const_int\")\n        (match_test \"mips_signed_immediate_p (INTVAL (op), 4, 0)\")))\n \n+(define_predicate \"sb5_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_signed_immediate_p (INTVAL (op), 5, 0)\")))\n+\n+(define_predicate \"sb8_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_signed_immediate_p (INTVAL (op), 8, 0)\")))\n+\n+(define_predicate \"sd8_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_signed_immediate_p (INTVAL (op), 8, 3)\")))\n+\n (define_predicate \"ub4_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"mips_unsigned_immediate_p (INTVAL (op), 4, 0)\")))\n \n+(define_predicate \"ub8_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_unsigned_immediate_p (INTVAL (op), 8, 0)\")))\n+\n (define_predicate \"uh4_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"mips_unsigned_immediate_p (INTVAL (op), 4, 1)\")))\n@@ -178,6 +198,10 @@\n   (and (match_code \"const_int\")\n        (match_test \"mips_unsigned_immediate_p (INTVAL (op), 6, 2)\")))\n \n+(define_predicate \"uw8_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"mips_unsigned_immediate_p (INTVAL (op), 8, 2)\")))\n+\n (define_predicate \"addiur2_operand\"\n   (and (match_code \"const_int\")\n \t(ior (match_test \"INTVAL (op) == -1\")"}]}