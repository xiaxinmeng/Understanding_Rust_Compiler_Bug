{"sha": "4c57e57b370333ae30feba624ab9caa69a33e15c", "node_id": "C_kwDOANBUbNoAKDRjNTdlNTdiMzcwMzMzYWUzMGZlYmE2MjRhYjljYWE2OWEzM2UxNWM", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-11T17:46:01Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-12T10:18:40Z"}, "message": "[range-ops] Add ability to represent open intervals in frange.\n\nCurrently we represent < and > with a closed interval.  So < 3.0 is\nrepresented as [-INF, +3.0].  This means 3.0 is included in the range,\nand though not ideal, is conservatively correct.  Jakub has found a\ncouple cases where properly representing < and > would help\noptimizations and tests, and this patch allows representing open\nintervals with real_nextafter.\n\nThere are a few caveats.\n\nFirst, we leave MODE_COMPOSITE_P types pessimistically as a closed interval.\n\nSecond, for -ffinite-math-only, real_nextafter will saturate the\nmaximum representable number into +INF.  However, this will still do\nthe right thing, as frange::set() will crop things appropriately.\n\nFinally, and most frustratingly, representing < and > -+0.0 is\nproblematic because we flush denormals to zero.  Let me explain...\n\nreal_nextafter(+0.0, +INF) gives 0x0.8p-148 as expected, but setting a\nrange to this value yields [+0.0, 0x0.8p-148] because of the flushing.\n\nOn the other hand, real_nextafter(+0.0, -INF) (surprisingly) gives\n-0.0.8p-148, but setting a range to that value yields [-0.0x8p-148,\n-0.0].  I say surprising, because according to cppreference.com,\nstd::nextafter(+0.0, -INF) should give -0.0.  But that's neither here\nnor there because our flushing denormals to zero prevents us from even\nrepresenting ranges involving small values around 0.0.  We ultimately\nend up with ranges looking like this:\n\n\t> +0.0\t\t=> [+0.0, INF]\n\t> -0.0\t\t=> [+0.0, INF]\n\t< +0.0\t\t=> [-INF, -0.0]\n\t< -0.0\t\t=> [-INF, -0.0]\n\nI suppose this is no worse off that what we had before with closed\nintervals.  One could even argue that we're better because we at least\nhave the right sign now ;-).\n\ngcc/ChangeLog:\n\n\t* range-op-float.cc (build_lt): Adjust with frange_nextafter\n\tinstead of default to a closed range.\n\t(build_gt): Same.", "tree": {"sha": "f8d0699b3ab0aa15ef8435e07e2299a63c59fde9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8d0699b3ab0aa15ef8435e07e2299a63c59fde9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c57e57b370333ae30feba624ab9caa69a33e15c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c57e57b370333ae30feba624ab9caa69a33e15c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c57e57b370333ae30feba624ab9caa69a33e15c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c57e57b370333ae30feba624ab9caa69a33e15c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a193e9df82917eaf440a20f99a3febe91dcb5fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a193e9df82917eaf440a20f99a3febe91dcb5fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a193e9df82917eaf440a20f99a3febe91dcb5fe"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "53a0928c6aa9193c0bdd08433e11e679f3d40be5", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c57e57b370333ae30feba624ab9caa69a33e15c/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c57e57b370333ae30feba624ab9caa69a33e15c/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=4c57e57b370333ae30feba624ab9caa69a33e15c", "patch": "@@ -381,9 +381,17 @@ build_lt (frange &r, tree type, const frange &val)\n \tr.set_undefined ();\n       return false;\n     }\n-  // We only support closed intervals.\n+\n   REAL_VALUE_TYPE ninf = frange_val_min (type);\n-  r.set (type, ninf, val.upper_bound ());\n+  REAL_VALUE_TYPE prev = val.upper_bound ();\n+  machine_mode mode = TYPE_MODE (type);\n+  // Default to the conservatively correct closed ranges for\n+  // MODE_COMPOSITE_P, otherwise use nextafter.  Note that for\n+  // !HONOR_INFINITIES, nextafter will yield -INF, but frange::set()\n+  // will crop the range appropriately.\n+  if (!MODE_COMPOSITE_P (mode))\n+    frange_nextafter (mode, prev, ninf);\n+  r.set (type, ninf, prev);\n   return true;\n }\n \n@@ -424,9 +432,16 @@ build_gt (frange &r, tree type, const frange &val)\n       return false;\n     }\n \n-  // We only support closed intervals.\n   REAL_VALUE_TYPE inf = frange_val_max (type);\n-  r.set (type, val.lower_bound (), inf);\n+  REAL_VALUE_TYPE next = val.lower_bound ();\n+  machine_mode mode = TYPE_MODE (type);\n+  // Default to the conservatively correct closed ranges for\n+  // MODE_COMPOSITE_P, otherwise use nextafter.  Note that for\n+  // !HONOR_INFINITIES, nextafter will yield +INF, but frange::set()\n+  // will crop the range appropriately.\n+  if (!MODE_COMPOSITE_P (mode))\n+    frange_nextafter (mode, next, inf);\n+  r.set (type, next, inf);\n   return true;\n }\n "}]}