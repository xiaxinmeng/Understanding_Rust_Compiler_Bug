{"sha": "414d23ae18deaae675fe45cd997e71ede2f6af94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0ZDIzYWUxOGRlYWFlNjc1ZmU0NWNkOTk3ZTcxZWRlMmY2YWY5NA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-11-20T19:49:53Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-11-20T19:49:53Z"}, "message": "Makefile.in (RUN_GEN, [...]): New variables.\n\n\t* Makefile.in (RUN_GEN, VALGRIND_DRIVER_DEFINES): New variables.\n\t(DRIVER_DEFINES): Add $(VALGRIND_DRIVER_DEFINES).\n\t(executing gencheck, genconfigs, genconditions, genflags,\n\tgencodes, genconstants, genemit, genrecog, genopinit, genextract,\n\tgenpeep, genattr, genattrtab, genoutput, gengenrtl, genpreds,\n\tgengtype, genprotos): Prepend $(RUN_GEN).\n\t* configure.in: Move host compiler tests before --enable-checking\n\ttests.\n\t(--enable-checking=valgrind): New.\n\t* config.in, configure: Regenerate.\n\t* cppfiles.c [!ENABLE_VALGRIND_CHECKING] (VALGRIND_DISCARD):\n\tDefine as empty.\n\t(read_include_file): When doing the mmap+1 trick,\n\tvalgrind-annotate the byte after the mmap:ed area as readable.\n\t(purge_cache): Remove above annotation.\n\t* gcc.c (execute) [ENABLE_VALGRIND_CHECKING]: Arrange to prepend\n\tVALGRIND_PATH -q to each command.\n\nFrom-SVN: r59309", "tree": {"sha": "9eafda11516ee784c63faf8b744d44153d2c5e6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eafda11516ee784c63faf8b744d44153d2c5e6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/414d23ae18deaae675fe45cd997e71ede2f6af94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414d23ae18deaae675fe45cd997e71ede2f6af94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/414d23ae18deaae675fe45cd997e71ede2f6af94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414d23ae18deaae675fe45cd997e71ede2f6af94/comments", "author": null, "committer": null, "parents": [{"sha": "3ba2436a67f611be43fc02a1f400a69a95088695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ba2436a67f611be43fc02a1f400a69a95088695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ba2436a67f611be43fc02a1f400a69a95088695"}], "stats": {"total": 2435, "additions": 1331, "deletions": 1104}, "files": [{"sha": "3622be4ada366eb0eebea5e95a14669d28480b5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=414d23ae18deaae675fe45cd997e71ede2f6af94", "patch": "@@ -1,3 +1,23 @@\n+2002-11-20  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* Makefile.in (RUN_GEN, VALGRIND_DRIVER_DEFINES): New variables.\n+\t(DRIVER_DEFINES): Add $(VALGRIND_DRIVER_DEFINES).\n+\t(executing gencheck, genconfigs, genconditions, genflags,\n+\tgencodes, genconstants, genemit, genrecog, genopinit, genextract,\n+\tgenpeep, genattr, genattrtab, genoutput, gengenrtl, genpreds,\n+\tgengtype, genprotos): Prepend $(RUN_GEN).\n+\t* configure.in: Move host compiler tests before --enable-checking\n+\ttests.\n+\t(--enable-checking=valgrind): New.\n+\t* config.in, configure: Regenerate.\n+\t* cppfiles.c [!ENABLE_VALGRIND_CHECKING] (VALGRIND_DISCARD):\n+\tDefine as empty.\n+\t(read_include_file): When doing the mmap+1 trick,\n+\tvalgrind-annotate the byte after the mmap:ed area as readable.\n+\t(purge_cache): Remove above annotation.\n+\t* gcc.c (execute) [ENABLE_VALGRIND_CHECKING]: Arrange to prepend\n+\tVALGRIND_PATH -q to each command.\n+\n 2002-11-20  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* recog.c (constrain_operands): Prefer exact match over reloadable"}, {"sha": "1e9f141fb3c55878b0fbfef5ae5d810e542431e4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=414d23ae18deaae675fe45cd997e71ede2f6af94", "patch": "@@ -96,6 +96,10 @@ STRICT2_WARN = -Wtraditional -pedantic -Wno-long-long\n # \"extern\" tags in header files.\n NOCOMMON_FLAG = @nocommon_flag@\n \n+# These are set by --enable-checking=valgrind.\n+RUN_GEN = @valgrind_command@\n+VALGRIND_DRIVER_DEFINES = @valgrind_path_defines@\n+\n # This is how we control whether or not the additional warnings are applied.\n .-warn = $(STRICT_WARN)\n GCC_WARN_CFLAGS = $(LOOSE_WARN) $($(@D)-warn) $(NOCOMMON_FLAG)\n@@ -1260,6 +1264,7 @@ DRIVER_DEFINES = \\\n   -DDEFAULT_TARGET_MACHINE=\\\"$(target_alias)\\\" \\\n   -DSTANDARD_BINDIR_PREFIX=\\\"$(bindir)/\\\" \\\n   -DTOOLDIR_BASE_PREFIX=\\\"$(unlibsubdir)/../\\\" \\\n+  $(VALGRIND_DRIVER_DEFINES) \\\n   `test \"X$${SHLIB_LINK}\" = \"X\" || test \"@enable_shared@\" != \"yes\" || echo \"-DENABLE_SHARED_LIBGCC\"` \\\n   `test \"X$${SHLIB_MULTILIB}\" = \"X\" || echo \"-DNO_SHARED_LIBGCC_MULTILIB\"`\n \n@@ -1282,7 +1287,7 @@ cppspec.o: cppspec.c $(CONFIG_H) $(SYSTEM_H) $(GCC_H)\n \n tree-check.h: s-check ; @true\n s-check : gencheck$(build_exeext) $(srcdir)/move-if-change\n-\t./gencheck$(build_exeext) > tmp-check.h\n+\t$(RUN_GEN) ./gencheck$(build_exeext) > tmp-check.h\n \t$(SHELL) $(srcdir)/move-if-change tmp-check.h tree-check.h\n \t$(STAMP) s-check\n \n@@ -1690,13 +1695,13 @@ mips-tdump.o : mips-tdump.c $(CONFIG_H) $(RTL_H) $(SYSTEM_H)\n \n insn-config.h: s-config ; @true\n s-config : $(md_file) genconfig$(build_exeext) $(srcdir)/move-if-change\n-\t./genconfig$(build_exeext) $(md_file) > tmp-config.h\n+\t$(RUN_GEN) ./genconfig$(build_exeext) $(md_file) > tmp-config.h\n \t$(SHELL) $(srcdir)/move-if-change tmp-config.h insn-config.h\n \t$(STAMP) s-config\n \n insn-conditions.c: s-conditions ; @true\n s-conditions : $(md_file) genconditions$(build_exeext) $(srcdir)/move-if-change\n-\t./genconditions$(build_exeext) $(md_file) > tmp-conditions.c\n+\t$(RUN_GEN) ./genconditions$(build_exeext) $(md_file) > tmp-conditions.c\n \t$(SHELL) $(srcdir)/move-if-change tmp-conditions.c insn-conditions.c\n \t$(STAMP) s-conditions\n \n@@ -1711,19 +1716,19 @@ dummy-conditions.o : dummy-conditions.c $(HCONFIG_H) $(SYSTEM_H) gensupport.h\n \n insn-flags.h: s-flags ; @true\n s-flags : $(md_file) genflags$(build_exeext) $(srcdir)/move-if-change\n-\t./genflags$(build_exeext) $(md_file) > tmp-flags.h\n+\t$(RUN_GEN) ./genflags$(build_exeext) $(md_file) > tmp-flags.h\n \t$(SHELL) $(srcdir)/move-if-change tmp-flags.h insn-flags.h\n \t$(STAMP) s-flags\n \n insn-codes.h: s-codes ; @true\n s-codes : $(md_file) gencodes$(build_exeext) $(srcdir)/move-if-change\n-\t./gencodes$(build_exeext) $(md_file) > tmp-codes.h\n+\t$(RUN_GEN) ./gencodes$(build_exeext) $(md_file) > tmp-codes.h\n \t$(SHELL) $(srcdir)/move-if-change tmp-codes.h insn-codes.h\n \t$(STAMP) s-codes\n \n insn-constants.h: s-constants ; @true\n s-constants : $(md_file) genconstants$(build_exeext) $(srcdir)/move-if-change\n-\t./genconstants$(build_exeext) $(md_file) > tmp-constants.h\n+\t$(RUN_GEN) ./genconstants$(build_exeext) $(md_file) > tmp-constants.h\n \t$(SHELL) $(srcdir)/move-if-change tmp-constants.h insn-constants.h\n \t$(STAMP) s-constants\n \n@@ -1735,7 +1740,7 @@ insn-emit.o : insn-emit.c $(CONFIG_H) $(RTL_H) $(EXPR_H) real.h output.h \\\n \n insn-emit.c: s-emit ; @true\n s-emit : $(md_file) genemit$(build_exeext) $(srcdir)/move-if-change\n-\t./genemit$(build_exeext) $(md_file) > tmp-emit.c\n+\t$(RUN_GEN) ./genemit$(build_exeext) $(md_file) > tmp-emit.c\n \t$(SHELL) $(srcdir)/move-if-change tmp-emit.c insn-emit.c\n \t$(STAMP) s-emit\n \n@@ -1747,7 +1752,7 @@ insn-recog.o : insn-recog.c $(CONFIG_H) $(RTL_H) insn-config.h $(RECOG_H) \\\n \n insn-recog.c: s-recog ; @true\n s-recog : $(md_file) genrecog$(build_exeext) $(srcdir)/move-if-change\n-\t./genrecog$(build_exeext) $(md_file) > tmp-recog.c\n+\t$(RUN_GEN) ./genrecog$(build_exeext) $(md_file) > tmp-recog.c\n \t$(SHELL) $(srcdir)/move-if-change tmp-recog.c insn-recog.c\n \t$(STAMP) s-recog\n \n@@ -1758,7 +1763,7 @@ insn-opinit.o : insn-opinit.c $(CONFIG_H) $(RTL_H) \\\n \n insn-opinit.c: s-opinit ; @true\n s-opinit : $(md_file) genopinit$(build_exeext) $(srcdir)/move-if-change\n-\t./genopinit$(build_exeext) $(md_file) > tmp-opinit.c\n+\t$(RUN_GEN) ./genopinit$(build_exeext) $(md_file) > tmp-opinit.c\n \t$(SHELL) $(srcdir)/move-if-change tmp-opinit.c insn-opinit.c\n \t$(STAMP) s-opinit\n \n@@ -1769,7 +1774,7 @@ insn-extract.o : insn-extract.c $(CONFIG_H) $(RTL_H) $(SYSTEM_H) toplev.h \\\n \n insn-extract.c: s-extract ; @true\n s-extract : $(md_file) genextract$(build_exeext) $(srcdir)/move-if-change\n-\t./genextract$(build_exeext) $(md_file) > tmp-extract.c\n+\t$(RUN_GEN) ./genextract$(build_exeext) $(md_file) > tmp-extract.c\n \t$(SHELL) $(srcdir)/move-if-change tmp-extract.c insn-extract.c\n \t$(STAMP) s-extract\n \n@@ -1780,7 +1785,7 @@ insn-peep.o : insn-peep.c $(CONFIG_H) $(RTL_H) $(REGS_H) output.h real.h \\\n \n insn-peep.c: s-peep ; @true\n s-peep : $(md_file) genpeep$(build_exeext) $(srcdir)/move-if-change\n-\t./genpeep$(build_exeext) $(md_file) > tmp-peep.c\n+\t$(RUN_GEN) ./genpeep$(build_exeext) $(md_file) > tmp-peep.c\n \t$(SHELL) $(srcdir)/move-if-change tmp-peep.c insn-peep.c\n \t$(STAMP) s-peep\n \n@@ -1792,13 +1797,13 @@ insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(RTL_H) $(REGS_H) real.h \\\n \n insn-attr.h: s-attr ; @true\n s-attr : $(md_file) genattr$(build_exeext) $(srcdir)/move-if-change\n-\t./genattr$(build_exeext) $(md_file) > tmp-attr.h\n+\t$(RUN_GEN) ./genattr$(build_exeext) $(md_file) > tmp-attr.h\n \t$(SHELL) $(srcdir)/move-if-change tmp-attr.h insn-attr.h\n \t$(STAMP) s-attr\n \n insn-attrtab.c: s-attrtab ; @true\n s-attrtab : $(md_file) genattrtab$(build_exeext) $(srcdir)/move-if-change\n-\t./genattrtab$(build_exeext) $(md_file) > tmp-attrtab.c\n+\t$(RUN_GEN) ./genattrtab$(build_exeext) $(md_file) > tmp-attrtab.c\n \t$(SHELL) $(srcdir)/move-if-change tmp-attrtab.c insn-attrtab.c\n \t$(STAMP) s-attrtab\n \n@@ -1811,7 +1816,7 @@ insn-output.o : insn-output.c $(CONFIG_H) $(RTL_H) $(GGC_H) $(REGS_H) real.h \\\n \n insn-output.c: s-output ; @true\n s-output : $(md_file) genoutput$(build_exeext) $(srcdir)/move-if-change\n-\t./genoutput$(build_exeext) $(md_file) > tmp-output.c\n+\t$(RUN_GEN) ./genoutput$(build_exeext) $(md_file) > tmp-output.c\n \t$(SHELL) $(srcdir)/move-if-change tmp-output.c insn-output.c\n \t$(STAMP) s-output\n \n@@ -1820,16 +1825,16 @@ genrtl.c genrtl.h : s-genrtl\n \t@true\t# force gnu make to recheck modification times.\n \n s-genrtl: gengenrtl$(build_exeext) $(srcdir)/move-if-change $(RTL_BASE_H)\n-\t./gengenrtl$(build_exeext) -h > tmp-genrtl.h\n+\t$(RUN_GEN) ./gengenrtl$(build_exeext) -h > tmp-genrtl.h\n \t$(SHELL) $(srcdir)/move-if-change tmp-genrtl.h genrtl.h\n-\t./gengenrtl$(build_exeext) > tmp-genrtl.c\n+\t$(RUN_GEN) ./gengenrtl$(build_exeext) > tmp-genrtl.c\n \t$(SHELL) $(srcdir)/move-if-change tmp-genrtl.c genrtl.c\n \t$(STAMP) s-genrtl\n \n tm-preds.h: s-preds; @true\n \n s-preds: genpreds$(build_exeext) $(srcdir)/move-if-change\n-\t./genpreds$(build_exeext) > tmp-preds.h\n+\t$(RUN_GEN) ./genpreds$(build_exeext) > tmp-preds.h\n \t$(SHELL) $(srcdir)/move-if-change tmp-preds.h tm-preds.h\n \t$(STAMP) s-preds\n \n@@ -1894,7 +1899,7 @@ gtyp-gen.h: Makefile\n \t$(SHELL) $(srcdir)/move-if-change tmp-gtyp.h gtyp-gen.h \n \n s-gtype: gengtype$(build_exeext) $(GTFILES)\n-\t./gengtype\n+\t$(RUN_GEN) ./gengtype\n \t$(STAMP) s-gtype\n \n #\f\n@@ -2402,7 +2407,7 @@ xsys-protos.h: $(GCC_PASSES) $(srcdir)/sys-protos.h deduced.h gen-protos$(build_\n \tmv tmp-fixtmp.c fixtmp.c\n \t$(GCC_FOR_TARGET) fixtmp.c -w -U__SIZE_TYPE__ -U__PTRDIFF_TYPE__ -U__WCHAR_TYPE__ -E \\\n \t  | sed -e 's/\t/ /g' -e 's/ *(/ (/g' -e 's/ [ ]*/ /g' -e 's/( )/()/' \\\n-\t  | ./gen-protos >xsys-protos.hT\n+\t  | $(RUN_GEN) ./gen-protos >xsys-protos.hT\n \tmv xsys-protos.hT xsys-protos.h\n \trm -rf fixtmp.c\n "}, {"sha": "6c6a74dffd987d220f0e2ec063f6731be2944315", "filename": "gcc/config.in", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=414d23ae18deaae675fe45cd997e71ede2f6af94", "patch": "@@ -279,6 +279,39 @@\n /* Define to enable the use of a default assembler. */\n #undef DEFAULT_ASSEMBLER\n \n+/* Define if your compiler understands volatile. */\n+#undef HAVE_VOLATILE\n+\n+/* Define if your compiler supports the `long double' type. */\n+#undef HAVE_LONG_DOUBLE\n+\n+/* Define if your compiler supports the `long long' type. */\n+#undef HAVE_LONG_LONG\n+\n+/* Define if your compiler supports the `__int64' type. */\n+#undef HAVE___INT64\n+\n+/* Define if the `_Bool' type is built-in. */\n+#undef HAVE__BOOL\n+\n+/* The number of bytes in type short */\n+#undef SIZEOF_SHORT\n+\n+/* The number of bytes in type int */\n+#undef SIZEOF_INT\n+\n+/* The number of bytes in type long */\n+#undef SIZEOF_LONG\n+\n+/* The number of bytes in type long long */\n+#undef SIZEOF_LONG_LONG\n+\n+/* The number of bytes in type __int64 */\n+#undef SIZEOF___INT64\n+\n+/* Define if the host execution character set is EBCDIC. */\n+#undef HOST_EBCDIC\n+\n /* Define if you want more run-time sanity checks.  This one gets a grab\n    bag of miscellaneous but relatively cheap checks. */\n #undef ENABLE_CHECKING\n@@ -307,6 +340,10 @@\n    every opportunity.  This is extremely expensive. */\n #undef ENABLE_GC_ALWAYS_COLLECT\n \n+/* Define if you want to run subprograms and generated programs\n+   through valgrind (a memory checker).  This is extremely expensive. */\n+#undef ENABLE_VALGRIND_CHECKING\n+\n /* Define if you want to use __cxa_atexit, rather than atexit, to\n    register C++ destructors for local statics and global objects.\n    This is essential for fully standards-compliant handling of\n@@ -317,39 +354,6 @@\n    character sets for source code. */\n #undef MULTIBYTE_CHARS\n \n-/* Define if your compiler understands volatile. */\n-#undef HAVE_VOLATILE\n-\n-/* Define if your compiler supports the `long double' type. */\n-#undef HAVE_LONG_DOUBLE\n-\n-/* Define if your compiler supports the `long long' type. */\n-#undef HAVE_LONG_LONG\n-\n-/* Define if your compiler supports the `__int64' type. */\n-#undef HAVE___INT64\n-\n-/* Define if the `_Bool' type is built-in. */\n-#undef HAVE__BOOL\n-\n-/* The number of bytes in type short */\n-#undef SIZEOF_SHORT\n-\n-/* The number of bytes in type int */\n-#undef SIZEOF_INT\n-\n-/* The number of bytes in type long */\n-#undef SIZEOF_LONG\n-\n-/* The number of bytes in type long long */\n-#undef SIZEOF_LONG_LONG\n-\n-/* The number of bytes in type __int64 */\n-#undef SIZEOF___INT64\n-\n-/* Define if the host execution character set is EBCDIC. */\n-#undef HOST_EBCDIC\n-\n /* Always define this when using the GNU C Library */\n #undef _GNU_SOURCE\n "}, {"sha": "e6755f2de96c2ef03d91af693b3d100761a45e84", "filename": "gcc/configure", "status": "modified", "additions": 1108, "deletions": 975, "changes": 2083, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=414d23ae18deaae675fe45cd997e71ede2f6af94"}, {"sha": "d50bb392d918d9703cac2dfe0eb7bc8c3e26153c", "filename": "gcc/configure.in", "status": "modified", "additions": 96, "deletions": 76, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=414d23ae18deaae675fe45cd997e71ede2f6af94", "patch": "@@ -176,6 +176,82 @@ changequote([, ])dnl\n   fi\n fi\n \n+# Find the native compiler\n+AC_PROG_CC\n+AC_PROG_CC_C_O\n+# autoconf is lame and doesn't give us any substitution variable for this.\n+if eval \"test \\\"`echo '$ac_cv_prog_cc_'${ac_cc}_c_o`\\\" = no\"; then\n+  NO_MINUS_C_MINUS_O=yes\n+else\n+  OUTPUT_OPTION='-o $@'\n+fi\n+AC_SUBST(NO_MINUS_C_MINUS_O)\n+AC_SUBST(OUTPUT_OPTION)\n+\n+# See if GNAT has been installed\n+gcc_AC_PROG_GNAT\n+\n+AC_CACHE_CHECK(whether ${CC-cc} accepts -Wno-long-long,\n+ac_cv_prog_cc_no_long_long,\n+[save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"-Wno-long-long\"\n+AC_TRY_COMPILE(,,ac_cv_prog_cc_no_long_long=yes,\n+\t       ac_cv_prog_cc_no_long_long=no)\n+CFLAGS=\"$save_CFLAGS\"])\n+\n+if test x$have_gnat != xno ; then \n+AC_CACHE_CHECK(whether ${ADAC} accepts -Wno-long-long,\n+ac_cv_prog_adac_no_long_long,\n+[cat >conftest.adb <<EOF\n+procedure conftest is begin null; end conftest;\n+EOF\n+if $ADAC -Wno-long-long -c conftest.adb 1>&5 2>&5 ; then\n+  ac_cv_prog_adac_no_long_long=yes\n+else\n+  ac_cv_prog_adac_no_long_long=no\n+fi\n+rm -f conftest*])\n+else\n+  ac_cv_prog_adac_no_long_long=yes\n+fi\n+\n+strict1_warn=\n+if test $ac_cv_prog_cc_no_long_long = yes && \\\n+    test $ac_cv_prog_adac_no_long_long = yes ; then\n+  strict1_warn=\"-pedantic -Wno-long-long\"\n+fi\n+AC_SUBST(strict1_warn)\n+\n+AC_PROG_CPP\n+AC_C_INLINE\n+gcc_AC_C_VOLATILE\n+\n+gcc_AC_C_LONG_DOUBLE\n+gcc_AC_C_LONG_LONG\n+gcc_AC_C__BOOL\n+\n+# sizeof(char) is 1 by definition.\n+gcc_AC_COMPILE_CHECK_SIZEOF(short)\n+gcc_AC_COMPILE_CHECK_SIZEOF(int)\n+gcc_AC_COMPILE_CHECK_SIZEOF(long)\n+if test $ac_cv_c_long_long = yes; then\n+  gcc_AC_COMPILE_CHECK_SIZEOF(long long)\n+fi\n+if test $ac_cv_c___int64 = yes; then\n+  gcc_AC_COMPILE_CHECK_SIZEOF(__int64)\n+fi\n+\n+gcc_AC_C_CHARSET\n+\n+# If the native compiler is GCC, we can enable warnings even in stage1.  \n+# That's useful for people building cross-compilers, or just running a\n+# quick `make'.\n+warn_cflags=\n+if test \"x$GCC\" = \"xyes\"; then\n+  warn_cflags='$(GCC_WARN_CFLAGS)'\n+fi\n+AC_SUBST(warn_cflags)\n+\n # Determine whether or not multilibs are enabled.\n AC_ARG_ENABLE(multilib,\n [  --enable-multilib       enable library support for multiple ABIs],\n@@ -211,6 +287,7 @@ no)\t;;\n \t\trtl)\tac_rtl_checking=1 ;;\n \t\tgc)\tac_gc_checking=1 ;;\n \t\tgcac)\tac_gc_always_collect=1 ;;\n+\t\tvalgrind)\tac_checking_valgrind=1 ;;\n \t\t*)\tAC_MSG_ERROR(unknown check category $check) ;;\n \t\tesac\n \tdone\n@@ -256,6 +333,25 @@ if test x$ac_gc_always_collect != x ; then\n    paranoid mode, validating the entire heap and collecting garbage at\n    every opportunity.  This is extremely expensive.])\n fi\n+valgrind_path_defines=\n+valgrind_command=\n+if test x$ac_checking_valgrind != x ; then\n+  # It is certainly possible that there's valgrind but no valgrind.h.\n+  # GCC relies on making annotations so we must have both.\n+  AC_CHECK_HEADER(valgrind.h, have_valgrind_h=yes, have_valgrind_h=no)\n+  AM_PATH_PROG_WITH_TEST(valgrind_path, valgrind,\n+\t[$ac_dir/$ac_word --version | grep valgrind- >/dev/null 2>&1])\n+  if test \"x$valgrind_path\" = \"x\" || test $have_valgrind_h = no; then\n+\tAC_MSG_ERROR([*** Can't find both valgrind and valgrind.h])\n+  fi\n+  valgrind_path_defines=-DVALGRIND_PATH='\\\"'$valgrind_path'\\\"'\n+  valgrind_command=\"$valgrind_path -q\"\n+  AC_DEFINE(ENABLE_VALGRIND_CHECKING, 1,\n+[Define if you want to run subprograms and generated programs\n+   through valgrind (a memory checker).  This is extremely expensive.])\n+fi\n+AC_SUBST(valgrind_path_defines)\n+AC_SUBST(valgrind_command)\n \n # Enable code coverage collection\n AC_ARG_ENABLE(coverage,\n@@ -379,82 +475,6 @@ AC_CANONICAL_SYSTEM\n # Set program_transform_name\n AC_ARG_PROGRAM\n \n-# Find the native compiler\n-AC_PROG_CC\n-AC_PROG_CC_C_O\n-# autoconf is lame and doesn't give us any substitution variable for this.\n-if eval \"test \\\"`echo '$ac_cv_prog_cc_'${ac_cc}_c_o`\\\" = no\"; then\n-  NO_MINUS_C_MINUS_O=yes\n-else\n-  OUTPUT_OPTION='-o $@'\n-fi\n-AC_SUBST(NO_MINUS_C_MINUS_O)\n-AC_SUBST(OUTPUT_OPTION)\n-\n-# See if GNAT has been installed\n-gcc_AC_PROG_GNAT\n-\n-AC_CACHE_CHECK(whether ${CC-cc} accepts -Wno-long-long,\n-ac_cv_prog_cc_no_long_long,\n-[save_CFLAGS=\"$CFLAGS\"\n-CFLAGS=\"-Wno-long-long\"\n-AC_TRY_COMPILE(,,ac_cv_prog_cc_no_long_long=yes,\n-\t       ac_cv_prog_cc_no_long_long=no)\n-CFLAGS=\"$save_CFLAGS\"])\n-\n-if test x$have_gnat != xno ; then \n-AC_CACHE_CHECK(whether ${ADAC} accepts -Wno-long-long,\n-ac_cv_prog_adac_no_long_long,\n-[cat >conftest.adb <<EOF\n-procedure conftest is begin null; end conftest;\n-EOF\n-if $ADAC -Wno-long-long -c conftest.adb 1>&5 2>&5 ; then\n-  ac_cv_prog_adac_no_long_long=yes\n-else\n-  ac_cv_prog_adac_no_long_long=no\n-fi\n-rm -f conftest*])\n-else\n-  ac_cv_prog_adac_no_long_long=yes\n-fi\n-\n-strict1_warn=\n-if test $ac_cv_prog_cc_no_long_long = yes && \\\n-    test $ac_cv_prog_adac_no_long_long = yes ; then\n-  strict1_warn=\"-pedantic -Wno-long-long\"\n-fi\n-AC_SUBST(strict1_warn)\n-\n-AC_PROG_CPP\n-AC_C_INLINE\n-gcc_AC_C_VOLATILE\n-\n-gcc_AC_C_LONG_DOUBLE\n-gcc_AC_C_LONG_LONG\n-gcc_AC_C__BOOL\n-\n-# sizeof(char) is 1 by definition.\n-gcc_AC_COMPILE_CHECK_SIZEOF(short)\n-gcc_AC_COMPILE_CHECK_SIZEOF(int)\n-gcc_AC_COMPILE_CHECK_SIZEOF(long)\n-if test $ac_cv_c_long_long = yes; then\n-  gcc_AC_COMPILE_CHECK_SIZEOF(long long)\n-fi\n-if test $ac_cv_c___int64 = yes; then\n-  gcc_AC_COMPILE_CHECK_SIZEOF(__int64)\n-fi\n-\n-gcc_AC_C_CHARSET\n-\n-# If the native compiler is GCC, we can enable warnings even in stage1.  \n-# That's useful for people building cross-compilers, or just running a\n-# quick `make'.\n-warn_cflags=\n-if test \"x$GCC\" = \"xyes\"; then\n-  warn_cflags='$(GCC_WARN_CFLAGS)'\n-fi\n-AC_SUBST(warn_cflags)\n-\n # Stage specific cflags for build.\n stage1_cflags=\n case $build in"}, {"sha": "2e11912934ad9d2ba81bc6f92bda8532021799d6", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=414d23ae18deaae675fe45cd997e71ede2f6af94", "patch": "@@ -27,6 +27,12 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"intl.h\"\n #include \"mkdeps.h\"\n #include \"splay-tree.h\"\n+#ifdef ENABLE_VALGRIND_CHECKING\n+#include <valgrind.h>\n+#else\n+/* Avoid #ifdef:s when we can help it.  */\n+#define VALGRIND_DISCARD(x)\n+#endif\n \n #ifdef HAVE_MMAP_FILE\n # include <sys/mman.h>\n@@ -417,6 +423,11 @@ read_include_file (pfile, inc)\n \t  buf = (uchar *) mmap (0, size, PROT_READ, MAP_PRIVATE, inc->fd, 0);\n \t  if (buf == (uchar *) -1)\n \t    goto perror_fail;\n+\n+\t  /* We must tell Valgrind that the byte at buf[size] is actually\n+\t     readable.  Discard the handle to avoid handle leak.  */\n+\t  VALGRIND_DISCARD (VALGRIND_MAKE_READABLE (buf + size, 1));\n+\n \t  inc->mapped = 1;\n \t}\n       else\n@@ -497,7 +508,14 @@ purge_cache (inc)\n     {\n #if MMAP_THRESHOLD\n       if (inc->mapped)\n-\tmunmap ((PTR) inc->buffer, inc->st.st_size);\n+\t{\n+\t  /* Undo the previous annotation for the\n+\t     known-zero-byte-after-mmap.  Discard the handle to avoid\n+\t     handle leak.  */\n+\t  VALGRIND_DISCARD (VALGRIND_MAKE_NOACCESS (inc->buffer\n+\t\t\t\t\t\t    + inc->st.st_size, 1));\n+\t  munmap ((PTR) inc->buffer, inc->st.st_size);\n+\t}\n       else\n #endif\n \tfree ((PTR) inc->buffer);"}, {"sha": "c30851dfe179b98db0dc0bd21296a6412514ecfe", "filename": "gcc/gcc.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414d23ae18deaae675fe45cd997e71ede2f6af94/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=414d23ae18deaae675fe45cd997e71ede2f6af94", "patch": "@@ -2877,6 +2877,33 @@ execute ()\n #endif /* DEBUG */\n     }\n \n+#ifdef ENABLE_VALGRIND_CHECKING\n+  /* Run the each command through valgrind.  To simplifiy prepending the\n+     path to valgrind and the option \"-q\" (for quiet operation unless\n+     something triggers), we allocate a separate argv array.  */\n+\n+  for (i = 0; i < n_commands; i++)\n+    {\n+      const char **argv;\n+      int argc;\n+      int j;\n+\n+      for (argc = 0; commands[i].argv[argc] != NULL; argc++)\n+\t;\n+\n+      argv = alloca ((argc + 3) * sizeof (char *));\n+\n+      argv[0] = VALGRIND_PATH;\n+      argv[1] = \"-q\";\n+      for (j = 2; j < argc + 2; j++)\n+\targv[j] = commands[i].argv[j - 2];\n+      argv[j] = NULL;\n+\n+      commands[i].argv = argv;\n+      commands[i].prog = argv[0];\n+    }\n+#endif\n+\n   /* Run each piped subprocess.  */\n \n   for (i = 0; i < n_commands; i++)"}]}