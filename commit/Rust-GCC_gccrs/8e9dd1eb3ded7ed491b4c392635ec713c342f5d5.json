{"sha": "8e9dd1eb3ded7ed491b4c392635ec713c342f5d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5ZGQxZWIzZGVkN2VkNDkxYjRjMzkyNjM1ZWM3MTNjMzQyZjVkNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-08-02T19:14:25Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-08-02T19:14:25Z"}, "message": "builtins-1.c: Add macro helpers.\n\n\t* gcc.dg/builtins-1.c: Add macro helpers.  Add missing math\n\tbuiltins.  Move cases from builtins-4.c here.\n\n\t* gcc.dg/torture/builtin-math-1.c: New test taken from\n\tbits of gcc.dg/builtins-3.c, gcc.dg/builtins-5.c and also some\n\tadditional cases.\n\n\t* gcc.dg/builtins-3.c, gcc.dg/builtins-4.c, gcc.dg/builtins-5.c:\n\tDelete.\n\nFrom-SVN: r70108", "tree": {"sha": "7d3064a06ef5fd6d5fc401ba5d07e750ecd2e0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d3064a06ef5fd6d5fc401ba5d07e750ecd2e0eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e9dd1eb3ded7ed491b4c392635ec713c342f5d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9dd1eb3ded7ed491b4c392635ec713c342f5d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9dd1eb3ded7ed491b4c392635ec713c342f5d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9dd1eb3ded7ed491b4c392635ec713c342f5d5/comments", "author": null, "committer": null, "parents": [{"sha": "fd9aef9d180a377a8804a40a89284956f36f0016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9aef9d180a377a8804a40a89284956f36f0016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9aef9d180a377a8804a40a89284956f36f0016"}], "stats": {"total": 375, "additions": 191, "deletions": 184}, "files": [{"sha": "95a108dd47ede2d6507cb089f9816b9472922c93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9dd1eb3ded7ed491b4c392635ec713c342f5d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9dd1eb3ded7ed491b4c392635ec713c342f5d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e9dd1eb3ded7ed491b4c392635ec713c342f5d5", "patch": "@@ -1,3 +1,15 @@\n+2003-08-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-1.c: Add macro helpers.  Add missing math\n+\tbuiltins.  Move cases from builtins-4.c here.\n+\n+\t* gcc.dg/torture/builtin-math-1.c: New test taken from\n+\tbits of gcc.dg/builtins-3.c, gcc.dg/builtins-5.c and also some\n+\tadditional cases.\n+\t\n+\t* gcc.dg/builtins-3.c, gcc.dg/builtins-4.c, gcc.dg/builtins-5.c:\n+\tDelete.\n+\n 2003-08-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/9447"}, {"sha": "ae00082e0d41a4a73ec2ddafb5a9eb1c4f6f5545", "filename": "gcc/testsuite/gcc.dg/builtins-1.c", "status": "modified", "additions": 48, "deletions": 24, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9dd1eb3ded7ed491b4c392635ec713c342f5d5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9dd1eb3ded7ed491b4c392635ec713c342f5d5/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c?ref=8e9dd1eb3ded7ed491b4c392635ec713c342f5d5", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002  Free Software Foundation.\n+/* Copyright (C) 2002, 2003  Free Software Foundation.\n \n    Verify that all the __builtin_ math functions are recognized\n    by the compiler.\n@@ -8,27 +8,51 @@\n /* { dg-do compile } */\n /* { dg-final { scan-assembler-not \"__builtin_\" } } */\n \n-double test1(double x) { return __builtin_sqrt(x); }\n-double test2(double x) { return __builtin_cos(x); }\n-double test3(double x) { return __builtin_sin(x); }\n-double test4(double x) { return __builtin_exp(x); }\n-double test5(double x) { return __builtin_log(x); }\n-double test6(double x) { return __builtin_tan(x); }\n-double test7(double x) { return __builtin_atan(x); }\n-\n-float test1f(float x) { return __builtin_sqrtf(x); }\n-float test2f(float x) { return __builtin_cosf(x); }\n-float test3f(float x) { return __builtin_sinf(x); }\n-float test4f(float x) { return __builtin_expf(x); }\n-float test5f(float x) { return __builtin_logf(x); }\n-float test6f(float x) { return __builtin_tanf(x); }\n-float test7f(float x) { return __builtin_atanf(x); }\n-\n-long double test1l(long double x) { return __builtin_sqrtl(x); }\n-long double test2l(long double x) { return __builtin_cosl(x); }\n-long double test3l(long double x) { return __builtin_sinl(x); }\n-long double test4l(long double x) { return __builtin_expl(x); }\n-long double test5l(long double x) { return __builtin_logl(x); }\n-long double test6l(long double x) { return __builtin_tanl(x); }\n-long double test7l(long double x) { return __builtin_atanl(x); }\n+/* These helper macros ensure we also check the float and long double\n+   cases.  */\n \n+/* Test FP functions taking void.  */\n+#define FPTEST0(FN) \\\n+double test_##FN(void) { return __builtin_##FN(); } \\\n+float test_##FN##f(void) { return __builtin_##FN##f(); } \\\n+long double test_##FN##l(void) { return __builtin_##FN##l(); } \n+\n+/* Test FP functions taking one FP argument.  */\n+#define FPTEST1(FN) \\\n+double test_##FN(double x) { return __builtin_##FN(x); } \\\n+float test_##FN##f(float x) { return __builtin_##FN##f(x); } \\\n+long double test_##FN##l(long double x) { return __builtin_##FN##l(x); } \n+\n+/* Test FP functions taking one argument of a supplied type.  */\n+#define FPTEST1TYPE(FN, TYPE) \\\n+double test_##FN(TYPE x) { return __builtin_##FN(x); } \\\n+float test_##FN##f(TYPE x) { return __builtin_##FN##f(x); } \\\n+long double test_##FN##l(TYPE x) { return __builtin_##FN##l(x); } \n+\n+/* Test FP functions taking two FP arguments.  */\n+#define FPTEST2(FN) \\\n+double test_##FN(double x, double y) { return __builtin_##FN(x, y); } \\\n+float test_##FN##f(float x, float y) { return __builtin_##FN##f(x, y); } \\\n+long double test_##FN##l(long double x, long double y) { return __builtin_##FN##l(x, y); } \n+\n+/* Keep this list sorted alphabetically by function name.  */\n+FPTEST1     (atan)\n+FPTEST2     (atan2)\n+FPTEST1     (ceil)\n+FPTEST1     (cos)\n+FPTEST1     (exp)\n+FPTEST1     (fabs)\n+FPTEST1     (floor)\n+FPTEST2     (fmod)\n+FPTEST0     (huge_val)\n+FPTEST0     (inf)\n+FPTEST1     (log)\n+FPTEST1TYPE (nan, char *)\n+FPTEST1TYPE (nans, char *)\n+FPTEST1     (nearbyint)\n+FPTEST2     (pow)\n+FPTEST1     (round)\n+FPTEST1     (sin)\n+FPTEST1     (sqrt)\n+FPTEST1     (tan)\n+FPTEST1     (trunc)"}, {"sha": "4bab231a57138c69e2922e84e926db8c419bbf15", "filename": "gcc/testsuite/gcc.dg/builtins-3.c", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9aef9d180a377a8804a40a89284956f36f0016/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9aef9d180a377a8804a40a89284956f36f0016/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-3.c?ref=fd9aef9d180a377a8804a40a89284956f36f0016", "patch": "@@ -1,90 +0,0 @@\n-/* Copyright (C) 2002, 2003  Free Software Foundation.\n-\n-   Verify that built-in math function constant folding of constant\n-   arguments is correctly performed by the compiler.\n-\n-   Written by Roger Sayle, 16th August 2002.  */\n-\n-/* { dg-do link } */\n-/* { dg-options \"-O2 -ffast-math\" } */\n-\n-extern void link_error(void);\n-\n-int main()\n-{\n-  if (sqrt (0.0) != 0.0)\n-    link_error ();\n-\n-  if (sqrt (1.0) != 1.0)\n-    link_error ();\n-\n-  if (exp (0.0) != 1.0)\n-    link_error ();\n-\n-  if (log (1.0) != 0.0)\n-    link_error ();\n-\n-  if (sin (0.0) != 0.0)\n-    link_error ();\n-\n-  if (cos (0.0) != 1.0)\n-    link_error ();\n-\n-  if (tan (0.0) != 0.0)\n-    link_error ();\n-\n-  if (atan (0.0) != 0.0)\n-    link_error ();\n-\n-\n-  if (sqrtf (0.0f) != 0.0f)\n-    link_error ();\n-\n-  if (sqrtf (1.0f) != 1.0f)\n-    link_error ();\n-\n-  if (expf (0.0f) != 1.0f)\n-    link_error ();\n-\n-  if (logf (1.0f) != 0.0f)\n-    link_error ();\n-\n-  if (sinf (0.0f) != 0.0f)\n-    link_error ();\n-\n-  if (cosf (0.0f) != 1.0f)\n-    link_error ();\n-\n-  if (tanf (0.0f) != 0.0f)\n-    link_error ();\n-\n-  if (atanf (0.0f) != 0.0f)\n-    link_error ();\n-\n-  if (sqrtl (0.0l) != 0.0l)\n-    link_error ();\n-\n-  if (sqrtl (1.0l) != 1.0l)\n-    link_error ();\n-\n-  if (expl (0.0l) != 1.0l)\n-    link_error ();\n-\n-  if (logl (1.0l) != 0.0l)\n-    link_error ();\n-\n-  if (sinl (0.0l) != 0.0l)\n-    link_error ();\n-\n-  if (cosl (0.0l) != 1.0l)\n-    link_error ();\n-\n-  if (tanl (0.0l) != 0.0l)\n-    link_error ();\n-\n-  if (atanl (0.0) != 0.0l)\n-    link_error ();\n-\n-  return 0;\n-}\n-"}, {"sha": "55e2c917c2860d76f0509d7832d3c8f61c96870f", "filename": "gcc/testsuite/gcc.dg/builtins-4.c", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9aef9d180a377a8804a40a89284956f36f0016/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9aef9d180a377a8804a40a89284956f36f0016/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-4.c?ref=fd9aef9d180a377a8804a40a89284956f36f0016", "patch": "@@ -1,25 +0,0 @@\n-/* Copyright (C) 2003  Free Software Foundation.\n-\n-   Verify that all the binary __builtin_ math functions are\n-   recognized by the compiler.\n-\n-   Written by Roger Sayle, 6th February 2002.  */\n-\n-/* { dg-do compile } */\n-/* { dg-final { scan-assembler-not \"__builtin_\" } } */\n-\n-double test1(double x, double y) { return __builtin_pow(x,y); }\n-double test2(double x, double y) { return __builtin_atan2(x,y); }\n-double test3(double x, double y) { return __builtin_fmod(x,y); }\n-\n-float test1f(float x, float y) { return __builtin_powf(x,y); }\n-float test2f(float x, float y) { return __builtin_atan2f(x,y); }\n-float test3f(float x, float y) { return __builtin_fmodf(x,y); }\n-\n-long double test1l(long double x, long double y)\n-{ return __builtin_powl(x,y); }\n-long double test2l(long double x, long double y)\n-{ return __builtin_atan2l(x,y); }\n-long double test3l(long double x, long double y)\n-{ return __builtin_fmodl(x,y); }\n-"}, {"sha": "a056812446da8af728d5c69454b70a1eaa98cb1b", "filename": "gcc/testsuite/gcc.dg/builtins-5.c", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9aef9d180a377a8804a40a89284956f36f0016/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9aef9d180a377a8804a40a89284956f36f0016/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-5.c?ref=fd9aef9d180a377a8804a40a89284956f36f0016", "patch": "@@ -1,45 +0,0 @@\n-/* Copyright (C) 2003  Free Software Foundation.\n-\n-   Verify that built-in math function constant folding of constant\n-   arguments is correctly performed by the by the compiler.\n-\n-   Written by Roger Sayle, 20th February 2003.  */\n-\n-/* { dg-do link } */\n-/* { dg-options \"-O2\" } */\n-\n-extern void link_error(void);\n-\n-void test(double x)\n-{\n-  if (pow (x, 0.0) != 1.0)\n-    link_error ();\n-  if (pow (1.0, x) != 1.0)\n-    link_error ();\n-}\n-\n-void testf(float x)\n-{\n-  if (powf (x, 0.0f) != 1.0f)\n-    link_error ();\n-  if (powf (1.0f, x) != 1.0f)\n-    link_error ();\n-}\n-\n-void testl(long double x)\n-{\n-  if (powl (x, 0.0l) != 1.0l)\n-    link_error ();\n-  if (powl (1.0l, x) != 1.0l)\n-    link_error ();\n-}\n-\n-int main()\n-{\n-  test (0.0);\n-  testf (0.0f);\n-  testl (0.0l);\n-\n-  return 0;\n-}\n-"}, {"sha": "47b91d7e25d7e4aab3a8e8d6c0686b1bd2aad756", "filename": "gcc/testsuite/gcc.dg/torture/builtin-math-1.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e9dd1eb3ded7ed491b4c392635ec713c342f5d5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e9dd1eb3ded7ed491b4c392635ec713c342f5d5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-1.c?ref=8e9dd1eb3ded7ed491b4c392635ec713c342f5d5", "patch": "@@ -0,0 +1,131 @@\n+/* Copyright (C) 2002, 2003  Free Software Foundation.\n+\n+   Verify that built-in math function constant folding of constant\n+   arguments is correctly performed by the compiler.\n+\n+   Written by Roger Sayle, 16th August 2002.  */\n+\n+/* { dg-do link } */\n+\n+/* All references to link_error should go away at compile-time.  */\n+extern void link_error(void);\n+\n+void test (float f, double d, long double ld)\n+{\n+  if (sqrt (0.0) != 0.0)\n+    link_error ();\n+\n+  if (sqrt (1.0) != 1.0)\n+    link_error ();\n+\n+  if (exp (0.0) != 1.0)\n+    link_error ();\n+\n+  if (exp (1.0) <= 2.71 || exp (1.0) >= 2.72)\n+    link_error ();\n+\n+  if (log (1.0) != 0.0)\n+    link_error ();\n+\n+  if (sin (0.0) != 0.0)\n+    link_error ();\n+\n+  if (cos (0.0) != 1.0)\n+    link_error ();\n+\n+  if (tan (0.0) != 0.0)\n+    link_error ();\n+\n+  if (atan (0.0) != 0.0)\n+    link_error ();\n+\n+  if (4.0*atan (1.0) <= 3.14 || 4.0*atan (1.0) >= 3.15)\n+    link_error ();\n+\n+  if (pow (d, 0.0) != 1.0)\n+    link_error ();\n+\n+  if (pow (1.0, d) != 1.0)\n+    link_error ();\n+\n+\n+  if (sqrtf (0.0F) != 0.0F)\n+    link_error ();\n+\n+  if (sqrtf (1.0F) != 1.0F)\n+    link_error ();\n+\n+  if (expf (0.0F) != 1.0F)\n+    link_error ();\n+\n+  if (expf (1.0F) <= 2.71F || expf (1.0F) >= 2.72F)\n+    link_error ();\n+\n+  if (logf (1.0F) != 0.0F)\n+    link_error ();\n+\n+  if (sinf (0.0F) != 0.0F)\n+    link_error ();\n+\n+  if (cosf (0.0F) != 1.0F)\n+    link_error ();\n+\n+  if (tanf (0.0F) != 0.0F)\n+    link_error ();\n+\n+  if (atanf (0.0F) != 0.0F)\n+    link_error ();\n+\n+  if (4.0F*atanf (1.0F) <= 3.14F || 4.0F*atanf (1.0F) >= 3.15F)\n+    link_error ();\n+\n+  if (powf (f, 0.0F) != 1.0F)\n+    link_error ();\n+\n+  if (powf (1.0F, f) != 1.0F)\n+    link_error ();\n+\n+\n+  if (sqrtl (0.0L) != 0.0L)\n+    link_error ();\n+\n+  if (sqrtl (1.0L) != 1.0L)\n+    link_error ();\n+\n+  if (expl (0.0L) != 1.0L)\n+    link_error ();\n+\n+  if (expl (1.0L) <= 2.71L || expl (1.0L) >= 2.72L)\n+    link_error ();\n+\n+  if (logl (1.0L) != 0.0L)\n+    link_error ();\n+\n+  if (sinl (0.0L) != 0.0L)\n+    link_error ();\n+\n+  if (cosl (0.0L) != 1.0L)\n+    link_error ();\n+\n+  if (tanl (0.0L) != 0.0L)\n+    link_error ();\n+\n+  if (atanl (0.0) != 0.0L)\n+    link_error ();\n+\n+  if (4.0L*atanl (1.0L) <= 3.14L || 4.0L*atanl (1.0L) >= 3.15L)\n+    link_error ();\n+\n+  if (powl (ld, 0.0L) != 1.0L)\n+    link_error ();\n+\n+  if (powl (1.0L, ld) != 1.0L)\n+    link_error ();\n+}\n+\n+int main()\n+{\n+  test (3.0, 3.0F, 3.0L);\n+\n+  return 0;\n+}"}]}