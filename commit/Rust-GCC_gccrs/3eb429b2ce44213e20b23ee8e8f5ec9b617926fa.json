{"sha": "3eb429b2ce44213e20b23ee8e8f5ec9b617926fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ViNDI5YjJjZTQ0MjEzZTIwYjIzZWU4ZThmNWVjOWI2MTc5MjZmYQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2002-10-14T18:12:12Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2002-10-14T18:12:12Z"}, "message": "tree-inline.c (remap_block): All local class initialization flags go in the outermost scope.\n\n2002-10-14  Andrew Haley  <aph@redhat.com>\n\n        * tree-inline.c (remap_block): All local class initialization\n        flags go in the outermost scope.\n        (expand_call_inline): Call java_inlining_map_static_initializers.\n        (expand_call_inline): Call java_inlining_merge_static_initializers.\n        * java/lang.c (merge_init_test_initialization): New.\n        (java_inlining_merge_static_initializers): New.\n        (inline_init_test_initialization): New.\n        (java_inlining_map_static_initializers): New.\n\n        * tree-inline.c (expand_call_inline): Convert retvar to expected\n        type.\n\nFrom-SVN: r58129", "tree": {"sha": "53b1e0a1a868f57ff4e3b0a8d8b515b98e20cf7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53b1e0a1a868f57ff4e3b0a8d8b515b98e20cf7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34146b9406f4281fc83386e58059457cba1b5e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34146b9406f4281fc83386e58059457cba1b5e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34146b9406f4281fc83386e58059457cba1b5e1b"}], "stats": {"total": 185, "additions": 175, "deletions": 10}, "files": [{"sha": "0312c09199d47d2dad78b7eb88a0ad6f9855524f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3eb429b2ce44213e20b23ee8e8f5ec9b617926fa", "patch": "@@ -1,3 +1,17 @@\n+2002-10-14  Andrew Haley  <aph@redhat.com>\n+\n+\t* tree-inline.c (remap_block): All local class initialization\n+\tflags go in the outermost scope.\n+\t(expand_call_inline): Call java_inlining_map_static_initializers.\n+\t(expand_call_inline): Call java_inlining_merge_static_initializers.\n+\t* java/lang.c (merge_init_test_initialization): New.\n+\t(java_inlining_merge_static_initializers): New.\n+\t(inline_init_test_initialization): New.\n+\t(java_inlining_map_static_initializers): New.\n+\n+\t* tree-inline.c (expand_call_inline): Convert retvar to expected\n+\ttype.\n+\n 2002-10-14  Graham Stott  <graham.stott@btinternet.com>\n \n \t* stmt.c (decl_conflicts_with_clobbers_p): Add REG_P check."}, {"sha": "307d225e240698bbf60f7b2fc549c2f4b2d8b0c9", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3eb429b2ce44213e20b23ee8e8f5ec9b617926fa", "patch": "@@ -1,3 +1,14 @@\n+2002-10-14  Andrew Haley  <aph@redhat.com>\n+\n+\t* tree-inline.c (remap_block): All local class initialization\n+\tflags go in the outermost scope.\n+\t(expand_call_inline): Call java_inlining_map_static_initializers.\n+\t(expand_call_inline): Call java_inlining_merge_static_initializers.\n+\t* java/lang.c (merge_init_test_initialization): New.\n+\t(java_inlining_merge_static_initializers): New.\n+\t(inline_init_test_initialization): New.\n+\t(java_inlining_map_static_initializers): New.\n+\n 2002-10-11  Mark Wielaard  <mark@klomp.org>\n \n \t* gcj.texi (Compatibility): Add Limitations and Extensions section."}, {"sha": "6f19961f65c692c939858a387f445d8c4676dc91", "filename": "gcc/java/lang.c", "status": "modified", "additions": 119, "deletions": 6, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=3eb429b2ce44213e20b23ee8e8f5ec9b617926fa", "patch": "@@ -41,6 +41,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"ggc.h\"\n #include \"diagnostic.h\"\n #include \"tree-inline.h\"\n+#include \"splay-tree.h\"\n \n struct string_option\n {\n@@ -62,15 +63,18 @@ static void java_print_error_function PARAMS ((diagnostic_context *,\n static int process_option_with_no PARAMS ((const char *,\n \t\t\t\t\t   const struct string_option *,\n \t\t\t\t\t   int));\n-static tree java_tree_inlining_walk_subtrees  PARAMS ((tree *,\n-\t\t\t\t\t\t       int *,\n-\t\t\t\t\t\t       walk_tree_fn,\n-\t\t\t\t\t\t       void *,\n-\t\t\t\t\t\t       void *));\n+static tree java_tree_inlining_walk_subtrees PARAMS ((tree *,\n+\t\t\t\t\t\t      int *,\n+\t\t\t\t\t\t      walk_tree_fn,\n+\t\t\t\t\t\t      void *,\n+\t\t\t\t\t\t      void *));\n static int java_unsafe_for_reeval PARAMS ((tree));\n+static int merge_init_test_initialization PARAMS ((void * *, \n+\t\t\t\t\t\t   void *));\n+static int inline_init_test_initialization PARAMS ((void * *, \n+\t\t\t\t\t\t    void *));\n static bool java_can_use_bit_fields_p PARAMS ((void));\n \n-\n #ifndef TARGET_OBJECT_SUFFIX\n # define TARGET_OBJECT_SUFFIX \".o\"\n #endif\n@@ -928,4 +932,113 @@ java_unsafe_for_reeval (t)\n   return -1;\n }\n \n+/* Every call to a static constructor has an associated boolean\n+   variable which is in the outermost scope of the calling method.\n+   This variable is used to avoid multiple calls to the static\n+   constructor for each class.  \n+\n+   It looks somthing like this:\n+\n+   foo ()\n+   {\n+      boolean dummy = OtherClass.is_initialized;\n+  \n+     ...\n+  \n+     if (! dummy)\n+       OtherClass.initialize();\n+\n+     ... use OtherClass.data ...\n+   }\n+\n+   Each of these boolean variables has an entry in the\n+   DECL_FUNCTION_INIT_TEST_TABLE of a method.  When inlining a method\n+   we must merge the DECL_FUNCTION_INIT_TEST_TABLE from the function\n+   being linlined and create the boolean variables in the outermost\n+   scope of the method being inlined into.  */\n+\n+/* Create a mapping from a boolean variable in a method being inlined\n+   to one in the scope of the method being inlined into.  */\n+\n+static int\n+merge_init_test_initialization (entry, x)\n+     void * * entry;\n+     void * x;\n+{\n+  struct treetreehash_entry *ite = (struct treetreehash_entry *) *entry;\n+  splay_tree decl_map = (splay_tree)x;\n+  splay_tree_node n;\n+  tree *init_test_decl;\n+  \n+  /* See if we have remapped this declaration.  If we haven't there's\n+     a bug in the inliner.  */\n+  n = splay_tree_lookup (decl_map, (splay_tree_key) ite->value);\n+  if (! n)\n+    abort ();\n+\n+  /* Create a new entry for the class and its remapped boolean\n+     variable.  If we already have a mapping for this class we've\n+     already initialized it, so don't overwrite the value.  */\n+  init_test_decl = java_treetreehash_new\n+    (DECL_FUNCTION_INIT_TEST_TABLE (current_function_decl), ite->key);\n+  if (!*init_test_decl)\n+    *init_test_decl = (tree)n->value;\n+\n+  return true;\n+}\n+\n+/* Merge the DECL_FUNCTION_INIT_TEST_TABLE from the function we're\n+   inlining.  */\n+\n+void\n+java_inlining_merge_static_initializers (fn, decl_map)\n+     tree fn;\n+     void *decl_map;\n+{\n+  htab_traverse \n+    (DECL_FUNCTION_INIT_TEST_TABLE (fn),\n+     merge_init_test_initialization, decl_map);\n+}\n+\n+/* Lookup a DECL_FUNCTION_INIT_TEST_TABLE entry in the method we're\n+   inlining into.  If we already have a corresponding entry in that\n+   class we don't need to create another one, so we create a mapping\n+   from the variable in the inlined class to the corresponding\n+   pre-existing one.  */\n+\n+static int\n+inline_init_test_initialization (entry, x)\n+     void * * entry;\n+     void * x;\n+{\n+  struct treetreehash_entry *ite = (struct treetreehash_entry *) *entry;\n+  splay_tree decl_map = (splay_tree)x;\n+  \n+  tree h = java_treetreehash_find \n+    (DECL_FUNCTION_INIT_TEST_TABLE (current_function_decl), ite->key);\n+  if (! h)\n+    return true;\n+\n+  splay_tree_insert (decl_map,\n+\t\t     (splay_tree_key) ite->value,\n+\t\t     (splay_tree_value) h);\n+\n+  return true;\n+}\n+\n+/* Look up the boolean variables in the DECL_FUNCTION_INIT_TEST_TABLE\n+   of a method being inlined.  For each hone, if we already have a\n+   variable associated with the same class in the method being inlined\n+   into, create a new mapping for it.  */\n+\n+void\n+java_inlining_map_static_initializers (fn, decl_map)\n+     tree fn;\n+     void *decl_map;\n+{\n+  htab_traverse \n+    (DECL_FUNCTION_INIT_TEST_TABLE (fn),\n+     inline_init_test_initialization, decl_map);\n+}\n+\n #include \"gt-java-lang.h\""}, {"sha": "f0194ad03559ab2feec86f342b66834b726385f3", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb429b2ce44213e20b23ee8e8f5ec9b617926fa/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3eb429b2ce44213e20b23ee8e8f5ec9b617926fa", "patch": "@@ -336,6 +336,23 @@ remap_block (block, decls, id)\n     {\n       tree new_var;\n \n+      /* All local class initialization flags go in the outermost\n+\t scope.  */\n+      if (LOCAL_CLASS_INITIALIZATION_FLAG_P (old_var))\n+\t{\n+\t  /* We may already have one.  */\n+\t  if (! splay_tree_lookup (id->decl_map, (splay_tree_key) old_var))\n+\t    {\n+\t      tree outermost_block;\n+\t      new_var = remap_decl (old_var, id);\n+\t      DECL_ABSTRACT_ORIGIN (new_var) = NULL;\n+\t      outermost_block = DECL_SAVED_TREE (current_function_decl);\n+\t      TREE_CHAIN (new_var) = BLOCK_VARS (outermost_block);\n+\t      BLOCK_VARS (outermost_block) = new_var;\n+\t    }\n+\t  continue;\n+\t}\n+\n       /* Remap the variable.  */\n       new_var = remap_decl (old_var, id);\n       /* If we didn't remap this variable, so we can't mess with\n@@ -1180,7 +1197,9 @@ expand_call_inline (tp, walk_subtrees, data)\n   *inlined_body = copy_body (id);\n #else /* INLINER_FOR_JAVA */\n   {\n-    tree new_body = copy_body (id);\n+    tree new_body;\n+    java_inlining_map_static_initializers (fn, id->decl_map);\n+    new_body = copy_body (id);\n     TREE_TYPE (new_body) = TREE_TYPE (TREE_TYPE (fn));\n     BLOCK_EXPR_BODY (expr)\n       = add_stmt_to_compound (BLOCK_EXPR_BODY (expr), \n@@ -1218,9 +1237,17 @@ expand_call_inline (tp, walk_subtrees, data)\n     = chainon (COMPOUND_BODY (stmt), scope_stmt);\n #else /* INLINER_FOR_JAVA */\n   if (retvar)\n-    BLOCK_EXPR_BODY (expr) \n-      = add_stmt_to_compound (BLOCK_EXPR_BODY (expr), \n-\t\t\t      TREE_TYPE (retvar), retvar);\n+    {\n+      /* Mention the retvar.  If the return type of the function was\n+\t promoted, convert it back to the expected type.  */\n+      if (TREE_TYPE (TREE_TYPE (fn)) != TREE_TYPE (retvar))\n+\tretvar = build1 (NOP_EXPR, TREE_TYPE (TREE_TYPE (fn)), retvar);\n+      BLOCK_EXPR_BODY (expr) \n+\t= add_stmt_to_compound (BLOCK_EXPR_BODY (expr), \n+\t\t\t\tTREE_TYPE (retvar), retvar);\n+    }\n+  \n+  java_inlining_merge_static_initializers (fn, id->decl_map);\n #endif /* INLINER_FOR_JAVA */\n \n   /* Clean up.  */"}]}