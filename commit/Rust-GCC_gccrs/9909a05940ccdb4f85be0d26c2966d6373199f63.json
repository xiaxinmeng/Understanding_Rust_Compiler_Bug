{"sha": "9909a05940ccdb4f85be0d26c2966d6373199f63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkwOWEwNTk0MGNjZGI0Zjg1YmUwZDI2YzI5NjZkNjM3MzE5OWY2Mw==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2019-11-29T13:59:21Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-11-29T13:59:21Z"}, "message": "Fortran] OpenACC \u2013 permit common blocks in some clauses\n\n        * testsuite/libgomp.oacc-fortran/declare-5.f90: Extend by\n        adding a common-block test case.\n\nFrom-SVN: r278845", "tree": {"sha": "b45ca62901ed76bb7eeffeae78eb03c416528b0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b45ca62901ed76bb7eeffeae78eb03c416528b0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9909a05940ccdb4f85be0d26c2966d6373199f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9909a05940ccdb4f85be0d26c2966d6373199f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9909a05940ccdb4f85be0d26c2966d6373199f63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9909a05940ccdb4f85be0d26c2966d6373199f63/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb08a53b2eb01cc06d66f479c865aca55c91fd26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb08a53b2eb01cc06d66f479c865aca55c91fd26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb08a53b2eb01cc06d66f479c865aca55c91fd26"}], "stats": {"total": 95, "additions": 89, "deletions": 6}, "files": [{"sha": "01da5efb8aecea3916d40f34e61c20b1c429e281", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9909a05940ccdb4f85be0d26c2966d6373199f63/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9909a05940ccdb4f85be0d26c2966d6373199f63/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9909a05940ccdb4f85be0d26c2966d6373199f63", "patch": "@@ -1,3 +1,8 @@\n+2019-11-29  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/declare-5.f90: Extend by\n+\tadding a common-block test case.\n+\n 2019-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/60228"}, {"sha": "4eb0ecadc766a719c4d2ea9249f9feccd1700705", "filename": "libgomp/testsuite/libgomp.oacc-fortran/declare-5.f90", "status": "modified", "additions": 84, "deletions": 6, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9909a05940ccdb4f85be0d26c2966d6373199f63/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9909a05940ccdb4f85be0d26c2966d6373199f63/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-5.f90?ref=9909a05940ccdb4f85be0d26c2966d6373199f63", "patch": "@@ -3,27 +3,105 @@\n module vars\n   implicit none\n   real b\n- !$acc declare device_resident (b)\n+  !$acc declare device_resident (b)\n+\n+  integer :: x, y, z\n+  common /block/ x, y, z\n+  !$acc declare device_resident (/block/)\n end module vars\n \n+subroutine set()\n+  use openacc\n+  implicit none\n+  integer :: a(5), b(1), c, vals(7)\n+  common /another/ a, b, c\n+  !$acc declare device_resident (/another/)\n+  if (.not. acc_is_present (a)) stop 10\n+  if (.not. acc_is_present (b)) stop 11\n+  if (.not. acc_is_present (c)) stop 12\n+\n+  vals = 99\n+  ! NOTE: The current (Nov 2019) implementation requires the 'present'\n+  ! as it tries to otherwises map the device_resident variables;\n+  ! following OpenMP 4.0 semantic: 'a' + 'b' are 'copy' (map fromto) and\n+  ! 'c' is firstprivate.\n+  !$acc parallel copyout(vals) present(a, b, c)\n+    a = [11,12,13,14,15]\n+    b = 16\n+    c = 47\n+    vals(1:5) = a\n+    vals(6:6) = b\n+    vals(7) = c\n+  !$acc end parallel\n+\n+  if (.not. acc_is_present (a)) stop 13\n+  if (.not. acc_is_present (b)) stop 14\n+  if (.not. acc_is_present (c)) stop 15\n+\n+  if (any (vals /= [11,12,13,14,15,16,47])) stop 16\n+end subroutine set\n+\n+subroutine check()\n+  use openacc\n+  implicit none\n+  integer :: g, h(3), i(3)\n+  common /another/ g, h, i\n+  integer :: val(7)\n+  !$acc declare device_resident (/another/)\n+  if (.not. acc_is_present (g)) stop 20\n+  if (.not. acc_is_present (h)) stop 21\n+  if (.not. acc_is_present (i)) stop 22\n+\n+  val = 99\n+  !$acc parallel copyout(val) present(g, h, i)\n+    val(5:7) = i\n+    val(1) = g\n+    val(2:4) = h\n+  !$acc end parallel\n+\n+  if (.not. acc_is_present (g)) stop 23\n+  if (.not. acc_is_present (h)) stop 24\n+  if (.not. acc_is_present (i)) stop 25\n+\n+\n+  !print *, val\n+  if (any (val /= [11,12,13,14,15,16,47])) stop 26\n+end subroutine check\n+\n+\n program test\n   use vars\n   use openacc\n   implicit none\n   real a\n+  integer :: k\n \n-  if (acc_is_present (b) .neqv. .true.) STOP 1\n+  call set()\n+  call check()\n+\n+  if (.not. acc_is_present (b)) stop 1\n+  if (.not. acc_is_present (x)) stop 2\n+  if (.not. acc_is_present (y)) stop 3\n+  if (.not. acc_is_present (z)) stop 4\n \n   a = 2.0\n+  k = 42\n \n-  !$acc parallel copy (a)\n+  !$acc parallel copy (a, k)\n     b = a\n     a = 1.0\n     a = a + b\n+    x = k\n+    y = 7*k - 2*x\n+    z = 3*y\n+    k = k - z + y\n    !$acc end parallel\n \n-  if (acc_is_present (b) .neqv. .true.) STOP 2\n-\n-  if (a .ne. 3.0) STOP 3\n+  if (.not. acc_is_present (b)) stop 5\n+  if (.not. acc_is_present (x)) stop 6\n+  if (.not. acc_is_present (y)) stop 7\n+  if (.not. acc_is_present (z)) stop 8\n \n+  if (a /= 3.0) stop 3\n+  if (k /= -378) stop 3\n end program test"}]}