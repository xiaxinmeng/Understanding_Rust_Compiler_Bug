{"sha": "8570cce7c705f2ec3ffaeb8e47d58af22a075ebd", "node_id": "C_kwDOANBUbNoAKDg1NzBjY2U3YzcwNWYyZWMzZmZhZWI4ZTQ3ZDU4YWYyMmEwNzVlYmQ", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-03-25T09:06:41Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-03-25T12:51:48Z"}, "message": "[libgomp, testsuite] Scale down some OpenACC test-cases\n\nWhen a display manager is running on an nvidia card, all CUDA kernel launches\nget a 5 seconds watchdog timer.\n\nConsequently, when running the libgomp testsuite with nvptx accelerator and\nGOMP_NVPTX_JIT=-O0 we run into a few FAILs like this:\n...\nlibgomp: cuStreamSynchronize error: the launch timed out and was terminated\nFAIL: libgomp.oacc-c/../libgomp.oacc-c-c++-common/parallel-dims.c \\\n  -DACC_DEVICE_TYPE_nvidia=1 -DACC_MEM_SHARED=0 -foffload=nvptx-none -O0 \\\n  execution test\n...\n\nFix this by scaling down the failing test-cases by default, and reverting to\nthe original behaviour for GCC_TEST_RUN_EXPENSIVE=1.\n\nTested on x86_64-linux with nvptx accelerator.\n\nlibgomp/ChangeLog:\n\n2022-03-25  Tom de Vries  <tdevries@suse.de>\n\n\tPR libgomp/105042\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Reduce\n\texecution time.\n\t* testsuite/libgomp.oacc-c-c++-common/vred2d-128.c: Same.\n\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Same.", "tree": {"sha": "04e24f150f63089f12d53736265ddb655646d2b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04e24f150f63089f12d53736265ddb655646d2b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b0fc52b0412cc1608f4f0edb8a0ab2495619c4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0fc52b0412cc1608f4f0edb8a0ab2495619c4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0fc52b0412cc1608f4f0edb8a0ab2495619c4e"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "6798e23ef7012c35bed1264218223b687c50934f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=8570cce7c705f2ec3ffaeb8e47d58af22a075ebd", "patch": "@@ -1,6 +1,8 @@\n /* OpenACC parallelism dimensions clauses: num_gangs, num_workers,\n    vector_length.  */\n \n+/* { dg-additional-options \"-DEXPENSIVE\" { target run_expensive_tests } } */\n+\n /* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n \n /* { dg-additional-options \"-fopt-info-all-omp\" }\n@@ -49,6 +51,11 @@ static int acc_vector ()\n   return __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n }\n \n+#ifdef EXPENSIVE\n+#define N 100\n+#else\n+#define N 50\n+#endif\n \n int main ()\n {\n@@ -76,7 +83,7 @@ int main ()\n     {\n       /* We're actually executing with num_gangs (1).  */\n       gangs_actual = 1;\n-      for (int i = 100 * gangs_actual; i > -100 * gangs_actual; --i)\n+      for (int i = N * gangs_actual; i > -N * gangs_actual; --i)\n \t{\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n@@ -115,7 +122,7 @@ int main ()\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100 * gangs_actual; i > -100 * gangs_actual; --i)\n+      for (int i = N * gangs_actual; i > -N * gangs_actual; --i)\n \t{\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n@@ -154,7 +161,7 @@ int main ()\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC worker loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100 * workers_actual; i > -100 * workers_actual; --i)\n+      for (int i = N * workers_actual; i > -N * workers_actual; --i)\n \t{\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n@@ -200,7 +207,7 @@ int main ()\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC vector loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100 * vectors_actual; i > -100 * vectors_actual; --i)\n+      for (int i = N * vectors_actual; i > -N * vectors_actual; --i)\n \t{\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n@@ -250,7 +257,7 @@ int main ()\n \t}\n       /* As we're executing GR not GP, don't multiply with a \"gangs_actual\"\n \t factor.  */\n-      for (int i = 100 /* * gangs_actual */; i > -100 /* * gangs_actual */; --i)\n+      for (int i = N /* * gangs_actual */; i > -N /* * gangs_actual */; --i)\n \t{\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n@@ -291,7 +298,7 @@ int main ()\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100 * gangs_actual; i > -100 * gangs_actual; --i)\n+      for (int i = N * gangs_actual; i > -N * gangs_actual; --i)\n \t{\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n@@ -348,7 +355,7 @@ int main ()\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC worker loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100 * workers_actual; i > -100 * workers_actual; --i)\n+      for (int i = N * workers_actual; i > -N * workers_actual; --i)\n \t{\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n@@ -411,7 +418,7 @@ int main ()\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC worker loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100 * workers_actual; i > -100 * workers_actual; --i)\n+      for (int i = N * workers_actual; i > -N * workers_actual; --i)\n \t{\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n@@ -468,7 +475,7 @@ int main ()\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC vector loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100 * vectors_actual; i > -100 * vectors_actual; --i)\n+      for (int i = N * vectors_actual; i > -N * vectors_actual; --i)\n \t{\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n@@ -528,7 +535,7 @@ int main ()\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC vector loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100 * vectors_actual; i > -100 * vectors_actual; --i)\n+      for (int i = N * vectors_actual; i > -N * vectors_actual; --i)\n \t{\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n@@ -602,20 +609,20 @@ int main ()\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100 * gangs_actual; i > -100 * gangs_actual; --i)\n+      for (int i = N * gangs_actual; i > -N * gangs_actual; --i)\n #pragma acc loop /* { dg-line l_loop_j[incr c_loop_j] } */ \\\n   worker \\\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n \t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-optimized {assigned OpenACC worker loop parallelism} {} { target *-*-* } l_loop_j$c_loop_j } */\n-\tfor (int j = 100 * workers_actual; j > -100 * workers_actual; --j)\n+\tfor (int j = N * workers_actual; j > -N * workers_actual; --j)\n #pragma acc loop /* { dg-line l_loop_k[incr c_loop_k] } */ \\\n   vector \\\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n \t  /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k$c_loop_k } */\n \t  /* { dg-optimized {assigned OpenACC vector loop parallelism} {} { target *-*-* } l_loop_k$c_loop_k } */\n-\t  for (int k = 100 * vectors_actual; k > -100 * vectors_actual; --k)\n+\t  for (int k = N * vectors_actual; k > -N * vectors_actual; --k)\n \t    {\n \t      gangs_min = gangs_max = acc_gang ();\n \t      workers_min = workers_max = acc_worker ();\n@@ -664,7 +671,7 @@ int main ()\n       /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100; i > -100; --i)\n+      for (int i = N; i > -N; --i)\n \t{\n \t  /* This is to make the loop unparallelizable.  */\n \t  asm volatile (\"\" : : : \"memory\");\n@@ -714,7 +721,7 @@ int main ()\n       /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100; i > -100; --i)\n+      for (int i = N; i > -N; --i)\n \t{\n \t  /* This is to make the loop unparallelizable.  */\n \t  asm volatile (\"\" : : : \"memory\");\n@@ -745,7 +752,7 @@ int main ()\n     /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n     /* { dg-warning {using 'vector_length \\(32\\)', ignoring 1} {} { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n     {\n-      for (int i = 100; i > -100; i--)\n+      for (int i = N; i > -N; i--)\n \t{\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n@@ -789,20 +796,20 @@ int main ()\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-optimized {assigned OpenACC gang loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n-      for (int i = 100; i > -100; i--)\n+      for (int i = N; i > -N; i--)\n #pragma acc loop /* { dg-line l_loop_j[incr c_loop_j] } */ \\\n   worker \\\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n \t/* { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_j$c_loop_j } */\n \t/* { dg-optimized {assigned OpenACC worker loop parallelism} {} { target *-*-* } l_loop_j$c_loop_j } */\n-\tfor (int j = 100; j > -100; j--)\n+\tfor (int j = N; j > -N; j--)\n #pragma acc loop /* { dg-line l_loop_k[incr c_loop_k] } */ \\\n   vector \\\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n \t  /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k$c_loop_k } */\n \t  /* { dg-optimized {assigned OpenACC vector loop parallelism} {} { target *-*-* } l_loop_k$c_loop_k } */\n-\t  for (int k = 100 * vectors_actual; k > -100 * vectors_actual; k--)\n+\t  for (int k = N * vectors_actual; k > -N * vectors_actual; k--)\n \t    {\n \t      gangs_min = gangs_max = acc_gang ();\n \t      workers_min = workers_max = acc_worker ();"}, {"sha": "9c182d90a0d727e4c372d5a2339e3574a51c9d5a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vred2d-128.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c?ref=8570cce7c705f2ec3ffaeb8e47d58af22a075ebd", "patch": "@@ -1,10 +1,16 @@\n /* Test large vector lengths.  */\n \n+/* { dg-additional-options \"-DEXPENSIVE\" { target run_expensive_tests } } */\n+\n /* { dg-additional-options -Wuninitialized } */\n \n #include <assert.h>\n \n+#ifdef EXPENSIVE\n #define n 10000\n+#else\n+#define n 2500\n+#endif\n int a1[n], a2[n];\n \n #define gentest(name, outer, inner)\t\t\\"}, {"sha": "d2050e69eb98d5e61244fad65b29e24ad18e6671", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-dims.f90", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8570cce7c705f2ec3ffaeb8e47d58af22a075ebd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90?ref=8570cce7c705f2ec3ffaeb8e47d58af22a075ebd", "patch": "@@ -5,6 +5,9 @@\n ! { dg-do run }\n ! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n \n+! { dg-additional-options \"-DEXPENSIVE\" { target run_expensive_tests } }\n+! { dg-additional-options \"-cpp\" }\n+\n ! { dg-additional-options \"-fopt-info-note-omp\" }\n ! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n ! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n@@ -44,6 +47,13 @@ program main\n   integer :: vectors_actual\n   integer :: i, j, k\n \n+\n+#ifdef EXPENSIVE\n+  integer, parameter :: N = 100\n+#else\n+  integer, parameter :: N = 50\n+#endif\n+\n   call acc_init (acc_device_default)\n \n   ! OpenACC parallel construct.\n@@ -69,7 +79,7 @@ program main\n   !$acc serial &\n   !$acc   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max) ! { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n   ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-  do i = 100, -99, -1\n+  do i = N, -(N-1), -1\n      gangs_min = acc_gang ();\n      gangs_max = acc_gang ();\n      workers_min = acc_worker ();\n@@ -108,14 +118,14 @@ program main\n   end if\n   !$acc loop gang reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n   ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-  do i = 100, -99, -1\n+  do i = N, -(N-1), -1\n      !$acc loop worker reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n      ! { dg-note {variable 'j' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n      ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-2 }\n-     do j = 100, -99, -1\n+     do j = N, -(N-1), -1\n         !$acc loop vector reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n         ! { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n-        do k = 100 * vectors_actual, -99 * vectors_actual, -1\n+        do k = N * vectors_actual, -(N-1) * vectors_actual, -1\n            gangs_min = acc_gang ();\n            gangs_max = acc_gang ();\n            workers_min = acc_worker ();"}]}