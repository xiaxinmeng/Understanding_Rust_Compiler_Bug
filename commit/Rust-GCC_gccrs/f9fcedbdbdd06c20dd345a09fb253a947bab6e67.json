{"sha": "f9fcedbdbdd06c20dd345a09fb253a947bab6e67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlmY2VkYmRiZGQwNmMyMGRkMzQ1YTA5ZmIyNTNhOTQ3YmFiNmU2Nw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-12-03T11:30:18Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-12-03T11:30:18Z"}, "message": "[multiple changes]\n\n2011-12-03  Tobias Burnus  <burnus@net-b.de>                                                                                                           \n\n        PR fortran/50684\n        * check.c (variable_check): Fix intent(in) check.\n\n2011-12-03  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/50684\n        * gfortran.dg/move_alloc_8.f90: New.\n\nFrom-SVN: r181967", "tree": {"sha": "f1b18b0ac724eb7e6fcbd1c9bf1f3d91f53a5875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1b18b0ac724eb7e6fcbd1c9bf1f3d91f53a5875"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9fcedbdbdd06c20dd345a09fb253a947bab6e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fcedbdbdd06c20dd345a09fb253a947bab6e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9fcedbdbdd06c20dd345a09fb253a947bab6e67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fcedbdbdd06c20dd345a09fb253a947bab6e67/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fde50fe6afbf70fc1dfeb1f0c69e404c894bfd2c"}], "stats": {"total": 145, "additions": 141, "deletions": 4}, "files": [{"sha": "bec5430f8f14c4d31a47e1fb021bec5f0235191a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fcedbdbdd06c20dd345a09fb253a947bab6e67/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fcedbdbdd06c20dd345a09fb253a947bab6e67/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f9fcedbdbdd06c20dd345a09fb253a947bab6e67", "patch": "@@ -1,3 +1,8 @@\n+2011-12-03  Tobias Burnus  <burnus@net-b.de>                                                                                                           \n+\n+\tPR fortran/50684\n+\t* check.c (variable_check): Fix intent(in) check.\n+\n 2011-12-03  Tobias Burnus  <burnus@net-b.de>\n \n \t* check.c (gfc_check_move_alloc): Allow nonpolymorphic"}, {"sha": "f2c4272681e7cc8f61d5dbffe598ca17e35b02fb", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fcedbdbdd06c20dd345a09fb253a947bab6e67/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fcedbdbdd06c20dd345a09fb253a947bab6e67/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=f9fcedbdbdd06c20dd345a09fb253a947bab6e67", "patch": "@@ -476,10 +476,31 @@ variable_check (gfc_expr *e, int n, bool allow_proc)\n       && (gfc_current_intrinsic_arg[n]->intent == INTENT_OUT\n \t  || gfc_current_intrinsic_arg[n]->intent == INTENT_INOUT))\n     {\n-      gfc_error (\"'%s' argument of '%s' intrinsic at %L cannot be INTENT(IN)\",\n-\t\t gfc_current_intrinsic_arg[n]->name, gfc_current_intrinsic,\n-\t\t &e->where);\n-      return FAILURE;\n+      gfc_ref *ref;\n+      bool pointer = e->symtree->n.sym->ts.type == BT_CLASS\n+\t\t     && CLASS_DATA (e->symtree->n.sym)\n+\t\t     ? CLASS_DATA (e->symtree->n.sym)->attr.class_pointer\n+\t\t     : e->symtree->n.sym->attr.pointer;\n+\n+      for (ref = e->ref; ref; ref = ref->next)\n+\t{\n+\t  if (pointer && ref->type == REF_COMPONENT)\n+\t    break;\n+\t  if (ref->type == REF_COMPONENT\n+\t      && ((ref->u.c.component->ts.type == BT_CLASS\n+\t\t   && CLASS_DATA (ref->u.c.component)->attr.class_pointer)\n+\t\t  || (ref->u.c.component->ts.type != BT_CLASS\n+\t\t      && ref->u.c.component->attr.pointer)))\n+\t    break;\n+\t} \n+\n+      if (!ref)\n+\t{\n+\t  gfc_error (\"'%s' argument of '%s' intrinsic at %L cannot be \"\n+\t\t     \"INTENT(IN)\", gfc_current_intrinsic_arg[n]->name,\n+\t\t     gfc_current_intrinsic, &e->where);\n+\t  return FAILURE;\n+\t}\n     }\n \n   if (e->expr_type == EXPR_VARIABLE"}, {"sha": "3b03cf7cd957a0b8af1ddbc4e924c41b1ae5f387", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fcedbdbdd06c20dd345a09fb253a947bab6e67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fcedbdbdd06c20dd345a09fb253a947bab6e67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9fcedbdbdd06c20dd345a09fb253a947bab6e67", "patch": "@@ -1,3 +1,8 @@\n+2011-12-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/50684\n+\t* gfortran.dg/move_alloc_8.f90: New.\n+\n 2011-12-03  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/select_type_23.f03: Revert Rev. 181801,"}, {"sha": "2fa530666004c4f905d1ee80497ff260d366ea63", "filename": "gcc/testsuite/gfortran.dg/move_alloc_8.f90", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fcedbdbdd06c20dd345a09fb253a947bab6e67/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fcedbdbdd06c20dd345a09fb253a947bab6e67/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_8.f90?ref=f9fcedbdbdd06c20dd345a09fb253a947bab6e67", "patch": "@@ -0,0 +1,106 @@\n+! { dg-do compile }\n+!\n+! PR fortran/50684\n+!\n+! Module \"bug\" contributed by Martin Stegh\u00f6fer.\n+!\n+\n+MODULE BUG\n+  TYPE MY_TYPE\n+    INTEGER, ALLOCATABLE :: VALUE\n+  END TYPE\n+CONTAINS\n+  SUBROUTINE POINTER_INTENT_IN_BUG_WORKING(POINTER_INTENT_IN_VARIABLE)\n+    TYPE(MY_TYPE), POINTER, INTENT(IN) :: POINTER_INTENT_IN_VARIABLE\n+    TYPE(MY_TYPE), POINTER :: POINTER_VARIABLE_LOCAL\n+    INTEGER, ALLOCATABLE :: LOCAL_VALUE\n+    \n+    POINTER_VARIABLE_LOCAL=>POINTER_INTENT_IN_VARIABLE\n+    CALL MOVE_ALLOC(POINTER_VARIABLE_LOCAL%VALUE, LOCAL_VALUE)\n+    \n+    RETURN\n+  END SUBROUTINE POINTER_INTENT_IN_BUG_WORKING\n+  \n+  SUBROUTINE POINTER_INTENT_IN_BUG_FAILING(POINTER_INTENT_IN_VARIABLE)\n+    TYPE(MY_TYPE), POINTER, INTENT(IN) :: POINTER_INTENT_IN_VARIABLE\n+    INTEGER, ALLOCATABLE :: LOCAL_VALUE\n+    \n+    CALL MOVE_ALLOC(POINTER_INTENT_IN_VARIABLE%VALUE, LOCAL_VALUE)\n+    \n+    RETURN\n+  END SUBROUTINE POINTER_INTENT_IN_BUG_FAILING\n+end module bug\n+\n+subroutine test1()\n+  TYPE MY_TYPE\n+    INTEGER, ALLOCATABLE :: VALUE\n+  END TYPE\n+CONTAINS\n+  SUBROUTINE sub (dt)\n+    type(MY_TYPE), intent(in) :: dt\n+    INTEGER, ALLOCATABLE :: lv\n+    call move_alloc(dt%VALUE, lv) ! { dg-error \"cannot be INTENT.IN.\" }\n+  END SUBROUTINE\n+end subroutine test1\n+\n+subroutine test2 (x, px)\n+  implicit none\n+  type t\n+    integer, allocatable :: a\n+  end type t\n+\n+  type t2\n+    type(t), pointer :: ptr\n+    integer, allocatable :: a\n+  end type t2\n+\n+  type(t2), intent(in) :: x\n+  type(t2), pointer, intent(in) :: px\n+\n+  integer, allocatable :: a\n+  type(t2), pointer :: ta\n+\n+  call move_alloc (px, ta)      ! { dg-error \"cannot be INTENT.IN.\" }\n+  call move_alloc (x%a, a)      ! { dg-error \"cannot be INTENT.IN.\" }\n+  call move_alloc (x%ptr%a, a)  ! OK (3)\n+  call move_alloc (px%a, a)     ! OK (4)\n+  call move_alloc (px%ptr%a, a) ! OK (5)\n+end subroutine test2\n+\n+subroutine test3 (x, px)\n+  implicit none\n+  type t\n+    integer, allocatable :: a\n+  end type t\n+\n+  type t2\n+    class(t), pointer :: ptr\n+    integer, allocatable :: a\n+  end type t2\n+\n+  type(t2), intent(in) :: x\n+  class(t2), pointer, intent(in) :: px\n+\n+  integer, allocatable :: a\n+  class(t2), pointer :: ta\n+\n+  call move_alloc (px, ta)      ! { dg-error \"cannot be INTENT.IN.\" }\n+  call move_alloc (x%a, a)      ! { dg-error \"cannot be INTENT.IN.\" }\n+  call move_alloc (x%ptr%a, a)  ! OK (6)\n+  call move_alloc (px%a, a)     ! OK (7)\n+  call move_alloc (px%ptr%a, a) ! OK (8)\n+end subroutine test3\n+\n+subroutine test4()\n+  TYPE MY_TYPE\n+    INTEGER, ALLOCATABLE :: VALUE\n+  END TYPE\n+CONTAINS\n+  SUBROUTINE sub (dt)\n+    CLASS(MY_TYPE), intent(in) :: dt\n+    INTEGER, ALLOCATABLE :: lv\n+    call move_alloc(dt%VALUE, lv) ! { dg-error \"cannot be INTENT.IN.\" }\n+  END SUBROUTINE\n+end subroutine test4\n+\n+! { dg-final { cleanup-modules \"bug\" } }"}]}