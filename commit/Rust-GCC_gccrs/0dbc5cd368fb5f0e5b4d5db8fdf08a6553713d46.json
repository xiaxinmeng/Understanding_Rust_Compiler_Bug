{"sha": "0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRiYzVjZDM2OGZiNWYwZTViNGQ1ZGI4ZmRmMDhhNjU1MzcxM2Q0Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-04-29T07:13:33Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-04-29T07:13:33Z"}, "message": "decl.c (maybe_commonize_var): Further tweak support for systems without weak symbols.\n\n\t* decl.c (maybe_commonize_var): Further tweak support for systems\n\twithout weak symbols.\n\n\t* g++.old-deja/g++.pt/deduct5.C: Remove unnecessary initializer.\n\nFrom-SVN: r66205", "tree": {"sha": "e72e0999e33e11d6faa91e666f94ea7a4706d2f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e72e0999e33e11d6faa91e666f94ea7a4706d2f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46/comments", "author": null, "committer": null, "parents": [{"sha": "48f2318c45c3567803990921a40e6bc12b6fb65b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f2318c45c3567803990921a40e6bc12b6fb65b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f2318c45c3567803990921a40e6bc12b6fb65b"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "995f8bb52b82822dad99904e8118a274a8823ec7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46", "patch": "@@ -1,3 +1,8 @@\n+2003-04-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (maybe_commonize_var): Further tweak support for systems\n+\twithout weak symbols.\n+\n 2003-04-27  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (maybe_commonize_var): Fix thinko in last patch."}, {"sha": "1e157f79299ee4a59afd10fc86e190ad3def5ea2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46", "patch": "@@ -7346,34 +7346,34 @@ maybe_commonize_var (tree decl)\n \t       || DECL_TEMPLATE_INSTANTIATION (DECL_CONTEXT (decl)))\n \t      && TREE_PUBLIC (DECL_CONTEXT (decl)))))\n     {\n-      /* If flag_weak, we don't need to mess with this, as we can just\n-\t make the function weak, and let it refer to its unique local\n-\t copy.  This works because we don't allow the function to be\n-\t inlined.  */\n-      if (! flag_weak)\n+      if (flag_weak)\n \t{\n-\t  if (DECL_INTERFACE_KNOWN (current_function_decl))\n-\t    {\n-\t      TREE_PUBLIC (decl) = 1;\n-\t      DECL_EXTERNAL (decl) = DECL_EXTERNAL (current_function_decl);\n-\t    }\n-\t  else if (DECL_INITIAL (decl) == NULL_TREE\n-\t\t   || DECL_INITIAL (decl) == error_mark_node)\n+\t  /* With weak symbols, we simply make the variable COMDAT;\n+\t     that will cause copies in multiple translations units to\n+\t     be merged.  */\n+\t  comdat_linkage (decl);\n+\t}\n+      else\n+\t{\n+\t  if (DECL_INITIAL (decl) == NULL_TREE\n+\t      || DECL_INITIAL (decl) == error_mark_node)\n \t    {\n+\t      /* Without weak symbols, we can use COMMON to merge\n+\t\t uninitialized variables.  */\n \t      TREE_PUBLIC (decl) = 1;\n \t      DECL_COMMON (decl) = 1;\n \t    }\n-\t  /* else we lose. We can only do this if we can use common,\n-\t     which we can't if it has been initialized.  */\n-\n-\t  if (!TREE_PUBLIC (decl))\n+\t  else\n \t    {\n+\t      /* While for initialized variables, we must use internal\n+\t\t linkage -- which means that multiple copies will not\n+\t\t be merged.  */\n+\t      TREE_PUBLIC (decl) = 0;\n+\t      DECL_COMMON (decl) = 0;\n \t      cp_warning_at (\"sorry: semantics of inline function static data `%#D' are wrong (you'll wind up with multiple copies)\", decl);\n \t      cp_warning_at (\"  you can work around this by removing the initializer\", decl);\n \t    }\n \t}\n-      else\n-\tcomdat_linkage (decl);\n     }\n   else if (DECL_LANG_SPECIFIC (decl) && DECL_COMDAT (decl))\n     /* Set it up again; we might have set DECL_INITIAL since the last\n@@ -7551,11 +7551,24 @@ reshape_init (tree type, tree *initp)\n \t    {\n \t      /* Loop through the initializable fields, gathering\n \t\t initializers.  */\n-              /* FIXME support non-trivial labeled initializers.  */\n-\t      while (*initp && field)\n+\t      while (*initp)\n \t\t{\n \t\t  tree field_init;\n \n+\t\t  /* Handle designated initializers, as an extension.  */\n+\t\t  if (TREE_PURPOSE (*initp))\n+\t\t    {\n+\t\t      if (pedantic)\n+\t\t\tpedwarn (\"ISO C++ does not allow designated initializers\");\n+\t\t      field = lookup_field_1 (type, TREE_PURPOSE (*initp),\n+\t\t\t\t\t      /*want_type=*/false);\n+\t\t      if (!field || TREE_CODE (field) != FIELD_DECL)\n+\t\t\terror (\"`%T' has no non-static data member named `%D'\",\n+\t\t\t       type, TREE_PURPOSE (*initp));\n+\t\t    }\n+\t\t  if (!field)\n+\t\t    break;\n+\n \t\t  field_init = reshape_init (TREE_TYPE (field), initp);\n \t\t  TREE_CHAIN (field_init) = CONSTRUCTOR_ELTS (new_init);\n \t\t  CONSTRUCTOR_ELTS (new_init) = field_init;"}, {"sha": "d12532817f1480d2920a84df43c3be0a4b5d24ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46", "patch": "@@ -1,3 +1,7 @@\n+2003-04-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/deduct5.C: Remove unnecessary initializer.\n+\n 2003-04-28  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10180"}, {"sha": "7c3769c88ab589dcf3e08ebe3a5883340acf5ec6", "filename": "gcc/testsuite/g++.old-deja/g++.pt/deduct5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdeduct5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdeduct5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdeduct5.C?ref=0dbc5cd368fb5f0e5b4d5db8fdf08a6553713d46", "patch": "@@ -7,7 +7,7 @@\n \n template <typename T> int Foo (T const *ptr)\n {\n-  static int count = 0;\n+  static int count;\n   \n   printf (\"%s\\n\", __PRETTY_FUNCTION__);\n   count++;"}]}