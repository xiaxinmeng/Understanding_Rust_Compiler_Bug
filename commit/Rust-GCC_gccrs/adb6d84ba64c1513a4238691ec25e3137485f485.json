{"sha": "adb6d84ba64c1513a4238691ec25e3137485f485", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiNmQ4NGJhNjRjMTUxM2E0MjM4NjkxZWMyNWUzMTM3NDg1ZjQ4NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-06-30T19:09:31Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-06-30T19:09:31Z"}, "message": "jit: fix some .rst issues in docs\n\ngcc/jit/ChangeLog:\n\t* docs/cp/topics/expressions.rst: Remove stray semicolon.\n\t* docs/cp/topics/functions.rst: Remove stray backslash.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\nFrom-SVN: r225203", "tree": {"sha": "06609efeda5d48ba59ee2f007a3153a59646ca2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06609efeda5d48ba59ee2f007a3153a59646ca2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adb6d84ba64c1513a4238691ec25e3137485f485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb6d84ba64c1513a4238691ec25e3137485f485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb6d84ba64c1513a4238691ec25e3137485f485", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb6d84ba64c1513a4238691ec25e3137485f485/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "633cdd728f9e6b963568ec85fbbac799f5dce2af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/633cdd728f9e6b963568ec85fbbac799f5dce2af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/633cdd728f9e6b963568ec85fbbac799f5dce2af"}], "stats": {"total": 114, "additions": 61, "deletions": 53}, "files": [{"sha": "10b8ec7ba11b454bf20d52650c0cd791d0e04dca", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb6d84ba64c1513a4238691ec25e3137485f485/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb6d84ba64c1513a4238691ec25e3137485f485/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=adb6d84ba64c1513a4238691ec25e3137485f485", "patch": "@@ -1,3 +1,9 @@\n+2015-06-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/cp/topics/expressions.rst: Remove stray semicolon.\n+\t* docs/cp/topics/functions.rst: Remove stray backslash.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\n 2015-06-25  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* dummy-frontend.c: Remove ipa-ref.h and plugin-api.h from include list."}, {"sha": "55af91280744557721dc4b91ef0533f17e1c62aa", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 53, "deletions": 51, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb6d84ba64c1513a4238691ec25e3137485f485/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb6d84ba64c1513a4238691ec25e3137485f485/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=adb6d84ba64c1513a4238691ec25e3137485f485", "patch": "@@ -19,7 +19,7 @@\n \n @copying\n @quotation\n-libgccjit 5.0.0 (experimental 20150409), April 09, 2015\n+libgccjit 6.0.0 (experimental 20150630), June 30, 2015\n \n David Malcolm\n \n@@ -12623,8 +12623,9 @@ Parameter \"loc\" is optional.\n If you don't need to specify the location, this can also be expressed using\n an overloaded operator:\n \n-\n-@deffn {C++ Function} gccjit::lvalue            gccjit::rvalue::operator* ();\n+@geindex gccjit;;rvalue;;operator* (C++ function)\n+@anchor{cp/topics/expressions gccjit rvalue mul-operator}@anchor{175}\n+@deffn {C++ Function} gccjit::lvalue gccjit::rvalue::operator* ()\n \n @example\n gccjit::lvalue content = *ptr;\n@@ -12636,7 +12637,7 @@ gccjit::lvalue content = *ptr;\n Field access is provided separately for both lvalues and rvalues:\n \n @geindex gccjit;;lvalue;;access_field (C++ function)\n-@anchor{cp/topics/expressions gccjit lvalue access_field__gccjit field gccjit location}@anchor{175}\n+@anchor{cp/topics/expressions gccjit lvalue access_field__gccjit field gccjit location}@anchor{176}\n @deffn {C++ Function} gccjit::lvalue gccjit::lvalue::access_field (gccjit::field field, gccjit::location loc)\n \n Given an lvalue of struct or union type, access the given field,\n@@ -12652,7 +12653,7 @@ in C.\n @end deffn\n \n @geindex gccjit;;rvalue;;access_field (C++ function)\n-@anchor{cp/topics/expressions gccjit rvalue access_field__gccjit field gccjit location}@anchor{176}\n+@anchor{cp/topics/expressions gccjit rvalue access_field__gccjit field gccjit location}@anchor{177}\n @deffn {C++ Function} gccjit::rvalue gccjit::rvalue::access_field (gccjit::field field, gccjit::location loc)\n \n Given an rvalue of struct or union type, access the given field\n@@ -12668,7 +12669,7 @@ in C.\n @end deffn\n \n @geindex gccjit;;rvalue;;dereference_field (C++ function)\n-@anchor{cp/topics/expressions gccjit rvalue dereference_field__gccjit field gccjit location}@anchor{177}\n+@anchor{cp/topics/expressions gccjit rvalue dereference_field__gccjit field gccjit location}@anchor{178}\n @deffn {C++ Function} gccjit::lvalue gccjit::rvalue::dereference_field (gccjit::field field, gccjit::location loc)\n \n Given an rvalue of pointer type @code{T *} where T is of struct or union\n@@ -12684,7 +12685,7 @@ in C, itself equivalent to @code{(*EXPR).FIELD}.\n @end deffn\n \n @geindex gccjit;;context;;new_array_access (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_array_access__gccjit rvalue gccjit rvalue gccjit location}@anchor{178}\n+@anchor{cp/topics/expressions gccjit context new_array_access__gccjit rvalue gccjit rvalue gccjit location}@anchor{179}\n @deffn {C++ Function} gccjit::lvalue gccjit::context::new_array_access (gccjit::rvalue ptr, gccjit::rvalue index, gccjit::location loc)\n \n Given an rvalue of pointer type @code{T *}, get at the element @cite{T} at\n@@ -12743,7 +12744,7 @@ gccjit::lvalue element = array[0];\n @c <http://www.gnu.org/licenses/>.\n \n @node Creating and using functions<2>,Source Locations<2>,Expressions<2>,Topic Reference<2>\n-@anchor{cp/topics/functions doc}@anchor{179}@anchor{cp/topics/functions creating-and-using-functions}@anchor{17a}\n+@anchor{cp/topics/functions doc}@anchor{17a}@anchor{cp/topics/functions creating-and-using-functions}@anchor{17b}\n @subsection Creating and using functions\n \n \n@@ -12756,12 +12757,12 @@ gccjit::lvalue element = array[0];\n @end menu\n \n @node Params<2>,Functions<2>,,Creating and using functions<2>\n-@anchor{cp/topics/functions params}@anchor{17b}\n+@anchor{cp/topics/functions params}@anchor{17c}\n @subsubsection Params\n \n \n @geindex gccjit;;param (C++ class)\n-@anchor{cp/topics/functions gccjit param}@anchor{17c}\n+@anchor{cp/topics/functions gccjit param}@anchor{17d}\n @deffn {C++ Class} gccjit::param\n \n A @cite{gccjit::param} represents a parameter to a function.\n@@ -12775,25 +12776,26 @@ In preparation for creating a function, create a new parameter of the\n given type and name.\n @end deffn\n \n-@pxref{17c,,gccjit;;param} is a subclass of @pxref{16f,,gccjit;;lvalue} (and thus\n+@pxref{17d,,gccjit;;param} is a subclass of @pxref{16f,,gccjit;;lvalue} (and thus\n of @pxref{137,,gccjit;;rvalue} and @pxref{121,,gccjit;;object}).  It is a thin\n wrapper around the C API's @pxref{25,,gcc_jit_param *}.\n \n @node Functions<2>,Blocks<2>,Params<2>,Creating and using functions<2>\n-@anchor{cp/topics/functions functions}@anchor{17d}\n+@anchor{cp/topics/functions functions}@anchor{17e}\n @subsubsection Functions\n \n \n @geindex gccjit;;function (C++ class)\n-@anchor{cp/topics/functions gccjit function}@anchor{17e}\n+@anchor{cp/topics/functions gccjit function}@anchor{17f}\n @deffn {C++ Class} gccjit::function\n \n A @cite{gccjit::function} represents a function - either one that we're\n creating ourselves, or one that we're referencing.\n @end deffn\n \n-\n-@deffn {C++ Function} gccjit::function             gccjit::context::new_function (enum gcc_jit_function_kind,                                           gccjit::type return_type,                                            const char *name,                                            std::vector<param> &params,                                            int is_variadic,                                            gccjit::location loc) \\\n+@geindex gccjit;;context;;new_function (C++ function)\n+@anchor{cp/topics/functions gccjit context new_function__enum gccjit type cCP std vector param R i gccjit location}@anchor{180}\n+@deffn {C++ Function} gccjit::function gccjit::context::new_function (enum gcc_jit_function_kind, gccjit::type return_type, const char* name, std::vector<param>& params, int is_variadic, gccjit::location loc)\n \n Create a gcc_jit_function with the given name and parameters.\n \n@@ -12803,15 +12805,15 @@ This is a wrapper around the C API's @pxref{11,,gcc_jit_context_new_function()}.\n @end deffn\n \n @geindex gccjit;;context;;get_builtin_function (C++ function)\n-@anchor{cp/topics/functions gccjit context get_builtin_function__cCP}@anchor{17f}\n+@anchor{cp/topics/functions gccjit context get_builtin_function__cCP}@anchor{181}\n @deffn {C++ Function} gccjit::function gccjit::context::get_builtin_function (const char* name)\n \n This is a wrapper around the C API's\n @pxref{c4,,gcc_jit_context_get_builtin_function()}.\n @end deffn\n \n @geindex gccjit;;function;;get_param (C++ function)\n-@anchor{cp/topics/functions gccjit function get_param__iC}@anchor{180}\n+@anchor{cp/topics/functions gccjit function get_param__iC}@anchor{182}\n @deffn {C++ Function} gccjit::param gccjit::function::get_param (int index) const\n \n Get the param of the given index (0-based).\n@@ -12833,19 +12835,19 @@ name.\n @end deffn\n \n @node Blocks<2>,Statements<2>,Functions<2>,Creating and using functions<2>\n-@anchor{cp/topics/functions blocks}@anchor{181}\n+@anchor{cp/topics/functions blocks}@anchor{183}\n @subsubsection Blocks\n \n \n @geindex gccjit;;block (C++ class)\n-@anchor{cp/topics/functions gccjit block}@anchor{182}\n+@anchor{cp/topics/functions gccjit block}@anchor{184}\n @deffn {C++ Class} gccjit::block\n \n A @cite{gccjit::block} represents a basic block within a function  i.e. a\n sequence of statements with a single entry point and a single exit\n point.\n \n-@pxref{182,,gccjit;;block} is a subclass of @pxref{121,,gccjit;;object}.\n+@pxref{184,,gccjit;;block} is a subclass of @pxref{121,,gccjit;;object}.\n \n The first basic block that you create within a function will\n be the entrypoint.\n@@ -12858,7 +12860,7 @@ one function.\n @end deffn\n \n @geindex gccjit;;function;;new_block (C++ function)\n-@anchor{cp/topics/functions gccjit function new_block__cCP}@anchor{183}\n+@anchor{cp/topics/functions gccjit function new_block__cCP}@anchor{185}\n @deffn {C++ Function} gccjit::block gccjit::function::new_block (const char* name)\n \n Create a basic block of the given name.  The name may be NULL, but\n@@ -12868,7 +12870,7 @@ messages.\n @end deffn\n \n @node Statements<2>,,Blocks<2>,Creating and using functions<2>\n-@anchor{cp/topics/functions statements}@anchor{184}\n+@anchor{cp/topics/functions statements}@anchor{186}\n @subsubsection Statements\n \n \n@@ -12970,7 +12972,7 @@ block, boolval, on_true, and on_false must be non-NULL.\n @end deffn\n \n @geindex gccjit;;block;;end_with_jump (C++ function)\n-@anchor{cp/topics/functions gccjit block end_with_jump__gccjit block gccjit location}@anchor{185}\n+@anchor{cp/topics/functions gccjit block end_with_jump__gccjit block gccjit location}@anchor{187}\n @deffn {C++ Function} void gccjit::block::end_with_jump (gccjit::block target, gccjit::location loc)\n \n Terminate a block by adding a jump to the given target block.\n@@ -12985,7 +12987,7 @@ goto target;\n @end deffn\n \n @geindex gccjit;;block;;end_with_return (C++ function)\n-@anchor{cp/topics/functions gccjit block end_with_return__gccjit rvalue gccjit location}@anchor{186}\n+@anchor{cp/topics/functions gccjit block end_with_return__gccjit rvalue gccjit location}@anchor{188}\n @deffn {C++ Function} void gccjit::block::end_with_return (gccjit::rvalue rvalue, gccjit::location loc)\n \n Terminate a block.\n@@ -13036,7 +13038,7 @@ return;\n @c <http://www.gnu.org/licenses/>.\n \n @node Source Locations<2>,Compiling a context<2>,Creating and using functions<2>,Topic Reference<2>\n-@anchor{cp/topics/locations source-locations}@anchor{187}@anchor{cp/topics/locations doc}@anchor{188}\n+@anchor{cp/topics/locations source-locations}@anchor{189}@anchor{cp/topics/locations doc}@anchor{18a}\n @subsection Source Locations\n \n \n@@ -13079,7 +13081,7 @@ location.\n @end menu\n \n @node Faking it<2>,,,Source Locations<2>\n-@anchor{cp/topics/locations faking-it}@anchor{189}\n+@anchor{cp/topics/locations faking-it}@anchor{18b}\n @subsubsection Faking it\n \n \n@@ -13117,13 +13119,13 @@ file, giving you @emph{something} you can step through in the debugger.\n @c <http://www.gnu.org/licenses/>.\n \n @node Compiling a context<2>,,Source Locations<2>,Topic Reference<2>\n-@anchor{cp/topics/compilation compiling-a-context}@anchor{18a}@anchor{cp/topics/compilation doc}@anchor{18b}\n+@anchor{cp/topics/compilation compiling-a-context}@anchor{18c}@anchor{cp/topics/compilation doc}@anchor{18d}\n @subsection Compiling a context\n \n \n Once populated, a @pxref{110,,gccjit;;context} can be compiled to\n machine code, either in-memory via @pxref{e9,,gccjit;;context;;compile()} or\n-to disk via @pxref{18c,,gccjit;;context;;compile_to_file()}.\n+to disk via @pxref{18e,,gccjit;;context;;compile_to_file()}.\n \n You can compile a context multiple times (using either form of\n compilation), although any errors that occur on the context will\n@@ -13136,7 +13138,7 @@ prevent any future compilation of that context.\n @end menu\n \n @node In-memory compilation<2>,Ahead-of-time compilation<2>,,Compiling a context<2>\n-@anchor{cp/topics/compilation in-memory-compilation}@anchor{18d}\n+@anchor{cp/topics/compilation in-memory-compilation}@anchor{18f}\n @subsubsection In-memory compilation\n \n \n@@ -13152,16 +13154,16 @@ This is a thin wrapper around the\n @end deffn\n \n @node Ahead-of-time compilation<2>,,In-memory compilation<2>,Compiling a context<2>\n-@anchor{cp/topics/compilation ahead-of-time-compilation}@anchor{18e}\n+@anchor{cp/topics/compilation ahead-of-time-compilation}@anchor{190}\n @subsubsection Ahead-of-time compilation\n \n \n Although libgccjit is primarily aimed at just-in-time compilation, it\n can also be used for implementing more traditional ahead-of-time\n-compilers, via the @pxref{18c,,gccjit;;context;;compile_to_file()} method.\n+compilers, via the @pxref{18e,,gccjit;;context;;compile_to_file()} method.\n \n @geindex gccjit;;context;;compile_to_file (C++ function)\n-@anchor{cp/topics/compilation gccjit context compile_to_file__enum cCP}@anchor{18c}\n+@anchor{cp/topics/compilation gccjit context compile_to_file__enum cCP}@anchor{18e}\n @deffn {C++ Function} void gccjit::context::compile_to_file (enum gcc_jit_output_kind, const char* output_path)\n \n Compile the @pxref{110,,gccjit;;context} to a file of the given\n@@ -13189,7 +13191,7 @@ This is a thin wrapper around the\n @c <http://www.gnu.org/licenses/>.\n \n @node Internals,Indices and tables,C++ bindings for libgccjit,Top\n-@anchor{internals/index internals}@anchor{18f}@anchor{internals/index doc}@anchor{190}\n+@anchor{internals/index internals}@anchor{191}@anchor{internals/index doc}@anchor{192}\n @chapter Internals\n \n \n@@ -13204,7 +13206,7 @@ This is a thin wrapper around the\n @end menu\n \n @node Working on the JIT library,Running the test suite,,Internals\n-@anchor{internals/index working-on-the-jit-library}@anchor{191}\n+@anchor{internals/index working-on-the-jit-library}@anchor{193}\n @section Working on the JIT library\n \n \n@@ -13241,7 +13243,7 @@ gcc/libgccjit.so.0.0.1: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV),\n Here's what those configuration options mean:\n \n @geindex command line option; --enable-host-shared\n-@anchor{internals/index cmdoption--enable-host-shared}@anchor{192}\n+@anchor{internals/index cmdoption--enable-host-shared}@anchor{194}\n @deffn {Option} --enable-host-shared\n \n Configuring with this option means that the compiler is built as\n@@ -13250,7 +13252,7 @@ but it necessary for a shared library.\n @end deffn\n \n @geindex command line option; --enable-languages=jit@comma{}c++\n-@anchor{internals/index cmdoption--enable-languages}@anchor{193}\n+@anchor{internals/index cmdoption--enable-languages}@anchor{195}\n @deffn {Option} --enable-languages=jit,c++\n \n This specifies which frontends to build.  The JIT library looks like\n@@ -13269,7 +13271,7 @@ c++: error trying to exec 'cc1plus': execvp: No such file or directory\n @end deffn\n \n @geindex command line option; --disable-bootstrap\n-@anchor{internals/index cmdoption--disable-bootstrap}@anchor{194}\n+@anchor{internals/index cmdoption--disable-bootstrap}@anchor{196}\n @deffn {Option} --disable-bootstrap\n \n For hacking on the \"jit\" subdirectory, performing a full\n@@ -13279,7 +13281,7 @@ the compiler can still bootstrap itself.\n @end deffn\n \n @geindex command line option; --enable-checking=release\n-@anchor{internals/index cmdoption--enable-checking}@anchor{195}\n+@anchor{internals/index cmdoption--enable-checking}@anchor{197}\n @deffn {Option} --enable-checking=release\n \n The compile can perform extensive self-checking as it runs, useful when\n@@ -13290,7 +13292,7 @@ disable this self-checking.\n @end deffn\n \n @node Running the test suite,Environment variables,Working on the JIT library,Internals\n-@anchor{internals/index running-the-test-suite}@anchor{196}\n+@anchor{internals/index running-the-test-suite}@anchor{198}\n @section Running the test suite\n \n \n@@ -13353,7 +13355,7 @@ and once a test has been compiled, you can debug it directly:\n @end menu\n \n @node Running under valgrind,,,Running the test suite\n-@anchor{internals/index running-under-valgrind}@anchor{197}\n+@anchor{internals/index running-under-valgrind}@anchor{199}\n @subsection Running under valgrind\n \n \n@@ -13401,15 +13403,15 @@ When running under valgrind, it's best to have configured gcc with\n various known false positives.\n \n @node Environment variables,Packaging notes,Running the test suite,Internals\n-@anchor{internals/index environment-variables}@anchor{198}\n+@anchor{internals/index environment-variables}@anchor{19a}\n @section Environment variables\n \n \n When running client code against a locally-built libgccjit, three\n environment variables need to be set up:\n \n @geindex environment variable; LD_LIBRARY_PATH\n-@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{199}\n+@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{19b}\n @deffn {Environment Variable} LD_LIBRARY_PATH\n \n @quotation\n@@ -13431,7 +13433,7 @@ libgccjit.so.0.0.1: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux),\n @end deffn\n \n @geindex environment variable; PATH\n-@anchor{internals/index envvar-PATH}@anchor{19a}\n+@anchor{internals/index envvar-PATH}@anchor{19c}\n @deffn {Environment Variable} PATH\n \n The library uses a driver executable for converting from .s assembler\n@@ -13450,7 +13452,7 @@ of development.\n @end deffn\n \n @geindex environment variable; LIBRARY_PATH\n-@anchor{internals/index envvar-LIBRARY_PATH}@anchor{19b}\n+@anchor{internals/index envvar-LIBRARY_PATH}@anchor{19d}\n @deffn {Environment Variable} LIBRARY_PATH\n \n The driver executable invokes the linker, and the latter needs to locate\n@@ -13486,11 +13488,11 @@ hello world\n @noindent\n \n @node Packaging notes,Overview of code structure,Environment variables,Internals\n-@anchor{internals/index packaging-notes}@anchor{19c}\n+@anchor{internals/index packaging-notes}@anchor{19e}\n @section Packaging notes\n \n \n-The configure-time option @pxref{192,,--enable-host-shared} is needed when\n+The configure-time option @pxref{194,,--enable-host-shared} is needed when\n building the jit in order to get position-independent code.  This will\n slow down the regular compiler by a few percent.  Hence when packaging gcc\n with libgccjit, please configure and build twice:\n@@ -13501,10 +13503,10 @@ with libgccjit, please configure and build twice:\n @itemize *\n \n @item \n-once without @pxref{192,,--enable-host-shared} for most languages, and\n+once without @pxref{194,,--enable-host-shared} for most languages, and\n \n @item \n-once with @pxref{192,,--enable-host-shared} for the jit\n+once with @pxref{194,,--enable-host-shared} for the jit\n @end itemize\n @end quotation\n \n@@ -13548,7 +13550,7 @@ popd\n @noindent\n \n @node Overview of code structure,Design notes,Packaging notes,Internals\n-@anchor{internals/index overview-of-code-structure}@anchor{19d}\n+@anchor{internals/index overview-of-code-structure}@anchor{19f}\n @section Overview of code structure\n \n \n@@ -14012,7 +14014,7 @@ JIT: gcc::jit::logger::~logger()\n @noindent\n \n @node Design notes,,Overview of code structure,Internals\n-@anchor{internals/index design-notes}@anchor{19e}\n+@anchor{internals/index design-notes}@anchor{1a0}\n @section Design notes\n \n \n@@ -14025,7 +14027,7 @@ close as possible to the error; failing that, a good place is within\n @code{recording::context::validate ()} in jit-recording.c.\n \n @node Indices and tables,Index,Internals,Top\n-@anchor{index indices-and-tables}@anchor{19f}\n+@anchor{index indices-and-tables}@anchor{1a1}\n @unnumbered Indices and tables\n \n "}, {"sha": "ac8d4f153928e3b3f8f73170cd552da2fb4d7a8a", "filename": "gcc/jit/docs/cp/topics/expressions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb6d84ba64c1513a4238691ec25e3137485f485/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb6d84ba64c1513a4238691ec25e3137485f485/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fexpressions.rst?ref=adb6d84ba64c1513a4238691ec25e3137485f485", "patch": "@@ -535,7 +535,7 @@ If you don't need to specify the location, this can also be expressed using\n an overloaded operator:\n \n .. function:: gccjit::lvalue \\\n-              gccjit::rvalue::operator* ();\n+              gccjit::rvalue::operator* ()\n \n    .. code-block:: c++\n "}, {"sha": "de3570a22805942459ec81ee1c4278030c9a3277", "filename": "gcc/jit/docs/cp/topics/functions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb6d84ba64c1513a4238691ec25e3137485f485/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ffunctions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb6d84ba64c1513a4238691ec25e3137485f485/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ffunctions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ffunctions.rst?ref=adb6d84ba64c1513a4238691ec25e3137485f485", "patch": "@@ -52,7 +52,7 @@ Functions\n                                               const char *name, \\\n                                               std::vector<param> &params, \\\n                                               int is_variadic, \\\n-                                              gccjit::location loc) \\\n+                                              gccjit::location loc)\n \n    Create a gcc_jit_function with the given name and parameters.\n "}]}