{"sha": "3277221c451318748ffe73c4205ca474fd0b806c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3NzIyMWM0NTEzMTg3NDhmZmU3M2M0MjA1Y2E0NzRmZDBiODA2Yw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-10-29T04:17:33Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-10-29T04:17:33Z"}, "message": "ggc.h (struct ggc_statistics): New type.\n\n\t* ggc.h (struct ggc_statistics): New type.\n\t(ggc_get_size): New function.\n\t(ggc_print_statistics): Likewise.\n\t* ggc-common.c (ggc_stats): New variable.\n\t(ggc_mark_rtx_children): Keep statistics.\n\t(ggc_mark_tree_children): Likewise.\n\t(ggc_print_statistics): New function.\n\t* ggc-page.c (struct globals): Add bytes_mapped field.\n\t(alloc_anon): Update it.\n\t(release_pages): Likewise.\n\t(ggc_get_size): New function.\n\t(ggc_page_print_statistics): New function.\n\t* ggc-simple.c (ggc_get_size): New function.\n\nFrom-SVN: r30251", "tree": {"sha": "8885ce2ea35f645ae60061b2f77bd345ad926d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8885ce2ea35f645ae60061b2f77bd345ad926d71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3277221c451318748ffe73c4205ca474fd0b806c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3277221c451318748ffe73c4205ca474fd0b806c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3277221c451318748ffe73c4205ca474fd0b806c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3277221c451318748ffe73c4205ca474fd0b806c/comments", "author": null, "committer": null, "parents": [{"sha": "13e8cf822f1c3b7bf2a3b213036c0f250e02296a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13e8cf822f1c3b7bf2a3b213036c0f250e02296a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13e8cf822f1c3b7bf2a3b213036c0f250e02296a"}], "stats": {"total": 220, "additions": 217, "deletions": 3}, "files": [{"sha": "aeb66bf3761299f402b96f27304222ca5112eca3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3277221c451318748ffe73c4205ca474fd0b806c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3277221c451318748ffe73c4205ca474fd0b806c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3277221c451318748ffe73c4205ca474fd0b806c", "patch": "@@ -1,3 +1,19 @@\n+Thu Oct 28 21:16:35 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* ggc.h (struct ggc_statistics): New type.\n+\t(ggc_get_size): New function.\n+\t(ggc_print_statistics): Likewise.\n+\t* ggc-common.c (ggc_stats): New variable.\n+\t(ggc_mark_rtx_children): Keep statistics.\n+\t(ggc_mark_tree_children): Likewise.\n+\t(ggc_print_statistics): New function.\n+\t* ggc-page.c (struct globals): Add bytes_mapped field.\n+\t(alloc_anon): Update it.\n+\t(release_pages): Likewise.\n+\t(ggc_get_size): New function.\n+\t(ggc_page_print_statistics): New function.\n+\t* ggc-simple.c (ggc_get_size): New function.\n+\t\n Fri Oct 29 06:32:44 1999  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* flow.c (propagate_block): When the last reference to a label"}, {"sha": "fdc032294f8793132c7304c446c2ac8b4e4db89e", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 94, "deletions": 3, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3277221c451318748ffe73c4205ca474fd0b806c/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3277221c451318748ffe73c4205ca474fd0b806c/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=3277221c451318748ffe73c4205ca474fd0b806c", "patch": "@@ -30,6 +30,9 @@\n #include \"varray.h\"\n #include \"ggc.h\"\n \n+/* Statistics about the allocation.  */\n+static ggc_statistics *ggc_stats;\n+\n static void ggc_mark_rtx_ptr PARAMS ((void *));\n static void ggc_mark_tree_ptr PARAMS ((void *));\n static void ggc_mark_tree_varray_ptr PARAMS ((void *));\n@@ -211,10 +214,18 @@ ggc_mark_rtx_children (r)\n {\n   const char *fmt;\n   int i;\n+  enum rtx_code code = GET_CODE (r);\n+\n+  /* Collect statistics, if appropriate.  */\n+  if (ggc_stats)\n+    {\n+      ++ggc_stats->num_rtxs[(int) code];\n+      ggc_stats->size_rtxs[(int) code] += ggc_get_size (r);\n+    }\n \n   /* ??? If (some of) these are really pass-dependant info, do we have\n      any right poking our noses in?  */\n-  switch (GET_CODE (r))\n+  switch (code)\n     {\n     case JUMP_INSN:\n       ggc_mark_rtx (JUMP_LABEL (r));\n@@ -289,12 +300,21 @@ void\n ggc_mark_tree_children (t)\n      tree t;\n {\n+  enum tree_code code = TREE_CODE (t);\n+\n+  /* Collect statistics, if appropriate.  */\n+  if (ggc_stats)\n+    {\n+      ++ggc_stats->num_trees[(int) code];\n+      ggc_stats->size_trees[(int) code] += ggc_get_size (t);\n+    }\n+\n   /* Bits from common.  */\n   ggc_mark_tree (TREE_TYPE (t));\n   ggc_mark_tree (TREE_CHAIN (t));\n \n   /* Some nodes require special handling.  */\n-  switch (TREE_CODE (t))\n+  switch (code)\n     {\n     case TREE_LIST:\n       ggc_mark_tree (TREE_PURPOSE (t));\n@@ -349,7 +369,7 @@ ggc_mark_tree_children (t)\n     }\n   \n   /* But in general we can handle them by class.  */\n-  switch (TREE_CODE_CLASS (TREE_CODE (t)))\n+  switch (TREE_CODE_CLASS (code))\n     {\n     case 'd': /* A decl node.  */\n       ggc_mark_string (DECL_SOURCE_FILE (t));\n@@ -469,3 +489,74 @@ ggc_alloc_string (contents, length)\n \n   return string;\n }\n+\n+/* Print statistics that are independent of the collector in use.  */\n+\n+void\n+ggc_print_statistics (stream, stats)\n+     FILE *stream;\n+     ggc_statistics *stats;\n+{\n+  int code;\n+\n+  /* Set the pointer so that during collection we will actually gather\n+     the statistics.  */\n+  ggc_stats = stats;\n+\n+  /* Then do one collection to fill in the statistics.  */\n+  ggc_collect ();\n+\n+  /* Total the statistics.  */\n+  for (code = 0; code < MAX_TREE_CODES; ++code)\n+    {\n+      stats->total_num_trees += stats->num_trees[code];\n+      stats->total_size_trees += stats->size_trees[code];\n+    }\n+  for (code = 0; code < NUM_RTX_CODE; ++code)\n+    {\n+      stats->total_num_rtxs += stats->num_rtxs[code];\n+      stats->total_size_rtxs += stats->size_rtxs[code];\n+    }\n+\n+  /* Print the statistics for trees.  */\n+  fprintf (stream, \"%-22s%-16s%-16s%-7s\\n\", \"Code\", \n+\t   \"Number\", \"Bytes\", \"% Total\");\n+  for (code = 0; code < MAX_TREE_CODES; ++code)\n+    if (ggc_stats->num_trees[code]) \n+      {\n+\tfprintf (stream, \"%s%*s%-15u %-15u %7.3f\\n\", \n+\t\t tree_code_name[code],\n+\t\t 22 - strlen (tree_code_name[code]), \"\",\n+\t\t ggc_stats->num_trees[code],\n+\t\t ggc_stats->size_trees[code],\n+\t\t (100 * ((double) ggc_stats->size_trees[code]) \n+\t\t  / ggc_stats->total_size_trees));\n+      }\n+  fprintf (stream,\n+\t   \"%-22s%-15u %-15u\\n\", \"Total\",\n+\t   ggc_stats->total_num_trees,\n+\t   ggc_stats->total_size_trees);\n+\n+  /* Print the statistics for RTL.  */\n+  fprintf (stream, \"\\n%-22s%-16s%-16s%-7s\\n\", \"Code\", \n+\t   \"Number\", \"Bytes\", \"% Total\");\n+  for (code = 0; code < NUM_RTX_CODE; ++code)\n+    if (ggc_stats->num_rtxs[code]) \n+      {\n+\tfprintf (stream, \"%s%*s%-15u %-15u %7.3f\\n\", \n+\t\t rtx_name[code],\n+\t\t 22 - strlen (rtx_name[code]), \"\",\n+\t\t ggc_stats->num_rtxs[code],\n+\t\t ggc_stats->size_rtxs[code],\n+\t\t (100 * ((double) ggc_stats->size_rtxs[code]) \n+\t\t  / ggc_stats->total_size_rtxs));\n+      }\n+  fprintf (stream,\n+\t   \"%-22s%-15u %-15u\\n\", \"Total\",\n+\t   ggc_stats->total_num_rtxs,\n+\t   ggc_stats->total_size_rtxs);\n+\n+\n+  /* Don't gather statistics any more.  */\n+  ggc_stats = NULL;\n+}"}, {"sha": "c1cef10a5fcdd5a9bd7ec9c031d004115f5b4da7", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3277221c451318748ffe73c4205ca474fd0b806c/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3277221c451318748ffe73c4205ca474fd0b806c/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=3277221c451318748ffe73c4205ca474fd0b806c", "patch": "@@ -226,6 +226,9 @@ static struct globals\n   /* Bytes currently allocated at the end of the last collection.  */\n   size_t allocated_last_gc;\n \n+  /* Total amount of memory mapped.  */\n+  size_t bytes_mapped;\n+\n   /* The current depth in the context stack.  */\n   unsigned char context_depth;\n \n@@ -444,6 +447,9 @@ alloc_anon (pref, size)\n #endif /* HAVE_VALLOC */\n #endif /* HAVE_MMAP */\n \n+  /* Remember that we allocated this memory.  */\n+  G.bytes_mapped += size;\n+\n   return page;\n }\n \n@@ -565,6 +571,7 @@ release_pages ()\n       else\n \t{\n \t  munmap (start, len);\n+\t  G.bytes_mapped -= len;\n \t  start = p->page;\n \t  len = p->bytes;\n \t}\n@@ -573,6 +580,7 @@ release_pages ()\n     }\n \n   munmap (start, len);\n+  G.bytes_mapped -= len;\n #else\n #ifdef HAVE_VALLOC\n   page_entry *p, *next;\n@@ -581,6 +589,7 @@ release_pages ()\n     {\n       next = p->next;\n       free (p->page);\n+      G.bytes_mapped -= p->bytes;\n       free (p);\n     }\n #endif /* HAVE_VALLOC */\n@@ -778,6 +787,14 @@ ggc_mark_if_gcable (p)\n   if (p && ggc_allocated_p (p))\n     ggc_set_mark (p);\n }\n+\n+size_t\n+ggc_get_size (p)\n+     void *p;\n+{\n+  page_entry *pe = lookup_page_table_entry (p);\n+  return 1 << pe->order;\n+}\n \f\n /* Initialize the ggc-mmap allocator.  */\n void\n@@ -1088,3 +1105,51 @@ ggc_collect ()\n \t       (unsigned long) G.allocated / 1024, time * 1e-6);\n     }\n }\n+\n+/* Print allocation statistics.  */\n+\n+void\n+ggc_page_print_statistics ()\n+{\n+  struct ggc_statistics stats;\n+  int i;\n+\n+  /* Clear the statistics.  */\n+  bzero (&stats, sizeof (stats));\n+  \n+  /* Make sure collection will really occur.  */\n+  G.allocated_last_gc = 0;\n+\n+  /* Collect and print the statistics common across collectors.  */\n+  ggc_print_statistics (stderr, &stats);\n+\n+  /* Collect some information about the various sizes of \n+     allocation.  */\n+  fprintf (stderr, \"\\n%-4s%-16s%-16s\\n\", \"Log\", \"Allocated\", \"Used\");\n+  for (i = 0; i < HOST_BITS_PER_PTR; ++i)\n+    {\n+      page_entry *p;\n+      size_t allocated;\n+      size_t in_use;\n+\n+      /* Skip empty entries.  */\n+      if (!G.pages[i])\n+\tcontinue;\n+\n+      allocated = in_use = 0;\n+\n+      /* Figure out the total number of bytes allocated for objects of\n+\t this size, and how many of them are actually in use.  */\n+      for (p = G.pages[i]; p; p = p->next)\n+\t{\n+\t  allocated += p->bytes;\n+\t  in_use += \n+\t    (OBJECTS_PER_PAGE (i) - p->num_free_objects) * (1 << i);\n+\t}\n+      fprintf (stderr, \"%-3d %-15u %-15u\\n\", i, allocated, in_use);\n+    }\n+\n+  /* Print out some global information.  */\n+  fprintf (stderr, \"\\nTotal bytes marked: %u\\n\", G.allocated);\n+  fprintf (stderr, \"Total bytes mapped: %u\\n\", G.bytes_mapped);\n+}"}, {"sha": "194863edc7d548d2764df5c162b29cb94030e583", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3277221c451318748ffe73c4205ca474fd0b806c/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3277221c451318748ffe73c4205ca474fd0b806c/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=3277221c451318748ffe73c4205ca474fd0b806c", "patch": "@@ -253,6 +253,15 @@ ggc_mark_if_gcable (p)\n   G.objects += 1;\n }\n \n+size_t\n+ggc_get_size (p)\n+     void *p;\n+{\n+  struct ggc_mem *x \n+    = (struct ggc_mem *) ((char *)p - offsetof (struct ggc_mem, u));\n+  return x->size;\n+}\n+\n static void\n clear_marks (x)\n      struct ggc_mem *x;"}, {"sha": "2c12a139935b7a2b487446203b07d0970b3a15e9", "filename": "gcc/ggc.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3277221c451318748ffe73c4205ca474fd0b806c/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3277221c451318748ffe73c4205ca474fd0b806c/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=3277221c451318748ffe73c4205ca474fd0b806c", "patch": "@@ -165,3 +165,36 @@ void mark_expr_status PROTO ((struct expr_status *));\n void mark_stmt_status PROTO ((struct stmt_status *));\n void mark_varasm_status PROTO ((struct varasm_status *));\n void mark_optab PROTO ((void *));\n+\n+/* Statistics.  */\n+\n+/* This structure contains the statistics common to all collectors.\n+   Particular collectors can extend this structure.  */\n+typedef struct ggc_statistics \n+{\n+  /* The Ith element is the number of nodes allocated with code I.  */\n+  unsigned num_trees[256];\n+  /* The Ith element is the number of bytes allocated by nodes with \n+     code I.  */\n+  size_t size_trees[256];\n+  /* The Ith element is the number of nodes allocated with code I.  */\n+  unsigned num_rtxs[256];\n+  /* The Ith element is the number of bytes allocated by nodes with \n+     code I.  */\n+  size_t size_rtxs[256];\n+  /* The total number of tree nodes allocated.  */\n+  unsigned total_num_trees;\n+  /* The total size of the tree nodes allocated.  */\n+  size_t total_size_trees;\n+  /* The total number of RTL nodes allocated.  */\n+  unsigned total_num_rtxs;\n+  /* The total size of the RTL nodes allocated.  */\n+  size_t total_size_rtxs;\n+} ggc_statistics;\n+\n+/* Return the number of bytes allocated at the indicated address.  */\n+size_t ggc_get_size PROTO ((void *));\n+\n+/* Used by the various collectors to gather and print statistics that\n+   do not depend on the collector in use.  */\n+void ggc_print_statistics PROTO ((FILE *, ggc_statistics *));"}]}