{"sha": "0011af7b9dce859b28a4dbdce2dff6d081193ddd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAxMWFmN2I5ZGNlODU5YjI4YTRkYmRjZTJkZmY2ZDA4MTE5M2RkZA==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-10-13T01:26:28Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-10-13T01:26:28Z"}, "message": "EVRP - Push op1 value range before pushing op0 value range.\n\ngcc/ChangeLog:\n\n2016-10-12  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vrp.c (evrp_dom_walker::try_find_new_range): Renamed from\n\ttry_add_new_range and made to eturn new range.\n\t(evrp_dom_walker::before_dom_children): Push op1 value range before\n\tpushing op0 value range.\n\n\ngcc/testsuite/ChangeLog:\n\n2016-10-12  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* gcc.dg/tree-ssa/evrp6.c: New test.\n\nFrom-SVN: r241083", "tree": {"sha": "0bf7abb84bde6fc4de931b535835cef98e0f5339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf7abb84bde6fc4de931b535835cef98e0f5339"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0011af7b9dce859b28a4dbdce2dff6d081193ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0011af7b9dce859b28a4dbdce2dff6d081193ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0011af7b9dce859b28a4dbdce2dff6d081193ddd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0011af7b9dce859b28a4dbdce2dff6d081193ddd/comments", "author": null, "committer": null, "parents": [{"sha": "457e189d04c97e71e14ab3ea8d5c32510b9a0616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457e189d04c97e71e14ab3ea8d5c32510b9a0616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/457e189d04c97e71e14ab3ea8d5c32510b9a0616"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "922a0b60045ff572f8bad2fbb43782308422d624", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0011af7b9dce859b28a4dbdce2dff6d081193ddd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0011af7b9dce859b28a4dbdce2dff6d081193ddd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0011af7b9dce859b28a4dbdce2dff6d081193ddd", "patch": "@@ -1,3 +1,10 @@\n+2016-10-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (evrp_dom_walker::try_find_new_range): Renamed from\n+\ttry_add_new_range and made to eturn new range.\n+\t(evrp_dom_walker::before_dom_children): Push op1 value range before\n+\tpushing op0 value range.\n+\n 2016-10-12  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/77937"}, {"sha": "e0d4f0bfb97db62edf9c3448d2df1e26674d35e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0011af7b9dce859b28a4dbdce2dff6d081193ddd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0011af7b9dce859b28a4dbdce2dff6d081193ddd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0011af7b9dce859b28a4dbdce2dff6d081193ddd", "patch": "@@ -1,3 +1,7 @@\n+2016-10-12  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* gcc.dg/tree-ssa/evrp6.c: New test.\n+\n 2016-10-12  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.target/powerpc/shrink-wrap-separate-0.c: New testcase."}, {"sha": "35d4d7459de4d1982ffa230b8b764ef898c3bb0a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/evrp6.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0011af7b9dce859b28a4dbdce2dff6d081193ddd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0011af7b9dce859b28a4dbdce2dff6d081193ddd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp6.c?ref=0011af7b9dce859b28a4dbdce2dff6d081193ddd", "patch": "@@ -0,0 +1,22 @@\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+extern void abort (void);\n+\n+int\n+foo (int k, int j)\n+{\n+  if (j >= 10)\n+    {\n+      if (j < k)\n+\t{\n+\t  k++;\n+\t  if (k < 10)\n+\t    abort ();\n+\t}\n+    }\n+\n+  return j;\n+}\n+/* { dg-final { scan-tree-dump \"\\\\\\[12, \\\\+INF\" \"evrp\" } } */"}, {"sha": "941c0fd34d816178be5f8ab3525d78e19c2fd61c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0011af7b9dce859b28a4dbdce2dff6d081193ddd/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0011af7b9dce859b28a4dbdce2dff6d081193ddd/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=0011af7b9dce859b28a4dbdce2dff6d081193ddd", "patch": "@@ -10646,7 +10646,7 @@ class evrp_dom_walker : public dom_walker\n   virtual void after_dom_children (basic_block);\n   void push_value_range (const_tree var, value_range *vr);\n   value_range *pop_value_range (const_tree var);\n-  void try_add_new_range (tree op, tree_code code, tree limit);\n+  value_range *try_find_new_range (tree op, tree_code code, tree limit);\n \n   /* Cond_stack holds the old VR.  */\n   auto_vec<std::pair <const_tree, value_range*> > stack;\n@@ -10655,10 +10655,10 @@ class evrp_dom_walker : public dom_walker\n };\n \n \n-/*  Add new range to OP such that (OP CODE LIMIT) is true.  */\n+/*  Find new range for OP such that (OP CODE LIMIT) is true.  */\n \n-void\n-evrp_dom_walker::try_add_new_range (tree op, tree_code code, tree limit)\n+value_range *\n+evrp_dom_walker::try_find_new_range (tree op, tree_code code, tree limit)\n {\n   value_range vr = VR_INITIALIZER;\n   value_range *old_vr = get_value_range (op);\n@@ -10674,8 +10674,9 @@ evrp_dom_walker::try_add_new_range (tree op, tree_code code, tree limit)\n     {\n       value_range *new_vr = vrp_value_range_pool.allocate ();\n       *new_vr = vr;\n-      push_value_range (op, new_vr);\n+      return new_vr;\n     }\n+  return NULL;\n }\n \n /* See if there is any new scope is entered with new VR and set that VR to\n@@ -10711,7 +10712,7 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t    code = invert_tree_comparison (gimple_cond_code (stmt),\n \t\t\t\t\t   HONOR_NANS (op0));\n \t  /* Add VR when (OP0 CODE OP1) condition is true.  */\n-\t  try_add_new_range (op0, code, op1);\n+\t  value_range *op0_range = try_find_new_range (op0, code, op1);\n \n \t  /* Register ranges for y in x < y where\n \t     y might have ranges that are useful.  */\n@@ -10724,8 +10725,13 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t\t\t\t\t\t\t  &new_code, &limit))\n \t    {\n \t      /* Add VR when (OP1 NEW_CODE LIMIT) condition is true.  */\n-\t      try_add_new_range (op1, new_code, limit);\n+\t      value_range *op1_range = try_find_new_range (op1, new_code, limit);\n+\t      if (op1_range)\n+\t\tpush_value_range (op1, op1_range);\n \t    }\n+\n+\t  if (op0_range)\n+\t    push_value_range (op0, op0_range);\n \t}\n     }\n "}]}