{"sha": "3d9684ae6fc8c6d3697654128a135513c49e41fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q5Njg0YWU2ZmM4YzZkMzY5NzY1NDEyOGExMzU1MTNjNDllNDFmYw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-04-29T13:46:23Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-04-29T13:46:23Z"}, "message": "Remove PUSH_ARGS_REVERSED from the RTL expander.\n\ngcc/\n\n\t* calls.c (initialize_argument_information): Always treat\n\tPUSH_ARGS_REVERSED as 1, simplify code accordingly.\n\t(expand_call): Likewise.\n\t(emit_library_call_calue_1): Likewise.\n\t* expr.c (PUSH_ARGS_REVERSED): Do not define.\n\t(emit_push_insn): Always treat PUSH_ARGS_REVERSED as 1, simplify\n\tcode accordingly.\n\nFrom-SVN: r209897", "tree": {"sha": "174007f2863ab68c6254f19105b6f3271c748fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/174007f2863ab68c6254f19105b6f3271c748fbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d9684ae6fc8c6d3697654128a135513c49e41fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9684ae6fc8c6d3697654128a135513c49e41fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9684ae6fc8c6d3697654128a135513c49e41fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9684ae6fc8c6d3697654128a135513c49e41fc/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9575df4af0c964f4a7ab3743a9b4cde2c0e24237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9575df4af0c964f4a7ab3743a9b4cde2c0e24237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9575df4af0c964f4a7ab3743a9b4cde2c0e24237"}], "stats": {"total": 102, "additions": 25, "deletions": 77}, "files": [{"sha": "bc0bc1a1c629b63f963976b3ee4d17efa0b69af0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9684ae6fc8c6d3697654128a135513c49e41fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9684ae6fc8c6d3697654128a135513c49e41fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d9684ae6fc8c6d3697654128a135513c49e41fc", "patch": "@@ -1,3 +1,13 @@\n+2014-04-29  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* calls.c (initialize_argument_information): Always treat\n+\tPUSH_ARGS_REVERSED as 1, simplify code accordingly.\n+\t(expand_call): Likewise.\n+\t(emit_library_call_calue_1): Likewise.\n+\t* expr.c (PUSH_ARGS_REVERSED): Do not define.\n+\t(emit_push_insn): Always treat PUSH_ARGS_REVERSED as 1, simplify\n+\tcode accordingly.\n+\n 2014-04-29  Nick Clifton  <nickc@redhat.com>\n \n \t* config/arc/arc.c (arc_select_cc_mode): Fix parentheses."}, {"sha": "78fe7d8525b03dfde8e5a3530d2e0d0f0ff5093a", "filename": "gcc/calls.c", "status": "modified", "additions": 15, "deletions": 57, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9684ae6fc8c6d3697654128a135513c49e41fc/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9684ae6fc8c6d3697654128a135513c49e41fc/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=3d9684ae6fc8c6d3697654128a135513c49e41fc", "patch": "@@ -1104,8 +1104,6 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n {\n   CUMULATIVE_ARGS *args_so_far_pnt = get_cumulative_args (args_so_far);\n   location_t loc = EXPR_LOCATION (exp);\n-  /* 1 if scanning parms front to back, -1 if scanning back to front.  */\n-  int inc;\n \n   /* Count arg position in order args appear.  */\n   int argpos;\n@@ -1116,22 +1114,9 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n   args_size->var = 0;\n \n   /* In this loop, we consider args in the order they are written.\n-     We fill up ARGS from the front or from the back if necessary\n-     so that in any case the first arg to be pushed ends up at the front.  */\n+     We fill up ARGS from the back.  */\n \n-  if (PUSH_ARGS_REVERSED)\n-    {\n-      i = num_actuals - 1, inc = -1;\n-      /* In this case, must reverse order of args\n-\t so that we compute and push the last arg first.  */\n-    }\n-  else\n-    {\n-      i = 0, inc = 1;\n-    }\n-\n-  /* First fill in the actual arguments in the ARGS array, splitting\n-     complex arguments if necessary.  */\n+  i = num_actuals - 1;\n   {\n     int j = i;\n     call_expr_arg_iterator iter;\n@@ -1140,7 +1125,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n     if (struct_value_addr_value)\n       {\n \targs[j].tree_value = struct_value_addr_value;\n-\tj += inc;\n+\tj--;\n       }\n     FOR_EACH_CALL_EXPR_ARG (arg, iter, exp)\n       {\n@@ -1152,17 +1137,17 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t  {\n \t    tree subtype = TREE_TYPE (argtype);\n \t    args[j].tree_value = build1 (REALPART_EXPR, subtype, arg);\n-\t    j += inc;\n+\t    j--;\n \t    args[j].tree_value = build1 (IMAGPART_EXPR, subtype, arg);\n \t  }\n \telse\n \t  args[j].tree_value = arg;\n-\tj += inc;\n+\tj--;\n       }\n   }\n \n   /* I counts args in order (to be) pushed; ARGPOS counts in order written.  */\n-  for (argpos = 0; argpos < num_actuals; i += inc, argpos++)\n+  for (argpos = 0; argpos < num_actuals; i--, argpos++)\n     {\n       tree type = TREE_TYPE (args[i].tree_value);\n       int unsignedp;\n@@ -2952,9 +2937,8 @@ expand_call (tree exp, rtx target, int ignore)\n \n       compute_argument_addresses (args, argblock, num_actuals);\n \n-      /* If we push args individually in reverse order, perform stack alignment\n-\t before the first push (the last arg).  */\n-      if (PUSH_ARGS_REVERSED && argblock == 0\n+      /* Perform stack alignment before the first push (the last arg).  */\n+      if (argblock == 0\n           && adjusted_args_size.constant > reg_parm_stack_space\n \t  && adjusted_args_size.constant != unadjusted_args_size)\n \t{\n@@ -3097,12 +3081,6 @@ expand_call (tree exp, rtx target, int ignore)\n \t\tsibcall_failure = 1;\n \t    }\n \n-      /* If we pushed args in forward order, perform stack alignment\n-\t after pushing the last arg.  */\n-      if (!PUSH_ARGS_REVERSED && argblock == 0)\n-\tanti_adjust_stack (GEN_INT (adjusted_args_size.constant\n-\t\t\t\t    - unadjusted_args_size));\n-\n       /* If register arguments require space on the stack and stack space\n \t was not preallocated, allocate stack space here for arguments\n \t passed in registers.  */\n@@ -3152,8 +3130,7 @@ expand_call (tree exp, rtx target, int ignore)\n       if (pass == 1 && (return_flags & ERF_RETURNS_ARG))\n \t{\n \t  int arg_nr = return_flags & ERF_RETURN_ARG_MASK;\n-\t  if (PUSH_ARGS_REVERSED)\n-\t    arg_nr = num_actuals - arg_nr - 1;\n+\t  arg_nr = num_actuals - arg_nr - 1;\n \t  if (arg_nr >= 0\n \t      && arg_nr < num_actuals\n \t      && args[arg_nr].reg\n@@ -3610,7 +3587,6 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n      isn't present here, so we default to native calling abi here.  */\n   tree fndecl ATTRIBUTE_UNUSED = NULL_TREE; /* library calls default to host calling abi ? */\n   tree fntype ATTRIBUTE_UNUSED = NULL_TREE; /* library calls default to host calling abi ? */\n-  int inc;\n   int count;\n   rtx argblock = 0;\n   CUMULATIVE_ARGS args_so_far_v;\n@@ -3959,22 +3935,13 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \targblock = push_block (GEN_INT (args_size.constant), 0, 0);\n     }\n \n-  /* If we push args individually in reverse order, perform stack alignment\n+  /* We push args individually in reverse order, perform stack alignment\n      before the first push (the last arg).  */\n-  if (argblock == 0 && PUSH_ARGS_REVERSED)\n+  if (argblock == 0)\n     anti_adjust_stack (GEN_INT (args_size.constant\n \t\t\t\t- original_args_size.constant));\n \n-  if (PUSH_ARGS_REVERSED)\n-    {\n-      inc = -1;\n-      argnum = nargs - 1;\n-    }\n-  else\n-    {\n-      inc = 1;\n-      argnum = 0;\n-    }\n+  argnum = nargs - 1;\n \n #ifdef REG_PARM_STACK_SPACE\n   if (ACCUMULATE_OUTGOING_ARGS)\n@@ -3991,7 +3958,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \n   /* ARGNUM indexes the ARGVEC array in the order in which the arguments\n      are to be pushed.  */\n-  for (count = 0; count < nargs; count++, argnum += inc)\n+  for (count = 0; count < nargs; count++, argnum--)\n     {\n       enum machine_mode mode = argvec[argnum].mode;\n       rtx val = argvec[argnum].value;\n@@ -4093,24 +4060,15 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t}\n     }\n \n-  /* If we pushed args in forward order, perform stack alignment\n-     after pushing the last arg.  */\n-  if (argblock == 0 && !PUSH_ARGS_REVERSED)\n-    anti_adjust_stack (GEN_INT (args_size.constant\n-\t\t\t\t- original_args_size.constant));\n-\n-  if (PUSH_ARGS_REVERSED)\n-    argnum = nargs - 1;\n-  else\n-    argnum = 0;\n+  argnum = nargs - 1;\n \n   fun = prepare_call_address (NULL, fun, NULL, &call_fusage, 0, 0);\n \n   /* Now load any reg parms into their regs.  */\n \n   /* ARGNUM indexes the ARGVEC array in the order in which the arguments\n      are to be pushed.  */\n-  for (count = 0; count < nargs; count++, argnum += inc)\n+  for (count = 0; count < nargs; count++, argnum--)\n     {\n       enum machine_mode mode = argvec[argnum].mode;\n       rtx val = argvec[argnum].value;"}, {"sha": "767b889d899ac8edfc2163236a68e679f1f3875c", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9684ae6fc8c6d3697654128a135513c49e41fc/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9684ae6fc8c6d3697654128a135513c49e41fc/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3d9684ae6fc8c6d3697654128a135513c49e41fc", "patch": "@@ -68,22 +68,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-address.h\"\n #include \"cfgexpand.h\"\n \n-/* Decide whether a function's arguments should be processed\n-   from first to last or from last to first.\n-\n-   They should if the stack and args grow in opposite directions, but\n-   only if we have push insns.  */\n-\n-#ifdef PUSH_ROUNDING\n-\n-#ifndef PUSH_ARGS_REVERSED\n-#if defined (STACK_GROWS_DOWNWARD) != defined (ARGS_GROW_DOWNWARD)\n-#define PUSH_ARGS_REVERSED\t/* If it's last to first.  */\n-#endif\n-#endif\n-\n-#endif\n-\n #ifndef STACK_PUSH_CODE\n #ifdef STACK_GROWS_DOWNWARD\n #define STACK_PUSH_CODE PRE_DEC\n@@ -4365,11 +4349,7 @@ emit_push_insn (rtx x, enum machine_mode mode, tree type, rtx size,\n       /* Loop over all the words allocated on the stack for this arg.  */\n       /* We can do it by words, because any scalar bigger than a word\n \t has a size a multiple of a word.  */\n-#ifndef PUSH_ARGS_REVERSED\n-      for (i = not_stack; i < size; i++)\n-#else\n       for (i = size - 1; i >= not_stack; i--)\n-#endif\n \tif (i >= not_stack + offset)\n \t  emit_push_insn (operand_subword_force (x, i, mode),\n \t\t\t  word_mode, NULL_TREE, NULL_RTX, align, 0, NULL_RTX,"}]}