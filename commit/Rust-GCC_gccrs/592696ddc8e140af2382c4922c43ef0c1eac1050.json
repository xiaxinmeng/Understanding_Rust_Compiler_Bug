{"sha": "592696ddc8e140af2382c4922c43ef0c1eac1050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkyNjk2ZGRjOGUxNDBhZjIzODJjNDkyMmM0M2VmMGMxZWFjMTA1MA==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-10-12T13:46:50Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-10-12T13:46:50Z"}, "message": "rs6000.c: Remove uses of \"register\" specifier in declarations of arguments and local...\n\n        * config/rs6000/rs6000.c: Remove uses of \"register\" specifier in\n        declarations of arguments and local variables.\n\nFrom-SVN: r46231", "tree": {"sha": "ceaa01642e5d91d14d603f06686ddf3e1b405cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceaa01642e5d91d14d603f06686ddf3e1b405cbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/592696ddc8e140af2382c4922c43ef0c1eac1050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592696ddc8e140af2382c4922c43ef0c1eac1050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/592696ddc8e140af2382c4922c43ef0c1eac1050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592696ddc8e140af2382c4922c43ef0c1eac1050/comments", "author": null, "committer": null, "parents": [{"sha": "4717f6c17c4a5ccb227eac9d2dab546fb3b0d608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4717f6c17c4a5ccb227eac9d2dab546fb3b0d608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4717f6c17c4a5ccb227eac9d2dab546fb3b0d608"}], "stats": {"total": 129, "additions": 67, "deletions": 62}, "files": [{"sha": "0feb6a787d34f0dc810f89318b5c00cca9f772ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592696ddc8e140af2382c4922c43ef0c1eac1050/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592696ddc8e140af2382c4922c43ef0c1eac1050/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=592696ddc8e140af2382c4922c43ef0c1eac1050", "patch": "@@ -1,3 +1,8 @@\n+2001-10-12  Stan Shebs  <shebs@apple.com>\n+\n+\t* config/rs6000/rs6000.c: Remove uses of \"register\" specifier in\n+\tdeclarations of arguments and local variables.\n+\n 2001-10-12  Christopher Faylor  <cgf@redhat.com>\n \n \t* config/i386/cygwin.h: Revert erroneous checkin of crtbegin and"}, {"sha": "d7564496fc2bc06981ca9e56729a55543cf229c0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592696ddc8e140af2382c4922c43ef0c1eac1050/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592696ddc8e140af2382c4922c43ef0c1eac1050/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=592696ddc8e140af2382c4922c43ef0c1eac1050", "patch": "@@ -552,7 +552,7 @@ direct_return ()\n \n int\n any_operand (op, mode)\n-     register rtx op ATTRIBUTE_UNUSED;\n+     rtx op ATTRIBUTE_UNUSED;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return 1;\n@@ -561,7 +561,7 @@ any_operand (op, mode)\n /* Returns 1 if op is the count register */\n int\n count_register_operand(op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != REG)\n@@ -578,7 +578,7 @@ count_register_operand(op, mode)\n \n int\n xer_operand(op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != REG)\n@@ -594,7 +594,7 @@ xer_operand(op, mode)\n \n int\n short_cint_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n@@ -605,7 +605,7 @@ short_cint_operand (op, mode)\n \n int\n u_short_cint_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n@@ -616,7 +616,7 @@ u_short_cint_operand (op, mode)\n \n int\n non_short_cint_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n@@ -628,7 +628,7 @@ non_short_cint_operand (op, mode)\n \n int\n exact_log2_cint_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n@@ -641,7 +641,7 @@ exact_log2_cint_operand (op, mode)\n \n int\n gpc_reg_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   return (register_operand (op, mode)\n@@ -656,7 +656,7 @@ gpc_reg_operand (op, mode)\n \n int\n cc_reg_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   return (register_operand (op, mode)\n@@ -670,7 +670,7 @@ cc_reg_operand (op, mode)\n \n int\n cc_reg_not_cr0_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   return (register_operand (op, mode)\n@@ -685,7 +685,7 @@ cc_reg_not_cr0_operand (op, mode)\n \n int\n reg_or_short_operand (op, mode)\n-      register rtx op;\n+      rtx op;\n       enum machine_mode mode;\n {\n   return short_cint_operand (op, mode) || gpc_reg_operand (op, mode);\n@@ -696,7 +696,7 @@ reg_or_short_operand (op, mode)\n \n int\n reg_or_neg_short_operand (op, mode)\n-      register rtx op;\n+      rtx op;\n       enum machine_mode mode;\n {\n   if (GET_CODE (op) == CONST_INT)\n@@ -710,7 +710,7 @@ reg_or_neg_short_operand (op, mode)\n \n int\n reg_or_u_short_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   return u_short_cint_operand (op, mode) || gpc_reg_operand (op, mode);\n@@ -721,7 +721,7 @@ reg_or_u_short_operand (op, mode)\n \n int\n reg_or_cint_operand (op, mode)\n-    register rtx op;\n+    rtx op;\n     enum machine_mode mode;\n {\n      return (GET_CODE (op) == CONST_INT || gpc_reg_operand (op, mode));\n@@ -732,7 +732,7 @@ reg_or_cint_operand (op, mode)\n \n int\n reg_or_arith_cint_operand (op, mode)\n-    register rtx op;\n+    rtx op;\n     enum machine_mode mode;\n {\n      return (gpc_reg_operand (op, mode)\n@@ -749,7 +749,7 @@ reg_or_arith_cint_operand (op, mode)\n \n int\n reg_or_add_cint64_operand (op, mode)\n-    register rtx op;\n+    rtx op;\n     enum machine_mode mode;\n {\n      return (gpc_reg_operand (op, mode)\n@@ -767,7 +767,7 @@ reg_or_add_cint64_operand (op, mode)\n \n int\n reg_or_sub_cint64_operand (op, mode)\n-    register rtx op;\n+    rtx op;\n     enum machine_mode mode;\n {\n      return (gpc_reg_operand (op, mode)\n@@ -785,7 +785,7 @@ reg_or_sub_cint64_operand (op, mode)\n \n int\n reg_or_logical_cint_operand (op, mode)\n-    register rtx op;\n+    rtx op;\n     enum machine_mode mode;\n {\n   if (GET_CODE (op) == CONST_INT)\n@@ -818,7 +818,7 @@ reg_or_logical_cint_operand (op, mode)\n \n int\n got_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == SYMBOL_REF\n@@ -831,7 +831,7 @@ got_operand (op, mode)\n \n int\n got_no_const_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == LABEL_REF);\n@@ -960,8 +960,8 @@ num_insns_constant (op, mode)\n \n int\n easy_fp_constant (op, mode)\n-     register rtx op;\n-     register enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode mode;\n {\n   if (GET_CODE (op) != CONST_DOUBLE\n       || GET_MODE (op) != mode\n@@ -1019,8 +1019,8 @@ easy_fp_constant (op, mode)\n /* Return 1 if the operand is 0.0.  */\n int\n zero_fp_constant (op, mode)\n-     register rtx op;\n-     register enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode mode;\n {\n   return GET_MODE_CLASS (mode) == MODE_FLOAT && op == CONST0_RTX (mode);\n }\n@@ -1032,7 +1032,7 @@ zero_fp_constant (op, mode)\n \n int\n volatile_mem_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   if (GET_CODE (op) != MEM)\n@@ -1057,7 +1057,7 @@ volatile_mem_operand (op, mode)\n \n int\n offsettable_mem_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == MEM)\n@@ -1070,7 +1070,7 @@ offsettable_mem_operand (op, mode)\n \n int\n mem_or_easy_const_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   return memory_operand (op, mode) || easy_fp_constant (op, mode);\n@@ -1081,7 +1081,7 @@ mem_or_easy_const_operand (op, mode)\n \n int\n add_operand (op, mode)\n-    register rtx op;\n+    rtx op;\n     enum machine_mode mode;\n {\n   if (GET_CODE (op) == CONST_INT)\n@@ -1095,7 +1095,7 @@ add_operand (op, mode)\n \n int\n non_add_cint_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n@@ -1108,7 +1108,7 @@ non_add_cint_operand (op, mode)\n \n int\n logical_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   HOST_WIDE_INT opl, oph;\n@@ -1147,7 +1147,7 @@ logical_operand (op, mode)\n \n int\n non_logical_cint_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   return ((GET_CODE (op) == CONST_INT || GET_CODE (op) == CONST_DOUBLE)\n@@ -1162,7 +1162,7 @@ non_logical_cint_operand (op, mode)\n \n int\n mask_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   HOST_WIDE_INT c, lsb;\n@@ -1204,7 +1204,7 @@ mask_operand (op, mode)\n \n int\n mask64_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   if (GET_CODE (op) == CONST_INT)\n@@ -1262,7 +1262,7 @@ mask64_operand (op, mode)\n \n int\n and64_operand (op, mode)\n-    register rtx op;\n+    rtx op;\n     enum machine_mode mode;\n {\n   if (fixed_regs[CR0_REGNO])\t/* CR0 not available, don't do andi./andis. */\n@@ -1276,7 +1276,7 @@ and64_operand (op, mode)\n \n int\n and_operand (op, mode)\n-    register rtx op;\n+    rtx op;\n     enum machine_mode mode;\n {\n   if (fixed_regs[CR0_REGNO])\t/* CR0 not available, don't do andi./andis. */\n@@ -1289,8 +1289,8 @@ and_operand (op, mode)\n \n int\n reg_or_mem_operand (op, mode)\n-     register rtx op;\n-     register enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode mode;\n {\n   return (gpc_reg_operand (op, mode)\n \t  || memory_operand (op, mode)\n@@ -1303,8 +1303,8 @@ reg_or_mem_operand (op, mode)\n \n int\n lwa_operand (op, mode)\n-     register rtx op;\n-     register enum machine_mode mode;\n+     rtx op;\n+     enum machine_mode mode;\n {\n   rtx inner = op;\n \n@@ -1326,7 +1326,7 @@ lwa_operand (op, mode)\n \n int\n call_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   if (mode != VOIDmode && GET_MODE (op) != mode)\n@@ -1342,7 +1342,7 @@ call_operand (op, mode)\n \n int\n current_file_function_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == SYMBOL_REF\n@@ -1356,7 +1356,7 @@ current_file_function_operand (op, mode)\n \n int\n input_operand (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   /* Memory is always valid.  */\n@@ -3506,7 +3506,7 @@ validate_condition_mode (code, mode)\n \n int\n branch_comparison_operator (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   enum rtx_code code = GET_CODE (op);\n@@ -3530,7 +3530,7 @@ branch_comparison_operator (op, mode)\n \n int\n branch_positive_comparison_operator (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   enum rtx_code code;\n@@ -3551,7 +3551,7 @@ branch_positive_comparison_operator (op, mode)\n \n int\n scc_comparison_operator (op, mode)\n-     register rtx op;\n+     rtx op;\n      enum machine_mode mode;\n {\n   enum rtx_code code = GET_CODE (op);\n@@ -3618,8 +3618,8 @@ min_max_operator (op, mode)\n \n int\n includes_lshift_p (shiftop, andop)\n-     register rtx shiftop;\n-     register rtx andop;\n+     rtx shiftop;\n+     rtx andop;\n {\n   unsigned HOST_WIDE_INT shift_mask = ~(unsigned HOST_WIDE_INT) 0;\n \n@@ -3632,8 +3632,8 @@ includes_lshift_p (shiftop, andop)\n \n int\n includes_rshift_p (shiftop, andop)\n-     register rtx shiftop;\n-     register rtx andop;\n+     rtx shiftop;\n+     rtx andop;\n {\n   unsigned HOST_WIDE_INT shift_mask = ~(unsigned HOST_WIDE_INT) 0;\n \n@@ -3648,8 +3648,8 @@ includes_rshift_p (shiftop, andop)\n \n int\n includes_rldic_lshift_p (shiftop, andop)\n-     register rtx shiftop;\n-     register rtx andop;\n+     rtx shiftop;\n+     rtx andop;\n {\n   if (GET_CODE (andop) == CONST_INT)\n     {\n@@ -3743,8 +3743,8 @@ includes_rldic_lshift_p (shiftop, andop)\n \n int\n includes_rldicr_lshift_p (shiftop, andop)\n-     register rtx shiftop;\n-     register rtx andop;\n+     rtx shiftop;\n+     rtx andop;\n {\n   if (GET_CODE (andop) == CONST_INT)\n     {\n@@ -3831,8 +3831,8 @@ registers_ok_for_quad_peep (reg1, reg2)\n \n int\n addrs_ok_for_quad_peep (addr1, addr2)\n-     register rtx addr1;\n-     register rtx addr2;\n+     rtx addr1;\n+     rtx addr2;\n {\n   unsigned int reg1;\n   int offset1;\n@@ -3959,7 +3959,7 @@ secondary_reload_class (class, mode, in)\n \n int\n ccr_bit (op, scc_p)\n-     register rtx op;\n+     rtx op;\n      int scc_p;\n {\n   enum rtx_code code = GET_CODE (op);\n@@ -4744,7 +4744,7 @@ print_operand (file, x, code)\n void\n print_operand_address (file, x)\n      FILE *file;\n-     register rtx x;\n+     rtx x;\n {\n   if (GET_CODE (x) == REG)\n     fprintf (file, \"0(%s)\", reg_names[ REGNO (x) ]);\n@@ -5322,7 +5322,7 @@ first_fp_reg_to_save ()\n    complicated by having two separate calling sequences, the AIX calling\n    sequence and the V.4 calling sequence.\n \n-   AIX (and Darwin/Mac OS) stack frames look like:\n+   AIX (and Darwin/Mac OS X) stack frames look like:\n \t\t\t\t\t\t\t  32-bit  64-bit\n \tSP---->\t+---------------------------------------+\n \t\t| back chain to caller\t\t\t| 0\t  0\n@@ -5434,7 +5434,7 @@ rs6000_stack_info ()\n   info_ptr->first_fp_reg_save = first_fp_reg_to_save ();\n   info_ptr->fp_size = 8 * (64 - info_ptr->first_fp_reg_save);\n \n-  /* Does this function call anything? */\n+  /* Does this function call anything?  */\n   info_ptr->calls_p = (! current_function_is_leaf\n \t\t       || cfun->machine->ra_needs_full_frame);\n \n@@ -5478,7 +5478,7 @@ rs6000_stack_info ()\n   else\n     ehrd_size = 0;\n \n-  /* Determine various sizes */\n+  /* Determine various sizes.  */\n   info_ptr->reg_size     = reg_size;\n   info_ptr->fixed_size   = RS6000_SAVE_AREA;\n   info_ptr->varargs_size = RS6000_VARARGS_AREA;\n@@ -5493,7 +5493,7 @@ rs6000_stack_info ()\n   if (DEFAULT_ABI == ABI_DARWIN)\n     info_ptr->save_size = RS6000_ALIGN (info_ptr->save_size, 16);\n \n-  /* Calculate the offsets */\n+  /* Calculate the offsets.  */\n   switch (abi)\n     {\n     case ABI_NONE:\n@@ -8487,7 +8487,7 @@ rs6000_add_gc_roots ()\n \n int\n symbolic_operand (op)\n-     register rtx op;\n+     rtx op;\n {\n   switch (GET_CODE (op))\n     {"}]}