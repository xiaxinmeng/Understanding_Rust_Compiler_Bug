{"sha": "fda05890956b883a25ea35edfa65db76a50c3da3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRhMDU4OTA5NTZiODgzYTI1ZWEzNWVkZmE2NWRiNzZhNTBjM2RhMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-02T18:06:27Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-02T18:06:27Z"}, "message": "re PR tree-optimization/21294 (Missed removal of null pointer check)\n\ngcc/\n\tPR tree-optimization/21294\n\t* tree-vrp.c (vrp_expr_computes_nonzero): New.\n\t(extract_range_from_expr): Call vrp_expr_computes_nonzero.\n\ntestsuite/\n\tPR tree-optimization/21294\n\t* gcc.dg/tree-ssa/pr21294.c: New.\n\nFrom-SVN: r99111", "tree": {"sha": "007185f8315d22ba9507e23cada2994174208884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/007185f8315d22ba9507e23cada2994174208884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fda05890956b883a25ea35edfa65db76a50c3da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda05890956b883a25ea35edfa65db76a50c3da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda05890956b883a25ea35edfa65db76a50c3da3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda05890956b883a25ea35edfa65db76a50c3da3/comments", "author": null, "committer": null, "parents": [{"sha": "cbbf94032814561e9fbc7a5330b73d77bbcaa8ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbbf94032814561e9fbc7a5330b73d77bbcaa8ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbbf94032814561e9fbc7a5330b73d77bbcaa8ed"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "20bf784b637da4f40e0a664754d125253e8fb986", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda05890956b883a25ea35edfa65db76a50c3da3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda05890956b883a25ea35edfa65db76a50c3da3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fda05890956b883a25ea35edfa65db76a50c3da3", "patch": "@@ -1,3 +1,9 @@\n+2005-05-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/21294\n+\t* tree-vrp.c (vrp_expr_computes_nonzero): New.\n+\t(extract_range_from_expr): Call vrp_expr_computes_nonzero.\n+\n 2005-05-02  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR 19985"}, {"sha": "46c9e1db3ee31eda4f005c14da141eb4b888da41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda05890956b883a25ea35edfa65db76a50c3da3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda05890956b883a25ea35edfa65db76a50c3da3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fda05890956b883a25ea35edfa65db76a50c3da3", "patch": "@@ -1,3 +1,8 @@\n+2005-05-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/21294\n+\t* gcc.dg/tree-ssa/pr21294.c: New.\n+\n 2005-05-02  Paolo Bonzini  <bonzini@gnu.org>\n \n         * gcc.dg/altivec-3.c (vec_store): Do not use the old"}, {"sha": "dc90dbde3aa1890f218821da582ad9692a14d361", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21294.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda05890956b883a25ea35edfa65db76a50c3da3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda05890956b883a25ea35edfa65db76a50c3da3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21294.c?ref=fda05890956b883a25ea35edfa65db76a50c3da3", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/21294\n+   VRP did not notice that an address of the form &p->i is nonnull\n+   when p is known to be nonnull.  In this testcase, noticing that\n+   allows us to eliminate the second \"if\" statement.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp-details\" } */\n+\n+struct f {\n+  int i;\n+};\n+\n+int\n+foo (struct f *p)\n+{\n+  if (p != 0)\n+    if (&p->i != 0)\n+      return 123;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Folding predicate\" 1 \"vrp\"} } */\n+/* { dg-final { cleanup-tree-dump \"vrp\" } } */"}, {"sha": "e6cb017bba07993884ab08f40a59ef194bb5d5a2", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda05890956b883a25ea35edfa65db76a50c3da3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda05890956b883a25ea35edfa65db76a50c3da3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=fda05890956b883a25ea35edfa65db76a50c3da3", "patch": "@@ -717,6 +717,35 @@ extract_range_from_binary_expr (value_range *vr, tree expr)\n }\n \n \n+/* Like expr_computes_nonzero, but this function uses value ranges\n+   obtained so far.  */\n+\n+static bool\n+vrp_expr_computes_nonzero (tree expr)\n+{\n+  if (expr_computes_nonzero (expr))\n+    return true;\n+\n+  /* If we have an expression of the form &X->a, then the expression\n+     is nonnull if X is nonnull.  */\n+  if (TREE_CODE (expr) == ADDR_EXPR)\n+    {\n+      tree base = get_base_address (TREE_OPERAND (expr, 0));\n+\n+      if (base != NULL_TREE\n+\t  && TREE_CODE (base) == INDIRECT_REF\n+\t  && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME)\n+\t{\n+\t  value_range *vr = get_value_range (TREE_OPERAND (base, 0));\n+\t  if (range_is_nonnull (vr))\n+\t    return true;\n+\t}\n+    }\n+\n+  return false;\n+}\n+\n+\n /* Extract range information from a unary expression EXPR based on\n    the range of its operand and the expression code.  */\n \n@@ -833,7 +862,7 @@ extract_range_from_expr (value_range *vr, tree expr)\n     extract_range_from_binary_expr (vr, expr);\n   else if (TREE_CODE_CLASS (code) == tcc_unary)\n     extract_range_from_unary_expr (vr, expr);\n-  else if (expr_computes_nonzero (expr))\n+  else if (vrp_expr_computes_nonzero (expr))\n     set_value_range_to_nonnull (vr, TREE_TYPE (expr));\n   else if (TREE_CODE (expr) == INTEGER_CST)\n     set_value_range (vr, VR_RANGE, expr, expr);"}]}