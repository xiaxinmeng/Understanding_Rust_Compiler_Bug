{"sha": "830bc5507b328fa2218e57a5c500336110ce0a40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMwYmM1NTA3YjMyOGZhMjIxOGU1N2E1YzUwMDMzNjExMGNlMGE0MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-28T14:42:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-28T14:42:17Z"}, "message": "tree-ssa-ccp.c (ccp_fold_stmt): Fold calls and propagate into call arguments.\n\n2010-01-28  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-ccp.c (ccp_fold_stmt): Fold calls and propagate\n\tinto call arguments.\n\n\t* gcc.dg/Wobjsize-1.h: New testcase.\n\t* gcc.dg/Wobjsize-1.c: Likewise.\n\nFrom-SVN: r156323", "tree": {"sha": "d5802c4187b203dbc82ac37a400b6beca819643f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5802c4187b203dbc82ac37a400b6beca819643f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/830bc5507b328fa2218e57a5c500336110ce0a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/830bc5507b328fa2218e57a5c500336110ce0a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/830bc5507b328fa2218e57a5c500336110ce0a40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/830bc5507b328fa2218e57a5c500336110ce0a40/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28e5ca15b76773b91191541d79d67ef15510fdb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e5ca15b76773b91191541d79d67ef15510fdb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28e5ca15b76773b91191541d79d67ef15510fdb1"}], "stats": {"total": 117, "additions": 102, "deletions": 15}, "files": [{"sha": "23cc57783205d83e88bac172fa25a53002d569bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830bc5507b328fa2218e57a5c500336110ce0a40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830bc5507b328fa2218e57a5c500336110ce0a40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=830bc5507b328fa2218e57a5c500336110ce0a40", "patch": "@@ -1,3 +1,8 @@\n+2010-01-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-ccp.c (ccp_fold_stmt): Fold calls and propagate\n+\tinto call arguments.\n+\n 2010-01-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/42883"}, {"sha": "a1c2ba3aff89e973b2154f5993872dd055b7ff70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830bc5507b328fa2218e57a5c500336110ce0a40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830bc5507b328fa2218e57a5c500336110ce0a40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=830bc5507b328fa2218e57a5c500336110ce0a40", "patch": "@@ -1,3 +1,8 @@\n+2010-01-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/Wobjsize-1.h: New testcase.\n+\t* gcc.dg/Wobjsize-1.c: Likewise.\n+\n 2010-01-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/42883"}, {"sha": "17e554b2a36ebfff513f4bca1bd266fa4bed61c6", "filename": "gcc/testsuite/gcc.dg/Wobjsize-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830bc5507b328fa2218e57a5c500336110ce0a40/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830bc5507b328fa2218e57a5c500336110ce0a40/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.c?ref=830bc5507b328fa2218e57a5c500336110ce0a40", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+#include \"Wobjsize-1.h\"\n+\n+char buf[6];\n+int main(int argc, char **argv)\n+{\n+  strcpy (buf,\"hello \");\n+  return 0;\n+}\n+\n+/* { dg-warning \"will always overflow destination buffer\" \"\" { target *-*-* } 6 } */\n+/* { dg-message \"file included\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"inlined from\" \"\" { target *-*-* } 0 } */"}, {"sha": "a879f6db99c6cd9aeaf3e25bff6e67676f04cf0c", "filename": "gcc/testsuite/gcc.dg/Wobjsize-1.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830bc5507b328fa2218e57a5c500336110ce0a40/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830bc5507b328fa2218e57a5c500336110ce0a40/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.h?ref=830bc5507b328fa2218e57a5c500336110ce0a40", "patch": "@@ -0,0 +1,8 @@\n+#pragma GCC system_header\n+\n+extern __inline __attribute__ ((__always_inline__,__artificial__,__gnu_inline__)) char *\n+__attribute__ ((__nothrow__)) strcpy (char *__restrict __dest, __const char *__restrict __src)\n+{\n+  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));\n+}\n+"}, {"sha": "f6380ebdbe7bcc905e930a5574b494b18d630502", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 69, "deletions": 15, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/830bc5507b328fa2218e57a5c500336110ce0a40/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/830bc5507b328fa2218e57a5c500336110ce0a40/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=830bc5507b328fa2218e57a5c500336110ce0a40", "patch": "@@ -1480,25 +1480,79 @@ static bool\n ccp_fold_stmt (gimple_stmt_iterator *gsi)\n {\n   gimple stmt = gsi_stmt (*gsi);\n-  prop_value_t val;\n \n-  if (gimple_code (stmt) != GIMPLE_COND)\n-    return false;\n+  switch (gimple_code (stmt))\n+    {\n+    case GIMPLE_COND:\n+      {\n+\tprop_value_t val;\n+\t/* Statement evaluation will handle type mismatches in constants\n+\t   more gracefully than the final propagation.  This allows us to\n+\t   fold more conditionals here.  */\n+\tval = evaluate_stmt (stmt);\n+\tif (val.lattice_val != CONSTANT\n+\t    || TREE_CODE (val.value) != INTEGER_CST)\n+\t  return false;\n+\n+\tif (integer_zerop (val.value))\n+\t  gimple_cond_make_false (stmt);\n+\telse\n+\t  gimple_cond_make_true (stmt);\n \n-  /* Statement evaluation will handle type mismatches in constants\n-     more gracefully than the final propagation.  This allows us to\n-     fold more conditionals here.  */\n-  val = evaluate_stmt (stmt);\n-  if (val.lattice_val != CONSTANT\n-      || TREE_CODE (val.value) != INTEGER_CST)\n-    return false;\n+\treturn true;\n+      }\n \n-  if (integer_zerop (val.value))\n-    gimple_cond_make_false (stmt);\n-  else\n-    gimple_cond_make_true (stmt);\n+    case GIMPLE_CALL:\n+      {\n+\ttree lhs = gimple_call_lhs (stmt);\n+\tprop_value_t *val;\n+\ttree argt;\n+\tbool changed = false;\n+\tunsigned i;\n+\n+\t/* If the call was folded into a constant make sure it goes\n+\t   away even if we cannot propagate into all uses because of\n+\t   type issues.  */\n+\tif (lhs\n+\t    && TREE_CODE (lhs) == SSA_NAME\n+\t    && (val = get_value (lhs))\n+\t    && val->lattice_val == CONSTANT)\n+\t  {\n+\t    tree new_rhs = val->value;\n+\t    if (!useless_type_conversion_p (TREE_TYPE (lhs),\n+\t\t\t\t\t    TREE_TYPE (new_rhs)))\n+\t      new_rhs = fold_convert (TREE_TYPE (lhs), new_rhs);\n+\t    update_call_from_tree (gsi, new_rhs);\n+\t    return true;\n+\t  }\n \n-  return true;\n+\t/* Propagate into the call arguments.  Compared to replace_uses_in\n+\t   this can use the argument slot types for type verification\n+\t   instead of the current argument type.  We also can safely\n+\t   drop qualifiers here as we are dealing with constants anyway.  */\n+\targt = TYPE_ARG_TYPES (TREE_TYPE (TREE_TYPE (gimple_call_fn (stmt))));\n+\tfor (i = 0; i < gimple_call_num_args (stmt) && argt;\n+\t     ++i, argt = TREE_CHAIN (argt))\n+\t  {\n+\t    tree arg = gimple_call_arg (stmt, i);\n+\t    if (TREE_CODE (arg) == SSA_NAME\n+\t\t&& (val = get_value (arg))\n+\t\t&& val->lattice_val == CONSTANT\n+\t\t&& useless_type_conversion_p\n+\t\t     (TYPE_MAIN_VARIANT (TREE_VALUE (argt)),\n+\t\t      TYPE_MAIN_VARIANT (TREE_TYPE (val->value))))\n+\t      {\n+\t\tgimple_call_set_arg (stmt, i, val->value);\n+\t\tchanged = true;\n+\t      }\n+\t  }\n+\n+\treturn changed;\n+      }\n+\n+    default:\n+      return false;\n+    }\n }\n \n /* Visit the assignment statement STMT.  Set the value of its LHS to the"}]}