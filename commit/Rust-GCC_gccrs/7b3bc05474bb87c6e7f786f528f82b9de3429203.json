{"sha": "7b3bc05474bb87c6e7f786f528f82b9de3429203", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzYmMwNTQ3NGJiODdjNmU3Zjc4NmY1MjhmODJiOWRlMzQyOTIwMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-07-09T07:59:22Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-07-09T07:59:22Z"}, "message": "decl.c (grokdeclarator): Use rich_location::add_range in three more places; include gcc-rich-location.h.\n\n/cp\n2018-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokdeclarator): Use rich_location::add_range in three\n\tmore places; include gcc-rich-location.h.\n\n/testsuite\n2018-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/long-short.C: New.\n\t* g++.dg/diagnostic/signed-unsigned.C: Likewise.\n\t* g++.dg/diagnostic/virtual-friend.C: Likewise.\n\t* g++.old-deja/g++.brendan/crash11.C: Adjust.\n\nFrom-SVN: r262512", "tree": {"sha": "86a22a457750776ff45941561c4b1f80a42fccae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86a22a457750776ff45941561c4b1f80a42fccae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b3bc05474bb87c6e7f786f528f82b9de3429203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3bc05474bb87c6e7f786f528f82b9de3429203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3bc05474bb87c6e7f786f528f82b9de3429203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3bc05474bb87c6e7f786f528f82b9de3429203/comments", "author": null, "committer": null, "parents": [{"sha": "1dc9cf5d9fec61fd0bd32f7e4026f5e259d3e016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc9cf5d9fec61fd0bd32f7e4026f5e259d3e016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc9cf5d9fec61fd0bd32f7e4026f5e259d3e016"}], "stats": {"total": 79, "additions": 71, "deletions": 8}, "files": [{"sha": "82cb481ff779339d68dc575631e834daac0bc71d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7b3bc05474bb87c6e7f786f528f82b9de3429203", "patch": "@@ -1,3 +1,8 @@\n+2018-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grokdeclarator): Use rich_location::add_range in three\n+\tmore places; include gcc-rich-location.h.\n+\n 2018-07-07  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* decl.c (build_enumerator): Change overflow type to overflow_type."}, {"sha": "3597ba046546dfd9602e4014929d09432bcf6916", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7b3bc05474bb87c6e7f786f528f82b9de3429203", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"gimplify.h\"\n #include \"asan.h\"\n+#include \"gcc-rich-location.h\"\n \n /* Possible cases of bad specifiers type used by bad_specifiers. */\n enum bad_spec_place {\n@@ -10580,9 +10581,18 @@ grokdeclarator (const cp_declarator *declarator,\n       int ok = 0;\n \n       if (signed_p && unsigned_p)\n-\terror_at (loc, \"%<signed%> and %<unsigned%> specified together\");\n+\t{\n+\t  gcc_rich_location richloc (declspecs->locations[ds_signed]);\n+\t  richloc.add_range (declspecs->locations[ds_unsigned], false);\n+\t  error_at (&richloc,\n+\t\t    \"%<signed%> and %<unsigned%> specified together\");\n+\t}\n       else if (long_p && short_p)\n-\terror_at (loc, \"%<long%> and %<short%> specified together\");\n+\t{\n+\t  gcc_rich_location richloc (declspecs->locations[ds_long]);\n+\t  richloc.add_range (declspecs->locations[ds_short], false);\n+\t  error_at (&richloc, \"%<long%> and %<short%> specified together\");\n+\t}\n       else if (TREE_CODE (type) != INTEGER_TYPE\n \t       || type == char16_type_node || type == char32_type_node\n \t       || ((long_p || short_p)\n@@ -10723,7 +10733,7 @@ grokdeclarator (const cp_declarator *declarator,\n     {\n       if (staticp == 2)\n \t{\n-\t  rich_location richloc (line_table, declspecs->locations[ds_virtual]);\n+\t  gcc_rich_location richloc (declspecs->locations[ds_virtual]);\n \t  richloc.add_range (declspecs->locations[ds_storage_class], false);\n \t  error_at (&richloc, \"member %qD cannot be declared both %<virtual%> \"\n \t\t    \"and %<static%>\", dname);\n@@ -10732,7 +10742,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t}\n       if (constexpr_p)\n \t{\n-\t  rich_location richloc (line_table, declspecs->locations[ds_virtual]);\n+\t  gcc_rich_location richloc (declspecs->locations[ds_virtual]);\n \t  richloc.add_range (declspecs->locations[ds_constexpr], false);\n \t  error_at (&richloc, \"member %qD cannot be declared both %<virtual%> \"\n \t\t    \"and %<constexpr%>\", dname);\n@@ -11270,8 +11280,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t\tif (virtualp)\n \t\t  {\n \t\t    /* Cannot be both friend and virtual.  */\n-\t\t    error_at (declspecs->locations[ds_friend],\n-\t\t\t      \"virtual functions cannot be friends\");\n+\t\t    gcc_rich_location richloc (declspecs->locations[ds_virtual]);\n+\t\t    richloc.add_range (declspecs->locations[ds_friend], false);\n+\t\t    error_at (&richloc, \"virtual functions cannot be friends\");\n \t\t    friendp = 0;\n \t\t  }\n \t\tif (decl_context == NORMAL)"}, {"sha": "dae26a2e97d92600ec2cd58df61fbc70e64dc5ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b3bc05474bb87c6e7f786f528f82b9de3429203", "patch": "@@ -1,3 +1,10 @@\n+2018-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/long-short.C: New.\n+\t* g++.dg/diagnostic/signed-unsigned.C: Likewise.\n+\t* g++.dg/diagnostic/virtual-friend.C: Likewise.\n+\t* g++.old-deja/g++.brendan/crash11.C: Adjust.\n+\n 2018-07-09  Tom de Vries  <tdevries@suse.de>\n \n \t* gcc.dg/vla-1.c: New test."}, {"sha": "af82b37b11345fdfafbbb288cc7af3e90550e409", "filename": "gcc/testsuite/g++.dg/diagnostic/long-short.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Flong-short.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Flong-short.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Flong-short.C?ref=7b3bc05474bb87c6e7f786f528f82b9de3429203", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+long short int a;  // { dg-error \"1:.long. and .short. specified together\" }\n+/* { dg-begin-multiline-output \"\" }\n+ long short int a;\n+ ^~~~ ~~~~~\n+   { dg-end-multiline-output \"\" } */\n+short long int b;  // { dg-error \"7:.long. and .short. specified together\" }\n+/* { dg-begin-multiline-output \"\" }\n+ short long int b;\n+ ~~~~~ ^~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "614783ce7a024435ba06ec8677dce9e0ae135714", "filename": "gcc/testsuite/g++.dg/diagnostic/signed-unsigned.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fsigned-unsigned.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fsigned-unsigned.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fsigned-unsigned.C?ref=7b3bc05474bb87c6e7f786f528f82b9de3429203", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+signed unsigned int a;  // { dg-error \"1:.signed. and .unsigned. specified together\" }\n+/* { dg-begin-multiline-output \"\" }\n+ signed unsigned int a;\n+ ^~~~~~ ~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+unsigned signed int b;  // { dg-error \"10:.signed. and .unsigned. specified together\" }\n+/* { dg-begin-multiline-output \"\" }\n+ unsigned signed int b;\n+ ~~~~~~~~ ^~~~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "c4f72bf4db77a4663ebe28bda04c58e3608c4715", "filename": "gcc/testsuite/g++.dg/diagnostic/virtual-friend.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-friend.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-friend.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvirtual-friend.C?ref=7b3bc05474bb87c6e7f786f528f82b9de3429203", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+// { dg-do compile { target c++11 } }\n+\n+struct S\n+{\n+  virtual friend void foo();  // { dg-error \"3:virtual functions cannot be friends\" }\n+/* { dg-begin-multiline-output \"\" }\n+   virtual friend void foo();\n+   ^~~~~~~ ~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+  friend virtual void bar();  // { dg-error \"10:virtual functions cannot be friends\" }\n+/* { dg-begin-multiline-output \"\" }\n+   friend virtual void bar();\n+   ~~~~~~ ^~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+};"}, {"sha": "96ebb71645c3fd0e11e272537c995e69aa824250", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3bc05474bb87c6e7f786f528f82b9de3429203/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash11.C?ref=7b3bc05474bb87c6e7f786f528f82b9de3429203", "patch": "@@ -9,13 +9,13 @@ class A {\n \tint\th;\n \tA() { i=10; j=20; }\n \tvirtual void f1() { printf(\"i=%d j=%d\\n\",i,j); }\n-\tfriend virtual void f2() { printf(\"i=%d j=%d\\n\",i,j); } // { dg-error \"2:virtual functions cannot be friends\" }\n+\tfriend virtual void f2() { printf(\"i=%d j=%d\\n\",i,j); } // { dg-error \"9:virtual functions cannot be friends\" }\n };\n \n class B : public A {\n     public:\n \tvirtual void f1() { printf(\"i=%d j=%d\\n\",i,j); }// { dg-error \"\" }  member.*// ERROR -  member.*\n-\tfriend virtual void f2() { printf(\"i=%d j=%d\\n\",i,j); }  // { dg-error \"2:virtual functions cannot be friends\" }\n+\tfriend virtual void f2() { printf(\"i=%d j=%d\\n\",i,j); }  // { dg-error \"9:virtual functions cannot be friends\" }\n // { dg-error \"private\" \"\" { target *-*-* } .-1 }\n };\n "}]}