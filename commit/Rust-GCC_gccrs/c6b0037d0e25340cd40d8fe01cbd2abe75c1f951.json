{"sha": "c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZiMDAzN2QwZTI1MzQwY2Q0MGQ4ZmUwMWNiZDJhYmU3NWMxZjk1MQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2016-08-31T11:56:37Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2016-08-31T11:56:37Z"}, "message": "[x86] Don't use builtins for unaligned load/store\n\n2016-08-31  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* config/i386/avx512fintrin.h (__m512_u, __m512i_u, __m512d_u):\n\tNew types.\n\t(_mm512_loadu_pd, _mm512_storeu_pd, _mm512_loadu_ps,\n\t_mm512_storeu_ps, _mm512_loadu_si512, _mm512_storeu_si512):\n\tReplace builtin with vector extension.\n\t* config/i386/avxintrin.h (__m256_u, __m256i_u, __m256d_u):\n\tNew types.\n\t(_mm256_loadu_pd, _mm256_storeu_pd, _mm256_loadu_ps,\n\t_mm256_storeu_ps, _mm256_loadu_si256, _mm256_storeu_si256):\n\tReplace builtin with vector extension.\n\t* config/i386/emmintrin.h (__m128i_u, __m128d_u): New types.\n\t(_mm_loadu_pd, _mm_storeu_pd, _mm_loadu_si128, _mm_storeu_si128):\n\tReplace builtin with vector extension.\n\t* config/i386/xmmintrin.h (__m128_u): New type.\n\t(_mm_loadu_ps, _mm_storeu_ps): Replace builtin with vector extension.\n\t(_mm_load_ps, _mm_store_ps): Simplify.\n\ngcc/testsuite/\n\t* gcc.target/i386/pr59539-2.c: Adapt options.\n\t* gcc.target/i386/avx512f-vmovdqu32-1.c: Relax expected asm.\n\nFrom-SVN: r239889", "tree": {"sha": "26495e00ae9000737c30e9b6030906ee51a2cb6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26495e00ae9000737c30e9b6030906ee51a2cb6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1105fa7e43a9169187012010eeee81893e6a3cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1105fa7e43a9169187012010eeee81893e6a3cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1105fa7e43a9169187012010eeee81893e6a3cc"}], "stats": {"total": 113, "additions": 74, "deletions": 39}, "files": [{"sha": "e9dfc9186a95fb5c16a908472f896dc16d8ea0ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "patch": "@@ -1,3 +1,22 @@\n+2016-08-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* config/i386/avx512fintrin.h (__m512_u, __m512i_u, __m512d_u):\n+\tNew types.\n+\t(_mm512_loadu_pd, _mm512_storeu_pd, _mm512_loadu_ps,\n+\t_mm512_storeu_ps, _mm512_loadu_si512, _mm512_storeu_si512):\n+\tReplace builtin with vector extension.\n+\t* config/i386/avxintrin.h (__m256_u, __m256i_u, __m256d_u):\n+\tNew types.\n+\t(_mm256_loadu_pd, _mm256_storeu_pd, _mm256_loadu_ps,\n+\t_mm256_storeu_ps, _mm256_loadu_si256, _mm256_storeu_si256):\n+\tReplace builtin with vector extension.\n+\t* config/i386/emmintrin.h (__m128i_u, __m128d_u): New types.\n+\t(_mm_loadu_pd, _mm_storeu_pd, _mm_loadu_si128, _mm_storeu_si128):\n+\tReplace builtin with vector extension.\n+\t* config/i386/xmmintrin.h (__m128_u): New type.\n+\t(_mm_loadu_ps, _mm_storeu_ps): Replace builtin with vector extension.\n+\t(_mm_load_ps, _mm_store_ps): Simplify.\n+\n 2016-08-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/arm/arm.c (thumb1_size_rtx_costs) <SET>: Add missing guard."}, {"sha": "2372c83989d1d98b40a150c09427a9c58c1d81a5", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "patch": "@@ -52,6 +52,11 @@ typedef float __m512 __attribute__ ((__vector_size__ (64), __may_alias__));\n typedef long long __m512i __attribute__ ((__vector_size__ (64), __may_alias__));\n typedef double __m512d __attribute__ ((__vector_size__ (64), __may_alias__));\n \n+/* Unaligned version of the same type.  */\n+typedef float __m512_u __attribute__ ((__vector_size__ (64), __may_alias__, __aligned__ (1)));\n+typedef long long __m512i_u __attribute__ ((__vector_size__ (64), __may_alias__, __aligned__ (1)));\n+typedef double __m512d_u __attribute__ ((__vector_size__ (64), __may_alias__, __aligned__ (1)));\n+\n typedef unsigned char  __mmask8;\n typedef unsigned short __mmask16;\n \n@@ -5674,10 +5679,7 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_loadu_pd (void const *__P)\n {\n-  return (__m512d) __builtin_ia32_loadupd512_mask ((const double *) __P,\n-\t\t\t\t\t\t   (__v8df)\n-\t\t\t\t\t\t   _mm512_undefined_pd (),\n-\t\t\t\t\t\t   (__mmask8) -1);\n+  return *(__m512d_u *)__P;\n }\n \n extern __inline __m512d\n@@ -5703,8 +5705,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_storeu_pd (void *__P, __m512d __A)\n {\n-  __builtin_ia32_storeupd512_mask ((double *) __P, (__v8df) __A,\n-\t\t\t\t   (__mmask8) -1);\n+  *(__m512d_u *)__P = __A;\n }\n \n extern __inline void\n@@ -5719,10 +5720,7 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_loadu_ps (void const *__P)\n {\n-  return (__m512) __builtin_ia32_loadups512_mask ((const float *) __P,\n-\t\t\t\t\t\t  (__v16sf)\n-\t\t\t\t\t\t  _mm512_undefined_ps (),\n-\t\t\t\t\t\t  (__mmask16) -1);\n+  return *(__m512_u *)__P;\n }\n \n extern __inline __m512\n@@ -5748,8 +5746,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_storeu_ps (void *__P, __m512 __A)\n {\n-  __builtin_ia32_storeups512_mask ((float *) __P, (__v16sf) __A,\n-\t\t\t\t   (__mmask16) -1);\n+  *(__m512_u *)__P = __A;\n }\n \n extern __inline void\n@@ -5791,10 +5788,7 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_loadu_si512 (void const *__P)\n {\n-  return (__m512i) __builtin_ia32_loaddqusi512_mask ((const int *) __P,\n-\t\t\t\t\t\t     (__v16si)\n-\t\t\t\t\t\t     _mm512_setzero_si512 (),\n-\t\t\t\t\t\t     (__mmask16) -1);\n+  return *(__m512i_u *)__P;\n }\n \n extern __inline __m512i\n@@ -5820,8 +5814,7 @@ extern __inline void\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_storeu_si512 (void *__P, __m512i __A)\n {\n-  __builtin_ia32_storedqusi512_mask ((int *) __P, (__v16si) __A,\n-\t\t\t\t     (__mmask16) -1);\n+  *(__m512i_u *)__P = __A;\n }\n \n extern __inline void"}, {"sha": "9cd9aab918197bbfa4514e1f64fe33ad16b2c151", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "patch": "@@ -58,6 +58,17 @@ typedef long long __m256i __attribute__ ((__vector_size__ (32),\n typedef double __m256d __attribute__ ((__vector_size__ (32),\n \t\t\t\t       __may_alias__));\n \n+/* Unaligned version of the same types.  */\n+typedef float __m256_u __attribute__ ((__vector_size__ (32),\n+\t\t\t\t       __may_alias__,\n+\t\t\t\t       __aligned__ (1)));\n+typedef long long __m256i_u __attribute__ ((__vector_size__ (32),\n+\t\t\t\t\t    __may_alias__,\n+\t\t\t\t\t    __aligned__ (1)));\n+typedef double __m256d_u __attribute__ ((__vector_size__ (32),\n+\t\t\t\t\t __may_alias__,\n+\t\t\t\t\t __aligned__ (1)));\n+\n /* Compare predicates for scalar and packed compare intrinsics.  */\n \n /* Equal (ordered, non-signaling)  */\n@@ -857,25 +868,25 @@ _mm256_store_ps (float *__P, __m256 __A)\n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_loadu_pd (double const *__P)\n {\n-  return (__m256d) __builtin_ia32_loadupd256 (__P);\n+  return *(__m256d_u *)__P;\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_storeu_pd (double *__P, __m256d __A)\n {\n-  __builtin_ia32_storeupd256 (__P, (__v4df)__A);\n+  *(__m256d_u *)__P = __A;\n }\n \n extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_loadu_ps (float const *__P)\n {\n-  return (__m256) __builtin_ia32_loadups256 (__P);\n+  return *(__m256_u *)__P;\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_storeu_ps (float *__P, __m256 __A)\n {\n-  __builtin_ia32_storeups256 (__P, (__v8sf)__A);\n+  *(__m256_u *)__P = __A;\n }\n \n extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -891,15 +902,15 @@ _mm256_store_si256 (__m256i *__P, __m256i __A)\n }\n \n extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_loadu_si256 (__m256i const *__P)\n+_mm256_loadu_si256 (__m256i_u const *__P)\n {\n-  return (__m256i) __builtin_ia32_loaddqu256 ((char const *)__P);\n+  return *__P;\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_storeu_si256 (__m256i *__P, __m256i __A)\n+_mm256_storeu_si256 (__m256i_u *__P, __m256i __A)\n {\n-  __builtin_ia32_storedqu256 ((char *)__P, (__v32qi)__A);\n+  *__P = __A;\n }\n \n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "b299cbc8178cbae765b8997b5032fe8e96c07657", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "patch": "@@ -52,6 +52,10 @@ typedef unsigned char __v16qu __attribute__ ((__vector_size__ (16)));\n typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));\n \n+/* Unaligned version of the same types.  */\n+typedef long long __m128i_u __attribute__ ((__vector_size__ (16), __may_alias__, __aligned__ (1)));\n+typedef double __m128d_u __attribute__ ((__vector_size__ (16), __may_alias__, __aligned__ (1)));\n+\n /* Create a selector for use with the SHUFPD instruction.  */\n #define _MM_SHUFFLE2(fp1,fp0) \\\n  (((fp1) << 1) | (fp0))\n@@ -123,7 +127,7 @@ _mm_load_pd (double const *__P)\n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_loadu_pd (double const *__P)\n {\n-  return __builtin_ia32_loadupd (__P);\n+  return *(__m128d_u *)__P;\n }\n \n /* Create a vector with all two elements equal to *P.  */\n@@ -165,7 +169,7 @@ _mm_store_pd (double *__P, __m128d __A)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storeu_pd (double *__P, __m128d __A)\n {\n-  __builtin_ia32_storeupd (__P, __A);\n+  *(__m128d_u *)__P = __A;\n }\n \n /* Stores the lower DPFP value.  */\n@@ -693,9 +697,9 @@ _mm_load_si128 (__m128i const *__P)\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_loadu_si128 (__m128i const *__P)\n+_mm_loadu_si128 (__m128i_u const *__P)\n {\n-  return (__m128i) __builtin_ia32_loaddqu ((char const *)__P);\n+  return *__P;\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n@@ -711,9 +715,9 @@ _mm_store_si128 (__m128i *__P, __m128i __B)\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_storeu_si128 (__m128i *__P, __m128i __B)\n+_mm_storeu_si128 (__m128i_u *__P, __m128i __B)\n {\n-  __builtin_ia32_storedqu ((char *)__P, (__v16qi)__B);\n+  *__P = __B;\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "26516e24a003dfca42b252050e34d78ea0ca97bf", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "patch": "@@ -68,6 +68,9 @@ _mm_prefetch (const void *__P, enum _mm_hint __I)\n    vector types, and their scalar components.  */\n typedef float __m128 __attribute__ ((__vector_size__ (16), __may_alias__));\n \n+/* Unaligned version of the same type.  */\n+typedef float __m128_u __attribute__ ((__vector_size__ (16), __may_alias__, __aligned__ (1)));\n+\n /* Internal data types for implementing the intrinsics.  */\n typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n \n@@ -921,14 +924,14 @@ _mm_load_ps1 (float const *__P)\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_load_ps (float const *__P)\n {\n-  return (__m128) *(__v4sf *)__P;\n+  return *(__m128 *)__P;\n }\n \n /* Load four SPFP values from P.  The address need not be 16-byte aligned.  */\n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_loadu_ps (float const *__P)\n {\n-  return (__m128) __builtin_ia32_loadups (__P);\n+  return *(__m128_u *)__P;\n }\n \n /* Load four SPFP values in reverse order.  The address must be aligned.  */\n@@ -970,14 +973,14 @@ _mm_cvtss_f32 (__m128 __A)\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_store_ps (float *__P, __m128 __A)\n {\n-  *(__v4sf *)__P = (__v4sf)__A;\n+  *(__m128 *)__P = __A;\n }\n \n /* Store four SPFP values.  The address need not be 16-byte aligned.  */\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_storeu_ps (float *__P, __m128 __A)\n {\n-  __builtin_ia32_storeups (__P, (__v4sf)__A);\n+  *(__m128_u *)__P = __A;\n }\n \n /* Store the lower SPFP value across four words.  */"}, {"sha": "61dc053a096d67b4dd12b3cf7c361c218471064d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "patch": "@@ -1,3 +1,8 @@\n+2016-08-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.target/i386/pr59539-2.c: Adapt options.\n+\t* gcc.target/i386/avx512f-vmovdqu32-1.c: Relax expected asm.\n+\n 2016-08-31  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/77418"}, {"sha": "a6f1c290aeb07c52bcc864e881cf3e910f2788f3", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqu32-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-1.c?ref=c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vmovdqu\\[36\\]\\[24\\]\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu(?:32|64)\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu32\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu32\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmovdqu32\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu(?:32|64)\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu32\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*\\\\)\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>"}, {"sha": "eaa7057d1193f9b6012a77d07781340d88ac0b71", "filename": "gcc/testsuite/gcc.target/i386/pr59539-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59539-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b0037d0e25340cd40d8fe01cbd2abe75c1f951/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59539-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59539-2.c?ref=c6b0037d0e25340cd40d8fe01cbd2abe75c1f951", "patch": "@@ -1,6 +1,6 @@\n /* PR target/59539 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mavx2\" } */\n+/* { dg-options \"-O2 -march=haswell\" } */\n \n #include <immintrin.h>\n "}]}