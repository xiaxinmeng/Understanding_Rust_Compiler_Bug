{"sha": "448c89d590455ed4ab7abc40309b5cf8ec52d13d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ4Yzg5ZDU5MDQ1NWVkNGFiN2FiYzQwMzA5YjVjZjhlYzUyZDEzZA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-30T09:42:36Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-30T15:00:39Z"}, "message": "coroutines: Fix handling of artificial vars [PR94886]\n\nThe testcase ICEs because the range-based for generates three\nartificial variables that need to be allocated to the coroutine\nframe but, when walking the BIND_EXR that contains these, the\nDECL_INITIAL for one of them refers to an entry appearing later,\nwhich means that the frame entry hasn't been allocated when that\nINITIAL is walked.\n\nThe solution is to defer walking the DECL_INITIAL/SIZE etc. until\nall the BIND_EXPR vars have been processed.\n\ngcc/cp/ChangeLog:\n\n2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94886\n\t* coroutines.cc (transform_local_var_uses): Defer walking\n\tthe DECL_INITIALs of BIND_EXPR vars until all the frame\n\tallocations have been made.\n\ngcc/testsuite/ChangeLog:\n\n2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94886\n\t* g++.dg/coroutines/pr94886-folly-3.C: New test.", "tree": {"sha": "61c760c016575511ea8afc83832ea9e1fd5fc36d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61c760c016575511ea8afc83832ea9e1fd5fc36d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/448c89d590455ed4ab7abc40309b5cf8ec52d13d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448c89d590455ed4ab7abc40309b5cf8ec52d13d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/448c89d590455ed4ab7abc40309b5cf8ec52d13d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448c89d590455ed4ab7abc40309b5cf8ec52d13d/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa94a22f5cb337e173d7119ffd5a92f1e607f544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa94a22f5cb337e173d7119ffd5a92f1e607f544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa94a22f5cb337e173d7119ffd5a92f1e607f544"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "1fa0e123cb11111b003ec9766e63396be6ae59bf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448c89d590455ed4ab7abc40309b5cf8ec52d13d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448c89d590455ed4ab7abc40309b5cf8ec52d13d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=448c89d590455ed4ab7abc40309b5cf8ec52d13d", "patch": "@@ -1,3 +1,10 @@\n+2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/94886\n+\t* coroutines.cc (transform_local_var_uses): Defer walking\n+\tthe DECL_INITIALs of BIND_EXPR vars until all the frame\n+\tallocations have been made.\n+\n 2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/94883"}, {"sha": "e90d3d5a3b39dabee0e48c9ab2ef6cb0780559ea", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448c89d590455ed4ab7abc40309b5cf8ec52d13d/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448c89d590455ed4ab7abc40309b5cf8ec52d13d/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=448c89d590455ed4ab7abc40309b5cf8ec52d13d", "patch": "@@ -1814,14 +1814,6 @@ transform_local_var_uses (tree *stmt, int *do_subtree, void *d)\n \t  /* Re-write the variable's context to be in the actor func.  */\n \t  DECL_CONTEXT (lvar) = lvd->context;\n \n-\t  /* we need to walk some of the decl trees, which might contain\n-\t     references to vars replaced at a higher level.  */\n-\t  cp_walk_tree (&DECL_INITIAL (lvar), transform_local_var_uses, d,\n-\t\t\tNULL);\n-\t  cp_walk_tree (&DECL_SIZE (lvar), transform_local_var_uses, d, NULL);\n-\t  cp_walk_tree (&DECL_SIZE_UNIT (lvar), transform_local_var_uses, d,\n-\t\t\tNULL);\n-\n \t/* For capture proxies, this could include the decl value expr.  */\n \tif (local_var.is_lambda_capture || local_var.has_value_expr_p)\n \t  {\n@@ -1843,6 +1835,22 @@ transform_local_var_uses (tree *stmt, int *do_subtree, void *d)\n \t\t\t\t     lvd->actor_frame, fld_ref, NULL_TREE);\n \t  local_var.field_idx = fld_idx;\n \t}\n+      /* FIXME: we should be able to do this in the loop above, but (at least\n+\t for range for) there are cases where the DECL_INITIAL contains\n+\t forward references.\n+\t So, now we've built the revised var in the frame, substitute uses of\n+\t it in initializers and the bind expr body.  */\n+      for (lvar = BIND_EXPR_VARS (*stmt); lvar != NULL;\n+\t   lvar = DECL_CHAIN (lvar))\n+\t{\n+\t  /* we need to walk some of the decl trees, which might contain\n+\t     references to vars replaced at a higher level.  */\n+\t  cp_walk_tree (&DECL_INITIAL (lvar), transform_local_var_uses, d,\n+\t\t\tNULL);\n+\t  cp_walk_tree (&DECL_SIZE (lvar), transform_local_var_uses, d, NULL);\n+\t  cp_walk_tree (&DECL_SIZE_UNIT (lvar), transform_local_var_uses, d,\n+\t\t\tNULL);\n+\t}\n       cp_walk_tree (&BIND_EXPR_BODY (*stmt), transform_local_var_uses, d, NULL);\n \n       /* Now we have processed and removed references to the original vars,"}, {"sha": "7d5ae7533400af68f82c8ea40c580c0420a01bd3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448c89d590455ed4ab7abc40309b5cf8ec52d13d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448c89d590455ed4ab7abc40309b5cf8ec52d13d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=448c89d590455ed4ab7abc40309b5cf8ec52d13d", "patch": "@@ -1,3 +1,8 @@\n+2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/94886\n+\t* g++.dg/coroutines/pr94886-folly-3.C: New test.\n+\n 2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/94883"}, {"sha": "d7bd2c17d4a807d2e3f3b3223bd0977f389852b6", "filename": "gcc/testsuite/g++.dg/coroutines/pr94886-folly-3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448c89d590455ed4ab7abc40309b5cf8ec52d13d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94886-folly-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448c89d590455ed4ab7abc40309b5cf8ec52d13d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94886-folly-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94886-folly-3.C?ref=448c89d590455ed4ab7abc40309b5cf8ec52d13d", "patch": "@@ -0,0 +1,15 @@\n+\n+#include \"coro.h\"\n+#include \"coro1-ret-int-yield-int.h\"\n+\n+#include <array>\n+\n+coro1\n+my_coro ()\n+{\n+  const std::array<int, 5> expectedValues = {{0, 3, 1, 4, 2}};\n+\n+  for (int expectedValue : expectedValues) {\n+    co_yield expectedValue;\n+  }\n+}"}]}