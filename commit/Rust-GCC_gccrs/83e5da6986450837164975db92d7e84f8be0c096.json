{"sha": "83e5da6986450837164975db92d7e84f8be0c096", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNlNWRhNjk4NjQ1MDgzNzE2NDk3NWRiOTJkN2U4NGY4YmUwYzA5Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T12:05:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T12:05:56Z"}, "message": "[multiple changes]\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, sem_util.adb, sem_res.adb, sem_attr.adb: Minor\n\treformatting.\n\n2011-11-21  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-taprop-posix.adb (Create_Task): Use Unrestricted_Access\n\tto deal with fact that we properly detect the error if Access\n\tis used.\n\nFrom-SVN: r181572", "tree": {"sha": "12bf8245eaa68fc71e628fbf0ebb69a49353ec84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12bf8245eaa68fc71e628fbf0ebb69a49353ec84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83e5da6986450837164975db92d7e84f8be0c096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e5da6986450837164975db92d7e84f8be0c096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83e5da6986450837164975db92d7e84f8be0c096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e5da6986450837164975db92d7e84f8be0c096/comments", "author": null, "committer": null, "parents": [{"sha": "f460d8f397bed972a6f93a912a5e2ad06addf54a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f460d8f397bed972a6f93a912a5e2ad06addf54a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f460d8f397bed972a6f93a912a5e2ad06addf54a"}], "stats": {"total": 68, "additions": 47, "deletions": 21}, "files": [{"sha": "fe786073a02fc05188d816adb23b5fc9068d8fb7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=83e5da6986450837164975db92d7e84f8be0c096", "patch": "@@ -1,3 +1,14 @@\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, sem_util.adb, sem_res.adb, sem_attr.adb: Minor\n+\treformatting.\n+\n+2011-11-21  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-taprop-posix.adb (Create_Task): Use Unrestricted_Access\n+\tto deal with fact that we properly detect the error if Access\n+\tis used.\n+\n 2011-11-21  Steve Baird  <baird@adacore.com>\n \n \t* sem_util.ads: Update comment describing function"}, {"sha": "44015cf85d5ad194e5a2ddd5646f3146f74fc02d", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=83e5da6986450837164975db92d7e84f8be0c096", "patch": "@@ -975,8 +975,14 @@ package body System.Task_Primitives.Operations is\n       --  do not need to manipulate caller's signal mask at this point.\n       --  All tasks in RTS will have All_Tasks_Mask initially.\n \n+      --  Note: the use of Unrestricted_Access in the following call is needed\n+      --  because otherwise we have an error of getting a access-to-volatile\n+      --  value which points to a non-volatile object. But in this case it is\n+      --  safe to do this, since we know we have no problems with aliasing and\n+      --  Unrestricted_Access bypasses this check.\n+\n       Result := pthread_create\n-        (T.Common.LL.Thread'Access,\n+        (T.Common.LL.Thread'Unrestricted_Access,\n          Attributes'Access,\n          Thread_Body_Access (Wrapper),\n          To_Address (T));"}, {"sha": "ac8bb8344b97ac030dad9abc37e590d5cefc967c", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=83e5da6986450837164975db92d7e84f8be0c096", "patch": "@@ -8642,10 +8642,10 @@ package body Sem_Attr is\n                   end if;\n                end if;\n \n-               --  Check the static accessibility rule of 3.10.2(28).\n-               --  Note that this check is not performed for the\n-               --  case of an anonymous access type, since the access\n-               --  attribute is always legal in such a context.\n+               --  Check the static accessibility rule of 3.10.2(28). Note that\n+               --  this check is not performed for the case of an anonymous\n+               --  access type, since the access attribute is always legal\n+               --  in such a context.\n \n                if Attr_Id /= Attribute_Unchecked_Access\n                  and then"}, {"sha": "92e1b9da994f6625e137780c1d441a32a1208bde", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=83e5da6986450837164975db92d7e84f8be0c096", "patch": "@@ -1897,7 +1897,8 @@ package body Sem_Ch3 is\n             --  components\n \n             if Type_Access_Level (Etype (E)) >\n-              Deepest_Type_Access_Level (T) then\n+               Deepest_Type_Access_Level (T)\n+            then\n                Error_Msg_N\n                  (\"expression has deeper access level than component \" &\n                   \"(RM 3.10.2 (12.2))\", E);"}, {"sha": "e45be653cbca364d3d44de9b0310affdae0f9ad7", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=83e5da6986450837164975db92d7e84f8be0c096", "patch": "@@ -4095,10 +4095,10 @@ package body Sem_Res is\n          --  object must not be deeper than that of the allocator's type.\n \n          elsif Nkind (Disc_Exp) = N_Attribute_Reference\n-           and then Get_Attribute_Id (Attribute_Name (Disc_Exp))\n-                      = Attribute_Access\n-           and then Object_Access_Level (Prefix (Disc_Exp))\n-                      > Deepest_Type_Access_Level (Alloc_Typ)\n+           and then Get_Attribute_Id (Attribute_Name (Disc_Exp)) =\n+                      Attribute_Access\n+           and then Object_Access_Level (Prefix (Disc_Exp)) >\n+                      Deepest_Type_Access_Level (Alloc_Typ)\n          then\n             Error_Msg_N\n               (\"prefix of attribute has deeper level than allocator type\",\n@@ -4109,8 +4109,8 @@ package body Sem_Res is\n \n          elsif Ekind (Etype (Disc_Exp)) = E_Anonymous_Access_Type\n            and then Nkind (Disc_Exp) = N_Selected_Component\n-           and then Object_Access_Level (Prefix (Disc_Exp))\n-                      > Deepest_Type_Access_Level (Alloc_Typ)\n+           and then Object_Access_Level (Prefix (Disc_Exp)) >\n+                      Deepest_Type_Access_Level (Alloc_Typ)\n          then\n             Error_Msg_N\n               (\"access discriminant has deeper level than allocator type\",\n@@ -4315,7 +4315,8 @@ package body Sem_Res is\n             end if;\n \n             if Type_Access_Level (Exp_Typ) >\n-              Deepest_Type_Access_Level (Typ) then\n+                 Deepest_Type_Access_Level (Typ)\n+            then\n                if In_Instance_Body then\n                   Error_Msg_N (\"?type in allocator has deeper level than\" &\n                                \" designated class-wide type\", E);\n@@ -10359,13 +10360,15 @@ package body Sem_Res is\n                 Subtypes_Statically_Match (Target_Comp_Type, Opnd_Comp_Type)\n             then\n                if Type_Access_Level (Target_Type) <\n-                   Deepest_Type_Access_Level (Opnd_Type)\n+                    Deepest_Type_Access_Level (Opnd_Type)\n                then\n                   if In_Instance_Body then\n-                     Error_Msg_N (\"?source array type \" &\n-                       \"has deeper accessibility level than target\", Operand);\n-                     Error_Msg_N (\"\\?Program_Error will be raised at run time\",\n-                         Operand);\n+                     Error_Msg_N\n+                       (\"?source array type has \" &\n+                        \"deeper accessibility level than target\", Operand);\n+                     Error_Msg_N\n+                       (\"\\?Program_Error will be raised at run time\",\n+                        Operand);\n                      Rewrite (N,\n                        Make_Raise_Program_Error (Sloc (N),\n                          Reason => PE_Accessibility_Check_Failed));\n@@ -10375,8 +10378,9 @@ package body Sem_Res is\n                   --  Conversion not allowed because of accessibility levels\n \n                   else\n-                     Error_Msg_N (\"source array type \" &\n-                       \"has deeper accessibility level than target\", Operand);\n+                     Error_Msg_N\n+                       (\"source array type has \" &\n+                       \"deeper accessibility level than target\", Operand);\n                      return False;\n                   end if;\n \n@@ -10399,7 +10403,7 @@ package body Sem_Res is\n             --  All of this is checked in Subtypes_Statically_Match.\n \n             if not Subtypes_Statically_Match\n-                            (Target_Comp_Type, Opnd_Comp_Type)\n+                     (Target_Comp_Type, Opnd_Comp_Type)\n             then\n                Error_Msg_N\n                  (\"component subtypes must statically match\", Operand);"}, {"sha": "8e6a2a2fa36ccd5c4eaf36d68b4e435d56f8457f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e5da6986450837164975db92d7e84f8be0c096/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=83e5da6986450837164975db92d7e84f8be0c096", "patch": "@@ -2437,6 +2437,8 @@ package body Sem_Util is\n                          (Defining_Identifier\n                            (Associated_Node_For_Itype (Typ))));\n \n+      --  For generic formal type, return Int'Last (infinite) (why ???)\n+\n       elsif Is_Generic_Type (Root_Type (Typ)) then\n          return UI_From_Int (Int'Last);\n \n@@ -12717,6 +12719,8 @@ package body Sem_Util is\n          end if;\n       end if;\n \n+      --  Return library level for a generic formal type (why???)\n+\n       if Is_Generic_Type (Root_Type (Btyp)) then\n          return Scope_Depth (Standard_Standard);\n       end if;"}]}