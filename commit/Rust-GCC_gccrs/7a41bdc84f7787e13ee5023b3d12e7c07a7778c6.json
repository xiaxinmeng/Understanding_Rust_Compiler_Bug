{"sha": "7a41bdc84f7787e13ee5023b3d12e7c07a7778c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E0MWJkYzg0Zjc3ODdlMTNlZTUwMjNiM2QxMmU3YzA3YTc3NzhjNg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-30T08:48:51Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-30T08:48:51Z"}, "message": "re PR fortran/35824 (Overloading problems with derived type with allocatable array)\n\n2008-11-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/35824\n\t* gfortran.dg/alloc_comp_assign_8.f90 : New test.\n\nFrom-SVN: r142292", "tree": {"sha": "f0d0bac5eb66dcbe6eaae789d78584e008b06615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0d0bac5eb66dcbe6eaae789d78584e008b06615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a41bdc84f7787e13ee5023b3d12e7c07a7778c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a41bdc84f7787e13ee5023b3d12e7c07a7778c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a41bdc84f7787e13ee5023b3d12e7c07a7778c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a41bdc84f7787e13ee5023b3d12e7c07a7778c6/comments", "author": null, "committer": null, "parents": [{"sha": "796ee1661bdc33aa69bd0a7e0c342be5bcaadda0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796ee1661bdc33aa69bd0a7e0c342be5bcaadda0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/796ee1661bdc33aa69bd0a7e0c342be5bcaadda0"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "fa68f2ede00a4f0dec08de1404573e2f6bbc2867", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a41bdc84f7787e13ee5023b3d12e7c07a7778c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a41bdc84f7787e13ee5023b3d12e7c07a7778c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a41bdc84f7787e13ee5023b3d12e7c07a7778c6", "patch": "@@ -1,3 +1,8 @@\n+2008-11-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/35824\n+\t* gfortran.dg/alloc_comp_assign_8.f90 : New test.\n+\n 2008-11-29  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/37843"}, {"sha": "ab4868de1367fbc83e8280f07d452c6b42dcc317", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_8.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a41bdc84f7787e13ee5023b3d12e7c07a7778c6/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a41bdc84f7787e13ee5023b3d12e7c07a7778c6/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_8.f90?ref=7a41bdc84f7787e13ee5023b3d12e7c07a7778c6", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR35824, in which the interface assignment and\n+! negation did not work correctly.\n+!\n+! Contributed by Rolf Roth <everyo@gmx.net>\n+!\n+module typemodule\n+  type alltype\n+     double precision :: a\n+     double precision,allocatable :: b(:)\n+  end type\n+  interface assignment(=)\n+    module procedure at_from_at\n+  end interface\n+  interface operator(-)\n+    module procedure  neg_at\n+  end interface\n+contains\n+  subroutine at_from_at(b,a)\n+    type(alltype), intent(in) :: a\n+    type(alltype), intent(out) :: b\n+    b%a=a%a\n+    allocate(b%b(2))\n+    b%b=a%b\n+  end subroutine at_from_at\n+  function neg_at(a) result(b)\n+    type(alltype), intent(in) :: a\n+    type(alltype) :: b\n+    b%a=-a%a\n+    allocate(b%b(2))\n+    b%b=-a%b\n+  end function neg_at\n+end module\n+  use typemodule\n+  type(alltype) t1,t2,t3\n+  allocate(t1%b(2))\n+  t1%a=0.5d0\n+  t1%b(1)=1d0\n+  t1%b(2)=2d0\n+  t2=-t1\n+  if (t2%a .ne. -0.5d0) call abort\n+  if (any(t2%b .ne. [-1d0, -2d0])) call abort\n+\n+  t1=-t1\n+  if (t1%a .ne. -0.5d0) call abort\n+  if (any(t1%b .ne. [-1d0, -2d0])) call abort\n+end\n+\n+! { dg-final { cleanup-modules \"typemodule\" } }"}]}