{"sha": "c3d79243214c8fbfc6696c249232ccfb033a59ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNkNzkyNDMyMTRjOGZiZmM2Njk2YzI0OTIzMmNjZmIwMzNhNTllZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-12-03T19:59:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-12-03T19:59:10Z"}, "message": "gimple.texi (gimple_build_assign_with_ops): Remove.\n\n\t* doc/gimple.texi (gimple_build_assign_with_ops): Remove.\n\t(gimple_build_assign): Document the new overloads.\n\nFrom-SVN: r218330", "tree": {"sha": "d9d5087f2a497f89ed90378a25e0ee3b0becaac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9d5087f2a497f89ed90378a25e0ee3b0becaac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3d79243214c8fbfc6696c249232ccfb033a59ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d79243214c8fbfc6696c249232ccfb033a59ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3d79243214c8fbfc6696c249232ccfb033a59ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d79243214c8fbfc6696c249232ccfb033a59ef/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d31008d7a0d53b431f176aad8dda5498de823122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31008d7a0d53b431f176aad8dda5498de823122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d31008d7a0d53b431f176aad8dda5498de823122"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "eff109f584c3b801258f1cb4bed619e6bdf11083", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d79243214c8fbfc6696c249232ccfb033a59ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d79243214c8fbfc6696c249232ccfb033a59ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3d79243214c8fbfc6696c249232ccfb033a59ef", "patch": "@@ -1,3 +1,8 @@\n+2014-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* doc/gimple.texi (gimple_build_assign_with_ops): Remove.\n+\t(gimple_build_assign): Document the new overloads.\n+\n 2014-12-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/64019"}, {"sha": "bdabf2db56fb0f0e941eef1221ac2453749fdacb", "filename": "gcc/doc/gimple.texi", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d79243214c8fbfc6696c249232ccfb033a59ef/gcc%2Fdoc%2Fgimple.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d79243214c8fbfc6696c249232ccfb033a59ef/gcc%2Fdoc%2Fgimple.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgimple.texi?ref=c3d79243214c8fbfc6696c249232ccfb033a59ef", "patch": "@@ -1124,9 +1124,35 @@ already have a tree expression that you want to convert into a\n tuple.  However, try to avoid building expression trees for the\n sole purpose of calling this function.  If you already have the\n operands in separate trees, it is better to use\n-@code{gimple_build_assign_with_ops}.\n+@code{gimple_build_assign} with @code{enum tree_code} argument and separate\n+arguments for each operand.\n @end deftypefn\n \n+@deftypefn {GIMPLE function} gimple gimple_build_assign @\n+(tree lhs, enum tree_code subcode, tree op1, tree op2, tree op3)\n+This function is similar to two operand @code{gimple_build_assign},\n+but is used to build a @code{GIMPLE_ASSIGN} statement when the operands of the\n+right-hand side of the assignment are already split into\n+different operands.\n+\n+The left-hand side is an lvalue passed in lhs.  Subcode is the\n+@code{tree_code} for the right-hand side of the assignment.  Op1, op2 and op3\n+are the operands.\n+@end deftypefn\n+\n+@deftypefn {GIMPLE function} gimple gimple_build_assign @\n+(tree lhs, enum tree_code subcode, tree op1, tree op2)\n+Like the above 5 operand @code{gimple_build_assign}, but with the last\n+argument @code{NULL} - this overload should not be used for\n+@code{GIMPLE_TERNARY_RHS} assignments.\n+@end deftypefn\n+\n+@deftypefn {GIMPLE function} gimple gimple_build_assign @\n+(tree lhs, enum tree_code subcode, tree op1)\n+Like the above 4 operand @code{gimple_build_assign}, but with the last\n+argument @code{NULL} - this overload should be used only for\n+@code{GIMPLE_UNARY_RHS} and @code{GIMPLE_SINGLE_RHS} assignments.\n+@end deftypefn\n \n @deftypefn {GIMPLE function} gimple gimplify_assign (tree dst, tree src, gimple_seq *seq_p)\n Build a new @code{GIMPLE_ASSIGN} tuple and append it to the end of\n@@ -1139,19 +1165,6 @@ case they will be converted to a gimple operand if necessary.\n \n This function returns the newly created @code{GIMPLE_ASSIGN} tuple.\n \n-@deftypefn {GIMPLE function} gimple gimple_build_assign_with_ops @\n-(enum tree_code subcode, tree lhs, tree op1, tree op2)\n-This function is similar to @code{gimple_build_assign}, but is used to\n-build a @code{GIMPLE_ASSIGN} statement when the operands of the\n-right-hand side of the assignment are already split into\n-different operands.\n-\n-The left-hand side is an lvalue passed in lhs.  Subcode is the\n-@code{tree_code} for the right-hand side of the assignment.  Op1 and op2\n-are the operands.  If op2 is null, subcode must be a @code{tree_code}\n-for a unary expression.\n-@end deftypefn\n-\n @deftypefn {GIMPLE function} {enum tree_code} gimple_assign_rhs_code (gimple g)\n Return the code of the expression computed on the @code{RHS} of\n assignment statement @code{G}."}]}