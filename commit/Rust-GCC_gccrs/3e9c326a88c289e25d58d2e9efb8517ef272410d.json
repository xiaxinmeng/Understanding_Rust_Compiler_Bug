{"sha": "3e9c326a88c289e25d58d2e9efb8517ef272410d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U5YzMyNmE4OGMyODllMjVkNThkMmU5ZWZiODUxN2VmMjcyNDEwZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-12T18:55:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-12T18:55:48Z"}, "message": "Makefile.in (LIBFUNCS_H): Add $(HASHTAB_H).\n\ngcc/\n\t* Makefile.in (LIBFUNCS_H): Add $(HASHTAB_H).\n\t(target-globals.o): Depend on $(LIBFUNCS_H).\n\t* libfuncs.h: Include hashtab.h.\n\t(libfunc_entry): Moved from optabs.c.\n\t(target_libfuncs): New structure.\n\t(default_target_libfuncs): Declare.\n\t(this_target_libfuncs): Declare as a variable or define as a macro.\n\t(libfunc_table): Redefine as a macro.\n\t* optabs.c (default_target_libfuncs): New variable.\n\t(this_target_libfuncs): New conditional variable.\n\t(libfunc_table): Delete.\n\t(libfunc_entry): Moved to optabs.h.\n\t(libfunc_hash): Redefine as a macro.\n\t(hash_libfunc, eq_libfunc): Fix comments.\n\t(init_optabs): Use libfunc_hash to detect cases where the function\n\thas already been called.  Clear the hash table instead of\n\trecreating it.\n\t* target-globals.h (this_target_libfuncs): Declare.\n\t(target_globals): Add a libfuncs field.\n\t(restore_target_globals): Copy the libfuncs field to\n\tthis_target_libfuncs.\n\t* target-globals.c: Include libfuncs.h.\n\t(default_target_globals): Initialize the libfuncs field.\n\t(save_target_globals): Likewise.\n\nFrom-SVN: r162099", "tree": {"sha": "3386f4b0b387575b31aa4559e02d101b1270353f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3386f4b0b387575b31aa4559e02d101b1270353f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e9c326a88c289e25d58d2e9efb8517ef272410d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e9c326a88c289e25d58d2e9efb8517ef272410d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e9c326a88c289e25d58d2e9efb8517ef272410d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e9c326a88c289e25d58d2e9efb8517ef272410d/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f7f18923aa399f15f5ba5f7f5bd4c76def90265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f7f18923aa399f15f5ba5f7f5bd4c76def90265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f7f18923aa399f15f5ba5f7f5bd4c76def90265"}], "stats": {"total": 113, "additions": 82, "deletions": 31}, "files": [{"sha": "833cfea39c066ab00dc72d435253b3ae83c39349", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e9c326a88c289e25d58d2e9efb8517ef272410d", "patch": "@@ -1,3 +1,30 @@\n+2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* Makefile.in (LIBFUNCS_H): Add $(HASHTAB_H).\n+\t(target-globals.o): Depend on $(LIBFUNCS_H).\n+\t* libfuncs.h: Include hashtab.h.\n+\t(libfunc_entry): Moved from optabs.c.\n+\t(target_libfuncs): New structure.\n+\t(default_target_libfuncs): Declare.\n+\t(this_target_libfuncs): Declare as a variable or define as a macro.\n+\t(libfunc_table): Redefine as a macro.\n+\t* optabs.c (default_target_libfuncs): New variable.\n+\t(this_target_libfuncs): New conditional variable.\n+\t(libfunc_table): Delete.\n+\t(libfunc_entry): Moved to optabs.h.\n+\t(libfunc_hash): Redefine as a macro.\n+\t(hash_libfunc, eq_libfunc): Fix comments.\n+\t(init_optabs): Use libfunc_hash to detect cases where the function\n+\thas already been called.  Clear the hash table instead of\n+\trecreating it.\n+\t* target-globals.h (this_target_libfuncs): Declare.\n+\t(target_globals): Add a libfuncs field.\n+\t(restore_target_globals): Copy the libfuncs field to\n+\tthis_target_libfuncs.\n+\t* target-globals.c: Include libfuncs.h.\n+\t(default_target_globals): Initialize the libfuncs field.\n+\t(save_target_globals): Likewise.\n+\n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* Makefile.in (LIBFUNCS_H): New variable.  Use instead of libfuncs.h"}, {"sha": "8ee8a32e1e7427c16ad0dbb4c0b18a00d45ca458", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3e9c326a88c289e25d58d2e9efb8517ef272410d", "patch": "@@ -969,7 +969,7 @@ GCC_PLUGIN_H = gcc-plugin.h highlev-plugin-common.h $(CONFIG_H) $(SYSTEM_H) \\\n \t\t$(HASHTAB_H)\n PLUGIN_H = plugin.h $(GCC_PLUGIN_H)\n PLUGIN_VERSION_H = plugin-version.h configargs.h\n-LIBFUNCS_H = libfuncs.h\n+LIBFUNCS_H = libfuncs.h $(HASHTAB_H)\n \n #\f\n # Now figure out from those variables how to compile and link.\n@@ -3482,7 +3482,8 @@ lower-subreg.o : lower-subreg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(EXPR_H) $(EXCEPT_H) $(REGS_H) $(TREE_PASS_H) $(DF_H)\n target-globals.o : target-globals.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) insn-config.h $(MACHMODE_H) $(GGC_H) $(TOPLEV_H) target-globals.h \\\n-   $(FLAGS_H) $(REGS_H) $(RTL_H) reload.h expmed.h $(EXPR_H) $(OPTABS_H)\n+   $(FLAGS_H) $(REGS_H) $(RTL_H) reload.h expmed.h $(EXPR_H) $(OPTABS_H) \\\n+   $(LIBFUNCS_H)\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h insn-config.h conditions.h \\"}, {"sha": "68b090eaad11af9fb7a9a53d5d68cf56027f0c1a", "filename": "gcc/libfuncs.h", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2Flibfuncs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2Flibfuncs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibfuncs.h?ref=3e9c326a88c289e25d58d2e9efb8517ef272410d", "patch": "@@ -20,6 +20,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_LIBFUNCS_H\n #define GCC_LIBFUNCS_H\n \n+#include \"hashtab.h\"\n+\n /* Enumeration of indexes into libfunc_table.  */\n enum libfunc_index\n {\n@@ -45,9 +47,34 @@ enum libfunc_index\n   LTI_MAX\n };\n \n-/* SYMBOL_REF rtx's for the library functions that are called\n-   implicitly and not via optabs.  */\n-extern GTY(()) rtx libfunc_table[LTI_MAX];\n+/* Information about an optab-related libfunc.  We use the same hashtable\n+   for normal optabs and conversion optabs.  In the first case mode2\n+   is unused.  */\n+struct GTY(()) libfunc_entry {\n+  size_t optab;\n+  enum machine_mode mode1, mode2;\n+  rtx libfunc;\n+};\n+\n+/* Target-dependent globals.  */\n+struct GTY(()) target_libfuncs {\n+  /* SYMBOL_REF rtx's for the library functions that are called\n+     implicitly and not via optabs.  */\n+  rtx x_libfunc_table[LTI_MAX];\n+\n+  /* Hash table used to convert declarations into nodes.  */\n+  htab_t GTY((param_is (struct libfunc_entry))) x_libfunc_hash;\n+};\n+\n+extern GTY(()) struct target_libfuncs default_target_libfuncs;\n+#if SWITCHABLE_TARGET\n+extern struct target_libfuncs *this_target_libfuncs;\n+#else\n+#define this_target_libfuncs (&default_target_libfuncs)\n+#endif\n+\n+#define libfunc_table \\\n+  (this_target_libfuncs->x_libfunc_table)\n \n /* Accessor macros for libfunc_table.  */\n "}, {"sha": "b9db02fe83fcc82c2560a5640442938cdd04c59f", "filename": "gcc/optabs.c", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3e9c326a88c289e25d58d2e9efb8517ef272410d", "patch": "@@ -46,11 +46,14 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n \n struct target_optabs default_target_optabs;\n+struct target_libfuncs default_target_libfuncs;\n #if SWITCHABLE_TARGET\n struct target_optabs *this_target_optabs = &default_target_optabs;\n+struct target_libfuncs *this_target_libfuncs = &default_target_libfuncs;\n #endif\n \n-rtx libfunc_table[LTI_MAX];\n+#define libfunc_hash \\\n+  (this_target_libfuncs->x_libfunc_hash)\n \n /* Contains the optab used for each rtx code.  */\n optab code_to_optab[NUM_RTX_CODE + 1];\n@@ -69,19 +72,7 @@ void debug_optab_libfuncs (void);\n #define DECIMAL_PREFIX \"dpd_\"\n #endif\n \f\n-\n-/* Info about libfunc.  We use same hashtable for normal optabs and conversion\n-   optab.  In the first case mode2 is unused.  */\n-struct GTY(()) libfunc_entry {\n-  size_t optab;\n-  enum machine_mode mode1, mode2;\n-  rtx libfunc;\n-};\n-\n-/* Hash table used to convert declarations into nodes.  */\n-static GTY((param_is (struct libfunc_entry))) htab_t libfunc_hash;\n-\n-/* Used for attribute_hash.  */\n+/* Used for libfunc_hash.  */\n \n static hashval_t\n hash_libfunc (const void *p)\n@@ -92,7 +83,7 @@ hash_libfunc (const void *p)\n \t  ^ e->optab);\n }\n \n-/* Used for optab_hash.  */\n+/* Used for libfunc_hash.  */\n \n static int\n eq_libfunc (const void *p, const void *q)\n@@ -6124,14 +6115,15 @@ set_conv_libfunc (convert_optab optable, enum machine_mode tmode,\n void\n init_optabs (void)\n {\n-  static bool reinit;\n-\n-  libfunc_hash = htab_create_ggc (10, hash_libfunc, eq_libfunc, NULL);\n-\n-  /* We statically initialize the insn_codes with the equivalent of\n-     CODE_FOR_nothing.  Repeat the process if reinitialising.  */\n-  if (reinit)\n-    init_insn_codes ();\n+  if (libfunc_hash)\n+    {\n+      htab_empty (libfunc_hash);\n+      /* We statically initialize the insn_codes with the equivalent of\n+\t CODE_FOR_nothing.  Repeat the process if reinitialising.  */\n+      init_insn_codes ();\n+    }\n+  else\n+    libfunc_hash = htab_create_ggc (10, hash_libfunc, eq_libfunc, NULL);\n \n   init_optab (add_optab, PLUS);\n   init_optabv (addv_optab, PLUS);\n@@ -6572,8 +6564,6 @@ init_optabs (void)\n \n   /* Allow the target to add more libcalls or rename some, etc.  */\n   targetm.init_libfuncs ();\n-\n-  reinit = true;\n }\n \n /* Print information about the current contents of the optabs on"}, {"sha": "6655f9a5fe062279bc1a7ebfe540a4dc508cf196", "filename": "gcc/target-globals.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=3e9c326a88c289e25d58d2e9efb8517ef272410d", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expmed.h\"\n #include \"expr.h\"\n #include \"optabs.h\"\n+#include \"libfuncs.h\"\n \n #if SWITCHABLE_TARGET\n struct target_globals default_target_globals = {\n@@ -43,7 +44,8 @@ struct target_globals default_target_globals = {\n   &default_target_hard_regs,\n   &default_target_reload,\n   &default_target_expmed,\n-  &default_target_optabs\n+  &default_target_optabs,\n+  &default_target_libfuncs\n };\n \n struct target_globals *\n@@ -59,6 +61,7 @@ save_target_globals (void)\n   g->reload = XCNEW (struct target_reload);\n   g->expmed = XCNEW (struct target_expmed);\n   g->optabs = XCNEW (struct target_optabs);\n+  g->libfuncs = ggc_alloc_cleared_target_libfuncs ();\n   restore_target_globals (g);\n   target_reinit ();\n   return g;"}, {"sha": "7b7b725f4dc1ea09c690823f65cd994c5258ec2e", "filename": "gcc/target-globals.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2Ftarget-globals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e9c326a88c289e25d58d2e9efb8517ef272410d/gcc%2Ftarget-globals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.h?ref=3e9c326a88c289e25d58d2e9efb8517ef272410d", "patch": "@@ -28,6 +28,7 @@ extern struct target_hard_regs *this_target_hard_regs;\n extern struct target_reload *this_target_reload;\n extern struct target_expmed *this_target_expmed;\n extern struct target_optabs *this_target_optabs;\n+extern struct target_libfuncs *this_target_libfuncs;\n \n struct GTY(()) target_globals {\n   struct target_flag_state *GTY((skip)) flag_state;\n@@ -37,6 +38,7 @@ struct GTY(()) target_globals {\n   struct target_reload *GTY((skip)) reload;\n   struct target_expmed *GTY((skip)) expmed;\n   struct target_optabs *GTY((skip)) optabs;\n+  struct target_libfuncs *libfuncs;\n };\n \n extern struct target_globals default_target_globals;\n@@ -53,6 +55,7 @@ restore_target_globals (struct target_globals *g)\n   this_target_reload = g->reload;\n   this_target_expmed = g->expmed;\n   this_target_optabs = g->optabs;\n+  this_target_libfuncs = g->libfuncs;\n }\n #endif\n "}]}