{"sha": "de33eb3865a19e2fcc527de18e611de0703cb83a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUzM2ViMzg2NWExOWUyZmNjNTI3ZGUxOGU2MTFkZTA3MDNjYjgzYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T12:09:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T12:09:11Z"}, "message": "[multiple changes]\n\n2017-04-27  Bob Duff  <duff@adacore.com>\n\n\t* g-dyntab.ads, g-dyntab.adb: Add assertions to subprograms that\n\tcan reallocate.\n\t* atree.adb, elists.adb, fname-uf.adb, ghost.adb, inline.adb,\n\t* lib.adb, namet.adb, nlists.adb, sem.adb, sinput.adb, stringt.adb:\n\tReorder code so that above assertions do not fail.\n\t* table.ads: Remove obsolete comment on Locked.\n\n2017-04-27  Claire Dross  <dross@adacore.com>\n\n\t* a-cfdlli.ads: Code cleanup.\n\n2017-04-27  Yannick Moy  <moy@adacore.com>\n\n\t* exp_spark.adb (Expand_SPARK_Freeze_Type): Build a DIC procedure\n\twhen needed for proof.\t(Expand_SPARK): Call the new procedure.\n\t* exp_util.ads Fix typo.\n\n2017-04-27  Gary Dismukes  <dismukes@adacore.com>\n\n\t* a-cofuma.ads, a-cfhama.ads: Minor reformatting, grammar, and typo\n\tfixes.\n\nFrom-SVN: r247323", "tree": {"sha": "a9a4e9fa415795e1946a1894ef10ac7a430de742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9a4e9fa415795e1946a1894ef10ac7a430de742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de33eb3865a19e2fcc527de18e611de0703cb83a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de33eb3865a19e2fcc527de18e611de0703cb83a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de33eb3865a19e2fcc527de18e611de0703cb83a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de33eb3865a19e2fcc527de18e611de0703cb83a/comments", "author": null, "committer": null, "parents": [{"sha": "1b7c8d39fb9f98a73adfd125b5f3b768c6401cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7c8d39fb9f98a73adfd125b5f3b768c6401cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b7c8d39fb9f98a73adfd125b5f3b768c6401cd2"}], "stats": {"total": 194, "additions": 122, "deletions": 72}, "files": [{"sha": "7c5953fd674981264785e217bd10556a5ace92bf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -1,3 +1,27 @@\n+2017-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* g-dyntab.ads, g-dyntab.adb: Add assertions to subprograms that\n+\tcan reallocate.\n+\t* atree.adb, elists.adb, fname-uf.adb, ghost.adb, inline.adb,\n+\t* lib.adb, namet.adb, nlists.adb, sem.adb, sinput.adb, stringt.adb:\n+\tReorder code so that above assertions do not fail.\n+\t* table.ads: Remove obsolete comment on Locked.\n+\n+2017-04-27  Claire Dross  <dross@adacore.com>\n+\n+\t* a-cfdlli.ads: Code cleanup.\n+\n+2017-04-27  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Freeze_Type): Build a DIC procedure\n+\twhen needed for proof.\t(Expand_SPARK): Call the new procedure.\n+\t* exp_util.ads Fix typo.\n+\n+2017-04-27  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* a-cofuma.ads, a-cfhama.ads: Minor reformatting, grammar, and typo\n+\tfixes.\n+\n 2017-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_elab.adb Add new type Visited_Element"}, {"sha": "596af5e40391f9fab76d2fe6cc4c63567100fff7", "filename": "gcc/ada/a-cfdlli.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fa-cfdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fa-cfdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfdlli.ads?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -175,7 +175,7 @@ is\n \n             --  Big contains all cursors of Small\n \n-            P.Keys_Included (Small, Big)\n+            (P.Keys_Included (Small, Big)\n \n               --  Cursors located before Cut are not moved, cursors located\n               --  after are shifted by Count.\n@@ -191,7 +191,7 @@ is\n \n               and (for all I of Big =>\n                     P.Has_Key (Small, I)\n-                      or P.Get (Big, I) - Count in Cut - Count  .. Cut - 1);\n+                      or P.Get (Big, I) - Count in Cut - Count  .. Cut - 1));\n \n       function P_Positions_Swapped\n         (Left  : P.Map;"}, {"sha": "8f982fede252e0222c3aa3ff37392867f41580ca", "filename": "gcc/ada/a-cfhama.ads", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fa-cfhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fa-cfhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhama.ads?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -44,8 +44,8 @@\n --    and its previous version C'Old) for expressing properties, which is not\n --    possible if cursors encapsulate an access to the underlying container.\n \n---  Iteration over maps is done using the Iterable aspect which is SPARK\n---  compatible. For of iteration ranges over keys instead of elements.\n+--  Iteration over maps is done using the Iterable aspect, which is SPARK\n+--  compatible. \"For of\" iteration ranges over keys instead of elements.\n \n with Ada.Containers.Functional_Vectors;\n with Ada.Containers.Functional_Maps;\n@@ -153,7 +153,7 @@ is\n                      K.Get (K_Right, P.Get (P_Right, C))));\n \n       function Model (Container : Map) return M.Map with\n-      --  The highlevel model of a map is a map from keys to elements. Neither\n+      --  The high-level model of a map is a map from keys to elements. Neither\n       --  cursors nor order of elements are represented in this model. Keys are\n       --  modeled up to equivalence.\n \n@@ -193,14 +193,14 @@ is\n \n       function Positions (Container : Map) return P.Map with\n       --  The Positions map is used to model cursors. It only contains valid\n-      --  cursors and map them to their position in the container.\n+      --  cursors and maps them to their position in the container.\n \n         Ghost,\n         Global => null,\n         Post   =>\n           not P.Has_Key (Positions'Result, No_Element)\n \n-            --  Positions of cursors are smaller than the container's length.\n+            --  Positions of cursors are smaller than the container's length\n \n             and then\n               (for all I of Positions'Result =>\n@@ -217,11 +217,11 @@ is\n \n       procedure Lift_Abstraction_Level (Container : Map) with\n         --  Lift_Abstraction_Level is a ghost procedure that does nothing but\n-        --  assume that we can access to the same elements by iterating over\n+        --  assume that we can access the same elements by iterating over\n         --  positions or cursors.\n         --  This information is not generally useful except when switching from\n-        --  a lowlevel, cursor aware view of a container, to a highlevel\n-        --  position based view.\n+        --  a low-level, cursor-aware view of a container, to a high-level,\n+        --  position-based view.\n \n         Ghost,\n         Global => null,\n@@ -328,17 +328,17 @@ is\n      Pre    => Has_Element (Container, Position),\n      Post   =>\n \n-       --  Order of keys and cursors are preserved\n+       --  Order of keys and cursors is preserved\n \n        Keys (Container) = Keys (Container)'Old\n          and Positions (Container) = Positions (Container)'Old\n \n-         --  New_Item is now associated to the key at position Position in\n+         --  New_Item is now associated with the key at position Position in\n          --  Container.\n \n          and Element (Container, Position) = New_Item\n \n-         --  Elements associated to other keys are preserved\n+         --  Elements associated with other keys are preserved\n \n          and M.Same_Keys (Model (Container), Model (Container)'Old)\n          and M.Elements_Equal_Except\n@@ -405,7 +405,7 @@ is\n                    Model (Container)'Old,\n                    Key)\n \n-            --  Mapping from cursors to keys are preserved\n+            --  Mapping from cursors to keys is preserved\n \n             and Mapping_Preserved\n                   (K_Left  => Keys (Container)'Old,\n@@ -443,7 +443,7 @@ is\n                 Model (Container)'Old,\n                 Key)\n \n-         --  Mapping from cursors to keys are preserved\n+         --  Mapping from cursors to keys is preserved\n \n          and Mapping_Preserved\n                (K_Left  => Keys (Container)'Old,\n@@ -485,7 +485,7 @@ is\n                    Keys (Container),\n                    P.Get (Positions (Container), Find (Container, Key)))\n \n-            --  Elements associated to other keys are preserved\n+            --  Elements associated with other keys are preserved\n \n             and M.Same_Keys (Model (Container), Model (Container)'Old)\n             and M.Elements_Equal_Except\n@@ -506,7 +506,7 @@ is\n                    Model (Container)'Old,\n                    Key)\n \n-            --  Mapping from cursors to keys are preserved\n+            --  Mapping from cursors to keys is preserved\n \n             and Mapping_Preserved\n                   (K_Left  => Keys (Container)'Old,\n@@ -540,11 +540,11 @@ is\n                Keys (Container),\n                P.Get (Positions (Container), Find (Container, Key)))\n \n-         --  New_Item is now associated to the Key in Container\n+         --  New_Item is now associated with the Key in Container\n \n          and Element (Model (Container), Key) = New_Item\n \n-         --  Elements associated to other keys are preserved\n+         --  Elements associated with other keys are preserved\n \n          and M.Same_Keys (Model (Container), Model (Container)'Old)\n          and M.Elements_Equal_Except\n@@ -577,7 +577,7 @@ is\n                    Model (Container),\n                    Key)\n \n-            --  Mapping from cursors to keys are preserved\n+            --  Mapping from cursors to keys is preserved\n \n             and Mapping_Preserved\n                   (K_Left  => Keys (Container),\n@@ -607,7 +607,7 @@ is\n                 Model (Container),\n                 Key)\n \n-         --  Mapping from cursors to keys are preserved\n+         --  Mapping from cursors to keys is preserved\n \n          and Mapping_Preserved\n                (K_Left  => Keys (Container),\n@@ -639,7 +639,7 @@ is\n                 Model (Container),\n                 Key (Container, Position)'Old)\n \n-         --  Mapping from cursors to keys are preserved\n+         --  Mapping from cursors to keys is preserved\n \n          and Mapping_Preserved\n                (K_Left  => Keys (Container),\n@@ -700,7 +700,7 @@ is\n        (not Contains (Model (Container), Key) =>\n           Find'Result = No_Element,\n \n-        --  Otherwise, Find returns a valid cusror in Container\n+        --  Otherwise, Find returns a valid cursor in Container\n \n         others =>\n           P.Has_Key (Positions (Container), Find'Result)"}, {"sha": "3f968dcaeb00f8c52a66d8ddf5d00706abf6beb8", "filename": "gcc/ada/a-cofuma.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fa-cofuma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fa-cofuma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofuma.ads?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -48,7 +48,7 @@ package Ada.Containers.Functional_Maps with SPARK_Mode is\n    --  Maps are empty when default initialized.\n    --  \"For in\" quantification over maps should not be used.\n    --  \"For of\" quantification over maps iterates over keys.\n-   --  Note that, for proof, for of quantification is understood modulo\n+   --  Note that, for proof, \"for of\" quantification is understood modulo\n    --  equivalence (quantification includes keys equivalent to keys of the\n    --  map).\n "}, {"sha": "0505b86868db6bbbb555aeea44f7331605a974a2", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1579,12 +1579,12 @@ package body Atree is\n \n    procedure Lock is\n    begin\n-      Nodes.Locked := True;\n-      Flags.Locked := True;\n-      Orig_Nodes.Locked := True;\n       Nodes.Release;\n+      Nodes.Locked := True;\n       Flags.Release;\n+      Flags.Locked := True;\n       Orig_Nodes.Release;\n+      Orig_Nodes.Locked := True;\n    end Lock;\n \n    ----------------"}, {"sha": "881d78cc88ed9ec615ef41290c3e18ab68ea3325", "filename": "gcc/ada/elists.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Felists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Felists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Felists.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -320,10 +320,10 @@ package body Elists is\n \n    procedure Lock is\n    begin\n-      Elists.Locked := True;\n-      Elmts.Locked := True;\n       Elists.Release;\n+      Elists.Locked := True;\n       Elmts.Release;\n+      Elmts.Locked := True;\n    end Lock;\n \n    --------------------"}, {"sha": "d7f1571a0b3a89e4169ee95662c73a1b8dd95d19", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -53,6 +53,9 @@ package body Exp_SPARK is\n    --  Replace occurrences of System'To_Address by calls to\n    --  System.Storage_Elements.To_Address\n \n+   procedure Expand_SPARK_Freeze_Type (E : Entity_Id);\n+   --  Build the DIC procedure of a type when needed, if not already done\n+\n    procedure Expand_SPARK_N_Object_Declaration (N : Node_Id);\n    --  Perform object-declaration-specific expansion\n \n@@ -122,6 +125,11 @@ package body Exp_SPARK is\n          when N_Object_Renaming_Declaration =>\n             Expand_SPARK_N_Object_Renaming_Declaration (N);\n \n+         when N_Freeze_Entity =>\n+            if Is_Type (Entity (N)) then\n+               Expand_SPARK_Freeze_Type (Entity (N));\n+            end if;\n+\n          --  In SPARK mode, no other constructs require expansion\n \n          when others =>\n@@ -233,6 +241,23 @@ package body Exp_SPARK is\n       end if;\n    end Expand_SPARK_N_Attribute_Reference;\n \n+   ------------------------------\n+   -- Expand_SPARK_Freeze_Type --\n+   ------------------------------\n+\n+   procedure Expand_SPARK_Freeze_Type (E : Entity_Id) is\n+   begin\n+      --  When a DIC is inherited by a tagged type, it may need to be\n+      --  specialized to the descendant type, hence build a separate DIC\n+      --  procedure for it as done during regular expansion for compilation.\n+\n+      if Has_DIC (E)\n+        and then Is_Tagged_Type (E)\n+      then\n+         Build_DIC_Procedure_Body (E, For_Freeze => True);\n+      end if;\n+   end Expand_SPARK_Freeze_Type;\n+\n    ---------------------------------------\n    -- Expand_SPARK_N_Object_Declaration --\n    ---------------------------------------"}, {"sha": "3f60993b1a30c5c33ff490ecd6bb5087ac96818a", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -283,7 +283,7 @@ package Exp_Util is\n       For_Freeze : Boolean := False);\n    --  Create the body of the procedure which verifies the assertion expression\n    --  of pragma Default_Initial_Condition at run time. Flag For_Freeze should\n-   --  be set when the body is construction as part of the freezing actions for\n+   --  be set when the body is constructed as part of the freezing actions for\n    --  Typ.\n \n    procedure Build_DIC_Procedure_Declaration (Typ : Entity_Id);"}, {"sha": "dea7a0020bcb10ef26fee01071e9ca6766d9569e", "filename": "gcc/ada/fname-uf.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Ffname-uf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Ffname-uf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffname-uf.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -549,8 +549,8 @@ package body Fname.UF is\n \n    procedure Lock is\n    begin\n-      SFN_Table.Locked := True;\n       SFN_Table.Release;\n+      SFN_Table.Locked := True;\n    end Lock;\n \n    -------------------"}, {"sha": "60bf3455c280513c3cd80fbea1839e9d65454751", "filename": "gcc/ada/g-dyntab.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fg-dyntab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fg-dyntab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dyntab.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -59,6 +59,7 @@ package body GNAT.Dynamic_Tables is\n    begin\n       --  Note that Num can be negative\n \n+      pragma Assert (not T.Locked);\n       Set_Last (T, T.P.Last + Table_Index_Type'Base (Num));\n    end Allocate;\n \n@@ -68,6 +69,7 @@ package body GNAT.Dynamic_Tables is\n \n    procedure Append (T : in out Instance; New_Val : Table_Component_Type) is\n    begin\n+      pragma Assert (not T.Locked);\n       Set_Item (T, T.P.Last + 1, New_Val);\n    end Append;\n \n@@ -88,6 +90,7 @@ package body GNAT.Dynamic_Tables is\n \n    procedure Decrement_Last (T : in out Instance) is\n    begin\n+      pragma Assert (not T.Locked);\n       Allocate (T, -1);\n    end Decrement_Last;\n \n@@ -118,6 +121,7 @@ package body GNAT.Dynamic_Tables is\n    ----------\n \n    procedure Free (T : in out Instance) is\n+      pragma Assert (not T.Locked);\n       subtype Alloc_Type is Table_Type (First .. T.P.Last_Allocated);\n       type Alloc_Ptr is access all Alloc_Type;\n \n@@ -228,6 +232,7 @@ package body GNAT.Dynamic_Tables is\n \n    procedure Increment_Last (T : in out Instance) is\n    begin\n+      pragma Assert (not T.Locked);\n       Allocate (T, 1);\n    end Increment_Last;\n \n@@ -237,6 +242,7 @@ package body GNAT.Dynamic_Tables is\n \n    procedure Init (T : in out Instance) is\n    begin\n+      pragma Assert (not T.Locked);\n       Free (T);\n    end Init;\n \n@@ -266,6 +272,8 @@ package body GNAT.Dynamic_Tables is\n \n    procedure Move (From, To : in out Instance) is\n    begin\n+      pragma Assert (not From.Locked);\n+      pragma Assert (not To.Locked);\n       pragma Assert (Is_Empty (To));\n       To := From;\n \n@@ -281,6 +289,7 @@ package body GNAT.Dynamic_Tables is\n    -------------\n \n    procedure Release (T : in out Instance) is\n+      pragma Assert (not T.Locked);\n       Old_Last_Allocated : constant Table_Last_Type := T.P.Last_Allocated;\n \n       function New_Last_Allocated return Table_Last_Type;\n@@ -355,6 +364,7 @@ package body GNAT.Dynamic_Tables is\n       Index : Valid_Table_Index_Type;\n       Item  : Table_Component_Type)\n    is\n+      pragma Assert (not T.Locked);\n       Item_Copy : constant Table_Component_Type := Item;\n    begin\n       --  If Set_Last is going to reallocate the table, we make a copy of Item,\n@@ -386,6 +396,7 @@ package body GNAT.Dynamic_Tables is\n \n    procedure Set_Last (T : in out Instance; New_Val : Table_Last_Type) is\n    begin\n+      pragma Assert (not T.Locked);\n       if New_Val > T.P.Last_Allocated then\n          Grow (T, New_Val);\n       end if;"}, {"sha": "b3095b64fbfa85a1f31fac1a35e1ada39c252098", "filename": "gcc/ada/g-dyntab.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fg-dyntab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fg-dyntab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-dyntab.ads?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -173,10 +173,10 @@ package GNAT.Dynamic_Tables is\n       --  SCO_Unit_Table and SCO_Table in scos.h.\n \n       Locked : Boolean := False;\n-      --  Table expansion is permitted only if this is False. A client may set\n-      --  Locked to True, in which case any attempt to expand the table will\n-      --  cause an assertion failure. Note that while a table is locked, its\n-      --  address in memory remains fixed and unchanging.\n+      --  Table reallocation is permitted only if this is False. A client may\n+      --  set Locked to True, in which case any operation that might expand or\n+      --  shrink the table will cause an assertion failure. While a table is\n+      --  locked, its address in memory remains fixed and unchanging.\n \n       P : Table_Private;\n    end record;"}, {"sha": "beb05f4ecdd08fe12ab4eff410f35f3d90621ec9", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -1091,8 +1091,8 @@ package body Ghost is\n \n    procedure Lock is\n    begin\n-      Ignored_Ghost_Units.Locked := True;\n       Ignored_Ghost_Units.Release;\n+      Ignored_Ghost_Units.Locked := True;\n    end Lock;\n \n    -----------------------------------"}, {"sha": "0b9affdce7b5d1f3d47480c704195c4a92dc7498", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4184,14 +4184,14 @@ package body Inline is\n \n    procedure Lock is\n    begin\n-      Pending_Instantiations.Locked := True;\n-      Inlined_Bodies.Locked := True;\n-      Successors.Locked := True;\n-      Inlined.Locked := True;\n       Pending_Instantiations.Release;\n+      Pending_Instantiations.Locked := True;\n       Inlined_Bodies.Release;\n+      Inlined_Bodies.Locked := True;\n       Successors.Release;\n+      Successors.Locked := True;\n       Inlined.Release;\n+      Inlined.Locked := True;\n    end Lock;\n \n    --------------------------------"}, {"sha": "cce586c06c71785c6af501f553a8bbe0deff167f", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1046,12 +1046,12 @@ package body Lib is\n \n    procedure Lock is\n    begin\n-      Linker_Option_Lines.Locked := True;\n-      Load_Stack.Locked := True;\n-      Units.Locked := True;\n       Linker_Option_Lines.Release;\n+      Linker_Option_Lines.Locked := True;\n       Load_Stack.Release;\n+      Load_Stack.Locked := True;\n       Units.Release;\n+      Units.Locked := True;\n    end Lock;\n \n    ---------------"}, {"sha": "b87dd91e7b1c742d30d22829fadd2d141e26a032", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -1088,10 +1088,10 @@ package body Namet is\n    begin\n       Name_Chars.Set_Last (Name_Chars.Last + Name_Chars_Reserve);\n       Name_Entries.Set_Last (Name_Entries.Last + Name_Entries_Reserve);\n-      Name_Chars.Locked := True;\n-      Name_Entries.Locked := True;\n       Name_Chars.Release;\n+      Name_Chars.Locked := True;\n       Name_Entries.Release;\n+      Name_Entries.Locked := True;\n    end Lock;\n \n    ----------------\n@@ -1708,11 +1708,11 @@ package body Namet is\n \n    procedure Unlock is\n    begin\n-      Name_Chars.Set_Last (Name_Chars.Last - Name_Chars_Reserve);\n-      Name_Entries.Set_Last (Name_Entries.Last - Name_Entries_Reserve);\n       Name_Chars.Locked := False;\n-      Name_Entries.Locked := False;\n+      Name_Chars.Set_Last (Name_Chars.Last - Name_Chars_Reserve);\n       Name_Chars.Release;\n+      Name_Entries.Locked := False;\n+      Name_Entries.Set_Last (Name_Entries.Last - Name_Entries_Reserve);\n       Name_Entries.Release;\n    end Unlock;\n "}, {"sha": "7050c3e0ff55bf84b1098c2c976106697edcc202", "filename": "gcc/ada/nlists.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fnlists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fnlists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -721,14 +721,12 @@ package body Nlists is\n \n    procedure Lock is\n    begin\n-      Lists.Locked := True;\n       Lists.Release;\n-\n-      Prev_Node.Locked := True;\n-      Next_Node.Locked := True;\n-\n+      Lists.Locked := True;\n       Prev_Node.Release;\n+      Prev_Node.Locked := True;\n       Next_Node.Release;\n+      Next_Node.Locked := True;\n    end Lock;\n \n    ----------------"}, {"sha": "f277e03d2a788ae926df90a14769ef3220e814fc", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -1227,8 +1227,8 @@ package body Sem is\n \n    procedure Lock is\n    begin\n-      Scope_Stack.Locked := True;\n       Scope_Stack.Release;\n+      Scope_Stack.Locked := True;\n    end Lock;\n \n    ----------------"}, {"sha": "a5f345d8143b5d5332284f9b8b4e3745c7eae59a", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -678,8 +678,8 @@ package body Sinput is\n \n    procedure Lock is\n    begin\n-      Source_File.Locked := True;\n       Source_File.Release;\n+      Source_File.Locked := True;\n    end Lock;\n \n    ----------------------"}, {"sha": "c59ec30a20d0ce906fb5f464cff7eea369719110", "filename": "gcc/ada/stringt.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fstringt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Fstringt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.adb?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -128,10 +128,10 @@ package body Stringt is\n \n    procedure Lock is\n    begin\n-      String_Chars.Locked := True;\n-      Strings.Locked := True;\n       String_Chars.Release;\n+      String_Chars.Locked := True;\n       Strings.Release;\n+      Strings.Locked := True;\n    end Lock;\n \n    ----------"}, {"sha": "066dc4ff18d6c5617482e0de67b009d85c0d0263", "filename": "gcc/ada/table.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Ftable.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de33eb3865a19e2fcc527de18e611de0703cb83a/gcc%2Fada%2Ftable.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftable.ads?ref=de33eb3865a19e2fcc527de18e611de0703cb83a", "patch": "@@ -78,14 +78,6 @@ package Table is\n       Table : Table_Ptr renames Tab.Table;\n \n       Locked : Boolean renames Tab.Locked;\n-      --  Table expansion is permitted only if this switch is set to False. A\n-      --  client may set Locked to True, in which case any attempt to expand\n-      --  the table will cause an assertion failure. Note that while a table\n-      --  is locked, its address in memory remains fixed and unchanging. This\n-      --  feature is used to control table expansion during Gigi processing.\n-      --  Gigi assumes that tables other than the Uint and Ureal tables do\n-      --  not move during processing, which means that they cannot be expanded.\n-      --  The Locked flag is used to enforce this restriction.\n \n       function Is_Empty return Boolean renames Tab.Is_Empty;\n "}]}