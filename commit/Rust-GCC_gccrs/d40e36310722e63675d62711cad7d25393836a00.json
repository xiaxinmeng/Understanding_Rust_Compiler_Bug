{"sha": "d40e36310722e63675d62711cad7d25393836a00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwZTM2MzEwNzIyZTYzNjc1ZDYyNzExY2FkN2QyNTM5MzgzNmEwMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-08-06T14:07:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-08-06T14:07:59Z"}, "message": "PR c++/91378 - ICE with noexcept and auto return type.\n\nHere, since the call to g is not type-dependent, we call mark_used on it to\ndetermine its return type.  This also wants to instantiate the\nnoexcept-expression.  But since nothing in maybe_instantiate_noexcept was\ncalling push_to_top_level, we substituted b.i with processing_template_decl\nset, so we left it unresolved for later access checking.  As a result, the\ntype of C::g<int> remained instantiation-dependent, leading to an ICE in\ntype_dependent_expression_p on the assert that the type of a function\ntemplate with no dependent template arguments must be non-dependent.\n\n\t* pt.c (maybe_instantiate_noexcept): push_to_top_level.\n\nFrom-SVN: r274143", "tree": {"sha": "5780be4efd59ee7d28deecce3135aeecd8b8102d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5780be4efd59ee7d28deecce3135aeecd8b8102d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d40e36310722e63675d62711cad7d25393836a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40e36310722e63675d62711cad7d25393836a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40e36310722e63675d62711cad7d25393836a00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40e36310722e63675d62711cad7d25393836a00/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a013865bed6ae419945945e418d078bf30f8b89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a013865bed6ae419945945e418d078bf30f8b89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a013865bed6ae419945945e418d078bf30f8b89"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "9b0a34c98aac449d5a89cfd29b3a49a9f70fc8a7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40e36310722e63675d62711cad7d25393836a00/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40e36310722e63675d62711cad7d25393836a00/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d40e36310722e63675d62711cad7d25393836a00", "patch": "@@ -1,3 +1,8 @@\n+2019-08-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91378 - ICE with noexcept and auto return type.\n+\t* pt.c (maybe_instantiate_noexcept): push_to_top_level.\n+\n 2019-08-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (check_array_designated_initializer): Use"}, {"sha": "b71fbaad78991b7eb6674162bdeab5f061fea944", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40e36310722e63675d62711cad7d25393836a00/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40e36310722e63675d62711cad7d25393836a00/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d40e36310722e63675d62711cad7d25393836a00", "patch": "@@ -24315,12 +24315,11 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \t}\n       else if (push_tinst_level (fn))\n \t{\n+\t  push_to_top_level ();\n \t  push_access_scope (fn);\n \t  push_deferring_access_checks (dk_no_deferred);\n \t  input_location = DECL_SOURCE_LOCATION (fn);\n \n-\t  tree save_ccp = current_class_ptr;\n-\t  tree save_ccr = current_class_ref;\n \t  /* If needed, set current_class_ptr for the benefit of\n \t     tsubst_copy/PARM_DECL.  */\n \t  tree tdecl = DECL_TEMPLATE_RESULT (DECL_TI_TEMPLATE (fn));\n@@ -24346,9 +24345,6 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \t\t\t\t\t/*function_p=*/false,\n \t\t\t\t\t/*i_c_e_p=*/true);\n \n-\t  current_class_ptr = save_ccp;\n-\t  current_class_ref = save_ccr;\n-\n \t  /* Build up the noexcept-specification.  */\n \t  spec = build_noexcept_spec (noex, tf_warning_or_error);\n \n@@ -24358,6 +24354,7 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n \t  pop_deferring_access_checks ();\n \t  pop_access_scope (fn);\n \t  pop_tinst_level ();\n+\t  pop_from_top_level ();\n \t}\n       else\n \tspec = noexcept_false_spec;"}, {"sha": "69bdd9586eb930588061a32a689aa2aced1d3b68", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn56.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40e36310722e63675d62711cad7d25393836a00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40e36310722e63675d62711cad7d25393836a00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn56.C?ref=d40e36310722e63675d62711cad7d25393836a00", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/91378\n+// { dg-do compile { target c++14 } }\n+\n+struct B\n+{\n+  int i;\n+};\n+\n+struct C\n+{\n+  template <class T> static auto\n+  g(B b) noexcept(noexcept(b.i)) { }\n+};\n+\n+template <class T>\n+void h(T t)\n+{\n+  C::g<int>({});\n+}"}]}