{"sha": "5c021f17e7d09a0eae2d6fb875c9a5484bd4e043", "node_id": "C_kwDOANBUbNoAKDVjMDIxZjE3ZTdkMDlhMGVhZTJkNmZiODc1YzlhNTQ4NGJkNGUwNDM", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-18T05:05:03Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-19T17:09:57Z"}, "message": "constexprify some tree variables\n\nSince we use C++11 by default now, we can\nuse constexpr for some const decls in tree-core.h.\n\nThis patch does that and it allows for better optimizations\nof GCC code with checking enabled and without LTO.\n\nFor an example generic-match.cc compiling is speed up due\nto the less number of basic blocks and less debugging info\nproduced. I did not check the speed of compiling the same source\nbut rather the speed of compiling the old vs new sources here\n(but with the same compiler base).\n\nThe small slow down in the parsing of the arrays in each TU\nis migrated by a speed up in how much code/debugging info\nis produced in the end.\n\nNote I looked at generic-match.cc since it is one of the\ncompiling sources which causes parallel building to stall and\nI wanted to speed it up.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\tPR middle-end/14840\n\t* tree-core.h (tree_code_type): Constexprify\n\tby including all-tree.def.\n\t(tree_code_length): Likewise.\n\t* tree.cc (tree_code_type): Remove.\n\t(tree_code_length): Remove.", "tree": {"sha": "8874a8f9368ec8857ce28d2ce6d886fa1fafc7da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8874a8f9368ec8857ce28d2ce6d886fa1fafc7da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c021f17e7d09a0eae2d6fb875c9a5484bd4e043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c021f17e7d09a0eae2d6fb875c9a5484bd4e043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c021f17e7d09a0eae2d6fb875c9a5484bd4e043", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c021f17e7d09a0eae2d6fb875c9a5484bd4e043/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18169e8eee1887cdd200897c30ac26bec8721729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18169e8eee1887cdd200897c30ac26bec8721729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18169e8eee1887cdd200897c30ac26bec8721729"}], "stats": {"total": 45, "additions": 19, "deletions": 26}, "files": [{"sha": "e146b133dbd6867f990c86d180cf1bb0cfd03550", "filename": "gcc/tree-core.h", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c021f17e7d09a0eae2d6fb875c9a5484bd4e043/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c021f17e7d09a0eae2d6fb875c9a5484bd4e043/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=5c021f17e7d09a0eae2d6fb875c9a5484bd4e043", "patch": "@@ -2284,15 +2284,32 @@ struct floatn_type_info {\n /* Matrix describing the structures contained in a given tree code.  */\n extern bool tree_contains_struct[MAX_TREE_CODES][64];\n \n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n+#define END_OF_BASE_TREE_CODES tcc_exceptional,\n+\n+\n /* Class of tree given its code.  */\n-extern const enum tree_code_class tree_code_type[];\n+constexpr enum tree_code_class tree_code_type[] = {\n+#include \"all-tree.def\"\n+};\n+\n+#undef DEFTREECODE\n+#undef END_OF_BASE_TREE_CODES\n \n /* Each tree code class has an associated string representation.\n    These must correspond to the tree_code_class entries.  */\n extern const char *const tree_code_class_strings[];\n \n /* Number of argument-words in each kind of tree-node.  */\n-extern const unsigned char tree_code_length[];\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n+#define END_OF_BASE_TREE_CODES 0,\n+constexpr unsigned char tree_code_length[] = {\n+#include \"all-tree.def\"\n+};\n+\n+#undef DEFTREECODE\n+#undef END_OF_BASE_TREE_CODES\n \n /* Vector of all alias pairs for global symbols.  */\n extern GTY(()) vec<alias_pair, va_gc> *alias_pairs;"}, {"sha": "254b2373dcf62a8bf7a6f4e959f0caff785a2af7", "filename": "gcc/tree.cc", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c021f17e7d09a0eae2d6fb875c9a5484bd4e043/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c021f17e7d09a0eae2d6fb875c9a5484bd4e043/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=5c021f17e7d09a0eae2d6fb875c9a5484bd4e043", "patch": "@@ -74,31 +74,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"asan.h\"\n #include \"ubsan.h\"\n \n-/* Tree code classes.  */\n \n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-#define END_OF_BASE_TREE_CODES tcc_exceptional,\n-\n-const enum tree_code_class tree_code_type[] = {\n-#include \"all-tree.def\"\n-};\n-\n-#undef DEFTREECODE\n-#undef END_OF_BASE_TREE_CODES\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-#define END_OF_BASE_TREE_CODES 0,\n-\n-const unsigned char tree_code_length[] = {\n-#include \"all-tree.def\"\n-};\n-\n-#undef DEFTREECODE\n-#undef END_OF_BASE_TREE_CODES\n \n /* Names of tree components.\n    Used for printing out the tree and error messages.  */"}]}