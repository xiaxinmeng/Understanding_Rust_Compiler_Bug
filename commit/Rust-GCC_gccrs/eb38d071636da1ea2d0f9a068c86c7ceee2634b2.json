{"sha": "eb38d071636da1ea2d0f9a068c86c7ceee2634b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIzOGQwNzE2MzZkYTFlYTJkMGY5YTA2OGM4NmM3Y2VlZTI2MzRiMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-04-10T10:28:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-04-10T10:28:33Z"}, "message": "Add missing cases to vect_get_smallest_scalar_type (PR 85286)\n\nIn this PR we used WIDEN_SUM_EXPR to vectorise:\n\n  short i, y;\n  int sum;\n  [...]\n  for (i = x; i > 0; i--)\n    sum += y;\n\nwith 4 ints and 8 shorts per vector.  The problem was that we set\nthe VF based only on the ints, then calculated the number of vector\ncopies based on the shorts, giving 4/8.  Previously that led to\nncopies==0, but after r249897 we pick it up as an ICE.\n\nIn this particular case we could vectorise the reduction by setting\nncopies based on the output type rather than the input type, but it\ndoesn't seem worth adding a special \"optimisation\" for such a\npathological case.  I think it's really an instance of the more general\nproblem that we can't vectorise using combinations of (say) 64-bit and\n128-bit vectors on targets that support both.\n\n2018-04-10  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/85286\n\t* tree-vect-data-refs.c (vect_get_smallest_scalar_type):\n\ngcc/testsuite/\n\tPR tree-optimization/85286\n\t* gcc.dg/vect/pr85286.c: New test.\n\nFrom-SVN: r259268", "tree": {"sha": "76f515b13d6c8afd7d42d5ba5d416e64b0cf8cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76f515b13d6c8afd7d42d5ba5d416e64b0cf8cd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb38d071636da1ea2d0f9a068c86c7ceee2634b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb38d071636da1ea2d0f9a068c86c7ceee2634b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb38d071636da1ea2d0f9a068c86c7ceee2634b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb38d071636da1ea2d0f9a068c86c7ceee2634b2/comments", "author": null, "committer": null, "parents": [{"sha": "02149a789076495212f47452550971bc3c5a0b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02149a789076495212f47452550971bc3c5a0b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02149a789076495212f47452550971bc3c5a0b9a"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "495895992699e34abe8f6a94b00caa6397205610", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb38d071636da1ea2d0f9a068c86c7ceee2634b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb38d071636da1ea2d0f9a068c86c7ceee2634b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb38d071636da1ea2d0f9a068c86c7ceee2634b2", "patch": "@@ -1,3 +1,8 @@\n+2018-04-10  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/85286\n+\t* tree-vect-data-refs.c (vect_get_smallest_scalar_type):\n+\n 2018-04-10  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* final.c (final_1): Set insn_last_address as well as"}, {"sha": "3cfc12c3c9176cc51216513834542e3c28a3be9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb38d071636da1ea2d0f9a068c86c7ceee2634b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb38d071636da1ea2d0f9a068c86c7ceee2634b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb38d071636da1ea2d0f9a068c86c7ceee2634b2", "patch": "@@ -1,3 +1,8 @@\n+2018-04-10  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/85286\n+\t* gcc.dg/vect/pr85286.c: New test.\n+\n 2018-04-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/85173"}, {"sha": "320ed6b7e79cb717a13592d90e31e485ef52bd17", "filename": "gcc/testsuite/gcc.dg/vect/pr85286.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb38d071636da1ea2d0f9a068c86c7ceee2634b2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr85286.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb38d071636da1ea2d0f9a068c86c7ceee2634b2/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr85286.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr85286.c?ref=eb38d071636da1ea2d0f9a068c86c7ceee2634b2", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/45241 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"--param scev-max-expr-complexity=0\" } */\n+\n+int\n+foo (short x)\n+{\n+  short i, y;\n+  int sum;\n+\n+  for (i = 0; i < x; i++)\n+    y = x * i;\n+\n+  for (i = x; i > 0; i--)\n+    sum += y;\n+\n+  return sum;\n+}\n+"}, {"sha": "161a886a5cfea41ce5f6a07398df5787be3fd17b", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb38d071636da1ea2d0f9a068c86c7ceee2634b2/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb38d071636da1ea2d0f9a068c86c7ceee2634b2/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=eb38d071636da1ea2d0f9a068c86c7ceee2634b2", "patch": "@@ -132,6 +132,8 @@ vect_get_smallest_scalar_type (gimple *stmt, HOST_WIDE_INT *lhs_size_unit,\n \n   if (is_gimple_assign (stmt)\n       && (gimple_assign_cast_p (stmt)\n+          || gimple_assign_rhs_code (stmt) == DOT_PROD_EXPR\n+          || gimple_assign_rhs_code (stmt) == WIDEN_SUM_EXPR\n           || gimple_assign_rhs_code (stmt) == WIDEN_MULT_EXPR\n           || gimple_assign_rhs_code (stmt) == WIDEN_LSHIFT_EXPR\n           || gimple_assign_rhs_code (stmt) == FLOAT_EXPR))"}]}