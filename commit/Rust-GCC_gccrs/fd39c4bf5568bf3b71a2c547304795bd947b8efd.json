{"sha": "fd39c4bf5568bf3b71a2c547304795bd947b8efd", "node_id": "C_kwDOANBUbNoAKGZkMzljNGJmNTU2OGJmM2I3MWEyYzU0NzMwNDc5NWJkOTQ3YjhlZmQ", "commit": {"author": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2021-10-24T19:04:44Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2021-10-27T19:17:44Z"}, "message": "Fortran: make some trans* functions static\n\nThis makes some trans* functions static and deletes declarations of\nfunctions that either do not exist anymore like gfc_get_function_decl\nor that are unused like gfc_check_any_c_kind.\n\ngcc/fortran/ChangeLog:\n\n\t* expr.c (is_non_empty_structure_constructor): Make static.\n\t* gfortran.h (gfc_check_any_c_kind): Delete.\n\t* match.c (gfc_match_label): Make static.\n\t* match.h (gfc_match_label): Delete declaration.\n\t* scanner.c (file_changes_cur, file_changes_count,\n\tfile_changes_allocated): Make static.\n\t* trans-expr.c (gfc_get_character_len): Make static.\n\t(gfc_class_len_or_zero_get): Make static.\n\t(VTAB_GET_FIELD_GEN): Undefine.\n\t(gfc_get_class_array_ref): Make static.\n\t(gfc_finish_interface_mapping): Make static.\n\t* trans-types.c (gfc_check_any_c_kind): Delete.\n\t(pfunc_type_node, dtype_type_node, gfc_get_ppc_type): Make static.\n\t* trans-types.h (gfc_get_ppc_type): Delete declaration.\n\t* trans.c (gfc_msg_wrong_return): Delete.\n\t* trans.h (gfc_class_len_or_zero_get, gfc_class_vtab_extends_get,\n\tgfc_vptr_extends_get, gfc_get_class_array_ref, gfc_get_character_len,\n\tgfc_finish_interface_mapping, gfc_msg_wrong_return,\n\tgfc_get_function_decl): Delete declaration.", "tree": {"sha": "f6078624b8c5e203bc9499d0f057b8e71f284b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6078624b8c5e203bc9499d0f057b8e71f284b39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd39c4bf5568bf3b71a2c547304795bd947b8efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd39c4bf5568bf3b71a2c547304795bd947b8efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd39c4bf5568bf3b71a2c547304795bd947b8efd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd39c4bf5568bf3b71a2c547304795bd947b8efd/comments", "author": null, "committer": null, "parents": [{"sha": "1f98c4e0c54b29fec4aba0b250ff7b5da57c1096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f98c4e0c54b29fec4aba0b250ff7b5da57c1096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f98c4e0c54b29fec4aba0b250ff7b5da57c1096"}], "stats": {"total": 58, "additions": 12, "deletions": 46}, "files": [{"sha": "4dea840e3486a834d76a65d8c5cd2d41ff710911", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=fd39c4bf5568bf3b71a2c547304795bd947b8efd", "patch": "@@ -4817,7 +4817,7 @@ gfc_apply_init (gfc_typespec *ts, symbol_attribute *attr, gfc_expr *init)\n /* Check whether an expression is a structure constructor and whether it has\n    other values than NULL.  */\n \n-bool\n+static bool\n is_non_empty_structure_constructor (gfc_expr * e)\n {\n   if (e->expr_type != EXPR_STRUCTURE)"}, {"sha": "f7662c59a5df2a85b5cb90d42cab01e8ecb060e8", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=fd39c4bf5568bf3b71a2c547304795bd947b8efd", "patch": "@@ -3284,7 +3284,6 @@ bool gfc_check_character_range (gfc_char_t, int);\n extern bool gfc_seen_div0;\n \n /* trans-types.c */\n-bool gfc_check_any_c_kind (gfc_typespec *);\n int gfc_validate_kind (bt, int, bool);\n int gfc_get_int_kind_from_width_isofortranenv (int size);\n int gfc_get_real_kind_from_width_isofortranenv (int size);"}, {"sha": "91cde55d7a18cfeebb5385866c47d23ce4eaeb12", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=fd39c4bf5568bf3b71a2c547304795bd947b8efd", "patch": "@@ -599,7 +599,7 @@ gfc_match_st_label (gfc_st_label **label)\n    it.  We also make sure the symbol does not refer to another\n    (active) block.  A matched label is pointed to by gfc_new_block.  */\n \n-match\n+static match\n gfc_match_label (void)\n {\n   char name[GFC_MAX_SYMBOL_LEN + 1];"}, {"sha": "eb9459ea99ca74707b4478280313eb23ee297084", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=fd39c4bf5568bf3b71a2c547304795bd947b8efd", "patch": "@@ -47,7 +47,6 @@ match gfc_match_space (void);\n match gfc_match_eos (void);\n match gfc_match_small_literal_int (int *, int *);\n match gfc_match_st_label (gfc_st_label **);\n-match gfc_match_label (void);\n match gfc_match_small_int (int *);\n match gfc_match_small_int_expr (int *, gfc_expr **);\n match gfc_match_name (char *);"}, {"sha": "69b81ab97f8f04f7bec7972e4243d7be08847ba9", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=fd39c4bf5568bf3b71a2c547304795bd947b8efd", "patch": "@@ -78,8 +78,8 @@ static struct gfc_file_change\n   gfc_linebuf *lb;\n   int line;\n } *file_changes;\n-size_t file_changes_cur, file_changes_count;\n-size_t file_changes_allocated;\n+static size_t file_changes_cur, file_changes_count;\n+static size_t file_changes_allocated;\n \n static gfc_char_t *last_error_char;\n "}, {"sha": "e7aec3845d3db3ddaf0eedbeee9a6c3b4ef826be", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=fd39c4bf5568bf3b71a2c547304795bd947b8efd", "patch": "@@ -45,7 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Calculate the number of characters in a string.  */\n \n-tree\n+static tree\n gfc_get_character_len (tree type)\n {\n   tree len;\n@@ -278,7 +278,7 @@ gfc_class_len_get (tree decl)\n /* Try to get the _len component of a class.  When the class is not unlimited\n    poly, i.e. no _len field exists, then return a zero node.  */\n \n-tree\n+static tree\n gfc_class_len_or_zero_get (tree decl)\n {\n   tree len;\n@@ -382,7 +382,7 @@ VTAB_GET_FIELD_GEN (def_init, VTABLE_DEF_INIT_FIELD)\n VTAB_GET_FIELD_GEN (copy, VTABLE_COPY_FIELD)\n VTAB_GET_FIELD_GEN (final, VTABLE_FINAL_FIELD)\n VTAB_GET_FIELD_GEN (deallocate, VTABLE_DEALLOCATE_FIELD)\n-\n+#undef VTAB_GET_FIELD_GEN\n \n /* The size field is returned as an array index type.  Therefore treat\n    it and only it specially.  */\n@@ -1367,7 +1367,7 @@ gfc_conv_class_to_class (gfc_se *parmse, gfc_expr *e, gfc_typespec class_ts,\n /* Given a class array declaration and an index, returns the address\n    of the referenced element.  */\n \n-tree\n+static tree\n gfc_get_class_array_ref (tree index, tree class_decl, tree data_comp,\n \t\t\t bool unlimited)\n {\n@@ -4531,7 +4531,7 @@ gfc_add_interface_mapping (gfc_interface_mapping * mapping,\n    the length of each argument, adding any initialization code to PRE and\n    any finalization code to POST.  */\n \n-void\n+static void\n gfc_finish_interface_mapping (gfc_interface_mapping * mapping,\n \t\t\t      stmtblock_t * pre, stmtblock_t * post)\n {"}, {"sha": "947ab5a099b32207afc24be12b7c87c8c1d3a606", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=fd39c4bf5568bf3b71a2c547304795bd947b8efd", "patch": "@@ -61,7 +61,7 @@ tree pvoid_type_node;\n tree prvoid_type_node;\n tree ppvoid_type_node;\n tree pchar_type_node;\n-tree pfunc_type_node;\n+static tree pfunc_type_node;\n \n tree logical_type_node;\n tree logical_true_node;\n@@ -133,7 +133,7 @@ int gfc_size_kind;\n int gfc_numeric_storage_size;\n int gfc_character_storage_size;\n \n-tree dtype_type_node = NULL_TREE;\n+static tree dtype_type_node = NULL_TREE;\n \n \n /* Build the dtype_type_node if necessary.  */\n@@ -175,25 +175,6 @@ tree get_dtype_type_node (void)\n   return dtype_type_node;\n }\n \n-bool\n-gfc_check_any_c_kind (gfc_typespec *ts)\n-{\n-  int i;\n-\n-  for (i = 0; i < ISOCBINDING_NUMBER; i++)\n-    {\n-      /* Check for any C interoperable kind for the given type/kind in ts.\n-         This can be used after verify_c_interop to make sure that the\n-         Fortran kind being used exists in at least some form for C.  */\n-      if (c_interop_kinds_table[i].f90_type == ts->type &&\n-          c_interop_kinds_table[i].value == ts->kind)\n-        return true;\n-    }\n-\n-  return false;\n-}\n-\n-\n static int\n get_real_kind_from_node (tree type)\n {\n@@ -2470,7 +2451,7 @@ gfc_copy_dt_decls_ifequal (gfc_symbol *from, gfc_symbol *to,\n \n /* Build a tree node for a procedure pointer component.  */\n \n-tree\n+static tree\n gfc_get_ppc_type (gfc_component* c)\n {\n   tree t;"}, {"sha": "1b43503092bb3d6313a9b22935c98660b0c48456", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=fd39c4bf5568bf3b71a2c547304795bd947b8efd", "patch": "@@ -117,7 +117,6 @@ int gfc_is_nodesc_array (gfc_symbol *);\n tree gfc_get_dtype_rank_type (int, tree);\n tree gfc_get_dtype (tree, int *rank = NULL);\n \n-tree gfc_get_ppc_type (gfc_component *);\n tree gfc_get_caf_vector_type (int dim);\n tree gfc_get_caf_reference_type ();\n "}, {"sha": "a377d0eeb24472694d6fb5505419d64ff4859815", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=fd39c4bf5568bf3b71a2c547304795bd947b8efd", "patch": "@@ -45,7 +45,6 @@ along with GCC; see the file COPYING3.  If not see\n static gfc_file *gfc_current_backend_file;\n \n const char gfc_msg_fault[] = N_(\"Array reference out of bounds\");\n-const char gfc_msg_wrong_return[] = N_(\"Incorrect function return value\");\n \n \n /* Return a location_t suitable for 'tree' for a gfortran locus.  The way the"}, {"sha": "0d4eed20d20a111225dcc202dcc7a21d4e9bb152", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd39c4bf5568bf3b71a2c547304795bd947b8efd/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=fd39c4bf5568bf3b71a2c547304795bd947b8efd", "patch": "@@ -425,22 +425,19 @@ tree gfc_class_set_static_fields (tree, tree, tree);\n tree gfc_class_data_get (tree);\n tree gfc_class_vptr_get (tree);\n tree gfc_class_len_get (tree);\n-tree gfc_class_len_or_zero_get (tree);\n tree gfc_resize_class_size_with_len (stmtblock_t *, tree, tree);\n gfc_expr * gfc_find_and_cut_at_last_class_ref (gfc_expr *, bool is_mold = false,\n \t\t\t\t\t       gfc_typespec **ts = NULL);\n /* Get an accessor to the class' vtab's * field, when a class handle is\n    available.  */\n tree gfc_class_vtab_hash_get (tree);\n tree gfc_class_vtab_size_get (tree);\n-tree gfc_class_vtab_extends_get (tree);\n tree gfc_class_vtab_def_init_get (tree);\n tree gfc_class_vtab_copy_get (tree);\n tree gfc_class_vtab_final_get (tree);\n /* Get an accessor to the vtab's * field, when a vptr handle is present.  */\n tree gfc_vptr_hash_get (tree);\n tree gfc_vptr_size_get (tree);\n-tree gfc_vptr_extends_get (tree);\n tree gfc_vptr_def_init_get (tree);\n tree gfc_vptr_copy_get (tree);\n tree gfc_vptr_final_get (tree);\n@@ -450,7 +447,6 @@ void gfc_reset_len (stmtblock_t *, gfc_expr *);\n tree gfc_get_class_from_gfc_expr (gfc_expr *);\n tree gfc_get_class_from_expr (tree);\n tree gfc_get_vptr_from_expr (tree);\n-tree gfc_get_class_array_ref (tree, tree, tree, bool);\n tree gfc_copy_class_to_class (tree, tree, tree, bool);\n bool gfc_add_finalizer_call (stmtblock_t *, gfc_expr *);\n bool gfc_add_comp_finalizer_call (stmtblock_t *, tree, gfc_component *, bool);\n@@ -509,7 +505,6 @@ void gfc_conv_expr_type (gfc_se * se, gfc_expr *, tree);\n \n \n /* trans-expr.c */\n-tree gfc_get_character_len (tree);\n tree gfc_get_character_len_in_bytes (tree);\n tree gfc_conv_scalar_to_descriptor (gfc_se *, tree, symbol_attribute);\n tree gfc_get_ultimate_alloc_ptr_comps_caf_token (gfc_se *, gfc_expr *);\n@@ -621,9 +616,6 @@ tree gfc_get_extern_function_decl (gfc_symbol *,\n \t\t\t\t   gfc_actual_arglist *args = NULL,\n \t\t\t\t   const char *fnspec = NULL);\n \n-/* Return the decl for a function.  */\n-tree gfc_get_function_decl (gfc_symbol *);\n-\n /* Build an ADDR_EXPR.  */\n tree gfc_build_addr_expr (tree, tree);\n \n@@ -1171,15 +1163,12 @@ void gfc_init_interface_mapping (gfc_interface_mapping *);\n void gfc_free_interface_mapping (gfc_interface_mapping *);\n void gfc_add_interface_mapping (gfc_interface_mapping *,\n \t\t\t\tgfc_symbol *, gfc_se *, gfc_expr *);\n-void gfc_finish_interface_mapping (gfc_interface_mapping *,\n-\t\t\t\t   stmtblock_t *, stmtblock_t *);\n void gfc_apply_interface_mapping (gfc_interface_mapping *,\n \t\t\t\t  gfc_se *, gfc_expr *);\n \n \n /* Standard error messages used in all the trans-*.c files.  */\n extern const char gfc_msg_fault[];\n-extern const char gfc_msg_wrong_return[];\n \n #define OMPWS_WORKSHARE_FLAG\t1\t/* Set if in a workshare construct.  */\n #define OMPWS_CURR_SINGLEUNIT\t2\t/* Set if current gfc_code in workshare"}]}