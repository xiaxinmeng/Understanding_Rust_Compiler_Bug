{"sha": "37462a131c528d0980915d98567361aa9396b030", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc0NjJhMTMxYzUyOGQwOTgwOTE1ZDk4NTY3MzYxYWE5Mzk2YjAzMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-02-12T19:12:22Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-02-12T19:12:22Z"}, "message": "Drop unused comparison shortening pattern and consolidate remaining comparison shortening patterns.\n\n\t* config/h8300/h8300.md (comparison shortening peepholes): Drop\n\t(and (xor)) variant.  Combine other two into single peephole.", "tree": {"sha": "ceffec490d9d54a933446615ce6208e2b1030ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceffec490d9d54a933446615ce6208e2b1030ce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37462a131c528d0980915d98567361aa9396b030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37462a131c528d0980915d98567361aa9396b030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37462a131c528d0980915d98567361aa9396b030", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37462a131c528d0980915d98567361aa9396b030/comments", "author": null, "committer": null, "parents": [{"sha": "5bfc8303ffe2d86e938d45f13cd99a39469dac4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bfc8303ffe2d86e938d45f13cd99a39469dac4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bfc8303ffe2d86e938d45f13cd99a39469dac4f"}], "stats": {"total": 74, "additions": 12, "deletions": 62}, "files": [{"sha": "1927290f568a031e76860653f7926095b5cd9fcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37462a131c528d0980915d98567361aa9396b030/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37462a131c528d0980915d98567361aa9396b030/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37462a131c528d0980915d98567361aa9396b030", "patch": "@@ -1,3 +1,8 @@\n+2020-02-12  Jeff Law  <law@redhat.com>\n+\n+\t* config/h8300/h8300.md (comparison shortening peepholes): Drop\n+\t(and (xor)) variant.  Combine other two into single peephole.\n+\n 2020-02-12  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR rtl-optimization/93565"}, {"sha": "dcc9c3682d62c5009499536431503c0bab8c802f", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 7, "deletions": 62, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37462a131c528d0980915d98567361aa9396b030/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37462a131c528d0980915d98567361aa9396b030/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=37462a131c528d0980915d98567361aa9396b030", "patch": "@@ -5405,7 +5405,9 @@\n \t\t       [(cc0) (const_int 0)])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n-  \"peep2_reg_dead_p (2, operands[0])\"\n+  \"((const_int_qi_operand (operands[1], QImode)\n+     || const_int_hi_operand (operands[1], HImode))\n+    && peep2_reg_dead_p (2, operands[0]))\"\n   [(set (match_dup 4)\n \t(and:QI (match_dup 4)\n \t\t(match_dup 5)))\n@@ -5416,68 +5418,11 @@\n \t\t      (label_ref (match_dup 2))\n \t\t      (pc)))]\n   {\n-    operands[4] = gen_rtx_REG (QImode, REGNO (operands[0]));\n-    operands[5] = gen_int_mode (INTVAL (operands[1]), QImode);\n-  })\n+    enum machine_mode mode;\n \n-(define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(and:SI (match_dup 0)\n-\t\t(match_operand:SI 1 \"const_int_hi_operand\" \"\")))\n-   (set (cc0) (compare (match_dup 0)\n-\t\t       (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_operator 3 \"eqne_operator\"\n-\t\t       [(cc0) (const_int 0)])\n-\t\t      (label_ref (match_operand 2 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"peep2_reg_dead_p (2, operands[0])\"\n-  [(set (match_dup 4)\n-\t(and:HI (match_dup 4)\n-\t\t(match_dup 5)))\n-   (set (cc0) (compare (match_dup 4)\n-\t\t       (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n-\t\t      (label_ref (match_dup 2))\n-\t\t      (pc)))]\n-  {\n-    operands[4] = gen_rtx_REG (HImode, REGNO (operands[0]));\n-    operands[5] = gen_int_mode (INTVAL (operands[1]), HImode);\n-  })\n-\n-(define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(and:SI (match_dup 0)\n-\t\t(match_operand:SI 1 \"const_int_qi_operand\" \"\")))\n-   (set (match_dup 0)\n-\t(xor:SI (match_dup 0)\n-\t\t(match_operand:SI 2 \"const_int_qi_operand\" \"\")))\n-   (set (cc0) (compare (match_dup 0)\n-\t\t       (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_operator 4 \"eqne_operator\"\n-\t\t       [(cc0) (const_int 0)])\n-\t\t      (label_ref (match_operand 3 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"peep2_reg_dead_p (3, operands[0])\n-   && (~INTVAL (operands[1]) & INTVAL (operands[2])) == 0\"\n-  [(set (match_dup 5)\n-\t(and:QI (match_dup 5)\n-\t\t(match_dup 6)))\n-   (set (match_dup 5)\n-\t(xor:QI (match_dup 5)\n-\t\t(match_dup 7)))\n-   (set (cc0) (compare (match_dup 5)\n-\t\t       (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 4 [(cc0) (const_int 0)])\n-\t\t      (label_ref (match_dup 3))\n-\t\t      (pc)))]\n-  {\n-    operands[5] = gen_rtx_REG (QImode, REGNO (operands[0]));\n-    operands[6] = gen_int_mode (INTVAL (operands[1]), QImode);\n-    operands[7] = gen_int_mode (INTVAL (operands[2]), QImode);\n+    mode = const_int_qi_operand (operands[1], QImode) ? QImode : HImode;\n+    operands[4] = gen_rtx_REG (mode, REGNO (operands[0]));\n+    operands[5] = gen_int_mode (INTVAL (operands[1]), mode);\n   })\n \n ;; These triggers right at the end of allocation of locals in the"}]}