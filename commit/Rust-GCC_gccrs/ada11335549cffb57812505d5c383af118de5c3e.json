{"sha": "ada11335549cffb57812505d5c383af118de5c3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRhMTEzMzU1NDljZmZiNTc4MTI1MDVkNWMzODNhZjExOGRlNWMzZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-08-24T12:18:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-08-24T12:18:45Z"}, "message": "fold-const.c (tree_expr_nonnegative_p): Handle *_DIV_EXPR, *_MOD_EXPR, SAVE_EXPR and NON_LVALUE_EXPR.\n\n\t* fold-const.c (tree_expr_nonnegative_p): Handle *_DIV_EXPR,\n\t*_MOD_EXPR, SAVE_EXPR and NON_LVALUE_EXPR.\n\ntestsuite:\n\t* gcc.dg/compare5.c: New testcase.\n\nFrom-SVN: r45148", "tree": {"sha": "0c0417b0a64813e2114d18342eda55f1a06cf473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c0417b0a64813e2114d18342eda55f1a06cf473"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ada11335549cffb57812505d5c383af118de5c3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada11335549cffb57812505d5c383af118de5c3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ada11335549cffb57812505d5c383af118de5c3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada11335549cffb57812505d5c383af118de5c3e/comments", "author": null, "committer": null, "parents": [{"sha": "271e349bc386151b9b6410fa85d8f33a5857e02b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271e349bc386151b9b6410fa85d8f33a5857e02b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/271e349bc386151b9b6410fa85d8f33a5857e02b"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "9d4ebaa79077621022dfa17a8f2c350cf4025e3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada11335549cffb57812505d5c383af118de5c3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada11335549cffb57812505d5c383af118de5c3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ada11335549cffb57812505d5c383af118de5c3e", "patch": "@@ -1,3 +1,8 @@\n+2001-08-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fold-const.c (tree_expr_nonnegative_p): Handle *_DIV_EXPR,\n+\t*_MOD_EXPR, SAVE_EXPR and NON_LVALUE_EXPR.\n+\n 2001-08-23  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* c-pragma.h: Move weak_syms and weak_decls..."}, {"sha": "90d9f16b69e31a3146d3de9d2d6d7e4c283b9697", "filename": "gcc/fold-const.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada11335549cffb57812505d5c383af118de5c3e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada11335549cffb57812505d5c383af118de5c3e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ada11335549cffb57812505d5c383af118de5c3e", "patch": "@@ -7397,6 +7397,17 @@ tree_expr_nonnegative_p (t)\n       return 1;\n     case INTEGER_CST:\n       return tree_int_cst_sgn (t) >= 0;\n+    case TRUNC_DIV_EXPR:\n+    case CEIL_DIV_EXPR:\n+    case FLOOR_DIV_EXPR:\n+    case ROUND_DIV_EXPR:\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 0))\n+        && tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n+    case TRUNC_MOD_EXPR:\n+    case CEIL_MOD_EXPR:\n+    case FLOOR_MOD_EXPR:\n+    case ROUND_MOD_EXPR:\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 0));\n     case COND_EXPR:\n       return tree_expr_nonnegative_p (TREE_OPERAND (t, 1))\n \t&& tree_expr_nonnegative_p (TREE_OPERAND (t, 2));\n@@ -7412,6 +7423,10 @@ tree_expr_nonnegative_p (t)\n       return tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n     case BIND_EXPR:\n       return tree_expr_nonnegative_p (TREE_OPERAND (t, 1));\n+    case SAVE_EXPR:\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 0));\n+    case NON_LVALUE_EXPR:\n+      return tree_expr_nonnegative_p (TREE_OPERAND (t, 0));\n     case RTL_EXPR:\n       return rtl_expr_nonnegative_p (RTL_EXPR_RTL (t));\n       "}, {"sha": "d79044b9aaf2f9add50921323d9f670088ad4fd0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada11335549cffb57812505d5c383af118de5c3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada11335549cffb57812505d5c383af118de5c3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ada11335549cffb57812505d5c383af118de5c3e", "patch": "@@ -1,3 +1,7 @@\n+2001-08-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/compare5.c: New testcase.\n+\n 2001-08-23  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* lib/prune.exp (prune_gcc_output): Also ignore \"In constructor\""}, {"sha": "f19c575efb7927e20fa03a6010dfb4960e5cf70d", "filename": "gcc/testsuite/gcc.dg/compare5.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ada11335549cffb57812505d5c383af118de5c3e/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ada11335549cffb57812505d5c383af118de5c3e/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare5.c?ref=ada11335549cffb57812505d5c383af118de5c3e", "patch": "@@ -0,0 +1,41 @@\n+/* Test for a bogus warning on comparison between signed and unsigned.\n+   Origin: Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 8/21/2001.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsign-compare\" } */\n+\n+extern void bar(void);\n+\n+int foo(int x, int y, unsigned u)\n+{\n+  /* A *_DIV_EXPR is non-negative if both operands are.  */\n+\n+  if (u < ((x=-22)/33)) /* { dg-warning \"signed and unsigned\" \"DIV_EXPR\" } */\n+    return x;\n+\n+  if (u < ((x=22)/33))\n+    return x;\n+\n+  if (u < ((x=22)/(y=33)))\n+    return x;\n+\n+  if (u < (((x&0x10000)?128:64) / ((y&0x10000)?8:4)))\n+    return x;\n+\n+\n+  /* A *_MOD_EXPR is non-negative if the first operand is.  */\n+\n+  if (u < ((x=-22)%33)) /* { dg-warning \"signed and unsigned\" \"MOD_EXPR\" } */\n+    return x;\n+\n+  if (u < ((x=22)%-33))\n+    return x;\n+\n+  if (u < ((x==y)%-33))\n+    return x;\n+\n+  if (u < (((x=22)/33)%-33))\n+    return x;\n+\n+  return 0;\n+}"}]}