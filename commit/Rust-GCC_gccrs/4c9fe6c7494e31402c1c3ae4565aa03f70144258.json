{"sha": "4c9fe6c7494e31402c1c3ae4565aa03f70144258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM5ZmU2Yzc0OTRlMzE0MDJjMWMzYWU0NTY1YWEwM2Y3MDE0NDI1OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T14:00:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T14:00:29Z"}, "message": "[multiple changes]\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Minor reformatting.\n\n2011-11-04  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-convec.adb, a-coinve.adb, a-cobove.adb (Merge): Raise PE\n\twhen Target and Source denote same non-empty object\n\t* a-cdlili.adb, a-cidlli.adb, a-cbdlli.adb (Merge): Ditto\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb: Minor reformatting.\n\n2011-11-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Assign_Record): Do not generate a\n\tdiscriminant assignment within an initialization proc if the\n\trecord is an unchecked union, as it can only come from the\n\tinitialization of an unchecked union component.\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Minor reformatting.\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* par-labl.adb (Rewrite_As_Loop): Generate info msg rather than\n\twarning message.\n\n2011-11-04  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb: Minor code reorganization (remove junk obsolete\n\tvar Save_Space).\n\nFrom-SVN: r180954", "tree": {"sha": "6faef4762f1e148699e2e63fb88c2fc56f034a7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6faef4762f1e148699e2e63fb88c2fc56f034a7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c9fe6c7494e31402c1c3ae4565aa03f70144258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c9fe6c7494e31402c1c3ae4565aa03f70144258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c9fe6c7494e31402c1c3ae4565aa03f70144258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c9fe6c7494e31402c1c3ae4565aa03f70144258/comments", "author": null, "committer": null, "parents": [{"sha": "6ec084f3873a3216c212713722d75084ca146eff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec084f3873a3216c212713722d75084ca146eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ec084f3873a3216c212713722d75084ca146eff"}], "stats": {"total": 180, "additions": 149, "deletions": 31}, "files": [{"sha": "7924c40afed65b4c8e4781c0c24872a4e3ae11b3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -1,3 +1,38 @@\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Minor reformatting.\n+\n+2011-11-04  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-convec.adb, a-coinve.adb, a-cobove.adb (Merge): Raise PE\n+\twhen Target and Source denote same non-empty object\n+\t* a-cdlili.adb, a-cidlli.adb, a-cbdlli.adb (Merge): Ditto\n+\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb: Minor reformatting.\n+\n+2011-11-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Assign_Record): Do not generate a\n+\tdiscriminant assignment within an initialization proc if the\n+\trecord is an unchecked union, as it can only come from the\n+\tinitialization of an unchecked union component.\n+\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor reformatting.\n+\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-labl.adb (Rewrite_As_Loop): Generate info msg rather than\n+\twarning message.\n+\n+2011-11-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb: Minor code reorganization (remove junk obsolete\n+\tvar Save_Space).\n+\n 2011-11-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_alfa.adb: Add local constant"}, {"sha": "e1f7725d5cdf2dcf74ddd3bbddcfd4ab0b5f3dc1", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -713,10 +713,24 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n          LI, RI : Cursor;\n \n       begin\n-         if Target'Address = Source'Address then\n+\n+         --  The semantics of Merge changed slightly per AI05-0021. It was\n+         --  originally the case that if Target and Source denoted the same\n+         --  container object, then the GNAT implementation of Merge did\n+         --  nothing. However, it was argued that RM05 did not precisely\n+         --  specify the semantics for this corner case. The decision of the\n+         --  ARG was that if Target and Source denote the same non-empty\n+         --  container object, then Program_Error is raised.\n+\n+         if Source.Is_Empty then\n             return;\n          end if;\n \n+         if Target'Address = Source'Address then\n+            raise Program_Error with\n+              \"Target and Source denote same non-empty container\";\n+         end if;\n+\n          if Target.Busy > 0 then\n             raise Program_Error with\n               \"attempt to tamper with cursors of Target (list is busy)\";"}, {"sha": "8b513222ef81c7ed62a0bd7b8f01323072507e4d", "filename": "gcc/ada/a-cdlili.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.adb?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -515,10 +515,24 @@ package body Ada.Containers.Doubly_Linked_Lists is\n          LI, RI : Cursor;\n \n       begin\n-         if Target'Address = Source'Address then\n+\n+         --  The semantics of Merge changed slightly per AI05-0021. It was\n+         --  originally the case that if Target and Source denoted the same\n+         --  container object, then the GNAT implementation of Merge did\n+         --  nothing. However, it was argued that RM05 did not precisely\n+         --  specify the semantics for this corner case. The decision of the\n+         --  ARG was that if Target and Source denote the same non-empty\n+         --  container object, then Program_Error is raised.\n+\n+         if Source.Is_Empty then\n             return;\n          end if;\n \n+         if Target'Address = Source'Address then\n+            raise Program_Error with\n+              \"Target and Source denote same non-empty container\";\n+         end if;\n+\n          if Target.Busy > 0 then\n             raise Program_Error with\n               \"attempt to tamper with cursors of Target (list is busy)\";"}, {"sha": "dbdc6de47d473457456504e54c7c6f72c07a0d7e", "filename": "gcc/ada/a-cidlli.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-cidlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-cidlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.adb?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -563,10 +563,24 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n          LI, RI : Cursor;\n \n       begin\n-         if Target'Address = Source'Address then\n+\n+         --  The semantics of Merge changed slightly per AI05-0021. It was\n+         --  originally the case that if Target and Source denoted the same\n+         --  container object, then the GNAT implementation of Merge did\n+         --  nothing. However, it was argued that RM05 did not precisely\n+         --  specify the semantics for this corner case. The decision of the\n+         --  ARG was that if Target and Source denote the same non-empty\n+         --  container object, then Program_Error is raised.\n+\n+         if Source.Is_Empty then\n             return;\n          end if;\n \n+         if Target'Address = Source'Address then\n+            raise Program_Error with\n+              \"Target and Source denote same non-empty container\";\n+         end if;\n+\n          if Target.Busy > 0 then\n             raise Program_Error with\n               \"attempt to tamper with cursors of Target (list is busy)\";"}, {"sha": "e78e3ce12d37d5333e38cbb390b2a210312ff172", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -788,16 +788,26 @@ package body Ada.Containers.Bounded_Vectors is\n          I, J : Count_Type;\n \n       begin\n-         if Target.Is_Empty then\n-            Move (Target => Target, Source => Source);\n+\n+         --  The semantics of Merge changed slightly per AI05-0021. It was\n+         --  originally the case that if Target and Source denoted the same\n+         --  container object, then the GNAT implementation of Merge did\n+         --  nothing. However, it was argued that RM05 did not precisely\n+         --  specify the semantics for this corner case. The decision of the\n+         --  ARG was that if Target and Source denote the same non-empty\n+         --  container object, then Program_Error is raised.\n+\n+         if Source.Is_Empty then\n             return;\n          end if;\n \n          if Target'Address = Source'Address then\n-            return;\n+            raise Program_Error with\n+              \"Target and Source denote same non-empty container\";\n          end if;\n \n-         if Source.Is_Empty then\n+         if Target.Is_Empty then\n+            Move (Target => Target, Source => Source);\n             return;\n          end if;\n "}, {"sha": "e35f2f781de99e6b152bfe1d37a14c7842f6cfef", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -1268,16 +1268,26 @@ package body Ada.Containers.Indefinite_Vectors is\n          I, J : Index_Type'Base;\n \n       begin\n-         if Target.Last < Index_Type'First then\n-            Move (Target => Target, Source => Source);\n+\n+         --  The semantics of Merge changed slightly per AI05-0021. It was\n+         --  originally the case that if Target and Source denoted the same\n+         --  container object, then the GNAT implementation of Merge did\n+         --  nothing. However, it was argued that RM05 did not precisely\n+         --  specify the semantics for this corner case. The decision of the\n+         --  ARG was that if Target and Source denote the same non-empty\n+         --  container object, then Program_Error is raised.\n+\n+         if Source.Last < Index_Type'First then  -- Source is empty\n             return;\n          end if;\n \n          if Target'Address = Source'Address then\n-            return;\n+            raise Program_Error with\n+              \"Target and Source denote same non-empty container\";\n          end if;\n \n-         if Source.Last < Index_Type'First then\n+         if Target.Last < Index_Type'First then  -- Target is empty\n+            Move (Target => Target, Source => Source);\n             return;\n          end if;\n "}, {"sha": "79071810182a6e0d3ae71cf2e499a1546d3e880b", "filename": "gcc/ada/a-convec.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.adb?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -909,16 +909,26 @@ package body Ada.Containers.Vectors is\n          J : Index_Type'Base;\n \n       begin\n-         if Target.Last < Index_Type'First then\n-            Move (Target => Target, Source => Source);\n+\n+         --  The semantics of Merge changed slightly per AI05-0021. It was\n+         --  originally the case that if Target and Source denoted the same\n+         --  container object, then the GNAT implementation of Merge did\n+         --  nothing. However, it was argued that RM05 did not precisely\n+         --  specify the semantics for this corner case. The decision of the\n+         --  ARG was that if Target and Source denote the same non-empty\n+         --  container object, then Program_Error is raised.\n+\n+         if Source.Last < Index_Type'First then  -- Source is empty\n             return;\n          end if;\n \n          if Target'Address = Source'Address then\n-            return;\n+            raise Program_Error with\n+              \"Target and Source denote same non-empty container\";\n          end if;\n \n-         if Source.Last < Index_Type'First then\n+         if Target.Last < Index_Type'First then  -- Target is empty\n+            Move (Target => Target, Source => Source);\n             return;\n          end if;\n "}, {"sha": "57e94d29840010e2471960e113e877897008b274", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -4046,13 +4046,13 @@ package body Exp_Attr is\n \n          X   : constant Node_Id := Prefix (N);\n          Y   : constant Node_Id := First (Expressions (N));\n-         --  The argumens\n+         --  The arguments\n \n          X_Addr, Y_Addr : Node_Id;\n-         --  the expressions for their addresses\n+         --  Rhe expressions for their addresses\n \n          X_Size, Y_Size : Node_Id;\n-         --  the expressions for their sizes\n+         --  Rhe expressions for their sizes\n \n       begin\n          --  The attribute is expanded as:"}, {"sha": "d2f0668873e48ee4fe9975c621ee8a60c70b619b", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -2614,12 +2614,7 @@ package body Exp_Ch4 is\n       --  Result of the concatenation (of type Ityp)\n \n       Actions : constant List_Id := New_List;\n-      --  Collect actions to be inserted if Save_Space is False\n-\n-      Save_Space : Boolean;\n-      pragma Warnings (Off, Save_Space);\n-      --  Set to True if we are saving generated code space by calling routines\n-      --  in packages System.Concat_n.\n+      --  Collect actions to be inserted\n \n       Known_Non_Null_Operand_Seen : Boolean;\n       --  Set True during generation of the assignments of operands into"}, {"sha": "eb23bfd641cc3bc2454cb2f56edd77b2e5392f13", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -1461,7 +1461,22 @@ package body Exp_Ch5 is\n                   end if;\n \n                   if Is_Unchecked_Union (Base_Type (R_Typ)) then\n-                     Insert_Action (N, Make_Field_Assign (CF, True));\n+\n+                     --  Within an initialization procedure this is the\n+                     --  assignment to an unchecked union component, in which\n+                     --  case there is no discriminant to initialize.\n+\n+                     if Inside_Init_Proc then\n+                        null;\n+\n+                     else\n+                        --  The assignment is part of a conversion from a\n+                        --  derived unchecked union type with an inferable\n+                        --  discriminant, to a parent type.\n+\n+                        Insert_Action (N, Make_Field_Assign (CF, True));\n+                     end if;\n+\n                   else\n                      Insert_Action (N, Make_Field_Assign (CF));\n                   end if;"}, {"sha": "2d342c347bc775273a58f39270229fb95d39727c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -5318,7 +5318,7 @@ This pragma signals that the entities whose names are listed are\n deliberately not referenced in the current source unit. This\n suppresses warnings about the\n entities being unreferenced, and in addition a warning will be\n-generated if one of these entities is in fact referenced in the\n+generated if one of these entities is in fact subsequently referenced in the\n same unit as the pragma (or in the corresponding body, or one\n of its subunits).\n \n@@ -10222,7 +10222,7 @@ floating-point standard.\n \n Note that on machines that are not fully compliant with the IEEE\n floating-point standard, such as Alpha, the @option{-mieee} compiler flag\n-must be used for achieving IEEE confirming behavior (although at the cost\n+must be used for achieving IEEE conforming behavior (although at the cost\n of a significant performance penalty), so infinite and NaN values are\n properly generated.\n "}, {"sha": "748a1d247bde89e63af753bd95225b7f8ad0fddc", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -5658,8 +5658,8 @@ This switch activates warnings to be generated for entities that\n are declared but not referenced, and for units that are @code{with}'ed\n and not\n referenced. In the case of packages, a warning is also generated if\n-no entities in the package are referenced. This means that if the package\n-is referenced but the only references are in @code{use}\n+no entities in the package are referenced. This means that if a with'ed\n+package is referenced but the only references are in @code{use}\n clauses or @code{renames}\n declarations, a warning is still generated. A warning is also generated\n for a generic package that is @code{with}'ed but never instantiated."}, {"sha": "9bafb07b7d190777e18d9d06e149d5cf97c90bc2", "filename": "gcc/ada/par-labl.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fpar-labl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c9fe6c7494e31402c1c3ae4565aa03f70144258/gcc%2Fada%2Fpar-labl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-labl.adb?ref=4c9fe6c7494e31402c1c3ae4565aa03f70144258", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -340,6 +340,7 @@ procedure Labl is\n                        New_Node (N_Loop_Statement, Sloc (Loop_Header));\n          Stat      : Node_Id;\n          Next_Stat : Node_Id;\n+\n       begin\n          Stat := Next (Loop_Header);\n          while Stat /= Loop_End loop\n@@ -355,7 +356,7 @@ procedure Labl is\n          Remove (Loop_Header);\n          Rewrite (Loop_End, Loop_Stmt);\n          Error_Msg_N\n-           (\"code between label and backwards goto rewritten as loop?\",\n+           (\"info: code between label and backwards goto rewritten as loop?\",\n              Loop_End);\n       end Rewrite_As_Loop;\n "}]}