{"sha": "1e2f030b80cb650708b02086dbd5431cd231495f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyZjAzMGI4MGNiNjUwNzA4YjAyMDg2ZGJkNTQzMWNkMjMxNDk1Zg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-31T00:16:50Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-31T00:16:50Z"}, "message": "Daily bump.", "tree": {"sha": "eaa330b0f099f7df2474d8a5b4af9cb6656f5ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaa330b0f099f7df2474d8a5b4af9cb6656f5ce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e2f030b80cb650708b02086dbd5431cd231495f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2f030b80cb650708b02086dbd5431cd231495f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2f030b80cb650708b02086dbd5431cd231495f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2f030b80cb650708b02086dbd5431cd231495f/comments", "author": null, "committer": null, "parents": [{"sha": "eafa9d969237fd8f712c4b25a8c58932c01f44b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eafa9d969237fd8f712c4b25a8c58932c01f44b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eafa9d969237fd8f712c4b25a8c58932c01f44b4"}], "stats": {"total": 299, "additions": 298, "deletions": 1}, "files": [{"sha": "0b8c5e833f684713e1ae6cc847d768c04cf181b8", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,8 @@\n+2021-08-30  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* download_prerequisites (md5_check): Replace == inside\n+\ttest with = to be more portable.\n+\n 2021-08-26  Martin Liska  <mliska@suse.cz>\n \n \t* mklog.py: Use file.{source,target}_file for proper rename"}, {"sha": "b57d9f1ed3a39814eb2d77670ee83d7431b5922a", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,9 @@\n+2021-08-30  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* inclhack.def (hpux_c99_inttypes5): New hack to define PRIdPTR, etc.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/inttypes.h: Update.\n+\n 2021-07-06  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n \n \t* inclhack.def (aix_externcpp1): Improve select regexp."}, {"sha": "cef5b6d51fddfbdb5c07694bc739c9640366d3ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,78 @@\n+2021-08-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/99260\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/call-info.o.\n+\n+2021-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* doc/invoke.texi: Document -Wmissing-requires.\n+\n+2021-08-30  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Remove\n+\tTARGET_EXTRA_BUILTINS guard.\n+\n+2021-08-30  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Change\n+\tinitialization of V2DI_type_node and unsigned_V2DI_type_node.\n+\n+2021-08-30  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/darwin.h (SUBTARGET_INIT_BUILTINS): Use the new\n+\tdecl when new_builtins_are_live.\n+\t* config/rs6000/rs6000-builtin-new.def (__builtin_cfstring): New\n+\tbuilt-in.\n+\n+2021-08-30  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-cpus.def (ISA_3_1_MASKS_SERVER): Add\n+\tOPTION_MASK_P10_FUSION_2STORE.\n+\t(POWERPC_MASKS): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Enable\n+\tstore fusion for Power10.\n+\t(is_fusable_store): New.\n+\t(power10_sched_reorder): Likewise.\n+\t(rs6000_sched_reorder): Do Power10 specific reordering.\n+\t(rs6000_sched_reorder2): Likewise.\n+\t* config/rs6000/rs6000.opt: Add new option.\n+\n+2021-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/102128\n+\t* tree-vect-slp.c (vect_bb_vectorization_profitable_p):\n+\tMove scanning for if-converted scalar code to the caller\n+\tand instead delay clearing the visited flag for profitable\n+\tsubgraphs.\n+\t(vect_slp_region): Cost all subgraphs before scheduling.\n+\tFor if-converted BB vectorization scan for scalar COND_EXPRs\n+\tand do not vectorize if any found and the cost model is\n+\tvery-cheap.\n+\n+2021-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* common.opt (fexceptions): Mark\n+\tEnabledBy(fnon-call-exceptions).\n+\t* doc/invoke.texi (fnon-call-exceptions): Document this\n+\tenables -fexceptions.\n+\n+2021-08-30  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* tsystem.h (abort): Define abort() if inhibit_libc is defined and it\n+\tis not already defined.\n+\n+2021-08-30  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* expmed.c (extract_bit_field_1): Make sure we're playing with\n+\tintegral modes before call extract_integral_bit_field.\n+\t(extract_integral_bit_field): Add a parameter of type\n+\tscalar_int_mode which corresponds to of tmode.\n+\tAnd call extract_and_convert_fixed_bit_field instead of\n+\textract_fixed_bit_field and convert_extracted_bit_field.\n+\t(extract_and_convert_fixed_bit_field): New function, it's a\n+\tcombination of extract_fixed_bit_field and\n+\tconvert_extracted_bit_field.\n+\n 2021-08-29  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin.c (darwin_libc_has_function): Do not run"}, {"sha": "f870d4165fb8bfae7be615a101130ed07eda7335", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1 +1 @@\n-20210830\n+20210831"}, {"sha": "3f0c046eb3fce7f85257d54f32b13bf4c6ac8d2b", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,106 @@\n+2021-08-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/99260\n+\t* analyzer.h (class custom_edge_info): New class, adapted from\n+\texploded_edge::custom_info_t.  Make member functions const.\n+\tMake update_model return bool, converting edge param from\n+\treference to a pointer, and adding a ctxt param.\n+\t(class path_context): New class.\n+\t* call-info.cc: New file.\n+\t* call-info.h: New file.\n+\t* engine.cc: Include \"analyzer/call-info.h\" and <memory>.\n+\t(impl_region_model_context::impl_region_model_context): Update for\n+\tnew m_path_ctxt field.\n+\t(impl_region_model_context::bifurcate): New.\n+\t(impl_region_model_context::terminate_path): New.\n+\t(impl_region_model_context::get_malloc_map): New.\n+\t(impl_sm_context::impl_sm_context): Update for new m_path_ctxt\n+\tfield.\n+\t(impl_sm_context::get_fndecl_for_call): Likewise.\n+\t(impl_sm_context::set_next_state): Likewise.\n+\t(impl_sm_context::warn): Likewise.\n+\t(impl_sm_context::is_zero_assignment): Likewise.\n+\t(impl_sm_context::get_path_context): New.\n+\t(impl_sm_context::m_path_ctxt): New.\n+\t(impl_region_model_context::on_condition): Update for new\n+\tpath_ctxt param.  Handle m_enode_for_diag being NULL.\n+\t(impl_region_model_context::on_phi): Update for new path_ctxt\n+\tparam.\n+\t(exploded_node::on_stmt): Add path_ctxt param, updating ctor calls\n+\tto use it as necessary.  Use it to bail out after sm-handling,\n+\tif needed.\n+\t(exploded_node::detect_leaks): Update for new path_ctxt param.\n+\t(dynamic_call_info_t::update_model): Update for conversion of\n+\texploded_edge::custom_info_t to custom_edge_info.\n+\t(dynamic_call_info_t::add_events_to_path): Likewise.\n+\t(rewind_info_t::update_model): Likewise.\n+\t(rewind_info_t::add_events_to_path): Likewise.\n+\t(exploded_edge::exploded_edge): Likewise.\n+\t(exploded_graph::add_edge): Likewise.\n+\t(exploded_graph::maybe_process_run_of_before_supernode_enodes):\n+\tUpdate for new path_ctxt param.\n+\t(class impl_path_context): New.\n+\t(exploded_graph::process_node): Update for new path_ctxt param.\n+\tCreate an impl_path_context and pass it to exploded_node::on_stmt.\n+\tUse it to terminate iterating stmts if terminate_path is called\n+\ton it.  After processing a run of stmts, query path_ctxt to\n+\tpotentially terminate the analysis path, and/or to \"bifurcate\" the\n+\tanalysis into multiple additional paths.\n+\t(feasibility_state::maybe_update_for_edge): Update for new\n+\tupdate_model ctxt param.\n+\t* exploded-graph.h\n+\t(impl_region_model_context::impl_region_model_context): Add\n+\tpath_ctxt param.\n+\t(impl_region_model_context::bifurcate): New.\n+\t(impl_region_model_context::terminate_path): New\n+\t(impl_region_model_context::get_ext_state): New.\n+\t(impl_region_model_context::get_malloc_map): New.\n+\t(impl_region_model_context::m_path_ctxt): New field.\n+\t(exploded_node::on_stmt): Add path_ctxt param.\n+\t(class exploded_edge::custom_info_t): Move to analyzer.h, renaming\n+\tto custom_edge_info, and making the changes as noted in analyzer.h\n+\tabove.\n+\t(exploded_edge::exploded_edge): Update for these changes to\n+\texploded_edge::custom_info_t.\n+\t(exploded_edge::m_custom_info): Likewise.\n+\t(class dynamic_call_info_t): Likewise.\n+\t(class rewind_info_t): Likewise.\n+\t(exploded_graph::add_edge): Likewise.\n+\t* program-state.cc (program_state::on_edge): Update for new\n+\tpath_ctxt param.\n+\t(program_state::push_call): Likewise.\n+\t(program_state::returning_call): Likewise.\n+\t(program_state::prune_for_point): Likewise.\n+\t* region-model-impl-calls.cc: Include \"analyzer/call-info.h\".\n+\t(call_details::get_fndecl_for_call): New.\n+\t(region_model::impl_call_realloc): Reimplement.\n+\t* region-model.cc (region_model::on_call_pre): Move call to\n+\timpl_call_realloc to...\n+\t(region_model::on_call_post): ...here.  Consolidate creation\n+\tof call_details instance.\n+\t(noop_region_model_context::bifurcate): New.\n+\t(noop_region_model_context::terminate_path): New.\n+\t* region-model.h (call_details::get_call_stmt): New.\n+\t(call_details::get_fndecl_for_call): New.\n+\t(region_model::on_realloc_with_move): New.\n+\t(region_model_context::bifurcate): New.\n+\t(region_model_context::terminate_path): New.\n+\t(region_model_context::get_ext_state): New.\n+\t(region_model_context::get_malloc_map): New.\n+\t(noop_region_model_context::bifurcate): New.\n+\t(noop_region_model_context::terminate_path): New.\n+\t(noop_region_model_context::get_ext_state): New.\n+\t(noop_region_model_context::get_malloc_map): New.\n+\t* sm-malloc.cc: Include \"analyzer/program-state.h\".\n+\t(malloc_state_machine::on_realloc_call): Reimplement.\n+\t(malloc_state_machine::on_realloc_with_move): New.\n+\t(region_model::on_realloc_with_move): New.\n+\t* sm-signal.cc (class signal_delivery_edge_info_t): Update for\n+\tconversion from exploded_edge::custom_info_t to custom_edge_info.\n+\t* sm.h (sm_context::get_path_context): New.\n+\t* svalue.cc (svalue::maybe_get_constant): Call\n+\tunwrap_any_unmergeable.\n+\n 2021-08-25  Ankur Saini  <arsenic@sourceware.org>\n \n \tPR analyzer/101980"}, {"sha": "d3a48ff92af11f8d902f25cc35b537945b4e34d5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,7 @@\n+2021-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt: Add -Wmissing-requires.\n+\n 2021-08-25  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR other/93067"}, {"sha": "87760a6933eec00efbe97ae535a558f48cfae307", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,30 @@\n+2021-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96286\n+\t* cp-tree.h (struct lang_type): Add erroneous bit-field.\n+\t(CLASSTYPE_ERRONEOUS): New.\n+\t* pt.c (limit_bad_template_recursion): Check it.\n+\t(instantiate_class_template_1): Set it.\n+\n+2021-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (cxx_eval_outermost_constant_expr): Copy\n+\texpr location to result.\n+\n+2021-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101460\n+\t* cp-tree.h (cxx_constant_value_sfinae): Declare.\n+\t* constexpr.c (cxx_constant_value_sfinae): New.\n+\t* pt.c (fold_targs_r, maybe_fold_fn_template_args): New.\n+\t(tsubst_copy_and_build) [CALL_EXPR]: Call\n+\tmaybe_fold_fn_template_args.\n+\n+2021-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.c (cp_parser_simple_requirement): Warn about missing\n+\trequires.\n+\n 2021-08-27  Jason Merrill  <jason@redhat.com>\n \n \t* typeck2.c (build_x_arrow): Do set TREE_TYPE when operand is"}, {"sha": "ffdc8dc2d4c2a546128e4bf9f74d34973d2eb8c4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,16 @@\n+2021-08-30  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102113\n+\t* match.c (gfc_match_goto): Allow for whitespace in parsing list\n+\tof labels.\n+\n+2021-08-30  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/101349\n+\t* resolve.c (resolve_allocate_expr): An unlimited polymorphic\n+\targument to ALLOCATE must be ALLOCATABLE or a POINTER.  Fix the\n+\tcorresponding check.\n+\n 2021-08-28  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/87737"}, {"sha": "f4b1163382c9091f73a798c285e0e3bfbd1c8f56", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,7 @@\n+2021-08-30  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* sv.po: Update.\n+\n 2021-07-31  Joseph Myers  <joseph@codesourcery.com>\n \n \t* fr.po: Update."}, {"sha": "c9ac0c88e32a76d1d4039e880a57095672bfbffe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,44 @@\n+2021-08-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/99260\n+\t* gcc.dg/analyzer/capacity-2.c: Update for changes to realloc\n+\tanalysis.\n+\t* gcc.dg/analyzer/pr99193-1.c: Likewise.\n+\t* gcc.dg/analyzer/pr99193-3.c: Likewise.\n+\t* gcc.dg/analyzer/realloc-1.c: Likewise.  Add test coverage for\n+\trealloc of non-heap pointer, realloc from mismatching allocator,\n+\tand realloc on a freed pointer.\n+\t* gcc.dg/analyzer/realloc-2.c: New test.\n+\n+2021-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96286\n+\t* g++.dg/template/access2.C: Split struct A.\n+\n+2021-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101460\n+\t* g++.dg/template/explicit-args6.C: New test.\n+\n+2021-08-30  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102113\n+\t* gfortran.dg/goto_9.f90: New test.\n+\n+2021-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-lambda14.C: Add expected warnings.\n+\n+2021-08-30  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/101349\n+\t* gfortran.dg/unlimited_polymorphic_33.f90: New test.\n+\n+2021-08-30  Pat Haugen  <pthaugen@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/fusion-p10-stst.c: New test.\n+\t* gcc.target/powerpc/fusion-p10-stst2.c: New test.\n+\n 2021-08-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/102094"}, {"sha": "1048153e2c89b74616d7d3623ec89a02cf81b033", "filename": "libffi/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,9 @@\n+2021-08-30  YunQiang Su  <yunqiang.su@cipunited.com>\n+\n+\tPR libffi/83636\n+\t* src/mips/n32.S: disable .set mips4\n+\t* src/mips/ffi.c: use different JR encoding for r6.\n+\n 2021-07-09  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR libffi/101336"}, {"sha": "d9efdadf58ffb2f30aca694b634b45e49c2127ab", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,10 @@\n+2021-08-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* configure: Regenerate.\n+\t* m4/autoconf.m4 (AC_LANG_PROGRAM): Declare module name 'object'.\n+\t* m4/gcc_support.m4 (WITH_LOCAL_DRUNTIME): Compile tests with\n+\t-fno-druntime.\n+\n 2021-06-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/100999"}, {"sha": "e32c51a4e1770d632c0f581032413b8e62199629", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e2f030b80cb650708b02086dbd5431cd231495f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e2f030b80cb650708b02086dbd5431cd231495f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1e2f030b80cb650708b02086dbd5431cd231495f", "patch": "@@ -1,3 +1,9 @@\n+2021-08-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/96286\n+\t* testsuite/30_threads/promise/requirements/lwg3466.cc:\n+\tRemove dg-prune-outputs.\n+\n 2021-08-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/alloc_traits.h (allocator_traits): Add explicit"}]}