{"sha": "b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzNzE3NzY1ZDBkNjJhZjU0YmRiMzExMmFjOTBjYTZkN2RkN2M3NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-29T11:08:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-29T11:08:26Z"}, "message": "stl_algo.h (copy_n): Add in C++0x mode.\n\n2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algo.h (copy_n): Add in C++0x mode.\n\t* include/bits/algorithmfwd.h: Add.\n\t* include/bits/stl_uninitialized.h (uninitialized_copy_n): Add\n\tin C++0x mode.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy_n/\n\tmove_iterators/1.cc: New\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n\t* testsuite/25_algorithms/copy_n/1.cc: New.\n\t* testsuite/25_algorithms/copy_n/2.cc: Likewise.\n\t* testsuite/25_algorithms/copy_n/3.cc: Likewise.\n\t* testsuite/25_algorithms/copy_n/4.cc: Likewise.\n\t* testsuite/25_algorithms/copy_n/move_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/copy_n/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/25_algorithms/partition_point/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\nFrom-SVN: r137251", "tree": {"sha": "ec2900173d09b74441a6e8de7b2c0420c8765de3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec2900173d09b74441a6e8de7b2c0420c8765de3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/comments", "author": null, "committer": null, "parents": [{"sha": "7dfab247a1147b532dbf4934e88c36f296cd42da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dfab247a1147b532dbf4934e88c36f296cd42da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dfab247a1147b532dbf4934e88c36f296cd42da"}], "stats": {"total": 570, "additions": 569, "deletions": 1}, "files": [{"sha": "efb05eadf49ed7aef12736f45c1660c40f335e30", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -1,3 +1,22 @@\n+2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algo.h (copy_n): Add in C++0x mode.\n+\t* include/bits/algorithmfwd.h: Add.\n+\t* include/bits/stl_uninitialized.h (uninitialized_copy_n): Add\n+\tin C++0x mode.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy_n/\n+\tmove_iterators/1.cc: New\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n+\t* testsuite/25_algorithms/copy_n/1.cc: New.\n+\t* testsuite/25_algorithms/copy_n/2.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_n/3.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_n/4.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_n/move_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_n/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/partition_point/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\t\n 2008-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algo.h (partition_point): Add in C++0x mode."}, {"sha": "6fefe46b525dca3c9978d0ba1a97b29911e4c421", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -31,6 +31,7 @@\n   copy\n   copy_backward\n   copy_if (C++0x)\n+  copy_n (C++0x)\n   count\n   count_if\n   equal\n@@ -149,6 +150,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _IIter, typename _OIter, typename _Predicate>\n     _OIter\n     copy_if(_IIter, _IIter, _OIter, _Predicate);\n+\n+  template<typename _IIter, typename _Size, typename _OIter>\n+    _OIter\n+    copy_n(_IIter, _Size, _OIter);\n #endif\n \n   // count"}, {"sha": "40ce60b23ef1dd90186743e6c1c02b219609dc9a", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -975,6 +975,53 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __result;\n     }\n \n+\n+  template<typename _InputIterator, typename _Size, typename _OutputIterator>\n+    _OutputIterator\n+    __copy_n(_InputIterator __first, _Size __n,\n+\t     _OutputIterator __result, input_iterator_tag)\n+    {\n+      for (; __n > 0; --__n)\n+\t{\n+\t  *__result = *__first;\n+\t  ++__first;\n+\t  ++__result;\n+\t}\n+      return __result;\n+    }\n+\n+  template<typename _RandomAccessIterator, typename _Size,\n+\t   typename _OutputIterator>\n+    inline _OutputIterator\n+    __copy_n(_RandomAccessIterator __first, _Size __n,\n+\t     _OutputIterator __result, random_access_iterator_tag)\n+    { return std::copy(__first, __first + __n, __result); }\n+\n+  /**\n+   *  @brief Copies the range [first,first+n) into [result,result+n).\n+   *  @param  first  An input iterator.\n+   *  @param  n      The number of elements to copy.\n+   *  @param  result An output iterator.\n+   *  @return  result+n.\n+   *\n+   *  This inline function will boil down to a call to @c memmove whenever\n+   *  possible.  Failing that, if random access iterators are passed, then the\n+   *  loop count will be known (and therefore a candidate for compiler\n+   *  optimizations such as unrolling).\n+  */\n+  template<typename _InputIterator, typename _Size, typename _OutputIterator>\n+    inline _OutputIterator\n+    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n+\t    typename iterator_traits<_InputIterator>::value_type>)\n+\n+      return std::__copy_n(__first, __n, __result,\n+\t\t\t   std::__iterator_category(__first));\n+    }\n+\n   /**\n    *  @brief Copy the elements of a sequence to separate output sequences\n    *         depending on the truth value of a predicate."}, {"sha": "af51264a24909793c8520b94bbdfdbcb92f22172", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -1,6 +1,6 @@\n // Raw memory manipulators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -431,6 +431,53 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _InputIterator, typename _Size,\n+\t   typename _ForwardIterator>\n+    _ForwardIterator\n+    __uninitialized_copy_n(_InputIterator __first, _Size __n,\n+\t\t\t   _ForwardIterator __result, input_iterator_tag)\n+    {\n+      _ForwardIterator __cur = __result;\n+      try\n+\t{\n+\t  for (; __n > 0; --__n, ++__first, ++__cur)\n+\t    ::new(static_cast<void*>(&*__cur)) typename\n+\t\titerator_traits<_ForwardIterator>::value_type(*__first);\n+\t  return __cur;\n+\t}\n+      catch(...)\n+\t{\n+\t  std::_Destroy(__result, __cur);\n+\t  __throw_exception_again;\n+\t}\n+    }\n+\n+  template<typename _RandomAccessIterator, typename _Size,\n+\t   typename _ForwardIterator>\n+    inline _ForwardIterator\n+    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,\n+\t\t\t   _ForwardIterator __result,\n+\t\t\t   random_access_iterator_tag)\n+    { return std::uninitialized_copy(__first, __first + __n, __result); }\n+\n+  /**\n+   *  @brief Copies the range [first,first+n) into result.\n+   *  @param  first  An input iterator.\n+   *  @param  n      The number of elements to copy.\n+   *  @param  result An output iterator.\n+   *  @return  result + n\n+   *\n+   *  Like copy_n(), but does not require an initialized output range.\n+  */\n+  template<typename _InputIterator, typename _Size, typename _ForwardIterator>\n+    inline _ForwardIterator\n+    uninitialized_copy_n(_InputIterator __first, _Size __n,\n+\t\t\t _ForwardIterator __result)\n+    { return std::__uninitialized_copy_n(__first, __n, __result,\n+\t\t\t\t\t std::__iterator_category(__first)); }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif /* _STL_UNINITIALIZED_H */"}, {"sha": "bbe36f3b642786ced54c2ddb7f16ad152dd33105", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy_n/move_iterators/1.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2Fmove_iterators%2F1.cc?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+using std::uninitialized_copy_n;\n+\n+typedef test_container<rvalstruct, input_iterator_wrapper> container_in;\n+typedef test_container<rvalstruct, forward_iterator_wrapper> container_out;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int inarray[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+  const int size = sizeof(inarray) / sizeof(int);\n+\n+  rvalstruct in[size], out[size];\n+  std::copy(inarray, inarray + size, in);\n+\n+  container_in incon(in, in + size);\n+  container_out outcon(out, out + size);\n+\n+  uninitialized_copy_n(std::move_iterator<input_iterator_wrapper<rvalstruct> >(incon.begin()),\n+\t\t       size, outcon.begin());\n+  VERIFY( std::equal(out, out + size, inarray) );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( out[z].valid );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( !in[z].valid );\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "03af13674ec524e6c413db7e75d4bf620d81a5a7", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/1.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F1.cc?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+  const int N = sizeof(A) / sizeof(int);\n+\n+  int i1[N];\n+  copy_n(A, N, i1);\n+  VERIFY( equal(i1, i1 + N, A) );\n+\n+  vector<int> v1(N);\n+  copy_n(A, N, v1.begin());\n+  VERIFY( equal(v1.begin(), v1.end(), A) );\n+\n+  short s1[N];\n+  copy_n(A, N, s1);\n+  VERIFY( equal(s1, s1 + N, A) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "23cf9296c5cb11ebe1401f50f0cac88eee5afe30", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/2.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F2.cc?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+  const int N = sizeof(A) / sizeof(int);\n+  const vector<int> a(A, A + N);\n+\n+  int i1[N];\n+  copy_n(a.begin(), N, i1);\n+  VERIFY( equal(i1, i1 + N, a.begin()) );\n+\n+  vector<int> v1(N);\n+  copy_n(a.begin(), N, v1.begin());\n+  VERIFY( equal(v1.begin(), v1.end(), a.begin()) );\n+\n+  short s1[N];\n+  copy_n(a.begin(), N, s1);\n+  VERIFY( equal(s1, s1 + N, a.begin()) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "14bb356e7220543b31bbffebfcc51b0b9c8c5b08", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/3.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F3.cc?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <vector>\n+#include <deque>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+  const int N = sizeof(A) / sizeof(int);\n+  const deque<int> a(A, A + N);\n+\n+  int i1[N];\n+  copy_n(a.begin(), N, i1);\n+  VERIFY( equal(i1, i1 + N, a.begin()) );\n+\n+  vector<int> v1(N);\n+  copy_n(a.begin(), N, v1.begin());\n+  VERIFY( equal(v1.begin(), v1.end(), a.begin()) );\n+\n+  short s1[N];\n+  copy_n(a.begin(), N, s1);\n+  VERIFY( equal(s1, s1 + N, a.begin()) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9320b7e9fc9785ba37f0e48bb6c0268cb00a17d2", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/4.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2F4.cc?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <vector>\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n+  const int N = sizeof(A) / sizeof(int);\n+  const list<int> a(A, A + N);\n+  \n+  int i1[N];\n+  copy_n(a.begin(), N, i1);\n+  VERIFY( equal(i1, i1 + N, a.begin()) );\n+\n+  vector<int> v1(N);\n+  copy_n(a.begin(), N, v1.begin());\n+  VERIFY( equal(v1.begin(), v1.end(), a.begin()) );\n+\n+  short s1[N];\n+  copy_n(a.begin(), N, s1);\n+  VERIFY( equal(s1, s1 + N, a.begin()) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "08b26d4e9f240bd27bcd2006e18493fe648e8438", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/move_iterators/1.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Fmove_iterators%2F1.cc?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#undef _GLIBCXX_CONCEPT_CHECKS\n+#define  _GLIBCXX_TESTSUITE_ALLOW_RVALREF_ALIASING\n+\n+#include <algorithm>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+#include <testsuite_rvalref.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using __gnu_test::rvalstruct;\n+using std::copy_n;\n+\n+typedef test_container<rvalstruct, input_iterator_wrapper> container_in;\n+typedef test_container<rvalstruct, output_iterator_wrapper> container_out;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int inarray[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+  const int size = sizeof(inarray) / sizeof(int);\n+\n+  rvalstruct in[size], out[size];\n+  std::copy(inarray, inarray + size, in);\n+\n+  container_in incon(in, in + size);\n+  container_out outcon(out, out + size);\n+\n+  copy_n(std::move_iterator<input_iterator_wrapper<rvalstruct> >(incon.begin()),\n+\t size, outcon.begin());\n+  VERIFY( std::equal(out, out + size, inarray) );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( out[z].valid );\n+  for (int z = 0; z < size; ++z)\n+    VERIFY( !in[z].valid );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "004479ce07d1f4e72dde6d9214a531133ec3c512", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef unsigned short \tsize_type;\n+\n+  template iterator_type copy_n(iterator_type, size_type, iterator_type);\n+} "}, {"sha": "64a68de6184d22bb533baa2155762bb1f2dc2287", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_n/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_n%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef unsigned short \tsize_type;\n+\n+  template iterator_type copy_n(iterator_type, size_type, iterator_type);\n+} "}, {"sha": "2d73e6f15bc81bec792849a0417a4aad62d9262a", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03717765d0d62af54bdb3112ac90ca6d7dd7c75/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=b03717765d0d62af54bdb3112ac90ca6d7dd7c75", "patch": "@@ -217,6 +217,10 @@ namespace std\n     _OIter \n     copy_if(_IIter, _IIter, _OIter, _Predicate);\n \n+  template<typename _IIter, typename _Size, typename _OIter>\n+    _OIter\n+    copy_n(_IIter, _Size, _OIter);\n+\n   template<typename _IIter, typename _OIter1,\n \t   typename _OIter2, typename _Predicate>\n     pair<_OIter1, _OIter2>"}]}