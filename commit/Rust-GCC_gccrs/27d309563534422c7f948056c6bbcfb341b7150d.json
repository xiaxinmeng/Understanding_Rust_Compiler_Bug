{"sha": "27d309563534422c7f948056c6bbcfb341b7150d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkMzA5NTYzNTM0NDIyYzdmOTQ4MDU2YzZiYmNmYjM0MWI3MTUwZA==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2002-08-21T23:24:14Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2002-08-21T23:24:14Z"}, "message": "tree.c (finish_vector_type): Fix a typo in a comment.\n\n        * tree.c (finish_vector_type): Fix a typo in a comment.\n        * Makefile.in: Fix \"the the\" stutters in comments.\n        * genautomata.c: Ditto.\n        * ifcvt.c: Ditto.\n        * regrename.c: Ditto.\n        * config/alpha/alpha.c: Ditto.\n        * config/alpha/vms-crt0-64.c: Ditto.\n        * config/alpha/vms-crt0.c: Ditto.\n        * config/alpha/vms-psxcrt0-64.c: Ditto.\n        * config/alpha/vms-psxcrt0.c: Ditto.\n        * config/d30v/d30v.h: Ditto.\n        * config/fr30/fr30.h: Ditto.\n        * config/rs6000/rs6000.c: Ditto.\n        * config/stormy16/stormy16.h: Ditto.\n        * doc/md.texi: Ditto.\n\nFrom-SVN: r56496", "tree": {"sha": "20bf0674ee9977dd04924b8c03edf197e145357c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20bf0674ee9977dd04924b8c03edf197e145357c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d309563534422c7f948056c6bbcfb341b7150d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d309563534422c7f948056c6bbcfb341b7150d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d309563534422c7f948056c6bbcfb341b7150d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d309563534422c7f948056c6bbcfb341b7150d/comments", "author": null, "committer": null, "parents": [{"sha": "75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "708334d30964ddd62b8df42d7d7ad76bc882d8df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -1,3 +1,21 @@\n+2002-08-21  Stan Shebs  <shebs@apple.com>\n+\n+\t* tree.c (finish_vector_type): Fix a typo in a comment.\n+\t* Makefile.in: Fix \"the the\" stutters in comments.\n+\t* genautomata.c: Ditto.\n+\t* ifcvt.c: Ditto.\n+\t* regrename.c: Ditto.\n+\t* config/alpha/alpha.c: Ditto.\n+\t* config/alpha/vms-crt0-64.c: Ditto.\n+\t* config/alpha/vms-crt0.c: Ditto.\n+\t* config/alpha/vms-psxcrt0-64.c: Ditto.\n+\t* config/alpha/vms-psxcrt0.c: Ditto.\n+\t* config/d30v/d30v.h: Ditto.\n+\t* config/fr30/fr30.h: Ditto.\n+\t* config/rs6000/rs6000.c: Ditto.\n+\t* config/stormy16/stormy16.h: Ditto.\n+\t* doc/md.texi: Ditto.\n+\t\n 2002-08-21  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* cppinit.c (remove_dup_nonsys_dirs): Fix warning and return value."}, {"sha": "bf5144e42774369f50bfa47fb892a6eed43ad522", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -548,7 +548,7 @@ all: all.indirect\n .NOEXPORT:\n \n # GCONFIG_H lists the config files that the generator files depend on, while\n-# CONFIG_H lists the the ones ordinary gcc files depend on, which includes\n+# CONFIG_H lists the ones ordinary gcc files depend on, which includes\n # several files generated by those generators.\n GCONFIG_H = config.h $(host_xm_file_list)\n HCONFIG_H = hconfig.h $(build_xm_file_list)"}, {"sha": "800476d4e8fc1dc4ea09bb8f61d793347d3745b3", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -3310,7 +3310,7 @@ alpha_emit_conditional_branch (code)\n \t}\n       else\n \t{\n-\t  /* ??? We mark the the branch mode to be CCmode to prevent the\n+\t  /* ??? We mark the branch mode to be CCmode to prevent the\n \t     compare and branch from being combined, since the compare \n \t     insn follows IEEE rules that the branch does not.  */\n \t  branch_mode = CCmode;"}, {"sha": "82ba3229772c92232393c8fdeb80ec20a1175b7d", "filename": "gcc/config/alpha/vms-crt0-64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Falpha%2Fvms-crt0-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Falpha%2Fvms-crt0-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-crt0-64.c?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -32,7 +32,7 @@ Boston, MA 02111-1307, USA.  */\n You Lose! This file can only be compiled with DEC C.\n #else\n \n-/* This file can only be compiled with DEC C, due the the call to\n+/* This file can only be compiled with DEC C, due to the call to\n    lib$establish and the pragmas pointer_size.  */\n \n #pragma __pointer_size short"}, {"sha": "b7665f9fcb4eabab4f678da51daaf40d1fd056d4", "filename": "gcc/config/alpha/vms-crt0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Falpha%2Fvms-crt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Falpha%2Fvms-crt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-crt0.c?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -32,7 +32,7 @@ Boston, MA 02111-1307, USA.  */\n You Lose! This file can only be compiled with DEC C.\n #else\n \n-/* This file can only be compiled with DEC C, due the the call to\n+/* This file can only be compiled with DEC C, due to the call to\n    lib$establish. */\n \n #include <stdlib.h>"}, {"sha": "b16e8b4ae8d922e721c83fa125f6b177ddc701f7", "filename": "gcc/config/alpha/vms-psxcrt0-64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0-64.c?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -32,7 +32,7 @@ Boston, MA 02111-1307, USA.  */\n You Lose! This file can only be compiled with DEC C.\n #else\n \n-/* This file can only be compiled with DEC C, due the the call to\n+/* This file can only be compiled with DEC C, due to the call to\n    lib$establish and the pragmas pointer_size.  */\n \n #pragma __pointer_size short"}, {"sha": "c4140b4f8b52365df86b619b71abf441ab6735d5", "filename": "gcc/config/alpha/vms-psxcrt0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-psxcrt0.c?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -32,7 +32,7 @@ Boston, MA 02111-1307, USA.  */\n You Lose! This file can only be compiled with DEC C.\n #else\n \n-/* This file can only be compiled with DEC C, due the the call to\n+/* This file can only be compiled with DEC C, due to the call to\n    lib$establish. */\n \n #include <stdlib.h>"}, {"sha": "763ed90687d94f7de199a1ba3e68b52fc5f17e0b", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -4225,7 +4225,7 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n    Some machines can also perform `and' or `plus' operations on condition code\n    values with less instructions than the corresponding `sCOND' insn followed\n    by `and' or `plus'.  On those machines, define the appropriate patterns.\n-   Use the names `incscc' and `decscc', respectively, for the the patterns\n+   Use the names `incscc' and `decscc', respectively, for the patterns\n    which perform `plus' or `minus' operations on condition code values.  See\n    `rs6000.md' for some examples.  The GNU Superoptizer can be used to find\n    such instruction sequences on other machines."}, {"sha": "a2950c8ec3762a5d47831acd04f86e80667d20dc", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -927,7 +927,7 @@ enum reg_class\n    ldi:32 FUNCTION, r0\n    jmp    @r0\n \n-   The no-ops are to guarantee that the the static chain and final\n+   The no-ops are to guarantee that the static chain and final\n    target are 32 bit ailgned within the trampoline.  That allows us to\n    initialize those locations with simple SImode stores.   The alternative\n    would be to use HImode stores.  */"}, {"sha": "1bb6c29a96013770a0d8feef04ccc65e6db7f193", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -8572,7 +8572,7 @@ rs6000_emit_cmove (dest, op, true_cond, false_cond)\n   /* We're going to try to implement comparions by performing\n      a subtract, then comparing against zero.  Unfortunately,\n      Inf - Inf is NaN which is not zero, and so if we don't\n-     know that the the operand is finite and the comparison\n+     know that the operand is finite and the comparison\n      would treat EQ different to UNORDERED, we can't do it.  */\n   if (! flag_unsafe_math_optimizations\n       && code != GT && code != UNGE"}, {"sha": "6833ea5aa0623fe9a4e25e200b37da0e2becc6c2", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -3860,7 +3860,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    Some machines can also perform `and' or `plus' operations on condition code\n    values with less instructions than the corresponding `sCOND' insn followed\n    by `and' or `plus'.  On those machines, define the appropriate patterns.\n-   Use the names `incscc' and `decscc', respectively, for the the patterns\n+   Use the names `incscc' and `decscc', respectively, for the patterns\n    which perform `plus' or `minus' operations on condition code values.  See\n    `rs6000.md' for some examples.  The GNU Superoptizer can be used to find\n    such instruction sequences on other machines."}, {"sha": "ed1115e4dc31653ea81f787d8f1a4266db61bb1a", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -4225,7 +4225,7 @@ For example:\n \n @end smallexample\n \n-Where @var{pathname} is a string that specifies the the location of the file,\n+Where @var{pathname} is a string that specifies the location of the file,\n specifies the include file to be in @file{gcc/config/target/filestuff}. The\n directory @file{gcc/config/target} is regarded as the default directory.\n "}, {"sha": "bbb2b9698762d606b3af1d6c3c34316c06dcdc2b", "filename": "gcc/genautomata.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -6870,7 +6870,7 @@ process_state_longest_path_length (state)\n \n #define MAX_DFA_ISSUE_RATE_VAR_NAME \"max_dfa_issue_rate\"\n \n-/* The following function calculates value of the the corresponding\n+/* The following function calculates value of the corresponding\n    global variable and outputs its declaration.  */\n \n static void"}, {"sha": "f92b7e8285baebfc3c2de2e36fa8f517b87e0e0d", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -343,7 +343,7 @@ cond_exec_get_condition (jump)\n \n /* Given a simple IF-THEN or IF-THEN-ELSE block, attempt to convert it\n    to conditional execution.  Return TRUE if we were successful at\n-   converting the the block.  */\n+   converting the block.  */\n \n static int\n cond_exec_process_if_block (ce_info, do_multiple_p)\n@@ -1687,7 +1687,7 @@ noce_operand_ok (op)\n \n /* Given a simple IF-THEN or IF-THEN-ELSE block, attempt to convert it\n    without using conditional execution.  Return TRUE if we were\n-   successful at converting the the block.  */\n+   successful at converting the block.  */\n \n static int\n noce_process_if_block (ce_info)\n@@ -2230,7 +2230,7 @@ block_jumps_and_fallthru_p (cur_bb, target_bb)\n \n /* Determine if a given basic block heads a simple IF-THEN or IF-THEN-ELSE\n    block.  If so, we'll try to convert the insns to not require the branch.\n-   Return TRUE if we were successful at converting the the block.  */\n+   Return TRUE if we were successful at converting the block.  */\n \n static int\n find_if_block (ce_info)\n@@ -2580,7 +2580,7 @@ block_has_only_trap (bb)\n    transformable, but not necessarily the other.  There need be no\n    JOIN block.\n \n-   Return TRUE if we were successful at converting the the block.\n+   Return TRUE if we were successful at converting the block.\n \n    Cases we'd like to look at:\n "}, {"sha": "8300c37e34eded35abd629e5d1ccdf181109755b", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -1264,7 +1264,7 @@ copy_value (dest, src, vd)\n   if (vd->e[sr].mode == VOIDmode)\n     set_value_regno (sr, vd->e[dr].mode, vd);\n \n-  /* If we are narrowing the the input to a smaller number of hard regs,\n+  /* If we are narrowing the input to a smaller number of hard regs,\n      and it is in big endian, we are really extracting a high part.\n      Since we generally associate a low part of a value with the value itself,\n      we must not do the same for the high part."}, {"sha": "1a5910e985dbe557c4b8114bb52c822acbd7aa30", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d309563534422c7f948056c6bbcfb341b7150d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=27d309563534422c7f948056c6bbcfb341b7150d", "patch": "@@ -4612,7 +4612,7 @@ tree_class_check_failed (node, cl, file, line, function)\n #endif /* ENABLE_TREE_CHECKING */\n \f\n /* For a new vector type node T, build the information necessary for\n-   debuggint output.  */\n+   debugging output.  */\n \n static void\n finish_vector_type (t)"}]}