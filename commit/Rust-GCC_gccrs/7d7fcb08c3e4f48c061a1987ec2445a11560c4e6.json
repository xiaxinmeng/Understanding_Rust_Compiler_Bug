{"sha": "7d7fcb08c3e4f48c061a1987ec2445a11560c4e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3ZmNiMDhjM2U0ZjQ4YzA2MWExOTg3ZWMyNDQ1YTExNTYwYzRlNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-04-22T17:35:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-04-22T17:35:08Z"}, "message": "gigi.h (create_subprog_decl): Add ARTIFICIAL_FLAG parameter.\n\n\t* gcc-interface/gigi.h (create_subprog_decl): Add ARTIFICIAL_FLAG\n\tparameter.\n\t* gcc-interface/utils.c (create_subprog_decl): Likewise.  Set\n\tDECL_ARTIFICIAL and DECL_NO_INLINE_WARNING_P on the DECL accordingly.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Subprogram_Type>: Add\n\tARTIFICIAL_FLAG local variable and pass it to create_subprog_decl.\n\t<all>: Do not set flags on the reused DECL node coming from an alias.\n\tSet DECL_IGNORED_P on the DECL node built for subprograms if they\n\tdon't need debug info here...\n\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): ...and not here.\n\t(gigi): Adjust calls to create_subprog_decl.\n\t(build_raise_check): Likewise.\n\t(establish_gnat_vms_condition_handler): Likewise.\n\t(Compilation_Unit_to_gnu): Likewise.\n\t(gnat_to_gnu): Likewise.\n\nFrom-SVN: r172862", "tree": {"sha": "3835a433d75a82dc790e95c7b83470ce5a833abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3835a433d75a82dc790e95c7b83470ce5a833abe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6/comments", "author": null, "committer": null, "parents": [{"sha": "1b5f5069484e7b96a0e7f07db7cd014f61af0b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b5f5069484e7b96a0e7f07db7cd014f61af0b4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b5f5069484e7b96a0e7f07db7cd014f61af0b4d"}], "stats": {"total": 151, "additions": 87, "deletions": 64}, "files": [{"sha": "31a892ce91a69cc3087d736572a4d70babaf38b9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7d7fcb08c3e4f48c061a1987ec2445a11560c4e6", "patch": "@@ -1,3 +1,21 @@\n+2011-04-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (create_subprog_decl): Add ARTIFICIAL_FLAG\n+\tparameter.\n+\t* gcc-interface/utils.c (create_subprog_decl): Likewise.  Set\n+\tDECL_ARTIFICIAL and DECL_NO_INLINE_WARNING_P on the DECL accordingly.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Subprogram_Type>: Add\n+\tARTIFICIAL_FLAG local variable and pass it to create_subprog_decl.\n+\t<all>: Do not set flags on the reused DECL node coming from an alias.\n+\tSet DECL_IGNORED_P on the DECL node built for subprograms if they\n+\tdon't need debug info here...\n+\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): ...and not here.\n+\t(gigi): Adjust calls to create_subprog_decl.\n+\t(build_raise_check): Likewise.\n+\t(establish_gnat_vms_condition_handler): Likewise.\n+\t(Compilation_Unit_to_gnu): Likewise.\n+\t(gnat_to_gnu): Likewise.\n+\n 2011-04-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/Makefile.in (NO_SIBLING_ADAFLAGS): Always define."}, {"sha": "c8e662ec0eff2319def47510ced0d53db34bc745", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=7d7fcb08c3e4f48c061a1987ec2445a11560c4e6", "patch": "@@ -3934,6 +3934,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tbool public_flag = Is_Public (gnat_entity) || imported_p;\n \tbool extern_flag\n \t  = (Is_Public (gnat_entity) && !definition) || imported_p;\n+\tbool artificial_flag = !Comes_From_Source (gnat_entity);\n        /* The semantics of \"pure\" in Ada essentially matches that of \"const\"\n           in the back-end.  In particular, both properties are orthogonal to\n           the \"nothrow\" property if the EH circuitry is explicit in the\n@@ -4379,31 +4380,31 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  }\n \n \telse if (kind == E_Subprogram_Type)\n-\t  gnu_decl = create_type_decl (gnu_entity_name, gnu_type, attr_list,\n-\t\t\t\t       !Comes_From_Source (gnat_entity),\n-\t\t\t\t       debug_info_p, gnat_entity);\n+\t  gnu_decl\n+\t    = create_type_decl (gnu_entity_name, gnu_type, attr_list,\n+\t\t\t\tartificial_flag, debug_info_p, gnat_entity);\n \telse\n \t  {\n \t    if (has_stub)\n \t      {\n \t\tgnu_stub_name = gnu_ext_name;\n \t\tgnu_ext_name = create_concat_name (gnat_entity, \"internal\");\n \t\tpublic_flag = false;\n+ \t\tartificial_flag = true;\n \t      }\n \n-\t    gnu_decl = create_subprog_decl (gnu_entity_name, gnu_ext_name,\n-\t\t\t\t\t    gnu_type, gnu_param_list,\n-\t\t\t\t\t    inline_flag, public_flag,\n-\t\t\t\t\t    extern_flag, attr_list,\n-\t\t\t\t\t    gnat_entity);\n+\t    gnu_decl\n+\t      = create_subprog_decl (gnu_entity_name, gnu_ext_name, gnu_type,\n+\t\t\t\t     gnu_param_list, inline_flag, public_flag,\n+\t\t\t\t     extern_flag, artificial_flag, attr_list,\n+\t\t\t\t     gnat_entity);\n \t    if (has_stub)\n \t      {\n \t\ttree gnu_stub_decl\n \t\t  = create_subprog_decl (gnu_entity_name, gnu_stub_name,\n \t\t\t\t\t gnu_stub_type, gnu_stub_param_list,\n-\t\t\t\t\t inline_flag, true,\n-\t\t\t\t\t extern_flag, attr_list,\n-\t\t\t\t\t gnat_entity);\n+\t\t\t\t\t inline_flag, true, extern_flag,\n+\t\t\t\t\t false, attr_list, gnat_entity);\n \t\tSET_DECL_FUNCTION_STUB (gnu_decl, gnu_stub_decl);\n \t      }\n \n@@ -4928,14 +4929,16 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n     }\n \n   /* If we really have a ..._DECL node, set a couple of flags on it.  But we\n-     cannot do that if we are reusing the ..._DECL node made for a renamed\n-     object, since the predicates don't apply to it but to GNAT_ENTITY.  */\n-  if (DECL_P (gnu_decl) && !(Present (Renamed_Object (gnat_entity)) && saved))\n+     cannot do so if we are reusing the ..._DECL node made for an alias or a\n+     renamed object as the predicates don't apply to it but to GNAT_ENTITY.  */\n+  if (DECL_P (gnu_decl)\n+      && !Present (Alias (gnat_entity))\n+      && !(Present (Renamed_Object (gnat_entity)) && saved))\n     {\n       if (!Comes_From_Source (gnat_entity))\n \tDECL_ARTIFICIAL (gnu_decl) = 1;\n \n-      if (!debug_info_p && TREE_CODE (gnu_decl) != FUNCTION_DECL)\n+      if (!debug_info_p)\n \tDECL_IGNORED_P (gnu_decl) = 1;\n     }\n "}, {"sha": "ca0950ccc6d972c3864824de23d31500f0f884b5", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=7d7fcb08c3e4f48c061a1987ec2445a11560c4e6", "patch": "@@ -646,29 +646,29 @@ extern tree create_field_decl (tree field_name, tree field_type,\n \t\t\t       tree record_type, tree size, tree pos,\n \t\t\t       int packed, int addressable);\n \n-/* Returns a PARM_DECL node. PARAM_NAME is the name of the parameter,\n-   PARAM_TYPE is its type.  READONLY is true if the parameter is\n-   readonly (either an In parameter or an address of a pass-by-ref\n-   parameter).  */\n+/* Return a PARM_DECL node.  PARAM_NAME is the name of the parameter and\n+   PARAM_TYPE is its type.  READONLY is true if the parameter is readonly\n+   (either an In parameter or an address of a pass-by-ref parameter).  */\n extern tree create_param_decl (tree param_name, tree param_type,\n                                bool readonly);\n \n-/* Returns a FUNCTION_DECL node.  SUBPROG_NAME is the name of the subprogram,\n+/* Return a LABEL_DECL node for LABEL_NAME.  */\n+extern tree create_label_decl (tree label_name);\n+\n+/* Return a FUNCTION_DECL node.  SUBPROG_NAME is the name of the subprogram,\n    ASM_NAME is its assembler name, SUBPROG_TYPE is its type (a FUNCTION_TYPE\n    node), PARAM_DECL_LIST is the list of the subprogram arguments (a list of\n    PARM_DECL nodes chained through the TREE_CHAIN field).\n \n-   INLINE_FLAG, PUBLIC_FLAG, EXTERN_FLAG, and ATTR_LIST are used to set the\n-   appropriate fields in the FUNCTION_DECL.  GNAT_NODE gives the location.  */\n+   INLINE_FLAG, PUBLIC_FLAG, EXTERN_FLAG, ARTIFICIAL_FLAG and ATTR_LIST are\n+   used to set the appropriate fields in the FUNCTION_DECL.  GNAT_NODE is\n+   used for the position of the decl.  */\n extern tree create_subprog_decl (tree subprog_name, tree asm_name,\n-                                 tree subprog_type, tree param_decl_list,\n-                                 bool inlinee_flag, bool public_flag,\n-                                 bool extern_flag,\n+\t\t\t\t tree subprog_type, tree param_decl_list,\n+\t\t\t\t bool inline_flag, bool public_flag,\n+\t\t\t\t bool extern_flag, bool artificial_flag,\n \t\t\t\t struct attrib *attr_list, Node_Id gnat_node);\n \n-/* Returns a LABEL_DECL node for LABEL_NAME.  */\n-extern tree create_label_decl (tree label_name);\n-\n /* Set up the framework for generating code for SUBPROG_DECL, a subprogram\n    body. This routine needs to be invoked before processing the declarations\n    appearing in the subprogram.  */"}, {"sha": "b4094ca0d0ae742404950fdf1e527d40b6377870", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=7d7fcb08c3e4f48c061a1987ec2445a11560c4e6", "patch": "@@ -357,7 +357,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t   build_function_type (ptr_void_type_node,\n \t\t\t\t\t\ttree_cons (NULL_TREE,\n \t\t\t\t\t\t\t   sizetype, t)),\n-\t\t\t   NULL_TREE, false, true, true, NULL, Empty);\n+\t\t\t   NULL_TREE, false, true, true, true, NULL, Empty);\n   DECL_IS_MALLOC (malloc_decl) = 1;\n \n   /* malloc32 is a function declaration tree for a function to allocate\n@@ -367,7 +367,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t   build_function_type (ptr_void_type_node,\n \t\t\t\t\t\ttree_cons (NULL_TREE,\n \t\t\t\t\t\t\t   sizetype, t)),\n-\t\t\t   NULL_TREE, false, true, true, NULL, Empty);\n+\t\t\t   NULL_TREE, false, true, true, true, NULL, Empty);\n   DECL_IS_MALLOC (malloc32_decl) = 1;\n \n   /* free is a function declaration tree for a function to free memory.  */\n@@ -377,14 +377,14 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t\t\t\ttree_cons (NULL_TREE,\n \t\t\t\t\t\t\t   ptr_void_type_node,\n \t\t\t\t\t\t\t   t)),\n-\t\t\t   NULL_TREE, false, true, true, NULL, Empty);\n+\t\t\t   NULL_TREE, false, true, true, true, NULL, Empty);\n \n   /* This is used for 64-bit multiplication with overflow checking.  */\n   mulv64_decl\n     = create_subprog_decl (get_identifier (\"__gnat_mulv64\"), NULL_TREE,\n \t\t\t   build_function_type_list (int64_type, int64_type,\n \t\t\t\t\t\t     int64_type, NULL_TREE),\n-\t\t\t   NULL_TREE, false, true, true, NULL, Empty);\n+\t\t\t   NULL_TREE, false, true, true, true, NULL, Empty);\n \n   /* Name of the _Parent field in tagged record types.  */\n   parent_name_id = get_identifier (Get_Name_String (Name_uParent));\n@@ -405,7 +405,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n     = create_subprog_decl\n     (get_identifier (\"system__soft_links__get_jmpbuf_address_soft\"),\n      NULL_TREE, build_function_type (jmpbuf_ptr_type, NULL_TREE),\n-     NULL_TREE, false, true, true, NULL, Empty);\n+     NULL_TREE, false, true, true, true, NULL, Empty);\n   DECL_IGNORED_P (get_jmpbuf_decl) = 1;\n \n   set_jmpbuf_decl\n@@ -414,7 +414,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n      NULL_TREE,\n      build_function_type (void_type_node,\n \t\t\t  tree_cons (NULL_TREE, jmpbuf_ptr_type, t)),\n-     NULL_TREE, false, true, true, NULL, Empty);\n+     NULL_TREE, false, true, true, true, NULL, Empty);\n   DECL_IGNORED_P (set_jmpbuf_decl) = 1;\n \n   /* setjmp returns an integer and has one operand, which is a pointer to\n@@ -424,7 +424,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n       (get_identifier (\"__builtin_setjmp\"), NULL_TREE,\n        build_function_type (integer_type_node,\n \t\t\t    tree_cons (NULL_TREE,  jmpbuf_ptr_type, t)),\n-       NULL_TREE, false, true, true, NULL, Empty);\n+       NULL_TREE, false, true, true, true, NULL, Empty);\n   DECL_BUILT_IN_CLASS (setjmp_decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (setjmp_decl) = BUILT_IN_SETJMP;\n \n@@ -435,7 +435,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n       (get_identifier (\"__builtin_update_setjmp_buf\"), NULL_TREE,\n        build_function_type (void_type_node,\n \t\t\t    tree_cons (NULL_TREE,  jmpbuf_ptr_type, t)),\n-       NULL_TREE, false, true, true, NULL, Empty);\n+       NULL_TREE, false, true, true, true, NULL, Empty);\n   DECL_BUILT_IN_CLASS (update_setjmp_buf_decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (update_setjmp_buf_decl) = BUILT_IN_UPDATE_SETJMP_BUF;\n \n@@ -446,7 +446,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t\t\t\ttree_cons (NULL_TREE,\n \t\t\t\t\t\t\t   ptr_void_type_node,\n \t\t\t\t\t\t\t   t)),\n-\t\t\t   NULL_TREE, false, true, true, NULL, Empty);\n+\t\t\t   NULL_TREE, false, true, true, true, NULL, Empty);\n   DECL_IGNORED_P (begin_handler_decl) = 1;\n \n   end_handler_decl\n@@ -455,7 +455,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t\t\t\ttree_cons (NULL_TREE,\n \t\t\t\t\t\t\t   ptr_void_type_node,\n \t\t\t\t\t\t\t   t)),\n-\t\t\t   NULL_TREE, false, true, true, NULL, Empty);\n+\t\t\t   NULL_TREE, false, true, true, true, NULL, Empty);\n   DECL_IGNORED_P (end_handler_decl) = 1;\n \n   /* If in no exception handlers mode, all raise statements are redirected to\n@@ -473,7 +473,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t\t\t   tree_cons (NULL_TREE,\n \t\t\t\t\t\t      integer_type_node,\n \t\t\t\t\t\t      t))),\n-\t   NULL_TREE, false, true, true, NULL, Empty);\n+\t   NULL_TREE, false, true, true, true, NULL, Empty);\n       TREE_THIS_VOLATILE (decl) = 1;\n       TREE_SIDE_EFFECTS (decl) = 1;\n       TREE_TYPE (decl)\n@@ -506,7 +506,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n     (get_identifier (\"system__soft_links__get_gnat_exception\"),\n      NULL_TREE,\n      build_function_type (build_pointer_type (except_type_node), NULL_TREE),\n-     NULL_TREE, false, true, true, NULL, Empty);\n+     NULL_TREE, false, true, true, true, NULL, Empty);\n \n   raise_nodefer_decl\n     = create_subprog_decl\n@@ -515,7 +515,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t    tree_cons (NULL_TREE,\n \t\t\t\t       build_pointer_type (except_type_node),\n \t\t\t\t       t)),\n-       NULL_TREE, false, true, true, NULL, Empty);\n+       NULL_TREE, false, true, true, true, NULL, Empty);\n \n   /* Indicate that these never return.  */\n   TREE_THIS_VOLATILE (raise_nodefer_decl) = 1;\n@@ -665,7 +665,7 @@ build_raise_check (int check, tree void_tree, enum exception_info_kind kind)\n \t\t\t\t\t\ttree_cons (NULL_TREE,\n \t\t\t\t\t\t\t   integer_type_node,\n \t\t\t\t\t\t\t   void_tree)))))),\n-\t   NULL_TREE, false, true, true, NULL, Empty);\n+\t   NULL_TREE, false, true, true, true, NULL, Empty);\n     }\n   else\n     {\n@@ -678,7 +678,7 @@ build_raise_check (int check, tree void_tree, enum exception_info_kind kind)\n \t    tree_cons\n \t    (NULL_TREE, build_pointer_type (unsigned_char_type_node),\n \t     tree_cons (NULL_TREE, integer_type_node, void_tree))),\n-\t   NULL_TREE, false, true, true, NULL, Empty);\n+\t   NULL_TREE, false, true, true, true, NULL, Empty);\n     }\n \n   TREE_THIS_VOLATILE (result) = 1;\n@@ -2427,7 +2427,8 @@ establish_gnat_vms_condition_handler (void)\n \t\t\t\t\t\t\t ptr_void_type_node,\n \t\t\t\t\t\t\t ptr_void_type_node,\n \t\t\t\t\t\t\t NULL_TREE),\n-\t\t\t       NULL_TREE, 0, 1, 1, 0, Empty);\n+\t\t\t       NULL_TREE, false, true, true, true, NULL,\n+\t\t\t       Empty);\n \n       /* ??? DECL_CONTEXT shouldn't have been set because of DECL_EXTERNAL.  */\n       DECL_CONTEXT (gnat_vms_condition_handler_decl) = NULL_TREE;\n@@ -2508,10 +2509,6 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n       relayout_decl (gnu_result_decl);\n     }\n \n-  /* Propagate the debug mode.  */\n-  if (!Needs_Debug_Info (gnat_subprog_id))\n-    DECL_IGNORED_P (gnu_subprog_decl) = 1;\n-\n   /* Set the line number in the decl to correspond to that of the body so that\n      the line number notes are written correctly.  */\n   Sloc_to_locus (Sloc (gnat_node), &DECL_SOURCE_LOCATION (gnu_subprog_decl));\n@@ -3774,7 +3771,8 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   tree gnu_elab_proc_decl\n     = create_subprog_decl\n       (create_concat_name (gnat_unit_entity, body_p ? \"elabb\" : \"elabs\"),\n-       NULL_TREE, void_ftype, NULL_TREE, false, true, false, NULL, gnat_unit);\n+       NULL_TREE, void_ftype, NULL_TREE, false, true, false, true, NULL,\n+       gnat_unit);\n   struct elab_info *info;\n \n   VEC_safe_push (tree, gc, gnu_elab_proc_stack, gnu_elab_proc_decl);\n@@ -4505,7 +4503,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t (Entity (Prefix (gnat_node)),\n \t\t\t\t  attr == Attr_Elab_Body ? \"elabb\" : \"elabs\"),\n \t\t\t\t NULL_TREE, void_ftype, NULL_TREE, false,\n-\t\t\t\t true, true, NULL, gnat_node);\n+\t\t\t\t true, true, true, NULL, gnat_node);\n \n \tgnu_result = Attribute_to_gnu (gnat_node, &gnu_result_type, attr);\n       }"}, {"sha": "2e81c185bf2487a65e26fd05b24e4a1ada1f878a", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7fcb08c3e4f48c061a1987ec2445a11560c4e6/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=7d7fcb08c3e4f48c061a1987ec2445a11560c4e6", "patch": "@@ -1795,7 +1795,7 @@ value_factor_p (tree value, HOST_WIDE_INT factor)\n   return false;\n }\n \n-/* Given 2 consecutive field decls PREV_FIELD and CURR_FIELD, return true\n+/* Given two consecutive field decls PREV_FIELD and CURR_FIELD, return true\n    unless we can prove these 2 fields are laid out in such a way that no gap\n    exist between the end of PREV_FIELD and the beginning of CURR_FIELD.  OFFSET\n    is the distance in bits between the end of PREV_FIELD and the starting\n@@ -1841,7 +1841,7 @@ potential_alignment_gap (tree prev_field, tree curr_field, tree offset)\n   return true;\n }\n \n-/* Returns a LABEL_DECL node for LABEL_NAME.  */\n+/* Return a LABEL_DECL node for LABEL_NAME.  */\n \n tree\n create_label_decl (tree label_name)\n@@ -1856,24 +1856,26 @@ create_label_decl (tree label_name)\n   return label_decl;\n }\n \f\n-/* Returns a FUNCTION_DECL node.  SUBPROG_NAME is the name of the subprogram,\n+/* Return a FUNCTION_DECL node.  SUBPROG_NAME is the name of the subprogram,\n    ASM_NAME is its assembler name, SUBPROG_TYPE is its type (a FUNCTION_TYPE\n    node), PARAM_DECL_LIST is the list of the subprogram arguments (a list of\n    PARM_DECL nodes chained through the TREE_CHAIN field).\n \n-   INLINE_FLAG, PUBLIC_FLAG, EXTERN_FLAG, and ATTR_LIST are used to set the\n-   appropriate fields in the FUNCTION_DECL.  GNAT_NODE gives the location.  */\n+   INLINE_FLAG, PUBLIC_FLAG, EXTERN_FLAG, ARTIFICIAL_FLAG and ATTR_LIST are\n+   used to set the appropriate fields in the FUNCTION_DECL.  GNAT_NODE is\n+   used for the position of the decl.  */\n \n tree\n-create_subprog_decl (tree subprog_name, tree asm_name,\n-                     tree subprog_type, tree param_decl_list, bool inline_flag,\n-\t\t     bool public_flag, bool extern_flag,\n-                     struct attrib *attr_list, Node_Id gnat_node)\n+create_subprog_decl (tree subprog_name, tree asm_name, tree subprog_type,\n+\t\t     tree param_decl_list, bool inline_flag, bool public_flag,\n+\t\t     bool extern_flag, bool artificial_flag,\n+\t\t     struct attrib *attr_list, Node_Id gnat_node)\n {\n   tree subprog_decl = build_decl (input_location, FUNCTION_DECL, subprog_name,\n \t\t\t\t  subprog_type);\n   tree result_decl = build_decl (input_location, RESULT_DECL, NULL_TREE,\n \t\t\t\t TREE_TYPE (subprog_type));\n+  DECL_ARGUMENTS (subprog_decl) = param_decl_list;\n \n   /* If this is a non-inline function nested inside an inlined external\n      function, we cannot honor both requests without cloning the nested\n@@ -1887,13 +1889,15 @@ create_subprog_decl (tree subprog_name, tree asm_name,\n       && DECL_EXTERNAL (current_function_decl))\n     DECL_DECLARED_INLINE_P (current_function_decl) = 0;\n \n-  DECL_EXTERNAL (subprog_decl)  = extern_flag;\n-  TREE_PUBLIC (subprog_decl)    = public_flag;\n-  TREE_READONLY (subprog_decl)  = TYPE_READONLY (subprog_type);\n+  DECL_ARTIFICIAL (subprog_decl) = artificial_flag;\n+  DECL_EXTERNAL (subprog_decl) = extern_flag;\n+  DECL_DECLARED_INLINE_P (subprog_decl) = inline_flag;\n+  DECL_NO_INLINE_WARNING_P (subprog_decl) = inline_flag && artificial_flag;\n+\n+  TREE_PUBLIC (subprog_decl) = public_flag;\n+  TREE_READONLY (subprog_decl) = TYPE_READONLY (subprog_type);\n   TREE_THIS_VOLATILE (subprog_decl) = TYPE_VOLATILE (subprog_type);\n   TREE_SIDE_EFFECTS (subprog_decl) = TYPE_VOLATILE (subprog_type);\n-  DECL_DECLARED_INLINE_P (subprog_decl) = inline_flag;\n-  DECL_ARGUMENTS (subprog_decl) = param_decl_list;\n \n   DECL_ARTIFICIAL (result_decl) = 1;\n   DECL_IGNORED_P (result_decl) = 1;"}]}