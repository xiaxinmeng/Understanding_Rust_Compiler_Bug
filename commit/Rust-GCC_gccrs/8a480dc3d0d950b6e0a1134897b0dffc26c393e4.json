{"sha": "8a480dc3d0d950b6e0a1134897b0dffc26c393e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE0ODBkYzNkMGQ5NTBiNmUwYTExMzQ4OTdiMGRmZmMyNmMzOTNlNA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2015-05-19T06:10:58Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2015-05-19T06:10:58Z"}, "message": "predicates.md (gpc_reg_operand): Don't allow all hard registers numbered greater or equal to ARG_POINTER_REGNUM.\n\n\t* config/rs6000/predicates.md (gpc_reg_operand): Don't allow all\n\thard registers numbered greater or equal to ARG_POINTER_REGNUM.\n\t(reg_or_neg_short_operand, fix_trunc_dest_operand): Delete\n\tunused predicates.\n\t* config/rs6000/altivec.md (save_vregs_*, restore_vregs_*):\n\tUse altivec_register_operand.  Make insn predicate TARGET_ALTIVEC.\n\t* config/rs6000/rs6000.md (extzvdi_internal2): Use cc_reg_operand.\n\t* config/rs6000/vsx.md (vsx_float<VSi><mode>2): Expand comment.\n\nFrom-SVN: r223335", "tree": {"sha": "efd8eea4948df041c1314626a9ff7ec3505f78f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efd8eea4948df041c1314626a9ff7ec3505f78f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a480dc3d0d950b6e0a1134897b0dffc26c393e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a480dc3d0d950b6e0a1134897b0dffc26c393e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a480dc3d0d950b6e0a1134897b0dffc26c393e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a480dc3d0d950b6e0a1134897b0dffc26c393e4/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abf96035efcd29f72edbed125a2ac426f370a22c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf96035efcd29f72edbed125a2ac426f370a22c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abf96035efcd29f72edbed125a2ac426f370a22c"}], "stats": {"total": 57, "additions": 26, "deletions": 31}, "files": [{"sha": "1bdee069bbc80113d499ee0174925fb2fbd1bf16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a480dc3d0d950b6e0a1134897b0dffc26c393e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a480dc3d0d950b6e0a1134897b0dffc26c393e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a480dc3d0d950b6e0a1134897b0dffc26c393e4", "patch": "@@ -1,3 +1,14 @@\n+2015-05-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/predicates.md (gpc_reg_operand): Don't allow all\n+\thard registers numbered greater or equal to ARG_POINTER_REGNUM.\n+\t(reg_or_neg_short_operand, fix_trunc_dest_operand): Delete\n+\tunused predicates.\n+\t* config/rs6000/altivec.md (save_vregs_*, restore_vregs_*):\n+\tUse altivec_register_operand.  Make insn predicate TARGET_ALTIVEC.\n+\t* config/rs6000/rs6000.md (extzvdi_internal2): Use cc_reg_operand.\n+\t* config/rs6000/vsx.md (vsx_float<VSi><mode>2): Expand comment.\n+\n 2015-05-19  Sameera Deshpande  <Sameera.Deshpande@imgtec.com>\n \n \t* config/mips/mips.md (JOIN_MODE): New mode iterator."}, {"sha": "b27ee35def51d94a2905baff1b819ea13e01a720", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a480dc3d0d950b6e0a1134897b0dffc26c393e4/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a480dc3d0d950b6e0a1134897b0dffc26c393e4/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=8a480dc3d0d950b6e0a1134897b0dffc26c393e4", "patch": "@@ -353,8 +353,8 @@\n       (use (reg:P 0))\n       (set (mem:V4SI (plus:P (match_operand:P 2 \"gpc_reg_operand\" \"b\")\n \t\t\t     (match_operand:P 3 \"short_cint_operand\" \"I\")))\n-\t   (match_operand:V4SI 4 \"gpc_reg_operand\" \"v\"))])]\n-  \"\"\n+\t   (match_operand:V4SI 4 \"altivec_register_operand\" \"v\"))])]\n+  \"TARGET_ALTIVEC\"\n   \"bl %1\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n@@ -367,8 +367,8 @@\n       (use (reg:P 0))\n       (set (mem:V4SI (plus:P (match_operand:P 2 \"gpc_reg_operand\" \"b\")\n \t\t\t     (match_operand:P 3 \"short_cint_operand\" \"I\")))\n-\t   (match_operand:V4SI 4 \"gpc_reg_operand\" \"v\"))])]\n-  \"\"\n+\t   (match_operand:V4SI 4 \"altivec_register_operand\" \"v\"))])]\n+  \"TARGET_ALTIVEC\"\n   \"bl %1\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n@@ -379,10 +379,10 @@\n       (use (match_operand:P 1 \"symbol_ref_operand\" \"s\"))\n       (clobber (reg:P 11))\n       (use (reg:P 0))\n-      (set (match_operand:V4SI 2 \"gpc_reg_operand\" \"=v\")\n+      (set (match_operand:V4SI 2 \"altivec_register_operand\" \"=v\")\n \t   (mem:V4SI (plus:P (match_operand:P 3 \"gpc_reg_operand\" \"b\")\n \t\t\t     (match_operand:P 4 \"short_cint_operand\" \"I\"))))])]\n-  \"\"\n+  \"TARGET_ALTIVEC\"\n   \"bl %1\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n@@ -393,10 +393,10 @@\n       (use (match_operand:P 1 \"symbol_ref_operand\" \"s\"))\n       (clobber (reg:P 12))\n       (use (reg:P 0))\n-      (set (match_operand:V4SI 2 \"gpc_reg_operand\" \"=v\")\n+      (set (match_operand:V4SI 2 \"altivec_register_operand\" \"=v\")\n \t   (mem:V4SI (plus:P (match_operand:P 3 \"gpc_reg_operand\" \"b\")\n \t\t\t     (match_operand:P 4 \"short_cint_operand\" \"I\"))))])]\n-  \"\"\n+  \"TARGET_ALTIVEC\"\n   \"bl %1\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])"}, {"sha": "fd293ab4f6e544af4a53b4808254d8fb32aab230", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a480dc3d0d950b6e0a1134897b0dffc26c393e4/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a480dc3d0d950b6e0a1134897b0dffc26c393e4/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=8a480dc3d0d950b6e0a1134897b0dffc26c393e4", "patch": "@@ -207,7 +207,10 @@\n   if (!REG_P (op))\n     return 0;\n \n-  if (REGNO (op) >= ARG_POINTER_REGNUM && !CA_REGNO_P (REGNO (op)))\n+  if (REGNO (op) >= FIRST_PSEUDO_REGISTER)\n+    return 1;\n+\n+  if (TARGET_ALTIVEC && ALTIVEC_REGNO_P (REGNO (op)))\n     return 1;\n \n   if (TARGET_VSX && VSX_REGNO_P (REGNO (op)))\n@@ -357,17 +360,6 @@\n     (match_operand 0 \"short_cint_operand\")\n     (match_operand 0 \"gpc_reg_operand\")))\n \n-;; Return 1 if op is a constant integer valid whose negation is valid for\n-;; D field or non-special register register.\n-;; Do not allow a constant zero because all patterns that call this\n-;; predicate use \"addic r1,r2,-const\" to set carry when r2 is greater than\n-;; or equal to const, which does not work for zero.\n-(define_predicate \"reg_or_neg_short_operand\"\n-  (if_then_else (match_code \"const_int\")\n-    (match_test \"satisfies_constraint_P (op)\n-\t\t && INTVAL (op) != 0\")\n-    (match_operand 0 \"gpc_reg_operand\")))\n-\n ;; Return 1 if op is a constant integer valid for DS field\n ;; or non-special register.\n (define_predicate \"reg_or_aligned_short_operand\"\n@@ -713,15 +705,6 @@\n \t\t    || (GET_CODE (XEXP (op, 0)) == PRE_MODIFY\n \t\t\t&& indexed_address (XEXP (XEXP (op, 0), 1), mode))))\"))\n \n-;; Used for the destination of the fix_truncdfsi2 expander.\n-;; If stfiwx will be used, the result goes to memory; otherwise,\n-;; we're going to emit a store and a load of a subreg, so the dest is a\n-;; register.\n-(define_predicate \"fix_trunc_dest_operand\"\n-  (if_then_else (match_test \"! TARGET_E500_DOUBLE && TARGET_PPC_GFXOPT\")\n-   (match_operand 0 \"memory_operand\")\n-   (match_operand 0 \"gpc_reg_operand\")))\n-\n ;; Return 1 if the operand is either a non-special register or can be used\n ;; as the operand of a `mode' add insn.\n (define_predicate \"add_operand\""}, {"sha": "e156e1409d93372a139017f2fd6db6b5599b9d2f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a480dc3d0d950b6e0a1134897b0dffc26c393e4/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a480dc3d0d950b6e0a1134897b0dffc26c393e4/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=8a480dc3d0d950b6e0a1134897b0dffc26c393e4", "patch": "@@ -3653,7 +3653,7 @@\n    (set_attr \"dot\" \"yes\")])\n \n (define_insn \"*extzvdi_internal2\"\n-  [(set (match_operand:CC 4 \"gpc_reg_operand\" \"=x\")\n+  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x\")\n \t(compare:CC (zero_extract:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\"))"}, {"sha": "95c84b6cf242a2d95d24d974c39e7b0631d8c9e1", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a480dc3d0d950b6e0a1134897b0dffc26c393e4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a480dc3d0d950b6e0a1134897b0dffc26c393e4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=8a480dc3d0d950b6e0a1134897b0dffc26c393e4", "patch": "@@ -1199,7 +1199,8 @@\n ;; the fprs because we don't want to add the altivec registers to movdi/movsi.\n ;; For the unsigned tests, there isn't a generic double -> unsigned conversion\n ;; in rs6000.md so don't test VECTOR_UNIT_VSX_P, just test against VSX.\n-;; Don't use vsx_register_operand here, use gpc_reg_operand to match rs6000.md.\n+;; Don't use vsx_register_operand here, use gpc_reg_operand to match rs6000.md\n+;; in allowing virtual registers.\n (define_insn \"vsx_float<VSi><mode>2\"\n   [(set (match_operand:VSX_F 0 \"gpc_reg_operand\" \"=<VSr>,?<VSa>\")\n \t(float:VSX_F (match_operand:<VSI> 1 \"gpc_reg_operand\" \"<VSr2>,<VSr3>\")))]"}]}