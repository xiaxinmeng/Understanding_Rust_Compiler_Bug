{"sha": "85353e24ca90282e1d3620682841f524de20475c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzNTNlMjRjYTkwMjgyZTFkMzYyMDY4Mjg0MWY1MjRkZTIwNDc1Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-21T15:11:07Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-21T15:11:07Z"}, "message": "forwprop: Fix ICE when building a VEC_PERM_EXPR [PR94683]\n\nThe type compatibility handling in simplify_vector_constructor is\nbased on the number of elements and on element type compatibility,\nbut that's no longer enough to ensure that two vector types are\ncompatible.  This patch uses a VIEW_CONVERT_EXPR if the permutation\ntype and result type are distinct.\n\n2020-04-21  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR tree-optimization/94683\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Use a\n\tVIEW_CONVERT_EXPR to handle mixtures of similarly-structured\n\tbut distinct vector types.\n\ngcc/testsuite/\n\tPR tree-optimization/94683\n\t* gcc.target/aarch64/sve/acle/general/pr94683.c: New test.", "tree": {"sha": "46688d72def322254f2c555f54ce7e7266956221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46688d72def322254f2c555f54ce7e7266956221"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85353e24ca90282e1d3620682841f524de20475c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85353e24ca90282e1d3620682841f524de20475c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85353e24ca90282e1d3620682841f524de20475c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85353e24ca90282e1d3620682841f524de20475c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619602346aed9dae3f338d9f18767414446adf78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619602346aed9dae3f338d9f18767414446adf78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/619602346aed9dae3f338d9f18767414446adf78"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "98ad2b23214f1e604e0be87d289117bfa9c801a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85353e24ca90282e1d3620682841f524de20475c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85353e24ca90282e1d3620682841f524de20475c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85353e24ca90282e1d3620682841f524de20475c", "patch": "@@ -1,3 +1,10 @@\n+2020-04-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/94683\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Use a\n+\tVIEW_CONVERT_EXPR to handle mixtures of similarly-structured\n+\tbut distinct vector types.\n+\n 2020-04-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/94641"}, {"sha": "0c2ae02939234bd459e3c7e8131c66daf0f18694", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85353e24ca90282e1d3620682841f524de20475c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85353e24ca90282e1d3620682841f524de20475c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85353e24ca90282e1d3620682841f524de20475c", "patch": "@@ -1,3 +1,8 @@\n+2020-04-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/94683\n+\t* gcc.target/aarch64/sve/acle/general/pr94683.c: New test.\n+\n 2020-04-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/94383"}, {"sha": "fb7c0e479cf099a649979db94b066d16faa45530", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/pr94683.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85353e24ca90282e1d3620682841f524de20475c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr94683.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85353e24ca90282e1d3620682841f524de20475c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr94683.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fpr94683.c?ref=85353e24ca90282e1d3620682841f524de20475c", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options \"-O2 -msve-vector-bits=256\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include <arm_sve.h>\n+\n+typedef float v8sf __attribute__((vector_size(32)));\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+** test:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1.0\n+**\ttrn1\tz0\\.s, z0\\.s, z0\\.s\n+**\tfdiv\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+svfloat32_t\n+test (svbool_t pg, svfloat32_t x, svfloat32_t y)\n+{\n+  v8sf a = svadd_x (pg, x, 1);\n+  v8sf b = { a[0], a[0], a[2], a[2], a[4], a[4], a[6], a[6] };\n+  return svdiv_x (pg, b, y);\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif"}, {"sha": "1a50045b367cbc507d718678602c4e57182c5eac", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85353e24ca90282e1d3620682841f524de20475c/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85353e24ca90282e1d3620682841f524de20475c/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=85353e24ca90282e1d3620682841f524de20475c", "patch": "@@ -2598,6 +2598,11 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t\t\t    res, TYPE_SIZE (type), bitsize_zero_node);\n       if (conv_code != ERROR_MARK)\n \tres = gimple_build (&stmts, conv_code, type, res);\n+      else if (!useless_type_conversion_p (type, TREE_TYPE (res)))\n+\t{\n+\t  gcc_assert (!targetm.compatible_vector_types_p (type, perm_type));\n+\t  res = gimple_build (&stmts, VIEW_CONVERT_EXPR, type, res);\n+\t}\n       /* Blend in the actual constant.  */\n       if (converted_orig1)\n \tres = gimple_build (&stmts, VEC_PERM_EXPR, type,"}]}