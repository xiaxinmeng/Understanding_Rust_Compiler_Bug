{"sha": "bd04ab3253e35f1fa713c81d009c46ad93cb7a52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQwNGFiMzI1M2UzNWYxZmE3MTNjODFkMDA5YzQ2YWQ5M2NiN2E1Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-11-09T02:37:54Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-11-09T02:37:54Z"}, "message": "cgraphunit.c (cgraph_expand_function): Use cgraph_possibly_inlined_p.\n\n\n\t* cgraphunit.c (cgraph_expand_function): Use\n\tcgraph_possibly_inlined_p.\n\t* tree-optimize.c (tree_rest_of_compilation): Do not kill saved tree.\n\n\t* opts.c (common_handle_option): Do not set max-inline-insns.\n\t* params.def: Update comments.\n\t(PARAM_MAX_INLINE_INSNS): Kill.\n\t* invoke.texi (max-inline-insns): Kill.\n\nFrom-SVN: r73384", "tree": {"sha": "1bfc19289d3c7307bd622bf5f3e65c6a3e3dea23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bfc19289d3c7307bd622bf5f3e65c6a3e3dea23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd04ab3253e35f1fa713c81d009c46ad93cb7a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd04ab3253e35f1fa713c81d009c46ad93cb7a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd04ab3253e35f1fa713c81d009c46ad93cb7a52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd04ab3253e35f1fa713c81d009c46ad93cb7a52/comments", "author": null, "committer": null, "parents": [{"sha": "f7a018474dc63bd2256a7bfeec67b4252481601b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a018474dc63bd2256a7bfeec67b4252481601b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a018474dc63bd2256a7bfeec67b4252481601b"}], "stats": {"total": 49, "additions": 4, "deletions": 45}, "files": [{"sha": "672b753bc46df0b621ecfc2408e92ab782d375a4", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd04ab3253e35f1fa713c81d009c46ad93cb7a52/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd04ab3253e35f1fa713c81d009c46ad93cb7a52/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=bd04ab3253e35f1fa713c81d009c46ad93cb7a52", "patch": "@@ -486,7 +486,6 @@ static void\n cgraph_expand_function (struct cgraph_node *node)\n {\n   tree decl = node->decl;\n-  struct cgraph_edge *e;\n \n   if (flag_unit_at_a_time)\n     announce_function (decl);\n@@ -497,21 +496,8 @@ cgraph_expand_function (struct cgraph_node *node)\n      via lang_expand_decl_stmt.  */\n   (*lang_hooks.callgraph.expand_function) (decl);\n \n-  if (!flag_unit_at_a_time)\n-    {\n-       if (!node->local.inlinable\n-\t   || (!node->local.disregard_inline_limits\n-\t       && !cgraph_default_inline_p (node)))\n-\t DECL_SAVED_TREE (node->decl) = NULL;\n-    }\n-  else\n-    {\n-      for (e = node->callers; e; e = e->next_caller)\n-\tif (e->inline_call)\n-\t  break;\n-      if (!e)\n-\tDECL_SAVED_TREE (decl) = NULL;\n-    }\n+  if (!cgraph_function_possibly_inlined_p (decl))\n+    DECL_SAVED_TREE (decl) = NULL;\n   current_function_decl = NULL;\n }\n "}, {"sha": "694cac74a7df9c1214dc9d3c08546cffec54d48f", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd04ab3253e35f1fa713c81d009c46ad93cb7a52/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd04ab3253e35f1fa713c81d009c46ad93cb7a52/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=bd04ab3253e35f1fa713c81d009c46ad93cb7a52", "patch": "@@ -1057,7 +1057,6 @@ common_handle_option (size_t scode, const char *arg,\n \n     case OPT_finline_limit_:\n     case OPT_finline_limit_eq:\n-      set_param_value (\"max-inline-insns\", value);\n       set_param_value (\"max-inline-insns-single\", value / 2);\n       set_param_value (\"max-inline-insns-auto\", value / 2);\n       set_param_value (\"max-inline-insns-rtl\", value);"}, {"sha": "d665ad57ba45b59473ce6965b0985b75fb6230a1", "filename": "gcc/params.def", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd04ab3253e35f1fa713c81d009c46ad93cb7a52/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd04ab3253e35f1fa713c81d009c46ad93cb7a52/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=bd04ab3253e35f1fa713c81d009c46ad93cb7a52", "patch": "@@ -39,7 +39,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    of a function counted in internal gcc instructions (not in\n    real machine instructions) that is eligible for inlining\n    by the tree inliner.\n-   The default value is 100.\n+   The default value is 500.\n    Only functions marked inline (or methods defined in the class\n    definition for C++) are affected by this, unless you set the\n    -finline-functions (included in -O3) compiler option.\n@@ -59,31 +59,12 @@ DEFPARAM (PARAM_MAX_INLINE_INSNS_SINGLE,\n    that is applied to functions marked inlined (or defined in the\n    class declaration in C++) given by the \"max-inline-insns-single\"\n    parameter.\n-   The default value is 100.  */\n+   The default value is 150.  */\n DEFPARAM (PARAM_MAX_INLINE_INSNS_AUTO,\n \t  \"max-inline-insns-auto\",\n \t  \"The maximum number of instructions when automatically inlining\",\n \t  150)\n \n-/* The repeated inlining limit.  After this number of instructions \n-   (in the internal gcc representation, not real machine instructions)\n-   got inlined by repeated inlining, gcc starts to decrease the maximum\n-   number of inlinable instructions in the tree inliner.\n-   This is done by a linear function, see \"max-inline-slope\" parameter.\n-   It is necessary in order to limit the compile-time resources, that \n-   could otherwise become very high.\n-   It is recommended to set this value to twice the value of the single\n-   function limit (set by the \"max-inline-insns-single\" parameter) or\n-   higher.  The default value is 200.\n-   Higher values mean that more inlining is done, resulting in\n-   better performance of the code, at the expense of higher \n-   compile-time resource (time, memory) requirements and larger\n-   binaries.  */\n-DEFPARAM (PARAM_MAX_INLINE_INSNS,\n-\t  \"max-inline-insns\",\n-\t  \"The maximum number of instructions by repeated inlining before gcc starts to throttle inlining\",\n-\t  200)\n-\n /* For languages that (still) use the RTL inliner, we can specify\n    limits for the RTL inliner separately.\n    The parameter here defines the maximum number of RTL instructions"}, {"sha": "c61d34812c5dd17567cc8ae0286281ddeab9eb3e", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd04ab3253e35f1fa713c81d009c46ad93cb7a52/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd04ab3253e35f1fa713c81d009c46ad93cb7a52/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=bd04ab3253e35f1fa713c81d009c46ad93cb7a52", "patch": "@@ -202,13 +202,6 @@ tree_rest_of_compilation (tree fndecl, bool nested_p)\n   if (dump_enabled_p (TDI_all))\n     /* Keep the body; we're going to dump it.  */\n     ;\n-  else if (DECL_INLINE (fndecl) && flag_inline_trees)\n-    /* We might need the body of this function so that we can expand\n-       it inline somewhere else.  */\n-    ;\n-  else\n-    /* We don't need the body; blow it away.  */\n-    DECL_SAVED_TREE (fndecl) = NULL;\n \n   /* Since we don't need the RTL for this function anymore, stop pointing to\n      it.  That's especially important for LABEL_DECLs, since you can reach all"}]}