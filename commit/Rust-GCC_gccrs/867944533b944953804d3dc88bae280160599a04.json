{"sha": "867944533b944953804d3dc88bae280160599a04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY3OTQ0NTMzYjk0NDk1MzgwNGQzZGM4OGJhZTI4MDE2MDU5OWEwNA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:01:29Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:01:29Z"}, "message": "[arm] Rewrite -march and -mcpu options for passing to\n\n\nThe assembler does not understand all the '+' options accepted by the\ncompiler.  The best solution to this is to simply strip the extensions\nand just pass the raw architecture or cpu name through to the\nassembler.  We will use .arch and .arch_extension directives anyway to\nturn on or off individual features.  We already do something similar\nfor big.little combinations and this just extends this principle a bit\nfurther.  This patch also fixes a possible bug by ensuring that the\nlimited string copy is correctly NUL-terminated.\n\nWhile messing with this code I've also taken the opportunity to clean up\nthe duplicate definitions of EXTRA_SPEC_FUNCTIONS by moving it outside of\nthe ifdef wrapper.\n\n\t* config/arm/arm.h (BIG_LITTLE_SPEC): Delete macro.\n\t(ASM_REWRITE_SPEC_FUNCTIONS): New macro.\n\t(BIG_LITTLE_CPU_SPEC_FUNCTIONS): Delete macro.\n\t(ASM_CPU_SPEC): Rewrite.\n\t(MCPU_MTUNE_NATIVE_FUNCTIONS): New macro.\n\t(EXTRA_SPEC_FUNCTIONS): Move outside of ifdef.  Use\n\tMCPU_MTUNE_NATIVE_FUNCTIONS and ASM_REWRITE_SPEC_FUNCTIONS.  Remove\n\treference to BIG_LITTLE_CPU_SPEC_FUNCTIONS.\n\t* common/config/arm/arm-common.c (arm_rewrite_selected_cpu): Ensure\n\tcopied string is NUL-terminated.  Also strip any characters prefixed\n\tby '+'.\n\t(arm_rewrite_selected_arch): New function.\n\t(arm_rewrite_march): New function.\n\nFrom-SVN: r249280", "tree": {"sha": "bcdd048963fde9c7926aee8fd673d28fe990ba93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcdd048963fde9c7926aee8fd673d28fe990ba93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/867944533b944953804d3dc88bae280160599a04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/867944533b944953804d3dc88bae280160599a04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/867944533b944953804d3dc88bae280160599a04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/867944533b944953804d3dc88bae280160599a04/comments", "author": null, "committer": null, "parents": [{"sha": "80448ef60264c49c8b08e700b64a5d338d3806ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80448ef60264c49c8b08e700b64a5d338d3806ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80448ef60264c49c8b08e700b64a5d338d3806ba"}], "stats": {"total": 103, "additions": 81, "deletions": 22}, "files": [{"sha": "1542ae3467df89fe9c3af3a6f996972e5fb23b3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867944533b944953804d3dc88bae280160599a04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867944533b944953804d3dc88bae280160599a04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=867944533b944953804d3dc88bae280160599a04", "patch": "@@ -1,3 +1,19 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.h (BIG_LITTLE_SPEC): Delete macro.\n+\t(ASM_REWRITE_SPEC_FUNCTIONS): New macro.\n+\t(BIG_LITTLE_CPU_SPEC_FUNCTIONS): Delete macro.\n+\t(ASM_CPU_SPEC): Rewrite.\n+\t(MCPU_MTUNE_NATIVE_FUNCTIONS): New macro.\n+\t(EXTRA_SPEC_FUNCTIONS): Move outside of ifdef.\tUse\n+\tMCPU_MTUNE_NATIVE_FUNCTIONS and ASM_REWRITE_SPEC_FUNCTIONS.  Remove\n+\treference to BIG_LITTLE_CPU_SPEC_FUNCTIONS.\n+\t* common/config/arm/arm-common.c (arm_rewrite_selected_cpu): Ensure\n+\tcopied string is NUL-terminated.  Also strip any characters prefixed\n+\tby '+'.\n+\t(arm_rewrite_selected_arch): New function.\n+\t(arm_rewrite_march): New function.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm.opt (x_arm_arch_string): New TargetSave option."}, {"sha": "fd0c6165541dceb6b515e09413cee6c2250eaf40", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867944533b944953804d3dc88bae280160599a04/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867944533b944953804d3dc88bae280160599a04/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=867944533b944953804d3dc88bae280160599a04", "patch": "@@ -66,7 +66,7 @@ arm_except_unwind_info (struct gcc_options *opts)\n \n #define ARM_CPU_NAME_LENGTH 20\n \n-/* Truncate NAME at the first '.' character seen, or return\n+/* Truncate NAME at the first '.' or '+' character seen, or return\n    NAME unmodified.  */\n \n const char *\n@@ -76,12 +76,20 @@ arm_rewrite_selected_cpu (const char *name)\n   char *arg_pos;\n \n   strncpy (output_buf, name, ARM_CPU_NAME_LENGTH);\n+  output_buf[ARM_CPU_NAME_LENGTH] = 0;\n+\n   arg_pos = strchr (output_buf, '.');\n \n   /* If we found a '.' truncate the entry at that point.  */\n   if (arg_pos)\n     *arg_pos = '\\0';\n \n+  arg_pos = strchr (output_buf, '+');\n+\n+  /* If we found a '+' truncate the entry at that point.  */\n+  if (arg_pos)\n+    *arg_pos = '\\0';\n+\n   return output_buf;\n }\n \n@@ -98,6 +106,41 @@ arm_rewrite_mcpu (int argc, const char **argv)\n   return arm_rewrite_selected_cpu (argv[argc - 1]);\n }\n \n+/* Truncate NAME at the first '+' character seen, or return\n+   NAME unmodified.  Similar to arm_rewrite_selected_cpu, but we must\n+   preserve '.' as that is part of some architecture names.  */\n+\n+const char *\n+arm_rewrite_selected_arch (const char *name)\n+{\n+  static char output_buf[ARM_CPU_NAME_LENGTH + 1] = {0};\n+  char *arg_pos;\n+\n+  strncpy (output_buf, name, ARM_CPU_NAME_LENGTH);\n+  output_buf[ARM_CPU_NAME_LENGTH] = 0;\n+\n+  arg_pos = strchr (output_buf, '+');\n+\n+  /* If we found a '+' truncate the entry at that point.  */\n+  if (arg_pos)\n+    *arg_pos = '\\0';\n+\n+  return output_buf;\n+}\n+\n+/* Called by the driver to rewrite a name passed to the -march\n+   argument in preparation to be passed to the assembler.  The\n+   names passed from the command line will be in ARGV, we want\n+   to use the right-most argument, which should be in\n+   ARGV[ARGC - 1].  ARGC should always be greater than 0.  */\n+\n+const char *\n+arm_rewrite_march (int argc, const char **argv)\n+{\n+  gcc_assert (argc);\n+  return arm_rewrite_selected_arch (argv[argc - 1]);\n+}\n+\n struct arm_arch_core_flag\n {\n   const char *const name;"}, {"sha": "d398b99fbb24ffbd383e1077df938050e4b30114", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/867944533b944953804d3dc88bae280160599a04/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/867944533b944953804d3dc88bae280160599a04/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=867944533b944953804d3dc88bae280160599a04", "patch": "@@ -2219,42 +2219,42 @@ extern int making_const_table;\n    instruction.  */\n #define MAX_LDM_STM_OPS 4\n \n-#define BIG_LITTLE_SPEC \\\n-   \" %{mcpu=*:-mcpu=%:rewrite_mcpu(%{mcpu=*:%*})}\"\n-\n extern const char *arm_rewrite_mcpu (int argc, const char **argv);\n-#define BIG_LITTLE_CPU_SPEC_FUNCTIONS \\\n-  { \"rewrite_mcpu\", arm_rewrite_mcpu },\n+extern const char *arm_rewrite_march (int argc, const char **argv);\n+#define ASM_CPU_SPEC_FUNCTIONS\t\t\t\\\n+  { \"rewrite_mcpu\", arm_rewrite_mcpu },\t\\\n+  { \"rewrite_march\", arm_rewrite_march },\n \n-#define ASM_CPU_SPEC \\\n-   \" %{mcpu=generic-*:-march=%*;\"\t\t\t\t\\\n-   \"   :%{march=*:-march=%*}}\"\t\t\t\t\t\\\n-   BIG_LITTLE_SPEC\n+#define ASM_CPU_SPEC\t\t\t\t\t\t\t\\\n+  \" %{mcpu=generic-*:-march=%:rewrite_march(%{mcpu=generic-*:%*});\"\t\\\n+  \"   march=*:-march=%:rewrite_march(%{march=*:%*});\"\t\t\\\n+  \"   mcpu=*:-mcpu=%:rewrite_mcpu(%{mcpu=*:%*})\"\t\t\t\\\n+  \" }\"\n \n extern const char *arm_target_thumb_only (int argc, const char **argv);\n-#define TARGET_MODE_SPEC_FUNCTIONS\t\t\t\t\t\\\n+#define TARGET_MODE_SPEC_FUNCTIONS\t\t\t\\\n   { \"target_mode_check\", arm_target_thumb_only },\n \n /* -mcpu=native handling only makes sense with compiler running on\n    an ARM chip.  */\n #if defined(__arm__)\n extern const char *host_detect_local_cpu (int argc, const char **argv);\n-# define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n-  { \"local_cpu_detect\", host_detect_local_cpu },\t\t\t\\\n-  BIG_LITTLE_CPU_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n-  TARGET_MODE_SPEC_FUNCTIONS\n-\n-# define MCPU_MTUNE_NATIVE_SPECS\t\t\t\t\t\\\n-   \" %{march=native:%<march=native %:local_cpu_detect(arch)}\"\t\t\\\n-   \" %{mcpu=native:%<mcpu=native %:local_cpu_detect(cpu)}\"\t\t\\\n+# define MCPU_MTUNE_NATIVE_FUNCTIONS\t\t\t\\\n+  { \"local_cpu_detect\", host_detect_local_cpu },\n+# define MCPU_MTUNE_NATIVE_SPECS\t\t\t\t\\\n+   \" %{march=native:%<march=native %:local_cpu_detect(arch)}\"\t\\\n+   \" %{mcpu=native:%<mcpu=native %:local_cpu_detect(cpu)}\"\t\\\n    \" %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n #else\n+# define MCPU_MTUNE_NATIVE_FUNCTIONS\n # define MCPU_MTUNE_NATIVE_SPECS \"\"\n-# define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n-\tBIG_LITTLE_CPU_SPEC_FUNCTIONS\t\t\t\t\t\\\n-\tTARGET_MODE_SPEC_FUNCTIONS\n #endif\n \n+# define EXTRA_SPEC_FUNCTIONS\t\t\t\\\n+  MCPU_MTUNE_NATIVE_FUNCTIONS\t\t\t\\\n+  ASM_CPU_SPEC_FUNCTIONS\t\t\t\\\n+  TARGET_MODE_SPEC_FUNCTIONS\n+\n /* Automatically add -mthumb for Thumb-only targets if mode isn't specified\n    via the configuration option --with-mode or via the command line. The\n    function target_mode_check is called to do the check with either:"}]}