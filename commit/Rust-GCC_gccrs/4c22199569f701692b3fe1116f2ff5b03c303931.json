{"sha": "4c22199569f701692b3fe1116f2ff5b03c303931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyMjE5OTU2OWY3MDE2OTJiM2ZlMTExNmYyZmY1YjAzYzMwMzkzMQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-09-29T05:36:01Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2015-09-29T05:36:01Z"}, "message": "re PR target/67716 ([5] [SH]: Miscompiles libraw: Assembler: unaligned opcodes detected in executable segment)\n\nPR target/67716\n* [SH] Implement targetm.override_options_after_change hook\n  so to avoid resetting loop, jump and function alignment values with\n  function-wise optimization flags.\n\nFrom-SVN: r228228", "tree": {"sha": "8c2306b13f69ecbc9fb7831a4acf52c310836c82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c2306b13f69ecbc9fb7831a4acf52c310836c82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c22199569f701692b3fe1116f2ff5b03c303931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c22199569f701692b3fe1116f2ff5b03c303931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c22199569f701692b3fe1116f2ff5b03c303931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c22199569f701692b3fe1116f2ff5b03c303931/comments", "author": null, "committer": null, "parents": [{"sha": "3179619d50ca540e2ed8bc2baa161351a17cb3ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3179619d50ca540e2ed8bc2baa161351a17cb3ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3179619d50ca540e2ed8bc2baa161351a17cb3ce"}], "stats": {"total": 93, "additions": 57, "deletions": 36}, "files": [{"sha": "dc4a1872f1112396f82649ff3fedea4bf8916da4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c22199569f701692b3fe1116f2ff5b03c303931/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c22199569f701692b3fe1116f2ff5b03c303931/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c22199569f701692b3fe1116f2ff5b03c303931", "patch": "@@ -1,3 +1,11 @@\n+2015-09-29  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/67716\n+\t* config/sh/sh.c (sh_override_options_after_change): New.\n+\t(TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): Define.\n+\t(sh_option_override): Move align_loops, align_jumps and\n+        align_functions handling into sh_override_options_after_change.\n+\n 2015-09-28  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/nvptx/nvptx.c: Include omp-low.h and gomp-constants.h."}, {"sha": "16fb57595d264a2230d5e9c2881a2b488c749a68", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c22199569f701692b3fe1116f2ff5b03c303931/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c22199569f701692b3fe1116f2ff5b03c303931/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4c22199569f701692b3fe1116f2ff5b03c303931", "patch": "@@ -202,6 +202,7 @@ static bool noncall_uses_reg (rtx, rtx_insn *, rtx *);\n static rtx_insn *gen_block_redirect (rtx_insn *, int, int);\n static void sh_reorg (void);\n static void sh_option_override (void);\n+static void sh_override_options_after_change (void);\n static void output_stack_adjust (int, rtx, int, HARD_REG_SET *, bool);\n static rtx_insn *frame_insn (rtx);\n static rtx push (int);\n@@ -392,6 +393,10 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE sh_option_override\n \n+#undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n+#define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE \\\n+  sh_override_options_after_change\n+\n #undef TARGET_PRINT_OPERAND\n #define TARGET_PRINT_OPERAND sh_print_operand\n #undef TARGET_PRINT_OPERAND_ADDRESS\n@@ -1044,6 +1049,50 @@ sh_option_override (void)\n       TARGET_ACCUMULATE_OUTGOING_ARGS = 1;\n     }\n \n+  if (flag_unsafe_math_optimizations)\n+    {\n+      /* Enable fsca insn for SH4A if not otherwise specified by the user.  */\n+      if (global_options_set.x_TARGET_FSCA == 0 && TARGET_SH4A_FP)\n+\tTARGET_FSCA = 1;\n+\n+      /* Enable fsrra insn for SH4A if not otherwise specified by the user.  */\n+      if (global_options_set.x_TARGET_FSRRA == 0 && TARGET_SH4A_FP)\n+\tTARGET_FSRRA = 1;\n+    }\n+\n+  /*  Allow fsrra insn only if -funsafe-math-optimizations and\n+      -ffinite-math-only is enabled.  */\n+  TARGET_FSRRA = TARGET_FSRRA\n+\t\t && flag_unsafe_math_optimizations\n+\t\t && flag_finite_math_only;\n+\n+  /* If the -mieee option was not explicitly set by the user, turn it on\n+     unless -ffinite-math-only was specified.  See also PR 33135.  */\n+  if (! global_options_set.x_TARGET_IEEE)\n+    TARGET_IEEE = ! flag_finite_math_only;\n+\n+  if (sh_fixed_range_str)\n+    sh_fix_range (sh_fixed_range_str);\n+\n+  /* This target defaults to strict volatile bitfields.  */\n+  if (flag_strict_volatile_bitfields < 0 && abi_version_at_least(2))\n+    flag_strict_volatile_bitfields = 1;\n+\n+  sh_override_options_after_change ();\n+\n+  /* Parse atomic model option and make sure it is valid for the current\n+     target CPU.  */\n+  selected_atomic_model_\n+    = parse_validate_atomic_model_option (sh_atomic_model_str);\n+\n+  register_sh_passes ();\n+}\n+\n+/* Implement targetm.override_options_after_change.  */\n+\n+static void\n+sh_override_options_after_change (void)\n+{\n   /*  Adjust loop, jump and function alignment values (in bytes), if those\n       were not specified by the user using -falign-loops, -falign-jumps\n       and -falign-functions options.\n@@ -1093,42 +1142,6 @@ sh_option_override (void)\n       if (align_functions < min_align)\n \talign_functions = min_align;\n     }\n-\n-  if (flag_unsafe_math_optimizations)\n-    {\n-      /* Enable fsca insn for SH4A if not otherwise specified by the user.  */\n-      if (global_options_set.x_TARGET_FSCA == 0 && TARGET_SH4A_FP)\n-\tTARGET_FSCA = 1;\n-\n-      /* Enable fsrra insn for SH4A if not otherwise specified by the user.  */\n-      if (global_options_set.x_TARGET_FSRRA == 0 && TARGET_SH4A_FP)\n-\tTARGET_FSRRA = 1;\n-    }\n-\n-  /*  Allow fsrra insn only if -funsafe-math-optimizations and\n-      -ffinite-math-only is enabled.  */\n-  TARGET_FSRRA = TARGET_FSRRA\n-\t\t && flag_unsafe_math_optimizations\n-\t\t && flag_finite_math_only;\n-\n-  /* If the -mieee option was not explicitly set by the user, turn it on\n-     unless -ffinite-math-only was specified.  See also PR 33135.  */\n-  if (! global_options_set.x_TARGET_IEEE)\n-    TARGET_IEEE = ! flag_finite_math_only;\n-\n-  if (sh_fixed_range_str)\n-    sh_fix_range (sh_fixed_range_str);\n-\n-  /* This target defaults to strict volatile bitfields.  */\n-  if (flag_strict_volatile_bitfields < 0 && abi_version_at_least(2))\n-    flag_strict_volatile_bitfields = 1;\n-\n-  /* Parse atomic model option and make sure it is valid for the current\n-     target CPU.  */\n-  selected_atomic_model_\n-    = parse_validate_atomic_model_option (sh_atomic_model_str);\n-\n-  register_sh_passes ();\n }\n \f\n /* Print the operand address in x to the stream.  */"}]}