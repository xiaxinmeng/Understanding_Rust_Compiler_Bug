{"sha": "09d8b020dbcbfd50e4ed1ee8681a191572288ebd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlkOGIwMjBkYmNiZmQ1MGU0ZWQxZWU4NjgxYTE5MTU3MjI4OGViZA==", "commit": {"author": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2019-09-06T19:15:07Z"}, "committer": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2020-05-05T17:42:56Z"}, "message": "PRU: Fix R3.w0 register class\n\nTI has clarified [1] that R3.w0 is caller saved, so allow compiler to\nuse it. This is safe change because older GCC versions treat R3.w0 as\nfixed register and never use it.\n\n[1] https://e2e.ti.com/support/tools/ccs/f/81/t/849993\n\ngcc/ChangeLog:\n\n2020-05-05  Dimitar Dimitrov  <dimitar@dinux.eu>\n\n\t* config/pru/pru.h: Mark R3.w0 as caller saved.\n\ngcc/testsuite/ChangeLog:\n\n2020-05-05  Dimitar Dimitrov  <dimitar@dinux.eu>\n\n\t* gcc.target/pru/lra-framepointer-fragmentation-1.c: Update test to\n\ttake into account additional available registers.\n\t* gcc.target/pru/lra-framepointer-fragmentation-2.c: Ditto.\n\nSigned-off-by: Dimitar Dimitrov <dimitar@dinux.eu>", "tree": {"sha": "91acd2b10b2921fbfcf658d75cc22a2f5e4452b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91acd2b10b2921fbfcf658d75cc22a2f5e4452b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09d8b020dbcbfd50e4ed1ee8681a191572288ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09d8b020dbcbfd50e4ed1ee8681a191572288ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09d8b020dbcbfd50e4ed1ee8681a191572288ebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09d8b020dbcbfd50e4ed1ee8681a191572288ebd/comments", "author": null, "committer": null, "parents": [{"sha": "f886644bd4bad83fe0f6aa8682fb1c33247a1244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f886644bd4bad83fe0f6aa8682fb1c33247a1244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f886644bd4bad83fe0f6aa8682fb1c33247a1244"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "b3c8b731570356d21247744e2a4a56e30477b543", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09d8b020dbcbfd50e4ed1ee8681a191572288ebd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09d8b020dbcbfd50e4ed1ee8681a191572288ebd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09d8b020dbcbfd50e4ed1ee8681a191572288ebd", "patch": "@@ -1,3 +1,7 @@\n+2020-05-05  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* config/pru/pru.h: Mark R3.w0 as caller saved.\n+\n 2020-05-05  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* config/pru/pru.c (pru_emit_doloop): Use new gen_doloop_end_internal"}, {"sha": "314e877a5f94805f9a5b7f85576e59599199012a", "filename": "gcc/config/pru/pru.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09d8b020dbcbfd50e4ed1ee8681a191572288ebd/gcc%2Fconfig%2Fpru%2Fpru.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09d8b020dbcbfd50e4ed1ee8681a191572288ebd/gcc%2Fconfig%2Fpru%2Fpru.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.h?ref=09d8b020dbcbfd50e4ed1ee8681a191572288ebd", "patch": "@@ -125,7 +125,8 @@\n    1      r1\t\t  Caller Saved.  Also used as a temporary by function.\n \t\t\t  profiler and function prologue/epilogue.\n    2      r2       sp\t  Stack Pointer.\n-   3*     r3.w0    ra\t  Return Address (16-bit).\n+   3*     r3.w0\t\t  Caller saved.\n+   3*     r3.w2    ra\t  Return Address (16-bit).\n    4      r4       fp\t  Frame Pointer, also called Argument Pointer in ABI.\n    5-13   r5-r13\t  Callee Saved Registers.\n    14-29  r14-r29\t  Register Arguments.  Caller Saved Registers.\n@@ -152,7 +153,7 @@\n \n #define FIXED_REGISTERS\t\t\t\t\\\n   {\t\t\t\t\t\t\\\n-/*   0 */  0,0,0,0, 0,0,0,0, 1,1,1,1, 1,1,1,1,\t\\\n+/*   0 */  0,0,0,0, 0,0,0,0, 1,1,1,1, 0,0,1,1,\t\\\n /*   4 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,\t\\\n /*   8 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,\t\\\n /*  12 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,\t\\\n@@ -178,10 +179,13 @@\n   }\n \n #define PRU_SEQ_R(X)  (X) * 4 + 0, (X) * 4 + 1, (X) * 4 + 2, (X) * 4 + 3\n+#define PRU_SEQ_R_W0(X)  (X) * 4 + 0, (X) * 4 + 1\n+#define PRU_SEQ_R_W2(X)  (X) * 4 + 2, (X) * 4 + 3\n #define REG_ALLOC_ORDER\t\t\t\t\t\t\t    \\\n   {\t\t\t\t\t\t\t\t\t    \\\n     /* Call-clobbered, yet not used for parameters.  */\t\t\t    \\\n     PRU_SEQ_R (0),  PRU_SEQ_R ( 1),\t\t\t\t\t    \\\n+    PRU_SEQ_R_W0 (3),\t\t\t\t\t\t\t    \\\n \t\t\t\t\t\t\t\t\t    \\\n     PRU_SEQ_R (14), PRU_SEQ_R (15), PRU_SEQ_R (16), PRU_SEQ_R (17),\t    \\\n     PRU_SEQ_R (18), PRU_SEQ_R (19), PRU_SEQ_R (20), PRU_SEQ_R (21),\t    \\\n@@ -193,7 +197,8 @@\n     PRU_SEQ_R (13),\t\t\t\t\t\t\t    \\\n \t\t\t\t\t\t\t\t\t    \\\n     PRU_SEQ_R ( 4),\t\t\t\t\t\t\t    \\\n-    PRU_SEQ_R ( 2), PRU_SEQ_R ( 3),\t\t\t\t\t    \\\n+    PRU_SEQ_R ( 2),\t\t\t\t\t\t\t    \\\n+    PRU_SEQ_R_W2 (3),\t\t\t\t\t\t\t    \\\n \t\t\t\t\t\t\t\t\t    \\\n     /* I/O and virtual registers.  */\t\t\t\t\t    \\\n     PRU_SEQ_R (30), PRU_SEQ_R (31), PRU_SEQ_R (32), PRU_SEQ_R (33),\t    \\"}, {"sha": "092eab6914418e02e46e51a0aeff015bf81b034d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09d8b020dbcbfd50e4ed1ee8681a191572288ebd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09d8b020dbcbfd50e4ed1ee8681a191572288ebd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09d8b020dbcbfd50e4ed1ee8681a191572288ebd", "patch": "@@ -1,3 +1,9 @@\n+2020-05-05  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.target/pru/lra-framepointer-fragmentation-1.c: Update test to\n+\ttake into account additional available registers.\n+\t* gcc.target/pru/lra-framepointer-fragmentation-2.c: Ditto.\n+\n 2020-05-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94799"}, {"sha": "b2a49e3a9e17244ae67e4c8dc58c06a463be3480", "filename": "gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09d8b020dbcbfd50e4ed1ee8681a191572288ebd/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09d8b020dbcbfd50e4ed1ee8681a191572288ebd/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-1.c?ref=09d8b020dbcbfd50e4ed1ee8681a191572288ebd", "patch": "@@ -12,6 +12,7 @@ uint64_t __attribute__((noinline)) test(uint64_t a, uint64_t b,\n   uint64_t l1 = 0x12345678, l2 = 0x87654321, l3 = 1001, l4 = 1002;\n   uint64_t l5 = 1004;\n   uint32_t l6 = 2005;\n+  uint16_t s1 = 4321;\n   uint8_t c1 = 101, c2 = 102;\n \n   /* The numerous dummy asm input operands create just\n@@ -24,10 +25,10 @@ uint64_t __attribute__((noinline)) test(uint64_t a, uint64_t b,\n        : \"0\" (l1), \"r\" (a), \"r\"(b),\n        \"r\"(c), \"r\"(d), \"r\"(e), \"r\"(f),\n        \"r\"(g), \"r\"(h), \"r\"(l2),\n-       \"r\"(c1), \"r\"(c2),\n+       \"r\"(c1), \"r\"(c2), \"r\"(s1),\n        \"r\"(l3), \"r\"(l4), \"r\"(l5), \"r\"(l6));\n \n-  global = a+b+c+d+e+f+g+h + c1+c2 + l2;\n+  global = a+b+c+d+e+f+g+h + s1 + c1+c2 + l2;\n \n   return l1;\n }"}, {"sha": "2f910295f2a62e9bad0bfcb47abc5e090cd5e6ff", "filename": "gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-2.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09d8b020dbcbfd50e4ed1ee8681a191572288ebd/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09d8b020dbcbfd50e4ed1ee8681a191572288ebd/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-2.c?ref=09d8b020dbcbfd50e4ed1ee8681a191572288ebd", "patch": "@@ -14,6 +14,7 @@ uint64_t __attribute__((noinline)) test(uint64_t a, uint64_t b,\n   uint64_t l1 = 0x12345678, l2 = 0x87654321, l3 = 1001, l4 = 1002;\n   uint64_t l5 = 1004;\n   uint32_t l6 = 2005;\n+  uint16_t s1 = 4321;\n   uint8_t c1 = 101, c2 = 102;\n \n   /* The numerous dummy asm input operands create just\n@@ -36,13 +37,14 @@ uint64_t __attribute__((noinline)) test(uint64_t a, uint64_t b,\n        \"add %0, %0, %14\\n\\t\"\n        \"add %0, %0, %15\\n\\t\"\n        \"add %0, %0, %16\\n\\t\"\n+       \"add %0, %0, %17\\n\\t\"\n        : \"=r\" (l1)\n        : \"0\" (l1), \"r\" (a), \"r\"(b),\n        \"r\"(c), \"r\"(d), \"r\"(e), \"r\"(f),\n-       \"r\"(g), \"r\"(h), \"r\"(c1), \"r\"(c2),\n+       \"r\"(g), \"r\"(h), \"r\"(c1), \"r\"(c2), \"r\"(s1),\n        \"r\"(l2), \"r\"(l3), \"r\"(l4), \"r\"(l5), \"r\"(l6));\n \n-  global = a+b+c+d+e+f+g+h + c1+c2 + l2+l3+l4+l5+l6;\n+  global = a+b+c+d+e+f+g+h + s1 + c1+c2 + l2+l3+l4+l5+l6;\n \n   return l1;\n }\n@@ -51,10 +53,10 @@ int main()\n {\n   uint64_t a = test(1, 2, 3, 4, 5, 6, 7, 8);\n \n-  if (a != 0x98878ae8) {\n+  if (a != 0x98879bc9) {\n     abort();\n   }\n-  if (global != 0x876557a4) {\n+  if (global != 0x87656885) {\n     abort();\n   }\n   return 0;"}]}