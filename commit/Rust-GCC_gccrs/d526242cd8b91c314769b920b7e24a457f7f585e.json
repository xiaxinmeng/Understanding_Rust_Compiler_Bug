{"sha": "d526242cd8b91c314769b920b7e24a457f7f585e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUyNjI0MmNkOGI5MWMzMTQ3NjliOTIwYjdlMjRhNDU3ZjdmNTg1ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-07-09T12:48:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-07-09T12:48:32Z"}, "message": "alloc_traits.h (__allocator_always_compares_equal): New trait, provide partial specializations for known allocators.\n\n2011-07-09  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/ext/alloc_traits.h (__allocator_always_compares_equal): New\n\ttrait, provide partial specializations for known allocators.\n\t(__alloc_traits::construct, __alloc_traits::destroy): Overload for\n\tnon-standard pointer types.\n\t(__alloc_traits::_S_always_equal): New trait for use with noexcept.\n\t(__alloc_traits::_S_nothrow_move): Likewise.\n\t(__alloc_traits::_S_nothrow_swap): Likewise.\n\nFrom-SVN: r176077", "tree": {"sha": "0680cdacce29323ecc1d72d49a0c17b0542ffa56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0680cdacce29323ecc1d72d49a0c17b0542ffa56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d526242cd8b91c314769b920b7e24a457f7f585e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d526242cd8b91c314769b920b7e24a457f7f585e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d526242cd8b91c314769b920b7e24a457f7f585e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d526242cd8b91c314769b920b7e24a457f7f585e/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eece716393ff479e198c46221726701b7380ca4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eece716393ff479e198c46221726701b7380ca4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eece716393ff479e198c46221726701b7380ca4f"}], "stats": {"total": 93, "additions": 89, "deletions": 4}, "files": [{"sha": "bd2a0cd9f513a2a8e257b3ed62a1659fe1873302", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d526242cd8b91c314769b920b7e24a457f7f585e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d526242cd8b91c314769b920b7e24a457f7f585e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d526242cd8b91c314769b920b7e24a457f7f585e", "patch": "@@ -1,3 +1,13 @@\n+2011-07-09  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/ext/alloc_traits.h (__allocator_always_compares_equal): New\n+\ttrait, provide partial specializations for known allocators.\n+\t(__alloc_traits::construct, __alloc_traits::destroy): Overload for\n+\tnon-standard pointer types.\n+\t(__alloc_traits::_S_always_equal): New trait for use with noexcept.\n+\t(__alloc_traits::_S_nothrow_move): Likewise.\n+\t(__alloc_traits::_S_nothrow_swap): Likewise.\n+\n 2011-07-09  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/ext/cast.h: Fix typo in include guard."}, {"sha": "dbeb95f313c46b5e11e083b0de18313701d066e3", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 79, "deletions": 4, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d526242cd8b91c314769b920b7e24a457f7f585e/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d526242cd8b91c314769b920b7e24a457f7f585e/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=d526242cd8b91c314769b920b7e24a457f7f585e", "patch": "@@ -37,14 +37,55 @@\n # include <bits/allocator.h>  // for __alloc_swap\n #endif\n \n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template<typename> struct allocator;\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  /**\n-   * @brief  Uniform interface to C++98 and C++0x allocators.\n-   * @ingroup allocators\n-  */\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+template<typename _Alloc>\n+  struct __allocator_always_compares_equal\n+  { static const bool value = false; };\n+\n+  template<typename _Tp>\n+    struct __allocator_always_compares_equal<std::allocator<_Tp>>\n+    { static const bool value = true; };\n+\n+  template<typename, typename> struct array_allocator;\n+\n+  template<typename _Tp, typename _Array>\n+    struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>\n+    { static const bool value = true; };\n+\n+  template<typename> struct mt_allocator;\n+\n+  template<typename _Tp>\n+    struct __allocator_always_compares_equal<mt_allocator<_Tp>>\n+    { static const bool value = true; };\n+\n+  template<typename> struct new_allocator;\n+\n+  template<typename _Tp>\n+    struct __allocator_always_compares_equal<new_allocator<_Tp>>\n+    { static const bool value = true; };\n+\n+  template<typename> struct pool_allocator;\n+\n+  template<typename _Tp>\n+    struct __allocator_always_compares_equal<pool_allocator<_Tp>>\n+    { static const bool value = true; };\n+#endif\n+\n+/**\n+ * @brief  Uniform interface to C++98 and C++0x allocators.\n+ * @ingroup allocators\n+*/\n template<typename _Alloc>\n   struct __alloc_traits\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -66,6 +107,27 @@ template<typename _Alloc>\n     using _Base_type::construct;\n     using _Base_type::destroy;\n \n+  private:\n+    template<typename _Ptr>\n+      struct __is_custom_pointer\n+      : std::integral_constant<bool, std::is_same<pointer, _Ptr>::value\n+                                     && !std::is_pointer<_Ptr>::value>\n+      { };\n+\n+  public:\n+    template<typename _Ptr, typename... _Args>\n+      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type\n+      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)\n+      {\n+\t_Base_type::construct(__a, std::addressof(*__p),\n+\t\t\t      std::forward<_Args>(__args)...);\n+      }\n+\n+    template<typename _Ptr>\n+      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type\n+      destroy(_Alloc& __a, _Ptr __p)\n+      { _Base_type::destroy(__a, std::addressof(*__p)); }\n+\n     static _Alloc _S_select_on_copy(const _Alloc& __a)\n     { return _Base_type::select_on_container_copy_construction(__a); }\n \n@@ -81,6 +143,19 @@ template<typename _Alloc>\n     static constexpr bool _S_propagate_on_swap()\n     { return _Base_type::propagate_on_container_swap::value; }\n \n+    static constexpr bool _S_always_equal()\n+    { return __allocator_always_compares_equal<_Alloc>::value; }\n+\n+    static constexpr bool _S_nothrow_move()\n+    { return _S_propagate_on_move_assign() || _S_always_equal(); }\n+\n+    static constexpr bool _S_nothrow_swap()\n+    {\n+      using std::swap;\n+      return !_S_propagate_on_swap()\n+       \t|| noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));\n+    }\n+\n #else\n \n     typedef typename _Alloc::pointer                pointer;"}]}