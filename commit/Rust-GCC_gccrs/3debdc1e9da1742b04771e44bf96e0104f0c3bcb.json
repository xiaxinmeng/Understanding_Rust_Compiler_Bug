{"sha": "3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RlYmRjMWU5ZGExNzQyYjA0NzcxZTQ0YmY5NmUwMTA0ZjBjM2JjYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-08-28T20:12:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-08-28T20:12:57Z"}, "message": "expmed.c (store_bit_field_1): Be prepared for movstrict expander to fail.\n\n\n\t* expmed.c (store_bit_field_1): Be prepared for movstrict expander to fail.\n\t* predict.c (always_optimize_for_size_p): Rename to ...\n\t(optimize_function_for_size): ... this one; make extern.\n\t(optimize_function_for_speed_p): New.\n\t(optimize_bb_for_size_p, optimize_bb_for_size_p,\n\toptimize_edge_for_size_p,optimize_edge_for_size_p,\n\toptimize_insn_for_size_p, optimize_insn_for_size_p): Update.\n\t* basic-block.h (optimize_function_for_size_p,\n\toptimize_function_for_speed_p): Declare.\n\t* i386.md (optimize_size checks): Replace them by appropriate predicate.\n\t(standard_80387_constant_p, ix86_compute_frame_layout,\n\tix86_expand_epilogue, ix86_decompose_address,\n\tprint_operand, emit_i387_cw_initialization,\n\tinline_memory_move_cost, ix86_pad_returns,\n\tix86_reorg): Replace optimize_size checks.\n\nFrom-SVN: r139737", "tree": {"sha": "8c6d11ca056bf4f2369b1efc79b5526d46a6430d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c6d11ca056bf4f2369b1efc79b5526d46a6430d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/comments", "author": null, "committer": null, "parents": [{"sha": "eef302d277ea42968569a454ed89ba5c236fe156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef302d277ea42968569a454ed89ba5c236fe156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eef302d277ea42968569a454ed89ba5c236fe156"}], "stats": {"total": 570, "additions": 319, "deletions": 251}, "files": [{"sha": "7ab08acd85b36529c918ae33c177d4c0ca277cb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "patch": "@@ -1,3 +1,21 @@\n+2008-08-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* expmed.c (store_bit_field_1): Be prepared for movstrict expander to fail.\n+\t* predict.c (always_optimize_for_size_p): Rename to ...\n+\t(optimize_function_for_size): ... this one; make extern.\n+\t(optimize_function_for_speed_p): New.\n+\t(optimize_bb_for_size_p, optimize_bb_for_size_p,\n+\toptimize_edge_for_size_p,optimize_edge_for_size_p,\n+\toptimize_insn_for_size_p, optimize_insn_for_size_p): Update.\n+\t* basic-block.h (optimize_function_for_size_p,\n+\toptimize_function_for_speed_p): Declare.\n+\t* i386.md (optimize_size checks): Replace them by appropriate predicate.\n+\t(standard_80387_constant_p, ix86_compute_frame_layout,\n+\tix86_expand_epilogue, ix86_decompose_address,\n+\tprint_operand, emit_i387_cw_initialization,\n+\tinline_memory_move_cost, ix86_pad_returns,\n+\tix86_reorg): Replace optimize_size checks.\n+\n 2008-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* rtl.h (simplify_subreg_regno): Declare."}, {"sha": "c3cb76bd79bf286f6b32d755f2bf120f8b46cd50", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "patch": "@@ -837,6 +837,8 @@ extern bool optimize_edge_for_size_p (edge);\n extern bool optimize_edge_for_speed_p (edge);\n extern bool optimize_insn_for_size_p (void);\n extern bool optimize_insn_for_speed_p (void);\n+extern bool optimize_function_for_size_p (struct function *);\n+extern bool optimize_function_for_speed_p (struct function *);\n extern bool gimple_predicted_by_p (const_basic_block, enum br_predictor);\n extern bool rtl_predicted_by_p (const_basic_block, enum br_predictor);\n extern void gimple_predict_edge (edge, enum br_predictor, int);"}, {"sha": "9ef95b503ec4fda8d334647b4529e653af6293b7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "patch": "@@ -6843,7 +6843,7 @@ standard_80387_constant_p (rtx x)\n   /* For XFmode constants, try to find a special 80387 instruction when\n      optimizing for size or on those CPUs that benefit from them.  */\n   if (mode == XFmode\n-      && (optimize_size || TARGET_EXT_80387_CONSTANTS))\n+      && (optimize_function_for_size_p (cfun) || TARGET_EXT_80387_CONSTANTS))\n     {\n       int i;\n \n@@ -7429,7 +7429,7 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n      Recompute the value as needed.  Do not recompute when amount of registers\n      didn't change as reload does multiple calls to the function and does not\n      expect the decision to change within single iteration.  */\n-  if (!optimize_size\n+  if (!optimize_function_for_size_p (cfun)\n       && cfun->machine->use_fast_prologue_epilogue_nregs != frame->nregs)\n     {\n       int count = frame->nregs;\n@@ -8176,7 +8176,7 @@ ix86_expand_epilogue (int style)\n \t\t\t\t\t    + frame.nregs * UNITS_PER_WORD),\n \t\t\t\t   style);\n       /* If not an i386, mov & pop is faster than \"leave\".  */\n-      else if (TARGET_USE_LEAVE || optimize_size\n+      else if (TARGET_USE_LEAVE || optimize_function_for_size_p (cfun)\n \t       || !cfun->machine->use_fast_prologue_epilogue)\n \temit_insn ((*ix86_gen_leave) ());\n       else\n@@ -8435,8 +8435,10 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n     disp = const0_rtx;\n \n   /* Special case: on K6, [%esi] makes the instruction vector decoded.\n-     Avoid this by transforming to [%esi+0].  */\n-  if (TARGET_K6 && !optimize_size\n+     Avoid this by transforming to [%esi+0].\n+     Reload calls address legitimization without cfun defined, so we need\n+     to test cfun for being non-NULL. */\n+  if (TARGET_K6 && cfun && optimize_function_for_speed_p (cfun)\n       && base_reg && !index_reg && !disp\n       && REG_P (base_reg)\n       && REGNO_REG_CLASS (REGNO (base_reg)) == SIREG)\n@@ -10736,7 +10738,8 @@ print_operand (FILE *file, rtx x, int code)\n \t  {\n \t    rtx x;\n \n-\t    if (!optimize || optimize_size || !TARGET_BRANCH_PREDICTION_HINTS)\n+\t    if (!optimize\n+\t        || optimize_function_for_size_p (cfun) || !TARGET_BRANCH_PREDICTION_HINTS)\n \t      return;\n \n \t    x = find_reg_note (current_output_insn, REG_BR_PROB, 0);\n@@ -11503,7 +11506,8 @@ emit_i387_cw_initialization (int mode)\n   emit_insn (gen_x86_fnstcw_1 (stored_mode));\n   emit_move_insn (reg, copy_rtx (stored_mode));\n \n-  if (TARGET_64BIT || TARGET_PARTIAL_REG_STALL || optimize_size)\n+  if (TARGET_64BIT || TARGET_PARTIAL_REG_STALL\n+      || optimize_function_for_size_p (cfun))\n     {\n       switch (mode)\n \t{\n@@ -24914,7 +24918,8 @@ inline_memory_move_cost (enum machine_mode mode, enum reg_class regclass,\n \t  {\n \t    if (!in)\n \t      return ix86_cost->int_store[0];\n-\t    if (TARGET_PARTIAL_REG_DEPENDENCY && !optimize_size)\n+\t    if (TARGET_PARTIAL_REG_DEPENDENCY\n+\t        && optimize_function_for_speed_p (cfun))\n \t      cost = ix86_cost->movzbl_load;\n \t    else\n \t      cost = ix86_cost->int_load[0];\n@@ -26150,9 +26155,11 @@ ix86_pad_returns (void)\n static void\n ix86_reorg (void)\n {\n-  if (TARGET_PAD_RETURNS && optimize && !optimize_size)\n+  if (TARGET_PAD_RETURNS && optimize\n+      && optimize_function_for_speed_p (cfun))\n     ix86_pad_returns ();\n-  if (TARGET_FOUR_JUMP_LIMIT && optimize && !optimize_size)\n+  if (TARGET_FOUR_JUMP_LIMIT && optimize\n+      && optimize_function_for_speed_p (cfun))\n     ix86_avoid_jump_misspredicts ();\n }\n "}, {"sha": "d952847b2668a7f4528280dfcf14e8eb0c863b72", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 256, "deletions": 229, "changes": 485, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "patch": "@@ -1236,7 +1236,7 @@\n \t       [(match_operand:X87MODEI12 2 \"memory_operand\" \"m\")]))]\n \t  UNSPEC_FNSTSW))]\n   \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n-   && (TARGET_USE_<MODE>MODE_FIOP || optimize_size)\n+   && (TARGET_USE_<MODE>MODE_FIOP || optimize_function_for_size_p (cfun))\n    && (GET_MODE (operands [3]) == GET_MODE (operands[1]))\"\n   \"* return output_fp_compare (insn, operands, 0, 0);\"\n   [(set_attr \"type\" \"multi\")\n@@ -1253,7 +1253,7 @@\n    (clobber (match_operand:HI 0 \"register_operand\" \"=a\"))]\n   \"X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n    && TARGET_SAHF && !TARGET_CMOVE\n-   && (TARGET_USE_<MODE>MODE_FIOP || optimize_size)\n+   && (TARGET_USE_<MODE>MODE_FIOP || optimize_function_for_size_p (cfun))\n    && (GET_MODE (operands [3]) == GET_MODE (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -1665,7 +1665,7 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(ne (symbol_ref \"optimize_size\") (const_int 0))\n+     (cond [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\") (const_int 0))\n \t      (const_string \"imov\")\n \t    (and (eq_attr \"alternative\" \"0\")\n \t\t (ior (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n@@ -1733,7 +1733,7 @@\n \t(match_operand:HI 1 \"register_operand\" \"+r\"))\n    (set (match_dup 1)\n \t(match_dup 0))]\n-  \"!TARGET_PARTIAL_REG_STALL || optimize_size\"\n+  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"xchg{l}\\t%k1, %k0\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"SI\")\n@@ -1757,8 +1757,10 @@\n (define_expand \"movstricthi\"\n   [(set (strict_low_part (match_operand:HI 0 \"nonimmediate_operand\" \"\"))\n \t(match_operand:HI 1 \"general_operand\" \"\"))]\n-  \"! TARGET_PARTIAL_REG_STALL || optimize_size\"\n+  \"\"\n {\n+  if (TARGET_PARTIAL_REG_STALL && optimize_function_for_speed_p (cfun))\n+    FAIL;\n   /* Don't generate memory->memory moves, go through a register */\n   if (MEM_P (operands[0]) && MEM_P (operands[1]))\n     operands[1] = force_reg (HImode, operands[1]);\n@@ -1767,7 +1769,7 @@\n (define_insn \"*movstricthi_1\"\n   [(set (strict_low_part (match_operand:HI 0 \"nonimmediate_operand\" \"+rm,r\"))\n \t(match_operand:HI 1 \"general_operand\" \"rn,m\"))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"mov{w}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imov\")\n@@ -1841,7 +1843,7 @@\n      (cond [(and (eq_attr \"alternative\" \"5\")\n \t\t (not (match_operand:QI 1 \"aligned_operand\" \"\")))\n \t      (const_string \"imovx\")\n-\t    (ne (symbol_ref \"optimize_size\") (const_int 0))\n+\t    (ne (symbol_ref \"optimize_function_for_size_p (cfun)\") (const_int 0))\n \t      (const_string \"imov\")\n \t    (and (eq_attr \"alternative\" \"3\")\n \t\t (ior (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n@@ -1868,7 +1870,7 @@\n \t\t  (and (eq_attr \"alternative\" \"0,1\")\n \t\t       (and (ne (symbol_ref \"TARGET_PARTIAL_REG_DEPENDENCY\")\n \t\t\t\t(const_int 0))\n-\t\t\t    (and (eq (symbol_ref \"optimize_size\")\n+\t\t\t    (and (eq (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t\t\t     (const_int 0))\n \t\t\t    \t (eq (symbol_ref \"TARGET_PARTIAL_REG_STALL\")\n \t\t\t\t     (const_int 0))))))\n@@ -1889,7 +1891,7 @@\n \t(match_operand:QI 1 \"register_operand\" \"+r\"))\n    (set (match_dup 1)\n \t(match_dup 0))]\n-  \"!TARGET_PARTIAL_REG_STALL || optimize_size\"\n+  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"xchg{l}\\t%k1, %k0\"\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"SI\")\n@@ -1913,8 +1915,10 @@\n (define_expand \"movstrictqi\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"\"))\n \t(match_operand:QI 1 \"general_operand\" \"\"))]\n-  \"! TARGET_PARTIAL_REG_STALL || optimize_size\"\n+  \"\"\n {\n+  if (TARGET_PARTIAL_REG_STALL && optimize_function_for_speed_p (cfun))\n+    FAIL;\n   /* Don't generate memory->memory moves, go through a register.  */\n   if (MEM_P (operands[0]) && MEM_P (operands[1]))\n     operands[1] = force_reg (QImode, operands[1]);\n@@ -1923,7 +1927,7 @@\n (define_insn \"*movstrictqi_1\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n \t(match_operand:QI 1 \"general_operand\" \"*qn,m\"))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"mov{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imov\")\n@@ -2573,7 +2577,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n \t(cond [(ior (eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n-\t\t    (ne (symbol_ref \"optimize_size\") (const_int 0)))\n+\t\t    (ne (symbol_ref \"optimize_function_for_size_p (cfun)\") (const_int 0)))\n \t\t (const_string \"V4SF\")\n \t       (and (eq_attr \"alternative\" \"2\")\n \t\t    (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n@@ -2625,15 +2629,15 @@\n    (set (attr \"mode\")\n         (cond [(eq_attr \"alternative\" \"2,3\")\n \t\t (if_then_else\n-\t\t   (ne (symbol_ref \"optimize_size\")\n+\t\t   (ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t       (const_int 0))\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"TI\"))\n \t       (eq_attr \"alternative\" \"4\")\n \t\t (if_then_else\n \t\t   (ior (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n \t\t\t    (const_int 0))\n-\t\t\t(ne (symbol_ref \"optimize_size\")\n+\t\t\t(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t\t    (const_int 0)))\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"TI\"))]\n@@ -2728,7 +2732,7 @@\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n-       || (!TARGET_SSE_MATH && optimize_size\n+       || (!TARGET_SSE_MATH && optimize_function_for_size_p (cfun)\n \t   && standard_80387_constant_p (operands[1]))\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], SFmode))\"\n@@ -2790,7 +2794,7 @@\n \t\t\t    \t (const_int 0))\n \t\t\t     (ne (symbol_ref \"TARGET_SSE2\")\n \t\t\t\t (const_int 0)))\n-\t\t\t(eq (symbol_ref \"optimize_size\")\n+\t\t\t(eq (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t\t    (const_int 0)))\n \t\t   (const_string \"TI\")\n \t\t   (const_string \"V4SF\"))\n@@ -2892,14 +2896,16 @@\n \t(match_operand:DF 1 \"general_operand\"\n \t\t\t\"fm,f,G,*roF,*Fr,C   ,Y2*x,mY2*x,Y2*x\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && ((optimize_size || !TARGET_INTEGER_DFMODE_MOVES) && !TARGET_64BIT)\n+   && ((optimize_function_for_size_p (cfun)\n+       || !TARGET_INTEGER_DFMODE_MOVES) && !TARGET_64BIT)\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n-       || (!(TARGET_SSE2 && TARGET_SSE_MATH) && optimize_size\n+       || (!(TARGET_SSE2 && TARGET_SSE_MATH)\n+           && optimize_function_for_size_p (cfun)\n            && !memory_operand (operands[0], DFmode)\n \t   && standard_80387_constant_p (operands[1]))\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n-       || ((optimize_size\n+       || ((optimize_function_for_size_p (cfun)\n             || !TARGET_MEMORY_MISMATCH_STALL\n \t    || reload_in_progress || reload_completed)\n  \t   && memory_operand (operands[0], DFmode)))\"\n@@ -2999,7 +3005,7 @@\n \n \t       /* xorps is one byte shorter.  */\n \t       (eq_attr \"alternative\" \"5\")\n-\t\t (cond [(ne (symbol_ref \"optimize_size\")\n+\t\t (cond [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t\t    (const_int 0))\n \t\t\t  (const_string \"V4SF\")\n \t\t\t(ne (symbol_ref \"TARGET_SSE_LOAD0_BY_PXOR\")\n@@ -3015,7 +3021,7 @@\n \t\t  movaps encodes one byte shorter.  */\n \t       (eq_attr \"alternative\" \"6\")\n \t\t (cond\n-\t\t   [(ne (symbol_ref \"optimize_size\")\n+\t\t   [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t        (const_int 0))\n \t\t      (const_string \"V4SF\")\n \t\t    (ne (symbol_ref \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n@@ -3043,7 +3049,8 @@\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n-       || (!(TARGET_SSE2 && TARGET_SSE_MATH) && optimize_size\n+       || (!(TARGET_SSE2 && TARGET_SSE_MATH)\n+           && optimize_function_for_size_p (cfun)\n \t   && standard_80387_constant_p (operands[1]))\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], DFmode))\"\n@@ -3132,7 +3139,7 @@\n \n \t       /* xorps is one byte shorter.  */\n \t       (eq_attr \"alternative\" \"5\")\n-\t\t (cond [(ne (symbol_ref \"optimize_size\")\n+\t\t (cond [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t\t    (const_int 0))\n \t\t\t  (const_string \"V4SF\")\n \t\t\t(ne (symbol_ref \"TARGET_SSE_LOAD0_BY_PXOR\")\n@@ -3148,7 +3155,7 @@\n \t\t  movaps encodes one byte shorter.  */\n \t       (eq_attr \"alternative\" \"6\")\n \t\t (cond\n-\t\t   [(ne (symbol_ref \"optimize_size\")\n+\t\t   [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t        (const_int 0))\n \t\t      (const_string \"V4SF\")\n \t\t    (ne (symbol_ref \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n@@ -3174,10 +3181,12 @@\n \t(match_operand:DF 1 \"general_operand\"\n \t\t\"fm,f,G,roF,Fr,C   ,Y2*x,m   ,Y2*x\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n-   && !optimize_size && TARGET_INTEGER_DFMODE_MOVES\n+   && optimize_function_for_speed_p (cfun)\n+   && TARGET_INTEGER_DFMODE_MOVES\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n-       || (!(TARGET_SSE2 && TARGET_SSE_MATH) && optimize_size\n+       || (!(TARGET_SSE2 && TARGET_SSE_MATH)\n+           && optimize_function_for_size_p (cfun)\n \t   && standard_80387_constant_p (operands[1]))\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], DFmode))\"\n@@ -3250,7 +3259,7 @@\n \n \t       /* xorps is one byte shorter.  */\n \t       (eq_attr \"alternative\" \"5\")\n-\t\t (cond [(ne (symbol_ref \"optimize_size\")\n+\t\t (cond [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t\t    (const_int 0))\n \t\t\t  (const_string \"V4SF\")\n \t\t\t(ne (symbol_ref \"TARGET_SSE_LOAD0_BY_PXOR\")\n@@ -3266,7 +3275,7 @@\n \t\t  movaps encodes one byte shorter.  */\n \t       (eq_attr \"alternative\" \"6\")\n \t\t (cond\n-\t\t   [(ne (symbol_ref \"optimize_size\")\n+\t\t   [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t        (const_int 0))\n \t\t      (const_string \"V4SF\")\n \t\t    (ne (symbol_ref \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n@@ -3331,7 +3340,7 @@\n (define_insn \"*pushxf_nointeger\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=X,X,X\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f,Fo,*r\"))]\n-  \"optimize_size\"\n+  \"optimize_function_for_size_p (cfun)\"\n {\n   /* This insn should be already split before reg-stack.  */\n   gcc_unreachable ();\n@@ -3343,7 +3352,7 @@\n (define_insn \"*pushxf_integer\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f,ro\"))]\n-  \"!optimize_size\"\n+  \"optimize_function_for_speed_p (cfun)\"\n {\n   /* This insn should be already split before reg-stack.  */\n   gcc_unreachable ();\n@@ -3374,10 +3383,10 @@\n (define_insn \"*movxf_nointeger\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,*r,o\")\n \t(match_operand:XF 1 \"general_operand\" \"fm,f,G,*roF,F*r\"))]\n-  \"optimize_size\n+  \"optimize_function_for_size_p (cfun)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (reload_in_progress || reload_completed\n-       || (optimize_size && standard_80387_constant_p (operands[1]))\n+       || standard_80387_constant_p (operands[1])\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], XFmode))\"\n {\n@@ -3402,10 +3411,9 @@\n (define_insn \"*movxf_integer\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,r,o\")\n \t(match_operand:XF 1 \"general_operand\" \"fm,f,G,roF,Fr\"))]\n-  \"!optimize_size\n+  \"optimize_function_for_speed_p (cfun)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (reload_in_progress || reload_completed\n-       || (optimize_size && standard_80387_constant_p (operands[1]))\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n        || memory_operand (operands[0], XFmode))\"\n {\n@@ -3468,15 +3476,15 @@\n    (set (attr \"mode\")\n         (cond [(eq_attr \"alternative\" \"0,2\")\n \t\t (if_then_else\n-\t\t   (ne (symbol_ref \"optimize_size\")\n+\t\t   (ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t       (const_int 0))\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"TI\"))\n \t       (eq_attr \"alternative\" \"1\")\n \t\t (if_then_else\n \t\t   (ior (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n \t\t\t    (const_int 0))\n-\t\t\t(ne (symbol_ref \"optimize_size\")\n+\t\t\t(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t\t    (const_int 0)))\n \t\t   (const_string \"V4SF\")\n \t\t   (const_string \"TI\"))]\n@@ -3639,7 +3647,7 @@\n      (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n {\n-  if (TARGET_ZERO_EXTEND_WITH_AND && !optimize_size)\n+  if (TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun))\n     {\n       operands[1] = force_reg (HImode, operands[1]);\n       emit_insn (gen_zero_extendhisi2_and (operands[0], operands[1]));\n@@ -3651,7 +3659,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n      (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_ZERO_EXTEND_WITH_AND && !optimize_size\"\n+  \"TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun)\"\n   \"#\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"SI\")])\n@@ -3660,15 +3668,17 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(zero_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed && TARGET_ZERO_EXTEND_WITH_AND && !optimize_size\"\n+  \"reload_completed && TARGET_ZERO_EXTEND_WITH_AND\n+   && optimize_function_for_speed_p (cfun)\"\n   [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (const_int 65535)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"\")\n \n (define_insn \"*zero_extendhisi2_movzwl\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n      (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))]\n-  \"!TARGET_ZERO_EXTEND_WITH_AND || optimize_size\"\n+  \"!TARGET_ZERO_EXTEND_WITH_AND\n+   || optimize_function_for_size_p (cfun)\"\n   \"movz{wl|x}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imovx\")\n    (set_attr \"mode\" \"SI\")])\n@@ -3685,7 +3695,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,?&q\")\n      (zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"0,qm\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_ZERO_EXTEND_WITH_AND && !optimize_size\"\n+  \"TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun)\"\n   \"#\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"HI\")])\n@@ -3694,7 +3704,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n      (zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"qm,0\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_ZERO_EXTEND_WITH_AND || optimize_size\"\n+  \"!TARGET_ZERO_EXTEND_WITH_AND || optimize_function_for_size_p (cfun)\"\n   \"#\"\n   [(set_attr \"type\" \"imovx,alu1\")\n    (set_attr \"mode\" \"HI\")])\n@@ -3703,7 +3713,8 @@\n (define_insn \"*zero_extendqihi2_movzbl\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n      (zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n-  \"(!TARGET_ZERO_EXTEND_WITH_AND || optimize_size) && reload_completed\"\n+  \"(!TARGET_ZERO_EXTEND_WITH_AND || optimize_function_for_speed_p (cfun))\n+   && reload_completed\"\n   \"movz{bl|x}\\t{%1, %k0|%k0, %1}\"\n   [(set_attr \"type\" \"imovx\")\n    (set_attr \"mode\" \"SI\")])\n@@ -3714,7 +3725,8 @@\n \t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\n-   && (!TARGET_ZERO_EXTEND_WITH_AND || optimize_size)\n+   && (!TARGET_ZERO_EXTEND_WITH_AND\n+       || optimize_function_for_size_p (cfun))\n    && (!REG_P (operands[1]) || ANY_QI_REG_P (operands[1]))\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))])\n@@ -3727,7 +3739,8 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\n    && ANY_QI_REG_P (operands[0])\n-   && (TARGET_ZERO_EXTEND_WITH_AND && !optimize_size)\n+   && (TARGET_ZERO_EXTEND_WITH_AND\n+       && optimize_function_for_speed_p (cfun))\n    && !reg_overlap_mentioned_p (operands[0], operands[1])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (strict_low_part (match_dup 2)) (match_dup 1))]\n@@ -3756,7 +3769,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,?&q\")\n      (zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"0,qm\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_ZERO_EXTEND_WITH_AND && !optimize_size\"\n+  \"TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun)\"\n   \"#\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"SI\")])\n@@ -3765,15 +3778,16 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n      (zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"qm,0\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_ZERO_EXTEND_WITH_AND || optimize_size\"\n+  \"!TARGET_ZERO_EXTEND_WITH_AND || optimize_function_for_size_p (cfun)\"\n   \"#\"\n   [(set_attr \"type\" \"imovx,alu1\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*zero_extendqisi2_movzbw\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n      (zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))]\n-  \"(!TARGET_ZERO_EXTEND_WITH_AND || optimize_size) && reload_completed\"\n+  \"(!TARGET_ZERO_EXTEND_WITH_AND || optimize_function_for_size_p (cfun))\n+   && reload_completed\"\n   \"movz{bl|x}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"imovx\")\n    (set_attr \"mode\" \"SI\")])\n@@ -3784,7 +3798,7 @@\n \t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\n-   && (!TARGET_ZERO_EXTEND_WITH_AND || optimize_size)\n+   && (!TARGET_ZERO_EXTEND_WITH_AND || optimize_function_for_size_p (cfun))\n    && (!REG_P (operands[1]) || ANY_QI_REG_P (operands[1]))\"\n   [(set (match_dup 0)\n \t(zero_extend:SI (match_dup 1)))])\n@@ -3798,7 +3812,7 @@\n   \"reload_completed\n    && ANY_QI_REG_P (operands[0])\n    && (ANY_QI_REG_P (operands[1]) || MEM_P (operands[1]))\n-   && (TARGET_ZERO_EXTEND_WITH_AND && !optimize_size)\n+   && (TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun))\n    && !reg_overlap_mentioned_p (operands[0], operands[1])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (strict_low_part (match_dup 2)) (match_dup 1))]\n@@ -3985,7 +3999,7 @@\n   emit_move_insn (operands[3], operands[1]);\n \n   /* Generate a cltd if possible and doing so it profitable.  */\n-  if ((optimize_size || TARGET_USE_CLTD)\n+  if ((optimize_function_for_size_p (cfun) || TARGET_USE_CLTD)\n       && true_regnum (operands[1]) == AX_REG\n       && true_regnum (operands[2]) == DX_REG)\n     {\n@@ -4016,7 +4030,7 @@\n     emit_move_insn (operands[3], operands[1]);\n \n   /* Generate a cltd if possible and doing so it profitable.  */\n-  if ((optimize_size || TARGET_USE_CLTD)\n+  if ((optimize_function_for_size_p (cfun) || TARGET_USE_CLTD)\n       && true_regnum (operands[3]) == AX_REG)\n     {\n       emit_insn (gen_ashrsi3_31 (operands[4], operands[3], GEN_INT (31)));\n@@ -4199,7 +4213,8 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n         (float_extend:DF\n \t  (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n-  \"(TARGET_USE_VECTOR_CONVERTS || TARGET_GENERIC) && !optimize_size\n+  \"(TARGET_USE_VECTOR_CONVERTS || TARGET_GENERIC)\n+   && optimize_insn_for_speed_p ()\n    && reload_completed && SSE_REG_P (operands[0])\"\n    [(set (match_dup 2)\n \t (float_extend:V2DF\n@@ -4338,7 +4353,8 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n         (float_truncate:SF\n \t  (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n-  \"(TARGET_USE_VECTOR_CONVERTS || TARGET_GENERIC) && !optimize_size\n+  \"(TARGET_USE_VECTOR_CONVERTS || TARGET_GENERIC)\n+   && optimize_insn_for_speed_p ()\n    && reload_completed && SSE_REG_P (operands[0])\"\n    [(set (match_dup 2)\n \t (vec_concat:V4SF\n@@ -4701,7 +4717,8 @@\n    (use (match_operand:<ssevecmode> 4  \"nonimmediate_operand\" \"m,x\"))\n    (clobber (match_scratch:<ssevecmode> 1 \"=x,&x\"))\n    (clobber (match_scratch:<ssevecmode> 2 \"=x,x\"))]\n-  \"!TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH && !optimize_size\"\n+  \"!TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\n+   && optimize_function_for_speed_p (cfun)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -4763,7 +4780,7 @@\n   [(match_scratch:DF 2 \"Y2\")\n    (set (match_operand:SSEMODEI24 0 \"register_operand\" \"\")\n \t(fix:SSEMODEI24 (match_operand:DF 1 \"memory_operand\" \"\")))]\n-  \"TARGET_AVOID_VECTOR_DECODE && !optimize_size\"\n+  \"TARGET_AVOID_VECTOR_DECODE && optimize_insn_for_speed_p ()\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (fix:SSEMODEI24 (match_dup 2)))]\n   \"\")\n@@ -4772,7 +4789,7 @@\n   [(match_scratch:SF 2 \"x\")\n    (set (match_operand:SSEMODEI24 0 \"register_operand\" \"\")\n \t(fix:SSEMODEI24 (match_operand:SF 1 \"memory_operand\" \"\")))]\n-  \"TARGET_AVOID_VECTOR_DECODE && !optimize_size\"\n+  \"TARGET_AVOID_VECTOR_DECODE && optimize_insn_for_speed_p ()\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (fix:SSEMODEI24 (match_dup 2)))]\n   \"\")\n@@ -5115,9 +5132,11 @@\n     || ((<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n \t&& SSE_FLOAT_MODE_P (<X87MODEF:MODE>mode) && TARGET_SSE_MATH\n \t&& ((<SSEMODEI24:MODE>mode == SImode\n-\t     && TARGET_SSE2 && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n+\t     && TARGET_SSE2 && TARGET_USE_VECTOR_CONVERTS\n+\t     && optimize_function_for_speed_p (cfun)\n \t     && flag_trapping_math)\n-\t    || !(TARGET_INTER_UNIT_CONVERSIONS || optimize_size))))\n+\t    || !(TARGET_INTER_UNIT_CONVERSIONS\n+\t         || optimize_function_for_size_p (cfun)))))\n    && !(reload_completed || reload_in_progress)\"\n   \"#\"\n   \"&& 1\"\n@@ -5130,7 +5149,7 @@\n      by passing DImode value through XMM registers.  */\n   if (<SSEMODEI24:MODE>mode == DImode && !TARGET_64BIT \n       && TARGET_80387 && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES \n-      && !optimize_size)\n+      && optimize_function_for_speed_p (cfun))\n     {\n       emit_insn (gen_floatdi<X87MODEF:mode>2_i387_with_xmm (operands[0],\n \t\t\t\t\t\t\t    operands[1],\n@@ -5145,7 +5164,7 @@\n \t  (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r,r,m,!x\")))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"=X,m,m,X,m\"))]\n   \"TARGET_SSE2 && TARGET_MIX_SSE_I387\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\"\n+   && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\"\n   \"#\"\n   [(set_attr \"type\" \"fmov,multi,sseicvt,sseicvt,sseicvt\")\n    (set_attr \"mode\" \"<MODE>,<MODE>,<MODE>,<MODE>,<ssevecmode>\")\n@@ -5158,7 +5177,7 @@\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,x\")\n \t(float:MODEF (match_operand:SI 1 \"memory_operand\" \"m,m\")))]\n   \"TARGET_SSE2 && TARGET_MIX_SSE_I387\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\"\n+   && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\"\n   \"@\n    fild%z1\\t%1\n    #\"\n@@ -5204,7 +5223,7 @@\n    (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n   \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n-   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\n+   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\n    && reload_completed\n    && (SSE_REG_P (operands[0])\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -5219,7 +5238,7 @@\n \t  (match_operand:SSEMODEI24 1 \"nonimmediate_operand\" \"m,r,m\")))]\n   \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n-   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n+   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\"\n   \"@\n    fild%z1\\t%1\n    %vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\n@@ -5238,7 +5257,7 @@\n \t  (match_operand:SSEMODEI24 1 \"memory_operand\" \"m,m\")))]\n   \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_MIX_SSE_I387\n-   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n+   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\"\n   \"@\n    fild%z1\\t%1\n    %vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n@@ -5255,7 +5274,7 @@\n \t  (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,!x\")))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"=m,X,m\"))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\"\n+   && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\"\n   \"#\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"<MODE>,<MODE>,<ssevecmode>\")\n@@ -5267,7 +5286,7 @@\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n \t(float:MODEF (match_operand:SI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\"\n+   && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\"\n   \"#\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"<MODE>\")\n@@ -5280,7 +5299,7 @@\n \t(float:MODEF (match_operand:SI 1 \"register_operand\" \"\")))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"\"))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n+   && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n    && reload_completed\n    && (SSE_REG_P (operands[0])\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -5321,7 +5340,7 @@\n \t(float:MODEF (match_operand:SI 1 \"memory_operand\" \"\")))\n    (clobber (match_operand:SI 2 \"memory_operand\" \"\"))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n+   && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n    && reload_completed\n    && (SSE_REG_P (operands[0])\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -5343,7 +5362,7 @@\n   [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n \t(float:MODEF (match_operand:SI 1 \"register_operand\" \"\")))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n+   && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n    && reload_completed\n    && (SSE_REG_P (operands[0])\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -5375,7 +5394,7 @@\n   [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n \t(float:MODEF (match_operand:SI 1 \"memory_operand\" \"\")))]\n   \"TARGET_SSE2 && TARGET_SSE_MATH\n-   && TARGET_USE_VECTOR_CONVERTS && !optimize_size\n+   && TARGET_USE_VECTOR_CONVERTS && optimize_function_for_speed_p (cfun)\n    && reload_completed\n    && (SSE_REG_P (operands[0])\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -5413,7 +5432,7 @@\n \t  (match_operand:SSEMODEI24 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n-   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n+   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\"\n   \"%vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -5428,7 +5447,7 @@\n    (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n   \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n-   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\n+   && (TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\n    && reload_completed\n    && (SSE_REG_P (operands[0])\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -5442,7 +5461,7 @@\n \t  (match_operand:SSEMODEI24 1 \"memory_operand\" \"m\")))]\n   \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n-   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\"\n+   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\"\n   \"%vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -5457,7 +5476,7 @@\n    (clobber (match_operand:SSEMODEI24 2 \"memory_operand\" \"\"))]\n   \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n-   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_size)\n+   && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\n    && reload_completed\n    && (SSE_REG_P (operands[0])\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -5535,7 +5554,7 @@\n    (clobber (match_scratch:V4SI 4 \"=X,x\"))\n    (clobber (match_operand:DI 2 \"memory_operand\" \"=X,m\"))]\n   \"TARGET_80387 && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n-   && !TARGET_64BIT && !optimize_size\"\n+   && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"<X87MODEF:MODE>\")\n@@ -5549,7 +5568,7 @@\n    (clobber (match_scratch:V4SI 4 \"\"))\n    (clobber (match_operand:DI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n-   && !TARGET_64BIT && !optimize_size\n+   && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\n    && reload_completed\n    && FP_REG_P (operands[0])\"\n   [(set (match_dup 2) (match_dup 3))\n@@ -5573,7 +5592,7 @@\n    (clobber (match_scratch:V4SI 4 \"\"))\n    (clobber (match_operand:DI 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES\n-   && !TARGET_64BIT && !optimize_size\n+   && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\n    && reload_completed\n    && FP_REG_P (operands[0])\"\n   [(set (match_dup 0) (float:X87MODEF (match_dup 1)))]\n@@ -5938,7 +5957,7 @@\n \t      (match_operand 3 \"immediate_operand\" \"i\")))]\n   \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode\n     || (TARGET_64BIT && GET_MODE (operands[0]) == SImode))\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\n    && GET_MODE (operands[0]) == GET_MODE (operands[2])\n    && (GET_MODE (operands[0]) == GET_MODE (operands[3])\n@@ -5990,7 +6009,7 @@\n \t      (match_operand 3 \"nonmemory_operand\" \"ri\")))]\n   \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode\n     || (TARGET_64BIT && GET_MODE (operands[0]) == SImode))\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\n    && (GET_MODE (operands[0]) == GET_MODE (operands[3])\n        || GET_MODE (operands[3]) == VOIDmode)\"\n@@ -6040,7 +6059,7 @@\n \t      (match_operand 4 \"immediate_operand\" \"i\")))]\n   \"(GET_MODE (operands[0]) == QImode || GET_MODE (operands[0]) == HImode\n     || (TARGET_64BIT && GET_MODE (operands[0]) == SImode))\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && GET_MODE (operands[0]) == GET_MODE (operands[1])\n    && GET_MODE (operands[0]) == GET_MODE (operands[3])\"\n   \"#\"\n@@ -7137,7 +7156,7 @@\n \t(plus:QI (match_dup 0)\n \t\t (match_operand:QI 1 \"general_operand\" \"qn,qnm\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -7750,7 +7769,7 @@\n \t(minus:QI (match_dup 0)\n \t\t  (match_operand:QI 1 \"general_operand\" \"qn,qm\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"sub{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n@@ -8432,7 +8451,7 @@\n    (set (match_operand:DI 1 \"register_operand\" \"=&d,&d\")\n \t(mod:DI (match_dup 2) (match_dup 3)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && !optimize_size && !TARGET_USE_CLTD\"\n+  \"TARGET_64BIT && optimize_function_for_speed_p (cfun) && !TARGET_USE_CLTD\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -8443,7 +8462,7 @@\n    (set (match_operand:DI 1 \"register_operand\" \"=&d\")\n \t(mod:DI (match_dup 2) (match_dup 3)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && (optimize_size || TARGET_USE_CLTD)\"\n+  \"TARGET_64BIT && (optimize_function_for_size_p (cfun) || TARGET_USE_CLTD)\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -8479,7 +8498,7 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n   /* Avoid use of cltd in favor of a mov+shift.  */\n-  if (!TARGET_USE_CLTD && !optimize_size)\n+  if (!TARGET_USE_CLTD && optimize_function_for_speed_p (cfun))\n     {\n       if (true_regnum (operands[1]))\n         emit_move_insn (operands[0], operands[1]);\n@@ -8515,7 +8534,7 @@\n    (set (match_operand:SI 1 \"register_operand\" \"=&d,&d\")\n \t(mod:SI (match_dup 2) (match_dup 3)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!optimize_size && !TARGET_USE_CLTD\"\n+  \"optimize_function_for_speed_p (cfun) && !TARGET_USE_CLTD\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -8526,7 +8545,7 @@\n    (set (match_operand:SI 1 \"register_operand\" \"=&d\")\n \t(mod:SI (match_dup 2) (match_dup 3)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"optimize_size || TARGET_USE_CLTD\"\n+  \"optimize_function_for_size_p (cfun) || TARGET_USE_CLTD\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -8562,7 +8581,7 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n   /* Avoid use of cltd in favor of a mov+shift.  */\n-  if (!TARGET_USE_CLTD && !optimize_size)\n+  if (!TARGET_USE_CLTD && optimize_function_for_speed_p (cfun))\n     {\n       if (true_regnum (operands[1]))\n         emit_move_insn (operands[0], operands[1]);\n@@ -9165,7 +9184,7 @@\n \t(and (match_dup 0)\n \t     (const_int -65536)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"optimize_size || (TARGET_FAST_PREFIX && !TARGET_PARTIAL_REG_STALL)\"\n+  \"optimize_function_for_size_p (cfun) || (TARGET_FAST_PREFIX && !TARGET_PARTIAL_REG_STALL)\"\n   [(set (strict_low_part (match_dup 1)) (const_int 0))]\n   \"operands[1] = gen_lowpart (HImode, operands[0]);\")\n \n@@ -9174,7 +9193,7 @@\n \t(and (match_dup 0)\n \t     (const_int -256)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(optimize_size || !TARGET_PARTIAL_REG_STALL) && reload_completed\"\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_REG_STALL) && reload_completed\"\n   [(set (strict_low_part (match_dup 1)) (const_int 0))]\n   \"operands[1] = gen_lowpart (QImode, operands[0]);\")\n \n@@ -9183,7 +9202,7 @@\n \t(and (match_dup 0)\n \t     (const_int -65281)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(optimize_size || !TARGET_PARTIAL_REG_STALL) && reload_completed\"\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_REG_STALL) && reload_completed\"\n   [(parallel [(set (zero_extract:SI (match_dup 0)\n \t\t\t\t    (const_int 8)\n \t\t\t\t    (const_int 8))\n@@ -9306,7 +9325,7 @@\n \t(and:QI (match_dup 0)\n \t\t(match_operand:QI 1 \"general_operand\" \"qn,qmn\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"and{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n@@ -9358,7 +9377,7 @@\n \t\t (const_int 0)))\n    (set (strict_low_part (match_dup 0))\n \t(and:QI (match_dup 0) (match_dup 1)))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCNOmode)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"and{b}\\t{%1, %0|%0, %1}\"\n@@ -9482,7 +9501,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n    \"reload_completed\n     && QI_REG_P (operands[0])\n-    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n     && !(~INTVAL (operands[2]) & ~(255 << 8))\n     && GET_MODE (operands[0]) != QImode\"\n   [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))\n@@ -9503,7 +9522,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n    \"reload_completed\n     && ANY_QI_REG_P (operands[0])\n-    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n     && !(~INTVAL (operands[2]) & ~255)\n     && !(INTVAL (operands[2]) & 128)\n     && GET_MODE (operands[0]) != QImode\"\n@@ -9726,7 +9745,7 @@\n \t(ior:QI (match_dup 0)\n \t\t(match_operand:QI 1 \"general_operand\" \"qmn,qn\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"or{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n@@ -9752,7 +9771,7 @@\n \t\t (const_int 0)))\n    (set (strict_low_part (match_dup 0))\n \t(ior:QI (match_dup 0) (match_dup 1)))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCNOmode)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"or{b}\\t{%1, %0|%0, %1}\"\n@@ -9771,7 +9790,7 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"iorqi_ext_0\"\n+(define_insn \"*iorqi_ext_0\"\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n@@ -9782,7 +9801,7 @@\n \t    (const_int 8))\n \t  (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n   \"or{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -9801,7 +9820,7 @@\n \t    (match_operand:QI 2 \"general_operand\" \"Qm\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n   \"or{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n@@ -9820,7 +9839,7 @@\n \t    (match_operand 2 \"ext_register_operand\" \"Q\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n   \"or{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n@@ -9838,7 +9857,7 @@\n \t  \t\t   (const_int 8)\n \t\t\t   (const_int 8))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n   \"ior{b}\\t{%h2, %h0|%h0, %h2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n@@ -9851,7 +9870,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n    \"reload_completed\n     && QI_REG_P (operands[0])\n-    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n     && !(INTVAL (operands[2]) & ~(255 << 8))\n     && GET_MODE (operands[0]) != QImode\"\n   [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))\n@@ -9872,7 +9891,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n    \"reload_completed\n     && ANY_QI_REG_P (operands[0])\n-    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n     && !(INTVAL (operands[2]) & ~255)\n     && (INTVAL (operands[2]) & 128)\n     && GET_MODE (operands[0]) != QImode\"\n@@ -10095,13 +10114,13 @@\n \t(xor:QI (match_dup 0)\n \t\t(match_operand:QI 1 \"general_operand\" \"qn,qmn\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"xor{b}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"xorqi_ext_0\"\n+(define_insn \"*xorqi_ext_0\"\n   [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n@@ -10112,7 +10131,7 @@\n \t    (const_int 8))\n \t  (match_operand 2 \"const_int_operand\" \"n\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n   \"xor{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -10131,7 +10150,7 @@\n \t    (match_operand:QI 2 \"general_operand\" \"Qm\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n   \"xor{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n@@ -10150,7 +10169,7 @@\n \t    (match_operand 2 \"ext_register_operand\" \"Q\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n   \"xor{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n@@ -10168,7 +10187,7 @@\n \t  \t\t   (const_int 8)\n \t\t\t   (const_int 8))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(!TARGET_PARTIAL_REG_STALL || optimize_size)\"\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n   \"xor{b}\\t{%h2, %h0|%h0, %h2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n@@ -10195,7 +10214,7 @@\n \t\t (const_int 0)))\n    (set (strict_low_part (match_dup 0))\n \t(xor:QI (match_dup 0) (match_dup 1)))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCNOmode)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"xor{b}\\t{%1, %0|%0, %1}\"\n@@ -10284,7 +10303,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n    \"reload_completed\n     && QI_REG_P (operands[0])\n-    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n     && !(INTVAL (operands[2]) & ~(255 << 8))\n     && GET_MODE (operands[0]) != QImode\"\n   [(parallel [(set (zero_extract:SI (match_dup 0) (const_int 8) (const_int 8))\n@@ -10305,7 +10324,7 @@\n    (clobber (reg:CC FLAGS_REG))]\n    \"reload_completed\n     && ANY_QI_REG_P (operands[0])\n-    && (!TARGET_PARTIAL_REG_STALL || optimize_size)\n+    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n     && !(INTVAL (operands[2]) & ~255)\n     && (INTVAL (operands[2]) & 128)\n     && GET_MODE (operands[0]) != QImode\"\n@@ -11193,7 +11212,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{q}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{q}\\t%0\";\n       else\n \treturn \"sal{q}\\t{%2, %0|%0, %2}\";\n@@ -11236,7 +11255,7 @@\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT\n-   && (optimize_size\n+   && (optimize_function_for_size_p (cfun)\n        || !TARGET_PARTIAL_FLAG_REG_STALL\n        || (operands[2] == const1_rtx\n \t   && (TARGET_SHIFT1\n@@ -11254,7 +11273,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{q}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{q}\\t%0\";\n       else\n \treturn \"sal{q}\\t{%2, %0|%0, %2}\";\n@@ -11278,7 +11297,7 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT\n-   && (optimize_size\n+   && (optimize_function_for_size_p (cfun)\n        || !TARGET_PARTIAL_FLAG_REG_STALL\n        || (operands[2] == const1_rtx\n \t   && (TARGET_SHIFT1\n@@ -11296,7 +11315,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{q}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{q}\\t%0\";\n       else\n \treturn \"sal{q}\\t{%2, %0|%0, %2}\";\n@@ -11433,7 +11452,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{l}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{l}\\t%0\";\n       else\n \treturn \"sal{l}\\t{%2, %0|%0, %2}\";\n@@ -11518,7 +11537,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{l}\\t{%b2, %k0|%k0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{l}\\t%k0\";\n       else\n \treturn \"sal{l}\\t{%2, %k0|%k0, %2}\";\n@@ -11562,7 +11581,7 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n-   \"(optimize_size\n+   \"(optimize_function_for_size_p (cfun)\n      || !TARGET_PARTIAL_FLAG_REG_STALL\n      || (operands[2] == const1_rtx\n \t && (TARGET_SHIFT1\n@@ -11580,7 +11599,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{l}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{l}\\t%0\";\n       else\n \treturn \"sal{l}\\t{%2, %0|%0, %2}\";\n@@ -11603,7 +11622,7 @@\n \t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"(optimize_size\n+  \"(optimize_function_for_size_p (cfun)\n     || !TARGET_PARTIAL_FLAG_REG_STALL\n     || (operands[2] == const1_rtx\n \t&& (TARGET_SHIFT1\n@@ -11621,7 +11640,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{l}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{l}\\t%0\";\n       else\n \treturn \"sal{l}\\t{%2, %0|%0, %2}\";\n@@ -11646,7 +11665,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashift:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_64BIT\n-   && (optimize_size\n+   && (optimize_function_for_size_p (cfun)\n        || !TARGET_PARTIAL_FLAG_REG_STALL\n        || (operands[2] == const1_rtx\n \t   && (TARGET_SHIFT1\n@@ -11664,7 +11683,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{l}\\t{%b2, %k0|%k0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{l}\\t%k0\";\n       else\n \treturn \"sal{l}\\t{%2, %k0|%k0, %2}\";\n@@ -11706,7 +11725,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{w}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{w}\\t%0\";\n       else\n \treturn \"sal{w}\\t{%2, %0|%0, %2}\";\n@@ -11742,7 +11761,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{w}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{w}\\t%0\";\n       else\n \treturn \"sal{w}\\t{%2, %0|%0, %2}\";\n@@ -11769,7 +11788,7 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:HI (match_dup 1) (match_dup 2)))]\n-  \"(optimize_size\n+  \"(optimize_function_for_size_p (cfun)\n     || !TARGET_PARTIAL_FLAG_REG_STALL\n     || (operands[2] == const1_rtx\n \t&& (TARGET_SHIFT1\n@@ -11787,7 +11806,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{w}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{w}\\t%0\";\n       else\n \treturn \"sal{w}\\t{%2, %0|%0, %2}\";\n@@ -11810,7 +11829,7 @@\n \t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"(optimize_size\n+  \"(optimize_function_for_size_p (cfun)\n     || !TARGET_PARTIAL_FLAG_REG_STALL\n     || (operands[2] == const1_rtx\n \t&& (TARGET_SHIFT1\n@@ -11828,7 +11847,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{w}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{w}\\t%0\";\n       else\n \treturn \"sal{w}\\t{%2, %0|%0, %2}\";\n@@ -11881,7 +11900,7 @@\n \t    return \"sal{b}\\t{%b2, %0|%0, %b2}\";\n \t}\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \t{\n \t  if (get_attr_mode (insn) == MODE_SI)\n \t    return \"sal{l}\\t%0\";\n@@ -11935,7 +11954,7 @@\n \t    return \"sal{b}\\t{%b2, %0|%0, %b2}\";\n \t}\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \t{\n \t  if (get_attr_mode (insn) == MODE_SI)\n \t    return \"sal{l}\\t%0\";\n@@ -11972,7 +11991,7 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashift:QI (match_dup 1) (match_dup 2)))]\n-  \"(optimize_size\n+  \"(optimize_function_for_size_p (cfun)\n     || !TARGET_PARTIAL_FLAG_REG_STALL\n     || (operands[2] == const1_rtx\n \t&& (TARGET_SHIFT1\n@@ -11990,7 +12009,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{b}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{b}\\t%0\";\n       else\n \treturn \"sal{b}\\t{%2, %0|%0, %2}\";\n@@ -12013,7 +12032,7 @@\n \t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"(optimize_size\n+  \"(optimize_function_for_size_p (cfun)\n     || !TARGET_PARTIAL_FLAG_REG_STALL\n     || (operands[2] == const1_rtx\n \t&& (TARGET_SHIFT1\n@@ -12031,7 +12050,7 @@\n       if (REG_P (operands[2]))\n \treturn \"sal{b}\\t{%b2, %0|%0, %b2}\";\n       else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_size))\n+\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{b}\\t%0\";\n       else\n \treturn \"sal{b}\\t{%2, %0|%0, %2}\";\n@@ -12142,7 +12161,7 @@\n \t\t     (match_operand:DI 2 \"const_int_operand\" \"i,i\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && INTVAL (operands[2]) == 63\n-   && (TARGET_USE_CLTD || optimize_size)\n+   && (TARGET_USE_CLTD || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"@\n    {cqto|cqo}\n@@ -12159,7 +12178,7 @@\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12192,7 +12211,7 @@\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t%0\"\n@@ -12210,7 +12229,7 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t%0\"\n@@ -12229,7 +12248,7 @@\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT\n-   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && (optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t{%2, %0|%0, %2}\"\n@@ -12244,7 +12263,7 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT\n-   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && (optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t{%2, %0|%0, %2}\"\n@@ -12326,12 +12345,20 @@\n   DONE;\n })\n \n-(define_insn \"ashrsi3_31\"\n+(define_expand \"ashrsi3_31\"\n+  [(parallel [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=*d,rm\")\n+\t           (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"*a,0\")\n+\t\t                (match_operand:SI 2 \"const_int_operand\" \"i,i\")))\n+              (clobber (reg:CC FLAGS_REG))])]\n+  \"\")\n+\n+(define_insn \"*ashrsi3_31\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=*d,rm\")\n \t(ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"*a,0\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"i,i\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"INTVAL (operands[2]) == 31 && (TARGET_USE_CLTD || optimize_size)\n+  \"INTVAL (operands[2]) == 31\n+   && (TARGET_USE_CLTD || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"@\n    {cltd|cdq}\n@@ -12347,7 +12374,7 @@\n \t(zero_extend:DI (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"*a,0\")\n \t\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"i,i\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && (TARGET_USE_CLTD || optimize_size)\n+  \"TARGET_64BIT && (TARGET_USE_CLTD || optimize_function_for_size_p (cfun))\n    && INTVAL (operands[2]) == 31\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"@\n@@ -12371,7 +12398,7 @@\n \t(ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12386,7 +12413,7 @@\n \t\t\t\t     (match_operand:QI 2 \"const1_operand\" \"\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12427,7 +12454,7 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%0\"\n@@ -12444,7 +12471,7 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%0\"\n@@ -12460,7 +12487,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashiftrt:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%k0\"\n@@ -12478,7 +12505,7 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t{%2, %0|%0, %2}\"\n@@ -12492,7 +12519,7 @@\n \t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t{%2, %0|%0, %2}\"\n@@ -12508,7 +12535,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashiftrt:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_64BIT\n-   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && (optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t{%2, %k0|%k0, %2}\"\n@@ -12527,7 +12554,7 @@\n \t(ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12559,7 +12586,7 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t%0\"\n@@ -12576,7 +12603,7 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t%0\"\n@@ -12594,7 +12621,7 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t{%2, %0|%0, %2}\"\n@@ -12608,7 +12635,7 @@\n \t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t{%2, %0|%0, %2}\"\n@@ -12627,7 +12654,7 @@\n \t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12641,8 +12668,8 @@\n \t(ashiftrt:QI (match_dup 0)\n \t\t     (match_operand:QI 1 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && (TARGET_SHIFT1 || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift1\")\n@@ -12668,7 +12695,7 @@\n \t(ashiftrt:QI (match_dup 0)\n \t\t     (match_operand:QI 1 \"nonmemory_operand\" \"I,c\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    sar{b}\\t{%1, %0|%0, %1}\n@@ -12687,7 +12714,7 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n@@ -12704,7 +12731,7 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n@@ -12722,7 +12749,7 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t{%2, %0|%0, %2}\"\n@@ -12736,7 +12763,7 @@\n \t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t{%2, %0|%0, %2}\"\n@@ -12827,7 +12854,7 @@\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12860,7 +12887,7 @@\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t%0\"\n@@ -12878,7 +12905,7 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t%0\"\n@@ -12897,7 +12924,7 @@\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT\n-   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && (optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t{%2, %0|%0, %2}\"\n@@ -12912,7 +12939,7 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT\n-   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && (optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t{%2, %0|%0, %2}\"\n@@ -12964,7 +12991,7 @@\n \t(lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -12979,7 +13006,7 @@\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -13021,7 +13048,7 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%0\"\n@@ -13038,7 +13065,7 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%0\"\n@@ -13054,7 +13081,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (zero_extend:DI (match_dup 1)) (match_dup 2)))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%k0\"\n@@ -13072,7 +13099,7 @@\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t{%2, %0|%0, %2}\"\n@@ -13086,7 +13113,7 @@\n \t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n         (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t{%2, %0|%0, %2}\"\n@@ -13102,7 +13129,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (zero_extend:DI (match_dup 1)) (match_dup 2)))]\n   \"TARGET_64BIT\n-   && (optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+   && (optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t{%2, %k0|%k0, %2}\"\n@@ -13121,7 +13148,7 @@\n \t(lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -13153,7 +13180,7 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t%0\"\n@@ -13170,7 +13197,7 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t%0\"\n@@ -13188,7 +13215,7 @@\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t{%2, %0|%0, %2}\"\n@@ -13202,7 +13229,7 @@\n \t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t{%2, %0|%0, %2}\"\n@@ -13221,7 +13248,7 @@\n \t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -13235,8 +13262,8 @@\n \t(lshiftrt:QI (match_dup 0)\n \t\t     (match_operand:QI 1 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift1\")\n    (set (attr \"length\")\n@@ -13261,7 +13288,7 @@\n \t(lshiftrt:QI (match_dup 0)\n \t\t     (match_operand:QI 1 \"nonmemory_operand\" \"I,c\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    shr{b}\\t{%1, %0|%0, %1}\n@@ -13280,7 +13307,7 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t%0\"\n@@ -13297,7 +13324,7 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t%0\"\n@@ -13315,7 +13342,7 @@\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t{%2, %0|%0, %2}\"\n@@ -13329,7 +13356,7 @@\n \t\t       (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n-  \"(optimize_size || !TARGET_PARTIAL_FLAG_REG_STALL)\n+  \"(optimize_function_for_size_p (cfun) || !TARGET_PARTIAL_FLAG_REG_STALL)\n    && ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t{%2, %0|%0, %2}\"\n@@ -13387,7 +13414,7 @@\n \t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ROTATE, DImode, operands)\"\n   \"rol{q}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n@@ -13420,7 +13447,7 @@\n \t(rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ROTATE, SImode, operands)\"\n   \"rol{l}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n@@ -13436,7 +13463,7 @@\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ROTATE, SImode, operands)\"\n   \"rol{l}\\t%k0\"\n   [(set_attr \"type\" \"rotate\")\n@@ -13479,7 +13506,7 @@\n \t(rotate:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ROTATE, HImode, operands)\"\n   \"rol{w}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n@@ -13522,8 +13549,8 @@\n \t(rotate:QI (match_dup 0)\n \t\t   (match_operand:QI 1 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\"\n   \"rol{b}\\t%0\"\n   [(set_attr \"type\" \"rotate1\")\n    (set (attr \"length\")\n@@ -13536,7 +13563,7 @@\n \t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t   (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ROTATE, QImode, operands)\"\n   \"rol{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n@@ -13550,7 +13577,7 @@\n \t(rotate:QI (match_dup 0)\n \t\t   (match_operand:QI 1 \"nonmemory_operand\" \"I,c\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    rol{b}\\t{%1, %0|%0, %1}\n@@ -13619,7 +13646,7 @@\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ROTATERT, DImode, operands)\"\n   \"ror{q}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n@@ -13652,7 +13679,7 @@\n \t(rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ROTATERT, SImode, operands)\"\n   \"ror{l}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n@@ -13668,7 +13695,7 @@\n \t\t       (match_operand:QI 2 \"const1_operand\" \"\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n-   && (TARGET_SHIFT1 || optimize_size)\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ROTATERT, SImode, operands)\"\n   \"ror{l}\\t%k0\"\n   [(set_attr \"type\" \"rotate\")\n@@ -13714,7 +13741,7 @@\n \t(rotatert:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ROTATERT, HImode, operands)\"\n   \"ror{w}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n@@ -13757,7 +13784,7 @@\n \t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(TARGET_SHIFT1 || optimize_size)\n+  \"(TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\n    && ix86_binary_operator_ok (ROTATERT, QImode, operands)\"\n   \"ror{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n@@ -13771,8 +13798,8 @@\n \t(rotatert:QI (match_dup 0)\n \t\t     (match_operand:QI 1 \"const1_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && (TARGET_SHIFT1 || optimize_size)\"\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n+   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun))\"\n   \"ror{b}\\t%0\"\n   [(set_attr \"type\" \"rotate1\")\n    (set (attr \"length\")\n@@ -13797,7 +13824,7 @@\n \t(rotatert:QI (match_dup 0)\n \t\t     (match_operand:QI 1 \"nonmemory_operand\" \"I,c\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n+  \"(! TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    ror{b}\\t{%1, %0|%0, %1}\n@@ -14015,7 +14042,7 @@\n \t    (const_int 1)\n \t    (match_operand:DI 1 \"nonmemory_operand\" \"rN\"))\n \t  (const_int 0)))]\n-  \"TARGET_64BIT && (TARGET_USE_BT || optimize_size)\"\n+  \"TARGET_64BIT && (TARGET_USE_BT || optimize_function_for_size_p (cfun))\"\n   \"bt{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")])\n \n@@ -14027,7 +14054,7 @@\n \t    (const_int 1)\n \t    (match_operand:SI 1 \"nonmemory_operand\" \"rN\"))\n \t  (const_int 0)))]\n-  \"TARGET_USE_BT || optimize_size\"\n+  \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n   \"bt{l}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")])\n \f\n@@ -14372,7 +14399,7 @@\n \t\t\t (const_int 0)])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n-  \"TARGET_64BIT && (TARGET_USE_BT || optimize_size)\"\n+  \"TARGET_64BIT && (TARGET_USE_BT || optimize_function_for_size_p (cfun))\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CCC FLAGS_REG)\n@@ -14404,7 +14431,7 @@\n \t\t\t     (match_operand:SI 3 \"const_int_operand\" \"n\")))])\n \t\t      (label_ref (match_operand 4 \"\" \"\"))\n \t\t      (pc)))]\n-  \"TARGET_64BIT && (TARGET_USE_BT || optimize_size)\n+  \"TARGET_64BIT && (TARGET_USE_BT || optimize_function_for_size_p (cfun))\n    && (INTVAL (operands[3]) & 0x3f) == 0x3f\"\n   \"#\"\n   \"&& 1\"\n@@ -14436,7 +14463,7 @@\n \t\t\t (const_int 0)])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n-  \"TARGET_USE_BT || optimize_size\"\n+  \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CCC FLAGS_REG)\n@@ -14468,7 +14495,7 @@\n \t\t\t     (match_operand:SI 3 \"const_int_operand\" \"n\")))])\n \t\t      (label_ref (match_operand 4 \"\" \"\"))\n \t\t      (pc)))]\n-  \"(TARGET_USE_BT || optimize_size)\n+  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n    && (INTVAL (operands[3]) & 0x1f) == 0x1f\"\n   \"#\"\n   \"&& 1\"\n@@ -14496,7 +14523,7 @@\n \t\t\t (const_int 0)])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n-  \"TARGET_USE_BT || optimize_size\"\n+  \"TARGET_USE_BT || optimize_function_for_size_p (cfun)\"\n   \"#\"\n   \"&& 1\"\n   [(set (reg:CCC FLAGS_REG)\n@@ -14532,7 +14559,7 @@\n \t     (const_int 0)])\n \t  (label_ref (match_operand 4 \"\" \"\"))\n \t  (pc)))]\n-  \"(TARGET_USE_BT || optimize_size)\n+  \"(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n    && (INTVAL (operands[3]) & 0x1f) == 0x1f\"\n   \"#\"\n   \"&& 1\"\n@@ -14746,7 +14773,7 @@\n    (clobber (reg:CCFP FLAGS_REG))\n    (clobber (match_scratch:HI 5 \"=a,a\"))]\n   \"X87_FLOAT_MODE_P (GET_MODE (operands[3]))\n-   && (TARGET_USE_<MODE>MODE_FIOP || optimize_size)\n+   && (TARGET_USE_<MODE>MODE_FIOP || optimize_function_for_size_p (cfun))\n    && GET_MODE (operands[1]) == GET_MODE (operands[3])\n    && !ix86_use_fcomi_compare (swap_condition (GET_CODE (operands[0])))\n    && ix86_fp_compare_mode (swap_condition (GET_CODE (operands[0]))) == CCFPmode\n@@ -15589,7 +15616,7 @@\n   [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+Q,r\"))\n \t(bswap:HI (match_dup 0)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_USE_XCHGB || optimize_size\"\n+  \"TARGET_USE_XCHGB || optimize_function_for_size_p (cfun)\"\n   \"@\n     xchg{b}\\t{%h0, %b0|%b0, %h0}\n     rol{w}\\t{$8, %0|%0, 8}\"\n@@ -16444,7 +16471,7 @@\n \t     (match_operand:X87MODEI12 1 \"nonimmediate_operand\" \"m,?r\"))\n \t   (match_operand:MODEF 2 \"register_operand\" \"0,0\")]))]\n   \"TARGET_80387 && !(SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH)\n-   && (TARGET_USE_<X87MODEI12:MODE>MODE_FIOP || optimize_size)\"\n+   && (TARGET_USE_<X87MODEI12:MODE>MODE_FIOP || optimize_function_for_size_p (cfun))\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n         (cond [(match_operand:MODEF 3 \"mult_operator\" \"\")\n@@ -16463,7 +16490,7 @@\n \t   (float:MODEF\n \t     (match_operand:X87MODEI12 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n   \"TARGET_80387 && !(SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH)\n-   && (TARGET_USE_<X87MODEI12:MODE>MODE_FIOP || optimize_size)\"\n+   && (TARGET_USE_<X87MODEI12:MODE>MODE_FIOP || optimize_function_for_size_p (cfun))\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n         (cond [(match_operand:MODEF 3 \"mult_operator\" \"\")\n@@ -16565,7 +16592,7 @@\n \t  [(float:XF\n \t     (match_operand:X87MODEI12 1 \"nonimmediate_operand\" \"m,?r\"))\n \t   (match_operand:XF 2 \"register_operand\" \"0,0\")]))]\n-  \"TARGET_80387 && (TARGET_USE_<MODE>MODE_FIOP || optimize_size)\"\n+  \"TARGET_80387 && (TARGET_USE_<MODE>MODE_FIOP || optimize_function_for_size_p (cfun))\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n         (cond [(match_operand:XF 3 \"mult_operator\" \"\")\n@@ -16583,7 +16610,7 @@\n \t  [(match_operand:XF 1 \"register_operand\" \"0,0\")\n \t   (float:XF\n \t     (match_operand:X87MODEI12 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n-  \"TARGET_80387 && (TARGET_USE_<MODE>MODE_FIOP || optimize_size)\"\n+  \"TARGET_80387 && (TARGET_USE_<MODE>MODE_FIOP || optimize_function_for_size_p (cfun))\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n         (cond [(match_operand:XF 3 \"mult_operator\" \"\")\n@@ -16763,7 +16790,7 @@\n    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n {\n   if (<MODE>mode == SFmode\n-      && TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+      && TARGET_SSE_MATH && TARGET_RECIP && !optimize_function_for_size_p (cfun)\n       && flag_finite_math_only && !flag_trapping_math\n       && flag_unsafe_math_optimizations)\n     {\n@@ -20313,12 +20340,12 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n    && ((GET_MODE (operands[0]) == HImode\n-\t&& ((!optimize_size && !TARGET_FAST_PREFIX)\n+\t&& ((optimize_function_for_speed_p (cfun) && !TARGET_FAST_PREFIX)\n             /* ??? next two lines just !satisfies_constraint_K (...) */\n \t    || !CONST_INT_P (operands[2])\n \t    || satisfies_constraint_K (operands[2])))\n        || (GET_MODE (operands[0]) == QImode\n-\t   && (TARGET_PROMOTE_QImode || optimize_size)))\"\n+\t   && (TARGET_PROMOTE_QImode || optimize_function_for_size_p (cfun))))\"\n   [(parallel [(set (match_dup 0)\n \t\t   (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n \t      (clobber (reg:CC FLAGS_REG))])]\n@@ -20341,7 +20368,7 @@\n    (set (match_operand 1 \"register_operand\" \"\")\n \t(and (match_dup 3) (match_dup 4)))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n-   && ! optimize_size\n+   && optimize_insn_for_speed_p ()\n    && ((GET_MODE (operands[1]) == HImode && ! TARGET_FAST_PREFIX)\n        || (GET_MODE (operands[1]) == QImode && TARGET_PROMOTE_QImode))\n    /* Ensure that the operand will remain sign-extended immediate.  */"}, {"sha": "e35d8573869a11d3769a1db76fcdfb05c209edb7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "patch": "@@ -220,7 +220,7 @@\n }\n   [(set_attr \"type\" \"sselog1,ssemov,ssemov\")\n    (set (attr \"mode\")\n-\t(cond [(ior (ior (ne (symbol_ref \"optimize_size\") (const_int 0))\n+\t(cond [(ior (ior (ne (symbol_ref \"optimize_function_for_size_p (cfun)\") (const_int 0))\n \t\t\t (eq (symbol_ref \"TARGET_SSE2\") (const_int 0)))\n \t\t    (and (eq_attr \"alternative\" \"2\")\n \t\t\t (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n@@ -656,7 +656,7 @@\n \t\t  (match_operand:V4SF 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE\"\n {\n-  if (TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+  if (TARGET_SSE_MATH && TARGET_RECIP && optimize_insn_for_speed_p ()\n       && flag_finite_math_only && !flag_trapping_math\n       && flag_unsafe_math_optimizations)\n     {\n@@ -794,7 +794,7 @@\n \t(sqrt:V4SF (match_operand:V4SF 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE\"\n {\n-  if (TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n+  if (TARGET_SSE_MATH && TARGET_RECIP && optimize_insn_for_speed_p ()\n       && flag_finite_math_only && !flag_trapping_math\n       && flag_unsafe_math_optimizations)\n     {"}, {"sha": "8212992d10dce480b9a92abb3c6a38763c6a6876", "filename": "gcc/expmed.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "patch": "@@ -521,6 +521,8 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t  != CODE_FOR_nothing))\n     {\n       int icode = optab_handler (movstrict_optab, fieldmode)->insn_code;\n+      rtx insn;\n+      rtx start = get_last_insn ();\n \n       /* Get appropriate low part of the value being stored.  */\n       if (GET_CODE (value) == CONST_INT || REG_P (value))\n@@ -544,13 +546,17 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \t  op0 = SUBREG_REG (op0);\n \t}\n \n-      emit_insn (GEN_FCN (icode)\n+      insn = (GEN_FCN (icode)\n \t\t (gen_rtx_SUBREG (fieldmode, op0,\n \t\t\t\t  (bitnum % BITS_PER_WORD) / BITS_PER_UNIT\n \t\t\t\t  + (offset * UNITS_PER_WORD)),\n \t\t\t\t  value));\n-\n-      return true;\n+      if (insn)\n+\t{\n+\t  emit_insn (insn);\n+\t  return true;\n+\t}\n+      delete_insns_since (start);\n     }\n \n   /* Handle fields bigger than a word.  */"}, {"sha": "69ebe6b98b31ccb3ebaddbff935dcf84ff6b267f", "filename": "gcc/predict.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3debdc1e9da1742b04771e44bf96e0104f0c3bcb/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=3debdc1e9da1742b04771e44bf96e0104f0c3bcb", "patch": "@@ -182,19 +182,27 @@ probably_never_executed_bb_p (const_basic_block bb)\n \n /* Return true when current function should always be optimized for size.  */\n \n-static bool\n-always_optimize_for_size_p (void)\n+bool\n+optimize_function_for_size_p (struct function *fun)\n {\n   return (optimize_size\n-\t  || cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED);\n+\t  || fun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED);\n+}\n+\n+/* Return true when current function should always be optimized for speed.  */\n+\n+bool\n+optimize_function_for_speed_p (struct function *fun)\n+{\n+  return !optimize_function_for_size_p (fun);\n }\n \n /* Return TRUE when BB should be optimized for size.  */\n \n bool\n optimize_bb_for_size_p (basic_block bb)\n {\n-  return always_optimize_for_size_p () || !maybe_hot_bb_p (bb);\n+  return optimize_function_for_size_p (cfun) || !maybe_hot_bb_p (bb);\n }\n \n /* Return TRUE when BB should be optimized for speed.  */\n@@ -210,7 +218,7 @@ optimize_bb_for_speed_p (basic_block bb)\n bool\n optimize_edge_for_size_p (edge e)\n {\n-  return always_optimize_for_size_p () || !maybe_hot_edge_p (e);\n+  return optimize_function_for_size_p (cfun) || !maybe_hot_edge_p (e);\n }\n \n /* Return TRUE when BB should be optimized for speed.  */\n@@ -226,7 +234,7 @@ optimize_edge_for_speed_p (edge e)\n bool\n optimize_insn_for_size_p (void)\n {\n-  return always_optimize_for_size_p () || !crtl->maybe_hot_insn_p;\n+  return optimize_function_for_size_p (cfun) || !crtl->maybe_hot_insn_p;\n }\n \n /* Return TRUE when BB should be optimized for speed.  */"}]}