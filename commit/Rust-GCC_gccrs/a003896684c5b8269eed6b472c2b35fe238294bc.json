{"sha": "a003896684c5b8269eed6b472c2b35fe238294bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAwMzg5NjY4NGM1YjgyNjllZWQ2YjQ3MmMyYjM1ZmUyMzgyOTRiYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-02T07:37:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-02T07:37:35Z"}, "message": "tree-ssa-dom.c (build_and_record_new_cond): Add optional parameter to record a condition that is false.\n\n2015-07-02  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-dom.c (build_and_record_new_cond): Add optional\n\tparameter to record a condition that is false.\n\t(record_conditions): When recording an extra NE_EXPR that is\n\ttrue also record a EQ_EXPR that is false.\n\n\t* gcc.dg/tree-ssa/ssa-dom-cse-4.c: New testcase.\n\nFrom-SVN: r225299", "tree": {"sha": "da79f9f2b5d7561937a823eb7a573eb0f7aec873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da79f9f2b5d7561937a823eb7a573eb0f7aec873"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a003896684c5b8269eed6b472c2b35fe238294bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a003896684c5b8269eed6b472c2b35fe238294bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a003896684c5b8269eed6b472c2b35fe238294bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a003896684c5b8269eed6b472c2b35fe238294bc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53ac92c3e040789d34c7aabf4f2a98709de47c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ac92c3e040789d34c7aabf4f2a98709de47c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ac92c3e040789d34c7aabf4f2a98709de47c17"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "90d997fdcb1af20f7dd85795265f68e7890b532e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a003896684c5b8269eed6b472c2b35fe238294bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a003896684c5b8269eed6b472c2b35fe238294bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a003896684c5b8269eed6b472c2b35fe238294bc", "patch": "@@ -1,3 +1,10 @@\n+2015-07-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-dom.c (build_and_record_new_cond): Add optional\n+\tparameter to record a condition that is false.\n+\t(record_conditions): When recording an extra NE_EXPR that is\n+\ttrue also record a EQ_EXPR that is false.\n+\n 2015-07-02  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (struct ivopts_data): New field iv_obstack."}, {"sha": "789f44e8e37c9836e2a9d0a4529d52afc2b9748a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a003896684c5b8269eed6b472c2b35fe238294bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a003896684c5b8269eed6b472c2b35fe238294bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a003896684c5b8269eed6b472c2b35fe238294bc", "patch": "@@ -1,3 +1,7 @@\n+2015-07-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-dom-cse-4.c: New testcase.\n+\n 2015-07-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/mpx/pr66568.c (exit): New prototype."}, {"sha": "cc9dde95255b4c2c3e518ebf20367235374f826e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-cse-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a003896684c5b8269eed6b472c2b35fe238294bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a003896684c5b8269eed6b472c2b35fe238294bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-4.c?ref=a003896684c5b8269eed6b472c2b35fe238294bc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+extern void abort (void);\n+\n+unsigned int\n+foo (unsigned int x, unsigned int y)\n+{\n+  unsigned int z;\n+\n+  if (x >= y)\n+    return 1;\n+\n+  if (y == x)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"optimized\" } } */"}, {"sha": "698f78a52396efcc9849801a38fa60b807d48089", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a003896684c5b8269eed6b472c2b35fe238294bc/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a003896684c5b8269eed6b472c2b35fe238294bc/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=a003896684c5b8269eed6b472c2b35fe238294bc", "patch": "@@ -813,7 +813,8 @@ free_all_edge_infos (void)\n static void\n build_and_record_new_cond (enum tree_code code,\n                            tree op0, tree op1,\n-                           vec<cond_equivalence> *p)\n+                           vec<cond_equivalence> *p,\n+\t\t\t   bool val = true)\n {\n   cond_equivalence c;\n   struct hashable_expr *cond = &c.cond;\n@@ -826,7 +827,7 @@ build_and_record_new_cond (enum tree_code code,\n   cond->ops.binary.opnd0 = op0;\n   cond->ops.binary.opnd1 = op1;\n \n-  c.value = boolean_true_node;\n+  c.value = val ? boolean_true_node : boolean_false_node;\n   p->safe_push (c);\n }\n \n@@ -865,6 +866,8 @@ record_conditions (struct edge_info *edge_info, tree cond, tree inverted)\n \t\t\t\t op0, op1, &edge_info->cond_equivalences);\n       build_and_record_new_cond (NE_EXPR, op0, op1,\n \t\t\t\t &edge_info->cond_equivalences);\n+      build_and_record_new_cond (EQ_EXPR, op0, op1,\n+\t\t\t\t &edge_info->cond_equivalences, false);\n       break;\n \n     case GE_EXPR:"}]}