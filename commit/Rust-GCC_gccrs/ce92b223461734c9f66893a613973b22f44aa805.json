{"sha": "ce92b223461734c9f66893a613973b22f44aa805", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U5MmIyMjM0NjE3MzRjOWY2Njg5M2E2MTM5NzNiMjJmNDRhYTgwNQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2006-05-06T23:19:48Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2006-05-06T23:19:48Z"}, "message": "r113612@merlin: rearnsha | 2006-05-07 00:19:18 +0100\n\n r113612@merlin:  rearnsha | 2006-05-07 00:19:18 +0100\n \t* genpeep.c (main): Make insn-peep.c depend on flags.h.\n \t* arm/constraints.md: New file.\n \t* arm.h (REG_CLASS_FROM_LETTER_P): Delete.\n \t(CONST_OK_FOR_ARM_LETTER, CONST_OK_FOR_THUMB_LETTER)\n \t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_ARM_LETTER)\n \t(CONST_DOUBLE_OK_FOR_LETTER_P, EXTRA_CONSTRAINT_STR_ARM)\n \t(CONSTRAINT_LEN, EXTRA_CONSTRAINT_THUMB, EXTRA_CONSTRAINT_STR)\n \t(EXTRA_MEMORY_CONSTRAINT): Likewise.\n \t* arm.md: Include constraints.md.\n \t(thumb_movsi_insn): Use satisfies_constraint_J.\n \t(movhi, movqi): Use satisfies_constraint_I.\n\nFrom-SVN: r113588", "tree": {"sha": "d1bf7a80f1118da6c2db31bddcb6a7d48bc200c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1bf7a80f1118da6c2db31bddcb6a7d48bc200c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce92b223461734c9f66893a613973b22f44aa805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce92b223461734c9f66893a613973b22f44aa805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce92b223461734c9f66893a613973b22f44aa805", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce92b223461734c9f66893a613973b22f44aa805/comments", "author": null, "committer": null, "parents": [{"sha": "b3638b64c3645bd3bd5dbf0e9d826557a14e1e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3638b64c3645bd3bd5dbf0e9d826557a14e1e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3638b64c3645bd3bd5dbf0e9d826557a14e1e82"}], "stats": {"total": 323, "additions": 206, "deletions": 117}, "files": [{"sha": "8d5320bfced614b38fbf53017994e7410af7d0a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce92b223461734c9f66893a613973b22f44aa805/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce92b223461734c9f66893a613973b22f44aa805/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce92b223461734c9f66893a613973b22f44aa805", "patch": "@@ -1,3 +1,17 @@\n+2006-05-07  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* genpeep.c (main): Make insn-peep.c depend on flags.h.\n+\t* arm/constraints.md: New file.\n+\t* arm.h (REG_CLASS_FROM_LETTER_P): Delete.\n+\t(CONST_OK_FOR_ARM_LETTER, CONST_OK_FOR_THUMB_LETTER)\n+\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_ARM_LETTER)\n+\t(CONST_DOUBLE_OK_FOR_LETTER_P, EXTRA_CONSTRAINT_STR_ARM)\n+\t(CONSTRAINT_LEN, EXTRA_CONSTRAINT_THUMB, EXTRA_CONSTRAINT_STR)\n+\t(EXTRA_MEMORY_CONSTRAINT): Likewise.\n+\t* arm.md: Include constraints.md.\n+\t(thumb_movsi_insn): Use satisfies_constraint_J.\n+\t(movhi, movqi): Use satisfies_constraint_I.\n+\n 2006-04-29 Anatoly Sokolov <aesok@post.ru>\n \n         * config/avr/avr.h (CRT_BINUTILS_SPECS): Fixed crt* file name"}, {"sha": "26d397726dbe6994abd943d0483a3025eeeda443", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce92b223461734c9f66893a613973b22f44aa805/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce92b223461734c9f66893a613973b22f44aa805/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ce92b223461734c9f66893a613973b22f44aa805", "patch": "@@ -1061,119 +1061,6 @@ enum reg_class\n    registers.  */\n #define SMALL_REGISTER_CLASSES   TARGET_THUMB\n \n-/* Get reg_class from a letter such as appears in the machine description.\n-   We only need constraint `f' for FPA_REGS (`r' == GENERAL_REGS) for the\n-   ARM, but several more letters for the Thumb.  */\n-#define REG_CLASS_FROM_LETTER(C)  \t\\\n-  (  (C) == 'f' ? FPA_REGS\t\t\\\n-   : (C) == 'v' ? CIRRUS_REGS\t\t\\\n-   : (C) == 'w' ? VFP_REGS\t\t\\\n-   : (C) == 'y' ? IWMMXT_REGS\t\t\\\n-   : (C) == 'z' ? IWMMXT_GR_REGS\t\\\n-   : (C) == 'l' ? (TARGET_ARM ? GENERAL_REGS : LO_REGS)\t\\\n-   : TARGET_ARM ? NO_REGS\t\t\\\n-   : (C) == 'h' ? HI_REGS\t\t\\\n-   : (C) == 'b' ? BASE_REGS\t\t\\\n-   : (C) == 'k' ? STACK_REG\t\t\\\n-   : (C) == 'c' ? CC_REG\t\t\\\n-   : NO_REGS)\n-\n-/* The letters I, J, K, L and M in a register constraint string\n-   can be used to stand for particular ranges of immediate operands.\n-   This macro defines what the ranges are.\n-   C is the letter, and VALUE is a constant value.\n-   Return 1 if VALUE is in the range specified by C.\n-\tI: immediate arithmetic operand (i.e. 8 bits shifted as required).\n-\tJ: valid indexing constants.\n-\tK: ~value ok in rhs argument of data operand.\n-\tL: -value ok in rhs argument of data operand.\n-        M: 0..32, or a power of 2  (for shifts, or mult done by shift).  */\n-#define CONST_OK_FOR_ARM_LETTER(VALUE, C)  \t\t\\\n-  ((C) == 'I' ? const_ok_for_arm (VALUE) :\t\t\\\n-   (C) == 'J' ? ((VALUE) < 4096 && (VALUE) > -4096) :\t\\\n-   (C) == 'K' ? (const_ok_for_arm (~(VALUE))) :\t\t\\\n-   (C) == 'L' ? (const_ok_for_arm (-(VALUE))) :\t\t\\\n-   (C) == 'M' ? (((VALUE >= 0 && VALUE <= 32))\t\t\\\n-\t\t || (((VALUE) & ((VALUE) - 1)) == 0))\t\\\n-   : 0)\n-\n-#define CONST_OK_FOR_THUMB_LETTER(VAL, C)\t\t\\\n-  ((C) == 'I' ? (unsigned HOST_WIDE_INT) (VAL) < 256 :\t\\\n-   (C) == 'J' ? (VAL) > -256 && (VAL) < 0 :\t\t\\\n-   (C) == 'K' ? thumb_shiftable_const (VAL) :\t\t\\\n-   (C) == 'L' ? (VAL) > -8 && (VAL) < 8\t:\t\t\\\n-   (C) == 'M' ? ((unsigned HOST_WIDE_INT) (VAL) < 1024\t\\\n-\t\t   && ((VAL) & 3) == 0) :\t\t\\\n-   (C) == 'N' ? ((unsigned HOST_WIDE_INT) (VAL) < 32) :\t\\\n-   (C) == 'O' ? ((VAL) >= -508 && (VAL) <= 508)\t\t\\\n-   : 0)\n-\n-#define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\t\\\n-  (TARGET_ARM ?\t\t\t\t\t\t\t\t\\\n-   CONST_OK_FOR_ARM_LETTER (VALUE, C) : CONST_OK_FOR_THUMB_LETTER (VALUE, C))\n-\n-/* Constant letter 'G' for the FP immediate constants.\n-   'H' means the same constant negated.  */\n-#define CONST_DOUBLE_OK_FOR_ARM_LETTER(X, C)\t\t\t\\\n-    ((C) == 'G' ? arm_const_double_rtx (X) :\t\t\t\\\n-     (C) == 'H' ? neg_const_double_rtx_ok_for_fpa (X) : 0)\n-\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(X, C)\t\t\t\\\n-  (TARGET_ARM ?\t\t\t\t\t\t\t\\\n-   CONST_DOUBLE_OK_FOR_ARM_LETTER (X, C) : 0)\n-\n-/* For the ARM, `Q' means that this is a memory operand that is just\n-   an offset from a register.\n-   `S' means any symbol that has the SYMBOL_REF_FLAG set or a CONSTANT_POOL\n-   address.  This means that the symbol is in the text segment and can be\n-   accessed without using a load.\n-   'D' Prefixes a number of const_double operands where:\n-   'Da' is a constant that takes two ARM insns to load.\n-   'Db' takes three ARM insns.\n-   'Dc' takes four ARM insns, if we allow that in this compilation.\n-   'U' Prefixes an extended memory constraint where:\n-   'Uv' is an address valid for VFP load/store insns.\n-   'Uy' is an address valid for iwmmxt load/store insns.\n-   'Uq' is an address valid for ldrsb.  */\n-\n-#define EXTRA_CONSTRAINT_STR_ARM(OP, C, STR)\t\t\t\t\\\n-  (((C) == 'D') ? ((GET_CODE (OP) == CONST_DOUBLE\t\t\t\\\n-\t\t    || GET_CODE (OP) == CONST_INT\t\t\t\\\n-\t\t    || GET_CODE (OP) == CONST_VECTOR)\t\t\t\\\n-\t\t   && (((STR)[1] == 'a'\t\t\t\t\t\\\n-\t\t\t&& arm_const_double_inline_cost (OP) == 2)\t\\\n-\t\t       || ((STR)[1] == 'b'\t\t\t\t\\\n-\t\t\t   && arm_const_double_inline_cost (OP) == 3)\t\\\n-\t\t       || ((STR)[1] == 'c'\t\t\t\t\\\n-\t\t\t   && arm_const_double_inline_cost (OP) == 4\t\\\n-\t\t\t   && !(optimize_size || arm_ld_sched)))) :\t\\\n-   ((C) == 'Q') ? (GET_CODE (OP) == MEM\t\t\t\t\t\\\n-\t\t && GET_CODE (XEXP (OP, 0)) == REG) :\t\t\t\\\n-   ((C) == 'R') ? (GET_CODE (OP) == MEM\t\t\t\t\t\\\n-\t\t   && GET_CODE (XEXP (OP, 0)) == SYMBOL_REF\t\t\\\n-\t\t   && CONSTANT_POOL_ADDRESS_P (XEXP (OP, 0))) :\t\t\\\n-   ((C) == 'S') ? (optimize > 0 && CONSTANT_ADDRESS_P (OP)) :\t\t\\\n-   ((C) == 'T') ? cirrus_memory_offset (OP) :\t\t\t\t\\\n-   ((C) == 'U' && (STR)[1] == 'v') ? arm_coproc_mem_operand (OP, FALSE) : \\\n-   ((C) == 'U' && (STR)[1] == 'y') ? arm_coproc_mem_operand (OP, TRUE) : \\\n-   ((C) == 'U' && (STR)[1] == 'q')\t\t\t\t\t\\\n-    ? arm_extendqisi_mem_op (OP, GET_MODE (OP))\t\t\t\t\\\n-   : 0)\n-\n-#define CONSTRAINT_LEN(C,STR)\t\t\t\t\\\n-  (((C) == 'U' || (C) == 'D') ? 2 : DEFAULT_CONSTRAINT_LEN (C, STR))\n-\n-#define EXTRA_CONSTRAINT_THUMB(X, C)\t\t\t\t\t\\\n-  ((C) == 'Q' ? (GET_CODE (X) == MEM\t\t\t\t\t\\\n-\t\t && GET_CODE (XEXP (X, 0)) == LABEL_REF) : 0)\n-\n-#define EXTRA_CONSTRAINT_STR(X, C, STR)\t\t\\\n-  (TARGET_ARM\t\t\t\t\t\\\n-   ? EXTRA_CONSTRAINT_STR_ARM (X, C, STR)\t\\\n-   : EXTRA_CONSTRAINT_THUMB (X, C))\n-\n-#define EXTRA_MEMORY_CONSTRAINT(C, STR) ((C) == 'U')\n-\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS, but for the Thumb we prefer"}, {"sha": "9abe62c17f77c37f173ffe4d8a453aef41bba43d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce92b223461734c9f66893a613973b22f44aa805/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce92b223461734c9f66893a613973b22f44aa805/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ce92b223461734c9f66893a613973b22f44aa805", "patch": "@@ -309,6 +309,7 @@\n ;; Predicates\n \n (include \"predicates.md\")\n+(include \"constraints.md\")\n \n ;;---------------------------------------------------------------------------\n ;; Pipeline descriptions\n@@ -4443,7 +4444,7 @@\n (define_split \n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n-  \"TARGET_THUMB && CONST_OK_FOR_THUMB_LETTER (INTVAL (operands[1]), 'J')\"\n+  \"TARGET_THUMB && satisfies_constraint_J (operands[1])\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 0) (neg:SI (match_dup 0)))]\n   \"operands[1] = GEN_INT (- INTVAL (operands[1]));\"\n@@ -4452,7 +4453,7 @@\n (define_split \n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n-  \"TARGET_THUMB && CONST_OK_FOR_THUMB_LETTER (INTVAL (operands[1]), 'K')\"\n+  \"TARGET_THUMB && satisfies_constraint_K (operands[1])\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 0) (ashift:SI (match_dup 0) (match_dup 2)))]\n   \"\n@@ -4905,7 +4906,7 @@\n \t    operands[1] = force_reg (HImode, operands[1]);\n         }\n       else if (GET_CODE (operands[1]) == CONST_INT\n-\t        && !CONST_OK_FOR_THUMB_LETTER (INTVAL (operands[1]), 'I'))\n+\t        && !satisfies_constraint_I (operands[1]))\n         {\n \t  /* Handle loading a large integer during reload.  */\n \n@@ -5138,7 +5139,7 @@\n     }\n   else if (TARGET_THUMB\n \t   && GET_CODE (operands[1]) == CONST_INT\n-\t   && !CONST_OK_FOR_LETTER_P (INTVAL (operands[1]), 'I'))\n+\t   && !satisfies_constraint_I (operands[1]))\n     {\n       /* Handle loading a large integer during reload.  */\n "}, {"sha": "728a4e7a7c2d33550bb4064f61660de46db039c1", "filename": "gcc/config/arm/constraints.md", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce92b223461734c9f66893a613973b22f44aa805/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce92b223461734c9f66893a613973b22f44aa805/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=ce92b223461734c9f66893a613973b22f44aa805", "patch": "@@ -0,0 +1,186 @@\n+;; Constraint definitions for ARM and Thumb\n+;; Copyright (C) 2006 Free Software Foundation, Inc.\n+;; Contributed by ARM Ltd.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 2, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+;; Boston, MA 02110-1301, USA.\n+\n+;; The following register constraints have been used:\n+;; - in ARM state: f, v, w, y, z\n+;; - in Thumb state: h, k, b\n+;; - in both states: l, c\n+;; In ARM state, 'l' is an alias for 'r'\n+\n+;; The following normal constraints have been used:\n+;; in ARM state: G, H, I, J, K, L, M\n+;; in Thumb state: I, J, K, L, M, N, O\n+\n+;; The following multi-letter normal constraints have been used:\n+;; in ARM state: Da, Db, Dc\n+\n+;; The following memory constraints have been used:\n+;; in ARM state: Q, Uq, Uv, Uy\n+\n+\n+(define_register_constraint \"f\" \"TARGET_ARM ? FPA_REGS : NO_REGS\"\n+ \"Legacy FPA registers @code{f0}-@code{f7}.\")\n+\n+(define_register_constraint \"v\" \"TARGET_ARM ? CIRRUS_REGS : NO_REGS\"\n+ \"The Cirrus Maverick co-processor registers.\")\n+\n+(define_register_constraint \"w\" \"TARGET_ARM ? VFP_REGS : NO_REGS\"\n+ \"The VFP registers @code{s0}-@code{s31}.\")\n+\n+(define_register_constraint \"y\" \"TARGET_REALLY_IWMMXT ? IWMMXT_REGS : NO_REGS\"\n+ \"The Intel iWMMX co-processor registers.\")\n+\n+(define_register_constraint \"z\"\n+ \"TARGET_REALLY_IWMMXT ? IWMMXT_GR_REGS : NO_REGS\"\n+ \"The Intel iWMMX GR registers.\")\n+\n+(define_register_constraint \"l\" \"TARGET_THUMB ? LO_REGS : GENERAL_REGS\"\n+ \"In Thumb state the core registers @code{r0}-@code{r7}.\")\n+\n+(define_register_constraint \"h\" \"TARGET_THUMB ? HI_REGS : NO_REGS\"\n+ \"In Thumb state the core registers @code{r8}-@code{r15}.\")\n+\n+(define_register_constraint \"k\" \"TARGET_THUMB ? STACK_REG : NO_REGS\"\n+ \"@internal\n+  Thumb only.  The stack register.\")\n+\n+(define_register_constraint \"b\" \"TARGET_THUMB ? BASE_REGS : NO_REGS\"\n+ \"@internal\n+  Thumb only.  The union of the low registers and the stack register.\")\n+\n+(define_register_constraint \"c\" \"CC_REG\"\n+ \"@interal The condition code register.\")\n+\n+(define_constraint \"I\"\n+ \"In ARM state a constant that can be used as an immediate value in a Data\n+  Processing instruction.  In Thumb state a constant in the range 0-255.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_ARM ? const_ok_for_arm (ival)\n+\t\t   : ival >= 0 && ival <= 255\")))\n+\n+(define_constraint \"J\"\n+ \"In ARM state a constant in the range @minus{}4095-4095.  In Thumb state\n+  a constant in the range @minus{}255-@minus{}1.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_ARM ? (ival >= -4095 && ival <= 4095)\n+\t\t   : (ival >= -255 && ival <= -1)\")))\n+\n+(define_constraint \"K\"\n+ \"In ARM state a constant that satisfies the @code{I} constraint if inverted.\n+  In Thumb state a constant that satisfies the @code{I} constraint multiplied \n+  by any power of 2.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_ARM ? const_ok_for_arm (~ival)\n+\t\t   : thumb_shiftable_const (ival)\")))\n+\n+(define_constraint \"L\"\n+ \"In ARM state a constant that satisfies the @code{I} constraint if negated.\n+  In Thumb state a constant in the range @minus{}7-7.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_ARM ? const_ok_for_arm (-ival)\n+\t\t   : (ival >= -7 && ival <= 7)\")))\n+\n+;; The ARM state version is internal...\n+;; @internal In ARM state a constant in the range 0-32 or any power of 2.\n+(define_constraint \"M\"\n+ \"In Thumb state a constant that is a multiple of 4 in the range 0-1020.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_ARM ? ((ival >= 0 && ival <= 32)\n+\t\t\t\t || ((ival & (ival - 1)) == 0))\n+\t\t   : ((ival >= 0 && ival <= 1020) && ((ival & 3) == 0))\")))\n+\n+(define_constraint \"N\"\n+ \"In Thumb state a constant in the range 0-31.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_THUMB && ival >= 0 && ival <= 31\")))\n+\n+(define_constraint \"O\"\n+ \"In Thumb state a constant that is a multiple of 4 in the range\n+  @minus{}508-508.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_THUMB && ival >= -508 && ival <= 508\n+\t\t   && ((ival & 3) == 0)\")))\n+\n+(define_constraint \"G\"\n+ \"In ARM state a valid FPA immediate constant.\"\n+ (and (match_code \"const_double\")\n+      (match_test \"TARGET_ARM && arm_const_double_rtx (op)\")))\n+\n+(define_constraint \"H\"\n+ \"In ARM state a valid FPA immediate constant when negated.\"\n+ (and (match_code \"const_double\")\n+      (match_test \"TARGET_ARM && neg_const_double_rtx_ok_for_fpa (op)\")))\n+\n+(define_constraint \"Da\"\n+ \"@internal\n+  In ARM state a const_int, const_double or const_vector that can\n+  be generated with two Data Processing insns.\"\n+ (and (match_code \"const_double,const_int,const_vector\")\n+      (match_test \"TARGET_ARM && arm_const_double_inline_cost (op) == 2\")))\n+\n+(define_constraint \"Db\"\n+ \"@internal\n+  In ARM state a const_int, const_double or const_vector that can\n+  be generated with three Data Processing insns.\"\n+ (and (match_code \"const_double,const_int,const_vector\")\n+      (match_test \"TARGET_ARM && arm_const_double_inline_cost (op) == 3\")))\n+\n+(define_constraint \"Dc\"\n+ \"@internal\n+  In ARM state a const_int, const_double or const_vector that can\n+  be generated with four Data Processing insns.  This pattern is disabled\n+  if optimizing for space or when we have load-delay slots to fill.\"\n+ (and (match_code \"const_double,const_int,const_vector\")\n+      (match_test \"TARGET_ARM && arm_const_double_inline_cost (op) == 4\n+\t\t   && !(optimize_size || arm_ld_sched)\")))\n+\n+(define_memory_constraint \"Uv\"\n+ \"@internal\n+  In ARM state a valid VFP load/store address.\"\n+ (and (match_code \"mem\")\n+      (match_test \"TARGET_ARM && arm_coproc_mem_operand (op, FALSE)\")))\n+\n+(define_memory_constraint \"Uy\"\n+ \"@internal\n+  In ARM state a valid iWMMX load/store address.\"\n+ (and (match_code \"mem\")\n+      (match_test \"TARGET_ARM && arm_coproc_mem_operand (op, TRUE)\")))\n+\n+(define_memory_constraint \"Uq\"\n+ \"@internal\n+  In ARM state an address valid in ldrsb instructions.\"\n+ (and (match_code \"mem\")\n+      (match_test \"TARGET_ARM\n+\t\t   && arm_legitimate_address_p (GET_MODE (op), XEXP (op, 0),\n+\t\t\t\t\t\tSIGN_EXTEND, 0)\")))\n+\n+(define_memory_constraint \"Q\"\n+ \"@internal\n+  In ARM state an address that is a single base register.\"\n+ (and (match_code \"mem\")\n+      (match_test \"REG_P (XEXP (op, 0))\")))\n+\n+;; We used to have constraint letters for S and R in ARM state, but\n+;; all uses of these now appear to have been removed.\n+\n+;; Additionally, we used to have a Q constraint in Thumb state, but\n+;; this wasn't really a valid memory constraint.  Again, all uses of\n+;; this now seem to have been removed."}, {"sha": "c5a7fc2927d67258b4b0ea92355b85fbdbfbdd6b", "filename": "gcc/genpeep.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce92b223461734c9f66893a613973b22f44aa805/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce92b223461734c9f66893a613973b22f44aa805/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=ce92b223461734c9f66893a613973b22f44aa805", "patch": "@@ -379,6 +379,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"except.h\\\"\\n\");\n   printf (\"#include \\\"function.h\\\"\\n\");\n   printf (\"#include \\\"toplev.h\\\"\\n\");\n+  printf (\"#include \\\"flags.h\\\"\\n\");\n   printf (\"#include \\\"tm-constrs.h\\\"\\n\\n\");\n \n   printf (\"#ifdef HAVE_peephole\\n\");"}]}