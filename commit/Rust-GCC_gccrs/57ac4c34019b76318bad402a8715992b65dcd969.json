{"sha": "57ac4c34019b76318bad402a8715992b65dcd969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhYzRjMzQwMTliNzYzMThiYWQ0MDJhODcxNTk5MmI2NWRjZDk2OQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2012-04-24T07:01:52Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2012-04-24T07:01:52Z"}, "message": "recog.c (insn_invalid_p): Add IN_GROUP parameter and use validate_change to add clobbers if...\n\n2012-04-24  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* recog.c (insn_invalid_p): Add IN_GROUP parameter and use\n\tvalidate_change to add clobbers if IN_GROUP is nonzero.\n\t(verify_changes): Call insn_invalid_p with IN_GROUP set to true.\n\t* recog.h (insn_invalid_p): Add IN_GROUP parameter to function\n\tprototype.\n\t* gcse.c (process_insert_insn): Call insn_invalid_p with IN_GROUP\n\tset to false.\n\t* config/s390/s390.c (insn_invalid_p): Likewise.\n\nFrom-SVN: r186748", "tree": {"sha": "72bb3196b127f80e7d5b368328aa2ae12e943abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72bb3196b127f80e7d5b368328aa2ae12e943abc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57ac4c34019b76318bad402a8715992b65dcd969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ac4c34019b76318bad402a8715992b65dcd969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ac4c34019b76318bad402a8715992b65dcd969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ac4c34019b76318bad402a8715992b65dcd969/comments", "author": null, "committer": null, "parents": [{"sha": "d9030ea42a2aa2590f2d440d53e0f656f3b0e5d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9030ea42a2aa2590f2d440d53e0f656f3b0e5d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9030ea42a2aa2590f2d440d53e0f656f3b0e5d7"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "d37c609e701f1101ad3e28e4bffabb0924b35b2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ac4c34019b76318bad402a8715992b65dcd969/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ac4c34019b76318bad402a8715992b65dcd969/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57ac4c34019b76318bad402a8715992b65dcd969", "patch": "@@ -1,3 +1,14 @@\n+2012-04-24  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* recog.c (insn_invalid_p): Add IN_GROUP parameter and use\n+\tvalidate_change to add clobbers if IN_GROUP is nonzero.\n+\t(verify_changes): Call insn_invalid_p with IN_GROUP set to true.\n+\t* recog.h (insn_invalid_p): Add IN_GROUP parameter to function\n+\tprototype.\n+\t* gcse.c (process_insert_insn): Call insn_invalid_p with IN_GROUP\n+\tset to false.\n+\t* config/s390/s390.c (insn_invalid_p): Likewise.\n+\n 2012-04-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/53084"}, {"sha": "5592674e85738a0e8b11b0ed67b213e64e6c62c6", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ac4c34019b76318bad402a8715992b65dcd969/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ac4c34019b76318bad402a8715992b65dcd969/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=57ac4c34019b76318bad402a8715992b65dcd969", "patch": "@@ -4413,7 +4413,7 @@ s390_expand_addcc (enum rtx_code cmp_code, rtx cmp_op0, rtx cmp_op1,\n       insn = gen_rtx_SET (VOIDmode, gen_rtx_REG (cc_mode, CC_REGNUM),\n \t\t\t  gen_rtx_COMPARE (cc_mode, cmp_op0, cmp_op1));\n       /* We use insn_invalid_p here to add clobbers if required.  */\n-      ret = insn_invalid_p (emit_insn (insn));\n+      ret = insn_invalid_p (emit_insn (insn), false);\n       gcc_assert (!ret);\n \n       /* Emit ALC instruction pattern.  */\n@@ -4485,7 +4485,7 @@ s390_expand_addcc (enum rtx_code cmp_code, rtx cmp_op0, rtx cmp_op1,\n       insn = gen_rtx_SET (VOIDmode, gen_rtx_REG (cc_mode, CC_REGNUM),\n \t\t\t  gen_rtx_COMPARE (cc_mode, cmp_op0, cmp_op1));\n       /* We use insn_invalid_p here to add clobbers if required.  */\n-      ret = insn_invalid_p (emit_insn (insn));\n+      ret = insn_invalid_p (emit_insn (insn), false);\n       gcc_assert (!ret);\n \n       /* Emit SLB instruction pattern.  */"}, {"sha": "a050ff5ba6b23a3166c02e953c5241aa49f4bee3", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ac4c34019b76318bad402a8715992b65dcd969/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ac4c34019b76318bad402a8715992b65dcd969/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=57ac4c34019b76318bad402a8715992b65dcd969", "patch": "@@ -2087,7 +2087,7 @@ process_insert_insn (struct expr *expr)\n     {\n       rtx insn = emit_insn (gen_rtx_SET (VOIDmode, reg, exp));\n \n-      if (insn_invalid_p (insn))\n+      if (insn_invalid_p (insn, false))\n \tgcc_unreachable ();\n     }\n "}, {"sha": "cb2bfd317015ac7087b8f7452c970d0e11f212d2", "filename": "gcc/recog.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ac4c34019b76318bad402a8715992b65dcd969/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ac4c34019b76318bad402a8715992b65dcd969/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=57ac4c34019b76318bad402a8715992b65dcd969", "patch": "@@ -309,10 +309,14 @@ canonicalize_change_group (rtx insn, rtx x)\n \n \n /* This subroutine of apply_change_group verifies whether the changes to INSN\n-   were valid; i.e. whether INSN can still be recognized.  */\n+   were valid; i.e. whether INSN can still be recognized.\n+\n+   If IN_GROUP is true clobbers which have to be added in order to\n+   match the instructions will be added to the current change group.\n+   Otherwise the changes will take effect immediately.  */\n \n int\n-insn_invalid_p (rtx insn)\n+insn_invalid_p (rtx insn, bool in_group)\n {\n   rtx pat = PATTERN (insn);\n   int num_clobbers = 0;\n@@ -344,7 +348,10 @@ insn_invalid_p (rtx insn)\n       newpat = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (num_clobbers + 1));\n       XVECEXP (newpat, 0, 0) = pat;\n       add_clobbers (newpat, icode);\n-      PATTERN (insn) = pat = newpat;\n+      if (in_group)\n+\tvalidate_change (insn, &PATTERN (insn), newpat, 1);\n+      else\n+\tPATTERN (insn) = pat = newpat;\n     }\n \n   /* After reload, verify that all constraints are satisfied.  */\n@@ -413,7 +420,7 @@ verify_changes (int num)\n \t}\n       else if (DEBUG_INSN_P (object))\n \tcontinue;\n-      else if (insn_invalid_p (object))\n+      else if (insn_invalid_p (object, true))\n \t{\n \t  rtx pat = PATTERN (object);\n "}, {"sha": "9fb3443254a696b935f93e9a460eb69bb18a28ba", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ac4c34019b76318bad402a8715992b65dcd969/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ac4c34019b76318bad402a8715992b65dcd969/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=57ac4c34019b76318bad402a8715992b65dcd969", "patch": "@@ -79,7 +79,7 @@ extern int asm_operand_ok (rtx, const char *, const char **);\n extern bool validate_change (rtx, rtx *, rtx, bool);\n extern bool validate_unshare_change (rtx, rtx *, rtx, bool);\n extern bool canonicalize_change_group (rtx insn, rtx x);\n-extern int insn_invalid_p (rtx);\n+extern int insn_invalid_p (rtx, bool);\n extern int verify_changes (int);\n extern void confirm_change_group (void);\n extern int apply_change_group (void);"}]}