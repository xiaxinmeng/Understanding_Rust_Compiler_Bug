{"sha": "03041e0361cbdd7f541f2f39060759aad866ed58", "node_id": "C_kwDOANBUbNoAKDAzMDQxZTAzNjFjYmRkN2Y1NDFmMmYzOTA2MDc1OWFhZDg2NmVkNTg", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-21T10:06:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-21T10:06:20Z"}, "message": "tree: Fix up component_ref_sam_type handling of arrays of 0 sized elements [PR109215]\n\nOur documentation sadly talks about elt_type arr[0]; as zero-length arrays,\nnot arrays with zero elements.  Unfortunately, those aren't the only arrays\nwhich can have zero size, the same size can be also result of zero-length\nelement, like in GNU C struct whatever {} or in GNU C/C++ if the element\ntype is [0] array or combination thereof (dunno if Ada doesn't allow\nsomething similar too).  One can't do much with them, taking address of\ntheir elements, (no-op) copying of the elements in and out.  But they\nbehave differently from arr[0] arrays e.g. in that using non-zero indexes\nin them (as long as they are within bounds as for normal arrays) is valid.\n\nI think this naming inaccuracy resulted in Martin designing\nspecial_array_member in an inconsistent way, mixing size zero array members\nwith array members of one or two or more elements and then using the\nsize zero interchangeably with zero elements.\n\nThe following patch changes that (but doesn't do any\ndocumentation/diagnostics renaming, as this is really a corner case),\nsuch that int_0/trail_0 for consistency is just about [0] arrays\nplus [] for the latter, not one or more zero sized elements case.\n\nThe testcase has one xfailed case for where perhaps in later GCC versions\nwe could add extra code to handle it, for some reason we don't diagnose\nout of bounds accesses for the zero sized elements cases.  It will be\nharder because e.g. FRE will canonicalize &var.fld[0] and &var.fld[10]\nto just one of them because they are provably the same address.\nBut the important thing is to fix this regression (where we warn on\ncompletely valid code in the Linux kernel).  Anyway, for further work\non this we don't really need any extra help from special_array_member,\nall code can just check integer_zerop (TYPE_SIZE_UNIT (TREE_TYPE (type))),\nit doesn't depend on the position of the members etc.\n\n2023-03-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/109215\n\t* tree.h (enum special_array_member): Adjust comments for int_0\n\tand trail_0.\n\t* tree.cc (component_ref_sam_type): Clear zero_elts if memtype\n\thas zero sized element type and the array has variable number of\n\telements or constant one or more elements.\n\t(component_ref_size): Adjust comments, formatting fix.\n\n\t* gcc.dg/Wzero-length-array-bounds-3.c: New test.", "tree": {"sha": "eb6ed004893ae83f1b0fbc80296d8eabb2b75d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb6ed004893ae83f1b0fbc80296d8eabb2b75d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03041e0361cbdd7f541f2f39060759aad866ed58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03041e0361cbdd7f541f2f39060759aad866ed58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03041e0361cbdd7f541f2f39060759aad866ed58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03041e0361cbdd7f541f2f39060759aad866ed58/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0395e1364dd969e5845d4b9198e6f8c28b297d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0395e1364dd969e5845d4b9198e6f8c28b297d36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0395e1364dd969e5845d4b9198e6f8c28b297d36"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "9292d182e37bd2463b085ab77e487c8592215d33", "filename": "gcc/testsuite/gcc.dg/Wzero-length-array-bounds-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03041e0361cbdd7f541f2f39060759aad866ed58/gcc%2Ftestsuite%2Fgcc.dg%2FWzero-length-array-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03041e0361cbdd7f541f2f39060759aad866ed58/gcc%2Ftestsuite%2Fgcc.dg%2FWzero-length-array-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWzero-length-array-bounds-3.c?ref=03041e0361cbdd7f541f2f39060759aad866ed58", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/109215 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+struct S {};\n+struct T { struct S s[3]; struct S t; };\n+void foo (struct S *);\n+\n+void\n+bar (struct T *t)\n+{\n+  foo (&t->s[2]);\t/* { dg-bogus \"array subscript 2 is outside the bounds of an interior zero-length array\" } */\n+}\n+\n+void\n+baz (struct T *t)\n+{\n+  foo (&t->s[3]);\t/* { dg-error \"\" \"\" { xfail *-*-* } } */\n+}"}, {"sha": "207293c48cba64c973d379779e69159eefdb1088", "filename": "gcc/tree.cc", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03041e0361cbdd7f541f2f39060759aad866ed58/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03041e0361cbdd7f541f2f39060759aad866ed58/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=03041e0361cbdd7f541f2f39060759aad866ed58", "patch": "@@ -13032,22 +13032,35 @@ component_ref_sam_type (tree ref)\n \treturn sam_type;\n \n       bool trailing = false;\n-      (void)array_ref_flexible_size_p (ref, &trailing);\n-      bool zero_length = integer_zerop (memsize);\n-      if (!trailing && !zero_length)\n-\t/* MEMBER is an interior array with\n-\t  more than one element.  */\n+      (void) array_ref_flexible_size_p (ref, &trailing);\n+      bool zero_elts = integer_zerop (memsize);\n+      if (zero_elts && integer_zerop (TYPE_SIZE_UNIT (TREE_TYPE (memtype))))\n+\t{\n+\t  /* If array element has zero size, verify if it is a flexible\n+\t     array member or zero length array.  Clear zero_elts if\n+\t     it has one or more members or is a VLA member.  */\n+\t  if (tree dom = TYPE_DOMAIN (memtype))\n+\t    if (tree min = TYPE_MIN_VALUE (dom))\n+\t      if (tree max = TYPE_MAX_VALUE (dom))\n+\t\tif (TREE_CODE (min) != INTEGER_CST\n+\t\t    || TREE_CODE (max) != INTEGER_CST\n+\t\t    || !((integer_zerop (min) && integer_all_onesp (max))\n+\t\t\t || tree_int_cst_lt (max, min)))\n+\t\t  zero_elts = false;\n+\t}\n+      if (!trailing && !zero_elts)\n+\t/* MEMBER is an interior array with more than one element.  */\n \treturn special_array_member::int_n;\n \n-      if (zero_length)\n+      if (zero_elts)\n \t{\n \t  if (trailing)\n \t    return special_array_member::trail_0;\n \t  else\n \t    return special_array_member::int_0;\n \t}\n \n-      if (!zero_length)\n+      if (!zero_elts)\n \tif (tree dom = TYPE_DOMAIN (memtype))\n \t  if (tree min = TYPE_MIN_VALUE (dom))\n \t    if (tree max = TYPE_MAX_VALUE (dom))\n@@ -13114,22 +13127,22 @@ component_ref_size (tree ref, special_array_member *sam /* = NULL */)\n \n       tree afield_decl = TREE_OPERAND (ref, 1);\n       gcc_assert (TREE_CODE (afield_decl) == FIELD_DECL);\n-      /* if the trailing array is a not a flexible array member, treat it as\n+      /* If the trailing array is a not a flexible array member, treat it as\n \t a normal array.  */\n       if (DECL_NOT_FLEXARRAY (afield_decl)\n \t  && *sam != special_array_member::int_0)\n \treturn memsize;\n \n       if (*sam == special_array_member::int_0)\n-\t  memsize = NULL_TREE;\n+\tmemsize = NULL_TREE;\n \n       /* For a reference to a flexible array member of a union\n \t use the size of the union instead of the size of the member.  */\n       if (TREE_CODE (argtype) == UNION_TYPE)\n \tmemsize = TYPE_SIZE_UNIT (argtype);\n     }\n \n-  /* MEMBER is either a bona fide flexible array member, or a zero-length\n+  /* MEMBER is either a bona fide flexible array member, or a zero-elements\n      array member, or an array of length one treated as such.  */\n \n   /* If the reference is to a declared object and the member a true"}, {"sha": "abcdb5638d49aea4ccc46efa8e540b1fa78aa27a", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03041e0361cbdd7f541f2f39060759aad866ed58/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03041e0361cbdd7f541f2f39060759aad866ed58/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=03041e0361cbdd7f541f2f39060759aad866ed58", "patch": "@@ -5579,8 +5579,8 @@ extern tree component_ref_field_offset (tree);\n enum struct special_array_member\n   {\n     none,\t/* Not a special array member.  */\n-    int_0,\t/* Interior array member with size zero.  */\n-    trail_0,\t/* Trailing array member with size zero.  */\n+    int_0,\t/* Interior array member with zero elements.  */\n+    trail_0,\t/* Trailing array member with zero elements.  */\n     trail_1,\t/* Trailing array member with one element.  */\n     trail_n,\t/* Trailing array member with two or more elements.  */\n     int_n\t/* Interior array member with one or more elements.  */"}]}