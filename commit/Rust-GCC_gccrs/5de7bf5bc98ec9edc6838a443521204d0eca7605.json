{"sha": "5de7bf5bc98ec9edc6838a443521204d0eca7605", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRlN2JmNWJjOThlYzllZGM2ODM4YTQ0MzUyMTIwNGQwZWNhNzYwNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-05T18:13:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-05T18:13:29Z"}, "message": "expand: Fold x - y < 0 to x < y during expansion [PR94802]\n\nMy earlier patch to simplify x - y < 0 etc. for signed subtraction\nwith undefined overflow into x < y in match.pd regressed some tests,\neven when it was guarded to be post-IPA, the following patch thus\nattempts to optimize that during expansion instead (which is the last\ntime we can do it, afterwards we lose the information whether it was\nx - y < 0 or (int) ((unsigned) x - y) < 0 for which we couldn't\noptimize it.\n\n2021-01-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94802\n\t* expr.h (maybe_optimize_sub_cmp_0): Declare.\n\t* expr.c: Include tree-pretty-print.h and flags.h.\n\t(maybe_optimize_sub_cmp_0): New function.\n\t(do_store_flag): Use it.\n\t* cfgexpand.c (expand_gimple_cond): Likewise.\n\n\t* gcc.target/i386/pr94802.c: New test.\n\t* gcc.dg/Wstrict-overflow-25.c: Remove xfail.", "tree": {"sha": "388829cc39978cb2685f30f05b83652575aec353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/388829cc39978cb2685f30f05b83652575aec353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5de7bf5bc98ec9edc6838a443521204d0eca7605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de7bf5bc98ec9edc6838a443521204d0eca7605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de7bf5bc98ec9edc6838a443521204d0eca7605", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de7bf5bc98ec9edc6838a443521204d0eca7605/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b577a17b26347e78c8b9167f24fc5c9d9724270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b577a17b26347e78c8b9167f24fc5c9d9724270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b577a17b26347e78c8b9167f24fc5c9d9724270"}], "stats": {"total": 111, "additions": 110, "deletions": 1}, "files": [{"sha": "b73019b241fe35c0a997b2c027c16fd1e22ddcca", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de7bf5bc98ec9edc6838a443521204d0eca7605/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de7bf5bc98ec9edc6838a443521204d0eca7605/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=5de7bf5bc98ec9edc6838a443521204d0eca7605", "patch": "@@ -2621,6 +2621,14 @@ expand_gimple_cond (basic_block bb, gcond *stmt)\n       && TREE_CODE (op1) == INTEGER_CST)\n     code = maybe_optimize_mod_cmp (code, &op0, &op1);\n \n+  /* Optimize (x - y) < 0 into x < y if x - y has undefined overflow.  */\n+  if (!TYPE_UNSIGNED (TREE_TYPE (op0))\n+      && (code == LT_EXPR || code == LE_EXPR\n+\t  || code == GT_EXPR || code == GE_EXPR)\n+      && integer_zerop (op1)\n+      && TREE_CODE (op0) == SSA_NAME)\n+    maybe_optimize_sub_cmp_0 (code, &op0, &op1);\n+\n   last2 = last = get_last_insn ();\n \n   extract_true_false_edges_from_block (bb, &true_edge, &false_edge);"}, {"sha": "04ef5ad114d0662948c896cdbf58e67737b39c7e", "filename": "gcc/expr.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de7bf5bc98ec9edc6838a443521204d0eca7605/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de7bf5bc98ec9edc6838a443521204d0eca7605/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=5de7bf5bc98ec9edc6838a443521204d0eca7605", "patch": "@@ -62,6 +62,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ccmp.h\"\n #include \"gimple-fold.h\"\n #include \"rtx-vector-builder.h\"\n+#include \"tree-pretty-print.h\"\n+#include \"flags.h\"\n \n \n /* If this is nonzero, we do not bother generating VOLATILE\n@@ -12275,6 +12277,37 @@ maybe_optimize_mod_cmp (enum tree_code code, tree *arg0, tree *arg1)\n   *arg1 = c4;\n   return code == EQ_EXPR ? LE_EXPR : GT_EXPR;\n }\n+\n+/* Optimize x - y < 0 into x < 0 if x - y has undefined overflow.  */\n+\n+void\n+maybe_optimize_sub_cmp_0 (enum tree_code code, tree *arg0, tree *arg1)\n+{\n+  gcc_checking_assert (code == GT_EXPR || code == GE_EXPR\n+\t\t       || code == LT_EXPR || code == LE_EXPR);\n+  gcc_checking_assert (integer_zerop (*arg1));\n+\n+  if (!optimize)\n+    return;\n+\n+  gimple *stmt = get_def_for_expr (*arg0, MINUS_EXPR);\n+  if (stmt == NULL)\n+    return;\n+\n+  tree treeop0 = gimple_assign_rhs1 (stmt);\n+  tree treeop1 = gimple_assign_rhs2 (stmt);\n+  if (!TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (treeop0)))\n+    return;\n+\n+  if (issue_strict_overflow_warning (WARN_STRICT_OVERFLOW_COMPARISON))\n+    warning_at (gimple_location (stmt), OPT_Wstrict_overflow,\n+\t\t\"assuming signed overflow does not occur when \"\n+\t\t\"simplifying %<X - Y %s 0%> to %<X %s Y%>\",\n+\t\top_symbol_code (code), op_symbol_code (code));\n+\n+  *arg0 = treeop0;\n+  *arg1 = treeop1;\n+}\n \f\n /* Generate code to calculate OPS, and exploded expression\n    using a store-flag instruction and return an rtx for the result.\n@@ -12363,6 +12396,14 @@ do_store_flag (sepops ops, rtx target, machine_mode mode)\n \t}\n     }\n \n+  /* Optimize (x - y) < 0 into x < y if x - y has undefined overflow.  */\n+  if (!unsignedp\n+      && (ops->code == LT_EXPR || ops->code == LE_EXPR\n+\t  || ops->code == GT_EXPR || ops->code == GE_EXPR)\n+      && integer_zerop (arg1)\n+      && TREE_CODE (arg0) == SSA_NAME)\n+    maybe_optimize_sub_cmp_0 (ops->code, &arg0, &arg1);\n+\n   /* Get the rtx comparison code to use.  We know that EXP is a comparison\n      operation of some type.  Some comparisons against 1 and -1 can be\n      converted to comparisons with zero.  Do so here so that the tests"}, {"sha": "1f0177a4cfa5da0daf02bf25e1368bcc260d03c2", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de7bf5bc98ec9edc6838a443521204d0eca7605/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de7bf5bc98ec9edc6838a443521204d0eca7605/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=5de7bf5bc98ec9edc6838a443521204d0eca7605", "patch": "@@ -298,6 +298,7 @@ extern tree string_constant (tree, tree *, tree *, tree *);\n extern tree byte_representation (tree, tree *, tree *, tree *);\n \n extern enum tree_code maybe_optimize_mod_cmp (enum tree_code, tree *, tree *);\n+extern void maybe_optimize_sub_cmp_0 (enum tree_code, tree *, tree *);\n \n /* Two different ways of generating switch statements.  */\n extern int try_casesi (tree, tree, tree, tree, rtx, rtx, rtx, profile_probability);"}, {"sha": "00916446371a7399be5ae0807ad4b9113b017b62", "filename": "gcc/testsuite/gcc.dg/Wstrict-overflow-25.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de7bf5bc98ec9edc6838a443521204d0eca7605/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de7bf5bc98ec9edc6838a443521204d0eca7605/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-25.c?ref=5de7bf5bc98ec9edc6838a443521204d0eca7605", "patch": "@@ -7,5 +7,5 @@\n int\n foo (int x, int y)\n {\n-  return x - y < 0; /* { dg-warning \"assuming signed overflow does not occur\" \"correct warning\" { xfail *-*-* } } */\n+  return x - y < 0; /* { dg-warning \"assuming signed overflow does not occur\" \"correct warning\" } */\n }"}, {"sha": "6c1bc669f9a2fd7cd419bb674e62ee53d62169af", "filename": "gcc/testsuite/gcc.target/i386/pr94802.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de7bf5bc98ec9edc6838a443521204d0eca7605/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94802.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de7bf5bc98ec9edc6838a443521204d0eca7605/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94802.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94802.c?ref=5de7bf5bc98ec9edc6838a443521204d0eca7605", "patch": "@@ -0,0 +1,59 @@\n+/* PR tree-optimization/94802 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-not \"\\ttestl\\t\" } } */\n+/* { dg-final { scan-assembler-times \"\\tcmpl\\t\" 8 } } */\n+\n+void foo (void);\n+\n+int\n+f1 (int a, int b)\n+{\n+  return (a - b) >= 0;\n+}\n+\n+int\n+f2 (int a, int b)\n+{\n+  return (a - b) > 0;\n+}\n+\n+int\n+f3 (int a, int b)\n+{\n+  return (a - b) <= 0;\n+}\n+\n+int\n+f4 (int a, int b)\n+{\n+  return (a - b) < 0;\n+}\n+\n+void\n+f5 (int a, int b)\n+{\n+  if ((a - b) >= 0)\n+    foo ();\n+}\n+\n+void\n+f6 (int a, int b)\n+{\n+  if ((a - b) > 0)\n+    foo ();\n+}\n+\n+void\n+f7 (int a, int b)\n+{\n+  if ((a - b) <= 0)\n+    foo ();\n+}\n+\n+void\n+f8 (int a, int b)\n+{\n+  if ((a - b) < 0)\n+    foo ();\n+}"}]}