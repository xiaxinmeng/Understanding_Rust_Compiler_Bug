{"sha": "747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ3YjlmNTUzYWFmYTliM2U0MjBkNTRjOGM3ZDlhNWViYTBlZGEwYg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-03-16T02:37:09Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-03-16T02:37:09Z"}, "message": "config.gcc (*-*-darwin*): Don't build crt2.o for all Darwin ports.\n\n2006-03-15  Geoffrey Keating  <geoffk@apple.com>\n\n\t* config.gcc (*-*-darwin*): Don't build crt2.o for all Darwin ports.\n\tDo switch on default_use_cxa_atexit.\n\t(powerpc*-*-darwin*): Build crt2.o on powerpc.\n\t* config/darwin-crt3.o: New.\n\t* config/darwin.h (LINK_SPEC): If -shared-libgcc, make linker default\n\tto 10.3.  Pass '-multiply_defined suppress' if crt3.o is in use.\n\t(STARTFILE_SPEC): Add crt3.o when -shared-libgcc and appropriate\n\tOS version.\n\t* config/rs6000/t-darwin: Move crt2.o building to here.\n\t* config/rs6000/darwin.h (C_COMMON_OVERRIDE_OPTIONS): Update\n\tMac OS version for using __cxa_get_exception_ptr.  Don't test versions\n\tof __cxa_atexit.\n\n2006-03-15  Geoffrey Keating  <geoffk@apple.com>\n\n\t* g++.old-deja/g++.other/init18.C: New.\n\t* g++.old-deja/g++.other/init5.C: Remove xfail.\n\nFrom-SVN: r112121", "tree": {"sha": "b6ff2fd69076032fa47ae9dc5b1da921c649b574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6ff2fd69076032fa47ae9dc5b1da921c649b574"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "289e97d2c542e2cda0dc64070f4ee1f2e6ed4c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289e97d2c542e2cda0dc64070f4ee1f2e6ed4c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289e97d2c542e2cda0dc64070f4ee1f2e6ed4c58"}], "stats": {"total": 320, "additions": 296, "deletions": 24}, "files": [{"sha": "9908e3a3cddf51038bd23f033d80f48e2c2ba26a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "patch": "@@ -1,3 +1,18 @@\n+2006-03-15  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config.gcc (*-*-darwin*): Don't build crt2.o for all Darwin ports.\n+\tDo switch on default_use_cxa_atexit.\n+\t(powerpc*-*-darwin*): Build crt2.o on powerpc.\n+\t* config/darwin-crt3.o: New.\n+\t* config/darwin.h (LINK_SPEC): If -shared-libgcc, make linker default\n+\tto 10.3.  Pass '-multiply_defined suppress' if crt3.o is in use.\n+\t(STARTFILE_SPEC): Add crt3.o when -shared-libgcc and appropriate\n+\tOS version.\n+\t* config/rs6000/t-darwin: Move crt2.o building to here.\n+\t* config/rs6000/darwin.h (C_COMMON_OVERRIDE_OPTIONS): Update\n+\tMac OS version for using __cxa_get_exception_ptr.  Don't test versions\n+\tof __cxa_atexit.\n+\n 2006-03-15  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config/vax/vax.c (nonindexed_address_p): Change logical negation"}, {"sha": "78a7cc1803c6e02005c16ae6ab138d3f9aa59f75", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "patch": "@@ -368,8 +368,8 @@ case ${target} in\n   extra_options=\"${extra_options} darwin.opt\"\n   c_target_objs=\"darwin-c.o\"\n   cxx_target_objs=\"darwin-c.o\"\n-  extra_parts=\"crt2.o\"\n   extra_objs=\"darwin.o\"\n+  default_use_cxa_atexit=yes\n   case ${enable_threads} in\n     \"\" | yes | posix) thread_file='posix' ;;\n   esac\n@@ -1664,6 +1664,7 @@ powerpc-*-beos*)\n \t;;\n powerpc-*-darwin*)\n \textra_options=\"${extra_options} rs6000/darwin.opt\"\n+\textra_parts=\"crt2.o\"\n \tcase ${target} in\n \t  *-darwin1[0-9]* | *-darwin[8-9]*)\n \t    tmake_file=\"${tmake_file} rs6000/t-darwin8\" "}, {"sha": "698b375c69c412ad1ef9dc367bb865e68cd100b9", "filename": "gcc/config/darwin-crt3.c", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig%2Fdarwin-crt3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig%2Fdarwin-crt3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-crt3.c?ref=747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "patch": "@@ -0,0 +1,208 @@\n+/* __cxa_atexit backwards-compatibility support for Darwin.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+/* It is incorrect to include config.h here, because this file is being\n+   compiled for the target, and hence definitions concerning only the host\n+   do not apply.  */\n+\n+#include \"tconfig.h\"\n+#include \"tsystem.h\"\n+\n+#include <dlfcn.h>\n+#include <stdbool.h>\n+#include <stdlib.h>\n+\n+/* This file works around two different problems.\n+\n+   The first problem is that there is no __cxa_atexit on Mac OS versions\n+   before 10.4.  It fixes this by providing one, and having it called from\n+   a destructor.  This is not quite as good as having a real __cxa_atexit,\n+   but it's good enough to imitate the behaviour that you'd get if\n+   you didn't have one.\n+\n+   The second problem is that on 10.4 Mac OS versions, __cxa_finalize\n+   doesn't work right: it doesn't run routines that were registered\n+   while other atexit routines are running.  This is worked around by\n+   installing our own handler so that it runs last, and repeatedly\n+   running __cxa_finalize until no new calls to __cxa_atexit are made.  */\n+\n+typedef int (*cxa_atexit_p)(void (*func) (void*), void* arg, void* dso);\n+\n+#ifdef __ppc__\n+void __cxa_finalize (void* dso) __attribute__((weak));\n+#else\n+void __cxa_finalize (void* dso);\n+#endif\n+\n+/* new_atexit_routines is set if __cxa_finalize exists in the system C\n+   library and our copy of __cxa_atexit has been called.  */\n+\n+static bool new_atexit_routines;\n+\n+/* first_atexit_handler is called after all other atexit routines\n+   that were registered before __cxa_finalize is called.\n+   It may be called more than once, but is not re-entered.  */\n+\n+static void\n+first_atexit_handler(void* dso)\n+{\n+  /* Keep running __cxa_finalize until no new atexit routines are\n+     registered.  \n+     Note that this means __cxa_finalize will be called at least twice,\n+     even if the first call didn't register any new routines.  */\n+  while (new_atexit_routines) {\n+    new_atexit_routines = false;\n+    __cxa_finalize (dso);\n+  };\n+}\n+\n+/* This is our wrapper around __cxa_atexit that's called if __cxa_finalize\n+   exists in the system library.  All it does is, on its first call,\n+   install first_atexit_handler; and on every call, set new_atexit_routines\n+   and pass control to the system __cxa_atexit.\n+   This proves to be somewhat more complicated than you might expect,\n+   because it may be called in a multithreaded environment.  Fortunately\n+   it turns out to be possible to do what's needed without resorting\n+   to locking.  */\n+\n+static int\n+cxa_atexit_wrapper (void (*func) (void*), void* arg, void* dso)\n+{\n+  static volatile cxa_atexit_p real_cxa_atexit;\n+  cxa_atexit_p auto_cxa_atexit = real_cxa_atexit;\n+  if (! auto_cxa_atexit)\n+    {\n+      void* handle = dlopen (\"/usr/lib/libSystem.B.dylib\", RTLD_NOLOAD);\n+      if (! handle)\n+\treturn -1;\n+      \n+      auto_cxa_atexit = (cxa_atexit_p)dlsym (handle, \"__cxa_atexit\");\n+      if (! auto_cxa_atexit)\n+\treturn -1;\n+    }\n+  /* At this point, auto_cxa_atexit contains the address of\n+     the system __cxa_atexit.  */\n+  if (! real_cxa_atexit)\n+    {\n+      /* Install our handler above before any other handlers\n+\t for this image, so it will be called last.  */\n+      int result = (*auto_cxa_atexit)(first_atexit_handler, dso, dso);\n+      if (result != 0)\n+\treturn result;\n+      /* Now set the global real_cxa_atexit to prevent further\n+\t installations of first_atexit_handler.  Do this after\n+\t the installation so that if another thread sees it is set,\n+\t it can be sure that first_atexit_handler really has been\n+\t installed.  */\n+      real_cxa_atexit = auto_cxa_atexit;\n+    }\n+  /* At this point, we know that first_atexit_handler has been\n+     installed at least once, and real_cxa_atexit is not NULL.  */\n+  /* It's not necessary to mark new_atexit_routines as volatile, so long\n+     as this write eventually happens before this shared object is\n+     unloaded.  */\n+  new_atexit_routines = true;\n+  /* Call the original __cxa_atexit for this function.  */\n+  return (*auto_cxa_atexit)(func, arg, dso);\n+}\n+\f\n+#ifdef __ppc__\n+/* This code is used while running on 10.3.9, when __cxa_atexit doesn't\n+   exist in the system library.  10.3.9 only supported regular PowerPC,\n+   so this code isn't necessary on x86 or ppc64.  */\n+\n+/* This structure holds a routine to call.  */\n+struct atexit_routine\n+{\n+  struct atexit_routine * next;\n+  void (*func)(void *);\n+  void * arg;\n+};\n+\n+static struct atexit_routine * volatile atexit_routines_list;\n+\n+/* If __cxa_atexit doesn't exist at all in the system library, this\n+   routine is used; it completely emulates __cxa_atexit.  \n+\n+   This routine has to be thread-safe, but fortunately this just means\n+   that it has to do atomic list insertion.  */\n+\n+static int\n+cxa_atexit_substitute (void (*func) (void*), void* arg,\n+\t\t       /* The 'dso' value will always be equal to this\n+\t\t\t  object's __dso_handle.  */\n+\t\t       void* dso __attribute__((unused)))\n+{\n+  struct atexit_routine * s = malloc (sizeof (struct atexit_routine));\n+  struct atexit_routine * next, * old_next;\n+  if (!s)\n+    return -1;\n+  s->func = func;\n+  s->arg = arg;\n+  next = atexit_routines_list;\n+  do {\n+    s->next = old_next = next;\n+    next = __sync_val_compare_and_swap (&atexit_routines_list, old_next, s);\n+  } while (next != old_next);\n+  return 0;\n+}\n+\n+/* The routines added in cxa_atexit_substitute get run here, in a destructor.\n+   This routine doesn't have to be thread-safe.  */\n+\n+static void cxa_dtor (void) __attribute__((destructor));\n+static void\n+cxa_dtor (void)\n+{\n+  while (atexit_routines_list)\n+    {\n+      struct atexit_routine * working_list = atexit_routines_list;\n+      atexit_routines_list = NULL;\n+      while (working_list)\n+\t{\n+\t  struct atexit_routine * called_routine = working_list;\n+\t  working_list->func (working_list->arg);\n+\t  working_list = working_list->next;\n+\t  free (called_routine);\n+\t}\n+    }\n+}\n+#endif\n+\n+int __cxa_atexit (void (*func) (void*), void* arg, \n+\t\t  void* dso) __attribute__((visibility(\"hidden\")));\n+int\n+__cxa_atexit (void (*func) (void*), void* arg, void* dso)\n+{\n+#ifdef __ppc__\n+  if (! __cxa_finalize)\n+    return cxa_atexit_substitute (func, arg, dso);\n+#endif\n+  return cxa_atexit_wrapper (func, arg, dso);\n+}"}, {"sha": "edced4d80cf4b92b4a40bc1ea67327091ed77fc5", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "patch": "@@ -262,9 +262,13 @@ Boston, MA 02110-1301, USA.  */\n    %{Zimage_base*:-image_base %*} \\\n    %{Zinit*:-init %*} \\\n    %{mmacosx-version-min=*:-macosx_version_min %*} \\\n+   %{!mmacosx-version-min=*:%{shared-libgcc:-macosx_version_min 10.3}} \\\n    %{nomultidefs} \\\n    %{Zmulti_module:-multi_module} %{Zsingle_module:-single_module} \\\n    %{Zmultiply_defined*:-multiply_defined %*} \\\n+   %{!Zmultiply_defined*:%{shared-libgcc: \\\n+     %:version-compare(< 10.5 mmacosx-version-min= -multiply_defined) \\\n+     %:version-compare(< 10.5 mmacosx-version-min= suppress)}} \\\n    %{Zmultiplydefinedunused*:-multiply_defined_unused %*} \\\n    %{prebind} %{noprebind} %{nofixprebinding} %{prebind_all_twolevel_modules} \\\n    %{read_only_relocs} \\\n@@ -319,19 +323,25 @@ Boston, MA 02110-1301, USA.  */\n        %:version-compare(>= 10.5 mmacosx-version-min= -lgcc_s.10.5)\t   \\\n        -lgcc}\"\n \n-/* We specify crt0.o as -lcrt0.o so that ld will search the library path.  */\n+/* We specify crt0.o as -lcrt0.o so that ld will search the library path.\n+\n+   crt3.o provides __cxa_atexit on systems that don't have it.  Since\n+   it's only used with C++, which requires passing -shared-libgcc, key\n+   off that to avoid unnecessarily adding a destructor to every\n+   powerpc program built.  */\n \n #undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC  \\\n-  \"%{!Zdynamiclib:%{Zbundle:%{!static:-lbundle1.o}} \\\n-     %{!Zbundle:%{pg:%{static:-lgcrt0.o} \\\n-                     %{!static:%{object:-lgcrt0.o} \\\n-                               %{!object:%{preload:-lgcrt0.o} \\\n-                                 %{!preload:-lgcrt1.o %(darwin_crt2)}}}} \\\n-                %{!pg:%{static:-lcrt0.o} \\\n-                      %{!static:%{object:-lcrt0.o} \\\n-                                %{!object:%{preload:-lcrt0.o} \\\n-                                  %{!preload:-lcrt1.o %(darwin_crt2)}}}}}}\"\n+#define STARTFILE_SPEC\t\t\t\t\t\t\t    \\\n+  \"%{!Zdynamiclib:%{Zbundle:%{!static:-lbundle1.o}}\t\t\t    \\\n+     %{!Zbundle:%{pg:%{static:-lgcrt0.o}\t\t\t\t    \\\n+                     %{!static:%{object:-lgcrt0.o}\t\t\t    \\\n+                               %{!object:%{preload:-lgcrt0.o}\t\t    \\\n+                                 %{!preload:-lgcrt1.o %(darwin_crt2)}}}}    \\\n+                %{!pg:%{static:-lcrt0.o}\t\t\t\t    \\\n+                      %{!static:%{object:-lcrt0.o}\t\t\t    \\\n+                                %{!object:%{preload:-lcrt0.o}\t\t    \\\n+                                  %{!preload:-lcrt1.o %(darwin_crt2)}}}}}}  \\\n+  %{shared-libgcc:%:version-compare(< 10.5 mmacosx-version-min= -lcrt3.o)}\"\n \n /* The native Darwin linker doesn't necessarily place files in the order\n    that they're specified on the link line.  Thus, it is pointless"}, {"sha": "adefe2fdf13745ff5bdd34ab18567e13171135df", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "patch": "@@ -97,17 +97,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define C_COMMON_OVERRIDE_OPTIONS do {\t\t\t\t\t\\\n   /* On powerpc, __cxa_get_exception_ptr is available starting in the\t\\\n-     10.5 libstdc++.dylib.  */\t\t\t\t\t\t\\\n+     10.4.6 libstdc++.dylib.  */\t\t\t\t\t\\\n   if ((! darwin_macosx_version_min\t\t\t\t\t\\\n-       || strverscmp (darwin_macosx_version_min, \"10.5\") < 0)\t\t\\\n+       || strverscmp (darwin_macosx_version_min, \"10.4.6\") < 0)\t\t\\\n       && flag_use_cxa_get_exception_ptr == 2)\t\t\t\t\\\n     flag_use_cxa_get_exception_ptr = 0;\t\t\t\t\t\\\n-  /* On powerpc, __cxa_atexit is available starting in the 10.4\t\t\\\n-     libSystem.dylib.  */\t\t\t\t\t\t\\\n-  if ((! darwin_macosx_version_min\t\t\t\t\t\\\n-       || strverscmp (darwin_macosx_version_min, \"10.4\") < 0)\t\t\\\n-      && flag_use_cxa_atexit == 2)\t\t\t\t\t\\\n-    flag_use_cxa_atexit = 0;\t\t\t\t\t\t\\\n } while (0)\n \n /* Darwin has 128-bit long double support in libc in 10.4 and later."}, {"sha": "8dd9832b9a267b5fa9f538d36cc4a0e8620d1e94", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "patch": "@@ -25,3 +25,9 @@ LIB2ADDEH += $(srcdir)/config/rs6000/darwin-fallback.c\n \n darwin-fpsave.o:\t$(srcdir)/config/rs6000/darwin-asm.h\n darwin-tramp.o:\t\t$(srcdir)/config/rs6000/darwin-asm.h\n+\n+# Explain how to build crt2.o\n+$(T)crt2$(objext): $(srcdir)/config/darwin-crt2.c $(GCC_PASSES) \\\n+\t$(TCONFIG_H) stmp-int-hdrs tsystem.h\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) \\\n+\t  -c $(srcdir)/config/darwin-crt2.c -o $(T)crt2$(objext)"}, {"sha": "5995f30131f56a0d0785c1f9543df3f6223c4dbe", "filename": "gcc/config/t-darwin", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "patch": "@@ -12,11 +12,12 @@ darwin-c.o: $(srcdir)/config/darwin-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \n gt-darwin.h : s-gtype ; @true\n \n-# Explain how to build crt2.o\n-$(T)crt2$(objext): $(srcdir)/config/darwin-crt2.c $(GCC_PASSES) \\\n+# How to build crt3.o\n+EXTRA_MULTILIB_PARTS=crt3.o\n+$(T)crt3$(objext): $(srcdir)/config/darwin-crt3.c $(GCC_PASSES) \\\n \t$(TCONFIG_H) stmp-int-hdrs tsystem.h\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) \\\n-\t  -c $(srcdir)/config/darwin-crt2.c -o $(T)crt2$(objext)\n+\t  -c $(srcdir)/config/darwin-crt3.c -o $(T)crt3$(objext)\n \n # Use unwind-dw2-fde-darwin\n LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde-darwin.c \\"}, {"sha": "6b093acf92edbdf450c469436c9dfa57a9ee80ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "patch": "@@ -1,3 +1,8 @@\n+2006-03-15  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* g++.old-deja/g++.other/init18.C: New.\n+\t* g++.old-deja/g++.other/init5.C: Remove xfail.\n+\n 2006-03-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* g++.dg/opt/pr15551.C: Cleanup temp file."}, {"sha": "64d9f3d24c4f82e38c6e37bdafb6d80d0b507709", "filename": "gcc/testsuite/g++.old-deja/g++.other/init18.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit18.C?ref=747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do run }\n+\n+#include <stdlib.h>\n+\n+static int cnt = 0;\n+\n+class Foo2\n+{\n+\tpublic:\n+\t\tFoo2() {};\n+\t\t~Foo2() { if (++cnt == 2) _Exit (0); };\n+};\n+\n+static Foo2& GetFoo2()\n+{\n+\tstatic Foo2 foo2;\n+\treturn foo2;\n+}\n+\n+class Foo1\n+{\n+\tpublic:\n+\t\tFoo1() {}\n+\t\t~Foo1() { if (++cnt != 1) abort(); GetFoo2(); };\n+};\n+\n+int main( int argc, const char* argv[] )\n+{\n+\tstatic Foo1 anotherFoo;\n+\texit (1);\n+}\n+"}, {"sha": "27765dc11c717c8acfcf704a2f97aabcd622d724", "filename": "gcc/testsuite/g++.old-deja/g++.other/init5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finit5.C?ref=747b9f553aafa9b3e420d54c8c7d9a5eba0eda0b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { xfail { ! \"powerpc*-*-linux*\" } } }\n+// { dg-do run }\n // Objects must be destructed in decreasing cnt order\n // Original test attributed to James Kanze <jkanze@otelo.ibmmail.com>\n "}]}