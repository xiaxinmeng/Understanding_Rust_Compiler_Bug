{"sha": "88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiMWU0MWMyZDlkMmU5ZjVjMGFlMmQxYTA5ZGE0MWQ3NjE4NDI4MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-09T13:28:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-09T13:28:11Z"}, "message": "Make std::function tolerate semantically non-CopyConstructible objects\n\nTo satisfy the CopyConstructible requirement a callable object stored in\na std::function must behave the same when copied from a const or\nnon-const source. If copying a non-const object doesn't produce an\nequivalent copy then the behaviour is undefined. But we can make our\nstd::function more tolerant of such objects by ensuring we always copy\nfrom a const lvalue.\n\nAdditionally use an if constexpr statement in the _M_get_pointer\nfunction to avoid unnecessary instantiations in the discarded branch.\n\n\t* include/bits/std_function.h (_Base_manager::_M_get_pointer):\n\tUse constexpr if in C++17 mode.\n\t(_Base_manager::_M_clone(_Any_data&, const _Any_data&, true_type)):\n\tCopy from const object.\n\t* testsuite/20_util/function/cons/non_copyconstructible.cc: New.\n\nFrom-SVN: r260080", "tree": {"sha": "e898f8b7f1c15e8de320cf1d3b76ec85331873c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e898f8b7f1c15e8de320cf1d3b76ec85331873c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a296d6d3bdd83a617e789641b828ff53f65a4ec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a296d6d3bdd83a617e789641b828ff53f65a4ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a296d6d3bdd83a617e789641b828ff53f65a4ec6"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "5d6d6ebe175d2a874c8f7c32c6ca0aa1223cbaab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280", "patch": "@@ -1,3 +1,11 @@\n+2018-05-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/std_function.h (_Base_manager::_M_get_pointer):\n+\tUse constexpr if in C++17 mode.\n+\t(_Base_manager::_M_clone(_Any_data&, const _Any_data&, true_type)):\n+\tCopy from const object.\n+\t* testsuite/20_util/function/cons/non_copyconstructible.cc: New.\n+\n 2018-05-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* src/c++11/debug.cc [_GLIBCXX_HAVE_EXECINFO_H]: Include execinfo.h."}, {"sha": "ee94d1ca81e32eae62842808c3f9d620631de1fb", "filename": "libstdc++-v3/include/bits/std_function.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_function.h?ref=88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280", "patch": "@@ -131,8 +131,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class _Function_base\n   {\n   public:\n-    static const std::size_t _M_max_size = sizeof(_Nocopy_types);\n-    static const std::size_t _M_max_align = __alignof__(_Nocopy_types);\n+    static const size_t _M_max_size = sizeof(_Nocopy_types);\n+    static const size_t _M_max_align = __alignof__(_Nocopy_types);\n \n     template<typename _Functor>\n       class _Base_manager\n@@ -150,10 +150,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstatic _Functor*\n \t_M_get_pointer(const _Any_data& __source)\n \t{\n-\t  const _Functor* __ptr =\n-\t    __stored_locally? std::__addressof(__source._M_access<_Functor>())\n-\t    /* have stored a pointer */ : __source._M_access<_Functor*>();\n-\t  return const_cast<_Functor*>(__ptr);\n+\t  if _GLIBCXX17_CONSTEXPR (__stored_locally)\n+\t    {\n+\t      const _Functor& __f = __source._M_access<_Functor>();\n+\t      return const_cast<_Functor*>(std::__addressof(__f));\n+\t    }\n+\t  else // have stored a pointer\n+\t    return __source._M_access<_Functor*>();\n \t}\n \n \t// Clone a location-invariant function object that fits within\n@@ -170,7 +173,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)\n \t{\n \t  __dest._M_access<_Functor*>() =\n-\t    new _Functor(*__source._M_access<_Functor*>());\n+\t    new _Functor(*__source._M_access<const _Functor*>());\n \t}\n \n \t// Destroying a location-invariant object may still require"}, {"sha": "d2a99925c588cecbc84996b4462e852e60ab10f2", "filename": "libstdc++-v3/testsuite/20_util/function/cons/non_copyconstructible.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fnon_copyconstructible.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fnon_copyconstructible.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Fcons%2Fnon_copyconstructible.cc?ref=88b1e41c2d9d2e9f5c0ae2d1a09da41d76184280", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <functional>\n+\n+// This type is not CopyConstructible because copying a non-const lvalue\n+// will call the throwing constructor.\n+struct A\n+{\n+  A() = default;\n+  A(const A&) { } // not trivial, so allocated on the heap by std::function\n+  A(A&) { throw 1; }\n+  void operator()() const { }\n+};\n+\n+int main()\n+{\n+  const A a{};\n+  // Undefined, because std::function requires CopyConstructible:\n+  std::function<void()> f(a);\n+  // This will throw if the object is copied as non-const:\n+  std::function<void()> g(f);\n+}"}]}