{"sha": "32e6a60e3a002b1f48592fd7d83956b98474cb2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJlNmE2MGUzYTAwMmIxZjQ4NTkyZmQ3ZDgzOTU2Yjk4NDc0Y2IyYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-05-13T12:21:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-05-13T12:21:45Z"}, "message": "alloc_traits.h (_S_max_size): Implement LWG 2466.\n\n\t* include/bits/alloc_traits.h (_S_max_size): Implement LWG 2466.\n\t* testsuite/20_util/allocator_traits/members/max_size.cc: Adjust.\n\t* testsuite/23_containers/forward_list/allocator/minimal.cc:\n\tLikewise.\n\t* testsuite/23_containers/map/allocator/minimal.cc: Likewise.\n\t* testsuite/23_containers/multimap/allocator/minimal.cc: Likewise.\n\t* testsuite/23_containers/multiset/allocator/minimal.cc: Likewise.\n\t* testsuite/23_containers/set/allocator/minimal.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/allocator/minimal.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multimap/allocator/minimal.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multiset/allocator/minimal.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_set/allocator/minimal.cc:\n\tLikewise.\n\t* testsuite/util/testsuite_allocator.h: Remove unused parameter.\n\nFrom-SVN: r223154", "tree": {"sha": "c3929cd44f7cef865192adff6ad2d1e4fbfb130b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3929cd44f7cef865192adff6ad2d1e4fbfb130b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32e6a60e3a002b1f48592fd7d83956b98474cb2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e6a60e3a002b1f48592fd7d83956b98474cb2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e6a60e3a002b1f48592fd7d83956b98474cb2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e6a60e3a002b1f48592fd7d83956b98474cb2c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0501dbd932a7e9ac64f14158d9ef998b08d01243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0501dbd932a7e9ac64f14158d9ef998b08d01243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0501dbd932a7e9ac64f14158d9ef998b08d01243"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "4b4ef39debf739beef3cc898c3ceb6aef41e69ca", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -1,5 +1,23 @@\n 2015-05-13  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/alloc_traits.h (_S_max_size): Implement LWG 2466.\n+\t* testsuite/20_util/allocator_traits/members/max_size.cc: Adjust.\n+\t* testsuite/23_containers/forward_list/allocator/minimal.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/map/allocator/minimal.cc: Likewise.\n+\t* testsuite/23_containers/multimap/allocator/minimal.cc: Likewise.\n+\t* testsuite/23_containers/multiset/allocator/minimal.cc: Likewise.\n+\t* testsuite/23_containers/set/allocator/minimal.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/allocator/minimal.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/allocator/minimal.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/allocator/minimal.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/allocator/minimal.cc:\n+\tLikewise.\n+\t* testsuite/util/testsuite_allocator.h: Remove unused parameter.\n+\n \t* acinclude.m4 (GLIBCXX_ENABLE_FILESYSTEM_TS): Re-enable on solaris.\n \t* configure: Regenerate.\n "}, {"sha": "e434261802fcf1b5f5e95616650da1b7a155f69d", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -315,7 +315,12 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_swap,\n \t       typename = _Require<__not_<__has_max_size<_Alloc2>>>>\n \tstatic size_type\n \t_S_max_size(_Alloc2&, ...)\n-\t{ return __gnu_cxx::__numeric_traits<size_type>::__max; }\n+\t{\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 2466. allocator_traits::max_size() default behavior is incorrect\n+\t  return __gnu_cxx::__numeric_traits<size_type>::__max\n+\t    / sizeof(value_type);\n+\t}\n \n       template<typename _Alloc2>\n \tstruct __select_helper"}, {"sha": "862ff4acc668acf5f827e0f193deeac5ebb84968", "filename": "libstdc++-v3/testsuite/20_util/allocator_traits/members/max_size.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fmax_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fmax_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2Fmax_size.cc?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -57,11 +57,22 @@ void test02()\n   typedef std::allocator_traits<unsized_allocator<X>> traits_type;\n   traits_type::allocator_type a;\n   auto size = std::numeric_limits<traits_type::size_type>::max();\n-  VERIFY( traits_type::max_size(a) == size );\n+  VERIFY( traits_type::max_size(a) == size / sizeof(X) );\n+}\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::allocator_traits<unsized_allocator<int>> traits_type;\n+  traits_type::allocator_type a;\n+  auto size = std::numeric_limits<traits_type::size_type>::max();\n+  VERIFY( traits_type::max_size(a) == size / sizeof(int) );\n }\n \n int main()\n {\n   test01();\n   test02();\n+  test03();\n }"}, {"sha": "a6b3ce2c3e7226b74aab7a564b4ac74587ee8372", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fminimal.cc?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -38,7 +38,7 @@ void test01()\n   typedef std::forward_list<T, alloc_type> test_type;\n   test_type v(alloc_type{});\n   v.push_front(T());\n-  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+  VERIFY( v.max_size() < traits_type::max_size(v.get_allocator()) );\n }\n \n int main()"}, {"sha": "3351f70ee0232c60781aa3923c0ea06a1e364403", "filename": "libstdc++-v3/testsuite/23_containers/map/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fallocator%2Fminimal.cc?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -42,7 +42,7 @@ void test01()\n   typedef std::map<T, U, Cmp, alloc_type> test_type;\n   test_type v(alloc_type{});\n   v = { test_type::value_type{} };\n-  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+  VERIFY( v.max_size() < traits_type::max_size(v.get_allocator()) );\n }\n \n int main()"}, {"sha": "1ac12133317370c551e9fad451a374d116010489", "filename": "libstdc++-v3/testsuite/23_containers/multimap/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fallocator%2Fminimal.cc?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -42,7 +42,7 @@ void test01()\n   typedef std::multimap<T, U, Cmp, alloc_type> test_type;\n   test_type v(alloc_type{});\n   v = { test_type::value_type{} };\n-  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+  VERIFY( v.max_size() < traits_type::max_size(v.get_allocator()) );\n }\n \n int main()"}, {"sha": "b8ccb649897781faaa56dfa96d99a4ad10a2da92", "filename": "libstdc++-v3/testsuite/23_containers/multiset/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fallocator%2Fminimal.cc?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -40,7 +40,7 @@ void test01()\n   typedef std::multiset<T, Cmp, alloc_type> test_type;\n   test_type v(alloc_type{});\n   v = { test_type::value_type{} };\n-  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+  VERIFY( v.max_size() < traits_type::max_size(v.get_allocator()) );\n }\n \n int main()"}, {"sha": "4364130699e131fd1521178530f1c81fd3dbbde0", "filename": "libstdc++-v3/testsuite/23_containers/set/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fallocator%2Fminimal.cc?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -40,7 +40,7 @@ void test01()\n   typedef std::set<T, Cmp, alloc_type> test_type;\n   test_type v(alloc_type{});\n   v = { test_type::value_type{} };\n-  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+  VERIFY( v.max_size() < traits_type::max_size(v.get_allocator()) );\n }\n \n int main()"}, {"sha": "918cc8f132f1c32d033fafe57fab27256b061915", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fallocator%2Fminimal.cc?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -53,7 +53,7 @@ void test01()\n   test_type v(alloc_type{});\n   v.emplace(std::piecewise_construct,\n \t    std::make_tuple(T()), std::make_tuple(T()));\n-  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+  VERIFY( v.max_size() < traits_type::max_size(v.get_allocator()) );\n }\n \n int main()"}, {"sha": "4e5bbc753d3e771b3151c9cd9d1d314e1b5bc559", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fallocator%2Fminimal.cc?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -54,7 +54,7 @@ void test01()\n   test_type v(alloc_type{});\n   v.emplace(std::piecewise_construct,\n \t    std::make_tuple(T()), std::make_tuple(T()));\n-  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+  VERIFY( v.max_size() < traits_type::max_size(v.get_allocator()) );\n }\n \n int main()"}, {"sha": "5264168352908714a2e9a66e920866aae93e22ec", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fallocator%2Fminimal.cc?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -52,7 +52,7 @@ void test01()\n   typedef std::unordered_multiset<T, hash, equal_to, alloc_type> test_type;\n   test_type v(alloc_type{});\n   v.insert(T());\n-  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+  VERIFY( v.max_size() < traits_type::max_size(v.get_allocator()) );\n }\n \n int main()"}, {"sha": "666c3efb3accb47f8d2ba3a8079697a84b76dfa8", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fallocator%2Fminimal.cc?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -52,7 +52,7 @@ void test01()\n   typedef std::unordered_set<T, hash, equal_to, alloc_type> test_type;\n   test_type v(alloc_type{});\n   v.insert(T());\n-  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+  VERIFY( v.max_size() < traits_type::max_size(v.get_allocator()) );\n }\n \n int main()"}, {"sha": "090e5919fb988fac107f0cc0f7799604ff2c7800", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e6a60e3a002b1f48592fd7d83956b98474cb2c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=32e6a60e3a002b1f48592fd7d83956b98474cb2c", "patch": "@@ -491,7 +491,7 @@ namespace __gnu_test\n       SimpleAllocator() noexcept { }\n \n       template <class T>\n-        SimpleAllocator(const SimpleAllocator<T>& other) { }\n+        SimpleAllocator(const SimpleAllocator<T>&) { }\n \n       Tp *allocate(std::size_t n)\n       { return std::allocator<Tp>().allocate(n); }"}]}