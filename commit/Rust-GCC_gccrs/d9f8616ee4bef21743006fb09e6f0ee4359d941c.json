{"sha": "d9f8616ee4bef21743006fb09e6f0ee4359d941c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmODYxNmVlNGJlZjIxNzQzMDA2ZmIwOWU2ZjBlZTQzNTlkOTQxYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-12T13:08:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-12T13:08:07Z"}, "message": "[multiple changes]\n\n2013-04-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, (Check_Mode_Restriction_In_Function):\n\tCorrect error message format.\n\n2013-04-12  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb: Minor reformatting.\n\n2013-04-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_elab.adb (Within_Elaborate_All): Do not examine a context\n\titem that has not been analyzed, because the unit may have errors,\n\tor the context item may come from a proper unit inserted at the\n\tpoint of a stub and not analyzed yet.\n\n2013-04-12  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnat1drv.adb, repinfo.adb, repinfo.ads (Repinfo.List_Array_Info,\n\tList_Record_Info): Also include scalar storage order information in\n\toutput.\n\n2013-04-12  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch6.adb (Process_Contract_Cases): Update code to apply to\n\tContract_Cases instead of Contract_Case pragma.\n\nFrom-SVN: r197906", "tree": {"sha": "7ce9964e9eb9986fbc6f92a5d2701cbbdcf61732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ce9964e9eb9986fbc6f92a5d2701cbbdcf61732"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9f8616ee4bef21743006fb09e6f0ee4359d941c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f8616ee4bef21743006fb09e6f0ee4359d941c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f8616ee4bef21743006fb09e6f0ee4359d941c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f8616ee4bef21743006fb09e6f0ee4359d941c/comments", "author": null, "committer": null, "parents": [{"sha": "2eb87017420b4608b8540c46f329cf9c264e1c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eb87017420b4608b8540c46f329cf9c264e1c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eb87017420b4608b8540c46f329cf9c264e1c39"}], "stats": {"total": 264, "additions": 178, "deletions": 86}, "files": [{"sha": "0871311750145537e86406f952ee2e0e407e57f6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d9f8616ee4bef21743006fb09e6f0ee4359d941c", "patch": "@@ -1,3 +1,30 @@\n+2013-04-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, (Check_Mode_Restriction_In_Function):\n+\tCorrect error message format.\n+\n+2013-04-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb: Minor reformatting.\n+\n+2013-04-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_elab.adb (Within_Elaborate_All): Do not examine a context\n+\titem that has not been analyzed, because the unit may have errors,\n+\tor the context item may come from a proper unit inserted at the\n+\tpoint of a stub and not analyzed yet.\n+\n+2013-04-12  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat1drv.adb, repinfo.adb, repinfo.ads (Repinfo.List_Array_Info,\n+\tList_Record_Info): Also include scalar storage order information in\n+\toutput.\n+\n+2013-04-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch6.adb (Process_Contract_Cases): Update code to apply to\n+\tContract_Cases instead of Contract_Case pragma.\n+\n 2013-04-12  Robert Dewar  <dewar@adacore.com>\n \n \t* a-cfdlli.ads, g-socket.adb, s-fileio.adb: Minor reformatting."}, {"sha": "b41e3dd31e892e127fc165aff952dfd5eccfe2af", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=d9f8616ee4bef21743006fb09e6f0ee4359d941c", "patch": "@@ -1259,7 +1259,7 @@ begin\n \n       Errout.Finalize (Last_Call => True);\n       Errout.Output_Messages;\n-      List_Rep_Info;\n+      List_Rep_Info (Ttypes.Bytes_Big_Endian);\n       List_Inlining_Info;\n \n       --  Only write the library if the backend did not generate any error"}, {"sha": "e800859ee818ee413f524953e46142d0693881bc", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 85, "deletions": 32, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=d9f8616ee4bef21743006fb09e6f0ee4359d941c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,22 +29,23 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Alloc;  use Alloc;\n-with Atree;  use Atree;\n-with Casing; use Casing;\n-with Debug;  use Debug;\n-with Einfo;  use Einfo;\n-with Lib;    use Lib;\n-with Namet;  use Namet;\n-with Opt;    use Opt;\n-with Output; use Output;\n-with Sinfo;  use Sinfo;\n-with Sinput; use Sinput;\n-with Snames; use Snames;\n-with Stand;  use Stand;\n-with Table;  use Table;\n-with Uname;  use Uname;\n-with Urealp; use Urealp;\n+with Alloc;   use Alloc;\n+with Atree;   use Atree;\n+with Casing;  use Casing;\n+with Debug;   use Debug;\n+with Einfo;   use Einfo;\n+with Lib;     use Lib;\n+with Namet;   use Namet;\n+with Opt;     use Opt;\n+with Output;  use Output;\n+with Sem_Aux; use Sem_Aux;\n+with Sinfo;   use Sinfo;\n+with Sinput;  use Sinput;\n+with Snames;  use Snames;\n+with Stand;   use Stand;\n+with Table;   use Table;\n+with Uname;   use Uname;\n+with Urealp;  use Urealp;\n \n with Ada.Unchecked_Conversion;\n \n@@ -133,7 +134,7 @@ package body Repinfo is\n    --  Called before outputting anything for an entity. Ensures that\n    --  a blank line precedes the output for a particular entity.\n \n-   procedure List_Entities (Ent : Entity_Id);\n+   procedure List_Entities (Ent : Entity_Id; Bytes_Big_Endian : Boolean);\n    --  This procedure lists the entities associated with the entity E, starting\n    --  with the First_Entity and using the Next_Entity link. If a nested\n    --  package is found, entities within the package are recursively processed.\n@@ -142,7 +143,7 @@ package body Repinfo is\n    --  List name of entity Ent in appropriate case. The name is listed with\n    --  full qualification up to but not including the compilation unit name.\n \n-   procedure List_Array_Info (Ent : Entity_Id);\n+   procedure List_Array_Info (Ent : Entity_Id; Bytes_Big_Endian : Boolean);\n    --  List representation info for array type Ent\n \n    procedure List_Mechanisms (Ent : Entity_Id);\n@@ -152,9 +153,14 @@ package body Repinfo is\n    procedure List_Object_Info (Ent : Entity_Id);\n    --  List representation info for object Ent\n \n-   procedure List_Record_Info (Ent : Entity_Id);\n+   procedure List_Record_Info (Ent : Entity_Id; Bytes_Big_Endian : Boolean);\n    --  List representation info for record type Ent\n \n+   procedure List_Scalar_Storage_Order\n+     (Ent              : Entity_Id;\n+      Bytes_Big_Endian : Boolean);\n+   --  List scalar storage order information for record or array type Ent\n+\n    procedure List_Type_Info (Ent : Entity_Id);\n    --  List type info for type Ent\n \n@@ -286,21 +292,23 @@ package body Repinfo is\n    -- List_Array_Info --\n    ----------------------\n \n-   procedure List_Array_Info (Ent : Entity_Id) is\n+   procedure List_Array_Info (Ent : Entity_Id; Bytes_Big_Endian : Boolean) is\n    begin\n       List_Type_Info (Ent);\n       Write_Str (\"for \");\n       List_Name (Ent);\n       Write_Str (\"'Component_Size use \");\n       Write_Val (Component_Size (Ent));\n       Write_Line (\";\");\n+\n+      List_Scalar_Storage_Order (Ent, Bytes_Big_Endian);\n    end List_Array_Info;\n \n    -------------------\n    -- List_Entities --\n    -------------------\n \n-   procedure List_Entities (Ent : Entity_Id) is\n+   procedure List_Entities (Ent : Entity_Id; Bytes_Big_Endian : Boolean) is\n       Body_E : Entity_Id;\n       E      : Entity_Id;\n \n@@ -379,12 +387,12 @@ package body Repinfo is\n \n                elsif Is_Record_Type (E) then\n                   if List_Representation_Info >= 1 then\n-                     List_Record_Info (E);\n+                     List_Record_Info (E, Bytes_Big_Endian);\n                   end if;\n \n                elsif Is_Array_Type (E) then\n                   if List_Representation_Info >= 1 then\n-                     List_Array_Info (E);\n+                     List_Array_Info (E, Bytes_Big_Endian);\n                   end if;\n \n                elsif Is_Type (E) then\n@@ -411,7 +419,7 @@ package body Repinfo is\n \n                if Ekind (E) = E_Package then\n                   if No (Renamed_Object (E)) then\n-                     List_Entities (E);\n+                     List_Entities (E, Bytes_Big_Endian);\n                   end if;\n \n                --  Recurse into bodies\n@@ -428,12 +436,12 @@ package body Repinfo is\n                        or else\n                      Ekind (E) = E_Protected_Body\n                then\n-                  List_Entities (E);\n+                  List_Entities (E, Bytes_Big_Endian);\n \n                --  Recurse into blocks\n \n                elsif Ekind (E) = E_Block then\n-                  List_Entities (E);\n+                  List_Entities (E, Bytes_Big_Endian);\n                end if;\n             end if;\n \n@@ -461,7 +469,7 @@ package body Repinfo is\n                     and then\n                       Nkind (Parent (Find_Declaration (Body_E))) /= N_Subunit\n                   then\n-                     List_Entities (Body_E);\n+                     List_Entities (Body_E, Bytes_Big_Endian);\n                   end if;\n                end if;\n \n@@ -779,7 +787,7 @@ package body Repinfo is\n    -- List_Record_Info --\n    ----------------------\n \n-   procedure List_Record_Info (Ent : Entity_Id) is\n+   procedure List_Record_Info (Ent : Entity_Id; Bytes_Big_Endian : Boolean) is\n       Comp  : Entity_Id;\n       Cfbit : Uint;\n       Sunit : Uint;\n@@ -963,13 +971,15 @@ package body Repinfo is\n       end loop;\n \n       Write_Line (\"end record;\");\n+\n+      List_Scalar_Storage_Order (Ent, Bytes_Big_Endian);\n    end List_Record_Info;\n \n    -------------------\n    -- List_Rep_Info --\n    -------------------\n \n-   procedure List_Rep_Info is\n+   procedure List_Rep_Info (Bytes_Big_Endian : Boolean) is\n       Col : Nat;\n \n    begin\n@@ -994,15 +1004,15 @@ package body Repinfo is\n                   end loop;\n \n                   Write_Eol;\n-                  List_Entities (Cunit_Entity (U));\n+                  List_Entities (Cunit_Entity (U), Bytes_Big_Endian);\n \n                --  List representation information to file\n \n                else\n                   Create_Repinfo_File_Access.all\n                     (Get_Name_String (File_Name (Source_Index (U))));\n                   Set_Special_Output (Write_Info_Line'Access);\n-                  List_Entities (Cunit_Entity (U));\n+                  List_Entities (Cunit_Entity (U), Bytes_Big_Endian);\n                   Set_Special_Output (null);\n                   Close_Repinfo_File_Access.all;\n                end if;\n@@ -1011,6 +1021,49 @@ package body Repinfo is\n       end if;\n    end List_Rep_Info;\n \n+   -------------------------------\n+   -- List_Scalar_Storage_Order --\n+   -------------------------------\n+\n+   procedure List_Scalar_Storage_Order\n+     (Ent              : Entity_Id;\n+      Bytes_Big_Endian : Boolean)\n+   is\n+      procedure List_Attr (Attr_Name : String);\n+      --  Show attribute definition clause for Attr_Name\n+\n+      ---------------\n+      -- List_Attr --\n+      ---------------\n+\n+      procedure List_Attr (Attr_Name : String) is\n+      begin\n+         Write_Str (\"for \");\n+         List_Name (Ent);\n+         Write_Str (\"'\" & Attr_Name & \" use System.\");\n+         if Bytes_Big_Endian xor Reverse_Storage_Order (Ent) then\n+            Write_Str (\"High\");\n+         else\n+            Write_Str (\"Low\");\n+         end if;\n+         Write_Line (\"_Order_First;\");\n+      end List_Attr;\n+\n+   --  Start of processing for List_Scalar_Storage_Order\n+\n+   begin\n+      if Has_Rep_Item (Ent, Name_Scalar_Storage_Order) then\n+\n+         --  For a record type with explicitly specified scalar storage order,\n+         --  also display explicit Bit_Order.\n+\n+         if Is_Record_Type (Ent) then\n+            List_Attr (\"Bit_Order\");\n+         end if;\n+         List_Attr (\"Scalar_Storage_Order\");\n+      end if;\n+   end List_Scalar_Storage_Order;\n+\n    --------------------\n    -- List_Type_Info --\n    --------------------"}, {"sha": "99fccc34d4a02c7c528a6ecd36c83780c1fb8629", "filename": "gcc/ada/repinfo.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Frepinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Frepinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.ads?ref=d9f8616ee4bef21743006fb09e6f0ee4359d941c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -283,8 +283,9 @@ package Repinfo is\n    -- Compiler Interface --\n    ------------------------\n \n-   procedure List_Rep_Info;\n-   --  Procedure to list representation information\n+   procedure List_Rep_Info (Bytes_Big_Endian : Boolean);\n+   --  Procedure to list representation information. Bytes_Big_Endian is the\n+   --  value from Ttypes (Repinfo cannot have a dependency on Ttypes).\n \n    procedure Tree_Write;\n    --  Writes out internal tables to current tree file using the relevant"}, {"sha": "11667cde467cd8355167dc851bd5f784d028d269", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=d9f8616ee4bef21743006fb09e6f0ee4359d941c", "patch": "@@ -4314,8 +4314,8 @@ package body Sem_Attr is\n                      Arg := Parent (Arg);\n                   end loop;\n \n-                  --  At this point, Parent (Arg) should be a\n-                  --  N_Component_Association. Attribute Old is only allowed in\n+                  --  At this point, Parent (Arg) should be a component\n+                  --  association. Attribute Result is only allowed in\n                   --  the expression part of this association.\n \n                   if Nkind (Parent (Arg)) /= N_Component_Association\n@@ -4731,9 +4731,9 @@ package body Sem_Attr is\n                      Arg := Parent (Arg);\n                   end loop;\n \n-                  --  At this point, Parent (Arg) should be a\n-                  --  N_Component_Association. Attribute Result is only\n-                  --  allowed in the expression part of this association.\n+                  --  At this point, Parent (Arg) should be a component\n+                  --  association. Attribute Result is only allowed in\n+                  --  the expression part of this association.\n \n                   if Nkind (Parent (Arg)) /= N_Component_Association\n                     or else Arg /= Expression (Parent (Arg))"}, {"sha": "c3e7d433ebb60e722fbf60a2a5f791b7ec1d71ce", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 42, "deletions": 35, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d9f8616ee4bef21743006fb09e6f0ee4359d941c", "patch": "@@ -7064,8 +7064,8 @@ package body Sem_Ch6 is\n       --  Last non-trivial postcondition on the subprogram, or else Empty if\n       --  either no non-trivial postcondition or only inherited postconditions.\n \n-      Last_Contract_Case : Node_Id := Empty;\n-      --  Last non-trivial contract-case on the subprogram, or else Empty\n+      Last_Contract_Cases : Node_Id := Empty;\n+      --  Last non-trivial contract-cases on the subprogram, or else Empty\n \n       Attribute_Result_Mentioned : Boolean := False;\n       --  Whether attribute 'Result is mentioned in a non-trivial postcondition\n@@ -7204,51 +7204,58 @@ package body Sem_Ch6 is\n       ----------------------------\n \n       procedure Process_Contract_Cases (Spec : Node_Id) is\n-         Prag : Node_Id;\n-         Arg  : Node_Id;\n+         Prag       : Node_Id;\n+         Aggr       : Node_Id;\n+         Conseq     : Node_Id;\n+         Post_Case  : Node_Id;\n \n          Ignored : Traverse_Final_Result;\n          pragma Unreferenced (Ignored);\n \n       begin\n          Prag := Spec_CTC_List (Contract (Spec));\n          loop\n-            --  Retrieve the Ensures component of the contract-case, if any\n+            if Pragma_Name (Prag) = Name_Contract_Cases then\n \n-            Arg := Get_Ensures_From_CTC_Pragma (Prag);\n+               Aggr := Expression (First\n+                         (Pragma_Argument_Associations (Prag)));\n \n-            --  Ignore trivial contract-case when Ensures component is \"True\"\n-            --  or \"False\".\n+               Post_Case := First (Component_Associations (Aggr));\n+               while Present (Post_Case) loop\n+                  Conseq := Expression (Post_Case);\n \n-            if Pragma_Name (Prag) = Name_Contract_Case\n-              and then not Is_Trivial_Post_Or_Ensures (Expression (Arg))\n-            then\n-               --  Since contract-cases are listed in reverse order, the first\n-               --  contract-case in the list is the last in the source.\n+                  --  Ignore trivial contract-case when consequence is \"True\"\n+                  --  or \"False\".\n \n-               if No (Last_Contract_Case) then\n-                  Last_Contract_Case := Prag;\n-               end if;\n+                  if not Is_Trivial_Post_Or_Ensures (Conseq) then\n \n-               --  For functions, look for presence of 'Result in Ensures\n+                     Last_Contract_Cases := Prag;\n \n-               if Ekind_In (Spec_Id, E_Function, E_Generic_Function) then\n-                  Ignored := Find_Attribute_Result (Arg);\n-               end if;\n+                     --  For functions, look for presence of 'Result in\n+                     --  consequence expression.\n \n-               --  For each individual contract-case, look for presence\n-               --  of an expression that could be evaluated differently\n-               --  in post-state.\n+                     if Ekind_In (Spec_Id, E_Function, E_Generic_Function) then\n+                        Ignored := Find_Attribute_Result (Conseq);\n+                     end if;\n \n-               Post_State_Mentioned := False;\n-               Ignored := Find_Post_State (Arg);\n+                     --  For each individual case, look for presence of an\n+                     --  expression that could be evaluated differently in\n+                     --  post-state.\n \n-               if Post_State_Mentioned then\n-                  No_Warning_On_Some_Postcondition := True;\n-               else\n-                  Error_Msg_N\n-                    (\"`Ensures` component refers only to pre-state??\", Prag);\n-               end if;\n+                     Post_State_Mentioned := False;\n+                     Ignored := Find_Post_State (Conseq);\n+\n+                     if Post_State_Mentioned then\n+                        No_Warning_On_Some_Postcondition := True;\n+                     else\n+                        Error_Msg_N\n+                          (\"contract case refers only to pre-state?T?\",\n+                           Conseq);\n+                     end if;\n+                  end if;\n+\n+                  Next (Post_Case);\n+               end loop;\n             end if;\n \n             Prag := Next_Pragma (Prag);\n@@ -7304,7 +7311,7 @@ package body Sem_Ch6 is\n                      No_Warning_On_Some_Postcondition := True;\n                   else\n                      Error_Msg_N\n-                       (\"postcondition refers only to pre-state??\", Prag);\n+                       (\"postcondition refers only to pre-state?T?\", Prag);\n                   end if;\n                end if;\n             end if;\n@@ -7352,12 +7359,12 @@ package body Sem_Ch6 is\n \n       if Ekind_In (Spec_Id, E_Function, E_Generic_Function)\n         and then (Present (Last_Postcondition)\n-                   or else Present (Last_Contract_Case))\n+                   or else Present (Last_Contract_Cases))\n         and then not Attribute_Result_Mentioned\n         and then No_Warning_On_Some_Postcondition\n       then\n          if Present (Last_Postcondition) then\n-            if Present (Last_Contract_Case) then\n+            if Present (Last_Contract_Cases) then\n                Error_Msg_N\n                  (\"neither function postcondition nor \"\n                   & \"contract cases mention result?T?\", Last_Postcondition);\n@@ -7369,7 +7376,7 @@ package body Sem_Ch6 is\n             end if;\n          else\n             Error_Msg_N\n-              (\"contract cases do not mention result?T?\", Last_Contract_Case);\n+              (\"contract cases do not mention result?T?\", Last_Contract_Cases);\n          end if;\n       end if;\n    end Check_Subprogram_Contract;"}, {"sha": "881fdb1fb73c57adb6a4f9caed372d58bf9c8401", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=d9f8616ee4bef21743006fb09e6f0ee4359d941c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3340,8 +3340,13 @@ package body Sem_Elab is\n               and then Pragma_Name (Item) = Name_Elaborate_All\n             then\n                --  Return if some previous error on the pragma itself\n+               --  The pragma may be unanalyzed, because of a previous error,\n+               --  or if it is the context of a subunit, inherited by its\n+               --  parent.\n \n-               if Error_Posted (Item) then\n+               if Error_Posted (Item)\n+                 or else not Analyzed (Item)\n+               then\n                   return;\n                end if;\n "}, {"sha": "e4e944613f956d35faf47da17a8a69e85f5979f9", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f8616ee4bef21743006fb09e6f0ee4359d941c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d9f8616ee4bef21743006fb09e6f0ee4359d941c", "patch": "@@ -6871,8 +6871,8 @@ package body Sem_Prag is\n                --  declare additional states.\n \n                if Null_Seen then\n-                  Error_Msg_Name_1 := Chars (Pack_Id);\n-                  Error_Msg_N (\"package % has null abstract state\", State);\n+                  Error_Msg_NE\n+                    (\"package & has null abstract state\", State, Pack_Id);\n \n                --  Null states appear as internally generated entities\n \n@@ -6885,9 +6885,9 @@ package body Sem_Prag is\n                   --  non-null states.\n \n                   if Non_Null_Seen then\n-                     Error_Msg_Name_1 := Chars (Pack_Id);\n-                     Error_Msg_N\n-                       (\"package % has non-null abstract state\", State);\n+                     Error_Msg_NE\n+                       (\"package & has non-null abstract state\",\n+                        State, Pack_Id);\n                   end if;\n \n                --  Simple state declaration\n@@ -11364,9 +11364,8 @@ package body Sem_Prag is\n                procedure Check_Mode_Restriction_In_Function (Mode : Node_Id) is\n                begin\n                   if Ekind (Subp_Id) = E_Function then\n-                     Error_Msg_NE\n-                       (\"global mode & not applicable to functions\",\n-                        Mode, Mode);\n+                     Error_Msg_N\n+                       (\"global mode & not applicable to functions\", Mode);\n                   end if;\n                end Check_Mode_Restriction_In_Function;\n "}]}