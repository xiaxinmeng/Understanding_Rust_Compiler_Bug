{"sha": "1a5bac38b5dadab15477a9beb3c888a888539a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE1YmFjMzhiNWRhZGFiMTU0NzdhOWJlYjNjODg4YTg4ODUzOWEyNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-01-31T16:56:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-01-31T16:56:44Z"}, "message": "cp-tree.h (instantiate_decl): Make defer_ok bool.\n\n\t* cp-tree.h (instantiate_decl): Make defer_ok bool.\n\t* pt.c: Fix instantiate_decl calls to pass true/false not 0/1\n\t(instantiate_decl): Simplify and reorder state saving and restoration.\n\nFrom-SVN: r245066", "tree": {"sha": "f66bad555722a385f30fca93a0a3ae283af01fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f66bad555722a385f30fca93a0a3ae283af01fea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a5bac38b5dadab15477a9beb3c888a888539a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5bac38b5dadab15477a9beb3c888a888539a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a5bac38b5dadab15477a9beb3c888a888539a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5bac38b5dadab15477a9beb3c888a888539a26/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f357c61640fc1558985eeca7a66cbe2c0f1ba0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f357c61640fc1558985eeca7a66cbe2c0f1ba0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f357c61640fc1558985eeca7a66cbe2c0f1ba0f"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "5df2f723c711734702c05baac4b231414dd3309d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5bac38b5dadab15477a9beb3c888a888539a26/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5bac38b5dadab15477a9beb3c888a888539a26/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a5bac38b5dadab15477a9beb3c888a888539a26", "patch": "@@ -1,5 +1,9 @@\n 2017-01-31  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.h (instantiate_decl): Make defer_ok bool.\n+\t* pt.c: Fix instantiate_decl calls to pass true/false not 0/1\n+\t(instantiate_decl): Simplify and reorder state saving and restoration.\n+\n \tPR c++/79264\n \t* lambda.c (maybe_generic_this_capture): Deal with template-id-exprs.\n \t* semantics.c (finish_member_declaration): Assert class is being"}, {"sha": "77bf614a8062c2408cb29a54798f1a32979619ee", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5bac38b5dadab15477a9beb3c888a888539a26/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5bac38b5dadab15477a9beb3c888a888539a26/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1a5bac38b5dadab15477a9beb3c888a888539a26", "patch": "@@ -6189,7 +6189,7 @@ extern void do_decl_instantiation\t\t(tree, tree);\n extern void do_type_instantiation\t\t(tree, tree, tsubst_flags_t);\n extern bool always_instantiate_p\t\t(tree);\n extern void maybe_instantiate_noexcept\t\t(tree);\n-extern tree instantiate_decl\t\t\t(tree, int, bool);\n+extern tree instantiate_decl\t\t\t(tree, bool, bool);\n extern int comp_template_parms\t\t\t(const_tree, const_tree);\n extern bool uses_parameter_packs                (tree);\n extern bool template_parameter_pack_p           (const_tree);"}, {"sha": "bd39ee383e1acd19b239dd6fb3f7f67b332d9a9f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5bac38b5dadab15477a9beb3c888a888539a26/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5bac38b5dadab15477a9beb3c888a888539a26/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1a5bac38b5dadab15477a9beb3c888a888539a26", "patch": "@@ -10676,7 +10676,7 @@ instantiate_class_template_1 (tree type)\n \t    {\n \t      /* Set function_depth to avoid garbage collection.  */\n \t      ++function_depth;\n-\t      instantiate_decl (decl, false, false);\n+\t      instantiate_decl (decl, /*defer_ok=*/false, false);\n \t      --function_depth;\n \t    }\n \n@@ -16022,7 +16022,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t  complete_type (tmp);\n \t  for (fn = TYPE_METHODS (tmp); fn; fn = DECL_CHAIN (fn))\n \t    if (!DECL_ARTIFICIAL (fn))\n-\t      instantiate_decl (fn, /*defer_ok*/0, /*expl_inst_class*/false);\n+\t      instantiate_decl (fn, /*defer_ok=*/false,\n+\t\t\t\t/*expl_inst_class=*/false);\n \t}\n       break;\n \n@@ -21946,7 +21947,7 @@ do_decl_instantiation (tree decl, tree storage)\n   check_explicit_instantiation_namespace (result);\n   mark_decl_instantiated (result, extern_p);\n   if (! extern_p)\n-    instantiate_decl (result, /*defer_ok=*/1,\n+    instantiate_decl (result, /*defer_ok=*/true,\n \t\t      /*expl_inst_class_mem_p=*/false);\n }\n \n@@ -21984,7 +21985,7 @@ instantiate_class_member (tree decl, int extern_p)\n {\n   mark_decl_instantiated (decl, extern_p);\n   if (! extern_p)\n-    instantiate_decl (decl, /*defer_ok=*/1,\n+    instantiate_decl (decl, /*defer_ok=*/true,\n \t\t      /*expl_inst_class_mem_p=*/true);\n }\n \n@@ -22405,15 +22406,14 @@ maybe_instantiate_noexcept (tree fn)\n }\n \n /* Produce the definition of D, a _DECL generated from a template.  If\n-   DEFER_OK is nonzero, then we don't have to actually do the\n+   DEFER_OK is true, then we don't have to actually do the\n    instantiation now; we just have to do it sometime.  Normally it is\n    an error if this is an explicit instantiation but D is undefined.\n-   EXPL_INST_CLASS_MEM_P is true iff D is a member of an\n-   explicitly instantiated class template.  */\n+   EXPL_INST_CLASS_MEM_P is true iff D is a member of an explicitly\n+   instantiated class template.  */\n \n tree\n-instantiate_decl (tree d, int defer_ok,\n-\t\t  bool expl_inst_class_mem_p)\n+instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n {\n   tree tmpl = DECL_TI_TEMPLATE (d);\n   tree gen_args;\n@@ -22428,8 +22428,6 @@ instantiate_decl (tree d, int defer_ok,\n   int saved_inhibit_evaluation_warnings = c_inhibit_evaluation_warnings;\n   bool external_p;\n   bool deleted_p;\n-  tree fn_context;\n-  bool nested = false;\n \n   /* This function should only be used to instantiate templates for\n      functions and static member variables.  */\n@@ -22444,7 +22442,7 @@ instantiate_decl (tree d, int defer_ok,\n      if the variable has a constant value the referring expression can\n      take advantage of that fact.  */\n   if (VAR_P (d))\n-    defer_ok = 0;\n+    defer_ok = false;\n \n   /* Don't instantiate cloned functions.  Instead, instantiate the\n      functions they cloned.  */\n@@ -22668,6 +22666,8 @@ instantiate_decl (tree d, int defer_ok,\n \tgoto out;\n     }\n \n+  bool nested;\n+  tree fn_context;\n   fn_context = decl_function_context (d);\n   nested = (current_function_decl != NULL_TREE);\n   vec<tree> omp_privatization_save;\n@@ -22854,16 +22854,16 @@ instantiate_decl (tree d, int defer_ok,\n   else if (nested)\n     pop_function_context ();\n \n-out:\n-  input_location = saved_loc;\n-  cp_unevaluated_operand = saved_unevaluated_operand;\n-  c_inhibit_evaluation_warnings = saved_inhibit_evaluation_warnings;\n-  pop_deferring_access_checks ();\n-  pop_tinst_level ();\n   if (nested)\n     restore_omp_privatization_clauses (omp_privatization_save);\n \n+out:\n+  pop_deferring_access_checks ();\n   timevar_pop (TV_TEMPLATE_INST);\n+  pop_tinst_level ();\n+  input_location = saved_loc;\n+  cp_unevaluated_operand = saved_unevaluated_operand;\n+  c_inhibit_evaluation_warnings = saved_inhibit_evaluation_warnings;\n \n   return d;\n }\n@@ -22919,7 +22919,7 @@ instantiate_pending_templates (int retries)\n \t\t\t fn = TREE_CHAIN (fn))\n \t\t      if (! DECL_ARTIFICIAL (fn))\n \t\t\tinstantiate_decl (fn,\n-\t\t\t\t\t  /*defer_ok=*/0,\n+\t\t\t\t\t  /*defer_ok=*/false,\n \t\t\t\t\t  /*expl_inst_class_mem_p=*/false);\n \t\t  if (COMPLETE_TYPE_P (instantiation))\n \t\t    reconsider = 1;\n@@ -22934,7 +22934,7 @@ instantiate_pending_templates (int retries)\n \t\t{\n \t\t  instantiation\n \t\t    = instantiate_decl (instantiation,\n-\t\t\t\t\t/*defer_ok=*/0,\n+\t\t\t\t\t/*defer_ok=*/false,\n \t\t\t\t\t/*expl_inst_class_mem_p=*/false);\n \t\t  if (DECL_TEMPLATE_INSTANTIATED (instantiation))\n \t\t    reconsider = 1;"}]}