{"sha": "d51b0053f5c1dd2509c69729d3c474b2cf7de66c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUxYjAwNTNmNWMxZGQyNTA5YzY5NzI5ZDNjNDc0YjJjZjdkZTY2Yw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gnu.org", "date": "2002-05-27T20:54:50Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2002-05-27T20:54:50Z"}, "message": "cppexp.c (num_trim): Use 1UL instead of 1 for long int.\n\n2002-05-27  H.J. Lu  (hjl@gnu.org)\n\n\t* cppexp.c (num_trim): Use 1UL instead of 1 for long int.\n\t(num_positive): Likewise.\n\t(num_div_op): Likewise.\n\nFrom-SVN: r53939", "tree": {"sha": "2a4cc25d01e79aca86b02bb4994762c9193fbd91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a4cc25d01e79aca86b02bb4994762c9193fbd91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d51b0053f5c1dd2509c69729d3c474b2cf7de66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51b0053f5c1dd2509c69729d3c474b2cf7de66c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51b0053f5c1dd2509c69729d3c474b2cf7de66c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51b0053f5c1dd2509c69729d3c474b2cf7de66c/comments", "author": null, "committer": null, "parents": [{"sha": "2530d6aa59a7eacc22ec7db611cddf796a694b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2530d6aa59a7eacc22ec7db611cddf796a694b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2530d6aa59a7eacc22ec7db611cddf796a694b56"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "6cd3ce63babe20b3f43338f5100cbe16a5ff2a28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51b0053f5c1dd2509c69729d3c474b2cf7de66c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51b0053f5c1dd2509c69729d3c474b2cf7de66c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d51b0053f5c1dd2509c69729d3c474b2cf7de66c", "patch": "@@ -1,3 +1,9 @@\n+2002-05-27  H.J. Lu  (hjl@gnu.org)\n+\n+\t* cppexp.c (num_trim): Use 1UL instead of 1 for long int.\n+\t(num_positive): Likewise.\n+\t(num_div_op): Likewise.\n+\n 2002-05-27  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-common.c (c_common_init): Always use intmax_t."}, {"sha": "53411fe2ac65305a08b6436c0cf79e3079e6ad71", "filename": "gcc/cppexp.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d51b0053f5c1dd2509c69729d3c474b2cf7de66c/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d51b0053f5c1dd2509c69729d3c474b2cf7de66c/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=d51b0053f5c1dd2509c69729d3c474b2cf7de66c", "patch": "@@ -787,12 +787,12 @@ num_trim (num, precision)\n     {\n       precision -= PART_PRECISION;\n       if (precision < PART_PRECISION)\n-\tnum.high &= (1 << precision) - 1;\n+\tnum.high &= (1UL << precision) - 1;\n     }\n   else\n     {\n       if (precision < PART_PRECISION)\n-\tnum.low &= (1 << precision) - 1;\n+\tnum.low &= (1UL << precision) - 1;\n       num.high = 0;\n     }\n \n@@ -808,10 +808,10 @@ num_positive (num, precision)\n   if (precision > PART_PRECISION)\n     {\n       precision -= PART_PRECISION;\n-      return (num.high & (1 << (precision - 1))) == 0;\n+      return (num.high & (1UL << (precision - 1))) == 0;\n     }\n \n-  return (num.low & (1 << (precision - 1))) == 0;\n+  return (num.low & (1UL << (precision - 1))) == 0;\n }\n \n /* Returns the negative of NUM.  */\n@@ -1245,7 +1245,7 @@ num_div_op (pfile, lhs, rhs, op)\n   if (rhs.high)\n     {\n       i = precision - 1;\n-      mask = 1 << (i - PART_PRECISION);\n+      mask = 1UL << (i - PART_PRECISION);\n       for (; ; i--, mask >>= 1)\n \tif (rhs.high & mask)\n \t  break;\n@@ -1256,7 +1256,7 @@ num_div_op (pfile, lhs, rhs, op)\n \ti = precision - PART_PRECISION - 1;\n       else\n \ti = precision - 1;\n-      mask = 1 << i;\n+      mask = 1UL << i;\n       for (; ; i--, mask >>= 1)\n \tif (rhs.low & mask)\n \t  break;\n@@ -1284,9 +1284,9 @@ num_div_op (pfile, lhs, rhs, op)\n \t{\n \t  lhs = num_binary_op (pfile, lhs, sub, CPP_MINUS);\n \t  if (i >= PART_PRECISION)\n-\t    result.high |= 1 << (i - PART_PRECISION);\n+\t    result.high |= 1UL << (i - PART_PRECISION);\n \t  else\n-\t    result.low |= 1 << i;\n+\t    result.low |= 1UL << i;\n \t}\n       if (i-- == 0)\n \tbreak;"}]}