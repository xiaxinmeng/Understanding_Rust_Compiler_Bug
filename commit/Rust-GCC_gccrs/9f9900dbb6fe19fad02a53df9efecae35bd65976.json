{"sha": "9f9900dbb6fe19fad02a53df9efecae35bd65976", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY5OTAwZGJiNmZlMTlmYWQwMmE1M2RmOWVmZWNhZTM1YmQ2NTk3Ng==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-10-03T17:01:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-10-03T17:01:57Z"}, "message": "testsuite_allocator.h (allocation_tracker): To tracker_allocator_counter.\n\n2006-10-03  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/util/testsuite_allocator.h (allocation_tracker): To\n\ttracker_allocator_counter.\n\t(allocation_tracker::allocationTotal): To get_allocation_count.\n\t(allocation_tracker::deallocationTotal): To get_deallocation_count.\n\t(allocation_tracker::constructCount): To get_construct_count.\n\t(allocation_tracker::destructCount): To get_destruct_count.\t\n\t(allocation_tracker::resetCounts): To reset.\n\t(tracker_alloc): To tracker_allocator.\n\t* testsuite/util/performance/mem: Remove.\n\t* testsuite/util/performance/mem/mem_track_allocator_base.hpp: Remove.\n\t* testsuite/util/performance/mem/mem_track_allocator.hpp: Remove.\n\t* testsuite/27_io/basic_stringbuf/4.cc: Adjust for new names\n\tor includes.\n\t* testsuite/ext/hash_set/check_construct_destroy.cc: Same.\n\t* testsuite/ext/slist/check_construct_destroy.cc: Same.\n\t* testsuite/performance/ext/pb_ds/\n\thash_random_int_erase_mem_usage.cc: Same.\n\t* testsuite/performance/ext/pb_ds/multimap_text_insert_mem_usage.hpp\n\t* testsuite/performance/ext/pb_ds/\n\tpriority_queue_text_pop_mem_usage.cc: Same.\n\t* testsuite/23_containers/vector/capacity/2.cc: Same.\n\t* testsuite/23_containers/vector/cons/4.cc: Same.\n\t* testsuite/23_containers/vector/check_construct_destroy.cc: Same.\n\t* testsuite/23_containers/deque/cons/2.cc: Same.\n\t* testsuite/23_containers/deque/check_construct_destroy.cc: Same.\n\t* testsuite/23_containers/list/check_construct_destroy.cc: Same.\n\t* testsuite/23_containers/set/check_construct_destroy.cc: Same.\n\t* testsuite/util/testsuite_allocator.h\n\t* testsuite/util/performance/priority_queue/mem_usage/pop_test.hpp\n\t* testsuite/util/performance/assoc/mem_usage/multimap_insert_test.hpp\n\t* testsuite/util/performance/assoc/mem_usage/erase_test.hpp\n\t* testsuite/util/testsuite_allocator.cc: Same.\n\nFrom-SVN: r117408", "tree": {"sha": "a95301ea3542a99c687e766f892532c39e18534f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a95301ea3542a99c687e766f892532c39e18534f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f9900dbb6fe19fad02a53df9efecae35bd65976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9900dbb6fe19fad02a53df9efecae35bd65976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9900dbb6fe19fad02a53df9efecae35bd65976", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9900dbb6fe19fad02a53df9efecae35bd65976/comments", "author": null, "committer": null, "parents": [{"sha": "c0a699675b21aaa2fa2edde12a89bc42a7e9d395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a699675b21aaa2fa2edde12a89bc42a7e9d395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0a699675b21aaa2fa2edde12a89bc42a7e9d395"}], "stats": {"total": 750, "additions": 244, "deletions": 506}, "files": [{"sha": "ccfeb4cc1f801ef9084042fb8790c712662ab73a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -1,3 +1,38 @@\n+2006-10-03  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/util/testsuite_allocator.h (allocation_tracker): To\n+\ttracker_allocator_counter.\n+\t(allocation_tracker::allocationTotal): To get_allocation_count.\n+\t(allocation_tracker::deallocationTotal): To get_deallocation_count.\n+\t(allocation_tracker::constructCount): To get_construct_count.\n+\t(allocation_tracker::destructCount): To get_destruct_count.\t\n+\t(allocation_tracker::resetCounts): To reset.\n+\t(tracker_alloc): To tracker_allocator.\n+\t* testsuite/util/performance/mem: Remove.\n+\t* testsuite/util/performance/mem/mem_track_allocator_base.hpp: Remove.\n+\t* testsuite/util/performance/mem/mem_track_allocator.hpp: Remove.\n+\t* testsuite/27_io/basic_stringbuf/4.cc: Adjust for new names\n+\tor includes.\n+\t* testsuite/ext/hash_set/check_construct_destroy.cc: Same.\n+\t* testsuite/ext/slist/check_construct_destroy.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/\n+\thash_random_int_erase_mem_usage.cc: Same.\n+\t* testsuite/performance/ext/pb_ds/multimap_text_insert_mem_usage.hpp\n+\t* testsuite/performance/ext/pb_ds/\n+\tpriority_queue_text_pop_mem_usage.cc: Same.\n+\t* testsuite/23_containers/vector/capacity/2.cc: Same.\n+\t* testsuite/23_containers/vector/cons/4.cc: Same.\n+\t* testsuite/23_containers/vector/check_construct_destroy.cc: Same.\n+\t* testsuite/23_containers/deque/cons/2.cc: Same.\n+\t* testsuite/23_containers/deque/check_construct_destroy.cc: Same.\n+\t* testsuite/23_containers/list/check_construct_destroy.cc: Same.\n+\t* testsuite/23_containers/set/check_construct_destroy.cc: Same.\n+\t* testsuite/util/testsuite_allocator.h\n+\t* testsuite/util/performance/priority_queue/mem_usage/pop_test.hpp\n+\t* testsuite/util/performance/assoc/mem_usage/multimap_insert_test.hpp\n+\t* testsuite/util/performance/assoc/mem_usage/erase_test.hpp\n+\t* testsuite/util/testsuite_allocator.cc: Same.\n+\t\n 2006-10-03  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/util/native_type/priority_queue/native_pq_tag.hpp: Remove."}, {"sha": "7ddebdcec3d8fc4f7d98072e7f80eb1908c073d7", "filename": "libstdc++-v3/testsuite/23_containers/deque/check_construct_destroy.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcheck_construct_destroy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcheck_construct_destroy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcheck_construct_destroy.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -34,19 +34,19 @@ using namespace __gnu_test;\n \n int main()\n {\n-  typedef std::deque<int, tracker_alloc<int> > Container;\n+  typedef std::deque<int, tracker_allocator<int> > Container;\n   const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n   bool ok = true;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c;\n     ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n   }\n   ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n \n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c(arr10, arr10 + 10);\n     ok = check_construct_destroy(\"Construct from range\", 10, 0) && ok;\n@@ -55,23 +55,23 @@ int main()\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     c.insert(c.begin(), arr10[0]);\n     ok = check_construct_destroy(\"Insert element\", 1, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Insert element\", 1, 11) && ok;\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     c.insert(c.begin() + 5, arr10, arr10+3);\n     ok = check_construct_destroy(\"Insert short range\", 3, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Insert short range\", 3, 13) && ok;\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     c.insert(c.begin() + 7, arr10, arr10+10);\n     ok = check_construct_destroy(\"Insert long range\", 10, 0) && ok;\n   }"}, {"sha": "848e61a2f1877eabea6c18e33ac683725f759962", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/2.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F2.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -27,8 +27,8 @@\n #include <testsuite_hooks.h>\n \n using __gnu_test::copy_tracker;\n-using __gnu_test::allocation_tracker;\n-using __gnu_test::tracker_alloc;\n+using __gnu_test::tracker_allocator_counter;\n+using __gnu_test::tracker_allocator;\n using __gnu_test::copy_constructor;\n using __gnu_test::assignment_operator;\n using __gnu_test::counter;\n@@ -445,11 +445,11 @@ test_default_ctor_exception_safety()\n {\n   // setup\n   typedef copy_tracker T;\n-  typedef std::deque<T, tracker_alloc<T> > X;\n+  typedef std::deque<T, tracker_allocator<T> > X;\n \n   T::reset();\n   copy_constructor::throw_on(3);\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n \n   // test\n   try\n@@ -462,7 +462,7 @@ test_default_ctor_exception_safety()\n   }\n \n   // assert postconditions\n-  VERIFY(allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal());\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count());\n \n   // teardown\n }\n@@ -473,9 +473,9 @@ test_copy_ctor_exception_safety()\n {\n   // setup\n   typedef copy_tracker T;\n-  typedef std::deque<T, tracker_alloc<T> > X;\n+  typedef std::deque<T, tracker_allocator<T> > X;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     X a(7);\n     T::reset();\n@@ -494,7 +494,7 @@ test_copy_ctor_exception_safety()\n   }\n \n   // assert postconditions\n-  VERIFY(allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal());\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count());\n \n   // teardown\n }"}, {"sha": "e3e1db80cd4c2fe0e26816021f5b3bf56aa4ab1c", "filename": "libstdc++-v3/testsuite/23_containers/list/check_construct_destroy.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcheck_construct_destroy.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -35,19 +35,19 @@ using namespace __gnu_test;\n \n int main()\n {\n-  typedef std::list<int, tracker_alloc<int> > Container;\n+  typedef std::list<int, tracker_allocator<int> > Container;\n   const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n   bool ok = true;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c;\n     ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n   }\n   ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n \n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c(arr10, arr10 + 10);\n     ok = check_construct_destroy(\"Construct from range\", 10, 0) && ok;\n@@ -56,15 +56,15 @@ int main()\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     c.insert(c.begin(), arr10[0]);\n     ok = check_construct_destroy(\"Insert element\", 1, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Insert element\", 1, 11) && ok;\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     Container::iterator i5 = c.begin();\n     std::advance(i5, 5);\n     c.insert(i5, arr10, arr10+3);\n@@ -74,7 +74,7 @@ int main()\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     Container::iterator i7 = c.begin();\n     std::advance(i7, 5);\n     c.insert(i7, arr10, arr10+10);"}, {"sha": "85ea5fd6f00d59a17656e5131bd5fce82c68777b", "filename": "libstdc++-v3/testsuite/23_containers/set/check_construct_destroy.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcheck_construct_destroy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcheck_construct_destroy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcheck_construct_destroy.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -36,20 +36,20 @@ using namespace __gnu_test;\n \n int main()\n {\n-  typedef std::set<int, std::less<int>, tracker_alloc<int> > Container;\n+  typedef std::set<int, std::less<int>, tracker_allocator<int> > Container;\n   const int arr10[10]  = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n   const int arr10a[10] = { 31, 23, 82, 46, 13, 17, 30, 71, 22, 51 };\n   bool ok = true;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c;\n     ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n   }\n   ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n \n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c(arr10, arr10 + 10);\n     ok = check_construct_destroy(\"Construct from range\", 10, 0) && ok;\n@@ -58,23 +58,23 @@ int main()\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     c.insert(arr10a[0]);\n     ok = check_construct_destroy(\"Insert element\", 1, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Insert element\", 1, 11) && ok;\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     c.insert(arr10a, arr10a+3);\n     ok = check_construct_destroy(\"Insert short range\", 3, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Insert short range\", 3, 13) && ok;\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     c.insert(arr10a, arr10a+10);\n     ok = check_construct_destroy(\"Insert long range\", 10, 0) && ok;\n   }"}, {"sha": "1fc84c144fcd30344f7aea91e560101d5ccb42eb", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/2.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F2.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -27,8 +27,8 @@\n #include <testsuite_hooks.h>\n \n using __gnu_test::copy_tracker;\n-using __gnu_test::allocation_tracker;\n-using __gnu_test::tracker_alloc;\n+using __gnu_test::tracker_allocator_counter;\n+using __gnu_test::tracker_allocator;\n using __gnu_test::copy_constructor;\n using __gnu_test::assignment_operator;\n using __gnu_test::destructor;\n@@ -39,9 +39,9 @@ test_reserve()\n {\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     X a(3);\n     const X::size_type old_size     = a.size();\n@@ -59,7 +59,7 @@ test_reserve()\n     VERIFY(destructor::count() <= old_size);\n   }\n   // check for memory leaks\n-  VERIFY(allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal());\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count());\n }\n \n // Verifies that reserve() with reallocation offers the strong\n@@ -69,9 +69,9 @@ test_reserve_exception_guarantee()\n {\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     X a(7);\n     const X::size_type old_size __attribute__((unused)) = a.size();\n@@ -92,7 +92,7 @@ test_reserve_exception_guarantee()\n     VERIFY(old_capacity == a.capacity());\n     VERIFY(copy_constructor::count() == destructor::count()+1);\n   }\n-  VERIFY(allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal());\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count());\n }\n \n int main()"}, {"sha": "4c741984ca67fc50588164d03e16abd5e30e7b5a", "filename": "libstdc++-v3/testsuite/23_containers/vector/check_construct_destroy.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcheck_construct_destroy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcheck_construct_destroy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcheck_construct_destroy.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -34,19 +34,19 @@ using namespace __gnu_test;\n \n int main()\n {\n-  typedef std::vector<int, tracker_alloc<int> > Container;\n+  typedef std::vector<int, tracker_allocator<int> > Container;\n   const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n   bool ok = true;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c;\n     ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n   }\n   ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n \n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c(arr10, arr10 + 10);\n     ok = check_construct_destroy(\"Construct from range\", 10, 0) && ok;\n@@ -56,7 +56,7 @@ int main()\n   {\n     Container c(arr10, arr10 + 10);\n     c.reserve(100);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     c.insert(c.begin(), arr10[0]);\n     ok = check_construct_destroy(\"Insert element\", 1, 0) && ok;\n   }\n@@ -65,7 +65,7 @@ int main()\n   {\n     Container c(arr10, arr10 + 10);\n     c.reserve(100);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     c.insert(c.begin() + 5, arr10, arr10+3);\n     ok = check_construct_destroy(\"Insert short range\", 3, 0) && ok;\n   }\n@@ -74,7 +74,7 @@ int main()\n   {\n     Container c(arr10, arr10 + 10);\n     c.reserve(100);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     c.insert(c.begin() + 7, arr10, arr10+10);\n     ok = check_construct_destroy(\"Insert long range\", 10, 0) && ok;\n   }"}, {"sha": "a8924f2b1a68e851c57621073f514ebf5a9097d7", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/4.cc", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F4.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -26,8 +26,8 @@\n #include <testsuite_hooks.h>\n \n using __gnu_test::copy_tracker;\n-using __gnu_test::allocation_tracker;\n-using __gnu_test::tracker_alloc;\n+using __gnu_test::tracker_allocator_counter;\n+using __gnu_test::tracker_allocator;\n using __gnu_test::copy_constructor;\n using __gnu_test::assignment_operator;\n \n@@ -42,11 +42,11 @@ test_default_ctor_exception_gurantee()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n   copy_tracker::reset();\n   copy_constructor::throw_on(3);\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n \n   // run test\n   try\n@@ -59,7 +59,7 @@ test_default_ctor_exception_gurantee()\n   }\n \n   // assert postconditions\n-  VERIFY( allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal() );\n+  VERIFY( tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count() );\n \n   // teardown\n }\n@@ -74,9 +74,9 @@ test_copy_ctor_exception_gurantee()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     X a(7);\n     copy_tracker::reset();\n@@ -94,11 +94,11 @@ test_copy_ctor_exception_gurantee()\n   }\n \n   // assert postconditions\n-  VERIFY(allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal());\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count());\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n // operator=()\n@@ -113,12 +113,12 @@ test_assignment_operator_1()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n   X r(9);\n   X a(r.size() - 2);\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n \n   // preconditions\n   VERIFY(r.size() > a.size());\n@@ -128,11 +128,11 @@ test_assignment_operator_1()\n \n   // assert postconditions\n   VERIFY(r == a);\n-  VERIFY(allocation_tracker::allocationTotal() == 0);\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == 0);\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n void\n@@ -141,13 +141,13 @@ test_assignment_operator_2()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n   X r(1);\n   r.reserve(17);\n   X a(r.size() + 7);\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n \n   // preconditions\n   VERIFY(r.size() < a.size());\n@@ -158,11 +158,11 @@ test_assignment_operator_2()\n \n   // assert postconditions\n   VERIFY(r == a);\n-  VERIFY(allocation_tracker::allocationTotal() == 0);\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == 0);\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n void\n@@ -171,9 +171,9 @@ test_assignment_operator_3()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     X r(1);\n     X a(r.capacity() + 7);\n@@ -188,11 +188,11 @@ test_assignment_operator_3()\n     // assert postconditions\n     VERIFY(r == a);\n   }\n-  VERIFY(allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal());\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count());\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n void\n@@ -201,9 +201,9 @@ test_assignment_operator_3_exception_guarantee()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     X r(1);\n     X a(r.capacity() + 7);\n@@ -225,11 +225,11 @@ test_assignment_operator_3_exception_guarantee()\n   }\n \n   // assert postconditions\n-  VERIFY(allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal());\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count());\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n // fill assign()\n@@ -246,26 +246,26 @@ test_fill_assign_1()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n   X a(7);\n   X::size_type old_size = a.size();\n   X::size_type new_size = old_size - 2;\n   const T t;\n \n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n \n   // run test\n   a.assign(new_size, t);\n \n   // assert postconditions\n   VERIFY(a.size() == new_size);\n-  VERIFY(allocation_tracker::allocationTotal() == 0);\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == 0);\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n void\n@@ -274,7 +274,7 @@ test_fill_assign_2()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n   X a(7);\n   a.reserve(11);\n@@ -284,7 +284,7 @@ test_fill_assign_2()\n   const T t;\n \n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n \n   // assert preconditions\n   VERIFY(old_size < new_size);\n@@ -295,11 +295,11 @@ test_fill_assign_2()\n \n   // assert postconditions\n   VERIFY(a.size() == new_size);\n-  VERIFY(allocation_tracker::allocationTotal() == 0);\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == 0);\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n void\n@@ -308,9 +308,9 @@ test_fill_assign_3()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     X a(7);\n     X::size_type old_capacity = a.capacity();\n@@ -329,12 +329,12 @@ test_fill_assign_3()\n     VERIFY(a.size() == new_size);\n   }\n \n-  VERIFY(allocation_tracker::allocationTotal() > 0);\n-  VERIFY(allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal());\n+  VERIFY(tracker_allocator_counter::get_allocation_count() > 0);\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count());\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n void\n@@ -343,9 +343,9 @@ test_fill_assign_3_exception_guarantee()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     X a(7);\n     X::size_type old_size     = a.size();\n@@ -374,12 +374,12 @@ test_fill_assign_3_exception_guarantee()\n     VERIFY(a.capacity() == old_capacity);\n   }\n \n-  VERIFY(allocation_tracker::allocationTotal() > 0);\n-  VERIFY(allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal());\n+  VERIFY(tracker_allocator_counter::get_allocation_count() > 0);\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count());\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n void\n@@ -388,26 +388,26 @@ test_fill_assign_4()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n   X a(7);\n   X::size_type old_size  = a.size();\n   X::size_type new_size  = old_size - 2;\n   X::size_type new_value = 117;\n \n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n \n   // run test\n   a.assign(new_size, new_value);\n \n   // assert postconditions\n   VERIFY(a.size() == new_size);\n-  VERIFY(allocation_tracker::allocationTotal() == 0);\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == 0);\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n // range assign()\n@@ -432,13 +432,13 @@ test_range_assign_2()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n   X a(7);\n   X b(3);\n \n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n \n   // assert preconditions\n   VERIFY(b.size() < a.capacity());\n@@ -449,11 +449,11 @@ test_range_assign_2()\n   // assert postconditions\n   VERIFY(a.size() == b.size());\n   VERIFY(a == b);\n-  VERIFY(allocation_tracker::allocationTotal() == 0);\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == 0);\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n void\n@@ -462,14 +462,14 @@ test_range_assign_3()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n   X a(7);\n   a.reserve(a.size() + 7);\n   X b(a.size() + 3);\n \n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n \n   // assert preconditions\n   VERIFY(a.size() < b.size());\n@@ -481,11 +481,11 @@ test_range_assign_3()\n   // assert postconditions\n   VERIFY(a.size() == b.size());\n   VERIFY(a == b);\n-  VERIFY(allocation_tracker::allocationTotal() == 0);\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == 0);\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n void\n@@ -494,9 +494,9 @@ test_range_assign_4()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     X a(7);\n     X b(a.capacity() + 7);\n@@ -513,12 +513,12 @@ test_range_assign_4()\n     VERIFY(a.size() == b.size());\n     VERIFY(a == b);\n   }\n-  VERIFY(allocation_tracker::allocationTotal() > 0);\n-  VERIFY(allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal());\n+  VERIFY(tracker_allocator_counter::get_allocation_count() > 0);\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count());\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n void\n@@ -527,9 +527,9 @@ test_range_assign_4_exception_guarantee()\n   // setup\n   bool test __attribute__((unused)) = true;\n   typedef copy_tracker T;\n-  typedef std::vector<T, tracker_alloc<T> > X;\n+  typedef std::vector<T, tracker_allocator<T> > X;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     X a(7);\n     X b(a.capacity() + 7);\n@@ -552,12 +552,12 @@ test_range_assign_4_exception_guarantee()\n   }\n \n   // assert postconditions\n-  VERIFY(allocation_tracker::allocationTotal() > 0);\n-  VERIFY(allocation_tracker::allocationTotal() == allocation_tracker::deallocationTotal());\n+  VERIFY(tracker_allocator_counter::get_allocation_count() > 0);\n+  VERIFY(tracker_allocator_counter::get_allocation_count() == tracker_allocator_counter::get_deallocation_count());\n \n   // teardown\n   copy_tracker::reset();\n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n }\n \n "}, {"sha": "d4412cdb9f45c413016a762aeab5137680dc59da", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2F4.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -31,7 +31,7 @@\n namespace std\n {\n   using __gnu_test::pod_char;\n-  typedef __gnu_test::tracker_alloc<char> alloc_type;\n+  typedef __gnu_test::tracker_allocator<char> alloc_type;\n   template class basic_stringbuf<char, char_traits<char>, alloc_type>;\n } // test\n "}, {"sha": "4f03e49af5cdde65132356a0abda9977d4915692", "filename": "libstdc++-v3/testsuite/ext/hash_set/check_construct_destroy.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fhash_set%2Fcheck_construct_destroy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fhash_set%2Fcheck_construct_destroy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fhash_set%2Fcheck_construct_destroy.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -37,7 +37,7 @@ using namespace __gnu_test;\n int main()\n {\n   typedef __gnu_cxx::hash_set<int, __gnu_cxx::hash<int>, std::equal_to<int>,\n-                              tracker_alloc<int> >\n+                              tracker_allocator<int> >\n     Container;\n \n   const int arr10[10]  = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n@@ -46,7 +46,7 @@ int main()\n \n   int buckets;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c;\n     buckets = c.bucket_count();\n@@ -55,30 +55,30 @@ int main()\n   ok = check_construct_destroy(\"empty container\", buckets, buckets) && ok;\n \n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c(arr10, arr10 + 10);\n     ok = check_construct_destroy(\"Construct from range\", buckets+10, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Construct from range\", buckets+10, buckets+10) && ok;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c(arr10, arr10 + 10);\n     c.insert(arr10a[0]);\n     ok = check_construct_destroy(\"Insert element\", buckets+11, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Insert element\", buckets+11, buckets+11) && ok;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c(arr10, arr10 + 10);\n     c.insert(arr10a, arr10a+3);\n     ok = check_construct_destroy(\"Insert short range\", buckets+13, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Insert short range\", buckets+13, buckets+13) && ok;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c(arr10, arr10 + 10);\n     c.insert(arr10a, arr10a+10);"}, {"sha": "ecb9dd6ecab03107f8718fe16f5ed8e1aead4243", "filename": "libstdc++-v3/testsuite/ext/slist/check_construct_destroy.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fslist%2Fcheck_construct_destroy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fslist%2Fcheck_construct_destroy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fslist%2Fcheck_construct_destroy.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -35,19 +35,19 @@ using namespace __gnu_test;\n \n int main()\n {\n-  typedef __gnu_cxx::slist<int, tracker_alloc<int> > Container;\n+  typedef __gnu_cxx::slist<int, tracker_allocator<int> > Container;\n   const int arr10[10] = { 2, 4, 1, 7, 3, 8, 10, 5, 9, 6 };\n   bool ok = true;\n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c;\n     ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n   }\n   ok = check_construct_destroy(\"empty container\", 0, 0) && ok;\n \n \n-  allocation_tracker::resetCounts();\n+  tracker_allocator_counter::reset();\n   {\n     Container c(arr10, arr10 + 10);\n     ok = check_construct_destroy(\"Construct from range\", 10, 0) && ok;\n@@ -56,15 +56,15 @@ int main()\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     c.insert(c.begin(), arr10[0]);\n     ok = check_construct_destroy(\"Insert element\", 1, 0) && ok;\n   }\n   ok = check_construct_destroy(\"Insert element\", 1, 11) && ok;\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     Container::iterator i5 = c.begin();\n     std::advance(i5, 5);\n     c.insert(i5, arr10, arr10+3);\n@@ -74,7 +74,7 @@ int main()\n \n   {\n     Container c(arr10, arr10 + 10);\n-    allocation_tracker::resetCounts();\n+    tracker_allocator_counter::reset();\n     Container::iterator i7 = c.begin();\n     std::advance(i7, 5);\n     c.insert(i7, arr10, arr10+10);"}, {"sha": "27a7ff87903a4a0fe9559d30a7695706b686dc01", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/hash_random_int_erase_mem_usage.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fhash_random_int_erase_mem_usage.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -45,12 +45,12 @@\n  */\n \n #include <ext/typelist.h>\n+#include <testsuite_allocator.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <rng/twister_rand_gen.hpp>\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/mem_usage/erase_test.hpp>\n-#include <performance/mem/mem_track_allocator.hpp>\n #include <iostream>\n #include <vector>\n #include <functional>\n@@ -85,7 +85,7 @@ main(int argc, char* a_p_argv[])\n \n       vec_t::const_iterator b = a_v.begin();\n       erase_test<vec_t::const_iterator> tst(b,  vn, vs, vm);\n-      typedef mem_track_allocator<char> alloc_t;\n+      typedef __gnu_test::tracker_allocator<char> alloc_t;\n       {\n \ttypedef hash_common_types<int, pb_ds::null_mapped_type, int_hash, std::equal_to<int>, alloc_t>::performance_tl tl_t;\n "}, {"sha": "5bfa42b3b6dac05f1c218af4eac286142594dcbc", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/multimap_text_insert_mem_usage.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fmultimap_text_insert_mem_usage.hpp?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -44,7 +44,10 @@\n  * Contains test for inserting text words.\n  */\n \n+#include <iostream>\n+#include <vector>\n #include <ext/typelist.h>\n+#include <testsuite_allocator.h>\n #include <io/text_populate.hpp>\n #include <performance/io/xml_formatter.hpp>\n #include <native_type/assoc/native_hash_multimap.hpp>\n@@ -54,10 +57,7 @@\n #include <common_type/assoc/common_type.hpp>\n #include <performance/assoc/mem_usage/multimap_insert_test.hpp>\n #include <performance/assoc/multimap_common_type.hpp>\n-#include <performance/mem/mem_track_allocator.hpp>\n #include <hash_fn/string_hash_fn.hpp>\n-#include <iostream>\n-#include <vector>\n \n void\n usage();\n@@ -86,7 +86,7 @@ main(int argc, char* a_p_argv[])\n       init_vec_t a_v_init(prm);\n       distinct_text_populate(f_name, a_v_init);\n \n-      typedef mem_track_allocator<char> alloc_t;\n+      typedef __gnu_test::tracker_allocator<char> alloc_t;\n       typedef std::basic_string<char, std::char_traits<char>, alloc_t> string_t;\n       typedef std::vector<std::pair<string_t, int> > vec_t;\n       vec_t a_v;"}, {"sha": "3185e9b1ff086828ac83356dd8ba2dd786460054", "filename": "libstdc++-v3/testsuite/performance/ext/pb_ds/priority_queue_text_pop_mem_usage.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fext%2Fpb_ds%2Fpriority_queue_text_pop_mem_usage.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -44,16 +44,16 @@\n  * Contains test for finding text.\n  */\n \n+#include <iostream>\n+#include <vector>\n #include <ext/typelist.h>\n+#include <testsuite_allocator.h>\n #include <performance/io/xml_formatter.hpp>\n #include <io/verified_cmd_line_input.hpp>\n #include <common_type/priority_queue/common_type.hpp>\n #include <performance/priority_queue/mem_usage/pop_test.hpp>\n #include <io/text_populate.hpp>\n #include <native_type/priority_queue/native_priority_queue.hpp>\n-#include <performance/mem/mem_track_allocator.hpp>\n-#include <iostream>\n-#include <vector>\n \n void\n usage();\n@@ -70,29 +70,30 @@ main(int argc, char* a_p_argv[])\n   try\n     {\n       xml_test_performance_formatter fmt(\"Size\", \"Memory (bytes)\");\n+      typedef __gnu_test::tracker_allocator<char> callocator_type;\n+      typedef __gnu_test::tracker_allocator<char> sallocator_type;\n+      typedef std::basic_string<char, std::char_traits<char>, callocator_type> string_t;\n \n-      typedef std::basic_string<char, std::char_traits<char>, mem_track_allocator<char> > string_t;\n-\n-      typedef std::vector<std::pair< string_t, char> > vec_t;\n+      typedef std::vector<std::pair<string_t, char> > vec_t;\n       vec_t a_v(vm);\n       text_populate(f_name, a_v);\n \n       typedef pop_test<vec_t::const_iterator> test_t;\n       vec_t::const_iterator b = a_v.begin();\n       test_t tst(b, vn, vs, vm);\n       {\n-\ttypedef pq_common_types<string_t, std::less<string_t>, mem_track_allocator<char> >::performance_tl pq_tl_t;\n+\ttypedef pq_common_types<string_t, std::less<string_t>, callocator_type>::performance_tl pq_tl_t;\n \tpq_tl_t tl;\n \t__gnu_cxx::typelist::apply(tst, tl);\n       }\n \n       {\n-\ttypedef native_priority_queue<string_t, true, std::less<string_t>, mem_track_allocator<string_t> > native_pq_t;\n+\ttypedef native_priority_queue<string_t, true, std::less<string_t>, sallocator_type> native_pq_t;\n \ttst(native_pq_t());\n       }\n \n       {\n-\ttypedef native_priority_queue<string_t, false, std::less<string_t>, mem_track_allocator<string_t> > native_pq_t;\n+\ttypedef native_priority_queue<string_t, false, std::less<string_t>, sallocator_type> native_pq_t;\n \ttst(native_pq_t());\n       }\n     }"}, {"sha": "c95d9f7917a695b5423e517986a5ec0557b5e150", "filename": "libstdc++-v3/testsuite/util/performance/assoc/mem_usage/erase_test.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Ferase_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Ferase_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Ferase_test.hpp?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -47,11 +47,11 @@\n #ifndef PB_DS_ERASE_TEST_HPP\n #define PB_DS_ERASE_TEST_HPP\n \n+#include <iterator>\n+#include <testsuite_allocator.h>\n #include <ext/pb_ds/detail/type_utils.hpp>\n-#include <performance/mem/mem_track_allocator.hpp>\n #include <performance/io/xml_formatter.hpp>\n #include <common_type/assoc/string_form.hpp>\n-#include <iterator>\n \n namespace pb_ds\n {\n@@ -96,14 +96,14 @@ namespace pb_ds\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, ins_size);\n \n-\t  mem_track_allocator<char> alloc;\n-\t  const size_t init_mem = alloc.get_total();\n+\t  __gnu_test::tracker_allocator<char> alloc;\n+\t  const size_t init_mem = alloc.get_allocation_count() - alloc.get_deallocation_count();\n \t  Cntnr cntnr(ins_it_b, ins_it_e);\n \n \t  while (cntnr.size() > 1)\n             cntnr.erase(*cntnr.begin());\n \n-\t  const size_t final_mem = alloc.get_total();\n+\t  const size_t final_mem = alloc.get_allocation_count() - alloc.get_deallocation_count();\n \t  assert(final_mem > init_mem);\n \t  const size_t delta_mem = final_mem - init_mem;\n \t  res_set_fmt.add_res(ins_size, static_cast<double>(delta_mem));"}, {"sha": "92e98ce786adca019ca1559a01557175fa00d917", "filename": "libstdc++-v3/testsuite/util/performance/assoc/mem_usage/multimap_insert_test.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Fmultimap_insert_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Fmultimap_insert_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Fmem_usage%2Fmultimap_insert_test.hpp?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -47,11 +47,11 @@\n #ifndef PB_DS_MULTIMAP_INSERT_TEST_HPP\n #define PB_DS_MULTIMAP_INSERT_TEST_HPP\n \n+#include <iterator>\n #include <ext/pb_ds/detail/type_utils.hpp>\n-#include <performance/mem/mem_track_allocator.hpp>\n+#include <testsuite_allocator.h>\n #include <performance/io/xml_formatter.hpp>\n #include <common_type/assoc/string_form.hpp>\n-#include <iterator>\n \n namespace pb_ds\n {\n@@ -116,12 +116,12 @@ namespace pb_ds\n     multimap_insert_test<It, Native>::\n     insert(Cntnr, It ins_it_b, It ins_it_e, pb_ds::detail::true_type)\n     {\n-      mem_track_allocator<char> alloc;\n-      const size_t init_mem = alloc.get_total();\n+      __gnu_test::tracker_allocator<char> alloc;\n+      const size_t init_mem = alloc.get_allocation_count() - alloc.get_deallocation_count();\n       Cntnr cntnr;\n       for (It ins_it = ins_it_b; ins_it != ins_it_e; ++ins_it)\n         cntnr.insert((typename Cntnr::const_reference)(*ins_it));\n-      const size_t final_mem = alloc.get_total();\n+      const size_t final_mem = alloc.get_allocation_count() - alloc.get_deallocation_count();\n       assert(final_mem > init_mem);\n       return (final_mem - init_mem);\n     }\n@@ -132,12 +132,12 @@ namespace pb_ds\n     multimap_insert_test<It, Native>::\n     insert(Cntnr, It ins_it_b, It ins_it_e, pb_ds::detail::false_type)\n     {\n-      mem_track_allocator<char> alloc;\n-      const size_t init_mem = alloc.get_total();\n+      __gnu_test::tracker_allocator<char> alloc;\n+      const size_t init_mem = alloc.get_allocation_count() - alloc.get_deallocation_count();\n       Cntnr cntnr;\n       for (It ins_it = ins_it_b; ins_it != ins_it_e; ++ins_it)\n         cntnr[ins_it->first].insert(ins_it->second);\n-      const size_t final_mem = alloc.get_total();\n+      const size_t final_mem = alloc.get_allocation_count() - alloc.get_deallocation_count();\n       assert(final_mem > init_mem);\n       return (final_mem - init_mem);\n     }"}, {"sha": "d119e95c2cdf2fa661a422fb3cab02f6eac0e7e9", "filename": "libstdc++-v3/testsuite/util/performance/mem/mem_track_allocator.hpp", "status": "removed", "additions": 0, "deletions": 189, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a699675b21aaa2fa2edde12a89bc42a7e9d395/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fmem%2Fmem_track_allocator.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a699675b21aaa2fa2edde12a89bc42a7e9d395/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fmem%2Fmem_track_allocator.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fmem%2Fmem_track_allocator.hpp?ref=c0a699675b21aaa2fa2edde12a89bc42a7e9d395", "patch": "@@ -1,189 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file mem_track_allocator.hpp\n- * Contains a memory-tracking allocator used for tests.\n- */\n-\n-#ifndef PB_DS_MEM_TRACK_ALLOCATOR_HPP\n-#define PB_DS_MEM_TRACK_ALLOCATOR_HPP\n-\n-#include <performance/mem/mem_track_allocator_base.hpp>\n-\n-namespace pb_ds\n-{\n-\n-  namespace test\n-  {\n-\n-#define PB_DS_CLASS_T_DEC\t\t\t\\\n-    template<typename T>\n-\n-#define PB_DS_CLASS_C_DEC\t\t\t\t\\\n-    mem_track_allocator<\t\t\t\t\\\n-\t\t\t\t\t\tT>\n-\n-    template<typename T>\n-    class mem_track_allocator : public detail::mem_track_allocator_base\n-    {\n-    public:\n-      typedef size_t size_type;\n-      typedef ptrdiff_t difference_type;\n-      typedef T* pointer;\n-      typedef const T* const_pointer;\n-      typedef T& reference;\n-      typedef const T& const_reference;\n-      typedef T value_type;\n-\n-      template<typename U>\n-      struct rebind\n-      {\n-        typedef mem_track_allocator<U> other;\n-      };\n-\n-      mem_track_allocator() throw();\n-\n-      mem_track_allocator(const PB_DS_CLASS_C_DEC& ) throw();\n-\n-      template <class U>\n-      mem_track_allocator(const mem_track_allocator<U>& ) throw();\n-\n-      ~mem_track_allocator() throw();\n-\n-      size_type\n-      max_size() const throw();\n-\n-      pointer\n-      allocate(size_type num, std::allocator<void>::const_pointer hint = 0);\n-\n-      void\n-      construct(pointer p, const T& r_val);\n-\n-      void\n-      destroy(pointer p);\n-\n-      void\n-      deallocate(pointer p, size_type num);\n-    };\n-\n-    PB_DS_CLASS_T_DEC\n-    bool\n-    operator==(const PB_DS_CLASS_C_DEC& , const PB_DS_CLASS_C_DEC& )\n-    {\n-      return true;\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    mem_track_allocator() throw()\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    mem_track_allocator(const PB_DS_CLASS_C_DEC& ) throw()\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    template<typename U>\n-    PB_DS_CLASS_C_DEC::\n-    mem_track_allocator(const mem_track_allocator<U>& ) throw()\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    PB_DS_CLASS_C_DEC::\n-    ~mem_track_allocator() throw()\n-    { }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::size_type\n-    PB_DS_CLASS_C_DEC::\n-    max_size() const throw()\n-    {\n-      return (std::allocator<T>().max_size());\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    typename PB_DS_CLASS_C_DEC::pointer\n-    PB_DS_CLASS_C_DEC::\n-    allocate(size_type num, std::allocator<void>::const_pointer hint/*= 0*/)\n-    {\n-      T* const a_t = std::allocator<T>().allocate(num, hint);\n-\n-      inc(sizeof(T)*  num);\n-\n-      return (a_t);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    construct(pointer p, const T& r_val)\n-    {\n-      return (std::allocator<T>().construct(p, r_val));\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    destroy(pointer p)\n-    {\n-      std::allocator<T>().destroy(p);\n-    }\n-\n-    PB_DS_CLASS_T_DEC\n-    void\n-    PB_DS_CLASS_C_DEC::\n-    deallocate(pointer p, size_type num)\n-    {\n-      std::allocator<T>().deallocate(p, num);\n-\n-      dec(sizeof(T)*  num);\n-    }\n-\n-#undef PB_DS_CLASS_T_DEC\n-#undef PB_DS_CLASS_C_DEC\n-\n-  } // namespace test\n-\n-} // namespace pb_ds\n-\n-#endif // #ifndef PB_DS_MEM_TRACK_ALLOCATOR_HPP"}, {"sha": "97d831a755e9915f66d7762c06bb05e3ae798a59", "filename": "libstdc++-v3/testsuite/util/performance/mem/mem_track_allocator_base.hpp", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a699675b21aaa2fa2edde12a89bc42a7e9d395/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fmem%2Fmem_track_allocator_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a699675b21aaa2fa2edde12a89bc42a7e9d395/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fmem%2Fmem_track_allocator_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fmem%2Fmem_track_allocator_base.hpp?ref=c0a699675b21aaa2fa2edde12a89bc42a7e9d395", "patch": "@@ -1,116 +0,0 @@\n-// -*- C++ -*-\n-\n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the terms\n-// of the GNU General Public License as published by the Free Software\n-// Foundation; either version 2, or (at your option) any later\n-// version.\n-\n-// This library is distributed in the hope that it will be useful, but\n-// WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-// General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with this library; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n-// MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free\n-// software library without restriction.  Specifically, if other files\n-// instantiate templates or use macros or inline functions from this\n-// file, or you compile this file and link it with other files to\n-// produce an executable, this file does not by itself cause the\n-// resulting executable to be covered by the GNU General Public\n-// License.  This exception does not however invalidate any other\n-// reasons why the executable file might be covered by the GNU General\n-// Public License.\n-\n-// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.\n-\n-// Permission to use, copy, modify, sell, and distribute this software\n-// is hereby granted without fee, provided that the above copyright\n-// notice appears in all copies, and that both that copyright notice\n-// and this permission notice appear in supporting documentation. None\n-// of the above authors, nor IBM Haifa Research Laboratories, make any\n-// representation about the suitability of this software for any\n-// purpose. It is provided \"as is\" without express or implied\n-// warranty.\n-\n-/**\n- * @file mem_track_allocator_base.hpp\n- * Contains a base for a memory-tracking allocator used for tests.\n- */\n-\n-#ifndef PB_DS_MEM_TRACK_ALLOCATOR_BASE_HPP\n-#define PB_DS_MEM_TRACK_ALLOCATOR_BASE_HPP\n-\n-#include <cassert>\n-\n-namespace pb_ds\n-{\n-\n-  namespace test\n-  {\n-\n-    namespace detail\n-    {\n-\n-      struct total_holder\n-      {\n-        total_holder() : m_total(0)\n-\t{ }\n-\n-\tsize_t m_total;\n-      };\n-\n-      class mem_track_allocator_base\n-      {\n-      public:\n-\tstatic void\n-        inc(size_t size);\n-\n-\tstatic void\n-        dec(size_t size);\n-\n-\tstatic size_t\n-        get_total();\n-\n-      private:\n-\tstatic total_holder s_total_holder;\n-      };\n-\n-      total_holder mem_track_allocator_base::s_total_holder;\n-\n-      void\n-      mem_track_allocator_base::\n-      inc(size_t size)\n-      {\n-\ts_total_holder.m_total += size;\n-      }\n-\n-      void\n-      mem_track_allocator_base::\n-      dec(size_t size)\n-      {\n-\tassert(s_total_holder.m_total >= size);\n-\n-\ts_total_holder.m_total -= size;\n-      }\n-\n-      size_t\n-      mem_track_allocator_base::\n-      get_total()\n-      {\n-\treturn (s_total_holder.m_total);\n-      }\n-\n-    } // namespace detail\n-\n-  } // namespace test\n-\n-} // namespace pb_ds\n-\n-#endif // #ifndef PB_DS_MEM_TRACK_ALLOCATOR_BASE_HPP"}, {"sha": "0ca0fdc6035e59da787e9f8ff3d2e05560813ab6", "filename": "libstdc++-v3/testsuite/util/performance/priority_queue/mem_usage/pop_test.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Fmem_usage%2Fpop_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Fmem_usage%2Fpop_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fpriority_queue%2Fmem_usage%2Fpop_test.hpp?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -47,11 +47,11 @@\n #ifndef PB_DS_POP_TEST_HPP\n #define PB_DS_POP_TEST_HPP\n \n+#include <iterator>\n+#include <testsuite_allocator.h>\n #include <ext/pb_ds/detail/type_utils.hpp>\n-#include <performance/mem/mem_track_allocator.hpp>\n #include <performance/io/xml_formatter.hpp>\n #include <common_type/priority_queue/string_form.hpp>\n-#include <iterator>\n \n namespace pb_ds\n {\n@@ -95,17 +95,17 @@ namespace pb_ds\n \t  It ins_it_e = m_ins_b;\n \t  std::advance(ins_it_e, ins_size);\n \n-\t  mem_track_allocator<char> alloc;\n+\t  __gnu_test::tracker_allocator<char> alloc;\n \n-\t  const size_t init_mem = alloc.get_total();\n+\t  const size_t init_mem = alloc.get_allocation_count() - alloc.get_deallocation_count();\n \t  Cntnr cntnr;\n \t  for (It ins_it =    ins_it_b; ins_it != ins_it_e; ++ins_it)\n             cntnr.push(ins_it->first);\n \n \t  while (cntnr.size() > 1)\n             cntnr.pop();\n \n-\t  const size_t final_mem = alloc.get_total();\n+\t  const size_t final_mem = alloc.get_allocation_count() - alloc.get_deallocation_count();\n \t  assert(final_mem > init_mem);\n \t  const size_t delta_mem = final_mem - init_mem;\n \t  res_set_fmt.add_res(ins_size, static_cast<double>(delta_mem));"}, {"sha": "fdaa647e6fd2261dbe501337c6901c35221cbdb2", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.cc", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.cc?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -33,28 +33,33 @@\n \n namespace __gnu_test\n {\n-  allocation_tracker::size_type allocation_tracker::allocationTotal_   = 0;\n-  allocation_tracker::size_type allocation_tracker::deallocationTotal_ = 0;\n-  int allocation_tracker::constructCount_    = 0;\n-  int allocation_tracker::destructCount_     = 0;\n+  typedef tracker_allocator_counter counter_type;\n+  \n+  counter_type::size_type \n+  counter_type::allocationCount_ = 0;\n+  \n+  counter_type::size_type \n+  counter_type::deallocationCount_ = 0;\n+\n+  int counter_type::constructCount_ = 0;\n+  int counter_type::destructCount_ = 0;\n \n   bool\n   check_construct_destroy(const char* tag, int expected_c, int expected_d)\n   {\n-    if (allocation_tracker::constructCount() == expected_c &&\n-\tallocation_tracker::destructCount() == expected_d)\n-      return true;\n-\n-    else {\n-      std::cerr << tag << \": \"\n-\t\t<< \" construct = \" << allocation_tracker::constructCount()\n-\t\t<< \" (should be \" << expected_c << \"),\"\n-\t\t<< \" destroy = \" << allocation_tracker::destructCount()\n-\t\t<< \" (should be \" << expected_d << \")\"\n-\t\t<< std::endl;\n-      return false;\n-    }\n+    bool ret = true;\n+    if (counter_type::get_construct_count() != expected_c \n+\t|| counter_type::get_destruct_count() != expected_d)\n+      {\n+\tstd::cerr << tag << \": \"\n+\t\t  << \" construct = \" << counter_type::get_construct_count()\n+\t\t  << \" (should be \" << expected_c << \"),\"\n+\t\t  << \" destroy = \" << counter_type::get_destruct_count()\n+\t\t  << \" (should be \" << expected_d << \")\"\n+\t\t  << std::endl;\n+\tret = false;\n+      }\n+    return ret;\n   }\n-\n }; // namespace __cxx_test\n "}, {"sha": "51e4cf350e992376f13f3850c53086b3f4c98718", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9900dbb6fe19fad02a53df9efecae35bd65976/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=9f9900dbb6fe19fad02a53df9efecae35bd65976", "patch": "@@ -36,7 +36,6 @@\n #define _GLIBCXX_TESTSUITE_ALLOCATOR_H\n \n #include <cstddef>\n-#include <limits>\n #include <tr1/unordered_map>\n #include <cassert>\n \n@@ -48,15 +47,15 @@ namespace\n \n namespace __gnu_test\n {\n-  class allocation_tracker\n+  class tracker_allocator_counter\n   {\n   public:\n     typedef std::size_t    size_type; \n     \n     static void*\n     allocate(size_type blocksize)\n     {\n-      allocationTotal_ += blocksize;\n+      allocationCount_ += blocksize;\n       return ::operator new(blocksize);\n     }\n     \n@@ -70,43 +69,46 @@ namespace __gnu_test\n     deallocate(void* p, size_type blocksize)\n     {\n       ::operator delete(p);\n-      deallocationTotal_ += blocksize;\n+      deallocationCount_ += blocksize;\n     }\n     \n     static size_type\n-    allocationTotal() { return allocationTotal_; }\n+    get_allocation_count() { return allocationCount_; }\n     \n     static size_type\n-    deallocationTotal() { return deallocationTotal_; }\n+    get_deallocation_count() { return deallocationCount_; }\n     \n     static int\n-    constructCount() { return constructCount_; }\n+    get_construct_count() { return constructCount_; }\n \n     static int\n-    destructCount() { return destructCount_; }\n+    get_destruct_count() { return destructCount_; }\n     \n     static void\n-    resetCounts()\n+    reset()\n     {\n-      allocationTotal_ = 0;\n-      deallocationTotal_ = 0;\n+      allocationCount_ = 0;\n+      deallocationCount_ = 0;\n       constructCount_ = 0;\n-    destructCount_ = 0;\n+      destructCount_ = 0;\n     }\n \n  private:\n-    static size_type  allocationTotal_;\n-    static size_type  deallocationTotal_;\n+    static size_type  allocationCount_;\n+    static size_type  deallocationCount_;\n     static int        constructCount_;\n     static int        destructCount_;\n   };\n \n   // A simple basic allocator that just forwards to the\n-  // allocation_tracker to fulfill memory requests.  This class is\n-  // templated on the target object type, but tracker isn't.\n+  // tracker_allocator_counter to fulfill memory requests.  This class\n+  // is templated on the target object type, but tracker isn't.\n   template<class T>\n-  class tracker_alloc\n+  class tracker_allocator\n   {\n+  private:\n+    typedef tracker_allocator_counter counter_type;\n+\n   public:\n     typedef T              value_type;\n     typedef T*             pointer;\n@@ -116,7 +118,7 @@ namespace __gnu_test\n     typedef std::size_t    size_type; \n     typedef std::ptrdiff_t difference_type; \n     \n-    template<class U> struct rebind { typedef tracker_alloc<U> other; };\n+    template<class U> struct rebind { typedef tracker_allocator<U> other; };\n     \n     pointer\n     address(reference value) const\n@@ -126,56 +128,56 @@ namespace __gnu_test\n     address(const_reference value) const\n     { return &value; }\n     \n-    tracker_alloc() throw()\n+    tracker_allocator() throw()\n     { }\n \n-    tracker_alloc(const tracker_alloc&) throw()\n+    tracker_allocator(const tracker_allocator&) throw()\n     { }\n \n     template<class U>\n-      tracker_alloc(const tracker_alloc<U>&) throw()\n+      tracker_allocator(const tracker_allocator<U>&) throw()\n       { }\n \n-    ~tracker_alloc() throw()\n+    ~tracker_allocator() throw()\n     { }\n \n     size_type\n     max_size() const throw()\n-    { return std::numeric_limits<std::size_t>::max() / sizeof(T); }\n+    { return size_type(-1) / sizeof(T); }\n \n     pointer\n     allocate(size_type n, const void* = 0)\n-    { \n-      return static_cast<pointer>(allocation_tracker::allocate(n * sizeof(T)));\n-    }\n+    { return static_cast<pointer>(counter_type::allocate(n * sizeof(T))); }\n \n     void\n     construct(pointer p, const T& value)\n     {\n       new (p) T(value);\n-      allocation_tracker::construct();\n+      counter_type::construct();\n     }\n \n     void\n     destroy(pointer p)\n     {\n       p->~T();\n-      allocation_tracker::destroy();\n+      counter_type::destroy();\n     }\n \n     void\n     deallocate(pointer p, size_type num)\n-    { allocation_tracker::deallocate(p, num * sizeof(T)); }\n+    { counter_type::deallocate(p, num * sizeof(T)); }\n   };\n \n   template<class T1, class T2>\n     bool\n-    operator==(const tracker_alloc<T1>&, const tracker_alloc<T2>&) throw()\n+    operator==(const tracker_allocator<T1>&, \n+\t       const tracker_allocator<T2>&) throw()\n     { return true; }\n \n   template<class T1, class T2>\n     bool\n-    operator!=(const tracker_alloc<T1>&, const tracker_alloc<T2>&) throw()\n+    operator!=(const tracker_allocator<T1>&, \n+\t       const tracker_allocator<T2>&) throw()\n     { return false; }\n \n   bool\n@@ -331,7 +333,7 @@ namespace __gnu_test\n       \n       size_type\n       max_size() const throw() \n-      { return size_t(-1) / sizeof(Tp); }\n+      { return size_type(-1) / sizeof(Tp); }\n       \n       void \n       construct(pointer p, const Tp& val) "}]}