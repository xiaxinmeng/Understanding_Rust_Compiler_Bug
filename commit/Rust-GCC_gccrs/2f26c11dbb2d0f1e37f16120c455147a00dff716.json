{"sha": "2f26c11dbb2d0f1e37f16120c455147a00dff716", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYyNmMxMWRiYjJkMGYxZTM3ZjE2MTIwYzQ1NTE0N2EwMGRmZjcxNg==", "commit": {"author": {"name": "Greg McGary", "email": "greg@mcgary.org", "date": "2000-08-24T20:29:48Z"}, "committer": {"name": "Greg McGary", "email": "gkm@gcc.gnu.org", "date": "2000-08-24T20:29:48Z"}, "message": "cplus-dem.c (cplus_demangle_opname, [...]): Use ARRAY_SIZE.\n\n\t* libiberty/cplus-dem.c (cplus_demangle_opname, cplus_mangle_opname,\n\tdemangle_expression, demangle_function_name): Use ARRAY_SIZE.\n\t* libiberty/random.c (end_ptr): Likewise.\n\nFrom-SVN: r35948", "tree": {"sha": "80a475d8f1bd4fc8d9e0e9be985647880e8d1f14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80a475d8f1bd4fc8d9e0e9be985647880e8d1f14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f26c11dbb2d0f1e37f16120c455147a00dff716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f26c11dbb2d0f1e37f16120c455147a00dff716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f26c11dbb2d0f1e37f16120c455147a00dff716", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f26c11dbb2d0f1e37f16120c455147a00dff716/comments", "author": null, "committer": null, "parents": [{"sha": "672a59e0ad16e61161e096614f0da1a4ad65f6e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672a59e0ad16e61161e096614f0da1a4ad65f6e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672a59e0ad16e61161e096614f0da1a4ad65f6e6"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "8cbf68cf2b8d7a408d10f3c1443725718a01b79d", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f26c11dbb2d0f1e37f16120c455147a00dff716/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f26c11dbb2d0f1e37f16120c455147a00dff716/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=2f26c11dbb2d0f1e37f16120c455147a00dff716", "patch": "@@ -1,3 +1,9 @@\n+2000-08-24  Greg McGary  <greg@mcgary.org>\n+\n+\t* libiberty/cplus-dem.c (cplus_demangle_opname, cplus_mangle_opname,\n+\tdemangle_expression, demangle_function_name): Use ARRAY_SIZE.\n+\t* libiberty/random.c (end_ptr): Likewise.\n+\n 2000-08-23  Alex Samuel  <samuel@codesourcery.com>\n \n \t* cp-demangle.c (result_close_template_list): Remove function."}, {"sha": "6156303ef1f45e61472ed609ac68f6e1fe264e50", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f26c11dbb2d0f1e37f16120c455147a00dff716/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f26c11dbb2d0f1e37f16120c455147a00dff716/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=2f26c11dbb2d0f1e37f16120c455147a00dff716", "patch": "@@ -1,5 +1,6 @@\n /* Demangler for GNU C++\n-   Copyright 1989, 91, 94, 95, 96, 97, 98, 1999 Free Software Foundation, Inc.\n+   Copyright 1989, 1991, 1994, 1995, 1996, 1997, 1998, 1999,\n+   2000 Free Software Foundation, Inc.\n    Written by James Clark (jjc@jclark.uucp)\n    Rewritten by Fred Fish (fnf@cygnus.com) for ARM and Lucid demangling\n    Modified by Satish Pai (pai@apollo.hp.com) for HP demangling\n@@ -705,7 +706,7 @@ cplus_demangle_opname (opname, result, options)\n \t{\n \t  /* Operator.  */\n \t  size_t i;\n-\t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n+\t  for (i = 0; i < ARRAY_SIZE (optable); i++)\n \t    {\n \t      if (strlen (optable[i].in) == 2\n \t\t  && memcmp (optable[i].in, opname + 2, 2) == 0)\n@@ -723,7 +724,7 @@ cplus_demangle_opname (opname, result, options)\n \t    {\n \t      /* Assignment.  */\n \t      size_t i;\n-\t      for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n+\t      for (i = 0; i < ARRAY_SIZE (optable); i++)\n \t\t{\n \t\t  if (strlen (optable[i].in) == 3\n \t\t      && memcmp (optable[i].in, opname + 2, 3) == 0)\n@@ -747,7 +748,7 @@ cplus_demangle_opname (opname, result, options)\n \t  && memcmp (opname + 3, \"assign_\", 7) == 0)\n \t{\n \t  size_t i;\n-\t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n+\t  for (i = 0; i < ARRAY_SIZE (optable); i++)\n \t    {\n \t      len1 = len - 10;\n \t      if ((int) strlen (optable[i].in) == len1\n@@ -764,7 +765,7 @@ cplus_demangle_opname (opname, result, options)\n       else\n \t{\n \t  size_t i;\n-\t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n+\t  for (i = 0; i < ARRAY_SIZE (optable); i++)\n \t    {\n \t      len1 = len - 3;\n \t      if ((int) strlen (optable[i].in) == len1\n@@ -811,7 +812,7 @@ cplus_mangle_opname (opname, options)\n   int len;\n \n   len = strlen (opname);\n-  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n+  for (i = 0; i < ARRAY_SIZE (optable); i++)\n     {\n       if ((int) strlen (optable[i].out) == len\n \t  && (options & DMGL_ANSI) == (optable[i].flags & DMGL_ANSI)\n@@ -1573,9 +1574,7 @@ demangle_expression (work, mangled, s, tk)\n \n \t  len = strlen (*mangled);\n \n-\t  for (i = 0;\n-\t       i < sizeof (optable) / sizeof (optable [0]);\n-\t       ++i)\n+\t  for (i = 0; i < ARRAY_SIZE (optable); ++i)\n \t    {\n \t      size_t l = strlen (optable[i].in);\n \n@@ -4430,7 +4429,7 @@ demangle_function_name (work, mangled, declp, scan)\n       if (declp->p - declp->b >= 10 /* op$assign_ */\n \t  && memcmp (declp->b + 3, \"assign_\", 7) == 0)\n \t{\n-\t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n+\t  for (i = 0; i < ARRAY_SIZE (optable); i++)\n \t    {\n \t      int len = declp->p - declp->b - 10;\n \t      if ((int) strlen (optable[i].in) == len\n@@ -4446,7 +4445,7 @@ demangle_function_name (work, mangled, declp, scan)\n \t}\n       else\n \t{\n-\t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n+\t  for (i = 0; i < ARRAY_SIZE (optable); i++)\n \t    {\n \t      int len = declp->p - declp->b - 3;\n \t      if ((int) strlen (optable[i].in) == len\n@@ -4494,7 +4493,7 @@ demangle_function_name (work, mangled, declp, scan)\n       if (declp->b[4] == '\\0')\n \t{\n \t  /* Operator.  */\n-\t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n+\t  for (i = 0; i < ARRAY_SIZE (optable); i++)\n \t    {\n \t      if (strlen (optable[i].in) == 2\n \t\t  && memcmp (optable[i].in, declp->b + 2, 2) == 0)\n@@ -4511,7 +4510,7 @@ demangle_function_name (work, mangled, declp, scan)\n \t  if (declp->b[2] == 'a' && declp->b[5] == '\\0')\n \t    {\n \t      /* Assignment.  */\n-\t      for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n+\t      for (i = 0; i < ARRAY_SIZE (optable); i++)\n \t\t{\n \t\t  if (strlen (optable[i].in) == 3\n \t\t      && memcmp (optable[i].in, declp->b + 2, 3) == 0)"}, {"sha": "4e9b7ffafcc4ddb34d65cbb596ecf239dac29ca4", "filename": "libiberty/random.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f26c11dbb2d0f1e37f16120c455147a00dff716/libiberty%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f26c11dbb2d0f1e37f16120c455147a00dff716/libiberty%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frandom.c?ref=2f26c11dbb2d0f1e37f16120c455147a00dff716", "patch": "@@ -198,7 +198,7 @@ static int rand_type = TYPE_3;\n static int rand_deg = DEG_3;\n static int rand_sep = SEP_3;\n \n-static long int *end_ptr = &randtbl[sizeof(randtbl) / sizeof(randtbl[0])];\n+static long int *end_ptr = &randtbl[ARRAY_SIZE (randtbl)];\n \f\n /* Initialize the random number generator based on the given seed.  If the\n    type is the trivial no-state-information type, just remember the seed."}]}