{"sha": "391625888d4d97f9016ab9ac04acc55d81f0c26f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkxNjI1ODg4ZDRkOTdmOTAxNmFiOWFjMDRhY2M1NWQ4MWYwYzI2Zg==", "commit": {"author": {"name": "Sylvia Taylor", "email": "sylvia.taylor@arm.com", "date": "2019-08-22T11:28:26Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-08-22T11:28:26Z"}, "message": "[aarch64]: add intrinsics for vld1(q)_x4 and vst1(q)_x4\n\nThis patch adds the intrinsic functions for:\n- vld1_<mode>_x4\n- vst1_<mode>_x4\n- vld1q_<mode>_x4\n- vst1q_<mode>_x4\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\nCommitted on behalf of Sylvia Taylor.\n\n2019-08-22  Sylvia Taylor  <sylvia.taylor@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def:\n\t(ld1x4): New.\n\t(st1x4): Likewise.\n\t* config/aarch64/aarch64-simd.md:\n\t(aarch64_ld1x4<VALLDIF:mode>): New pattern.\n\t(aarch64_st1x4<VALLDIF:mode>): Likewise.\n\t(aarch64_ld1_x4_<mode>): Likewise.\n\t(aarch64_st1_x4_<mode>): Likewise.\n\t* config/aarch64/arm_neon.h:\n\t(vld1_s8_x4): New function.\n\t(vld1q_s8_x4): Likewise.\n\t(vld1_s16_x4): Likewise.\n\t(vld1q_s16_x4): Likewise.\n\t(vld1_s32_x4): Likewise.\n\t(vld1q_s32_x4): Likewise.\n\t(vld1_u8_x4): Likewise.\n\t(vld1q_u8_x4): Likewise.\n\t(vld1_u16_x4): Likewise.\n\t(vld1q_u16_x4): Likewise.\n\t(vld1_u32_x4): Likewise.\n\t(vld1q_u32_x4): Likewise.\n\t(vld1_f16_x4): Likewise.\n\t(vld1q_f16_x4): Likewise.\n\t(vld1_f32_x4): Likewise.\n\t(vld1q_f32_x4): Likewise.\n\t(vld1_p8_x4): Likewise.\n\t(vld1q_p8_x4): Likewise.\n\t(vld1_p16_x4): Likewise.\n\t(vld1q_p16_x4): Likewise.\n\t(vld1_s64_x4): Likewise.\n\t(vld1_u64_x4): Likewise.\n\t(vld1_p64_x4): Likewise.\n\t(vld1q_s64_x4): Likewise.\n\t(vld1q_u64_x4): Likewise.\n\t(vld1q_p64_x4): Likewise.\n\t(vld1_f64_x4): Likewise.\n\t(vld1q_f64_x4): Likewise.\n\t(vst1_s8_x4): Likewise.\n\t(vst1q_s8_x4): Likewise.\n\t(vst1_s16_x4): Likewise.\n\t(vst1q_s16_x4): Likewise.\n\t(vst1_s32_x4): Likewise.\n\t(vst1q_s32_x4): Likewise.\n\t(vst1_u8_x4): Likewise.\n\t(vst1q_u8_x4): Likewise.\n\t(vst1_u16_x4): Likewise.\n\t(vst1q_u16_x4): Likewise.\n\t(vst1_u32_x4): Likewise.\n\t(vst1q_u32_x4): Likewise.\n\t(vst1_f16_x4): Likewise.\n\t(vst1q_f16_x4): Likewise.\n\t(vst1_f32_x4): Likewise.\n\t(vst1q_f32_x4): Likewise.\n\t(vst1_p8_x4): Likewise.\n\t(vst1q_p8_x4): Likewise.\n\t(vst1_p16_x4): Likewise.\n\t(vst1q_p16_x4): Likewise.\n\t(vst1_s64_x4): Likewise.\n\t(vst1_u64_x4): Likewise.\n\t(vst1_p64_x4): Likewise.\n\t(vst1q_s64_x4): Likewise.\n\t(vst1q_u64_x4): Likewise.\n\t(vst1q_p64_x4): Likewise.\n\t(vst1_f64_x4): Likewise.\n\t(vst1q_f64_x4): Likewise.\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vld1x4.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst1x4.c: New test.\n\nFrom-SVN: r274820", "tree": {"sha": "1cd3b8768ff07cfdd2e11ff9336bde0dddd0146b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cd3b8768ff07cfdd2e11ff9336bde0dddd0146b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/391625888d4d97f9016ab9ac04acc55d81f0c26f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391625888d4d97f9016ab9ac04acc55d81f0c26f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391625888d4d97f9016ab9ac04acc55d81f0c26f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391625888d4d97f9016ab9ac04acc55d81f0c26f/comments", "author": null, "committer": null, "parents": [{"sha": "b1c9ec725da365165ce4c2fdf63daa33b7d86649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c9ec725da365165ce4c2fdf63daa33b7d86649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c9ec725da365165ce4c2fdf63daa33b7d86649"}], "stats": {"total": 797, "additions": 797, "deletions": 0}, "files": [{"sha": "271786f27b3dd91ae843f3deaf9c41a87c23d366", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=391625888d4d97f9016ab9ac04acc55d81f0c26f", "patch": "@@ -1,3 +1,71 @@\n+2019-08-22  Sylvia Taylor  <sylvia.taylor@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def:\n+\t(ld1x4): New.\n+\t(st1x4): Likewise.\n+\t* config/aarch64/aarch64-simd.md:\n+\t(aarch64_ld1x4<VALLDIF:mode>): New pattern.\n+\t(aarch64_st1x4<VALLDIF:mode>): Likewise.\n+\t(aarch64_ld1_x4_<mode>): Likewise.\n+\t(aarch64_st1_x4_<mode>): Likewise.\n+\t* config/aarch64/arm_neon.h:\n+\t(vld1_s8_x4): New function.\n+\t(vld1q_s8_x4): Likewise.\n+\t(vld1_s16_x4): Likewise.\n+\t(vld1q_s16_x4): Likewise.\n+\t(vld1_s32_x4): Likewise.\n+\t(vld1q_s32_x4): Likewise.\n+\t(vld1_u8_x4): Likewise.\n+\t(vld1q_u8_x4): Likewise.\n+\t(vld1_u16_x4): Likewise.\n+\t(vld1q_u16_x4): Likewise.\n+\t(vld1_u32_x4): Likewise.\n+\t(vld1q_u32_x4): Likewise.\n+\t(vld1_f16_x4): Likewise.\n+\t(vld1q_f16_x4): Likewise.\n+\t(vld1_f32_x4): Likewise.\n+\t(vld1q_f32_x4): Likewise.\n+\t(vld1_p8_x4): Likewise.\n+\t(vld1q_p8_x4): Likewise.\n+\t(vld1_p16_x4): Likewise.\n+\t(vld1q_p16_x4): Likewise.\n+\t(vld1_s64_x4): Likewise.\n+\t(vld1_u64_x4): Likewise.\n+\t(vld1_p64_x4): Likewise.\n+\t(vld1q_s64_x4): Likewise.\n+\t(vld1q_u64_x4): Likewise.\n+\t(vld1q_p64_x4): Likewise.\n+\t(vld1_f64_x4): Likewise.\n+\t(vld1q_f64_x4): Likewise.\n+\t(vst1_s8_x4): Likewise.\n+\t(vst1q_s8_x4): Likewise.\n+\t(vst1_s16_x4): Likewise.\n+\t(vst1q_s16_x4): Likewise.\n+\t(vst1_s32_x4): Likewise.\n+\t(vst1q_s32_x4): Likewise.\n+\t(vst1_u8_x4): Likewise.\n+\t(vst1q_u8_x4): Likewise.\n+\t(vst1_u16_x4): Likewise.\n+\t(vst1q_u16_x4): Likewise.\n+\t(vst1_u32_x4): Likewise.\n+\t(vst1q_u32_x4): Likewise.\n+\t(vst1_f16_x4): Likewise.\n+\t(vst1q_f16_x4): Likewise.\n+\t(vst1_f32_x4): Likewise.\n+\t(vst1q_f32_x4): Likewise.\n+\t(vst1_p8_x4): Likewise.\n+\t(vst1q_p8_x4): Likewise.\n+\t(vst1_p16_x4): Likewise.\n+\t(vst1q_p16_x4): Likewise.\n+\t(vst1_s64_x4): Likewise.\n+\t(vst1_u64_x4): Likewise.\n+\t(vst1_p64_x4): Likewise.\n+\t(vst1q_s64_x4): Likewise.\n+\t(vst1q_u64_x4): Likewise.\n+\t(vst1q_p64_x4): Likewise.\n+\t(vst1_f64_x4): Likewise.\n+\t(vst1q_f64_x4): Likewise.\n+\n 2019-08-22  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* config/aarch64/aarch64-sve.md (vcond_mask): Add \"@\"."}, {"sha": "779111a486dc63cb2618629435f19592ed1dc9e9", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=391625888d4d97f9016ab9ac04acc55d81f0c26f", "patch": "@@ -465,12 +465,18 @@\n   /* Implemented by aarch64_ld1x3<VALLDIF:mode>.  */\n   BUILTIN_VALLDIF (LOADSTRUCT, ld1x3, 0)\n \n+  /* Implemented by aarch64_ld1x4<VALLDIF:mode>.  */\n+  BUILTIN_VALLDIF (LOADSTRUCT, ld1x4, 0)\n+\n   /* Implemented by aarch64_st1x2<VALLDIF:mode>.  */\n   BUILTIN_VALLDIF (STORESTRUCT, st1x2, 0)\n \n   /* Implemented by aarch64_st1x3<VALLDIF:mode>.  */\n   BUILTIN_VALLDIF (STORESTRUCT, st1x3, 0)\n \n+  /* Implemented by aarch64_st1x4<VALLDIF:mode>.  */\n+  BUILTIN_VALLDIF (STORESTRUCT, st1x4, 0)\n+\n   /* Implemented by fma<mode>4.  */\n   BUILTIN_VHSDF (TERNOP, fma, 4)\n   VAR1 (TERNOP, fma, 4, hf)"}, {"sha": "6f7fb1c9b0c9dd3f618ea1c04d75072af5f28026", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=391625888d4d97f9016ab9ac04acc55d81f0c26f", "patch": "@@ -5284,6 +5284,28 @@\n   [(set_attr \"type\" \"neon_load1_3reg<q>\")]\n )\n \n+(define_expand \"aarch64_ld1x4<VALLDIF:mode>\"\n+  [(match_operand:XI 0 \"register_operand\" \"=w\")\n+   (match_operand:DI 1 \"register_operand\" \"r\")\n+   (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+  \"TARGET_SIMD\"\n+{\n+  rtx mem = gen_rtx_MEM (XImode, operands[1]);\n+  emit_insn (gen_aarch64_ld1_x4_<VALLDIF:mode> (operands[0], mem));\n+  DONE;\n+})\n+\n+(define_insn \"aarch64_ld1_x4_<mode>\"\n+  [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n+\t(unspec:XI\n+\t  [(match_operand:XI 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t   (unspec:VALLDIF [(const_int 4)] UNSPEC_VSTRUCTDUMMY)]\n+\tUNSPEC_LD1))]\n+  \"TARGET_SIMD\"\n+  \"ld1\\\\t{%S0.<Vtype> - %V0.<Vtype>}, %1\"\n+  [(set_attr \"type\" \"neon_load1_4reg<q>\")]\n+)\n+\n (define_expand \"aarch64_st1x2<VALLDIF:mode>\"\n   [(match_operand:DI 0 \"register_operand\")\n    (match_operand:OI 1 \"register_operand\")\n@@ -5326,6 +5348,28 @@\n   [(set_attr \"type\" \"neon_store1_3reg<q>\")]\n )\n \n+(define_expand \"aarch64_st1x4<VALLDIF:mode>\"\n+  [(match_operand:DI 0 \"register_operand\" \"\")\n+   (match_operand:XI 1 \"register_operand\" \"\")\n+   (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+  \"TARGET_SIMD\"\n+{\n+  rtx mem = gen_rtx_MEM (XImode, operands[0]);\n+  emit_insn (gen_aarch64_st1_x4_<VALLDIF:mode> (mem, operands[1]));\n+  DONE;\n+})\n+\n+(define_insn \"aarch64_st1_x4_<mode>\"\n+  [(set (match_operand:XI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:XI\n+\t   [(match_operand:XI 1 \"register_operand\" \"w\")\n+\t   (unspec:VALLDIF [(const_int 4)] UNSPEC_VSTRUCTDUMMY)]\n+\tUNSPEC_ST1))]\n+  \"TARGET_SIMD\"\n+  \"st1\\\\t{%S1.<Vtype> - %V1.<Vtype>}, %0\"\n+  [(set_attr \"type\" \"neon_store1_4reg<q>\")]\n+)\n+\n (define_insn \"*aarch64_mov<mode>\"\n   [(set (match_operand:VSTRUCT 0 \"aarch64_simd_nonimmediate_operand\" \"=w,Utv,w\")\n \t(match_operand:VSTRUCT 1 \"aarch64_simd_general_operand\" \" w,w,Utv\"))]"}, {"sha": "9ecc00c46b9de2c7c3f86339797d1cd9c2497619", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 508, "deletions": 0, "changes": 508, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=391625888d4d97f9016ab9ac04acc55d81f0c26f", "patch": "@@ -17968,6 +17968,288 @@ vld1q_u64 (const uint64_t *a)\n     __builtin_aarch64_ld1v2di ((const __builtin_aarch64_simd_di *) a);\n }\n \n+/* vld1(q)_x4.  */\n+\n+__extension__ extern __inline int8x8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_s8_x4 (const int8_t *__a)\n+{\n+  union { int8x8x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v8qi ((const __builtin_aarch64_simd_qi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline int8x16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_s8_x4 (const int8_t *__a)\n+{\n+  union { int8x16x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v16qi ((const __builtin_aarch64_simd_qi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline int16x4x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_s16_x4 (const int16_t *__a)\n+{\n+  union { int16x4x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v4hi ((const __builtin_aarch64_simd_hi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline int16x8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_s16_x4 (const int16_t *__a)\n+{\n+  union { int16x8x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v8hi ((const __builtin_aarch64_simd_hi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline int32x2x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_s32_x4 (const int32_t *__a)\n+{\n+  union { int32x2x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+  = __builtin_aarch64_ld1x4v2si ((const __builtin_aarch64_simd_si *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline int32x4x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_s32_x4 (const int32_t *__a)\n+{\n+  union { int32x4x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+  = __builtin_aarch64_ld1x4v4si ((const __builtin_aarch64_simd_si *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline uint8x8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_u8_x4 (const uint8_t *__a)\n+{\n+  union { uint8x8x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v8qi ((const __builtin_aarch64_simd_qi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline uint8x16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_u8_x4 (const uint8_t *__a)\n+{\n+  union { uint8x16x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v16qi ((const __builtin_aarch64_simd_qi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline uint16x4x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_u16_x4 (const uint16_t *__a)\n+{\n+  union { uint16x4x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v4hi ((const __builtin_aarch64_simd_hi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline uint16x8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_u16_x4 (const uint16_t *__a)\n+{\n+  union { uint16x8x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v8hi ((const __builtin_aarch64_simd_hi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline uint32x2x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_u32_x4 (const uint32_t *__a)\n+{\n+  union { uint32x2x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v2si ((const __builtin_aarch64_simd_si *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline uint32x4x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_u32_x4 (const uint32_t *__a)\n+{\n+  union { uint32x4x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v4si ((const __builtin_aarch64_simd_si *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline float16x4x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_f16_x4 (const float16_t *__a)\n+{\n+  union { float16x4x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v4hf ((const __builtin_aarch64_simd_hf *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline float16x8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_f16_x4 (const float16_t *__a)\n+{\n+  union { float16x8x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v8hf ((const __builtin_aarch64_simd_hf *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline float32x2x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_f32_x4 (const float32_t *__a)\n+{\n+  union { float32x2x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v2sf ((const __builtin_aarch64_simd_sf *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline float32x4x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_f32_x4 (const float32_t *__a)\n+{\n+  union { float32x4x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v4sf ((const __builtin_aarch64_simd_sf *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline poly8x8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_p8_x4 (const poly8_t *__a)\n+{\n+  union { poly8x8x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v8qi ((const __builtin_aarch64_simd_qi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline poly8x16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_p8_x4 (const poly8_t *__a)\n+{\n+  union { poly8x16x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v16qi ((const __builtin_aarch64_simd_qi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline poly16x4x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_p16_x4 (const poly16_t *__a)\n+{\n+  union { poly16x4x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v4hi ((const __builtin_aarch64_simd_hi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline poly16x8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_p16_x4 (const poly16_t *__a)\n+{\n+  union { poly16x8x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v8hi ((const __builtin_aarch64_simd_hi *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline int64x1x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_s64_x4 (const int64_t *__a)\n+{\n+  union { int64x1x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4di ((const __builtin_aarch64_simd_di *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline uint64x1x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_u64_x4 (const uint64_t *__a)\n+{\n+  union { uint64x1x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4di ((const __builtin_aarch64_simd_di *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline poly64x1x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_p64_x4 (const poly64_t *__a)\n+{\n+  union { poly64x1x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4di ((const __builtin_aarch64_simd_di *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline int64x2x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_s64_x4 (const int64_t *__a)\n+{\n+  union { int64x2x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v2di ((const __builtin_aarch64_simd_di *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline uint64x2x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_u64_x4 (const uint64_t *__a)\n+{\n+  union { uint64x2x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v2di ((const __builtin_aarch64_simd_di *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline poly64x2x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_p64_x4 (const poly64_t *__a)\n+{\n+  union { poly64x2x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v2di ((const __builtin_aarch64_simd_di *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline float64x1x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1_f64_x4 (const float64_t *__a)\n+{\n+  union { float64x1x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4df ((const __builtin_aarch64_simd_df *) __a);\n+  return __au.__i;\n+}\n+\n+__extension__ extern __inline float64x2x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vld1q_f64_x4 (const float64_t *__a)\n+{\n+  union { float64x2x4_t __i; __builtin_aarch64_simd_xi __o; } __au;\n+  __au.__o\n+    = __builtin_aarch64_ld1x4v2df ((const __builtin_aarch64_simd_df *) __a);\n+  return __au.__i;\n+}\n+\n /* vld1_dup  */\n \n __extension__ extern __inline float16x4_t\n@@ -28596,6 +28878,232 @@ vst1q_p64_x3 (poly64_t * __a, poly64x2x3_t val)\n   __builtin_aarch64_st1x3v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n+/* vst1(q)_x4.  */\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_s8_x4 (int8_t * __a, int8x8x4_t val)\n+{\n+  union { int8x8x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v8qi ((__builtin_aarch64_simd_qi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_s8_x4 (int8_t * __a, int8x16x4_t val)\n+{\n+  union { int8x16x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v16qi ((__builtin_aarch64_simd_qi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_s16_x4 (int16_t * __a, int16x4x4_t val)\n+{\n+  union { int16x4x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v4hi ((__builtin_aarch64_simd_hi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_s16_x4 (int16_t * __a, int16x8x4_t val)\n+{\n+  union { int16x8x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v8hi ((__builtin_aarch64_simd_hi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_s32_x4 (int32_t * __a, int32x2x4_t val)\n+{\n+  union { int32x2x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v2si ((__builtin_aarch64_simd_si *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_s32_x4 (int32_t * __a, int32x4x4_t val)\n+{\n+  union { int32x4x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v4si ((__builtin_aarch64_simd_si *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_u8_x4 (uint8_t * __a, uint8x8x4_t val)\n+{\n+  union { uint8x8x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v8qi ((__builtin_aarch64_simd_qi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_u8_x4 (uint8_t * __a, uint8x16x4_t val)\n+{\n+  union { uint8x16x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v16qi ((__builtin_aarch64_simd_qi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_u16_x4 (uint16_t * __a, uint16x4x4_t val)\n+{\n+  union { uint16x4x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v4hi ((__builtin_aarch64_simd_hi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_u16_x4 (uint16_t * __a, uint16x8x4_t val)\n+{\n+  union { uint16x8x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v8hi ((__builtin_aarch64_simd_hi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_u32_x4 (uint32_t * __a, uint32x2x4_t val)\n+{\n+  union { uint32x2x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v2si ((__builtin_aarch64_simd_si *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_u32_x4 (uint32_t * __a, uint32x4x4_t val)\n+{\n+  union { uint32x4x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v4si ((__builtin_aarch64_simd_si *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_f16_x4 (float16_t * __a, float16x4x4_t val)\n+{\n+  union { float16x4x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v4hf ((__builtin_aarch64_simd_hf *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_f16_x4 (float16_t * __a, float16x8x4_t val)\n+{\n+  union { float16x8x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v8hf ((__builtin_aarch64_simd_hf *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_f32_x4 (float32_t * __a, float32x2x4_t val)\n+{\n+  union { float32x2x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v2sf ((__builtin_aarch64_simd_sf *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_f32_x4 (float32_t * __a, float32x4x4_t val)\n+{\n+  union { float32x4x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v4sf ((__builtin_aarch64_simd_sf *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_p8_x4 (poly8_t * __a, poly8x8x4_t val)\n+{\n+  union { poly8x8x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v8qi ((__builtin_aarch64_simd_qi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_p8_x4 (poly8_t * __a, poly8x16x4_t val)\n+{\n+  union { poly8x16x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v16qi ((__builtin_aarch64_simd_qi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_p16_x4 (poly16_t * __a, poly16x4x4_t val)\n+{\n+  union { poly16x4x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v4hi ((__builtin_aarch64_simd_hi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_p16_x4 (poly16_t * __a, poly16x8x4_t val)\n+{\n+  union { poly16x8x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v8hi ((__builtin_aarch64_simd_hi *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_s64_x4 (int64_t * __a, int64x1x4_t val)\n+{\n+  union { int64x1x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4di ((__builtin_aarch64_simd_di *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_u64_x4 (uint64_t * __a, uint64x1x4_t val)\n+{\n+  union { uint64x1x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4di ((__builtin_aarch64_simd_di *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_p64_x4 (poly64_t * __a, poly64x1x4_t val)\n+{\n+  union { poly64x1x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4di ((__builtin_aarch64_simd_di *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_s64_x4 (int64_t * __a, int64x2x4_t val)\n+{\n+  union { int64x2x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v2di ((__builtin_aarch64_simd_di *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_u64_x4 (uint64_t * __a, uint64x2x4_t val)\n+{\n+  union { uint64x2x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v2di ((__builtin_aarch64_simd_di *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_p64_x4 (poly64_t * __a, poly64x2x4_t val)\n+{\n+  union { poly64x2x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v2di ((__builtin_aarch64_simd_di *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1_f64_x4 (float64_t * __a, float64x1x4_t val)\n+{\n+  union { float64x1x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4df ((__builtin_aarch64_simd_df *) __a, __u.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst1q_f64_x4 (float64_t * __a, float64x2x4_t val)\n+{\n+  union { float64x2x4_t __i; __builtin_aarch64_simd_xi __o; } __u = { val };\n+  __builtin_aarch64_st1x4v2df ((__builtin_aarch64_simd_df *) __a, __u.__o);\n+}\n+\n /* vstn */\n \n __extension__ extern __inline void"}, {"sha": "03fd8328577215a0811040578ecc814715202e1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=391625888d4d97f9016ab9ac04acc55d81f0c26f", "patch": "@@ -1,3 +1,8 @@\n+2019-08-22  Sylvia Taylor  <sylvia.taylor@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld1x4.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst1x4.c: New test.\n+\n 2019-08-22  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \t    Richard Sandiford  <richard.sandiford@arm.com>\n "}, {"sha": "451a0afc6aabca5b1bf79f2b7e925f0d625b355f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld1x4.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1x4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1x4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld1x4.c?ref=391625888d4d97f9016ab9ac04acc55d81f0c26f", "patch": "@@ -0,0 +1,83 @@\n+/* We haven't implemented these intrinsics for arm yet.  */\n+/* { dg-xfail-if \"\" { arm*-*-* } } */\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+\n+extern void abort (void);\n+\n+#define TESTMETH(BASE, ELTS, SUFFIX)\t\t\t\\\n+int __attribute__ ((noinline))\t\t\t\t\\\n+test_vld1##SUFFIX##_x4 ()\t\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  BASE##_t data[ELTS * 4];\t\t\t\t\\\n+  BASE##_t temp[ELTS * 4];\t\t\t\t\\\n+  BASE##x##ELTS##x##4##_t vectors;\t\t\t\\\n+  int i,j;\t\t\t\t\t\t\\\n+  for (i = 0; i < ELTS * 4; i++)\t\t\t\\\n+    data [i] = (BASE##_t) 4*i;\t\t\t\t\\\n+  asm volatile (\"\" : : : \"memory\");\t\t\t\\\n+  vectors = vld1##SUFFIX##_x4 (data);\t\t\t\\\n+  vst1##SUFFIX (temp, vectors.val[0]);\t\t\t\\\n+  vst1##SUFFIX (&temp[ELTS], vectors.val[1]);\t\t\\\n+  vst1##SUFFIX (&temp[ELTS * 2], vectors.val[2]);\t\\\n+  vst1##SUFFIX (&temp[ELTS * 3], vectors.val[3]);\t\\\n+  asm volatile (\"\" : : : \"memory\");\t\t\t\\\n+  for (j = 0; j < ELTS * 4; j++)\t\t\t\\\n+    if (temp[j] != data[j])\t\t\t\t\\\n+      return 1;\t\t\t\t\t\t\\\n+  return 0;\t\t\t\t\t\t\\\n+}\n+\n+#define VARIANTS_1(VARIANT)\t\\\n+VARIANT (uint8, 8, _u8)\t\t\\\n+VARIANT (uint16, 4, _u16)\t\\\n+VARIANT (uint32, 2, _u32)\t\\\n+VARIANT (uint64, 1, _u64)\t\\\n+VARIANT (int8, 8, _s8)\t\t\\\n+VARIANT (int16, 4, _s16)\t\\\n+VARIANT (int32, 2, _s32)\t\\\n+VARIANT (int64, 1, _s64)\t\\\n+VARIANT (poly8, 8, _p8)\t\t\\\n+VARIANT (poly16, 4, _p16)\t\\\n+VARIANT (poly64, 1, _p64)\t\\\n+VARIANT (float16, 4, _f16)\t\\\n+VARIANT (float32, 2, _f32)\t\\\n+VARIANT (uint8, 16, q_u8)\t\\\n+VARIANT (uint16, 8, q_u16)\t\\\n+VARIANT (uint32, 4, q_u32)\t\\\n+VARIANT (uint64, 2, q_u64)\t\\\n+VARIANT (int8, 16, q_s8)\t\\\n+VARIANT (int16, 8, q_s16)\t\\\n+VARIANT (int32, 4, q_s32)\t\\\n+VARIANT (int64, 2, q_s64)\t\\\n+VARIANT (poly8, 16, q_p8)\t\\\n+VARIANT (poly16, 8, q_p16)\t\\\n+VARIANT (poly64, 2, q_p64)\t\\\n+VARIANT (float16, 8, q_f16)\t\\\n+VARIANT (float32, 4, q_f32)\n+\n+#ifdef __aarch64__\n+#define VARIANTS(VARIANT) VARIANTS_1(VARIANT)\t\\\n+VARIANT (float64, 1, _f64)\t\t\t\\\n+VARIANT (float64, 2, q_f64)\n+#else\n+#define VARIANTS(VARIANT) VARIANTS_1(VARIANT)\n+#endif\n+\n+/* Tests of vld1_x4 and vld1q_x4.  */\n+VARIANTS (TESTMETH)\n+\n+#define CHECKS(BASE, ELTS, SUFFIX)\t\\\n+  if (test_vld1##SUFFIX##_x4 () != 0)\t\\\n+    fprintf (stderr, \"test_vld1##SUFFIX##_x4\");\n+\n+int\n+main (int argc, char **argv)\n+{\n+  VARIANTS (CHECKS)\n+\n+  return 0;\n+}"}, {"sha": "1f17b5342defa3de7abb3b6b1587cbdbe923ea74", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst1x4.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst1x4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391625888d4d97f9016ab9ac04acc55d81f0c26f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst1x4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst1x4.c?ref=391625888d4d97f9016ab9ac04acc55d81f0c26f", "patch": "@@ -0,0 +1,83 @@\n+/* We haven't implemented these intrinsics for arm yet.  */\n+/* { dg-xfail-if \"\" { arm*-*-* } } */\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+\n+extern void abort (void);\n+\n+#define TESTMETH(BASE, ELTS, SUFFIX)\t\t\t\\\n+int __attribute__ ((noinline))\t\t\t\t\\\n+test_vst1##SUFFIX##_x4 ()\t\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  BASE##_t data[ELTS * 4];\t\t\t\t\\\n+  BASE##_t temp[ELTS * 4];\t\t\t\t\\\n+  BASE##x##ELTS##x##4##_t vectors;\t\t\t\\\n+  int i,j;\t\t\t\t\t\t\\\n+  for (i = 0; i < ELTS * 4; i++)\t\t\t\\\n+    data [i] = (BASE##_t) 4*i;\t\t\t\t\\\n+  asm volatile (\"\" : : : \"memory\");\t\t\t\\\n+  vectors.val[0] = vld1##SUFFIX (data);\t\t\t\\\n+  vectors.val[1] = vld1##SUFFIX (&data[ELTS]);\t\t\\\n+  vectors.val[2] = vld1##SUFFIX (&data[ELTS * 2]);\t\\\n+  vectors.val[3] = vld1##SUFFIX (&data[ELTS * 3]);\t\\\n+  vst1##SUFFIX##_x4 (temp, vectors);\t\t\t\\\n+  asm volatile (\"\" : : : \"memory\");\t\t\t\\\n+  for (j = 0; j < ELTS * 4; j++)\t\t\t\\\n+    if (temp[j] != data[j])\t\t\t\t\\\n+      return 1;\t\t\t\t\t\t\\\n+  return 0;\t\t\t\t\t\t\\\n+}\n+\n+#define VARIANTS_1(VARIANT)\t\\\n+VARIANT (uint8, 8, _u8)\t\t\\\n+VARIANT (uint16, 4, _u16)\t\\\n+VARIANT (uint32, 2, _u32)\t\\\n+VARIANT (uint64, 1, _u64)\t\\\n+VARIANT (int8, 8, _s8)\t\t\\\n+VARIANT (int16, 4, _s16)\t\\\n+VARIANT (int32, 2, _s32)\t\\\n+VARIANT (int64, 1, _s64)\t\\\n+VARIANT (poly8, 8, _p8)\t\t\\\n+VARIANT (poly16, 4, _p16)\t\\\n+VARIANT (poly64, 1, _p64)\t\\\n+VARIANT (float16, 4, _f16)\t\\\n+VARIANT (float32, 2, _f32)\t\\\n+VARIANT (uint8, 16, q_u8)\t\\\n+VARIANT (uint16, 8, q_u16)\t\\\n+VARIANT (uint32, 4, q_u32)\t\\\n+VARIANT (uint64, 2, q_u64)\t\\\n+VARIANT (int8, 16, q_s8)\t\\\n+VARIANT (int16, 8, q_s16)\t\\\n+VARIANT (int32, 4, q_s32)\t\\\n+VARIANT (int64, 2, q_s64)\t\\\n+VARIANT (poly8, 16, q_p8)\t\\\n+VARIANT (poly16, 8, q_p16)\t\\\n+VARIANT (poly64, 2, q_p64)\t\\\n+VARIANT (float16, 8, q_f16)\t\\\n+VARIANT (float32, 4, q_f32)\n+\n+#ifdef __aarch64__\n+#define VARIANTS(VARIANT) VARIANTS_1(VARIANT)\t\\\n+VARIANT (float64, 1, _f64)\t\t\t\\\n+VARIANT (float64, 2, q_f64)\n+#else\n+#define VARIANTS(VARIANT) VARIANTS_1(VARIANT)\n+#endif\n+\n+/* Tests of vst1_x4 and vst1q_x4.  */\n+VARIANTS (TESTMETH)\n+\n+#define CHECKS(BASE, ELTS, SUFFIX)\t\\\n+  if (test_vst1##SUFFIX##_x4 () != 0)\t\\\n+    fprintf (stderr, \"test_vst1##SUFFIX##_x4\");\n+\n+int\n+main (int argc, char **argv)\n+{\n+  VARIANTS (CHECKS)\n+\n+  return 0;\n+}"}]}