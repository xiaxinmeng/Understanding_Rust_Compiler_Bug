{"sha": "72531479fc2bf25c0de613b578812554aa7e7903", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1MzE0NzlmYzJiZjI1YzBkZTYxM2I1Nzg4MTI1NTRhYTdlNzkwMw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2003-05-15T00:07:02Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2003-05-15T00:07:02Z"}, "message": "combine.c: Fix header comments.\n\n2003-05-14  Eric Christopher  <echristo@redhat.com>\n\n\t* combine.c: Fix header comments.\n\t(distribute_notes): Remove usage of elim_i1, elim_i2. Propagate\n\tto all calls and prototype.\n\nFrom-SVN: r66813", "tree": {"sha": "02014eddaa4874b7cb344787b2802fdb288354cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02014eddaa4874b7cb344787b2802fdb288354cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72531479fc2bf25c0de613b578812554aa7e7903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72531479fc2bf25c0de613b578812554aa7e7903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72531479fc2bf25c0de613b578812554aa7e7903", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72531479fc2bf25c0de613b578812554aa7e7903/comments", "author": null, "committer": null, "parents": [{"sha": "e43736ad2e9788b5b02a39f38413c5fe693cb6cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43736ad2e9788b5b02a39f38413c5fe693cb6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e43736ad2e9788b5b02a39f38413c5fe693cb6cb"}], "stats": {"total": 75, "additions": 26, "deletions": 49}, "files": [{"sha": "f58515ea3e23e887c362522ae8f59d0fecd11b18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72531479fc2bf25c0de613b578812554aa7e7903/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72531479fc2bf25c0de613b578812554aa7e7903/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72531479fc2bf25c0de613b578812554aa7e7903", "patch": "@@ -1,7 +1,13 @@\n+2003-05-14  Eric Christopher  <echristo@redhat.com>\n+\n+\t* combine.c: Fix header comments.\n+\t(distribute_notes): Remove usage of elim_i1, elim_i2. Propagate\n+\tto all calls and prototype.\n+\n 2003-05-14  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/10764\n-\t* config/i386/i386.md (atan2df3, atan2sf3, atan2xf3, atan2tf3): \n+\t* config/i386/i386.md (atan2df3, atan2sf3, atan2xf3, atan2tf3):\n \tAdd an explicit clobber to show that UNSPEC_FPATAN clobbers st(1).\n \t(*fyl2x_sfxf3, *fyl2x_dfxf3, *fyl2x_xf3, *fyl2x_tfxf3):  Likewise,\n \tadd an explicit clobber to show that UNSPEC_FYL2X clobbers st(1).\n@@ -67,7 +73,7 @@\n \t(libgcov.a): Depend on libgcc.a.\n \t(gcov.o, gcov-dump.o): Add gcov-io.c.\n \t* mklibgcc.in (libgcov_c_dep): Use $(srcdir).\n-\t\n+\n \t* loop.c (check_dbra_loop): Factor common test.\n \n 2003-05-14  Ben Elliston  <bje@wasabisystems.com>"}, {"sha": "bff8b08f5bfa61770a5fe8d67dca71136d959161", "filename": "gcc/combine.c", "status": "modified", "additions": 18, "deletions": 47, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72531479fc2bf25c0de613b578812554aa7e7903/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72531479fc2bf25c0de613b578812554aa7e7903/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=72531479fc2bf25c0de613b578812554aa7e7903", "patch": "@@ -53,10 +53,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    flow.c aren't completely updated:\n \n    - reg_live_length is not updated\n-   - reg_n_refs is not adjusted in the rare case when a register is\n-     no longer required in a computation\n-   - there are extremely rare cases (see distribute_regnotes) when a\n-     REG_DEAD note is lost\n    - a LOG_LINKS entry that refers to an insn with multiple SETs may be\n      removed because there is no way to know which register it was\n      linking\n@@ -413,7 +409,7 @@ static void reg_dead_at_p_1\tPARAMS ((rtx, rtx, void *));\n static int reg_dead_at_p\tPARAMS ((rtx, rtx));\n static void move_deaths\t\tPARAMS ((rtx, rtx, int, rtx, rtx *));\n static int reg_bitfield_target_p  PARAMS ((rtx, rtx));\n-static void distribute_notes\tPARAMS ((rtx, rtx, rtx, rtx, rtx, rtx));\n+static void distribute_notes\tPARAMS ((rtx, rtx, rtx, rtx));\n static void distribute_links\tPARAMS ((rtx));\n static void mark_used_regs_combine PARAMS ((rtx));\n static int insn_cuid\t\tPARAMS ((rtx));\n@@ -2492,7 +2488,7 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \t  REG_N_DEATHS (REGNO (XEXP (note, 0)))++;\n \n       distribute_notes (new_other_notes, undobuf.other_insn,\n-\t\t\tundobuf.other_insn, NULL_RTX, NULL_RTX, NULL_RTX);\n+\t\t\tundobuf.other_insn, NULL_RTX);\n     }\n #ifdef HAVE_cc0\n   /* If I2 is the setter CC0 and I3 is the user CC0 then check whether\n@@ -2516,15 +2512,6 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n     rtx i3links, i2links, i1links = 0;\n     rtx midnotes = 0;\n     unsigned int regno;\n-    /* Compute which registers we expect to eliminate.  newi2pat may be setting\n-       either i3dest or i2dest, so we must check it.  Also, i1dest may be the\n-       same as i3dest, in which case newi2pat may be setting i1dest.  */\n-    rtx elim_i2 = ((newi2pat && reg_set_p (i2dest, newi2pat))\n-\t\t   || i2dest_in_i2src || i2dest_in_i1src\n-\t\t   ? 0 : i2dest);\n-    rtx elim_i1 = (i1 == 0 || i1dest_in_i1src\n-\t\t   || (newi2pat && reg_set_p (i1dest, newi2pat))\n-\t\t   ? 0 : i1dest);\n \n     /* Get the old REG_NOTES and LOG_LINKS from all our insns and\n        clear them.  */\n@@ -2655,17 +2642,13 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \n     /* Distribute all the LOG_LINKS and REG_NOTES from I1, I2, and I3.  */\n     if (i3notes)\n-      distribute_notes (i3notes, i3, i3, newi2pat ? i2 : NULL_RTX,\n-\t\t\telim_i2, elim_i1);\n+      distribute_notes (i3notes, i3, i3, newi2pat ? i2 : NULL_RTX);\n     if (i2notes)\n-      distribute_notes (i2notes, i2, i3, newi2pat ? i2 : NULL_RTX,\n-\t\t\telim_i2, elim_i1);\n+      distribute_notes (i2notes, i2, i3, newi2pat ? i2 : NULL_RTX);\n     if (i1notes)\n-      distribute_notes (i1notes, i1, i3, newi2pat ? i2 : NULL_RTX,\n-\t\t\telim_i2, elim_i1);\n+      distribute_notes (i1notes, i1, i3, newi2pat ? i2 : NULL_RTX);\n     if (midnotes)\n-      distribute_notes (midnotes, NULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n-\t\t\telim_i2, elim_i1);\n+      distribute_notes (midnotes, NULL_RTX, i3, newi2pat ? i2 : NULL_RTX);\n \n     /* Distribute any notes added to I2 or I3 by recog_for_combine.  We\n        know these are REG_UNUSED and want them to go to the desired insn,\n@@ -2678,7 +2661,7 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \t  if (GET_CODE (XEXP (temp, 0)) == REG)\n \t    REG_N_DEATHS (REGNO (XEXP (temp, 0)))++;\n \n-\tdistribute_notes (new_i2_notes, i2, i2, NULL_RTX, NULL_RTX, NULL_RTX);\n+\tdistribute_notes (new_i2_notes, i2, i2, NULL_RTX);\n       }\n \n     if (new_i3_notes)\n@@ -2687,7 +2670,7 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \t  if (GET_CODE (XEXP (temp, 0)) == REG)\n \t    REG_N_DEATHS (REGNO (XEXP (temp, 0)))++;\n \n-\tdistribute_notes (new_i3_notes, i3, i3, NULL_RTX, NULL_RTX, NULL_RTX);\n+\tdistribute_notes (new_i3_notes, i3, i3, NULL_RTX);\n       }\n \n     /* If I3DEST was used in I3SRC, it really died in I3.  We may need to\n@@ -2705,12 +2688,11 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \tif (newi2pat && reg_set_p (i3dest_killed, newi2pat))\n \t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i3dest_killed,\n \t\t\t\t\t       NULL_RTX),\n-\t\t\t    NULL_RTX, i2, NULL_RTX, elim_i2, elim_i1);\n+\t\t\t    NULL_RTX, i2, NULL_RTX);\n \telse\n \t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i3dest_killed,\n \t\t\t\t\t       NULL_RTX),\n-\t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n-\t\t\t    elim_i2, elim_i1);\n+\t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX);\n       }\n \n     if (i2dest_in_i2src)\n@@ -2720,11 +2702,10 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \n \tif (newi2pat && reg_set_p (i2dest, newi2pat))\n \t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i2dest, NULL_RTX),\n-\t\t\t    NULL_RTX, i2, NULL_RTX, NULL_RTX, NULL_RTX);\n+\t\t\t    NULL_RTX, i2, NULL_RTX);\n \telse\n \t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i2dest, NULL_RTX),\n-\t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n-\t\t\t    NULL_RTX, NULL_RTX);\n+\t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX);\n       }\n \n     if (i1dest_in_i1src)\n@@ -2734,11 +2715,10 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \n \tif (newi2pat && reg_set_p (i1dest, newi2pat))\n \t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i1dest, NULL_RTX),\n-\t\t\t    NULL_RTX, i2, NULL_RTX, NULL_RTX, NULL_RTX);\n+\t\t\t    NULL_RTX, i2, NULL_RTX);\n \telse\n \t  distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i1dest, NULL_RTX),\n-\t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n-\t\t\t    NULL_RTX, NULL_RTX);\n+\t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX);\n       }\n \n     distribute_links (i3links);\n@@ -12550,19 +12530,14 @@ reg_bitfield_target_p (x, body)\n    as appropriate.  I3 and I2 are the insns resulting from the combination\n    insns including FROM (I2 may be zero).\n \n-   ELIM_I2 and ELIM_I1 are either zero or registers that we know will\n-   not need REG_DEAD notes because they are being substituted for.  This\n-   saves searching in the most common cases.\n-\n    Each note in the list is either ignored or placed on some insns, depending\n    on the type of note.  */\n \n static void\n-distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n+distribute_notes (notes, from_insn, i3, i2)\n      rtx notes;\n      rtx from_insn;\n      rtx i3, i2;\n-     rtx elim_i2, elim_i1;\n {\n   rtx note, next_note;\n   rtx tem;\n@@ -12824,10 +12799,6 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n \t\t   && reg_referenced_p (XEXP (note, 0), PATTERN (i2)))\n \t    place = i2;\n \n-\t  if (rtx_equal_p (XEXP (note, 0), elim_i2)\n-\t      || rtx_equal_p (XEXP (note, 0), elim_i1))\n-\t    break;\n-\n \t  if (place == 0)\n \t    {\n \t      basic_block bb = this_basic_block;\n@@ -12885,7 +12856,7 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n \t\t\t  PATTERN (tem) = pc_rtx;\n \n \t\t\t  distribute_notes (REG_NOTES (tem), tem, tem,\n-\t\t\t\t\t    NULL_RTX, NULL_RTX, NULL_RTX);\n+\t\t\t\t\t    NULL_RTX);\n \t\t\t  distribute_links (LOG_LINKS (tem));\n \n \t\t\t  PUT_CODE (tem, NOTE);\n@@ -12900,7 +12871,7 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n \n \t\t\t      distribute_notes (REG_NOTES (cc0_setter),\n \t\t\t\t\t\tcc0_setter, cc0_setter,\n-\t\t\t\t\t\tNULL_RTX, NULL_RTX, NULL_RTX);\n+\t\t\t\t\t\tNULL_RTX);\n \t\t\t      distribute_links (LOG_LINKS (cc0_setter));\n \n \t\t\t      PUT_CODE (cc0_setter, NOTE);\n@@ -13048,7 +13019,7 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n \t\t\t\t= gen_rtx_EXPR_LIST (REG_DEAD, piece, NULL_RTX);\n \n \t\t\t      distribute_notes (new_note, place, place,\n-\t\t\t\t\t\tNULL_RTX, NULL_RTX, NULL_RTX);\n+\t\t\t\t\t\tNULL_RTX);\n \t\t\t    }\n \t\t\t  else if (! refers_to_regno_p (i, i + 1,\n \t\t\t\t\t\t\tPATTERN (place), 0)"}]}