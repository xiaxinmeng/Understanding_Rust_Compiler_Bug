{"sha": "79c2f6d7de59d5580d224b491d5600d20e3101fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzljMmY2ZDdkZTU5ZDU1ODBkMjI0YjQ5MWQ1NjAwZDIwZTMxMDFmZQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-07-16T14:41:57Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2018-07-16T14:41:57Z"}, "message": "S/390: Implement -mnop-mcount\n\nOn i386 the profiler call sequence always consists of 1 call\ninstruction, so -mnop-mcount generates a single nop with the same\nlength as a call. For S/390 longer sequences may be used in some\ncases, so -mnop-mcount generates the corresponding amount of nops.\n\n2018-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* config/s390/s390.c (s390_function_profiler): Generate nops\n\tinstead of profiler call sequences.\n\t* config/s390/s390.opt: Add the new option.\n\n2018-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/mnop-mcount-m31-fpic.c: New testcase.\n\t* gcc.target/s390/mnop-mcount-m31-mzarch.c: New testcase.\n\t* gcc.target/s390/mnop-mcount-m31.c: New testcase.\n\t* gcc.target/s390/mnop-mcount-m64-mfentry.c: New testcase.\n\t* gcc.target/s390/mnop-mcount-m64.c: New testcase.\n\nFrom-SVN: r262734", "tree": {"sha": "aa22e973a668c627cb3dda015a6ed4ec6bd6e1fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa22e973a668c627cb3dda015a6ed4ec6bd6e1fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79c2f6d7de59d5580d224b491d5600d20e3101fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c2f6d7de59d5580d224b491d5600d20e3101fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79c2f6d7de59d5580d224b491d5600d20e3101fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c2f6d7de59d5580d224b491d5600d20e3101fe/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "605090dc791ab2495f021908edc4dc03851e06a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605090dc791ab2495f021908edc4dc03851e06a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605090dc791ab2495f021908edc4dc03851e06a6"}], "stats": {"total": 176, "additions": 145, "deletions": 31}, "files": [{"sha": "56e1ec3d7e38d89603505fb08530d363ef2f5191", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79c2f6d7de59d5580d224b491d5600d20e3101fe", "patch": "@@ -1,8 +1,14 @@\n 2018-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n-\t* gcc/config/s390/s390.c (s390_function_profiler): Generate\n+\t* config/s390/s390.c (s390_function_profiler): Generate nops\n+\tinstead of profiler call sequences.\n+\t* config/s390/s390.opt: Add the new option.\n+\n+2018-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_function_profiler): Generate\n \t__mcount_loc section.\n-\t* gcc/config/s390/s390.opt: Add the new option.\n+\t* config/s390/s390.opt: Add the new option.\n \n 2018-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n "}, {"sha": "ba18cb1c39a4d7a5a7a4ee1e154b693fb1012563", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 84, "deletions": 29, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=79c2f6d7de59d5580d224b491d5600d20e3101fe", "patch": "@@ -13123,6 +13123,30 @@ s390_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n   emit_move_insn (mem, fnaddr);\n }\n \n+static void\n+output_asm_nops (const char *user, int hw)\n+{\n+  asm_fprintf (asm_out_file, \"\\t# NOPs for %s (%d halfwords)\\n\", user, hw);\n+  while (hw > 0)\n+    {\n+      if (TARGET_CPU_ZARCH && hw >= 3)\n+        {\n+          output_asm_insn (\"brcl\\t0,0\", NULL);\n+          hw -= 3;\n+        }\n+      else if (hw >= 2)\n+        {\n+          output_asm_insn (\"bc\\t0,0\", NULL);\n+          hw -= 2;\n+        }\n+      else\n+        {\n+          output_asm_insn (\"bcr\\t0,0\", NULL);\n+          hw -= 1;\n+        }\n+    }\n+}\n+\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n \n@@ -13156,56 +13180,87 @@ s390_function_profiler (FILE *file, int labelno)\n \n   if (flag_fentry)\n     {\n-      if (cfun->static_chain_decl)\n+      if (flag_nop_mcount)\n+        output_asm_nops (\"-mnop-mcount\", /* brasl */ 3);\n+      else if (cfun->static_chain_decl)\n         warning (OPT_Wcannot_profile, \"nested functions cannot be profiled \"\n                  \"with -mfentry on s390\");\n       else\n         output_asm_insn (\"brasl\\t0,%4\", op);\n     }\n   else if (TARGET_64BIT)\n     {\n-      output_asm_insn (\"stg\\t%0,%1\", op);\n-      output_asm_insn (\"larl\\t%2,%3\", op);\n-      output_asm_insn (\"brasl\\t%0,%4\", op);\n-      output_asm_insn (\"lg\\t%0,%1\", op);\n+      if (flag_nop_mcount)\n+        output_asm_nops (\"-mnop-mcount\", /* stg */ 3 + /* larl */ 3 +\n+                         /* brasl */ 3 + /* lg */ 3);\n+      else\n+        {\n+          output_asm_insn (\"stg\\t%0,%1\", op);\n+          output_asm_insn (\"larl\\t%2,%3\", op);\n+          output_asm_insn (\"brasl\\t%0,%4\", op);\n+          output_asm_insn (\"lg\\t%0,%1\", op);\n+        }\n     }\n   else if (TARGET_CPU_ZARCH)\n     {\n-      output_asm_insn (\"st\\t%0,%1\", op);\n-      output_asm_insn (\"larl\\t%2,%3\", op);\n-      output_asm_insn (\"brasl\\t%0,%4\", op);\n-      output_asm_insn (\"l\\t%0,%1\", op);\n+      if (flag_nop_mcount)\n+        output_asm_nops (\"-mnop-mcount\", /* st */ 2 + /* larl */ 3 +\n+                         /* brasl */ 3 + /* l */ 2);\n+      else\n+        {\n+          output_asm_insn (\"st\\t%0,%1\", op);\n+          output_asm_insn (\"larl\\t%2,%3\", op);\n+          output_asm_insn (\"brasl\\t%0,%4\", op);\n+          output_asm_insn (\"l\\t%0,%1\", op);\n+        }\n     }\n   else if (!flag_pic)\n     {\n       op[6] = gen_label_rtx ();\n \n-      output_asm_insn (\"st\\t%0,%1\", op);\n-      output_asm_insn (\"bras\\t%2,%l6\", op);\n-      output_asm_insn (\".long\\t%4\", op);\n-      output_asm_insn (\".long\\t%3\", op);\n-      targetm.asm_out.internal_label (file, \"L\", CODE_LABEL_NUMBER (op[6]));\n-      output_asm_insn (\"l\\t%0,0(%2)\", op);\n-      output_asm_insn (\"l\\t%2,4(%2)\", op);\n-      output_asm_insn (\"basr\\t%0,%0\", op);\n-      output_asm_insn (\"l\\t%0,%1\", op);\n+      if (flag_nop_mcount)\n+        output_asm_nops (\"-mnop-mcount\", /* st */ 2 + /* bras */ 2 +\n+                         /* .long */ 2 + /* .long */ 2 + /* l */ 2 +\n+                         /* l */ 2 + /* basr */ 1 + /* l */ 2);\n+      else\n+        {\n+          output_asm_insn (\"st\\t%0,%1\", op);\n+          output_asm_insn (\"bras\\t%2,%l6\", op);\n+          output_asm_insn (\".long\\t%4\", op);\n+          output_asm_insn (\".long\\t%3\", op);\n+          targetm.asm_out.internal_label (file, \"L\",\n+                                          CODE_LABEL_NUMBER (op[6]));\n+          output_asm_insn (\"l\\t%0,0(%2)\", op);\n+          output_asm_insn (\"l\\t%2,4(%2)\", op);\n+          output_asm_insn (\"basr\\t%0,%0\", op);\n+          output_asm_insn (\"l\\t%0,%1\", op);\n+        }\n     }\n   else\n     {\n       op[5] = gen_label_rtx ();\n       op[6] = gen_label_rtx ();\n \n-      output_asm_insn (\"st\\t%0,%1\", op);\n-      output_asm_insn (\"bras\\t%2,%l6\", op);\n-      targetm.asm_out.internal_label (file, \"L\", CODE_LABEL_NUMBER (op[5]));\n-      output_asm_insn (\".long\\t%4-%l5\", op);\n-      output_asm_insn (\".long\\t%3-%l5\", op);\n-      targetm.asm_out.internal_label (file, \"L\", CODE_LABEL_NUMBER (op[6]));\n-      output_asm_insn (\"lr\\t%0,%2\", op);\n-      output_asm_insn (\"a\\t%0,0(%2)\", op);\n-      output_asm_insn (\"a\\t%2,4(%2)\", op);\n-      output_asm_insn (\"basr\\t%0,%0\", op);\n-      output_asm_insn (\"l\\t%0,%1\", op);\n+      if (flag_nop_mcount)\n+        output_asm_nops (\"-mnop-mcount\", /* st */ 2 + /* bras */ 2 +\n+                         /* .long */ 2 + /* .long */ 2 + /* lr */ 1 +\n+                         /* a */ 2 + /* a */ 2 + /* basr */ 1 + /* l */ 2);\n+      else\n+        {\n+          output_asm_insn (\"st\\t%0,%1\", op);\n+          output_asm_insn (\"bras\\t%2,%l6\", op);\n+          targetm.asm_out.internal_label (file, \"L\",\n+                                          CODE_LABEL_NUMBER (op[5]));\n+          output_asm_insn (\".long\\t%4-%l5\", op);\n+          output_asm_insn (\".long\\t%3-%l5\", op);\n+          targetm.asm_out.internal_label (file, \"L\",\n+                                          CODE_LABEL_NUMBER (op[6]));\n+          output_asm_insn (\"lr\\t%0,%2\", op);\n+          output_asm_insn (\"a\\t%0,0(%2)\", op);\n+          output_asm_insn (\"a\\t%2,4(%2)\", op);\n+          output_asm_insn (\"basr\\t%0,%0\", op);\n+          output_asm_insn (\"l\\t%0,%1\", op);\n+        }\n     }\n \n   if (flag_record_mcount)"}, {"sha": "4214b1714c2afbabc48873461d099f253925cbd0", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=79c2f6d7de59d5580d224b491d5600d20e3101fe", "patch": "@@ -302,3 +302,8 @@ code will require a 64-bit CPU and glibc 2.29 or newer to run.\n mrecord-mcount\n Target Report Var(flag_record_mcount)\n Generate __mcount_loc section with all _mcount and __fentry__ calls.\n+\n+mnop-mcount\n+Target Report Var(flag_nop_mcount)\n+Generate mcount/__fentry__ calls as nops. To activate they need to be\n+patched in."}, {"sha": "30d4ea5cd5d02f9e60fad1add26f47ab06ea3b61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79c2f6d7de59d5580d224b491d5600d20e3101fe", "patch": "@@ -1,3 +1,11 @@\n+2018-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/mnop-mcount-m31-fpic.c: New testcase.\n+\t* gcc.target/s390/mnop-mcount-m31-mzarch.c: New testcase.\n+\t* gcc.target/s390/mnop-mcount-m31.c: New testcase.\n+\t* gcc.target/s390/mnop-mcount-m64-mfentry.c: New testcase.\n+\t* gcc.target/s390/mnop-mcount-m64.c: New testcase.\n+\n 2018-07-16  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \t* testsuite/gcc.target/s390/mrecord-mcount.c: New testcase."}, {"sha": "5b00ab65668542c10f6c4451833926ff113771b9", "filename": "gcc/testsuite/gcc.target/s390/mnop-mcount-m31-fpic.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31-fpic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31-fpic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31-fpic.c?ref=79c2f6d7de59d5580d224b491d5600d20e3101fe", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-m31 -mesa -march=g5 -fPIC -pg -mnop-mcount -Wno-deprecated\" } */\n+\n+void\n+profileme (void)\n+{\n+  /* { dg-final { scan-assembler \"NOPs for -mnop-mcount \\\\(16 halfwords\\\\)\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\" } } */\n+}"}, {"sha": "b2ad9f5bced19d04dc4f91365b12c16bc0f8fda1", "filename": "gcc/testsuite/gcc.target/s390/mnop-mcount-m31-mzarch.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31-mzarch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31-mzarch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31-mzarch.c?ref=79c2f6d7de59d5580d224b491d5600d20e3101fe", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-m31 -mzarch -pg -mnop-mcount\" } */\n+\n+void\n+profileme (void)\n+{\n+  /* { dg-final { scan-assembler \"NOPs for -mnop-mcount \\\\(10 halfwords\\\\)\\n.*brcl\\t0,0\\n.*brcl\\t0,0\\n.*brcl\\t0,0\\n.*bcr\\t0,0\" } } */\n+}"}, {"sha": "e64c8d7d7bcef043545cb033b31e6bd9b2cea016", "filename": "gcc/testsuite/gcc.target/s390/mnop-mcount-m31.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m31.c?ref=79c2f6d7de59d5580d224b491d5600d20e3101fe", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-m31 -mesa -march=g5 -pg -mnop-mcount -Wno-deprecated\" } */\n+\n+void\n+profileme (void)\n+{\n+  /* { dg-final { scan-assembler \"NOPs for -mnop-mcount \\\\(15 halfwords\\\\)\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bc\\t0,0\\n.*bcr\\t0,0\" } } */\n+}"}, {"sha": "9c1504e8d6386da62dcd79787fe8dddcfb9af1b0", "filename": "gcc/testsuite/gcc.target/s390/mnop-mcount-m64-mfentry.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m64-mfentry.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m64-mfentry.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m64-mfentry.c?ref=79c2f6d7de59d5580d224b491d5600d20e3101fe", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { lp64 } } } */\n+/* { dg-options \"-pg -mfentry -mnop-mcount\" } */\n+\n+void\n+profileme (void)\n+{\n+  /* { dg-final { scan-assembler \"NOPs for -mnop-mcount \\\\(3 halfwords\\\\)\\n.*brcl\\t0,0\" } } */\n+}"}, {"sha": "c0e3c4e91b1b58b30f836797c5e9008f6ed08d66", "filename": "gcc/testsuite/gcc.target/s390/mnop-mcount-m64.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c2f6d7de59d5580d224b491d5600d20e3101fe/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fmnop-mcount-m64.c?ref=79c2f6d7de59d5580d224b491d5600d20e3101fe", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { lp64 } } } */\n+/* { dg-options \"-pg -mnop-mcount\" } */\n+\n+void\n+profileme (void)\n+{\n+  /* { dg-final { scan-assembler \"NOPs for -mnop-mcount \\\\(12 halfwords\\\\)\\n.*brcl\\t0,0\\n.*brcl\\t0,0\\n.*brcl\\t0,0\\n.*brcl\\t0,0\" } } */\n+}"}]}