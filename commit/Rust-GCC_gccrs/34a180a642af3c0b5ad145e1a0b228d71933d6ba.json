{"sha": "34a180a642af3c0b5ad145e1a0b228d71933d6ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhMTgwYTY0MmFmM2MwYjVhZDE0NWUxYTBiMjI4ZDcxOTMzZDZiYQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-11-07T17:54:11Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-11-07T17:54:11Z"}, "message": "re PR c/53063 (encode group options in the .opt files)\n\nc-family/\n2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/53063\n\t* c.opt(Warray-bounds,Wdelete-non-virtual-dtor,Wenum-compare,\n\tWmain,Woverlength-strings, Wunknown-pragmas,Wunused-macros):\n\tUse LangEnabledBy.\n\t(Wswitch,Wswitch-default,Wswitch-enum): Likewise. Move here from\n\tcommon.opt.\n\t(Wvariadic-macros): Init(1).\n\t* c-opts.c (c_common_handle_option): Do not handle them\n\texplicitly.\n\t(c_common_post_options): Likewise.\n\t(sanitize_cpp_opts): warn_unused_macros is now\n\tcpp_warn_unused_macros.\n\t(push_command_line_include): Likewise.\n\t* c-common.c (warn_unknown_pragmas): Do not define.\n\t* c-common.h (warn_unknown_pragmas): Do not declare.\ngcc/\n2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/53063\n\t* common.opt (Wswitch,Wswitch-default,Wswitch-enum): Move to c.opt.\nfortran/\n2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/53063\n\t* options.c (set_Wall): Do not set warn_switch here.\n\nFrom-SVN: r193302", "tree": {"sha": "c5bbf1972f8b8352a6aade708eabaa4fab6c6328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5bbf1972f8b8352a6aade708eabaa4fab6c6328"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a180a642af3c0b5ad145e1a0b228d71933d6ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a180a642af3c0b5ad145e1a0b228d71933d6ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a180a642af3c0b5ad145e1a0b228d71933d6ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a180a642af3c0b5ad145e1a0b228d71933d6ba/comments", "author": null, "committer": null, "parents": [{"sha": "3f46d6a577819e7db2c77fa369d5364afeaac9b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f46d6a577819e7db2c77fa369d5364afeaac9b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f46d6a577819e7db2c77fa369d5364afeaac9b0"}], "stats": {"total": 157, "additions": 73, "deletions": 84}, "files": [{"sha": "045faac55546c5846b5fd10f81349d73bdb63c43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34a180a642af3c0b5ad145e1a0b228d71933d6ba", "patch": "@@ -1,3 +1,8 @@\n+2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\t* common.opt (Wswitch,Wswitch-default,Wswitch-enum): Move to c.opt.\n+\n 2012-11-07  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_expand_prologue): add the missing"}, {"sha": "9a5943b33181872f1c99f5a0a199c22117c95364", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=34a180a642af3c0b5ad145e1a0b228d71933d6ba", "patch": "@@ -1,3 +1,21 @@\n+2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\t* c.opt(Warray-bounds,Wdelete-non-virtual-dtor,Wenum-compare,\n+\tWmain,Woverlength-strings, Wunknown-pragmas,Wunused-macros):\n+\tUse LangEnabledBy.\n+\t(Wswitch,Wswitch-default,Wswitch-enum): Likewise. Move here from\n+\tcommon.opt.\n+\t(Wvariadic-macros): Init(1).\n+\t* c-opts.c (c_common_handle_option): Do not handle them\n+\texplicitly.\n+\t(c_common_post_options): Likewise.\n+\t(sanitize_cpp_opts): warn_unused_macros is now\n+\tcpp_warn_unused_macros.\n+\t(push_command_line_include): Likewise.\n+\t* c-common.c (warn_unknown_pragmas): Do not define.\n+\t* c-common.h (warn_unknown_pragmas): Do not declare.\n+\n 2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/51294"}, {"sha": "f15b1d827064d84369ccd18906e85e81f924b494", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=34a180a642af3c0b5ad145e1a0b228d71933d6ba", "patch": "@@ -193,10 +193,6 @@ const char *pch_file;\n    user's namespace.  */\n int flag_iso;\n \n-/* Warn about #pragma directives that are not recognized.  */\n-\n-int warn_unknown_pragmas; /* Tri state variable.  */\n-\n /* Warn about format/argument anomalies in calls to formatted I/O functions\n    (*printf, *scanf, strftime, strfmon, etc.).  */\n "}, {"sha": "85ec10fbdc2334f3343a6f699291167581ce89a7", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=34a180a642af3c0b5ad145e1a0b228d71933d6ba", "patch": "@@ -585,10 +585,6 @@ extern const char *pch_file;\n \n extern int flag_iso;\n \n-/* Warn about #pragma directives that are not recognized.  */\n-\n-extern int warn_unknown_pragmas; /* Tri state variable.  */\n-\n /* Warn about format/argument anomalies in calls to formatted I/O functions\n    (*printf, *scanf, strftime, strfmon, etc.).  */\n "}, {"sha": "6fedd1e75029956484df28fdef89b4420c128633", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 10, "deletions": 56, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=34a180a642af3c0b5ad145e1a0b228d71933d6ba", "patch": "@@ -96,12 +96,6 @@ static bool std_cxx_inc = true;\n /* If the quote chain has been split by -I-.  */\n static bool quote_chain_split;\n \n-/* If -Wunused-macros.  */\n-static bool warn_unused_macros;\n-\n-/* If -Wvariadic-macros.  */\n-static bool warn_variadic_macros = true;\n-\n /* Number of deferred options.  */\n static size_t deferred_count;\n \n@@ -365,26 +359,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Wall:\n       /* ??? Don't add new options here. Use LangEnabledBy in c.opt.  */\n       set_Wformat (value);\n-      warn_switch = value;\n-      warn_array_bounds = value;\n-\n-      /* Only warn about unknown pragmas that are not in system\n-\t headers.  */\n-      warn_unknown_pragmas = value;\n-\n-      if (!c_dialect_cxx ())\n-\t{\n-\t  /* We set this to 2 here, but 1 in -Wmain, so -ffreestanding\n-\t     can turn it off only if it's not explicit.  */\n-\t  if (warn_main == -1)\n-\t    warn_main = (value ? 2 : 0);\n-\n-\t  /* In C, -Wall and -Wc++-compat turns on -Wenum-compare,\n-\t     which we do here.  In C++ it is on by default, which is\n-\t     done in c_common_post_options.  */\n-          if (warn_enum_compare == -1)\n-            warn_enum_compare = value;\n-\t}\n \n       cpp_opts->warn_trigraphs = value;\n       cpp_opts->warn_comments = value;\n@@ -400,10 +374,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Wc___compat:\n-      /* Because -Wenum-compare is the default in C++, -Wc++-compat\n-\t implies -Wenum-compare.  */\n-      if (warn_enum_compare == -1 && value)\n-\twarn_enum_compare = value;\n       cpp_opts->warn_cxx_operator_names = value;\n       break;\n \n@@ -480,22 +450,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Wunknown_pragmas:\n       /* Set to greater than 1, so that even unknown pragmas in\n \t system headers will be warned about.  */\n+      /* ??? There is no way to handle this automatically for now.  */\n       warn_unknown_pragmas = value * 2;\n       break;\n \n-    case OPT_Wunused_macros:\n-      warn_unused_macros = value;\n-      break;\n-\n-    case OPT_Wvariadic_macros:\n-      warn_variadic_macros = value;\n-      break;\n-\n-    case OPT_Weffc__:\n-      if (value)\n-        warn_nonvdtor = true;\n-      break;\n-\n     case OPT_ansi:\n       if (!c_dialect_cxx ())\n \tset_std_c89 (false, true);\n@@ -692,10 +650,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Wpedantic:\n       cpp_opts->cpp_pedantic = 1;\n       cpp_opts->warn_endif_labels = 1;\n-      if (warn_overlength_strings == -1)\n-\twarn_overlength_strings = 1;\n-      if (warn_main == -1)\n-\twarn_main = 2;\n       break;\n \n     case OPT_print_objc_runtime_info:\n@@ -883,21 +837,21 @@ c_common_post_options (const char **pfilename)\n   /* -Woverlength-strings is off by default, but is enabled by -Wpedantic.\n      It is never enabled in C++, as the minimum limit is not normative\n      in that standard.  */\n-  if (warn_overlength_strings == -1 || c_dialect_cxx ())\n+  if (c_dialect_cxx ())\n     warn_overlength_strings = 0;\n \n   /* Wmain is enabled by default in C++ but not in C.  */\n   /* Wmain is disabled by default for -ffreestanding (!flag_hosted),\n-     even if -Wall was given (warn_main will be 2 if set by -Wall, 1\n-     if set by -Wmain).  */\n+     even if -Wall or -Wpedantic was given (warn_main will be 2 if set\n+     by -Wall, 1 if set by -Wmain).  */\n   if (warn_main == -1)\n     warn_main = (c_dialect_cxx () && flag_hosted) ? 1 : 0;\n   else if (warn_main == 2)\n     warn_main = flag_hosted ? 1 : 0;\n \n-  /* In C, -Wall and -Wc++-compat enable -Wenum-compare, which we do\n-     in c_common_handle_option; if it has not yet been set, it is\n-     disabled by default.  In C++, it is enabled by default.  */\n+  /* In C, -Wall and -Wc++-compat enable -Wenum-compare; if it has not\n+     yet been set, it is disabled by default.  In C++, it is enabled\n+     by default.  */\n   if (warn_enum_compare == -1)\n     warn_enum_compare = c_dialect_cxx () ? 1 : 0;\n \n@@ -1228,7 +1182,7 @@ sanitize_cpp_opts (void)\n   /* Similarly with -Wno-variadic-macros.  No check for c99 here, since\n      this also turns off warnings about GCCs extension.  */\n   cpp_opts->warn_variadic_macros\n-    = warn_variadic_macros && (pedantic || warn_traditional);\n+    = cpp_warn_variadic_macros && (pedantic || warn_traditional);\n \n   /* If we're generating preprocessor output, emit current directory\n      if explicitly requested or if debugging information is enabled.\n@@ -1239,7 +1193,7 @@ sanitize_cpp_opts (void)\n \n   if (cpp_opts->directives_only)\n     {\n-      if (warn_unused_macros)\n+      if (cpp_warn_unused_macros)\n \terror (\"-fdirectives-only is incompatible with -Wunused_macros\");\n       if (cpp_opts->traditional)\n \terror (\"-fdirectives-only is incompatible with -traditional\");\n@@ -1382,7 +1336,7 @@ push_command_line_include (void)\n     {\n       include_cursor++;\n       /* -Wunused-macros should only warn about macros defined hereafter.  */\n-      cpp_opts->warn_unused_macros = warn_unused_macros;\n+      cpp_opts->warn_unused_macros = cpp_warn_unused_macros;\n       /* Restore the line map from <command line>.  */\n       if (!cpp_opts->preprocessed)\n \tcpp_change_file (parse_in, LC_RENAME, this_input_filename);"}, {"sha": "90082143ae197584505d2050151b631b6960d2a7", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=34a180a642af3c0b5ad145e1a0b228d71933d6ba", "patch": "@@ -268,6 +268,10 @@ Wall\n C ObjC C++ ObjC++ Warning\n Enable most warning messages\n \n+Warray-bounds\n+LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+; in common.opt\n+\n Wassign-intercept\n ObjC ObjC++ Var(warn_assign_intercept) Warning\n Warn whenever an Objective-C assignment is being intercepted by the garbage collector\n@@ -332,6 +336,10 @@ Wdelete-non-virtual-dtor\n C++ ObjC++ Var(warn_delnonvdtor) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about deleting polymorphic objects with non-virtual destructors\n \n+Wdelete-non-virtual-dtor\n+LangEnabledBy(C++ ObjC++,Weffc++)\n+;\n+\n Wdeprecated\n C C++ ObjC ObjC++ Var(warn_deprecated) Init(1) Warning\n Warn if a deprecated compiler feature, class, method, or field is used\n@@ -353,9 +361,13 @@ C ObjC C++ ObjC++ Warning\n Warn about stray tokens after #elif and #endif\n \n Wenum-compare\n-C ObjC C++ ObjC++ Var(warn_enum_compare) Init(-1) Warning\n+C ObjC C++ ObjC++ Var(warn_enum_compare) Init(-1) Warning LangEnabledBy(C ObjC,Wall)\n Warn about comparison of different enum types\n \n+Wenum-compare\n+LangEnabledBy(C ObjC,Wc++-compat)\n+;\n+\n Werror\n C ObjC C++ ObjC++\n ; Documented in common.opt\n@@ -459,9 +471,13 @@ C ObjC C++ ObjC++ Var(warn_long_long) Init(-1) Warning\n Do not warn about using \\\"long long\\\" when -pedantic\n \n Wmain\n-C ObjC C++ ObjC++ Var(warn_main) Init(-1) Warning\n+C ObjC C++ ObjC++ Var(warn_main) Init(-1) Warning LangEnabledBy(C ObjC,Wall, 2, 0)\n Warn about suspicious declarations of \\\"main\\\"\n \n+Wmain\n+LangEnabledBy(C ObjC C++ ObjC++,Wpedantic, 2, 0)\n+;\n+\n Wmissing-braces\n C ObjC C++ ObjC++ Var(warn_missing_braces) Warning LangEnabledBy(C ObjC,Wall)\n Warn about possibly missing braces around initializers\n@@ -481,6 +497,18 @@ Wsuggest-attribute=format\n C ObjC C++ ObjC++ Var(warn_suggest_attribute_format) Warning\n Warn about functions which might be candidates for format attributes\n \n+Wswitch\n+C ObjC C++ ObjC++ Var(warn_switch) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n+Warn about enumerated switches, with no default, missing a case\n+\n+Wswitch-default\n+C ObjC C++ ObjC++ Var(warn_switch_default) Warning\n+Warn about enumerated switches missing a \\\"default:\\\" statement\n+\n+Wswitch-enum\n+C ObjC C++ ObjC++ Var(warn_switch_enum) Warning\n+Warn about all enumerated switches missing a specific case\n+\n Wmissing-format-attribute\n C ObjC C++ ObjC++ Alias(Wsuggest-attribute=format)\n ;\n@@ -550,7 +578,7 @@ C ObjC Var(warn_old_style_definition) Warning\n Warn if an old-style parameter definition is used\n \n Woverlength-strings\n-C ObjC C++ ObjC++ Var(warn_overlength_strings) Init(-1) Warning\n+C ObjC C++ ObjC++ Var(warn_overlength_strings) Warning LangEnabledBy(C ObjC C++ ObjC++,Wpedantic)\n Warn if a string is longer than the maximum portable length specified by the standard\n \n Woverloaded-virtual\n@@ -706,7 +734,7 @@ C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall)\n ;\n \n Wunknown-pragmas\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ Warning Var(warn_unknown_pragmas) LangEnabledBy(C ObjC C++ ObjC++,Wall, 1, 0)\n Warn about unrecognized pragmas\n \n Wunsuffixed-float-constants\n@@ -722,16 +750,16 @@ C ObjC C++ ObjC++ Var(warn_unused_local_typedefs) Warning EnabledBy(Wunused)\n Warn when typedefs locally defined in a function are not used\n \n Wunused-macros\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ Var(cpp_warn_unused_macros) Warning\n Warn about macros defined in the main file that are not used\n \n Wunused-result\n C ObjC C++ ObjC++ Var(warn_unused_result) Init(1) Warning\n Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value\n \n Wvariadic-macros\n-C ObjC C++ ObjC++ Warning\n-Do not warn about using variadic macros when -pedantic\n+C ObjC C++ ObjC++ Var(cpp_warn_variadic_macros) Init(1) Warning\n+Warn about using variadic macros\n \n Wvarargs\n C ObjC C++ ObjC++ Warning Var(warn_varargs) Init(1)"}, {"sha": "f947a72cc2e5be9b15b5e4768131ec1a452b936c", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=34a180a642af3c0b5ad145e1a0b228d71933d6ba", "patch": "@@ -632,18 +632,6 @@ Wsuggest-attribute=noreturn\n Common Var(warn_suggest_attribute_noreturn) Warning\n Warn about functions which might be candidates for __attribute__((noreturn))\n \n-Wswitch\n-Common Var(warn_switch) Warning\n-Warn about enumerated switches, with no default, missing a case\n-\n-Wswitch-default\n-Common Var(warn_switch_default) Warning\n-Warn about enumerated switches missing a \\\"default:\\\" statement\n-\n-Wswitch-enum\n-Common Var(warn_switch_enum) Warning\n-Warn about all enumerated switches missing a specific case\n-\n Wsystem-headers\n Common Var(warn_system_headers) Warning\n Do not suppress warnings from system headers"}, {"sha": "c030bf5b86dec2d5a09b28270633c3c64b82339d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=34a180a642af3c0b5ad145e1a0b228d71933d6ba", "patch": "@@ -1,3 +1,8 @@\n+2012-11-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\t* options.c (set_Wall): Do not set warn_switch here.\n+\n 2012-11-06  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/54917"}, {"sha": "e05b93581bca67a7eb8055aa3c931c477f53b96f", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a180a642af3c0b5ad145e1a0b228d71933d6ba/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=34a180a642af3c0b5ad145e1a0b228d71933d6ba", "patch": "@@ -478,7 +478,6 @@ set_Wall (int setting)\n   gfc_option.warn_target_lifetime = setting;\n \n   warn_return_type = setting;\n-  warn_switch = setting;\n   warn_uninitialized = setting;\n   warn_maybe_uninitialized = setting;\n }"}]}