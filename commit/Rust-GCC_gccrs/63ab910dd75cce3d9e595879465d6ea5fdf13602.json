{"sha": "63ab910dd75cce3d9e595879465d6ea5fdf13602", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNhYjkxMGRkNzVjY2UzZDllNTk1ODc5NDY1ZDZlYTVmZGYxMzYwMg==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2018-04-08T09:21:30Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-08T09:21:30Z"}, "message": "[NDS32] Implement n7 pipeline.\n\ngcc/\n\t* config.gcc (nds32*-*-*): Check that n7 is valid to --with-cpu.\n\t* config/nds32/nds32-n7.md: New file.\n\t* config/nds32/nds32-opts.h (nds32_cpu_type): Add CPU_N7.\n\t* config/nds32/nds32-pipelines-auxiliary.c: Implementation for n7\n\tpipeline.\n\t* config/nds32/nds32-protos.h: More declarations for n7 pipeline.\n\t* config/nds32/nds32.md (pipeline_model): Add n7.\n\t* config/nds32/nds32.opt (mcpu): Support n7 pipeline cpus.\n\t* config/nds32/pipelines.md: Include n7 settings.\n\nCo-Authored-By: Chung-Ju Wu <jasonwucj@gmail.com>\n\nFrom-SVN: r259221", "tree": {"sha": "0b86546159842a4c444405d9ca3740c348011a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b86546159842a4c444405d9ca3740c348011a36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63ab910dd75cce3d9e595879465d6ea5fdf13602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ab910dd75cce3d9e595879465d6ea5fdf13602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63ab910dd75cce3d9e595879465d6ea5fdf13602", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ab910dd75cce3d9e595879465d6ea5fdf13602/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c1583bdd87c147898d0e2dc5b45c1017027884c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1583bdd87c147898d0e2dc5b45c1017027884c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1583bdd87c147898d0e2dc5b45c1017027884c"}], "stats": {"total": 461, "additions": 457, "deletions": 4}, "files": [{"sha": "0238883b143027910367df2d1b6816cc4bf873a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63ab910dd75cce3d9e595879465d6ea5fdf13602", "patch": "@@ -1,3 +1,16 @@\n+2018-04-08  Kito Cheng  <kito.cheng@gmail.com>\n+\t    Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config.gcc (nds32*-*-*): Check that n7 is valid to --with-cpu.\n+\t* config/nds32/nds32-n7.md: New file.\n+\t* config/nds32/nds32-opts.h (nds32_cpu_type): Add CPU_N7.\n+\t* config/nds32/nds32-pipelines-auxiliary.c: Implementation for n7\n+\tpipeline.\n+\t* config/nds32/nds32-protos.h: More declarations for n7 pipeline.\n+\t* config/nds32/nds32.md (pipeline_model): Add n7.\n+\t* config/nds32/nds32.opt (mcpu): Support n7 pipeline cpus.\n+\t* config/nds32/pipelines.md: Include n7 settings.\n+\n 2018-04-08  Kito Cheng  <kito.cheng@gmail.com>\n \t    Chung-Ju Wu  <jasonwucj@gmail.com>\n "}, {"sha": "099c2f6fa839a99d809adcc34f6cbd5930a76da8", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=63ab910dd75cce3d9e595879465d6ea5fdf13602", "patch": "@@ -4315,11 +4315,11 @@ case \"${target}\" in\n \t\t\"\")\n \t\t\twith_cpu=n9\n \t\t\t;;\n-\t\tn6 | n8 | e8 | s8 | n9)\n+\t\tn6 | n7 | n8 | e8 | s8 | n9)\n \t\t\t# OK\n \t\t\t;;\n \t\t*)\n-\t\t\techo \"Cannot accept --with-cpu=$with_cpu, available values are: n6 n8 e8 s8 n9\" 1>&2\n+\t\t\techo \"Cannot accept --with-cpu=$with_cpu, available values are: n6 n7 n8 e8 s8 n9\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac"}, {"sha": "3e412676d7d40e775125e6340f5973c91274483a", "filename": "gcc/config/nds32/nds32-n7.md", "status": "added", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32-n7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32-n7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-n7.md?ref=63ab910dd75cce3d9e595879465d6ea5fdf13602", "patch": "@@ -0,0 +1,298 @@\n+;; Pipeline descriptions of Andes NDS32 cpu for GNU compiler\n+;; Copyright (C) 2012-2018 Free Software Foundation, Inc.\n+;; Contributed by Andes Technology Corporation.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+;; ------------------------------------------------------------------------\n+;; Define N8 pipeline settings.\n+;; ------------------------------------------------------------------------\n+\n+(define_automaton \"nds32_n7_machine\")\n+\n+;; ------------------------------------------------------------------------\n+;; Pipeline Stages\n+;; ------------------------------------------------------------------------\n+;; IF - Instruction Fetch\n+;;   Instruction Alignment\n+;;   Instruction Pre-decode\n+;; II - Instruction Issue\n+;;   Instruction Decode\n+;;   Register File Access\n+;;   Instruction Execution\n+;;   Interrupt Handling\n+;; EXD - Psuedo Stage\n+;;   Load Data Completion\n+\n+(define_cpu_unit \"n7_ii\" \"nds32_n7_machine\")\n+\n+(define_insn_reservation \"nds_n7_unknown\" 1\n+  (and (eq_attr \"type\" \"unknown\")\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii\")\n+\n+(define_insn_reservation \"nds_n7_misc\" 1\n+  (and (eq_attr \"type\" \"misc\")\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii\")\n+\n+(define_insn_reservation \"nds_n7_alu\" 1\n+  (and (eq_attr \"type\" \"alu\")\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii\")\n+\n+(define_insn_reservation \"nds_n7_load\" 1\n+  (and (match_test \"nds32::load_single_p (insn)\")\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii\")\n+\n+(define_insn_reservation \"nds_n7_store\" 1\n+  (and (match_test \"nds32::store_single_p (insn)\")\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii\")\n+\n+(define_insn_reservation \"nds_n7_load_multiple_1\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"1\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii\")\n+\n+(define_insn_reservation \"nds_n7_load_multiple_2\" 1\n+  (and (ior (and (eq_attr \"type\" \"load_multiple\")\n+\t\t (eq_attr \"combo\" \"2\"))\n+\t    (match_test \"nds32::load_double_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*2\")\n+\n+(define_insn_reservation \"nds_n7_load_multiple_3\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"3\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*3\")\n+\n+(define_insn_reservation \"nds_n7_load_multiple_4\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"4\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*4\")\n+\n+(define_insn_reservation \"nds_n7_load_multiple_5\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"5\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*5\")\n+\n+(define_insn_reservation \"nds_n7_load_multiple_6\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"6\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*6\")\n+\n+(define_insn_reservation \"nds_n7_load_multiple_7\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"7\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*7\")\n+\n+(define_insn_reservation \"nds_n7_load_multiple_8\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"8\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*8\")\n+\n+(define_insn_reservation \"nds_n7_load_multiple_12\" 1\n+  (and (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"12\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*12\")\n+\n+(define_insn_reservation \"nds_n7_store_multiple_1\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"1\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii\")\n+\n+(define_insn_reservation \"nds_n7_store_multiple_2\" 1\n+  (and (ior (and (eq_attr \"type\" \"store_multiple\")\n+\t\t (eq_attr \"combo\" \"2\"))\n+\t    (match_test \"nds32::store_double_p (insn)\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*2\")\n+\n+(define_insn_reservation \"nds_n7_store_multiple_3\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"3\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*3\")\n+\n+(define_insn_reservation \"nds_n7_store_multiple_4\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"4\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*4\")\n+\n+(define_insn_reservation \"nds_n7_store_multiple_5\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"5\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*5\")\n+\n+(define_insn_reservation \"nds_n7_store_multiple_6\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"6\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*6\")\n+\n+(define_insn_reservation \"nds_n7_store_multiple_7\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"7\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*7\")\n+\n+(define_insn_reservation \"nds_n7_store_multiple_8\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"8\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*8\")\n+\n+(define_insn_reservation \"nds_n7_store_multiple_12\" 1\n+  (and (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"12\"))\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*12\")\n+\n+(define_insn_reservation \"nds_n7_mul_fast\" 1\n+  (and (match_test \"nds32_mul_config != MUL_TYPE_SLOW\")\n+       (and (eq_attr \"type\" \"mul\")\n+\t    (eq_attr \"pipeline_model\" \"n7\")))\n+  \"n7_ii\")\n+\n+(define_insn_reservation \"nds_n7_mul_slow\" 1\n+  (and (match_test \"nds32_mul_config == MUL_TYPE_SLOW\")\n+       (and (eq_attr \"type\" \"mul\")\n+\t    (eq_attr \"pipeline_model\" \"n7\")))\n+  \"n7_ii*17\")\n+\n+(define_insn_reservation \"nds_n7_mac_fast\" 1\n+  (and (match_test \"nds32_mul_config != MUL_TYPE_SLOW\")\n+       (and (eq_attr \"type\" \"mac\")\n+\t    (eq_attr \"pipeline_model\" \"n7\")))\n+  \"n7_ii*2\")\n+\n+(define_insn_reservation \"nds_n7_mac_slow\" 1\n+  (and (match_test \"nds32_mul_config == MUL_TYPE_SLOW\")\n+       (and (eq_attr \"type\" \"mac\")\n+\t    (eq_attr \"pipeline_model\" \"n7\")))\n+  \"n7_ii*18\")\n+\n+(define_insn_reservation \"nds_n7_div\" 1\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii*37\")\n+\n+(define_insn_reservation \"nds_n7_branch\" 1\n+  (and (eq_attr \"type\" \"branch\")\n+       (eq_attr \"pipeline_model\" \"n7\"))\n+  \"n7_ii\")\n+\n+;; ------------------------------------------------------------------------\n+;; Comment Notations and Bypass Rules\n+;; ------------------------------------------------------------------------\n+;; Producers (LHS)\n+;;   LD_!bi\n+;;     Load data from the memory (without updating the base register) and\n+;;     produce the loaded data. The result is ready at EXD.\n+;;   LMW(N, M)\n+;;     There are N micro-operations within an instruction that loads multiple\n+;;     words. The result produced by the M-th micro-operation is sent to\n+;;     consumers. The result is ready at EXD. If the base register should be\n+;;     updated, an extra micro-operation is inserted to the sequence, and the\n+;;     result is ready at II.\n+;;\n+;; Consumers (RHS)\n+;;   ALU, MUL, DIV\n+;;     Require operands at II.\n+;;   MOVD44_E\n+;;     A double-word move instruction needs two micro-operations because the\n+;;     reigster ports is 2R1W. The first micro-operation writes an even number\n+;;     register, and the second micro-operation writes an odd number register.\n+;;     Each input operand is required at II for each micro-operation. The letter\n+;;     'E' stands for even.\n+;;   MAC_RaRb\n+;;     A MAC instruction is separated into two micro-operations. The first\n+;;     micro-operation does the multiplication, which requires operands Ra\n+;;     and Rb at II. The second micro-options does the accumulation, which\n+;;     requires the operand Rt at II.\n+;;   ADDR_IN_MOP(N)\n+;;     Because the reigster port is 2R1W, some load/store instructions are\n+;;     separated into many micro-operations. N denotes the address input is\n+;;     required by the N-th micro-operation. Such operand is required at II.\n+;;   ST_bi\n+;;     A post-increment store instruction requires its data at II.\n+;;   ST_!bi_RI\n+;;     A store instruction with an immediate offset requires its data at II.\n+;;     If the offset field is a register (ST_!bi_RR), the instruction will be\n+;;     separated into two micro-operations, and the second one requires the\n+;;     input operand at II in order to store it to the memory.\n+;;   SMW(N, M)\n+;;     There are N micro-operations within an instruction that stores multiple\n+;;     words. Each M-th micro-operation requires its data at II. If the base\n+;;     register should be updated, an extra micro-operation is inserted to the\n+;;     sequence.\n+;;   BR_COND\n+;;     If a branch instruction is conditional, its input data is required at II.\n+\n+;; LD_!bi\n+;;   -> ALU, MOVD44_E, MUL, MAC_RaRb, DIV, BR, ADDR_IN_MOP(1), ST_bi, ST_!bi_RI, SMW(N, 1)\n+(define_bypass 2\n+  \"nds_n7_load\"\n+  \"nds_n7_alu,\\\n+   nds_n7_mul_fast, nds_n7_mul_slow,\\\n+   nds_n7_mac_fast, nds_n7_mac_slow,\\\n+   nds_n7_div,\\\n+   nds_n7_branch,\\\n+   nds_n7_load, nds_n7_store,\\\n+   nds_n7_load_multiple_1,nds_n7_load_multiple_2, nds_n7_load_multiple_3,\\\n+   nds_n7_load_multiple_4,nds_n7_load_multiple_5, nds_n7_load_multiple_6,\\\n+   nds_n7_load_multiple_7,nds_n7_load_multiple_8, nds_n7_load_multiple_12,\\\n+   nds_n7_store_multiple_1,nds_n7_store_multiple_2, nds_n7_store_multiple_3,\\\n+   nds_n7_store_multiple_4,nds_n7_store_multiple_5, nds_n7_store_multiple_6,\\\n+   nds_n7_store_multiple_7,nds_n7_store_multiple_8, nds_n7_store_multiple_12\"\n+  \"nds32_n7_load_to_ii_p\"\n+)\n+\n+;; LMW(N, N)\n+;;   -> ALU, MOVD44_E, MUL, MAC_RaRb, DIV, BR, AADR_IN_MOP(1), ST_bi, ST_!bi_RI, SMW(N, 1)\n+(define_bypass 2\n+  \"nds_n7_load_multiple_1,nds_n7_load_multiple_2, nds_n7_load_multiple_3,\\\n+   nds_n7_load_multiple_4,nds_n7_load_multiple_5, nds_n7_load_multiple_6,\\\n+   nds_n7_load_multiple_7,nds_n7_load_multiple_8, nds_n7_load_multiple_12\"\n+  \"nds_n7_alu,\\\n+   nds_n7_mul_fast, nds_n7_mul_slow,\\\n+   nds_n7_mac_fast, nds_n7_mac_slow,\\\n+   nds_n7_div,\\\n+   nds_n7_branch,\\\n+   nds_n7_load, nds_n7_store,\\\n+   nds_n7_load_multiple_1,nds_n7_load_multiple_2, nds_n7_load_multiple_3,\\\n+   nds_n7_load_multiple_4,nds_n7_load_multiple_5, nds_n7_load_multiple_6,\\\n+   nds_n7_load_multiple_7,nds_n7_load_multiple_8, nds_n7_load_multiple_12,\\\n+   nds_n7_store_multiple_1,nds_n7_store_multiple_2, nds_n7_store_multiple_3,\\\n+   nds_n7_store_multiple_4,nds_n7_store_multiple_5, nds_n7_store_multiple_6,\\\n+   nds_n7_store_multiple_7,nds_n7_store_multiple_8, nds_n7_store_multiple_12\"\n+  \"nds32_n7_last_load_to_ii_p\"\n+)"}, {"sha": "5d7e1652749a9051d725187771533717aa058332", "filename": "gcc/config/nds32/nds32-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h?ref=63ab910dd75cce3d9e595879465d6ea5fdf13602", "patch": "@@ -38,6 +38,7 @@ enum nds32_arch_type\n enum nds32_cpu_type\n {\n   CPU_N6,\n+  CPU_N7,\n   CPU_N8,\n   CPU_E8,\n   CPU_N9,"}, {"sha": "a983238cdbbc9f96b06e266c000a042546740def", "filename": "gcc/config/nds32/nds32-pipelines-auxiliary.c", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c?ref=63ab910dd75cce3d9e595879465d6ea5fdf13602", "patch": "@@ -344,6 +344,98 @@ using namespace nds32;\n using namespace nds32::scheduling;\n \n namespace { // anonymous namespace\n+\n+/* Check the dependency between the producer defining DEF_REG and CONSUMER\n+   requiring input operand at II.  */\n+bool\n+n7_consumed_by_ii_dep_p (rtx_insn *consumer, rtx def_reg)\n+{\n+  rtx use_rtx;\n+\n+  switch (get_attr_type (consumer))\n+    {\n+    /* MOVD44_E */\n+    case TYPE_ALU:\n+      if (movd44_even_dep_p (consumer, def_reg))\n+\treturn true;\n+\n+      use_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_MUL:\n+      use_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_MAC:\n+      use_rtx = extract_mac_non_acc_rtx (consumer);\n+      break;\n+\n+   /* Some special instructions, divmodsi4 and udivmodsi4, produce two\n+      results, the quotient and the remainder.  It requires two micro-\n+      operations in order to write two registers. We have to check the\n+      dependency from the producer to the first micro-operation.  */\n+    case TYPE_DIV:\n+      if (INSN_CODE (consumer) == CODE_FOR_divmodsi4\n+\t  || INSN_CODE (consumer) == CODE_FOR_udivmodsi4)\n+\tuse_rtx = SET_SRC (parallel_element (consumer, 0));\n+      else\n+\tuse_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_LOAD:\n+      /* ADDR_IN_bi_Ra, ADDR_IN_!bi */\n+      if (post_update_insn_p (consumer))\n+\tuse_rtx = extract_base_reg (consumer);\n+      else\n+\tuse_rtx = extract_mem_rtx (consumer);\n+      break;\n+\n+    case TYPE_STORE:\n+      /* ADDR_IN_bi_Ra, ADDR_IN_!bi */\n+      if (post_update_insn_p (consumer))\n+\tuse_rtx = extract_base_reg (consumer);\n+      else\n+\tuse_rtx = extract_mem_rtx (consumer);\n+\n+      if (reg_overlap_p (def_reg, use_rtx))\n+\treturn true;\n+\n+      /* ST_bi, ST_!bi_RI */\n+      if (!post_update_insn_p (consumer)\n+\t  && !immed_offset_p (extract_mem_rtx (consumer)))\n+\treturn false;\n+\n+      use_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_LOAD_MULTIPLE:\n+      use_rtx = extract_base_reg (consumer);\n+      break;\n+\n+    case TYPE_STORE_MULTIPLE:\n+      /* ADDR_IN */\n+      use_rtx = extract_base_reg (consumer);\n+      if (reg_overlap_p (def_reg, use_rtx))\n+\treturn true;\n+\n+      /* SMW (N, 1) */\n+      use_rtx = extract_nth_access_rtx (consumer, 0);\n+      break;\n+\n+    case TYPE_BRANCH:\n+      use_rtx = PATTERN (consumer);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (reg_overlap_p (def_reg, use_rtx))\n+    return true;\n+\n+  return false;\n+}\n+\n /* Check the dependency between the producer defining DEF_REG and CONSUMER\n    requiring input operand at AG (II).  */\n bool\n@@ -657,6 +749,39 @@ n9_3r2w_consumed_by_ex_dep_p (rtx_insn *consumer, rtx def_reg)\n \n /* ------------------------------------------------------------------------ */\n \n+/* Guard functions for N7 core.  */\n+\n+bool\n+nds32_n7_load_to_ii_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  if (post_update_insn_p (producer))\n+    return false;\n+\n+  rtx def_reg = SET_DEST (PATTERN (producer));\n+\n+  return n7_consumed_by_ii_dep_p (consumer, def_reg);\n+}\n+\n+bool\n+nds32_n7_last_load_to_ii_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  /* If PRODUCER is a post-update LMW insn, the last micro-operation updates\n+     the base register and the result is ready in II stage, so we don't need\n+     to handle that case in this guard function and the corresponding bypass\n+     rule.  */\n+  if (post_update_insn_p (producer))\n+    return false;\n+\n+  rtx last_def_reg = extract_nth_access_reg (producer, -1);\n+\n+  if (last_def_reg == NULL_RTX)\n+    return false;\n+\n+  gcc_assert (REG_P (last_def_reg) || GET_CODE (last_def_reg) == SUBREG);\n+\n+  return n7_consumed_by_ii_dep_p (consumer, last_def_reg);\n+}\n+\n /* Guard functions for N8 core.  */\n \n bool"}, {"sha": "b7522f1ed7da910660ac818204adbabada61741b", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=63ab910dd75cce3d9e595879465d6ea5fdf13602", "patch": "@@ -99,6 +99,9 @@ extern bool nds32_valid_multiple_load_store_p (rtx, bool, bool);\n \n /* Auxiliary functions for guard function checking in pipelines.md.  */\n \n+extern bool nds32_n7_load_to_ii_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_n7_last_load_to_ii_p (rtx_insn *, rtx_insn *);\n+\n extern bool nds32_n8_load_to_ii_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n8_load_bi_to_ii_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n8_load_to_ex_p (rtx_insn *, rtx_insn *);"}, {"sha": "3b8107e8fbf98c4525cff6d4c3f00acaa7c25198", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=63ab910dd75cce3d9e595879465d6ea5fdf13602", "patch": "@@ -56,9 +56,10 @@\n ;; ------------------------------------------------------------------------\n \n ;; CPU pipeline model.\n-(define_attr \"pipeline_model\" \"n8,e8,n9,simple\"\n+(define_attr \"pipeline_model\" \"n7,n8,e8,n9,simple\"\n   (const\n-    (cond [(match_test \"nds32_cpu_option == CPU_E8\")  (const_string \"e8\")\n+    (cond [(match_test \"nds32_cpu_option == CPU_N7\")  (const_string \"n7\")\n+\t   (match_test \"nds32_cpu_option == CPU_E8\")  (const_string \"e8\")\n \t   (match_test \"nds32_cpu_option == CPU_N6 || nds32_cpu_option == CPU_N8\")  (const_string \"n8\")\n \t   (match_test \"nds32_cpu_option == CPU_N9\")  (const_string \"n9\")\n \t   (match_test \"nds32_cpu_option == CPU_SIMPLE\") (const_string \"simple\")]"}, {"sha": "4968b74ab45d1c3a998ae1ec25e3c9de939cf08a", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=63ab910dd75cce3d9e595879465d6ea5fdf13602", "patch": "@@ -180,6 +180,12 @@ Enum(nds32_cpu_type) String(n6) Value(CPU_N6)\n EnumValue\n Enum(nds32_cpu_type) String(n650) Value(CPU_N6)\n \n+EnumValue\n+Enum(nds32_cpu_type) String(n7) Value(CPU_N7)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n705) Value(CPU_N7)\n+\n EnumValue\n Enum(nds32_cpu_type) String(n8) Value(CPU_N8)\n "}, {"sha": "34288076f42d50a41310b32e902d7eb6f5f4dfba", "filename": "gcc/config/nds32/pipelines.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab910dd75cce3d9e595879465d6ea5fdf13602/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fpipelines.md?ref=63ab910dd75cce3d9e595879465d6ea5fdf13602", "patch": "@@ -18,6 +18,12 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n+;; ------------------------------------------------------------------------\n+;; Include N7 pipeline settings.\n+;; ------------------------------------------------------------------------\n+(include \"nds32-n7.md\")\n+\n+\n ;; ------------------------------------------------------------------------\n ;; Include N8 pipeline settings.\n ;; ------------------------------------------------------------------------"}]}