{"sha": "c4c2f9fa57d529def134eb95c0a9702aec7b3002", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRjMmY5ZmE1N2Q1MjlkZWYxMzRlYjk1YzBhOTcwMmFlYzdiMzAwMg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-03-07T17:27:52Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-03-07T17:27:52Z"}, "message": "bitmap.c (struct bitmap_descriptor_d): Use unsigned HOST_WIDEST_INT for all counters.\n\n\t* bitmap.c (struct bitmap_descriptor_d): Use unsigned HOST_WIDEST_INT\n\tfor all counters.\n\t(struct output_info): Likewise.\n\t(register_overhead): Remove bad gcc_assert.\n\t(bitmap_find_bit): If there is only a single bitmap element, do not\n\tcount a miss as a search.\n\t(print_statistics): Update for counter type changes.\n\t(dump_bitmap_statistics): Likewise.  Print headers such that they\n\tare properly lined up with the printed counters.\n\nFrom-SVN: r196525", "tree": {"sha": "d681019b5608b07085f815b32e7b7a7e147a154f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d681019b5608b07085f815b32e7b7a7e147a154f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4c2f9fa57d529def134eb95c0a9702aec7b3002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c2f9fa57d529def134eb95c0a9702aec7b3002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c2f9fa57d529def134eb95c0a9702aec7b3002", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c2f9fa57d529def134eb95c0a9702aec7b3002/comments", "author": null, "committer": null, "parents": [{"sha": "d415f879a08ce6ac17bfb32c097fe6912a20acf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d415f879a08ce6ac17bfb32c097fe6912a20acf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d415f879a08ce6ac17bfb32c097fe6912a20acf9"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "d417f40bde81f9249ee5bd680dcc51c52f248ccc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c2f9fa57d529def134eb95c0a9702aec7b3002/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c2f9fa57d529def134eb95c0a9702aec7b3002/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4c2f9fa57d529def134eb95c0a9702aec7b3002", "patch": "@@ -1,3 +1,15 @@\n+2013-03-07  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* bitmap.c (struct bitmap_descriptor_d): Use unsigned HOST_WIDEST_INT\n+\tfor all counters.\n+\t(struct output_info): Likewise.\n+\t(register_overhead): Remove bad gcc_assert.\n+\t(bitmap_find_bit): If there is only a single bitmap element, do not\n+\tcount a miss as a search.\n+\t(print_statistics): Update for counter type changes.\n+\t(dump_bitmap_statistics): Likewise.  Print headers such that they\n+\tare properly lined up with the printed counters.\n+\n 2013-03-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/56559"}, {"sha": "b60280a212f528620bdefb86852a3ebd00685dd3", "filename": "gcc/bitmap.c", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4c2f9fa57d529def134eb95c0a9702aec7b3002/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4c2f9fa57d529def134eb95c0a9702aec7b3002/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=c4c2f9fa57d529def134eb95c0a9702aec7b3002", "patch": "@@ -34,11 +34,11 @@ struct bitmap_descriptor_d\n   const char *file;\n   int line;\n   int created;\n-  HOST_WIDEST_INT allocated;\n-  HOST_WIDEST_INT peak;\n-  HOST_WIDEST_INT current;\n-  int nsearches;\n-  int search_iter;\n+  unsigned HOST_WIDEST_INT allocated;\n+  unsigned HOST_WIDEST_INT peak;\n+  unsigned HOST_WIDEST_INT current;\n+  unsigned HOST_WIDEST_INT nsearches;\n+  unsigned HOST_WIDEST_INT search_iter;\n };\n \n typedef struct bitmap_descriptor_d *bitmap_descriptor;\n@@ -121,7 +121,6 @@ register_overhead (bitmap b, int amount)\n   desc->current += amount;\n   if (amount > 0)\n     desc->allocated += amount;\n-  gcc_assert (desc->current >= 0);\n   if (desc->peak < desc->current)\n     desc->peak = desc->current;\n }\n@@ -565,10 +564,15 @@ bitmap_find_bit (bitmap head, unsigned int bit)\n   bitmap_element *element;\n   unsigned int indx = bit / BITMAP_ELEMENT_ALL_BITS;\n \n-  if (head->current == 0\n+  if (head->current == NULL\n       || head->indx == indx)\n     return head->current;\n+  if (head->current == head->first\n+      && head->first->next == NULL)\n+    return NULL;\n \n+  /* This bitmap has more than one element, and we're going to look\n+     through the elements list.  Count that as a search.  */\n   if (GATHER_STATISTICS)\n     bitmap_descriptors[head->descriptor_id]->nsearches++;\n \n@@ -2132,8 +2136,8 @@ bitmap_print (FILE *file, const_bitmap head, const char *prefix, const char *suf\n /* Used to accumulate statistics about bitmap sizes.  */\n struct output_info\n {\n-  HOST_WIDEST_INT size;\n-  int count;\n+  unsigned HOST_WIDEST_INT size;\n+  unsigned HOST_WIDEST_INT count;\n };\n \n /* Called via htab_traverse.  Output bitmap descriptor pointed out by SLOT\n@@ -2153,10 +2157,14 @@ print_statistics (void **slot, void *b)\n \ts1 = s2 + 4;\n       sprintf (s, \"%s:%i (%s)\", s1, d->line, d->function);\n       s[41] = 0;\n-      fprintf (stderr, \"%-41s %8d %15\"HOST_WIDEST_INT_PRINT\"d %15\"\n-\t       HOST_WIDEST_INT_PRINT\"d %15\"HOST_WIDEST_INT_PRINT\"d %10d %10d\\n\",\n-\t       s, d->created, d->allocated, d->peak, d->current, d->nsearches,\n-\t       d->search_iter);\n+      fprintf (stderr,\n+\t       \"%-41s %9u\"\n+\t       \" %15\"HOST_WIDEST_INT_PRINT\"d %15\"HOST_WIDEST_INT_PRINT\"d\"\n+\t       \" %15\"HOST_WIDEST_INT_PRINT\"d\"\n+\t       \" %10\"HOST_WIDEST_INT_PRINT\"d %10\"HOST_WIDEST_INT_PRINT\"d\\n\",\n+\t       s, d->created,\n+\t       d->allocated, d->peak, d->current,\n+\t       d->nsearches, d->search_iter);\n       i->size += d->allocated;\n       i->count += d->created;\n     }\n@@ -2175,15 +2183,18 @@ dump_bitmap_statistics (void)\n   if (!bitmap_desc_hash)\n     return;\n \n-  fprintf (stderr, \"\\nBitmap                                     Overall \"\n-\t\t   \"      Allocated            Peak            Leak   searched \"\n-\t\t   \"  search itr\\n\");\n+  fprintf (stderr,\n+\t   \"\\n%-41s %9s %15s %15s %15s %10s %10s\\n\",\n+\t   \"Bitmap\", \"Overall\",\n+\t   \"Allocated\", \"Peak\", \"Leak\",\n+\t   \"searched\", \"search_itr\");\n   fprintf (stderr, \"---------------------------------------------------------------------------------\\n\");\n   info.count = 0;\n   info.size = 0;\n   htab_traverse (bitmap_desc_hash, print_statistics, &info);\n   fprintf (stderr, \"---------------------------------------------------------------------------------\\n\");\n-  fprintf (stderr, \"%-40s %9d %15\"HOST_WIDEST_INT_PRINT\"d\\n\",\n+  fprintf (stderr,\n+\t   \"%-41s %9\"HOST_WIDEST_INT_PRINT\"d %15\"HOST_WIDEST_INT_PRINT\"d\\n\",\n \t   \"Total\", info.count, info.size);\n   fprintf (stderr, \"---------------------------------------------------------------------------------\\n\");\n }"}]}