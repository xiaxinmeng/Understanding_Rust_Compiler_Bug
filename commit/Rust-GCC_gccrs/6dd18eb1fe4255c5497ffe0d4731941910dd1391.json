{"sha": "6dd18eb1fe4255c5497ffe0d4731941910dd1391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRkMThlYjFmZTQyNTVjNTQ5N2ZmZTBkNDczMTk0MTkxMGRkMTM5MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-04-10T17:58:54Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-04-10T17:58:54Z"}, "message": "i386.md (absneg): New code iterator.\n\n        * config/i386/i386.md (absneg): New code iterator.\n        (absnegprefix): New code attribute.\n        (<code><mode>2): Macroize expander from abs<mode>2 and neg<mode>2\n        patterns using absneg code iterator.\n        (<code>tf2): Macroize expander from abstf2 and negtf2 patterns\n        using absneg code iterator.\n        (*<code><mode>2_1): Macroize insn pattern from *abs<mode>2_1 and\n        *neg<mode>2 patterns using absneg code iterator.\n        (*<code>extendsfdf2): Macroize insn pattern from *absextendsfdf2 and\n        *negextendsfdf2 patterns using absneg code iterator.\n        (*<code>extendsfxf2): Macroize insn pattern from *absextendsfxf2 and\n        *negextendsfxf2 patterns using absneg code iterator.\n        (*<code>extendsfdf2): Macroize insn pattern from *absextendsfdf2 and\n        *negextendsfdf2 patterns using absneg code iterator.\n        * config/i386/sse.md (<code><mode>2): Macroize expander from\n        abs<mode>2 and neg<mode>2 patterns using absneg code iterator.\n\nFrom-SVN: r134165", "tree": {"sha": "02aca4ab3be3403e3a6aaea00d67621f37a960d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02aca4ab3be3403e3a6aaea00d67621f37a960d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dd18eb1fe4255c5497ffe0d4731941910dd1391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd18eb1fe4255c5497ffe0d4731941910dd1391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dd18eb1fe4255c5497ffe0d4731941910dd1391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd18eb1fe4255c5497ffe0d4731941910dd1391/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f40bee312d7d356e884bb7bcd94912b805cd21d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40bee312d7d356e884bb7bcd94912b805cd21d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f40bee312d7d356e884bb7bcd94912b805cd21d0"}], "stats": {"total": 140, "additions": 58, "deletions": 82}, "files": [{"sha": "d9f60c84479758b53f1f69ca87575ac14d06f01a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd18eb1fe4255c5497ffe0d4731941910dd1391/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd18eb1fe4255c5497ffe0d4731941910dd1391/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dd18eb1fe4255c5497ffe0d4731941910dd1391", "patch": "@@ -1,3 +1,22 @@\n+2008-04-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (absneg): New code iterator.\n+\t(absnegprefix): New code attribute.\n+\t(<code><mode>2): Macroize expander from abs<mode>2 and neg<mode>2\n+\tpatterns using absneg code iterator.\n+\t(<code>tf2): Macroize expander from abstf2 and negtf2 patterns\n+\tusing absneg code iterator.\n+\t(*<code><mode>2_1): Macroize insn pattern from *abs<mode>2_1 and\n+\t*neg<mode>2 patterns using absneg code iterator.\n+\t(*<code>extendsfdf2): Macroize insn pattern from *absextendsfdf2 and\n+\t*negextendsfdf2 patterns using absneg code iterator.\n+\t(*<code>extendsfxf2): Macroize insn pattern from *absextendsfxf2 and\n+\t*negextendsfxf2 patterns using absneg code iterator.\n+\t(*<code>extendsfdf2): Macroize insn pattern from *absextendsfdf2 and\n+\t*negextendsfdf2 patterns using absneg code iterator.\n+\t* config/i386/sse.md (<code><mode>2): Macroize expander from\n+\tabs<mode>2 and neg<mode>2 patterns using absneg code iterator. \n+\n 2008-04-10  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.h: Remove the remains of the recent search"}, {"sha": "d428c3b58d91d48ba93c211e5895796652e1f86c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 31, "deletions": 71, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd18eb1fe4255c5497ffe0d4731941910dd1391/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd18eb1fe4255c5497ffe0d4731941910dd1391/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6dd18eb1fe4255c5497ffe0d4731941910dd1391", "patch": "@@ -548,7 +548,8 @@\n (define_code_iterator umaxmin [umax umin])\n \n ;; Base name for integer and FP insn mnemonic\n-(define_code_attr maxminiprefix [(smax \"maxs\") (smin \"mins\") (umax \"maxu\") (umin \"minu\")])\n+(define_code_attr maxminiprefix [(smax \"maxs\") (smin \"mins\")\n+\t\t\t\t (umax \"maxu\") (umin \"minu\")])\n (define_code_attr maxminfprefix [(smax \"max\") (smin \"min\")])\n \n ;; Mapping of parallel logic operators\n@@ -557,6 +558,12 @@\n ;; Base name for insn mnemonic.\n (define_code_attr plogicprefix [(and \"and\") (ior \"or\") (xor \"xor\")])\n \n+;; Mapping of abs neg operators\n+(define_code_iterator absneg [abs neg])\n+\n+;; Base name for x87 insn mnemonic.\n+(define_code_attr absnegprefix [(abs \"abs\") (neg \"chs\")])\n+\n ;; All single word integer modes.\n (define_mode_iterator SWI [QI HI SI (DI \"TARGET_64BIT\")])\n \n@@ -10379,17 +10386,11 @@\n \n ;; Changing of sign for FP values is doable using integer unit too.\n \n-(define_expand \"neg<mode>2\"\n+(define_expand \"<code><mode>2\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n-\t(neg:X87MODEF (match_operand:X87MODEF 1 \"register_operand\" \"\")))]\n+\t(absneg:X87MODEF (match_operand:X87MODEF 1 \"register_operand\" \"\")))]\n   \"TARGET_80387 || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n-  \"ix86_expand_fp_absneg_operator (NEG, <MODE>mode, operands); DONE;\")\n-\n-(define_expand \"abs<mode>2\"\n-  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n-\t(abs:X87MODEF (match_operand:X87MODEF 1 \"register_operand\" \"\")))]\n-  \"TARGET_80387 || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n-  \"ix86_expand_fp_absneg_operator (ABS, <MODE>mode, operands); DONE;\")\n+  \"ix86_expand_fp_absneg_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n (define_insn \"*absneg<mode>2_mixed\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,f,!r\")\n@@ -10418,17 +10419,11 @@\n   \"TARGET_80387 && !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n   \"#\")\n \n-(define_expand \"negtf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(neg:TF (match_operand:TF 1 \"register_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n-  \"ix86_expand_fp_absneg_operator (NEG, TFmode, operands); DONE;\")\n-\n-(define_expand \"abstf2\"\n+(define_expand \"<code>tf2\"\n   [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(abs:TF (match_operand:TF 1 \"register_operand\" \"\")))]\n+\t(absneg:TF (match_operand:TF 1 \"register_operand\" \"\")))]\n   \"TARGET_64BIT\"\n-  \"ix86_expand_fp_absneg_operator (ABS, TFmode, operands); DONE;\")\n+  \"ix86_expand_fp_absneg_operator (<CODE>, TFmode, operands); DONE;\")\n \n (define_insn \"*absnegtf2_sse\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=x,x\")\n@@ -10568,75 +10563,40 @@\n ;; Conditionalize these after reload. If they match before reload, we\n ;; lose the clobber and ability to use integer instructions.\n \n-(define_insn \"*neg<mode>2_1\"\n+(define_insn \"*<code><mode>2_1\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n-\t(neg:X87MODEF (match_operand:X87MODEF 1 \"register_operand\" \"0\")))]\n+\t(absneg:X87MODEF (match_operand:X87MODEF 1 \"register_operand\" \"0\")))]\n   \"TARGET_80387\n-   && (reload_completed || !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\"\n-  \"fchs\"\n+   && (reload_completed\n+       || !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\"\n+  \"f<absnegprefix>\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*abs<mode>2_1\"\n-  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n-\t(abs:X87MODEF (match_operand:X87MODEF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387\n-   && (reload_completed || !(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\"\n-  \"fabs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*negextendsfdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(neg:DF (float_extend:DF\n-\t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387 && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\"\n-  \"fchs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"*negextenddfxf2\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(neg:XF (float_extend:XF\n-\t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387\"\n-  \"fchs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*negextendsfxf2\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(neg:XF (float_extend:XF\n-\t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387\"\n-  \"fchs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*absextendsfdf2\"\n+(define_insn \"*<code>extendsfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(abs:DF (float_extend:DF\n-\t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n+\t(absneg:DF (float_extend:DF\n+\t\t     (match_operand:SF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387 && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\"\n-  \"fabs\"\n+  \"f<absnegprefix>\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"DF\")])\n \n-(define_insn \"*absextenddfxf2\"\n+(define_insn \"*<code>extendsfxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(abs:XF (float_extend:XF\n-\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n+\t(absneg:XF (float_extend:XF\n+\t\t     (match_operand:SF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387\"\n-  \"fabs\"\n+  \"f<absnegprefix>\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n \n-(define_insn \"*absextendsfxf2\"\n+(define_insn \"*<code>extenddfxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(abs:XF (float_extend:XF\n-\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n+\t(absneg:XF (float_extend:XF\n+\t\t      (match_operand:DF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387\"\n-  \"fabs\"\n+  \"f<absnegprefix>\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n "}, {"sha": "40ab29746ee1d3c163fa084e49193f119f729725", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd18eb1fe4255c5497ffe0d4731941910dd1391/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd18eb1fe4255c5497ffe0d4731941910dd1391/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6dd18eb1fe4255c5497ffe0d4731941910dd1391", "patch": "@@ -43,8 +43,10 @@\n (define_mode_attr ssevecsize [(V16QI \"b\") (V8HI \"w\") (V4SI \"d\") (V2DI \"q\")])\n \n ;; Mapping of the sse5 suffix\n-(define_mode_attr ssemodesuffixf4 [(SF \"ss\") (DF \"sd\") (V4SF \"ps\") (V2DF \"pd\")])\n-(define_mode_attr ssemodesuffixf2s [(SF \"ss\") (DF \"sd\") (V4SF \"ss\") (V2DF \"sd\")])\n+(define_mode_attr ssemodesuffixf4 [(SF \"ss\") (DF \"sd\")\n+\t\t\t\t   (V4SF \"ps\") (V2DF \"pd\")])\n+(define_mode_attr ssemodesuffixf2s [(SF \"ss\") (DF \"sd\")\n+\t\t\t\t    (V4SF \"ss\") (V2DF \"sd\")])\n (define_mode_attr ssemodesuffixf2c [(V4SF \"s\") (V2DF \"d\")])\n \n ;; Mapping of the max integer size for sse5 rotate immediate constraint\n@@ -346,17 +348,12 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_expand \"neg<mode>2\"\n-  [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(neg:SSEMODEF2P (match_operand:SSEMODEF2P 1 \"register_operand\" \"\")))]\n-  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n-  \"ix86_expand_fp_absneg_operator (NEG, <MODE>mode, operands); DONE;\")\n-\n-(define_expand \"abs<mode>2\"\n+(define_expand \"<code><mode>2\"\n   [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")\n-\t(abs:SSEMODEF2P (match_operand:SSEMODEF2P 1 \"register_operand\" \"\")))]\n+\t(absneg:SSEMODEF2P\n+\t  (match_operand:SSEMODEF2P 1 \"register_operand\" \"\")))]\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n-  \"ix86_expand_fp_absneg_operator (ABS, <MODE>mode, operands); DONE;\")\n+  \"ix86_expand_fp_absneg_operator (<CODE>, <MODE>mode, operands); DONE;\")\n \n (define_expand \"<addsub><mode>3\"\n   [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"\")"}]}