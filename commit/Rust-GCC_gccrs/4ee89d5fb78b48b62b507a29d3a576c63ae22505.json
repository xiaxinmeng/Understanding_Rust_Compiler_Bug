{"sha": "4ee89d5fb78b48b62b507a29d3a576c63ae22505", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVlODlkNWZiNzhiNDhiNjJiNTA3YTI5ZDNhNTc2YzYzYWUyMjUwNQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-07-05T21:57:55Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-07-05T21:57:55Z"}, "message": "Support AVX Programming Reference (June, 2010).\n\ngcc/\n\n2010-07-05  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tAVX Programming Reference (June, 2010)\n\t* config/i386/cpuid.h (bit_F16C): New.\n\t(bit_RDRND): Likewise.\n\t(bit_FSGSBASE): Likewise.\n\n\t* config/i386/i386-builtin-types.def: Add\n\t\"DEF_FUNCTION_TYPE (UINT16)\", function types for\n\tfloat16 <-> float conversions and\n\t\"DEF_FUNCTION_TYPE (VOID, UINT64)\".\n\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Support\n\tOPTION_MASK_ISA_FSGSBASE, OPTION_MASK_ISA_RDRND and\n\tOPTION_MASK_ISA_F16C.\n\n\t* config/i386/i386.c (OPTION_MASK_ISA_FSGSBASE_SET): New.\n\t(OPTION_MASK_ISA_RDRND_SET): Likewise.\n\t(OPTION_MASK_ISA_F16C_SET): Likewise.\n\t(OPTION_MASK_ISA_FSGSBASE_UNSET): Likewise.\n\t(OPTION_MASK_ISA_RDRND_UNSET): Likewise.\n\t(OPTION_MASK_ISA_F16C_UNSET): Likewise.\n\t(OPTION_MASK_ISA_AVX_UNSET): Add OPTION_MASK_ISA_F16C_UNSET.\n\t(ix86_handle_option): Handle OPT_mfsgsbase, OPT_mrdrnd and\n\tOPT_mf16c.\n\t(ix86_target_string): Support -mfsgsbase, -mrdrnd and -mf16c.\n\t(pta_flags): Add PTA_FSGSBASE, PTA_RDRND and PTA_F16C.\n\t(override_options): Handle them.\n\t(ix86_valid_target_attribute_inner_p): Handle fsgsbase, rdrnd\n\tand f16c.\n\t(ix86_builtins): Add IX86_BUILTIN_RDFSBASE32,\n\tIX86_BUILTIN_RDFSBASE64, IX86_BUILTIN_RDGSBASE32,\n\tIX86_BUILTIN_RDGSBASE64, IX86_BUILTIN_WRFSBASE32,\n\tIX86_BUILTIN_WRFSBASE64, IX86_BUILTIN_WRGSBASE32,\n\tIX86_BUILTIN_WRGSBASE64, IX86_BUILTIN_RDRAND16,\n\tIX86_BUILTIN_RDRAND32, IX86_BUILTIN_RDRAND64,\n\tIX86_BUILTIN_CVTPH2PS, IX86_BUILTIN_CVTPH2PS256,\n\tIX86_BUILTIN_CVTPS2PH and IX86_BUILTIN_CVTPS2PH256.\n\t(bdesc_args): Likewise.\n\t(ix86_expand_args_builtin): Handle V8SF_FTYPE_V8HI,\n\tV4SF_FTYPE_V8HI, V8HI_FTYPE_V8SF_INT and V8HI_FTYPE_V4SF_INT.\n\t(ix86_expand_special_args_builtin): Handle VOID_FTYPE_UINT64,\n\tVOID_FTYPE_UNSIGNED, UNSIGNED_FTYPE_VOID and UINT16_FTYPE_VOID.\n\tHandle non-memory store.\n\n\t* config/i386/i386.h (TARGET_FSGSBASE): New.\n\t(TARGET_RDRND): Likewise.\n\t(TARGET_F12C): Likewise.\n\n\t* config/i386/i386.md (UNSPEC_VCVTPH2PS): New.\n\t(UNSPEC_VCVTPS2PH): Likewise.\n\t(UNSPECV_RDFSBASE): Likewise.\n\t(UNSPECV_RDGSBASE): Likewise.\n\t(UNSPECV_WRFSBASE): Likewise.\n\t(UNSPECV_WRGSBASE): Likewise.\n\t(UNSPECV_RDRAND): Likewise.\n\t(rdfsbase<mode>): Likewise.\n\t(rdgsbase<mode>): Likewise.\n\t(wrfsbase<mode>): Likewise.\n\t(wrgsbase<mode>): Likewise.\n\t(rdrand<mode>): Likewise.\n\n\t* config/i386/i386.opt: Add -mfsgsbase, -mrdrnd and -mf16c.\n\n\t* config/i386/immintrin.h (_rdrand_u16): New.\n\t(_rdrand_u32): Likewise.\n\t(_readfsbase_u32): Likewise.\n\t(_readfsbase_u64): Likewise.\n\t(_readgsbase_u32): Likewise.\n\t(_readgsbase_u64): Likewise.\n\t(_writefsbase_u32): Likewise.\n\t(_writefsbase_u64): Likewise.\n\t(_writegsbase_u32): Likewise.\n\t(_writegsbase_u64): Likewise.\n\t(_rdrand_u64): Likewise.\n\t(_cvtsh_ss): Likewise.\n\t(_mm_cvtph_ps): Likewise.\n\t(_mm256_cvtph_ps): Likewise.\n\t(_cvtss_sh): Likewise.\n\t(_mm_cvtps_ph): Likewise.\n\t(_mm256_cvtps_ph): Likewise.\n\n\t* config/i386/sse.md (vcvtph2ps): New.\n\t(*vcvtph2ps_load): Likewise.\n\t(vcvtph2ps256): Likewise.\n\t(vcvtps2ph): Likewise.\n\t(*vcvtps2ph): Likewise.\n\t(*vcvtps2ph_store): Likewise.\n\t(vcvtps2ph256): Likewise.\n\n\t* doc/extend.texi: Document FSGSBASE and RDRND built-in functions.\n\n\t* doc/invoke.texi: Document -mfsgsbase, -mrdrnd and -mf16c.\n\ngcc/testsuite/\n\n2010-07-05  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tAVX Programming Reference (June, 2010)\n\t* g++.dg/other/i386-2.C: Add -mfsgsbase -mrdrnd -mf16c.\n\t* g++.dg/other/i386-3.C: Likewise.\n\t* gcc.target/i386/sse-12.c: Likewise.\n\n\t* gcc.target/i386/f16c-check.h: New.\n\t* gcc.target/i386/rdfsbase-1.c: Likewise.\n\t* gcc.target/i386/rdfsbase-2.c: Likewise.\n\t* gcc.target/i386/rdgsbase-1.c: Likewise.\n\t* gcc.target/i386/rdgsbase-2.c: Likewise.\n\t* gcc.target/i386/rdrand-1.c: Likewise.\n\t* gcc.target/i386/rdrand-2.c: Likewise.\n\t* gcc.target/i386/rdrand-3.c: Likewise.\n\t* gcc.target/i386/vcvtph2ps-1.c: Likewise.\n\t* gcc.target/i386/vcvtph2ps-2.c: Likewise.\n\t* gcc.target/i386/vcvtph2ps-3.c: Likewise.\n\t* gcc.target/i386/vcvtps2ph-1.c: Likewise.\n\t* gcc.target/i386/vcvtps2ph-2.c: Likewise.\n\t* gcc.target/i386/vcvtps2ph-3.c: Likewise.\n\t* gcc.target/i386/wrfsbase-1.c: Likewise.\n\t* gcc.target/i386/wrfsbase-2.c: Likewise.\n\t* gcc.target/i386/wrgsbase-1.c: Likewise.\n\t* gcc.target/i386/wrgsbase-2.c: Likewise.\n\n\t* gcc.target/i386/sse-13.c: Add -mfsgsbase -mrdrnd -mf16c.\n\t(__builtin_ia32_vcvtps2ph): New.\n\t(__builtin_ia32_vcvtps2ph256): Likewise.\n\n\t* gcc.target/i386/sse-14.c: Add -mfsgsbase -mrdrnd -mf16c.\n\tTest _cvtss_sh, _mm_cvtps_ph and _mm256_cvtps_ph.\n\n\t* gcc.target/i386/sse-22.c: Add fsgsbase,rdrnd,f16c.\n\tTest _cvtss_sh, _mm_cvtps_ph and _mm256_cvtps_ph.\n\n\t* gcc.target/i386/sse-23.c (__builtin_ia32_vcvtps2ph): New.\n\t(__builtin_ia32_vcvtps2ph256): Likewise.\n\tAdd fsgsbase,rdrnd,f16c.\n\n\t* lib/target-supports.exp (check_effective_target_f16c): New.\n\nFrom-SVN: r161855", "tree": {"sha": "efdf49c699fd9ed6a82a353be52e11e35cf1141a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efdf49c699fd9ed6a82a353be52e11e35cf1141a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ee89d5fb78b48b62b507a29d3a576c63ae22505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee89d5fb78b48b62b507a29d3a576c63ae22505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ee89d5fb78b48b62b507a29d3a576c63ae22505", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ee89d5fb78b48b62b507a29d3a576c63ae22505/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e6d8a0d27de18e959333cc312a4182207949318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6d8a0d27de18e959333cc312a4182207949318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e6d8a0d27de18e959333cc312a4182207949318"}], "stats": {"total": 973, "additions": 960, "deletions": 13}, "files": [{"sha": "333e045668d9b1528141e2e4b383443a9e5411b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -1,3 +1,97 @@\n+2010-07-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tAVX Programming Reference (June, 2010)\n+\t* config/i386/cpuid.h (bit_F16C): New.\n+\t(bit_RDRND): Likewise.\n+\t(bit_FSGSBASE): Likewise.\n+\n+\t* config/i386/i386-builtin-types.def: Add\n+\t\"DEF_FUNCTION_TYPE (UINT16)\", function types for\n+\tfloat16 <-> float conversions and\n+\t\"DEF_FUNCTION_TYPE (VOID, UINT64)\".\n+\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Support\n+\tOPTION_MASK_ISA_FSGSBASE, OPTION_MASK_ISA_RDRND and\n+\tOPTION_MASK_ISA_F16C.\n+\n+\t* config/i386/i386.c (OPTION_MASK_ISA_FSGSBASE_SET): New.\n+\t(OPTION_MASK_ISA_RDRND_SET): Likewise.\n+\t(OPTION_MASK_ISA_F16C_SET): Likewise.\n+\t(OPTION_MASK_ISA_FSGSBASE_UNSET): Likewise.\n+\t(OPTION_MASK_ISA_RDRND_UNSET): Likewise.\n+\t(OPTION_MASK_ISA_F16C_UNSET): Likewise.\n+\t(OPTION_MASK_ISA_AVX_UNSET): Add OPTION_MASK_ISA_F16C_UNSET.\n+\t(ix86_handle_option): Handle OPT_mfsgsbase, OPT_mrdrnd and\n+\tOPT_mf16c.\n+\t(ix86_target_string): Support -mfsgsbase, -mrdrnd and -mf16c.\n+\t(pta_flags): Add PTA_FSGSBASE, PTA_RDRND and PTA_F16C.\n+\t(override_options): Handle them.\n+\t(ix86_valid_target_attribute_inner_p): Handle fsgsbase, rdrnd\n+\tand f16c.\n+\t(ix86_builtins): Add IX86_BUILTIN_RDFSBASE32,\n+\tIX86_BUILTIN_RDFSBASE64, IX86_BUILTIN_RDGSBASE32,\n+\tIX86_BUILTIN_RDGSBASE64, IX86_BUILTIN_WRFSBASE32,\n+\tIX86_BUILTIN_WRFSBASE64, IX86_BUILTIN_WRGSBASE32,\n+\tIX86_BUILTIN_WRGSBASE64, IX86_BUILTIN_RDRAND16,\n+\tIX86_BUILTIN_RDRAND32, IX86_BUILTIN_RDRAND64,\n+\tIX86_BUILTIN_CVTPH2PS, IX86_BUILTIN_CVTPH2PS256,\n+\tIX86_BUILTIN_CVTPS2PH and IX86_BUILTIN_CVTPS2PH256.\n+\t(bdesc_args): Likewise.\n+\t(ix86_expand_args_builtin): Handle V8SF_FTYPE_V8HI,\n+\tV4SF_FTYPE_V8HI, V8HI_FTYPE_V8SF_INT and V8HI_FTYPE_V4SF_INT.\n+\t(ix86_expand_special_args_builtin): Handle VOID_FTYPE_UINT64,\n+\tVOID_FTYPE_UNSIGNED, UNSIGNED_FTYPE_VOID and UINT16_FTYPE_VOID.\n+\tHandle non-memory store.\n+\n+\t* config/i386/i386.h (TARGET_FSGSBASE): New.\n+\t(TARGET_RDRND): Likewise.\n+\t(TARGET_F12C): Likewise.\n+\n+\t* config/i386/i386.md (UNSPEC_VCVTPH2PS): New.\n+\t(UNSPEC_VCVTPS2PH): Likewise.\n+\t(UNSPECV_RDFSBASE): Likewise.\n+\t(UNSPECV_RDGSBASE): Likewise.\n+\t(UNSPECV_WRFSBASE): Likewise.\n+\t(UNSPECV_WRGSBASE): Likewise.\n+\t(UNSPECV_RDRAND): Likewise.\n+\t(rdfsbase<mode>): Likewise.\n+\t(rdgsbase<mode>): Likewise.\n+\t(wrfsbase<mode>): Likewise.\n+\t(wrgsbase<mode>): Likewise.\n+\t(rdrand<mode>): Likewise.\n+\n+\t* config/i386/i386.opt: Add -mfsgsbase, -mrdrnd and -mf16c.\n+\n+\t* config/i386/immintrin.h (_rdrand_u16): New.\n+\t(_rdrand_u32): Likewise.\n+\t(_readfsbase_u32): Likewise.\n+\t(_readfsbase_u64): Likewise.\n+\t(_readgsbase_u32): Likewise.\n+\t(_readgsbase_u64): Likewise.\n+\t(_writefsbase_u32): Likewise.\n+\t(_writefsbase_u64): Likewise.\n+\t(_writegsbase_u32): Likewise.\n+\t(_writegsbase_u64): Likewise.\n+\t(_rdrand_u64): Likewise.\n+\t(_cvtsh_ss): Likewise.\n+\t(_mm_cvtph_ps): Likewise.\n+\t(_mm256_cvtph_ps): Likewise.\n+\t(_cvtss_sh): Likewise.\n+\t(_mm_cvtps_ph): Likewise.\n+\t(_mm256_cvtps_ph): Likewise.\n+\n+\t* config/i386/sse.md (vcvtph2ps): New.\n+\t(*vcvtph2ps_load): Likewise.\n+\t(vcvtph2ps256): Likewise.\n+\t(vcvtps2ph): Likewise.\n+\t(*vcvtps2ph): Likewise.\n+\t(*vcvtps2ph_store): Likewise.\n+\t(vcvtps2ph256): Likewise.\n+\n+\t* doc/extend.texi: Document FSGSBASE and RDRND built-in functions.\n+\n+\t* doc/invoke.texi: Document -mfsgsbase, -mrdrnd and -mf16c.\n+\n 2010-07-05  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tPR bootstrap/44512"}, {"sha": "11c2f1e2662bec95ece7295bfc6d1300c02ac0c5", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -35,6 +35,8 @@\n #define bit_XSAVE\t(1 << 26)\n #define bit_OSXSAVE\t(1 << 27)\n #define bit_AVX\t\t(1 << 28)\n+#define bit_F16C\t(1 << 29)\n+#define bit_RDRND\t(1 << 30)\n \n /* %edx */\n #define bit_CMPXCHG8B\t(1 << 8)\n@@ -58,6 +60,8 @@\n #define bit_3DNOWP\t(1 << 30)\n #define bit_3DNOW\t(1 << 31)\n \n+/* Extended Features (%eax == 7) */\n+#define bit_FSGSBASE\t(1 << 0)\n \n #if defined(__i386__) && defined(__PIC__)\n /* %ebx may be the PIC register.  */"}, {"sha": "09dd9ebca1157597423ef03f1e25aa243487cd9c", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -128,6 +128,7 @@ DEF_POINTER_TYPE (PCV8SF, V8SF, CONST)\n DEF_FUNCTION_TYPE (FLOAT128)\n DEF_FUNCTION_TYPE (UINT64)\n DEF_FUNCTION_TYPE (UNSIGNED)\n+DEF_FUNCTION_TYPE (UINT16)\n DEF_FUNCTION_TYPE (VOID)\n DEF_FUNCTION_TYPE (PVOID)\n \n@@ -179,6 +180,7 @@ DEF_FUNCTION_TYPE (V4SF, V4DF)\n DEF_FUNCTION_TYPE (V4SF, V4SF)\n DEF_FUNCTION_TYPE (V4SF, V4SI)\n DEF_FUNCTION_TYPE (V4SF, V8SF)\n+DEF_FUNCTION_TYPE (V4SF, V8HI)\n DEF_FUNCTION_TYPE (V4SI, V16QI)\n DEF_FUNCTION_TYPE (V4SI, V2DF)\n DEF_FUNCTION_TYPE (V4SI, V4DF)\n@@ -194,10 +196,12 @@ DEF_FUNCTION_TYPE (V8SF, PCV4SF)\n DEF_FUNCTION_TYPE (V8SF, V4SF)\n DEF_FUNCTION_TYPE (V8SF, V8SF)\n DEF_FUNCTION_TYPE (V8SF, V8SI)\n+DEF_FUNCTION_TYPE (V8SF, V8HI)\n DEF_FUNCTION_TYPE (V8SI, V4SI)\n DEF_FUNCTION_TYPE (V8SI, V8SF)\n DEF_FUNCTION_TYPE (VOID, PCVOID)\n DEF_FUNCTION_TYPE (VOID, PVOID)\n+DEF_FUNCTION_TYPE (VOID, UINT64)\n DEF_FUNCTION_TYPE (VOID, UNSIGNED)\n \n DEF_FUNCTION_TYPE (DI, V2DI, INT)\n@@ -282,6 +286,8 @@ DEF_FUNCTION_TYPE (V8HI, V4SI, V4SI)\n DEF_FUNCTION_TYPE (V8HI, V8HI, INT)\n DEF_FUNCTION_TYPE (V8HI, V8HI, SI)\n DEF_FUNCTION_TYPE (V8HI, V8HI, V8HI)\n+DEF_FUNCTION_TYPE (V8HI, V8SF, INT)\n+DEF_FUNCTION_TYPE (V8HI, V4SF, INT)\n DEF_FUNCTION_TYPE (V8QI, V4HI, V4HI)\n DEF_FUNCTION_TYPE (V8QI, V8QI, V8QI)\n DEF_FUNCTION_TYPE (V8SF, PCV8SF, V8SF)"}, {"sha": "c03c8515bc376fe5b1ad3fb95737ecbbd879c4ea", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -246,6 +246,12 @@ ix86_target_macros_internal (int isa_flag,\n     def_or_undef (parse_in, \"__ABM__\");\n   if (isa_flag & OPTION_MASK_ISA_POPCNT)\n     def_or_undef (parse_in, \"__POPCNT__\");\n+  if (isa_flag & OPTION_MASK_ISA_FSGSBASE)\n+    def_or_undef (parse_in, \"__FSGSBASE__\");\n+  if (isa_flag & OPTION_MASK_ISA_RDRND)\n+    def_or_undef (parse_in, \"__RDRND__\");\n+  if (isa_flag & OPTION_MASK_ISA_F16C)\n+    def_or_undef (parse_in, \"__F16C__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE))\n     def_or_undef (parse_in, \"__SSE_MATH__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE2))"}, {"sha": "0df8e74f5741a4c00d56b5868c215982b00d2e4a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 126, "deletions": 3, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -2081,6 +2081,11 @@ static int ix86_isa_flags_explicit;\n #define OPTION_MASK_ISA_MOVBE_SET OPTION_MASK_ISA_MOVBE\n #define OPTION_MASK_ISA_CRC32_SET OPTION_MASK_ISA_CRC32\n \n+#define OPTION_MASK_ISA_FSGSBASE_SET OPTION_MASK_ISA_FSGSBASE\n+#define OPTION_MASK_ISA_RDRND_SET OPTION_MASK_ISA_RDRND\n+#define OPTION_MASK_ISA_F16C_SET \\\n+  (OPTION_MASK_ISA_F16C | OPTION_MASK_ISA_AVX_SET)\n+\n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n \n@@ -2106,7 +2111,7 @@ static int ix86_isa_flags_explicit;\n   (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_AVX_UNSET )\n #define OPTION_MASK_ISA_AVX_UNSET \\\n   (OPTION_MASK_ISA_AVX | OPTION_MASK_ISA_FMA_UNSET \\\n-   | OPTION_MASK_ISA_FMA4_UNSET)\n+   | OPTION_MASK_ISA_FMA4_UNSET | OPTION_MASK_ISA_F16C_UNSET)\n #define OPTION_MASK_ISA_FMA_UNSET OPTION_MASK_ISA_FMA\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n@@ -2130,6 +2135,10 @@ static int ix86_isa_flags_explicit;\n #define OPTION_MASK_ISA_MOVBE_UNSET OPTION_MASK_ISA_MOVBE\n #define OPTION_MASK_ISA_CRC32_UNSET OPTION_MASK_ISA_CRC32\n \n+#define OPTION_MASK_ISA_FSGSBASE_UNSET OPTION_MASK_ISA_FSGSBASE\n+#define OPTION_MASK_ISA_RDRND_UNSET OPTION_MASK_ISA_RDRND\n+#define OPTION_MASK_ISA_F16C_UNSET OPTION_MASK_ISA_F16C\n+\n /* Vectorization library interface and handlers.  */\n tree (*ix86_veclib_handler)(enum built_in_function, tree, tree) = NULL;\n static tree ix86_veclibabi_svml (enum built_in_function, tree, tree);\n@@ -2499,6 +2508,45 @@ ix86_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n \t}\n       return true;\n \n+    case OPT_mfsgsbase:\n+      if (value)\n+\t{\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_FSGSBASE_SET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_FSGSBASE_SET;\n+\t}\n+      else\n+\t{\n+\t  ix86_isa_flags &= ~OPTION_MASK_ISA_FSGSBASE_UNSET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_FSGSBASE_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mrdrnd:\n+      if (value)\n+\t{\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_RDRND_SET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_RDRND_SET;\n+\t}\n+      else\n+\t{\n+\t  ix86_isa_flags &= ~OPTION_MASK_ISA_RDRND_UNSET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_RDRND_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mf16c:\n+      if (value)\n+\t{\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_F16C_SET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_F16C_SET;\n+\t}\n+      else\n+\t{\n+\t  ix86_isa_flags &= ~OPTION_MASK_ISA_F16C_UNSET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_F16C_UNSET;\n+\t}\n+      return true;\n+\n     default:\n       return true;\n     }\n@@ -2542,6 +2590,9 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-mcrc32\",\tOPTION_MASK_ISA_CRC32 },\n     { \"-maes\",\t\tOPTION_MASK_ISA_AES },\n     { \"-mpclmul\",\tOPTION_MASK_ISA_PCLMUL },\n+    { \"-mfsgsbase\",\tOPTION_MASK_ISA_FSGSBASE },\n+    { \"-mrdrnd\",\tOPTION_MASK_ISA_RDRND },\n+    { \"-mf16c\",\t\tOPTION_MASK_ISA_F16C },\n   };\n \n   /* Flag options.  */\n@@ -2779,7 +2830,10 @@ override_options (bool main_args_p)\n       PTA_MOVBE = 1 << 20,\n       PTA_FMA4 = 1 << 21,\n       PTA_XOP = 1 << 22,\n-      PTA_LWP = 1 << 23\n+      PTA_LWP = 1 << 23,\n+      PTA_FSGSBASE = 1 << 24,\n+      PTA_RDRND = 1 << 25,\n+      PTA_F16C = 1 << 26\n     };\n \n   static struct pta\n@@ -3155,6 +3209,15 @@ override_options (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_PCLMUL\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_PCLMUL))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_PCLMUL;\n+\tif (processor_alias_table[i].flags & PTA_FSGSBASE\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_FSGSBASE))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_FSGSBASE;\n+\tif (processor_alias_table[i].flags & PTA_RDRND\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_RDRND))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_RDRND;\n+\tif (processor_alias_table[i].flags & PTA_F16C\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_F16C))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_F16C;\n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n \n@@ -3829,6 +3892,9 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n     IX86_ATTR_ISA (\"fma4\",\tOPT_mfma4),\n     IX86_ATTR_ISA (\"xop\",\tOPT_mxop),\n     IX86_ATTR_ISA (\"lwp\",\tOPT_mlwp),\n+    IX86_ATTR_ISA (\"fsgsbase\",\tOPT_mfsgsbase),\n+    IX86_ATTR_ISA (\"rdrnd\",\tOPT_mrdrnd),\n+    IX86_ATTR_ISA (\"f16c\",\tOPT_mf16c),\n \n     /* string options */\n     IX86_ATTR_STR (\"arch=\",\tIX86_FUNCTION_SPECIFIC_ARCH),\n@@ -21628,6 +21694,27 @@ enum ix86_builtins\n \n   IX86_BUILTIN_CLZS,\n \n+  /* FSGSBASE instructions.  */\n+  IX86_BUILTIN_RDFSBASE32,\n+  IX86_BUILTIN_RDFSBASE64,\n+  IX86_BUILTIN_RDGSBASE32,\n+  IX86_BUILTIN_RDGSBASE64,\n+  IX86_BUILTIN_WRFSBASE32,\n+  IX86_BUILTIN_WRFSBASE64,\n+  IX86_BUILTIN_WRGSBASE32,\n+  IX86_BUILTIN_WRGSBASE64,\n+\n+  /* RDRND instructions.  */\n+  IX86_BUILTIN_RDRAND16,\n+  IX86_BUILTIN_RDRAND32,\n+  IX86_BUILTIN_RDRAND64,\n+\n+  /* F16C instructions.  */\n+  IX86_BUILTIN_CVTPH2PS,\n+  IX86_BUILTIN_CVTPH2PS256,\n+  IX86_BUILTIN_CVTPS2PH,\n+  IX86_BUILTIN_CVTPS2PH256,\n+\n   IX86_BUILTIN_MAX\n };\n \n@@ -21902,6 +21989,20 @@ static const struct builtin_description bdesc_special_args[] =\n   { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpinssi3, \"__builtin_ia32_lwpins32\", IX86_BUILTIN_LWPINS32, UNKNOWN, (int) UCHAR_FTYPE_UINT_UINT_UINT },\n   { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpinsdi3, \"__builtin_ia32_lwpins64\", IX86_BUILTIN_LWPINS64, UNKNOWN, (int) UCHAR_FTYPE_UINT64_UINT_UINT },\n \n+  /* FSGSBASE */\n+  { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_rdfsbasesi, \"__builtin_ia32_rdfsbase32\", IX86_BUILTIN_RDFSBASE32, UNKNOWN, (int) UNSIGNED_FTYPE_VOID },\n+  { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_rdfsbasedi, \"__builtin_ia32_rdfsbase64\", IX86_BUILTIN_RDFSBASE64, UNKNOWN, (int) UINT64_FTYPE_VOID },\n+  { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_rdgsbasesi, \"__builtin_ia32_rdgsbase32\", IX86_BUILTIN_RDGSBASE32, UNKNOWN, (int) UNSIGNED_FTYPE_VOID },\n+  { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_rdgsbasedi, \"__builtin_ia32_rdgsbase64\", IX86_BUILTIN_RDGSBASE64, UNKNOWN, (int) UINT64_FTYPE_VOID },\n+  { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_wrfsbasesi, \"__builtin_ia32_wrfsbase32\", IX86_BUILTIN_WRFSBASE32, UNKNOWN, (int) VOID_FTYPE_UNSIGNED },\n+  { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_wrfsbasedi, \"__builtin_ia32_wrfsbase64\", IX86_BUILTIN_WRFSBASE64, UNKNOWN, (int) VOID_FTYPE_UINT64 },\n+  { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_wrgsbasesi, \"__builtin_ia32_wrgsbase32\", IX86_BUILTIN_WRGSBASE32, UNKNOWN, (int) VOID_FTYPE_UNSIGNED },\n+  { OPTION_MASK_ISA_FSGSBASE | OPTION_MASK_ISA_64BIT, CODE_FOR_wrgsbasedi, \"__builtin_ia32_wrgsbase64\", IX86_BUILTIN_WRGSBASE64, UNKNOWN, (int) VOID_FTYPE_UINT64 },\n+\n+  /* RDRND */\n+  { OPTION_MASK_ISA_RDRND, CODE_FOR_rdrandhi, \"__builtin_ia32_rdrand16\", IX86_BUILTIN_RDRAND16, UNKNOWN, (int) UINT16_FTYPE_VOID },\n+  { OPTION_MASK_ISA_RDRND, CODE_FOR_rdrandsi, \"__builtin_ia32_rdrand32\", IX86_BUILTIN_RDRAND32, UNKNOWN, (int) UNSIGNED_FTYPE_VOID },\n+  { OPTION_MASK_ISA_RDRND | OPTION_MASK_ISA_64BIT, CODE_FOR_rdranddi, \"__builtin_ia32_rdrand64\", IX86_BUILTIN_RDRAND64, UNKNOWN, (int) UINT64_FTYPE_VOID },\n };\n \n /* Builtins with variable number of arguments.  */\n@@ -22528,6 +22629,12 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movmskps256, \"__builtin_ia32_movmskps256\", IX86_BUILTIN_MOVMSKPS256, UNKNOWN, (int) INT_FTYPE_V8SF },\n \n   { OPTION_MASK_ISA_ABM, CODE_FOR_clzhi2_abm,   \"__builtin_clzs\",   IX86_BUILTIN_CLZS,    UNKNOWN,     (int) UINT16_FTYPE_UINT16 },\n+\n+  /* F16C */\n+  { OPTION_MASK_ISA_F16C, CODE_FOR_vcvtph2ps, \"__builtin_ia32_vcvtph2ps\", IX86_BUILTIN_CVTPH2PS, UNKNOWN, (int) V4SF_FTYPE_V8HI },\n+  { OPTION_MASK_ISA_F16C, CODE_FOR_vcvtph2ps256, \"__builtin_ia32_vcvtph2ps256\", IX86_BUILTIN_CVTPH2PS256, UNKNOWN, (int) V8SF_FTYPE_V8HI },\n+  { OPTION_MASK_ISA_F16C, CODE_FOR_vcvtps2ph, \"__builtin_ia32_vcvtps2ph\", IX86_BUILTIN_CVTPS2PH, UNKNOWN, (int) V8HI_FTYPE_V4SF_INT },\n+  { OPTION_MASK_ISA_F16C, CODE_FOR_vcvtps2ph256, \"__builtin_ia32_vcvtps2ph256\", IX86_BUILTIN_CVTPS2PH256, UNKNOWN, (int) V8HI_FTYPE_V8SF_INT },\n };\n \n /* FMA4 and XOP.  */\n@@ -23768,6 +23875,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8SF_FTYPE_V8SF:\n     case V8SF_FTYPE_V8SI:\n     case V8SF_FTYPE_V4SF:\n+    case V8SF_FTYPE_V8HI:\n     case V4SI_FTYPE_V4SI:\n     case V4SI_FTYPE_V16QI:\n     case V4SI_FTYPE_V4SF:\n@@ -23784,6 +23892,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V4SF_FTYPE_V4SI:\n     case V4SF_FTYPE_V8SF:\n     case V4SF_FTYPE_V4DF:\n+    case V4SF_FTYPE_V8HI:\n     case V4SF_FTYPE_V2DF:\n     case V2DI_FTYPE_V2DI:\n     case V2DI_FTYPE_V16QI:\n@@ -23886,6 +23995,8 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       nargs_constant = 1;\n       break;\n     case V8HI_FTYPE_V8HI_INT:\n+    case V8HI_FTYPE_V8SF_INT:\n+    case V8HI_FTYPE_V4SF_INT:\n     case V8SF_FTYPE_V8SF_INT:\n     case V4SI_FTYPE_V4SI_INT:\n     case V4SI_FTYPE_V8SI_INT:\n@@ -24133,7 +24244,16 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case VOID_FTYPE_VOID:\n       emit_insn (GEN_FCN (icode) (target));\n       return 0;\n+    case VOID_FTYPE_UINT64:\n+    case VOID_FTYPE_UNSIGNED:\n+      nargs = 0;\n+      klass = store;\n+      memory = 0;\n+      break;\n+      break;\n     case UINT64_FTYPE_VOID:\n+    case UNSIGNED_FTYPE_VOID:\n+    case UINT16_FTYPE_VOID:\n       nargs = 0;\n       klass = load;\n       memory = 0;\n@@ -24212,7 +24332,10 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       arg = CALL_EXPR_ARG (exp, 0);\n       op = expand_normal (arg);\n       gcc_assert (target == 0);\n-      target = gen_rtx_MEM (tmode, copy_to_mode_reg (Pmode, op));\n+      if (memory)\n+\ttarget = gen_rtx_MEM (tmode, copy_to_mode_reg (Pmode, op));\n+      else\n+\ttarget = force_reg (tmode, op);\n       arg_adjust = 1;\n     }\n   else"}, {"sha": "d036bf03fec3d52d844f018a23e198dbbcf82711", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -66,6 +66,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AES\tOPTION_ISA_AES\n #define TARGET_PCLMUL\tOPTION_ISA_PCLMUL\n #define TARGET_CMPXCHG16B OPTION_ISA_CX16\n+#define TARGET_FSGSBASE\tOPTION_ISA_FSGSBASE\n+#define TARGET_RDRND\tOPTION_ISA_RDRND\n+#define TARGET_F16C\tOPTION_ISA_F16C\n \n \n /* SSE4.1 defines round instructions */"}, {"sha": "20f222ee53677d0d770a25f359878f1af7ed4904", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -226,6 +226,8 @@\n   UNSPEC_MASKSTORE\n   UNSPEC_CAST\n   UNSPEC_VTESTP\n+  UNSPEC_VCVTPH2PS\n+  UNSPEC_VCVTPS2PH\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -254,6 +256,11 @@\n   UNSPECV_SLWP_INTRINSIC\n   UNSPECV_LWPVAL_INTRINSIC\n   UNSPECV_LWPINS_INTRINSIC\n+  UNSPECV_RDFSBASE\n+  UNSPECV_RDGSBASE\n+  UNSPECV_WRFSBASE\n+  UNSPECV_WRGSBASE\n+  UNSPECV_RDRAND\n ])\n \n ;; Constants to represent pcomtrue/pcomfalse variants\n@@ -18477,6 +18484,46 @@\n    (set (attr \"length\")\n         (symbol_ref \"ix86_attr_length_address_default (insn) + 9\"))])\n \n+(define_insn \"rdfsbase<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SWI48 [(const_int 0)] UNSPECV_RDFSBASE))]\n+  \"TARGET_64BIT && TARGET_FSGSBASE\"\n+  \"rdfsbase %0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"prefix_extra\" \"2\")])\n+\n+(define_insn \"rdgsbase<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SWI48 [(const_int 0)] UNSPECV_RDGSBASE))]\n+  \"TARGET_64BIT && TARGET_FSGSBASE\"\n+  \"rdgsbase %0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"prefix_extra\" \"2\")])\n+\n+(define_insn \"wrfsbase<mode>\"\n+  [(unspec_volatile [(match_operand:SWI48 0 \"register_operand\" \"r\")]\n+\t\t    UNSPECV_WRFSBASE)]\n+  \"TARGET_64BIT && TARGET_FSGSBASE\"\n+  \"wrfsbase %0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"prefix_extra\" \"2\")])\n+\n+(define_insn \"wrgsbase<mode>\"\n+  [(unspec_volatile [(match_operand:SWI48 0 \"register_operand\" \"r\")]\n+\t\t    UNSPECV_WRGSBASE)]\n+  \"TARGET_64BIT && TARGET_FSGSBASE\"\n+  \"wrgsbase %0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"prefix_extra\" \"2\")])\n+\n+(define_insn \"rdrand<mode>\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SWI248 [(const_int 0)] UNSPECV_RDRAND))]\n+  \"TARGET_RDRND\"\n+  \"rdrand %0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"prefix_extra\" \"1\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "f264c42a45de1e86ea3e70050430bb7e70a200bc", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -363,3 +363,15 @@ Support PCLMUL built-in functions and code generation\n msse2avx\n Target Report Var(ix86_sse2avx)\n Encode SSE instructions with VEX prefix\n+\n+mfsgsbase\n+Target Report Mask(ISA_FSGSBASE) Var(ix86_isa_flags) VarExists Save\n+Support FSGSBASE built-in functions and code generation\n+\n+mrdrnd\n+Target Report Mask(ISA_RDRND) Var(ix86_isa_flags) VarExists Save\n+Support RDRND built-in functions and code generation\n+\n+mf16c\n+Target Report Mask(ISA_F16C) Var(ix86_isa_flags) VarExists Save\n+Support F16C built-in functions and code generation"}, {"sha": "3e69060700abbd2db7f9bdcf6e17aaa86b9281e0", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -56,4 +56,148 @@\n #include <avxintrin.h>\n #endif\n \n+#ifdef __RDRND__\n+extern __inline unsigned short\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_rdrand_u16 (void)\n+{\n+  return __builtin_ia32_rdrand16 ();\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_rdrand_u32 (void)\n+{\n+  return __builtin_ia32_rdrand32 ();\n+}\n+#endif /* __RDRND__ */\n+\n+#ifdef  __x86_64__\n+#ifdef __FSGSBASE__\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_readfsbase_u32 (void)\n+{\n+  return __builtin_ia32_rdfsbase32 ();\n+}\n+\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_readfsbase_u64 (void)\n+{\n+  return __builtin_ia32_rdfsbase64 ();\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_readgsbase_u32 (void)\n+{\n+  return __builtin_ia32_rdgsbase32 ();\n+}\n+\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_readgsbase_u64 (void)\n+{\n+  return __builtin_ia32_rdgsbase64 ();\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_writefsbase_u32 (unsigned int __B)\n+{\n+  __builtin_ia32_wrfsbase32 (__B);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_writefsbase_u64 (unsigned long long __B)\n+{\n+  __builtin_ia32_wrfsbase64 (__B);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_writegsbase_u32 (unsigned int __B)\n+{\n+  __builtin_ia32_wrgsbase32 (__B);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_writegsbase_u64 (unsigned long long __B)\n+{\n+  __builtin_ia32_wrgsbase64 (__B);\n+}\n+#endif /* __FSGSBASE__ */\n+\n+#ifdef __RDRND__\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_rdrand_u64 (void)\n+{\n+  return __builtin_ia32_rdrand64 ();\n+}\n+#endif /* __RDRND__ */\n+#endif /* __x86_64__  */\n+\n+#ifdef __F16C__\n+extern __inline float __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtsh_ss (unsigned short __S)\n+{\n+  __v8hi __H = __extension__ (__v8hi){ __S, 0, 0, 0, 0, 0, 0, 0 };\n+  __v4sf __A = __builtin_ia32_vcvtph2ps (__H);\n+  return __builtin_ia32_vec_ext_v4sf (__A, 0);\n+}\n+\n+extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtph_ps (__m128i __A)\n+{\n+  return (__m128) __builtin_ia32_vcvtph2ps ((__v8hi) __A);\n+}\n+\n+extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtph_ps (__m128i __A)\n+{\n+  return (__m256) __builtin_ia32_vcvtph2ps256 ((__v8hi) __A);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtss_sh (float __F, const int __I)\n+{\n+  __v4sf __A =  __extension__ (__v4sf){ __F, 0, 0, 0 };\n+  __v8hi __H = __builtin_ia32_vcvtps2ph (__A, __I);\n+  return (unsigned short) __builtin_ia32_vec_ext_v8hi (__H, 0);\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtps_ph (__m128 __A, const int __I)\n+{\n+  return (__m128i) __builtin_ia32_vcvtps2ph ((__v4sf) __A, __I);\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtps_ph (__m256 __A, const int __I)\n+{\n+  return (__m128i) __builtin_ia32_vcvtps2ph256 ((__v8sf) __A, __I);\n+}\n+#else\n+#define _cvtss_sh(__F, __I)\t\t\t\t\t\t\\\n+  (__extension__ \t\t\t\t\t\t\t\\\n+   ({\t\t\t\t\t\t\t\t\t\\\n+      __v4sf __A =  __extension__ (__v4sf){ __F, 0, 0, 0 };\t\t\\\n+      __v8hi __H = __builtin_ia32_vcvtps2ph (__A, __I);\t\t\t\\\n+      (unsigned short) __builtin_ia32_vec_ext_v8hi (__H, 0);\t\t\\\n+    }))\n+\n+#define _mm_cvtps_ph(A, I) \\\n+  ((__m128i) __builtin_ia32_vcvtps2ph ((__v4sf)(__m128) A, (int) (I)))\n+\n+#define _mm256_cvtps_ph(A, I) \\\n+  ((__m128i) __builtin_ia32_vcvtps2ph256 ((__v8sf)(__m256) A, (int) (I)))\n+#endif\n+\n+#endif /* __F16C__ */\n+\n #endif /* _IMMINTRIN_H_INCLUDED */"}, {"sha": "5ac0da875b6f4a43b98ca4e4ea7fa9e627fdf36d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -12322,3 +12322,81 @@\n    (set_attr \"length_immediate\" \"1,*\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxvecmode>\")])\n+\n+(define_insn \"vcvtph2ps\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+\t(vec_select:V4SF\n+\t  (unspec:V8SF [(match_operand:V8HI 1 \"register_operand\" \"x\")]\n+\t\t       UNSPEC_VCVTPH2PS)\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 1) (const_int 2)])))]\n+  \"TARGET_F16C\"\n+  \"vcvtph2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"*vcvtph2ps_load\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+\t(unspec:V4SF [(match_operand:V4HI 1 \"memory_operand\" \"m\")]\n+\t\t     UNSPEC_VCVTPH2PS))]\n+  \"TARGET_F16C\"\n+  \"vcvtph2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"V8SF\")])\n+\n+(define_insn \"vcvtph2ps256\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n+\t(unspec:V8SF [(match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_VCVTPH2PS))]\n+  \"TARGET_F16C\"\n+  \"vcvtph2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"V8SF\")])\n+\n+(define_expand \"vcvtps2ph\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n+\t(vec_concat:V8HI\n+\t  (unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"\")\n+\t\t\t(match_operand:SI 2 \"immediate_operand\" \"\")]\n+\t\t       UNSPEC_VCVTPS2PH)\n+\t  (match_dup 3)))]\n+  \"TARGET_F16C\"\n+  \"operands[3] = CONST0_RTX (V4HImode);\")\n+\n+(define_insn \"*vcvtps2ph\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V8HI\n+\t  (unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"x\")\n+\t\t\t(match_operand:SI 2 \"immediate_operand\" \"N\")]\n+\t\t       UNSPEC_VCVTPS2PH)\n+\t  (match_operand:V4HI 3 \"const0_operand\" \"\")))]\n+  \"TARGET_F16C\"\n+  \"vcvtps2ph\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"*vcvtps2ph_store\"\n+  [(set (match_operand:V4HI 0 \"memory_operand\" \"=m\")\n+\t(unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"x\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"N\")]\n+\t\t     UNSPEC_VCVTPS2PH))]\n+  \"TARGET_F16C\"\n+  \"vcvtps2ph\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"vcvtps2ph256\"\n+  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=xm\")\n+\t(unspec:V8HI [(match_operand:V8SF 1 \"register_operand\" \"x\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"N\")]\n+\t\t     UNSPEC_VCVTPS2PH))]\n+  \"TARGET_F16C\"\n+  \"vcvtps2ph\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"V8SF\")])"}, {"sha": "967be9176efc8a8df4baa0601d1d125f9c749bda", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -8958,6 +8958,31 @@ used.\n Generates the @code{pclmulqdq} machine instruction.\n @end table\n \n+The following built-in function is available when @option{-mfsgsbase} is\n+used.  All of them generate the machine instruction that is part of the\n+name.\n+\n+@smallexample\n+unsigned int __builtin_ia32_rdfsbase32 (void)\n+unsigned long long __builtin_ia32_rdfsbase64 (void)\n+unsigned int __builtin_ia32_rdgsbase32 (void)\n+unsigned long long __builtin_ia32_rdgsbase64 (void)\n+void _writefsbase_u32 (unsigned int)\n+void _writefsbase_u64 (unsigned long long)\n+void _writegsbase_u32 (unsigned int)\n+void _writegsbase_u64 (unsigned long long)\n+@end smallexample\n+\n+The following built-in function is available when @option{-mrdrnd} is\n+used.  All of them generate the machine instruction that is part of the\n+name.\n+\n+@smallexample\n+unsigned short __builtin_ia32_rdrand16 (void)\n+unsigned int __builtin_ia32_rdrand32 (void)\n+unsigned long long __builtin_ia32_rdrand64 (void)\n+@end smallexample\n+\n The following built-in functions are available when @option{-msse4a} is used.\n All of them generate the machine instruction that is part of the name.\n "}, {"sha": "d70f130537c5c6903d6ef3499004257eaabb205e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -591,7 +591,7 @@ Objective-C and Objective-C++ Dialects}.\n -mincoming-stack-boundary=@var{num}\n -mcld -mcx16 -msahf -mmovbe -mcrc32 -mrecip @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n--maes -mpclmul -mfused-madd @gol\n+-maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfused-madd @gol\n -msse4a -m3dnow -mpopcnt -mabm -mfma4 -mxop -mlwp @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n@@ -12226,6 +12226,12 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-aes\n @itemx -mpclmul\n @itemx -mno-pclmul\n+@itemx -mfsgsbase\n+@itemx -mno-fsgsbase\n+@itemx -mrdrnd\n+@itemx -mno-rdrnd\n+@itemx -mf16c\n+@itemx -mno-f16c\n @itemx -msse4a\n @itemx -mno-sse4a\n @itemx -mfma4\n@@ -12247,8 +12253,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex m3dnow\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX,\n-SSE, SSE2, SSE3, SSSE3, SSE4.1, AVX, AES, PCLMUL, SSE4A, FMA4, XOP,\n-LWP, ABM or 3DNow!@: extended instruction sets.\n+SSE, SSE2, SSE3, SSSE3, SSE4.1, AVX, AES, PCLMUL, FSGSBASE, RDRND,\n+F16C, SSE4A, FMA4, XOP, LWP, ABM or 3DNow!@: extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and\n disabled by these switches."}, {"sha": "24b8ccd7959fd07667a0dcd8829b155d063a2e2a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -1,3 +1,45 @@\n+2010-07-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tAVX Programming Reference (June, 2010)\n+\t* g++.dg/other/i386-2.C: Add -mfsgsbase -mrdrnd -mf16c.\n+\t* g++.dg/other/i386-3.C: Likewise.\n+\t* gcc.target/i386/sse-12.c: Likewise.\n+\n+\t* gcc.target/i386/f16c-check.h: New.\n+\t* gcc.target/i386/rdfsbase-1.c: Likewise.\n+\t* gcc.target/i386/rdfsbase-2.c: Likewise.\n+\t* gcc.target/i386/rdgsbase-1.c: Likewise.\n+\t* gcc.target/i386/rdgsbase-2.c: Likewise.\n+\t* gcc.target/i386/rdrand-1.c: Likewise.\n+\t* gcc.target/i386/rdrand-2.c: Likewise.\n+\t* gcc.target/i386/rdrand-3.c: Likewise.\n+\t* gcc.target/i386/vcvtph2ps-1.c: Likewise.\n+\t* gcc.target/i386/vcvtph2ps-2.c: Likewise.\n+\t* gcc.target/i386/vcvtph2ps-3.c: Likewise.\n+\t* gcc.target/i386/vcvtps2ph-1.c: Likewise.\n+\t* gcc.target/i386/vcvtps2ph-2.c: Likewise.\n+\t* gcc.target/i386/vcvtps2ph-3.c: Likewise.\n+\t* gcc.target/i386/wrfsbase-1.c: Likewise.\n+\t* gcc.target/i386/wrfsbase-2.c: Likewise.\n+\t* gcc.target/i386/wrgsbase-1.c: Likewise.\n+\t* gcc.target/i386/wrgsbase-2.c: Likewise.\n+\n+\t* gcc.target/i386/sse-13.c: Add -mfsgsbase -mrdrnd -mf16c.\n+\t(__builtin_ia32_vcvtps2ph): New.\n+\t(__builtin_ia32_vcvtps2ph256): Likewise.\n+\n+\t* gcc.target/i386/sse-14.c: Add -mfsgsbase -mrdrnd -mf16c.\n+\tTest _cvtss_sh, _mm_cvtps_ph and _mm256_cvtps_ph.\n+\n+\t* gcc.target/i386/sse-22.c: Add fsgsbase,rdrnd,f16c.\n+\tTest _cvtss_sh, _mm_cvtps_ph and _mm256_cvtps_ph.\n+\n+\t* gcc.target/i386/sse-23.c (__builtin_ia32_vcvtps2ph): New.\n+\t(__builtin_ia32_vcvtps2ph256): Likewise.\n+\tAdd fsgsbase,rdrnd,f16c.\n+\n+\t* lib/target-supports.exp (check_effective_target_f16c): New.\n+\n 2010-07-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/guality/nrv-1.c: New test."}, {"sha": "729706852e2374161206a8582b4c36983b61ed55", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mlwp\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, xopintrin.h, abmintrin.h,\n    lwpintrin.h, popcntintrin.h and mm3dnow.h are usable with"}, {"sha": "75515efb42b55bd0280d29f045bdc34aeb2f91a0", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mlwp\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, xopintrin.h, abmintrin.h,\n    lwpintrin.h, popcntintrin.h and mm3dnow.h are usable with"}, {"sha": "af7f32c5f4f2f970123155cf7f00c8c0209ad259", "filename": "gcc/testsuite/gcc.target/i386/f16c-check.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ff16c-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ff16c-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ff16c-check.h?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,30 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include \"cpuid.h\"\n+#include \"m256-check.h\"\n+\n+static void f16c_test (void);\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run F16C test only if host has F16C support.  */\n+  if (ecx & bit_F16C)\n+    {\n+      f16c_test ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "c4808e9683b6e4f91a758a402b428e5cb68ef4c1", "filename": "gcc/testsuite/gcc.target/i386/rdfsbase-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdfsbase-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdfsbase-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdfsbase-1.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mfsgsbase\" } */\n+/* { dg-final { scan-assembler \"rdfsbase\\[ \\t]+(%|)eax\" } } */\n+\n+#include <immintrin.h>\n+\n+unsigned int\n+read_fs_base32 (void)\n+{\n+  return _readfsbase_u32 ();\n+}"}, {"sha": "40b8f4a999f02e4d5deab8f9a1c26ea73fe63931", "filename": "gcc/testsuite/gcc.target/i386/rdfsbase-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdfsbase-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdfsbase-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdfsbase-2.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mfsgsbase\" } */\n+/* { dg-final { scan-assembler \"rdfsbase\\[ \\t]+(%|)rax\" } } */\n+\n+#include <immintrin.h>\n+\n+unsigned long long\n+read_fs_base64 (void)\n+{\n+  return _readfsbase_u64 ();\n+}"}, {"sha": "1e5a302085ecb29c95a59109c1fbc7537dced238", "filename": "gcc/testsuite/gcc.target/i386/rdgsbase-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdgsbase-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdgsbase-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdgsbase-1.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mfsgsbase\" } */\n+/* { dg-final { scan-assembler \"rdgsbase\\[ \\t]+(%|)eax\" } } */\n+\n+#include <immintrin.h>\n+\n+unsigned int\n+read_gs_base32 (void)\n+{\n+  return _readgsbase_u32 ();\n+}"}, {"sha": "1321582506954787907fc62287b0709ecdff722e", "filename": "gcc/testsuite/gcc.target/i386/rdgsbase-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdgsbase-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdgsbase-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdgsbase-2.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mfsgsbase\" } */\n+/* { dg-final { scan-assembler \"rdgsbase\\[ \\t]+(%|)rax\" } } */\n+\n+#include <immintrin.h>\n+\n+unsigned long long\n+read_gs_base64 (void)\n+{\n+  return _readgsbase_u64 ();\n+}"}, {"sha": "9af6bc563d5839910213d209e3d3093694e15569", "filename": "gcc/testsuite/gcc.target/i386/rdrand-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-1.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mrdrnd \" } */\n+/* { dg-final { scan-assembler \"rdrand\\[ \\t]+(%|)ax\" } } */\n+\n+#include <immintrin.h>\n+\n+unsigned short\n+read_rdrand16 (void)\n+{\n+  return _rdrand_u16 ();\n+}"}, {"sha": "f35676390c1b0063f18f666ce02f0a4f0b474881", "filename": "gcc/testsuite/gcc.target/i386/rdrand-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-2.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mrdrnd \" } */\n+/* { dg-final { scan-assembler \"rdrand\\[ \\t]+(%|)eax\" } } */\n+\n+#include <immintrin.h>\n+\n+unsigned int\n+read_rdrand32 (void)\n+{\n+  return _rdrand_u32 ();\n+}"}, {"sha": "b18e2e8a048505debdd24e0df3842e5863f2be73", "filename": "gcc/testsuite/gcc.target/i386/rdrand-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Frdrand-3.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mrdrnd \" } */\n+/* { dg-final { scan-assembler \"rdrand\\[ \\t]+(%|)rax\" } } */\n+\n+#include <immintrin.h>\n+\n+unsigned long long\n+read_rdrand64 (void)\n+{\n+  return _rdrand_u64 ();\n+}"}, {"sha": "2d50f41d5403093aba3ca7bfa3cc575fd1e494a0", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -2,7 +2,7 @@\n    abmintrin.h, lwpintrin.h, popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlwp\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "01809d0cffa6c7e5e02860e91e6f018b50efae66", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mlwp\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <mm_malloc.h>\n \n@@ -50,6 +50,8 @@\n #define __builtin_ia32_vinsertf128_si256(X, Y, C) __builtin_ia32_vinsertf128_si256(X, Y, 1)\n #define __builtin_ia32_roundpd256(V, M) __builtin_ia32_roundpd256(V, 1)\n #define __builtin_ia32_roundps256(V, M) __builtin_ia32_roundps256(V, 1)\n+#define __builtin_ia32_vcvtps2ph(A, I) __builtin_ia32_vcvtps2ph(A, 1)\n+#define __builtin_ia32_vcvtps2ph256(A, I) __builtin_ia32_vcvtps2ph256(A, 1)\n \n /* wmmintrin.h */\n #define __builtin_ia32_aeskeygenassist128(X, C) __builtin_ia32_aeskeygenassist128(X, 1)"}, {"sha": "d256e68c4be13ba192f049c6e656e05edab2706a", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mxop -msse4a -maes -mpclmul -mpopcnt -mabm -mlwp\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mxop -msse4a -maes -mpclmul -mpopcnt -mabm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <mm_malloc.h>\n \n@@ -89,6 +89,9 @@ test_2 (_mm256_insert_epi64, __m256i, __m256i, long long, 1)\n #endif\n test_1 (_mm256_round_pd, __m256d, __m256d, 1)\n test_1 (_mm256_round_ps, __m256, __m256, 1)\n+test_1 (_cvtss_sh, unsigned short, float, 1)\n+test_1 (_mm_cvtps_ph, __m128i, __m128, 1)\n+test_1 (_mm256_cvtps_ph, __m128i, __m256, 1)\n \n /* wmmintrin.h */\n test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)"}, {"sha": "bb0472d471cd5c942a9465f40fd5358bd5398c93", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -39,7 +39,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"mmx,3dnow,sse,sse2,sse3,ssse3,sse4.1,sse4.2,sse4a,aes,pclmul,xop,popcnt,abm,lwp\")\n+#pragma GCC target (\"mmx,3dnow,sse,sse2,sse3,ssse3,sse4.1,sse4.2,sse4a,aes,pclmul,xop,popcnt,abm,lwp,fsgsbase,rdrnd,f16c\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -179,3 +179,12 @@ test_2 ( __lwpins32, unsigned char, unsigned int, unsigned int, 1)\n test_2 ( __lwpval64, void, unsigned long long, unsigned int, 1)\n test_2 ( __lwpins64, unsigned char, unsigned long long, unsigned int, 1)\n #endif\n+\n+/* immintrin.h (F16C).  */\n+#ifdef DIFFERENT_PRAGMAS\n+#pragma GCC target (\"f16c\")\n+#endif\n+#include <x86intrin.h>\n+test_1 (_cvtss_sh, unsigned short, float, 1)\n+test_1 (_mm_cvtps_ph, __m128i, __m128, 1)\n+test_1 (_mm256_cvtps_ph, __m128i, __m256, 1)"}, {"sha": "0e15bb25418f45d352910a49d0223395362fe1d1", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -126,6 +126,8 @@\n #define __builtin_ia32_vinsertf128_si256(X, Y, C) __builtin_ia32_vinsertf128_si256(X, Y, 1)\n #define __builtin_ia32_roundpd256(V, M) __builtin_ia32_roundpd256(V, 1)\n #define __builtin_ia32_roundps256(V, M) __builtin_ia32_roundps256(V, 1)\n+#define __builtin_ia32_vcvtps2ph(A, I) __builtin_ia32_vcvtps2ph(A, 1)\n+#define __builtin_ia32_vcvtps2ph256(A, I) __builtin_ia32_vcvtps2ph256(A, 1)\n \n /* xopintrin.h */\n #define __builtin_ia32_vprotbi(A, B) __builtin_ia32_vprotbi(A,1)\n@@ -139,7 +141,7 @@\n #define __builtin_ia32_lwpins32(D2, D1, F) __builtin_ia32_lwpins32 (D2, D1, 1)\n #define __builtin_ia32_lwpins64(D2, D1, F) __builtin_ia32_lwpins64 (D2, D1, 1)\n \n-#pragma GCC target (\"3dnow,sse4,sse4a,aes,pclmul,xop,abm,popcnt,lwp\")\n+#pragma GCC target (\"3dnow,sse4,sse4a,aes,pclmul,xop,abm,popcnt,lwp,fsgsbase,rdrnd,f16c\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}, {"sha": "3b46671f0566939517c202847b141aa7e800ebe6", "filename": "gcc/testsuite/gcc.target/i386/vcvtph2ps-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtph2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtph2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtph2ps-1.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target f16c } */\n+/* { dg-options \"-O2 -mf16c\" } */\n+\n+#include \"f16c-check.h\"\n+\n+static void\n+f16c_test (void)\n+{\n+  union128i_w val; \n+  union128 res;\n+  float exp[4];\n+\n+  exp[0] = 1;\n+  exp[1] = -2;\n+  exp[2] = -1;\n+  exp[3] = 2;\n+\n+  val.a[0] = 0x3c00;\n+  val.a[1] = 0xc000;\n+  val.a[2] = 0xbc00;\n+  val.a[3] = 0x4000;\n+\n+  res.x = _mm_cvtph_ps (val.x);\n+\n+  if (check_union128 (res, exp))\n+    abort ();\n+}"}, {"sha": "1523deaa1d55e4c3c8db95b3c8cd9ca77d4046a1", "filename": "gcc/testsuite/gcc.target/i386/vcvtph2ps-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtph2ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtph2ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtph2ps-2.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target f16c } */\n+/* { dg-options \"-O2 -mf16c\" } */\n+\n+#include \"f16c-check.h\"\n+\n+static void\n+f16c_test (void)\n+{\n+  union256 res;\n+  union128i_w val; \n+  float exp[8];\n+\n+  exp[0] = 1;\n+  exp[1] = 2;\n+  exp[2] = 4;\n+  exp[3] = 8;\n+  exp[4] = -1;\n+  exp[5] = -2;\n+  exp[6] = -4;\n+  exp[7] = -8;\n+\n+  val.a[0] = 0x3c00;\n+  val.a[1] = 0x4000;\n+  val.a[2] = 0x4400;\n+  val.a[3] = 0x4800;\n+  val.a[4] = 0xbc00;\n+  val.a[5] = 0xc000;\n+  val.a[6] = 0xc400;\n+  val.a[7] = 0xc800;\n+\n+  res.x = _mm256_cvtph_ps (val.x);\n+\n+  if (check_union256 (res, exp))\n+    abort ();\n+}"}, {"sha": "49b61f678c48763b9b141767dc575cb56943f011", "filename": "gcc/testsuite/gcc.target/i386/vcvtph2ps-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtph2ps-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtph2ps-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtph2ps-3.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target f16c } */\n+/* { dg-options \"-O2 -mf16c\" } */\n+\n+#include \"f16c-check.h\"\n+\n+static void\n+f16c_test (void)\n+{\n+  unsigned short val = 0xc000;\n+  float exp = -2;\n+  float res;\n+\n+  res = _cvtsh_ss (val);\n+\n+  if (res != exp)\n+    abort ();\n+}"}, {"sha": "c114c98ad8d6d63c108065bf65e4687bd23d7f6d", "filename": "gcc/testsuite/gcc.target/i386/vcvtps2ph-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtps2ph-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtps2ph-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtps2ph-1.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target f16c } */\n+/* { dg-options \"-O2 -mf16c\" } */\n+\n+#include \"f16c-check.h\"\n+\n+static void\n+f16c_test (void)\n+{\n+  union128 val;\n+  union128i_w res; \n+  short exp[8];\n+\n+  val.a[0] = 1;\n+  val.a[1] = -2;\n+  val.a[2] = -1;\n+  val.a[3] = 2;\n+\n+  exp[0] = 0x3c00;\n+  exp[1] = 0xc000;\n+  exp[2] = 0xbc00;\n+  exp[3] = 0x4000;\n+  exp[4] = 0;\n+  exp[5] = 0;\n+  exp[6] = 0;\n+  exp[7] = 0;\n+\n+  res.x = _mm_cvtps_ph (val.x, 0);\n+\n+  if (check_union128i_w (res, exp))\n+    abort ();\n+}"}, {"sha": "57436ae86bf80e2f0c639c82d8f4097375a02fa2", "filename": "gcc/testsuite/gcc.target/i386/vcvtps2ph-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtps2ph-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtps2ph-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtps2ph-2.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target f16c } */\n+/* { dg-options \"-O2 -mf16c\" } */\n+\n+#include \"f16c-check.h\"\n+\n+static void\n+f16c_test (void)\n+{\n+  union256 val;\n+  union128i_w res; \n+  short exp[8];\n+\n+  val.a[0] = 1;\n+  val.a[1] = 2;\n+  val.a[2] = 4;\n+  val.a[3] = 8;\n+  val.a[4] = -1;\n+  val.a[5] = -2;\n+  val.a[6] = -4;\n+  val.a[7] = -8;\n+\n+  exp[0] = 0x3c00;\n+  exp[1] = 0x4000;\n+  exp[2] = 0x4400;\n+  exp[3] = 0x4800;\n+  exp[4] = 0xbc00;\n+  exp[5] = 0xc000;\n+  exp[6] = 0xc400;\n+  exp[7] = 0xc800;\n+\n+  res.x = _mm256_cvtps_ph (val.x, 0);\n+\n+  if (check_union128i_w (res, exp))\n+    abort ();\n+}"}, {"sha": "3b7cb5c5ca03648546d425711f6f3c87bc4fc867", "filename": "gcc/testsuite/gcc.target/i386/vcvtps2ph-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtps2ph-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtps2ph-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvcvtps2ph-3.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target f16c } */\n+/* { dg-options \"-O2 -mf16c\" } */\n+\n+#include \"f16c-check.h\"\n+\n+static void\n+f16c_test (void)\n+{\n+  float val = -2;\n+  unsigned short exp = 0xc000;\n+  unsigned short res;\n+\n+  res = _cvtss_sh (val, 0);\n+\n+  if (res != exp)\n+    abort ();\n+}"}, {"sha": "4b849269bb2342c8ea949a1ef4e9c8bb7ad6fb47", "filename": "gcc/testsuite/gcc.target/i386/wrfsbase-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrfsbase-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrfsbase-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrfsbase-1.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mfsgsbase\" } */\n+/* { dg-final { scan-assembler \"wrfsbase\\[ \\t]+(%|)edi\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+write_fs_base32 (unsigned int base)\n+{\n+  _writefsbase_u32 (base);\n+}"}, {"sha": "5e1762dfa3d07d1aae1bfbf6b41bcde957ab1fbc", "filename": "gcc/testsuite/gcc.target/i386/wrfsbase-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrfsbase-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrfsbase-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrfsbase-2.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mfsgsbase\" } */\n+/* { dg-final { scan-assembler \"wrfsbase\\[ \\t]+(%|)rdi\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+write_fs_base64 (unsigned long long base)\n+{\n+  _writefsbase_u64 (base);\n+}"}, {"sha": "15d2d7ffb9c0c74930dffbf6636f5d9f65d2925c", "filename": "gcc/testsuite/gcc.target/i386/wrgsbase-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrgsbase-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrgsbase-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrgsbase-1.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mfsgsbase\" } */\n+/* { dg-final { scan-assembler \"wrgsbase\\[ \\t]+(%|)edi\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+write_gs_base32 (unsigned int base)\n+{\n+  _writegsbase_u32 (base);\n+}"}, {"sha": "0a33d770710001d0e66d5f22c9f4133a7ecf97ca", "filename": "gcc/testsuite/gcc.target/i386/wrgsbase-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrgsbase-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrgsbase-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwrgsbase-2.c?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mfsgsbase\" } */\n+/* { dg-final { scan-assembler \"wrgsbase\\[ \\t]+(%|)rdi\" } } */\n+\n+#include <immintrin.h>\n+\n+void\n+write_gs_base64 (unsigned long long base)\n+{\n+  _writegsbase_u64 (base);\n+}"}, {"sha": "798a27d73dc097bebd772bbcbfc0109f38891846", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ee89d5fb78b48b62b507a29d3a576c63ae22505/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4ee89d5fb78b48b62b507a29d3a576c63ae22505", "patch": "@@ -3273,6 +3273,19 @@ proc check_effective_target_sse2 { } {\n     } \"-O2 -msse2\" ]\n }\n \n+# Return 1 if F16C instructions can be compiled.\n+\n+proc check_effective_target_f16c { } {\n+    return [check_no_compiler_messages f16c object {\n+\t#include \"immintrin.h\"\n+\tfloat\n+\tfoo (unsigned short val)\n+\t{\n+\t  return _cvtsh_ss (val);\n+\t}\n+    } \"-O2 -mf16c\" ]\n+}\n+\n # Return 1 if C wchar_t type is compatible with char16_t.\n \n proc check_effective_target_wchar_t_char16_t_compatible { } {"}]}