{"sha": "c79d8335fd5905324b32d65cc0115986301f07eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc5ZDgzMzVmZDU5MDUzMjRiMzJkNjVjYzAxMTU5ODYzMDFmMDdlYg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T04:48:38Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T15:11:24Z"}, "message": "Adjust gimple-ssa-sprintf.c for irange API.\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-sprintf.c (get_int_range): Adjust for irange API.\n\t(format_integer): Same.\n\t(handle_printf_call): Same.", "tree": {"sha": "5815352a4ef6096f937cd48a02562bdb217181ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5815352a4ef6096f937cd48a02562bdb217181ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c79d8335fd5905324b32d65cc0115986301f07eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79d8335fd5905324b32d65cc0115986301f07eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79d8335fd5905324b32d65cc0115986301f07eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79d8335fd5905324b32d65cc0115986301f07eb/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ac51bdf63b0e17d1b9974f30303fb24e3cbc83d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac51bdf63b0e17d1b9974f30303fb24e3cbc83d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ac51bdf63b0e17d1b9974f30303fb24e3cbc83d"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "70b031fe7b94c656fef11a00f94598eb4fbe4554", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79d8335fd5905324b32d65cc0115986301f07eb/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79d8335fd5905324b32d65cc0115986301f07eb/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=c79d8335fd5905324b32d65cc0115986301f07eb", "patch": "@@ -1070,7 +1070,7 @@ get_int_range (tree arg, HOST_WIDE_INT *pmin, HOST_WIDE_INT *pmax,\n \t  const value_range_equiv *vr\n \t    = CONST_CAST (class vr_values *, vr_values)->get_value_range (arg);\n \n-\t  if (range_int_cst_p (vr))\n+\t  if (!vr->undefined_p () && !vr->varying_p () && !vr->symbolic_p ())\n \t    {\n \t      HOST_WIDE_INT type_min\n \t\t= (TYPE_UNSIGNED (argtype)\n@@ -1079,8 +1079,11 @@ get_int_range (tree arg, HOST_WIDE_INT *pmin, HOST_WIDE_INT *pmax,\n \n \t      HOST_WIDE_INT type_max = tree_to_uhwi (TYPE_MAX_VALUE (argtype));\n \n-\t      *pmin = TREE_INT_CST_LOW (vr->min ());\n-\t      *pmax = TREE_INT_CST_LOW (vr->max ());\n+\t      tree type = TREE_TYPE (arg);\n+\t      tree tmin = wide_int_to_tree (type, vr->lower_bound ());\n+\t      tree tmax = wide_int_to_tree (type, vr->upper_bound ());\n+\t      *pmin = TREE_INT_CST_LOW (tmin);\n+\t      *pmax = TREE_INT_CST_LOW (tmax);\n \n \t      if (*pmin < *pmax)\n \t\t{\n@@ -1372,10 +1375,10 @@ format_integer (const directive &dir, tree arg, const vr_values *vr_values)\n       const value_range_equiv *vr\n \t= CONST_CAST (class vr_values *, vr_values)->get_value_range (arg);\n \n-      if (range_int_cst_p (vr))\n+      if (!vr->varying_p () && !vr->undefined_p () && !vr->symbolic_p ())\n \t{\n-\t  argmin = vr->min ();\n-\t  argmax = vr->max ();\n+\t  argmin = wide_int_to_tree (TREE_TYPE (arg), vr->lower_bound ());\n+\t  argmax = wide_int_to_tree (TREE_TYPE (arg), vr->upper_bound ());\n \n \t  /* Set KNOWNRANGE if the argument is in a known subrange\n \t     of the directive's type and neither width nor precision\n@@ -1388,11 +1391,7 @@ format_integer (const directive &dir, tree arg, const vr_values *vr_values)\n \t  res.argmin = argmin;\n \t  res.argmax = argmax;\n \t}\n-      else if (vr->kind () == VR_ANTI_RANGE)\n-\t{\n-\t  /* Handle anti-ranges if/when bug 71690 is resolved.  */\n-\t}\n-      else if (vr->varying_p () || vr->undefined_p ())\n+      else\n \t{\n \t  /* The argument here may be the result of promoting the actual\n \t     argument to int.  Try to determine the type of the actual\n@@ -4561,10 +4560,13 @@ handle_printf_call (gimple_stmt_iterator *gsi, const vr_values *vr_values)\n \t  const value_range_equiv *vr\n \t    = CONST_CAST (class vr_values *, vr_values)->get_value_range (size);\n \n-\t  if (range_int_cst_p (vr))\n+\t  if (!vr->undefined_p () && !vr->symbolic_p ())\n \t    {\n-\t      unsigned HOST_WIDE_INT minsize = TREE_INT_CST_LOW (vr->min ());\n-\t      unsigned HOST_WIDE_INT maxsize = TREE_INT_CST_LOW (vr->max ());\n+\t      tree type = TREE_TYPE (size);\n+\t      tree tmin = wide_int_to_tree (type, vr->lower_bound ());\n+\t      tree tmax = wide_int_to_tree (type, vr->upper_bound ());\n+\t      unsigned HOST_WIDE_INT minsize = TREE_INT_CST_LOW (tmin);\n+\t      unsigned HOST_WIDE_INT maxsize = TREE_INT_CST_LOW (tmax);\n \t      dstsize = warn_level < 2 ? maxsize : minsize;\n \n \t      if (minsize > target_int_max ())\n@@ -4578,13 +4580,6 @@ handle_printf_call (gimple_stmt_iterator *gsi, const vr_values *vr_values)\n \t      if (maxsize > target_int_max ())\n \t\tposunder4k = false;\n \t    }\n-\t  else if (vr->varying_p ())\n-\t    {\n-\t      /* POSIX requires snprintf to fail if DSTSIZE is greater\n-\t\t than INT_MAX.  Since SIZE's range is unknown, avoid\n-\t\t folding.  */\n-\t      posunder4k = false;\n-\t    }\n \n \t  /* The destination size is not constant.  If the function is\n \t     bounded (e.g., snprintf) a lower bound of zero doesn't"}]}