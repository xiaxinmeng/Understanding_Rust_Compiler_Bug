{"sha": "c18ff8a4486629c2b6c2ca1b1794e791408d3de5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE4ZmY4YTQ0ODY2MjljMmI2YzJjYTFiMTc5NGU3OTE0MDhkM2RlNQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2014-03-31T12:28:33Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2014-03-31T12:28:33Z"}, "message": "re PR middle-end/60647 (ICE in visit_ref_for_mod_analysis, at ipa-prop.c:2112)\n\n2014-03-31  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/60647\n\t* tree-sra.c (callsite_has_enough_arguments_p): Renamed to\n\tcallsite_arguments_match_p.  Updated all callers.  Also check types of\n\tcorresponding formal parameters and actual arguments.\n\t(not_all_callers_have_enough_arguments_p) Renamed to\n\tsome_callers_have_mismatched_arguments_p.\n\ntestsuite/\n\t* gcc.dg/pr60647-1.c: New test.\n\t* gcc.dg/pr60647-2.c: Likewise.\n\nFrom-SVN: r208957", "tree": {"sha": "eddb4661944401b0b4adcbf590f0e5471b19e160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eddb4661944401b0b4adcbf590f0e5471b19e160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c18ff8a4486629c2b6c2ca1b1794e791408d3de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18ff8a4486629c2b6c2ca1b1794e791408d3de5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c18ff8a4486629c2b6c2ca1b1794e791408d3de5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18ff8a4486629c2b6c2ca1b1794e791408d3de5/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9372710709817fe8d9a539475e993312f486b9a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9372710709817fe8d9a539475e993312f486b9a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9372710709817fe8d9a539475e993312f486b9a0"}], "stats": {"total": 105, "additions": 94, "deletions": 11}, "files": [{"sha": "6a94d8f1c8e0df0906a3820ffa857403471a3f59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18ff8a4486629c2b6c2ca1b1794e791408d3de5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18ff8a4486629c2b6c2ca1b1794e791408d3de5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c18ff8a4486629c2b6c2ca1b1794e791408d3de5", "patch": "@@ -1,3 +1,12 @@\n+2014-03-31  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/60647\n+\t* tree-sra.c (callsite_has_enough_arguments_p): Renamed to\n+\tcallsite_arguments_match_p.  Updated all callers.  Also check types of\n+\tcorresponding formal parameters and actual arguments.\n+\t(not_all_callers_have_enough_arguments_p) Renamed to\n+\tsome_callers_have_mismatched_arguments_p.\n+\n 2014-03-31  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \t* tree-inline.c (copy_loops): Add missed copy of 'safelen'."}, {"sha": "6fe9f36faef34ce4cc570a96b3cce0be44257711", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18ff8a4486629c2b6c2ca1b1794e791408d3de5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18ff8a4486629c2b6c2ca1b1794e791408d3de5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c18ff8a4486629c2b6c2ca1b1794e791408d3de5", "patch": "@@ -1,3 +1,9 @@\n+2014-03-31  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/60647\n+\t* gcc.dg/pr60647-1.c: New test.\n+\t* gcc.dg/pr60647-2.c: Likewise.\n+\n 2014-03-31  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/lto/pr55113_0.c: Skip also for 32bit multilib on x86_64."}, {"sha": "73ea85688075c07e590d9bb49b7b7568a33130e8", "filename": "gcc/testsuite/gcc.dg/pr60647-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18ff8a4486629c2b6c2ca1b1794e791408d3de5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60647-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18ff8a4486629c2b6c2ca1b1794e791408d3de5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60647-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60647-1.c?ref=c18ff8a4486629c2b6c2ca1b1794e791408d3de5", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct _wincore\n+{\n+  int y;\n+  int width;\n+};\n+int a;\n+static fn1 (dpy, winInfo) struct _XDisplay *dpy;\n+struct _wincore *winInfo;\n+{\n+  a = winInfo->width;\n+  fn2 ();\n+}\n+\n+static fn3 (dpy, winInfo, visrgn) struct _XDisplay *dpy;\n+{\n+  int b = fn1 (0, winInfo);\n+  fn4 (0, 0, visrgn);\n+}\n+\n+fn5 (event) struct _XEvent *event;\n+{\n+  fn3 (0, 0, 0);\n+}"}, {"sha": "ddeb117852386b4a9c1b6a731bd347d814ddcc79", "filename": "gcc/testsuite/gcc.dg/pr60647-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18ff8a4486629c2b6c2ca1b1794e791408d3de5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60647-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18ff8a4486629c2b6c2ca1b1794e791408d3de5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60647-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr60647-2.c?ref=c18ff8a4486629c2b6c2ca1b1794e791408d3de5", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct _wincore\n+{\n+  int width, height;\n+};\n+\n+static void\n+foo (void *dpy, struct _wincore *winInfo, int offset)\n+{\n+  fn1 (winInfo->height);\n+}\n+\n+static void\n+bar (void *dpy, int winInfo, int *visrgn)\n+{\n+  ((void (*) (void *, int, int)) foo) ((void *) 0, winInfo, 0);  /* { dg-warning \"function called through a non-compatible type\" } */\n+  fn2 (0, 0, visrgn);\n+}\n+\n+void\n+baz (void *dpy, int win, int prop)\n+{\n+  bar ((void *) 0, 0, (int *) 0);\n+}"}, {"sha": "ffef13d16ff92e7df029193ecbaff7c9ceef14df", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18ff8a4486629c2b6c2ca1b1794e791408d3de5/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18ff8a4486629c2b6c2ca1b1794e791408d3de5/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=c18ff8a4486629c2b6c2ca1b1794e791408d3de5", "patch": "@@ -1234,12 +1234,26 @@ asm_visit_addr (gimple, tree op, tree, void *)\n }\n \n /* Return true iff callsite CALL has at least as many actual arguments as there\n-   are formal parameters of the function currently processed by IPA-SRA.  */\n+   are formal parameters of the function currently processed by IPA-SRA and\n+   that their types match.  */\n \n static inline bool\n-callsite_has_enough_arguments_p (gimple call)\n+callsite_arguments_match_p (gimple call)\n {\n-  return gimple_call_num_args (call) >= (unsigned) func_param_count;\n+  if (gimple_call_num_args (call) < (unsigned) func_param_count)\n+    return false;\n+\n+  tree parm;\n+  int i;\n+  for (parm = DECL_ARGUMENTS (current_function_decl), i = 0;\n+       parm;\n+       parm = DECL_CHAIN (parm), i++)\n+    {\n+      tree arg = gimple_call_arg (call, i);\n+      if (!useless_type_conversion_p (TREE_TYPE (parm), TREE_TYPE (arg)))\n+\treturn false;\n+    }\n+  return true;\n }\n \n /* Scan function and look for interesting expressions and create access\n@@ -1294,7 +1308,7 @@ scan_function (void)\n \t\t      if (recursive_call_p (current_function_decl, dest))\n \t\t\t{\n \t\t\t  encountered_recursive_call = true;\n-\t\t\t  if (!callsite_has_enough_arguments_p (stmt))\n+\t\t\t  if (!callsite_arguments_match_p (stmt))\n \t\t\t    encountered_unchangable_recursive_call = true;\n \t\t\t}\n \t\t    }\n@@ -4750,16 +4764,17 @@ sra_ipa_reset_debug_stmts (ipa_parm_adjustment_vec adjustments)\n     }\n }\n \n-/* Return false iff all callers have at least as many actual arguments as there\n-   are formal parameters in the current function.  */\n+/* Return false if all callers have at least as many actual arguments as there\n+   are formal parameters in the current function and that their types\n+   match.  */\n \n static bool\n-not_all_callers_have_enough_arguments_p (struct cgraph_node *node,\n-\t\t\t\t\t void *data ATTRIBUTE_UNUSED)\n+some_callers_have_mismatched_arguments_p (struct cgraph_node *node,\n+\t\t\t\t\t  void *data ATTRIBUTE_UNUSED)\n {\n   struct cgraph_edge *cs;\n   for (cs = node->callers; cs; cs = cs->next_caller)\n-    if (!callsite_has_enough_arguments_p (cs->call_stmt))\n+    if (!callsite_arguments_match_p (cs->call_stmt))\n       return true;\n \n   return false;\n@@ -4970,12 +4985,13 @@ ipa_early_sra (void)\n       goto simple_out;\n     }\n \n-  if (cgraph_for_node_and_aliases (node, not_all_callers_have_enough_arguments_p,\n+  if (cgraph_for_node_and_aliases (node,\n+\t\t\t\t   some_callers_have_mismatched_arguments_p,\n \t\t\t\t   NULL, true))\n     {\n       if (dump_file)\n \tfprintf (dump_file, \"There are callers with insufficient number of \"\n-\t\t \"arguments.\\n\");\n+\t\t \"arguments or arguments with type mismatches.\\n\");\n       goto simple_out;\n     }\n "}]}