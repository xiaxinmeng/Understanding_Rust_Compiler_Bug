{"sha": "91f993b7e31ce85676148dca180bc0d827d4245e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmOTkzYjdlMzFjZTg1Njc2MTQ4ZGNhMTgwYmMwZDgyN2Q0MjQ1ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-06T02:29:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-12T02:06:43Z"}, "message": "analyzer: use ultimate alias target at calls (PR 93288)\n\nPR analyzer/93288 reports an ICE in a C++ testcase when calling a\nconstructor.\n\nThe issue is that when building the supergraph, we encounter the\ncgraph edge to \"__ct_comp \", the DECL_COMPLETE_CONSTRUCTOR_P, and\nthis node's DECL_STRUCT_FUNCTION has a NULL CFG, which the analyzer\nreads through, leading to the ICE.\n\nThis patch reworks function and fndecl lookup at calls throughout the\nanalyzer so that it looks for the ultimate_alias_target of the callee.\nIn the case above, this means using the \"__ct_base \" for the ctor,\nwhich has a CFG, fixing the ICE.\n\nGetting this right allows for some simple C++ cases involving ctors to\nwork, so the patch also adds some test coverage for that.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93288\n\t* analysis-plan.cc (analysis_plan::use_summary_p): Look through\n\tthe ultimate_alias_target when getting the called function.\n\t* engine.cc (exploded_node::on_stmt): Rename second \"ctxt\" to\n\t\"sm_ctxt\".  Use the region_model's get_fndecl_for_call rather than\n\tgimple_call_fndecl.\n\t* region-model.cc (region_model::get_fndecl_for_call): Use\n\tultimate_alias_target on fndecl.\n\t* supergraph.cc (get_ultimate_function_for_cgraph_edge): New\n\tfunction.\n\t(supergraph_call_edge): Use it when rejecting edges without\n\tfunctions.\n\t(supergraph::supergraph): Use it to get the function for the\n\tcgraph_edge when building interprocedural superedges.\n\t(callgraph_superedge::get_callee_function):  Use it.\n\t* supergraph.h (supergraph::get_num_snodes): Make param const.\n\t(supergraph::function_to_num_snodes_t): Make first type param\n\tconst.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93288\n\t* g++.dg/analyzer/malloc.C: Add test coverage for a double-free\n\tcalled in a constructor.\n\t* g++.dg/analyzer/pr93288.C: New test.", "tree": {"sha": "0b46c2995392b7a5f7721524ae2c42f91a8b0ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b46c2995392b7a5f7721524ae2c42f91a8b0ce5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91f993b7e31ce85676148dca180bc0d827d4245e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f993b7e31ce85676148dca180bc0d827d4245e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f993b7e31ce85676148dca180bc0d827d4245e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f993b7e31ce85676148dca180bc0d827d4245e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9e067f98b0c4f57d8acd60526b6fa11a1d109e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e067f98b0c4f57d8acd60526b6fa11a1d109e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9e067f98b0c4f57d8acd60526b6fa11a1d109e5"}], "stats": {"total": 107, "additions": 91, "deletions": 16}, "files": [{"sha": "eda1052e4ff3d3c9eb324d2be1d5862cce99eb43", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=91f993b7e31ce85676148dca180bc0d827d4245e", "patch": "@@ -1,3 +1,24 @@\n+2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93288\n+\t* analysis-plan.cc (analysis_plan::use_summary_p): Look through\n+\tthe ultimate_alias_target when getting the called function.\n+\t* engine.cc (exploded_node::on_stmt): Rename second \"ctxt\" to\n+\t\"sm_ctxt\".  Use the region_model's get_fndecl_for_call rather than\n+\tgimple_call_fndecl.\n+\t* region-model.cc (region_model::get_fndecl_for_call): Use\n+\tultimate_alias_target on fndecl.\n+\t* supergraph.cc (get_ultimate_function_for_cgraph_edge): New\n+\tfunction.\n+\t(supergraph_call_edge): Use it when rejecting edges without\n+\tfunctions.\n+\t(supergraph::supergraph): Use it to get the function for the\n+\tcgraph_edge when building interprocedural superedges.\n+\t(callgraph_superedge::get_callee_function):  Use it.\n+\t* supergraph.h (supergraph::get_num_snodes): Make param const.\n+\t(supergraph::function_to_num_snodes_t): Make first type param\n+\tconst.\n+\n 2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93374"}, {"sha": "3c8b10b331434ae5c13b78310129add49af409af", "filename": "gcc/analyzer/analysis-plan.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2Fanalysis-plan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2Fanalysis-plan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalysis-plan.cc?ref=91f993b7e31ce85676148dca180bc0d827d4245e", "patch": "@@ -120,7 +120,11 @@ analysis_plan::use_summary_p (const cgraph_edge *edge) const\n \n   /* Require the callee to be sufficiently complex to be worth\n      summarizing.  */\n-  if ((int)m_sg.get_num_snodes (callee->get_fun ())\n+  const function *fun\n+    = const_cast <cgraph_node *> (callee)->ultimate_alias_target ()->get_fun ();\n+  /* TODO(stage1): can ultimate_alias_target be made const?  */\n+\n+  if ((int)m_sg.get_num_snodes (fun)\n       < param_analyzer_min_snodes_for_call_summary)\n     return false;\n "}, {"sha": "7860da0572a1b320ca3bf5e648057757b33494b4", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=91f993b7e31ce85676148dca180bc0d827d4245e", "patch": "@@ -1044,19 +1044,19 @@ exploded_node::on_stmt (exploded_graph &eg,\n       const sm_state_map *old_smap\n \t= old_state.m_checker_states[sm_idx];\n       sm_state_map *new_smap = state->m_checker_states[sm_idx];\n-      impl_sm_context ctxt (eg, sm_idx, sm, this, &old_state, state,\n-\t\t\t    change,\n-\t\t\t    old_smap, new_smap);\n+      impl_sm_context sm_ctxt (eg, sm_idx, sm, this, &old_state, state,\n+\t\t\t       change,\n+\t\t\t       old_smap, new_smap);\n       /* Allow the state_machine to handle the stmt.  */\n-      if (sm.on_stmt (&ctxt, snode, stmt))\n+      if (sm.on_stmt (&sm_ctxt, snode, stmt))\n \tunknown_side_effects = false;\n       else\n \t{\n \t  /* For those stmts that were not handled by the state machine.  */\n \t  if (const gcall *call = dyn_cast <const gcall *> (stmt))\n \t    {\n-\t      tree callee_fndecl = gimple_call_fndecl (call);\n-\t      // TODO: maybe we can be smarter about handling function pointers?\n+\t      tree callee_fndecl\n+\t\t= state->m_region_model->get_fndecl_for_call (call, &ctxt);\n \n \t      if (!fndecl_has_gimple_body_p (callee_fndecl))\n \t\tnew_smap->purge_for_unknown_fncall (eg, sm, call, callee_fndecl,"}, {"sha": "ae810f5eb4b64d59b668e7194435520ea4295441", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=91f993b7e31ce85676148dca180bc0d827d4245e", "patch": "@@ -6676,7 +6676,10 @@ region_model::get_fndecl_for_call (const gcall *call,\n       if (code)\n \t{\n \t  tree fn_decl = code->get_tree_for_child_region (fn_rid);\n-\t  return fn_decl;\n+\t  const cgraph_node *ultimate_node\n+\t    = cgraph_node::get (fn_decl)->ultimate_alias_target ();\n+\t  if (ultimate_node)\n+\t    return ultimate_node->decl;\n \t}\n     }\n "}, {"sha": "fb4dbdfd8b9994d19ae830bd076d3d4394fcfc33", "filename": "gcc/analyzer/supergraph.cc", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2Fsupergraph.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2Fsupergraph.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.cc?ref=91f993b7e31ce85676148dca180bc0d827d4245e", "patch": "@@ -56,6 +56,18 @@ along with GCC; see the file COPYING3.  If not see\n \n namespace ana {\n \n+/* Get the function of the ultimate alias target being called at EDGE,\n+   if any.  */\n+\n+static function *\n+get_ultimate_function_for_cgraph_edge (cgraph_edge *edge)\n+{\n+  cgraph_node *ultimate_node = edge->callee->ultimate_alias_target ();\n+  if (!ultimate_node)\n+    return NULL;\n+  return ultimate_node->get_fun ();\n+}\n+\n /* Get the cgraph_edge, but only if there's an underlying function body.  */\n \n cgraph_edge *\n@@ -69,7 +81,7 @@ supergraph_call_edge (function *fun, gimple *stmt)\n     return NULL;\n   if (!edge->callee)\n     return NULL; /* e.g. for a function pointer.  */\n-  if (!edge->callee->get_fun ())\n+  if (!get_ultimate_function_for_cgraph_edge (edge))\n     return NULL;\n   return edge;\n }\n@@ -178,8 +190,10 @@ supergraph::supergraph (logger *logger)\n \t{\n \t  cgraph_edge *edge = (*iter).first;\n \t  supernode *caller_prev_supernode = (*iter).second;\n-\t  basic_block callee_cfg_block\n-\t    = ENTRY_BLOCK_PTR_FOR_FN (edge->callee->get_fun ());\n+\t  function* callee_fn = get_ultimate_function_for_cgraph_edge (edge);\n+\t  if (!callee_fn || !callee_fn->cfg)\n+\t    continue;\n+\t  basic_block callee_cfg_block = ENTRY_BLOCK_PTR_FOR_FN (callee_fn);\n \t  supernode *callee_supernode\n \t    = *m_bb_to_initial_node.get (callee_cfg_block);\n \t  call_superedge *sedge\n@@ -199,8 +213,10 @@ supergraph::supergraph (logger *logger)\n \t{\n \t  cgraph_edge *edge = (*iter).first;\n \t  supernode *caller_next_supernode = (*iter).second;\n-\t  basic_block callee_cfg_block\n-\t    = EXIT_BLOCK_PTR_FOR_FN (edge->callee->get_fun ());\n+\t  function* callee_fn = get_ultimate_function_for_cgraph_edge (edge);\n+\t  if (!callee_fn || !callee_fn->cfg)\n+\t    continue;\n+\t  basic_block callee_cfg_block = EXIT_BLOCK_PTR_FOR_FN (callee_fn);\n \t  supernode *callee_supernode\n \t    = *m_bb_to_initial_node.get (callee_cfg_block);\n \t  return_superedge *sedge\n@@ -840,7 +856,7 @@ callgraph_superedge::dump_label_to_pp (pretty_printer *pp,\n function *\n callgraph_superedge::get_callee_function () const\n {\n-  return m_cedge->callee->get_fun ();\n+  return get_ultimate_function_for_cgraph_edge (m_cedge);\n }\n \n /* Get the calling function at this interprocedural call/return edge.  */"}, {"sha": "2c94f0544ce24748d53520ec0c833033f50ba170", "filename": "gcc/analyzer/supergraph.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2Fsupergraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Fanalyzer%2Fsupergraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsupergraph.h?ref=91f993b7e31ce85676148dca180bc0d827d4245e", "patch": "@@ -156,7 +156,7 @@ class supergraph : public digraph<supergraph_traits>\n     return m_nodes[idx];\n   }\n \n-  unsigned get_num_snodes (function *fun) const\n+  unsigned get_num_snodes (const function *fun) const\n   {\n     function_to_num_snodes_t &map\n       = const_cast <function_to_num_snodes_t &>(m_function_to_num_snodes);\n@@ -201,7 +201,7 @@ class supergraph : public digraph<supergraph_traits>\n   typedef ordered_hash_map<gimple *, supernode *> stmt_to_node_t;\n   stmt_to_node_t m_stmt_to_node_t;\n \n-  typedef hash_map<function *, unsigned> function_to_num_snodes_t;\n+  typedef hash_map<const function *, unsigned> function_to_num_snodes_t;\n   function_to_num_snodes_t m_function_to_num_snodes;\n };\n "}, {"sha": "e7e630bdb7417d87487ab437a128ecd635077c11", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91f993b7e31ce85676148dca180bc0d827d4245e", "patch": "@@ -1,3 +1,10 @@\n+2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93288\n+\t* g++.dg/analyzer/malloc.C: Add test coverage for a double-free\n+\tcalled in a constructor.\n+\t* g++.dg/analyzer/pr93288.C: New test.\n+\n 2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93212"}, {"sha": "76baab982229c5697c6d98b7aaa8640a268327ee", "filename": "gcc/testsuite/g++.dg/analyzer/malloc.C", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fmalloc.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fmalloc.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fmalloc.C?ref=91f993b7e31ce85676148dca180bc0d827d4245e", "patch": "@@ -7,3 +7,19 @@ void test_1 (void *ptr)\n   free (ptr);\n   free (ptr); /* { dg-warning \"double-'free' of 'ptr'\" } */\n }\n+\n+/* Test of double-free in ctor.  */\n+\n+struct s2\n+{\n+  s2 (void *v)\n+  {\n+    free (v); // { dg-warning \"double-'free' of 'v'\" }\n+  }\n+};\n+\n+void test_2 (void *ptr)\n+{\n+  free (ptr); // { dg-message \"first 'free' here\" }\n+  s2 a (ptr); // { dg-message \"passing freed pointer 'ptr' in call to 's2::s2' from 'test_2'\" }\n+}"}, {"sha": "1798fed805f6562d28a2dcc5575148ec68ff76e6", "filename": "gcc/testsuite/g++.dg/analyzer/pr93288.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93288.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f993b7e31ce85676148dca180bc0d827d4245e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93288.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr93288.C?ref=91f993b7e31ce85676148dca180bc0d827d4245e", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+\n+struct a {\n+  a();\n+};\n+class foo {\n+  a b;\n+} c;"}]}