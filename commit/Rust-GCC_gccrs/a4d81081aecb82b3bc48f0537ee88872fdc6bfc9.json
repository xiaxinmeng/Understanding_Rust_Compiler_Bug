{"sha": "a4d81081aecb82b3bc48f0537ee88872fdc6bfc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRkODEwODFhZWNiODJiM2JjNDhmMDUzN2VlODg4NzJmZGM2YmZjOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-07-10T13:54:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-07-10T13:54:24Z"}, "message": "g++-dg.exp: Load file-format and target-supports like gcc.\n\n        * lib/g++-dg.exp: Load file-format and target-supports like gcc.\n        (g++-dg-prune): Call prune_gcc_output.\n        * prune.exp: New file for prune_gcc_output.\n        * lib/g++.exp, lib/gcc.exp: Load it.\n\nFrom-SVN: r43901", "tree": {"sha": "0dbe369c79ac0a9c26c7c1dccb370d4fbdaf824f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dbe369c79ac0a9c26c7c1dccb370d4fbdaf824f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9/comments", "author": null, "committer": null, "parents": [{"sha": "352411927ee72322eb6a99a8b4ff489939b31cdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/352411927ee72322eb6a99a8b4ff489939b31cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/352411927ee72322eb6a99a8b4ff489939b31cdd"}], "stats": {"total": 90, "additions": 52, "deletions": 38}, "files": [{"sha": "aeabf4607c2308c1e66dfd0b0e6403ea5970511e", "filename": "gcc/testsuite/lib/g++-dg.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B-dg.exp?ref=a4d81081aecb82b3bc48f0537ee88872fdc6bfc9", "patch": "@@ -17,6 +17,8 @@\n # Define g++ callbacks for dg.exp.\n \n load_lib dg.exp\n+load_lib file-format.exp\n+load_lib target-supports.exp\n load_lib scanasm.exp\n \n proc g++-dg-test { prog do_what extra_tool_flags } {\n@@ -68,6 +70,7 @@ proc g++-dg-test { prog do_what extra_tool_flags } {\n \n \n proc g++-dg-prune { system text } {\n+    set text [prune_gcc_output $text]\n \n     # If we see \"region xxx is full\" then the testcase is too big for ram.\n     # This is tricky to deal with in a large testsuite like c-torture so"}, {"sha": "36024e9c28025e9f4ed760d311582c74e53282ad", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=a4d81081aecb82b3bc48f0537ee88872fdc6bfc9", "patch": "@@ -21,6 +21,7 @@\n #\n # g++ support library routines\n #\n+load_lib prune.exp\n \n #\n # GXX_UNDER_TEST is the compiler under test.\n@@ -290,14 +291,6 @@ if { [info procs runtest_file_p] == \"\" } then {\n     }\n }\n \n-# Provide a definition of this if missing (delete after next dejagnu release).\n-\n-if { [info procs prune_warnings] == \"\" } then {\n-    proc prune_warnings { text } {\n-\treturn $text\n-    }\n-}\n-\n # On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but\n # called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH\n # (for the 64-bit ABI).  The right way to do this would be to modify"}, {"sha": "4faa46d8aec635216f171cbcf4f2773910dd5260", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=a4d81081aecb82b3bc48f0537ee88872fdc6bfc9", "patch": "@@ -18,6 +18,7 @@ load_lib dg.exp\n load_lib file-format.exp\n load_lib target-supports.exp\n load_lib scanasm.exp\n+load_lib prune.exp\n \n if ![info exists TORTURE_OPTIONS] {\n     # It is theoretically beneficial to group all of the O2/O3 options together,"}, {"sha": "f26481e87b4b37ad171d60a203a1fe30c56b5e2e", "filename": "gcc/testsuite/lib/gcc.exp", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc.exp?ref=a4d81081aecb82b3bc48f0537ee88872fdc6bfc9", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1992, 1993, 1994, 1996, 1997, 1999 Free Software Foundation, Inc.\n+# Copyright (C) 1992, 1993, 1994, 1996, 1997, 1999, 2000 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -26,6 +26,7 @@\n \n # we want to use libgloss so we can get find_gcc.\n load_lib libgloss.exp\n+load_lib prune.exp\n \n #\n # GCC_UNDER_TEST is the compiler under test.\n@@ -275,14 +276,6 @@ if { [info procs runtest_file_p] == \"\" } then {\n     }\n }\n \n-# Provide a definition of this if missing (delete after next dejagnu release).\n-\n-if { [info procs prune_warnings] == \"\" } then {\n-    proc prune_warnings { text } {\n-\treturn $text\n-    }\n-}\n-\n # Utility used by mike-gcc.exp and c-torture.exp.\n # Check the compiler(/assembler/linker) output for text indicating that\n # the testcase should be marked as \"unsupported\".\n@@ -299,24 +292,3 @@ proc ${tool}_check_unsupported_p { output } {\n     }\n     return \"\"\n }\n-\n-# Prune messages from gcc that aren't useful.\n-\n-proc prune_gcc_output { text } {\n-    #send_user \"Before:$text\\n\"\n-    regsub -all \"(^|\\n)\\[^\\n\\]*: In (function|method) \\[^\\n\\]*\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*: At top level:\\[^\\n\\]*\" $text \"\" text\n-\n-    # It would be nice to avoid passing anything to gcc that would cause it to\n-    # issue these messages (since ignoring them seems like a hack on our part),\n-    # but that's too difficult in the general case.  For example, sometimes\n-    # you need to use -B to point gcc at crt0.o, but there are some targets\n-    # that don't have crt0.o.\n-    regsub -all \"(^|\\n)\\[^\\n\\]*file path prefix \\[^\\n\\]* never used\" $text \"\" text\n-    regsub -all \"(^|\\n)\\[^\\n\\]*linker input file unused since linking not done\" $text \"\" text\n-\n-    #send_user \"After:$text\\n\"\n-\n-    return $text\n-}\n-"}, {"sha": "6501f7b10dffc66284e321d120a76a5ecb2cffb6", "filename": "gcc/testsuite/lib/prune.exp", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4d81081aecb82b3bc48f0537ee88872fdc6bfc9/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=a4d81081aecb82b3bc48f0537ee88872fdc6bfc9", "patch": "@@ -0,0 +1,45 @@\n+#   Copyright (C) 1997, 1999, 2000 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Prune messages from gcc that aren't useful.\n+\n+proc prune_gcc_output { text } {\n+    #send_user \"Before:$text\\n\"\n+\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: In (function|method) \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: At top level:\\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)collect2: ld returned \\[^\\n\\]*\" $text \"\" text\n+\n+    # It would be nice to avoid passing anything to gcc that would cause it to\n+    # issue these messages (since ignoring them seems like a hack on our part),\n+    # but that's too difficult in the general case.  For example, sometimes\n+    # you need to use -B to point gcc at crt0.o, but there are some targets\n+    # that don't have crt0.o.\n+    regsub -all \"(^|\\n)\\[^\\n\\]*file path prefix \\[^\\n\\]* never used\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*linker input file unused since linking not done\" $text \"\" text\n+\n+    #send_user \"After:$text\\n\"\n+\n+    return $text\n+}\n+\n+# Provide a definition of this if missing (delete after next dejagnu release).\n+\n+if { [info procs prune_warnings] == \"\" } then {\n+    proc prune_warnings { text } {\n+\treturn $text\n+    }\n+}"}]}