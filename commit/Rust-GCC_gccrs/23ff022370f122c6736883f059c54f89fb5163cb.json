{"sha": "23ff022370f122c6736883f059c54f89fb5163cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmZjAyMjM3MGYxMjJjNjczNjg4M2YwNTljNTRmODlmYjUxNjNjYg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-17T17:27:14Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-17T17:27:14Z"}, "message": "cppexp.c (cpp_interpret_integer, [...]): Clarify and correct use of \"bool\" variables.\n\n\t* cppexp.c (cpp_interpret_integer, append_digit, parse_defined,\n\teval_token): Clarify and correct use of \"bool\" variables.\n\t* cpplib.h (struct cpp_options): Similarly.\n\t* cppmacro.c (parse_params, _cpp_save_parameter): Ditto.\n\t* cpptrad.c (recursive_macro): Similarly.\n\nFrom-SVN: r55536", "tree": {"sha": "d4ad3cdbbbc267253c90d548d8d59d8f399a5435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4ad3cdbbbc267253c90d548d8d59d8f399a5435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23ff022370f122c6736883f059c54f89fb5163cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ff022370f122c6736883f059c54f89fb5163cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ff022370f122c6736883f059c54f89fb5163cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ff022370f122c6736883f059c54f89fb5163cb/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db50171f40e718db91d21f13828a2e74f879c04c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db50171f40e718db91d21f13828a2e74f879c04c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db50171f40e718db91d21f13828a2e74f879c04c"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "c51a6ff2d39fc055818433eb32ccd6670d7f445b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ff022370f122c6736883f059c54f89fb5163cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ff022370f122c6736883f059c54f89fb5163cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23ff022370f122c6736883f059c54f89fb5163cb", "patch": "@@ -1,3 +1,11 @@\n+2002-07-17  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cppexp.c (cpp_interpret_integer, append_digit, parse_defined,\n+\teval_token): Clarify and correct use of \"bool\" variables.\n+\t* cpplib.h (struct cpp_options): Similarly.\n+\t* cppmacro.c (parse_params, _cpp_save_parameter): Ditto.\n+\t* cpptrad.c (recursive_macro): Similarly.\n+\n Wed Jul 17 17:08:06 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* config/sh/lib1funcs.asm (udivsi3_i4): Implement SHcompact version in"}, {"sha": "c45acb868a5c6d4efd917dc8871e5c6d742a2daf", "filename": "gcc/cppexp.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ff022370f122c6736883f059c54f89fb5163cb/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ff022370f122c6736883f059c54f89fb5163cb/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=23ff022370f122c6736883f059c54f89fb5163cb", "patch": "@@ -318,8 +318,8 @@ cpp_interpret_integer (pfile, token, type)\n \n   result.low = 0;\n   result.high = 0;\n-  result.unsignedp = type & CPP_N_UNSIGNED;\n-  result.overflow = 0;\n+  result.unsignedp = !!(type & CPP_N_UNSIGNED);\n+  result.overflow = false;\n \n   p = token->val.str.text;\n   end = p + token->val.str.len;\n@@ -387,7 +387,7 @@ cpp_interpret_integer (pfile, token, type)\n \t  if (base == 10)\n \t    cpp_error (pfile, DL_WARNING,\n \t\t       \"integer constant is so large that it is unsigned\");\n-\t  result.unsignedp = 1;\n+\t  result.unsignedp = true;\n \t}\n     }\n \n@@ -409,7 +409,7 @@ append_digit (num, digit, base, precision)\n \n   /* Multiply by 8 or 16.  Catching this overflow here means we don't\n      need to worry about add_high overflowing.  */\n-  overflow = num.high >> (PART_PRECISION - shift);\n+  overflow = !!(num.high >> (PART_PRECISION - shift));\n   result.high = num.high << shift;\n   result.low = num.low << shift;\n   result.high |= num.low >> (PART_PRECISION - shift);\n@@ -507,9 +507,9 @@ parse_defined (pfile)\n \n   pfile->state.prevent_expansion--;\n \n-  result.unsignedp = 0;\n+  result.unsignedp = false;\n   result.high = 0;\n-  result.overflow = 0;\n+  result.overflow = false;\n   result.low = node && node->type == NT_MACRO;\n   return result;\n }\n@@ -604,8 +604,8 @@ eval_token (pfile, token)\n       result.low = temp;\n     }\n \n-  result.unsignedp = unsignedp;\n-  result.overflow = 0;\n+  result.unsignedp = !!unsignedp;\n+  result.overflow = false;\n   return result;\n }\n \f"}, {"sha": "7c1fe854658950e895b13ed2a1cc4c0d82bb5f29", "filename": "gcc/cpplib.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ff022370f122c6736883f059c54f89fb5163cb/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ff022370f122c6736883f059c54f89fb5163cb/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=23ff022370f122c6736883f059c54f89fb5163cb", "patch": "@@ -402,8 +402,8 @@ struct cpp_options\n      ints and target wide characters, respectively.  */\n   size_t precision, char_precision, int_precision, wchar_precision;\n \n-  /* Nonzero means chars (wide chars) are unsigned.  */\n-  unsigned char unsigned_char, unsigned_wchar;\n+  /* True means chars (wide chars) are unsigned.  */\n+  bool unsigned_char, unsigned_wchar;\n \n   /* Nonzero means __STDC__ should have the value 0 in system headers.  */\n   unsigned char stdc_0_in_system_headers;"}, {"sha": "4d807a226adc4ee541c0f606241167025cafab91", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ff022370f122c6736883f059c54f89fb5163cb/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ff022370f122c6736883f059c54f89fb5163cb/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=23ff022370f122c6736883f059c54f89fb5163cb", "patch": "@@ -69,7 +69,7 @@ static cpp_token *alloc_expansion_token PARAMS ((cpp_reader *, cpp_macro *));\n static cpp_token *lex_expansion_token PARAMS ((cpp_reader *, cpp_macro *));\n static bool warn_of_redefinition PARAMS ((cpp_reader *, const cpp_hashnode *,\n \t\t\t\t\t  const cpp_macro *));\n-static int parse_params PARAMS ((cpp_reader *, cpp_macro *));\n+static bool parse_params PARAMS ((cpp_reader *, cpp_macro *));\n static void check_trad_stringification PARAMS ((cpp_reader *,\n \t\t\t\t\t\tconst cpp_macro *,\n \t\t\t\t\t\tconst cpp_string *));\n@@ -1245,7 +1245,7 @@ _cpp_save_parameter (pfile, macro, node)\n     {\n       cpp_error (pfile, DL_ERROR, \"duplicate macro parameter \\\"%s\\\"\",\n \t\t NODE_NAME (node));\n-      return 1;\n+      return true;\n     }\n \n   if (BUFF_ROOM (pfile->a_buff)\n@@ -1254,11 +1254,12 @@ _cpp_save_parameter (pfile, macro, node)\n \n   ((cpp_hashnode **) BUFF_FRONT (pfile->a_buff))[macro->paramc++] = node;\n   node->arg_index = macro->paramc;\n-  return 0;\n+  return false;\n }\n \n-/* Check the syntax of the parameters in a MACRO definition.  */\n-static int\n+/* Check the syntax of the parameters in a MACRO definition.  Returns\n+   false if an error occurs.  */\n+static bool\n parse_params (pfile, macro)\n      cpp_reader *pfile;\n      cpp_macro *macro;\n@@ -1281,31 +1282,31 @@ parse_params (pfile, macro)\n \t  cpp_error (pfile, DL_ERROR,\n \t\t     \"\\\"%s\\\" may not appear in macro parameter list\",\n \t\t     cpp_token_as_text (pfile, token));\n-\t  return 0;\n+\t  return false;\n \n \tcase CPP_NAME:\n \t  if (prev_ident)\n \t    {\n \t      cpp_error (pfile, DL_ERROR,\n \t\t\t \"macro parameters must be comma-separated\");\n-\t      return 0;\n+\t      return false;\n \t    }\n \t  prev_ident = 1;\n \n \t  if (_cpp_save_parameter (pfile, macro, token->val.node))\n-\t    return 0;\n+\t    return false;\n \t  continue;\n \n \tcase CPP_CLOSE_PAREN:\n \t  if (prev_ident || macro->paramc == 0)\n-\t    return 1;\n+\t    return true;\n \n \t  /* Fall through to pick up the error.  */\n \tcase CPP_COMMA:\n \t  if (!prev_ident)\n \t    {\n \t      cpp_error (pfile, DL_ERROR, \"parameter name missing\");\n-\t      return 0;\n+\t      return false;\n \t    }\n \t  prev_ident = 0;\n \t  continue;\n@@ -1328,12 +1329,12 @@ parse_params (pfile, macro)\n \t  /* We're at the end, and just expect a closing parenthesis.  */\n \t  token = _cpp_lex_token (pfile);\n \t  if (token->type == CPP_CLOSE_PAREN)\n-\t    return 1;\n+\t    return true;\n \t  /* Fall through.  */\n \n \tcase CPP_EOF:\n \t  cpp_error (pfile, DL_ERROR, \"missing ')' in macro parameter list\");\n-\t  return 0;\n+\t  return false;\n \t}\n     }\n }"}, {"sha": "e8b5a1e638dc93b1a59e421df180d52e6db814bf", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ff022370f122c6736883f059c54f89fb5163cb/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ff022370f122c6736883f059c54f89fb5163cb/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=23ff022370f122c6736883f059c54f89fb5163cb", "patch": "@@ -802,7 +802,7 @@ recursive_macro (pfile, node)\n      cpp_reader *pfile;\n      cpp_hashnode *node;\n {\n-  bool recursing = node->flags & NODE_DISABLED;\n+  bool recursing = !!(node->flags & NODE_DISABLED);\n \n   /* Object-like macros that are already expanding are necessarily\n      recursive."}]}