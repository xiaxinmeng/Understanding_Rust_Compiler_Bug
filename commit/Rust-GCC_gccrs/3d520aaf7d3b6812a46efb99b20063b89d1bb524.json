{"sha": "3d520aaf7d3b6812a46efb99b20063b89d1bb524", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q1MjBhYWY3ZDNiNjgxMmE0NmVmYjk5YjIwMDYzYjg5ZDFiYjUyNA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-09-12T20:05:30Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-09-12T20:05:30Z"}, "message": "re PR middle-end/16795 (PowerPC - Divide sequences by negative power of two could be more efficient)\n\n        PR target/16795\n        * expmed.c (expand_divmod): If cheap power of 2 divide is\n        available, use it for negative constant as well.\n\nFrom-SVN: r87403", "tree": {"sha": "64177dd93f46d8007e54530a6263757da7cd383b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64177dd93f46d8007e54530a6263757da7cd383b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d520aaf7d3b6812a46efb99b20063b89d1bb524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d520aaf7d3b6812a46efb99b20063b89d1bb524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d520aaf7d3b6812a46efb99b20063b89d1bb524", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d520aaf7d3b6812a46efb99b20063b89d1bb524/comments", "author": null, "committer": null, "parents": [{"sha": "c92d8761c7f6814e8ed7734aff920a40240ad43b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92d8761c7f6814e8ed7734aff920a40240ad43b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92d8761c7f6814e8ed7734aff920a40240ad43b"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "1c3b7affc1dfc24cd89786d324c9025371d45d56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d520aaf7d3b6812a46efb99b20063b89d1bb524/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d520aaf7d3b6812a46efb99b20063b89d1bb524/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d520aaf7d3b6812a46efb99b20063b89d1bb524", "patch": "@@ -1,3 +1,9 @@\n+2004-09-12  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR target/16795\n+\t* expmed.c (expand_divmod): If cheap power of 2 divide is\n+\tavailable, use it for negative constant as well.\n+\n 2004-09-12  Andrew Pinski  <apinski@apple.com>\n \n \t* darwin.h (ASM_OUTPUT_COMMON): Make sure we do not have a"}, {"sha": "eb8226da75f35294fc9e5340f7e067c6231fa85c", "filename": "gcc/expmed.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d520aaf7d3b6812a46efb99b20063b89d1bb524/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d520aaf7d3b6812a46efb99b20063b89d1bb524/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=3d520aaf7d3b6812a46efb99b20063b89d1bb524", "patch": "@@ -3764,7 +3764,19 @@ expand_divmod (int rem_flag, enum tree_code code, enum machine_mode mode,\n \t\t\tif (remainder)\n \t\t\t  return gen_lowpart (mode, remainder);\n \t\t      }\n-\t\t    quotient = expand_sdiv_pow2 (compute_mode, op0, abs_d);\n+\n+\t\t    if (sdiv_pow2_cheap[compute_mode]\n+\t\t\t&& ((sdiv_optab->handlers[compute_mode].insn_code\n+\t\t\t     != CODE_FOR_nothing)\n+\t\t\t    || (sdivmod_optab->handlers[compute_mode].insn_code\n+\t\t\t\t!= CODE_FOR_nothing)))\n+\t\t      quotient = expand_divmod (0, TRUNC_DIV_EXPR,\n+\t\t\t\t\t\tcompute_mode, op0,\n+\t\t\t\t\t\tgen_int_mode (abs_d,\n+\t\t\t\t\t\t\t      compute_mode),\n+\t\t\t\t\t\tNULL_RTX, 0);\n+\t\t    else\n+\t\t      quotient = expand_sdiv_pow2 (compute_mode, op0, abs_d);\n \n \t\t    /* We have computed OP0 / abs(OP1).  If OP1 is negative,\n \t\t       negate the quotient.  */"}]}