{"sha": "2c71d454eb6c35af8bf64d4c15621bb380f494ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM3MWQ0NTRlYjZjMzVhZjhiZjY0ZDRjMTU2MjFiYjM4MGY0OTRhYg==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2016-08-18T14:46:19Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2016-08-18T14:46:19Z"}, "message": "re PR middle-end/70895 (OpenACC: loop reduction does not work. Output is zero.)\n\n2016-08-18  Chung-Lin Tang  <cltang@codesourcery.com>\n\n\tPR middle-end/70895\n\tgcc/\n\t* gimplify.c (omp_add_variable): Adjust/add variable mapping on\n\tenclosing parallel construct for reduction variables on OpenACC loop\n\tdirectives.\n\n\tgcc/testsuite/\n\t* gfortran.dg/goacc/loop-tree-1.f90: Add gimple scan-tree-dump test.\n\t* c-c++-common/goacc/reduction-1.c: Likewise.\n\t* c-c++-common/goacc/reduction-2.c: Likewise.\n\t* c-c++-common/goacc/reduction-3.c: Likewise.\n\t* c-c++-common/goacc/reduction-4.c: Likewise.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/reduction-7.f90: Add explicit\n\tfirstprivate clauses.\n\t* testsuite/libgomp.oacc-fortran/reduction-6.f90: Remove explicit\n\tcopy clauses.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-7.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-cplx-flt.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-flt.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/collapse-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/collapse-4.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-cplx-dbl.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-g-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-dbl.c: Likewise.\n\nFrom-SVN: r239576", "tree": {"sha": "3b72b1c308739a60c3a249fcd23d625dd89bd848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b72b1c308739a60c3a249fcd23d625dd89bd848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c71d454eb6c35af8bf64d4c15621bb380f494ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c71d454eb6c35af8bf64d4c15621bb380f494ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c71d454eb6c35af8bf64d4c15621bb380f494ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c71d454eb6c35af8bf64d4c15621bb380f494ab/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80c5ad359f30c86d48a04c080785606a2701ab71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c5ad359f30c86d48a04c080785606a2701ab71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c5ad359f30c86d48a04c080785606a2701ab71"}], "stats": {"total": 175, "additions": 132, "deletions": 43}, "files": [{"sha": "da653161a66b574884c4204a45b651896080c314", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -1,3 +1,10 @@\n+2016-08-18  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/70895\n+\t* gimplify.c (omp_add_variable): Adjust/add variable mapping on\n+\tenclosing parallel construct for reduction variables on OpenACC loop\n+\tdirectives.\n+\n 2016-08-18  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* dwarf2out.c (copy_dwarf_procedure): Remove obsolete comment."}, {"sha": "4715332eddf4f4de74a56a5df4feacd021c4e10c", "filename": "gcc/gimplify.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -6010,6 +6010,45 @@ omp_add_variable (struct gimplify_omp_ctx *ctx, tree decl, unsigned int flags)\n     n->value |= flags;\n   else\n     splay_tree_insert (ctx->variables, (splay_tree_key)decl, flags);\n+\n+  /* For reductions clauses in OpenACC loop directives, by default create a\n+     copy clause on the enclosing parallel construct for carrying back the\n+     results.  */\n+  if (ctx->region_type == ORT_ACC && (flags & GOVD_REDUCTION))\n+    {\n+      struct gimplify_omp_ctx *outer_ctx = ctx->outer_context;\n+      while (outer_ctx)\n+\t{\n+\t  n = splay_tree_lookup (outer_ctx->variables, (splay_tree_key)decl);\n+\t  if (n != NULL)\n+\t    {\n+\t      /* Ignore local variables and explicitly declared clauses.  */\n+\t      if (n->value & (GOVD_LOCAL | GOVD_EXPLICIT))\n+\t\tbreak;\n+\t      else if (outer_ctx->region_type == ORT_ACC_KERNELS)\n+\t\t{\n+\t\t  /* According to the OpenACC spec, such a reduction variable\n+\t\t     should already have a copy map on a kernels construct,\n+\t\t     verify that here.  */\n+\t\t  gcc_assert (!(n->value & GOVD_FIRSTPRIVATE)\n+\t\t\t      && (n->value & GOVD_MAP));\n+\t\t}\n+\t      else if (outer_ctx->region_type == ORT_ACC_PARALLEL)\n+\t\t{\n+\t\t  /* Remove firstprivate and make it a copy map.  */\n+\t\t  n->value &= ~GOVD_FIRSTPRIVATE;\n+\t\t  n->value |= GOVD_MAP;\n+\t\t}\n+\t    }\n+\t  else if (outer_ctx->region_type == ORT_ACC_PARALLEL)\n+\t    {\n+\t      splay_tree_insert (outer_ctx->variables, (splay_tree_key)decl,\n+\t\t\t\t GOVD_MAP | GOVD_SEEN);\n+\t      break;\n+\t    }\n+\t  outer_ctx = outer_ctx->outer_context;\n+\t}\n+    }\n }\n \n /* Notice a threadprivate variable DECL used in OMP context CTX."}, {"sha": "76799287e46476778dd31dc1c67f3db8c1d08e6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -1,3 +1,12 @@\n+2016-08-18  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/70895\n+\t* gfortran.dg/goacc/loop-tree-1.f90: Add gimple scan-tree-dump test.\n+\t* c-c++-common/goacc/reduction-1.c: Likewise.\n+\t* c-c++-common/goacc/reduction-2.c: Likewise.\n+\t* c-c++-common/goacc/reduction-3.c: Likewise.\n+\t* c-c++-common/goacc/reduction-4.c: Likewise.\n+\n 2016-08-18  Alan Modra  <amodra@gmail.com>\n \n \t* gcc.c-torture/compile/pr72771.c: New."}, {"sha": "35bfc868708e448d99fe06e2b19e5bbadf1a06cc", "filename": "gcc/testsuite/c-c++-common/goacc/reduction-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-1.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-additional-options \"-fdump-tree-gimple\" } */\n /* Integer reductions.  */\n \n #define n 1000\n@@ -65,3 +66,7 @@ main(void)\n \n   return 0;\n }\n+\n+/* Check that default copy maps are generated for loop reductions.  */\n+/* { dg-final { scan-tree-dump-times \"map\\\\(tofrom:result \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)\" 7 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"map\\\\(tofrom:lresult \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)\" 2 \"gimple\" } } */"}, {"sha": "9dba035adb6eb80be8e158c54b333196fb6afe1f", "filename": "gcc/testsuite/c-c++-common/goacc/reduction-2.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-2.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-additional-options \"-fdump-tree-gimple\" } */\n /* float reductions.  */\n \n #define n 1000\n@@ -47,3 +48,7 @@ main(void)\n \n   return 0;\n }\n+\n+/* Check that default copy maps are generated for loop reductions.  */\n+/* { dg-final { scan-tree-dump-times \"map\\\\(tofrom:result \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)\" 4 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"map\\\\(tofrom:lresult \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)\" 2 \"gimple\" } } */"}, {"sha": "669cd43811339174fa89694cdf57dce466f1f997", "filename": "gcc/testsuite/c-c++-common/goacc/reduction-3.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-3.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-additional-options \"-fdump-tree-gimple\" } */\n /* double reductions.  */\n \n #define n 1000\n@@ -47,3 +48,7 @@ main(void)\n \n   return 0;\n }\n+\n+/* Check that default copy maps are generated for loop reductions.  */\n+/* { dg-final { scan-tree-dump-times \"map\\\\(tofrom:result \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)\" 4 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"map\\\\(tofrom:lresult \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)\" 2 \"gimple\" } } */"}, {"sha": "5c3dfb1917218c3c5252e1d7cace7f65eba38fda", "filename": "gcc/testsuite/c-c++-common/goacc/reduction-4.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-4.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -1,3 +1,4 @@\n+/* { dg-additional-options \"-fdump-tree-gimple\" } */\n /* complex reductions.  */\n \n #define n 1000\n@@ -35,3 +36,7 @@ main(void)\n \n   return 0;\n }\n+\n+/* Check that default copy maps are generated for loop reductions.  */\n+/* { dg-final { scan-tree-dump-times \"map\\\\(tofrom:result \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)\" 2 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"map\\\\(tofrom:lresult \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)\" 2 \"gimple\" } } */"}, {"sha": "150f9304e461599902f3359d0cc7146fccdc3558", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-tree-1.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-tree-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-tree-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-tree-1.f90?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -1,4 +1,4 @@\n-! { dg-additional-options \"-fdump-tree-original -std=f2008\" } \n+! { dg-additional-options \"-fdump-tree-original -fdump-tree-gimple -std=f2008\" } \n \n ! test for tree-dump-original and spaces-commas\n \n@@ -44,3 +44,4 @@ end program test\n \n ! { dg-final { scan-tree-dump-times \"private\\\\(m\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"reduction\\\\(\\\\+:sum\\\\)\" 1 \"original\" } } \n+! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:sum \\\\\\[len: \\[0-9\\]+\\\\\\]\\\\)\" 1 \"gimple\" } }"}, {"sha": "5849aca7e50bcfecedb08539c979a30833548923", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -1,3 +1,23 @@\n+2016-08-18  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\tPR middle-end/70895\n+\t* testsuite/libgomp.oacc-fortran/reduction-7.f90: Add explicit\n+\tfirstprivate clauses.\n+\t* testsuite/libgomp.oacc-fortran/reduction-6.f90: Remove explicit\n+\tcopy clauses.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-7.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-cplx-flt.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-flt.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/collapse-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/collapse-4.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-cplx-dbl.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-g-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-dbl.c: Likewise.\n+\n 2016-08-14  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \tPR fortran/70598"}, {"sha": "1ea0a6b846d5f1bd18711b48891b2f5e484c048f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/collapse-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcollapse-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcollapse-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcollapse-2.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -8,7 +8,7 @@ main (void)\n   int i, j, k, l = 0, f = 0, x = 0;\n   int m1 = 4, m2 = -5, m3 = 17;\n \n-#pragma acc parallel copy(l)\n+#pragma acc parallel\n   #pragma acc loop seq collapse(3) reduction(+:l)\n     for (i = -2; i < m1; i++)\n       for (j = m2; j < -2; j++)"}, {"sha": "ea652b69e2ac53014c0e8957e813343ea591d78c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/collapse-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcollapse-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcollapse-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcollapse-4.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -11,7 +11,7 @@ main (void)\n \n   memset (b, '\\0', sizeof (b));\n \n-#pragma acc parallel copy(b[0:3][0:3]) copy(l)\n+#pragma acc parallel copy(b[0:3][0:3])\n     {\n #pragma acc loop collapse(2) reduction(+:l)\n \tfor (i = 0; i < 2; i++)"}, {"sha": "d241d4136254c1423fc559bed64344cf4bec393a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-g-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-g-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-g-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-g-1.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -11,7 +11,7 @@ int main ()\n   int ondev = 0;\n   int t = 0, h = 0;\n   \n-#pragma acc parallel num_gangs(32) vector_length(32) copy(t) copy(ondev)\n+#pragma acc parallel num_gangs(32) vector_length(32) copy(ondev)\n   {\n #pragma acc loop gang  reduction (+:t)\n     for (unsigned ix = 0; ix < N; ix++)"}, {"sha": "4ae4b7c1246ad6d64e98c99b673656505087bdc1", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-gwv-1.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -11,7 +11,7 @@ int main ()\n   int ondev = 0;\n   int t = 0, h = 0;\n   \n-#pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) copy(t) copy(ondev)\n+#pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) copy(ondev)\n   {\n #pragma acc loop gang worker vector reduction(+:t)\n     for (unsigned ix = 0; ix < N; ix++)"}, {"sha": "0556455d62f16d17ab4fe800df187f26e5de0c19", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-v-1.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -12,7 +12,7 @@ int main ()\n   int ondev = 0;\n   int t = 0,  h = 0;\n \n-#pragma acc parallel vector_length(32) copy(t) copy(ondev)\n+#pragma acc parallel vector_length(32) copy(ondev)\n   {\n #pragma acc loop vector reduction (+:t)\n     for (unsigned ix = 0; ix < N; ix++)"}, {"sha": "19021d9d062331327879582d24b992e355fa3776", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -11,7 +11,7 @@ int main ()\n   int ondev = 0;\n   int t = 0,  h = 0;\n \n-#pragma acc parallel num_workers(32) vector_length(32) copy(t) copy(ondev)\n+#pragma acc parallel num_workers(32) vector_length(32) copy(ondev)\n   {\n #pragma acc loop worker reduction(+:t)\n     for (unsigned ix = 0; ix < N; ix++)"}, {"sha": "0fec2dcfd9c1aa13a3875590ebd7370f012ccea1", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -10,7 +10,7 @@ int main ()\n   int ondev = 0;\n   int t = 0, h = 0;\n   \n-#pragma acc parallel num_workers(32) vector_length(32) copy(t) copy(ondev)\n+#pragma acc parallel num_workers(32) vector_length(32) copy(ondev)\n   {\n #pragma acc loop worker vector reduction (+:t)\n     for (unsigned ix = 0; ix < N; ix++)"}, {"sha": "cc3cd07301ae206d2a90407f23b05f06215556d0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-7.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-7.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -13,8 +13,7 @@ void g_np_1()\n   for (i = 0; i < 1024; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32)\n   {\n     #pragma acc loop gang reduction(+:res)\n     for (i = 0; i < 1024; i++)\n@@ -28,8 +27,7 @@ void g_np_1()\n \n   res = hres = 1;\n \n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32)\n   {\n     #pragma acc loop gang reduction(*:res)\n     for (i = 0; i < 12; i++)\n@@ -53,8 +51,7 @@ void gv_np_1()\n   for (i = 0; i < 1024; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32)\n   {\n     #pragma acc loop gang vector reduction(+:res)\n     for (i = 0; i < 1024; i++)\n@@ -78,8 +75,7 @@ void gw_np_1()\n   for (i = 0; i < 1024; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32)\n   {\n     #pragma acc loop gang worker reduction(+:res)\n     for (i = 0; i < 1024; i++)\n@@ -103,8 +99,7 @@ void gwv_np_1()\n   for (i = 0; i < 1024; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32)\n   {\n     #pragma acc loop gang worker vector reduction(+:res)\n     for (i = 0; i < 1024; i++)\n@@ -128,8 +123,7 @@ void gwv_np_2()\n   for (i = 0; i < 32768; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res)\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32)\n   {\n     #pragma acc loop gang reduction(+:res)\n     for (j = 0; j < 32; j++)\n@@ -161,7 +155,7 @@ void gwv_np_3()\n     arr[i] = i;\n \n   #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copyin(arr) copy(res)\n+\t\t       copyin(arr)\n   {\n     #pragma acc loop gang reduction(+:res)\n     for (j = 0; j < 32; j++)\n@@ -191,8 +185,7 @@ void gwv_np_4()\n   for (i = 0; i < 32768; i++)\n     arr[i] = i;\n \n-  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n-\t\t       copy(res, mres)\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32)\n   {\n     #pragma acc loop gang reduction(+:res) reduction(max:mres)\n     for (j = 0; j < 32; j++)"}, {"sha": "aa19d490d177f9e1c0d5bef1f2dacd7975aaa1c3", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-cplx-dbl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-dbl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-dbl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-dbl.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -22,7 +22,7 @@ vector (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel vector_length(32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel vector_length(32) copyin(ary[0:N])\n   {\n #pragma acc loop vector reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)\n@@ -46,7 +46,7 @@ worker (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel num_workers(32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel num_workers(32) copyin(ary[0:N])\n   {\n #pragma acc loop worker reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)\n@@ -70,7 +70,7 @@ gang (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel num_gangs (32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel num_gangs (32) copyin(ary[0:N])\n   {\n #pragma acc loop gang reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)"}, {"sha": "5c533f25109ef1f70d00fe818e8cb657ee53f699", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-cplx-flt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-flt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-flt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-cplx-flt.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -22,7 +22,7 @@ vector (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel vector_length(32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel vector_length(32) copyin(ary[0:N])\n   {\n #pragma acc loop vector reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)\n@@ -46,7 +46,7 @@ worker (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel num_workers(32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel num_workers(32) copyin(ary[0:N])\n   {\n #pragma acc loop worker reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)\n@@ -70,7 +70,7 @@ gang (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel num_gangs (32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel num_gangs (32) copyin(ary[0:N])\n   {\n #pragma acc loop gang reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)"}, {"sha": "987c4ccba5ffab1cc897a787848e162d70ecb099", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-dbl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-dbl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-dbl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-dbl.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -19,7 +19,7 @@ vector (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel vector_length(32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel vector_length(32) copyin(ary[0:N])\n   {\n #pragma acc loop vector reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)\n@@ -43,7 +43,7 @@ worker (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel num_workers(32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel num_workers(32) copyin(ary[0:N])\n   {\n #pragma acc loop worker reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)\n@@ -67,7 +67,7 @@ gang (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel num_gangs (32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel num_gangs (32) copyin(ary[0:N])\n   {\n #pragma acc loop gang reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)"}, {"sha": "f08650a83a86e7bebf79d4ef63e6b77a1f7a8cbb", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-flt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-flt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-flt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-flt.c?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -19,7 +19,7 @@ vector (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel vector_length(32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel vector_length(32) copyin(ary[0:N])\n   {\n #pragma acc loop vector reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)\n@@ -43,7 +43,7 @@ worker (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel num_workers(32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel num_workers(32) copyin(ary[0:N])\n   {\n #pragma acc loop worker reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)\n@@ -67,7 +67,7 @@ gang (Type ary[N], Type sum, Type prod)\n {\n   Type tsum = 0, tprod = 1;\n \n-#pragma acc parallel num_gangs (32) copyin(ary[0:N]) copy (tsum, tprod)\n+#pragma acc parallel num_gangs (32) copyin(ary[0:N])\n   {\n #pragma acc loop gang reduction(+:tsum) reduction (*:tprod)\n     for (int ix = 0; ix < N; ix++)"}, {"sha": "c10e3f97a6f3b8662fb947f161eff7cc8e5ef9ec", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-6.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-6.f90?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -19,31 +19,31 @@ program reduction\n   hs1 = 0\n   hs2 = 0\n \n-  !$acc parallel num_gangs (1000) copy(gs1, gs2)\n+  !$acc parallel num_gangs (1000)\n   !$acc loop reduction(+:gs1, gs2) gang\n   do i = 1, n\n      gs1 = gs1 + 1\n      gs2 = gs2 + 2\n   end do\n   !$acc end parallel\n \n-  !$acc parallel num_workers (4) vector_length (32) copy(ws1, ws2)\n+  !$acc parallel num_workers (4) vector_length (32)\n   !$acc loop reduction(+:ws1, ws2) worker\n   do i = 1, n\n      ws1 = ws1 + 1\n      ws2 = ws2 + 2\n   end do\n   !$acc end parallel\n \n-  !$acc parallel vector_length (32) copy(vs1, vs2)\n+  !$acc parallel vector_length (32)\n   !$acc loop reduction(+:vs1, vs2) vector\n   do i = 1, n\n      vs1 = vs1 + 1\n      vs2 = vs2 + 2\n   end do\n   !$acc end parallel\n \n-  !$acc parallel num_gangs(8) num_workers(4) vector_length(32) copy(cs1, cs2)\n+  !$acc parallel num_gangs(8) num_workers(4) vector_length(32)\n   !$acc loop reduction(+:cs1, cs2) gang worker vector\n   do i = 1, n\n      cs1 = cs1 + 1\n@@ -74,7 +74,7 @@ program reduction\n   red = 0\n   vred = 0\n \n-  !$acc parallel num_gangs(10) vector_length(32) copy(red)\n+  !$acc parallel num_gangs(10) vector_length(32)\n   !$acc loop reduction(+:red) gang\n   do i = 1, n/chunksize\n      !$acc loop reduction(+:red) vector"}, {"sha": "1a7d69aa521b57d96b7b0bd961713a5b3955a100", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-7.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c71d454eb6c35af8bf64d4c15621bb380f494ab/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90?ref=2c71d454eb6c35af8bf64d4c15621bb380f494ab", "patch": "@@ -50,15 +50,15 @@ subroutine redsub_private(sum, n, arr)\n end subroutine redsub_private\n \n \n-! Bogus reduction on an impliclitly firstprivate variable.  The results do\n+! Bogus reduction on a firstprivate variable.  The results do\n ! survive the parallel region.  The goal here is to ensure that gfortran\n ! doesn't ICE.\n \n subroutine redsub_bogus(sum, n)\n   integer :: sum, n, arr(n)\n   integer :: i\n \n-  !$acc parallel\n+  !$acc parallel firstprivate(sum)\n   !$acc loop gang worker vector reduction (+:sum)\n   do i = 1, n\n      sum = sum + 1\n@@ -72,7 +72,7 @@ subroutine redsub_combined(sum, n, arr)\n   integer :: sum, n, arr(n)\n   integer :: i, j\n \n-  !$acc parallel copy (arr)\n+  !$acc parallel copy (arr) firstprivate(sum)\n   !$acc loop gang\n   do i = 1, n\n      sum = i;"}]}