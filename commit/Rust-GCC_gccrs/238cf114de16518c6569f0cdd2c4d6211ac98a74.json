{"sha": "238cf114de16518c6569f0cdd2c4d6211ac98a74", "node_id": "C_kwDOANBUbNoAKDIzOGNmMTE0ZGUxNjUxOGM2NTY5ZjBjZGQyYzRkNjIxMWFjOThhNzQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-28T08:19:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-28T09:04:42Z"}, "message": "tree-optimization/107876 - unswitching of switch\n\nThe following shows a missed update of dominators when unswitching\nremoves unreachable edges from switch stmts it unswitches.  Fixed\nby wiping dominator info in that case.\n\n\tPR tree-optimization/107876\n\t* tree-ssa-loop-unswitch.cc (clean_up_after_unswitching): Wipe\n\tdominator info if we removed an edge.\n\n\t* g++.dg/tree-ssa/pr107876.C: New testcase.", "tree": {"sha": "f2d074e9a906b6019c3e3f9649ae8782ea172f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2d074e9a906b6019c3e3f9649ae8782ea172f09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/238cf114de16518c6569f0cdd2c4d6211ac98a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238cf114de16518c6569f0cdd2c4d6211ac98a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/238cf114de16518c6569f0cdd2c4d6211ac98a74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238cf114de16518c6569f0cdd2c4d6211ac98a74/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0976b012d89e3d819d83cdaf0dab05925b3eb3a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0976b012d89e3d819d83cdaf0dab05925b3eb3a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0976b012d89e3d819d83cdaf0dab05925b3eb3a0"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "6cff2f1b166e441058b150c15ebd43b1fc087b9a", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr107876.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238cf114de16518c6569f0cdd2c4d6211ac98a74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr107876.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238cf114de16518c6569f0cdd2c4d6211ac98a74/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr107876.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr107876.C?ref=238cf114de16518c6569f0cdd2c4d6211ac98a74", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-options \"-O2 -funswitch-loops --param max-unswitch-insns=5 -fdump-tree-unswitch-details\" }\n+\n+class X {\n+public:\n+  X();\n+  X(const X&);\n+  X(const volatile X &);\n+  ~X();\n+};\n+\n+X test17(int i) {\n+  if (false) {\n+  impossible:\n+    if (i == 3)\n+      return X();\n+  }\n+\n+  while (true) {\n+    X x;\n+    if (i == 0)\n+      return x;\n+    if (i == 1)\n+      break;\n+    if (i == 2)\n+      continue;\n+    if (i == 3)\n+      goto impossible;\n+    if (i == 4)\n+      __builtin_exit(1);\n+    if (i == 5)\n+      return x;\n+  }\n+  return X();\n+}\n+\n+// { dg-final { scan-tree-dump \"unswitching loop 1 on .switch. with condition: i_\\[0-9\\]+\\\\(D\\\\) == 2\" \"unswitch\" } }"}, {"sha": "e8c9bd6812a43d68c022f4f95fb6df79d6cb6dcc", "filename": "gcc/tree-ssa-loop-unswitch.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238cf114de16518c6569f0cdd2c4d6211ac98a74/gcc%2Ftree-ssa-loop-unswitch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238cf114de16518c6569f0cdd2c4d6211ac98a74/gcc%2Ftree-ssa-loop-unswitch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.cc?ref=238cf114de16518c6569f0cdd2c4d6211ac98a74", "patch": "@@ -1631,6 +1631,7 @@ clean_up_after_unswitching (int ignored_edge_flag)\n   basic_block bb;\n   edge e;\n   edge_iterator ei;\n+  bool removed_edge = false;\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n@@ -1655,7 +1656,10 @@ clean_up_after_unswitching (int ignored_edge_flag)\n \t\t     to preserve its edge.  But we can remove the\n \t\t     non-default CASE sharing the edge.  */\n \t\t  if (e != default_e)\n-\t\t    remove_edge (e);\n+\t\t    {\n+\t\t      remove_edge (e);\n+\t\t      removed_edge = true;\n+\t\t    }\n \t\t}\n \t      else\n \t\t{\n@@ -1672,6 +1676,10 @@ clean_up_after_unswitching (int ignored_edge_flag)\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \te->flags &= ~ignored_edge_flag;\n     }\n+\n+  /* If we removed an edge we possibly have to recompute dominators.  */\n+  if (removed_edge)\n+    free_dominance_info (CDI_DOMINATORS);\n }\n \n /* Loop unswitching pass.  */"}]}