{"sha": "dbe1b846648fad29d105e2e503120a4279a32593", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlMWI4NDY2NDhmYWQyOWQxMDVlMmU1MDMxMjBhNDI3OWEzMjU5Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:21:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:21:56Z"}, "message": "[10/46] Temporarily make stmt_vec_info a class\n\nThis patch turns stmt_vec_info into an unspeakably bad wrapper class\nand adds an implicit conversion to the associated gimple stmt.\nHaving this conversion makes the rest of the series easier to write,\nbut since the class goes away again at the end of the series, I've\nnot bothered adding any comments or tried to make it pretty.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (stmt_vec_info): Temporarily change from\n\ta typedef to a wrapper class.\n\t(NULL_STMT_VEC_INFO): New macro.\n\t(vec_info::stmt_infos): Change to vec<stmt_vec_info>.\n\t(stmt_vec_info::operator*): New function.\n\t(stmt_vec_info::operator gimple *): Likewise.\n\t(set_vinfo_for_stmt): Use NULL_STMT_VEC_INFO.\n\t(add_stmt_costs): Likewise.\n\t* tree-vect-loop-manip.c (iv_phi_p): Likewise.\n\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost)\n\t(vect_get_known_peeling_cost): Likewise.\n\t(vect_estimate_min_profitable_iters): Likewise.\n\t* tree-vect-patterns.c (vect_init_pattern_stmt): Likewise.\n\t* tree-vect-slp.c (vect_remove_slp_scalar_calls): Likewise.\n\t* tree-vect-stmts.c (vect_build_gather_load_calls): Likewise.\n\t(vectorizable_store, free_stmt_vec_infos): Likewise.\n\t(new_stmt_vec_info): Change return type of xcalloc to\n\t_stmt_vec_info *.\n\nFrom-SVN: r263125", "tree": {"sha": "802554bcedd96fbe606d76e35cf2b1dc4d319c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/802554bcedd96fbe606d76e35cf2b1dc4d319c9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbe1b846648fad29d105e2e503120a4279a32593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe1b846648fad29d105e2e503120a4279a32593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe1b846648fad29d105e2e503120a4279a32593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe1b846648fad29d105e2e503120a4279a32593/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d0a4e205bb6da84e9218c483acf7b13453f0698", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d0a4e205bb6da84e9218c483acf7b13453f0698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d0a4e205bb6da84e9218c483acf7b13453f0698"}], "stats": {"total": 91, "additions": 72, "deletions": 19}, "files": [{"sha": "a5695829357b4ce77e60cc9b0c544354f9dd6e15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbe1b846648fad29d105e2e503120a4279a32593", "patch": "@@ -1,3 +1,24 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (stmt_vec_info): Temporarily change from\n+\ta typedef to a wrapper class.\n+\t(NULL_STMT_VEC_INFO): New macro.\n+\t(vec_info::stmt_infos): Change to vec<stmt_vec_info>.\n+\t(stmt_vec_info::operator*): New function.\n+\t(stmt_vec_info::operator gimple *): Likewise.\n+\t(set_vinfo_for_stmt): Use NULL_STMT_VEC_INFO.\n+\t(add_stmt_costs): Likewise.\n+\t* tree-vect-loop-manip.c (iv_phi_p): Likewise.\n+\t* tree-vect-loop.c (vect_compute_single_scalar_iteration_cost)\n+\t(vect_get_known_peeling_cost): Likewise.\n+\t(vect_estimate_min_profitable_iters): Likewise.\n+\t* tree-vect-patterns.c (vect_init_pattern_stmt): Likewise.\n+\t* tree-vect-slp.c (vect_remove_slp_scalar_calls): Likewise.\n+\t* tree-vect-stmts.c (vect_build_gather_load_calls): Likewise.\n+\t(vectorizable_store, free_stmt_vec_infos): Likewise.\n+\t(new_stmt_vec_info): Change return type of xcalloc to\n+\t_stmt_vec_info *.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (vec_info::lookup_single_use): Declare."}, {"sha": "dd1cf085f4f9dd601a7eb621cde71313b7faf7d6", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=dbe1b846648fad29d105e2e503120a4279a32593", "patch": "@@ -1344,7 +1344,7 @@ iv_phi_p (gphi *phi)\n     return false;\n \n   stmt_vec_info stmt_info = vinfo_for_stmt (phi);\n-  gcc_assert (stmt_info != NULL);\n+  gcc_assert (stmt_info != NULL_STMT_VEC_INFO);\n   if (STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def\n       || STMT_VINFO_DEF_TYPE (stmt_info) == vect_double_reduction_def)\n     return false;"}, {"sha": "e451cbcff8dca5974a6c6abaee8f39151663c02d", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=dbe1b846648fad29d105e2e503120a4279a32593", "patch": "@@ -1139,7 +1139,7 @@ vect_compute_single_scalar_iteration_cost (loop_vec_info loop_vinfo)\n \t\t    j, si)\n     {\n       struct _stmt_vec_info *stmt_info\n-\t= si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+\t= si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n       (void) add_stmt_cost (target_cost_data, si->count,\n \t\t\t    si->kind, stmt_info, si->misalign,\n \t\t\t    vect_body);\n@@ -3351,7 +3351,7 @@ vect_get_known_peeling_cost (loop_vec_info loop_vinfo, int peel_iters_prologue,\n     FOR_EACH_VEC_ELT (*scalar_cost_vec, j, si)\n \t{\n \t  stmt_vec_info stmt_info\n-\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n \t  retval += record_stmt_cost (prologue_cost_vec,\n \t\t\t\t      si->count * peel_iters_prologue,\n \t\t\t\t      si->kind, stmt_info, si->misalign,\n@@ -3361,7 +3361,7 @@ vect_get_known_peeling_cost (loop_vec_info loop_vinfo, int peel_iters_prologue,\n     FOR_EACH_VEC_ELT (*scalar_cost_vec, j, si)\n \t{\n \t  stmt_vec_info stmt_info\n-\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n \t  retval += record_stmt_cost (epilogue_cost_vec,\n \t\t\t\t      si->count * *peel_iters_epilogue,\n \t\t\t\t      si->kind, stmt_info, si->misalign,\n@@ -3504,7 +3504,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n \t\t\t    j, si)\n \t    {\n \t      struct _stmt_vec_info *stmt_info\n-\t\t= si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+\t\t= si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n \t      (void) add_stmt_cost (target_cost_data, si->count,\n \t\t\t\t    si->kind, stmt_info, si->misalign,\n \t\t\t\t    vect_epilogue);\n@@ -3541,7 +3541,7 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n       FOR_EACH_VEC_ELT (LOOP_VINFO_SCALAR_ITERATION_COST (loop_vinfo), j, si)\n \t{\n \t  struct _stmt_vec_info *stmt_info\n-\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n \t  (void) add_stmt_cost (target_cost_data,\n \t\t\t\tsi->count * peel_iters_prologue,\n \t\t\t\tsi->kind, stmt_info, si->misalign,\n@@ -3573,15 +3573,15 @@ vect_estimate_min_profitable_iters (loop_vec_info loop_vinfo,\n       FOR_EACH_VEC_ELT (prologue_cost_vec, j, si)\n \t{\n \t  struct _stmt_vec_info *stmt_info\n-\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n \t  (void) add_stmt_cost (data, si->count, si->kind, stmt_info,\n \t\t\t\tsi->misalign, vect_prologue);\n \t}\n \n       FOR_EACH_VEC_ELT (epilogue_cost_vec, j, si)\n \t{\n \t  struct _stmt_vec_info *stmt_info\n-\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+\t    = si->stmt ? vinfo_for_stmt (si->stmt) : NULL_STMT_VEC_INFO;\n \t  (void) add_stmt_cost (data, si->count, si->kind, stmt_info,\n \t\t\t\tsi->misalign, vect_epilogue);\n \t}"}, {"sha": "f4174e46bbcc6e8728d22989edb05465eac4388a", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=dbe1b846648fad29d105e2e503120a4279a32593", "patch": "@@ -103,7 +103,7 @@ vect_init_pattern_stmt (gimple *pattern_stmt, stmt_vec_info orig_stmt_info,\n {\n   vec_info *vinfo = orig_stmt_info->vinfo;\n   stmt_vec_info pattern_stmt_info = vinfo->lookup_stmt (pattern_stmt);\n-  if (pattern_stmt_info == NULL)\n+  if (pattern_stmt_info == NULL_STMT_VEC_INFO)\n     pattern_stmt_info = orig_stmt_info->vinfo->add_stmt (pattern_stmt);\n   gimple_set_bb (pattern_stmt, gimple_bb (orig_stmt_info->stmt));\n "}, {"sha": "883de92b26cd73abd08ddf63998aa01bd5b06399", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=dbe1b846648fad29d105e2e503120a4279a32593", "patch": "@@ -4039,7 +4039,7 @@ vect_remove_slp_scalar_calls (slp_tree node)\n       if (!is_gimple_call (stmt) || gimple_bb (stmt) == NULL)\n \tcontinue;\n       stmt_info = vinfo_for_stmt (stmt);\n-      if (stmt_info == NULL\n+      if (stmt_info == NULL_STMT_VEC_INFO\n \t  || is_pattern_stmt_p (stmt_info)\n \t  || !PURE_SLP_STMT (stmt_info))\n \tcontinue;"}, {"sha": "629e2055498eca378f2d50123fd272e4c3e7ce64", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=dbe1b846648fad29d105e2e503120a4279a32593", "patch": "@@ -2865,7 +2865,7 @@ vect_build_gather_load_calls (gimple *stmt, gimple_stmt_iterator *gsi,\n \t  new_stmt = SSA_NAME_DEF_STMT (var);\n \t}\n \n-      if (prev_stmt_info == NULL)\n+      if (prev_stmt_info == NULL_STMT_VEC_INFO)\n \tSTMT_VINFO_VEC_STMT (stmt_info) = *vec_stmt = new_stmt;\n       else\n \tSTMT_VINFO_RELATED_STMT (prev_stmt_info) = new_stmt;\n@@ -6550,7 +6550,7 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \n \t  vect_finish_stmt_generation (stmt, new_stmt, gsi);\n \n-\t  if (prev_stmt_info == NULL)\n+\t  if (prev_stmt_info == NULL_STMT_VEC_INFO)\n \t    STMT_VINFO_VEC_STMT (stmt_info) = *vec_stmt = new_stmt;\n \t  else\n \t    STMT_VINFO_RELATED_STMT (prev_stmt_info) = new_stmt;\n@@ -9805,7 +9805,7 @@ stmt_vec_info\n new_stmt_vec_info (gimple *stmt, vec_info *vinfo)\n {\n   stmt_vec_info res;\n-  res = (stmt_vec_info) xcalloc (1, sizeof (struct _stmt_vec_info));\n+  res = (_stmt_vec_info *) xcalloc (1, sizeof (struct _stmt_vec_info));\n \n   STMT_VINFO_TYPE (res) = undef_vec_info_type;\n   STMT_VINFO_STMT (res) = stmt;\n@@ -9862,7 +9862,7 @@ free_stmt_vec_infos (vec<stmt_vec_info> *v)\n   unsigned int i;\n   stmt_vec_info info;\n   FOR_EACH_VEC_ELT (*v, i, info)\n-    if (info != NULL)\n+    if (info != NULL_STMT_VEC_INFO)\n       free_stmt_vec_info (STMT_VINFO_STMT (info));\n   if (v == stmt_vec_info_vec)\n     stmt_vec_info_vec = NULL;"}, {"sha": "31d2db4d8c52275c57a487eb0cfd8562751ae07a", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe1b846648fad29d105e2e503120a4279a32593/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=dbe1b846648fad29d105e2e503120a4279a32593", "patch": "@@ -21,12 +21,31 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_TREE_VECTORIZER_H\n #define GCC_TREE_VECTORIZER_H\n \n+class stmt_vec_info {\n+public:\n+  stmt_vec_info () {}\n+  stmt_vec_info (struct _stmt_vec_info *ptr) : m_ptr (ptr) {}\n+  struct _stmt_vec_info *operator-> () const { return m_ptr; }\n+  struct _stmt_vec_info &operator* () const;\n+  operator struct _stmt_vec_info * () const { return m_ptr; }\n+  operator gimple * () const;\n+  operator void * () const { return m_ptr; }\n+  operator bool () const { return m_ptr; }\n+  bool operator == (const stmt_vec_info &x) { return x.m_ptr == m_ptr; }\n+  bool operator == (_stmt_vec_info *x) { return x == m_ptr; }\n+  bool operator != (const stmt_vec_info &x) { return x.m_ptr != m_ptr; }\n+  bool operator != (_stmt_vec_info *x) { return x != m_ptr; }\n+\n+private:\n+  struct _stmt_vec_info *m_ptr;\n+};\n+\n+#define NULL_STMT_VEC_INFO (stmt_vec_info (NULL))\n+\n #include \"tree-data-ref.h\"\n #include \"tree-hash-traits.h\"\n #include \"target.h\"\n \n-typedef struct _stmt_vec_info *stmt_vec_info;\n-\n /* Used for naming of new temporaries.  */\n enum vect_var_kind {\n   vect_simple_var,\n@@ -229,7 +248,7 @@ struct vec_info {\n   vec_info_shared *shared;\n \n   /* The mapping of GIMPLE UID to stmt_vec_info.  */\n-  vec<struct _stmt_vec_info *> stmt_vec_infos;\n+  vec<stmt_vec_info> stmt_vec_infos;\n \n   /* All SLP instances.  */\n   auto_vec<slp_instance> slp_instances;\n@@ -1052,6 +1071,17 @@ STMT_VINFO_BB_VINFO (stmt_vec_info stmt_vinfo)\n        && TYPE_PRECISION (TYPE) == 1\t\t\\\n        && TYPE_UNSIGNED (TYPE)))\n \n+inline _stmt_vec_info &\n+stmt_vec_info::operator* () const\n+{\n+  return *m_ptr;\n+}\n+\n+inline stmt_vec_info::operator gimple * () const\n+{\n+  return m_ptr ? m_ptr->stmt : NULL;\n+}\n+\n extern vec<stmt_vec_info> *stmt_vec_info_vec;\n \n void set_stmt_vec_info_vec (vec<stmt_vec_info> *);\n@@ -1084,7 +1114,7 @@ set_vinfo_for_stmt (gimple *stmt, stmt_vec_info info)\n     }\n   else\n     {\n-      gcc_checking_assert (info == NULL);\n+      gcc_checking_assert (info == NULL_STMT_VEC_INFO);\n       (*stmt_vec_info_vec)[uid - 1] = info;\n     }\n }\n@@ -1261,7 +1291,9 @@ add_stmt_costs (void *data, stmt_vector_for_cost *cost_vec)\n   unsigned i;\n   FOR_EACH_VEC_ELT (*cost_vec, i, cost)\n     add_stmt_cost (data, cost->count, cost->kind,\n-\t\t   cost->stmt ? vinfo_for_stmt (cost->stmt) : NULL,\n+\t\t   (cost->stmt\n+\t\t    ? vinfo_for_stmt (cost->stmt)\n+\t\t    : NULL_STMT_VEC_INFO),\n \t\t   cost->misalign, cost->where);\n }\n "}]}