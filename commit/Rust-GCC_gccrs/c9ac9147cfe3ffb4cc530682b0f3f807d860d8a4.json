{"sha": "c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlhYzkxNDdjZmUzZmZiNGNjNTMwNjgyYjBmM2Y4MDdkODYwZDhhNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-04-15T20:36:33Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-04-15T20:36:33Z"}, "message": "argv.c: Fix comments.\n\n\t* argv.c: Fix comments.\n\t* calloc.c: Don't unnecessarily include \"libiberty.h\".\n\t(bzero): Add prototype.\n\t* floatformat.c: Include \"ansidecl.h\", rely on ANSI_PROTOTYPES.\n\t* getcwd.c (getcwd): Use standard definition to avoid conflicts\n\twith system headers.\n\t* hashtab.c (htab_traverse): Delete unused variables.\n\t* rename.c: Include \"ansidecl.h\".\n\t(rename): Use standard definition to avoid conflicts with system\n\theaders.\n\t* strsignal.c: Rely on ANSI_PROTOTYPES.\n\t* strstr.c: Check GNUC >= 2, not GNUC == 2.\n\t* vfprintf.c: Include \"ansidecl.h\", rely on ANSI_PROTOTYPES.\n\t* vprintf.c: Include \"ansidecl.h\" earlier, rely on\n\tANSI_PROTOTYPES.\n\t* vsprintf.c: Include \"ansidecl.h\" earlier, rely on\n\tANSI_PROTOTYPES and possibly include <stdarg.h>.\n\n\t* Makefile.in: Regenerate dependencies.\n\nFrom-SVN: r65659", "tree": {"sha": "3a3d8d2a1200271f88e99f0c99b9d1269be9d399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a3d8d2a1200271f88e99f0c99b9d1269be9d399"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/comments", "author": null, "committer": null, "parents": [{"sha": "8a4680dba6c895290289e0019ac962ccc2f5afb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a4680dba6c895290289e0019ac962ccc2f5afb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a4680dba6c895290289e0019ac962ccc2f5afb5"}], "stats": {"total": 93, "additions": 63, "deletions": 30}, "files": [{"sha": "9a1cf0d8fb3a7a0338539b0d4f0db5a8cbe1324b", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -1,3 +1,25 @@\n+2003-04-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* argv.c: Fix comments.\n+\t* calloc.c: Don't unnecessarily include \"libiberty.h\".\n+\t(bzero): Add prototype.\n+\t* floatformat.c: Include \"ansidecl.h\", rely on ANSI_PROTOTYPES.\n+\t* getcwd.c (getcwd): Use standard definition to avoid conflicts\n+\twith system headers.\n+\t* hashtab.c (htab_traverse): Delete unused variables.\n+\t* rename.c: Include \"ansidecl.h\".\n+\t(rename): Use standard definition to avoid conflicts with system\n+\theaders.\n+\t* strsignal.c: Rely on ANSI_PROTOTYPES.\n+\t* strstr.c: Check GNUC >= 2, not GNUC == 2.\n+\t* vfprintf.c: Include \"ansidecl.h\", rely on ANSI_PROTOTYPES.\n+\t* vprintf.c: Include \"ansidecl.h\" earlier, rely on\n+\tANSI_PROTOTYPES.\n+\t* vsprintf.c: Include \"ansidecl.h\" earlier, rely on\n+\tANSI_PROTOTYPES and possibly include <stdarg.h>.\n+\t\n+\t* Makefile.in: Regenerate dependencies.\n+\n 2003-04-15  DJ Delorie  <dj@redhat.com>\n \n \t* maint-tool (deps): Scan for headers in $srcdir also."}, {"sha": "2e9bff43fbb9b3ebb4de775b94e7feb471e7033a", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -423,15 +423,15 @@ atexit.o: config.h\n basename.o: $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n \t$(INCDIR)/safe-ctype.h\n bsearch.o: config.h $(INCDIR)/ansidecl.h\n-calloc.o: $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n+calloc.o: $(INCDIR)/ansidecl.h\n choose-temp.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n clock.o: config.h\n concat.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n copysign.o: $(INCDIR)/ansidecl.h\n cp-demangle.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/demangle.h \\\n \t$(INCDIR)/dyn-string.h $(INCDIR)/getopt.h $(INCDIR)/libiberty.h\n cplus-dem.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/demangle.h \\\n-\t$(INCDIR)/getopt.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h\n+\t$(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h\n dyn-string.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/dyn-string.h \\\n \t$(INCDIR)/libiberty.h\n fdmatch.o: $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n@@ -451,7 +451,8 @@ hex.o: $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n lbasename.o: $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n \t$(INCDIR)/safe-ctype.h\n lrealpath.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n-make-relative-prefix.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n+make-relative-prefix.o: config.h $(INCDIR)/ansidecl.h \\\n+\t$(INCDIR)/libiberty.h\n make-temp-file.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n md5.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/md5.h\n memchr.o: $(INCDIR)/ansidecl.h\n@@ -464,18 +465,23 @@ objalloc.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/objalloc.h\n obstack.o: config.h $(INCDIR)/obstack.h\n partition.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n \t$(INCDIR)/partition.h\n-pex-djgpp.o: config.h pex-common.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n-pex-mpw.o: config.h pex-common.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n-pex-msdos.o: config.h pex-common.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n-\t$(INCDIR)/safe-ctype.h\n-pex-os2.o: config.h pex-common.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n-pex-unix.o: config.h pex-common.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n-pex-win32.o: config.h pex-common.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n-physmem.o: config.h $(INCDIR)/libiberty.h\n+pex-djgpp.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n+\t$(srcdir)/pex-common.h\n+pex-mpw.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n+\t$(srcdir)/pex-common.h\n+pex-msdos.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n+\t$(srcdir)/pex-common.h $(INCDIR)/safe-ctype.h\n+pex-os2.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n+\t$(srcdir)/pex-common.h\n+pex-unix.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n+\t$(srcdir)/pex-common.h\n+pex-win32.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n+\t$(srcdir)/pex-common.h\n+physmem.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n putenv.o: config.h $(INCDIR)/ansidecl.h\n random.o: $(INCDIR)/ansidecl.h\n regex.o: config.h $(INCDIR)/xregex.h $(INCDIR)/xregex2.h\n-rename.o: config.h\n+rename.o: config.h $(INCDIR)/ansidecl.h\n safe-ctype.o: $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h\n setenv.o: config.h $(INCDIR)/ansidecl.h\n sigsetmask.o: $(INCDIR)/ansidecl.h\n@@ -486,6 +492,7 @@ splay-tree.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n \t$(INCDIR)/splay-tree.h\n strcasecmp.o: $(INCDIR)/ansidecl.h\n strchr.o: $(INCDIR)/ansidecl.h\n+strdup.o: $(INCDIR)/ansidecl.h\n strerror.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n strncasecmp.o: $(INCDIR)/ansidecl.h\n strncmp.o: $(INCDIR)/ansidecl.h\n@@ -498,6 +505,7 @@ ternary.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n \t$(INCDIR)/ternary.h\n vasprintf.o: config.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n vfork.o: $(INCDIR)/ansidecl.h\n+vfprintf.o: $(INCDIR)/ansidecl.h\n vprintf.o: $(INCDIR)/ansidecl.h\n vsprintf.o: $(INCDIR)/ansidecl.h\n waitpid.o: config.h"}, {"sha": "31d8ef55e266f56df7f36f56f9e83753c5c9d572", "filename": "libiberty/argv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -35,7 +35,7 @@ Boston, MA 02111-1307, USA.  */\n #include <string.h>\n #include <stdlib.h>\n \n-#else\t/* !__STDC__ */\n+#else\t/* !ANSI_PROTOTYPES */\n \n #if !defined _WIN32 || defined __GNUC__\n extern char *memcpy ();\t\t/* Copy memory region */\n@@ -46,7 +46,7 @@ extern void free ();\t\t/* Free malloc'd memory */\n extern char *strdup ();\t\t/* Duplicate a string */\n #endif\n \n-#endif\t/* __STDC__ */\n+#endif\t/* ANSI_PROTOTYPES */\n \n \n #ifndef NULL"}, {"sha": "50736823077c017e799f596873668629c932659c", "filename": "libiberty/calloc.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fcalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fcalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcalloc.c?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -13,8 +13,6 @@ Uses @code{malloc} to allocate storage for @var{nelem} objects of\n */\n  \n #include \"ansidecl.h\"\n-#include \"libiberty.h\"\n- \n #ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n #else\n@@ -23,6 +21,7 @@ Uses @code{malloc} to allocate storage for @var{nelem} objects of\n \n /* For systems with larger pointers than ints, this must be declared.  */\n PTR malloc PARAMS ((size_t));\n+void bzero PARAMS ((PTR, size_t));\n \n PTR\n calloc (nelem, elsize)"}, {"sha": "d69024f739026dceaa6f37b3832ba9461e7a8206", "filename": "libiberty/floatformat.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Ffloatformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Ffloatformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffloatformat.c?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -17,9 +17,10 @@ You should have received a copy of the GNU General Public License\n along with this program; if not, write to the Free Software\n Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n+#include \"ansidecl.h\"\n #include \"floatformat.h\"\n #include <math.h>\t\t/* ldexp */\n-#ifdef __STDC__\n+#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n extern void *memcpy (void *s1, const void *s2, size_t n);\n extern void *memset (void *s, int c, size_t n);"}, {"sha": "a19d26796d5715c74c3a7b95b1e3570ab8b22a09", "filename": "libiberty/getcwd.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fgetcwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fgetcwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetcwd.c?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -40,7 +40,7 @@ extern int errno;\n char *\n getcwd (buf, len)\n   char *buf;\n-  int len;\n+  size_t len;\n {\n   char ourbuf[MAXPATHLEN];\n   char *result;"}, {"sha": "32067afb5b8f94ef3bf312e979dfc90ba90eb9d8", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -634,9 +634,6 @@ htab_traverse (htab, callback, info)\n      htab_trav callback;\n      PTR info;\n {\n-  PTR *slot;\n-  PTR *limit;\n-\n   if ((htab->n_elements - htab->n_deleted) * 8 < htab->size)\n     htab_expand (htab);\n "}, {"sha": "399980ab7d7e995f5fb344f8f144d8959d727b5f", "filename": "libiberty/rename.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Frename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Frename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frename.c?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -12,6 +12,7 @@ exists, it is removed.\n \n */\n \n+#include \"ansidecl.h\"\n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n #endif\n@@ -22,8 +23,8 @@ exists, it is removed.\n \n int\n rename (zfrom, zto)\n-     char *zfrom;\n-     char *zto;\n+     const char *zfrom;\n+     const char *zto;\n {\n   if (link (zfrom, zto) < 0)\n     {"}, {"sha": "a8a7d341fefa9694faeff23a4c06dcaf7f05f765", "filename": "libiberty/strsignal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fstrsignal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fstrsignal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrsignal.c?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -42,7 +42,7 @@ extern PTR memset ();\n #undef sys_nsig\n \n #ifndef NULL\n-#  ifdef __STDC__\n+#  ifdef ANSI_PROTOTYPES\n #    define NULL (void *) 0\n #  else\n #    define NULL 0"}, {"sha": "a059c7f5dcb3b3d6c17efc26566bd5c412d5dc37", "filename": "libiberty/strstr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fstrstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fstrstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrstr.c?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -27,8 +27,8 @@ strstr (s1, s2)\n   register char *p = s1;\n   extern char *strchr ();\n   extern int strncmp ();\n-#if __GNUC__==2\n-  extern __SIZE_TYPE__ strlen ();\n+#if __GNUC__ >= 2\n+  extern __SIZE_TYPE__ strlen (const char *);\n #endif\n   register int len = strlen (s2);\n "}, {"sha": "18f09d47d324771a38b8b78b2ba5bb8dcf777388", "filename": "libiberty/vfprintf.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fvfprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fvfprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvfprintf.c?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -3,7 +3,8 @@\n    Copyright (C) 1998 Free Software Foundation, Inc.\n  */\n \n-#ifdef __STDC__\n+#include \"ansidecl.h\"\n+#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n #else\n #include <varargs.h>"}, {"sha": "9487896ea5efeea77befdebea6c1397b6cc33358", "filename": "libiberty/vprintf.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fvprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fvprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvprintf.c?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -15,13 +15,13 @@ nonstandard but common function @code{_doprnt}.\n \n */\n \n-#ifdef __STDC__\n+#include <ansidecl.h>\n+#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n #else\n #include <varargs.h>\n #endif\n #include <stdio.h>\n-#include <ansidecl.h>\n #undef vprintf\n int\n vprintf (format, ap)"}, {"sha": "9f09d7e27588dd0cf0fbd6879aa40f29daae1d03", "filename": "libiberty/vsprintf.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fvsprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4/libiberty%2Fvsprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvsprintf.c?ref=c9ac9147cfe3ffb4cc530682b0f3f807d860d8a4", "patch": "@@ -26,9 +26,13 @@ the resulting executable to be covered by the GNU General Public License.\n This exception does not however invalidate any other reasons why\n the executable file might be covered by the GNU General Public License. */\n \n+#include <ansidecl.h>\n+#ifdef ANSI_PROTOTYPES\n+#include <stdarg.h>\n+#else\n #include <varargs.h>\n+#endif\n #include <stdio.h>\n-#include <ansidecl.h>\n #undef vsprintf\n \n #if defined _IOSTRG && defined _IOWRT"}]}