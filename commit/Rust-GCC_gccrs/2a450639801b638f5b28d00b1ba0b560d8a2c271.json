{"sha": "2a450639801b638f5b28d00b1ba0b560d8a2c271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE0NTA2Mzk4MDFiNjM4ZjViMjhkMDBiMWJhMGI1NjBkOGEyYzI3MQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-03-21T09:10:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-03-21T09:10:08Z"}, "message": "rtl.h (constant_pool_reference_p): Delete.\n\ngcc/\n\t* rtl.h (constant_pool_reference_p): Delete.\n\t(find_constant_src): Declare.\n\t* rtlanal.c (find_constant_src): New function.\n\t* simplify-rtx.c (constant_pool_reference_p): Delete.\n\t* config/i386/i386.md: Use find_constant_src instead of\n\tconstant_pool_reference_p/avoid_constant_pool_reference pairs.\n\nFrom-SVN: r123106", "tree": {"sha": "dcedf9b4a8071779c736674a2898f51cb3a47948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcedf9b4a8071779c736674a2898f51cb3a47948"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a450639801b638f5b28d00b1ba0b560d8a2c271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a450639801b638f5b28d00b1ba0b560d8a2c271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a450639801b638f5b28d00b1ba0b560d8a2c271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a450639801b638f5b28d00b1ba0b560d8a2c271/comments", "author": null, "committer": null, "parents": [{"sha": "fe24cc36d56fe9bf973480d4fe97b2cbc652b69b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe24cc36d56fe9bf973480d4fe97b2cbc652b69b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe24cc36d56fe9bf973480d4fe97b2cbc652b69b"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "f6edacf979b444116f1b76e1cd2a3da87ee4ced3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a450639801b638f5b28d00b1ba0b560d8a2c271/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a450639801b638f5b28d00b1ba0b560d8a2c271/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a450639801b638f5b28d00b1ba0b560d8a2c271", "patch": "@@ -1,3 +1,12 @@\n+2007-03-21  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* rtl.h (constant_pool_reference_p): Delete.\n+\t(find_constant_src): Declare.\n+\t* rtlanal.c (find_constant_src): New function.\n+\t* simplify-rtx.c (constant_pool_reference_p): Delete.\n+\t* config/i386/i386.md: Use find_constant_src instead of\n+\tconstant_pool_reference_p/avoid_constant_pool_reference pairs.\n+\n 2007-03-21  Richard Sandiford  <richard@codesourcery.com>\n \n \t* doc/invoke.texi (-fpie, -fPIE): Document __pie__ and __PIE__."}, {"sha": "df1bacfc41b0e94b3fff96187b99f162424cbcfa", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a450639801b638f5b28d00b1ba0b560d8a2c271/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a450639801b638f5b28d00b1ba0b560d8a2c271/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2a450639801b638f5b28d00b1ba0b560d8a2c271", "patch": "@@ -2331,10 +2331,9 @@\n \t(match_operand:SF 1 \"memory_operand\" \"\"))]\n   \"reload_completed\n    && MEM_P (operands[1])\n-   && constant_pool_reference_p (operands[1])\"\n+   && (operands[2] = find_constant_src (insn))\"\n   [(set (match_dup 0)\n-\t(match_dup 1))]\n-  \"operands[1] = avoid_constant_pool_reference (operands[1]);\")\n+\t(match_dup 2))])\n \n \n ;; %%% Kill this when call knows how to work this out.\n@@ -3078,10 +3077,10 @@\n    && (GET_MODE (operands[0]) == XFmode\n        || GET_MODE (operands[0]) == SFmode\n        || GET_MODE (operands[0]) == DFmode)\n-   && constant_pool_reference_p (operands[1])\"\n-  [(set (match_dup 0) (match_dup 1))]\n+   && (operands[2] = find_constant_src (insn))\"\n+  [(set (match_dup 0) (match_dup 2))]\n {\n-  rtx c = avoid_constant_pool_reference (operands[1]);\n+  rtx c = operands[2];\n   rtx r = operands[0];\n \n   if (GET_CODE (r) == SUBREG)\n@@ -3099,8 +3098,6 @@\n     }\n   else if (MMX_REG_P (r))\n     FAIL;\n-\n-  operands[1] = c;\n })\n \n (define_split\n@@ -3111,10 +3108,10 @@\n    && (GET_MODE (operands[0]) == XFmode\n        || GET_MODE (operands[0]) == SFmode\n        || GET_MODE (operands[0]) == DFmode)\n-   && constant_pool_reference_p (operands[1])\"\n-  [(set (match_dup 0) (match_dup 1))]\n+   && (operands[2] = find_constant_src (insn))\"\n+  [(set (match_dup 0) (match_dup 2))]\n {\n-  rtx c = avoid_constant_pool_reference (SET_SRC (PATTERN (curr_insn)));\n+  rtx c = operands[2];\n   rtx r = operands[0];\n \n   if (GET_CODE (r) == SUBREG)\n@@ -3132,8 +3129,6 @@\n     }\n   else if (MMX_REG_P (r))\n     FAIL;\n-\n-  operands[1] = c;\n })\n \n (define_insn \"swapxf\""}, {"sha": "12f69e815b7010625588c6ad52b1bbf457841fd7", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a450639801b638f5b28d00b1ba0b560d8a2c271/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a450639801b638f5b28d00b1ba0b560d8a2c271/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2a450639801b638f5b28d00b1ba0b560d8a2c271", "patch": "@@ -1641,7 +1641,6 @@ extern rtx simplify_gen_subreg (enum machine_mode, rtx, enum machine_mode,\n extern rtx simplify_replace_rtx (rtx, rtx, rtx);\n extern rtx simplify_rtx (rtx);\n extern rtx avoid_constant_pool_reference (rtx);\n-extern bool constant_pool_reference_p (rtx x);\n extern bool mode_signbit_p (enum machine_mode, rtx);\n \n /* In regclass.c  */\n@@ -1703,6 +1702,7 @@ extern int dead_or_set_regno_p (rtx, unsigned int);\n extern rtx find_reg_note (rtx, enum reg_note, rtx);\n extern rtx find_regno_note (rtx, enum reg_note, unsigned int);\n extern rtx find_reg_equal_equiv_note (rtx);\n+extern rtx find_constant_src (rtx);\n extern int find_reg_fusage (rtx, enum rtx_code, rtx);\n extern int find_regno_fusage (rtx, enum rtx_code, unsigned int);\n extern int pure_call_p (rtx);"}, {"sha": "ce7018b5987a9c4bc78d617897af3beafac6802b", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a450639801b638f5b28d00b1ba0b560d8a2c271/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a450639801b638f5b28d00b1ba0b560d8a2c271/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=2a450639801b638f5b28d00b1ba0b560d8a2c271", "patch": "@@ -1750,6 +1750,30 @@ find_reg_equal_equiv_note (rtx insn)\n   return NULL;\n }\n \n+/* Check whether INSN is a single_set whose source is known to be\n+   equivalent to a constant.  Return that constant if so, otherwise\n+   return null.  */\n+\n+rtx\n+find_constant_src (rtx insn)\n+{\n+  rtx note, set, x;\n+\n+  set = single_set (insn);\n+  if (set)\n+    {\n+      x = avoid_constant_pool_reference (SET_SRC (set));\n+      if (CONSTANT_P (x))\n+\treturn x;\n+    }\n+\n+  note = find_reg_equal_equiv_note (insn);\n+  if (note && CONSTANT_P (XEXP (note, 0)))\n+    return XEXP (note, 0);\n+\n+  return NULL_RTX;\n+}\n+\n /* Return true if DATUM, or any overlap of DATUM, of kind CODE is found\n    in the CALL_INSN_FUNCTION_USAGE information of INSN.  */\n "}, {"sha": "e4af34d7adf73cf505c2ba480f7b868a6227bb5a", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a450639801b638f5b28d00b1ba0b560d8a2c271/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a450639801b638f5b28d00b1ba0b560d8a2c271/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=2a450639801b638f5b28d00b1ba0b560d8a2c271", "patch": "@@ -202,14 +202,6 @@ avoid_constant_pool_reference (rtx x)\n \n   return x;\n }\n-\n-/* Return true if X is a MEM referencing the constant pool.  */\n-\n-bool\n-constant_pool_reference_p (rtx x)\n-{\n-  return avoid_constant_pool_reference (x) != x;\n-}\n \f\n /* Make a unary operation by first seeing if it folds and otherwise making\n    the specified operation.  */"}]}