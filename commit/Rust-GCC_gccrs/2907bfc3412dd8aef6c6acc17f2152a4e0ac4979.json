{"sha": "2907bfc3412dd8aef6c6acc17f2152a4e0ac4979", "node_id": "C_kwDOANBUbNoAKDI5MDdiZmMzNDEyZGQ4YWVmNmM2YWNjMTdmMjE1MmE0ZTBhYzQ5Nzk", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-18T06:44:38Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-18T06:44:38Z"}, "message": "PR target/106231: Optimize (any_extend:DI (ctz:SI ...)) on x86_64.\n\nThis patch resolves PR target/106231 by providing insns that recognize\n(zero_extend:DI (ctz:SI ...)) and (sign_extend:DI (ctz:SI ...)).  The\nresult of ctz:SI is always between 0 and 32 (or undefined), so\nsign_extension is the same as zero_extension, and the result is already\nextended in the destination register.\n\nThings are a little complicated, because the existing implementation\nof *ctzsi2 handles multiple cases, including false dependencies, which\nwe continue to support in this patch.\n\n2022-07-18  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR target/106231\n\t* config/i386/i386.md (*ctzsidi2_<s>ext): New insn_and_split\n\tto recognize any_extend:DI of ctz:SI which is implicitly extended.\n\t(*ctzsidi2_<s>ext_falsedep): New define_insn to model a DImode\n\textended ctz:SI that has preceding xor to break false dependency.\n\ngcc/testsuite/ChangeLog\n\tPR target/106231\n\t* gcc.target/i386/pr106231-1.c: New test case.\n\t* gcc.target/i386/pr106231-2.c: New test case.", "tree": {"sha": "3fa532064cc1c2d1d393d0ad90905d3bd604f2fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fa532064cc1c2d1d393d0ad90905d3bd604f2fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2907bfc3412dd8aef6c6acc17f2152a4e0ac4979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2907bfc3412dd8aef6c6acc17f2152a4e0ac4979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2907bfc3412dd8aef6c6acc17f2152a4e0ac4979", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2907bfc3412dd8aef6c6acc17f2152a4e0ac4979/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c2505b31adfdef2214318484aaae987fd9e1e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c2505b31adfdef2214318484aaae987fd9e1e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43c2505b31adfdef2214318484aaae987fd9e1e0"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "9aaeb695f0fcdaed89409cc2f15faf81541c37f3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2907bfc3412dd8aef6c6acc17f2152a4e0ac4979/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2907bfc3412dd8aef6c6acc17f2152a4e0ac4979/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2907bfc3412dd8aef6c6acc17f2152a4e0ac4979", "patch": "@@ -16431,6 +16431,66 @@\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn_and_split \"*ctzsidi2_<s>ext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(any_extend:DI\n+\t  (ctz:SI\n+\t    (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\"\n+{\n+  if (TARGET_BMI)\n+    return \"tzcnt{l}\\t{%1, %k0|%k0, %1}\";\n+  else if (TARGET_CPU_P (GENERIC)\n+\t   && !optimize_function_for_size_p (cfun))\n+    /* tzcnt expands to 'rep bsf' and we can use it even if !TARGET_BMI.  */\n+    return \"rep%; bsf{l}\\t{%1, %k0|%k0, %1}\";\n+  return \"bsf{l}\\t{%1, %k0|%k0, %1}\";\n+}\n+  \"(TARGET_BMI || TARGET_CPU_P (GENERIC))\n+   && TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n+   && optimize_function_for_speed_p (cfun)\n+   && !reg_mentioned_p (operands[0], operands[1])\"\n+  [(parallel\n+    [(set (match_dup 0)\n+\t  (any_extend:DI (ctz:SI (match_dup 1))))\n+     (unspec [(match_dup 0)] UNSPEC_INSN_FALSE_DEP)\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"ix86_expand_clear (operands[0]);\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set (attr \"prefix_rep\")\n+     (if_then_else\n+       (ior (match_test \"TARGET_BMI\")\n+\t    (and (not (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t (match_test \"TARGET_CPU_P (GENERIC)\")))\n+       (const_string \"1\")\n+       (const_string \"0\")))\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*ctzsidi2_<s>ext_falsedep\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(any_extend:DI\n+\t  (ctz:SI\n+\t    (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))))\n+   (unspec [(match_operand:DI 2 \"register_operand\" \"0\")]\n+\t   UNSPEC_INSN_FALSE_DEP)\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\"\n+{\n+  if (TARGET_BMI)\n+    return \"tzcnt{l}\\t{%1, %k0|%k0, %1}\";\n+  else if (TARGET_CPU_P (GENERIC))\n+    /* tzcnt expands to 'rep bsf' and we can use it even if !TARGET_BMI.  */\n+    return \"rep%; bsf{l}\\t{%1, %k0|%k0, %1}\";\n+  else\n+    gcc_unreachable ();\n+}\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"bsr_rex64\"\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")"}, {"sha": "d17297ff754a9c88bb46632f82a5408832f99aaf", "filename": "gcc/testsuite/gcc.target/i386/pr106231-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2907bfc3412dd8aef6c6acc17f2152a4e0ac4979/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106231-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2907bfc3412dd8aef6c6acc17f2152a4e0ac4979/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106231-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106231-1.c?ref=2907bfc3412dd8aef6c6acc17f2152a4e0ac4979", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+long long\n+foo(long long x, unsigned bits)\n+{\n+  return x + (unsigned) __builtin_ctz(bits);\n+}\n+/* { dg-final { scan-assembler-not \"cltq\" } } */"}, {"sha": "fd3a8e3eb3f1a8eaaf5466f2045af36b78b45503", "filename": "gcc/testsuite/gcc.target/i386/pr106231-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2907bfc3412dd8aef6c6acc17f2152a4e0ac4979/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106231-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2907bfc3412dd8aef6c6acc17f2152a4e0ac4979/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106231-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106231-2.c?ref=2907bfc3412dd8aef6c6acc17f2152a4e0ac4979", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mtune=ivybridge\" } */\n+long long\n+foo(long long x, unsigned bits)\n+{\n+  return x + (unsigned) __builtin_ctz(bits);\n+}\n+/* { dg-final { scan-assembler-not \"cltq\" } } */"}]}