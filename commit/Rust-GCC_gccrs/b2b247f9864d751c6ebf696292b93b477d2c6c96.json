{"sha": "b2b247f9864d751c6ebf696292b93b477d2c6c96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJiMjQ3Zjk4NjRkNzUxYzZlYmY2OTYyOTJiOTNiNDc3ZDJjNmM5Ng==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-05-08T12:45:31Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-05-08T12:45:31Z"}, "message": "re PR fortran/31692 (Wrong code when passing function name as result to procedures)\n\n2007-05-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31692\n\t* trans-array.c (gfc_conv_array_parameter): Convert full array\n\treferences to the result of the procedure enclusing the call.\n\n2007-05-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31692\n\t* gfortran.dg/actual_array_result_1.f90: New test.\n\nFrom-SVN: r124546", "tree": {"sha": "2126533d0ca55b44dcb679213e46878622b70f8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2126533d0ca55b44dcb679213e46878622b70f8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2b247f9864d751c6ebf696292b93b477d2c6c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b247f9864d751c6ebf696292b93b477d2c6c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b247f9864d751c6ebf696292b93b477d2c6c96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b247f9864d751c6ebf696292b93b477d2c6c96/comments", "author": null, "committer": null, "parents": [{"sha": "e8ab09c1bd7bb5de727a5cd9d9ebb22799b4bd0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ab09c1bd7bb5de727a5cd9d9ebb22799b4bd0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8ab09c1bd7bb5de727a5cd9d9ebb22799b4bd0b"}], "stats": {"total": 120, "additions": 115, "deletions": 5}, "files": [{"sha": "3fc67d70405035953540753e740d16686a52aa83", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b247f9864d751c6ebf696292b93b477d2c6c96/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b247f9864d751c6ebf696292b93b477d2c6c96/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b2b247f9864d751c6ebf696292b93b477d2c6c96", "patch": "@@ -1,3 +1,9 @@\n+2007-05-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31692\n+\t* trans-array.c (gfc_conv_array_parameter): Convert full array\n+\treferences to the result of the procedure enclusing the call.\n+\n 2007-05-08  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29397"}, {"sha": "4997673904f798eb6e5fa7c097c4ef3b3e450cd4", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b247f9864d751c6ebf696292b93b477d2c6c96/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b247f9864d751c6ebf696292b93b477d2c6c96/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=b2b247f9864d751c6ebf696292b93b477d2c6c96", "patch": "@@ -4748,14 +4748,25 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n   tree desc;\n   tree tmp;\n   tree stmt;\n+  tree parent = DECL_CONTEXT (current_function_decl);\n+  bool full_array_var, this_array_result;\n   gfc_symbol *sym;\n   stmtblock_t block;\n \n+  full_array_var = (expr->expr_type == EXPR_VARIABLE\n+\t\t      && expr->ref->u.ar.type == AR_FULL);\n+  sym = full_array_var ? expr->symtree->n.sym : NULL;\n+\n+  /* Is this the result of the enclosing procedure?  */\n+  this_array_result = (full_array_var && sym->attr.flavor == FL_PROCEDURE);\n+  if (this_array_result\n+\t&& (sym->backend_decl != current_function_decl)\n+\t&& (sym->backend_decl != parent))\n+    this_array_result = false;\n+\n   /* Passing address of the array if it is not pointer or assumed-shape.  */\n-  if (expr->expr_type == EXPR_VARIABLE\n-       && expr->ref->u.ar.type == AR_FULL && g77)\n+  if (full_array_var && g77 && !this_array_result)\n     {\n-      sym = expr->symtree->n.sym;\n       tmp = gfc_get_symbol_decl (sym);\n \n       if (sym->ts.type == BT_CHARACTER)\n@@ -4784,8 +4795,25 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n         }\n     }\n \n-  se->want_pointer = 1;\n-  gfc_conv_expr_descriptor (se, expr, ss);\n+  if (this_array_result)\n+    {\n+      /* Result of the enclosing function.  */\n+      gfc_conv_expr_descriptor (se, expr, ss);\n+      se->expr = build_fold_addr_expr (se->expr);\n+\n+      if (g77 && TREE_TYPE (TREE_TYPE (se->expr)) != NULL_TREE\n+\t      && GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (TREE_TYPE (se->expr))))\n+\tse->expr = gfc_conv_array_data (build_fold_indirect_ref (se->expr));\n+\n+      return;\n+    }\n+  else\n+    {\n+      /* Every other type of array.  */\n+      se->want_pointer = 1;\n+      gfc_conv_expr_descriptor (se, expr, ss);\n+    }\n+\n \n   /* Deallocate the allocatable components of structures that are\n      not variable.  */"}, {"sha": "1542977acedb7f34dd664d2f36cc9563c8129e80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b247f9864d751c6ebf696292b93b477d2c6c96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b247f9864d751c6ebf696292b93b477d2c6c96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2b247f9864d751c6ebf696292b93b477d2c6c96", "patch": "@@ -1,3 +1,8 @@\n+2007-05-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31692\n+\t* gfortran.dg/actual_array_result_1.f90: New test.\n+\n 2007-05-08  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29397"}, {"sha": "cf79315cbb724feec9eba0906e474c6a14f2e157", "filename": "gcc/testsuite/gfortran.dg/actual_array_result_1.f90", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b247f9864d751c6ebf696292b93b477d2c6c96/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b247f9864d751c6ebf696292b93b477d2c6c96/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_result_1.f90?ref=b2b247f9864d751c6ebf696292b93b477d2c6c96", "patch": "@@ -0,0 +1,71 @@\n+! { dg-do run }\n+! PR fortan/31692\n+! Passing array valued results to procedures\n+!\n+! Test case contributed by rakuen_himawari@yahoo.co.jp\n+module one\n+  integer :: flag = 0\n+contains\n+  function foo1 (n)\n+    integer :: n\n+    integer :: foo1(n)\n+    if (flag == 0) then\n+      call bar1 (n, foo1)\n+    else\n+      call bar2 (n, foo1)\n+    end if\n+  end function\n+\n+  function foo2 (n)\n+    implicit none\n+    integer :: n\n+    integer,ALLOCATABLE :: foo2(:)\n+    allocate (foo2(n))\n+    if (flag == 0) then\n+      call bar1 (n, foo2)\n+    else\n+      call bar2 (n, foo2)\n+    end if\n+  end function\n+\n+  function foo3 (n)\n+    implicit none\n+    integer :: n\n+    integer,ALLOCATABLE :: foo3(:)\n+    allocate (foo3(n))\n+    foo3 = 0\n+    call bar2(n, foo3(2:(n-1)))  ! Check that sections are OK\n+  end function\n+\n+  subroutine bar1 (n, array)     ! Checks assumed size formal arg.\n+    integer :: n\n+    integer :: array(*)\n+    integer :: i\n+    do i = 1, n\n+      array(i) = i\n+    enddo\n+  end subroutine\n+\n+  subroutine bar2(n, array)     ! Checks assumed shape formal arg.\n+    integer :: n\n+    integer :: array(:)\n+    integer :: i\n+    do i = 1, size (array, 1)\n+      array(i) = i\n+    enddo\n+   end subroutine\n+end module\n+\n+program main\n+  use one\n+  integer :: n\n+  n = 3\n+  if(any (foo1(n) /= [ 1,2,3 ])) call abort()\n+  if(any (foo2(n) /= [ 1,2,3 ])) call abort()\n+  flag = 1\n+  if(any (foo1(n) /= [ 1,2,3 ])) call abort()\n+  if(any (foo2(n) /= [ 1,2,3 ])) call abort()\n+  n = 5\n+  if(any (foo3(n) /= [ 0,1,2,3,0 ])) call abort()\n+end program\n+! { dg-final { cleanup-modules \"one\" } }"}]}