{"sha": "be12e697e42187347dffea36e37db82cf04d37a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxMmU2OTdlNDIxODczNDdkZmZlYTM2ZTM3ZGI4MmNmMDRkMzdhNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-29T15:06:07Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-29T15:06:07Z"}, "message": "tree-flow-inline.h: Fix a comment typo.\n\n\t* tree-flow-inline.h: Fix a comment typo.\n\t* doc/tree-ssa.texi: Fix a typo.\n\nFrom-SVN: r98992", "tree": {"sha": "53b2bf17c9be2fae7bff6c994de299e07f052fb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53b2bf17c9be2fae7bff6c994de299e07f052fb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be12e697e42187347dffea36e37db82cf04d37a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be12e697e42187347dffea36e37db82cf04d37a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be12e697e42187347dffea36e37db82cf04d37a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be12e697e42187347dffea36e37db82cf04d37a5/comments", "author": null, "committer": null, "parents": [{"sha": "4e81e7c201f6093138fa387d8bdc708a279c6f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e81e7c201f6093138fa387d8bdc708a279c6f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e81e7c201f6093138fa387d8bdc708a279c6f0a"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "7cf1f42fecfb97d719c34888971050a8aafc6225", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be12e697e42187347dffea36e37db82cf04d37a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be12e697e42187347dffea36e37db82cf04d37a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be12e697e42187347dffea36e37db82cf04d37a5", "patch": "@@ -1,3 +1,8 @@\n+2005-04-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-flow-inline.h: Fix a comment typo.\n+\t* doc/tree-ssa.texi: Fix a typo.\n+\n 2005-04-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/fr30/fr30.c (fr30_expand_prologue): Use gcc_assert and"}, {"sha": "8528406dc2587c25acf751075a1b77f95106b65b", "filename": "gcc/doc/tree-ssa.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be12e697e42187347dffea36e37db82cf04d37a5/gcc%2Fdoc%2Ftree-ssa.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be12e697e42187347dffea36e37db82cf04d37a5/gcc%2Fdoc%2Ftree-ssa.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftree-ssa.texi?ref=be12e697e42187347dffea36e37db82cf04d37a5", "patch": "@@ -1051,7 +1051,7 @@ through the use list, preventing insertions and deletions in the list from\n resulting in invalid pointers.  This is a little slower since it adds a\n placeholder element and moves it through the list.  This element must be \n also be removed if the loop is terminated early.  A macro \n-(@code{BREAK_FROM SAFE_IMM_USE} is provided for this:\n+(@code{BREAK_FROM SAFE_IMM_USE}) is provided for this:\n \n @smallexample\n   FOR_EACH_IMM_USE_SAFE (use_p, iter, var)"}, {"sha": "d8a0b4b727ce3105b2fae6669cfe1b751c6c44ff", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be12e697e42187347dffea36e37db82cf04d37a5/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be12e697e42187347dffea36e37db82cf04d37a5/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=be12e697e42187347dffea36e37db82cf04d37a5", "patch": "@@ -203,7 +203,7 @@ static inline void\n link_imm_use_to_list (ssa_imm_use_t *linknode, ssa_imm_use_t *list)\n {\n   /* Link the new node at the head of the list.  If we are in the process of \n-     traversing the list, we wont visit any new nodes added to it.  */\n+     traversing the list, we won't visit any new nodes added to it.  */\n   linknode->prev = list;\n   linknode->next = list->next;\n   list->next->prev = linknode;"}]}