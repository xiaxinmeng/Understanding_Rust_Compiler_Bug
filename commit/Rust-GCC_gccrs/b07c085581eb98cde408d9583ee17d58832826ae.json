{"sha": "b07c085581eb98cde408d9583ee17d58832826ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA3YzA4NTU4MWViOThjZGU0MDhkOTU4M2VlMTdkNTg4MzI4MjZhZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-13T19:05:51Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-24T15:24:02Z"}, "message": "c++: Fix ICE with ill-formed array list-initialization [PR93712]\n\nMy P0388R4 patch changed build_array_conv to create an identity\nconversion at the start of the conversion chain and now we crash\nin convert_like_real:\n\n 7457     case ck_identity:\n 7458       if (BRACE_ENCLOSED_INITIALIZER_P (expr))\n 7459         {\n 7460           int nelts = CONSTRUCTOR_NELTS (expr);\n 7461           if (nelts == 0)\n 7462             expr = build_value_init (totype, complain);\n 7463           else if (nelts == 1)\n 7464             expr = CONSTRUCTOR_ELT (expr, 0)->value;\n 7465           else\n 7466             gcc_unreachable ();  // HERE\n 7467         }\n\nin a test like this\n\n  int f (int const (&)[2])\n  { return f({1, \"M\"}); }\n\nInstead of creating a ck_identity at the start of the conversion chain,\nso that conv_get_original_expr can be used with a ck_aggr, let's set\nu.expr for a ck_aggr, and adjust next_conversion not to try to see\nwhat's next in the chain if it gets a ck_aggr.\n\n2020-02-24  Marek Polacek  <polacek@redhat.com>\n\n\tPR c++/93712 - ICE with ill-formed array list-initialization.\n\t* call.c (next_conversion): Return NULL for ck_aggr.\n\t(build_aggr_conv): Set u.expr instead of u.next.\n\t(build_array_conv): Likewise.\n\t(build_complex_conv): Likewise.\n\t(conv_get_original_expr): Handle ck_aggr.\n\n\t* g++.dg/cpp0x/initlist-array11.C: New test.", "tree": {"sha": "981a197bd1484ba7bb8cd17f86037dd7b8690175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/981a197bd1484ba7bb8cd17f86037dd7b8690175"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b07c085581eb98cde408d9583ee17d58832826ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07c085581eb98cde408d9583ee17d58832826ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07c085581eb98cde408d9583ee17d58832826ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07c085581eb98cde408d9583ee17d58832826ae/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85c143d002a31bebb675161315c8e62db240b636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85c143d002a31bebb675161315c8e62db240b636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85c143d002a31bebb675161315c8e62db240b636"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "d441add49e161d9e75396025d71bfa58b1a66633", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b07c085581eb98cde408d9583ee17d58832826ae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b07c085581eb98cde408d9583ee17d58832826ae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b07c085581eb98cde408d9583ee17d58832826ae", "patch": "@@ -1,3 +1,12 @@\n+2020-02-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93712 - ICE with ill-formed array list-initialization.\n+\t* call.c (next_conversion): Return NULL for ck_aggr.\n+\t(build_aggr_conv): Set u.expr instead of u.next.\n+\t(build_array_conv): Likewise.\n+\t(build_complex_conv): Likewise.\n+\t(conv_get_original_expr): Handle ck_aggr.\n+\n 2020-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tP1937R2 - Fixing inconsistencies between const{expr,eval} functions"}, {"sha": "7a7f07c96307db47874706f28f3f44a446b5999f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b07c085581eb98cde408d9583ee17d58832826ae/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b07c085581eb98cde408d9583ee17d58832826ae/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b07c085581eb98cde408d9583ee17d58832826ae", "patch": "@@ -117,13 +117,13 @@ struct conversion {\n     /* The next conversion in the chain.  Since the conversions are\n        arranged from outermost to innermost, the NEXT conversion will\n        actually be performed before this conversion.  This variant is\n-       used only when KIND is neither ck_identity, ck_ambig nor\n+       used only when KIND is neither ck_identity, ck_aggr, ck_ambig nor\n        ck_list.  Please use the next_conversion function instead\n        of using this field directly.  */\n     conversion *next;\n     /* The expression at the beginning of the conversion chain.  This\n-       variant is used only if KIND is ck_identity or ck_ambig.  You can\n-       use conv_get_original_expr to get this expression.  */\n+       variant is used only if KIND is ck_identity, ck_aggr, or ck_ambig.\n+       You can use conv_get_original_expr to get this expression.  */\n     tree expr;\n     /* The array of conversions for an initializer_list, so this\n        variant is used only when KIN D is ck_list.  */\n@@ -861,7 +861,8 @@ next_conversion (conversion *conv)\n   if (conv == NULL\n       || conv->kind == ck_identity\n       || conv->kind == ck_ambig\n-      || conv->kind == ck_list)\n+      || conv->kind == ck_list\n+      || conv->kind == ck_aggr)\n     return NULL;\n   return conv->u.next;\n }\n@@ -1030,7 +1031,7 @@ build_aggr_conv (tree type, tree ctor, int flags, tsubst_flags_t complain)\n   c->rank = cr_exact;\n   c->user_conv_p = true;\n   c->check_narrowing = true;\n-  c->u.next = NULL;\n+  c->u.expr = ctor;\n   return c;\n }\n \n@@ -1083,7 +1084,7 @@ build_array_conv (tree type, tree ctor, int flags, tsubst_flags_t complain)\n   c->rank = rank;\n   c->user_conv_p = user;\n   c->bad_p = bad;\n-  c->u.next = build_identity_conv (TREE_TYPE (ctor), ctor);\n+  c->u.expr = ctor;\n   return c;\n }\n \n@@ -1129,7 +1130,7 @@ build_complex_conv (tree type, tree ctor, int flags,\n   c->rank = rank;\n   c->user_conv_p = user;\n   c->bad_p = bad;\n-  c->u.next = NULL;\n+  c->u.expr = ctor;\n   return c;\n }\n \n@@ -10500,7 +10501,7 @@ static tree\n conv_get_original_expr (conversion *c)\n {\n   for (; c; c = next_conversion (c))\n-    if (c->kind == ck_identity || c->kind == ck_ambig)\n+    if (c->kind == ck_identity || c->kind == ck_ambig || c->kind == ck_aggr)\n       return c->u.expr;\n   return NULL_TREE;\n }"}, {"sha": "7356523ede75e8001b61801c4faef3caa35eb463", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b07c085581eb98cde408d9583ee17d58832826ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b07c085581eb98cde408d9583ee17d58832826ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b07c085581eb98cde408d9583ee17d58832826ae", "patch": "@@ -1,3 +1,8 @@\n+2020-02-24  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93712 - ICE with ill-formed array list-initialization.\n+\t* g++.dg/cpp0x/initlist-array11.C: New test.\n+\n 2020-02-20  Mark Eggleston  <mark.eggleston@codethink.com>\n \n \tPR fortran/93604"}, {"sha": "d3e58dea129bdd8e84adf70628169a5b0eacb1f7", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-array11.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b07c085581eb98cde408d9583ee17d58832826ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b07c085581eb98cde408d9583ee17d58832826ae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-array11.C?ref=b07c085581eb98cde408d9583ee17d58832826ae", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/93712 - ICE with ill-formed array list-initialization.\n+// { dg-do compile { target c++11 } }\n+\n+int f (const int (&)[2]);\n+\n+int g ()\n+{\n+  const int (&r)[2] = {1, \"foo\"}; // { dg-error \"conversion\" }\n+  return f({1, \"foo\"}); // { dg-error \"conversion\" }\n+}"}]}