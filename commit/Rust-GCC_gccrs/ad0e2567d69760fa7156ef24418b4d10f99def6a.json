{"sha": "ad0e2567d69760fa7156ef24418b4d10f99def6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQwZTI1NjdkNjk3NjBmYTcxNTZlZjI0NDE4YjRkMTBmOTlkZWY2YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-26T09:21:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-26T09:21:44Z"}, "message": "re PR tree-optimization/48694 (possible memory hog bug)\n\n2011-04-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/48694\n\t* tree.h (OEP_CONSTANT_ADDRESS_OF): New operand_equal_flag.\n\t* fold-const.c (operand_equal_p): For TREE_CONSTANT ADDR_EXPRs\n\tcompare the operands with OEP_CONSTANT_ADDRESS_OF.  Treat\n\ttrees with TREE_SIDE_EFFECTS equal when OEP_CONSTANT_ADDRESS_OF\n\tis set.\n\n\t* gcc.dg/torture/pr48694-1.c: New testcase.\n\t* gcc.dg/torture/pr48694-2.c: Likewise.\n\nFrom-SVN: r172954", "tree": {"sha": "8ff4c2719e2c23a082193dd49ef8d3a607ac33e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ff4c2719e2c23a082193dd49ef8d3a607ac33e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad0e2567d69760fa7156ef24418b4d10f99def6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0e2567d69760fa7156ef24418b4d10f99def6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad0e2567d69760fa7156ef24418b4d10f99def6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad0e2567d69760fa7156ef24418b4d10f99def6a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d467c0bf219265a40b0cfe284092ec5382d4b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d467c0bf219265a40b0cfe284092ec5382d4b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d467c0bf219265a40b0cfe284092ec5382d4b1a"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "1aa0dec00110f565022680151f27abc39eb0a156", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0e2567d69760fa7156ef24418b4d10f99def6a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0e2567d69760fa7156ef24418b4d10f99def6a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ad0e2567d69760fa7156ef24418b4d10f99def6a", "patch": "@@ -2473,9 +2473,12 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n      equal if they have no side effects.  If we have two identical\n      expressions with side effects that should be treated the same due\n      to the only side effects being identical SAVE_EXPR's, that will\n-     be detected in the recursive calls below.  */\n+     be detected in the recursive calls below.\n+     If we are taking an invariant address of two identical objects\n+     they are necessarily equal as well.  */\n   if (arg0 == arg1 && ! (flags & OEP_ONLY_CONST)\n       && (TREE_CODE (arg0) == SAVE_EXPR\n+\t  || (flags & OEP_CONSTANT_ADDRESS_OF)\n \t  || (! TREE_SIDE_EFFECTS (arg0) && ! TREE_SIDE_EFFECTS (arg1))))\n     return 1;\n \n@@ -2538,7 +2541,8 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n \n       case ADDR_EXPR:\n \treturn operand_equal_p (TREE_OPERAND (arg0, 0), TREE_OPERAND (arg1, 0),\n-\t\t\t\t0);\n+\t\t\t\tTREE_CONSTANT (arg0) && TREE_CONSTANT (arg1)\n+\t\t\t\t? OEP_CONSTANT_ADDRESS_OF : 0);\n       default:\n \tbreak;\n       }"}, {"sha": "5efb6b164b5464a690a650ed7188a0e3e6208c1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0e2567d69760fa7156ef24418b4d10f99def6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0e2567d69760fa7156ef24418b4d10f99def6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad0e2567d69760fa7156ef24418b4d10f99def6a", "patch": "@@ -1,3 +1,9 @@\n+2011-04-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/48694\n+\t* gcc.dg/torture/pr48694-1.c: New testcase.\n+\t* gcc.dg/torture/pr48694-2.c: Likewise.\n+\n 2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/ext/underlying_type1.C: New."}, {"sha": "810366bc8b43c908ac5bcb907e97ad745b98e1d4", "filename": "gcc/testsuite/gcc.dg/torture/pr48694-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0e2567d69760fa7156ef24418b4d10f99def6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48694-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0e2567d69760fa7156ef24418b4d10f99def6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48694-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48694-1.c?ref=ad0e2567d69760fa7156ef24418b4d10f99def6a", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+extern volatile int g_89[5][9];\n+extern int g, *gp;\n+void func_64()\n+{\n+  int i;\n+  for (i = 0; i < 1; )\n+    {\n+      for (g = 0; g < 1; )\n+\treturn;\n+      gp = (int *)&g_89[g][0];\n+    }\n+}"}, {"sha": "4791ac3f70c7da643f7f6fcaccb7c00ed87722b7", "filename": "gcc/testsuite/gcc.dg/torture/pr48694-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0e2567d69760fa7156ef24418b4d10f99def6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48694-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0e2567d69760fa7156ef24418b4d10f99def6a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48694-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr48694-2.c?ref=ad0e2567d69760fa7156ef24418b4d10f99def6a", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+extern volatile int g_4[1][4];\n+extern int g_7;\n+void modify(int *);\n+void func_2()\n+{\n+  int l_46 = 4;\n+  if (g_7)\n+    modify(&l_46);\n+  else\n+    {\n+      int i;\n+      for (i = 0; i != 5; i += 1)\n+\t{\n+\t  volatile int *vp = &g_4[0][l_46];\n+\t  *vp = 0;\n+\t}\n+    }\n+}"}, {"sha": "8f25832589f570d05ed8403dd93f5c95f6e5a1f0", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad0e2567d69760fa7156ef24418b4d10f99def6a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad0e2567d69760fa7156ef24418b4d10f99def6a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ad0e2567d69760fa7156ef24418b4d10f99def6a", "patch": "@@ -5118,7 +5118,8 @@ extern tree fold_fma (location_t, tree, tree, tree, tree);\n enum operand_equal_flag\n {\n   OEP_ONLY_CONST = 1,\n-  OEP_PURE_SAME = 2\n+  OEP_PURE_SAME = 2,\n+  OEP_CONSTANT_ADDRESS_OF = 4\n };\n \n extern int operand_equal_p (const_tree, const_tree, unsigned int);"}]}