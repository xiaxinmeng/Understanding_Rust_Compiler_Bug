{"sha": "a21b399708175f6fc0ac723a0cebc127da421c60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxYjM5OTcwODE3NWY2ZmMwYWM3MjNhMGNlYmMxMjdkYTQyMWM2MA==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2021-04-11T23:41:26Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2021-04-27T16:33:41Z"}, "message": "aix: TLS precompute register parameters (PR 94177)\n\nAIX uses a compiler-managed TOC for global data, including TLS symbols.\nThe GCC TOC implementation manages the TOC entries through the constant pool.\n\nTLS symbols sometimes require a function call to obtain the TLS base\npointer.  The arguments to the TLS call can conflict with arguments to\na normal function call if the TLS symbol is an argument in the normal call.\nGCC specifically checks for this situation and precomputes the TLS\narguments, but the mechanism to check for this requirement utilizes\nlegitimate_constant_p().  The necessary result of legitimate_constant_p()\nfor correct TOC behavior and for correct TLS argument behavior is in\nconflict.\n\nThis patch adds a new target hook precompute_tls_p() to decide if an\nargument should be precomputed regardless of the result from\nlegitmate_constant_p().\n\ngcc/ChangeLog:\n\n\tPR target/94177\n\t* calls.c (precompute_register_parameters): Additionally test\n\ttargetm.precompute_tls_p to pre-compute argument.\n\t* config/rs6000/aix.h (TARGET_PRECOMPUTE_TLS_P): Define.\n\t* config/rs6000/rs6000.c (rs6000_aix_precompute_tls_p): New.\n\t* target.def (precompute_tls_p): New.\n\t* doc/tm.texi.in (TARGET_PRECOMPUTE_TLS_P): Add hook documentation.\n\t* doc/tm.texi: Regenerated.", "tree": {"sha": "5379a7edcb5572f3d04c93f95d4969e153405187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5379a7edcb5572f3d04c93f95d4969e153405187"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a21b399708175f6fc0ac723a0cebc127da421c60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21b399708175f6fc0ac723a0cebc127da421c60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a21b399708175f6fc0ac723a0cebc127da421c60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21b399708175f6fc0ac723a0cebc127da421c60/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0c371d0ea297af2e3180c64cd18f2bfce919b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0c371d0ea297af2e3180c64cd18f2bfce919b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0c371d0ea297af2e3180c64cd18f2bfce919b1"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "883d08ba5f280d476f1dca98bd9fcdd2ac52f0cd", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=a21b399708175f6fc0ac723a0cebc127da421c60", "patch": "@@ -1002,7 +1002,8 @@ precompute_register_parameters (int num_actuals, struct arg_data *args,\n \t/* If the value is a non-legitimate constant, force it into a\n \t   pseudo now.  TLS symbols sometimes need a call to resolve.  */\n \tif (CONSTANT_P (args[i].value)\n-\t    && !targetm.legitimate_constant_p (args[i].mode, args[i].value))\n+\t    && (!targetm.legitimate_constant_p (args[i].mode, args[i].value)\n+\t\t|| targetm.precompute_tls_p (args[i].mode, args[i].value)))\n \t  args[i].value = force_reg (args[i].mode, args[i].value);\n \n \t/* If we're going to have to load the value by parts, pull the"}, {"sha": "b116e1a36bb0cda3d0c1868d0dcc8c38efa34ba3", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=a21b399708175f6fc0ac723a0cebc127da421c60", "patch": "@@ -279,3 +279,4 @@\n /* Use standard DWARF numbering for DWARF debugging information.  */\n #define RS6000_USE_DWARF_NUMBERING\n \n+#define TARGET_PRECOMPUTE_TLS_P rs6000_aix_precompute_tls_p"}, {"sha": "60b8e3ec2e5b31974c2329313526a1aa0c8f97a6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a21b399708175f6fc0ac723a0cebc127da421c60", "patch": "@@ -9608,7 +9608,8 @@ rs6000_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n       && SYMBOL_REF_TLS_MODEL (XEXP (XEXP (x, 0), 0)) != 0)\n     return true;\n \n-  /* Do not place an ELF TLS symbol in the constant pool.  */\n+  /* Allow AIX TOC TLS symbols in the constant pool,\n+     but not ELF TLS symbols.  */\n   return TARGET_ELF && tls_referenced_p (x);\n }\n \n@@ -25370,6 +25371,18 @@ rs6000_legitimate_constant_p (machine_mode mode, rtx x)\n   return true;\n }\n \n+/* Implement TARGET_PRECOMPUTE_TLS_P.\n+\n+   On the AIX, TLS symbols are in the TOC, which is maintained in the\n+   constant pool.  AIX TOC TLS symbols need to be pre-computed, but\n+   must be considered legitimate constants.  */\n+\n+static bool\n+rs6000_aix_precompute_tls_p (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n+{\n+  return tls_referenced_p (x);\n+}\n+\n \f\n /* Return TRUE iff the sequence ending in LAST sets the static chain.  */\n "}, {"sha": "b370bc76b25192c3b2322c7902f9a4ed23b0335c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a21b399708175f6fc0ac723a0cebc127da421c60", "patch": "@@ -5880,6 +5880,15 @@ This hook returns true if @var{x} is a legitimate constant for a\n The default definition returns true.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_PRECOMPUTE_TLS_P (machine_mode @var{mode}, rtx @var{x})\n+This hook returns true if @var{x} is a TLS operand on the target\n+machine that should be pre-computed when used as the argument in a call.\n+You can assume that @var{x} satisfies @code{CONSTANT_P}, so you need not \n+check this.\n+\n+The default definition returns false.\n+@end deftypefn\n+\n @deftypefn {Target Hook} rtx TARGET_DELEGITIMIZE_ADDRESS (rtx @var{x})\n This hook is used to undo the possibly obfuscating effects of the\n @code{LEGITIMIZE_ADDRESS} and @code{LEGITIMIZE_RELOAD_ADDRESS} target"}, {"sha": "2974dae2701799368c2c75f7820681a32c51c1ec", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=a21b399708175f6fc0ac723a0cebc127da421c60", "patch": "@@ -4147,6 +4147,8 @@ address;  but often a machine-dependent strategy can generate better code.\n \n @hook TARGET_LEGITIMATE_CONSTANT_P\n \n+@hook TARGET_PRECOMPUTE_TLS_P\n+\n @hook TARGET_DELEGITIMIZE_ADDRESS\n \n @hook TARGET_CONST_NOT_OK_FOR_DEBUG_P"}, {"sha": "0ebfb58fa6f49b2b05513e6095873638820014a4", "filename": "gcc/target.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21b399708175f6fc0ac723a0cebc127da421c60/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=a21b399708175f6fc0ac723a0cebc127da421c60", "patch": "@@ -2715,6 +2715,18 @@ The default definition returns true.\",\n  bool, (machine_mode mode, rtx x),\n  hook_bool_mode_rtx_true)\n \n+/* True if X is a TLS operand whose value should be pre-computed.  */\n+DEFHOOK\n+(precompute_tls_p,\n+ \"This hook returns true if @var{x} is a TLS operand on the target\\n\\\n+machine that should be pre-computed when used as the argument in a call.\\n\\\n+You can assume that @var{x} satisfies @code{CONSTANT_P}, so you need not \\n\\\n+check this.\\n\\\n+\\n\\\n+The default definition returns false.\",\n+ bool, (machine_mode mode, rtx x),\n+ hook_bool_mode_rtx_false)\n+\n /* True if the constant X cannot be placed in the constant pool.  */\n DEFHOOK\n (cannot_force_const_mem,"}]}