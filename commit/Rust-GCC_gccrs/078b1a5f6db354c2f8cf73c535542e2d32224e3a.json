{"sha": "078b1a5f6db354c2f8cf73c535542e2d32224e3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc4YjFhNWY2ZGIzNTRjMmY4Y2Y3M2M1MzU1NDJlMmQzMjIyNGUzYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T10:54:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T10:54:01Z"}, "message": "[multiple changes]\n\n2015-10-26  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch13.adb: Minor reformatting.\n\n2015-10-26  Steve Baird  <baird@adacore.com>\n\n\t* exp_disp.adb: Omit most dispatch table initialization code\n\tif Generate_SCIL is true.\n\n2015-10-26  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sinfo.ads, exp_ch3.adb: Revert previous change.\n\t(Build_Record_Init_Proc): Do not build an aggregate if\n\tModify_Tree_For_C.\n\nFrom-SVN: r229327", "tree": {"sha": "7df3656031b815260fbd0eca9f3d1a79fbca4ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7df3656031b815260fbd0eca9f3d1a79fbca4ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/078b1a5f6db354c2f8cf73c535542e2d32224e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078b1a5f6db354c2f8cf73c535542e2d32224e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/078b1a5f6db354c2f8cf73c535542e2d32224e3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078b1a5f6db354c2f8cf73c535542e2d32224e3a/comments", "author": null, "committer": null, "parents": [{"sha": "e4bda61026bf4b79fecf43698ac76c0ee1de3266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bda61026bf4b79fecf43698ac76c0ee1de3266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4bda61026bf4b79fecf43698ac76c0ee1de3266"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "1e7dfdbeff7fe6246a260681569a4e7ab211e3ae", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078b1a5f6db354c2f8cf73c535542e2d32224e3a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078b1a5f6db354c2f8cf73c535542e2d32224e3a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=078b1a5f6db354c2f8cf73c535542e2d32224e3a", "patch": "@@ -1,3 +1,18 @@\n+2015-10-26  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch13.adb: Minor reformatting.\n+\n+2015-10-26  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_disp.adb: Omit most dispatch table initialization code\n+\tif Generate_SCIL is true.\n+\n+2015-10-26  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sinfo.ads, exp_ch3.adb: Revert previous change.\n+\t(Build_Record_Init_Proc): Do not build an aggregate if\n+\tModify_Tree_For_C.\n+\n 2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Find_Corresponding_Spec): Reject a subprogram"}, {"sha": "6fb3a5983517844c04f342f284ac8726b129dbd3", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078b1a5f6db354c2f8cf73c535542e2d32224e3a/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078b1a5f6db354c2f8cf73c535542e2d32224e3a/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=078b1a5f6db354c2f8cf73c535542e2d32224e3a", "patch": "@@ -760,10 +760,8 @@ package body Exp_Ch3 is\n          --  want to inline, because nested stuff may cause difficulties in\n          --  inter-unit inlining, and furthermore there is in any case no\n          --  point in inlining such complex init procs.\n-         --  Also do not inline in case of Modify_Tree_For_C where front-end\n-         --  inlining is used and may not always play well with init procs.\n \n-         if not Has_Task (Proc_Id) and then not Modify_Tree_For_C then\n+         if not Has_Task (Proc_Id) then\n             Set_Is_Inlined (Proc_Id);\n          end if;\n \n@@ -3600,12 +3598,9 @@ package body Exp_Ch3 is\n          --  In addition, when compiled for another unit for inlining purposes,\n          --  it may make reference to entities that have not been elaborated\n          --  yet. Similar considerations apply to task types.\n-         --  Also do not inline in case of Modify_Tree_For_C where front-end\n-         --  inlining is used and may not always play well with init procs.\n \n          if not Is_Concurrent_Type (Rec_Type)\n            and then not Has_Task (Rec_Type)\n-           and then not Modify_Tree_For_C\n          then\n             Set_Is_Inlined  (Proc_Id);\n          end if;\n@@ -3617,6 +3612,14 @@ package body Exp_Ch3 is\n             Set_Debug_Info_Off (Proc_Id);\n          end if;\n \n+         --  Do not build an aggregate if Modify_Tree_For_C, this isn't\n+         --  needed and may generate early references to non frozen types\n+         --  since we expand aggregate much more systematically.\n+\n+         if Modify_Tree_For_C then\n+            return;\n+         end if;\n+\n          declare\n             Agg : constant Node_Id :=\n                     Build_Equivalent_Record_Aggregate (Rec_Type);"}, {"sha": "7abc0b543a5a65051ddd5b7d1d4aac18b57daca9", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078b1a5f6db354c2f8cf73c535542e2d32224e3a/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078b1a5f6db354c2f8cf73c535542e2d32224e3a/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=078b1a5f6db354c2f8cf73c535542e2d32224e3a", "patch": "@@ -3903,6 +3903,10 @@ package body Exp_Disp is\n             end loop;\n          end if;\n \n+         if Generate_SCIL then\n+            Nb_Predef_Prims := 0;\n+         end if;\n+\n          --  Stage 2: Create the thunks associated with the predefined\n          --  primitives and save their entity to fill the aggregate.\n \n@@ -3924,6 +3928,7 @@ package body Exp_Disp is\n                   if Is_Predefined_Dispatching_Operation (Prim)\n                     and then not Is_Abstract_Subprogram (Prim)\n                     and then not Is_Eliminated (Prim)\n+                    and then not Generate_SCIL\n                     and then not Present (Prim_Table\n                                            (UI_To_Int (DT_Position (Prim))))\n                   then\n@@ -4620,6 +4625,10 @@ package body Exp_Disp is\n       DT_Ptr  := Node (First_Elmt (Access_Disp_Table (Typ)));\n       Nb_Prim := UI_To_Int (DT_Entry_Count (First_Tag_Component (Typ)));\n \n+      if Generate_SCIL then\n+         Nb_Prim := 0;\n+      end if;\n+\n       Set_Is_Statically_Allocated (DT,  Is_Library_Level_Tagged_Type (Typ));\n       Set_Is_Statically_Allocated (SSD, Is_Library_Level_Tagged_Type (Typ));\n       Set_Is_Statically_Allocated (TSD, Is_Library_Level_Tagged_Type (Typ));\n@@ -4685,6 +4694,14 @@ package body Exp_Disp is\n                  Make_SCIL_Dispatch_Table_Tag_Init (Sloc (Last (Result)));\n                Set_SCIL_Entity (New_Node, Typ);\n                Set_SCIL_Node (Last (Result), New_Node);\n+\n+               goto Early_Exit_For_SCIL;\n+\n+               --  Gnat2scil has its own implementation of dispatch tables,\n+               --  different than what is being implemented here. Generating\n+               --  further dispatch table initialization code would just\n+               --  cause gnat2scil to generate useless Scil which CodePeer\n+               --  would waste time and space analyzing, so we skip it.\n             end if;\n \n          --  Generate:\n@@ -4754,6 +4771,14 @@ package body Exp_Disp is\n                  Make_SCIL_Dispatch_Table_Tag_Init (Sloc (Last (Result)));\n                Set_SCIL_Entity (New_Node, Typ);\n                Set_SCIL_Node (Last (Result), New_Node);\n+\n+               goto Early_Exit_For_SCIL;\n+\n+               --  Gnat2scil has its own implementation of dispatch tables,\n+               --  different than what is being implemented here. Generating\n+               --  further dispatch table initialization code would just\n+               --  cause gnat2scil to generate useless Scil which CodePeer\n+               --  would waste time and space analyzing, so we skip it.\n             end if;\n \n             Append_To (Result,\n@@ -6213,6 +6238,8 @@ package body Exp_Disp is\n          end;\n       end if;\n \n+      <<Early_Exit_For_SCIL>>\n+\n       --  Register the tagged type in the call graph nodes table\n \n       Register_CG_Node (Typ);\n@@ -7087,6 +7114,7 @@ package body Exp_Disp is\n \n       if not RTE_Available (RE_Tag)\n         or else Is_Eliminated (Ultimate_Alias (Prim))\n+        or else Generate_SCIL\n       then\n          return L;\n       end if;"}, {"sha": "93da0497f37ee2a3153daaafe3069848d6236845", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078b1a5f6db354c2f8cf73c535542e2d32224e3a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078b1a5f6db354c2f8cf73c535542e2d32224e3a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=078b1a5f6db354c2f8cf73c535542e2d32224e3a", "patch": "@@ -4003,14 +4003,14 @@ package body Sem_Ch13 is\n                if Debug_Flag_Dot_XX then\n                   null;\n \n-               --  OK if current attribute_definition_clause is expansion\n-               --  of inherited aspect.\n+               --  OK if current attribute_definition_clause is expansion of\n+               --  inherited aspect.\n \n                elsif Aspect_Rep_Item (Inherited) = N then\n                   null;\n \n-               --  Indicate the operation that must be overridden, rather\n-               --  than redefining the indexing aspect\n+               --  Indicate the operation that must be overridden, rather than\n+               --  redefining the indexing aspect.\n \n                else\n                   Illegal_Indexing"}, {"sha": "5f2f0920eaff1258f436a63c0ff962f431cc8f19", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078b1a5f6db354c2f8cf73c535542e2d32224e3a/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078b1a5f6db354c2f8cf73c535542e2d32224e3a/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=078b1a5f6db354c2f8cf73c535542e2d32224e3a", "patch": "@@ -735,9 +735,6 @@ package Sinfo is\n    --    they are systematically expanded into loops (for arrays) and\n    --    individual assignments (for records).\n \n-   --    Initialization procedures (init procs) for records and arrays are\n-   --    not inlined.\n-\n    ------------------------------------\n    -- Description of Semantic Fields --\n    ------------------------------------"}]}