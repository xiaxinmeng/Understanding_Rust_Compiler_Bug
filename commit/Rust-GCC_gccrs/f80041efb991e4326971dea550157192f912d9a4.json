{"sha": "f80041efb991e4326971dea550157192f912d9a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgwMDQxZWZiOTkxZTQzMjY5NzFkZWE1NTAxNTcxOTJmOTEyZDlhNA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-05-03T09:35:42Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-05-03T09:35:42Z"}, "message": "Fix PR44281, bad RA with global regs.\n\n\tPR rtl-optimization/44281\n\t* hard-reg-set.h (struct target_hard_regs): New field\n\tx_fixed_nonglobal_reg_set.\n\t(fixed_nonglobal_reg_set): New macro.\n\t* reginfo.c (init_reg_sets_1): Initialize it.\n\t* ira.c (setup_alloc_regs): Use fixed_nonglobal_reg_set instead\n\tof fixed_reg_set.\n\t* df-scan.c (df_insn_refs_collect): Asms may reference global regs.\n\ntestsuite/\n\tPR rtl-optimization/44281\n\t* gcc.target/i386/pr44281.c: New test.\n\nFrom-SVN: r235809", "tree": {"sha": "db4f856ef821d7dc564edeb431dc0da7bf076b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db4f856ef821d7dc564edeb431dc0da7bf076b30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f80041efb991e4326971dea550157192f912d9a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80041efb991e4326971dea550157192f912d9a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f80041efb991e4326971dea550157192f912d9a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80041efb991e4326971dea550157192f912d9a4/comments", "author": null, "committer": null, "parents": [{"sha": "1cfcd39eee915a7582adc113fa6e7faac8b943e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cfcd39eee915a7582adc113fa6e7faac8b943e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cfcd39eee915a7582adc113fa6e7faac8b943e4"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "608f64b63898d870646fd164bd866ef8a46516b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80041efb991e4326971dea550157192f912d9a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80041efb991e4326971dea550157192f912d9a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f80041efb991e4326971dea550157192f912d9a4", "patch": "@@ -1,3 +1,14 @@\n+2016-05-03  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/44281\n+\t* hard-reg-set.h (struct target_hard_regs): New field\n+\tx_fixed_nonglobal_reg_set.\n+\t(fixed_nonglobal_reg_set): New macro.\n+\t* reginfo.c (init_reg_sets_1): Initialize it.\n+\t* ira.c (setup_alloc_regs): Use fixed_nonglobal_reg_set instead\n+\tof fixed_reg_set.\n+\t* df-scan.c (df_insn_refs_collect): Asms may reference global regs.\n+\n 2016-05-03  bin cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/56541"}, {"sha": "19d8e0f0eeb83f7e7fbc71355a632cc138f58467", "filename": "gcc/df-scan.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80041efb991e4326971dea550157192f912d9a4/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80041efb991e4326971dea550157192f912d9a4/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=f80041efb991e4326971dea550157192f912d9a4", "patch": "@@ -3223,11 +3223,22 @@ df_insn_refs_collect (struct df_collection_rec *collection_rec,\n         }\n     }\n \n+  int flags = (is_cond_exec) ? DF_REF_CONDITIONAL : 0;\n   /* For CALL_INSNs, first record DF_REF_BASE register defs, as well as\n      uses from CALL_INSN_FUNCTION_USAGE. */\n   if (CALL_P (insn_info->insn))\n-    df_get_call_refs (collection_rec, bb, insn_info,\n-\t\t      (is_cond_exec) ? DF_REF_CONDITIONAL : 0);\n+    df_get_call_refs (collection_rec, bb, insn_info, flags);\n+\n+  if (asm_noperands (PATTERN (insn_info->insn)) >= 0)\n+    for (unsigned i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+      if (global_regs[i])\n+       {\n+         /* As with calls, asm statements reference all global regs. */\n+         df_ref_record (DF_REF_BASE, collection_rec, regno_reg_rtx[i],\n+                        NULL, bb, insn_info, DF_REF_REG_USE, flags);\n+         df_ref_record (DF_REF_BASE, collection_rec, regno_reg_rtx[i],\n+                        NULL, bb, insn_info, DF_REF_REG_DEF, flags);\n+       }\n \n   /* Record other defs.  These should be mostly for DF_REF_REGULAR, so\n      that a qsort on the defs is unnecessary in most cases.  */"}, {"sha": "b94ebb3929f2c4bc4e1e45bd0af1e04d1044065e", "filename": "gcc/hard-reg-set.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80041efb991e4326971dea550157192f912d9a4/gcc%2Fhard-reg-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80041efb991e4326971dea550157192f912d9a4/gcc%2Fhard-reg-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhard-reg-set.h?ref=f80041efb991e4326971dea550157192f912d9a4", "patch": "@@ -660,6 +660,12 @@ struct target_hard_regs {\n      across calls even if we are willing to save and restore them.  */\n   HARD_REG_SET x_call_fixed_reg_set;\n \n+  /* Contains registers that are fixed use -- i.e. in fixed_reg_set -- but\n+     only if they are not merely part of that set because they are global\n+     regs.  Global regs that are not otherwise fixed can still take part\n+     in register allocation.  */\n+  HARD_REG_SET x_fixed_nonglobal_reg_set;\n+\n   /* Contains 1 for registers that are set or clobbered by calls.  */\n   /* ??? Ideally, this would be just call_used_regs plus global_regs, but\n      for someone's bright idea to have call_used_regs strictly include\n@@ -722,6 +728,8 @@ extern struct target_hard_regs *this_target_hard_regs;\n   (this_target_hard_regs->x_fixed_regs)\n #define fixed_reg_set \\\n   (this_target_hard_regs->x_fixed_reg_set)\n+#define fixed_nonglobal_reg_set \\\n+  (this_target_hard_regs->x_fixed_nonglobal_reg_set)\n #define call_used_regs \\\n   (this_target_hard_regs->x_call_used_regs)\n #define call_really_used_regs \\"}, {"sha": "d383a5513705e3447d26c64ea7343e607425ea7f", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80041efb991e4326971dea550157192f912d9a4/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80041efb991e4326971dea550157192f912d9a4/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=f80041efb991e4326971dea550157192f912d9a4", "patch": "@@ -512,7 +512,7 @@ setup_alloc_regs (bool use_hard_frame_p)\n #ifdef ADJUST_REG_ALLOC_ORDER\n   ADJUST_REG_ALLOC_ORDER;\n #endif\n-  COPY_HARD_REG_SET (no_unit_alloc_regs, fixed_reg_set);\n+  COPY_HARD_REG_SET (no_unit_alloc_regs, fixed_nonglobal_reg_set);\n   if (! use_hard_frame_p)\n     SET_HARD_REG_BIT (no_unit_alloc_regs, HARD_FRAME_POINTER_REGNUM);\n   setup_class_hard_regs ();"}, {"sha": "f4dac083045d99f7b838f599a7304dbada9af844", "filename": "gcc/reginfo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80041efb991e4326971dea550157192f912d9a4/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80041efb991e4326971dea550157192f912d9a4/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=f80041efb991e4326971dea550157192f912d9a4", "patch": "@@ -449,6 +449,7 @@ init_reg_sets_1 (void)\n     }\n \n   COPY_HARD_REG_SET (call_fixed_reg_set, fixed_reg_set);\n+  COPY_HARD_REG_SET (fixed_nonglobal_reg_set, fixed_reg_set);\n \n   /* Preserve global registers if called more than once.  */\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)"}, {"sha": "bc7c93f5a5dd6d9dc74354f3c58722cd0a578950", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80041efb991e4326971dea550157192f912d9a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80041efb991e4326971dea550157192f912d9a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f80041efb991e4326971dea550157192f912d9a4", "patch": "@@ -1,3 +1,8 @@\n+2016-05-03  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/44281\n+\t* gcc.target/i386/pr44281.c: New test.\n+\n 2016-05-03  bin cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/56541"}, {"sha": "e8e9edef319777e022057aca03909367f5371672", "filename": "gcc/testsuite/gcc.target/i386/pr44281.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f80041efb991e4326971dea550157192f912d9a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44281.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f80041efb991e4326971dea550157192f912d9a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44281.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr44281.c?ref=f80041efb991e4326971dea550157192f912d9a4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-std=gnu99 -O2\" } */\n+/* { dg-final { scan-assembler \"salq\\[ \\\\t\\]+\\\\\\$8, %rbx\" } } */\n+\n+#include <stdint.h>\n+\n+register uint64_t global_flag_stack __asm__(\"rbx\");\n+\n+void push_flag_into_global_reg_var(uint64_t a, uint64_t b) {\n+  uint64_t flag = (a==b);\n+  global_flag_stack <<= 8;\n+  global_flag_stack  |= flag;\n+}"}]}