{"sha": "3fa56191391ce760d4f234500f5fa1bc310ed934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZhNTYxOTEzOTFjZTc2MGQ0ZjIzNDUwMGY1ZmExYmMzMTBlZDkzNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-08-27T06:07:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-27T06:07:08Z"}, "message": "decl.c (lookup_label): Build labels on the permanent obstack when building statement trees.\n\n\t* decl.c (lookup_label): Build labels on the permanent obstack\n\twhen building statement trees.  Don't build RTL for labels when\n\tbuilding statement trees.\n\t* semantics.c (finish_goto_stmt): Use LABEL_DECLs even when\n\tbuilding statement trees.\n\t(finish_label_stmt): Likewise.\n\t(expand_stmt): Adjust accordingly.\n\t* pt.c (tsubst_expr); Likewise.\n\t(do_decl_instantiation): Robustify.\n\nFrom-SVN: r28918", "tree": {"sha": "1541a62ea0f26cf3d6fafa97337f2ca84b68f590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1541a62ea0f26cf3d6fafa97337f2ca84b68f590"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fa56191391ce760d4f234500f5fa1bc310ed934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa56191391ce760d4f234500f5fa1bc310ed934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa56191391ce760d4f234500f5fa1bc310ed934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa56191391ce760d4f234500f5fa1bc310ed934/comments", "author": null, "committer": null, "parents": [{"sha": "ed6d16ade21c62a2135bcb18703a2e121099838d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6d16ade21c62a2135bcb18703a2e121099838d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed6d16ade21c62a2135bcb18703a2e121099838d"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "0db3c9029cdf2fbde7e7773657c50abe27bbe18c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa56191391ce760d4f234500f5fa1bc310ed934/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa56191391ce760d4f234500f5fa1bc310ed934/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3fa56191391ce760d4f234500f5fa1bc310ed934", "patch": "@@ -1,5 +1,15 @@\n 1999-08-26  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* decl.c (lookup_label): Build labels on the permanent obstack\n+\twhen building statement trees.  Don't build RTL for labels when\n+\tbuilding statement trees.\n+\t* semantics.c (finish_goto_stmt): Use LABEL_DECLs even when\n+\tbuilding statement trees.\n+\t(finish_label_stmt): Likewise.\n+\t(expand_stmt): Adjust accordingly.\n+\t* pt.c (tsubst_expr); Likewise.\n+\t(do_decl_instantiation): Robustify.\n+\t\n \t* cp-tree.h (AGGR_INIT_VIA_CTOR_P): New macro.\n \t* tree.c (build_cplus_new): Set it.\n \t* expr.c (cplus_expand_expr): Use it."}, {"sha": "b04673c7cecea1e69613b268462da8cc133602a9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa56191391ce760d4f234500f5fa1bc310ed934/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa56191391ce760d4f234500f5fa1bc310ed934/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3fa56191391ce760d4f234500f5fa1bc310ed934", "patch": "@@ -4829,10 +4829,14 @@ lookup_label (id)\n       return decl;\n     }\n \n+  if (building_stmt_tree ())\n+    push_permanent_obstack ();\n   decl = build_decl (LABEL_DECL, id, void_type_node);\n-\n-  /* Make sure every label has an rtx.  */\n-  label_rtx (decl);\n+  if (building_stmt_tree ())\n+    pop_obstacks ();\n+  else\n+    /* Make sure every label has an rtx.  */\n+    label_rtx (decl);\n \n   /* A label not explicitly declared must be local to where it's ref'd.  */\n   DECL_CONTEXT (decl) = current_function_decl;"}, {"sha": "f5c72b076c8924973b2d5e5e4aca1056f3eb1ec6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa56191391ce760d4f234500f5fa1bc310ed934/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa56191391ce760d4f234500f5fa1bc310ed934/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3fa56191391ce760d4f234500f5fa1bc310ed934", "patch": "@@ -7401,11 +7401,13 @@ tsubst_expr (t, args, complain, in_decl)\n     case GOTO_STMT:\n       lineno = STMT_LINENO (t);\n       t = GOTO_DESTINATION (t);\n-      if (TREE_CODE (t) != IDENTIFIER_NODE)\n+      if (TREE_CODE (t) != LABEL_DECL)\n \t/* Computed goto's must be tsubst'd into.  On the other hand,\n \t   non-computed gotos must not be; the identifier in question\n \t   will have no binding.  */\n \tt = tsubst_expr (t, args, complain, in_decl);\n+      else\n+\tt = DECL_NAME (t);\n       finish_goto_stmt (t);\n       break;\n \n@@ -9132,7 +9134,11 @@ do_decl_instantiation (declspecs, declarator, storage)\n   tree result = NULL_TREE;\n   int extern_p = 0;\n \n-  if (! DECL_LANG_SPECIFIC (decl))\n+  if (!decl)\n+    /* An error ocurred, for which grokdeclarator has already issued\n+       an appropriate message.  */\n+    return;\n+  else if (! DECL_LANG_SPECIFIC (decl))\n     {\n       cp_error (\"explicit instantiation of non-template `%#D'\", decl);\n       return;"}, {"sha": "b9457c064a93850975ad59fcd2ac2731ebfef834", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fa56191391ce760d4f234500f5fa1bc310ed934/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fa56191391ce760d4f234500f5fa1bc310ed934/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3fa56191391ce760d4f234500f5fa1bc310ed934", "patch": "@@ -599,17 +599,19 @@ void\n finish_goto_stmt (destination)\n      tree destination;\n {\n+  if (TREE_CODE (destination) == IDENTIFIER_NODE)\n+    destination = lookup_label (destination);\n+\n   if (building_stmt_tree ())\n     add_tree (build_min_nt (GOTO_STMT, destination));\n   else\n     {\n       emit_line_note (input_filename, lineno);\n \n-      if (TREE_CODE (destination) == IDENTIFIER_NODE)\n+      if (TREE_CODE (destination) == LABEL_DECL)\n \t{\n-\t  tree decl = lookup_label (destination);\n-\t  TREE_USED (decl) = 1;\n-\t  expand_goto (decl); \n+\t  TREE_USED (destination) = 1;\n+\t  expand_goto (destination); \n \t}\n       else\n \texpand_computed_goto (destination);\n@@ -914,23 +916,12 @@ void\n finish_label_stmt (name)\n      tree name;\n {\n-  tree decl;\n+  tree decl = define_label (input_filename, lineno, name);\n \n   if (building_stmt_tree ())\n-    {\n-      push_permanent_obstack ();\n-      decl = build_decl (LABEL_DECL, name, void_type_node);\n-      pop_obstacks ();\n-      DECL_SOURCE_LINE (decl) = lineno;\n-      DECL_SOURCE_FILE (decl) = input_filename;\n-      add_tree (decl);\n-    }\n-  else\n-    {\n-      decl = define_label (input_filename, lineno, name);\n-      if (decl)\n-\texpand_label (decl);\n-    }\n+    add_tree (decl);\n+  else if (decl)\n+    expand_label (decl);\n }\n \n /* Create a declaration statement for the declaration given by the\n@@ -2129,10 +2120,9 @@ expand_stmt (t)\n       break;\n \n     case LABEL_DECL:\n-      t = define_label (DECL_SOURCE_FILE (t), DECL_SOURCE_LINE (t),\n-\t\t\tDECL_NAME (t));\n-      if (t)\n-\texpand_label (t);\n+      input_filename = DECL_SOURCE_FILE (t);\n+      lineno = DECL_SOURCE_LINE (t);\n+      finish_label_stmt (DECL_NAME (t));\n       break;\n \n     case GOTO_STMT:"}]}