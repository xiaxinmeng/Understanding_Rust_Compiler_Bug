{"sha": "b799033017f0b33846490fc4612b4eb29b9ed0c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc5OTAzMzAxN2YwYjMzODQ2NDkwZmM0NjEyYjRlYjI5YjllZDBjNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-06T16:38:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-06T16:38:29Z"}, "message": "re PR tree-optimization/49279 (Optimization incorrectly presuming constant variable inside loop in g++ 4.5 and 4.6 with -O2 and -O3 for x86_64 targets)\n\n\tPR tree-optimization/49279\n\t* tree-ssa-structalias.c (find_func_aliases): Don't handle\n\tCAST_RESTRICT.\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Allow\n\trestrict propagation.\n\t* tree-ssa.c (useless_type_conversion_p): Don't return false\n\tif TYPE_RESTRICT differs.\n\n\t* gcc.dg/tree-ssa/restrict-4.c: XFAIL.\n\t* gcc.c-torture/execute/pr49279.c: New test.\n\nFrom-SVN: r179620", "tree": {"sha": "6d63b4a87380ed4deee53471eb0ac57a208ac508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d63b4a87380ed4deee53471eb0ac57a208ac508"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b799033017f0b33846490fc4612b4eb29b9ed0c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b799033017f0b33846490fc4612b4eb29b9ed0c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b799033017f0b33846490fc4612b4eb29b9ed0c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b799033017f0b33846490fc4612b4eb29b9ed0c6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b966d3a966a20aaa3de54d6a7ea78703ffb22a8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b966d3a966a20aaa3de54d6a7ea78703ffb22a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b966d3a966a20aaa3de54d6a7ea78703ffb22a8d"}], "stats": {"total": 73, "additions": 52, "deletions": 21}, "files": [{"sha": "aec77e967deaeeea63b34d3038e3509b43cc142c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b799033017f0b33846490fc4612b4eb29b9ed0c6", "patch": "@@ -1,3 +1,13 @@\n+2011-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/49279\n+\t* tree-ssa-structalias.c (find_func_aliases): Don't handle\n+\tCAST_RESTRICT.\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Allow\n+\trestrict propagation.\n+\t* tree-ssa.c (useless_type_conversion_p): Don't return false\n+\tif TYPE_RESTRICT differs.\n+\n 2011-10-06  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* function.c (thread_prologue_and_epilogue_insns): Build a vector"}, {"sha": "cac88e925a4313094898336ec015c9b69d4d01c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b799033017f0b33846490fc4612b4eb29b9ed0c6", "patch": "@@ -1,3 +1,9 @@\n+2011-10-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/49279\n+\t* gcc.dg/tree-ssa/restrict-4.c: XFAIL.\n+\t* gcc.c-torture/execute/pr49279.c: New test.\n+\n 2011-10-06  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR target/49049"}, {"sha": "7f2c0d22129b4869bc73f123edc08097241a590a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr49279.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49279.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49279.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr49279.c?ref=b799033017f0b33846490fc4612b4eb29b9ed0c6", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/49279 */\n+extern void abort (void);\n+\n+struct S { int a; int *__restrict p; };\n+\n+__attribute__((noinline, noclone))\n+struct S *bar (struct S *p)\n+{\n+  struct S *r;\n+  asm volatile (\"\" : \"=r\" (r) : \"0\" (p) : \"memory\");\n+  return r;\n+}\n+\n+__attribute__((noinline, noclone))\n+int\n+foo (int *p, int *q)\n+{\n+  struct S s, *t;\n+  s.a = 1;\n+  s.p = p;\n+  t = bar (&s);\n+  t->p = q;\n+  s.p[0] = 0;\n+  t->p[0] = 1;\n+  return s.p[0];\n+}\n+\n+int\n+main ()\n+{\n+  int a, b;\n+  if (foo (&a, &b) != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "7bcdcdd053a86e43b1b3da643c63172f3b5187ae", "filename": "gcc/testsuite/gcc.dg/tree-ssa/restrict-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-4.c?ref=b799033017f0b33846490fc4612b4eb29b9ed0c6", "patch": "@@ -22,5 +22,5 @@ bar (int *x, int y)\n   return p1[y];\n }\n \n-/* { dg-final { scan-tree-dump-times \"return 1;\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 2 \"optimized\" { xfail *-*-* } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "a8737dac933ada0d28dd71466bde645c3b04d033", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=b799033017f0b33846490fc4612b4eb29b9ed0c6", "patch": "@@ -804,11 +804,6 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n       && ((rhs_code == SSA_NAME && rhs == name)\n \t  || CONVERT_EXPR_CODE_P (rhs_code)))\n     {\n-      /* Don't propagate restrict pointer's RHS.  */\n-      if (TYPE_RESTRICT (TREE_TYPE (lhs))\n-\t  && !TYPE_RESTRICT (TREE_TYPE (name))\n-\t  && !is_gimple_min_invariant (def_rhs))\n-\treturn false;\n       /* Only recurse if we don't deal with a single use or we cannot\n \t do the propagation to the current statement.  In particular\n \t we can end up with a conversion needed for a non-invariant"}, {"sha": "7de22aabcb3cdd053a5c782762520dfb726e43b3", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=b799033017f0b33846490fc4612b4eb29b9ed0c6", "patch": "@@ -4494,15 +4494,6 @@ find_func_aliases (gimple origt)\n \t  && (!in_ipa_mode\n \t      || DECL_EXTERNAL (lhsop) || TREE_PUBLIC (lhsop)))\n \tmake_escape_constraint (rhsop);\n-      /* If this is a conversion of a non-restrict pointer to a\n-\t restrict pointer track it with a new heapvar.  */\n-      else if (gimple_assign_cast_p (t)\n-\t       && POINTER_TYPE_P (TREE_TYPE (rhsop))\n-\t       && POINTER_TYPE_P (TREE_TYPE (lhsop))\n-\t       && !TYPE_RESTRICT (TREE_TYPE (rhsop))\n-\t       && TYPE_RESTRICT (TREE_TYPE (lhsop)))\n-\tmake_constraint_from_restrict (get_vi_for_tree (lhsop),\n-\t\t\t\t       \"CAST_RESTRICT\");\n     }\n   /* Handle escapes through return.  */\n   else if (gimple_code (t) == GIMPLE_RETURN"}, {"sha": "258a7444b08f3ad45b6c5ba55de06666c1ab238c", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b799033017f0b33846490fc4612b4eb29b9ed0c6/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=b799033017f0b33846490fc4612b4eb29b9ed0c6", "patch": "@@ -1270,12 +1270,6 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n \t  != TYPE_ADDR_SPACE (TREE_TYPE (inner_type)))\n \treturn false;\n \n-      /* Do not lose casts to restrict qualified pointers.  */\n-      if ((TYPE_RESTRICT (outer_type)\n-\t   != TYPE_RESTRICT (inner_type))\n-\t  && TYPE_RESTRICT (outer_type))\n-\treturn false;\n-\n       /* If the outer type is (void *), the conversion is not necessary.  */\n       if (VOID_TYPE_P (TREE_TYPE (outer_type)))\n \treturn true;"}]}