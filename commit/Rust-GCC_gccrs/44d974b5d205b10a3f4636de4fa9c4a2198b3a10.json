{"sha": "44d974b5d205b10a3f4636de4fa9c4a2198b3a10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRkOTc0YjVkMjA1YjEwYTNmNDYzNmRlNGZhOWM0YTIxOThiM2ExMA==", "commit": {"author": {"name": "Olga Golovanevsky", "email": "olga@il.ibm.com", "date": "2007-03-17T12:47:53Z"}, "committer": {"name": "Olga Golovanevsky", "email": "olga@gcc.gnu.org", "date": "2007-03-17T12:47:53Z"}, "message": "ipa-type-escape fix for ada\n\nFrom-SVN: r123022", "tree": {"sha": "8a38484be2bd881bb6c654baad0af82a2f18595e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a38484be2bd881bb6c654baad0af82a2f18595e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44d974b5d205b10a3f4636de4fa9c4a2198b3a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d974b5d205b10a3f4636de4fa9c4a2198b3a10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44d974b5d205b10a3f4636de4fa9c4a2198b3a10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d974b5d205b10a3f4636de4fa9c4a2198b3a10/comments", "author": null, "committer": null, "parents": [{"sha": "604e4ce3fe1f97b4c4952dae38b734db76491c1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604e4ce3fe1f97b4c4952dae38b734db76491c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604e4ce3fe1f97b4c4952dae38b734db76491c1b"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "a6beced80114b7a39062dbcaebe5e8e27bd395d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d974b5d205b10a3f4636de4fa9c4a2198b3a10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d974b5d205b10a3f4636de4fa9c4a2198b3a10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44d974b5d205b10a3f4636de4fa9c4a2198b3a10", "patch": "@@ -1,3 +1,8 @@\n+2007-03-17  Olga Golovanevsky  <olga@il.ibm.com>\n+  \n+  \t* ipa-type-escape.c (look_for_casts) : Revert code to use\n+\thandled_component_p due to ada test a-numaux.adb.\n+\n 2007-03-17  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* final.c (final_scan_insn): Alter the condition of a"}, {"sha": "921284db667538872c83b4c83a1ec013e58b43d1", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d974b5d205b10a3f4636de4fa9c4a2198b3a10/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d974b5d205b10a3f4636de4fa9c4a2198b3a10/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=44d974b5d205b10a3f4636de4fa9c4a2198b3a10", "patch": "@@ -1239,26 +1239,21 @@ look_for_casts (tree lhs ATTRIBUTE_UNUSED, tree t)\n       tree castfromvar = TREE_OPERAND (t, 0);\n       cast = cast | check_cast (TREE_TYPE (t), castfromvar);\n     }\n-  else if (TREE_CODE (t) == COMPONENT_REF\n-\t   || TREE_CODE (t) == INDIRECT_REF\n-\t   || TREE_CODE (t) == BIT_FIELD_REF)\n-    {\n-      tree base = get_base_address (t);\n-      while (t != base)\n-\t{\n-\t  t = TREE_OPERAND (t, 0);\n-\t  if (TREE_CODE (t) == VIEW_CONVERT_EXPR)\n-\t    {\n-\t      /* This may be some part of a component ref.\n-\t\t IE it may be a.b.VIEW_CONVERT_EXPR<weird_type>(c).d, AFAIK.\n-\t\t castfromref will give you a.b.c, not a. */\n-\t      tree castfromref = TREE_OPERAND (t, 0);\n-\t      cast = cast | check_cast (TREE_TYPE (t), castfromref);\n-\t    }\n-\t  else if (TREE_CODE (t) == COMPONENT_REF)\n-\t    get_canon_type (TREE_TYPE (TREE_OPERAND (t, 1)), false, false);\n-\t}\n-    } \n+  else \n+    while (handled_component_p (t))\n+      {\n+\tt = TREE_OPERAND (t, 0);\n+\tif (TREE_CODE (t) == VIEW_CONVERT_EXPR)\n+\t  {\n+\t    /* This may be some part of a component ref.\n+\t       IE it may be a.b.VIEW_CONVERT_EXPR<weird_type>(c).d, AFAIK.\n+\t       castfromref will give you a.b.c, not a. */\n+\t    tree castfromref = TREE_OPERAND (t, 0);\n+\t    cast = cast | check_cast (TREE_TYPE (t), castfromref);\n+\t  }\n+\telse if (TREE_CODE (t) == COMPONENT_REF)\n+\t  get_canon_type (TREE_TYPE (TREE_OPERAND (t, 1)), false, false);\n+      }\n \n   if (!cast)\n     cast = CT_NO_CAST;"}]}