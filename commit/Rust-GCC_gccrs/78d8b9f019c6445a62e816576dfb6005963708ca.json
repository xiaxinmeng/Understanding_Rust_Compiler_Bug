{"sha": "78d8b9f019c6445a62e816576dfb6005963708ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhkOGI5ZjAxOWM2NDQ1YTYyZTgxNjU3NmRmYjYwMDU5NjM3MDhjYQ==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-09-09T13:53:18Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-09-09T13:53:18Z"}, "message": "Improve handling of constants destined for FP_REGS on AArch64\n\nFrom-SVN: r202403", "tree": {"sha": "e823a125ab627cbe4e0173dfafbe0177c1cd05ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e823a125ab627cbe4e0173dfafbe0177c1cd05ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78d8b9f019c6445a62e816576dfb6005963708ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d8b9f019c6445a62e816576dfb6005963708ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78d8b9f019c6445a62e816576dfb6005963708ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78d8b9f019c6445a62e816576dfb6005963708ca/comments", "author": null, "committer": null, "parents": [{"sha": "aeda100f7b926c36213d5d7de9a600d23d4d7808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeda100f7b926c36213d5d7de9a600d23d4d7808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeda100f7b926c36213d5d7de9a600d23d4d7808"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "2a4b5bc165c2c7d7ecfb329d90469fa7c404befa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d8b9f019c6445a62e816576dfb6005963708ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d8b9f019c6445a62e816576dfb6005963708ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78d8b9f019c6445a62e816576dfb6005963708ca", "patch": "@@ -1,3 +1,8 @@\n+2013-09-09  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_preferred_reload_class): Return\n+\tNO_REGS for immediate that can't be moved directly into FP_REGS.\n+\n 2013-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_select_cc_mode): Return CC_SWP for"}, {"sha": "e8ae20ad3d2f7805314a9b391dff11218eb72957", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d8b9f019c6445a62e816576dfb6005963708ca/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d8b9f019c6445a62e816576dfb6005963708ca/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=78d8b9f019c6445a62e816576dfb6005963708ca", "patch": "@@ -4237,10 +4237,18 @@ aarch64_class_max_nregs (reg_class_t regclass, enum machine_mode mode)\n }\n \n static reg_class_t\n-aarch64_preferred_reload_class (rtx x ATTRIBUTE_UNUSED, reg_class_t regclass)\n+aarch64_preferred_reload_class (rtx x, reg_class_t regclass)\n {\n-  return ((regclass == POINTER_REGS || regclass == STACK_REG)\n-\t  ? GENERAL_REGS : regclass);\n+  if (regclass == POINTER_REGS || regclass == STACK_REG)\n+    return GENERAL_REGS;\n+\n+  /* If it's an integer immediate that MOVI can't handle, then\n+     FP_REGS is not an option, so we return NO_REGS instead.  */\n+  if (CONST_INT_P (x) && reg_class_subset_p (regclass, FP_REGS)\n+      && !aarch64_simd_imm_scalar_p (x, GET_MODE (x)))\n+    return NO_REGS;\n+\n+  return regclass;\n }\n \n void"}, {"sha": "05100e6a1ee9de385d58312a306b7c170608893b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d8b9f019c6445a62e816576dfb6005963708ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d8b9f019c6445a62e816576dfb6005963708ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78d8b9f019c6445a62e816576dfb6005963708ca", "patch": "@@ -1,3 +1,7 @@\n+2013-09-09  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc.target/aarch64/movdi_1.c: New test.\n+\n 2013-09-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58362"}, {"sha": "a22378db00f3556c4e54e52f0ac989f5e8d0eb18", "filename": "gcc/testsuite/gcc.target/aarch64/movdi_1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78d8b9f019c6445a62e816576dfb6005963708ca/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovdi_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78d8b9f019c6445a62e816576dfb6005963708ca/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovdi_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovdi_1.c?ref=78d8b9f019c6445a62e816576dfb6005963708ca", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+\n+void\n+foo1 (uint64_t *a)\n+{\n+  uint64x1_t val18;\n+  uint32x2_t val19;\n+  uint64x1_t val20;\n+  val19 = vcreate_u32 (0x800000004cf3dffbUL);\n+  val20 = vrsra_n_u64 (val18, vreinterpret_u64_u32 (val19), 34);\n+  vst1_u64 (a, val20);\n+}\n+\n+void\n+foo2 (uint64_t *a)\n+{\n+  uint64x1_t val18;\n+  uint32x2_t val19;\n+  uint64x1_t val20;\n+  val19 = vcreate_u32 (0xdffbUL);\n+  val20 = vrsra_n_u64 (val18, vreinterpret_u64_u32 (val19), 34);\n+  vst1_u64 (a, val20);\n+}"}]}