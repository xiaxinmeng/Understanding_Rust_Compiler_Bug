{"sha": "2063b07f4de76afe602730fb51acd8aebbf5c1bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA2M2IwN2Y0ZGU3NmFmZTYwMjczMGZiNTFhY2Q4YWViYmY1YzFiZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-18T15:20:04Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-18T15:20:04Z"}, "message": "cp-tree.h (OVL_USED): Replace with ...\n\n\t* cp-tree.h (OVL_USED): Replace with ...\n\t(OVL_USING_P): ... this.\n\t(ovl_iterator::using_p): Adjust.\n\t* name-lookup.c (push_overloaded_decl_1)\n\tdo_nonmember_using_decl): Adjust.\n\t* search.c (lookup_field_r): Adjust.\n\t* tree.c (ovl_insert, ovl_scope): Adjust.\n(--This line, and those below, will be ignored--\n\nM    cp/tree.c\nM    cp/cp-tree.h\nM    cp/name-lookup.c\nM    cp/search.c\nM    cp/ChangeLog\n\nFrom-SVN: r248229", "tree": {"sha": "6cd1335dae35c94b970dea9f4c92d11dfdb74f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cd1335dae35c94b970dea9f4c92d11dfdb74f19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2063b07f4de76afe602730fb51acd8aebbf5c1bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2063b07f4de76afe602730fb51acd8aebbf5c1bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2063b07f4de76afe602730fb51acd8aebbf5c1bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2063b07f4de76afe602730fb51acd8aebbf5c1bd/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8264c84d54602b4ced60ec0a969b58b2c9c5a944", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8264c84d54602b4ced60ec0a969b58b2c9c5a944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8264c84d54602b4ced60ec0a969b58b2c9c5a944"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "01c506b9f1e578d8946969f52f8eca8ec01b1608", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2063b07f4de76afe602730fb51acd8aebbf5c1bd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2063b07f4de76afe602730fb51acd8aebbf5c1bd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2063b07f4de76afe602730fb51acd8aebbf5c1bd", "patch": "@@ -1,5 +1,13 @@\n 2017-05-18  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.h (OVL_USED): Replace with ...\n+\t(OVL_USING_P): ... this.\n+\t(ovl_iterator::using_p): Adjust.\n+\t* name-lookup.c (push_overloaded_decl_1,\n+\tdo_nonmember_using_decl): Adjust.\n+\t* search.c (lookup_field_r): Adjust.\n+\t* tree.c (ovl_insert, ovl_scope): Adjust.\n+\n \t* cp-tree.h (lookup_add): Swap args.\n \t(ovl_cons, build_overload): Delete.\n \t* name-lookup.c (add_function, push_overloaded_decl_1,"}, {"sha": "bd31252137765efecd08a040cae761df68ea502d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2063b07f4de76afe602730fb51acd8aebbf5c1bd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2063b07f4de76afe602730fb51acd8aebbf5c1bd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2063b07f4de76afe602730fb51acd8aebbf5c1bd", "patch": "@@ -351,6 +351,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       CONSTRUCTOR_NO_IMPLICIT_ZERO (in CONSTRUCTOR)\n       TINFO_USED_TEMPLATE_ID (in TEMPLATE_INFO)\n       PACK_EXPANSION_SIZEOF_P (in *_PACK_EXPANSION)\n+      OVL_USING_P (in OVERLOAD)\n    2: IDENTIFIER_OPNAME_P (in IDENTIFIER_NODE)\n       ICS_THIS_FLAG (in _CONV)\n       DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (in VAR_DECL)\n@@ -640,14 +641,12 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n   ((TREE_CODE (NODE) == OVERLOAD) ? OVL_FUNCTION (NODE) : (NODE))\n #define OVL_NEXT(NODE)\t\t\\\n   ((TREE_CODE (NODE) == OVERLOAD) ? TREE_CHAIN (NODE) : NULL_TREE)\n-/* If set, this was imported in a using declaration.\n-   This is not to confuse with being used somewhere, which\n-   is not important for this node.  */\n-#define OVL_USED(NODE)\t\tTREE_USED (OVERLOAD_CHECK (NODE))\n /* If set, this OVERLOAD was created for argument-dependent lookup\n    and can be freed afterward.  */\n #define OVL_ARG_DEPENDENT(NODE) TREE_LANG_FLAG_0 (OVERLOAD_CHECK (NODE))\n \n+/* If set, this was imported in a using declaration.   */\n+#define OVL_USING_P(NODE)\tTREE_LANG_FLAG_1 (OVERLOAD_CHECK (NODE))\n /* If set, this overload contains a nested overload.  */\n #define OVL_NESTED_P(NODE)\tTREE_LANG_FLAG_3 (OVERLOAD_CHECK (NODE))\n /* If set, this overload was constructed during lookup.  */\n@@ -705,7 +704,7 @@ class ovl_iterator\n   /* Whether this overload was introduced by a using decl.  */\n   bool using_p () const\n   {\n-    return TREE_CODE (ovl) == OVERLOAD && OVL_USED (ovl);\n+    return TREE_CODE (ovl) == OVERLOAD && OVL_USING_P (ovl);\n   }\n   tree remove_node (tree head)\n   {"}, {"sha": "e55b48dd7ff33b2396a8aa909e6e1e5070773a2a", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2063b07f4de76afe602730fb51acd8aebbf5c1bd/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2063b07f4de76afe602730fb51acd8aebbf5c1bd/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=2063b07f4de76afe602730fb51acd8aebbf5c1bd", "patch": "@@ -2920,7 +2920,7 @@ push_overloaded_decl_1 (tree decl, int flags, bool is_friend)\n \t      tree fn = OVL_CURRENT (tmp);\n \t      tree dup;\n \n-\t      if (TREE_CODE (tmp) == OVERLOAD && OVL_USED (tmp)\n+\t      if (TREE_CODE (tmp) == OVERLOAD && OVL_USING_P (tmp)\n \t\t  && !(flags & PUSH_USING)\n \t\t  && compparms_for_decl_and_using_decl (fn, decl)\n \t\t  && ! decls_match (fn, decl))\n@@ -3136,7 +3136,7 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n \t\t  if (new_fn == old_fn)\n \t\t    /* The function already exists in the current namespace.  */\n \t\t    break;\n-\t\t  else if (TREE_CODE (tmp1) == OVERLOAD && OVL_USED (tmp1))\n+\t\t  else if (TREE_CODE (tmp1) == OVERLOAD && OVL_USING_P (tmp1))\n \t\t    continue; /* this is a using decl */\n \t\t  else if (compparms_for_decl_and_using_decl (new_fn, old_fn))\n \t\t    {"}, {"sha": "d8ad40a98a76ecb089e3c930c8708824f602db51", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2063b07f4de76afe602730fb51acd8aebbf5c1bd/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2063b07f4de76afe602730fb51acd8aebbf5c1bd/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=2063b07f4de76afe602730fb51acd8aebbf5c1bd", "patch": "@@ -1106,7 +1106,7 @@ lookup_field_r (tree binfo, void *data)\n   if (!nval)\n     /* Look for a data member or type.  */\n     nval = lookup_field_1 (type, lfi->name, lfi->want_type);\n-  else if (TREE_CODE (nval) == OVERLOAD && OVL_USED (nval))\n+  else if (TREE_CODE (nval) == OVERLOAD && OVL_USING_P (nval))\n     {\n       /* If we have both dependent and non-dependent using-declarations, return\n \t the dependent one rather than an incomplete list of functions.  */"}, {"sha": "61254c072ed8996bc177f8fc152a803740659bed", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2063b07f4de76afe602730fb51acd8aebbf5c1bd/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2063b07f4de76afe602730fb51acd8aebbf5c1bd/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2063b07f4de76afe602730fb51acd8aebbf5c1bd", "patch": "@@ -2138,7 +2138,7 @@ ovl_insert (tree fn, tree maybe_ovl, bool using_p)\n \n   /* Find insertion point.  */\n   while (maybe_ovl && TREE_CODE (maybe_ovl) == OVERLOAD\n-\t && (weight < OVL_USED (maybe_ovl)))\n+\t && (weight < OVL_USING_P (maybe_ovl)))\n     {\n       if (!result)\n \tresult = maybe_ovl;\n@@ -2151,7 +2151,7 @@ ovl_insert (tree fn, tree maybe_ovl, bool using_p)\n     {\n       trail = ovl_make (fn, maybe_ovl);\n       if (using_p)\n-\tOVL_USED (trail) = true;\n+\tOVL_USING_P (trail) = true;\n     }\n \n   if (insert_after)\n@@ -2290,7 +2290,7 @@ ovl_scope (tree ovl)\n   if (TREE_CODE (ovl) == TEMPLATE_ID_EXPR)\n     ovl = TREE_OPERAND (ovl, 0);\n   /* Skip using-declarations.  */\n-  while (TREE_CODE (ovl) == OVERLOAD && OVL_USED (ovl) && OVL_CHAIN (ovl))\n+  while (TREE_CODE (ovl) == OVERLOAD && OVL_USING_P (ovl) && OVL_CHAIN (ovl))\n     ovl = OVL_CHAIN (ovl);\n   return CP_DECL_CONTEXT (OVL_CURRENT (ovl));\n }"}]}