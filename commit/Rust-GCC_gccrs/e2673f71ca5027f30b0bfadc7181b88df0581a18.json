{"sha": "e2673f71ca5027f30b0bfadc7181b88df0581a18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI2NzNmNzFjYTUwMjdmMzBiMGJmYWRjNzE4MWI4OGRmMDU4MWExOA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-14T20:11:03Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-14T20:11:03Z"}, "message": "add ObjC* @property - tests\n\n\nadd ObjC* @property - tests\ngcc/testsuite:\n\n\t* objc.dg/property: New.\n\t* objc.dg/property/fsf-property-basic.m: New.\n\t* objc.dg/property/fsf-property-method-access.m: New.\n\t* objc.dg/property/fsf-property-named-ivar.m: New.\n\t* objc.dg/property/property-1.m: New.\n\t* objc.dg/property/property-2.m: New.\n\t* objc.dg/property/property-3.m: New.\n\t* objc.dg/property/property-neg-1.m: New.\n\t* objc.dg/property/property-neg-2.m: New.\n\t* objc.dg/property/property-neg-3.m: New.\n\t* objc.dg/property/property-neg-4.m: New.\n\t* objc.dg/property/property-neg-5.m: New.\n\t* objc.dg/property/property-neg-6.m: New.\n\t* objc.dg/property/property-neg-7.m: New.\n\t* objc.dg/property/property.exp: New.\n\t* obj-c++.dg/property\n\t* obj-c++.dg/property/fsf-property-basic.mm\n\t* obj-c++.dg/property/fsf-property-method-access.mm\n\t* obj-c++.dg/property/fsf-property-named-ivar.mm\n\t* obj-c++.dg/property/property-0.mm\n\t* obj-c++.dg/property/property-1.mm\n\t* obj-c++.dg/property/property-2.mm\n\t* obj-c++.dg/property/property-3.mm\n\t* obj-c++.dg/property/property-neg-1.mm\n\t* obj-c++.dg/property/property-neg-2.mm\n\t* obj-c++.dg/property/property-neg-3.mm\n\t* obj-c++.dg/property/property-neg-4.mm\n\t* obj-c++.dg/property/property-neg-5.mm\n\t* obj-c++.dg/property/property-neg-6.mm\n\t* obj-c++.dg/property/property-neg-7.mm\n\t* obj-c++.dg/property/property.exp\n\nFrom-SVN: r165480", "tree": {"sha": "0a5903d225b6eb59b523d1ab62797ac35baede29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a5903d225b6eb59b523d1ab62797ac35baede29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2673f71ca5027f30b0bfadc7181b88df0581a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2673f71ca5027f30b0bfadc7181b88df0581a18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2673f71ca5027f30b0bfadc7181b88df0581a18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2673f71ca5027f30b0bfadc7181b88df0581a18/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "668ea4b1106d1a28e07ed653874192696840829c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668ea4b1106d1a28e07ed653874192696840829c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/668ea4b1106d1a28e07ed653874192696840829c"}], "stats": {"total": 1114, "additions": 1114, "deletions": 0}, "files": [{"sha": "f722e3747dc588eb9335a6b648e522a8044e3223", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -1,3 +1,41 @@\n+2010-10-14  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc.dg/property: New.\n+\t* objc.dg/property/fsf-property-basic.m: New.\n+\t* objc.dg/property/fsf-property-method-access.m: New.\n+\t* objc.dg/property/fsf-property-named-ivar.m: New.\n+\t* obj-c++.dg/property: New.\n+\t* obj-c++.dg/property/fsf-property-basic.mm: New.\n+\t* obj-c++.dg/property/fsf-property-method-access.mm: New.\n+\t* obj-c++.dg/property/fsf-property-named-ivar.mm: New.\n+\n+\tmerge from FSF apple 'trunk' branch. \n+\t2006 Fariborz Jahanian <fjahanian@apple.com>\n+\t\n+\tRadars 4436866, 4505126, 4506903, 4517826\n+\t* objc.dg/property/property-1.m: New.\n+\t* objc.dg/property/property-2.m: New.\n+\t* objc.dg/property/property-3.m: New.\n+\t* objc.dg/property/property-neg-1.m: New.\n+\t* objc.dg/property/property-neg-2.m: New.\n+\t* objc.dg/property/property-neg-3.m: New.\n+\t* objc.dg/property/property-neg-4.m: New.\n+\t* objc.dg/property/property-neg-5.m: New.\n+\t* objc.dg/property/property-neg-6.m: New.\n+\t* objc.dg/property/property-neg-7.m: New.\n+\t* objc.dg/property/property.exp: New.\n+\t* obj-c++.dg/property/property-1.mm: New.\n+\t* obj-c++.dg/property/property-2.mm: New.\n+\t* obj-c++.dg/property/property-3.mm: New.\n+\t* obj-c++.dg/property/property-neg-1.mm: New.\n+\t* obj-c++.dg/property/property-neg-2.mm: New.\n+\t* obj-c++.dg/property/property-neg-3.mm: New.\n+\t* obj-c++.dg/property/property-neg-4.mm: New.\n+\t* obj-c++.dg/property/property-neg-5.mm: New.\n+\t* obj-c++.dg/property/property-neg-6.mm: New.\n+\t* obj-c++.dg/property/property-neg-7.mm: New.\n+\t* obj-c++.dg/property/property.exp: New.\n+\n 2010-10-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/pr45570.c: Fix typos.  Also run for i?86-*-*."}, {"sha": "502ac0d806e3e108146b5496c3c58837b507ed1b", "filename": "gcc/testsuite/obj-c++.dg/property/fsf-property-basic.mm", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Ffsf-property-basic.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Ffsf-property-basic.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Ffsf-property-basic.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,80 @@\n+/* Basic test, auto-generated getter/setter based on property name.  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+extern int printf (const char *fmt,...) ;\n+extern void abort (void);\n+\n+typedef struct objc_class *Class;\n+\n+#ifdef __NEXT_RUNTIME__\n+\n+extern id class_createInstance(Class, long);\n+#define class_create_instance(C) class_createInstance(C, 0)\n+\n+#else\n+\n+extern id class_create_instance(Class);\n+\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+@interface Bar\n+{\n+@public\n+#ifdef __NEXT_RUNTIME__\n+  Class isa;\n+#else\n+  Class class_pointer;\n+#endif\n+  int var;\n+}\n++ (id) initialize;\n++ (id) alloc ;\n+ - (id) init;\n+\n+@property int FooBar;\n+@end\n+\n+@implementation Bar\n+\n++initialize { return self;}\n++ (id) alloc { return class_create_instance(self);}\n+\n+- (id) init {return self;}\n+\n+@property int FooBar ;\n+@end\n+\n+int main(int argc, char *argv[]) {\n+  int res;\n+  Bar *f = [[Bar alloc] init];\n+\n+  /* First, establish that the property getter & setter have been synthesized \n+     and operate correctly.  */\n+  [f setFooBar:1];\n+\n+  if (f->_FooBar != 1)\n+    { printf (\"setFooBar did not set _FooBar\\n\"); abort ();}\n+      \n+  res = [f FooBar];\n+    \n+  if (res != 1 )\n+    { printf (\"[f FooBar] = %d\\n\",  res); abort ();}\n+  \n+  /* Now check the short-cut  CLASS.property syntax.  */\n+  res = f.FooBar;\n+  if (res != 1 )\n+    { printf (\"f,FooBar = %d\\n\",  res); abort ();}\n+    \n+  f.FooBar = 0;\n+  printf (\"seems OK\\n\",  res);\n+  return f.FooBar;\n+}\n+"}, {"sha": "4052d1600d3cd01576df2897cd2f3cdb2193b4a5", "filename": "gcc/testsuite/obj-c++.dg/property/fsf-property-method-access.mm", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Ffsf-property-method-access.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Ffsf-property-method-access.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Ffsf-property-method-access.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,86 @@\n+/* test access in methods, auto-generated getter/setter based on property name.  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+extern int printf (const char *fmt,...) ;\n+extern void abort (void);\n+\n+typedef struct objc_class *Class;\n+\n+#ifdef __NEXT_RUNTIME__\n+\n+extern id class_createInstance(Class, long);\n+#define class_create_instance(C) class_createInstance(C, 0)\n+\n+#else\n+\n+extern id class_create_instance(Class);\n+\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+@interface Bar\n+{\n+@public\n+#ifdef __NEXT_RUNTIME__\n+  Class isa;\n+#else\n+  Class class_pointer;\n+#endif\n+}\n++ (id) initialize;\n++ (id) alloc ;\n+- (id) init;\n+\n+- (int) lookAtProperty;\n+- (void) setProperty: (int) v;\n+\n+@property int FooBar;\n+@end\n+\n+@implementation Bar\n+\n++initialize { return self;}\n++ (id) alloc { return class_create_instance(self);}\n+\n+- (id) init {return self;}\n+\n+@property int FooBar;\n+\n+- (int) lookAtProperty { return FooBar; }\n+- (void) setProperty: (int) v { FooBar = v; }\n+\n+@end\n+\n+int main(int argc, char *argv[]) {\n+  int res;\n+  Bar *f = [[Bar alloc] init];\n+\n+  /* First, establish that the property getter & setter have been synthesized \n+     and operate correctly.  */\n+  [f setProperty:11];\n+\n+  if (f->_FooBar != 11)\n+    { printf (\"setProperty did not set _FooBar\\n\"); abort ();}\n+      \n+  res = [f lookAtProperty];    \n+  if (res != 11 )\n+    { printf (\"[f lookAtProperty] = %d\\n\",  res); abort ();}\n+  \n+  /* Make sure we haven't messed up the shortcut form.  */\n+  /* read ... */\n+  res = f.FooBar;\n+  if (res != 11 )\n+    { printf (\"f.FooBar = %d\\n\",  res); abort ();}\n+  \n+  /* ... write. */\n+  f.FooBar = 0;\n+  /* printf (\"seems OK\\n\",  res); */\n+  return f.FooBar;\n+}\n+"}, {"sha": "4b29c92c7b1e89f84e5b18ad7aed4334aeced1eb", "filename": "gcc/testsuite/obj-c++.dg/property/fsf-property-named-ivar.mm", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Ffsf-property-named-ivar.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Ffsf-property-named-ivar.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Ffsf-property-named-ivar.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,81 @@\n+/* Basic test, auto-generated getter/setter based on named ivar  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+extern int printf (const char *fmt,...) ;\n+extern void abort (void);\n+\n+typedef struct objc_class *Class;\n+\n+#ifdef __NEXT_RUNTIME__\n+\n+extern id class_createInstance(Class, long);\n+#define class_create_instance(C) class_createInstance(C, 0)\n+\n+#else\n+\n+extern id class_create_instance(Class);\n+\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+@interface Bar\n+{\n+@public\n+#ifdef __NEXT_RUNTIME__\n+  Class isa;\n+#else\n+  Class class_pointer;\n+#endif\n+  int var;\n+}\n++ (id) initialize;\n++ (id) alloc ;\n+- (id) init;\n+\n+@property int FooBar;\n+@end\n+\n+@implementation Bar\n+\n++initialize { return self;}\n++ (id) alloc { return class_create_instance(self);}\n+\n+- (id) init {return self;}\n+\n+@property (ivar = var) int FooBar ;\n+@end\n+\n+int main(int argc, char *argv[]) {\n+  int res;\n+  Bar *f = [[Bar alloc] init];\n+\n+  /* First, establish that the property getter & setter have been synthesized \n+     and operate correctly.  */\n+  [f setFooBar:1234];\n+\n+  if (f->var != 1234)\n+    { printf (\"setFooBar did not set var correctly\\n\"); abort ();}\n+      \n+  res = [f FooBar];\n+    \n+  if (res != 1234 )\n+    { printf (\"[f FooBar] = %d\\n\",  res); abort ();}\n+  \n+  /* Now check the short-cut CLASS.property syntax.  */\n+  /* Read .... */\n+  res = f.FooBar;\n+  if (res != 1234 )\n+    { printf (\"f.FooBar = %d\\n\",  res); abort ();}\n+  \n+  /* ... and write.  */\n+  f.FooBar = 0;\n+  /* printf (\"seems OK\\n\",  res); */\n+  return f.FooBar;\n+}\n+"}, {"sha": "c9b9c46423a252f5ab4484d84a838f20a88e1f86", "filename": "gcc/testsuite/obj-c++.dg/property/property-1.mm", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-1.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,31 @@\n+/* This program tests use of property provided setter/getter functions. */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../../objc-obj-c++-shared/Object1.mm\" } */\n+\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n+\n+@interface Bar : Object\n+{\n+  int iVar;\n+}\n+@property int FooBar;\n+@end\n+\n+@implementation Bar\n+@property (ivar = iVar, setter = MySetter:) int FooBar;\n+\n+- (void) MySetter : (int) value { iVar = value; }\n+\n+@end\n+\n+int main(int argc, char *argv[]) {\n+    Bar *f = [Bar new];\n+    f.FooBar = 1;\n+\n+    f.FooBar += 3;\n+\n+    f.FooBar -= 4;\n+    return f.FooBar;\n+}\n+"}, {"sha": "5d55b407cd632d8a05f247c3c4babae68de82da1", "filename": "gcc/testsuite/obj-c++.dg/property/property-2.mm", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-2.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* We can't do this yet on m64, since we have not got the NSConstantString implementation\n+   built-in to the compiler, and therefore we get missing implementation warnings.  */\n+/* { dg-require-effective-target ilp32 } */\n+/* Force ABI = 0 in the NeXT headers, also suppress deprecation warnings.  */\n+/* { dg-options \"-framework Foundation -fobjc-exceptions -mmacosx-version-min=10.4 -Wno-deprecated-declarations\" } */\n+\n+#include <objc/objc-api.h>\n+#include <Foundation/Foundation.h>\n+\n+@interface Person : NSObject\n+@property NSString *firstName, *lastName;\n+@property(readonly) NSString *fullName;\n+@end\n+\n+@interface Group : NSObject\n+@property Person *techLead, *runtimeGuru, *propertiesMaven;\n+@end\n+\n+@implementation Group\n+@property Person *techLead, *runtimeGuru, *propertiesMaven;\n+- init {\n+  techLead = [[Person alloc] init];\n+  runtimeGuru = [[Person alloc] init];\n+  propertiesMaven = [[Person alloc] init];\n+  return self;\n+}\n+@end\n+\n+@implementation Person\n+@property NSString *firstName, *lastName;\n+@property(readonly) NSString *fullName;\n+- (NSString*)fullName { // computed getter\n+    return [NSString stringWithFormat:@\"%@ %@\", firstName, lastName];\n+}\n+@end\n+\n+NSString *playWithProperties()\n+{\n+  Group *g = [[Group alloc] init] ;\n+\n+  g.techLead.firstName = @\"Blaine\";\n+  g.techLead.lastName = @\"Garst\";\n+  g.runtimeGuru.firstName = @\"Greg\";\n+  g.runtimeGuru.lastName = @\"Parker\";\n+  g.propertiesMaven.firstName = @\"Patrick\";\n+  g.propertiesMaven.lastName = @\"Beard\";\n+\n+  return [NSString stringWithFormat:@\"techlead %@ runtimeGuru %@ propertiesMaven %@\",\n+                        g.techLead.fullName, g.runtimeGuru.fullName, g.propertiesMaven.fullName];\n+}\n+\n+main()\n+{\n+    char buf [256];\n+    NSAutoreleasePool* pool  = [[NSAutoreleasePool alloc] init];\n+    sprintf(buf, \"%s\", [playWithProperties() cString]);\n+    [pool release];\n+    return strcmp (buf, \"techlead Blaine Garst runtimeGuru Greg Parker propertiesMaven Patrick Beard\");\n+}\n+"}, {"sha": "5a83263e8dc1b4ddb195b609cf3f82a39ad27fbc", "filename": "gcc/testsuite/obj-c++.dg/property/property-3.mm", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-3.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,75 @@\n+/* This program tests use of properties . */\n+/* { dg-do run { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* We can't do this yet on m64, since we have not got the NSConstantString implementation\n+   built-in to the compiler, and therefore we get missing implementation warnings.  */\n+/* { dg-require-effective-target ilp32 } */\n+/* Force ABI = 0 in the NeXT headers, also suppress deprecation warnings.  */\n+/* { dg-options \"-framework Foundation -fobjc-exceptions -mmacosx-version-min=10.4 -Wno-deprecated-declarations\" } */\n+\n+#include <objc/objc-api.h>\n+#include <Foundation/Foundation.h>\n+\n+@interface Person : NSObject\n+{\n+}\n+@property NSString *firstName, *lastName;\n+@property(readonly) NSString *fullName;\n+\n+@end\n+\n+@interface Group : NSObject\n+{\n+}\n+\n+@property Person *techLead, *runtimeGuru, *propertiesMaven;\n+\n+@end\n+\n+@implementation Group\n+\n+@property Person *techLead, *runtimeGuru, *propertiesMaven;\n+- init {\n+  techLead = [[Person alloc] init];\n+  runtimeGuru = [[Person alloc] init];\n+  propertiesMaven = [[Person alloc] init];\n+  return self;\n+}\n+\n+@end\n+\n+@implementation Person\n+\n+@property NSString *firstName, *lastName;\n+@property(readonly, getter = fullName) NSString *fullName;\n+\n+- (NSString*)fullName { // computed getter\n+    return [NSString stringWithFormat:@\"%@ %@\", firstName, lastName];\n+}\n+\n+@end\n+\n+NSString *playWithProperties()\n+{\n+  Group *g = [[Group alloc] init] ;\n+\n+  g.techLead.firstName = @\"Blaine\";\n+  g.techLead.lastName = @\"Garst\";\n+  g.runtimeGuru.firstName = @\"Greg\";\n+  g.runtimeGuru.lastName = @\"Parker\";\n+  g.propertiesMaven.firstName = @\"Patrick\";\n+  g.propertiesMaven.lastName = @\"Beard\";\n+\n+  return [NSString stringWithFormat:@\"techlead %@ runtimeGuru %@ propertiesMaven %@\",\n+                        g.techLead.fullName, g.runtimeGuru.fullName, g.propertiesMaven.fullName];\n+}\n+\n+main()\n+{\n+    char buf [256];\n+    NSAutoreleasePool* pool  = [[NSAutoreleasePool alloc] init];\n+    sprintf(buf, \"%s\", [playWithProperties() cString]);\n+    [pool release];\n+    return strcmp (buf, \"techlead Blaine Garst runtimeGuru Greg Parker propertiesMaven Patrick Beard\");\n+}\n+"}, {"sha": "2989c3b9295d07c1e42f8d1d0fec0853ccffa254", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-1.mm", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-1.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,14 @@\n+/* This program checks for proper use of 'readonly' attribute. */\n+/* { dg-do compile } */\n+\n+@interface Bar\n+{\n+  int iVar;\n+}\n+@property (readonly) int FooBar;\n+@end\n+\n+@implementation Bar\n+@property int FooBar; /* { dg-error \" property 'FooBar' 'readonly' attribute conflicts with its interface version\" } */\n+\n+@end"}, {"sha": "7046da84732a687dba2f136bd242b685fb8a6f86", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-2.mm", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-2.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,9 @@\n+/* This program checks for proper declaration of property. */\n+/* { dg-do compile } */\n+\n+@interface Bar\n+@end\n+\n+@implementation Bar\n+@property int foo; /* { dg-error \"no declaration of property 'foo' found in the interface\" } */\n+@end"}, {"sha": "07438a6f375f4085be0e58cbe0da7b7604eba790", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-3.mm", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-3.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,14 @@\n+/* Property name cannot match the ivar name. */\n+/* { dg-do compile } */\n+/* Suppress warnings for incomplete class definition etc. */\n+/* { dg-options \"-w\" } */\n+\n+@interface Person \n+{\n+  char *firstName;\n+}\n+@property char *firstName; /* { dg-error \"property 'firstName' may not have the same name as an ivar in the class\" } */\n+@end\t\n+\n+@implementation  Person\n+@end "}, {"sha": "b3dbb60527809a739b2974967aa85e672d6d47e1", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-4.mm", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-4.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,18 @@\n+/* Property cannot be accessed in class method. */\n+/* { dg-do compile } */\n+\n+@interface Person \n+{\n+}\n+@property char *fullName;\n++ (void) testClass;\n+@end\t\n+\n+@implementation  Person\n+@property char *fullName;\n++ (void) testClass {\n+\tfullName = \"MyName\"; /* { dg-error \"property 'fullName' accessed in class method\" } */\n+\t\t\t     /* { dg-error \"'fullName' was not declared in this scope\" \"\" { target *-*-* } 14 } */\n+}\n+@end\n+"}, {"sha": "53fada261987d8f32acd2435b81bd5d7a6170c85", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-5.mm", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-5.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,7 @@\n+/* getter/setter cannot be specified in an interface. */\n+/* { dg-do compile } */\n+\n+@interface Foo\n+@property ( readonly, getter = HELLO, setter = THERE : ) int value;\n+@end\t/* { dg-warning \"getter = \\\\'HELLO\\\\' may not be specified in an interface\" } */ \n+\t/* { dg-warning \"setter = \\\\'THERE\\\\:\\\\' may not be specified in an interface\" \"\" { target *-*-* } 6 } */"}, {"sha": "86bb664851c86602f56efa7942eb390e35bef9cd", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-6.mm", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-6.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,9 @@\n+/* Check for proper declaration of @property. */\n+/* { dg-do compile } */\n+\n+@interface Bar\n+{\n+  int iVar;\n+}\n+@property int FooBar /* { dg-error \"expected ';' at end of input\" } */\n+\t\t     /* { dg-error \"expected '@end' at end of input\" \"\" { target *-*-* } 8 } */"}, {"sha": "506f097eb2a0ef976fee097de1f082f8dddf89eb", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-7.mm", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-7.mm?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,19 @@\n+/* Cannot write into a read-only property. */\n+/* { dg-do compile } */\n+/* Suppress warnings for incomplete class definition etc. */\n+/* { dg-options \"-w\" } */\n+\n+@interface NSArray \n+@property(readonly) int count;\n+@end\n+\n+@implementation NSArray\n+@end\n+\n+void foo (NSArray *ans[], id pid, id apid[], int i) {\n+    NSArray *test;\n+    test.count = 1; /* { dg-error \"readonly property can not be set\" } */\n+    ((NSArray *)pid).count = 1;  /* { dg-error \"readonly property can not be set\" } */\n+    ((NSArray *)apid[i]).count = 1; /* { dg-error \"readonly property can not be set\" } */\n+    ans[i].count = 3; /* { dg-error \"readonly property can not be set\" } */\n+}"}, {"sha": "bff972ba57c67e92d8d9e7428afce2404411e9b8", "filename": "gcc/testsuite/obj-c++.dg/property/property.exp", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty.exp?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,42 @@\n+# GCC Objective-C++ testsuite that uses the `dg.exp' driver.\n+#   Copyright (C) 2004, 2007 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Load support procs.\n+load_lib obj-c++-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_OBJCXXFLAGS\n+if ![info exists DEFAULT_OBJCXXFLAGS] then {\n+    set DEFAULT_OBJCXXFLAGS \" -ansi -pedantic-errors -Wno-long-long\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.mm]]\n+\n+# Main loop.\n+dg-runtest $tests \"-fgnu-runtime\" $DEFAULT_OBJCXXFLAGS\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+dg-runtest $tests \"-fnext-runtime\" $DEFAULT_OBJCXXFLAGS\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "13a00a2b3812590d8b93308da302bad747a63f10", "filename": "gcc/testsuite/objc.dg/property/fsf-property-basic.m", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-basic.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-basic.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-basic.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,74 @@\n+/* Basic test, auto-generated getter/setter based on property name.  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+extern int printf (char *fmt,...) ;\n+extern void abort (void);\n+\n+typedef struct objc_class *Class;\n+\n+#ifdef __NEXT_RUNTIME__\n+\n+extern id class_createInstance(Class, long);\n+#define class_create_instance(C) class_createInstance(C, 0)\n+\n+#else\n+\n+extern id class_create_instance(Class);\n+\n+#endif\n+\n+@interface Bar\n+{\n+@public\n+#ifdef __NEXT_RUNTIME__\n+  Class isa;\n+#else\n+  Class class_pointer;\n+#endif\n+}\n++ (id) initialize;\n++ (id) alloc ;\n+- (id) init;\n+\n+@property int FooBar;\n+@end\n+\n+@implementation Bar\n+\n++initialize { return self;}\n++ (id) alloc { return class_create_instance(self);}\n+\n+- (id) init {return self;}\n+\n+@property int FooBar ;\n+@end\n+\n+int main(int argc, char *argv[]) {\n+  int res;\n+  Bar *f = [[Bar alloc] init];\n+\n+  /* First, establish that the property getter & setter have been synthesized \n+     and operate correctly.  */\n+  [f setFooBar:1];\n+\n+  if (f->_FooBar != 1)\n+    { printf (\"setFooBar did not set _FooBar\\n\"); abort ();}\n+      \n+  res = [f FooBar];\n+    \n+  if (res != 1 )\n+    { printf (\"[f FooBar] = %d\\n\",  res); abort ();}\n+  \n+  /* Now check the short-cut CLASS.property syntax.  */\n+  /* Read... */\n+  res = f.FooBar;\n+  if (res != 1 )\n+    { printf (\"f.FooBar = %d\\n\",  res); abort ();}\n+  \n+  /* .... write. */\n+  f.FooBar = 0;\n+  /* printf (\"seems OK\\n\",  res); */\n+  return f.FooBar;\n+}\n+"}, {"sha": "fae49690c73364d530a56dbd26c2073daebe6d4a", "filename": "gcc/testsuite/objc.dg/property/fsf-property-method-access.m", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-method-access.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-method-access.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-method-access.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,80 @@\n+/* test access in methods, auto-generated getter/setter based on property name.  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+extern int printf (char *fmt,...) ;\n+extern void abort (void);\n+\n+typedef struct objc_class *Class;\n+\n+#ifdef __NEXT_RUNTIME__\n+\n+extern id class_createInstance(Class, long);\n+#define class_create_instance(C) class_createInstance(C, 0)\n+\n+#else\n+\n+extern id class_create_instance(Class);\n+\n+#endif\n+\n+@interface Bar\n+{\n+@public\n+#ifdef __NEXT_RUNTIME__\n+  Class isa;\n+#else\n+  Class class_pointer;\n+#endif\n+}\n++ (id) initialize;\n++ (id) alloc ;\n+- (id) init;\n+\n+- (int) lookAtProperty;\n+- (void) setProperty: (int) v;\n+\n+@property int FooBar;\n+@end\n+\n+@implementation Bar\n+\n++initialize { return self;}\n++ (id) alloc { return class_create_instance(self);}\n+\n+- (id) init {return self;}\n+\n+@property int FooBar;\n+\n+- (int) lookAtProperty { return FooBar; }\n+- (void) setProperty: (int) v { FooBar = v; }\n+\n+@end\n+\n+int main(int argc, char *argv[]) {\n+  int res;\n+  Bar *f = [[Bar alloc] init];\n+\n+  /* First, establish that the property getter & setter have been synthesized \n+     and operate correctly.  */\n+  [f setProperty:11];\n+\n+  if (f->_FooBar != 11)\n+    { printf (\"setProperty did not set _FooBar\\n\"); abort ();}\n+      \n+  res = [f lookAtProperty];    \n+  if (res != 11 )\n+    { printf (\"[f lookAtProperty] = %d\\n\",  res); abort ();}\n+  \n+  /* Make sure we haven't messed up the shortcut form.  */\n+  /* read ... */\n+  res = f.FooBar;\n+  if (res != 11 )\n+    { printf (\"f.FooBar = %d\\n\",  res); abort ();}\n+  \n+  /* ... write. */\n+  f.FooBar = 0;\n+  /* printf (\"seems OK\\n\",  res); */\n+  return f.FooBar;\n+}\n+"}, {"sha": "837d303f317df3125edf31d8ad72573832afcf63", "filename": "gcc/testsuite/objc.dg/property/fsf-property-named-ivar.m", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-named-ivar.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-named-ivar.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Ffsf-property-named-ivar.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,75 @@\n+/* Basic test, auto-generated getter/setter based on named ivar  */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+\n+extern int printf (char *fmt,...) ;\n+extern void abort (void);\n+\n+typedef struct objc_class *Class;\n+\n+#ifdef __NEXT_RUNTIME__\n+\n+extern id class_createInstance(Class, long);\n+#define class_create_instance(C) class_createInstance(C, 0)\n+\n+#else\n+\n+extern id class_create_instance(Class);\n+\n+#endif\n+\n+@interface Bar\n+{\n+@public\n+#ifdef __NEXT_RUNTIME__\n+  Class isa;\n+#else\n+  Class class_pointer;\n+#endif\n+  int var;\n+}\n++ (id) initialize;\n++ (id) alloc ;\n+- (id) init;\n+\n+@property int FooBar;\n+@end\n+\n+@implementation Bar\n+\n++initialize { return self;}\n++ (id) alloc { return class_create_instance(self);}\n+\n+- (id) init {return self;}\n+\n+@property (ivar = var) int FooBar ;\n+@end\n+\n+int main(int argc, char *argv[]) {\n+  int res;\n+  Bar *f = [[Bar alloc] init];\n+\n+  /* First, establish that the property getter & setter have been synthesized \n+     and operate correctly.  */\n+  [f setFooBar:1234];\n+\n+  if (f->var != 1234)\n+    { printf (\"setFooBar did not set var correctly\\n\"); abort ();}\n+      \n+  res = [f FooBar];\n+    \n+  if (res != 1234 )\n+    { printf (\"[f FooBar] = %d\\n\",  res); abort ();}\n+  \n+  /* Now check the short-cut CLASS.property syntax.  */\n+  /* Read .... */\n+  res = f.FooBar;\n+  if (res != 1234 )\n+    { printf (\"f.FooBar = %d\\n\",  res); abort ();}\n+  \n+  /* ... and write.  */\n+  f.FooBar = 0;\n+  /* printf (\"seems OK\\n\",  res); */\n+  return f.FooBar;\n+}\n+"}, {"sha": "89537ca925cc73b0e4e633b7f69edd850e1b7f93", "filename": "gcc/testsuite/objc.dg/property/property-1.m", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-1.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,32 @@\n+/* This program tests use of property provided setter/getter functions. */\n+/* { dg-options \"-std=c99\" } */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../../objc-obj-c++-shared/Object1.m\" } */\n+\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n+\n+@interface Bar : Object\n+{\n+  int iVar;\n+}\n+@property int FooBar;\n+@end\n+\n+@implementation Bar\n+@property (ivar = iVar, setter = MySetter:) int FooBar;\n+\n+- (void) MySetter : (int) value { iVar = value; }\n+\n+@end\n+\n+int main(int argc, char *argv[]) {\n+    Bar *f = [Bar new];\n+    f.FooBar = 1;\n+\n+    f.FooBar += 3;\n+\n+    f.FooBar -= 4;\n+    return f.FooBar;\n+}\n+"}, {"sha": "2a923e060effd91c99fc188f01473addcd10b4da", "filename": "gcc/testsuite/objc.dg/property/property-2.m", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-2.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,63 @@\n+/* This program tests use of properties . */\n+/* { dg-do run { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* We can't do this yet on m64, since we have not got the NSConstantString implementation\n+   built-in to the compiler, and therefore we get missing implementation warnings.  */\n+/* { dg-require-effective-target ilp32 } */\n+/* Force ABI = 0 in the NeXT headers, also suppress deprecation warnings.  */\n+/* { dg-options \"-framework Foundation -fobjc-exceptions -mmacosx-version-min=10.4 -Wno-deprecated-declarations\" } */\n+\n+#include <objc/objc-api.h>\n+#include <Foundation/Foundation.h>\n+\n+@interface Person : NSObject\n+@property NSString *firstName, *lastName;\n+@property(readonly) NSString *fullName;\n+@end\n+\n+@interface Group : NSObject\n+@property Person *techLead, *runtimeGuru, *propertiesMaven;\n+@end\n+\n+@implementation Group\n+@property Person *techLead, *runtimeGuru, *propertiesMaven;\n+- init {\n+  techLead = [[Person alloc] init];\n+  runtimeGuru = [[Person alloc] init];\n+  propertiesMaven = [[Person alloc] init];\n+  return self;\n+}\n+@end\n+\n+@implementation Person\n+@property NSString *firstName, *lastName;\n+@property(readonly) NSString *fullName;\n+- (NSString*)fullName { // computed getter\n+    return [NSString stringWithFormat:@\"%@ %@\", firstName, lastName];\n+}\n+@end\n+\n+NSString *playWithProperties()\n+{\n+  Group *g = [[Group alloc] init] ;\n+\n+  g.techLead.firstName = @\"Blaine\";\n+  g.techLead.lastName = @\"Garst\";\n+  g.runtimeGuru.firstName = @\"Greg\";\n+  g.runtimeGuru.lastName = @\"Parker\";\n+  g.propertiesMaven.firstName = @\"Patrick\";\n+  g.propertiesMaven.lastName = @\"Beard\";\n+\n+  return [NSString stringWithFormat:@\"techlead %@ runtimeGuru %@ propertiesMaven %@\",\n+                        g.techLead.fullName, g.runtimeGuru.fullName, g.propertiesMaven.fullName];\n+}\n+\n+main()\n+{\n+    char buf [256];\n+    NSAutoreleasePool* pool  = [[NSAutoreleasePool alloc] init];\n+    sprintf(buf, \"%s\", [playWithProperties() cString]);\n+    [pool release];\n+    return strcmp (buf, \"techlead Blaine Garst runtimeGuru Greg Parker propertiesMaven Patrick Beard\");\n+}\n+"}, {"sha": "5a83263e8dc1b4ddb195b609cf3f82a39ad27fbc", "filename": "gcc/testsuite/objc.dg/property/property-3.m", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-3.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,75 @@\n+/* This program tests use of properties . */\n+/* { dg-do run { target *-*-darwin* } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n+/* We can't do this yet on m64, since we have not got the NSConstantString implementation\n+   built-in to the compiler, and therefore we get missing implementation warnings.  */\n+/* { dg-require-effective-target ilp32 } */\n+/* Force ABI = 0 in the NeXT headers, also suppress deprecation warnings.  */\n+/* { dg-options \"-framework Foundation -fobjc-exceptions -mmacosx-version-min=10.4 -Wno-deprecated-declarations\" } */\n+\n+#include <objc/objc-api.h>\n+#include <Foundation/Foundation.h>\n+\n+@interface Person : NSObject\n+{\n+}\n+@property NSString *firstName, *lastName;\n+@property(readonly) NSString *fullName;\n+\n+@end\n+\n+@interface Group : NSObject\n+{\n+}\n+\n+@property Person *techLead, *runtimeGuru, *propertiesMaven;\n+\n+@end\n+\n+@implementation Group\n+\n+@property Person *techLead, *runtimeGuru, *propertiesMaven;\n+- init {\n+  techLead = [[Person alloc] init];\n+  runtimeGuru = [[Person alloc] init];\n+  propertiesMaven = [[Person alloc] init];\n+  return self;\n+}\n+\n+@end\n+\n+@implementation Person\n+\n+@property NSString *firstName, *lastName;\n+@property(readonly, getter = fullName) NSString *fullName;\n+\n+- (NSString*)fullName { // computed getter\n+    return [NSString stringWithFormat:@\"%@ %@\", firstName, lastName];\n+}\n+\n+@end\n+\n+NSString *playWithProperties()\n+{\n+  Group *g = [[Group alloc] init] ;\n+\n+  g.techLead.firstName = @\"Blaine\";\n+  g.techLead.lastName = @\"Garst\";\n+  g.runtimeGuru.firstName = @\"Greg\";\n+  g.runtimeGuru.lastName = @\"Parker\";\n+  g.propertiesMaven.firstName = @\"Patrick\";\n+  g.propertiesMaven.lastName = @\"Beard\";\n+\n+  return [NSString stringWithFormat:@\"techlead %@ runtimeGuru %@ propertiesMaven %@\",\n+                        g.techLead.fullName, g.runtimeGuru.fullName, g.propertiesMaven.fullName];\n+}\n+\n+main()\n+{\n+    char buf [256];\n+    NSAutoreleasePool* pool  = [[NSAutoreleasePool alloc] init];\n+    sprintf(buf, \"%s\", [playWithProperties() cString]);\n+    [pool release];\n+    return strcmp (buf, \"techlead Blaine Garst runtimeGuru Greg Parker propertiesMaven Patrick Beard\");\n+}\n+"}, {"sha": "ffb825363e18821fef2d345f9dc9437a5519f590", "filename": "gcc/testsuite/objc.dg/property/property-neg-1.m", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-1.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,14 @@\n+/* This program checks for proper use of 'readonly' attribute. */\n+/* { dg-do compile } */\n+\n+@interface Bar\n+{\n+  int iVar;\n+}\n+@property (readonly) int FooBar;\n+@end\n+\n+@implementation Bar\n+@property int FooBar; /* { dg-error \"property 'FooBar' 'readonly' attribute conflicts with its interface version\" } */\n+\n+@end"}, {"sha": "7046da84732a687dba2f136bd242b685fb8a6f86", "filename": "gcc/testsuite/objc.dg/property/property-neg-2.m", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-2.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,9 @@\n+/* This program checks for proper declaration of property. */\n+/* { dg-do compile } */\n+\n+@interface Bar\n+@end\n+\n+@implementation Bar\n+@property int foo; /* { dg-error \"no declaration of property 'foo' found in the interface\" } */\n+@end"}, {"sha": "5b4804433f14402223b6f1a21c3d0fe16e075b9e", "filename": "gcc/testsuite/objc.dg/property/property-neg-3.m", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-3.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,14 @@\n+/* Property name cannot match the ivar name. */\n+/* { dg-do compile } */\n+/* Suppress warnings for incomplete class definition etc. */\n+/* { dg-options \"-w\" } */\n+\n+@interface Person \n+{\n+  char *firstName;\n+}\n+@property char *firstName; /* { dg-error \"property 'firstName' may not have the same name as an ivar in the class\" } */\n+@end\t\n+\n+@implementation  Person\n+@end"}, {"sha": "960c6d633720c13d483522e7dbe96dcc31e9312b", "filename": "gcc/testsuite/objc.dg/property/property-neg-4.m", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-4.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,17 @@\n+/* Property cannot be accessed in class method. */\n+/* { dg-do compile } */\n+\n+@interface Person \n+{\n+}\n+@property char *fullName;\n++ (void) testClass;\n+@end\t\n+\n+@implementation  Person\n+@property char *fullName;\n++ (void) testClass {\n+\tfullName = \"MyName\"; /* { dg-error \"property 'fullName' accessed in class method\" } */\n+}\n+@end\n+"}, {"sha": "53fada261987d8f32acd2435b81bd5d7a6170c85", "filename": "gcc/testsuite/objc.dg/property/property-neg-5.m", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-5.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,7 @@\n+/* getter/setter cannot be specified in an interface. */\n+/* { dg-do compile } */\n+\n+@interface Foo\n+@property ( readonly, getter = HELLO, setter = THERE : ) int value;\n+@end\t/* { dg-warning \"getter = \\\\'HELLO\\\\' may not be specified in an interface\" } */ \n+\t/* { dg-warning \"setter = \\\\'THERE\\\\:\\\\' may not be specified in an interface\" \"\" { target *-*-* } 6 } */"}, {"sha": "335fe1dee3f0aac5c107e08f2b72970a93affc3e", "filename": "gcc/testsuite/objc.dg/property/property-neg-6.m", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-6.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,8 @@\n+/* Check for proper declaration of @property. */\n+/* { dg-do compile } */\n+\n+@interface Bar\n+{\n+  int iVar;\n+}\n+@property int FooBar /* { dg-error \"expected ':', ',', ';', '\\}' or '__attribute__' at end of input\" } */"}, {"sha": "506f097eb2a0ef976fee097de1f082f8dddf89eb", "filename": "gcc/testsuite/objc.dg/property/property-neg-7.m", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-7.m?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,19 @@\n+/* Cannot write into a read-only property. */\n+/* { dg-do compile } */\n+/* Suppress warnings for incomplete class definition etc. */\n+/* { dg-options \"-w\" } */\n+\n+@interface NSArray \n+@property(readonly) int count;\n+@end\n+\n+@implementation NSArray\n+@end\n+\n+void foo (NSArray *ans[], id pid, id apid[], int i) {\n+    NSArray *test;\n+    test.count = 1; /* { dg-error \"readonly property can not be set\" } */\n+    ((NSArray *)pid).count = 1;  /* { dg-error \"readonly property can not be set\" } */\n+    ((NSArray *)apid[i]).count = 1; /* { dg-error \"readonly property can not be set\" } */\n+    ans[i].count = 3; /* { dg-error \"readonly property can not be set\" } */\n+}"}, {"sha": "52433a43ee9c1255a139d5e2cc4e11e2a553d0b0", "filename": "gcc/testsuite/objc.dg/property/property.exp", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2673f71ca5027f30b0bfadc7181b88df0581a18/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty.exp?ref=e2673f71ca5027f30b0bfadc7181b88df0581a18", "patch": "@@ -0,0 +1,42 @@\n+# GCC Objective-C testsuite that uses the `dg.exp' driver.\n+#   Copyright (C) 1997, 2001, 2007 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Load support procs.\n+load_lib objc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.m]]\n+\n+# Main loop.\n+dg-runtest $tests \"-fgnu-runtime\" $DEFAULT_CFLAGS\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  dg-runtest $tests \"-fnext-runtime\" $DEFAULT_CFLAGS\n+}\n+\n+# All done.\n+dg-finish"}]}