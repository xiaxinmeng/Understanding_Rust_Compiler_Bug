{"sha": "8f6369157917a4371b5d66dfe82b84aded3b8268", "node_id": "C_kwDOANBUbNoAKDhmNjM2OTE1NzkxN2E0MzcxYjVkNjZkZmU4MmI4NGFkZWQzYjgyNjg", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-02-21T21:58:36Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-02-21T21:58:36Z"}, "message": "analyzer: stop exploring the path after certain diagnostics [PR108830]\n\nPR analyzer/108830 reports a situation in which there are lots of\nfollowup -Wanalyzer-null-dereference warnings after the first access of\na NULL pointer, leading to very noisy output from -fanalyzer.\n\nThe analyzer's logic for stopping emitting multiple warnings from a\nstate machine doesn't quite work for NULL pointers: it attempts to\ntransition the malloc state machine's NULL pointer to the \"stop\" state,\nwhich doesn't seem to make much sense in retrospect, and seems to get\nconfused over types.\n\nSimilarly, poisoned_value_diagnostic can be very noisy for uninit\nvariables, emitting a warning for every access to an uninitialized\nvariable.  In theory, region_model::check_for_poison makes some attempts\nto suppress followups, but only for the symbolic value itself; if the\nuser's code keeps accessing the same region, we would get a warning on\neach one.  For example, this showed up in Doom's s_sound.c where there\nwere 7 followup uninit warnings after the first uninit warning in\n\"S_ChangeMusic\".\n\nThis patch adds an extra mechanism, giving pending diagnostics the\noption of stopping the analysis of an execution path if they're saved\nfor emission on it, and turning this on for these warnings:\n  -Wanalyzer-null-dereference\n  -Wanalyzer-null-argument\n  -Wanalyzer-use-after-free\n  -Wanalyzer-use-of-pointer-in-stale-stack-frame\n  -Wanalyzer-use-of-uninitialized-value\n\nDoing so should hopefully reduce the cascades of diagnostics that\n-fanalyzer can sometimes emit.\n\nI added a -fno-analyzer-suppress-followups for the cases where you\nreally want the followup warnings (e.g. in some DejaGnu tests, and\nfor microbenchmarks of UB detection, such as PR analyzer/104224).\n\nIntegration testing shows this patch reduces the number of probable\nfalse positives reported by 94, and finds one more true positive:\n\nComparison: 9.34% -> 10.91%\n  GOOD:  66 ->  67  (+1)\n   BAD: 641 -> 547 (-94)\n\nwhere the affected warnings/projects are:\n\n  -Wanalyzer-null-dereference: 0.00% GOOD: 0 BAD: 269 -> 239 (-30)\n     Unclassified: 257 -> 228 (-29)\n                  apr-1.7.0:  12 ->   5  (-7)\n                       doom:   1 ->   0  (-1)\n              haproxy-2.7.1:  47 ->  41  (-6)\n       ImageMagick-7.1.0-57:  13 ->   9  (-4)\n                 qemu-7.2.0: 165 -> 154 (-11)\n\n      Known false: 7 -> 6 (-1)\n                   xz-5.4.0:   4 ->   3  (-1)\n\n  -Wanalyzer-use-of-uninitialized-value: 0.00% GOOD: 0 BAD: 143 -> 80 (-63)\n      Known false: 47 -> 16 (-31)\n                       doom: 42 -> 11 (-31)\n\n     Unclassified: 96 -> 64 (-32)\n              coreutils-9.1: 14 -> 10  (-4)\n              haproxy-2.7.1: 29 -> 23  (-6)\n                 qemu-7.2.0: 48 -> 26 (-22)\n\n  -Wanalyzer-null-argument: 0.00% -> 2.33% GOOD: 0 -> 1 (+1) BAD: 43 -> 42 (-1)\n     Unclassified: 39 -> 38 (-1)\n      due to coreutils-9.1: 9 -> 8 (-1)\n\n    True positive: 0 -> 1 (+1)\n      (in haproxy-2.7.1)\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/108830\n\t* analyzer.opt (fanalyzer-suppress-followups): New option.\n\t* engine.cc (impl_region_model_context::warn): Terminate the path\n\tif the diagnostic's terminate_path_p vfunc returns true and\n\t-fanalyzer-suppress-followups is true (the default).\n\t(impl_sm_context::warn): Likewise, for both overloads.\n\t* pending-diagnostic.h (pending_diagnostic::terminate_path_p): New\n\tvfunc.\n\t* program-state.cc (program_state::on_edge): Terminate the path if\n\tthe ctxt requests it during updating the edge.\n\t* region-model.cc (poisoned_value_diagnostic::terminate_path_p):\n\tNew vfunc.\n\t* sm-malloc.cc (null_deref::terminate_path_p): New vfunc.\n\t(null_arg::terminate_path_p): New vfunc.\n\ngcc/ChangeLog:\n\tPR analyzer/108830\n\t* doc/invoke.texi: Document -fno-analyzer-suppress-followups.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/108830\n\t* gcc.dg/analyzer/attribute-nonnull.c: Update for\n\t-Wanalyzer-use-of-uninitialized-value terminating analysis along\n\ta path.\n\t* gcc.dg/analyzer/call-summaries-2.c: Likewise.\n\t* gcc.dg/analyzer/data-model-1.c: Likewise.\n\t* gcc.dg/analyzer/data-model-5.c: Likewise.\n\t* gcc.dg/analyzer/doom-s_sound-pr108867.c: New test.\n\t* gcc.dg/analyzer/memset-CVE-2017-18549-1.c: Add\n\t-fno-analyzer-suppress-followups.\n\t* gcc.dg/analyzer/null-deref-pr108830.c: New test.\n\t* gcc.dg/analyzer/pipe-1.c: Add -fno-analyzer-suppress-followups.\n\t* gcc.dg/analyzer/pipe-void-return.c: Likewise.\n\t* gcc.dg/analyzer/pipe2-1.c: Likewise.\n\t* gcc.dg/analyzer/pr101547.c: Update for\n\t-Wanalyzer-use-of-uninitialized-value terminating analysis along\n\ta path.\n\t* gcc.dg/analyzer/pr101875.c: Likewise.\n\t* gcc.dg/analyzer/pr104224-split.c: New test, based on...\n\t* gcc.dg/analyzer/pr104224.c: Add\n\t-fno-analyzer-suppress-followups.\n\t* gcc.dg/analyzer/realloc-2.c: Add\n\t-fno-analyzer-suppress-followups.\n\t* gcc.dg/analyzer/realloc-3.c: Likewise.\n\t* gcc.dg/analyzer/realloc-5.c: Likewise.\n\t* gcc.dg/analyzer/stdarg-1-ms_abi.c: Likewise.\n\t* gcc.dg/analyzer/stdarg-1-sysv_abi.c: Likewise.\n\t* gcc.dg/analyzer/stdarg-1.c: Likewise.\n\t* gcc.dg/analyzer/symbolic-1.c: Likewise.\n\t* gcc.dg/analyzer/symbolic-7.c: Update for\n\t-Wanalyzer-use-of-uninitialized-value terminating analysis along a\n\tpath.\n\t* gcc.dg/analyzer/uninit-4.c: Likewise.\n\t* gcc.dg/analyzer/uninit-8.c: New test.\n\t* gcc.dg/analyzer/uninit-pr94713.c: Update for\n\t-Wanalyzer-use-of-uninitialized-value terminating analysis along a\n\tpath.\n\t* gcc.dg/analyzer/zlib-6a.c: Add -fno-analyzer-suppress-followups.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "1ea28ef4b1c76fb32d8c968d3d6fd82050be9f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ea28ef4b1c76fb32d8c968d3d6fd82050be9f0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f6369157917a4371b5d66dfe82b84aded3b8268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6369157917a4371b5d66dfe82b84aded3b8268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f6369157917a4371b5d66dfe82b84aded3b8268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6369157917a4371b5d66dfe82b84aded3b8268/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2ef02e8cbbaf95fee98be255f697f47193960ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ef02e8cbbaf95fee98be255f697f47193960ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2ef02e8cbbaf95fee98be255f697f47193960ec"}], "stats": {"total": 1203, "additions": 1157, "deletions": 46}, "files": [{"sha": "9d1a937e40398f2336ca3aa06bac04dcfb6327dc", "filename": "gcc/analyzer/analyzer.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fanalyzer.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fanalyzer.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.opt?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -262,6 +262,10 @@ fanalyzer-state-merge\n Common Var(flag_analyzer_state_merge) Init(1)\n Merge similar-enough states during analysis.\n \n+fanalyzer-suppress-followups\n+Common Var(flag_analyzer_suppress_followups) Init(1)\n+Stop exploring an execution path after certain diagnostics.\n+\n fanalyzer-transitivity\n Common Var(flag_analyzer_transitivity) Init(0)\n Enable transitivity of constraints during analysis."}, {"sha": "a5965c2b8ff048e47d9c1687d5298a11020a5bee", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -125,11 +125,20 @@ impl_region_model_context::warn (std::unique_ptr<pending_diagnostic> d)\n       return false;\n     }\n   if (m_eg)\n-    return m_eg->get_diagnostic_manager ().add_diagnostic\n-      (m_enode_for_diag, m_enode_for_diag->get_supernode (),\n-       m_stmt, m_stmt_finder, std::move (d));\n-  else\n-    return false;\n+    {\n+      bool terminate_path = d->terminate_path_p ();\n+      if (m_eg->get_diagnostic_manager ().add_diagnostic\n+\t  (m_enode_for_diag, m_enode_for_diag->get_supernode (),\n+\t   m_stmt, m_stmt_finder, std::move (d)))\n+\t{\n+\t  if (m_path_ctxt\n+\t      && terminate_path\n+\t      && flag_analyzer_suppress_followups)\n+\t    m_path_ctxt->terminate_path ();\n+\t  return true;\n+\t}\n+    }\n+  return false;\n }\n \n void\n@@ -378,9 +387,14 @@ class impl_sm_context : public sm_context\n       = (var\n \t ? m_old_smap->get_state (var_old_sval, m_eg.get_ext_state ())\n \t : m_old_smap->get_global_state ());\n+    bool terminate_path = d->terminate_path_p ();\n     m_eg.get_diagnostic_manager ().add_diagnostic\n       (&m_sm, m_enode_for_diag, snode, stmt, m_stmt_finder,\n        var, var_old_sval, current, std::move (d));\n+    if (m_path_ctxt\n+\t&& terminate_path\n+\t&& flag_analyzer_suppress_followups)\n+      m_path_ctxt->terminate_path ();\n   }\n \n   void warn (const supernode *snode, const gimple *stmt,\n@@ -393,9 +407,14 @@ class impl_sm_context : public sm_context\n       = (sval\n \t ? m_old_smap->get_state (sval, m_eg.get_ext_state ())\n \t : m_old_smap->get_global_state ());\n+    bool terminate_path = d->terminate_path_p ();\n     m_eg.get_diagnostic_manager ().add_diagnostic\n       (&m_sm, m_enode_for_diag, snode, stmt, m_stmt_finder,\n        NULL_TREE, sval, current, std::move (d));\n+    if (m_path_ctxt\n+\t&& terminate_path\n+\t&& flag_analyzer_suppress_followups)\n+      m_path_ctxt->terminate_path ();\n   }\n \n   /* Hook for picking more readable trees for SSA names of temporaries,"}, {"sha": "6423c8be4ea61694d423080617d0cb8f6d310f30", "filename": "gcc/analyzer/pending-diagnostic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fpending-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fpending-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.h?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -173,6 +173,10 @@ class pending_diagnostic\n      having to generate feasible execution paths for them).  */\n   virtual int get_controlling_option () const = 0;\n \n+  /* Vfunc to give the diagnostic the chance to terminate the execution\n+     path being explored.  By default, don't terminate the path.  */\n+  virtual bool terminate_path_p () const { return false; }\n+\n   /* Vfunc for emitting the diagnostic.  The rich_location will have been\n      populated with a diagnostic_path.\n      Return true if a diagnostic is actually emitted.  */"}, {"sha": "8dade4b5b3e01ee2a45e7943172a3d7674da4422", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1105,6 +1105,27 @@ program_state::on_edge (exploded_graph &eg,\n \t\t\tconst superedge *succ,\n \t\t\tuncertainty_t *uncertainty)\n {\n+  class my_path_context : public path_context\n+  {\n+  public:\n+    my_path_context (bool &terminated) : m_terminated (terminated) {}\n+    void bifurcate (std::unique_ptr<custom_edge_info>) final override\n+    {\n+      gcc_unreachable ();\n+    }\n+\n+    void terminate_path () final override\n+    {\n+      m_terminated = true;\n+    }\n+\n+    bool terminate_path_p () const final override\n+    {\n+      return m_terminated;\n+    }\n+    bool &m_terminated;\n+  };\n+\n   /* Update state.  */\n   const program_point &point = enode->get_point ();\n   const gimple *last_stmt = point.get_supernode ()->get_last_stmt ();\n@@ -1117,11 +1138,12 @@ program_state::on_edge (exploded_graph &eg,\n      Adding the relevant conditions for the edge could also trigger\n      sm-state transitions (e.g. transitions due to ptrs becoming known\n      to be NULL or non-NULL) */\n-\n+  bool terminated = false;\n+  my_path_context path_ctxt (terminated);\n   impl_region_model_context ctxt (eg, enode,\n \t\t\t\t  &enode->get_state (),\n \t\t\t\t  this,\n-\t\t\t\t  uncertainty, NULL,\n+\t\t\t\t  uncertainty, &path_ctxt,\n \t\t\t\t  last_stmt);\n   if (!m_region_model->maybe_update_for_edge (*succ,\n \t\t\t\t\t      last_stmt,\n@@ -1134,6 +1156,8 @@ program_state::on_edge (exploded_graph &eg,\n \t\t     succ->m_dest->m_index);\n       return false;\n     }\n+  if (terminated)\n+    return false;\n \n   program_state::detect_leaks (enode->get_state (), *this,\n \t\t\t       NULL, eg.get_ext_state (),"}, {"sha": "f844b519f6131e28fea2ea21bf2f8409bf40f9e5", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -505,6 +505,8 @@ class poisoned_value_diagnostic\n       }\n   }\n \n+  bool terminate_path_p () const final override { return true; }\n+\n   bool emit (rich_location *rich_loc) final override\n   {\n     switch (m_pkind)"}, {"sha": "1ea9b30fa13d5594c627599b9b2e53e3b863fb21", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1150,6 +1150,8 @@ class null_deref : public malloc_diagnostic\n     return OPT_Wanalyzer_null_dereference;\n   }\n \n+  bool terminate_path_p () const final override { return true; }\n+\n   bool emit (rich_location *rich_loc) final override\n   {\n     /* CWE-476: NULL Pointer Dereference.  */\n@@ -1203,6 +1205,8 @@ class null_arg : public malloc_diagnostic\n     return OPT_Wanalyzer_null_argument;\n   }\n \n+  bool terminate_path_p () const final override { return true; }\n+\n   bool emit (rich_location *rich_loc) final override\n   {\n     /* CWE-476: NULL Pointer Dereference.  */"}, {"sha": "bcf8510945b105fb84f62e360b0d490e7b6f8b13", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -428,6 +428,7 @@ Objective-C and Objective-C++ Dialects}.\n -fanalyzer-fine-grained @gol\n -fno-analyzer-state-merge @gol\n -fno-analyzer-state-purge @gol\n+-fno-analyzer-suppress-followups @gol\n -fanalyzer-transitivity @gol\n -fno-analyzer-undo-inlining @gol\n -fanalyzer-verbose-edges @gol\n@@ -11012,6 +11013,30 @@ and which aren't relevant to leak analysis.\n With @option{-fno-analyzer-state-purge} this purging of state can\n be suppressed, for debugging state-handling issues.\n \n+@item -fno-analyzer-suppress-followups\n+@opindex fanalyzer-suppress-followups\n+@opindex fno-analyzer-suppress-followups\n+This option is intended for analyzer developers.\n+\n+By default the analyzer will stop exploring an execution path after\n+encountering certain diagnostics, in order to avoid potentially issuing a\n+cascade of follow-up diagnostics.\n+\n+The diagnostics that terminate analysis along a path are:\n+\n+@itemize\n+@item @option{-Wanalyzer-null-argument}\n+@item @option{-Wanalyzer-null-dereference}\n+@item @option{-Wanalyzer-use-after-free}\n+@item @option{-Wanalyzer-use-of-pointer-in-stale-stack-frame}\n+@item @option{-Wanalyzer-use-of-uninitialized-value}\n+@end itemize\n+\n+With @option{-fno-analyzer-suppress-followups} the analyzer will\n+continue to explore such paths even after such diagnostics, which may\n+be helpful for debugging issues in the analyzer, or for microbenchmarks\n+for detecting undefined behavior.\n+\n @item -fanalyzer-transitivity\n @opindex fanalyzer-transitivity\n @opindex fno-analyzer-transitivity"}, {"sha": "5700256c06a4629f73f05de75aa58fe127da8dcd", "filename": "gcc/testsuite/gcc.dg/analyzer/attribute-nonnull.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattribute-nonnull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattribute-nonnull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattribute-nonnull.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -16,8 +16,6 @@ void test_1 (void *p, void *q, void *r)\n   foo(p, q, r);\n   foo(NULL, q, r); /* { dg-warning \"use of NULL where non-null expected\" \"warning\" } */\n   /* { dg-message \"argument 1 NULL where non-null expected\" \"note\" { target *-*-* } .-1 } */\n-  foo(p, NULL, r);\n-  foo(p, q, NULL); /* { dg-warning \"use of NULL where non-null expected\" } */\n }\n \n void test_1a (void *q, void *r)\n@@ -27,12 +25,29 @@ void test_1a (void *q, void *r)\n   /* { dg-message \"argument 1 \\\\('p'\\\\) NULL where non-null expected\" \"note\" { target *-*-* } .-1 } */\n }\n \n-void test_2 (void *p, void *q, void *r)\n+void test_1b (void *p, void *r)\n+{\n+  foo(p, NULL, r);\n+}\n+\n+void test_1c (void *p, void *q, void *r)\n+{\n+  foo(p, q, NULL); /* { dg-warning \"use of NULL where non-null expected\" } */\n+}\n+\n+void test_2a (void *p, void *q, void *r)\n {\n   bar(p, q, r);\n-  bar(NULL, q, r); /* { dg-warning \"use of NULL where non-null expected\" \"warning\" } */\n+}\n+\n+void test_2b (void *p, void *q, void *r)\n+{\n   bar(p, NULL, r); /* { dg-warning \"use of NULL where non-null expected\" \"warning\" } */\n   /* { dg-message \"argument 2 NULL where non-null expected\" \"note\" { target *-*-* } .-1 } */\n+}\n+\n+void test_2c (void *p, void *q, void *r)\n+{\n   bar(p, q, NULL); /* { dg-warning \"use of NULL where non-null expected\" \"warning\" } */\n }\n "}, {"sha": "1bac24f4c67ee9a4e2facf14de4877daeef81fbb", "filename": "gcc/testsuite/gcc.dg/analyzer/call-summaries-2.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fcall-summaries-2.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -607,17 +607,22 @@ void partially_inits (int *p, int v)\n   p[1] = v;\n }\n \n-void test_partially_inits (int x)\n+void test_partially_inits_0 (int x)\n {\n   int arr[2];\n   partially_inits (arr, x);\n   partially_inits (arr, x);\n \n-  __analyzer_eval (arr[0]); /* { dg-warning \"UNKNOWN\" \"eval\" } */\n-  /* { dg-warning \"use of uninitialized value 'arr\\\\\\[0\\\\\\]'\" \"uninit\" { target *-*-* } .-1 } */\n+  __analyzer_eval (arr[0]); /* { dg-warning \"use of uninitialized value 'arr\\\\\\[0\\\\\\]'\" } */\n+}\n+\n+void test_partially_inits_1 (int x)\n+{\n+  int arr[2];\n+  partially_inits (arr, x);\n+  partially_inits (arr, x);\n \n-  __analyzer_eval (arr[1] == x); /* { dg-warning \"UNKNOWN\" \"eval\" } */ \n-  /* { dg-bogus \"use of uninitialized value 'arr\\\\\\[1\\\\\\]'\" \"uninit\" { xfail *-*-* } .-1 } */\n+  __analyzer_eval (arr[1] == x); /* { dg-bogus \"use of uninitialized value 'arr\\\\\\[1\\\\\\]'\" \"uninit\" { xfail *-*-* } } */\n   // TODO(xfail), and eval should be \"TRUE\"\n }\n "}, {"sha": "86d1ccf11a7c9be784f83e8631f41f6b02112cc9", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-1.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -351,9 +351,8 @@ void test_19 (void)\n {\n   int i, j; /* { dg-message \"region created on stack here\" } */\n   /* Compare two uninitialized locals.  */\n-    __analyzer_eval (i == j); /* { dg-warning \"UNKNOWN\" \"unknown \" } */\n-    /* { dg-warning \"use of uninitialized value 'i'\" \"uninit i\" { target *-*-* } .-1 } */\n-    /* { dg-warning \"use of uninitialized value 'j'\" \"uninit j\" { target *-*-* } .-2 } */\n+    __analyzer_eval (i == j); /* { dg-warning \"use of uninitialized value 'i'\" \"uninit i\" } */\n+    /* { dg-warning \"use of uninitialized value 'j'\" \"uninit j\" { target *-*-* } .-1 } */\n }\n \n void test_20 (int i, int j)\n@@ -653,11 +652,6 @@ void test_29b (void)\n   __analyzer_eval (p[9].x == 109024); /* { dg-warning \"TRUE\" } */\n   __analyzer_eval (p[9].y == 109025); /* { dg-warning \"TRUE\" } */\n \n-  __analyzer_eval (p[10].x == 0); /* { dg-warning \"UNKNOWN\" \"unknown\" } */\n-  /* { dg-warning \"use of uninitialized value 'p\\\\\\[10\\\\\\].x'\" \"uninit\" { target *-*-* } .-1 } */\n-  __analyzer_eval (p[10].y == 0); /* { dg-warning \"UNKNOWN\" \"unknown\" } */\n-  /* { dg-warning \"use of uninitialized value 'p\\\\\\[10\\\\\\].y'\" \"uninit\" { target *-*-* } .-1 } */\n-\n   q = &p[7];\n \n   __analyzer_eval (q->x == 107024); /* { dg-warning \"TRUE\" } */\n@@ -679,6 +673,8 @@ void test_29b (void)\n \n   __analyzer_eval (q->x == 107024); /* { dg-warning \"TRUE\" } */\n   __analyzer_eval (q->y == 107025); /* { dg-warning \"TRUE\" } */\n+\n+  __analyzer_eval (p[10].x == 0); /* { dg-warning \"use of uninitialized value 'p\\\\\\[10\\\\\\].x'\" } */\n }\n \n void test_29c (int len)\n@@ -704,11 +700,6 @@ void test_29c (int len)\n   __analyzer_eval (p[9].x == 109024); /* { dg-warning \"TRUE\" } */\n   __analyzer_eval (p[9].y == 109025); /* { dg-warning \"TRUE\" } */\n \n-  __analyzer_eval (p[10].x == 0); /* { dg-warning \"UNKNOWN\" \"unknown\" } */\n-  /* { dg-warning \"use of uninitialized value '\\\\*p\\\\\\[10\\\\\\].x'\" \"uninit\" { target *-*-* } .-1 } */\n-  __analyzer_eval (p[10].y == 0); /* { dg-warning \"UNKNOWN\" \"unknown\" } */\n-  /* { dg-warning \"use of uninitialized value '\\\\*p\\\\\\[10\\\\\\].y'\" \"uninit\" { target *-*-* } .-1 } */\n-\n   q = &p[7];\n \n   __analyzer_eval (q->x == 107024); /* { dg-warning \"TRUE\" } */\n@@ -730,6 +721,8 @@ void test_29c (int len)\n \n   __analyzer_eval (q->x == 107024); /* { dg-warning \"TRUE\" } */\n   __analyzer_eval (q->y == 107025); /* { dg-warning \"TRUE\" } */\n+\n+  __analyzer_eval (p[10].x == 0); /* { dg-warning \"use of uninitialized value '\\\\*p\\\\\\[10\\\\\\].x'\" } */\n }\n \n void test_30 (void *ptr)"}, {"sha": "b71bad757a19321c2621b44ffce68e87f80e74ae", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-5.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -90,10 +90,6 @@ void unref (base_obj *obj)\n {\n   if (--obj->ob_refcnt == 0) /* { dg-bogus \"dereference of uninitialized pointer 'obj'\" } */\n     obj->ob_type->tp_dealloc (obj);\n-  /* { dg-warning \"dereference of NULL 'obj'\" \"deref of NULL\" { target *-*-* } .-2 } */\n-  /* FIXME: ideally we wouldn't issue this, as we've already issued a\n-     warning about str_obj which is now in the \"stop\" state; the cast\n-     confuses things.  */\n }\n \n void test_1 (const char *str)"}, {"sha": "ebbfed2982af2a9a52a9c7926381c751dabacc47", "filename": "gcc/testsuite/gcc.dg/analyzer/doom-s_sound-pr108867.c", "status": "added", "additions": 653, "deletions": 0, "changes": 653, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdoom-s_sound-pr108867.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdoom-s_sound-pr108867.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdoom-s_sound-pr108867.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -0,0 +1,653 @@\n+/* Reduced from Doom's linuxdoom-1.10/s_sound.c, which is GPLv2 or later.  */\n+\n+/* { dg-additional-options \"-fno-analyzer-call-summaries -Wno-analyzer-too-complex\" } */\n+\n+typedef struct _IO_FILE FILE;\n+extern FILE* stderr;\n+extern int\n+fprintf(FILE* __restrict __stream, const char* __restrict __format, ...);\n+extern int\n+sprintf(char* __restrict __s, const char* __restrict __format, ...)\n+  __attribute__((__nothrow__));\n+extern int\n+abs(int __x) __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));\n+\n+typedef enum\n+{\n+  false,\n+  true\n+} boolean;\n+\n+typedef unsigned char byte;\n+\n+void\n+I_Error(char* error, ...);\n+\n+typedef enum\n+{\n+  shareware,\n+  registered,\n+  commercial,\n+  /* [...snip...] */\n+} GameMode_t;\n+\n+typedef int fixed_t;\n+\n+fixed_t\n+FixedMul(fixed_t a, fixed_t b);\n+\n+extern fixed_t finesine[5 * 8192 / 4];\n+typedef unsigned angle_t;\n+\n+typedef struct mobj_s\n+{\n+  /* [...snip...] */\n+  fixed_t x;\n+  fixed_t y;\n+  fixed_t z;\n+  /* [...snip...] */\n+  angle_t angle;\n+  /* [...snip...] */\n+} mobj_t;\n+\n+typedef struct player_s\n+{\n+  mobj_t* mo;\n+  /* [...snip...] */\n+} player_t;\n+\n+extern GameMode_t gamemode;\n+extern int gameepisode;\n+extern int gamemap;\n+extern int consoleplayer;\n+extern player_t players[4];\n+\n+typedef struct sfxinfo_struct sfxinfo_t;\n+\n+struct sfxinfo_struct\n+{\n+  /* [...snip...] */\n+  int priority;\n+  sfxinfo_t* link;\n+  int pitch;\n+  int volume;\n+  void* data;\n+  int usefulness;\n+  int lumpnum;\n+};\n+\n+typedef struct\n+{\n+  char* name;\n+  int lumpnum;\n+  void* data;\n+  int handle;\n+} musicinfo_t;\n+\n+extern sfxinfo_t S_sfx[];\n+\n+extern musicinfo_t S_music[];\n+\n+typedef enum\n+{\n+  mus_None,\n+  mus_e1m1,\n+  /* [...snip...] */\n+  mus_e1m5,\n+  /* [...snip...] */\n+  mus_e1m9,\n+  /* [...snip...] */\n+  mus_e2m4,\n+  mus_e2m5,\n+  mus_e2m6,\n+  mus_e2m7,\n+  /* [...snip...] */\n+  mus_e3m2,\n+  mus_e3m3,\n+  mus_e3m4,\n+  /* [...snip...] */\n+  mus_runnin,\n+  /* [...snip...] */\n+  NUMMUSIC\n+} musicenum_t;\n+\n+typedef enum\n+{\n+  /* [...snip...] */\n+  sfx_sawup,\n+  /* [...snip...] */\n+  sfx_sawhit,\n+  /* [...snip...] */\n+  sfx_itemup,\n+  /* [...snip...] */\n+  sfx_tink,\n+  /* [...snip...] */\n+  NUMSFX\n+} sfxenum_t;\n+\n+\n+void\n+I_SetChannels();\n+\n+int\n+I_GetSfxLumpNum(sfxinfo_t* sfxinfo);\n+\n+int\n+I_StartSound(int id, int vol, int sep, int pitch, int priority);\n+\n+void\n+I_StopSound(int handle);\n+int\n+I_SoundIsPlaying(int handle);\n+void\n+I_UpdateSoundParams(int handle, int vol, int sep, int pitch);\n+\n+void\n+I_SetMusicVolume(int volume);\n+\n+void\n+I_PauseSong(int handle);\n+void\n+I_ResumeSong(int handle);\n+int\n+I_RegisterSong(void* data);\n+\n+void\n+I_PlaySong(int handle, int looping);\n+\n+void\n+I_StopSong(int handle);\n+\n+void\n+I_UnRegisterSong(int handle);\n+void\n+S_StopSound(void* origin);\n+void\n+S_ChangeMusic(int music_id, int looping);\n+void\n+S_StopMusic(void);\n+\n+void\n+S_SetMusicVolume(int volume);\n+void\n+S_SetSfxVolume(int volume);\n+\n+void*\n+Z_Malloc(int size, int tag, void* ptr);\n+void\n+Z_ChangeTag2(void* ptr, int tag);\n+\n+typedef struct memblock_s\n+{\n+  /* [...snip...] */\n+  int id;\n+  /* [...snip...] */\n+} memblock_t;\n+int\n+M_Random(void);\n+int\n+W_GetNumForName(char* name);\n+void*\n+W_CacheLumpNum(int lump, int tag);\n+angle_t\n+R_PointToAngle2(fixed_t x1, fixed_t y1, fixed_t x2, fixed_t y2);\n+\n+typedef struct\n+{\n+  sfxinfo_t* sfxinfo;\n+  void* origin;\n+  int handle;\n+} channel_t;\n+static channel_t* channels;\n+\n+int snd_SfxVolume = 15;\n+int snd_MusicVolume = 15;\n+static boolean mus_paused;\n+static musicinfo_t* mus_playing = 0;\n+int numChannels;\n+static int nextcleanup;\n+\n+int\n+S_getChannel(void* origin, sfxinfo_t* sfxinfo);\n+\n+int\n+S_AdjustSoundParams(mobj_t* listener,\n+                    mobj_t* source,\n+                    int* vol,\n+                    int* sep,\n+                    int* pitch);\n+void\n+S_StopChannel(int cnum);\n+\n+void\n+S_Init(int sfxVolume, int musicVolume)\n+{\n+  int i;\n+\n+  fprintf(stderr, \"S_Init: default sfx volume %d\\n\", sfxVolume);\n+\n+  I_SetChannels();\n+\n+  S_SetSfxVolume(sfxVolume);\n+\n+  S_SetMusicVolume(musicVolume);\n+\n+  channels = (channel_t*)Z_Malloc(numChannels * sizeof(channel_t), 1, 0);\n+\n+  for (i = 0; i < numChannels; i++)\n+    channels[i].sfxinfo = 0;\n+\n+  mus_paused = 0;\n+\n+  for (i = 1; i < NUMSFX; i++)\n+    S_sfx[i].lumpnum = S_sfx[i].usefulness = -1;\n+}\n+void\n+S_Start(void)\n+{\n+  int cnum;\n+  int mnum;\n+\n+  for (cnum = 0; cnum < numChannels; cnum++)\n+    if (channels[cnum].sfxinfo)\n+      S_StopChannel(cnum);\n+\n+  mus_paused = 0;\n+\n+  if (gamemode == commercial)\n+    mnum = mus_runnin + gamemap - 1;\n+  else {\n+    int spmus[] = {\n+\n+      mus_e3m4, mus_e3m2, mus_e3m3, mus_e1m5, mus_e2m7,\n+      mus_e2m4, mus_e2m6, mus_e2m5, mus_e1m9\n+    };\n+\n+    if (gameepisode < 4)\n+      mnum = mus_e1m1 + (gameepisode - 1) * 9 + gamemap - 1;\n+    else\n+      mnum = spmus[gamemap - 1];\n+  }\n+\n+  S_ChangeMusic(mnum, true);\n+\n+  nextcleanup = 15;\n+}\n+\n+void\n+S_StartSoundAtVolume(void* origin_p, int sfx_id, int volume)\n+{\n+\n+  int rc;\n+  int sep;\n+  int pitch;\n+  int priority;\n+  sfxinfo_t* sfx;\n+  int cnum;\n+\n+  mobj_t* origin = (mobj_t*)origin_p;\n+  if (sfx_id < 1 || sfx_id > NUMSFX)\n+    I_Error(\"Bad sfx #: %d\", sfx_id);\n+\n+  sfx = &S_sfx[sfx_id];\n+\n+  if (sfx->link) {\n+    pitch = sfx->pitch;\n+    priority = sfx->priority;\n+    volume += sfx->volume;\n+\n+    if (volume < 1)\n+      return;\n+\n+    if (volume > snd_SfxVolume)\n+      volume = snd_SfxVolume;\n+  } else {\n+    pitch = 128;\n+    priority = 64;\n+  }\n+\n+  if (origin && origin != players[consoleplayer].mo) {\n+    rc = S_AdjustSoundParams(\n+      players[consoleplayer].mo, origin, &volume, &sep, &pitch);\n+\n+    if (origin->x == players[consoleplayer].mo->x &&\n+        origin->y == players[consoleplayer].mo->y) {\n+      sep = 128;\n+    }\n+\n+    if (!rc)\n+      return;\n+  } else {\n+    sep = 128;\n+  }\n+\n+  if (sfx_id >= sfx_sawup && sfx_id <= sfx_sawhit) {\n+    pitch += 8 - (M_Random() & 15);\n+\n+    if (pitch < 0)\n+      pitch = 0;\n+    else if (pitch > 255)\n+      pitch = 255;\n+  } else if (sfx_id != sfx_itemup && sfx_id != sfx_tink) {\n+    pitch += 16 - (M_Random() & 31);\n+\n+    if (pitch < 0)\n+      pitch = 0;\n+    else if (pitch > 255)\n+      pitch = 255;\n+  }\n+\n+  S_StopSound(origin);\n+\n+  cnum = S_getChannel(origin, sfx);\n+\n+  if (cnum < 0)\n+    return;\n+  if (sfx->lumpnum < 0)\n+    sfx->lumpnum = I_GetSfxLumpNum(sfx);\n+\n+  if (!sfx->data) {\n+    fprintf(stderr, \"S_StartSoundAtVolume: 16bit and not pre-cached - wtf?\\n\");\n+  }\n+\n+  if (sfx->usefulness++ < 0)\n+    sfx->usefulness = 1;\n+\n+  channels[cnum].handle = I_StartSound(sfx_id,\n+\n+                                       volume,\n+                                       sep,\n+                                       pitch,\n+                                       priority);\n+}\n+\n+void\n+S_StartSound(void* origin, int sfx_id)\n+{\n+\n+  S_StartSoundAtVolume(origin, sfx_id, snd_SfxVolume);\n+}\n+\n+void\n+S_StopSound(void* origin)\n+{\n+\n+  int cnum;\n+\n+  for (cnum = 0; cnum < numChannels; cnum++) {\n+    if (channels[cnum].sfxinfo && channels[cnum].origin == origin) {\n+      S_StopChannel(cnum);\n+      break;\n+    }\n+  }\n+}\n+void\n+S_PauseSound(void)\n+{\n+  if (mus_playing && !mus_paused) {\n+    I_PauseSong(mus_playing->handle);\n+    mus_paused = true;\n+  }\n+}\n+\n+void\n+S_ResumeSound(void)\n+{\n+  if (mus_playing && mus_paused) {\n+    I_ResumeSong(mus_playing->handle);\n+    mus_paused = false;\n+  }\n+}\n+\n+void\n+S_UpdateSounds(void* listener_p)\n+{\n+  int audible;\n+  int cnum;\n+  int volume;\n+  int sep;\n+  int pitch;\n+  sfxinfo_t* sfx;\n+  channel_t* c;\n+\n+  mobj_t* listener = (mobj_t*)listener_p;\n+  for (cnum = 0; cnum < numChannels; cnum++) {\n+    c = &channels[cnum];\n+    sfx = c->sfxinfo;\n+\n+    if (c->sfxinfo) {\n+      if (I_SoundIsPlaying(c->handle)) {\n+\n+        volume = snd_SfxVolume;\n+        pitch = 128;\n+        sep = 128;\n+\n+        if (sfx->link) {\n+          pitch = sfx->pitch;\n+          volume += sfx->volume;\n+          if (volume < 1) {\n+            S_StopChannel(cnum);\n+            continue;\n+          } else if (volume > snd_SfxVolume) {\n+            volume = snd_SfxVolume;\n+          }\n+        }\n+\n+        if (c->origin && listener_p != c->origin) {\n+          audible =\n+            S_AdjustSoundParams(listener, c->origin, &volume, &sep, &pitch);\n+\n+          if (!audible) {\n+            S_StopChannel(cnum);\n+          } else\n+            I_UpdateSoundParams(c->handle, volume, sep, pitch);\n+        }\n+      } else {\n+\n+        S_StopChannel(cnum);\n+      }\n+    }\n+  }\n+}\n+\n+void\n+S_SetMusicVolume(int volume)\n+{\n+  if (volume < 0 || volume > 127) {\n+    I_Error(\"Attempt to set music volume at %d\", volume);\n+  }\n+\n+  I_SetMusicVolume(127);\n+  I_SetMusicVolume(volume);\n+  snd_MusicVolume = volume;\n+}\n+\n+void\n+S_SetSfxVolume(int volume)\n+{\n+\n+  if (volume < 0 || volume > 127)\n+    I_Error(\"Attempt to set sfx volume at %d\", volume);\n+\n+  snd_SfxVolume = volume;\n+}\n+\n+void\n+S_StartMusic(int m_id)\n+{\n+  S_ChangeMusic(m_id, false);\n+}\n+\n+void\n+S_ChangeMusic(int musicnum, int looping)\n+{\n+  musicinfo_t* music;\n+  char namebuf[9];\n+\n+  if ((musicnum <= mus_None) || (musicnum >= NUMMUSIC)) {\n+    I_Error(\"Bad music number %d\", musicnum);\n+  } else\n+    music = &S_music[musicnum];\n+\n+  /* We don't know that I_Error exits, so actually a false positive;\n+     see PR analyzer/108867.  */\n+\n+  if (mus_playing == music) /* { dg-warning \"use of uninitialized value 'music'\" } */\n+    return;\n+\n+  S_StopMusic();\n+\n+  /* We shouldn't issue further warnings about 'music' being\n+     uninitialized.  */\n+\n+  if (!music->lumpnum) { /* { dg-bogus \"use of uninitialized value 'music'\" } */\n+    sprintf(namebuf, \"d_%s\", music->name); /* { dg-bogus \"use of uninitialized value 'music'\" } */\n+    music->lumpnum = W_GetNumForName(namebuf); /* { dg-bogus \"use of uninitialized value 'music'\" } */\n+  }\n+\n+  music->data = (void*)W_CacheLumpNum(music->lumpnum, 3); /* { dg-bogus \"use of uninitialized value 'music'\" } */\n+  music->handle = I_RegisterSong(music->data); /* { dg-bogus \"use of uninitialized value 'music'\" } */\n+\n+  I_PlaySong(music->handle, looping); /* { dg-bogus \"use of uninitialized value 'music'\" } */\n+\n+  mus_playing = music; /* { dg-bogus \"use of uninitialized value 'music'\" } */\n+}\n+\n+void\n+S_StopMusic(void)\n+{\n+  if (mus_playing) {\n+    if (mus_paused)\n+      I_ResumeSong(mus_playing->handle);\n+\n+    I_StopSong(mus_playing->handle);\n+    I_UnRegisterSong(mus_playing->handle);\n+    {\n+      if (((memblock_t*)((byte*)(mus_playing->data) - sizeof(memblock_t)))\n+            ->id != 0x1d4a11)\n+        I_Error(\"Z_CT at \"\n+                \"s_sound.c\"\n+                \":%i\",\n+                699);\n+      Z_ChangeTag2(mus_playing->data, 101);\n+    };\n+    ;\n+\n+    mus_playing->data = 0;\n+    mus_playing = 0;\n+  }\n+}\n+\n+void\n+S_StopChannel(int cnum)\n+{\n+\n+  int i;\n+  channel_t* c = &channels[cnum];\n+\n+  if (c->sfxinfo) {\n+\n+    if (I_SoundIsPlaying(c->handle)) {\n+\n+      I_StopSound(c->handle);\n+    }\n+\n+    for (i = 0; i < numChannels; i++) {\n+      if (cnum != i && c->sfxinfo == channels[i].sfxinfo) {\n+        break;\n+      }\n+    }\n+\n+    c->sfxinfo->usefulness--;\n+\n+    c->sfxinfo = 0;\n+  }\n+}\n+int\n+S_AdjustSoundParams(mobj_t* listener,\n+                    mobj_t* source,\n+                    int* vol,\n+                    int* sep,\n+                    int* pitch)\n+{\n+  fixed_t approx_dist;\n+  fixed_t adx;\n+  fixed_t ady;\n+  angle_t angle;\n+\n+  adx = abs(listener->x - source->x);\n+  ady = abs(listener->y - source->y);\n+\n+  approx_dist = adx + ady - ((adx < ady ? adx : ady) >> 1);\n+\n+  if (gamemap != 8 && approx_dist > (1200 * 0x10000)) {\n+    return 0;\n+  }\n+\n+  angle = R_PointToAngle2(listener->x, listener->y, source->x, source->y);\n+\n+  if (angle > listener->angle)\n+    angle = angle - listener->angle;\n+  else\n+    angle = angle + (0xffffffff - listener->angle);\n+\n+  angle >>= 19;\n+\n+  *sep = 128 - (FixedMul((96 * 0x10000), finesine[angle]) >> 16);\n+\n+  if (approx_dist < (160 * 0x10000)) {\n+    *vol = snd_SfxVolume;\n+  } else if (gamemap == 8) {\n+    if (approx_dist > (1200 * 0x10000))\n+      approx_dist = (1200 * 0x10000);\n+\n+    *vol =\n+      15 + ((snd_SfxVolume - 15) * (((1200 * 0x10000) - approx_dist) >> 16)) /\n+             (((1200 * 0x10000) - (160 * 0x10000)) >> 16);\n+  } else {\n+\n+    *vol = (snd_SfxVolume * (((1200 * 0x10000) - approx_dist) >> 16)) /\n+           (((1200 * 0x10000) - (160 * 0x10000)) >> 16);\n+  }\n+\n+  return (*vol > 0);\n+}\n+int\n+S_getChannel(void* origin, sfxinfo_t* sfxinfo)\n+{\n+\n+  int cnum;\n+\n+  channel_t* c;\n+\n+  for (cnum = 0; cnum < numChannels; cnum++) {\n+    if (!channels[cnum].sfxinfo)\n+      break;\n+    else if (origin && channels[cnum].origin == origin) {\n+      S_StopChannel(cnum);\n+      break;\n+    }\n+  }\n+\n+  if (cnum == numChannels) {\n+\n+    for (cnum = 0; cnum < numChannels; cnum++)\n+      if (channels[cnum].sfxinfo->priority >= sfxinfo->priority) /* { dg-warning \"dereference of NULL\" } */\n+        break;\n+\n+    if (cnum == numChannels) {\n+\n+      return -1;\n+    } else {\n+\n+      S_StopChannel(cnum);\n+    }\n+  }\n+\n+  c = &channels[cnum];\n+\n+  c->sfxinfo = sfxinfo;\n+  c->origin = origin;\n+\n+  return cnum;\n+}"}, {"sha": "418168d413e55a38ea1960c21ecff001491a9243", "filename": "gcc/testsuite/gcc.dg/analyzer/memset-CVE-2017-18549-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemset-CVE-2017-18549-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemset-CVE-2017-18549-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemset-CVE-2017-18549-1.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -5,6 +5,8 @@\n    It was fixed by e.g. 342ffc26693b528648bdc9377e51e4f2450b4860 on linux-4.13.y\n    in linux-stable.  */\n \n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n+\n #include \"analyzer-decls.h\"\n #include <string.h>\n "}, {"sha": "417ab00794de81d7096bcf63526702e5ca98127a", "filename": "gcc/testsuite/gcc.dg/analyzer/null-deref-pr108830.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108830.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108830.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fnull-deref-pr108830.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -0,0 +1,94 @@\n+/* Reduced from apr-1.7.0/tables/apr_hash.c: 'apr_hash_merge' */\n+\n+/* { dg-additional-options \"-Wno-analyzer-too-complex\" } */\n+\n+#define NULL ((void*)0)\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void*\n+memset(void* __s, int __c, size_t __n)\n+  __attribute__((__nothrow__, __leaf__, __nonnull__(1)));\n+\n+typedef struct apr_pool_t apr_pool_t;\n+\n+void*\n+apr_palloc(apr_pool_t* p, size_t size)\n+  __attribute__((alloc_size(2), nonnull(1)));\n+\n+typedef struct apr_hash_t apr_hash_t;\n+typedef struct apr_hash_index_t apr_hash_index_t;\n+typedef unsigned int (*apr_hashfunc_t)(const char* key, size_t* klen);\n+typedef struct apr_hash_entry_t apr_hash_entry_t;\n+\n+struct apr_hash_entry_t\n+{\n+  apr_hash_entry_t* next;\n+  unsigned int hash;\n+  const void* key;\n+  size_t klen;\n+  const void* val;\n+};\n+\n+struct apr_hash_t\n+{\n+  apr_pool_t* pool;\n+  apr_hash_entry_t** array;\n+  /* [...snip.../ */\n+  unsigned int count, max, seed;\n+  apr_hashfunc_t hash_func;\n+  apr_hash_entry_t* free;\n+};\n+\n+static apr_hash_entry_t**\n+alloc_array(apr_hash_t* ht, unsigned int max)\n+{\n+  return memset(apr_palloc(ht->pool, sizeof(*ht->array) * (max + 1)),\n+                0,\n+                sizeof(*ht->array) * (max + 1));\n+}\n+\n+apr_hash_t*\n+apr_hash_merge(apr_pool_t* p,\n+               const apr_hash_t* overlay,\n+               const apr_hash_t* base)\n+{\n+  apr_hash_t* res;\n+  apr_hash_entry_t* new_vals = NULL;\n+  apr_hash_entry_t* iter;\n+  unsigned int i, j, k;\n+  res = apr_palloc(p, sizeof(apr_hash_t));\n+  res->pool = p;\n+  res->free = NULL;\n+  res->hash_func = base->hash_func;\n+  res->count = base->count;\n+  res->max = (overlay->max > base->max) ? overlay->max : base->max;\n+  if (base->count + overlay->count > res->max) {\n+    res->max = res->max * 2 + 1;\n+  }\n+  res->seed = base->seed;\n+  res->array = alloc_array(res, res->max);\n+  if (base->count + overlay->count) {\n+    new_vals =\n+      apr_palloc(p, sizeof(apr_hash_entry_t) * (base->count + overlay->count));\n+  }\n+  j = 0;\n+  for (k = 0; k <= base->max; k++) {\n+    for (iter = base->array[k]; iter; iter = iter->next) {\n+      i = iter->hash & res->max;\n+      /* We should only warn for the first of these\n+\t (it's actually a false positive, but we don't have the\n+\t invariante to know that).  */\n+      new_vals[j].klen = iter->klen;   /* { dg-warning \"dereference of NULL 'new_vals'\" } */\n+      /* ...but not for subsequent ones: */\n+      new_vals[j].key = iter->key;      /* { dg-bogus \"dereference of NULL 'new_vals'\" \"PR analyzer/108830\" } */\n+      new_vals[j].val = iter->val;      /* { dg-bogus \"dereference of NULL 'new_vals'\" \"PR analyzer/108830\" } */\n+      new_vals[j].hash = iter->hash;    /* { dg-bogus \"dereference of NULL 'new_vals'\" \"PR analyzer/108830\" } */\n+      new_vals[j].next = res->array[i]; /* { dg-bogus \"dereference of NULL 'new_vals'\" \"PR analyzer/108830\" } */\n+      res->array[i] = &new_vals[j];     /* { dg-bogus \"dereference of NULL 'new_vals'\" \"PR analyzer/108830\" } */\n+      j++;\n+    }\n+  }\n+  /* [...snip...] */\n+  return res;\n+}"}, {"sha": "156f0114fd52b3863ad0abf1ecce876aba55ab96", "filename": "gcc/testsuite/gcc.dg/analyzer/pipe-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpipe-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpipe-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpipe-1.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n+\n #include \"analyzer-decls.h\"\n \n extern int pipe(int pipefd[2]);"}, {"sha": "8b1822d97f990cc11da23a571bc22a9456592d98", "filename": "gcc/testsuite/gcc.dg/analyzer/pipe-void-return.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpipe-void-return.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpipe-void-return.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpipe-void-return.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n+\n extern void pipe(int pipefd[2]);\n extern int close(int fd);\n "}, {"sha": "aa0684e5c86c7024a3c6ba920a5ababba1b3006b", "filename": "gcc/testsuite/gcc.dg/analyzer/pipe2-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpipe2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpipe2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpipe2-1.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n+\n #include \"analyzer-decls.h\"\n \n extern int pipe2(int pipefd[2], int flags);"}, {"sha": "d1c3c915e0e48439f2e1320e9c6653b89c54692c", "filename": "gcc/testsuite/gcc.dg/analyzer/pr101547.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101547.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101547.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101547.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -2,10 +2,18 @@ char *\n fopen (const char *restrict, const char *restrict);\n \n void\n-k2 (void)\n+k2_uninit (void)\n {\n   char *setfiles[1];\n   int i; /* { dg-message \"region created on stack here\" } */\n \n   setfiles[i] = fopen (\"\", \"\"); /* { dg-warning \"use of uninitialized value 'i'\" } */\n+}\n+\n+void\n+k2_leak (int i)\n+{\n+  char *setfiles[1];\n+\n+  setfiles[i] = fopen (\"\", \"\");\n } /* { dg-warning \"leak of FILE\" } */"}, {"sha": "4bef2f161a48d19764b93337a659d6adb04d074e", "filename": "gcc/testsuite/gcc.dg/analyzer/pr101875.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101875.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101875.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101875.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -5,12 +5,22 @@ void\n err (void);\n \n void\n-k2 (void)\n+k2_uninit (void)\n {\n   char *setfiles[1];\n   int i; /* { dg-message \"region created on stack here\" } */\n \n   setfiles[i] = fopen(\"\", \"\"); /* { dg-warning \"use of uninitialized value 'i'\" } */\n-  if (!setfiles[i]) /* { dg-warning \"use of uninitialized value 'i'\" } */\n+  if (!setfiles[i])\n+    err ();\n+}\n+\n+void\n+k2_leak (int i)\n+{\n+  char *setfiles[1];\n+\n+  setfiles[i] = fopen(\"\", \"\");\n+  if (!setfiles[i])\n     err ();\n } /* { dg-warning \"leak of FILE\" } */"}, {"sha": "b90fe559f2c5064afc0e4abe4182666b0c39de5b", "filename": "gcc/testsuite/gcc.dg/analyzer/pr104224-split.c", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224-split.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -0,0 +1,136 @@\n+#include <stdio.h>\n+\n+struct test {\n+        int one;\n+        int two;\n+};\n+\n+void func2(const struct test *t)\n+{\n+        if (t->one == 0)\n+                printf(\"init func2\\n\");\n+\n+        if (t->two == 0)  /* { dg-warning \"uninitialized\" } */\n+                printf(\"uninit func2\\n\");\n+}\n+\n+void func1(struct test *t)\n+{\n+        t->one = 1;\n+        func2(t);\n+}\n+\n+int func3(int num)\n+{\n+        if (num)\n+                return num;\n+        else\n+                return 0;\n+}\n+\n+void func4(int *a, int max)\n+{\n+        int i;\n+        // skip the first\n+        for (i=1; i<max; i++)\n+                a[i] = 0;\n+}\n+\n+void func5(const int *a, int max)\n+{\n+        /* a[0] is uninitialized, but the rest of the array is initialized.  */\n+        int i;\n+        for (i=0; i<max; i++) {\n+                if (a[i]) /* { dg-warning \"uninitialized\" \"\" { xfail *-*-* } } */\n+                        printf(\"func5: %d\\n\", i);\n+        }\n+}\n+\n+int func6(const int *num)\n+{\n+        if (*num)  /* { dg-warning \"uninitialized\" } */\n+                return *num;\n+        else\n+                return 0;\n+}\n+\n+int j;\n+int func7(void)\n+{\n+        return j;  /* { dg-bogus \"uninitialized\" } */\n+}\n+\n+void func8(const int *a, int max)\n+{\n+        int i;\n+        for (i=0; i<max; i++) {\n+                if (a[i]) /* { dg-warning \"uninitialized\" } */\n+                        printf(\"func8: %d\\n\", i);\n+        }\n+}\n+\n+enum {RED, AMBER, GREEN, BLACK};\n+\n+int test_1 (void)\n+{\n+        struct test t;  /* { dg-message \"region created on stack here\" } */\n+\n+        func1(&t);\n+        return 0;\n+}\n+\n+int test_2 (void)\n+{\n+        int num;  /* { dg-message \"region created on stack here\" } */\n+\n+        func3(num);  /* { dg-warning \"use of uninitialized value 'num'\" } */\n+        return 0;\n+}\n+\n+int test_3 (void)\n+{\n+        int arry[10];\n+\n+        func4(arry, 10);\n+        func5(arry, 10);\n+\n+        return 0;\n+}\n+\n+int test_4 (void)\n+{\n+        int num;  /* { dg-message \"region created on stack here\" } */\n+\n+        func6(&num);\n+        return 0;\n+}\n+\n+int test_5 (void)\n+{\n+        int arry_2[10];  /* { dg-message \"region created on stack here\" } */\n+\n+        printf(\"func7: %d\\n\", func7());\n+        func8(arry_2, 10);\n+\n+        return 0;\n+}\n+\n+int test_6 (void)\n+{\n+        int go;  /* { dg-message \"region created on stack here\" } */\n+        int color = BLACK;\n+\n+        switch (color) {\n+        case RED:\n+        case AMBER:\n+                go = 0;\n+                break;\n+        case GREEN:\n+                go = 1;\n+                break;\n+        }\n+\n+        printf(\"go :%d\\n\", go); /* { dg-warning \"use of uninitialized value 'go'\" } */\n+\n+        return 0;\n+}"}, {"sha": "1ff5f9eae71017ab3cead256891ccf45e90bdd00", "filename": "gcc/testsuite/gcc.dg/analyzer/pr104224.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104224.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n+\n #include <stdio.h>\n \n struct test {"}, {"sha": "ab3e4b6628a3693dee76c6539851bbe34f35cf17", "filename": "gcc/testsuite/gcc.dg/analyzer/realloc-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-2.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n+\n #include \"analyzer-decls.h\"\n \n typedef __SIZE_TYPE__ size_t;"}, {"sha": "eec61497d5b4dbf6b979c0a276adcf2c42267a1c", "filename": "gcc/testsuite/gcc.dg/analyzer/realloc-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-3.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n+\n #include \"analyzer-decls.h\"\n \n typedef __SIZE_TYPE__ size_t;"}, {"sha": "137e05b87aa5a44ffa1b8a30a1f41dcf1ef3c9f1", "filename": "gcc/testsuite/gcc.dg/analyzer/realloc-5.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Frealloc-5.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n+\n #include \"analyzer-decls.h\"\n \n typedef __SIZE_TYPE__ size_t;"}, {"sha": "4422075e2b59ea8f7ef06a25d0e75ad62096f9dd", "filename": "gcc/testsuite/gcc.dg/analyzer/stdarg-1-ms_abi.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-1-ms_abi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-1-ms_abi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-1-ms_abi.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,5 +1,6 @@\n /* As per stdarg-1.c, but using the ms_abi versions of the builtins.  */\n \n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n /* { dg-do compile { target { x86_64-*-* && lp64 } } } */\n \n #include \"analyzer-decls.h\""}, {"sha": "ba90df205884e33909f29dc41caf71276983afe3", "filename": "gcc/testsuite/gcc.dg/analyzer/stdarg-1-sysv_abi.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-1-sysv_abi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-1-sysv_abi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-1-sysv_abi.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,5 +1,6 @@\n /* As per stdarg-1.c, but using the sysv_abi versions of the builtins.  */\n \n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n /* { dg-do compile { target { x86_64-*-* && lp64 } } } */\n \n #include \"analyzer-decls.h\""}, {"sha": "4d5431b822c4bed466a6392194456be63f1cd9ae", "filename": "gcc/testsuite/gcc.dg/analyzer/stdarg-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fstdarg-1.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n+\n #include \"analyzer-decls.h\"\n \n /* Unpacking a va_list.  */"}, {"sha": "0d78242381a6be39f4b4a061dd711ad4a7da022f", "filename": "gcc/testsuite/gcc.dg/analyzer/symbolic-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsymbolic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsymbolic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsymbolic-1.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n+\n #include \"analyzer-decls.h\"\n \n /* The example from store.h  */"}, {"sha": "c1464555e8ac4a52b6b1d49745e370a24d1afd2b", "filename": "gcc/testsuite/gcc.dg/analyzer/symbolic-7.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsymbolic-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsymbolic-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsymbolic-7.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -31,16 +31,20 @@ void test_2 (int i)\n   __analyzer_eval (arr[i] == 42); /* { dg-warning \"UNKNOWN\" } */\n }\n \n-void test_3 (int i)\n+void test_3_concrete_read (int i)\n {\n   /* An array that can't have been touched.  */\n   int arr[2];\n   \n   /* Concrete reads.  */\n-  __analyzer_eval (arr[0] == 42); /* { dg-warning \"UNKNOWN\" \"unknown\" } */\n-  /* { dg-warning \"use of uninitialized value 'arr\\\\\\[0\\\\\\]'\" \"uninit\" { target *-*-* } .-1 } */\n+  __analyzer_eval (arr[0] == 42); /* { dg-warning \"use of uninitialized value 'arr\\\\\\[0\\\\\\]'\" } */\n+}\n \n+void test_3_symbolic_read (int i)\n+{\n+  /* An array that can't have been touched.  */\n+  int arr[2];\n+  \n   /* Symbolic read.  */\n-  __analyzer_eval (arr[i] == 42); /* { dg-warning \"UNKNOWN\" \"unknown\" } */\n-  /* { dg-warning \"use of uninitialized value 'arr\\\\\\[i\\\\\\]'\" \"uninit\" { target *-*-* } .-1 } */\n+  __analyzer_eval (arr[i] == 42); /* { dg-warning \"use of uninitialized value 'arr\\\\\\[i\\\\\\]'\" } */\n }"}, {"sha": "31c6ae0c611b17c309ab68a3233c90d8a57c517d", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-4.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-4.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -22,18 +22,28 @@ alloc_foo (int a, int b)\n   return p;\n }\n \n-void test (int x, int y, int z)\n+void test_access_inited_fields (int x, int y, int z)\n {\n   struct foo *p = alloc_foo (x, z);\n   if (!p)\n     return;\n \n   __analyzer_eval (p->i == x); /* { dg-warning \"TRUE\" } */\n \n-  __analyzer_eval (p->j == y); /* { dg-warning \"UNKNOWN\" \"unknown\" } */\n-  /* { dg-warning \"use of uninitialized value '\\\\*p\\\\.j'\" \"uninit\" { target *-*-* } .-1 } */\n-\n   __analyzer_eval (p->k == z); /* { dg-warning \"TRUE\" } */\n   \n   free (p);\n }\n+\n+void test_stop_after_accessing_uninit (int x, int y, int z)\n+{\n+  struct foo *p = alloc_foo (x, z);\n+  if (!p)\n+    return;\n+\n+  __analyzer_eval (p->i == x); /* { dg-warning \"TRUE\" } */\n+\n+  __analyzer_eval (p->j == y); /* { dg-warning \"use of uninitialized value '\\\\*p\\\\.j'\" } */\n+\n+  __analyzer_dump_path (); /* { dg-bogus \"path\" } */\n+}"}, {"sha": "2fa10525cd03e731738654e44b42c90cd290a7c7", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-8.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-8.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -0,0 +1,73 @@\n+struct st\n+{\n+  int a, b, c, d, e;\n+};\n+\n+int\n+test_1 (int flag, struct st *p)\n+{\n+  struct st *q;\n+  int result = 0;\n+  if (flag)\n+    q = p;\n+  /* We should only warn about the first use of uninit for 'q':  */\n+  result += q->a; /* { dg-warning \"use of uninitialized value 'q'\" } */\n+  /* ...and not for these:  */\n+  result += q->b; /* { dg-bogus \"use of uninitialized value 'q'\" } */\n+  result += q->c; /* { dg-bogus \"use of uninitialized value 'q'\" } */\n+  result += q->d; /* { dg-bogus \"use of uninitialized value 'q'\" } */\n+  result += q->e; /* { dg-bogus \"use of uninitialized value 'q'\" } */\n+  return result;\n+}\n+\n+int\n+test_2 (int flag, struct st *p, struct st *r)\n+{\n+  struct st *q;\n+  int result = 0;\n+  if (flag)\n+    q = p;\n+  /* We should only warn about the first use of uninit for 'q':  */\n+  if (q == r) /* { dg-warning \"use of uninitialized value 'q'\" } */\n+    result += 1;\n+  /* ...and not for these, after a conditional:  */\n+  result += q->b; /* { dg-bogus \"use of uninitialized value 'q'\" } */\n+  result += q->c; /* { dg-bogus \"use of uninitialized value 'q'\" } */\n+  result += q->d; /* { dg-bogus \"use of uninitialized value 'q'\" } */\n+  result += q->e; /* { dg-bogus \"use of uninitialized value 'q'\" } */\n+  return result;\n+}\n+\n+int\n+test_3 (int flag, int val)\n+{\n+  int result = 0;\n+  int idx;\n+  if (flag)\n+    idx = val;\n+  switch (idx) /* { dg-warning \"use of uninitialized value 'idx'\" } */\n+    {\n+    case 0:\n+      result = 3;\n+      break;\n+    case 1:\n+      result = 4;\n+      break;\n+    default:\n+      result = 5;\n+      break;      \n+    }\n+  switch (idx) /* { dg-bogus \"use of uninitialized value 'idx'\" } */\n+    {\n+    case 0:\n+      result += 3;\n+      break;\n+    case 1:\n+      result += 4;\n+      break;\n+    default:\n+      result += 5;\n+      break;\n+    }\n+  return result;\n+}"}, {"sha": "cb91462c36ba944b3cfa4ac0419ec7165f584e6d", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-pr94713.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr94713.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr94713.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-pr94713.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,11 +1,19 @@\n void f1 (int *);\n void f2 (int);\n \n-int foo (void)\n+int test_1 (void)\n {\n   int *p; /* { dg-message \"region created on stack here\" } */\n \n   f1 (p); /* { dg-warning \"use of uninitialized value 'p'\" } */\n+  f1 (p); /* { dg-bogus \"use of uninitialized value 'p'\" \"no followup warnings\" } */\n+  return 0;\n+}\n+\n+int test_2 (void)\n+{\n+  int *p; /* { dg-message \"region created on stack here\" } */\n+\n   f2 (p[0]); /* { dg-warning \"use of uninitialized value 'p'\" } */\n   return 0;\n }"}, {"sha": "8c83de4863bc71bc09dd7a3fabe82cc001977aad", "filename": "gcc/testsuite/gcc.dg/analyzer/zlib-6a.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f6369157917a4371b5d66dfe82b84aded3b8268/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-6a.c?ref=8f6369157917a4371b5d66dfe82b84aded3b8268", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"-fno-analyzer-suppress-followups\" } */\n+\n typedef unsigned char Byte;\n typedef unsigned int uInt;\n typedef unsigned long uLong;"}]}