{"sha": "1fef1cdd2c5c72a79b7448ebd197f4efb2e0dd27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZlZjFjZGQyYzVjNzJhNzliNzQ0OGViZDE5N2Y0ZWZiMmUwZGQyNw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@redhat.com", "date": "2002-02-27T05:28:58Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2002-02-27T05:28:58Z"}, "message": "Add 20020226-1.c to test rotate patterns\n\nFrom-SVN: r50087", "tree": {"sha": "0c312853a784e37e2dae8d225b34f19ce86b204e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c312853a784e37e2dae8d225b34f19ce86b204e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fef1cdd2c5c72a79b7448ebd197f4efb2e0dd27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fef1cdd2c5c72a79b7448ebd197f4efb2e0dd27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fef1cdd2c5c72a79b7448ebd197f4efb2e0dd27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fef1cdd2c5c72a79b7448ebd197f4efb2e0dd27/comments", "author": null, "committer": null, "parents": [{"sha": "7d2c4fe1e10c0a5d3d28cbeba45bb02711e61159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d2c4fe1e10c0a5d3d28cbeba45bb02711e61159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d2c4fe1e10c0a5d3d28cbeba45bb02711e61159"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "b45bd6d7f49b97a5c74d69d275dac91440f7bd7d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fef1cdd2c5c72a79b7448ebd197f4efb2e0dd27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fef1cdd2c5c72a79b7448ebd197f4efb2e0dd27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fef1cdd2c5c72a79b7448ebd197f4efb2e0dd27", "patch": "@@ -1,3 +1,7 @@\n+2002-02-27  Michael Meissner  <meissner@redhat.com>\n+\n+\t* gcc.c-torture/execute/20020226-1.c: New test.\n+\n 2002-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/debug/debug4.C: New test."}, {"sha": "6372ffc27c4497fe1a5d134e4ad4b2ccd16c717a", "filename": "gcc/testsuite/gcc.c-torture/execute/20020226-1.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fef1cdd2c5c72a79b7448ebd197f4efb2e0dd27/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020226-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fef1cdd2c5c72a79b7448ebd197f4efb2e0dd27/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020226-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020226-1.c?ref=1fef1cdd2c5c72a79b7448ebd197f4efb2e0dd27", "patch": "@@ -0,0 +1,104 @@\n+/* This tests the rotate patterns that some machines support.  */\n+\n+#include <limits.h>\n+\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n+#endif\n+\n+#define ROR(a,b) (((a) >> (b)) | ((a) << ((sizeof (a) * CHAR_BIT) - (b))))\n+#define ROL(a,b) (((a) << (b)) | ((a) >> ((sizeof (a) * CHAR_BIT) - (b))))\n+\n+#define CHAR_VALUE ((unsigned char)0x1234U)\n+#define SHORT_VALUE ((unsigned short)0x1234U)\n+#define INT_VALUE 0x1234U\n+#define LONG_VALUE 0x12345678LU\n+#define LL_VALUE 0x12345678abcdef0LLU\n+\n+#define SHIFT1 4\n+#define SHIFT2 ((sizeof (long long) * CHAR_BIT) - SHIFT1)\n+\n+unsigned char uc = CHAR_VALUE;\n+unsigned short us = SHORT_VALUE;\n+unsigned int ui = INT_VALUE;\n+unsigned long ul = LONG_VALUE;\n+unsigned long long ull = LL_VALUE;\n+int shift1 = SHIFT1;\n+int shift2 = SHIFT2;\n+\n+main ()\n+{\n+  if (ROR (uc, shift1) != ROR (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (uc, SHIFT1) != ROR (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (us, shift1) != ROR (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (us, SHIFT1) != ROR (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ui, shift1) != ROR (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ui, SHIFT1) != ROR (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ul, shift1) != ROR (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ul, SHIFT1) != ROR (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ull, shift1) != ROR (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ull, SHIFT1) != ROR (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROR (ull, shift2) != ROR (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROR (ull, SHIFT2) != ROR (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROL (uc, shift1) != ROL (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (uc, SHIFT1) != ROL (CHAR_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (us, shift1) != ROL (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (us, SHIFT1) != ROL (SHORT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ui, shift1) != ROL (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ui, SHIFT1) != ROL (INT_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ul, shift1) != ROL (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ul, SHIFT1) != ROL (LONG_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ull, shift1) != ROL (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ull, SHIFT1) != ROL (LL_VALUE, SHIFT1))\n+    abort ();\n+\n+  if (ROL (ull, shift2) != ROL (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  if (ROL (ull, SHIFT2) != ROL (LL_VALUE, SHIFT2))\n+    abort ();\n+\n+  exit (0);\n+}"}]}