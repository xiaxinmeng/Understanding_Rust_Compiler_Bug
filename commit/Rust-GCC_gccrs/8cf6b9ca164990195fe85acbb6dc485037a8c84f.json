{"sha": "8cf6b9ca164990195fe85acbb6dc485037a8c84f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNmNmI5Y2ExNjQ5OTAxOTVmZTg1YWNiYjZkYzQ4NTAzN2E4Yzg0Zg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-16T09:45:34Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-16T09:45:34Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r499", "tree": {"sha": "14065adae6ed274b7406070e64f15bc2fa11e794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14065adae6ed274b7406070e64f15bc2fa11e794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cf6b9ca164990195fe85acbb6dc485037a8c84f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf6b9ca164990195fe85acbb6dc485037a8c84f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cf6b9ca164990195fe85acbb6dc485037a8c84f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cf6b9ca164990195fe85acbb6dc485037a8c84f/comments", "author": null, "committer": null, "parents": [{"sha": "62452fd9ac1492aa44638c8e4407602c0b54fb8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62452fd9ac1492aa44638c8e4407602c0b54fb8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62452fd9ac1492aa44638c8e4407602c0b54fb8f"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "7021833aafe1d0cb9ff6524415f356fbbc822524", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=8cf6b9ca164990195fe85acbb6dc485037a8c84f", "patch": "@@ -1276,15 +1276,15 @@ extern char *a29k_function_name;\n \n /* Output before instructions.  */\n \n-#define TEXT_SECTION_ASM_OP \"\\t.text\"\n+#define TEXT_SECTION_ASM_OP \".text\"\n \n /* Output before read-only data.  */\n \n-#define READONLY_DATA_SECTION_ASM_OP \"\\t.use .lit\"\n+#define READONLY_DATA_SECTION_ASM_OP \".use .lit\"\n \n /* Output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \"\\t.data\"\n+#define DATA_SECTION_ASM_OP \".data\"\n \n /* Define an extra section for read-only data, a routine to enter it, and\n    indicate that it is for read-only data.  */"}, {"sha": "d54aef8560b1c5742bdcdb551cdccfef0a56c71c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=8cf6b9ca164990195fe85acbb6dc485037a8c84f", "patch": "@@ -974,8 +974,8 @@ do \\\n #define ASM_APP_OFF  \"\"\n \n /* Switch to the text or data segment.  */\n-#define TEXT_SECTION_ASM_OP  \"\\n\\t.text\\n\"\n-#define DATA_SECTION_ASM_OP  \"\\n\\t.data\\n\"\n+#define TEXT_SECTION_ASM_OP  \".text\"\n+#define DATA_SECTION_ASM_OP  \".data\"\n \n /* The assembler's names for the registers.  RFP need not always be used as\n    the Real framepointer; it can also be used as a normal general register."}, {"sha": "80839f33c62abbdd3a57a5cb9e00d6b21cd36eea", "filename": "gcc/config/fx80/fx80.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Ffx80%2Ffx80.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Ffx80%2Ffx80.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffx80%2Ffx80.h?ref=8cf6b9ca164990195fe85acbb6dc485037a8c84f", "patch": "@@ -1026,11 +1026,11 @@ extern enum reg_class regno_reg_class[];\n \n /* Output before read-only data.  */\n \n-#define TEXT_SECTION_ASM_OP \"\\t.text\"\n+#define TEXT_SECTION_ASM_OP \".text\"\n \n /* Output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \"\\t.data\"\n+#define DATA_SECTION_ASM_OP \".data\"\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */"}, {"sha": "24c4f50ab5812a8a39a8c6042563086a9034397f", "filename": "gcc/config/gmicro/gmicro.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Fgmicro%2Fgmicro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgmicro%2Fgmicro.h?ref=8cf6b9ca164990195fe85acbb6dc485037a8c84f", "patch": "@@ -1269,15 +1269,15 @@ extern enum reg_class regno_reg_class[];\n \n /* Output before read-only data.  */\n \n-#define TEXT_SECTION_ASM_OP \"\\t.section text,code,align=4\"\n+#define TEXT_SECTION_ASM_OP \".section text,code,align=4\"\n \n /* Output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \"\\t.section data,data,align=4\"\n+#define DATA_SECTION_ASM_OP \".section data,data,align=4\"\n \n /* Output before uninitialized data. */\n \n-#define BSS_SECTION_ASM_OP \"\\t.section bss,data,align=4\"\n+#define BSS_SECTION_ASM_OP \".section bss,data,align=4\"\n \n #define EXTRA_SECTIONS in_bss\n "}, {"sha": "e0880a6b924c55ad8663bc9e884b9866b17220cd", "filename": "gcc/config/i860/sysv3.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Fi860%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Fi860%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv3.h?ref=8cf6b9ca164990195fe85acbb6dc485037a8c84f", "patch": "@@ -125,14 +125,14 @@ extern char *current_function_original_name;\n \n \n #undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"x\\\"\\n\"\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"x\\\"\\n\"\n #undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"x\\\"\\n\"\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"x\\\"\\n\"\n \n /* Add definitions to support the .tdesc section as specified in the svr4\n    ABI for the i860.  */\n \n-#define TDESC_SECTION_ASM_OP    \"\\t.section\\t.tdesc\"\n+#define TDESC_SECTION_ASM_OP    \".section\\t.tdesc\"\n \n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_tdesc"}, {"sha": "bfed5f73e2a08a64dd9d7e8e4061dc1106d4c4d0", "filename": "gcc/config/i860/sysv4.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Fi860%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Fi860%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv4.h?ref=8cf6b9ca164990195fe85acbb6dc485037a8c84f", "patch": "@@ -100,14 +100,14 @@ extern char *current_function_original_name;\n   } while (0)\n \n #undef CTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"a\\\",\\\"progbits\\\"\\n\"\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"a\\\",\\\"progbits\\\"\"\n #undef DTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"a\\\",\\\"progbits\\\"\\n\"\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"a\\\",\\\"progbits\\\"\"\n \n /* Add definitions to support the .tdesc section as specified in the svr4\n    ABI for the i860.  */\n \n-#define TDESC_SECTION_ASM_OP    \"\\t.section\\t.tdesc\"\n+#define TDESC_SECTION_ASM_OP    \".section\\t.tdesc\"\n \n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_tdesc"}, {"sha": "4ca91af1ff4f8870258254185741a9a465d9708c", "filename": "gcc/config/m68k/sgs.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Fm68k%2Fsgs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cf6b9ca164990195fe85acbb6dc485037a8c84f/gcc%2Fconfig%2Fm68k%2Fsgs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsgs.h?ref=8cf6b9ca164990195fe85acbb6dc485037a8c84f", "patch": "@@ -33,17 +33,17 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* SGS specific assembler pseudo ops. */\n \n-#define\tBYTE_ASM_OP\t\t\"\\t.byte\"\n-#define WORD_ASM_OP\t\t\"\\t.short\"\n-#define LONG_ASM_OP\t\t\"\\t.long\"\n-#define SPACE_ASM_OP\t\t\"\\t.space\"\n-#define ALIGN_ASM_OP\t\t\"\\t.align\"\n-#define GLOBAL_ASM_OP\t\t\"\\t.global\"\n-#define SWBEG_ASM_OP\t\t\"\\t.swbeg\"\n-#define SET_ASM_OP\t\t\"\\t.set\"\n-\n-#define UNALIGNED_SHORT_ASM_OP\t\"\\t.short\"\t/* Used in dwarfout.c */\n-#define UNALIGNED_INT_ASM_OP\t\"\\t.long\"\t/* Used in dwarfout.c */\n+#define\tBYTE_ASM_OP\t\t\".byte\"\n+#define WORD_ASM_OP\t\t\".short\"\n+#define LONG_ASM_OP\t\t\".long\"\n+#define SPACE_ASM_OP\t\t\".space\"\n+#define ALIGN_ASM_OP\t\t\".align\"\n+#define GLOBAL_ASM_OP\t\t\".global\"\n+#define SWBEG_ASM_OP\t\t\".swbeg\"\n+#define SET_ASM_OP\t\t\".set\"\n+\n+#define UNALIGNED_SHORT_ASM_OP\t\".short\"\t/* Used in dwarfout.c */\n+#define UNALIGNED_INT_ASM_OP\t\".long\"\t\t/* Used in dwarfout.c */\n \n #define ASM_PN_FORMAT\t\t\"%s_%d\"\t\t/* Format for private names */\n \n@@ -114,7 +114,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #undef ASM_OUTPUT_SHORT\n #define ASM_OUTPUT_SHORT(FILE,VALUE)\t\t\t\\\n-( fprintf ((FILE), \"%s \", WORD_ASM_OP),\t\t\t\\\n+( fprintf ((FILE), \"\\t%s \", WORD_ASM_OP),\t\t\\\n   output_addr_const ((FILE), (VALUE)),\t\t\t\\\n   fprintf ((FILE), \"\\n\"))\n \n@@ -124,7 +124,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\\n do { union { double d; long l[2]; } tem;\t\t\\\n      tem.d = (VALUE);\t\t\t\t\t\\\n-     fprintf((FILE), \"%s 0x%x,0x%x\\n\", LONG_ASM_OP,\t\\\n+     fprintf((FILE), \"\\t%s 0x%x,0x%x\\n\", LONG_ASM_OP,\t\\\n \t     tem.l[0], tem.l[1]);\t\t\t\\\n    } while (0)\n \n@@ -134,7 +134,7 @@ do { union { double d; long l[2]; } tem;\t\t\\\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n do { union { float f; long l;} tem;\t\t\t\\\n      tem.f = (VALUE);\t\t\t\t\t\\\n-     fprintf ((FILE), \"%s 0x%x\\n\", LONG_ASM_OP, tem.l); \\\n+     fprintf ((FILE), \"\\t%s 0x%x\\n\", LONG_ASM_OP, tem.l); \\\n    } while (0)\n \n /* This is how to output an assembler line that says to advance the\n@@ -143,7 +143,7 @@ do { union { float f; long l;} tem;\t\t\t\\\n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\t\t\t\\\n   if ((LOG) > 0)\t\t\t\t\t\t\\\n-    fprintf ((FILE), \"%s \\t%u\\n\", ALIGN_ASM_OP, 1 << (LOG));\t\\\n+    fprintf ((FILE), \"\\t%s \\t%u\\n\", ALIGN_ASM_OP, 1 << (LOG));\t\\\n   else if ((LOG) > 31)\t\t\t\t\t\t\\\n     abort ();\n \n@@ -157,7 +157,7 @@ do { union { float f; long l;} tem;\t\t\t\\\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   register int sp = 0, lp = 0, ch;\t\t\t\t\\\n-  fprintf ((FILE), \"%s \", BYTE_ASM_OP);\t\t\t\t\\\n+  fprintf ((FILE), \"\\t%s \", BYTE_ASM_OP);\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     ch = (PTR)[sp];\t\t\t\t\t\t\\\n     if (ch > ' ' && ! (ch & 0x80) && ch != '\\\\')\t\t\\\n@@ -172,7 +172,7 @@ do { union { float f; long l;} tem;\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\\n \tif ((sp % 10) == 0)\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\\n-\t    fprintf ((FILE), \"\\n%s \", BYTE_ASM_OP);\t\t\\\n+\t    fprintf ((FILE), \"\\n\\t%s \", BYTE_ASM_OP);\t\t\\\n \t  }\t\t\t\t\t\t\t\\\n \telse\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\\\n@@ -205,7 +205,7 @@ do { union { float f; long l;} tem;\t\t\t\\\n #undef ASM_GLOBALIZE_LABEL\n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"%s \", GLOBAL_ASM_OP);\t\t\t\\\n+\tfprintf ((FILE), \"\\t%s \", GLOBAL_ASM_OP);\t\t\\\n \tassemble_name ((FILE), NAME);\t\t\t\t\\\n \tfputs (\"\\n\", FILE);\t\t\t\t\t\\\n     } while (0)\n@@ -226,7 +226,7 @@ do { union { float f; long l;} tem;\t\t\t\\\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"%s %u\\n\", SPACE_ASM_OP, (SIZE))\n+  fprintf (FILE, \"\\t%s %u\\n\", SPACE_ASM_OP, (SIZE))\n \f\n /* Translate Motorola opcodes such as `jbeq' into SGS opcodes such\n    as `beq.w'.\n@@ -387,7 +387,7 @@ do { union { float f; long l;} tem;\t\t\t\\\n    example, can identify that it is the start of a switch table. */\n \n #define ASM_OUTPUT_CASE_LABEL(FILE,PREFIX,NUM,TABLE)\t\t\t\\\n-    fprintf ((FILE), \"%s &%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1)); \\\n+    fprintf ((FILE), \"\\t%s &%d\\n\", SWBEG_ASM_OP, XVECLEN (PATTERN (TABLE), 1)); \\\n     ASM_OUTPUT_INTERNAL_LABEL((FILE),(PREFIX),(NUM));\n \n /* At end of a switch table, define LDnnn iff the symbol LInnn was defined.\n@@ -401,14 +401,14 @@ do { union { float f; long l;} tem;\t\t\t\\\n #undef ASM_OUTPUT_CASE_END\n #define ASM_OUTPUT_CASE_END(FILE,NUM,TABLE)\t\t\\\n   if (RTX_INTEGRATED_P (TABLE))\t\t\t\t\\\n-    asm_fprintf (FILE, \"%s %LLD%d,%LL%d-%LLI%d-2.b\\n\",\t\\\n+    asm_fprintf (FILE, \"\\t%s %LLD%d,%LL%d-%LLI%d-2.b\\n\",\\\n \t\t SET_ASM_OP, (NUM), (NUM), (NUM))\n \n /* This is how to output an element of a case-vector that is relative.  */\n \n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, VALUE, REL)\t\\\n-  asm_fprintf (FILE, \"%s %LL%d-%LL%d\\n\", WORD_ASM_OP, VALUE, REL)\n+  asm_fprintf (FILE, \"\\t%s %LL%d-%LL%d\\n\", WORD_ASM_OP, VALUE, REL)\n \n /* Currently, JUMP_TABLES_IN_TEXT_SECTION must be defined in order to\n    keep switch tables in the text section. */"}]}