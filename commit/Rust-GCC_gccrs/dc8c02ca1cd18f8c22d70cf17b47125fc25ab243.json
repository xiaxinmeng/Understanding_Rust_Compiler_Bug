{"sha": "dc8c02ca1cd18f8c22d70cf17b47125fc25ab243", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM4YzAyY2ExY2QxOGY4YzIyZDcwY2YxN2I0NzEyNWZjMjVhYjI0Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-31T08:45:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-31T09:54:41Z"}, "message": "expr: Fix fallout from optimize store_expr from STRING_CST [PR95052]\n\n> Can't hurt, and debugging the assert tripping is likely a hell of a lot easier\n> than debugging the resultant incorrect code.   So if it passes, then I'd say go\n> for it.\n\nTesting passed, so I've committed it with those asserts (and thankfully I've\nadded them!) but it apparently broke Linux kernel build on arm.\n\nThe problem is that if the STRING_CST is very short, while the full object\nhas BLKmode, the short string could very well have\nQImode/HImode/SImode/DImode and in that case it wouldn't take the path that\ncopies the string and then clears the remaining space, but different paths\nin which it will ICE because of those asserts and without those it would\njust emit wrong-code.\n\nThe following patch fixes it by enforcing BLKmode for the string MEM, even\nif it is short, so that we copy it and memset the rest.\n\n2020-05-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/95052\n\t* expr.c (store_expr): For shortedned_string_cst, ensure temp has\n\tBLKmode.\n\n\t* gcc.dg/pr95052.c: New test.", "tree": {"sha": "53a4960615f6d04732d367f6115da1419cffc2de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53a4960615f6d04732d367f6115da1419cffc2de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc8c02ca1cd18f8c22d70cf17b47125fc25ab243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc8c02ca1cd18f8c22d70cf17b47125fc25ab243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc8c02ca1cd18f8c22d70cf17b47125fc25ab243", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc8c02ca1cd18f8c22d70cf17b47125fc25ab243/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dda86084439af4f5315a5c3aaee732a610e3551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dda86084439af4f5315a5c3aaee732a610e3551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dda86084439af4f5315a5c3aaee732a610e3551"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "6b75028e7f1d5d5a5e67bc141fce985b081ecf88", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8c02ca1cd18f8c22d70cf17b47125fc25ab243/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8c02ca1cd18f8c22d70cf17b47125fc25ab243/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=dc8c02ca1cd18f8c22d70cf17b47125fc25ab243", "patch": "@@ -5779,6 +5779,11 @@ store_expr (tree exp, rtx target, int call_param_p,\n \t\t\t       (call_param_p\n \t\t\t\t? EXPAND_STACK_PARM : EXPAND_NORMAL),\n \t\t\t       &alt_rtl, false);\n+      if (shortened_string_cst)\n+\t{\n+\t  gcc_assert (MEM_P (temp));\n+\t  temp = change_address (temp, BLKmode, NULL_RTX);\n+\t}\n     }\n \n   /* If TEMP is a VOIDmode constant and the mode of the type of EXP is not"}, {"sha": "2ed1a037bce187cde2b5b1ce1496188df4bf8cec", "filename": "gcc/testsuite/gcc.dg/pr95052.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8c02ca1cd18f8c22d70cf17b47125fc25ab243/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95052.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8c02ca1cd18f8c22d70cf17b47125fc25ab243/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95052.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95052.c?ref=dc8c02ca1cd18f8c22d70cf17b47125fc25ab243", "patch": "@@ -0,0 +1,12 @@\n+/* PR middle-end/95052 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fconserve-stack\" } */\n+\n+void bar (char *);\n+\n+void\n+foo (void)\n+{\n+  char buf[70] = \"\";\n+  bar (buf);\n+}"}]}