{"sha": "bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3OWNlZGIxMTcwZjdjNTdhNWQ5NDVjOTE2ZGZjZmMxMDliZDIyZQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-06-02T18:54:32Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-06-02T18:54:32Z"}, "message": "In gcc/objc/: 2011-06-02 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2011-06-02  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/48539\n\t* objc-act.c (objc_finish_message_expr): Warn if messaging a class\n\tthat was only declared using @class without an @interface.  Warn\n\tif messaging an instance of a class that was only declared using\n\t@class without an @interface, unless the receiver was also typed\n\twith a protocol list.\n\nIn gcc/testsuite/:\n2011-06-02  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/48539\n\t* objc.dg/method-5.m: Updated.\t\n\t* objc.dg/method-19.m: Updated.\n\t* objc.dg/method-lookup-1.m: New.\t\n\t* obj-c++.dg/method-6.mm: Updated.\n\t* obj-c++.dg/method-7.mm: Updated.\n\t* obj-c++.dg/method-lookup-1.mm: New.\n\nFrom-SVN: r174575", "tree": {"sha": "c5eb3b5146458a81edad3cd5ef6d4467cb3fd01c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5eb3b5146458a81edad3cd5ef6d4467cb3fd01c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae9982ec2c4dcec5d443120104a932f4e072f19a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9982ec2c4dcec5d443120104a932f4e072f19a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae9982ec2c4dcec5d443120104a932f4e072f19a"}], "stats": {"total": 388, "additions": 345, "deletions": 43}, "files": [{"sha": "50c80b5c7cb91cba7cf0a0cd4908db976c1a63f4", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "patch": "@@ -1,3 +1,12 @@\n+2011-06-02  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/48539\n+\t* objc-act.c (objc_finish_message_expr): Warn if messaging a class\n+\tthat was only declared using @class without an @interface.  Warn\n+\tif messaging an instance of a class that was only declared using\n+\t@class without an @interface, unless the receiver was also typed\n+\twith a protocol list.\n+\n 2011-06-01  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (objc_decl_method_attributes): Implement nonnull"}, {"sha": "e7acb7f05b1034635664b8de710fc9eb1dbe617d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 121, "deletions": 29, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "patch": "@@ -5432,15 +5432,21 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n      from the implementation context).  */\n   rtype = receiver;\n   while (TREE_CODE (rtype) == COMPOUND_EXPR\n-\t      || TREE_CODE (rtype) == MODIFY_EXPR\n-\t      || CONVERT_EXPR_P (rtype)\n-\t      || TREE_CODE (rtype) == COMPONENT_REF)\n+\t || TREE_CODE (rtype) == MODIFY_EXPR\n+\t || CONVERT_EXPR_P (rtype)\n+\t || TREE_CODE (rtype) == COMPONENT_REF)\n     rtype = TREE_OPERAND (rtype, 0);\n \n+  /* self is 1 if this is a message to self, 0 otherwise  */\n   self = (rtype == self_decl);\n+\n+  /* super is 1 if this is a message to super, 0 otherwise.  */\n   super = (rtype == UOBJC_SUPER_decl);\n+\n+  /* rtype is the type of the receiver.  */\n   rtype = TREE_TYPE (receiver);\n \n+  /* have_cast is 1 if the receiver is casted.  */\n   have_cast = (TREE_CODE (receiver) == NOP_EXPR\n \t       || (TREE_CODE (receiver) == COMPOUND_EXPR\n \t\t   && !IS_SUPER (rtype)));\n@@ -5450,15 +5456,38 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n     should_call_super_dealloc = 0;\n \n   /* If the receiver is a class object, retrieve the corresponding\n-     @interface, if one exists. */\n+     @interface, if one exists.  class_tree is the class name\n+     identifier, or NULL_TREE if this is not a class method or the\n+     class name could not be determined (as in the case \"Class c; [c\n+     method];\").  */\n   class_tree = receiver_is_class_object (receiver, self, super);\n \n   /* Now determine the receiver type (if an explicit cast has not been\n      provided).  */\n   if (!have_cast)\n     {\n       if (class_tree)\n-\trtype = lookup_interface (class_tree);\n+\t{\n+\t  /* We are here when we have no cast, and we have a class\n+\t     name.  So, this is a plain method to a class object, as\n+\t     in [NSObject alloc].  Find the interface corresponding to\n+\t     the class name.  */\n+\t  rtype = lookup_interface (class_tree);\n+\n+\t  if (rtype == NULL_TREE)\n+\t    {\n+\t      /* If 'rtype' is NULL_TREE at this point it means that\n+\t\t we have seen no @interface corresponding to that\n+\t\t class name, only a @class declaration.  So, we have a\n+\t\t class name (class_tree) but no actual details of the\n+\t\t class methods.  We won't be able to check that the\n+\t\t class responds to the method, and we will have to\n+\t\t guess the method prototype.  Emit a warning, then\n+\t\t keep going (this will use any method with a matching\n+\t\t name, as if the receiver was of type 'Class').  */\n+\t      warning (0, \"@interface of class %qE not found\", class_tree);\n+\t    }\n+\t}\n       /* Handle `self' and `super'.  */\n       else if (super)\n \t{\n@@ -5474,28 +5503,41 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n \trtype = lookup_interface (CLASS_NAME (implementation_template));\n     }\n \n-  /* If receiver is of type `id' or `Class' (or if the @interface for a\n-     class is not visible), we shall be satisfied with the existence of\n-     any instance or class method. */\n   if (objc_is_id (rtype))\n     {\n+      /* The receiver is of type 'id' or 'Class' (with or without some\n+\t protocols attached to it).  */\n+\n+      /* We set class_tree to the identifier for 'Class' if this is a\n+\t class method, and to NULL_TREE if not.  */\n       class_tree = (IS_CLASS (rtype) ? objc_class_name : NULL_TREE);\n+      \n+      /* 'rprotos' is the list of protocols that the receiver\n+\t supports.  */\n       rprotos = (TYPE_HAS_OBJC_INFO (TREE_TYPE (rtype))\n \t\t ? TYPE_OBJC_PROTOCOL_LIST (TREE_TYPE (rtype))\n \t\t : NULL_TREE);\n+\n+      /* We have no information on the type, and we set it to\n+\t NULL_TREE.  */\n       rtype = NULL_TREE;\n \n+      /* If there are any protocols, check that the method we are\n+\t calling appears in the protocol list.  If there are no\n+\t protocols, this is a message to 'id' or 'Class' and we accept\n+\t any method that exists.  */\n       if (rprotos)\n \t{\n-\t  /* If messaging 'id <Protos>' or 'Class <Proto>', first search\n-\t     in protocols themselves for the method prototype.  */\n+\t  /* If messaging 'id <Protos>' or 'Class <Proto>', first\n+\t     search in protocols themselves for the method\n+\t     prototype.  */\n \t  method_prototype\n \t    = lookup_method_in_protocol_list (rprotos, sel_name,\n \t\t\t\t\t      class_tree != NULL_TREE);\n \n-\t  /* If messaging 'Class <Proto>' but did not find a class method\n-\t     prototype, search for an instance method instead, and warn\n-\t     about having done so.  */\n+\t  /* If messaging 'Class <Proto>' but did not find a class\n+\t     method prototype, search for an instance method instead,\n+\t     and warn about having done so.  */\n \t  if (!method_prototype && !rtype && class_tree != NULL_TREE)\n \t    {\n \t      method_prototype\n@@ -5509,6 +5551,8 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n     }\n   else if (rtype)\n     {\n+      /* We have a receiver type which is more specific than 'id' or\n+\t 'Class'.  */\n       tree orig_rtype = rtype;\n \n       if (TREE_CODE (rtype) == POINTER_TYPE)\n@@ -5523,25 +5567,70 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n \t  rprotos = TYPE_OBJC_PROTOCOL_LIST (rtype);\n \t  rtype = TYPE_OBJC_INTERFACE (rtype);\n \t}\n-      /* If we could not find an @interface declaration, we must have\n-\t only seen a @class declaration; so, we cannot say anything\n-\t more intelligent about which methods the receiver will\n-\t understand. */\n       if (!rtype || TREE_CODE (rtype) == IDENTIFIER_NODE)\n \t{\n+\t  /* If we could not find an @interface declaration, we must\n+\t     have only seen a @class declaration; so, we cannot say\n+\t     anything more intelligent about which methods the\n+\t     receiver will understand.  Note that this only happens\n+\t     for instance methods; for class methods to a class where\n+\t     we have only seen a @class declaration,\n+\t     lookup_interface() above would have set rtype to\n+\t     NULL_TREE.  */\n+\t  if (rprotos)\n+\t    {\n+\t      /* We could not find an @interface declaration, yet, if\n+\t\t there are protocols attached to the type, we can\n+\t\t still look up the method in the protocols.  Ie, we\n+\t\t are in the following case:\n+\t     \n+\t\t @class MyClass;\n+\t\t MyClass<MyProtocol> *x;\n+\t\t [x method];\n+\t\t \n+\t\t If 'MyProtocol' has the method 'method', we can check\n+\t\t and retrieve the method prototype.  */\n+\t      method_prototype\n+\t\t= lookup_method_in_protocol_list (rprotos, sel_name, 0);\n+\n+\t      /* At this point, if we have found the method_prototype,\n+\t\t we are quite happy.  The details of the class are\n+\t\t irrelevant.  If we haven't found it, a warning will\n+\t\t have been produced that the method could not be found\n+\t\t in the protocol, and we won't produce further\n+\t\t warnings (please note that this means that \"@class\n+\t\t MyClass; MyClass <MyProtocol> *x;\" is exactly\n+\t\t equivalent to \"id <MyProtocol> x\", which isn't too\n+\t\t satisfactory but it's not easy to see how to do\n+\t\t better).  */\n+\t    }\n+\t  else\n+\t    {\n+\t      if (rtype)\n+\t\t{\n+\t\t  /* We could not find an @interface declaration, and\n+\t\t     there are no protocols attached to the receiver,\n+\t\t     so we can't complete the check that the receiver\n+\t\t     responds to the method, and we can't retrieve the\n+\t\t     method prototype.  But, because the receiver has\n+\t\t     a well-specified class, the programmer did want\n+\t\t     this check to be performed.  Emit a warning, then\n+\t\t     keep going as if it was an 'id'.  To remove the\n+\t\t     warning, either include an @interface for the\n+\t\t     class, or cast the receiver to 'id'.  Note that\n+\t\t     rtype is an IDENTIFIER_NODE at this point.  */\n+\t\t  warning (0, \"@interface of class %qE not found\", rtype);\n+\t\t}\n+\t    }\n+\n \t  rtype = NULL_TREE;\n-\t  /* We could not find an @interface declaration, yet Message maybe in a\n-\t     @class's protocol. */\n-\t  if (!method_prototype && rprotos)\n-\t    method_prototype\n-\t      = lookup_method_in_protocol_list (rprotos, sel_name, 0);\n \t}\n       else if (TREE_CODE (rtype) == CLASS_INTERFACE_TYPE\n \t  || TREE_CODE (rtype) == CLASS_IMPLEMENTATION_TYPE)\n \t{\n-\t  /* We have a valid ObjC class name.  Look up the method name\n-\t     in the published @interface for the class (and its\n-\t     superclasses). */\n+\t  /* We have a valid ObjC class name with an associated\n+\t     @interface.  Look up the method name in the published\n+\t     @interface for the class (and its superclasses).  */\n \t  method_prototype\n \t    = lookup_method_static (rtype, sel_name, class_tree != NULL_TREE);\n \n@@ -5566,18 +5655,21 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n \t}\n       else\n \t{\n+\t  /* We have a type, but it's not an Objective-C type (!).  */\n \t  warning (0, \"invalid receiver type %qs\",\n \t\t   identifier_to_locale (gen_type_name (orig_rtype)));\n \t  /* After issuing the \"invalid receiver\" warning, perform method\n \t     lookup as if we were messaging 'id'.  */\n \t  rtype = rprotos = NULL_TREE;\n \t}\n     }\n+  /* Note that rtype could also be NULL_TREE.  This happens if we are\n+     messaging a class by name, but the class was only\n+     forward-declared using @class.  */\n \n-\n-  /* For 'id' or 'Class' receivers, search in the global hash table\n-     as a last resort.  For all receivers, warn if protocol searches\n-     have failed.  */\n+  /* For 'id' or 'Class' receivers, search in the global hash table as\n+     a last resort.  For all receivers, warn if protocol searches have\n+     failed.  */\n   if (!method_prototype)\n     {\n       if (rprotos)"}, {"sha": "c6c4b068366cecdf4ac8d7a8c8448f8824ac8d59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "patch": "@@ -1,3 +1,13 @@\n+2011-06-02  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/48539\n+\t* objc.dg/method-5.m: Updated.\t\n+\t* objc.dg/method-19.m: Updated.\n+\t* objc.dg/method-lookup-1.m: New.\t\n+\t* obj-c++.dg/method-6.mm: Updated.\n+\t* obj-c++.dg/method-7.mm: Updated.\n+\t* obj-c++.dg/method-lookup-1.mm: New.\t\n+\n 2011-06-02  DJ Delorie  <dj@redhat.com>\n \n \t* lib/timeout.exp (timeout): Add board_info support."}, {"sha": "0e099227cd102c20084bdc48bb3f903a86dc5aa8", "filename": "gcc/testsuite/obj-c++.dg/method-6.mm", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-6.mm?ref=bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "patch": "@@ -1,6 +1,5 @@\n-/* The following should NOT generate \"may not respond to\" warnings,\n-   since a forward-declared @class (instance) should be treated like a\n-   'Class') ('id').  */\n+/* The following should NOT generate \"may not respond to\" warnings, since a forward-declared\n+   @class (instance) should be treated like a 'Class') ('id').  */\n \n /* { dg-do compile } */\n \n@@ -9,11 +8,11 @@\n @class NotKnown;\n \n void foo(NotKnown *n) {\n-  [NotKnown new];\n-  [n nonexistent_method]; /* { dg-warning \"no .\\\\-nonexistent_method. method found\" } */\n+  [NotKnown new];         /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+  [n nonexistent_method]; /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+                          /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } 12 } */\n }\n \n /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */\n-"}, {"sha": "85abf7d311707f31a2bbff5c50379af55d85f847", "filename": "gcc/testsuite/obj-c++.dg/method-7.mm", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-7.mm?ref=bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "patch": "@@ -1,6 +1,5 @@\n /* Check if sending messages to \"underspecified\" objects is handled gracefully.  */\n /* Author: Ziemowit Laski <zlaski@apple.com>.  */\n-\n /* { dg-do compile } */\n \n @class UnderSpecified;\n@@ -10,10 +9,12 @@\n \n void foo(UnderSpecified *u, NotAClass *n) {\n   [n nonexistent_method];    /* { dg-warning \"invalid receiver type\" } */\n-       /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } 12 } */\n+       /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } 11 } */\n   [NotAClass nonexistent_method]; /* { dg-error \".NotAClass. is not an Objective\\\\-C class name or alias\" } */\n-  [u nonexistent_method]; /* { dg-warning \"no .\\\\-nonexistent_method. method found\" } */\n-  [UnderSpecified nonexistent_method]; /* { dg-warning \"no .\\\\+nonexistent_method. method found\" } */\n+  [u nonexistent_method];    /* { dg-warning \".interface of class .UnderSpecified. not found\" } */\n+                             /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } 14 } */\n+  [UnderSpecified nonexistent_method]; /* { dg-warning \".interface of class .UnderSpecified. not found\" } */\n+                                       /* { dg-warning \"no .\\\\+nonexistent_method. method found\" \"\" { target *-*-* } 16 } */\n }\n \n /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */"}, {"sha": "47499c37c0836e7389e74e5f1b685c9eccfa8281", "filename": "gcc/testsuite/obj-c++.dg/method-lookup-1.mm", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-lookup-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-lookup-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-lookup-1.mm?ref=bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "patch": "@@ -0,0 +1,94 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, June 2011.  */\n+/* { dg-do compile } */\n+\n+@class NotKnown;\n+\n+@protocol MyProtocol\n++ (id) classMethod;\n+- (id) instanceMethod;\n+@end\n+\n+@protocol MyProtocol2\n++ (id) classMethod2;\n+- (id) instanceMethod2;\n+@end\n+\n+void test (Class x, Class <MyProtocol> y, id w, id <MyProtocol> z, NotKnown *a, NotKnown <MyProtocol> *b)\n+{\n+  /* \"Class x\" means that \"x\" responds to any class methods, and may\n+     also respond to instance methods because instance methods of the\n+     root class are class methods.  */\n+  [x classMethod]; /* No warning here.  */\n+\n+  [x instanceMethod]; /* No warning here.  */\n+\n+\n+  /* \"Class <MyProtocol> y\" means that \"y\" responds to any class\n+     methods specified in the protocol MyProtocol, but not to other\n+     class or instance methods.  If a class method is not found, an\n+     instance method from the protocol may be used instead but that is\n+     suspicious and gets a warning.  */\n+  [y classMethod]; /* No warning here.  */\n+\n+  [y instanceMethod]; /* { dg-warning \"found .\\\\-instanceMethod. instead of .\\\\+instanceMethod. in protocol\" } */\n+\n+  [y classMethod2]; /* { dg-warning \".\\\\+classMethod2. not found in protocol\" } */\n+\n+  [y instanceMethod2]; /* { dg-warning \".\\\\+instanceMethod2. not found in protocol\" } */\n+\n+\n+  /* If a class is specified by name, the @interface must be available\n+     to check what it responds to.  */\n+  [NotKnown classMethod]; /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+\n+\n+  /* \"id w\" means that \"w\" responds to anything, both class and\n+     instance methods.  */\n+  [w instanceMethod]; /* No warning here.  */\n+\n+  [w instanceMethod2]; /* No warning here.  */\n+\n+  [w classMethod]; /* No warning here.  */\n+\n+  [w classMethod2]; /* No warning here.  */\n+\n+\n+  /* \"id <MyProtocol> z\" means that \"z\" responds to any instance\n+     methods in the protocol, but not class methods.  To select class\n+     methods, you use \"Class <MyProtocol> z\".  */\n+  [z instanceMethod]; /* No warning here.  */\n+\n+  [z instanceMethod2]; /* { dg-warning \".\\\\-instanceMethod2. not found in protocol\" } */\n+\n+  [z classMethod];     /* { dg-warning \".\\\\-classMethod. not found in protocol\" } */\n+\n+  [z classMethod2];    /* { dg-warning \".\\\\-classMethod2. not found in protocol\" } */\n+\n+\n+  /* \"NotKnown *a\" means that \"a\" is an instance of NotKnown.  Since\n+     the programmer explicitly specified the class name, it must be\n+     because they expect the compiler to do type-checking; the\n+     @interface must be available to do this check, otherwise the\n+     compiler does not know what \"a\" responds to.  */\n+  [a instanceMethod];  /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+\n+  /* But, if you cast it to \"id\", then you're disabling type-checking\n+     and the warnings should go away.  */\n+  [(id)a instanceMethod]; /* No warning here.  */\n+\n+\n+  /* \"NotKnown <MyProtocol> *b\" means that \"a\" is an instance of\n+     NotKnown, and also implements protocol <MyProtocol>.  If you send\n+     a message that is part of the protocol, then the compiler can do\n+     type-checking and all is fine.  */\n+  [b instanceMethod];\n+\n+  /* But if you send a message that is not part of the protocol, then\n+     you'll get a warning that the method can not be found in the\n+     protocol.  */\n+  [b instanceMethod2]; /* { dg-warning \".\\\\-instanceMethod2. not found in protocol\" } */ \n+\n+  /* But, if you cast it to \"id\", then you're disabling type-checking\n+     and the warnings should go away.  */\n+  [(id)b instanceMethod2]; /* No warning here.  */\n+}"}, {"sha": "0e099227cd102c20084bdc48bb3f903a86dc5aa8", "filename": "gcc/testsuite/objc.dg/method-19.m", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m?ref=bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "patch": "@@ -8,8 +8,9 @@\n @class NotKnown;\n \n void foo(NotKnown *n) {\n-  [NotKnown new];\n-  [n nonexistent_method]; /* { dg-warning \"no .\\\\-nonexistent_method. method found\" } */\n+  [NotKnown new];         /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+  [n nonexistent_method]; /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+                          /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } 12 } */\n }\n \n /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */"}, {"sha": "85abf7d311707f31a2bbff5c50379af55d85f847", "filename": "gcc/testsuite/objc.dg/method-5.m", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-5.m?ref=bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "patch": "@@ -11,8 +11,10 @@ void foo(UnderSpecified *u, NotAClass *n) {\n   [n nonexistent_method];    /* { dg-warning \"invalid receiver type\" } */\n        /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } 11 } */\n   [NotAClass nonexistent_method]; /* { dg-error \".NotAClass. is not an Objective\\\\-C class name or alias\" } */\n-  [u nonexistent_method]; /* { dg-warning \"no .\\\\-nonexistent_method. method found\" } */\n-  [UnderSpecified nonexistent_method]; /* { dg-warning \"no .\\\\+nonexistent_method. method found\" } */\n+  [u nonexistent_method];    /* { dg-warning \".interface of class .UnderSpecified. not found\" } */\n+                             /* { dg-warning \"no .\\\\-nonexistent_method. method found\" \"\" { target *-*-* } 14 } */\n+  [UnderSpecified nonexistent_method]; /* { dg-warning \".interface of class .UnderSpecified. not found\" } */\n+                                       /* { dg-warning \"no .\\\\+nonexistent_method. method found\" \"\" { target *-*-* } 16 } */\n }\n \n /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */"}, {"sha": "47499c37c0836e7389e74e5f1b685c9eccfa8281", "filename": "gcc/testsuite/objc.dg/method-lookup-1.m", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-lookup-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf79cedb1170f7c57a5d945c916dfcfc109bd22e/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-lookup-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-lookup-1.m?ref=bf79cedb1170f7c57a5d945c916dfcfc109bd22e", "patch": "@@ -0,0 +1,94 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, June 2011.  */\n+/* { dg-do compile } */\n+\n+@class NotKnown;\n+\n+@protocol MyProtocol\n++ (id) classMethod;\n+- (id) instanceMethod;\n+@end\n+\n+@protocol MyProtocol2\n++ (id) classMethod2;\n+- (id) instanceMethod2;\n+@end\n+\n+void test (Class x, Class <MyProtocol> y, id w, id <MyProtocol> z, NotKnown *a, NotKnown <MyProtocol> *b)\n+{\n+  /* \"Class x\" means that \"x\" responds to any class methods, and may\n+     also respond to instance methods because instance methods of the\n+     root class are class methods.  */\n+  [x classMethod]; /* No warning here.  */\n+\n+  [x instanceMethod]; /* No warning here.  */\n+\n+\n+  /* \"Class <MyProtocol> y\" means that \"y\" responds to any class\n+     methods specified in the protocol MyProtocol, but not to other\n+     class or instance methods.  If a class method is not found, an\n+     instance method from the protocol may be used instead but that is\n+     suspicious and gets a warning.  */\n+  [y classMethod]; /* No warning here.  */\n+\n+  [y instanceMethod]; /* { dg-warning \"found .\\\\-instanceMethod. instead of .\\\\+instanceMethod. in protocol\" } */\n+\n+  [y classMethod2]; /* { dg-warning \".\\\\+classMethod2. not found in protocol\" } */\n+\n+  [y instanceMethod2]; /* { dg-warning \".\\\\+instanceMethod2. not found in protocol\" } */\n+\n+\n+  /* If a class is specified by name, the @interface must be available\n+     to check what it responds to.  */\n+  [NotKnown classMethod]; /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+\n+\n+  /* \"id w\" means that \"w\" responds to anything, both class and\n+     instance methods.  */\n+  [w instanceMethod]; /* No warning here.  */\n+\n+  [w instanceMethod2]; /* No warning here.  */\n+\n+  [w classMethod]; /* No warning here.  */\n+\n+  [w classMethod2]; /* No warning here.  */\n+\n+\n+  /* \"id <MyProtocol> z\" means that \"z\" responds to any instance\n+     methods in the protocol, but not class methods.  To select class\n+     methods, you use \"Class <MyProtocol> z\".  */\n+  [z instanceMethod]; /* No warning here.  */\n+\n+  [z instanceMethod2]; /* { dg-warning \".\\\\-instanceMethod2. not found in protocol\" } */\n+\n+  [z classMethod];     /* { dg-warning \".\\\\-classMethod. not found in protocol\" } */\n+\n+  [z classMethod2];    /* { dg-warning \".\\\\-classMethod2. not found in protocol\" } */\n+\n+\n+  /* \"NotKnown *a\" means that \"a\" is an instance of NotKnown.  Since\n+     the programmer explicitly specified the class name, it must be\n+     because they expect the compiler to do type-checking; the\n+     @interface must be available to do this check, otherwise the\n+     compiler does not know what \"a\" responds to.  */\n+  [a instanceMethod];  /* { dg-warning \".interface of class .NotKnown. not found\" } */\n+\n+  /* But, if you cast it to \"id\", then you're disabling type-checking\n+     and the warnings should go away.  */\n+  [(id)a instanceMethod]; /* No warning here.  */\n+\n+\n+  /* \"NotKnown <MyProtocol> *b\" means that \"a\" is an instance of\n+     NotKnown, and also implements protocol <MyProtocol>.  If you send\n+     a message that is part of the protocol, then the compiler can do\n+     type-checking and all is fine.  */\n+  [b instanceMethod];\n+\n+  /* But if you send a message that is not part of the protocol, then\n+     you'll get a warning that the method can not be found in the\n+     protocol.  */\n+  [b instanceMethod2]; /* { dg-warning \".\\\\-instanceMethod2. not found in protocol\" } */ \n+\n+  /* But, if you cast it to \"id\", then you're disabling type-checking\n+     and the warnings should go away.  */\n+  [(id)b instanceMethod2]; /* No warning here.  */\n+}"}]}