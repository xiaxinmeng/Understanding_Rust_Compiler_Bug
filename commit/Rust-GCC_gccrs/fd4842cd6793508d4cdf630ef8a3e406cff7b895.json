{"sha": "fd4842cd6793508d4cdf630ef8a3e406cff7b895", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ0ODQyY2Q2NzkzNTA4ZDRjZGY2MzBlZjhhM2U0MDZjZmY3Yjg5NQ==", "commit": {"author": {"name": "Sofiane Naci", "email": "sofiane.naci@arm.com", "date": "2013-05-07T12:47:18Z"}, "committer": {"name": "Sofiane Naci", "email": "sofiane@gcc.gnu.org", "date": "2013-05-07T12:47:18Z"}, "message": "aarch64-simd.md (*aarch64_simd_mov<mode>): call splitter.\n\n\tgcc/\n\t* config/aarch64/aarch64-simd.md (*aarch64_simd_mov<mode>): call splitter.\n\t(aarch64_simd_mov<mode>): New expander.\n\t(aarch64_simd_mov_to_<mode>low): New instruction pattern.\n\t(aarch64_simd_mov_to_<mode>high): Likewise.\n\t(aarch64_simd_mov_from_<mode>low): Likewise.\n\t(aarch64_simd_mov_from_<mode>high): Likewise.\n\t(aarch64_dup_lane<mode>): Update.\n\t(aarch64_dup_lanedi): New instruction pattern.\n\t* config/aarch64/aarch64-protos.h (aarch64_split_simd_move): New prototype.\n\t* config/aarch64/aarch64.c (aarch64_split_simd_move): New function.\n\n\ttestsuites/\n\t* gcc.target/aarch64/scalar_intrinsics.c: Update.\n\nFrom-SVN: r198680", "tree": {"sha": "c6f19882066d21f8fb6c6cf9bbad1c36f01542c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6f19882066d21f8fb6c6cf9bbad1c36f01542c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd4842cd6793508d4cdf630ef8a3e406cff7b895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd4842cd6793508d4cdf630ef8a3e406cff7b895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd4842cd6793508d4cdf630ef8a3e406cff7b895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd4842cd6793508d4cdf630ef8a3e406cff7b895/comments", "author": null, "committer": null, "parents": [{"sha": "a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a7d10ed53c07e1ccfa6716c5bbc1dfd8bc05f9"}], "stats": {"total": 180, "additions": 176, "deletions": 4}, "files": [{"sha": "98e76ce27af4a6d764d38044ac76fac13f90d364", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd4842cd6793508d4cdf630ef8a3e406cff7b895", "patch": "@@ -1,3 +1,16 @@\n+2013-05-07  Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_simd_mov<mode>): call splitter.\n+\t(aarch64_simd_mov<mode>): New expander.\n+\t(aarch64_simd_mov_to_<mode>low): New instruction pattern.\n+\t(aarch64_simd_mov_to_<mode>high): Likewise.\n+\t(aarch64_simd_mov_from_<mode>low): Likewise.\n+\t(aarch64_simd_mov_from_<mode>high): Likewise.\n+\t(aarch64_dup_lane<mode>): Update.\n+\t(aarch64_dup_lanedi): New instruction pattern.\n+\t* config/aarch64/aarch64-protos.h (aarch64_split_simd_move): New prototype.\n+\t* config/aarch64/aarch64.c (aarch64_split_simd_move): New function.\n+\n 2013-05-07  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gimple-ssa-strength-reduction.c (lazy_create_slsr_reg): Remove."}, {"sha": "001842e43b4cdb166f0b13fc0f74cec1f6f0e2f8", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=fd4842cd6793508d4cdf630ef8a3e406cff7b895", "patch": "@@ -219,6 +219,8 @@ void aarch64_split_128bit_move (rtx, rtx);\n \n bool aarch64_split_128bit_move_p (rtx, rtx);\n \n+void aarch64_split_simd_move (rtx, rtx);\n+\n /* Check for a legitimate floating point constant for FMOV.  */\n bool aarch64_float_const_representable_p (rtx);\n "}, {"sha": "5626b55ede5d21d4d8bf7784c18e37dace00260c", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 115, "deletions": 3, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=fd4842cd6793508d4cdf630ef8a3e406cff7b895", "patch": "@@ -358,7 +358,7 @@\n )\n \n (define_insn \"aarch64_dup_lane<mode>\"\n-  [(set (match_operand:SDQ_I 0 \"register_operand\" \"=w\")\n+  [(set (match_operand:ALLX 0 \"register_operand\" \"=w\")\n \t(vec_select:<VEL>\n \t  (match_operand:<VCON> 1 \"register_operand\" \"w\")\n \t  (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")])\n@@ -369,6 +369,19 @@\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n+(define_insn \"aarch64_dup_lanedi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=w,r\")\n+\t(vec_select:DI\n+\t  (match_operand:V2DI 1 \"register_operand\" \"w,w\")\n+\t  (parallel [(match_operand:SI 2 \"immediate_operand\" \"i,i\")])))]\n+  \"TARGET_SIMD\"\n+  \"@\n+   dup\\\\t%<v>0<Vmtype>, %1.<Vetype>[%2]\n+   umov\\t%0, %1.d[%2]\"\n+  [(set_attr \"simd_type\" \"simd_dup\")\n+   (set_attr \"simd_mode\" \"DI\")]\n+)\n+\n (define_insn \"aarch64_simd_dup<mode>\"\n   [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n         (vec_duplicate:VDQF (match_operand:<VEL> 1 \"register_operand\" \"w\")))]\n@@ -419,8 +432,8 @@\n     case 0: return \"ld1\\t{%0.<Vtype>}, %1\";\n     case 1: return \"st1\\t{%1.<Vtype>}, %0\";\n     case 2: return \"orr\\t%0.<Vbtype>, %1.<Vbtype>, %1.<Vbtype>\";\n-    case 3: return \"umov\\t%0, %1.d[0]\\;umov\\t%H0, %1.d[1]\";\n-    case 4: return \"ins\\t%0.d[0], %1\\;ins\\t%0.d[1], %H1\";\n+    case 3: return \"#\";\n+    case 4: return \"#\";\n     case 5: return \"#\";\n     case 6:\n \treturn aarch64_output_simd_mov_immediate (&operands[1],\n@@ -454,6 +467,105 @@\n   aarch64_simd_disambiguate_copy (operands, dest, src, 2);\n })\n \n+(define_split\n+  [(set (match_operand:VQ 0 \"register_operand\" \"\")\n+        (match_operand:VQ 1 \"register_operand\" \"\"))]\n+  \"TARGET_SIMD && reload_completed\n+   && ((FP_REGNUM_P (REGNO (operands[0])) && GP_REGNUM_P (REGNO (operands[1])))\n+       || (GP_REGNUM_P (REGNO (operands[0])) && FP_REGNUM_P (REGNO (operands[1]))))\"\n+  [(const_int 0)]\n+{\n+  aarch64_split_simd_move (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_expand \"aarch64_simd_mov<mode>\"\n+  [(set (match_operand:VQ 0)\n+        (match_operand:VQ 1))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx dst = operands[0];\n+    rtx src = operands[1];\n+\n+    if (GP_REGNUM_P (REGNO (src)))\n+      {\n+        rtx low_part = gen_lowpart (<VHALF>mode, src);\n+        rtx high_part = gen_highpart (<VHALF>mode, src);\n+\n+        emit_insn\n+          (gen_aarch64_simd_mov_to_<mode>low (dst, low_part));\n+        emit_insn\n+          (gen_aarch64_simd_mov_to_<mode>high (dst, high_part));\n+      }\n+\n+    else\n+      {\n+        rtx low_half = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n+        rtx high_half = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n+        rtx low_part = gen_lowpart (<VHALF>mode, dst);\n+        rtx high_part = gen_highpart (<VHALF>mode, dst);\n+\n+        emit_insn\n+          (gen_aarch64_simd_mov_from_<mode>low (low_part, src, low_half));\n+        emit_insn\n+          (gen_aarch64_simd_mov_from_<mode>high (high_part, src, high_half));\n+      }\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"aarch64_simd_mov_to_<mode>low\"\n+  [(set (zero_extract:VQ\n+          (match_operand:VQ 0 \"register_operand\" \"+w\")\n+          (const_int 64) (const_int 0))\n+        (vec_concat:VQ\n+          (match_operand:<VHALF> 1 \"register_operand\" \"r\")\n+          (vec_duplicate:<VHALF> (const_int 0))))]\n+  \"TARGET_SIMD && reload_completed\"\n+  \"ins\\t%0.d[0], %1\"\n+  [(set_attr \"simd_type\" \"simd_move\")\n+   (set_attr \"simd_mode\" \"<MODE>\")\n+   (set_attr \"length\" \"4\")\n+  ])\n+\n+(define_insn \"aarch64_simd_mov_to_<mode>high\"\n+  [(set (zero_extract:VQ\n+          (match_operand:VQ 0 \"register_operand\" \"+w\")\n+          (const_int 64) (const_int 64))\n+        (vec_concat:VQ\n+          (match_operand:<VHALF> 1 \"register_operand\" \"r\")\n+          (vec_duplicate:<VHALF> (const_int 0))))]\n+  \"TARGET_SIMD && reload_completed\"\n+  \"ins\\t%0.d[1], %1\"\n+  [(set_attr \"simd_type\" \"simd_move\")\n+   (set_attr \"simd_mode\" \"<MODE>\")\n+   (set_attr \"length\" \"4\")\n+  ])\n+\n+(define_insn \"aarch64_simd_mov_from_<mode>low\"\n+  [(set (match_operand:<VHALF> 0 \"register_operand\" \"=r\")\n+        (vec_select:<VHALF>\n+          (match_operand:VQ 1 \"register_operand\" \"w\")\n+          (match_operand:VQ 2 \"vect_par_cnst_lo_half\" \"\")))]\n+  \"TARGET_SIMD && reload_completed\"\n+  \"umov\\t%0, %1.d[0]\"\n+  [(set_attr \"simd_type\" \"simd_move\")\n+   (set_attr \"simd_mode\" \"<MODE>\")\n+   (set_attr \"length\" \"4\")\n+  ])\n+\n+(define_insn \"aarch64_simd_mov_from_<mode>high\"\n+  [(set (match_operand:<VHALF> 0 \"register_operand\" \"=r\")\n+        (vec_select:<VHALF>\n+          (match_operand:VQ 1 \"register_operand\" \"w\")\n+          (match_operand:VQ 2 \"vect_par_cnst_hi_half\" \"\")))]\n+  \"TARGET_SIMD && reload_completed\"\n+  \"umov\\t%0, %1.d[1]\"\n+  [(set_attr \"simd_type\" \"simd_move\")\n+   (set_attr \"simd_mode\" \"<MODE>\")\n+   (set_attr \"length\" \"4\")\n+  ])\n+\n (define_insn \"orn<mode>3\"\n  [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n        (ior:VDQ (not:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\"))"}, {"sha": "d32563d3e738185f04ce9101d624591756adc23c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fd4842cd6793508d4cdf630ef8a3e406cff7b895", "patch": "@@ -656,6 +656,47 @@ aarch64_split_128bit_move_p (rtx dst, rtx src)\n \t  || ! (FP_REGNUM_P (REGNO (dst)) && FP_REGNUM_P (REGNO (src))));\n }\n \n+/* Split a complex SIMD move.  */\n+\n+void\n+aarch64_split_simd_move (rtx dst, rtx src)\n+{\n+  enum machine_mode src_mode = GET_MODE (src);\n+  enum machine_mode dst_mode = GET_MODE (dst);\n+\n+  gcc_assert (VECTOR_MODE_P (dst_mode));\n+\n+  if (REG_P (dst) && REG_P (src))\n+    {\n+      gcc_assert (VECTOR_MODE_P (src_mode));\n+\n+      switch (src_mode)\n+\t{\n+\tcase V16QImode:\n+\t  emit_insn (gen_aarch64_simd_movv16qi (dst, src));\n+\t  break;\n+\tcase V8HImode:\n+\t  emit_insn (gen_aarch64_simd_movv8hi (dst, src));\n+\t  break;\n+\tcase V4SImode:\n+\t  emit_insn (gen_aarch64_simd_movv4si (dst, src));\n+\t  break;\n+\tcase V2DImode:\n+\t  emit_insn (gen_aarch64_simd_movv2di (dst, src));\n+\t  break;\n+\tcase V4SFmode:\n+\t  emit_insn (gen_aarch64_simd_movv4sf (dst, src));\n+\t  break;\n+\tcase V2DFmode:\n+\t  emit_insn (gen_aarch64_simd_movv2df (dst, src));\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      return;\n+    }\n+}\n+\n static rtx\n aarch64_force_temporary (rtx x, rtx value)\n {"}, {"sha": "2351411254bcb1676def3dce6273324efef780ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd4842cd6793508d4cdf630ef8a3e406cff7b895", "patch": "@@ -1,3 +1,7 @@\n+2013-05-07  Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* gcc.target/aarch64/scalar_intrinsics.c: Update.\n+\n 2013-05-07  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57190"}, {"sha": "7427c6217f8ba5a4b87be71748433a2cb6d1e3e4", "filename": "gcc/testsuite/gcc.target/aarch64/scalar_intrinsics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4842cd6793508d4cdf630ef8a3e406cff7b895/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c?ref=fd4842cd6793508d4cdf630ef8a3e406cff7b895", "patch": "@@ -223,7 +223,7 @@ test_vdups_lane_u32 (uint32x4_t a)\n   return vdups_lane_u32 (a, 2);\n }\n \n-/* { dg-final { scan-assembler-times \"\\\\tdup\\\\td\\[0-9\\]+, v\\[0-9\\]+\\.d\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tumov\\\\tx\\[0-9\\]+, v\\[0-9\\]+\\.d\" 2 } } */\n \n int64x1_t\n test_vdupd_lane_s64 (int64x2_t a)"}]}