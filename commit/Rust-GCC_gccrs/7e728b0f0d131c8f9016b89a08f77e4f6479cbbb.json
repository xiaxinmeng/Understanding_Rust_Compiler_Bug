{"sha": "7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3MjhiMGYwZDEzMWM4ZjkwMTZiODlhMDhmNzdlNGY2NDc5Y2JiYg==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2009-04-20T09:44:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T09:44:10Z"}, "message": "s-taprop-irix.adb, [...]: Minor reformatting.\n\n2009-04-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-taprop-irix.adb, s-taprop-tru64.adb, s-taprop-vms.adb,\n\toutput.adb, output.ads, s-taprop-hpux-dce.adb,\n\ts-taprop-linux.adb, s-taprop-solaris.adb, s-taprop-posix.adb: Minor\n\treformatting.\n\nFrom-SVN: r146388", "tree": {"sha": "b49e8db45c4f24e5ecfeee5550af7e826a984c83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b49e8db45c4f24e5ecfeee5550af7e826a984c83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/comments", "author": null, "committer": null, "parents": [{"sha": "5e39baa64cbb9805c30d16d391b3ad446a36ffe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e39baa64cbb9805c30d16d391b3ad446a36ffe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e39baa64cbb9805c30d16d391b3ad446a36ffe7"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "541c3672f487f39224ec4bdeaad6a41e3fbb44e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "patch": "@@ -1,3 +1,10 @@\n+2009-04-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-taprop-irix.adb, s-taprop-tru64.adb, s-taprop-vms.adb,\n+\toutput.adb, output.ads, s-taprop-hpux-dce.adb,\n+\ts-taprop-linux.adb, s-taprop-solaris.adb, s-taprop-posix.adb: Minor\n+\treformatting.\n+\n 2009-04-20  Thomas Quinot  <quinot@adacore.com>\n \n \t* g-socket.adb, g-socket.ads, g-socthi-mingw.ads, g-socthi-vms.adb,"}, {"sha": "851f11850b8dc3c0e46e0a6f303035dcb4fb2cd5", "filename": "gcc/ada/output.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Foutput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Foutput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.adb?ref=7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "patch": "@@ -45,6 +45,7 @@ package body Output is\n \n    Indentation_Limit : constant Positive := 40;\n    --  Indentation beyond this number of spaces wraps around\n+\n    pragma Assert (Indentation_Limit < Buffer_Max / 2);\n    --  Make sure this is substantially shorter than the line length\n \n@@ -163,7 +164,7 @@ package body Output is\n    begin\n       Cur_Indentation :=\n         (Cur_Indentation + Indentation_Amount) mod Indentation_Limit;\n-      --  The \"mod\" is to wrap around in case there's too much indentation.\n+      --  The \"mod\" is to wrap around in case there's too much indentation\n    end Indent;\n \n    -------------"}, {"sha": "8e8eb6b0eba08681d5fc216b8d2d0da0743a0ba4", "filename": "gcc/ada/output.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Foutput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Foutput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.ads?ref=7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "patch": "@@ -84,7 +84,7 @@ package Output is\n    procedure Indent;\n    --  Increases the current indentation level. Whenever a line is written\n    --  (triggered by Eol), an appropriate amount of whitespace is added to the\n-   --  beginning of the line, wrapping around if it gets to long.\n+   --  beginning of the line, wrapping around if it gets too long.\n \n    procedure Outdent;\n    --  Decreases the current indentation level.\n@@ -200,8 +200,8 @@ private\n    --  Column about to be written\n \n    type Saved_Output_Buffer is record\n-      Buffer   : String (1 .. Buffer_Max + 1);\n-      Next_Col : Positive;\n+      Buffer          : String (1 .. Buffer_Max + 1);\n+      Next_Col        : Positive;\n       Cur_Indentation : Natural;\n    end record;\n "}, {"sha": "e93b7af4dca420b5c733a3d6aa97f8951eaa6a70", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "patch": "@@ -1070,8 +1070,8 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n \n             loop\n-               --  loop in case pthread_cond_wait returns earlier than\n-               --  expected (e.g. in case of EINTR caused by a signal).\n+               --  Loop in case pthread_cond_wait returns earlier than expected\n+               --  (e.g. in case of EINTR caused by a signal).\n \n                Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n                pragma Assert (Result = 0 or else Result = EINTR);"}, {"sha": "69a431539070889c31f6ebf9c9afd278c6cb40b1", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "patch": "@@ -1155,8 +1155,8 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n \n             loop\n-               --  loop in case pthread_cond_wait returns earlier than\n-               --  expected (e.g. in case of EINTR caused by a signal).\n+               --  Loop in case pthread_cond_wait returns earlier than expected\n+               --  (e.g. in case of EINTR caused by a signal).\n \n                Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n                pragma Assert (Result = 0 or else Result = EINTR);"}, {"sha": "6d197f76d1d0af120bac94e02b809e22c52588b8", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "patch": "@@ -1085,11 +1085,11 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n \n             loop\n-               --  loop in case pthread_cond_wait returns earlier than\n-               --  expected (e.g. in case of EINTR caused by a signal).\n-               --  This should not happen on current implementation of pthread\n-               --  under Linux, but POSIX does not guarantee it, so this may\n-               --  change in the future.\n+               --  Loop in case pthread_cond_wait returns earlier than expected\n+               --  (e.g. in case of EINTR caused by a signal). This should not\n+               --  happen with the current Linux implementation of pthread, but\n+               --  POSIX does not guarantee it, so this may change in the\n+               --  future.\n \n                Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n                pragma Assert (Result = 0 or else Result = EINTR);"}, {"sha": "8e9ba26ce64caecccfb5f7a56706675d46b1323b", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "patch": "@@ -1259,8 +1259,8 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n \n             loop\n-               --  loop in case pthread_cond_wait returns earlier than\n-               --  expected (e.g. in case of EINTR caused by a signal).\n+               --  Loop in case pthread_cond_wait returns earlier than expected\n+               --  (e.g. in case of EINTR caused by a signal).\n \n                Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n                pragma Assert (Result = 0 or else Result = EINTR);"}, {"sha": "a5b8dfbba5b78da0004f60b80aa5ab267bd9f5b1", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "patch": "@@ -1820,8 +1820,8 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n \n             loop\n-               --  loop in case pthread_cond_wait returns earlier than\n-               --  expected (e.g. in case of EINTR caused by a signal).\n+               --  Loop in case pthread_cond_wait returns earlier than expected\n+               --  (e.g. in case of EINTR caused by a signal).\n \n                Result := cond_wait (S.CV'Access, S.L'Access);\n                pragma Assert (Result = 0 or else Result = EINTR);"}, {"sha": "da9cca88b9ceecbd2d63296171fe07c974581a50", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "patch": "@@ -1172,8 +1172,8 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n \n             loop\n-               --  loop in case pthread_cond_wait returns earlier than\n-               --  expected (e.g. in case of EINTR caused by a signal).\n+               --  Loop in case pthread_cond_wait returns earlier than expected\n+               --  (e.g. in case of EINTR caused by a signal).\n \n                Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n                pragma Assert (Result = 0 or else Result = EINTR);"}, {"sha": "eb8c0f1867c11ec07c5046e3301cfe7a91dcea76", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e728b0f0d131c8f9016b89a08f77e4f6479cbbb/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=7e728b0f0d131c8f9016b89a08f77e4f6479cbbb", "patch": "@@ -1106,8 +1106,8 @@ package body System.Task_Primitives.Operations is\n             S.Waiting := True;\n \n             loop\n-               --  loop in case pthread_cond_wait returns earlier than\n-               --  expected (e.g. in case of EINTR caused by a signal).\n+               --  Loop in case pthread_cond_wait returns earlier than expected\n+               --  (e.g. in case of EINTR caused by a signal).\n \n                Result := pthread_cond_wait (S.CV'Access, S.L'Access);\n                pragma Assert (Result = 0 or else Result = EINTR);"}]}