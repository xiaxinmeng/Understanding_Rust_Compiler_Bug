{"sha": "948bf10686a16b92f8c413bb3f1440f0f770b087", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ4YmYxMDY4NmExNmI5MmY4YzQxM2JiM2YxNDQwZjBmNzcwYjA4Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-11-30T08:31:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-11-30T08:31:40Z"}, "message": "sparc.c (DF_MODES): Simplify.\n\n\t* config/sparc/sparc.c (DF_MODES): Simplify.\n\t(TF_ONLY_MODES, OF_ONLY_MODES): Delete.\n\t(TF_MODES, OF_MODES): Adjust for above change.\n\t(TF_MODES_NO_S, OF_MODES_NO_S): Likewise.\n\t*  config/sparc/sparc.h (REGNO_REG_CLASS): Move around.\n\nFrom-SVN: r154755", "tree": {"sha": "14082ecbd972badc8c5024c870b498d3e9d4ad50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14082ecbd972badc8c5024c870b498d3e9d4ad50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/948bf10686a16b92f8c413bb3f1440f0f770b087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948bf10686a16b92f8c413bb3f1440f0f770b087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948bf10686a16b92f8c413bb3f1440f0f770b087", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948bf10686a16b92f8c413bb3f1440f0f770b087/comments", "author": null, "committer": null, "parents": [{"sha": "f8682ff62fb7f0d4b5ecf25ef184e0956c7a2f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8682ff62fb7f0d4b5ecf25ef184e0956c7a2f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8682ff62fb7f0d4b5ecf25ef184e0956c7a2f0a"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "ae70d025cb443b9850f89e909dc364d5bc5539de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948bf10686a16b92f8c413bb3f1440f0f770b087/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948bf10686a16b92f8c413bb3f1440f0f770b087/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=948bf10686a16b92f8c413bb3f1440f0f770b087", "patch": "@@ -1,3 +1,11 @@\n+2009-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (DF_MODES): Simplify.\n+\t(TF_ONLY_MODES, OF_ONLY_MODES): Delete.\n+\t(TF_MODES, OF_MODES): Adjust for above change.\n+\t(TF_MODES_NO_S, OF_MODES_NO_S): Likewise.\n+\t*  config/sparc/sparc.h (REGNO_REG_CLASS): Move around.\n+\n 2009-11-30  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR rtl-optimization/41812\n@@ -13,7 +21,6 @@\n \t(df_md_local_compute): Only include live registers in init.\n \t(df_md_transfer_function): Prune the in-set computed by\n \tthe confluence function, and the gen-set too.\n-\t(df_simulate_one_insn_forwards): Fix typo.\n \n 2009-11-30  Hans-Peter Nilsson  <hp@axis.com>\n "}, {"sha": "ee069d6b782f346c75c7a687ab5ae6859369f20f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948bf10686a16b92f8c413bb3f1440f0f770b087/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948bf10686a16b92f8c413bb3f1440f0f770b087/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=948bf10686a16b92f8c413bb3f1440f0f770b087", "patch": "@@ -3733,27 +3733,22 @@ enum sparc_mode_class {\n #define SF_MODES (S_MODES)\n \n /* Modes for double-float and smaller quantities.  */\n-#define DF_MODES (S_MODES | D_MODES)\n-\n-/* Modes for double-float only quantities.  */\n-#define DF_MODES_NO_S ((1 << (int) D_MODE) | (1 << (int) DF_MODE))\n-\n-/* Modes for quad-float only quantities.  */\n-#define TF_ONLY_MODES (1 << (int) TF_MODE)\n+#define DF_MODES (D_MODES)\n \n /* Modes for quad-float and smaller quantities.  */\n-#define TF_MODES (DF_MODES | TF_ONLY_MODES)\n+#define TF_MODES (DF_MODES | (1 << (int) TF_MODE))\n \n-/* Modes for quad-float and double-float quantities.  */\n-#define TF_MODES_NO_S (DF_MODES_NO_S | TF_ONLY_MODES)\n+/* Modes for quad-float pairs and smaller quantities.  */\n+#define OF_MODES (TF_MODES | (1 << (int) OF_MODE))\n \n-/* Modes for quad-float pair only quantities.  */\n-#define OF_ONLY_MODES (1 << (int) OF_MODE)\n+/* Modes for double-float only quantities.  */\n+#define DF_MODES_NO_S ((1 << (int) D_MODE) | (1 << (int) DF_MODE))\n \n-/* Modes for quad-float pairs and smaller quantities.  */\n-#define OF_MODES (TF_MODES | OF_ONLY_MODES)\n+/* Modes for quad-float and double-float only quantities.  */\n+#define TF_MODES_NO_S (DF_MODES_NO_S | (1 << (int) TF_MODE))\n \n-#define OF_MODES_NO_S (TF_MODES_NO_S | OF_ONLY_MODES)\n+/* Modes for quad-float pairs and double-float only quantities.  */\n+#define OF_MODES_NO_S (TF_MODES_NO_S | (1 << (int) OF_MODE))\n \n /* Modes for condition codes.  */\n #define CC_MODES (1 << (int) CC_MODE)"}, {"sha": "58c584e6b305ace760fb5eb97f2752fbd73e2dec", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/948bf10686a16b92f8c413bb3f1440f0f770b087/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/948bf10686a16b92f8c413bb3f1440f0f770b087/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=948bf10686a16b92f8c413bb3f1440f0f770b087", "patch": "@@ -1068,6 +1068,15 @@ enum reg_class { NO_REGS, FPCC_REGS, I64_REGS, GENERAL_REGS, FP_REGS,\n    {-1, -1, -1, 0x20},\t/* GENERAL_OR_EXTRA_FP_REGS */\t\\\n    {-1, -1, -1, 0x3f}}\t/* ALL_REGS */\n \n+/* The same information, inverted:\n+   Return the class number of the smallest class containing\n+   reg number REGNO.  This could be a conditional expression\n+   or could index an array.  */\n+\n+extern enum reg_class sparc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n+\n+#define REGNO_REG_CLASS(REGNO) sparc_regno_reg_class[(REGNO)]\n+\n /* The following macro defines cover classes for Integrated Register\n    Allocator.  Cover classes is a set of non-intersected register\n    classes covering all hard registers used for register allocation\n@@ -1095,15 +1104,6 @@ enum reg_class { NO_REGS, FPCC_REGS, I64_REGS, GENERAL_REGS, FP_REGS,\n    && GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO)\t\t\\\n    ? reg_classes_intersect_p (CLASS, FP_REGS) : 0)\n \n-/* The same information, inverted:\n-   Return the class number of the smallest class containing\n-   reg number REGNO.  This could be a conditional expression\n-   or could index an array.  */\n-\n-extern enum reg_class sparc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n-\n-#define REGNO_REG_CLASS(REGNO) sparc_regno_reg_class[(REGNO)]\n-\n /* This is the order in which to allocate registers normally.\n \n    We put %f0-%f7 last among the float registers, so as to make it more"}]}