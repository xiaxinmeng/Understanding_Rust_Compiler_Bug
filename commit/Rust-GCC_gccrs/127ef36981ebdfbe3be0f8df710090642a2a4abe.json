{"sha": "127ef36981ebdfbe3be0f8df710090642a2a4abe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI3ZWYzNjk4MWViZGZiZTNiZTBmOGRmNzEwMDkwNjQyYTJhNGFiZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-10T14:43:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-10T14:43:13Z"}, "message": "re PR tree-optimization/82929 (r254579 causes ICE: tree check: expected ssa_name, have array_ref in has_single_use, at ssa-iterators.h:400)\n\n\tPR tree-optimization/82929\n\t* gimple-ssa-store-merging.c (struct store_immediate_info): Add\n\tops_swapped_p non-static data member.\n\t(store_immediate_info::store_immediate_info): Clear it.\n\t(imm_store_chain_info::coalesce_immediate_stores): If swapping\n\tops set ops_swapped_p.\n\t(count_multiple_uses): Handle ops_swapped_p.\n\n\t* gcc.dg/pr82929.c: New test.\n\t* g++.dg/opt/pr82929.C: New test.\n\nFrom-SVN: r254628", "tree": {"sha": "c68a1dc595dca3d5343f87ec39f6fc2f1e5794a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c68a1dc595dca3d5343f87ec39f6fc2f1e5794a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/127ef36981ebdfbe3be0f8df710090642a2a4abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/127ef36981ebdfbe3be0f8df710090642a2a4abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/127ef36981ebdfbe3be0f8df710090642a2a4abe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/127ef36981ebdfbe3be0f8df710090642a2a4abe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93814e2d690f7ccae4d87365b66d05cfa4a11576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93814e2d690f7ccae4d87365b66d05cfa4a11576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93814e2d690f7ccae4d87365b66d05cfa4a11576"}], "stats": {"total": 89, "additions": 82, "deletions": 7}, "files": [{"sha": "57a7a1e904504cef33bd8829afcd9bfdac60b349", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/127ef36981ebdfbe3be0f8df710090642a2a4abe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/127ef36981ebdfbe3be0f8df710090642a2a4abe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=127ef36981ebdfbe3be0f8df710090642a2a4abe", "patch": "@@ -1,3 +1,13 @@\n+2017-11-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/82929\n+\t* gimple-ssa-store-merging.c (struct store_immediate_info): Add\n+\tops_swapped_p non-static data member.\n+\t(store_immediate_info::store_immediate_info): Clear it.\n+\t(imm_store_chain_info::coalesce_immediate_stores): If swapping\n+\tops set ops_swapped_p.\n+\t(count_multiple_uses): Handle ops_swapped_p.\n+\n 2017-11-10  Martin Liska  <mliska@suse.cz>\n \n \t* coverage.c (coverage_init): Stream information about"}, {"sha": "40f7c9843f643826898376ea0f76551275aa8780", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/127ef36981ebdfbe3be0f8df710090642a2a4abe/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/127ef36981ebdfbe3be0f8df710090642a2a4abe/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=127ef36981ebdfbe3be0f8df710090642a2a4abe", "patch": "@@ -209,7 +209,11 @@ struct store_immediate_info\n   /* INTEGER_CST for constant stores, MEM_REF for memory copy or\n      BIT_*_EXPR for logical bitwise operation.  */\n   enum tree_code rhs_code;\n+  /* True if BIT_{AND,IOR,XOR}_EXPR result is inverted before storing.  */\n   bool bit_not_p;\n+  /* True if ops have been swapped and thus ops[1] represents\n+     rhs1 of BIT_{AND,IOR,XOR}_EXPR and ops[0] represents rhs2.  */\n+  bool ops_swapped_p;\n   /* Operands.  For BIT_*_EXPR rhs_code both operands are used, otherwise\n      just the first one.  */\n   store_operand_info ops[2];\n@@ -231,7 +235,8 @@ store_immediate_info::store_immediate_info (unsigned HOST_WIDE_INT bs,\n \t\t\t\t\t    const store_operand_info &op0r,\n \t\t\t\t\t    const store_operand_info &op1r)\n   : bitsize (bs), bitpos (bp), bitregion_start (brs), bitregion_end (bre),\n-    stmt (st), order (ord), rhs_code (rhscode), bit_not_p (bitnotp)\n+    stmt (st), order (ord), rhs_code (rhscode), bit_not_p (bitnotp),\n+    ops_swapped_p (false)\n #if __cplusplus >= 201103L\n     , ops { op0r, op1r }\n {\n@@ -1189,7 +1194,10 @@ imm_store_chain_info::coalesce_immediate_stores ()\n \t\t  == info->bitpos - infof->bitpos)\n \t      && operand_equal_p (info->ops[1].base_addr,\n \t\t\t\t  infof->ops[0].base_addr, 0))\n-\t    std::swap (info->ops[0], info->ops[1]);\n+\t    {\n+\t      std::swap (info->ops[0], info->ops[1]);\n+\t      info->ops_swapped_p = true;\n+\t    }\n \t  if ((!infof->ops[0].base_addr\n \t       || compatible_load_p (merged_store, info, base_addr, 0))\n \t      && (!infof->ops[1].base_addr\n@@ -1413,18 +1421,21 @@ count_multiple_uses (store_immediate_info *info)\n       stmt = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (stmt));\n       /* stmt is now the BIT_*_EXPR.  */\n       if (!has_single_use (gimple_assign_rhs1 (stmt)))\n-\tret += 1 + info->ops[0].bit_not_p;\n-      else if (info->ops[0].bit_not_p)\n+\tret += 1 + info->ops[info->ops_swapped_p].bit_not_p;\n+      else if (info->ops[info->ops_swapped_p].bit_not_p)\n \t{\n \t  gimple *stmt2 = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (stmt));\n \t  if (!has_single_use (gimple_assign_rhs1 (stmt2)))\n \t    ++ret;\n \t}\n       if (info->ops[1].base_addr == NULL_TREE)\n-\treturn ret;\n+\t{\n+\t  gcc_checking_assert (!info->ops_swapped_p);\n+\t  return ret;\n+\t}\n       if (!has_single_use (gimple_assign_rhs2 (stmt)))\n-\tret += 1 + info->ops[1].bit_not_p;\n-      else if (info->ops[1].bit_not_p)\n+\tret += 1 + info->ops[1 - info->ops_swapped_p].bit_not_p;\n+      else if (info->ops[1 - info->ops_swapped_p].bit_not_p)\n \t{\n \t  gimple *stmt2 = SSA_NAME_DEF_STMT (gimple_assign_rhs2 (stmt));\n \t  if (!has_single_use (gimple_assign_rhs1 (stmt2)))"}, {"sha": "72dea0a92a01ebe985ec8e9a3df9753092b0d78e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/127ef36981ebdfbe3be0f8df710090642a2a4abe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/127ef36981ebdfbe3be0f8df710090642a2a4abe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=127ef36981ebdfbe3be0f8df710090642a2a4abe", "patch": "@@ -1,3 +1,9 @@\n+2017-11-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/82929\n+\t* gcc.dg/pr82929.c: New test.\n+\t* g++.dg/opt/pr82929.C: New test.\n+\n 2017-11-10  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* lib/target-supports.exp (check_effective_target_arm_soft_ok):"}, {"sha": "572f4914815866e1bed93b0de1cbba1a5662e860", "filename": "gcc/testsuite/g++.dg/opt/pr82929.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/127ef36981ebdfbe3be0f8df710090642a2a4abe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr82929.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/127ef36981ebdfbe3be0f8df710090642a2a4abe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr82929.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr82929.C?ref=127ef36981ebdfbe3be0f8df710090642a2a4abe", "patch": "@@ -0,0 +1,30 @@\n+// PR tree-optimization/82929\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+template <int _Nw> struct A {\n+  long _M_w[_Nw];\n+  void m_fn1(A p1) {\n+    for (int a = 0;; a++)\n+      _M_w[a] &= p1._M_w[a];\n+  }\n+  void m_fn2() {\n+    for (int b = 0; b < _Nw; b++)\n+      _M_w[b] = ~_M_w[b];\n+  }\n+};\n+template <int _Nb> struct C : A<_Nb / (8 * 8)> {\n+  void operator&=(C p1) { this->m_fn1(p1); }\n+  C m_fn3() {\n+    this->m_fn2();\n+    return *this;\n+  }\n+  C operator~() { return C(*this).m_fn3(); }\n+};\n+struct B {\n+  C<192> Value;\n+};\n+void fn1(C<192> &p1) {\n+  B c;\n+  p1 &= ~c.Value;\n+}"}, {"sha": "afe9394ab318251611fc657d8f9ac33a88ffeaef", "filename": "gcc/testsuite/gcc.dg/pr82929.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/127ef36981ebdfbe3be0f8df710090642a2a4abe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82929.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/127ef36981ebdfbe3be0f8df710090642a2a4abe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82929.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82929.c?ref=127ef36981ebdfbe3be0f8df710090642a2a4abe", "patch": "@@ -0,0 +1,18 @@\n+/* PR tree-optimization/82929 */\n+/* { dg-do compile { target store_merge } } */\n+/* { dg-options \"-O2 -fdump-tree-store-merging\" } */\n+\n+void\n+foo (short *p, short *q, short *r)\n+{\n+  short a = q[0];\n+  short b = q[1];\n+  short c = ~a;\n+  short d = r[0];\n+  short e = r[1];\n+  short f = ~b;\n+  p[0] = c & d;\n+  p[1] = e & f;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Merging successful\" 1 \"store-merging\" } } */"}]}