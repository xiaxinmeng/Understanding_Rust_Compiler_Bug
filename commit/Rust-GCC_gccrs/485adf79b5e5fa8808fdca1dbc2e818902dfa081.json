{"sha": "485adf79b5e5fa8808fdca1dbc2e818902dfa081", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg1YWRmNzliNWU1ZmE4ODA4ZmRjYTFkYmMyZTgxODkwMmRmYTA4MQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-26T06:34:05Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-26T06:34:05Z"}, "message": "libgfortran.h (show_variables): Remove prototype.\n\n\t* libgfortran.h (show_variables): Remove prototype.\n\t* runtime/environ.c (print_spaces, var_source, show_integer,\n\tshow_boolean, show_sep, show_string): Remove functions.\n\t* runtime/main.c (init): Remove dead code.\n\nFrom-SVN: r227208", "tree": {"sha": "d242e6400f2d65398e119397a3c0d103eb96f8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d242e6400f2d65398e119397a3c0d103eb96f8b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/485adf79b5e5fa8808fdca1dbc2e818902dfa081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485adf79b5e5fa8808fdca1dbc2e818902dfa081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/485adf79b5e5fa8808fdca1dbc2e818902dfa081", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485adf79b5e5fa8808fdca1dbc2e818902dfa081/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "354016403304928441c3f4c2a1009a108a1b6b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354016403304928441c3f4c2a1009a108a1b6b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/354016403304928441c3f4c2a1009a108a1b6b60"}], "stats": {"total": 326, "additions": 74, "deletions": 252}, "files": [{"sha": "e3ab51f893e1a0671947698879e94595db560885", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485adf79b5e5fa8808fdca1dbc2e818902dfa081/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485adf79b5e5fa8808fdca1dbc2e818902dfa081/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=485adf79b5e5fa8808fdca1dbc2e818902dfa081", "patch": "@@ -1,3 +1,10 @@\n+2015-08-26  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* libgfortran.h (show_variables): Remove prototype.\n+\t* runtime/environ.c (print_spaces, var_source, show_integer,\n+\tshow_boolean, show_sep, show_string): Remove functions.\n+\t* runtime/main.c (init): Remove dead code.\n+\n 2015-08-25  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* io/unit.c (get_internal_unit): Make default sign mode unspecified."}, {"sha": "553cef15b997978d8a0ee63bc854c6b295c0545a", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485adf79b5e5fa8808fdca1dbc2e818902dfa081/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485adf79b5e5fa8808fdca1dbc2e818902dfa081/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=485adf79b5e5fa8808fdca1dbc2e818902dfa081", "patch": "@@ -793,9 +793,6 @@ internal_proto(xrealloc);\n extern void init_variables (void);\n internal_proto(init_variables);\n \n-extern void show_variables (void);\n-internal_proto(show_variables);\n-\n unit_convert get_unformatted_convert (int);\n internal_proto(get_unformatted_convert);\n "}, {"sha": "fa5a84218ffb7fb0c10c7a56ea243d8d4f74e390", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 67, "deletions": 240, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485adf79b5e5fa8808fdca1dbc2e818902dfa081/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485adf79b5e5fa8808fdca1dbc2e818902dfa081/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=485adf79b5e5fa8808fdca1dbc2e818902dfa081", "patch": "@@ -33,32 +33,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \n \n-/* Environment scanner.  Examine the environment for controlling minor\n- * aspects of the program's execution.  Our philosophy here that the\n- * environment should not prevent the program from running, so an\n- * environment variable with a messed-up value will be interpreted in\n- * the default way.\n- *\n- * Most of the environment is checked early in the startup sequence,\n- * but other variables are checked during execution of the user's\n- * program. */\n-\n-options_t options;\n-\n-\n-typedef struct variable\n-{\n-  const char *name;\n-  int value, *var;\n-  void (*init) (struct variable *);\n-  void (*show) (struct variable *);\n-  const char *desc;\n-  int bad;\n-}\n-variable;\n-\n-static void init_unformatted (variable *);\n-\n+/* Implementation of secure_getenv() for targets where it is not\n+   provided. */\n \n #ifdef FALLBACK_SECURE_GETENV\n char *\n@@ -72,43 +48,27 @@ secure_getenv (const char *name)\n #endif\n \n \n-/* print_spaces()-- Print a particular number of spaces.  */\n \n-static void\n-print_spaces (int n)\n-{\n-  char buffer[80];\n-  int i;\n-\n-  if (n <= 0)\n-    return;\n+/* Examine the environment for controlling aspects of the program's\n+   execution.  Our philosophy here that the environment should not prevent\n+   the program from running, so any invalid value will be ignored.  */\n \n-  for (i = 0; i < n; i++)\n-    buffer[i] = ' ';\n-\n-  buffer[i] = '\\0';\n-\n-  estr_write (buffer);\n-}\n \n+options_t options;\n \n-/* var_source()-- Return a string that describes where the value of a\n- * variable comes from */\n-\n-static const char *\n-var_source (variable * v)\n+typedef struct variable\n {\n-  if (getenv (v->name) == NULL)\n-    return \"Default\";\n-\n-  if (v->bad)\n-    return \"Bad    \";\n-\n-  return \"Set    \";\n+  const char *name;\n+  int default_value;\n+  int *var;           \n+  void (*init) (struct variable *);\n }\n+variable;\n+\n+static void init_unformatted (variable *);\n \n \n-/* init_integer()-- Initialize an integer environment variable.  */\n+/* Initialize an integer environment variable.  */\n \n static void\n init_integer (variable * v)\n@@ -117,26 +77,17 @@ init_integer (variable * v)\n \n   p = getenv (v->name);\n   if (p == NULL)\n-    goto set_default;\n+    return;\n \n   for (q = p; *q; q++)\n     if (!isdigit (*q) && (p != q || *q != '-'))\n-      {\n-\tv->bad = 1;\n-\tgoto set_default;\n-      }\n+      return;\n \n   *v->var = atoi (p);\n-  return;\n-\n- set_default:\n-  *v->var = v->value;\n-  return;\n }\n \n \n-/* init_unsigned_integer()-- Initialize an integer environment variable\n-   which has to be positive.  */\n+/* Initialize an integer environment variable which has to be positive.  */\n \n static void\n init_unsigned_integer (variable * v)\n@@ -145,35 +96,18 @@ init_unsigned_integer (variable * v)\n \n   p = getenv (v->name);\n   if (p == NULL)\n-    goto set_default;\n+    return;\n \n   for (q = p; *q; q++)\n     if (!isdigit (*q))\n-      {\n-\tv->bad = 1;\n-\tgoto set_default;\n-      }\n+      return;\n \n   *v->var = atoi (p);\n-  return;\n-\n- set_default:\n-  *v->var = v->value;\n-  return;\n }\n \n \n-/* show_integer()-- Show an integer environment variable */\n-\n-static void\n-show_integer (variable * v)\n-{\n-  st_printf (\"%s  %d\\n\", var_source (v), *v->var);\n-}\n-\n-\n-/* init_boolean()-- Initialize a boolean environment variable.  We\n- * only look at the first letter of the variable. */\n+/* Initialize a boolean environment variable. We only look at the first\n+   letter of the value. */\n \n static void\n init_boolean (variable * v)\n@@ -182,36 +116,17 @@ init_boolean (variable * v)\n \n   p = getenv (v->name);\n   if (p == NULL)\n-    goto set_default;\n+    return;\n \n   if (*p == '1' || *p == 'Y' || *p == 'y')\n-    {\n-      *v->var = 1;\n-      return;\n-    }\n-\n-  if (*p == '0' || *p == 'N' || *p == 'n')\n-    {\n-      *v->var = 0;\n-      return;\n-    }\n-\n-  v->bad = 1;\n-\n-set_default:\n-  *v->var = v->value;\n-  return;\n+    *v->var = 1;\n+  else if (*p == '0' || *p == 'N' || *p == 'n')\n+    *v->var = 0;\n }\n \n \n-/* show_boolean()-- Show a boolean environment variable */\n-\n-static void\n-show_boolean (variable * v)\n-{\n-  st_printf (\"%s  %s\\n\", var_source (v), *v->var ? \"Yes\" : \"No\");\n-}\n-\n+/* Initialize a list output separator.  It may contain any number of spaces\n+   and at most one comma.  */\n \n static void\n init_sep (variable * v)\n@@ -223,7 +138,6 @@ init_sep (variable * v)\n   if (p == NULL)\n     goto set_default;\n \n-  v->bad = 1;\n   options.separator = p;\n   options.separator_len = strlen (p);\n \n@@ -248,7 +162,6 @@ init_sep (variable * v)\n \tgoto set_default;\n     }\n \n-  v->bad = 0;\n   return;\n \n set_default:\n@@ -257,151 +170,67 @@ init_sep (variable * v)\n }\n \n \n-static void\n-show_sep (variable * v)\n-{\n-  st_printf (\"%s  \\\"%s\\\"\\n\", var_source (v), options.separator);\n-}\n+static variable variable_table[] = {\n \n+  /* Unit number that will be preconnected to standard input */\n+  { \"GFORTRAN_STDIN_UNIT\", GFC_STDIN_UNIT_NUMBER, &options.stdin_unit,\n+    init_integer },\n \n-static void\n-init_string (variable * v __attribute__ ((unused)))\n-{\n-}\n+  /* Unit number that will be preconnected to standard output */\n+  { \"GFORTRAN_STDOUT_UNIT\", GFC_STDOUT_UNIT_NUMBER, &options.stdout_unit,\n+    init_integer },\n \n-static void\n-show_string (variable * v)\n-{\n-  const char *p;\n+  /* Unit number that will be preconnected to standard error */\n+  { \"GFORTRAN_STDERR_UNIT\", GFC_STDERR_UNIT_NUMBER, &options.stderr_unit,\n+    init_integer },\n \n-  p = getenv (v->name);\n-  if (p == NULL)\n-    p = \"\";\n+  /* If TRUE, all output will be unbuffered */\n+  { \"GFORTRAN_UNBUFFERED_ALL\", 0, &options.all_unbuffered, init_boolean },\n \n-  estr_write (var_source (v));\n-  estr_write (\"  \\\"\");\n-  estr_write (p);\n-  estr_write (\"\\\"\\n\");\n-}\n+  /* If TRUE, output to preconnected units will be unbuffered */\n+  { \"GFORTRAN_UNBUFFERED_PRECONNECTED\", 0, &options.unbuffered_preconnected,\n+    init_boolean },\n \n+  /* Whether to print filename and line number on runtime error */\n+  { \"GFORTRAN_SHOW_LOCUS\", 1, &options.locus, init_boolean },\n \n-static variable variable_table[] = {\n-  {\"GFORTRAN_STDIN_UNIT\", GFC_STDIN_UNIT_NUMBER, &options.stdin_unit,\n-   init_integer, show_integer,\n-   \"Unit number that will be preconnected to standard input\\n\"\n-   \"(No preconnection if negative)\", 0},\n-\n-  {\"GFORTRAN_STDOUT_UNIT\", GFC_STDOUT_UNIT_NUMBER, &options.stdout_unit,\n-   init_integer, show_integer,\n-   \"Unit number that will be preconnected to standard output\\n\"\n-   \"(No preconnection if negative)\", 0},\n-\n-  {\"GFORTRAN_STDERR_UNIT\", GFC_STDERR_UNIT_NUMBER, &options.stderr_unit,\n-   init_integer, show_integer,\n-   \"Unit number that will be preconnected to standard error\\n\"\n-   \"(No preconnection if negative)\", 0},\n-\n-  {\"TMPDIR\", 0, NULL, init_string, show_string,\n-   \"Directory for scratch files.\", 0},\n-\n-  {\"GFORTRAN_UNBUFFERED_ALL\", 0, &options.all_unbuffered, init_boolean,\n-   show_boolean,\n-   \"If TRUE, all output is unbuffered.  This will slow down large writes \"\n-   \"but can be\\nuseful for forcing data to be displayed immediately.\", 0},\n-\n-  {\"GFORTRAN_UNBUFFERED_PRECONNECTED\", 0, &options.unbuffered_preconnected,\n-   init_boolean, show_boolean,\n-   \"If TRUE, output to preconnected units is unbuffered.\", 0},\n-\n-  {\"GFORTRAN_SHOW_LOCUS\", 1, &options.locus, init_boolean, show_boolean,\n-   \"If TRUE, print filename and line number where runtime errors happen.\", 0},\n-\n-  {\"GFORTRAN_OPTIONAL_PLUS\", 0, &options.optional_plus, init_boolean, show_boolean,\n-   \"Print optional plus signs in numbers where permitted.  Default FALSE.\", 0},\n-\n-  {\"GFORTRAN_DEFAULT_RECL\", DEFAULT_RECL, &options.default_recl,\n-   init_unsigned_integer, show_integer,\n-   \"Default maximum record length for sequential files.  Most useful for\\n\"\n-   \"adjusting line length of preconnected units.  Default \"\n-   stringize (DEFAULT_RECL), 0},\n-\n-  {\"GFORTRAN_LIST_SEPARATOR\", 0, NULL, init_sep, show_sep,\n-   \"Separator to use when writing list output.  May contain any number of \"\n-   \"spaces\\nand at most one comma.  Default is a single space.\", 0},\n-\n-  /* GFORTRAN_CONVERT_UNIT - Set the default data conversion for\n-   unformatted I/O.  */\n-  {\"GFORTRAN_CONVERT_UNIT\", 0, 0, init_unformatted, show_string,\n-   \"Set format for unformatted files\", 0},\n-\n-  {\"GFORTRAN_ERROR_BACKTRACE\", -1, &options.backtrace,\n-    init_boolean, show_boolean,\n-    \"Print out a backtrace (if possible) on runtime error\", -1},\n-\n-  {NULL, 0, NULL, NULL, NULL, NULL, 0}\n+  /* Print optional plus signs in numbers where permitted */\n+  { \"GFORTRAN_OPTIONAL_PLUS\", 0, &options.optional_plus, init_boolean },\n+\n+  /* Default maximum record length for sequential files */\n+  { \"GFORTRAN_DEFAULT_RECL\", DEFAULT_RECL, &options.default_recl,\n+    init_unsigned_integer },\n+\n+  /* Separator to use when writing list output */\n+  { \"GFORTRAN_LIST_SEPARATOR\", 0, NULL, init_sep },\n+\n+  /* Set the default data conversion for unformatted I/O */\n+  { \"GFORTRAN_CONVERT_UNIT\", 0, 0, init_unformatted },\n+\n+  /* Print out a backtrace if possible on runtime error */\n+  { \"GFORTRAN_ERROR_BACKTRACE\", -1, &options.backtrace, init_boolean },\n+\n+  { NULL, 0, NULL, NULL }\n };\n \n \n-/* init_variables()-- Initialize most runtime variables from\n+/* Initialize most runtime variables from\n  * environment variables. */\n \n void\n init_variables (void)\n {\n   variable *v;\n \n-  for (v = variable_table; v->name; v++)\n-    v->init (v);\n-}\n-\n-\n-void\n-show_variables (void)\n-{\n-  variable *v;\n-  int n;\n-\n-  /* TODO: print version number.  */\n-  estr_write (\"GNU Fortran runtime library version \"\n-\t     \"UNKNOWN\" \"\\n\\n\");\n-\n-  estr_write (\"Environment variables:\\n\");\n-  estr_write (\"----------------------\\n\");\n-\n   for (v = variable_table; v->name; v++)\n     {\n-      n = estr_write (v->name);\n-      print_spaces (25 - n);\n-\n-      if (v->show == show_integer)\n-\testr_write (\"Integer \");\n-      else if (v->show == show_boolean)\n-\testr_write (\"Boolean \");\n-      else\n-\testr_write (\"String  \");\n-\n-      v->show (v);\n-      estr_write (v->desc);\n-      estr_write (\"\\n\\n\");\n+      if (v->var)\n+\t*v->var = v->default_value;\n+      v->init (v);\n     }\n-\n-  /* System error codes */\n-\n-  estr_write (\"\\nRuntime error codes:\");\n-  estr_write (\"\\n--------------------\\n\");\n-\n-  for (n = LIBERROR_FIRST + 1; n < LIBERROR_LAST; n++)\n-    if (n < 0 || n > 9)\n-      st_printf (\"%d  %s\\n\", n, translate_error (n));\n-    else\n-      st_printf (\" %d  %s\\n\", n, translate_error (n));\n-\n-  estr_write (\"\\nCommand line arguments:\\n\");\n-  estr_write (\"  --help               Print this list\\n\");\n-\n-  exit (0);\n }\n \n+\n /* This is the handling of the GFORTRAN_CONVERT_UNITS environment variable.\n    It is called from environ.c to parse this variable, and from\n    open.c to determine if the user specified a default for an\n@@ -509,7 +338,6 @@ match_word (const char *word, int tok)\n   else\n     res = ILLEGAL;\n   return res;\n-\n }\n \n /* Match an integer and store its value in unit_num.  This only works\n@@ -523,7 +351,6 @@ match_integer (void)\n   while (isdigit (*p))\n     unit_num = unit_num * 10 + (*p++ - '0');\n   return INTEGER;\n-\n }\n \n /* This reads the next token from the GFORTRAN_CONVERT_UNITS variable."}, {"sha": "07e31d20acd1b603b2fb3a63207563a63bd81f15", "filename": "libgfortran/runtime/main.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485adf79b5e5fa8808fdca1dbc2e818902dfa081/libgfortran%2Fruntime%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485adf79b5e5fa8808fdca1dbc2e818902dfa081/libgfortran%2Fruntime%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmain.c?ref=485adf79b5e5fa8808fdca1dbc2e818902dfa081", "patch": "@@ -120,15 +120,6 @@ init (void)\n \n   init_compile_options ();\n \n-#ifdef DEBUG\n-  /* Check for special command lines.  */\n-\n-  if (argc > 1 && strcmp (argv[1], \"--help\") == 0)\n-    show_variables ();\n-\n-  /* if (argc > 1 && strcmp(argv[1], \"--resume\") == 0) resume();  */\n-#endif\n-\n   random_seed_i4 (NULL, NULL, NULL);\n }\n "}]}