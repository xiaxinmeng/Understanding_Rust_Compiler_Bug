{"sha": "a19eb9d236caf919b2a41445a72c30cffe12a432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE5ZWI5ZDIzNmNhZjkxOWIyYTQxNDQ1YTcyYzMwY2ZmZTEyYTQzMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-03T12:06:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-03T12:06:02Z"}, "message": "re PR tree-optimization/42438 (Fix for PR38819 is too conservative)\n\n2010-01-03  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/42438\n\t* tree-ssa-pre.c (struct bb_bitmap_sets): Add\n\tcontains_may_not_return_call flag.\n\t(BB_MAY_NOTRETURN): New.\n\t(valid_in_sets): Trapping nary operations are not valid\n\tin blocks that may not return.\n\t(insert_into_preds_of_block): Remove check for trapping\n\texpressions.\n\t(compute_avail): Compute also BB_MAY_NOTRETURN.\n\n\t* gcc.dg/tree-ssa/ssa-pre-27.c: New testcase.\n\nFrom-SVN: r155584", "tree": {"sha": "8f11d3b8b2484e1c9007163fc1ed652b69f33061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f11d3b8b2484e1c9007163fc1ed652b69f33061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a19eb9d236caf919b2a41445a72c30cffe12a432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19eb9d236caf919b2a41445a72c30cffe12a432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a19eb9d236caf919b2a41445a72c30cffe12a432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a19eb9d236caf919b2a41445a72c30cffe12a432/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c41b7b1364693d8c96c79fba2212109e77135dee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41b7b1364693d8c96c79fba2212109e77135dee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c41b7b1364693d8c96c79fba2212109e77135dee"}], "stats": {"total": 89, "additions": 78, "deletions": 11}, "files": [{"sha": "8065b245164239ddf0d70d48ab4f6a021b4ef25a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19eb9d236caf919b2a41445a72c30cffe12a432/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19eb9d236caf919b2a41445a72c30cffe12a432/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a19eb9d236caf919b2a41445a72c30cffe12a432", "patch": "@@ -1,3 +1,15 @@\n+2010-01-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42438\n+\t* tree-ssa-pre.c (struct bb_bitmap_sets): Add\n+\tcontains_may_not_return_call flag.\n+\t(BB_MAY_NOTRETURN): New.\n+\t(valid_in_sets): Trapping nary operations are not valid\n+\tin blocks that may not return.\n+\t(insert_into_preds_of_block): Remove check for trapping\n+\texpressions.\n+\t(compute_avail): Compute also BB_MAY_NOTRETURN.\n+\n 2010-01-03  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/invoke.texi: Add 2010 to copyright years."}, {"sha": "609589ca072ddd2cedb8f8c757d76551237067c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19eb9d236caf919b2a41445a72c30cffe12a432/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19eb9d236caf919b2a41445a72c30cffe12a432/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a19eb9d236caf919b2a41445a72c30cffe12a432", "patch": "@@ -1,3 +1,8 @@\n+2010-01-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42438\n+\t* gcc.dg/tree-ssa/ssa-pre-27.c: New testcase.\n+\n 2010-01-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR testsuite/41651"}, {"sha": "1d60a30132076262bf4d0d923938bd114eb9d740", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-27.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19eb9d236caf919b2a41445a72c30cffe12a432/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19eb9d236caf919b2a41445a72c30cffe12a432/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-27.c?ref=a19eb9d236caf919b2a41445a72c30cffe12a432", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-pre\" } */\n+\n+int foo (int i, int j, int b)\n+{\n+  int res = 0;\n+  if (b)\n+    res = i/j;\n+  /* We should insert the possibly trapping i/j.  */\n+  res += i/j;\n+  return res;\n+}\n+\n+extern void bar (void);\n+int foo2 (int i, int j, int b)\n+{\n+  int res = 0;\n+  if (b)\n+    res = i/j;\n+  /* But we fail so here because of the possibly not returning\n+     call in the same basic-block.  */\n+  res += i/j;\n+  bar ();\n+  return res;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"# prephitmp\" 1 \"pre\" } } */\n+/* { dg-final { scan-tree-dump-times \"# prephitmp\" 2 \"pre\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "7d9b9bf32d0bb31130f3cb31a0fcde3483e73bfa", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a19eb9d236caf919b2a41445a72c30cffe12a432/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a19eb9d236caf919b2a41445a72c30cffe12a432/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=a19eb9d236caf919b2a41445a72c30cffe12a432", "patch": "@@ -382,11 +382,14 @@ typedef struct bb_bitmap_sets\n   bitmap expr_dies;\n \n   /* True if we have visited this block during ANTIC calculation.  */\n-  unsigned int visited:1;\n+  unsigned int visited : 1;\n \n   /* True we have deferred processing this block during ANTIC\n      calculation until its successor is processed.  */\n   unsigned int deferred : 1;\n+\n+  /* True when the block contains a call that might not return.  */\n+  unsigned int contains_may_not_return_call : 1;\n } *bb_value_sets_t;\n \n #define EXP_GEN(BB)\t((bb_value_sets_t) ((BB)->aux))->exp_gen\n@@ -399,6 +402,7 @@ typedef struct bb_bitmap_sets\n #define EXPR_DIES(BB)\t((bb_value_sets_t) ((BB)->aux))->expr_dies\n #define BB_VISITED(BB)\t((bb_value_sets_t) ((BB)->aux))->visited\n #define BB_DEFERRED(BB) ((bb_value_sets_t) ((BB)->aux))->deferred\n+#define BB_MAY_NOTRETURN(BB) ((bb_value_sets_t) ((BB)->aux))->contains_may_not_return_call\n \n \n /* Basic block list in postorder.  */\n@@ -2032,6 +2036,13 @@ valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, pre_expr expr,\n \t\t  return false;\n \t      }\n \t  }\n+\t/* If the NARY may trap make sure the block does not contain\n+\t   a possible exit point.\n+\t   ???  This is overly conservative if we translate AVAIL_OUT\n+\t   as the available expression might be after the exit point.  */\n+\tif (BB_MAY_NOTRETURN (block)\n+\t    && vn_nary_may_trap (nary))\n+\t  return false;\n \treturn true;\n       }\n       break;\n@@ -2469,6 +2480,7 @@ compute_antic (void)\n \n       BB_VISITED (block) = 0;\n       BB_DEFERRED (block) = 0;\n+\n       /* While we are here, give empty ANTIC_IN sets to each block.  */\n       ANTIC_IN (block) = bitmap_set_new ();\n       PA_IN (block) = bitmap_set_new ();\n@@ -3187,16 +3199,6 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n \t}\n     }\n \n-  /* Make sure we are not inserting trapping expressions.  */\n-  FOR_EACH_EDGE (pred, ei, block->preds)\n-    {\n-      bprime = pred->src;\n-      eprime = avail[bprime->index];\n-      if (eprime->kind == NARY\n-\t  && vn_nary_may_trap (PRE_EXPR_NARY (eprime)))\n-\treturn false;\n-    }\n-\n   /* Make the necessary insertions.  */\n   FOR_EACH_EDGE (pred, ei, block->preds)\n     {\n@@ -3804,6 +3806,8 @@ compute_avail (void)\n       for (gsi = gsi_start_phis (block); !gsi_end_p (gsi); gsi_next (&gsi))\n \tmake_values_for_phi (gsi_stmt (gsi), block);\n \n+      BB_MAY_NOTRETURN (block) = 0;\n+\n       /* Now compute value numbers and populate value sets with all\n \t the expressions computed in BLOCK.  */\n       for (gsi = gsi_start_bb (block); !gsi_end_p (gsi); gsi_next (&gsi))\n@@ -3814,6 +3818,23 @@ compute_avail (void)\n \t  stmt = gsi_stmt (gsi);\n \t  gimple_set_uid (stmt, stmt_uid++);\n \n+\t  /* Cache whether the basic-block has any non-visible side-effect\n+\t     or control flow.\n+\t     If this isn't a call or it is the last stmt in the\n+\t     basic-block then the CFG represents things correctly.  */\n+\t  if (is_gimple_call (stmt)\n+\t      && !stmt_ends_bb_p (stmt))\n+\t    {\n+\t      /* Non-looping const functions always return normally.\n+\t\t Otherwise the call might not return or have side-effects\n+\t\t that forbids hoisting possibly trapping expressions\n+\t\t before it.  */\n+\t      int flags = gimple_call_flags (stmt);\n+\t      if (!(flags & ECF_CONST)\n+\t\t  || (flags & ECF_LOOPING_CONST_OR_PURE))\n+\t\tBB_MAY_NOTRETURN (block) = 1;\n+\t    }\n+\n \t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_DEF)\n \t    {\n \t      pre_expr e = get_or_alloc_expr_for_name (op);"}]}