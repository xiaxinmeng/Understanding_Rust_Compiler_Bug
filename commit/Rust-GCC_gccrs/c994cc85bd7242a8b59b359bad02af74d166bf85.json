{"sha": "c994cc85bd7242a8b59b359bad02af74d166bf85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk5NGNjODViZDcyNDJhOGI1OWIzNTliYWQwMmFmNzRkMTY2YmY4NQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-12T22:57:57Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-12T22:57:57Z"}, "message": "In libobjc/: 2010-10-12 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-10-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * encoding.c: Tidied up comments.\n        (objc_skip_variable_name): New static inline function.\n        (objc_sizeof_type): Use objc_skip_variable_name instead of copying\n        the same code over and over.\n        (objc_alignof_type): Same.\n        (objc_aligned_size): Same.\n        (objc_promoted_size): Same.\n        (objc_skip_typespec): Same.\n        (objc_layout_structure_next_member): Same.\n        (objc_skip_offset): Skip a '-' before the digits (if any).  Fixed\n        historical bug where objc_skip_offset would skip one byte even if\n        there is no offset: check that the first offset digit is actually\n        a digit before skipping it.\n        (objc_skip_type_qualifiers): Mark as inline.\n        (objc_skip_typespec): Mark as inline.\n\nFrom-SVN: r165403", "tree": {"sha": "3e208be438976b1fb9fae659a436788a990e70cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e208be438976b1fb9fae659a436788a990e70cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c994cc85bd7242a8b59b359bad02af74d166bf85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c994cc85bd7242a8b59b359bad02af74d166bf85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c994cc85bd7242a8b59b359bad02af74d166bf85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c994cc85bd7242a8b59b359bad02af74d166bf85/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98d30e4fb5d73b248be75946e90ec2e73b397268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d30e4fb5d73b248be75946e90ec2e73b397268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d30e4fb5d73b248be75946e90ec2e73b397268"}], "stats": {"total": 193, "additions": 83, "deletions": 110}, "files": [{"sha": "a7910f7e5d4d500bc7a78160a9c7909e6ef5ee5d", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c994cc85bd7242a8b59b359bad02af74d166bf85/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c994cc85bd7242a8b59b359bad02af74d166bf85/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=c994cc85bd7242a8b59b359bad02af74d166bf85", "patch": "@@ -1,3 +1,21 @@\n+2010-10-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* encoding.c: Tidied up comments.\n+\t(objc_skip_variable_name): New static inline function.\n+\t(objc_sizeof_type): Use objc_skip_variable_name instead of copying\n+\tthe same code over and over.\n+\t(objc_alignof_type): Same.\n+\t(objc_aligned_size): Same.\n+\t(objc_promoted_size): Same.\n+\t(objc_skip_typespec): Same.\n+\t(objc_layout_structure_next_member): Same.\n+\t(objc_skip_offset): Skip a '-' before the digits (if any).  Fixed\n+\thistorical bug where objc_skip_offset would skip one byte even if\n+\tthere is no offset: check that the first offset digit is actually\n+\ta digit before skipping it.\n+\t(objc_skip_type_qualifiers): Mark as inline.\n+\t(objc_skip_typespec): Mark as inline.\t\n+\t\n 2010-10-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* Makefile.in (C_SOURCE_FILES): Added methods.c."}, {"sha": "e36e4649412246d4f5a2154bb0f318606b00d03b", "filename": "libobjc/encoding.c", "status": "modified", "additions": 65, "deletions": 110, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c994cc85bd7242a8b59b359bad02af74d166bf85/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c994cc85bd7242a8b59b359bad02af74d166bf85/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=c994cc85bd7242a8b59b359bad02af74d166bf85", "patch": "@@ -28,8 +28,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* FIXME: This file has no business including tm.h.  */\n \n /* FIXME: This file contains functions that will abort the entire\n-   program if they fail.  Is that really needed ?\n-*/\n+   program if they fail.  Is that really needed ?  */\n \n #include \"objc-private/common.h\"\n #include \"objc-private/error.h\"\n@@ -139,22 +138,34 @@ static int __attribute__ ((__unused__)) not_target_flags = 0;\n #define darwin_rs6000_special_round_type_align(S,C,S2) \\\n   rs6000_special_round_type_align(S,C,S2)\n \n-/*\n-  return the size of an object specified by type\n-*/\n \n-int\n-objc_sizeof_type (const char *type)\n+/* Skip a variable name, enclosed in quotes (\").  */\n+static inline\n+const char *\n+objc_skip_variable_name (const char *type)\n {\n-  /* Skip the variable name if any */\n+  /* Skip the variable name if any.  */\n   if (*type == '\"')\n     {\n       /* FIXME: How do we know we won't read beyond the end of the\n \t string.  Here and in the rest of the file!  */\n-      for (type++; *type++ != '\"';)\n-\t/* do nothing */;\n+      /* Skip '\"'.  */\n+      type++;\n+      /* Skip to the next '\"'.  */\n+      while (*type != '\"')\n+\ttype++;\n+      /* Skip '\"'.  */\n+      type++;\n     }\n \n+  return type;\n+}\n+\n+int\n+objc_sizeof_type (const char *type)\n+{\n+  type = objc_skip_variable_name (type);\n+\n   switch (*type) {\n   case _C_BOOL:\n     return sizeof (_Bool);\n@@ -258,7 +269,8 @@ objc_sizeof_type (const char *type)\n \n   case _C_BFLD:\n     {\n-      /* The new encoding of bitfields is: b 'position' 'type' 'size' */\n+      /* The GNU encoding of bitfields is: b 'position' 'type'\n+\t 'size'.  */\n       int position, size;\n       int startByte, endByte;\n \n@@ -363,20 +375,11 @@ objc_sizeof_type (const char *type)\n   }\n }\n \n-\n-/*\n-  Return the alignment of an object specified by type\n-*/\n-\n int\n objc_alignof_type (const char *type)\n {\n-  /* Skip the variable name if any */\n-  if (*type == '\"')\n-    {\n-      for (type++; *type++ != '\"';)\n-\t/* do nothing */;\n-    }\n+  type = objc_skip_variable_name (type);\n+\n   switch (*type) {\n   case _C_BOOL:\n     return __alignof__ (_Bool);\n@@ -562,56 +565,31 @@ objc_alignof_type (const char *type)\n   }\n }\n \n-/*\n-  The aligned size if the size rounded up to the nearest alignment.\n-*/\n-\n int\n objc_aligned_size (const char *type)\n {\n   int size, align;\n \n-  /* Skip the variable name */\n-  if (*type == '\"')\n-    {\n-      for (type++; *type++ != '\"';)\n-\t/* do nothing */;\n-    }\n-\n+  type = objc_skip_variable_name (type);\n   size = objc_sizeof_type (type);\n   align = objc_alignof_type (type);\n \n   return ROUND (size, align);\n }\n \n-/*\n-  The size rounded up to the nearest integral of the wordsize, taken\n-  to be the size of a void *.\n-*/\n-\n int\n objc_promoted_size (const char *type)\n {\n   int size, wordsize;\n \n-  /* Skip the variable name */\n-  if (*type == '\"')\n-    {\n-      for (type++; *type++ != '\"';)\n-\t/* do nothing */;\n-    }\n-\n+  type = objc_skip_variable_name (type);\n   size = objc_sizeof_type (type);\n   wordsize = sizeof (void *);\n \n   return ROUND (size, wordsize);\n }\n \n-/*\n-  Skip type qualifiers.  These may eventually precede typespecs\n-  occurring in method prototype encodings.\n-*/\n-\n+inline\n const char *\n objc_skip_type_qualifiers (const char *type)\n {\n@@ -629,22 +607,11 @@ objc_skip_type_qualifiers (const char *type)\n   return type;\n }\n \n-\n-/*\n-  Skip one typespec element.  If the typespec is prepended by type\n-  qualifiers, these are skipped as well.\n-*/\n-\n+inline\n const char *\n objc_skip_typespec (const char *type)\n {\n-  /* Skip the variable name if any */\n-  if (*type == '\"')\n-    {\n-      for (type++; *type++ != '\"';)\n-\t/* do nothing */;\n-    }\n-\n+  type = objc_skip_variable_name (type);\n   type = objc_skip_type_qualifiers (type);\n \n   switch (*type) {\n@@ -728,7 +695,8 @@ objc_skip_typespec (const char *type)\n       }\n \n   case _C_BFLD:\n-    /* The new encoding of bitfields is: b 'position' 'type' 'size' */\n+    /* The GNU encoding of bitfields is: b 'position' 'type'\n+       'size'.  */\n     while (isdigit ((unsigned char)*++type))\n       ;\t/* skip position */\n     while (isdigit ((unsigned char)*++type))\n@@ -770,25 +738,29 @@ objc_skip_typespec (const char *type)\n   }\n }\n \n-/*\n-  Skip an offset as part of a method encoding.  This is prepended by a\n-  '+' if the argument is passed in registers.\n-\n-  FIXME: The compiler never generates '+'.\n-*/\n+inline\n const char *\n objc_skip_offset (const char *type)\n {\n+  /* The offset is prepended by a '+' if the argument is passed in\n+     registers.  PS: The compiler stopped generating this '+' in\n+     version 3.4.  */\n   if (*type == '+')\n     type++;\n-  while (isdigit ((unsigned char) *++type))\n-    ;\n+\n+  /* Some people claim that on some platforms, where the stack grows\n+     backwards, the compiler generates negative offsets (??).  Skip a\n+     '-' for such a negative offset.  */\n+  if (*type == '-')\n+    type++;\n+\n+  /* Skip the digits that represent the offset.  */\n+  while (isdigit ((unsigned char) *type))\n+    type++;\n+\n   return type;\n }\n \n-/*\n-  Skip an argument specification of a method encoding.\n-*/\n const char *\n objc_skip_argspec (const char *type)\n {\n@@ -832,12 +804,9 @@ method_get_number_of_arguments (struct objc_method *mth)\n   return method_getNumberOfArguments (mth);\n }\n \n-/*\n-  Return the size of the argument block needed on the stack to invoke\n-  the method MTH.  This may be zero, if all arguments are passed in\n-  registers.\n-*/\n-\n+/* Return the size of the argument block needed on the stack to invoke\n+   the method MTH.  This may be zero, if all arguments are passed in\n+   registers.  */\n int\n method_get_sizeof_arguments (struct objc_method *mth)\n {\n@@ -884,12 +853,10 @@ method_get_next_argument (arglist_t argframe, const char **type)\n     return argframe->arg_ptr + atoi (t);\n }\n \n-/*\n-  Return a pointer to the value of the first argument of the method\n-  described in M with the given argumentframe ARGFRAME.  The type\n-  is returned in TYPE.  type must be passed to successive calls of\n-  method_get_next_argument.\n-*/\n+/* Return a pointer to the value of the first argument of the method\n+   described in M with the given argumentframe ARGFRAME.  The type\n+   is returned in TYPE.  type must be passed to successive calls of\n+   method_get_next_argument.  */\n char *\n method_get_first_argument (struct objc_method *m,\n \t\t\t   arglist_t argframe,\n@@ -899,12 +866,9 @@ method_get_first_argument (struct objc_method *m,\n   return method_get_next_argument (argframe, type);\n }\n \n-/*\n-   Return a pointer to the ARGth argument of the method\n+/* Return a pointer to the ARGth argument of the method\n    M from the frame ARGFRAME.  The type of the argument\n-   is returned in the value-result argument TYPE\n-*/\n-\n+   is returned in the value-result argument TYPE.  */\n char *\n method_get_nth_argument (struct objc_method *m,\n \t\t\t arglist_t argframe, int arg,\n@@ -936,21 +900,20 @@ objc_get_type_qualifiers (const char *type)\n   while (flag)\n     switch (*type++)\n       {\n-      case _C_CONST:\tres |= _F_CONST; break;\n-      case _C_IN:\tres |= _F_IN; break;\n-      case _C_INOUT:\tres |= _F_INOUT; break;\n-      case _C_OUT:\tres |= _F_OUT; break;\n-      case _C_BYCOPY:\tres |= _F_BYCOPY; break;\n-      case _C_BYREF:  res |= _F_BYREF; break;\n-      case _C_ONEWAY:\tres |= _F_ONEWAY; break;\n+      case _C_CONST:       res |= _F_CONST; break;\n+      case _C_IN:          res |= _F_IN; break;\n+      case _C_INOUT:       res |= _F_INOUT; break;\n+      case _C_OUT:         res |= _F_OUT; break;\n+      case _C_BYCOPY:      res |= _F_BYCOPY; break;\n+      case _C_BYREF:       res |= _F_BYREF; break;\n+      case _C_ONEWAY:      res |= _F_ONEWAY; break;\n       case _C_GCINVISIBLE: res |= _F_GCINVISIBLE; break;\n       default: flag = NO;\n     }\n \n   return res;\n }\n \n-\n /* The following three functions can be used to determine how a\n    structure is laid out by the compiler. For example:\n \n@@ -972,7 +935,7 @@ objc_get_type_qualifiers (const char *type)\n   functions to compute the size and alignment of structures. The\n   previous method of computing the size and alignment of a structure\n   was not working on some architectures, particulary on AIX, and in\n-  the presence of bitfields inside the structure. */\n+  the presence of bitfields inside the structure.  */\n void\n objc_layout_structure (const char *type,\n \t\t       struct objc_struct_layout *layout)\n@@ -1006,7 +969,6 @@ objc_layout_structure (const char *type,\n   layout->record_align = MAX (layout->record_align, STRUCTURE_SIZE_BOUNDARY);\n }\n \n-\n BOOL\n objc_layout_structure_next_member (struct objc_struct_layout *layout)\n {\n@@ -1048,12 +1010,7 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n     return NO;\n \n   /* Skip the variable name if any */\n-  if (*layout->type == '\"')\n-    {\n-      for (layout->type++; *layout->type++ != '\"';)\n-        /* do nothing */;\n-    }\n-\n+  layout->type = objc_skip_variable_name (layout->type);\n   type = objc_skip_type_qualifiers (layout->type);\n \n   if (*type != _C_BFLD)\n@@ -1139,7 +1096,6 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n   return YES;\n }\n \n-\n void objc_layout_finish_structure (struct objc_struct_layout *layout,\n                                    unsigned int *size,\n                                    unsigned int *align)\n@@ -1177,7 +1133,6 @@ void objc_layout_finish_structure (struct objc_struct_layout *layout,\n     *align = layout->record_align / BITS_PER_UNIT;\n }\n \n-\n void objc_layout_structure_get_info (struct objc_struct_layout *layout,\n                                      unsigned int *offset,\n                                      unsigned int *align,"}]}