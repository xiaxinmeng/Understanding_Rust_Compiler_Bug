{"sha": "7c59dc5dd818d8658902070cab03c57d331b4185", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M1OWRjNWRkODE4ZDg2NTg5MDIwNzBjYWIwM2M1N2QzMzFiNDE4NQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-02-28T17:09:44Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-02-28T17:09:44Z"}, "message": "try to fix NT trampolines\n\nFrom-SVN: r11360", "tree": {"sha": "027eba1ba2823e8d08c72e3ef3742c1913dfa499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/027eba1ba2823e8d08c72e3ef3742c1913dfa499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c59dc5dd818d8658902070cab03c57d331b4185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c59dc5dd818d8658902070cab03c57d331b4185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c59dc5dd818d8658902070cab03c57d331b4185", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c59dc5dd818d8658902070cab03c57d331b4185/comments", "author": null, "committer": null, "parents": [{"sha": "375490e0a596633eb84479a8d81192bec71fcfb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375490e0a596633eb84479a8d81192bec71fcfb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/375490e0a596633eb84479a8d81192bec71fcfb2"}], "stats": {"total": 89, "additions": 41, "deletions": 48}, "files": [{"sha": "20c72d2edaa8712655c2838f50771d25c82911f1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 41, "deletions": 48, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c59dc5dd818d8658902070cab03c57d331b4185/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c59dc5dd818d8658902070cab03c57d331b4185/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7c59dc5dd818d8658902070cab03c57d331b4185", "patch": "@@ -4035,6 +4035,7 @@ rs6000_trampoline_template (file)\n {\n   char *sc = reg_names[STATIC_CHAIN_REGNUM];\n   char *r0 = reg_names[0];\n+  char *r2 = reg_names[2];\n \n   switch (DEFAULT_ABI)\n     {\n@@ -4087,23 +4088,26 @@ rs6000_trampoline_template (file)\n \n   /* NT function pointers point to a two word area (real address, TOC)\n      which unfortunately does not include a static chain field.  So we\n-     need to have a 2 word area followed by the code to load up the\n-     static chain.  */\n+     use the function field to point to ..LTRAMP1 and the toc field\n+     to point to the whole table.  */\n     case ABI_NT:\n-      if (STATIC_CHAIN_REGNUM == 0 || !TARGET_NEW_MNEMONICS || TARGET_64BIT)\n+      if (STATIC_CHAIN_REGNUM == 0\n+\t  || STATIC_CHAIN_REGNUM == 2\n+\t  || TARGET_64BIT\n+\t  || !TARGET_NEW_MNEMONICS)\n \tabort ();\n \n-      fprintf (file, \"\\t.ualong 0,0\\n\");\t\t/* offset  0 */\n-      fprintf (file, \"\\tmflr %s\\n\", r0);\t\t/* offset  8 */\n-      fprintf (file, \"\\tbl .LTRAMP1\\n\");\t\t/* offset 12 */\n-      fprintf (file, \"\\t.ualong 0,0\\n\");\t\t/* offset 16 */\n-      fprintf (file, \".LTRAMP1:\\n\");\n-      fprintf (file, \"\\tmflr %s\\n\", sc);\t\t/* offset 28 */\n-      fprintf (file, \"\\tmtlr %s\\n\", r0);\t\t/* offset 32 */\n-      fprintf (file, \"\\tlwz %s,0(%s)\\n\", r0, sc);\t/* offset 36 */\n-      fprintf (file, \"\\tlwz %s,4(%s)\\n\", sc, sc);\t/* offset 40 */\n-      fprintf (file, \"\\tmtctr %s\\n\", r0);\t\t/* offset 44 */\n-      fprintf (file, \"\\tbctr\\n\");\t\t\t/* offset 48 */\n+      fprintf (file, \"\\t.ualong 0\\n\");\t\t\t/* offset  0 */\n+      fprintf (file, \"\\t.ualong 0\\n\");\t\t\t/* offset  4 */\n+      fprintf (file, \"\\t.ualong 0\\n\");\t\t\t/* offset  8 */\n+      fprintf (file, \"\\t.ualong 0\\n\");\t\t\t/* offset 12 */\n+      fprintf (file, \"\\t.ualong 0\\n\");\t\t\t/* offset 16 */\n+      fprintf (file, \"..LTRAMP1:\\n\");\t\t\t/* offset 20 */\n+      fprintf (file, \"\\tlwz %s,8(%s)\\n\", r0, r2);\t/* offset 24 */\n+      fprintf (file, \"\\tlwz %s,12(%s)\\n\", sc, r2);\t/* offset 28 */\n+      fprintf (file, \"\\tmtctr %s\\n\", r0);\t\t/* offset 32 */\n+      fprintf (file, \"\\tlwz %s,16(%s)\\n\", r2, r2);\t/* offset 36 */\n+      fprintf (file, \"\\tbctr\\n\");\t\t\t/* offset 40 */\n       break;\n     }\n \n@@ -4132,7 +4136,7 @@ rs6000_trampoline_size ()\n       break;\n \n     case ABI_NT:\n-      ret = 52;\n+      ret = 20;\n       break;\n     }\n \n@@ -4157,22 +4161,15 @@ rs6000_initialize_trampoline (addr, fnaddr, cxt)\n     default:\n       abort ();\n \n+#define MEM_PLUS(addr,offset) gen_rtx (MEM, pmode, memory_address (pmode, plus_constant (addr, offset)))\n+\n     /* Under AIX, just build the 3 word function descriptor */\n     case ABI_AIX:\n-      emit_move_insn (gen_rtx (MEM, pmode,\n-\t\t\t       memory_address (pmode, (addr))),\n-\t\t      gen_rtx (MEM, pmode,\n-\t\t\t       memory_address (pmode, (fnaddr))));\n-      emit_move_insn (gen_rtx (MEM, pmode,\n-\t\t\t       memory_address (pmode,\n-\t\t\t\t\t       plus_constant ((addr), 4))),\n-\t\t      gen_rtx (MEM, pmode,\n-\t\t\t       memory_address (pmode,\n-\t\t\t\t\t       plus_constant ((fnaddr), 4))));\n-      emit_move_insn (gen_rtx (MEM, pmode,\n-\t\t\t       memory_address (pmode,\n-\t\t\t\t\t       plus_constant ((addr), 8))),\n-\t\t      force_reg (pmode, (cxt)));\n+      emit_move_insn (gen_rtx (MEM, pmode, memory_address (pmode, addr)),\n+\t\t      gen_rtx (MEM, pmode, memory_address (pmode, fnaddr)));\n+\n+      emit_move_insn (MEM_PLUS (addr, 4), MEM_PLUS (fnaddr, 4));\n+      emit_move_insn (MEM_PLUS (addr, 8), force_reg (pmode, cxt));\n       break;\n \n     /* Under V.4/eabi, update the two words after the bl to have the real\n@@ -4182,31 +4179,27 @@ rs6000_initialize_trampoline (addr, fnaddr, cxt)\n       reg = gen_reg_rtx (pmode);\n \n       emit_move_insn (reg, fnaddr);\n-      emit_move_insn (gen_rtx (MEM, pmode, plus_constant (addr, 8)), reg);\n-      emit_move_insn (gen_rtx (MEM, pmode,\n-\t\t\t       plus_constant (addr, (TARGET_64BIT ? 16 : 12))),\n-\t\t      cxt);\n+      emit_move_insn (MEM_PLUS (addr, 8), reg);\n+      emit_move_insn (MEM_PLUS (addr, (TARGET_64BIT ? 16 : 12)), cxt);\n \n       rs6000_sync_trampoline (addr);\n       break;\n \n-    /* Under NT, update the first 2 words to look like a normal descriptor, and\n-       then fill in the fields with the function address and static chain after\n-       the bl instruction.  */\n+    /* Under NT, update the first word to point to the ..LTRAMP1 header,\n+       second word will point to the whole trampoline, third-fifth words\n+       will then have the real address, static chain, and toc value.  */\n     case ABI_NT:\n-      reg  = gen_reg_rtx (pmode);\n+      addr = force_reg (pmode, addr);\n+      reg = gen_reg_rtx (pmode);\n       reg2 = gen_reg_rtx (pmode);\n-      reg3 = gen_reg_rtx (pmode);\n-\n-      emit_move_insn (gen_rtx (MEM, pmode, plus_constant (addr, 4)),\n-\t\t      gen_rtx (REG, pmode, 2));\n-      emit_move_insn (reg, fnaddr);\n-      emit_move_insn (reg2, gen_rtx (MEM, pmode, reg));\n-      emit_move_insn (reg3, plus_constant (addr, 8));\n-      emit_move_insn (gen_rtx (MEM, pmode, plus_constant (addr, 16)), reg);\n-      emit_move_insn (gen_rtx (MEM, pmode, addr), reg3);\n-      emit_move_insn (gen_rtx (MEM, pmode, plus_constant (addr, 20)), cxt);\n-      rs6000_sync_trampoline (addr);\n+      emit_move_insn (reg, gen_rtx (SYMBOL_REF, pmode, \"..LTRAMP1\"));\n+      emit_move_insn (reg2, fnaddr);\n+      reg3 = force_reg (pmode, cxt);\n+      emit_move_insn (MEM_PLUS (addr, 4), addr);\n+      emit_move_insn (gen_rtx (MEM, pmode, addr), reg);\n+      emit_move_insn (MEM_PLUS (addr, 8), reg2);\n+      emit_move_insn (MEM_PLUS (addr, 12), reg3);\n+      emit_move_insn (MEM_PLUS (addr, 16), gen_rtx (REG, pmode, 2));\n       break;\n     }\n "}]}