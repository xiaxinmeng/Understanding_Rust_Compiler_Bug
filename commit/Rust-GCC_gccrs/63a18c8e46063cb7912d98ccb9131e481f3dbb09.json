{"sha": "63a18c8e46063cb7912d98ccb9131e481f3dbb09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNhMThjOGU0NjA2M2NiNzkxMmQ5OGNjYjkxMzFlNDgxZjNkYmIwOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-01-28T04:31:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-01-28T04:31:39Z"}, "message": "re PR c++/59823 (conversion operator to const X& causes copy-construction of temporary)\n\n\tPR c++/59823\n\tCore DR 1138\n\t* call.c (reference_binding): Pass LOOKUP_NO_TEMP_BIND for\n\tlist-initialization.  A conversion to rvalue ref that involves\n\tan lvalue-rvalue conversion is bad.\n\t(convert_like_real): Give helpful error message.\n\nFrom-SVN: r207170", "tree": {"sha": "12a5917a842eff94ff7c70361836f0795759d066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12a5917a842eff94ff7c70361836f0795759d066"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63a18c8e46063cb7912d98ccb9131e481f3dbb09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a18c8e46063cb7912d98ccb9131e481f3dbb09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63a18c8e46063cb7912d98ccb9131e481f3dbb09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63a18c8e46063cb7912d98ccb9131e481f3dbb09/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b89cc12b9962ea4b8a01d51e506348e3933106c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89cc12b9962ea4b8a01d51e506348e3933106c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b89cc12b9962ea4b8a01d51e506348e3933106c6"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "66e5cb5e065ad527050ce27a804a2e441d60c2b0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a18c8e46063cb7912d98ccb9131e481f3dbb09/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a18c8e46063cb7912d98ccb9131e481f3dbb09/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=63a18c8e46063cb7912d98ccb9131e481f3dbb09", "patch": "@@ -1,5 +1,12 @@\n 2014-01-27  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/59823\n+\tCore DR 1138\n+\t* call.c (reference_binding): Pass LOOKUP_NO_TEMP_BIND for\n+\tlist-initialization.  A conversion to rvalue ref that involves\n+\tan lvalue-rvalue conversion is bad.\n+\t(convert_like_real): Give helpful error message.\n+\n \tPR c++/54652\n \t* decl.c (duplicate_decls): Always use oldtype for TYPE_DECL.\n "}, {"sha": "f6566cff1a25d525f1d583f0917c1be6c29173d0", "filename": "gcc/cp/call.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a18c8e46063cb7912d98ccb9131e481f3dbb09/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a18c8e46063cb7912d98ccb9131e481f3dbb09/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=63a18c8e46063cb7912d98ccb9131e481f3dbb09", "patch": "@@ -1484,7 +1484,7 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n \t direct-list-initialized, depending on the kind of initialization\n \t for the reference, and the reference is bound to that temporary. */\n       conv = implicit_conversion (to, from, expr, c_cast_p,\n-\t\t\t\t  flags, complain);\n+\t\t\t\t  flags|LOOKUP_NO_TEMP_BIND, complain);\n     skip:;\n     }\n \n@@ -1637,9 +1637,9 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n \n   /* [dcl.init.ref]\n \n-     Otherwise, the reference shall be to a non-volatile const type.\n-\n-     Under C++0x, [8.5.3/5 dcl.init.ref] it may also be an rvalue reference */\n+     Otherwise, the reference shall be an lvalue reference to a\n+     non-volatile const type, or the reference shall be an rvalue\n+     reference.  */\n   if (!CP_TYPE_CONST_NON_VOLATILE_P (to) && !TYPE_REF_IS_RVALUE (rto))\n     return NULL;\n \n@@ -1677,7 +1677,16 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags,\n   /* This reference binding, unlike those above, requires the\n      creation of a temporary.  */\n   conv->need_temporary_p = true;\n-  conv->rvaluedness_matches_p = TYPE_REF_IS_RVALUE (rto);\n+  if (TYPE_REF_IS_RVALUE (rto))\n+    {\n+      conv->rvaluedness_matches_p = 1;\n+      /* In the second case, if the reference is an rvalue reference and\n+\t the second standard conversion sequence of the user-defined\n+\t conversion sequence includes an lvalue-to-rvalue conversion, the\n+\t program is ill-formed.  */\n+      if (conv->user_conv_p && next_conversion (conv)->kind == ck_rvalue)\n+\tconv->bad_p = 1;\n+    }\n \n   return conv;\n }\n@@ -5881,7 +5890,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n       && convs->kind != ck_list\n       && convs->kind != ck_ambig\n       && (convs->kind != ck_ref_bind\n-\t  || convs->user_conv_p)\n+\t  || (convs->user_conv_p && next_conversion (convs)->bad_p))\n       && (convs->kind != ck_rvalue\n \t  || SCALAR_TYPE_P (totype))\n       && convs->kind != ck_base)\n@@ -6173,7 +6182,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \tif (convs->bad_p && !next_conversion (convs)->bad_p)\n \t  {\n \t    gcc_assert (TYPE_REF_IS_RVALUE (ref_type)\n-\t\t\t&& real_lvalue_p (expr));\n+\t\t\t&& (real_lvalue_p (expr)\n+\t\t\t    || next_conversion(convs)->kind == ck_rvalue));\n \n \t    error_at (loc, \"cannot bind %qT lvalue to %qT\",\n \t\t      TREE_TYPE (expr), totype);"}, {"sha": "e521b35bd0db69cf28ed1a39b2eaf0e75e247e87", "filename": "gcc/testsuite/g++.dg/cpp0x/overload3.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63a18c8e46063cb7912d98ccb9131e481f3dbb09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63a18c8e46063cb7912d98ccb9131e481f3dbb09/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload3.C?ref=63a18c8e46063cb7912d98ccb9131e481f3dbb09", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/59823\n+// { dg-options \"-std=c++11\" }\n+\n+struct X { };\n+\n+void f(X&&);\n+\n+struct wrap\n+{\n+  operator const X&() const;\n+};\n+\n+int main()\n+{\n+  wrap w;\n+  f(w);\t\t\t\t// { dg-error \"lvalue\" }\n+}"}]}