{"sha": "904a2ae4e30147cebb7eedad48d76f8bda9e3080", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA0YTJhZTRlMzAxNDdjZWJiN2VlZGFkNDhkNzZmOGJkYTllMzA4MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:05:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:05:53Z"}, "message": "[multiple changes]\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Derive_Subprogram): Implement rule in RM 6.1.1\n\t(10-15): if derived type T with progenitors is abstract,\n\tand primitive P of this type inherits non-trivial classwide\n\tpreconditions from both a parent operation and from an interface\n\toperation, then the inherited operation is abstract if the parent\n\toperation is not null.\n\t* sem_disp.ads, sem_disp.adb: replace function Covers_Some_Interface\n\twith Covered_Interface_Op to yield the actual interface operation\n\tthat is implemented by a given inherited operation.\n\n2017-04-25  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Op_Expon): Relocate left\n\tand right operands after performing the validity checks. Required\n\tbecause validity checks may remove side effects from the operands.\n\n2017-04-25  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_attr.adb (Attribute_Unrestricted_Access):\n\tDo not disable implicit type conversion.  Required to generate\n\tcode that displaces the pointer to reference the secondary\n\tdispatch table.\n\n2017-04-25  Pascal Obry  <obry@adacore.com>\n\n\t* prj-attr.adb, snames.ads-tmpl: Add package Install's\n\tRequired_Artifacts attribute.\n\nFrom-SVN: r247202", "tree": {"sha": "791ab9e1269de781d5e39af9ca89cbbcfb5364fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/791ab9e1269de781d5e39af9ca89cbbcfb5364fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/904a2ae4e30147cebb7eedad48d76f8bda9e3080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/904a2ae4e30147cebb7eedad48d76f8bda9e3080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/904a2ae4e30147cebb7eedad48d76f8bda9e3080", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/904a2ae4e30147cebb7eedad48d76f8bda9e3080/comments", "author": null, "committer": null, "parents": [{"sha": "ac2e1a513eba781682eb963b0e9facf4f1a5ea3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2e1a513eba781682eb963b0e9facf4f1a5ea3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2e1a513eba781682eb963b0e9facf4f1a5ea3e"}], "stats": {"total": 127, "additions": 102, "deletions": 25}, "files": [{"sha": "e1cc3fc8ceb7e6d1018f9ab73c9d64720bc66ea3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=904a2ae4e30147cebb7eedad48d76f8bda9e3080", "patch": "@@ -1,3 +1,33 @@\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Derive_Subprogram): Implement rule in RM 6.1.1\n+\t(10-15): if derived type T with progenitors is abstract,\n+\tand primitive P of this type inherits non-trivial classwide\n+\tpreconditions from both a parent operation and from an interface\n+\toperation, then the inherited operation is abstract if the parent\n+\toperation is not null.\n+\t* sem_disp.ads, sem_disp.adb: replace function Covers_Some_Interface\n+\twith Covered_Interface_Op to yield the actual interface operation\n+\tthat is implemented by a given inherited operation.\n+\n+2017-04-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Expon): Relocate left\n+\tand right operands after performing the validity checks. Required\n+\tbecause validity checks may remove side effects from the operands.\n+\n+2017-04-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_attr.adb (Attribute_Unrestricted_Access):\n+\tDo not disable implicit type conversion.  Required to generate\n+\tcode that displaces the pointer to reference the secondary\n+\tdispatch table.\n+\n+2017-04-25  Pascal Obry  <obry@adacore.com>\n+\n+\t* prj-attr.adb, snames.ads-tmpl: Add package Install's\n+\tRequired_Artifacts attribute.\n+\n 2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.adb (Same_Value): String literals are compile-time"}, {"sha": "ac252cdbf695d8973524dd7526df602efe76260c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=904a2ae4e30147cebb7eedad48d76f8bda9e3080", "patch": "@@ -2114,10 +2114,9 @@ package body Exp_Attr is\n                                      (Etype (Prefix (Ref_Object))));\n                   begin\n                      --  No implicit conversion required if designated types\n-                     --  match, or if we have an unrestricted access.\n+                     --  match.\n \n                      if Obj_DDT /= Btyp_DDT\n-                       and then Id /= Attribute_Unrestricted_Access\n                        and then not (Is_Class_Wide_Type (Obj_DDT)\n                                       and then Etype (Obj_DDT) = Btyp_DDT)\n                      then"}, {"sha": "a6e1785991b5c38bcc007f77d75eb9e180daa741", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=904a2ae4e30147cebb7eedad48d76f8bda9e3080", "patch": "@@ -7619,10 +7619,10 @@ package body Exp_Ch4 is\n       Loc    : constant Source_Ptr := Sloc (N);\n       Typ    : constant Entity_Id  := Etype (N);\n       Rtyp   : constant Entity_Id  := Root_Type (Typ);\n-      Base   : constant Node_Id    := Relocate_Node (Left_Opnd (N));\n-      Bastyp : constant Node_Id    := Etype (Base);\n-      Exp    : constant Node_Id    := Relocate_Node (Right_Opnd (N));\n-      Exptyp : constant Entity_Id  := Etype (Exp);\n+      Base   : Node_Id;\n+      Bastyp : Node_Id;\n+      Exp    : Node_Id;\n+      Exptyp : Entity_Id;\n       Ovflo  : constant Boolean    := Do_Overflow_Check (N);\n       Expv   : Uint;\n       Temp   : Node_Id;\n@@ -7656,7 +7656,7 @@ package body Exp_Ch4 is\n          end if;\n       end Wrap_MA;\n \n-   --  Start of processing for Expand_N_Op\n+   --  Start of processing for Expand_N_Op_Expon\n \n    begin\n       Binary_Op_Validity_Checks (N);\n@@ -7667,6 +7667,15 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n+      --  Relocation of left and right operands must be done after performing\n+      --  the validity checks since the generation of validation checks may\n+      --  remove side effects.\n+\n+      Base   := Relocate_Node (Left_Opnd (N));\n+      Bastyp := Etype (Base);\n+      Exp    := Relocate_Node (Right_Opnd (N));\n+      Exptyp := Etype (Exp);\n+\n       --  If either operand is of a private type, then we have the use of an\n       --  intrinsic operator, and we get rid of the privateness, by using root\n       --  types of underlying types for the actual operation. Otherwise the\n@@ -10765,13 +10774,28 @@ package body Exp_Ch4 is\n \n       if Is_Access_Type (Target_Type) then\n \n+         --  If this type conversion was internally generated by the frontend\n+         --  to displace the pointer to the object to reference an interface\n+         --  type and the original node was an 'Unrestricted_Access reference\n+         --  then skip applying accessibility checks (because, according to the\n+         --  GNAT Reference Manual, this attribute is similar to 'Access except\n+         --  that all accessibility and aliased view checks are omitted).\n+\n+         if not Comes_From_Source (N)\n+           and then Is_Interface (Designated_Type (Target_Type))\n+           and then Nkind (Original_Node (N)) = N_Attribute_Reference\n+           and then\n+             Attribute_Name (Original_Node (N)) = Name_Unrestricted_Access\n+         then\n+            null;\n+\n          --  Apply an accessibility check when the conversion operand is an\n          --  access parameter (or a renaming thereof), unless conversion was\n          --  expanded from an Unchecked_ or Unrestricted_Access attribute.\n          --  Note that other checks may still need to be applied below (such\n          --  as tagged type checks).\n \n-         if Is_Entity_Name (Operand)\n+         elsif Is_Entity_Name (Operand)\n            and then Has_Extra_Accessibility (Entity (Operand))\n            and then Ekind (Etype (Operand)) = E_Anonymous_Access_Type\n            and then (Nkind (Original_Node (N)) /= N_Attribute_Reference"}, {"sha": "767fdb9a3846a852a35d5794909d4425a49bedf7", "filename": "gcc/ada/prj-attr.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fprj-attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fprj-attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-attr.adb?ref=904a2ae4e30147cebb7eedad48d76f8bda9e3080", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -363,6 +363,7 @@ package body Prj.Attr is\n    \"SVproject_subdir#\" &\n    \"SVactive#\" &\n    \"LAartifacts#\" &\n+   \"LArequired_artifacts#\" &\n    \"SVmode#\" &\n    \"SVinstall_name#\" &\n "}, {"sha": "38c6b20108aaba5edb933fefd4564c3b6f1761de", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=904a2ae4e30147cebb7eedad48d76f8bda9e3080", "patch": "@@ -15079,7 +15079,7 @@ package body Sem_Ch3 is\n \n       elsif Ada_Version >= Ada_2005\n          and then Is_Dispatching_Operation (Parent_Subp)\n-         and then Covers_Some_Interface (Parent_Subp)\n+         and then Present (Covered_Interface_Op (Parent_Subp))\n       then\n          Set_Derived_Name;\n \n@@ -15315,6 +15315,29 @@ package body Sem_Ch3 is\n \n       New_Overloaded_Entity (New_Subp, Derived_Type);\n \n+      --  Implement rule in 6.1.1 (15) : if subprogram inherits non-conforming\n+      --  classwide preconditions and the derived type is abstract, the\n+      --  derived operation is abstract as well if parent subprogram is not\n+      --  abstract or null.\n+\n+      if Is_Abstract_Type (Derived_Type)\n+        and then Has_Non_Trivial_Precondition (Parent_Subp)\n+        and then Present (Interfaces (Derived_Type))\n+      then\n+         Set_Is_Dispatching_Operation (New_Subp);\n+\n+         declare\n+            Iface_Prim : constant Entity_Id := Covered_Interface_Op (New_Subp);\n+\n+         begin\n+            if Present (Iface_Prim)\n+              and then Has_Non_Trivial_Precondition (Iface_Prim)\n+            then\n+               Set_Is_Abstract_Subprogram (New_Subp);\n+            end if;\n+         end;\n+      end if;\n+\n       --  Check for case of a derived subprogram for the instantiation of a\n       --  formal derived tagged type, if so mark the subprogram as dispatching\n       --  and inherit the dispatching attributes of the actual subprogram. The"}, {"sha": "a2eb9ce5908de6763850680e52f9d752aea7300b", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=904a2ae4e30147cebb7eedad48d76f8bda9e3080", "patch": "@@ -109,11 +109,11 @@ package body Sem_Disp is\n       Append_Unique_Elmt (New_Op, List);\n    end Add_Dispatching_Operation;\n \n-   ---------------------------\n-   -- Covers_Some_Interface --\n-   ---------------------------\n+   --------------------------\n+   -- Covered_Interface_Op --\n+   --------------------------\n \n-   function Covers_Some_Interface (Prim : Entity_Id) return Boolean is\n+   function Covered_Interface_Op (Prim : Entity_Id) return Entity_Id is\n       Tagged_Type : constant Entity_Id := Find_Dispatching_Type (Prim);\n       Elmt        : Elmt_Id;\n       E           : Entity_Id;\n@@ -139,14 +139,14 @@ package body Sem_Disp is\n                if Present (Interface_Alias (E))\n                  and then Alias (E) = Prim\n                then\n-                  return True;\n+                  return Interface_Alias (E);\n                end if;\n \n                Next_Elmt (Elmt);\n             end loop;\n \n          --  Otherwise we must collect all the interface primitives and check\n-         --  if the Prim will override some interface primitive.\n+         --  if the Prim overrides (implements) some interface primitive.\n \n          else\n             declare\n@@ -165,11 +165,11 @@ package body Sem_Disp is\n                   while Present (Elmt) loop\n                      Iface_Prim := Node (Elmt);\n \n-                     if Chars (Iface) = Chars (Prim)\n+                     if Chars (Iface_Prim) = Chars (Prim)\n                        and then Is_Interface_Conformant\n                                   (Tagged_Type, Iface_Prim, Prim)\n                      then\n-                        return True;\n+                        return Iface_Prim;\n                      end if;\n \n                      Next_Elmt (Elmt);\n@@ -181,8 +181,8 @@ package body Sem_Disp is\n          end if;\n       end if;\n \n-      return False;\n-   end Covers_Some_Interface;\n+      return Empty;\n+   end Covered_Interface_Op;\n \n    -------------------------------\n    -- Check_Controlling_Formals --"}, {"sha": "7e1709803d07a1d839ac22f16c6d922759ec6922", "filename": "gcc/ada/sem_disp.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fsem_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fsem_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.ads?ref=904a2ae4e30147cebb7eedad48d76f8bda9e3080", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -70,10 +70,9 @@ package Sem_Disp is\n    --  full view because it is always this one which has to be called.\n    --  What is Subp used for???\n \n-   function Covers_Some_Interface (Prim : Entity_Id) return Boolean;\n-   --  Returns true if Prim covers some interface primitive of its associated\n-   --  tagged type. The tagged type of Prim must be frozen when this function\n-   --  is invoked.\n+   function Covered_Interface_Op (Prim : Entity_Id) return Entity_Id;\n+   --  Returns the interface primitive that Prim covers, when its controlling\n+   --  type has progenitors.\n \n    function Find_Controlling_Arg (N : Node_Id) return Node_Id;\n    --  Returns the actual controlling argument if N is dynamically tagged, and"}, {"sha": "fe58505b66ca4771f4af5db313baa2be28e26b40", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/904a2ae4e30147cebb7eedad48d76f8bda9e3080/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=904a2ae4e30147cebb7eedad48d76f8bda9e3080", "patch": "@@ -1403,6 +1403,7 @@ package Snames is\n    Name_Project_Path                       : constant Name_Id := N + $;\n    Name_Project_Subdir                     : constant Name_Id := N + $;\n    Name_Remote                             : constant Name_Id := N + $;\n+   Name_Required_Artifacts                 : constant Name_Id := N + $;\n    Name_Response_File_Format               : constant Name_Id := N + $;\n    Name_Response_File_Switches             : constant Name_Id := N + $;\n    Name_Root_Dir                           : constant Name_Id := N + $;"}]}