{"sha": "2d4f57f838cba245932d687efc3c690fe5a82644", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ0ZjU3ZjgzOGNiYTI0NTkzMmQ2ODdlZmMzYzY5MGZlNWE4MjY0NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-05-19T17:13:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-05-19T17:13:32Z"}, "message": "(operand_subword): Reject cases when BITS_PER_WORD is greater than\nHOST_BITS_PER_INT unless OP is const0_rtx.\n\nFrom-SVN: r4502", "tree": {"sha": "684a91d809cfe316bcde2f35152227d2272cf975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/684a91d809cfe316bcde2f35152227d2272cf975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d4f57f838cba245932d687efc3c690fe5a82644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4f57f838cba245932d687efc3c690fe5a82644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d4f57f838cba245932d687efc3c690fe5a82644", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4f57f838cba245932d687efc3c690fe5a82644/comments", "author": null, "committer": null, "parents": [{"sha": "7b4d5f42d8cb35d0a5a68593e3e3917e004a27d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4d5f42d8cb35d0a5a68593e3e3917e004a27d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4d5f42d8cb35d0a5a68593e3e3917e004a27d7"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "cec8f0ff8bfdcb816b6ebaae42b9de1d34c9a64b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4f57f838cba245932d687efc3c690fe5a82644/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4f57f838cba245932d687efc3c690fe5a82644/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=2d4f57f838cba245932d687efc3c690fe5a82644", "patch": "@@ -1,5 +1,5 @@\n /* Emit RTL for the GNU C-Compiler expander.\n-   Copyright (C) 1987, 1988, 1992 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1992, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -995,15 +995,16 @@ operand_subword (op, i, validate_address, mode)\n      Convert to proper endianness now since these cases need it.\n      At this point, i == 0 means the low-order word.  \n \n-     Note that it must be that BITS_PER_WORD <= HOST_BITS_PER_INT.\n-     This is because if it were greater, it could only have been two\n-     times greater since we do not support making wider constants.  In\n-     that case, it MODE would have already been the proper size and\n-     it would have been handled above.  This means we do not have to\n-     worry about the case where we would be returning a CONST_DOUBLE.  */\n+     We do not want to handle the case when BITS_PER_WORD <= HOST_BITS_PER_INT\n+     in general.  However, if OP is (const_int 0), we can just return\n+     it for any word.  */\n+\n+  if (op == const0_rtx)\n+    return op;\n \n   if (GET_MODE_CLASS (mode) != MODE_INT\n-      || (GET_CODE (op) != CONST_INT && GET_CODE (op) != CONST_DOUBLE))\n+      || (GET_CODE (op) != CONST_INT && GET_CODE (op) != CONST_DOUBLE)\n+      || BITS_PER_WORD > HOST_BITS_PER_INT)\n     return 0;\n \n   if (WORDS_BIG_ENDIAN)"}]}