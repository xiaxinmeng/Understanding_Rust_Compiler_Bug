{"sha": "c9d259cb5ef84b70ba570651bf765eda15cf96c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlkMjU5Y2I1ZWY4NGI3MGJhNTcwNjUxYmY3NjVlZGExNWNmOTZjOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-08-23T05:35:13Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-08-23T05:35:13Z"}, "message": "i386.h (PRINT_OPERAND_PUNCT_VALID_P): Add ';' code.\n\n\t* config/i386/i386.h (PRINT_OPERAND_PUNCT_VALID_P): Add ';' code.\n\t* config/i386/i386.c (print_operand): Handle ';' code.  Output\n\tsemicolon for TARGET_MACHO.\n\t* config/i386/sync.md (*sync_compare_and_swap<mode>): Use '%;' to\n\temit semicolon after 'lock' prefix.\n\t(sync_double_compare_and_swap<mode>): Ditto.\n\t(*sync_double_compare_and_swapdi_pic): Ditto.\n\t(*sync_compare_and_swap_cc<mode>): Ditto.\n\t(sync_double_compare_and_swap_cc<mode>): Ditto.\n\t(*sync_double_compare_and_swap_ccdi_pic): Ditto.\n\t(sync_old_add<mode>): Ditto.\n\t(sync_add<mode>): Ditto.\n\t(sync_sub<mode>): Ditto.\n\t(sync_ior<mode>): Ditto.\n\t(sync_and<mode>): Ditto.\n\t(sync_xor<mode>): Ditto.\n\nFrom-SVN: r127728", "tree": {"sha": "814558fd68b6459098975a7db34c3d8e722b440a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/814558fd68b6459098975a7db34c3d8e722b440a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9d259cb5ef84b70ba570651bf765eda15cf96c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d259cb5ef84b70ba570651bf765eda15cf96c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d259cb5ef84b70ba570651bf765eda15cf96c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d259cb5ef84b70ba570651bf765eda15cf96c8/comments", "author": null, "committer": null, "parents": [{"sha": "f4d8e0d1aa31d97ded8682a20259bdfe46519392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4d8e0d1aa31d97ded8682a20259bdfe46519392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4d8e0d1aa31d97ded8682a20259bdfe46519392"}], "stats": {"total": 124, "additions": 78, "deletions": 46}, "files": [{"sha": "14cb46a37028751dcc847dd9ccaf3060fdb75af5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 29, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d259cb5ef84b70ba570651bf765eda15cf96c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d259cb5ef84b70ba570651bf765eda15cf96c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9d259cb5ef84b70ba570651bf765eda15cf96c8", "patch": "@@ -1,3 +1,22 @@\n+2007-08-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (PRINT_OPERAND_PUNCT_VALID_P): Add ';' code.\n+\t* config/i386/i386.c (print_operand): Handle ';' code.  Output\n+\tsemicolon for TARGET_MACHO.\n+\t* config/i386/sync.md (*sync_compare_and_swap<mode>): Use '%;' to\n+\temit semicolon after 'lock' prefix.\n+\t(sync_double_compare_and_swap<mode>): Ditto.\n+\t(*sync_double_compare_and_swapdi_pic): Ditto.\n+\t(*sync_compare_and_swap_cc<mode>): Ditto.\n+\t(sync_double_compare_and_swap_cc<mode>): Ditto.\n+\t(*sync_double_compare_and_swap_ccdi_pic): Ditto.\n+\t(sync_old_add<mode>): Ditto.\n+\t(sync_add<mode>): Ditto.\n+\t(sync_sub<mode>): Ditto.\n+\t(sync_ior<mode>): Ditto.\n+\t(sync_and<mode>): Ditto.\n+\t(sync_xor<mode>): Ditto.\n+\n 2007-08-22  Chao-ying Fu  <fu@mips.com>\n \n \t* rtl.c (rtx_code_size): Check CONST_FIXED to calcualte correct sizes\n@@ -287,8 +306,8 @@\n \t* c-tree.h (enum c_typespec_keyword): Add cts_fract and cts_accum.\n \t(c_declspecs): Add saturating_p.\n \t* c-decl.c (build_null_declspecs): Initialize saturating_p.\n-\t(declspecs_add_type): Avoid using complex with _Fract, _Accum, or _Sat.\n-\tHandle RID_SAT.\n+\t(declspecs_add_type): Avoid using complex with _Fract, _Accum, or\n+\t_Sat.  Handle RID_SAT.\n \tAvoid using void, bool, char, int, float, double, _Decimal32,\n \t_Decimal64, _Decimal128, and complex with _Sat.\n \tHandle RID_FRACT and RID_ACCUM.\n@@ -584,14 +603,14 @@\n \t'nested_in_vect_loop' case. Change verbosity level.\n \t(vect_analyze_data_ref_access): Handle the 'nested_in_vect_loop' case.\n \tDon't fail on zero step in the outer-loop for loads.\n-\t(vect_analyze_data_refs): Call split_constant_offset to calculate base,\n-\toffset and init relative to the outer-loop.\n+\t(vect_analyze_data_refs): Call split_constant_offset to calculate\n+\tbase, offset and init relative to the outer-loop.\n \n \t* tree-vect-transform.c (vect_create_data_ref_ptr): Replace the unused\n \tBSI function argument with a new function argument - at_loop.\n \tSimplify the condition that determines STEP. Takes additional argument\n-\tINV_P. Support outer-loop vectorization (handle the nested_in_vect_loop\n-\tcase), including zero step in the outer-loop. Call\n+\tINV_P. Support outer-loop vectorization (handle the\n+\tnested_in_vect_loop case), including zero step in the outer-loop. Call\n \tvect_create_addr_base_for_vector_ref with additional argument.\n \t(vect_create_addr_base_for_vector_ref): Takes additional argument LOOP.\n \tUpdated function documentation. Handle the 'nested_in_vect_loop' case.\n@@ -601,12 +620,12 @@\n \tadditional argument. Fix typos. Handle the 'nested_in_vect_loop' case.\n \t(vect_setup_realignment): Takes additional arguments INIT_ADDR and\n \tDR_ALIGNMENT_SUPPORT. Returns another value AT_LOOP. Handle the case\n-\twhen the realignment setup needs to take place inside the loop.  Support\n-\tthe dr_explicit_realign scheme. Allow generating the optimized\n+\twhen the realignment setup needs to take place inside the loop.\n+\tSupport the dr_explicit_realign scheme. Allow generating the optimized\n \trealignment scheme for outer-loop vectorization. Added documentation.\n-\t(vectorizable_load): Support the dr_explicit_realign scheme. Handle the\n-\t'nested_in_vect_loop' case, including loads that are invariant in the\n-\touter-loop and the realignment schemes. Handle the case when the\n+\t(vectorizable_load): Support the dr_explicit_realign scheme. Handle\n+\tthe 'nested_in_vect_loop' case, including loads that are invariant in\n+\tthe outer-loop and the realignment schemes. Handle the case when the\n \trealignment setup needs to take place inside the loop. Call\n \tvect_setup_realignment with additional arguments.  Call\n \tvect_create_data_ref_ptr with additional argument and with loop instead\n@@ -644,9 +663,9 @@\n \t(new_stmt_vec_info): When setting def_type for phis differentiate \n \tloop-header phis from other phis.\n \t(bb_in_loop_p): New function.\n-\t(new_loop_vec_info): Inner-loop phis already have a stmt_vinfo, so just\n-\tupdate their loop_vinfo.  Order of BB traversal now matters - call\n-\tdfs_enumerate_from with bb_in_loop_p.\n+\t(new_loop_vec_info): Inner-loop phis already have a stmt_vinfo, so\n+\tjust update their loop_vinfo.  Order of BB traversal now matters -\n+\tcall dfs_enumerate_from with bb_in_loop_p.\n \t(destroy_loop_vec_info): Takes additional argument to control whether\n \tstmt_vinfo of the loop stmts should be destroyed as well.\n \t(vect_is_simple_reduction): Allow the \"non-reduction\" use of a\n@@ -1105,8 +1124,8 @@\n \t(add_back_forw_dep, delete_back_forw_dep): Ditto.\n \t(debug_ds, sched_insn_is_legitimate_for_speculation_p): Declare\n \tfunctions.\n-\t(SD_LIST_NONE, SD_LIST_HARD_BACK, SD_LIST_SPEC_BACK, SD_LIST_FORW): New\n-\tconstants.\n+\t(SD_LIST_NONE, SD_LIST_HARD_BACK, SD_LIST_SPEC_BACK, SD_LIST_FORW):\n+\tNew constants.\n \t(SD_LIST_RES_BACK, SD_LIST_RES_FORW, SD_LIST_BACK): Ditto.\n \t(sd_list_types_def): New typedef.\n \t(sd_next_list): Declare function.\n@@ -1247,8 +1266,8 @@\n \tFree dependencies at the end of\tscheduling the ebb.\n \n \t* ddg.c (create_ddg_dependence): Update to use new interfaces.\n-\t(build_intra_loop_deps): Ditto.  Remove separate computation of forward\n-\tdependencies.  Free sched-deps dependencies.\n+\t(build_intra_loop_deps): Ditto.  Remove separate computation of\n+\tforward dependencies.  Free sched-deps dependencies.\n \n \t* config/ia64/ia64.c (ia64_dependencies_evaluation_hook): Update\n \tto use new interfaces.\n@@ -2322,13 +2341,14 @@\n 2007-08-04  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR middle-end/32780\n-\t* fold-const.c (fold_binary <case MINUS_EXPR>): Fix the type of operands\n-\tfor the folding of \"A - (A & B)\" into \"~B & A\"; cast them to type.\n+\t* fold-const.c (fold_binary <case MINUS_EXPR>): Fix the type of\n+\toperands for the folding of \"A - (A & B)\" into \"~B & A\"; cast them\n+\tto type.\n \n 2007-08-03  Zdenek Dvorak  <ook@ucw.cz>\n \n-\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Use loops' state\n-\taccessor functions.\n+\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Use loops'\n+\tstate accessor functions.\n \t* cfgloopmanip.c (remove_path, create_preheaders,\n \tforce_single_succ_latches, fix_loop_structure): Ditto.\n \t* tree-ssa-loop-manip.c (rewrite_into_loop_closed_ssa,\n@@ -3211,8 +3231,8 @@\n \n 2007-07-27  Jan Hubicka  <jh@suse.cz>\n \n-\t* config/i386/i386.c (register_move_cost): Remove accidentally comitted\n-\t#if 0 block.\n+\t* config/i386/i386.c (register_move_cost): Remove accidentally\n+\tcomitted #if 0 block.\n \n \t* attribs.c: Include hashtab.h\n \t(attribute_hash): New.\n@@ -4141,7 +4161,8 @@\n \t    Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/PR28690\n-\t* optabs.c (expand_binop): (emit_cmp_and_jump_insns): Allow EQ compares.\n+\t* optabs.c (expand_binop): (emit_cmp_and_jump_insns): Allow\n+\tEQ compares.\n \t* rtlanal.c (commutative_operand_precedence): Prefer both REG_POINTER\n \tand MEM_POINTER operands over REG and MEM operands.\n \t(swap_commutative_operands_p): Change return value to bool.\n@@ -4187,8 +4208,8 @@\n \t(expand_copysign_absneg): If back end provides signbit insn, use it\n \tinstead of bit operations on floating point argument.\n \t* builtins.c (enum insn_code signbit_optab[]): Remove array.\n-\t(expand_builtin_signbit): Check signbit_optab->handlers[].insn_code for\n-\tavailability of signbit insn.\n+\t(expand_builtin_signbit): Check signbit_optab->handlers[].insn_code\n+\tfor availability of signbit insn.\n \n \t* config/i386/i386.md (signbit<mode>2): New insn pattern to implement\n \tsignbitf, signbit and signbitl built-ins as inline x87 intrinsics when\n@@ -4473,8 +4494,8 @@\n \t* pa-protos.h (pa_eh_return_handler_rtx): Declare.\n \t* pa.c (pa_extra_live_on_entry, rp_saved): Declare.\n \t(TARGET_EXTRA_LIVE_ON_ENTRY): Define.\n-\t(pa_output_function_prologue): Use rp_saved and current_function_is_leaf\n-\tto generate .CALLINFO statement.\n+\t(pa_output_function_prologue): Use rp_saved and\n+\tcurrent_function_is_leaf to generate .CALLINFO statement.\n \t(hppa_expand_prologue): Set rp_saved.\n \t(hppa_expand_epilogue): Use rp_saved.\n \t(pa_extra_live_on_entry, pa_eh_return_handler_rtx): New functions."}, {"sha": "851d0a0032f4517c7f46c4962e0f1b4a7b0bcaee", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d259cb5ef84b70ba570651bf765eda15cf96c8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d259cb5ef84b70ba570651bf765eda15cf96c8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c9d259cb5ef84b70ba570651bf765eda15cf96c8", "patch": "@@ -8495,6 +8495,8 @@ get_some_local_dynamic_name (void)\n    X -- don't print any sort of PIC '@' suffix for a symbol.\n    & -- print some in-use local-dynamic symbol name.\n    H -- print a memory address offset by 8; used for sse high-parts\n+   + -- print a branch hint as 'cs' or 'ds' prefix\n+   ; -- print a semicolon (after prefixes due to bug in older gas).\n  */\n \n void\n@@ -8776,6 +8778,15 @@ print_operand (FILE *file, rtx x, int code)\n \t      }\n \t    return;\n \t  }\n+\n+\tcase ';':\n+#if TARGET_MACHO\n+\t  fputs (\" ; \", file);\n+#else\n+\t  fputc (' ', file);\n+#endif\n+\t  return;\n+\n \tdefault:\n \t    output_operand_lossage (\"invalid operand code '%c'\", code);\n \t}"}, {"sha": "471e342d0daa10b6c22a321afba47aeb6c160195", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d259cb5ef84b70ba570651bf765eda15cf96c8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d259cb5ef84b70ba570651bf765eda15cf96c8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c9d259cb5ef84b70ba570651bf765eda15cf96c8", "patch": "@@ -2229,7 +2229,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    print_operand function.  */\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE) \\\n-  ((CODE) == '*' || (CODE) == '+' || (CODE) == '&')\n+  ((CODE) == '*' || (CODE) == '+' || (CODE) == '&' || (CODE) == ';')\n \n #define PRINT_OPERAND(FILE, X, CODE)  \\\n   print_operand ((FILE), (X), (CODE))"}, {"sha": "19295bbaff139e9527ceca67c65240382e1714cf", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d259cb5ef84b70ba570651bf765eda15cf96c8/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d259cb5ef84b70ba570651bf765eda15cf96c8/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=c9d259cb5ef84b70ba570651bf765eda15cf96c8", "patch": "@@ -81,7 +81,7 @@\n \t  UNSPECV_CMPXCHG_1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_CMPXCHG\"\n-  \"lock cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n+  \"lock{%;| } cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n \n (define_insn \"sync_double_compare_and_swap<mode>\"\n   [(set (match_operand:DCASMODE 0 \"register_operand\" \"=A\")\n@@ -95,7 +95,7 @@\n \t  UNSPECV_CMPXCHG_1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock cmpxchg<doublemodesuffix>b\\t%1\")\n+  \"lock{%;| }cmpxchg<doublemodesuffix>b\\t%1\")\n \n ;; Theoretically we'd like to use constraint \"r\" (any reg) for operand\n ;; 3, but that includes ecx.  If operand 3 and 4 are the same (like when\n@@ -118,7 +118,7 @@\n \t  UNSPECV_CMPXCHG_1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_CMPXCHG8B && flag_pic\"\n-  \"xchg{l}\\t%%ebx, %3\\;lock cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n+  \"xchg{l}\\t%%ebx, %3\\;lock{%;| }cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n \n (define_expand \"sync_compare_and_swap_cc<mode>\"\n   [(parallel\n@@ -176,7 +176,7 @@\n \t    [(match_dup 1) (match_dup 2) (match_dup 3)] UNSPECV_CMPXCHG_2)\n \t  (match_dup 2)))]\n   \"TARGET_CMPXCHG\"\n-  \"lock cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n+  \"lock{%;| }cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n \n (define_insn \"sync_double_compare_and_swap_cc<mode>\"\n   [(set (match_operand:DCASMODE 0 \"register_operand\" \"=A\")\n@@ -195,7 +195,7 @@\n \t    UNSPECV_CMPXCHG_2)\n \t  (match_dup 2)))]\n   \"\"\n-  \"lock cmpxchg<doublemodesuffix>b\\t%1\")\n+  \"lock{%;| }cmpxchg<doublemodesuffix>b\\t%1\")\n \n ;; See above for the explanation of using the constraint \"SD\" for\n ;; operand 3.\n@@ -216,7 +216,7 @@\n \t    UNSPECV_CMPXCHG_2)\n \t  (match_dup 2)))]\n   \"!TARGET_64BIT && TARGET_CMPXCHG8B && flag_pic\"\n-  \"xchg{l}\\t%%ebx, %3\\;lock cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n+  \"xchg{l}\\t%%ebx, %3\\;lock{%;| }cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n \n (define_insn \"sync_old_add<mode>\"\n   [(set (match_operand:IMODE 0 \"register_operand\" \"=<modeconstraint>\")\n@@ -227,7 +227,7 @@\n \t\t    (match_operand:IMODE 2 \"register_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_XADD\"\n-  \"lock xadd{<modesuffix>}\\t{%0, %1|%1, %0}\")\n+  \"lock{%;| }xadd{<modesuffix>}\\t{%0, %1|%1, %0}\")\n \n ;; Recall that xchg implicitly sets LOCK#, so adding it again wastes space.\n (define_insn \"sync_lock_test_and_set<mode>\"\n@@ -251,12 +251,12 @@\n   if (TARGET_USE_INCDEC)\n     {\n       if (operands[1] == const1_rtx)\n-\treturn \"lock inc{<modesuffix>}\\t%0\";\n+\treturn \"lock{%;| }inc{<modesuffix>}\\t%0\";\n       if (operands[1] == constm1_rtx)\n-\treturn \"lock dec{<modesuffix>}\\t%0\";\n+\treturn \"lock{%;| }dec{<modesuffix>}\\t%0\";\n     }\n \n-  return \"lock add{<modesuffix>}\\t{%1, %0|%0, %1}\";\n+  return \"lock{%;| }add{<modesuffix>}\\t{%1, %0|%0, %1}\";\n })\n \n (define_insn \"sync_sub<mode>\"\n@@ -271,12 +271,12 @@\n   if (TARGET_USE_INCDEC)\n     {\n       if (operands[1] == const1_rtx)\n-\treturn \"lock dec{<modesuffix>}\\t%0\";\n+\treturn \"lock{%;| }dec{<modesuffix>}\\t%0\";\n       if (operands[1] == constm1_rtx)\n-\treturn \"lock inc{<modesuffix>}\\t%0\";\n+\treturn \"lock{%;| }inc{<modesuffix>}\\t%0\";\n     }\n \n-  return \"lock sub{<modesuffix>}\\t{%1, %0|%0, %1}\";\n+  return \"lock{%;| }sub{<modesuffix>}\\t{%1, %0|%0, %1}\";\n })\n \n (define_insn \"sync_ior<mode>\"\n@@ -287,7 +287,7 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock or{<modesuffix>}\\t{%1, %0|%0, %1}\")\n+  \"lock{%;| }or{<modesuffix>}\\t{%1, %0|%0, %1}\")\n \n (define_insn \"sync_and<mode>\"\n   [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n@@ -297,7 +297,7 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock and{<modesuffix>}\\t{%1, %0|%0, %1}\")\n+  \"lock{%;| }and{<modesuffix>}\\t{%1, %0|%0, %1}\")\n \n (define_insn \"sync_xor<mode>\"\n   [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n@@ -307,4 +307,4 @@\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock xor{<modesuffix>}\\t{%1, %0|%0, %1}\")\n+  \"lock{%;| }xor{<modesuffix>}\\t{%1, %0|%0, %1}\")"}]}