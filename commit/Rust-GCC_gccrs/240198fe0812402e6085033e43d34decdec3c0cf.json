{"sha": "240198fe0812402e6085033e43d34decdec3c0cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwMTk4ZmUwODEyNDAyZTYwODUwMzNlNDNkMzRkZWNkZWMzYzBjZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-27T14:32:10Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-27T14:32:10Z"}, "message": "i386: Implement V2SF shuffles\n\n2020-05-27  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\t* config/i386/mmx.md (mmx_pswapdsf2): Add SSE alternatives.\n\tEnable insn pattern for TARGET_MMX_WITH_SSE.\n\t(*mmx_movshdup): New insn pattern.\n\t(*mmx_movsldup): Ditto.\n\t(*mmx_movss): Ditto.\n\t* config/i386/i386-expand.c (ix86_vectorize_vec_perm_const):\n\tHandle E_V2SFmode.\n\t(expand_vec_perm_movs): Handle E_V2SFmode.\n\t(expand_vec_perm_even_odd): Ditto.\n\t(expand_vec_perm_broadcast_1): Assert that E_V2SFmode\n\tis already handled by standard shuffle patterns.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/i386/vperm-v2sf.c: New test.", "tree": {"sha": "bd3a88260c85a26089921557c8ba1b12af5c45ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd3a88260c85a26089921557c8ba1b12af5c45ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/240198fe0812402e6085033e43d34decdec3c0cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240198fe0812402e6085033e43d34decdec3c0cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240198fe0812402e6085033e43d34decdec3c0cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240198fe0812402e6085033e43d34decdec3c0cf/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c66c692043d680a5efcd9616b94f9629c417038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c66c692043d680a5efcd9616b94f9629c417038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c66c692043d680a5efcd9616b94f9629c417038"}], "stats": {"total": 144, "additions": 124, "deletions": 20}, "files": [{"sha": "96f70ae5aaa32007ede226aa05a2d5975be409ca", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240198fe0812402e6085033e43d34decdec3c0cf/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240198fe0812402e6085033e43d34decdec3c0cf/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=240198fe0812402e6085033e43d34decdec3c0cf", "patch": "@@ -16319,6 +16319,7 @@ expand_vec_perm_movs (struct expand_vec_perm_d *d)\n     return false;\n \n   if (!(TARGET_SSE && vmode == V4SFmode)\n+      && !(TARGET_MMX_WITH_SSE && vmode == V2SFmode)\n       && !(TARGET_SSE2 && vmode == V2DFmode))\n     return false;\n \n@@ -18639,6 +18640,13 @@ expand_vec_perm_even_odd_1 (struct expand_vec_perm_d *d, unsigned odd)\n       /* These are always directly implementable by expand_vec_perm_1.  */\n       gcc_unreachable ();\n \n+    case E_V2SFmode:\n+      gcc_assert (TARGET_MMX_WITH_SSE);\n+      /* We have no suitable instructions.  */\n+      if (d->testing_p)\n+\treturn false;\n+      break;\n+\n     case E_V4HImode:\n       if (d->testing_p)\n \tbreak;\n@@ -18834,8 +18842,9 @@ expand_vec_perm_broadcast_1 (struct expand_vec_perm_d *d)\n       gcc_unreachable ();\n \n     case E_V2DFmode:\n-    case E_V2DImode:\n+    case E_V2SFmode:\n     case E_V4SFmode:\n+    case E_V2DImode:\n     case E_V2SImode:\n     case E_V4SImode:\n       /* These are always implementable using standard shuffle patterns.  */\n@@ -19329,6 +19338,7 @@ ix86_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n       if (d.testing_p && TARGET_SSSE3)\n \treturn true;\n       break;\n+    case E_V2SFmode:\n     case E_V2SImode:\n     case E_V4HImode:\n       if (!TARGET_MMX_WITH_SSE)\n@@ -19367,7 +19377,7 @@ ix86_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n \n       /* Implementable with shufps or pshufd.  */\n       if (d.one_operand_p\n-\t  && (d.vmode == V4SFmode\n+\t  && (d.vmode == V4SFmode || d.vmode == V2SFmode\n \t      || d.vmode == V4SImode || d.vmode == V2SImode))\n \treturn true;\n "}, {"sha": "271c1c2e8332c18924f38598dfeeff0b9e6de051", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 71, "deletions": 18, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240198fe0812402e6085033e43d34decdec3c0cf/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240198fe0812402e6085033e43d34decdec3c0cf/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=240198fe0812402e6085033e43d34decdec3c0cf", "patch": "@@ -938,32 +938,85 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_insn \"mmx_pswapdv2sf2\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y\")\n-\t(vec_select:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"ym\")\n-\t\t\t (parallel [(const_int 1) (const_int 0)])))]\n-  \"TARGET_3DNOW_A\"\n-  \"pswapd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"mode\" \"V2SF\")])\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,Yv\")\n+\t(vec_select:V2SF\n+\t  (match_operand:V2SF 1 \"register_mmxmem_operand\" \"ym,0,Yv\")\n+\t  (parallel [(const_int 1) (const_int 0)])))]\n+  \"TARGET_3DNOW_A || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   pswapd\\t{%1, %0|%0, %1}\n+   shufps\\t{$0xe1, %1, %0|%0, %1, 0xe1}\n+   vshufps\\t{$0xe1, %1, %1, %0|%0, %1, %1, 0xe1}\"\n+  [(set_attr \"isa\" \"*,sse_noavx,avx\")\n+   (set_attr \"mmx_isa\" \"native,*,*\")\n+   (set_attr \"type\" \"mmxcvt,ssemov,ssemov\")\n+   (set_attr \"prefix_extra\" \"1,*,*\")\n+   (set_attr \"mode\" \"V2SF,V4SF,V4SF\")])\n+\n+(define_insn \"*mmx_movshdup\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=v,x\")\n+\t(vec_select:V2SF\n+\t  (match_operand:V2SF 1 \"register_operand\" \"v,0\")\n+\t  (parallel [(const_int 1) (const_int 1)])))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"@\n+   %vmovshdup\\t{%1, %0|%0, %1}\n+   shufps\\t{$0xe5, %0, %0|%0, %0, 0xe5}\"\n+  [(set_attr \"isa\" \"sse3,*\")\n+   (set_attr \"type\" \"sse,sseshuf1\")\n+   (set_attr \"length_immediate\" \"*,1\")\n+   (set_attr \"prefix_rep\" \"1,*\")\n+   (set_attr \"prefix\" \"maybe_vex,orig\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"*mmx_movsldup\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=v,x\")\n+\t(vec_select:V2SF\n+\t  (match_operand:V2SF 1 \"register_operand\" \"v,0\")\n+\t  (parallel [(const_int 0) (const_int 0)])))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"@\n+   %vmovsldup\\t{%1, %0|%0, %1}\n+   shufps\\t{$0xe0, %0, %0|%0, %0, 0xe0}\"\n+  [(set_attr \"isa\" \"sse3,*\")\n+   (set_attr \"type\" \"sse,sseshuf1\")\n+   (set_attr \"length_immediate\" \"*,1\")\n+   (set_attr \"prefix_rep\" \"1,*\")\n+   (set_attr \"prefix\" \"maybe_vex,orig\")\n+   (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"*vec_dupv2sf\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,x,Yv\")\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=y,Yv,x\")\n \t(vec_duplicate:V2SF\n-\t  (match_operand:SF 1 \"register_operand\" \"0,0,Yv\")))]\n+\t  (match_operand:SF 1 \"register_operand\" \"0,Yv,0\")))]\n   \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n   \"@\n    punpckldq\\t%0, %0\n-   shufps\\t{$0xe0, %0, %0|%0, %0, 0xe0}\n-   %vmovsldup\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"isa\" \"*,sse_noavx,sse3\")\n+   %vmovsldup\\t{%1, %0|%0, %1}\n+   shufps\\t{$0xe0, %0, %0|%0, %0, 0xe0}\"\n+  [(set_attr \"isa\" \"*,sse3,sse_noavx\")\n    (set_attr \"mmx_isa\" \"native,*,*\")\n-   (set_attr \"type\" \"mmxcvt,sseshuf1,sse\")\n-   (set_attr \"length_immediate\" \"*,1,*\")\n-   (set_attr \"prefix_rep\" \"*,*,1\")\n-   (set_attr \"prefix\" \"*,orig,maybe_vex\")\n+   (set_attr \"type\" \"mmxcvt,sse,sseshuf1\")\n+   (set_attr \"length_immediate\" \"*,*,1\")\n+   (set_attr \"prefix_rep\" \"*,1,*\")\n+   (set_attr \"prefix\" \"*,maybe_vex,orig\")\n    (set_attr \"mode\" \"DI,V4SF,V4SF\")])\n \n+(define_insn \"*mmx_movss\"\n+  [(set (match_operand:V2SF 0 \"register_operand\"   \"=x,v\")\n+\t(vec_merge:V2SF\n+\t  (match_operand:V2SF 2 \"register_operand\" \" x,v\")\n+\t  (match_operand:V2SF 1 \"register_operand\" \" 0,v\")\n+\t  (const_int 1)))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"@\n+   movss\\t{%2, %0|%0, %2}\n+   vmovss\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"orig,maybe_evex\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"*mmx_concatv2sf\"\n   [(set (match_operand:V2SF 0 \"register_operand\"     \"=y,y\")\n \t(vec_concat:V2SF\n@@ -2015,7 +2068,7 @@\n \t(vec_select:V2SI\n \t  (match_operand:V2SI 1 \"register_mmxmem_operand\" \"ym,Yv\")\n \t  (parallel [(const_int 1) (const_int 0)])))]\n-  \"TARGET_3DNOW_A || TARGET_MMX_WITH_SSE\"\n+  \"TARGET_3DNOW_A\"\n   \"@\n    pswapd\\t{%1, %0|%0, %1}\n    %vpshufd\\t{$0xe1, %1, %0|%0, %1, 0xe1}\";"}, {"sha": "7bf6defb0f137f866ac8c2751aaf4418a4dbe158", "filename": "gcc/testsuite/gcc.target/i386/vperm-v2sf.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/240198fe0812402e6085033e43d34decdec3c0cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2sf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/240198fe0812402e6085033e43d34decdec3c0cf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2sf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvperm-v2sf.c?ref=240198fe0812402e6085033e43d34decdec3c0cf", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"isa-check.h\"\n+#include \"sse-os-support.h\"\n+\n+typedef float S;\n+typedef float V __attribute__((vector_size(8)));\n+typedef int IV __attribute__((vector_size(8)));\n+typedef union { S s[2]; V v; } U;\n+\n+static U i[2], b, c;\n+\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+#define assert(T) ((T) || (__builtin_trap (), 0))\n+\n+#define TEST(E0, E1) \\\n+  b.v = __builtin_shuffle (i[0].v, i[1].v, (IV){E0, E1}); \\\n+  c.s[0] = i[0].s[E0]; \\\n+  c.s[1] = i[0].s[E1]; \\\n+  __asm__(\"\" : : : \"memory\"); \\\n+  assert (memcmp (&b, &c, sizeof(c)) == 0);\n+\n+#include \"vperm-2-2.inc\"\n+\n+int main()\n+{\n+  check_isa ();\n+\n+  if (!sse_os_support ())\n+    exit (0);\n+\n+  i[0].s[0] = 0;\n+  i[0].s[1] = 1;\n+  i[0].s[2] = 2;\n+  i[0].s[3] = 3;\n+\n+  check();\n+  return 0;\n+}"}]}