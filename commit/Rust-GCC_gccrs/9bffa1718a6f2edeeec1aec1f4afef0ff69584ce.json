{"sha": "9bffa1718a6f2edeeec1aec1f4afef0ff69584ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmZmExNzE4YTZmMmVkZWVlYzFhZWMxZjRhZmVmMGZmNjk1ODRjZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-02-18T19:52:16Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-02-18T19:52:16Z"}, "message": "re PR fortran/30400 (ANY not accepted as mask in FORALL)\n\n2007-02-18  Roger Sayle  <roger@eyesopen.com>\n\t    Paul Thomas <pault@gcc.gnu.org>\n\n        PR fortran/30400\n        * match.c (match_forall_iterator): Use gfc_match_expr instead\n\tof gfc_match_variable to match the iterator variable.  Return\n\tMATCH_NO if not a variable.  Remove the reset of the symbol's\n\tflavor in cleanup.\n\n2007-02-18  Roger Sayle  <roger@eyesopen.com>\n\n        * gfortran.dg/forall_10.f90: New test case.\n\nCo-Authored-By: Paul Thomas <pault@gcc.gnu.org>\n\nFrom-SVN: r122102", "tree": {"sha": "3f2fa297f1a33544a955895add48c12f2b3ee9e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f2fa297f1a33544a955895add48c12f2b3ee9e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce/comments", "author": null, "committer": null, "parents": [{"sha": "078a18a42304f0caa644fb42c37b55fc59673d00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078a18a42304f0caa644fb42c37b55fc59673d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/078a18a42304f0caa644fb42c37b55fc59673d00"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "43c10ee7792483c0b9d1de4c6860c6de69e85985", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9bffa1718a6f2edeeec1aec1f4afef0ff69584ce", "patch": "@@ -1,3 +1,12 @@\n+2007-02-18  Roger Sayle  <roger@eyesopen.com>\n+\t    Paul Thomas <pault@gcc.gnu.org>\n+\n+        PR fortran/30400\n+        * match.c (match_forall_iterator): Use gfc_match_expr instead\n+\tof gfc_match_variable to match the iterator variable.  Return\n+\tMATCH_NO if not a variable.  Remove the reset of the symbol's\n+\tflavor in cleanup.\n+\n 2007-02-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/30793"}, {"sha": "bf78911b3f0bbc46cc641149f1498a6e18e078a1", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=9bffa1718a6f2edeeec1aec1f4afef0ff69584ce", "patch": "@@ -3358,7 +3358,10 @@ gfc_free_forall_iterator (gfc_forall_iterator *iter)\n \n /* Match an iterator as part of a FORALL statement.  The format is:\n \n-     <var> = <start>:<end>[:<stride>][, <scalar mask>]  */\n+     <var> = <start>:<end>[:<stride>]\n+\n+   On MATCH_NO, the caller tests for the possibility that there is a\n+   scalar mask expression.  */\n \n static match\n match_forall_iterator (gfc_forall_iterator **result)\n@@ -3370,11 +3373,12 @@ match_forall_iterator (gfc_forall_iterator **result)\n   where = gfc_current_locus;\n   iter = gfc_getmem (sizeof (gfc_forall_iterator));\n \n-  m = gfc_match_variable (&iter->var, 0);\n+  m = gfc_match_expr (&iter->var);\n   if (m != MATCH_YES)\n     goto cleanup;\n \n-  if (gfc_match_char ('=') != MATCH_YES)\n+  if (gfc_match_char ('=') != MATCH_YES\n+\t|| iter->var->expr_type != EXPR_VARIABLE)\n     {\n       m = MATCH_NO;\n       goto cleanup;\n@@ -3415,12 +3419,6 @@ match_forall_iterator (gfc_forall_iterator **result)\n   m = MATCH_ERROR;\n \n cleanup:\n-  /* Make sure that potential internal function references in the\n-     mask do not get messed up.  */\n-  if (iter->var\n-      && iter->var->expr_type == EXPR_VARIABLE\n-      && iter->var->symtree->n.sym->refs == 1)\n-    iter->var->symtree->n.sym->attr.flavor = FL_UNKNOWN;\n \n   gfc_current_locus = where;\n   gfc_free_forall_iterator (iter);"}, {"sha": "5870a68200cbd75edbdf9c8274ce05e5311bdd72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bffa1718a6f2edeeec1aec1f4afef0ff69584ce", "patch": "@@ -1,3 +1,7 @@\n+2007-02-18  Roger Sayle  <roger@eyesopen.com>\n+\n+        * gfortran.dg/forall_10.f90: New test case.\n+\n 2007-02-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/tail_call_p.ads, tail_call_p.adb, tail_call.adb: New test."}, {"sha": "1b16840e6432dfcc825142a16709a27407e53898", "filename": "gcc/testsuite/gfortran.dg/forall_10.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bffa1718a6f2edeeec1aec1f4afef0ff69584ce/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_10.f90?ref=9bffa1718a6f2edeeec1aec1f4afef0ff69584ce", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! { dg-options \"-O\" }\n+! Tests the fix for PR30400, in which the use of ANY in the\n+! FORALL mask was rejected.\n+!\n+! Contributed by Dominique d'Humieres <dominiq@lps.ens.fr>\n+!\n+program pr30400_1\n+  real, dimension (5, 5, 5, 5) :: a\n+\n+  a (:, :, :,  :)  = 4\n+  a (:, 2, :, 4) = 10\n+  a (:, 2, :, 1) = 0\n+\n+  forall (i = 1:5, j = 1:5, k = 1:5, any (a (i, j, k,  :)  .gt. 6))\n+    forall (l = 1:5, any (a (:, :, :, l) .lt. 2))\n+      a (i, j, k, l) = i - j + k - l\n+    end forall\n+  end forall\n+  if (sum (a) .ne. 2625.0) call abort ()\n+\n+ ! Check that the fix has not broken the treatment of the '=='\n+  forall (i = 1:5, i == 3) a(i, i, i, i) = -5\n+  if (sum (a) .ne. 2616.0) call abort ()\n+end"}]}