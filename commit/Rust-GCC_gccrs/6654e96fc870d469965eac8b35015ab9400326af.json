{"sha": "6654e96fc870d469965eac8b35015ab9400326af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY1NGU5NmZjODcwZDQ2OTk2NWVhYzhiMzUwMTVhYjk0MDAzMjZhZg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-03-24T13:59:51Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-03-24T13:59:51Z"}, "message": "S/390: arch12: Add arch12 option.\n\nThis patch covers the mechanical work of making the new architecture\noption arch12 available wherever it will be needed later.\n\ngcc/testsuite/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/s390.exp: Run tests in arch12 and vxe dirs.\n\t* lib/target-supports.exp: Add effective target check s390_vxe.\n\ngcc/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* common/config/s390/s390-common.c (processor_flags_table): Add\n\tarch12.\n\t* config.gcc: Add arch12.\n\t* config/s390/driver-native.c (s390_host_detect_local_cpu):\n\tDefault to arch12 for unknown CPU model numbers.\n\t* config/s390/s390-builtins.def: Add B_VXE builtin flag.\n\t* config/s390/s390-c.c (s390_cpu_cpp_builtins_internal): Adjust\n\tPROCESSOR_max sanity check.\n\t* config/s390/s390-opts.h (enum processor_type): Add\n\tPROCESSOR_ARCH12.\n\t* config/s390/s390.c (processor_table): Add arch12.\n\t(s390_expand_builtin): Add check for B_VXE flag.\n\t(s390_issue_rate): Add PROCESSOR_ARCH12.\n\t(s390_get_sched_attrmask): Likewise.\n\t(s390_get_unit_mask): Likewise.\n\t(s390_sched_score): Enable z13 scheduling for arch12.\n\t(s390_sched_reorder): Likewise.\n\t(s390_sched_variable_issue): Likewise.\n\t* config/s390/s390.h (enum processor_flags): Add PF_ARCH12 and\n\tPF_VXE.\n\t(s390_tune_attr): Use z13 scheduling also for arch12.\n\t(TARGET_CPU_ARCH12, TARGET_CPU_ARCH12_P, TARGET_CPU_VXE)\n\t(TARGET_CPU_VXE_P, TARGET_ARCH12, TARGET_ARCH12_P, TARGET_VXE)\n\t(TARGET_VXE_P): New macros.\n\t* config/s390/s390.md: Add arch12 to cpu attribute.  Add arch12\n\tand vxe to cpu_facility.  Add arch12 and vxe to enabled attribute.\n\t* config/s390/s390.opt: Add arch12 as processor_type.\n\nFrom-SVN: r246452", "tree": {"sha": "41b30aa50a69fe7494502577ef6eebebac665aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41b30aa50a69fe7494502577ef6eebebac665aac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6654e96fc870d469965eac8b35015ab9400326af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6654e96fc870d469965eac8b35015ab9400326af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6654e96fc870d469965eac8b35015ab9400326af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6654e96fc870d469965eac8b35015ab9400326af/comments", "author": null, "committer": null, "parents": [{"sha": "9751ad6e9b79eeff55e7a81272be85dddb842e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9751ad6e9b79eeff55e7a81272be85dddb842e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9751ad6e9b79eeff55e7a81272be85dddb842e0f"}], "stats": {"total": 136, "additions": 120, "deletions": 16}, "files": [{"sha": "ae35f43bcb95bf1ec9dd612c7bb11bc9212f97f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -1,3 +1,33 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* common/config/s390/s390-common.c (processor_flags_table): Add\n+\tarch12.\n+\t* config.gcc: Add arch12.\n+\t* config/s390/driver-native.c (s390_host_detect_local_cpu):\n+\tDefault to arch12 for unknown CPU model numbers.\n+\t* config/s390/s390-builtins.def: Add B_VXE builtin flag.\n+\t* config/s390/s390-c.c (s390_cpu_cpp_builtins_internal): Adjust\n+\tPROCESSOR_max sanity check.\n+\t* config/s390/s390-opts.h (enum processor_type): Add\n+\tPROCESSOR_ARCH12.\n+\t* config/s390/s390.c (processor_table): Add arch12.\n+\t(s390_expand_builtin): Add check for B_VXE flag.\n+\t(s390_issue_rate): Add PROCESSOR_ARCH12.\n+\t(s390_get_sched_attrmask): Likewise.\n+\t(s390_get_unit_mask): Likewise.\n+\t(s390_sched_score): Enable z13 scheduling for arch12.\n+\t(s390_sched_reorder): Likewise.\n+\t(s390_sched_variable_issue): Likewise.\n+\t* config/s390/s390.h (enum processor_flags): Add PF_ARCH12 and\n+\tPF_VXE.\n+\t(s390_tune_attr): Use z13 scheduling also for arch12.\n+\t(TARGET_CPU_ARCH12, TARGET_CPU_ARCH12_P, TARGET_CPU_VXE)\n+\t(TARGET_CPU_VXE_P, TARGET_ARCH12, TARGET_ARCH12_P, TARGET_VXE)\n+\t(TARGET_VXE_P): New macros.\n+\t* config/s390/s390.md: Add arch12 to cpu attribute.  Add arch12\n+\tand vxe to cpu_facility.  Add arch12 and vxe to enabled attribute.\n+\t* config/s390/s390.opt: Add arch12 as processor_type.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.md"}, {"sha": "10418a36c20b8f2b8301e71c18b9d660676e1f0e", "filename": "gcc/common/config/s390/s390-common.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -45,7 +45,10 @@ EXPORTED_CONST int processor_flags_table[] =\n                  | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196 | PF_ZEC12 | PF_TX,\n     /* z13 */    PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n                  | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196 | PF_ZEC12 | PF_TX\n-                 | PF_Z13 | PF_VX\n+                 | PF_Z13 | PF_VX,\n+    /* arch12 */ PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+                 | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196 | PF_ZEC12 | PF_TX\n+                 | PF_Z13 | PF_VX | PF_VXE | PF_ARCH12\n   };\n \n /* Change optimizations to be performed, depending on the"}, {"sha": "b8bb4d65825fdd06b283136b6cb87ea4cc107d2c", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -4331,7 +4331,7 @@ case \"${target}\" in\n \t\tfor which in arch tune; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n-\t\t\t\"\" | native | g5 | g6 | z900 | z990 | z9-109 | z9-ec | z10 | z196 | zEC12 | z13 | arch3 | arch5 | arch6 | arch7 | arch8 | arch9 | arch10 | arch11)\n+\t\t\t\"\" | native | g5 | g6 | z900 | z990 | z9-109 | z9-ec | z10 | z196 | zEC12 | z13 | arch3 | arch5 | arch6 | arch7 | arch8 | arch9 | arch10 | arch11 | arch12)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "4bcddb4bab638e63e28e28081db906a989ddee6e", "filename": "gcc/config/s390/driver-native.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fdriver-native.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fdriver-native.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fdriver-native.c?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -114,6 +114,9 @@ s390_host_detect_local_cpu (int argc, const char **argv)\n \t    case 0x2964:\n \t      cpu = \"z13\";\n \t      break;\n+\t    default:\n+\t      cpu = \"arch12\";\n+\t      break;\n \t    }\n \t}\n       if (has_features == 0 && strncmp (buf, \"features\", 8) == 0)"}, {"sha": "27cb6a860003787d296ee8fd0180d38db5f26207", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -270,14 +270,15 @@\n #undef B_INT\n #undef B_HTM\n #undef B_VX\n+#undef B_VXE\n \n #undef BFLAGS_MASK_INIT\n #define BFLAGS_MASK_INIT (B_INT)\n \n #define B_INT   (1 << 0)  /* Internal builtins.  This builtin cannot be used in user programs.  */\n #define B_HTM   (1 << 1)  /* Builtins requiring the transactional execution facility.  */\n #define B_VX    (1 << 2)  /* Builtins requiring the z13 vector extensions.  */\n-\n+#define B_VXE   (1 << 3)  /* Builtins requiring the arch12 vector extensions.  */\n \n /* B_DEF defines a standard (not overloaded) builtin\n    B_DEF (<builtin name>, <RTL expander name>, <function attributes>, <builtin flags>, <operand flags, see above>, <fntype>)"}, {"sha": "019d86eb24c52ee4d89f1e49bbeb53a1ab2493bf", "filename": "gcc/config/s390/s390-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-c.c?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -339,7 +339,7 @@ s390_cpu_cpp_builtins_internal (cpp_reader *pfile,\n       /* Z9_EC has the same level as Z9_109.  */\n       arch_level--;\n     /* Review when a new arch is added and increase the value.  */\n-    char dummy[23 - 2 * PROCESSOR_max] __attribute__((unused));\n+    char dummy[(PROCESSOR_max > 12) ? -1 : 1] __attribute__((unused));\n     sprintf (macro_def, \"__ARCH__=%d\", arch_level);\n     cpp_undef (pfile, \"__ARCH__\");\n     cpp_define (pfile, macro_def);"}, {"sha": "65ac4f8ebbd56d1271d61afa635d53e852f25697", "filename": "gcc/config/s390/s390-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-opts.h?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -38,6 +38,7 @@ enum processor_type\n   PROCESSOR_2817_Z196,\n   PROCESSOR_2827_ZEC12,\n   PROCESSOR_2964_Z13,\n+  PROCESSOR_ARCH12,\n   PROCESSOR_NATIVE,\n   PROCESSOR_max\n };"}, {"sha": "c94edcc7a6238357272c9f5e6e09c9de9714b73e", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -334,6 +334,7 @@ const processor_table[] =\n   { \"z196\",   PROCESSOR_2817_Z196,   &z196_cost },\n   { \"zEC12\",  PROCESSOR_2827_ZEC12,  &zEC12_cost },\n   { \"z13\",    PROCESSOR_2964_Z13,    &zEC12_cost },\n+  { \"arch12\", PROCESSOR_ARCH12,      &zEC12_cost },\n   { \"native\", PROCESSOR_NATIVE,      NULL }\n };\n \n@@ -824,12 +825,18 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t \"(default with -march=zEC12 and higher).\", fndecl);\n \t  return const0_rtx;\n \t}\n-      if ((bflags & B_VX) && !TARGET_VX)\n+      if (((bflags & B_VX) || (bflags & B_VXE)) && !TARGET_VX)\n \t{\n \t  error (\"builtin %qF is not supported without -mvx \"\n \t\t \"(default with -march=z13 and higher).\", fndecl);\n \t  return const0_rtx;\n \t}\n+\n+      if ((bflags & B_VXE) && !TARGET_VXE)\n+\t{\n+\t  error (\"Builtin %qF requires arch12 or higher.\", fndecl);\n+\t  return const0_rtx;\n+\t}\n     }\n   if (fcode >= S390_OVERLOADED_BUILTIN_VAR_OFFSET\n       && fcode < S390_ALL_BUILTIN_MAX)\n@@ -7781,6 +7788,7 @@ s390_issue_rate (void)\n \t instruction gets issued per cycle.  */\n     case PROCESSOR_2827_ZEC12:\n     case PROCESSOR_2964_Z13:\n+    case PROCESSOR_ARCH12:\n     default:\n       return 1;\n     }\n@@ -13987,6 +13995,7 @@ s390_get_sched_attrmask (rtx_insn *insn)\n \tmask |= S390_SCHED_ATTR_MASK_GROUPALONE;\n       break;\n     case PROCESSOR_2964_Z13:\n+    case PROCESSOR_ARCH12:\n       if (get_attr_z13_cracked (insn))\n \tmask |= S390_SCHED_ATTR_MASK_CRACKED;\n       if (get_attr_z13_expanded (insn))\n@@ -14010,6 +14019,7 @@ s390_get_unit_mask (rtx_insn *insn, int *units)\n   switch (s390_tune)\n     {\n     case PROCESSOR_2964_Z13:\n+    case PROCESSOR_ARCH12:\n       *units = 3;\n       if (get_attr_z13_unit_lsu (insn))\n \tmask |= 1 << 0;\n@@ -14082,7 +14092,7 @@ s390_sched_score (rtx_insn *insn)\n       break;\n     }\n \n-  if (s390_tune == PROCESSOR_2964_Z13)\n+  if (s390_tune >= PROCESSOR_2964_Z13)\n     {\n       int units, i;\n       unsigned unit_mask, m = 1;\n@@ -14187,7 +14197,7 @@ s390_sched_reorder (FILE *file, int verbose,\n \t      PRINT_SCHED_ATTR (S390_SCHED_ATTR_MASK_ENDGROUP, endgroup);\n \t      PRINT_SCHED_ATTR (S390_SCHED_ATTR_MASK_GROUPALONE, groupalone);\n #undef PRINT_SCHED_ATTR\n-\t      if (s390_tune == PROCESSOR_2964_Z13)\n+\t      if (s390_tune >= PROCESSOR_2964_Z13)\n \t\t{\n \t\t  unsigned int unit_mask, m = 1;\n \t\t  int units, j;\n@@ -14250,7 +14260,7 @@ s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n \t    }\n \t}\n \n-      if (s390_tune == PROCESSOR_2964_Z13)\n+      if (s390_tune >= PROCESSOR_2964_Z13)\n \t{\n \t  int units, i;\n \t  unsigned unit_mask, m = 1;\n@@ -14279,7 +14289,7 @@ s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n \t  PRINT_SCHED_ATTR (S390_SCHED_ATTR_MASK_GROUPALONE, groupalone);\n #undef PRINT_SCHED_ATTR\n \n-\t  if (s390_tune == PROCESSOR_2964_Z13)\n+\t  if (s390_tune >= PROCESSOR_2964_Z13)\n \t    {\n \t      unsigned int unit_mask, m = 1;\n \t      int units, j;\n@@ -14293,7 +14303,7 @@ s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n \t    }\n \t  fprintf (file, \" sched state: %d\\n\", s390_sched_state);\n \n-\t  if (s390_tune == PROCESSOR_2964_Z13)\n+\t  if (s390_tune >= PROCESSOR_2964_Z13)\n \t    {\n \t      int units, j;\n "}, {"sha": "a372981ff3a4e6e306a8f0d8f74a88e3d730d5e2", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -37,12 +37,14 @@ enum processor_flags\n   PF_ZEC12 = 128,\n   PF_TX = 256,\n   PF_Z13 = 512,\n-  PF_VX = 1024\n+  PF_VX = 1024,\n+  PF_ARCH12 = 2048,\n+  PF_VXE = 4096\n };\n \n /* This is necessary to avoid a warning about comparing different enum\n    types.  */\n-#define s390_tune_attr ((enum attr_cpu)s390_tune)\n+#define s390_tune_attr ((enum attr_cpu)(s390_tune > PROCESSOR_2964_Z13 ? PROCESSOR_2964_Z13 : s390_tune ))\n \n /* These flags indicate that the generated code should run on a cpu\n    providing the respective hardware facility regardless of the\n@@ -87,11 +89,19 @@ enum processor_flags\n #define TARGET_CPU_Z13 \\\n \t(s390_arch_flags & PF_Z13)\n #define TARGET_CPU_Z13_P(opts) \\\n-        (opts->x_s390_arch_flags & PF_Z13)\n+\t(opts->x_s390_arch_flags & PF_Z13)\n #define TARGET_CPU_VX \\\n-        (s390_arch_flags & PF_VX)\n+\t(s390_arch_flags & PF_VX)\n #define TARGET_CPU_VX_P(opts) \\\n \t(opts->x_s390_arch_flags & PF_VX)\n+#define TARGET_CPU_ARCH12 \\\n+\t(s390_arch_flags & PF_ARCH12)\n+#define TARGET_CPU_ARCH12_P(opts) \\\n+\t(opts->x_s390_arch_flags & PF_ARCH12)\n+#define TARGET_CPU_VXE \\\n+\t(s390_arch_flags & PF_VXE)\n+#define TARGET_CPU_VXE_P(opts) \\\n+\t(opts->x_s390_arch_flags & PF_VXE)\n \n #define TARGET_HARD_FLOAT_P(opts) (!TARGET_SOFT_FLOAT_P(opts))\n \n@@ -137,6 +147,13 @@ enum processor_flags\n \t(TARGET_ZARCH_P (opts->x_target_flags) && TARGET_CPU_VX_P (opts) \\\n \t && TARGET_OPT_VX_P (opts->x_target_flags) \\\n \t && TARGET_HARD_FLOAT_P (opts->x_target_flags))\n+#define TARGET_ARCH12 (TARGET_ZARCH && TARGET_CPU_ARCH12)\n+#define TARGET_ARCH12_P(opts)\t\t\t\t\t\t\\\n+\t(TARGET_ZARCH_P (opts->x_target_flags) && TARGET_CPU_ARCH12_P (opts))\n+#define TARGET_VXE\t\t\t\t\\\n+\t(TARGET_VX && TARGET_CPU_VXE)\n+#define TARGET_VXE_P(opts)\t\t\t\t\t\t\\\n+\t(TARGET_VX_P (opts) && TARGET_CPU_VXE_P (opts))\n \n #ifdef HAVE_AS_MACHINE_MACHINEMODE\n #define S390_USE_TARGET_ATTRIBUTE 1"}, {"sha": "53c8fed517c447934b177c6663e07570750fe1ad", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -478,11 +478,11 @@\n ;; distinguish between g5 and g6, but there are differences between the two\n ;; CPUs could in theory be modeled.\n \n-(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109,z9_ec,z10,z196,zEC12,z13\"\n+(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109,z9_ec,z10,z196,zEC12,z13,arch12\"\n   (const (symbol_ref \"s390_tune_attr\")))\n \n (define_attr \"cpu_facility\"\n-  \"standard,ieee,zarch,cpu_zarch,longdisp,extimm,dfp,z10,z196,zEC12,vx,z13\"\n+  \"standard,ieee,zarch,cpu_zarch,longdisp,extimm,dfp,z10,z196,zEC12,vx,z13,arch12,vxe\"\n   (const_string \"standard\"))\n \n (define_attr \"enabled\" \"\"\n@@ -532,6 +532,14 @@\n          (and (eq_attr \"cpu_facility\" \"z13\")\n               (match_test \"TARGET_Z13\"))\n \t (const_int 1)\n+\n+         (and (eq_attr \"cpu_facility\" \"arch12\")\n+              (match_test \"TARGET_ARCH12\"))\n+\t (const_int 1)\n+\n+         (and (eq_attr \"cpu_facility\" \"vxe\")\n+\t      (match_test \"TARGET_VXE\"))\n+\t (const_int 1)\n \t ]\n \t(const_int 0)))\n "}, {"sha": "d0a0d46b0a736b5b1950a6fc682bfa554425e5b6", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -112,6 +112,9 @@ Enum(processor_type) String(z13) Value(PROCESSOR_2964_Z13)\n EnumValue\n Enum(processor_type) String(arch11) Value(PROCESSOR_2964_Z13)\n \n+EnumValue\n+Enum(processor_type) String(arch12) Value(PROCESSOR_ARCH12)\n+\n EnumValue\n Enum(processor_type) String(native) Value(PROCESSOR_NATIVE) DriverOnly\n "}, {"sha": "4c59d68fb94783f675b6021b7f4de5715bd8906d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -1,3 +1,8 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/s390.exp: Run tests in arch12 and vxe dirs.\n+\t* lib/target-supports.exp: Add effective target check s390_vxe.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/vector/vec-scalar-cmp-1.c: Adjust for the"}, {"sha": "420aff19a3ffa91b1ecf909ca21195442dcf3480", "filename": "gcc/testsuite/gcc.target/s390/s390.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -209,6 +209,12 @@ dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*vector*/*.{c,S,C}]] \\\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/target-attribute/*.{c,S,C}]] \\\n \t\"\" $DEFAULT_CFLAGS\n \n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/arch12/*.{c,S,C}]] \\\n+\t\"\" \"-O3 -march=arch12 -mzarch\"\n+\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/vxe/*.{c,S}]] \\\n+\t\"\" \"-O3 -march=arch12 -mzarch\"\n+\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/md/*.{c,S,C}]] \\\n \t\"\" $DEFAULT_CFLAGS\n "}, {"sha": "342af270ab1098a3a4871a8f4b0474682a798c9f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6654e96fc870d469965eac8b35015ab9400326af/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=6654e96fc870d469965eac8b35015ab9400326af", "patch": "@@ -8227,6 +8227,23 @@ proc check_effective_target_s390_vx { } {\n \t}\n     } \"-march=z13 -mzarch\" ]\n }\n+\n+# Same as above but for the arch12 vector enhancement facility. Test\n+# is performed with the vector nand instruction.\n+proc check_effective_target_s390_vxe { } {\n+    if ![istarget s390*-*-*] then {\n+\treturn 0;\n+    }\n+\n+    return [check_runtime s390_check_vxe {\n+\tint main (void)\n+\t{\n+\t    asm (\"vnn %%v24, %%v26, %%v28\" : : : \"v24\", \"v26\", \"v28\");\n+\t    return 0;\n+\t}\n+    } \"-march=arch12 -mzarch\" ]\n+}\n+\n #For versions of ARM architectures that have hardware div insn,\n #disable the divmod transform\n "}]}