{"sha": "5d216c70d980e3169b42e9734cf4bea1648ff8f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQyMTZjNzBkOTgwZTMxNjliNDJlOTczNGNmNGJlYTE2NDhmZjhmMA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "ulrich.weigand@linaro.org", "date": "2012-03-02T17:08:55Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2012-03-02T17:08:55Z"}, "message": "arm.c (arm_sat_operator_match): New function.\n\n\tgcc/\n\t* config/arm/arm.c (arm_sat_operator_match): New function.\n\t* config/arm/arm-protos.h (arm_sat_operator_match): Add prototype.\n\t* config/arm/arm.md (\"insn\" attribute): Add \"sat\" value.\n\t(\"SAT\", \"SATrev\"): New code iterators.\n\t(\"SATlo\", \"SAThi\"): New code iterator attributes.\n\t(\"*satsi_<SAT:code>\"): New pattern.\n\t(\"*satsi_<SAT:code>_shift\"): Likewise.\n\t* config/arm/arm-fixed.md (\"arm_ssatsihi_shift\"): Add \"insn\"\n\tand \"shift\" attributes.\n\t(\"arm_usatsihi\"): Add \"insn\" attribute.\n\t* config/arm/predicates.md (sat_shift_operator): Allow multiplication\n\tby powers of two.  Do not allow shift by 32.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/sat-1.c: New test.\n\nFrom-SVN: r184803", "tree": {"sha": "54e677187e260d409904d535adb7790396d04961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54e677187e260d409904d535adb7790396d04961"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d216c70d980e3169b42e9734cf4bea1648ff8f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d216c70d980e3169b42e9734cf4bea1648ff8f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d216c70d980e3169b42e9734cf4bea1648ff8f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d216c70d980e3169b42e9734cf4bea1648ff8f0/comments", "author": null, "committer": null, "parents": [{"sha": "2b57045bfc0c746c5bbc952cf8a4da70548b5775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b57045bfc0c746c5bbc952cf8a4da70548b5775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b57045bfc0c746c5bbc952cf8a4da70548b5775"}], "stats": {"total": 189, "additions": 184, "deletions": 5}, "files": [{"sha": "fa444196ad08660bebfe304aabd0409aa50396a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d216c70d980e3169b42e9734cf4bea1648ff8f0", "patch": "@@ -1,3 +1,18 @@\n+2012-03-02  Ulrich Weigand  <ulrich.weigand@linaro.org>\n+\n+\t* config/arm/arm.c (arm_sat_operator_match): New function.\n+\t* config/arm/arm-protos.h (arm_sat_operator_match): Add prototype.\n+\t* config/arm/arm.md (\"insn\" attribute): Add \"sat\" value.\n+\t(\"SAT\", \"SATrev\"): New code iterators.\n+\t(\"SATlo\", \"SAThi\"): New code iterator attributes.\n+\t(\"*satsi_<SAT:code>\"): New pattern.\n+\t(\"*satsi_<SAT:code>_shift\"): Likewise.\n+\t* config/arm/arm-fixed.md (\"arm_ssatsihi_shift\"): Add \"insn\"\n+\tand \"shift\" attributes.\n+\t(\"arm_usatsihi\"): Add \"insn\" attribute.\n+\t* config/arm/predicates.md (sat_shift_operator): Allow multiplication\n+\tby powers of two.  Do not allow shift by 32.\n+\n 2012-03-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/46716"}, {"sha": "920c262b4250cc7ae7cee972e1e469eede054377", "filename": "gcc/config/arm/arm-fixed.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Fconfig%2Farm%2Farm-fixed.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Fconfig%2Farm%2Farm-fixed.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fixed.md?ref=5d216c70d980e3169b42e9734cf4bea1648ff8f0", "patch": "@@ -374,11 +374,14 @@\n   \"TARGET_32BIT && arm_arch6\"\n   \"ssat%?\\\\t%0, #16, %2%S1\"\n   [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"insn\" \"sat\")\n+   (set_attr \"shift\" \"1\")\n    (set_attr \"type\" \"alu_shift\")])\n \n (define_insn \"arm_usatsihi\"\n   [(set (match_operand:HI 0 \"s_register_operand\" \"=r\")\n \t(us_truncate:HI (match_operand:SI 1 \"s_register_operand\")))]\n   \"TARGET_INT_SIMD\"\n   \"usat%?\\\\t%0, #16, %1\"\n-  [(set_attr \"predicable\" \"yes\")])\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"insn\" \"sat\")])"}, {"sha": "900d09a09a3935ee4ab9714ecca3121feba5247a", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=5d216c70d980e3169b42e9734cf4bea1648ff8f0", "patch": "@@ -107,6 +107,7 @@ extern int tls_mentioned_p (rtx);\n extern int symbol_mentioned_p (rtx);\n extern int label_mentioned_p (rtx);\n extern RTX_CODE minmax_code (rtx);\n+extern bool arm_sat_operator_match (rtx, rtx, int *, bool *);\n extern int adjacent_mem_locations (rtx, rtx);\n extern bool gen_ldm_seq (rtx *, int, bool);\n extern bool gen_stm_seq (rtx *, int);"}, {"sha": "dfba8e15fc19fe921ea44fe002f7592e40d10073", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5d216c70d980e3169b42e9734cf4bea1648ff8f0", "patch": "@@ -10037,6 +10037,42 @@ minmax_code (rtx x)\n     }\n }\n \n+/* Match pair of min/max operators that can be implemented via usat/ssat.  */\n+\n+bool\n+arm_sat_operator_match (rtx lo_bound, rtx hi_bound,\n+\t\t\tint *mask, bool *signed_sat)\n+{\n+  /* The high bound must be a power of two minus one.  */\n+  int log = exact_log2 (INTVAL (hi_bound) + 1);\n+  if (log == -1)\n+    return false;\n+\n+  /* The low bound is either zero (for usat) or one less than the\n+     negation of the high bound (for ssat).  */\n+  if (INTVAL (lo_bound) == 0)\n+    {\n+      if (mask)\n+        *mask = log;\n+      if (signed_sat)\n+        *signed_sat = false;\n+\n+      return true;\n+    }\n+\n+  if (INTVAL (lo_bound) == -INTVAL (hi_bound) - 1)\n+    {\n+      if (mask)\n+        *mask = log + 1;\n+      if (signed_sat)\n+        *signed_sat = true;\n+\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Return 1 if memory locations are adjacent.  */\n int\n adjacent_mem_locations (rtx a, rtx b)"}, {"sha": "4f6d96575b943b05181e8b7cc7dda516fbee458b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=5d216c70d980e3169b42e9734cf4bea1648ff8f0", "patch": "@@ -283,7 +283,7 @@\n ;; scheduling information.\n \n (define_attr \"insn\"\n-        \"mov,mvn,smulxy,smlaxy,smlalxy,smulwy,smlawx,mul,muls,mla,mlas,umull,umulls,umlal,umlals,smull,smulls,smlal,smlals,smlawy,smuad,smuadx,smlad,smladx,smusd,smusdx,smlsd,smlsdx,smmul,smmulr,smmla,umaal,smlald,smlsld,clz,mrs,msr,xtab,sdiv,udiv,other\"\n+        \"mov,mvn,smulxy,smlaxy,smlalxy,smulwy,smlawx,mul,muls,mla,mlas,umull,umulls,umlal,umlals,smull,smulls,smlal,smlals,smlawy,smuad,smuadx,smlad,smladx,smusd,smusdx,smlsd,smlsdx,smmul,smmulr,smmla,umaal,smlald,smlsld,clz,mrs,msr,xtab,sdiv,udiv,sat,other\"\n         (const_string \"other\"))\n \n ; TYPE attribute is used to detect floating point instructions which, if\n@@ -3446,6 +3446,60 @@\n \t\t      (const_int 12)))]\n )\n \n+(define_code_iterator SAT [smin smax])\n+(define_code_iterator SATrev [smin smax])\n+(define_code_attr SATlo [(smin \"1\") (smax \"2\")])\n+(define_code_attr SAThi [(smin \"2\") (smax \"1\")])\n+\n+(define_insn \"*satsi_<SAT:code>\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+        (SAT:SI (SATrev:SI (match_operand:SI 3 \"s_register_operand\" \"r\")\n+                           (match_operand:SI 1 \"const_int_operand\" \"i\"))\n+                (match_operand:SI 2 \"const_int_operand\" \"i\")))]\n+  \"TARGET_32BIT && arm_arch6 && <SAT:CODE> != <SATrev:CODE>\n+   && arm_sat_operator_match (operands[<SAT:SATlo>], operands[<SAT:SAThi>], NULL, NULL)\"\n+{\n+  int mask;\n+  bool signed_sat;\n+  if (!arm_sat_operator_match (operands[<SAT:SATlo>], operands[<SAT:SAThi>],\n+                               &mask, &signed_sat))\n+    gcc_unreachable ();\n+\n+  operands[1] = GEN_INT (mask);\n+  if (signed_sat)\n+    return \"ssat%?\\t%0, %1, %3\";\n+  else\n+    return \"usat%?\\t%0, %1, %3\";\n+}\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"insn\" \"sat\")])\n+\n+(define_insn \"*satsi_<SAT:code>_shift\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+        (SAT:SI (SATrev:SI (match_operator:SI 3 \"sat_shift_operator\"\n+                             [(match_operand:SI 4 \"s_register_operand\" \"r\")\n+                              (match_operand:SI 5 \"const_int_operand\" \"i\")])\n+                           (match_operand:SI 1 \"const_int_operand\" \"i\"))\n+                (match_operand:SI 2 \"const_int_operand\" \"i\")))]\n+  \"TARGET_32BIT && arm_arch6 && <SAT:CODE> != <SATrev:CODE>\n+   && arm_sat_operator_match (operands[<SAT:SATlo>], operands[<SAT:SAThi>], NULL, NULL)\"\n+{\n+  int mask;\n+  bool signed_sat;\n+  if (!arm_sat_operator_match (operands[<SAT:SATlo>], operands[<SAT:SAThi>],\n+                               &mask, &signed_sat))\n+    gcc_unreachable ();\n+\n+  operands[1] = GEN_INT (mask);\n+  if (signed_sat)\n+    return \"ssat%?\\t%0, %1, %4%S3\";\n+  else\n+    return \"usat%?\\t%0, %1, %4%S3\";\n+}\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"insn\" \"sat\")\n+   (set_attr \"shift\" \"3\")\n+   (set_attr \"type\" \"alu_shift\")])\n \f\n ;; Shift and rotation insns\n "}, {"sha": "dea3a96368e29f9342fc771f0f22f4f84b6817e7", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=5d216c70d980e3169b42e9734cf4bea1648ff8f0", "patch": "@@ -243,9 +243,11 @@\n \n ;; True for shift operators which can be used with saturation instructions.\n (define_special_predicate \"sat_shift_operator\"\n-  (and (match_code \"ashift,ashiftrt\")\n-       (match_test \"GET_CODE (XEXP (op, 1)) == CONST_INT\n-\t\t    && ((unsigned HOST_WIDE_INT) INTVAL (XEXP (op, 1)) <= 32)\")\n+  (and (ior (and (match_code \"mult\")\n+                 (match_test \"power_of_two_operand (XEXP (op, 1), mode)\"))\n+            (and (match_code \"ashift,ashiftrt\")\n+                 (match_test \"GET_CODE (XEXP (op, 1)) == CONST_INT\n+\t\t              && ((unsigned HOST_WIDE_INT) INTVAL (XEXP (op, 1)) < 32)\")))\n        (match_test \"mode == GET_MODE (op)\")))\n \n ;; True for MULT, to identify which variant of shift_operator is in use."}, {"sha": "81dfa4f90f8e9eb549bb053913fdf9475ddf5168", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d216c70d980e3169b42e9734cf4bea1648ff8f0", "patch": "@@ -1,3 +1,7 @@\n+2012-03-02  Ulrich Weigand  <ulrich.weigand@linaro.org>\n+\n+\t* gcc.target/arm/sat-1.c: New test.\n+\n 2012-03-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/46716"}, {"sha": "ebde56a4554657e15c40dc5bdfb283e850775c98", "filename": "gcc/testsuite/gcc.target/arm/sat-1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsat-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d216c70d980e3169b42e9734cf4bea1648ff8f0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsat-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsat-1.c?ref=5d216c70d980e3169b42e9734cf4bea1648ff8f0", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arm_ok } */\n+/* { dg-require-effective-target arm_arch_v6_ok } */\n+/* { dg-options \"-O2 -marm\" } */\n+/* { dg-add-options arm_arch_v6 } */\n+\n+\n+static inline int sat1 (int a, int amin, int amax)\n+{\n+  if      (a < amin) return amin;\n+  else if (a > amax) return amax;\n+  else               return a;\n+}\n+\n+static inline int sat2 (int a, int amin, int amax)\n+{\n+  if      (a > amax) return amax;\n+  else if (a < amin) return amin;\n+  else               return a;\n+}\n+\n+int u1 (int x)\n+{\n+  return sat1 (x, 0, 63);\n+}\n+\n+int us1 (int x)\n+{\n+  return sat1 (x >> 5, 0, 63);\n+}\n+\n+int s1 (int x)\n+{\n+  return sat1 (x, -64, 63);\n+}\n+\n+int ss1 (int x)\n+{\n+  return sat1 (x >> 5, -64, 63);\n+}\n+\n+int u2 (int x)\n+{\n+  return sat2 (x, 0, 63);\n+}\n+\n+int us2 (int x)\n+{\n+  return sat2 (x >> 5, 0, 63);\n+}\n+\n+int s2 (int x)\n+{\n+  return sat2 (x, -64, 63);\n+}\n+\n+int ss2 (int x)\n+{\n+  return sat2 (x >> 5, -64, 63);\n+}\n+\n+/* { dg-final { scan-assembler-times \"usat\" 4 } } */\n+/* { dg-final { scan-assembler-times \"ssat\" 4 } } */\n+"}]}