{"sha": "949cfd0a8de02f0651eba086a98653a9be27e609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ5Y2ZkMGE4ZGUwMmYwNjUxZWJhMDg2YTk4NjUzYTliZTI3ZTYwOQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2011-06-24T07:45:37Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2011-06-24T07:45:37Z"}, "message": "Improve dump files for SRA early candidate check v2\n\nv2: Include message improvements from Eric Botcazou\n\ngcc/:\n2011-06-24  Andi Kleen  <ak@linux.intel.com>\n\n\t* tree-sra.c (type_internals_preclude_sra_p): Add msg\n\tparameter. Split up ifs and report reason in *msg.\n\t(reject): Add.\n\t(find_var_candiate): Add msg variable.\n\tSplit up ifs and report reason to reject.\n\t(find_param_candidates): Add msg variable.\n\tPass msg to type_internals_preclude_sra_p.\n\nFrom-SVN: r175370", "tree": {"sha": "2f93c3c157ff7539e3e43af3d351574b073209a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f93c3c157ff7539e3e43af3d351574b073209a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/949cfd0a8de02f0651eba086a98653a9be27e609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949cfd0a8de02f0651eba086a98653a9be27e609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/949cfd0a8de02f0651eba086a98653a9be27e609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/949cfd0a8de02f0651eba086a98653a9be27e609/comments", "author": null, "committer": null, "parents": [{"sha": "908e152c84b2f3f97f0b5d316e9402aeeeef2b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908e152c84b2f3f97f0b5d316e9402aeeeef2b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/908e152c84b2f3f97f0b5d316e9402aeeeef2b76"}], "stats": {"total": 127, "additions": 105, "deletions": 22}, "files": [{"sha": "f91e1a69c5d698e0a5a14f15112096222e8f0791", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949cfd0a8de02f0651eba086a98653a9be27e609/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949cfd0a8de02f0651eba086a98653a9be27e609/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=949cfd0a8de02f0651eba086a98653a9be27e609", "patch": "@@ -1,3 +1,13 @@\n+2011-06-24  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* tree-sra.c (type_internals_preclude_sra_p): Add msg\n+\tparameter. Split up ifs and report reason in *msg.\n+\t(reject): Add.\n+\t(find_var_candiate): Add msg variable.\n+\tSplit up ifs and report reason to reject.\n+\t(find_param_candidates): Add msg variable.\n+\tPass msg to type_internals_preclude_sra_p.\n+\n 2011-06-23  Jeff Law  <law@redhat.com>\n \n \tPR middle-end/48770"}, {"sha": "df19dd1cc51fa81c52f6afbb8ad9100197110744", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 95, "deletions": 22, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/949cfd0a8de02f0651eba086a98653a9be27e609/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/949cfd0a8de02f0651eba086a98653a9be27e609/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=949cfd0a8de02f0651eba086a98653a9be27e609", "patch": "@@ -648,7 +648,7 @@ disqualify_candidate (tree decl, const char *reason)\n    scalarization.  */\n \n static bool\n-type_internals_preclude_sra_p (tree type)\n+type_internals_preclude_sra_p (tree type, const char **msg)\n {\n   tree fld;\n   tree et;\n@@ -663,15 +663,39 @@ type_internals_preclude_sra_p (tree type)\n \t  {\n \t    tree ft = TREE_TYPE (fld);\n \n-\t    if (TREE_THIS_VOLATILE (fld)\n-\t\t|| !DECL_FIELD_OFFSET (fld) || !DECL_SIZE (fld)\n-\t\t|| !host_integerp (DECL_FIELD_OFFSET (fld), 1)\n-\t\t|| !host_integerp (DECL_SIZE (fld), 1)\n-\t\t|| (AGGREGATE_TYPE_P (ft)\n-\t\t    && int_bit_position (fld) % BITS_PER_UNIT != 0))\n-\t      return true;\n+\t    if (TREE_THIS_VOLATILE (fld))\n+\t      {\n+\t\t*msg = \"volatile structure field\";\n+\t\treturn true;\n+\t      }\n+\t    if (!DECL_FIELD_OFFSET (fld))\n+\t      {\n+\t\t*msg = \"no structure field offset\";\n+\t\treturn true;\n+\t      }\n+\t    if (!DECL_SIZE (fld))\n+\t      {\n+\t\t*msg = \"zero structure field size\";\n+\t        return true;\n+\t      }\n+\t    if (!host_integerp (DECL_FIELD_OFFSET (fld), 1))\n+\t      {\n+\t\t*msg = \"structure field offset not fixed\";\n+\t\treturn true;\n+\t      }\n+\t    if (!host_integerp (DECL_SIZE (fld), 1))\n+\t      {\n+\t        *msg = \"structure field size not fixed\";\n+\t\treturn true;\n+\t      }\t      \n+\t    if (AGGREGATE_TYPE_P (ft)\n+\t\t    && int_bit_position (fld) % BITS_PER_UNIT != 0)\n+\t      {\n+\t\t*msg = \"structure field is bit field\";\n+\t        return true;\n+\t      }\n \n-\t    if (AGGREGATE_TYPE_P (ft) && type_internals_preclude_sra_p (ft))\n+\t    if (AGGREGATE_TYPE_P (ft) && type_internals_preclude_sra_p (ft, msg))\n \t      return true;\n \t  }\n \n@@ -681,9 +705,12 @@ type_internals_preclude_sra_p (tree type)\n       et = TREE_TYPE (type);\n \n       if (TYPE_VOLATILE (et))\n-\treturn true;\n+\t{\n+\t  *msg = \"element type is volatile\";\n+\t  return true;\n+\t}\n \n-      if (AGGREGATE_TYPE_P (et) && type_internals_preclude_sra_p (et))\n+      if (AGGREGATE_TYPE_P (et) && type_internals_preclude_sra_p (et, msg))\n \treturn true;\n \n       return false;\n@@ -1538,6 +1565,19 @@ is_va_list_type (tree type)\n   return TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (va_list_type_node);\n }\n \n+/* Print message to dump file why a variable was rejected. */\n+\n+static void\n+reject (tree var, const char *msg)\n+{\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"Rejected (%d): %s: \", DECL_UID (var), msg);\n+      print_generic_expr (dump_file, var, 0);\n+      fprintf (dump_file, \"\\n\");\n+    }\n+}\n+\n /* The very first phase of intraprocedural SRA.  It marks in candidate_bitmap\n    those with type which is suitable for scalarization.  */\n \n@@ -1547,26 +1587,58 @@ find_var_candidates (void)\n   tree var, type;\n   referenced_var_iterator rvi;\n   bool ret = false;\n+  const char *msg;\n \n   FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n     {\n       if (TREE_CODE (var) != VAR_DECL && TREE_CODE (var) != PARM_DECL)\n         continue;\n       type = TREE_TYPE (var);\n \n-      if (!AGGREGATE_TYPE_P (type)\n-\t  || needs_to_live_in_memory (var)\n-\t  || TREE_THIS_VOLATILE (var)\n-\t  || !COMPLETE_TYPE_P (type)\n-\t  || !host_integerp (TYPE_SIZE (type), 1)\n-          || tree_low_cst (TYPE_SIZE (type), 1) == 0\n-\t  || type_internals_preclude_sra_p (type)\n-\t  /* Fix for PR 41089.  tree-stdarg.c needs to have va_lists intact but\n+      if (!AGGREGATE_TYPE_P (type)) \n+        {\n+          reject (var, \"not aggregate\");\n+          continue;\n+\t}\n+      if (needs_to_live_in_memory (var))\n+        {\n+          reject (var, \"needs to live in memory\");\n+          continue;\n+        }\n+      if (TREE_THIS_VOLATILE (var))\n+        {\n+          reject (var, \"is volatile\");\n+\t  continue;\n+        }\n+      if (!COMPLETE_TYPE_P (type))\n+        {\n+          reject (var, \"has incomplete type\");\n+\t  continue;\n+        }\n+      if (!host_integerp (TYPE_SIZE (type), 1))\n+        {\n+          reject (var, \"type size not fixed\");\n+\t  continue;\n+        }\n+      if (tree_low_cst (TYPE_SIZE (type), 1) == 0)\n+        {\n+          reject (var, \"type size is zero\");\n+          continue;\n+        }\n+      if (type_internals_preclude_sra_p (type, &msg))\n+\t{\n+\t  reject (var, msg);\n+\t  continue;\n+\t}\n+      if (/* Fix for PR 41089.  tree-stdarg.c needs to have va_lists intact but\n \t      we also want to schedule it rather late.  Thus we ignore it in\n \t      the early pass. */\n-\t  || (sra_mode == SRA_MODE_EARLY_INTRA\n+\t  (sra_mode == SRA_MODE_EARLY_INTRA\n \t      && is_va_list_type (type)))\n-\tcontinue;\n+        {\n+\t  reject (var, \"is va_list\");\n+\t  continue;\n+\t}\n \n       bitmap_set_bit (candidate_bitmap, DECL_UID (var));\n \n@@ -3228,6 +3300,7 @@ find_param_candidates (void)\n   tree parm;\n   int count = 0;\n   bool ret = false;\n+  const char *msg;\n \n   for (parm = DECL_ARGUMENTS (current_function_decl);\n        parm;\n@@ -3268,7 +3341,7 @@ find_param_candidates (void)\n \t  || !host_integerp (TYPE_SIZE (type), 1)\n           || tree_low_cst (TYPE_SIZE (type), 1) == 0\n \t  || (AGGREGATE_TYPE_P (type)\n-\t      && type_internals_preclude_sra_p (type)))\n+\t      && type_internals_preclude_sra_p (type, &msg)))\n \tcontinue;\n \n       bitmap_set_bit (candidate_bitmap, DECL_UID (parm));"}]}