{"sha": "5da6a3837f88a9913e8b77656f34988f173b16af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRhNmEzODM3Zjg4YTk5MTNlOGI3NzY1NmYzNDk4OGYxNzNiMTZhZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-11T14:56:00Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-11T14:56:00Z"}, "message": "re PR target/50762 (ICE: in extract_insn, at recog.c:2137 (unrecognizable insn))\n\n\tPR target/50762\n\t* config/i386/constraints.md (j): New address constraint.\n\t* config/i386/predicates.md (lea_address_operand): Redefine as\n\tspecial predicate.\n\t* config/i386/i386.md (*lea_3_zext): Use \"j\" constraint for operand 1.\n\t(*lea_4_zext): Ditto.\n\nFrom-SVN: r181285", "tree": {"sha": "eab0833103d2b1d12fbc3d3f99f12c0a0db8e10c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eab0833103d2b1d12fbc3d3f99f12c0a0db8e10c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5da6a3837f88a9913e8b77656f34988f173b16af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da6a3837f88a9913e8b77656f34988f173b16af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da6a3837f88a9913e8b77656f34988f173b16af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da6a3837f88a9913e8b77656f34988f173b16af/comments", "author": null, "committer": null, "parents": [{"sha": "3fec7f10284ffde68826a66ce9e30abdbcdcc40d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fec7f10284ffde68826a66ce9e30abdbcdcc40d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fec7f10284ffde68826a66ce9e30abdbcdcc40d"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "4e1d96d611d1ff45dfcb4a4f665b8e0a4795d967", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da6a3837f88a9913e8b77656f34988f173b16af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da6a3837f88a9913e8b77656f34988f173b16af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5da6a3837f88a9913e8b77656f34988f173b16af", "patch": "@@ -1,3 +1,12 @@\n+2011-11-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/50762\n+\t* config/i386/constraints.md (j): New address constraint.\n+\t* config/i386/predicates.md (lea_address_operand): Redefine as\n+\tspecial predicate.\n+\t* config/i386/i386.md (*lea_3_zext): Use \"j\" constraint for operand 1.\n+\t(*lea_4_zext): Ditto.\n+\n 2011-11-11  David S. Miller  <davem@davemloft.net>\n \n \tRevert\n@@ -361,8 +370,7 @@\n \t* tree-sra.c (build_accesses_from_assign): Ignore clobbers.\n \t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Clobbers of\n \tSSA names aren't necessary.\n-\t(propagate_necessity): Accept and ignore constructors on the rhs,\n-\ttidy.\n+\t(propagate_necessity): Accept and ignore constructors on the rhs, tidy.\n \t* gimple.c (walk_gimple_op): Accept constructors like mem_rhs.\n \t* tree-ssa-structalias.c (find_func_aliases): Clobbers don't store\n \tany known value.\n@@ -424,8 +432,7 @@\n \t* trans-mem.c: New file.\n \t* trans-mem.h: New file.\n \n-\t* opts.c (finish_options): Error out when using -flto and\n-\t-fgnu-tm.\n+\t* opts.c (finish_options): Error out when using -flto and -fgnu-tm.\n \n \t* config/i386/i386.c: Define TARGET_VECTORIZE* transactional variants.\n \t(ix86_handle_tm_regparm_attribute, struct bdesc_tm,\n@@ -767,8 +774,7 @@\n 2011-11-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* dwarf2cfi.c (dwarf2out_frame_debug_expr): Check\n-\tHARD_FRAME_POINTER_REGNUM instead of hard_frame_pointer_rtx\n-\tin Rule 18.\n+\tHARD_FRAME_POINTER_REGNUM instead of hard_frame_pointer_rtx in Rule 18.\n \n 2011-11-07  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -801,8 +807,7 @@\n \t* tree-data-ref.h (initialize_data_dependence_relation,\n \tcompute_self_dependence): New prototypes.\n \t* tree-vect-data-refs.c (vect_check_gather): New function.\n-\t(vect_analyze_data_refs): Detect possible gather load data\n-\trefs.\n+\t(vect_analyze_data_refs): Detect possible gather load data refs.\n \t* tree-vectorizer.h (struct _stmt_vec_info): Add gather_p field.\n \t(STMT_VINFO_GATHER_P): Define.\n \t(vect_check_gather): New prototype.\n@@ -815,7 +820,7 @@\n \t(avx2_gathersi<mode>, *avx2_gathersi<mode>): Use <VEC_GATHER_IDXSI>\n \tinstead of <VEC_GATHER_MODE>.\n \t(avx2_gatherdi<mode>): Use <VEC_GATHER_IDXDI> instead of\n-\t<<AVXMODE48P_DI> and <VEC_GATHER_SRCDI> instead of VEC_GATHER_MODE\n+\t<AVXMODE48P_DI> and <VEC_GATHER_SRCDI> instead of VEC_GATHER_MODE\n \ton src and mask operands.\n \t(*avx2_gatherdi<mode>): Likewise.  Use VEC_GATHER_MODE iterator\n \tinstead of AVXMODE48P_DI.\n@@ -831,7 +836,7 @@\n \n 2011-11-07  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* config/i386/f16cintrin: Remove extra _X86INTRIN_H_INCLUDED check.\n+\t* config/i386/f16cintrin.h: Remove extra _X86INTRIN_H_INCLUDED check.\n \n 2011-11-07  Tristan Gingold  <gingold@adacore.com>\n \n@@ -1104,8 +1109,7 @@\n \n 2011-11-6  Richard Guenther  <rguenther@suse.de>\n \n-\t* ipa-prop.c (ipa_modify_call_arguments): Re-compute\n-\tinlinable flag.\n+\t* ipa-prop.c (ipa_modify_call_arguments): Re-compute inlinable flag.\n \n 2011-11-06  Ira Rosen  <ira.rosen@linaro.org>\n "}, {"sha": "941f48aa6e63ebe2af25fa607a57e4e1a1749e8d", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da6a3837f88a9913e8b77656f34988f173b16af/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da6a3837f88a9913e8b77656f34988f173b16af/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=5da6a3837f88a9913e8b77656f34988f173b16af", "patch": "@@ -19,7 +19,7 @@\n \n ;;; Unused letters:\n ;;;     B     H           T  W\n-;;;           h jk          v\n+;;;           h  k          v\n \n ;; Integer register constraints.\n ;; It is not necessary to define 'r' here.\n@@ -127,6 +127,11 @@\n   (and (not (match_test \"TARGET_X32\"))\n        (match_operand 0 \"memory_operand\")))\n \n+(define_address_constraint \"j\"\n+  \"@internal Address operand that can be zero extended in LEA instruction.\"\n+  (and (not (match_code \"const_int\"))\n+       (match_operand 0 \"address_operand\")))\n+\n ;; Integer constant constraints.\n (define_constraint \"I\"\n   \"Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\""}, {"sha": "377c78eec51240f8151320ad74a49177cc3c6ba6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da6a3837f88a9913e8b77656f34988f173b16af/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da6a3837f88a9913e8b77656f34988f173b16af/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5da6a3837f88a9913e8b77656f34988f173b16af", "patch": "@@ -5551,7 +5551,7 @@\n (define_insn \"*lea_3_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"p\") 0)))]\n+\t  (subreg:SI (match_operand:DI 1 \"lea_address_operand\" \"j\") 0)))]\n   \"TARGET_64BIT\"\n   \"lea{l}\\t{%a1, %k0|%k0, %a1}\"\n   [(set_attr \"type\" \"lea\")\n@@ -5560,7 +5560,7 @@\n (define_insn \"*lea_4_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (match_operand:SI 1 \"lea_address_operand\" \"p\")))]\n+\t  (match_operand:SI 1 \"lea_address_operand\" \"j\")))]\n   \"TARGET_64BIT\"\n   \"lea{l}\\t{%a1, %k0|%k0, %a1}\"\n   [(set_attr \"type\" \"lea\")"}, {"sha": "1dda585bfde2066f892e87560ecc435268879861", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da6a3837f88a9913e8b77656f34988f173b16af/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da6a3837f88a9913e8b77656f34988f173b16af/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=5da6a3837f88a9913e8b77656f34988f173b16af", "patch": "@@ -808,8 +808,9 @@\n        (match_operand 0 \"const0_operand\")))\n \n ;; Return true if op if a valid address for LEA, and does not contain\n-;; a segment override.\n-(define_predicate \"lea_address_operand\"\n+;; a segment override.  Defined as a special predicate to allow\n+;; mode-less const_int operands pass to address_operand.\n+(define_special_predicate \"lea_address_operand\"\n   (match_operand 0 \"address_operand\")\n {\n   struct ix86_address parts;"}]}