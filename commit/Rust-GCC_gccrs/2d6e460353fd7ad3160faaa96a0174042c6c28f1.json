{"sha": "2d6e460353fd7ad3160faaa96a0174042c6c28f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ2ZTQ2MDM1M2ZkN2FkMzE2MGZhYWE5NmEwMTc0MDQyYzZjMjhmMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-05-15T08:09:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-05-15T08:09:26Z"}, "message": "re PR c++/57038 (Latest libreoffice compilation fails with enabled LTO)\n\n\n\tPR lto/57038\n\tPR lto/47375\n\t* lto-symtab.c (lto_symtab_symbol_p): Add external symbol; weakrefs are\n\tnot external.\n\t(lto_symtab_merge_decls): Fix thinko when dealing with non-lto_symtab decls.\n\t(lto_symtab_merge_cgraph_nodes): Use lto_symtab_symbol_p.\n\t(lto_symtab_prevailing_decl): Get int sync with lto_symtab_symbol_p.\n\t* varpool.c (dump_varpool_node): Dump more flags.\n\n\t* lto-partition.c (get_symbol_class): Fix weakrefs.\n\t(lto_balanced_map): Fix weakrefs.\n\t(privatize_symbol_name): Remove unnecesary label.\n\t(rename_statics): Handle weakrefs as statics.\n\n\t* gcc.dg/lto/attr-weakref-1_0.c: New testcase.\n\t* gcc.dg/lto/attr-weakref-1_1.c: New testcase.\n\t* gcc.dg/lto/attr-weakref-1_2.c: New testcase.\n\nFrom-SVN: r198917", "tree": {"sha": "b5bf9542ac17e96b9f1eab08c77364e8adba45c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5bf9542ac17e96b9f1eab08c77364e8adba45c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d6e460353fd7ad3160faaa96a0174042c6c28f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6e460353fd7ad3160faaa96a0174042c6c28f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d6e460353fd7ad3160faaa96a0174042c6c28f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d6e460353fd7ad3160faaa96a0174042c6c28f1/comments", "author": null, "committer": null, "parents": [{"sha": "83f44b399712cc22564013b42bb6976ef60895c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f44b399712cc22564013b42bb6976ef60895c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f44b399712cc22564013b42bb6976ef60895c4"}], "stats": {"total": 131, "additions": 112, "deletions": 19}, "files": [{"sha": "f3daf5ad6686e04addca230fd0ed11b74b1bb369", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d6e460353fd7ad3160faaa96a0174042c6c28f1", "patch": "@@ -1,3 +1,14 @@\n+2013-05-15  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/57038\n+\tPR lto/47375\n+\t* lto-symtab.c (lto_symtab_symbol_p): Add external symbol; weakrefs are\n+\tnot external.\n+\t(lto_symtab_merge_decls): Fix thinko when dealing with non-lto_symtab decls.\n+\t(lto_symtab_merge_cgraph_nodes): Use lto_symtab_symbol_p.\n+\t(lto_symtab_prevailing_decl): Get int sync with lto_symtab_symbol_p.\n+\t* varpool.c (dump_varpool_node): Dump more flags.\n+\n 2013-05-15  Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \n \t* config/i386/i386.c (processor_alias_table): Add instruction"}, {"sha": "e33ed465c09c5221efeef211ba6fb753b93aab78", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=2d6e460353fd7ad3160faaa96a0174042c6c28f1", "patch": "@@ -227,13 +227,16 @@ lto_symtab_resolve_replaceable_p (symtab_node e)\n }\n \n /* Return true, if the symbol E should be resolved by lto-symtab.\n-   Those are all real symbols that are not static (we handle renaming\n-   of static later in partitioning).  */\n+   Those are all external symbols and all real symbols that are not static (we\n+   handle renaming of static later in partitioning).  */\n \n static bool\n lto_symtab_symbol_p (symtab_node e)\n {\n-  if (!TREE_PUBLIC (e->symbol.decl))\n+  if (!TREE_PUBLIC (e->symbol.decl) && !DECL_EXTERNAL (e->symbol.decl))\n+    return false;\n+  /* weakrefs are really static variables that are made external by a hack.  */\n+  if (lookup_attribute (\"weakref\", DECL_ATTRIBUTES (e->symbol.decl)))\n     return false;\n   return symtab_real_symbol_p (e);\n }\n@@ -528,10 +531,19 @@ lto_symtab_merge_decls (void)\n   symtab_initialize_asm_name_hash ();\n \n   FOR_EACH_SYMBOL (node)\n-    if (TREE_PUBLIC (node->symbol.decl)\n-\t&& node->symbol.next_sharing_asm_name\n-\t&& !node->symbol.previous_sharing_asm_name)\n-    lto_symtab_merge_decls_1 (node);\n+    if (lto_symtab_symbol_p (node)\n+\t&& node->symbol.next_sharing_asm_name)\n+      {\n+        symtab_node n;\n+\n+\t/* To avoid duplicated work, see if this is first real symbol in the\n+\t   chain.  */\n+\tfor (n = node->symbol.previous_sharing_asm_name;\n+\t     n && !lto_symtab_symbol_p (n); n = n->symbol.previous_sharing_asm_name)\n+\t  ;\n+\tif (!n)\n+          lto_symtab_merge_decls_1 (node);\n+      }\n }\n \n /* Helper to process the decl chain for the symbol table entry *SLOT.  */\n@@ -574,7 +586,7 @@ lto_symtab_merge_cgraph_nodes (void)\n \n   if (!flag_ltrans)\n     FOR_EACH_SYMBOL (node)\n-      if (TREE_PUBLIC (node->symbol.decl)\n+      if (lto_symtab_symbol_p (node)\n \t  && node->symbol.next_sharing_asm_name\n \t  && !node->symbol.previous_sharing_asm_name)\n         lto_symtab_merge_cgraph_nodes_1 (node);\n@@ -602,7 +614,7 @@ lto_symtab_prevailing_decl (tree decl)\n   symtab_node ret;\n \n   /* Builtins and local symbols are their own prevailing decl.  */\n-  if (!TREE_PUBLIC (decl) || is_builtin_fn (decl))\n+  if ((!TREE_PUBLIC (decl) && !DECL_EXTERNAL (decl)) || is_builtin_fn (decl))\n     return decl;\n \n   /* DECL_ABSTRACTs are their own prevailng decl.  */\n@@ -614,6 +626,11 @@ lto_symtab_prevailing_decl (tree decl)\n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_BUILT_IN (decl))\n     return decl;\n \n+  /* As an anoying special cases weakrefs are really static variables with\n+     EXTERNAL flag.  */\n+  if (lookup_attribute (\"weakref\", DECL_ATTRIBUTES (decl)))\n+    return decl;\n+\n   /* Ensure DECL_ASSEMBLER_NAME will not set assembler name.  */\n   gcc_assert (DECL_ASSEMBLER_NAME_SET_P (decl));\n "}, {"sha": "9a86b4958d74130ab324d44e32fdce889e675f2f", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=2d6e460353fd7ad3160faaa96a0174042c6c28f1", "patch": "@@ -1,3 +1,12 @@\n+2013-05-15  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/57038\n+\tPR lto/47375\n+\t* lto-partition.c (get_symbol_class): Fix weakrefs.\n+\t(lto_balanced_map): Fix weakrefs.\n+\t(privatize_symbol_name): Remove unnecesary label.\n+\t(rename_statics): Handle weakrefs as statics.\n+\n 2013-05-09  Jan Hubicka  <jh@suse.cz>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "acf8f2902370fea4807a467ca808d9fe1ee9f05f", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=2d6e460353fd7ad3160faaa96a0174042c6c28f1", "patch": "@@ -59,6 +59,10 @@ get_symbol_class (symtab_node node)\n   if (cnode && cnode->global.inlined_to)\n     return SYMBOL_DUPLICATE;\n \n+  /* Weakref aliases are always duplicated.  */\n+  if (lookup_attribute (\"weakref\", DECL_ATTRIBUTES (node->symbol.decl)))\n+    return SYMBOL_DUPLICATE;\n+\n   /* External declarations are external.  */\n   if (DECL_EXTERNAL (node->symbol.decl))\n     return SYMBOL_EXTERNAL;\n@@ -79,10 +83,6 @@ get_symbol_class (symtab_node node)\n   else if (!cgraph (node)->analyzed)\n     return SYMBOL_EXTERNAL;\n \n-  /* Weakref aliases are always duplicated.  */\n-  if (lookup_attribute (\"weakref\", DECL_ATTRIBUTES (node->symbol.decl)))\n-    return SYMBOL_DUPLICATE;\n-\n   /* Comdats are duplicated to every use unless they are keyed.\n      Those do not need duplication.  */\n   if (DECL_COMDAT (node->symbol.decl)\n@@ -561,7 +561,8 @@ lto_balanced_map (void)\n \n \t      last_visited_node++;\n \n-\t      gcc_assert (node->analyzed);\n+\t      gcc_assert (node->analyzed\n+\t\t\t  || lookup_attribute (\"weakref\", DECL_ATTRIBUTES (node->symbol.decl)));\n \n \t      /* Compute boundary cost of callgraph edges.  */\n \t      for (edge = node->callees; edge; edge = edge->next_callee)\n@@ -768,7 +769,6 @@ privatize_symbol_name (symtab_node node)\n {\n   tree decl = node->symbol.decl;\n   const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  char *label;\n \n   /* Our renaming machinery do not handle more than one change of assembler name.\n      We should not need more than one anyway.  */\n@@ -793,7 +793,6 @@ privatize_symbol_name (symtab_node node)\n \t\tname);\n       return;\n     }\n-  ASM_FORMAT_PRIVATE_NAME (label, name, DECL_UID (decl));\n   change_decl_assembler_name (decl, clone_function_name (decl, \"lto_priv\"));\n   if (node->symbol.lto_file_data)\n     lto_record_renamed_decl (node->symbol.lto_file_data, name,\n@@ -869,7 +868,8 @@ rename_statics (lto_symtab_encoder_t encoder, symtab_node node)\n \t once this is fixed.  */\n         || DECL_EXTERNAL (node->symbol.decl)\n         || !symtab_real_symbol_p (node))\n-       && !may_need_named_section_p (encoder, node))\n+       && !may_need_named_section_p (encoder, node)\n+       && !lookup_attribute (\"weakref\", DECL_ATTRIBUTES (node->symbol.decl)))\n     return;\n \n   /* Now walk symbols sharing the same name and see if there are any conflicts.\n@@ -894,9 +894,11 @@ rename_statics (lto_symtab_encoder_t encoder, symtab_node node)\n   /* Assign every symbol in the set that shares the same ASM name an unique\n      mangled name.  */\n   for (s = symtab_node_for_asm (name); s;)\n-    if (!s->symbol.externally_visible\n+    if ((!s->symbol.externally_visible\n+\t || lookup_attribute (\"weakref\", DECL_ATTRIBUTES (node->symbol.decl)))\n \t&& ((symtab_real_symbol_p (s)\n-             && !DECL_EXTERNAL (node->symbol.decl)\n+             && (!DECL_EXTERNAL (node->symbol.decl)\n+\t         || lookup_attribute (\"weakref\", DECL_ATTRIBUTES (node->symbol.decl)))\n \t     && !TREE_PUBLIC (node->symbol.decl))\n  \t    || may_need_named_section_p (encoder, s))\n \t&& (!encoder"}, {"sha": "383dc9d9d9c288b9dfd2f620c1ab40d69624cae1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d6e460353fd7ad3160faaa96a0174042c6c28f1", "patch": "@@ -1,3 +1,9 @@\n+2013-05-15  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/lto/attr-weakref-1_0.c: New testcase.\n+\t* gcc.dg/lto/attr-weakref-1_1.c: New testcase.\n+\t* gcc.dg/lto/attr-weakref-1_2.c: New testcase.\n+\n 2013-05-14  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.dg/torture/alias-1.c: Add dg-require-effective-target"}, {"sha": "15d1ac74c993a7427f35feb02ba67059f66a5478", "filename": "gcc/testsuite/g++.dg/torture/20070621-1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C?ref=2d6e460353fd7ad3160faaa96a0174042c6c28f1", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n /* Reduced from libstdc++-v3/testsuite/25_algorithms/equal/1.cc\n \n 1.2.ii: In function 'void test1()':"}, {"sha": "1e02f68f2c1583f3267dd9bedc418010ec2205aa", "filename": "gcc/testsuite/gcc.dg/lto/attr-weakref-1_0.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fattr-weakref-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fattr-weakref-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fattr-weakref-1_0.c?ref=2d6e460353fd7ad3160faaa96a0174042c6c28f1", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-lto-do run } */\n+int first = 0;\n+void abort (void);\n+int second = 0;\n+void callmealias (void)\n+{\n+  if (!first || !second)\n+   abort ();\n+}\n+void callmefirst (void)\n+{\n+  if (first)\n+    abort();\n+  first = 1;\n+}\n+void callmesecond (void)\n+{\n+  if (!first)\n+    abort();\n+  if (second)\n+    abort();\n+  second = 1;\n+}\n+main()\n+{\n+  c();\n+  b();\n+  return 0;\n+}"}, {"sha": "67e6e1c1fdc1940556b45cd646e54730e30852a1", "filename": "gcc/testsuite/gcc.dg/lto/attr-weakref-1_1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fattr-weakref-1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fattr-weakref-1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fattr-weakref-1_1.c?ref=2d6e460353fd7ad3160faaa96a0174042c6c28f1", "patch": "@@ -0,0 +1,7 @@\n+extern void callmesecond();\n+static void callmealias() __attribute__((weakref (\"callmesecond\")));\n+\n+b()\n+{\n+  callmealias();\n+}"}, {"sha": "6f382f61e5e9c68d46788ab8bee82add3a81aef2", "filename": "gcc/testsuite/gcc.dg/lto/attr-weakref-1_2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fattr-weakref-1_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fattr-weakref-1_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fattr-weakref-1_2.c?ref=2d6e460353fd7ad3160faaa96a0174042c6c28f1", "patch": "@@ -0,0 +1,7 @@\n+extern void callmefirst();\n+static void callmealias() __attribute__((weakref (\"callmefirst\")));\n+\n+c()\n+{\n+  callmealias();\n+}"}, {"sha": "e3ad22b1cfdb469432312991cb7b5a3a22180ec3", "filename": "gcc/varpool.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d6e460353fd7ad3160faaa96a0174042c6c28f1/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=2d6e460353fd7ad3160faaa96a0174042c6c28f1", "patch": "@@ -86,6 +86,10 @@ dump_varpool_node (FILE *f, struct varpool_node *node)\n     fprintf (f, \" finalized\");\n   if (node->output)\n     fprintf (f, \" output\");\n+  if (TREE_READONLY (node->symbol.decl))\n+    fprintf (f, \" read-only\");\n+  if (const_value_known_p (node->symbol.decl))\n+    fprintf (f, \" const-value-known\");\n   fprintf (f, \"\\n\");\n }\n "}]}