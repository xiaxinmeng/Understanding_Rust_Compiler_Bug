{"sha": "ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEyMDM0NjEwZmNjMGQ1NmRkNTJjYjIwYzI2ZjlhYjE5OTdiNTIwZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-01-01T20:19:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-03T10:01:26Z"}, "message": "[Ada] Remove ASIS tree generation\n\n2020-06-03  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* aspects.adb, aspects.ads, atree.adb, atree.ads, elists.adb,\n\telists.ads, fname.adb, fname.ads, gnat1drv.adb, lib.adb,\n\tlib.ads, namet.adb, namet.ads, nlists.adb, nlists.ads, opt.adb,\n\topt.ads, osint-c.adb, osint-c.ads, repinfo.adb, repinfo.ads,\n\tsem_aux.adb, sem_aux.ads, sinput.adb, sinput.ads, stand.ads,\n\tstringt.adb, stringt.ads, switch-c.adb, table.adb, table.ads,\n\tuintp.adb, uintp.ads, urealp.adb, urealp.ads (Tree_Read,\n\tTree_Write): Remove generation of ASIS trees.\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n\tRemove -gnatt and -gnatct documentation.\n\t* gnat_ugn.texi: Regenerate.\n\t* tree_in.ads, tree_in.adb, tree_io.ads, tree_io.adb,\n\ttree_gen.ads, tree_gen.adb, stand.adb: Remove.\n\t* gcc-interface/Makefile.in, gcc-interface/Make-lang.in: Remove\n\treferences to tree_gen.o tree_in.o tree_io.o.", "tree": {"sha": "5260826d088dfa1346429c93e923ffd7866428bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5260826d088dfa1346429c93e923ffd7866428bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bad8184e3e16dfd4d30099e18e443c4a54b97c83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad8184e3e16dfd4d30099e18e443c4a54b97c83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad8184e3e16dfd4d30099e18e443c4a54b97c83"}], "stats": {"total": 2316, "additions": 36, "deletions": 2280}, "files": [{"sha": "2968e21be541bfbb706dc9edd5b761ed77302d7f", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -33,7 +33,6 @@ with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Nlists;   use Nlists;\n with Sinfo;    use Sinfo;\n-with Tree_IO;  use Tree_IO;\n \n with GNAT.HTable;\n \n@@ -70,16 +69,6 @@ package body Aspects is\n       Aspect_Variable_Indexing    => True,\n       others                      => False);\n \n-   procedure Set_Aspect_Specifications_No_Check (N : Node_Id; L : List_Id);\n-   --  Same as Set_Aspect_Specifications, but does not contain the assertion\n-   --  that checks that N does not already have aspect specifications. This\n-   --  subprogram is supposed to be used as a part of Tree_Read. When reading\n-   --  tree, first read nodes with their basic properties (as Atree.Tree_Read),\n-   --  this includes reading the Has_Aspects flag for each node, then we reed\n-   --  all the list tables and only after that we call Tree_Read for Aspects.\n-   --  That is, when reading the tree, the list of aspects is attached to the\n-   --  node that already has Has_Aspects flag set ON.\n-\n    ------------------------------------------\n    -- Hash Table for Aspect Specifications --\n    ------------------------------------------\n@@ -662,53 +651,6 @@ package body Aspects is\n       Aspect_Specifications_Hash_Table.Set (N, L);\n    end Set_Aspect_Specifications;\n \n-   ----------------------------------------\n-   -- Set_Aspect_Specifications_No_Check --\n-   ----------------------------------------\n-\n-   procedure Set_Aspect_Specifications_No_Check (N : Node_Id; L : List_Id) is\n-   begin\n-      pragma Assert (Permits_Aspect_Specifications (N));\n-      pragma Assert (L /= No_List);\n-\n-      Set_Has_Aspects (N);\n-      Set_Parent (L, N);\n-      Aspect_Specifications_Hash_Table.Set (N, L);\n-   end Set_Aspect_Specifications_No_Check;\n-\n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-      Node : Node_Id;\n-      List : List_Id;\n-   begin\n-      loop\n-         Tree_Read_Int (Int (Node));\n-         Tree_Read_Int (Int (List));\n-         exit when List = No_List;\n-         Set_Aspect_Specifications_No_Check (Node, List);\n-      end loop;\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-      Node : Node_Id := Empty;\n-      List : List_Id;\n-   begin\n-      Aspect_Specifications_Hash_Table.Get_First (Node, List);\n-      loop\n-         Tree_Write_Int (Int (Node));\n-         Tree_Write_Int (Int (List));\n-         exit when List = No_List;\n-         Aspect_Specifications_Hash_Table.Get_Next (Node, List);\n-      end loop;\n-   end Tree_Write;\n-\n --  Package initialization sets up Aspect Id hash table\n \n begin"}, {"sha": "5766cdd5540b5005fa67728a761f833eed64d02e", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -959,10 +959,4 @@ package Aspects is\n    --  node that has its Has_Aspects flag set True on entry, or with L being an\n    --  empty list or No_List.\n \n-   procedure Tree_Read;\n-   --  Reads contents of Aspect_Specifications hash table from the tree file\n-\n-   procedure Tree_Write;\n-   --  Writes contents of Aspect_Specifications hash table to the tree file\n-\n end Aspects;"}, {"sha": "5619f09046f8795a7991109b2f4b3d5f0cfee657", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -42,7 +42,6 @@ with Nlists;  use Nlists;\n with Opt;     use Opt;\n with Output;  use Output;\n with Sinput;  use Sinput;\n-with Tree_IO; use Tree_IO;\n \n with GNAT.Heap_Sort_G;\n \n@@ -2686,32 +2685,6 @@ package body Atree is\n       Discard := Traverse (Node);\n    end Traverse_Proc;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      Tree_Read_Int (Node_Count);\n-      Nodes.Tree_Read;\n-      Flags.Tree_Read;\n-      Orig_Nodes.Tree_Read;\n-      Paren_Counts.Tree_Read;\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      Tree_Write_Int (Node_Count);\n-      Nodes.Tree_Write;\n-      Flags.Tree_Write;\n-      Orig_Nodes.Tree_Write;\n-      Paren_Counts.Tree_Write;\n-   end Tree_Write;\n-\n    ------------------------------\n    -- Unchecked Access Package --\n    ------------------------------"}, {"sha": "f9ebc38e5549898f3b5ae2e76c06cde73e515107", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -406,8 +406,7 @@ package Atree is\n    procedure Initialize;\n    --  Called at the start of compilation to initialize the allocation of\n    --  the node and list tables and make the standard entries for Empty,\n-   --  Error and Error_List. Note that Initialize must not be called if\n-   --  Tree_Read is used.\n+   --  Error and Error_List.\n \n    procedure Lock;\n    --  Called before the back end is invoked to lock the nodes table\n@@ -425,15 +424,6 @@ package Atree is\n    --  Called to unlock entity modifications when assertions are enabled; if\n    --  assertions are not enabled calling this subprogram has no effect.\n \n-   procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using the relevant\n-   --  Table.Tree_Read routines. Note that Initialize should not be called if\n-   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n-\n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using the relevant\n-   --  Table.Tree_Write routines.\n-\n    function New_Node\n      (New_Node_Kind : Node_Kind;\n       New_Sloc      : Source_Ptr) return Node_Id;"}, {"sha": "368cb8666f2a21eb8faa6082a9382aea66180fb1", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -1910,10 +1910,6 @@ Alphabetical List of All Switches\n   Note that this option should be used only for compiling -- the\n   code is likely to malfunction at run time.\n \n-  Note that when :switch:`-gnatct` is used to generate trees for input\n-  into ASIS tools, these representation clauses are removed\n-  from the tree and ignored. This means that the tool will not see them.\n-\n \n .. index:: -gnatjnn  (gcc)\n \n@@ -2112,12 +2108,6 @@ Alphabetical List of All Switches\n   Print package Standard.\n \n \n-.. index:: -gnatt  (gcc)\n-\n-:switch:`-gnatt`\n-  Generate tree output file.\n-\n-\n .. index:: -gnatT  (gcc)\n \n :switch:`-gnatT{nnn}`\n@@ -2600,14 +2590,6 @@ format:\n   implies :switch:`-gnatq`, since the semantic phase must be run to get a\n   meaningful ALI file.\n \n-  In addition, if :switch:`-gnatt` is also specified, then the tree file is\n-  generated even if there are illegalities. It may be useful in this case\n-  to also specify :switch:`-gnatq` to ensure that full semantic processing\n-  occurs. The resulting tree file can be processed by ASIS, for the purpose\n-  of providing partial information about illegal units, but if the error\n-  causes the tree to be badly malformed, then ASIS may crash during the\n-  analysis.\n-\n   When :switch:`-gnatQ` is used and the generated :file:`ALI` file is marked as\n   being in error, ``gnatmake`` will attempt to recompile the source when it\n   finds such an :file:`ALI` file, including with switch :switch:`-gnatc`.\n@@ -5695,21 +5677,6 @@ Subprogram Inlining Control\n Auxiliary Output Control\n ------------------------\n \n-.. index:: -gnatt  (gcc)\n-.. index:: Writing internal trees\n-.. index:: Internal trees, writing to file\n-\n-:switch:`-gnatt`\n-  Causes GNAT to write the internal tree for a unit to a file (with the\n-  extension :file:`.adt`.\n-  This not normally required, but is used by separate analysis tools.\n-  Typically\n-  these tools do the necessary compilations automatically, so you should\n-  not have to specify this switch in normal operation.\n-  Note that the combination of switches :switch:`-gnatct`\n-  generates a tree in the form required by ASIS applications.\n-\n-\n .. index:: -gnatu  (gcc)\n \n :switch:`-gnatu`"}, {"sha": "90bcd2ee225c8d97ce5ade05acb383a992a35d28", "filename": "gcc/ada/elists.adb", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Felists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Felists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Felists.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -580,26 +580,6 @@ package body Elists is\n       Elmts.Table (Elmt).Node := New_Node;\n    end Replace_Elmt;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      Elists.Tree_Read;\n-      Elmts.Tree_Read;\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      Elists.Tree_Write;\n-      Elmts.Tree_Write;\n-   end Tree_Write;\n-\n    ------------\n    -- Unlock --\n    ------------"}, {"sha": "12672a69385bf8b672530c9454961d2b07d59006", "filename": "gcc/ada/elists.ads", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Felists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Felists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Felists.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -57,24 +57,14 @@ package Elists is\n \n    procedure Initialize;\n    --  Initialize allocation of element list tables. Called at the start of\n-   --  compiling each new main source file. Note that Initialize must not be\n-   --  called if Tree_Read is used.\n+   --  compiling each new main source file.\n \n    procedure Lock;\n    --  Lock tables used for element lists before calling backend\n \n    procedure Unlock;\n    --  Unlock list tables, in cases where the back end needs to modify them\n \n-   procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using the relevant\n-   --  Table.Tree_Read routines. Note that Initialize should not be called if\n-   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n-\n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using the relevant\n-   --  Table.Tree_Write routines.\n-\n    function Last_Elist_Id return Elist_Id;\n    --  Returns Id of last allocated element list header\n "}, {"sha": "ad316eb4b72b8e860a7f41e8151284caa4301895", "filename": "gcc/ada/fname.adb", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Ffname.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Ffname.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffname.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -29,34 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Alloc;\n-with Table;\n-with Types; use Types;\n-\n package body Fname is\n \n-   -----------------------------\n-   -- Dummy Table Definitions --\n-   -----------------------------\n-\n-   --  The following table was used in old versions of the compiler. We retain\n-   --  the declarations here for compatibility with old tree files. The new\n-   --  version of the compiler does not use this table, and will write out a\n-   --  dummy empty table for Tree_Write.\n-\n-   type SFN_Entry is record\n-      U : Unit_Name_Type;\n-      F : File_Name_Type;\n-   end record;\n-\n-   package SFN_Table is new Table.Table (\n-     Table_Component_Type => SFN_Entry,\n-     Table_Index_Type     => Int,\n-     Table_Low_Bound      => 0,\n-     Table_Initial        => Alloc.SFN_Table_Initial,\n-     Table_Increment      => Alloc.SFN_Table_Increment,\n-     Table_Name           => \"Fname_Dummy_Table\");\n-\n    function Has_Internal_Extension (Fname : String) return Boolean;\n    pragma Inline (Has_Internal_Extension);\n    --  True if the extension is appropriate for an internal/predefined unit.\n@@ -268,22 +242,4 @@ package body Fname is\n       return Result;\n    end Is_Predefined_Renaming_File_Name;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      SFN_Table.Tree_Read;\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      SFN_Table.Tree_Write;\n-   end Tree_Write;\n-\n end Fname;"}, {"sha": "06a77f1a100d2f25a60b104f1f4bb29cc061bb6b", "filename": "gcc/ada/fname.ads", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Ffname.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Ffname.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffname.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -100,14 +100,4 @@ package Fname is\n    function Is_GNAT_File_Name (Fname : File_Name_Type) return Boolean;\n    --  True for units in the GNAT hierarchy\n \n-   procedure Tree_Read;\n-   --  Dummy procedure (reads dummy table values from tree file)\n-\n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using Tree_Write\n-   --  This is actually a dummy routine, since the relevant table is\n-   --  no longer used, but we retain it for now, to avoid a tree file\n-   --  incompatibility with the 3.13 compiler. Should be removed for\n-   --  the 3.14a release ???\n-\n end Fname;"}, {"sha": "2e0f6b42e6425792cb483c0854ef4e33d00d3032", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -472,9 +472,6 @@ GNAT_ADA_OBJS =\t\\\n  ada/table.o\t\\\n  ada/targparm.o\t\\\n  ada/tbuild.o\t\\\n- ada/tree_gen.o\t\\\n- ada/tree_in.o\t\\\n- ada/tree_io.o\t\\\n  ada/treepr.o\t\\\n  ada/treeprs.o\t\\\n  ada/ttypes.o\t\\\n@@ -632,7 +629,6 @@ GNATBIND_OBJS = \\\n  ada/table.o      \\\n  ada/targext.o    \\\n  ada/targparm.o   \\\n- ada/tree_io.o    \\\n  ada/types.o      \\\n  ada/uintp.o      \\\n  ada/uname.o      \\\n@@ -1040,7 +1036,7 @@ ada/sdefault.o : ada/libgnat/ada.ads ada/libgnat/a-except.ads ada/libgnat/a-uncc\n    ada/libgnat/s-exctab.ads ada/libgnat/s-memory.ads ada/libgnat/s-os_lib.ads ada/libgnat/s-parame.ads \\\n    ada/libgnat/s-stalib.ads ada/libgnat/s-strops.ads ada/libgnat/s-sopco3.ads ada/libgnat/s-sopco4.ads \\\n    ada/libgnat/s-sopco5.ads ada/libgnat/s-string.ads ada/libgnat/s-traent.ads ada/libgnat/s-unstyp.ads \\\n-   ada/libgnat/s-wchcon.ads ada/libgnat/system.ads ada/table.adb ada/table.ads ada/tree_io.ads \\\n+   ada/libgnat/s-wchcon.ads ada/libgnat/system.ads ada/table.adb ada/table.ads \\\n    ada/types.ads ada/libgnat/unchdeal.ads ada/libgnat/unchconv.ads\n \n # Special flags - see gcc-interface/Makefile.in for the template."}, {"sha": "6177d7569e36f7fb84490fea5a63c650999ca29f", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -318,7 +318,7 @@ GNATLINK_OBJS = gnatlink.o \\\n  a-except.o ali.o alloc.o butil.o casing.o csets.o debug.o fmap.o fname.o \\\n  gnatvsn.o hostparm.o indepsw.o interfac.o i-c.o i-cstrin.o namet.o opt.o \\\n  osint.o output.o rident.o s-exctab.o s-secsta.o s-stalib.o s-stoele.o \\\n- sdefault.o snames.o stylesw.o switch.o system.o table.o targparm.o tree_io.o \\\n+ sdefault.o snames.o stylesw.o switch.o system.o table.o targparm.o \\\n  types.o validsw.o widechar.o\n \n GNATMAKE_OBJS = a-except.o ali.o ali-util.o aspects.o s-casuti.o alloc.o \\\n@@ -330,7 +330,7 @@ GNATMAKE_OBJS = a-except.o ali.o ali-util.o aspects.o s-casuti.o alloc.o \\\n  s-secsta.o s-stalib.o s-stoele.o scans.o scng.o sdefault.o sfn_scan.o \\\n  s-purexc.o s-htable.o scil_ll.o sem_aux.o sinfo.o sinput.o sinput-c.o \\\n  snames.o stand.o stringt.o styleg.o stylesw.o system.o validsw.o \\\n- switch.o switch-m.o table.o targparm.o tempdir.o tree_io.o types.o uintp.o \\\n+ switch.o switch-m.o table.o targparm.o tempdir.o types.o uintp.o \\\n  uname.o urealp.o usage.o widechar.o \\\n  $(EXTRA_GNATMAKE_OBJS)\n "}, {"sha": "365ddd0f669bad4e04f7ab95e4d667d23154fe1d", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -74,7 +74,6 @@ with Stringt;\n with Stylesw;   use Stylesw;\n with Targparm;  use Targparm;\n with Tbuild;\n-with Tree_Gen;\n with Treepr;    use Treepr;\n with Ttypes;\n with Types;     use Types;\n@@ -380,7 +379,7 @@ procedure Gnat1drv is\n          --  Always perform semantics and generate ali files in CodePeer mode,\n          --  so that a gnatmake -c -k will proceed further when possible.\n \n-         Force_ALI_Tree_File := True;\n+         Force_ALI_File := True;\n          Try_Semantics := True;\n \n          --  Make the Ada front end more liberal so that the compiler will\n@@ -1271,9 +1270,8 @@ begin\n \n          --  Generate ALI file if specially requested\n \n-         if Opt.Force_ALI_Tree_File then\n+         if Opt.Force_ALI_File then\n             Write_ALI (Object => False);\n-            Tree_Gen;\n          end if;\n \n          Exit_Program (E_Errors);\n@@ -1308,7 +1306,6 @@ begin\n          Treepr.Tree_Dump;\n          Errout.Finalize (Last_Call => True);\n          Errout.Output_Messages;\n-         Tree_Gen;\n          Namet.Finalize;\n          Check_Rep_Info;\n \n@@ -1461,7 +1458,7 @@ begin\n \n                --  Force generation of ALI file, for backward compatibility\n \n-               Opt.Force_ALI_Tree_File := True;\n+               Opt.Force_ALI_File := True;\n \n             elsif Main_Unit_Kind = N_Subunit then\n                Write_Str (\" (subunit)\");\n@@ -1483,7 +1480,7 @@ begin\n \n                --  Force generation of ALI file, for backward compatibility\n \n-               Opt.Force_ALI_Tree_File := True;\n+               Opt.Force_ALI_File := True;\n \n             --  Only other case is a package spec\n \n@@ -1499,7 +1496,6 @@ begin\n          Errout.Finalize (Last_Call => True);\n          Errout.Output_Messages;\n          Treepr.Tree_Dump;\n-         Tree_Gen;\n \n          --  Generate ALI file if specially requested, or for missing subunits,\n          --  subunits or predefined generic. For ignored ghost code, the object\n@@ -1508,7 +1504,7 @@ begin\n          --  an object file without an ALI file.\n \n          if Is_Ignored_Ghost_Unit (Main_Unit_Node)\n-           or else Opt.Force_ALI_Tree_File\n+           or else Opt.Force_ALI_File\n          then\n             Write_ALI (Object => Is_Ignored_Ghost_Unit (Main_Unit_Node));\n          end if;\n@@ -1523,8 +1519,8 @@ begin\n          Exit_Program (Ecode);\n       end if;\n \n-      --  In -gnatc mode we only do annotation if -gnatt or -gnatR is also set,\n-      --  or if -gnatwz is enabled (default setting) and there is an unchecked\n+      --  In -gnatc mode we only do annotation if -gnatR is also set, or if\n+      --  -gnatwz is enabled (default setting) and there is an unchecked\n       --  conversion that involves a type whose size is not statically known,\n       --  as indicated by Back_Annotate_Rep_Info being set to True.\n \n@@ -1547,7 +1543,6 @@ begin\n          Errout.Output_Messages;\n          Write_ALI (Object => False);\n          Tree_Dump;\n-         Tree_Gen;\n          Namet.Finalize;\n \n          if not (Generate_SCIL or GNATprove_Mode) then\n@@ -1670,11 +1665,8 @@ begin\n       --  fact result in further tree decoration from the original tree file.\n       --  Note that we dump the tree just before generating it, so that the\n       --  dump will exactly reflect what is written out.\n-      --  Should we remove Tree_Dump completely now that ASIS is no longer\n-      --  supported???\n \n       Treepr.Tree_Dump;\n-      Tree_Gen;\n \n       --  Finalize name table and we are all done\n "}, {"sha": "703b737831016103052c4de54cddf740f045d886", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Dec 10, 2019\n+GNAT User's Guide for Native Platforms , May 04, 2020\n \n AdaCore\n \n@@ -9686,10 +9686,6 @@ Object_Size, Scalar_Storage_Order, Size, Small, Stream_Size,\n and Value_Size. Pragma Default_Scalar_Storage_Order is also ignored.\n Note that this option should be used only for compiling -- the\n code is likely to malfunction at run time.\n-\n-Note that when @code{-gnatct} is used to generate trees for input\n-into ASIS tools, these representation clauses are removed\n-from the tree and ignored. This means that the tool will not see them.\n @end table\n \n @geindex -gnatjnn (gcc)\n@@ -10019,16 +10015,6 @@ Syntax check only.\n Print package Standard.\n @end table\n \n-@geindex -gnatt (gcc)\n-\n-\n-@table @asis\n-\n-@item @code{-gnatt}\n-\n-Generate tree output file.\n-@end table\n-\n @geindex -gnatT (gcc)\n \n \n@@ -10715,14 +10701,6 @@ environments) that are driven from the @code{ALI} file. This switch\n implies @code{-gnatq}, since the semantic phase must be run to get a\n meaningful ALI file.\n \n-In addition, if @code{-gnatt} is also specified, then the tree file is\n-generated even if there are illegalities. It may be useful in this case\n-to also specify @code{-gnatq} to ensure that full semantic processing\n-occurs. The resulting tree file can be processed by ASIS, for the purpose\n-of providing partial information about illegal units, but if the error\n-causes the tree to be badly malformed, then ASIS may crash during the\n-analysis.\n-\n When @code{-gnatQ} is used and the generated @code{ALI} file is marked as\n being in error, @code{gnatmake} will attempt to recompile the source when it\n finds such an @code{ALI} file, including with switch @code{-gnatc}.\n@@ -14899,28 +14877,6 @@ inlining, but that is no longer the case.\n @subsection Auxiliary Output Control\n \n \n-@geindex -gnatt (gcc)\n-\n-@geindex Writing internal trees\n-\n-@geindex Internal trees\n-@geindex writing to file\n-\n-\n-@table @asis\n-\n-@item @code{-gnatt}\n-\n-Causes GNAT to write the internal tree for a unit to a file (with the\n-extension @code{.adt}.\n-This not normally required, but is used by separate analysis tools.\n-Typically\n-these tools do the necessary compilations automatically, so you should\n-not have to specify this switch in normal operation.\n-Note that the combination of switches @code{-gnatct}\n-generates a tree in the form required by ASIS applications.\n-@end table\n-\n @geindex -gnatu (gcc)\n \n "}, {"sha": "3a42e02209e29e5a47d03b028449d0105eaac914", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -43,7 +43,6 @@ with Sinfo;    use Sinfo;\n with Sinput;   use Sinput;\n with Stand;    use Stand;\n with Stringt;  use Stringt;\n-with Tree_IO;  use Tree_IO;\n with Uname;    use Uname;\n with Widechar; use Widechar;\n \n@@ -1254,50 +1253,6 @@ package body Lib is\n       TSN := TSN + 1;\n    end Synchronize_Serial_Number;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-      N : Nat;\n-      S : String_Ptr;\n-\n-   begin\n-      Units.Tree_Read;\n-\n-      --  Read Compilation_Switches table. First release the memory occupied\n-      --  by the previously loaded switches.\n-\n-      for J in Compilation_Switches.First .. Compilation_Switches.Last loop\n-         Free (Compilation_Switches.Table (J));\n-      end loop;\n-\n-      Tree_Read_Int (N);\n-      Compilation_Switches.Set_Last (N);\n-\n-      for J in 1 .. N loop\n-         Tree_Read_Str (S);\n-         Compilation_Switches.Table (J) := S;\n-      end loop;\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      Units.Tree_Write;\n-\n-      --  Write Compilation_Switches table\n-\n-      Tree_Write_Int (Compilation_Switches.Last);\n-\n-      for J in 1 .. Compilation_Switches.Last loop\n-         Tree_Write_Str (Compilation_Switches.Table (J));\n-      end loop;\n-   end Tree_Write;\n-\n    --------------------\n    -- Unit_Name_Hash --\n    --------------------"}, {"sha": "c4ace09e353bdc6f5c40e8ce525b8edf295b5059", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -755,14 +755,6 @@ package Lib is\n    --  important to keep the serial numbers synchronized in the two cases (e.g.\n    --  when the references in a package and a client must be kept consistent).\n \n-   procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using the relevant\n-   --  Table.Tree_Read routines.\n-\n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using the relevant\n-   --  Table.Tree_Write routines.\n-\n    procedure Unlock;\n    --  Unlock internal tables, in cases where the back end needs to modify them\n \n@@ -1002,8 +994,7 @@ private\n \n    --  This table is set as part of the compiler argument scanning in\n    --  Back_End. It can also be reset in -gnatc mode from the data in an\n-   --  existing ali file, and is read and written by the Tree_Read and\n-   --  Tree_Write routines.\n+   --  existing ali file.\n \n    package Compilation_Switches is new Table.Table (\n      Table_Component_Type => String_Ptr,"}, {"sha": "60c1050522e590eac9063f113dc0f911f2c6c8af", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -33,11 +33,9 @@\n --  source file must be properly reflected in the C header file namet.h\n --  which is created manually from namet.ads and namet.adb.\n \n-with Debug;    use Debug;\n-with Opt;      use Opt;\n-with Output;   use Output;\n-with System;   use System;\n-with Tree_IO;  use Tree_IO;\n+with Debug;  use Debug;\n+with Opt;    use Opt;\n+with Output; use Output;\n with Widechar;\n \n with Interfaces; use Interfaces;\n@@ -1729,34 +1727,6 @@ package body Namet is\n       return Buf.Chars (1 .. Buf.Length);\n    end To_String;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      Name_Chars.Tree_Read;\n-      Name_Entries.Tree_Read;\n-\n-      Tree_Read_Data\n-        (Hash_Table'Address,\n-         Hash_Table'Length * (Hash_Table'Component_Size / Storage_Unit));\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      Name_Chars.Tree_Write;\n-      Name_Entries.Tree_Write;\n-\n-      Tree_Write_Data\n-        (Hash_Table'Address,\n-         Hash_Table'Length * (Hash_Table'Component_Size / Storage_Unit));\n-   end Tree_Write;\n-\n    ------------\n    -- Unlock --\n    ------------"}, {"sha": "670cdc9e2b6961840dc9de86ea00f84aa2ff8c63", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -548,15 +548,6 @@ package Namet is\n    --  Unlocks the name table to allow use of the extra space reserved by the\n    --  call to Lock. See gnat1drv for details of the need for this.\n \n-   procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using the relevant\n-   --  Table.Tree_Read routines. Note that Initialize should not be called if\n-   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n-\n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using the relevant\n-   --  Table.Tree_Write routines.\n-\n    procedure Write_Name (Id : Valid_Name_Id);\n    --  Write_Name writes the characters of the specified name using the\n    --  standard output procedures in package Output. The name is written"}, {"sha": "a51b191c8da760dee3256a83797448f6db7a45b5", "filename": "gcc/ada/nlists.adb", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fnlists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fnlists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -141,8 +141,7 @@ package body Nlists is\n       Next_Node.Set_Last (N);\n       Prev_Node.Set_Last (N);\n \n-      --  Make sure we have no uninitialized junk in any new entires added.\n-      --  This ensures that Tree_Gen will not write out any uninitialized junk.\n+      --  Make sure we have no uninitialized junk in any new entries added.\n \n       for J in Old_Last + 1 .. N loop\n          Next_Node.Table (J) := Empty;\n@@ -1470,29 +1469,6 @@ package body Nlists is\n       Prev_Node.Table (Node) := To;\n    end Set_Prev;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      pragma Assert (not Locked);\n-      Lists.Tree_Read;\n-      Next_Node.Tree_Read;\n-      Prev_Node.Tree_Read;\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      Lists.Tree_Write;\n-      Next_Node.Tree_Write;\n-      Prev_Node.Tree_Write;\n-   end Tree_Write;\n-\n    ------------\n    -- Unlock --\n    ------------"}, {"sha": "67fc66135177f42ba0e576eed9ec3e394fb55263", "filename": "gcc/ada/nlists.ads", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fnlists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fnlists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -337,8 +337,7 @@ package Nlists is\n \n    procedure Initialize;\n    --  Called at the start of compilation of each new main source file to\n-   --  initialize the allocation of the list table. Note that Initialize\n-   --  must not be called if Tree_Read is used.\n+   --  initialize the allocation of the list table.\n \n    procedure Lock;\n    --  Called to lock tables before back end is called\n@@ -355,15 +354,6 @@ package Nlists is\n    --  Called to unlock list contents when assertions are enabled; if\n    --  assertions are not enabled calling this subprogram has no effect.\n \n-   procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using the relevant\n-   --  Table.Tree_Read routines. Note that Initialize should not be called if\n-   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n-\n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using the relevant\n-   --  Table.Tree_Write routines.\n-\n    function Parent (List : List_Id) return Node_Or_Entity_Id;\n    pragma Inline (Parent);\n    --  Node lists may have a parent in the same way as a node. The function"}, {"sha": "2d21b56570dfd5c44410c8464c47cc78ac9046ee", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -29,15 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Gnatvsn; use Gnatvsn;\n-with System;  use System;\n-with Tree_IO; use Tree_IO;\n-\n package body Opt is\n \n-   SU : constant := Storage_Unit;\n-   --  Shorthand for System.Storage_Unit\n-\n    -------------------------\n    -- Back_End_Exceptions --\n    -------------------------\n@@ -312,123 +305,4 @@ package body Opt is\n       Polling_Required               := Polling_Required_Config;\n    end Set_Config_Switches;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-      Tree_Version_String_Len         : Nat;\n-      Ada_Version_Config_Val          : Nat;\n-      Ada_Version_Explicit_Config_Val : Nat;\n-      Assertions_Enabled_Config_Val   : Nat;\n-\n-   begin\n-      Tree_Read_Bool (Address_Is_Private);\n-      Tree_Read_Bool (Brief_Output);\n-      Tree_Read_Bool (GNAT_Mode);\n-      Tree_Read_Char (Identifier_Character_Set);\n-      Tree_Read_Bool (Ignore_Rep_Clauses);\n-      Tree_Read_Bool (Ignore_Style_Checks_Pragmas);\n-      Tree_Read_Int  (Maximum_File_Name_Length);\n-      Tree_Read_Data (Suppress_Options'Address,\n-                      (Suppress_Options'Size + SU - 1) / SU);\n-      Tree_Read_Bool (Verbose_Mode);\n-      Tree_Read_Data (Warning_Mode'Address,\n-                      (Warning_Mode'Size + SU - 1) / SU);\n-      Tree_Read_Int  (Ada_Version_Config_Val);\n-      Tree_Read_Int  (Ada_Version_Explicit_Config_Val);\n-      Tree_Read_Int  (Assertions_Enabled_Config_Val);\n-      Tree_Read_Bool (All_Errors_Mode);\n-      Tree_Read_Bool (Assertions_Enabled);\n-      Tree_Read_Bool (Check_Float_Overflow);\n-      Tree_Read_Int  (Int (Check_Policy_List));\n-      Tree_Read_Int  (Int (Default_Pool));\n-      Tree_Read_Bool (Full_List);\n-\n-      Ada_Version_Config :=\n-        Ada_Version_Type'Val (Ada_Version_Config_Val);\n-      Ada_Version_Explicit_Config :=\n-        Ada_Version_Type'Val (Ada_Version_Explicit_Config_Val);\n-      Assertions_Enabled_Config :=\n-        Boolean'Val (Assertions_Enabled_Config_Val);\n-\n-      --  Read version string: we have to get the length first\n-\n-      Tree_Read_Int (Tree_Version_String_Len);\n-\n-      declare\n-         Tmp : String (1 .. Integer (Tree_Version_String_Len));\n-      begin\n-         Tree_Read_Data\n-           (Tmp'Address, Tree_Version_String_Len);\n-         System.Strings.Free (Tree_Version_String);\n-         Free (Tree_Version_String);\n-         Tree_Version_String := new String'(Tmp);\n-      end;\n-\n-      Tree_Read_Data (Distribution_Stub_Mode'Address,\n-                      (Distribution_Stub_Mode'Size + SU - 1) / Storage_Unit);\n-      Tree_Read_Bool (Inline_Active);\n-      Tree_Read_Bool (Inline_Processing_Required);\n-      Tree_Read_Bool (List_Units);\n-      Tree_Read_Int  (Multiple_Unit_Index);\n-      Tree_Read_Bool (Configurable_Run_Time_Mode);\n-      Tree_Read_Data (Operating_Mode'Address,\n-                      (Operating_Mode'Size + SU - 1) / Storage_Unit);\n-      Tree_Read_Bool (Suppress_Checks);\n-      Tree_Read_Bool (Try_Semantics);\n-      Tree_Read_Data (Wide_Character_Encoding_Method'Address,\n-                      (Wide_Character_Encoding_Method'Size + SU - 1) / SU);\n-      Tree_Read_Bool (Upper_Half_Encoding);\n-      Tree_Read_Bool (Force_ALI_Tree_File);\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-      Version_String : String := Gnat_Version_String;\n-\n-   begin\n-      Tree_Write_Bool (Address_Is_Private);\n-      Tree_Write_Bool (Brief_Output);\n-      Tree_Write_Bool (GNAT_Mode);\n-      Tree_Write_Char (Identifier_Character_Set);\n-      Tree_Write_Bool (Ignore_Rep_Clauses);\n-      Tree_Write_Bool (Ignore_Style_Checks_Pragmas);\n-      Tree_Write_Int  (Maximum_File_Name_Length);\n-      Tree_Write_Data (Suppress_Options'Address,\n-                       (Suppress_Options'Size + SU - 1) / SU);\n-      Tree_Write_Bool (Verbose_Mode);\n-      Tree_Write_Data (Warning_Mode'Address,\n-                       (Warning_Mode'Size + SU - 1) / Storage_Unit);\n-      Tree_Write_Int  (Ada_Version_Type'Pos (Ada_Version_Config));\n-      Tree_Write_Int  (Ada_Version_Type'Pos (Ada_Version_Explicit_Config));\n-      Tree_Write_Int  (Boolean'Pos (Assertions_Enabled_Config));\n-      Tree_Write_Bool (All_Errors_Mode);\n-      Tree_Write_Bool (Assertions_Enabled);\n-      Tree_Write_Bool (Check_Float_Overflow);\n-      Tree_Write_Int  (Int (Check_Policy_List));\n-      Tree_Write_Int  (Int (Default_Pool));\n-      Tree_Write_Bool (Full_List);\n-      Tree_Write_Int  (Int (Version_String'Length));\n-      Tree_Write_Data (Version_String'Address, Version_String'Length);\n-      Tree_Write_Data (Distribution_Stub_Mode'Address,\n-                       (Distribution_Stub_Mode'Size + SU - 1) / SU);\n-      Tree_Write_Bool (Inline_Active);\n-      Tree_Write_Bool (Inline_Processing_Required);\n-      Tree_Write_Bool (List_Units);\n-      Tree_Write_Int  (Multiple_Unit_Index);\n-      Tree_Write_Bool (Configurable_Run_Time_Mode);\n-      Tree_Write_Data (Operating_Mode'Address,\n-                       (Operating_Mode'Size + SU - 1) / SU);\n-      Tree_Write_Bool (Suppress_Checks);\n-      Tree_Write_Bool (Try_Semantics);\n-      Tree_Write_Data (Wide_Character_Encoding_Method'Address,\n-                       (Wide_Character_Encoding_Method'Size + SU - 1) / SU);\n-      Tree_Write_Bool (Upper_Half_Encoding);\n-      Tree_Write_Bool (Force_ALI_Tree_File);\n-   end Tree_Write;\n-\n end Opt;"}, {"sha": "ebd5a78bb1bdc7ec376b5e73ae5f2622d6d3dbc6", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -242,9 +242,9 @@ package Opt is\n    --  GNAT\n    --  If set True, enables back annotation of representation information\n    --  by gigi, even in -gnatc mode. This is set True by the use of -gnatR\n-   --  (list representation information) or -gnatt (generate tree). It is\n-   --  also set true if certain Unchecked_Conversion instantiations require\n-   --  checking based on annotated values.\n+   --  (list representation information). It is also set true if certain\n+   --  Unchecked_Conversion instantiations require checking based on annotated\n+   --  values.\n \n    Back_End_Handles_Limited_Types : Boolean;\n    --  This flag is set true if the back end can properly handle limited or\n@@ -704,10 +704,10 @@ package Opt is\n    --  Indicates the current setting of Fast_Math mode, as set by the use\n    --  of a Fast_Math pragma (set True by Fast_Math (On)).\n \n-   Force_ALI_Tree_File : Boolean := False;\n+   Force_ALI_File : Boolean := False;\n    --  GNAT\n-   --  Force generation of ALI file even if errors are encountered. Also forces\n-   --  generation of tree file if -gnatt is also set. Set on by use of -gnatQ.\n+   --  Force generation of ALI file even if errors are encountered.\n+   --  Set on by use of -gnatQ.\n \n    Disable_ALI_File : Boolean := False;\n    --  GNAT\n@@ -1644,10 +1644,6 @@ package Opt is\n    --  Set True to treat pragma Restrictions as Restriction_Warnings. Set by\n    --  -gnatr switch.\n \n-   Tree_Output : Boolean := False;\n-   --  GNAT\n-   --  Set to True (-gnatt) to generate output tree file\n-\n    Try_Semantics : Boolean := False;\n    --  GNAT\n    --  Flag set to force attempt at semantic analysis, even if parser errors\n@@ -2232,20 +2228,6 @@ package Opt is\n    --  be in the spec of Expander, but it is referenced by Errout, and it\n    --  really seems wrong for Errout to depend on Expander.\n \n-   -----------------------\n-   -- Tree I/O Routines --\n-   -----------------------\n-\n-   procedure Tree_Read;\n-   --  Reads switch settings from current tree file using Tree_Read\n-\n-   procedure Tree_Write;\n-   --  Writes out switch settings to current tree file using Tree_Write\n-\n-   Tree_Version_String : String_Access;\n-   --  Used to store the compiler version string read from a tree file to check\n-   --  if it is from the same date as stored in the version string in Gnatvsn.\n-\n    -----------------------------------\n    -- Modes for Formal Verification --\n    -----------------------------------"}, {"sha": "7708c1de9cbe016bd85485637812c9c2c00e654d", "filename": "gcc/ada/osint-c.adb", "status": "modified", "additions": 1, "deletions": 65, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fosint-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fosint-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-c.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -23,8 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Opt;     use Opt;\n-with Tree_IO; use Tree_IO;\n+with Opt; use Opt;\n \n package body Osint.C is\n \n@@ -490,69 +489,6 @@ package body Osint.C is\n       Output_Object_File_Name := new String'(Name);\n    end Set_Output_Object_File_Name;\n \n-   ----------------\n-   -- Tree_Close --\n-   ----------------\n-\n-   procedure Tree_Close is\n-      Status : Boolean;\n-   begin\n-      Tree_Write_Terminate;\n-      Close (Output_FD, Status);\n-\n-      if not Status then\n-         Fail\n-           (\"error while closing tree file \"\n-            & Get_Name_String (Output_File_Name));\n-      end if;\n-   end Tree_Close;\n-\n-   -----------------\n-   -- Tree_Create --\n-   -----------------\n-\n-   procedure Tree_Create is\n-      Dot_Index : Natural;\n-\n-   begin\n-      Get_Name_String (Current_Main);\n-\n-      --  If an object file has been specified, then the ALI file\n-      --  will be in the same directory as the object file;\n-      --  so, we put the tree file in this same directory,\n-      --  even though no object file needs to be generated.\n-\n-      if Output_Object_File_Name /= null then\n-         Name_Len := Output_Object_File_Name'Length;\n-         Name_Buffer (1 .. Name_Len) := Output_Object_File_Name.all;\n-      end if;\n-\n-      Dot_Index := Name_Len + 1;\n-\n-      for J in reverse 1 .. Name_Len loop\n-         if Name_Buffer (J) = '.' then\n-            Dot_Index := J;\n-            exit;\n-         end if;\n-      end loop;\n-\n-      --  Should be impossible to not have an extension\n-\n-      pragma Assert (Dot_Index /= 0);\n-\n-      --  Change extension to adt\n-\n-      Name_Buffer (Dot_Index) := '.';\n-      Name_Buffer (Dot_Index + 1) := 'a';\n-      Name_Buffer (Dot_Index + 2) := 'd';\n-      Name_Buffer (Dot_Index + 3) := 't';\n-      Name_Buffer (Dot_Index + 4) := ASCII.NUL;\n-      Name_Len := Dot_Index + 3;\n-      Create_File_And_Check (Output_FD, Binary);\n-\n-      Tree_Write_Initialize (Output_FD);\n-   end Tree_Create;\n-\n    -----------------------\n    -- Write_Debug_Info --\n    -----------------------"}, {"sha": "6862e30e258640ae48c0aa8645428275442047c8", "filename": "gcc/ada/osint-c.ads", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fosint-c.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fosint-c.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-c.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -197,16 +197,4 @@ package Osint.C is\n    procedure Close_List_File;\n    --  Close file previously opened by Create_List_File\n \n-   --------------------------------\n-   -- Semantic Tree Input-Output --\n-   --------------------------------\n-\n-   procedure Tree_Create;\n-   --  Creates the tree output file for the source file which is currently\n-   --  being compiled (i.e. the file which was most recently returned by\n-   --  Next_Main_Source), and initializes Tree_IO.Tree_Write for output.\n-\n-   procedure Tree_Close;\n-   --  Closes the file previously opened by Tree_Create\n-\n end Osint.C;"}, {"sha": "84c0badd06f112478e52489f7f2d869bb5283ad3", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -64,8 +64,7 @@ package body Repinfo is\n    ---------------------------------------\n \n    --    A table internal to this unit is used to hold the values of back\n-   --    annotated expressions. This table is written out by -gnatt and read\n-   --    back in for ASIS processing.\n+   --    annotated expressions.\n \n    --    Node values are stored as Uint values using the negative of the node\n    --    index in this table. Constants appear as non-negative Uint values.\n@@ -79,7 +78,7 @@ package body Repinfo is\n \n    --  The following representation clause ensures that the above record\n    --  has no holes. We do this so that when instances of this record are\n-   --  written by Tree_Gen, we do not write uninitialized values to the file.\n+   --  written, we do not write uninitialized values to the file.\n \n    for Exp_Node use record\n       Expr at  0 range 0 .. 31;\n@@ -2336,24 +2335,6 @@ package body Repinfo is\n       end loop;\n    end Spaces;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      Rep_Table.Tree_Read;\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      Rep_Table.Tree_Write;\n-   end Tree_Write;\n-\n    ---------------------\n    -- Write_Info_Line --\n    ---------------------"}, {"sha": "988bfc209df3c96d0af569a2fe0227079adadf26", "filename": "gcc/ada/repinfo.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Frepinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Frepinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -388,10 +388,6 @@ package Repinfo is\n    --  as an argument value, and return it unmodified. A No_Uint value is\n    --  also returned unmodified.\n \n-   procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using the relevant\n-   --  Table.Tree_Read routines.\n-\n    ------------------------\n    -- Compiler Interface --\n    ------------------------\n@@ -400,10 +396,6 @@ package Repinfo is\n    --  Procedure to list representation information. Bytes_Big_Endian is the\n    --  value from Ttypes (Repinfo cannot have a dependency on Ttypes).\n \n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using the relevant\n-   --  Table.Tree_Write routines.\n-\n    --------------------------\n    -- Debugging Procedures --\n    --------------------------"}, {"sha": "7da41a0ccec1b7f3e8008e6a499476d7a8e7b6c9", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -1650,24 +1650,6 @@ package body Sem_Aux is\n       return N;\n    end Subprogram_Specification;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      Obsolescent_Warnings.Tree_Read;\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      Obsolescent_Warnings.Tree_Write;\n-   end Tree_Write;\n-\n    --------------------\n    -- Ultimate_Alias --\n    --------------------"}, {"sha": "6f0d75e6d58dff5cd5b9f28baf84c13507994fe9", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -70,16 +70,7 @@ package Sem_Aux is\n \n    procedure Initialize;\n    --  Called at the start of compilation of each new main source file to\n-   --  initialize the allocation of the Obsolescent_Warnings table. Note that\n-   --  Initialize must not be called if Tree_Read is used.\n-\n-   procedure Tree_Read;\n-   --  Initializes Obsolescent_Warnings table from current tree file using the\n-   --  relevant Table.Tree_Read routine.\n-\n-   procedure Tree_Write;\n-   --  Writes out Obsolescent_Warnings table to current tree file using the\n-   --  relevant Table.Tree_Write routine.\n+   --  initialize the allocation of the Obsolescent_Warnings table.\n \n    -----------------\n    -- Subprograms --"}, {"sha": "4c342d97a33e16dd7dcfadaf4669ab766b2c38f4", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 0, "deletions": 155, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -37,7 +37,6 @@ with Debug;    use Debug;\n with Opt;      use Opt;\n with Output;   use Output;\n with Scans;    use Scans;\n-with Tree_IO;  use Tree_IO;\n with Widechar; use Widechar;\n \n with GNAT.Byte_Order_Mark; use GNAT.Byte_Order_Mark;\n@@ -1004,160 +1003,6 @@ package body Sinput is\n       return Oldloc;\n    end Top_Level_Location;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      --  First we must free any old source buffer pointers\n-\n-      for J in Source_File.First .. Source_File.Last loop\n-         declare\n-            S : Source_File_Record renames Source_File.Table (J);\n-         begin\n-            if S.Instance = No_Instance_Id then\n-               Free_Source_Buffer (S.Source_Text);\n-\n-               if S.Lines_Table /= null then\n-                  Memory.Free (To_Address (S.Lines_Table));\n-                  S.Lines_Table := null;\n-               end if;\n-\n-               if S.Logical_Lines_Table /= null then\n-                  Memory.Free (To_Address (S.Logical_Lines_Table));\n-                  S.Logical_Lines_Table := null;\n-               end if;\n-\n-            else\n-               Free_Dope (S.Source_Text'Address);\n-               S.Source_Text := null;\n-            end if;\n-         end;\n-      end loop;\n-\n-      --  Read in source file table and instance table\n-\n-      Source_File.Tree_Read;\n-      Instances.Tree_Read;\n-\n-      --  The pointers we read in there for the source buffer and lines table\n-      --  pointers are junk. We now read in the actual data that is referenced\n-      --  by these two fields.\n-\n-      for J in Source_File.First .. Source_File.Last loop\n-         declare\n-            S : Source_File_Record renames Source_File.Table (J);\n-         begin\n-            --  Normal case (non-instantiation)\n-\n-            if S.Instance = No_Instance_Id then\n-               S.Lines_Table := null;\n-               S.Logical_Lines_Table := null;\n-               Alloc_Line_Tables (S, Int (S.Last_Source_Line));\n-\n-               for J in 1 .. S.Last_Source_Line loop\n-                  Tree_Read_Int (Int (S.Lines_Table (J)));\n-               end loop;\n-\n-               if S.Num_SRef_Pragmas /= 0 then\n-                  for J in 1 .. S.Last_Source_Line loop\n-                     Tree_Read_Int (Int (S.Logical_Lines_Table (J)));\n-                  end loop;\n-               end if;\n-\n-               --  Allocate source buffer and read in the data\n-\n-               declare\n-                  T : constant Source_Buffer_Ptr_Var :=\n-                    new Source_Buffer (S.Source_First .. S.Source_Last);\n-               begin\n-                  Tree_Read_Data (T (S.Source_First)'Address,\n-                     Int (S.Source_Last) - Int (S.Source_First) + 1);\n-                  S.Source_Text := T.all'Access;\n-               end;\n-\n-            --  For the instantiation case, we do not read in any data. Instead\n-            --  we share the data for the generic template entry. Since the\n-            --  template always occurs first, we can safely refer to its data.\n-\n-            else\n-               declare\n-                  ST : Source_File_Record renames\n-                         Source_File.Table (S.Template);\n-\n-               begin\n-                  --  The lines tables are copied from the template entry\n-\n-                  S.Lines_Table := ST.Lines_Table;\n-                  S.Logical_Lines_Table := ST.Logical_Lines_Table;\n-\n-                  --  The Source_Text of the instance is the same data as that\n-                  --  of the template, but with different bounds.\n-\n-                  declare\n-                     Dope : constant Dope_Ptr :=\n-                       new Dope_Rec'(S.Source_First, S.Source_Last);\n-                  begin\n-                     S.Source_Text := ST.Source_Text;\n-                     Set_Dope (S.Source_Text'Address, Dope);\n-                  end;\n-               end;\n-            end if;\n-         end;\n-\n-         Set_Source_File_Index_Table (J);\n-      end loop;\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      Source_File.Tree_Write;\n-      Instances.Tree_Write;\n-\n-      --  The pointers we wrote out there for the source buffer and lines\n-      --  table pointers are junk, we now write out the actual data that\n-      --  is referenced by these two fields.\n-\n-      for J in Source_File.First .. Source_File.Last loop\n-         declare\n-            S : Source_File_Record renames Source_File.Table (J);\n-\n-         begin\n-            --  For instantiations, there is nothing to do, since the data is\n-            --  shared with the generic template. When the tree is read, the\n-            --  pointers must be set, but no extra data needs to be written.\n-            --  For the normal case, write out the data of the tables.\n-\n-            if S.Instance = No_Instance_Id then\n-               --  Lines table\n-\n-               for J in 1 .. S.Last_Source_Line loop\n-                  Tree_Write_Int (Int (S.Lines_Table (J)));\n-               end loop;\n-\n-               --  Logical lines table if present\n-\n-               if S.Num_SRef_Pragmas /= 0 then\n-                  for J in 1 .. S.Last_Source_Line loop\n-                     Tree_Write_Int (Int (S.Logical_Lines_Table (J)));\n-                  end loop;\n-               end if;\n-\n-               --  Source buffer\n-\n-               Tree_Write_Data\n-                 (S.Source_Text (S.Source_First)'Address,\n-                   Int (S.Source_Last) - Int (S.Source_First) + 1);\n-            end if;\n-         end;\n-      end loop;\n-   end Tree_Write;\n-\n    --------------------\n    -- Write_Location --\n    --------------------"}, {"sha": "28c080dd5a03931218b44593fa2b76e46e7a4bd0", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -715,14 +715,6 @@ package Sinput is\n    procedure Write_Time_Stamp (S : Source_File_Index);\n    --  Writes time stamp of specified file in YY-MM-DD HH:MM.SS format\n \n-   procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using the relevant\n-   --  Table.Tree_Read routines.\n-\n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using the relevant\n-   --  Table.Tree_Write routines.\n-\n    procedure Clear_Source_File_Table;\n    --  This procedure frees memory allocated in the Source_File table (in the\n    --  private). It should only be used when it is guaranteed that all source"}, {"sha": "cdc1d50c334ad557cc9fd186d11e3eee3a5a3bc8", "filename": "gcc/ada/stand.adb", "status": "removed", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Fstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Fstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.adb?ref=bad8184e3e16dfd4d30099e18e443c4a54b97c83", "patch": "@@ -1,190 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                                S T A N D                                 --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1992-2020, Free Software Foundation, Inc.        --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Elists;  use Elists;\n-with System;  use System;\n-with Tree_IO; use Tree_IO;\n-\n-package body Stand is\n-\n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      Tree_Read_Data (Standard_Entity'Address,\n-                       Standard_Entity_Array_Type'Size / Storage_Unit);\n-\n-      Tree_Read_Int (Int (Standard_Package_Node));\n-      Tree_Read_Int (Int (Last_Standard_Node_Id));\n-      Tree_Read_Int (Int (Last_Standard_List_Id));\n-\n-      Tree_Read_Int (Int (Boolean_Literals (False)));\n-      Tree_Read_Int (Int (Boolean_Literals (True)));\n-\n-      Tree_Read_Int (Int (Standard_Void_Type));\n-      Tree_Read_Int (Int (Standard_Exception_Type));\n-      Tree_Read_Int (Int (Standard_A_String));\n-      Tree_Read_Int (Int (Standard_A_Char));\n-      Tree_Read_Int (Int (Standard_Debug_Renaming_Type));\n-\n-      --  Deal with Predefined_Float_Types, which is an Elist. We wrote the\n-      --  entities out in sequence, terminated by an Empty entry.\n-\n-      declare\n-         Elmt : Entity_Id;\n-      begin\n-         Predefined_Float_Types := New_Elmt_List;\n-         loop\n-            Tree_Read_Int (Int (Elmt));\n-            exit when Elmt = Empty;\n-            Append_Elmt (Elmt, Predefined_Float_Types);\n-         end loop;\n-      end;\n-\n-      --  Remainder of special entities\n-\n-      Tree_Read_Int (Int (Any_Id));\n-      Tree_Read_Int (Int (Any_Type));\n-      Tree_Read_Int (Int (Any_Access));\n-      Tree_Read_Int (Int (Any_Array));\n-      Tree_Read_Int (Int (Any_Boolean));\n-      Tree_Read_Int (Int (Any_Character));\n-      Tree_Read_Int (Int (Any_Composite));\n-      Tree_Read_Int (Int (Any_Discrete));\n-      Tree_Read_Int (Int (Any_Fixed));\n-      Tree_Read_Int (Int (Any_Integer));\n-      Tree_Read_Int (Int (Any_Modular));\n-      Tree_Read_Int (Int (Any_Numeric));\n-      Tree_Read_Int (Int (Any_Real));\n-      Tree_Read_Int (Int (Any_Scalar));\n-      Tree_Read_Int (Int (Any_String));\n-      Tree_Read_Int (Int (Raise_Type));\n-      Tree_Read_Int (Int (Universal_Integer));\n-      Tree_Read_Int (Int (Universal_Real));\n-      Tree_Read_Int (Int (Universal_Fixed));\n-      Tree_Read_Int (Int (Standard_Integer_8));\n-      Tree_Read_Int (Int (Standard_Integer_16));\n-      Tree_Read_Int (Int (Standard_Integer_32));\n-      Tree_Read_Int (Int (Standard_Integer_64));\n-      Tree_Read_Int (Int (Standard_Short_Short_Unsigned));\n-      Tree_Read_Int (Int (Standard_Short_Unsigned));\n-      Tree_Read_Int (Int (Standard_Unsigned));\n-      Tree_Read_Int (Int (Standard_Long_Unsigned));\n-      Tree_Read_Int (Int (Standard_Long_Long_Unsigned));\n-      Tree_Read_Int (Int (Standard_Unsigned_64));\n-      Tree_Read_Int (Int (Abort_Signal));\n-      Tree_Read_Int (Int (Standard_Op_Rotate_Left));\n-      Tree_Read_Int (Int (Standard_Op_Rotate_Right));\n-      Tree_Read_Int (Int (Standard_Op_Shift_Left));\n-      Tree_Read_Int (Int (Standard_Op_Shift_Right));\n-      Tree_Read_Int (Int (Standard_Op_Shift_Right_Arithmetic));\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      Tree_Write_Data (Standard_Entity'Address,\n-                       Standard_Entity_Array_Type'Size / Storage_Unit);\n-\n-      Tree_Write_Int (Int (Standard_Package_Node));\n-      Tree_Write_Int (Int (Last_Standard_Node_Id));\n-      Tree_Write_Int (Int (Last_Standard_List_Id));\n-\n-      Tree_Write_Int (Int (Boolean_Literals (False)));\n-      Tree_Write_Int (Int (Boolean_Literals (True)));\n-\n-      Tree_Write_Int (Int (Standard_Void_Type));\n-      Tree_Write_Int (Int (Standard_Exception_Type));\n-      Tree_Write_Int (Int (Standard_A_String));\n-      Tree_Write_Int (Int (Standard_A_Char));\n-      Tree_Write_Int (Int (Standard_Debug_Renaming_Type));\n-\n-      --  Deal with Predefined_Float_Types, which is an Elist. Write the\n-      --  entities out in sequence, terminated by an Empty entry.\n-\n-      declare\n-         Elmt : Elmt_Id;\n-\n-      begin\n-         Elmt := First_Elmt (Predefined_Float_Types);\n-         while Present (Elmt) loop\n-            Tree_Write_Int (Int (Node (Elmt)));\n-            Next_Elmt (Elmt);\n-         end loop;\n-\n-         Tree_Write_Int (Int (Empty));\n-      end;\n-\n-      --  Remainder of special entries\n-\n-      Tree_Write_Int (Int (Any_Id));\n-      Tree_Write_Int (Int (Any_Type));\n-      Tree_Write_Int (Int (Any_Access));\n-      Tree_Write_Int (Int (Any_Array));\n-      Tree_Write_Int (Int (Any_Boolean));\n-      Tree_Write_Int (Int (Any_Character));\n-      Tree_Write_Int (Int (Any_Composite));\n-      Tree_Write_Int (Int (Any_Discrete));\n-      Tree_Write_Int (Int (Any_Fixed));\n-      Tree_Write_Int (Int (Any_Integer));\n-      Tree_Write_Int (Int (Any_Modular));\n-      Tree_Write_Int (Int (Any_Numeric));\n-      Tree_Write_Int (Int (Any_Real));\n-      Tree_Write_Int (Int (Any_Scalar));\n-      Tree_Write_Int (Int (Any_String));\n-      Tree_Write_Int (Int (Raise_Type));\n-      Tree_Write_Int (Int (Universal_Integer));\n-      Tree_Write_Int (Int (Universal_Real));\n-      Tree_Write_Int (Int (Universal_Fixed));\n-      Tree_Write_Int (Int (Standard_Integer_8));\n-      Tree_Write_Int (Int (Standard_Integer_16));\n-      Tree_Write_Int (Int (Standard_Integer_32));\n-      Tree_Write_Int (Int (Standard_Integer_64));\n-      Tree_Write_Int (Int (Standard_Short_Short_Unsigned));\n-      Tree_Write_Int (Int (Standard_Short_Unsigned));\n-      Tree_Write_Int (Int (Standard_Unsigned));\n-      Tree_Write_Int (Int (Standard_Long_Unsigned));\n-      Tree_Write_Int (Int (Standard_Long_Long_Unsigned));\n-      Tree_Write_Int (Int (Standard_Unsigned_64));\n-      Tree_Write_Int (Int (Abort_Signal));\n-      Tree_Write_Int (Int (Standard_Op_Rotate_Left));\n-      Tree_Write_Int (Int (Standard_Op_Rotate_Right));\n-      Tree_Write_Int (Int (Standard_Op_Shift_Left));\n-      Tree_Write_Int (Int (Standard_Op_Shift_Right));\n-      Tree_Write_Int (Int (Standard_Op_Shift_Right_Arithmetic));\n-   end Tree_Write;\n-\n-end Stand;"}, {"sha": "43b876ab37906176532e4629dd167a16d325b5ab", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -480,17 +480,4 @@ package Stand is\n    Standard_Op_Shift_Right_Arithmetic : Entity_Id;\n    --  These entities are used for shift operators generated by the expander\n \n-   -----------------\n-   -- Subprograms --\n-   -----------------\n-\n-   procedure Tree_Read;\n-   --  Initializes entity values in this package from the current tree file\n-   --  using Tree_IO. Note that Tree_Read includes all the initialization that\n-   --  is carried out by Create_Standard.\n-\n-   procedure Tree_Write;\n-   --  Writes out the entity values in this package to the current tree file\n-   --  using Tree_IO.\n-\n end Stand;"}, {"sha": "35e9028aef868131228828633239dcc741ec1394", "filename": "gcc/ada/stringt.adb", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fstringt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fstringt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -360,26 +360,6 @@ package body Stringt is\n       return To_String (Buf);\n    end To_String;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      String_Chars.Tree_Read;\n-      Strings.Tree_Read;\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      String_Chars.Tree_Write;\n-      Strings.Tree_Write;\n-   end Tree_Write;\n-\n    ------------\n    -- Unlock --\n    ------------"}, {"sha": "52f5fd74210d3576c592166b1661116545f92bda", "filename": "gcc/ada/stringt.ads", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fstringt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fstringt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -62,8 +62,7 @@ package Stringt is\n    --------------------------------------\n \n    procedure Initialize;\n-   --  Initializes the strings table for a new compilation. Note that\n-   --  Initialize must not be called if Tree_Read is used.\n+   --  Initializes the strings table for a new compilation.\n \n    procedure Lock;\n    --  Lock internal tables before calling back end\n@@ -148,15 +147,6 @@ package Stringt is\n    function Strings_Address return System.Address;\n    --  Return address of Strings table (used by Back_End call to Gigi)\n \n-   procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using the relevant\n-   --  Table.Tree_Read routines. Note that Initialize should not be called if\n-   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n-\n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using the relevant\n-   --  Table.Tree_Write routines.\n-\n    procedure Write_Char_Code (Code : Char_Code);\n    --  Procedure to write a character code value, used for debugging purposes\n    --  for writing character codes. If the character code is in the range"}, {"sha": "c5f2e1cc9595fc6ca8daa5050f6619bece0fe1ce", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -1170,7 +1170,7 @@ package body Switch.C is\n \n             when 'Q' =>\n                Ptr := Ptr + 1;\n-               Force_ALI_Tree_File := True;\n+               Force_ALI_File := True;\n                Try_Semantics := True;\n \n             --  -gnatr (restrictions as warnings)"}, {"sha": "cd7cbefe14e8cfd0472e1da89ac43fccfe000f34", "filename": "gcc/ada/table.adb", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Ftable.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Ftable.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftable.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -33,7 +33,6 @@ with Debug;   use Debug;\n with Opt;     use Opt;\n with Output;  use Output;\n with System;  use System;\n-with Tree_IO; use Tree_IO;\n \n with System.Memory; use System.Memory;\n \n@@ -60,10 +59,6 @@ package body Table is\n       --  in Max. Works correctly to do an initial allocation if the table\n       --  is currently null.\n \n-      function Tree_Get_Table_Address return Address;\n-      --  Return Null_Address if the table length is zero,\n-      --  Table (First)'Address if not.\n-\n       pragma Warnings (Off);\n       --  Turn off warnings. The following unchecked conversions are only used\n       --  internally in this package, and cannot never result in any instances\n@@ -400,60 +395,6 @@ package body Table is\n          end if;\n       end Set_Last;\n \n-      ----------------------------\n-      -- Tree_Get_Table_Address --\n-      ----------------------------\n-\n-      function Tree_Get_Table_Address return Address is\n-      begin\n-         if Length = 0 then\n-            return Null_Address;\n-         else\n-            return Table (First)'Address;\n-         end if;\n-      end Tree_Get_Table_Address;\n-\n-      ---------------\n-      -- Tree_Read --\n-      ---------------\n-\n-      --  Note: we allocate only the space required to accommodate the data\n-      --  actually written, which means that a Tree_Write/Tree_Read sequence\n-      --  does an implicit Release.\n-\n-      procedure Tree_Read is\n-      begin\n-         Tree_Read_Int (Max);\n-         Last_Val := Max;\n-         Length := Max - Min + 1;\n-         Reallocate;\n-\n-         Tree_Read_Data\n-           (Tree_Get_Table_Address,\n-             (Last_Val - Int (First) + 1) *\n-\n-               --  Note the importance of parenthesizing the following division\n-               --  to avoid the possibility of intermediate overflow.\n-\n-               (Table_Type'Component_Size / Storage_Unit));\n-      end Tree_Read;\n-\n-      ----------------\n-      -- Tree_Write --\n-      ----------------\n-\n-      --  Note: we write out only the currently valid data, not the entire\n-      --  contents of the allocated array. See note above on Tree_Read.\n-\n-      procedure Tree_Write is\n-      begin\n-         Tree_Write_Int (Int (Last));\n-         Tree_Write_Data\n-           (Tree_Get_Table_Address,\n-            (Last_Val - Int (First) + 1) *\n-              (Table_Type'Component_Size / Storage_Unit));\n-      end Tree_Write;\n-\n    begin\n       Init;\n    end Table;"}, {"sha": "e8cbe81ff142807401a2ce4fe142f829d11087f4", "filename": "gcc/ada/table.ads", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Ftable.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Ftable.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftable.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -221,13 +221,6 @@ package Table is\n       --  Given a Saved_Table value returned by a prior call to Save, restores\n       --  the table to the state it was in at the time of the Save call.\n \n-      procedure Tree_Write;\n-      --  Writes out contents of table using Tree_IO\n-\n-      procedure Tree_Read;\n-      --  Initializes table by reading contents previously written with the\n-      --  Tree_Write call (also using Tree_IO).\n-\n    private\n \n       Last_Val : Int;"}, {"sha": "109b0157f6885eecaa55c460018ee0ea55c68c11", "filename": "gcc/ada/tree_gen.adb", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_gen.adb?ref=bad8184e3e16dfd4d30099e18e443c4a54b97c83", "patch": "@@ -1,72 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                             T R E E _ G E N                              --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Aspects;\n-with Atree;\n-with Elists;\n-with Fname;\n-with Lib;\n-with Namet;\n-with Nlists;\n-with Opt;\n-with Osint.C;\n-with Repinfo;\n-with Sem_Aux;\n-with Sinput;\n-with Stand;\n-with Stringt;\n-with Uintp;\n-with Urealp;\n-\n-with Tree_In;\n-pragma Warnings (Off, Tree_In);\n---  We do not use Tree_In in the compiler, but it is small, and worth including\n---  so that we get the proper license check for Tree_In when the compiler is\n---  built. This will avoid adding bad dependencies to Tree_In and blowing ASIS.\n-\n-procedure Tree_Gen is\n-begin\n-   if Opt.Tree_Output then\n-      Osint.C.Tree_Create;\n-\n-      Opt.Tree_Write;\n-      Atree.Tree_Write;\n-      Elists.Tree_Write;\n-      Fname.Tree_Write;\n-      Lib.Tree_Write;\n-      Namet.Tree_Write;\n-      Nlists.Tree_Write;\n-      Sem_Aux.Tree_Write;\n-      Sinput.Tree_Write;\n-      Stand.Tree_Write;\n-      Stringt.Tree_Write;\n-      Uintp.Tree_Write;\n-      Urealp.Tree_Write;\n-      Repinfo.Tree_Write;\n-      Aspects.Tree_Write;\n-\n-      Osint.C.Tree_Close;\n-   end if;\n-end Tree_Gen;"}, {"sha": "f1c57c3521944c553a6db8f695130a5bd4b6033b", "filename": "gcc/ada/tree_gen.ads", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_gen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_gen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_gen.ads?ref=bad8184e3e16dfd4d30099e18e443c4a54b97c83", "patch": "@@ -1,28 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                             T R E E _ G E N                              --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This procedure is used to write out the tree if the option is set\n-\n-procedure Tree_Gen;"}, {"sha": "c02c1770a0dc88b51f974fb60cefcb1db75eb2cb", "filename": "gcc/ada/tree_in.adb", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_in.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_in.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_in.adb?ref=bad8184e3e16dfd4d30099e18e443c4a54b97c83", "patch": "@@ -1,71 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                              T R E E _ I N                               --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Aspects;\n-with Atree;\n-with Csets;\n-with Elists;\n-with Fname;\n-with Lib;\n-with Namet;\n-with Nlists;\n-with Opt;\n-with Repinfo;\n-with Sem_Aux;\n-with Sinput;\n-with Stand;\n-with Stringt;\n-with Tree_IO;\n-with Uintp;\n-with Urealp;\n-\n-procedure Tree_In (Desc : File_Descriptor) is\n-begin\n-   Tree_IO.Tree_Read_Initialize (Desc);\n-\n-   Opt.Tree_Read;\n-   Atree.Tree_Read;\n-   Elists.Tree_Read;\n-   Fname.Tree_Read;\n-   Lib.Tree_Read;\n-   Namet.Tree_Read;\n-   Nlists.Tree_Read;\n-   Sem_Aux.Tree_Read;\n-   Sinput.Tree_Read;\n-   Stand.Tree_Read;\n-   Stringt.Tree_Read;\n-   Uintp.Tree_Read;\n-   Urealp.Tree_Read;\n-   Repinfo.Tree_Read;\n-   Aspects.Tree_Read;\n-\n-   Csets.Initialize;\n-end Tree_In;"}, {"sha": "32fbe7c0ce132b31a28127ee36c705613c5da7c2", "filename": "gcc/ada/tree_in.ads", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_in.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_in.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_in.ads?ref=bad8184e3e16dfd4d30099e18e443c4a54b97c83", "patch": "@@ -1,42 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                              T R E E _ I N                               --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This procedure is used to read in a tree if the option is set. Note that\n---  it is not part of the compiler proper, but rather the interface from\n---  tools that need to read the tree to the tree reading routines, and is\n---  thus bound as part of such tools.\n-\n-with System.OS_Lib; use System.OS_Lib;\n-\n-procedure Tree_In (Desc : File_Descriptor);\n---  Desc is the file descriptor for the file containing the tree, as written\n---  by the compiler in a previous compilation using Tree_Gen. On return the\n---  global data structures are appropriately initialized."}, {"sha": "a4ee3938697d6d1c83865ac671eb22bddab0ecfc", "filename": "gcc/ada/tree_io.adb", "status": "removed", "additions": 0, "deletions": 661, "changes": 661, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_io.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_io.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_io.adb?ref=bad8184e3e16dfd4d30099e18e443c4a54b97c83", "patch": "@@ -1,661 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                              T R E E _ I O                               --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Debug;  use Debug;\n-with Output; use Output;\n-with Unchecked_Conversion;\n-\n-package body Tree_IO is\n-   Debug_Flag_Tree : Boolean := False;\n-   --  Debug flag for debug output from tree read/write\n-\n-   -------------------------------------------\n-   -- Compression Scheme Used for Tree File --\n-   -------------------------------------------\n-\n-   --  We don't just write the data directly, but instead do a mild form\n-   --  of compression, since we expect lots of compressible zeroes and\n-   --  blanks. The compression scheme is as follows:\n-\n-   --    00nnnnnn followed by nnnnnn bytes (non compressed data)\n-   --    01nnnnnn indicates nnnnnn binary zero bytes\n-   --    10nnnnnn indicates nnnnnn ASCII space bytes\n-   --    11nnnnnn bbbbbbbb indicates nnnnnnnn occurrences of byte bbbbbbbb\n-\n-   --  Since we expect many zeroes in trees, and many spaces in sources,\n-   --  this compression should be reasonably efficient. We can put in\n-   --  something better later on.\n-\n-   --  Note that this compression applies to the Write_Tree_Data and\n-   --  Read_Tree_Data calls, not to the calls to read and write single\n-   --  scalar values, which are written in memory format without any\n-   --  compression.\n-\n-   C_Noncomp : constant := 2#00_000000#;\n-   C_Zeros   : constant := 2#01_000000#;\n-   C_Spaces  : constant := 2#10_000000#;\n-   C_Repeat  : constant := 2#11_000000#;\n-   --  Codes for compression sequences\n-\n-   Max_Count : constant := 63;\n-   --  Maximum data length for one compression sequence\n-\n-   --  The above compression scheme applies only to data written with the\n-   --  Tree_Write routine and read with Tree_Read. Data written using the\n-   --  Tree_Write_Char or Tree_Write_Int routines and read using the\n-   --  corresponding input routines is not compressed.\n-\n-   type Int_Bytes is array (1 .. 4) of Byte;\n-   for Int_Bytes'Size use 32;\n-\n-   function To_Int_Bytes is new Unchecked_Conversion (Int, Int_Bytes);\n-   function To_Int       is new Unchecked_Conversion (Int_Bytes, Int);\n-\n-   ----------------------\n-   -- Global Variables --\n-   ----------------------\n-\n-   Tree_FD : File_Descriptor;\n-   --  File descriptor for tree\n-\n-   Buflen : constant Int := 8_192;\n-   --  Length of buffer for read and write file data\n-\n-   Buf : array (Pos range 1 .. Buflen) of Byte;\n-   --  Read/write file data buffer\n-\n-   Bufn : Nat;\n-   --  Number of bytes read/written from/to buffer\n-\n-   Buft : Nat;\n-   --  Total number of bytes in input buffer containing valid data. Used only\n-   --  for input operations. There is data left to be processed in the buffer\n-   --  if Buft > Bufn. A value of zero for Buft means that the buffer is empty.\n-\n-   -----------------------\n-   -- Local Subprograms --\n-   -----------------------\n-\n-   procedure Read_Buffer;\n-   --  Reads data into buffer, setting Bufn appropriately\n-\n-   function Read_Byte return Byte;\n-   pragma Inline (Read_Byte);\n-   --  Returns next byte from input file, raises Tree_Format_Error if none left\n-\n-   procedure Write_Buffer;\n-   --  Writes out current buffer contents\n-\n-   procedure Write_Byte (B : Byte);\n-   pragma Inline (Write_Byte);\n-   --  Write one byte to output buffer, checking for buffer-full condition\n-\n-   -----------------\n-   -- Read_Buffer --\n-   -----------------\n-\n-   procedure Read_Buffer is\n-   begin\n-      Buft := Int (Read (Tree_FD, Buf (1)'Address, Integer (Buflen)));\n-\n-      if Buft = 0 then\n-         raise Tree_Format_Error;\n-      else\n-         Bufn := 0;\n-      end if;\n-   end Read_Buffer;\n-\n-   ---------------\n-   -- Read_Byte --\n-   ---------------\n-\n-   function Read_Byte return Byte is\n-   begin\n-      if Bufn = Buft then\n-         Read_Buffer;\n-      end if;\n-\n-      Bufn := Bufn + 1;\n-      return Buf (Bufn);\n-   end Read_Byte;\n-\n-   --------------------\n-   -- Tree_Read_Bool --\n-   --------------------\n-\n-   procedure Tree_Read_Bool (B : out Boolean) is\n-   begin\n-      B := Boolean'Val (Read_Byte);\n-\n-      if Debug_Flag_Tree then\n-         if B then\n-            Write_Str (\"True\");\n-         else\n-            Write_Str (\"False\");\n-         end if;\n-\n-         Write_Eol;\n-      end if;\n-   end Tree_Read_Bool;\n-\n-   --------------------\n-   -- Tree_Read_Char --\n-   --------------------\n-\n-   procedure Tree_Read_Char (C : out Character) is\n-   begin\n-      C := Character'Val (Read_Byte);\n-\n-      if Debug_Flag_Tree then\n-         Write_Str (\"==> transmitting Character = \");\n-         Write_Char (C);\n-         Write_Eol;\n-      end if;\n-   end Tree_Read_Char;\n-\n-   --------------------\n-   -- Tree_Read_Data --\n-   --------------------\n-\n-   procedure Tree_Read_Data (Addr : Address; Length : Int) is\n-\n-      type S is array (Pos) of Byte;\n-      --  This is a big array, for which we have to suppress the warning\n-\n-      type SP is access all S;\n-\n-      function To_SP is new Unchecked_Conversion (Address, SP);\n-\n-      Data : constant SP := To_SP (Addr);\n-      --  Data buffer to be read as an indexable array of bytes\n-\n-      OP : Pos := 1;\n-      --  Pointer to next byte of data buffer to be read into\n-\n-      B : Byte;\n-      C : Byte;\n-      L : Int;\n-\n-   begin\n-      if Debug_Flag_Tree then\n-         Write_Str (\"==> transmitting \");\n-         Write_Int (Length);\n-         Write_Str (\" data bytes\");\n-         Write_Eol;\n-      end if;\n-\n-      --  Verify data length\n-\n-      Tree_Read_Int (L);\n-\n-      if L /= Length then\n-         Write_Str (\"==> transmitting, expected \");\n-         Write_Int (Length);\n-         Write_Str (\" bytes, found length = \");\n-         Write_Int (L);\n-         Write_Eol;\n-         raise Tree_Format_Error;\n-      end if;\n-\n-      --  Loop to read data\n-\n-      while OP <= Length loop\n-\n-         --  Get compression control character\n-\n-         B := Read_Byte;\n-         C := B and 2#00_111111#;\n-         B := B and 2#11_000000#;\n-\n-         --  Non-repeat case\n-\n-         if B = C_Noncomp then\n-            if Debug_Flag_Tree then\n-               Write_Str (\"==>    uncompressed:  \");\n-               Write_Int (Int (C));\n-               Write_Str (\", starting at \");\n-               Write_Int (OP);\n-               Write_Eol;\n-            end if;\n-\n-            for J in 1 .. C loop\n-               Data (OP) := Read_Byte;\n-               OP := OP + 1;\n-            end loop;\n-\n-         --  Repeated zeroes\n-\n-         elsif B = C_Zeros then\n-            if Debug_Flag_Tree then\n-               Write_Str (\"==>    zeroes:        \");\n-               Write_Int (Int (C));\n-               Write_Str (\", starting at \");\n-               Write_Int (OP);\n-               Write_Eol;\n-            end if;\n-\n-            for J in 1 .. C loop\n-               Data (OP) := 0;\n-               OP := OP + 1;\n-            end loop;\n-\n-         --  Repeated spaces\n-\n-         elsif B = C_Spaces then\n-            if Debug_Flag_Tree then\n-               Write_Str (\"==>    spaces:        \");\n-               Write_Int (Int (C));\n-               Write_Str (\", starting at \");\n-               Write_Int (OP);\n-               Write_Eol;\n-            end if;\n-\n-            for J in 1 .. C loop\n-               Data (OP) := Character'Pos (' ');\n-               OP := OP + 1;\n-            end loop;\n-\n-         --  Specified repeated character\n-\n-         else -- B = C_Repeat\n-            B := Read_Byte;\n-\n-            if Debug_Flag_Tree then\n-               Write_Str (\"==>    other char:    \");\n-               Write_Int (Int (C));\n-               Write_Str (\" (\");\n-               Write_Int (Int (B));\n-               Write_Char (')');\n-               Write_Str (\", starting at \");\n-               Write_Int (OP);\n-               Write_Eol;\n-            end if;\n-\n-            for J in 1 .. C loop\n-               Data (OP) := B;\n-               OP := OP + 1;\n-            end loop;\n-         end if;\n-      end loop;\n-\n-      --  At end of loop, data item must be exactly filled\n-\n-      if OP /= Length + 1 then\n-         raise Tree_Format_Error;\n-      end if;\n-\n-   end Tree_Read_Data;\n-\n-   --------------------------\n-   -- Tree_Read_Initialize --\n-   --------------------------\n-\n-   procedure Tree_Read_Initialize (Desc : File_Descriptor) is\n-   begin\n-      Buft := 0;\n-      Bufn := 0;\n-      Tree_FD := Desc;\n-      Debug_Flag_Tree := Debug_Flag_5;\n-   end Tree_Read_Initialize;\n-\n-   -------------------\n-   -- Tree_Read_Int --\n-   -------------------\n-\n-   procedure Tree_Read_Int (N : out Int) is\n-      N_Bytes : Int_Bytes;\n-\n-   begin\n-      for J in 1 .. 4 loop\n-         N_Bytes (J) := Read_Byte;\n-      end loop;\n-\n-      N := To_Int (N_Bytes);\n-\n-      if Debug_Flag_Tree then\n-         Write_Str (\"==> transmitting Int = \");\n-         Write_Int (N);\n-         Write_Eol;\n-      end if;\n-   end Tree_Read_Int;\n-\n-   -------------------\n-   -- Tree_Read_Str --\n-   -------------------\n-\n-   procedure Tree_Read_Str (S : out String_Ptr) is\n-      N : Nat;\n-\n-   begin\n-      Tree_Read_Int (N);\n-      S := new String (1 .. Natural (N));\n-      Tree_Read_Data (S.all (1)'Address, N);\n-   end Tree_Read_Str;\n-\n-   -------------------------\n-   -- Tree_Read_Terminate --\n-   -------------------------\n-\n-   procedure Tree_Read_Terminate is\n-   begin\n-      --  Must be at end of input buffer, so we should get Tree_Format_Error\n-      --  if we try to read one more byte, if not, we have a format error.\n-\n-      declare\n-         B : Byte;\n-         pragma Warnings (Off, B);\n-\n-      begin\n-         B := Read_Byte;\n-\n-      exception\n-         when Tree_Format_Error => return;\n-      end;\n-\n-      raise Tree_Format_Error;\n-   end Tree_Read_Terminate;\n-\n-   ---------------------\n-   -- Tree_Write_Bool --\n-   ---------------------\n-\n-   procedure Tree_Write_Bool (B : Boolean) is\n-   begin\n-      if Debug_Flag_Tree then\n-         Write_Str (\"==> transmitting Boolean = \");\n-\n-         if B then\n-            Write_Str (\"True\");\n-         else\n-            Write_Str (\"False\");\n-         end if;\n-\n-         Write_Eol;\n-      end if;\n-\n-      Write_Byte (Boolean'Pos (B));\n-   end Tree_Write_Bool;\n-\n-   ---------------------\n-   -- Tree_Write_Char --\n-   ---------------------\n-\n-   procedure Tree_Write_Char (C : Character) is\n-   begin\n-      if Debug_Flag_Tree then\n-         Write_Str (\"==> transmitting Character = \");\n-         Write_Char (C);\n-         Write_Eol;\n-      end if;\n-\n-      Write_Byte (Character'Pos (C));\n-   end Tree_Write_Char;\n-\n-   ---------------------\n-   -- Tree_Write_Data --\n-   ---------------------\n-\n-   procedure Tree_Write_Data (Addr : Address; Length : Int) is\n-\n-      type S is array (Pos) of Byte;\n-      --  This is a big array, for which we have to suppress the warning\n-\n-      type SP is access all S;\n-\n-      function To_SP is new Unchecked_Conversion (Address, SP);\n-\n-      Data : constant SP := To_SP (Addr);\n-      --  Pointer to data to be written, converted to array type\n-\n-      IP : Pos := 1;\n-      --  Input buffer pointer, next byte to be processed\n-\n-      NC : Nat range 0 .. Max_Count := 0;\n-      --  Number of bytes of non-compressible sequence\n-\n-      C  : Byte;\n-\n-      procedure Write_Non_Compressed_Sequence;\n-      --  Output currently collected sequence of non-compressible data\n-\n-      -----------------------------------\n-      -- Write_Non_Compressed_Sequence --\n-      -----------------------------------\n-\n-      procedure Write_Non_Compressed_Sequence is\n-      begin\n-         if NC > 0 then\n-            Write_Byte (C_Noncomp + Byte (NC));\n-\n-            if Debug_Flag_Tree then\n-               Write_Str (\"==>    uncompressed:  \");\n-               Write_Int (NC);\n-               Write_Str (\", starting at \");\n-               Write_Int (IP - NC);\n-               Write_Eol;\n-            end if;\n-\n-            for J in reverse 1 .. NC loop\n-               Write_Byte (Data (IP - J));\n-            end loop;\n-\n-            NC := 0;\n-         end if;\n-      end Write_Non_Compressed_Sequence;\n-\n-   --  Start of processing for Tree_Write_Data\n-\n-   begin\n-      if Debug_Flag_Tree then\n-         Write_Str (\"==> transmitting \");\n-         Write_Int (Length);\n-         Write_Str (\" data bytes\");\n-         Write_Eol;\n-      end if;\n-\n-      --  We write the count at the start, so that we can check it on\n-      --  the corresponding read to make sure that reads and writes match\n-\n-      Tree_Write_Int (Length);\n-\n-      --  Conversion loop\n-      --    IP is index of next input character\n-      --    NC is number of non-compressible bytes saved up\n-\n-      loop\n-         --  If input is completely processed, then we are all done\n-\n-         if IP > Length then\n-            Write_Non_Compressed_Sequence;\n-            return;\n-         end if;\n-\n-         --  Test for compressible sequence, must be at least three identical\n-         --  bytes in a row to be worthwhile compressing.\n-\n-         if IP + 2 <= Length\n-           and then Data (IP) = Data (IP + 1)\n-           and then Data (IP) = Data (IP + 2)\n-         then\n-            Write_Non_Compressed_Sequence;\n-\n-            --  Count length of new compression sequence\n-\n-            C := 3;\n-            IP := IP + 3;\n-\n-            while IP < Length\n-              and then Data (IP) = Data (IP - 1)\n-              and then C < Max_Count\n-            loop\n-               C := C + 1;\n-               IP := IP + 1;\n-            end loop;\n-\n-            --  Output compression sequence\n-\n-            if Data (IP - 1) = 0 then\n-               if Debug_Flag_Tree then\n-                  Write_Str (\"==>    zeroes:        \");\n-                  Write_Int (Int (C));\n-                  Write_Str (\", starting at \");\n-                  Write_Int (IP - Int (C));\n-                  Write_Eol;\n-               end if;\n-\n-               Write_Byte (C_Zeros + C);\n-\n-            elsif Data (IP - 1) = Character'Pos (' ') then\n-               if Debug_Flag_Tree then\n-                  Write_Str (\"==>    spaces:        \");\n-                  Write_Int (Int (C));\n-                  Write_Str (\", starting at \");\n-                  Write_Int (IP - Int (C));\n-                  Write_Eol;\n-               end if;\n-\n-               Write_Byte (C_Spaces + C);\n-\n-            else\n-               if Debug_Flag_Tree then\n-                  Write_Str (\"==>    other char:    \");\n-                  Write_Int (Int (C));\n-                  Write_Str (\" (\");\n-                  Write_Int (Int (Data (IP - 1)));\n-                  Write_Char (')');\n-                  Write_Str (\", starting at \");\n-                  Write_Int (IP - Int (C));\n-                  Write_Eol;\n-               end if;\n-\n-               Write_Byte (C_Repeat + C);\n-               Write_Byte (Data (IP - 1));\n-            end if;\n-\n-         --  No compression possible here\n-\n-         else\n-            --  Output non-compressed sequence if at maximum length\n-\n-            if NC = Max_Count then\n-               Write_Non_Compressed_Sequence;\n-            end if;\n-\n-            NC := NC + 1;\n-            IP := IP + 1;\n-         end if;\n-      end loop;\n-\n-   end Tree_Write_Data;\n-\n-   ---------------------------\n-   -- Tree_Write_Initialize --\n-   ---------------------------\n-\n-   procedure Tree_Write_Initialize (Desc : File_Descriptor) is\n-   begin\n-      Bufn := 0;\n-      Tree_FD := Desc;\n-      Set_Standard_Error;\n-      Debug_Flag_Tree := Debug_Flag_5;\n-   end Tree_Write_Initialize;\n-\n-   --------------------\n-   -- Tree_Write_Int --\n-   --------------------\n-\n-   procedure Tree_Write_Int (N : Int) is\n-      N_Bytes : constant Int_Bytes := To_Int_Bytes (N);\n-\n-   begin\n-      if Debug_Flag_Tree then\n-         Write_Str (\"==> transmitting Int = \");\n-         Write_Int (N);\n-         Write_Eol;\n-      end if;\n-\n-      for J in 1 .. 4 loop\n-         Write_Byte (N_Bytes (J));\n-      end loop;\n-   end Tree_Write_Int;\n-\n-   --------------------\n-   -- Tree_Write_Str --\n-   --------------------\n-\n-   procedure Tree_Write_Str (S : String_Ptr) is\n-   begin\n-      Tree_Write_Int (S'Length);\n-      Tree_Write_Data (S (1)'Address, S'Length);\n-   end Tree_Write_Str;\n-\n-   --------------------------\n-   -- Tree_Write_Terminate --\n-   --------------------------\n-\n-   procedure Tree_Write_Terminate is\n-   begin\n-      if Bufn > 0 then\n-         Write_Buffer;\n-      end if;\n-   end Tree_Write_Terminate;\n-\n-   ------------------\n-   -- Write_Buffer --\n-   ------------------\n-\n-   procedure Write_Buffer is\n-   begin\n-      if Integer (Bufn) = Write (Tree_FD, Buf'Address, Integer (Bufn)) then\n-         Bufn := 0;\n-\n-      else\n-         Set_Standard_Error;\n-         Write_Str (\"fatal error: disk full\");\n-         OS_Exit (2);\n-      end if;\n-   end Write_Buffer;\n-\n-   ----------------\n-   -- Write_Byte --\n-   ----------------\n-\n-   procedure Write_Byte (B : Byte) is\n-   begin\n-      Bufn := Bufn + 1;\n-      Buf (Bufn) := B;\n-\n-      if Bufn = Buflen then\n-         Write_Buffer;\n-      end if;\n-   end Write_Byte;\n-\n-end Tree_IO;"}, {"sha": "fb7fbc5a54eca08f8945884cb33471854f8b9e46", "filename": "gcc/ada/tree_io.ads", "status": "removed", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_io.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bad8184e3e16dfd4d30099e18e443c4a54b97c83/gcc%2Fada%2Ftree_io.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_io.ads?ref=bad8184e3e16dfd4d30099e18e443c4a54b97c83", "patch": "@@ -1,109 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                              T R E E _ I O                               --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package contains the routines used to read and write the tree files\n---  used by ASIS. Only the actual read and write routines are here. The open,\n---  create and close routines are elsewhere (in Osint in the compiler, and in\n---  the tree read driver for the tree read interface).\n-\n---  Should we remove this package altogether???\n-\n-with Types;  use Types;\n-with System; use System;\n-\n-pragma Warnings (Off);\n---  This package is used also by gnatcoll\n-with System.OS_Lib; use System.OS_Lib;\n-pragma Warnings (On);\n-\n-package Tree_IO is\n-\n-   Tree_Format_Error : exception;\n-   --  Raised if a format error is detected in the input file\n-\n-   procedure Tree_Read_Initialize (Desc : File_Descriptor);\n-   --  Called to initialize reading of a tree file. This call must be made\n-   --  before calls to Tree_Read_xx. No calls to Tree_Write_xx are permitted\n-   --  after this call.\n-\n-   procedure Tree_Read_Data (Addr : Address; Length : Int);\n-   --  Checks that the Length provided is the same as what has been provided\n-   --  to the corresponding Tree_Write_Data from the current tree file,\n-   --  Tree_Format_Error is raised if it is not the case. If Length is\n-   --  correct and non zero, reads Length bytes of information into memory\n-   --  starting at Addr from the current tree file.\n-\n-   procedure Tree_Read_Bool (B : out Boolean);\n-   --  Reads a single boolean value. The boolean value must have been written\n-   --  with a call to the Tree_Write_Bool procedure.\n-\n-   procedure Tree_Read_Char (C : out Character);\n-   --  Reads a single character. The character must have been written with a\n-   --  call to the Tree_Write_Char procedure.\n-\n-   procedure Tree_Read_Int (N : out Int);\n-   --  Reads a single integer value. The integer must have been written with\n-   --  a call to the Tree_Write_Int procedure.\n-\n-   procedure Tree_Read_Str (S : out String_Ptr);\n-   --  Read string, allocate on heap, and return pointer to allocated string\n-   --  which always has a lower bound of 1.\n-\n-   procedure Tree_Read_Terminate;\n-   --  Called after reading all data, checks that the buffer pointers is at\n-   --  the end of file, raising Tree_Format_Error if not.\n-\n-   procedure Tree_Write_Initialize (Desc : File_Descriptor);\n-   --  Called to initialize writing of a tree file. This call must be made\n-   --  before calls to Tree_Write_xx. No calls to Tree_Read_xx are permitted\n-   --  after this call.\n-\n-   procedure Tree_Write_Data (Addr : Address; Length : Int);\n-   --  Writes Length then, if Length is not null, Length bytes of data\n-   --  starting at Addr to current tree file\n-\n-   procedure Tree_Write_Bool (B : Boolean);\n-   --  Writes a single boolean value to the current tree file\n-\n-   procedure Tree_Write_Char (C : Character);\n-   --  Writes a single character to the current tree file\n-\n-   procedure Tree_Write_Int (N : Int);\n-   --  Writes a single integer value to the current tree file\n-\n-   procedure Tree_Write_Str (S : String_Ptr);\n-   --  Write out string value referenced by S (low bound of S must be 1)\n-\n-   procedure Tree_Write_Terminate;\n-   --  Terminates writing of the file (flushing the buffer), but does not\n-   --  close the file (the caller is responsible for closing the file).\n-\n-end Tree_IO;"}, {"sha": "5f479b4e754dfaa307c9ec6a2961eaf0f3cf460c", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 1, "deletions": 54, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -29,8 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Output;  use Output;\n-with Tree_IO; use Tree_IO;\n+with Output; use Output;\n \n with GNAT.HTable; use GNAT.HTable;\n \n@@ -716,58 +715,6 @@ package body Uintp is\n       end if;\n    end Release_And_Save;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      Uints.Tree_Read;\n-      Udigits.Tree_Read;\n-\n-      Tree_Read_Int (Int (Uint_Int_First));\n-      Tree_Read_Int (Int (Uint_Int_Last));\n-      Tree_Read_Int (UI_Power_2_Set);\n-      Tree_Read_Int (UI_Power_10_Set);\n-      Tree_Read_Int (Int (Uints_Min));\n-      Tree_Read_Int (Udigits_Min);\n-\n-      for J in 0 .. UI_Power_2_Set loop\n-         Tree_Read_Int (Int (UI_Power_2 (J)));\n-      end loop;\n-\n-      for J in 0 .. UI_Power_10_Set loop\n-         Tree_Read_Int (Int (UI_Power_10 (J)));\n-      end loop;\n-\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      Uints.Tree_Write;\n-      Udigits.Tree_Write;\n-\n-      Tree_Write_Int (Int (Uint_Int_First));\n-      Tree_Write_Int (Int (Uint_Int_Last));\n-      Tree_Write_Int (UI_Power_2_Set);\n-      Tree_Write_Int (UI_Power_10_Set);\n-      Tree_Write_Int (Int (Uints_Min));\n-      Tree_Write_Int (Udigits_Min);\n-\n-      for J in 0 .. UI_Power_2_Set loop\n-         Tree_Write_Int (Int (UI_Power_2 (J)));\n-      end loop;\n-\n-      for J in 0 .. UI_Power_10_Set loop\n-         Tree_Write_Int (Int (UI_Power_10 (J)));\n-      end loop;\n-\n-   end Tree_Write;\n-\n    -------------\n    -- UI_Abs --\n    -------------"}, {"sha": "652145e1bfa84622e3b0e8121473a6a5eb33f822", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -107,20 +107,10 @@ package Uintp is\n    -----------------\n \n    procedure Initialize;\n-   --  Initialize Uint tables. Note that Initialize must not be called if\n-   --  Tree_Read is used. Note also that there is no lock routine in this\n+   --  Initialize Uint tables. Note also that there is no lock routine in this\n    --  unit, these are among the few tables that can be expanded during\n    --  gigi processing.\n \n-   procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using the relevant\n-   --  Table.Tree_Read routines. Note that Initialize should not be called if\n-   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n-\n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using the relevant\n-   --  Table.Tree_Write routines.\n-\n    function UI_Abs (Right : Uint) return Uint;\n    pragma Inline (UI_Abs);\n    --  Returns abs function of universal integer"}, {"sha": "cd45cc0f77b8ff48a1d260c4c85070f0628f8380", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 2, "deletions": 53, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -30,9 +30,8 @@\n ------------------------------------------------------------------------------\n \n with Alloc;\n-with Output;  use Output;\n+with Output; use Output;\n with Table;\n-with Tree_IO; use Tree_IO;\n \n package body Urealp is\n \n@@ -57,7 +56,7 @@ package body Urealp is\n \n    --  The following representation clause ensures that the above record\n    --  has no holes. We do this so that when instances of this record are\n-   --  written by Tree_Gen, we do not write uninitialized values to the file.\n+   --  written, we do not write uninitialized values to the file.\n \n    for Ureal_Entry use record\n       Num      at  0 range 0 .. 31;\n@@ -95,10 +94,6 @@ package body Urealp is\n    UR_2_M_128 : Ureal;\n    UR_2_M_80  : Ureal;\n \n-   Num_Ureal_Constants : constant := 10;\n-   --  This is used for an assertion check in Tree_Read and Tree_Write to\n-   --  help remember to add values to these routines when we add to the list.\n-\n    Normalized_Real : Ureal := No_Ureal;\n    --  Used to memoize Norm_Num and Norm_Den, if either of these functions\n    --  is called, this value is set and Normalized_Entry contains the result\n@@ -487,52 +482,6 @@ package body Urealp is\n       return Store_Ureal (Normalize (Val));\n    end Store_Ureal_Normalized;\n \n-   ---------------\n-   -- Tree_Read --\n-   ---------------\n-\n-   procedure Tree_Read is\n-   begin\n-      pragma Assert (Num_Ureal_Constants = 10);\n-\n-      Ureals.Tree_Read;\n-      Tree_Read_Int (Int (UR_0));\n-      Tree_Read_Int (Int (UR_M_0));\n-      Tree_Read_Int (Int (UR_Tenth));\n-      Tree_Read_Int (Int (UR_Half));\n-      Tree_Read_Int (Int (UR_1));\n-      Tree_Read_Int (Int (UR_2));\n-      Tree_Read_Int (Int (UR_10));\n-      Tree_Read_Int (Int (UR_100));\n-      Tree_Read_Int (Int (UR_2_128));\n-      Tree_Read_Int (Int (UR_2_M_128));\n-\n-      --  Clear the normalization cache\n-\n-      Normalized_Real := No_Ureal;\n-   end Tree_Read;\n-\n-   ----------------\n-   -- Tree_Write --\n-   ----------------\n-\n-   procedure Tree_Write is\n-   begin\n-      pragma Assert (Num_Ureal_Constants = 10);\n-\n-      Ureals.Tree_Write;\n-      Tree_Write_Int (Int (UR_0));\n-      Tree_Write_Int (Int (UR_M_0));\n-      Tree_Write_Int (Int (UR_Tenth));\n-      Tree_Write_Int (Int (UR_Half));\n-      Tree_Write_Int (Int (UR_1));\n-      Tree_Write_Int (Int (UR_2));\n-      Tree_Write_Int (Int (UR_10));\n-      Tree_Write_Int (Int (UR_100));\n-      Tree_Write_Int (Int (UR_2_128));\n-      Tree_Write_Int (Int (UR_2_M_128));\n-   end Tree_Write;\n-\n    ------------\n    -- UR_Abs --\n    ------------"}, {"sha": "394bfed072b5a7ea98a01ed76f3e46b17701cb09", "filename": "gcc/ada/urealp.ads", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Furealp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba2034610fcc0d56dd52cb20c26f9ab1997b520e/gcc%2Fada%2Furealp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.ads?ref=ba2034610fcc0d56dd52cb20c26f9ab1997b520e", "patch": "@@ -135,20 +135,10 @@ package Urealp is\n    -----------------\n \n    procedure Initialize;\n-   --  Initialize Ureal tables. Note that Initialize must not be called if\n-   --  Tree_Read is used. Note also that there is no Lock routine in this\n+   --  Initialize Ureal tables. Note that there is no Lock routine in this\n    --  unit. These tables are among the few tables that can be expanded\n    --  during Gigi processing.\n \n-   procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using the relevant\n-   --  Table.Tree_Read routines. Note that Initialize should not be called if\n-   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n-\n-   procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using the relevant\n-   --  Table.Tree_Write routines.\n-\n    function Rbase (Real : Ureal) return Nat;\n    --  Return the base of the universal real\n "}]}