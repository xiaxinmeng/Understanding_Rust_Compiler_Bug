{"sha": "4430da7ffcfade5aab8ffc561202e810f2ef5ae6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzMGRhN2ZmY2ZhZGU1YWFiOGZmYzU2MTIwMmU4MTBmMmVmNWFlNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-03T17:15:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-03T17:15:36Z"}, "message": "tree-phinodes.c (remove_phi_node): Clean up by factoring out calls to release_ssa_name and release_phi_node.\n\n\t* tree-phinodes.c (remove_phi_node): Clean up by factoring out\n\tcalls to release_ssa_name and release_phi_node.\n\nFrom-SVN: r95835", "tree": {"sha": "5517a8eb77cadd3fcdff6ee626b6ecfd197173cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5517a8eb77cadd3fcdff6ee626b6ecfd197173cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4430da7ffcfade5aab8ffc561202e810f2ef5ae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4430da7ffcfade5aab8ffc561202e810f2ef5ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4430da7ffcfade5aab8ffc561202e810f2ef5ae6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4430da7ffcfade5aab8ffc561202e810f2ef5ae6/comments", "author": null, "committer": null, "parents": [{"sha": "8fb790fd3f5d9152f162370d84bc24be1913e642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fb790fd3f5d9152f162370d84bc24be1913e642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fb790fd3f5d9152f162370d84bc24be1913e642"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "2f78c4d7a51d0cdfbd8f0668fd4e5bfb328409f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4430da7ffcfade5aab8ffc561202e810f2ef5ae6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4430da7ffcfade5aab8ffc561202e810f2ef5ae6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4430da7ffcfade5aab8ffc561202e810f2ef5ae6", "patch": "@@ -6,6 +6,9 @@\n \t* cfgexpand.c (construct_exit_block): Use EDGE_PRED instead of\n \tEDGE_I.\n \n+\t* tree-phinodes.c (remove_phi_node): Clean up by factoring out\n+\tcalls to release_ssa_name and release_phi_node.\n+\n 2005-03-03  Roger Sayle  <roger@eyesopen.com>\n \t    Andrew Pinski  <pinskia@physics.uc.edu>\n "}, {"sha": "a849d6ac791b513acf19c1c3393008809f569b3f", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4430da7ffcfade5aab8ffc561202e810f2ef5ae6/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4430da7ffcfade5aab8ffc561202e810f2ef5ae6/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=4430da7ffcfade5aab8ffc561202e810f2ef5ae6", "patch": "@@ -404,36 +404,27 @@ remove_phi_args (edge e)\n void\n remove_phi_node (tree phi, tree prev, basic_block bb)\n {\n-  if (prev)\n-    {\n-      /* Rewire the list if we are given a PREV pointer.  */\n-      PHI_CHAIN (prev) = PHI_CHAIN (phi);\n+  tree *loc;\n \n-      /* If we are deleting the PHI node, then we should release the\n-\t SSA_NAME node so that it can be reused.  */\n-      release_ssa_name (PHI_RESULT (phi));\n-      release_phi_node (phi);\n-    }\n-  else if (phi == phi_nodes (bb))\n+  if (prev)\n     {\n-      /* Update the list head if removing the first element.  */\n-      bb_ann (bb)->phi_nodes = PHI_CHAIN (phi);\n-\n-      /* If we are deleting the PHI node, then we should release the\n-\t SSA_NAME node so that it can be reused.  */\n-      release_ssa_name (PHI_RESULT (phi));\n-      release_phi_node (phi);\n+      loc = &PHI_CHAIN (prev);\n     }\n   else\n     {\n-      /* Traverse the list looking for the node to remove.  */\n-      tree prev, t;\n-      prev = NULL_TREE;\n-      for (t = phi_nodes (bb); t && t != phi; t = PHI_CHAIN (t))\n-\tprev = t;\n-      if (t)\n-\tremove_phi_node (t, prev, bb);\n+      for (loc = &(bb_ann (bb)->phi_nodes);\n+\t   *loc != phi;\n+\t   loc = &PHI_CHAIN (*loc))\n+\t;\n     }\n+\n+  /* Remove PHI from the chain.  */\n+  *loc = PHI_CHAIN (phi);\n+\n+  /* If we are deleting the PHI node, then we should release the\n+     SSA_NAME node so that it can be reused.  */\n+  release_ssa_name (PHI_RESULT (phi));\n+  release_phi_node (phi);\n }\n \n "}]}