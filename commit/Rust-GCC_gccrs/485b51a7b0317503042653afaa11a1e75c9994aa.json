{"sha": "485b51a7b0317503042653afaa11a1e75c9994aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg1YjUxYTdiMDMxNzUwMzA0MjY1M2FmYWExMWExZTc1Yzk5OTRhYQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-04-17T15:54:55Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-04-17T15:54:55Z"}, "message": "linkage.exp: Do not run on remote hosts.\n\n\t* gcc.misc-tests/linkage.exp: Do not run on remote hosts.\n\t* lib/compat.exp (compat-run): Use file_on_host, not remote_file\n\tbuild.\n\t(compat-execute): Likewise.\n\t* lib/copy-file.exp (gcc_copy_files): Use remote_download to copy\n\tfiles to remote hosts.\n\t* lib/c-ctorture.exp (c-torture-compile): Likewise.\n\t(c-torture-execute): Likewise.\n\t* lib/dg-pch.exp (dg-pch): Use file_on_host, not remote_file build\n\tor plain file.  Use remote_upload and remote_download to copy\n\tfiles about.\n\t* lib/scanasm.exp (dg-scan): Upload the file from the remote host\n\tbefore scanning it.\n\nFrom-SVN: r123914", "tree": {"sha": "b40e0ad38c6773b50f26d5a79afb269407ea32dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b40e0ad38c6773b50f26d5a79afb269407ea32dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/485b51a7b0317503042653afaa11a1e75c9994aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485b51a7b0317503042653afaa11a1e75c9994aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/485b51a7b0317503042653afaa11a1e75c9994aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485b51a7b0317503042653afaa11a1e75c9994aa/comments", "author": null, "committer": null, "parents": [{"sha": "f2eb49dcfaf3c6d6bb344e7a175576148a7d310e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2eb49dcfaf3c6d6bb344e7a175576148a7d310e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2eb49dcfaf3c6d6bb344e7a175576148a7d310e"}], "stats": {"total": 79, "additions": 52, "deletions": 27}, "files": [{"sha": "f04e49841613557c8c3bc4d8b65fe0f497c27962", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=485b51a7b0317503042653afaa11a1e75c9994aa", "patch": "@@ -1,3 +1,19 @@\n+2007-04-17  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.misc-tests/linkage.exp: Do not run on remote hosts.\n+\t* lib/compat.exp (compat-run): Use file_on_host, not remote_file\n+\tbuild.\n+\t(compat-execute): Likewise.\n+\t* lib/copy-file.exp (gcc_copy_files): Use remote_download to copy\n+\tfiles to remote hosts.\n+\t* lib/c-ctorture.exp (c-torture-compile): Likewise.\n+\t(c-torture-execute): Likewise.\n+\t* lib/dg-pch.exp (dg-pch): Use file_on_host, not remote_file build\n+\tor plain file.  Use remote_upload and remote_download to copy\n+\tfiles about.\n+\t* lib/scanasm.exp (dg-scan): Upload the file from the remote host\n+\tbefore scanning it.\n+\n 2007-04-17  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* gcc.dg/vect/no-tree-scev-cprop-vect-iv-3.c: New test.\n@@ -55,6 +71,7 @@\n \t* g++.dg/warn/anonymous-namespace-1.C: New test\n \t* g++.dg/warn/anonymous-namespace-1.h: New test\n \n+>>>>>>> .r123913\n 2007-04-14  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR testsuite/31578\n@@ -224,6 +241,7 @@\n \t* lib/target-supports.exp\n \t(check_effective_target_fstack_protector): Rewrite.\n \n+>>>>>>> .r123860\n 2007-04-09  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/31449"}, {"sha": "10eeba6c15e7bcd07b0896ed4ae551903cfbb848", "filename": "gcc/testsuite/gcc.misc-tests/linkage.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Flinkage.exp?ref=485b51a7b0317503042653afaa11a1e75c9994aa", "patch": "@@ -18,7 +18,7 @@\n # was written by Rob Savoye. (rob@cygnus.com)\n # All the other tests driven by that file have since been moved elsewhere.\n \n-if [isnative] then {\n+if { [isnative] && ![is_remote host] } then {\n     set lines [gcc_target_compile \"$srcdir/$subdir/linkage-x.c\" \"linkage-x.o\" object {additional_flags=\"-w\"}]\n     if ![string match \"\" $lines] then {\n \tfail \"$subdir/linkage.c compile\""}, {"sha": "a65bda51361af385a53829d0a945aaed25c49454", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=485b51a7b0317503042653afaa11a1e75c9994aa", "patch": "@@ -96,7 +96,7 @@ proc c-torture-compile { src option } {\n \n     set comp_output [gcc_target_compile \"$src\" \"$output\" object $options]\n     gcc_check_compile $testcase $option $output $comp_output\n-    remote_file build delete $output\n+    file_on_host delete $output\n }\n \n #\n@@ -171,7 +171,7 @@ proc c-torture-execute { sources args } {\n             set ignore_me [eval $torture_eval_before_compile]\n \t}\n \n-\tremote_file build delete $execname\n+\tfile_on_host delete $execname\n \tverbose \"Testing $testcase, $option\" 1\n \n \tset options \"\"\n@@ -183,7 +183,7 @@ proc c-torture-execute { sources args } {\n \n \tif ![gcc_check_compile \"$testcase compilation\" $option $execname $comp_output] {\n \t    unresolved \"$testcase execution, $option\"\n-\t    remote_file build delete $execname\n+\t    file_on_host delete $execname\n \t    continue\n \t}\n \n@@ -220,7 +220,7 @@ proc c-torture-execute { sources args } {\n \t# the entire process down because it usually does not \"hit\".\n \tset skip 0\n \tif { ![isnative] && [info exists oldexec] } {\n-\t    if { [remote_file build cmp $oldexec $execname] == 0 } {\n+\t    if { [file_on_host cmp $oldexec $execname] == 0 } {\n \t\tset skip 1\n \t    }\n \t}\n@@ -230,14 +230,14 @@ proc c-torture-execute { sources args } {\n \t    set output [lindex $result 1]\n \t}\n         if { $oldstatus == \"pass\" } {\n-\t    remote_file build delete $oldexec\n+\t    file_on_host delete $oldexec\n         }\n \t$status \"$testcase execution, $option\"\n \tset oldstatus $status\n     }\n     if [info exists status] {\n \tif { $status == \"pass\" } {\n-\t    remote_file build delete $execname\n+\t    file_on_host delete $execname\n \t}\n     }\n }"}, {"sha": "363c44d5319ca565901bc38c20c4676cdf59e010", "filename": "gcc/testsuite/lib/compat.exp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fcompat.exp?ref=485b51a7b0317503042653afaa11a1e75c9994aa", "patch": "@@ -115,7 +115,7 @@ proc compat-run { testname objlist dest optall optfile optstr } {\n \n     # Check that all of the objects were built successfully.\n     foreach obj [split $objlist] {\n-\tif ![file exists $obj] then {\n+\tif ![file_on_host exists $obj] then {\n \t    unresolved \"$testcase $testname link $optstr\"\n \t    unresolved \"$testcase $testname execute $optstr\"\n \t    return\n@@ -142,7 +142,7 @@ proc compat-run { testname objlist dest optall optfile optstr } {\n     set result [${tool}_load $dest \"\" \"\"]\n     set status [lindex $result 0]\n     if { $status == \"pass\" } then {\n-\tremote_file build delete $dest\n+\tfile_on_host delete $dest\n     }\n     $status \"$testcase $testname execute $optstr\"\n }\n@@ -330,10 +330,10 @@ proc compat-execute { src1 sid use_alt } {\n \tset execname4 \"${execbase}-${count}4\"\n \tincr count\n \n-\tremote_file build delete $execname1\n-\tremote_file build delete $execname2\n-\tremote_file build delete $execname3\n-\tremote_file build delete $execname4\n+\tfile_on_host delete $execname1\n+\tfile_on_host delete $execname2\n+\tfile_on_host delete $execname3\n+\tfile_on_host delete $execname4\n \n \t# Compile pieces with the alternate compiler; we'll catch problems\n \t# later.  Skip this if we don't have an alternate compiler.\n@@ -373,7 +373,7 @@ proc compat-execute { src1 sid use_alt } {\n \tif { $files != \"\" } {\n \t    foreach objfile $files {\n \t\tif { ![info exists gluefile] || $objfile != $gluefile } {\n-\t\t    eval \"remote_file build delete $objfile\"\n+\t\t    eval \"file_on_host delete $objfile\"\n \t\t}\n \t    }\n \t}"}, {"sha": "8041ccf377acb00c1dd2e455eec8945716c6daf1", "filename": "gcc/testsuite/lib/copy-file.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Flib%2Fcopy-file.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Flib%2Fcopy-file.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fcopy-file.exp?ref=485b51a7b0317503042653afaa11a1e75c9994aa", "patch": "@@ -19,7 +19,9 @@\n \n proc gcc_copy_files {srcfiles dstdir} {\n     foreach f $srcfiles {\n-\tif { [catch { set symlink [file readlink $f] } x] } then {\n+\tif { [is_remote host] } {\n+\t    remote_download host $f $dstdir\n+\t} elseif { [catch { set symlink [file readlink $f] } x] } then {\n \t    file copy -force $f $dstdir\n \t} else {\n \t    if { [regexp \"^/\" \"$symlink\"] } then {"}, {"sha": "6a5f6574b1fa6717cdcf1e3e2349634ec70fb7b5", "filename": "gcc/testsuite/lib/dg-pch.exp", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp?ref=485b51a7b0317503042653afaa11a1e75c9994aa", "patch": "@@ -26,9 +26,9 @@ proc dg-pch { subdir test options suffix } {\n     set nshort \"$subdir/[file tail $test]\"\n     set bname \"[file rootname [file tail $nshort]]\"\n \n-    catch { file delete \"$bname$suffix.gch\" }\n-    catch { file delete \"$bname.s\" }\n-    catch { file delete \"$bname.s-gch\" }\n+    catch { file_on_host delete \"$bname$suffix.gch\" }\n+    catch { file_on_host delete \"$bname.s\" }\n+    catch { file_on_host delete \"$bname.s-gch\" }\n \n     # We don't try to use the loop-optimizing options, since they are highly\n     # unlikely to make any difference to PCH.\n@@ -37,23 +37,25 @@ proc dg-pch { subdir test options suffix } {\n \n \t# For the header files, the default is to precompile.\n \tset dg-do-what-default precompile\n-\tcatch { file delete \"$bname$suffix\" }\n+\tcatch { file_on_host delete \"$bname$suffix\" }\n \tgcc_copy_files \"[file rootname $test]${suffix}s\" \"$bname$suffix\"\n \tdg-test -keep-output \"./$bname$suffix\" $flags \"\"\n \n \t# For the rest, the default is to compile to .s.\n \tset dg-do-what-default compile\n \n-\tif { [ file exists \"$bname$suffix.gch\" ] } {\n+\tif { [ file_on_host exists \"$bname$suffix.gch\" ] } {\n \t    # Ensure that the PCH file is used, not the original header.\n-\t    file delete \"$bname$suffix\"\n+\t    file_on_host delete \"$bname$suffix\"\n \n \t    dg-test -keep-output $test $flags \"-I.\"\n-\t    file delete \"$bname$suffix.gch\"\n-\t    if { [ file exists \"$bname.s\" ] } {\n-\t\tfile rename \"$bname.s\" \"$bname.s-gch\"\n+\t    file_on_host delete \"$bname$suffix.gch\"\n+\t    if { [ file_on_host exists \"$bname.s\" ] } {\n+\t\tremote_upload host \"$bname.s\" \"$bname.s-gch\"\n+\t\tremote_download host \"$bname.s-gch\"\n \t\tgcc_copy_files \"[file rootname $test]${suffix}s\" \"$bname$suffix\"\n \t\tdg-test -keep-output $test $flags \"-I.\"\n+\t\tremote_upload host \"$bname.s\"\n \t\tset tmp [ diff \"$bname.s\" \"$bname.s-gch\" ]\n \t\tif { $tmp == 0 } {\n \t\t    untested \"$nshort $flags assembly comparison\"\n@@ -62,9 +64,9 @@ proc dg-pch { subdir test options suffix } {\n \t\t} else {\n \t\t    fail \"$nshort $flags assembly comparison\"\n \t\t}\n-\t\tfile delete \"$bname$suffix\"\n-\t\tfile delete \"$bname.s\"\n-\t\tfile delete \"$bname.s-gch\"\n+\t\tfile_on_host delete \"$bname$suffix\"\n+\t\tfile_on_host delete \"$bname.s\"\n+\t\tfile_on_host delete \"$bname.s-gch\"\n \t    } else {\n \t\tuntested \"$nshort $flags assembly comparison\"\n \t    }"}, {"sha": "0b7fcb1001c23fcea43ca3b59b833395dd124251", "filename": "gcc/testsuite/lib/scanasm.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/485b51a7b0317503042653afaa11a1e75c9994aa/gcc%2Ftestsuite%2Flib%2Fscanasm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fscanasm.exp?ref=485b51a7b0317503042653afaa11a1e75c9994aa", "patch": "@@ -44,6 +44,9 @@ proc dg-scan { name positive testcase output_file orig_args } {\n \t}\n     }\n \n+    if { [is_remote host] } {\n+\tremote_upload host \"$output_file\"\n+    } \n     set fd [open $output_file r]\n     set text [read $fd]\n     close $fd"}]}