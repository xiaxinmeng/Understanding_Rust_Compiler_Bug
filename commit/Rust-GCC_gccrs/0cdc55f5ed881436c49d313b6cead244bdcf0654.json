{"sha": "0cdc55f5ed881436c49d313b6cead244bdcf0654", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkYzU1ZjVlZDg4MTQzNmM0OWQzMTNiNmNlYWQyNDRiZGNmMDY1NA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-05T17:27:29Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-05T18:13:50Z"}, "message": "d: Merge upstream dmd f5638c7b8.\n\nAdds a CHECKENABLE enum, uses it for all contract parameters for\nconsistency in state checking.\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd f5638c7b8.\n\t* d-builtins.cc (d_init_versions): Use new CHECKENABLE enum.\n\t* d-codegen.cc (array_bounds_check): Likewise.\n\t(build_frame_type): Likewise.\n\t(get_frameinfo): Likewise.\n\t* d-lang.cc (d_init_options): Likewise.\n\t(d_init_options_struct): Don't initialize x_flag_bounds_check.\n\t(d_handle_option): Use new CHECKENABLE enum.\n\t(d_post_options): Likewise.  Set flag_bounds_check here.\n\t* expr.cc (ExprVisitor::visit(AssertExp *)): Use new CHECKENABLE enum.", "tree": {"sha": "f3ac3c20cabb0912a167dd0aecc8c034b2194fea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3ac3c20cabb0912a167dd0aecc8c034b2194fea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cdc55f5ed881436c49d313b6cead244bdcf0654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdc55f5ed881436c49d313b6cead244bdcf0654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cdc55f5ed881436c49d313b6cead244bdcf0654", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdc55f5ed881436c49d313b6cead244bdcf0654/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5094c4400a8687dcf44f5993aee3a88e98519f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5094c4400a8687dcf44f5993aee3a88e98519f3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5094c4400a8687dcf44f5993aee3a88e98519f3b"}], "stats": {"total": 158, "additions": 87, "deletions": 71}, "files": [{"sha": "bd7e3eb15d7ceef3dc8856b0c4b7e9f366f44cf4", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=0cdc55f5ed881436c49d313b6cead244bdcf0654", "patch": "@@ -472,10 +472,10 @@ d_init_versions (void)\n   if (global.params.useUnitTests)\n     VersionCondition::addPredefinedGlobalIdent (\"unittest\");\n \n-  if (global.params.useAssert)\n+  if (global.params.useAssert == CHECKENABLEon)\n     VersionCondition::addPredefinedGlobalIdent (\"assert\");\n \n-  if (global.params.useArrayBounds == BOUNDSCHECKoff)\n+  if (global.params.useArrayBounds == CHECKENABLEoff)\n     VersionCondition::addPredefinedGlobalIdent (\"D_NoBoundsChecks\");\n \n   if (global.params.betterC)"}, {"sha": "301793f1b74259d0cf171f00e1716ca74e98fe7a", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=0cdc55f5ed881436c49d313b6cead244bdcf0654", "patch": "@@ -1749,13 +1749,13 @@ array_bounds_check (void)\n \n   switch (global.params.useArrayBounds)\n     {\n-    case BOUNDSCHECKoff:\n+    case CHECKENABLEoff:\n       return false;\n \n-    case BOUNDSCHECKon:\n+    case CHECKENABLEon:\n       return true;\n \n-    case BOUNDSCHECKsafeonly:\n+    case CHECKENABLEsafeonly:\n       /* For D2 safe functions only.  */\n       fd = d_function_chain->function;\n       if (fd && fd->type->ty == Tfunction)\n@@ -2376,8 +2376,8 @@ build_frame_type (tree ffi, FuncDeclaration *fd)\n      of the calling function non-locally.  So we add all parameters with nested\n      refs to the function frame, this should also mean overriding methods will\n      have the same frame layout when inheriting a contract.  */\n-  if ((global.params.useIn && fd->frequire)\n-      || (global.params.useOut && fd->fensure))\n+  if ((global.params.useIn == CHECKENABLEon && fd->frequire)\n+      || (global.params.useOut == CHECKENABLEon && fd->fensure))\n     {\n       if (fd->parameters)\n \t{\n@@ -2563,8 +2563,8 @@ get_frameinfo (FuncDeclaration *fd)\n \n       /* In checkNestedReference, references from contracts are not added to the\n \t closureVars array, so assume all parameters referenced.  */\n-      if ((global.params.useIn && fd->frequire)\n-\t  || (global.params.useOut && fd->fensure))\n+      if ((global.params.useIn == CHECKENABLEon && fd->frequire)\n+\t  || (global.params.useOut == CHECKENABLEon && fd->fensure))\n \tFRAMEINFO_CREATES_FRAME (ffi) = 1;\n \n       /* If however `fd` is nested (deeply) in a function that creates a"}, {"sha": "203039e9ecfb6f4eef6597d0e630150432414b3f", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 48, "deletions": 35, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=0cdc55f5ed881436c49d313b6cead244bdcf0654", "patch": "@@ -279,12 +279,12 @@ d_init_options (unsigned int, cl_decoded_option *decoded_options)\n   global.vendor = lang_hooks.name;\n   global.params.argv0 = xstrdup (decoded_options[0].arg);\n   global.params.link = true;\n-  global.params.useAssert = true;\n-  global.params.useInvariants = true;\n-  global.params.useIn = true;\n-  global.params.useOut = true;\n-  global.params.useArrayBounds = BOUNDSCHECKdefault;\n-  global.params.useSwitchError = true;\n+  global.params.useAssert = CHECKENABLEdefault;\n+  global.params.useInvariants = CHECKENABLEdefault;\n+  global.params.useIn = CHECKENABLEdefault;\n+  global.params.useOut = CHECKENABLEdefault;\n+  global.params.useArrayBounds = CHECKENABLEdefault;\n+  global.params.useSwitchError = CHECKENABLEdefault;\n   global.params.useModuleInfo = true;\n   global.params.useTypeInfo = true;\n   global.params.useExceptions = true;\n@@ -339,9 +339,6 @@ d_init_options_struct (gcc_options *opts)\n   opts->x_flag_errno_math = 0;\n   opts->frontend_set_flag_errno_math = true;\n \n-  /* Keep in sync with existing -fbounds-check flag.  */\n-  opts->x_flag_bounds_check = global.params.useArrayBounds;\n-\n   /* D says that signed overflow is precisely defined.  */\n   opts->x_flag_wrapv = 1;\n }\n@@ -424,17 +421,16 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       break;\n \n     case OPT_fassert:\n-      global.params.useAssert = value;\n+      global.params.useAssert = value ? CHECKENABLEon : CHECKENABLEoff;\n       break;\n \n     case OPT_fbounds_check:\n-      global.params.useArrayBounds = value\n-\t? BOUNDSCHECKon : BOUNDSCHECKoff;\n+      global.params.useArrayBounds = value ? CHECKENABLEon : CHECKENABLEoff;\n       break;\n \n     case OPT_fbounds_check_:\n-      global.params.useArrayBounds = (value == 2) ? BOUNDSCHECKon\n-\t: (value == 1) ? BOUNDSCHECKsafeonly : BOUNDSCHECKoff;\n+      global.params.useArrayBounds = (value == 2) ? CHECKENABLEon\n+\t: (value == 1) ? CHECKENABLEsafeonly : CHECKENABLEoff;\n       break;\n \n     case OPT_fdebug:\n@@ -496,7 +492,7 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       break;\n \n     case OPT_finvariants:\n-      global.params.useInvariants = value;\n+      global.params.useInvariants = value ? CHECKENABLEon : CHECKENABLEoff;\n       break;\n \n     case OPT_fmain:\n@@ -518,11 +514,11 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       break;\n \n     case OPT_fpostconditions:\n-      global.params.useOut = value;\n+      global.params.useOut = value ? CHECKENABLEon : CHECKENABLEoff;\n       break;\n \n     case OPT_fpreconditions:\n-      global.params.useIn = value;\n+      global.params.useIn = value ? CHECKENABLEon : CHECKENABLEoff;\n       break;\n \n     case OPT_frelease:\n@@ -534,7 +530,7 @@ d_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       break;\n \n     case OPT_fswitch_errors:\n-      global.params.useSwitchError = value;\n+      global.params.useSwitchError = value ? CHECKENABLEon : CHECKENABLEoff;\n       break;\n \n     case OPT_ftransition_all:\n@@ -727,29 +723,46 @@ d_post_options (const char ** fn)\n   *fn = filename;\n \n   /* Release mode doesn't turn off bounds checking for safe functions.  */\n-  if (global.params.useArrayBounds == BOUNDSCHECKdefault)\n+  if (global.params.useArrayBounds == CHECKENABLEdefault)\n     {\n       global.params.useArrayBounds = global.params.release\n-\t? BOUNDSCHECKsafeonly : BOUNDSCHECKon;\n-      flag_bounds_check = !global.params.release;\n+\t? CHECKENABLEsafeonly : CHECKENABLEon;\n     }\n \n-  if (global.params.release)\n+  /* Assert code is generated if unittests are being compiled also, even if\n+     release mode is turned on.  */\n+  if (global.params.useAssert == CHECKENABLEdefault)\n     {\n-      if (!global_options_set.x_flag_invariants)\n-\tglobal.params.useInvariants = false;\n+      if (global.params.useUnitTests || !global.params.release)\n+\tglobal.params.useAssert = CHECKENABLEon;\n+      else\n+\tglobal.params.useAssert = CHECKENABLEoff;\n+    }\n \n-      if (!global_options_set.x_flag_preconditions)\n-\tglobal.params.useIn = false;\n+  /* Checks for switches without a default are turned off in release mode.  */\n+  if (global.params.useSwitchError == CHECKENABLEdefault)\n+    {\n+      global.params.useSwitchError = global.params.release\n+\t? CHECKENABLEoff : CHECKENABLEon;\n+    }\n \n-      if (!global_options_set.x_flag_postconditions)\n-\tglobal.params.useOut = false;\n+  /* Contracts are turned off in release mode.  */\n+  if (global.params.useInvariants == CHECKENABLEdefault)\n+    {\n+      global.params.useInvariants = global.params.release\n+\t? CHECKENABLEoff : CHECKENABLEon;\n+    }\n \n-      if (!global_options_set.x_flag_assert)\n-\tglobal.params.useAssert = false;\n+  if (global.params.useIn == CHECKENABLEdefault)\n+    {\n+      global.params.useIn = global.params.release\n+\t? CHECKENABLEoff : CHECKENABLEon;\n+    }\n \n-      if (!global_options_set.x_flag_switch_errors)\n-\tglobal.params.useSwitchError = false;\n+  if (global.params.useOut == CHECKENABLEdefault)\n+    {\n+      global.params.useOut = global.params.release\n+\t? CHECKENABLEoff : CHECKENABLEon;\n     }\n \n   if (global.params.betterC)\n@@ -766,6 +779,9 @@ d_post_options (const char ** fn)\n       global.params.checkAction = CHECKACTION_halt;\n     }\n \n+  /* Keep in sync with existing -fbounds-check flag.  */\n+  flag_bounds_check = (global.params.useArrayBounds == CHECKENABLEon);\n+\n   /* Turn off partitioning unless it was explicitly requested, as it doesn't\n      work with D exception chaining, where EH handler uses LSDA to determine\n      whether two thrown exception are in the same context.  */\n@@ -784,9 +800,6 @@ d_post_options (const char ** fn)\n   if (flag_excess_precision == EXCESS_PRECISION_DEFAULT)\n     flag_excess_precision = EXCESS_PRECISION_STANDARD;\n \n-  if (global.params.useUnitTests)\n-    global.params.useAssert = true;\n-\n   global.params.symdebug = write_symbols != NO_DEBUG;\n   global.params.useInline = flag_inline_functions;\n   global.params.showColumns = flag_show_column;"}, {"sha": "3248bf7c98248169a7a83e53a1849214ad445270", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=0cdc55f5ed881436c49d313b6cead244bdcf0654", "patch": "@@ -1,4 +1,4 @@\n-56f0a65c493463633a293d71faf37cdf710041ef\n+f5638c7b8a6912858a9b51987df6a725e6796dc9\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "75e4d130564ac84d86774726bfa4f040cdd5f666", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=0cdc55f5ed881436c49d313b6cead244bdcf0654", "patch": "@@ -2451,7 +2451,7 @@ class ExpressionSemanticVisitor : public Visitor\n                     sc->fieldinit[i] |= CSXhalt;\n             }\n \n-            if (!global.params.useAssert)\n+            if (global.params.useAssert == CHECKENABLEoff)\n             {\n                 Expression *e = new HaltExp(exp->loc);\n                 e = semantic(e, sc);"}, {"sha": "eb8d5dbf2dda8567b3fb420dc043409de6e8dbf1", "filename": "gcc/d/dmd/func.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fdmd%2Ffunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fdmd%2Ffunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.c?ref=0cdc55f5ed881436c49d313b6cead244bdcf0654", "patch": "@@ -1668,7 +1668,7 @@ void FuncDeclaration::semantic3(Scope *sc)\n         Scope *scout = NULL;\n         if (needEnsure || addPostInvariant())\n         {\n-            if ((needEnsure && global.params.useOut) || fpostinv)\n+            if ((needEnsure && global.params.useOut == CHECKENABLEon) || fpostinv)\n             {\n                 returnLabel = new LabelDsymbol(Id::returnLabel);\n             }\n@@ -1915,7 +1915,7 @@ void FuncDeclaration::semantic3(Scope *sc)\n                         error(\"has no return statement, but is expected to return a value of type %s\", f->next->toChars());\n                     else\n                         error(\"no return exp; or assert(0); at end of function\");\n-                    if (global.params.useAssert &&\n+                    if (global.params.useAssert == CHECKENABLEon &&\n                         !global.params.useInline)\n                     {\n                         /* Add an assert(0, msg); where the missing return\n@@ -2048,7 +2048,7 @@ void FuncDeclaration::semantic3(Scope *sc)\n \n             sc2 = sc2->pop();\n \n-            if (!global.params.useIn)\n+            if (global.params.useIn == CHECKENABLEoff)\n                 freq = NULL;\n         }\n \n@@ -2072,7 +2072,7 @@ void FuncDeclaration::semantic3(Scope *sc)\n \n             sc2 = sc2->pop();\n \n-            if (!global.params.useOut)\n+            if (global.params.useOut == CHECKENABLEoff)\n                 fens = NULL;\n         }\n \n@@ -4135,7 +4135,7 @@ bool FuncDeclaration::addPreInvariant()\n     AggregateDeclaration *ad = isThis();\n     ClassDeclaration *cd = ad ? ad->isClassDeclaration() : NULL;\n     return (ad && !(cd && cd->isCPPclass()) &&\n-            global.params.useInvariants &&\n+            global.params.useInvariants == CHECKENABLEon &&\n             (protection.kind == PROTprotected || protection.kind == PROTpublic || protection.kind == PROTexport) &&\n             !naked);\n }\n@@ -4146,7 +4146,7 @@ bool FuncDeclaration::addPostInvariant()\n     ClassDeclaration *cd = ad ? ad->isClassDeclaration() : NULL;\n     return (ad && !(cd && cd->isCPPclass()) &&\n             ad->inv &&\n-            global.params.useInvariants &&\n+            global.params.useInvariants == CHECKENABLEon &&\n             (protection.kind == PROTprotected || protection.kind == PROTpublic || protection.kind == PROTexport) &&\n             !naked);\n }\n@@ -4927,7 +4927,7 @@ bool CtorDeclaration::addPreInvariant()\n \n bool CtorDeclaration::addPostInvariant()\n {\n-    return (isThis() && vthis && global.params.useInvariants);\n+    return (isThis() && vthis && global.params.useInvariants == CHECKENABLEon);\n }\n \n \n@@ -4995,7 +4995,7 @@ bool PostBlitDeclaration::addPreInvariant()\n \n bool PostBlitDeclaration::addPostInvariant()\n {\n-    return (isThis() && vthis && global.params.useInvariants);\n+    return (isThis() && vthis && global.params.useInvariants == CHECKENABLEon);\n }\n \n bool PostBlitDeclaration::isVirtual()\n@@ -5067,7 +5067,7 @@ bool DtorDeclaration::overloadInsert(Dsymbol *)\n \n bool DtorDeclaration::addPreInvariant()\n {\n-    return (isThis() && vthis && global.params.useInvariants);\n+    return (isThis() && vthis && global.params.useInvariants == CHECKENABLEon);\n }\n \n bool DtorDeclaration::addPostInvariant()"}, {"sha": "be75fc09d2e849d990d109df61ef898590ac6753", "filename": "gcc/d/dmd/globals.h", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fdmd%2Fglobals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fdmd%2Fglobals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.h?ref=0cdc55f5ed881436c49d313b6cead244bdcf0654", "patch": "@@ -28,12 +28,13 @@ enum\n };\n \n // The state of array bounds checking\n-enum BOUNDSCHECK\n+typedef unsigned char CHECKENABLE;\n+enum\n {\n-    BOUNDSCHECKdefault, // initial value\n-    BOUNDSCHECKoff,     // never do bounds checking\n-    BOUNDSCHECKon,      // always do bounds checking\n-    BOUNDSCHECKsafeonly // do bounds checking only in @safe functions\n+    CHECKENABLEdefault, // initial value\n+    CHECKENABLEoff,     // never do bounds checking\n+    CHECKENABLEon,      // always do bounds checking\n+    CHECKENABLEsafeonly // do bounds checking only in @safe functions\n };\n \n typedef unsigned char CHECKACTION;\n@@ -105,12 +106,7 @@ struct Param\n     bool hasObjectiveC; // target supports Objective-C\n     bool mscoff;        // for Win32: write COFF object files instead of OMF\n     Diagnostic useDeprecated;\n-    bool useAssert;     // generate runtime code for assert()'s\n-    bool useInvariants; // generate class invariant checks\n-    bool useIn;         // generate precondition checks\n-    bool useOut;        // generate postcondition checks\n     bool stackstomp;    // add stack stomping code\n-    bool useSwitchError; // check for switches without a default\n     bool useUnitTests;  // generate unittest code\n     bool useInline;     // inline expand functions\n     bool useDIP25;      // implement http://wiki.dlang.org/DIP25\n@@ -138,7 +134,14 @@ struct Param\n \n     CPU cpu;                // CPU instruction set to target\n \n-    BOUNDSCHECK useArrayBounds;    // when to generate code for array bounds checks\n+    CHECKENABLE useInvariants;     // generate class invariant checks\n+    CHECKENABLE useIn;             // generate precondition checks\n+    CHECKENABLE useOut;            // generate postcondition checks\n+    CHECKENABLE useArrayBounds;    // when to generate code for array bounds checks\n+    CHECKENABLE useAssert;         // when to generate code for assert()'s\n+    CHECKENABLE useSwitchError;    // check for switches without a default\n+    CHECKENABLE boundscheck;       // state of -boundscheck switch\n+\n     CHECKACTION checkAction;       // action to take when bounds, asserts or switch defaults are violated\n \n     const char *argv0;    // program name"}, {"sha": "cd48d9c03cfd0f4ae672fa1578d7173c8d283000", "filename": "gcc/d/dmd/statementsem.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fdmd%2Fstatementsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fdmd%2Fstatementsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.c?ref=0cdc55f5ed881436c49d313b6cead244bdcf0654", "patch": "@@ -2329,7 +2329,7 @@ class StatementSemanticVisitor : public Visitor\n                 needswitcherror = true;\n         }\n \n-        if (!sc->sw->sdefault && (!ss->isFinal || needswitcherror || global.params.useAssert))\n+        if (!sc->sw->sdefault && (!ss->isFinal || needswitcherror || global.params.useAssert == CHECKENABLEon))\n         {\n             ss->hasNoDefault = 1;\n \n@@ -2341,7 +2341,7 @@ class StatementSemanticVisitor : public Visitor\n             CompoundStatement *cs;\n             Statement *s;\n \n-            if (global.params.useSwitchError &&\n+            if (global.params.useSwitchError == CHECKENABLEon &&\n                 global.params.checkAction != CHECKACTION_halt)\n             {\n                 if (global.params.checkAction == CHECKACTION_C)"}, {"sha": "562e35a0f7c494999328bd70830417a4767768af", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdc55f5ed881436c49d313b6cead244bdcf0654/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=0cdc55f5ed881436c49d313b6cead244bdcf0654", "patch": "@@ -1980,7 +1980,7 @@ class ExprVisitor : public Visitor\n     tree assert_pass = void_node;\n     tree assert_fail;\n \n-    if (global.params.useAssert\n+    if (global.params.useAssert == CHECKENABLEon\n \t&& global.params.checkAction == CHECKACTION_D)\n       {\n \t/* Generate: ((bool) e1  ? (void)0 : _d_assert (...))\n@@ -1999,7 +1999,7 @@ class ExprVisitor : public Visitor\n \t/* Build a call to _d_assert().  */\n \tassert_fail = d_assert_call (e->loc, libcall, tmsg);\n \n-\tif (global.params.useInvariants)\n+\tif (global.params.useInvariants == CHECKENABLEon)\n \t  {\n \t    /* If the condition is a D class or struct object with an invariant,\n \t       call it if the condition result is true.  */\n@@ -2025,7 +2025,7 @@ class ExprVisitor : public Visitor\n \t      }\n \t  }\n       }\n-    else if (global.params.useAssert\n+    else if (global.params.useAssert == CHECKENABLEon\n \t     && global.params.checkAction == CHECKACTION_C)\n       {\n \t/* Generate: __builtin_trap()  */"}]}