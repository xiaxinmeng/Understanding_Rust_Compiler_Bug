{"sha": "7a3a8c068bfe942e28089b7a07a32690edad14ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzYThjMDY4YmZlOTQyZTI4MDg5YjdhMDdhMzI2OTBlZGFkMTRlYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gnat.com", "date": "2001-10-26T16:01:07Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-26T16:01:07Z"}, "message": "decl.c (gnat_to_gnu_entity, [...]): Make constant variant of designated type for Is_Access_Constant.\n\n\t* decl.c (gnat_to_gnu_entity, case E_General_Access_Type):\n\tMake constant variant of designated type for Is_Access_Constant.\n\tCall update_pointer_to with main variant.\n\n\t* trans.c (process_freeze_entity, process_type):\n\tCall update_pointer_to on main variant.\n\n\t* utils.c (update_pointer_to): Make corresponding variant for NEW_TYPE.\n\tIf main variant, update all other variants.\n\n\t* utils2.c (build_unary_op, case INDIRECT_REF): No longer set\n\tTREE_STATIC.\n\nFrom-SVN: r46547", "tree": {"sha": "ed4707cd5dcbe013280768918cb414abc1be1092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed4707cd5dcbe013280768918cb414abc1be1092"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a3a8c068bfe942e28089b7a07a32690edad14ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3a8c068bfe942e28089b7a07a32690edad14ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3a8c068bfe942e28089b7a07a32690edad14ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3a8c068bfe942e28089b7a07a32690edad14ea/comments", "author": null, "committer": null, "parents": [{"sha": "b403bd177c82c7ec36f72c07caa0f08bf5a49d93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b403bd177c82c7ec36f72c07caa0f08bf5a49d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b403bd177c82c7ec36f72c07caa0f08bf5a49d93"}], "stats": {"total": 81, "additions": 64, "deletions": 17}, "files": [{"sha": "7ef18b9723d25d9992c78e475f1f23f565ee7768", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3a8c068bfe942e28089b7a07a32690edad14ea/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3a8c068bfe942e28089b7a07a32690edad14ea/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7a3a8c068bfe942e28089b7a07a32690edad14ea", "patch": "@@ -1,3 +1,18 @@\n+2001-10-26  Richard Kenner <kenner@gnat.com>\n+\n+\t* decl.c (gnat_to_gnu_entity, case E_General_Access_Type): \n+\tMake constant variant of designated type for Is_Access_Constant.\n+\tCall update_pointer_to with main variant.\n+\t\n+\t* trans.c (process_freeze_entity, process_type): \n+\tCall update_pointer_to on main variant.\n+\t\n+\t* utils.c (update_pointer_to): Make corresponding variant for NEW_TYPE.\n+\tIf main variant, update all other variants.\n+\t\n+\t* utils2.c (build_unary_op, case INDIRECT_REF): No longer set \n+\tTREE_STATIC.\n+\n 2001-10-26  Robert Dewar <dewar@gnat.com>\n \n \t* prj-util.adb: Minor reformatting"}, {"sha": "23d16f364320110e8e99a408a9872967b148d793", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3a8c068bfe942e28089b7a07a32690edad14ea/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3a8c068bfe942e28089b7a07a32690edad14ea/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=7a3a8c068bfe942e28089b7a07a32690edad14ea", "patch": "@@ -2730,6 +2730,7 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n \t     : In_Extended_Main_Code_Unit (gnat_desig_type));\n \tint got_fat_p = 0;\n \tint made_dummy = 0;\n+\ttree gnu_desig_type = 0;\n \n \tif (No (gnat_desig_full)\n \t    && (Ekind (gnat_desig_type) == E_Class_Wide_Type\n@@ -2838,8 +2839,7 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n \t/* If we already know what the full type is, use it.  */\n \telse if (Present (gnat_desig_full)\n \t\t && present_gnu_tree (gnat_desig_full))\n-\t  gnu_type\n-\t    = build_pointer_type (TREE_TYPE (get_gnu_tree (gnat_desig_full)));\n+\t  gnu_desig_type = TREE_TYPE (get_gnu_tree (gnat_desig_full));\n \n \t/* Get the type of the thing we are to point to and build a pointer\n \t   to it.  If it is a reference to an incomplete or private type with a\n@@ -2851,7 +2851,7 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n \t\t && ! present_gnu_tree (gnat_desig_full)\n \t\t && Is_Record_Type (gnat_desig_full))\n \t  {\n-\t    gnu_type = build_pointer_type (make_dummy_type (gnat_desig_type));\n+\t    gnu_desig_type = make_dummy_type (gnat_desig_type);\n \t    made_dummy = 1;\n \t  }\n \n@@ -2867,7 +2867,7 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n \t\t\t && (Is_Record_Type (gnat_desig_full)\n \t\t\t     || Is_Array_Type (gnat_desig_full)))))\n \t  {\n-\t    gnu_type = build_pointer_type (make_dummy_type (gnat_desig_type));\n+\t    gnu_desig_type = make_dummy_type (gnat_desig_type);\n \t    made_dummy = 1;\n \t  }\n \telse if (gnat_desig_type == gnat_entity)\n@@ -2876,7 +2876,7 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n \t    TREE_TYPE (gnu_type) = TYPE_POINTER_TO (gnu_type) = gnu_type;\n \t  }\n \telse\n-\t  gnu_type = build_pointer_type (gnat_to_gnu_type (gnat_desig_type));\n+\t  gnu_desig_type = gnat_to_gnu_type (gnat_desig_type);\n \n \t/* It is possible that the above call to gnat_to_gnu_type resolved our\n \t   type.  If so, just return it.  */\n@@ -2886,6 +2886,21 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n \t    break;\n \t  }\n \n+\t/* If we have a GCC type for the designated type, possibly\n+\t   modify it if we are pointing only to constant objects and then\n+\t   make a pointer to it.  Don't do this for unconstrained arrays.  */\n+\tif (gnu_type == 0 && gnu_desig_type != 0)\n+\t  {\n+\t    if (Is_Access_Constant (gnat_entity)\n+\t\t&& TREE_CODE (gnu_desig_type) != UNCONSTRAINED_ARRAY_TYPE)\n+\t      gnu_desig_type\n+\t\t= build_qualified_type (gnu_desig_type,\n+\t\t\t\t\t(TYPE_QUALS (gnu_desig_type)\n+\t\t\t\t\t | TYPE_QUAL_CONST));\n+\n+\t    gnu_type = build_pointer_type (gnu_desig_type);\n+\t  }\n+\n \t/* If we are not defining this object and we made a dummy pointer,\n \t   save our current definition, evaluate the actual type, and replace\n \t   the tentative type we made with the actual one.  If we are to defer\n@@ -2912,8 +2927,8 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n \t    this_made_decl = saved = 1;\n \n \t    if (defer_incomplete_level == 0)\n-\t      update_pointer_to\n-\t\t(gnu_old_type, gnat_to_gnu_type (gnat_desig_type));\n+\t      update_pointer_to (TYPE_MAIN_VARIANT (gnu_old_type),\n+\t\t\t\t gnat_to_gnu_type (gnat_desig_type));\n \t    else\n \t      {\n \t\tstruct incomplete *p\n@@ -3808,7 +3823,7 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n \t  next = incp->next;\n \n \t  if (incp->old_type != 0)\n-\t    update_pointer_to (incp->old_type,\n+\t    update_pointer_to (TYPE_MAIN_VARIANT (incp->old_type),\n \t\t\t       gnat_to_gnu_type (incp->full_type));\n \t  free (incp);\n \t}\n@@ -3823,7 +3838,8 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n       for (incp = defer_incomplete_list; incp; incp = incp->next)\n \tif (incp->old_type != 0 && incp->full_type == gnat_entity)\n \t  {\n-\t    update_pointer_to (incp->old_type, TREE_TYPE (gnu_decl));\n+\t    update_pointer_to (TYPE_MAIN_VARIANT (incp->old_type),\n+\t\t\t       TREE_TYPE (gnu_decl));\n \t    incp->old_type = 0;\n \t  }\n     }"}, {"sha": "61f90f9f0db77f7fb79dd09d402c7ffb16db8bb5", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3a8c068bfe942e28089b7a07a32690edad14ea/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3a8c068bfe942e28089b7a07a32690edad14ea/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=7a3a8c068bfe942e28089b7a07a32690edad14ea", "patch": "@@ -4048,7 +4048,8 @@ process_freeze_entity (gnat_node)\n   if (gnu_old != 0)\n     {\n       DECL_NAME (gnu_new) = DECL_NAME (gnu_old);\n-      update_pointer_to (TREE_TYPE (gnu_old), TREE_TYPE (gnu_new));\n+      update_pointer_to (TYPE_MAIN_VARIANT (TREE_TYPE (gnu_old)),\n+\t\t\t TREE_TYPE (gnu_new));\n     }\n }\n \f\n@@ -4725,7 +4726,8 @@ process_type (gnat_entity)\n   /* If we have an old type and we've made pointers to this type,\n      update those pointers.  */\n   if (gnu_old != 0)\n-    update_pointer_to (TREE_TYPE (gnu_old), TREE_TYPE (gnu_new));\n+    update_pointer_to (TYPE_MAIN_VARIANT (TREE_TYPE (gnu_old)),\n+\t\t       TREE_TYPE (gnu_new));\n \n   /* If this is a record type corresponding to a task or protected type \n      that is a completion of an incomplete type, perform a similar update\n@@ -4744,7 +4746,8 @@ process_type (gnat_entity)\n       save_gnu_tree (Corresponding_Concurrent_Type (gnat_entity),\n \t\t     gnu_new, 0);\n \n-      update_pointer_to (TREE_TYPE (gnu_task_old), TREE_TYPE (gnu_new));\n+      update_pointer_to (TYPE_MAIN_VARIANT (TREE_TYPE (gnu_task_old)),\n+\t\t\t TREE_TYPE (gnu_new));\n     }\n }\n \f"}, {"sha": "42892e59727ad8d76c33bc7fa999dfaeb0db2d01", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3a8c068bfe942e28089b7a07a32690edad14ea/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3a8c068bfe942e28089b7a07a32690edad14ea/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=7a3a8c068bfe942e28089b7a07a32690edad14ea", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                            $Revision: 1.4 $\n+ *                            $Revision$\n  *                                                                          *\n  *          Copyright (C) 1992-2001, Free Software Foundation, Inc.         *\n  *                                                                          *\n@@ -2581,8 +2581,22 @@ update_pointer_to (old_type, new_type)\n {\n   tree ptr = TYPE_POINTER_TO (old_type);\n   tree ref = TYPE_REFERENCE_TO (old_type);\n+  tree type;\n+\n+  /* If this is the main variant, process all the other variants first.  */\n+  if (TYPE_MAIN_VARIANT (old_type) == old_type)\n+    for (type = TYPE_NEXT_VARIANT (old_type); type != 0;\n+\t type = TYPE_NEXT_VARIANT (type))\n+      update_pointer_to (type, new_type);\n+\n+  /* If no pointer or reference, we are done.  Otherwise, get the new type with\n+     the same qualifiers as the old type and see if it is the same as the old\n+     type.  */\n+  if (ptr == 0 && ref == 0)\n+    return;\n \n-  if ((ptr == 0 && ref == 0) || old_type == new_type)\n+  new_type = build_qualified_type (new_type, TYPE_QUALS (old_type));\n+  if (old_type == new_type)\n     return;\n \n   /* First handle the simple case.  */"}, {"sha": "7cc8a3f669a4a570239e2ce8d784ac31be02f117", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3a8c068bfe942e28089b7a07a32690edad14ea/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3a8c068bfe942e28089b7a07a32690edad14ea/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=7a3a8c068bfe942e28089b7a07a32690edad14ea", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                            $Revision: 1.1 $\n+ *                            $Revision$\n  *                                                                          *\n  *          Copyright (C) 1992-2001, Free Software Foundation, Inc.         *\n  *                                                                          *\n@@ -1279,8 +1279,7 @@ build_unary_op (op_code, result_type, operand)\n       else\n \t{\n \t  result = fold (build1 (op_code, TREE_TYPE (type), operand));\n-\t  TREE_READONLY (result) = TREE_STATIC (result)\n-\t    = TREE_READONLY (TREE_TYPE (type));\n+\t  TREE_READONLY (result) = TREE_READONLY (TREE_TYPE (type));\n \t}\n \n       side_effects = flag_volatile "}]}