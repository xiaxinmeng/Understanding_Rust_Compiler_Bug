{"sha": "a0ccf503a84269f8e6813d8b2daf57dc214d8ba3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBjY2Y1MDNhODQyNjlmOGU2ODEzZDhiMmRhZjU3ZGMyMTRkOGJhMw==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2002-03-15T21:27:01Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2002-03-15T21:27:01Z"}, "message": "m68hc11.c (m6812_cost): Make cost of add higher than a shift to avoid adding a register with itself.\n\n\t* config/m68hc11/m68hc11.c (m6812_cost): Make cost of add higher\n\tthan a shift to avoid adding a register with itself.\n\t(m68hc11_memory_move_cost): Take into account NO_REGS.\n\t(m68hc11_register_move_cost): Update and use memory move cost\n\tfor soft registers.\n\t(m68hc11_address_cost): Make cost of valid offset not 0 so that\n\tit gives more opportunities to cse to optimize.\n\t* config/m68hc11/m68hc11.h (REGISTER_MOVE_COST): Pass the mode.\n\t* config/m68hc11/m68hc11-protos.h (m68hc11_register_move_cost): Update.\n\nFrom-SVN: r50833", "tree": {"sha": "25cfd63575fdc96c1482babbf08834ff2b2eef2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25cfd63575fdc96c1482babbf08834ff2b2eef2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3/comments", "author": null, "committer": null, "parents": [{"sha": "45061554e76505bfb66197510a940ecfbd4cd29a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45061554e76505bfb66197510a940ecfbd4cd29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45061554e76505bfb66197510a940ecfbd4cd29a"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "c8167571fc597cb5c6d54a0891c3c6c48374ed8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0ccf503a84269f8e6813d8b2daf57dc214d8ba3", "patch": "@@ -1,3 +1,15 @@\n+2002-03-15  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.c (m6812_cost): Make cost of add higher\n+\tthan a shift to avoid adding a register with itself.\n+\t(m68hc11_memory_move_cost): Take into account NO_REGS.\n+\t(m68hc11_register_move_cost): Update and use memory move cost\n+\tfor soft registers.\n+\t(m68hc11_address_cost): Make cost of valid offset not 0 so that\n+\tit gives more opportunities to cse to optimize.\n+\t* config/m68hc11/m68hc11.h (REGISTER_MOVE_COST): Pass the mode.\n+\t* config/m68hc11/m68hc11-protos.h (m68hc11_register_move_cost): Update.\n+\n 2002-03-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-common.c (statement_code_p): Handle CLEANUP_STMT."}, {"sha": "e974348a317528081ff02805ae069e153cf1a84c", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=a0ccf503a84269f8e6813d8b2daf57dc214d8ba3", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in m68hc11.c\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@worldnet.fr)\n \n This file is part of GNU CC.\n@@ -96,7 +96,8 @@ extern rtx m68hc11_gen_highpart PARAMS((enum machine_mode, rtx));\n #ifdef HAVE_MACHINE_MODES\n extern int m68hc11_memory_move_cost PARAMS((enum machine_mode, enum reg_class,\n                                            int));\n-extern int m68hc11_register_move_cost PARAMS((enum reg_class, enum reg_class));\n+extern int m68hc11_register_move_cost PARAMS((enum machine_mode,\n+\t\t\t\t\t      enum reg_class, enum reg_class));\n extern int m68hc11_rtx_costs PARAMS((rtx, enum rtx_code, enum rtx_code));\n extern int m68hc11_address_cost PARAMS((rtx));\n "}, {"sha": "252b4e64cd8ebd099766966578152d7417d82a91", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=a0ccf503a84269f8e6813d8b2daf57dc214d8ba3", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for code generation on Motorola 68HC11 and 68HC12.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Stephane Carrez (stcarrez@worldnet.fr)\n \n This file is part of GNU CC.\n@@ -169,9 +169,9 @@ static const struct processor_costs m6811_cost = {\n /* Costs for a 68HC12.  */\n static const struct processor_costs m6812_cost = {\n   /* add */\n-  COSTS_N_INSNS (1),\n+  COSTS_N_INSNS (2),\n   /* logical */\n-  COSTS_N_INSNS (1),\n+  COSTS_N_INSNS (2),\n   /* non-constant shift */\n   COSTS_N_INSNS (20),\n   /* shiftQI const */\n@@ -1173,9 +1173,8 @@ m68hc11_handle_fntype_attribute (node, name, args, flags, no_add_attrs)\n    handle calls to traps in a special manner (by issuing the trap).\n    This information is stored in SYMBOL_REF_FLAG.  */\n void\n-m68hc11_encode_section_info (decl, first)\n+m68hc11_encode_section_info (decl)\n      tree decl;\n-     int first ATTRIBUTE_UNUSED;\n {\n   tree func_attr;\n   int trap_handler;\n@@ -4919,7 +4918,7 @@ m68hc11_memory_move_cost (mode, class, in)\n      enum reg_class class;\n      int in ATTRIBUTE_UNUSED;\n {\n-  if (class <= H_REGS)\n+  if (class <= H_REGS && class > NO_REGS)\n     {\n       if (GET_MODE_SIZE (mode) <= 2)\n \treturn COSTS_N_INSNS (1) + (reload_completed | reload_in_progress);\n@@ -4941,19 +4940,24 @@ m68hc11_memory_move_cost (mode, class, in)\n    have a move cost of 2.  Setting a higher cost will force reload to check\n    the constraints.  */\n int\n-m68hc11_register_move_cost (from, to)\n+m68hc11_register_move_cost (mode, from, to)\n+     enum machine_mode mode;\n      enum reg_class from;\n      enum reg_class to;\n {\n-  if (from >= S_REGS && to >= S_REGS)\n+  /* All costs are symmetric, so reduce cases by putting the\n+     lower number class as the destination.  */\n+  if (from < to)\n     {\n-      return COSTS_N_INSNS (3);\n+      enum reg_class tmp = to;\n+      to = from, from = tmp;\n     }\n-  if (from <= S_REGS && to <= S_REGS)\n-    {\n-      return COSTS_N_INSNS (1) + (reload_completed | reload_in_progress);\n-    }\n-  return COSTS_N_INSNS (2);\n+  if (to >= S_REGS)\n+    return m68hc11_memory_move_cost (mode, S_REGS, 0);\n+  else if (from <= S_REGS)\n+    return COSTS_N_INSNS (1) + (reload_completed | reload_in_progress);\n+  else\n+    return COSTS_N_INSNS (2);\n }\n \n \n@@ -5002,7 +5006,7 @@ m68hc11_address_cost (addr)\n \t    else if (INTVAL (plus1) >= m68hc11_max_offset)\n \t      cost = 2;\n \t    else\n-\t      cost = 0;\n+\t      cost = 1;\n \t    if (REGNO (plus0) < FIRST_PSEUDO_REGISTER)\n \t      cost += 0;\n \t    else"}, {"sha": "53f38d797684838bb0b56e3822ee4534935ba8bf", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ccf503a84269f8e6813d8b2daf57dc214d8ba3/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=a0ccf503a84269f8e6813d8b2daf57dc214d8ba3", "patch": "@@ -1422,7 +1422,7 @@ extern unsigned char m68hc11_reg_valid_for_index[FIRST_PSEUDO_REGISTER];\n \n /* Move costs between classes of registers */\n #define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2)\t\\\n-    (m68hc11_register_move_cost (CLASS1, CLASS2))\n+    (m68hc11_register_move_cost (MODE, CLASS1, CLASS2))\n \n /* Move cost between register and memory.\n     - Move to a 16-bit register is reasonable,"}]}