{"sha": "81501d2b45d990aaab9c0c3b85a13b4315ed567e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE1MDFkMmI0NWQ5OTBhYWFiOWMwYzNiODVhMTNiNDMxNWVkNTY3ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T10:49:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T10:49:07Z"}, "message": "[multiple changes]\n\n2015-11-12  Emmanuel Briot  <briot@adacore.com>\n\n\t* s-os_lib.ads: Documentation update.\n\n2015-11-12  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-taprop-vxworks.adb, s-osinte-vxworks.ads: Use a single import of\n\ttaskDelay to avoid confusion.\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Simple_Function_Return): If the return\n\ttype is class-wide and the expression is a view conversion,\n\tremove the conversion to prevent overriding of the tag, which\n\tmust be that of the object being returned.\n\n2015-11-12  Tristan Gingold  <gingold@adacore.com>\n\n\t* bindgen.adb (Gen_Adainit): Code cleanup.\n\n2015-11-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* s-stalib.ads: Code cleanup.\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Incomplete_Type_Decl): small optimization.\n\t(Analyze_Subtype_Declaration): For floating point types,\n\tinherit dimensions.\n\t(OK_For_Limited_Init_In_05): Handle properly a conditional\n\texpression whose condition is static, and is rewritten as the\n\tbranch that will be executed.\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Resolve_Attribute, case 'Access): If the context\n\ttype is an access constant type, do not mark the attribute\n\treference as a possible modification of the prefix.\n\nFrom-SVN: r230226", "tree": {"sha": "5880809a3b63cbdcf8b9c08e4e12e0e0ba4df858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5880809a3b63cbdcf8b9c08e4e12e0e0ba4df858"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81501d2b45d990aaab9c0c3b85a13b4315ed567e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81501d2b45d990aaab9c0c3b85a13b4315ed567e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81501d2b45d990aaab9c0c3b85a13b4315ed567e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81501d2b45d990aaab9c0c3b85a13b4315ed567e/comments", "author": null, "committer": null, "parents": [{"sha": "0fe797c5849ca33b50a69995ce5aaccb1476ec8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe797c5849ca33b50a69995ce5aaccb1476ec8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe797c5849ca33b50a69995ce5aaccb1476ec8a"}], "stats": {"total": 112, "additions": 97, "deletions": 15}, "files": [{"sha": "8e1d8ecdb2159a861ca385334bf0abd4eb00d3f0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=81501d2b45d990aaab9c0c3b85a13b4315ed567e", "patch": "@@ -1,3 +1,42 @@\n+2015-11-12  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* s-os_lib.ads: Documentation update.\n+\n+2015-11-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-taprop-vxworks.adb, s-osinte-vxworks.ads: Use a single import of\n+\ttaskDelay to avoid confusion.\n+\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): If the return\n+\ttype is class-wide and the expression is a view conversion,\n+\tremove the conversion to prevent overriding of the tag, which\n+\tmust be that of the object being returned.\n+\n+2015-11-12  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* bindgen.adb (Gen_Adainit): Code cleanup.\n+\n+2015-11-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* s-stalib.ads: Code cleanup.\n+\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Incomplete_Type_Decl): small optimization.\n+\t(Analyze_Subtype_Declaration): For floating point types,\n+\tinherit dimensions.\n+\t(OK_For_Limited_Init_In_05): Handle properly a conditional\n+\texpression whose condition is static, and is rewritten as the\n+\tbranch that will be executed.\n+\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute, case 'Access): If the context\n+\ttype is an access constant type, do not mark the attribute\n+\treference as a possible modification of the prefix.\n+\n 2015-11-12  Steve Baird  <baird@adacore.com>\n \n \t* sem_ch6.adb (Analyze_Procedure_Call) If CodePeer_Mode is True,"}, {"sha": "c4f8c76c0cf92471214dec81adf5ae959e65f186", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=81501d2b45d990aaab9c0c3b85a13b4315ed567e", "patch": "@@ -90,7 +90,7 @@ package body Bindgen is\n \n    System_BB_CPU_Primitives_Multiprocessors_Used : Boolean := False;\n    --  Flag indicating whether unit System.BB.CPU_Primitives.Multiprocessors\n-   --  is in the closure of the partiation. This is set by procedure\n+   --  is in the closure of the partition. This is set by procedure\n    --  Resolve_Binder_Options, and it is used to call a procedure that starts\n    --  slave processors.\n \n@@ -685,6 +685,14 @@ package body Bindgen is\n                  \" \"\"__gnat_activate_all_tasks\"\");\");\n          end if;\n \n+         --  Import procedure to start slave cpus for bareboard runtime\n+\n+         if System_BB_CPU_Primitives_Multiprocessors_Used then\n+            WBI (\"      procedure Start_Slave_CPUs;\");\n+            WBI (\"      pragma Import (C, Start_Slave_CPUs,\" &\n+                 \" \"\"__gnat_start_slave_cpus\"\");\");\n+         end if;\n+\n          --  For restricted run-time libraries (ZFP and Ravenscar)\n          --  tasks are non-terminating, so we do not want finalization.\n "}, {"sha": "6aaeb87372da65f5328176a88a4073ea0da14bb1", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=81501d2b45d990aaab9c0c3b85a13b4315ed567e", "patch": "@@ -5980,7 +5980,7 @@ package body Exp_Ch6 is\n \n       Utyp : constant Entity_Id := Underlying_Type (R_Type);\n \n-      Exp : constant Node_Id := Expression (N);\n+      Exp : Node_Id := Expression (N);\n       pragma Assert (Present (Exp));\n \n       Exptyp : constant Entity_Id := Etype (Exp);\n@@ -5996,11 +5996,24 @@ package body Exp_Ch6 is\n \n    begin\n       if Is_Class_Wide_Type (R_Type)\n-        and then not Is_Class_Wide_Type (Etype (Exp))\n+        and then not Is_Class_Wide_Type (Exptyp)\n+        and then Nkind (Exp) /= N_Type_Conversion\n       then\n-         Subtype_Ind := New_Occurrence_Of (Etype (Exp), Loc);\n+         Subtype_Ind := New_Occurrence_Of (Exptyp, Loc);\n       else\n          Subtype_Ind := New_Occurrence_Of (R_Type, Loc);\n+\n+         --  If the result type is class-wide and the expression is a view\n+         --  conversion, the conversion plays no role in the expansion because\n+         --  it does not modify the tag of the object. Remove the conversion\n+         --  altogether to prevent tag overwriting.\n+\n+         if Is_Class_Wide_Type (R_Type)\n+           and then not Is_Class_Wide_Type (Exptyp)\n+           and then Nkind (Exp) = N_Type_Conversion\n+         then\n+            Exp := Expression (Exp);\n+         end if;\n       end if;\n \n       --  For the case of a simple return that does not come from an extended"}, {"sha": "b86d052ec55270fbb504a5a598b5a9b197d8e046", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=81501d2b45d990aaab9c0c3b85a13b4315ed567e", "patch": "@@ -731,6 +731,12 @@ package System.OS_Lib is\n    --  Argument_List. Note that the result is allocated on the heap, and must\n    --  be freed by the programmer (when it is no longer needed) to avoid\n    --  memory leaks.\n+   --  On Windows, backslashes are used as directory separators. On Unix,\n+   --  however, they are used to escape the following character, so that for\n+   --  instance \"-d=name\\ with\\ space\" is a single argument. In the result\n+   --  list, the backslashes have been cleaned up when needed. The previous\n+   --  example will thus result a single-element array, where the element is\n+   --  \"-d=name with space\" (Unix) or \"-d=name\\ with\\ space\" (windows).\n \n    procedure Kill (Pid : Process_Id; Hard_Kill : Boolean := True);\n    --  Kill the process designated by Pid. Does nothing if Pid is Invalid_Pid"}, {"sha": "ba76dcdf3471115da741650eff8917fb587a4101", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=81501d2b45d990aaab9c0c3b85a13b4315ed567e", "patch": "@@ -303,7 +303,6 @@ package System.OS_Interface is\n    pragma Import (C, taskIsSuspended, \"taskIsSuspended\");\n \n    function taskDelay (ticks : int) return int;\n-   procedure taskDelay (ticks : int);\n    pragma Import (C, taskDelay, \"taskDelay\");\n \n    function sysClkRateGet return int;"}, {"sha": "d00d23b7942e043ec0d01ffb449cd679d4ce8772", "filename": "gcc/ada/s-stalib.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.ads?ref=81501d2b45d990aaab9c0c3b85a13b4315ed567e", "patch": "@@ -53,9 +53,11 @@ pragma Polling (Off);\n with Ada.Unchecked_Conversion;\n \n package System.Standard_Library is\n-   pragma Warnings (Off);\n+\n+   --  Historical note: pragma Preelaborate was surrounded by a pair of pragma\n+   --  Warnings (Off/On) to circumvent a bootstrap issue.\n+\n    pragma Preelaborate;\n-   pragma Warnings (On);\n \n    subtype Big_String is String (1 .. Positive'Last);\n    pragma Suppress_Initialization (Big_String);"}, {"sha": "3b0dca37ae5618c1bd908030bb6ab579182f38a4", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=81501d2b45d990aaab9c0c3b85a13b4315ed567e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2014, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2015, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -589,12 +589,12 @@ package body System.Task_Primitives.Operations is\n \n          if Single_Lock then\n             Result := semGive (Single_RTS_Lock.Mutex);\n-            taskDelay (0);\n+            Result := taskDelay (0);\n             Result := semTake (Single_RTS_Lock.Mutex, WAIT_FOREVER);\n \n          else\n             Result := semGive (Self_ID.Common.LL.L.Mutex);\n-            taskDelay (0);\n+            Result := taskDelay (0);\n             Result := semTake (Self_ID.Common.LL.L.Mutex, WAIT_FOREVER);\n          end if;\n       end if;\n@@ -707,7 +707,7 @@ package body System.Task_Primitives.Operations is\n               else Self_ID.Common.LL.L.Mutex);\n \n       else\n-         taskDelay (0);\n+         Result := taskDelay (0);\n       end if;\n    end Timed_Delay;\n "}, {"sha": "eaaeb15f136b95c4ed683f0171c1a398a835684c", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=81501d2b45d990aaab9c0c3b85a13b4315ed567e", "patch": "@@ -9993,6 +9993,9 @@ package body Sem_Attr is\n                   --  to a missed warning (the Valid check does not really\n                   --  modify!) If this case, Note will be reset to False.\n \n+                  --  Skip it as well if the type is an Acccess_To_Constant,\n+                  --  given that no use of the value can modify the prefix.\n+\n                begin\n                   if Attr_Id = Attribute_Unrestricted_Access\n                     and then Nkind (PN) = N_Function_Call\n@@ -10006,6 +10009,9 @@ package body Sem_Attr is\n                      then\n                         Note := False;\n                      end if;\n+\n+                  elsif Is_Access_Constant (Typ) then\n+                     Note := False;\n                   end if;\n \n                   if Note then"}, {"sha": "0c01cebb94480b94e5092ff07a4e2dac5948844e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81501d2b45d990aaab9c0c3b85a13b4315ed567e/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=81501d2b45d990aaab9c0c3b85a13b4315ed567e", "patch": "@@ -3043,16 +3043,14 @@ package body Sem_Ch3 is\n          Set_Direct_Primitive_Operations (T, New_Elmt_List);\n       end if;\n \n-      Push_Scope (T);\n-\n       Set_Stored_Constraint (T, No_Elist);\n \n       if Present (Discriminant_Specifications (N)) then\n+         Push_Scope (T);\n          Process_Discriminants (N);\n+         End_Scope;\n       end if;\n \n-      End_Scope;\n-\n       --  If the type has discriminants, non-trivial subtypes may be\n       --  declared before the full view of the type. The full views of those\n       --  subtypes will be built after the full view of the type.\n@@ -4833,6 +4831,7 @@ package body Sem_Ch3 is\n                Set_Scalar_Range         (Id, Scalar_Range       (T));\n                Set_Digits_Value         (Id, Digits_Value       (T));\n                Set_Is_Constrained       (Id, Is_Constrained     (T));\n+               Copy_Dimensions          (From => T, To => Id);\n \n             when Signed_Integer_Kind =>\n                Set_Ekind                (Id, E_Signed_Integer_Subtype);\n@@ -18625,6 +18624,16 @@ package body Sem_Ch3 is\n       --  dereference. The function may also be parameterless, in which case\n       --  the source node is just an identifier.\n \n+      --  A branch of a conditional expression may have been removed if the\n+      --  condition is statically known. This happens during expansion, and\n+      --  thus will not happen if previous errors were encountered. The check\n+      --  will have been performed on the chosen branch, which replaces the\n+      --  original conditional expression.\n+\n+      if No (Exp) then\n+         return True;\n+      end if;\n+\n       case Nkind (Original_Node (Exp)) is\n          when N_Aggregate | N_Extension_Aggregate | N_Function_Call | N_Op =>\n             return True;"}]}