{"sha": "040939a2387eff082f1594fac35f007f93d2dcd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQwOTM5YTIzODdlZmYwODJmMTU5NGZhYzM1ZjAwN2Y5M2QyZGNkOA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2017-11-08T18:29:38Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-11-08T18:29:38Z"}, "message": "[simplify-rtx] Simplify vec_merge of vec_duplicates into vec_concat\n\nAnother vec_merge simplification that's missing from simplify-rtx.c is transforming\na vec_merge of two vec_duplicates. For example:\n(set (reg:V2DF 80)\n    (vec_merge:V2DF (vec_duplicate:V2DF (reg:DF 84))\n        (vec_duplicate:V2DF (reg:DF 81))\n        (const_int 2)))\n\nCan be transformed into the simpler:\n(set (reg:V2DF 80)\n    (vec_concat:V2DF (reg:DF 81)\n                (reg:DF 84)))\n\nI believe this should always be beneficial.\nI'm still looking into finding a small testcase demonstrating this, but on aarch64 SPEC\nI've seen this eliminate some really bizzare codegen where GCC was generating nonsense like:\n  ldr q18, [sp, 448]\n  ins v18.d[0], v23.d[0]\n  ins v18.d[1], v22.d[0]\n\nWith q18 being pushed and popped off the stack in the prologue and epilogue of the function!\nThese are large files from SPEC that I haven't been able to analyse yet as to why GCC even attempts\nto do that, but with this patch it doesn't try to load a register and overwrite all its lanes.\nThis patch shaves off about 5k of code size from zeusmp on aarch64 at -O3, so I believe it's a good\nthing to do. \n\n\t* simplify-rtx.c (simplify_ternary_operation): Simplify vec_merge\n\tof two vec_duplicates into a vec_concat.\n\nFrom-SVN: r254550", "tree": {"sha": "01ecc67421aa14ffdb9721f699664279b29b4320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01ecc67421aa14ffdb9721f699664279b29b4320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/040939a2387eff082f1594fac35f007f93d2dcd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040939a2387eff082f1594fac35f007f93d2dcd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040939a2387eff082f1594fac35f007f93d2dcd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040939a2387eff082f1594fac35f007f93d2dcd8/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40757a25d45d47ddc50819bfd32dd6aac595abc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40757a25d45d47ddc50819bfd32dd6aac595abc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40757a25d45d47ddc50819bfd32dd6aac595abc2"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "37ccb2cbd0e95451ccc2ec04024ca4d79debc9e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/040939a2387eff082f1594fac35f007f93d2dcd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/040939a2387eff082f1594fac35f007f93d2dcd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=040939a2387eff082f1594fac35f007f93d2dcd8", "patch": "@@ -1,3 +1,8 @@\n+2017-11-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* simplify-rtx.c (simplify_ternary_operation): Simplify vec_merge\n+\tof two vec_duplicates into a vec_concat.\n+\n 2017-11-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* simplify-rtx.c (simplify_ternary_operation, VEC_MERGE):"}, {"sha": "e1a16a46a4c5b426af6c12c9764d819c99b6011c", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/040939a2387eff082f1594fac35f007f93d2dcd8/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/040939a2387eff082f1594fac35f007f93d2dcd8/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=040939a2387eff082f1594fac35f007f93d2dcd8", "patch": "@@ -5784,6 +5784,24 @@ simplify_ternary_operation (enum rtx_code code, machine_mode mode,\n \t      if (!side_effects_p (otherop))\n \t\treturn simplify_gen_binary (VEC_CONCAT, mode, newop0, newop1);\n \t    }\n+\n+\t  /* Replace (vec_merge (vec_duplicate x) (vec_duplicate y)\n+\t\t\t\t (const_int n))\n+\t     with (vec_concat x y) or (vec_concat y x) depending on value\n+\t     of N.  */\n+\t  if (GET_CODE (op0) == VEC_DUPLICATE\n+\t      && GET_CODE (op1) == VEC_DUPLICATE\n+\t      && GET_MODE_NUNITS (GET_MODE (op0)) == 2\n+\t      && GET_MODE_NUNITS (GET_MODE (op1)) == 2\n+\t      && IN_RANGE (sel, 1, 2))\n+\t    {\n+\t      rtx newop0 = XEXP (op0, 0);\n+\t      rtx newop1 = XEXP (op1, 0);\n+\t      if (sel == 2)\n+\t\tstd::swap (newop0, newop1);\n+\n+\t      return simplify_gen_binary (VEC_CONCAT, mode, newop0, newop1);\n+\t    }\n \t}\n \n       if (rtx_equal_p (op0, op1)"}]}