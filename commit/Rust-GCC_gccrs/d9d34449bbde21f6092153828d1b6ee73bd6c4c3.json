{"sha": "d9d34449bbde21f6092153828d1b6ee73bd6c4c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkMzQ0NDliYmRlMjFmNjA5MjE1MzgyOGQxYjZlZTczYmQ2YzRjMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-20T23:59:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-20T23:59:55Z"}, "message": "libstdc++: Fix net::basic_socket::close(error_code&)\n\nAlso add some missing member functions, nodiscard attributes, and\nnoexcept-specifiers.\n\n\t* include/experimental/executor (use_future_t::use_future_t()): Fix\n\tincorrect noexcept-specifier.\n\t* include/experimental/internet (basic_resolver_results): Adjust\n\twhitespace.\n\t* include/experimental/socket (__basic_socket_impl::release): Add\n\tmember function.\n\t(basic_socket(io_context&, const endpoint_type&)): Fix argument to\n\ttarget constructor.\n\t(basic_socket::release(), basic_socket::release(error_code&)): Add\n\tmissing member functions.\n\t(basic_socket::is_open()): Add nodiscard attribute.\n\t(basic_socket::close(error_code&)): Pass argument to base function.\n\t(basic_socket_acceptor::release())\n\t(basic_socket_acceptor::release(error_code&)): Add missing member\n\tfunctions.\n\t(basic_socket_acceptor::is_open()): Add nodiscard attribute.\n\t(basic_socket_streambuf::error()): Add noexcept.\n\t(basic_socket_iostream::error()): Likewise.\n\t* testsuite/experimental/net/socket/basic_socket.cc: New test.", "tree": {"sha": "eeb7125451ca0820a0f8705871eb18d0fc30c8c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeb7125451ca0820a0f8705871eb18d0fc30c8c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9d34449bbde21f6092153828d1b6ee73bd6c4c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d34449bbde21f6092153828d1b6ee73bd6c4c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9d34449bbde21f6092153828d1b6ee73bd6c4c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d34449bbde21f6092153828d1b6ee73bd6c4c3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26e72d8310c3e70f7a4b345e06a9c5c8d51728a"}], "stats": {"total": 203, "additions": 189, "deletions": 14}, "files": [{"sha": "dec84f03da63ab156e13b938ca253f59a37c86e8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d34449bbde21f6092153828d1b6ee73bd6c4c3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d34449bbde21f6092153828d1b6ee73bd6c4c3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9d34449bbde21f6092153828d1b6ee73bd6c4c3", "patch": "@@ -1,5 +1,25 @@\n 2020-05-21  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/executor (use_future_t::use_future_t()): Fix\n+\tincorrect noexcept-specifier.\n+\t* include/experimental/internet (basic_resolver_results): Adjust\n+\twhitespace.\n+\t* include/experimental/socket (__basic_socket_impl::release): Add\n+\tmember function.\n+\t(basic_socket(io_context&, const endpoint_type&)): Fix argument to\n+\ttarget constructor.\n+\t(basic_socket::release(), basic_socket::release(error_code&)): Add\n+\tmissing member functions.\n+\t(basic_socket::is_open()): Add nodiscard attribute.\n+\t(basic_socket::close(error_code&)): Pass argument to base function.\n+\t(basic_socket_acceptor::release())\n+\t(basic_socket_acceptor::release(error_code&)): Add missing member\n+\tfunctions.\n+\t(basic_socket_acceptor::is_open()): Add nodiscard attribute.\n+\t(basic_socket_streambuf::error()): Add noexcept.\n+\t(basic_socket_iostream::error()): Likewise.\n+\t* testsuite/experimental/net/socket/basic_socket.cc: New test.\n+\n \t* include/experimental/buffer: Replace typedefs with\n \talias-declarations.\n \t* include/experimental/executor: Likewise."}, {"sha": "763f4ce0e1709223cd794dbb5926ac4a491faa06", "filename": "libstdc++-v3/include/experimental/executor", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d34449bbde21f6092153828d1b6ee73bd6c4c3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d34449bbde21f6092153828d1b6ee73bd6c4c3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor?ref=d9d34449bbde21f6092153828d1b6ee73bd6c4c3", "patch": "@@ -1601,7 +1601,10 @@ inline namespace v1\n       using allocator_type = _ProtoAllocator;\n \n       // use_future_t members:\n-      constexpr use_future_t() noexcept : _M_alloc() { }\n+      constexpr\n+      use_future_t()\n+      noexcept(is_nothrow_default_constructible<_ProtoAllocator>::value)\n+      : _M_alloc() { }\n \n       explicit\n       use_future_t(const _ProtoAllocator& __a) noexcept : _M_alloc(__a) { }"}, {"sha": "f1153b8ff6a781ea759daf7aeed27f033423c8e9", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d34449bbde21f6092153828d1b6ee73bd6c4c3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d34449bbde21f6092153828d1b6ee73bd6c4c3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=d9d34449bbde21f6092153828d1b6ee73bd6c4c3", "patch": "@@ -1726,7 +1726,9 @@ namespace ip\n       // size:\n       size_type size() const noexcept { return _M_size; }\n       size_type max_size() const noexcept { return _M_results.max_size(); }\n-      _GLIBCXX_NODISCARD bool empty() const noexcept { return _M_results.empty(); }\n+\n+      _GLIBCXX_NODISCARD bool\n+      empty() const noexcept { return _M_results.empty(); }\n \n       // element access:\n       const_iterator begin() const { return _M_results.begin(); }"}, {"sha": "80fb21da95c026f12ea26b8a3f3023bbba0697e4", "filename": "libstdc++-v3/include/experimental/socket", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d34449bbde21f6092153828d1b6ee73bd6c4c3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d34449bbde21f6092153828d1b6ee73bd6c4c3/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket?ref=d9d34449bbde21f6092153828d1b6ee73bd6c4c3", "patch": "@@ -153,8 +153,8 @@ inline namespace v1\n   // TODO SettableSocket reqs\n   // TODO BooleanSocketOption reqs\n   // TODO IntegerSocketOption reqs\n-  // TODO _IoControlCommand reqs\n-  // TODO _ConnectCondition reqs\n+  // TODO IoControlCommand reqs\n+  // TODO ConnectCondition reqs\n \n   /** @brief Sockets\n    * @{\n@@ -598,6 +598,13 @@ inline namespace v1\n \t  }\n       }\n \n+      native_handle_type release(error_code& __ec)\n+      {\n+\t__glibcxx_assert(is_open());\n+\tcancel(__ec);\n+\treturn std::exchange(_M_sockfd, -1);\n+      }\n+\n       template<typename _SettableSocketOption>\n \tvoid\n \tset_option(const _SettableSocketOption& __option, error_code& __ec)\n@@ -649,7 +656,7 @@ inline namespace v1\n #ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tsocklen_t __endpoint_len = __endpoint.capacity();\n \tif (::getsockname(_M_sockfd, (sockaddr*)__endpoint.data(),\n-                          &__endpoint_len) == -1)\n+\t\t\t  &__endpoint_len) == -1)\n \t  {\n \t    __ec.assign(errno, generic_category());\n \t    return endpoint_type{};\n@@ -735,11 +742,18 @@ inline namespace v1\n \t     error_code& __ec)\n       { __base::assign(__protocol, __native_socket, __ec); }\n \n-      bool is_open() const noexcept { return __base::is_open(); }\n+      native_handle_type release()\n+      { return release(__throw_on_error{\"basic_socket::release\"}); }\n+\n+      native_handle_type release(error_code& __ec)\n+      { return __base::release(__ec); }\n+\n+      [[__nodiscard__]] bool\n+      is_open() const noexcept { return __base::is_open(); }\n \n       void close() { close(__throw_on_error{\"basic_socket::close\"}); }\n \n-      void close(error_code& __ec) { __base::close(); }\n+      void close(error_code& __ec) { __base::close(__ec); }\n \n       void cancel() { cancel(__throw_on_error{\"basic_socket::cancel\"}); }\n \n@@ -898,7 +912,7 @@ inline namespace v1\n #ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tsocklen_t __endpoint_len = __endpoint.capacity();\n \tif (::getpeername(this->_M_sockfd, (sockaddr*)__endpoint.data(),\n-                          &__endpoint_len)\n+\t\t\t  &__endpoint_len)\n \t    == -1)\n \t  {\n \t    __ec.assign(errno, generic_category());\n@@ -921,13 +935,13 @@ inline namespace v1\n       void\n       connect(const endpoint_type& __endpoint, error_code& __ec)\n       {\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tif (!is_open())\n \t  {\n \t    open(__endpoint.protocol(), __ec);\n \t    if (__ec)\n \t      return;\n \t  }\n-#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tif (::connect(native_handle(), (const sockaddr*)__endpoint.data(),\n \t\t      __endpoint.size()) == -1)\n \t  __ec.assign(errno, generic_category());\n@@ -956,7 +970,7 @@ inline namespace v1\n                   auto __a = get_associated_allocator(\n                       __init.completion_handler, std::allocator<void>());\n                   __ex.post(\n-                      [__h=std::move(__init.completion_handler), __ec]\n+                      [__h = std::move(__init.completion_handler), __ec]\n                       () mutable\n                       { __h(__ec); }, __a);\n \t\t  return __init.result.get();\n@@ -1029,7 +1043,7 @@ inline namespace v1\n       { open(__protocol); }\n \n       basic_socket(io_context& __ctx, const endpoint_type& __endpoint)\n-      : basic_socket(std::addressof(__ctx), __endpoint.protocol())\n+      : basic_socket(__ctx, __endpoint.protocol())\n       { bind(__endpoint); }\n \n       basic_socket(io_context& __ctx, const protocol_type& __protocol,\n@@ -1918,7 +1932,13 @@ inline namespace v1\n \t     error_code& __ec)\n       { __base::assign(__protocol, __native_acceptor, __ec); }\n \n-      bool\n+      native_handle_type release()\n+      { return release(__throw_on_error{\"basic_socket_acceptor::release\"}); }\n+\n+      native_handle_type release(error_code& __ec)\n+      { return __base::release(__ec); }\n+\n+      [[__nodiscard__]] bool\n       is_open() const noexcept { return __base::is_open(); }\n \n       void\n@@ -2313,7 +2333,8 @@ inline namespace v1\n       basic_socket_streambuf* close(); // TODO\n \n       basic_socket<protocol_type>& socket() { return _M_socket; }\n-      error_code error() const { return _M_ec; }\n+\n+      error_code error() const noexcept { return _M_ec; }\n \n       time_point expiry() const { return _M_expiry; }\n \n@@ -2425,7 +2446,7 @@ inline namespace v1\n       { return const_cast<__streambuf_type*>(std::addressof(_M_sb)); }\n \n       basic_socket<protocol_type>& socket() { return rdbuf()->socket(); }\n-      error_code error() const { return rdbuf()->error(); }\n+      error_code error() const noexcept { return rdbuf()->error(); }\n \n       time_point expiry() const { return rdbuf()->expiry(); }\n       void expires_at(const time_point& __t) { rdbuf()->expires_at(__t); }"}, {"sha": "14dbff6659dc2bdae1e5ddd0d291b6154e9908ba", "filename": "libstdc++-v3/testsuite/experimental/net/socket/basic_socket.cc", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d34449bbde21f6092153828d1b6ee73bd6c4c3/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fbasic_socket.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d34449bbde21f6092153828d1b6ee73bd6c4c3/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fbasic_socket.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnet%2Fsocket%2Fbasic_socket.cc?ref=d9d34449bbde21f6092153828d1b6ee73bd6c4c3", "patch": "@@ -0,0 +1,129 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/socket>\n+\n+namespace net = std::experimental::net;\n+using namespace std;\n+\n+namespace test\n+{\n+}\n+\n+void\n+test01(net::io_context& io)\n+{\n+  struct proto\n+  {\n+    struct endpoint\n+    {\n+      using protocol_type = proto;\n+      protocol_type protocol() const { return {}; }\n+\n+      void* data() { return nullptr; }\n+      const void* data() const { return nullptr; }\n+      std::size_t size() const { return 0; }\n+      void resize(std::size_t) { }\n+      std::size_t capacity() const { return 0; }\n+    };\n+\n+    int family() const { return 0; }\n+    int type() const { return 0; }\n+    int protocol() const { return 0; }\n+  };\n+\n+  static_assert( ! is_default_constructible<net::basic_socket<proto>>::value,\n+\t\t \"no default ctor\" );\n+  static_assert( ! is_copy_constructible<net::basic_socket<proto>>::value,\n+\t\t \"copy ctor is deleted\" );\n+  static_assert( ! is_move_constructible<net::basic_socket<proto>>::value,\n+\t\t \"move ctor is protected\" );\n+  static_assert( ! is_move_assignable<net::basic_socket<proto>>::value,\n+\t\t \"move assignment op is protected\" );\n+\n+  struct socket : net::basic_socket<proto>\n+  {\n+    explicit\n+    socket(net::io_context& io)\n+    : basic_socket(io) { }\n+\n+    socket(net::io_context& io, const proto& p)\n+    : basic_socket(io, p) { }\n+\n+    socket(net::io_context& io, const proto::endpoint& e)\n+    : basic_socket(io, e) { }\n+\n+    socket(net::io_context& io, const proto& p, int n)\n+    : basic_socket(io, p, n) { }\n+  };\n+\n+  static_assert( ! is_copy_constructible<socket>::value, \"deleted\" );\n+  static_assert( is_move_constructible<socket>::value, \"\" );\n+  static_assert( is_move_assignable<socket>::value, \"\" );\n+\n+  error_code ec;\n+  proto p;\n+  proto::endpoint e;\n+\n+  socket s(io);\n+  s = socket(io, p);\n+  s = socket(io, e);\n+  s = socket(io, p, s.release());\n+\n+  static_assert( is_same<decltype(s.get_executor()),\n+\t\t\t net::io_context::executor_type>::value, \"\" );\n+  static_assert( noexcept(s.get_executor()), \"\" );\n+  static_assert( is_same<decltype(s.native_handle()),\n+\t\t\t socket::native_handle_type>::value, \"\" );\n+  static_assert( noexcept(s.native_handle()), \"GNU extension\" );\n+\n+  s.open();\n+  s.open(p);\n+  s.open(p, ec);\n+\n+  s.assign(p, s.release());\n+  s.assign(p, s.release(ec), ec);\n+\n+  static_assert( is_same<decltype(const_cast<const socket&>(s).is_open()),\n+\t\t\t bool>::value, \"\" );\n+  static_assert( noexcept(const_cast<const socket&>(s).is_open()), \"\" );\n+\n+  s.close();\n+  s.close(ec);\n+\n+  s.cancel();\n+  s.cancel(ec);\n+\n+  s.bind(e);\n+  s.bind(e, ec);\n+\n+  s.shutdown(net::socket_base::shutdown_both);\n+  s.shutdown(net::socket_base::shutdown_both, ec);\n+\n+  e = s.local_endpoint();\n+  e = s.local_endpoint(ec);\n+  e = s.remote_endpoint();\n+  e = s.remote_endpoint(ec);\n+\n+  s.connect(e);\n+  s.connect(e, ec);\n+\n+  s.wait(net::socket_base::wait_read);\n+  s.wait(net::socket_base::wait_read, ec);\n+}"}]}