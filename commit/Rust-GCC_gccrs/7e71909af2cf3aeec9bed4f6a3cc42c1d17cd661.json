{"sha": "7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661", "node_id": "C_kwDOANBUbNoAKDdlNzE5MDlhZjJjZjNhZWVjOWJlZDRmNmEzY2M0MmMxZDE3Y2Q2NjE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-03T10:07:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-03T10:07:44Z"}, "message": "x86: Speed up target attribute handling by using a cache\n\nThe target attribute handling is very expensive and for the common case\nfrom x86intrin.h where many functions get implicitly the same target\nattribute, we can speed up compilation a lot by caching it.\n\nThe following patches both create a single entry cache, where they cache\nfor a particular target attribute argument list the resulting\nDECL_FUNCTION_SPECIFIC_TARGET and DECL_FUNCTION_SPECIFIC_OPTIMIZATION\nvalues from ix86_valid_target_attribute_p and use the cache if the\nargs are the same as last time and we start either from NULL values\nof those, or from the recorded values for those from last time.\n\nCompiling a simple:\n #include <x86intrin.h>\n\n int i;\ntestcase with ./cc1 -quiet -O2 -isystem include/ test.c\ntakes on my WS without the patches ~0.392s and with either of the\npatches ~0.182s, i.e. roughly half the time as before.\nFor ./cc1plus -quiet -O2 -isystem include/ test.c\nit is slightly worse, the speed up is from ~0.613s to ~0.403s.\n\nThe difference between the 2 patches is that the first one uses copy_list\nwhile the second one uses a vec, so I think the second one has the advantage\nof creating less GC garbage.\nI've verified both patches achieve the same content of those\nDECL_FUNCTION_SPECIFIC_TARGET and DECL_FUNCTION_SPECIFIC_OPTIMIZATION\nnodes as before on x86intrin.h by doing debug_tree on those and comparing\nthe stderr from without these patches to with these patches.\n\n2021-12-03  Jakub Jelinek  <jakub@redhat.com>\n\n\t* attribs.h (simple_cst_list_equal): Declare.\n\t* attribs.c (simple_cst_list_equal): No longer static.\n\t* config/i386/i386-options.c (target_attribute_cache): New variable.\n\t(ix86_valid_target_attribute_p): Cache DECL_FUNCTION_SPECIFIC_TARGET\n\tand DECL_FUNCTION_SPECIFIC_OPTIMIZATION based on args.", "tree": {"sha": "98b6eeac5f6de3c59e6d120b19dd7f858a875500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98b6eeac5f6de3c59e6d120b19dd7f858a875500"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe7c3ecff1f9c0520090a77fa824d8c5d9dbec12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7c3ecff1f9c0520090a77fa824d8c5d9dbec12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7c3ecff1f9c0520090a77fa824d8c5d9dbec12"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "32c941506f4069acb06a7a6143e08b886938e367", "filename": "gcc/attribs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661", "patch": "@@ -1285,7 +1285,7 @@ cmp_attrib_identifiers (const_tree attr1, const_tree attr2)\n /* Compare two constructor-element-type constants.  Return 1 if the lists\n    are known to be equal; otherwise return 0.  */\n \n-static bool\n+bool\n simple_cst_list_equal (const_tree l1, const_tree l2)\n {\n   while (l1 != NULL_TREE && l2 != NULL_TREE)"}, {"sha": "f5899d83c0be80cfc3806d9b4d6ced537b102494", "filename": "gcc/attribs.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661/gcc%2Fattribs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661/gcc%2Fattribs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.h?ref=7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661", "patch": "@@ -60,6 +60,7 @@ extern tree build_type_attribute_variant (tree, tree);\n extern tree build_decl_attribute_variant (tree, tree);\n extern tree build_type_attribute_qual_variant (tree, tree, int);\n \n+extern bool simple_cst_list_equal (const_tree, const_tree);\n extern bool attribute_value_equal (const_tree, const_tree);\n \n /* Return 0 if the attributes for two types are incompatible, 1 if they"}, {"sha": "f971e03abad5589b38b79637ca923baa3ff106b1", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=7e71909af2cf3aeec9bed4f6a3cc42c1d17cd661", "patch": "@@ -1403,6 +1403,8 @@ ix86_valid_target_attribute_tree (tree fndecl, tree args,\n   return t;\n }\n \n+static GTY(()) tree target_attribute_cache[3];\n+\n /* Hook to validate attribute((target(\"string\"))).  */\n \n bool\n@@ -1423,6 +1425,19 @@ ix86_valid_target_attribute_p (tree fndecl,\n       && strcmp (TREE_STRING_POINTER (TREE_VALUE (args)), \"default\") == 0)\n     return true;\n \n+  if ((DECL_FUNCTION_SPECIFIC_TARGET (fndecl) == target_attribute_cache[1]\n+       || DECL_FUNCTION_SPECIFIC_TARGET (fndecl) == NULL_TREE)\n+      && (DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl)\n+\t  == target_attribute_cache[2]\n+\t  || DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl) == NULL_TREE)\n+      && simple_cst_list_equal (args, target_attribute_cache[0]))\n+    {\n+      DECL_FUNCTION_SPECIFIC_TARGET (fndecl) = target_attribute_cache[1];\n+      DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl)\n+\t= target_attribute_cache[2];\n+      return true;\n+    }\n+\n   tree old_optimize = build_optimization_node (&global_options,\n \t\t\t\t\t       &global_options_set);\n \n@@ -1459,8 +1474,17 @@ ix86_valid_target_attribute_p (tree fndecl,\n   if (new_target == error_mark_node)\n     ret = false;\n \n-  else if (fndecl && new_target)\n+  else if (new_target)\n     {\n+      if (DECL_FUNCTION_SPECIFIC_TARGET (fndecl) == NULL_TREE\n+\t  && DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl) == NULL_TREE)\n+\t{\n+\t  target_attribute_cache[0] = copy_list (args);\n+\t  target_attribute_cache[1] = new_target;\n+\t  target_attribute_cache[2]\n+\t    = old_optimize != new_optimize ? new_optimize : NULL_TREE;\n+\t}\n+\n       DECL_FUNCTION_SPECIFIC_TARGET (fndecl) = new_target;\n \n       if (old_optimize != new_optimize)"}]}