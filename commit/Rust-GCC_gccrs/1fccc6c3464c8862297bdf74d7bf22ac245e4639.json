{"sha": "1fccc6c3464c8862297bdf74d7bf22ac245e4639", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZjY2M2YzM0NjRjODg2MjI5N2JkZjc0ZDdiZjIyYWMyNDVlNDYzOQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-11-01T19:29:57Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2010-11-01T19:29:57Z"}, "message": "re PR fortran/46152 ([F03] ALLOCATE with type-spec fails for intrinsic types)\n\n2010-10-30  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/46152\n\t* gfortran.dg/select_type_11.f03: Update dg-error phrase.\n\t* gfortran.dg/allocate_with_typespec_4.f90: New test.\n\t* gfortran.dg/allocate_with_typespec_1.f90: New test.\n\t* gfortran.dg/allocate_with_typespec_2.f: New test.\n\t* gfortran.dg/allocate_with_typespec_3.f90: New test.\n\t* gfortran.dg/allocate_derived_1.f90: Delete an obselescent test.\n\t* gfortran.dg/select_type_1.f03: Update dg-error phrase.\n\n2010-10-30  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/46152\n\t* fortran/match.c (match_derived_type_spec): Reoplace gfc_match_symbol\n\twith a gfc_find_symbol to prevent namespace pollution.  Remove dead\n\tcode.\n\t(match_type_spec): Remove parsing of '::'.  Collapse character\n\tkind checking to one location.\n\t(gfc_match_allocate): Use correct locus in error message.\n\nFrom-SVN: r166140", "tree": {"sha": "506515bdd85f47dc0faa808648b77e532150461b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/506515bdd85f47dc0faa808648b77e532150461b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fccc6c3464c8862297bdf74d7bf22ac245e4639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fccc6c3464c8862297bdf74d7bf22ac245e4639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fccc6c3464c8862297bdf74d7bf22ac245e4639", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fccc6c3464c8862297bdf74d7bf22ac245e4639/comments", "author": null, "committer": null, "parents": [{"sha": "e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e9eb2f27fb3bc9b95de1881e5461c1133a25bc"}], "stats": {"total": 481, "additions": 438, "deletions": 43}, "files": [{"sha": "58adc25769b65b03d4c875bd868a27af18340c6b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1fccc6c3464c8862297bdf74d7bf22ac245e4639", "patch": "@@ -1,3 +1,13 @@\n+2010-11-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/46152\n+\t* fortran/match.c (match_derived_type_spec): Reoplace gfc_match_symbol\n+\twith a gfc_find_symbol to prevent namespace pollution.  Remove dead\n+\tcode.\n+\t(match_type_spec): Remove parsing of '::'.  Collapse character\n+\tkind checking to one location.\n+\t(gfc_match_allocate): Use correct locus in error message.\n+\n 2010-10-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* gfortran.h (gfc_option_t):  Replace dump_parse_tree by"}, {"sha": "1b895f0b87214f50023211c14066dbc5a7889b7c", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=1fccc6c3464c8862297bdf74d7bf22ac245e4639", "patch": "@@ -2711,26 +2711,25 @@ gfc_free_alloc_list (gfc_alloc *p)\n static match\n match_derived_type_spec (gfc_typespec *ts)\n {\n+  char name[GFC_MAX_SYMBOL_LEN + 1];\n   locus old_locus; \n   gfc_symbol *derived;\n \n-  old_locus = gfc_current_locus; \n+  old_locus = gfc_current_locus;\n \n-  if (gfc_match_symbol (&derived, 1) == MATCH_YES)\n+  if (gfc_match (\"%n\", name) != MATCH_YES)\n     {\n-      if (derived->attr.flavor == FL_DERIVED)\n-\t{\n-\t  ts->type = BT_DERIVED;\n-\t  ts->u.derived = derived;\n-\t  return MATCH_YES;\n-\t}\n-      else\n-\t{\n-\t  /* Enforce F03:C476.  */\n-\t  gfc_error (\"'%s' at %L is not an accessible derived type\",\n-\t\t     derived->name, &gfc_current_locus);\n-\t  return MATCH_ERROR;\n-\t}\n+       gfc_current_locus = old_locus;\n+       return MATCH_NO;\n+    }\n+\n+  gfc_find_symbol (name, NULL, 1, &derived);\n+\n+  if (derived && derived->attr.flavor == FL_DERIVED)\n+    {\n+      ts->type = BT_DERIVED;\n+      ts->u.derived = derived;\n+      return MATCH_YES;\n     }\n \n   gfc_current_locus = old_locus; \n@@ -2752,17 +2751,12 @@ match_type_spec (gfc_typespec *ts)\n   locus old_locus;\n \n   gfc_clear_ts (ts);\n-  gfc_gobble_whitespace();\n+  gfc_gobble_whitespace ();\n   old_locus = gfc_current_locus;\n \n-  m = match_derived_type_spec (ts);\n-  if (m == MATCH_YES)\n+  if (match_derived_type_spec (ts) == MATCH_YES)\n     {\n-      old_locus = gfc_current_locus;\n-      if (gfc_match (\" :: \") != MATCH_YES)\n-\treturn MATCH_ERROR;\n-      gfc_current_locus = old_locus;\n-      /* Enfore F03:C401.  */\n+      /* Enforce F03:C401.  */\n       if (ts->u.derived->attr.abstract)\n \t{\n \t  gfc_error (\"Derived type '%s' at %L may not be ABSTRACT\",\n@@ -2771,10 +2765,6 @@ match_type_spec (gfc_typespec *ts)\n \t}\n       return MATCH_YES;\n     }\n-  else if (m == MATCH_ERROR && gfc_match (\" :: \") == MATCH_YES)\n-    return MATCH_ERROR;\n-\n-  gfc_current_locus = old_locus;\n \n   if (gfc_match (\"integer\") == MATCH_YES)\n     {\n@@ -2807,7 +2797,13 @@ match_type_spec (gfc_typespec *ts)\n   if (gfc_match (\"character\") == MATCH_YES)\n     {\n       ts->type = BT_CHARACTER;\n-      goto char_selector;\n+\n+      m = gfc_match_char_spec (ts);\n+\n+      if (m == MATCH_NO)\n+\tm = MATCH_YES;\n+\n+      return m;\n     }\n \n   if (gfc_match (\"logical\") == MATCH_YES)\n@@ -2832,15 +2828,6 @@ match_type_spec (gfc_typespec *ts)\n \n   m = gfc_match_kind_spec (ts, false);\n \n-  if (m == MATCH_NO)\n-    m = MATCH_YES;\t\t/* No kind specifier found.  */\n-\n-  return m;\n-\n-char_selector:\n-\n-  m = gfc_match_char_spec (ts);\n-\n   if (m == MATCH_NO)\n     m = MATCH_YES;\t\t/* No kind specifier found.  */\n \n@@ -2874,7 +2861,17 @@ gfc_match_allocate (void)\n   if (m == MATCH_ERROR)\n     goto cleanup;\n   else if (m == MATCH_NO)\n-    ts.type = BT_UNKNOWN;\n+    {\n+      char name[GFC_MAX_SYMBOL_LEN + 3];\n+\n+      if (gfc_match (\"%n :: \", name) == MATCH_YES)\n+\t{\n+\t  gfc_error (\"Error in type-spec at %L\", &old_locus);\n+\t  goto cleanup;\n+\t}\n+\n+      ts.type = BT_UNKNOWN;\n+    }\n   else\n     {\n       if (gfc_match (\" :: \") == MATCH_YES)\n@@ -2957,8 +2954,8 @@ gfc_match_allocate (void)\n \t\t|| sym->ns->proc_name->attr.proc_pointer);\n       if (b1 && b2 && !b3)\n \t{\n-\t  gfc_error (\"Allocate-object at %C is not a nonprocedure pointer \"\n-\t\t     \"or an allocatable variable\");\n+\t  gfc_error (\"Allocate-object at %L is not a nonprocedure pointer \"\n+\t\t     \"or an allocatable variable\", &tail->expr->where);\n \t  goto cleanup;\n \t}\n "}, {"sha": "b52b52900103edf398655df809a1e8f1502b8402", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1fccc6c3464c8862297bdf74d7bf22ac245e4639", "patch": "@@ -1,3 +1,14 @@\n+2010-11-01  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/46152\n+\t* gfortran.dg/select_type_11.f03: Update dg-error phrase.\n+\t* gfortran.dg/allocate_with_typespec_4.f90: New test.\n+\t* gfortran.dg/allocate_with_typespec_1.f90: New test.\n+\t* gfortran.dg/allocate_with_typespec_2.f: New test.\n+\t* gfortran.dg/allocate_with_typespec_3.f90: New test.\n+\t* gfortran.dg/allocate_derived_1.f90: Update dg-error phrase.\n+\t* gfortran.dg/select_type_1.f03: Update dg-error phrase.\n+\n 2010-11-01  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Nathan Froyd  <froydnj@codesourcery.com>\n "}, {"sha": "d2c65ffa38bd790df3f5e71bd5c880937221588d", "filename": "gcc/testsuite/gfortran.dg/allocate_derived_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_1.f90?ref=1fccc6c3464c8862297bdf74d7bf22ac245e4639", "patch": "@@ -32,7 +32,7 @@\n  allocate(t1 :: x(2))\n  allocate(t2 :: x(3))\n  allocate(t3 :: x(4))\n- allocate(tx :: x(5))  ! { dg-error \"is not an accessible derived type\" }\n+ allocate(tx :: x(5))  ! { dg-error \"Error in type-spec at\" }\n  allocate(u0 :: x(6))  ! { dg-error \"may not be ABSTRACT\" }\n  allocate(v1 :: x(7))  ! { dg-error \"is type incompatible with typespec\" }\n "}, {"sha": "945a80e4afdd0f955f4ac62342f2d84fa5121d11", "filename": "gcc/testsuite/gfortran.dg/allocate_with_typespec_1.f90", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_1.f90?ref=1fccc6c3464c8862297bdf74d7bf22ac245e4639", "patch": "@@ -0,0 +1,121 @@\n+! { dg-do compile }\n+!\n+! Allocation of arrays with a type-spec specification with implicit none.\n+!\n+subroutine implicit_none_test1\n+\n+   implicit none\n+\n+   real, allocatable :: x(:)\n+   real(4), allocatable :: x4(:)\n+   real(8), allocatable :: x8(:)\n+   double precision, allocatable :: d1(:)\n+   doubleprecision, allocatable :: d2(:)\n+   character, allocatable :: c1(:)\n+   character(len=4), allocatable :: c2(:)\n+\n+   type a\n+      integer mytype\n+   end type a\n+\n+   type(a), allocatable :: b(:)\n+\n+   allocate(real :: x(1))\n+   allocate(real(4) :: x4(1))\n+   allocate(real(8) :: x8(1))\n+   allocate(double precision :: d1(1))\n+   allocate(doubleprecision :: d2(1))\n+   allocate(character :: c1(1))\n+   allocate(character(len=4) :: c2(1))\n+   allocate(a :: b(1))\n+\n+end subroutine implicit_none_test1\n+!\n+! Allocation of a scalar with a type-spec specification with implicit none\n+!\n+subroutine implicit_none_test2\n+\n+   implicit none\n+\n+   real, allocatable :: x\n+   real(4), allocatable :: x4\n+   real(8), allocatable :: x8\n+   double precision, allocatable :: d1\n+   doubleprecision, allocatable :: d2\n+   character, allocatable :: c1\n+   character(len=4), allocatable :: c2\n+\n+   type a\n+      integer mytype\n+   end type a\n+\n+   type(a), allocatable :: b\n+\n+   allocate(real :: x)\n+   allocate(real(4) :: x4)\n+   allocate(real(8) :: x8)\n+   allocate(double precision :: d1)\n+   allocate(doubleprecision :: d2)\n+   allocate(character :: c1)\n+   allocate(character(len=4) :: c2)\n+   allocate(a :: b)\n+\n+end subroutine implicit_none_test2\n+!\n+! Allocation of arrays with a type-spec specification with implicit none.\n+!\n+subroutine implicit_test3\n+\n+   real, allocatable :: x(:)\n+   real(4), allocatable :: x4(:)\n+   real(8), allocatable :: x8(:)\n+   double precision, allocatable :: d1(:)\n+   doubleprecision, allocatable :: d2(:)\n+   character, allocatable :: c1(:)\n+   character(len=4), allocatable :: c2(:)\n+\n+   type a\n+      integer mytype\n+   end type a\n+\n+   type(a), allocatable :: b(:)\n+\n+   allocate(real :: x(1))\n+   allocate(real(4) :: x4(1))\n+   allocate(real(8) :: x8(1))\n+   allocate(double precision :: d1(1))\n+   allocate(doubleprecision :: d2(1))\n+   allocate(character :: c1(1))\n+   allocate(character(len=4) :: c2(1))\n+   allocate(a :: b(1))\n+\n+end subroutine implicit_test3\n+!\n+! Allocation of a scalar with a type-spec specification without implicit none\n+!\n+subroutine implicit_test4\n+\n+   real, allocatable :: x\n+   real(4), allocatable :: x4\n+   real(8), allocatable :: x8\n+   double precision, allocatable :: d1\n+   doubleprecision, allocatable :: d2\n+   character, allocatable :: c1\n+   character(len=4), allocatable :: c2\n+\n+   type a\n+      integer mytype\n+   end type a\n+\n+   type(a), allocatable :: b\n+\n+   allocate(real :: x)\n+   allocate(real(4) :: x4)\n+   allocate(real(8) :: x8)\n+   allocate(double precision :: d1)\n+   allocate(doubleprecision :: d2)\n+   allocate(character :: c1)\n+   allocate(character(len=4) :: c2)\n+   allocate(a :: b)\n+\n+end subroutine implicit_test4"}, {"sha": "51d1afad08c473f2894ad8f41c69ee7e6623f353", "filename": "gcc/testsuite/gfortran.dg/allocate_with_typespec_2.f", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_2.f?ref=1fccc6c3464c8862297bdf74d7bf22ac245e4639", "patch": "@@ -0,0 +1,121 @@\n+C { dg-do compile }\n+C\n+C Allocation of arrays with a type-spec specification with implicit none.\n+C\n+       subroutine implicit_none_test1\n+\n+          implicit none\n+\n+          real, allocatable :: x(:)\n+          real(4), allocatable :: x4(:)\n+          real(8), allocatable :: x8(:)\n+          double precision, allocatable :: d1(:)\n+          doubleprecision, allocatable :: d2(:)\n+          character, allocatable :: c1(:)\n+          character(len=4), allocatable :: c2(:)\n+\n+          type a\n+             integer mytype\n+          end type a\n+\n+          type(a), allocatable :: b(:)\n+\n+          allocate(real :: x(1))\n+          allocate(real(4) :: x4(1))\n+          allocate(real(8) :: x8(1))\n+          allocate(double precision :: d1(1))\n+          allocate(doubleprecision :: d2(1))\n+          allocate(character :: c1(1))\n+          allocate(character(len=4) :: c2(1))\n+          allocate(a :: b(1))\n+\n+       end\n+C\n+C Allocation of a scalar with a type-spec specification with implicit none\n+C\n+       subroutine implicit_none_test2\n+\n+          implicit none\n+\n+          real, allocatable :: x\n+          real(4), allocatable :: x4\n+          real(8), allocatable :: x8\n+          double precision, allocatable :: d1\n+          doubleprecision, allocatable :: d2\n+          character, allocatable :: c1\n+          character(len=4), allocatable :: c2\n+\n+          type a\n+             integer mytype\n+          end type a\n+\n+          type(a), allocatable :: b\n+\n+          allocate(real :: x)\n+          allocate(real(4) :: x4)\n+          allocate(real(8) :: x8)\n+          allocate(double precision :: d1)\n+          allocate(doubleprecision :: d2)\n+          allocate(character :: c1)\n+          allocate(character(len=4) :: c2)\n+          allocate(a :: b)\n+\n+       end subroutine implicit_none_test2\n+C\n+C Allocation of arrays with a type-spec specification with implicit none.\n+C\n+       subroutine implicit_test3\n+\n+          real, allocatable :: x(:)\n+          real(4), allocatable :: x4(:)\n+          real(8), allocatable :: x8(:)\n+          double precision, allocatable :: d1(:)\n+          doubleprecision, allocatable :: d2(:)\n+          character, allocatable :: c1(:)\n+          character(len=4), allocatable :: c2(:)\n+\n+          type a\n+             integer mytype\n+          end type a\n+\n+          type(a), allocatable :: b(:)\n+\n+          allocate(real :: x(1))\n+          allocate(real(4) :: x4(1))\n+          allocate(real(8) :: x8(1))\n+          allocate(double precision :: d1(1))\n+          allocate(doubleprecision :: d2(1))\n+          allocate(character :: c1(1))\n+          allocate(character(len=4) :: c2(1))\n+          allocate(a :: b(1))\n+\n+       end\n+C\n+C Allocation of a scalar with a type-spec specification without implicit none\n+C\n+       subroutine implicit_test4\n+\n+          real, allocatable :: x\n+          real(4), allocatable :: x4\n+          real(8), allocatable :: x8\n+          double precision, allocatable :: d1\n+          doubleprecision, allocatable :: d2\n+          character, allocatable :: c1\n+          character(len=4), allocatable :: c2\n+\n+          type a\n+             integer mytype\n+          end type a\n+\n+          type(a), allocatable :: b\n+\n+          allocate(real :: x)\n+          allocate(real(4) :: x4)\n+          allocate(real(8) :: x8)\n+          allocate(double precision :: d1)\n+          allocate(doubleprecision :: d2)\n+          allocate(character :: c1)\n+          allocate(character(len=4) :: c2)\n+          allocate(a :: b)\n+\n+       end"}, {"sha": "57f8a110e8fa0ca98ca622dd8daadd139a9b43fe", "filename": "gcc/testsuite/gfortran.dg/allocate_with_typespec_3.f90", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_3.f90?ref=1fccc6c3464c8862297bdf74d7bf22ac245e4639", "patch": "@@ -0,0 +1,107 @@\n+! { dg-do compile }\n+!\n+! Allocation of arrays with a type-spec specification with implicit none.\n+!\n+subroutine implicit_none_test1\n+\n+   implicit none\n+\n+   real, allocatable :: x(:)\n+   real(4), allocatable :: x4(:)\n+   real(8), allocatable :: x8(:)\n+   double precision, allocatable :: d1(:)\n+   doubleprecision, allocatable :: d2(:)\n+   character, allocatable :: c1(:)\n+\n+   type a\n+      integer mytype\n+   end type a\n+\n+   type(a), allocatable :: b(:)\n+\n+   allocate(complex :: x(1))       ! { dg-error \"is type incompatible\" }\n+   allocate(real(8) :: x4(1))      ! { dg-error \"differs from the kind type parameter\" }\n+   allocate(real(4) :: x8(1))      ! { dg-error \"differs from the kind type parameter\" }\n+   allocate(double :: d1(1))       ! { dg-error \"Error in type-spec at\" }\n+   allocate(character(:) :: c1(1)) ! { dg-error \"Syntax error in CHARACTER declaration\" }\n+   allocate(real :: b(1))          ! { dg-error \"is type incompatible\" }\n+\n+end subroutine implicit_none_test1\n+!\n+! Allocation of a scalar with a type-spec specification with implicit none\n+!\n+subroutine implicit_none_test2\n+\n+   implicit none\n+\n+   real, allocatable :: x\n+   real(4), allocatable :: x4\n+   real(8), allocatable :: x8\n+   double precision, allocatable :: d1\n+   character, allocatable :: c1\n+\n+   type a\n+      integer mytype\n+   end type a\n+\n+   type(a), allocatable :: b\n+\n+   allocate(complex :: x)       ! { dg-error \"is type incompatible\" }\n+   allocate(real(8) :: x4)      ! { dg-error \"differs from the kind type parameter\" }\n+   allocate(real(4) :: x8)      ! { dg-error \"differs from the kind type parameter\" }\n+   allocate(double :: d1)       ! { dg-error \"Error in type-spec at\" }\n+   allocate(character(:) :: c1) ! { dg-error \"Syntax error in CHARACTER declaration\" }\n+   allocate(real :: b)          ! { dg-error \"is type incompatible\" }\n+\n+end subroutine implicit_none_test2\n+!\n+! Allocation of arrays with a type-spec specification with implicit none.\n+!\n+subroutine implicit_test3\n+\n+   real, allocatable :: x(:)\n+   real(4), allocatable :: x4(:)\n+   real(8), allocatable :: x8(:)\n+   double precision, allocatable :: d1(:)\n+   doubleprecision, allocatable :: d2(:)\n+   character, allocatable :: c1(:)\n+\n+   type a\n+      integer mytype\n+   end type a\n+\n+   type(a), allocatable :: b(:)\n+\n+   allocate(complex :: x(1))       ! { dg-error \"is type incompatible\" }\n+   allocate(real(8) :: x4(1))      ! { dg-error \"differs from the kind type parameter\" }\n+   allocate(real(4) :: x8(1))      ! { dg-error \"differs from the kind type parameter\" }\n+   allocate(double :: d1(1))       ! { dg-error \"Error in type-spec\" }\n+   allocate(character(:) :: c1(1)) ! { dg-error \"Syntax error in CHARACTER declaration\" }\n+   allocate(real :: b(1))          ! { dg-error \"is type incompatible\" }\n+\n+end subroutine implicit_test3\n+!\n+! Allocation of a scalar with a type-spec specification without implicit none\n+!\n+subroutine implicit_test4\n+\n+   real, allocatable :: x\n+   real(4), allocatable :: x4\n+   real(8), allocatable :: x8\n+   double precision, allocatable :: d1\n+   character, allocatable :: c1\n+\n+   type a\n+      integer mytype\n+   end type a\n+\n+   type(a), allocatable :: b\n+\n+   allocate(complex :: x)       ! { dg-error \"is type incompatible\" }\n+   allocate(real(8) :: x4)      ! { dg-error \"differs from the kind type parameter\" }\n+   allocate(real(4) :: x8)      ! { dg-error \"differs from the kind type parameter\" }\n+   allocate(double :: d1)       ! { dg-error \"Error in type-spec at\" }\n+   allocate(character(:) :: c1) ! { dg-error \"Syntax error in CHARACTER declaration\" }\n+   allocate(real :: b)          ! { dg-error \"is type incompatible\" }\n+\n+end subroutine implicit_test4"}, {"sha": "327f28dcdc9934dc5c0e4dacc3a8b423743436a4", "filename": "gcc/testsuite/gfortran.dg/allocate_with_typespec_4.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_typespec_4.f90?ref=1fccc6c3464c8862297bdf74d7bf22ac245e4639", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+! { dg-options \"-w\" }\n+subroutine not_an_f03_intrinsic\n+\n+   implicit none\n+\n+   byte, allocatable :: x, y(:)\n+   real*8, allocatable :: x8, y8(:)\n+   double complex :: z\n+\n+   type real_type\n+      integer mytype\n+   end type real_type\n+\n+   type(real_type), allocatable :: b, c(:)\n+\n+   allocate(byte :: x)            ! { dg-error \"Error in type-spec at\" }\n+   allocate(byte :: y(1))         ! { dg-error \"Error in type-spec at\" }\n+\n+   allocate(real*8 :: x)          ! { dg-error \"Invalid type-spec at\" }\n+   allocate(real*8 :: y(1))       ! { dg-error \"Invalid type-spec at\" }\n+   allocate(real*4 :: x8)         ! { dg-error \"Invalid type-spec at\" }\n+   allocate(real*4 :: y8(1))      ! { dg-error \"Invalid type-spec at\" }\n+   allocate(double complex :: d1) ! { dg-error \"not a nonprocedure pointer or an allocatable\" }\n+   allocate(real_type :: b)\n+   allocate(real_type :: c(1))\n+\n+end subroutine not_an_f03_intrinsic"}, {"sha": "af0db3c84e352437d1534312556930696d132c3a", "filename": "gcc/testsuite/gfortran.dg/select_type_1.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_1.f03?ref=1fccc6c3464c8862297bdf74d7bf22ac245e4639", "patch": "@@ -45,7 +45,7 @@\n     print *,\"a is TYPE(ts)\"\n   type is (t3)   ! { dg-error \"must be an extension of\" }\n     print *,\"a is TYPE(t3)\"\n-  type is (t4)   ! { dg-error \"is not an accessible derived type\" }\n+  type is (t4)   ! { dg-error \"error in TYPE IS specification\" }\n     print *,\"a is TYPE(t3)\"\n   class is (t1)\n     print *,\"a is CLASS(t1)\""}, {"sha": "c3bd9bac8d5346bff93dd673307c065d3117c861", "filename": "gcc/testsuite/gfortran.dg/select_type_11.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_11.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fccc6c3464c8862297bdf74d7bf22ac245e4639/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_11.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_11.f03?ref=1fccc6c3464c8862297bdf74d7bf22ac245e4639", "patch": "@@ -19,7 +19,7 @@ subroutine bar (this,v)\n     class(vector_class),        intent(in)    :: v\n \n     select type (v)\n-    class is (bad_id)                    ! { dg-error \"is not an accessible derived type\" }\n+    class is (bad_id)                    ! { dg-error \" error in CLASS IS specification\" }\n        this%elements(:) = v%elements(:)  ! { dg-error \"is not a member of\" }\n     end select\n "}]}