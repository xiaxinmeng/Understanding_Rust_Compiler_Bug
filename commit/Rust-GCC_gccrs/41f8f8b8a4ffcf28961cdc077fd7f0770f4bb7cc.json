{"sha": "41f8f8b8a4ffcf28961cdc077fd7f0770f4bb7cc", "node_id": "C_kwDOANBUbNoAKDQxZjhmOGI4YTRmZmNmMjg5NjFjZGMwNzdmZDdmMDc3MGY0YmI3Y2M", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-13T08:12:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-13T08:12:56Z"}, "message": "attribs: Restrict decl_attributes DECL_FUNCTION_SPECIFIC_TARGET changes to targets that care about target attributes/pragmas [PR105234]\n\nThe following code is rejected e.g. on mips64el-linux (but I think many\nother targets which don't support target attribute or pragma).\nThe problem is that the change to decl_attributes below is done\nunconditionally and with just #pragma GCC push_options/pop_options pair\nwe have target_option_default_node NULL, but after popping options\ntarget_option_current_node becomes non-NULL and this decl_attribute\nspot fills in DECL_FUNCTION_SPECIFIC_TARGET of a subset of a functions.\nThose appearing before push_options/pop_options will have it NULL and\nas target_option_default_node is also NULL on those targets, the default\ncan_inline_p will refuse to inline any functions defined with NULL\nDECL_FUNCTION_SPECIFIC_TARGET into any function with non-NULL\nDECL_FUNCTION_SPECIFIC_TARGET (even when nothing in the options really\nchanged).\n\nThe following patch restricts that snippet to targets that care (initialize\ntarget_option_default_node to non-NULL to the command line options early)\nwhich include all targets that actually implement target attribute and/or\npragma.\n\n2022-04-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/105234\n\t* attribs.cc (decl_attributes): Don't set\n\tDECL_FUNCTION_SPECIFIC_TARGET if target_option_default_node is\n\tNULL.\n\n\t* gcc.c-torture/compile/pr105234.c: New test.", "tree": {"sha": "aae38443a5b8ba3deb3bcbd98d2fe087d3e5abe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aae38443a5b8ba3deb3bcbd98d2fe087d3e5abe0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41f8f8b8a4ffcf28961cdc077fd7f0770f4bb7cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f8f8b8a4ffcf28961cdc077fd7f0770f4bb7cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f8f8b8a4ffcf28961cdc077fd7f0770f4bb7cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f8f8b8a4ffcf28961cdc077fd7f0770f4bb7cc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e892de6774f86540d36385701aa7b0a2bba5155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e892de6774f86540d36385701aa7b0a2bba5155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e892de6774f86540d36385701aa7b0a2bba5155"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "b219f878042f25b12919ddfa6a59c4011c853b93", "filename": "gcc/attribs.cc", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8f8b8a4ffcf28961cdc077fd7f0770f4bb7cc/gcc%2Fattribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8f8b8a4ffcf28961cdc077fd7f0770f4bb7cc/gcc%2Fattribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.cc?ref=41f8f8b8a4ffcf28961cdc077fd7f0770f4bb7cc", "patch": "@@ -636,15 +636,20 @@ decl_attributes (tree *node, tree attributes, int flags,\n       && !DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node))\n     {\n       DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node) = optimization_current_node;\n-      tree cur_tree\n-\t= build_target_option_node (&global_options, &global_options_set);\n-      tree old_tree = DECL_FUNCTION_SPECIFIC_TARGET (*node);\n-      if (!old_tree)\n-\told_tree = target_option_default_node;\n-      /* The changes on optimization options can cause the changes in\n-\t target options, update it accordingly if it's changed.  */\n-      if (old_tree != cur_tree)\n-\tDECL_FUNCTION_SPECIFIC_TARGET (*node) = cur_tree;\n+      /* Don't set DECL_FUNCTION_SPECIFIC_TARGET for targets that don't\n+\t support #pragma GCC target or target attribute.  */\n+      if (target_option_default_node)\n+\t{\n+\t  tree cur_tree\n+\t    = build_target_option_node (&global_options, &global_options_set);\n+\t  tree old_tree = DECL_FUNCTION_SPECIFIC_TARGET (*node);\n+\t  if (!old_tree)\n+\t    old_tree = target_option_default_node;\n+\t  /* The changes on optimization options can cause the changes in\n+\t     target options, update it accordingly if it's changed.  */\n+\t  if (old_tree != cur_tree)\n+\t    DECL_FUNCTION_SPECIFIC_TARGET (*node) = cur_tree;\n+\t}\n     }\n \n   /* If this is a function and the user used #pragma GCC target, add the"}, {"sha": "3fdfed8b5623cc79a3da07839d862ce6726bab14", "filename": "gcc/testsuite/gcc.c-torture/compile/pr105234.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8f8b8a4ffcf28961cdc077fd7f0770f4bb7cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr105234.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8f8b8a4ffcf28961cdc077fd7f0770f4bb7cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr105234.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr105234.c?ref=41f8f8b8a4ffcf28961cdc077fd7f0770f4bb7cc", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/105234 */\n+/* { dg-do compile } */\n+\n+static inline __attribute__((always_inline)) int foo (int x) { return x + 1; }\n+#pragma GCC push_options\n+static inline __attribute__((always_inline)) int bar (int x) { return x + 2; }\n+#pragma GCC pop_options\n+static inline __attribute__((always_inline)) int baz (int x) { return x + 3; }\n+\n+int\n+qux (void)\n+{\n+  return foo (bar (baz (42)));\n+}"}]}