{"sha": "d9c4ef55bd4443bb7e34ab56934cb3522293880a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDljNGVmNTViZDQ0NDNiYjdlMzRhYjU2OTM0Y2IzNTIyMjkzODgwYQ==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2004-07-01T12:42:07Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2004-07-01T12:42:07Z"}, "message": "alias.c (get_alias_set, [...]): Use MEM_P.\n\n2004-07-01  Jerry Quinn  <jlquinn@optonline.net>\n\n\t* alias.c (get_alias_set, canon_rtx, get_addr,\n\tnonoverlapping_memrefs_p, nonlocal_referenced_p_1, memory_modified_1):\n\tUse MEM_P.\n\t* builtins.c (expand_builtin_prefetch, expand_builtin_profile_func,\n\texpand_builtin): Likewise.\n\t* calls.c (expand_call, emit_library_call_value_1, store_one_arg):\n\tLikewise.\n\t* combine.c (can_combine_p, combinable_i3pat, try_combine,\n\tfind_split_point, combine_simplify_rtx, simplify_set, make_extraction,\n\trtx_equal_for_field_assignment_p, gen_lowpart_for_combine,\n\trecord_dead_and_set_regs_1, get_last_value_validate,\n\tmark_used_regs_combine, move_deaths, unmentioned_reg_p_1): Likewise.\n\t* cse.c (check_dependence, canon_hash, equiv_constant,\n\tgen_lowpart_if_possible, cse_insn, invalidate_from_clobbers,\n\tcse_around_loop, cse_check_loop_start, cse_set_around_loop,\n\tcount_reg_usage): Likewise.\n\t* cselib.c (rtx_equal_for_cselib_p, add_mem_for_addr, cselib_lookup,\n\tcselib_invalidate_mem, cselib_invalidate_rtx, cselib_record_set,\n\tcselib_record_sets): Likewise.\n\t* dbxout.c (PARM_PASSED_IN_MEMORY, dbxout_symbol,\n\tdbxout_symbol_location, dbxout_parms, dbxout_reg_parms): Likewise.\n\t* ddg.c (mark_mem_use, mark_mem_store, rtx_mem_access_p): Likewise.\n\t* df.c (df_uses_record): Likewise.\n\t* dojump (do_jump): Likewise.\n\t* dwarf2out.c (stack_adjust_offset, mem_loc_descriptor,\n\tloc_descriptor_from_tree, rtl_for_decl_location, add_bound_info,\n\tdecl_start_label): Likewise.\n\t* emit-rtl.c (gen_complex_constant_part, gen_highpart,\n\toperand_subword, change_address_1, make_safe_from): Likewise.\n\t* explow.c (break_out_memory_refs, copy_all_regs, validize_mem,\n\tstabilize, force_not_mem): Likewise.\n\t* expmed.c (store_bit_field, store_split_bit_field, extract_bit_field,\n\texpand_mult_const, expand_divmod, emit_store_flag): Likewise.\n\t* expr.c (convert_move, convert_modes, emit_block_move,\n\temit_group_load, emit_group_store, clear_storage, emit_move_insn,\n\temit_move_insn_1, expand_assignment, store_expr,\n\tstore_constructor_field, store_constructor, store_field,\n\tforce_operand, safe_from_p, expand_expr_real_1, expand_increment):\n\tLikewise.\n\t* final.c (cleanup_subreg_operands, alter_subreg,\n\tget_mem_expr_from_op): Likewise.\n\t* flow.c (notice_stack_pointer_modification_1,\n\tinit_propagate_block_info, insn_dead_p, mark_set_1, mark_used_regs):\n\tLikewise.\n\t* function.c (mark_temp_addr_taken, preserve_temp_slots,\n\tpreserve_rtl_expr_result, put_var_into_stack, fixup_var_refs_1,\n\toptimize_bit_field, flush_addressof, purge_addressof_1,\n\tinstantiate_decl, instantiate_virtual_regs_1, assign_parms,\n\tsetjmp_protect, setjmp_protect_args, fix_lexical_addr,\n\tkeep_stack_depressed): Likewise.\n\t* ifcvt.c (noce_try_cmove_arith, noce_try_abs, noce_operand_ok,\n\tnoce_process_if_block, find_memory): Likewise.\n\t* integrate.c (subst_constants, allocate_initial_values): Likewise.\n\t* local-alloc.c (validate_equiv_mem_from_store, memref_referenced_p,\n\tupdate_equiv_regs): Likewise.\n\t* loop.c (scan_loop, prescan_loop, note_addr_stored, check_store,\n\tmaybe_eliminate_biv_1, find_mem_in_note_1): Likewise.\n\t* optabs.c (expand_abs, emit_unop_insn): Likewise.\n\t* passes.c (rest_of_handle_final): Likewise.\n\t* postreload.c (reload_cse_simplify_set, reload_cse_simplify_operands,\n\tmove2add_note_store): Likewise.\n\t* ra-build.c (detect_remat_webs): Likewise.\n\t* ra-debug.c (dump_static_insn_cost): Likewise.\n\t* ra-rewrite.c (slots_overlap_p, insert_stores): Likewise.\n\t* recog.c (validate_change, apply_change_group, cancel_changes,\n\tvalidate_replace_rtx_1, general_operand, register_operand,\n\tnonmemory_operand, push_operand, pop_operand, memory_operand,\n\tindirect_operand, asm_operand_ok, offsettable_memref_p,\n\toffsettable_nonstrict_memref_p, constrain_operands,\n\tstore_data_bypass_p): Likewise.\n\t* reg-stack.c (subst_stack_regs_pat): Likewise.\n\t* regclass.c (record_operand_costs, scan_one_insn, record_reg_classes,\n\tcopy_cost, reg_scan_mark_refs): Likewise.\n\t* regmove.c (optimize_reg_copy_3, stack_memref_p,\n\tcombine_stack_adjustments_for_block): Likewise.\n\t* regrename.c (copyprop_hardreg_forward_1): Likewise.\n\t* reload.c (can_reload_into, push_reload, decompose, immune_p,\n\tfind_reloads, find_reloads_address, find_reloads_address_1,\n\treg_overlap_mentioned_for_reload_p, refers_to_mem_for_reload_p,\n\tfind_equiv_reg): Likewise.\n\t* reload1.c (reload, eliminate_regs, eliminate_regs_in_insn,\n\treload_as_needed, choose_reload_regs, emit_input_reload_insns,\n\tdo_input_reload, emit_reload_insns, gen_reload, delete_output_reload,\n\tdelete_address_reloads): Likewise.\n\t* resource.c (mark_referenced_resources): Likewise.\n\t* rtlanal.c (get_jump_table_offset, count_occurrences,\n\treg_referenced_p, reg_set_p, set_of_1, set_noop_p,\n\treg_overlap_mentioned_p, note_uses, replace_regs, nonzero_bits1,\n\tnum_sign_bit_copies1): Likewise.\n\t* rtlhooks.c (gen_lowpart_general): Likewise.\n\t* sched-deps.c (sched_analyze_1, sched_analyze_2): Likewise.\n\t* sdbout.c (PARM_PASSED_IN_MEMORY, sdbout_symbol,\n\tsdbout_toplevel_data, sdbout_parms, sdbout_reg_parms,\n\tsdbout_global_decl): Likewise.\n\t* simplify-rtx.c (simplify_subreg): Likewise.\n\t* stmt.c (expand_asm_operands, expand_expr_stmt_value, expand_decl,\n\texpand_anon_union_decl, expand_end_case_type): Likewise.\n\t* unroll.c (calculate_giv_inc): Likewise.\n\t* var-tracking.c (stack_adjust_offset_pre_post,\n\tbb_stack_adjust_offset, track_expr_p, count_uses, add_uses,\n\tadd_stores, compute_bb_dataflow, vt_get_decl_and_offset,\n\tvt_add_function_parameters): Likewise.\n\t* varasm.c (make_var_volatile, notice_global_symbol,\n\tassemble_external, decode_addr_const, mark_weak,\n\tdefault_encode_section_info): Likewise.\n\nFrom-SVN: r83978", "tree": {"sha": "d1d858f9bf511c67189ef7b06ea4fc9e86bb9956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1d858f9bf511c67189ef7b06ea4fc9e86bb9956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9c4ef55bd4443bb7e34ab56934cb3522293880a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c4ef55bd4443bb7e34ab56934cb3522293880a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c4ef55bd4443bb7e34ab56934cb3522293880a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c4ef55bd4443bb7e34ab56934cb3522293880a/comments", "author": null, "committer": null, "parents": [{"sha": "a0ae6d3b8cc84881c083dc72d76250152111dcf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ae6d3b8cc84881c083dc72d76250152111dcf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0ae6d3b8cc84881c083dc72d76250152111dcf0"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "2c66454cd028a943d7f6e4ff959ba22bebfd4457", "filename": "gcc/ddg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9c4ef55bd4443bb7e34ab56934cb3522293880a/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9c4ef55bd4443bb7e34ab56934cb3522293880a/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=d9c4ef55bd4443bb7e34ab56934cb3522293880a", "patch": "@@ -68,7 +68,7 @@ static bool mem_ref_p;\n static int\n mark_mem_use (rtx *x, void *data ATTRIBUTE_UNUSED)\n {\n-  if (GET_CODE (*x) == MEM)\n+  if (MEM_P (*x))\n     mem_ref_p = true;\n   return 0;\n }\n@@ -92,7 +92,7 @@ mem_read_insn_p (rtx insn)\n static void\n mark_mem_store (rtx loc, rtx setter ATTRIBUTE_UNUSED, void *data ATTRIBUTE_UNUSED)\n {\n-  if (GET_CODE (loc) == MEM)\n+  if (MEM_P (loc))\n     mem_ref_p = true;\n }\n \n@@ -116,7 +116,7 @@ rtx_mem_access_p (rtx x)\n   if (x == 0)\n     return false;\n \n-  if (GET_CODE (x) == MEM)\n+  if (MEM_P (x))\n     return true;\n \n   code = GET_CODE (x);"}]}