{"sha": "0d3453dfb69f5c4d090cd03a85b6595f3e995743", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQzNDUzZGZiNjlmNWM0ZDA5MGNkMDNhODViNjU5NWYzZTk5NTc0Mw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@cygnus.com", "date": "1998-06-09T13:28:26Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1998-06-09T13:28:26Z"}, "message": "Minor tweaks.\n\n\t* except.c (expand_start_catch): Rename to start_catch_handler.\n\t(expand_end_catch): Delete function.\n\t(expand_end_all_catch): Remove catch status that expand_end_catch\n\tuse to do.\n\t* except.h (expand_start_catch): Rename prototype.\n\t(expand_end_catch): Delete prototype.\n\t* semantics.c (finish_try_block): Rename expand_start_catch, and delete\n\texpand_end_catch.\n\t* parse.y (function_try_block): Rename expand_start_catch, and delete\n\texpand_end_catch.\n\t* except.c (expand_end_eh_spec): Rename expand_start_catch, and delete\n\texpand_end_catch.\n\nFrom-SVN: r20379", "tree": {"sha": "812a5e7bcb5c0cb69417d69ff0d7b7245fc40a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/812a5e7bcb5c0cb69417d69ff0d7b7245fc40a0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d3453dfb69f5c4d090cd03a85b6595f3e995743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3453dfb69f5c4d090cd03a85b6595f3e995743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d3453dfb69f5c4d090cd03a85b6595f3e995743", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3453dfb69f5c4d090cd03a85b6595f3e995743/comments", "author": null, "committer": null, "parents": [{"sha": "3398f47f04de7dd2154fd8565c45d815e173975e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3398f47f04de7dd2154fd8565c45d815e173975e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3398f47f04de7dd2154fd8565c45d815e173975e"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "dafb655bdcf5e6aef83d3736fc0f219bc13d8622", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d3453dfb69f5c4d090cd03a85b6595f3e995743", "patch": "@@ -1,3 +1,12 @@\n+Tue Jun  9 16:23:13 EDT 1998  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* except.c (expand_start_catch): Rename to start_catch_handler.\n+\t(expand_end_catch): Delete function.\n+\t(expand_end_all_catch): Remove catch status that expand_end_catch\n+\tuse to do.\n+\t* except.h (expand_start_catch): Rename prototype.\n+\t(expand_end_catch): Delete prototype.\n+\n Tue Jun  9 12:57:32 1998  Mark Mitchell  <mark@markmitchell.com>\n \n \t* invoke.texi: Add documentation for -mips4 and -mabi=*."}, {"sha": "622c9442aad8391ae4f38a0eced9688427bdc7e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0d3453dfb69f5c4d090cd03a85b6595f3e995743", "patch": "@@ -1,3 +1,12 @@\n+1998-06-09  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* semantics.c (finish_try_block): Rename expand_start_catch, and delete\n+\texpand_end_catch.\n+\t* parse.y (function_try_block): Rename expand_start_catch, and delete\n+\texpand_end_catch.\n+\t* except.c (expand_end_eh_spec): Rename expand_start_catch, and delete\n+\texpand_end_catch.\n+\n 1998-06-09  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* search.c (lookup_member): New fn."}, {"sha": "d5859f80bf9f9595dad48de3d291646b63111b47", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=0d3453dfb69f5c4d090cd03a85b6595f3e995743", "patch": "@@ -686,7 +686,7 @@ expand_end_eh_spec (raises)\n   int count = 0;\n \n   expand_start_all_catch ();\n-  expand_start_catch (NULL);\n+  start_catch_handler (NULL);\n   expand_start_catch_block (NULL_TREE, NULL_TREE);\n \n   /* Build up an array of type_infos.  */\n@@ -739,7 +739,6 @@ expand_end_eh_spec (raises)\n   expand_expr (tmp, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n   expand_end_catch_block ();\n-  expand_end_catch ();\n   expand_end_all_catch ();\n }\n "}, {"sha": "44b3f68de8814bcc18dfb78d8c66ac9d1275a9da", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=0d3453dfb69f5c4d090cd03a85b6595f3e995743", "patch": "@@ -3251,14 +3251,13 @@ function_try_block:\n \t  ctor_initializer_opt compstmt\n \t\t{ \n                   expand_start_all_catch (); \n-                  expand_start_catch (NULL);\n+                  start_catch_handler (NULL);\n                 }\n \t  handler_seq\n \t\t{\n \t\t  int nested = (hack_decl_function_context\n \t\t\t\t(current_function_decl) != NULL_TREE);\n \t\t  expand_end_all_catch ();\n-                  expand_end_catch ();\n \t\t  finish_function (lineno, (int)$3, nested);\n \t\t}\n \t;"}, {"sha": "60c4c3213c3a5178b0c5465361d2570f9e3fe2ce", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0d3453dfb69f5c4d090cd03a85b6595f3e995743", "patch": "@@ -589,7 +589,7 @@ finish_try_block (try_block)\n   else\n     {\n       expand_start_all_catch ();  \n-      expand_start_catch (NULL);\n+      start_catch_handler (NULL);\n     }\n }\n \n@@ -604,7 +604,6 @@ finish_handler_sequence (try_block)\n     RECHAIN_STMTS_FROM_CHAIN (try_block, TRY_HANDLERS (try_block));\n   else\n     {\n-      expand_end_catch ();\n       expand_end_all_catch ();\n     }\n }"}, {"sha": "708fba9c1f3830cc26ed2d7bb7b1f5ed2c3a2379", "filename": "gcc/except.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=0d3453dfb69f5c4d090cd03a85b6595f3e995743", "patch": "@@ -1511,7 +1511,7 @@ expand_start_try_stmts ()\n /* Called to begin a catch clause. The parameter is the object which\n    will be passed to the runtime type check routine. */\n void \n-expand_start_catch (rtime)\n+start_catch_handler (rtime)\n      tree rtime;\n {\n   rtx handler_label = catchstack.top->entry->exception_handler_label;\n@@ -1529,16 +1529,6 @@ expand_start_catch (rtime)\n   add_new_handler (eh_region_entry, get_new_handler (handler_label, rtime));\n }\n \n-/* End a catch clause by dequeuing the current region */\n-\n-void \n-expand_end_catch ()\n-{\n-  struct eh_entry *entry;\n-  entry = pop_eh_entry (&catchstack);\n-  free (entry);\n-}\n-\n /* Generate RTL for the start of a group of catch clauses. \n \n    It is responsible for starting a new instruction sequence for the\n@@ -1641,10 +1631,15 @@ void\n expand_end_all_catch ()\n {\n   rtx new_catch_clause, outer_context = NULL_RTX;\n+  struct eh_entry *entry;\n \n   if (! doing_eh (1))\n     return;\n \n+  /* Dequeue the current catch clause region. */\n+  entry = pop_eh_entry (&catchstack);\n+  free (entry);\n+\n   if (! exceptions_via_longjmp)\n     {\n       outer_context = ehstack.top->entry->outer_context;"}, {"sha": "56b5cb91de5297a7e60ad663a380e2dcbc34c14c", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d3453dfb69f5c4d090cd03a85b6595f3e995743/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=0d3453dfb69f5c4d090cd03a85b6595f3e995743", "patch": "@@ -228,13 +228,9 @@ extern void add_eh_table_entry\t\t\tPROTO((int n));\n /* Start a catch clause, triggered by runtime value paramter. */\n \n #ifdef TREE_CODE\n-extern void expand_start_catch                  PROTO((tree));\n+extern void start_catch_handler                 PROTO((tree));\n #endif\n \n-/* End a catch clause. */\n-\n-extern void expand_end_catch                    PROTO((void));\n-\n /* Returns a non-zero value if we need to output an exception table.  */\n \n extern int exception_table_p\t\t\tPROTO((void));"}]}