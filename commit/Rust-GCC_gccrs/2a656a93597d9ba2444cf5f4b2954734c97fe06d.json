{"sha": "2a656a93597d9ba2444cf5f4b2954734c97fe06d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE2NTZhOTM1OTdkOWJhMjQ0NGNmNWY0YjI5NTQ3MzRjOTdmZTA2ZA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2019-12-20T01:20:13Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2019-12-20T01:20:13Z"}, "message": "Use aux struct in libgomp for infrequently-used/API-specific data\n\n\tlibgomp/\n\t* libgomp.h (struct splay_tree_aux): New.\n\t(struct splay_tree_key_s): Replace link_key field with aux pointer.\n\t* target.c (gomp_map_vars_internal): Adjust for link_key being moved\n\tto aux struct.\n\t(gomp_remove_var_internal): Free aux block if present.\n\t(gomp_load_image_to_device): Zero-initialise aux field instead of\n\tlink_key field.\n\t(omp_target_associate_pointer): Zero-initialise aux field.\n\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>\n\nFrom-SVN: r279620", "tree": {"sha": "7c855a38f4c937efdb01078056ec89930fa3caf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c855a38f4c937efdb01078056ec89930fa3caf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a656a93597d9ba2444cf5f4b2954734c97fe06d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a656a93597d9ba2444cf5f4b2954734c97fe06d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a656a93597d9ba2444cf5f4b2954734c97fe06d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a656a93597d9ba2444cf5f4b2954734c97fe06d/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cce8b850470ba92287ffea9b53a46b69ec7dd8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cce8b850470ba92287ffea9b53a46b69ec7dd8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cce8b850470ba92287ffea9b53a46b69ec7dd8e"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "6382e3634dd5b76fbe65e2a36c4253dd033a4e04", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a656a93597d9ba2444cf5f4b2954734c97fe06d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a656a93597d9ba2444cf5f4b2954734c97fe06d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2a656a93597d9ba2444cf5f4b2954734c97fe06d", "patch": "@@ -1,3 +1,15 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* libgomp.h (struct splay_tree_aux): New.\n+\t(struct splay_tree_key_s): Replace link_key field with aux pointer.\n+\t* target.c (gomp_map_vars_internal): Adjust for link_key being moved\n+\tto aux struct.\n+\t(gomp_remove_var_internal): Free aux block if present.\n+\t(gomp_load_image_to_device): Zero-initialise aux field instead of\n+\tlink_key field.\n+\t(omp_target_associate_pointer): Zero-initialise aux field.\n+\n 2019-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/86416"}, {"sha": "f982ab38af68049147ae6105a39fbf76baaa0a29", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a656a93597d9ba2444cf5f4b2954734c97fe06d/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a656a93597d9ba2444cf5f4b2954734c97fe06d/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=2a656a93597d9ba2444cf5f4b2954734c97fe06d", "patch": "@@ -989,6 +989,13 @@ struct target_mem_desc {\n #define OFFSET_POINTER (~(uintptr_t) 1)\n #define OFFSET_STRUCT (~(uintptr_t) 2)\n \n+/* Auxiliary structure for infrequently-used or API-specific data.  */\n+\n+struct splay_tree_aux {\n+  /* Pointer to the original mapping of \"omp declare target link\" object.  */\n+  splay_tree_key link_key;\n+};\n+\n struct splay_tree_key_s {\n   /* Address of the host object.  */\n   uintptr_t host_start;\n@@ -1002,8 +1009,7 @@ struct splay_tree_key_s {\n   uintptr_t refcount;\n   /* Dynamic reference count.  */\n   uintptr_t dynamic_refcount;\n-  /* Pointer to the original mapping of \"omp declare target link\" object.  */\n-  splay_tree_key link_key;\n+  struct splay_tree_aux *aux;\n };\n \n /* The comparison function.  */"}, {"sha": "5df0a0ff254ef0bea3657ba430348dd48e01584c", "filename": "libgomp/target.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a656a93597d9ba2444cf5f4b2954734c97fe06d/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a656a93597d9ba2444cf5f4b2954734c97fe06d/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=2a656a93597d9ba2444cf5f4b2954734c97fe06d", "patch": "@@ -931,13 +931,15 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t\t\t\t      kind & typemask, cbufp);\n \t    else\n \t      {\n-\t\tk->link_key = NULL;\n+\t\tk->aux = NULL;\n \t\tif (n && n->refcount == REFCOUNT_LINK)\n \t\t  {\n \t\t    /* Replace target address of the pointer with target address\n \t\t       of mapped object in the splay tree.  */\n \t\t    splay_tree_remove (mem_map, n);\n-\t\t    k->link_key = n;\n+\t\t    k->aux\n+\t\t      = gomp_malloc_cleared (sizeof (struct splay_tree_aux));\n+\t\t    k->aux->link_key = n;\n \t\t  }\n \t\tsize_t align = (size_t) 1 << (kind >> rshift);\n \t\ttgt->list[i].key = k;\n@@ -1055,7 +1057,7 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t\t\t\tkind);\n \t\t  }\n \n-\t\tif (k->link_key)\n+\t\tif (k->aux && k->aux->link_key)\n \t\t  {\n \t\t    /* Set link pointer on target to the device address of the\n \t\t       mapped object.  */\n@@ -1170,8 +1172,14 @@ gomp_remove_var_internal (struct gomp_device_descr *devicep, splay_tree_key k,\n {\n   bool is_tgt_unmapped = false;\n   splay_tree_remove (&devicep->mem_map, k);\n-  if (k->link_key)\n-    splay_tree_insert (&devicep->mem_map, (splay_tree_node) k->link_key);\n+  if (k->aux)\n+    {\n+      if (k->aux->link_key)\n+\tsplay_tree_insert (&devicep->mem_map,\n+\t\t\t   (splay_tree_node) k->aux->link_key);\n+      free (k->aux);\n+      k->aux = NULL;\n+    }\n   if (aq)\n     devicep->openacc.async.queue_callback_func (aq, gomp_unref_tgt_void,\n \t\t\t\t\t\t(void *) k->tgt);\n@@ -1398,7 +1406,7 @@ gomp_load_image_to_device (struct gomp_device_descr *devicep, unsigned version,\n       k->tgt_offset = target_table[i].start;\n       k->refcount = REFCOUNT_INFINITY;\n       k->dynamic_refcount = 0;\n-      k->link_key = NULL;\n+      k->aux = NULL;\n       array->left = NULL;\n       array->right = NULL;\n       splay_tree_insert (&devicep->mem_map, array);\n@@ -1431,7 +1439,7 @@ gomp_load_image_to_device (struct gomp_device_descr *devicep, unsigned version,\n       k->tgt_offset = target_var->start;\n       k->refcount = target_size & link_bit ? REFCOUNT_LINK : REFCOUNT_INFINITY;\n       k->dynamic_refcount = 0;\n-      k->link_key = NULL;\n+      k->aux = NULL;\n       array->left = NULL;\n       array->right = NULL;\n       splay_tree_insert (&devicep->mem_map, array);\n@@ -2693,6 +2701,7 @@ omp_target_associate_ptr (const void *host_ptr, const void *device_ptr,\n       k->tgt_offset = (uintptr_t) device_ptr + device_offset;\n       k->refcount = REFCOUNT_INFINITY;\n       k->dynamic_refcount = 0;\n+      k->aux = NULL;\n       array->left = NULL;\n       array->right = NULL;\n       splay_tree_insert (&devicep->mem_map, array);"}]}