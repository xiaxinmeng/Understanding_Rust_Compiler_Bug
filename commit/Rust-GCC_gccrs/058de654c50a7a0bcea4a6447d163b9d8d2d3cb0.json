{"sha": "058de654c50a7a0bcea4a6447d163b9d8d2d3cb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4ZGU2NTRjNTBhN2EwYmNlYTRhNjQ0N2QxNjNiOWQ4ZDJkM2NiMA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-21T15:59:31Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-21T15:59:31Z"}, "message": "Makefile.in: Update.\n\n\t* Makefile.in: Update.\n\t* c-opts.c (c_common_handle_option): Don't return -1.\n\t* common.opt: New switches.\n\t* opts.c: Include rtl.h, ggc.h and output.h.\n\t(find_opt): Only stop searching when input switch compares\n\tless than the stored switch.  Continue searching if greater.\n\t(handle_option): No need to handle negative return values.\n\t(common_handle_option): Handle new switches.\n\t(set_fast_math_flags, fast_math_flags_set_p): New.\n\t* toplev.c (set_fast_math_flags, fast_math_flags_set_p):\n\tMove to opts.c.\n\t(decode_f_option): Some switches moved to opts.c.\n\t(parse_options_and_default_flags): No need to cater for negative\n\treturn values.\nf:\n\t* top.c (ffe_handle_option): No need to return -1 any more.\n\nFrom-SVN: r68307", "tree": {"sha": "653ac33030daee31271ea46a6238a3dc13dd1fdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/653ac33030daee31271ea46a6238a3dc13dd1fdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/comments", "author": null, "committer": null, "parents": [{"sha": "6ecaa2701dce0c9dc132b190f79e4ab02f150577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ecaa2701dce0c9dc132b190f79e4ab02f150577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ecaa2701dce0c9dc132b190f79e4ab02f150577"}], "stats": {"total": 258, "additions": 143, "deletions": 115}, "files": [{"sha": "ccef73b3956af680b94b3913f23bd15b22fe320f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=058de654c50a7a0bcea4a6447d163b9d8d2d3cb0", "patch": "@@ -1482,7 +1482,7 @@ diagnostic.o : diagnostic.c diagnostic.h real.h diagnostic.def \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(TM_P_H) flags.h $(GGC_H) \\\n    input.h toplev.h intl.h langhooks.h $(LANGHOOKS_DEF_H)\n opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n-\tcoretypes.h $(TREE_H) $(TM_H) $(LANGHOOKS_H)\n+\tcoretypes.h $(TREE_H) $(TM_H) $(LANGHOOKS_H) $(GGC_H) $(RTL_H) output.h\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n    function.h flags.h xcoffout.h input.h $(INSN_ATTR_H) output.h diagnostic.h \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\"}, {"sha": "6e8cf6e4be7686b194ccfebbc8d0476736ca5842", "filename": "gcc/c-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=058de654c50a7a0bcea4a6447d163b9d8d2d3cb0", "patch": "@@ -820,8 +820,8 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n     case OPT_ffixed_form:\n     case OPT_ffixed_line_length_:\n       /* Fortran front end options ignored when preprocessing only.  */\n-      if (flag_preprocess_only)\n-        result = -1;\n+      if (!flag_preprocess_only)\n+        result = 0;\n       break;\n \n     case OPT_ffor_scope:"}, {"sha": "d475cad1c0a6d8091fb6aca58f51562759d60c15", "filename": "gcc/common.opt", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=058de654c50a7a0bcea4a6447d163b9d8d2d3cb0", "patch": "@@ -139,6 +139,39 @@ Common Joined\n dumpbase\n Common Separate\n \n+falign-functions=\n+Common RejectNegative Joined UInteger\n+\n+falign-jumps=\n+Common RejectNegative Joined UInteger\n+\n+falign-labels=\n+Common RejectNegative Joined UInteger\n+\n+falign-loops=\n+Common RejectNegative Joined UInteger\n+\n+fcall-saved-\n+Common Joined RejectNegative\n+\n+fcall-used-\n+Common Joined RejectNegative\n+\n+ffast-math\n+Common\n+\n+ffixed-\n+Common Joined RejectNegative\n+\n+fstack-limit-register=\n+Common RejectNegative Joined\n+\n+fstack-limit-symbol=\n+Common RejectNegative Joined\n+\n+ftls-model=\n+Common Joined RejectNegative\n+\n g\n Common JoinedOrMissing\n "}, {"sha": "89d3e96e3101d0c0693bb503afcb8aeb83b9bdeb", "filename": "gcc/f/top.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2Ff%2Ftop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2Ff%2Ftop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.c?ref=058de654c50a7a0bcea4a6447d163b9d8d2d3cb0", "patch": "@@ -239,8 +239,6 @@ ffe_handle_option (size_t scode, const char *arg, int value)\n \n     case OPT_ffixed_form:\n       ffe_set_is_free_form (!value);\n-      if (value)\n-\treturn -1;\n       break;\n \n     case OPT_fpedantic:\n@@ -564,16 +562,12 @@ ffe_handle_option (size_t scode, const char *arg, int value)\n \n     case OPT_ffixed_line_length_:\n       if (strcmp (arg, \"none\") == 0)\n-\t{\n-\t  ffe_set_fixed_line_length (0);\n-\t  return -1;\n-\t}\n+\tffe_set_fixed_line_length (0);\n       else if (ffe_is_digit_string_ (arg))\n-\t{\n-\t  ffe_set_fixed_line_length (atol (arg));\n-\t  return -1;\n-\t}\n-      return 0;\n+\tffe_set_fixed_line_length (atol (arg));\n+      else\n+\treturn 0;\n+      break;\n \n     case OPT_Wcomment:\n     case OPT_Wcomments:"}, {"sha": "c622fd9b678e2acc2a77956750895e7dec6a0368", "filename": "gcc/opts.c", "status": "modified", "additions": 95, "deletions": 12, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=058de654c50a7a0bcea4a6447d163b9d8d2d3cb0", "patch": "@@ -24,6 +24,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n+#include \"rtl.h\"\n+#include \"ggc.h\"\n+#include \"output.h\"\n #include \"langhooks.h\"\n #include \"opts.h\"\n #include \"options.h\"\n@@ -196,8 +199,11 @@ find_opt (const char *input, int lang_mask)\n \t      for (md = md + 1; md < cl_options_count; md++)\n \t\t{\n \t\t  opt_len = cl_options[md].opt_len;\n-\t\t  if (strncmp (input, cl_options[md].opt_text, opt_len))\n+\t\t  comp = strncmp (input, cl_options[md].opt_text, opt_len);\n+\t\t  if (comp < 0)\n \t\t    break;\n+\t\t  if (comp > 0)\n+\t\t    continue;\n \t\t  if (input[opt_len] == '\\0')\n \t\t    return md;\n \t\t  if (cl_options[md].flags & lang_mask\n@@ -237,7 +243,7 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n   const char *opt, *arg = 0;\n   char *dup = 0;\n   int value = 1;\n-  int result = 0, temp;\n+  int result = 0;\n   const struct cl_option *option;\n \n   opt = argv[0];\n@@ -320,17 +326,12 @@ handle_option (int argc ATTRIBUTE_UNUSED, char **argv, int lang_mask)\n \t}\n \n       if (option->flags & lang_mask)\n-\t{\n-\t  temp = (*lang_hooks.handle_option) (opt_index, arg, value);\n-\t  if (temp <= 0)\n-\t    result = temp;\n-\t}\n+\tif ((*lang_hooks.handle_option) (opt_index, arg, value) == 0)\n+\t  result = 0;\n \n-      if (result > 0 && (option->flags & CL_COMMON))\n-\t{\n-\t  if (common_handle_option (opt_index, arg, value) == 0)\n-\t    result = 0;\n-\t}\n+      if (result && (option->flags & CL_COMMON))\n+\tif (common_handle_option (opt_index, arg, value) == 0)\n+\t  result = 0;\n     }\n \n  done:\n@@ -520,6 +521,65 @@ common_handle_option (size_t scode, const char *arg,\n       dump_base_name = arg;\n       break;\n \n+    case OPT_falign_functions_:\n+      align_functions = value;\n+      break;\n+\n+    case OPT_falign_jumps_:\n+      align_jumps = value;\n+      break;\n+\n+    case OPT_falign_labels_:\n+      align_labels = value;\n+      break;\n+\n+    case OPT_falign_loops_:\n+      align_loops = value;\n+      break;\n+\n+    case OPT_fcall_used_:\n+      fix_register (arg, 0, 1);\n+      break;\n+\n+    case OPT_fcall_saved_:\n+      fix_register (arg, 0, 0);\n+      break;\n+\n+    case OPT_ffast_math:\n+      set_fast_math_flags (value);\n+      break;\n+\n+    case OPT_ffixed_:\n+      fix_register (arg, 1, 1);\n+      break;\n+\n+    case OPT_fstack_limit_register_:\n+      {\n+\tint reg = decode_reg_name (arg);\n+\tif (reg < 0)\n+\t  error (\"unrecognized register name \\\"%s\\\"\", arg);\n+\telse\n+\t  stack_limit_rtx = gen_rtx_REG (Pmode, reg);\n+      }\n+      break;\n+\n+    case OPT_fstack_limit_symbol_:\n+      stack_limit_rtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (arg));\n+      break;\n+\n+    case OPT_ftls_model_:\n+      if (!strcmp (arg, \"global-dynamic\"))\n+\tflag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n+      else if (!strcmp (arg, \"local-dynamic\"))\n+\tflag_tls_default = TLS_MODEL_LOCAL_DYNAMIC;\n+      else if (!strcmp (arg, \"initial-exec\"))\n+\tflag_tls_default = TLS_MODEL_INITIAL_EXEC;\n+      else if (!strcmp (arg, \"local-exec\"))\n+\tflag_tls_default = TLS_MODEL_LOCAL_EXEC;\n+      else\n+\twarning (\"unknown tls-model \\\"%s\\\"\", arg);\n+      break;\n+\n     case OPT_g:\n       decode_g_option (arg);\n       break;\n@@ -619,3 +679,26 @@ set_Wunused (int setting)\n   warn_unused_variable = setting;\n   warn_unused_value = setting;\n }\n+\n+/* The following routines are useful in setting all the flags that\n+   -ffast-math and -fno-fast-math imply.  */\n+void\n+set_fast_math_flags (int set)\n+{\n+  flag_trapping_math = !set;\n+  flag_unsafe_math_optimizations = set;\n+  flag_finite_math_only = set;\n+  flag_errno_math = !set;\n+  if (set)\n+    flag_signaling_nans = 0;\n+}\n+\n+/* Return true iff flags are set as if -ffast-math.  */\n+bool\n+fast_math_flags_set_p (void)\n+{\n+  return (!flag_trapping_math\n+\t  && flag_unsafe_math_optimizations\n+\t  && flag_finite_math_only\n+\t  && !flag_errno_math);\n+}"}, {"sha": "47845bd7ab1f3a799b11d741c7fda297a9b57453", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 89, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058de654c50a7a0bcea4a6447d163b9d8d2d3cb0/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=058de654c50a7a0bcea4a6447d163b9d8d2d3cb0", "patch": "@@ -1548,30 +1548,6 @@ static const lang_independent_options W_options[] =\n    N_ (\"Warn about code which might break the strict aliasing rules\") }\n };\n \n-/* The following routines are useful in setting all the flags that\n-   -ffast-math and -fno-fast-math imply.  */\n-\n-void\n-set_fast_math_flags (int set)\n-{\n-  flag_trapping_math = !set;\n-  flag_unsafe_math_optimizations = set;\n-  flag_finite_math_only = set;\n-  flag_errno_math = !set;\n-  if (set)\n-    flag_signaling_nans = 0;\n-}\n-\n-/* Return true iff flags are set as if -ffast-math.  */\n-bool\n-fast_math_flags_set_p (void)\n-{\n-  return (!flag_trapping_math\n-\t  && flag_unsafe_math_optimizations\n-\t  && flag_finite_math_only\n-\t  && !flag_errno_math);\n-}\n-\n /* Output files for assembler code (real compiler output)\n    and debugging dumps.  */\n \n@@ -4197,11 +4173,7 @@ decode_f_option (const char *arg)\n \t}\n     }\n \n-  if (!strcmp (arg, \"fast-math\"))\n-    set_fast_math_flags (1);\n-  else if (!strcmp (arg, \"no-fast-math\"))\n-    set_fast_math_flags (0);\n-  else if ((option_value = skip_leading_substring (arg, \"inline-limit-\"))\n+  if ((option_value = skip_leading_substring (arg, \"inline-limit-\"))\n \t   || (option_value = skip_leading_substring (arg, \"inline-limit=\")))\n     {\n       int val =\n@@ -4219,55 +4191,10 @@ decode_f_option (const char *arg)\n \t    set_param_value (\"min-inline-insns\", 10);\n \t}\n     }\n-  else if ((option_value = skip_leading_substring (arg, \"tls-model=\")))\n-    {\n-      if (strcmp (option_value, \"global-dynamic\") == 0)\n-\tflag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n-      else if (strcmp (option_value, \"local-dynamic\") == 0)\n-\tflag_tls_default = TLS_MODEL_LOCAL_DYNAMIC;\n-      else if (strcmp (option_value, \"initial-exec\") == 0)\n-\tflag_tls_default = TLS_MODEL_INITIAL_EXEC;\n-      else if (strcmp (option_value, \"local-exec\") == 0)\n-\tflag_tls_default = TLS_MODEL_LOCAL_EXEC;\n-      else\n-\twarning (\"`%s': unknown tls-model option\", arg - 2);\n-    }\n #ifdef INSN_SCHEDULING\n   else if ((option_value = skip_leading_substring (arg, \"sched-verbose=\")))\n     fix_sched_param (\"verbose\", option_value);\n #endif\n-  else if ((option_value = skip_leading_substring (arg, \"fixed-\")))\n-    fix_register (option_value, 1, 1);\n-  else if ((option_value = skip_leading_substring (arg, \"call-used-\")))\n-    fix_register (option_value, 0, 1);\n-  else if ((option_value = skip_leading_substring (arg, \"call-saved-\")))\n-    fix_register (option_value, 0, 0);\n-  else if ((option_value = skip_leading_substring (arg, \"align-loops=\")))\n-    align_loops = read_integral_parameter (option_value, arg - 2, align_loops);\n-  else if ((option_value = skip_leading_substring (arg, \"align-functions=\")))\n-    align_functions\n-      = read_integral_parameter (option_value, arg - 2, align_functions);\n-  else if ((option_value = skip_leading_substring (arg, \"align-jumps=\")))\n-    align_jumps = read_integral_parameter (option_value, arg - 2, align_jumps);\n-  else if ((option_value = skip_leading_substring (arg, \"align-labels=\")))\n-    align_labels\n-      = read_integral_parameter (option_value, arg - 2, align_labels);\n-  else if ((option_value\n-\t    = skip_leading_substring (arg, \"stack-limit-register=\")))\n-    {\n-      int reg = decode_reg_name (option_value);\n-      if (reg < 0)\n-\terror (\"unrecognized register name `%s'\", option_value);\n-      else\n-\tstack_limit_rtx = gen_rtx_REG (Pmode, reg);\n-    }\n-  else if ((option_value\n-\t    = skip_leading_substring (arg, \"stack-limit-symbol=\")))\n-    {\n-      const char *nm;\n-      nm = ggc_strdup (option_value);\n-      stack_limit_rtx = gen_rtx_SYMBOL_REF (Pmode, nm);\n-    }\n   else if ((option_value\n \t    = skip_leading_substring (arg, \"message-length=\")))\n     output_set_maximum_length\n@@ -4896,25 +4823,16 @@ parse_options_and_default_flags (int argc, char **argv)\n   /* Perform normal command line switch decoding.  */\n   for (i = 1; i < argc;)\n     {\n-      int lang_processed;\n-      int indep_processed;\n+      int processed;\n \n       /* Give the language a chance to decode the option for itself.  */\n-      lang_processed = handle_option (argc - i, argv + i, lang_mask);\n+      processed = handle_option (argc - i, argv + i, lang_mask);\n \n-      if (lang_processed >= 0)\n-\t/* Now see if the option also has a language independent meaning.\n-\t   Some options are both language specific and language independent,\n-\t   eg --help.  */\n-\tindep_processed = independent_decode_option (argv + i);\n-      else\n-\t{\n-\t  lang_processed = -lang_processed;\n-\t  indep_processed = 0;\n-\t}\n+      if (!processed)\n+\tprocessed = independent_decode_option (argv + i);\n \n-      if (lang_processed || indep_processed)\n-\ti += MAX (lang_processed, indep_processed);\n+      if (processed)\n+\ti += processed;\n       else\n \t{\n \t  const char *option = NULL;"}]}