{"sha": "cac6691c1375ea292e430d2c5780ebd3372f5f66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FjNjY5MWMxMzc1ZWEyOTJlNDMwZDJjNTc4MGViZDMzNzJmNWY2Ng==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2018-11-16T23:53:30Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2018-11-16T23:53:30Z"}, "message": "re PR target/87927 (ICE: segmentation fault with patchable_function_entry attribute for msp430-elf -mlarge)\n\n2018-11-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\tPR target/87927\n\t* target-def.h: Initialize TARGET_ASM_{,UN}ALIGNED_P{S,D,T}I_OP.\n\tAdd them to the TARGET_ASM_{,UN}ALIGNED_INT_OP structs.\n\t* target.def: Enumerate TARGET_ASM_{,UN}ALIGNED_P{S,D,T}I_OP in\n\tthe byte_op hook.\n\t* target.h: Add psi, pdi, pti to struct asm_int_op definition.\n\t* targhooks.c (default_print_patchable_function_entry): Assert\n\tasm_int_op does not return a NULL string.\n\t* varasm.c (integer_asm_op): Return the op for a partial int type\n\twhen the requested size does not correspond to an integer type.\n\t* config/msp430/msp430.c: Initialize TARGET_ASM_{,UN}ALIGNED_PSI_OP.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r266226", "tree": {"sha": "26e6b0d4664cd6bc308e5010c9c81781e26aaebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26e6b0d4664cd6bc308e5010c9c81781e26aaebe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cac6691c1375ea292e430d2c5780ebd3372f5f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac6691c1375ea292e430d2c5780ebd3372f5f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cac6691c1375ea292e430d2c5780ebd3372f5f66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac6691c1375ea292e430d2c5780ebd3372f5f66/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8808260dfd1f7f25e7464bcf8006235677830672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8808260dfd1f7f25e7464bcf8006235677830672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8808260dfd1f7f25e7464bcf8006235677830672"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "43b854451cc0cf43d7f00d279874bb5a17df32fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cac6691c1375ea292e430d2c5780ebd3372f5f66", "patch": "@@ -1,3 +1,18 @@\n+2018-11-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\tPR target/87927\n+\t* target-def.h: Initialize TARGET_ASM_{,UN}ALIGNED_P{S,D,T}I_OP.\n+\tAdd them to the TARGET_ASM_{,UN}ALIGNED_INT_OP structs.\n+\t* target.def: Enumerate TARGET_ASM_{,UN}ALIGNED_P{S,D,T}I_OP in\n+\tthe byte_op hook.\n+\t* target.h: Add psi, pdi, pti to struct asm_int_op definition.\n+\t* targhooks.c (default_print_patchable_function_entry): Assert\n+\tasm_int_op does not return a NULL string.\n+\t* varasm.c (integer_asm_op): Return the op for a partial int type\n+\twhen the requested size does not correspond to an integer type.\n+\t* config/msp430/msp430.c: Initialize TARGET_ASM_{,UN}ALIGNED_PSI_OP.\n+\t* doc/tm.texi: Regenerate.\n+\n 2018-11-12  Jason Merrill  <jason@redhat.com>\n \n \t* gimplify.c (gimplify_case_label_expr): Handle hot/cold attributes."}, {"sha": "3a41cc011e7516f25f244bb724cfb7fd800b81b3", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=cac6691c1375ea292e430d2c5780ebd3372f5f66", "patch": "@@ -3469,6 +3469,11 @@ msp430_print_operand_raw (FILE * file, rtx op)\n     }\n }\n \n+#undef  TARGET_ASM_ALIGNED_PSI_OP\n+#define TARGET_ASM_ALIGNED_PSI_OP \"\\t.long\\t\"\n+#undef  TARGET_ASM_UNALIGNED_PSI_OP\n+#define TARGET_ASM_UNALIGNED_PSI_OP TARGET_ASM_ALIGNED_PSI_OP\n+\n #undef  TARGET_PRINT_OPERAND_ADDRESS\n #define TARGET_PRINT_OPERAND_ADDRESS\tmsp430_print_operand_addr\n "}, {"sha": "e348f0a7da6fad46033d951273b135295a5a89a3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=cac6691c1375ea292e430d2c5780ebd3372f5f66", "patch": "@@ -8036,12 +8036,18 @@ hook.\n \n @deftypevr {Target Hook} {const char *} TARGET_ASM_BYTE_OP\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_HI_OP\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_PSI_OP\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_SI_OP\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_PDI_OP\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_DI_OP\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_PTI_OP\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_TI_OP\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_HI_OP\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_PSI_OP\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_SI_OP\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_PDI_OP\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_DI_OP\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_PTI_OP\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_TI_OP\n These hooks specify assembly directives for creating certain kinds\n of integer object.  The @code{TARGET_ASM_BYTE_OP} directive creates a"}, {"sha": "fb968e666169db47aa200f2f0a2c1799e690cf4a", "filename": "gcc/target-def.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=cac6691c1375ea292e430d2c5780ebd3372f5f66", "patch": "@@ -47,6 +47,15 @@\n #define TARGET_ASM_UNALIGNED_TI_OP NULL\n #endif /* OBJECT_FORMAT_ELF */\n \n+/* There is no standard way to handle P{S,D,T}Imode, targets must implement them\n+   if required.  */\n+#define TARGET_ASM_ALIGNED_PSI_OP NULL\n+#define TARGET_ASM_UNALIGNED_PSI_OP NULL\n+#define TARGET_ASM_ALIGNED_PDI_OP NULL\n+#define TARGET_ASM_UNALIGNED_PDI_OP NULL\n+#define TARGET_ASM_ALIGNED_PTI_OP NULL\n+#define TARGET_ASM_UNALIGNED_PTI_OP NULL\n+\n #if !defined(TARGET_ASM_CONSTRUCTOR) && !defined(USE_COLLECT2)\n # ifdef CTORS_SECTION_ASM_OP\n #  define TARGET_ASM_CONSTRUCTOR default_ctor_section_asm_out_constructor\n@@ -89,14 +98,20 @@\n \n #define TARGET_ASM_ALIGNED_INT_OP\t\t\t\t\\\n \t\t       {TARGET_ASM_ALIGNED_HI_OP,\t\t\\\n+\t\t\tTARGET_ASM_ALIGNED_PSI_OP,\t\t\\\n \t\t\tTARGET_ASM_ALIGNED_SI_OP,\t\t\\\n+\t\t\tTARGET_ASM_ALIGNED_PDI_OP,\t\t\\\n \t\t\tTARGET_ASM_ALIGNED_DI_OP,\t\t\\\n+\t\t\tTARGET_ASM_ALIGNED_PTI_OP,\t\t\\\n \t\t\tTARGET_ASM_ALIGNED_TI_OP}\n \n #define TARGET_ASM_UNALIGNED_INT_OP\t\t\t\t\\\n \t\t       {TARGET_ASM_UNALIGNED_HI_OP,\t\t\\\n+\t\t\tTARGET_ASM_UNALIGNED_PSI_OP,\t\t\\\n \t\t\tTARGET_ASM_UNALIGNED_SI_OP,\t\t\\\n+\t\t\tTARGET_ASM_UNALIGNED_PDI_OP,\t\t\\\n \t\t\tTARGET_ASM_UNALIGNED_DI_OP,\t\t\\\n+\t\t\tTARGET_ASM_UNALIGNED_PTI_OP,\t\t\\\n \t\t\tTARGET_ASM_UNALIGNED_TI_OP}\n \n #if !defined (TARGET_FUNCTION_INCOMING_ARG)"}, {"sha": "96f37e0462bc7d8c63769abfded19da5f67a136e", "filename": "gcc/target.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=cac6691c1375ea292e430d2c5780ebd3372f5f66", "patch": "@@ -45,12 +45,18 @@ DEFHOOKPODX (close_paren, const char *, \")\")\n DEFHOOKPOD\n (byte_op,\n  \"@deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_HI_OP\\n\\\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_PSI_OP\\n\\\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_SI_OP\\n\\\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_PDI_OP\\n\\\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_DI_OP\\n\\\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_PTI_OP\\n\\\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_ALIGNED_TI_OP\\n\\\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_HI_OP\\n\\\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_PSI_OP\\n\\\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_SI_OP\\n\\\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_PDI_OP\\n\\\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_DI_OP\\n\\\n+@deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_PTI_OP\\n\\\n @deftypevrx {Target Hook} {const char *} TARGET_ASM_UNALIGNED_TI_OP\\n\\\n These hooks specify assembly directives for creating certain kinds\\n\\\n of integer object.  The @code{TARGET_ASM_BYTE_OP} directive creates a\\n\\"}, {"sha": "663926b0896a99d98ae411e65dd6c66d1c096071", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=cac6691c1375ea292e430d2c5780ebd3372f5f66", "patch": "@@ -158,8 +158,11 @@ extern bool stmt_in_inner_loop_p (struct _stmt_vec_info *);\n struct asm_int_op\n {\n   const char *hi;\n+  const char *psi;\n   const char *si;\n+  const char *pdi;\n   const char *di;\n+  const char *pti;\n   const char *ti;\n };\n "}, {"sha": "41ccffe86451d5eb3959dcf9c118b619278d3222", "filename": "gcc/targhooks.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=cac6691c1375ea292e430d2c5780ebd3372f5f66", "patch": "@@ -1807,13 +1807,15 @@ default_print_patchable_function_entry (FILE *file,\n       char buf[256];\n       static int patch_area_number;\n       section *previous_section = in_section;\n+      const char *asm_op = integer_asm_op (POINTER_SIZE_UNITS, false);\n \n+      gcc_assert (asm_op != NULL);\n       patch_area_number++;\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LPFE\", patch_area_number);\n \n       switch_to_section (get_section (\"__patchable_function_entries\",\n \t\t\t\t      0, NULL));\n-      fputs (integer_asm_op (POINTER_SIZE_UNITS, false), file);\n+      fputs (asm_op, file);\n       assemble_name_raw (file, buf);\n       fputc ('\\n', file);\n "}, {"sha": "243d205c1f5e9d95c221f807be6c23f96261b16f", "filename": "gcc/varasm.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cac6691c1375ea292e430d2c5780ebd3372f5f66/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=cac6691c1375ea292e430d2c5780ebd3372f5f66", "patch": "@@ -2733,10 +2733,24 @@ integer_asm_op (int size, int aligned_p)\n       return targetm.asm_out.byte_op;\n     case 2:\n       return ops->hi;\n+    case 3:\n+      return ops->psi;\n     case 4:\n       return ops->si;\n+    case 5:\n+    case 6:\n+    case 7:\n+      return ops->pdi;\n     case 8:\n       return ops->di;\n+    case 9:\n+    case 10:\n+    case 11:\n+    case 12:\n+    case 13:\n+    case 14:\n+    case 15:\n+      return ops->pti;\n     case 16:\n       return ops->ti;\n     default:"}]}