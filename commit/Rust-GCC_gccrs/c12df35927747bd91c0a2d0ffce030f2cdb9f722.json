{"sha": "c12df35927747bd91c0a2d0ffce030f2cdb9f722", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEyZGYzNTkyNzc0N2JkOTFjMGEyZDBmZmNlMDMwZjJjZGI5ZjcyMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-10-06T21:24:17Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-10-06T21:24:17Z"}, "message": "compiler: Record each import as a distinct alias.\n\n    \n    This patch introduces the Package_alias class which is a\n    finer representation of the different between a package and the\n    aliases it is imported under.  Each alias keeps track of the location\n    of its import statement and how many times that alias has been used.\n    This allows the gofrontend to report when a specific import has not\n    been used even if a symbol from the package has been used by another\n    import.\n    \n    Fixes golang/go#12326.\n    \n    Reviewed-on: https://go-review.googlesource.com/14259\n\nFrom-SVN: r228550", "tree": {"sha": "cc6ac014c96105160ab6f60ebc7049572c39490a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc6ac014c96105160ab6f60ebc7049572c39490a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c12df35927747bd91c0a2d0ffce030f2cdb9f722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12df35927747bd91c0a2d0ffce030f2cdb9f722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c12df35927747bd91c0a2d0ffce030f2cdb9f722", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12df35927747bd91c0a2d0ffce030f2cdb9f722/comments", "author": null, "committer": null, "parents": [{"sha": "ce9f2dc532f64c01d284ac34ff3ed8f8f49220c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9f2dc532f64c01d284ac34ff3ed8f8f49220c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9f2dc532f64c01d284ac34ff3ed8f8f49220c5"}], "stats": {"total": 208, "additions": 129, "deletions": 79}, "files": [{"sha": "d5d16968004727c0956eee8fbebde5ee9ff72849", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c12df35927747bd91c0a2d0ffce030f2cdb9f722", "patch": "@@ -1,4 +1,4 @@\n-d8150af96de991fb79b1bf65ae982a860552c492\n+3039d79149901d25d89c2412bdd8684f3cbcd09e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "363fd5cff18406f774c828d308c87ae9fadc9d7d", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 73, "deletions": 24, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=c12df35927747bd91c0a2d0ffce030f2cdb9f722", "patch": "@@ -516,7 +516,6 @@ Gogo::import_package(const std::string& filename,\n     {\n       Package* package = p->second;\n       package->set_location(location);\n-      package->set_is_imported();\n       std::string ln = local_name;\n       bool is_ln_exported = is_local_name_exported;\n       if (ln.empty())\n@@ -525,19 +524,22 @@ Gogo::import_package(const std::string& filename,\n \t  go_assert(!ln.empty());\n \t  is_ln_exported = Lex::is_exported_name(ln);\n \t}\n-      if (ln == \".\")\n+      if (ln == \"_\")\n+        ;\n+      else if (ln == \".\")\n \t{\n \t  Bindings* bindings = package->bindings();\n \t  for (Bindings::const_declarations_iterator p =\n \t\t bindings->begin_declarations();\n \t       p != bindings->end_declarations();\n \t       ++p)\n \t    this->add_dot_import_object(p->second);\n+          std::string dot_alias = \".\" + package->package_name();\n+          package->add_alias(dot_alias, location);\n \t}\n-      else if (ln == \"_\")\n-\tpackage->set_uses_sink_alias();\n       else\n \t{\n+          package->add_alias(ln, location);\n \t  ln = this->pack_hidden_name(ln, is_ln_exported);\n \t  this->package_->bindings()->add_package(ln, package);\n \t}\n@@ -563,7 +565,6 @@ Gogo::import_package(const std::string& filename,\n \t\t  \"being compiled (see -fgo-pkgpath option)\"));\n \n       this->imports_.insert(std::make_pair(filename, package));\n-      package->set_is_imported();\n     }\n \n   delete stream;\n@@ -1544,7 +1545,10 @@ Gogo::lookup(const std::string& name, Named_object** pfunction) const\n       if (ret != NULL)\n \t{\n \t  if (ret->package() != NULL)\n-\t    ret->package()->note_usage();\n+            {\n+              std::string dot_alias = \".\" + ret->package()->package_name();\n+              ret->package()->note_usage(dot_alias);\n+            }\n \t  return ret;\n \t}\n     }\n@@ -1594,10 +1598,14 @@ Gogo::add_imported_package(const std::string& real_name,\n \n   *padd_to_globals = false;\n \n-  if (alias_arg == \".\")\n-    *padd_to_globals = true;\n-  else if (alias_arg == \"_\")\n-    ret->set_uses_sink_alias();\n+  if (alias_arg == \"_\")\n+    ;\n+  else if (alias_arg == \".\")\n+    {\n+      *padd_to_globals = true;\n+      std::string dot_alias = \".\" + real_name;\n+      ret->add_alias(dot_alias, location);\n+    }\n   else\n     {\n       std::string alias = alias_arg;\n@@ -1606,6 +1614,7 @@ Gogo::add_imported_package(const std::string& real_name,\n \t  alias = real_name;\n \t  is_alias_exported = Lex::is_exported_name(alias);\n \t}\n+      ret->add_alias(alias, location);\n       alias = this->pack_hidden_name(alias, is_alias_exported);\n       Named_object* no = this->package_->bindings()->add_package(alias, ret);\n       if (!no->is_package())\n@@ -2356,15 +2365,30 @@ Gogo::clear_file_scope()\n        ++p)\n     {\n       Package* package = p->second;\n-      if (package != this->package_\n-\t  && package->is_imported()\n-\t  && !package->used()\n-\t  && !package->uses_sink_alias()\n-\t  && !quiet)\n-\terror_at(package->location(), \"imported and not used: %s\",\n-\t\t Gogo::message_name(package->package_name()).c_str());\n-      package->clear_is_imported();\n-      package->clear_uses_sink_alias();\n+      if (package != this->package_ && !quiet)\n+        {\n+          for (Package::Aliases::const_iterator p1 = package->aliases().begin();\n+               p1 != package->aliases().end();\n+               ++p1)\n+            {\n+              if (!p1->second->used())\n+                {\n+                  // Give a more refined error message if the alias name is known.\n+                  std::string pkg_name = package->package_name();\n+                  if (p1->first != pkg_name && p1->first[0] != '.')\n+                    {\n+                      error_at(p1->second->location(),\n+                               \"imported and not used: %s as %s\",\n+                               Gogo::message_name(pkg_name).c_str(),\n+                               Gogo::message_name(p1->first).c_str());\n+                    }\n+                  else\n+                    error_at(p1->second->location(),\n+                             \"imported and not used: %s\",\n+                             Gogo::message_name(pkg_name).c_str());\n+                }\n+            }\n+        }\n       package->clear_used();\n     }\n }\n@@ -7741,8 +7765,7 @@ Package::Package(const std::string& pkgpath,\n \t\t const std::string& pkgpath_symbol, Location location)\n   : pkgpath_(pkgpath), pkgpath_symbol_(pkgpath_symbol),\n     package_name_(), bindings_(new Bindings(NULL)), priority_(0),\n-    location_(location), used_(false), is_imported_(false),\n-    uses_sink_alias_(false)\n+    location_(location)\n {\n   go_assert(!pkgpath.empty());\n   \n@@ -7796,6 +7819,16 @@ Package::set_priority(int priority)\n     this->priority_ = priority;\n }\n \n+// Note that symbol from this package was and qualified by ALIAS.\n+\n+void\n+Package::note_usage(const std::string& alias) const\n+{\n+  Aliases::const_iterator p = this->aliases_.find(alias);\n+  go_assert(p != this->aliases_.end());\n+  p->second->note_usage();\n+}\n+\n // Forget a given usage.  If forgetting this usage means this package becomes\n // unused, report that error.\n \n@@ -7811,7 +7844,7 @@ Package::forget_usage(Expression* usage) const\n \n   if (this->fake_uses_.empty())\n     error_at(this->location(), \"imported and not used: %s\",\n-\t     Gogo::message_name(this->package_name()).c_str());\n+             Gogo::message_name(this->package_name()).c_str());\n }\n \n // Clear the used field for the next file.  If the only usages of this package\n@@ -7820,10 +7853,26 @@ Package::forget_usage(Expression* usage) const\n void\n Package::clear_used()\n {\n-  if (this->used_ > this->fake_uses_.size())\n+  std::string dot_alias = \".\" + this->package_name();\n+  Aliases::const_iterator p = this->aliases_.find(dot_alias);\n+  if (p != this->aliases_.end() && p->second->used() > this->fake_uses_.size())\n     this->fake_uses_.clear();\n \n-  this->used_ = 0;\n+  this->aliases_.clear();\n+}\n+\n+Package_alias*\n+Package::add_alias(const std::string& alias, Location location)\n+{\n+  Aliases::const_iterator p = this->aliases_.find(alias);\n+  if (p == this->aliases_.end())\n+    {\n+      std::pair<Aliases::iterator, bool> ret;\n+      ret = this->aliases_.insert(std::make_pair(alias,\n+                                                 new Package_alias(location)));\n+      p = ret.first;\n+    }\n+  return p->second;\n }\n \n // Determine types of constants.  Everything else in a package"}, {"sha": "6333c834c3581172327347aaf6a5eb99401bdb27", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 50, "deletions": 47, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=c12df35927747bd91c0a2d0ffce030f2cdb9f722", "patch": "@@ -2771,6 +2771,37 @@ class Unnamed_label\n   Blabel* blabel_;\n };\n \n+// An alias for an imported package.\n+\n+class Package_alias\n+{\n+ public:\n+  Package_alias(Location location)\n+      : location_(location), used_(0)\n+  { }\n+\n+  // The location of the import statement.\n+  Location\n+  location()\n+  { return this->location_; }\n+\n+  // How many symbols from the package were used under this alias.\n+  size_t\n+  used() const\n+  { return this->used_; }\n+\n+  // Note that some symbol was used under this alias.\n+  void\n+  note_usage()\n+  { this->used_++; }\n+\n+ private:\n+  // The location of the import statement.\n+  Location location_;\n+  // The amount of times some name from this package was used under this alias.\n+  size_t used_;\n+};\n+\n // An imported package.\n \n class Package\n@@ -2793,7 +2824,7 @@ class Package\n   void\n   set_pkgpath_symbol(const std::string&);\n \n-  // Return the location of the import statement.\n+  // Return the location of the most recent import statement.\n   Location\n   location() const\n   { return this->location_; }\n@@ -2829,15 +2860,18 @@ class Package\n   bindings()\n   { return this->bindings_; }\n \n-  // Whether some symbol from the package was used.\n-  bool\n-  used() const\n-  { return this->used_ > 0; }\n+  // Type used to map import names to package aliases.\n+  typedef std::map<std::string, Package_alias*> Aliases;\n \n-  // Note that some symbol from this package was used.\n+  // Return the set of package aliases.\n+  const Aliases&\n+  aliases() const\n+  { return this->aliases_; }\n+\n+  // Note that some symbol from this package was used and qualified by ALIAS.\n+  // For dot imports, the ALIAS should be \".PACKAGE_NAME\".\n   void\n-  note_usage() const\n-  { this->used_++; }\n+  note_usage(const std::string& alias) const;\n \n   // Note that USAGE might be a fake usage of this package.\n   void\n@@ -2852,36 +2886,6 @@ class Package\n   void\n   clear_used();\n \n-  // Whether this package was imported in the current file.\n-  bool\n-  is_imported() const\n-  { return this->is_imported_; }\n-\n-  // Note that this package was imported in the current file.\n-  void\n-  set_is_imported()\n-  { this->is_imported_ = true; }\n-\n-  // Clear the imported field for the next file.\n-  void\n-  clear_is_imported()\n-  { this->is_imported_ = false; }\n-\n-  // Whether this package was imported with a name of \"_\".\n-  bool\n-  uses_sink_alias() const\n-  { return this->uses_sink_alias_; }\n-\n-  // Note that this package was imported with a name of \"_\".\n-  void\n-  set_uses_sink_alias()\n-  { this->uses_sink_alias_ = true; }\n-\n-  // Clear the sink alias field for the next file.\n-  void\n-  clear_uses_sink_alias()\n-  { this->uses_sink_alias_ = false; }\n-\n   // Look up a name in the package.  Returns NULL if the name is not\n   // found.\n   Named_object*\n@@ -2898,6 +2902,10 @@ class Package\n   set_location(Location location)\n   { this->location_ = location; }\n \n+  // Add a package name as an ALIAS for this package.\n+  Package_alias*\n+  add_alias(const std::string& alias, Location);\n+\n   // Add a constant to the package.\n   Named_object*\n   add_constant(const Typed_identifier& tid, Expression* expr)\n@@ -2942,18 +2950,13 @@ class Package\n   // than the priority of all of the packages that it imports.  This\n   // is used to run init functions in the right order.\n   int priority_;\n-  // The location of the import statement.\n+  // The location of the most recent import statement.\n   Location location_;\n-  // The amount of times some name from this package was used.  This is mutable\n-  // because we can use a package even if we have a const pointer to it.\n-  mutable size_t used_;\n-  // A set of possibly fake uses of this package.  This is mutable because we\n+  // The set of aliases associated with this package.\n+  Aliases aliases_;\n+  // A set of possibly fake uses of this package. This is mutable because we\n   // can track fake uses of a package even if we have a const pointer to it.\n   mutable std::set<Expression*> fake_uses_;\n-  // True if this package was imported in the current file.\n-  bool is_imported_;\n-  // True if this package was imported with a name of \"_\".\n-  bool uses_sink_alias_;\n };\n \n // Return codes for the traversal functions.  This is not an enum"}, {"sha": "9d6a8c6f4a646582bd1b630342cd6331ae49a41b", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=c12df35927747bd91c0a2d0ffce030f2cdb9f722", "patch": "@@ -198,7 +198,7 @@ Parse::qualified_ident(std::string* pname, Named_object** ppackage)\n       return false;\n     }\n \n-  package->package_value()->note_usage();\n+  package->package_value()->note_usage(Gogo::unpack_hidden_name(name));\n \n   token = this->advance_token();\n   if (!token->is_identifier())\n@@ -2430,7 +2430,7 @@ Parse::operand(bool may_be_sink, bool* is_parenthesized)\n \t\treturn Expression::make_error(location);\n \t      }\n \t    package = named_object->package_value();\n-\t    package->note_usage();\n+\t    package->note_usage(id);\n \t    id = this->peek_token()->identifier();\n \t    is_exported = this->peek_token()->is_identifier_exported();\n \t    packed = this->gogo_->pack_hidden_name(id, is_exported);"}, {"sha": "9ed5b9d0d3ca3e6956caa8c1e99ce8440d30f7c1", "filename": "gcc/go/gofrontend/unsafe.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Funsafe.cc?ref=c12df35927747bd91c0a2d0ffce030f2cdb9f722", "patch": "@@ -32,8 +32,6 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n     }\n \n   package->set_location(location);\n-  package->set_is_imported();\n-\n   this->imports_.insert(std::make_pair(\"unsafe\", package));\n \n   Bindings* bindings = package->bindings();"}, {"sha": "d115eacdd56420d852786e6f52411a8adea17e3c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5957.dir/c.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5957.dir%2Fc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5957.dir%2Fc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5957.dir%2Fc.go?ref=c12df35927747bd91c0a2d0ffce030f2cdb9f722", "patch": "@@ -2,7 +2,7 @@ package p\n \n import (\n \t\"./a\" // ERROR \"imported and not used: \\x22a\\x22 as surprise|imported and not used: surprise\"\n-\t\"./b\" // GC_ERROR \"imported and not used: \\x22b\\x22 as surprise2|imported and not used: surprise2\"\n+\t\"./b\" // ERROR \"imported and not used: \\x22b\\x22 as surprise2|imported and not used: surprise2\"\n \tb \"./b\" // ERROR \"imported and not used: \\x22b\\x22$|imported and not used: surprise2\"\n \tfoo \"math\" // ERROR \"imported and not used: \\x22math\\x22 as foo|imported and not used: math\"\n \t\"fmt\" // actually used"}, {"sha": "b9f973f1724be3ee3bc393d6d2e999ea58ebdefd", "filename": "gcc/testsuite/go.test/test/import4.dir/import4.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.dir%2Fimport4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c12df35927747bd91c0a2d0ffce030f2cdb9f722/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.dir%2Fimport4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.dir%2Fimport4.go?ref=c12df35927747bd91c0a2d0ffce030f2cdb9f722", "patch": "@@ -18,7 +18,7 @@ import X \"math\"\t// ERROR \"imported and not used.*math\"\n import . \"bufio\"\t// ERROR \"imported and not used.*bufio\"\n \n // again, package without anything in it\n-import \"./empty\"\t// GC_ERROR \"imported and not used.*empty\"\n-import Z \"./empty\"\t// GC_ERROR \"imported and not used.*empty\"\n+import \"./empty\"\t// ERROR \"imported and not used.*empty\"\n+import Z \"./empty\"\t// ERROR \"imported and not used.*empty\"\n import . \"./empty\"\t// ERROR \"imported and not used.*empty\"\n "}]}