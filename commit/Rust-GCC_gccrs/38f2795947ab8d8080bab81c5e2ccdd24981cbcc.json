{"sha": "38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhmMjc5NTk0N2FiOGQ4MDgwYmFiODFjNWUyY2NkZDI0OTgxY2JjYw==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-09T13:22:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-09T13:22:33Z"}, "message": "Merge #639\n\n639: External module expansion r=philberty a=CohenArthur\n\nNeeds #638 \r\n\r\nThis PR parses the file associated with an external module and allows their compilation. The two test cases are not currently passing, and the locations will be inexact (the filename for the parsed module will just show as random characters), so the PR is still a draft.\n\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>", "tree": {"sha": "ccb4cab2678bc6e7ac50b4549e48481bc35da9ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccb4cab2678bc6e7ac50b4549e48481bc35da9ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhOgqZCRBK7hj4Ov3rIwAAs/MIAJWmxU/cCERHZRADnRvyQuig\nTL33+1v4gTNbtEfmD2aKS5s4/jVFMvo3neooWFrFGF9LwRln3o3gzCmzRAXLEf31\ncTVytkd7JyckVq7iz0IWdc2F2hnHACx/rjLdzF4P3yGVsTP3BCse8fYeV4vdrvVn\n6Wcaa7tS3t9cJ6WRJA3x/h8Qg7q7JKd8fE23EN+KTPdq0O5GNlDIjddIuP9u3qD1\n3Fu8zKrqNMUbBK2xAP1a7LZxb/uLarxJIsYB6v3E4JhgEzowEQB8ITCpcTi7Byv7\nGfUM39cid8p/eNx/DsgyimIPG8SBzB2h2QThrDlcBQZh5TthAK5QZXvP/gjNO1Y=\n=87oR\n-----END PGP SIGNATURE-----\n", "payload": "tree ccb4cab2678bc6e7ac50b4549e48481bc35da9ae\nparent 4c4241b4c8da925b7f39e0045d3d36fbf71551f8\nparent 8cd6306905b31a0fb92f95e8472c6a8e26a17b04\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631193753 +0000\ncommitter GitHub <noreply@github.com> 1631193753 +0000\n\nMerge #639\n\n639: External module expansion r=philberty a=CohenArthur\n\nNeeds #638 \r\n\r\nThis PR parses the file associated with an external module and allows their compilation. The two test cases are not currently passing, and the locations will be inexact (the filename for the parsed module will just show as random characters), so the PR is still a draft.\n\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c4241b4c8da925b7f39e0045d3d36fbf71551f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4241b4c8da925b7f39e0045d3d36fbf71551f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4241b4c8da925b7f39e0045d3d36fbf71551f8"}, {"sha": "8cd6306905b31a0fb92f95e8472c6a8e26a17b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd6306905b31a0fb92f95e8472c6a8e26a17b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd6306905b31a0fb92f95e8472c6a8e26a17b04"}], "stats": {"total": 129, "additions": 103, "deletions": 26}, "files": [{"sha": "9b11498e2af58c13b381e4953eff197dab2dd60a", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "patch": "@@ -24,6 +24,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rust-diagnostics.h\"\n #include \"rust-ast-visitor.h\"\n #include \"rust-session-manager.h\"\n+#include \"rust-lex.h\"\n+#include \"rust-parse.h\"\n #include \"operator.h\"\n \n /* Compilation unit used for various AST-related functions that would make\n@@ -4023,14 +4025,15 @@ filename_from_path_attribute (std::vector<Attribute> &outer_attrs)\n   return path_attr.get_attr_input ().as_string ();\n }\n \n-std::string\n-Module::get_filename ()\n+void\n+Module::process_file_path ()\n {\n   rust_assert (kind == Module::ModuleKind::UNLOADED);\n+  rust_assert (module_file.empty ());\n \n   auto path_string = filename_from_path_attribute (get_outer_attrs ());\n   if (!path_string.empty ())\n-    return path_string;\n+    return;\n \n   // This corresponds to the path of the file 'including' the module. So the\n   // file that contains the 'mod <file>;' directive\n@@ -4076,8 +4079,42 @@ Module::get_filename ()\n     rust_error_at (locus, \"no candidate found for module %s\",\n \t\t   module_name.c_str ());\n \n-  return file_mod_found ? expected_file_path\n-\t\t\t: current_directory_name + expected_dir_path;\n+  module_file = file_mod_found ? expected_file_path\n+\t\t\t       : current_directory_name + expected_dir_path;\n+}\n+\n+void\n+Module::load_items ()\n+{\n+  process_file_path ();\n+\n+  // We will already have errored out appropriately in the process_file_path ()\n+  // method\n+  if (module_file.empty ())\n+    return;\n+\n+  RAIIFile file_wrap (module_file.c_str ());\n+  Linemap *linemap = Session::get_instance ().linemap;\n+\n+  if (file_wrap.get_raw () == nullptr)\n+    {\n+      rust_error_at (Location (), \"cannot open module file %s: %m\",\n+\t\t     module_file.c_str ());\n+      return;\n+    }\n+\n+  rust_debug (\"Attempting to parse file %s\", module_file.c_str ());\n+\n+  Lexer lex (module_file.c_str (), std::move (file_wrap), linemap);\n+  Parser<Lexer> parser (std::move (lex));\n+\n+  auto parsed_items = parser.parse_items ();\n+\n+  for (const auto &error : parser.get_errors ())\n+    error.emit_error ();\n+\n+  items = std::move (parsed_items);\n+  kind = ModuleKind::LOADED;\n }\n \n void"}, {"sha": "7a34144f0d37b6f833faeb3009bc46f33bfa54ae", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "patch": "@@ -982,6 +982,10 @@ class Module : public VisItem\n   // bool has_items;\n   std::vector<std::unique_ptr<Item>> items;\n \n+  // Filename the module refers to. Empty string on LOADED modules or if an\n+  // error occured when dealing with UNLOADED modules\n+  std::string module_file;\n+\n   void clone_items (const std::vector<std::unique_ptr<Item>> &other_items)\n   {\n     items.reserve (other_items.size ());\n@@ -1051,8 +1055,11 @@ class Module : public VisItem\n     return *this;\n   }\n \n-  // Search for the filename associated with an external module\n-  std::string get_filename ();\n+  // Search for the filename associated with an external module, storing it in\n+  // module_file\n+  void process_file_path ();\n+  // Load the items contained in an external module\n+  void load_items ();\n \n   void accept_vis (ASTVisitor &vis) override;\n "}, {"sha": "e531b21d09f24a7ad75ea43b7dd9cb8d12d26ef6", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "patch": "@@ -1896,11 +1896,14 @@ class AttrVisitor : public AST::ASTVisitor\n \t    return;\n \t  }\n       }\n-    else\n+\n+    // Parse the module's items if they haven't been expanded and the file\n+    // should be parsed (i.e isn't hidden behind an untrue or impossible cfg\n+    // directive)\n+    if (!module.is_marked_for_strip ()\n+\t&& module.get_kind () == AST::Module::ModuleKind::UNLOADED)\n       {\n-\tstd::string mod_file = module.get_filename ();\n-\tif (!mod_file.empty ())\n-\t  rust_debug (\"Module filename found: %s\", mod_file.c_str ());\n+\tmodule.load_items ();\n       }\n \n     // strip items if required"}, {"sha": "45f00f570534970a03804cb76b339723a082c19c", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "patch": "@@ -595,7 +595,6 @@ template <typename ManagedTokenSource> class Parser\n   bool done_end_of_file ();\n \n   void add_error (Error error) { error_table.push_back (std::move (error)); }\n-  std::vector<Error> &get_errors () { return error_table; }\n \n public:\n   // Construct parser with specified \"managed\" token source.\n@@ -615,6 +614,9 @@ template <typename ManagedTokenSource> class Parser\n   // Returns whether any parsing errors have occurred.\n   bool has_errors () const { return !error_table.empty (); }\n \n+  // Get a reference to the list of errors encountered\n+  std::vector<Error> &get_errors () { return error_table; }\n+\n private:\n   // The token source (usually lexer) associated with the parser.\n   ManagedTokenSource lexer;"}, {"sha": "67c8a13220d26c0480bb0c3897667b664d37cedb", "filename": "gcc/testsuite/rust/compile/extern_mod2.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4241b4c8da925b7f39e0045d3d36fbf71551f8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fextern_mod2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4241b4c8da925b7f39e0045d3d36fbf71551f8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fextern_mod2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fextern_mod2.rs?ref=4c4241b4c8da925b7f39e0045d3d36fbf71551f8", "patch": "@@ -1,14 +0,0 @@\n-#[path = \"modules/valid_path.rs\"]\n-mod not_a_valid_path;\n-\n-#[path] // { dg-error \"path attributes must contain a filename\" }\n-mod error; // { dg-error \"no candidate found for module error\" }\n-\n-// This is \"valid\", and should only error out when parsing\n-// the file\n-// FIXME: Add a dg-error directive on the `mod another_error` line once module expansion\n-// is added\n-#[path = \"not_a_valid_file.rs\"]\n-mod another_error;\n-\n-fn main() {}"}, {"sha": "4b576e03d8072effff189ddbd03db9924034cb0e", "filename": "gcc/testsuite/rust/compile/torture/extern_mod1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod1.rs?ref=38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options \"-w\" }\n+mod modules;\n+\n+fn main() {\n+    let twelve = modules::return_12();\n+}"}, {"sha": "f3379e33ee0f52798f1aba0fd0b1b54d72f7d413", "filename": "gcc/testsuite/rust/compile/torture/extern_mod2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod2.rs?ref=38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "patch": "@@ -0,0 +1,16 @@\n+// { dg-additional-options \"-w\" }\n+\n+#[path = \"modules/valid_path.rs\"]\n+mod not_a_valid_path;\n+\n+// #[path]\n+// FIXME: This is wrong\n+// mod error; \n+\n+// This is \"valid\", and should only error out when parsing\n+// the file\n+// FIXME: Fix path attribute expanding\n+// #[path = \"not_a_valid_file.rs\"]\n+// mod another_error;\n+\n+fn main() {}"}, {"sha": "80d849798987b88bd71c76395a311af83f231e88", "filename": "gcc/testsuite/rust/compile/torture/extern_mod4.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod4.rs?ref=38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "patch": "@@ -0,0 +1,17 @@\n+// { dg-additional-options \"-w\" }\n+// { dg-output \"12\" }\n+mod modules;\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn main() {\n+    unsafe {\n+        let fmt_s = \"%d\\n\\0\";\n+        let fmt_p = fmt_s as *const str;\n+        let fmt_i8 = fmt_p as *const i8;\n+\n+        printf(fmt_i8, modules::return_12());\n+    }\n+}"}, {"sha": "3d65176b6c3870ac4093c1145c86e4ca97ac070f", "filename": "gcc/testsuite/rust/compile/torture/modules/mod.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmodules%2Fmod.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmodules%2Fmod.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmodules%2Fmod.rs?ref=38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "patch": "@@ -0,0 +1,3 @@\n+pub fn return_12() -> i32 {\n+    12\n+}"}, {"sha": "6a1519c3fc45a588200123ea4a9dbdfb8ec7fee5", "filename": "gcc/testsuite/rust/compile/torture/modules/valid_path.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmodules%2Fvalid_path.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f2795947ab8d8080bab81c5e2ccdd24981cbcc/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmodules%2Fvalid_path.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmodules%2Fvalid_path.rs?ref=38f2795947ab8d8080bab81c5e2ccdd24981cbcc", "previous_filename": "gcc/testsuite/rust/compile/modules/valid_path.rs"}]}