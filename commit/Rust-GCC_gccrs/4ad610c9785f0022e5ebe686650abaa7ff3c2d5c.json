{"sha": "4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFkNjEwYzk3ODVmMDAyMmU1ZWJlNjg2NjUwYWJhYTdmZjNjMmQ1Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2008-09-03T04:10:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-09-03T04:10:27Z"}, "message": "re PR c++/37208 (C++0x deleted functions and SFINAE)\n\n        PR c++/37208\n        * call.c (build_over_call): Make =delete work with SFINAE.\n        * class.c (resolve_address_of_overloaded_function): Likewise.\n\n        * cp-tree.h (struct lang_decl_flags): Rename threadprivate_p to\n        threadprivate_or_deleted_p.\n        (CP_DECL_THREADPRIVATE_P): Adjust.\n        (DECL_DELETED_FN): Likewise.\n        (SD_UNINITIALIZED, SD_INITIALIZED, SD_DEFAULTED): New macros.\n        (SD_DELETED): New macro.\n        * parser.c (cp_parser_init_declarator): Use them.\n        * decl.c (start_decl): Use them.\n\n        * decl2.c (mark_used): Give =deleted error even in sizeof.\n\n        * typeck2.c (check_narrowing): Downgrade narrowing error to\n        permerror.\n\nFrom-SVN: r139926", "tree": {"sha": "593d0e7109cbda785c4e54b5d01f619e24dea375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/593d0e7109cbda785c4e54b5d01f619e24dea375"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a63068b6dd49f620e85c95f1dfed8f7d7473e17c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a63068b6dd49f620e85c95f1dfed8f7d7473e17c"}], "stats": {"total": 107, "additions": 84, "deletions": 23}, "files": [{"sha": "88b394673ab11becb5730a4e7781e66867ac8b7f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "patch": "@@ -1,3 +1,23 @@\n+2008-09-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/37208\n+\t* call.c (build_over_call): Make =delete work with SFINAE.\n+\t* class.c (resolve_address_of_overloaded_function): Likewise.\n+\n+\t* cp-tree.h (struct lang_decl_flags): Rename threadprivate_p to\n+\tthreadprivate_or_deleted_p.\n+\t(CP_DECL_THREADPRIVATE_P): Adjust.\n+\t(DECL_DELETED_FN): Likewise.\n+\t(SD_UNINITIALIZED, SD_INITIALIZED, SD_DEFAULTED): New macros.\n+\t(SD_DELETED): New macro.\n+\t* parser.c (cp_parser_init_declarator): Use them.\n+\t* decl.c (start_decl): Use them.\n+\n+\t* decl2.c (mark_used): Give =deleted error even in sizeof.\n+\n+\t* typeck2.c (check_narrowing): Downgrade narrowing error to\n+\tpermerror.\n+\n 2008-09-02  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* typeck.c (build_array_ref): Use new location argument."}, {"sha": "653e06e3833f0edf568a97d0a1b303bb18e3a92c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "patch": "@@ -5119,6 +5119,10 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \tjoust (cand, w->loser, 1);\n     }\n \n+  /* Make =delete work with SFINAE.  */\n+  if (DECL_DELETED_FN (fn) && !(complain & tf_error))\n+    return error_mark_node;\n+\n   if (DECL_FUNCTION_MEMBER_P (fn))\n     {\n       /* If FN is a template function, two cases must be considered."}, {"sha": "ab8391b4a7291e6950f950ba58a48db9bc300583", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "patch": "@@ -6185,6 +6185,10 @@ resolve_address_of_overloaded_function (tree target_type,\n      function will be marked as used at this point.  */\n   if (!(flags & tf_conv))\n     {\n+      /* Make =delete work with SFINAE.  */\n+      if (DECL_DELETED_FN (fn) && !(flags & tf_error))\n+\treturn error_mark_node;\n+      \n       mark_used (fn);\n       /* We could not check access when this expression was originally\n \t created since we did not know at that time to which function"}, {"sha": "a668aa092fb7339a619dd31b7ab37d3b9ce983de", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "patch": "@@ -1629,7 +1629,7 @@ struct lang_decl_flags GTY(())\n   unsigned this_thunk_p : 1;\n   unsigned repo_available_p : 1;\n   unsigned hidden_friend_p : 1;\n-  unsigned threadprivate_p : 1;\n+  unsigned threadprivate_or_deleted_p : 1;\n   unsigned defaulted_p : 1;\n \n   union lang_decl_u {\n@@ -2645,11 +2645,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n /* Nonzero if DECL has been declared threadprivate by\n    #pragma omp threadprivate.  */\n #define CP_DECL_THREADPRIVATE_P(DECL) \\\n-  (DECL_LANG_SPECIFIC (VAR_DECL_CHECK (DECL))->decl_flags.threadprivate_p)\n+  (DECL_LANG_SPECIFIC (VAR_DECL_CHECK (DECL))->decl_flags.threadprivate_or_deleted_p)\n \n /* Nonzero if DECL was declared with '= delete'.  */\n #define DECL_DELETED_FN(DECL) \\\n-  (DECL_LANG_SPECIFIC (FUNCTION_DECL_CHECK (DECL))->decl_flags.threadprivate_p)\n+  (DECL_LANG_SPECIFIC (FUNCTION_DECL_CHECK (DECL))->decl_flags.threadprivate_or_deleted_p)\n \n /* Nonzero if DECL was declared with '= default'.  */\n #define DECL_DEFAULTED_FN(DECL) \\\n@@ -3863,6 +3863,12 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n #define SF_INCLASS_INLINE    2  /* The function is an inline, defined\n \t\t\t\t   in the class body.  */\n \n+/* Used with start_decl's initialized parameter.  */\n+#define SD_UNINITIALIZED     0\n+#define SD_INITIALIZED       1\n+#define SD_DEFAULTED         2\n+#define SD_DELETED           3\n+\n /* Returns nonzero iff TYPE1 and TYPE2 are the same type, or if TYPE2\n    is derived from TYPE1, or if TYPE2 is a pointer (reference) to a\n    class derived from the type pointed to (referred to) by TYPE1.  */"}, {"sha": "0f7b5d7fa7090d013e01df04f540f7d389d396d9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "patch": "@@ -3969,14 +3969,14 @@ groktypename (cp_decl_specifier_seq *type_specifiers,\n    grokfield.)  The DECL corresponding to the DECLARATOR is returned.\n    If an error occurs, the error_mark_node is returned instead.\n    \n-   DECLSPECS are the decl-specifiers for the declaration.  INITIALIZED is 1\n-   if an explicit initializer is present, or 2 for an explicitly defaulted\n-   function, or 3 for an explicitly deleted function, but 0 if this is a\n-   variable implicitly initialized via a default constructor.  ATTRIBUTES\n-   and PREFIX_ATTRIBUTES are GNU attributes associated with this\n-   declaration.  *PUSHED_SCOPE_P is set to the scope entered in this\n-   function, if any; if set, the caller is responsible for calling\n-   pop_scope.  */\n+   DECLSPECS are the decl-specifiers for the declaration.  INITIALIZED is\n+   SD_INITIALIZED if an explicit initializer is present, or SD_DEFAULTED\n+   for an explicitly defaulted function, or SD_DELETED for an explicitly\n+   deleted function, but 0 (SD_UNINITIALIZED) if this is a variable\n+   implicitly initialized via a default constructor.  ATTRIBUTES and\n+   PREFIX_ATTRIBUTES are GNU attributes associated with this declaration.\n+   *PUSHED_SCOPE_P is set to the scope entered in this function, if any; if\n+   set, the caller is responsible for calling pop_scope.  */\n \n tree\n start_decl (const cp_declarator *declarator,\n@@ -4034,7 +4034,7 @@ start_decl (const cp_declarator *declarator,\n \treturn error_mark_node;\n \n       case FUNCTION_DECL:\n-\tif (initialized == 3)\n+\tif (initialized == SD_DELETED)\n \t  /* We'll handle the rest of the semantics later, but we need to\n \t     set this now so it's visible to duplicate_decls.  */\n \t  DECL_DELETED_FN (decl) = 1;"}, {"sha": "4f19766462d1450ca39266d898bfe29c28022040", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "patch": "@@ -3767,6 +3767,12 @@ mark_used (tree decl)\n   TREE_USED (decl) = 1;\n   if (DECL_CLONED_FUNCTION_P (decl))\n     TREE_USED (DECL_CLONED_FUNCTION (decl)) = 1;\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && DECL_DELETED_FN (decl))\n+    {\n+      error (\"deleted function %q+D\", decl);\n+      error (\"used here\");\n+    }\n   /* If we don't need a value, then we don't need to synthesize DECL.  */\n   if (skip_evaluation)\n     return;\n@@ -3830,12 +3836,6 @@ mark_used (tree decl)\n       /* If we've already synthesized the method we don't need to\n \t do the instantiation test below.  */\n     }\n-  else if (TREE_CODE (decl) == FUNCTION_DECL\n-\t   && DECL_DELETED_FN (decl))\n-    {\n-      error (\"deleted function %q+D\", decl);\n-      error (\"used here\");\n-    }\n   else if ((DECL_NON_THUNK_FUNCTION_P (decl) || TREE_CODE (decl) == VAR_DECL)\n \t   && DECL_LANG_SPECIFIC (decl) && DECL_TEMPLATE_INFO (decl)\n \t   && (!DECL_EXPLICIT_INSTANTIATION (decl)"}, {"sha": "32907b243e45210a6317f8d1140b6a1f9a9594c9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "patch": "@@ -12610,17 +12610,17 @@ cp_parser_init_declarator (cp_parser* parser,\n       || token->type == CPP_OPEN_PAREN\n       || token->type == CPP_OPEN_BRACE)\n     {\n-      is_initialized = 1;\n+      is_initialized = SD_INITIALIZED;\n       initialization_kind = token->type;\n \n       if (token->type == CPP_EQ\n \t  && function_declarator_p (declarator))\n \t{\n \t  cp_token *t2 = cp_lexer_peek_nth_token (parser->lexer, 2);\n \t  if (t2->keyword == RID_DEFAULT)\n-\t    is_initialized = 2;\n+\t    is_initialized = SD_DEFAULTED;\n \t  else if (t2->keyword == RID_DELETE)\n-\t    is_initialized = 3;\n+\t    is_initialized = SD_DELETED;\n \t}\n     }\n   else\n@@ -12633,7 +12633,7 @@ cp_parser_init_declarator (cp_parser* parser,\n \t  cp_parser_error (parser, \"expected initializer\");\n \t  return error_mark_node;\n \t}\n-      is_initialized = 0;\n+      is_initialized = SD_UNINITIALIZED;\n       initialization_kind = CPP_EOF;\n     }\n "}, {"sha": "bf0ff6b11757e74329202926ba66afd94bc34150", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "patch": "@@ -704,7 +704,8 @@ check_narrowing (tree type, tree init)\n     }\n \n   if (!ok)\n-    error (\"narrowing conversion of %qE to %qT inside { }\", init, type);\n+    permerror (input_location, \"narrowing conversion of %qE to %qT inside { }\",\n+\t       init, type);\n }\n \n /* Process the initializer INIT for a variable of type TYPE, emitting"}, {"sha": "56053840bdf88d971d0fadfda7d1e7cb38e0abe5", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted4.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ad610c9785f0022e5ebe686650abaa7ff3c2d5c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted4.C?ref=4ad610c9785f0022e5ebe686650abaa7ff3c2d5c", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/37208: SFINAE and deleted functions.\n+\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+template<int> struct A { };\n+\n+template<typename T>\n+int& int_if_addable(A<sizeof((*(T*)0) + (*(T*)0))>*);\n+\n+template<typename T>\n+float& int_if_addable(...);\n+\n+struct X { };\n+\n+struct Y { };\n+Y operator+(Y, Y);\n+\n+struct Z { };\n+Z operator+(Z, Z) = delete;\n+\n+void f()\n+{\n+ float& x = int_if_addable<X>(0);\n+ int& y = int_if_addable<Y>(0);\n+ float& z = int_if_addable<Z>(0);\n+}"}]}