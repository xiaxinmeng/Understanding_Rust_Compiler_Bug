{"sha": "29f8b71838fd23a668b760b55b36e9df835c5860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmOGI3MTgzOGZkMjNhNjY4Yjc2MGI1NWIzNmU5ZGY4MzVjNTg2MA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-10-10T17:54:59Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-10-10T17:54:59Z"}, "message": "[multiple changes]\n\n2000-10-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        Patch contributed by Corey Minyard.\n        * decl.c (check_local_named_variable): New function.\n        (tree check_local_unnamed_variable): Likewise.\n        (find_local_variable): Splitted. Call check_local_{un}named_variable.\n\n2000-08-11  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        * parse.y (variable_declarator_id:): Better error message.\n        (expression_statement:): Use YYNOT_TWICE.\n        (cast_expression:): Likewise.\n        (assignment:): Likewise.\n\n(http://gcc.gnu.org/ml/gcc-patches/2000-10/msg00286.html)\n\nFrom-SVN: r36827", "tree": {"sha": "29e47287ccecef100ce0b62cbd6d9692d2e0680c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29e47287ccecef100ce0b62cbd6d9692d2e0680c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f8b71838fd23a668b760b55b36e9df835c5860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f8b71838fd23a668b760b55b36e9df835c5860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f8b71838fd23a668b760b55b36e9df835c5860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f8b71838fd23a668b760b55b36e9df835c5860/comments", "author": null, "committer": null, "parents": [{"sha": "8ccaefbd44f90700f0366d4c037c8fc778ffae99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ccaefbd44f90700f0366d4c037c8fc778ffae99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ccaefbd44f90700f0366d4c037c8fc778ffae99"}], "stats": {"total": 138, "additions": 109, "deletions": 29}, "files": [{"sha": "b63d7511bf0c4ab012110c19b9903bcc322e072a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f8b71838fd23a668b760b55b36e9df835c5860/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f8b71838fd23a668b760b55b36e9df835c5860/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=29f8b71838fd23a668b760b55b36e9df835c5860", "patch": "@@ -1,3 +1,10 @@\n+2000-10-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\tPatch contributed by Corey Minyard.\n+\t* decl.c (check_local_named_variable): New function.\n+\t(tree check_local_unnamed_variable): Likewise.\n+\t(find_local_variable): Splitted. Call check_local_{un}named_variable.\n+\n 2000-10-07  Anthony Green  <green@redhat.com>\n \n \t* class.c (layout_class): Handle case where superclass can't be\n@@ -248,6 +255,13 @@ Wed Sep 13 11:50:35 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \tcompression_method fields.\n \t* zextract.c (read_zip_archive): Collect file compression info.\n \n+2000-08-11  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (variable_declarator_id:): Better error message.\n+\t(expression_statement:): Use YYNOT_TWICE.\n+\t(cast_expression:): Likewise.\n+\t(assignment:): Likewise.\n+\n 2000-08-11  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (do_merge_string_cste): New locals. Create new"}, {"sha": "dd36ff02674c4b936f6be45b5a2d44316cdcc5cc", "filename": "gcc/java/decl.c", "status": "modified", "additions": 81, "deletions": 18, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f8b71838fd23a668b760b55b36e9df835c5860/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f8b71838fd23a668b760b55b36e9df835c5860/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=29f8b71838fd23a668b760b55b36e9df835c5860", "patch": "@@ -50,6 +50,8 @@ static struct binding_level *make_binding_level PARAMS ((void));\n static boolean emit_init_test_initialization PARAMS ((struct hash_entry *,\n \t\t\t\t\t\t      hash_table_key));\n static tree create_primitive_vtable PARAMS ((const char *));\n+static tree check_local_named_variable PARAMS ((tree, tree, int, int *));\n+static tree check_local_unnamed_variable PARAMS ((tree, tree, tree));\n \n /* Set to non-zero value in order to emit class initilization code\n    before static field references.  */\n@@ -140,6 +142,58 @@ push_jvm_slot (index, decl)\n   return decl;\n }\n \n+/* Find out if 'decl' passed in fits the defined PC location better than\n+   'best'.  Return decl if it does, return best if it doesn't.  If decl\n+   is returned, then updated is set to true.  */\n+\n+static tree\n+check_local_named_variable (best, decl, pc, updated)\n+     tree best;\n+     tree decl;\n+     int pc;\n+     int *updated;\n+{\n+  if (pc >= DECL_LOCAL_START_PC (decl)\n+      && pc < DECL_LOCAL_END_PC (decl))\n+    {\n+      if (best == NULL_TREE\n+\t  || (DECL_LOCAL_START_PC (decl) > DECL_LOCAL_START_PC (best)\n+\t      && DECL_LOCAL_END_PC (decl) < DECL_LOCAL_END_PC (best)))\n+        {\n+\t  *updated = 1;\n+\t  return decl;\n+\t}\n+    }\n+  \n+  return best;\n+}\n+\n+/* Find the best declaration based upon type.  If 'decl' fits 'type' better\n+   than 'best', return 'decl'.  Otherwise return 'best'.  */\n+\n+static tree\n+check_local_unnamed_variable (best, decl, type)\n+     tree best;\n+     tree decl;\n+     tree type;\n+{\n+    if (TREE_TYPE (decl) == type\n+\t|| (TREE_CODE (TREE_TYPE (decl)) == TREE_CODE (type)\n+\t    && TYPE_PRECISION (TREE_TYPE (decl)) <= 32\n+\t    && TYPE_PRECISION (type) <= 32\n+\t    && TREE_CODE (type) != POINTER_TYPE)\n+\t|| (TREE_CODE (TREE_TYPE (decl)) == POINTER_TYPE\n+\t    && type == ptr_type_node))\n+      {\n+\tif (best == NULL_TREE\n+\t    || (TREE_TYPE (decl) == type && TREE_TYPE (best) != type))\n+\t  return decl;\n+      }\n+\n+    return best;\n+}\n+\n+\n /* Find a VAR_DECL (or PARM_DECL) at local index INDEX that has type TYPE,\n    that is valid at PC (or -1 if any pc).\n    If there is no existing matching decl, allocate one.  */\n@@ -152,32 +206,41 @@ find_local_variable (index, type, pc)\n {\n   tree decl = TREE_VEC_ELT (decl_map, index);\n   tree best = NULL_TREE;\n+  int found_scoped_var = 0;\n \n+  /* Scan through every declaration that has been created in this slot. */\n   while (decl != NULL_TREE)\n     {\n-      int in_range;\n-      in_range = pc < 0\n-\t|| (pc >= DECL_LOCAL_START_PC (decl)\n-\t    && pc < DECL_LOCAL_END_PC (decl));\n-\n-      if ((TREE_TYPE (decl) == type\n-\t   || (TREE_CODE (TREE_TYPE (decl)) == TREE_CODE (type)\n-\t       && TYPE_PRECISION (TREE_TYPE (decl)) <= 32\n-\t       && TYPE_PRECISION (type) <= 32\n-\t       && TREE_CODE (type) != POINTER_TYPE)\n-\t   || (TREE_CODE (TREE_TYPE (decl)) == POINTER_TYPE\n-\t       && type == ptr_type_node))\n-\t   && in_range)\n+       /* Variables created in give_name_to_locals() have a name and have\n+ \t a specified scope, so we can handle them specifically.  We want\n+ \t to use the specific decls created for those so they are assigned\n+ \t the right variables in the debugging information. */\n+      if (DECL_NAME (decl) != NULL_TREE)\n \t{\n-\t  if (best == NULL_TREE\n-              || (DECL_LOCAL_START_PC (decl) > DECL_LOCAL_START_PC (best)\n-                  && DECL_LOCAL_END_PC (decl) < DECL_LOCAL_START_PC (best)))\n-\t    best = decl;\n-\t}\n+\t  /* This is a variable we have a name for, so it has a scope\n+\t     supplied in the class file.  But it only matters when we\n+\t     actually have a PC to use.  If pc<0, then we are asking\n+\t     for a stack slot and this decl won't be one of those. */\n+ \t  if (pc >= 0)\n+ \t    best = check_local_named_variable (best, decl, pc,\n+ \t\t\t\t\t       &found_scoped_var);\n+ \t}\n+      /* We scan for type information unless we found a variable in the\n+\t proper scope already. */\n+      else if (!found_scoped_var)\n+ \t{\n+ \t  /* If we don't have scoping information for a variable, we use\n+ \t     a different method to look it up. */\n+ \t  best = check_local_unnamed_variable (best, decl, type);\n+ \t}\n+\n       decl = DECL_LOCAL_SLOT_CHAIN (decl);\n     }\n+\n   if (best != NULL_TREE)\n     return best;\n+\n+  /* If we don't find a match, create one with the type passed in. */\n   return push_jvm_slot (index, build_decl (VAR_DECL, NULL_TREE, type));\n }\n "}, {"sha": "e66d2f55634bc7b27ad9c4905a00e0bf49a7699c", "filename": "gcc/java/parse.y", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f8b71838fd23a668b760b55b36e9df835c5860/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f8b71838fd23a668b760b55b36e9df835c5860/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=29f8b71838fd23a668b760b55b36e9df835c5860", "patch": "@@ -971,7 +971,15 @@ variable_declarator_id:\n |\tidentifier error\n \t\t{yyerror (\"Invalid declaration\"); DRECOVER(vdi);}\n |\tvariable_declarator_id OSB_TK error\n-\t\t{yyerror (\"']' expected\"); DRECOVER(vdi);}\n+\t\t{ \n+\t\t  tree node = java_lval.node;\n+\t\t  if (node && (TREE_CODE (node) == INTEGER_CST\n+\t\t\t       || TREE_CODE (node) == EXPR_WITH_FILE_LOCATION))\n+\t\t    yyerror (\"Can't specify array dimension in a declaration\");\n+\t\t  else\n+\t\t    yyerror (\"']' expected\");\n+\t\t  DRECOVER(vdi);\n+\t\t}\n |\tvariable_declarator_id CSB_TK error\n \t\t{yyerror (\"Unbalanced ']'\"); DRECOVER(vdi);}\n ;\n@@ -1465,20 +1473,17 @@ expression_statement:\n \t\t}\n |\terror SC_TK \n \t\t{\n-\t\t  if (ctxp->prevent_ese != lineno)\n-\t\t    yyerror (\"Invalid expression statement\");\n+\t\t  YYNOT_TWICE yyerror (\"Invalid expression statement\");\n \t\t  DRECOVER (expr_stmt);\n \t\t}\n |\terror OCB_TK\n \t\t{\n-\t\t  if (ctxp->prevent_ese != lineno)\n-\t\t    yyerror (\"Invalid expression statement\");\n+\t\t  YYNOT_TWICE yyerror (\"Invalid expression statement\");\n \t\t  DRECOVER (expr_stmt);\n \t\t}\n |\terror CCB_TK\n \t\t{\n-\t\t  if (ctxp->prevent_ese != lineno)\n-\t\t    yyerror (\"Invalid expression statement\");\n+\t\t  YYNOT_TWICE yyerror (\"Invalid expression statement\");\n \t\t  DRECOVER (expr_stmt);\n \t\t}\n |       this_or_super OP_TK error\n@@ -2342,8 +2347,7 @@ cast_expression:\t\t/* Error handling here is potentially weak */\n \t\t{yyerror (\"']' expected, invalid type expression\");}\n |       OP_TK error\n \t\t{\n-\t          if (ctxp->prevent_ese != lineno)\n-\t\t    yyerror (\"Invalid type expression\"); RECOVER;\n+\t          YYNOT_TWICE yyerror (\"Invalid type expression\"); RECOVER;\n \t\t  RECOVER;\n \t\t}\n |\tOP_TK primitive_type dims CP_TK error\n@@ -2560,8 +2564,7 @@ assignment:\n \t\t{ $$ = build_assignment ($2.token, $2.location, $1, $3); }\n |\tleft_hand_side assignment_operator error\n \t\t{\n-\t\t  if (ctxp->prevent_ese != lineno)\n-\t\t    yyerror (\"Missing term\");\n+\t\t  YYNOT_TWICE yyerror (\"Missing term\");\n \t\t  DRECOVER (assign);\n \t\t}\n ;"}]}