{"sha": "0b2c18fe795a4c8cbe2a50e4be2014f336c794da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIyYzE4ZmU3OTVhNGM4Y2JlMmE1MGU0YmUyMDE0ZjMzNmM3OTRkYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-22T19:19:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-22T19:19:18Z"}, "message": "* config/frv/frv-protos.h (frv_branch_cost_string, frv_branch_cost_int)\n\t(frv_cpu_string, frv_condexec_insns_str, frv_condexec_insns)\n\t(frv_condexec_temps_str, frv_condexec_temps, frv_sched_lookahead_str)\n\t(frv_sched_lookahead): Delete.\n\t* config/frv/frv.h (MASK_DEFAULT_ALLOC_CC): Move to frv.c.\n\t(target_flags, MASK_GPR_32, MASK_FPR_32, MASK_SOFT_FLOAT)\n\t(MASK_ALLOC_CC, MASK_DWORD, MASK_DOUBLE, MASK_MEDIA, MASK_MULADD)\n\t(MASK_LIBPIC, MASK_ACC_4,  MASK_PACK, MASK_LONG_CALLS)\n\t(MASK_ALIGN_LABELS, MASK_LINKED_FP, MASK_BIG_TLS, MASK_DEBUG_ARG)\n\t(MASK_DEBUG_ADDR, MASK_DEBUG_STACK, MASK_DEBUG, MASK_DEBUG_LOC)\n\t(MASK_DEBUG_COND_EXEC, MASK_NO_COND_MOVE, MASK_NO_SCC)\n\t(MASK_NO_COND_EXEC, MASK_NO_VLIW_BRANCH, MASK_NO_MULTI_CE)\n\t(MASK_FDPIC, MASK_INLINE_PLT, MASK_GPREL_RO, MASK_DEFAULT)\n\t(TARGET_GPR_32, TARGET_FPR_32, TARGET_SOFT_FLOAT, TARGET_ALLOC_CC)\n\t(TARGET_DWORD, TARGET_DOUBLE, TARGET_MEDIA, TARGET_MULADD)\n\t(TARGET_LIBPIC, TARGET_ACC_4, TARGET_DEBUG_ARG, TARGET_DEBUG_ADDR)\n\t(TARGET_DEBUG_STACK, TARGET_DEBUG, TARGET_DEBUG_LOC)\n\t(TARGET_DEBUG_COND_EXEC, TARGET_NO_COND_MOVE, TARGET_NO_SCC)\n\t(TARGET_NO_COND_EXEC, TARGET_NO_VLIW_BRANCH, TARGET_NO_MULTI_CE)\n\t(TARGET_NO_NESTED_CE, TARGET_FDPIC, TARGET_INLINE_PLT, TARGET_BIG_TLS)\n\t(TARGET_GPREL_RO, TARGET_PACK, TARGET_LONG_CALLS, TARGET_ALIGN_LABELS)\n\t(TARGET_LINKED_FP, TARGET_GPR_64, TARGET_FPR_64, TARGET_HARD_FLOAT)\n\t(TARGET_FIXED_CC, TARGET_COND_MOVE, TARGET_SCC, TARGET_COND_EXEC)\n\t(TARGET_VLIW_BRANCH, TARGET_MULTI_CE, TARGET_NESTED_CE, TARGET_ACC_8)\n\t(TARGET_SWITCHES, TARGET_OPTIONS, DEFAULT_CONDEXEC_TEMPS)\n\t(DEFAULT_BRANCH_COST, DEFAULT_CONDEXEC_INSNS): Delete.\n\t* config/frv/frv.c (frv_branch_cost_string, frv_branch_cost_int)\n\t(frv_cpu_string, frv_condexec_insns_str, frv_condexec_insns)\n\t(frv_condexec_temps_str, frv_condexec_temps, frv_sched_lookahead_str)\n\t(frv_sched_lookahead): Delete.\n\t(MASK_DEFAULT_ALLOC_CC): Moved from frv.h.\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n\t(frv_handle_option): New function.  Move -mcpu= handling from...\n\t(frv_override_options): ...here.  Remove handling of other\n\tTARGET_OPTIONS.\n\t(frv_ifcvt_modify_tests): Check !TARGET_COND_EXEC instead of\n\tTARGET_NO_COND_EXEC and !TARGET_NESTED_CE to TARGET_NO_NESTED_CE.\n\t(frv_ifcvt_modify_multiple_tests): Likewise !TARGET_MULTI_CE\n\tand TARGET_NO_MULTI_CE.\n\t(frv_for_each_packet): Likewise TARGET_NO_VLIW_BRANCH and\n\t!TARGET_VLIW_BRANCH.\n\t* config/frv/frv.opt: New file.\n\nFrom-SVN: r96883", "tree": {"sha": "68a64dbfab493c7fb32d0425900bf24596d91ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68a64dbfab493c7fb32d0425900bf24596d91ad3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b2c18fe795a4c8cbe2a50e4be2014f336c794da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2c18fe795a4c8cbe2a50e4be2014f336c794da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b2c18fe795a4c8cbe2a50e4be2014f336c794da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2c18fe795a4c8cbe2a50e4be2014f336c794da/comments", "author": null, "committer": null, "parents": [{"sha": "ba199a5345bb20427b46b0de24e80feb5afd7e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba199a5345bb20427b46b0de24e80feb5afd7e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba199a5345bb20427b46b0de24e80feb5afd7e0d"}], "stats": {"total": 634, "additions": 300, "deletions": 334}, "files": [{"sha": "865e2b984a4f9c0c7fb86b548c6ccd27a9a5ce60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2c18fe795a4c8cbe2a50e4be2014f336c794da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2c18fe795a4c8cbe2a50e4be2014f336c794da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b2c18fe795a4c8cbe2a50e4be2014f336c794da", "patch": "@@ -1,3 +1,48 @@\n+2005-03-22  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/frv/frv-protos.h (frv_branch_cost_string, frv_branch_cost_int)\n+\t(frv_cpu_string, frv_condexec_insns_str, frv_condexec_insns)\n+\t(frv_condexec_temps_str, frv_condexec_temps, frv_sched_lookahead_str)\n+\t(frv_sched_lookahead): Delete.\n+\t* config/frv/frv.h (MASK_DEFAULT_ALLOC_CC): Move to frv.c.\n+\t(target_flags, MASK_GPR_32, MASK_FPR_32, MASK_SOFT_FLOAT)\n+\t(MASK_ALLOC_CC, MASK_DWORD, MASK_DOUBLE, MASK_MEDIA, MASK_MULADD)\n+\t(MASK_LIBPIC, MASK_ACC_4,  MASK_PACK, MASK_LONG_CALLS)\n+\t(MASK_ALIGN_LABELS, MASK_LINKED_FP, MASK_BIG_TLS, MASK_DEBUG_ARG)\n+\t(MASK_DEBUG_ADDR, MASK_DEBUG_STACK, MASK_DEBUG, MASK_DEBUG_LOC)\n+\t(MASK_DEBUG_COND_EXEC, MASK_NO_COND_MOVE, MASK_NO_SCC)\n+\t(MASK_NO_COND_EXEC, MASK_NO_VLIW_BRANCH, MASK_NO_MULTI_CE)\n+\t(MASK_FDPIC, MASK_INLINE_PLT, MASK_GPREL_RO, MASK_DEFAULT)\n+\t(TARGET_GPR_32, TARGET_FPR_32, TARGET_SOFT_FLOAT, TARGET_ALLOC_CC)\n+\t(TARGET_DWORD, TARGET_DOUBLE, TARGET_MEDIA, TARGET_MULADD)\n+\t(TARGET_LIBPIC, TARGET_ACC_4, TARGET_DEBUG_ARG, TARGET_DEBUG_ADDR)\n+\t(TARGET_DEBUG_STACK, TARGET_DEBUG, TARGET_DEBUG_LOC)\n+\t(TARGET_DEBUG_COND_EXEC, TARGET_NO_COND_MOVE, TARGET_NO_SCC)\n+\t(TARGET_NO_COND_EXEC, TARGET_NO_VLIW_BRANCH, TARGET_NO_MULTI_CE)\n+\t(TARGET_NO_NESTED_CE, TARGET_FDPIC, TARGET_INLINE_PLT, TARGET_BIG_TLS)\n+\t(TARGET_GPREL_RO, TARGET_PACK, TARGET_LONG_CALLS, TARGET_ALIGN_LABELS)\n+\t(TARGET_LINKED_FP, TARGET_GPR_64, TARGET_FPR_64, TARGET_HARD_FLOAT)\n+\t(TARGET_FIXED_CC, TARGET_COND_MOVE, TARGET_SCC, TARGET_COND_EXEC)\n+\t(TARGET_VLIW_BRANCH, TARGET_MULTI_CE, TARGET_NESTED_CE, TARGET_ACC_8)\n+\t(TARGET_SWITCHES, TARGET_OPTIONS, DEFAULT_CONDEXEC_TEMPS)\n+\t(DEFAULT_BRANCH_COST, DEFAULT_CONDEXEC_INSNS): Delete.\n+\t* config/frv/frv.c (frv_branch_cost_string, frv_branch_cost_int)\n+\t(frv_cpu_string, frv_condexec_insns_str, frv_condexec_insns)\n+\t(frv_condexec_temps_str, frv_condexec_temps, frv_sched_lookahead_str)\n+\t(frv_sched_lookahead): Delete.\n+\t(MASK_DEFAULT_ALLOC_CC): Moved from frv.h.\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n+\t(frv_handle_option): New function.  Move -mcpu= handling from...\n+\t(frv_override_options): ...here.  Remove handling of other\n+\tTARGET_OPTIONS.\n+\t(frv_ifcvt_modify_tests): Check !TARGET_COND_EXEC instead of\n+\tTARGET_NO_COND_EXEC and !TARGET_NESTED_CE to TARGET_NO_NESTED_CE.\n+\t(frv_ifcvt_modify_multiple_tests): Likewise !TARGET_MULTI_CE\n+\tand TARGET_NO_MULTI_CE.\n+\t(frv_for_each_packet): Likewise TARGET_NO_VLIW_BRANCH and\n+\t!TARGET_VLIW_BRANCH.\n+\t* config/frv/frv.opt: New file.\n+\n 2005-03-22  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* fold-const.c (fold_ternary): Take decomposed arguments of"}, {"sha": "23bb792ed89ec27edc1c59bd7f74a998ce989029", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2c18fe795a4c8cbe2a50e4be2014f336c794da/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2c18fe795a4c8cbe2a50e4be2014f336c794da/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=0b2c18fe795a4c8cbe2a50e4be2014f336c794da", "patch": "@@ -20,25 +20,6 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Define the information needed to generate branch and scc insns.  This is\n-   stored from the compare operation.  Note that we can't use \"rtx\" here\n-   since it hasn't been defined!  */\n-\n-/* Define global data defined in frv.c.  */\n-extern const char *frv_branch_cost_string;\t/* -mbranch-cost option */\n-extern int frv_branch_cost_int;\t\t\t/* value of -mbranch_cost */\n-\n-extern const char *frv_cpu_string;\t\t/* -mcpu= option */\n-\n-extern const char *frv_condexec_insns_str;\t/* -mcond-exec-insns= option */\n-extern int frv_condexec_insns;\t\t\t/* value of -mcond-exec-insns */\n-\n-extern const char *frv_condexec_temps_str;\t/* -mcond-exec-temps= option */\n-extern int frv_condexec_temps;\t\t\t/* value of -mcond-exec-temps */\n-\n-extern const char *frv_sched_lookahead_str;\t/* -msched-lookahead= option */\n-extern int frv_sched_lookahead;\t\t\t/* value -msched-lookahead= */\n-\n /* CPU type.  This must be identical to the cpu enumeration in frv.md.  */\n typedef enum frv_cpu\n {"}, {"sha": "8c6e54ddae3c786f82635658fe185f0b5b88e221", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 59, "deletions": 78, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2c18fe795a4c8cbe2a50e4be2014f336c794da/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2c18fe795a4c8cbe2a50e4be2014f336c794da/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=0b2c18fe795a4c8cbe2a50e4be2014f336c794da", "patch": "@@ -247,27 +247,12 @@ enum reg_class reg_class_from_letter[256];\n /* Cached value of frv_stack_info.  */\n static frv_stack_t *frv_stack_cache = (frv_stack_t *)0;\n \n-/* -mbranch-cost= support */\n-const char *frv_branch_cost_string;\n-int frv_branch_cost_int = DEFAULT_BRANCH_COST;\n-\n /* -mcpu= support */\n-const char *frv_cpu_string;\t\t/* -mcpu= option */\n frv_cpu_t frv_cpu_type = CPU_TYPE;\t/* value of -mcpu= */\n \n-/* -mcond-exec-insns= support */\n-const char *frv_condexec_insns_str;\t\t /* -mcond-exec-insns= option */\n-int frv_condexec_insns = DEFAULT_CONDEXEC_INSNS; /* value of -mcond-exec-insns*/\n-\n-/* -mcond-exec-temps= support */\n-const char *frv_condexec_temps_str;\t\t /* -mcond-exec-temps= option */\n-int frv_condexec_temps = DEFAULT_CONDEXEC_TEMPS; /* value of -mcond-exec-temps*/\n-\n-/* -msched-lookahead=n */\n-const char *frv_sched_lookahead_str;\t /* -msched-lookahead=n */\n-int frv_sched_lookahead = 4;\t\t /* -msched-lookahead=n */\n-\n /* Forward references */\n+\n+static bool frv_handle_option\t\t\t(size_t, const char *, int);\n static int frv_default_flags_for_cpu\t\t(void);\n static int frv_string_begins_with\t\t(tree, const char *);\n static FRV_INLINE bool frv_small_data_reloc_p\t(rtx, int);\n@@ -380,13 +365,31 @@ static bool frv_must_pass_in_stack (enum machine_mode mode, tree type);\n static int frv_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t  tree, bool);\n \f\n+/* Allow us to easily change the default for -malloc-cc.  */\n+#ifndef DEFAULT_NO_ALLOC_CC\n+#define MASK_DEFAULT_ALLOC_CC\tMASK_ALLOC_CC\n+#else\n+#define MASK_DEFAULT_ALLOC_CC\t0\n+#endif\n+\f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE frv_function_prologue\n #undef  TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE frv_function_epilogue\n #undef  TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER frv_assemble_integer\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS\t\t\\\n+  (MASK_DEFAULT_ALLOC_CC\t\t\t\\\n+   | MASK_COND_MOVE\t\t\t\t\\\n+   | MASK_SCC\t\t\t\t\t\\\n+   | MASK_COND_EXEC\t\t\t\t\\\n+   | MASK_VLIW_BRANCH\t\t\t\t\\\n+   | MASK_MULTI_CE\t\t\t\t\\\n+   | MASK_NESTED_CE)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION frv_handle_option\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS frv_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n@@ -519,6 +522,41 @@ frv_cannot_force_const_mem (rtx x ATTRIBUTE_UNUSED)\n   return TARGET_FDPIC;\n }\n \f\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+frv_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    case OPT_mcpu_:\n+      if (strcmp (arg, \"simple\") == 0)\n+\tfrv_cpu_type = FRV_CPU_SIMPLE;\n+      else if (strcmp (arg, \"tomcat\") == 0)\n+\tfrv_cpu_type = FRV_CPU_TOMCAT;\n+      else if (strcmp (arg, \"fr550\") == 0)\n+\tfrv_cpu_type = FRV_CPU_FR550;\n+      else if (strcmp (arg, \"fr500\") == 0)\n+\tfrv_cpu_type = FRV_CPU_FR500;\n+      else if (strcmp (arg, \"fr450\") == 0)\n+\tfrv_cpu_type = FRV_CPU_FR450;\n+      else if (strcmp (arg, \"fr405\") == 0)\n+\tfrv_cpu_type = FRV_CPU_FR405;\n+      else if (strcmp (arg, \"fr400\") == 0)\n+\tfrv_cpu_type = FRV_CPU_FR400;\n+      else if (strcmp (arg, \"fr300\") == 0)\n+\tfrv_cpu_type = FRV_CPU_FR300;\n+      else if (strcmp (arg, \"frv\") == 0)\n+\tfrv_cpu_type = FRV_CPU_GENERIC;\n+      else\n+\treturn false;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n static int\n frv_default_flags_for_cpu (void)\n {\n@@ -563,47 +601,6 @@ frv_override_options (void)\n   int regno;\n   unsigned int i;\n \n-  /* Set the cpu type.  */\n-  if (frv_cpu_string)\n-    {\n-      if (strcmp (frv_cpu_string, \"simple\") == 0)\n-\tfrv_cpu_type = FRV_CPU_SIMPLE;\n-\n-      else if (strcmp (frv_cpu_string, \"tomcat\") == 0)\n-\tfrv_cpu_type = FRV_CPU_TOMCAT;\n-\n-      else if (strncmp (frv_cpu_string, \"fr\", sizeof (\"fr\")-1) != 0)\n-\terror (\"Unknown cpu: -mcpu=%s\", frv_cpu_string);\n-\n-      else\n-\t{\n-\t  const char *p = frv_cpu_string + sizeof (\"fr\") - 1;\n-\t  if (strcmp (p, \"550\") == 0)\n-\t    frv_cpu_type = FRV_CPU_FR550;\n-\n-\t  else if (strcmp (p, \"500\") == 0)\n-\t    frv_cpu_type = FRV_CPU_FR500;\n-\n-\t  else if (strcmp (p, \"450\") == 0)\n-\t    frv_cpu_type = FRV_CPU_FR450;\n-\n-\t  else if (strcmp (p, \"405\") == 0)\n-\t    frv_cpu_type = FRV_CPU_FR405;\n-\n-\t  else if (strcmp (p, \"400\") == 0)\n-\t    frv_cpu_type = FRV_CPU_FR400;\n-\n-\t  else if (strcmp (p, \"300\") == 0)\n-\t    frv_cpu_type = FRV_CPU_FR300;\n-\n-\t  else if (strcmp (p, \"v\") == 0)\n-\t    frv_cpu_type = FRV_CPU_GENERIC;\n-\n-\t  else\n-\t    error (\"Unknown cpu: -mcpu=%s\", frv_cpu_string);\n-\t}\n-    }\n-\n   target_flags |= (frv_default_flags_for_cpu () & ~target_flags_explicit);\n \n   /* -mlibrary-pic sets -fPIC and -G0 and also suppresses warnings from the\n@@ -620,22 +617,6 @@ frv_override_options (void)\n \t}\n     }\n \n-  /* Change the branch cost value.  */\n-  if (frv_branch_cost_string)\n-    frv_branch_cost_int = atoi (frv_branch_cost_string);\n-\n-  /* Change the # of insns to be converted to conditional execution.  */\n-  if (frv_condexec_insns_str)\n-    frv_condexec_insns = atoi (frv_condexec_insns_str);\n-\n-  /* Change # of temporary registers used to hold integer constants.  */\n-  if (frv_condexec_temps_str)\n-    frv_condexec_temps = atoi (frv_condexec_temps_str);\n-\n-  /* Change scheduling look ahead.  */\n-  if (frv_sched_lookahead_str)\n-    frv_sched_lookahead = atoi (frv_sched_lookahead_str);\n-\n   /* A C expression whose value is a register class containing hard\n      register REGNO.  In general there is more than one such class;\n      choose a class which is \"minimal\", meaning that no smaller class\n@@ -6793,8 +6774,8 @@ frv_ifcvt_modify_tests (ce_if_block_t *ce_info, rtx *p_true, rtx *p_false)\n   /* Make sure we are only dealing with hard registers.  Also honor the\n      -mno-cond-exec switch, and -mno-nested-cond-exec switches if\n      applicable.  */\n-  if (!reload_completed || TARGET_NO_COND_EXEC\n-      || (TARGET_NO_NESTED_CE && ce_info->pass > 1))\n+  if (!reload_completed || !TARGET_COND_EXEC\n+      || (!TARGET_NESTED_CE && ce_info->pass > 1))\n     goto fail;\n \n   /* Figure out which registers we can allocate for our own purposes.  Only\n@@ -7153,7 +7134,7 @@ frv_ifcvt_modify_multiple_tests (ce_if_block_t *ce_info,\n       debug_rtx (*p_false);\n     }\n \n-  if (TARGET_NO_MULTI_CE)\n+  if (!TARGET_MULTI_CE)\n     goto fail;\n \n   if (GET_CODE (cr) != REG)\n@@ -8920,7 +8901,7 @@ frv_for_each_packet (void (*handle_packet) (void))\n   /* Early exit if we don't want to pack insns.  */\n   if (!optimize\n       || !flag_schedule_insns_after_reload\n-      || TARGET_NO_VLIW_BRANCH\n+      || !TARGET_VLIW_BRANCH\n       || frv_packet.issue_rate == 1)\n     return false;\n "}, {"sha": "0378d366860ebe0af1ec32a18d683fe3ae98b49a", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 237, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2c18fe795a4c8cbe2a50e4be2014f336c794da/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2c18fe795a4c8cbe2a50e4be2014f336c794da/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=0b2c18fe795a4c8cbe2a50e4be2014f336c794da", "patch": "@@ -212,13 +212,6 @@\n #define CPU_TYPE\t\tFRV_CPU_FR500\n #endif\n \n-/* Allow us to easily change the default for -malloc-cc.  */\n-#ifndef\tDEFAULT_NO_ALLOC_CC\n-#define MASK_DEFAULT_ALLOC_CC\tMASK_ALLOC_CC\n-#else\n-#define MASK_DEFAULT_ALLOC_CC\t0\n-#endif\n-\n /* Run-time target specifications */\n \n #define TARGET_CPU_CPP_BUILTINS()\t\t\t\t\t\\\n@@ -275,104 +268,6 @@\n   while (0)\n \n \f\n-/* This declaration should be present.  */\n-extern int target_flags;\n-\n-/* This series of macros is to allow compiler command arguments to enable or\n-   disable the use of optional features of the target machine.  For example,\n-   one machine description serves both the 68000 and the 68020; a command\n-   argument tells the compiler whether it should use 68020-only instructions or\n-   not.  This command argument works by means of a macro `TARGET_68020' that\n-   tests a bit in `target_flags'.\n-\n-   Define a macro `TARGET_FEATURENAME' for each such option.  Its definition\n-   should test a bit in `target_flags'; for example:\n-\n-        #define TARGET_68020 (target_flags & 1)\n-\n-   One place where these macros are used is in the condition-expressions of\n-   instruction patterns.  Note how `TARGET_68020' appears frequently in the\n-   68000 machine description file, `m68k.md'.  Another place they are used is\n-   in the definitions of the other macros in the `MACHINE.h' file.  */\n-\n-#define MASK_GPR_32\t     0x00000001\t/* Limit gprs to 32 registers */\n-#define MASK_FPR_32\t     0x00000002\t/* Limit fprs to 32 registers */\n-#define MASK_SOFT_FLOAT\t     0x00000004\t/* Use software floating point */\n-#define MASK_ALLOC_CC\t     0x00000008\t/* Dynamically allocate icc/fcc's */\n-#define MASK_DWORD\t     0x00000010\t/* Change ABi to allow dbl word insns*/\n-#define MASK_DOUBLE\t     0x00000020\t/* Use double precision instructions */\n-#define MASK_MEDIA\t     0x00000040\t/* Use media instructions */\n-#define MASK_MULADD\t     0x00000080\t/* Use multiply add/subtract insns */\n-#define MASK_LIBPIC\t     0x00000100\t/* -fpic that can be linked w/o pic */\n-#define MASK_ACC_4\t     0x00000200\t/* Only use four media accumulators */\n-#define MASK_PACK\t     0x00000400 /* Set to enable packed output */\n-#define MASK_LONG_CALLS\t     0x00000800 /* Use indirect calls */\n-#define MASK_ALIGN_LABELS    0x00001000 /* Optimize label alignments */\n-#define MASK_LINKED_FP\t     0x00002000 /* Follow ABI linkage requirements.  */\n-#define MASK_BIG_TLS         0x00008000 /* Assume a big TLS segment */\n-\n-\t\t\t \t\t/* put debug masks up high */\n-#define MASK_DEBUG_ARG\t     0x40000000\t/* debug argument handling */\n-#define MASK_DEBUG_ADDR\t     0x20000000\t/* debug go_if_legitimate_address */\n-#define MASK_DEBUG_STACK     0x10000000\t/* debug stack frame */\n-#define MASK_DEBUG\t     0x08000000\t/* general debugging switch */\n-#define MASK_DEBUG_LOC\t     0x04000000\t/* optimize line # table */\n-#define MASK_DEBUG_COND_EXEC 0x02000000\t/* debug cond exec code */\n-#define MASK_NO_COND_MOVE    0x01000000\t/* disable conditional moves */\n-#define MASK_NO_SCC\t     0x00800000\t/* disable set conditional codes */\n-#define MASK_NO_COND_EXEC    0x00400000\t/* disable conditional execution */\n-#define MASK_NO_VLIW_BRANCH  0x00200000\t/* disable repacking branches */\n-#define MASK_NO_MULTI_CE     0x00100000\t/* disable multi-level cond exec */\n-#define MASK_NO_NESTED_CE    0x00080000\t/* disable nested cond exec */\n-#define MASK_FDPIC           0x00040000\t/* Follow the new uClinux ABI.  */\n-#define MASK_INLINE_PLT      0x00020000 /* Inline FDPIC PLTs.  */\n-#define MASK_GPREL_RO\t     0x00010000 /* Use GPREL for read-only data.  */\n-\n-#define MASK_DEFAULT\t\tMASK_DEFAULT_ALLOC_CC\n-\n-#define TARGET_GPR_32\t\t((target_flags & MASK_GPR_32) != 0)\n-#define TARGET_FPR_32\t\t((target_flags & MASK_FPR_32) != 0)\n-#define TARGET_SOFT_FLOAT\t((target_flags & MASK_SOFT_FLOAT) != 0)\n-#define TARGET_ALLOC_CC\t\t((target_flags & MASK_ALLOC_CC) != 0)\n-#define TARGET_DWORD\t\t((target_flags & MASK_DWORD) != 0)\n-#define TARGET_DOUBLE\t\t((target_flags & MASK_DOUBLE) != 0)\n-#define TARGET_MEDIA\t\t((target_flags & MASK_MEDIA) != 0)\n-#define TARGET_MULADD\t\t((target_flags & MASK_MULADD) != 0)\n-#define TARGET_LIBPIC\t\t((target_flags & MASK_LIBPIC) != 0)\n-#define TARGET_ACC_4\t\t((target_flags & MASK_ACC_4) != 0)\n-#define TARGET_DEBUG_ARG\t((target_flags & MASK_DEBUG_ARG) != 0)\n-#define TARGET_DEBUG_ADDR\t((target_flags & MASK_DEBUG_ADDR) != 0)\n-#define TARGET_DEBUG_STACK\t((target_flags & MASK_DEBUG_STACK) != 0)\n-#define TARGET_DEBUG\t\t((target_flags & MASK_DEBUG) != 0)\n-#define TARGET_DEBUG_LOC\t((target_flags & MASK_DEBUG_LOC) != 0)\n-#define TARGET_DEBUG_COND_EXEC\t((target_flags & MASK_DEBUG_COND_EXEC) != 0)\n-#define TARGET_NO_COND_MOVE\t((target_flags & MASK_NO_COND_MOVE) != 0)\n-#define TARGET_NO_SCC\t\t((target_flags & MASK_NO_SCC) != 0)\n-#define TARGET_NO_COND_EXEC\t((target_flags & MASK_NO_COND_EXEC) != 0)\n-#define TARGET_NO_VLIW_BRANCH\t((target_flags & MASK_NO_VLIW_BRANCH) != 0)\n-#define TARGET_NO_MULTI_CE\t((target_flags & MASK_NO_MULTI_CE) != 0)\n-#define TARGET_NO_NESTED_CE\t((target_flags & MASK_NO_NESTED_CE) != 0)\n-#define TARGET_FDPIC\t        ((target_flags & MASK_FDPIC) != 0)\n-#define TARGET_INLINE_PLT\t((target_flags & MASK_INLINE_PLT) != 0)\n-#define TARGET_BIG_TLS\t\t((target_flags & MASK_BIG_TLS) != 0)\n-#define TARGET_GPREL_RO\t\t((target_flags & MASK_GPREL_RO) != 0)\n-#define TARGET_PACK\t\t((target_flags & MASK_PACK) != 0)\n-#define TARGET_LONG_CALLS\t((target_flags & MASK_LONG_CALLS) != 0)\n-#define TARGET_ALIGN_LABELS\t((target_flags & MASK_ALIGN_LABELS) != 0)\n-#define TARGET_LINKED_FP\t((target_flags & MASK_LINKED_FP) != 0)\n-\n-#define TARGET_GPR_64\t\t(! TARGET_GPR_32)\n-#define TARGET_FPR_64\t\t(! TARGET_FPR_32)\n-#define TARGET_HARD_FLOAT\t(! TARGET_SOFT_FLOAT)\n-#define TARGET_FIXED_CC\t\t(! TARGET_ALLOC_CC)\n-#define TARGET_COND_MOVE\t(! TARGET_NO_COND_MOVE)\n-#define TARGET_SCC\t\t(! TARGET_NO_SCC)\n-#define TARGET_COND_EXEC\t(! TARGET_NO_COND_EXEC)\n-#define TARGET_VLIW_BRANCH\t(! TARGET_NO_VLIW_BRANCH)\n-#define TARGET_MULTI_CE\t\t(! TARGET_NO_MULTI_CE)\n-#define TARGET_NESTED_CE\t(! TARGET_NO_NESTED_CE)\n-#define TARGET_ACC_8\t\t(! TARGET_ACC_4)\n-\n #define TARGET_HAS_FPRS\t\t(TARGET_HARD_FLOAT || TARGET_MEDIA)\n \n #define NUM_GPRS\t\t(TARGET_GPR_32? 32 : 64)\n@@ -420,122 +315,6 @@ extern int target_flags;\n #define HAVE_AS_TLS 0\n #endif\n \n-/* This macro defines names of command options to set and clear bits in\n-   `target_flags'.  Its definition is an initializer with a subgrouping for\n-   each command option.\n-\n-   Each subgrouping contains a string constant, that defines the option name,\n-   a number, which contains the bits to set in `target_flags', and an optional\n-   second string which is the textual description that will be displayed when\n-   the user passes --help on the command line.  If the number entry is negative\n-   then the specified bits will be cleared instead of being set.  If the second\n-   string entry is present but empty, then no help information will be displayed\n-   for that option, but it will not count as an undocumented option.  The actual\n-   option name, asseen on the command line is made by appending `-m' to the\n-   specified name.\n-\n-   One of the subgroupings should have a null string.  The number in this\n-   grouping is the default value for `target_flags'.  Any target options act\n-   starting with that value.\n-\n-   Here is an example which defines `-m68000' and `-m68020' with opposite\n-   meanings, and picks the latter as the default:\n-\n-        #define TARGET_SWITCHES \\\n-          { { \"68020\",  1, \"\"},      \\\n-            { \"68000\", -1, \"Compile for the m68000\"},     \\\n-            { \"\",       1, }}\n-\n-   This declaration must be present.  */\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t    \\\n-{{ \"gpr-32\",\t\t  MASK_GPR_32,\t\t\"Only use 32 gprs\"},\t    \\\n- { \"gpr-64\",\t\t -MASK_GPR_32,\t\t\"Use 64 gprs\"},\t\t    \\\n- { \"fpr-32\",\t\t  MASK_FPR_32,\t\t\"Only use 32 fprs\"},\t    \\\n- { \"fpr-64\",\t\t -MASK_FPR_32,\t\t\"Use 64 fprs\"},\t\t    \\\n- { \"hard-float\",\t -MASK_SOFT_FLOAT,\t\"Use hardware floating point\" },\\\n- { \"soft-float\",\t  MASK_SOFT_FLOAT,\t\"Use software floating point\" },\\\n- { \"alloc-cc\",\t\t  MASK_ALLOC_CC,\t\"Dynamically allocate cc's\" }, \\\n- { \"fixed-cc\",\t\t -MASK_ALLOC_CC,\t\"Just use icc0/fcc0\" },\t    \\\n- { \"dword\",\t\t  MASK_DWORD,\t\t\"Change ABI to allow double word insns\" }, \\\n- { \"no-dword\",\t\t -MASK_DWORD,\t\t\"Do not use double word insns\" }, \\\n- { \"double\",\t\t  MASK_DOUBLE,\t\t\"Use fp double instructions\" }, \\\n- { \"no-double\",\t\t -MASK_DOUBLE,\t\t\"Do not use fp double insns\" }, \\\n- { \"media\",\t\t  MASK_MEDIA,\t\t\"Use media instructions\" }, \\\n- { \"no-media\",\t\t -MASK_MEDIA,\t\t\"Do not use media insns\" }, \\\n- { \"muladd\",\t\t  MASK_MULADD,\t\t\"Use multiply add/subtract instructions\" }, \\\n- { \"no-muladd\",\t\t -MASK_MULADD,\t\t\"Do not use multiply add/subtract insns\" }, \\\n- { \"ultilib-library-pic\", 0,\t\t\t\"Link with the library-pic libraries\" }, \\\n- { \"library-pic\",\t  MASK_LIBPIC,\t\t\"PIC support for building libraries\" }, \\\n- { \"acc-4\",\t\t  MASK_ACC_4,\t\t\"Use 4 media accumulators\" }, \\\n- { \"acc-8\",\t\t -MASK_ACC_4,\t\t\"Use 8 media accumulators\" }, \\\n- { \"pack\",\t\t  MASK_PACK,\t\t\"Pack VLIW instructions\" }, \\\n- { \"no-pack\",\t\t -MASK_PACK,\t\t\"Do not pack VLIW instructions\" }, \\\n- { \"no-eflags\",\t\t  0,\t\t\t\"Do not mark ABI switches in e_flags\" }, \\\n- { \"debug-arg\",\t\t  MASK_DEBUG_ARG,\t\"Internal debug switch\" },  \\\n- { \"debug-addr\",\t  MASK_DEBUG_ADDR,\t\"Internal debug switch\" },  \\\n- { \"debug-stack\",\t  MASK_DEBUG_STACK,\t\"Internal debug switch\" },  \\\n- { \"debug\",\t\t  MASK_DEBUG,\t\t\"Internal debug switch\" },  \\\n- { \"debug-cond-exec\",\t  MASK_DEBUG_COND_EXEC,\t\"Internal debug switch\" },  \\\n- { \"debug-loc\",\t\t  MASK_DEBUG_LOC,\t\"Internal debug switch\" },  \\\n- { \"align-labels\",\t  MASK_ALIGN_LABELS,\t\"Enable label alignment optimizations\" }, \\\n- { \"no-align-labels\",\t -MASK_ALIGN_LABELS,\t\"Disable label alignment optimizations\" }, \\\n- { \"cond-move\",\t\t -MASK_NO_COND_MOVE,\t\"Enable conditional moves\" },  \\\n- { \"no-cond-move\",\t  MASK_NO_COND_MOVE,\t\"Disable conditional moves\" },  \\\n- { \"scc\",\t\t -MASK_NO_SCC,\t\t\"Enable setting gprs to the result of comparisons\" },  \\\n- { \"no-scc\",\t\t  MASK_NO_SCC,\t\t\"Disable setting gprs to the result of comparisons\" },  \\\n- { \"cond-exec\",\t\t -MASK_NO_COND_EXEC,\t\"Enable conditional execution other than moves/scc\" }, \\\n- { \"no-cond-exec\",\t  MASK_NO_COND_EXEC,\t\"Disable conditional execution other than moves/scc\" }, \\\n- { \"vliw-branch\",\t -MASK_NO_VLIW_BRANCH,\t\"Run pass to pack branches into VLIW insns\" }, \\\n- { \"no-vliw-branch\",\t  MASK_NO_VLIW_BRANCH,\t\"Do not run pass to pack branches into VLIW insns\" }, \\\n- { \"multi-cond-exec\",\t -MASK_NO_MULTI_CE,\t\"Disable optimizing &&/|| in conditional execution\" }, \\\n- { \"no-multi-cond-exec\",  MASK_NO_MULTI_CE,\t\"Enable optimizing &&/|| in conditional execution\" }, \\\n- { \"nested-cond-exec\",\t -MASK_NO_NESTED_CE,\t\"Enable nested conditional execution optimizations\" }, \\\n- { \"no-nested-cond-exec\" ,MASK_NO_NESTED_CE,\t\"Disable nested conditional execution optimizations\" }, \\\n- { \"long-calls\",\t  MASK_LONG_CALLS,\t\"Disallow direct calls to global functions\" }, \\\n- { \"no-long-calls\",\t -MASK_LONG_CALLS,\t\"Allow direct calls to global functions\" }, \\\n- { \"linked-fp\",\t\t  MASK_LINKED_FP,\t\"Follow the EABI linkage requirements\" }, \\\n- { \"no-linked-fp\",\t -MASK_LINKED_FP,\t\"Don't follow the EABI linkage requirements\" }, \\\n- { \"fdpic\",\t          MASK_FDPIC,\t\t\"Enable file descriptor PIC mode\" }, \\\n- { \"no-fdpic\",\t         -MASK_FDPIC,\t\t\"Disable file descriptor PIC mode\" }, \\\n- { \"inline-plt\",\t  MASK_INLINE_PLT,\t\"Enable inlining of PLT in function calls\" }, \\\n- { \"no-inline-plt\",\t -MASK_INLINE_PLT,\t\"Disable inlining of PLT in function calls\" }, \\\n- { \"TLS\",\t\t  MASK_BIG_TLS,         \"Assume a large TLS segment\" }, \\\n- { \"tls\",                -MASK_BIG_TLS,\t\t\"Do not assume a large TLS segment\" }, \\\n- { \"gprel-ro\",\t\t  MASK_GPREL_RO,\t\"Enable use of GPREL for read-only data in FDPIC\" }, \\\n- { \"no-gprel-ro\",\t -MASK_GPREL_RO,\t\"Disable use of GPREL for read-only data in FDPIC\" }, \\\n- { \"tomcat-stats\",\t  0, \t\t\t\"Cause gas to print tomcat statistics\" }, \\\n- { \"\",\t\t\t  MASK_DEFAULT,\t\t\"\" }}\t\t\t    \\\n-\n-/* This macro is similar to `TARGET_SWITCHES' but defines names of command\n-   options that have values.  Its definition is an initializer with a\n-   subgrouping for each command option.\n-\n-   Each subgrouping contains a string constant, that defines the fixed part of\n-   the option name, the address of a variable, and an optional description string.\n-   The variable, of type `char *', is set to the text following the fixed part of\n-   the option as it is specified on the command line.  The actual option name is\n-   made by appending `-m' to the specified name.\n-\n-   Here is an example which defines `-mshort-data-NUMBER'.  If the given option\n-   is `-mshort-data-512', the variable `m88k_short_data' will be set to the\n-   string `\"512\"'.\n-\n-        extern char *m88k_short_data;\n-        #define TARGET_OPTIONS \\\n-         { { \"short-data-\", & m88k_short_data, \\\n-\t \"Specify the size of the short data section\"  } }\n-\n-   This declaration is optional.  */\n-#define TARGET_OPTIONS\t\t\t\t\t\t\t      \\\n-{\t\t\t\t\t\t\t\t\t      \\\n-  { \"cpu=\",\t\t&frv_cpu_string,\t \"Set cpu type\", 0},\t      \\\n-  { \"branch-cost=\",\t&frv_branch_cost_string, \"Internal debug switch\", 0}, \\\n-  { \"cond-exec-insns=\", &frv_condexec_insns_str, \"Internal debug switch\", 0}, \\\n-  { \"cond-exec-temps=\", &frv_condexec_temps_str, \"Internal debug switch\", 0}, \\\n-  { \"sched-lookahead=\", &frv_sched_lookahead_str,\"Internal debug switch\", 0}, \\\n-}\n-\n /* This macro is a C statement to print on `stderr' a string describing the\n    particular machine description choice.  Every machine description should\n    define `TARGET_VERSION'.  For example:\n@@ -819,7 +598,6 @@ extern int target_flags;\n #define FPR_FIRST       64\t\t\t/* First FP reg */\n #define FPR_LAST        127\t\t\t/* Last  FP reg */\n \n-#define DEFAULT_CONDEXEC_TEMPS 4\t\t/* reserve 4 regs by default */\n #define GPR_TEMP_NUM\tfrv_condexec_temps\t/* # gprs to reserve for temps */\n \n /* We reserve the last CR and CCR in each category to be used as a reload\n@@ -2444,18 +2222,6 @@ do {\t\t\t\t\t\t\t\\\n \n /* A C expression for the cost of a branch instruction.  A value of 1 is the\n    default; other values are interpreted relative to that.  */\n-\n-/* Here are additional macros which do not specify precise relative costs, but\n-   only that certain actions are more expensive than GCC would ordinarily\n-   expect.  */\n-\n-/* We used to default the branch cost to 2, but I changed it to 1, to avoid\n-   generating SCC instructions and or/and-ing them together, and then doing the\n-   branch on the result, which collectively generate much worse code.  */\n-#ifndef DEFAULT_BRANCH_COST\n-#define DEFAULT_BRANCH_COST 1\n-#endif\n-\n #define BRANCH_COST frv_branch_cost_int\n \n /* Define this macro as a C expression which is nonzero if accessing less than\n@@ -3161,9 +2927,6 @@ do {                                                                    \\\n    cc0, and 1 if it does use cc0.  */\n #define MAX_CONDITIONAL_EXECUTE frv_condexec_insns\n \n-/* Default value of MAX_CONDITIONAL_EXECUTE if no -mcond-exec-insns= */\n-#define DEFAULT_CONDEXEC_INSNS 8\n-\n /* A C expression to modify the code described by the conditional if\n    information CE_INFO, possibly updating the tests in TRUE_EXPR, and\n    FALSE_EXPR for converting if-then and if-then-else code to conditional"}, {"sha": "c05516c68c23135cf8e28b701eacde4c41cbb23b", "filename": "gcc/config/frv/frv.opt", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2c18fe795a4c8cbe2a50e4be2014f336c794da/gcc%2Fconfig%2Ffrv%2Ffrv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2c18fe795a4c8cbe2a50e4be2014f336c794da/gcc%2Fconfig%2Ffrv%2Ffrv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.opt?ref=0b2c18fe795a4c8cbe2a50e4be2014f336c794da", "patch": "@@ -0,0 +1,196 @@\n+; Options for the FR-V port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+macc-4\n+Target Report RejectNegative Mask(ACC_4)\n+Use 4 media accumulators\n+\n+macc-8\n+Target Report RejectNegative InverseMask(ACC_4, ACC_8)\n+Use 8 media accumulators\n+\n+malign-labels\n+Target Report Mask(ALIGN_LABELS)\n+Enable label alignment optimizations\n+\n+malloc-cc\n+Target Report RejectNegative Mask(ALLOC_CC)\n+Dynamically allocate cc registers\n+\n+; We used to default the branch cost to 2, but it was changed it to 1 to avoid\n+; generating SCC instructions and or/and-ing them together, and then doing the\n+; branch on the result, which collectively generate much worse code.\n+mbranch-cost=\n+Target RejectNegative Joined UInteger Var(frv_branch_cost_int) Init(1)\n+Set the cost of branches\n+\n+mcond-exec\n+Target Report Mask(COND_EXEC)\n+Enable conditional execution other than moves/scc\n+\n+mcond-exec-insns=\n+Target RejectNegative Joined UInteger Var(frv_condexec_insns) Init(8)\n+Change the maximum length of conditionally-executed sequences\n+\n+mcond-exec-temps=\n+Target RejectNegative Joined UInteger Var(frv_condexec_temps) Init(4)\n+Change the number of temporary registers that are available to conditionally-executed sequences\n+\n+mcond-move\n+Target Report Mask(COND_MOVE)\n+Enable conditional moves\n+\n+mcpu=\n+Target RejectNegative Joined\n+Set the target CPU type\n+\n+mdebug\n+Target Undocumented Var(TARGET_DEBUG)\n+\n+mdebug-arg\n+Target Undocumented Var(TARGET_DEBUG_ARG)\n+\n+mdebug-addr\n+Target Undocumented Var(TARGET_DEBUG_ADDR)\n+\n+mdebug-cond-exec\n+Target Undocumented Var(TARGET_DEBUG_COND_EXEC)\n+\n+mdebug-loc\n+Target Undocumented Var(TARGET_DEBUG_LOC)\n+\n+mdebug-stack\n+Target Undocumented Var(TARGET_DEBUG_STACK)\n+\n+mdouble\n+Target Report Mask(DOUBLE)\n+Use fp double instructions\n+\n+mdword\n+Target Report Mask(DWORD)\n+Change the ABI to allow double word insns\n+\n+mfdpic\n+Target Report Mask(FDPIC)\n+Enable Function Descriptor PIC mode\n+\n+mfixed-cc\n+Target Report RejectNegative InverseMask(ALLOC_CC, FIXED_CC)\n+Just use icc0/fcc0\n+\n+mfpr-32\n+Target Report RejectNegative Mask(FPR_32)\n+Only use 32 FPRs\n+\n+mfpr-64\n+Target Report RejectNegative InverseMask(FPR_32, FPR_64)\n+Use 64 FPRs\n+\n+mgpr-32\n+Target Report RejectNegative Mask(GPR_32)\n+Only use 32 GPRs\n+\n+mgpr-64\n+Target Report RejectNegative InverseMask(GPR_32, GPR_64)\n+Use 64 GPRs\n+\n+mgprel-ro\n+Target Report Mask(GPREL_RO)\n+Enable use of GPREL for read-only data in FDPIC\n+\n+mhard-float\n+Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)\n+Use hardware floating point\n+\n+minline-plt\n+Target Report Mask(INLINE_PLT)\n+Enable inlining of PLT in function calls\n+\n+mlibrary-pic\n+Target Report Mask(LIBPIC)\n+Enable PIC support for building libraries\n+\n+mlinked-fp\n+Target Report Mask(LINKED_FP)\n+Follow the EABI linkage requirements\n+\n+mlong-calls\n+Target Report Mask(LONG_CALLS)\n+Disallow direct calls to global functions\n+\n+mmedia\n+Target Report Mask(MEDIA)\n+Use media instructions\n+\n+mmuladd\n+Target Report Mask(MULADD)\n+Use multiply add/subtract instructions\n+\n+mmulti-cond-exec\n+Target Report Mask(MULTI_CE)\n+Enable optimizing &&/|| in conditional execution\n+\n+mnested-cond-exec\n+Target Report Mask(NESTED_CE)\n+Enable nested conditional execution optimizations\n+\n+; Not used by the compiler proper.\n+mno-eflags\n+Target RejectNegative\n+Do not mark ABI switches in e_flags\n+\n+mpack\n+Target Report Mask(PACK)\n+Pack VLIW instructions\n+\n+mscc\n+Target Report Mask(SCC)\n+Enable setting GPRs to the result of comparisons\n+\n+msched-lookahead=\n+Target RejectNegative Joined UInteger Var(frv_sched_lookahead) Init(4)\n+Change the amount of scheduler lookahead\n+\n+msoft-float\n+Target Report RejectNegative Mask(SOFT_FLOAT)\n+Use software floating point\n+\n+mTLS\n+Target Report RejectNegative Mask(BIG_TLS)\n+Assume a large TLS segment\n+\n+mtls\n+Target Report RejectNegative InverseMask(BIG_TLS)\n+Do not assume a large TLS segment\n+\n+; Not used by the compiler proper.\n+mtomcat-stats\n+Target\n+Cause gas to print tomcat statistics\n+\n+; Not used by the compiler proper.\n+multilib-library-pic\n+Target RejectNegative\n+Link with the library-pic libraries\n+\n+mvliw-branch\n+Target Report Mask(VLIW_BRANCH)\n+Allow branches to be packed with other instructions"}]}