{"sha": "6bba184ccbf47368eaea27ee2c1e7b850526640b", "node_id": "C_kwDOANBUbNoAKDZiYmExODRjY2JmNDczNjhlYWVhMjdlZTJjMWU3Yjg1MDUyNjY0MGI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-12T08:47:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-12T08:47:46Z"}, "message": "c++: Silence -Wuseless-cast warnings during move [PR103480]\n\nThis is maybe just a shot in the dark, but IMHO we shouldn't be diagnosing\n-Wuseless-cast on casts the compiler adds on its own when calling its move\nfunction.  We don't seem to warn when user calls std::move either.\nWe call move on elinit (*NON_LVALUE_EXPR <(struct C[2] &&) &D.2497->b>)[0]\nso it is already an xvalue_p and try to static_cast it to struct C &&.\nBut we don't warn e.g. on std::move (std::move (whatever)).\n\nFixed by not doing the static cast and just returning expr from move\nif expr is already an xvalue.\n\n2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n\t    Jason Merrill  <jason@redhat.com>\n\n\tPR c++/103480\n\t* tree.c (move): If expr is xvalue_p, just return expr without\n\tbuild_static_cast.\n\n\t* g++.dg/warn/Wuseless-cast2.C: New test.", "tree": {"sha": "8fea1eaac85031e99470e88c42030a756b1ff7ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fea1eaac85031e99470e88c42030a756b1ff7ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bba184ccbf47368eaea27ee2c1e7b850526640b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bba184ccbf47368eaea27ee2c1e7b850526640b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bba184ccbf47368eaea27ee2c1e7b850526640b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bba184ccbf47368eaea27ee2c1e7b850526640b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c3b9c17363bf30fcab9814252b9d5860711a10b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3b9c17363bf30fcab9814252b9d5860711a10b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3b9c17363bf30fcab9814252b9d5860711a10b"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "7f7de86b4e825d8f292fa6b215100b4652fc8384", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bba184ccbf47368eaea27ee2c1e7b850526640b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bba184ccbf47368eaea27ee2c1e7b850526640b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=6bba184ccbf47368eaea27ee2c1e7b850526640b", "patch": "@@ -1304,6 +1304,8 @@ move (tree expr)\n {\n   tree type = TREE_TYPE (expr);\n   gcc_assert (!TYPE_REF_P (type));\n+  if (xvalue_p (expr))\n+    return expr;\n   type = cp_build_reference_type (type, /*rval*/true);\n   return build_static_cast (input_location, type, expr,\n \t\t\t    tf_warning_or_error);"}, {"sha": "22e403973e74389aa6cbac2f5ff60486bf372a84", "filename": "gcc/testsuite/g++.dg/warn/Wuseless-cast2.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bba184ccbf47368eaea27ee2c1e7b850526640b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bba184ccbf47368eaea27ee2c1e7b850526640b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast2.C?ref=6bba184ccbf47368eaea27ee2c1e7b850526640b", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/103480\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"-Wuseless-cast\" }\n+\n+template <typename T, int N>\n+struct A { typedef T t[N]; };\n+template <typename T, int N>\n+struct B { typename A<T, N>::t b; };\n+struct C {\n+  constexpr C (C &&) {}\n+  template <int N>\n+  static auto bar ()\n+  {\n+    B<C, N> r;\n+    return r;\t\t// { dg-bogus \"useless cast to type\" }\n+  }\n+  C () = default;\n+};\n+\n+void\n+foo ()\n+{\n+  C::bar<2> ();\n+}"}]}