{"sha": "b6019ab18c777ee68508ce0c7a289043d2f60bcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYwMTlhYjE4Yzc3N2VlNjg1MDhjZTBjN2EyODkwNDNkMmY2MGJjZA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-01-30T18:20:27Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-01-30T18:20:27Z"}, "message": "re PR fortran/37577 ([meta-bug] change internal array descriptor format for better syntax, C interop TR, rank 15)\n\n2018-01-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/37577\n\t* libgfortran.h: Remove GFC_DTYPE_DERIVED_1, GFC_DTYPE_DERIVED_2,\n\tGFC_DTYPE_DERIVED_4, GFC_DTYPE_DERIVED_8 and GFC_DTYPE_DERIVED_16.\n\t* m4/cshift1.m4: Remove GFC_DTYPE_DERIVED_1.\n\t* generated/cshift1_16.c: Regenerated.\n\t* generated/cshift1_4.c: Regenerated.\n\t* generated/cshift1_8.c: Regenerated.\n\t* intrinsics/cshift0.c: Remove GFC_DTYPE_DERIVED_1.\n\t* intrinsics/pack_generic.c (pack): Move handling of other types\n\tinto separate switch statement.\n\t* intrinsics/spread_generic.c (spread): Likewise.\n\t(spread_scalar): Likewise.\n\t* intrinsics/unpack_generic.c (unpack1): Likewise.\n\t(unpack0): Likewise.\n\t* runtime/in_pack_generic.c (internal_pack): Likewise.\n\t* runtime/in_unpack_generic.c (internal_unpack): Likewise.\n\nFrom-SVN: r257195", "tree": {"sha": "eb77e21bf7cc1d3cd93e0b4e6997833f98ca8035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb77e21bf7cc1d3cd93e0b4e6997833f98ca8035"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6019ab18c777ee68508ce0c7a289043d2f60bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6019ab18c777ee68508ce0c7a289043d2f60bcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6019ab18c777ee68508ce0c7a289043d2f60bcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6019ab18c777ee68508ce0c7a289043d2f60bcd/comments", "author": null, "committer": null, "parents": [{"sha": "cacb4a794f079490a56eb99294947ba5acb4269a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cacb4a794f079490a56eb99294947ba5acb4269a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cacb4a794f079490a56eb99294947ba5acb4269a"}], "stats": {"total": 193, "additions": 126, "deletions": 67}, "files": [{"sha": "d5a330e5ede10ae3b3c7ef80b9622d76767df42d", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -1,4 +1,23 @@\n-2018-25-01  Paul Thomas  <pault@gcc.gnu.org>\n+2018-01-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/37577\n+\t* libgfortran.h: Remove GFC_DTYPE_DERIVED_1, GFC_DTYPE_DERIVED_2,\n+\tGFC_DTYPE_DERIVED_4, GFC_DTYPE_DERIVED_8 and GFC_DTYPE_DERIVED_16.\n+\t* m4/cshift1.m4: Remove GFC_DTYPE_DERIVED_1.\n+\t* generated/cshift1_16.c: Regenerated.\n+\t* generated/cshift1_4.c: Regenerated.\n+\t* generated/cshift1_8.c: Regenerated.\n+\t* intrinsics/cshift0.c: Remove GFC_DTYPE_DERIVED_1.\n+\t* intrinsics/pack_generic.c (pack): Move handling of other types\n+\tinto separate switch statement.\n+\t* intrinsics/spread_generic.c (spread): Likewise.\n+\t(spread_scalar): Likewise.\n+\t* intrinsics/unpack_generic.c (unpack1): Likewise.\n+\t(unpack0): Likewise.\n+\t* runtime/in_pack_generic.c (internal_pack): Likewise.\n+\t* runtime/in_unpack_generic.c (internal_unpack): Likewise.\n+\n+2018-01-25  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/37577\n \t* caf/single.c (_gfortran_caf_failed_images): Access the 'type'"}, {"sha": "44746b37e63ec2afd3388c25d6ebb10e5f466435", "filename": "libgfortran/generated/cshift1_16.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fgenerated%2Fcshift1_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fgenerated%2Fcshift1_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_16.c?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -120,7 +120,6 @@ cshift1 (gfc_array_char * const restrict ret,\n   {\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n-    case GFC_DTYPE_DERIVED_1:\n       cshift1_16_i1 ((gfc_array_i1 *)ret, (gfc_array_i1 *) array,\n       \t\t\th, pwhich);\n       return;"}, {"sha": "4bb1c60b64845262bb2b80819c85425efd895f36", "filename": "libgfortran/generated/cshift1_4.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fgenerated%2Fcshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fgenerated%2Fcshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_4.c?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -120,7 +120,6 @@ cshift1 (gfc_array_char * const restrict ret,\n   {\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n-    case GFC_DTYPE_DERIVED_1:\n       cshift1_4_i1 ((gfc_array_i1 *)ret, (gfc_array_i1 *) array,\n       \t\t\th, pwhich);\n       return;"}, {"sha": "1686e82aa3a41a0af5a864b16e9621e6ac04edcb", "filename": "libgfortran/generated/cshift1_8.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fgenerated%2Fcshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fgenerated%2Fcshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift1_8.c?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -120,7 +120,6 @@ cshift1 (gfc_array_char * const restrict ret,\n   {\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n-    case GFC_DTYPE_DERIVED_1:\n       cshift1_8_i1 ((gfc_array_i1 *)ret, (gfc_array_i1 *) array,\n       \t\t\th, pwhich);\n       return;"}, {"sha": "f9db48459ada530a348499c6e25b0bf975708ea9", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -95,7 +95,6 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n     {\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n-    case GFC_DTYPE_DERIVED_1:\n       cshift0_i1 ((gfc_array_i1 *)ret, (gfc_array_i1 *) array, shift, which);\n       return;\n "}, {"sha": "7de1e82c9ea2bb8f7aa3fe94ed74573461c553fa", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -255,7 +255,6 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n     {\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n-    case GFC_DTYPE_DERIVED_1:\n       pack_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) array,\n \t       (gfc_array_l1 *) mask, (gfc_array_i1 *) vector);\n       return;\n@@ -349,12 +348,19 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n       return;\n # endif\n #endif\n+    }\n+  \n+  /* For other types, let's check the actual alignment of the data pointers.\n+     If they are aligned, we can safely call the unpack functions.  */\n \n-      /* For derived types, let's check the actual alignment of the\n-\t data pointers.  If they are aligned, we can safely call\n-\t the unpack functions.  */\n+  switch (GFC_DESCRIPTOR_SIZE (array))\n+    {\n+    case 1:\n+      pack_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) array,\n+\t       (gfc_array_l1 *) mask, (gfc_array_i1 *) vector);\n+      return;\n \n-    case GFC_DTYPE_DERIVED_2:\n+    case 2:\n       if (GFC_UNALIGNED_2(ret->base_addr) || GFC_UNALIGNED_2(array->base_addr)\n \t  || (vector && GFC_UNALIGNED_2(vector->base_addr)))\n \tbreak;\n@@ -364,8 +370,8 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n \t\t   (gfc_array_l1 *) mask, (gfc_array_i2 *) vector);\n \t  return;\n \t}\n-\n-    case GFC_DTYPE_DERIVED_4:\n+\t      \n+    case 4:\n       if (GFC_UNALIGNED_4(ret->base_addr) || GFC_UNALIGNED_4(array->base_addr)\n \t  || (vector && GFC_UNALIGNED_4(vector->base_addr)))\n \tbreak;\n@@ -376,7 +382,7 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n \t  return;\n \t}\n \n-    case GFC_DTYPE_DERIVED_8:\n+    case 8:\n       if (GFC_UNALIGNED_8(ret->base_addr) || GFC_UNALIGNED_8(array->base_addr)\n \t  || (vector && GFC_UNALIGNED_8(vector->base_addr)))\n \tbreak;\n@@ -387,19 +393,20 @@ pack (gfc_array_char *ret, const gfc_array_char *array,\n \t  return;\n \t}\n \n-#ifdef HAVE_GFC_INTEGER_16\n-    case GFC_DTYPE_DERIVED_16:\n+#ifdef HAVE_GFC_INTEGER_16\t      \n+    case 16:\n       if (GFC_UNALIGNED_16(ret->base_addr) || GFC_UNALIGNED_16(array->base_addr)\n \t  || (vector && GFC_UNALIGNED_16(vector->base_addr)))\n \tbreak;\n       else\n \t{\n \t  pack_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) array,\n-\t\t   (gfc_array_l1 *) mask, (gfc_array_i16 *) vector);\n+\t\t    (gfc_array_l1 *) mask, (gfc_array_i16 *) vector);\n \t  return;\n \t}\n #endif\n-\n+    default:\n+      break;\n     }\n \n   size = GFC_DESCRIPTOR_SIZE (array);"}, {"sha": "5c86aba98a760971d84e8bfd0dbe5015cb94b69b", "filename": "libgfortran/intrinsics/spread_generic.c", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fintrinsics%2Fspread_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fintrinsics%2Fspread_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fspread_generic.c?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -274,7 +274,6 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n   type_size = GFC_DTYPE_TYPE_SIZE(ret);\n   switch(type_size)\n     {\n-    case GFC_DTYPE_DERIVED_1:\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n       spread_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) source,\n@@ -371,7 +370,16 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n # endif\n #endif\n \n-    case GFC_DTYPE_DERIVED_2:\n+    }\n+  \n+  switch (GFC_DESCRIPTOR_SIZE (ret))\n+    {\n+    case 1:\n+      spread_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) source,\n+\t\t *along, *pncopies);\n+      return;\n+\n+    case 2:\n       if (GFC_UNALIGNED_2(ret->base_addr) || GFC_UNALIGNED_2(source->base_addr))\n \tbreak;\n       else\n@@ -381,7 +389,7 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n \t  return;\n \t}\n \n-    case GFC_DTYPE_DERIVED_4:\n+    case 4:\n       if (GFC_UNALIGNED_4(ret->base_addr) || GFC_UNALIGNED_4(source->base_addr))\n \tbreak;\n       else\n@@ -391,7 +399,7 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n \t  return;\n \t}\n \n-    case GFC_DTYPE_DERIVED_8:\n+    case 8:\n       if (GFC_UNALIGNED_8(ret->base_addr) || GFC_UNALIGNED_8(source->base_addr))\n \tbreak;\n       else\n@@ -400,9 +408,8 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n \t\t     *along, *pncopies);\n \t  return;\n \t}\n-\n #ifdef HAVE_GFC_INTEGER_16\n-    case GFC_DTYPE_DERIVED_16:\n+    case 16:\n       if (GFC_UNALIGNED_16(ret->base_addr)\n \t  || GFC_UNALIGNED_16(source->base_addr))\n \tbreak;\n@@ -411,8 +418,9 @@ spread (gfc_array_char *ret, const gfc_array_char *source,\n \t  spread_i16 ((gfc_array_i16 *) ret, (gfc_array_i16 *) source,\n \t\t      *along, *pncopies);\n \t  return;\n-\t}\n+\t    }\n #endif\n+\n     }\n \n   spread_internal (ret, source, along, pncopies);\n@@ -470,7 +478,6 @@ spread_scalar (gfc_array_char *ret, const char *source,\n   type_size = GFC_DTYPE_TYPE_SIZE(ret);\n   switch(type_size)\n     {\n-    case GFC_DTYPE_DERIVED_1:\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n       spread_scalar_i1 ((gfc_array_i1 *) ret, (GFC_INTEGER_1 *) source,\n@@ -567,7 +574,16 @@ spread_scalar (gfc_array_char *ret, const char *source,\n # endif\n #endif\n \n-    case GFC_DTYPE_DERIVED_2:\n+    }\n+\n+  switch (GFC_DESCRIPTOR_SIZE(ret))\n+    {\n+    case 1:\n+      spread_scalar_i1 ((gfc_array_i1 *) ret, (GFC_INTEGER_1 *) source,\n+\t\t\t*along, *pncopies);\n+      return;\n+\n+    case 2:\n       if (GFC_UNALIGNED_2(ret->base_addr) || GFC_UNALIGNED_2(source))\n \tbreak;\n       else\n@@ -577,7 +593,7 @@ spread_scalar (gfc_array_char *ret, const char *source,\n \t  return;\n \t}\n \n-    case GFC_DTYPE_DERIVED_4:\n+    case 4:\n       if (GFC_UNALIGNED_4(ret->base_addr) || GFC_UNALIGNED_4(source))\n \tbreak;\n       else\n@@ -587,7 +603,7 @@ spread_scalar (gfc_array_char *ret, const char *source,\n \t  return;\n \t}\n \n-    case GFC_DTYPE_DERIVED_8:\n+    case 8:\n       if (GFC_UNALIGNED_8(ret->base_addr) || GFC_UNALIGNED_8(source))\n \tbreak;\n       else\n@@ -597,7 +613,7 @@ spread_scalar (gfc_array_char *ret, const char *source,\n \t  return;\n \t}\n #ifdef HAVE_GFC_INTEGER_16\n-    case GFC_DTYPE_DERIVED_16:\n+    case 16:\n       if (GFC_UNALIGNED_16(ret->base_addr) || GFC_UNALIGNED_16(source))\n \tbreak;\n       else\n@@ -607,6 +623,8 @@ spread_scalar (gfc_array_char *ret, const char *source,\n \t  return;\n \t}\n #endif\n+    default:\n+      break;\n     }\n \n   spread_internal_scalar (ret, source, along, pncopies);"}, {"sha": "c5b9ecb051984890c134e075e46fc599a7a9099e", "filename": "libgfortran/intrinsics/unpack_generic.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fintrinsics%2Funpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fintrinsics%2Funpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funpack_generic.c?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -222,7 +222,6 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n     {\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n-    case GFC_DTYPE_DERIVED_1:\n       unpack1_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) vector,\n \t\t  mask, (gfc_array_i1 *) field);\n       return;\n@@ -317,7 +316,16 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n # endif\n #endif\n \n-    case GFC_DTYPE_DERIVED_2:\n+    }\n+\n+  switch (GFC_DESCRIPTOR_SIZE(ret))\n+    {\n+    case 1:\n+      unpack1_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) vector,\n+\t\t  mask, (gfc_array_i1 *) field);\n+      return;\n+\n+    case 2:\n       if (GFC_UNALIGNED_2(ret->base_addr) || GFC_UNALIGNED_2(vector->base_addr)\n \t  || GFC_UNALIGNED_2(field->base_addr))\n \tbreak;\n@@ -328,7 +336,7 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n \t  return;\n \t}\n \n-    case GFC_DTYPE_DERIVED_4:\n+    case 4:\n       if (GFC_UNALIGNED_4(ret->base_addr) || GFC_UNALIGNED_4(vector->base_addr)\n \t  || GFC_UNALIGNED_4(field->base_addr))\n \tbreak;\n@@ -339,7 +347,7 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n \t  return;\n \t}\n \n-    case GFC_DTYPE_DERIVED_8:\n+    case 8:\n       if (GFC_UNALIGNED_8(ret->base_addr) || GFC_UNALIGNED_8(vector->base_addr)\n \t  || GFC_UNALIGNED_8(field->base_addr))\n \tbreak;\n@@ -351,7 +359,7 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n \t}\n \n #ifdef HAVE_GFC_INTEGER_16\n-    case GFC_DTYPE_DERIVED_16:\n+    case 16:\n       if (GFC_UNALIGNED_16(ret->base_addr)\n \t  || GFC_UNALIGNED_16(vector->base_addr)\n \t  || GFC_UNALIGNED_16(field->base_addr))\n@@ -363,6 +371,8 @@ unpack1 (gfc_array_char *ret, const gfc_array_char *vector,\n \t  return;\n \t}\n #endif\n+    default:\n+      break;\n     }\n \n   unpack_internal (ret, vector, mask, field, size);\n@@ -433,7 +443,6 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n     {\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n-    case GFC_DTYPE_DERIVED_1:\n       unpack0_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) vector,\n \t\t  mask, (GFC_INTEGER_1 *) field);\n       return;\n@@ -528,7 +537,16 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n # endif\n #endif\n \n-    case GFC_DTYPE_DERIVED_2:\n+    }\n+\n+  switch (GFC_DESCRIPTOR_SIZE(ret))\n+    {\n+    case 1:\n+      unpack0_i1 ((gfc_array_i1 *) ret, (gfc_array_i1 *) vector,\n+\t\t  mask, (GFC_INTEGER_1 *) field);\n+      return;\n+\n+    case 2:\n       if (GFC_UNALIGNED_2(ret->base_addr) || GFC_UNALIGNED_2(vector->base_addr)\n \t  || GFC_UNALIGNED_2(field))\n \tbreak;\n@@ -539,7 +557,7 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n \t  return;\n \t}\n \n-    case GFC_DTYPE_DERIVED_4:\n+    case 4:\n       if (GFC_UNALIGNED_4(ret->base_addr) || GFC_UNALIGNED_4(vector->base_addr)\n \t  || GFC_UNALIGNED_4(field))\n \tbreak;\n@@ -550,7 +568,7 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n \t  return;\n \t}\n \n-    case GFC_DTYPE_DERIVED_8:\n+    case 8:\n       if (GFC_UNALIGNED_8(ret->base_addr) || GFC_UNALIGNED_8(vector->base_addr)\n \t  || GFC_UNALIGNED_8(field))\n \tbreak;\n@@ -562,7 +580,7 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n \t}\n \n #ifdef HAVE_GFC_INTEGER_16\n-    case GFC_DTYPE_DERIVED_16:\n+    case 16:\n       if (GFC_UNALIGNED_16(ret->base_addr)\n \t  || GFC_UNALIGNED_16(vector->base_addr)\n \t  || GFC_UNALIGNED_16(field))\n@@ -574,7 +592,6 @@ unpack0 (gfc_array_char *ret, const gfc_array_char *vector,\n \t  return;\n \t}\n #endif\n-\n     }\n \n   memset (&tmp, 0, sizeof (tmp));"}, {"sha": "3b1dc722f42c080aa6033d61a22e93c2aebed688", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -490,19 +490,6 @@ typedef gfc_array_i4 gfc_array_s4;\n    | (sizeof(GFC_COMPLEX_16) << GFC_DTYPE_SIZE_SHIFT))\n #endif\n \n-#define GFC_DTYPE_DERIVED_1 ((BT_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n-   | (sizeof(GFC_INTEGER_1) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_DERIVED_2 ((BT_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n-   | (sizeof(GFC_INTEGER_2) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_DERIVED_4 ((BT_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n-   | (sizeof(GFC_INTEGER_4) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_DERIVED_8 ((BT_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n-   | (sizeof(GFC_INTEGER_8) << GFC_DTYPE_SIZE_SHIFT))\n-#ifdef HAVE_GFC_INTEGER_16\n-#define GFC_DTYPE_DERIVED_16 ((BT_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n-   | (sizeof(GFC_INTEGER_16) << GFC_DTYPE_SIZE_SHIFT))\n-#endif\n-\n /* Macros to determine the alignment of pointers.  */\n \n #define GFC_UNALIGNED_2(x) (((uintptr_t)(x)) & \\"}, {"sha": "bf1c7478404dcbbf1107f7eb65166042b335b3cf", "filename": "libgfortran/m4/cshift1.m4", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fm4%2Fcshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fm4%2Fcshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcshift1.m4?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -121,7 +121,6 @@ cshift1 (gfc_array_char * const restrict ret,\n   {\n     case GFC_DTYPE_LOGICAL_1:\n     case GFC_DTYPE_INTEGER_1:\n-    case GFC_DTYPE_DERIVED_1:\n       cshift1_'atype_kind`_i1 ((gfc_array_i1 *)ret, (gfc_array_i1 *) array,\n       \t\t\th, pwhich);\n       return;"}, {"sha": "1bc91367f612baedf65ccc261d90fe398b34a190", "filename": "libgfortran/runtime/in_pack_generic.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fruntime%2Fin_pack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fruntime%2Fin_pack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_pack_generic.c?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -55,7 +55,6 @@ internal_pack (gfc_array_char * source)\n     {\n     case GFC_DTYPE_INTEGER_1:\n     case GFC_DTYPE_LOGICAL_1:\n-    case GFC_DTYPE_DERIVED_1:\n       return internal_pack_1 ((gfc_array_i1 *) source);\n \n     case GFC_DTYPE_INTEGER_2:\n@@ -123,36 +122,44 @@ internal_pack (gfc_array_char * source)\n # endif\n #endif\n \n-    case GFC_DTYPE_DERIVED_2:\n+    default:\n+      break;\n+    }\n+\n+  switch(GFC_DESCRIPTOR_SIZE (source))\n+    {\n+    case 1:\n+      return internal_pack_1 ((gfc_array_i1 *) source);\n+\n+    case 2:\n       if (GFC_UNALIGNED_2(source->base_addr))\n \tbreak;\n       else\n \treturn internal_pack_2 ((gfc_array_i2 *) source);\n \n-    case GFC_DTYPE_DERIVED_4:\n+    case 4:\n       if (GFC_UNALIGNED_4(source->base_addr))\n \tbreak;\n       else\n \treturn internal_pack_4 ((gfc_array_i4 *) source);\n \n-    case GFC_DTYPE_DERIVED_8:\n+    case 8:\n       if (GFC_UNALIGNED_8(source->base_addr))\n \tbreak;\n       else\n \treturn internal_pack_8 ((gfc_array_i8 *) source);\n \n #ifdef HAVE_GFC_INTEGER_16\n-    case GFC_DTYPE_DERIVED_16:\n+    case 16:\n       if (GFC_UNALIGNED_16(source->base_addr))\n \tbreak;\n       else\n \treturn internal_pack_16 ((gfc_array_i16 *) source);\n #endif\n-\n     default:\n       break;\n     }\n-\n+  \n   dim = GFC_DESCRIPTOR_RANK (source);\n   ssize = 1;\n   packed = 1;"}, {"sha": "3df8ba55d36056dadedb4d24e052cdc1708b942c", "filename": "libgfortran/runtime/in_unpack_generic.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fruntime%2Fin_unpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6019ab18c777ee68508ce0c7a289043d2f60bcd/libgfortran%2Fruntime%2Fin_unpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_unpack_generic.c?ref=b6019ab18c777ee68508ce0c7a289043d2f60bcd", "patch": "@@ -54,7 +54,6 @@ internal_unpack (gfc_array_char * d, const void * s)\n     {\n     case GFC_DTYPE_INTEGER_1:\n     case GFC_DTYPE_LOGICAL_1:\n-    case GFC_DTYPE_DERIVED_1:\n       internal_unpack_1 ((gfc_array_i1 *) d, (const GFC_INTEGER_1 *) s);\n       return;\n \n@@ -136,15 +135,26 @@ internal_unpack (gfc_array_char * d, const void * s)\n # endif\n #endif\n \n-    case GFC_DTYPE_DERIVED_2:\n+    default:\n+      break;\n+    }\n+\n+  switch (GFC_DESCRIPTOR_SIZE(d))\n+    {\n+    case 1:\n+      internal_unpack_1 ((gfc_array_i1 *) d, (const GFC_INTEGER_1 *) s);\n+      return;\n+\n+    case 2:\n       if (GFC_UNALIGNED_2(d->base_addr) || GFC_UNALIGNED_2(s))\n \tbreak;\n       else\n \t{\n \t  internal_unpack_2 ((gfc_array_i2 *) d, (const GFC_INTEGER_2 *) s);\n \t  return;\n \t}\n-    case GFC_DTYPE_DERIVED_4:\n+      \n+    case 4:\n       if (GFC_UNALIGNED_4(d->base_addr) || GFC_UNALIGNED_4(s))\n \tbreak;\n       else\n@@ -153,7 +163,7 @@ internal_unpack (gfc_array_char * d, const void * s)\n \t  return;\n \t}\n \n-    case GFC_DTYPE_DERIVED_8:\n+    case 8:\n       if (GFC_UNALIGNED_8(d->base_addr) || GFC_UNALIGNED_8(s))\n \tbreak;\n       else\n@@ -163,7 +173,7 @@ internal_unpack (gfc_array_char * d, const void * s)\n \t}\n \n #ifdef HAVE_GFC_INTEGER_16\n-    case GFC_DTYPE_DERIVED_16:\n+    case 16:\n       if (GFC_UNALIGNED_16(d->base_addr) || GFC_UNALIGNED_16(s))\n \tbreak;\n       else\n@@ -172,7 +182,6 @@ internal_unpack (gfc_array_char * d, const void * s)\n \t  return;\n \t}\n #endif\n-\n     default:\n       break;\n     }"}]}