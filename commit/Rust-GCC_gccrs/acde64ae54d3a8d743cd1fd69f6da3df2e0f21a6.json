{"sha": "acde64ae54d3a8d743cd1fd69f6da3df2e0f21a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkZTY0YWU1NGQzYThkNzQzY2QxZmQ2OWY2ZGEzZGYyZTBmMjFhNg==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1991-05-31T20:45:39Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1991-05-31T20:45:39Z"}, "message": "entered into RCS\n\nFrom-SVN: r27", "tree": {"sha": "8a7cecd45159aafc71596bc4583e726d35282318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a7cecd45159aafc71596bc4583e726d35282318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acde64ae54d3a8d743cd1fd69f6da3df2e0f21a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acde64ae54d3a8d743cd1fd69f6da3df2e0f21a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acde64ae54d3a8d743cd1fd69f6da3df2e0f21a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acde64ae54d3a8d743cd1fd69f6da3df2e0f21a6/comments", "author": null, "committer": null, "parents": [{"sha": "95e304f764f25667da60fecd1b72b9e8b9e614bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e304f764f25667da60fecd1b72b9e8b9e614bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e304f764f25667da60fecd1b72b9e8b9e614bc"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "0b86a87af9b8c41ee0e6f1235dffcfbb3a6bb989", "filename": "gcc/pcp.h", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acde64ae54d3a8d743cd1fd69f6da3df2e0f21a6/gcc%2Fpcp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acde64ae54d3a8d743cd1fd69f6da3df2e0f21a6/gcc%2Fpcp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpcp.h?ref=acde64ae54d3a8d743cd1fd69f6da3df2e0f21a6", "patch": "@@ -0,0 +1,100 @@\n+/* pcp.h -- Describes the format of a precompiled file\n+   Copyright (C) 1990 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+\n+/* Structure allocated for every string in a precompiled file */\n+typedef struct stringdef STRINGDEF;\n+struct stringdef\n+{\n+  U_CHAR *contents;\t\t/* String to include */\n+  int len;\t\t\t/* Its length */\n+  int writeflag;\t\t/* Whether we write this */\n+  int lineno;\t\t\t/* Linenumber of source file */\n+  U_CHAR *filename;\t\t/* Name of source file */\n+  STRINGDEF *chain;\t\t/* Global list of strings in natural order */\n+  int output_mark;\t\t/* Where in the output this goes */\n+};\n+\n+typedef struct keydef KEYDEF;\n+struct keydef\n+{\n+  STRINGDEF *str;\n+  KEYDEF *chain;\n+};\n+\n+/* Format: */\n+/* A precompiled file starts with a series of #define and #undef\n+ statements:\n+    #define MAC DEF     ---   Indicates MAC must be defined with defn DEF\n+    #define MAC         ---   Indicates MAC must be defined with any defn\n+    #undef MAC          ---   Indicates MAC cannot be defined\n+\n+These preconditions must be true for a precompiled file to be used.  \n+The preconditions section is null terminated. */\n+\n+/* Then, there is a four byte number (in network byte order) which */\n+ /* indicates the number of strings the file contains. */\n+\n+/* Each string contains a STRINGDEF structure.  The only component of */\n+ /* the STRINGDEF structure which is used is the lineno field, which */\n+ /* should hold the line number in the original header file.  */\n+ /* Then follows the string, followed by a null.  Then comes a four */\n+ /* byte number (again, in network byte order) indicating the number */\n+ /* of keys for this string.  Each key is a KEYDEF structure, with */\n+ /* irrelevant contents, followed by the null-terminated string. */\n+\n+/* If the number of keys is 0, then there are no keys for the string, */\n+ /* in other words, the string will never be included.  If the number */\n+ /* of keys is -1, this is a special flag indicating there are no keys */\n+ /* in the file, and the string is mandatory (that is, it must be */\n+ /* included regardless in the included output).  */\n+\n+/* A file, then, looks like this:\n+\n+  Precondition 1\n+  Precondition 2\n+  . \n+  .\n+  .\n+  <NUL>\n+  Number of strings\n+    STRINGDEF\n+    String . . . <NUL>\n+    Number of keys\n+      KEYDEF\n+      Key . . . <NUL>\n+      KEYDEF \n+      Key . . . <NUL>\n+      .\n+      .\n+      .\n+    STRINGDEF\n+    String . . . <NUL>\n+    Number of keys\n+      KEYDEF\n+      Key . . . <NUL>\n+      .\n+      .\n+      .\n+    .\n+    .\n+    .\n+\n+*/"}, {"sha": "ac241541a44e062ceebcb0721c2bfd2f1735f5a7", "filename": "gcc/stack.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acde64ae54d3a8d743cd1fd69f6da3df2e0f21a6/gcc%2Fstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acde64ae54d3a8d743cd1fd69f6da3df2e0f21a6/gcc%2Fstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstack.h?ref=acde64ae54d3a8d743cd1fd69f6da3df2e0f21a6", "patch": "@@ -0,0 +1,41 @@\n+/* stack.h - structed access to object stacks\n+   Copyright (C) 1988 Free Software Foundation, Inc.\n+   Contributed by Michael Tiemann (tiemann@cygnus.com).\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Summary: this file contains additional structures that layer\n+   on top of obstacks for GNU C++.  */\n+\n+/* Stack of data placed on obstacks.  */\n+   \n+struct stack_level\n+{\n+  /* Pointer back to previous such level.  */\n+  struct stack_level *prev;\n+\n+  /* Point to obstack we should return to.  */\n+  struct obstack *obstack;\n+\n+  /* First place we start putting data.  */\n+  tree *first;\n+\n+  /* Number of entries we can have from `first'.\n+     Right now we are dumb: if we overflow, abort.  */\n+  int limit;\n+};\n+\n+struct stack_level *push_stack_level ();\n+struct stack_level *pop_stack_level ();"}]}