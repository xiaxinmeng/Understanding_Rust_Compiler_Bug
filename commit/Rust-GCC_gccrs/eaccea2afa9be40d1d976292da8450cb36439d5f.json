{"sha": "eaccea2afa9be40d1d976292da8450cb36439d5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFjY2VhMmFmYTliZTQwZDFkOTc2MjkyZGE4NDUwY2IzNjQzOWQ1Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-06-26T03:42:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-06-26T03:42:34Z"}, "message": "re PR c++/53498 (Compiler crashes during C++11 template magic compilation)\n\n\tPR c++/53498\n\tPR c++/53305\n\t* pt.c (tsubst_decl) [PARM_DECL]: Don't recurse into DECL_CHAIN\n\tif cp_unevaluated_operand is set.\n\t(tsubst_copy) [PARM_DECL]: Don't copy before tsubsting.\n\nFrom-SVN: r188973", "tree": {"sha": "03502474e28bb6b741afb1fb232702d106dc3b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03502474e28bb6b741afb1fb232702d106dc3b42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaccea2afa9be40d1d976292da8450cb36439d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaccea2afa9be40d1d976292da8450cb36439d5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaccea2afa9be40d1d976292da8450cb36439d5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaccea2afa9be40d1d976292da8450cb36439d5f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3b205be21d6d891e9c1e7942d57af1c510d49fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b205be21d6d891e9c1e7942d57af1c510d49fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b205be21d6d891e9c1e7942d57af1c510d49fd"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "e80d3dc0e2e08a45070363d66ee93f4c0cae7a50", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaccea2afa9be40d1d976292da8450cb36439d5f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaccea2afa9be40d1d976292da8450cb36439d5f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eaccea2afa9be40d1d976292da8450cb36439d5f", "patch": "@@ -1,5 +1,11 @@\n 2012-06-25  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53498\n+\tPR c++/53305\n+\t* pt.c (tsubst_decl) [PARM_DECL]: Don't recurse into DECL_CHAIN\n+\tif cp_unevaluated_operand is set.\n+\t(tsubst_copy) [PARM_DECL]: Don't copy before tsubsting.\n+\n \tPR c++/52988\n \t* typeck.c (decay_conversion): Don't discard side-effects from\n \texpressions of nullptr_t."}, {"sha": "7e1c46f77c364c1f1cb4408d3669ddbe93fde913", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaccea2afa9be40d1d976292da8450cb36439d5f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaccea2afa9be40d1d976292da8450cb36439d5f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=eaccea2afa9be40d1d976292da8450cb36439d5f", "patch": "@@ -10497,7 +10497,9 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n               DECL_CHAIN (prev_r) = r;\n           }\n \n-\tif (DECL_CHAIN (t))\n+\t/* If cp_unevaluated_operand is set, we're just looking for a\n+\t   single dummy parameter, so don't keep going.  */\n+\tif (DECL_CHAIN (t) && !cp_unevaluated_operand)\n \t  DECL_CHAIN (r) = tsubst (DECL_CHAIN (t), args,\n \t\t\t\t   complain, DECL_CHAIN (t));\n \n@@ -12078,8 +12080,6 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n       if (r == NULL_TREE)\n \t{\n-\t  tree c;\n-\n \t  /* We get here for a use of 'this' in an NSDMI.  */\n \t  if (DECL_NAME (t) == this_identifier\n \t      && at_function_scope_p ()\n@@ -12090,12 +12090,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t     declaration (such as in a late-specified return type).  Just\n \t     make a dummy decl, since it's only used for its type.  */\n \t  gcc_assert (cp_unevaluated_operand != 0);\n-\t  /* We copy T because want to tsubst the PARM_DECL only,\n-\t     not the following PARM_DECLs that are chained to T.  */\n-\t  c = copy_node (t);\n-\t  r = tsubst_decl (c, args, complain);\n-\t  if (r == NULL_TREE)\n-\t    return error_mark_node;\n+\t  r = tsubst_decl (t, args, complain);\n \t  /* Give it the template pattern as its context; its true context\n \t     hasn't been instantiated yet and this is good enough for\n \t     mangling.  */"}, {"sha": "a85b990ee8de8d863ce51aa86ac9a7a37fed9e1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaccea2afa9be40d1d976292da8450cb36439d5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaccea2afa9be40d1d976292da8450cb36439d5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eaccea2afa9be40d1d976292da8450cb36439d5f", "patch": "@@ -1,3 +1,10 @@\n+2012-06-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53498\n+\tPR c++/53305\n+\t* g++.dg/cpp0x/decltype38.C: New.\n+\t* g++.dg/cpp0x/variadic132.C: Remove dg-error.\n+\n 2012-06-25  Janis Johnson  <janisjo@codesourcery.com>\n \n \t* lib/target-supports-dg.exp (testname-for-summary): New."}, {"sha": "97ebb33a0311656698137778daca9c27a27ca133", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype38.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaccea2afa9be40d1d976292da8450cb36439d5f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaccea2afa9be40d1d976292da8450cb36439d5f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype38.C?ref=eaccea2afa9be40d1d976292da8450cb36439d5f", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/53498\n+// { dg-do compile { target c++11 } }\n+\n+template<typename... Args>\n+struct B\n+{\n+  template<typename U>\n+  static\n+  void b(const U& u, const Args&... args,\n+\t decltype(u.f(args...)) dummy)\n+  {\n+  }\n+};\n+\n+int main() {\n+  B<int> b;\n+}"}, {"sha": "1b9c28686843ae18cd60f957b2be99b1f9de362e", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic132.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaccea2afa9be40d1d976292da8450cb36439d5f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic132.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaccea2afa9be40d1d976292da8450cb36439d5f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic132.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic132.C?ref=eaccea2afa9be40d1d976292da8450cb36439d5f", "patch": "@@ -9,11 +9,11 @@ struct funct\n   int operator()(argTs...);\n };\n \n-template<class...> class test;\n+template<class...> struct test;\n \n template<template <class...> class tp,\n \t class... arg1Ts, class... arg2Ts>\n-class test<tp<arg1Ts...>, tp<arg2Ts...>>\n+struct test<tp<arg1Ts...>, tp<arg2Ts...>>\n {\n   template<class func, class...arg3Ts>\n     auto test2(func fun, arg1Ts... arg1s, arg3Ts... arg3s)\n@@ -23,5 +23,5 @@ class test<tp<arg1Ts...>, tp<arg2Ts...>>\n int main()\n {\n   test<tuple<>, tuple<char,int>> t2;\n-  t2.test2(funct(), 'a', 2);  // { dg-error \"no matching function\" }\n+  t2.test2(funct(), 'a', 2);\n }"}]}