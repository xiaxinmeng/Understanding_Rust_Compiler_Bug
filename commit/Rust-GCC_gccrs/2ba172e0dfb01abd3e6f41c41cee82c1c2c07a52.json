{"sha": "2ba172e0dfb01abd3e6f41c41cee82c1c2c07a52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJhMTcyZTBkZmIwMWFiZDNlNmY0MWM0MWNlZTgyYzFjMmMwN2E1Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-04-15T20:30:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-04-15T20:30:28Z"}, "message": "cfgexpand.c (expand_debug_expr): Use simplify_gen_{unary,binary,ternary} instead of gen_rtx_*.\n\n\t* cfgexpand.c (expand_debug_expr): Use\n\tsimplify_gen_{unary,binary,ternary} instead of gen_rtx_*.\n\nFrom-SVN: r172518", "tree": {"sha": "247a1f71669213fee417a08954ec3e057942828a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247a1f71669213fee417a08954ec3e057942828a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ba172e0dfb01abd3e6f41c41cee82c1c2c07a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba172e0dfb01abd3e6f41c41cee82c1c2c07a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ba172e0dfb01abd3e6f41c41cee82c1c2c07a52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ba172e0dfb01abd3e6f41c41cee82c1c2c07a52/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63d2a3533fb013061b3a20ddcc26233d6368de32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d2a3533fb013061b3a20ddcc26233d6368de32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d2a3533fb013061b3a20ddcc26233d6368de32"}], "stats": {"total": 251, "additions": 128, "deletions": 123}, "files": [{"sha": "3fe31ee42249e54e22356280c14ac212e326cba5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba172e0dfb01abd3e6f41c41cee82c1c2c07a52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba172e0dfb01abd3e6f41c41cee82c1c2c07a52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ba172e0dfb01abd3e6f41c41cee82c1c2c07a52", "patch": "@@ -1,3 +1,8 @@\n+2011-04-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cfgexpand.c (expand_debug_expr): Use\n+\tsimplify_gen_{unary,binary,ternary} instead of gen_rtx_*.\n+\n 2011-04-15  Michael Matz  <matz@suse.de>\n \n \t* tree.h (ALLOCA_FOR_VAR_P): Rename to CALL_ALLOCA_FOR_VAR_P."}, {"sha": "359c2da1bd3a8b368fc2d845496a5274e5377798", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 123, "deletions": 123, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ba172e0dfb01abd3e6f41c41cee82c1c2c07a52/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ba172e0dfb01abd3e6f41c41cee82c1c2c07a52/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=2ba172e0dfb01abd3e6f41c41cee82c1c2c07a52", "patch": "@@ -2375,6 +2375,7 @@ expand_debug_expr (tree exp)\n {\n   rtx op0 = NULL_RTX, op1 = NULL_RTX, op2 = NULL_RTX;\n   enum machine_mode mode = TYPE_MODE (TREE_TYPE (exp));\n+  enum machine_mode inner_mode = VOIDmode;\n   int unsignedp = TYPE_UNSIGNED (TREE_TYPE (exp));\n   addr_space_t as;\n \n@@ -2421,6 +2422,7 @@ expand_debug_expr (tree exp)\n \n     unary:\n     case tcc_unary:\n+      inner_mode = TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0)));\n       op0 = expand_debug_expr (TREE_OPERAND (exp, 0));\n       if (!op0)\n \treturn NULL_RTX;\n@@ -2524,7 +2526,7 @@ expand_debug_expr (tree exp)\n     case NOP_EXPR:\n     case CONVERT_EXPR:\n       {\n-\tenum machine_mode inner_mode = GET_MODE (op0);\n+\tinner_mode = GET_MODE (op0);\n \n \tif (mode == inner_mode)\n \t  return op0;\n@@ -2571,9 +2573,9 @@ expand_debug_expr (tree exp)\n \telse if (TREE_CODE_CLASS (TREE_CODE (exp)) == tcc_unary\n \t\t ? TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0)))\n \t\t : unsignedp)\n-\t  op0 = gen_rtx_ZERO_EXTEND (mode, op0);\n+\t  op0 = simplify_gen_unary (ZERO_EXTEND, mode, op0, inner_mode);\n \telse\n-\t  op0 = gen_rtx_SIGN_EXTEND (mode, op0);\n+\t  op0 = simplify_gen_unary (SIGN_EXTEND, mode, op0, inner_mode);\n \n \treturn op0;\n       }\n@@ -2708,7 +2710,8 @@ expand_debug_expr (tree exp)\n \t    /* Don't use offset_address here, we don't need a\n \t       recognizable address, and we don't want to generate\n \t       code.  */\n-\t    op0 = gen_rtx_MEM (mode, gen_rtx_PLUS (addrmode, op0, op1));\n+\t    op0 = gen_rtx_MEM (mode, simplify_gen_binary (PLUS, addrmode,\n+\t\t\t\t\t\t\t  op0, op1));\n \t  }\n \n \tif (MEM_P (op0))\n@@ -2781,25 +2784,23 @@ expand_debug_expr (tree exp)\n       }\n \n     case ABS_EXPR:\n-      return gen_rtx_ABS (mode, op0);\n+      return simplify_gen_unary (ABS, mode, op0, mode);\n \n     case NEGATE_EXPR:\n-      return gen_rtx_NEG (mode, op0);\n+      return simplify_gen_unary (NEG, mode, op0, mode);\n \n     case BIT_NOT_EXPR:\n-      return gen_rtx_NOT (mode, op0);\n+      return simplify_gen_unary (NOT, mode, op0, mode);\n \n     case FLOAT_EXPR:\n-      if (unsignedp)\n-\treturn gen_rtx_UNSIGNED_FLOAT (mode, op0);\n-      else\n-\treturn gen_rtx_FLOAT (mode, op0);\n+      return simplify_gen_unary (TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp,\n+\t\t\t\t\t\t\t\t\t 0)))\n+\t\t\t\t ? UNSIGNED_FLOAT : FLOAT, mode, op0,\n+\t\t\t\t inner_mode);\n \n     case FIX_TRUNC_EXPR:\n-      if (unsignedp)\n-\treturn gen_rtx_UNSIGNED_FIX (mode, op0);\n-      else\n-\treturn gen_rtx_FIX (mode, op0);\n+      return simplify_gen_unary (unsignedp ? UNSIGNED_FIX : FIX, mode, op0,\n+\t\t\t\t inner_mode);\n \n     case POINTER_PLUS_EXPR:\n       /* For the rare target where pointers are not the same size as\n@@ -2810,161 +2811,164 @@ expand_debug_expr (tree exp)\n \t  && GET_MODE (op0) != GET_MODE (op1))\n \t{\n \t  if (GET_MODE_BITSIZE (GET_MODE (op0)) < GET_MODE_BITSIZE (GET_MODE (op1)))\n-\t    op1 = gen_rtx_TRUNCATE (GET_MODE (op0), op1);\n+\t    op1 = simplify_gen_unary (TRUNCATE, GET_MODE (op0), op1,\n+\t\t\t\t      GET_MODE (op1));\n \t  else\n \t    /* We always sign-extend, regardless of the signedness of\n \t       the operand, because the operand is always unsigned\n \t       here even if the original C expression is signed.  */\n-\t    op1 = gen_rtx_SIGN_EXTEND (GET_MODE (op0), op1);\n+\t    op1 = simplify_gen_unary (SIGN_EXTEND, GET_MODE (op0), op1,\n+\t\t\t\t      GET_MODE (op1));\n \t}\n       /* Fall through.  */\n     case PLUS_EXPR:\n-      return gen_rtx_PLUS (mode, op0, op1);\n+      return simplify_gen_binary (PLUS, mode, op0, op1);\n \n     case MINUS_EXPR:\n-      return gen_rtx_MINUS (mode, op0, op1);\n+      return simplify_gen_binary (MINUS, mode, op0, op1);\n \n     case MULT_EXPR:\n-      return gen_rtx_MULT (mode, op0, op1);\n+      return simplify_gen_binary (MULT, mode, op0, op1);\n \n     case RDIV_EXPR:\n     case TRUNC_DIV_EXPR:\n     case EXACT_DIV_EXPR:\n       if (unsignedp)\n-\treturn gen_rtx_UDIV (mode, op0, op1);\n+\treturn simplify_gen_binary (UDIV, mode, op0, op1);\n       else\n-\treturn gen_rtx_DIV (mode, op0, op1);\n+\treturn simplify_gen_binary (DIV, mode, op0, op1);\n \n     case TRUNC_MOD_EXPR:\n-      if (unsignedp)\n-\treturn gen_rtx_UMOD (mode, op0, op1);\n-      else\n-\treturn gen_rtx_MOD (mode, op0, op1);\n+      return simplify_gen_binary (unsignedp ? UMOD : MOD, mode, op0, op1);\n \n     case FLOOR_DIV_EXPR:\n       if (unsignedp)\n-\treturn gen_rtx_UDIV (mode, op0, op1);\n+\treturn simplify_gen_binary (UDIV, mode, op0, op1);\n       else\n \t{\n-\t  rtx div = gen_rtx_DIV (mode, op0, op1);\n-\t  rtx mod = gen_rtx_MOD (mode, op0, op1);\n+\t  rtx div = simplify_gen_binary (DIV, mode, op0, op1);\n+\t  rtx mod = simplify_gen_binary (MOD, mode, op0, op1);\n \t  rtx adj = floor_sdiv_adjust (mode, mod, op1);\n-\t  return gen_rtx_PLUS (mode, div, adj);\n+\t  return simplify_gen_binary (PLUS, mode, div, adj);\n \t}\n \n     case FLOOR_MOD_EXPR:\n       if (unsignedp)\n-\treturn gen_rtx_UMOD (mode, op0, op1);\n+\treturn simplify_gen_binary (UMOD, mode, op0, op1);\n       else\n \t{\n-\t  rtx mod = gen_rtx_MOD (mode, op0, op1);\n+\t  rtx mod = simplify_gen_binary (MOD, mode, op0, op1);\n \t  rtx adj = floor_sdiv_adjust (mode, mod, op1);\n-\t  adj = gen_rtx_NEG (mode, gen_rtx_MULT (mode, adj, op1));\n-\t  return gen_rtx_PLUS (mode, mod, adj);\n+\t  adj = simplify_gen_unary (NEG, mode,\n+\t\t\t\t    simplify_gen_binary (MULT, mode, adj, op1),\n+\t\t\t\t    mode);\n+\t  return simplify_gen_binary (PLUS, mode, mod, adj);\n \t}\n \n     case CEIL_DIV_EXPR:\n       if (unsignedp)\n \t{\n-\t  rtx div = gen_rtx_UDIV (mode, op0, op1);\n-\t  rtx mod = gen_rtx_UMOD (mode, op0, op1);\n+\t  rtx div = simplify_gen_binary (UDIV, mode, op0, op1);\n+\t  rtx mod = simplify_gen_binary (UMOD, mode, op0, op1);\n \t  rtx adj = ceil_udiv_adjust (mode, mod, op1);\n-\t  return gen_rtx_PLUS (mode, div, adj);\n+\t  return simplify_gen_binary (PLUS, mode, div, adj);\n \t}\n       else\n \t{\n-\t  rtx div = gen_rtx_DIV (mode, op0, op1);\n-\t  rtx mod = gen_rtx_MOD (mode, op0, op1);\n+\t  rtx div = simplify_gen_binary (DIV, mode, op0, op1);\n+\t  rtx mod = simplify_gen_binary (MOD, mode, op0, op1);\n \t  rtx adj = ceil_sdiv_adjust (mode, mod, op1);\n-\t  return gen_rtx_PLUS (mode, div, adj);\n+\t  return simplify_gen_binary (PLUS, mode, div, adj);\n \t}\n \n     case CEIL_MOD_EXPR:\n       if (unsignedp)\n \t{\n-\t  rtx mod = gen_rtx_UMOD (mode, op0, op1);\n+\t  rtx mod = simplify_gen_binary (UMOD, mode, op0, op1);\n \t  rtx adj = ceil_udiv_adjust (mode, mod, op1);\n-\t  adj = gen_rtx_NEG (mode, gen_rtx_MULT (mode, adj, op1));\n-\t  return gen_rtx_PLUS (mode, mod, adj);\n+\t  adj = simplify_gen_unary (NEG, mode,\n+\t\t\t\t    simplify_gen_binary (MULT, mode, adj, op1),\n+\t\t\t\t    mode);\n+\t  return simplify_gen_binary (PLUS, mode, mod, adj);\n \t}\n       else\n \t{\n-\t  rtx mod = gen_rtx_MOD (mode, op0, op1);\n+\t  rtx mod = simplify_gen_binary (MOD, mode, op0, op1);\n \t  rtx adj = ceil_sdiv_adjust (mode, mod, op1);\n-\t  adj = gen_rtx_NEG (mode, gen_rtx_MULT (mode, adj, op1));\n-\t  return gen_rtx_PLUS (mode, mod, adj);\n+\t  adj = simplify_gen_unary (NEG, mode,\n+\t\t\t\t    simplify_gen_binary (MULT, mode, adj, op1),\n+\t\t\t\t    mode);\n+\t  return simplify_gen_binary (PLUS, mode, mod, adj);\n \t}\n \n     case ROUND_DIV_EXPR:\n       if (unsignedp)\n \t{\n-\t  rtx div = gen_rtx_UDIV (mode, op0, op1);\n-\t  rtx mod = gen_rtx_UMOD (mode, op0, op1);\n+\t  rtx div = simplify_gen_binary (UDIV, mode, op0, op1);\n+\t  rtx mod = simplify_gen_binary (UMOD, mode, op0, op1);\n \t  rtx adj = round_udiv_adjust (mode, mod, op1);\n-\t  return gen_rtx_PLUS (mode, div, adj);\n+\t  return simplify_gen_binary (PLUS, mode, div, adj);\n \t}\n       else\n \t{\n-\t  rtx div = gen_rtx_DIV (mode, op0, op1);\n-\t  rtx mod = gen_rtx_MOD (mode, op0, op1);\n+\t  rtx div = simplify_gen_binary (DIV, mode, op0, op1);\n+\t  rtx mod = simplify_gen_binary (MOD, mode, op0, op1);\n \t  rtx adj = round_sdiv_adjust (mode, mod, op1);\n-\t  return gen_rtx_PLUS (mode, div, adj);\n+\t  return simplify_gen_binary (PLUS, mode, div, adj);\n \t}\n \n     case ROUND_MOD_EXPR:\n       if (unsignedp)\n \t{\n-\t  rtx mod = gen_rtx_UMOD (mode, op0, op1);\n+\t  rtx mod = simplify_gen_binary (UMOD, mode, op0, op1);\n \t  rtx adj = round_udiv_adjust (mode, mod, op1);\n-\t  adj = gen_rtx_NEG (mode, gen_rtx_MULT (mode, adj, op1));\n-\t  return gen_rtx_PLUS (mode, mod, adj);\n+\t  adj = simplify_gen_unary (NEG, mode,\n+\t\t\t\t    simplify_gen_binary (MULT, mode, adj, op1),\n+\t\t\t\t    mode);\n+\t  return simplify_gen_binary (PLUS, mode, mod, adj);\n \t}\n       else\n \t{\n-\t  rtx mod = gen_rtx_MOD (mode, op0, op1);\n+\t  rtx mod = simplify_gen_binary (MOD, mode, op0, op1);\n \t  rtx adj = round_sdiv_adjust (mode, mod, op1);\n-\t  adj = gen_rtx_NEG (mode, gen_rtx_MULT (mode, adj, op1));\n-\t  return gen_rtx_PLUS (mode, mod, adj);\n+\t  adj = simplify_gen_unary (NEG, mode,\n+\t\t\t\t    simplify_gen_binary (MULT, mode, adj, op1),\n+\t\t\t\t    mode);\n+\t  return simplify_gen_binary (PLUS, mode, mod, adj);\n \t}\n \n     case LSHIFT_EXPR:\n-      return gen_rtx_ASHIFT (mode, op0, op1);\n+      return simplify_gen_binary (ASHIFT, mode, op0, op1);\n \n     case RSHIFT_EXPR:\n       if (unsignedp)\n-\treturn gen_rtx_LSHIFTRT (mode, op0, op1);\n+\treturn simplify_gen_binary (LSHIFTRT, mode, op0, op1);\n       else\n-\treturn gen_rtx_ASHIFTRT (mode, op0, op1);\n+\treturn simplify_gen_binary (ASHIFTRT, mode, op0, op1);\n \n     case LROTATE_EXPR:\n-      return gen_rtx_ROTATE (mode, op0, op1);\n+      return simplify_gen_binary (ROTATE, mode, op0, op1);\n \n     case RROTATE_EXPR:\n-      return gen_rtx_ROTATERT (mode, op0, op1);\n+      return simplify_gen_binary (ROTATERT, mode, op0, op1);\n \n     case MIN_EXPR:\n-      if (unsignedp)\n-\treturn gen_rtx_UMIN (mode, op0, op1);\n-      else\n-\treturn gen_rtx_SMIN (mode, op0, op1);\n+      return simplify_gen_binary (unsignedp ? UMIN : SMIN, mode, op0, op1);\n \n     case MAX_EXPR:\n-      if (unsignedp)\n-\treturn gen_rtx_UMAX (mode, op0, op1);\n-      else\n-\treturn gen_rtx_SMAX (mode, op0, op1);\n+      return simplify_gen_binary (unsignedp ? UMAX : SMAX, mode, op0, op1);\n \n     case BIT_AND_EXPR:\n     case TRUTH_AND_EXPR:\n-      return gen_rtx_AND (mode, op0, op1);\n+      return simplify_gen_binary (AND, mode, op0, op1);\n \n     case BIT_IOR_EXPR:\n     case TRUTH_OR_EXPR:\n-      return gen_rtx_IOR (mode, op0, op1);\n+      return simplify_gen_binary (IOR, mode, op0, op1);\n \n     case BIT_XOR_EXPR:\n     case TRUTH_XOR_EXPR:\n-      return gen_rtx_XOR (mode, op0, op1);\n+      return simplify_gen_binary (XOR, mode, op0, op1);\n \n     case TRUTH_ANDIF_EXPR:\n       return gen_rtx_IF_THEN_ELSE (mode, op0, op1, const0_rtx);\n@@ -2973,61 +2977,53 @@ expand_debug_expr (tree exp)\n       return gen_rtx_IF_THEN_ELSE (mode, op0, const_true_rtx, op1);\n \n     case TRUTH_NOT_EXPR:\n-      return gen_rtx_EQ (mode, op0, const0_rtx);\n+      return simplify_gen_relational (EQ, mode, inner_mode, op0, const0_rtx);\n \n     case LT_EXPR:\n-      if (unsignedp)\n-\treturn gen_rtx_LTU (mode, op0, op1);\n-      else\n-\treturn gen_rtx_LT (mode, op0, op1);\n+      return simplify_gen_relational (unsignedp ? LTU : LT, mode, inner_mode,\n+\t\t\t\t      op0, op1);\n \n     case LE_EXPR:\n-      if (unsignedp)\n-\treturn gen_rtx_LEU (mode, op0, op1);\n-      else\n-\treturn gen_rtx_LE (mode, op0, op1);\n+      return simplify_gen_relational (unsignedp ? LEU : LE, mode, inner_mode,\n+\t\t\t\t      op0, op1);\n \n     case GT_EXPR:\n-      if (unsignedp)\n-\treturn gen_rtx_GTU (mode, op0, op1);\n-      else\n-\treturn gen_rtx_GT (mode, op0, op1);\n+      return simplify_gen_relational (unsignedp ? GTU : GT, mode, inner_mode,\n+\t\t\t\t      op0, op1);\n \n     case GE_EXPR:\n-      if (unsignedp)\n-\treturn gen_rtx_GEU (mode, op0, op1);\n-      else\n-\treturn gen_rtx_GE (mode, op0, op1);\n+      return simplify_gen_relational (unsignedp ? GEU : GE, mode, inner_mode,\n+\t\t\t\t      op0, op1);\n \n     case EQ_EXPR:\n-      return gen_rtx_EQ (mode, op0, op1);\n+      return simplify_gen_relational (EQ, mode, inner_mode, op0, op1);\n \n     case NE_EXPR:\n-      return gen_rtx_NE (mode, op0, op1);\n+      return simplify_gen_relational (NE, mode, inner_mode, op0, op1);\n \n     case UNORDERED_EXPR:\n-      return gen_rtx_UNORDERED (mode, op0, op1);\n+      return simplify_gen_relational (UNORDERED, mode, inner_mode, op0, op1);\n \n     case ORDERED_EXPR:\n-      return gen_rtx_ORDERED (mode, op0, op1);\n+      return simplify_gen_relational (ORDERED, mode, inner_mode, op0, op1);\n \n     case UNLT_EXPR:\n-      return gen_rtx_UNLT (mode, op0, op1);\n+      return simplify_gen_relational (UNLT, mode, inner_mode, op0, op1);\n \n     case UNLE_EXPR:\n-      return gen_rtx_UNLE (mode, op0, op1);\n+      return simplify_gen_relational (UNLE, mode, inner_mode, op0, op1);\n \n     case UNGT_EXPR:\n-      return gen_rtx_UNGT (mode, op0, op1);\n+      return simplify_gen_relational (UNGT, mode, inner_mode, op0, op1);\n \n     case UNGE_EXPR:\n-      return gen_rtx_UNGE (mode, op0, op1);\n+      return simplify_gen_relational (UNGE, mode, inner_mode, op0, op1);\n \n     case UNEQ_EXPR:\n-      return gen_rtx_UNEQ (mode, op0, op1);\n+      return simplify_gen_relational (UNEQ, mode, inner_mode, op0, op1);\n \n     case LTGT_EXPR:\n-      return gen_rtx_LTGT (mode, op0, op1);\n+      return simplify_gen_relational (LTGT, mode, inner_mode, op0, op1);\n \n     case COND_EXPR:\n       return gen_rtx_IF_THEN_ELSE (mode, op0, op1, op2);\n@@ -3043,8 +3039,9 @@ expand_debug_expr (tree exp)\n     case CONJ_EXPR:\n       if (GET_CODE (op0) == CONCAT)\n \treturn gen_rtx_CONCAT (mode, XEXP (op0, 0),\n-\t\t\t       gen_rtx_NEG (GET_MODE_INNER (mode),\n-\t\t\t\t\t    XEXP (op0, 1)));\n+\t\t\t       simplify_gen_unary (NEG, GET_MODE_INNER (mode),\n+\t\t\t\t\t\t   XEXP (op0, 1),\n+\t\t\t\t\t\t   GET_MODE_INNER (mode)));\n       else\n \t{\n \t  enum machine_mode imode = GET_MODE_INNER (mode);\n@@ -3244,16 +3241,18 @@ expand_debug_expr (tree exp)\n       if (SCALAR_INT_MODE_P (GET_MODE (op0))\n \t  && SCALAR_INT_MODE_P (mode))\n \t{\n-\t  if (TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0))))\n-\t    op0 = gen_rtx_ZERO_EXTEND (mode, op0);\n-\t  else\n-\t    op0 = gen_rtx_SIGN_EXTEND (mode, op0);\n-\t  if (TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 1))))\n-\t    op1 = gen_rtx_ZERO_EXTEND (mode, op1);\n-\t  else\n-\t    op1 = gen_rtx_SIGN_EXTEND (mode, op1);\n-\t  op0 = gen_rtx_MULT (mode, op0, op1);\n-\t  return gen_rtx_PLUS (mode, op0, op2);\n+\t  op0\n+\t    = simplify_gen_unary (TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp,\n+\t\t\t\t\t\t\t\t\t  0)))\n+\t\t\t\t  ? ZERO_EXTEND : SIGN_EXTEND, mode, op0,\n+\t\t\t\t  inner_mode);\n+\t  op1\n+\t    = simplify_gen_unary (TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp,\n+\t\t\t\t\t\t\t\t\t  1)))\n+\t\t\t\t  ? ZERO_EXTEND : SIGN_EXTEND, mode, op1,\n+\t\t\t\t  inner_mode);\n+\t  op0 = simplify_gen_binary (MULT, mode, op0, op1);\n+\t  return simplify_gen_binary (PLUS, mode, op0, op2);\n \t}\n       return NULL;\n \n@@ -3263,7 +3262,7 @@ expand_debug_expr (tree exp)\n       if (SCALAR_INT_MODE_P (GET_MODE (op0))\n \t  && SCALAR_INT_MODE_P (mode))\n \t{\n-\t  enum machine_mode inner_mode = GET_MODE (op0);\n+\t  inner_mode = GET_MODE (op0);\n \t  if (TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0))))\n \t    op0 = simplify_gen_unary (ZERO_EXTEND, mode, op0, inner_mode);\n \t  else\n@@ -3272,30 +3271,31 @@ expand_debug_expr (tree exp)\n \t    op1 = simplify_gen_unary (ZERO_EXTEND, mode, op1, inner_mode);\n \t  else\n \t    op1 = simplify_gen_unary (SIGN_EXTEND, mode, op1, inner_mode);\n-\t  op0 = gen_rtx_MULT (mode, op0, op1);\n+\t  op0 = simplify_gen_binary (MULT, mode, op0, op1);\n \t  if (TREE_CODE (exp) == WIDEN_MULT_EXPR)\n \t    return op0;\n \t  else if (TREE_CODE (exp) == WIDEN_MULT_PLUS_EXPR)\n-\t    return gen_rtx_PLUS (mode, op0, op2);\n+\t    return simplify_gen_binary (PLUS, mode, op0, op2);\n \t  else\n-\t    return gen_rtx_MINUS (mode, op2, op0);\n+\t    return simplify_gen_binary (MINUS, mode, op2, op0);\n \t}\n       return NULL;\n \n     case WIDEN_SUM_EXPR:\n       if (SCALAR_INT_MODE_P (GET_MODE (op0))\n \t  && SCALAR_INT_MODE_P (mode))\n \t{\n-\t  if (TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0))))\n-\t    op0 = gen_rtx_ZERO_EXTEND (mode, op0);\n-\t  else\n-\t    op0 = gen_rtx_SIGN_EXTEND (mode, op0);\n-\t  return gen_rtx_PLUS (mode, op0, op1);\n+\t  op0\n+\t    = simplify_gen_unary (TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp,\n+\t\t\t\t\t\t\t\t\t  0)))\n+\t\t\t\t  ? ZERO_EXTEND : SIGN_EXTEND, mode, op0,\n+\t\t\t\t  inner_mode);\n+\t  return simplify_gen_binary (PLUS, mode, op0, op1);\n \t}\n       return NULL;\n \n     case FMA_EXPR:\n-      return gen_rtx_FMA (mode, op0, op1, op2);\n+      return simplify_gen_ternary (FMA, mode, inner_mode, op0, op1, op2);\n \n     default:\n     flag_unsupported:"}]}