{"sha": "b20cbca237158906c7d24b32a4e77babbebf9a1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIwY2JjYTIzNzE1ODkwNmM3ZDI0YjMyYTRlNzdiYWJiZWJmOWExYw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2003-04-20T22:43:59Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-20T22:43:59Z"}, "message": "* varasm.c (struct deferred_constant, defer_addressed_constants_flag)\n\t(defer_addressed_constants, output_deferred_addressed_constants): Kill.\n\t(output_constant_def): Remove code predicated on\n\tdefer_addressed_constants_flag.\n\n\t* output.h: Remove prototypes of deleted functions.\n\t* c-typeck.c (constructor_subconstants_deferred): Kill.\n\t(struct initializer_stack): Remove 'deferred' field.\n\t(start_init): Remove all references to the above.\n\t(finish_init): Likewise. Also remove never-executed call to\n\toutput_deferred_addressed_constants.  Pull assignment to\n\tdefstr out of if expression.\n\nFrom-SVN: r65865", "tree": {"sha": "08cb32166631a746c08540bc52e20a56ed340060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08cb32166631a746c08540bc52e20a56ed340060"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b20cbca237158906c7d24b32a4e77babbebf9a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20cbca237158906c7d24b32a4e77babbebf9a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20cbca237158906c7d24b32a4e77babbebf9a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20cbca237158906c7d24b32a4e77babbebf9a1c/comments", "author": null, "committer": null, "parents": [{"sha": "6f9106c2ec710be644919df873af73e52a14959f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9106c2ec710be644919df873af73e52a14959f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f9106c2ec710be644919df873af73e52a14959f"}], "stats": {"total": 144, "additions": 36, "deletions": 108}, "files": [{"sha": "5c7ff689178a755c3293f5c607fcecf94288a5da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20cbca237158906c7d24b32a4e77babbebf9a1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20cbca237158906c7d24b32a4e77babbebf9a1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b20cbca237158906c7d24b32a4e77babbebf9a1c", "patch": "@@ -1,3 +1,18 @@\n+2003-04-20  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* varasm.c (struct deferred_constant, defer_addressed_constants_flag)\n+\t(defer_addressed_constants, output_deferred_addressed_constants): Kill.\n+\t(output_constant_def): Remove code predicated on\n+\tdefer_addressed_constants_flag.\n+\n+\t* output.h: Remove prototypes of deleted functions.\n+\t* c-typeck.c (constructor_subconstants_deferred): Kill.\n+\t(struct initializer_stack): Remove 'deferred' field.\n+\t(start_init): Remove all references to the above.\n+\t(finish_init): Likewise. Also remove never-executed call to\n+\toutput_deferred_addressed_constants.  Pull assignment to\n+\tdefstr out of if expression.\n+\n 2003-04-20  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* cpphash.h (NOTE_ESC_NL, NOTE_ESC_SPACE_NL, NOTE_TRIGRAPH,"}, {"sha": "33bce26ede62e16a360534e5285006b45d2fda05", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20cbca237158906c7d24b32a4e77babbebf9a1c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20cbca237158906c7d24b32a4e77babbebf9a1c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b20cbca237158906c7d24b32a4e77babbebf9a1c", "patch": "@@ -4931,9 +4931,6 @@ static int constructor_simple;\n /* 1 if this constructor is erroneous so far.  */\n static int constructor_erroneous;\n \n-/* 1 if have called defer_addressed_constants.  */\n-static int constructor_subconstants_deferred;\n-\n /* Structure for managing pending initializer elements, organized as an\n    AVL tree.  */\n \n@@ -5051,7 +5048,6 @@ struct initializer_stack\n   char top_level;\n   char require_constant_value;\n   char require_constant_elements;\n-  char deferred;\n };\n \n struct initializer_stack *initializer_stack;\n@@ -5082,14 +5078,12 @@ start_init (decl, asmspec_tree, top_level)\n   p->spelling = spelling;\n   p->spelling_base = spelling_base;\n   p->spelling_size = spelling_size;\n-  p->deferred = constructor_subconstants_deferred;\n   p->top_level = constructor_top_level;\n   p->next = initializer_stack;\n   initializer_stack = p;\n \n   constructor_decl = decl;\n   constructor_asmspec = asmspec;\n-  constructor_subconstants_deferred = 0;\n   constructor_designated = 0;\n   constructor_top_level = top_level;\n \n@@ -5131,12 +5125,6 @@ finish_init ()\n {\n   struct initializer_stack *p = initializer_stack;\n \n-  /* Output subconstants (string constants, usually)\n-     that were referenced within this initializer and saved up.\n-     Must do this if and only if we called defer_addressed_constants.  */\n-  if (constructor_subconstants_deferred)\n-    output_deferred_addressed_constants ();\n-\n   /* Free the whole constructor stack of this initializer.  */\n   while (constructor_stack)\n     {\n@@ -5159,7 +5147,6 @@ finish_init ()\n   spelling = p->spelling;\n   spelling_base = p->spelling_base;\n   spelling_size = p->spelling_size;\n-  constructor_subconstants_deferred = p->deferred;\n   constructor_top_level = p->top_level;\n   initializer_stack = p->next;\n   free (p);"}, {"sha": "389b95f3962d7ccd4e649fe2a597c29e0c11441e", "filename": "gcc/output.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20cbca237158906c7d24b32a4e77babbebf9a1c/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20cbca237158906c7d24b32a4e77babbebf9a1c/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=b20cbca237158906c7d24b32a4e77babbebf9a1c", "patch": "@@ -334,13 +334,6 @@ extern void assemble_real\t\tPARAMS ((REAL_VALUE_TYPE,\n \t\t\t\t\t\t unsigned));\n #endif\n \n-/* Start deferring output of subconstants.  */\n-extern void defer_addressed_constants\tPARAMS ((void));\n-\n-/* Stop deferring output of subconstants,\n-   and output now all those that have been deferred.  */\n-extern void output_deferred_addressed_constants PARAMS ((void));\n-\n /* Return the size of the constant pool.  */\n extern int get_pool_size\t\tPARAMS ((void));\n "}, {"sha": "fed8b9667c08fd23743dd3caadde7602f3feb7d2", "filename": "gcc/varasm.c", "status": "modified", "additions": 21, "deletions": 88, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20cbca237158906c7d24b32a4e77babbebf9a1c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20cbca237158906c7d24b32a4e77babbebf9a1c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b20cbca237158906c7d24b32a4e77babbebf9a1c", "patch": "@@ -2465,54 +2465,6 @@ compare_constant (t1, t2)\n   abort ();\n }\n \f\n-/* Record a list of constant expressions that were passed to\n-   output_constant_def but that could not be output right away.  */\n-\n-struct deferred_constant\n-{\n-  struct deferred_constant *next;\n-  tree exp;\n-  int reloc;\n-  int labelno;\n-};\n-\n-static struct deferred_constant *deferred_constants;\n-\n-/* Nonzero means defer output of addressed subconstants\n-   (i.e., those for which output_constant_def is called.)  */\n-static int defer_addressed_constants_flag;\n-\n-/* Start deferring output of subconstants.  */\n-\n-void\n-defer_addressed_constants ()\n-{\n-  defer_addressed_constants_flag++;\n-}\n-\n-/* Stop deferring output of subconstants,\n-   and output now all those that have been deferred.  */\n-\n-void\n-output_deferred_addressed_constants ()\n-{\n-  struct deferred_constant *p, *next;\n-\n-  defer_addressed_constants_flag--;\n-\n-  if (defer_addressed_constants_flag > 0)\n-    return;\n-\n-  for (p = deferred_constants; p; p = next)\n-    {\n-      output_constant_def_contents (p->exp, p->reloc, p->labelno);\n-      next = p->next;\n-      free (p);\n-    }\n-\n-  deferred_constants = 0;\n-}\n-\n /* Make a copy of the whole tree structure for a constant.  This\n    handles the same types of nodes that compare_constant handles.  */\n \n@@ -2586,7 +2538,7 @@ copy_constant (exp)\n \n    If assembler code for such a constant has already been output,\n    return an rtx to refer to it.\n-   Otherwise, output such a constant in memory (or defer it for later)\n+   Otherwise, output such a constant in memory\n    and generate an rtx for it.\n \n    If DEFER is nonzero, the output of string constants can be deferred\n@@ -2680,9 +2632,7 @@ output_constant_def (exp, defer)\n       desc->label = XSTR (XEXP (desc->rtl, 0), 0);\n     }\n \n-  if (found\n-      && STRING_POOL_ADDRESS_P (XEXP (rtl, 0))\n-      && (!defer || defer_addressed_constants_flag))\n+  if (found && !defer && STRING_POOL_ADDRESS_P (XEXP (rtl, 0)))\n     {\n       defstr = (struct deferred_string **)\n \thtab_find_slot_with_hash (const_str_htab, desc->label,\n@@ -2699,48 +2649,31 @@ output_constant_def (exp, defer)\n     }\n \n   /* If this is the first time we've seen this particular constant,\n-     output it (or defer its output for later).  */\n-  if (! found)\n+     output it.  Do no output if -fsyntax-only.  */\n+  if (! found && ! flag_syntax_only)\n     {\n-      if (defer_addressed_constants_flag)\n-\t{\n-\t  struct deferred_constant *p\n-\t    = (struct deferred_constant *)\n-\t      xmalloc (sizeof (struct deferred_constant));\n-\n-\t  p->exp = desc->value;\n-\t  p->reloc = reloc;\n-\t  p->labelno = labelno;\n-\t  p->next = deferred_constants;\n-\t  deferred_constants = p;\n-\t}\n+      if (!defer || TREE_CODE (exp) != STRING_CST\n+\t  || flag_writable_strings)\n+\toutput_constant_def_contents (exp, reloc, labelno);\n       else\n \t{\n-\t  /* Do no output if -fsyntax-only.  */\n-\t  if (! flag_syntax_only)\n+\t  defstr = (struct deferred_string **)\n+\t    htab_find_slot_with_hash (const_str_htab, desc->label,\n+\t\t\t\t      STRHASH (desc->label), INSERT);\n+\t  if (!defstr)\n+\t    output_constant_def_contents (exp, reloc, labelno);\n+\t  else\n \t    {\n-\t      if (TREE_CODE (exp) != STRING_CST\n-\t\t  || !defer\n-\t\t  || flag_writable_strings\n-\t\t  || (defstr = (struct deferred_string **)\n-\t\t\t       htab_find_slot_with_hash (const_str_htab,\n-\t\t\t\t\t\t\t desc->label,\n-\t\t\t\t\t\t\t STRHASH (desc->label),\n-\t\t\t\t\t\t\t INSERT)) == NULL)\n-\t\toutput_constant_def_contents (exp, reloc, labelno);\n-\t      else\n-\t\t{\n-\t\t  struct deferred_string *p;\n+\t      struct deferred_string *p;\n \n-\t\t  p = (struct deferred_string *)\n-\t\t      ggc_alloc (sizeof (struct deferred_string));\n+\t      p = (struct deferred_string *)\n+\t\tggc_alloc (sizeof (struct deferred_string));\n \n-\t\t  p->exp = desc->value;\n-\t\t  p->label = desc->label;\n-\t\t  p->labelno = labelno;\n-\t\t  *defstr = p;\n-\t\t  STRING_POOL_ADDRESS_P (XEXP (rtl, 0)) = 1;\n-\t\t}\n+\t      p->exp = desc->value;\n+\t      p->label = desc->label;\n+\t      p->labelno = labelno;\n+\t      *defstr = p;\n+\t      STRING_POOL_ADDRESS_P (XEXP (rtl, 0)) = 1;\n \t    }\n \t}\n     }"}]}