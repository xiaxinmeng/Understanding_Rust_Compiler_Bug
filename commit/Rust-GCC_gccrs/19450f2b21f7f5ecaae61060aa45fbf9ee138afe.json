{"sha": "19450f2b21f7f5ecaae61060aa45fbf9ee138afe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk0NTBmMmIyMWY3ZjVlY2FhZTYxMDYwYWE0NWZiZjllZTEzOGFmZQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2006-08-02T13:31:56Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2006-08-02T13:31:56Z"}, "message": "re PR debug/28063 (Dwarf no longer uses merged strings for DW_AT_comp_dir)\n\ngcc/\n\tPR debug/28063\n\t* dwarf2out.c (prune_unused_types_prune): Move call to\n\tprune_unused_types_update_strings to cover the parent DIE also.\ngcc/testuite/\n\tPR debug/28063\n\t* gcc.dg/debug/dwarf2/dwarf-merge.c: New test.\n\t* lib/target-supports.exp (get_compiler_messages): Add WANT_OUTPUT.\n\tOptionally return assembly text.  Update callers.\n\t(check_no_compiler_messages): Update verbose messages.\n\t(check_no_messages_and_pattern): New.\n\t(check_effective_target_string_merging): New.\n\nFrom-SVN: r115874", "tree": {"sha": "faffa7a53a9cc044d98d8fdf1c8b65a3e9383ee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faffa7a53a9cc044d98d8fdf1c8b65a3e9383ee1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19450f2b21f7f5ecaae61060aa45fbf9ee138afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19450f2b21f7f5ecaae61060aa45fbf9ee138afe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19450f2b21f7f5ecaae61060aa45fbf9ee138afe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19450f2b21f7f5ecaae61060aa45fbf9ee138afe/comments", "author": null, "committer": null, "parents": [{"sha": "0a4fe58f40b2ec68762d965ec148100e353ee562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4fe58f40b2ec68762d965ec148100e353ee562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4fe58f40b2ec68762d965ec148100e353ee562"}], "stats": {"total": 97, "additions": 88, "deletions": 9}, "files": [{"sha": "3688cbdec8fea49f16b8af007fa57531abc6a49d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19450f2b21f7f5ecaae61060aa45fbf9ee138afe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19450f2b21f7f5ecaae61060aa45fbf9ee138afe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19450f2b21f7f5ecaae61060aa45fbf9ee138afe", "patch": "@@ -1,3 +1,9 @@\n+2006-08-02  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\tPR debug/28063\n+\t* dwarf2out.c (prune_unused_types_prune): Move call to\n+\tprune_unused_types_update_strings to cover the parent DIE also.\n+\n 2006-08-02  Jan Hubicka  <jh@suse.cz>\n \n \tPR gcov/profile/28480"}, {"sha": "acec8863be13c9d2929aaff0f9f08f1d9a7a5145", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19450f2b21f7f5ecaae61060aa45fbf9ee138afe/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19450f2b21f7f5ecaae61060aa45fbf9ee138afe/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=19450f2b21f7f5ecaae61060aa45fbf9ee138afe", "patch": "@@ -14044,6 +14044,7 @@ prune_unused_types_prune (dw_die_ref die)\n   dw_die_ref c;\n \n   gcc_assert (die->die_mark);\n+  prune_unused_types_update_strings (die);\n \n   if (! die->die_child)\n     return;\n@@ -14068,7 +14069,6 @@ prune_unused_types_prune (dw_die_ref die)\n \n     if (c != prev->die_sib)\n       prev->die_sib = c;\n-    prune_unused_types_update_strings (c);\n     prune_unused_types_prune (c);\n   } while (c != die->die_child);\n }"}, {"sha": "8aa4e1a1778aa6c3c5abab08a07bd5779dbf4b4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19450f2b21f7f5ecaae61060aa45fbf9ee138afe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19450f2b21f7f5ecaae61060aa45fbf9ee138afe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19450f2b21f7f5ecaae61060aa45fbf9ee138afe", "patch": "@@ -1,3 +1,13 @@\n+2006-08-02  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\tPR debug/28063\n+\t* gcc.dg/debug/dwarf2/dwarf-merge.c: New test.\n+\t* lib/target-supports.exp (get_compiler_messages): Add WANT_OUTPUT.\n+\tOptionally return assembly text.  Update callers.\n+\t(check_no_compiler_messages): Update verbose messages.\n+\t(check_no_messages_and_pattern): New.\n+\t(check_effective_target_string_merging): New.\n+\n 2006-08-01  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/28250"}, {"sha": "767d38b173b1a2c13ef525523d5424bb71398975", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/dwarf-merge.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19450f2b21f7f5ecaae61060aa45fbf9ee138afe/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19450f2b21f7f5ecaae61060aa45fbf9ee138afe/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdwarf-merge.c?ref=19450f2b21f7f5ecaae61060aa45fbf9ee138afe", "patch": "@@ -0,0 +1,10 @@\n+/* Verify that mergeable strings are used in the CU DIE.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target string_merging } */\n+/* { dg-options \"-O2 -gdwarf-2 -dA\" } */\n+/* { dg-final { scan-assembler \"DW_AT_producer: \\\"GNU C\" } } */\n+/* { dg-final { scan-assembler-not \"GNU C\\[^\\\\n\\\\r\\]*DW_AT_producer\" } } */\n+\n+void func (void)\n+{\n+}"}, {"sha": "57cfa7fdde8de606d7fe129844795c5ffbc63e56", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 61, "deletions": 8, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19450f2b21f7f5ecaae61060aa45fbf9ee138afe/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19450f2b21f7f5ecaae61060aa45fbf9ee138afe/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=19450f2b21f7f5ecaae61060aa45fbf9ee138afe", "patch": "@@ -20,14 +20,20 @@\n \n # This file defines procs for determining features supported by the target.\n \n-# Try to compile some code and return the messages printed by the compiler.\n+# Try to compile some code and return the messages printed by the compiler,\n+# and optionally the contents for assembly files.  Either a string or\n+# a list of two strings are returned, depending on WANT_OUTPUT.\n #\n # BASENAME is a basename to use for temporary files.\n+# WANT_OUTPUT is a flag which is 0 to request returning just the\n+#   compiler messages, or 1 to return the messages and the contents\n+#   of the assembly file.  TYPE should be \"assembly\" if WANT_OUTPUT\n+#   is set.\n # TYPE is the type of compilation to perform (see target_compile).\n # CONTENTS gives the contents of the input file.\n # The rest is optional:\n # OPTIONS: additional compiler options to use.\n-proc get_compiler_messages {basename type contents args} {\n+proc get_compiler_messages {basename want_output type contents args} {\n     global tool\n \n     if { [llength $args] > 0 } {\n@@ -46,9 +52,28 @@ proc get_compiler_messages {basename type contents args} {\n     close $f\n     set lines [${tool}_target_compile $src $output $type \"$options\"]\n     file delete $src\n-    remote_file build delete $output\n \n-    return $lines\n+    if { $want_output } {\n+\tif { $type != \"assembly\" } {\n+\t    error \"WANT_OUTPUT can only be used with assembly output\"\n+\t} elseif { ![string match \"\" $lines] } {\n+\t    # An error occurred.\n+\t    set result [list $lines \"\"]\n+\t} else {\n+\t    set text \"\"\n+\t    set chan [open \"$output\"]\n+\t    while {[gets $chan line] >= 0} {\n+\t\tappend text \"$line\\n\"\n+\t    }\n+\t    close $chan\n+\t    set result [list $lines $text]\n+\t}\n+    } else {\n+\tset result $lines\n+    }\n+\n+    remote_file build delete $output\n+    return $result\n }\n \n proc current_target_name { } {\n@@ -71,13 +96,33 @@ proc check_no_compiler_messages {prop args} {\n     set target [current_target_name]\n     if {![info exists et_cache($prop,target)]\n \t|| $et_cache($prop,target) != $target} {\n-\tverbose \"check_effective_target $prop: compiling source for $target\" 2\n+\tverbose \"check_no_compiler_messages $prop: compiling source for $target\" 2\n+\tset et_cache($prop,target) $target\n+\tset et_cache($prop,value) \\\n+\t    [string match \"\" [eval get_compiler_messages $prop 0 $args]]\n+    }\n+    set value $et_cache($prop,value)\n+    verbose \"check_no_compiler_messages $prop: returning $value for $target\" 2\n+    return $value\n+}\n+\n+# Similar to check_no_compiler_messages, but also verify that the regular\n+# expression PATTERN matches the compiler's output.\n+proc check_no_messages_and_pattern {prop pattern args} {\n+    global et_cache\n+\n+    set target [current_target_name]\n+    if {![info exists et_cache($prop,target)]\n+\t|| $et_cache($prop,target) != $target} {\n+\tverbose \"check_no_messages_and_pattern $prop: compiling source for $target\" 2\n \tset et_cache($prop,target) $target\n+\tset results [eval get_compiler_messages $prop 1 $args]\n \tset et_cache($prop,value) \\\n-\t    [string match \"\" [eval get_compiler_messages $prop $args]]\n+\t    [expr [string match \"\" [lindex $results 0]] \\\n+\t\t && [regexp $pattern [lindex $results 1]]]\n     }\n     set value $et_cache($prop,value)\n-    verbose \"check_effective_target $prop: returning $value for $target\" 2\n+    verbose \"check_no_messages_and_pattern $prop: returning $value for $target\" 2\n     return $value\n }\n \n@@ -1074,7 +1119,7 @@ proc check_effective_target_lp64 { } {\n \n proc check_effective_target_dfp_nocache { } {\n     verbose \"check_effective_target_dfp_nocache: compiling source\" 2\n-    set ret [string match \"\" [get_compiler_messages dfp object {\n+    set ret [string match \"\" [get_compiler_messages dfp 0 object {\n         _Decimal32 x; _Decimal64 y; _Decimal128 z;\n     }]]\n     verbose \"check_effective_target_dfp_nocache: returning $ret\" 2\n@@ -1783,3 +1828,11 @@ proc check_effective_target_short_enums { } {\n     }]\n }\n \n+# Return 1 if target supports merging string constants at link time.\n+\n+proc check_effective_target_string_merging { } {\n+    return [check_no_messages_and_pattern string_merging \\\n+\t\t\"rodata\\\\.str\" assembly {\n+\t\t    const char *var = \"String\";\n+\t\t} {-O2}]\n+}"}]}