{"sha": "cbae498bb28dc9997ed129456abaa95fb0ed6758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhZTQ5OGJiMjhkYzk5OTdlZDEyOTQ1NmFiYWE5NWZiMGVkNjc1OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-11-24T20:02:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-11-24T20:02:40Z"}, "message": "exp_util.adb (Make_CW_Equivalent_Type): Do not mark the type as frozen for targets that do not require front-end layout.\n\n\t* exp_util.adb (Make_CW_Equivalent_Type): Do not mark the type as\n\tfrozen for targets that do not require front-end layout.\n\t(New_Class_Wide_Subtype): Always reset the freezing status to False.\n\t* exp_ch8.adb: Do not 'with' Targparm.\n\t(Expand_N_Object_Renaming_Declaration): Always freeze a class-wide\n\tsubtype that has been built from the expression.\n\t* exp_intr.adb (Expand_Unc_Deallocation): If the designated type is\n\tclass wide, freeze the implicit type that has been built from the\n\texpression at the dereference point.\n\t* freeze.adb (Freeze_Entity): Adjust comment.\n\t* gcc-interface/decl.c (Gigi_Equivalent_Type) <E_Class_Wide_Type>:\n\tRemove useless test.\n\t* gcc-interface/trans.c (process_freeze_entity): Do not special-case\n\tclass-wide subtypes.\n\n\t* s-osinte-aix.adb (clock_gettime): Fix comment.\n\t* s-osinte-darwin.adb (clock_gettime): Likewise.\n\nFrom-SVN: r154514", "tree": {"sha": "0cbd3994d4de26fd097a0114e1905ade798dfc61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cbd3994d4de26fd097a0114e1905ade798dfc61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbae498bb28dc9997ed129456abaa95fb0ed6758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbae498bb28dc9997ed129456abaa95fb0ed6758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbae498bb28dc9997ed129456abaa95fb0ed6758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbae498bb28dc9997ed129456abaa95fb0ed6758/comments", "author": null, "committer": null, "parents": [{"sha": "828514e401b307023aa6ec629bb81ea8e1ed5cfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828514e401b307023aa6ec629bb81ea8e1ed5cfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828514e401b307023aa6ec629bb81ea8e1ed5cfa"}], "stats": {"total": 93, "additions": 39, "deletions": 54}, "files": [{"sha": "b8702d5fabef681d0c5997f577369911d6c985cf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cbae498bb28dc9997ed129456abaa95fb0ed6758", "patch": "@@ -1,3 +1,23 @@\n+2009-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Make_CW_Equivalent_Type): Do not mark the type as\n+\tfrozen for targets that do not require front-end layout.\n+\t(New_Class_Wide_Subtype): Always reset the freezing status to False.\n+\t* exp_ch8.adb: Do not 'with' Targparm.\n+\t(Expand_N_Object_Renaming_Declaration): Always freeze a class-wide\n+\tsubtype that has been built from the expression.\n+\t* exp_intr.adb (Expand_Unc_Deallocation): If the designated type is\n+\tclass wide, freeze the implicit type that has been built from the\n+\texpression at the dereference point.\n+\t* freeze.adb (Freeze_Entity): Adjust comment.\n+\t* gcc-interface/decl.c (Gigi_Equivalent_Type) <E_Class_Wide_Type>:\n+\tRemove useless test.\n+\t* gcc-interface/trans.c (process_freeze_entity): Do not special-case\n+\tclass-wide subtypes.\n+\n+\t* s-osinte-aix.adb (clock_gettime): Fix comment.\n+\t* s-osinte-darwin.adb (clock_gettime): Likewise.\n+\n 2009-11-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Pass the list"}, {"sha": "fc2837159419aa4df8d392e5e2ba5df85fea45de", "filename": "gcc/ada/exp_ch8.adb", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fexp_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fexp_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch8.adb?ref=cbae498bb28dc9997ed129456abaa95fb0ed6758", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,6 @@ with Sem;      use Sem;\n with Sem_Ch8;  use Sem_Ch8;\n with Sinfo;    use Sinfo;\n with Stand;    use Stand;\n-with Targparm; use Targparm;\n \n package body Exp_Ch8 is\n \n@@ -254,15 +253,9 @@ package body Exp_Ch8 is\n          Set_Etype (Defining_Identifier (N), Entity (Subtype_Mark (N)));\n \n          --  Freeze the class-wide subtype here to ensure that the subtype\n-         --  and equivalent type are frozen before the renaming. This is\n-         --  required for targets where Frontend_Layout_On_Target is true.\n-         --  For targets where Gigi is used, class-wide subtype should not\n-         --  be frozen (in that case the subtype is marked as already frozen\n-         --  when it's created).\n-\n-         if Frontend_Layout_On_Target then\n-            Freeze_Before (N, Entity (Subtype_Mark (N)));\n-         end if;\n+         --  and equivalent type are frozen before the renaming.\n+\n+         Freeze_Before (N, Entity (Subtype_Mark (N)));\n       end if;\n \n       --  Ada 2005 (AI-318-02): If the renamed object is a call to a build-in-"}, {"sha": "8f41a63c470a89611fd793d65e71ea73068caab3", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=cbae498bb28dc9997ed129456abaa95fb0ed6758", "patch": "@@ -1018,14 +1018,19 @@ package body Exp_Intr is\n                else\n                   D_Type := Make_Defining_Identifier (Loc,\n                               New_Internal_Name ('A'));\n-                  Insert_Action (N,\n+                  Insert_Action (Deref,\n                     Make_Subtype_Declaration (Loc,\n                       Defining_Identifier => D_Type,\n                       Subtype_Indication  => D_Subtyp));\n-                  Freeze_Itype (D_Type, N);\n \n                end if;\n \n+               --  Force freezing at the point of the dereference. For the\n+               --  class wide case, this avoids having the subtype frozen\n+               --  before the equivalent type.\n+\n+               Freeze_Itype (D_Type, Deref);\n+\n                Set_Actual_Designated_Subtype (Free_Node, D_Type);\n             end;\n "}, {"sha": "535ec4ca16eedf3a8411308b3bbb4cdfe3e0c1f8", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=cbae498bb28dc9997ed129456abaa95fb0ed6758", "patch": "@@ -3775,19 +3775,6 @@ package body Exp_Util is\n       --  end Equiv_T;\n \n       Equiv_Type := Make_Defining_Identifier (Loc, New_Internal_Name ('T'));\n-\n-      --  When the target requires front-end layout, it's necessary to allow\n-      --  the equivalent type to be frozen so that layout can occur (when the\n-      --  associated class-wide subtype is frozen, the equivalent type will\n-      --  be frozen, see freeze.adb). For other targets, Gigi wants to have\n-      --  the equivalent type marked as frozen and deals with this type itself.\n-      --  In the Gigi case this will also avoid the generation of an init\n-      --  procedure for the type.\n-\n-      if not Frontend_Layout_On_Target then\n-         Set_Is_Frozen (Equiv_Type);\n-      end if;\n-\n       Set_Ekind (Equiv_Type, E_Record_Type);\n       Set_Parent_Subtype (Equiv_Type, Constr_Root);\n \n@@ -4090,18 +4077,7 @@ package body Exp_Util is\n       Set_Ekind (Res, E_Class_Wide_Subtype);\n       Set_Next_Entity (Res, Empty);\n       Set_Etype (Res, Base_Type (CW_Typ));\n-\n-      --  For targets where front-end layout is required, reset the Is_Frozen\n-      --  status of the subtype to False (it can be implicitly set to true\n-      --  from the copy of the class-wide type). For other targets, Gigi\n-      --  doesn't want the class-wide subtype to go through the freezing\n-      --  process (though it's unclear why that causes problems and it would\n-      --  be nice to allow freezing to occur normally for all targets ???).\n-\n-      if Frontend_Layout_On_Target then\n-         Set_Is_Frozen (Res, False);\n-      end if;\n-\n+      Set_Is_Frozen (Res, False);\n       Set_Freeze_Node (Res, Empty);\n       return (Res);\n    end New_Class_Wide_Subtype;"}, {"sha": "85206f7ae8b7d19e3bedd2f7226497d2caf36155", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=cbae498bb28dc9997ed129456abaa95fb0ed6758", "patch": "@@ -3459,10 +3459,7 @@ package body Freeze is\n             end if;\n \n             --  The equivalent type associated with a class-wide subtype needs\n-            --  to be frozen to ensure that its layout is done. Class-wide\n-            --  subtypes are currently only frozen on targets requiring\n-            --  front-end layout (see New_Class_Wide_Subtype and\n-            --  Make_CW_Equivalent_Type in exp_util.adb).\n+            --  to be frozen to ensure that its layout is done.\n \n             if Ekind (E) = E_Class_Wide_Subtype\n               and then Present (Equivalent_Type (E))"}, {"sha": "925610ce32e4822f5076924be0ff09c967fa22e4", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=cbae498bb28dc9997ed129456abaa95fb0ed6758", "patch": "@@ -4965,9 +4965,7 @@ Gigi_Equivalent_Type (Entity_Id gnat_entity)\n       break;\n \n     case E_Class_Wide_Type:\n-      gnat_equiv = ((Present (Equivalent_Type (gnat_entity)))\n-\t\t    ? Equivalent_Type (gnat_entity)\n-\t\t    : Root_Type (gnat_entity));\n+      gnat_equiv = Root_Type (gnat_entity);\n       break;\n \n     case E_Task_Type:"}, {"sha": "51c846f8d377c03978f5c331527f9fc2a1a183e8", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=cbae498bb28dc9997ed129456abaa95fb0ed6758", "patch": "@@ -6087,11 +6087,9 @@ process_freeze_entity (Node_Id gnat_node)\n   if (Present (Address_Clause (gnat_entity)))\n     gnu_old = 0;\n \n-  /* Don't do anything for class-wide types they are always\n-     transformed into their root type.  */\n-  if (Ekind (gnat_entity) == E_Class_Wide_Type\n-      || (Ekind (gnat_entity) == E_Class_Wide_Subtype\n-\t  && Present (Equivalent_Type (gnat_entity))))\n+  /* Don't do anything for class-wide types as they are always transformed\n+     into their root type.  */\n+  if (Ekind (gnat_entity) == E_Class_Wide_Type)\n     return;\n \n   /* Don't do anything for subprograms that may have been elaborated before"}, {"sha": "bfe03a637b2c9bf837d9708390b5c61bf7a2e8cf", "filename": "gcc/ada/s-osinte-aix.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fs-osinte-aix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fs-osinte-aix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-aix.adb?ref=cbae498bb28dc9997ed129456abaa95fb0ed6758", "patch": "@@ -110,8 +110,7 @@ package body System.OS_Interface is\n    is\n       pragma Unreferenced (clock_id);\n \n-      --  Darwin threads don't have clock_gettime, so use\n-      --  gettimeofday() instead.\n+      --  Older AIX don't have clock_gettime, so use gettimeofday\n \n       use Interfaces;\n "}, {"sha": "3bf0bb96d65904dabad5f797582f1dddc7414129", "filename": "gcc/ada/s-osinte-darwin.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fs-osinte-darwin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbae498bb28dc9997ed129456abaa95fb0ed6758/gcc%2Fada%2Fs-osinte-darwin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-darwin.adb?ref=cbae498bb28dc9997ed129456abaa95fb0ed6758", "patch": "@@ -93,8 +93,7 @@ package body System.OS_Interface is\n    is\n       pragma Unreferenced (clock_id);\n \n-      --  AIX threads don't have clock_gettime, so use\n-      --  gettimeofday() instead.\n+      --  Darwin Threads don't have clock_gettime, so use gettimeofday\n \n       use Interfaces;\n "}]}