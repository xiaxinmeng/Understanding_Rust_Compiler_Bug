{"sha": "2d2a50c30a15483b59b9bba68c6117cc67896389", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQyYTUwYzMwYTE1NDgzYjU5YjliYmE2OGM2MTE3Y2M2Nzg5NjM4OQ==", "commit": {"author": {"name": "Chris Demetriou", "email": "cgd@broadcom.com", "date": "2003-01-08T19:57:52Z"}, "committer": {"name": "Chris Demetriou", "email": "cgd@gcc.gnu.org", "date": "2003-01-08T19:57:52Z"}, "message": "config.gcc (mipsisa32r2-*-elf*, [...]): New targets, to support MIPS32 Release 2 (MIPS32R2) configurations.\n\n2003-01-08  Chris Demetriou  <cgd@broadcom.com>\n\n\t* config.gcc (mipsisa32r2-*-elf*, mipsisa32r2el-*-elf*): New\n\ttargets, to support MIPS32 Release 2 (MIPS32R2) configurations.\n\t* config/mips/mips.h (enum processor_type): Rename\n\tPROCESSOR_R4KC to PROCESSOR_4KC, PROCESSOR_R5KC to\n\tPROCESSOR_5KC, and PROCESSOR_R20KC to PROCESSOR_20KC.\n\tAdd PROCESSOR_M4K.\n\t(TARGET_MIPS4KC, TARGET_MIPS5KC): Update for the renaming.\n\t(ISA_MIPS32R2): New define.\n\t(GENERATE_MULT3_SI, ISA_HAS_CONDMOVE, ISA_HAS_8CC)\n\t(ISA_HAS_MADD_MSUB, ISA_HAS_CLZ_CLO)\n\t(ISA_HAS_PREFETCH): Add support for MIPS32R2.\n\t(MIPS_ISA_DEFAULT): Likewise.  Also, fix indentation.\n\t(TARGET_CPU_CPP_BUILTINS): Add support for MIPS32R2.  Add new\n\tpredefine __mips_isa_rev for MIPS32, MIPS32R2, and MIPS64.\n\t(ISA_HAS_ROTR_SI): Add support for MIPS32R2, and avoid if\n\tcompiling MIPS16 code.\n\t(ISA_HAS_ROTR_DI): Do not use if compiling MIPS16 code, and fix\n\tcomment.\n\t(ISA_HAS_SEB_SEH): New define.\n\t(ASM_SPEC, LINK_SPEC): Pass -mips32r2 to assembler and linker.\n\t* config/mips/mips.c (mips_cpu_info_table): Adjust for enum\n\tprocessor_type value renaming.  Add support for MIPS32R2.\n\tClean up comments, and move \"sb1\" entry with other MIPS64 CPU\n\tentries.\n\t(override_options): Reimplement -mipsN option handling so that\n\tit will work correctly for -mips32r2.  Avoid branch-likely\n\tinstructions on MIPS32R2.\n\t* config/mips/mips.md (mulsi3_mult3): Add support for MIPS32R2.\n\t(extendhisi2): Use extendhisi2_hw if ISA_HAS_SEB_SEH.\n\t(extendqisi2): Use extendqisi2_hw if ISA_HAS_SEB_SEH.\n\t(extendhisi2_hw, extendqisi2_hw): New.\n\t* config/mips/netbsd.h (TARGET_CPU_CPP_BUILTINS): Add support\n\tfor MIPS32R2.  Add new predefine __mips_isa_rev for MIPS32,\n\tMIPS32R2, and MIPS64.\n\t(LINK_SPEC): Pass -mips32r2 to linker.\n\t* config/mips/t-isa3264: Built -mips32r2 multilibs.\n\t* doc/invoke.texi (MIPS Options): Add -mips32r2, add support\n\tfor mips32r2 in the -march description.  Alphabetically sort\n\tCPU names in the -march description.  Add long-missed -mips32\n\tand -mips64 to MIPS option summary.\n\n\t* config.gcc: Update copyright years to include 2003.\n\t* config/mips/mips.c: Likewise.\n\t* config/mips/mips.h: Likewise.\n\t* config/mips/mips.md: Likewise.\n\t* config/mips/netbsd.h: Likewise.\n\nFrom-SVN: r61053", "tree": {"sha": "dc703be7bec33ccbef5d597bd4df45f98ae7b533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc703be7bec33ccbef5d597bd4df45f98ae7b533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d2a50c30a15483b59b9bba68c6117cc67896389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2a50c30a15483b59b9bba68c6117cc67896389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d2a50c30a15483b59b9bba68c6117cc67896389", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2a50c30a15483b59b9bba68c6117cc67896389/comments", "author": null, "committer": null, "parents": [{"sha": "7ec3af37b976cec2b96de29eb9e39929f0bd4412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec3af37b976cec2b96de29eb9e39929f0bd4412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec3af37b976cec2b96de29eb9e39929f0bd4412"}], "stats": {"total": 259, "additions": 199, "deletions": 60}, "files": [{"sha": "91d8a3d5d53266a3f7fc96a41a811b80cdcb6d24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d2a50c30a15483b59b9bba68c6117cc67896389", "patch": "@@ -1,3 +1,53 @@\n+2003-01-08  Chris Demetriou  <cgd@broadcom.com>\n+\n+\t* config.gcc (mipsisa32r2-*-elf*, mipsisa32r2el-*-elf*): New\n+\ttargets, to support MIPS32 Release 2 (MIPS32R2) configurations.\n+\t* config/mips/mips.h (enum processor_type): Rename\n+\tPROCESSOR_R4KC to PROCESSOR_4KC, PROCESSOR_R5KC to\n+\tPROCESSOR_5KC, and PROCESSOR_R20KC to PROCESSOR_20KC.\n+\tAdd PROCESSOR_M4K.\n+\t(TARGET_MIPS4KC, TARGET_MIPS5KC): Update for the renaming.\n+\t(ISA_MIPS32R2): New define.\n+\t(GENERATE_MULT3_SI, ISA_HAS_CONDMOVE, ISA_HAS_8CC)\n+\t(ISA_HAS_MADD_MSUB, ISA_HAS_CLZ_CLO)\n+\t(ISA_HAS_PREFETCH): Add support for MIPS32R2.\n+\t(MIPS_ISA_DEFAULT): Likewise.  Also, fix indentation.\n+\t(TARGET_CPU_CPP_BUILTINS): Add support for MIPS32R2.  Add new\n+\tpredefine __mips_isa_rev for MIPS32, MIPS32R2, and MIPS64.\n+\t(ISA_HAS_ROTR_SI): Add support for MIPS32R2, and avoid if\n+\tcompiling MIPS16 code.\n+\t(ISA_HAS_ROTR_DI): Do not use if compiling MIPS16 code, and fix\n+\tcomment.\n+\t(ISA_HAS_SEB_SEH): New define.\n+\t(ASM_SPEC, LINK_SPEC): Pass -mips32r2 to assembler and linker.\n+\t* config/mips/mips.c (mips_cpu_info_table): Adjust for enum\n+\tprocessor_type value renaming.  Add support for MIPS32R2.\n+\tClean up comments, and move \"sb1\" entry with other MIPS64 CPU\n+\tentries.\n+\t(override_options): Reimplement -mipsN option handling so that\n+\tit will work correctly for -mips32r2.  Avoid branch-likely\n+\tinstructions on MIPS32R2.\n+\t* config/mips/mips.md (mulsi3_mult3): Add support for MIPS32R2.\n+\t(extendhisi2): Use extendhisi2_hw if ISA_HAS_SEB_SEH.\n+\t(extendqisi2): Use extendqisi2_hw if ISA_HAS_SEB_SEH.\n+\t(extendhisi2_hw, extendqisi2_hw): New.\n+\t* config/mips/netbsd.h (TARGET_CPU_CPP_BUILTINS): Add support\n+\tfor MIPS32R2.  Add new predefine __mips_isa_rev for MIPS32,\n+\tMIPS32R2, and MIPS64.\n+\t(LINK_SPEC): Pass -mips32r2 to linker.\n+\t* config/mips/t-isa3264: Built -mips32r2 multilibs.\n+\t* doc/invoke.texi (MIPS Options): Add -mips32r2, add support\n+\tfor mips32r2 in the -march description.  Alphabetically sort\n+\tCPU names in the -march description.  Add long-missed -mips32\n+\tand -mips64 to MIPS option summary.\n+\n+\t* config.gcc: Update copyright years to include 2003.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/mips/mips.h: Likewise.\n+\t* config/mips/mips.md: Likewise.\n+\t* config/mips/netbsd.h: Likewise.\n+\t* doc/invoke.texi: Likewise.\n+\n 2003-01-08  Andreas Schwab  <schwab@suse.de>\n \n \t* aclocal.m4 (gcc_AC_INITFINI_ARRAY): Fix spelling of cache"}, {"sha": "6a71f6386716a06293b59edaa82db9d3ef909c00", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2d2a50c30a15483b59b9bba68c6117cc67896389", "patch": "@@ -1,5 +1,5 @@\n # GCC build-, host- and target-specific configuration file.\n-# Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+# Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -1830,6 +1830,11 @@ mipsisa32-*-elf* | mipsisa32el-*-elf*)\n \ttmake_file=mips/t-isa3264\n \ttm_defines=\"MIPS_ISA_DEFAULT=32 MIPS_ABI_DEFAULT=ABI_EABI\"\n \t;;\n+mipsisa32r2-*-elf* | mipsisa32r2el-*-elf*)\n+\ttm_file=\"${tm_file} mips/elf.h\"\n+\ttmake_file=mips/t-isa3264\n+\ttm_defines=\"MIPS_ISA_DEFAULT=33 MIPS_ABI_DEFAULT=ABI_EABI\"\n+\t;;\n mipsisa64-*-elf* | mipsisa64el-*-elf*)\n \ttm_file=\"${tm_file} mips/elf.h\"\n \ttmake_file=mips/t-isa3264"}, {"sha": "52b9415a48ffe55be473565c02325cb21661ae06", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=2d2a50c30a15483b59b9bba68c6117cc67896389", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for MIPS\n    Copyright (C) 1989, 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky, lich@inria.inria.fr.\n    Changes by Michael Meissner, meissner@osf.org.\n    64 bit r4000 support by Ian Lance Taylor, ian@cygnus.com, and\n@@ -583,8 +583,9 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n   { \"mips2\", PROCESSOR_R6000, 2 },\n   { \"mips3\", PROCESSOR_R4000, 3 },\n   { \"mips4\", PROCESSOR_R8000, 4 },\n-  { \"mips32\", PROCESSOR_R4KC, 32 },\n-  { \"mips64\", PROCESSOR_R5KC, 64 },\n+  { \"mips32\", PROCESSOR_4KC, 32 },\n+  { \"mips32r2\", PROCESSOR_M4K, 33 },\n+  { \"mips64\", PROCESSOR_5KC, 64 },\n \n   /* MIPS I */\n   { \"r3000\", PROCESSOR_R3000, 1 },\n@@ -611,18 +612,18 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n   { \"vr5400\", PROCESSOR_R5400, 4 },\n   { \"vr5500\", PROCESSOR_R5500, 4 },\n \n+  /* MIPS32 */\n+  { \"4kc\", PROCESSOR_4KC, 32 },\n+  { \"4kp\", PROCESSOR_4KC, 32 }, /* = 4kc */\n \n-  /* MIPS 32 */\n-  { \"4kc\", PROCESSOR_R4KC, 32 },\n-  { \"4kp\", PROCESSOR_R4KC, 32 }, /* = 4kc */\n+  /* MIPS32 Release 2 */\n+  { \"m4k\", PROCESSOR_M4K, 33 },\n \n-  /* MIPS 64 */\n-  { \"5kc\", PROCESSOR_R5KC, 64 },\n-  { \"20kc\", PROCESSOR_R20KC, 64 },\n-  { \"sr71000\", PROCESSOR_SR71000, 64 },\n-\n-  /* Broadcom SB-1 CPU core */\n+  /* MIPS64 */\n+  { \"5kc\", PROCESSOR_5KC, 64 },\n+  { \"20kc\", PROCESSOR_20KC, 64 },\n   { \"sb1\", PROCESSOR_SB1, 64 },\n+  { \"sr71000\", PROCESSOR_SR71000, 64 },\n \n   /* End marker */\n   { 0, 0, 0 }\n@@ -5127,28 +5128,31 @@ override_options ()\n   if (mips_isa_string != 0)\n     {\n       /* Handle -mipsN.  */\n-      int level = atoi (mips_isa_string);\n-      if (level == 16)\n+\n+      if (strcmp (mips_isa_string, \"16\") == 0)\n \t{\n \t  /* -mips16 specifies an ASE rather than a processor, so don't\n \t     change mips_arch here.  -mno-mips16 overrides -mips16.  */\n \t  if (mips_no_mips16_string == NULL)\n \t    target_flags |= MASK_MIPS16;\n \t}\n-      else if (mips_arch_info != 0)\n+      else\n \t{\n+\t  char *whole_isa_str = concat (\"mips\", mips_isa_string, NULL);\n+\t  const struct mips_cpu_info *isa_info;\n+\n+\t  isa_info = mips_parse_cpu (\"-mips option\", whole_isa_str);\n+\t  free (whole_isa_str);\n+\n \t  /* -march takes precedence over -mipsN, since it is more descriptive.\n \t     There's no harm in specifying both as long as the ISA levels\n \t     are the same.  */\n-\t  if (mips_isa != level)\n-\t    error (\"-mips%d conflicts with the other architecture options, which specify a MIPS%d processor\",\n-\t\t   level, mips_isa);\n-\t}\n-      else\n-\t{\n-\t  mips_set_architecture (mips_cpu_info_from_isa (level));\n-\t  if (mips_arch_info == 0)\n-\t    error (\"bad value (%s) for -mips switch\", mips_isa_string);\n+\t  if (mips_arch_info != 0 && mips_isa != isa_info->isa)\n+\t    error (\"-mips%s conflicts with the other architecture options, which specify a MIPS%d processor\",\n+\t\t   mips_isa_string, mips_isa);\n+\n+\t  /* Set architecture based on the given option.  */\n+\t  mips_set_architecture (isa_info);\n \t}\n     }\n \n@@ -5265,7 +5269,7 @@ override_options ()\n \t of the [MIPS32 and MIPS64] architecture.\"  Therefore, we do not\n \t issue those instructions unless instructed to do so by\n \t -mbranch-likely.  */\n-      if (ISA_HAS_BRANCHLIKELY && !(ISA_MIPS32 || ISA_MIPS64))\n+      if (ISA_HAS_BRANCHLIKELY && !(ISA_MIPS32 || ISA_MIPS32R2 || ISA_MIPS64))\n \ttarget_flags |= MASK_BRANCHLIKELY;\n       else\n \ttarget_flags &= ~MASK_BRANCHLIKELY;"}, {"sha": "5dee17967adcc8af67ab0637b04c8497e4192905", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=2d2a50c30a15483b59b9bba68c6117cc67896389", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  MIPS version.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky (lich@inria.inria.fr).\n    Changed by Michael Meissner\t(meissner@osf.org).\n    64 bit r4000 support by Ian Lance Taylor (ian@cygnus.com) and\n@@ -72,9 +72,10 @@ enum processor_type {\n   PROCESSOR_R5400,\n   PROCESSOR_R5500,\n   PROCESSOR_R8000,\n-  PROCESSOR_R4KC,\n-  PROCESSOR_R5KC,\n-  PROCESSOR_R20KC,\n+  PROCESSOR_4KC,\n+  PROCESSOR_5KC,\n+  PROCESSOR_20KC,\n+  PROCESSOR_M4K,\n   PROCESSOR_SR71000,\n   PROCESSOR_SB1\n };\n@@ -351,6 +352,7 @@ extern void\t\tsbss_section PARAMS ((void));\n #define ISA_MIPS3                   (mips_isa == 3)\n #define ISA_MIPS4\t\t    (mips_isa == 4)\n #define ISA_MIPS32\t\t    (mips_isa == 32)\n+#define ISA_MIPS32R2\t\t    (mips_isa == 33)\n #define ISA_MIPS64                  (mips_isa == 64)\n \n /* Architecture target defines.  */\n@@ -359,8 +361,8 @@ extern void\t\tsbss_section PARAMS ((void));\n #define TARGET_MIPS4100             (mips_arch == PROCESSOR_R4100)\n #define TARGET_MIPS4120             (mips_arch == PROCESSOR_R4120)\n #define TARGET_MIPS4300             (mips_arch == PROCESSOR_R4300)\n-#define TARGET_MIPS4KC              (mips_arch == PROCESSOR_R4KC)\n-#define TARGET_MIPS5KC              (mips_arch == PROCESSOR_R5KC)\n+#define TARGET_MIPS4KC              (mips_arch == PROCESSOR_4KC)\n+#define TARGET_MIPS5KC              (mips_arch == PROCESSOR_5KC)\n #define TARGET_MIPS5400             (mips_arch == PROCESSOR_R5400)\n #define TARGET_MIPS5500             (mips_arch == PROCESSOR_R5500)\n #define TARGET_SB1                  (mips_arch == PROCESSOR_SB1)\n@@ -456,11 +458,19 @@ extern void\t\tsbss_section PARAMS ((void));\n       else if (ISA_MIPS32)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__mips=32\");\t\t\t\t\\\n+\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\\\n+\t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS32R2)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=32\");\t\t\t\t\\\n+\t  builtin_define (\"__mips_isa_rev=2\");\t\t\t\\\n \t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\\\n \t}\t\t\t\t\t\t\t\\\n       else if (ISA_MIPS64)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__mips=64\");\t\t\t\t\\\n+\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\\\n \t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS64\");\t\\\n \t}\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n@@ -707,13 +717,17 @@ extern void\t\tsbss_section PARAMS ((void));\n #          if MIPS_ISA_DEFAULT == 32\n #            define MULTILIB_ISA_DEFAULT \"mips32\"\n #          else\n-#            if MIPS_ISA_DEFAULT == 64\n-#              define MULTILIB_ISA_DEFAULT \"mips64\"\n+#            if MIPS_ISA_DEFAULT == 33\n+#              define MULTILIB_ISA_DEFAULT \"mips32r2\"\n #            else\n-#          define MULTILIB_ISA_DEFAULT \"mips1\"\n-#         endif\n+#              if MIPS_ISA_DEFAULT == 64\n+#                define MULTILIB_ISA_DEFAULT \"mips64\"\n+#              else\n+#                define MULTILIB_ISA_DEFAULT \"mips1\"\n+#              endif\n+#            endif\n+#          endif\n #        endif\n-#       endif\n #      endif\n #    endif\n #  endif\n@@ -770,6 +784,7 @@ extern void\t\tsbss_section PARAMS ((void));\n                                   || TARGET_MIPS5400                    \\\n                                   || TARGET_MIPS5500                    \\\n                                   || ISA_MIPS32\t                        \\\n+                                  || ISA_MIPS32R2                       \\\n                                   || ISA_MIPS64)                        \\\n                                  && !TARGET_MIPS16)\n \n@@ -806,6 +821,7 @@ extern void\t\tsbss_section PARAMS ((void));\n /* ISA has the conditional move instructions introduced in mips4.  */\n #define ISA_HAS_CONDMOVE        ((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS32\t                        \\\n+\t\t\t\t  || ISA_MIPS32R2                       \\\n \t\t\t\t  || ISA_MIPS64)\t\t\t\\\n                                  && !TARGET_MIPS5500                    \\\n \t\t\t\t && !TARGET_MIPS16)\n@@ -817,6 +833,7 @@ extern void\t\tsbss_section PARAMS ((void));\n    branch on CC, and move (both FP and non-FP) on CC.  */\n #define ISA_HAS_8CC\t\t(ISA_MIPS4\t\t\t\t\\\n                          \t || ISA_MIPS32\t                        \\\n+                         \t || ISA_MIPS32R2                        \\\n \t\t\t\t || ISA_MIPS64)\n \n /* This is a catch all for the other new mips4 instructions: indexed load and\n@@ -832,6 +849,7 @@ extern void\t\tsbss_section PARAMS ((void));\n \n /* ISA has integer multiply-accumulate instructions, madd and msub.  */\n #define ISA_HAS_MADD_MSUB       ((ISA_MIPS32\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n \t\t\t\t  || ISA_MIPS64\t\t\t\t\\\n \t\t\t\t  ) && !TARGET_MIPS16)\n \n@@ -843,6 +861,7 @@ extern void\t\tsbss_section PARAMS ((void));\n \n /* ISA has count leading zeroes/ones instruction (not implemented).  */\n #define ISA_HAS_CLZ_CLO         ((ISA_MIPS32\t\t\t\t\\\n+                                  || ISA_MIPS32R2\t\t\t\\\n                                   || ISA_MIPS64\t\t\t\t\\\n                                  ) && !TARGET_MIPS16)\n \n@@ -879,22 +898,25 @@ extern void\t\tsbss_section PARAMS ((void));\n                                  )\n \n /* ISA has 32-bit rotate right instruction.  */\n-#define ISA_HAS_ROTR_SI         (TARGET_MIPS5400                        \\\n-                                 || TARGET_MIPS5500                     \\\n-                                 || TARGET_SR71K                        \\\n-                                 )\n+#define ISA_HAS_ROTR_SI         (!TARGET_MIPS16                         \\\n+                                 && (ISA_MIPS32R2                       \\\n+                                     || TARGET_MIPS5400                 \\\n+                                     || TARGET_MIPS5500                 \\\n+                                     || TARGET_SR71K                    \\\n+                                     ))\n \n-/* ISA has 32-bit rotate right instruction.  */\n+/* ISA has 64-bit rotate right instruction.  */\n #define ISA_HAS_ROTR_DI         (TARGET_64BIT                           \\\n+                                 && !TARGET_MIPS16                      \\\n                                  && (TARGET_MIPS5400                    \\\n                                      || TARGET_MIPS5500                 \\\n                                      || TARGET_SR71K                    \\\n                                      ))\n \n-\n /* ISA has data prefetch instruction.  */\n #define ISA_HAS_PREFETCH\t((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS32\t\t\t\t\\\n+\t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n \t\t\t\t  || ISA_MIPS64)\t       \t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n@@ -903,6 +925,11 @@ extern void\t\tsbss_section PARAMS ((void));\n    also requires TARGET_DOUBLE_FLOAT.  */\n #define ISA_HAS_TRUNC_W\t\t(!ISA_MIPS1)\n \n+/* ISA includes the MIPS32r2 seb and seh instructions.  */\n+#define ISA_HAS_SEB_SEH         (!TARGET_MIPS16                        \\\n+                                 && (ISA_MIPS32R2                      \\\n+                                     ))\n+\n /* CC1_SPEC causes -mips3 and -mips4 to set -mfp64 and -mgp64; -mips1 or\n    -mips2 sets -mfp32 and -mgp32.  This can be overridden by an explicit\n    -mfp32, -mfp64, -mgp32 or -mgp64.  -mfp64 sets MASK_FLOAT64 in\n@@ -1066,7 +1093,8 @@ extern int mips_abi;\n \n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n-%{G*} %(endian_spec) %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips64}\\\n+%{G*} %(endian_spec) %{mips1} %{mips2} %{mips3} %{mips4} \\\n+%{mips32} %{mips32r2} %{mips64} \\\n %{mips16:%{!mno-mips16:-mips16}} %{mno-mips16:-no-mips16} \\\n %(subtarget_asm_optimizing_spec) \\\n %(subtarget_asm_debugging_spec) \\\n@@ -1123,7 +1151,7 @@ extern int mips_abi;\n #ifndef LINK_SPEC\n #define LINK_SPEC \"\\\n %(endian_spec) \\\n-%{G*} %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips64} \\\n+%{G*} %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips32r2} %{mips64} \\\n %{bestGnum} %{shared} %{non_shared}\"\n #endif  /* LINK_SPEC defined */\n "}, {"sha": "0f67e3f1e829fe66d03ff97236ad072fc10242ba", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=2d2a50c30a15483b59b9bba68c6117cc67896389", "patch": "@@ -1,6 +1,6 @@\n ;;  Mips.md\t     Machine Description for MIPS based processors\n ;;  Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-;;  1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+;;  1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n ;;  Contributed by   A. Lichnewsky, lich@inria.inria.fr\n ;;  Changes by       Michael Meissner, meissner@osf.org\n ;;  64 bit r4000 support by Ian Lance Taylor, ian@cygnus.com, and\n@@ -1808,6 +1808,7 @@\n       || TARGET_MIPS5400\n       || TARGET_MIPS5500\n       || ISA_MIPS32\n+      || ISA_MIPS32R2\n       || ISA_MIPS64)\n     return \\\"mul\\\\t%0,%1,%2\\\";\n   return \\\"mult\\\\t%0,%1,%2\\\";\n@@ -4379,6 +4380,13 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"\"\n   \"\n {\n+  if (ISA_HAS_SEB_SEH)\n+    {\n+      emit_insn (gen_extendhisi2_hw (operands[0],\n+                                     force_reg (HImode, operands[1]))); \n+      DONE;\n+    }\n+\n   if (optimize && GET_CODE (operands[1]) == MEM)\n     operands[1] = force_not_mem (operands[1]);\n \n@@ -4394,6 +4402,14 @@ move\\\\t%0,%z4\\\\n\\\\\n     }\n }\")\n \n+(define_insn \"extendhisi2_hw\" \n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"r\")))]\n+  \"ISA_HAS_SEB_SEH\"     \n+  \"seh\\\\t%0,%1\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"extendhisi2_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n \t(sign_extend:SI (match_operand:HI 1 \"memory_operand\" \"R,m\")))]\n@@ -4441,6 +4457,12 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"\"\n   \"\n {\n+  if (ISA_HAS_SEB_SEH)\n+    {\n+      emit_insn (gen_extendqisi2_hw (operands[0],\n+                                     force_reg (QImode, operands[1]))); \n+      DONE;\n+    }\n   if (optimize && GET_CODE (operands[1]) == MEM)\n     operands[1] = force_not_mem (operands[1]);\n \n@@ -4456,6 +4478,14 @@ move\\\\t%0,%z4\\\\n\\\\\n     }\n }\")\n \n+(define_insn \"extendqisi2_hw\" \n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (sign_extend:SI (match_operand:QI 1 \"register_operand\" \"r\")))]\n+  \"ISA_HAS_SEB_SEH\"     \n+  \"seb\\\\t%0,%1\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"extendqisi2_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n \t(sign_extend:SI (match_operand:QI 1 \"memory_operand\" \"R,m\")))]"}, {"sha": "4c412b42acef28356c1e6213797cb5b25be54ec5", "filename": "gcc/config/mips/netbsd.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=2d2a50c30a15483b59b9bba68c6117cc67896389", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for MIPS NetBSD systems.\n-   Copyright (C) 1993, 1995, 1996, 1997, 1999, 2000, 2001, 2002\n+   Copyright (C) 1993, 1995, 1996, 1997, 1999, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -93,9 +93,20 @@ Boston, MA 02111-1307, USA.  */\n       else if (ISA_MIPS4)\t\t\t\t\t\\\n \tbuiltin_define (\"__mips=4\");\t\t\t\t\\\n       else if (ISA_MIPS32)\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips=32\");\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=32\");\t\t\t\t\\\n+\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else if (ISA_MIPS32R2)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=32\");\t\t\t\t\\\n+\t  builtin_define (\"__mips_isa_rev=2\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n       else if (ISA_MIPS64)\t\t\t\t\t\\\n-\tbuiltin_define (\"__mips=64\");\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__mips=64\");\t\t\t\t\\\n+\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TARGET_HARD_FLOAT)\t\t\t\t\t\\\n \tbuiltin_define (\"__mips_hard_float\");\t\t\t\\\n@@ -153,7 +164,7 @@ Boston, MA 02111-1307, USA.  */\n   \"%{EL:-m elf32lmip} \\\n    %{EB:-m elf32bmip} \\\n    %(endian_spec) \\\n-   %{G*} %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips64} \\\n+   %{G*} %{mips1} %{mips2} %{mips3} %{mips4} %{mips32} %{mips32r2} %{mips64} \\\n    %{bestGnum} %{call_shared} %{no_archive} %{exact_version} \\\n    %(netbsd_link_spec)\"\n "}, {"sha": "96a1a096c73c0ea3c2b040eba39950e76574250f", "filename": "gcc/config/mips/t-isa3264", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig%2Fmips%2Ft-isa3264", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fconfig%2Fmips%2Ft-isa3264", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-isa3264?ref=2d2a50c30a15483b59b9bba68c6117cc67896389", "patch": "@@ -33,8 +33,8 @@ TARGET_LIBGCC2_CFLAGS = -G 0\n \n # Build the libraries for both hard and soft floating point\n \n-MULTILIB_OPTIONS = msoft-float EL/EB mips32/mips64\n-MULTILIB_DIRNAMES = soft-float el eb mips32 mips64\n+MULTILIB_OPTIONS = msoft-float EL/EB mips32/mips32r2/mips64\n+MULTILIB_DIRNAMES = soft-float el eb mips32 mips32r2 mips64\n MULTILIB_MATCHES = EL=mel EB=meb\n EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n "}, {"sha": "2adb009c46a738fdefeedee24e1eedb7c4b5dc39", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2a50c30a15483b59b9bba68c6117cc67896389/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2d2a50c30a15483b59b9bba68c6117cc67896389", "patch": "@@ -481,7 +481,8 @@ in the following sections.\n -membedded-pic  -mfp32  -mfp64  -mfused-madd  -mno-fused-madd @gol\n -mgas  -mgp32  -mgp64 @gol\n -mgpopt  -mhalf-pic  -mhard-float  -mint64  -mips1 @gol\n--mips2  -mips3  -mips4  -mlong64  -mlong32  -mlong-calls  -mmemcpy @gol\n+-mips2  -mips3  -mips4  -mips32  -mips32r2  -mips64 @gol\n+-mlong64  -mlong32  -mlong-calls  -mmemcpy @gol\n -mmips-as  -mmips-tfile  -mno-abicalls @gol\n -mno-embedded-data  -mno-uninit-const-in-rodata @gol\n -mno-embedded-pic  -mno-gpopt  -mno-long-calls @gol\n@@ -7298,13 +7299,19 @@ These @samp{-m} options are defined for the MIPS family of computers:\n @item -march=@var{arch}\n @opindex march\n Generate code that will run on @var{arch}, which can be the name of a\n-generic MIPS ISA, or the name of a particular processor.  The ISA names\n-are: @samp{mips1}, @samp{mips2}, @samp{mips3}, @samp{mips4}, @samp{mips32}\n-and @samp{mips64}.  The processor names are: @samp{r2000},\n-@samp{r3000}, @samp{r3900}, @samp{r4000}, @samp{vr4100}, @samp{vr4300},\n-@samp{r4400}, @samp{r4600}, @samp{r4650}, @samp{vr5000}, @samp{r6000},\n-@samp{r8000}, @samp{4kc}, @samp{4kp}, @samp{5kc}, @samp{20kc},\n-@samp{orion}, and @samp{sb1}.  The special value @samp{from-abi} selects the\n+generic MIPS ISA, or the name of a particular processor.\n+The ISA names are:\n+@samp{mips1}, @samp{mips2}, @samp{mips3}, @samp{mips4},\n+@samp{mips32}, @samp{mips32r2}, and @samp{mips64}.\n+The processor names are:\n+@samp{4kc}, @samp{4kp}, @samp{5kc}, @samp{20kc},\n+@samp{m4k},\n+@samp{r2000}, @samp{r3000}, @samp{r3900}, @samp{r4000}, @samp{r4400},\n+@samp{r4600}, @samp{r4650}, @samp{r6000}, @samp{r8000},\n+@samp{orion},\n+@samp{sb1},\n+@samp{vr4100}, @samp{vr4300}, and @samp{vr5000}.\n+The special value @samp{from-abi} selects the\n most compatible architecture for the selected ABI (that is,\n @samp{mips1} for 32-bit ABIs and @samp{mips3} for 64-bit ABIs)@.\n \n@@ -7363,6 +7370,10 @@ Equivalent to @samp{-march=mips4}.\n @opindex mips32\n Equivalent to @samp{-march=mips32}.\n \n+@item -mips32r2\n+@opindex mips32r2\n+Equivalent to @samp{-march=mips32r2}.\n+\n @item -mips64\n @opindex mips64\n Equivalent to @samp{-march=mips64}."}]}