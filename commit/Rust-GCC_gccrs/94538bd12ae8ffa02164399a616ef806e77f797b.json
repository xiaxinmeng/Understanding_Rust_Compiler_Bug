{"sha": "94538bd12ae8ffa02164399a616ef806e77f797b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ1MzhiZDEyYWU4ZmZhMDIxNjQzOTlhNjE2ZWY4MDZlNzdmNzk3Yg==", "commit": {"author": {"name": "Victor Leikehman", "email": "lei@il.ibm.com", "date": "2004-08-08T12:28:25Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-08-08T12:28:25Z"}, "message": "simplify.c (gfc_simplify_shape): Bugfix.\n\n2004-08-08  Victor Leikehman  <lei@il.ibm.com>\n\n\t* simplify.c (gfc_simplify_shape): Bugfix.\n\t* expr.c (gfc_copy_shape_excluding): New function.\n\t* gfortran.h (gfc_get_shape): Bugfix.\n\t(gfc_copy_shape_excluding): Added declaration.\n\t* iresolve.c (gfc_resolve_all, gfc_resolve_any, gfc_resolve_count,\n\tgfc_resolve_cshift, gfc_resolve_eoshift, gfc_resolve_lbound,\n\tgfc_resolve_ubound, gfc_resolve_transpose): Added compile\n\ttime resolution of shape.\n\nFrom-SVN: r85685", "tree": {"sha": "9f3bff0e67ca9e26d25d40bbb89175a03d998121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f3bff0e67ca9e26d25d40bbb89175a03d998121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94538bd12ae8ffa02164399a616ef806e77f797b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94538bd12ae8ffa02164399a616ef806e77f797b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94538bd12ae8ffa02164399a616ef806e77f797b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94538bd12ae8ffa02164399a616ef806e77f797b/comments", "author": null, "committer": null, "parents": [{"sha": "352a77c8dc72715bbe230e04cd72583d5a900291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/352a77c8dc72715bbe230e04cd72583d5a900291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/352a77c8dc72715bbe230e04cd72583d5a900291"}], "stats": {"total": 96, "additions": 88, "deletions": 8}, "files": [{"sha": "8ec2d7f2df52b32ab8e46775f92c9741f2f32c45", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94538bd12ae8ffa02164399a616ef806e77f797b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94538bd12ae8ffa02164399a616ef806e77f797b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=94538bd12ae8ffa02164399a616ef806e77f797b", "patch": "@@ -1,3 +1,14 @@\n+2004-08-08  Victor Leikehman  <lei@il.ibm.com>\n+\n+\t* simplify.c (gfc_simplify_shape): Bugfix.\n+\t* expr.c (gfc_copy_shape_excluding): New function.\n+\t* gfortran.h (gfc_get_shape): Bugfix.\n+\t(gfc_copy_shape_excluding): Added declaration.\n+\t* iresolve.c (gfc_resolve_all, gfc_resolve_any, gfc_resolve_count,\n+\tgfc_resolve_cshift, gfc_resolve_eoshift, gfc_resolve_lbound,\n+\tgfc_resolve_ubound, gfc_resolve_transpose): Added compile\n+\ttime resolution of shape.\n+\n 2004-08-06  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n \n \t* intrinsic.c (add_subroutines): Add getenv and"}, {"sha": "99db76d908c99dc6e1d84d6eb794b8e3d5838bd1", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94538bd12ae8ffa02164399a616ef806e77f797b/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94538bd12ae8ffa02164399a616ef806e77f797b/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=94538bd12ae8ffa02164399a616ef806e77f797b", "patch": "@@ -330,6 +330,50 @@ gfc_copy_shape (mpz_t * shape, int rank)\n }\n \n \n+/* Copy a shape array excluding dimension N, where N is an integer\n+   constant expression.  Dimensions are numbered in fortran style --\n+   starting with ONE.\n+\n+   So, if the original shape array contains R elements\n+      { s1 ... sN-1  sN  sN+1 ... sR-1 sR}\n+   the result contains R-1 elements:\n+      { s1 ... sN-1  sN+1    ...  sR-1}\n+\n+   If anything goes wrong -- N is not a constant, its value is out\n+   of range -- or anything else, just returns NULL.\n+*/\n+\n+mpz_t *\n+gfc_copy_shape_excluding (mpz_t * shape, int rank, gfc_expr * dim)\n+{\n+  mpz_t *new_shape, *s;\n+  int i, n;\n+\n+  if (shape == NULL \n+      || rank <= 1\n+      || dim == NULL\n+      || dim->expr_type != EXPR_CONSTANT \n+      || dim->ts.type != BT_INTEGER)\n+    return NULL;\n+\n+  n = mpz_get_si (dim->value.integer);\n+  n--; /* Convert to zero based index */\n+  if (n < 0 && n >= rank)\n+    return NULL;\n+\n+  s = new_shape = gfc_get_shape (rank-1);\n+\n+  for (i = 0; i < rank; i++)\n+    {\n+      if (i == n)\n+        continue;\n+      mpz_init_set (*s, shape[i]);\n+      s++;\n+    }\n+\n+  return new_shape;\n+}\n+\n /* Given an expression pointer, return a copy of the expression.  This\n    subroutine is recursive.  */\n "}, {"sha": "19a22147758138999dccd924e52f1f46ec64ff3d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94538bd12ae8ffa02164399a616ef806e77f797b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94538bd12ae8ffa02164399a616ef806e77f797b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=94538bd12ae8ffa02164399a616ef806e77f797b", "patch": "@@ -989,7 +989,7 @@ typedef struct gfc_expr\n gfc_expr;\n \n \n-#define gfc_get_shape(rank) ((mpz_t *) gfc_getmem(rank*sizeof(mpz_t)))\n+#define gfc_get_shape(rank) ((mpz_t *) gfc_getmem((rank)*sizeof(mpz_t)))\n \n /* Structures for information associated with different kinds of\n    numbers.  The first set of integer parameters define all there is\n@@ -1584,6 +1584,7 @@ void gfc_replace_expr (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_int_expr (int);\n gfc_expr *gfc_logical_expr (int, locus *);\n mpz_t *gfc_copy_shape (mpz_t *, int);\n+mpz_t *gfc_copy_shape_excluding (mpz_t *, int, gfc_expr *);\n gfc_expr *gfc_copy_expr (gfc_expr *);\n \n try gfc_specification_expr (gfc_expr *);"}, {"sha": "21fd0150c0b84d182587a4ecebcdfd5a2f931b3b", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94538bd12ae8ffa02164399a616ef806e77f797b/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94538bd12ae8ffa02164399a616ef806e77f797b/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=94538bd12ae8ffa02164399a616ef806e77f797b", "patch": "@@ -31,6 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include <string.h>\n #include <stdarg.h>\n+#include <assert.h>\n \n #include \"gfortran.h\"\n #include \"intrinsic.h\"\n@@ -188,6 +189,7 @@ gfc_resolve_all (gfc_expr * f, gfc_expr * mask, gfc_expr * dim)\n     {\n       gfc_resolve_index (dim, 1);\n       f->rank = mask->rank - 1;\n+      f->shape = gfc_copy_shape_excluding (mask->shape, mask->rank, dim);\n     }\n \n   f->value.function.name =\n@@ -227,6 +229,7 @@ gfc_resolve_any (gfc_expr * f, gfc_expr * mask, gfc_expr * dim)\n     {\n       gfc_resolve_index (dim, 1);\n       f->rank = mask->rank - 1;\n+      f->shape = gfc_copy_shape_excluding (mask->shape, mask->rank, dim);\n     }\n \n   f->value.function.name =\n@@ -371,6 +374,7 @@ gfc_resolve_count (gfc_expr * f, gfc_expr * mask, gfc_expr * dim)\n     {\n       f->rank = mask->rank - 1;\n       gfc_resolve_index (dim, 1);\n+      f->shape = gfc_copy_shape_excluding (mask->shape, mask->rank, dim);\n     }\n \n   f->value.function.name =\n@@ -388,6 +392,7 @@ gfc_resolve_cshift (gfc_expr * f, gfc_expr * array,\n \n   f->ts = array->ts;\n   f->rank = array->rank;\n+  f->shape = gfc_copy_shape (array->shape, array->rank);\n \n   if (shift->rank > 0)\n     n = 1;\n@@ -477,6 +482,7 @@ gfc_resolve_eoshift (gfc_expr * f, gfc_expr * array,\n \n   f->ts = array->ts;\n   f->rank = array->rank;\n+  f->shape = gfc_copy_shape (array->shape, array->rank);\n \n   n = 0;\n   if (shift->rank > 0)\n@@ -654,15 +660,21 @@ gfc_resolve_ishftc (gfc_expr * f, gfc_expr * i, gfc_expr * shift,\n \n \n void\n-gfc_resolve_lbound (gfc_expr * f, gfc_expr * array ATTRIBUTE_UNUSED,\n+gfc_resolve_lbound (gfc_expr * f, gfc_expr * array,\n \t\t    gfc_expr * dim)\n {\n   static char lbound[] = \"__lbound\";\n \n   f->ts.type = BT_INTEGER;\n   f->ts.kind = gfc_default_integer_kind ();\n \n-  f->rank = (dim == NULL) ? 1 : 0;\n+  if (dim == NULL)\n+    {\n+      f->rank = 1;\n+      f->shape = gfc_get_shape (1);\n+      mpz_init_set_ui (f->shape[0], array->rank);\n+    }\n+\n   f->value.function.name = lbound;\n }\n \n@@ -1259,6 +1271,12 @@ gfc_resolve_transpose (gfc_expr * f, gfc_expr * matrix)\n \n   f->ts = matrix->ts;\n   f->rank = 2;\n+  if (matrix->shape)\n+    {\n+      f->shape = gfc_get_shape (2);\n+      mpz_init_set (f->shape[0], matrix->shape[1]);\n+      mpz_init_set (f->shape[1], matrix->shape[0]);\n+    }\n \n   switch (matrix->ts.type)\n     {\n@@ -1304,15 +1322,21 @@ gfc_resolve_trim (gfc_expr * f, gfc_expr * string)\n \n \n void\n-gfc_resolve_ubound (gfc_expr * f, gfc_expr * array ATTRIBUTE_UNUSED,\n+gfc_resolve_ubound (gfc_expr * f, gfc_expr * array,\n \t\t    gfc_expr * dim)\n {\n   static char ubound[] = \"__ubound\";\n \n   f->ts.type = BT_INTEGER;\n   f->ts.kind = gfc_default_integer_kind ();\n \n-  f->rank = (dim == NULL) ? 1 : 0;\n+  if (dim == NULL)\n+    {\n+      f->rank = 1;\n+      f->shape = gfc_get_shape (1);\n+      mpz_init_set_ui (f->shape[0], array->rank);\n+    }\n+\n   f->value.function.name = ubound;\n }\n "}, {"sha": "bffda5973df10528a85789d95fdae0317aea98d7", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94538bd12ae8ffa02164399a616ef806e77f797b/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94538bd12ae8ffa02164399a616ef806e77f797b/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=94538bd12ae8ffa02164399a616ef806e77f797b", "patch": "@@ -3213,12 +3213,12 @@ gfc_simplify_shape (gfc_expr * source)\n   int n;\n   try t;\n \n+  if (source->rank == 0 || source->expr_type != EXPR_VARIABLE)\n+    return NULL;\n+\n   result = gfc_start_constructor (BT_INTEGER, gfc_default_integer_kind (),\n \t\t\t\t  &source->where);\n \n-  if (source->rank == 0 || source->expr_type != EXPR_VARIABLE)\n-    return result;\n-\n   ar = gfc_find_array_ref (source);\n \n   t = gfc_array_ref_shape (ar, shape);"}]}