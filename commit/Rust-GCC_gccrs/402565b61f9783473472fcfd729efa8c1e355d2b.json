{"sha": "402565b61f9783473472fcfd729efa8c1e355d2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAyNTY1YjYxZjk3ODM0NzM0NzJmY2ZkNzI5ZWZhOGMxZTM1NWQyYg==", "commit": {"author": {"name": "Lynn Boger", "email": "laboger@linux.vnet.ibm.com", "date": "2015-09-30T23:06:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-30T23:06:11Z"}, "message": "re PR go/66870 (split stack issues on ppc64le and ppc64)\n\n\tPR target/66870\n\t* config/rs6000/sysv4.h (TARGET_CAN_SPLIT_STACK_64BIT): Define.\n\t* configure.ac: Define HAVE_GOLD_ALTERNATE_SPLIT_STACK on Power\n\tbased on gold linker version.\n\t* gcc.c: Add -fuse-ld=gold to STACK_SPLIT_SPEC if\n\tHAVE_GOLD_ALTERNATE_SPLIT_STACK defined.\n\t* configure, config.in: Regenerate.\ngo:\n\t* gospec.c (lang_specific_driver): Set appropriate split stack\n\toptions for 64 bit compiles based on TARGET_CAN_SPLIT_STACK_64BIT.\n\nFrom-SVN: r228311", "tree": {"sha": "37eb8b2f85d9a656044717d6a82ffa026692d05c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37eb8b2f85d9a656044717d6a82ffa026692d05c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/402565b61f9783473472fcfd729efa8c1e355d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402565b61f9783473472fcfd729efa8c1e355d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402565b61f9783473472fcfd729efa8c1e355d2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402565b61f9783473472fcfd729efa8c1e355d2b/comments", "author": {"login": "laboger", "id": 9433228, "node_id": "MDQ6VXNlcjk0MzMyMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9433228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laboger", "html_url": "https://github.com/laboger", "followers_url": "https://api.github.com/users/laboger/followers", "following_url": "https://api.github.com/users/laboger/following{/other_user}", "gists_url": "https://api.github.com/users/laboger/gists{/gist_id}", "starred_url": "https://api.github.com/users/laboger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laboger/subscriptions", "organizations_url": "https://api.github.com/users/laboger/orgs", "repos_url": "https://api.github.com/users/laboger/repos", "events_url": "https://api.github.com/users/laboger/events{/privacy}", "received_events_url": "https://api.github.com/users/laboger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7dc396e20f0efa59cad65d95d53ff1541d9ae807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc396e20f0efa59cad65d95d53ff1541d9ae807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc396e20f0efa59cad65d95d53ff1541d9ae807"}], "stats": {"total": 143, "additions": 137, "deletions": 6}, "files": [{"sha": "c8200dbff5c2be7fca1c4987e9fe017e7c89ad1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=402565b61f9783473472fcfd729efa8c1e355d2b", "patch": "@@ -1,3 +1,13 @@\n+2015-10-01  Lynn Boger  <laboger@linux.vnet.ibm.com>\n+\n+\tPR target/66870\n+\t* config/rs6000/sysv4.h (TARGET_CAN_SPLIT_STACK_64BIT): Define.\n+\t* configure.ac: Define HAVE_GOLD_ALTERNATE_SPLIT_STACK on Power\n+\tbased on gold linker version.\n+\t* gcc.c: Add -fuse-ld=gold to STACK_SPLIT_SPEC if\n+\tHAVE_GOLD_ALTERNATE_SPLIT_STACK defined.\n+\t* configure, config.in: Regenerate.\n+\n 2015-10-01  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_prologue): Don't set"}, {"sha": "093478c28408db8aedf9a011d93e1aab5f87f045", "filename": "gcc/config.in", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=402565b61f9783473472fcfd729efa8c1e355d2b", "patch": "@@ -1310,6 +1310,13 @@\n #endif\n \n \n+/* Define if the gold linker supports split stack and is available as a\n+   non-default */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GOLD_NON_DEFAULT_SPLIT_STACK\n+#endif\n+\n+\n /* Define if you have the iconv() function. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_ICONV\n@@ -1839,6 +1846,12 @@\n #endif\n \n \n+/* Define if your assembler supports .dwsect 0xB0000 */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_XCOFF_DWARF_EXTRAS\n+#endif\n+\n+\n /* Define if isl is in use. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_isl"}, {"sha": "7b2f9bd6f0d2820dc124758131b7d01257874fd8", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=402565b61f9783473472fcfd729efa8c1e355d2b", "patch": "@@ -940,6 +940,14 @@ ncrtn.o%s\"\n #undef TARGET_ASAN_SHADOW_OFFSET\n #define TARGET_ASAN_SHADOW_OFFSET rs6000_asan_shadow_offset\n \n+/* On ppc64 and ppc64le, split stack is only support for\n+   64 bit. */\n+#undef TARGET_CAN_SPLIT_STACK_64BIT\n+#if TARGET_GLIBC_MAJOR > 2 \\\n+  || (TARGET_GLIBC_MAJOR == 2 && TARGET_GLIBC_MINOR >= 18)\n+#define TARGET_CAN_SPLIT_STACK_64BIT\n+#endif\n+\n /* This target uses the sysv4.opt file.  */\n #define TARGET_USES_SYSV4_OPT 1\n "}, {"sha": "f6ae99062c50d366337a58fd7cea5071dafc2e71", "filename": "gcc/configure", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=402565b61f9783473472fcfd729efa8c1e355d2b", "patch": "@@ -22015,6 +22015,45 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ld_is_gold\" >&5\n $as_echo \"$ld_is_gold\" >&6; }\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking gold linker with split stack support as non default\" >&5\n+$as_echo_n \"checking gold linker with split stack support as non default... \" >&6; }\n+# Check to see if default ld is not gold, but gold is\n+# available and has support for split stack.  If gcc was configured\n+# with gold then no checking is done.\n+#\n+if test x$ld_is_gold = xno && which ${gcc_cv_ld}.gold >/dev/null 2>&1; then\n+\n+# For platforms other than powerpc64*, enable as appropriate.\n+\n+  gold_non_default=no\n+  ld_gold=`which ${gcc_cv_ld}.gold`\n+# Make sure this gold has minimal split stack support\n+  if $ld_gold --help 2>/dev/null | grep split-stack-adjust-size >/dev/null 2>&1; then\n+    ld_vers=`$ld_gold --version | sed 1q`\n+    gold_vers=`echo $ld_vers | sed -n \\\n+          -e 's,^[^)]*[  ]\\([0-9][0-9]*\\.[0-9][0-9]*[^)]*\\)) .*$,\\1,p'`\n+    case $target in\n+# check that the gold version contains the complete split stack support\n+# on powerpc64 big and little endian\n+      powerpc64*-*-*)\n+        case \"$gold_vers\" in\n+          2.25.[1-9]*|2.2[6-9][.0-9]*|2.[3-9][.0-9]*|[3-9].[.0-9]*) gold_non_default=yes\n+          ;;\n+          *) gold_non_default=no\n+          ;;\n+        esac\n+        ;;\n+    esac\n+  fi\n+  if test $gold_non_default = yes; then\n+\n+$as_echo \"#define HAVE_GOLD_NON_DEFAULT_SPLIT_STACK 1\" >>confdefs.h\n+\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gold_non_default\" >&5\n+$as_echo \"$gold_non_default\" >&6; }\n+\n ORIGINAL_LD_FOR_TARGET=$gcc_cv_ld\n \n case \"$ORIGINAL_LD_FOR_TARGET\" in"}, {"sha": "88fb9bf178c827f0f8dc9508e69bb7fc03c6b534", "filename": "gcc/configure.ac", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=402565b61f9783473472fcfd729efa8c1e355d2b", "patch": "@@ -2247,6 +2247,42 @@ if test x$gcc_cv_ld != x; then\n fi\n AC_MSG_RESULT($ld_is_gold)\n \n+AC_MSG_CHECKING(gold linker with split stack support as non default)\n+# Check to see if default ld is not gold, but gold is\n+# available and has support for split stack.  If gcc was configured\n+# with gold then no checking is done.\n+# \n+if test x$ld_is_gold = xno && which ${gcc_cv_ld}.gold >/dev/null 2>&1; then\n+\n+# For platforms other than powerpc64*, enable as appropriate.\n+\n+  gold_non_default=no\n+  ld_gold=`which ${gcc_cv_ld}.gold`\n+# Make sure this gold has minimal split stack support\n+  if $ld_gold --help 2>/dev/null | grep split-stack-adjust-size >/dev/null 2>&1; then\n+    ld_vers=`$ld_gold --version | sed 1q`\n+    gold_vers=`echo $ld_vers | sed -n \\\n+          -e 's,^[[^)]]*[[  ]]\\([[0-9]][[0-9]]*\\.[[0-9]][[0-9]]*[[^)]]*\\)) .*$,\\1,p'`\n+    case $target in\n+# check that the gold version contains the complete split stack support\n+# on powerpc64 big and little endian\n+      powerpc64*-*-*)\n+        case \"$gold_vers\" in\n+          2.25.[[1-9]]*|2.2[[6-9]][[.0-9]]*|2.[[3-9]][[.0-9]]*|[[3-9]].[[.0-9]]*) gold_non_default=yes\n+          ;;\n+          *) gold_non_default=no\n+          ;;\n+        esac\n+        ;;\n+    esac\n+  fi\n+  if test $gold_non_default = yes; then\n+    AC_DEFINE(HAVE_GOLD_NON_DEFAULT_SPLIT_STACK, 1,\n+    \t    [Define if the gold linker supports split stack and is available as a non-default])\n+  fi\n+fi\n+AC_MSG_RESULT($gold_non_default)\n+\n ORIGINAL_LD_FOR_TARGET=$gcc_cv_ld\n AC_SUBST(ORIGINAL_LD_FOR_TARGET)\n case \"$ORIGINAL_LD_FOR_TARGET\" in"}, {"sha": "db90796d0488978ac89288e145fa2dfd587f4bfa", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=402565b61f9783473472fcfd729efa8c1e355d2b", "patch": "@@ -667,7 +667,11 @@ proper position among the other output files.  */\n    libgcc.  This is not yet a real spec, though it could become one;\n    it is currently just stuffed into LINK_SPEC.  FIXME: This wrapping\n    only works with GNU ld and gold.  */\n+#ifdef HAVE_GOLD_NON_DEFAULT_SPLIT_STACK\n+#define STACK_SPLIT_SPEC \" %{fsplit-stack: -fuse-ld=gold --wrap=pthread_create}\"\n+#else\n #define STACK_SPLIT_SPEC \" %{fsplit-stack: --wrap=pthread_create}\"\n+#endif\n \n #ifndef LIBASAN_SPEC\n #define STATIC_LIBASAN_LIBS \\"}, {"sha": "a6e8dd5f1eecce7550fd0ca784e0e5f32d363ca4", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=402565b61f9783473472fcfd729efa8c1e355d2b", "patch": "@@ -1,3 +1,9 @@\n+2015-10-01  Lynn Boger  <laboger@linux.vnet.ibm.com>\n+\n+\tPR target/66870\n+\t* gospec.c (lang_specific_driver): Set appropriate split stack\n+\toptions for 64 bit compiles based on TARGET_CAN_SPLIT_STACK_64BIT.\n+\n 2015-09-10  Chris Manghane  <cmang@google.com>\n \n \t* go-gcc.cc (Gcc_backend::type_size): Return -1 for"}, {"sha": "2c60ee7db8f43fa96b357fe7d7a8b2277c7ec8ec", "filename": "gcc/go/gospec.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fgo%2Fgospec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402565b61f9783473472fcfd729efa8c1e355d2b/gcc%2Fgo%2Fgospec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgospec.c?ref=402565b61f9783473472fcfd729efa8c1e355d2b", "patch": "@@ -106,6 +106,9 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* The total number of arguments with the new stuff.  */\n   int num_args = 1;\n \n+  /* Supports split stack */\n+  int supports_split_stack = 0;\n+\n   /* Whether the -o option was used.  */\n   bool saw_opt_o = false;\n \n@@ -117,6 +120,9 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Whether the -S option was used.  */\n   bool saw_opt_S = false;\n \n+  /* Whether the -m32 option was used. */\n+  bool saw_opt_m32 ATTRIBUTE_UNUSED = false;\n+\n   /* The first input file with an extension of .go.  */\n   const char *first_go_file = NULL;  \n \n@@ -152,6 +158,10 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t    library = (library == 0) ? 1 : library;\n \t  break;\n \n+\tcase OPT_m32:\n+\t  saw_opt_m32 = true;\n+\t  break;\n+\n \tcase OPT_pg:\n \tcase OPT_p:\n \t  saw_profile_flag = true;\n@@ -236,15 +246,22 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Copy the 0th argument, i.e., the name of the program itself.  */\n   new_decoded_options[j++] = decoded_options[i++];\n \n-  /* If we are linking, pass -fsplit-stack if it is supported.  */\n #ifdef TARGET_CAN_SPLIT_STACK\n-  if (library >= 0)\n+  supports_split_stack = 1;\n+#endif\n+\n+#ifdef TARGET_CAN_SPLIT_STACK_64BIT\n+  if (!saw_opt_m32)\n+    supports_split_stack = 1;\n+#endif\n+\n+  /* If we are linking, pass -fsplit-stack if it is supported.  */\n+  if ((library >= 0) && supports_split_stack)\n     {\n       generate_option (OPT_fsplit_stack, NULL, 1, CL_DRIVER,\n \t\t       &new_decoded_options[j]);\n       j++;\n     }\n-#endif\n \n   /* NOTE: We start at 1 now, not 0.  */\n   while (i < argc)\n@@ -381,19 +398,17 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n     generate_option (OPT_shared_libgcc, NULL, 1, CL_DRIVER,\n \t\t     &new_decoded_options[j++]);\n \n-#ifdef TARGET_CAN_SPLIT_STACK\n   /* libgcc wraps pthread_create to support split stack, however, due to\n      relative ordering of -lpthread and -lgcc, we can't just mark\n      __real_pthread_create in libgcc as non-weak.  But we need to link in\n      pthread_create from pthread if we are statically linking, so we work-\n      around by passing -u pthread_create to the linker. */\n-  if (static_link)\n+  if (static_link && supports_split_stack)\n     {\n       generate_option (OPT_Wl_, \"-u,pthread_create\", 1, CL_DRIVER,\n \t\t       &new_decoded_options[j]);\n       j++;\n     }\n-#endif\n \n #if defined(TARGET_SOLARIS) && !defined(USE_GLD)\n   /* We use a common symbol for go$zerovalue.  On Solaris, when not"}]}