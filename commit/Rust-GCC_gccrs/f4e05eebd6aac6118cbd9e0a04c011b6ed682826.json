{"sha": "f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlMDVlZWJkNmFhYzYxMThjYmQ5ZTBhMDRjMDExYjZlZDY4MjgyNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-04-02T13:28:29Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-04-02T16:08:28Z"}, "message": "c++: header unit purview [PR 99283]\n\nThis case occurs due to some equivocation about module_purview.\nHeader-unit building is treated as a module-purview, but we should not\ntreat entities imported from that as module purview.  (header units\nwere not a thing when I started).  The testcase didn't understand we\nhad a local textual definition, but it was (incorrectly) marked as\nmodule-purview, because we'd read in a declaration from a header unit\ntoo.\n\n\tgcc/cp/\n\t* cp-tree.h (lang_decl_base): Correct module flag comment.\n\t* module.cc (trees_in::assert_definition): Break out\n\tnot_tmpl var.\n\t(trees_out::lang_decl_bools): Do not write purview for header units.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99283-6_d.H: New.\n\t* g++.dg/modules/pr99283-7-swap.h: New.\n\t* g++.dg/modules/pr99283-7-traits.h: New.\n\t* g++.dg/modules/pr99283-7_a.H: New.\n\t* g++.dg/modules/pr99283-7_b.H: New.\n\t* g++.dg/modules/pr99283-7_c.C: New.\n\t* g++.dg/modules/pr99283-7_d.H: New.", "tree": {"sha": "e82ecaf9f225b216826cd364e56cd899ea7001cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e82ecaf9f225b216826cd364e56cd899ea7001cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84491827990e4f2746442c23294fc17923b265d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84491827990e4f2746442c23294fc17923b265d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c84491827990e4f2746442c23294fc17923b265d"}], "stats": {"total": 206, "additions": 197, "deletions": 9}, "files": [{"sha": "66bba7b4d43e2c30acb9c5a971fe24cf89d3511c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "patch": "@@ -2756,8 +2756,8 @@ struct GTY(()) lang_decl_base {\n   unsigned var_declared_inline_p : 1;\t   /* var */\n   unsigned dependent_init_p : 1;\t   /* var */\n \n-  /* The following apply to VAR, FUNCTION, TYPE, CONCEPT, TEMPLATE,\n-     NAMESPACE decls.  */\n+  /* The following apply to VAR, FUNCTION, TYPE, CONCEPT, & NAMESPACE\n+     decls.  */\n   unsigned module_purview_p : 1;\t   /* in module purview (not GMF) */\n   unsigned module_import_p : 1;     \t   /* from an import */\n   unsigned module_entity_p : 1;\t\t   /* is in the entitity ary &"}, {"sha": "d5b7d28ded549fdf789b4b4828eee876fef82aed", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "patch": "@@ -4477,6 +4477,7 @@ trees_in::assert_definition (tree decl ATTRIBUTE_UNUSED,\n {\n #if CHECKING_P\n   tree *slot = note_defs->find_slot (decl, installing ? INSERT : NO_INSERT);\n+  tree not_tmpl = STRIP_TEMPLATE (decl);\n   if (installing)\n     {\n       /* We must be inserting for the first time.  */\n@@ -4492,13 +4493,13 @@ trees_in::assert_definition (tree decl ATTRIBUTE_UNUSED,\n     gcc_assert (!is_duplicate (decl)\n \t\t? !slot\n \t\t: (slot\n-\t\t   || !DECL_LANG_SPECIFIC (STRIP_TEMPLATE (decl))\n-\t\t   || !DECL_MODULE_PURVIEW_P (STRIP_TEMPLATE (decl))\n-\t\t   || (!DECL_MODULE_IMPORT_P (STRIP_TEMPLATE (decl))\n+\t\t   || !DECL_LANG_SPECIFIC (not_tmpl)\n+\t\t   || !DECL_MODULE_PURVIEW_P (not_tmpl)\n+\t\t   || (!DECL_MODULE_IMPORT_P (not_tmpl)\n \t\t       && header_module_p ())));\n \n-  if (TREE_CODE (decl) == TEMPLATE_DECL)\n-    gcc_assert (!note_defs->find_slot (DECL_TEMPLATE_RESULT (decl), NO_INSERT));\n+  if (not_tmpl != decl)\n+    gcc_assert (!note_defs->find_slot (not_tmpl, NO_INSERT));\n #endif\n }\n \n@@ -5519,7 +5520,9 @@ trees_out::lang_decl_bools (tree t)\n   WB (lang->u.base.concept_p);\n   WB (lang->u.base.var_declared_inline_p);\n   WB (lang->u.base.dependent_init_p);\n-  WB (lang->u.base.module_purview_p);\n+  /* When building a header unit, everthing is marked as purview, but\n+     that's the GM purview, so not what the importer will mean  */\n+  WB (lang->u.base.module_purview_p && !header_module_p ());\n   if (VAR_OR_FUNCTION_DECL_P (t))\n     WB (lang->u.base.module_attached_p);\n   switch (lang->u.base.selector)\n@@ -11304,7 +11307,7 @@ trees_in::register_duplicate (tree decl, tree existing)\n /* We've read a definition of MAYBE_EXISTING.  If not a duplicate,\n    return MAYBE_EXISTING (into which the definition should be\n    installed).  Otherwise return NULL if already known bad, or the\n-   duplicate we read (for ODR checking, or extracting addtional merge\n+   duplicate we read (for ODR checking, or extracting additional merge\n    information).  */\n \n tree"}, {"sha": "e8114711f38c69312a750adf9c5f359894693a07", "filename": "gcc/testsuite/g++.dg/modules/pr99283-6_d.H", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_d.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_d.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_d.H?ref=f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "patch": "@@ -0,0 +1,10 @@\n+// { dg-additional-options {-std=c++2a -fmodule-header} }\n+\n+import  \"pr99283-6_b.H\";\n+\n+template<typename _Alloc>\n+struct __allocated_ptr\n+{\n+  using value_type = allocator_traits<_Alloc>;\n+};\n+"}, {"sha": "d725fea9ee54c7949416d5a38c48df2b9bf76541", "filename": "gcc/testsuite/g++.dg/modules/pr99283-7-swap.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7-swap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7-swap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7-swap.h?ref=f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "patch": "@@ -0,0 +1,17 @@\n+template<typename _Tp>\n+constexpr typename remove_reference<_Tp>::type&&\n+  move(_Tp&& __t) noexcept;\n+\n+template<typename _Tp>\n+constexpr inline\n+typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,\n+\t\t\t  is_move_constructible<_Tp>,\n+\t\t\t  is_move_assignable<_Tp>>::value>::type\n+  swap(_Tp& __a, _Tp& __b)\n+  noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n+\t   is_nothrow_move_assignable<_Tp>>::value)\n+{\n+  _Tp __tmp = move(__a);\n+  __a = move(__b);\n+  __b = move(__tmp);\n+}"}, {"sha": "8f6bce04bee7219c6117948ae4600eedc92ebce1", "filename": "gcc/testsuite/g++.dg/modules/pr99283-7-traits.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7-traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7-traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7-traits.h?ref=f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "patch": "@@ -0,0 +1,41 @@\n+template<typename...>\n+struct __and_;\n+\n+template<typename _Pp>\n+struct __not_;\n+\n+template<typename _Tp>\n+struct is_move_constructible;\n+\n+template<typename _Tp>\n+struct is_nothrow_move_constructible;\n+\n+template<typename _Tp>\n+struct is_move_assignable;\n+\n+template<typename _Tp>\n+struct is_nothrow_move_assignable;\n+\n+template<typename _Tp>\n+struct remove_reference;\n+\n+template<bool, typename _Tp = void>\n+struct enable_if;\n+\n+template<bool _Cond, typename _Tp = void>\n+using __enable_if_t = typename enable_if<_Cond, _Tp>::type;\n+\n+template<typename... _Cond>\n+using _Require = __enable_if_t<__and_<_Cond...>::value>;\n+\n+template<typename _Tp>\n+struct __is_tuple_like;\n+\n+template<typename _Tp>\n+constexpr inline\n+  _Require<__not_<__is_tuple_like<_Tp>>,\n+\t   is_move_constructible<_Tp>,\n+\t   is_move_assignable<_Tp>>\n+swap(_Tp&, _Tp&)\n+  noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n+\t   is_nothrow_move_assignable<_Tp>>::value);"}, {"sha": "b52d44d5c26f7abde512cc134261e6e48f87a6e8", "filename": "gcc/testsuite/g++.dg/modules/pr99283-7_a.H", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_a.H?ref=f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "patch": "@@ -0,0 +1,97 @@\n+// PR 99283,\n+// { dg-additional-options \"-std=c++2a -fmodule-header\" }\n+// { dg-module-cmi {} }\n+\n+#include \"pr99283-7-traits.h\"\n+\n+template<class _CharT>\n+struct char_traits;\n+\n+template<typename _CharT, typename _Traits = char_traits<_CharT>>\n+class basic_string;\n+\n+typedef basic_string<char> string;\n+\n+template<typename _Tp, _Tp __v>\n+struct integral_constant\n+{\n+  static constexpr _Tp value = __v;\n+  typedef _Tp value_type;\n+  typedef integral_constant<_Tp, __v> type;\n+  constexpr operator value_type() const noexcept { return value; }\n+  constexpr value_type operator()() const noexcept { return value; }\n+};\n+\n+template<typename _Tp, _Tp __v>\n+constexpr _Tp integral_constant<_Tp, __v>::value;\n+\n+typedef integral_constant<bool, true> true_type;\n+\n+typedef integral_constant<bool, false> false_type;\n+\n+template<bool __v>\n+using __bool_constant = integral_constant<bool, __v>;\n+\n+template<typename _Tp, typename _Up = _Tp&&>\n+_Up __declval(int);\n+\n+template<typename _Tp>\n+_Tp __declval(long);\n+\n+template<typename _Tp>\n+auto declval() noexcept -> decltype(__declval<_Tp>(0));\n+\n+struct __do_is_nothrow_swappable_impl\n+{\n+  template<typename _Tp>\n+  static __bool_constant<\n+    noexcept(swap(declval<_Tp&>(), declval<_Tp&>()))\n+    > __test(int);\n+};\n+\n+\n+\n+template<typename _Tp>\n+struct __is_nothrow_swappable_impl\n+  : public __do_is_nothrow_swappable_impl\n+{\n+  typedef decltype(__test<_Tp>(0)) type;\n+};\n+\n+template<typename _Tp>\n+struct __is_nothrow_swappable\n+  : public __is_nothrow_swappable_impl<_Tp>::type\n+{ };\n+\n+#include \"pr99283-7-swap.h\"\n+\n+class partial_ordering\n+{\n+public:\n+  friend constexpr bool\n+    operator==(partial_ordering, partial_ordering) noexcept = default;\n+};\n+\n+class strong_ordering\n+{\n+public:\n+  constexpr operator partial_ordering() const noexcept;\n+};\n+\n+template<typename _T1, typename _T2>\n+struct pair\n+{\n+  constexpr void\n+    swap(pair& __p)\n+    noexcept(__is_nothrow_swappable<_T1>::value);\n+};\n+\n+template<typename _T1, typename _T2>\n+inline constexpr bool\n+  operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y);\n+       \n+template<typename _CharT>\n+struct char_traits\n+{\n+  using comparison_category = strong_ordering;\n+};"}, {"sha": "50c780e096e89069f5629a13d0e3aee5e6da47f2", "filename": "gcc/testsuite/g++.dg/modules/pr99283-7_b.H", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_b.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_b.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_b.H?ref=f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-std=c++2a -fmodule-header\" }\n+// { dg-module-cmi {} }\n+\n+#include \"pr99283-7-traits.h\""}, {"sha": "195bc684e409d588e5ab3149c3821b63089cadd6", "filename": "gcc/testsuite/g++.dg/modules/pr99283-7_c.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_c.C?ref=f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "patch": "@@ -0,0 +1,8 @@\n+// { dg-additional-options \"-std=c++2a -fmodules-ts\" }\n+import  \"pr99283-7_b.H\";\n+\n+#include \"pr99283-7-swap.h\"\n+\n+import  \"pr99283-7_a.H\";\n+\n+void Xlocale(const string& __s);"}, {"sha": "ef4934beac0d707700cb0b3013fe9756f5e234e4", "filename": "gcc/testsuite/g++.dg/modules/pr99283-7_d.H", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_d.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e05eebd6aac6118cbd9e0a04c011b6ed682826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_d.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-7_d.H?ref=f4e05eebd6aac6118cbd9e0a04c011b6ed682826", "patch": "@@ -0,0 +1,8 @@\n+// { dg-additional-options \"-std=c++2a -fmodule-header\" }\n+import  \"pr99283-7_b.H\";\n+\n+#include \"pr99283-7-swap.h\"\n+\n+import  \"pr99283-7_a.H\";\n+\n+void Xlocale(const string& __s);"}]}