{"sha": "3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjYzFiNTUyMGZiYjJjZTJiNTVhNWJkODI1OTI0YTU1ZTA0NGI3OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-12-23T18:38:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-12-23T18:38:03Z"}, "message": "Delete VEC_INTERLEAVE_*_EXPR.\n\n\t* tree.def (VEC_INTERLEAVE_HIGH_EXPR, VEC_INTERLEAVE_LOW_EXPR): Remove.\n\t* gimple-pretty-print.c (dump_binary_rhs): Don't handle\n\tVEC_INTERLEAVE_HIGH_EXPR and VEC_INTERLEAVE_LOW_EXPR.\n\t* expr.c (expand_expr_real_2): Likewise.\n\t* tree-cfg.c (verify_gimple_assign_binary): Likewise.\n\t* cfgexpand.c (expand_debug_expr): Likewise.\n\t* tree-inline.c (estimate_operator_cost): Likewise.\n\t* tree-pretty-print.c (dump_generic_node): Likewise.\n\t* tree-vect-generic.c (expand_vector_operations_1): Likewise.\n\t* fold-const.c (fold_binary_loc): Likewise.\n\t* doc/generic.texi (VEC_INTERLEAVE_HIGH_EXPR,\n\tVEC_INTERLEAVE_LOW_EXPR): Remove documentation.\n\t* optabs.c (optab_for_tree_code): Don't handle\n\tVEC_INTERLEAVE_HIGH_EXPR and VEC_INTERLEAVE_LOW_EXPR.\n\t(expand_binop, init_optabs): Remove vec_interleave_high_optab\n\tand vec_interleave_low_optab.\n\t* genopinit.c (optabs): Likewise.\n\t* optabs.h (OTI_vec_interleave_high, OTI_vec_interleave_low): Remove.\n\t(vec_interleave_high_optab, vec_interleave_low_optab): Remove.\n\t* doc/md.texi (vec_interleave_high, vec_interleave_low): Remove\n\tdocumentation.\n\t* tree-vect-stmts.c (gen_perm_mask): Renamed to...\n\t(vect_gen_perm_mask): ... this.  No longer static.\n\t(perm_mask_for_reverse, vectorizable_load): Adjust callers.\n\t* tree-vectorizer.h (vect_gen_perm_mask): New prototype.\n\t* tree-vect-data-refs.c (vect_strided_store_supported): Don't try\n\tVEC_INTERLEAVE_*_EXPR, use can_vec_perm_p instead of\n\tcan_vec_perm_for_code_p.\n\t(vect_permute_store_chain): Generate VEC_PERM_EXPR with interleaving\n\tmasks instead of VEC_INTERLEAVE_HIGH_EXPR and VEC_INTERLEAVE_LOW_EXPR.\n\t* config/i386/i386.c (expand_vec_perm_interleave2): If\n\texpand_vec_perm_interleave3 would handle it, return false.\n\t(expand_vec_perm_broadcast_1): Don't use vec_interleave_*_optab.\n\nFrom-SVN: r182663", "tree": {"sha": "896a83936f868d1ebb9685fb7093757d116cbe8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/896a83936f868d1ebb9685fb7093757d116cbe8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7dab511cf3331378aaafdeb7676835c0cdb194fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dab511cf3331378aaafdeb7676835c0cdb194fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dab511cf3331378aaafdeb7676835c0cdb194fa"}], "stats": {"total": 274, "additions": 115, "deletions": 159}, "files": [{"sha": "1a8b35a7f2461810407bf335c0a4da91672c3895", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -1,3 +1,40 @@\n+2011-12-23  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Henderson  <rth@redhat.com>\n+\n+\t* tree.def (VEC_INTERLEAVE_HIGH_EXPR, VEC_INTERLEAVE_LOW_EXPR): Remove.\n+\t* gimple-pretty-print.c (dump_binary_rhs): Don't handle\n+\tVEC_INTERLEAVE_HIGH_EXPR and VEC_INTERLEAVE_LOW_EXPR.\n+\t* expr.c (expand_expr_real_2): Likewise.\n+\t* tree-cfg.c (verify_gimple_assign_binary): Likewise.\n+\t* cfgexpand.c (expand_debug_expr): Likewise.\n+\t* tree-inline.c (estimate_operator_cost): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* tree-vect-generic.c (expand_vector_operations_1): Likewise.\n+\t* fold-const.c (fold_binary_loc): Likewise.\n+\t* doc/generic.texi (VEC_INTERLEAVE_HIGH_EXPR,\n+\tVEC_INTERLEAVE_LOW_EXPR): Remove documentation.\n+\t* optabs.c (optab_for_tree_code): Don't handle\n+\tVEC_INTERLEAVE_HIGH_EXPR and VEC_INTERLEAVE_LOW_EXPR.\n+\t(expand_binop, init_optabs): Remove vec_interleave_high_optab\n+\tand vec_interleave_low_optab.\n+\t* genopinit.c (optabs): Likewise.\n+\t* optabs.h (OTI_vec_interleave_high, OTI_vec_interleave_low): Remove.\n+\t(vec_interleave_high_optab, vec_interleave_low_optab): Remove.\n+\t* doc/md.texi (vec_interleave_high, vec_interleave_low): Remove\n+\tdocumentation.\n+\t* tree-vect-stmts.c (gen_perm_mask): Renamed to...\n+\t(vect_gen_perm_mask): ... this.  No longer static.\n+\t(perm_mask_for_reverse, vectorizable_load): Adjust callers.\n+\t* tree-vectorizer.h (vect_gen_perm_mask): New prototype.\n+\t* tree-vect-data-refs.c (vect_strided_store_supported): Don't try\n+\tVEC_INTERLEAVE_*_EXPR, use can_vec_perm_p instead of\n+\tcan_vec_perm_for_code_p.\n+\t(vect_permute_store_chain): Generate VEC_PERM_EXPR with interleaving\n+\tmasks instead of VEC_INTERLEAVE_HIGH_EXPR and VEC_INTERLEAVE_LOW_EXPR.\n+\t* config/i386/i386.c (expand_vec_perm_interleave2): If\n+\texpand_vec_perm_interleave3 would handle it, return false.\n+\t(expand_vec_perm_broadcast_1): Don't use vec_interleave_*_optab.\n+\n 2011-12-23  Richard Henderson  <rth@redhat.com>\n \n \t* config/mips/loongson.md (UNSPEC_LOONGSON_PINSR_0,\n@@ -329,7 +366,7 @@\n \n \tPR target/49865\n \t* ira-costs.c (find_costs_and_classes): Prefer registers even\n-          if the memory cost is the same.\n+\tif the memory cost is the same.\n \n 2011-12-20  Joseph Myers  <joseph@codesourcery.com>\n "}, {"sha": "dfe5442880ce40e7333573020c115dd79d0579e2", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -3451,8 +3451,6 @@ expand_debug_expr (tree exp)\n     case VEC_COND_EXPR:\n     case VEC_EXTRACT_EVEN_EXPR:\n     case VEC_EXTRACT_ODD_EXPR:\n-    case VEC_INTERLEAVE_HIGH_EXPR:\n-    case VEC_INTERLEAVE_LOW_EXPR:\n     case VEC_LSHIFT_EXPR:\n     case VEC_PACK_FIX_TRUNC_EXPR:\n     case VEC_PACK_SAT_EXPR:"}, {"sha": "b8e63965bb2f10c67d77a8c7f2ec9f49d9025d6d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -36021,6 +36021,8 @@ expand_vec_perm_palignr (struct expand_vec_perm_d *d)\n   return ok;\n }\n \n+static bool expand_vec_perm_interleave3 (struct expand_vec_perm_d *d);\n+\n /* A subroutine of ix86_expand_vec_perm_builtin_1.  Try to simplify\n    a two vector permutation into a single vector permutation by using\n    an interleave operation to merge the vectors.  */\n@@ -36047,6 +36049,17 @@ expand_vec_perm_interleave2 (struct expand_vec_perm_d *d)\n       /* For 32-byte modes allow even d->op0 == d->op1.\n \t The lack of cross-lane shuffling in some instructions\n \t might prevent a single insn shuffle.  */\n+      dfinal = *d;\n+      dfinal.testing_p = true;\n+      /* If expand_vec_perm_interleave3 can expand this into\n+\t a 3 insn sequence, give up and let it be expanded as\n+\t 3 insn sequence.  While that is one insn longer,\n+\t it doesn't need a memory operand and in the common\n+\t case that both interleave low and high permutations\n+\t with the same operands are adjacent needs 4 insns\n+\t for both after CSE.  */\n+      if (expand_vec_perm_interleave3 (&dfinal))\n+\treturn false;\n     }\n   else\n     return false;\n@@ -36886,18 +36899,23 @@ expand_vec_perm_broadcast_1 (struct expand_vec_perm_d *d)\n \t stopping once we have promoted to V4SImode and then use pshufd.  */\n       do\n \t{\n-\t  optab otab = vec_interleave_low_optab;\n+\t  rtx dest;\n+\t  rtx (*gen) (rtx, rtx, rtx)\n+\t    = vmode == V16QImode ? gen_vec_interleave_lowv16qi\n+\t\t\t\t : gen_vec_interleave_lowv8hi;\n \n \t  if (elt >= nelt2)\n \t    {\n-\t      otab = vec_interleave_high_optab;\n+\t      gen = vmode == V16QImode ? gen_vec_interleave_highv16qi\n+\t\t\t\t       : gen_vec_interleave_highv8hi;\n \t      elt -= nelt2;\n \t    }\n \t  nelt2 /= 2;\n \n-\t  op0 = expand_binop (vmode, otab, op0, op0, NULL, 0, OPTAB_DIRECT);\n+\t  dest = gen_reg_rtx (vmode);\n+\t  emit_insn (gen (dest, op0, op0));\n \t  vmode = get_mode_wider_vector (vmode);\n-\t  op0 = gen_lowpart (vmode, op0);\n+\t  op0 = gen_lowpart (vmode, dest);\n \t}\n       while (vmode != V4SImode);\n "}, {"sha": "4f26238322cd118d11837ab491bc55d89178782a", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -1697,8 +1697,6 @@ its sole argument yields the representation for @code{ap}.\n @tindex VEC_PACK_FIX_TRUNC_EXPR\n @tindex VEC_EXTRACT_EVEN_EXPR\n @tindex VEC_EXTRACT_ODD_EXPR\n-@tindex VEC_INTERLEAVE_HIGH_EXPR\n-@tindex VEC_INTERLEAVE_LOW_EXPR\n \n @table @code\n @item VEC_LSHIFT_EXPR\n@@ -1774,17 +1772,6 @@ These nodes represent extracting of the even/odd elements of the two input\n vectors, respectively. Their operands and result are vectors that contain the\n same number of elements of the same type.\n \n-@item VEC_INTERLEAVE_HIGH_EXPR\n-@itemx VEC_INTERLEAVE_LOW_EXPR\n-These nodes represent merging and interleaving of the high/low elements of the\n-two input vectors, respectively. The operands and the result are vectors that\n-contain the same number of elements (@code{N}) of the same type.\n-In the case of @code{VEC_INTERLEAVE_HIGH_EXPR}, the high @code{N/2} elements of\n-the first input vector are interleaved with the high @code{N/2} elements of the\n-second input vector. In the case of @code{VEC_INTERLEAVE_LOW_EXPR}, the low\n-@code{N/2} elements of the first input vector are interleaved with the low\n-@code{N/2} elements of the second input vector.\n-\n @end table\n \n "}, {"sha": "6dd6a5835a379e7f35b82c4a8041048577ee0dec", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -4159,20 +4159,6 @@ The odd elements of operand 2 are concatenated to the odd elements of operand\n 1 in their original order. The result is stored in operand 0.\n The output and input vectors should have the same modes.\n \n-@cindex @code{vec_interleave_high@var{m}} instruction pattern\n-@item @samp{vec_interleave_high@var{m}}\n-Merge high elements of the two input vectors into the output vector. The output\n-and input vectors should have the same modes (@code{N} elements). The high\n-@code{N/2} elements of the first input vector are interleaved with the high\n-@code{N/2} elements of the second input vector.\n-\n-@cindex @code{vec_interleave_low@var{m}} instruction pattern\n-@item @samp{vec_interleave_low@var{m}}\n-Merge low elements of the two input vectors into the output vector. The output\n-and input vectors should have the same modes (@code{N} elements). The low\n-@code{N/2} elements of the first input vector are interleaved with the low\n-@code{N/2} elements of the second input vector.\n-\n @cindex @code{vec_init@var{m}} instruction pattern\n @item @samp{vec_init@var{m}}\n Initialize the vector to given values.  Operand 0 is the vector to initialize"}, {"sha": "cb28f480dd598463d87b5ebf799263ce6e4f9f14", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -8649,8 +8649,6 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n \n     case VEC_EXTRACT_EVEN_EXPR:\n     case VEC_EXTRACT_ODD_EXPR:\n-    case VEC_INTERLEAVE_HIGH_EXPR:\n-    case VEC_INTERLEAVE_LOW_EXPR:\n       goto binop;\n \n     case VEC_LSHIFT_EXPR:"}, {"sha": "89c68cf582b0027121b959d0726e9dd6c8250bdb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -13503,8 +13503,6 @@ fold_binary_loc (location_t loc,\n \n     case VEC_EXTRACT_EVEN_EXPR:\n     case VEC_EXTRACT_ODD_EXPR:\n-    case VEC_INTERLEAVE_HIGH_EXPR:\n-    case VEC_INTERLEAVE_LOW_EXPR:\n       if ((TREE_CODE (arg0) == VECTOR_CST\n \t   || TREE_CODE (arg0) == CONSTRUCTOR)\n \t  && (TREE_CODE (arg1) == VECTOR_CST\n@@ -13522,14 +13520,6 @@ fold_binary_loc (location_t loc,\n \t      case VEC_EXTRACT_ODD_EXPR:\n \t\tsel[i] = i * 2 + 1;\n \t\tbreak;\n-\t      case VEC_INTERLEAVE_HIGH_EXPR:\n-\t\tsel[i] = (i + (BYTES_BIG_ENDIAN ? 0 : nelts)) / 2\n-\t\t\t + ((i & 1) ? nelts : 0);\n-\t\tbreak;\n-\t      case VEC_INTERLEAVE_LOW_EXPR:\n-\t\tsel[i] = (i + (BYTES_BIG_ENDIAN ? nelts : 0)) / 2\n-\t\t\t + ((i & 1) ? nelts : 0);\n-\t\tbreak;\n \t      default:\n \t\tgcc_unreachable ();\n \t      }"}, {"sha": "9cd77fac367e47f4b24f5dfd3db8e3460340ff1d", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -1,6 +1,6 @@\n /* Generate code to initialize optabs from machine description.\n    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -269,8 +269,6 @@ static const char * const optabs[] =\n   \"set_optab_handler (vec_extract_optab, $A, CODE_FOR_$(vec_extract$a$))\",\n   \"set_optab_handler (vec_extract_even_optab, $A, CODE_FOR_$(vec_extract_even$a$))\",\n   \"set_optab_handler (vec_extract_odd_optab, $A, CODE_FOR_$(vec_extract_odd$a$))\",\n-  \"set_optab_handler (vec_interleave_high_optab, $A, CODE_FOR_$(vec_interleave_high$a$))\",\n-  \"set_optab_handler (vec_interleave_low_optab, $A, CODE_FOR_$(vec_interleave_low$a$))\",\n   \"set_optab_handler (vec_init_optab, $A, CODE_FOR_$(vec_init$a$))\",\n   \"set_optab_handler (vec_shl_optab, $A, CODE_FOR_$(vec_shl_$a$))\",\n   \"set_optab_handler (vec_shr_optab, $A, CODE_FOR_$(vec_shr_$a$))\","}, {"sha": "b93d66d8e3fb8366d926af04fd7c9a89caf01a83", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -347,8 +347,6 @@ dump_binary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n     case VEC_PACK_FIX_TRUNC_EXPR:\n     case VEC_EXTRACT_EVEN_EXPR:\n     case VEC_EXTRACT_ODD_EXPR:\n-    case VEC_INTERLEAVE_HIGH_EXPR:\n-    case VEC_INTERLEAVE_LOW_EXPR:\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n       for (p = tree_code_name [(int) code]; *p; p++)"}, {"sha": "1c13b5a660fd9ca56d378b756c4f27f6d0b4e0d2", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -553,12 +553,6 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n     case VEC_EXTRACT_ODD_EXPR:\n       return vec_extract_odd_optab;\n \n-    case VEC_INTERLEAVE_HIGH_EXPR:\n-      return vec_interleave_high_optab;\n-\n-    case VEC_INTERLEAVE_LOW_EXPR:\n-      return vec_interleave_low_optab;\n-\n     default:\n       return NULL;\n     }\n@@ -1612,11 +1606,7 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n       enum tree_code tcode = ERROR_MARK;\n       rtx sel;\n \n-      if (binoptab == vec_interleave_high_optab)\n-\ttcode = VEC_INTERLEAVE_HIGH_EXPR;\n-      else if (binoptab == vec_interleave_low_optab)\n-\ttcode = VEC_INTERLEAVE_LOW_EXPR;\n-      else if (binoptab == vec_extract_even_optab)\n+      if (binoptab == vec_extract_even_optab)\n \ttcode = VEC_EXTRACT_EVEN_EXPR;\n       else if (binoptab == vec_extract_odd_optab)\n \ttcode = VEC_EXTRACT_ODD_EXPR;\n@@ -6271,8 +6261,6 @@ init_optabs (void)\n   init_optab (vec_extract_optab, UNKNOWN);\n   init_optab (vec_extract_even_optab, UNKNOWN);\n   init_optab (vec_extract_odd_optab, UNKNOWN);\n-  init_optab (vec_interleave_high_optab, UNKNOWN);\n-  init_optab (vec_interleave_low_optab, UNKNOWN);\n   init_optab (vec_set_optab, UNKNOWN);\n   init_optab (vec_init_optab, UNKNOWN);\n   init_optab (vec_shl_optab, UNKNOWN);\n@@ -6880,8 +6868,7 @@ can_vec_perm_p (enum machine_mode mode, bool variable,\n   return true;\n }\n \n-/* Return true if we can implement VEC_INTERLEAVE_{HIGH,LOW}_EXPR or\n-   VEC_EXTRACT_{EVEN,ODD}_EXPR with VEC_PERM_EXPR for this target.\n+/* Return true if we can implement with VEC_PERM_EXPR for this target.\n    If PSEL is non-null, return the selector for the permutation.  */\n \n bool\n@@ -6931,17 +6918,6 @@ can_vec_perm_for_code_p (enum tree_code code, enum machine_mode mode,\n \t    data[i] = i * 2 + alt;\n \t  break;\n \n-\tcase VEC_INTERLEAVE_HIGH_EXPR:\n-\tcase VEC_INTERLEAVE_LOW_EXPR:\n-\t  if ((BYTES_BIG_ENDIAN != 0) ^ (code == VEC_INTERLEAVE_HIGH_EXPR))\n-\t    alt = nelt / 2;\n-\t  for (i = 0; i < nelt / 2; ++i)\n-\t    {\n-\t      data[i * 2] = i + alt;\n-\t      data[i * 2 + 1] = i + nelt + alt;\n-\t    }\n-\t  break;\n-\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "a7c43ac5e8b68de11aa9d8063c5cddd1e0aff6ab", "filename": "gcc/optabs.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -335,9 +335,6 @@ enum optab_index\n   /* Extract even/odd fields of vector operands.  */\n   OTI_vec_extract_even,\n   OTI_vec_extract_odd,\n-  /* Interleave fields of vector operands.  */\n-  OTI_vec_interleave_high,\n-  OTI_vec_interleave_low,\n   /* Initialize vector operand.  */\n   OTI_vec_init,\n   /* Whole vector shift. The shift amount is in bits.  */\n@@ -564,8 +561,6 @@ enum optab_index\n #define vec_extract_optab (&optab_table[OTI_vec_extract])\n #define vec_extract_even_optab (&optab_table[OTI_vec_extract_even])\n #define vec_extract_odd_optab (&optab_table[OTI_vec_extract_odd])\n-#define vec_interleave_high_optab (&optab_table[OTI_vec_interleave_high])\n-#define vec_interleave_low_optab (&optab_table[OTI_vec_interleave_low])\n #define vec_init_optab (&optab_table[OTI_vec_init])\n #define vec_shl_optab (&optab_table[OTI_vec_shl])\n #define vec_shr_optab (&optab_table[OTI_vec_shr])"}, {"sha": "1fce5319d8cce2f77d7edc47d5a27c03686c188c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -3713,8 +3713,6 @@ verify_gimple_assign_binary (gimple stmt)\n     case VEC_PACK_FIX_TRUNC_EXPR:\n     case VEC_EXTRACT_EVEN_EXPR:\n     case VEC_EXTRACT_ODD_EXPR:\n-    case VEC_INTERLEAVE_HIGH_EXPR:\n-    case VEC_INTERLEAVE_LOW_EXPR:\n       /* FIXME.  */\n       return false;\n "}, {"sha": "fb55346b1f45215200e1277ffe0ef40e240b2d73", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -3401,8 +3401,6 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n     case VEC_PACK_FIX_TRUNC_EXPR:\n     case VEC_EXTRACT_EVEN_EXPR:\n     case VEC_EXTRACT_ODD_EXPR:\n-    case VEC_INTERLEAVE_HIGH_EXPR:\n-    case VEC_INTERLEAVE_LOW_EXPR:\n     case VEC_WIDEN_LSHIFT_HI_EXPR:\n     case VEC_WIDEN_LSHIFT_LO_EXPR:\n "}, {"sha": "9363aea1192cb6be731840f2a9905cb4d9b3a34b", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -2404,22 +2404,6 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       pp_string (buffer, \" > \");\n       break;\n \n-    case VEC_INTERLEAVE_HIGH_EXPR:\n-      pp_string (buffer, \" VEC_INTERLEAVE_HIGH_EXPR < \");\n-      dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_string (buffer, \", \");\n-      dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n-      pp_string (buffer, \" > \");\n-      break;\n-\n-    case VEC_INTERLEAVE_LOW_EXPR:\n-      pp_string (buffer, \" VEC_INTERLEAVE_LOW_EXPR < \");\n-      dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_string (buffer, \", \");\n-      dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n-      pp_string (buffer, \" > \");\n-      break;\n-\n     default:\n       NIY;\n     }"}, {"sha": "e6f03813a402528a5de5553f916df3809a3f98b4", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -3800,7 +3800,6 @@ vect_create_destination_var (tree scalar_dest, tree vectype)\n bool\n vect_strided_store_supported (tree vectype, unsigned HOST_WIDE_INT count)\n {\n-  optab ih_optab, il_optab;\n   enum machine_mode mode;\n \n   mode = TYPE_MODE (vectype);\n@@ -3815,18 +3814,23 @@ vect_strided_store_supported (tree vectype, unsigned HOST_WIDE_INT count)\n     }\n \n   /* Check that the operation is supported.  */\n-  ih_optab = optab_for_tree_code (VEC_INTERLEAVE_HIGH_EXPR,\n-\t\t\t\t  vectype, optab_default);\n-  il_optab = optab_for_tree_code (VEC_INTERLEAVE_LOW_EXPR,\n-\t\t\t\t  vectype, optab_default);\n-  if (il_optab && ih_optab\n-      && optab_handler (ih_optab, mode) != CODE_FOR_nothing\n-      && optab_handler (il_optab, mode) != CODE_FOR_nothing)\n-    return true;\n-\n-  if (can_vec_perm_for_code_p (VEC_INTERLEAVE_HIGH_EXPR, mode, NULL)\n-      && can_vec_perm_for_code_p (VEC_INTERLEAVE_LOW_EXPR, mode, NULL))\n-    return true;\n+  if (VECTOR_MODE_P (mode))\n+    {\n+      unsigned int i, nelt = GET_MODE_NUNITS (mode);\n+      unsigned char *sel = XALLOCAVEC (unsigned char, nelt);\n+      for (i = 0; i < nelt / 2; i++)\n+\t{\n+\t  sel[i * 2] = i;\n+\t  sel[i * 2 + 1] = i + nelt;\n+\t}\n+      if (can_vec_perm_p (mode, false, sel))\n+\t{\n+\t  for (i = 0; i < nelt; i++)\n+\t    sel[i] += nelt / 2;\n+\t  if (can_vec_perm_p (mode, false, sel))\n+\t    return true;\n+\t}\n+    }\n \n   if (vect_print_dump_info (REPORT_DETAILS))\n     fprintf (vect_dump, \"interleave op not supported by target.\");\n@@ -3917,58 +3921,54 @@ vect_permute_store_chain (VEC(tree,heap) *dr_chain,\n   tree perm_dest, vect1, vect2, high, low;\n   gimple perm_stmt;\n   tree vectype = STMT_VINFO_VECTYPE (vinfo_for_stmt (stmt));\n-  int i;\n-  unsigned int j;\n-  enum tree_code high_code, low_code;\n+  tree perm_mask_low, perm_mask_high;\n+  unsigned int i, n;\n+  unsigned int j, nelt = GET_MODE_NUNITS (TYPE_MODE (vectype));\n+  unsigned char *sel = XALLOCAVEC (unsigned char, nelt);\n \n   gcc_assert (vect_strided_store_supported (vectype, length));\n \n   *result_chain = VEC_copy (tree, heap, dr_chain);\n \n-  for (i = 0; i < exact_log2 (length); i++)\n+  for (i = 0, n = nelt / 2; i < n; i++)\n+    {\n+      sel[i * 2] = i;\n+      sel[i * 2 + 1] = i + nelt;\n+    }\n+  perm_mask_high = vect_gen_perm_mask (vectype, sel);\n+  for (i = 0; i < nelt; i++)\n+    sel[i] += nelt / 2;\n+  perm_mask_low = vect_gen_perm_mask (vectype, sel);\n+\n+  for (i = 0, n = exact_log2 (length); i < n; i++)\n     {\n       for (j = 0; j < length/2; j++)\n \t{\n \t  vect1 = VEC_index (tree, dr_chain, j);\n \t  vect2 = VEC_index (tree, dr_chain, j+length/2);\n \n \t  /* Create interleaving stmt:\n-\t     in the case of big endian:\n-                                high = interleave_high (vect1, vect2)\n-             and in the case of little endian:\n-                                high = interleave_low (vect1, vect2).  */\n+\t     high = VEC_PERM_EXPR <vect1, vect2, {0, nelt, 1, nelt+1, ...}>  */\n \t  perm_dest = create_tmp_var (vectype, \"vect_inter_high\");\n \t  DECL_GIMPLE_REG_P (perm_dest) = 1;\n \t  add_referenced_var (perm_dest);\n-          if (BYTES_BIG_ENDIAN)\n-\t    {\n-\t      high_code = VEC_INTERLEAVE_HIGH_EXPR;\n-\t      low_code = VEC_INTERLEAVE_LOW_EXPR;\n-\t    }\n-\t  else\n-\t    {\n-\t      low_code = VEC_INTERLEAVE_HIGH_EXPR;\n-\t      high_code = VEC_INTERLEAVE_LOW_EXPR;\n-\t    }\n-\t  perm_stmt = gimple_build_assign_with_ops (high_code, perm_dest,\n-\t\t\t\t\t\t    vect1, vect2);\n-\t  high = make_ssa_name (perm_dest, perm_stmt);\n-\t  gimple_assign_set_lhs (perm_stmt, high);\n+\t  high = make_ssa_name (perm_dest, NULL);\n+\t  perm_stmt\n+\t    = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, high,\n+\t\t\t\t\t     vect1, vect2, perm_mask_high);\n \t  vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n \t  VEC_replace (tree, *result_chain, 2*j, high);\n \n \t  /* Create interleaving stmt:\n-             in the case of big endian:\n-                               low  = interleave_low (vect1, vect2)\n-             and in the case of little endian:\n-                               low  = interleave_high (vect1, vect2).  */\n+\t     low = VEC_PERM_EXPR <vect1, vect2, {nelt/2, nelt*3/2, nelt/2+1,\n+\t\t\t\t\t\t nelt*3/2+1, ...}>  */\n \t  perm_dest = create_tmp_var (vectype, \"vect_inter_low\");\n \t  DECL_GIMPLE_REG_P (perm_dest) = 1;\n \t  add_referenced_var (perm_dest);\n-\t  perm_stmt = gimple_build_assign_with_ops (low_code, perm_dest,\n-\t\t\t\t\t\t    vect1, vect2);\n-\t  low = make_ssa_name (perm_dest, perm_stmt);\n-\t  gimple_assign_set_lhs (perm_stmt, low);\n+\t  low = make_ssa_name (perm_dest, NULL);\n+\t  perm_stmt\n+\t    = gimple_build_assign_with_ops3 (VEC_PERM_EXPR, low,\n+\t\t\t\t\t     vect1, vect2, perm_mask_low);\n \t  vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n \t  VEC_replace (tree, *result_chain, 2*j+1, low);\n \t}"}, {"sha": "3d97ba0efd17cfc3e462d965cfcb2b4af4b8b3fb", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -776,9 +776,7 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n   /* These are only created by the vectorizer, after having queried\n      the target support.  It's more than just looking at the optab,\n      and there's no need to do it again.  */\n-  if (code == VEC_INTERLEAVE_HIGH_EXPR\n-      || code == VEC_INTERLEAVE_LOW_EXPR\n-      || code == VEC_EXTRACT_EVEN_EXPR\n+  if (code == VEC_EXTRACT_EVEN_EXPR\n       || code == VEC_EXTRACT_ODD_EXPR)\n     return;\n "}, {"sha": "a08b009141b7b96f194a3a0217bda72d27a9157c", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -3828,8 +3828,8 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \n      Then permutation statements are generated:\n \n-        VS5: vx5 = VEC_INTERLEAVE_HIGH_EXPR < vx0, vx3 >\n-        VS6: vx6 = VEC_INTERLEAVE_LOW_EXPR < vx0, vx3 >\n+\tVS5: vx5 = VEC_PERM_EXPR < vx0, vx3, {0, 8, 1, 9, 2, 10, 3, 11} >\n+\tVS6: vx6 = VEC_PERM_EXPR < vx0, vx3, {4, 12, 5, 13, 6, 14, 7, 15} >\n \t...\n \n      And they are put in STMT_VINFO_VEC_STMT of the corresponding scalar stmts\n@@ -4026,8 +4026,8 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n    the VECTOR_CST mask that implements the permutation of the\n    vector elements.  If that is impossible to do, returns NULL.  */\n \n-static tree\n-gen_perm_mask (tree vectype, unsigned char *sel)\n+tree\n+vect_gen_perm_mask (tree vectype, unsigned char *sel)\n {\n   tree mask_elt_type, mask_type, mask_vec;\n   int i, nunits;\n@@ -4067,7 +4067,7 @@ perm_mask_for_reverse (tree vectype)\n   for (i = 0; i < nunits; ++i)\n     sel[i] = nunits - 1 - i;\n \n-  return gen_perm_mask (vectype, sel);\n+  return vect_gen_perm_mask (vectype, sel);\n }\n \n /* Given a vector variable X and Y, that was generated for the scalar\n@@ -4314,7 +4314,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t  for (i = 0; i < gather_off_nunits; ++i)\n \t    sel[i] = i | nunits;\n \n-\t  perm_mask = gen_perm_mask (gather_off_vectype, sel);\n+\t  perm_mask = vect_gen_perm_mask (gather_off_vectype, sel);\n \t  gcc_assert (perm_mask != NULL_TREE);\n \t}\n       else if (nunits == gather_off_nunits * 2)\n@@ -4326,7 +4326,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t    sel[i] = i < gather_off_nunits\n \t\t     ? i : i + nunits - gather_off_nunits;\n \n-\t  perm_mask = gen_perm_mask (vectype, sel);\n+\t  perm_mask = vect_gen_perm_mask (vectype, sel);\n \t  gcc_assert (perm_mask != NULL_TREE);\n \t  ncopies *= 2;\n \t}"}, {"sha": "cccfaff95cc4a6cdfa2436af93b511a9fb26e8dc", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -848,6 +848,7 @@ extern void vect_get_store_cost (struct data_reference *, int, unsigned int *);\n extern bool vect_supportable_shift (enum tree_code, tree);\n extern void vect_get_vec_defs (tree, tree, gimple, VEC (tree, heap) **,\n \t\t\t       VEC (tree, heap) **, slp_tree, int);\n+extern tree vect_gen_perm_mask (tree, unsigned char *);\n \n /* In tree-vect-data-refs.c.  */\n extern bool vect_can_force_dr_alignment_p (const_tree, unsigned int);"}, {"sha": "2f096f9ba12bb2f0ed9a9ca9c24f6442a8be18be", "filename": "gcc/tree.def", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcc1b5520fbb2ce2b55a5bd825924a55e044b79/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=3fcc1b5520fbb2ce2b55a5bd825924a55e044b79", "patch": "@@ -1192,10 +1192,6 @@ DEFTREECODE (VEC_PACK_FIX_TRUNC_EXPR, \"vec_pack_fix_trunc_expr\", tcc_binary, 2)\n DEFTREECODE (VEC_EXTRACT_EVEN_EXPR, \"vec_extract_even_expr\", tcc_binary, 2)\n DEFTREECODE (VEC_EXTRACT_ODD_EXPR, \"vec_extract_odd_expr\", tcc_binary, 2)\n \n-/* Merge input vectors interleaving their fields.  */\n-DEFTREECODE (VEC_INTERLEAVE_HIGH_EXPR, \"vec_interleave_high_expr\", tcc_binary, 2)\n-DEFTREECODE (VEC_INTERLEAVE_LOW_EXPR, \"vec_interleave_low_expr\", tcc_binary, 2)\n-\n /* Widening vector shift left in bits.\n    Operand 0 is a vector to be shifted with N elements of size S.\n    Operand 1 is an integer shift amount in bits."}]}