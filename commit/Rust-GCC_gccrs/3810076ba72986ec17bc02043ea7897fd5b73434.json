{"sha": "3810076ba72986ec17bc02043ea7897fd5b73434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxMDA3NmJhNzI5ODZlYzE3YmMwMjA0M2VhNzg5N2ZkNWI3MzQzNA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-05-03T11:52:38Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-05-03T11:52:38Z"}, "message": "gengenrtl.c (special_rtx): PC, CC0 and RETURN are special.\n\n\t* gengenrtl.c (special_rtx): PC, CC0 and RETURN are special.\n\t* genemit.c (gen_exp): Handle RETURN.\n\t* emit-rtl.c (verify_rtx_sharing): Likewise.\n\t(init_emit_regs): Create pc_rtx, ret_rtx and cc0_rtx specially.\n\t* rtl.c (copy_rtx): RETURN is shared.\n\t* rtl.h (enum global_rtl_index): Add GR_RETURN.\n\t(ret_rtx): New.\n\t* jump.c (redirect_exp_1): Don't use gen_rtx_RETURN.\n\t* config/s390/s390.c (s390_emit_epilogue): Likewise.\n\t* config/rx/rx.c (gen_rx_rtsd_vector): Likewise.\n\t* config/cris/cris.c (cris_expand_return): Likewise.\n\t* config/m68k/m68k.c (m68k_expand_epilogue): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_make_savres_rtx,\n\trs6000_emit_epilogue, rs6000_output_mi_thunk): Likewise.\n\t* config/picochip/picochip.c (picochip_expand_epilogue): Likewise.\n\t* config/h8300/h8300.c (h8300_push_pop, h8300_expand_epilogue):\n\tLikewise.\n\t* config/v850/v850.c (expand_epilogue): Likewise.\n\t* config/bfin/bfin.c (bfin_expand_call): Likewise.\n\t* config/arm/arm.md (epilogue): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_expand_epilogue): Likewise.\n\t* config/sparc/sparc.c (sparc_struct_value_rtx): Rename ret_rtx\n\tvariable to ret_reg.\n\nFrom-SVN: r173300", "tree": {"sha": "dc3bbe7405a10d42294c4caae5ec270171109bcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc3bbe7405a10d42294c4caae5ec270171109bcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3810076ba72986ec17bc02043ea7897fd5b73434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3810076ba72986ec17bc02043ea7897fd5b73434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3810076ba72986ec17bc02043ea7897fd5b73434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3810076ba72986ec17bc02043ea7897fd5b73434/comments", "author": null, "committer": null, "parents": [{"sha": "9efdb4adb6c7ee2e70e9c071a662d910d30c5b5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9efdb4adb6c7ee2e70e9c071a662d910d30c5b5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9efdb4adb6c7ee2e70e9c071a662d910d30c5b5f"}], "stats": {"total": 87, "additions": 61, "deletions": 26}, "files": [{"sha": "e59561d8234c494d213292f3edc4b30e7f57b76f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -1,3 +1,29 @@\n+2011-05-03  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* gengenrtl.c (special_rtx): PC, CC0 and RETURN are special.\n+\t* genemit.c (gen_exp): Handle RETURN.\n+\t* emit-rtl.c (verify_rtx_sharing): Likewise.\n+\t(init_emit_regs): Create pc_rtx, ret_rtx and cc0_rtx specially.\n+\t* rtl.c (copy_rtx): RETURN is shared.\n+\t* rtl.h (enum global_rtl_index): Add GR_RETURN.\n+\t(ret_rtx): New.\n+\t* jump.c (redirect_exp_1): Don't use gen_rtx_RETURN.\n+\t* config/s390/s390.c (s390_emit_epilogue): Likewise.\n+\t* config/rx/rx.c (gen_rx_rtsd_vector): Likewise.\n+\t* config/cris/cris.c (cris_expand_return): Likewise.\n+\t* config/m68k/m68k.c (m68k_expand_epilogue): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_make_savres_rtx,\n+\trs6000_emit_epilogue, rs6000_output_mi_thunk): Likewise.\n+\t* config/picochip/picochip.c (picochip_expand_epilogue): Likewise.\n+\t* config/h8300/h8300.c (h8300_push_pop, h8300_expand_epilogue):\n+\tLikewise.\n+\t* config/v850/v850.c (expand_epilogue): Likewise.\n+\t* config/bfin/bfin.c (bfin_expand_call): Likewise.\n+\t* config/arm/arm.md (epilogue): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_expand_epilogue): Likewise.\n+\t* config/sparc/sparc.c (sparc_struct_value_rtx): Rename ret_rtx\n+\tvariable to ret_reg.\n+\n 2011-05-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/48846"}, {"sha": "40ebf35d547f29aea59efa62ede534585f26a766", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -10006,9 +10006,7 @@\n       DONE;\n     }\n   emit_jump_insn (gen_rtx_UNSPEC_VOLATILE (VOIDmode,\n-\tgen_rtvec (1,\n-\t\tgen_rtx_RETURN (VOIDmode)),\n-\tVUNSPEC_EPILOGUE));\n+\tgen_rtvec (1, ret_rtx), VUNSPEC_EPILOGUE));\n   DONE;\n   \"\n )"}, {"sha": "9369d1d0d67013fe3747efb8d3ed307811d2b23a", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -2334,7 +2334,7 @@ bfin_expand_call (rtx retval, rtx fnaddr, rtx callarg1, rtx cookie, int sibcall)\n     XVECEXP (pat, 0, n++) = gen_rtx_USE (VOIDmode, picreg);\n   XVECEXP (pat, 0, n++) = gen_rtx_USE (VOIDmode, cookie);\n   if (sibcall)\n-    XVECEXP (pat, 0, n++) = gen_rtx_RETURN (VOIDmode);\n+    XVECEXP (pat, 0, n++) = ret_rtx;\n   else\n     XVECEXP (pat, 0, n++) = gen_rtx_CLOBBER (VOIDmode, retsreg);\n   call = emit_call_insn (pat);"}, {"sha": "110e98593f7bc8693d6054d386f9a90b25282ef7", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -1790,7 +1790,7 @@ cris_expand_return (bool on_stack)\n      we do that until they're fixed.  Currently, all return insns in a\n      function must be the same (not really a limiting factor) so we need\n      to check that it doesn't change half-way through.  */\n-  emit_jump_insn (gen_rtx_RETURN (VOIDmode));\n+  emit_jump_insn (ret_rtx);\n \n   CRIS_ASSERT (cfun->machine->return_type != CRIS_RETINSN_RET || !on_stack);\n   CRIS_ASSERT (cfun->machine->return_type != CRIS_RETINSN_JUMP || on_stack);"}, {"sha": "28c232e3bc125c673430d855b6c992f618089c5d", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -643,7 +643,7 @@ h8300_push_pop (int regno, int nregs, bool pop_p, bool return_p)\n   /* Add the return instruction.  */\n   if (return_p)\n     {\n-      RTVEC_ELT (vec, i) = gen_rtx_RETURN (VOIDmode);\n+      RTVEC_ELT (vec, i) = ret_rtx;\n       i++;\n     }\n \n@@ -927,7 +927,7 @@ h8300_expand_epilogue (void)\n     }\n \n   if (!returned_p)\n-    emit_jump_insn (gen_rtx_RETURN (VOIDmode));\n+    emit_jump_insn (ret_rtx);\n }\n \n /* Return nonzero if the current function is an interrupt"}, {"sha": "47f47af888c76c5f195a47d0f04689a5d0b8e6c1", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -1308,7 +1308,7 @@ m68k_expand_epilogue (bool sibcall_p)\n \t\t\t   EH_RETURN_STACKADJ_RTX));\n \n   if (!sibcall_p)\n-    emit_jump_insn (gen_rtx_RETURN (VOIDmode));\n+    emit_jump_insn (ret_rtx);\n }\n \f\n /* Return true if X is a valid comparison operator for the dbcc "}, {"sha": "1bae9f30eef083bcaf0f2109e24e97504a4f8ff3", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -1255,7 +1255,7 @@ mn10300_expand_epilogue (void)\n \n   /* Adjust the stack and restore callee-saved registers, if any.  */\n   if (mn10300_can_use_rets_insn ())\n-    emit_jump_insn (gen_rtx_RETURN (VOIDmode));\n+    emit_jump_insn (ret_rtx);\n   else\n     emit_jump_insn (gen_return_ret (GEN_INT (size + REG_SAVE_BYTES)));\n }"}, {"sha": "cab639b2333924ccd28b81b6d879e7e965be33e0", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -2273,7 +2273,7 @@ picochip_expand_epilogue (int is_sibling_call ATTRIBUTE_UNUSED)\n     rtvec p;\n     p = rtvec_alloc (2);\n \n-    RTVEC_ELT (p, 0) = gen_rtx_RETURN (VOIDmode);\n+    RTVEC_ELT (p, 0) = ret_rtx;\n     RTVEC_ELT (p, 1) = gen_rtx_USE (VOIDmode,\n \t\t\t\t    gen_rtx_REG (Pmode, LINK_REGNUM));\n     emit_jump_insn (gen_rtx_PARALLEL (VOIDmode, p));"}, {"sha": "1bf717c6cf7387b63e0ff98f25ede49a518c5952", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -20358,7 +20358,7 @@ rs6000_make_savres_rtx (rs6000_stack_t *info,\n   p = rtvec_alloc ((lr ? 4 : 3) + n_regs);\n \n   if (!savep && lr)\n-    RTVEC_ELT (p, offset++) = gen_rtx_RETURN (VOIDmode);\n+    RTVEC_ELT (p, offset++) = ret_rtx;\n \n   RTVEC_ELT (p, offset++)\n     = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 65));\n@@ -21350,7 +21350,7 @@ rs6000_emit_epilogue (int sibcall)\n       alloc_rname = ggc_strdup (rname);\n \n       j = 0;\n-      RTVEC_ELT (p, j++) = gen_rtx_RETURN (VOIDmode);\n+      RTVEC_ELT (p, j++) = ret_rtx;\n       RTVEC_ELT (p, j++) = gen_rtx_USE (VOIDmode,\n \t\t\t\t\tgen_rtx_REG (Pmode,\n \t\t\t\t\t\t     LR_REGNO));\n@@ -21966,7 +21966,7 @@ rs6000_emit_epilogue (int sibcall)\n       else\n \tp = rtvec_alloc (2);\n \n-      RTVEC_ELT (p, 0) = gen_rtx_RETURN (VOIDmode);\n+      RTVEC_ELT (p, 0) = ret_rtx;\n       RTVEC_ELT (p, 1) = ((restoring_FPRs_inline || !lr)\n \t\t\t  ? gen_rtx_USE (VOIDmode, gen_rtx_REG (Pmode, 65))\n \t\t\t  : gen_rtx_CLOBBER (VOIDmode,\n@@ -22405,7 +22405,7 @@ rs6000_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\tgen_rtx_USE (VOIDmode,\n \t\t\t\t     gen_rtx_REG (SImode,\n \t\t\t\t\t\t  LR_REGNO)),\n-\t\t\tgen_rtx_RETURN (VOIDmode))));\n+\t\t\tret_rtx)));\n   SIBLING_CALL_P (insn) = 1;\n   emit_barrier ();\n "}, {"sha": "ccf1a5d11b96c359e85bd62930389a7884b9b1fa", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -1567,7 +1567,7 @@ gen_rx_rtsd_vector (unsigned int adjust, unsigned int low, unsigned int high)\n \t\t\t\t: plus_constant (stack_pointer_rtx,\n \t\t\t\t\t\t i * UNITS_PER_WORD)));\n \n-  XVECEXP (vector, 0, count - 1) = gen_rtx_RETURN (VOIDmode);\n+  XVECEXP (vector, 0, count - 1) = ret_rtx;\n \n   return vector;\n }"}, {"sha": "e0f98e686e387145c4a337cd6866f1d9202ba1b1", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -8485,7 +8485,7 @@ s390_emit_epilogue (bool sibcall)\n \n       p = rtvec_alloc (2);\n \n-      RTVEC_ELT (p, 0) = gen_rtx_RETURN (VOIDmode);\n+      RTVEC_ELT (p, 0) = ret_rtx;\n       RTVEC_ELT (p, 1) = gen_rtx_USE (VOIDmode, return_reg);\n       emit_jump_insn (gen_rtx_PARALLEL (VOIDmode, p));\n     }"}, {"sha": "46be9040785cd44ecfd1efe8660970311918aa9f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -6063,7 +6063,7 @@ sparc_struct_value_rtx (tree fndecl, int incoming)\n \t  /* We must check and adjust the return address, as it is\n \t     optional as to whether the return object is really\n \t     provided.  */\n-\t  rtx ret_rtx = gen_rtx_REG (Pmode, 31);\n+\t  rtx ret_reg = gen_rtx_REG (Pmode, 31);\n \t  rtx scratch = gen_reg_rtx (SImode);\n \t  rtx endlab = gen_label_rtx ();\n \n@@ -6080,12 +6080,12 @@ sparc_struct_value_rtx (tree fndecl, int incoming)\n \t     it's an unimp instruction (the most significant 10 bits\n \t     will be zero).  */\n \t  emit_move_insn (scratch, gen_rtx_MEM (SImode,\n-\t\t\t\t\t\tplus_constant (ret_rtx, 8)));\n+\t\t\t\t\t\tplus_constant (ret_reg, 8)));\n \t  /* Assume the size is valid and pre-adjust */\n-\t  emit_insn (gen_add3_insn (ret_rtx, ret_rtx, GEN_INT (4)));\n+\t  emit_insn (gen_add3_insn (ret_reg, ret_reg, GEN_INT (4)));\n \t  emit_cmp_and_jump_insns (scratch, size_rtx, EQ, const0_rtx, SImode,\n \t\t\t\t   0, endlab);\n-\t  emit_insn (gen_sub3_insn (ret_rtx, ret_rtx, GEN_INT (4)));\n+\t  emit_insn (gen_sub3_insn (ret_reg, ret_reg, GEN_INT (4)));\n \t  /* Write the address of the memory pointed to by temp_val into\n \t     the memory pointed to by mem */\n \t  emit_move_insn (mem, XEXP (temp_val, 0));"}, {"sha": "45dad92c35610a2d79a0086048f9e78f74c572db", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -1890,7 +1890,7 @@ expand_epilogue (void)\n \t  int offset;\n \t  restore_all = gen_rtx_PARALLEL (VOIDmode,\n \t\t\t\t\t  rtvec_alloc (num_restore + 2));\n-\t  XVECEXP (restore_all, 0, 0) = gen_rtx_RETURN (VOIDmode);\n+\t  XVECEXP (restore_all, 0, 0) = ret_rtx;\n \t  XVECEXP (restore_all, 0, 1)\n \t    = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n \t\t\t    gen_rtx_PLUS (Pmode,"}, {"sha": "2e073b5da1f84661983d3e7e068d968ef7e2195d", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -2450,6 +2450,7 @@ verify_rtx_sharing (rtx orig, rtx insn)\n     case CODE_LABEL:\n     case PC:\n     case CC0:\n+    case RETURN:\n     case SCRATCH:\n       return;\n       /* SCRATCH must be shared because they represent distinct values.  */\n@@ -5416,8 +5417,9 @@ init_emit_regs (void)\n   init_reg_modes_target ();\n \n   /* Assign register numbers to the globally defined register rtx.  */\n-  pc_rtx = gen_rtx_PC (VOIDmode);\n-  cc0_rtx = gen_rtx_CC0 (VOIDmode);\n+  pc_rtx = gen_rtx_fmt_ (PC, VOIDmode);\n+  ret_rtx = gen_rtx_fmt_ (RETURN, VOIDmode);\n+  cc0_rtx = gen_rtx_fmt_ (CC0, VOIDmode);\n   stack_pointer_rtx = gen_raw_REG (Pmode, STACK_POINTER_REGNUM);\n   frame_pointer_rtx = gen_raw_REG (Pmode, FRAME_POINTER_REGNUM);\n   hard_frame_pointer_rtx = gen_raw_REG (Pmode, HARD_FRAME_POINTER_REGNUM);"}, {"sha": "ccad725d943a8af1e9f23f8a8aeb4970211c3689", "filename": "gcc/genemit.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -166,6 +166,9 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n     case PC:\n       printf (\"pc_rtx\");\n       return;\n+    case RETURN:\n+      printf (\"ret_rtx\");\n+      return;\n     case CLOBBER:\n       if (REG_P (XEXP (x, 0)))\n \t{"}, {"sha": "a61995876baf22c5845009cf979e782b4ee8028b", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -128,6 +128,9 @@ special_rtx (int idx)\n \t  || strcmp (defs[idx].enumname, \"REG\") == 0\n \t  || strcmp (defs[idx].enumname, \"SUBREG\") == 0\n \t  || strcmp (defs[idx].enumname, \"MEM\") == 0\n+\t  || strcmp (defs[idx].enumname, \"PC\") == 0\n+\t  || strcmp (defs[idx].enumname, \"CC0\") == 0\n+\t  || strcmp (defs[idx].enumname, \"RETURN\") == 0\n \t  || strcmp (defs[idx].enumname, \"CONST_VECTOR\") == 0);\n }\n "}, {"sha": "1c64b85d40855b16d1769536254cb969e8101ff6", "filename": "gcc/jump.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -1367,7 +1367,7 @@ redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n \t  if (nlabel)\n \t    n = gen_rtx_LABEL_REF (Pmode, nlabel);\n \t  else\n-\t    n = gen_rtx_RETURN (VOIDmode);\n+\t    n = ret_rtx;\n \n \t  validate_change (insn, loc, n, 1);\n \t  return;\n@@ -1378,7 +1378,7 @@ redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n       if (nlabel)\n \tx = gen_rtx_LABEL_REF (Pmode, nlabel);\n       else\n-\tx = gen_rtx_RETURN (VOIDmode);\n+\tx = ret_rtx;\n       if (loc == &PATTERN (insn))\n \tx = gen_rtx_SET (VOIDmode, pc_rtx, x);\n       validate_change (insn, loc, x, 1);\n@@ -1389,7 +1389,7 @@ redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n       && GET_CODE (SET_SRC (x)) == LABEL_REF\n       && XEXP (SET_SRC (x), 0) == olabel)\n     {\n-      validate_change (insn, loc, gen_rtx_RETURN (VOIDmode), 1);\n+      validate_change (insn, loc, ret_rtx, 1);\n       return;\n     }\n "}, {"sha": "e335a39b241ecf98383557a66636abe9b0e725e4", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -255,6 +255,7 @@ copy_rtx (rtx orig)\n     case CODE_LABEL:\n     case PC:\n     case CC0:\n+    case RETURN:\n     case SCRATCH:\n       /* SCRATCH must be shared because they represent distinct values.  */\n       return orig;"}, {"sha": "04021a3f29d9a270207bba3350a5fb94a6f46e08", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3810076ba72986ec17bc02043ea7897fd5b73434/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3810076ba72986ec17bc02043ea7897fd5b73434", "patch": "@@ -2045,6 +2045,7 @@ enum global_rtl_index\n {\n   GR_PC,\n   GR_CC0,\n+  GR_RETURN,\n   GR_STACK_POINTER,\n   GR_FRAME_POINTER,\n /* For register elimination to work properly these hard_frame_pointer_rtx,\n@@ -2134,6 +2135,7 @@ extern struct target_rtl *this_target_rtl;\n \n /* Standard pieces of rtx, to be substituted directly into things.  */\n #define pc_rtx                  (global_rtl[GR_PC])\n+#define ret_rtx                 (global_rtl[GR_RETURN])\n #define cc0_rtx                 (global_rtl[GR_CC0])\n \n /* All references to certain hard regs, except those created"}]}