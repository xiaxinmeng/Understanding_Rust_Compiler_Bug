{"sha": "8f8762a2e8659c1db802ba001869085c1915498f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4NzYyYTJlODY1OWMxZGI4MDJiYTAwMTg2OTA4NWMxOTE1NDk4Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-14T11:50:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-14T11:50:33Z"}, "message": "match.pd: Optimize ~(X >> Y) to ~X >> Y if ~X can be simplified [PR96688]\n\nThis patch optimizes two GIMPLE operations into just one.\nAs mentioned in the PR, there is some risk this might create more expensive\nconstants, but sometimes it will make them on the other side less expensive,\nit really depends on the exact value.\nAnd if it is an important issue, we should do it in md or during expansion.\n\n2021-01-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96688\n\t* match.pd (~(X >> Y) -> ~X >> Y): New simplification if\n\t~X can be simplified.\n\n\t* gcc.dg/tree-ssa/pr96688.c: New test.\n\t* gcc.dg/tree-ssa/reassoc-37.c: Adjust scan-tree-dump regex.\n\t* gcc.target/i386/pr66821.c: Likewise.", "tree": {"sha": "ca73185066382b0e83e9d96cb388dd6cad1af760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca73185066382b0e83e9d96cb388dd6cad1af760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f8762a2e8659c1db802ba001869085c1915498f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8762a2e8659c1db802ba001869085c1915498f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8762a2e8659c1db802ba001869085c1915498f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8762a2e8659c1db802ba001869085c1915498f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45c41988bfd655b1df7cff8fcf111dc6fb732e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45c41988bfd655b1df7cff8fcf111dc6fb732e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45c41988bfd655b1df7cff8fcf111dc6fb732e3"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "f08ab674a7064ddb41e73e42c9428ef2bd0c2ca1", "filename": "gcc/match.pd", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8762a2e8659c1db802ba001869085c1915498f/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8762a2e8659c1db802ba001869085c1915498f/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=8f8762a2e8659c1db802ba001869085c1915498f", "patch": "@@ -1119,6 +1119,18 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t&& wi::to_wide (@1) != wi::min_value (TYPE_PRECISION (type),\n \t\t\t\t\t      SIGNED))\n     (minus (plus @1 { build_minus_one_cst (type); }) @0))))\n+\n+/* ~(X >> Y) -> ~X >> Y if ~X can be simplified.  */\n+(simplify\n+ (bit_not (rshift:s @0 @1))\n+  (if (!TYPE_UNSIGNED (TREE_TYPE (@0)))\n+   (rshift (bit_not! @0) @1)\n+   /* For logical right shifts, this is possible only if @0 doesn't\n+      have MSB set and the logical right shift is changed into\n+      arithmetic shift.  */\n+   (if (!wi::neg_p (tree_nonzero_bits (@0)))\n+    (with { tree stype = signed_type_for (TREE_TYPE (@0)); }\n+     (convert (rshift (bit_not! (convert:stype @0)) @1))))))\n #endif\n \n /* x + (x & 1) -> (x + 1) & ~1 */"}, {"sha": "acaa0f691c2b908a091337478ec43fec351720b6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96688.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8762a2e8659c1db802ba001869085c1915498f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96688.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8762a2e8659c1db802ba001869085c1915498f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96688.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96688.c?ref=8f8762a2e8659c1db802ba001869085c1915498f", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/96688 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \" = -124 >> \" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" >> \" 3 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" = ~\" 1 \"optimized\" } } */\n+\n+int\n+foo (int x)\n+{\n+  return ~(123 >> x);\n+}\n+\n+unsigned\n+bar (int x)\n+{\n+  return ~(123U >> x);\n+}\n+\n+unsigned\n+baz (int x)\n+{\n+  return ~(~123U >> x);\n+}"}, {"sha": "948fa3b83517d2681fc41adc160362ce23339103", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-37.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8762a2e8659c1db802ba001869085c1915498f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8762a2e8659c1db802ba001869085c1915498f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-37.c?ref=8f8762a2e8659c1db802ba001869085c1915498f", "patch": "@@ -12,5 +12,5 @@ foo (int x)\n }\n \n /* Check if the tests have been folded into a bit test.  */\n-/* { dg-final { scan-tree-dump \"(8784908|0x0*860c0c)\" \"optimized\" { target i?86-*-* x86_64-*-* } } } */\n+/* { dg-final { scan-tree-dump \"(8784908|-8784909|0x0*860c0c)\" \"optimized\" { target i?86-*-* x86_64-*-* } } } */\n /* { dg-final { scan-tree-dump \"(<<|>>)\" \"optimized\" { target i?86-*-* x86_64-*-* } } } */"}, {"sha": "4195e75e06d4ee678003210ac7582fa78dec0692", "filename": "gcc/testsuite/gcc.target/i386/pr66821.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8762a2e8659c1db802ba001869085c1915498f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66821.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8762a2e8659c1db802ba001869085c1915498f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66821.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66821.c?ref=8f8762a2e8659c1db802ba001869085c1915498f", "patch": "@@ -11,5 +11,5 @@ foo (int x)\n }\n \n /* Check if the tests have been folded into a bit test.  */\n-/* { dg-final { scan-tree-dump \"(8784908|0x0*860c0c)\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"(8784908|-8784909|0x0*860c0c)\" \"optimized\" } } */\n /* { dg-final { scan-tree-dump \"(<<|>>)\" \"optimized\" } } */"}]}