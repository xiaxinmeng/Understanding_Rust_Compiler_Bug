{"sha": "98072ee5bdaa7aaf962b568ec25538b6316b19a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwNzJlZTViZGFhN2FhZjk2MmI1NjhlYzI1NTM4YjYzMTZiMTlhOA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-10-30T22:56:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-10-30T22:56:52Z"}, "message": "Remove lra_in_progress check for ARG_POINTER_REGNUM\n\ngcc/\n\n\tPR rtl-optimization/55093\n\t* rtlanal.c (simplify_subreg_regno): Remove lra_in_progress\n\tcheck for ARG_POINTER_REGNUM.\n\ngcc/testsuite/\n\n\tPR rtl-optimization/55093\n\t* gcc.target/i386/pr55093.c: New file.\n\nFrom-SVN: r193000", "tree": {"sha": "02a776c0ebb77bd34785246a7ae11146bbad8233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02a776c0ebb77bd34785246a7ae11146bbad8233"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98072ee5bdaa7aaf962b568ec25538b6316b19a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98072ee5bdaa7aaf962b568ec25538b6316b19a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98072ee5bdaa7aaf962b568ec25538b6316b19a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98072ee5bdaa7aaf962b568ec25538b6316b19a8/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df988ea3c17a47f32d5273ba1cfbc693d9502815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df988ea3c17a47f32d5273ba1cfbc693d9502815", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df988ea3c17a47f32d5273ba1cfbc693d9502815"}], "stats": {"total": 96, "additions": 92, "deletions": 4}, "files": [{"sha": "d4622cc06ad7e827ab688007e947e7c8c7241658", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98072ee5bdaa7aaf962b568ec25538b6316b19a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98072ee5bdaa7aaf962b568ec25538b6316b19a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98072ee5bdaa7aaf962b568ec25538b6316b19a8", "patch": "@@ -1,3 +1,9 @@\n+2012-10-30  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/55093\n+\t* rtlanal.c (simplify_subreg_regno): Remove lra_in_progress\n+\tcheck for ARG_POINTER_REGNUM.\n+\n 2012-10-30  Steve Ellcey  <sellcey@mips.com>\n \n \t* config/mips/mti-linux.h (SYSROOT_SUFFIX_SPEC): Change order"}, {"sha": "33be5487386889da2993245da8e77a12c9fa2014", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98072ee5bdaa7aaf962b568ec25538b6316b19a8/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98072ee5bdaa7aaf962b568ec25538b6316b19a8/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=98072ee5bdaa7aaf962b568ec25538b6316b19a8", "patch": "@@ -3494,10 +3494,7 @@ simplify_subreg_regno (unsigned int xregno, enum machine_mode xmode,\n     return -1;\n \n   if (FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-      /* We should convert arg register in LRA after the elimination\n-\t if it is possible.  */\n-      && xregno == ARG_POINTER_REGNUM\n-      && ! lra_in_progress)\n+      && xregno == ARG_POINTER_REGNUM)\n     return -1;\n \n   if (xregno == STACK_POINTER_REGNUM"}, {"sha": "f984aa6b584a275a3b5a2c4d651681da481402d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98072ee5bdaa7aaf962b568ec25538b6316b19a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98072ee5bdaa7aaf962b568ec25538b6316b19a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98072ee5bdaa7aaf962b568ec25538b6316b19a8", "patch": "@@ -1,3 +1,8 @@\n+2012-10-30  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/55093\n+\t* gcc.target/i386/pr55093.c: New file.\n+\n 2012-10-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/pr55116.c: Renamed to ..."}, {"sha": "76b4042302fbbc06a5d973f7321a39795d55f489", "filename": "gcc/testsuite/gcc.target/i386/pr55093.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98072ee5bdaa7aaf962b568ec25538b6316b19a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55093.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98072ee5bdaa7aaf962b568ec25538b6316b19a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55093.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55093.c?ref=98072ee5bdaa7aaf962b568ec25538b6316b19a8", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mx32 -maddress-mode=long\" } */\n+\n+typedef union tree_node *tree;\n+typedef const union tree_node *const_tree;\n+typedef struct {\n+  unsigned long long low;\n+  long long high;\n+} double_int;\n+struct real_value {\n+};\n+struct real_format {\n+  int has_signed_zero;\n+};\n+extern const struct real_format *   real_format_for_mode[];\n+extern int real_isnegzero (const struct real_value *);\n+enum tree_code { REAL_CST, SSA_NAME };\n+struct tree_base {\n+  enum tree_code code : 16;\n+  union {\n+    unsigned int version;\n+  }\n+  u;\n+};\n+extern void tree_check_failed (const_tree, const char *, int, const char *,           ...) __attribute__ ((__noreturn__));\n+union tree_node {\n+  struct tree_base base;\n+};\n+inline tree tree_check (tree __t, const char *__f, int __l, const char *__g, enum tree_code __c) {\n+  if (((enum tree_code) (__t)->base.code) != __c)\n+    tree_check_failed (__t, __f, __l, __g, __c, 0);\n+  return __t;\n+}\n+struct prop_value_d {\n+  int lattice_val;\n+  tree value;\n+  double_int mask;\n+};\n+typedef struct prop_value_d prop_value_t;\n+static prop_value_t *const_val;\n+static void canonicalize_float_value (prop_value_t *);\n+typedef void (*ssa_prop_visit_stmt_fn) (prop_value_t);\n+typedef void (*ssa_prop_visit_phi_fn) (void);\n+typedef void (*ssa_prop_fold_stmt_fn) (void *gsi);\n+typedef void (*ssa_prop_get_value_fn) ( prop_value_t *val);\n+void ssa_propagate (ssa_prop_visit_stmt_fn, ssa_prop_visit_phi_fn);\n+int substitute_and_fold (ssa_prop_get_value_fn, ssa_prop_fold_stmt_fn);\n+void ccp_fold_stmt (void *);\n+static void get_constant_value (prop_value_t *val) {\n+  canonicalize_float_value (val);\n+}\n+static void canonicalize_float_value (prop_value_t *val) {\n+  int mode;\n+  struct real_value d;\n+  if (val->lattice_val != 1\n+      || ((enum tree_code) (val->value)->base.code) != REAL_CST)\n+    return;\n+  mode = val->lattice_val;\n+  if (real_format_for_mode[mode]->has_signed_zero && real_isnegzero (&d))\n+    ccp_fold_stmt (0);\n+}\n+static void set_lattice_value (tree var, prop_value_t new_val) {\n+  prop_value_t *old_val = &const_val[(tree_check ((var), \"\",\n+\t\t\t\t\t\t  0, \"\",\n+\t\t\t\t\t\t  (SSA_NAME)))->base.u.version];\n+  canonicalize_float_value (&new_val);\n+  canonicalize_float_value (old_val);\n+}\n+static void ccp_visit_phi_node (void) {\n+  prop_value_t new_val;\n+  set_lattice_value (0, new_val);\n+}\n+static void ccp_visit_stmt (prop_value_t v) {\n+  set_lattice_value (0, v);\n+}\n+unsigned int do_ssa_ccp (void) {\n+  ssa_propagate (ccp_visit_stmt, ccp_visit_phi_node);\n+  substitute_and_fold (get_constant_value, ccp_fold_stmt);\n+  return 0;\n+}"}]}