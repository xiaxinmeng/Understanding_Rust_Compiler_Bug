{"sha": "72b9acff14f5486a970e94f412e03051fc7d85a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJiOWFjZmYxNGY1NDg2YTk3MGU5NGY0MTJlMDMwNTFmYzdkODVhNA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2009-05-12T05:43:51Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2009-05-12T05:43:51Z"}, "message": "tree.c (iterative_hash_pointer): Delete.\n\n* tree.c (iterative_hash_pointer): Delete.\n(iterative_hash_expr): Short-circuit handling of NULL pointer.\nHash UIDs and versions of SSA names.  Don't special-case built-in\nfunction declarations.\n\nFrom-SVN: r147414", "tree": {"sha": "a3077aa1b4870632abdf7c16a3483990e36de85a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3077aa1b4870632abdf7c16a3483990e36de85a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72b9acff14f5486a970e94f412e03051fc7d85a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b9acff14f5486a970e94f412e03051fc7d85a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72b9acff14f5486a970e94f412e03051fc7d85a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b9acff14f5486a970e94f412e03051fc7d85a4/comments", "author": null, "committer": null, "parents": [{"sha": "b7dd69ac5b7f03bf9a746eeac8575b21f0f1a808", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7dd69ac5b7f03bf9a746eeac8575b21f0f1a808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7dd69ac5b7f03bf9a746eeac8575b21f0f1a808"}], "stats": {"total": 38, "additions": 13, "deletions": 25}, "files": [{"sha": "64566c0d9edcb2dc4fe09f236e18d1beb2e14484", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b9acff14f5486a970e94f412e03051fc7d85a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b9acff14f5486a970e94f412e03051fc7d85a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72b9acff14f5486a970e94f412e03051fc7d85a4", "patch": "@@ -1,3 +1,10 @@\n+2009-05-12  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* tree.c (iterative_hash_pointer): Delete.\n+\t(iterative_hash_expr): Short-circuit handling of NULL pointer.\n+\tHash UIDs and versions of SSA names.  Don't special-case built-in\n+\tfunction declarations.\n+\n 2009-05-11  Ian Lance Taylor  <iant@google.com>\n \n \tPR bootstrap/40103"}, {"sha": "876f43a6334f402cba75f12e88057011ed782f51", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72b9acff14f5486a970e94f412e03051fc7d85a4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72b9acff14f5486a970e94f412e03051fc7d85a4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=72b9acff14f5486a970e94f412e03051fc7d85a4", "patch": "@@ -3626,24 +3626,6 @@ iterative_hash_hashval_t (hashval_t val, hashval_t val2)\n   return val2;\n }\n \n-/* Produce good hash value combining PTR and VAL2.  */\n-static inline hashval_t\n-iterative_hash_pointer (const void *ptr, hashval_t val2)\n-{\n-  if (sizeof (ptr) == sizeof (hashval_t))\n-    return iterative_hash_hashval_t ((size_t) ptr, val2);\n-  else\n-    {\n-      hashval_t a = (hashval_t) (size_t) ptr;\n-      /* Avoid warnings about shifting of more than the width of the type on\n-         hosts that won't execute this path.  */\n-      int zero = 0;\n-      hashval_t b = (hashval_t) ((size_t) ptr >> (sizeof (hashval_t) * 8 + zero));\n-      mix (a, b, val2);\n-      return val2;\n-    }\n-}\n-\n /* Produce good hash value combining VAL and VAL2.  */\n static inline hashval_t\n iterative_hash_host_wide_int (HOST_WIDE_INT val, hashval_t val2)\n@@ -5330,7 +5312,7 @@ iterative_hash_expr (const_tree t, hashval_t val)\n   char tclass;\n \n   if (t == NULL_TREE)\n-    return iterative_hash_pointer (t, val);\n+    return iterative_hash_hashval_t (0, val);\n \n   code = TREE_CODE (t);\n \n@@ -5364,7 +5346,7 @@ iterative_hash_expr (const_tree t, hashval_t val)\n \n     case SSA_NAME:\n       /* we can just compare by pointer.  */\n-      return iterative_hash_pointer (t, val);\n+      return iterative_hash_host_wide_int (SSA_NAME_VERSION (t), val);\n \n     case TREE_LIST:\n       /* A list of expressions, for a CALL_EXPR or as the elements of a\n@@ -5388,13 +5370,12 @@ iterative_hash_expr (const_tree t, hashval_t val)\n \t __builtin__ form.  Otherwise nodes that compare equal\n \t according to operand_equal_p might get different\n \t hash codes.  */\n-      if (DECL_BUILT_IN (t))\n+      if (DECL_BUILT_IN (t) && built_in_decls[DECL_FUNCTION_CODE (t)])\n \t{\n-\t  val = iterative_hash_pointer (built_in_decls[DECL_FUNCTION_CODE (t)], \n-\t\t\t\t      val);\n-\t  return val;\n+\t  t = built_in_decls[DECL_FUNCTION_CODE (t)];\n+\t  code = TREE_CODE (t);\n \t}\n-      /* else FALL THROUGH */\n+      /* FALL THROUGH */\n     default:\n       tclass = TREE_CODE_CLASS (code);\n "}]}