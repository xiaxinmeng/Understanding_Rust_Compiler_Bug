{"sha": "9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJkOWY3MzgyN2JmZGRiOTQ4NWJjYzlhOGEyYzgwZDRlZDVjOWNkOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-03-03T13:05:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-03-03T13:05:53Z"}, "message": "re PR tree-optimization/39272 (-D_FORTIFY_SOURCE=2 no longer warns with new glibc headers)\n\n2009-03-03  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/39272\n\t* tree.c (tree_nonartificial_location): New function.\n\t* tree.h (tree_nonartificial_location): Declare.\n\t* builtins.c (expand_builtin_memory_chk): Provide location\n\tof the call location for artificial function pieces.\n\t(maybe_emit_chk_warning): Likewise.\n\t(maybe_emit_sprintf_chk_warning): Likewise.\n\t(maybe_emit_free_warning): Likewise.\n\t* expr.c (expand_expr_real_1): Likewise.\n\nFrom-SVN: r144573", "tree": {"sha": "adb9abf659e3d9d8949be2fad8b9306ded1d415d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adb9abf659e3d9d8949be2fad8b9306ded1d415d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f07049c8f1741e8a56f8e6dc3702216a652a532d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f07049c8f1741e8a56f8e6dc3702216a652a532d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f07049c8f1741e8a56f8e6dc3702216a652a532d"}], "stats": {"total": 83, "additions": 68, "deletions": 15}, "files": [{"sha": "e71e642fd0e73cf7516e7dd4fffd9d19c611a171", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8", "patch": "@@ -1,3 +1,15 @@\n+2009-03-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/39272\n+\t* tree.c (tree_nonartificial_location): New function.\n+\t* tree.h (tree_nonartificial_location): Declare.\n+\t* builtins.c (expand_builtin_memory_chk): Provide location\n+\tof the call location for artificial function pieces.\n+\t(maybe_emit_chk_warning): Likewise.\n+\t(maybe_emit_sprintf_chk_warning): Likewise.\n+\t(maybe_emit_free_warning): Likewise.\n+\t* expr.c (expand_expr_real_1): Likewise.\n+\n 2009-03-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/39343"}, {"sha": "cc9d93e23114d3f439af3b1cf874a30b8f0a1e7b", "filename": "gcc/builtins.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8", "patch": "@@ -11965,8 +11965,9 @@ expand_builtin_memory_chk (tree exp, rtx target, enum machine_mode mode,\n \n       if (! integer_all_onesp (size) && tree_int_cst_lt (size, len))\n \t{\n-\t  warning (0, \"%Kcall to %D will always overflow destination buffer\",\n-\t\t   exp, get_callee_fndecl (exp));\n+\t  warning_at (tree_nonartificial_location (exp),\n+\t\t      0, \"%Kcall to %D will always overflow destination buffer\",\n+\t\t      exp, get_callee_fndecl (exp));\n \t  return NULL_RTX;\n \t}\n \n@@ -12073,6 +12074,7 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n {\n   int is_strlen = 0;\n   tree len, size;\n+  location_t loc = tree_nonartificial_location (exp);\n \n   switch (fcode)\n     {\n@@ -12119,8 +12121,8 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n       src = c_strlen (src, 1);\n       if (! src || ! host_integerp (src, 1))\n \t{\n-\t  warning (0, \"%Kcall to %D might overflow destination buffer\",\n-\t\t   exp, get_callee_fndecl (exp));\n+\t  warning_at (loc, 0, \"%Kcall to %D might overflow destination buffer\",\n+\t\t      exp, get_callee_fndecl (exp));\n \t  return;\n \t}\n       else if (tree_int_cst_lt (src, size))\n@@ -12129,8 +12131,8 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n   else if (! host_integerp (len, 1) || ! tree_int_cst_lt (size, len))\n     return;\n \n-  warning (0, \"%Kcall to %D will always overflow destination buffer\",\n-\t   exp, get_callee_fndecl (exp));\n+  warning_at (loc, 0, \"%Kcall to %D will always overflow destination buffer\",\n+\t      exp, get_callee_fndecl (exp));\n }\n \n /* Emit warning if a buffer overflow is detected at compile time\n@@ -12187,10 +12189,9 @@ maybe_emit_sprintf_chk_warning (tree exp, enum built_in_function fcode)\n     return;\n \n   if (! tree_int_cst_lt (len, size))\n-    {\n-      warning (0, \"%Kcall to %D will always overflow destination buffer\",\n-\t       exp, get_callee_fndecl (exp));\n-    }\n+    warning_at (tree_nonartificial_location (exp),\n+\t\t0, \"%Kcall to %D will always overflow destination buffer\",\n+\t\texp, get_callee_fndecl (exp));\n }\n \n /* Emit warning if a free is called with address of a variable.  */\n@@ -12209,9 +12210,11 @@ maybe_emit_free_warning (tree exp)\n     return;\n \n   if (SSA_VAR_P (arg))\n-    warning (0, \"%Kattempt to free a non-heap object %qD\", exp, arg);\n+    warning_at (tree_nonartificial_location (exp),\n+\t\t0, \"%Kattempt to free a non-heap object %qD\", exp, arg);\n   else\n-    warning (0, \"%Kattempt to free a non-heap object\", exp);\n+    warning_at (tree_nonartificial_location (exp),\n+\t\t0, \"%Kattempt to free a non-heap object\", exp);\n }\n \n /* Fold a call to __builtin_object_size with arguments PTR and OST,"}, {"sha": "0e8e0eeee5c9cd296732bc0f0a72c6fb24e8e4b1", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8", "patch": "@@ -8061,9 +8061,10 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \tif (fndecl\n \t    && (attr = lookup_attribute (\"warning\",\n \t\t\t\t\t DECL_ATTRIBUTES (fndecl))) != NULL)\n-\t  warning (0, \"%Kcall to %qs declared with attribute warning: %s\",\n-\t\t   exp, lang_hooks.decl_printable_name (fndecl, 1),\n-\t\t   TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n+\t  warning_at (tree_nonartificial_location (exp),\n+\t\t      0, \"%Kcall to %qs declared with attribute warning: %s\",\n+\t\t      exp, lang_hooks.decl_printable_name (fndecl, 1),\n+\t\t      TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n \n \t/* Check for a built-in function.  */\n \tif (fndecl && DECL_BUILT_IN (fndecl))"}, {"sha": "d0117a0a4fe9d544acb6e429669a921075ed3728", "filename": "gcc/tree.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8", "patch": "@@ -9071,6 +9071,42 @@ block_nonartificial_location (tree block)\n   return ret;\n }\n \n+\n+/* If EXP is inlined from an __attribute__((__artificial__))\n+   function, return the location of the original call expression.  */\n+\n+location_t\n+tree_nonartificial_location (tree exp)\n+{\n+  tree block = TREE_BLOCK (exp);\n+\n+  while (block\n+\t && TREE_CODE (block) == BLOCK\n+\t && BLOCK_ABSTRACT_ORIGIN (block))\n+    {\n+      tree ao = BLOCK_ABSTRACT_ORIGIN (block);\n+\n+      do\n+\t{\n+\t  if (TREE_CODE (ao) == FUNCTION_DECL\n+\t      && DECL_DECLARED_INLINE_P (ao)\n+\t      && lookup_attribute (\"artificial\", DECL_ATTRIBUTES (ao)))\n+\t    return BLOCK_SOURCE_LOCATION (block);\n+\t  else if (TREE_CODE (ao) == BLOCK\n+\t\t   && BLOCK_SUPERCONTEXT (ao) != ao)\n+\t    ao = BLOCK_SUPERCONTEXT (ao);\n+\t  else\n+\t    break;\n+\t}\n+      while (ao);\n+\n+      block = BLOCK_SUPERCONTEXT (block);\n+    }\n+\n+  return EXPR_LOCATION (exp);\n+}\n+\n+\n /* These are the hash table functions for the hash table of OPTIMIZATION_NODEq\n    nodes.  */\n "}, {"sha": "1f70e0461eaf21a9f9c67ac7153f80f1e7013f7e", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9bd9f73827bfddb9485bcc9a8a2c80d4ed5c9cd8", "patch": "@@ -4946,6 +4946,7 @@ extern void set_expr_locus (tree, source_location *);\n \n extern tree *tree_block (tree);\n extern location_t *block_nonartificial_location (tree);\n+extern location_t tree_nonartificial_location (tree);\n \n /* In function.c */\n extern void expand_main_function (void);"}]}