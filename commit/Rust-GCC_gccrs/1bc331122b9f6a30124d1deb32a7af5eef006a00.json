{"sha": "1bc331122b9f6a30124d1deb32a7af5eef006a00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJjMzMxMTIyYjlmNmEzMDEyNGQxZGViMzJhN2FmNWVlZjAwNmEwMA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2013-07-08T07:39:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-08T07:39:55Z"}, "message": "sem_prag.adb (Analyze_PPC_In_Decl_Part): In ASIS mode...\n\n2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_PPC_In_Decl_Part): In ASIS mode,\n\tpre-analyze only the original expression attached to the source\n\taspect, not the relocated expression of the pragma, to prevent\n\tmalformed trees in ASIS mode.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Revert previous\n\tpatch: the expression in the aspect for pre/post must be relocated\n\tto the pragma for proper analysis.\n\nFrom-SVN: r200752", "tree": {"sha": "241352b549f57fad231ce14d95c5330f965a20ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/241352b549f57fad231ce14d95c5330f965a20ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bc331122b9f6a30124d1deb32a7af5eef006a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc331122b9f6a30124d1deb32a7af5eef006a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bc331122b9f6a30124d1deb32a7af5eef006a00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc331122b9f6a30124d1deb32a7af5eef006a00/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "930b700ba28617ea074b0f4e54d3b00b8d9be0a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/930b700ba28617ea074b0f4e54d3b00b8d9be0a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/930b700ba28617ea074b0f4e54d3b00b8d9be0a2"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "a6a808faa56e33551dded4eb0325b4c6ed40df3d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc331122b9f6a30124d1deb32a7af5eef006a00/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc331122b9f6a30124d1deb32a7af5eef006a00/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1bc331122b9f6a30124d1deb32a7af5eef006a00", "patch": "@@ -1,3 +1,13 @@\n+2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_PPC_In_Decl_Part): In ASIS mode,\n+\tpre-analyze only the original expression attached to the source\n+\taspect, not the relocated expression of the pragma, to prevent\n+\tmalformed trees in ASIS mode.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Revert previous\n+\tpatch: the expression in the aspect for pre/post must be relocated\n+\tto the pragma for proper analysis.\n+\n 2013-07-05  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* aspects.adb: Add an entry for SPARK_Mode in table Canonical_Aspect."}, {"sha": "2cb3d29dc664da371f0cb2bc88751481d0fcc6d2", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc331122b9f6a30124d1deb32a7af5eef006a00/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc331122b9f6a30124d1deb32a7af5eef006a00/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=1bc331122b9f6a30124d1deb32a7af5eef006a00", "patch": "@@ -1809,16 +1809,13 @@ package body Sem_Ch13 is\n                      end loop;\n                   end if;\n \n-                  --  Build the precondition/postcondition pragma. We copy\n-                  --  the expression to avoid sharing between the original\n-                  --  aspect and the pragma node, because in ASIS_Mode both\n-                  --  will be independently analyzed.\n+                  --  Build the precondition/postcondition pragma.\n \n                   Make_Aitem_Pragma\n                     (Pragma_Argument_Associations => New_List (\n                        Make_Pragma_Argument_Association (Eloc,\n                          Chars      => Name_Check,\n-                         Expression => New_Copy_Tree (Expr))),\n+                         Expression => Relocate_Node (Expr))),\n                        Pragma_Name                => Pname);\n \n                   --  Add message unless exception messages are suppressed"}, {"sha": "16bccace7ee112d1458ec0f9e0ba38e21ee28bae", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc331122b9f6a30124d1deb32a7af5eef006a00/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc331122b9f6a30124d1deb32a7af5eef006a00/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1bc331122b9f6a30124d1deb32a7af5eef006a00", "patch": "@@ -1718,14 +1718,16 @@ package body Sem_Prag is\n       --  Preanalyze the boolean expression, we treat this as a spec expression\n       --  (i.e. similar to a default expression).\n \n-      Preanalyze_Assert_Expression (Get_Pragma_Arg (Arg1), Standard_Boolean);\n-\n-      --  In ASIS mode, for a pragma generated from a source aspect, also\n-      --  analyze the original aspect expression.\n+      --  In ASIS mode, for a pragma generated from a source aspect, analyze\n+      --  directly the the original aspect expression, which is shared with\n+      --  the generated pragma.\n \n       if ASIS_Mode and then Present (Corresponding_Aspect (N)) then\n          Preanalyze_Assert_Expression\n            (Expression (Corresponding_Aspect (N)), Standard_Boolean);\n+      else\n+         Preanalyze_Assert_Expression\n+            (Get_Pragma_Arg (Arg1), Standard_Boolean);\n       end if;\n \n       --  For a class-wide condition, a reference to a controlling formal must"}]}