{"sha": "fbe5eb6d0a582e04aadb53f6a024d5af17f0baad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlNWViNmQwYTU4MmUwNGFhZGI1M2Y2YTAyNGQ1YWYxN2YwYmFhZA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2002-04-29T18:40:47Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2002-04-29T18:40:47Z"}, "message": "Initial P4 SSE2 builtin support\n\nFrom-SVN: r52903", "tree": {"sha": "759b779f4947aedb3dd89eca73455ca01bbf39b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/759b779f4947aedb3dd89eca73455ca01bbf39b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/comments", "author": null, "committer": null, "parents": [{"sha": "3a73bffb63125f29e0e6bb7925f5a8a510560aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a73bffb63125f29e0e6bb7925f5a8a510560aef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a73bffb63125f29e0e6bb7925f5a8a510560aef"}], "stats": {"total": 2381, "additions": 2251, "deletions": 130}, "files": [{"sha": "1704faea73fa470f30a24601150d9a492b0f4f0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbe5eb6d0a582e04aadb53f6a024d5af17f0baad", "patch": "@@ -1,3 +1,49 @@\n+2002-04-29  Bernd Schmidt  <bernds@redhat.com>\n+\n+\t* c-common.c (type_for_mode): Add support for V2DFmode, V2DImode,\n+\tUV2DImode.\n+\t* tree.c (build_common_tree_nodes_2): Likewise.\n+\t* tree.h (enum tree_index): Likewise.\n+\t(V2DF_type_node, V2DI_type_node, unsigned_V2DI_type_node): Define.\n+\n+\t* config/i386/i386.c (bdesc_comi, bdesc_2arg, bdesc_1arg): Add SSE2\n+\tentries.\n+\t(init_mmx_sse_builtins): Initialize SSE2 builtins.\n+\t(ix86_expand_builtin): Add support for SSE2 builtins.\n+\t* config/i386/i386.h (VALID_SSE2_REG_MODE): New macro.\n+\t(VALID_SSE_REG_MODE): Use it.\n+\t(VECTOR_MODE_SUPPORTED_P): Allow SSE2 modes here as well.\n+\t(enum ix86_builtins): Add SSE2 builtins.\n+\t* config/i386/i386.md (movv2df_internal, movv2df, movv8hi_internal,\n+\tmovv8hi, movv16qi_internal, movv16qi, pushv2df, pushv8hi, pushv16qi,\n+\taddv2df3, vmaddv2df3, subv2df3, vmsubv2df3, mulv2df3, vmmulv2df3,\n+\tdivv2df3, vmdivv2df3, smaxv2df3, vmsmaxv2df3, sminv2df3, vmsminv2df3,\n+\tsse2_anddf3, sse2_nanddf3, sse2_iordf3, sse2_xordf3, sqrtv2df2,\n+\tvmsqrtv2df2, maskcmpv2df3, maskncmpv2df3, vmmaskcmpv2df3,\n+\tvmmaskncmpv2df3, sse2_comi, sse2_ucomi, sse2_movmskpd, sse2_pmovmskb,\n+\tsse2_maskmovdqu, sse2_movntv2df, sse2_movntti, sse2_movntsi, cvtdq2ps,\n+\tcvtps2dq, cvttps2dq, cvtdq2pd, cvtpd2dq, cvttpd2dq, cvtpd2pi,\n+\tcvttpd2pi, cvtpi2pd, cvtsd2si, cvttsd2si, cvtsi2sd, cvtsd2ss,\n+\tcvtss2sd, cvtpd2ps, cvtps2pd, addv16qi3, addv8hi3, addv4si3, addv2di3,\n+\tssaddv16qi3, ssaddv8hi3, usaddv16qi3, usaddv8hi3, subv16qi3, subv8hi3,\n+\tsubv4si3, subv2di3, sssubv16qi3, sssubv8hi3, ussubv16qi3, ussubv8hi3,\n+\tmulv8hi3, smulv8hi3_highpart, umulv8hi3_highpart, sse2_umulsidi3,\n+\tsse2_umulv2siv2di3, sse2_pmaddwd, sse2_clrti, sse2_uavgv16qi3,\n+\tsse2_uavgv8hi3, sse2_psadbw, sse2_pinsrw, sse2_pextrw, sse2_pshufd,\n+\tsse2_pshuflw, sse2_pshufhw, eqv16qi3, eqv8hi3, eqv4si3, gtv16qi3,\n+\tgtv8hi3, gtv4si3, umaxv16qi3, smaxv8hi3, uminv16qi3, sminv8hi3,\n+\tashrv8hi3, ashrv4si3, lshrv8hi3, lshrv4si3, sse2_lshrv2di3,\n+\tashlv8hi3, ashlv4si3, sse2_ashlv2di3, sse2_ashlti3, sse2_lshrti3,\n+\tsse2_unpckhpd, sse2_unpcklpd, sse2_packsswb, sse2_packssdw,\n+\tsse2_packuswb, sse2_punpckhbw, sse2_punpckhwd, sse2_punpckhdq,\n+\tsse2_punpcklbw, sse2_punpcklwd, sse2_punpckldq, sse2_movapd,\n+\tsse2_movupd, sse2_movdqa, sse2_movdqu, sse2_movdq2q, sse2_movq2dq,\n+\tsse2_movhpd, sse2_movlpd, sse2_loadsd, sse2_movsd, sse2_storesd,\n+\tsse2_shufpd, sse2_clflush, sse2_mfence, mfence_insn, sse2_lfence,\n+\tlfence_insn): New patterns.\n+\t(sse2_andti3, sse2_nandti3, sse2_iorti3, sse2_xorti3): Renamed from\n+\tsse_andti3_sse2, sse_nandti3_sse2, sse_iorti3_sse2, sse_xorti3_sse2.\n+\n Mon Apr 29 17:03:24 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (sse_mov?fcc*): Revert patch of Mar 14th."}, {"sha": "f009cd63a1fc1f011956ce1833ef276c721a0cbb", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=fbe5eb6d0a582e04aadb53f6a024d5af17f0baad", "patch": "@@ -1559,6 +1559,8 @@ c_common_type_for_mode (mode, unsignedp)\n \t  return unsignedp ? unsigned_V8HI_type_node : V8HI_type_node;\n \tcase V4SImode:\n \t  return unsignedp ? unsigned_V4SI_type_node : V4SI_type_node;\n+\tcase V2DImode:\n+\t  return unsignedp ? unsigned_V2DI_type_node : V2DI_type_node;\n \tcase V2SImode:\n \t  return unsignedp ? unsigned_V2SI_type_node : V2SI_type_node;\n \tcase V4HImode:\n@@ -1571,6 +1573,8 @@ c_common_type_for_mode (mode, unsignedp)\n \t  return V4SF_type_node;\n \tcase V2SFmode:\n \t  return V2SF_type_node;\n+\tcase V2DFmode:\n+\t  return V2DF_type_node;\n \tdefault:\n \t  break;\n \t}"}, {"sha": "1f3d85f51b1dc4113edb6a181c2543bbb237d02c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 639, "deletions": 125, "changes": 764, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fbe5eb6d0a582e04aadb53f6a024d5af17f0baad", "patch": "@@ -10937,69 +10937,84 @@ struct builtin_description\n   const unsigned int flag;\n };\n \n+/* Used for builtins that are enabled both by -msse and -msse2.  */\n+#define MASK_SSE1 (MASK_SSE | MASK_SSE2)\n+\n static const struct builtin_description bdesc_comi[] =\n {\n-  { MASK_SSE, CODE_FOR_sse_comi, \"__builtin_ia32_comieq\", IX86_BUILTIN_COMIEQSS, EQ, 0 },\n-  { MASK_SSE, CODE_FOR_sse_comi, \"__builtin_ia32_comilt\", IX86_BUILTIN_COMILTSS, LT, 0 },\n-  { MASK_SSE, CODE_FOR_sse_comi, \"__builtin_ia32_comile\", IX86_BUILTIN_COMILESS, LE, 0 },\n-  { MASK_SSE, CODE_FOR_sse_comi, \"__builtin_ia32_comigt\", IX86_BUILTIN_COMIGTSS, LT, 1 },\n-  { MASK_SSE, CODE_FOR_sse_comi, \"__builtin_ia32_comige\", IX86_BUILTIN_COMIGESS, LE, 1 },\n-  { MASK_SSE, CODE_FOR_sse_comi, \"__builtin_ia32_comineq\", IX86_BUILTIN_COMINEQSS, NE, 0 },\n-  { MASK_SSE, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomieq\", IX86_BUILTIN_UCOMIEQSS, EQ, 0 },\n-  { MASK_SSE, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomilt\", IX86_BUILTIN_UCOMILTSS, LT, 0 },\n-  { MASK_SSE, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomile\", IX86_BUILTIN_UCOMILESS, LE, 0 },\n-  { MASK_SSE, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomigt\", IX86_BUILTIN_UCOMIGTSS, LT, 1 },\n-  { MASK_SSE, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomige\", IX86_BUILTIN_UCOMIGESS, LE, 1 },\n-  { MASK_SSE, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomineq\", IX86_BUILTIN_UCOMINEQSS, NE, 0 }\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comieq\", IX86_BUILTIN_COMIEQSS, EQ, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comilt\", IX86_BUILTIN_COMILTSS, LT, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comile\", IX86_BUILTIN_COMILESS, LE, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comigt\", IX86_BUILTIN_COMIGTSS, LT, 1 },\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comige\", IX86_BUILTIN_COMIGESS, LE, 1 },\n+  { MASK_SSE1, CODE_FOR_sse_comi, \"__builtin_ia32_comineq\", IX86_BUILTIN_COMINEQSS, NE, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomieq\", IX86_BUILTIN_UCOMIEQSS, EQ, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomilt\", IX86_BUILTIN_UCOMILTSS, LT, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomile\", IX86_BUILTIN_UCOMILESS, LE, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomigt\", IX86_BUILTIN_UCOMIGTSS, LT, 1 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomige\", IX86_BUILTIN_UCOMIGESS, LE, 1 },\n+  { MASK_SSE1, CODE_FOR_sse_ucomi, \"__builtin_ia32_ucomineq\", IX86_BUILTIN_UCOMINEQSS, NE, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdeq\", IX86_BUILTIN_COMIEQSD, EQ, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdlt\", IX86_BUILTIN_COMILTSD, LT, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdle\", IX86_BUILTIN_COMILESD, LE, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdgt\", IX86_BUILTIN_COMIGTSD, LT, 1 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdge\", IX86_BUILTIN_COMIGESD, LE, 1 },\n+  { MASK_SSE2, CODE_FOR_sse2_comi, \"__builtin_ia32_comisdneq\", IX86_BUILTIN_COMINEQSD, NE, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdeq\", IX86_BUILTIN_UCOMIEQSD, EQ, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdlt\", IX86_BUILTIN_UCOMILTSD, LT, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdle\", IX86_BUILTIN_UCOMILESD, LE, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdgt\", IX86_BUILTIN_UCOMIGTSD, LT, 1 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdge\", IX86_BUILTIN_UCOMIGESD, LE, 1 },\n+  { MASK_SSE2, CODE_FOR_sse2_ucomi, \"__builtin_ia32_ucomisdneq\", IX86_BUILTIN_UCOMINEQSD, NE, 0 },\n };\n \n static const struct builtin_description bdesc_2arg[] =\n {\n   /* SSE */\n-  { MASK_SSE, CODE_FOR_addv4sf3, \"__builtin_ia32_addps\", IX86_BUILTIN_ADDPS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_subv4sf3, \"__builtin_ia32_subps\", IX86_BUILTIN_SUBPS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_mulv4sf3, \"__builtin_ia32_mulps\", IX86_BUILTIN_MULPS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_divv4sf3, \"__builtin_ia32_divps\", IX86_BUILTIN_DIVPS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_vmaddv4sf3,  \"__builtin_ia32_addss\", IX86_BUILTIN_ADDSS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_vmsubv4sf3,  \"__builtin_ia32_subss\", IX86_BUILTIN_SUBSS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_vmmulv4sf3,  \"__builtin_ia32_mulss\", IX86_BUILTIN_MULSS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_vmdivv4sf3,  \"__builtin_ia32_divss\", IX86_BUILTIN_DIVSS, 0, 0 },\n-\n-  { MASK_SSE, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpeqps\", IX86_BUILTIN_CMPEQPS, EQ, 0 },\n-  { MASK_SSE, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpltps\", IX86_BUILTIN_CMPLTPS, LT, 0 },\n-  { MASK_SSE, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpleps\", IX86_BUILTIN_CMPLEPS, LE, 0 },\n-  { MASK_SSE, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpgtps\", IX86_BUILTIN_CMPGTPS, LT, 1 },\n-  { MASK_SSE, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpgeps\", IX86_BUILTIN_CMPGEPS, LE, 1 },\n-  { MASK_SSE, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpunordps\", IX86_BUILTIN_CMPUNORDPS, UNORDERED, 0 },\n-  { MASK_SSE, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpneqps\", IX86_BUILTIN_CMPNEQPS, EQ, 0 },\n-  { MASK_SSE, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpnltps\", IX86_BUILTIN_CMPNLTPS, LT, 0 },\n-  { MASK_SSE, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpnleps\", IX86_BUILTIN_CMPNLEPS, LE, 0 },\n-  { MASK_SSE, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpngtps\", IX86_BUILTIN_CMPNGTPS, LT, 1 },\n-  { MASK_SSE, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpngeps\", IX86_BUILTIN_CMPNGEPS, LE, 1 },\n-  { MASK_SSE, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpordps\", IX86_BUILTIN_CMPORDPS, UNORDERED, 0 },\n-  { MASK_SSE, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpeqss\", IX86_BUILTIN_CMPEQSS, EQ, 0 },\n-  { MASK_SSE, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpltss\", IX86_BUILTIN_CMPLTSS, LT, 0 },\n-  { MASK_SSE, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpless\", IX86_BUILTIN_CMPLESS, LE, 0 },\n-  { MASK_SSE, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpgtss\", IX86_BUILTIN_CMPGTSS, LT, 1 },\n-  { MASK_SSE, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpgess\", IX86_BUILTIN_CMPGESS, LE, 1 },\n-  { MASK_SSE, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpunordss\", IX86_BUILTIN_CMPUNORDSS, UNORDERED, 0 },\n-  { MASK_SSE, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpneqss\", IX86_BUILTIN_CMPNEQSS, EQ, 0 },\n-  { MASK_SSE, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpnltss\", IX86_BUILTIN_CMPNLTSS, LT, 0 },\n-  { MASK_SSE, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpnless\", IX86_BUILTIN_CMPNLESS, LE, 0 },\n-  { MASK_SSE, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpngtss\", IX86_BUILTIN_CMPNGTSS, LT, 1 },\n-  { MASK_SSE, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpngess\", IX86_BUILTIN_CMPNGESS, LE, 1 },\n-  { MASK_SSE, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpordss\", IX86_BUILTIN_CMPORDSS, UNORDERED, 0 },\n-\n-  { MASK_SSE, CODE_FOR_sminv4sf3, \"__builtin_ia32_minps\", IX86_BUILTIN_MINPS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_smaxv4sf3, \"__builtin_ia32_maxps\", IX86_BUILTIN_MAXPS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_vmsminv4sf3, \"__builtin_ia32_minss\", IX86_BUILTIN_MINSS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_vmsmaxv4sf3, \"__builtin_ia32_maxss\", IX86_BUILTIN_MAXSS, 0, 0 },\n-\n-  { MASK_SSE, CODE_FOR_sse_movss,  \"__builtin_ia32_movss\", IX86_BUILTIN_MOVSS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_sse_movhlps,  \"__builtin_ia32_movhlps\", IX86_BUILTIN_MOVHLPS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_sse_movlhps,  \"__builtin_ia32_movlhps\", IX86_BUILTIN_MOVLHPS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_sse_unpckhps, \"__builtin_ia32_unpckhps\", IX86_BUILTIN_UNPCKHPS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_sse_unpcklps, \"__builtin_ia32_unpcklps\", IX86_BUILTIN_UNPCKLPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_addv4sf3, \"__builtin_ia32_addps\", IX86_BUILTIN_ADDPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_subv4sf3, \"__builtin_ia32_subps\", IX86_BUILTIN_SUBPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_mulv4sf3, \"__builtin_ia32_mulps\", IX86_BUILTIN_MULPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_divv4sf3, \"__builtin_ia32_divps\", IX86_BUILTIN_DIVPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_vmaddv4sf3,  \"__builtin_ia32_addss\", IX86_BUILTIN_ADDSS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_vmsubv4sf3,  \"__builtin_ia32_subss\", IX86_BUILTIN_SUBSS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_vmmulv4sf3,  \"__builtin_ia32_mulss\", IX86_BUILTIN_MULSS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_vmdivv4sf3,  \"__builtin_ia32_divss\", IX86_BUILTIN_DIVSS, 0, 0 },\n+\n+  { MASK_SSE1, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpeqps\", IX86_BUILTIN_CMPEQPS, EQ, 0 },\n+  { MASK_SSE1, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpltps\", IX86_BUILTIN_CMPLTPS, LT, 0 },\n+  { MASK_SSE1, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpleps\", IX86_BUILTIN_CMPLEPS, LE, 0 },\n+  { MASK_SSE1, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpgtps\", IX86_BUILTIN_CMPGTPS, LT, 1 },\n+  { MASK_SSE1, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpgeps\", IX86_BUILTIN_CMPGEPS, LE, 1 },\n+  { MASK_SSE1, CODE_FOR_maskcmpv4sf3, \"__builtin_ia32_cmpunordps\", IX86_BUILTIN_CMPUNORDPS, UNORDERED, 0 },\n+  { MASK_SSE1, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpneqps\", IX86_BUILTIN_CMPNEQPS, EQ, 0 },\n+  { MASK_SSE1, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpnltps\", IX86_BUILTIN_CMPNLTPS, LT, 0 },\n+  { MASK_SSE1, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpnleps\", IX86_BUILTIN_CMPNLEPS, LE, 0 },\n+  { MASK_SSE1, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpngtps\", IX86_BUILTIN_CMPNGTPS, LT, 1 },\n+  { MASK_SSE1, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpngeps\", IX86_BUILTIN_CMPNGEPS, LE, 1 },\n+  { MASK_SSE1, CODE_FOR_maskncmpv4sf3, \"__builtin_ia32_cmpordps\", IX86_BUILTIN_CMPORDPS, UNORDERED, 0 },\n+  { MASK_SSE1, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpeqss\", IX86_BUILTIN_CMPEQSS, EQ, 0 },\n+  { MASK_SSE1, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpltss\", IX86_BUILTIN_CMPLTSS, LT, 0 },\n+  { MASK_SSE1, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpless\", IX86_BUILTIN_CMPLESS, LE, 0 },\n+  { MASK_SSE1, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpgtss\", IX86_BUILTIN_CMPGTSS, LT, 1 },\n+  { MASK_SSE1, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpgess\", IX86_BUILTIN_CMPGESS, LE, 1 },\n+  { MASK_SSE1, CODE_FOR_vmmaskcmpv4sf3, \"__builtin_ia32_cmpunordss\", IX86_BUILTIN_CMPUNORDSS, UNORDERED, 0 },\n+  { MASK_SSE1, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpneqss\", IX86_BUILTIN_CMPNEQSS, EQ, 0 },\n+  { MASK_SSE1, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpnltss\", IX86_BUILTIN_CMPNLTSS, LT, 0 },\n+  { MASK_SSE1, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpnless\", IX86_BUILTIN_CMPNLESS, LE, 0 },\n+  { MASK_SSE1, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpngtss\", IX86_BUILTIN_CMPNGTSS, LT, 1 },\n+  { MASK_SSE1, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpngess\", IX86_BUILTIN_CMPNGESS, LE, 1 },\n+  { MASK_SSE1, CODE_FOR_vmmaskncmpv4sf3, \"__builtin_ia32_cmpordss\", IX86_BUILTIN_CMPORDSS, UNORDERED, 0 },\n+\n+  { MASK_SSE1, CODE_FOR_sminv4sf3, \"__builtin_ia32_minps\", IX86_BUILTIN_MINPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_smaxv4sf3, \"__builtin_ia32_maxps\", IX86_BUILTIN_MAXPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_vmsminv4sf3, \"__builtin_ia32_minss\", IX86_BUILTIN_MINSS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_vmsmaxv4sf3, \"__builtin_ia32_maxss\", IX86_BUILTIN_MAXSS, 0, 0 },\n+\n+  { MASK_SSE1, CODE_FOR_sse_movss,  \"__builtin_ia32_movss\", IX86_BUILTIN_MOVSS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_movhlps,  \"__builtin_ia32_movhlps\", IX86_BUILTIN_MOVHLPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_movlhps,  \"__builtin_ia32_movlhps\", IX86_BUILTIN_MOVLHPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_unpckhps, \"__builtin_ia32_unpckhps\", IX86_BUILTIN_UNPCKHPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_unpcklps, \"__builtin_ia32_unpcklps\", IX86_BUILTIN_UNPCKLPS, 0, 0 },\n \n   /* MMX */\n   { MASK_MMX, CODE_FOR_addv8qi3, \"__builtin_ia32_paddb\", IX86_BUILTIN_PADDB, 0, 0 },\n@@ -11020,15 +11035,15 @@ static const struct builtin_description bdesc_2arg[] =\n \n   { MASK_MMX, CODE_FOR_mulv4hi3, \"__builtin_ia32_pmullw\", IX86_BUILTIN_PMULLW, 0, 0 },\n   { MASK_MMX, CODE_FOR_smulv4hi3_highpart, \"__builtin_ia32_pmulhw\", IX86_BUILTIN_PMULHW, 0, 0 },\n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_umulv4hi3_highpart, \"__builtin_ia32_pmulhuw\", IX86_BUILTIN_PMULHUW, 0, 0 },\n+  { MASK_SSE1 | MASK_3DNOW_A, CODE_FOR_umulv4hi3_highpart, \"__builtin_ia32_pmulhuw\", IX86_BUILTIN_PMULHUW, 0, 0 },\n \n   { MASK_MMX, CODE_FOR_mmx_anddi3, \"__builtin_ia32_pand\", IX86_BUILTIN_PAND, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_nanddi3, \"__builtin_ia32_pandn\", IX86_BUILTIN_PANDN, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_iordi3, \"__builtin_ia32_por\", IX86_BUILTIN_POR, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_xordi3, \"__builtin_ia32_pxor\", IX86_BUILTIN_PXOR, 0, 0 },\n \n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_uavgv8qi3, \"__builtin_ia32_pavgb\", IX86_BUILTIN_PAVGB, 0, 0 },\n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_uavgv4hi3, \"__builtin_ia32_pavgw\", IX86_BUILTIN_PAVGW, 0, 0 },\n+  { MASK_SSE1 | MASK_3DNOW_A, CODE_FOR_mmx_uavgv8qi3, \"__builtin_ia32_pavgb\", IX86_BUILTIN_PAVGB, 0, 0 },\n+  { MASK_SSE1 | MASK_3DNOW_A, CODE_FOR_mmx_uavgv4hi3, \"__builtin_ia32_pavgw\", IX86_BUILTIN_PAVGW, 0, 0 },\n \n   { MASK_MMX, CODE_FOR_eqv8qi3, \"__builtin_ia32_pcmpeqb\", IX86_BUILTIN_PCMPEQB, 0, 0 },\n   { MASK_MMX, CODE_FOR_eqv4hi3, \"__builtin_ia32_pcmpeqw\", IX86_BUILTIN_PCMPEQW, 0, 0 },\n@@ -11037,10 +11052,10 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_MMX, CODE_FOR_gtv4hi3, \"__builtin_ia32_pcmpgtw\", IX86_BUILTIN_PCMPGTW, 0, 0 },\n   { MASK_MMX, CODE_FOR_gtv2si3, \"__builtin_ia32_pcmpgtd\", IX86_BUILTIN_PCMPGTD, 0, 0 },\n \n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_umaxv8qi3, \"__builtin_ia32_pmaxub\", IX86_BUILTIN_PMAXUB, 0, 0 },\n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_smaxv4hi3, \"__builtin_ia32_pmaxsw\", IX86_BUILTIN_PMAXSW, 0, 0 },\n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_uminv8qi3, \"__builtin_ia32_pminub\", IX86_BUILTIN_PMINUB, 0, 0 },\n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_sminv4hi3, \"__builtin_ia32_pminsw\", IX86_BUILTIN_PMINSW, 0, 0 },\n+  { MASK_SSE1 | MASK_3DNOW_A, CODE_FOR_umaxv8qi3, \"__builtin_ia32_pmaxub\", IX86_BUILTIN_PMAXUB, 0, 0 },\n+  { MASK_SSE1 | MASK_3DNOW_A, CODE_FOR_smaxv4hi3, \"__builtin_ia32_pmaxsw\", IX86_BUILTIN_PMAXSW, 0, 0 },\n+  { MASK_SSE1 | MASK_3DNOW_A, CODE_FOR_uminv8qi3, \"__builtin_ia32_pminub\", IX86_BUILTIN_PMINUB, 0, 0 },\n+  { MASK_SSE1 | MASK_3DNOW_A, CODE_FOR_sminv4hi3, \"__builtin_ia32_pminsw\", IX86_BUILTIN_PMINSW, 0, 0 },\n \n   { MASK_MMX, CODE_FOR_mmx_punpckhbw, \"__builtin_ia32_punpckhbw\", IX86_BUILTIN_PUNPCKHBW, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_punpckhwd, \"__builtin_ia32_punpckhwd\", IX86_BUILTIN_PUNPCKHWD, 0, 0 },\n@@ -11054,8 +11069,8 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_MMX, CODE_FOR_mmx_packssdw, 0, IX86_BUILTIN_PACKSSDW, 0, 0 },\n   { MASK_MMX, CODE_FOR_mmx_packuswb, 0, IX86_BUILTIN_PACKUSWB, 0, 0 },\n \n-  { MASK_SSE, CODE_FOR_cvtpi2ps, 0, IX86_BUILTIN_CVTPI2PS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_cvtsi2ss, 0, IX86_BUILTIN_CVTSI2SS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_cvtpi2ps, 0, IX86_BUILTIN_CVTPI2PS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_cvtsi2ss, 0, IX86_BUILTIN_CVTSI2SS, 0, 0 },\n \n   { MASK_MMX, CODE_FOR_ashlv4hi3, 0, IX86_BUILTIN_PSLLW, 0, 0 },\n   { MASK_MMX, CODE_FOR_ashlv4hi3, 0, IX86_BUILTIN_PSLLWI, 0, 0 },\n@@ -11076,25 +11091,151 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_MMX, CODE_FOR_ashrv2si3, 0, IX86_BUILTIN_PSRAD, 0, 0 },\n   { MASK_MMX, CODE_FOR_ashrv2si3, 0, IX86_BUILTIN_PSRADI, 0, 0 },\n \n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_psadbw, 0, IX86_BUILTIN_PSADBW, 0, 0 },\n-  { MASK_MMX, CODE_FOR_mmx_pmaddwd, 0, IX86_BUILTIN_PMADDWD, 0, 0 }\n-\n+  { MASK_SSE1 | MASK_3DNOW_A, CODE_FOR_mmx_psadbw, 0, IX86_BUILTIN_PSADBW, 0, 0 },\n+  { MASK_MMX, CODE_FOR_mmx_pmaddwd, 0, IX86_BUILTIN_PMADDWD, 0, 0 },\n+\n+  /* SSE2 */\n+  { MASK_SSE2, CODE_FOR_addv2df3, \"__builtin_ia32_addpd\", IX86_BUILTIN_ADDPD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_subv2df3, \"__builtin_ia32_subpd\", IX86_BUILTIN_SUBPD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_mulv2df3, \"__builtin_ia32_mulpd\", IX86_BUILTIN_MULPD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_divv2df3, \"__builtin_ia32_divpd\", IX86_BUILTIN_DIVPD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_vmaddv2df3,  \"__builtin_ia32_addsd\", IX86_BUILTIN_ADDSD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_vmsubv2df3,  \"__builtin_ia32_subsd\", IX86_BUILTIN_SUBSD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_vmmulv2df3,  \"__builtin_ia32_mulsd\", IX86_BUILTIN_MULSD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_vmdivv2df3,  \"__builtin_ia32_divsd\", IX86_BUILTIN_DIVSD, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_maskcmpv2df3, \"__builtin_ia32_cmpeqpd\", IX86_BUILTIN_CMPEQPD, EQ, 0 },\n+  { MASK_SSE2, CODE_FOR_maskcmpv2df3, \"__builtin_ia32_cmpltpd\", IX86_BUILTIN_CMPLTPD, LT, 0 },\n+  { MASK_SSE2, CODE_FOR_maskcmpv2df3, \"__builtin_ia32_cmplepd\", IX86_BUILTIN_CMPLEPD, LE, 0 },\n+  { MASK_SSE2, CODE_FOR_maskcmpv2df3, \"__builtin_ia32_cmpgtpd\", IX86_BUILTIN_CMPGTPD, LT, 1 },\n+  { MASK_SSE2, CODE_FOR_maskcmpv2df3, \"__builtin_ia32_cmpgepd\", IX86_BUILTIN_CMPGEPD, LE, 1 },\n+  { MASK_SSE2, CODE_FOR_maskcmpv2df3, \"__builtin_ia32_cmpunordpd\", IX86_BUILTIN_CMPUNORDPD, UNORDERED, 0 },\n+  { MASK_SSE2, CODE_FOR_maskncmpv2df3, \"__builtin_ia32_cmpneqpd\", IX86_BUILTIN_CMPNEQPD, EQ, 0 },\n+  { MASK_SSE2, CODE_FOR_maskncmpv2df3, \"__builtin_ia32_cmpnltpd\", IX86_BUILTIN_CMPNLTPD, LT, 0 },\n+  { MASK_SSE2, CODE_FOR_maskncmpv2df3, \"__builtin_ia32_cmpnlepd\", IX86_BUILTIN_CMPNLEPD, LE, 0 },\n+  { MASK_SSE2, CODE_FOR_maskncmpv2df3, \"__builtin_ia32_cmpngtpd\", IX86_BUILTIN_CMPNGTPD, LT, 1 },\n+  { MASK_SSE2, CODE_FOR_maskncmpv2df3, \"__builtin_ia32_cmpngepd\", IX86_BUILTIN_CMPNGEPD, LE, 1 },\n+  { MASK_SSE2, CODE_FOR_maskncmpv2df3, \"__builtin_ia32_cmpordpd\", IX86_BUILTIN_CMPORDPD, UNORDERED, 0 },\n+  { MASK_SSE2, CODE_FOR_vmmaskcmpv2df3, \"__builtin_ia32_cmpeqsd\", IX86_BUILTIN_CMPEQSD, EQ, 0 },\n+  { MASK_SSE2, CODE_FOR_vmmaskcmpv2df3, \"__builtin_ia32_cmpltsd\", IX86_BUILTIN_CMPLTSD, LT, 0 },\n+  { MASK_SSE2, CODE_FOR_vmmaskcmpv2df3, \"__builtin_ia32_cmplesd\", IX86_BUILTIN_CMPLESD, LE, 0 },\n+  { MASK_SSE2, CODE_FOR_vmmaskcmpv2df3, \"__builtin_ia32_cmpgtsd\", IX86_BUILTIN_CMPGTSD, LT, 1 },\n+  { MASK_SSE2, CODE_FOR_vmmaskcmpv2df3, \"__builtin_ia32_cmpgesd\", IX86_BUILTIN_CMPGESD, LE, 1 },\n+  { MASK_SSE2, CODE_FOR_vmmaskcmpv2df3, \"__builtin_ia32_cmpunordsd\", IX86_BUILTIN_CMPUNORDSD, UNORDERED, 0 },\n+  { MASK_SSE2, CODE_FOR_vmmaskncmpv2df3, \"__builtin_ia32_cmpneqsd\", IX86_BUILTIN_CMPNEQSD, EQ, 0 },\n+  { MASK_SSE2, CODE_FOR_vmmaskncmpv2df3, \"__builtin_ia32_cmpnltsd\", IX86_BUILTIN_CMPNLTSD, LT, 0 },\n+  { MASK_SSE2, CODE_FOR_vmmaskncmpv2df3, \"__builtin_ia32_cmpnlesd\", IX86_BUILTIN_CMPNLESD, LE, 0 },\n+  { MASK_SSE2, CODE_FOR_vmmaskncmpv2df3, \"__builtin_ia32_cmpngtsd\", IX86_BUILTIN_CMPNGTSD, LT, 1 },\n+  { MASK_SSE2, CODE_FOR_vmmaskncmpv2df3, \"__builtin_ia32_cmpngesd\", IX86_BUILTIN_CMPNGESD, LE, 1 },\n+  { MASK_SSE2, CODE_FOR_vmmaskncmpv2df3, \"__builtin_ia32_cmpordsd\", IX86_BUILTIN_CMPORDSD, UNORDERED, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_sminv2df3, \"__builtin_ia32_minpd\", IX86_BUILTIN_MINPD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_smaxv2df3, \"__builtin_ia32_maxpd\", IX86_BUILTIN_MAXPD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_vmsminv2df3, \"__builtin_ia32_minsd\", IX86_BUILTIN_MINSD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_vmsmaxv2df3, \"__builtin_ia32_maxsd\", IX86_BUILTIN_MAXSD, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_sse2_anddf3, \"__builtin_ia32_andpd\", IX86_BUILTIN_ANDPD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_nanddf3,  \"__builtin_ia32_andnpd\", IX86_BUILTIN_ANDNPD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_iordf3, \"__builtin_ia32_orpd\", IX86_BUILTIN_ORPD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_xordf3,  \"__builtin_ia32_xorpd\", IX86_BUILTIN_XORPD, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_sse2_movsd,  \"__builtin_ia32_movsd\", IX86_BUILTIN_MOVSD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_unpckhpd, \"__builtin_ia32_unpckhpd\", IX86_BUILTIN_UNPCKHPD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_unpcklpd, \"__builtin_ia32_unpcklpd\", IX86_BUILTIN_UNPCKLPD, 0, 0 },\n+\n+  /* SSE2 MMX */\n+  { MASK_SSE2, CODE_FOR_addv16qi3, \"__builtin_ia32_paddb128\", IX86_BUILTIN_PADDB128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_addv8hi3, \"__builtin_ia32_paddw128\", IX86_BUILTIN_PADDW128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_addv4si3, \"__builtin_ia32_paddd128\", IX86_BUILTIN_PADDD128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_addv4si3, \"__builtin_ia32_paddq128\", IX86_BUILTIN_PADDQ128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_subv16qi3, \"__builtin_ia32_psubb128\", IX86_BUILTIN_PSUBB128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_subv8hi3, \"__builtin_ia32_psubw128\", IX86_BUILTIN_PSUBW128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_subv4si3, \"__builtin_ia32_psubd128\", IX86_BUILTIN_PSUBD128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_subv4si3, \"__builtin_ia32_psubq128\", IX86_BUILTIN_PSUBQ128, 0, 0 },\n+\n+  { MASK_MMX, CODE_FOR_ssaddv16qi3, \"__builtin_ia32_paddsb128\", IX86_BUILTIN_PADDSB128, 0, 0 },\n+  { MASK_MMX, CODE_FOR_ssaddv8hi3, \"__builtin_ia32_paddsw128\", IX86_BUILTIN_PADDSW128, 0, 0 },\n+  { MASK_MMX, CODE_FOR_sssubv16qi3, \"__builtin_ia32_psubsb128\", IX86_BUILTIN_PSUBSB128, 0, 0 },\n+  { MASK_MMX, CODE_FOR_sssubv8hi3, \"__builtin_ia32_psubsw128\", IX86_BUILTIN_PSUBSW128, 0, 0 },\n+  { MASK_MMX, CODE_FOR_usaddv16qi3, \"__builtin_ia32_paddusb128\", IX86_BUILTIN_PADDUSB128, 0, 0 },\n+  { MASK_MMX, CODE_FOR_usaddv8hi3, \"__builtin_ia32_paddusw128\", IX86_BUILTIN_PADDUSW128, 0, 0 },\n+  { MASK_MMX, CODE_FOR_ussubv16qi3, \"__builtin_ia32_psubusb128\", IX86_BUILTIN_PSUBUSB128, 0, 0 },\n+  { MASK_MMX, CODE_FOR_ussubv8hi3, \"__builtin_ia32_psubusw128\", IX86_BUILTIN_PSUBUSW128, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_mulv8hi3, \"__builtin_ia32_pmullw128\", IX86_BUILTIN_PMULLW128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_smulv8hi3_highpart, \"__builtin_ia32_pmulhw128\", IX86_BUILTIN_PMULHW128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_umulsidi3, \"__builtin_ia32_pmuludq\", IX86_BUILTIN_PMULUDQ, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_umulv2siv2di3, \"__builtin_ia32_pmuludq128\", IX86_BUILTIN_PMULUDQ128, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_sse2_andti3, \"__builtin_ia32_pand128\", IX86_BUILTIN_PAND128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_nandti3, \"__builtin_ia32_pandn128\", IX86_BUILTIN_PANDN128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_iorti3, \"__builtin_ia32_por128\", IX86_BUILTIN_POR128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_xorti3, \"__builtin_ia32_pxor128\", IX86_BUILTIN_PXOR128, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_sse2_uavgv16qi3, \"__builtin_ia32_pavgb128\", IX86_BUILTIN_PAVGB128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_uavgv8hi3, \"__builtin_ia32_pavgw128\", IX86_BUILTIN_PAVGW128, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_eqv16qi3, \"__builtin_ia32_pcmpeqb128\", IX86_BUILTIN_PCMPEQB128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_eqv8hi3, \"__builtin_ia32_pcmpeqw128\", IX86_BUILTIN_PCMPEQW128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_eqv4si3, \"__builtin_ia32_pcmpeqd128\", IX86_BUILTIN_PCMPEQD128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_gtv16qi3, \"__builtin_ia32_pcmpgtb128\", IX86_BUILTIN_PCMPGTB128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_gtv8hi3, \"__builtin_ia32_pcmpgtw128\", IX86_BUILTIN_PCMPGTW128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_gtv4si3, \"__builtin_ia32_pcmpgtd128\", IX86_BUILTIN_PCMPGTD128, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_umaxv16qi3, \"__builtin_ia32_pmaxub128\", IX86_BUILTIN_PMAXUB128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_smaxv8hi3, \"__builtin_ia32_pmaxsw128\", IX86_BUILTIN_PMAXSW128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_uminv16qi3, \"__builtin_ia32_pminub128\", IX86_BUILTIN_PMINUB128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sminv8hi3, \"__builtin_ia32_pminsw128\", IX86_BUILTIN_PMINSW128, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_sse2_punpckhbw, \"__builtin_ia32_punpckhbw128\", IX86_BUILTIN_PUNPCKHBW128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_punpckhwd, \"__builtin_ia32_punpckhwd128\", IX86_BUILTIN_PUNPCKHWD128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_punpckhdq, \"__builtin_ia32_punpckhdq128\", IX86_BUILTIN_PUNPCKHDQ128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_punpcklbw, \"__builtin_ia32_punpcklbw128\", IX86_BUILTIN_PUNPCKLBW128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_punpcklwd, \"__builtin_ia32_punpcklwd128\", IX86_BUILTIN_PUNPCKLWD128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_punpckldq, \"__builtin_ia32_punpckldq128\", IX86_BUILTIN_PUNPCKLDQ128, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_cvtsi2sd, 0, IX86_BUILTIN_CVTSI2SD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_cvtsd2ss, 0, IX86_BUILTIN_CVTSD2SS, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_cvtss2sd, 0, IX86_BUILTIN_CVTSS2SD, 0, 0 }\n };\n \n static const struct builtin_description bdesc_1arg[] =\n {\n-  { MASK_SSE | MASK_3DNOW_A, CODE_FOR_mmx_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB, 0, 0 },\n-  { MASK_SSE, CODE_FOR_sse_movmskps, 0, IX86_BUILTIN_MOVMSKPS, 0, 0 },\n+  { MASK_SSE1 | MASK_3DNOW_A, CODE_FOR_mmx_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_sse_movmskps, 0, IX86_BUILTIN_MOVMSKPS, 0, 0 },\n+\n+  { MASK_SSE1, CODE_FOR_sqrtv4sf2, 0, IX86_BUILTIN_SQRTPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_rsqrtv4sf2, 0, IX86_BUILTIN_RSQRTPS, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_rcpv4sf2, 0, IX86_BUILTIN_RCPPS, 0, 0 },\n+\n+  { MASK_SSE1, CODE_FOR_cvtps2pi, 0, IX86_BUILTIN_CVTPS2PI, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_cvtss2si, 0, IX86_BUILTIN_CVTSS2SI, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_cvttps2pi, 0, IX86_BUILTIN_CVTTPS2PI, 0, 0 },\n+  { MASK_SSE1, CODE_FOR_cvttss2si, 0, IX86_BUILTIN_CVTTSS2SI, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_sse2_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB128, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_movmskpd, 0, IX86_BUILTIN_MOVMSKPD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_sse2_movq2dq, 0, IX86_BUILTIN_MOVQ2DQ, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_sqrtv2df2, 0, IX86_BUILTIN_SQRTPD, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_cvtdq2pd, 0, IX86_BUILTIN_CVTDQ2PD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_cvtdq2ps, 0, IX86_BUILTIN_CVTDQ2PS, 0, 0 },\n \n-  { MASK_SSE, CODE_FOR_sqrtv4sf2, 0, IX86_BUILTIN_SQRTPS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_rsqrtv4sf2, 0, IX86_BUILTIN_RSQRTPS, 0, 0 },\n-  { MASK_SSE, CODE_FOR_rcpv4sf2, 0, IX86_BUILTIN_RCPPS, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_cvtpd2dq, 0, IX86_BUILTIN_CVTPD2DQ, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_cvtpd2pi, 0, IX86_BUILTIN_CVTPD2PI, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_cvtpd2ps, 0, IX86_BUILTIN_CVTPD2PS, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_cvttpd2dq, 0, IX86_BUILTIN_CVTTPD2DQ, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_cvttpd2pi, 0, IX86_BUILTIN_CVTTPD2PI, 0, 0 },\n \n-  { MASK_SSE, CODE_FOR_cvtps2pi, 0, IX86_BUILTIN_CVTPS2PI, 0, 0 },\n-  { MASK_SSE, CODE_FOR_cvtss2si, 0, IX86_BUILTIN_CVTSS2SI, 0, 0 },\n-  { MASK_SSE, CODE_FOR_cvttps2pi, 0, IX86_BUILTIN_CVTTPS2PI, 0, 0 },\n-  { MASK_SSE, CODE_FOR_cvttss2si, 0, IX86_BUILTIN_CVTTSS2SI, 0, 0 }\n+  { MASK_SSE2, CODE_FOR_cvtpi2pd, 0, IX86_BUILTIN_CVTPI2PD, 0, 0 },\n \n+  { MASK_SSE2, CODE_FOR_cvtsd2si, 0, IX86_BUILTIN_CVTSD2SI, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_cvttsd2si, 0, IX86_BUILTIN_CVTTSD2SI, 0, 0 },\n+\n+  { MASK_SSE2, CODE_FOR_cvtps2dq, 0, IX86_BUILTIN_CVTPS2DQ, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_cvtps2pd, 0, IX86_BUILTIN_CVTPS2PD, 0, 0 },\n+  { MASK_SSE2, CODE_FOR_cvttps2dq, 0, IX86_BUILTIN_CVTTPS2DQ, 0, 0 }\n };\n \n void\n@@ -11320,6 +11461,172 @@ ix86_init_mmx_sse_builtins ()\n                                       tree_cons (NULL_TREE,\n                                                  V2SF_type_node,\n                                                  endlink)));\n+  tree pint_type_node    = build_pointer_type (integer_type_node);\n+  tree pdouble_type_node = build_pointer_type (double_type_node);\n+  tree int_ftype_v2df_v2df\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node, endlink)));\n+\n+  tree ti_ftype_void\n+    = build_function_type (intTI_type_node, endlink);\n+  tree ti_ftype_ti_ti\n+    = build_function_type (intTI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, intTI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, intTI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree void_ftype_pvoid\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, ptr_type_node, endlink));\n+  tree v2di_ftype_di\n+    = build_function_type (V2DI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, long_long_unsigned_type_node,\n+\t\t\t\t      endlink));\n+  tree v4sf_ftype_v4si\n+    = build_function_type (V4SF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node, endlink));\n+  tree v4si_ftype_v4sf\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SF_type_node, endlink));\n+  tree v2df_ftype_v4si\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node, endlink));\n+  tree v4si_ftype_v2df\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node, endlink));\n+  tree v2si_ftype_v2df\n+    = build_function_type (V2SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node, endlink));\n+  tree v4sf_ftype_v2df\n+    = build_function_type (V4SF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node, endlink));\n+  tree v2df_ftype_v2si\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2SI_type_node, endlink));\n+  tree v2df_ftype_v4sf\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SF_type_node, endlink));\n+  tree int_ftype_v2df\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node, endlink));\n+  tree v2df_ftype_v2df_int\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v4sf_ftype_v4sf_v2df\n+    = build_function_type (V4SF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v2df_ftype_v2df_v4sf\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v2df_ftype_v2df_v2df_int\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    integer_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+  tree v2df_ftype_v2df_pv2si\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, pv2si_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree void_ftype_pv2si_v2df\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, pv2si_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree void_ftype_pdouble_v2df\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, pdouble_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree void_ftype_pint_int\n+    = build_function_type (void_type_node,\n+\t\t\t   tree_cons (NULL_TREE, pint_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree maskmovdqu_args = tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t    tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t\t       tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t  pchar_type_node,\n+\t\t\t\t\t\t\t  endlink)));\n+  tree void_ftype_v16qi_v16qi_pchar\n+    = build_function_type (void_type_node, maskmovdqu_args);\n+  tree v2df_ftype_pdouble\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, pdouble_type_node,\n+\t\t\t\t      endlink));\n+  tree v2df_ftype_v2df_v2df\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v16qi_ftype_v16qi_v16qi\n+    = build_function_type (V16QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v8hi_ftype_v8hi_v8hi\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v4si_ftype_v4si_v4si\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v2di_ftype_v2di_v2di\n+    = build_function_type (V2DI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V2DI_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v2di_ftype_v2df_v2df\n+    = build_function_type (V2DI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v2df_ftype_v2df\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V2DF_type_node,\n+\t\t\t\t      endlink));\n+  tree v2df_ftype_double\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t      endlink));\n+  tree v2df_ftype_double_double\n+    = build_function_type (V2DF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, double_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree int_ftype_v8hi_int\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v8hi_ftype_v8hi_int_int\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t tree_cons (NULL_TREE,\n+\t\t\t\t\t\t\t    integer_type_node,\n+\t\t\t\t\t\t\t    endlink))));\n+  tree v4si_ftype_v4si_int\n+    = build_function_type (V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n+  tree v8hi_ftype_v8hi_int\n+    = build_function_type (V8HI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n+\t\t\t\t\t\t endlink)));\n \n   /* Add all builtins that are more or less simple operations on two\n      operands.  */\n@@ -11336,6 +11643,24 @@ ix86_init_mmx_sse_builtins ()\n \n       switch (mode)\n \t{\n+\tcase V16QImode:\n+\t  type = v16qi_ftype_v16qi_v16qi;\n+\t  break;\n+\tcase V8HImode:\n+\t  type = v8hi_ftype_v8hi_v8hi;\n+\t  break;\n+\tcase V4SImode:\n+\t  type = v4si_ftype_v4si_v4si;\n+\t  break;\n+\tcase V2DImode:\n+\t  type = v2di_ftype_v2di_v2di;\n+\t  break;\n+\tcase V2DFmode:\n+\t  type = v2df_ftype_v2df_v2df;\n+\t  break;\n+\tcase TImode:\n+\t  type = ti_ftype_ti_ti;\n+\t  break;\n \tcase V4SFmode:\n \t  type = v4sf_ftype_v4sf_v4sf;\n \t  break;\n@@ -11363,6 +11688,12 @@ ix86_init_mmx_sse_builtins ()\n \t  || d->icode == CODE_FOR_vmmaskncmpv4sf3)\n \ttype = v4si_ftype_v4sf_v4sf;\n \n+      if (d->icode == CODE_FOR_maskcmpv2df3\n+\t  || d->icode == CODE_FOR_maskncmpv2df3\n+\t  || d->icode == CODE_FOR_vmmaskcmpv2df3\n+\t  || d->icode == CODE_FOR_vmmaskncmpv2df3)\n+\ttype = v2di_ftype_v2df_v2df;\n+\n       def_builtin (d->mask, d->name, type, d->code);\n     }\n \n@@ -11387,58 +11718,61 @@ ix86_init_mmx_sse_builtins ()\n \n   /* comi/ucomi insns.  */\n   for (i = 0, d = bdesc_comi; i < ARRAY_SIZE (bdesc_comi); i++, d++)\n-    def_builtin (d->mask, d->name, int_ftype_v4sf_v4sf, d->code);\n+    if (d->mask == MASK_SSE2)\n+      def_builtin (d->mask, d->name, int_ftype_v2df_v2df, d->code);\n+    else\n+      def_builtin (d->mask, d->name, int_ftype_v4sf_v4sf, d->code);\n \n   def_builtin (MASK_MMX, \"__builtin_ia32_packsswb\", v8qi_ftype_v4hi_v4hi, IX86_BUILTIN_PACKSSWB);\n   def_builtin (MASK_MMX, \"__builtin_ia32_packssdw\", v4hi_ftype_v2si_v2si, IX86_BUILTIN_PACKSSDW);\n   def_builtin (MASK_MMX, \"__builtin_ia32_packuswb\", v8qi_ftype_v4hi_v4hi, IX86_BUILTIN_PACKUSWB);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_cvtpi2ps\", v4sf_ftype_v4sf_v2si, IX86_BUILTIN_CVTPI2PS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_cvtps2pi\", v2si_ftype_v4sf, IX86_BUILTIN_CVTPS2PI);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_cvtsi2ss\", v4sf_ftype_v4sf_int, IX86_BUILTIN_CVTSI2SS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_cvtss2si\", int_ftype_v4sf, IX86_BUILTIN_CVTSS2SI);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_cvttps2pi\", v2si_ftype_v4sf, IX86_BUILTIN_CVTTPS2PI);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_cvttss2si\", int_ftype_v4sf, IX86_BUILTIN_CVTTSS2SI);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_cvtpi2ps\", v4sf_ftype_v4sf_v2si, IX86_BUILTIN_CVTPI2PS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_cvtps2pi\", v2si_ftype_v4sf, IX86_BUILTIN_CVTPS2PI);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_cvtsi2ss\", v4sf_ftype_v4sf_int, IX86_BUILTIN_CVTSI2SS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_cvtss2si\", int_ftype_v4sf, IX86_BUILTIN_CVTSS2SI);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_cvttps2pi\", v2si_ftype_v4sf, IX86_BUILTIN_CVTTPS2PI);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_cvttss2si\", int_ftype_v4sf, IX86_BUILTIN_CVTTSS2SI);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_andps\", v4sf_ftype_v4sf_v4sf, IX86_BUILTIN_ANDPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_andnps\", v4sf_ftype_v4sf_v4sf, IX86_BUILTIN_ANDNPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_orps\", v4sf_ftype_v4sf_v4sf, IX86_BUILTIN_ORPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_xorps\", v4sf_ftype_v4sf_v4sf, IX86_BUILTIN_XORPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_andps\", v4sf_ftype_v4sf_v4sf, IX86_BUILTIN_ANDPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_andnps\", v4sf_ftype_v4sf_v4sf, IX86_BUILTIN_ANDNPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_orps\", v4sf_ftype_v4sf_v4sf, IX86_BUILTIN_ORPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_xorps\", v4sf_ftype_v4sf_v4sf, IX86_BUILTIN_XORPS);\n \n-  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_pextrw\", int_ftype_v4hi_int, IX86_BUILTIN_PEXTRW);\n-  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_pinsrw\", v4hi_ftype_v4hi_int_int, IX86_BUILTIN_PINSRW);\n+  def_builtin (MASK_SSE1 | MASK_3DNOW_A, \"__builtin_ia32_pextrw\", int_ftype_v4hi_int, IX86_BUILTIN_PEXTRW);\n+  def_builtin (MASK_SSE1 | MASK_3DNOW_A, \"__builtin_ia32_pinsrw\", v4hi_ftype_v4hi_int_int, IX86_BUILTIN_PINSRW);\n \n-  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_maskmovq\", void_ftype_v8qi_v8qi_pchar, IX86_BUILTIN_MASKMOVQ);\n+  def_builtin (MASK_SSE1 | MASK_3DNOW_A, \"__builtin_ia32_maskmovq\", void_ftype_v8qi_v8qi_pchar, IX86_BUILTIN_MASKMOVQ);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_loadaps\", v4sf_ftype_pfloat, IX86_BUILTIN_LOADAPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_loadups\", v4sf_ftype_pfloat, IX86_BUILTIN_LOADUPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_loadss\", v4sf_ftype_pfloat, IX86_BUILTIN_LOADSS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_storeaps\", void_ftype_pfloat_v4sf, IX86_BUILTIN_STOREAPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_storeups\", void_ftype_pfloat_v4sf, IX86_BUILTIN_STOREUPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_storess\", void_ftype_pfloat_v4sf, IX86_BUILTIN_STORESS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_loadaps\", v4sf_ftype_pfloat, IX86_BUILTIN_LOADAPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_loadups\", v4sf_ftype_pfloat, IX86_BUILTIN_LOADUPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_loadss\", v4sf_ftype_pfloat, IX86_BUILTIN_LOADSS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_storeaps\", void_ftype_pfloat_v4sf, IX86_BUILTIN_STOREAPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_storeups\", void_ftype_pfloat_v4sf, IX86_BUILTIN_STOREUPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_storess\", void_ftype_pfloat_v4sf, IX86_BUILTIN_STORESS);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_loadhps\", v4sf_ftype_v4sf_pv2si, IX86_BUILTIN_LOADHPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_loadlps\", v4sf_ftype_v4sf_pv2si, IX86_BUILTIN_LOADLPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_storehps\", void_ftype_pv2si_v4sf, IX86_BUILTIN_STOREHPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_storelps\", void_ftype_pv2si_v4sf, IX86_BUILTIN_STORELPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_loadhps\", v4sf_ftype_v4sf_pv2si, IX86_BUILTIN_LOADHPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_loadlps\", v4sf_ftype_v4sf_pv2si, IX86_BUILTIN_LOADLPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_storehps\", void_ftype_pv2si_v4sf, IX86_BUILTIN_STOREHPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_storelps\", void_ftype_pv2si_v4sf, IX86_BUILTIN_STORELPS);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_movmskps\", int_ftype_v4sf, IX86_BUILTIN_MOVMSKPS);\n-  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_pmovmskb\", int_ftype_v8qi, IX86_BUILTIN_PMOVMSKB);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_movntps\", void_ftype_pfloat_v4sf, IX86_BUILTIN_MOVNTPS);\n-  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_movntq\", void_ftype_pdi_di, IX86_BUILTIN_MOVNTQ);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_movmskps\", int_ftype_v4sf, IX86_BUILTIN_MOVMSKPS);\n+  def_builtin (MASK_SSE1 | MASK_3DNOW_A, \"__builtin_ia32_pmovmskb\", int_ftype_v8qi, IX86_BUILTIN_PMOVMSKB);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_movntps\", void_ftype_pfloat_v4sf, IX86_BUILTIN_MOVNTPS);\n+  def_builtin (MASK_SSE1 | MASK_3DNOW_A, \"__builtin_ia32_movntq\", void_ftype_pdi_di, IX86_BUILTIN_MOVNTQ);\n \n-  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_sfence\", void_ftype_void, IX86_BUILTIN_SFENCE);\n+  def_builtin (MASK_SSE1 | MASK_3DNOW_A, \"__builtin_ia32_sfence\", void_ftype_void, IX86_BUILTIN_SFENCE);\n \n-  def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_psadbw\", v4hi_ftype_v8qi_v8qi, IX86_BUILTIN_PSADBW);\n+  def_builtin (MASK_SSE1 | MASK_3DNOW_A, \"__builtin_ia32_psadbw\", v4hi_ftype_v8qi_v8qi, IX86_BUILTIN_PSADBW);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_rcpps\", v4sf_ftype_v4sf, IX86_BUILTIN_RCPPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_rcpss\", v4sf_ftype_v4sf, IX86_BUILTIN_RCPSS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_rsqrtps\", v4sf_ftype_v4sf, IX86_BUILTIN_RSQRTPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_rsqrtss\", v4sf_ftype_v4sf, IX86_BUILTIN_RSQRTSS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_sqrtps\", v4sf_ftype_v4sf, IX86_BUILTIN_SQRTPS);\n-  def_builtin (MASK_SSE, \"__builtin_ia32_sqrtss\", v4sf_ftype_v4sf, IX86_BUILTIN_SQRTSS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_rcpps\", v4sf_ftype_v4sf, IX86_BUILTIN_RCPPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_rcpss\", v4sf_ftype_v4sf, IX86_BUILTIN_RCPSS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_rsqrtps\", v4sf_ftype_v4sf, IX86_BUILTIN_RSQRTPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_rsqrtss\", v4sf_ftype_v4sf, IX86_BUILTIN_RSQRTSS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_sqrtps\", v4sf_ftype_v4sf, IX86_BUILTIN_SQRTPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_sqrtss\", v4sf_ftype_v4sf, IX86_BUILTIN_SQRTSS);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_shufps\", v4sf_ftype_v4sf_v4sf_int, IX86_BUILTIN_SHUFPS);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_shufps\", v4sf_ftype_v4sf_v4sf_int, IX86_BUILTIN_SHUFPS);\n \n   /* Original 3DNow!  */\n   def_builtin (MASK_3DNOW, \"__builtin_ia32_femms\", void_ftype_void, IX86_BUILTIN_FEMMS);\n@@ -11470,7 +11804,76 @@ ix86_init_mmx_sse_builtins ()\n   def_builtin (MASK_3DNOW_A, \"__builtin_ia32_pswapdsf\", v2sf_ftype_v2sf, IX86_BUILTIN_PSWAPDSF);\n   def_builtin (MASK_3DNOW_A, \"__builtin_ia32_pswapdsi\", v2si_ftype_v2si, IX86_BUILTIN_PSWAPDSI);\n \n-  def_builtin (MASK_SSE, \"__builtin_ia32_setzerops\", v4sf_ftype_void, IX86_BUILTIN_SSE_ZERO);\n+  def_builtin (MASK_SSE1, \"__builtin_ia32_setzerops\", v4sf_ftype_void, IX86_BUILTIN_SSE_ZERO);\n+\n+  /* SSE2 */\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_pextrw128\", int_ftype_v8hi_int, IX86_BUILTIN_PEXTRW128);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_pinsrw128\", v8hi_ftype_v8hi_int_int, IX86_BUILTIN_PINSRW128);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_maskmovdqu\", void_ftype_v16qi_v16qi_pchar, IX86_BUILTIN_MASKMOVDQU);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_movq2dq\", v2di_ftype_di, IX86_BUILTIN_MOVQ2DQ);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loadapd\", v2df_ftype_pdouble, IX86_BUILTIN_LOADAPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loadupd\", v2df_ftype_pdouble, IX86_BUILTIN_LOADUPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loadsd\", v2df_ftype_pdouble, IX86_BUILTIN_LOADSD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_storeapd\", void_ftype_pdouble_v2df, IX86_BUILTIN_STOREAPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_storeupd\", void_ftype_pdouble_v2df, IX86_BUILTIN_STOREUPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_storesd\", void_ftype_pdouble_v2df, IX86_BUILTIN_STORESD);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loadhpd\", v2df_ftype_v2df_pv2si, IX86_BUILTIN_LOADHPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loadlpd\", v2df_ftype_v2df_pv2si, IX86_BUILTIN_LOADLPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_storehpd\", void_ftype_pv2si_v2df, IX86_BUILTIN_STOREHPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_storelpd\", void_ftype_pv2si_v2df, IX86_BUILTIN_STORELPD);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_movmskpd\", int_ftype_v2df, IX86_BUILTIN_MOVMSKPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_pmovmskb128\", int_ftype_v8qi, IX86_BUILTIN_PMOVMSKB128);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_movnti\", void_ftype_pint_int, IX86_BUILTIN_MOVNTI);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_movntpd\", void_ftype_pdouble_v2df, IX86_BUILTIN_MOVNTPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_movntdq\", void_ftype_pdi_di, IX86_BUILTIN_MOVNTDQ);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_pshufd\", v4si_ftype_v4si_int, IX86_BUILTIN_PSHUFD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_pshuflw\", v8hi_ftype_v8hi_int, IX86_BUILTIN_PSHUFLW);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_pshufhw\", v8hi_ftype_v8hi_int, IX86_BUILTIN_PSHUFHW);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_psadbw128\", v4hi_ftype_v8qi_v8qi, IX86_BUILTIN_PSADBW128);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_sqrtpd\", v2df_ftype_v2df, IX86_BUILTIN_SQRTPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_sqrtsd\", v2df_ftype_v2df, IX86_BUILTIN_SQRTSD);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_shufpd\", v2df_ftype_v2df_v2df_int, IX86_BUILTIN_SHUFPD);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtdq2pd\", v2df_ftype_v4si, IX86_BUILTIN_CVTDQ2PD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtdq2ps\", v4sf_ftype_v4si, IX86_BUILTIN_CVTDQ2PD);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtpd2dq\", v4si_ftype_v2df, IX86_BUILTIN_CVTPD2DQ);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtpd2pi\", v2si_ftype_v2df, IX86_BUILTIN_CVTPD2PI);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtpd2ps\", v4sf_ftype_v2df, IX86_BUILTIN_CVTPD2PS);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvttpd2dq\", v4si_ftype_v2df, IX86_BUILTIN_CVTTPD2DQ);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvttpd2pi\", v2si_ftype_v2df, IX86_BUILTIN_CVTTPD2PI);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtpi2pd\", v2df_ftype_v2si, IX86_BUILTIN_CVTPI2PD);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtsd2si\", int_ftype_v2df, IX86_BUILTIN_CVTSD2SI);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvttsd2si\", int_ftype_v2df, IX86_BUILTIN_CVTTSD2SI);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtps2dq\", v4si_ftype_v4sf, IX86_BUILTIN_CVTPS2DQ);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtps2pd\", v2df_ftype_v4sf, IX86_BUILTIN_CVTPS2PD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvttps2dq\", v4si_ftype_v4sf, IX86_BUILTIN_CVTTPS2DQ);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtsi2sd\", v2df_ftype_v2df_int, IX86_BUILTIN_CVTSI2SD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtsd2ss\", v4sf_ftype_v4sf_v2df, IX86_BUILTIN_CVTSD2SS);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_cvtss2sd\", v2df_ftype_v2df_v4sf, IX86_BUILTIN_CVTSS2SD);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_setpd1\", v2df_ftype_double, IX86_BUILTIN_SETPD1);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_setpd\", v2df_ftype_double_double, IX86_BUILTIN_SETPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_setzeropd\", ti_ftype_void, IX86_BUILTIN_CLRPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loadpd1\", v2df_ftype_pdouble, IX86_BUILTIN_LOADPD1);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_loadrpd\", v2df_ftype_pdouble, IX86_BUILTIN_LOADRPD);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_storepd1\", void_ftype_pdouble_v2df, IX86_BUILTIN_STOREPD1);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_storerpd\", void_ftype_pdouble_v2df, IX86_BUILTIN_STORERPD);\n+\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_clflush\", void_ftype_pvoid, IX86_BUILTIN_CLFLUSH);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_lfence\", void_ftype_void, IX86_BUILTIN_LFENCE);\n+  def_builtin (MASK_SSE2, \"__builtin_ia32_mfence\", void_ftype_void, IX86_BUILTIN_MFENCE);\n }\n \n /* Errors in the source file can cause expand_expr to return const0_rtx\n@@ -11828,7 +12231,10 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       return 0;\n \n     case IX86_BUILTIN_PEXTRW:\n-      icode = CODE_FOR_mmx_pextrw;\n+    case IX86_BUILTIN_PEXTRW128:\n+      icode = (fcode == IX86_BUILTIN_PEXTRW\n+\t       ? CODE_FOR_mmx_pextrw\n+\t       : CODE_FOR_sse2_pextrw);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -11856,7 +12262,10 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       return target;\n \n     case IX86_BUILTIN_PINSRW:\n-      icode = CODE_FOR_mmx_pinsrw;\n+    case IX86_BUILTIN_PINSRW128:\n+      icode = (fcode == IX86_BUILTIN_PINSRW\n+\t       ? CODE_FOR_mmx_pinsrw\n+\t       : CODE_FOR_sse2_pinsrw);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n@@ -11889,7 +12298,9 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       return target;\n \n     case IX86_BUILTIN_MASKMOVQ:\n-      icode = TARGET_64BIT ? CODE_FOR_mmx_maskmovq_rex : CODE_FOR_mmx_maskmovq;\n+      icode = (fcode == IX86_BUILTIN_MASKMOVQ\n+\t       ? (TARGET_64BIT ? CODE_FOR_mmx_maskmovq_rex : CODE_FOR_mmx_maskmovq)\n+\t       : CODE_FOR_sse2_maskmovdqu);\n       /* Note the arg order is different from the operand order.  */\n       arg1 = TREE_VALUE (arglist);\n       arg2 = TREE_VALUE (TREE_CHAIN (arglist));\n@@ -11952,8 +12363,12 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n \n     case IX86_BUILTIN_LOADHPS:\n     case IX86_BUILTIN_LOADLPS:\n-      icode = (fcode == IX86_BUILTIN_LOADHPS\n-\t       ? CODE_FOR_sse_movhps : CODE_FOR_sse_movlps);\n+    case IX86_BUILTIN_LOADHPD:\n+    case IX86_BUILTIN_LOADLPD:\n+      icode = (fcode == IX86_BUILTIN_LOADHPS ? CODE_FOR_sse_movhps\n+\t       : fcode == IX86_BUILTIN_LOADLPS ? CODE_FOR_sse_movlps\n+\t       : fcode == IX86_BUILTIN_LOADHPD ? CODE_FOR_sse2_movhpd\n+\t       : CODE_FOR_sse2_movlpd);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -11977,8 +12392,12 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n \n     case IX86_BUILTIN_STOREHPS:\n     case IX86_BUILTIN_STORELPS:\n-      icode = (fcode == IX86_BUILTIN_STOREHPS\n-\t       ? CODE_FOR_sse_movhps : CODE_FOR_sse_movlps);\n+    case IX86_BUILTIN_STOREHPD:\n+    case IX86_BUILTIN_STORELPD:\n+      icode = (fcode == IX86_BUILTIN_STOREHPS ? CODE_FOR_sse_movhps\n+\t       : fcode == IX86_BUILTIN_STORELPS ? CODE_FOR_sse_movlps\n+\t       : fcode == IX86_BUILTIN_STOREHPD ? CODE_FOR_sse2_movhpd\n+\t       : CODE_FOR_sse2_movlpd);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -12014,7 +12433,10 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       return copy_to_mode_reg (SImode, target);\n \n     case IX86_BUILTIN_SHUFPS:\n-      icode = CODE_FOR_sse_shufps;\n+    case IX86_BUILTIN_SHUFPD:\n+      icode = (fcode == IX86_BUILTIN_SHUFPS\n+\t       ? CODE_FOR_sse_shufps\n+\t       : CODE_FOR_sse2_shufpd);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n@@ -12047,7 +12469,13 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       return target;\n \n     case IX86_BUILTIN_PSHUFW:\n-      icode = CODE_FOR_mmx_pshufw;\n+    case IX86_BUILTIN_PSHUFD:\n+    case IX86_BUILTIN_PSHUFHW:\n+    case IX86_BUILTIN_PSHUFLW:\n+      icode = (  fcode == IX86_BUILTIN_PSHUFHW ? CODE_FOR_sse2_pshufhw\n+\t       : fcode == IX86_BUILTIN_PSHUFLW ? CODE_FOR_sse2_pshuflw\n+\t       : fcode == IX86_BUILTIN_PSHUFD ? CODE_FOR_sse2_pshufd\n+\t       : CODE_FOR_mmx_pshufw);\n       arg0 = TREE_VALUE (arglist);\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n@@ -12163,6 +12591,88 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       emit_insn (gen_mmx_clrdi (target));\n       return target;\n \n+    case IX86_BUILTIN_SQRTSD:\n+      return ix86_expand_unop1_builtin (CODE_FOR_vmsqrtv2df2, arglist, target);\n+    case IX86_BUILTIN_LOADAPD:\n+      return ix86_expand_unop_builtin (CODE_FOR_sse2_movapd, arglist, target, 1);\n+    case IX86_BUILTIN_LOADUPD:\n+      return ix86_expand_unop_builtin (CODE_FOR_sse2_movupd, arglist, target, 1);\n+\n+    case IX86_BUILTIN_STOREAPD:\n+      return ix86_expand_store_builtin (CODE_FOR_sse2_movapd, arglist);\n+    case IX86_BUILTIN_STOREUPD:\n+      return ix86_expand_store_builtin (CODE_FOR_sse2_movupd, arglist);\n+\n+    case IX86_BUILTIN_LOADSD:\n+      return ix86_expand_unop_builtin (CODE_FOR_sse2_loadsd, arglist, target, 1);\n+\n+    case IX86_BUILTIN_STORESD:\n+      return ix86_expand_store_builtin (CODE_FOR_sse2_storesd, arglist);\n+\n+    case IX86_BUILTIN_SETPD1:\n+      target = assign_386_stack_local (DFmode, 0);\n+      arg0 = TREE_VALUE (arglist);\n+      emit_move_insn (adjust_address (target, DFmode, 0),\n+\t\t      expand_expr (arg0, NULL_RTX, VOIDmode, 0));\n+      op0 = gen_reg_rtx (V2DFmode);\n+      emit_insn (gen_sse2_loadsd (op0, adjust_address (target, V2DFmode, 0)));\n+      emit_insn (gen_sse2_shufpd (op0, op0, op0, GEN_INT (0)));\n+      return op0;\n+\n+    case IX86_BUILTIN_SETPD:\n+      target = assign_386_stack_local (V2DFmode, 0);\n+      arg0 = TREE_VALUE (arglist);\n+      arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+      emit_move_insn (adjust_address (target, DFmode, 0),\n+\t\t      expand_expr (arg0, NULL_RTX, VOIDmode, 0));\n+      emit_move_insn (adjust_address (target, DFmode, 8),\n+\t\t      expand_expr (arg1, NULL_RTX, VOIDmode, 0));\n+      op0 = gen_reg_rtx (V2DFmode);\n+      emit_insn (gen_sse2_movapd (op0, target));\n+      return op0;\n+\n+    case IX86_BUILTIN_LOADRPD:\n+      target = ix86_expand_unop_builtin (CODE_FOR_sse2_movapd, arglist,\n+\t\t\t\t\t gen_reg_rtx (V2DFmode), 1);\n+      emit_insn (gen_sse2_shufpd (target, target, target, GEN_INT (1)));\n+      return target;\n+\n+    case IX86_BUILTIN_LOADPD1:\n+      target = ix86_expand_unop_builtin (CODE_FOR_sse2_loadsd, arglist,\n+\t\t\t\t\t gen_reg_rtx (V2DFmode), 1);\n+      emit_insn (gen_sse2_shufpd (target, target, target, const0_rtx));\n+      return target;\n+\n+    case IX86_BUILTIN_STOREPD1:\n+      return ix86_expand_store_builtin (CODE_FOR_sse2_movapd, arglist);\n+    case IX86_BUILTIN_STORERPD:\n+      return ix86_expand_store_builtin (CODE_FOR_sse2_movapd, arglist);\n+\n+    case IX86_BUILTIN_MFENCE:\n+\temit_insn (gen_sse2_mfence ());\n+\treturn 0;\n+    case IX86_BUILTIN_LFENCE:\n+\temit_insn (gen_sse2_lfence ());\n+\treturn 0;\n+\n+    case IX86_BUILTIN_CLFLUSH:\n+\targ0 = TREE_VALUE (arglist);\n+\top0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+\ticode = CODE_FOR_sse2_clflush;\n+\tmode0 = insn_data[icode].operand[0].mode;\n+\tif (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n+\t    op0 = copy_to_mode_reg (mode0, op0);\n+\n+\temit_insn (gen_sse2_clflush (op0));\n+\treturn 0;\n+\n+    case IX86_BUILTIN_MOVNTPD:\n+      return ix86_expand_store_builtin (CODE_FOR_sse2_movntv2df, arglist);\n+    case IX86_BUILTIN_MOVNTDQ:\n+      return ix86_expand_store_builtin (CODE_FOR_sse2_movntti, arglist);\n+    case IX86_BUILTIN_MOVNTI:\n+      return ix86_expand_store_builtin (CODE_FOR_sse2_movntsi, arglist);\n+\n     default:\n       break;\n     }\n@@ -12174,7 +12684,11 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n \tif (d->icode == CODE_FOR_maskcmpv4sf3\n \t    || d->icode == CODE_FOR_vmmaskcmpv4sf3\n \t    || d->icode == CODE_FOR_maskncmpv4sf3\n-\t    || d->icode == CODE_FOR_vmmaskncmpv4sf3)\n+\t    || d->icode == CODE_FOR_vmmaskncmpv4sf3\n+\t    || d->icode == CODE_FOR_maskcmpv2df3\n+\t    || d->icode == CODE_FOR_vmmaskcmpv2df3\n+\t    || d->icode == CODE_FOR_maskncmpv2df3\n+\t    || d->icode == CODE_FOR_vmmaskncmpv2df3)\n \t  return ix86_expand_sse_compare (d, arglist, target);\n \n \treturn ix86_expand_binop_builtin (d->icode, arglist, target);"}, {"sha": "0454cad6084573927eed639b4260b5e5bcbb1878", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fbe5eb6d0a582e04aadb53f6a024d5af17f0baad", "patch": "@@ -987,9 +987,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n       ? (TARGET_64BIT ? 4 : 6)\t\t\t\t\t\t\\\n       : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)))\n \n+#define VALID_SSE2_REG_MODE(MODE) \\\n+    ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode    \\\n+     || (MODE) == V2DImode)\n+\n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n     ((MODE) == TImode || (MODE) == V4SFmode || (MODE) == V4SImode\t\\\n      || (MODE) == SFmode\t\t\t\t\t\t\\\n+     /* Always accept SSE2 modes so that xmmintrin.h compiles.  */\t\\\n+     || VALID_SSE2_REG_MODE (MODE)\t\t\t\t\t\\\n      || (TARGET_SSE2 && ((MODE) == DFmode || VALID_MMX_REG_MODE (MODE))))\n \n #define VALID_MMX_REG_MODE_3DNOW(MODE) \\\n@@ -2218,6 +2224,212 @@ enum ix86_builtins\n   IX86_BUILTIN_SSE_ZERO,\n   IX86_BUILTIN_MMX_ZERO,\n \n+  /* SSE2 */\n+  IX86_BUILTIN_ADDPD,\n+  IX86_BUILTIN_ADDSD,\n+  IX86_BUILTIN_DIVPD,\n+  IX86_BUILTIN_DIVSD,\n+  IX86_BUILTIN_MULPD,\n+  IX86_BUILTIN_MULSD,\n+  IX86_BUILTIN_SUBPD,\n+  IX86_BUILTIN_SUBSD,\n+\n+  IX86_BUILTIN_CMPEQPD,\n+  IX86_BUILTIN_CMPLTPD,\n+  IX86_BUILTIN_CMPLEPD,\n+  IX86_BUILTIN_CMPGTPD,\n+  IX86_BUILTIN_CMPGEPD,\n+  IX86_BUILTIN_CMPNEQPD,\n+  IX86_BUILTIN_CMPNLTPD,\n+  IX86_BUILTIN_CMPNLEPD,\n+  IX86_BUILTIN_CMPNGTPD,\n+  IX86_BUILTIN_CMPNGEPD,\n+  IX86_BUILTIN_CMPORDPD,\n+  IX86_BUILTIN_CMPUNORDPD,\n+  IX86_BUILTIN_CMPNEPD,\n+  IX86_BUILTIN_CMPEQSD,\n+  IX86_BUILTIN_CMPLTSD,\n+  IX86_BUILTIN_CMPLESD,\n+  IX86_BUILTIN_CMPGTSD,\n+  IX86_BUILTIN_CMPGESD,\n+  IX86_BUILTIN_CMPNEQSD,\n+  IX86_BUILTIN_CMPNLTSD,\n+  IX86_BUILTIN_CMPNLESD,\n+  IX86_BUILTIN_CMPNGTSD,\n+  IX86_BUILTIN_CMPNGESD,\n+  IX86_BUILTIN_CMPORDSD,\n+  IX86_BUILTIN_CMPUNORDSD,\n+  IX86_BUILTIN_CMPNESD,\n+\n+  IX86_BUILTIN_COMIEQSD,\n+  IX86_BUILTIN_COMILTSD,\n+  IX86_BUILTIN_COMILESD,\n+  IX86_BUILTIN_COMIGTSD,\n+  IX86_BUILTIN_COMIGESD,\n+  IX86_BUILTIN_COMINEQSD,\n+  IX86_BUILTIN_UCOMIEQSD,\n+  IX86_BUILTIN_UCOMILTSD,\n+  IX86_BUILTIN_UCOMILESD,\n+  IX86_BUILTIN_UCOMIGTSD,\n+  IX86_BUILTIN_UCOMIGESD,\n+  IX86_BUILTIN_UCOMINEQSD,\n+\n+  IX86_BUILTIN_MAXPD,\n+  IX86_BUILTIN_MAXSD,\n+  IX86_BUILTIN_MINPD,\n+  IX86_BUILTIN_MINSD,\n+\n+  IX86_BUILTIN_ANDPD,\n+  IX86_BUILTIN_ANDNPD,\n+  IX86_BUILTIN_ORPD,\n+  IX86_BUILTIN_XORPD,\n+\n+  IX86_BUILTIN_SQRTPD,\n+  IX86_BUILTIN_SQRTSD,\n+\n+  IX86_BUILTIN_UNPCKHPD,\n+  IX86_BUILTIN_UNPCKLPD,\n+\n+  IX86_BUILTIN_SHUFPD,\n+\n+  IX86_BUILTIN_LOADAPD,\n+  IX86_BUILTIN_LOADUPD,\n+  IX86_BUILTIN_STOREAPD,\n+  IX86_BUILTIN_STOREUPD,\n+  IX86_BUILTIN_LOADSD,\n+  IX86_BUILTIN_STORESD,\n+  IX86_BUILTIN_MOVSD,\n+\n+  IX86_BUILTIN_LOADHPD,\n+  IX86_BUILTIN_LOADLPD,\n+  IX86_BUILTIN_STOREHPD,\n+  IX86_BUILTIN_STORELPD,\n+\n+  IX86_BUILTIN_CVTDQ2PD,\n+  IX86_BUILTIN_CVTDQ2PS,\n+\n+  IX86_BUILTIN_CVTPD2DQ,\n+  IX86_BUILTIN_CVTPD2PI,\n+  IX86_BUILTIN_CVTPD2PS,\n+  IX86_BUILTIN_CVTTPD2DQ,\n+  IX86_BUILTIN_CVTTPD2PI,\n+\n+  IX86_BUILTIN_CVTPI2PD,\n+  IX86_BUILTIN_CVTSI2SD,\n+\n+  IX86_BUILTIN_CVTSD2SI,\n+  IX86_BUILTIN_CVTSD2SS,\n+  IX86_BUILTIN_CVTSS2SD,\n+  IX86_BUILTIN_CVTTSD2SI,\n+\n+  IX86_BUILTIN_CVTPS2DQ,\n+  IX86_BUILTIN_CVTPS2PD,\n+  IX86_BUILTIN_CVTTPS2DQ,\n+\n+  IX86_BUILTIN_MOVNTI,\n+  IX86_BUILTIN_MOVNTPD,\n+  IX86_BUILTIN_MOVNTDQ,\n+\n+  IX86_BUILTIN_SETPD1,\n+  IX86_BUILTIN_SETPD,\n+  IX86_BUILTIN_CLRPD,\n+  IX86_BUILTIN_SETRPD,\n+  IX86_BUILTIN_LOADPD1,\n+  IX86_BUILTIN_LOADRPD,\n+  IX86_BUILTIN_STOREPD1,\n+  IX86_BUILTIN_STORERPD,\n+\n+  /* SSE2 MMX */\n+  IX86_BUILTIN_MASKMOVDQU,\n+  IX86_BUILTIN_MOVMSKPD,\n+  IX86_BUILTIN_PMOVMSKB128,\n+  IX86_BUILTIN_MOVQ2DQ,\n+\n+  IX86_BUILTIN_PACKSSWB128,\n+  IX86_BUILTIN_PACKSSDW128,\n+  IX86_BUILTIN_PACKUSWB128,\n+\n+  IX86_BUILTIN_PADDB128,\n+  IX86_BUILTIN_PADDW128,\n+  IX86_BUILTIN_PADDD128,\n+  IX86_BUILTIN_PADDQ128,\n+  IX86_BUILTIN_PADDSB128,\n+  IX86_BUILTIN_PADDSW128,\n+  IX86_BUILTIN_PADDUSB128,\n+  IX86_BUILTIN_PADDUSW128,\n+  IX86_BUILTIN_PSUBB128,\n+  IX86_BUILTIN_PSUBW128,\n+  IX86_BUILTIN_PSUBD128,\n+  IX86_BUILTIN_PSUBQ128,\n+  IX86_BUILTIN_PSUBSB128,\n+  IX86_BUILTIN_PSUBSW128,\n+  IX86_BUILTIN_PSUBUSB128,\n+  IX86_BUILTIN_PSUBUSW128,\n+\n+  IX86_BUILTIN_PAND128,\n+  IX86_BUILTIN_PANDN128,\n+  IX86_BUILTIN_POR128,\n+  IX86_BUILTIN_PXOR128,\n+\n+  IX86_BUILTIN_PAVGB128,\n+  IX86_BUILTIN_PAVGW128,\n+\n+  IX86_BUILTIN_PCMPEQB128,\n+  IX86_BUILTIN_PCMPEQW128,\n+  IX86_BUILTIN_PCMPEQD128,\n+  IX86_BUILTIN_PCMPGTB128,\n+  IX86_BUILTIN_PCMPGTW128,\n+  IX86_BUILTIN_PCMPGTD128,\n+\n+  IX86_BUILTIN_PEXTRW128,\n+  IX86_BUILTIN_PINSRW128,\n+\n+  IX86_BUILTIN_PMADDWD128,\n+\n+  IX86_BUILTIN_PMAXSW128,\n+  IX86_BUILTIN_PMAXUB128,\n+  IX86_BUILTIN_PMINSW128,\n+  IX86_BUILTIN_PMINUB128,\n+\n+  IX86_BUILTIN_PMULUDQ,\n+  IX86_BUILTIN_PMULUDQ128,\n+  IX86_BUILTIN_PMULHUW128,\n+  IX86_BUILTIN_PMULHW128,\n+  IX86_BUILTIN_PMULLW128,\n+\n+  IX86_BUILTIN_PSADBW128,\n+  IX86_BUILTIN_PSHUFHW,\n+  IX86_BUILTIN_PSHUFLW,\n+  IX86_BUILTIN_PSHUFD,\n+\n+  IX86_BUILTIN_PSLLW128,\n+  IX86_BUILTIN_PSLLD128,\n+  IX86_BUILTIN_PSLLQ128,\n+  IX86_BUILTIN_PSRAW128,\n+  IX86_BUILTIN_PSRAD128,\n+  IX86_BUILTIN_PSRLW128,\n+  IX86_BUILTIN_PSRLD128,\n+  IX86_BUILTIN_PSRLQ128,\n+  IX86_BUILTIN_PSLLWI128,\n+  IX86_BUILTIN_PSLLDI128,\n+  IX86_BUILTIN_PSLLQI128,\n+  IX86_BUILTIN_PSRAWI128,\n+  IX86_BUILTIN_PSRADI128,\n+  IX86_BUILTIN_PSRLWI128,\n+  IX86_BUILTIN_PSRLDI128,\n+  IX86_BUILTIN_PSRLQI128,\n+\n+  IX86_BUILTIN_PUNPCKHBW128,\n+  IX86_BUILTIN_PUNPCKHWD128,\n+  IX86_BUILTIN_PUNPCKHDQ128,\n+  IX86_BUILTIN_PUNPCKLBW128,\n+  IX86_BUILTIN_PUNPCKLWD128,\n+  IX86_BUILTIN_PUNPCKLDQ128,\n+\n+  IX86_BUILTIN_CLFLUSH,\n+  IX86_BUILTIN_MFENCE,\n+  IX86_BUILTIN_LFENCE,\n+\n   IX86_BUILTIN_MAX\n };\n \f"}, {"sha": "bd2dfbf1d338b50d72dd431714cb3efc063883cb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1340, "deletions": 5, "changes": 1345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fbe5eb6d0a582e04aadb53f6a024d5af17f0baad", "patch": "@@ -98,6 +98,12 @@\n ;; 52 This is a `pfrcpit2' operation.\n ;; 53 This is a `pfrsqrt' operation.\n ;; 54 This is a `pfrsqrit1' operation.\n+;; 55 This is a `pshuflw' operation.\n+;; 56 This is a `pshufhw' operation.\n+;; 57 This is a `clflush' operation.\n+;; 58 This is a `sfence' operation.\n+;; 59 This is a `mfence' operation.\n+;; 60 This is a `lfence' operation.\n \n ;; Insns whose names begin with \"x86_\" are emitted by gen_FOO calls\n ;; from i386.c.\n@@ -17896,6 +17902,57 @@\n   DONE;\n })\n \n+(define_insn \"movv2df_internal\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(match_operand:V2DF 1 \"general_operand\" \"xm,x\"))]\n+  \"TARGET_SSE2\"\n+  ;; @@@ let's try to use movaps here.\n+  \"movapd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"movv8hi_internal\"\n+  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(match_operand:V8HI 1 \"general_operand\" \"xm,x\"))]\n+  \"TARGET_SSE2\"\n+  ;; @@@ let's try to use movaps here.\n+  \"movaps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"movv16qi_internal\"\n+  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(match_operand:V16QI 1 \"general_operand\" \"xm,x\"))]\n+  \"TARGET_SSE2\"\n+  ;; @@@ let's try to use movaps here.\n+  \"movaps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_expand \"movv2df\"\n+  [(set (match_operand:V2DF 0 \"general_operand\" \"\")\n+\t(match_operand:V2DF 1 \"general_operand\" \"\"))]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_vector_move (V2DFmode, operands);\n+  DONE;\n+})\n+\n+(define_expand \"movv8hi\"\n+  [(set (match_operand:V8HI 0 \"general_operand\" \"\")\n+\t(match_operand:V8HI 1 \"general_operand\" \"\"))]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_vector_move (V8HImode, operands);\n+  DONE;\n+})\n+\n+(define_expand \"movv16qi\"\n+  [(set (match_operand:V16QI 0 \"general_operand\" \"\")\n+\t(match_operand:V16QI 1 \"general_operand\" \"\"))]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_vector_move (V16QImode, operands);\n+  DONE;\n+})\n+\n (define_expand \"movv4sf\"\n   [(set (match_operand:V4SF 0 \"general_operand\" \"\")\n \t(match_operand:V4SF 1 \"general_operand\" \"\"))]\n@@ -17961,6 +18018,39 @@\n   \"\"\n   [(set_attr \"type\" \"sse\")])\n \n+(define_insn_and_split \"*pushv2df\"\n+  [(set (match_operand:V2DF 0 \"push_operand\" \"=<\")\n+\t(match_operand:V2DF 1 \"nonmemory_operand\" \"x\"))]\n+  \"TARGET_SSE2\"\n+  \"#\"\n+  \"\"\n+  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n+   (set (mem:V2DF (reg:SI 7)) (match_dup 1))]\n+  \"\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn_and_split \"*pushv8hi\"\n+  [(set (match_operand:V8HI 0 \"push_operand\" \"=<\")\n+\t(match_operand:V8HI 1 \"nonmemory_operand\" \"x\"))]\n+  \"TARGET_SSE2\"\n+  \"#\"\n+  \"\"\n+  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n+   (set (mem:V8HI (reg:SI 7)) (match_dup 1))]\n+  \"\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn_and_split \"*pushv16qi\"\n+  [(set (match_operand:V16QI 0 \"push_operand\" \"=<\")\n+\t(match_operand:V16QI 1 \"nonmemory_operand\" \"x\"))]\n+  \"TARGET_SSE2\"\n+  \"#\"\n+  \"\"\n+  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n+   (set (mem:V16QI (reg:SI 7)) (match_dup 1))]\n+  \"\"\n+  [(set_attr \"type\" \"sse\")])\n+\n (define_insn_and_split \"*pushv4sf\"\n   [(set (match_operand:V4SF 0 \"push_operand\" \"=<\")\n \t(match_operand:V4SF 1 \"nonmemory_operand\" \"x\"))]\n@@ -18402,7 +18492,7 @@\n   \"andps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n-(define_insn \"*sse_andti3_sse2\"\n+(define_insn \"sse2_andti3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n         (and:TI (match_operand:TI 1 \"nonimmediate_operand\" \"%0\")\n \t\t(match_operand:TI 2 \"nonimmediate_operand\" \"xm\")))]\n@@ -18435,12 +18525,12 @@\n   \"andnps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n-(define_insn \"*sse_nandti3_sse2\"\n+(define_insn \"sse2_nandti3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n         (and:TI (not:TI (match_operand:TI 1 \"register_operand\" \"0\"))\n \t\t(match_operand:TI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE2\"\n-  \"pnand\\t{%2, %0|%0, %2}\"\n+  \"pandn\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"*sse_iorti3_df_1\"\n@@ -18484,7 +18574,7 @@\n   \"orps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n-(define_insn \"*sse_iorti3_sse2\"\n+(define_insn \"sse2_iorti3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n         (ior:TI (match_operand:TI 1 \"nonimmediate_operand\" \"%0\")\n \t\t(match_operand:TI 2 \"nonimmediate_operand\" \"xm\")))]\n@@ -18534,7 +18624,7 @@\n   \"xorps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n-(define_insn \"*sse_xorti3_sse2\"\n+(define_insn \"sse2_xorti3\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n         (xor:TI (match_operand:TI 1 \"nonimmediate_operand\" \"%0\")\n \t\t(match_operand:TI 2 \"nonimmediate_operand\" \"xm\")))]\n@@ -19824,3 +19914,1248 @@\n     return \"prefetchw\\t%a0\";\n }\n   [(set_attr \"type\" \"mmx\")])\n+\n+;; SSE2 support\n+\n+(define_insn \"addv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (plus:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t           (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"addpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"vmaddv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DF (plus:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t                           (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\"))\n+                        (match_dup 1)\n+\t\t\t(const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"addsd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"subv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (minus:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t           (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"subpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"vmsubv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DF (minus:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t                           (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\"))\n+                        (match_dup 1)\n+\t\t\t(const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"subsd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"mulv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (mult:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t           (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"mulpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"vmmulv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DF (mult:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t                           (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\"))\n+                        (match_dup 1)\n+\t\t\t(const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"mulsd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"divv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (div:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t          (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"divpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"vmdivv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DF (div:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t\t\t  (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\"))\n+                        (match_dup 1)\n+\t\t\t(const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"divsd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; SSE min/max\n+\n+(define_insn \"smaxv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (smax:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t   (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"maxpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"vmsmaxv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DF (smax:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t                           (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\"))\n+                        (match_dup 1)\n+\t\t\t(const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"maxsd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sminv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (smin:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t   (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"minpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"vmsminv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DF (smin:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t                           (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\"))\n+                        (match_dup 1)\n+\t\t\t(const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"minsd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_anddf3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (subreg:V2DF (and:TI (subreg:TI (match_operand:TI 1 \"register_operand\" \"%0\") 0)\n+\t\t\t     (subreg:TI (match_operand:TI 2 \"nonimmediate_operand\" \"xm\") 0)) 0))]\n+  \"TARGET_SSE2\"\n+  \"andpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_nanddf3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (subreg:V2DF (and:TI (not:TI (subreg:TI (match_operand:TI 1 \"register_operand\" \"0\") 0))\n+\t\t\t     (subreg:TI (match_operand:TI 2 \"nonimmediate_operand\" \"xm\") 0)) 0))]\n+  \"TARGET_SSE2\"\n+  \"andnpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_iordf3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (subreg:V2DF (ior:TI (subreg:TI (match_operand:TI 1 \"register_operand\" \"%0\") 0)\n+\t\t\t     (subreg:TI (match_operand:TI 2 \"nonimmediate_operand\" \"xm\") 0)) 0))]\n+  \"TARGET_SSE2\"\n+  \"orpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_xordf3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (subreg:V2DF (xor:TI (subreg:TI (match_operand:TI 1 \"register_operand\" \"%0\") 0)\n+\t\t\t     (subreg:TI (match_operand:TI 2 \"nonimmediate_operand\" \"xm\") 0)) 0))]\n+  \"TARGET_SSE2\"\n+  \"xorpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+;; SSE2 square root.  There doesn't appear to be an extension for the\n+;; reciprocal/rsqrt instructions if the Intel manual is to be believed.\n+\n+(define_insn \"sqrtv2df2\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (sqrt:V2DF (match_operand:V2DF 1 \"register_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"sqrtpd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"vmsqrtv2df2\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DF (sqrt:V2DF (match_operand:V2DF 1 \"register_operand\" \"xm\"))\n+                        (match_operand:V2DF 2 \"register_operand\" \"0\")\n+\t\t\t(const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"sqrtsd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; SSE mask-generating compares\n+\n+(define_insn \"maskcmpv2df3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+        (match_operator:V2DI 3 \"sse_comparison_operator\"\n+\t\t\t     [(match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"x\")]))]\n+  \"TARGET_SSE2\"\n+  \"cmp%D3pd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"maskncmpv2df3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+        (not:V2DI\n+\t (match_operator:V2DI 3 \"sse_comparison_operator\"\n+\t\t\t      [(match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t\t       (match_operand:V2DF 2 \"nonimmediate_operand\" \"x\")])))]\n+  \"TARGET_SSE2\"\n+  \"cmpn%D3pd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"vmmaskcmpv2df3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DI\n+\t (match_operator:V2DI 3 \"sse_comparison_operator\"\n+\t\t\t      [(match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t\t       (match_operand:V2DF 2 \"nonimmediate_operand\" \"x\")])\n+\t (match_dup 1)\n+\t (const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"cmp%D3sd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"vmmaskncmpv2df3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DI\n+\t (not:V2DI\n+\t  (match_operator:V2DI 3 \"sse_comparison_operator\"\n+\t\t\t       [(match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t\t\t(match_operand:V2DF 2 \"nonimmediate_operand\" \"x\")]))\n+\t (subreg:V2DI (match_dup 1) 0)\n+\t (const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"cmp%D3sd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_comi\"\n+  [(set (reg:CCFP 17)\n+        (match_operator:CCFP 2 \"sse_comparison_operator\"\n+\t\t\t[(vec_select:DF\n+\t\t\t  (match_operand:V2DF 0 \"register_operand\" \"x\")\n+\t\t\t  (parallel [(const_int 0)]))\n+\t\t\t (vec_select:DF\n+\t\t\t  (match_operand:V2DF 1 \"register_operand\" \"x\")\n+\t\t\t  (parallel [(const_int 0)]))]))]\n+  \"TARGET_SSE2\"\n+  \"comisd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_ucomi\"\n+  [(set (reg:CCFPU 17)\n+\t(match_operator:CCFPU 2 \"sse_comparison_operator\"\n+\t\t\t[(vec_select:DF\n+\t\t\t  (match_operand:V2DF 0 \"register_operand\" \"x\")\n+\t\t\t  (parallel [(const_int 0)]))\n+\t\t\t (vec_select:DF\n+\t\t\t  (match_operand:V2DF 1 \"register_operand\" \"x\")\n+\t\t\t  (parallel [(const_int 0)]))]))]\n+  \"TARGET_SSE2\"\n+  \"ucomisd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; SSE Strange Moves.\n+\n+(define_insn \"sse2_movmskpd\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:V2DF 1 \"register_operand\" \"x\")] 33))]\n+  \"TARGET_SSE2\"\n+  \"movmskpd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_pmovmskb\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:V16QI 1 \"register_operand\" \"x\")] 33))]\n+  \"TARGET_SSE2\"\n+  \"pmovmskb\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_maskmovdqu\"\n+  [(set (mem:V16QI (match_operand:SI 0 \"register_operand\" \"D\"))\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"x\")\n+\t\t       (match_operand:V16QI 2 \"register_operand\" \"x\")] 32))]\n+  \"TARGET_SSE2\"\n+  ;; @@@ check ordering of operands in intel/nonintel syntax\n+  \"maskmovdqu\\t{%2, %1|%1, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_movntv2df\"\n+  [(set (match_operand:V2DF 0 \"memory_operand\" \"=m\")\n+\t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"x\")] 34))]\n+  \"TARGET_SSE2\"\n+  \"movntpd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_movntti\"\n+  [(set (match_operand:TI 0 \"memory_operand\" \"=m\")\n+\t(unspec:TI [(match_operand:TI 1 \"register_operand\" \"x\")] 34))]\n+  \"TARGET_SSE2\"\n+  \"movntdq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_movntsi\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")] 34))]\n+  \"TARGET_SSE2\"\n+  \"movnti\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; SSE <-> integer/MMX conversions\n+\n+;; Conversions between SI and SF\n+\n+(define_insn \"cvtdq2ps\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+\t(float:V4SF (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"cvtdq2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvtps2dq\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(fix:V4SI (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"cvtps2dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvttps2dq\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(unspec:V4SI [(match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")] 30))]\n+  \"TARGET_SSE2\"\n+  \"cvttps2dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; Conversions between SI and DF\n+\n+(define_insn \"cvtdq2pd\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(float:V2DF (vec_select:V2SI\n+\t\t     (match_operand:V2SI 1 \"nonimmediate_operand\" \"xm\")\n+\t\t     (parallel\n+\t\t      [(const_int 0)\n+\t\t       (const_int 1)]))))]\n+  \"TARGET_SSE2\"\n+  \"cvtdq2pd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvtpd2dq\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V4SI\n+\t (fix:V2SI (match_operand:V2DF 1 \"nonimmediate_operand\" \"xm\"))\n+\t (const_vector:V2SI [(const_int 0) (const_int 0)])))]\n+  \"TARGET_SSE2\"\n+  \"cvtpd2dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvttpd2dq\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V4SI\n+\t (unspec:V2SI [(match_operand:V2DF 1 \"nonimmediate_operand\" \"xm\")] 30)\n+\t (const_vector:V2SI [(const_int 0) (const_int 0)])))]\n+  \"TARGET_SSE2\"\n+  \"cvttpd2dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvtpd2pi\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(fix:V2SI (match_operand:V2DF 1 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"cvtpd2pi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvttpd2pi\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(unspec:V2SI [(match_operand:V2DF 1 \"nonimmediate_operand\" \"xm\")] 30))]\n+  \"TARGET_SSE2\"\n+  \"cvttpd2pi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvtpi2pd\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(float:V2DF (match_operand:V2SI 1 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_SSE2\"\n+  \"cvtpi2pd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; Conversions between SI and DF\n+\n+(define_insn \"cvtsd2si\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(fix:SI (vec_select:DF (match_operand:V2DF 1 \"register_operand\" \"xm\")\n+\t\t\t       (parallel [(const_int 0)]))))]\n+  \"TARGET_SSE2\"\n+  \"cvtsd2si\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvttsd2si\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(vec_select:DF (match_operand:V2DF 1 \"register_operand\" \"xm\")\n+\t\t\t\t   (parallel [(const_int 0)]))] 30))]\n+  \"TARGET_SSE2\"\n+  \"cvttsd2si\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvtsi2sd\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t \t\t(vec_duplicate:V2DF\n+\t\t\t  (float:DF\n+\t\t\t    (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n+\t\t\t(const_int 2)))]\n+  \"TARGET_SSE2\"\n+  \"cvtsd2si\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; Conversions between SF and DF\n+\n+(define_insn \"cvtsd2ss\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V4SF (match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t \t\t(vec_duplicate:V4SF\n+\t\t\t  (float_truncate:V2SF\n+\t\t\t    (match_operand:V2DF 2 \"register_operand\" \"xm\")))\n+\t\t\t(const_int 14)))]\n+  \"TARGET_SSE2\"\n+  \"cvtsd2ss\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvtss2sd\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t \t\t(float_extend:V2DF\n+\t\t\t  (vec_select:V2SF\n+\t\t\t    (match_operand:V4SF 2 \"register_operand\" \"xm\")\n+\t\t\t    (parallel [(const_int 0)\n+\t\t\t\t       (const_int 1)])))\n+\t\t\t(const_int 2)))]\n+  \"TARGET_SSE2\"\n+  \"cvtss2sd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvtpd2ps\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+\t(subreg:V4SF\n+\t  (vec_concat:V4SI\n+\t    (subreg:V2SI (float_truncate:V2SF\n+\t\t\t   (match_operand:V2DF 1 \"nonimmediate_operand\" \"xm\")) 0)\n+\t    (const_vector:V2SI [(const_int 0) (const_int 0)])) 0))]\n+  \"TARGET_SSE2\"\n+  \"cvtpd2ps\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"cvtps2pd\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(float_extend:V2DF\n+\t  (vec_select:V2SF (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\")\n+\t\t\t   (parallel [(const_int 0)\n+\t\t\t\t      (const_int 1)]))))]\n+  \"TARGET_SSE2\"\n+  \"cvtps2pd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; SSE2 variants of MMX insns\n+\n+;; MMX arithmetic\n+\n+(define_insn \"addv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (plus:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"paddb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"addv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (plus:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t           (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"paddw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"addv4si3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+        (plus:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t           (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"paddd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"addv2di3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+        (plus:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n+\t           (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"paddq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"ssaddv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (ss_plus:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"paddsb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"ssaddv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (ss_plus:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"paddsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"usaddv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (us_plus:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"paddusb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"usaddv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (us_plus:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"paddusw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"subv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (minus:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"psubb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"subv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (minus:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"psubw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"subv4si3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+        (minus:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"psubd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"subv2di3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+        (minus:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n+\t\t    (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"psubq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sssubv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (ss_minus:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t\t(match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"psubsb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sssubv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (ss_minus:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"psubsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"ussubv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (us_minus:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t\t(match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"psubusb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"ussubv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (us_minus:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"psubusw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"mulv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (mult:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t   (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"pmullw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"smulv8hi3_highpart\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(truncate:V8HI\n+\t (lshiftrt:V8SI\n+\t  (mult:V8SI (sign_extend:V8SI (match_operand:V8HI 1 \"register_operand\" \"0\"))\n+\t\t     (sign_extend:V8SI (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))\n+\t  (const_int 16))))]\n+  \"TARGET_SSE2\"\n+  \"pmulhw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"umulv8hi3_highpart\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(truncate:V8HI\n+\t (lshiftrt:V8SI\n+\t  (mult:V8SI (zero_extend:V8SI (match_operand:V8HI 1 \"register_operand\" \"0\"))\n+\t\t     (zero_extend:V8SI (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))\n+\t  (const_int 16))))]\n+  \"TARGET_SSE2\"\n+  \"pmulhuw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; See the MMX logical operations for the reason for the unspec\n+(define_insn \"sse2_umulsidi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y\")\n+        (unspec:DI [(mult:DI (zero_extend:DI (match_operand:DI 1 \"register_operand\" \"0\"))\n+\t\t\t     (zero_extend:DI (match_operand:DI 2 \"nonimmediate_operand\" \"ym\")))] 45))]\n+  \"TARGET_SSE2\"\n+  \"pmuludq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_umulv2siv2di3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=y\")\n+        (mult:V2DI (zero_extend:V2DI\n+\t\t     (vec_select:V2SI\n+\t\t       (match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t       (parallel [(const_int 0) (const_int 2)])))\n+\t\t   (zero_extend:V2DI\n+\t\t     (vec_select:V2SI\n+\t\t       (match_operand:V4SI 2 \"nonimmediate_operand\" \"ym\")\n+\t\t       (parallel [(const_int 0) (const_int 2)])))))]\n+  \"TARGET_SSE2\"\n+  \"pmuludq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_pmaddwd\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+        (plus:V4SI\n+\t (mult:V4SI\n+\t  (sign_extend:V4SI (vec_select:V4HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t\t\t\t     (parallel [(const_int 0)\n+\t\t\t\t\t\t\t(const_int 2)\n+\t\t\t\t\t\t\t(const_int 4)\n+\t\t\t\t\t\t\t(const_int 6)])))\n+\t  (sign_extend:V4SI (vec_select:V4HI (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n+\t\t\t\t\t     (parallel [(const_int 0)\n+\t\t\t\t\t\t\t(const_int 2)\n+\t\t\t\t\t\t\t(const_int 4)\n+\t\t\t\t\t\t\t(const_int 6)]))))\n+\t (mult:V4SI\n+\t  (sign_extend:V4SI (vec_select:V4HI (match_dup 1)\n+\t\t\t\t\t     (parallel [(const_int 1)\n+\t\t\t\t\t\t\t(const_int 3)\n+\t\t\t\t\t\t\t(const_int 5)\n+\t\t\t\t\t\t\t(const_int 7)])))\n+\t  (sign_extend:V4SI (vec_select:V4HI (match_dup 2)\n+\t\t\t\t\t     (parallel [(const_int 1)\n+\t\t\t\t\t\t\t(const_int 3)\n+\t\t\t\t\t\t\t(const_int 5)\n+\t\t\t\t\t\t\t(const_int 7)]))))))]\n+  \"TARGET_SSE2\"\n+  \"pmaddwd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; Same as pxor, but don't show input operands so that we don't think\n+;; they are live.\n+(define_insn \"sse2_clrti\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"=x\") (const_int 0))]\n+  \"TARGET_SSE2\"\n+  \"pxor\\t{%0, %0|%0, %0}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; MMX unsigned averages/sum of absolute differences\n+\n+(define_insn \"sse2_uavgv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (ashiftrt:V16QI\n+\t (plus:V16QI (plus:V16QI\n+\t\t     (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:V16QI 2 \"nonimmediate_operand\" \"ym\"))\n+\t\t     (const_vector:V16QI [(const_int 1) (const_int 1)\n+\t\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t (const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"pavgb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_uavgv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (ashiftrt:V8HI\n+\t (plus:V8HI (plus:V8HI\n+\t\t     (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:V8HI 2 \"nonimmediate_operand\" \"ym\"))\n+\t\t    (const_vector:V8HI [(const_int 1) (const_int 1)\n+\t\t\t\t        (const_int 1) (const_int 1)\n+\t\t\t\t        (const_int 1) (const_int 1)\n+\t\t\t\t        (const_int 1) (const_int 1)]))\n+\t (const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"pavgw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; @@@ this isn't the right representation.\n+(define_insn \"sse2_psadbw\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (abs:V16QI (minus:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t\t\t(match_operand:V16QI 2 \"nonimmediate_operand\" \"ym\"))))]\n+  \"TARGET_SSE2\"\n+  \"psadbw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+\n+;; MMX insert/extract/shuffle\n+\n+(define_insn \"sse2_pinsrw\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (vec_merge:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t\t(vec_duplicate:V8HI\n+\t\t\t (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))\n+\t\t\t(match_operand:SI 3 \"immediate_operand\" \"i\")))]\n+  \"TARGET_SSE2\"\n+  \"pinsrw\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_pextrw\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (zero_extend:SI\n+\t  (vec_select:HI (match_operand:V8HI 1 \"register_operand\" \"x\")\n+\t\t\t (parallel\n+\t\t\t  [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n+  \"TARGET_SSE2\"\n+  \"pextrw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_pshufd\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")] 41))]\n+  \"TARGET_SSE2\"\n+  \"pshufd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_pshuflw\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")] 55))]\n+  \"TARGET_SSE2\"\n+  \"pshuflw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_pshufhw\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")] 56))]\n+  \"TARGET_SSE2\"\n+  \"pshufhw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; MMX mask-generating comparisons\n+\n+(define_insn \"eqv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (eq:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"pcmpeqb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"eqv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (eq:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"pcmpeqw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"eqv4si3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+        (eq:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"pcmpeqd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"gtv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (gt:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"pcmpgtb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"gtv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (gt:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"pcmpgtw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"gtv4si3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+        (gt:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"pcmpgtd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+\n+;; MMX max/min insns\n+\n+(define_insn \"umaxv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (umax:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t   (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"pmaxub\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"smaxv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (smax:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t   (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"pmaxsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"uminv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+        (umin:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t   (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"pminub\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sminv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (smin:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t   (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  \"TARGET_SSE2\"\n+  \"pminsw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+\n+;; MMX shifts\n+\n+(define_insn \"ashrv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (ashiftrt:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+  \"TARGET_SSE2\"\n+  \"psraw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"ashrv4si3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+        (ashiftrt:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+  \"TARGET_SSE2\"\n+  \"psrad\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"lshrv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (lshiftrt:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+  \"TARGET_SSE2\"\n+  \"psrlw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"lshrv4si3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+        (lshiftrt:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+  \"TARGET_SSE2\"\n+  \"psrld\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_lshrv2di3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+        (lshiftrt:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n+\t\t       (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+  \"TARGET_SSE2\"\n+  \"psrlq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"ashlv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+        (ashift:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+  \"TARGET_SSE2\"\n+  \"psllw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"ashlv4si3\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+        (ashift:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+  \"TARGET_SSE2\"\n+  \"pslld\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_ashlv2di3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+        (ashift:V2DI (match_operand:V2DI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:TI 2 \"nonmemory_operand\" \"xi\")))]\n+  \"TARGET_SSE2\"\n+  \"psllq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; See logical MMX insns for the reason for the unspec.  Strictly speaking\n+;; we wouldn't need here it since we never generate TImode arithmetic.\n+\n+;; There has to be some kind of prize for the weirdest new instruction...\n+(define_insn \"sse2_ashlti3\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n+        (unspec:TI\n+\t [(ashift:TI (match_operand:TI 1 \"register_operand\" \"0\")\n+\t\t     (mult:SI (match_operand:SI 2 \"immediate_operand\" \"i\")\n+\t\t\t       (const_int 8)))] 30))]\n+  \"TARGET_SSE2\"\n+  \"pslldq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_lshrti3\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n+        (unspec:TI\n+\t [(lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"0\")\n+\t\t       (mult:SI (match_operand:SI 2 \"immediate_operand\" \"i\")\n+\t\t\t\t(const_int 8)))] 30))]\n+  \"TARGET_SSE2\"\n+  \"pslrdq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; SSE unpack\n+\n+(define_insn \"sse2_unpckhpd\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V2DF\n+\t (vec_select:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t\t  (parallel [(const_int 1)]))\n+\t (vec_select:V2DF (match_operand:V2DF 2 \"register_operand\" \"x\")\n+\t\t\t  (parallel [(const_int 0)]))))]\n+  \"TARGET_SSE2\"\n+  \"unpckhpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_unpcklpd\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V2DF\n+\t (vec_select:V2DF (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t\t  (parallel [(const_int 0)]))\n+\t (vec_select:V2DF (match_operand:V2DF 2 \"register_operand\" \"x\")\n+\t\t\t  (parallel [(const_int 1)]))))]\n+  \"TARGET_SSE2\"\n+  \"unpcklpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; MMX pack/unpack insns.\n+\n+(define_insn \"sse2_packsswb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V16QI\n+\t (ss_truncate:V8QI (match_operand:V8HI 1 \"register_operand\" \"0\"))\n+\t (ss_truncate:V8QI (match_operand:V8HI 2 \"register_operand\" \"x\"))))]\n+  \"TARGET_SSE2\"\n+  \"packsswb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_packssdw\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V8HI\n+\t (ss_truncate:V4HI (match_operand:V4SI 1 \"register_operand\" \"0\"))\n+\t (ss_truncate:V4HI (match_operand:V4SI 2 \"register_operand\" \"x\"))))]\n+  \"TARGET_SSE2\"\n+  \"packssdw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_packuswb\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+\t(vec_concat:V16QI\n+\t (us_truncate:V8QI (match_operand:V8HI 1 \"register_operand\" \"0\"))\n+\t (us_truncate:V8QI (match_operand:V8HI 2 \"register_operand\" \"x\"))))]\n+  \"TARGET_SSE2\"\n+  \"packuswb\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_punpckhbw\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V16QI\n+\t (vec_select:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t\t   (parallel [(const_int 8) (const_int 0)\n+\t\t\t\t      (const_int 9) (const_int 1)\n+\t\t\t\t      (const_int 10) (const_int 2)\n+\t\t\t\t      (const_int 11) (const_int 3)\n+\t\t\t\t      (const_int 12) (const_int 4)\n+\t\t\t\t      (const_int 13) (const_int 5)\n+\t\t\t\t      (const_int 14) (const_int 6)\n+\t\t\t\t      (const_int 15) (const_int 7)]))\n+\t (vec_select:V16QI (match_operand:V16QI 2 \"register_operand\" \"x\")\n+\t\t\t   (parallel [(const_int 0) (const_int 8)\n+\t\t\t\t      (const_int 1) (const_int 9)\n+\t\t\t\t      (const_int 2) (const_int 10)\n+\t\t\t\t      (const_int 3) (const_int 11)\n+\t\t\t\t      (const_int 4) (const_int 12)\n+\t\t\t\t      (const_int 5) (const_int 13)\n+\t\t\t\t      (const_int 6) (const_int 14)\n+\t\t\t\t      (const_int 7) (const_int 15)]))\n+\t (const_int 21845)))]\n+  \"TARGET_SSE2\"\n+  \"punpckhbw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_punpckhwd\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V8HI\n+\t (vec_select:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t\t  (parallel [(const_int 4) (const_int 0)\n+\t\t\t\t     (const_int 5) (const_int 1)\n+\t\t\t\t     (const_int 6) (const_int 2)\n+\t\t\t\t     (const_int 7) (const_int 3)]))\n+\t (vec_select:V8HI (match_operand:V8HI 2 \"register_operand\" \"x\")\n+\t\t\t  (parallel [(const_int 0) (const_int 4)\n+\t\t\t\t     (const_int 1) (const_int 5)\n+\t\t\t\t     (const_int 2) (const_int 6)\n+\t\t\t\t     (const_int 3) (const_int 7)]))\n+\t (const_int 85)))]\n+  \"TARGET_SSE2\"\n+  \"punpckhwd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_punpckhdq\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V4SI\n+\t (vec_select:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t\t  (parallel [(const_int 2) (const_int 0)\n+\t\t\t\t     (const_int 3) (const_int 1)]))\n+\t (vec_select:V4SI (match_operand:V4SI 2 \"register_operand\" \"x\")\n+\t\t\t  (parallel [(const_int 0) (const_int 2)\n+\t\t\t\t     (const_int 1) (const_int 3)]))\n+\t (const_int 5)))]\n+  \"TARGET_SSE2\"\n+  \"punpckhdq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_punpcklbw\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V16QI\n+\t (vec_select:V16QI (match_operand:V16QI 1 \"register_operand\" \"0\")\n+\t\t\t   (parallel [(const_int 0) (const_int 8)\n+\t\t\t\t      (const_int 1) (const_int 9)\n+\t\t\t\t      (const_int 2) (const_int 10)\n+\t\t\t\t      (const_int 3) (const_int 11)\n+\t\t\t\t      (const_int 4) (const_int 12)\n+\t\t\t\t      (const_int 5) (const_int 13)\n+\t\t\t\t      (const_int 6) (const_int 14)\n+\t\t\t\t      (const_int 7) (const_int 15)]))\n+\t (vec_select:V16QI (match_operand:V16QI 2 \"register_operand\" \"x\")\n+\t\t\t   (parallel [(const_int 8) (const_int 0)\n+\t\t\t\t      (const_int 9) (const_int 1)\n+\t\t\t\t      (const_int 10) (const_int 2)\n+\t\t\t\t      (const_int 11) (const_int 3)\n+\t\t\t\t      (const_int 12) (const_int 4)\n+\t\t\t\t      (const_int 13) (const_int 5)\n+\t\t\t\t      (const_int 14) (const_int 6)\n+\t\t\t\t      (const_int 15) (const_int 7)]))\n+\t (const_int 21845)))]\n+  \"TARGET_SSE2\"\n+  \"punpcklbw\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_punpcklwd\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V8HI\n+\t (vec_select:V8HI (match_operand:V8HI 1 \"register_operand\" \"0\")\n+\t\t\t  (parallel [(const_int 0) (const_int 4)\n+\t\t\t\t     (const_int 1) (const_int 5)\n+\t\t\t\t     (const_int 2) (const_int 6)\n+\t\t\t\t     (const_int 3) (const_int 7)]))\n+\t (vec_select:V8HI (match_operand:V8HI 2 \"register_operand\" \"x\")\n+\t\t\t  (parallel [(const_int 4) (const_int 0)\n+\t\t\t\t     (const_int 5) (const_int 1)\n+\t\t\t\t     (const_int 6) (const_int 2)\n+\t\t\t\t     (const_int 7) (const_int 3)]))\n+\t (const_int 85)))]\n+  \"TARGET_SSE2\"\n+  \"punpcklwd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_punpckldq\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V4SI\n+\t (vec_select:V4SI (match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t\t  (parallel [(const_int 0) (const_int 2)\n+\t\t\t\t     (const_int 1) (const_int 3)]))\n+\t (vec_select:V4SI (match_operand:V4SI 2 \"register_operand\" \"x\")\n+\t\t\t  (parallel [(const_int 2) (const_int 0)\n+\t\t\t\t     (const_int 3) (const_int 1)]))\n+\t (const_int 5)))]\n+  \"TARGET_SSE2\"\n+  \"punpckldq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+;; SSE2 moves\n+\n+(define_insn \"sse2_movapd\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(unspec:V2DF [(match_operand:V2DF 1 \"general_operand\" \"xm,x\")] 38))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   movapd\\t{%1, %0|%0, %1}\n+   movapd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_movupd\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(unspec:V2DF [(match_operand:V2DF 1 \"general_operand\" \"xm,x\")] 39))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   movupd\\t{%1, %0|%0, %1}\n+   movupd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_movdqa\"\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(unspec:TI [(match_operand:TI 1 \"general_operand\" \"xm,x\")] 38))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   movdqa\\t{%1, %0|%0, %1}\n+   movdqa\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_movdqu\"\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(unspec:TI [(match_operand:TI 1 \"general_operand\" \"xm,x\")] 39))]\n+  \"TARGET_SSE2\"\n+  \"@\n+   movdqu\\t{%1, %0|%0, %1}\n+   movdqu\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_movdq2q\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=y\")\n+\t(vec_select:DI (match_operand:V2DI 1 \"general_operand\" \"x\")\n+\t\t       (parallel [(const_int 0)])))]\n+  \"TARGET_SSE2\"\n+  \"movdq2q\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_movq2dq\"\n+  [(set (match_operand:V2DI 0 \"nonimmediate_operand\" \"=x\")\n+\t(vec_concat:V2DI (match_operand:DI 1 \"general_operand\" \"y\")\n+\t\t\t (const_vector:DI [(const_int 0)])))]\n+  \"TARGET_SSE2\"\n+  \"movq2dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_movhpd\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(vec_merge:V2DF\n+\t (match_operand:V2DF 1 \"nonimmediate_operand\" \"0,0\")\n+\t (match_operand:V2DF 2 \"nonimmediate_operand\" \"m,x\")\n+\t (const_int 2)))]\n+  \"TARGET_SSE2 && (GET_CODE (operands[1]) == MEM || GET_CODE (operands[2]) == MEM)\"\n+  \"movhpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_movlpd\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(vec_merge:V2DF\n+\t (match_operand:V2DF 1 \"nonimmediate_operand\" \"0,0\")\n+\t (match_operand:V2DF 2 \"nonimmediate_operand\" \"m,x\")\n+\t (const_int 1)))]\n+  \"TARGET_SSE2 && (GET_CODE (operands[1]) == MEM || GET_CODE (operands[2]) == MEM)\"\n+  \"movlpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_loadsd\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DF\n+\t (match_operand:DF 1 \"memory_operand\" \"m\")\n+\t (vec_duplicate:DF (float:DF (const_int 0)))\n+\t (const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"movsd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_movsd\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(vec_merge:V2DF\n+\t (match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t (match_operand:V2DF 2 \"register_operand\" \"x\")\n+\t (const_int 1)))]\n+  \"TARGET_SSE2\"\n+  \"movsd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_storesd\"\n+  [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n+\t(vec_select:DF\n+\t (match_operand:V2DF 1 \"register_operand\" \"x\")\n+\t (parallel [(const_int 0)])))]\n+  \"TARGET_SSE2\"\n+  \"movsd\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_shufpd\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+        (unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")\n+\t\t      (match_operand:SI 3 \"immediate_operand\" \"i\")] 41))]\n+  \"TARGET_SSE2\"\n+  ;; @@@ check operand order for intel/nonintel syntax\n+  \"shufpd\\t{%3, %2, %0|%0, %2, %3}\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_insn \"sse2_clflush\"\n+  [(unspec_volatile [(match_operand:SI 0 \"address_operand\" \"p\")] 57)]\n+  \"TARGET_SSE2\"\n+  \"clflush %0\"\n+  [(set_attr \"type\" \"sse\")])\n+\n+(define_expand \"sse2_mfence\"\n+  [(set (match_dup 0)\n+\t(unspec:BLK [(match_dup 0)] 59))]\n+  \"TARGET_SSE2\"\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+})\n+\n+(define_insn \"*mfence_insn\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_dup 0)] 59))]\n+  \"TARGET_SSE2\"\n+  \"mfence\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"memory\" \"unknown\")])\n+\n+(define_expand \"sse2_lfence\"\n+  [(set (match_dup 0)\n+\t(unspec:BLK [(match_dup 0)] 60))]\n+  \"TARGET_SSE2\"\n+{\n+  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[0]) = 1;\n+})\n+\n+(define_insn \"*lfence_insn\"\n+  [(set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_dup 0)] 60))]\n+  \"TARGET_SSE2\"\n+  \"lfence\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"memory\" \"unknown\")])"}, {"sha": "6f59026ab409b048903c0731e976436eda97618c", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fbe5eb6d0a582e04aadb53f6a024d5af17f0baad", "patch": "@@ -4764,6 +4764,8 @@ build_common_tree_nodes_2 (short_double)\n     = make_vector (V4SImode, unsigned_intSI_type_node, 1);\n   unsigned_V2SI_type_node\n     = make_vector (V2SImode, unsigned_intSI_type_node, 1);\n+  unsigned_V2DI_type_node\n+    = make_vector (V2DImode, unsigned_intDI_type_node, 1);\n   unsigned_V4HI_type_node\n     = make_vector (V4HImode, unsigned_intHI_type_node, 1);\n   unsigned_V8QI_type_node\n@@ -4777,10 +4779,12 @@ build_common_tree_nodes_2 (short_double)\n   V4SF_type_node = make_vector (V4SFmode, float_type_node, 0);\n   V4SI_type_node = make_vector (V4SImode, intSI_type_node, 0);\n   V2SI_type_node = make_vector (V2SImode, intSI_type_node, 0);\n+  V2DI_type_node = make_vector (V2DImode, intDI_type_node, 0);\n   V4HI_type_node = make_vector (V4HImode, intHI_type_node, 0);\n   V8QI_type_node = make_vector (V8QImode, intQI_type_node, 0);\n   V8HI_type_node = make_vector (V8HImode, intHI_type_node, 0);\n   V2SF_type_node = make_vector (V2SFmode, float_type_node, 0);\n+  V2DF_type_node = make_vector (V2DFmode, double_type_node, 0);\n   V16QI_type_node = make_vector (V16QImode, intQI_type_node, 0);\n }\n "}, {"sha": "2d955187466de3d49b345ff1e82962b192fcbe0c", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe5eb6d0a582e04aadb53f6a024d5af17f0baad/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fbe5eb6d0a582e04aadb53f6a024d5af17f0baad", "patch": "@@ -1928,6 +1928,7 @@ enum tree_index\n   TI_UV4HI_TYPE,\n   TI_UV2SI_TYPE,\n   TI_UV2SF_TYPE,\n+  TI_UV2DI_TYPE,\n   TI_UV16QI_TYPE,\n \n   TI_V4SF_TYPE,\n@@ -1938,6 +1939,8 @@ enum tree_index\n   TI_V4HI_TYPE,\n   TI_V2SI_TYPE,\n   TI_V2SF_TYPE,\n+  TI_V2DF_TYPE,\n+  TI_V2DI_TYPE,\n   TI_V16QI_TYPE,\n \n   TI_MAIN_IDENTIFIER,\n@@ -2005,6 +2008,7 @@ extern tree global_trees[TI_MAX];\n #define unsigned_V8HI_type_node\t\tglobal_trees[TI_UV8HI_TYPE]\n #define unsigned_V4HI_type_node\t\tglobal_trees[TI_UV4HI_TYPE]\n #define unsigned_V2SI_type_node\t\tglobal_trees[TI_UV2SI_TYPE]\n+#define unsigned_V2DI_type_node\t\tglobal_trees[TI_UV2DI_TYPE]\n \n #define V16QI_type_node\t\t\tglobal_trees[TI_V16QI_TYPE]\n #define V4SF_type_node\t\t\tglobal_trees[TI_V4SF_TYPE]\n@@ -2014,6 +2018,8 @@ extern tree global_trees[TI_MAX];\n #define V4HI_type_node\t\t\tglobal_trees[TI_V4HI_TYPE]\n #define V2SI_type_node\t\t\tglobal_trees[TI_V2SI_TYPE]\n #define V2SF_type_node\t\t\tglobal_trees[TI_V2SF_TYPE]\n+#define V2DI_type_node\t\t\tglobal_trees[TI_V2DI_TYPE]\n+#define V2DF_type_node\t\t\tglobal_trees[TI_V2DF_TYPE]\n #define V16SF_type_node\t\t\tglobal_trees[TI_V16SF_TYPE]\n \n /* An enumeration of the standard C integer types.  These must be"}]}