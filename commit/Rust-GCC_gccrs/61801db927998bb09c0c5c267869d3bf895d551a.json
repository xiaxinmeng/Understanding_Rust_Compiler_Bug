{"sha": "61801db927998bb09c0c5c267869d3bf895d551a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4MDFkYjkyNzk5OGJiMDljMGM1YzI2Nzg2OWQzYmY4OTVkNTUxYQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-07-26T10:44:25Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-07-26T10:44:25Z"}, "message": "add a constructor to elim_graph\n\ngcc/ChangeLog:\n\n2016-07-26  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* tree-outof-ssa.c (struct elim_graph): Change type of members\n\tto auto_vec and auto_sbitmap.\n\t(elim_graph::elim_graph): New constructor.\n\t(delete_elim_graph): Remove.\n\t(expand_phi_nodes): Adjust.\n\nFrom-SVN: r238750", "tree": {"sha": "9451504159b3c1b06c6fc8018482b12686923ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9451504159b3c1b06c6fc8018482b12686923ac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61801db927998bb09c0c5c267869d3bf895d551a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61801db927998bb09c0c5c267869d3bf895d551a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61801db927998bb09c0c5c267869d3bf895d551a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61801db927998bb09c0c5c267869d3bf895d551a/comments", "author": null, "committer": null, "parents": [{"sha": "c8b1ebd997bf119a89f38d47e4d63153de3d7e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b1ebd997bf119a89f38d47e4d63153de3d7e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b1ebd997bf119a89f38d47e4d63153de3d7e66"}], "stats": {"total": 72, "additions": 24, "deletions": 48}, "files": [{"sha": "dca0e9fb1640352d4116fb4f33bde748333b9cf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61801db927998bb09c0c5c267869d3bf895d551a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61801db927998bb09c0c5c267869d3bf895d551a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61801db927998bb09c0c5c267869d3bf895d551a", "patch": "@@ -1,3 +1,11 @@\n+2016-07-26  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* tree-outof-ssa.c (struct elim_graph): Change type of members\n+\tto auto_vec and auto_sbitmap.\n+\t(elim_graph::elim_graph): New constructor.\n+\t(delete_elim_graph): Remove.\n+\t(expand_phi_nodes): Adjust.\n+\n 2016-07-26  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* tree-outof-ssa.c (struct elim_graph): Remove typedef."}, {"sha": "be57ce4e24278462b47191b5d14010f6bacc66e4", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 16, "deletions": 48, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61801db927998bb09c0c5c267869d3bf895d551a/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61801db927998bb09c0c5c267869d3bf895d551a/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=61801db927998bb09c0c5c267869d3bf895d551a", "patch": "@@ -128,23 +128,25 @@ ssa_is_replaceable_p (gimple *stmt)\n \n struct elim_graph\n {\n+  elim_graph (var_map map);\n+\n   /* Size of the elimination vectors.  */\n   int size;\n \n   /* List of nodes in the elimination graph.  */\n-  vec<int> nodes;\n+  auto_vec<int> nodes;\n \n   /*  The predecessor and successor edge list.  */\n-  vec<int> edge_list;\n+  auto_vec<int> edge_list;\n \n   /* Source locus on each edge */\n-  vec<source_location> edge_locus;\n+  auto_vec<source_location> edge_locus;\n \n   /* Visited vector.  */\n-  sbitmap visited;\n+  auto_sbitmap visited;\n \n   /* Stack for visited nodes.  */\n-  vec<int> stack;\n+  auto_vec<int> stack;\n \n   /* The variable partition map.  */\n   var_map map;\n@@ -153,11 +155,11 @@ struct elim_graph\n   edge e;\n \n   /* List of constant copies to emit.  These are pushed on in pairs.  */\n-  vec<int> const_dests;\n-  vec<tree> const_copies;\n+  auto_vec<int> const_dests;\n+  auto_vec<tree> const_copies;\n \n   /* Source locations for any constant copies.  */\n-  vec<source_location> copy_locus;\n+  auto_vec<source_location> copy_locus;\n };\n \n \n@@ -392,25 +394,12 @@ insert_part_to_rtx_on_edge (edge e, rtx dest, int src, source_location locus)\n }\n \n \n-/* Create an elimination graph with SIZE nodes and associated data\n-   structures.  */\n+/* Create an elimination graph for map.  */\n \n-static elim_graph *\n-new_elim_graph (int size)\n+elim_graph::elim_graph (var_map map) :\n+  nodes (30), edge_list (20), edge_locus (10), visited (map->num_partitions),\n+  stack (30), map (map), const_dests (20), const_copies (20), copy_locus (10)\n {\n-  elim_graph *g = (elim_graph *) xmalloc (sizeof (struct elim_graph));\n-\n-  g->nodes.create (30);\n-  g->const_dests.create (20);\n-  g->const_copies.create (20);\n-  g->copy_locus.create (10);\n-  g->edge_list.create (20);\n-  g->edge_locus.create (10);\n-  g->stack.create (30);\n-\n-  g->visited = sbitmap_alloc (size);\n-\n-  return g;\n }\n \n \n@@ -425,24 +414,6 @@ clear_elim_graph (elim_graph *g)\n }\n \n \n-/* Delete elimination graph G.  */\n-\n-static inline void\n-delete_elim_graph (elim_graph *g)\n-{\n-  sbitmap_free (g->visited);\n-  g->stack.release ();\n-  g->edge_list.release ();\n-  g->const_copies.release ();\n-  g->const_dests.release ();\n-  g->nodes.release ();\n-  g->copy_locus.release ();\n-  g->edge_locus.release ();\n-\n-  free (g);\n-}\n-\n-\n /* Return the number of nodes in graph G.  */\n \n static inline int\n@@ -925,8 +896,7 @@ void\n expand_phi_nodes (struct ssaexpand *sa)\n {\n   basic_block bb;\n-  elim_graph *g = new_elim_graph (sa->map->num_partitions);\n-  g->map = sa->map;\n+  elim_graph g (sa->map);\n \n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR_FOR_FN (cfun)->next_bb,\n \t\t  EXIT_BLOCK_PTR_FOR_FN (cfun), next_bb)\n@@ -935,7 +905,7 @@ expand_phi_nodes (struct ssaexpand *sa)\n \tedge e;\n \tedge_iterator ei;\n \tFOR_EACH_EDGE (e, ei, bb->preds)\n-\t  eliminate_phi (e, g);\n+\t  eliminate_phi (e, &g);\n \tset_phi_nodes (bb, NULL);\n \t/* We can't redirect EH edges in RTL land, so we need to do this\n \t   here.  Redirection happens only when splitting is necessary,\n@@ -961,8 +931,6 @@ expand_phi_nodes (struct ssaexpand *sa)\n \t      ei_next (&ei);\n \t  }\n       }\n-\n-  delete_elim_graph (g);\n }\n \n "}]}