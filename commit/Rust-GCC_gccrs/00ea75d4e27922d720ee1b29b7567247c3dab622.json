{"sha": "00ea75d4e27922d720ee1b29b7567247c3dab622", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBlYTc1ZDRlMjc5MjJkNzIwZWUxYjI5Yjc1NjcyNDdjM2RhYjYyMg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-06-08T10:14:30Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-06-08T10:14:30Z"}, "message": "[AArch64, 4/6] Reimplement frsqrts intrinsics\n\n\t* config/aarch64/aarch64-builtins.def (rsqrts): New builtins for modes\n\tVALLF.\n\t* config/aarch64/aarch64-simd.md (aarch64_rsqrts_<mode>3): Rename to\n\t\"aarch64_rsqrts<mode>\".\n\t* config/aarch64/aarch64.c (get_rsqrts_type): Update gen* name.\n\t* config/aarch64/arm_neon.h (vrsqrtss_f32): Remove inline assembly.  Use\n\tbuiltin.\n\t(vrsqrtsd_f64): Likewise.\n\t(vrsqrts_f32): Likewise.\n\t(vrsqrts_f64): Likewise.\n\t(vrsqrtsq_f32): Likewise.\n\t(vrsqrtsq_f64): Likewise.\n\nFrom-SVN: r237203", "tree": {"sha": "ad0a4d6457db53aac566f02a7ec6b1e4fda5e622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad0a4d6457db53aac566f02a7ec6b1e4fda5e622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00ea75d4e27922d720ee1b29b7567247c3dab622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00ea75d4e27922d720ee1b29b7567247c3dab622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00ea75d4e27922d720ee1b29b7567247c3dab622", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00ea75d4e27922d720ee1b29b7567247c3dab622/comments", "author": null, "committer": null, "parents": [{"sha": "2a82343319495a4219f1f460bfa4e609c047099a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a82343319495a4219f1f460bfa4e609c047099a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a82343319495a4219f1f460bfa4e609c047099a"}], "stats": {"total": 124, "additions": 63, "deletions": 61}, "files": [{"sha": "018948150985ef5a74c10700a6c8456c9905521d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ea75d4e27922d720ee1b29b7567247c3dab622/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ea75d4e27922d720ee1b29b7567247c3dab622/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00ea75d4e27922d720ee1b29b7567247c3dab622", "patch": "@@ -1,3 +1,18 @@\n+2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.def (rsqrts): New builtins for modes\n+\tVALLF.\n+\t* config/aarch64/aarch64-simd.md (aarch64_rsqrts_<mode>3): Rename to\n+\t\"aarch64_rsqrts<mode>\".\n+\t* config/aarch64/aarch64.c (get_rsqrts_type): Update gen* name.\n+\t* config/aarch64/arm_neon.h (vrsqrtss_f32): Remove inline assembly.  Use\n+\tbuiltin.\n+\t(vrsqrtsd_f64): Likewise.\n+\t(vrsqrts_f32): Likewise.\n+\t(vrsqrts_f64): Likewise.\n+\t(vrsqrtsq_f32): Likewise.\n+\t(vrsqrtsq_f64): Likewise.\n+\n 2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-builtins.def (rsqrte): New builtins for modes"}, {"sha": "e839a59434b0cc6883d94d5f64189e1681977a9e", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ea75d4e27922d720ee1b29b7567247c3dab622/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ea75d4e27922d720ee1b29b7567247c3dab622/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=00ea75d4e27922d720ee1b29b7567247c3dab622", "patch": "@@ -454,3 +454,6 @@\n \n   /* Implemented by aarch64_rsqrte<mode>.  */\n   BUILTIN_VALLF (UNOP, rsqrte, 0)\n+\n+  /* Implemented by aarch64_rsqrts<mode>.  */\n+  BUILTIN_VALLF (BINOP, rsqrts, 0)"}, {"sha": "117cde98120295c2180a110c6cf5634b7b0de75a", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ea75d4e27922d720ee1b29b7567247c3dab622/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ea75d4e27922d720ee1b29b7567247c3dab622/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=00ea75d4e27922d720ee1b29b7567247c3dab622", "patch": "@@ -390,7 +390,7 @@\n   \"frsqrte\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>\"\n   [(set_attr \"type\" \"neon_fp_rsqrte_<Vetype><q>\")])\n \n-(define_insn \"aarch64_rsqrts_<mode>3\"\n+(define_insn \"aarch64_rsqrts<mode>\"\n   [(set (match_operand:VALLF 0 \"register_operand\" \"=w\")\n \t(unspec:VALLF [(match_operand:VALLF 1 \"register_operand\" \"w\")\n \t       (match_operand:VALLF 2 \"register_operand\" \"w\")]"}, {"sha": "b60e5c52df6310a87635c523d723eee9768d7aef", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ea75d4e27922d720ee1b29b7567247c3dab622/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ea75d4e27922d720ee1b29b7567247c3dab622/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=00ea75d4e27922d720ee1b29b7567247c3dab622", "patch": "@@ -7368,11 +7368,11 @@ get_rsqrts_type (machine_mode mode)\n {\n   switch (mode)\n   {\n-    case DFmode:   return gen_aarch64_rsqrts_df3;\n-    case SFmode:   return gen_aarch64_rsqrts_sf3;\n-    case V2DFmode: return gen_aarch64_rsqrts_v2df3;\n-    case V2SFmode: return gen_aarch64_rsqrts_v2sf3;\n-    case V4SFmode: return gen_aarch64_rsqrts_v4sf3;\n+    case DFmode:   return gen_aarch64_rsqrtsdf;\n+    case SFmode:   return gen_aarch64_rsqrtssf;\n+    case V2DFmode: return gen_aarch64_rsqrtsv2df;\n+    case V2SFmode: return gen_aarch64_rsqrtsv2sf;\n+    case V4SFmode: return gen_aarch64_rsqrtsv4sf;\n     default: gcc_unreachable ();\n   }\n }"}, {"sha": "72db325534e68f7936f9c25bf74cd64279349539", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 39, "deletions": 55, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00ea75d4e27922d720ee1b29b7567247c3dab622/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00ea75d4e27922d720ee1b29b7567247c3dab622/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=00ea75d4e27922d720ee1b29b7567247c3dab622", "patch": "@@ -9185,61 +9185,6 @@ vrsqrteq_u32 (uint32x4_t a)\n   return result;\n }\n \n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vrsqrts_f32 (float32x2_t a, float32x2_t b)\n-{\n-  float32x2_t result;\n-  __asm__ (\"frsqrts %0.2s,%1.2s,%2.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vrsqrtsd_f64 (float64_t a, float64_t b)\n-{\n-  float64_t result;\n-  __asm__ (\"frsqrts %d0,%d1,%d2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vrsqrtsq_f32 (float32x4_t a, float32x4_t b)\n-{\n-  float32x4_t result;\n-  __asm__ (\"frsqrts %0.4s,%1.4s,%2.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vrsqrtsq_f64 (float64x2_t a, float64x2_t b)\n-{\n-  float64x2_t result;\n-  __asm__ (\"frsqrts %0.2d,%1.2d,%2.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vrsqrtss_f32 (float32_t a, float32_t b)\n-{\n-  float32_t result;\n-  __asm__ (\"frsqrts %s0,%s1,%s2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n #define vshrn_high_n_s16(a, b, c)                                       \\\n   __extension__                                                         \\\n     ({                                                                  \\\n@@ -21476,6 +21421,45 @@ vrsqrteq_f64 (float64x2_t __a)\n   return __builtin_aarch64_rsqrtev2df (__a);\n }\n \n+/* vrsqrts.  */\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vrsqrtss_f32 (float32_t __a, float32_t __b)\n+{\n+  return __builtin_aarch64_rsqrtssf (__a, __b);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vrsqrtsd_f64 (float64_t __a, float64_t __b)\n+{\n+  return __builtin_aarch64_rsqrtsdf (__a, __b);\n+}\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrsqrts_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return __builtin_aarch64_rsqrtsv2sf (__a, __b);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vrsqrts_f64 (float64x1_t __a, float64x1_t __b)\n+{\n+  return (float64x1_t) {vrsqrtsd_f64 (vget_lane_f64 (__a, 0),\n+\t\t\t\t      vget_lane_f64 (__b, 0))};\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrsqrtsq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return __builtin_aarch64_rsqrtsv4sf (__a, __b);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vrsqrtsq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return __builtin_aarch64_rsqrtsv2df (__a, __b);\n+}\n+\n /* vrsra */\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))"}]}