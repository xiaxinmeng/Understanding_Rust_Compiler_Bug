{"sha": "92695fbb294bf7fe051041e3143f51c37cc22f82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI2OTVmYmIyOTRiZjdmZTA1MTA0MWUzMTQzZjUxYzM3Y2MyMmY4Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-08-20T19:04:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-08-20T19:04:34Z"}, "message": "rtl.h (rtvec_all_equal_p): Declare.\n\ngcc/\n\t* rtl.h (rtvec_all_equal_p): Declare.\n\t(const_vec_duplicate_p, unwrap_const_vec_duplicate): New functions.\n\t* rtl.c (rtvec_all_equal_p): New function.\n\t* expmed.c (expand_mult): Use unwrap_const_vec_duplicate.\n\t* config/aarch64/aarch64.c (aarch64_vect_float_const_representable_p)\n\t(aarch64_simd_dup_constant): Use const_vec_duplicate_p.\n\t* config/arm/arm.c (neon_vdup_constant): Likewise.\n\t* config/s390/s390.c (s390_contiguous_bitmask_vector_p): Likewise.\n\t* config/tilegx/constraints.md (W, Y): Likewise.\n\t* config/tilepro/constraints.md (W, Y): Likewise.\n\t* config/spu/spu.c (spu_legitimate_constant_p): Likewise.\n\t(classify_immediate): Use unwrap_const_vec_duplicate.\n\t* config/tilepro/predicates.md (reg_or_v4s8bit_operand): Likewise.\n\t(reg_or_v2s8bit_operand): Likewise.\n\t* config/tilegx/predicates.md (reg_or_v8s8bit_operand): Likewise.\n\t(reg_or_v4s8bit_operand): Likewise.\n\nFrom-SVN: r227041", "tree": {"sha": "88a816e3cb8340cc79bfdf29195dc3a1e20fd9e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88a816e3cb8340cc79bfdf29195dc3a1e20fd9e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92695fbb294bf7fe051041e3143f51c37cc22f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92695fbb294bf7fe051041e3143f51c37cc22f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92695fbb294bf7fe051041e3143f51c37cc22f82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92695fbb294bf7fe051041e3143f51c37cc22f82/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c629c24604222d7b3a8e6c8a5010f4f3d2a1b1a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c629c24604222d7b3a8e6c8a5010f4f3d2a1b1a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c629c24604222d7b3a8e6c8a5010f4f3d2a1b1a6"}], "stats": {"total": 224, "additions": 109, "deletions": 115}, "files": [{"sha": "42abb92f7ff09835f5bc62be51f381a2cac79542", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -1,3 +1,22 @@\n+2015-08-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (rtvec_all_equal_p): Declare.\n+\t(const_vec_duplicate_p, unwrap_const_vec_duplicate): New functions.\n+\t* rtl.c (rtvec_all_equal_p): New function.\n+\t* expmed.c (expand_mult): Use unwrap_const_vec_duplicate.\n+\t* config/aarch64/aarch64.c (aarch64_vect_float_const_representable_p)\n+\t(aarch64_simd_dup_constant): Use const_vec_duplicate_p.\n+\t* config/arm/arm.c (neon_vdup_constant): Likewise.\n+\t* config/s390/s390.c (s390_contiguous_bitmask_vector_p): Likewise.\n+\t* config/tilegx/constraints.md (W, Y): Likewise.\n+\t* config/tilepro/constraints.md (W, Y): Likewise.\n+\t* config/spu/spu.c (spu_legitimate_constant_p): Likewise.\n+\t(classify_immediate): Use unwrap_const_vec_duplicate.\n+\t* config/tilepro/predicates.md (reg_or_v4s8bit_operand): Likewise.\n+\t(reg_or_v2s8bit_operand): Likewise.\n+\t* config/tilegx/predicates.md (reg_or_v8s8bit_operand): Likewise.\n+\t(reg_or_v4s8bit_operand): Likewise.\n+\n 2015-08-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/altivec.h (vec_pmsum_be): New #define."}, {"sha": "0eabf5dcbaa40c8397e6043e18f03c93354411ee", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 40, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -9867,31 +9867,10 @@ sizetochar (int size)\n static bool\n aarch64_vect_float_const_representable_p (rtx x)\n {\n-  int i = 0;\n-  REAL_VALUE_TYPE r0, ri;\n-  rtx x0, xi;\n-\n-  if (GET_MODE_CLASS (GET_MODE (x)) != MODE_VECTOR_FLOAT)\n-    return false;\n-\n-  x0 = CONST_VECTOR_ELT (x, 0);\n-  if (!CONST_DOUBLE_P (x0))\n-    return false;\n-\n-  REAL_VALUE_FROM_CONST_DOUBLE (r0, x0);\n-\n-  for (i = 1; i < CONST_VECTOR_NUNITS (x); i++)\n-    {\n-      xi = CONST_VECTOR_ELT (x, i);\n-      if (!CONST_DOUBLE_P (xi))\n-\treturn false;\n-\n-      REAL_VALUE_FROM_CONST_DOUBLE (ri, xi);\n-      if (!REAL_VALUES_EQUAL (r0, ri))\n-\treturn false;\n-    }\n-\n-  return aarch64_float_const_representable_p (x0);\n+  rtx elt;\n+  return (GET_MODE_CLASS (GET_MODE (x)) == MODE_VECTOR_FLOAT\n+\t  && const_vec_duplicate_p (x, &elt)\n+\t  && aarch64_float_const_representable_p (elt));\n }\n \n /* Return true for valid and false for invalid.  */\n@@ -10354,28 +10333,15 @@ aarch64_simd_dup_constant (rtx vals)\n {\n   machine_mode mode = GET_MODE (vals);\n   machine_mode inner_mode = GET_MODE_INNER (mode);\n-  int n_elts = GET_MODE_NUNITS (mode);\n-  bool all_same = true;\n   rtx x;\n-  int i;\n-\n-  if (GET_CODE (vals) != CONST_VECTOR)\n-    return NULL_RTX;\n-\n-  for (i = 1; i < n_elts; ++i)\n-    {\n-      x = CONST_VECTOR_ELT (vals, i);\n-      if (!rtx_equal_p (x, CONST_VECTOR_ELT (vals, 0)))\n-\tall_same = false;\n-    }\n \n-  if (!all_same)\n+  if (!const_vec_duplicate_p (vals, &x))\n     return NULL_RTX;\n \n   /* We can load this constant by using DUP and a constant in a\n      single ARM register.  This will be cheaper than a vector\n      load.  */\n-  x = copy_to_mode_reg (inner_mode, CONST_VECTOR_ELT (vals, 0));\n+  x = copy_to_mode_reg (inner_mode, x);\n   return gen_rtx_VEC_DUPLICATE (mode, x);\n }\n "}, {"sha": "c2095a32a64096b7bf82876d2c70e607a6f38d2f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -12607,22 +12607,12 @@ neon_vdup_constant (rtx vals)\n {\n   machine_mode mode = GET_MODE (vals);\n   machine_mode inner_mode = GET_MODE_INNER (mode);\n-  int n_elts = GET_MODE_NUNITS (mode);\n-  bool all_same = true;\n   rtx x;\n-  int i;\n \n   if (GET_CODE (vals) != CONST_VECTOR || GET_MODE_SIZE (inner_mode) > 4)\n     return NULL_RTX;\n \n-  for (i = 0; i < n_elts; ++i)\n-    {\n-      x = XVECEXP (vals, 0, i);\n-      if (i > 0 && !rtx_equal_p (x, XVECEXP (vals, 0, 0)))\n-\tall_same = false;\n-    }\n-\n-  if (!all_same)\n+  if (!const_vec_duplicate_p (vals, &x))\n     /* The elements are not all the same.  We could handle repeating\n        patterns of a mode larger than INNER_MODE here (e.g. int8x8_t\n        {0, C, 0, C, 0, C, 0, C} which can be loaded using\n@@ -12633,7 +12623,7 @@ neon_vdup_constant (rtx vals)\n      single ARM register.  This will be cheaper than a vector\n      load.  */\n \n-  x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, 0));\n+  x = copy_to_mode_reg (inner_mode, x);\n   return gen_rtx_VEC_DUPLICATE (mode, x);\n }\n "}, {"sha": "54b6b7d5859f4d47ca9eeea4d27dfe4732b80052", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -2258,23 +2258,14 @@ s390_contiguous_bitmask_vector_p (rtx op, int *start, int *end)\n {\n   unsigned HOST_WIDE_INT mask;\n   int length, size;\n+  rtx elt;\n \n-  if (!VECTOR_MODE_P (GET_MODE (op))\n-      || GET_CODE (op) != CONST_VECTOR\n-      || !CONST_INT_P (XVECEXP (op, 0, 0)))\n+  if (!const_vec_duplicate_p (op, &elt)\n+      || !CONST_INT_P (elt))\n     return false;\n \n-  if (GET_MODE_NUNITS (GET_MODE (op)) > 1)\n-    {\n-      int i;\n-\n-      for (i = 1; i < GET_MODE_NUNITS (GET_MODE (op)); ++i)\n-\tif (!rtx_equal_p (XVECEXP (op, 0, i), XVECEXP (op, 0, 0)))\n-\t  return false;\n-    }\n-\n   size = GET_MODE_UNIT_BITSIZE (GET_MODE (op));\n-  mask = UINTVAL (XVECEXP (op, 0, 0));\n+  mask = UINTVAL (elt);\n   if (s390_contiguous_bitmask_p (mask, size, start,\n \t\t\t\t end != NULL ? &length : NULL))\n     {"}, {"sha": "05c81f5ed733b3ada37a1cf3729e5e71660155b4", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -3185,11 +3185,8 @@ classify_immediate (rtx op, machine_mode mode)\n       && mode == V4SImode\n       && GET_CODE (op) == CONST_VECTOR\n       && GET_CODE (CONST_VECTOR_ELT (op, 0)) != CONST_INT\n-      && GET_CODE (CONST_VECTOR_ELT (op, 0)) != CONST_DOUBLE\n-      && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 1)\n-      && CONST_VECTOR_ELT (op, 1) == CONST_VECTOR_ELT (op, 2)\n-      && CONST_VECTOR_ELT (op, 2) == CONST_VECTOR_ELT (op, 3))\n-    op = CONST_VECTOR_ELT (op, 0);\n+      && GET_CODE (CONST_VECTOR_ELT (op, 0)) != CONST_DOUBLE)\n+    op = unwrap_const_vec_duplicate (op);\n \n   switch (GET_CODE (op))\n     {\n@@ -3507,9 +3504,7 @@ spu_legitimate_constant_p (machine_mode mode, rtx x)\n       && (GET_CODE (CONST_VECTOR_ELT (x, 0)) == SYMBOL_REF\n \t  || GET_CODE (CONST_VECTOR_ELT (x, 0)) == LABEL_REF\n \t  || GET_CODE (CONST_VECTOR_ELT (x, 0)) == CONST))\n-    return CONST_VECTOR_ELT (x, 0) == CONST_VECTOR_ELT (x, 1)\n-\t   && CONST_VECTOR_ELT (x, 1) == CONST_VECTOR_ELT (x, 2)\n-\t   && CONST_VECTOR_ELT (x, 2) == CONST_VECTOR_ELT (x, 3);\n+    return const_vec_duplicate_p (x);\n \n   if (GET_CODE (x) == CONST_VECTOR\n       && !const_vector_immediate_p (x))"}, {"sha": "f47d0f682963215f37b90883fda9c87a792d06cf", "filename": "gcc/config/tilegx/constraints.md", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Ftilegx%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Ftilegx%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Fconstraints.md?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -96,21 +96,14 @@\n   \"An 8-element vector constant with identical elements\"\n   (and (match_code \"const_vector\")\n        (match_test \"CONST_VECTOR_NUNITS (op) == 8\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 1)\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 2)\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 3)\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 4)\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 5)\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 6)\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 7)\")))\n+       (match_test \"const_vec_duplicate_p (op)\")))\n \n (define_constraint \"Y\"\n   \"A 4-element vector constant with identical elements\"\n   (and (match_code \"const_vector\")\n        (match_test \"CONST_VECTOR_NUNITS (op) == 4\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 1)\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 2)\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 3)\")))\n+       (match_test \"const_vec_duplicate_p (op)\")))\n+\n (define_constraint \"Z0\"\n  \"The integer constant 0xffffffff\"\n  (and (match_code \"const_int\")"}, {"sha": "ce04660f9edff79fbe156696499da0a74614afe6", "filename": "gcc/config/tilegx/predicates.md", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Ftilegx%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Ftilegx%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Fpredicates.md?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -112,25 +112,17 @@\n   (ior (match_operand 0 \"register_operand\")\n        (and (match_code \"const_vector\")\n \t    (match_test \"CONST_VECTOR_NUNITS (op) == 8\n-                         && satisfies_constraint_I (CONST_VECTOR_ELT (op, 0))\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 1)\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 2)\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 3)\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 4)\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 5)\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 6)\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 7)\"))))\n+                         && (satisfies_constraint_I\n+\t\t\t     (unwrap_const_vec_duplicate (op)))\"))))\n \n ;; Return 1 if OP is a 4-element vector constant with identical signed\n ;; 8-bit elements or any register.\n (define_predicate \"reg_or_v4s8bit_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (and (match_code \"const_vector\")\n \t    (match_test \"CONST_VECTOR_NUNITS (op) == 4\n-                         && satisfies_constraint_I (CONST_VECTOR_ELT (op, 0))\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 1)\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 2)\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 3)\"))))\n+                         && (satisfies_constraint_I\n+\t\t\t     (unwrap_const_vec_duplicate (op)))\"))))\n \n ;; Return 1 if the operand is a valid second operand to an add insn.\n (define_predicate \"add_operand\""}, {"sha": "3ab9ab756503552c147c34b8d2f8d5a26e3758c1", "filename": "gcc/config/tilepro/constraints.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Ftilepro%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Ftilepro%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Fconstraints.md?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -90,12 +90,10 @@\n   \"A 4-element vector constant with identical elements\"\n   (and (match_code \"const_vector\")\n        (match_test \"CONST_VECTOR_NUNITS (op) == 4\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 1)\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 2)\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 3)\")))\n+       (match_test \"const_vec_duplicate_p (op)\")))\n \n (define_constraint \"Y\"\n   \"A 2-element vector constant with identical elements\"\n   (and (match_code \"const_vector\")\n        (match_test \"CONST_VECTOR_NUNITS (op) == 2\")\n-       (match_test \"CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 1)\")))\n+       (match_test \"const_vec_duplicate_p (op)\")))"}, {"sha": "ab62d20731ad1502e4456e647f2fe68e3345d8fe", "filename": "gcc/config/tilepro/predicates.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Ftilepro%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fconfig%2Ftilepro%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Fpredicates.md?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -75,19 +75,17 @@\n   (ior (match_operand 0 \"register_operand\")\n        (and (match_code \"const_vector\")\n \t    (match_test \"CONST_VECTOR_NUNITS (op) == 4\n-                         && satisfies_constraint_I (CONST_VECTOR_ELT (op, 0))\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 1)\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 2)\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 3)\"))))\n+                         && (satisfies_constraint_I\n+\t\t\t     (unwrap_const_vec_duplicate (op)))\"))))\n \n ;; Return 1 if OP is a 2-element vector constant with identical signed\n ;; 8-bit elements or any register.\n (define_predicate \"reg_or_v2s8bit_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (and (match_code \"const_vector\")\n \t    (match_test \"CONST_VECTOR_NUNITS (op) == 2\n-                         && satisfies_constraint_I (CONST_VECTOR_ELT (op, 0))\n-                         && CONST_VECTOR_ELT (op, 0) == CONST_VECTOR_ELT (op, 1)\"))))\n+                         && (satisfies_constraint_I\n+\t\t\t     (unwrap_const_vec_duplicate (op)))\"))))\n \n ;; Return 1 if the operand is a valid second operand to an add insn.\n (define_predicate \"add_operand\""}, {"sha": "604a957a07ba5e5b810598e0e15a36944889daf1", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -3117,15 +3117,7 @@ expand_mult (machine_mode mode, rtx op0, rtx op1, rtx target,\n \n   /* For vectors, there are several simplifications that can be made if\n      all elements of the vector constant are identical.  */\n-  scalar_op1 = op1;\n-  if (GET_CODE (op1) == CONST_VECTOR)\n-    {\n-      int i, n = CONST_VECTOR_NUNITS (op1);\n-      scalar_op1 = CONST_VECTOR_ELT (op1, 0);\n-      for (i = 1; i < n; ++i)\n-\tif (!rtx_equal_p (scalar_op1, CONST_VECTOR_ELT (op1, i)))\n-\t  goto skip_scalar;\n-    }\n+  scalar_op1 = unwrap_const_vec_duplicate (op1);\n \n   if (INTEGRAL_MODE_P (mode))\n     {\n@@ -3254,7 +3246,6 @@ expand_mult (machine_mode mode, rtx op0, rtx op1, rtx target,\n \t\t\t       target, unsignedp, OPTAB_LIB_WIDEN);\n \t}\n     }\n- skip_scalar:\n \n   /* This used to use umul_optab if unsigned, but for non-widening multiply\n      there is no difference between signed and unsigned.  */"}, {"sha": "3c8bdc10b6806948cf4025c62d33a1638ba1e5cd", "filename": "gcc/rtl.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -657,6 +657,31 @@ rtx_equal_p (const_rtx x, const_rtx y)\n   return 1;\n }\n \n+/* Return true if all elements of VEC are equal.  */\n+\n+bool\n+rtvec_all_equal_p (const_rtvec vec)\n+{\n+  const_rtx first = RTVEC_ELT (vec, 0);\n+  /* Optimize the important special case of a vector of constants.\n+     The main use of this function is to detect whether every element\n+     of CONST_VECTOR is the same.  */\n+  switch (GET_CODE (first))\n+    {\n+    CASE_CONST_UNIQUE:\n+      for (int i = 1, n = GET_NUM_ELEM (vec); i < n; ++i)\n+\tif (first != RTVEC_ELT (vec, i))\n+\t  return false;\n+      return true;\n+\n+    default:\n+      for (int i = 1, n = GET_NUM_ELEM (vec); i < n; ++i)\n+\tif (!rtx_equal_p (first, RTVEC_ELT (vec, i)))\n+\t  return false;\n+      return true;\n+    }\n+}\n+\n /* Return an indication of which type of insn should have X as a body.\n    In generator files, this can be UNKNOWN if the answer is only known\n    at (GCC) runtime.  Otherwise the value is CODE_LABEL, INSN, CALL_INSN"}, {"sha": "ac56133b7e1617b40f0ed7385d953ca3e59e4f21", "filename": "gcc/rtl.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92695fbb294bf7fe051041e3143f51c37cc22f82/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=92695fbb294bf7fe051041e3143f51c37cc22f82", "patch": "@@ -2678,6 +2678,42 @@ extern unsigned int rtx_size (const_rtx);\n extern rtx shallow_copy_rtx_stat (const_rtx MEM_STAT_DECL);\n #define shallow_copy_rtx(a) shallow_copy_rtx_stat (a MEM_STAT_INFO)\n extern int rtx_equal_p (const_rtx, const_rtx);\n+extern bool rtvec_all_equal_p (const_rtvec);\n+\n+/* Return true if X is a vector constant with a duplicated element value.  */\n+\n+inline bool\n+const_vec_duplicate_p (const_rtx x)\n+{\n+  return GET_CODE (x) == CONST_VECTOR && rtvec_all_equal_p (XVEC (x, 0));\n+}\n+\n+/* Return true if X is a vector constant with a duplicated element value.\n+   Store the duplicated element in *ELT if so.  */\n+\n+template <typename T>\n+inline bool\n+const_vec_duplicate_p (T x, T *elt)\n+{\n+  if (const_vec_duplicate_p (x))\n+    {\n+      *elt = CONST_VECTOR_ELT (x, 0);\n+      return true;\n+    }\n+  return false;\n+}\n+\n+/* If X is a vector constant with a duplicated element value, return that\n+   element value, otherwise return X.  */\n+\n+template <typename T>\n+inline T\n+unwrap_const_vec_duplicate (T x)\n+{\n+  if (const_vec_duplicate_p (x))\n+    x = CONST_VECTOR_ELT (x, 0);\n+  return x;\n+}\n \n /* In emit-rtl.c */\n extern rtvec gen_rtvec_v (int, rtx *);"}]}