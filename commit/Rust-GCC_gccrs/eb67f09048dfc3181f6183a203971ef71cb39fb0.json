{"sha": "eb67f09048dfc3181f6183a203971ef71cb39fb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2N2YwOTA0OGRmYzMxODFmNjE4M2EyMDM5NzFlZjcxY2IzOWZiMA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2010-12-17T14:10:02Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2010-12-17T14:10:02Z"}, "message": "t-spu-elf (LIB2FUNCS_EXCLUDE): Add _floattisf and _floatunstisf.\n\n\t* config/spu/t-spu-elf (LIB2FUNCS_EXCLUDE): Add _floattisf and\n\t_floatunstisf.\n\t* config/spu/spu.md (\"floattisf2\"): New expander.\n\t(\"floatunstisf2\"): New insn pattern and splitter.\n\t(\"cgt_ti_m1\"): New insn pattern.\n\nFrom-SVN: r167984", "tree": {"sha": "37e129f4b1d9691d3d565707307251a523214a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37e129f4b1d9691d3d565707307251a523214a28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb67f09048dfc3181f6183a203971ef71cb39fb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb67f09048dfc3181f6183a203971ef71cb39fb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb67f09048dfc3181f6183a203971ef71cb39fb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb67f09048dfc3181f6183a203971ef71cb39fb0/comments", "author": null, "committer": null, "parents": [{"sha": "f63e0d543a7cafdda34919c67a0e1b70533a1984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63e0d543a7cafdda34919c67a0e1b70533a1984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f63e0d543a7cafdda34919c67a0e1b70533a1984"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "864cc63951461cfec8cf94e6481fc1b9bcac34ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb67f09048dfc3181f6183a203971ef71cb39fb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb67f09048dfc3181f6183a203971ef71cb39fb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb67f09048dfc3181f6183a203971ef71cb39fb0", "patch": "@@ -1,3 +1,11 @@\n+2010-12-17  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/spu/t-spu-elf (LIB2FUNCS_EXCLUDE): Add _floattisf and\n+\t_floatunstisf.\n+\t* config/spu/spu.md (\"floattisf2\"): New expander.\n+\t(\"floatunstisf2\"): New insn pattern and splitter.\n+\t(\"cgt_ti_m1\"): New insn pattern.\n+\n 2010-12-17  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* config/arm/arm.c (arm_select_cc_mode): Before calling"}, {"sha": "c9bf3c828d54ac9862154caf57a684fdf23e6a0e", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb67f09048dfc3181f6183a203971ef71cb39fb0/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb67f09048dfc3181f6183a203971ef71cb39fb0/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=eb67f09048dfc3181f6183a203971ef71cb39fb0", "patch": "@@ -753,6 +753,73 @@\n     DONE;\n   })\n \n+(define_expand \"floattisf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float:SF (match_operand:TI 1 \"register_operand\" \"\")))]\n+  \"\"\n+  {\n+    rtx c0 = gen_reg_rtx (SImode);\n+    rtx r0 = gen_reg_rtx (TImode);\n+    rtx r1 = gen_reg_rtx (SFmode);\n+    rtx r2 = gen_reg_rtx (SImode);\n+    rtx setneg = gen_reg_rtx (SImode);\n+    rtx isneg = gen_reg_rtx (SImode);\n+    rtx neg = gen_reg_rtx (TImode);\n+    rtx mask = gen_reg_rtx (TImode);\n+\n+    emit_move_insn (c0, GEN_INT (-0x80000000ll));\n+\n+    emit_insn (gen_negti2 (neg, operands[1]));\n+    emit_insn (gen_cgt_ti_m1 (isneg, operands[1]));\n+    emit_insn (gen_extend_compare (mask, isneg));\n+    emit_insn (gen_selb (r0, neg, operands[1], mask));\n+    emit_insn (gen_andc_si (setneg, c0, isneg));\n+\n+    emit_insn (gen_floatunstisf2 (r1, r0));\n+\n+    emit_insn (gen_iorsi3 (r2, gen_rtx_SUBREG (SImode, r1, 0), setneg));\n+    emit_move_insn (operands[0], gen_rtx_SUBREG (SFmode, r2, 0));\n+    DONE;\n+  })\n+\n+(define_insn_and_split \"floatunstisf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n+        (unsigned_float:SF (match_operand:TI 1 \"register_operand\" \"r\")))\n+   (clobber (match_scratch:SF 2 \"=r\"))\n+   (clobber (match_scratch:SF 3 \"=r\"))\n+   (clobber (match_scratch:SF 4 \"=r\"))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup:SF 0)\n+        (unsigned_float:SF (match_dup:TI 1)))]\n+  {\n+    rtx op1_v4si = gen_rtx_REG (V4SImode, REGNO (operands[1]));\n+    rtx op2_v4sf = gen_rtx_REG (V4SFmode, REGNO (operands[2]));\n+    rtx op2_ti = gen_rtx_REG (TImode, REGNO (operands[2]));\n+    rtx op3_ti = gen_rtx_REG (TImode, REGNO (operands[3]));\n+\n+    REAL_VALUE_TYPE scale;\n+    real_2expN (&scale, 32, SFmode);\n+\n+    emit_insn (gen_floatunsv4siv4sf2 (op2_v4sf, op1_v4si));\n+    emit_insn (gen_shlqby_ti (op3_ti, op2_ti, GEN_INT (4)));\n+\n+    emit_move_insn (operands[4],\n+\t\t    CONST_DOUBLE_FROM_REAL_VALUE (scale, SFmode));\n+    emit_insn (gen_fmasf4 (operands[2],\n+\t\t\t   operands[2], operands[4], operands[3]));\n+\n+    emit_insn (gen_shlqby_ti (op3_ti, op3_ti, GEN_INT (4)));\n+    emit_insn (gen_fmasf4 (operands[2],\n+\t\t\t   operands[2], operands[4], operands[3]));\n+\n+    emit_insn (gen_shlqby_ti (op3_ti, op3_ti, GEN_INT (4)));\n+    emit_insn (gen_fmasf4 (operands[0],\n+\t\t\t   operands[2], operands[4], operands[3]));\n+    DONE;\n+  })\n+\n ;; Do (double)(operands[1]+0x80000000u)-(double)0x80000000\n (define_expand \"floatsidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n@@ -3218,6 +3285,13 @@\n     DONE;\n   })\n \n+(define_insn \"cgt_ti_m1\" \n+  [(set (match_operand:SI 0 \"spu_reg_operand\" \"=r\")\n+\t(gt:SI (match_operand:TI 1 \"spu_reg_operand\" \"r\")\n+\t       (const_int -1)))]\n+  \"\"\n+  \"cgti\\t%0,%1,-1\")\n+\n (define_insn \"cgt_ti\"\n   [(set (match_operand:SI 0 \"spu_reg_operand\" \"=r\")\n \t(gt:SI (match_operand:TI 1 \"spu_reg_operand\" \"r\")"}, {"sha": "a131f64883b140911a415b9f44d25e56179c2f78", "filename": "gcc/config/spu/t-spu-elf", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb67f09048dfc3181f6183a203971ef71cb39fb0/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb67f09048dfc3181f6183a203971ef71cb39fb0/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Ft-spu-elf?ref=eb67f09048dfc3181f6183a203971ef71cb39fb0", "patch": "@@ -26,8 +26,8 @@ TARGET_LIBGCC2_CFLAGS = -fPIC -mwarn-reloc -D__IN_LIBGCC2\n \n # We exclude those because the libgcc2.c default versions do not support\n # the SPU single-precision format (round towards zero).  We provide our\n-# own versions below.\n-LIB2FUNCS_EXCLUDE = _floatdisf _floatundisf\n+# own versions below and/or via direct expansion.\n+LIB2FUNCS_EXCLUDE = _floatdisf _floatundisf _floattisf _floatunstisf\n \n # We provide our own version of __divdf3 that performs better and has\n # better support for non-default rounding modes."}]}