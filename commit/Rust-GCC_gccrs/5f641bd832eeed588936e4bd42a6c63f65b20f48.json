{"sha": "5f641bd832eeed588936e4bd42a6c63f65b20f48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2NDFiZDgzMmVlZWQ1ODg5MzZlNGJkNDJhNmM2M2Y2NWIyMGY0OA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2006-12-26T19:03:17Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2006-12-26T19:03:17Z"}, "message": "re PR middle-end/29335 (transcendental functions with constant arguments should be resolved at compile-time)\n\n\tPR middle-end/29335\n\t* builtins.c (do_mpfr_arg1, do_mpfr_arg2, do_mpfr_arg3,\n\tdo_mpfr_sincos): Ensure target base equals two.\n\nFrom-SVN: r120211", "tree": {"sha": "94b0ae7014af1903a73894e681b5975204487209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94b0ae7014af1903a73894e681b5975204487209"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f641bd832eeed588936e4bd42a6c63f65b20f48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f641bd832eeed588936e4bd42a6c63f65b20f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f641bd832eeed588936e4bd42a6c63f65b20f48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f641bd832eeed588936e4bd42a6c63f65b20f48/comments", "author": null, "committer": null, "parents": [{"sha": "04b5b56c85dbb3b8f63ee432bf1f3798aa8067c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b5b56c85dbb3b8f63ee432bf1f3798aa8067c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b5b56c85dbb3b8f63ee432bf1f3798aa8067c5"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "d9a15356b217f7a8692be12221501f15f2f2bb39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f641bd832eeed588936e4bd42a6c63f65b20f48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f641bd832eeed588936e4bd42a6c63f65b20f48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f641bd832eeed588936e4bd42a6c63f65b20f48", "patch": "@@ -1,3 +1,9 @@\n+2006-12-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR middle-end/29335\n+\t* builtins.c (do_mpfr_arg1, do_mpfr_arg2, do_mpfr_arg3,\n+\tdo_mpfr_sincos): Ensure target base equals two.\n+\n 2006-12-26  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* tree-ssa-operands.c: Fix a comment typo."}, {"sha": "6f79b2931bfefe09e18097820246fb6506919101", "filename": "gcc/builtins.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f641bd832eeed588936e4bd42a6c63f65b20f48/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f641bd832eeed588936e4bd42a6c63f65b20f48/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5f641bd832eeed588936e4bd42a6c63f65b20f48", "patch": "@@ -11737,7 +11737,10 @@ do_mpfr_arg1 (tree arg, tree type, int (*func)(mpfr_ptr, mpfr_srcptr, mp_rnd_t),\n   \n   STRIP_NOPS (arg);\n \n-  if (TREE_CODE (arg) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg))\n+  /* To proceed, MPFR must exactly represent the target floating point\n+     format, which only happens when the target base equals two.  */\n+  if (REAL_MODE_FORMAT (TYPE_MODE (type))->b == 2\n+      && TREE_CODE (arg) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg))\n     {\n       const REAL_VALUE_TYPE *const ra = &TREE_REAL_CST (arg);\n \n@@ -11776,7 +11779,10 @@ do_mpfr_arg2 (tree arg1, tree arg2, tree type,\n   STRIP_NOPS (arg1);\n   STRIP_NOPS (arg2);\n \n-  if (TREE_CODE (arg1) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg1)\n+  /* To proceed, MPFR must exactly represent the target floating point\n+     format, which only happens when the target base equals two.  */\n+  if (REAL_MODE_FORMAT (TYPE_MODE (type))->b == 2\n+      && TREE_CODE (arg1) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg1)\n       && TREE_CODE (arg2) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg2))\n     {\n       const REAL_VALUE_TYPE *const ra1 = &TREE_REAL_CST (arg1);\n@@ -11818,7 +11824,10 @@ do_mpfr_arg3 (tree arg1, tree arg2, tree arg3, tree type,\n   STRIP_NOPS (arg2);\n   STRIP_NOPS (arg3);\n \n-  if (TREE_CODE (arg1) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg1)\n+  /* To proceed, MPFR must exactly represent the target floating point\n+     format, which only happens when the target base equals two.  */\n+  if (REAL_MODE_FORMAT (TYPE_MODE (type))->b == 2\n+      && TREE_CODE (arg1) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg1)\n       && TREE_CODE (arg2) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg2)\n       && TREE_CODE (arg3) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg3))\n     {\n@@ -11858,17 +11867,20 @@ do_mpfr_arg3 (tree arg1, tree arg2, tree arg3, tree type,\n static tree\n do_mpfr_sincos (tree arg, tree arg_sinp, tree arg_cosp)\n {\n+  tree const type = TREE_TYPE (arg);\n   tree result = NULL_TREE;\n   \n   STRIP_NOPS (arg);\n   \n-  if (TREE_CODE (arg) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg))\n+  /* To proceed, MPFR must exactly represent the target floating point\n+     format, which only happens when the target base equals two.  */\n+  if (REAL_MODE_FORMAT (TYPE_MODE (type))->b == 2\n+      && TREE_CODE (arg) == REAL_CST && ! TREE_CONSTANT_OVERFLOW (arg))\n     {\n       const REAL_VALUE_TYPE *const ra = &TREE_REAL_CST (arg);\n \n       if (!real_isnan (ra) && !real_isinf (ra))\n         {\n-\t  tree const type = TREE_TYPE (arg);\n \t  const int prec = REAL_MODE_FORMAT (TYPE_MODE (type))->p;\n \t  tree result_s, result_c;\n \t  int inexact;"}]}