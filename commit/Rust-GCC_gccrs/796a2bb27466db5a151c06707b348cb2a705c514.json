{"sha": "796a2bb27466db5a151c06707b348cb2a705c514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk2YTJiYjI3NDY2ZGI1YTE1MWMwNjcwN2IzNDhjYjJhNzA1YzUxNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-01T07:48:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-01T07:48:51Z"}, "message": "tree-inline.c (expand_call_inline): Store origin of fn in BLOCK_ABSTRACT_ORIGIN for the inline BLOCK.\n\n2018-10-01  Richard Biener  <rguenther@suse.de>\n\n\t* tree-inline.c (expand_call_inline): Store origin of fn\n\tin BLOCK_ABSTRACT_ORIGIN for the inline BLOCK.\n\t* tree.c (block_ultimate_origin): Simplify and do some\n\tchecking.\n\nFrom-SVN: r264734", "tree": {"sha": "dd92d5f47b395b78b77c27fa47fb8e2b6661f18b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd92d5f47b395b78b77c27fa47fb8e2b6661f18b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/796a2bb27466db5a151c06707b348cb2a705c514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796a2bb27466db5a151c06707b348cb2a705c514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/796a2bb27466db5a151c06707b348cb2a705c514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796a2bb27466db5a151c06707b348cb2a705c514/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb8c960e440d6a342fc8a388eee4be1ce81ae8ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8c960e440d6a342fc8a388eee4be1ce81ae8ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8c960e440d6a342fc8a388eee4be1ce81ae8ce"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "7783d0994e2631fc7b40e6ed2cbf21ad4494cff5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796a2bb27466db5a151c06707b348cb2a705c514/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796a2bb27466db5a151c06707b348cb2a705c514/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=796a2bb27466db5a151c06707b348cb2a705c514", "patch": "@@ -1,3 +1,10 @@\n+2018-10-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-inline.c (expand_call_inline): Store origin of fn\n+\tin BLOCK_ABSTRACT_ORIGIN for the inline BLOCK.\n+\t* tree.c (block_ultimate_origin): Simplify and do some\n+\tchecking.\n+\n 2018-09-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/mmx.md (EMMS): New int iterator."}, {"sha": "6b5ef36f6d2fc6e0599c9f4a906897abd46e7c51", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796a2bb27466db5a151c06707b348cb2a705c514/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796a2bb27466db5a151c06707b348cb2a705c514/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=796a2bb27466db5a151c06707b348cb2a705c514", "patch": "@@ -4535,7 +4535,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n       if (loc == UNKNOWN_LOCATION)\n \tloc = BUILTINS_LOCATION;\n       id->block = make_node (BLOCK);\n-      BLOCK_ABSTRACT_ORIGIN (id->block) = fn;\n+      BLOCK_ABSTRACT_ORIGIN (id->block) = DECL_ORIGIN (fn);\n       BLOCK_SOURCE_LOCATION (id->block) = loc;\n       prepend_lexical_block (gimple_block (stmt), id->block);\n     }"}, {"sha": "d52f87773924ddcff516cf1ff06a3f4713bf25b1", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/796a2bb27466db5a151c06707b348cb2a705c514/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/796a2bb27466db5a151c06707b348cb2a705c514/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=796a2bb27466db5a151c06707b348cb2a705c514", "patch": "@@ -12124,38 +12124,26 @@ prepare_target_option_nodes_for_pch (void)\n       TREE_TARGET_GLOBALS (*iter) = NULL;\n }\n \n-/* Determine the \"ultimate origin\" of a block.  The block may be an inlined\n-   instance of an inlined instance of a block which is local to an inline\n-   function, so we have to trace all of the way back through the origin chain\n-   to find out what sort of node actually served as the original seed for the\n-   given block.  */\n+/* Determine the \"ultimate origin\" of a block.  */\n \n tree\n block_ultimate_origin (const_tree block)\n {\n-  tree immediate_origin = BLOCK_ABSTRACT_ORIGIN (block);\n+  tree origin = BLOCK_ABSTRACT_ORIGIN (block);\n \n   /* BLOCK_ABSTRACT_ORIGIN can point to itself; ignore that if\n      we're trying to output the abstract instance of this function.  */\n-  if (BLOCK_ABSTRACT (block) && immediate_origin == block)\n+  if (BLOCK_ABSTRACT (block) && origin == block)\n     return NULL_TREE;\n \n-  if (immediate_origin == NULL_TREE)\n+  if (origin == NULL_TREE)\n     return NULL_TREE;\n   else\n     {\n-      tree ret_val = immediate_origin;\n-\n-      /* The block's abstract origin chain may not be the *ultimate* origin of\n-\t the block. It could lead to a DECL that has an abstract origin set.\n-\t If so, we want that DECL's abstract origin (which is what DECL_ORIGIN\n-\t will give us if it has one).  Note that DECL's abstract origins are\n-\t supposed to be the most distant ancestor (or so decl_ultimate_origin\n-\t claims), so we don't need to loop following the DECL origins.  */\n-      if (DECL_P (ret_val))\n-\treturn DECL_ORIGIN (ret_val);\n-\n-      return ret_val;\n+      gcc_checking_assert ((DECL_P (origin)\n+\t\t\t    && DECL_ORIGIN (origin) == origin)\n+\t\t\t   || BLOCK_ORIGIN (origin) == origin);\n+      return origin;\n     }\n }\n "}]}