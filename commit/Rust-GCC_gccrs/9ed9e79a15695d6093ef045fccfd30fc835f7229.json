{"sha": "9ed9e79a15695d6093ef045fccfd30fc835f7229", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVkOWU3OWExNTY5NWQ2MDkzZWYwNDVmY2NmZDMwZmM4MzVmNzIyOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-10-01T04:45:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-10-01T04:45:10Z"}, "message": "decl.c (initialize_local_var): Handle static variables here.\n\n\t* decl.c (initialize_local_var): Handle static variables here.\n\t(cp_finish_decl): Tweak handling of function-scope static\n\tvariables.\n\t* semantics.c (expand_stmt): Handle DECL_STMTs for static\n\tvariables.\n\nFrom-SVN: r29749", "tree": {"sha": "d977a55aacc9f28c0bdd807f9def83e5a15d4ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d977a55aacc9f28c0bdd807f9def83e5a15d4ef3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ed9e79a15695d6093ef045fccfd30fc835f7229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed9e79a15695d6093ef045fccfd30fc835f7229", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed9e79a15695d6093ef045fccfd30fc835f7229", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed9e79a15695d6093ef045fccfd30fc835f7229/comments", "author": null, "committer": null, "parents": [{"sha": "3b62f224004def4c1dc72fe6096067f47e0e32d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b62f224004def4c1dc72fe6096067f47e0e32d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b62f224004def4c1dc72fe6096067f47e0e32d9"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "a97890d86fcbbb9d0d035b56ab7884a17b670ba9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed9e79a15695d6093ef045fccfd30fc835f7229/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed9e79a15695d6093ef045fccfd30fc835f7229/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ed9e79a15695d6093ef045fccfd30fc835f7229", "patch": "@@ -1,5 +1,11 @@\n 1999-09-30  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* decl.c (initialize_local_var): Handle static variables here.\n+\t(cp_finish_decl): Tweak handling of function-scope static\n+\tvariables.\n+\t* semantics.c (expand_stmt): Handle DECL_STMTs for static\n+\tvariables.\n+\n \t* method.c (emit_thunk): Don't crash when -fsyntax-only.\n \n \t* cp-tree.h (lang_decl_flags): Add global_ctor_p and"}, {"sha": "00043d67b911ee0035881e8ca7c72393edfb1134", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed9e79a15695d6093ef045fccfd30fc835f7229/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed9e79a15695d6093ef045fccfd30fc835f7229/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9ed9e79a15695d6093ef045fccfd30fc835f7229", "patch": "@@ -7470,9 +7470,11 @@ initialize_local_var (decl, init, flags)\n      tree init;\n      int flags;\n {\n-  tree type;\n+  tree type = TREE_TYPE (decl);\n \n-  type = complete_type (TREE_TYPE (decl));\n+  /* If the type is bogus, don't bother initializing the variable.  */\n+  if (type == error_mark_node)\n+    return;\n \n   if (DECL_SIZE (decl) == NULL_TREE && !TREE_STATIC (decl))\n     {\n@@ -7481,6 +7483,16 @@ initialize_local_var (decl, init, flags)\n       TREE_ADDRESSABLE (decl) = TREE_USED (decl);\n     }\n \n+  /* Local statics are handled differently from ordinary automatic\n+     variables.  */\n+  if (TREE_STATIC (decl))\n+    {\n+      if (TYPE_NEEDS_CONSTRUCTING (type) || init != NULL_TREE\n+\t  || TYPE_NEEDS_DESTRUCTOR (type))\n+\texpand_static_init (decl, init);\n+      return;\n+    }\n+\n   if (DECL_SIZE (decl) && type != error_mark_node)\n     {\n       int already_used;\n@@ -7776,13 +7788,6 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t  if (init)\n \t    DECL_INITIAL (decl) = init;\n \t}\n-      else if (TREE_STATIC (decl) && type != error_mark_node)\n-\t{\n-\t  /* Cleanups for static variables are handled by `finish_file'.  */\n-\t  if (TYPE_NEEDS_CONSTRUCTING (type) || init != NULL_TREE\n-\t      || TYPE_NEEDS_DESTRUCTOR (type))\n-\t    expand_static_init (decl, init);\n-\t}\n       else if (TREE_CODE (CP_DECL_CONTEXT (decl)) == FUNCTION_DECL)\n \t{\n \t  /* This is a local declaration.  */\n@@ -7808,6 +7813,13 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t      destroy_local_var (decl);\n \t    }\n \t}\n+      else if (TREE_STATIC (decl) && type != error_mark_node)\n+\t{\n+\t  /* Cleanups for static variables are handled by `finish_file'.  */\n+\t  if (TYPE_NEEDS_CONSTRUCTING (type) || init != NULL_TREE\n+\t      || TYPE_NEEDS_DESTRUCTOR (type))\n+\t    expand_static_init (decl, init);\n+\t}\n     finish_end0:\n \n       /* Undo call to `pushclass' that was done in `start_decl'"}, {"sha": "950553586496636b8922decf65f116545596cf5f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed9e79a15695d6093ef045fccfd30fc835f7229/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed9e79a15695d6093ef045fccfd30fc835f7229/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9ed9e79a15695d6093ef045fccfd30fc835f7229", "patch": "@@ -2274,11 +2274,9 @@ expand_stmt (t)\n \t    /* If this is a declaration for an automatic local\n \t       variable, initialize it.  Note that we might also see a\n \t       declaration for a namespace-scope object (declared with\n-\t       `extern') or an object with static storage duration\n-\t       (declared with `static').  We don't have to handle the\n-\t       initialization of those objects here; the former can\n-\t       never be a definition (only a declaration), and the\n-\t       latter is handled in finish_file.  */\n+\t       `extern').  We don't have to handle the initialization\n+\t       of those objects here; they can only be declarations,\n+\t       rather than definitions.  */\n \t    if (TREE_CODE (decl) == VAR_DECL \n \t\t&& !TREE_STATIC (decl)\n \t\t&& !DECL_EXTERNAL (decl))\n@@ -2290,6 +2288,10 @@ expand_stmt (t)\n \t\t  expand_anon_union_decl (decl, NULL_TREE, \n \t\t\t\t\t  DECL_ANON_UNION_ELEMS (decl));\n \t      }\n+\t    else if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl))\n+\t      rest_of_decl_compilation \n+\t\t(decl, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n+\t\t /*top_level=*/0, /*at_end=*/0);\n \n \t    resume_momentary (i);\n \t  }"}]}