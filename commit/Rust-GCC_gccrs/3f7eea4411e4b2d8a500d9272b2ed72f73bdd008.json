{"sha": "3f7eea4411e4b2d8a500d9272b2ed72f73bdd008", "node_id": "C_kwDOANBUbNoAKDNmN2VlYTQ0MTFlNGIyZDhhNTAwZDkyNzJiMmVkNzJmNzNiZGQwMDg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-27T08:51:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-27T10:59:53Z"}, "message": "c++: Make __is_{,nothrow_}convertible SFINAE on access  [PR107049]\n\nThe is_convertible built-ins should return false if the conversion fails\nan access check, not report an error.\n\n\tPR c++/107049\n\ngcc/cp/ChangeLog:\n\n\t* method.cc (is_convertible_helper): Use access check sentinel.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/is_convertible4.C: New test.\n\t* g++.dg/ext/is_nothrow_convertible4.C: New test.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/20_util/is_convertible/requirements/access.cc: New\n\ttest.", "tree": {"sha": "fc4f93a817acae7ac594f73b79031541d20aeaff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc4f93a817acae7ac594f73b79031541d20aeaff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "614e5696d730a65998ff5b0373f905795a758dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/614e5696d730a65998ff5b0373f905795a758dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/614e5696d730a65998ff5b0373f905795a758dd6"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "55af5c43c1872db3ee7709c697767a13e4afa4b7", "filename": "gcc/cp/method.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008/gcc%2Fcp%2Fmethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008/gcc%2Fcp%2Fmethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.cc?ref=3f7eea4411e4b2d8a500d9272b2ed72f73bdd008", "patch": "@@ -2246,6 +2246,7 @@ is_convertible_helper (tree from, tree to)\n     return integer_one_node;\n   cp_unevaluated u;\n   tree expr = build_stub_object (from);\n+  deferring_access_check_sentinel acs (dk_no_deferred);\n   return perform_implicit_conversion (to, expr, tf_none);\n }\n "}, {"sha": "8a7724c58526eea237e4455e25366436d0f0f6cc", "filename": "gcc/testsuite/g++.dg/ext/is_convertible4.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_convertible4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_convertible4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_convertible4.C?ref=3f7eea4411e4b2d8a500d9272b2ed72f73bdd008", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/107049\n+// { dg-do compile { target c++11 } }\n+// Failed access check should be a substitution failure, not an error.\n+\n+template<bool B>\n+struct bool_constant { static constexpr bool value = B; };\n+\n+template<typename From, typename To>\n+struct is_convertible\n+: public bool_constant<__is_convertible(From, To)>\n+{ };\n+\n+#if __cpp_variable_templates\n+template<typename From, typename To>\n+constexpr bool is_convertible_v = __is_convertible(From, To);\n+#endif\n+\n+class Private\n+{\n+  operator int() const\n+  {\n+    static_assert( not is_convertible<Private, int>::value, \"\" );\n+#if __cpp_variable_templates\n+    static_assert( not is_convertible_v<Private, int>, \"\" );\n+#endif\n+    return 0;\n+  }\n+};\n+\n+static_assert( not is_convertible<Private, int>::value, \"\" );\n+#if __cpp_variable_templates\n+static_assert( not is_convertible_v<Private, int>, \"\" );\n+#endif"}, {"sha": "f81b5944ca246bcf374ac2fc67891eb7391e252d", "filename": "gcc/testsuite/g++.dg/ext/is_nothrow_convertible4.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_convertible4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_convertible4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_nothrow_convertible4.C?ref=3f7eea4411e4b2d8a500d9272b2ed72f73bdd008", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/107049\n+// { dg-do compile { target c++11 } }\n+// Failed access check should be a substitution failure, not an error.\n+\n+template<bool B>\n+struct bool_constant { static constexpr bool value = B; };\n+\n+template<typename From, typename To>\n+struct is_nt_convertible\n+: public bool_constant<__is_nothrow_convertible(From, To)>\n+{ };\n+\n+#if __cpp_variable_templates\n+template<typename From, typename To>\n+constexpr bool is_nt_convertible_v = __is_nothrow_convertible(From, To);\n+#endif\n+\n+class Private\n+{\n+  operator int() const\n+  {\n+    static_assert( not is_nt_convertible<Private, int>::value, \"\" );\n+#if __cpp_variable_templates\n+    static_assert( not is_nt_convertible_v<Private, int>, \"\" );\n+#endif\n+    return 0;\n+  }\n+};\n+\n+static_assert( not is_nt_convertible<Private, int>::value, \"\" );\n+#if __cpp_variable_templates\n+static_assert( not is_nt_convertible_v<Private, int>, \"\" );\n+#endif"}, {"sha": "04a8c525961e497c354b4e5ddc97ffbd4faa2259", "filename": "libstdc++-v3/testsuite/20_util/is_convertible/requirements/access.cc", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Frequirements%2Faccess.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f7eea4411e4b2d8a500d9272b2ed72f73bdd008/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Frequirements%2Faccess.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_convertible%2Frequirements%2Faccess.cc?ref=3f7eea4411e4b2d8a500d9272b2ed72f73bdd008", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile { target  c++11 } }\n+// PR c++/107049\n+\n+#include <type_traits>\n+\n+class Private\n+{\n+  operator int() const\n+  {\n+    static_assert( not std::is_convertible<Private, int>::value, \"\" );\n+#if __cpp_lib_type_trait_variable_templates\n+    static_assert( not std::is_convertible_v<Private, int>, \"\" );\n+#endif\n+    return 0;\n+  }\n+};\n+\n+static_assert( not std::is_convertible<Private, int>::value, \"\" );"}]}