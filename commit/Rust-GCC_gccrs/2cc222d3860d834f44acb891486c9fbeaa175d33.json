{"sha": "2cc222d3860d834f44acb891486c9fbeaa175d33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjMjIyZDM4NjBkODM0ZjQ0YWNiODkxNDg2YzlmYmVhYTE3NWQzMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-09-21T15:08:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-09-21T15:08:52Z"}, "message": "Whitespace changes\n\nFrom-SVN: r45728", "tree": {"sha": "88fd75617714022132f6f41791f1c4262c950603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88fd75617714022132f6f41791f1c4262c950603"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc222d3860d834f44acb891486c9fbeaa175d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc222d3860d834f44acb891486c9fbeaa175d33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc222d3860d834f44acb891486c9fbeaa175d33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc222d3860d834f44acb891486c9fbeaa175d33/comments", "author": null, "committer": null, "parents": [{"sha": "7106d491044fec66141ed9defe95d80650f374e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7106d491044fec66141ed9defe95d80650f374e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7106d491044fec66141ed9defe95d80650f374e0"}], "stats": {"total": 88, "additions": 65, "deletions": 23}, "files": [{"sha": "3aa402fd1ba924b3c2f54ce7c1d5a198465abdf4", "filename": "gcc/c-common.c", "status": "modified", "additions": 65, "deletions": 23, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc222d3860d834f44acb891486c9fbeaa175d33/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc222d3860d834f44acb891486c9fbeaa175d33/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2cc222d3860d834f44acb891486c9fbeaa175d33", "patch": "@@ -666,34 +666,56 @@ static tree handle_pure_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static const struct attribute_spec c_common_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n-  { \"packed\",                 0, 0, false, false, false, handle_packed_attribute },\n-  { \"nocommon\",               0, 0, true,  false, false, handle_nocommon_attribute },\n-  { \"common\",                 0, 0, true,  false, false, handle_common_attribute },\n+  { \"packed\",                 0, 0, false, false, false,\n+      \t\t\t      handle_packed_attribute },\n+  { \"nocommon\",               0, 0, true,  false, false,\n+\t\t\t      handle_nocommon_attribute },\n+  { \"common\",                 0, 0, true,  false, false,\n+\t\t\t      handle_common_attribute },\n   /* FIXME: logically, noreturn attributes should be listed as\n      \"false, true, true\" and apply to function types.  But implementing this\n      would require all the places in the compiler that use TREE_THIS_VOLATILE\n      on a decl to identify non-returning functions to be located and fixed\n      to check the function type instead.  */\n-  { \"noreturn\",               0, 0, true,  false, false, handle_noreturn_attribute },\n-  { \"volatile\",               0, 0, true,  false, false, handle_noreturn_attribute },\n-  { \"unused\",                 0, 0, false, false, false, handle_unused_attribute },\n+  { \"noreturn\",               0, 0, true,  false, false,\n+\t\t\t      handle_noreturn_attribute },\n+  { \"volatile\",               0, 0, true,  false, false,\n+\t\t\t      handle_noreturn_attribute },\n+  { \"unused\",                 0, 0, false, false, false,\n+\t\t\t      handle_unused_attribute },\n   /* The same comments as for noreturn attributes apply to const ones.  */\n-  { \"const\",                  0, 0, true,  false, false, handle_const_attribute },\n-  { \"transparent_union\",      0, 0, false, false, false, handle_transparent_union_attribute },\n-  { \"constructor\",            0, 0, true,  false, false, handle_constructor_attribute },\n-  { \"destructor\",             0, 0, true,  false, false, handle_destructor_attribute },\n-  { \"mode\",                   1, 1, true,  false, false, handle_mode_attribute },\n-  { \"section\",                1, 1, true,  false, false, handle_section_attribute },\n-  { \"aligned\",                0, 1, false, false, false, handle_aligned_attribute },\n-  { \"format\",                 3, 3, true,  false, false, handle_format_attribute },\n-  { \"format_arg\",             1, 1, true,  false, false, handle_format_arg_attribute },\n-  { \"weak\",                   0, 0, true,  false, false, handle_weak_attribute },\n-  { \"alias\",                  1, 1, true,  false, false, handle_alias_attribute },\n-  { \"no_instrument_function\", 0, 0, true,  false, false, handle_no_instrument_function_attribute },\n-  { \"no_check_memory_usage\",  0, 0, true,  false, false, handle_no_check_memory_usage_attribute },\n-  { \"malloc\",                 0, 0, true,  false, false, handle_malloc_attribute },\n-  { \"no_stack_limit\",         0, 0, true,  false, false, handle_no_limit_stack_attribute },\n-  { \"pure\",                   0, 0, true,  false, false, handle_pure_attribute },\n+  { \"const\",                  0, 0, true,  false, false,\n+\t\t\t      handle_const_attribute },\n+  { \"transparent_union\",      0, 0, false, false, false,\n+\t\t\t      handle_transparent_union_attribute },\n+  { \"constructor\",            0, 0, true,  false, false,\n+\t\t\t      handle_constructor_attribute },\n+  { \"destructor\",             0, 0, true,  false, false,\n+\t\t\t      handle_destructor_attribute },\n+  { \"mode\",                   1, 1, true,  false, false,\n+\t\t\t      handle_mode_attribute },\n+  { \"section\",                1, 1, true,  false, false,\n+\t\t\t      handle_section_attribute },\n+  { \"aligned\",                0, 1, false, false, false,\n+\t\t\t      handle_aligned_attribute },\n+  { \"format\",                 3, 3, true,  false, false,\n+\t\t\t      handle_format_attribute },\n+  { \"format_arg\",             1, 1, true,  false, false,\n+\t\t\t      handle_format_arg_attribute },\n+  { \"weak\",                   0, 0, true,  false, false,\n+\t\t\t      handle_weak_attribute },\n+  { \"alias\",                  1, 1, true,  false, false,\n+\t\t\t      handle_alias_attribute },\n+  { \"no_instrument_function\", 0, 0, true,  false, false,\n+\t\t\t      handle_no_instrument_function_attribute },\n+  { \"no_check_memory_usage\",  0, 0, true,  false, false,\n+\t\t\t      handle_no_check_memory_usage_attribute },\n+  { \"malloc\",                 0, 0, true,  false, false,\n+\t\t\t      handle_malloc_attribute },\n+  { \"no_stack_limit\",         0, 0, true,  false, false,\n+\t\t\t      handle_no_limit_stack_attribute },\n+  { \"pure\",                   0, 0, true,  false, false,\n+\t\t\t      handle_pure_attribute },\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n \n@@ -704,7 +726,8 @@ static const struct attribute_spec default_lang_attribute_table[] =\n };\n \n /* Table of machine-independent attributes for a particular language.  */\n-const struct attribute_spec *lang_attribute_table = default_lang_attribute_table;\n+const struct attribute_spec *lang_attribute_table\n+  = default_lang_attribute_table;\n \n /* Initialize attribute tables, and make some sanity checks\n    if --enable-checking.  */\n@@ -939,6 +962,7 @@ decl_attributes (node, attributes, flags)\n \n /* Handle a \"packed\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_packed_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -976,6 +1000,7 @@ handle_packed_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"nocommon\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_nocommon_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -997,6 +1022,7 @@ handle_nocommon_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"common\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_common_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1018,6 +1044,7 @@ handle_common_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"noreturn\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_noreturn_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1047,6 +1074,7 @@ handle_noreturn_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"unused\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_unused_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1083,6 +1111,7 @@ handle_unused_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"const\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_const_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1112,6 +1141,7 @@ handle_const_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"transparent_union\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_transparent_union_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1158,6 +1188,7 @@ handle_transparent_union_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"constructor\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_constructor_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1187,6 +1218,7 @@ handle_constructor_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"destructor\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_destructor_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1216,6 +1248,7 @@ handle_destructor_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"mode\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_mode_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1287,6 +1320,7 @@ handle_mode_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"section\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_section_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1343,6 +1377,7 @@ handle_section_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"aligned\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_aligned_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1426,6 +1461,7 @@ handle_aligned_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"weak\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_weak_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1441,6 +1477,7 @@ handle_weak_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle an \"alias\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_alias_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1490,6 +1527,7 @@ handle_alias_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"no_instrument_function\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_no_instrument_function_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1522,6 +1560,7 @@ handle_no_instrument_function_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"no_check_memory_usage\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_no_check_memory_usage_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1554,6 +1593,7 @@ handle_no_check_memory_usage_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"malloc\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_malloc_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1576,6 +1616,7 @@ handle_malloc_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"no_limit_stack\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_no_limit_stack_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;\n@@ -1608,6 +1649,7 @@ handle_no_limit_stack_attribute (node, name, args, flags, no_add_attrs)\n \n /* Handle a \"pure\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n+\n static tree\n handle_pure_attribute (node, name, args, flags, no_add_attrs)\n      tree *node;"}]}