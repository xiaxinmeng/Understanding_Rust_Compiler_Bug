{"sha": "0f7cd5e5735e5536bf7bc8ca2b998f7ce8b4ddee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY3Y2Q1ZTU3MzVlNTUzNmJmN2JjOGNhMmI5OThmN2NlOGI0ZGRlZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-28T12:07:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-28T12:07:40Z"}, "message": "libstdc++: Make std::span layout-compatible with struct iovec [PR 95609]\n\nThis change reorders the data members of std::span so that span<byte> is\nlayout-compatible with common implementations of struct iovec. This will\nallow span<byte> to be used directly in places that use a struct iovec\nto do scatter-gather I/O.\n\nIt's important to note that POSIX doesn't specify the order of members\nin iovec. Also the equivalent type on Windows has members in the other\norder, and uses type ULONG (which is always 32-bit whereas size_t is\n64-bit for Win64). So this change will only help for certain targets and\nan indirection between std::span and I/O system calls will still be\nneeded for the general case.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/95609\n\t* include/std/span (span): Reorder data members to match common\n\timplementations of struct iovec.\n\t* testsuite/23_containers/span/layout_compat.cc: New test.", "tree": {"sha": "0b9a3fbfdaa07c4791c439c3cd5a87f352f6105d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b9a3fbfdaa07c4791c439c3cd5a87f352f6105d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f7cd5e5735e5536bf7bc8ca2b998f7ce8b4ddee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7cd5e5735e5536bf7bc8ca2b998f7ce8b4ddee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f7cd5e5735e5536bf7bc8ca2b998f7ce8b4ddee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7cd5e5735e5536bf7bc8ca2b998f7ce8b4ddee/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/292c812a27c3a0d53b3689a9cdd0d2acfe17531b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/292c812a27c3a0d53b3689a9cdd0d2acfe17531b"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "24c61ba41728adf365ddbea49b86c29ed7a3727c", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7cd5e5735e5536bf7bc8ca2b998f7ce8b4ddee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7cd5e5735e5536bf7bc8ca2b998f7ce8b4ddee/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=0f7cd5e5735e5536bf7bc8ca2b998f7ce8b4ddee", "patch": "@@ -38,8 +38,8 @@\n \n #if __cplusplus > 201703L\n \n-#include <type_traits>\n #include <array>\n+#include <cstddef>\n #include <bits/stl_iterator.h>\n #include <bits/ranges_base.h>\n \n@@ -151,15 +151,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr\n       span() noexcept\n       requires ((_Extent + 1u) <= 1u)\n-      : _M_extent(0), _M_ptr(nullptr)\n+      : _M_ptr(nullptr), _M_extent(0)\n       { }\n \n       template<contiguous_iterator _It>\n \trequires __is_compatible_ref<iter_reference_t<_It>>::value\n \tconstexpr explicit(extent != dynamic_extent)\n \tspan(_It __first, size_type __count)\n \tnoexcept\n-\t: _M_extent(__count), _M_ptr(std::to_address(__first))\n+\t: _M_ptr(std::to_address(__first)), _M_extent(__count)\n \t{\n \t  if constexpr (_Extent != dynamic_extent)\n \t    {\n@@ -173,8 +173,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tconstexpr explicit(extent != dynamic_extent)\n \tspan(_It __first, _End __last)\n \tnoexcept(noexcept(__last - __first))\n-\t: _M_extent(static_cast<size_type>(__last - __first)),\n-\t  _M_ptr(std::to_address(__first))\n+\t: _M_ptr(std::to_address(__first)),\n+\t  _M_extent(static_cast<size_type>(__last - __first))\n \t{\n \t  if constexpr (_Extent != dynamic_extent)\n \t    {\n@@ -392,8 +392,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     private:\n-      [[no_unique_address]] __detail::__extent_storage<extent> _M_extent;\n       pointer _M_ptr;\n+      [[no_unique_address]] __detail::__extent_storage<extent> _M_extent;\n     };\n \n   // deduction guides"}, {"sha": "efc5b8e4706be525ffa8f2287c6db637cf97d467", "filename": "libstdc++-v3/testsuite/23_containers/span/layout_compat.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7cd5e5735e5536bf7bc8ca2b998f7ce8b4ddee/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flayout_compat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7cd5e5735e5536bf7bc8ca2b998f7ce8b4ddee/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flayout_compat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flayout_compat.cc?ref=0f7cd5e5735e5536bf7bc8ca2b998f7ce8b4ddee", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <span>\n+#include <cstddef>\n+\n+#if __has_include(<sys/uio.h>)\n+#include <sys/uio.h>\n+#else\n+struct iovec { void* iov_base; std::size_t iov_len; };\n+#endif\n+\n+#if __cpp_lib_is_pointer_interconvertible\n+using std::is_layout_compatible_v;\n+#else\n+// A poor substitute for is_layout_compatible_v\n+template<typename T, typename U>\n+  constexpr bool is_layout_compatible_v\n+    = std::is_standard_layout_v<T> && std::is_standard_layout_v<U>\n+      && sizeof(T) == sizeof(U) && alignof(T) == alignof(U);\n+#endif\n+\n+void\n+test_pr95609()\n+{\n+  using rbuf = std::span<const std::byte>;\n+  using wbuf = std::span<std::byte>;\n+\n+  static_assert(is_layout_compatible_v<rbuf, struct iovec>);\n+  static_assert(is_layout_compatible_v<wbuf, struct iovec>);\n+}"}]}