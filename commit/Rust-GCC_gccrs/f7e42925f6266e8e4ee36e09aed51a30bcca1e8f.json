{"sha": "f7e42925f6266e8e4ee36e09aed51a30bcca1e8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdlNDI5MjVmNjI2NmU4ZTRlZTM2ZTA5YWVkNTFhMzBiY2NhMWU4Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-12-21T17:47:32Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-21T17:47:32Z"}, "message": "h8300.md (*zero_extendqihi2_h8300): Make the second alternative \"#\".\n\n\t* config/h8300/h8300.md (*zero_extendqihi2_h8300): Make the\n\tsecond alternative \"#\".\n\t(*zero_extendqihi2_h8300hs): Likewise.\n\t(a define_split): New.\n\nFrom-SVN: r60388", "tree": {"sha": "bcb437286edf9cc5b84507d3fef8a0bca95a9b4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcb437286edf9cc5b84507d3fef8a0bca95a9b4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7e42925f6266e8e4ee36e09aed51a30bcca1e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e42925f6266e8e4ee36e09aed51a30bcca1e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7e42925f6266e8e4ee36e09aed51a30bcca1e8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e42925f6266e8e4ee36e09aed51a30bcca1e8f/comments", "author": null, "committer": null, "parents": [{"sha": "3cee1a78e2dc4b799959e01927a58d4e24170f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cee1a78e2dc4b799959e01927a58d4e24170f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cee1a78e2dc4b799959e01927a58d4e24170f19"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "c5170cd9f9660de6226688964d8d7180b50fec07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e42925f6266e8e4ee36e09aed51a30bcca1e8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e42925f6266e8e4ee36e09aed51a30bcca1e8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7e42925f6266e8e4ee36e09aed51a30bcca1e8f", "patch": "@@ -1,3 +1,10 @@\n+2002-12-21  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.md (*zero_extendqihi2_h8300): Make the\n+\tsecond alternative \"#\".\n+\t(*zero_extendqihi2_h8300hs): Likewise.\n+\t(a define_split): New.\n+\n 2002-12-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300-protos.h: Update the prototype for"}, {"sha": "b3b50febfd88eff6091f22e56611feaaf2980976", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e42925f6266e8e4ee36e09aed51a30bcca1e8f/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e42925f6266e8e4ee36e09aed51a30bcca1e8f/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=f7e42925f6266e8e4ee36e09aed51a30bcca1e8f", "patch": "@@ -1802,26 +1802,41 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendqihi2_h8300\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:HI (match_operand:QI 1 \"general_operand_src\" \"0,g>\")))]\n   \"TARGET_H8300\"\n   \"@\n   mov.b\t#0,%t0\n-  mov.b\t%R1,%s0\\;mov.b\t#0,%t0\"\n+  #\"\n   [(set_attr \"length\" \"2,10\")\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendqihi2_h8300hs\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:HI (match_operand:QI 1 \"general_operand_src\" \"0,g>\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"@\n   extu.w\t%T0\n-  mov.b\t%R1,%s0\\;extu.w\t%T0\"\n+  #\"\n   [(set_attr \"length\" \"2,10\")\n    (set_attr \"cc\" \"set_znv,set_znv\")])\n \n+;; Split the zero extension of a general operand (actually a memory\n+;; operand) into a load of the operand and the actual zero extension\n+;; so that 1) the length will be accurate, and 2) the zero extensions\n+;; appearing at the end of basic blocks may be merged.\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(zero_extend:HI (match_operand:QI 1 \"general_operand_src\" \"\")))]\n+  \"reload_completed\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(zero_extend:HI (match_dup 2)))]\n+  \"operands[2] = gen_rtx_REG (QImode, REGNO (operands[0]));\")\n+\n ;; The compiler can synthesize a H8/300H variant of this which is\n ;; just as efficient as one that we'd create\n (define_insn \"zero_extendqisi2\""}]}