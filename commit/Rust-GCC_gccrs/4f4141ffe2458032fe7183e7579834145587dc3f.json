{"sha": "4f4141ffe2458032fe7183e7579834145587dc3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0MTQxZmZlMjQ1ODAzMmZlNzE4M2U3NTc5ODM0MTQ1NTg3ZGMzZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2007-09-14T06:07:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2007-09-14T06:07:25Z"}, "message": "PR c++/17743, c++/19163\n\n        PR c++/17743, c++/19163\n        * decl2.c (is_late_template_attribute): New fn.\n        (splice_template_attributes, save_template_attributes): New fns.\n        (cplus_decl_attributes): Call save_template_attributes.\n        * pt.c (apply_late_template_attributes): New fn.\n        (instantiate_class_template, tsubst_decl): Use it.\n        * cp-tree.h: Declare is_late_template_attribute.\n\nFrom-SVN: r128488", "tree": {"sha": "388e176a69dd27b65d6eeb4f7edbffb5f452e428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/388e176a69dd27b65d6eeb4f7edbffb5f452e428"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f4141ffe2458032fe7183e7579834145587dc3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4141ffe2458032fe7183e7579834145587dc3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f4141ffe2458032fe7183e7579834145587dc3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f4141ffe2458032fe7183e7579834145587dc3f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9933b9d648e6992468c894fec7e5e821125e4b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9933b9d648e6992468c894fec7e5e821125e4b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9933b9d648e6992468c894fec7e5e821125e4b7"}], "stats": {"total": 147, "additions": 146, "deletions": 1}, "files": [{"sha": "26028a520c120943cfd98995e464a734c47b3ad2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4141ffe2458032fe7183e7579834145587dc3f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4141ffe2458032fe7183e7579834145587dc3f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4f4141ffe2458032fe7183e7579834145587dc3f", "patch": "@@ -1,3 +1,13 @@\n+2007-09-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/17743, c++/19163\n+\t* decl2.c (is_late_template_attribute): New fn.\n+\t(splice_template_attributes, save_template_attributes): New fns.\n+\t(cplus_decl_attributes): Call save_template_attributes.\n+\t* pt.c (apply_late_template_attributes): New fn.\n+\t(instantiate_class_template, tsubst_decl): Use it.\n+\t* cp-tree.h: Declare is_late_template_attribute.\n+\n 2007-09-13  Tom Tromey  <tromey@redhat.com>\n \n \t* parser.c (cp_lexer_new_main): Don't use"}, {"sha": "4f1e88c931e5827fbec67854019c478e61f4844b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4141ffe2458032fe7183e7579834145587dc3f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4141ffe2458032fe7183e7579834145587dc3f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4f4141ffe2458032fe7183e7579834145587dc3f", "patch": "@@ -4276,6 +4276,7 @@ extern tree grokfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t       tree, bool, tree, tree);\n extern tree grokbitfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t\t  tree);\n+extern bool is_late_template_attribute\t\t(tree);\n extern void cplus_decl_attributes\t\t(tree *, tree, int);\n extern void finish_anon_union\t\t\t(tree);\n extern void cp_write_global_declarations\t(void);"}, {"sha": "0c0961d90d01013d3e9c5a17d34b13625aa890cb", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4141ffe2458032fe7183e7579834145587dc3f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4141ffe2458032fe7183e7579834145587dc3f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4f4141ffe2458032fe7183e7579834145587dc3f", "patch": "@@ -985,13 +985,87 @@ grokbitfield (const cp_declarator *declarator,\n }\n \n \f\n+/* Returns true iff ATTR is an attribute which needs to be applied at\n+   instantiation time rather than template definition time.  */\n+\n+bool\n+is_late_template_attribute (tree attr)\n+{\n+  tree name = TREE_PURPOSE (attr);\n+  if (is_attribute_p (\"aligned\", name))\n+    return true;\n+  else\n+    return false;\n+}\n+\n+/* ATTR_P is a list of attributes.  Remove any attributes which need to be\n+   applied at instantiation time and return them.  */\n+\n+static tree\n+splice_template_attributes (tree *attr_p)\n+{\n+  tree *p = attr_p;\n+  tree late_attrs = NULL_TREE;\n+  tree *q = &late_attrs;\n+\n+  if (!p)\n+    return NULL_TREE;\n+\n+  for (; *p; )\n+    {\n+      if (is_late_template_attribute (*p))\n+\t{\n+\t  *q = *p;\n+\t  *p = TREE_CHAIN (*p);\n+\t  q = &TREE_CHAIN (*q);\n+\t  *q = NULL_TREE;\n+\t}\n+      else\n+\tp = &TREE_CHAIN (*p);\n+    }\n+\n+  return late_attrs;\n+}\n+\n+/* Remove any late attributes from the list in ATTR_P and attach them to\n+   DECL_P.  */\n+\n+static void\n+save_template_attributes (tree *attr_p, tree *decl_p)\n+{\n+  tree late_attrs = splice_template_attributes (attr_p);\n+  tree *q;\n+\n+  if (!late_attrs)\n+    return;\n+\n+  if (DECL_P (*decl_p))\n+    q = &DECL_ATTRIBUTES (*decl_p);\n+  else\n+    q = &TYPE_ATTRIBUTES (*decl_p);\n+\n+  if (*q)\n+    q = &TREE_CHAIN (tree_last (*q));\n+  *q = late_attrs;\n+}\n+\n+/* Like decl_attributes, but handle C++ complexity.  */\n+\n void\n cplus_decl_attributes (tree *decl, tree attributes, int flags)\n {\n   if (*decl == NULL_TREE || *decl == void_type_node\n-      || *decl == error_mark_node)\n+      || *decl == error_mark_node\n+      || attributes == NULL_TREE)\n     return;\n \n+  if (processing_template_decl)\n+    {\n+      save_template_attributes (&attributes, decl);\n+      if (attributes == NULL_TREE)\n+\treturn;\n+    }\n+\n   if (TREE_CODE (*decl) == TEMPLATE_DECL)\n     decl = &DECL_TEMPLATE_RESULT (*decl);\n "}, {"sha": "d918d86a2f39e59ce163cbef4c095528921b0aa3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4141ffe2458032fe7183e7579834145587dc3f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4141ffe2458032fe7183e7579834145587dc3f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4f4141ffe2458032fe7183e7579834145587dc3f", "patch": "@@ -6477,6 +6477,33 @@ can_complete_type_without_circularity (tree type)\n     return 1;\n }\n \n+/* Apply any attributes which had to be deferred until instantiation\n+   time.  DECL_P, ATTRIBUTES and ATTR_FLAGS are as cplus_decl_attributes;\n+   ARGS, COMPLAIN, IN_DECL are as tsubst.  */\n+\n+static void\n+apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n+\t\t\t\ttree args, tsubst_flags_t complain, tree in_decl)\n+{\n+  tree late_attrs = NULL_TREE;\n+  tree t;\n+\n+  if (DECL_P (*decl_p))\n+    DECL_ATTRIBUTES (*decl_p) = attributes;\n+  else\n+    TYPE_ATTRIBUTES (*decl_p) = attributes;\n+\n+  for (t = attributes; t; t = TREE_CHAIN (t))\n+    if (is_late_template_attribute (t))\n+      late_attrs = tree_cons\n+\t(TREE_PURPOSE (t),\n+\t tsubst_expr (TREE_VALUE (t), args, complain, in_decl,\n+\t\t      /*integral_constant_expression_p=*/false),\n+\t late_attrs);\n+\n+  cplus_decl_attributes (decl_p, late_attrs, attr_flags);\n+}\n+\n tree\n instantiate_class_template (tree type)\n {\n@@ -6647,6 +6674,9 @@ instantiate_class_template (tree type)\n      information.  */\n   xref_basetypes (type, base_list);\n \n+  apply_late_template_attributes (&type, TYPE_ATTRIBUTES (pattern),\n+\t\t\t\t  (int) ATTR_FLAG_TYPE_IN_PLACE,\n+\t\t\t\t  args, tf_error, NULL_TREE);\n \n   /* Now that our base classes are set up, enter the scope of the\n      class, so that name lookups into base classes, etc. will work\n@@ -7872,6 +7902,9 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t      = remove_attribute (\"visibility\", DECL_ATTRIBUTES (r));\n \t  }\n \tdetermine_visibility (r);\n+\n+\tapply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n+\t\t\t\t\targs, complain, in_decl);\n       }\n       break;\n \n@@ -7965,6 +7998,9 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n             if (!DECL_TEMPLATE_PARM_P (r))\n               DECL_ARG_TYPE (r) = type_passed_as (type);\n \n+\t    apply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n+\t\t\t\t\t    args, complain, in_decl);\n+\n             /* Keep track of the first new parameter we\n                generate. That's what will be returned to the\n                caller.  */\n@@ -8007,6 +8043,9 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \tTREE_CHAIN (r) = NULL_TREE;\n \tif (VOID_TYPE_P (type))\n \t  error (\"instantiation of %q+D as type %qT\", r, type);\n+\n+\tapply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n+\t\t\t\t\targs, complain, in_decl);\n       }\n       break;\n \n@@ -8201,6 +8240,9 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t  register_local_specialization (r, t);\n \n \tTREE_CHAIN (r) = NULL_TREE;\n+\n+\tapply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n+\t\t\t\t\targs, complain, in_decl);\n \tlayout_decl (r, 0);\n       }\n       break;"}, {"sha": "4fd651d6c3b105b2fec9ff26a30d3dd2d318b43e", "filename": "gcc/testsuite/g++.dg/ext/tmplattr2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f4141ffe2458032fe7183e7579834145587dc3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f4141ffe2458032fe7183e7579834145587dc3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftmplattr2.C?ref=4f4141ffe2458032fe7183e7579834145587dc3f", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/17743\n+\n+template <unsigned Len, unsigned Align>\n+struct aligned_storage\n+{\n+  typedef char type[Len] __attribute__((aligned((Align))));\n+};\n+\n+template<typename T>\n+struct X\n+{\n+  typename aligned_storage<sizeof(T),__alignof(T)>::type data;\n+};\n+\n+template<bool> struct StaticAssert;\n+template<> struct StaticAssert<true> {};\n+\n+StaticAssert<__alignof (X<double>) == __alignof (double)> dummy;"}]}