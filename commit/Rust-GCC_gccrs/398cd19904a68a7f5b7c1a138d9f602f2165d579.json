{"sha": "398cd19904a68a7f5b7c1a138d9f602f2165d579", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk4Y2QxOTkwNGE2OGE3ZjViN2MxYTEzOGQ5ZjYwMmYyMTY1ZDU3OQ==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-08-26T00:25:59Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-08-26T00:25:59Z"}, "message": "re PR c++/28852 (ICE on invalid conversion operator)\n\n\tPR c++/28852\n\t* cp-tree.h (grok_op_properties): Return bool instead of void.\n\t* decl.c (grokfndecl): Discard invalid operator declarations.\n\t(copy_fn_p): Revert change for PR 27547.\n\t(grok_op_properties): Return error status (true on success).\n\t* pt.c (tsubst_decl): Discard invalid operator declarations.\n\n\t* g++.dg/other/operator1.C: Add error-marker.\n\t* g++.dg/other/operator2.C: New test.\n\nFrom-SVN: r116463", "tree": {"sha": "74df540e6aa73f51e712e18ff456fede8456d1e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74df540e6aa73f51e712e18ff456fede8456d1e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/398cd19904a68a7f5b7c1a138d9f602f2165d579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/398cd19904a68a7f5b7c1a138d9f602f2165d579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/398cd19904a68a7f5b7c1a138d9f602f2165d579", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/398cd19904a68a7f5b7c1a138d9f602f2165d579/comments", "author": null, "committer": null, "parents": [{"sha": "b30409dacae526d29146a104aad8e51d4518d1a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b30409dacae526d29146a104aad8e51d4518d1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b30409dacae526d29146a104aad8e51d4518d1a1"}], "stats": {"total": 98, "additions": 68, "deletions": 30}, "files": [{"sha": "c56f75675eb7750abf82496c762d875c6ad67abf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=398cd19904a68a7f5b7c1a138d9f602f2165d579", "patch": "@@ -1,3 +1,12 @@\n+2006-08-25  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/28852\n+\t* cp-tree.h (grok_op_properties): Return bool instead of void.\n+\t* decl.c (grokfndecl): Discard invalid operator declarations.\n+\t(copy_fn_p): Revert change for PR 27547.\n+\t(grok_op_properties): Return error status (true on success).\n+\t* pt.c (tsubst_decl): Discard invalid operator declarations.\n+\n 2006-08-25  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/28056"}, {"sha": "713d3711420f5f9299fdff8ed825f267865635f0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=398cd19904a68a7f5b7c1a138d9f602f2165d579", "patch": "@@ -3899,7 +3899,7 @@ extern int copy_fn_p\t\t\t\t(tree);\n extern tree get_scope_of_declarator\t\t(const cp_declarator *);\n extern void grok_special_member_properties\t(tree);\n extern int grok_ctor_properties\t\t\t(tree, tree);\n-extern void grok_op_properties\t\t\t(tree, bool);\n+extern bool grok_op_properties\t\t\t(tree, bool);\n extern tree xref_tag\t\t\t\t(enum tag_types, tree, tag_scope, bool);\n extern tree xref_tag_from_type\t\t\t(tree, tree, tag_scope);\n extern void xref_basetypes\t\t\t(tree, tree);"}, {"sha": "542fcbe40af0b864eff4637810bfc82e048b9fad", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=398cd19904a68a7f5b7c1a138d9f602f2165d579", "patch": "@@ -6117,8 +6117,9 @@ grokfndecl (tree ctype,\n       quals = TYPE_UNQUALIFIED;\n     }\n \n-  if (IDENTIFIER_OPNAME_P (DECL_NAME (decl)))\n-    grok_op_properties (decl, /*complain=*/true);\n+  if (IDENTIFIER_OPNAME_P (DECL_NAME (decl))\n+      && !grok_op_properties (decl, /*complain=*/true))\n+    return NULL_TREE;\n \n   if (ctype && decl_function_context (decl))\n     DECL_NO_STATIC_CHAIN (decl) = 1;\n@@ -8900,9 +8901,7 @@ copy_fn_p (tree d)\n   tree arg_type;\n   int result = 1;\n \n-  if (!DECL_FUNCTION_MEMBER_P (d))\n-    /* Non-members are invalid.  We complained, but kept the declaration.  */\n-    return 0;\n+  gcc_assert (DECL_FUNCTION_MEMBER_P (d));\n \n   if (TREE_CODE (d) == TEMPLATE_DECL\n       || (DECL_TEMPLATE_INFO (d)\n@@ -9055,7 +9054,7 @@ unary_op_p (enum tree_code code)\n /* DECL is a declaration for an overloaded operator.  If COMPLAIN is true,\n    errors are issued for invalid declarations.  */\n \n-void\n+bool\n grok_op_properties (tree decl, bool complain)\n {\n   tree argtypes = TYPE_ARG_TYPES (TREE_TYPE (decl));\n@@ -9141,9 +9140,15 @@ grok_op_properties (tree decl, bool complain)\n       if (DECL_NAMESPACE_SCOPE_P (decl))\n \t{\n \t  if (CP_DECL_CONTEXT (decl) != global_namespace)\n-\t    error (\"%qD may not be declared within a namespace\", decl);\n+\t    {\n+\t      error (\"%qD may not be declared within a namespace\", decl);\n+\t      return false;\n+\t    }\n \t  else if (!TREE_PUBLIC (decl))\n-\t    error (\"%qD may not be declared as static\", decl);\n+\t    {\n+\t      error (\"%qD may not be declared as static\", decl);\n+\t      return false;\n+\t    }\n \t}\n     }\n \n@@ -9165,7 +9170,7 @@ grok_op_properties (tree decl, bool complain)\n \t      || operator_code == NOP_EXPR)\n \t    {\n \t      error (\"%qD must be a nonstatic member function\", decl);\n-\t      return;\n+\t      return false;\n \t    }\n \t  else\n \t    {\n@@ -9175,14 +9180,14 @@ grok_op_properties (tree decl, bool complain)\n \t\t{\n \t\t  error (\"%qD must be either a non-static member \"\n \t\t\t \"function or a non-member function\", decl);\n-\t\t  return;\n+\t\t  return false;\n \t\t}\n \n \t      for (p = argtypes; p && p != void_list_node; p = TREE_CHAIN (p))\n \t\t{\n \t\t  tree arg = non_reference (TREE_VALUE (p));\n \t\t  if (arg == error_mark_node)\n-\t\t    return;\n+\t\t    return false;\n \n \t\t  /* IS_AGGR_TYPE, rather than CLASS_TYPE_P, is used\n \t\t     because these checks are performed even on\n@@ -9193,20 +9198,18 @@ grok_op_properties (tree decl, bool complain)\n \n \t      if (!p || p == void_list_node)\n \t\t{\n-\t\t  if (!complain)\n-\t\t    return;\n-\n-\t\t  error (\"%qD must have an argument of class or \"\n-\t\t\t \"enumerated type\",\n-\t\t\t decl);\n+\t\t  if (complain)\n+\t\t    error (\"%qD must have an argument of class or \"\n+\t\t\t   \"enumerated type\", decl);\n+\t\t  return false;\n \t\t}\n \t    }\n \t}\n \n       /* There are no restrictions on the arguments to an overloaded\n \t \"operator ()\".  */\n       if (operator_code == CALL_EXPR)\n-\treturn;\n+\treturn true;\n \n       /* Warn about conversion operators that will never be used.  */\n       if (IDENTIFIER_TYPENAME_P (name)\n@@ -9246,9 +9249,13 @@ grok_op_properties (tree decl, bool complain)\n \t{\n \t  /* 13.4.0.3 */\n \t  error (\"ISO C++ prohibits overloading operator ?:\");\n+\t  return false;\n \t}\n       else if (ellipsis_p)\n-\terror (\"%qD must not have variable number of arguments\", decl);\n+\t{\n+\t  error (\"%qD must not have variable number of arguments\", decl);\n+\t  return false;\n+\t}\n       else if (ambi_op_p (operator_code))\n \t{\n \t  if (arity == 1)\n@@ -9298,11 +9305,11 @@ grok_op_properties (tree decl, bool complain)\n \t\t{\n \t\t  if (methodp)\n \t\t    error (\"postfix %qD must take %<int%> as its argument\",\n-\t\t\t      decl);\n+\t\t\t   decl);\n \t\t  else\n-\t\t    error\n-\t\t      (\"postfix %qD must take %<int%> as its second argument\",\n-\t\t       decl);\n+\t\t    error (\"postfix %qD must take %<int%> as its second \"\n+\t\t\t   \"argument\", decl);\n+\t\t  return false;\n \t\t}\n \t    }\n \t  else\n@@ -9311,6 +9318,7 @@ grok_op_properties (tree decl, bool complain)\n \t\terror (\"%qD must take either zero or one argument\", decl);\n \t      else\n \t\terror (\"%qD must take either one or two arguments\", decl);\n+\t      return false;\n \t    }\n \n \t  /* More Effective C++ rule 6.  */\n@@ -9349,6 +9357,7 @@ grok_op_properties (tree decl, bool complain)\n \t\terror (\"%qD must take %<void%>\", decl);\n \t      else\n \t\terror (\"%qD must take exactly one argument\", decl);\n+\t      return false;\n \t    }\n \t}\n       else /* if (binary_op_p (operator_code)) */\n@@ -9359,6 +9368,7 @@ grok_op_properties (tree decl, bool complain)\n \t\terror (\"%qD must take exactly one argument\", decl);\n \t      else\n \t\terror (\"%qD must take exactly two arguments\", decl);\n+\t      return false;\n \t    }\n \n \t  /* More Effective C++ rule 7.  */\n@@ -9395,11 +9405,13 @@ grok_op_properties (tree decl, bool complain)\n \t\t  pedwarn (\"%qD cannot have default arguments\", decl);\n \t      }\n \t    else\n-\t      error (\"%qD cannot have default arguments\", decl);\n+\t      {\n+\t\terror (\"%qD cannot have default arguments\", decl);\n+\t\treturn false;\n+\t      }\n \t  }\n-\n     }\n-\n+  return true;\n }\n \f\n /* Return a string giving the keyword associate with CODE.  */"}, {"sha": "749291c63e3877179eb15e13629aaa8108c49331", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=398cd19904a68a7f5b7c1a138d9f602f2165d579", "patch": "@@ -6668,8 +6668,9 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t    if (PRIMARY_TEMPLATE_P (gen_tmpl))\n \t      clone_function_decl (r, /*update_method_vec_p=*/0);\n \t  }\n-\telse if (IDENTIFIER_OPNAME_P (DECL_NAME (r)))\n-\t  grok_op_properties (r, (complain & tf_error) != 0);\n+\telse if (IDENTIFIER_OPNAME_P (DECL_NAME (r))\n+\t\t && !grok_op_properties (r, (complain & tf_error) != 0))\n+\t  return error_mark_node;\n \n \tif (DECL_FRIEND_P (t) && DECL_FRIEND_CONTEXT (t))\n \t  SET_DECL_FRIEND_CONTEXT (r,"}, {"sha": "8fa3f7f78938f8631c908d6c87b65b373b231180", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=398cd19904a68a7f5b7c1a138d9f602f2165d579", "patch": "@@ -1,3 +1,9 @@\n+2006-08-25  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/28852\n+\t* g++.dg/other/operator1.C: Add error-marker.\n+\t* g++.dg/other/operator2.C: New test.\n+\n 2006-08-25  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/27893"}, {"sha": "86841c9995696a3220335481898107224dfc8744", "filename": "gcc/testsuite/g++.dg/other/operator1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator1.C?ref=398cd19904a68a7f5b7c1a138d9f602f2165d579", "patch": "@@ -5,5 +5,5 @@ int operator=(int);  // { dg-error \"member function\" }\n \n void foo()\n {\n-  operator=(0);\n+  operator=(0);  // { dg-error \"not defined\" }\n }"}, {"sha": "4b952bf11eb98a809504531e846eb4482386537f", "filename": "gcc/testsuite/g++.dg/other/operator2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/398cd19904a68a7f5b7c1a138d9f602f2165d579/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator2.C?ref=398cd19904a68a7f5b7c1a138d9f602f2165d579", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/28852\n+// { do-do compile }\n+\n+struct A\n+{\n+  operator int&(int);  // { dg-error \"void\" }\n+};\n+\n+A a;\n+int& i = a;  // { dg-error \"initialization\" }"}]}