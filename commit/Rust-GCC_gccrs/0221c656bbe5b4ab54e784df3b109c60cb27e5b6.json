{"sha": "0221c656bbe5b4ab54e784df3b109c60cb27e5b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIyMWM2NTZiYmU1YjRhYjU0ZTc4NGRmM2IxMDljNjBjYjI3ZTViNg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-12-02T19:33:13Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-12-08T22:26:37Z"}, "message": "c++: ICE with -fsanitize=vptr and constexpr dynamic_cast [PR98103]\n\n-fsanitize=vptr initializes all vtable pointers to null so that it can\ncatch invalid calls; see cp_ubsan_maybe_initialize_vtbl_ptrs.  That\nmeans that evaluating a vtable reference can produce a null pointer\nin this mode, so cxx_eval_dynamic_cast_fn should check that and give\nand error.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98103\n\t* constexpr.c (cxx_eval_dynamic_cast_fn): If the evaluating of vtable\n\tyields a null pointer, give an error and return.  Use objtype.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98103\n\t* g++.dg/ubsan/vptr-18.C: New test.", "tree": {"sha": "96822a349ac389e06496aea1a0f54ec4eee2e6d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96822a349ac389e06496aea1a0f54ec4eee2e6d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0221c656bbe5b4ab54e784df3b109c60cb27e5b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0221c656bbe5b4ab54e784df3b109c60cb27e5b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0221c656bbe5b4ab54e784df3b109c60cb27e5b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0221c656bbe5b4ab54e784df3b109c60cb27e5b6/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea350d1d7edf8afaae9e6723cda535c9eaa7562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea350d1d7edf8afaae9e6723cda535c9eaa7562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea350d1d7edf8afaae9e6723cda535c9eaa7562"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "b6f3e6e7a3143b8ed71804b76957191039449d53", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0221c656bbe5b4ab54e784df3b109c60cb27e5b6/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0221c656bbe5b4ab54e784df3b109c60cb27e5b6/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=0221c656bbe5b4ab54e784df3b109c60cb27e5b6", "patch": "@@ -1998,11 +1998,20 @@ cxx_eval_dynamic_cast_fn (const constexpr_ctx *ctx, tree call,\n      to the object under construction or destruction, this object is\n      considered to be a most derived object that has the type of the\n      constructor or destructor's class.  */\n-  tree vtable = build_vfield_ref (obj, TREE_TYPE (obj));\n+  tree vtable = build_vfield_ref (obj, objtype);\n   vtable = cxx_eval_constant_expression (ctx, vtable, /*lval*/false,\n \t\t\t\t\t non_constant_p, overflow_p);\n   if (*non_constant_p)\n     return call;\n+  /* With -fsanitize=vptr, we initialize all vtable pointers to null,\n+     so it's possible that we got a null pointer now.  */\n+  if (integer_zerop (vtable))\n+    {\n+      if (!ctx->quiet)\n+\terror_at (loc, \"virtual table pointer is used uninitialized\");\n+      *non_constant_p = true;\n+      return integer_zero_node;\n+    }\n   /* VTABLE will be &_ZTV1A + 16 or similar, get _ZTV1A.  */\n   vtable = extract_obj_from_addr_offset (vtable);\n   const tree mdtype = DECL_CONTEXT (vtable);"}, {"sha": "cd2ca0a9fb63a5b0b2e1701b01450d20f996e4ef", "filename": "gcc/testsuite/g++.dg/ubsan/vptr-18.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0221c656bbe5b4ab54e784df3b109c60cb27e5b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0221c656bbe5b4ab54e784df3b109c60cb27e5b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-18.C?ref=0221c656bbe5b4ab54e784df3b109c60cb27e5b6", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/98103\n+// { dg-do compile { target c++20 } }\n+// { dg-additional-options \"-fsanitize=vptr -fno-sanitize-recover=vptr\" }\n+// Modified constexpr-dynamic17.C.\n+\n+struct V {\n+  virtual void f();\n+};\n+\n+struct A : V { };\n+\n+struct B : V {\n+  constexpr B(V*, A*);\n+};\n+\n+struct D : B, A {\n+  constexpr D() : B((A*)this, this) { }\n+};\n+\n+constexpr B::B(V* v, A* a)\n+{\n+  dynamic_cast<B*>(a); // { dg-error \"uninitialized\" }\n+}\n+\n+constexpr D d;"}]}