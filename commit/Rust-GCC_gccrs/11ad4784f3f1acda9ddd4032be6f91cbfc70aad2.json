{"sha": "11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFhZDQ3ODRmM2YxYWNkYTlkZGQ0MDMyYmU2ZjkxY2JmYzcwYWFkMg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-05-28T17:33:14Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-05-28T17:33:14Z"}, "message": "tree.h: Forward-declare struct realvaluetype.\n\n\t* tree.h: Forward-declare struct realvaluetype.\n\t(struct tree_real_cst): Point to the REAL_VALUE_TYPE, do not\n\tcontain it.\n\t(TREE_REAL_CST_PTR): New accessor.\n\t(TREE_REAL_CST): Update.\n\t* real.h: Include machmode.h.\n\t(realvaluetype): Make it struct realvaluetype, not a typedef.\n\t(build_real): Prototype here.\n\n\t* tree.c: Include real.h.\n\t(build_real): Allocate the REAL_VALUE_TYPE as a separate\n\tobject in GC memory, set TREE_REAL_CST_PTR to point to it.\n\t(build_real_from_int_cst): Use build_real.\n\t* ggc-common.c (ggc_mark_trees): Mark TREE_REAL_CST_PTR of a\n\tREAL_CST.\n\n\t* builtins.c, c-common.c, c-lex.c, dwarf2out.c, expr.c,\n\tfold-const.c, print-tree.c, real.c, cp/mangle.c, cp/tree.c,\n\tf/bld.c, f/com.c, f/expr.c, f/target.c, java/decl.c,\n\tjava/jcf-parse.c, java/parse.y, java/typeck.c: Include real.h.\n\t* Makefile.in, cp/Make-lang.in, f/Make-lang.in,\n\tjava/Make-lang.in: Update dependency lists.\n\nFrom-SVN: r53959", "tree": {"sha": "005b9830ad50445b6392fd80c98e1ea6584a5deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/005b9830ad50445b6392fd80c98e1ea6584a5deb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/comments", "author": null, "committer": null, "parents": [{"sha": "bf77398cef20e7f1d079bb8b76d383c4ca163165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf77398cef20e7f1d079bb8b76d383c4ca163165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf77398cef20e7f1d079bb8b76d383c4ca163165"}], "stats": {"total": 148, "additions": 104, "deletions": 44}, "files": [{"sha": "a08053e06521d8f805e0a474f3a882f5f12b1d74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -1,3 +1,25 @@\n+2002-05-28  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* tree.h: Forward-declare struct realvaluetype.\n+\t(struct tree_real_cst): Point to the REAL_VALUE_TYPE, do not\n+\tcontain it.\n+\t(TREE_REAL_CST_PTR): New accessor.\n+\t(TREE_REAL_CST): Update.\n+\t* real.h: Include machmode.h.\n+\t(realvaluetype): Make it struct realvaluetype, not a typedef.  \n+\t(build_real): Prototype here.\n+\n+\t* tree.c: Include real.h.\n+\t(build_real): Allocate the REAL_VALUE_TYPE as a separate  \n+\tobject in GC memory, set TREE_REAL_CST_PTR to point to it. \n+\t(build_real_from_int_cst): Use build_real.\n+\t* ggc-common.c (ggc_mark_trees): Mark TREE_REAL_CST_PTR of a\n+\tREAL_CST.\n+\n+\t* builtins.c, c-common.c, c-lex.c, dwarf2out.c, expr.c,\n+\tfold-const.c, print-tree.c, real.c: Include real.h.\n+\t* Makefile.in: Update dependency lists.\n+\n 2002-05-28  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* basic-block.h (last_basic_block): Declare."}, {"sha": "1f71654a5123b693751ce0193957e7f4eef0fe1c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -556,7 +556,7 @@ MACHMODE_H = machmode.h machmode.def\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H)\n RTL_H = $(RTL_BASE_H) genrtl.h\n PARAMS_H = params.h params.def\n-TREE_H = tree.h real.h tree.def $(MACHMODE_H) tree-check.h version.h builtins.def\n+TREE_H = tree.h tree.def $(MACHMODE_H) tree-check.h version.h builtins.def\n BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h varray.h\n DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n@@ -1174,7 +1174,7 @@ c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     langhooks.h $(LANGHOOKS_DEF_H) c-common.h\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) \\\n-    debug.h $(C_TREE_H) c-common.h \\\n+    debug.h $(C_TREE_H) c-common.h real.h \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n     mbchar.h $(CPPLIB_H) $(EXPR_H) $(TM_P_H)\n c-objc-common.o : c-objc-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n@@ -1231,7 +1231,7 @@ s-under: $(GCC_PASSES)\n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(OBSTACK_H) \\\n \t$(C_COMMON_H) flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n \t$(EXPR_H) $(TM_P_H) builtin-types.def builtin-attrs.def $(TARGET_H) \\\n-\tdiagnostic.h tree-inline.h except.h\n+\tdiagnostic.h tree-inline.h except.h real.h\n \n # A file used by all variants of C and some other languages.\n \n@@ -1349,7 +1349,7 @@ langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) toplev.h \\\n    tree-inline.h $(RTL_H) insn-config.h integrate.h langhooks.h \\\n    $(LANGHOOKS_DEF_H) flags.h\n tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h function.h toplev.h \\\n-   $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) langhooks.h\n+   $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) langhooks.h real.h\n tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n    flags.h langhooks.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n    $(EXPR_H) $(SPLAY_TREE_H) tree-dump.h\n@@ -1358,11 +1358,11 @@ tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) \\\n    $(VARRAY_H) $(HASHTAB_H) $(SPLAY_TREE_H) toplev.h langhooks.h \\\n    $(C_COMMON_H) tree-inline.h\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(GGC_H) \\\n-   langhooks.h\n+   langhooks.h real.h\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h \\\n    function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H) $(TM_P_H) $(TARGET_H) \\\n    langhooks.h\n-fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h \\\n+fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h real.h \\\n    toplev.h $(HASHTAB_H) $(EXPR_H) $(RTL_H) $(GGC_H) $(TM_P_H) langhooks.h\n diagnostic.o : diagnostic.c diagnostic.h real.h diagnostic.def \\\n    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_P_H) flags.h $(GGC_H) \\\n@@ -1414,11 +1414,11 @@ except.o : except.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h function.h \\\n    $(REGS_H) $(EXPR_H) $(OPTABS_H) libfuncs.h insn-attr.h insn-config.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\\n-   except.h reload.h $(GGC_H) langhooks.h intl.h $(TM_P_H)\n+   except.h reload.h $(GGC_H) langhooks.h intl.h $(TM_P_H) real.h\n builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    $(TARGET_H) function.h $(REGS_H) $(EXPR_H) $(OPTABS_H) insn-config.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\\n-   except.h $(TM_P_H) $(PREDICT_H) libfuncs.h\n+   except.h $(TM_P_H) $(PREDICT_H) libfuncs.h real.h\n calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    $(EXPR_H) langhooks.h \\\n    libfuncs.h $(REGS_H) toplev.h output.h function.h $(TIMEVAR_H) $(TM_P_H)\n@@ -1443,7 +1443,7 @@ dwarfout.o : dwarfout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf.h \\\n    flags.h insn-config.h reload.h output.h toplev.h $(TM_P_H) \\\n    debug.h langhooks.h\n dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf2.h \\\n-   debug.h flags.h insn-config.h reload.h output.h diagnostic.h \\\n+   debug.h flags.h insn-config.h reload.h output.h diagnostic.h real.h \\\n    hard-reg-set.h $(REGS_H) $(EXPR_H) libfuncs.h toplev.h dwarf2out.h varray.h \\\n    $(GGC_H) except.h dwarf2asm.h $(TM_P_H) langhooks.h\n dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) flags.h $(RTL_H) $(TREE_H) \\"}, {"sha": "a686c8dce9dfb74d785cf99b153a3ff609ebbd27", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -22,6 +22,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include \"system.h\"\n #include \"machmode.h\"\n+#include \"real.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"obstack.h\""}, {"sha": "b1a9205d11927dfa057f1d05d1544f1d443f22e7", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -22,6 +22,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include \"system.h\"\n #include \"tree.h\"\n+#include \"real.h\"\n #include \"flags.h\"\n #include \"toplev.h\"\n #include \"output.h\""}, {"sha": "2ecc147ce71a84a6070e477af89d2e81f62e3bfe", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -22,6 +22,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include \"system.h\"\n \n+#include \"real.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"expr.h\""}, {"sha": "e19c55abc783a5ade933f6b38b4ba7f780aee5fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -1,3 +1,8 @@\n+2002-05-28  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* mangle.c, tree.c: Include real.h.\n+\t* Make-lang.in: Update dependency lists.\n+\n 2002-05-25  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* lex.c: Don't include c-lex.h."}, {"sha": "029b6469f714b9f88fa022033f6371959f5b52ac", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -273,7 +273,7 @@ cp/method.o: cp/method.c $(CXX_TREE_H) toplev.h $(GGC_H) $(RTL_H) $(EXPR_H) \\\n cp/cvt.o: cp/cvt.c $(CXX_TREE_H) cp/decl.h flags.h toplev.h convert.h\n cp/search.o: cp/search.c $(CXX_TREE_H) stack.h flags.h toplev.h $(RTL_H)\n cp/tree.o: cp/tree.c $(CXX_TREE_H) flags.h toplev.h $(GGC_H) $(RTL_H) \\\n-  insn-config.h integrate.h tree-inline.h\n+  insn-config.h integrate.h tree-inline.h real.h\n cp/ptree.o: cp/ptree.c $(CXX_TREE_H) $(SYSTEM_H)\n cp/rtti.o: cp/rtti.c $(CXX_TREE_H) flags.h toplev.h\n cp/except.o: cp/except.c $(CXX_TREE_H) flags.h $(RTL_H) except.h toplev.h \\\n@@ -291,7 +291,7 @@ cp/semantics.o: cp/semantics.c $(CXX_TREE_H) cp/lex.h except.h toplev.h \\\n cp/dump.o: cp/dump.c $(CXX_TREE_H) tree-dump.h\n cp/optimize.o: cp/optimize.c $(CXX_TREE_H) rtl.h integrate.h insn-config.h \\\n   input.h $(PARAMS_H) debug.h tree-inline.h\n-cp/mangle.o: cp/mangle.c $(CXX_TREE_H) toplev.h\n+cp/mangle.o: cp/mangle.c $(CXX_TREE_H) toplev.h real.h\n \n cp/parse.o: cp/parse.c $(CXX_TREE_H) flags.h cp/lex.h except.h output.h \\\n \t$(SYSTEM_H) toplev.h $(GGC_H)"}, {"sha": "8365b0354fac111b3e729622ea5f14910dcb27cb", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -51,6 +51,7 @@\n #include \"system.h\"\n #include \"tree.h\"\n #include \"cp-tree.h\"\n+#include \"real.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n #include \"varray.h\""}, {"sha": "a144c6d928f7c86c0c34935dc88a6353e25c6f91", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"flags.h\"\n+#include \"real.h\"\n #include \"rtl.h\"\n #include \"toplev.h\"\n #include \"ggc.h\""}, {"sha": "07295229a11756f4eacbcbca8bf4fa6a774d29bf", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -38,6 +38,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n+#include \"real.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n #include \"regs.h\""}, {"sha": "f839b402676874fa6687cfccce5c8f519daa45d6", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -22,6 +22,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include \"system.h\"\n #include \"machmode.h\"\n+#include \"real.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"obstack.h\""}, {"sha": "03c1b67b322ad8c23ccfaf19934b0e4a318eed18", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -1,3 +1,8 @@\n+2002-05-28  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* bld.c, com.c, expr.c, target.c: Include real.h.\n+\t* Make-lang.in: Update dependency lists.\n+\n 2002-05-16  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* Make-lang.in: Allow for PWDCMD to override hardcoded pwd."}, {"sha": "288ed9a156f5b64fbe0924bfb0d85c8dfb61cd13", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -357,14 +357,14 @@ f/bld.o: f/bld.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/bld.h f/bld-op.def f/bit.h \\\n  f/malloc.h f/com.h f/com-rt.def $(TREE_H) f/info.h f/info-b.def f/info-k.def \\\n  f/info-w.def f/target.h f/bad.h f/bad.def f/where.h glimits.h f/top.h f/lex.h \\\n  f/type.h f/lab.h f/storag.h f/symbol.h f/symbol.def f/equiv.h f/global.h \\\n- f/name.h f/intrin.h f/intrin.def\n+ f/name.h f/intrin.h f/intrin.def real.h\n f/com.o: f/com.c f/proj.h $(CONFIG_H) $(SYSTEM_H) flags.h $(RTL_H) $(TREE_H) \\\n  output.h convert.h f/com.h f/com-rt.def f/bld.h f/bld-op.def f/bit.h \\\n  f/malloc.h f/info.h f/info-b.def f/info-k.def f/info-w.def f/target.h f/bad.h \\\n  f/bad.def f/where.h glimits.h f/top.h f/lex.h f/type.h f/intrin.h \\\n  f/intrin.def f/lab.h f/symbol.h f/symbol.def f/equiv.h f/storag.h f/global.h \\\n  f/name.h f/expr.h f/implic.h f/src.h f/st.h $(GGC_H) toplev.h diagnostic.h \\\n- langhooks.h langhooks-def.h intl.h\n+ langhooks.h langhooks-def.h intl.h real.h\n f/data.o: f/data.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/data.h f/bld.h f/bld-op.def \\\n  f/bit.h f/malloc.h f/com.h f/com-rt.def $(TREE_H) f/info.h f/info-b.def \\\n  f/info-k.def f/info-w.def f/target.h f/bad.h f/bad.def f/where.h glimits.h \\\n@@ -380,7 +380,7 @@ f/expr.o: f/expr.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/expr.h f/bld.h f/bld-op.de\n  f/info-k.def f/info-w.def f/target.h f/bad.h f/bad.def f/where.h glimits.h \\\n  f/top.h f/lex.h f/type.h f/lab.h f/storag.h f/symbol.h f/symbol.def f/equiv.h \\\n  f/global.h f/name.h f/intrin.h f/intrin.def f/implic.h f/src.h f/st.h \\\n- f/stamp-str\n+ f/stamp-str real.h\n f/fini.o: f/fini.c f/proj.h hconfig.h $(SYSTEM_H) f/malloc.h\n f/global.o: f/global.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/global.h f/info.h \\\n  f/info-b.def f/info-k.def f/info-w.def f/target.h $(TREE_H) f/bad.h f/bad.def \\\n@@ -512,7 +512,7 @@ f/symbol.o: f/symbol.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/symbol.h \\\n  f/lex.h f/type.h f/lab.h f/storag.h f/intrin.h f/intrin.def f/equiv.h \\\n  f/global.h f/name.h f/src.h f/st.h\n f/target.o: f/target.c f/proj.h $(CONFIG_H) $(SYSTEM_H) glimits.h f/target.h \\\n- $(TREE_H) f/bad.h f/bad.def f/where.h f/top.h f/malloc.h f/info.h \\\n+ $(TREE_H) f/bad.h f/bad.def f/where.h f/top.h f/malloc.h f/info.h real.h \\\n  f/info-b.def f/info-k.def f/info-w.def f/type.h f/lex.h diagnostic.h\n f/top.o: f/top.c f/proj.h $(CONFIG_H) $(SYSTEM_H) f/top.h f/malloc.h f/where.h \\\n  glimits.h f/bad.h f/bad.def f/bit.h f/bld.h f/bld-op.def f/com.h \\"}, {"sha": "3460c241b246954571c3399e0b6c9fe0c6204e3a", "filename": "gcc/f/bld.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2Fbld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2Fbld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbld.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -43,6 +43,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"malloc.h\"\n #include \"target.h\"\n #include \"where.h\"\n+#include \"real.h\"\n \n /* Externals defined here.  */\n "}, {"sha": "d66951542b4672683b539e9d47c8aed28f196d46", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -82,6 +82,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"proj.h\"\n #include \"flags.h\"\n+#include \"real.h\"\n #include \"rtl.h\"\n #include \"toplev.h\"\n #include \"tree.h\""}, {"sha": "4824be7cdb35801ea228ec21d138375782794d0a", "filename": "gcc/f/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fexpr.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -48,6 +48,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"str.h\"\n #include \"target.h\"\n #include \"where.h\"\n+#include \"real.h\"\n \n /* Externals defined here. */\n "}, {"sha": "74c9760a05ce6ed5cc36cb2230d3f1d8faf318df", "filename": "gcc/f/target.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ff%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftarget.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -76,6 +76,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"info.h\"\n #include \"lex.h\"\n #include \"malloc.h\"\n+#include \"real.h\"\n \n /* Externals defined here. */\n "}, {"sha": "400285e5fec2340c7c6cea2103360ced33d17f26", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -46,6 +46,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n+#include \"real.h\"\n #include \"rtl.h\"\n #include \"expr.h\"\n #include \"tm_p.h\""}, {"sha": "f818fa1c808b47b1fc9349ffb3602a5fc3383f70", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -457,6 +457,10 @@ ggc_mark_trees ()\n \t  ggc_mark_tree (TREE_IMAGPART (t));\n \t  break;\n \n+\tcase REAL_CST:\n+\t  ggc_mark (TREE_REAL_CST_PTR (t));\n+\t  break;\n+\n \tcase PARM_DECL:\n \t  ggc_mark_rtx (DECL_INCOMING_RTL (t));\n \t  break;"}, {"sha": "3b630d324c335a8bd3f580980ca382b06aaac608", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -1,3 +1,8 @@\n+2002-05-28  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* decl.c, jcf-parse.c, parse.y, typeck.c: Include real.h.\n+\t* Make-lang.in: Update dependency lists.\n+\n 2002-05-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gjavah.c (throwable_p): Do not free the name of the class after"}, {"sha": "c8bce83cd67b98728fa193366ca5871c3469aa8a", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -273,7 +273,7 @@ java/constants.o: java/constants.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n   toplev.h $(SYSTEM_H) $(GGC_H)\n java/decl.o: java/decl.c $(CONFIG_H) $(JAVA_TREE_H) $(RTL_H) java/jcf.h \\\n   toplev.h flags.h $(SYSTEM_H) function.h expr.h libfuncs.h except.h \\\n-  java/java-except.h $(GGC_H)\n+  java/java-except.h $(GGC_H) real.h\n java/except.o: java/except.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h real.h \\\n   $(RTL_H) java/javaop.h java/java-opcodes.h except.h java/java-except.h \\\n   toplev.h $(SYSTEM_H) function.h \n@@ -284,7 +284,7 @@ java/expr.o: java/expr.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h real.h \\\n java/jcf-depend.o: java/jcf-depend.c $(CONFIG_H) $(SYSTEM_H) java/jcf.h\n java/jcf-parse.o: java/jcf-parse.c $(CONFIG_H) $(JAVA_TREE_H) flags.h \\\n   input.h java/java-except.h $(SYSTEM_H) toplev.h java/parse.h $(GGC_H) \\\n-  debug.h\n+  debug.h real.h\n java/jcf-write.o: java/jcf-write.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n   $(RTL_H) java/java-opcodes.h java/parse.h java/buffer.h $(SYSTEM_H) \\\n   toplev.h $(GGC_H)\n@@ -300,7 +300,7 @@ java/mangle_name.o: java/mangle_name.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) \\\n java/parse-scan.o: $(CONFIG_H) $(SYSTEM_H) toplev.h $(JAVA_LEX_C) java/parse.h \\\n   java/lex.h\n java/typeck.o: java/typeck.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n-  java/convert.h toplev.h $(SYSTEM_H) $(GGC_H)\n+  java/convert.h toplev.h $(SYSTEM_H) $(GGC_H) real.h\n java/verify.o: java/verify.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n   java/javaop.h java/java-opcodes.h java/java-except.h toplev.h $(SYSTEM_H)\n java/xref.o: java/xref.c java/xref.h $(CONFIG_H) $(JAVA_TREE_H) toplev.h \\"}, {"sha": "7026dead71c47a36008ac7aa337157d1c652e89a", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -30,6 +30,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"system.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n+#include \"real.h\"\n #include \"toplev.h\"\n #include \"flags.h\"\n #include \"java-tree.h\""}, {"sha": "b88270df923cad7536387e467bac9182da4c993d", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -28,6 +28,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"tree.h\"\n+#include \"real.h\"\n #include \"obstack.h\"\n #include \"flags.h\"\n #include \"java-except.h\""}, {"sha": "cccb8d7e6ac0c2a8027b663a91a53889e7db9f44", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -51,6 +51,7 @@ definitions and other extensions.  */\n #include <dirent.h>\n #include \"tree.h\"\n #include \"rtl.h\"\n+#include \"real.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n #include \"flags.h\""}, {"sha": "d32bc055df6674f11ee22874cff67f826160259d", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -28,6 +28,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"tree.h\"\n+#include \"real.h\"\n #include \"obstack.h\"\n #include \"flags.h\"\n #include \"java-tree.h\""}, {"sha": "fb285d6fbc673724991d9d8cdc1f9893e4d2dccb", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include \"system.h\"\n #include \"tree.h\"\n+#include \"real.h\"\n #include \"ggc.h\"\n #include \"langhooks.h\"\n "}, {"sha": "456108eb742c3d4097be6277ac41bcba367af7f7", "filename": "gcc/real.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"real.h\"\n #include \"tree.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\""}, {"sha": "143261eff81c3aca15426d9ef8d1126f03b30fc2", "filename": "gcc/real.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -22,6 +22,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_REAL_H\n #define GCC_REAL_H\n \n+#include \"machmode.h\"\n+\n /* Define codes for all the float formats that we know of.  */\n #define UNKNOWN_FLOAT_FORMAT 0\n #define IEEE_FLOAT_FORMAT 1\n@@ -87,12 +89,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define REAL_WIDTH \\\n   (REAL_VALUE_TYPE_SIZE/HOST_BITS_PER_WIDE_INT \\\n    + (REAL_VALUE_TYPE_SIZE%HOST_BITS_PER_WIDE_INT ? 1 : 0)) /* round up */\n-typedef struct {\n+struct realvaluetype {\n   HOST_WIDE_INT r[REAL_WIDTH];\n-} realvaluetype;\n+};\n /* Various headers condition prototypes on #ifdef REAL_VALUE_TYPE, so it needs\n-   to be a macro.  */\n-#define REAL_VALUE_TYPE realvaluetype\n+   to be a macro.  realvaluetype cannot be a typedef as this interferes with\n+   other headers declaring opaque pointers to it.  */\n+#define REAL_VALUE_TYPE struct realvaluetype\n \n /* Calculate the format for CONST_DOUBLE.  We need as many slots as\n    are necessary to overlay a REAL_VALUE_TYPE on them.  This could be\n@@ -290,4 +293,8 @@ extern int target_negative\tPARAMS ((REAL_VALUE_TYPE));\n extern void debug_real\t\tPARAMS ((REAL_VALUE_TYPE));\n extern REAL_VALUE_TYPE ereal_atof PARAMS ((const char *, enum machine_mode));\n \n+/* In tree.c: wrap up a REAL_VALUE_TYPE in a tree node.  */\n+extern tree build_real\t\t\tPARAMS ((tree, REAL_VALUE_TYPE));\n+\n+\n #endif /* ! GCC_REAL_H */"}, {"sha": "d4c6e4f576085161b8f38c81d126c9231b40f8ea", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -37,6 +37,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n+#include \"real.h\"\n #include \"tm_p.h\"\n #include \"function.h\"\n #include \"obstack.h\"\n@@ -509,6 +510,7 @@ build_real (type, d)\n      REAL_VALUE_TYPE d;\n {\n   tree v;\n+  REAL_VALUE_TYPE *dp;\n   int overflow = 0;\n \n   /* Check for valid float value for this type on this target machine;\n@@ -518,8 +520,11 @@ build_real (type, d)\n #endif\n \n   v = make_node (REAL_CST);\n+  dp = ggc_alloc (sizeof (REAL_VALUE_TYPE));\n+  memcpy (dp, &d, sizeof (REAL_VALUE_TYPE));\n+  \n   TREE_TYPE (v) = type;\n-  TREE_REAL_CST (v) = d;\n+  TREE_REAL_CST_PTR (v) = dp;\n   TREE_OVERFLOW (v) = TREE_CONSTANT_OVERFLOW (v) = overflow;\n   return v;\n }\n@@ -556,20 +561,11 @@ build_real_from_int_cst (type, i)\n {\n   tree v;\n   int overflow = TREE_OVERFLOW (i);\n-  REAL_VALUE_TYPE d;\n \n-  v = make_node (REAL_CST);\n-  TREE_TYPE (v) = type;\n+  v = build_real (type, real_value_from_int_cst (type, i));\n \n-  d = real_value_from_int_cst (type, i);\n-\n-  /* Check for valid float value for this type on this target machine.  */\n-#ifdef CHECK_FLOAT_VALUE\n-  CHECK_FLOAT_VALUE (TYPE_MODE (type), d, overflow);\n-#endif\n-\n-  TREE_REAL_CST (v) = d;\n-  TREE_OVERFLOW (v) = TREE_CONSTANT_OVERFLOW (v) = overflow;\n+  TREE_OVERFLOW (v) |= overflow;\n+  TREE_CONSTANT_OVERFLOW (v) |= overflow;\n   return v;\n }\n "}, {"sha": "9b8325a2a3487caca31216723fc1e96de591b7e9", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ad4784f3f1acda9ddd4032be6f91cbfc70aad2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=11ad4784f3f1acda9ddd4032be6f91cbfc70aad2", "patch": "@@ -722,20 +722,19 @@ struct tree_int_cst\n \n #define TREE_CST_RTL(NODE) (CST_OR_CONSTRUCTOR_CHECK (NODE)->real_cst.rtl)\n \n-/* In a REAL_CST node.\n+/* In a REAL_CST node.  struct realvaluetype is an opaque entity, with\n+   manipulators defined in real.h.  We don't want tree.h depending on\n+   real.h and transitively on tm.h.  */\n+struct realvaluetype;\n \n-   We can represent a real value as either a `double' or an array of\n-   longs.  */\n-\n-#define TREE_REAL_CST(NODE) (REAL_CST_CHECK (NODE)->real_cst.real_cst)\n-\n-#include \"real.h\"\n+#define TREE_REAL_CST_PTR(NODE) (REAL_CST_CHECK (NODE)->real_cst.real_cst_ptr)\n+#define TREE_REAL_CST(NODE) (*TREE_REAL_CST_PTR (NODE))\n \n struct tree_real_cst\n {\n   struct tree_common common;\n   rtx rtl;\t/* acts as link to register transfer language (rtl) info */\n-  REAL_VALUE_TYPE real_cst;\n+  struct realvaluetype *real_cst_ptr;\n };\n \n /* In a STRING_CST */\n@@ -2123,7 +2122,6 @@ extern tree build_nt\t\t\tPARAMS ((enum tree_code, ...));\n \n extern tree build_int_2_wide\t\tPARAMS ((unsigned HOST_WIDE_INT, HOST_WIDE_INT));\n extern tree build_vector                PARAMS ((tree, tree));\n-extern tree build_real\t\t\tPARAMS ((tree, REAL_VALUE_TYPE));\n extern tree build_real_from_int_cst \tPARAMS ((tree, tree));\n extern tree build_complex\t\tPARAMS ((tree, tree, tree));\n extern tree build_string\t\tPARAMS ((int, const char *));"}]}