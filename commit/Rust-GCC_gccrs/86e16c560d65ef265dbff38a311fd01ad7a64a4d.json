{"sha": "86e16c560d65ef265dbff38a311fd01ad7a64a4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZlMTZjNTYwZDY1ZWYyNjVkYmZmMzhhMzExZmQwMWFkN2E2NGE0ZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2006-10-31T18:12:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:12:08Z"}, "message": "widechar.adb (Is_Start_Of_Wide_Char): In case of brackets encoding...\n\n2006-10-31  Robert Dewar  <dewar@adacore.com>\n\n\t* widechar.adb (Is_Start_Of_Wide_Char): In case of brackets encoding,\n\tadd more precise check for the character sequence that follows '[' to\n\tavoid possible confusion in case if '[' is the last character of a\n\tstring literals.\n\t(Scan_Wide): Always allow brackets encoding\n\nFrom-SVN: r118319", "tree": {"sha": "374d2d90cdcdd4dd3c0fb149432044df12f6fb67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/374d2d90cdcdd4dd3c0fb149432044df12f6fb67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86e16c560d65ef265dbff38a311fd01ad7a64a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e16c560d65ef265dbff38a311fd01ad7a64a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86e16c560d65ef265dbff38a311fd01ad7a64a4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e16c560d65ef265dbff38a311fd01ad7a64a4d/comments", "author": null, "committer": null, "parents": [{"sha": "c0297c47738c415689c7098946314a1c53afdaee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0297c47738c415689c7098946314a1c53afdaee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0297c47738c415689c7098946314a1c53afdaee"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "49976958caf3800e792791c0ad3e14daca64a3dd", "filename": "gcc/ada/widechar.adb", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e16c560d65ef265dbff38a311fd01ad7a64a4d/gcc%2Fada%2Fwidechar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e16c560d65ef265dbff38a311fd01ad7a64a4d/gcc%2Fada%2Fwidechar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwidechar.adb?ref=86e16c560d65ef265dbff38a311fd01ad7a64a4d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,20 +52,35 @@ package body Widechar is\n    is\n    begin\n       case Wide_Character_Encoding_Method is\n+\n+         --  For Hex mode, just test for an ESC character. The ESC character\n+         --  cannot appear in any other context in a legal Ada program.\n+\n          when WCEM_Hex =>\n             return S (P) = ASCII.ESC;\n \n-         when WCEM_Upper     |\n-              WCEM_Shift_JIS |\n-              WCEM_EUC       |\n-              WCEM_UTF8      =>\n-            return S (P) >= Character'Val (16#80#);\n+         --  For brackets, just test [\"x where x is a hex character. This is\n+         --  sufficient test, since this sequence cannot otherwise appear in a\n+         --  legal Ada program.\n \n          when WCEM_Brackets =>\n             return P <= S'Last - 2\n               and then S (P) = '['\n               and then S (P + 1) = '\"'\n-              and then S (P + 2) /= '\"';\n+              and then (S (P + 2) in '0' .. '9'\n+                            or else\n+                           S (P + 2) in 'a' .. 'f'\n+                            or else\n+                        S (P + 2) in 'A' .. 'F');\n+\n+         --  All other encoding methods use the upper bit set in the first\n+         --  character to uniquely represent a wide character.\n+\n+         when WCEM_Upper     |\n+              WCEM_Shift_JIS |\n+              WCEM_EUC       |\n+              WCEM_UTF8      =>\n+            return S (P) >= Character'Val (16#80#);\n       end case;\n    end Is_Start_Of_Wide_Char;\n \n@@ -89,6 +104,7 @@ package body Widechar is\n       Err : out Boolean)\n    is\n       P_Init : constant Source_Ptr := P;\n+      Chr    : Character;\n \n       function In_Char return Character;\n       --  Function to obtain characters of wide character escape sequence\n@@ -108,7 +124,18 @@ package body Widechar is\n    --  Start of processingf for Scan_Wide\n \n    begin\n-      C := Char_Code (WC_In (In_Char, Wide_Character_Encoding_Method));\n+      Chr := In_Char;\n+\n+      --  Scan out the wide character. if the first character is a bracket,\n+      --  we allow brackets encoding regardless of the standard encoding\n+      --  method being used, but otherwise we use this standard method.\n+\n+      if Chr = '[' then\n+         C := Char_Code (WC_In (Chr, WCEM_Brackets));\n+      else\n+         C := Char_Code (WC_In (Chr, Wide_Character_Encoding_Method));\n+      end if;\n+\n       Err := False;\n       Wide_Char_Byte_Count := Wide_Char_Byte_Count + Nat (P - P_Init - 1);\n "}]}