{"sha": "17856c497fa53217a7bde0e6c622ad8b61fd956f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc4NTZjNDk3ZmE1MzIxN2E3YmRlMGU2YzYyMmFkOGI2MWZkOTU2Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-09T21:48:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-09T21:48:51Z"}, "message": "(tstdi): Rewrite.\n\nFrom-SVN: r9913", "tree": {"sha": "c7642a99e38c23f56a11307094c3f3a8b0215bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7642a99e38c23f56a11307094c3f3a8b0215bfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17856c497fa53217a7bde0e6c622ad8b61fd956f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17856c497fa53217a7bde0e6c622ad8b61fd956f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17856c497fa53217a7bde0e6c622ad8b61fd956f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17856c497fa53217a7bde0e6c622ad8b61fd956f/comments", "author": null, "committer": null, "parents": [{"sha": "7a208c0b6726d7b48b7c78ef8ce91b3f279ec228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a208c0b6726d7b48b7c78ef8ce91b3f279ec228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a208c0b6726d7b48b7c78ef8ce91b3f279ec228"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "db632e6aa57c1e7c8a984e6c1253d36d7d0aa5fa", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17856c497fa53217a7bde0e6c622ad8b61fd956f/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17856c497fa53217a7bde0e6c622ad8b61fd956f/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=17856c497fa53217a7bde0e6c622ad8b61fd956f", "patch": "@@ -281,31 +281,26 @@\n ;; (set (cc0) (const_int foo)) has no mode information.  Such insns will\n ;; be folded while optimizing anyway.\n \n-(define_insn \"tstdi\"\n+(define_expand \"tstdi\"\n+  [(parallel\n+    [(set (cc0)\n+\t  (match_operand:DI 0 \"nonimmediate_operand\" \"d\"))\n+   (clobber (match_dup 1))])]\n+  \"\"\n+  \"\n+{\n+  operands[1] = gen_reg_rtx (DImode);\n+}\")\n+\n+(define_insn \"\"\n   [(set (cc0)\n-\t(match_operand:DI 0 \"nonimmediate_operand\" \"oa>,d\"))\n-   (clobber (match_scratch:SI 1 \"=d,d\"))\n-   (clobber (match_scratch:SI 2 \"=d,\"))]\n+\t(match_operand:DI 1 \"nonimmediate_operand\" \"0\"))\n+   (clobber (match_operand:DI 0 \"register_operand\" \"=d\"))]\n   \"\"\n   \"*\n {\n-  if (GET_CODE (operands[0]) == REG)\n-    operands[3] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n-  else if (GET_CODE (operands[0]) == MEM\n-\t   && GET_CODE (XEXP (operands[0], 0)) == POST_INC)\n-    operands[3] = operands[0];\n-  else\n-    operands[3] = adj_offsettable_operand (operands[0], 4);\n-  if (DATA_REG_P (operands[0]))\n-    operands[2] = operands[0];\n-  else\n-    output_asm_insn (\\\"move%.l %0,%2\\\", operands);\n-  /*\n-  ** 'sub' clears %1, and also clears the X cc bit\n-  ** 'tst' sets the Z cc bit according to the low part of the DImode operand\n-  ** 'subx %1' (i.e. subx #0) acts as a (non-existent) tstx on the high part\n-  */\n-  return \\\"sub%.l %1,%1\\;tst%.l %3\\;subx%.l %1,%2\\\";\n+  cc_status.flags |= CC_REVERSED;\n+  return \\\"neg%.l %R0\\;negx%.l %0\\\";\n }\")\n \n (define_insn \"tstsi\""}]}