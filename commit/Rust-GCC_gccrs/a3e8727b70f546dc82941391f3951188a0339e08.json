{"sha": "a3e8727b70f546dc82941391f3951188a0339e08", "node_id": "C_kwDOANBUbNoAKGEzZTg3MjdiNzBmNTQ2ZGM4Mjk0MTM5MWYzOTUxMTg4YTAzMzllMDg", "commit": {"author": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2023-01-13T15:08:00Z"}, "committer": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2023-01-13T15:08:00Z"}, "message": "Replace flag_strict_flex_arrays with DECL_NOT_FLEXARRAY in middle-end.\n\nWe should not directly check flag_strict_flex_arrays in the\nmiddle end. Instead, check DECL_NOT_FLEXARRAY(array_field_decl) which is set\nby C/C++ FEs according to -fstrict-flex-arrays and the corresponding\nattribute attached to the array_field.\n\nAs a result, We will lose the LEVEL information of -fstrict-flex-arrays in\nthe middle end. -Wstrict-flex-arrays will not be able to issue such\ninformation. update the testing cases accordingly.\n\ngcc/ChangeLog:\n\n\t* attribs.cc (strict_flex_array_level_of): Move this function to ...\n\t* attribs.h (strict_flex_array_level_of): Remove the declaration.\n\t* gimple-array-bounds.cc (array_bounds_checker::check_array_ref):\n\treplace the referece to strict_flex_array_level_of with\n\tDECL_NOT_FLEXARRAY.\n\t* tree.cc (component_ref_size): Likewise.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.cc (strict_flex_array_level_of): ... here.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Warray-bounds-flex-arrays-1.c: Delete the level information\n\tfrom the message issued by -Wstrict-flex-arrays.\n\t* gcc.dg/Warray-bounds-flex-arrays-2.c: Likewise.\n\t* gcc.dg/Warray-bounds-flex-arrays-3.c: Likewise.\n\t* gcc.dg/Warray-bounds-flex-arrays-4.c: Likewise.\n\t* gcc.dg/Warray-bounds-flex-arrays-5.c: Likewise.\n\t* gcc.dg/Warray-bounds-flex-arrays-6.c: Likewise.\n\t* gcc.dg/Wstrict-flex-arrays-2.c: Likewise.\n\t* gcc.dg/Wstrict-flex-arrays-3.c: Likewise.\n\t* gcc.dg/Wstrict-flex-arrays.c: Likewise.", "tree": {"sha": "e5373b5b514284f10344daf67a0c693c44c26d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5373b5b514284f10344daf67a0c693c44c26d38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3e8727b70f546dc82941391f3951188a0339e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e8727b70f546dc82941391f3951188a0339e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e8727b70f546dc82941391f3951188a0339e08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e8727b70f546dc82941391f3951188a0339e08/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "450eb6b3b5b544d26da2535228ce03f9656a13a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450eb6b3b5b544d26da2535228ce03f9656a13a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450eb6b3b5b544d26da2535228ce03f9656a13a5"}], "stats": {"total": 191, "additions": 68, "deletions": 123}, "files": [{"sha": "7db730cf831d2f1db1c976b8dd65b588305bc7b1", "filename": "gcc/attribs.cc", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Fattribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Fattribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.cc?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -2456,36 +2456,6 @@ init_attr_rdwr_indices (rdwr_map *rwm, tree attrs)\n     }\n }\n \n-/* Get the LEVEL of the strict_flex_array for the ARRAY_FIELD based on the\n-   values of attribute strict_flex_array and the flag_strict_flex_arrays.  */\n-unsigned int\n-strict_flex_array_level_of (tree array_field)\n-{\n-  gcc_assert (TREE_CODE (array_field) == FIELD_DECL);\n-  unsigned int strict_flex_array_level = flag_strict_flex_arrays;\n-\n-  tree attr_strict_flex_array\n-    = lookup_attribute (\"strict_flex_array\", DECL_ATTRIBUTES (array_field));\n-  /* If there is a strict_flex_array attribute attached to the field,\n-     override the flag_strict_flex_arrays.  */\n-  if (attr_strict_flex_array)\n-    {\n-      /* Get the value of the level first from the attribute.  */\n-      unsigned HOST_WIDE_INT attr_strict_flex_array_level = 0;\n-      gcc_assert (TREE_VALUE (attr_strict_flex_array) != NULL_TREE);\n-      attr_strict_flex_array = TREE_VALUE (attr_strict_flex_array);\n-      gcc_assert (TREE_VALUE (attr_strict_flex_array) != NULL_TREE);\n-      attr_strict_flex_array = TREE_VALUE (attr_strict_flex_array);\n-      gcc_assert (tree_fits_uhwi_p (attr_strict_flex_array));\n-      attr_strict_flex_array_level = tree_to_uhwi (attr_strict_flex_array);\n-\n-      /* The attribute has higher priority than flag_struct_flex_array.  */\n-      strict_flex_array_level = attr_strict_flex_array_level;\n-    }\n-  return strict_flex_array_level;\n-}\n-\n-\n /* Return the access specification for a function parameter PARM\n    or null if the current function has no such specification.  */\n "}, {"sha": "140e70b64e0420d8b117c6ac3600965b7b663f3b", "filename": "gcc/attribs.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Fattribs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Fattribs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.h?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -398,6 +398,4 @@ extern void init_attr_rdwr_indices (rdwr_map *, tree);\n extern attr_access *get_parm_access (rdwr_map &, tree,\n \t\t\t\t     tree = current_function_decl);\n \n-extern unsigned int strict_flex_array_level_of (tree);\n-\n #endif // GCC_ATTRIBS_H"}, {"sha": "38647c100c1e9e495d30d468bee0cc6d51736798", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -9047,6 +9047,34 @@ finish_incomplete_vars (tree incomplete_vars, bool toplevel)\n     }\n }\n \n+/* Get the LEVEL of the strict_flex_array for the ARRAY_FIELD based on the\n+   values of attribute strict_flex_array and the flag_strict_flex_arrays.  */\n+static unsigned int\n+strict_flex_array_level_of (tree array_field)\n+{\n+  gcc_assert (TREE_CODE (array_field) == FIELD_DECL);\n+  unsigned int strict_flex_array_level = flag_strict_flex_arrays;\n+\n+  tree attr_strict_flex_array\n+    = lookup_attribute (\"strict_flex_array\", DECL_ATTRIBUTES (array_field));\n+  /* If there is a strict_flex_array attribute attached to the field,\n+     override the flag_strict_flex_arrays.  */\n+  if (attr_strict_flex_array)\n+    {\n+      /* Get the value of the level first from the attribute.  */\n+      unsigned HOST_WIDE_INT attr_strict_flex_array_level = 0;\n+      gcc_assert (TREE_VALUE (attr_strict_flex_array) != NULL_TREE);\n+      attr_strict_flex_array = TREE_VALUE (attr_strict_flex_array);\n+      gcc_assert (TREE_VALUE (attr_strict_flex_array) != NULL_TREE);\n+      attr_strict_flex_array = TREE_VALUE (attr_strict_flex_array);\n+      gcc_assert (tree_fits_uhwi_p (attr_strict_flex_array));\n+      attr_strict_flex_array_level = tree_to_uhwi (attr_strict_flex_array);\n+\n+      /* The attribute has higher priority than flag_struct_flex_array.  */\n+      strict_flex_array_level = attr_strict_flex_array_level;\n+    }\n+  return strict_flex_array_level;\n+}\n \n /* Determine whether the FIELD_DECL X is a flexible array member according to\n    the following info:"}, {"sha": "66fd46e9b6cd7db7310afb9de02d27c95d6b6be0", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 9, "deletions": 37, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -350,18 +350,14 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n \n   /* Set to the type of the special array member for a COMPONENT_REF.  */\n   special_array_member sam{ };\n-\n+  tree afield_decl = NULL_TREE;\n   tree arg = TREE_OPERAND (ref, 0);\n-  const bool compref = TREE_CODE (arg) == COMPONENT_REF;\n-  unsigned int strict_flex_array_level = flag_strict_flex_arrays;\n \n-  if (compref)\n+  if (TREE_CODE (arg) == COMPONENT_REF)\n     {\n       /* Try to determine special array member type for this COMPONENT_REF.  */\n       sam = component_ref_sam_type (arg);\n-      /* Get the level of strict_flex_array for this array field.  */\n-      tree afield_decl = TREE_OPERAND (arg, 1);\n-      strict_flex_array_level = strict_flex_array_level_of (afield_decl);\n+      afield_decl = TREE_OPERAND (arg, 1);\n     }\n \n   get_up_bounds_for_array_ref (ref, &decl, &up_bound, &up_bound_p1);\n@@ -412,39 +408,15 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n \n       /* issue warnings for -Wstrict-flex-arrays according to the level of\n \t flag_strict_flex_arrays.  */\n-      if (out_of_bound && warn_strict_flex_arrays)\n-      switch (strict_flex_array_level)\n-\t{\n-\t  case 3:\n-\t    /* Issue additional warnings for trailing arrays [0].  */\n-\t    if (sam == special_array_member::trail_0)\n+      if ((out_of_bound && warn_strict_flex_arrays)\n+\t  && (((sam == special_array_member::trail_0)\n+\t\t|| (sam == special_array_member::trail_1)\n+\t\t|| (sam == special_array_member::trail_n))\n+\t      && DECL_NOT_FLEXARRAY (afield_decl)))\n \t      warned = warning_at (location, OPT_Wstrict_flex_arrays,\n \t\t\t\t   \"trailing array %qT should not be used as \"\n-\t\t\t\t   \"a flexible array member for level 3\",\n+\t\t\t\t   \"a flexible array member\",\n \t\t\t\t   artype);\n-\t    /* FALLTHROUGH.  */\n-\t  case 2:\n-\t    /* Issue additional warnings for trailing arrays [1].  */\n-\t    if (sam == special_array_member::trail_1)\n-\t      warned = warning_at (location, OPT_Wstrict_flex_arrays,\n-\t\t\t\t   \"trailing array %qT should not be used as \"\n-\t\t\t\t   \"a flexible array member for level 2 and \"\n-\t\t\t\t   \"above\", artype);\n-\t    /* FALLTHROUGH.  */\n-\t  case 1:\n-\t    /* Issue warnings for trailing arrays [n].  */\n-\t    if (sam == special_array_member::trail_n)\n-\t      warned = warning_at (location, OPT_Wstrict_flex_arrays,\n-\t\t\t\t   \"trailing array %qT should not be used as \"\n-\t\t\t\t   \"a flexible array member for level 1 and \"\n-\t\t\t\t   \"above\", artype);\n-\t    break;\n-\t  case 0:\n-\t    /* Do nothing.  */\n-\t    break;\n-\t  default:\n-\t    gcc_unreachable ();\n-\t}\n \n       /* Avoid more warnings when checking more significant subscripts\n \t of the same expression.  */"}, {"sha": "fd2aacf64520566ab786fc2f854e9c0413cb3e9d", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-1.c?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -32,7 +32,7 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5; \t/*{ dg-warning \"array subscript 5 is above array bounds of\" } */\n-    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /* { dg-bogus \"array subscript \" } */\n     trailing_0->c[1] = 1; /* { dg-bogus \"array subscript \" } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript \" } */"}, {"sha": "55b7535424bbaa511b015120611b10efa7c2e589", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-2.c?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -32,9 +32,9 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5; \t/*{ dg-warning \"array subscript 5 is above array bounds of\" } */\n-    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /* { dg-warning \"array subscript 2 is above array bounds of\"  } */\n-    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_0->c[1] = 1; /* { dg-bogus \"array subscript \" } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript \" } */\n "}, {"sha": "abdf8f15c78706434117247e487368acaaef498f", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-3.c?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -32,11 +32,11 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5; \t/*{ dg-warning \"array subscript 5 is above array bounds of\" } */ \n-    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /*{ dg-warning \"array subscript 2 is above array bounds of\" } */ \n-    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_0->c[1] = 1; /*{ dg-warning \"array subscript 1 is outside array bounds of\" } */ \n-    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 3\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript\" } */\n \n }"}, {"sha": "82b38ff1ad1e2a51a66bff2a9d512ce66a9eedaa", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-4.c?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -32,7 +32,7 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5; \t/*{ dg-warning \"array subscript 5 is above array bounds of\" } */\n-    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /* { dg-bogus \"array subscript \" } */\n     trailing_0->c[1] = 1; /* { dg-bogus \"array subscript \" } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript \" } */"}, {"sha": "dca02288be7c33151d9242458e61a554cdd4b868", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-5.c?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -32,9 +32,9 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5;   /*{ dg-warning \"array subscript 5 is above array bounds of\" } */\n-    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /*{ dg-warning \"array subscript 2 is above array bounds of\" } */\n-    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_0->c[1] = 1; /* { dg-bogus \"array subscript \" } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript \" } */\n "}, {"sha": "fc9f73b453510bc1b42a36cdd54af320bda65305", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-flex-arrays-6.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-flex-arrays-6.c?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -32,11 +32,11 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_4 *trailing_flex)\n {\n     normal->c[5] = 5; \t/*{ dg-warning \"array subscript 5 is above array bounds of\" } */ \n-    \t\t\t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t/*{ dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_1->c[2] = 2; /*{ dg-warning \"array subscript 2 is above array bounds of\" } */\n-    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_0->c[1] = 1; /*{ dg-warning \"array subscript 1 is outside array bounds of\" } */\n-    \t\t\t  /* { dg-warning \"should not be used as a flexible array member for level 3\" \"\" { target *-*-* } .-1 } */\n+    \t\t\t  /* { dg-warning \"should not be used as a flexible array member\" \"\" { target *-*-* } .-1 } */\n     trailing_flex->c[10] = 10; /* { dg-bogus \"array subscript \" } */\n \n }"}, {"sha": "befc604f19b7c5254fb2a0c550fb60571e160645", "filename": "gcc/testsuite/gcc.dg/Wstrict-flex-arrays-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-2.c?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -31,9 +31,9 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_3 *trailing_0,\n     struct trailing_array_4 *trailing_flex)\n {\n-    normal->c[5] = 5; \t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" } */\n-    trailing_1->c[2] = 2; /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" } */\n-    trailing_0->c[1] = 1; /* { dg-bogus \"should not be used as a flexible array member for level 2 and above\" } */\n-    trailing_flex->c[10] = 10; /* { dg-bogus \"should not be used as a flexible array member for level 2 and above\" } */\n+    normal->c[5] = 5; \t/*{ dg-warning \"should not be used as a flexible array member\" } */\n+    trailing_1->c[2] = 2; /* { dg-warning \"should not be used as a flexible array member\" } */\n+    trailing_0->c[1] = 1; /* { dg-bogus \"should not be used as a flexible array member\" } */\n+    trailing_flex->c[10] = 10; /* { dg-bogus \"should not be used as a flexible array member\" } */\n \n }"}, {"sha": "cc37a092c3ed74509febf99896ed31b070b69fa1", "filename": "gcc/testsuite/gcc.dg/Wstrict-flex-arrays-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays-3.c?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -31,9 +31,9 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_3 *trailing_0,\n     struct trailing_array_4 *trailing_flex)\n {\n-    normal->c[5] = 5; \t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" } */\n-    trailing_1->c[2] = 2; /* { dg-warning \"should not be used as a flexible array member for level 2 and above\" } */\n-    trailing_0->c[1] = 1; /* { dg-warning \"should not be used as a flexible array member for level 3\" } */\n-    trailing_flex->c[10] = 10; /* { dg-bogus \"should not be used as a flexible array member for level 3\" } */\n+    normal->c[5] = 5; \t/*{ dg-warning \"should not be used as a flexible array member\" } */\n+    trailing_1->c[2] = 2; /* { dg-warning \"should not be used as a flexible array member\" } */\n+    trailing_0->c[1] = 1; /* { dg-warning \"should not be used as a flexible array member\" } */\n+    trailing_flex->c[10] = 10; /* { dg-bogus \"should not be used as a flexible array member\" } */\n \n }"}, {"sha": "735b23a1dc6786bcf192c0554ab914db852b000e", "filename": "gcc/testsuite/gcc.dg/Wstrict-flex-arrays.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-flex-arrays.c?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -31,9 +31,9 @@ void __attribute__((__noinline__)) stuff(\n     struct trailing_array_3 *trailing_0,\n     struct trailing_array_4 *trailing_flex)\n {\n-    normal->c[5] = 5; \t/*{ dg-warning \"should not be used as a flexible array member for level 1 and above\" } */\n-    trailing_1->c[2] = 2; /* { dg-bogus \"should not be used as a flexible array member for level 1 and above\" } */\n-    trailing_0->c[1] = 1; /* { dg-bogus \"should not be used as a flexible array member for level 1 and above\" } */\n-    trailing_flex->c[10] = 10; /* { dg-bogus \"should not be used as a flexible array member for level 1 and above\" } */\n+    normal->c[5] = 5; \t/*{ dg-warning \"should not be used as a flexible array member\" } */\n+    trailing_1->c[2] = 2; /* { dg-bogus \"should not be used as a flexible array member\" } */\n+    trailing_0->c[1] = 1; /* { dg-bogus \"should not be used as a flexible array member\" } */\n+    trailing_flex->c[10] = 10; /* { dg-bogus \"should not be used as a flexible array member\" } */\n \n }"}, {"sha": "7473912a065fb37784e1f11f3ec8e5866424a00e", "filename": "gcc/tree.cc", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e8727b70f546dc82941391f3951188a0339e08/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=a3e8727b70f546dc82941391f3951188a0339e08", "patch": "@@ -13074,38 +13074,15 @@ component_ref_size (tree ref, special_array_member *sam /* = NULL */)\n \t  || *sam == special_array_member::trail_n)\n \treturn memsize;\n \n-      /* flag_strict_flex_arrays will control how to treat\n-\t the trailing arrays as flexiable array members.  */\n-\n       tree afield_decl = TREE_OPERAND (ref, 1);\n-      unsigned int strict_flex_array_level\n-\t= strict_flex_array_level_of (afield_decl);\n-\n-      switch (strict_flex_array_level)\n-\t{\n-\t  case 3:\n-\t    /* Treaing 0-length trailing arrays as normal array.  */\n-\t    if (*sam == special_array_member::trail_0)\n-\t      return size_zero_node;\n-\t    /* FALLTHROUGH.  */\n-\t  case 2:\n-\t    /* Treating 1-element trailing arrays as normal array.  */\n-\t    if (*sam == special_array_member::trail_1)\n-\t      return memsize;\n-\t    /* FALLTHROUGH.  */\n-\t  case 1:\n-\t    /* Treating 2-or-more elements trailing arrays as normal\n-\t       array.  */\n-\t    if (*sam == special_array_member::trail_n)\n-\t      return memsize;\n-\t    /* FALLTHROUGH.  */\n-\t  case 0:\n-\t    break;\n-\t  default:\n-\t    gcc_unreachable ();\n-\t}\n+      gcc_assert (TREE_CODE (afield_decl) == FIELD_DECL);\n+      /* if the trailing array is a not a flexible array member, treat it as\n+\t a normal array.  */\n+      if (DECL_NOT_FLEXARRAY (afield_decl)\n+\t  && *sam != special_array_member::int_0)\n+\treturn memsize;\n \n-\tif (*sam == special_array_member::int_0)\n+      if (*sam == special_array_member::int_0)\n \t  memsize = NULL_TREE;\n \n       /* For a reference to a flexible array member of a union"}]}