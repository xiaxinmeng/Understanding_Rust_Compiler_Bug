{"sha": "5fcffe51f0feba3b795e6668582c63760db8389a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZjZmZlNTFmMGZlYmEzYjc5NWU2NjY4NTgyYzYzNzYwZGI4Mzg5YQ==", "commit": {"author": {"name": "Markus Trippelsdorf", "email": "trippels@gcc.gnu.org", "date": "2014-10-17T05:10:07Z"}, "committer": {"name": "Markus Trippelsdorf", "email": "trippels@gcc.gnu.org", "date": "2014-10-17T05:10:07Z"}, "message": "Fix pr61848, linux kernel miscompile\n\nThis patch cures the linux kernel boot failure when compiled using\ntrunk gcc.\n\nAt its heart, the problem is caused by merge_decls merging from the\nold decl to the new decl, then copying back to the old decl and\ndiscarding the new.  When Jan moved some fields to the symtab,\n\"copying back to the old decl\" was lost for those fields.  Really,\nit would be best if merge_decls was rewritten to merge everything to\nthe kept decl, but here I'm just doing that for fields accessed via\ndecl_with_vis.symtab_node.\n\n2014-10-17  Alan Modra  <amodra@gmail.com>\n\ngcc/c/\n\tPR middle-end/61848\n\t* c-decl.c (merge_decls): Don't merge section name or tls model\n\tto newdecl symtab node, instead merge to olddecl.  Override\n\texisting olddecl section name.  Set tls_model for all thread-local\n\tvars, not just OMP thread-private ones.  Remove incorrect comment.\ngcc/cp/\n\tPR middle-end/61848\n\t* decl.c (merge_decls): Don't merge section name, comdat group or\n\ttls model to newdecl symtab node, instead merge to olddecl.\n\tOverride existing olddecl section name.  Set tls_model for all\n\tthread-local vars, not just OMP thread-private ones.  Remove\n\tincorrect comment.\n\n2014-10-17  Markus Trippelsdorf  <markus@trippelsdorf.de>\n\n\tPR middle-end/61848\n\t* g++.dg/torture/pr61848.C: New testcase.\n\t* gcc.c-torture/compile/pr61848.c: New testcase.\n\nFrom-SVN: r216361", "tree": {"sha": "6d8bcf2cd6b137ef3641d6859e51846fa31622ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d8bcf2cd6b137ef3641d6859e51846fa31622ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fcffe51f0feba3b795e6668582c63760db8389a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcffe51f0feba3b795e6668582c63760db8389a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fcffe51f0feba3b795e6668582c63760db8389a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcffe51f0feba3b795e6668582c63760db8389a/comments", "author": null, "committer": null, "parents": [{"sha": "d6db0df55666e45c22c11681047c6088e24f0256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6db0df55666e45c22c11681047c6088e24f0256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6db0df55666e45c22c11681047c6088e24f0256"}], "stats": {"total": 124, "additions": 84, "deletions": 40}, "files": [{"sha": "b55d5d44117c9a7afcfc55666aa99d736f03e9a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fcffe51f0feba3b795e6668582c63760db8389a", "patch": "@@ -1,3 +1,11 @@\n+2014-10-17  Alan Modra  <amodra@gmail.com>\n+\n+\tPR middle-end/61848\n+\t* c-decl.c (merge_decls): Don't merge section name or tls model\n+\tto newdecl symtab node, instead merge to olddecl.  Override\n+\texisting olddecl section name.  Set tls_model for all thread-local\n+\tvars, not just OMP thread-private ones.  Remove incorrect comment.\n+\n 2014-10-16  DJ Delorie  <dj@redhat.com>\n \n \t* flag-types.h (sanitize_code): Don't assume targets have 32-bit"}, {"sha": "839c67bf7e9147ac8d8397055197b2c56344b13a", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=5fcffe51f0feba3b795e6668582c63760db8389a", "patch": "@@ -2297,22 +2297,10 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \n   /* Merge the threadprivate attribute.  */\n   if (TREE_CODE (olddecl) == VAR_DECL && C_DECL_THREADPRIVATE_P (olddecl))\n-    {\n-      set_decl_tls_model (newdecl, DECL_TLS_MODEL (olddecl));\n-      C_DECL_THREADPRIVATE_P (newdecl) = 1;\n-    }\n+    C_DECL_THREADPRIVATE_P (newdecl) = 1;\n \n   if (CODE_CONTAINS_STRUCT (TREE_CODE (olddecl), TS_DECL_WITH_VIS))\n     {\n-      /* Merge the section attribute.\n-\t We want to issue an error if the sections conflict but that\n-\t must be done later in decl_attributes since we are called\n-\t before attributes are assigned.  */\n-      if ((DECL_EXTERNAL (olddecl) || TREE_PUBLIC (olddecl) || TREE_STATIC (olddecl))\n-\t  && DECL_SECTION_NAME (newdecl) == NULL\n-\t  && DECL_SECTION_NAME (olddecl))\n-\tset_decl_section_name (newdecl, DECL_SECTION_NAME (olddecl));\n-\n       /* Copy the assembler name.\n \t Currently, it can only be defined in the prototype.  */\n       COPY_DECL_ASSEMBLER_NAME (olddecl, newdecl);\n@@ -2522,6 +2510,20 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t\t  (char *) newdecl + sizeof (struct tree_decl_common),\n \t\t  tree_code_size (TREE_CODE (olddecl)) - sizeof (struct tree_decl_common));\n \t  olddecl->decl_with_vis.symtab_node = snode;\n+\n+\t  if ((DECL_EXTERNAL (olddecl)\n+\t       || TREE_PUBLIC (olddecl)\n+\t       || TREE_STATIC (olddecl))\n+\t      && DECL_SECTION_NAME (newdecl) != NULL)\n+\t    set_decl_section_name (olddecl, DECL_SECTION_NAME (newdecl));\n+\n+\t  /* This isn't quite correct for something like\n+\t\tint __thread x attribute ((tls_model (\"local-exec\")));\n+\t\textern int __thread x;\n+\t     as we'll lose the \"local-exec\" model.  */\n+\t  if (TREE_CODE (olddecl) == VAR_DECL\n+\t      && DECL_THREAD_LOCAL_P (newdecl))\n+\t    set_decl_tls_model (olddecl, DECL_TLS_MODEL (newdecl));\n \t  break;\n \t}\n "}, {"sha": "1148e9566adb464cb7f64d1abb52ef50a1959047", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5fcffe51f0feba3b795e6668582c63760db8389a", "patch": "@@ -1,3 +1,12 @@\n+2014-10-17  Alan Modra  <amodra@gmail.com>\n+\n+\tPR middle-end/61848\n+\t* decl.c (merge_decls): Don't merge section name, comdat group or\n+\ttls model to newdecl symtab node, instead merge to olddecl.\n+\tOverride existing olddecl section name.  Set tls_model for all\n+\tthread-local vars, not just OMP thread-private ones.  Remove\n+\tincorrect comment.\n+\n 2014-10-16  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* cp-tree.h: Adjust include files."}, {"sha": "1b214ab40907db0b18885b913498cc02e7b69337", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5fcffe51f0feba3b795e6668582c63760db8389a", "patch": "@@ -1967,7 +1967,6 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t      if (!DECL_LANG_SPECIFIC (newdecl))\n \t\tretrofit_lang_decl (newdecl);\n \n-\t      set_decl_tls_model (newdecl, DECL_TLS_MODEL (olddecl));\n \t      CP_DECL_THREADPRIVATE_P (newdecl) = 1;\n \t    }\n \t}\n@@ -2030,15 +2029,6 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    }\n \t}\n \n-      /* Merge the section attribute.\n-\t We want to issue an error if the sections conflict but that must be\n-\t done later in decl_attributes since we are called before attributes\n-\t are assigned.  */\n-      if ((DECL_EXTERNAL (olddecl) || TREE_PUBLIC (olddecl) || TREE_STATIC (olddecl))\n-\t  && DECL_SECTION_NAME (newdecl) == NULL\n-\t  && DECL_SECTION_NAME (olddecl) != NULL)\n-\tset_decl_section_name (newdecl, DECL_SECTION_NAME (olddecl));\n-\n       if (TREE_CODE (newdecl) == FUNCTION_DECL)\n \t{\n \t  DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (newdecl)\n@@ -2083,19 +2073,6 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n   /* Merge the storage class information.  */\n   merge_weak (newdecl, olddecl);\n \n-  if ((TREE_CODE (olddecl) == FUNCTION_DECL || TREE_CODE (olddecl) == VAR_DECL)\n-      && (DECL_EXTERNAL (olddecl) || TREE_PUBLIC (olddecl) || TREE_STATIC (olddecl))\n-      && DECL_ONE_ONLY (olddecl))\n-    {\n-      struct symtab_node *symbol;\n-      if (TREE_CODE (olddecl) == FUNCTION_DECL)\n-\tsymbol = cgraph_node::get_create (newdecl);\n-      else\n-\tsymbol = varpool_node::get_create (newdecl);\n-      symbol->set_comdat_group (symtab_node::get\n-\t(olddecl)->get_comdat_group ());\n-    }\n-\n   DECL_DEFER_OUTPUT (newdecl) |= DECL_DEFER_OUTPUT (olddecl);\n   TREE_PUBLIC (newdecl) = TREE_PUBLIC (olddecl);\n   TREE_STATIC (olddecl) = TREE_STATIC (newdecl) |= TREE_STATIC (olddecl);\n@@ -2449,12 +2426,12 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n     }\n   else\n     {\n-      size_t size = tree_code_size (TREE_CODE (olddecl));\n+      size_t size = tree_code_size (TREE_CODE (newdecl));\n \n       memcpy ((char *) olddecl + sizeof (struct tree_common),\n \t      (char *) newdecl + sizeof (struct tree_common),\n \t      sizeof (struct tree_decl_common) - sizeof (struct tree_common));\n-      switch (TREE_CODE (olddecl))\n+      switch (TREE_CODE (newdecl))\n \t{\n \tcase LABEL_DECL:\n \tcase VAR_DECL:\n@@ -2466,14 +2443,14 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  {\n             struct symtab_node *snode = NULL;\n \n-            if (TREE_CODE (olddecl) == VAR_DECL\n+            if (TREE_CODE (newdecl) == VAR_DECL\n \t\t&& (TREE_STATIC (olddecl) || TREE_PUBLIC (olddecl) || DECL_EXTERNAL (olddecl)))\n \t      snode = symtab_node::get (olddecl);\n \t    memcpy ((char *) olddecl + sizeof (struct tree_decl_common),\n \t\t    (char *) newdecl + sizeof (struct tree_decl_common),\n \t\t    size - sizeof (struct tree_decl_common)\n \t\t    + TREE_CODE_LENGTH (TREE_CODE (newdecl)) * sizeof (char *));\n-            if (TREE_CODE (olddecl) == VAR_DECL)\n+            if (TREE_CODE (newdecl) == VAR_DECL)\n \t      olddecl->decl_with_vis.symtab_node = snode;\n \t  }\n \t  break;\n@@ -2485,6 +2462,38 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  break;\n \t}\n     }\n+\n+  if (TREE_CODE (newdecl) == FUNCTION_DECL\n+      || TREE_CODE (newdecl) == VAR_DECL)\n+    {\n+      if (DECL_EXTERNAL (olddecl)\n+\t  || TREE_PUBLIC (olddecl)\n+\t  || TREE_STATIC (olddecl))\n+\t{\n+\t  /* Merge the section attribute.\n+\t     We want to issue an error if the sections conflict but that must be\n+\t     done later in decl_attributes since we are called before attributes\n+\t     are assigned.  */\n+\t  if (DECL_SECTION_NAME (newdecl) != NULL)\n+\t    set_decl_section_name (olddecl, DECL_SECTION_NAME (newdecl));\n+\n+\t  if (DECL_ONE_ONLY (newdecl))\n+\t    {\n+\t      struct symtab_node *oldsym, *newsym;\n+\t      if (TREE_CODE (olddecl) == FUNCTION_DECL)\n+\t\toldsym = cgraph_node::get_create (olddecl);\n+\t      else\n+\t\toldsym = varpool_node::get_create (olddecl);\n+\t      newsym = symtab_node::get (newdecl);\n+\t      oldsym->set_comdat_group (newsym->get_comdat_group ());\n+\t    }\n+\t}\n+\n+      if (TREE_CODE (newdecl) == VAR_DECL\n+\t  && DECL_THREAD_LOCAL_P (newdecl))\n+\tset_decl_tls_model (olddecl, DECL_TLS_MODEL (newdecl));\n+    }\n+\n   DECL_UID (olddecl) = olddecl_uid;\n   if (olddecl_friend)\n     DECL_FRIEND_P (olddecl) = 1;"}, {"sha": "e24b295a826b97752ca30f04f707990bb527fd73", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fcffe51f0feba3b795e6668582c63760db8389a", "patch": "@@ -1,3 +1,9 @@\n+2014-10-17  Markus Trippelsdorf  <markus@trippelsdorf.de>\n+\n+\tPR middle-end/61848\n+\t* g++.dg/torture/pr61848.C: New testcase.\n+\t* gcc.c-torture/compile/pr61848.c: New testcase.\n+\n 2014-10-16  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* gcc.target/sh/cmpstr.c: Fix excess failures caused by switch to GNU11."}, {"sha": "beb490c7543674bc1a1acb2575e1a231cb723f54", "filename": "gcc/testsuite/g++.dg/torture/pr61848.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr61848.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr61848.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr61848.C?ref=5fcffe51f0feba3b795e6668582c63760db8389a", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target named_sections } */\n+/* { dg-final { scan-assembler \"mysection\" } } */\n+extern char foo;\n+char foo __attribute__ ((__section__(\".mysection\")));"}, {"sha": "beb490c7543674bc1a1acb2575e1a231cb723f54", "filename": "gcc/testsuite/gcc.c-torture/compile/pr61848.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr61848.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcffe51f0feba3b795e6668582c63760db8389a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr61848.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr61848.c?ref=5fcffe51f0feba3b795e6668582c63760db8389a", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target named_sections } */\n+/* { dg-final { scan-assembler \"mysection\" } } */\n+extern char foo;\n+char foo __attribute__ ((__section__(\".mysection\")));"}]}