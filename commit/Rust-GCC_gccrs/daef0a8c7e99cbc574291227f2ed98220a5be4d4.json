{"sha": "daef0a8c7e99cbc574291227f2ed98220a5be4d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFlZjBhOGM3ZTk5Y2JjNTc0MjkxMjI3ZjJlZDk4MjIwYTViZTRkNA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-07-25T14:20:37Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-07-25T14:20:37Z"}, "message": "[AArch64][2/10] ARMv8.2-A FP16 one operand vector intrinsics\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c (TYPES_BINOP_USS): New.\n\t* config/aarch64/aarch64-simd-builtins.def: Register new builtins.\n\t* config/aarch64/aarch64-simd.md (aarch64_rsqrte<mode>): Extend to HF modes.\n\t(neg<mode>2): Likewise.\n\t(abs<mode>2): Likewise.\n\t(<frint_pattern><mode>2): Likewise.\n\t(l<fcvt_pattern><su_optab><VDQF:mode><fcvt_target>2): Likewise.\n\t(<optab><VDQF:mode><fcvt_target>2): Likewise.\n\t(<fix_trunc_optab><VDQF:mode><fcvt_target>2): Likewise.\n\t(ftrunc<VDQF:mode>2): Likewise.\n\t(<optab><fcvt_target><VDQF:mode>2): Likewise.\n\t(sqrt<mode>2): Likewise.\n\t(*sqrt<mode>2): Likewise.\n\t(aarch64_frecpe<mode>): Likewise.\n\t(aarch64_cm<optab><mode>): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_emit_approx_sqrt): Return\n\tfalse for V4HF and V8HF.\n\t* config/aarch64/iterators.md (VHSDF, VHSDF_DF, VHSDF_SDF): New.\n\t(VDQF_COND, fcvt_target, FCVT_TARGET, hcon): Extend mode attribute to HF modes.\n\t(stype): New.\n\t* config/aarch64/arm_neon.h (vdup_n_f16): New.\n\t(vdupq_n_f16): Likewise.\n\t(vld1_dup_f16): Use vdup_n_f16.\n\t(vld1q_dup_f16): Use vdupq_n_f16.\n\t(vabs_f16): New.\n\t(vabsq_f16, vceqz_f16, vceqzq_f16, vcgez_f16, vcgezq_f16, vcgtz_f16,\n\tvcgtzq_f16, vclez_f16, vclezq_f16, vcltz_f16, vcltzq_f16, vcvt_f16_s16,\n\tvcvtq_f16_s16, vcvt_f16_u16, vcvtq_f16_u16, vcvt_s16_f16, vcvtq_s16_f16,\n\tvcvt_u16_f16, vcvtq_u16_f16, vcvta_s16_f16, vcvtaq_s16_f16,\n\tvcvta_u16_f16, vcvtaq_u16_f16, vcvtm_s16_f16, vcvtmq_s16_f16,\n\tvcvtm_u16_f16, vcvtmq_u16_f16, vcvtn_s16_f16, vcvtnq_s16_f16,\n\tvcvtn_u16_f16, vcvtnq_u16_f16, vcvtp_s16_f16, vcvtpq_s16_f16,\n\tvcvtp_u16_f16, vcvtpq_u16_f16, vneg_f16, vnegq_f16, vrecpe_f16,\n\tvrecpeq_f16, vrnd_f16, vrndq_f16, vrnda_f16, vrndaq_f16, vrndi_f16,\n\tvrndiq_f16, vrndm_f16, vrndmq_f16, vrndn_f16, vrndnq_f16, vrndp_f16,\n\tvrndpq_f16, vrndx_f16, vrndxq_f16, vrsqrte_f16, vrsqrteq_f16, vsqrt_f16,\n\tvsqrtq_f16): Likewise.\n\nFrom-SVN: r238716", "tree": {"sha": "aadb25f52bec40a9605b7db06332bac4512649c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aadb25f52bec40a9605b7db06332bac4512649c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daef0a8c7e99cbc574291227f2ed98220a5be4d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daef0a8c7e99cbc574291227f2ed98220a5be4d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daef0a8c7e99cbc574291227f2ed98220a5be4d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daef0a8c7e99cbc574291227f2ed98220a5be4d4/comments", "author": null, "committer": null, "parents": [{"sha": "358decd5bbc90480ddb536ade1330cd3b43209ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/358decd5bbc90480ddb536ade1330cd3b43209ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/358decd5bbc90480ddb536ade1330cd3b43209ff"}], "stats": {"total": 582, "additions": 523, "deletions": 59}, "files": [{"sha": "b7c1631def53b11c750e139e4c7492769d0d86c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=daef0a8c7e99cbc574291227f2ed98220a5be4d4", "patch": "@@ -1,3 +1,43 @@\n+2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (TYPES_BINOP_USS): New.\n+\t* config/aarch64/aarch64-simd-builtins.def: Register new builtins.\n+\t* config/aarch64/aarch64-simd.md (aarch64_rsqrte<mode>): Extend to HF modes.\n+\t(neg<mode>2): Likewise.\n+\t(abs<mode>2): Likewise.\n+\t(<frint_pattern><mode>2): Likewise.\n+\t(l<fcvt_pattern><su_optab><VDQF:mode><fcvt_target>2): Likewise.\n+\t(<optab><VDQF:mode><fcvt_target>2): Likewise.\n+\t(<fix_trunc_optab><VDQF:mode><fcvt_target>2): Likewise.\n+\t(ftrunc<VDQF:mode>2): Likewise.\n+\t(<optab><fcvt_target><VDQF:mode>2): Likewise.\n+\t(sqrt<mode>2): Likewise.\n+\t(*sqrt<mode>2): Likewise.\n+\t(aarch64_frecpe<mode>): Likewise.\n+\t(aarch64_cm<optab><mode>): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_emit_approx_sqrt): Return\n+\tfalse for V4HF and V8HF.\n+\t* config/aarch64/iterators.md (VHSDF, VHSDF_DF, VHSDF_SDF): New.\n+\t(VDQF_COND, fcvt_target, FCVT_TARGET, hcon): Extend mode attribute to HF modes.\n+\t(stype): New.\n+\t* config/aarch64/arm_neon.h (vdup_n_f16): New.\n+\t(vdupq_n_f16): Likewise.\n+\t(vld1_dup_f16): Use vdup_n_f16.\n+\t(vld1q_dup_f16): Use vdupq_n_f16.\n+\t(vabs_f16): New.\n+\t(vabsq_f16, vceqz_f16, vceqzq_f16, vcgez_f16, vcgezq_f16, vcgtz_f16,\n+\tvcgtzq_f16, vclez_f16, vclezq_f16, vcltz_f16, vcltzq_f16, vcvt_f16_s16,\n+\tvcvtq_f16_s16, vcvt_f16_u16, vcvtq_f16_u16, vcvt_s16_f16, vcvtq_s16_f16,\n+\tvcvt_u16_f16, vcvtq_u16_f16, vcvta_s16_f16, vcvtaq_s16_f16,\n+\tvcvta_u16_f16, vcvtaq_u16_f16, vcvtm_s16_f16, vcvtmq_s16_f16,\n+\tvcvtm_u16_f16, vcvtmq_u16_f16, vcvtn_s16_f16, vcvtnq_s16_f16,\n+\tvcvtn_u16_f16, vcvtnq_u16_f16, vcvtp_s16_f16, vcvtpq_s16_f16,\n+\tvcvtp_u16_f16, vcvtpq_u16_f16, vneg_f16, vnegq_f16, vrecpe_f16,\n+\tvrecpeq_f16, vrnd_f16, vrndq_f16, vrnda_f16, vrndaq_f16, vrndi_f16,\n+\tvrndiq_f16, vrndm_f16, vrndmq_f16, vrndn_f16, vrndnq_f16, vrndp_f16,\n+\tvrndpq_f16, vrndx_f16, vrndxq_f16, vrsqrte_f16, vrsqrteq_f16, vsqrt_f16,\n+\tvsqrtq_f16): Likewise.\n+\n 2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-simd.md"}, {"sha": "af5fac5b29cf5373561d9bf9a69c401d2bec5cec", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=daef0a8c7e99cbc574291227f2ed98220a5be4d4", "patch": "@@ -139,6 +139,10 @@ aarch64_types_binop_ssu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_unsigned };\n #define TYPES_BINOP_SSU (aarch64_types_binop_ssu_qualifiers)\n static enum aarch64_type_qualifiers\n+aarch64_types_binop_uss_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_none, qualifier_none };\n+#define TYPES_BINOP_USS (aarch64_types_binop_uss_qualifiers)\n+static enum aarch64_type_qualifiers\n aarch64_types_binopp_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_poly, qualifier_poly, qualifier_poly };\n #define TYPES_BINOPP (aarch64_types_binopp_qualifiers)"}, {"sha": "22c87be429ba1aac2bbe77f1119d16b6b8bd6e80", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=daef0a8c7e99cbc574291227f2ed98220a5be4d4", "patch": "@@ -42,7 +42,7 @@\n   BUILTIN_VDC (COMBINE, combine, 0)\n   BUILTIN_VB (BINOP, pmul, 0)\n   BUILTIN_VALLF (BINOP, fmulx, 0)\n-  BUILTIN_VDQF_DF (UNOP, sqrt, 2)\n+  BUILTIN_VHSDF_DF (UNOP, sqrt, 2)\n   BUILTIN_VD_BHSI (BINOP, addp, 0)\n   VAR1 (UNOP, addp, 0, di)\n   BUILTIN_VDQ_BHSI (UNOP, clrsb, 2)\n@@ -266,73 +266,97 @@\n   BUILTIN_VDQF (BINOP, smin_nanp, 0)\n \n   /* Implemented by <frint_pattern><mode>2.  */\n-  BUILTIN_VDQF (UNOP, btrunc, 2)\n-  BUILTIN_VDQF (UNOP, ceil, 2)\n-  BUILTIN_VDQF (UNOP, floor, 2)\n-  BUILTIN_VDQF (UNOP, nearbyint, 2)\n-  BUILTIN_VDQF (UNOP, rint, 2)\n-  BUILTIN_VDQF (UNOP, round, 2)\n-  BUILTIN_VDQF_DF (UNOP, frintn, 2)\n+  BUILTIN_VHSDF (UNOP, btrunc, 2)\n+  BUILTIN_VHSDF (UNOP, ceil, 2)\n+  BUILTIN_VHSDF (UNOP, floor, 2)\n+  BUILTIN_VHSDF (UNOP, nearbyint, 2)\n+  BUILTIN_VHSDF (UNOP, rint, 2)\n+  BUILTIN_VHSDF (UNOP, round, 2)\n+  BUILTIN_VHSDF_DF (UNOP, frintn, 2)\n \n   /* Implemented by l<fcvt_pattern><su_optab><VQDF:mode><vcvt_target>2.  */\n+  VAR1 (UNOP, lbtruncv4hf, 2, v4hi)\n+  VAR1 (UNOP, lbtruncv8hf, 2, v8hi)\n   VAR1 (UNOP, lbtruncv2sf, 2, v2si)\n   VAR1 (UNOP, lbtruncv4sf, 2, v4si)\n   VAR1 (UNOP, lbtruncv2df, 2, v2di)\n \n+  VAR1 (UNOPUS, lbtruncuv4hf, 2, v4hi)\n+  VAR1 (UNOPUS, lbtruncuv8hf, 2, v8hi)\n   VAR1 (UNOPUS, lbtruncuv2sf, 2, v2si)\n   VAR1 (UNOPUS, lbtruncuv4sf, 2, v4si)\n   VAR1 (UNOPUS, lbtruncuv2df, 2, v2di)\n \n+  VAR1 (UNOP, lroundv4hf, 2, v4hi)\n+  VAR1 (UNOP, lroundv8hf, 2, v8hi)\n   VAR1 (UNOP, lroundv2sf, 2, v2si)\n   VAR1 (UNOP, lroundv4sf, 2, v4si)\n   VAR1 (UNOP, lroundv2df, 2, v2di)\n   /* Implemented by l<fcvt_pattern><su_optab><GPF:mode><GPI:mode>2.  */\n   VAR1 (UNOP, lroundsf, 2, si)\n   VAR1 (UNOP, lrounddf, 2, di)\n \n+  VAR1 (UNOPUS, lrounduv4hf, 2, v4hi)\n+  VAR1 (UNOPUS, lrounduv8hf, 2, v8hi)\n   VAR1 (UNOPUS, lrounduv2sf, 2, v2si)\n   VAR1 (UNOPUS, lrounduv4sf, 2, v4si)\n   VAR1 (UNOPUS, lrounduv2df, 2, v2di)\n   VAR1 (UNOPUS, lroundusf, 2, si)\n   VAR1 (UNOPUS, lroundudf, 2, di)\n \n+  VAR1 (UNOP, lceilv4hf, 2, v4hi)\n+  VAR1 (UNOP, lceilv8hf, 2, v8hi)\n   VAR1 (UNOP, lceilv2sf, 2, v2si)\n   VAR1 (UNOP, lceilv4sf, 2, v4si)\n   VAR1 (UNOP, lceilv2df, 2, v2di)\n \n+  VAR1 (UNOPUS, lceiluv4hf, 2, v4hi)\n+  VAR1 (UNOPUS, lceiluv8hf, 2, v8hi)\n   VAR1 (UNOPUS, lceiluv2sf, 2, v2si)\n   VAR1 (UNOPUS, lceiluv4sf, 2, v4si)\n   VAR1 (UNOPUS, lceiluv2df, 2, v2di)\n   VAR1 (UNOPUS, lceilusf, 2, si)\n   VAR1 (UNOPUS, lceiludf, 2, di)\n \n+  VAR1 (UNOP, lfloorv4hf, 2, v4hi)\n+  VAR1 (UNOP, lfloorv8hf, 2, v8hi)\n   VAR1 (UNOP, lfloorv2sf, 2, v2si)\n   VAR1 (UNOP, lfloorv4sf, 2, v4si)\n   VAR1 (UNOP, lfloorv2df, 2, v2di)\n \n+  VAR1 (UNOPUS, lflooruv4hf, 2, v4hi)\n+  VAR1 (UNOPUS, lflooruv8hf, 2, v8hi)\n   VAR1 (UNOPUS, lflooruv2sf, 2, v2si)\n   VAR1 (UNOPUS, lflooruv4sf, 2, v4si)\n   VAR1 (UNOPUS, lflooruv2df, 2, v2di)\n   VAR1 (UNOPUS, lfloorusf, 2, si)\n   VAR1 (UNOPUS, lfloorudf, 2, di)\n \n+  VAR1 (UNOP, lfrintnv4hf, 2, v4hi)\n+  VAR1 (UNOP, lfrintnv8hf, 2, v8hi)\n   VAR1 (UNOP, lfrintnv2sf, 2, v2si)\n   VAR1 (UNOP, lfrintnv4sf, 2, v4si)\n   VAR1 (UNOP, lfrintnv2df, 2, v2di)\n   VAR1 (UNOP, lfrintnsf, 2, si)\n   VAR1 (UNOP, lfrintndf, 2, di)\n \n+  VAR1 (UNOPUS, lfrintnuv4hf, 2, v4hi)\n+  VAR1 (UNOPUS, lfrintnuv8hf, 2, v8hi)\n   VAR1 (UNOPUS, lfrintnuv2sf, 2, v2si)\n   VAR1 (UNOPUS, lfrintnuv4sf, 2, v4si)\n   VAR1 (UNOPUS, lfrintnuv2df, 2, v2di)\n   VAR1 (UNOPUS, lfrintnusf, 2, si)\n   VAR1 (UNOPUS, lfrintnudf, 2, di)\n \n   /* Implemented by <optab><fcvt_target><VDQF:mode>2.  */\n+  VAR1 (UNOP, floatv4hi, 2, v4hf)\n+  VAR1 (UNOP, floatv8hi, 2, v8hf)\n   VAR1 (UNOP, floatv2si, 2, v2sf)\n   VAR1 (UNOP, floatv4si, 2, v4sf)\n   VAR1 (UNOP, floatv2di, 2, v2df)\n \n+  VAR1 (UNOP, floatunsv4hi, 2, v4hf)\n+  VAR1 (UNOP, floatunsv8hi, 2, v8hf)\n   VAR1 (UNOP, floatunsv2si, 2, v2sf)\n   VAR1 (UNOP, floatunsv4si, 2, v4sf)\n   VAR1 (UNOP, floatunsv2di, 2, v2df)\n@@ -358,13 +382,13 @@\n \n   BUILTIN_VDQ_SI (UNOP, urecpe, 0)\n \n-  BUILTIN_VDQF (UNOP, frecpe, 0)\n+  BUILTIN_VHSDF (UNOP, frecpe, 0)\n   BUILTIN_VDQF (BINOP, frecps, 0)\n \n   /* Implemented by a mixture of abs2 patterns.  Note the DImode builtin is\n      only ever used for the int64x1_t intrinsic, there is no scalar version.  */\n   BUILTIN_VSDQ_I_DI (UNOP, abs, 0)\n-  BUILTIN_VDQF (UNOP, abs, 2)\n+  BUILTIN_VHSDF (UNOP, abs, 2)\n \n   BUILTIN_VQ_HSF (UNOP, vec_unpacks_hi_, 10)\n   VAR1 (BINOP, float_truncate_hi_, 0, v4sf)\n@@ -457,7 +481,7 @@\n   BUILTIN_VALLF (SHIFTIMM_USS, fcvtzu, 3)\n \n   /* Implemented by aarch64_rsqrte<mode>.  */\n-  BUILTIN_VALLF (UNOP, rsqrte, 0)\n+  BUILTIN_VHSDF_SDF (UNOP, rsqrte, 0)\n \n   /* Implemented by aarch64_rsqrts<mode>.  */\n   BUILTIN_VALLF (BINOP, rsqrts, 0)\n@@ -467,3 +491,13 @@\n \n   /* Implemented by aarch64_faddp<mode>.  */\n   BUILTIN_VDQF (BINOP, faddp, 0)\n+\n+  /* Implemented by aarch64_cm<optab><mode>.  */\n+  BUILTIN_VHSDF_SDF (BINOP_USS, cmeq, 0)\n+  BUILTIN_VHSDF_SDF (BINOP_USS, cmge, 0)\n+  BUILTIN_VHSDF_SDF (BINOP_USS, cmgt, 0)\n+  BUILTIN_VHSDF_SDF (BINOP_USS, cmle, 0)\n+  BUILTIN_VHSDF_SDF (BINOP_USS, cmlt, 0)\n+\n+  /* Implemented by neg<mode>2.  */\n+  BUILTIN_VHSDF (UNOP, neg, 2)"}, {"sha": "8e922e697d2b1a5ab2e09974429a788731a4dcc5", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=daef0a8c7e99cbc574291227f2ed98220a5be4d4", "patch": "@@ -383,12 +383,12 @@\n )\n \n (define_insn \"aarch64_rsqrte<mode>\"\n-  [(set (match_operand:VALLF 0 \"register_operand\" \"=w\")\n-\t(unspec:VALLF [(match_operand:VALLF 1 \"register_operand\" \"w\")]\n+  [(set (match_operand:VHSDF_SDF 0 \"register_operand\" \"=w\")\n+\t(unspec:VHSDF_SDF [(match_operand:VHSDF_SDF 1 \"register_operand\" \"w\")]\n \t\t     UNSPEC_RSQRTE))]\n   \"TARGET_SIMD\"\n   \"frsqrte\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>\"\n-  [(set_attr \"type\" \"neon_fp_rsqrte_<Vetype><q>\")])\n+  [(set_attr \"type\" \"neon_fp_rsqrte_<stype><q>\")])\n \n (define_insn \"aarch64_rsqrts<mode>\"\n   [(set (match_operand:VALLF 0 \"register_operand\" \"=w\")\n@@ -1565,19 +1565,19 @@\n )\n \n (define_insn \"neg<mode>2\"\n- [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-       (neg:VDQF (match_operand:VDQF 1 \"register_operand\" \"w\")))]\n+ [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n+       (neg:VHSDF (match_operand:VHSDF 1 \"register_operand\" \"w\")))]\n  \"TARGET_SIMD\"\n  \"fneg\\\\t%0.<Vtype>, %1.<Vtype>\"\n-  [(set_attr \"type\" \"neon_fp_neg_<Vetype><q>\")]\n+  [(set_attr \"type\" \"neon_fp_neg_<stype><q>\")]\n )\n \n (define_insn \"abs<mode>2\"\n- [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-       (abs:VDQF (match_operand:VDQF 1 \"register_operand\" \"w\")))]\n+ [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n+       (abs:VHSDF (match_operand:VHSDF 1 \"register_operand\" \"w\")))]\n  \"TARGET_SIMD\"\n  \"fabs\\\\t%0.<Vtype>, %1.<Vtype>\"\n-  [(set_attr \"type\" \"neon_fp_abs_<Vetype><q>\")]\n+  [(set_attr \"type\" \"neon_fp_abs_<stype><q>\")]\n )\n \n (define_insn \"fma<mode>4\"\n@@ -1735,24 +1735,24 @@\n ;; Vector versions of the floating-point frint patterns.\n ;; Expands to btrunc, ceil, floor, nearbyint, rint, round, frintn.\n (define_insn \"<frint_pattern><mode>2\"\n-  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-\t(unspec:VDQF [(match_operand:VDQF 1 \"register_operand\" \"w\")]\n-\t\t      FRINT))]\n+  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n+\t(unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\" \"w\")]\n+\t\t       FRINT))]\n   \"TARGET_SIMD\"\n   \"frint<frint_suffix>\\\\t%0.<Vtype>, %1.<Vtype>\"\n-  [(set_attr \"type\" \"neon_fp_round_<Vetype><q>\")]\n+  [(set_attr \"type\" \"neon_fp_round_<stype><q>\")]\n )\n \n ;; Vector versions of the fcvt standard patterns.\n ;; Expands to lbtrunc, lround, lceil, lfloor\n-(define_insn \"l<fcvt_pattern><su_optab><VDQF:mode><fcvt_target>2\"\n+(define_insn \"l<fcvt_pattern><su_optab><VHSDF:mode><fcvt_target>2\"\n   [(set (match_operand:<FCVT_TARGET> 0 \"register_operand\" \"=w\")\n \t(FIXUORS:<FCVT_TARGET> (unspec:<FCVT_TARGET>\n-\t\t\t       [(match_operand:VDQF 1 \"register_operand\" \"w\")]\n+\t\t\t       [(match_operand:VHSDF 1 \"register_operand\" \"w\")]\n \t\t\t       FCVT)))]\n   \"TARGET_SIMD\"\n   \"fcvt<frint_suffix><su>\\\\t%0.<Vtype>, %1.<Vtype>\"\n-  [(set_attr \"type\" \"neon_fp_to_int_<Vetype><q>\")]\n+  [(set_attr \"type\" \"neon_fp_to_int_<stype><q>\")]\n )\n \n (define_insn \"*aarch64_fcvt<su_optab><VDQF:mode><fcvt_target>2_mult\"\n@@ -1775,36 +1775,36 @@\n   [(set_attr \"type\" \"neon_fp_to_int_<Vetype><q>\")]\n )\n \n-(define_expand \"<optab><VDQF:mode><fcvt_target>2\"\n+(define_expand \"<optab><VHSDF:mode><fcvt_target>2\"\n   [(set (match_operand:<FCVT_TARGET> 0 \"register_operand\")\n \t(FIXUORS:<FCVT_TARGET> (unspec:<FCVT_TARGET>\n-\t\t\t       [(match_operand:VDQF 1 \"register_operand\")]\n-\t\t\t       UNSPEC_FRINTZ)))]\n+\t\t\t       [(match_operand:VHSDF 1 \"register_operand\")]\n+\t\t\t\tUNSPEC_FRINTZ)))]\n   \"TARGET_SIMD\"\n   {})\n \n-(define_expand \"<fix_trunc_optab><VDQF:mode><fcvt_target>2\"\n+(define_expand \"<fix_trunc_optab><VHSDF:mode><fcvt_target>2\"\n   [(set (match_operand:<FCVT_TARGET> 0 \"register_operand\")\n \t(FIXUORS:<FCVT_TARGET> (unspec:<FCVT_TARGET>\n-\t\t\t       [(match_operand:VDQF 1 \"register_operand\")]\n-\t\t\t       UNSPEC_FRINTZ)))]\n+\t\t\t       [(match_operand:VHSDF 1 \"register_operand\")]\n+\t\t\t\tUNSPEC_FRINTZ)))]\n   \"TARGET_SIMD\"\n   {})\n \n-(define_expand \"ftrunc<VDQF:mode>2\"\n-  [(set (match_operand:VDQF 0 \"register_operand\")\n-\t(unspec:VDQF [(match_operand:VDQF 1 \"register_operand\")]\n-\t\t      UNSPEC_FRINTZ))]\n+(define_expand \"ftrunc<VHSDF:mode>2\"\n+  [(set (match_operand:VHSDF 0 \"register_operand\")\n+\t(unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\")]\n+\t\t       UNSPEC_FRINTZ))]\n   \"TARGET_SIMD\"\n   {})\n \n-(define_insn \"<optab><fcvt_target><VDQF:mode>2\"\n-  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-\t(FLOATUORS:VDQF\n+(define_insn \"<optab><fcvt_target><VHSDF:mode>2\"\n+  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n+\t(FLOATUORS:VHSDF\n \t  (match_operand:<FCVT_TARGET> 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"<su_optab>cvtf\\\\t%0.<Vtype>, %1.<Vtype>\"\n-  [(set_attr \"type\" \"neon_int_to_fp_<Vetype><q>\")]\n+  [(set_attr \"type\" \"neon_int_to_fp_<stype><q>\")]\n )\n \n ;; Conversions between vectors of floats and doubles.\n@@ -4296,14 +4296,14 @@\n   [(set (match_operand:<V_cmp_result> 0 \"register_operand\" \"=w,w\")\n \t(neg:<V_cmp_result>\n \t  (COMPARISONS:<V_cmp_result>\n-\t    (match_operand:VALLF 1 \"register_operand\" \"w,w\")\n-\t    (match_operand:VALLF 2 \"aarch64_simd_reg_or_zero\" \"w,YDz\")\n+\t    (match_operand:VHSDF_SDF 1 \"register_operand\" \"w,w\")\n+\t    (match_operand:VHSDF_SDF 2 \"aarch64_simd_reg_or_zero\" \"w,YDz\")\n \t  )))]\n   \"TARGET_SIMD\"\n   \"@\n   fcm<n_optab>\\t%<v>0<Vmtype>, %<v><cmp_1><Vmtype>, %<v><cmp_2><Vmtype>\n   fcm<optab>\\t%<v>0<Vmtype>, %<v>1<Vmtype>, 0\"\n-  [(set_attr \"type\" \"neon_fp_compare_<Vetype><q>\")]\n+  [(set_attr \"type\" \"neon_fp_compare_<stype><q>\")]\n )\n \n ;; fac(ge|gt)\n@@ -4348,20 +4348,20 @@\n ;; sqrt\n \n (define_expand \"sqrt<mode>2\"\n-  [(set (match_operand:VDQF 0 \"register_operand\")\n-\t(sqrt:VDQF (match_operand:VDQF 1 \"register_operand\")))]\n+  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n+\t(sqrt:VHSDF (match_operand:VHSDF 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n {\n   if (aarch64_emit_approx_sqrt (operands[0], operands[1], false))\n     DONE;\n })\n \n (define_insn \"*sqrt<mode>2\"\n-  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-        (sqrt:VDQF (match_operand:VDQF 1 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n+\t(sqrt:VHSDF (match_operand:VHSDF 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"fsqrt\\\\t%0.<Vtype>, %1.<Vtype>\"\n-  [(set_attr \"type\" \"neon_fp_sqrt_<Vetype><q>\")]\n+  [(set_attr \"type\" \"neon_fp_sqrt_<stype><q>\")]\n )\n \n ;; Patterns for vector struct loads and stores.\n@@ -5413,12 +5413,12 @@\n )\n \n (define_insn \"aarch64_frecpe<mode>\"\n-  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-\t(unspec:VDQF [(match_operand:VDQF 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_FRECPE))]\n+  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n+\t(unspec:VHSDF [(match_operand:VHSDF 1 \"register_operand\" \"w\")]\n+\t UNSPEC_FRECPE))]\n   \"TARGET_SIMD\"\n   \"frecpe\\\\t%0.<Vtype>, %1.<Vtype>\"\n-  [(set_attr \"type\" \"neon_fp_recpe_<Vetype><q>\")]\n+  [(set_attr \"type\" \"neon_fp_recpe_<stype><q>\")]\n )\n \n (define_insn \"aarch64_frecp<FRECP:frecp_suffix><mode>\""}, {"sha": "a5251ab0748aa5d5189d29c6e17d08b35587c05b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=daef0a8c7e99cbc574291227f2ed98220a5be4d4", "patch": "@@ -7485,6 +7485,10 @@ bool\n aarch64_emit_approx_sqrt (rtx dst, rtx src, bool recp)\n {\n   machine_mode mode = GET_MODE (dst);\n+\n+  if (GET_MODE_INNER (mode) == HFmode)\n+    return false;\n+\n   machine_mode mmsk = mode_for_vector\n \t\t        (int_mode_for_mode (GET_MODE_INNER (mode)),\n \t\t\t GET_MODE_NUNITS (mode));"}, {"sha": "b4310f27aac08ab6ff5e89d58512dafc389b2c37", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 359, "deletions": 2, "changes": 361, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=daef0a8c7e99cbc574291227f2ed98220a5be4d4", "patch": "@@ -26028,6 +26028,365 @@ __INTERLEAVE_LIST (zip)\n \n /* End of optimal implementations in approved order.  */\n \n+#pragma GCC pop_options\n+\n+/* ARMv8.2-A FP16 intrinsics.  */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+fp16\")\n+\n+/* ARMv8.2-A FP16 one operand vector intrinsics.  */\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vabs_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_absv4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vabsq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_absv8hf (__a);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vceqz_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_cmeqv4hf_uss (__a, vdup_n_f16 (0.0f));\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vceqzq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_cmeqv8hf_uss (__a, vdupq_n_f16 (0.0f));\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vcgez_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_cmgev4hf_uss (__a, vdup_n_f16 (0.0f));\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vcgezq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_cmgev8hf_uss (__a, vdupq_n_f16 (0.0f));\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vcgtz_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_cmgtv4hf_uss (__a, vdup_n_f16 (0.0f));\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vcgtzq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_cmgtv8hf_uss (__a, vdupq_n_f16 (0.0f));\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vclez_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_cmlev4hf_uss (__a, vdup_n_f16 (0.0f));\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vclezq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_cmlev8hf_uss (__a, vdupq_n_f16 (0.0f));\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vcltz_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_cmltv4hf_uss (__a, vdup_n_f16 (0.0f));\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vcltzq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_cmltv8hf_uss (__a, vdupq_n_f16 (0.0f));\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vcvt_f16_s16 (int16x4_t __a)\n+{\n+  return __builtin_aarch64_floatv4hiv4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vcvtq_f16_s16 (int16x8_t __a)\n+{\n+  return __builtin_aarch64_floatv8hiv8hf (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vcvt_f16_u16 (uint16x4_t __a)\n+{\n+  return __builtin_aarch64_floatunsv4hiv4hf ((int16x4_t) __a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vcvtq_f16_u16 (uint16x8_t __a)\n+{\n+  return __builtin_aarch64_floatunsv8hiv8hf ((int16x8_t) __a);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vcvt_s16_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_lbtruncv4hfv4hi (__a);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vcvtq_s16_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_lbtruncv8hfv8hi (__a);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vcvt_u16_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_lbtruncuv4hfv4hi_us (__a);\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vcvtq_u16_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_lbtruncuv8hfv8hi_us (__a);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vcvta_s16_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_lroundv4hfv4hi (__a);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vcvtaq_s16_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_lroundv8hfv8hi (__a);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vcvta_u16_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_lrounduv4hfv4hi_us (__a);\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vcvtaq_u16_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_lrounduv8hfv8hi_us (__a);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vcvtm_s16_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_lfloorv4hfv4hi (__a);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vcvtmq_s16_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_lfloorv8hfv8hi (__a);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vcvtm_u16_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_lflooruv4hfv4hi_us (__a);\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vcvtmq_u16_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_lflooruv8hfv8hi_us (__a);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vcvtn_s16_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_lfrintnv4hfv4hi (__a);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vcvtnq_s16_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_lfrintnv8hfv8hi (__a);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vcvtn_u16_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_lfrintnuv4hfv4hi_us (__a);\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vcvtnq_u16_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_lfrintnuv8hfv8hi_us (__a);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vcvtp_s16_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_lceilv4hfv4hi (__a);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vcvtpq_s16_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_lceilv8hfv8hi (__a);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vcvtp_u16_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_lceiluv4hfv4hi_us (__a);\n+}\n+\n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vcvtpq_u16_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_lceiluv8hfv8hi_us (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vneg_f16 (float16x4_t __a)\n+{\n+  return -__a;\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vnegq_f16 (float16x8_t __a)\n+{\n+  return -__a;\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vrecpe_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_frecpev4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vrecpeq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_frecpev8hf (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vrnd_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_btruncv4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vrndq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_btruncv8hf (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vrnda_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_roundv4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vrndaq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_roundv8hf (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vrndi_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_nearbyintv4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vrndiq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_nearbyintv8hf (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vrndm_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_floorv4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vrndmq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_floorv8hf (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vrndn_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_frintnv4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vrndnq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_frintnv8hf (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vrndp_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_ceilv4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vrndpq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_ceilv8hf (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vrndx_f16 (float16x4_t __a)\n+{\n+  return __builtin_aarch64_rintv4hf (__a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vrndxq_f16 (float16x8_t __a)\n+{\n+  return __builtin_aarch64_rintv8hf (__a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vrsqrte_f16 (float16x4_t a)\n+{\n+  return __builtin_aarch64_rsqrtev4hf (a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vrsqrteq_f16 (float16x8_t a)\n+{\n+  return __builtin_aarch64_rsqrtev8hf (a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vsqrt_f16 (float16x4_t a)\n+{\n+  return __builtin_aarch64_sqrtv4hf (a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vsqrtq_f16 (float16x8_t a)\n+{\n+  return __builtin_aarch64_sqrtv8hf (a);\n+}\n+\n+#pragma GCC pop_options\n+\n #undef __aarch64_vget_lane_any\n \n #undef __aarch64_vdup_lane_any\n@@ -26084,6 +26443,4 @@ __INTERLEAVE_LIST (zip)\n #undef __aarch64_vdupq_laneq_u32\n #undef __aarch64_vdupq_laneq_u64\n \n-#pragma GCC pop_options\n-\n #endif"}, {"sha": "af5eda9b9f4a80e1309655dcd7798337e1d818eb", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daef0a8c7e99cbc574291227f2ed98220a5be4d4/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=daef0a8c7e99cbc574291227f2ed98220a5be4d4", "patch": "@@ -88,11 +88,20 @@\n ;; Vector Float modes suitable for moving, loading and storing.\n (define_mode_iterator VDQF_F16 [V4HF V8HF V2SF V4SF V2DF])\n \n-;; Vector Float modes, barring HF modes.\n+;; Vector Float modes.\n (define_mode_iterator VDQF [V2SF V4SF V2DF])\n+(define_mode_iterator VHSDF [(V4HF \"TARGET_SIMD_F16INST\")\n+\t\t\t     (V8HF \"TARGET_SIMD_F16INST\")\n+\t\t\t     V2SF V4SF V2DF])\n \n ;; Vector Float modes, and DF.\n (define_mode_iterator VDQF_DF [V2SF V4SF V2DF DF])\n+(define_mode_iterator VHSDF_DF [(V4HF \"TARGET_SIMD_F16INST\")\n+\t\t\t\t(V8HF \"TARGET_SIMD_F16INST\")\n+\t\t\t\tV2SF V4SF V2DF DF])\n+(define_mode_iterator VHSDF_SDF [(V4HF \"TARGET_SIMD_F16INST\")\n+\t\t\t\t (V8HF \"TARGET_SIMD_F16INST\")\n+\t\t\t\t V2SF V4SF V2DF SF DF])\n \n ;; Vector single Float modes.\n (define_mode_iterator VDQSF [V2SF V4SF])\n@@ -366,7 +375,8 @@\n \t\t    (V4HI \"\") (V8HI \"\")\n \t\t    (V2SI \"\") (V4SI  \"\")\n \t\t    (V2DI \"\") (V2SF \"\")\n-\t\t    (V4SF \"\") (V2DF \"\")])\n+\t\t    (V4SF \"\") (V4HF \"\")\n+\t\t    (V8HF \"\") (V2DF \"\")])\n \n ;; For scalar usage of vector/FP registers, narrowing\n (define_mode_attr vn2 [(QI \"\") (HI \"b\") (SI \"h\") (DI \"s\")\n@@ -447,6 +457,16 @@\n \t\t\t  (QI \"b\")   (HI \"h\")\n \t\t\t  (SI \"s\")   (DI \"d\")])\n \n+;; Vetype is used everywhere in scheduling type and assembly output,\n+;; sometimes they are not the same, for example HF modes on some\n+;; instructions.  stype is defined to represent scheduling type\n+;; more accurately.\n+(define_mode_attr stype [(V8QI \"b\") (V16QI \"b\") (V4HI \"s\") (V8HI \"s\")\n+\t\t\t (V2SI \"s\") (V4SI \"s\") (V2DI \"d\") (V4HF \"s\")\n+\t\t\t (V8HF \"s\") (V2SF \"s\") (V4SF \"s\") (V2DF \"d\")\n+\t\t\t (HF \"s\") (SF \"s\") (DF \"d\") (QI \"b\") (HI \"s\")\n+\t\t\t (SI \"s\") (DI \"d\")])\n+\n ;; Mode-to-bitwise operation type mapping.\n (define_mode_attr Vbtype [(V8QI \"8b\")  (V16QI \"16b\")\n \t\t\t  (V4HI \"8b\") (V8HI  \"16b\")\n@@ -656,10 +676,14 @@\n \n (define_mode_attr fcvt_target [(V2DF \"v2di\") (V4SF \"v4si\") (V2SF \"v2si\")\n \t\t\t       (V2DI \"v2df\") (V4SI \"v4sf\") (V2SI \"v2sf\")\n-\t\t\t       (SF \"si\") (DF \"di\") (SI \"sf\") (DI \"df\")])\n+\t\t\t       (SF \"si\") (DF \"di\") (SI \"sf\") (DI \"df\")\n+\t\t\t       (V4HF \"v4hi\") (V8HF \"v8hi\") (V4HI \"v4hf\")\n+\t\t\t       (V8HI \"v8hf\")])\n (define_mode_attr FCVT_TARGET [(V2DF \"V2DI\") (V4SF \"V4SI\") (V2SF \"V2SI\")\n \t\t\t       (V2DI \"V2DF\") (V4SI \"V4SF\") (V2SI \"V2SF\")\n-\t\t\t       (SF \"SI\") (DF \"DI\") (SI \"SF\") (DI \"DF\")])\n+\t\t\t       (SF \"SI\") (DF \"DI\") (SI \"SF\") (DI \"DF\")\n+\t\t\t       (V4HF \"V4HI\") (V8HF \"V8HI\") (V4HI \"V4HF\")\n+\t\t\t       (V8HI \"V8HF\")])\n \n \n ;; for the inequal width integer to fp conversions\n@@ -687,6 +711,7 @@\n ;; the 'x' constraint.  All other modes may use the 'w' constraint.\n (define_mode_attr h_con [(V2SI \"w\") (V4SI \"w\")\n \t\t\t (V4HI \"x\") (V8HI \"x\")\n+\t\t\t (V4HF \"w\") (V8HF \"w\")\n \t\t\t (V2SF \"w\") (V4SF \"w\")\n \t\t\t (V2DF \"w\") (DF \"w\")])\n "}]}