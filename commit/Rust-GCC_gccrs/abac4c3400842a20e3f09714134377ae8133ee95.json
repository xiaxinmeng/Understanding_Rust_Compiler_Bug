{"sha": "abac4c3400842a20e3f09714134377ae8133ee95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJhYzRjMzQwMDg0MmEyMGUzZjA5NzE0MTM0Mzc3YWU4MTMzZWU5NQ==", "commit": {"author": {"name": "Denis Khalikov", "email": "d.khalikov@partner.samsung.com", "date": "2017-04-13T14:52:23Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2017-04-13T14:52:23Z"}, "message": "re PR sanitizer/80414 ([UBSAN] segfault with -fsanitize=undefined)\n\n\tPR sanitizer/80414\n\t* ubsan.c (ubsan_expand_bounds_ifn): Pass original index\n\tto ubsan_encode_value.\n\n\t* c-c++-common/ubsan/bounds-15.c: New test.\n\nFrom-SVN: r246909", "tree": {"sha": "5b7d0a266ba8621da1826fad0f8009fa4d0b9fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b7d0a266ba8621da1826fad0f8009fa4d0b9fc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abac4c3400842a20e3f09714134377ae8133ee95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abac4c3400842a20e3f09714134377ae8133ee95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abac4c3400842a20e3f09714134377ae8133ee95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abac4c3400842a20e3f09714134377ae8133ee95/comments", "author": null, "committer": null, "parents": [{"sha": "3535a0fb6f43d4d985f3bbf9699bc3eea4fb64b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3535a0fb6f43d4d985f3bbf9699bc3eea4fb64b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3535a0fb6f43d4d985f3bbf9699bc3eea4fb64b0"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "2fb6b3522312aa98f75bd532483f548ffa74be67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abac4c3400842a20e3f09714134377ae8133ee95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abac4c3400842a20e3f09714134377ae8133ee95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abac4c3400842a20e3f09714134377ae8133ee95", "patch": "@@ -1,3 +1,9 @@\n+2017-04-13  Denis Khalikov <d.khalikov@partner.samsung.com>\n+\n+\tPR sanitizer/80414\n+\t* ubsan.c (ubsan_expand_bounds_ifn): Pass original index\n+\tto ubsan_encode_value.\n+\n 2017-04-13  Jeff Law  <law@redhat.com>\n \n \t* reload1.c (eliminate_regs_1): Call gen_rtx_raw_SUBREG for SUBREGs"}, {"sha": "c7b8d61736454c8b78edd5533206d6a57ce89103", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abac4c3400842a20e3f09714134377ae8133ee95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abac4c3400842a20e3f09714134377ae8133ee95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=abac4c3400842a20e3f09714134377ae8133ee95", "patch": "@@ -1,3 +1,8 @@\n+2017-04-13  Denis Khalikov  <d.khalikov@partner.samsung.com>\n+\n+\tPR sanitizer/80414\n+\t* c-c++-common/ubsan/bounds-15.c: New test.\n+\n 2017-04-13  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/80416"}, {"sha": "5fa8eee524e281ccc03b70cf87156d2ae14e3596", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-15.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abac4c3400842a20e3f09714134377ae8133ee95/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abac4c3400842a20e3f09714134377ae8133ee95/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-15.c?ref=abac4c3400842a20e3f09714134377ae8133ee95", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=bounds\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O0\" } } */\n+\n+int main()\n+{\n+  long long offset = 10;\n+  char array[10];\n+  char c = array[offset];\n+  return 0;\n+}\n+\n+/* { dg-output \"index 10 out of bounds for type 'char \\\\\\[10\\\\\\]'\" } */"}, {"sha": "4159cc5f6f94a134ae28571754808e7d243346bb", "filename": "gcc/ubsan.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abac4c3400842a20e3f09714134377ae8133ee95/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abac4c3400842a20e3f09714134377ae8133ee95/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=abac4c3400842a20e3f09714134377ae8133ee95", "patch": "@@ -673,7 +673,7 @@ ubsan_expand_bounds_ifn (gimple_stmt_iterator *gsi)\n   /* Pick up the arguments of the UBSAN_BOUNDS call.  */\n   tree type = TREE_TYPE (TREE_TYPE (gimple_call_arg (stmt, 0)));\n   tree index = gimple_call_arg (stmt, 1);\n-  tree orig_index_type = TREE_TYPE (index);\n+  tree orig_index = index;\n   tree bound = gimple_call_arg (stmt, 2);\n \n   gimple_stmt_iterator gsi_orig = *gsi;\n@@ -700,17 +700,17 @@ ubsan_expand_bounds_ifn (gimple_stmt_iterator *gsi)\n       tree data\n \t= ubsan_create_data (\"__ubsan_out_of_bounds_data\", 1, &loc,\n \t\t\t     ubsan_type_descriptor (type, UBSAN_PRINT_ARRAY),\n-\t\t\t     ubsan_type_descriptor (orig_index_type),\n+\t\t\t     ubsan_type_descriptor (TREE_TYPE (orig_index)),\n \t\t\t     NULL_TREE, NULL_TREE);\n       data = build_fold_addr_expr_loc (loc, data);\n       enum built_in_function bcode\n \t= (flag_sanitize_recover & SANITIZE_BOUNDS)\n \t  ? BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS\n \t  : BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT;\n       tree fn = builtin_decl_explicit (bcode);\n-      tree val = force_gimple_operand_gsi (gsi, ubsan_encode_value (index),\n-\t\t\t\t\t   true, NULL_TREE, true,\n-\t\t\t\t\t   GSI_SAME_STMT);\n+      tree val\n+\t= force_gimple_operand_gsi (gsi, ubsan_encode_value (orig_index), true,\n+\t\t\t\t    NULL_TREE, true, GSI_SAME_STMT);\n       g = gimple_build_call (fn, 2, data, val);\n     }\n   gimple_set_location (g, loc);"}]}