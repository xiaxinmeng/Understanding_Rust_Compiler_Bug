{"sha": "d2384b7b24f8557b66f6958a05ea99ff4307e75c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIzODRiN2IyNGY4NTU3YjY2ZjY5NThhMDVlYTk5ZmY0MzA3ZTc1Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-17T18:48:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-17T19:02:53Z"}, "message": "c-family: check qualifiers of arguments to __atomic built-ins (PR 95378)\n\nCurrently the __atomic_{load,store,exchange,compare_exchange} built-ins\nwill happily store values through pointers to const, or use pointers to\nvolatile as the input and output arguments. This patch ensures that any\npointer that will be written through does not point to a const object,\nand only the pointer to the atomic variable can be volatile.\n\nThis differs slightly from Clang, which allows the third argument to\n__atomic_exchange (the one that is used to return the old value) to be\nvolatile if and only if the first argument is volatile. That doesn't\nseem useful.\n\nFor C++ emit errors, but for C use pedwarns that are controlled by\n-Wincompatible-pointer-types.\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.c (get_atomic_generic_size): Check cv-qualifiers in\n\tpointer arguments.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/pr95378.c: New test.", "tree": {"sha": "87421899129a396ec7cdf476312dc30ae7cd7f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87421899129a396ec7cdf476312dc30ae7cd7f22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2384b7b24f8557b66f6958a05ea99ff4307e75c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2384b7b24f8557b66f6958a05ea99ff4307e75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2384b7b24f8557b66f6958a05ea99ff4307e75c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2384b7b24f8557b66f6958a05ea99ff4307e75c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e49b994de060d4a6c9318d0ed52ef038153426e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e49b994de060d4a6c9318d0ed52ef038153426e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e49b994de060d4a6c9318d0ed52ef038153426e"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "b73ad2ea3d226b5ace22a9c4529396f4f929cf6f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2384b7b24f8557b66f6958a05ea99ff4307e75c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2384b7b24f8557b66f6958a05ea99ff4307e75c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=d2384b7b24f8557b66f6958a05ea99ff4307e75c", "patch": "@@ -6903,6 +6903,7 @@ get_atomic_generic_size (location_t loc, tree function,\n {\n   unsigned int n_param;\n   unsigned int n_model;\n+  unsigned int outputs = 0; // bitset of output parameters\n   unsigned int x;\n   int size_0;\n   tree type_0;\n@@ -6913,15 +6914,22 @@ get_atomic_generic_size (location_t loc, tree function,\n     case BUILT_IN_ATOMIC_EXCHANGE:\n       n_param = 4;\n       n_model = 1;\n+      outputs = 5;\n       break;\n     case BUILT_IN_ATOMIC_LOAD:\n+      n_param = 3;\n+      n_model = 1;\n+      outputs = 2;\n+      break;\n     case BUILT_IN_ATOMIC_STORE:\n       n_param = 3;\n       n_model = 1;\n+      outputs = 1;\n       break;\n     case BUILT_IN_ATOMIC_COMPARE_EXCHANGE:\n       n_param = 6;\n       n_model = 2;\n+      outputs = 3;\n       break;\n     default:\n       gcc_unreachable ();\n@@ -7010,6 +7018,39 @@ get_atomic_generic_size (location_t loc, tree function,\n \t\t    function);\n \t  return 0;\n \t}\n+\n+      {\n+\tauto_diagnostic_group d;\n+\tint quals = TYPE_QUALS (TREE_TYPE (type));\n+\t/* Must not write to an argument of a const-qualified type.  */\n+\tif (outputs & (1 << x) && quals & TYPE_QUAL_CONST)\n+\t  {\n+\t    if (c_dialect_cxx ())\n+\t      {\n+\t\terror_at (loc, \"argument %d of %qE must not be a pointer to \"\n+\t\t\t  \"a %<const%> type\", x + 1, function);\n+\t\treturn 0;\n+\t      }\n+\t    else\n+\t      pedwarn (loc, OPT_Wincompatible_pointer_types, \"argument %d \"\n+\t\t       \"of %qE discards %<const%> qualifier\", x + 1,\n+\t\t       function);\n+\t  }\n+\t/* Only the first argument is allowed to be volatile.  */\n+\tif (x > 0 && quals & TYPE_QUAL_VOLATILE)\n+\t  {\n+\t    if (c_dialect_cxx ())\n+\t      {\n+\t\terror_at (loc, \"argument %d of %qE must not be a pointer to \"\n+\t\t\t  \"a %<volatile%> type\", x + 1, function);\n+\t\treturn 0;\n+\t      }\n+\t    else\n+\t      pedwarn (loc, OPT_Wincompatible_pointer_types, \"argument %d \"\n+\t\t       \"of %qE discards %<volatile%> qualifier\", x + 1,\n+\t\t       function);\n+\t  }\n+      }\n     }\n \n   /* Check memory model parameters for validity.  */"}, {"sha": "a547d1febf56fb1f62f96d078ee524f24483b416", "filename": "gcc/testsuite/c-c++-common/pr95378.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2384b7b24f8557b66f6958a05ea99ff4307e75c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95378.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2384b7b24f8557b66f6958a05ea99ff4307e75c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95378.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr95378.c?ref=d2384b7b24f8557b66f6958a05ea99ff4307e75c", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+\n+#define seq_cst __ATOMIC_SEQ_CST\n+\n+extern int *i;\n+extern int *j;\n+extern const int *c;\n+extern volatile int *v;\n+extern const volatile int *cv;\n+\n+void\n+load()\n+{\n+  __atomic_load(c, i, seq_cst);\n+  __atomic_load(cv, i, seq_cst);\n+\n+  __atomic_load(i, c, seq_cst);\n+  /* { dg-error \"argument 2 of '__atomic_load' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 2 of '__atomic_load' discards 'const' qualifier\" \"\" { target c } .-2 } */\n+  __atomic_load(i, v, seq_cst);\n+  /* { dg-error \"argument 2 of '__atomic_load' must not be a pointer to a 'volatile' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 2 of '__atomic_load' discards 'volatile' qualifier\" \"\" { target c } .-2 } */\n+  __atomic_load(i, cv, seq_cst);\n+  /* { dg-error \"argument 2 of '__atomic_load' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 2 of '__atomic_load' discards 'const' qualifier\" \"\" { target c } .-2 } */\n+  /* { dg-warning \"argument 2 of '__atomic_load' discards 'volatile' qualifier\" \"\" { target c } .-3 } */\n+}\n+\n+void\n+store()\n+{\n+  __atomic_store(i, c, seq_cst);\n+  __atomic_store(v, c, seq_cst);\n+\n+  __atomic_store(c, i, seq_cst);\n+  /* { dg-error \"argument 1 of '__atomic_store' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 1 of '__atomic_store' discards 'const' qualifier\" \"\" { target c } .-2 } */\n+  __atomic_store(cv, i, seq_cst);\n+  /* { dg-error \"argument 1 of '__atomic_store' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 1 of '__atomic_store' discards 'const' qualifier\" \"\" { target c } .-2 } */\n+\n+  __atomic_store(i, v, seq_cst);\n+  /* { dg-error \"argument 2 of '__atomic_store' must not be a pointer to a 'volatile' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 2 of '__atomic_store' discards 'volatile' qualifier\" \"\" { target c } .-2 } */\n+}\n+\n+void\n+exchange()\n+{\n+  __atomic_exchange(i, c, j, seq_cst);\n+  __atomic_exchange(v, i, j, seq_cst);\n+  __atomic_exchange(v, c, j, seq_cst);\n+\n+  __atomic_exchange(c, i, j, seq_cst);\n+  /* { dg-error \"argument 1 of '__atomic_exchange' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 1 of '__atomic_exchange' discards 'const' qualifier\" \"\" { target c } .-2 } */\n+  __atomic_exchange(cv, i, j, seq_cst);\n+  /* { dg-error \"argument 1 of '__atomic_exchange' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 1 of '__atomic_exchange' discards 'const' qualifier\" \"\" { target c } .-2 } */\n+\n+  __atomic_exchange(i, v, j, seq_cst);\n+  /* { dg-error \"argument 2 of '__atomic_exchange' must not be a pointer to a 'volatile' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 2 of '__atomic_exchange' discards 'volatile' qualifier\" \"\" { target c } .-2 } */\n+  __atomic_exchange(i, cv, j, seq_cst);\n+  /* { dg-error \"argument 2 of '__atomic_exchange' must not be a pointer to a 'volatile' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 2 of '__atomic_exchange' discards 'volatile' qualifier\" \"\" { target c } .-2 } */\n+\n+  __atomic_exchange(i, j, c, seq_cst);\n+  /* { dg-error \"argument 3 of '__atomic_exchange' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 3 of '__atomic_exchange' discards 'const' qualifier\" \"\" { target c } .-2 } */\n+  __atomic_exchange(i, j, v, seq_cst);\n+  /* { dg-error \"argument 3 of '__atomic_exchange' must not be a pointer to a 'volatile' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 3 of '__atomic_exchange' discards 'volatile' qualifier\" \"\" { target c } .-2 } */\n+  __atomic_exchange(i, j, cv, seq_cst);\n+  /* { dg-error \"argument 3 of '__atomic_exchange' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 3 of '__atomic_exchange' discards 'const' qualifier\" \"\" { target c } .-2 } */\n+  /* { dg-warning \"argument 3 of '__atomic_exchange' discards 'volatile' qualifier\" \"\" { target c } .-3 } */\n+}\n+\n+void\n+compare_exchange()\n+{\n+  __atomic_compare_exchange(i, j, c, 1, seq_cst, seq_cst);\n+  __atomic_compare_exchange(v, i, j, 1, seq_cst, seq_cst);\n+  __atomic_compare_exchange(v, i, c, 1, seq_cst, seq_cst);\n+\n+  __atomic_compare_exchange(c, i, j, 1, seq_cst, seq_cst);\n+  /* { dg-error \"argument 1 of '__atomic_compare_exchange' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 1 of '__atomic_compare_exchange' discards 'const' qualifier\" \"\" { target c } .-2 } */\n+  __atomic_compare_exchange(cv, i, j, 1, seq_cst, seq_cst);\n+  /* { dg-error \"argument 1 of '__atomic_compare_exchange' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 1 of '__atomic_compare_exchange' discards 'const' qualifier\" \"\" { target c } .-2 } */\n+\n+  __atomic_compare_exchange(i, c, j, 1, seq_cst, seq_cst);\n+  /* { dg-error \"argument 2 of '__atomic_compare_exchange' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 2 of '__atomic_compare_exchange' discards 'const' qualifier\" \"\" { target c } .-2 } */\n+  __atomic_compare_exchange(i, v, j, 1, seq_cst, seq_cst);\n+  /* { dg-error \"argument 2 of '__atomic_compare_exchange' must not be a pointer to a 'volatile' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 2 of '__atomic_compare_exchange' discards 'volatile' qualifier\" \"\" { target c } .-2 } */\n+  __atomic_compare_exchange(i, cv, j, 1, seq_cst, seq_cst);\n+  /* { dg-error \"argument 2 of '__atomic_compare_exchange' must not be a pointer to a 'const' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 2 of '__atomic_compare_exchange' discards 'const\" \"\" { target c } .-2 } */\n+  /* { dg-warning \"argument 2 of '__atomic_compare_exchange' discards 'volatile' qualifier\" \"\" { target c } .-3 } */\n+\n+  __atomic_compare_exchange(i, j, v, 1, seq_cst, seq_cst);\n+  /* { dg-error \"argument 3 of '__atomic_compare_exchange' must not be a pointer to a 'volatile' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 3 of '__atomic_compare_exchange' discards 'volatile' qualifier\" \"\" { target c } .-2 } */\n+  __atomic_compare_exchange(i, j, cv, 1, seq_cst, seq_cst);\n+  /* { dg-error \"argument 3 of '__atomic_compare_exchange' must not be a pointer to a 'volatile' type\" \"\" { target c++ } .-1 } */\n+  /* { dg-warning \"argument 3 of '__atomic_compare_exchange' discards 'volatile' qualifier\" \"\" { target c } .-2 } */\n+}"}]}