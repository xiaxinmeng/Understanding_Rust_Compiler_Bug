{"sha": "367f52dcc24045b072aeb26bc301a2980b39241f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY3ZjUyZGNjMjQwNDViMDcyYWViMjZiYzMwMWEyOTgwYjM5MjQxZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-10T09:03:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-11T07:29:35Z"}, "message": "Expose stable sort algorithm to gcc_sort_r and add vec::stablesort\n\nThis makes it possible to apply GCCs stable sort algorithm to vec<>\nand also use it with the qsort_r compatible interface.\n\n2021-06-10  Richard Biener  <rguenther@suse.de>\n\n\t* system.h (gcc_stablesort_r): Declare.\n\t* sort.cc (gcc_sort_r): Support stable sort.\n\t(gcc_stablesort_r): Define.\n\t* vec.h (vec<>::stablesort): Add.", "tree": {"sha": "e4af068ad4db4d7219b221bd0176c49776b9a4ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4af068ad4db4d7219b221bd0176c49776b9a4ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/367f52dcc24045b072aeb26bc301a2980b39241f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367f52dcc24045b072aeb26bc301a2980b39241f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/367f52dcc24045b072aeb26bc301a2980b39241f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367f52dcc24045b072aeb26bc301a2980b39241f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26dbe85a3781af913639b17bc966f4a0b8209f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26dbe85a3781af913639b17bc966f4a0b8209f3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26dbe85a3781af913639b17bc966f4a0b8209f3b"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "1c83c62008dbf7a70d714b7b0df450f2953a9874", "filename": "gcc/sort.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367f52dcc24045b072aeb26bc301a2980b39241f/gcc%2Fsort.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367f52dcc24045b072aeb26bc301a2980b39241f/gcc%2Fsort.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsort.cc?ref=367f52dcc24045b072aeb26bc301a2980b39241f", "patch": "@@ -277,8 +277,12 @@ gcc_sort_r (void *vbase, size_t n, size_t size, sort_r_cmp_fn *cmp, void *data)\n {\n   if (n < 2)\n     return;\n+  size_t nlim = 5;\n+  bool stable = (ssize_t) size < 0;\n+  if (stable)\n+    nlim = 3, size = ~size;\n   char *base = (char *)vbase;\n-  sort_r_ctx c = {data, cmp, base, n, size, 5};\n+  sort_r_ctx c = {data, cmp, base, n, size, nlim};\n   long long scratch[32];\n   size_t bufsz = (n / 2) * size;\n   void *buf = bufsz <= sizeof scratch ? scratch : xmalloc (bufsz);\n@@ -296,3 +300,11 @@ gcc_stablesort (void *vbase, size_t n, size_t size, cmp_fn *cmp)\n {\n   gcc_qsort (vbase, n, ~size, cmp);\n }\n+\n+/* Stable sort, signature-compatible to Glibc qsort_r.  */\n+void\n+gcc_stablesort_r (void *vbase, size_t n, size_t size, sort_r_cmp_fn *cmp,\n+\t\t  void *data)\n+{\n+  gcc_sort_r (vbase, n, ~size, cmp, data);\n+}"}, {"sha": "adde3e264b6c3a0a7728eb6028910015885715bc", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367f52dcc24045b072aeb26bc301a2980b39241f/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367f52dcc24045b072aeb26bc301a2980b39241f/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=367f52dcc24045b072aeb26bc301a2980b39241f", "patch": "@@ -1250,6 +1250,7 @@ void gcc_sort_r (void *, size_t, size_t, sort_r_cmp_fn *, void *);\n void gcc_qsort (void *, size_t, size_t, int (*)(const void *, const void *));\n void gcc_stablesort (void *, size_t, size_t,\n \t\t     int (*)(const void *, const void *));\n+void gcc_stablesort_r (void *, size_t, size_t, sort_r_cmp_fn *, void *data);\n /* Redirect four-argument qsort calls to gcc_qsort; one-argument invocations\n    correspond to vec::qsort, and use C qsort internally.  */\n #define PP_5th(a1, a2, a3, a4, a5, ...) a5"}, {"sha": "193377cb69c287c18bf8133c846c9a3bd8b31279", "filename": "gcc/vec.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367f52dcc24045b072aeb26bc301a2980b39241f/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367f52dcc24045b072aeb26bc301a2980b39241f/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=367f52dcc24045b072aeb26bc301a2980b39241f", "patch": "@@ -612,6 +612,7 @@ struct GTY((user)) vec<T, A, vl_embed>\n   void block_remove (unsigned, unsigned);\n   void qsort (int (*) (const void *, const void *));\n   void sort (int (*) (const void *, const void *, void *), void *);\n+  void stablesort (int (*) (const void *, const void *, void *), void *);\n   T *bsearch (const void *key, int (*compar)(const void *, const void *));\n   T *bsearch (const void *key,\n \t      int (*compar)(const void *, const void *, void *), void *);\n@@ -1160,6 +1161,17 @@ vec<T, A, vl_embed>::sort (int (*cmp) (const void *, const void *, void *),\n     gcc_sort_r (address (), length (), sizeof (T), cmp, data);\n }\n \n+/* Sort the contents of this vector with gcc_stablesort_r.  CMP is the\n+   comparison function to pass to qsort.  */\n+\n+template<typename T, typename A>\n+inline void\n+vec<T, A, vl_embed>::stablesort (int (*cmp) (const void *, const void *,\n+\t\t\t\t\t     void *), void *data)\n+{\n+  if (length () > 1)\n+    gcc_stablesort_r (address (), length (), sizeof (T), cmp, data);\n+}\n \n /* Search the contents of the sorted vector with a binary search.\n    CMP is the comparison function to pass to bsearch.  */\n@@ -1488,6 +1500,7 @@ struct vec<T, va_heap, vl_ptr>\n   void block_remove (unsigned, unsigned);\n   void qsort (int (*) (const void *, const void *));\n   void sort (int (*) (const void *, const void *, void *), void *);\n+  void stablesort (int (*) (const void *, const void *, void *), void *);\n   T *bsearch (const void *key, int (*compar)(const void *, const void *));\n   T *bsearch (const void *key,\n \t      int (*compar)(const void *, const void *, void *), void *);\n@@ -2053,6 +2066,17 @@ vec<T, va_heap, vl_ptr>::sort (int (*cmp) (const void *, const void *,\n     m_vec->sort (cmp, data);\n }\n \n+/* Sort the contents of this vector with gcc_stablesort_r.  CMP is the\n+   comparison function to pass to qsort.  */\n+\n+template<typename T>\n+inline void\n+vec<T, va_heap, vl_ptr>::stablesort (int (*cmp) (const void *, const void *,\n+\t\t\t\t\t\t void *), void *data)\n+{\n+  if (m_vec)\n+    m_vec->stablesort (cmp, data);\n+}\n \n /* Search the contents of the sorted vector with a binary search.\n    CMP is the comparison function to pass to bsearch.  */"}]}