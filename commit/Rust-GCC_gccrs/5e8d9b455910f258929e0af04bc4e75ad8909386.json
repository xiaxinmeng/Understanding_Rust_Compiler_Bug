{"sha": "5e8d9b455910f258929e0af04bc4e75ad8909386", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU4ZDliNDU1OTEwZjI1ODkyOWUwYWYwNGJjNGU3NWFkODkwOTM4Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-09-06T17:41:48Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-09-06T17:41:48Z"}, "message": "tree-ssa-dom.c (cprop_into_successor_phis): Also propagate edge implied equivalences into successor phis.\n\n        * tree-ssa-dom.c (cprop_into_successor_phis): Also propagate\n        edge implied equivalences into successor phis.\n\nFrom-SVN: r202345", "tree": {"sha": "c8d0ffded8d0eba1cb4f38fea3378802437edd37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8d0ffded8d0eba1cb4f38fea3378802437edd37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e8d9b455910f258929e0af04bc4e75ad8909386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8d9b455910f258929e0af04bc4e75ad8909386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e8d9b455910f258929e0af04bc4e75ad8909386", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e8d9b455910f258929e0af04bc4e75ad8909386/comments", "author": null, "committer": null, "parents": [{"sha": "3a001aff33dee19c0e93dddd4a31b67b044db267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a001aff33dee19c0e93dddd4a31b67b044db267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a001aff33dee19c0e93dddd4a31b67b044db267"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "67cf9e57a89ba45e19bfe03d56ff4dc255966e7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8d9b455910f258929e0af04bc4e75ad8909386/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8d9b455910f258929e0af04bc4e75ad8909386/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e8d9b455910f258929e0af04bc4e75ad8909386", "patch": "@@ -1,3 +1,8 @@\n+2013-09-06  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (cprop_into_successor_phis): Also propagate\n+\tedge implied equivalences into successor phis.\n+\n 2013-09-06  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* resource.c (mark_referenced_resources): Handle COND_EXEC."}, {"sha": "f999a648e26e16225d46dca39b8c09be9d7ed96f", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e8d9b455910f258929e0af04bc4e75ad8909386/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e8d9b455910f258929e0af04bc4e75ad8909386/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=5e8d9b455910f258929e0af04bc4e75ad8909386", "patch": "@@ -1642,6 +1642,28 @@ cprop_into_successor_phis (basic_block bb)\n       if (gsi_end_p (gsi))\n \tcontinue;\n \n+      /* We may have an equivalence associated with this edge.  While\n+\t we can not propagate it into non-dominated blocks, we can\n+\t propagate them into PHIs in non-dominated blocks.  */\n+\n+      /* Push the unwind marker so we can reset the const and copies\n+\t table back to its original state after processing this edge.  */\n+      const_and_copies_stack.safe_push (NULL_TREE);\n+\n+      /* Extract and record any simple NAME = VALUE equivalences. \n+\n+\t Don't bother with [01] = COND equivalences, they're not useful\n+\t here.  */\n+      struct edge_info *edge_info = (struct edge_info *) e->aux;\n+      if (edge_info)\n+\t{\n+\t  tree lhs = edge_info->lhs;\n+\t  tree rhs = edge_info->rhs;\n+\n+\t  if (lhs && TREE_CODE (lhs) == SSA_NAME)\n+\t    record_const_or_copy (lhs, rhs);\n+\t}\n+\n       indx = e->dest_idx;\n       for ( ; !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n@@ -1667,6 +1689,8 @@ cprop_into_successor_phis (basic_block bb)\n \t      && may_propagate_copy (orig_val, new_val))\n \t    propagate_value (orig_p, new_val);\n \t}\n+\n+      restore_vars_to_original_value ();\n     }\n }\n "}]}