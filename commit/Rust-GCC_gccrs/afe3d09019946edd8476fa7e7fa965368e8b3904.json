{"sha": "afe3d09019946edd8476fa7e7fa965368e8b3904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZlM2QwOTAxOTk0NmVkZDg0NzZmYTdlN2ZhOTY1MzY4ZThiMzkwNA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-09-07T10:10:01Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-09-07T10:10:01Z"}, "message": "Commit parts that were missing in Mark's last commit\n\nFrom-SVN: r29164", "tree": {"sha": "194b36b94e07894eebfa0d3294f15271a8a5be02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/194b36b94e07894eebfa0d3294f15271a8a5be02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afe3d09019946edd8476fa7e7fa965368e8b3904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe3d09019946edd8476fa7e7fa965368e8b3904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe3d09019946edd8476fa7e7fa965368e8b3904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe3d09019946edd8476fa7e7fa965368e8b3904/comments", "author": null, "committer": null, "parents": [{"sha": "6bc2c8c8a62bab3cdfd5051b2fdfa6ee7a90b1c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc2c8c8a62bab3cdfd5051b2fdfa6ee7a90b1c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc2c8c8a62bab3cdfd5051b2fdfa6ee7a90b1c8"}], "stats": {"total": 1071, "additions": 560, "deletions": 511}, "files": [{"sha": "0548006777964574280f51d394bc103dfbd0f851", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=afe3d09019946edd8476fa7e7fa965368e8b3904", "patch": "@@ -2393,6 +2393,7 @@ mark_eh_state (eh)\n      struct eh_status *eh;\n {\n   mark_eh_stack (&eh->x_ehstack);\n+  mark_eh_stack (&eh->x_catchstack);\n   mark_eh_queue (&eh->x_ehqueue);\n   ggc_mark_rtx (eh->x_catch_clauses);\n \n@@ -2401,6 +2402,7 @@ mark_eh_state (eh)\n \n   ggc_mark_tree (eh->x_protect_list);\n   ggc_mark_rtx (eh->ehc);\n+  ggc_mark_rtx (eh->x_eh_return_stub_label);\n }\n \n /* This group of functions initializes the exception handling data"}, {"sha": "b83a7c421d2dee687241abfee339015d17b6c651", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=afe3d09019946edd8476fa7e7fa965368e8b3904", "patch": "@@ -6714,6 +6714,7 @@ mark_function_state (p)\n   }\n \n   ggc_mark_rtx (p->x_nonlocal_goto_handler_slots);\n+  ggc_mark_rtx (p->x_nonlocal_goto_handler_labels);\n   ggc_mark_rtx (p->x_nonlocal_goto_stack_level);\n   ggc_mark_tree (p->x_nonlocal_labels);\n }"}, {"sha": "60da127e7f24d1f34b2e0fe3eac7d1b7edca3e4f", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=afe3d09019946edd8476fa7e7fa965368e8b3904", "patch": "@@ -133,7 +133,7 @@ ggc_alloc_rtvec (nelt)\n      int nelt;\n {\n   struct ggc_rtvec *v;\n-  int size = sizeof (*v) + (nelt - 1) * sizeof (rtunion);\n+  int size = sizeof (*v) + (nelt - 1) * sizeof (rtx);\n \n   v = (struct ggc_rtvec *) xmalloc (size);\n   bzero ((char *) v, size);\n@@ -195,7 +195,7 @@ ggc_alloc_string (contents, length)\n   strings = s;\n \n #ifdef GGC_DUMP\n-  fprintf(dump, \"alloc string %p\\n\", &n->tree);\n+  fprintf(dump, \"alloc string %p\\n\", &s->string);\n #endif\n \n   bytes_alloced_since_gc += size;"}, {"sha": "aaaa344a9acebf3b59abbdacc1f106962b2fb9de", "filename": "gcc/objc/objc-parse.c", "status": "modified", "additions": 519, "deletions": 508, "changes": 1027, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Fobjc%2Fobjc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Fobjc%2Fobjc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.c?ref=afe3d09019946edd8476fa7e7fa965368e8b3904"}, {"sha": "812f831dceeee9f9c5426e1f4b1c3fb559eb3814", "filename": "gcc/objc/objc-parse.y", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Fobjc%2Fobjc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Fobjc%2Fobjc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.y?ref=afe3d09019946edd8476fa7e7fa965368e8b3904", "patch": "@@ -41,7 +41,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n-\n+#include \"ggc.h\"\n+  \n #ifdef MULTIBYTE_CHARS\n #include <locale.h>\n #endif\n@@ -229,6 +230,16 @@ int objc_public_flag;\n \n #define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)\n extern void yyprint\t\t\tPROTO ((FILE *, int, YYSTYPE));\n+\n+/* Add GC roots for variables local to this file.  */\n+void\n+c_parse_init ()\n+{\n+  ggc_add_tree_root (&declspec_stack, 1);\n+  ggc_add_tree_root (&current_declspecs, 1);\n+  ggc_add_tree_root (&prefix_attributes, 1);\n+}\n+\n %}\n \f\n %%"}, {"sha": "68c7458390a48954d72d8e7084ddcadba9ede2f1", "filename": "gcc/toplev.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe3d09019946edd8476fa7e7fa965368e8b3904/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=afe3d09019946edd8476fa7e7fa965368e8b3904", "patch": "@@ -1493,6 +1493,25 @@ decl_name (decl, verbosity)\n   return IDENTIFIER_POINTER (DECL_NAME (decl));\n }\n \f\n+/* Mark P for GC.  Also mark main_input_filename and input_filename.  */\n+static void\n+mark_file_stack (p)\n+     void *p;\n+{\n+  struct file_stack *stack = *(struct file_stack **)p;\n+\n+  /* We're only called for input_file_stack, so we can mark the current\n+     input_filename here as well.  */\n+  ggc_mark_string (main_input_filename);\n+  ggc_mark_string (input_filename);\n+\n+  while (stack)\n+    {\n+      ggc_mark_string (stack->name);\n+      stack = stack->next;\n+    }\n+}\n+\n static int need_error_newline;\n \n /* Function of last error message;\n@@ -3055,6 +3074,8 @@ compile_file (name)\n #endif\n     }\n \n+  if (ggc_p)\n+    name = ggc_alloc_string (name, strlen (name));\n   input_filename = name;\n \n   /* Put an entry on the input file stack for the main input file.  */\n@@ -4772,6 +4793,9 @@ main (argc, argv)\n   flag_short_enums = DEFAULT_SHORT_ENUMS;\n #endif\n \n+  ggc_add_root (&input_file_stack, 1, sizeof input_file_stack,\n+\t\t&mark_file_stack);\n+\n   /* Perform language-specific options intialization.  */\n   lang_init_options ();\n "}]}