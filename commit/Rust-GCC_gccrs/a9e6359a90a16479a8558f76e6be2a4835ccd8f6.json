{"sha": "a9e6359a90a16479a8558f76e6be2a4835ccd8f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTllNjM1OWE5MGExNjQ3OWE4NTU4Zjc2ZTZiZTJhNDgzNWNjZDhmNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-04-25T11:17:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-04-25T11:17:49Z"}, "message": "re PR tree-optimization/90213 (UBSAN: signed integer overflow: -5621332293356458048 * 8 cannot be represented in type 'long int')\n\n2019-04-24  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/90213\n\t* gimple-fold.c (fold_const_aggregate_ref_1): Do multiplication\n\tby size and BITS_PER_UNIT on poly-wide-ints.\n\nFrom-SVN: r270570", "tree": {"sha": "bab5c976f92cdc45765211fdfd5ca225f8b19711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab5c976f92cdc45765211fdfd5ca225f8b19711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9e6359a90a16479a8558f76e6be2a4835ccd8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e6359a90a16479a8558f76e6be2a4835ccd8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e6359a90a16479a8558f76e6be2a4835ccd8f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e6359a90a16479a8558f76e6be2a4835ccd8f6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f469220df6185dee831686631c570245769887da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f469220df6185dee831686631c570245769887da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f469220df6185dee831686631c570245769887da"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "ce8281f0504795c1af7753f61a12c9ce78a08016", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e6359a90a16479a8558f76e6be2a4835ccd8f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e6359a90a16479a8558f76e6be2a4835ccd8f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9e6359a90a16479a8558f76e6be2a4835ccd8f6", "patch": "@@ -1,3 +1,9 @@\n+2019-04-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/90213\n+\t* gimple-fold.c (fold_const_aggregate_ref_1): Do multiplication\n+\tby size and BITS_PER_UNIT on poly-wide-ints.\n+\n 2019-04-25  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/90194"}, {"sha": "f30818042ee24531b82eb38d23fd4b1eba431d2c", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9e6359a90a16479a8558f76e6be2a4835ccd8f6/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9e6359a90a16479a8558f76e6be2a4835ccd8f6/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=a9e6359a90a16479a8558f76e6be2a4835ccd8f6", "patch": "@@ -6983,14 +6983,10 @@ fold_const_aggregate_ref_1 (tree t, tree (*valueize) (tree))\n \t\t= wi::sext (wi::to_poly_offset (idx)\n \t\t\t    - wi::to_poly_offset (low_bound),\n \t\t\t    TYPE_PRECISION (TREE_TYPE (idx)));\n-\n+\t      woffset *= tree_to_uhwi (unit_size);\n+\t      woffset *= BITS_PER_UNIT;\n \t      if (woffset.to_shwi (&offset))\n \t\t{\n-\t\t  /* TODO: This code seems wrong, multiply then check\n-\t\t     to see if it fits.  */\n-\t\t  offset *= tree_to_uhwi (unit_size);\n-\t\t  offset *= BITS_PER_UNIT;\n-\n \t\t  base = TREE_OPERAND (t, 0);\n \t\t  ctor = get_base_constructor (base, &offset, valueize);\n \t\t  /* Empty constructor.  Always fold to 0.  */"}]}