{"sha": "9e5dc77f066752ffc52bdce22639c5e8cf5c3e14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1ZGM3N2YwNjY3NTJmZmM1MmJkY2UyMjYzOWM1ZThjZjVjM2UxNA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T04:31:10Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T04:31:10Z"}, "message": "tree-scalar-evolution.c (instantiate_scev_1): Renamed instantiate_scev_r.\n\n2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-scalar-evolution.c (instantiate_scev_1): Renamed\n\tinstantiate_scev_r.\n\t(instantiate_scev_r): Move code in instantiate_scev_2\n\tand instantiate_scev_1.\n\nFrom-SVN: r154538", "tree": {"sha": "f11dd4627008eeefb3ae52f445f917bf1736659d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f11dd4627008eeefb3ae52f445f917bf1736659d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e5dc77f066752ffc52bdce22639c5e8cf5c3e14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5dc77f066752ffc52bdce22639c5e8cf5c3e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e5dc77f066752ffc52bdce22639c5e8cf5c3e14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5dc77f066752ffc52bdce22639c5e8cf5c3e14/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d814176c58cadb0c551501d3c37880f63e85b988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d814176c58cadb0c551501d3c37880f63e85b988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d814176c58cadb0c551501d3c37880f63e85b988"}], "stats": {"total": 134, "additions": 95, "deletions": 39}, "files": [{"sha": "aedf0162979d99c2bd6506cc66d3cad9addeaad0", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5dc77f066752ffc52bdce22639c5e8cf5c3e14/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5dc77f066752ffc52bdce22639c5e8cf5c3e14/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=9e5dc77f066752ffc52bdce22639c5e8cf5c3e14", "patch": "@@ -1,3 +1,10 @@\n+2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-scalar-evolution.c (instantiate_scev_1): Renamed\n+\tinstantiate_scev_r.\n+\t(instantiate_scev_r): Move code in instantiate_scev_2\n+\tand instantiate_scev_1.\n+\n 2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-scalar-evolution.c (instantiate_scev_3): New."}, {"sha": "368cd28530f94f17e86b9d24717869f635ddcc59", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 88, "deletions": 39, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5dc77f066752ffc52bdce22639c5e8cf5c3e14/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5dc77f066752ffc52bdce22639c5e8cf5c3e14/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=9e5dc77f066752ffc52bdce22639c5e8cf5c3e14", "patch": "@@ -2109,7 +2109,7 @@ loop_closed_phi_def (tree var)\n   return NULL_TREE;\n }\n \n-static tree instantiate_scev_1 (basic_block, struct loop *, tree, bool,\n+static tree instantiate_scev_r (basic_block, struct loop *, tree, bool,\n \t\t\t\thtab_t, int);\n \n /* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n@@ -2182,7 +2182,7 @@ instantiate_scev_name (basic_block instantiate_below,\n     }\n \n   else if (res != chrec_dont_know)\n-    res = instantiate_scev_1 (instantiate_below, evolution_loop, res,\n+    res = instantiate_scev_r (instantiate_below, evolution_loop, res,\n \t\t\t      fold_conversions, cache, size_expr);\n \n   /* Store the correct value to the cache.  */\n@@ -2211,13 +2211,13 @@ instantiate_scev_poly (basic_block instantiate_below,\n \t\t       bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree op1;\n-  tree op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t CHREC_LEFT (chrec), fold_conversions, cache,\n \t\t\t\t size_expr);\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n-  op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+  op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t    CHREC_RIGHT (chrec), fold_conversions, cache,\n \t\t\t    size_expr);\n   if (op1 == chrec_dont_know)\n@@ -2252,13 +2252,13 @@ instantiate_scev_binary (basic_block instantiate_below,\n \t\t\t bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree op1;\n-  tree op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t TREE_OPERAND (chrec, 0), fold_conversions, cache,\n \t\t\t\t size_expr);\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n-  op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+  op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t    TREE_OPERAND (chrec, 1), fold_conversions, cache,\n \t\t\t    size_expr);\n   if (op1 == chrec_dont_know)\n@@ -2313,7 +2313,7 @@ instantiate_scev_convert (basic_block instantiate_below,\n \t\t\t  tree type, tree op,\n \t\t\t  bool fold_conversions, htab_t cache, int size_expr)\n {\n-  tree op0 = instantiate_scev_1 (instantiate_below, evolution_loop, op,\n+  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop, op,\n \t\t\t\t fold_conversions, cache, size_expr);\n \n   if (op0 == chrec_dont_know)\n@@ -2359,7 +2359,7 @@ instantiate_scev_bitnot (basic_block instantiate_below,\n \t\t\t bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree type = chrec_type (chrec);\n-  tree op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t TREE_OPERAND (chrec, 0),\n \t\t\t\t fold_conversions, cache, size_expr);\n   if (op0 == chrec_dont_know)\n@@ -2396,19 +2396,19 @@ instantiate_scev_3 (basic_block instantiate_below,\n \t\t    bool fold_conversions, htab_t cache, int size_expr)\n {\n   tree op1, op2;\n-  tree op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t\t TREE_OPERAND (chrec, 0),\n \t\t\t\t fold_conversions, cache, size_expr);\n   if (op0 == chrec_dont_know)\n     return chrec_dont_know;\n \n-  op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+  op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t    TREE_OPERAND (chrec, 1),\n \t\t\t    fold_conversions, cache, size_expr);\n   if (op1 == chrec_dont_know)\n     return chrec_dont_know;\n \n-  op2 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+  op2 = instantiate_scev_r (instantiate_below, evolution_loop,\n \t\t\t    TREE_OPERAND (chrec, 2),\n \t\t\t    fold_conversions, cache, size_expr);\n   if (op2 == chrec_dont_know)\n@@ -2426,7 +2426,46 @@ instantiate_scev_3 (basic_block instantiate_below,\n /* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n    and EVOLUTION_LOOP, that were left under a symbolic form.\n \n-   CHREC is the scalar evolution to instantiate.\n+   CHREC is an expression with 2 operands to be instantiated.\n+\n+   CACHE is the cache of already instantiated values.\n+\n+   FOLD_CONVERSIONS should be set to true when the conversions that\n+   may wrap in signed/pointer type are folded, as long as the value of\n+   the chrec is preserved.\n+\n+   SIZE_EXPR is used for computing the size of the expression to be\n+   instantiated, and to stop if it exceeds some limit.  */\n+\n+static tree\n+instantiate_scev_2 (basic_block instantiate_below,\n+\t\t    struct loop *evolution_loop, tree chrec,\n+\t\t    bool fold_conversions, htab_t cache, int size_expr)\n+{\n+  tree op1;\n+  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n+\t\t\t\t TREE_OPERAND (chrec, 0),\n+\t\t\t\t fold_conversions, cache, size_expr);\n+  if (op0 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  op1 = instantiate_scev_r (instantiate_below, evolution_loop,\n+\t\t\t    TREE_OPERAND (chrec, 1),\n+\t\t\t    fold_conversions, cache, size_expr);\n+  if (op1 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  if (op0 == TREE_OPERAND (chrec, 0)\n+      && op1 == TREE_OPERAND (chrec, 1))\n+    return chrec;\n+\n+  return fold_build2 (TREE_CODE (chrec), TREE_TYPE (chrec), op0, op1);\n+}\n+\n+/* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n+   and EVOLUTION_LOOP, that were left under a symbolic form.\n+\n+   CHREC is an expression with 2 operands to be instantiated.\n \n    CACHE is the cache of already instantiated values.\n \n@@ -2442,8 +2481,38 @@ instantiate_scev_1 (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, tree chrec,\n \t\t    bool fold_conversions, htab_t cache, int size_expr)\n {\n-  tree op0, op1;\n+  tree op0 = instantiate_scev_r (instantiate_below, evolution_loop,\n+\t\t\t\t TREE_OPERAND (chrec, 0),\n+\t\t\t\t fold_conversions, cache, size_expr);\n+\n+  if (op0 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  if (op0 == TREE_OPERAND (chrec, 0))\n+    return chrec;\n+\n+  return fold_build1 (TREE_CODE (chrec), TREE_TYPE (chrec), op0);\n+}\n+\n+/* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n+   and EVOLUTION_LOOP, that were left under a symbolic form.\n+\n+   CHREC is the scalar evolution to instantiate.\n+\n+   CACHE is the cache of already instantiated values.\n \n+   FOLD_CONVERSIONS should be set to true when the conversions that\n+   may wrap in signed/pointer type are folded, as long as the value of\n+   the chrec is preserved.\n+\n+   SIZE_EXPR is used for computing the size of the expression to be\n+   instantiated, and to stop if it exceeds some limit.  */\n+\n+static tree\n+instantiate_scev_r (basic_block instantiate_below,\n+\t\t    struct loop *evolution_loop, tree chrec,\n+\t\t    bool fold_conversions, htab_t cache, int size_expr)\n+{\n   /* Give up if the expression is larger than the MAX that we allow.  */\n   if (size_expr++ > PARAM_VALUE (PARAM_SCEV_MAX_EXPR_SIZE))\n     return chrec_dont_know;\n@@ -2498,32 +2567,12 @@ instantiate_scev_1 (basic_block instantiate_below,\n \t\t\t\t fold_conversions, cache, size_expr);\n \n     case 2:\n-      op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 0),\n-\t\t\t\tfold_conversions, cache, size_expr);\n-      if (op0 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 1),\n-\t\t\t\tfold_conversions, cache, size_expr);\n-      if (op1 == chrec_dont_know)\n-        return chrec_dont_know;\n-\n-      if (op0 == TREE_OPERAND (chrec, 0)\n-\t  && op1 == TREE_OPERAND (chrec, 1))\n-\treturn chrec;\n-      return fold_build2 (TREE_CODE (chrec), TREE_TYPE (chrec), op0, op1);\n+      return instantiate_scev_2 (instantiate_below, evolution_loop, chrec,\n+\t\t\t\t fold_conversions, cache, size_expr);\n \n     case 1:\n-      op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 0),\n-\t\t\t\tfold_conversions, cache, size_expr);\n-      if (op0 == chrec_dont_know)\n-        return chrec_dont_know;\n-      if (op0 == TREE_OPERAND (chrec, 0))\n-\treturn chrec;\n-      return fold_build1 (TREE_CODE (chrec), TREE_TYPE (chrec), op0);\n+      return instantiate_scev_1 (instantiate_below, evolution_loop, chrec,\n+\t\t\t\t fold_conversions, cache, size_expr);\n \n     case 0:\n       return chrec;\n@@ -2559,7 +2608,7 @@ instantiate_scev (basic_block instantiate_below, struct loop *evolution_loop,\n       fprintf (dump_file, \")\\n\");\n     }\n  \n-  res = instantiate_scev_1 (instantiate_below, evolution_loop, chrec, false,\n+  res = instantiate_scev_r (instantiate_below, evolution_loop, chrec, false,\n \t\t\t    cache, 0);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -2583,7 +2632,7 @@ tree\n resolve_mixers (struct loop *loop, tree chrec)\n {\n   htab_t cache = htab_create (10, hash_scev_info, eq_scev_info, del_scev_info);\n-  tree ret = instantiate_scev_1 (block_before_loop (loop), loop, chrec, true,\n+  tree ret = instantiate_scev_r (block_before_loop (loop), loop, chrec, true,\n \t\t\t\t cache, 0);\n   htab_delete (cache);\n   return ret;"}]}