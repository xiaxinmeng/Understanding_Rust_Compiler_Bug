{"sha": "f200869abc9e4b4dc6e48425bc3cd22fa1799a67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIwMDg2OWFiYzllNGI0ZGM2ZTQ4NDI1YmMzY2QyMmZhMTc5OWE2Nw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2013-10-11T18:52:07Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2013-10-11T18:52:07Z"}, "message": "vector.md (vec_realign_load<mode>): Generate vperm directly to circumvent subtract from splat{31} workaround.\n\n2013-10-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/vector.md (vec_realign_load<mode>): Generate vperm\n\tdirectly to circumvent subtract from splat{31} workaround.\n\t* config/rs6000/rs6000-protos.h (altivec_expand_vec_perm_le): New\n\tprototype.\n\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_le): New.\n\t* config/rs6000/altivec.md (define_c_enum \"unspec\"): Add\n\tUNSPEC_VPERM_X and UNSPEC_VPERM_UNS_X.\n\t(altivec_vperm_<mode>): Convert to define_insn_and_split to\n\tseparate big and little endian logic.\n\t(*altivec_vperm_<mode>_internal): New define_insn.\n\t(altivec_vperm_<mode>_uns): Convert to define_insn_and_split to\n\tseparate big and little endian logic.\n\t(*altivec_vperm_<mode>_uns_internal): New define_insn.\n\t(vec_permv16qi): Add little endian logic.\n\nFrom-SVN: r203457", "tree": {"sha": "af7d2f54daecbe920f1c58a12f1883895fd09a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af7d2f54daecbe920f1c58a12f1883895fd09a75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f200869abc9e4b4dc6e48425bc3cd22fa1799a67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f200869abc9e4b4dc6e48425bc3cd22fa1799a67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f200869abc9e4b4dc6e48425bc3cd22fa1799a67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f200869abc9e4b4dc6e48425bc3cd22fa1799a67/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39aeb94e3d9fd7379547e5517c4a12c67f41b862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39aeb94e3d9fd7379547e5517c4a12c67f41b862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39aeb94e3d9fd7379547e5517c4a12c67f41b862"}], "stats": {"total": 160, "additions": 155, "deletions": 5}, "files": [{"sha": "5a6fff651cf8c8a5711b50d9230ee322041675ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f200869abc9e4b4dc6e48425bc3cd22fa1799a67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f200869abc9e4b4dc6e48425bc3cd22fa1799a67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f200869abc9e4b4dc6e48425bc3cd22fa1799a67", "patch": "@@ -1,3 +1,20 @@\n+2013-10-11  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/vector.md (vec_realign_load<mode>): Generate vperm\n+\tdirectly to circumvent subtract from splat{31} workaround.\n+\t* config/rs6000/rs6000-protos.h (altivec_expand_vec_perm_le): New\n+\tprototype.\n+\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_le): New.\n+\t* config/rs6000/altivec.md (define_c_enum \"unspec\"): Add\n+\tUNSPEC_VPERM_X and UNSPEC_VPERM_UNS_X.\n+\t(altivec_vperm_<mode>): Convert to define_insn_and_split to\n+\tseparate big and little endian logic.\n+\t(*altivec_vperm_<mode>_internal): New define_insn.\n+\t(altivec_vperm_<mode>_uns): Convert to define_insn_and_split to\n+\tseparate big and little endian logic.\n+\t(*altivec_vperm_<mode>_uns_internal): New define_insn.\n+\t(vec_permv16qi): Add little endian logic.\n+\n 2013-10-11  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* doc/extend.texi (returns_nonnull): Remove arguments."}, {"sha": "49f908161dfb4725c9fdfa69ba51fa2efd4038f8", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 80, "deletions": 3, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f200869abc9e4b4dc6e48425bc3cd22fa1799a67/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f200869abc9e4b4dc6e48425bc3cd22fa1799a67/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=f200869abc9e4b4dc6e48425bc3cd22fa1799a67", "patch": "@@ -59,6 +59,8 @@\n    UNSPEC_VSUMSWS\n    UNSPEC_VPERM\n    UNSPEC_VPERM_UNS\n+   UNSPEC_VPERM_X\n+   UNSPEC_VPERM_UNS_X\n    UNSPEC_VRFIN\n    UNSPEC_VCFUX\n    UNSPEC_VCFSX\n@@ -1279,21 +1281,91 @@\n   \"vrfiz %0,%1\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n-(define_insn \"altivec_vperm_<mode>\"\n+(define_insn_and_split \"altivec_vperm_<mode>\"\n   [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n \t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n \t\t    (match_operand:VM 2 \"register_operand\" \"v\")\n \t\t    (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+\t\t   UNSPEC_VPERM_X))]\n+  \"TARGET_ALTIVEC\"\n+  \"#\"\n+  \"!reload_in_progress && !reload_completed\"\n+  [(set (match_dup 0) (match_dup 4))]\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    operands[4] = gen_rtx_UNSPEC (<MODE>mode,\n+                                  gen_rtvec (3, operands[1],\n+ \t\t                             operands[2], operands[3]),\n+                                  UNSPEC_VPERM);\n+  else\n+    {\n+      /* We want to subtract from 31, but we can't vspltisb 31 since\n+         it's out of range.  -1 works as well because only the low-order\n+         five bits of the permute control vector elements are used.  */\n+      rtx splat = gen_rtx_VEC_DUPLICATE (V16QImode,\n+                                         gen_rtx_CONST_INT (QImode, -1));\n+      rtx tmp = gen_reg_rtx (V16QImode);\n+      emit_move_insn (tmp, splat);\n+      rtx sel = gen_rtx_MINUS (V16QImode, tmp, operands[3]);\n+      emit_move_insn (tmp, sel);\n+      operands[4] = gen_rtx_UNSPEC (<MODE>mode,\n+                                    gen_rtvec (3, operands[2],\n+\t\t \t\t               operands[1], tmp),\n+\t\t                    UNSPEC_VPERM);\n+    }\n+}\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"*altivec_vperm_<mode>_internal\"\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"+v\")]\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n   \"vperm %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vperm_<mode>_uns\"\n+(define_insn_and_split \"altivec_vperm_<mode>_uns\"\n   [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n \t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n \t\t    (match_operand:VM 2 \"register_operand\" \"v\")\n \t\t    (match_operand:V16QI 3 \"register_operand\" \"v\")]\n+\t\t   UNSPEC_VPERM_UNS_X))]\n+  \"TARGET_ALTIVEC\"\n+  \"#\"\n+  \"!reload_in_progress && !reload_completed\"\n+  [(set (match_dup 0) (match_dup 4))]\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    operands[4] = gen_rtx_UNSPEC (<MODE>mode,\n+                                  gen_rtvec (3, operands[1],\n+\t\t\t\t             operands[2], operands[3]),\n+                                  UNSPEC_VPERM_UNS);\n+  else\n+    {\n+      /* We want to subtract from 31, but we can't vspltisb 31 since\n+         it's out of range.  -1 works as well because only the low-order\n+         five bits of the permute control vector elements are used.  */\n+      rtx splat = gen_rtx_VEC_DUPLICATE (V16QImode,\n+                                         gen_rtx_CONST_INT (QImode, -1));\n+      rtx tmp = gen_reg_rtx (V16QImode);\n+      emit_move_insn (tmp, splat);\n+      rtx sel = gen_rtx_MINUS (V16QImode, tmp, operands[3]);\n+      emit_move_insn (tmp, sel);\n+      operands[4] = gen_rtx_UNSPEC (<MODE>mode,\n+                                    gen_rtvec (3, operands[2],\n+\t\t\t\t               operands[1], tmp),\n+\t\t                    UNSPEC_VPERM_UNS);\n+    }\n+}\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"*altivec_vperm_<mode>_uns_internal\"\n+  [(set (match_operand:VM 0 \"register_operand\" \"=v\")\n+\t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:VM 2 \"register_operand\" \"v\")\n+\t\t    (match_operand:V16QI 3 \"register_operand\" \"+v\")]\n \t\t   UNSPEC_VPERM_UNS))]\n   \"TARGET_ALTIVEC\"\n   \"vperm %0,%1,%2,%3\"\n@@ -1306,7 +1378,12 @@\n \t\t       (match_operand:V16QI 3 \"register_operand\" \"\")]\n \t\t      UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n-  \"\")\n+{\n+  if (!BYTES_BIG_ENDIAN) {\n+    altivec_expand_vec_perm_le (operands);\n+    DONE;\n+  }\n+})\n \n (define_expand \"vec_perm_constv16qi\"\n   [(match_operand:V16QI 0 \"register_operand\" \"\")"}, {"sha": "1fc890340947e2c0711a6be8d2ed0b31e9d95ffa", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f200869abc9e4b4dc6e48425bc3cd22fa1799a67/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f200869abc9e4b4dc6e48425bc3cd22fa1799a67/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=f200869abc9e4b4dc6e48425bc3cd22fa1799a67", "patch": "@@ -56,6 +56,7 @@ extern void paired_expand_vector_init (rtx, rtx);\n extern void rs6000_expand_vector_set (rtx, rtx, int);\n extern void rs6000_expand_vector_extract (rtx, rtx, int);\n extern bool altivec_expand_vec_perm_const (rtx op[4]);\n+extern void altivec_expand_vec_perm_le (rtx op[4]);\n extern bool rs6000_expand_vec_perm_const (rtx op[4]);\n extern void rs6000_expand_extract_even (rtx, rtx, rtx);\n extern void rs6000_expand_interleave (rtx, rtx, rtx, bool);"}, {"sha": "3f56136d983f6dbe52ec2d852a0f94c2bf7c8eea", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f200869abc9e4b4dc6e48425bc3cd22fa1799a67/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f200869abc9e4b4dc6e48425bc3cd22fa1799a67/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f200869abc9e4b4dc6e48425bc3cd22fa1799a67", "patch": "@@ -28608,6 +28608,54 @@ altivec_expand_vec_perm_const_le (rtx operands[4])\n   emit_move_insn (target, unspec);\n }\n \n+/* Similarly to altivec_expand_vec_perm_const_le, we must adjust the\n+   permute control vector.  But here it's not a constant, so we must\n+   generate a vector splat/subtract to do the adjustment.  */\n+\n+void\n+altivec_expand_vec_perm_le (rtx operands[4])\n+{\n+  rtx splat, unspec;\n+  rtx target = operands[0];\n+  rtx op0 = operands[1];\n+  rtx op1 = operands[2];\n+  rtx sel = operands[3];\n+  rtx tmp = target;\n+\n+  /* Get everything in regs so the pattern matches.  */\n+  if (!REG_P (op0))\n+    op0 = force_reg (V16QImode, op0);\n+  if (!REG_P (op1))\n+    op1 = force_reg (V16QImode, op1);\n+  if (!REG_P (sel))\n+    sel = force_reg (V16QImode, sel);\n+  if (!REG_P (target))\n+    tmp = gen_reg_rtx (V16QImode);\n+\n+  /* SEL = splat(31) - SEL.  */\n+  /* We want to subtract from 31, but we can't vspltisb 31 since\n+     it's out of range.  -1 works as well because only the low-order\n+     five bits of the permute control vector elements are used.  */\n+  splat = gen_rtx_VEC_DUPLICATE (V16QImode,\n+\t\t\t\t gen_rtx_CONST_INT (QImode, -1));\n+  emit_move_insn (tmp, splat);\n+  sel = gen_rtx_MINUS (V16QImode, tmp, sel);\n+  emit_move_insn (tmp, sel);\n+\n+  /* Permute with operands reversed and adjusted selector.  */\n+  unspec = gen_rtx_UNSPEC (V16QImode, gen_rtvec (3, op1, op0, tmp),\n+\t\t\t   UNSPEC_VPERM);\n+\n+  /* Copy into target, possibly by way of a register.  */\n+  if (!REG_P (target))\n+    {\n+      emit_move_insn (tmp, unspec);\n+      unspec = tmp;\n+    }\n+\n+  emit_move_insn (target, unspec);\n+}\n+\n /* Expand an Altivec constant permutation.  Return true if we match\n    an efficient implementation; false to fall back to VPERM.  */\n "}, {"sha": "e88d879591e3e27b755dfc002fb17673444c384c", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f200869abc9e4b4dc6e48425bc3cd22fa1799a67/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f200869abc9e4b4dc6e48425bc3cd22fa1799a67/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=f200869abc9e4b4dc6e48425bc3cd22fa1799a67", "patch": "@@ -950,8 +950,15 @@\n     emit_insn (gen_altivec_vperm_<mode> (operands[0], operands[1],\n     \t      \t\t\t\t operands[2], operands[3]));\n   else\n-    emit_insn (gen_altivec_vperm_<mode> (operands[0], operands[2],\n-    \t      \t\t\t\t operands[1], operands[3]));\n+    {\n+      /* Avoid the \"subtract from splat31\" workaround for vperm since\n+         we have changed lvsr to lvsl instead.  */\n+      rtx unspec = gen_rtx_UNSPEC (<MODE>mode,\n+                                   gen_rtvec (3, operands[2],\n+                                              operands[1], operands[3]),\n+                                   UNSPEC_VPERM);\n+      emit_move_insn (operands[0], unspec);\n+    }\n   DONE;\n })\n "}]}