{"sha": "f9fa4363858bbe008735b45d15b0c031ce5ca08b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlmYTQzNjM4NThiYmUwMDg3MzViNDVkMTViMGMwMzFjZTVjYTA4Yg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2006-02-09T15:18:10Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2006-02-09T15:18:10Z"}, "message": "arm.md (tlobits_cbranch): New pattern.\n\n\t* arm.md (tlobits_cbranch): New pattern.\n\t* arm.h (arm_select_cc_mode): For thumb, only return CC_Nmode if\n\ttesting a single bit.\n\nFrom-SVN: r110803", "tree": {"sha": "aafe3e634591fa8f078feac389dff9c5febacdaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aafe3e634591fa8f078feac389dff9c5febacdaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9fa4363858bbe008735b45d15b0c031ce5ca08b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fa4363858bbe008735b45d15b0c031ce5ca08b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9fa4363858bbe008735b45d15b0c031ce5ca08b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fa4363858bbe008735b45d15b0c031ce5ca08b/comments", "author": null, "committer": null, "parents": [{"sha": "5230d884913ae19b5310f200b96fcaa1cf64a7db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5230d884913ae19b5310f200b96fcaa1cf64a7db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5230d884913ae19b5310f200b96fcaa1cf64a7db"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "f3835d88c4d917150b239a92343f698c330965dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fa4363858bbe008735b45d15b0c031ce5ca08b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fa4363858bbe008735b45d15b0c031ce5ca08b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9fa4363858bbe008735b45d15b0c031ce5ca08b", "patch": "@@ -1,3 +1,9 @@\n+2006-02-09  Richard Earnshaw  <richard.earnshaw@arm.com>\n+\n+\t* arm.md (tlobits_cbranch): New pattern.\n+\t* arm.h (arm_select_cc_mode): For thumb, only return CC_Nmode if\n+\ttesting a single bit.\n+\n 2006-02-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/26179"}, {"sha": "4e9ae1b6e3f0abc527a7983121f2ddf19dc57bf5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fa4363858bbe008735b45d15b0c031ce5ca08b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fa4363858bbe008735b45d15b0c031ce5ca08b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f9fa4363858bbe008735b45d15b0c031ce5ca08b", "patch": "@@ -6748,7 +6748,8 @@ arm_select_cc_mode (enum rtx_code op, rtx x, rtx y)\n   if (TARGET_THUMB\n       && GET_MODE (x) == SImode\n       && (op == EQ || op == NE)\n-      && (GET_CODE (x) == ZERO_EXTRACT))\n+      && GET_CODE (x) == ZERO_EXTRACT\n+      && XEXP (x, 1) == const1_rtx)\n     return CC_Nmode;\n \n   /* An operation that sets the condition codes as a side-effect, the"}, {"sha": "53b633ddc7f072274e31d060ffe5a29018e2bf2d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fa4363858bbe008735b45d15b0c031ce5ca08b/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fa4363858bbe008735b45d15b0c031ce5ca08b/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f9fa4363858bbe008735b45d15b0c031ce5ca08b", "patch": "@@ -6028,6 +6028,50 @@\n \t\t(const_int 8))))]\n )\n   \n+(define_insn \"*tlobits_cbranch\"\n+  [(set (pc)\n+\t(if_then_else\n+\t (match_operator 0 \"equality_operator\"\n+\t  [(zero_extract:SI (match_operand:SI 1 \"s_register_operand\" \"l\")\n+\t\t\t    (match_operand:SI 2 \"const_int_operand\" \"i\")\n+\t\t\t    (const_int 0))\n+\t   (const_int 0)])\n+\t (label_ref (match_operand 3 \"\" \"\"))\n+\t (pc)))\n+   (clobber (match_scratch:SI 4 \"=l\"))]\n+  \"TARGET_THUMB\"\n+  \"*\n+  {\n+  rtx op[3];\n+  op[0] = operands[4];\n+  op[1] = operands[1];\n+  op[2] = GEN_INT (32 - INTVAL (operands[2]));\n+\n+  output_asm_insn (\\\"lsl\\\\t%0, %1, %2\\\", op);\n+  switch (get_attr_length (insn))\n+    {\n+    case 4:  return \\\"b%d0\\\\t%l3\\\";\n+    case 6:  return \\\"b%D0\\\\t.LCB%=\\;b\\\\t%l3\\\\t%@long jump\\\\n.LCB%=:\\\";\n+    default: return \\\"b%D0\\\\t.LCB%=\\;bl\\\\t%l3\\\\t%@far jump\\\\n.LCB%=:\\\";\n+    }\n+  }\"\n+  [(set (attr \"far_jump\")\n+        (if_then_else\n+\t    (eq_attr \"length\" \"8\")\n+\t    (const_string \"yes\")\n+            (const_string \"no\")))\n+   (set (attr \"length\") \n+        (if_then_else\n+\t    (and (ge (minus (match_dup 3) (pc)) (const_int -250))\n+\t         (le (minus (match_dup 3) (pc)) (const_int 256)))\n+\t    (const_int 4)\n+\t    (if_then_else\n+\t        (and (ge (minus (match_dup 3) (pc)) (const_int -2040))\n+\t\t     (le (minus (match_dup 3) (pc)) (const_int 2048)))\n+\t\t(const_int 6)\n+\t\t(const_int 8))))]\n+)\n+  \n (define_insn \"*tstsi3_cbranch\"\n   [(set (pc)\n \t(if_then_else"}]}