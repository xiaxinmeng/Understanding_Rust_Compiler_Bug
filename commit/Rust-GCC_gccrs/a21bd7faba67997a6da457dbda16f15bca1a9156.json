{"sha": "a21bd7faba67997a6da457dbda16f15bca1a9156", "node_id": "C_kwDOANBUbNoAKGEyMWJkN2ZhYmE2Nzk5N2E2ZGE0NTdkYmRhMTZmMTViY2ExYTkxNTY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-03-28T08:13:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-03-28T08:41:33Z"}, "message": "Fix PR target/109140\n\nThis is a regression present on the mainline and 12 branch at -O2, but the\nissue is related to vectorization so was present at -O3 in earlier versions.\n\nThe vcondu expander that was added for VIS 3 more than a decade ago does not\nfully work, because it does not filter out the unsigned condition codes (the\ninstruction is an UNSPEC that accepts only signed condition codes).\n\nWhile I was at it, I also added the missing vcond and vcondu expanders for\nthe new comparison instructions that were added in VIS 4.\n\ngcc/\n\tPR target/109140\n\t* config/sparc/sparc.cc (sparc_expand_vcond): Call signed_condition\n\ton operand #3 to get the final condition code.  Use std::swap.\n\t* config/sparc/sparc.md (vcondv8qiv8qi): New VIS 4 expander.\n\t(fucmp<gcond:code>8<P:mode>_vis): Move around.\n\t(fpcmpu<gcond:code><GCM:gcm_name><P:mode>_vis): Likewise.\n\t(vcondu<GCM:mode><GCM:mode>): New VIS 4 expander.\n\ngcc/testsuite/\n\t* gcc.target/sparc/20230328-1.c: New test.\n\t* gcc.target/sparc/20230328-2.c: Likewise.\n\t* gcc.target/sparc/20230328-3.c: Likewise.\n\t* gcc.target/sparc/20230328-4.c: Likewise.", "tree": {"sha": "9ac8b825fe424984218248aad8fabf7372d36535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ac8b825fe424984218248aad8fabf7372d36535"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a21bd7faba67997a6da457dbda16f15bca1a9156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21bd7faba67997a6da457dbda16f15bca1a9156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a21bd7faba67997a6da457dbda16f15bca1a9156", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21bd7faba67997a6da457dbda16f15bca1a9156/comments", "author": null, "committer": null, "parents": [{"sha": "5cea00da1d3c5b37c77230ff863d7c1916a512f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cea00da1d3c5b37c77230ff863d7c1916a512f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cea00da1d3c5b37c77230ff863d7c1916a512f2"}], "stats": {"total": 144, "additions": 122, "deletions": 22}, "files": [{"sha": "8c0c9dce9714a30bf4c52ae6fd62d514c102268c", "filename": "gcc/config/sparc/sparc.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Fconfig%2Fsparc%2Fsparc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Fconfig%2Fsparc%2Fsparc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.cc?ref=a21bd7faba67997a6da457dbda16f15bca1a9156", "patch": "@@ -13662,18 +13662,16 @@ sparc_expand_conditional_move (machine_mode mode, rtx *operands)\n void\n sparc_expand_vcond (machine_mode mode, rtx *operands, int ccode, int fcode)\n {\n+  enum rtx_code code = signed_condition (GET_CODE (operands[3]));\n   rtx mask, cop0, cop1, fcmp, cmask, bshuf, gsr;\n-  enum rtx_code code = GET_CODE (operands[3]);\n \n   mask = gen_reg_rtx (Pmode);\n   cop0 = operands[4];\n   cop1 = operands[5];\n   if (code == LT || code == GE)\n     {\n-      rtx t;\n-\n       code = swap_condition (code);\n-      t = cop0; cop0 = cop1; cop1 = t;\n+      std::swap (cop0, cop1);\n     }\n \n   gsr = gen_rtx_REG (DImode, SPARC_GSR_REG);"}, {"sha": "94779c16c63d84f64203ad8f7c17df153aa167a7", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=a21bd7faba67997a6da457dbda16f15bca1a9156", "patch": "@@ -9033,6 +9033,50 @@ visl\")\n   DONE;\n })\n \n+(define_expand \"vcondv8qiv8qi\"\n+  [(match_operand:V8QI 0 \"register_operand\" \"\")\n+   (match_operand:V8QI 1 \"register_operand\" \"\")\n+   (match_operand:V8QI 2 \"register_operand\" \"\")\n+   (match_operator 3 \"\"\n+     [(match_operand:V8QI 4 \"register_operand\" \"\")\n+      (match_operand:V8QI 5 \"register_operand\" \"\")])]\n+  \"TARGET_VIS4\"\n+{\n+  sparc_expand_vcond (V8QImode, operands, UNSPEC_CMASK8, UNSPEC_FCMP);\n+  DONE;\n+})\n+\n+(define_insn \"fucmp<gcond:code>8<P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(unspec:P [(gcond:V8QI (match_operand:V8QI 1 \"register_operand\" \"e\")\n+\t\t               (match_operand:V8QI 2 \"register_operand\" \"e\"))]\n+\t UNSPEC_FUCMP))]\n+  \"TARGET_VIS3\"\n+  \"fucmp<gcond:code>8\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"viscmp\")])\n+\n+(define_insn \"fpcmpu<gcond:code><GCM:gcm_name><P:mode>_vis\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(unspec:P [(gcond:GCM (match_operand:GCM 1 \"register_operand\" \"e\")\n+\t\t              (match_operand:GCM 2 \"register_operand\" \"e\"))]\n+\t UNSPEC_FUCMP))]\n+  \"TARGET_VIS4\"\n+  \"fpcmpu<gcond:code><GCM:gcm_name>\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"viscmp\")])\n+\n+(define_expand \"vcondu<GCM:mode><GCM:mode>\"\n+  [(match_operand:GCM 0 \"register_operand\" \"\")\n+   (match_operand:GCM 1 \"register_operand\" \"\")\n+   (match_operand:GCM 2 \"register_operand\" \"\")\n+   (match_operator 3 \"\"\n+     [(match_operand:GCM 4 \"register_operand\" \"\")\n+      (match_operand:GCM 5 \"register_operand\" \"\")])]\n+  \"TARGET_VIS4\"\n+{\n+  sparc_expand_vcond (<MODE>mode, operands, UNSPEC_CMASK<gcm_name>, UNSPEC_FUCMP);\n+  DONE;\n+})\n+\n (define_expand \"vconduv8qiv8qi\"\n   [(match_operand:V8QI 0 \"register_operand\" \"\")\n    (match_operand:V8QI 1 \"register_operand\" \"\")\n@@ -9351,24 +9395,6 @@ visl\")\n  [(set_attr \"type\" \"fga\")\n   (set_attr \"subtype\" \"other\")])\n \n-(define_insn \"fucmp<gcond:code>8<P:mode>_vis\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-\t(unspec:P [(gcond:V8QI (match_operand:V8QI 1 \"register_operand\" \"e\")\n-\t\t               (match_operand:V8QI 2 \"register_operand\" \"e\"))]\n-\t UNSPEC_FUCMP))]\n-  \"TARGET_VIS3\"\n-  \"fucmp<gcond:code>8\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"viscmp\")])\n-\n-(define_insn \"fpcmpu<gcond:code><GCM:gcm_name><P:mode>_vis\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-\t(unspec:P [(gcond:GCM (match_operand:GCM 1 \"register_operand\" \"e\")\n-\t\t              (match_operand:GCM 2 \"register_operand\" \"e\"))]\n-\t UNSPEC_FUCMP))]\n-  \"TARGET_VIS4\"\n-  \"fpcmpu<gcond:code><GCM:gcm_name>\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"viscmp\")])\n-\n (define_insn \"*naddsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n         (neg:SF (plus:SF (match_operand:SF 1 \"register_operand\" \"f\")"}, {"sha": "bc0e35f100e2c1e203eefa8362b45ee522044495", "filename": "gcc/testsuite/gcc.target/sparc/20230328-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-1.c?ref=a21bd7faba67997a6da457dbda16f15bca1a9156", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/109140 */\r\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O3 -mvis3 -std=c99\" } */\r\n+\r\n+#define TYPE unsigned char\r\n+\r\n+struct S { TYPE ub[8]; };\r\n+\r\n+struct S s;\r\n+\r\n+TYPE v;\r\n+\r\n+void foo (void)\r\n+{\r\n+  for (int i = 0; i < 8; i++)\r\n+    s.ub[i] = s.ub[i] > v;\r\n+}\r\n+\r\n+/* { dg-final { scan-assembler \"fucmpgt8\\t%\" } } */\r"}, {"sha": "7030344350c8cdab3affbf5d3e8607266557a0fe", "filename": "gcc/testsuite/gcc.target/sparc/20230328-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-2.c?ref=a21bd7faba67997a6da457dbda16f15bca1a9156", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/109140 */\r\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O3 -mvis4 -std=c99\" } */\r\n+\r\n+#define TYPE char\r\n+\r\n+struct S { TYPE ub[8]; };\r\n+\r\n+struct S s;\r\n+\r\n+TYPE v;\r\n+\r\n+void foo (void)\r\n+{\r\n+  for (int i = 0; i < 8; i++)\r\n+    s.ub[i] = s.ub[i] > v;\r\n+}\r\n+\r\n+/* { dg-final { scan-assembler \"fpcmpgt8\\t%\" } } */\r"}, {"sha": "23d281e3f1c7f7e6a5093197d72f2682009a0246", "filename": "gcc/testsuite/gcc.target/sparc/20230328-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-3.c?ref=a21bd7faba67997a6da457dbda16f15bca1a9156", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/109140 */\r\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O3 -mvis4 -std=c99\" } */\r\n+\r\n+#define TYPE unsigned short\r\n+\r\n+struct S { TYPE ub[4]; };\r\n+\r\n+struct S s;\r\n+\r\n+TYPE v;\r\n+\r\n+void foo (void)\r\n+{\r\n+  for (int i = 0; i < 4; i++)\r\n+    s.ub[i] = s.ub[i] > v;\r\n+}\r\n+\r\n+/* { dg-final { scan-assembler \"fpcmpugt16\\t%\" } } */\r"}, {"sha": "0172d0bb4c2a00097401a9527e576fca3dd99f70", "filename": "gcc/testsuite/gcc.target/sparc/20230328-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21bd7faba67997a6da457dbda16f15bca1a9156/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20230328-4.c?ref=a21bd7faba67997a6da457dbda16f15bca1a9156", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/109140 */\r\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O3 -mvis3 -std=c99\" } */\r\n+\r\n+#define TYPE short\r\n+\r\n+struct S { TYPE ub[4]; };\r\n+\r\n+struct S s;\r\n+\r\n+TYPE v;\r\n+\r\n+void foo (void)\r\n+{\r\n+  for (int i = 0; i < 4; i++)\r\n+    s.ub[i] = s.ub[i] > v;\r\n+}\r\n+\r\n+/* { dg-final { scan-assembler \"fcmpgt16\\t%\" } } */\r"}]}