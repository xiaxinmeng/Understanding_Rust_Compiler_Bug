{"sha": "137a1a27e25efa3c13842c1c91a55947ed005412", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM3YTFhMjdlMjVlZmEzYzEzODQyYzFjOTFhNTU5NDdlZDAwNTQxMg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2013-08-04T16:47:42Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2013-08-04T16:47:42Z"}, "message": "pretty-print.h (pp_bar_bar): New.\n\n\t* pretty-print.h (pp_bar_bar): New.\n\t(pp_ampersand_ampersand): Likewise.\n\t(pp_less_equal): Likewise.\n\t(pp_greater_equal): Likewise.\n\t* gimple-pretty-print.c (dump_ternary_rhs): Use specialized pretty\n\tprinter functions instead of pp_string or operators and punctuators.\n\t(dump_gimple_call): Likewise.\n\t(dump_gimple_omp_for): Likewise.\n\t(dump_gimple_transaction): Likewise.\n\t(dump_gimple_phi): Likewise.\n\t(pp_gimple_stmt_1): Likewise.\n\t* sched-vis.c (print_insn): Likewise.\n\t* tree-mudflap.c (mf_varname_tree): Likewise.\n\t* tree-pretty-print.c (dump_block_node): Likewise.\n\t(dump_generic_node): Likewise.\n\nc-family/ \n\t* c-ada-spec.c (pp_ada_tree_identifier): Use specialized pretty\n\tprinter functions instead of pp_string or operators and punctuators.\n\t(dump_generic_ada_node): Likewise.\n\t* c-pretty-print.c (pp_c_type_specifier): Likewise.\n\t(pp_c_relational_expression): Likewise.\n\t(pp_c_logical_or_expression): Likewise.\n\ncp/\n\t* error.c (dump_type_prefix): Use specialized pretty printer\n\tfunctions instead of pp_string or operators and punctuators.\n\t(dump_decl): Likewise.\n\t(dump_expr): Likewise.\n\nFrom-SVN: r201474", "tree": {"sha": "a9fb7dfe70a003cc0c4e1eece6d35bd2539f1fee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9fb7dfe70a003cc0c4e1eece6d35bd2539f1fee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/137a1a27e25efa3c13842c1c91a55947ed005412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/137a1a27e25efa3c13842c1c91a55947ed005412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/137a1a27e25efa3c13842c1c91a55947ed005412", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/137a1a27e25efa3c13842c1c91a55947ed005412/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ee9fbe1976e0e237ac5defc6ee398f9f5f77c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ee9fbe1976e0e237ac5defc6ee398f9f5f77c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ee9fbe1976e0e237ac5defc6ee398f9f5f77c9e"}], "stats": {"total": 180, "additions": 109, "deletions": 71}, "files": [{"sha": "a9f75d5df34455b9289672408d1c858a94681fd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=137a1a27e25efa3c13842c1c91a55947ed005412", "patch": "@@ -1,3 +1,21 @@\n+2013-08-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* pretty-print.h (pp_bar_bar): New.\n+\t(pp_ampersand_ampersand): Likewise.\n+\t(pp_less_equal): Likewise.\n+\t(pp_greater_equal): Likewise.\n+\t* gimple-pretty-print.c (dump_ternary_rhs): Use specialized pretty\n+\tprinter functions instead of pp_string or operators and punctuators.\n+\t(dump_gimple_call): Likewise.\n+\t(dump_gimple_omp_for): Likewise.\n+\t(dump_gimple_transaction): Likewise.\n+\t(dump_gimple_phi): Likewise.\n+\t(pp_gimple_stmt_1): Likewise.\n+\t* sched-vis.c (print_insn): Likewise.\n+\t* tree-mudflap.c (mf_varname_tree): Likewise.\n+\t* tree-pretty-print.c (dump_block_node): Likewise.\n+\t(dump_generic_node): Likewise.\n+\n 2013-08-02  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-cgraph.c (compute_ltrans_boundary): Add abstract origins into"}, {"sha": "019ee80736a878d29967e3e365bb632b8f8db900", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=137a1a27e25efa3c13842c1c91a55947ed005412", "patch": "@@ -1,3 +1,12 @@\n+2013-08-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-ada-spec.c (pp_ada_tree_identifier): Use specialized pretty\n+\tprinter functions instead of pp_string or operators and punctuators.\n+\t(dump_generic_ada_node): Likewise.\n+\t* c-pretty-print.c (pp_c_type_specifier): Likewise.\n+\t(pp_c_relational_expression): Likewise.\n+\t(pp_c_logical_or_expression): Likewise.\n+\n 2013-08-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-ada-spec.c (print_ada_macros): Use specialized pretty printer"}, {"sha": "8670b94e9f9f58da5ba0411f2d2b497fe65b0ddc", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=137a1a27e25efa3c13842c1c91a55947ed005412", "patch": "@@ -1266,7 +1266,7 @@ pp_ada_tree_identifier (pretty_printer *buffer, tree node, tree type,\n                 {\n                   pp_string (buffer, \"Class_\");\n                   pp_string (buffer, s);\n-                  pp_string (buffer, \".\");\n+                  pp_dot (buffer);\n                 }\n \n             }\n@@ -1626,7 +1626,7 @@ dump_sloc (pretty_printer *buffer, tree node)\n   if (xloc.file)\n     {\n       pp_string (buffer, xloc.file);\n-      pp_string (buffer, \":\");\n+      pp_colon (buffer);\n       pp_decimal_int (buffer, xloc.line);\n     }\n }\n@@ -1886,14 +1886,14 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type,\n \t      bool first = true;\n \t      spc += INDENT_INCR;\n \t      newline_and_indent (buffer, spc - 1);\n-\t      pp_string (buffer, \"(\");\n+\t      pp_left_paren (buffer);\n \t      for (; value; value = TREE_CHAIN (value))\n \t\t{\n \t\t  if (first)\n \t\t    first = false;\n \t\t  else\n \t\t    {\n-\t\t      pp_string (buffer, \",\");\n+\t\t      pp_comma (buffer);\n \t\t      newline_and_indent (buffer, spc);\n \t\t    }\n \n@@ -1907,7 +1907,7 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type,\n \t      dump_generic_ada_node\n \t\t(buffer, DECL_NAME (type) ? type : TYPE_NAME (node), type,\n \t\t cpp_check, spc, 0, true);\n-\t      pp_string (buffer, \")\");\n+\t      pp_right_paren (buffer);\n \t    }\n \t  else\n \t    {\n@@ -2032,7 +2032,7 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type,\n \t\tpp_string (buffer, \"pragma Convention (C, \");\n \t\tdump_generic_ada_node\n \t\t  (buffer, type, 0, cpp_check, spc, false, true);\n-\t\tpp_string (buffer, \")\");\n+\t\tpp_right_paren (buffer);\n \t      }\n \t}\n       else"}, {"sha": "0a71ecee6e1c93a12a09a63821947b7af296a038", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=137a1a27e25efa3c13842c1c91a55947ed005412", "patch": "@@ -370,7 +370,7 @@ pp_c_type_specifier (c_pretty_printer *pp, tree t)\n \t      pp_c_type_specifier (pp, t);\n \t      if (TYPE_PRECISION (t) != prec)\n \t\t{\n-\t\t  pp_string (pp, \":\");\n+\t\t  pp_colon (pp);\n \t\t  pp_decimal_int (pp, prec);\n \t\t}\n \t    }\n@@ -393,7 +393,7 @@ pp_c_type_specifier (c_pretty_printer *pp, tree t)\n \t\t  gcc_unreachable ();\n \t\t}\n \t      pp_decimal_int (pp, prec);\n-\t      pp_string (pp, \">\");\n+\t      pp_greater (pp);\n \t    }\n \t}\n       break;\n@@ -1920,9 +1920,9 @@ pp_c_relational_expression (c_pretty_printer *pp, tree e)\n       else if (code == GT_EXPR)\n \tpp_greater (pp);\n       else if (code == LE_EXPR)\n-\tpp_string (pp, \"<=\");\n+\tpp_less_equal (pp);\n       else if (code == GE_EXPR)\n-\tpp_string (pp, \">=\");\n+\tpp_greater_equal (pp);\n       pp_c_whitespace (pp);\n       pp_c_shift_expression (pp, TREE_OPERAND (e, 1));\n       break;\n@@ -2032,7 +2032,7 @@ pp_c_logical_and_expression (c_pretty_printer *pp, tree e)\n     {\n       pp_c_logical_and_expression (pp, TREE_OPERAND (e, 0));\n       pp_c_whitespace (pp);\n-      pp_string (pp, \"&&\");\n+      pp_ampersand_ampersand (pp);\n       pp_c_whitespace (pp);\n       pp_c_inclusive_or_expression (pp, TREE_OPERAND (e, 1));\n     }\n@@ -2052,7 +2052,7 @@ pp_c_logical_or_expression (c_pretty_printer *pp, tree e)\n     {\n       pp_c_logical_or_expression (pp, TREE_OPERAND (e, 0));\n       pp_c_whitespace (pp);\n-      pp_string (pp, \"||\");\n+      pp_bar_bar (pp);\n       pp_c_whitespace (pp);\n       pp_c_logical_and_expression (pp, TREE_OPERAND (e, 1));\n     }"}, {"sha": "7a3de0bd3da6911aab1429672a8b4163ef8fc9f1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=137a1a27e25efa3c13842c1c91a55947ed005412", "patch": "@@ -1,3 +1,10 @@\n+2013-08-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* error.c (dump_type_prefix): Use specialized pretty printer\n+\tfunctions instead of pp_string or operators and punctuators.\n+\t(dump_decl): Likewise.\n+\t(dump_expr): Likewise.\n+\n 2013-08-03  Jason Merrill  <jason@redhat.com>\n \n \tDR 1286"}, {"sha": "887a6ee064759cd11294effaed7443c6c31fdca1", "filename": "gcc/cp/error.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=137a1a27e25efa3c13842c1c91a55947ed005412", "patch": "@@ -714,7 +714,7 @@ dump_type_prefix (tree t, int flags)\n \telse if (TREE_CODE (t) == REFERENCE_TYPE)\n \t{\n \t  if (TYPE_REF_IS_RVALUE (t))\n-\t    pp_string (cxx_pp, \"&&\");\n+\t    pp_ampersand_ampersand (cxx_pp);\n \t  else\n \t    pp_ampersand (cxx_pp);\n \t}\n@@ -1060,7 +1060,7 @@ dump_decl (tree t, int flags)\n \n     case SCOPE_REF:\n       dump_type (TREE_OPERAND (t, 0), flags);\n-      pp_string (cxx_pp, \"::\");\n+      pp_colon_colon (cxx_pp);\n       dump_decl (TREE_OPERAND (t, 1), TFF_UNQUALIFIED_NAME);\n       break;\n \n@@ -1075,9 +1075,9 @@ dump_decl (tree t, int flags)\n       dump_decl (ARRAY_NOTATION_ARRAY (t), flags | TFF_EXPR_IN_PARENS);\n       pp_cxx_left_bracket (cxx_pp);\n       dump_decl (ARRAY_NOTATION_START (t), flags | TFF_EXPR_IN_PARENS);\n-      pp_string (cxx_pp, \":\");\n+      pp_colon (cxx_pp);\n       dump_decl (ARRAY_NOTATION_LENGTH (t), flags | TFF_EXPR_IN_PARENS);\n-      pp_string (cxx_pp, \":\");\n+      pp_colon (cxx_pp);\n       dump_decl (ARRAY_NOTATION_STRIDE (t), flags | TFF_EXPR_IN_PARENS);\n       pp_cxx_right_bracket (cxx_pp);\n       break;\n@@ -2072,9 +2072,9 @@ dump_expr (tree t, int flags)\n       dump_expr (ARRAY_NOTATION_ARRAY (t), flags | TFF_EXPR_IN_PARENS);\n       pp_cxx_left_bracket (cxx_pp);\n       dump_expr (ARRAY_NOTATION_START (t), flags | TFF_EXPR_IN_PARENS);\n-      pp_string (cxx_pp, \":\");\n+      pp_colon (cxx_pp);\n       dump_expr (ARRAY_NOTATION_LENGTH (t), flags | TFF_EXPR_IN_PARENS);\n-      pp_string (cxx_pp, \":\");\n+      pp_colon (cxx_pp);\n       dump_expr (ARRAY_NOTATION_STRIDE (t), flags | TFF_EXPR_IN_PARENS);\n       pp_cxx_right_bracket (cxx_pp);\n       break;"}, {"sha": "436553a988e3a10d483adc5747f12e86fdac4730", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=137a1a27e25efa3c13842c1c91a55947ed005412", "patch": "@@ -436,7 +436,7 @@ dump_ternary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n       dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, gimple_assign_rhs3 (gs), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n     \n     case VEC_PERM_EXPR:\n@@ -446,7 +446,7 @@ dump_ternary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n       dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, gimple_assign_rhs3 (gs), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     case REALIGN_LOAD_EXPR:\n@@ -456,7 +456,7 @@ dump_ternary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n       dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, gimple_assign_rhs3 (gs), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     case COND_EXPR:\n@@ -474,7 +474,7 @@ dump_ternary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n       dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, gimple_assign_rhs3 (gs), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     default:\n@@ -757,7 +757,7 @@ dump_gimple_call (pretty_printer *buffer, gimple gs, int spc, int flags)\n       if (props & PR_READONLY)\n \tpp_string (buffer, \"readOnly \");\n \n-      pp_string (buffer, \"]\");\n+      pp_right_bracket (buffer);\n     }\n }\n \n@@ -1145,10 +1145,10 @@ dump_gimple_omp_for (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t      pp_greater (buffer);\n \t      break;\n \t    case LE_EXPR:\n-\t      pp_string (buffer, \"<=\");\n+\t      pp_less_equal (buffer);\n \t      break;\n \t    case GE_EXPR:\n-\t      pp_string (buffer, \">=\");\n+\t      pp_greater_equal (buffer);\n \t      break;\n \t    default:\n \t      gcc_unreachable ();\n@@ -1420,7 +1420,7 @@ dump_gimple_transaction (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t\t}\n \t      if (subcode)\n \t\tpp_printf (buffer, \"0x%x \", subcode);\n-\t      pp_string (buffer, \"]\");\n+\t      pp_right_bracket (buffer);\n \t    }\n \t}\n \n@@ -1641,7 +1641,7 @@ dump_gimple_phi (pretty_printer *buffer, gimple phi, int spc, int flags)\n \t      pp_string (buffer, \" : \");\n \t    }\n \t  pp_decimal_int (buffer, xloc.line);\n-\t  pp_string (buffer, \":\");\n+\t  pp_colon (buffer);\n \t  pp_decimal_int (buffer, xloc.column);\n \t  pp_string (buffer, \"] \");\n \t}\n@@ -1881,7 +1881,7 @@ pp_gimple_stmt_1 (pretty_printer *buffer, gimple gs, int spc, int flags)\n \t  pp_string (buffer, \" : \");\n \t}\n       pp_decimal_int (buffer, xloc.line);\n-      pp_string (buffer, \":\");\n+      pp_colon (buffer);\n       pp_decimal_int (buffer, xloc.column);\n       pp_string (buffer, \"] \");\n     }"}, {"sha": "71489e6ad70bb43147dfd7ef7a3a66b8422038ea", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=137a1a27e25efa3c13842c1c91a55947ed005412", "patch": "@@ -246,10 +246,14 @@ pp_base_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n #define pp_equal(PP)            pp_character (PP, '=')\n #define pp_question(PP)         pp_character (PP, '?')\n #define pp_bar(PP)              pp_character (PP, '|')\n+#define pp_bar_bar(PP)          pp_string (PP, \"||\")\n #define pp_carret(PP)           pp_character (PP, '^')\n #define pp_ampersand(PP)        pp_character (PP, '&')\n+#define pp_ampersand_ampersand(PP) pp_string (PP, \"&&\")\n #define pp_less(PP)             pp_character (PP, '<')\n+#define pp_less_equal(PP)       pp_string (PP, \"<=\")\n #define pp_greater(PP)          pp_character (PP, '>')\n+#define pp_greater_equal(PP)    pp_string (PP, \">=\")\n #define pp_plus(PP)             pp_character (PP, '+')\n #define pp_minus(PP)            pp_character (PP, '-')\n #define pp_star(PP)             pp_character (PP, '*')"}, {"sha": "3211eafa7984b26c91d97d2397cc993a37d91901", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=137a1a27e25efa3c13842c1c91a55947ed005412", "patch": "@@ -690,7 +690,7 @@ print_insn (pretty_printer *pp, const_rtx x, int verbose)\n     case JUMP_TABLE_DATA:\n       pp_string (pp, \"jump_table_data{\\n\");\n       print_pattern (pp, PATTERN (x), verbose);\n-      pp_string (pp, \"}\");\n+      pp_right_brace (pp);\n       break;\n     case BARRIER:\n       pp_string (pp, \"barrier\");"}, {"sha": "ae51e6c6748c62d1f06526e1f4b66f2393f98396", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=137a1a27e25efa3c13842c1c91a55947ed005412", "patch": "@@ -138,12 +138,12 @@ mf_varname_tree (tree decl)\n \n     if (sourceline != 0)\n       {\n-        pp_string (buf, \":\");\n+        pp_colon (buf);\n         pp_decimal_int (buf, sourceline);\n \n         if (sourcecolumn != 0)\n           {\n-            pp_string (buf, \":\");\n+            pp_colon (buf);\n             pp_decimal_int (buf, sourcecolumn);\n           }\n       }\n@@ -165,7 +165,7 @@ mf_varname_tree (tree decl)\n       pp_string (buf, \") \");\n     }\n   else\n-    pp_string (buf, \" \");\n+    pp_space (buf);\n \n   /* Add <variable-declaration>, possibly demangled.  */\n   {"}, {"sha": "99927b8808f653b1c85658155f9a9aa280b26c8c", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/137a1a27e25efa3c13842c1c91a55947ed005412/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=137a1a27e25efa3c13842c1c91a55947ed005412", "patch": "@@ -519,7 +519,7 @@ dump_block_node (pretty_printer *buffer, tree block, int spc, int flags)\n       for (t = BLOCK_SUBBLOCKS (block); t; t = BLOCK_CHAIN (t))\n \t{\n \t  dump_generic_node (buffer, t, 0, flags | TDF_SLIM, false);\n-\t  pp_string (buffer, \" \");\n+\t  pp_space (buffer);\n \t}\n       newline_and_indent (buffer, spc + 2);\n     }\n@@ -530,7 +530,7 @@ dump_block_node (pretty_printer *buffer, tree block, int spc, int flags)\n       for (t = BLOCK_CHAIN (block); t; t = BLOCK_CHAIN (t))\n \t{\n \t  dump_generic_node (buffer, t, 0, flags | TDF_SLIM, false);\n-\t  pp_string (buffer, \" \");\n+\t  pp_space (buffer);\n \t}\n       newline_and_indent (buffer, spc + 2);\n     }\n@@ -541,7 +541,7 @@ dump_block_node (pretty_printer *buffer, tree block, int spc, int flags)\n       for (t = BLOCK_VARS (block); t; t = TREE_CHAIN (t))\n \t{\n \t  dump_generic_node (buffer, t, 0, flags, false);\n-\t  pp_string (buffer, \" \");\n+\t  pp_space (buffer);\n \t}\n       newline_and_indent (buffer, spc + 2);\n     }\n@@ -555,7 +555,7 @@ dump_block_node (pretty_printer *buffer, tree block, int spc, int flags)\n       FOR_EACH_VEC_ELT (*nlv, i, t)\n \t{\n \t  dump_generic_node (buffer, t, 0, flags, false);\n-\t  pp_string (buffer, \" \");\n+\t  pp_space (buffer);\n \t}\n       newline_and_indent (buffer, spc + 2);\n     }\n@@ -582,7 +582,7 @@ dump_block_node (pretty_printer *buffer, tree block, int spc, int flags)\n       for (t = BLOCK_FRAGMENT_CHAIN (block); t; t = BLOCK_FRAGMENT_CHAIN (t))\n \t{\n \t  dump_generic_node (buffer, t, 0, flags | TDF_SLIM, false);\n-\t  pp_string (buffer, \" \");\n+\t  pp_space (buffer);\n \t}\n       newline_and_indent (buffer, spc + 2);\n     }\n@@ -757,7 +757,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t\t\t\t\t? \"<unnamed-unsigned:\"\n \t\t\t\t\t: \"<unnamed-signed:\"));\n \t\t    pp_decimal_int (buffer, TYPE_PRECISION (node));\n-\t\t    pp_string (buffer, \">\");\n+\t\t    pp_greater (buffer);\n \t\t  }\n \t      }\n \t    else if (TREE_CODE (node) == COMPLEX_TYPE)\n@@ -769,14 +769,14 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t      {\n \t\tpp_string (buffer, \"<float:\");\n \t\tpp_decimal_int (buffer, TYPE_PRECISION (node));\n-\t\tpp_string (buffer, \">\");\n+\t\tpp_greater (buffer);\n \t      }\n \t    else if (TREE_CODE (node) == FIXED_POINT_TYPE)\n \t      {\n \t\tpp_string (buffer, \"<fixed-point-\");\n \t\tpp_string (buffer, TYPE_SATURATING (node) ? \"sat:\" : \"nonsat:\");\n \t\tpp_decimal_int (buffer, TYPE_PRECISION (node));\n-\t\tpp_string (buffer, \">\");\n+\t\tpp_greater (buffer);\n \t      }\n \t    else if (TREE_CODE (node) == VOID_TYPE)\n \t      pp_string (buffer, \"void\");\n@@ -832,7 +832,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t    {\n \t      pp_string (buffer, \" <address-space-\");\n \t      pp_decimal_int (buffer, TYPE_ADDR_SPACE (node));\n-\t      pp_string (buffer, \">\");\n+\t      pp_greater (buffer);\n \t    }\n \n \t  if (TYPE_REF_CAN_ALIAS_ALL (node))\n@@ -868,7 +868,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  {\n \t    if (TREE_CODE (TREE_OPERAND (node, 0)) != ADDR_EXPR)\n \t      {\n-\t\tpp_string (buffer, \"*\");\n+\t\tpp_star (buffer);\n \t\tdump_generic_node (buffer, TREE_OPERAND (node, 0),\n \t\t\t\t   spc, flags, false);\n \t      }\n@@ -882,11 +882,11 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t    tree ptype;\n \n \t    pp_string (buffer, \"MEM[\");\n-\t    pp_string (buffer, \"(\");\n+\t    pp_left_paren (buffer);\n \t    ptype = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (node, 1)));\n \t    dump_generic_node (buffer, ptype,\n \t\t\t       spc, flags | TDF_SLIM, false);\n-\t    pp_string (buffer, \")\");\n+\t    pp_right_paren (buffer);\n \t    dump_generic_node (buffer, TREE_OPERAND (node, 0),\n \t\t\t       spc, flags, false);\n \t    if (!integer_zerop (TREE_OPERAND (node, 1)))\n@@ -895,7 +895,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t\tdump_generic_node (buffer, TREE_OPERAND (node, 1),\n \t\t\t\t   spc, flags, false);\n \t      }\n-\t    pp_string (buffer, \"]\");\n+\t    pp_right_bracket (buffer);\n \t  }\n \tbreak;\n       }\n@@ -954,7 +954,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t    pp_string (buffer, \"offset: \");\n \t    dump_generic_node (buffer, tmp, spc, flags, false);\n \t  }\n-\tpp_string (buffer, \"]\");\n+\tpp_right_bracket (buffer);\n       }\n       break;\n \n@@ -1102,7 +1102,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       dump_generic_node (buffer, TREE_REALPART (node), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, TREE_IMAGPART (node), spc, flags, false);\n-      pp_string (buffer, \")\");\n+      pp_right_paren (buffer);\n       break;\n \n     case STRING_CST:\n@@ -1137,7 +1137,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t\t\t    flags);\n \t  else\n \t    pp_string (buffer, \"<null method basetype>\");\n-\t  pp_string (buffer, \"::\");\n+\t  pp_colon_colon (buffer);\n \t}\n       if (TYPE_NAME (node) && DECL_NAME (TYPE_NAME (node)))\n \tdump_decl_name (buffer, TYPE_NAME (node), flags);\n@@ -1263,7 +1263,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 2), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     case ARRAY_REF:\n@@ -1801,64 +1801,64 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     case CONJ_EXPR:\n       pp_string (buffer, \"CONJ_EXPR <\");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     case REALPART_EXPR:\n       pp_string (buffer, \"REALPART_EXPR <\");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     case IMAGPART_EXPR:\n       pp_string (buffer, \"IMAGPART_EXPR <\");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     case VA_ARG_EXPR:\n       pp_string (buffer, \"VA_ARG_EXPR <\");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     case TRY_FINALLY_EXPR:\n     case TRY_CATCH_EXPR:\n       pp_string (buffer, \"try\");\n       newline_and_indent (buffer, spc+2);\n-      pp_string (buffer, \"{\");\n+      pp_left_brace (buffer);\n       newline_and_indent (buffer, spc+4);\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc+4, flags, true);\n       newline_and_indent (buffer, spc+2);\n-      pp_string (buffer, \"}\");\n+      pp_right_brace (buffer);\n       newline_and_indent (buffer, spc);\n       pp_string (buffer,\n \t\t\t (TREE_CODE (node) == TRY_CATCH_EXPR) ? \"catch\" : \"finally\");\n       newline_and_indent (buffer, spc+2);\n-      pp_string (buffer, \"{\");\n+      pp_left_brace (buffer);\n       newline_and_indent (buffer, spc+4);\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc+4, flags, true);\n       newline_and_indent (buffer, spc+2);\n-      pp_string (buffer, \"}\");\n+      pp_right_brace (buffer);\n       is_expr = false;\n       break;\n \n     case CATCH_EXPR:\n       pp_string (buffer, \"catch (\");\n       dump_generic_node (buffer, CATCH_TYPES (node), spc+2, flags, false);\n-      pp_string (buffer, \")\");\n+      pp_right_paren (buffer);\n       newline_and_indent (buffer, spc+2);\n-      pp_string (buffer, \"{\");\n+      pp_left_brace (buffer);\n       newline_and_indent (buffer, spc+4);\n       dump_generic_node (buffer, CATCH_BODY (node), spc+4, flags, true);\n       newline_and_indent (buffer, spc+2);\n-      pp_string (buffer, \"}\");\n+      pp_right_brace (buffer);\n       is_expr = false;\n       break;\n \n@@ -1867,11 +1867,11 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       dump_generic_node (buffer, EH_FILTER_TYPES (node), spc+2, flags, false);\n       pp_string (buffer, \")>>>\");\n       newline_and_indent (buffer, spc+2);\n-      pp_string (buffer, \"{\");\n+      pp_left_brace (buffer);\n       newline_and_indent (buffer, spc+4);\n       dump_generic_node (buffer, EH_FILTER_FAILURE (node), spc+4, flags, true);\n       newline_and_indent (buffer, spc+2);\n-      pp_string (buffer, \"}\");\n+      pp_right_brace (buffer);\n       is_expr = false;\n       break;\n \n@@ -2006,7 +2006,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  pp_colon (buffer);\n \t  dump_generic_node (buffer, ASM_CLOBBERS (node), spc, flags, false);\n \t}\n-      pp_string (buffer, \")\");\n+      pp_right_paren (buffer);\n       break;\n \n     case CASE_LABEL_EXPR:\n@@ -2041,7 +2041,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       if (SSA_NAME_IDENTIFIER (node))\n \tdump_generic_node (buffer, SSA_NAME_IDENTIFIER (node),\n \t\t\t   spc, flags, false);\n-      pp_string (buffer, \"_\");\n+      pp_underscore (buffer);\n       pp_decimal_int (buffer, SSA_NAME_VERSION (node));\n       if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (node))\n \tpp_string (buffer, \"(ab)\");\n@@ -2054,15 +2054,15 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     case ASSERT_EXPR:\n       pp_string (buffer, \"ASSERT_EXPR <\");\n       dump_generic_node (buffer, ASSERT_EXPR_VAR (node), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, ASSERT_EXPR_COND (node), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     case SCEV_KNOWN:\n@@ -2074,7 +2074,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       break;\n \n     case POLYNOMIAL_CHREC:\n-      pp_string (buffer, \"{\");\n+      pp_left_brace (buffer);\n       dump_generic_node (buffer, CHREC_LEFT (node), spc, flags, false);\n       pp_string (buffer, \", +, \");\n       dump_generic_node (buffer, CHREC_RIGHT (node), spc, flags, false);\n@@ -2090,7 +2090,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 2), spc, flags, false);\n-      pp_string (buffer, \">\");\n+      pp_greater (buffer);\n       break;\n \n     case VEC_COND_EXPR:\n@@ -2206,7 +2206,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t      pp_string (buffer, \"; \");\n \t      dump_generic_node (buffer, TREE_VEC_ELT (OMP_FOR_INCR (node), i),\n \t\t\t\t spc, flags, false);\n-\t      pp_string (buffer, \")\");\n+\t      pp_right_paren (buffer);\n \t    }\n \t  if (OMP_FOR_BODY (node))\n \t    {\n@@ -2935,7 +2935,7 @@ print_call_name (pretty_printer *buffer, tree node, int flags)\n       goto again;\n \n     case COND_EXPR:\n-      pp_string (buffer, \"(\");\n+      pp_left_paren (buffer);\n       dump_generic_node (buffer, TREE_OPERAND (op0, 0), 0, flags, false);\n       pp_string (buffer, \") ? \");\n       dump_generic_node (buffer, TREE_OPERAND (op0, 1), 0, flags, false);"}]}