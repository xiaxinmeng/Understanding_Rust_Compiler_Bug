{"sha": "8c8b9f3265820507a1a9472fee7384b265692380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM4YjlmMzI2NTgyMDUwN2ExYTk0NzJmZWU3Mzg0YjI2NTY5MjM4MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-06-17T17:59:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-06-17T17:59:25Z"}, "message": "re PR middle-end/66429 (ICE in expand_GOMP_SIMD_LAST_LANE)\n\n\tPR middle-end/66429\n\t* omp-low.c (expand_omp_taskreg): Use child_cfun instead of\n\tDECL_STRUCT_FUNCTION (child_fn).  Or in has_simduid_loops\n\tand has_force_vectorize_loops flags from cfun into\n\tchild_cfun.\n\t(expand_omp_simd): For broken loop, set cfun->has_simduid_loops\n\tif simduid is non-NULL.\n\t* tree-pass.h (make_pass_simduid_cleanup): New prototype.\n\t* passes.def (pass_simduid_cleanup): Add new pass after loop\n\tpasses.\n\t* tree-vectorizer.c (adjust_simduid_builtins): Remove one unnecessary\n\tindirection from htab argument's type.\n\t(shrink_simd_arrays): New function.\n\t(vectorize_loops): Use it.  Adjust adjust_simduid_builtins caller.\n\tDon't call adjust_simduid_builtins if there are no loops.\n\t(pass_data_simduid_cleanup, pass_simduid_cleanup): New variables.\n\t(pass_simduid_cleanup::execute): New method.\n\t(make_pass_simduid_cleanup): New function.\n\n\t* c-c++-common/gomp/pr66429.c: New test.\n\nFrom-SVN: r224568", "tree": {"sha": "2678bfd5b1d0ccb490085b30a993176696dcaf3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2678bfd5b1d0ccb490085b30a993176696dcaf3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c8b9f3265820507a1a9472fee7384b265692380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8b9f3265820507a1a9472fee7384b265692380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c8b9f3265820507a1a9472fee7384b265692380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8b9f3265820507a1a9472fee7384b265692380/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6e3667f976a0592eb156d948a9dfe240250778d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e3667f976a0592eb156d948a9dfe240250778d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e3667f976a0592eb156d948a9dfe240250778d"}], "stats": {"total": 214, "additions": 176, "deletions": 38}, "files": [{"sha": "8f92fecf5af7a9365e458b1d54a165a45648ad33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c8b9f3265820507a1a9472fee7384b265692380", "patch": "@@ -1,3 +1,24 @@\n+2015-06-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/66429\n+\t* omp-low.c (expand_omp_taskreg): Use child_cfun instead of\n+\tDECL_STRUCT_FUNCTION (child_fn).  Or in has_simduid_loops\n+\tand has_force_vectorize_loops flags from cfun into\n+\tchild_cfun.\n+\t(expand_omp_simd): For broken loop, set cfun->has_simduid_loops\n+\tif simduid is non-NULL.\n+\t* tree-pass.h (make_pass_simduid_cleanup): New prototype.\n+\t* passes.def (pass_simduid_cleanup): Add new pass after loop\n+\tpasses.\n+\t* tree-vectorizer.c (adjust_simduid_builtins): Remove one unnecessary\n+\tindirection from htab argument's type.\n+\t(shrink_simd_arrays): New function.\n+\t(vectorize_loops): Use it.  Adjust adjust_simduid_builtins caller.\n+\tDon't call adjust_simduid_builtins if there are no loops.\n+\t(pass_data_simduid_cleanup, pass_simduid_cleanup): New variables.\n+\t(pass_simduid_cleanup::execute): New method.\n+\t(make_pass_simduid_cleanup): New function.\n+\n 2017-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-core.h (tree_target_option): Make opts field a pointer to a "}, {"sha": "6325b8260107cb7a8ac55186116f05e093b27268", "filename": "gcc/omp-low.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=8c8b9f3265820507a1a9472fee7384b265692380", "patch": "@@ -5587,7 +5587,9 @@ expand_omp_taskreg (struct omp_region *region)\n \tvec_safe_truncate (child_cfun->local_decls, dstidx);\n \n       /* Inform the callgraph about the new function.  */\n-      DECL_STRUCT_FUNCTION (child_fn)->curr_properties = cfun->curr_properties;\n+      child_cfun->curr_properties = cfun->curr_properties;\n+      child_cfun->has_simduid_loops |= cfun->has_simduid_loops;\n+      child_cfun->has_force_vectorize_loops |= cfun->has_force_vectorize_loops;\n       cgraph_node *node = cgraph_node::get_create (child_fn);\n       node->parallelized_function = 1;\n       cgraph_node::add_new_function (child_fn, true);\n@@ -7836,6 +7838,8 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t  cfun->has_force_vectorize_loops = true;\n \t}\n     }\n+  else if (simduid)\n+    cfun->has_simduid_loops = true;\n }\n \n "}, {"sha": "9ced655800062ecf8f47535d731d06d4d8c27dfa", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=8c8b9f3265820507a1a9472fee7384b265692380", "patch": "@@ -270,6 +270,7 @@ along with GCC; see the file COPYING3.  If not see\n       PUSH_INSERT_PASSES_WITHIN (pass_tree_no_loop)\n \t  NEXT_PASS (pass_slp_vectorize);\n       POP_INSERT_PASSES ()\n+      NEXT_PASS (pass_simduid_cleanup);\n       NEXT_PASS (pass_lower_vector_ssa);\n       NEXT_PASS (pass_cse_reciprocals);\n       NEXT_PASS (pass_reassoc);"}, {"sha": "10c61ef2cf676536e2e4603c47ed0b5fa568dfb8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c8b9f3265820507a1a9472fee7384b265692380", "patch": "@@ -1,3 +1,8 @@\n+2015-06-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/66429\n+\t* c-c++-common/gomp/pr66429.c: New test.\n+\n 2015-06-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/test-error-accessing-field-in-other-struct.c: Rename to..."}, {"sha": "01c795fef400beb3b88383539c5a5ec93df13ccb", "filename": "gcc/testsuite/c-c++-common/gomp/pr66429.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr66429.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr66429.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr66429.c?ref=8c8b9f3265820507a1a9472fee7384b265692380", "patch": "@@ -0,0 +1,41 @@\n+/* PR middle-end/66429 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp\" } */\n+\n+float b[10][15][10];\n+\n+__attribute__ ((noreturn)) void\n+noreturn (void)\n+{\n+  for (;;);\n+}\n+\n+__attribute__ ((noinline, noclone)) void\n+foo (int n)\n+{\n+  int i;\n+\n+#pragma omp parallel for simd schedule(static, 32) collapse(3)\n+  for (i = 0; i < 10; i++)\n+    for (int j = n; j < 8; j++)\n+      for (long k = -10; k < 10; k++)\n+\t{\n+\t  b[i][j][k] += 16;\n+\t  noreturn ();\n+\t  b[i][j][k] -= 32;\n+\t}\n+}\n+\n+__attribute__ ((noinline, noclone)) void\n+bar (void)\n+{\n+  int i;\n+\n+#pragma omp parallel for simd schedule(static, 32)\n+  for (i = 0; i < 10; i++)\n+    {\n+      b[0][0][i] += 16;\n+      noreturn ();\n+      b[0][0][i] -= 32;\n+    }\n+}"}, {"sha": "454555653db5efa560739f0683ade4e820cae254", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=8c8b9f3265820507a1a9472fee7384b265692380", "patch": "@@ -372,6 +372,7 @@ extern gimple_opt_pass *make_pass_graphite_transforms (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_if_conversion (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_loop_distribution (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_vectorize (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_simduid_cleanup (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_slp_vectorize (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_complete_unroll (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_complete_unrolli (gcc::context *ctxt);"}, {"sha": "9d178026a2f366e3317fb2491de475c5fa12fb30", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 102, "deletions": 37, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c8b9f3265820507a1a9472fee7384b265692380/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=8c8b9f3265820507a1a9472fee7384b265692380", "patch": "@@ -168,7 +168,7 @@ simd_array_to_simduid::equal (const simd_array_to_simduid *p1,\n    into their corresponding constants.  */\n \n static void\n-adjust_simduid_builtins (hash_table<simduid_to_vf> **htab)\n+adjust_simduid_builtins (hash_table<simduid_to_vf> *htab)\n {\n   basic_block bb;\n \n@@ -200,10 +200,12 @@ adjust_simduid_builtins (hash_table<simduid_to_vf> **htab)\n \t  gcc_assert (TREE_CODE (arg) == SSA_NAME);\n \t  simduid_to_vf *p = NULL, data;\n \t  data.simduid = DECL_UID (SSA_NAME_VAR (arg));\n-\t  if (*htab)\n-\t    p = (*htab)->find (&data);\n-\t  if (p)\n-\t    vf = p->vf;\n+\t  if (htab)\n+\t    {\n+\t      p = htab->find (&data);\n+\t      if (p)\n+\t\tvf = p->vf;\n+\t    }\n \t  switch (ifn)\n \t    {\n \t    case IFN_GOMP_SIMD_VF:\n@@ -306,6 +308,38 @@ note_simd_array_uses (hash_table<simd_array_to_simduid> **htab)\n \t    walk_gimple_op (use_stmt, note_simd_array_uses_cb, &wi);\n       }\n }\n+\n+/* Shrink arrays with \"omp simd array\" attribute to the corresponding\n+   vectorization factor.  */\n+\n+static void\n+shrink_simd_arrays\n+  (hash_table<simd_array_to_simduid> *simd_array_to_simduid_htab,\n+   hash_table<simduid_to_vf> *simduid_to_vf_htab)\n+{\n+  for (hash_table<simd_array_to_simduid>::iterator iter\n+\t = simd_array_to_simduid_htab->begin ();\n+       iter != simd_array_to_simduid_htab->end (); ++iter)\n+    if ((*iter)->simduid != -1U)\n+      {\n+\ttree decl = (*iter)->decl;\n+\tint vf = 1;\n+\tif (simduid_to_vf_htab)\n+\t  {\n+\t    simduid_to_vf *p = NULL, data;\n+\t    data.simduid = (*iter)->simduid;\n+\t    p = simduid_to_vf_htab->find (&data);\n+\t    if (p)\n+\t      vf = p->vf;\n+\t  }\n+\ttree atype\n+\t  = build_array_type_nelts (TREE_TYPE (TREE_TYPE (decl)), vf);\n+\tTREE_TYPE (decl) = atype;\n+\trelayout_decl (decl);\n+      }\n+\n+  delete simd_array_to_simduid_htab;\n+}\n \f\n /* A helper function to free data refs.  */\n \n@@ -442,11 +476,7 @@ vectorize_loops (void)\n \n   /* Bail out if there are no loops.  */\n   if (vect_loops_num <= 1)\n-    {\n-      if (cfun->has_simduid_loops)\n-\tadjust_simduid_builtins (&simduid_to_vf_htab);\n-      return 0;\n-    }\n+    return 0;\n \n   if (cfun->has_simduid_loops)\n     note_simd_array_uses (&simd_array_to_simduid_htab);\n@@ -555,37 +585,14 @@ vectorize_loops (void)\n \n   /* Fold IFN_GOMP_SIMD_{VF,LANE,LAST_LANE} builtins.  */\n   if (cfun->has_simduid_loops)\n-    adjust_simduid_builtins (&simduid_to_vf_htab);\n+    adjust_simduid_builtins (simduid_to_vf_htab);\n \n   /* Shrink any \"omp array simd\" temporary arrays to the\n      actual vectorization factors.  */\n   if (simd_array_to_simduid_htab)\n-    {\n-      for (hash_table<simd_array_to_simduid>::iterator iter\n-\t   = simd_array_to_simduid_htab->begin ();\n-\t   iter != simd_array_to_simduid_htab->end (); ++iter)\n-\tif ((*iter)->simduid != -1U)\n-\t  {\n-\t    tree decl = (*iter)->decl;\n-\t    int vf = 1;\n-\t    if (simduid_to_vf_htab)\n-\t      {\n-\t\tsimduid_to_vf *p = NULL, data;\n-\t\tdata.simduid = (*iter)->simduid;\n-\t\tp = simduid_to_vf_htab->find (&data);\n-\t\tif (p)\n-\t\t  vf = p->vf;\n-\t      }\n-\t    tree atype\n-\t      = build_array_type_nelts (TREE_TYPE (TREE_TYPE (decl)), vf);\n-\t    TREE_TYPE (decl) = atype;\n-\t    relayout_decl (decl);\n-\t  }\n-\n-      delete simd_array_to_simduid_htab;\n-    }\n-    delete simduid_to_vf_htab;\n-    simduid_to_vf_htab = NULL;\n+    shrink_simd_arrays (simd_array_to_simduid_htab, simduid_to_vf_htab);\n+  delete simduid_to_vf_htab;\n+  cfun->has_simduid_loops = false;\n \n   if (num_vectorized_loops > 0)\n     {\n@@ -600,6 +607,64 @@ vectorize_loops (void)\n }\n \n \n+/* Entry point to the simduid cleanup pass.  */\n+\n+namespace {\n+\n+const pass_data pass_data_simduid_cleanup =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"simduid\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  ( PROP_ssa | PROP_cfg ), /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_simduid_cleanup : public gimple_opt_pass\n+{\n+public:\n+  pass_simduid_cleanup (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_simduid_cleanup, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  opt_pass * clone () { return new pass_simduid_cleanup (m_ctxt); }\n+  virtual bool gate (function *fun) { return fun->has_simduid_loops; }\n+  virtual unsigned int execute (function *);\n+\n+}; // class pass_simduid_cleanup\n+\n+unsigned int\n+pass_simduid_cleanup::execute (function *fun)\n+{\n+  hash_table<simd_array_to_simduid> *simd_array_to_simduid_htab = NULL;\n+\n+  note_simd_array_uses (&simd_array_to_simduid_htab);\n+\n+  /* Fold IFN_GOMP_SIMD_{VF,LANE,LAST_LANE} builtins.  */\n+  adjust_simduid_builtins (NULL);\n+\n+  /* Shrink any \"omp array simd\" temporary arrays to the\n+     actual vectorization factors.  */\n+  if (simd_array_to_simduid_htab)\n+    shrink_simd_arrays (simd_array_to_simduid_htab, NULL);\n+  fun->has_simduid_loops = false;\n+  return 0;\n+}\n+\n+}  // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_simduid_cleanup (gcc::context *ctxt)\n+{\n+  return new pass_simduid_cleanup (ctxt);\n+}\n+\n+\n /*  Entry point to basic block SLP phase.  */\n \n namespace {"}]}