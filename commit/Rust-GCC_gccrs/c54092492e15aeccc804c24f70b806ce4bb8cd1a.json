{"sha": "c54092492e15aeccc804c24f70b806ce4bb8cd1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0MDkyNDkyZTE1YWVjY2M4MDRjMjRmNzBiODA2Y2U0YmI4Y2QxYQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-10-17T00:11:25Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-10-17T00:11:25Z"}, "message": "builtins.c (gimplify_va_arg_expr): Use inform for help message.\n\n2007-10-17  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* builtins.c (gimplify_va_arg_expr): Use inform for help message.\n\t* toplev.c (check_global_declaration_1): Use appropriate warning\n\toption instead of unnamed warning.\n\t* stor-layout.c (layout_decl): Likewise.\n\t* c-typeck.c (build_conditional_expr): Likewise.\n\t(build_compound_expr): Fix wrong comment.\n\t(build_binary_op): Use appropriate warning option instead of\n\tunnamed warning.\n\t* cfgexpand.c (tree_expand_cfg): Likewise.\n\t* tree-optimize.c (tree_rest_of_compilation): Likewise.\n\t* tree-cfg.c (remove_useless_stmts_warn_notreached): Likewise.\n\t(execute_warn_function_return): Likewise.\n\t* stmt.c (warn_if_unused_value): Likewise.\ncp/\n\t* typeck.c (build_binary_op) : Use appropriate warning option\n\tinstead of unnamed warning.\n\nFrom-SVN: r129393", "tree": {"sha": "d6cc9fecfe33bc3024a4f7fb1ce0b9a10e49997c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6cc9fecfe33bc3024a4f7fb1ce0b9a10e49997c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c54092492e15aeccc804c24f70b806ce4bb8cd1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54092492e15aeccc804c24f70b806ce4bb8cd1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54092492e15aeccc804c24f70b806ce4bb8cd1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54092492e15aeccc804c24f70b806ce4bb8cd1a/comments", "author": null, "committer": null, "parents": [{"sha": "2e8cd6eb31d5e2fc5b01f3c4ecc12dfa81d9bf5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e8cd6eb31d5e2fc5b01f3c4ecc12dfa81d9bf5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e8cd6eb31d5e2fc5b01f3c4ecc12dfa81d9bf5d"}], "stats": {"total": 71, "additions": 49, "deletions": 22}, "files": [{"sha": "e2bf83b5582068d64f42dfca0a0df4f60f05d142", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c54092492e15aeccc804c24f70b806ce4bb8cd1a", "patch": "@@ -1,3 +1,19 @@\n+2007-10-17  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* builtins.c (gimplify_va_arg_expr): Use inform for help message.\n+\t* toplev.c (check_global_declaration_1): Use appropriate warning\n+\toption instead of unnamed warning.\n+\t* stor-layout.c (layout_decl): Likewise.\n+\t* c-typeck.c (build_conditional_expr): Likewise.\n+\t(build_compound_expr): Fix wrong comment.\n+\t(build_binary_op): Use appropriate warning option instead of\n+\tunnamed warning.\n+\t* cfgexpand.c (tree_expand_cfg): Likewise.\n+\t* tree-optimize.c (tree_rest_of_compilation): Likewise.\n+\t* tree-cfg.c (remove_useless_stmts_warn_notreached): Likewise.\n+\t(execute_warn_function_return): Likewise.\n+\t* stmt.c (warn_if_unused_value): Likewise.\n+\n 2007-10-16  Eric B. Weddington  <eweddington@cso.atmel.com>\n \n \t* config/avr/avr.c (avr_mcu_types): Add at90pwm216, at90pwm316."}, {"sha": "4f4cba250ed7838badf9c16364df6b0acd580585", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c54092492e15aeccc804c24f70b806ce4bb8cd1a", "patch": "@@ -4873,7 +4873,7 @@ gimplify_va_arg_expr (tree *expr_p, tree *pre_p, tree *post_p)\n       if (! gave_help)\n \t{\n \t  gave_help = true;\n-\t  warning (0, \"(so you should pass %qT not %qT to %<va_arg%>)\",\n+\t  inform (\"(so you should pass %qT not %qT to %<va_arg%>)\",\n \t\t   promoted_type, type);\n \t}\n "}, {"sha": "9f3d9cbac49d5691d1c5f3a918252179ac56e564", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c54092492e15aeccc804c24f70b806ce4bb8cd1a", "patch": "@@ -3439,7 +3439,7 @@ build_conditional_expr (tree ifexp, tree op1, tree op2)\n \t\t\t   && tree_expr_nonnegative_warnv_p (op2, &ovf)))\n \t\t/* OK */;\n \t      else\n-\t\twarning (0, \"signed and unsigned type in conditional expression\");\n+\t\twarning (OPT_Wsign_compare, \"signed and unsigned type in conditional expression\");\n \t    }\n \t}\n     }\n@@ -3534,7 +3534,7 @@ build_compound_expr (tree expr1, tree expr2)\n   if (!TREE_SIDE_EFFECTS (expr1))\n     {\n       /* The left-hand operand of a comma expression is like an expression\n-\t statement: with -Wextra or -Wunused, we should warn if it doesn't have\n+\t statement: with -Wunused, we should warn if it doesn't have\n \t any side-effects, unless it was explicitly cast to (void).  */\n       if (warn_unused_value)\n \t{\n@@ -8497,7 +8497,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t\t\t    c_common_signed_type (result_type)))\n \t\t    /* OK */;\n \t\t  else\n-\t\t    warning (0, \"comparison between signed and unsigned\");\n+\t\t    warning (OPT_Wsign_compare, \"comparison between signed and unsigned\");\n \t\t}\n \n \t      /* Warn if two unsigned values are being compared in a size\n@@ -8543,15 +8543,15 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t\t\t{\n \t\t\t  mask = (~(HOST_WIDE_INT) 0) << bits;\n \t\t\t  if ((mask & constant) != mask)\n-\t\t\t    warning (0, \"comparison of promoted ~unsigned with constant\");\n+\t\t\t    warning (OPT_Wsign_compare, \"comparison of promoted ~unsigned with constant\");\n \t\t\t}\n \t\t    }\n \t\t  else if (unsignedp0 && unsignedp1\n \t\t\t   && (TYPE_PRECISION (TREE_TYPE (primop0))\n \t\t\t       < TYPE_PRECISION (result_type))\n \t\t\t   && (TYPE_PRECISION (TREE_TYPE (primop1))\n \t\t\t       < TYPE_PRECISION (result_type)))\n-\t\t    warning (0, \"comparison of promoted ~unsigned with unsigned\");\n+\t\t    warning (OPT_Wsign_compare, \"comparison of promoted ~unsigned with unsigned\");\n \t\t}\n \t    }\n \t}"}, {"sha": "769483b8b23d318ebc9f9eae6f3acbb9c651b74d", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=c54092492e15aeccc804c24f70b806ce4bb8cd1a", "patch": "@@ -1877,9 +1877,11 @@ tree_expand_cfg (void)\n   if (warn_stack_protect)\n     {\n       if (current_function_calls_alloca)\n-\twarning (0, \"not protecting local variables: variable length buffer\");\n+\twarning (OPT_Wstack_protector, \n+\t\t \"not protecting local variables: variable length buffer\");\n       if (has_short_buffer && !cfun->stack_protect_guard)\n-\twarning (0, \"not protecting function: no buffer at least %d bytes long\",\n+\twarning (OPT_Wstack_protector, \n+\t\t \"not protecting function: no buffer at least %d bytes long\",\n \t\t (int) PARAM_VALUE (PARAM_SSP_BUFFER_SIZE));\n     }\n "}, {"sha": "4283a88e249fed76d16d6c6bde6c908b0ff94466", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c54092492e15aeccc804c24f70b806ce4bb8cd1a", "patch": "@@ -1,3 +1,8 @@\n+2007-10-17  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* typeck.c (build_binary_op) : Use appropriate warning option\n+\tinstead of unnamed warning.\n+\n 2007-10-16  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/31446"}, {"sha": "392e2db3a99f7181bdb3f490b98a03b3cac8211b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c54092492e15aeccc804c24f70b806ce4bb8cd1a", "patch": "@@ -3746,7 +3746,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t      && TYPE_MAIN_VARIANT (TREE_TYPE (orig_op0))\n \t\t != TYPE_MAIN_VARIANT (TREE_TYPE (orig_op1)))\n \t    {\n-\t      warning (0, \"comparison between types %q#T and %q#T\",\n+\t      warning (OPT_Wsign_compare, \"comparison between types %q#T and %q#T\",\n \t\t       TREE_TYPE (orig_op0), TREE_TYPE (orig_op1));\n \t    }\n \n@@ -3782,7 +3782,8 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t\t\t\t\t\t(result_type)))))\n \t    /* OK */;\n \t  else\n-\t    warning (0, \"comparison between signed and unsigned integer expressions\");\n+\t    warning (OPT_Wsign_compare, \n+\t\t     \"comparison between signed and unsigned integer expressions\");\n \n \t  /* Warn if two unsigned values are being compared in a size\n \t     larger than their original size, and one (and only one) is the\n@@ -3826,15 +3827,15 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t\t    {\n \t\t      mask = (~ (HOST_WIDE_INT) 0) << bits;\n \t\t      if ((mask & constant) != mask)\n-\t\t\twarning (0, \"comparison of promoted ~unsigned with constant\");\n+\t\t\twarning (OPT_Wsign_compare, \"comparison of promoted ~unsigned with constant\");\n \t\t    }\n \t\t}\n \t      else if (unsignedp0 && unsignedp1\n \t\t       && (TYPE_PRECISION (TREE_TYPE (primop0))\n \t\t\t   < TYPE_PRECISION (result_type))\n \t\t       && (TYPE_PRECISION (TREE_TYPE (primop1))\n \t\t\t   < TYPE_PRECISION (result_type)))\n-\t\twarning (0, \"comparison of promoted ~unsigned with unsigned\");\n+\t\twarning (OPT_Wsign_compare, \"comparison of promoted ~unsigned with unsigned\");\n \t    }\n \t}\n     }"}, {"sha": "f1be5e01aff30f9611dd640cea656e2b1b44525b", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=c54092492e15aeccc804c24f70b806ce4bb8cd1a", "patch": "@@ -1479,7 +1479,7 @@ warn_if_unused_value (const_tree exp, location_t locus)\n \treturn 0;\n \n     warn:\n-      warning (0, \"%Hvalue computed is not used\", &locus);\n+      warning (OPT_Wunused_value, \"%Hvalue computed is not used\", &locus);\n       return 1;\n     }\n }"}, {"sha": "226091709a241b79b2b948803a601d8fdeb7826b", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=c54092492e15aeccc804c24f70b806ce4bb8cd1a", "patch": "@@ -464,9 +464,9 @@ layout_decl (tree decl, unsigned int known_align)\n \t  int size_as_int = TREE_INT_CST_LOW (size);\n \n \t  if (compare_tree_int (size, size_as_int) == 0)\n-\t    warning (0, \"size of %q+D is %d bytes\", decl, size_as_int);\n+\t    warning (OPT_Wlarger_than_, \"size of %q+D is %d bytes\", decl, size_as_int);\n \t  else\n-\t    warning (0, \"size of %q+D is larger than %wd bytes\",\n+\t    warning (OPT_Wlarger_than_, \"size of %q+D is larger than %wd bytes\",\n                      decl, larger_than_size);\n \t}\n     }"}, {"sha": "f7f887a6db04fb042b9b542fe58fc5275ceba5dd", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c54092492e15aeccc804c24f70b806ce4bb8cd1a", "patch": "@@ -846,7 +846,7 @@ check_global_declaration_1 (tree decl)\n       if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n \tpedwarn (\"%q+F used but never defined\", decl);\n       else\n-\twarning (0, \"%q+F declared %<static%> but never defined\", decl);\n+\twarning (OPT_Wunused_function, \"%q+F declared %<static%> but never defined\", decl);\n       /* This symbol is effectively an \"extern\" declaration now.  */\n       TREE_PUBLIC (decl) = 1;\n       assemble_external (decl);\n@@ -871,7 +871,10 @@ check_global_declaration_1 (tree decl)\n       && ! (TREE_CODE (decl) == VAR_DECL && DECL_REGISTER (decl))\n       /* Otherwise, ask the language.  */\n       && lang_hooks.decls.warn_unused_global (decl))\n-    warning (0, \"%q+D defined but not used\", decl);\n+    warning ((TREE_CODE (decl) == FUNCTION_DECL) \n+\t     ? OPT_Wunused_function \n+             : OPT_Wunused_variable, \n+\t     \"%q+D defined but not used\", decl);\n }\n \n /* Issue appropriate warnings for the global declarations in VEC (of"}, {"sha": "69780c724231877fedf47a53a11c61bfc43795f0", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=c54092492e15aeccc804c24f70b806ce4bb8cd1a", "patch": "@@ -1422,7 +1422,7 @@ remove_useless_stmts_warn_notreached (tree stmt)\n       location_t loc = EXPR_LOCATION (stmt);\n       if (LOCATION_LINE (loc) > 0)\n \t{\n-\t  warning (0, \"%Hwill never be executed\", &loc);\n+\t  warning (OPT_Wunreachable_code, \"%Hwill never be executed\", &loc);\n \t  return true;\n \t}\n     }\n@@ -6957,12 +6957,12 @@ execute_warn_function_return (void)\n \t      location = EXPR_LOCATION (last);\n \t      if (location == UNKNOWN_LOCATION)\n \t\t  location = cfun->function_end_locus;\n-\t      warning (0, \"%Hcontrol reaches end of non-void function\", &location);\n+\t      warning (OPT_Wreturn_type, \"%Hcontrol reaches end of non-void function\", &location);\n #else\n \t      locus = EXPR_LOCUS (last);\n \t      if (!locus)\n \t\tlocus = &cfun->function_end_locus;\n-\t      warning (0, \"%Hcontrol reaches end of non-void function\", locus);\n+\t      warning (OPT_Wreturn_type, \"%Hcontrol reaches end of non-void function\", locus);\n #endif\n \t      TREE_NO_WARNING (cfun->decl) = 1;\n \t      break;"}, {"sha": "cb30ba401cd2e6f915e87348570ec5032abaf903", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54092492e15aeccc804c24f70b806ce4bb8cd1a/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=c54092492e15aeccc804c24f70b806ce4bb8cd1a", "patch": "@@ -427,10 +427,10 @@ tree_rest_of_compilation (tree fndecl)\n \t    = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (ret_type));\n \n \t  if (compare_tree_int (TYPE_SIZE_UNIT (ret_type), size_as_int) == 0)\n-\t    warning (0, \"size of return value of %q+D is %u bytes\",\n+\t    warning (OPT_Wlarger_than_, \"size of return value of %q+D is %u bytes\",\n                      fndecl, size_as_int);\n \t  else\n-\t    warning (0, \"size of return value of %q+D is larger than %wd bytes\",\n+\t    warning (OPT_Wlarger_than_, \"size of return value of %q+D is larger than %wd bytes\",\n                      fndecl, larger_than_size);\n \t}\n     }"}]}