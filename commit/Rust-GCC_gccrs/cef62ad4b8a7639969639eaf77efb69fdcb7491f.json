{"sha": "cef62ad4b8a7639969639eaf77efb69fdcb7491f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VmNjJhZDRiOGE3NjM5OTY5NjM5ZWFmNzdlZmI2OWZkY2I3NDkxZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-06-26T21:34:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-06-26T21:34:36Z"}, "message": "call.c (add_function_candidate): Set LOOKUP_COPY_PARM for any constructor called with a single argument that...\n\n\t* call.c (add_function_candidate): Set LOOKUP_COPY_PARM for any\n\tconstructor called with a single argument that takes a reference\n\tto the constructor's class.\n\t(BAD_CONVERSION_RANK): New.\n\t(compare_ics): Use it to compare bad ICSes.\n\nFrom-SVN: r161443", "tree": {"sha": "8ab96391526abd64104dcc6fc5e7d59416087ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ab96391526abd64104dcc6fc5e7d59416087ad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cef62ad4b8a7639969639eaf77efb69fdcb7491f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef62ad4b8a7639969639eaf77efb69fdcb7491f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef62ad4b8a7639969639eaf77efb69fdcb7491f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef62ad4b8a7639969639eaf77efb69fdcb7491f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9816849ed076273403f2fcf4913134dbf2acdb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9816849ed076273403f2fcf4913134dbf2acdb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9816849ed076273403f2fcf4913134dbf2acdb3"}], "stats": {"total": 94, "additions": 76, "deletions": 18}, "files": [{"sha": "e9d85c30ffe19d8a077a21bd45218d8d0dc4742b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef62ad4b8a7639969639eaf77efb69fdcb7491f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef62ad4b8a7639969639eaf77efb69fdcb7491f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cef62ad4b8a7639969639eaf77efb69fdcb7491f", "patch": "@@ -1,3 +1,11 @@\n+2010-06-26  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (add_function_candidate): Set LOOKUP_COPY_PARM for any\n+\tconstructor called with a single argument that takes a reference\n+\tto the constructor's class.\n+\t(BAD_CONVERSION_RANK): New.\n+\t(compare_ics): Use it to compare bad ICSes.\n+\n 2010-06-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lang-specs.h: Remove +e handling."}, {"sha": "faaab1027f5197617120758fbf4ca94fdccf1747", "filename": "gcc/cp/call.c", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef62ad4b8a7639969639eaf77efb69fdcb7491f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef62ad4b8a7639969639eaf77efb69fdcb7491f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=cef62ad4b8a7639969639eaf77efb69fdcb7491f", "patch": "@@ -122,6 +122,11 @@ struct conversion {\n    : (NODE)->user_conv_p ? cr_user\t\t\\\n    : (NODE)->rank)\n \n+#define BAD_CONVERSION_RANK(NODE)\t\t\\\n+  ((NODE)->ellipsis_p ? cr_ellipsis\t\t\\\n+   : (NODE)->user_conv_p ? cr_user\t\t\\\n+   : (NODE)->rank)\n+\n static struct obstack conversion_obstack;\n static bool conversion_obstack_initialized;\n \n@@ -1386,9 +1391,12 @@ reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags)\n      conversion operator).  */\n   flags |= LOOKUP_NO_TEMP_BIND;\n \n-  /* Temporaries are copy-initialized, except for this hack to allow\n-     explicit conversion ops to the copy ctor.  See also\n-     add_function_candidate.  */\n+  /* Core issue 899: When [copy-]initializing a temporary to be bound\n+     to the first parameter of a copy constructor (12.8) called with\n+     a single argument in the context of direct-initialization,\n+     explicit conversion functions are also considered.\n+\n+     So don't set LOOKUP_ONLYCONVERTING in that case.  */\n   if (!(flags & LOOKUP_COPY_PARM))\n     flags |= LOOKUP_ONLYCONVERTING;\n \n@@ -1618,6 +1626,8 @@ add_function_candidate (struct z_candidate **candidates,\n \t  tree parmtype = TREE_VALUE (parmnode);\n \t  int lflags = flags;\n \n+\t  parmnode = TREE_CHAIN (parmnode);\n+\n \t  /* The type of the implicit object parameter ('this') for\n \t     overload resolution is not always the same as for the\n \t     function itself; conversion functions are considered to\n@@ -1634,13 +1644,25 @@ add_function_candidate (struct z_candidate **candidates,\n \t      parmtype = build_pointer_type (parmtype);\n \t    }\n \n-\t  if (ctype && i == 0 && DECL_COPY_CONSTRUCTOR_P (fn)\n-\t      && (len-skip == 1))\n+\t  /* Core issue 899: When [copy-]initializing a temporary to be bound\n+\t     to the first parameter of a copy constructor (12.8) called with\n+\t     a single argument in the context of direct-initialization,\n+\t     explicit conversion functions are also considered.\n+\n+\t     So set LOOKUP_COPY_PARM to let reference_binding know that\n+\t     it's being called in that context.  We generalize the above\n+\t     to handle move constructors and template constructors as well;\n+\t     the standardese should soon be updated similarly.  */\n+\t  if (ctype && i == 0 && (len-skip == 1)\n+\t      && !(flags & LOOKUP_ONLYCONVERTING)\n+\t      && DECL_CONSTRUCTOR_P (fn)\n+\t      && parmtype != error_mark_node\n+\t      && (same_type_ignoring_top_level_qualifiers_p\n+\t\t  (non_reference (parmtype), ctype)))\n \t    {\n-\t      /* Hack: Direct-initialize copy parm (i.e. suppress\n-\t\t LOOKUP_ONLYCONVERTING) to make explicit conversion ops\n-\t\t work.  See also reference_binding.  */\n \t      lflags |= LOOKUP_COPY_PARM;\n+\t      /* We allow user-defined conversions within init-lists, but\n+\t\t not for the copy constructor.  */\n \t      if (flags & LOOKUP_NO_COPY_CTOR_CONVERSION)\n \t\tlflags |= LOOKUP_NO_CONVERSION;\n \t    }\n@@ -1668,9 +1690,6 @@ add_function_candidate (struct z_candidate **candidates,\n \n       if (t->bad_p)\n \tviable = -1;\n-\n-      if (parmnode)\n-\tparmnode = TREE_CHAIN (parmnode);\n     }\n \n  out:\n@@ -6741,14 +6760,16 @@ compare_ics (conversion *ics1, conversion *ics2)\n \n   if (rank1 == cr_bad)\n     {\n-      /* XXX Isn't this an extension? */\n-      /* Both ICS are bad.  We try to make a decision based on what\n-\t would have happened if they'd been good.  */\n-      if (ics1->user_conv_p > ics2->user_conv_p\n-\t  || ics1->rank  > ics2->rank)\n+      /* Both ICS are bad.  We try to make a decision based on what would\n+\t have happened if they'd been good.  This is not an extension,\n+\t we'll still give an error when we build up the call; this just\n+\t helps us give a more helpful error message.  */\n+      rank1 = BAD_CONVERSION_RANK (ics1);\n+      rank2 = BAD_CONVERSION_RANK (ics2);\n+\n+      if (rank1 > rank2)\n \treturn -1;\n-      else if (ics1->user_conv_p < ics2->user_conv_p\n-\t       || ics1->rank < ics2->rank)\n+      else if (rank1 < rank2)\n \treturn 1;\n \n       /* We couldn't make up our minds; try to figure it out below.  */"}, {"sha": "ea6169e486c8d944f373afb83e5b446aaf7b5a10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef62ad4b8a7639969639eaf77efb69fdcb7491f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef62ad4b8a7639969639eaf77efb69fdcb7491f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cef62ad4b8a7639969639eaf77efb69fdcb7491f", "patch": "@@ -1,3 +1,7 @@\n+2010-06-26  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/explicit5.C: New.\n+\n 2010-06-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44393"}, {"sha": "88a47071db12edb1d3bde8774db7a816923d1474", "filename": "gcc/testsuite/g++.dg/cpp0x/explicit5.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef62ad4b8a7639969639eaf77efb69fdcb7491f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef62ad4b8a7639969639eaf77efb69fdcb7491f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fexplicit5.C?ref=cef62ad4b8a7639969639eaf77efb69fdcb7491f", "patch": "@@ -0,0 +1,25 @@\n+// test for extension of DR 899 to handle template ctors\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do run }\n+\n+int r = 1;\n+\n+struct C {\n+  C() { }\n+  template <class T = int> C(C&, T = 0) { r = 0; }\n+};\n+\n+C c;\n+\n+struct A\n+{\n+  explicit operator C&() const { return c; }\n+};\n+\n+int main()\n+{\n+  A a;\n+  C c2 (a);\n+\n+  return r;\n+}"}]}