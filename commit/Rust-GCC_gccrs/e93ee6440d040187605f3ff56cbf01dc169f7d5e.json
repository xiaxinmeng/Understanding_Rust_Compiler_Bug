{"sha": "e93ee6440d040187605f3ff56cbf01dc169f7d5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkzZWU2NDQwZDA0MDE4NzYwNWYzZmY1NmNiZjAxZGMxNjlmN2Q1ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-26T00:44:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-26T00:44:44Z"}, "message": "call.c (build_over_call): Use DECL_CONTEXT, not DECL_VIRTUAL_CONTEXT.\n\n\t* call.c (build_over_call): Use DECL_CONTEXT, not\n\tDECL_VIRTUAL_CONTEXT.\n\t* class.c (modify_vtable_entry): Don't mess with\n\tDECL_VIRTUAL_CONTEXT.\n\t(set_vindex): Remove.\n\t(set_primary_base): Remove vfuns_p parameter.\n\t(determine_primary_base): Likewise.\n\t(modify_all_vtables): Likewise.\n\t(layout_class_type): Likewise.  Adjust calls to other functions\n\taccordingly.\n\t(finish_struct_1): Adjust calls to modified functions.  Set\n\tDECL_VINDEX here.\n\t* cp-tree.h (lang_type_class): Remove vsize.\n\t(CLASSTYPE_VSIZE): Remove.\n\t(lang_decl): Remove thunks.\n\t(DECL_THUNKS): Adjust.\n\t(DECL_VIRTUAL_CONTEXT): Remove.\n\t(duplicate_decls): Don't copy it.\n\t* pt.c (build_template_decl): Don't set it.\n\t(tsubst_decl): Likewise.\n\t* typeck.c (expand_ptrmemfunc_cst): Don't use it.\n\n\t* g++.dg/lookup/ptrmem1.C: New test.\n\nFrom-SVN: r58548", "tree": {"sha": "4851d0f3f74a197c70c79513cd29892c5249e71a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4851d0f3f74a197c70c79513cd29892c5249e71a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e93ee6440d040187605f3ff56cbf01dc169f7d5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93ee6440d040187605f3ff56cbf01dc169f7d5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93ee6440d040187605f3ff56cbf01dc169f7d5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93ee6440d040187605f3ff56cbf01dc169f7d5e/comments", "author": null, "committer": null, "parents": [{"sha": "0fb53e681df209314cd78a791423bfd8476b8c78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb53e681df209314cd78a791423bfd8476b8c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb53e681df209314cd78a791423bfd8476b8c78"}], "stats": {"total": 168, "additions": 74, "deletions": 94}, "files": [{"sha": "d9e212a8d56d800eae6e9d98723dad26a16f5bc2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e93ee6440d040187605f3ff56cbf01dc169f7d5e", "patch": "@@ -6,6 +6,28 @@\n \n 2002-10-25  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* call.c (build_over_call): Use DECL_CONTEXT, not\n+\tDECL_VIRTUAL_CONTEXT.\n+\t* class.c (modify_vtable_entry): Don't mess with\n+\tDECL_VIRTUAL_CONTEXT.\n+\t(set_vindex): Remove.\n+\t(set_primary_base): Remove vfuns_p parameter.\n+\t(determine_primary_base): Likewise.\n+\t(modify_all_vtables): Likewise.\n+\t(layout_class_type): Likewise.  Adjust calls to other functions\n+\taccordingly.\n+\t(finish_struct_1): Adjust calls to modified functions.  Set\n+\tDECL_VINDEX here.\n+\t* cp-tree.h (lang_type_class): Remove vsize.\n+\t(CLASSTYPE_VSIZE): Remove.\n+\t(lang_decl): Remove thunks.\n+\t(DECL_THUNKS): Adjust.\n+\t(DECL_VIRTUAL_CONTEXT): Remove.\n+\t(duplicate_decls): Don't copy it.\n+\t* pt.c (build_template_decl): Don't set it.\n+\t(tsubst_decl): Likewise.\n+\t* typeck.c (expand_ptrmemfunc_cst): Don't use it.\n+\t\t\n \t* class.c (build_vtbl_initializer): Don't use build_vtable_entry.\n \t(build_vtable_entry): Remove.\n \t* cp-tree.h (BINFO_VIRTUALS): Expand documentation."}, {"sha": "4ec8d5e572285c09ecfeac8062a5a64d6f4cf735", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e93ee6440d040187605f3ff56cbf01dc169f7d5e", "patch": "@@ -4507,7 +4507,7 @@ build_over_call (cand, args, flags)\n     {\n       tree t, *p = &TREE_VALUE (converted_args);\n       tree binfo = lookup_base (TREE_TYPE (TREE_TYPE (*p)),\n-\t\t\t\tDECL_VIRTUAL_CONTEXT (fn),\n+\t\t\t\tDECL_CONTEXT (fn),\n \t\t\t\tba_any, NULL);\n       my_friendly_assert (binfo && binfo != error_mark_node, 20010730);\n       "}, {"sha": "82631615a6f23a0605a8d98aaa6a9c25ddf31d7b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 26, "deletions": 56, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e93ee6440d040187605f3ff56cbf01dc169f7d5e", "patch": "@@ -116,8 +116,8 @@ static int alter_access PARAMS ((tree, tree, tree));\n static void handle_using_decl PARAMS ((tree, tree));\n static void check_for_override PARAMS ((tree, tree));\n static tree dfs_modify_vtables PARAMS ((tree, void *));\n-static tree modify_all_vtables PARAMS ((tree, int *, tree));\n-static void determine_primary_base PARAMS ((tree, int *));\n+static tree modify_all_vtables PARAMS ((tree, tree));\n+static void determine_primary_base PARAMS ((tree));\n static void finish_struct_methods PARAMS ((tree));\n static void maybe_warn_about_overly_private_class PARAMS ((tree));\n static int field_decl_cmp PARAMS ((const tree *, const tree *));\n@@ -142,10 +142,10 @@ static void check_bases PARAMS ((tree, int *, int *, int *));\n static void check_bases_and_members (tree);\n static tree create_vtable_ptr (tree, tree *);\n static void include_empty_classes (record_layout_info);\n-static void layout_class_type (tree, int *, tree *);\n+static void layout_class_type (tree, tree *);\n static void fixup_pending_inline PARAMS ((tree));\n static void fixup_inline_methods PARAMS ((tree));\n-static void set_primary_base PARAMS ((tree, tree, int *));\n+static void set_primary_base PARAMS ((tree, tree));\n static void propagate_binfo_offsets PARAMS ((tree, tree, tree));\n static void layout_virtual_bases (record_layout_info, splay_tree);\n static tree dfs_set_offset_for_unshared_vbases PARAMS ((tree, void *));\n@@ -173,7 +173,6 @@ static bool layout_empty_base PARAMS ((tree, tree, splay_tree, tree));\n static void accumulate_vtbl_inits PARAMS ((tree, tree, tree, tree, tree));\n static tree dfs_accumulate_vtbl_inits PARAMS ((tree, tree, tree, tree,\n \t\t\t\t\t       tree));\n-static void set_vindex PARAMS ((tree, int *));\n static void build_rtti_vtbl_entries PARAMS ((tree, vtbl_init_data *));\n static void build_vcall_and_vbase_vtbl_entries PARAMS ((tree, \n \t\t\t\t\t\t\tvtbl_init_data *));\n@@ -738,37 +737,9 @@ modify_vtable_entry (t, binfo, fndecl, delta, virtuals)\n       BV_DELTA (v) = delta;\n       BV_VCALL_INDEX (v) = NULL_TREE;\n       BV_FN (v) = fndecl;\n-\n-      /* Now assign virtual dispatch information, if unset.  We can\n-\t dispatch this through any overridden base function.\n-\n-\t FIXME this can choose a secondary vtable if the primary is not\n-\t also lexically first, leading to useless conversions.\n-\t In the V3 ABI, there's no reason for DECL_VIRTUAL_CONTEXT to\n-\t ever be different from DECL_CONTEXT.  */\n-      if (TREE_CODE (DECL_VINDEX (fndecl)) != INTEGER_CST)\n-\t{\n-\t  DECL_VINDEX (fndecl) = DECL_VINDEX (base_fndecl);\n-\t  DECL_VIRTUAL_CONTEXT (fndecl) = DECL_VIRTUAL_CONTEXT (base_fndecl);\n-\t}\n     }\n }\n \n-/* Set DECL_VINDEX for DECL.  VINDEX_P is the number of virtual\n-   functions present in the vtable so far.  */\n-\n-static void\n-set_vindex (decl, vfuns_p)\n-     tree decl;\n-     int *vfuns_p;\n-{\n-  int vindex;\n-\n-  vindex = *vfuns_p;\n-  *vfuns_p += (TARGET_VTABLE_USES_DESCRIPTORS\n-\t       ? TARGET_VTABLE_USES_DESCRIPTORS : 1);\n-  DECL_VINDEX (decl) = build_shared_int_cst (vindex);\n-}\n \f\n /* Add method METHOD to class TYPE.  If ERROR_P is true, we are adding\n    the method after the class has already been defined because a\n@@ -1577,10 +1548,9 @@ mark_primary_bases (type)\n /* Make the BINFO the primary base of T.  */\n \n static void\n-set_primary_base (t, binfo, vfuns_p)\n+set_primary_base (t, binfo)\n      tree t;\n      tree binfo;\n-     int *vfuns_p;\n {\n   tree basetype;\n \n@@ -1590,15 +1560,13 @@ set_primary_base (t, binfo, vfuns_p)\n   TYPE_BINFO_VIRTUALS (t) = TYPE_BINFO_VIRTUALS (basetype);\n   TYPE_VFIELD (t) = TYPE_VFIELD (basetype);\n   CLASSTYPE_RTTI (t) = CLASSTYPE_RTTI (basetype);\n-  *vfuns_p = CLASSTYPE_VSIZE (basetype);\n }\n \n /* Determine the primary class for T.  */\n \n static void\n-determine_primary_base (t, vfuns_p)\n+determine_primary_base (t)\n      tree t;\n-     int *vfuns_p;\n {\n   int i, n_baseclasses = CLASSTYPE_N_BASECLASSES (t);\n   tree vbases;\n@@ -1630,7 +1598,7 @@ determine_primary_base (t, vfuns_p)\n \n \t  if (!CLASSTYPE_HAS_PRIMARY_BASE_P (t))\n \t    {\n-\t      set_primary_base (t, base_binfo, vfuns_p);\n+\t      set_primary_base (t, base_binfo);\n \t      CLASSTYPE_VFIELDS (t) = copy_list (CLASSTYPE_VFIELDS (basetype));\n \t    }\n \t  else\n@@ -1732,7 +1700,7 @@ determine_primary_base (t, vfuns_p)\n       /* If we've got a primary base, use it.  */\n       if (candidate)\n \t{\n-\t  set_primary_base (t, candidate, vfuns_p);\n+\t  set_primary_base (t, candidate);\n \t  CLASSTYPE_VFIELDS (t) \n \t    = copy_list (CLASSTYPE_VFIELDS (BINFO_TYPE (candidate)));\n \t}\t\n@@ -2544,9 +2512,8 @@ dfs_modify_vtables (binfo, data)\n    should therefore be appended to the end of the vtable for T.  */\n \n static tree\n-modify_all_vtables (t, vfuns_p, virtuals)\n+modify_all_vtables (t, virtuals)\n      tree t;\n-     int *vfuns_p;\n      tree virtuals;\n {\n   tree binfo = TYPE_BINFO (t);\n@@ -2570,12 +2537,6 @@ modify_all_vtables (t, vfuns_p, virtuals)\n       if (!value_member (fn, BINFO_VIRTUALS (binfo))\n \t  || DECL_VINDEX (fn) == error_mark_node)\n \t{\n-\t  /* Set the vtable index.  */\n-\t  set_vindex (fn, vfuns_p);\n-\t  /* We don't need to convert to a base class when calling\n-\t     this function.  */\n-\t  DECL_VIRTUAL_CONTEXT (fn) = t;\n-\n \t  /* We don't need to adjust the `this' pointer when\n \t     calling this function.  */\n \t  BV_DELTA (*fnsp) = integer_zero_node;\n@@ -2588,7 +2549,7 @@ modify_all_vtables (t, vfuns_p, virtuals)\n \t/* We've already got an entry for this function.  Skip it.  */\n \t*fnsp = TREE_CHAIN (*fnsp);\n     }\n-  \n+\n   return virtuals;\n }\n \n@@ -4850,7 +4811,7 @@ include_empty_classes (record_layout_info rli)\n    pointer.  Accumulate declared virtual functions on VIRTUALS_P.  */\n \n static void\n-layout_class_type (tree t, int *vfuns_p, tree *virtuals_p)\n+layout_class_type (tree t, tree *virtuals_p)\n {\n   tree non_static_data_members;\n   tree field;\n@@ -4874,7 +4835,7 @@ layout_class_type (tree t, int *vfuns_p, tree *virtuals_p)\n \n   /* If possible, we reuse the virtual function table pointer from one\n      of our base classes.  */\n-  determine_primary_base (t, vfuns_p);\n+  determine_primary_base (t);\n \n   /* Create a pointer to our virtual function table.  */\n   vptr = create_vtable_ptr (t, virtuals_p);\n@@ -5145,7 +5106,6 @@ finish_struct_1 (t)\n      tree t;\n {\n   tree x;\n-  int vfuns;\n   /* A TREE_LIST.  The TREE_VALUE of each node is a FUNCTION_DECL.  */\n   tree virtuals = NULL_TREE;\n   int n_fields = 0;\n@@ -5166,7 +5126,6 @@ finish_struct_1 (t)\n   TYPE_SIZE (t) = NULL_TREE;\n   CLASSTYPE_GOT_SEMICOLON (t) = 0;\n   CLASSTYPE_PRIMARY_BINFO (t) = NULL_TREE;\n-  vfuns = 0;\n   CLASSTYPE_RTTI (t) = NULL_TREE;\n \n   fixup_inline_methods (t);\n@@ -5182,7 +5141,7 @@ finish_struct_1 (t)\n   check_bases_and_members (t);\n \n   /* Layout the class itself.  */\n-  layout_class_type (t, &vfuns, &virtuals);\n+  layout_class_type (t, &virtuals);\n \n   /* Make sure that we get our own copy of the vfield FIELD_DECL.  */\n   vfield = TYPE_VFIELD (t);\n@@ -5206,7 +5165,7 @@ finish_struct_1 (t)\n   else\n     my_friendly_assert (!vfield || DECL_FIELD_CONTEXT (vfield) == t, 20010726);\n \n-  virtuals = modify_all_vtables (t, &vfuns, nreverse (virtuals));\n+  virtuals = modify_all_vtables (t, nreverse (virtuals));\n \n   /* If we created a new vtbl pointer for this class, add it to the\n      list.  */\n@@ -5246,16 +5205,27 @@ finish_struct_1 (t)\n \n   if (TYPE_CONTAINS_VPTR_P (t))\n     {\n+      int vindex;\n+      tree fn;\n+\n       if (TYPE_BINFO_VTABLE (t))\n \tmy_friendly_assert (DECL_VIRTUAL_P (TYPE_BINFO_VTABLE (t)),\n \t\t\t    20000116);\n       if (!CLASSTYPE_HAS_PRIMARY_BASE_P (t))\n \tmy_friendly_assert (TYPE_BINFO_VIRTUALS (t) == NULL_TREE,\n \t\t\t    20000116);\n \n-      CLASSTYPE_VSIZE (t) = vfuns;\n       /* Add entries for virtual functions introduced by this class.  */\n       TYPE_BINFO_VIRTUALS (t) = chainon (TYPE_BINFO_VIRTUALS (t), virtuals);\n+\n+      /* Set DECL_VINDEX for all functions declared in this class.  */\n+      for (vindex = 0, fn = BINFO_VIRTUALS (TYPE_BINFO (t)); \n+\t   fn; \n+\t   fn = TREE_CHAIN (fn), \n+\t     vindex += (TARGET_VTABLE_USES_DESCRIPTORS\n+\t\t\t? TARGET_VTABLE_USES_DESCRIPTORS : 1))\n+\tif (TREE_CODE (DECL_VINDEX (BV_FN (fn))) != INTEGER_CST)\n+\t  DECL_VINDEX (BV_FN (fn)) = build_shared_int_cst (vindex);\n     }\n \n   finish_struct_bits (t);"}, {"sha": "e1544fd6428c959175b0db2ab0791931cbf2936f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e93ee6440d040187605f3ff56cbf01dc169f7d5e", "patch": "@@ -1150,8 +1150,6 @@ struct lang_type_class GTY(())\n      remove a flag.  */\n   unsigned dummy : 4;\n \n-  int vsize;\n-\n   tree primary_base;\n   tree vfields;\n   tree vbases;\n@@ -1375,10 +1373,6 @@ struct lang_type GTY(())\n #define CLASSTYPE_PRIMARY_BINFO(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->primary_base)\n \n-/* The number of virtual functions present in this class' virtual\n-   function table.  */\n-#define CLASSTYPE_VSIZE(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->vsize)\n-\n /* A chain of BINFOs for the direct and indirect virtual base classes\n    that this type uses in a post-order depth-first left-to-right\n    order.  (In other words, these bases appear in the order that they\n@@ -1766,13 +1760,10 @@ struct lang_decl GTY(())\n       {\n \ttree befriending_classes;\n \t\n-\t/* For a virtual FUNCTION_DECL, this is DECL_VIRTUAL_CONTEXT.  For a\n-\t   non-virtual FUNCTION_DECL, this is DECL_FRIEND_CONTEXT.  */\n+\t/* For a non-virtual FUNCTION_DECL, this is\n+\t   DECL_FRIEND_CONTEXT.  For a virtual FUNCTION_DECL for which\n+\t   DECL_THUNK_P does not hold, this is DECL_THUNKS.  */\n \ttree context;\n-\t\n-\t/* In a FUNCTION_DECL for which DECL_THUNK_P does not hold, this\n-\t   is DECL_THUNKS.  */\n-\ttree thunks;\n \n \t/* In a FUNCTION_DECL, this is DECL_CLONED_FUNCTION.  */\n \ttree cloned_function;\n@@ -2060,7 +2051,7 @@ struct lang_decl GTY(())\n /* The thunks associated with NODE, a FUNCTION_DECL that is not itself\n    a thunk.  */\n #define DECL_THUNKS(NODE) \\\n-  (DECL_LANG_SPECIFIC (NODE)->u.f.thunks)\n+  (DECL_LANG_SPECIFIC (NODE)->u.f.context)\n \n /* Nonzero if NODE is a thunk, rather than an ordinary function.  */\n #define DECL_THUNK_P(NODE)\t\t\t\\\n@@ -2114,11 +2105,6 @@ struct lang_decl GTY(())\n   (DECL_CONTEXT (NODE) ? DECL_CONTEXT (NODE) : global_namespace)\n #define FROB_CONTEXT(NODE)   ((NODE) == global_namespace ? NULL_TREE : (NODE))\n \n-/* For a virtual function, the base where we find its vtable entry.\n-   For a non-virtual function, the base where it is defined.  */\n-#define DECL_VIRTUAL_CONTEXT(NODE) \\\n-  (DECL_LANG_SPECIFIC (NODE)->u.f.context)\n-\n /* 1 iff NODE has namespace scope, including the global namespace.  */\n #define DECL_NAMESPACE_SCOPE_P(NODE)\t\t\t\t\\\n   (!DECL_TEMPLATE_PARM_P (NODE)\t\t\t\t\t\\"}, {"sha": "e3b7b5b773a829bd0716297553d8c01275eed514", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e93ee6440d040187605f3ff56cbf01dc169f7d5e", "patch": "@@ -3374,8 +3374,6 @@ duplicate_decls (newdecl, olddecl)\n \t definition.  */\n       if (DECL_VINDEX (olddecl))\n \tDECL_VINDEX (newdecl) = DECL_VINDEX (olddecl);\n-      if (DECL_VIRTUAL_CONTEXT (olddecl))\n-\tDECL_VIRTUAL_CONTEXT (newdecl) = DECL_VIRTUAL_CONTEXT (olddecl);\n       if (DECL_CONTEXT (olddecl))\n \tDECL_CONTEXT (newdecl) = DECL_CONTEXT (olddecl);\n       DECL_STATIC_CONSTRUCTOR (newdecl) |= DECL_STATIC_CONSTRUCTOR (olddecl);\n@@ -3412,12 +3410,9 @@ duplicate_decls (newdecl, olddecl)\n \n       if (newtype != error_mark_node && oldtype != error_mark_node\n \t  && TYPE_LANG_SPECIFIC (newtype) && TYPE_LANG_SPECIFIC (oldtype))\n-\t{\n-\t  CLASSTYPE_VSIZE (newtype) = CLASSTYPE_VSIZE (oldtype);\n-\t  CLASSTYPE_FRIEND_CLASSES (newtype)\n-\t    = CLASSTYPE_FRIEND_CLASSES (oldtype);\n-\t}\n-\n+\tCLASSTYPE_FRIEND_CLASSES (newtype)\n+\t  = CLASSTYPE_FRIEND_CLASSES (oldtype);\n+\\\n       DECL_ORIGINAL_TYPE (newdecl) = DECL_ORIGINAL_TYPE (olddecl);\n     }\n "}, {"sha": "183a360724f6c70e5a7002b986dd122592ade325", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e93ee6440d040187605f3ff56cbf01dc169f7d5e", "patch": "@@ -2106,8 +2106,6 @@ build_template_decl (decl, parms)\n   DECL_CONTEXT (tmpl) = DECL_CONTEXT (decl);\n   if (DECL_LANG_SPECIFIC (decl))\n     {\n-      if (CAN_HAVE_FULL_LANG_DECL_P (decl))\n-\tDECL_VIRTUAL_CONTEXT (tmpl) = DECL_VIRTUAL_CONTEXT (decl);\n       DECL_STATIC_FUNCTION_P (tmpl) = DECL_STATIC_FUNCTION_P (decl);\n       DECL_CONSTRUCTOR_P (tmpl) = DECL_CONSTRUCTOR_P (decl);\n       DECL_DESTRUCTOR_P (tmpl) = DECL_DESTRUCTOR_P (decl);\n@@ -5777,10 +5775,6 @@ tsubst_decl (t, args, type, complain)\n \t  = tsubst_aggr_type (DECL_CONTEXT (t), args, \n \t\t\t      complain, in_decl, \n \t\t\t      /*entering_scope=*/1); \n-\tDECL_VIRTUAL_CONTEXT (r) \n-\t  = tsubst_aggr_type (DECL_VIRTUAL_CONTEXT (t), args, \n-\t\t\t      complain, in_decl, \n-\t\t\t      /*entering_scope=*/1);\n \tDECL_TEMPLATE_INFO (r) = build_tree_list (t, args);\n \n \tif (TREE_CODE (decl) == TYPE_DECL)\n@@ -5951,10 +5945,6 @@ tsubst_decl (t, args, type, complain)\n \tSET_DECL_RTL (r, NULL_RTX);\n \n \tDECL_CONTEXT (r) = ctx;\n-\tDECL_VIRTUAL_CONTEXT (r)\n-\t  = tsubst_aggr_type (DECL_VIRTUAL_CONTEXT (t), args, \n-\t\t\t      complain, t,\n-\t\t\t      /*entering_scope=*/1);\n \n \tif (member && DECL_CONV_FN_P (r)) \n \t  /* Type-conversion operator.  Reconstruct the name, in"}, {"sha": "9b4fbf600e8ccbe77d9d2752b694d5c56f213711", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e93ee6440d040187605f3ff56cbf01dc169f7d5e", "patch": "@@ -5695,7 +5695,7 @@ expand_ptrmemfunc_cst (cst, delta, pfn)\n       /* If we're dealing with a virtual function, we have to adjust 'this'\n          again, to point to the base which provides the vtable entry for\n          fn; the call will do the opposite adjustment.  */\n-      tree orig_class = DECL_VIRTUAL_CONTEXT (fn);\n+      tree orig_class = DECL_CONTEXT (fn);\n       tree binfo = binfo_or_else (orig_class, fn_class);\n       *delta = fold (build (PLUS_EXPR, TREE_TYPE (*delta),\n \t\t\t    *delta, BINFO_OFFSET (binfo)));"}, {"sha": "adb6613cb239ffc753931760270ff8195d4bc459", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e93ee6440d040187605f3ff56cbf01dc169f7d5e", "patch": "@@ -4,6 +4,8 @@\n \n 2002-10-25  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* g++.dg/lookup/ptrmem1.C: New test.\n+\n \t* g++.dg/abi/vthunk2.C: New test.\n \n 2002-10-25  Zack Weinberg  <zack@codesourcery.com>"}, {"sha": "5bdef2621fea2f730ea634fa59439b346d3fe7c0", "filename": "gcc/testsuite/g++.dg/lookup/ptrmem1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fptrmem1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e93ee6440d040187605f3ff56cbf01dc169f7d5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fptrmem1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fptrmem1.C?ref=e93ee6440d040187605f3ff56cbf01dc169f7d5e", "patch": "@@ -0,0 +1,15 @@\n+struct A {\n+  virtual void f ();\n+};\n+\n+struct B : public A {\n+};\n+\n+struct C : public A {\n+};\n+\n+struct D : public B, C {\n+  virtual void f (); \n+};\n+\n+void (D::*p)() = &D::f;"}]}