{"sha": "6b1184bab6d4f38dbab3a970634510bf9fc675b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIxMTg0YmFiNmQ0ZjM4ZGJhYjNhOTcwNjM0NTEwYmY5ZmM2NzViMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-08-29T07:45:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-08-29T07:45:59Z"}, "message": "re PR tree-optimization/57685 (GCC stuck in an infinite loop)\n\n2013-08-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/57685\n\t* tree-vrp.c (register_edge_assert_for_1): Recurse only for\n\tsingle-use operands to avoid exponential complexity.\n\n\t* gcc.dg/torture/pr57685.c: New testcase.\n\nFrom-SVN: r202068", "tree": {"sha": "85c5a4d586c56556ab70286081d0e775cca3399e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85c5a4d586c56556ab70286081d0e775cca3399e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b1184bab6d4f38dbab3a970634510bf9fc675b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1184bab6d4f38dbab3a970634510bf9fc675b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b1184bab6d4f38dbab3a970634510bf9fc675b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1184bab6d4f38dbab3a970634510bf9fc675b2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ec974d90fb0920d58ed5f987e738f7d069eb3f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec974d90fb0920d58ed5f987e738f7d069eb3f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec974d90fb0920d58ed5f987e738f7d069eb3f4"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "2444b92cda73b807cebaaa7705d9e16ab7bf10e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1184bab6d4f38dbab3a970634510bf9fc675b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1184bab6d4f38dbab3a970634510bf9fc675b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b1184bab6d4f38dbab3a970634510bf9fc675b2", "patch": "@@ -1,3 +1,9 @@\n+2013-08-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57685\n+\t* tree-vrp.c (register_edge_assert_for_1): Recurse only for\n+\tsingle-use operands to avoid exponential complexity.\n+\n 2013-08-28  Dehao Chen  <dehao@google.com>\n \n \t* ipa-inline.c (edge_badness): Fix integer underflow."}, {"sha": "9b9ff4240caa65725456ea942ac5fb337637b0d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1184bab6d4f38dbab3a970634510bf9fc675b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1184bab6d4f38dbab3a970634510bf9fc675b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b1184bab6d4f38dbab3a970634510bf9fc675b2", "patch": "@@ -1,3 +1,8 @@\n+2013-08-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57685\n+\t* gcc.dg/torture/pr57685.c: New testcase.\n+\n 2013-08-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58255"}, {"sha": "75973f2a493c7904dd9e7183fddb139585b8e433", "filename": "gcc/testsuite/gcc.dg/torture/pr57685.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1184bab6d4f38dbab3a970634510bf9fc675b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57685.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1184bab6d4f38dbab3a970634510bf9fc675b2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57685.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57685.c?ref=6b1184bab6d4f38dbab3a970634510bf9fc675b2", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+\n+unsigned f(void)\n+{\n+  unsigned a;\n+  int b, c, d, e;\n+\n+  for(c = 27; c < 40; c++)\n+    b |= d |= b;\n+\n+  if(b)\n+    a = e;\n+\n+  return a;\n+}"}, {"sha": "d5548ff55eb3d8d554f02553fd2bcdf2dd7c7787", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1184bab6d4f38dbab3a970634510bf9fc675b2/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1184bab6d4f38dbab3a970634510bf9fc675b2/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=6b1184bab6d4f38dbab3a970634510bf9fc675b2", "patch": "@@ -5410,10 +5410,14 @@ register_edge_assert_for_1 (tree op, enum tree_code code,\n \t       && gimple_assign_rhs_code (op_def) == BIT_IOR_EXPR))\n     {\n       /* Recurse on each operand.  */\n-      retval |= register_edge_assert_for_1 (gimple_assign_rhs1 (op_def),\n-\t\t\t\t\t    code, e, bsi);\n-      retval |= register_edge_assert_for_1 (gimple_assign_rhs2 (op_def),\n-\t\t\t\t\t    code, e, bsi);\n+      tree op0 = gimple_assign_rhs1 (op_def);\n+      tree op1 = gimple_assign_rhs2 (op_def);\n+      if (TREE_CODE (op0) == SSA_NAME\n+\t  && has_single_use (op0))\n+\tretval |= register_edge_assert_for_1 (op0, code, e, bsi);\n+      if (TREE_CODE (op1) == SSA_NAME\n+\t  && has_single_use (op1))\n+\tretval |= register_edge_assert_for_1 (op1, code, e, bsi);\n     }\n   else if (gimple_assign_rhs_code (op_def) == BIT_NOT_EXPR\n \t   && TYPE_PRECISION (TREE_TYPE (gimple_assign_lhs (op_def))) == 1)"}]}