{"sha": "438aac594e1c5ad32b787e8753b3893044ecf26f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM4YWFjNTk0ZTFjNWFkMzJiNzg3ZTg3NTNiMzg5MzA0NGVjZjI2Zg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-08T00:16:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-08T00:16:44Z"}, "message": "Daily bump.", "tree": {"sha": "89015410668ee2aa42129b127dd192a9cb9bdab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89015410668ee2aa42129b127dd192a9cb9bdab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/438aac594e1c5ad32b787e8753b3893044ecf26f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438aac594e1c5ad32b787e8753b3893044ecf26f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/438aac594e1c5ad32b787e8753b3893044ecf26f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438aac594e1c5ad32b787e8753b3893044ecf26f/comments", "author": null, "committer": null, "parents": [{"sha": "9858cd1a6827ee7a928318acb5e86389f79b4012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9858cd1a6827ee7a928318acb5e86389f79b4012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9858cd1a6827ee7a928318acb5e86389f79b4012"}], "stats": {"total": 218, "additions": 217, "deletions": 1}, "files": [{"sha": "b9001dd0f0a62db84ed744c6c425bd5be242c27d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=438aac594e1c5ad32b787e8753b3893044ecf26f", "patch": "@@ -1,3 +1,123 @@\n+2021-06-07  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (class sbr_sparse_bitmap): New.\n+\t(sbr_sparse_bitmap::sbr_sparse_bitmap): New.\n+\t(sbr_sparse_bitmap::bitmap_set_quad): New.\n+\t(sbr_sparse_bitmap::bitmap_get_quad): New.\n+\t(sbr_sparse_bitmap::set_bb_range): New.\n+\t(sbr_sparse_bitmap::get_bb_range): New.\n+\t(sbr_sparse_bitmap::bb_range_p): New.\n+\t(block_range_cache::block_range_cache): initialize bitmap obstack.\n+\t(block_range_cache::~block_range_cache): Destruct obstack.\n+\t(block_range_cache::set_bb_range): Decide when to utilze the\n+\tsparse on entry cache.\n+\t* gimple-range-cache.h (block_range_cache): Add bitmap obstack.\n+\t* params.opt (-param=evrp-sparse-threshold): New.\n+\n+2021-06-07  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* bitmap.c (bitmap_set_aligned_chunk): New.\n+\t(bitmap_get_aligned_chunk): New.\n+\t(test_aligned_chunk): New.\n+\t(bitmap_c_tests): Call test_aligned_chunk.\n+\t* bitmap.h (bitmap_set_aligned_chunk, bitmap_get_aligned_chunk): New.\n+\n+2021-06-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* config/i386/i386-expand.c (ix86_expand_vector_init_duplicate):\n+\tHandle V4QI mode.\n+\t(ix86_expand_vector_init_one_nonzero): Ditto.\n+\t(ix86_expand_vector_init_one_var): Ditto.\n+\t(ix86_expand_vector_init_general): Ditto.\n+\t* config/i386/mmx.md (vec_initv4qiqi): New expander.\n+\n+2021-06-07  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/movepush.md: Change most _clobber_flags\n+\tpatterns to instead use <cczn> subst.\n+\t(movsi_cczn): New pattern with usable CC cases split out.\n+\t(movsi_h8sx_cczn): Likewise.\n+\n+2021-06-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* common/common-target.def: Split long lines and replace them\n+\twith '\\n\\'.\n+\t* target.def: Likewise.\n+\t* doc/tm.texi: Re-generated.\n+\n+2021-06-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100887\n+\t* fold-const.c (fold_read_from_vector): Return NULL if trying to\n+\tread from a CONSTRUCTOR with vector type elements.\n+\n+2021-06-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/100898\n+\t* tree-inline.c (copy_bb): Only use gimple_call_arg_ptr if memcpy\n+\tshould copy any arguments.  Don't call gimple_call_num_args\n+\ton id->call_stmt or call_stmt more than once.\n+\n+2021-06-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/100885\n+\t* config/i386/sse.md (*sse4_1_zero_extendv8qiv8hi2_3): Refine\n+\tconstraints.\n+\t(<insn>v4siv4di2): Delete constraints for define_expand.\n+\n+2021-06-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/82735\n+\t* config/i386/i386-expand.c (ix86_expand_builtin): Remove\n+\tassignment of cfun->machine->has_explicit_vzeroupper.\n+\t* config/i386/i386-features.c\n+\t(ix86_add_reg_usage_to_vzerouppers): Delete.\n+\t(ix86_add_reg_usage_to_vzeroupper): Ditto.\n+\t(rest_of_handle_insert_vzeroupper): Remove\n+\tix86_add_reg_usage_to_vzerouppers, add df_analyze at the end\n+\tof the function.\n+\t(gate): Remove cfun->machine->has_explicit_vzeroupper.\n+\t* config/i386/i386-protos.h (ix86_expand_avx_vzeroupper):\n+\tDeclared.\n+\t* config/i386/i386.c (ix86_insn_callee_abi): New function.\n+\t(ix86_initialize_callee_abi): Ditto.\n+\t(ix86_expand_avx_vzeroupper): Ditto.\n+\t(ix86_hard_regno_call_part_clobbered): Adjust for vzeroupper\n+\tABI.\n+\t(TARGET_INSN_CALLEE_ABI): Define as ix86_insn_callee_abi.\n+\t(ix86_emit_mode_set): Call ix86_expand_avx_vzeroupper\n+\tdirectly.\n+\t* config/i386/i386.h (struct GTY(()) machine_function): Delete\n+\thas_explicit_vzeroupper.\n+\t* config/i386/i386.md (enum unspec): New member\n+\tUNSPEC_CALLEE_ABI.\n+\t(ABI_DEFAULT,ABI_VZEROUPPER,ABI_UNKNOWN): New\n+\tdefine_constants for insn callee abi index.\n+\t* config/i386/predicates.md (vzeroupper_pattern): Adjust.\n+\t* config/i386/sse.md (UNSPECV_VZEROUPPER): Deleted.\n+\t(avx_vzeroupper): Call ix86_expand_avx_vzeroupper.\n+\t(*avx_vzeroupper): Rename to ..\n+\t(avx_vzeroupper_callee_abi): .. this, and adjust pattern as\n+\tcall_insn which has a special vzeroupper ABI.\n+\t(*avx_vzeroupper_1): Deleted.\n+\n+2021-06-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/82735\n+\t* df-scan.c (df_get_call_refs): When call_insn is a fake call,\n+\tit won't use stack pointer reg.\n+\t* final.c (leaf_function_p): When call_insn is a fake call, it\n+\twon't affect caller as a leaf function.\n+\t* reg-stack.c (callee_clobbers_any_stack_reg): New.\n+\t(subst_stack_regs): When call_insn doesn't clobber any stack\n+\treg, don't clear the arguments.\n+\t* rtl.c (shallow_copy_rtx): Don't clear flag used when orig is\n+\ta insn.\n+\t* shrink-wrap.c (requires_stack_frame_p): No need for stack\n+\tframe for a fake call.\n+\t* rtl.h (FAKE_CALL_P): New macro.\n+\n 2021-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc-protos.h (order_regs_for_local_alloc): Rename"}, {"sha": "504c3fac9ab10ac3e1692407410d10e973652cef", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=438aac594e1c5ad32b787e8753b3893044ecf26f", "patch": "@@ -1 +1 @@\n-20210607\n+20210608"}, {"sha": "8c9b355c464d983e4a01a6cfb817f7388d8a8d3e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=438aac594e1c5ad32b787e8753b3893044ecf26f", "patch": "@@ -1,3 +1,8 @@\n+2021-06-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-target.def: Split long lines and replace them\n+\twith '\\n\\'.\n+\n 2021-06-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/100783"}, {"sha": "27f88380f9374f70919397a273de3b6f6612c9b8", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=438aac594e1c5ad32b787e8753b3893044ecf26f", "patch": "@@ -1,3 +1,9 @@\n+2021-06-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR c/100920\n+\t* c-typeck.c (convert_for_assignment): Test fndecl_built_in_p to\n+\tspot built-in functions.\n+\n 2021-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/100902"}, {"sha": "225b891700e88a58639d7ea0f10ad76ffb8d87f4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=438aac594e1c5ad32b787e8753b3893044ecf26f", "patch": "@@ -1,3 +1,10 @@\n+2021-06-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100918\n+\t* parser.c (cp_parser_lookup_name): Check access of the lookup\n+\tresult before we potentially adjust an injected-class-name to\n+\tits TEMPLATE_DECL.\n+\n 2021-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/100902"}, {"sha": "6a3d66ef3cc91c3f09bd46399bef9fe6811f9d60", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=438aac594e1c5ad32b787e8753b3893044ecf26f", "patch": "@@ -1,3 +1,8 @@\n+2021-06-07  Bernd Edlinger  <bernd.edlinger@softing.com>\n+\n+\t* Make-lang.in (cc1obj-checksum.c): For stage-final re-use\n+\tthe checksum from the previous stage.\n+\n 2021-05-20  Indu Bhagat  <indu.bhagat@oracle.com>\n \n \t* objc-act.c (synth_module_prologue): Use uint32_t instead of enum"}, {"sha": "f3ef33a1e48f9cfae869ef3207b6a3a839f5e969", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=438aac594e1c5ad32b787e8753b3893044ecf26f", "patch": "@@ -1,3 +1,8 @@\n+2021-06-07  Bernd Edlinger  <bernd.edlinger@softing.com>\n+\n+\t* Make-lang.in (cc1objplus-checksum.c): For stage-final re-use\n+\tthe checksum from the previous stage.\n+\n 2021-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in (cc1objplus-checksum, cc1objplus$(exeext): Add"}, {"sha": "272bad0c1243001977573e189be9bd1cf805bdf6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438aac594e1c5ad32b787e8753b3893044ecf26f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=438aac594e1c5ad32b787e8753b3893044ecf26f", "patch": "@@ -1,3 +1,55 @@\n+2021-06-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* gcc.target/i386/pr100637-5b.c: New test.\n+\t* gcc.target/i386/pr100637-5w.c: Ditto.\n+\n+2021-06-07  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/82735\n+\t* gcc.target/i386/pr82735-3.c: Don't compile for x32.\n+\t* gcc.target/i386/pr82735-4.c: Likewise.\n+\t* gcc.target/i386/pr82735-5.c: Likewise.\n+\n+2021-06-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/sso-14.c: Adjust.\n+\n+2021-06-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100918\n+\t* g++.dg/template/access38.C: New test.\n+\n+2021-06-07  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/100885\n+\t* g++.target/i386/pr100885.C (_mm_set_epi64): Cast __m64 to long\n+\tlong.\n+\n+2021-06-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/100887\n+\t* gcc.dg/pr100887.c: New test.\n+\n+2021-06-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/100898\n+\t* g++.dg/ext/va-arg-pack-3.C: New test.\n+\n+2021-06-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/100885\n+\t* g++.target/i386/pr100885.C: New test.\n+\n+2021-06-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/82735\n+\t* gcc.target/i386/pr82735-1.c: New test.\n+\t* gcc.target/i386/pr82735-2.c: New test.\n+\t* gcc.target/i386/pr82735-3.c: New test.\n+\t* gcc.target/i386/pr82735-4.c: New test.\n+\t* gcc.target/i386/pr82735-5.c: New test.\n+\n 2021-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/gomp/scan-1.c: New test."}, {"sha": "06aabc5f0500a5590a7476cb04be00a1e4a1ea1a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438aac594e1c5ad32b787e8753b3893044ecf26f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438aac594e1c5ad32b787e8753b3893044ecf26f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=438aac594e1c5ad32b787e8753b3893044ecf26f", "patch": "@@ -1,3 +1,19 @@\n+2021-06-07  Avi Kivity  <avi@scylladb.com>\n+\n+\tPR libstdc++/100900\n+\t* include/std/ranges (elements_view::__iter_cat::_S_iter_cat):\n+\tAdd missing typename.\n+\n+2021-06-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98842\n+\t* include/std/optional (operator<=>(const optional<T>& const U&)):\n+\tAdd missing constraint and add workaround for template\n+\trecursion.\n+\t* testsuite/20_util/optional/relops/three_way.cc: Check that\n+\ttype without equality comparison cannot be compared when wrapped\n+\tin std::optional.\n+\n 2021-06-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/100824"}]}