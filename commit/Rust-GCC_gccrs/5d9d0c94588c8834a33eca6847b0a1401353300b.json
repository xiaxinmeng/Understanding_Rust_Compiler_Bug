{"sha": "5d9d0c94588c8834a33eca6847b0a1401353300b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5ZDBjOTQ1ODhjODgzNGEzM2VjYTY4NDdiMGExNDAxMzUzMzAwYg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-06-22T20:15:46Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-06-22T20:57:19Z"}, "message": "rs6000: Rename future to power10\n\nThis renames the command line options, the internal names, and mentions\nin the comments, from \"future\" to \"power10\".  Also, the file \"future.md\"\nis renamed.\n\nThe predefined user macro _ARCH_PWR_FUTURE is renamed to _ARCH_PWR10.\n\n\"Future architecture\" is renamed to \"ISA 3.1\".\n\n2020-06-22  Segher Boessenkool  <segher@kernel.crashing.org>\n\ngcc/ChangeLog:\n\n\t* config/rs6000/altivec.h: Use _ARCH_PWR10, not _ARCH_PWR_FUTURE.\n\tUpdate comment for ISA 3.1.\n\t* config/rs6000/altivec.md: Use TARGET_POWER10, not TARGET_FUTURE.\n\t* config/rs6000/driver-rs6000.c (asm_names): Use -mpwr10 for power10\n\ton AIX, and -mpower10 elsewhere.\n\t* config/rs6000/future.md: Delete.\n\t* config/rs6000/linux64.h: Update comments.  Use TARGET_POWER10, not\n\tTARGET_FUTURE.\n\t* config/rs6000/power10.md: New file.\n\t* config/rs6000/ppc-auxv.h: Use PPC_PLATFORM_POWER10, not\n\tPPC_PLATFORM_FUTURE.\n\t* config/rs6000/rs6000-builtin.def: Update comments.  Use BU_P10V_*\n\tnames instead of BU_FUTURE_V_* names.  Use RS6000_BTM_P10 instead of\n\tRS6000_BTM_FUTURE.  Use P10_BUILTIN_* instead of FUTURE_BUILTIN_*.\n\tUse BU_P10_* instead of BU_FUTURE_*.\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Define\n\t_ARCH_PWR10 instead of _ARCH_PWR_FUTURE.\n\t(altivec_resolve_overloaded_builtin): Use P10_BUILTIN_VEC_XXEVAL, not\n\tFUTURE_BUILTIN_VEC_XXEVAL.\n\t* config/rs6000/rs6000-call.c: Use P10_BUILTIN_*, not FUTURE_BUILTIN_*.\n\tUpdate compiler messages.\n\t* config/rs6000/rs6000-cpus.def: Update comments.  Use ISA_3_1_*, not\n\tISA_FUTURE_*.  Use OPTION_MASK_POWER10, not OPTION_MASK_FUTURE.\n\t* config/rs6000/rs6000-opts.h: Use PROCESSOR_POWER10, not\n\tPROCESSOR_FUTURE.\n\t* config/rs6000/rs6000-string.c: Ditto.\n\t* config/rs6000/rs6000-tables.opt (rs6000_cpu_opt_value): Use \"power10\"\n\tinstead of \"future\", reorder it to right after \"power9\".\n\t* config/rs6000/rs6000.c: Update comments.  Use OPTION_MASK_POWER10,\n\tnot OPTION_MASK_FUTURE.  Use TARGET_POWER10, not TARGET_FUTURE.  Use\n\tRS6000_BTM_P10, not RS6000_BTM_FUTURE.  Update compiler messages.\n\tUse PROCESSOR_POWER10, not PROCESSOR_FUTURE.  Use ISA_3_1_MASKS_SERVER,\n\tnot ISA_FUTURE_MASKS_SERVER.\n\t(rs6000_opt_masks): Use \"power10\" instead of \"future\".\n\t(rs6000_builtin_mask_names): Ditto.\n\t(rs6000_disable_incompatible_switches): Ditto.\n\t* config/rs6000/rs6000.h: Use -mpower10, not -mfuture.  Use\n\t-mcpu=power10, not -mcpu=future.  Use MASK_POWER10, not MASK_FUTURE.\n\tUse OPTION_MASK_POWER10, not OPTION_MASK_FUTURE.  Use RS6000_BTM_P10,\n\tnot RS6000_BTM_FUTURE.\n\t* config/rs6000/rs6000.md: Use \"power10\", not \"future\".  Use\n\tTARGET_POWER10, not TARGET_FUTURE.  Include \"power10.md\", not\n\t\"future.md\".\n\t* config/rs6000/rs6000.opt (mfuture): Delete.\n\t(mpower10): New.\n\t* config/rs6000/t-rs6000: Use \"power10.md\", not \"future.md\".\n\t* config/rs6000/vsx.md: Use TARGET_POWER10, not TARGET_FUTURE.", "tree": {"sha": "d8204efb4e92542d44f0326912ce119df5dcea71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8204efb4e92542d44f0326912ce119df5dcea71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d9d0c94588c8834a33eca6847b0a1401353300b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9d0c94588c8834a33eca6847b0a1401353300b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9d0c94588c8834a33eca6847b0a1401353300b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9d0c94588c8834a33eca6847b0a1401353300b/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f0f9a19a88ea543947192653f67d0fddbb3847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f0f9a19a88ea543947192653f67d0fddbb3847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f0f9a19a88ea543947192653f67d0fddbb3847"}], "stats": {"total": 1579, "additions": 787, "deletions": 792}, "files": [{"sha": "273b2f2848eed9cd3136d0e6d27a44b49041e74b", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -686,7 +686,7 @@ __altivec_scalar_pred(vec_any_nle,\n    to #define vec_step to __builtin_vec_step.  */\n #define vec_step(x) __builtin_vec_step (* (__typeof__ (x) *) 0)\n \n-#ifdef _ARCH_PWR_FUTURE\n+#ifdef _ARCH_PWR10\n /* May modify these macro definitions if future capabilities overload\n    with support for different vector argument and result types.  */\n #define vec_cntlzm(a, b)\t__builtin_altivec_vclzdm (a, b)\n@@ -696,7 +696,7 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_cfuge(a, b)\t__builtin_altivec_vcfuged (a, b)\n #define vec_genpcvm(a, b)\t__builtin_vec_xxgenpcvm (a, b)\n \n-/* Overloaded built-in functions for future architecture.  */\n+/* Overloaded built-in functions for ISA 3.1.  */\n #define vec_extractl(a, b, c)\t__builtin_vec_extractl (a, b, c)\n #define vec_extracth(a, b, c)\t__builtin_vec_extracth (a, b, c)\n "}, {"sha": "14c8a286a87b76b730741ec951de468ff8489734", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -791,7 +791,7 @@\n \t\t      (match_operand:VI2 2 \"altivec_register_operand\")\n \t\t      (match_operand:SI 3 \"register_operand\")]\n \t\t     UNSPEC_EXTRACTL))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n {\n   if (BYTES_BIG_ENDIAN)\n     {\n@@ -811,7 +811,7 @@\n \t\t      (match_operand:VEC_I 2 \"altivec_register_operand\" \"v\")\n \t\t      (match_operand:SI 3 \"register_operand\" \"r\")]\n \t\t     UNSPEC_EXTRACTL))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n   \"vext<du_or_d><wd>vlx %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -821,7 +821,7 @@\n \t\t      (match_operand:VI2 2 \"altivec_register_operand\")\n \t\t      (match_operand:SI 3 \"register_operand\")]\n \t\t     UNSPEC_EXTRACTR))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n {\n   if (BYTES_BIG_ENDIAN)\n     {\n@@ -841,15 +841,15 @@\n \t\t      (match_operand:VEC_I 2 \"altivec_register_operand\" \"v\")\n \t\t      (match_operand:SI 3 \"register_operand\" \"r\")]\n \t\t     UNSPEC_EXTRACTR))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n   \"vext<du_or_d><wd>vrx %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_expand \"vstrir_<mode>\"\n   [(set (match_operand:VIshort 0 \"altivec_register_operand\")\n \t(unspec:VIshort [(match_operand:VIshort 1 \"altivec_register_operand\")]\n \t\t\tUNSPEC_VSTRIR))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n {\n   if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_vstrir_code_<mode> (operands[0], operands[1]));\n@@ -863,7 +863,7 @@\n \t(unspec:VIshort\n \t   [(match_operand:VIshort 1 \"altivec_register_operand\" \"v\")]\n \t   UNSPEC_VSTRIR))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n   \"vstri<wd>r %0,%1\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -874,7 +874,7 @@\n (define_expand \"vstrir_p_<mode>\"\n   [(match_operand:SI 0 \"gpc_reg_operand\")\n    (match_operand:VIshort 1 \"altivec_register_operand\")]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n {\n   rtx scratch = gen_reg_rtx (<MODE>mode);\n   if (BYTES_BIG_ENDIAN)\n@@ -893,15 +893,15 @@\n    (set (reg:CC CR6_REGNO)\n \t(unspec:CC [(match_dup 1)]\n \t\t   UNSPEC_VSTRIR))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n   \"vstri<wd>r. %0,%1\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_expand \"vstril_<mode>\"\n   [(set (match_operand:VIshort 0 \"altivec_register_operand\")\n \t(unspec:VIshort [(match_operand:VIshort 1 \"altivec_register_operand\")]\n \t\t\tUNSPEC_VSTRIR))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n {\n   if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_vstril_code_<mode> (operands[0], operands[1]));\n@@ -915,7 +915,7 @@\n \t(unspec:VIshort\n \t   [(match_operand:VIshort 1 \"altivec_register_operand\" \"v\")]\n \t   UNSPEC_VSTRIL))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n   \"vstri<wd>l %0,%1\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -926,7 +926,7 @@\n (define_expand \"vstril_p_<mode>\"\n   [(match_operand:SI 0 \"gpc_reg_operand\")\n    (match_operand:VIshort 1 \"altivec_register_operand\")]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n {\n   rtx scratch = gen_reg_rtx (<MODE>mode);\n   if (BYTES_BIG_ENDIAN)\n@@ -945,7 +945,7 @@\n    (set (reg:CC CR6_REGNO)\n \t(unspec:CC [(match_dup 1)]\n \t\t   UNSPEC_VSTRIR))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n   \"vstri<wd>l. %0,%1\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n@@ -3446,7 +3446,7 @@\n \t\t      (match_operand:V2DI 3 \"altivec_register_operand\" \"wa\")\n \t\t      (match_operand:QI 4 \"u8bit_cint_operand\" \"n\")]\n \t\t     UNSPEC_XXEVAL))]\n-   \"TARGET_FUTURE\"\n+   \"TARGET_POWER10\"\n    \"xxeval %0,%1,%2,%3,%4\"\n    [(set_attr \"type\" \"vecsimple\")])\n \n@@ -4287,7 +4287,7 @@\n \t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n \t\t      (match_operand:V2DI 2 \"altivec_register_operand\" \"v\")]\n \t UNSPEC_VCFUGED))]\n-   \"TARGET_FUTURE\"\n+   \"TARGET_POWER10\"\n    \"vcfuged %0,%1,%2\"\n    [(set_attr \"type\" \"vecsimple\")])\n \n@@ -4296,7 +4296,7 @@\n \t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n \t\t      (match_operand:V2DI 2 \"altivec_register_operand\" \"v\")]\n \t UNSPEC_VCLZDM))]\n-   \"TARGET_FUTURE\"\n+   \"TARGET_POWER10\"\n    \"vclzdm %0,%1,%2\"\n    [(set_attr \"type\" \"vecsimple\")])\n \n@@ -4305,7 +4305,7 @@\n \t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n \t\t      (match_operand:V2DI 2 \"altivec_register_operand\" \"v\")]\n \t UNSPEC_VCTZDM))]\n-   \"TARGET_FUTURE\"\n+   \"TARGET_POWER10\"\n    \"vctzdm %0,%1,%2\"\n    [(set_attr \"type\" \"vecsimple\")])\n \n@@ -4314,7 +4314,7 @@\n \t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n \t\t      (match_operand:V2DI 2 \"altivec_register_operand\" \"v\")]\n \t UNSPEC_VPDEPD))]\n-   \"TARGET_FUTURE\"\n+   \"TARGET_POWER10\"\n    \"vpdepd %0,%1,%2\"\n    [(set_attr \"type\" \"vecsimple\")])\n \n@@ -4323,7 +4323,7 @@\n \t(unspec:V2DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n \t\t      (match_operand:V2DI 2 \"altivec_register_operand\" \"v\")]\n \t UNSPEC_VPEXTD))]\n-   \"TARGET_FUTURE\"\n+   \"TARGET_POWER10\"\n    \"vpextd %0,%1,%2\"\n    [(set_attr \"type\" \"vecsimple\")])\n \n@@ -4332,7 +4332,7 @@\n         (unspec:DI [(match_operand:V2DI 1 \"altivec_register_operand\" \"v\")\n \t            (match_operand:QI 2 \"u3bit_cint_operand\" \"n\")]\n          UNSPEC_VGNB))]\n-   \"TARGET_FUTURE\"\n+   \"TARGET_POWER10\"\n    \"vgnb %0,%1,%2\"\n    [(set_attr \"type\" \"vecsimple\")])\n \n@@ -4341,7 +4341,7 @@\n \t(unspec:V16QI [(match_operand:V16QI 1 \"altivec_register_operand\" \"v\")\n \t\t       (match_operand:SI 2 \"gpc_reg_operand\" \"r\")]\n \t UNSPEC_VCLRLB))]\n-   \"TARGET_FUTURE\"\n+   \"TARGET_POWER10\"\n {\n   if (BYTES_BIG_ENDIAN)\n     return \"vclrlb %0,%1,%2\";\n@@ -4355,7 +4355,7 @@\n \t(unspec:V16QI [(match_operand:V16QI 1 \"altivec_register_operand\" \"v\")\n \t\t       (match_operand:SI 2 \"gpc_reg_operand\" \"r\")]\n \t UNSPEC_VCLRRB))]\n-   \"TARGET_FUTURE\"\n+   \"TARGET_POWER10\"\n {\n   if (BYTES_BIG_ENDIAN)\n     return \"vclrrb %0,%1,%2\";"}, {"sha": "6b6439cb9c28d78b5807eaddcf5b757ece57e81b", "filename": "gcc/config/rs6000/driver-rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -447,6 +447,7 @@ static const struct asm_name asm_names[] = {\n   { \"power7\",\t\"-mpwr7\" },\n   { \"power8\",\t\"-mpwr8\" },\n   { \"power9\",\t\"-mpwr9\" },\n+  { \"power10\",\t\"-mpwr10\" },\n   { \"powerpc\",\t\"-mppc\" },\n   { \"rs64\",\t\"-mppc\" },\n   { \"603\",\t\"-m603\" },\n@@ -457,7 +458,6 @@ static const struct asm_name asm_names[] = {\n   { \"630\",\t\"-m620\" },\n   { \"970\",\t\"-m970\" },\n   { \"G5\",\t\"-m970\" },\n-  { \"future\",\t\"-mfuture\" },\n   { NULL,\t\"\\\n   %{mvsx: -mpwr6; \\\n     maltivec: -m970; \\\n@@ -475,6 +475,7 @@ static const struct asm_name asm_names[] = {\n   { \"power7\",\t\"-mpower7\" },\n   { \"power8\",\t\"%{mpower9-vector:-mpower9;:-mpower8}\" },\n   { \"power9\",\t\"-mpower9\" },\n+  { \"power10\",\t\"-mpower10\" },\n   { \"a2\",\t\"-ma2\" },\n   { \"powerpc\",\t\"-mppc\" },\n   { \"powerpc64\", \"-mppc64\" },\n@@ -521,7 +522,6 @@ static const struct asm_name asm_names[] = {\n   { \"e5500\",\t\"-me5500\" },\n   { \"e6500\",\t\"-me6500\" },\n   { \"titan\",\t\"-mtitan\" },\n-  { \"future\",\t\"-mfuture\" },\n   { NULL,\t\"\\\n %{mpower9-vector: -mpower9; \\\n   mpower8-vector|mcrypto|mdirect-move|mhtm: -mpower8; \\"}, {"sha": "3200f3acf054a2eea425c787eab88c7bfaf81f20", "filename": "gcc/config/rs6000/future.md", "status": "removed", "additions": 0, "deletions": 521, "changes": 521, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f0f9a19a88ea543947192653f67d0fddbb3847/gcc%2Fconfig%2Frs6000%2Ffuture.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f0f9a19a88ea543947192653f67d0fddbb3847/gcc%2Fconfig%2Frs6000%2Ffuture.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffuture.md?ref=84f0f9a19a88ea543947192653f67d0fddbb3847", "patch": "@@ -1,521 +0,0 @@\n-;; Scheduling description for a future IBM processor.\n-;; Copyright (C) 2016-2020 Free Software Foundation, Inc.\n-;;\n-;; This is a clone of power9.md.  It is intended to be a placeholder until a\n-;; real scheduler module can be contributed.\n-;; The original power9.md was contributed by Pat Haugen (pthaugen@us.ibm.com).\n-\n-;; This file is part of GCC.\n-;;\n-;; GCC is free software; you can redistribute it and/or modify it\n-;; under the terms of the GNU General Public License as published\n-;; by the Free Software Foundation; either version 3, or (at your\n-;; option) any later version.\n-;;\n-;; GCC is distributed in the hope that it will be useful, but WITHOUT\n-;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-;; License for more details.\n-;;\n-;; You should have received a copy of the GNU General Public License\n-;; along with GCC; see the file COPYING3.  If not see\n-;; <http://www.gnu.org/licenses/>.\n-;;\n-;; This file was cloned from power9.md.  In the future, we will have future\n-;; specific optimizations here.\n-\n-(define_automaton \"futuredsp,futurelsu,futurevsu,futurefpdiv,futuremisc\")\n-\n-(define_cpu_unit \"lsu0_future,lsu1_future,lsu2_future,lsu3_future\" \"futurelsu\")\n-(define_cpu_unit \"vsu0_future,vsu1_future,vsu2_future,vsu3_future\" \"futurevsu\")\n-; Two vector permute units, part of vsu\n-(define_cpu_unit \"prm0_future,prm1_future\" \"futurevsu\")\n-; Two fixed point divide units, not pipelined\n-(define_cpu_unit \"fx_div0_future,fx_div1_future\" \"futuremisc\")\n-(define_cpu_unit \"bru_future,cryptu_future,dfu_future\" \"futuremisc\")\n-; Create a false unit for use by non-pipelined FP div/sqrt\n-(define_cpu_unit \"fp_div0_future,fp_div1_future,fp_div2_future,fp_div3_future\"\n-\t\t \"futurefpdiv\")\n-\n-\n-(define_cpu_unit \"x0_future,x1_future,xa0_future,xa1_future,\n-\t\t  x2_future,x3_future,xb0_future,xb1_future,\n-\t\t  br0_future,br1_future\" \"futuredsp\")\n-\n-\n-; Dispatch port reservations\n-;\n-; Future can dispatch a maximum of 6 iops per cycle with the following\n-; general restrictions (other restrictions also apply):\n-;   1) At most 2 iops per execution slice\n-;   2) At most 2 iops to the branch unit\n-; Note that insn position in a dispatch group of 6 insns does not infer which\n-; execution slice the insn is routed to.  The units are used to infer the\n-; conflicts that exist (i.e. an 'even' requirement will preclude dispatch\n-; with 2 insns with 'superslice' requirement).\n-\n-; The xa0/xa1 units really represent the 3rd dispatch port for a superslice but\n-; are listed as separate units to allow those insns that preclude its use to\n-; still be scheduled two to a superslice while reserving the 3rd slot.  The\n-; same applies for xb0/xb1.\n-(define_reservation \"DU_xa_future\" \"xa0_future+xa1_future\")\n-(define_reservation \"DU_xb_future\" \"xb0_future+xb1_future\")\n-\n-; Any execution slice dispatch\n-(define_reservation \"DU_any_future\"\n-\t\t    \"x0_future|x1_future|DU_xa_future|x2_future|x3_future|\n-\t\t     DU_xb_future\")\n-\n-; Even slice, actually takes even/odd slots\n-(define_reservation \"DU_even_future\" \"x0_future+x1_future|x2_future+x3_future\")\n-\n-; Slice plus 3rd slot\n-(define_reservation \"DU_slice_3_future\"\n-\t\t    \"x0_future+xa0_future|x1_future+xa1_future|\n-\t\t     x2_future+xb0_future|x3_future+xb1_future\")\n-\n-; Superslice\n-(define_reservation \"DU_super_future\"\n-\t\t    \"x0_future+x1_future|x2_future+x3_future\")\n-\n-; 2-way cracked\n-(define_reservation \"DU_C2_future\" \"x0_future+x1_future|\n-\t\t\t\t    x1_future+DU_xa_future|\n-\t\t\t\t    x1_future+x2_future|\n-\t\t\t\t    DU_xa_future+x2_future|\n-\t\t\t\t    x2_future+x3_future|\n-\t\t\t\t    x3_future+DU_xb_future\")\n-\n-; 2-way cracked plus 3rd slot\n-(define_reservation \"DU_C2_3_future\" \"x0_future+x1_future+xa0_future|\n-\t\t\t\t      x1_future+x2_future+xa1_future|\n-\t\t\t\t      x2_future+x3_future+xb0_future\")\n-\n-; 3-way cracked (consumes whole decode/dispatch cycle)\n-(define_reservation \"DU_C3_future\"\n-\t\t    \"x0_future+x1_future+xa0_future+xa1_future+x2_future+\n-\t\t     x3_future+xb0_future+xb1_future+br0_future+br1_future\")\n-\n-; Branch ports\n-(define_reservation \"DU_branch_future\" \"br0_future|br1_future\")\n-\n-\n-; Execution unit reservations\n-(define_reservation \"LSU_future\"\n-\t\t    \"lsu0_future|lsu1_future|lsu2_future|lsu3_future\")\n-\n-(define_reservation \"LSU_pair_future\"\n-\t\t    \"lsu0_future+lsu1_future|lsu1_future+lsu2_future|\n-\t\t     lsu2_future+lsu3_future|lsu3_future+lsu0_future\")\n-\n-(define_reservation \"VSU_future\"\n-\t\t    \"vsu0_future|vsu1_future|vsu2_future|vsu3_future\")\n-\n-(define_reservation \"VSU_super_future\"\n-\t\t    \"vsu0_future+vsu1_future|vsu2_future+vsu3_future\")\n-\n-(define_reservation \"VSU_PRM_future\" \"prm0_future|prm1_future\")\n-\n-; Define the reservation to be used by FP div/sqrt which allows other insns\n-; to be issued to the VSU, but blocks other div/sqrt for a number of cycles.\n-; Note that the number of cycles blocked varies depending on insn, but we\n-; just use the same number for all in order to keep the number of DFA states\n-; reasonable.\n-(define_reservation \"FP_DIV_future\"\n-\t\t    \"fp_div0_future*8|fp_div1_future*8|fp_div2_future*8|\n-\t\t     fp_div3_future*8\")\n-(define_reservation \"VEC_DIV_future\"\n-\t\t    \"fp_div0_future*8+fp_div1_future*8|\n-\t\t     fp_div2_future*8+fp_div3_future*8\")\n-\n-\n-; LS Unit\n-(define_insn_reservation \"future-load\" 4\n-  (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"sign_extend\" \"no\")\n-       (eq_attr \"update\" \"no\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,LSU_future\")\n-\n-(define_insn_reservation \"future-load-update\" 4\n-  (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"sign_extend\" \"no\")\n-       (eq_attr \"update\" \"yes\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_future,LSU_future+VSU_future\")\n-\n-(define_insn_reservation \"future-load-ext\" 6\n-  (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"sign_extend\" \"yes\")\n-       (eq_attr \"update\" \"no\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_future,LSU_future\")\n-\n-(define_insn_reservation \"future-load-ext-update\" 6\n-  (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"sign_extend\" \"yes\")\n-       (eq_attr \"update\" \"yes\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C3_future,LSU_future+VSU_future\")\n-\n-(define_insn_reservation \"future-fpload-double\" 4\n-  (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"update\" \"no\")\n-       (eq_attr \"size\" \"64\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,LSU_future\")\n-\n-(define_insn_reservation \"future-fpload-update-double\" 4\n-  (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"update\" \"yes\")\n-       (eq_attr \"size\" \"64\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_3_future,LSU_future+VSU_future\")\n-\n-; SFmode loads are cracked and have additional 2 cycles over DFmode\n-(define_insn_reservation \"future-fpload-single\" 6\n-  (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"update\" \"no\")\n-       (eq_attr \"size\" \"32\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_3_future,LSU_future\")\n-\n-(define_insn_reservation \"future-fpload-update-single\" 6\n-  (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"update\" \"yes\")\n-       (eq_attr \"size\" \"32\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C3_future,LSU_future+VSU_future\")\n-\n-(define_insn_reservation \"future-vecload\" 5\n-  (and (eq_attr \"type\" \"vecload\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,LSU_pair_future\")\n-\n-; Store data can issue 2 cycles after AGEN issue, 3 cycles for vector store\n-(define_insn_reservation \"future-store\" 0\n-  (and (eq_attr \"type\" \"store\")\n-       (eq_attr \"update\" \"no\")\n-       (eq_attr \"indexed\" \"no\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,LSU_future\")\n-\n-(define_insn_reservation \"future-store-indexed\" 0\n-  (and (eq_attr \"type\" \"store\")\n-       (eq_attr \"update\" \"no\")\n-       (eq_attr \"indexed\" \"yes\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,LSU_future\")\n-\n-; Update forms have 2 cycle latency for updated addr reg\n-(define_insn_reservation \"future-store-update\" 2\n-  (and (eq_attr \"type\" \"store\")\n-       (eq_attr \"update\" \"yes\")\n-       (eq_attr \"indexed\" \"no\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_3_future,LSU_future+VSU_future\")\n-\n-; Update forms have 2 cycle latency for updated addr reg\n-(define_insn_reservation \"future-store-update-indexed\" 2\n-  (and (eq_attr \"type\" \"store\")\n-       (eq_attr \"update\" \"yes\")\n-       (eq_attr \"indexed\" \"yes\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_3_future,LSU_future+VSU_future\")\n-\n-(define_insn_reservation \"future-fpstore\" 0\n-  (and (eq_attr \"type\" \"fpstore\")\n-       (eq_attr \"update\" \"no\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,LSU_future\")\n-\n-; Update forms have 2 cycle latency for updated addr reg\n-(define_insn_reservation \"future-fpstore-update\" 2\n-  (and (eq_attr \"type\" \"fpstore\")\n-       (eq_attr \"update\" \"yes\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_3_future,LSU_future+VSU_future\")\n-\n-(define_insn_reservation \"future-vecstore\" 0\n-  (and (eq_attr \"type\" \"vecstore\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,LSU_pair_future\")\n-\n-(define_insn_reservation \"future-larx\" 4\n-  (and (eq_attr \"type\" \"load_l\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,LSU_future\")\n-\n-(define_insn_reservation \"future-stcx\" 2\n-  (and (eq_attr \"type\" \"store_c\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_3_future,LSU_future+VSU_future\")\n-\n-(define_insn_reservation \"future-sync\" 4\n-  (and (eq_attr \"type\" \"sync,isync\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,LSU_future\")\n-\n-\n-; VSU Execution Unit\n-\n-; Fixed point ops\n-\n-; Most ALU insns are simple 2 cycle, including record form\n-(define_insn_reservation \"future-alu\" 2\n-  (and (eq_attr \"type\" \"add,exts,integer,logical,isel\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,VSU_future\")\n-; 5 cycle CR latency\n-(define_bypass 5 \"future-alu\"\n-\t\t \"future-crlogical,future-mfcr,future-mfcrf\")\n-\n-; Rotate/shift prevent use of third slot\n-(define_insn_reservation \"future-rot\" 2\n-  (and (eq_attr \"type\" \"insert,shift\")\n-       (eq_attr \"dot\" \"no\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,VSU_future\")\n-\n-; Record form rotate/shift are cracked\n-(define_insn_reservation \"future-cracked-alu\" 2\n-  (and (eq_attr \"type\" \"insert,shift\")\n-       (eq_attr \"dot\" \"yes\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_3_future,VSU_future\")\n-; 7 cycle CR latency\n-(define_bypass 7 \"future-cracked-alu\"\n-\t\t \"future-crlogical,future-mfcr,future-mfcrf\")\n-\n-(define_insn_reservation \"future-alu2\" 3\n-  (and (eq_attr \"type\" \"cntlz,popcnt,trap\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,VSU_future\")\n-; 6 cycle CR latency\n-(define_bypass 6 \"future-alu2\"\n-\t\t \"future-crlogical,future-mfcr,future-mfcrf\")\n-\n-(define_insn_reservation \"future-cmp\" 2\n-  (and (eq_attr \"type\" \"cmp\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,VSU_future\")\n-\n-\n-; Treat 'two' and 'three' types as 2 or 3 way cracked\n-(define_insn_reservation \"future-two\" 4\n-  (and (eq_attr \"type\" \"two\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_future,VSU_future\")\n-\n-(define_insn_reservation \"future-three\" 6\n-  (and (eq_attr \"type\" \"three\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C3_future,VSU_future\")\n-\n-(define_insn_reservation \"future-mul\" 5\n-  (and (eq_attr \"type\" \"mul\")\n-       (eq_attr \"dot\" \"no\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,VSU_future\")\n-\n-(define_insn_reservation \"future-mul-compare\" 5\n-  (and (eq_attr \"type\" \"mul\")\n-       (eq_attr \"dot\" \"yes\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_3_future,VSU_future\")\n-; 10 cycle CR latency\n-(define_bypass 10 \"future-mul-compare\"\n-\t\t \"future-crlogical,future-mfcr,future-mfcrf\")\n-\n-; Fixed point divides reserve the divide units for a minimum of 8 cycles\n-(define_insn_reservation \"future-idiv\" 16\n-  (and (eq_attr \"type\" \"div\")\n-       (eq_attr \"size\" \"32\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_even_future,fx_div0_future*8|fx_div1_future*8\")\n-\n-(define_insn_reservation \"future-ldiv\" 24\n-  (and (eq_attr \"type\" \"div\")\n-       (eq_attr \"size\" \"64\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_even_future,fx_div0_future*8|fx_div1_future*8\")\n-\n-(define_insn_reservation \"future-crlogical\" 2\n-  (and (eq_attr \"type\" \"cr_logical\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,VSU_future\")\n-\n-(define_insn_reservation \"future-mfcrf\" 2\n-  (and (eq_attr \"type\" \"mfcrf\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,VSU_future\")\n-\n-(define_insn_reservation \"future-mfcr\" 6\n-  (and (eq_attr \"type\" \"mfcr\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C3_future,VSU_future\")\n-\n-; Should differentiate between 1 cr field and > 1 since target of > 1 cr\n-; is cracked\n-(define_insn_reservation \"future-mtcr\" 2\n-  (and (eq_attr \"type\" \"mtcr\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,VSU_future\")\n-\n-; Move to LR/CTR are executed in VSU\n-(define_insn_reservation \"future-mtjmpr\" 5\n-  (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,VSU_future\")\n-\n-; Floating point/Vector ops\n-(define_insn_reservation \"future-fpsimple\" 2\n-  (and (eq_attr \"type\" \"fpsimple\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,VSU_future\")\n-\n-(define_insn_reservation \"future-fp\" 5\n-  (and (eq_attr \"type\" \"fp,dmul\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,VSU_future\")\n-\n-(define_insn_reservation \"future-fpcompare\" 3\n-  (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,VSU_future\")\n-\n-; FP div/sqrt are executed in the VSU slices.  They are not pipelined wrt other\n-; div/sqrt insns, but for the most part do not block pipelined ops.\n-(define_insn_reservation \"future-sdiv\" 22\n-  (and (eq_attr \"type\" \"sdiv\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,VSU_future,FP_DIV_future\")\n-\n-(define_insn_reservation \"future-ddiv\" 27\n-  (and (eq_attr \"type\" \"ddiv\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,VSU_future,FP_DIV_future\")\n-\n-(define_insn_reservation \"future-sqrt\" 26\n-  (and (eq_attr \"type\" \"ssqrt\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,VSU_future,FP_DIV_future\")\n-\n-(define_insn_reservation \"future-dsqrt\" 36\n-  (and (eq_attr \"type\" \"dsqrt\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,VSU_future,FP_DIV_future\")\n-\n-(define_insn_reservation \"future-vec-2cyc\" 2\n-  (and (eq_attr \"type\" \"vecmove,veclogical,vecexts,veccmpfx\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,VSU_super_future\")\n-\n-(define_insn_reservation \"future-veccmp\" 3\n-  (and (eq_attr \"type\" \"veccmp\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,VSU_super_future\")\n-\n-(define_insn_reservation \"future-vecsimple\" 3\n-  (and (eq_attr \"type\" \"vecsimple\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,VSU_super_future\")\n-\n-(define_insn_reservation \"future-vecnormal\" 7\n-  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n-       (eq_attr \"size\" \"!128\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,VSU_super_future\")\n-\n-; Quad-precision FP ops, execute in DFU\n-(define_insn_reservation \"future-qp\" 12\n-  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n-       (eq_attr \"size\" \"128\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,dfu_future\")\n-\n-(define_insn_reservation \"future-vecperm\" 3\n-  (and (eq_attr \"type\" \"vecperm\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,VSU_PRM_future\")\n-\n-(define_insn_reservation \"future-veccomplex\" 7\n-  (and (eq_attr \"type\" \"veccomplex\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,VSU_super_future\")\n-\n-(define_insn_reservation \"future-vecfdiv\" 24\n-  (and (eq_attr \"type\" \"vecfdiv\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,VSU_super_future,VEC_DIV_future\")\n-\n-(define_insn_reservation \"future-vecdiv\" 27\n-  (and (eq_attr \"type\" \"vecdiv\")\n-       (eq_attr \"size\" \"!128\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,VSU_super_future,VEC_DIV_future\")\n-\n-; Use 8 for DFU reservation on QP div/mul to limit DFA state size\n-(define_insn_reservation \"future-qpdiv\" 56\n-  (and (eq_attr \"type\" \"vecdiv\")\n-       (eq_attr \"size\" \"128\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,dfu_future*8\")\n-\n-(define_insn_reservation \"future-qpmul\" 24\n-  (and (eq_attr \"type\" \"qmul\")\n-       (eq_attr \"size\" \"128\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,dfu_future*8\")\n-\n-(define_insn_reservation \"future-mffgpr\" 2\n-  (and (eq_attr \"type\" \"mffgpr\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,VSU_future\")\n-\n-(define_insn_reservation \"future-mftgpr\" 2\n-  (and (eq_attr \"type\" \"mftgpr\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_slice_3_future,VSU_future\")\n-\n-\n-; Branch Unit\n-; Move from LR/CTR are executed in BRU but consume a writeback port from an\n-; execution slice.\n-(define_insn_reservation \"future-mfjmpr\" 6\n-  (and (eq_attr \"type\" \"mfjmpr\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_branch_future,bru_future+VSU_future\")\n-\n-; Branch is 2 cycles\n-(define_insn_reservation \"future-branch\" 2\n-  (and (eq_attr \"type\" \"jmpreg,branch\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_branch_future,bru_future\")\n-\n-\n-; Crypto Unit\n-(define_insn_reservation \"future-crypto\" 6\n-  (and (eq_attr \"type\" \"crypto\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_super_future,cryptu_future\")\n-\n-\n-; HTM Unit\n-(define_insn_reservation \"future-htm\" 4\n-  (and (eq_attr \"type\" \"htm\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_C2_future,LSU_future\")\n-\n-(define_insn_reservation \"future-htm-simple\" 2\n-  (and (eq_attr \"type\" \"htmsimple\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_any_future,VSU_future\")\n-\n-\n-; DFP Unit\n-(define_insn_reservation \"future-dfp\" 12\n-  (and (eq_attr \"type\" \"dfp\")\n-       (eq_attr \"cpu\" \"future\"))\n-  \"DU_even_future,dfu_future\")\n-"}, {"sha": "2ded33012827a747735c133c489748d10c14b88a", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -641,9 +641,9 @@ extern int dot_symbols;\n #undef\tTARGET_FLOAT128_ENABLE_TYPE\n #define TARGET_FLOAT128_ENABLE_TYPE 1\n \n-/* Enable using prefixed PC-relative addressing on the 'future' machine if the\n-   ABI supports it.  The ELF v2 ABI only supports PC-relative relocations for\n+/* Enable using prefixed PC-relative addressing on POWER10 if the ABI\n+   supports it.  The ELF v2 ABI only supports PC-relative relocations for\n    the medium code model.  */\n-#define PCREL_SUPPORTED_BY_OS\t(TARGET_FUTURE && TARGET_PREFIXED\t\\\n+#define PCREL_SUPPORTED_BY_OS\t(TARGET_POWER10 && TARGET_PREFIXED\t\\\n \t\t\t\t && ELFv2_ABI_CHECK\t\t\t\\\n \t\t\t\t && TARGET_CMODEL == CMODEL_MEDIUM)"}, {"sha": "9f8a58257441526eed4b69cd76a20e72b5127f6b", "filename": "gcc/config/rs6000/power10.md", "status": "added", "additions": 521, "deletions": 0, "changes": 521, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Fpower10.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Fpower10.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpower10.md?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -0,0 +1,521 @@\n+;; Scheduling description for IBM POWER10 processor.\n+;; Copyright (C) 2016-2020 Free Software Foundation, Inc.\n+;;\n+;; This is a clone of power9.md.  It is intended to be a placeholder until a\n+;; real scheduler model can be contributed.\n+;; The original power9.md was contributed by Pat Haugen (pthaugen@us.ibm.com).\n+\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; This file was cloned from power9.md, it does not (yet) describe the actual\n+;; POWER10 processor.\n+\n+(define_automaton \"power10dsp,power10lsu,power10vsu,power10fpdiv,power10misc\")\n+\n+(define_cpu_unit \"lsu0_power10,lsu1_power10,lsu2_power10,lsu3_power10\" \"power10lsu\")\n+(define_cpu_unit \"vsu0_power10,vsu1_power10,vsu2_power10,vsu3_power10\" \"power10vsu\")\n+; Two vector permute units, part of vsu\n+(define_cpu_unit \"prm0_power10,prm1_power10\" \"power10vsu\")\n+; Two fixed point divide units, not pipelined\n+(define_cpu_unit \"fx_div0_power10,fx_div1_power10\" \"power10misc\")\n+(define_cpu_unit \"bru_power10,cryptu_power10,dfu_power10\" \"power10misc\")\n+; Create a false unit for use by non-pipelined FP div/sqrt\n+(define_cpu_unit \"fp_div0_power10,fp_div1_power10,fp_div2_power10,fp_div3_power10\"\n+\t\t \"power10fpdiv\")\n+\n+\n+(define_cpu_unit \"x0_power10,x1_power10,xa0_power10,xa1_power10,\n+\t\t  x2_power10,x3_power10,xb0_power10,xb1_power10,\n+\t\t  br0_power10,br1_power10\" \"power10dsp\")\n+\n+\n+; Dispatch port reservations\n+;\n+; The processor can dispatch a maximum of 6 iops per cycle with the following\n+; general restrictions (other restrictions also apply):\n+;   1) At most 2 iops per execution slice\n+;   2) At most 2 iops to the branch unit\n+; Note that insn position in a dispatch group of 6 insns does not infer which\n+; execution slice the insn is routed to.  The units are used to infer the\n+; conflicts that exist (i.e. an 'even' requirement will preclude dispatch\n+; with 2 insns with 'superslice' requirement).\n+\n+; The xa0/xa1 units really represent the 3rd dispatch port for a superslice but\n+; are listed as separate units to allow those insns that preclude its use to\n+; still be scheduled two to a superslice while reserving the 3rd slot.  The\n+; same applies for xb0/xb1.\n+(define_reservation \"DU_xa_power10\" \"xa0_power10+xa1_power10\")\n+(define_reservation \"DU_xb_power10\" \"xb0_power10+xb1_power10\")\n+\n+; Any execution slice dispatch\n+(define_reservation \"DU_any_power10\"\n+\t\t    \"x0_power10|x1_power10|DU_xa_power10|x2_power10|x3_power10|\n+\t\t     DU_xb_power10\")\n+\n+; Even slice, actually takes even/odd slots\n+(define_reservation \"DU_even_power10\" \"x0_power10+x1_power10|x2_power10+x3_power10\")\n+\n+; Slice plus 3rd slot\n+(define_reservation \"DU_slice_3_power10\"\n+\t\t    \"x0_power10+xa0_power10|x1_power10+xa1_power10|\n+\t\t     x2_power10+xb0_power10|x3_power10+xb1_power10\")\n+\n+; Superslice\n+(define_reservation \"DU_super_power10\"\n+\t\t    \"x0_power10+x1_power10|x2_power10+x3_power10\")\n+\n+; 2-way cracked\n+(define_reservation \"DU_C2_power10\" \"x0_power10+x1_power10|\n+\t\t\t\t    x1_power10+DU_xa_power10|\n+\t\t\t\t    x1_power10+x2_power10|\n+\t\t\t\t    DU_xa_power10+x2_power10|\n+\t\t\t\t    x2_power10+x3_power10|\n+\t\t\t\t    x3_power10+DU_xb_power10\")\n+\n+; 2-way cracked plus 3rd slot\n+(define_reservation \"DU_C2_3_power10\" \"x0_power10+x1_power10+xa0_power10|\n+\t\t\t\t      x1_power10+x2_power10+xa1_power10|\n+\t\t\t\t      x2_power10+x3_power10+xb0_power10\")\n+\n+; 3-way cracked (consumes whole decode/dispatch cycle)\n+(define_reservation \"DU_C3_power10\"\n+\t\t    \"x0_power10+x1_power10+xa0_power10+xa1_power10+x2_power10+\n+\t\t     x3_power10+xb0_power10+xb1_power10+br0_power10+br1_power10\")\n+\n+; Branch ports\n+(define_reservation \"DU_branch_power10\" \"br0_power10|br1_power10\")\n+\n+\n+; Execution unit reservations\n+(define_reservation \"LSU_power10\"\n+\t\t    \"lsu0_power10|lsu1_power10|lsu2_power10|lsu3_power10\")\n+\n+(define_reservation \"LSU_pair_power10\"\n+\t\t    \"lsu0_power10+lsu1_power10|lsu1_power10+lsu2_power10|\n+\t\t     lsu2_power10+lsu3_power10|lsu3_power10+lsu0_power10\")\n+\n+(define_reservation \"VSU_power10\"\n+\t\t    \"vsu0_power10|vsu1_power10|vsu2_power10|vsu3_power10\")\n+\n+(define_reservation \"VSU_super_power10\"\n+\t\t    \"vsu0_power10+vsu1_power10|vsu2_power10+vsu3_power10\")\n+\n+(define_reservation \"VSU_PRM_power10\" \"prm0_power10|prm1_power10\")\n+\n+; Define the reservation to be used by FP div/sqrt which allows other insns\n+; to be issued to the VSU, but blocks other div/sqrt for a number of cycles.\n+; Note that the number of cycles blocked varies depending on insn, but we\n+; just use the same number for all in order to keep the number of DFA states\n+; reasonable.\n+(define_reservation \"FP_DIV_power10\"\n+\t\t    \"fp_div0_power10*8|fp_div1_power10*8|fp_div2_power10*8|\n+\t\t     fp_div3_power10*8\")\n+(define_reservation \"VEC_DIV_power10\"\n+\t\t    \"fp_div0_power10*8+fp_div1_power10*8|\n+\t\t     fp_div2_power10*8+fp_div3_power10*8\")\n+\n+\n+; LS Unit\n+(define_insn_reservation \"power10-load\" 4\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,LSU_power10\")\n+\n+(define_insn_reservation \"power10-load-update\" 4\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"no\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_power10,LSU_power10+VSU_power10\")\n+\n+(define_insn_reservation \"power10-load-ext\" 6\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_power10,LSU_power10\")\n+\n+(define_insn_reservation \"power10-load-ext-update\" 6\n+  (and (eq_attr \"type\" \"load\")\n+       (eq_attr \"sign_extend\" \"yes\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C3_power10,LSU_power10+VSU_power10\")\n+\n+(define_insn_reservation \"power10-fpload-double\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,LSU_power10\")\n+\n+(define_insn_reservation \"power10-fpload-update-double\" 4\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_3_power10,LSU_power10+VSU_power10\")\n+\n+; SFmode loads are cracked and have additional 2 cycles over DFmode\n+(define_insn_reservation \"power10-fpload-single\" 6\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_3_power10,LSU_power10\")\n+\n+(define_insn_reservation \"power10-fpload-update-single\" 6\n+  (and (eq_attr \"type\" \"fpload\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C3_power10,LSU_power10+VSU_power10\")\n+\n+(define_insn_reservation \"power10-vecload\" 5\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,LSU_pair_power10\")\n+\n+; Store data can issue 2 cycles after AGEN issue, 3 cycles for vector store\n+(define_insn_reservation \"power10-store\" 0\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,LSU_power10\")\n+\n+(define_insn_reservation \"power10-store-indexed\" 0\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,LSU_power10\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"power10-store-update\" 2\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"no\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_3_power10,LSU_power10+VSU_power10\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"power10-store-update-indexed\" 2\n+  (and (eq_attr \"type\" \"store\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"indexed\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_3_power10,LSU_power10+VSU_power10\")\n+\n+(define_insn_reservation \"power10-fpstore\" 0\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"no\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,LSU_power10\")\n+\n+; Update forms have 2 cycle latency for updated addr reg\n+(define_insn_reservation \"power10-fpstore-update\" 2\n+  (and (eq_attr \"type\" \"fpstore\")\n+       (eq_attr \"update\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_3_power10,LSU_power10+VSU_power10\")\n+\n+(define_insn_reservation \"power10-vecstore\" 0\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,LSU_pair_power10\")\n+\n+(define_insn_reservation \"power10-larx\" 4\n+  (and (eq_attr \"type\" \"load_l\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,LSU_power10\")\n+\n+(define_insn_reservation \"power10-stcx\" 2\n+  (and (eq_attr \"type\" \"store_c\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_3_power10,LSU_power10+VSU_power10\")\n+\n+(define_insn_reservation \"power10-sync\" 4\n+  (and (eq_attr \"type\" \"sync,isync\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,LSU_power10\")\n+\n+\n+; VSU Execution Unit\n+\n+; Fixed point ops\n+\n+; Most ALU insns are simple 2 cycle, including record form\n+(define_insn_reservation \"power10-alu\" 2\n+  (and (eq_attr \"type\" \"add,exts,integer,logical,isel\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,VSU_power10\")\n+; 5 cycle CR latency\n+(define_bypass 5 \"power10-alu\"\n+\t\t \"power10-crlogical,power10-mfcr,power10-mfcrf\")\n+\n+; Rotate/shift prevent use of third slot\n+(define_insn_reservation \"power10-rot\" 2\n+  (and (eq_attr \"type\" \"insert,shift\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,VSU_power10\")\n+\n+; Record form rotate/shift are cracked\n+(define_insn_reservation \"power10-cracked-alu\" 2\n+  (and (eq_attr \"type\" \"insert,shift\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_3_power10,VSU_power10\")\n+; 7 cycle CR latency\n+(define_bypass 7 \"power10-cracked-alu\"\n+\t\t \"power10-crlogical,power10-mfcr,power10-mfcrf\")\n+\n+(define_insn_reservation \"power10-alu2\" 3\n+  (and (eq_attr \"type\" \"cntlz,popcnt,trap\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,VSU_power10\")\n+; 6 cycle CR latency\n+(define_bypass 6 \"power10-alu2\"\n+\t\t \"power10-crlogical,power10-mfcr,power10-mfcrf\")\n+\n+(define_insn_reservation \"power10-cmp\" 2\n+  (and (eq_attr \"type\" \"cmp\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,VSU_power10\")\n+\n+\n+; Treat 'two' and 'three' types as 2 or 3 way cracked\n+(define_insn_reservation \"power10-two\" 4\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_power10,VSU_power10\")\n+\n+(define_insn_reservation \"power10-three\" 6\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C3_power10,VSU_power10\")\n+\n+(define_insn_reservation \"power10-mul\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"no\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,VSU_power10\")\n+\n+(define_insn_reservation \"power10-mul-compare\" 5\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"dot\" \"yes\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_3_power10,VSU_power10\")\n+; 10 cycle CR latency\n+(define_bypass 10 \"power10-mul-compare\"\n+\t\t \"power10-crlogical,power10-mfcr,power10-mfcrf\")\n+\n+; Fixed point divides reserve the divide units for a minimum of 8 cycles\n+(define_insn_reservation \"power10-idiv\" 16\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"32\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_even_power10,fx_div0_power10*8|fx_div1_power10*8\")\n+\n+(define_insn_reservation \"power10-ldiv\" 24\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"size\" \"64\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_even_power10,fx_div0_power10*8|fx_div1_power10*8\")\n+\n+(define_insn_reservation \"power10-crlogical\" 2\n+  (and (eq_attr \"type\" \"cr_logical\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,VSU_power10\")\n+\n+(define_insn_reservation \"power10-mfcrf\" 2\n+  (and (eq_attr \"type\" \"mfcrf\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,VSU_power10\")\n+\n+(define_insn_reservation \"power10-mfcr\" 6\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C3_power10,VSU_power10\")\n+\n+; Should differentiate between 1 cr field and > 1 since target of > 1 cr\n+; is cracked\n+(define_insn_reservation \"power10-mtcr\" 2\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,VSU_power10\")\n+\n+; Move to LR/CTR are executed in VSU\n+(define_insn_reservation \"power10-mtjmpr\" 5\n+  (and (eq_attr \"type\" \"mtjmpr\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,VSU_power10\")\n+\n+; Floating point/Vector ops\n+(define_insn_reservation \"power10-fpsimple\" 2\n+  (and (eq_attr \"type\" \"fpsimple\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,VSU_power10\")\n+\n+(define_insn_reservation \"power10-fp\" 5\n+  (and (eq_attr \"type\" \"fp,dmul\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,VSU_power10\")\n+\n+(define_insn_reservation \"power10-fpcompare\" 3\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,VSU_power10\")\n+\n+; FP div/sqrt are executed in the VSU slices.  They are not pipelined wrt other\n+; div/sqrt insns, but for the most part do not block pipelined ops.\n+(define_insn_reservation \"power10-sdiv\" 22\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,VSU_power10,FP_DIV_power10\")\n+\n+(define_insn_reservation \"power10-ddiv\" 27\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,VSU_power10,FP_DIV_power10\")\n+\n+(define_insn_reservation \"power10-sqrt\" 26\n+  (and (eq_attr \"type\" \"ssqrt\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,VSU_power10,FP_DIV_power10\")\n+\n+(define_insn_reservation \"power10-dsqrt\" 36\n+  (and (eq_attr \"type\" \"dsqrt\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,VSU_power10,FP_DIV_power10\")\n+\n+(define_insn_reservation \"power10-vec-2cyc\" 2\n+  (and (eq_attr \"type\" \"vecmove,veclogical,vecexts,veccmpfx\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,VSU_super_power10\")\n+\n+(define_insn_reservation \"power10-veccmp\" 3\n+  (and (eq_attr \"type\" \"veccmp\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,VSU_super_power10\")\n+\n+(define_insn_reservation \"power10-vecsimple\" 3\n+  (and (eq_attr \"type\" \"vecsimple\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,VSU_super_power10\")\n+\n+(define_insn_reservation \"power10-vecnormal\" 7\n+  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,VSU_super_power10\")\n+\n+; Quad-precision FP ops, execute in DFU\n+(define_insn_reservation \"power10-qp\" 12\n+  (and (eq_attr \"type\" \"vecfloat,vecdouble\")\n+       (eq_attr \"size\" \"128\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,dfu_power10\")\n+\n+(define_insn_reservation \"power10-vecperm\" 3\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,VSU_PRM_power10\")\n+\n+(define_insn_reservation \"power10-veccomplex\" 7\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,VSU_super_power10\")\n+\n+(define_insn_reservation \"power10-vecfdiv\" 24\n+  (and (eq_attr \"type\" \"vecfdiv\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,VSU_super_power10,VEC_DIV_power10\")\n+\n+(define_insn_reservation \"power10-vecdiv\" 27\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"size\" \"!128\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,VSU_super_power10,VEC_DIV_power10\")\n+\n+; Use 8 for DFU reservation on QP div/mul to limit DFA state size\n+(define_insn_reservation \"power10-qpdiv\" 56\n+  (and (eq_attr \"type\" \"vecdiv\")\n+       (eq_attr \"size\" \"128\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,dfu_power10*8\")\n+\n+(define_insn_reservation \"power10-qpmul\" 24\n+  (and (eq_attr \"type\" \"qmul\")\n+       (eq_attr \"size\" \"128\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,dfu_power10*8\")\n+\n+(define_insn_reservation \"power10-mffgpr\" 2\n+  (and (eq_attr \"type\" \"mffgpr\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,VSU_power10\")\n+\n+(define_insn_reservation \"power10-mftgpr\" 2\n+  (and (eq_attr \"type\" \"mftgpr\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_slice_3_power10,VSU_power10\")\n+\n+\n+; Branch Unit\n+; Move from LR/CTR are executed in BRU but consume a writeback port from an\n+; execution slice.\n+(define_insn_reservation \"power10-mfjmpr\" 6\n+  (and (eq_attr \"type\" \"mfjmpr\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_branch_power10,bru_power10+VSU_power10\")\n+\n+; Branch is 2 cycles\n+(define_insn_reservation \"power10-branch\" 2\n+  (and (eq_attr \"type\" \"jmpreg,branch\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_branch_power10,bru_power10\")\n+\n+\n+; Crypto Unit\n+(define_insn_reservation \"power10-crypto\" 6\n+  (and (eq_attr \"type\" \"crypto\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_super_power10,cryptu_power10\")\n+\n+\n+; HTM Unit\n+(define_insn_reservation \"power10-htm\" 4\n+  (and (eq_attr \"type\" \"htm\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_C2_power10,LSU_power10\")\n+\n+(define_insn_reservation \"power10-htm-simple\" 2\n+  (and (eq_attr \"type\" \"htmsimple\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_any_power10,VSU_power10\")\n+\n+\n+; DFP Unit\n+(define_insn_reservation \"power10-dfp\" 12\n+  (and (eq_attr \"type\" \"dfp\")\n+       (eq_attr \"cpu\" \"power10\"))\n+  \"DU_even_power10,dfu_power10\")\n+"}, {"sha": "7a5ba0ebd47a4c9a8f7e29499be343f06075ef8b", "filename": "gcc/config/rs6000/ppc-auxv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Fppc-auxv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Fppc-auxv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fppc-auxv.h?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -49,7 +49,7 @@\n #define PPC_PLATFORM_POWER9            14\n \n /* This is not yet official.  */\n-#define PPC_PLATFORM_FUTURE            15\n+#define PPC_PLATFORM_POWER10           15\n \n /* AT_HWCAP bits.  These must match the values defined in the Linux kernel.  */\n #define PPC_FEATURE_32              0x80000000"}, {"sha": "8c5f8c687934306ee8eaae47d0744927b8d5af25", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 100, "deletions": 102, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -1019,114 +1019,112 @@\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-/* For vector builtins for instructions which may be added at some point in\n-   the future that are encoded as altivec instructions, use\n-   __builtin_altivec_ as the builtin name.  */\n+/* For builtins for power10 vector instructions that are encoded as altivec\n+   instructions, use __builtin_altivec_ as the builtin name.  */\n \n-#define BU_FUTURE_V_0(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n-  RS6000_BUILTIN_0 (FUTUREV_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+#define BU_P10V_0(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_0 (P10V_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-#define BU_FUTURE_V_1(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n-  RS6000_BUILTIN_1 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+#define BU_P10V_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_1 (P10_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-#define BU_FUTURE_V_2(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n-  RS6000_BUILTIN_2 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+#define BU_P10V_2(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_2 (P10_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-#define BU_FUTURE_V_3(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n-  RS6000_BUILTIN_3 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+#define BU_P10V_3(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_3 (P10_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-#define BU_FUTURE_V_4(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n-  RS6000_BUILTIN_4 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+#define BU_P10V_4(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_4 (P10_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_altivec_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_QUATERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-#define BU_FUTURE_OVERLOAD_1(ENUM, NAME)\t\t\t\t\\\n-  RS6000_BUILTIN_1 (FUTURE_BUILTIN_VEC_ ## ENUM,\t/* ENUM */\t\\\n+#define BU_P10_OVERLOAD_1(ENUM, NAME)\t\t\t\t\t\\\n+  RS6000_BUILTIN_1 (P10_BUILTIN_VEC_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n \t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n \n-#define BU_FUTURE_OVERLOAD_2(ENUM, NAME)\t\t\t\t\\\n-  RS6000_BUILTIN_2 (FUTURE_BUILTIN_VEC_ ## ENUM,\t/* ENUM */\t\\\n+#define BU_P10_OVERLOAD_2(ENUM, NAME)\t\t\t\t\t\\\n+  RS6000_BUILTIN_2 (P10_BUILTIN_VEC_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n \n-#define BU_FUTURE_OVERLOAD_3(ENUM, NAME)\t\t\t\t\\\n-  RS6000_BUILTIN_3 (FUTURE_BUILTIN_VEC_ ## ENUM,\t/* ENUM */\t\\\n+#define BU_P10_OVERLOAD_3(ENUM, NAME)\t\t\t\t\t\\\n+  RS6000_BUILTIN_3 (P10_BUILTIN_VEC_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n \n-#define BU_FUTURE_OVERLOAD_4(ENUM, NAME)\t\t\t\t\\\n-  RS6000_BUILTIN_4 (FUTURE_BUILTIN_VEC_ ## ENUM,\t/* ENUM */\t\\\n+#define BU_P10_OVERLOAD_4(ENUM, NAME)\t\t\t\t\t\\\n+  RS6000_BUILTIN_4 (P10_BUILTIN_VEC_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_vec_\" NAME,\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_OVERLOADED\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_QUATERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n \n-/* Miscellaneous (non-vector) builtins for instructions which may be\n-   added at some point in the future.  */\n+/* Miscellaneous (non-vector) builtins for power10 instructions.  */\n \n-#define BU_FUTURE_MISC_0(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n-  RS6000_BUILTIN_0 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+#define BU_P10_MISC_0(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_0 (P10_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_SPECIAL),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-#define BU_FUTURE_MISC_1(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n-  RS6000_BUILTIN_1 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+#define BU_P10_MISC_1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_1 (P10_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_UNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-#define BU_FUTURE_MISC_2(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n-  RS6000_BUILTIN_2 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+#define BU_P10_MISC_2(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_2 (P10_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE\t\t\t\t\t\\\n+\t\t    RS6000_BTM_P10\t\t\t\t\t\\\n \t\t    | RS6000_BTM_POWERPC64,\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-#define BU_FUTURE_MISC_3(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n-  RS6000_BUILTIN_3 (FUTURE_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+#define BU_P10_MISC_3(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_3 (P10_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_FUTURE,\t\t\t/* MASK */\t\\\n+\t\t    RS6000_BTM_P10,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n@@ -2676,63 +2674,63 @@ BU_P9_OVERLOAD_2 (CMPRB,\t\"byte_in_range\")\n BU_P9_OVERLOAD_2 (CMPRB2,\t\"byte_in_either_range\")\n BU_P9_OVERLOAD_2 (CMPEQB,\t\"byte_in_set\")\n \f\n-/* Future architecture scalar built-ins.  */\n-BU_FUTURE_MISC_2 (CFUGED, \"cfuged\", CONST, cfuged)\n-BU_FUTURE_MISC_2 (CNTLZDM, \"cntlzdm\", CONST, cntlzdm)\n-BU_FUTURE_MISC_2 (CNTTZDM, \"cnttzdm\", CONST, cnttzdm)\n-BU_FUTURE_MISC_2 (PDEPD, \"pdepd\", CONST, pdepd)\n-BU_FUTURE_MISC_2 (PEXTD, \"pextd\", CONST, pextd)\n-\n-/* Future architecture vector built-ins.  */\n-BU_FUTURE_V_2 (VCLRLB, \"vclrlb\", CONST, vclrlb)\n-BU_FUTURE_V_2 (VCLRRB, \"vclrrb\", CONST, vclrrb)\n-BU_FUTURE_V_2 (VCFUGED, \"vcfuged\", CONST, vcfuged)\n-BU_FUTURE_V_2 (VCLZDM, \"vclzdm\", CONST, vclzdm)\n-BU_FUTURE_V_2 (VCTZDM, \"vctzdm\", CONST, vctzdm)\n-BU_FUTURE_V_2 (VPDEPD, \"vpdepd\", CONST, vpdepd)\n-BU_FUTURE_V_2 (VPEXTD, \"vpextd\", CONST, vpextd)\n-BU_FUTURE_V_2 (VGNB, \"vgnb\", CONST, vgnb)\n-BU_FUTURE_V_4 (XXEVAL, \"xxeval\", CONST, xxeval)\n-BU_FUTURE_V_2 (XXGENPCVM_V16QI, \"xxgenpcvm_v16qi\", CONST, xxgenpcvm_v16qi)\n-BU_FUTURE_V_2 (XXGENPCVM_V8HI, \"xxgenpcvm_v8hi\", CONST, xxgenpcvm_v8hi)\n-BU_FUTURE_V_2 (XXGENPCVM_V4SI, \"xxgenpcvm_v4si\", CONST, xxgenpcvm_v4si)\n-BU_FUTURE_V_2 (XXGENPCVM_V2DI, \"xxgenpcvm_v2di\", CONST, xxgenpcvm_v2di)\n-\n-BU_FUTURE_V_3 (VEXTRACTBL, \"vextdubvlx\", CONST, vextractlv16qi)\n-BU_FUTURE_V_3 (VEXTRACTHL, \"vextduhvlx\", CONST, vextractlv8hi)\n-BU_FUTURE_V_3 (VEXTRACTWL, \"vextduwvlx\", CONST, vextractlv4si)\n-BU_FUTURE_V_3 (VEXTRACTDL, \"vextddvlx\", CONST, vextractlv2di)\n-\n-BU_FUTURE_V_3 (VEXTRACTBR, \"vextdubvhx\", CONST, vextractrv16qi)\n-BU_FUTURE_V_3 (VEXTRACTHR, \"vextduhvhx\", CONST, vextractrv8hi)\n-BU_FUTURE_V_3 (VEXTRACTWR, \"vextduwvhx\", CONST, vextractrv4si)\n-BU_FUTURE_V_3 (VEXTRACTDR, \"vextddvhx\", CONST, vextractrv2di)\n-\n-BU_FUTURE_V_1 (VSTRIBR, \"vstribr\", CONST, vstrir_v16qi)\n-BU_FUTURE_V_1 (VSTRIHR, \"vstrihr\", CONST, vstrir_v8hi)\n-BU_FUTURE_V_1 (VSTRIBL, \"vstribl\", CONST, vstril_v16qi)\n-BU_FUTURE_V_1 (VSTRIHL, \"vstrihl\", CONST, vstril_v8hi)\n-\n-BU_FUTURE_V_1 (VSTRIBR_P, \"vstribr_p\", CONST, vstrir_p_v16qi)\n-BU_FUTURE_V_1 (VSTRIHR_P, \"vstrihr_p\", CONST, vstrir_p_v8hi)\n-BU_FUTURE_V_1 (VSTRIBL_P, \"vstribl_p\", CONST, vstril_p_v16qi)\n-BU_FUTURE_V_1 (VSTRIHL_P, \"vstrihl_p\", CONST, vstril_p_v8hi)\n-\n-/* Future architecture overloaded vector built-ins.  */\n-BU_FUTURE_OVERLOAD_2 (CLRL, \"clrl\")\n-BU_FUTURE_OVERLOAD_2 (CLRR, \"clrr\")\n-BU_FUTURE_OVERLOAD_2 (GNB, \"gnb\")\n-BU_FUTURE_OVERLOAD_4 (XXEVAL, \"xxeval\")\n-BU_FUTURE_OVERLOAD_2 (XXGENPCVM, \"xxgenpcvm\")\n-\n-BU_FUTURE_OVERLOAD_3 (EXTRACTL, \"extractl\")\n-BU_FUTURE_OVERLOAD_3 (EXTRACTH, \"extracth\")\n-\n-BU_FUTURE_OVERLOAD_1 (VSTRIR, \"strir\")\n-BU_FUTURE_OVERLOAD_1 (VSTRIL, \"stril\")\n-\n-BU_FUTURE_OVERLOAD_1 (VSTRIR_P, \"strir_p\")\n-BU_FUTURE_OVERLOAD_1 (VSTRIL_P, \"stril_p\")\n+/* Builtins for scalar instructions added in ISA 3.1 (power10).  */\n+BU_P10_MISC_2 (CFUGED, \"cfuged\", CONST, cfuged)\n+BU_P10_MISC_2 (CNTLZDM, \"cntlzdm\", CONST, cntlzdm)\n+BU_P10_MISC_2 (CNTTZDM, \"cnttzdm\", CONST, cnttzdm)\n+BU_P10_MISC_2 (PDEPD, \"pdepd\", CONST, pdepd)\n+BU_P10_MISC_2 (PEXTD, \"pextd\", CONST, pextd)\n+\n+/* Builtins for vector instructions added in ISA 3.1 (power10).  */\n+BU_P10V_2 (VCLRLB, \"vclrlb\", CONST, vclrlb)\n+BU_P10V_2 (VCLRRB, \"vclrrb\", CONST, vclrrb)\n+BU_P10V_2 (VCFUGED, \"vcfuged\", CONST, vcfuged)\n+BU_P10V_2 (VCLZDM, \"vclzdm\", CONST, vclzdm)\n+BU_P10V_2 (VCTZDM, \"vctzdm\", CONST, vctzdm)\n+BU_P10V_2 (VPDEPD, \"vpdepd\", CONST, vpdepd)\n+BU_P10V_2 (VPEXTD, \"vpextd\", CONST, vpextd)\n+BU_P10V_2 (VGNB, \"vgnb\", CONST, vgnb)\n+BU_P10V_4 (XXEVAL, \"xxeval\", CONST, xxeval)\n+BU_P10V_2 (XXGENPCVM_V16QI, \"xxgenpcvm_v16qi\", CONST, xxgenpcvm_v16qi)\n+BU_P10V_2 (XXGENPCVM_V8HI, \"xxgenpcvm_v8hi\", CONST, xxgenpcvm_v8hi)\n+BU_P10V_2 (XXGENPCVM_V4SI, \"xxgenpcvm_v4si\", CONST, xxgenpcvm_v4si)\n+BU_P10V_2 (XXGENPCVM_V2DI, \"xxgenpcvm_v2di\", CONST, xxgenpcvm_v2di)\n+\n+BU_P10V_3 (VEXTRACTBL, \"vextdubvlx\", CONST, vextractlv16qi)\n+BU_P10V_3 (VEXTRACTHL, \"vextduhvlx\", CONST, vextractlv8hi)\n+BU_P10V_3 (VEXTRACTWL, \"vextduwvlx\", CONST, vextractlv4si)\n+BU_P10V_3 (VEXTRACTDL, \"vextddvlx\", CONST, vextractlv2di)\n+\n+BU_P10V_3 (VEXTRACTBR, \"vextdubvhx\", CONST, vextractrv16qi)\n+BU_P10V_3 (VEXTRACTHR, \"vextduhvhx\", CONST, vextractrv8hi)\n+BU_P10V_3 (VEXTRACTWR, \"vextduwvhx\", CONST, vextractrv4si)\n+BU_P10V_3 (VEXTRACTDR, \"vextddvhx\", CONST, vextractrv2di)\n+\n+BU_P10V_1 (VSTRIBR, \"vstribr\", CONST, vstrir_v16qi)\n+BU_P10V_1 (VSTRIHR, \"vstrihr\", CONST, vstrir_v8hi)\n+BU_P10V_1 (VSTRIBL, \"vstribl\", CONST, vstril_v16qi)\n+BU_P10V_1 (VSTRIHL, \"vstrihl\", CONST, vstril_v8hi)\n+\n+BU_P10V_1 (VSTRIBR_P, \"vstribr_p\", CONST, vstrir_p_v16qi)\n+BU_P10V_1 (VSTRIHR_P, \"vstrihr_p\", CONST, vstrir_p_v8hi)\n+BU_P10V_1 (VSTRIBL_P, \"vstribl_p\", CONST, vstril_p_v16qi)\n+BU_P10V_1 (VSTRIHL_P, \"vstrihl_p\", CONST, vstril_p_v8hi)\n+\n+/* Overloaded vector builtins for ISA 3.1 (power10).  */\n+BU_P10_OVERLOAD_2 (CLRL, \"clrl\")\n+BU_P10_OVERLOAD_2 (CLRR, \"clrr\")\n+BU_P10_OVERLOAD_2 (GNB, \"gnb\")\n+BU_P10_OVERLOAD_4 (XXEVAL, \"xxeval\")\n+BU_P10_OVERLOAD_2 (XXGENPCVM, \"xxgenpcvm\")\n+\n+BU_P10_OVERLOAD_3 (EXTRACTL, \"extractl\")\n+BU_P10_OVERLOAD_3 (EXTRACTH, \"extracth\")\n+\n+BU_P10_OVERLOAD_1 (VSTRIR, \"strir\")\n+BU_P10_OVERLOAD_1 (VSTRIL, \"stril\")\n+\n+BU_P10_OVERLOAD_1 (VSTRIR_P, \"strir_p\")\n+BU_P10_OVERLOAD_1 (VSTRIL_P, \"stril_p\")\n \f\n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox_v2di)\n@@ -2867,7 +2865,7 @@ BU_SPECIAL_X (RS6000_BUILTIN_CPU_SUPPORTS, \"__builtin_cpu_supports\",\n BU_SPECIAL_X (RS6000_BUILTIN_CFSTRING, \"__builtin_cfstring\", RS6000_BTM_ALWAYS,\n \t      RS6000_BTC_MISC)\n \n-/* FUTURE MMA builtins.  */\n+/* POWER10 MMA builtins.  */\n BU_VSX_1 (XVCVBF16SP,\t    \"xvcvbf16sp\",\tMISC, vsx_xvcvbf16sp)\n BU_VSX_1 (XVCVSPBF16,\t    \"xvcvspbf16\",\tMISC, vsx_xvcvspbf16)\n "}, {"sha": "cb7d34dcdb5fe216999a79e57308378890266d57", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -448,8 +448,8 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR8\");\n   if ((flags & OPTION_MASK_MODULO) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR9\");\n-  if ((flags & OPTION_MASK_FUTURE) != 0)\n-    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR_FUTURE\");\n+  if ((flags & OPTION_MASK_POWER10) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR10\");\n   if ((flags & OPTION_MASK_SOFT_FLOAT) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_SOFT_FLOAT\");\n   if ((flags & OPTION_MASK_RECIP_PRECISION) != 0)\n@@ -1800,7 +1800,7 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t      unsupported_builtin = true;\n \t  }\n       }\n-    else if (fcode == FUTURE_BUILTIN_VEC_XXEVAL)\n+    else if (fcode == P10_BUILTIN_VEC_XXEVAL)\n       {\n \t/* Need to special case __builtin_vec_xxeval because this takes\n \t   4 arguments, and the existing infrastructure handles no"}, {"sha": "81816a5be6b482d01c0bc65699406b922409fb56", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -5518,112 +5518,112 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI },\n \n-  /* FUTURE overloaded builtin functions, */\n-  { FUTURE_BUILTIN_VEC_CLRL, FUTURE_BUILTIN_VCLRLB,\n+  /* Overloaded built-in functions for ISA3.1 (power10). */\n+  { P10_BUILTIN_VEC_CLRL, P10_BUILTIN_VCLRLB,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_UINTSI, 0 },\n-  { FUTURE_BUILTIN_VEC_CLRL, FUTURE_BUILTIN_VCLRLB,\n+  { P10_BUILTIN_VEC_CLRL, P10_BUILTIN_VCLRLB,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_UINTSI, 0 },\n-  { FUTURE_BUILTIN_VEC_CLRR, FUTURE_BUILTIN_VCLRRB,\n+  { P10_BUILTIN_VEC_CLRR, P10_BUILTIN_VCLRRB,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_UINTSI, 0 },\n-  { FUTURE_BUILTIN_VEC_CLRR, FUTURE_BUILTIN_VCLRRB,\n+  { P10_BUILTIN_VEC_CLRR, P10_BUILTIN_VCLRRB,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_UINTSI, 0 },\n \n-  { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n+  { P10_BUILTIN_VEC_GNB, P10_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_UINTQI, 0 },\n-  { FUTURE_BUILTIN_VEC_XXGENPCVM, FUTURE_BUILTIN_XXGENPCVM_V2DI,\n+  { P10_BUILTIN_VEC_XXGENPCVM, P10_BUILTIN_XXGENPCVM_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI, 0 },\n-  { FUTURE_BUILTIN_VEC_XXGENPCVM, FUTURE_BUILTIN_XXGENPCVM_V4SI,\n+  { P10_BUILTIN_VEC_XXGENPCVM, P10_BUILTIN_XXGENPCVM_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, 0 },\n-  { FUTURE_BUILTIN_VEC_XXGENPCVM, FUTURE_BUILTIN_XXGENPCVM_V8HI,\n+  { P10_BUILTIN_VEC_XXGENPCVM, P10_BUILTIN_XXGENPCVM_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, 0 },\n-  { FUTURE_BUILTIN_VEC_XXGENPCVM, FUTURE_BUILTIN_XXGENPCVM_V16QI,\n+  { P10_BUILTIN_VEC_XXGENPCVM, P10_BUILTIN_XXGENPCVM_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_INTSI, 0 },\n \n   /* The overloaded XXEVAL definitions are handled specially because the\n      fourth unsigned char operand is not encoded in this table.  */\n-  { FUTURE_BUILTIN_VEC_XXEVAL, FUTURE_BUILTIN_XXEVAL,\n+  { P10_BUILTIN_VEC_XXEVAL, P10_BUILTIN_XXEVAL,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI },\n-  { FUTURE_BUILTIN_VEC_XXEVAL, FUTURE_BUILTIN_XXEVAL,\n+  { P10_BUILTIN_VEC_XXEVAL, P10_BUILTIN_XXEVAL,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI },\n-  { FUTURE_BUILTIN_VEC_XXEVAL, FUTURE_BUILTIN_XXEVAL,\n+  { P10_BUILTIN_VEC_XXEVAL, P10_BUILTIN_XXEVAL,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI },\n-  { FUTURE_BUILTIN_VEC_XXEVAL, FUTURE_BUILTIN_XXEVAL,\n+  { P10_BUILTIN_VEC_XXEVAL, P10_BUILTIN_XXEVAL,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI },\n-  { FUTURE_BUILTIN_VEC_XXEVAL, FUTURE_BUILTIN_XXEVAL,\n+  { P10_BUILTIN_VEC_XXEVAL, P10_BUILTIN_XXEVAL,\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI,\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V1TI },\n \n-  { FUTURE_BUILTIN_VEC_EXTRACTL, FUTURE_BUILTIN_VEXTRACTBL,\n+  { P10_BUILTIN_VEC_EXTRACTL, P10_BUILTIN_VEXTRACTBL,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI },\n-  { FUTURE_BUILTIN_VEC_EXTRACTL, FUTURE_BUILTIN_VEXTRACTHL,\n+  { P10_BUILTIN_VEC_EXTRACTL, P10_BUILTIN_VEXTRACTHL,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTQI },\n-  { FUTURE_BUILTIN_VEC_EXTRACTL, FUTURE_BUILTIN_VEXTRACTWL,\n+  { P10_BUILTIN_VEC_EXTRACTL, P10_BUILTIN_VEXTRACTWL,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI },\n-  { FUTURE_BUILTIN_VEC_EXTRACTL, FUTURE_BUILTIN_VEXTRACTDL,\n+  { P10_BUILTIN_VEC_EXTRACTL, P10_BUILTIN_VEXTRACTDL,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI },\n \n-  { FUTURE_BUILTIN_VEC_EXTRACTH, FUTURE_BUILTIN_VEXTRACTBR,\n+  { P10_BUILTIN_VEC_EXTRACTH, P10_BUILTIN_VEXTRACTBR,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI },\n-  { FUTURE_BUILTIN_VEC_EXTRACTH, FUTURE_BUILTIN_VEXTRACTHR,\n+  { P10_BUILTIN_VEC_EXTRACTH, P10_BUILTIN_VEXTRACTHR,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTQI },\n-  { FUTURE_BUILTIN_VEC_EXTRACTH, FUTURE_BUILTIN_VEXTRACTWR,\n+  { P10_BUILTIN_VEC_EXTRACTH, P10_BUILTIN_VEXTRACTWR,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI },\n-  { FUTURE_BUILTIN_VEC_EXTRACTH, FUTURE_BUILTIN_VEXTRACTDR,\n+  { P10_BUILTIN_VEC_EXTRACTH, P10_BUILTIN_VEXTRACTDR,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI },\n \n-  { FUTURE_BUILTIN_VEC_VSTRIL, FUTURE_BUILTIN_VSTRIBL,\n+  { P10_BUILTIN_VEC_VSTRIL, P10_BUILTIN_VSTRIBL,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n-  { FUTURE_BUILTIN_VEC_VSTRIL, FUTURE_BUILTIN_VSTRIBL,\n+  { P10_BUILTIN_VEC_VSTRIL, P10_BUILTIN_VSTRIBL,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n \n-  { FUTURE_BUILTIN_VEC_VSTRIL, FUTURE_BUILTIN_VSTRIHL,\n+  { P10_BUILTIN_VEC_VSTRIL, P10_BUILTIN_VSTRIHL,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n-  { FUTURE_BUILTIN_VEC_VSTRIL, FUTURE_BUILTIN_VSTRIHL,\n+  { P10_BUILTIN_VEC_VSTRIL, P10_BUILTIN_VSTRIHL,\n     RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0, 0 },\n \n-  { FUTURE_BUILTIN_VEC_VSTRIL_P, FUTURE_BUILTIN_VSTRIBL_P,\n+  { P10_BUILTIN_VEC_VSTRIL_P, P10_BUILTIN_VSTRIBL_P,\n     RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n-  { FUTURE_BUILTIN_VEC_VSTRIL_P, FUTURE_BUILTIN_VSTRIBL_P,\n+  { P10_BUILTIN_VEC_VSTRIL_P, P10_BUILTIN_VSTRIBL_P,\n     RS6000_BTI_INTSI, RS6000_BTI_V16QI, 0, 0 },\n \n-  { FUTURE_BUILTIN_VEC_VSTRIL_P, FUTURE_BUILTIN_VSTRIHL_P,\n+  { P10_BUILTIN_VEC_VSTRIL_P, P10_BUILTIN_VSTRIHL_P,\n     RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n-  { FUTURE_BUILTIN_VEC_VSTRIL_P, FUTURE_BUILTIN_VSTRIHL_P,\n+  { P10_BUILTIN_VEC_VSTRIL_P, P10_BUILTIN_VSTRIHL_P,\n     RS6000_BTI_INTSI, RS6000_BTI_V8HI, 0, 0 },\n \n-  { FUTURE_BUILTIN_VEC_VSTRIR, FUTURE_BUILTIN_VSTRIBR,\n+  { P10_BUILTIN_VEC_VSTRIR, P10_BUILTIN_VSTRIBR,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n-  { FUTURE_BUILTIN_VEC_VSTRIR, FUTURE_BUILTIN_VSTRIBR,\n+  { P10_BUILTIN_VEC_VSTRIR, P10_BUILTIN_VSTRIBR,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n \n-  { FUTURE_BUILTIN_VEC_VSTRIR, FUTURE_BUILTIN_VSTRIHR,\n+  { P10_BUILTIN_VEC_VSTRIR, P10_BUILTIN_VSTRIHR,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n-  { FUTURE_BUILTIN_VEC_VSTRIR, FUTURE_BUILTIN_VSTRIHR,\n+  { P10_BUILTIN_VEC_VSTRIR, P10_BUILTIN_VSTRIHR,\n     RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0, 0 },\n \n-  { FUTURE_BUILTIN_VEC_VSTRIR_P, FUTURE_BUILTIN_VSTRIBR_P,\n+  { P10_BUILTIN_VEC_VSTRIR_P, P10_BUILTIN_VSTRIBR_P,\n     RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n-  { FUTURE_BUILTIN_VEC_VSTRIR_P, FUTURE_BUILTIN_VSTRIBR_P,\n+  { P10_BUILTIN_VEC_VSTRIR_P, P10_BUILTIN_VSTRIBR_P,\n     RS6000_BTI_INTSI, RS6000_BTI_V16QI, 0, 0 },\n \n-  { FUTURE_BUILTIN_VEC_VSTRIR_P, FUTURE_BUILTIN_VSTRIHR_P,\n+  { P10_BUILTIN_VEC_VSTRIR_P, P10_BUILTIN_VSTRIHR_P,\n     RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n-  { FUTURE_BUILTIN_VEC_VSTRIR_P, FUTURE_BUILTIN_VSTRIHR_P,\n+  { P10_BUILTIN_VEC_VSTRIR_P, P10_BUILTIN_VSTRIHR_P,\n     RS6000_BTI_INTSI, RS6000_BTI_V8HI, 0, 0 },\n \n   { RS6000_BUILTIN_NONE, RS6000_BUILTIN_NONE, 0, 0, 0, 0 }\n@@ -10601,7 +10601,7 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n \t}\n       break;\n \n-    case FUTURE_BUILTIN_VEC_XXGENPCVM:\n+    case P10_BUILTIN_VEC_XXGENPCVM:\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       STRIP_NOPS (arg1);\n \n@@ -10835,8 +10835,8 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n \t   \"-m64\");\n   else if ((fnmask & RS6000_BTM_P9_MISC) == RS6000_BTM_P9_MISC)\n     error (\"%qs requires the %qs option\", name, \"-mcpu=power9\");\n-  else if ((fnmask & RS6000_BTM_FUTURE) != 0)\n-    error (\"%qs requires the %qs option\", name, \"-mcpu=future\");\n+  else if ((fnmask & RS6000_BTM_P10) != 0)\n+    error (\"%qs requires the %qs option\", name, \"-mcpu=power10\");\n   else if ((fnmask & RS6000_BTM_MMA) != 0)\n     error (\"%qs requires the %qs option\", name, \"-mmma\");\n   else if ((fnmask & RS6000_BTM_LDBL128) == RS6000_BTM_LDBL128)\n@@ -13606,7 +13606,7 @@ builtin_quaternary_function_type (machine_mode mode_ret,\n \n   switch (builtin) {\n \n-  case FUTURE_BUILTIN_XXEVAL:\n+  case P10_BUILTIN_XXEVAL:\n     gcc_assert ((mode_ret == V2DImode)\n \t\t&& (mode_arg0 == V2DImode)\n \t\t&& (mode_arg1 == V2DImode)\n@@ -13737,16 +13737,16 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case P8V_BUILTIN_ORC_V4SI_UNS:\n     case P8V_BUILTIN_ORC_V2DI_UNS:\n     case P8V_BUILTIN_ORC_V1TI_UNS:\n-    case FUTURE_BUILTIN_VCFUGED:\n-    case FUTURE_BUILTIN_VCLZDM:\n-    case FUTURE_BUILTIN_VCTZDM:\n-    case FUTURE_BUILTIN_VGNB:\n-    case FUTURE_BUILTIN_VPDEPD:\n-    case FUTURE_BUILTIN_VPEXTD:\n-    case FUTURE_BUILTIN_XXGENPCVM_V16QI:\n-    case FUTURE_BUILTIN_XXGENPCVM_V8HI:\n-    case FUTURE_BUILTIN_XXGENPCVM_V4SI:\n-    case FUTURE_BUILTIN_XXGENPCVM_V2DI:\n+    case P10_BUILTIN_VCFUGED:\n+    case P10_BUILTIN_VCLZDM:\n+    case P10_BUILTIN_VCTZDM:\n+    case P10_BUILTIN_VGNB:\n+    case P10_BUILTIN_VPDEPD:\n+    case P10_BUILTIN_VPEXTD:\n+    case P10_BUILTIN_XXGENPCVM_V16QI:\n+    case P10_BUILTIN_XXGENPCVM_V8HI:\n+    case P10_BUILTIN_XXGENPCVM_V4SI:\n+    case P10_BUILTIN_XXGENPCVM_V2DI:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;\n@@ -13777,14 +13777,14 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case CRYPTO_BUILTIN_VSHASIGMAW:\n     case CRYPTO_BUILTIN_VSHASIGMAD:\n     case CRYPTO_BUILTIN_VSHASIGMA:\n-    case FUTURE_BUILTIN_VEXTRACTBL:\n-    case FUTURE_BUILTIN_VEXTRACTHL:\n-    case FUTURE_BUILTIN_VEXTRACTWL:\n-    case FUTURE_BUILTIN_VEXTRACTDL:\n-    case FUTURE_BUILTIN_VEXTRACTBR:\n-    case FUTURE_BUILTIN_VEXTRACTHR:\n-    case FUTURE_BUILTIN_VEXTRACTWR:\n-    case FUTURE_BUILTIN_VEXTRACTDR:\n+    case P10_BUILTIN_VEXTRACTBL:\n+    case P10_BUILTIN_VEXTRACTHL:\n+    case P10_BUILTIN_VEXTRACTWL:\n+    case P10_BUILTIN_VEXTRACTDL:\n+    case P10_BUILTIN_VEXTRACTBR:\n+    case P10_BUILTIN_VEXTRACTHR:\n+    case P10_BUILTIN_VEXTRACTWR:\n+    case P10_BUILTIN_VEXTRACTDR:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;"}, {"sha": "8d2c1ffd6cf7b095995e1603fb9b18ddaabb2a93", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -75,15 +75,14 @@\n \t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_P9_VECTOR)\n \n-/* Flags that need to be turned off if -mno-future.  */\n-#define OTHER_FUTURE_MASKS\t(OPTION_MASK_MMA\t\t\t\\\n+/* Flags that need to be turned off if -mno-power10.  */\n+#define OTHER_POWER10_MASKS\t(OPTION_MASK_MMA\t\t\t\\\n \t\t\t\t | OPTION_MASK_PCREL\t\t\t\\\n \t\t\t\t | OPTION_MASK_PREFIXED)\n \n-/* Support for a future processor's features.  */\n-#define ISA_FUTURE_MASKS_SERVER\t(ISA_3_0_MASKS_SERVER\t\t\t\\\n-\t\t\t\t | OPTION_MASK_FUTURE\t\t\t\\\n-\t\t\t\t | OTHER_FUTURE_MASKS)\n+#define ISA_3_1_MASKS_SERVER\t(ISA_3_0_MASKS_SERVER\t\t\t\\\n+\t\t\t\t | OPTION_MASK_POWER10\t\t\t\\\n+\t\t\t\t | OTHER_POWER10_MASKS)\n \n /* Flags that need to be turned off if -mno-power9-vector.  */\n #define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\\n@@ -129,7 +128,7 @@\n \t\t\t\t | OPTION_MASK_FLOAT128_HW\t\t\\\n \t\t\t\t | OPTION_MASK_FLOAT128_KEYWORD\t\t\\\n \t\t\t\t | OPTION_MASK_FPRND\t\t\t\\\n-\t\t\t\t | OPTION_MASK_FUTURE\t\t\t\\\n+\t\t\t\t | OPTION_MASK_POWER10\t\t\t\\\n \t\t\t\t | OPTION_MASK_HTM\t\t\t\\\n \t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n \t\t\t\t | OPTION_MASK_MFCRF\t\t\t\\\n@@ -243,9 +242,8 @@ RS6000_CPU (\"power6x\", PROCESSOR_POWER6, MASK_POWERPC64 | MASK_PPC_GPOPT\n RS6000_CPU (\"power7\", PROCESSOR_POWER7, MASK_POWERPC64 | ISA_2_6_MASKS_SERVER)\n RS6000_CPU (\"power8\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n RS6000_CPU (\"power9\", PROCESSOR_POWER9, MASK_POWERPC64 | ISA_3_0_MASKS_SERVER)\n+RS6000_CPU (\"power10\", PROCESSOR_POWER10, MASK_POWERPC64 | ISA_3_1_MASKS_SERVER)\n RS6000_CPU (\"powerpc\", PROCESSOR_POWERPC, 0)\n RS6000_CPU (\"powerpc64\", PROCESSOR_POWERPC64, MASK_PPC_GFXOPT | MASK_POWERPC64)\n RS6000_CPU (\"powerpc64le\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n RS6000_CPU (\"rs64\", PROCESSOR_RS64A, MASK_PPC_GFXOPT | MASK_POWERPC64)\n-RS6000_CPU (\"future\", PROCESSOR_FUTURE, MASK_POWERPC64\n-\t    | ISA_FUTURE_MASKS_SERVER)"}, {"sha": "eaf6edc87546dcc74f9a09197fd80ae98d272768", "filename": "gcc/config/rs6000/rs6000-opts.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -61,8 +61,7 @@ enum processor_type\n    PROCESSOR_POWER7,\n    PROCESSOR_POWER8,\n    PROCESSOR_POWER9,\n-\n-   PROCESSOR_FUTURE,\n+   PROCESSOR_POWER10,\n \n    PROCESSOR_RS64A,\n    PROCESSOR_MPCCORE,"}, {"sha": "c35d93180ca17e133a3ca90824e39136324168f2", "filename": "gcc/config/rs6000/rs6000-string.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-string.c?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -963,7 +963,7 @@ expand_compare_loop (rtx operands[])\n \t  max_bytes = 64;\n       break;\n     case PROCESSOR_POWER9:\n-    case PROCESSOR_FUTURE:\n+    case PROCESSOR_POWER10:\n       if (bytes_is_const)\n \tmax_bytes = 191;\n       else"}, {"sha": "8ae2b6030bb56ec3cf3cc1458720822f6848af47", "filename": "gcc/config/rs6000/rs6000-tables.opt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -183,17 +183,17 @@ EnumValue\n Enum(rs6000_cpu_opt_value) String(power9) Value(51)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc) Value(52)\n+Enum(rs6000_cpu_opt_value) String(power10) Value(52)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc64) Value(53)\n+Enum(rs6000_cpu_opt_value) String(powerpc) Value(53)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc64le) Value(54)\n+Enum(rs6000_cpu_opt_value) String(powerpc64) Value(54)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(rs64) Value(55)\n+Enum(rs6000_cpu_opt_value) String(powerpc64le) Value(55)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(future) Value(56)\n+Enum(rs6000_cpu_opt_value) String(rs64) Value(56)\n "}, {"sha": "fef72884b31decd8b4bef67f2ee4db57cf0e6601", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -259,8 +259,8 @@ enum {\n   CLONE_ISA_2_05,\t\t\t/* ISA 2.05 (power6).  */\n   CLONE_ISA_2_06,\t\t\t/* ISA 2.06 (power7).  */\n   CLONE_ISA_2_07,\t\t\t/* ISA 2.07 (power8).  */\n-  CLONE_ISA_3_00,\t\t\t/* ISA 3.00 (power9).  */\n-  CLONE_ISA_3_1,\t\t\t/* ISA 3.1 (future).  */\n+  CLONE_ISA_3_00,\t\t\t/* ISA 3.0 (power9).  */\n+  CLONE_ISA_3_1,\t\t\t/* ISA 3.1 (power10).  */\n   CLONE_MAX\n };\n \n@@ -275,8 +275,8 @@ static const struct clone_map rs6000_clone_map[CLONE_MAX] = {\n   { OPTION_MASK_CMPB,\t\t\"arch_2_05\" },\t/* ISA 2.05 (power6).  */\n   { OPTION_MASK_POPCNTD,\t\"arch_2_06\" },\t/* ISA 2.06 (power7).  */\n   { OPTION_MASK_P8_VECTOR,\t\"arch_2_07\" },\t/* ISA 2.07 (power8).  */\n-  { OPTION_MASK_P9_VECTOR,\t\"arch_3_00\" },\t/* ISA 3.00 (power9).  */\n-  { OPTION_MASK_FUTURE,\t\t\"arch_3_1\" },\t/* ISA 3.1 (future).  */\n+  { OPTION_MASK_P9_VECTOR,\t\"arch_3_00\" },\t/* ISA 3.0 (power9).  */\n+  { OPTION_MASK_POWER10,\t\"arch_3_1\" },\t/* ISA 3.1 (power10).  */\n };\n \n \n@@ -3401,7 +3401,7 @@ rs6000_builtin_mask_calculate (void)\n \t  | ((TARGET_FLOAT128_TYPE)\t    ? RS6000_BTM_FLOAT128  : 0)\n \t  | ((TARGET_FLOAT128_HW)\t    ? RS6000_BTM_FLOAT128_HW : 0)\n \t  | ((TARGET_MMA)\t\t    ? RS6000_BTM_MMA\t   : 0)\n-\t  | ((TARGET_FUTURE)\t\t    ? RS6000_BTM_FUTURE    : 0));\n+\t  | ((TARGET_POWER10)               ? RS6000_BTM_P10       : 0));\n }\n \n /* Implement TARGET_MD_ASM_ADJUST.  All asm statements are considered\n@@ -4094,15 +4094,15 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags &= ~OPTION_MASK_FLOAT128_HW;\n     }\n \n-  /* Enable -mprefixed by default on 'future' systems.  */\n-  if (TARGET_FUTURE && (rs6000_isa_flags_explicit & OPTION_MASK_PREFIXED) == 0)\n+  /* Enable -mprefixed by default on power10 systems.  */\n+  if (TARGET_POWER10 && (rs6000_isa_flags_explicit & OPTION_MASK_PREFIXED) == 0)\n     rs6000_isa_flags |= OPTION_MASK_PREFIXED;\n \n-  /* -mprefixed requires -mcpu=future.  */\n-  else if (TARGET_PREFIXED && !TARGET_FUTURE)\n+  /* -mprefixed requires -mcpu=power10 (or later).  */\n+  else if (TARGET_PREFIXED && !TARGET_POWER10)\n     {\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_PREFIXED) != 0)\n-\terror (\"%qs requires %qs\", \"-mprefixed\", \"-mcpu=future\");\n+\terror (\"%qs requires %qs\", \"-mprefixed\", \"-mcpu=power10\");\n \n       rs6000_isa_flags &= ~OPTION_MASK_PREFIXED;\n     }\n@@ -4264,11 +4264,11 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags &= ~OPTION_MASK_PCREL;\n     }\n \n-  /* Turn off vector pair/mma options on non-future systems.  */\n-  if (!TARGET_FUTURE && TARGET_MMA)\n+  /* Turn off vector pair/mma options on non-power10 systems.  */\n+  if (!TARGET_POWER10 && TARGET_MMA)\n     {\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_MMA) != 0)\n-\terror (\"%qs requires %qs\", \"-mmma\", \"-mcpu=future\");\n+\terror (\"%qs requires %qs\", \"-mmma\", \"-mcpu=power10\");\n \n       rs6000_isa_flags &= ~OPTION_MASK_MMA;\n     }\n@@ -4282,7 +4282,7 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t&& rs6000_tune != PROCESSOR_POWER7\n \t\t\t&& rs6000_tune != PROCESSOR_POWER8\n \t\t\t&& rs6000_tune != PROCESSOR_POWER9\n-\t\t\t&& rs6000_tune != PROCESSOR_FUTURE\n+\t\t\t&& rs6000_tune != PROCESSOR_POWER10\n \t\t\t&& rs6000_tune != PROCESSOR_PPCA2\n \t\t\t&& rs6000_tune != PROCESSOR_CELL\n \t\t\t&& rs6000_tune != PROCESSOR_PPC476);\n@@ -4296,7 +4296,7 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t\t || rs6000_tune == PROCESSOR_POWER7\n \t\t\t\t || rs6000_tune == PROCESSOR_POWER8\n \t\t\t\t || rs6000_tune == PROCESSOR_POWER9\n-\t\t\t\t || rs6000_tune == PROCESSOR_FUTURE\n+\t\t\t\t || rs6000_tune == PROCESSOR_POWER10\n \t\t\t\t || rs6000_tune == PROCESSOR_PPCE500MC\n \t\t\t\t || rs6000_tune == PROCESSOR_PPCE500MC64\n \t\t\t\t || rs6000_tune == PROCESSOR_PPCE5500\n@@ -4592,7 +4592,7 @@ rs6000_option_override_internal (bool global_init_p)\n \tbreak;\n \n       case PROCESSOR_POWER9:\n-      case PROCESSOR_FUTURE:\n+      case PROCESSOR_POWER10:\n \trs6000_cost = &power9_cost;\n \tbreak;\n \n@@ -5533,8 +5533,8 @@ rs6000_machine_from_flags (void)\n   /* Disable the flags that should never influence the .machine selection.  */\n   flags &= ~(OPTION_MASK_PPC_GFXOPT | OPTION_MASK_PPC_GPOPT);\n \n-  if ((flags & (ISA_FUTURE_MASKS_SERVER & ~ISA_3_0_MASKS_SERVER)) != 0)\n-    return \"future\";\n+  if ((flags & (ISA_3_1_MASKS_SERVER & ~ISA_3_0_MASKS_SERVER)) != 0)\n+    return \"power10\";\n   if ((flags & (ISA_3_0_MASKS_SERVER & ~ISA_2_7_MASKS_SERVER)) != 0)\n     return \"power9\";\n   if ((flags & (ISA_2_7_MASKS_SERVER & ~ISA_2_6_MASKS_SERVER)) != 0)\n@@ -8104,7 +8104,7 @@ avoiding_indexed_address_p (machine_mode mode)\n   unsigned int msize = GET_MODE_SIZE (mode);\n \n   /* Avoid indexed addressing for modes that have non-indexed load/store\n-     instruction forms.  On the future system, vector pairs have an indexed\n+     instruction forms.  On power10, vector pairs have an indexed\n      form, but vector quads don't.  */\n   if (msize > 16)\n     return msize != 32;\n@@ -9192,7 +9192,7 @@ rs6000_reassociation_width (unsigned int opc ATTRIBUTE_UNUSED,\n     {\n     case PROCESSOR_POWER8:\n     case PROCESSOR_POWER9:\n-    case PROCESSOR_FUTURE:\n+    case PROCESSOR_POWER10:\n       if (DECIMAL_FLOAT_MODE_P (mode))\n \treturn 1;\n       if (VECTOR_MODE_P (mode))\n@@ -17162,7 +17162,7 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n \n \t/* Separate a load from a narrower, dependent store.  */\n \tif ((rs6000_sched_groups || rs6000_tune == PROCESSOR_POWER9\n-\t     || rs6000_tune == PROCESSOR_FUTURE)\n+\t     || rs6000_tune == PROCESSOR_POWER10)\n \t    && GET_CODE (PATTERN (insn)) == SET\n \t    && GET_CODE (PATTERN (dep_insn)) == SET\n \t    && MEM_P (XEXP (PATTERN (insn), 1))\n@@ -17200,7 +17200,7 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n \t\t || rs6000_tune == PROCESSOR_POWER7\n \t\t || rs6000_tune == PROCESSOR_POWER8\n \t\t || rs6000_tune == PROCESSOR_POWER9\n-\t\t || rs6000_tune == PROCESSOR_FUTURE\n+\t\t || rs6000_tune == PROCESSOR_POWER10\n                  || rs6000_tune == PROCESSOR_CELL)\n                 && recog_memoized (dep_insn)\n                 && (INSN_CODE (dep_insn) >= 0))\n@@ -17780,7 +17780,7 @@ rs6000_issue_rate (void)\n   case PROCESSOR_POWER8:\n     return 7;\n   case PROCESSOR_POWER9:\n-  case PROCESSOR_FUTURE:\n+  case PROCESSOR_POWER10:\n     return 6;\n   default:\n     return 1;\n@@ -21545,7 +21545,7 @@ rs6000_register_move_cost (machine_mode mode,\n \t\t allocation a move within the same class might turn\n \t\t out to be a nop.  */\n \t      if (rs6000_tune == PROCESSOR_POWER9\n-\t\t  || rs6000_tune == PROCESSOR_FUTURE)\n+\t\t  || rs6000_tune == PROCESSOR_POWER10)\n \t\tret = 3 * hard_regno_nregs (FIRST_GPR_REGNO, mode);\n \t      else\n \t\tret = 4 * hard_regno_nregs (FIRST_GPR_REGNO, mode);\n@@ -23147,7 +23147,7 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"float128\",\t\t\tOPTION_MASK_FLOAT128_KEYWORD,\tfalse, true  },\n   { \"float128-hardware\",\tOPTION_MASK_FLOAT128_HW,\tfalse, true  },\n   { \"fprnd\",\t\t\tOPTION_MASK_FPRND,\t\tfalse, true  },\n-  { \"future\",\t\t\tOPTION_MASK_FUTURE,\t\tfalse, true  },\n+  { \"power10\",\t\t\tOPTION_MASK_POWER10,\t\tfalse, true  },\n   { \"hard-dfp\",\t\t\tOPTION_MASK_DFP,\t\tfalse, true  },\n   { \"htm\",\t\t\tOPTION_MASK_HTM,\t\tfalse, true  },\n   { \"isel\",\t\t\tOPTION_MASK_ISEL,\t\tfalse, true  },\n@@ -23225,7 +23225,7 @@ static struct rs6000_opt_mask const rs6000_builtin_mask_names[] =\n   { \"float128\",\t\t RS6000_BTM_FLOAT128,   false, false },\n   { \"float128-hw\",\t RS6000_BTM_FLOAT128_HW,false, false },\n   { \"mma\",\t\t RS6000_BTM_MMA,\tfalse, false },\n-  { \"future\",\t\t RS6000_BTM_FUTURE,\tfalse, false },\n+  { \"power10\",\t\t RS6000_BTM_P10,\tfalse, false },\n };\n \n /* Option variables that we want to support inside attribute((target)) and\n@@ -23914,7 +23914,7 @@ rs6000_disable_incompatible_switches (void)\n     const HOST_WIDE_INT dep_flags;\t/* flags that depend on this option.  */\n     const char *const name;\t\t/* name of the switch.  */\n   } flags[] = {\n-    { OPTION_MASK_FUTURE,\tOTHER_FUTURE_MASKS,\t\"future\"\t},\n+    { OPTION_MASK_POWER10,\tOTHER_POWER10_MASKS,\t\"power10\"\t},\n     { OPTION_MASK_P9_VECTOR,\tOTHER_P9_VECTOR_MASKS,\t\"power9-vector\"\t},\n     { OPTION_MASK_P8_VECTOR,\tOTHER_P8_VECTOR_MASKS,\t\"power8-vector\"\t},\n     { OPTION_MASK_VSX,\t\tOTHER_VSX_VECTOR_MASKS,\t\"vsx\"\t\t},"}, {"sha": "bbd8060e143321d51a835521364c2f623dae8ffc", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -104,6 +104,7 @@\n    to the assembler if -mpower9-vector was also used.  */\n #define ASM_CPU_SPEC \\\n \"%{mcpu=native: %(asm_cpu_native); \\\n+  mcpu=power10: -mpower10; \\\n   mcpu=power9: -mpower9; \\\n   mcpu=power8|mcpu=powerpc64le: %{mpower9-vector: -mpower9;: -mpower8}; \\\n   mcpu=power7: -mpower7; \\\n@@ -159,7 +160,6 @@\n   mcpu=e5500: -me5500; \\\n   mcpu=e6500: -me6500; \\\n   mcpu=titan: -mtitan; \\\n-  mcpu=future: -mfuture; \\\n   !mcpu*: %{mpower9-vector: -mpower9; \\\n \t    mpower8-vector|mcrypto|mdirect-move|mhtm: -mpower8; \\\n \t    mvsx: -mpower7; \\\n@@ -538,7 +538,7 @@ extern int rs6000_vector_align[];\n #define MASK_STRICT_ALIGN\t\tOPTION_MASK_STRICT_ALIGN\n #define MASK_UPDATE\t\t\tOPTION_MASK_UPDATE\n #define MASK_VSX\t\t\tOPTION_MASK_VSX\n-#define MASK_FUTURE\t\t\tOPTION_MASK_FUTURE\n+#define MASK_POWER10\t\t\tOPTION_MASK_POWER10\n \n #ifndef IN_LIBGCC2\n #define MASK_POWERPC64\t\t\tOPTION_MASK_POWERPC64\n@@ -2321,7 +2321,7 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_FLOAT128\tMASK_FLOAT128_KEYWORD /* IEEE 128-bit float.  */\n #define RS6000_BTM_FLOAT128_HW\tMASK_FLOAT128_HW /* IEEE 128-bit float h/w.  */\n #define RS6000_BTM_MMA\t\tMASK_MMA\t/* ISA 3.1 MMA.  */\n-#define RS6000_BTM_FUTURE\tMASK_FUTURE\n+#define RS6000_BTM_P10\t\tMASK_POWER10\n \n \n #define RS6000_BTM_COMMON\t(RS6000_BTM_ALTIVEC\t\t\t\\\n@@ -2345,7 +2345,7 @@ extern int frame_pointer_needed;\n \t\t\t\t | RS6000_BTM_FLOAT128\t\t\t\\\n \t\t\t\t | RS6000_BTM_FLOAT128_HW\t\t\\\n \t\t\t\t | RS6000_BTM_MMA\t\t\t\\\n-\t\t\t\t | RS6000_BTM_FUTURE)\n+\t\t\t\t | RS6000_BTM_P10)\n \n /* Define builtin enum index.  */\n "}, {"sha": "c90a69103e6c44158fc7cc1753b08e161b8d133c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -317,7 +317,7 @@\n    ppc750,ppc7400,ppc7450,\n    ppc403,ppc405,ppc440,ppc476,\n    ppc8540,ppc8548,ppce300c2,ppce300c3,ppce500mc,ppce500mc64,ppce5500,ppce6500,\n-   power4,power5,power6,power7,power8,power9,future,\n+   power4,power5,power6,power7,power8,power9,power10,\n    rs64a,mpccore,cell,ppca2,titan\"\n   (const (symbol_ref \"(enum attr_cpu) rs6000_tune\")))\n \n@@ -364,7 +364,7 @@\n      (const_int 1)\n \n      (and (eq_attr \"isa\" \"fut\")\n-\t  (match_test \"TARGET_FUTURE\"))\n+\t  (match_test \"TARGET_POWER10\"))\n      (const_int 1)\n     ] (const_int 0)))\n \n@@ -404,7 +404,7 @@\n (include \"power7.md\")\n (include \"power8.md\")\n (include \"power9.md\")\n-(include \"future.md\")\n+(include \"power10.md\")\n (include \"cell.md\")\n (include \"a2.md\")\n (include \"titan.md\")\n@@ -2474,7 +2474,7 @@\n \t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n \t UNSPEC_CFUGED))]\n-   \"TARGET_FUTURE && TARGET_64BIT\"\n+   \"TARGET_POWER10 && TARGET_64BIT\"\n    \"cfuged %0,%1,%2\"\n    [(set_attr \"type\" \"integer\")])\n \n@@ -2483,7 +2483,7 @@\n \t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n \t UNSPEC_CNTLZDM))]\n-   \"TARGET_FUTURE && TARGET_POWERPC64\"\n+   \"TARGET_POWER10 && TARGET_POWERPC64\"\n    \"cntlzdm %0,%1,%2\"\n    [(set_attr \"type\" \"integer\")])\n \n@@ -2492,7 +2492,7 @@\n \t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n \t UNSPEC_CNTTZDM))]\n-   \"TARGET_FUTURE && TARGET_POWERPC64\"\n+   \"TARGET_POWER10 && TARGET_POWERPC64\"\n    \"cnttzdm %0,%1,%2\"\n    [(set_attr \"type\" \"integer\")])\n \n@@ -2501,7 +2501,7 @@\n \t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n \t\t   UNSPEC_PDEPD))]\n-   \"TARGET_FUTURE && TARGET_POWERPC64\"\n+   \"TARGET_POWER10 && TARGET_POWERPC64\"\n    \"pdepd %0,%1,%2\"\n    [(set_attr \"type\" \"integer\")])\n \n@@ -2510,7 +2510,7 @@\n \t(unspec:DI [(match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r\")]\n \t\t   UNSPEC_PEXTD))]\n-   \"TARGET_FUTURE && TARGET_POWERPC64\"\n+   \"TARGET_POWER10 && TARGET_POWERPC64\"\n    \"pextd %0,%1,%2\"\n    [(set_attr \"type\" \"integer\")])\n \n@@ -5205,7 +5205,7 @@\n \t(match_operator:GPR 1 \"scc_comparison_operator\"\n \t\t\t[(match_operand:CCEITHER 2 \"cc_reg_operand\" \"y\")\n \t\t\t (const_int 0)]))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n   \"setbc %0,%j1\"\n   [(set_attr \"type\" \"isel\")])\n \n@@ -5214,7 +5214,7 @@\n \t(match_operator:GPR 1 \"scc_rev_comparison_operator\"\n \t\t\t[(match_operand:CCEITHER 2 \"cc_reg_operand\" \"y\")\n \t\t\t (const_int 0)]))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n   \"setbcr %0,%j1\"\n   [(set_attr \"type\" \"isel\")])\n \n@@ -5224,7 +5224,7 @@\n \t(neg:GPR (match_operator:GPR 1 \"scc_comparison_operator\"\n \t\t\t[(match_operand:CCEITHER 2 \"cc_reg_operand\" \"y\")\n \t\t\t (const_int 0)])))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n   \"setnbc %0,%j1\"\n   [(set_attr \"type\" \"isel\")])\n \n@@ -5233,7 +5233,7 @@\n \t(neg:GPR (match_operator:GPR 1 \"scc_rev_comparison_operator\"\n \t\t\t[(match_operand:CCEITHER 2 \"cc_reg_operand\" \"y\")\n \t\t\t (const_int 0)])))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n   \"setnbcr %0,%j1\"\n   [(set_attr \"type\" \"isel\")])\n \n@@ -11525,7 +11525,7 @@\n   \"\"\n {\n   /* Everything is best done with setbc[r] if available.  */\n-  if (TARGET_FUTURE)\n+  if (TARGET_POWER10)\n     rs6000_emit_int_cmove (operands[0], operands[1], const1_rtx, const0_rtx);\n \n   /* Expanding EQ and NE directly to some machine instructions does not help\n@@ -11940,7 +11940,7 @@\n    (clobber (match_scratch:GPR 3 \"=r\"))\n    (clobber (match_scratch:GPR 4 \"=r\"))\n    (clobber (match_scratch:<UNS> 5 \"=y\"))]\n-  \"!TARGET_FUTURE && TARGET_ISEL\n+  \"!TARGET_POWER10 && TARGET_ISEL\n    && !(<CODE> == EQ && operands[2] == const0_rtx)\n    && !(<CODE> == NE && operands[2] == const0_rtx\n \t&& <GPR:MODE>mode == Pmode && <GPR2:MODE>mode == Pmode)\"\n@@ -12020,7 +12020,7 @@\n      (clobber (match_scratch:GPR 4 \"=r\"))])]\n   \"\"\n {\n-  if (TARGET_FUTURE)\n+  if (TARGET_POWER10)\n     {\n       rtx cc = gen_reg_rtx (CCmode);\n       rtx compare = gen_rtx_COMPARE (CCmode, operands[1], operands[2]);\n@@ -12044,7 +12044,7 @@\n \t\t(match_operand:GPR 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))\n    (clobber (match_scratch:GPR 3 \"=r\"))\n    (clobber (match_scratch:GPR 4 \"=r\"))]\n-  \"!TARGET_FUTURE && !(TARGET_ISEL && operands[2] != const0_rtx)\"\n+  \"!TARGET_POWER10 && !(TARGET_ISEL && operands[2] != const0_rtx)\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 4)\n@@ -12076,7 +12076,7 @@\n      (clobber (reg:GPR CA_REGNO))])]\n   \"\"\n {\n-  if (TARGET_FUTURE)\n+  if (TARGET_POWER10)\n     {\n       rtx cc = gen_reg_rtx (CCmode);\n       rtx compare = gen_rtx_COMPARE (CCmode, operands[1], operands[2]);\n@@ -12109,7 +12109,7 @@\n    (clobber (match_scratch:P 3 \"=r\"))\n    (clobber (match_scratch:P 4 \"=r\"))\n    (clobber (reg:P CA_REGNO))]\n-  \"!TARGET_FUTURE && !(TARGET_ISEL && operands[2] != const0_rtx)\"\n+  \"!TARGET_POWER10 && !(TARGET_ISEL && operands[2] != const0_rtx)\"\n   \"#\"\n   \"&& 1\"\n   [(parallel [(set (match_dup 4)\n@@ -12142,7 +12142,7 @@\n    (clobber (match_scratch:P 3 \"=r\"))\n    (clobber (match_scratch:P 4 \"=r\"))\n    (clobber (reg:P CA_REGNO))]\n-  \"!TARGET_FUTURE\"\n+  \"!TARGET_POWER10\"\n   \"#\"\n   \"&& 1\"\n   [(parallel [(set (match_dup 4)\n@@ -12174,7 +12174,7 @@\n    (clobber (match_scratch:P 3 \"=r\"))\n    (clobber (match_scratch:P 4 \"=r\"))\n    (clobber (reg:P CA_REGNO))]\n-  \"!TARGET_FUTURE\"\n+  \"!TARGET_POWER10\"\n   \"#\"\n   \"&& 1\"\n   [(parallel [(set (match_dup 4)\n@@ -12336,7 +12336,7 @@\n \t\t  (match_operand:SI 2 \"scc_eq_operand\" \"rKLI\")))\n    (clobber (match_scratch:SI 3 \"=r\"))\n    (clobber (match_scratch:SI 4 \"=r\"))]\n-  \"!TARGET_FUTURE\"\n+  \"!TARGET_POWER10\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 4)"}, {"sha": "6b426f2aaf19c7a00ec3aa0210249a807753f756", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -567,9 +567,9 @@ long rs6000_stack_protector_guard_offset = 0\n mspeculate-indirect-jumps\n Target Undocumented Var(rs6000_speculate_indirect_jumps) Init(1) Save\n \n-mfuture\n-Target Report Mask(FUTURE) Var(rs6000_isa_flags)\n-Use instructions for a future architecture.\n+mpower10\n+Target Report Mask(POWER10) Var(rs6000_isa_flags)\n+Use instructions added in ISA 3.1.\n \n mprefixed\n Target Report Mask(PREFIXED) Var(rs6000_isa_flags)"}, {"sha": "1ddb5729cb285fca4d5b36546891bb7eeb42caec", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -73,7 +73,7 @@ MD_INCLUDES = $(srcdir)/config/rs6000/rs64.md \\\n \t$(srcdir)/config/rs6000/power7.md \\\n \t$(srcdir)/config/rs6000/power8.md \\\n \t$(srcdir)/config/rs6000/power9.md \\\n-\t$(srcdir)/config/rs6000/future.md \\\n+\t$(srcdir)/config/rs6000/power10.md \\\n \t$(srcdir)/config/rs6000/cell.md \\\n \t$(srcdir)/config/rs6000/a2.md \\\n \t$(srcdir)/config/rs6000/predicates.md \\"}, {"sha": "e5a10356b4b68e2a7a7598d7098cd2a8f5137e1b", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9d0c94588c8834a33eca6847b0a1401353300b/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=5d9d0c94588c8834a33eca6847b0a1401353300b", "patch": "@@ -3014,15 +3014,15 @@\n \t [(match_operand:VSX_EXTRACT_I4 1 \"altivec_register_operand\" \"v\")\n \t  (match_operand:QI 2 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_XXGENPCV))]\n-    \"TARGET_FUTURE && TARGET_64BIT\"\n+    \"TARGET_POWER10 && TARGET_64BIT\"\n     \"xxgenpcv<wd>m %x0,%1,%2\"\n     [(set_attr \"type\" \"vecsimple\")])\n \n (define_expand \"xxgenpcvm_<mode>\"\n   [(use (match_operand:VSX_EXTRACT_I4 0 \"register_operand\"))\n    (use (match_operand:VSX_EXTRACT_I4 1 \"register_operand\"))\n    (use (match_operand:QI 2 \"immediate_operand\"))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n {\n   if (!BYTES_BIG_ENDIAN)\n     {\n@@ -5688,6 +5688,6 @@\n   [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:V16QI [(match_operand:V16QI 1 \"vsx_register_operand\" \"wa\")]\n \t\t      XVCVBF16))]\n-  \"TARGET_FUTURE\"\n+  \"TARGET_POWER10\"\n   \"<xvcvbf16> %x0,%x1\"\n   [(set_attr \"type\" \"vecfloat\")])"}]}