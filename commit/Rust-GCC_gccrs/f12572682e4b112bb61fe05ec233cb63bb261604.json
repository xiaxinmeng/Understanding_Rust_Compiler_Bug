{"sha": "f12572682e4b112bb61fe05ec233cb63bb261604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEyNTcyNjgyZTRiMTEyYmI2MWZlMDVlYzIzM2NiNjNiYjI2MTYwNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-03-11T21:35:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-03-11T21:35:02Z"}, "message": "builtins.c (expand_builtin_setjmp_receiver): Use and clobber hard_frame_pointer_rtx.\n\ngcc/\n\t* builtins.c (expand_builtin_setjmp_receiver): Use and clobber\n\thard_frame_pointer_rtx.\n\t* cse.c (cse_insn): Remove volatile check.\n\t* cselib.c (cselib_process_insn): Likewise.\n\t* dse.c (scan_insn): Likewise.\n\nFrom-SVN: r208498", "tree": {"sha": "522fb7178bd1e83bdba8ab6c8d0264247db8c3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/522fb7178bd1e83bdba8ab6c8d0264247db8c3a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f12572682e4b112bb61fe05ec233cb63bb261604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12572682e4b112bb61fe05ec233cb63bb261604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f12572682e4b112bb61fe05ec233cb63bb261604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12572682e4b112bb61fe05ec233cb63bb261604/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5af1876c657286423edbf631be14a36ce2dcaeaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af1876c657286423edbf631be14a36ce2dcaeaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af1876c657286423edbf631be14a36ce2dcaeaa"}], "stats": {"total": 65, "additions": 32, "deletions": 33}, "files": [{"sha": "5993f2dd31647cd0640cc2480e565831b2bafdc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12572682e4b112bb61fe05ec233cb63bb261604/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12572682e4b112bb61fe05ec233cb63bb261604/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f12572682e4b112bb61fe05ec233cb63bb261604", "patch": "@@ -1,3 +1,11 @@\n+2014-03-11  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* builtins.c (expand_builtin_setjmp_receiver): Use and clobber\n+\thard_frame_pointer_rtx.\n+\t* cse.c (cse_insn): Remove volatile check.\n+\t* cselib.c (cselib_process_insn): Likewise.\n+\t* dse.c (scan_insn): Likewise.\n+\n 2014-03-11  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/arc/arc.c (conditionalize_nonjump): New function, broken"}, {"sha": "e4846c8e6d7d337b7da45b63db7a23aff5f0ee5e", "filename": "gcc/builtins.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12572682e4b112bb61fe05ec233cb63bb261604/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12572682e4b112bb61fe05ec233cb63bb261604/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f12572682e4b112bb61fe05ec233cb63bb261604", "patch": "@@ -910,18 +910,27 @@ expand_builtin_setjmp_receiver (rtx receiver_label ATTRIBUTE_UNUSED)\n #ifdef HAVE_nonlocal_goto\n   if (! HAVE_nonlocal_goto)\n #endif\n-    /* First adjust our frame pointer to its actual value.  It was\n-       previously set to the start of the virtual area corresponding to\n-       the stacked variables when we branched here and now needs to be\n-       adjusted to the actual hardware fp value.\n-\n-       Assignments to virtual registers are converted by\n-       instantiate_virtual_regs into the corresponding assignment\n-       to the underlying register (fp in this case) that makes\n-       the original assignment true.\n-       So the following insn will actually be decrementing fp by\n-       STARTING_FRAME_OFFSET.  */\n-    emit_move_insn (virtual_stack_vars_rtx, hard_frame_pointer_rtx);\n+    {\n+      /* First adjust our frame pointer to its actual value.  It was\n+\t previously set to the start of the virtual area corresponding to\n+\t the stacked variables when we branched here and now needs to be\n+\t adjusted to the actual hardware fp value.\n+\n+\t Assignments to virtual registers are converted by\n+\t instantiate_virtual_regs into the corresponding assignment\n+\t to the underlying register (fp in this case) that makes\n+\t the original assignment true.\n+\t So the following insn will actually be decrementing fp by\n+\t STARTING_FRAME_OFFSET.  */\n+      emit_move_insn (virtual_stack_vars_rtx, hard_frame_pointer_rtx);\n+\n+      /* Restoring the frame pointer also modifies the hard frame pointer.\n+\t Mark it used (so that the previous assignment remains live once\n+\t the frame pointer is eliminated) and clobbered (to represent the\n+\t implicit update from the assignment).  */\n+      emit_use (hard_frame_pointer_rtx);\n+      emit_clobber (hard_frame_pointer_rtx);\n+    }\n \n #if !HARD_FRAME_POINTER_IS_ARG_POINTER\n   if (fixed_regs[ARG_POINTER_REGNUM])\n@@ -965,8 +974,7 @@ expand_builtin_setjmp_receiver (rtx receiver_label ATTRIBUTE_UNUSED)\n \n   /* We must not allow the code we just generated to be reordered by\n      scheduling.  Specifically, the update of the frame pointer must\n-     happen immediately, not later.  Similarly, we must block\n-     (frame-related) register values to be used across this code.  */\n+     happen immediately, not later.  */\n   emit_insn (gen_blockage ());\n }\n "}, {"sha": "852d13ebf5bcdc13a1a7ad6fcb2759abba371c0c", "filename": "gcc/cse.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12572682e4b112bb61fe05ec233cb63bb261604/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12572682e4b112bb61fe05ec233cb63bb261604/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=f12572682e4b112bb61fe05ec233cb63bb261604", "patch": "@@ -5682,11 +5682,6 @@ cse_insn (rtx insn)\n \t  invalidate (XEXP (dest, 0), GET_MODE (dest));\n       }\n \n-  /* A volatile ASM or an UNSPEC_VOLATILE invalidates everything.  */\n-  if (NONJUMP_INSN_P (insn)\n-      && volatile_insn_p (PATTERN (insn)))\n-    flush_hash_table ();\n-\n   /* Don't cse over a call to setjmp; on some machines (eg VAX)\n      the regs restored by the longjmp come from a later time\n      than the setjmp.  */"}, {"sha": "26bcbe0776918a7116776ca36dd743bf7fec314d", "filename": "gcc/cselib.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12572682e4b112bb61fe05ec233cb63bb261604/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12572682e4b112bb61fe05ec233cb63bb261604/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=f12572682e4b112bb61fe05ec233cb63bb261604", "patch": "@@ -2645,12 +2645,10 @@ cselib_process_insn (rtx insn)\n \n   cselib_current_insn = insn;\n \n-  /* Forget everything at a CODE_LABEL, a volatile insn, or a setjmp.  */\n+  /* Forget everything at a CODE_LABEL or a setjmp.  */\n   if ((LABEL_P (insn)\n        || (CALL_P (insn)\n-\t   && find_reg_note (insn, REG_SETJMP, NULL))\n-       || (NONJUMP_INSN_P (insn)\n-\t   && volatile_insn_p (PATTERN (insn))))\n+\t   && find_reg_note (insn, REG_SETJMP, NULL)))\n       && !cselib_preserve_constants)\n     {\n       cselib_reset_table (next_uid);"}, {"sha": "09dc5df6e93e2eea0c5a9b4f285e23513baccbd0", "filename": "gcc/dse.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12572682e4b112bb61fe05ec233cb63bb261604/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12572682e4b112bb61fe05ec233cb63bb261604/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=f12572682e4b112bb61fe05ec233cb63bb261604", "patch": "@@ -2470,16 +2470,6 @@ scan_insn (bb_info_t bb_info, rtx insn)\n       return;\n     }\n \n-  /* Cselib clears the table for this case, so we have to essentially\n-     do the same.  */\n-  if (NONJUMP_INSN_P (insn)\n-      && volatile_insn_p (PATTERN (insn)))\n-    {\n-      add_wild_read (bb_info);\n-      insn_info->cannot_delete = true;\n-      return;\n-    }\n-\n   /* Look at all of the uses in the insn.  */\n   note_uses (&PATTERN (insn), check_mem_read_use, bb_info);\n "}]}