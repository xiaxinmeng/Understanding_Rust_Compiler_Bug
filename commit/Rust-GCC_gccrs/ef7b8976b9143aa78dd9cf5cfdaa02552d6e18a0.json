{"sha": "ef7b8976b9143aa78dd9cf5cfdaa02552d6e18a0", "node_id": "C_kwDOANBUbNoAKGVmN2I4OTc2YjkxNDNhYTc4ZGQ5Y2Y1Y2ZkYWEwMjU1MmQ2ZTE4YTA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-16T10:07:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-16T10:08:40Z"}, "message": "rtl-optimization/105577 - testcase for the PR\n\n2022-05-16  Richard Biener  <rguenther@suse.de>\n\n\tPR rtl-optimization/105577\n\t* g++.dg/torture/pr105577.C: New testcase.", "tree": {"sha": "d78f4cdd22cdd73d6db19cf7505805596ef97bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d78f4cdd22cdd73d6db19cf7505805596ef97bae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef7b8976b9143aa78dd9cf5cfdaa02552d6e18a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7b8976b9143aa78dd9cf5cfdaa02552d6e18a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef7b8976b9143aa78dd9cf5cfdaa02552d6e18a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef7b8976b9143aa78dd9cf5cfdaa02552d6e18a0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6230911cb91d428631e741d7d981fab578102084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6230911cb91d428631e741d7d981fab578102084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6230911cb91d428631e741d7d981fab578102084"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "52f16a54136c72bf408c2b3a94426170239764e8", "filename": "gcc/testsuite/g++.dg/torture/pr105577.C", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef7b8976b9143aa78dd9cf5cfdaa02552d6e18a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr105577.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef7b8976b9143aa78dd9cf5cfdaa02552d6e18a0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr105577.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr105577.C?ref=ef7b8976b9143aa78dd9cf5cfdaa02552d6e18a0", "patch": "@@ -0,0 +1,156 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-fexceptions -fnon-call-exceptions\" }\n+\n+namespace {\n+typedef __SIZE_TYPE__ size_t;\n+}\n+typedef __UINT8_TYPE__ uint8_t;\n+typedef __UINT64_TYPE__ uint64_t;\n+namespace {\n+template <typename _Tp, _Tp __v> struct integral_constant {\n+  static constexpr _Tp value = __v;\n+};\n+template <bool __v> using __bool_constant = integral_constant<bool, __v>;\n+template <bool> struct __conditional {\n+  template <typename _Tp, typename> using type = _Tp;\n+};\n+template <bool _Cond, typename _If, typename _Else>\n+using __conditional_t = typename __conditional<_Cond>::type<_If, _Else>;\n+template <typename...> struct __and_;\n+template <typename _B1, typename _B2>\n+struct __and_<_B1, _B2> : __conditional_t<_B1::value, _B2, _B1> {};\n+template <typename> struct __not_ : __bool_constant<!bool()> {};\n+template <typename _Tp>\n+struct __is_constructible_impl : __bool_constant<__is_constructible(_Tp)> {};\n+template <typename _Tp>\n+struct is_default_constructible : __is_constructible_impl<_Tp> {};\n+template <typename _Tp> struct remove_extent { typedef _Tp type; };\n+template <bool> struct enable_if;\n+} // namespace\n+namespace std {\n+template <typename _Tp> struct allocator_traits { using pointer = _Tp; };\n+template <typename _Alloc> struct __alloc_traits : allocator_traits<_Alloc> {};\n+template <typename, typename _Alloc> struct _Vector_base {\n+  typedef typename __alloc_traits<_Alloc>::pointer pointer;\n+  struct {\n+    pointer _M_finish;\n+    pointer _M_end_of_storage;\n+  };\n+};\n+template <typename _Tp, typename _Alloc = _Tp>\n+class vector : _Vector_base<_Tp, _Alloc> {\n+public:\n+  _Tp value_type;\n+  typedef size_t size_type;\n+};\n+template <typename _Tp, typename _Dp> class __uniq_ptr_impl {\n+  template <typename _Up, typename> struct _Ptr { using type = _Up *; };\n+\n+public:\n+  using _DeleterConstraint =\n+      enable_if<__and_<__not_<_Dp>, is_default_constructible<_Dp>>::value>;\n+  using pointer = typename _Ptr<_Tp, _Dp>::type;\n+};\n+template <typename _Tp, typename _Dp = _Tp> class unique_ptr {\n+public:\n+  using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;\n+  pointer operator->();\n+};\n+enum _Lock_policy { _S_atomic } const __default_lock_policy = _S_atomic;\n+template <_Lock_policy = __default_lock_policy> class _Sp_counted_base;\n+template <typename, _Lock_policy = __default_lock_policy> class __shared_ptr;\n+template <_Lock_policy> class __shared_count { _Sp_counted_base<> *_M_pi; };\n+template <typename _Tp, _Lock_policy _Lp> class __shared_ptr {\n+  using element_type = typename remove_extent<_Tp>::type;\n+  element_type *_M_ptr;\n+  __shared_count<_Lp> _M_refcount;\n+};\n+template <typename _Tp> class shared_ptr : __shared_ptr<_Tp> {\n+public:\n+  shared_ptr() noexcept : __shared_ptr<_Tp>() {}\n+};\n+enum CompressionType : char;\n+class SliceTransform;\n+enum Temperature : uint8_t;\n+struct MutableCFOptions {\n+  MutableCFOptions()\n+      : soft_pending_compaction_bytes_limit(),\n+        hard_pending_compaction_bytes_limit(level0_file_num_compaction_trigger),\n+        level0_slowdown_writes_trigger(level0_stop_writes_trigger),\n+        max_compaction_bytes(target_file_size_base),\n+        target_file_size_multiplier(max_bytes_for_level_base),\n+        max_bytes_for_level_multiplier(ttl), compaction_options_fifo(),\n+        min_blob_size(blob_file_size), blob_compression_type(),\n+        enable_blob_garbage_collection(blob_garbage_collection_age_cutoff),\n+        max_sequential_skip_in_iterations(check_flush_compaction_key_order),\n+        paranoid_file_checks(bottommost_compression), bottommost_temperature(),\n+        sample_for_compression() {}\n+  shared_ptr<SliceTransform> prefix_extractor;\n+  uint64_t soft_pending_compaction_bytes_limit;\n+  uint64_t hard_pending_compaction_bytes_limit;\n+  int level0_file_num_compaction_trigger;\n+  int level0_slowdown_writes_trigger;\n+  int level0_stop_writes_trigger;\n+  uint64_t max_compaction_bytes;\n+  uint64_t target_file_size_base;\n+  int target_file_size_multiplier;\n+  uint64_t max_bytes_for_level_base;\n+  double max_bytes_for_level_multiplier;\n+  uint64_t ttl;\n+  vector<int> compaction_options_fifo;\n+  uint64_t min_blob_size;\n+  uint64_t blob_file_size;\n+  CompressionType blob_compression_type;\n+  bool enable_blob_garbage_collection;\n+  double blob_garbage_collection_age_cutoff;\n+  uint64_t max_sequential_skip_in_iterations;\n+  bool check_flush_compaction_key_order;\n+  bool paranoid_file_checks;\n+  CompressionType bottommost_compression;\n+  Temperature bottommost_temperature;\n+  uint64_t sample_for_compression;\n+};\n+template <class T, size_t kSize = 8> class autovector {\n+  using value_type = T;\n+  using size_type = typename vector<T>::size_type;\n+  size_type buf_[kSize * sizeof(value_type)];\n+};\n+class MemTable;\n+class ColumnFamilyData;\n+struct SuperVersion {\n+  MutableCFOptions write_stall_condition;\n+  autovector<MemTable *> to_delete;\n+};\n+class ColumnFamilySet {\n+public:\n+  class iterator {\n+  public:\n+    iterator operator++();\n+    bool operator!=(iterator);\n+    ColumnFamilyData *operator*();\n+    ColumnFamilyData *current_;\n+  };\n+  iterator begin();\n+  iterator end();\n+};\n+class VersionSet {\n+public:\n+  ColumnFamilySet *GetColumnFamilySet();\n+};\n+struct SuperVersionContext {\n+  void NewSuperVersion() { new SuperVersion(); }\n+};\n+class DBImpl {\n+  unique_ptr<VersionSet> versions_;\n+  void InstallSuperVersionAndScheduleWork(ColumnFamilyData *,\n+                                          SuperVersionContext *,\n+                                          const MutableCFOptions &);\n+};\n+void DBImpl::InstallSuperVersionAndScheduleWork(ColumnFamilyData *,\n+                                                SuperVersionContext *sv_context,\n+                                                const MutableCFOptions &) {\n+  sv_context->NewSuperVersion();\n+  for (auto my_cfd : *versions_->GetColumnFamilySet())\n+    ;\n+}\n+} // namespace std"}]}