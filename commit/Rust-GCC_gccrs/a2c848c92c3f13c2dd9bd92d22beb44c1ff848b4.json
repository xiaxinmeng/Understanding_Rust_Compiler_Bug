{"sha": "a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "node_id": "C_kwDOANBUbNoAKGEyYzg0OGM5MmMzZjEzYzJkZDliZDkyZDIyYmViNDRjMWZmODQ4YjQ", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2023-02-01T18:31:41Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2023-02-01T18:31:41Z"}, "message": "AArch64: Fix native detection in the presence of mandatory features which don't have midr values\n\naarch64-option-extensions.def explicitly defines the semantics for an empty midr\nfield as being:\n\n     In that case this field\n     should contain a space (\" \") separated list of the strings in 'Features'\n     that are required.  Their order is not important.  An empty string means\n     do not detect this feature during auto detection.\n\nThat is to say, an empty string means that we don't know the midr value for this\nfeature and so it just shouldn't be taken into account for native features\ndetection.  However this meaning seems to have gotten lost at some point.\n\nThis results in e.g. -mcpu=native on a Neoverse N2 disabling features it does\nhave.  Essentially we disabled any mandatory feature for which there is no midr\nentry.\n\nThe rationale for having -mcpu=native being able to disable features at all, is\nbecause the kernel is able to disable a mandatory feature for correctness\nissues.  Unfortunately we can't distinguish between \"old kernel\"\nand \"kernel disabled\".\n\nThis patch adds a new field that indicates whether the midr field has any value\nat all.  If there's no value we skip the extension when determining the \"off\"\nflags.\n\ngcc/ChangeLog:\n\n\t* common/config/aarch64/aarch64-common.cc\n\t(struct aarch64_option_extension): Add native_detect and document struct\n\ta bit more.\n\t(all_extensions): Set new field native_detect.\n\t* config/aarch64/aarch64.cc (struct aarch64_option_extension): Delete\n\tunused struct.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/cpunative/info_19: New test.\n\t* gcc.target/aarch64/cpunative/info_20: New test.\n\t* gcc.target/aarch64/cpunative/info_21: New test.\n\t* gcc.target/aarch64/cpunative/info_22: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_19.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_20.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_21.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_22.c: New test.", "tree": {"sha": "60ffcc6e6ad3d1d0b44aaa3c40686c603f3ea4f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60ffcc6e6ad3d1d0b44aaa3c40686c603f3ea4f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fadd8dec79876d3c393daccc62959f6f4853cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fadd8dec79876d3c393daccc62959f6f4853cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fadd8dec79876d3c393daccc62959f6f4853cc5"}], "stats": {"total": 121, "additions": 108, "deletions": 13}, "files": [{"sha": "20bc4e1291bba9b73798398fea659f1154afa205", "filename": "gcc/common/config/aarch64/aarch64-common.cc", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc?ref=a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "patch": "@@ -140,20 +140,28 @@ aarch64_handle_option (struct gcc_options *opts,\n /* An ISA extension in the co-processor and main instruction set space.  */\n struct aarch64_option_extension\n {\n+  /* The extension name to pass on to the assembler.  */\n   const char *name;\n+  /* The smallest set of feature bits to toggle to enable this option.  */\n   aarch64_feature_flags flag_canonical;\n+  /* If this feature is turned on, these bits also need to be turned on.  */\n   aarch64_feature_flags flags_on;\n+  /* If this feature is turned off, these bits also need to be turned off.  */\n   aarch64_feature_flags flags_off;\n+  /* Indicates whether this feature is taken into account during native cpu\n+     detection.  */\n+  bool native_detect_p;\n };\n \n /* ISA extensions in AArch64.  */\n static constexpr aarch64_option_extension all_extensions[] =\n {\n-#define AARCH64_OPT_EXTENSION(NAME, IDENT, C, D, E, F) \\\n+#define AARCH64_OPT_EXTENSION(NAME, IDENT, C, D, E, FEATURE_STRING) \\\n   {NAME, AARCH64_FL_##IDENT, feature_deps::IDENT ().explicit_on, \\\n-   feature_deps::get_flags_off (feature_deps::root_off_##IDENT)},\n+   feature_deps::get_flags_off (feature_deps::root_off_##IDENT), \\\n+   FEATURE_STRING[0]},\n #include \"config/aarch64/aarch64-option-extensions.def\"\n-  {NULL, 0, 0, 0}\n+  {NULL, 0, 0, 0, false}\n };\n \n struct processor_name_to_arch\n@@ -326,9 +334,13 @@ aarch64_get_extension_string_for_isa_flags\n \toutstr += opt.name;\n       }\n \n-  /* Remove the features in current_flags & ~isa_flags.  */\n+  /* Remove the features in current_flags & ~isa_flags.  If the feature does\n+     not have an HWCAPs then it shouldn't be taken into account for feature\n+     detection because one way or another we can't tell if it's available\n+     or not.  */\n   for (auto &opt : all_extensions)\n-    if (opt.flag_canonical & current_flags & ~isa_flags)\n+    if (opt.native_detect_p\n+\t&& (opt.flag_canonical & current_flags & ~isa_flags))\n       {\n \tcurrent_flags &= ~opt.flags_off;\n \toutstr += \"+no\";"}, {"sha": "e6f47cbbb0d04a6f33b9a741ebb614cabd0204b9", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "patch": "@@ -2808,14 +2808,6 @@ static const struct attribute_spec aarch64_attribute_table[] =\n   { NULL,                 0, 0, false, false, false, false, NULL, NULL }\n };\n \n-/* An ISA extension in the co-processor and main instruction set space.  */\n-struct aarch64_option_extension\n-{\n-  const char *const name;\n-  const unsigned long flags_on;\n-  const unsigned long flags_off;\n-};\n-\n typedef enum aarch64_cond_code\n {\n   AARCH64_EQ = 0, AARCH64_NE, AARCH64_CS, AARCH64_CC, AARCH64_MI, AARCH64_PL,"}, {"sha": "616d3b26d03398a8ef3f4cdf4c56b144ecf0b1c2", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_19", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_19", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_19", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_19?ref=a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "patch": "@@ -0,0 +1,9 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm jscvt fcma lrcpc dcpop sha3 sm3 sm4 asimddp sha512 sve asimdfhm dit uscat ilrcpc flagm ssbs sb dcpodp sve2 sveaes svepmull svebitperm svesha3 svesm4 flagm2 frint svei8mm svebf16 i8mm bf16 dgh bti\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd49\n+CPU revision\t: 2\n+"}, {"sha": "45d45d15f16b927ebdffa80bca76270a7e2ed135", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_20", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_20", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_20", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_20?ref=a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "patch": "@@ -0,0 +1,9 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm jscvt fcma lrcpc dcpop sha3 sm3 sm4 asimddp sha512 sve asimdfhm dit uscat ilrcpc flagm ssbs sb dcpodp sve2 sveaes svepmull svebitperm svesha3 svesm4 flagm2 frint svei8mm svebf16 i8mm bf16 dgh bti paca pacg\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd49\n+CPU revision\t: 2\n+"}, {"sha": "3c418a4bee4e2bf009e658def70bd184c4084d16", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_21", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_21", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_21", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_21?ref=a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "patch": "@@ -0,0 +1,9 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm jscvt fcma lrcpc dcpop sha3 sm3 sm4 asimddp sha512 sve asimdfhm dit uscat ilrcpc flagm ssbs sb dcpodp sve2 sveaes svepmull svebitperm svesha3 svesm4 flagm2 frint svei8mm svebf16 i8mm bf16 dgh bti\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2\n+"}, {"sha": "3147eec1f443b3a7da77a89148c23511846ecd85", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_22", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_22", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_22", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_22?ref=a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "patch": "@@ -0,0 +1,9 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp cpuid asimdrdm jscvt fcma lrcpc dcpop sha3 sm3 sm4 asimddp sha512 sve asimdfhm dit uscat ilrcpc flagm ssbs sb dcpodp sve2 sveaes svepmull svebitperm svesha3 svesm4 flagm2 frint svei8mm svebf16 i8mm bf16 dgh bti paca pacg\n+CPU implementer\t: 0x41\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2\n+"}, {"sha": "980d3f79dfb03b0d8eb68f691bf2dedf80aed87d", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_19.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_19.c?ref=a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_19\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv9-a\\+crc\\+profile\\+memtag\\+sve2-sm4\\+sve2-aes\\+sve2-sha3\\+sve2-bitperm\\+i8mm\\+bf16\\+nopauth\\n} } } */\n+\n+/* Test one that if the kernel doesn't report the availability of a mandatory\n+   feature that it has turned it off for whatever reason.  As such compilers\n+   should follow along. */"}, {"sha": "117df2b0b6cd5751d9f5175b4343aad9825a6c43", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_20.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_20.c?ref=a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_20\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv9-a\\+crc\\+profile\\+memtag\\+sve2-sm4\\+sve2-aes\\+sve2-sha3\\+sve2-bitperm\\+i8mm\\+bf16\\n} } } */\n+\n+/* Check whether features that don't have a midr name during detection are\n+   correctly ignored.  These features shouldn't affect the native detection.\n+   This particular test checks that predres is not turned off during\n+   detection.   */"}, {"sha": "efbd02cbdc0638db85e776f1e79043709c11df21", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_21.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_21.c?ref=a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_21\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+crc\\+lse\\+rcpc\\+rdma\\+dotprod\\+fp16fml\\+sb\\+ssbs\\+sve2-sm4\\+sve2-aes\\+sve2-sha3\\+sve2-bitperm\\+i8mm\\+bf16\\+flagm\\n} } } */\n+\n+/* Check that an Armv8-A core doesn't fall apart on extensions without midr\n+   values.  */"}, {"sha": "d431d4938265d024891b464ac3d069607b21d8e7", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_22.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_22.c?ref=a2c848c92c3f13c2dd9bd92d22beb44c1ff848b4", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_22\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+crc\\+lse\\+rcpc\\+rdma\\+dotprod\\+fp16fml\\+sb\\+ssbs\\+sve2-sm4\\+sve2-aes\\+sve2-sha3\\+sve2-bitperm\\+i8mm\\+bf16\\+flagm\\+pauth\\n} } } */\n+\n+/* Check that an Armv8-A core doesn't fall apart on extensions without midr\n+   values and that it enables optional features.  */"}]}