{"sha": "9694f6121982668285a21020b55b44c3099f7042", "node_id": "C_kwDOANBUbNoAKDk2OTRmNjEyMTk4MjY2ODI4NWEyMTAyMGI1NWI0NGMzMDk5ZjcwNDI", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-02-10T08:30:19Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-02-10T08:30:19Z"}, "message": "Fortran/OpenMP: Avoid ICE for invalid char array in omp atomic [PR104329]\n\n\tPR fortran/104329\ngcc/fortran/ChangeLog:\n\n\t* openmp.cc (resolve_omp_atomic): Defer extra-code assert after\n\tother diagnostics.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/atomic-28.f90: New test.", "tree": {"sha": "97f9d3897df34ad47d7dad328c2b1376c760f96a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f9d3897df34ad47d7dad328c2b1376c760f96a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9694f6121982668285a21020b55b44c3099f7042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9694f6121982668285a21020b55b44c3099f7042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9694f6121982668285a21020b55b44c3099f7042", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9694f6121982668285a21020b55b44c3099f7042/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d98e83b2c919bd9fba2c61333d613bafc37357f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d98e83b2c919bd9fba2c61333d613bafc37357f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d98e83b2c919bd9fba2c61333d613bafc37357f"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "19142c4d8d0a67fc686575148d466a2c081432b9", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9694f6121982668285a21020b55b44c3099f7042/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9694f6121982668285a21020b55b44c3099f7042/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=9694f6121982668285a21020b55b44c3099f7042", "patch": "@@ -7695,7 +7695,7 @@ resolve_omp_atomic (gfc_code *code)\n   gfc_omp_atomic_op aop\n     = (gfc_omp_atomic_op) (atomic_code->ext.omp_clauses->atomic_op\n \t\t\t   & GFC_OMP_ATOMIC_MASK);\n-  gfc_code *stmt = NULL, *capture_stmt = NULL;\n+  gfc_code *stmt = NULL, *capture_stmt = NULL, *tailing_stmt = NULL;\n   gfc_expr *comp_cond = NULL;\n   locus *loc = NULL;\n \n@@ -7833,15 +7833,17 @@ resolve_omp_atomic (gfc_code *code)\n \t  stmt = code;\n \t  capture_stmt = code->next;\n \t}\n-      gcc_assert (!code->next->next);\n+      /* Shall be NULL but can happen for invalid code. */\n+      tailing_stmt = code->next->next;\n     }\n   else\n     {\n       /* x = ... */\n       stmt = code;\n       if (!atomic_code->ext.omp_clauses->compare && stmt->op != EXEC_ASSIGN)\n \tgoto unexpected;\n-      gcc_assert (!code->next);\n+      /* Shall be NULL but can happen for invalid code. */\n+      tailing_stmt = code->next;\n     }\n \n   if (comp_cond)\n@@ -7894,6 +7896,9 @@ resolve_omp_atomic (gfc_code *code)\n       return;\n     }\n \n+  /* Should be diagnosed above already. */\n+  gcc_assert (tailing_stmt == NULL);\n+\n   var = stmt->expr1->symtree->n.sym;\n   stmt_expr2 = is_conversion (stmt->expr2, true, true);\n   if (stmt_expr2 == NULL)"}, {"sha": "91e29c96d45a7e84e7f6196b55424ae86b7df9ed", "filename": "gcc/testsuite/gfortran.dg/gomp/atomic-28.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9694f6121982668285a21020b55b44c3099f7042/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fatomic-28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9694f6121982668285a21020b55b44c3099f7042/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fatomic-28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fatomic-28.f90?ref=9694f6121982668285a21020b55b44c3099f7042", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+!\n+! PR fortran/104329\n+!\n+! Contributed by G. Steinmetz\n+!\n+subroutine z1\n+   character(:), allocatable :: x(:)\n+   x = ['123']\n+   !$omp atomic update\n+   x = (x)  ! { dg-error \"OMP ATOMIC statement must set a scalar variable of intrinsic type\" }\n+end\n+\n+subroutine z2\n+   character(:), allocatable :: x(:)\n+   x = ['123']\n+   !$omp atomic update\n+   x = 'a' // x // 'e'  ! { dg-error \"OMP ATOMIC statement must set a scalar variable of intrinsic type\" }\n+end\n+\n+\n+subroutine z3\n+   character(:), allocatable :: x(:)\n+   x = ['123']\n+   !$omp atomic capture\n+   x = 'a' // x // 'e'  ! { dg-error \"OMP ATOMIC statement must set a scalar variable of intrinsic type\" }\n+   x = x\n+end"}]}