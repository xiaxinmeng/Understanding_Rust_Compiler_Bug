{"sha": "b7b59ff4ec28451337d241bf38dfdeb9bbcbd6b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdiNTlmZjRlYzI4NDUxMzM3ZDI0MWJmMzhkZmRlYjliYmNiZDZiMw==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2001-08-27T22:55:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-27T22:55:21Z"}, "message": "m68k.md (subreghi1ashrdi_const32, [...]): Fix SUBREG_BYTE offset.\n\n        * config/m68k/m68k.md (subreghi1ashrdi_const32, bsetmemqi,\n        bsetmemqi+1, strict_low_part peephole): Fix SUBREG_BYTE offset.\n        (pushqi1): New.\n        (adddi_dilshr32, adddi_dishl32): Only data register can be\n        source for mem destination.\n\nFrom-SVN: r45216", "tree": {"sha": "f6b7675bac6d8730c706dd4000e5c5d504097242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6b7675bac6d8730c706dd4000e5c5d504097242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7b59ff4ec28451337d241bf38dfdeb9bbcbd6b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b59ff4ec28451337d241bf38dfdeb9bbcbd6b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7b59ff4ec28451337d241bf38dfdeb9bbcbd6b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b59ff4ec28451337d241bf38dfdeb9bbcbd6b3/comments", "author": null, "committer": null, "parents": [{"sha": "f21bdd05bdbac16e29fbc663731f6dfacb74dbd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21bdd05bdbac16e29fbc663731f6dfacb74dbd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21bdd05bdbac16e29fbc663731f6dfacb74dbd8"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "27c167f2bad05e2d064ca91918938084c46359b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b59ff4ec28451337d241bf38dfdeb9bbcbd6b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b59ff4ec28451337d241bf38dfdeb9bbcbd6b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7b59ff4ec28451337d241bf38dfdeb9bbcbd6b3", "patch": "@@ -1,5 +1,11 @@\n 2001-08-27  Roman Zippel  <zippel@linux-m68k.org>\n \n+\t* config/m68k/m68k.md (subreghi1ashrdi_const32, bsetmemqi,\n+\tbsetmemqi+1, strict_low_part peephole): Fix SUBREG_BYTE offset.\n+\t(pushqi1): New.\n+\t(adddi_dilshr32, adddi_dishl32): Only data register can be\n+\tsource for mem destination.\n+\n \t* expmed.c (store_bit_field): Ignore adjustment to bitpos\n \tand use bitnum to decide about register move.\n "}, {"sha": "7bac7c9e4ebe6f04bdd157d942d45344c8789767", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b59ff4ec28451337d241bf38dfdeb9bbcbd6b3/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b59ff4ec28451337d241bf38dfdeb9bbcbd6b3/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=b7b59ff4ec28451337d241bf38dfdeb9bbcbd6b3", "patch": "@@ -1081,6 +1081,13 @@\n   \"TARGET_5200\"\n   \"* return output_move_strictqi (operands);\")\n \n+(define_expand \"pushqi1\"\n+  [(set (reg:SI 15) (plus:SI (reg:SI 15) (const_int -2)))\n+   (set (mem:QI (plus:SI (reg:SI 15) (const_int 1)))\n+\t(match_operand:QI 0 \"general_operand\" \"\"))]\n+  \"!TARGET_5200\"\n+  \"\")\n+\n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:SF 1 \"general_operand\" \"\"))]\n@@ -2136,7 +2143,7 @@\n ;;    (plus:DI (match_operand:DI 2 \"general_operand\" \"%0\")\n ;;\t(lshiftrt:DI (match_operand:DI 1 \"general_operand\" \"ro\")\n ;;            (const_int 32))))]\n-    (plus:DI (lshiftrt:DI (match_operand:DI 1 \"general_operand\" \"ro,r\")\n+    (plus:DI (lshiftrt:DI (match_operand:DI 1 \"general_operand\" \"ro,d\")\n             (const_int 32))\n         (match_operand:DI 2 \"general_operand\" \"0,0\")))]\n   \"\"\n@@ -2155,7 +2162,7 @@\n ;;    (plus:DI (match_operand:DI 2 \"general_operand\" \"%0\")\n ;;\t(ashift:DI (match_operand:DI 1 \"general_operand\" \"ro\")\n ;;            (const_int 32))))]\n-    (plus:DI (ashift:DI (match_operand:DI 1 \"general_operand\" \"ro,r\")\n+    (plus:DI (ashift:DI (match_operand:DI 1 \"general_operand\" \"ro,d\")\n             (const_int 32))\n         (match_operand:DI 2 \"general_operand\" \"0,0\")))]\n   \"\"\n@@ -4718,7 +4725,7 @@\n (define_insn \"subreghi1ashrdi_const32\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n     (subreg:HI (ashiftrt:DI (match_operand:DI 1 \"general_operand\" \"ro\")\n-            (const_int 32)) 4))]\n+            (const_int 32)) 6))]\n   \"\"\n   \"*\n {\n@@ -5197,7 +5204,7 @@\n (define_insn \"bsetmemqi\"\n   [(set (match_operand:QI 0 \"memory_operand\" \"+m\")\n \t(ior:QI (subreg:QI (ashift:SI (const_int 1)\n-\t\t(match_operand:SI 1 \"general_operand\" \"d\")) 0)\n+\t\t(match_operand:SI 1 \"general_operand\" \"d\")) 3)\n \t(match_dup 0)))]\n   \"\"\n   \"*\n@@ -5211,7 +5218,7 @@\n   [(set (match_operand:QI 0 \"memory_operand\" \"+m\")\n \t(ior:QI (subreg:QI (ashift:SI (const_int 1)\n \t    (match_operator:SI 2 \"extend_operator\"\n-\t\t[(match_operand 1 \"general_operand\" \"d\")])) 0)\n+\t\t[(match_operand 1 \"general_operand\" \"d\")])) 3)\n \t(match_dup 0)))]\n   \"\"\n   \"*\n@@ -7182,7 +7189,7 @@\n (define_peephole\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(const_int 0))\n-   (set (strict_low_part (subreg:HI (match_dup 0) 0))\n+   (set (strict_low_part (subreg:HI (match_dup 0) 2))\n \t(match_operand:HI 1 \"general_operand\" \"rmn\"))]\n   \"strict_low_part_peephole_ok (HImode, prev_nonnote_insn (insn), operands[0])\"\n   \"*"}]}