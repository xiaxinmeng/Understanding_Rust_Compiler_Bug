{"sha": "afbd0665815715ff285dba5143ecb49d4d27990f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZiZDA2NjU4MTU3MTVmZjI4NWRiYTUxNDNlY2I0OWQ0ZDI3OTkwZg==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2009-09-27T15:27:08Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2009-09-27T15:27:08Z"}, "message": "re PR c/41476 (__typeof__ expands to const type for function types)\n\n        PR c/41476\n\t* c-typeck.c (build_conditional_expr): Use the readonly and\n\tvolatile flags of the operand types, not of the operands itself.\n\ntestsuite/:\n\t* gcc.dg/cond-constqual-1.c: New test.\n\nFrom-SVN: r152220", "tree": {"sha": "c7e4b6907c602b90a4229832311fc15b051f3545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7e4b6907c602b90a4229832311fc15b051f3545"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afbd0665815715ff285dba5143ecb49d4d27990f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afbd0665815715ff285dba5143ecb49d4d27990f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afbd0665815715ff285dba5143ecb49d4d27990f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afbd0665815715ff285dba5143ecb49d4d27990f/comments", "author": null, "committer": null, "parents": [{"sha": "88febe351918f2cb70edd3527febf3e06f588089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88febe351918f2cb70edd3527febf3e06f588089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88febe351918f2cb70edd3527febf3e06f588089"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "4e9a91bf8f9fc85bf88dbaab5e115e115bc91352", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afbd0665815715ff285dba5143ecb49d4d27990f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afbd0665815715ff285dba5143ecb49d4d27990f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afbd0665815715ff285dba5143ecb49d4d27990f", "patch": "@@ -1,3 +1,9 @@\n+2009-09-26  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+        PR c/41476\n+\t* c-typeck.c (build_conditional_expr): Use the readonly and\n+\tvolatile flags of the operand types, not of the operands itself.\n+\n 2009-09-25  Peter O'Gorman  <pogma@thewrittenword.com>\n \n \tcollect2.c (main): Look for -brtl before adding libraries.\n@@ -130,7 +136,7 @@\n \t(reg_class): Likewise.\n \t(REG_CLASS_NAMES): Likewise.\n \t* config/m32c/m32c.c (m32c_reg_class_from_constraint): Likewise.\n-\t\n+\n \t* config/m32c/m32c.c (m32c_override_options): Disable -fivopts for\n \tM32C.\n \n@@ -171,15 +177,15 @@\n 2009-09-24  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n \n \tPR bootstrap/41405\n-        * common.opt: Initialize dwarf_strict to -1.\n+\t* common.opt: Initialize dwarf_strict to -1.\n \t* toplev.c (process_options): Catch unset dwarf_strict\n \tand set to 0 for all targets not overriding.\n \t* config/darwin.c (darwin_override_options): Catch unset\n \tdwarf_strict and override to 1.\n \n 2009-09-24  Jeff Law  <law@redhat.com>\n \n-\t* tree-into-ssa.c (rewrite_into_ssa): Free interesting_blocks. \n+\t* tree-into-ssa.c (rewrite_into_ssa): Free interesting_blocks.\n \n 2009-09-24  Richard Guenther  <rguenther@suse.de>\n \n@@ -577,7 +583,7 @@\n \t(TARGET_TRAMPOLINE_INIT): New.\n \t(mcore_function_value): Fix typo.\n \t(mcore_asm_trampoline_template, mcore_trampoline_init): New.\n-\t* config/mcore/mcore.h (TRAMPOLINE_TEMPLATE): Move code \n+\t* config/mcore/mcore.h (TRAMPOLINE_TEMPLATE): Move code\n \tto mcore_asm_trampoline_template.\n \t(INITIALIZE_TRAMPOLINE): Move code to mcore_trampoline_init.\n \n@@ -1998,7 +2004,7 @@\n \t* doc/install.texi (avr): Remove obsolete reference site.\n \n 2009-09-12  Gerald Pfeifer  <gerald@pfeifer.com>\n-\t\n+\n \t* doc/install.texi (Binaries): Adjust AIX link.\n \n 2009-09-12  Akim Demaille  <demaille@gostai.com>"}, {"sha": "4c55e587de3c9a5c82943ba52e5fda60325a4a57", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afbd0665815715ff285dba5143ecb49d4d27990f/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afbd0665815715ff285dba5143ecb49d4d27990f/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=afbd0665815715ff285dba5143ecb49d4d27990f", "patch": "@@ -4033,12 +4033,12 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n   /* Merge const and volatile flags of the incoming types.  */\n   result_type\n     = build_type_variant (result_type,\n-\t\t\t  TREE_READONLY (op1) || TREE_READONLY (op2),\n-\t\t\t  TREE_THIS_VOLATILE (op1) || TREE_THIS_VOLATILE (op2));\n+\t\t\t  TYPE_READONLY (type1) || TYPE_READONLY (type2),\n+\t\t\t  TYPE_VOLATILE (type1) || TYPE_VOLATILE (type2));\n \n-  if (result_type != TREE_TYPE (op1))\n+  if (result_type != type1)\n     op1 = convert_and_check (result_type, op1);\n-  if (result_type != TREE_TYPE (op2))\n+  if (result_type != type2)\n     op2 = convert_and_check (result_type, op2);\n \n   if (ifexp_bcp && ifexp == truthvalue_true_node)"}, {"sha": "36471f59f66997b9ca897b5320fc90e64b7e366b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afbd0665815715ff285dba5143ecb49d4d27990f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afbd0665815715ff285dba5143ecb49d4d27990f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=afbd0665815715ff285dba5143ecb49d4d27990f", "patch": "@@ -1,3 +1,8 @@\n+2009-09-26  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\tPR c/41476\n+\t* gcc.dg/cond-constqual-1.c: New test.\n+\n 2009-09-26  Michael Matz  <matz@suse.de>\n \n \tPR lto/40758\n@@ -55,7 +60,7 @@\n \tPR fortran/41459\n \t* gfortran.dg/empty_label.f: New test.\n \t* gfortran.dg/empty_label.f90: Ditto.\n-\t* gfortran.dg/warnings_are_errors_1.f: Fix to emit a single warning. \n+\t* gfortran.dg/warnings_are_errors_1.f: Fix to emit a single warning.\n \n 2009-09-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n "}, {"sha": "3354c7214a47a94b9380582461c0c373b8f2541e", "filename": "gcc/testsuite/gcc.dg/cond-constqual-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afbd0665815715ff285dba5143ecb49d4d27990f/gcc%2Ftestsuite%2Fgcc.dg%2Fcond-constqual-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afbd0665815715ff285dba5143ecb49d4d27990f/gcc%2Ftestsuite%2Fgcc.dg%2Fcond-constqual-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcond-constqual-1.c?ref=afbd0665815715ff285dba5143ecb49d4d27990f", "patch": "@@ -0,0 +1,15 @@\n+/* Test for const qualification of type of conditional expression.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+int foo (int) __attribute__ ((const));\n+const int i;\n+\n+void\n+test (void)\n+{\n+  __typeof__ (1 ? foo (0) : 0) texpr;\n+  __typeof__ (1 ? i : 0) texpr2;\n+  texpr = 0;  /* { dg-bogus \"read-only variable\" \"conditional expression with call to const function\" } */\n+  texpr2 = 0; /* { dg-error \"read-only variable\" \"conditional expression with const variable\" } */\n+}"}]}