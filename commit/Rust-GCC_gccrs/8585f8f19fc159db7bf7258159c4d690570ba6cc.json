{"sha": "8585f8f19fc159db7bf7258159c4d690570ba6cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU4NWY4ZjE5ZmMxNTlkYjdiZjcyNTgxNTljNGQ2OTA1NzBiYTZjYw==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-11-30T07:06:35Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-11-30T07:06:35Z"}, "message": "Comment typo fix.\n\nFrom-SVN: r24009", "tree": {"sha": "0fc792d723a32fee1736b916ededde2d1e9f46ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fc792d723a32fee1736b916ededde2d1e9f46ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8585f8f19fc159db7bf7258159c4d690570ba6cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8585f8f19fc159db7bf7258159c4d690570ba6cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8585f8f19fc159db7bf7258159c4d690570ba6cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8585f8f19fc159db7bf7258159c4d690570ba6cc/comments", "author": null, "committer": null, "parents": [{"sha": "dfc00b3875eaf42a6e5d5507b2b27236367bd02b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfc00b3875eaf42a6e5d5507b2b27236367bd02b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfc00b3875eaf42a6e5d5507b2b27236367bd02b"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "e8110acae0eec5ec70751ac86aacce7536f4cd25", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8585f8f19fc159db7bf7258159c4d690570ba6cc/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8585f8f19fc159db7bf7258159c4d690570ba6cc/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=8585f8f19fc159db7bf7258159c4d690570ba6cc", "patch": "@@ -754,7 +754,7 @@ update_equiv_regs ()\n \t calculate_needs, but we traditionally work around this problem\n \t here by rejecting equivalences when the destination is in a register\n \t that's likely spilled.  This is fragile, of course, since the\n-\t preferred class of a pseudo depends on all intructions that set\n+\t preferred class of a pseudo depends on all instructions that set\n \t or use it.  */\n \n       if (GET_CODE (dest) != REG"}]}