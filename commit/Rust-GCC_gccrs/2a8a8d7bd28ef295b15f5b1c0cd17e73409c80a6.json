{"sha": "2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4YThkN2JkMjhlZjI5NWIxNWY1YjFjMGNkMTdlNzM0MDljODBhNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-19T13:10:36Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-19T13:10:36Z"}, "message": "toplev.c (general_init): Call\tregister dump lang hook.\n\n\tLANG_HOOK_REGISTER_DUMPS\n\tgcc/\n\t* toplev.c (general_init): Call\tregister dump lang hook.\n\t* doc/invoke.texi: Document -fdump-lang option family.\n\t* dumpfile.c (dump_files): Remove class dump here.\n\t(FIRST_AUTO_NUMBERED_DUMP): Adjust.\n\t* dumpfile.h (tree_dump_index): Remove TDI_class.\n\t* langhooks-def.h (lhd_register_dumps): Declare.\n\t(LANG_HOOKS_REGISTER_DUMPS): Define.\n\t(LANG_HOOKS_INITIALIZER): Add it.\n\t* langhooks.c (lhd_register_dumps): Define.\n\t* langhooks.h (struct lang_hooks): Add register_dumps.\n\tc-family/\n\t* c-opts.c (class_dump_file, class_dump_flags): Delete.\n\t(c_common_parse_file): Remove class dump handling.\n\t(get_dump_info): Likewise.\n\tcp/\n\t* class.c (class_dump_id): Define.\n\t(dump_class_hierarchy, dump_vtable, dump_vtt): Use it.\n\t* cp-objcp-common.c (cp_register_dumps): New.\n\t* cp-objcp-common.h (cp_register_dumps): Declare.\n\t(LANG_HOOKS_REGISTER_DUMPS): Override.\n\t* cp-tree.h (class_dump_id): Declare.\n\ttestsuite/\n\t* g++.dg/inherit/covariant7.C: Adjust.\n\nFrom-SVN: r248271", "tree": {"sha": "b57253306ce6fa1d70381c3429ede182b0b3d246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b57253306ce6fa1d70381c3429ede182b0b3d246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a978134eac8ab9a3248405b4114cff2e957ed812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a978134eac8ab9a3248405b4114cff2e957ed812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a978134eac8ab9a3248405b4114cff2e957ed812"}], "stats": {"total": 145, "additions": 105, "deletions": 40}, "files": [{"sha": "44ff6176e90650807efbd759e2f4eff4ba1669e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -1,3 +1,17 @@\n+2017-05-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\tLANG_HOOK_REGISTER_DUMPS\n+\t* toplev.c (general_init): Call register dump lang hook.\n+\t* doc/invoke.texi: Document -fdump-lang option family.\n+\t* dumpfile.c (dump_files): Remove class dump here.\n+\t(FIRST_AUTO_NUMBERED_DUMP): Adjust.\n+\t* dumpfile.h (tree_dump_index): Remove TDI_class.\n+\t* langhooks-def.h (lhd_register_dumps): Declare.\n+\t(LANG_HOOKS_REGISTER_DUMPS): Define.\n+\t(LANG_HOOKS_INITIALIZER): Add it.\n+\t* langhooks.c (lhd_register_dumps): Define.\n+\t* langhooks.h (struct lang_hooks): Add register_dumps.\n+\n 2017-05-19  Nathan Sidwell  <nathan@acm.org>\n \n \t* context.h (context::set_passes): New."}, {"sha": "5a842bd74d78e44b32dd2548ece9cbc3923c3b39", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -1,3 +1,9 @@\n+2017-05-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-opts.c (class_dump_file, class_dump_flags): Delete.\n+\t(c_common_parse_file): Remove class dump handling.\n+\t(get_dump_info): Likewise.\n+\n 2017-05-19  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/80593"}, {"sha": "be4478f5ce99758b57ed3327d5c61120729aeb21", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -102,8 +102,6 @@ static size_t include_cursor;\n /* Dump files/flags to use during parsing.  */\n static FILE *original_dump_file = NULL;\n static dump_flags_t original_dump_flags;\n-static FILE *class_dump_file = NULL;\n-static dump_flags_t class_dump_flags;\n \n /* Whether any standard preincluded header has been preincluded.  */\n static bool done_preinclude;\n@@ -1098,10 +1096,9 @@ c_common_parse_file (void)\n   for (;;)\n     {\n       c_finish_options ();\n-      /* Open the dump files to use for the original and class dump output\n+      /* Open the dump file to use for the original dump output\n          here, to be used during parsing for the current file.  */\n       original_dump_file = dump_begin (TDI_original, &original_dump_flags);\n-      class_dump_file = dump_begin (TDI_class, &class_dump_flags);\n       pch_init ();\n       push_file_scope ();\n       c_parse_file ();\n@@ -1120,11 +1117,6 @@ c_common_parse_file (void)\n           dump_end (TDI_original, original_dump_file);\n           original_dump_file = NULL;\n         }\n-      if (class_dump_file)\n-        {\n-          dump_end (TDI_class, class_dump_file);\n-          class_dump_file = NULL;\n-        }\n       /* If an input file is missing, abandon further compilation.\n \t cpplib has issued a diagnostic.  */\n       if (!this_input_filename)\n@@ -1135,20 +1127,14 @@ c_common_parse_file (void)\n }\n \n /* Returns the appropriate dump file for PHASE to dump with FLAGS.  */\n+\n FILE *\n get_dump_info (int phase, dump_flags_t *flags)\n {\n-  gcc_assert (phase == TDI_original || phase == TDI_class);\n-  if (phase == TDI_original)\n-    {\n-      *flags = original_dump_flags;\n-      return original_dump_file;\n-    }\n-  else\n-    {\n-      *flags = class_dump_flags;\n-      return class_dump_file;\n-    }\n+  gcc_assert (phase == TDI_original);\n+\n+  *flags = original_dump_flags;\n+  return original_dump_file;\n }\n \n /* Common finish hook for the C, ObjC and C++ front ends.  */"}, {"sha": "09c82699b463fb62c3436f9a1426ff1a8d6a2055", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -1,3 +1,12 @@\n+2017-05-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* class.c (class_dump_id): Define.\n+\t(dump_class_hierarchy, dump_vtable, dump_vtt): Use it.\n+\t* cp-objcp-common.c (cp_register_dumps): New.\n+\t* cp-objcp-common.h (cp_register_dumps): Declare.\n+\t(LANG_HOOKS_REGISTER_DUMPS): Override.\n+\t* cp-tree.h (class_dump_id): Declare.\n+\n 2017-05-18  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (OVL_ARG_DEPENDENT): Delete."}, {"sha": "c0eb945b385db2996167b2b4a4f51a572cf3fc54", "filename": "gcc/cp/class.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -37,6 +37,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"intl.h\"\n \n+/* Id for dumping the class hierarchy.  */\n+int class_dump_id;\n+ \n /* The number of nested classes being processed.  If we are not in the\n    scope of any class, this is zero.  */\n \n@@ -8914,11 +8917,10 @@ static void\n dump_class_hierarchy (tree t)\n {\n   dump_flags_t flags;\n-  FILE *stream = get_dump_info (TDI_class, &flags);\n-\n-  if (stream)\n+  if (FILE *stream = dump_begin (class_dump_id, &flags))\n     {\n       dump_class_hierarchy_1 (stream, flags, t);\n+      dump_end (class_dump_id, stream);\n     }\n }\n \n@@ -8948,7 +8950,7 @@ static void\n dump_vtable (tree t, tree binfo, tree vtable)\n {\n   dump_flags_t flags;\n-  FILE *stream = get_dump_info (TDI_class, &flags);\n+  FILE *stream = dump_begin (class_dump_id, &flags);\n \n   if (!stream)\n     return;\n@@ -8971,13 +8973,15 @@ dump_vtable (tree t, tree binfo, tree vtable)\n       dump_array (stream, vtable);\n       fprintf (stream, \"\\n\");\n     }\n+\n+  dump_end (class_dump_id, stream);\n }\n \n static void\n dump_vtt (tree t, tree vtt)\n {\n   dump_flags_t flags;\n-  FILE *stream = get_dump_info (TDI_class, &flags);\n+  FILE *stream = dump_begin (class_dump_id, &flags);\n \n   if (!stream)\n     return;\n@@ -8989,6 +8993,8 @@ dump_vtt (tree t, tree vtt)\n       dump_array (stream, vtt);\n       fprintf (stream, \"\\n\");\n     }\n+\n+  dump_end (class_dump_id, stream);\n }\n \n /* Dump a function or thunk and its thunkees.  */"}, {"sha": "40e9ccbe5104e4b2b0a7e140dab005891e491f9a", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -352,6 +352,15 @@ cp_pushdecl (tree decl)\n   return pushdecl (decl);\n }\n \n+/* Register c++-specific dumps.  */\n+\n+void\n+cp_register_dumps (gcc::dump_manager *dumps)\n+{\n+  class_dump_id = dumps->dump_register\n+    (\".class\", \"lang-class\", \"lang-class\", DK_lang, OPTGROUP_NONE, false);\n+}\n+\n void\n cp_common_init_ts (void)\n {"}, {"sha": "10fcdf324fc4881e61950adfa370402e9e8b00d2", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -33,6 +33,7 @@ extern void cp_common_init_ts (void);\n extern tree cp_unit_size_without_reusable_padding (tree);\n extern tree cp_get_global_decls ();\n extern tree cp_pushdecl (tree);\n+extern void cp_register_dumps (gcc::dump_manager *);\n \n /* Lang hooks that are shared between C++ and ObjC++ are defined here.  Hooks\n    specific to C++ or ObjC++ go in cp/cp-lang.c and objcp/objcp-lang.c,\n@@ -56,6 +57,8 @@ extern tree cp_pushdecl (tree);\n #define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n #undef LANG_HOOKS_INITIALIZE_DIAGNOSTICS\n #define LANG_HOOKS_INITIALIZE_DIAGNOSTICS cxx_initialize_diagnostics\n+#undef LANG_HOOKS_REGISTER_DUMPS\n+#define LANG_HOOKS_REGISTER_DUMPS cp_register_dumps\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n #undef LANG_HOOKS_HANDLE_FILENAME"}, {"sha": "e9e4b0061103ae31cdf8a903252578d12d1eda64", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -5749,6 +5749,9 @@ concept_template_p (tree t)\n    e.g  \"int f(void)\".  */\n extern cp_parameter_declarator *no_parameters;\n \n+/* Various dump ids.  */\n+extern int class_dump_id;\n+\n /* in call.c */\n extern bool check_dtor_name\t\t\t(tree, tree);\n int magic_varargs_p\t\t\t\t(tree);"}, {"sha": "4b7304ec02585bba986e6d25c035764439cb3e73", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -544,6 +544,9 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-final-insns@r{[}=@var{file}@r{]}\n -fdump-ipa-all  -fdump-ipa-cgraph  -fdump-ipa-inline @gol\n -fdump-lang-all @gol\n+-fdump-lang-@var{switch} @gol\n+-fdump-lang-@var{switch}-@var{options} @gol\n+-fdump-lang-@var{switch}-@var{options}=@var{filename} @gol\n -fdump-passes @gol\n -fdump-rtl-@var{pass}  -fdump-rtl-@var{pass}=@var{filename} @gol\n -fdump-statistics @gol\n@@ -12940,16 +12943,6 @@ When doing debugging dumps (see @option{-d} option above), suppress\n instruction numbers for the links to the previous and next instructions\n in a sequence.\n \n-@item -fdump-class-hierarchy @r{(C++ only)}\n-@itemx -fdump-class-hierarchy-@var{options} @r{(C++ only)}\n-@opindex fdump-class-hierarchy\n-Dump a representation of each class's hierarchy and virtual function\n-table layout to a file.  The file name is made by appending\n-@file{.class} to the source file name, and the file is created in the\n-same directory as the output file.  If the @samp{-@var{options}} form\n-is used, @var{options} controls the details of the dump as described\n-for the @option{-fdump-tree} options.\n-\n @item -fdump-ipa-@var{switch}\n @opindex fdump-ipa\n Control the dumping at various stages of inter-procedural analysis\n@@ -12972,8 +12965,26 @@ Dump after function inlining.\n @end table\n \n @item -fdump-lang-all\n+@itemx -fdump-lang-@var{switch}\n+@itemx -fdump-lang-@var{switch}-@var{options}\n+@itemx -fdump-lang-@var{switch}-@var{options}=@var{filename}\n @opindex fdump-lang-all\n-Control the dumping of language-specific information.\n+@opindex fdump-lang\n+Control the dumping of language-specific information.  The @var{options}\n+and @var{filename} portions behave as described in the\n+`@option{-fdump-tree} option.  The following @var{switch} values are\n+accepted:\n+\n+@table @samp\n+@item all\n+\n+Enable all language-specific dumps.\n+\n+@item class\n+Dump class hierarchy information.  Virtual table information is emitted\n+unless '@option{slim}' is specified.  This option is applicable to C++ only.\n+\n+@end table\n \n @item -fdump-passes\n @opindex fdump-passes"}, {"sha": "45e47b2d4e86c02d816af1bcca816391128088e3", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -74,11 +74,10 @@ static struct dump_file_info dump_files[TDI_end] =\n   dump_file_info (\".type-inheritance\", \"ipa-type-inheritance\", DK_ipa, 0),\n   dump_file_info (\".ipa-clones\", \"ipa-clones\", DK_ipa, 0),\n   dump_file_info (\".tu\", \"translation-unit\", DK_lang, 1),\n-  dump_file_info (\".class\", \"class-hierarchy\", DK_lang, 2),\n   dump_file_info (\".original\", \"tree-original\", DK_tree, 3),\n   dump_file_info (\".gimple\", \"tree-gimple\", DK_tree, 4),\n   dump_file_info (\".nested\", \"tree-nested\", DK_tree, 5),\n-#define FIRST_AUTO_NUMBERED_DUMP 6\n+#define FIRST_AUTO_NUMBERED_DUMP 4\n \n   dump_file_info (NULL, \"lang-all\", DK_lang, 0),\n   dump_file_info (NULL, \"tree-all\", DK_tree, 0),"}, {"sha": "1f7c8de682b73e78d3ba5c20bbc47d87549bc4c0", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -31,7 +31,6 @@ enum tree_dump_index\n   TDI_inheritance,\t\t/* dump type inheritance graph.  */\n   TDI_clones,\t\t\t/* dump IPA cloning decisions.  */\n   TDI_tu,\t\t\t/* dump the whole translation unit.  */\n-  TDI_class,\t\t\t/* dump class hierarchy.  */\n   TDI_original,\t\t\t/* dump each function before optimizing it */\n   TDI_generic,\t\t\t/* dump each function after genericizing it */\n   TDI_nested,\t\t\t/* dump each function after unnesting it */"}, {"sha": "ea2006ccec5c6aa2052e87a3b9c7eb4b4c61dc8c", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -39,6 +39,7 @@ extern void lhd_do_nothing (void);\n extern void lhd_do_nothing_t (tree);\n extern void lhd_do_nothing_f (struct function *);\n extern tree lhd_pass_through_t (tree);\n+extern void lhd_register_dumps (gcc::dump_manager *);\n extern bool lhd_post_options (const char **);\n extern alias_set_type lhd_get_alias_set (tree);\n extern tree lhd_return_null_tree (tree);\n@@ -97,6 +98,7 @@ extern int lhd_type_dwarf_attribute (const_tree, int);\n #define LANG_HOOKS_INIT_OPTIONS_STRUCT\thook_void_gcc_optionsp\n #define LANG_HOOKS_INIT_OPTIONS\t\tlhd_init_options\n #define LANG_HOOKS_INITIALIZE_DIAGNOSTICS lhd_initialize_diagnostics\n+#define LANG_HOOKS_REGISTER_DUMPS\tlhd_register_dumps\n #define LANG_HOOKS_COMPLAIN_WRONG_LANG_P lhd_complain_wrong_lang_p\n #define LANG_HOOKS_HANDLE_OPTION\tlhd_handle_option\n #define LANG_HOOKS_POST_OPTIONS\t\tlhd_post_options\n@@ -294,6 +296,7 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_INIT_OPTIONS_STRUCT, \\\n   LANG_HOOKS_INIT_OPTIONS, \\\n   LANG_HOOKS_INITIALIZE_DIAGNOSTICS, \\\n+  LANG_HOOKS_REGISTER_DUMPS, \\\n   LANG_HOOKS_COMPLAIN_WRONG_LANG_P, \\\n   LANG_HOOKS_HANDLE_OPTION, \\\n   LANG_HOOKS_POST_OPTIONS, \\"}, {"sha": "c54b790f0cc5eead31e63c47d94437ee3839af38", "filename": "gcc/langhooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -322,6 +322,12 @@ lhd_initialize_diagnostics (diagnostic_context *ctx ATTRIBUTE_UNUSED)\n {\n }\n \n+/* Called to register dumps.  */\n+void\n+lhd_register_dumps (gcc::dump_manager *)\n+{\n+}\n+\n /* Called to perform language-specific options initialization.  */\n void\n lhd_init_options (unsigned int decoded_options_count ATTRIBUTE_UNUSED,"}, {"sha": "b2f0f922b8921ea901e79a5c84b2fccdfe88f42a", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -326,6 +326,9 @@ struct lang_hooks\n      global diagnostic context structure.  */\n   void (*initialize_diagnostics) (diagnostic_context *);\n \n+  /* Register language-specific dumps.  */\n+  void (*register_dumps) (gcc::dump_manager *);\n+\n   /* Return true if a warning should be given about option OPTION,\n      which is for the wrong language, false if it should be quietly\n      ignored.  */"}, {"sha": "5f0fe80684ec8105372e9395d8f909233e029483", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -1,3 +1,7 @@\n+2017-05-19  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/inherit/covariant7.C: Adjust.\n+\n 2017-05-19  Prakhar Bahuguna  <prakhar.bahuguna@arm.com>\n \n \t* gcc.target/arm/tls-disable-literal-pool.c: Change"}, {"sha": "73663bd6ebe790c6f42a58359986b8fbe440eed8", "filename": "gcc/testsuite/g++.dg/inherit/covariant7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcovariant7.C?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-prune-output \"direct base\" }\n-// { dg-options \"-fdump-class-hierarchy\" }\n+// { dg-options \"-fdump-lang-class\" }\n \n // Copyright (C) 2002 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 27 Dec 2002 <nathan@codesourcery.com>"}, {"sha": "425315c8b5ef97e8005b38d955fb9be74fd5ef23", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2a8a8d7bd28ef295b15f5b1c0cd17e73409c80a6", "patch": "@@ -1158,6 +1158,10 @@ general_init (const char *argv0, bool init_signals)\n      dump manager.  */\n   g = new gcc::context ();\n \n+  /* Allow languages to register their dumps before the optimization\n+     passes.  */\n+  lang_hooks.register_dumps (g->get_dumps ());\n+\n   /* Create the passes.  */\n   g->set_passes (new gcc::pass_manager (g));\n "}]}