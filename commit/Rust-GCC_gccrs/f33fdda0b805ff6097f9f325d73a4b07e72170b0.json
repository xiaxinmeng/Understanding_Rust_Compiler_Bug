{"sha": "f33fdda0b805ff6097f9f325d73a4b07e72170b0", "node_id": "C_kwDOANBUbNoAKGYzM2ZkZGEwYjgwNWZmNjA5N2Y5ZjMyNWQ3M2E0YjA3ZTcyMTcwYjA", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-29T11:52:45Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-30T10:23:27Z"}, "message": "Remove can_throw_non_call_exceptions special case from operator_div::wi_fold.\n\n\tPR tree-optimization/103451\n\ngcc/ChangeLog:\n\n\t* range-op.cc (operator_div::wi_fold): Remove\n\tcan_throw_non_call_exceptions special case.\n\t* tree-ssa-sink.c (sink_code_in_bb): Same.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr103451.c: New test.", "tree": {"sha": "fe4239e3bff55be8b3a1e7e283c872e9a87ce6ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe4239e3bff55be8b3a1e7e283c872e9a87ce6ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f33fdda0b805ff6097f9f325d73a4b07e72170b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33fdda0b805ff6097f9f325d73a4b07e72170b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33fdda0b805ff6097f9f325d73a4b07e72170b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33fdda0b805ff6097f9f325d73a4b07e72170b0/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af3f53d325fe4a6b1f3da64dc02d10978b9a116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8af3f53d325fe4a6b1f3da64dc02d10978b9a116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8af3f53d325fe4a6b1f3da64dc02d10978b9a116"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "6fe5f1cb4e05c824d1d215d3b395f6a69bd9bd71", "filename": "gcc/range-op.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33fdda0b805ff6097f9f325d73a4b07e72170b0/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33fdda0b805ff6097f9f325d73a4b07e72170b0/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=f33fdda0b805ff6097f9f325d73a4b07e72170b0", "patch": "@@ -1832,13 +1832,6 @@ operator_div::wi_fold (irange &r, tree type,\n       return;\n     }\n \n-  // If flag_non_call_exceptions, we must not eliminate a division by zero.\n-  if (cfun->can_throw_non_call_exceptions)\n-    {\n-      r.set_varying (type);\n-      return;\n-    }\n-\n   // If we're definitely dividing by zero, there's nothing to do.\n   if (wi_zero_p (type, divisor_min, divisor_max))\n     {"}, {"sha": "c701934603eda0119869c22c5c29ffde00a6c4dc", "filename": "gcc/testsuite/gcc.dg/pr103451.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33fdda0b805ff6097f9f325d73a4b07e72170b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103451.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33fdda0b805ff6097f9f325d73a4b07e72170b0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103451.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103451.c?ref=f33fdda0b805ff6097f9f325d73a4b07e72170b0", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -w -fnon-call-exceptions -fno-delete-dead-exceptions -fdump-tree-optimized\" }\n+\n+int func_10_ptr_12;\n+\n+void func_10(long li_8) \n+{\n+  long *ptr_9 = &li_8;\n+  li_8 &= *ptr_9 / 0 ?: li_8;\n+  for (;;)\n+    func_10_ptr_12 &= 4 ? *ptr_9 : 4;\n+}\n+\n+void func_9_s_8() \n+{ \n+  func_10(func_9_s_8); \n+}\n+\n+// { dg-final { scan-tree-dump \" / 0\" \"optimized\" } }"}, {"sha": "c5d67840be3aba2b21cc275f2b20a15311610037", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33fdda0b805ff6097f9f325d73a4b07e72170b0/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33fdda0b805ff6097f9f325d73a4b07e72170b0/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=f33fdda0b805ff6097f9f325d73a4b07e72170b0", "patch": "@@ -696,7 +696,9 @@ sink_code_in_bb (basic_block bb)\n \t  /* If we face a dead stmt remove it as it possibly blocks\n \t     sinking of uses.  */\n \t  if (zero_uses_p\n-\t      && ! gimple_vdef (stmt))\n+\t      && !gimple_vdef (stmt)\n+\t      && (cfun->can_delete_dead_exceptions\n+\t\t  || !stmt_could_throw_p (cfun, stmt)))\n \t    {\n \t      gsi_remove (&saved, true);\n \t      release_defs (stmt);"}]}