{"sha": "06f2efd7ed334399dcbab0ebe6980c42cd21acaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZmMmVmZDdlZDMzNDM5OWRjYmFiMGViZTY5ODBjNDJjZDIxYWNhZg==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2010-06-21T15:18:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-21T15:18:17Z"}, "message": "sem_res.adb: Minor reformatting.\n\n2010-06-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb: Minor reformatting.\n\t* atree.adb: New debugging hook \"rr\" for node rewrites.\n\nFrom-SVN: r161087", "tree": {"sha": "53b809b54b47d7784b3eb272eeb82414639fc70c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53b809b54b47d7784b3eb272eeb82414639fc70c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06f2efd7ed334399dcbab0ebe6980c42cd21acaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f2efd7ed334399dcbab0ebe6980c42cd21acaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06f2efd7ed334399dcbab0ebe6980c42cd21acaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f2efd7ed334399dcbab0ebe6980c42cd21acaf/comments", "author": null, "committer": null, "parents": [{"sha": "f27e042c9e2fbb467e2ea6724117f51aa665d239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f27e042c9e2fbb467e2ea6724117f51aa665d239", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f27e042c9e2fbb467e2ea6724117f51aa665d239"}], "stats": {"total": 123, "additions": 94, "deletions": 29}, "files": [{"sha": "998166ff18b26a4d6b3badcd55809c5511b77171", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f2efd7ed334399dcbab0ebe6980c42cd21acaf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f2efd7ed334399dcbab0ebe6980c42cd21acaf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=06f2efd7ed334399dcbab0ebe6980c42cd21acaf", "patch": "@@ -1,3 +1,8 @@\n+2010-06-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_res.adb: Minor reformatting.\n+\t* atree.adb: New debugging hook \"rr\" for node rewrites.\n+\n 2010-06-21  Robert Dewar  <dewar@adacore.com>\n \n \t* g-expect.ads, g-expect.adb: Minor reformatting."}, {"sha": "bed359fa52e0bc01d14ff92f7b2205735c750765", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 78, "deletions": 16, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f2efd7ed334399dcbab0ebe6980c42cd21acaf/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f2efd7ed334399dcbab0ebe6980c42cd21acaf/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=06f2efd7ed334399dcbab0ebe6980c42cd21acaf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -65,6 +65,8 @@ package body Atree is\n \n    --  The second method is faster\n \n+   --  Similarly, rr and rrd allow breaking on rewriting of a given node.\n+\n    ww : Node_Id'Base := Node_Id'First - 1;\n    pragma Export (Ada, ww); --  trick the optimizer\n    Watch_Node : Node_Id'Base renames ww;\n@@ -89,6 +91,25 @@ package body Atree is\n    --  If Node = Watch_Node, this prints out the new node and calls\n    --  New_Node_Breakpoint. Otherwise, does nothing.\n \n+   procedure rr;\n+   pragma Export (Ada, rr);\n+   procedure Rewrite_Breakpoint renames rr;\n+   --  This doesn't do anything interesting; it's just for setting breakpoint\n+   --  on as explained above.\n+\n+   procedure rrd (Old_Node, New_Node : Node_Id);\n+   pragma Export (Ada, rrd);\n+   procedure Rewrite_Debugging_Output\n+     (Old_Node, New_Node : Node_Id) renames rrd;\n+   --  For debugging. If debugging is turned on, Rewrite calls this. If debug\n+   --  flag N is turned on, this prints out the new node.\n+   --\n+   --  If Old_Node = Watch_Node, this prints out the old and new nodes and\n+   --  calls Rewrite_Breakpoint. Otherwise, does nothing.\n+\n+   procedure Node_Debug_Output (Op : String; N : Node_Id);\n+   --  Common code for nnr and rrd. Write Op followed by information about N\n+\n    -----------------------------\n    -- Local Objects and Types --\n    -----------------------------\n@@ -1237,21 +1258,7 @@ package body Atree is\n \n    begin\n       if Debug_Flag_N or else Node_Is_Watched then\n-         Write_Str (\"Allocate \");\n-\n-         if Nkind (N) in N_Entity then\n-            Write_Str (\"entity\");\n-         else\n-            Write_Str (\"node\");\n-         end if;\n-\n-         Write_Str (\", Id = \");\n-         Write_Int (Int (N));\n-         Write_Str (\"  \");\n-         Write_Location (Sloc (N));\n-         Write_Str (\"  \");\n-         Write_Str (Node_Kind'Image (Nkind (N)));\n-         Write_Eol;\n+         Node_Debug_Output (\"Allocate\", N);\n \n          if Node_Is_Watched then\n             New_Node_Breakpoint;\n@@ -1371,6 +1378,7 @@ package body Atree is\n    begin\n       return Nkind_In (Nkind (N), V1, V2, V3, V4, V5, V6, V7, V8, V9);\n    end Nkind_In;\n+\n    --------\n    -- No --\n    --------\n@@ -1380,6 +1388,29 @@ package body Atree is\n       return N = Empty;\n    end No;\n \n+   -----------------------\n+   -- Node_Debug_Output --\n+   -----------------------\n+\n+   procedure Node_Debug_Output (Op : String; N : Node_Id) is\n+   begin\n+      Write_Str (Op);\n+\n+      if Nkind (N) in N_Entity then\n+         Write_Str (\" entity\");\n+      else\n+         Write_Str (\" node\");\n+      end if;\n+\n+      Write_Str (\" Id = \");\n+      Write_Int (Int (N));\n+      Write_Str (\"  \");\n+      Write_Location (Sloc (N));\n+      Write_Str (\"  \");\n+      Write_Str (Node_Kind'Image (Nkind (N)));\n+      Write_Eol;\n+   end Node_Debug_Output;\n+\n    -------------------\n    -- Nodes_Address --\n    -------------------\n@@ -1564,6 +1595,7 @@ package body Atree is\n         (not Has_Extension (Old_Node)\n            and not Has_Extension (New_Node)\n            and not Nodes.Table (New_Node).In_List);\n+      pragma Debug (Rewrite_Debugging_Output (Old_Node, New_Node));\n \n       if Nkind (Old_Node) in N_Subexpr then\n          Old_Paren_Count     := Paren_Count (Old_Node);\n@@ -1598,6 +1630,36 @@ package body Atree is\n       Fix_Parents (Ref_Node => New_Node, Fix_Node => Old_Node);\n    end Rewrite;\n \n+   -------------------------\n+   -- Rewrite_Breakpoint --\n+   -------------------------\n+\n+   procedure rr is -- Rewrite_Breakpoint\n+   begin\n+      Write_Str (\"Watched node \");\n+      Write_Int (Int (Watch_Node));\n+      Write_Str (\" rewritten\");\n+      Write_Eol;\n+   end rr;\n+\n+   ------------------------------\n+   -- Rewrite_Debugging_Output --\n+   ------------------------------\n+\n+   procedure rrd (Old_Node, New_Node : Node_Id) is -- Rewrite_Debugging_Output\n+      Node_Is_Watched : constant Boolean := Old_Node = Watch_Node;\n+\n+   begin\n+      if Debug_Flag_N or else Node_Is_Watched then\n+         Node_Debug_Output (\"Rewrite\", Old_Node);\n+         Node_Debug_Output (\"into\",    New_Node);\n+\n+         if Node_Is_Watched then\n+            Rewrite_Breakpoint;\n+         end if;\n+      end if;\n+   end rrd;\n+\n    ------------------\n    -- Set_Analyzed --\n    ------------------"}, {"sha": "e45dbe2ef28f774a85917df87fdea02c990a9228", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f2efd7ed334399dcbab0ebe6980c42cd21acaf/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f2efd7ed334399dcbab0ebe6980c42cd21acaf/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=06f2efd7ed334399dcbab0ebe6980c42cd21acaf", "patch": "@@ -1151,7 +1151,7 @@ package body Sem_Res is\n \n       function Operand_Type_In_Scope (S : Entity_Id) return Boolean;\n       --  If the operand is not universal, and the operator is given by a\n-      --  expanded name,  verify that the operand has an interpretation with\n+      --  expanded name, verify that the operand has an interpretation with\n       --  a type defined in the given scope of the operator.\n \n       function Type_In_P (Test : Kind_Test) return Entity_Id;\n@@ -1292,16 +1292,15 @@ package body Sem_Res is\n       --  you courtesy of b33302a. The type itself must be frozen, so we must\n       --  find the type of the proper class in the given scope.\n \n-      --  A final wrinkle is the multiplication operator for fixed point\n-      --  types, which is defined in Standard only, and not in the scope of\n-      --  the fixed_point type itself.\n+      --  A final wrinkle is the multiplication operator for fixed point types,\n+      --  which is defined in Standard only, and not in the scope of the\n+      --  fixed_point type itself.\n \n       if Nkind (Name (N)) = N_Expanded_Name then\n          Pack := Entity (Prefix (Name (N)));\n \n-         --  If the entity being called is defined in the given package,\n-         --  it is a renaming of a predefined operator, and known to be\n-         --  legal.\n+         --  If the entity being called is defined in the given package, it is\n+         --  a renaming of a predefined operator, and known to be legal.\n \n          if Scope (Entity (Name (N))) = Pack\n             and then Pack /= Standard_Standard\n@@ -1315,17 +1314,16 @@ package body Sem_Res is\n          elsif In_Instance then\n             null;\n \n-         elsif (Op_Name =  Name_Op_Multiply\n-              or else Op_Name = Name_Op_Divide)\n+         elsif (Op_Name =  Name_Op_Multiply or else Op_Name = Name_Op_Divide)\n            and then Is_Fixed_Point_Type (Etype (Left_Opnd  (Op_Node)))\n            and then Is_Fixed_Point_Type (Etype (Right_Opnd (Op_Node)))\n          then\n             if Pack /= Standard_Standard then\n                Error := True;\n             end if;\n \n-         --  Ada 2005, AI-420:  Predefined equality on Universal_Access\n-         --  is available.\n+         --  Ada 2005, AI-420: Predefined equality on Universal_Access is\n+         --  available.\n \n          elsif Ada_Version >= Ada_05\n            and then (Op_Name = Name_Op_Eq or else Op_Name = Name_Op_Ne)\n@@ -1356,7 +1354,7 @@ package body Sem_Res is\n                if Pack /= Standard_Standard then\n \n                   if Opnd_Type = Universal_Integer then\n-                     Orig_Type :=  Type_In_P (Is_Integer_Type'Access);\n+                     Orig_Type := Type_In_P (Is_Integer_Type'Access);\n \n                   elsif Opnd_Type = Universal_Real then\n                      Orig_Type := Type_In_P (Is_Real_Type'Access);\n@@ -1365,7 +1363,7 @@ package body Sem_Res is\n                      Orig_Type := Type_In_P (Is_String_Type'Access);\n \n                   elsif Opnd_Type = Any_Access then\n-                     Orig_Type :=  Type_In_P (Is_Definite_Access_Type'Access);\n+                     Orig_Type := Type_In_P (Is_Definite_Access_Type'Access);\n \n                   elsif Opnd_Type = Any_Composite then\n                      Orig_Type := Type_In_P (Is_Composite_Type'Access);"}]}