{"sha": "688fccb5227d78240735433b51fa27642f81415a", "node_id": "C_kwDOANBUbNoAKDY4OGZjY2I1MjI3ZDc4MjQwNzM1NDMzYjUxZmEyNzY0MmY4MTQxNWE", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-01-12T18:00:52Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:20Z"}, "message": "gccrs: Refactor TyVar and TypeBoundPredicates\n\nThis extract these helpers into seperate files\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* Make-lang.in: update makefile\n\t* typecheck/rust-tyty.cc (TyVar::TyVar): move to new file\n\t(TyVar::get_tyty): likewise\n\t(TyVar::get_implicit_infer_var): likewise\n\t(TyVar::subst_covariant_var): likewise\n\t(TyVar::clone): likewise\n\t(TyVar::monomorphized_clone): likewise\n\t(TyWithLocation::TyWithLocation): likewise\n\t* typecheck/rust-tyty.h (class BaseType): cleanup\n\t(class TypeBoundPredicate): move to its own file\n\t(class TypeBoundPredicateItem): likewise\n\t(class TypeBoundsMappings): likewise\n\t(class TyVar): likewise\n\t(class TyWithLocation): likewise\n\t* typecheck/rust-tyty-bounds.h: New file.\n\t* typecheck/rust-tyty-util.cc: New file.\n\t* typecheck/rust-tyty-util.h: New file.", "tree": {"sha": "fb21d70ec069de6aa632af2589adbe8cd3e7974f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb21d70ec069de6aa632af2589adbe8cd3e7974f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/688fccb5227d78240735433b51fa27642f81415a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688fccb5227d78240735433b51fa27642f81415a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/688fccb5227d78240735433b51fa27642f81415a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688fccb5227d78240735433b51fa27642f81415a/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1b1bbbc64524b508c0150c66163b27be508dbcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b1bbbc64524b508c0150c66163b27be508dbcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b1bbbc64524b508c0150c66163b27be508dbcf"}], "stats": {"total": 454, "additions": 276, "deletions": 178}, "files": [{"sha": "2aa61bcfb195591b05bc063d03d91f7c5b54f40d", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=688fccb5227d78240735433b51fa27642f81415a", "patch": "@@ -115,6 +115,7 @@ GRS_OBJS = \\\n     rust/rust-pub-restricted-visitor.o \\\n     rust/rust-privacy-reporter.o \\\n     rust/rust-tyty.o \\\n+    rust/rust-tyty-util.o \\\n     rust/rust-tyty-call.o \\\n     rust/rust-tyctx.o \\\n     rust/rust-tyty-bounds.o \\"}, {"sha": "44839bd0b4097d62a320362d489eb7bf1d95058c", "filename": "gcc/rust/typecheck/rust-tyty-bounds.h", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.h?ref=688fccb5227d78240735433b51fa27642f81415a", "patch": "@@ -0,0 +1,88 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_TYTY_BOUNDS_H\n+#define RUST_TYTY_BOUNDS_H\n+\n+#include \"rust-location.h\"\n+\n+namespace Rust {\n+\n+namespace Resolver {\n+class TraitReference;\n+class TraitItemReference;\n+class AssociatedImplTrait;\n+} // namespace Resolver\n+\n+namespace TyTy {\n+\n+class BaseType;\n+class TypeBoundPredicate;\n+class TypeBoundPredicateItem\n+{\n+public:\n+  TypeBoundPredicateItem (const TypeBoundPredicate *parent,\n+\t\t\t  const Resolver::TraitItemReference *trait_item_ref);\n+\n+  static TypeBoundPredicateItem error ();\n+\n+  bool is_error () const;\n+\n+  BaseType *get_tyty_for_receiver (const TyTy::BaseType *receiver);\n+\n+  const Resolver::TraitItemReference *get_raw_item () const;\n+\n+  bool needs_implementation () const;\n+\n+  const TypeBoundPredicate *get_parent () const;\n+\n+  Location get_locus () const;\n+\n+private:\n+  const TypeBoundPredicate *parent;\n+  const Resolver::TraitItemReference *trait_item_ref;\n+};\n+\n+class TypeBoundsMappings\n+{\n+protected:\n+  TypeBoundsMappings (std::vector<TypeBoundPredicate> specified_bounds);\n+\n+public:\n+  std::vector<TypeBoundPredicate> &get_specified_bounds ();\n+\n+  const std::vector<TypeBoundPredicate> &get_specified_bounds () const;\n+\n+  size_t num_specified_bounds () const;\n+\n+  std::string raw_bounds_as_string () const;\n+\n+  std::string bounds_as_string () const;\n+\n+  std::string raw_bounds_as_name () const;\n+\n+protected:\n+  void add_bound (TypeBoundPredicate predicate);\n+\n+  std::vector<TypeBoundPredicate> specified_bounds;\n+};\n+\n+} // namespace TyTy\n+} // namespace Rust\n+\n+#endif // RUST_TYTY_BOUNDS_H"}, {"sha": "5037f68cb3f184f4dd04dc00b641dddbaf90c34f", "filename": "gcc/rust/typecheck/rust-tyty-util.cc", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2Ftypecheck%2Frust-tyty-util.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2Ftypecheck%2Frust-tyty-util.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-util.cc?ref=688fccb5227d78240735433b51fa27642f81415a", "patch": "@@ -0,0 +1,116 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-hir-type-check.h\"\n+#include \"rust-tyty.h\"\n+\n+namespace Rust {\n+namespace TyTy {\n+\n+TyVar::TyVar (HirId ref) : ref (ref)\n+{\n+  // ensure this reference is defined within the context\n+  auto context = Resolver::TypeCheckContext::get ();\n+  BaseType *lookup = nullptr;\n+  bool ok = context->lookup_type (ref, &lookup);\n+  rust_assert (ok);\n+}\n+\n+BaseType *\n+TyVar::get_tyty () const\n+{\n+  auto context = Resolver::TypeCheckContext::get ();\n+  BaseType *lookup = nullptr;\n+  bool ok = context->lookup_type (ref, &lookup);\n+  rust_assert (ok);\n+  return lookup;\n+}\n+\n+TyVar\n+TyVar::get_implicit_infer_var (Location locus)\n+{\n+  auto mappings = Analysis::Mappings::get ();\n+  auto context = Resolver::TypeCheckContext::get ();\n+\n+  InferType *infer = new InferType (mappings->get_next_hir_id (),\n+\t\t\t\t    InferType::InferTypeKind::GENERAL, locus);\n+  context->insert_type (Analysis::NodeMapping (mappings->get_current_crate (),\n+\t\t\t\t\t       UNKNOWN_NODEID,\n+\t\t\t\t\t       infer->get_ref (),\n+\t\t\t\t\t       UNKNOWN_LOCAL_DEFID),\n+\t\t\tinfer);\n+  mappings->insert_location (infer->get_ref (), locus);\n+\n+  return TyVar (infer->get_ref ());\n+}\n+\n+TyVar\n+TyVar::subst_covariant_var (TyTy::BaseType *orig, TyTy::BaseType *subst)\n+{\n+  if (orig->get_kind () != TyTy::TypeKind::PARAM)\n+    return TyVar (subst->get_ty_ref ());\n+  else if (subst->get_kind () == TyTy::TypeKind::PARAM)\n+    {\n+      TyTy::ParamType *p = static_cast<TyTy::ParamType *> (subst);\n+      if (p->resolve ()->get_kind () == TyTy::TypeKind::PARAM)\n+\t{\n+\t  return TyVar (subst->get_ty_ref ());\n+\t}\n+    }\n+\n+  return TyVar (subst->get_ref ());\n+}\n+\n+TyVar\n+TyVar::clone () const\n+{\n+  TyTy::BaseType *c = get_tyty ()->clone ();\n+  return TyVar (c->get_ref ());\n+}\n+\n+TyVar\n+TyVar::monomorphized_clone () const\n+{\n+  auto mappings = Analysis::Mappings::get ();\n+  auto context = Resolver::TypeCheckContext::get ();\n+\n+  // this needs a new hirid\n+  TyTy::BaseType *c = get_tyty ()->monomorphized_clone ();\n+  c->set_ref (mappings->get_next_hir_id ());\n+\n+  // insert it\n+  context->insert_type (Analysis::NodeMapping (mappings->get_current_crate (),\n+\t\t\t\t\t       UNKNOWN_NODEID, c->get_ref (),\n+\t\t\t\t\t       UNKNOWN_LOCAL_DEFID),\n+\t\t\tc);\n+\n+  return TyVar (c->get_ref ());\n+}\n+\n+TyWithLocation::TyWithLocation (BaseType *ty, Location locus)\n+  : ty (ty), locus (locus)\n+{}\n+\n+TyWithLocation::TyWithLocation (BaseType *ty) : ty (ty)\n+{\n+  auto mappings = Analysis::Mappings::get ();\n+  locus = mappings->lookup_location (ty->get_ref ());\n+}\n+\n+} // namespace TyTy\n+} // namespace Rust"}, {"sha": "eccbb4423d54252e0ce219603e2ac4bf26addfba", "filename": "gcc/rust/typecheck/rust-tyty-util.h", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2Ftypecheck%2Frust-tyty-util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2Ftypecheck%2Frust-tyty-util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-util.h?ref=688fccb5227d78240735433b51fa27642f81415a", "patch": "@@ -0,0 +1,69 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_TYTY_UTIL_H\n+#define RUST_TYTY_UTIL_H\n+\n+#include \"rust-hir-map.h\"\n+\n+namespace Rust {\n+namespace TyTy {\n+\n+class BaseType;\n+\n+// this is a placeholder for types that can change like inference variables\n+class TyVar\n+{\n+public:\n+  explicit TyVar (HirId ref);\n+\n+  HirId get_ref () const { return ref; }\n+\n+  BaseType *get_tyty () const;\n+\n+  TyVar clone () const;\n+\n+  TyVar monomorphized_clone () const;\n+\n+  static TyVar get_implicit_infer_var (Location locus);\n+\n+  static TyVar subst_covariant_var (TyTy::BaseType *orig,\n+\t\t\t\t    TyTy::BaseType *subst);\n+\n+private:\n+  HirId ref;\n+};\n+\n+class TyWithLocation\n+{\n+public:\n+  explicit TyWithLocation (BaseType *ty, Location locus);\n+  explicit TyWithLocation (BaseType *ty);\n+\n+  BaseType *get_ty () const { return ty; }\n+  Location get_locus () const { return locus; }\n+\n+private:\n+  BaseType *ty;\n+  Location locus;\n+};\n+\n+} // namespace TyTy\n+} // namespace Rust\n+\n+#endif // RUST_TYTY_UTIL_H"}, {"sha": "55a8123ce8778a796d444ea54c32ba3c4fc1a805", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=688fccb5227d78240735433b51fa27642f81415a", "patch": "@@ -330,96 +330,6 @@ BaseType::debug () const\n \t      debug_str ().c_str ());\n }\n \n-TyVar::TyVar (HirId ref) : ref (ref)\n-{\n-  // ensure this reference is defined within the context\n-  auto context = Resolver::TypeCheckContext::get ();\n-  BaseType *lookup = nullptr;\n-  bool ok = context->lookup_type (ref, &lookup);\n-  rust_assert (ok);\n-}\n-\n-BaseType *\n-TyVar::get_tyty () const\n-{\n-  auto context = Resolver::TypeCheckContext::get ();\n-  BaseType *lookup = nullptr;\n-  bool ok = context->lookup_type (ref, &lookup);\n-  rust_assert (ok);\n-  return lookup;\n-}\n-\n-TyVar\n-TyVar::get_implicit_infer_var (Location locus)\n-{\n-  auto mappings = Analysis::Mappings::get ();\n-  auto context = Resolver::TypeCheckContext::get ();\n-\n-  InferType *infer = new InferType (mappings->get_next_hir_id (),\n-\t\t\t\t    InferType::InferTypeKind::GENERAL, locus);\n-  context->insert_type (Analysis::NodeMapping (mappings->get_current_crate (),\n-\t\t\t\t\t       UNKNOWN_NODEID,\n-\t\t\t\t\t       infer->get_ref (),\n-\t\t\t\t\t       UNKNOWN_LOCAL_DEFID),\n-\t\t\tinfer);\n-  mappings->insert_location (infer->get_ref (), locus);\n-\n-  return TyVar (infer->get_ref ());\n-}\n-\n-TyVar\n-TyVar::subst_covariant_var (TyTy::BaseType *orig, TyTy::BaseType *subst)\n-{\n-  if (orig->get_kind () != TyTy::TypeKind::PARAM)\n-    return TyVar (subst->get_ty_ref ());\n-  else if (subst->get_kind () == TyTy::TypeKind::PARAM)\n-    {\n-      TyTy::ParamType *p = static_cast<TyTy::ParamType *> (subst);\n-      if (p->resolve ()->get_kind () == TyTy::TypeKind::PARAM)\n-\t{\n-\t  return TyVar (subst->get_ty_ref ());\n-\t}\n-    }\n-\n-  return TyVar (subst->get_ref ());\n-}\n-\n-TyVar\n-TyVar::clone () const\n-{\n-  TyTy::BaseType *c = get_tyty ()->clone ();\n-  return TyVar (c->get_ref ());\n-}\n-\n-TyVar\n-TyVar::monomorphized_clone () const\n-{\n-  auto mappings = Analysis::Mappings::get ();\n-  auto context = Resolver::TypeCheckContext::get ();\n-\n-  // this needs a new hirid\n-  TyTy::BaseType *c = get_tyty ()->monomorphized_clone ();\n-  c->set_ref (mappings->get_next_hir_id ());\n-\n-  // insert it\n-  context->insert_type (Analysis::NodeMapping (mappings->get_current_crate (),\n-\t\t\t\t\t       UNKNOWN_NODEID, c->get_ref (),\n-\t\t\t\t\t       UNKNOWN_LOCAL_DEFID),\n-\t\t\tc);\n-\n-  return TyVar (c->get_ref ());\n-}\n-\n-TyWithLocation::TyWithLocation (BaseType *ty, Location locus)\n-  : ty (ty), locus (locus)\n-{}\n-\n-TyWithLocation::TyWithLocation (BaseType *ty) : ty (ty)\n-{\n-  auto mappings = Analysis::Mappings::get ();\n-  locus = mappings->lookup_location (ty->get_ref ());\n-}\n-\n void\n InferType::accept_vis (TyVisitor &vis)\n {"}, {"sha": "a8bdf6f3a15d0193cfc05a5cbbe789483b47d0a9", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 2, "deletions": 88, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688fccb5227d78240735433b51fa27642f81415a/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=688fccb5227d78240735433b51fa27642f81415a", "patch": "@@ -25,6 +25,8 @@\n #include \"rust-abi.h\"\n #include \"rust-common.h\"\n #include \"rust-identifier.h\"\n+#include \"rust-tyty-bounds.h\"\n+#include \"rust-tyty-util.h\"\n \n namespace Rust {\n \n@@ -76,57 +78,6 @@ class TypeKindFormat\n   static std::string to_string (TypeKind kind);\n };\n \n-class BaseType;\n-class TypeBoundPredicate;\n-class TypeBoundPredicateItem\n-{\n-public:\n-  TypeBoundPredicateItem (const TypeBoundPredicate *parent,\n-\t\t\t  const Resolver::TraitItemReference *trait_item_ref);\n-\n-  static TypeBoundPredicateItem error ();\n-\n-  bool is_error () const;\n-\n-  BaseType *get_tyty_for_receiver (const TyTy::BaseType *receiver);\n-\n-  const Resolver::TraitItemReference *get_raw_item () const;\n-\n-  bool needs_implementation () const;\n-\n-  const TypeBoundPredicate *get_parent () const;\n-\n-  Location get_locus () const;\n-\n-private:\n-  const TypeBoundPredicate *parent;\n-  const Resolver::TraitItemReference *trait_item_ref;\n-};\n-\n-class TypeBoundsMappings\n-{\n-protected:\n-  TypeBoundsMappings (std::vector<TypeBoundPredicate> specified_bounds);\n-\n-public:\n-  std::vector<TypeBoundPredicate> &get_specified_bounds ();\n-\n-  const std::vector<TypeBoundPredicate> &get_specified_bounds () const;\n-\n-  size_t num_specified_bounds () const;\n-\n-  std::string raw_bounds_as_string () const;\n-\n-  std::string bounds_as_string () const;\n-\n-  std::string raw_bounds_as_name () const;\n-\n-protected:\n-  void add_bound (TypeBoundPredicate predicate);\n-\n-  std::vector<TypeBoundPredicate> specified_bounds;\n-};\n-\n extern void\n set_cmp_autoderef_mode ();\n extern void\n@@ -268,43 +219,6 @@ class BaseType : public TypeBoundsMappings\n   Analysis::Mappings *mappings;\n };\n \n-// this is a placeholder for types that can change like inference variables\n-class TyVar\n-{\n-public:\n-  explicit TyVar (HirId ref);\n-\n-  HirId get_ref () const { return ref; }\n-\n-  BaseType *get_tyty () const;\n-\n-  TyVar clone () const;\n-\n-  TyVar monomorphized_clone () const;\n-\n-  static TyVar get_implicit_infer_var (Location locus);\n-\n-  static TyVar subst_covariant_var (TyTy::BaseType *orig,\n-\t\t\t\t    TyTy::BaseType *subst);\n-\n-private:\n-  HirId ref;\n-};\n-\n-class TyWithLocation\n-{\n-public:\n-  explicit TyWithLocation (BaseType *ty, Location locus);\n-  explicit TyWithLocation (BaseType *ty);\n-\n-  BaseType *get_ty () const { return ty; }\n-  Location get_locus () const { return locus; }\n-\n-private:\n-  BaseType *ty;\n-  Location locus;\n-};\n-\n class InferType : public BaseType\n {\n public:"}]}