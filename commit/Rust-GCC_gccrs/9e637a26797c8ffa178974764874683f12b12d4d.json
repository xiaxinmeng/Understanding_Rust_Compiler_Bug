{"sha": "9e637a26797c8ffa178974764874683f12b12d4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU2MzdhMjY3OTdjOGZmYTE3ODk3NDc2NDg3NDY4M2YxMmIxMmQ0ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2004-11-09T10:13:30Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-09T10:13:30Z"}, "message": "builtins.c, [...]: Avoid \"`\" as left quote, using \"'\" or %q, %< and %> as appropriate.\n\n\t* builtins.c, c-common.c, c-decl.c, c-format.c, c-format.h,\n\tc-parse.in, c-pch.c, c-pragma.c, collect2.c, final.c, gcc.c,\n\tgcov.c, opts.c, pretty-print.h, protoize.c, reg-stack.c, rtl.c,\n\ttlink.c, config/alpha/alpha.c, config/arc/arc.c, config/arm/arm.c,\n\tconfig/avr/avr.c, config/c4x/c4x.c, config/darwin.c,\n\tconfig/frv/frv.c, config/h8300/h8300.c, config/i386/i386.c,\n\tconfig/i386/winnt.c, config/ia64/ia64.c, config/ip2k/ip2k.c,\n\tconfig/iq2000/iq2000.c, config/m32r/m32r.c,\n\tconfig/m68hc11/m68hc11.c, config/m68k/m68k.c, config/m68k/m68k.h,\n\tconfig/mcore/mcore.c, config/mips/mips.c, config/mmix/mmix.c,\n\tconfig/ns32k/ns32k.c, config/rs6000/host-darwin.c,\n\tconfig/rs6000/rs6000.c, config/s390/s390.c, config/sh/sh.c,\n\tconfig/sh/symbian.c, config/stormy16/stormy16.c,\n\tconfig/v850/v850.c: Avoid \"`\" as left quote, using \"'\" or %q, %<\n\tand %> as appropriate.  Use %' as apostrophe in diagnostics where\n\tapplicable.  Use %< and %> in place of '' quotes where applicable.\n\tUse %qs in place of %<%s%>.  Consistently quote __builtin function\n\tnames.\n\nada:\n\t* misc.c (gnat_handle_option): Use %< and %> for quoting in\n\twarning message.\n\ncp:\n\t* call.c, class.c, decl.c, decl2.c, error.c, mangle.c, parser.c,\n\tpt.c, search.c, semantics.c, typeck.c: Use %q, %< and %> for\n\tquoting in diagnostics.\n\t* parser.c (cp_parser_sizeof_operand): Use '' instead of `' for\n\tquoting in printf format.\n\t* decl.c (duplicate_decls, start_decl): Use %qD instead of\n\tunquoted %D.\n\nobjc:\n\t* objc-act.c: Use %q, %< and %> for quoting in diagnostics.\n\ntestsuite:\n\t* gcc.dg/builtin-prefetch-1.c: Adjust expected messages.\n\nFrom-SVN: r90337", "tree": {"sha": "7a8b42664cab7c57c0140be05c05db9dedb5add4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a8b42664cab7c57c0140be05c05db9dedb5add4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e637a26797c8ffa178974764874683f12b12d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e637a26797c8ffa178974764874683f12b12d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e637a26797c8ffa178974764874683f12b12d4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e637a26797c8ffa178974764874683f12b12d4d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55a9c4b2fce38ae2459976fa912cd77071f77f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a9c4b2fce38ae2459976fa912cd77071f77f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a9c4b2fce38ae2459976fa912cd77071f77f4b"}], "stats": {"total": 676, "additions": 360, "deletions": 316}, "files": [{"sha": "2fbd2a29525dca230291fdbd2153ae702c51f7c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1,3 +1,24 @@\n+2004-11-09  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* builtins.c, c-common.c, c-decl.c, c-format.c, c-format.h,\n+\tc-parse.in, c-pch.c, c-pragma.c, collect2.c, final.c, gcc.c,\n+\tgcov.c, opts.c, pretty-print.h, protoize.c, reg-stack.c, rtl.c,\n+\ttlink.c, config/alpha/alpha.c, config/arc/arc.c, config/arm/arm.c,\n+\tconfig/avr/avr.c, config/c4x/c4x.c, config/darwin.c,\n+\tconfig/frv/frv.c, config/h8300/h8300.c, config/i386/i386.c,\n+\tconfig/i386/winnt.c, config/ia64/ia64.c, config/ip2k/ip2k.c,\n+\tconfig/iq2000/iq2000.c, config/m32r/m32r.c,\n+\tconfig/m68hc11/m68hc11.c, config/m68k/m68k.c, config/m68k/m68k.h,\n+\tconfig/mcore/mcore.c, config/mips/mips.c, config/mmix/mmix.c,\n+\tconfig/ns32k/ns32k.c, config/rs6000/host-darwin.c,\n+\tconfig/rs6000/rs6000.c, config/s390/s390.c, config/sh/sh.c,\n+\tconfig/sh/symbian.c, config/stormy16/stormy16.c,\n+\tconfig/v850/v850.c: Avoid \"`\" as left quote, using \"'\" or %q, %<\n+\tand %> as appropriate.  Use %' as apostrophe in diagnostics where\n+\tapplicable.  Use %< and %> in place of '' quotes where applicable.\n+\tUse %qs in place of %<%s%>.  Consistently quote __builtin function\n+\tnames.\n+\n 2004-11-09  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* gdbinit.in (pbb, pbm): New macros."}, {"sha": "a4f166de22bc53cf701f237505b23f28bbc33cac", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1,3 +1,8 @@\n+2004-11-09  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* misc.c (gnat_handle_option): Use %< and %> for quoting in\n+\twarning message.\n+\n 2004-11-08  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* a-numaux-x86.adb (Tan): Fix fdivp syntax."}, {"sha": "7f77df3e3a8f75e995a1fa19b35bf8006b94e192", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -296,7 +296,7 @@ gnat_handle_option (size_t scode, const char *arg, int value ATTRIBUTE_UNUSED)\n       break;\n \n     case OPT_gant:\n-      warning (\"`-gnat' misspelled as `-gant'\");\n+      warning (\"%<-gnat%> misspelled as %<-gant%>\");\n \n       /* ... fall through ... */\n "}, {"sha": "0d60c4dfa1ba7c9244ad560f841bae88f5b4957d", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -929,7 +929,7 @@ expand_builtin_prefetch (tree arglist)\n   /* Argument 1 must be either zero or one.  */\n   if (INTVAL (op1) != 0 && INTVAL (op1) != 1)\n     {\n-      warning (\"invalid second arg to __builtin_prefetch; using zero\");\n+      warning (\"invalid second arg to %<__builtin_prefetch%>; using zero\");\n       op1 = const0_rtx;\n     }\n \n@@ -943,7 +943,7 @@ expand_builtin_prefetch (tree arglist)\n   /* Argument 2 must be 0, 1, 2, or 3.  */\n   if (INTVAL (op2) < 0 || INTVAL (op2) > 3)\n     {\n-      warning (\"invalid third arg to __builtin_prefetch; using zero\");\n+      warning (\"invalid third arg to %<__builtin_prefetch%>; using zero\");\n       op2 = const0_rtx;\n     }\n \n@@ -5486,7 +5486,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \n \t  if (value != const1_rtx)\n \t    {\n-\t      error (\"__builtin_longjmp second argument must be 1\");\n+\t      error (\"%<__builtin_longjmp%> second argument must be 1\");\n \t      return const0_rtx;\n \t    }\n "}, {"sha": "4a3944c071294f6a532279085cdc6bea86a6841f", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -4311,7 +4311,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \n       if (mode == VOIDmode)\n \t{\n-\t  error (\"unknown machine mode %<%s%>\", p);\n+\t  error (\"unknown machine mode %qs\", p);\n \t  return NULL_TREE;\n \t}\n \n@@ -4342,7 +4342,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \t}\n       if (!valid_mode)\n \t{\n-\t  error (\"unable to emulate %<%s%>\", p);\n+\t  error (\"unable to emulate %qs\", p);\n \t  return NULL_TREE;\n \t}\n \n@@ -4352,7 +4352,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \n \t  if (!targetm.valid_pointer_mode (mode))\n \t    {\n-\t      error (\"invalid pointer mode %<%s%>\", p);\n+\t      error (\"invalid pointer mode %qs\", p);\n \t      return NULL_TREE;\n \t    }\n "}, {"sha": "d30b24a06bdbdd237e7d864eb7e8df64245e99cd", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1005,14 +1005,14 @@ diagnose_arglist_conflict (tree newdecl, tree olddecl,\n       if (TREE_CHAIN (t) == 0\n \t  && TYPE_MAIN_VARIANT (type) != void_type_node)\n \t{\n-\t  inform (\"a parameter list with an ellipsis can't match \"\n+\t  inform (\"a parameter list with an ellipsis can%'t match \"\n \t\t  \"an empty parameter name list declaration\");\n \t  break;\n \t}\n \n       if (c_type_promotes_to (type) != type)\n \t{\n-\t  inform (\"an argument type that has a default promotion can't match \"\n+\t  inform (\"an argument type that has a default promotion can%'t match \"\n \t\t  \"an empty parameter name list declaration\");\n \t  break;\n \t}\n@@ -5063,7 +5063,7 @@ grokfield (struct c_declarator *declarator, struct c_declspecs *declspecs,\n \t  return NULL_TREE;\n \t}\n       if (pedantic)\n-\tpedwarn (\"ISO C doesn't support unnamed structs/unions\");\n+\tpedwarn (\"ISO C doesn%'t support unnamed structs/unions\");\n     }\n \n   value = grokdeclarator (declarator, declspecs, FIELD, false,"}, {"sha": "8faeb173c2a9b9b294b5a173dc163f210e043479", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -212,7 +212,7 @@ decode_format_attr (tree args, function_format_info *info, int validated_p)\n \n   if (!get_constant (first_arg_num_expr, &info->first_arg_num, validated_p))\n     {\n-      error (\"'...' has invalid operand number\");\n+      error (\"%<...%> has invalid operand number\");\n       return false;\n     }\n \n@@ -2496,7 +2496,7 @@ handle_format_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n \t  if (arg_num != info.first_arg_num)\n \t    {\n \t      if (!(flags & (int) ATTR_FLAG_BUILT_IN))\n-\t\terror (\"args to be formatted is not '...'\");\n+\t\terror (\"args to be formatted is not %<...%>\");\n \t      *no_add_attrs = true;\n \t      return NULL_TREE;\n \t    }"}, {"sha": "9ce610391feea3d289883f999015821f1554aa68", "filename": "gcc/c-format.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.h?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -161,7 +161,7 @@ typedef struct\n      nonzero character that may be found in flags2 if it describes the\n      flag when used with certain formats only.  If the latter, only\n      the first such entry found that applies to the current conversion\n-     specifier is used; the values of `name' and `long_name' it supplies\n+     specifier is used; the values of 'name' and 'long_name' it supplies\n      will be used, if non-NULL and the standard version is higher than\n      the unpredicated one, for any pedantic warning.  For example, 'o'\n      for strftime formats (meaning 'O' is an extension over C99).  */\n@@ -170,10 +170,10 @@ typedef struct\n      be skipped ('=' in strfmon), zero otherwise.  */\n   int skip_next_char;\n   /* The name to use for this flag in diagnostic messages.  For example,\n-     N_(\"`0' flag\"), N_(\"field width\").  */\n+     N_(\"'0' flag\"), N_(\"field width\").  */\n   const char *name;\n   /* Long name for this flag in diagnostic messages; currently only used for\n-     \"ISO C does not support ...\".  For example, N_(\"the `I' printf flag\").  */\n+     \"ISO C does not support ...\".  For example, N_(\"the 'I' printf flag\").  */\n   const char *long_name;\n   /* The standard version in which it appeared.  */\n   enum format_std_version std;"}, {"sha": "86880ac61537121eebc6a685360f0a38edb290c0", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -733,7 +733,7 @@ primary:\n                   c = fold ($3.value);\n                   STRIP_NOPS (c);\n                   if (TREE_CODE (c) != INTEGER_CST)\n-                    error (\"first argument to __builtin_choose_expr not\"\n+                    error (\"first argument to %<__builtin_choose_expr%> not\"\n \t\t\t   \" a constant\");\n                   $$ = integer_zerop (c) ? $7 : $5;\n \t\t}"}, {"sha": "5c71ad107b319918a3654aafe29984826e6db999", "filename": "gcc/c-pch.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -127,7 +127,7 @@ pch_init (void)\n   \n   f = fopen (pch_file, \"w+b\");\n   if (f == NULL)\n-    fatal_error (\"can't create precompiled header %s: %m\", pch_file);\n+    fatal_error (\"can%'t create precompiled header %s: %m\", pch_file);\n   pch_outfile = f;\n \n   gcc_assert (strlen (host_machine) < 256\n@@ -155,7 +155,7 @@ pch_init (void)\n       || fwrite (target_machine, v.target_machine_length, 1, f) != 1\n       || fwrite (version_string, v.version_length, 1, f) != 1\n       || fwrite (target_validity, v.target_data_length, 1, f) != 1)\n-    fatal_error (\"can't write to %s: %m\", pch_file);\n+    fatal_error (\"can%'t write to %s: %m\", pch_file);\n \n   /* We need to be able to re-read the output.  */\n   /* The driver always provides a valid -o option.  */\n@@ -190,36 +190,36 @@ c_common_write_pch (void)\n   h.asm_size = asm_file_end - asm_file_startpos;\n   \n   if (fwrite (&h, sizeof (h), 1, pch_outfile) != 1)\n-    fatal_error (\"can't write %s: %m\", pch_file);\n+    fatal_error (\"can%'t write %s: %m\", pch_file);\n   \n   buf = xmalloc (16384);\n \n   if (fseek (asm_out_file, asm_file_startpos, SEEK_SET) != 0)\n-    fatal_error (\"can't seek in %s: %m\", asm_file_name);\n+    fatal_error (\"can%'t seek in %s: %m\", asm_file_name);\n \n   for (written = asm_file_startpos; written < asm_file_end; )\n     {\n       long size = asm_file_end - written;\n       if (size > 16384)\n \tsize = 16384;\n       if (fread (buf, size, 1, asm_out_file) != 1)\n-\tfatal_error (\"can't read %s: %m\", asm_file_name);\n+\tfatal_error (\"can%'t read %s: %m\", asm_file_name);\n       if (fwrite (buf, size, 1, pch_outfile) != 1)\n-\tfatal_error (\"can't write %s: %m\", pch_file);\n+\tfatal_error (\"can%'t write %s: %m\", pch_file);\n       written += size;\n     }\n   free (buf);\n   /* asm_out_file can be written afterwards, so fseek to clear\n      _IOREAD flag.  */\n   if (fseek (asm_out_file, 0, SEEK_END) != 0)\n-    fatal_error (\"can't seek in %s: %m\", asm_file_name);\n+    fatal_error (\"can%'t seek in %s: %m\", asm_file_name);\n \n   gt_pch_save (pch_outfile);\n   cpp_write_pch_state (parse_in, pch_outfile);\n \n   if (fseek (pch_outfile, 0, SEEK_SET) != 0\n       || fwrite (get_ident (), IDENT_LENGTH, 1, pch_outfile) != 1)\n-    fatal_error (\"can't write %s: %m\", pch_file);\n+    fatal_error (\"can%'t write %s: %m\", pch_file);\n \n   fclose (pch_outfile);\n }\n@@ -245,7 +245,7 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n \n   sizeread = read (fd, ident, IDENT_LENGTH);\n   if (sizeread == -1)\n-    fatal_error (\"can't read %s: %m\", name);\n+    fatal_error (\"can%'t read %s: %m\", name);\n   else if (sizeread != IDENT_LENGTH)\n     return 2;\n   \n@@ -273,12 +273,12 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n   /* At this point, we know it's a PCH file, so it ought to be long enough\n      that we can read a c_pch_validity structure.  */\n   if (read (fd, &v, sizeof (v)) != sizeof (v))\n-    fatal_error (\"can't read %s: %m\", name);\n+    fatal_error (\"can%'t read %s: %m\", name);\n \n   strings_length = (v.host_machine_length + v.target_machine_length \n \t\t    + v.version_length);\n   if (read (fd, short_strings, strings_length) != strings_length)\n-    fatal_error (\"can't read %s: %m\", name);\n+    fatal_error (\"can%'t read %s: %m\", name);\n   if (v.host_machine_length != strlen (host_machine)\n       || memcmp (host_machine, short_strings, strlen (host_machine)) != 0)\n     {\n@@ -362,7 +362,7 @@ c_common_valid_pch (cpp_reader *pfile, const char *name, int fd)\n     \n     if ((size_t) read (fd, this_file_data, v.target_data_length)\n \t!= v.target_data_length)\n-      fatal_error (\"can't read %s: %m\", name);\n+      fatal_error (\"can%'t read %s: %m\", name);\n     msg = targetm.pch_valid_p (this_file_data, v.target_data_length);\n     free (this_file_data);\n     if (msg != NULL)\n@@ -495,7 +495,7 @@ c_common_pch_pragma (cpp_reader *pfile)\n   \n   fd = open (name, O_RDONLY | O_BINARY, 0666);\n   if (fd == -1)\n-    fatal_error (\"%s: couldn't open PCH file: %m\\n\", name);\n+    fatal_error (\"%s: couldn%'t open PCH file: %m\\n\", name);\n   \n   if (c_common_valid_pch (pfile, name, fd) != 1)\n     {"}, {"sha": "24c166658b4e58797e5427725a7ccb966492597a", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -618,7 +618,7 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n               visibility_options.inpragma = 1;\n             }\n           if (c_lex (&x) != CPP_CLOSE_PAREN)\n-            GCC_BAD (\"missing '(' after %<#pragma GCC visibility push%> - ignored\");\n+            GCC_BAD (\"missing %<(%> after %<#pragma GCC visibility push%> - ignored\");\n         }\n     }\n   if (c_lex (&x) != CPP_EOF)"}, {"sha": "cc55cf4de00099d65e8bc973fcb998d4c7f8b006", "filename": "gcc/collect2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1562,7 +1562,7 @@ collect_execute (const char *prog, char **argv, const char *redir)\n      since we might not end up needing something that we could not find.  */\n \n   if (argv[0] == 0)\n-    fatal (\"cannot find `%s'\", prog);\n+    fatal (\"cannot find '%s'\", prog);\n \n   if (redir)\n     {\n@@ -2039,7 +2039,7 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n \n   /* If we do not have an `nm', complain.  */\n   if (nm_file_name == 0)\n-    fatal (\"cannot find `nm'\");\n+    fatal (\"cannot find 'nm'\");\n \n   nm_argv[argc++] = nm_file_name;\n   if (NM_FLAGS[0] != '\\0')\n@@ -2206,7 +2206,7 @@ scan_libraries (const char *prog_name)\n   /* If we do not have an `ldd', complain.  */\n   if (ldd_file_name == 0)\n     {\n-      error (\"cannot find `ldd'\");\n+      error (\"cannot find 'ldd'\");\n       return;\n     }\n "}, {"sha": "125f01a6e41d3cd5a58cd584df2b957f3ccce8f1", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -303,7 +303,7 @@ override_options (void)\n       else if (! strcmp (alpha_tp_string, \"i\"))\n \talpha_tp = ALPHA_TP_INSN;\n       else\n-\terror (\"bad value `%s' for -mtrap-precision switch\", alpha_tp_string);\n+\terror (\"bad value %qs for -mtrap-precision switch\", alpha_tp_string);\n     }\n \n   if (alpha_fprm_string)\n@@ -317,7 +317,7 @@ override_options (void)\n       else if (! strcmp (alpha_fprm_string,\"d\"))\n \talpha_fprm = ALPHA_FPRM_DYN;\n       else\n-\terror (\"bad value `%s' for -mfp-rounding-mode switch\",\n+\terror (\"bad value %qs for -mfp-rounding-mode switch\",\n \t       alpha_fprm_string);\n     }\n \n@@ -332,7 +332,7 @@ override_options (void)\n       else if (strcmp (alpha_fptm_string, \"sui\") == 0)\n \talpha_fptm = ALPHA_FPTM_SUI;\n       else\n-\terror (\"bad value `%s' for -mfp-trap-mode switch\", alpha_fptm_string);\n+\terror (\"bad value %qs for -mfp-trap-mode switch\", alpha_fptm_string);\n     }\n \n   if (alpha_tls_size_string)\n@@ -344,7 +344,7 @@ override_options (void)\n       else if (strcmp (alpha_tls_size_string, \"64\") == 0)\n \talpha_tls_size = 64;\n       else\n-\terror (\"bad value `%s' for -mtls-size switch\", alpha_tls_size_string);\n+\terror (\"bad value %qs for -mtls-size switch\", alpha_tls_size_string);\n     }\n \n   alpha_cpu\n@@ -363,7 +363,7 @@ override_options (void)\n \t    break;\n \t  }\n       if (! cpu_table [i].name)\n-\terror (\"bad value `%s' for -mcpu switch\", alpha_cpu_string);\n+\terror (\"bad value %qs for -mcpu switch\", alpha_cpu_string);\n     }\n \n   if (alpha_tune_string)\n@@ -375,7 +375,7 @@ override_options (void)\n \t    break;\n \t  }\n       if (! cpu_table [i].name)\n-\terror (\"bad value `%s' for -mcpu switch\", alpha_tune_string);\n+\terror (\"bad value %qs for -mcpu switch\", alpha_tune_string);\n     }\n \n   /* Do some sanity checks on the above options.  */\n@@ -457,7 +457,7 @@ override_options (void)\n       }\n     else\n       {\n-\twarning (\"bad value `%s' for -mmemory-latency\", alpha_mlat_string);\n+\twarning (\"bad value %qs for -mmemory-latency\", alpha_mlat_string);\n \tlat = 3;\n       }\n "}, {"sha": "6a334c012dab162cd32e3915c03863b441c9294f", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -391,14 +391,14 @@ arc_handle_interrupt_attribute (tree *node ATTRIBUTE_UNUSED,\n \n   if (TREE_CODE (value) != STRING_CST)\n     {\n-      warning (\"argument of `%s' attribute is not a string constant\",\n+      warning (\"argument of %qs attribute is not a string constant\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (strcmp (TREE_STRING_POINTER (value), \"ilink1\")\n \t   && strcmp (TREE_STRING_POINTER (value), \"ilink2\"))\n     {\n-      warning (\"argument of `%s' attribute is not \\\"ilink1\\\" or \\\"ilink2\\\"\",\n+      warning (\"argument of %qs attribute is not \\\"ilink1\\\" or \\\"ilink2\\\"\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "914babe02e058fe5b1cb8569870995f62ff9ec30", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -2605,7 +2605,7 @@ arm_handle_fndecl_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -2623,7 +2623,7 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n     {\n       if (TREE_CODE (*node) != FUNCTION_DECL)\n \t{\n-\t  warning (\"`%s' attribute only applies to functions\",\n+\t  warning (\"%qs attribute only applies to functions\",\n \t\t   IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n@@ -2637,7 +2637,7 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n \t{\n \t  if (arm_isr_value (args) == ARM_FT_UNKNOWN)\n \t    {\n-\t      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+\t      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n \t      *no_add_attrs = true;\n \t    }\n \t}\n@@ -2664,7 +2664,7 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n \t    }\n \t  else\n \t    {\n-\t      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+\t      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n \t    }\n \t}\n     }"}, {"sha": "573194dbce53ca766423c4b05215819ca59e950a", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -4511,7 +4511,7 @@ avr_handle_progmem_attribute (tree *node, tree name,\n \t}\n       else\n \t{\n-\t  warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -4530,7 +4530,7 @@ avr_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -4612,7 +4612,7 @@ static void\n avr_file_start (void)\n {\n   if (avr_asm_only_p)\n-    error (\"MCU `%s' supported for assembler only\", avr_mcu_name);\n+    error (\"MCU %qs supported for assembler only\", avr_mcu_name);\n \n   default_file_start ();\n "}, {"sha": "22465fc18735411984484b97a7f8ba302965e000", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -4496,7 +4496,7 @@ c4x_handle_fntype_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "c84a9be190e441765d82e5bf20040f3ebe497aaa", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1214,7 +1214,7 @@ darwin_handle_weak_import_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else"}, {"sha": "19faaa67592fbe33b21887901757f445d7e3dcf1", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -9613,7 +9613,7 @@ frv_int_to_acc (enum insn_code icode, int opnum, rtx opval)\n \n   if (! (*insn_data[icode].operand[opnum].predicate) (reg, VOIDmode))\n     {\n-      error (\"inappropriate accumulator for `%s'\", insn_data[icode].name);\n+      error (\"inappropriate accumulator for %qs\", insn_data[icode].name);\n       return NULL_RTX;\n     }\n   return reg;\n@@ -9702,12 +9702,12 @@ frv_check_constant_argument (enum insn_code icode, int opnum, rtx opval)\n {\n   if (GET_CODE (opval) != CONST_INT)\n     {\n-      error (\"`%s' expects a constant argument\", insn_data[icode].name);\n+      error (\"%qs expects a constant argument\", insn_data[icode].name);\n       return FALSE;\n     }\n   if (! (*insn_data[icode].operand[opnum].predicate) (opval, VOIDmode))\n     {\n-      error (\"constant argument out of range for `%s'\", insn_data[icode].name);\n+      error (\"constant argument out of range for %qs\", insn_data[icode].name);\n       return FALSE;\n     }\n   return TRUE;"}, {"sha": "b7810358456108154d35a65bc612d1bdfc7b9040", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -5752,7 +5752,7 @@ h8300_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -5776,7 +5776,7 @@ h8300_handle_eightbit_data_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -5799,7 +5799,7 @@ h8300_handle_tiny_data_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n "}, {"sha": "5f45e4295e88f9cb44c049b8cc0b98204abbc1f0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1271,10 +1271,10 @@ override_options (void)\n \terror (\"bad value (%s) for -masm= switch\", ix86_asm_string);\n     }\n   if ((TARGET_64BIT == 0) != (ix86_cmodel == CM_32))\n-    error (\"code model `%s' not supported in the %s bit mode\",\n+    error (\"code model %qs not supported in the %s bit mode\",\n \t   ix86_cmodel_string, TARGET_64BIT ? \"64\" : \"32\");\n   if (ix86_cmodel == CM_LARGE)\n-    sorry (\"code model `large' not supported yet\");\n+    sorry (\"code model %<large%> not supported yet\");\n   if ((TARGET_64BIT != 0) != ((target_flags & MASK_64BIT) != 0))\n     sorry (\"%i-bit mode not compiled in\",\n \t   (target_flags & MASK_64BIT) ? 64 : 32);\n@@ -1682,7 +1682,7 @@ ix86_handle_cdecl_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -1710,7 +1710,7 @@ ix86_handle_cdecl_attribute (tree *node, tree name,\n \n   if (TARGET_64BIT)\n     {\n-      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -1728,7 +1728,7 @@ ix86_handle_regparm_attribute (tree *node, tree name, tree args,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -1739,13 +1739,13 @@ ix86_handle_regparm_attribute (tree *node, tree name, tree args,\n       cst = TREE_VALUE (args);\n       if (TREE_CODE (cst) != INTEGER_CST)\n \t{\n-\t  warning (\"`%s' attribute requires an integer constant argument\",\n+\t  warning (\"%qs attribute requires an integer constant argument\",\n \t\t   IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n       else if (compare_tree_int (cst, REGPARM_MAX) > 0)\n \t{\n-\t  warning (\"argument to `%s' attribute larger than %d\",\n+\t  warning (\"argument to %qs attribute larger than %d\",\n \t\t   IDENTIFIER_POINTER (name), REGPARM_MAX);\n \t  *no_add_attrs = true;\n \t}\n@@ -6538,7 +6538,7 @@ print_operand (FILE *file, rtx x, int code)\n \t    return;\n \t  }\n \tdefault:\n-\t    output_operand_lossage (\"invalid operand code `%c'\", code);\n+\t    output_operand_lossage (\"invalid operand code '%c'\", code);\n \t}\n     }\n \n@@ -14507,7 +14507,7 @@ ix86_handle_struct_attribute (tree *node, tree name,\n   if (!(type && (TREE_CODE (*type) == RECORD_TYPE\n \t\t || TREE_CODE (*type) == UNION_TYPE)))\n     {\n-      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -14516,7 +14516,7 @@ ix86_handle_struct_attribute (tree *node, tree name,\n \t   || ((is_attribute_p (\"gcc_struct\", name)\n \t\t&& lookup_attribute (\"ms_struct\", TYPE_ATTRIBUTES (*type)))))\n     {\n-      warning (\"`%s' incompatible attribute ignored\",\n+      warning (\"%qs incompatible attribute ignored\",\n                IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "c8a75440f89f27543517f33b24aa309bc11af145", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -71,7 +71,7 @@ ix86_handle_shared_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != VAR_DECL)\n     {\n-      warning (\"`%s' attribute only applies to variables\",\n+      warning (\"%qs attribute only applies to variables\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -296,7 +296,7 @@ i386_pe_mark_dllimport (tree decl)\n     abort ();\n   if (i386_pe_dllexport_name_p (oldname))\n     {\n-      error (\"`%s' declared as both exported to and imported from a DLL\",\n+      error (\"%qs declared as both exported to and imported from a DLL\",\n              IDENTIFIER_POINTER (DECL_NAME (decl)));\n       return;\n     }"}, {"sha": "a8fdec4385ff0a4a9b7a6b4d2f0135db4f0b2757", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -477,7 +477,7 @@ ia64_handle_model_attribute (tree *node, tree name, tree args, int flags ATTRIBU\n     }\n   else\n     {\n-      warning (\"invalid argument of `%s' attribute\",\n+      warning (\"invalid argument of %qs attribute\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -509,7 +509,7 @@ ia64_handle_model_attribute (tree *node, tree name, tree args, int flags ATTRIBU\n       break;\n \n     default:\n-      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n       break;\n     }"}, {"sha": "a1eddebdc4db20c55855794e0c70848502c1d87a", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -3160,7 +3160,7 @@ ip2k_handle_progmem_attribute (tree *node, tree name,\n \t}\n       else\n \t{\n-\t  warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -3178,7 +3178,7 @@ ip2k_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "4788f9b24f4f070485be82809736dc795d7361dc", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -2842,7 +2842,7 @@ expand_one_builtin (enum insn_code icode, rtx target, tree arglist,\n       op[i] = expand_expr (arg[i], NULL_RTX, VOIDmode, 0);\n       mode[i] = insn_data[icode].operand[i].mode;\n       if (code[i] == CONST_INT && GET_CODE (op[i]) != CONST_INT)\n-\terror (\"argument `%d' is not a constant\", i + 1);\n+\terror (\"argument %qd is not a constant\", i + 1);\n       if (code[i] == REG\n \t  && ! (*insn_data[icode].operand[i].predicate) (op[i], mode[i]))\n \top[i] = copy_to_mode_reg (mode[i], op[i]);"}, {"sha": "384b5ae09fd8ac160d1e11dee40daf773ebb4d29", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -353,7 +353,7 @@ m32r_handle_model_attribute (tree *node ATTRIBUTE_UNUSED, tree name,\n       && arg != large_ident1\n       && arg != large_ident2)\n     {\n-      warning (\"invalid argument of `%s' attribute\",\n+      warning (\"invalid argument of %qs attribute\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "e134f576f62a8ba6c475499a7988a4c88eff5b11", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1311,7 +1311,7 @@ m68hc11_handle_page0_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -1347,7 +1347,7 @@ m68hc11_handle_fntype_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -1432,13 +1432,13 @@ m68hc11_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n   trap_handler = lookup_attribute (\"trap\", func_attr) != NULL_TREE;\n   if (trap_handler && is_far)\n     {\n-      warning (\"`trap' and `far' attributes are not compatible, ignoring `far'\");\n+      warning (\"%<trap%> and %<far%> attributes are not compatible, ignoring %<far%>\");\n       trap_handler = 0;\n     }\n   if (trap_handler)\n     {\n       if (trap_handler_symbol != 0)\n-        warning (\"`trap' attribute is already used\");\n+        warning (\"%<trap%> attribute is already used\");\n       else\n         trap_handler_symbol = XEXP (rtl, 0);\n     }"}, {"sha": "1db78d93d21f7072050c518641809460ae2faf87", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -285,7 +285,7 @@ m68k_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "b3ededee8f87b55464ad2b8a3ca96acf61d3fee3", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -253,9 +253,9 @@ extern int target_flags;\n     { \"nobitfield\", - MASK_BITFIELD,\t\t\t\t\t\\\n       N_(\"Do not use the bit-field instructions\") },\t\t\t\\\n     { \"short\", MASK_SHORT,\t\t\t\t\t\t\\\n-      N_(\"Consider type `int' to be 16 bits wide\") },\t\t\t\\\n+      N_(\"Consider type 'int' to be 16 bits wide\") },\t\t\t\\\n     { \"noshort\", - MASK_SHORT,\t\t\t\t\t\t\\\n-      N_(\"Consider type `int' to be 32 bits wide\") },\t\t\t\\\n+      N_(\"Consider type 'int' to be 32 bits wide\") },\t\t\t\\\n     { \"68881\", MASK_68881, \"\" },\t\t\t\t\t\\\n     { \"soft-float\", - MASK_68881,\t\t\t\t\t\\\n       N_(\"Generate code with library calls for floating point\") },\t\\"}, {"sha": "57e5174dbc7900d5fea60e7dc79926bab8d02cdd", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -2984,7 +2984,7 @@ mcore_override_options (void)\n \t  || (mcore_stack_increment == 0\n \t      && (mcore_stack_increment_string[0] != '0'\n \t\t  || mcore_stack_increment_string[1] != 0)))\n-\terror (\"invalid option `-mstack-increment=%s'\",\n+\terror (\"invalid option %<-mstack-increment=%s%>\",\n \t       mcore_stack_increment_string);\t\n     }\n   \n@@ -3372,7 +3372,7 @@ mcore_handle_naked_attribute (tree * node, tree name, tree args ATTRIBUTE_UNUSED\n     }\n   else\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "665e3841dc35888c09d069c446f428586c333dbf", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -7541,7 +7541,7 @@ build_mips16_call_stub (rtx retval, rtx fn, rtx arg_size, int fp_code)\n      Fortunately, this case is illegal, since it means that a function\n      was declared in two different ways in a single compilation.  */\n   if (fpret && ! l->fpret)\n-    error (\"cannot handle inconsistent calls to `%s'\", fnname);\n+    error (\"cannot handle inconsistent calls to %qs\", fnname);\n \n   /* If we are calling a stub which handles a floating point return\n      value, we need to arrange to save $18 in the prologue.  We do"}, {"sha": "4f79df2814b5acea4a0fd6aa3ebfc4b38b497462", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1585,7 +1585,7 @@ mmix_print_operand (FILE *stream, rtx x, int code)\n \n     default:\n       /* Presumably there's a missing case above if we get here.  */\n-      internal_error (\"MMIX Internal: Missing `%c' case in mmix_print_operand\", code);\n+      internal_error (\"MMIX Internal: Missing %qc case in mmix_print_operand\", code);\n     }\n \n   switch (GET_CODE (modified_x))"}, {"sha": "d70f30898064437c15be6092ce6c3dbf7fc3973a", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1065,7 +1065,7 @@ ns32k_handle_fntype_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "599e30603d61b1f67885d1b5788eb9903ecc76b8", "filename": "gcc/config/rs6000/host-darwin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Frs6000%2Fhost-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Frs6000%2Fhost-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fhost-darwin.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -101,7 +101,7 @@ segv_handler (int sig ATTRIBUTE_UNUSED,\n \t    if (strcmp (shell_commands[i][0], shell_name + 1) == 0)\n \t      {\n \t\tfnotice (stderr, \n-\t\t\t \"Try running `%s' in the shell to raise its limit.\\n\",\n+\t\t\t \"Try running '%s' in the shell to raise its limit.\\n\",\n \t\t\t shell_commands[i][1]);\n \t      }\n \t}"}, {"sha": "54c76dba30430b27653d243b172be04df0ba255a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1268,7 +1268,7 @@ rs6000_override_options (const char *default_cpu)\n       else if (! strncmp (rs6000_traceback_name, \"no\", 2))\n \trs6000_traceback = traceback_none;\n       else\n-\terror (\"unknown -mtraceback arg `%s'; expecting `full', `partial' or `none'\",\n+\terror (\"unknown -mtraceback arg %qs; expecting %<full%>, %<partial%> or %<none%>\",\n \t       rs6000_traceback_name);\n     }\n \n@@ -1369,7 +1369,7 @@ rs6000_override_options (const char *default_cpu)\n       while (base[-1] != 'm') base--;\n \n       if (*rs6000_longcall_switch != '\\0')\n-\terror (\"invalid option `%s'\", base);\n+\terror (\"invalid option %qs\", base);\n       rs6000_default_long_calls = (base[0] != 'n');\n     }\n \n@@ -1380,7 +1380,7 @@ rs6000_override_options (const char *default_cpu)\n       while (base[-1] != 'm') base--;\n \n       if (*rs6000_warn_altivec_long_switch != '\\0')\n-\terror (\"invalid option `%s'\", base);\n+\terror (\"invalid option %qs\", base);\n       rs6000_warn_altivec_long = (base[0] != 'n');\n     }\n \n@@ -1677,7 +1677,7 @@ rs6000_parse_tls_size_option (void)\n   else if (strcmp (rs6000_tls_size_string, \"64\") == 0)\n     rs6000_tls_size = 64;\n   else\n-    error (\"bad value `%s' for -mtls-size switch\", rs6000_tls_size_string);\n+    error (\"bad value %qs for -mtls-size switch\", rs6000_tls_size_string);\n }\n \n void\n@@ -6798,7 +6798,7 @@ altivec_expand_dst_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \tif (TREE_CODE (arg2) != INTEGER_CST\n \t    || TREE_INT_CST_LOW (arg2) & ~0x3)\n \t  {\n-\t    error (\"argument to `%s' must be a 2-bit unsigned literal\", d->name);\n+\t    error (\"argument to %qs must be a 2-bit unsigned literal\", d->name);\n \t    return const0_rtx;\n \t  }\n \n@@ -6926,7 +6926,7 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n       while (TREE_CODE (arg0) == NOP_EXPR || TREE_CODE (arg0) == ADDR_EXPR\n \t     || TREE_CODE (arg0) == ARRAY_REF)\n \targ0 = TREE_OPERAND (arg0, 0);\n-      error (\"invalid parameter combination for `%s' AltiVec intrinsic\",\n+      error (\"invalid parameter combination for %qs AltiVec intrinsic\",\n \t     TREE_STRING_POINTER (arg0));\n \n       return const0_rtx;\n@@ -16746,7 +16746,7 @@ rs6000_handle_altivec_attribute (tree *node, tree name, tree args,\n   *no_add_attrs = true;  /* No need to hang on to the attribute.  */\n \n   if (!result)\n-    warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+    warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n   else\n     *node = reconstruct_complex_type (*node, result);\n \n@@ -16781,7 +16781,7 @@ rs6000_handle_longcall_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "b4b4c452092a3371efc72799ead982611c1e7876", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -6827,11 +6827,11 @@ s390_emit_prologue (void)\n \n       if (s390_warn_framesize > 0 \n \t  && cfun_frame_layout.frame_size >= s390_warn_framesize)\n-\twarning (\"frame size of `%s' is \" HOST_WIDE_INT_PRINT_DEC \" bytes\", \n+\twarning (\"frame size of %qs is \" HOST_WIDE_INT_PRINT_DEC \" bytes\", \n \t\t current_function_name (), cfun_frame_layout.frame_size);\n \n       if (s390_warn_dynamicstack_p && cfun->calls_alloca)\n-\twarning (\"`%s' uses dynamic stack allocation\", current_function_name ());\n+\twarning (\"%qs uses dynamic stack allocation\", current_function_name ());\n \n       /* Save incoming stack pointer into temp reg.  */\n       if (cfun_frame_layout.save_backchain_p || next_fpr)"}, {"sha": "699f316064e0a140a152e376a62f39c01c68558a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -7150,7 +7150,7 @@ sh_handle_interrupt_handler_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -7171,21 +7171,21 @@ sh_handle_sp_switch_attribute (tree *node, tree name, tree args,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (!pragma_interrupt)\n     {\n       /* The sp_switch attribute only has meaning for interrupt functions.  */\n-      warning (\"`%s' attribute only applies to interrupt functions\",\n+      warning (\"%qs attribute only applies to interrupt functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (TREE_VALUE (args)) != STRING_CST)\n     {\n       /* The argument must be a constant string.  */\n-      warning (\"`%s' attribute argument not a string constant\",\n+      warning (\"%qs attribute argument not a string constant\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -7206,21 +7206,21 @@ sh_handle_trap_exit_attribute (tree *node, tree name, tree args,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (!pragma_interrupt)\n     {\n       /* The trap_exit attribute only has meaning for interrupt functions.  */\n-      warning (\"`%s' attribute only applies to interrupt functions\",\n+      warning (\"%qs attribute only applies to interrupt functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (TREE_VALUE (args)) != INTEGER_CST)\n     {\n       /* The argument must be a constant integer.  */\n-      warning (\"`%s' attribute argument not an integer constant\",\n+      warning (\"%qs attribute argument not an integer constant\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -7348,7 +7348,7 @@ sh_pch_valid_p (const void *data_p, size_t len)\n  make_message:\n   {\n     char *r;\n-    asprintf (&r, _(\"created and used with differing settings of `-m%s'\"),\n+    asprintf (&r, _(\"created and used with differing settings of '-m%s'\"),\n \t\t  flag_that_differs);\n     if (r == NULL)\n       return _(\"out of memory\");"}, {"sha": "cb04c8c8d769e3931037ee6264e00f758505edd5", "filename": "gcc/config/sh/symbian.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fsh%2Fsymbian.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fsh%2Fsymbian.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsymbian.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -276,7 +276,7 @@ sh_symbian_mark_dllimport (tree decl)\n \n   if (sh_symbian_dllexport_name_p (oldname))\n     {\n-      error (\"`%s' declared as both exported to and imported from a DLL\",\n+      error (\"%qs declared as both exported to and imported from a DLL\",\n              IDENTIFIER_POINTER (DECL_NAME (decl)));\n     }\n   else if (sh_symbian_dllimport_name_p (oldname))\n@@ -411,14 +411,14 @@ sh_symbian_handle_dll_attribute (tree *pnode, tree name, tree args,\n \t\t   | (int) ATTR_FLAG_FUNCTION_NEXT\n \t\t   | (int) ATTR_FLAG_ARRAY_NEXT))\n \t{\n-\t  warning (\"`%s' attribute ignored\", attr);\n+\t  warning (\"%qs attribute ignored\", attr);\n \t  *no_add_attrs = true;\n \t  return tree_cons (name, args, NULL_TREE);\n \t}\n \n       if (TREE_CODE (node) != RECORD_TYPE && TREE_CODE (node) != UNION_TYPE)\n \t{\n-\t  warning (\"`%s' attribute ignored\", attr);\n+\t  warning (\"%qs attribute ignored\", attr);\n \t  *no_add_attrs = true;\n \t}\n \n@@ -433,7 +433,7 @@ sh_symbian_handle_dll_attribute (tree *pnode, tree name, tree args,\n \t{\n \t  if (DECL_INITIAL (node))\n \t    {\n-\t      error (\"%Hvariable `%D' definition is marked dllimport.\",\n+\t      error (\"%Hvariable %qD definition is marked dllimport.\",\n \t\t     & DECL_SOURCE_LOCATION (node), node);\n \t      *no_add_attrs = true;\n \t    }"}, {"sha": "06a2f0d3fb67e98bfdbe37361a6d0e4b9dfc1710", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1918,7 +1918,7 @@ xstormy16_print_operand (FILE *file, rtx x, int code)\n \tif (GET_CODE (x) == CONST_INT)\n \t  xx = INTVAL (x);\n \telse\n-\t  output_operand_lossage (\"`B' operand is not constant\");\n+\t  output_operand_lossage (\"'B' operand is not constant\");\n \t\n \t/* GCC sign-extends masks with the MSB set, so we have to\n \t   detect all the cases that differ only in sign extension\n@@ -1945,7 +1945,7 @@ xstormy16_print_operand (FILE *file, rtx x, int code)\n \t  }\n \n \tif (l == -1)\n-\t  output_operand_lossage (\"`B' operand has multiple bits set\");\n+\t  output_operand_lossage (\"'B' operand has multiple bits set\");\n \t\n \tfprintf (file, IMMEDIATE_PREFIX HOST_WIDE_INT_PRINT_DEC, l);\n \treturn;\n@@ -1971,7 +1971,7 @@ xstormy16_print_operand (FILE *file, rtx x, int code)\n \tif (GET_CODE (x) == CONST_INT)\n \t  xx = INTVAL (x);\n \telse\n-\t  output_operand_lossage (\"`o' operand is not constant\");\n+\t  output_operand_lossage (\"'o' operand is not constant\");\n \t\n \tif (code == 'O')\n \t  xx = -xx;\n@@ -1989,7 +1989,7 @@ xstormy16_print_operand (FILE *file, rtx x, int code)\n \tif (GET_CODE (x) == CONST_INT)\n \t  xx = INTVAL (x);\n \telse\n-\t  output_operand_lossage (\"`B' operand is not constant\");\n+\t  output_operand_lossage (\"'B' operand is not constant\");\n \t\n \tl = 7 - xx;\n \t\n@@ -2410,7 +2410,7 @@ xstormy16_handle_interrupt_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -2431,7 +2431,7 @@ xstormy16_handle_below100_attribute (tree *node,\n       && TREE_CODE (*node) != POINTER_TYPE\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (\"`__BELOW100__' attribute only applies to variables\");\n+      warning (\"%<__BELOW100__%> attribute only applies to variables\");\n       *no_add_attrs = true;\n     }\n   else if (args == NULL_TREE && TREE_CODE (*node) == VAR_DECL)"}, {"sha": "8154b6616f1b84cdf1d85cda75821bf9f98e3503", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -2204,7 +2204,7 @@ v850_handle_interrupt_attribute (tree * node,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (\"`%s' attribute only applies to functions\",\n+      warning (\"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "8ac1df2fd1234e172f64df4d2f30e40faf6ee147", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1,3 +1,13 @@\n+2004-11-09  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* call.c, class.c, decl.c, decl2.c, error.c, mangle.c, parser.c,\n+\tpt.c, search.c, semantics.c, typeck.c: Use %q, %< and %> for\n+\tquoting in diagnostics.\n+\t* parser.c (cp_parser_sizeof_operand): Use '' instead of `' for\n+\tquoting in printf format.\n+\t* decl.c (duplicate_decls, start_decl): Use %qD instead of\n+\tunquoted %D.\n+\n 2004-11-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* class.c, decl.c, lex.c, name-lookup.c, parser.c, pt.c,"}, {"sha": "613d0d4493ece92d165f56a9c98fd9ab7375cd02", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -3400,7 +3400,7 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3)\n       \n       if (TREE_CODE (arg2_type) == ENUMERAL_TYPE\n           && TREE_CODE (arg3_type) == ENUMERAL_TYPE)\n-         warning (\"enumeral mismatch in conditional expression: `%T' vs `%T'\",\n+         warning (\"enumeral mismatch in conditional expression: %qT vs %qT\",\n                    arg2_type, arg3_type);\n       else if (extra_warnings\n                && ((TREE_CODE (arg2_type) == ENUMERAL_TYPE"}, {"sha": "e146abc0223ed7042854ffe006e347a8625cb14a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -5529,7 +5529,7 @@ push_lang_context (tree name)\n       current_lang_name = name;\n     }\n   else\n-    error (\"language string `\\\"%E\\\"' not recognized\", name);\n+    error (\"language string %<\\\"%E\\\"%> not recognized\", name);\n }\n   \n /* Get out of the current language scope.  */"}, {"sha": "a6961215396730e9ffaf7c0755d168d07426d64e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1848,7 +1848,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t       that specialization that would cause an implicit\n \t       instantiation to take place, in every translation unit in\n \t       which such a use occurs.  */\n-\t    error (\"explicit specialization of %D after first use\",\n+\t    error (\"explicit specialization of %qD after first use\",\n \t\t      olddecl);\n \n \t  SET_DECL_TEMPLATE_SPECIALIZATION (olddecl);\n@@ -3781,7 +3781,7 @@ start_decl (const cp_declarator *declarator,\n \t\t initialization.  Thus, duplicate_decls won't warn\n \t\t about this situation, and so we check here.  */\n \t      if (DECL_INITIAL (decl) && DECL_INITIAL (field))\n-\t\terror (\"duplicate initialization of %D\", decl);\n+\t\terror (\"duplicate initialization of %qD\", decl);\n \t      if (duplicate_decls (decl, field))\n \t\tdecl = field;\n \t    }\n@@ -7052,7 +7052,7 @@ grokdeclarator (const cp_declarator *declarator,\n   /* Warn about storage classes that are invalid for certain\n      kinds of declarations (parameters, typenames, etc.).  */\n   if (declspecs->multiple_storage_classes_p)\n-    error (\"multiple storage classes in declaration of `%s'\", name);\n+    error (\"multiple storage classes in declaration of %qs\", name);\n   else if (thread_p\n \t   && ((storage_class\n \t\t&& storage_class != sc_extern"}, {"sha": "03c51e779075934ad79eedb4b1f5840c7db54380", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -961,7 +961,7 @@ grokfield (const cp_declarator *declarator,\n \n     case FIELD_DECL:\n       if (asmspec)\n-\terror (\"`asm' specifiers are not permitted on non-static data members\");\n+\terror (\"%<asm%> specifiers are not permitted on non-static data members\");\n       if (DECL_INITIAL (value) == error_mark_node)\n \tinit = error_mark_node;\n       cp_finish_decl (value, init, NULL_TREE, flags);\n@@ -3030,7 +3030,7 @@ cp_finish_file (void)\n \t     already verified there was a definition.  */\n \t  && !DECL_EXPLICIT_INSTANTIATION (decl))\n \t{\n-\t  cp_warning_at (\"inline function `%D' used but never defined\", decl);\n+\t  cp_warning_at (\"inline function %qD used but never defined\", decl);\n \t  /* This symbol is effectively an \"extern\" declaration now.\n \t     This is not strictly necessary, but removes a duplicate\n \t     warning.  */"}, {"sha": "07fa6d9ddf1cc877bc57ab6011beb87db3058606", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -2230,7 +2230,7 @@ print_instantiation_partial_context (diagnostic_context *context,\n       xloc = expand_location (loc);\n       if (t == NULL_TREE)\n \tbreak;\n-      pp_verbatim (context->printer, \"%s:%d:   instantiated from `%s'\\n\",\n+      pp_verbatim (context->printer, \"%s:%d:   instantiated from %qs\\n\",\n                    xloc.file, xloc.line,\n                    decl_as_string (TINST_DECL (t),\n                                    TFF_DECL_SPECIFIERS | TFF_RETURN_TYPE));\n@@ -2370,7 +2370,7 @@ locate_error (const char *msgid, va_list ap)\n \n \t    default:\n \t      errorcount = 0;  /* damn ICE suppression */\n-\t      internal_error (\"unexpected letter `%c' in locate_error\\n\", *f);\n+\t      internal_error (\"unexpected letter %qc in locate_error\\n\", *f);\n \t    }\n \t}\n     }"}, {"sha": "eb9f8f075a2f8a332ba6c9e62fcd8330e1d3e165", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -2169,7 +2169,7 @@ write_expression (tree expr)\n \t\t expression without extending the C++ ABI.  */\n \t      if (code == COND_EXPR && i == 1 && !operand)\n \t\t{\n-\t\t  error (\"omitted middle operand to `?:' operand \"\n+\t\t  error (\"omitted middle operand to %<?:%> operand \"\n \t\t\t \"cannot be mangled\");\n \t\t  continue;\n \t\t}\n@@ -2479,7 +2479,7 @@ static inline const char *\n finish_mangling (const bool warn)\n {\n   if (warn_abi && warn && G.need_abi_warning)\n-    warning (\"the mangled name of `%D' will change in a future \"\n+    warning (\"the mangled name of %qD will change in a future \"\n \t     \"version of GCC\",\n \t     G.entity);\n "}, {"sha": "ef02ba9f514fc5c9436a23f805571c79bc914240", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1821,7 +1821,7 @@ cp_parser_name_lookup_error (cp_parser* parser,\n \terror (\"%<%T::%D%> has not been declared\", \n \t       parser->object_scope, name);\n       else\n-\terror (\"`%D' has not been declared\", name);\n+\terror (\"%qD has not been declared\", name);\n     }\n   else if (parser->scope && parser->scope != global_namespace)\n     error (\"%<%D::%D%> %s\", parser->scope, name, desired);\n@@ -15228,7 +15228,7 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n \n   /* Initialize FORMAT the first time we get here.  */\n   if (!format)\n-    format = \"types may not be defined in `%s' expressions\";\n+    format = \"types may not be defined in '%s' expressions\";\n \n   /* Types cannot be defined in a `sizeof' expression.  Save away the\n      old message.  */\n@@ -15266,7 +15266,7 @@ cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)\n       type = cp_parser_type_id (parser);\n       parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n       /* Now, look for the trailing `)'.  */\n-      cp_parser_require (parser, CPP_CLOSE_PAREN, \"`)'\");\n+      cp_parser_require (parser, CPP_CLOSE_PAREN, \"%<)%>\");\n       /* If all went well, then we're done.  */\n       if (cp_parser_parse_definitely (parser))\n \t{"}, {"sha": "28ae8f375b3ca5db63f5355a53dbb81b421ae486", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1795,7 +1795,7 @@ check_explicit_specialization (tree declarator,\n \terror(\"too few template parameter lists in declaration of %qD\", decl);\n       else\n \terror(\"explicit specialization of %qD must be introduced by \"\n-\t      \"`template <>'\", decl);\n+\t      \"%<template <>%>\", decl);\n \n       /* Fall through.  */\n     case tsk_expl_spec:\n@@ -7407,7 +7407,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       }\n \n     default:\n-      sorry (\"use of `%s' in template\",\n+      sorry (\"use of %qs in template\",\n \t     tree_code_name [(int) TREE_CODE (t)]);\n       return error_mark_node;\n     }"}, {"sha": "a95bde3e095c234a1cf2aaf3656e11f1cd473c39", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1131,7 +1131,7 @@ lookup_field_r (tree binfo, void *data)\n \t  /* Add the new value.  */\n \t  lfi->ambiguous = tree_cons (NULL_TREE, nval, lfi->ambiguous);\n \t  TREE_TYPE (lfi->ambiguous) = error_mark_node;\n-\t  lfi->errstr = \"request for member `%D' is ambiguous\";\n+\t  lfi->errstr = \"request for member %qD is ambiguous\";\n \t}\n     }\n   else"}, {"sha": "a36a631896ce0bd351d5571bde54da9b0fd8d004", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1858,15 +1858,15 @@ finish_this_expr (void)\n   else if (current_function_decl\n \t   && DECL_STATIC_FUNCTION_P (current_function_decl))\n     {\n-      error (\"`this' is unavailable for static member functions\");\n+      error (\"%<this%> is unavailable for static member functions\");\n       result = error_mark_node;\n     }\n   else\n     {\n       if (current_function_decl)\n-\terror (\"invalid use of `this' in non-member function\");\n+\terror (\"invalid use of %<this%> in non-member function\");\n       else\n-\terror (\"invalid use of `this' at top level\");\n+\terror (\"invalid use of %<this%> at top level\");\n       result = error_mark_node;\n     }\n \n@@ -2004,7 +2004,7 @@ finish_template_type_parm (tree aggr, tree identifier)\n {\n   if (aggr != class_type_node)\n     {\n-      pedwarn (\"template type parameters must use the keyword `class' or `typename'\");\n+      pedwarn (\"template type parameters must use the keyword %<class%> or %<typename%>\");\n       aggr = class_type_node;\n     }\n "}, {"sha": "c83d33a5d6e6152f6d2691b20c11c4a053cae30d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -4325,7 +4325,7 @@ cxx_mark_addressable (tree exp)\n       case PARM_DECL:\n \tif (x == current_class_ptr)\n \t  {\n-            error (\"cannot take the address of `this', which is an rvalue expression\");\n+            error (\"cannot take the address of %<this%>, which is an rvalue expression\");\n \t    TREE_ADDRESSABLE (x) = 1; /* so compiler doesn't die later.  */\n \t    return true;\n \t  }\n@@ -4344,7 +4344,7 @@ cxx_mark_addressable (tree exp)\n       case RESULT_DECL:\n \tif (DECL_REGISTER (x) && !TREE_ADDRESSABLE (x)\n \t    && !DECL_ARTIFICIAL (x) && extra_warnings)\n-\t  warning (\"address requested for %qD, which is declared `register'\",\n+\t  warning (\"address requested for %qD, which is declared %<register%>\",\n                    x);\n \tTREE_ADDRESSABLE (x) = 1;\n \treturn true;\n@@ -4863,7 +4863,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       if (TYPE_PTR_P (intype)\n \t  && (comptypes (TREE_TYPE (intype), TREE_TYPE (type),\n \t\t\t COMPARE_BASE | COMPARE_DERIVED)))\n-\twarning (\"casting `%T' to `%T' does not dereference pointer\",\n+\twarning (\"casting %qT to %qT does not dereference pointer\",\n \t\t intype, type);\n \n       expr = build_unary_op (ADDR_EXPR, expr, 0);\n@@ -6144,7 +6144,7 @@ check_return_expr (tree retval)\n      (This is a G++ extension, used to get better code for functions\n      that call the `volatile' function.)  */\n   if (TREE_THIS_VOLATILE (current_function_decl))\n-    warning (\"function declared `noreturn' has a `return' statement\");\n+    warning (\"function declared %<noreturn%> has a %<return%> statement\");\n \n   /* Check for various simple errors.  */\n   if (DECL_DESTRUCTOR_P (current_function_decl))\n@@ -6184,7 +6184,7 @@ check_return_expr (tree retval)\n      that's supposed to return a value.  */\n   if (!retval && fn_returns_value_p)\n     {\n-      pedwarn (\"return-statement with no value, in function returning '%T'\",\n+      pedwarn (\"return-statement with no value, in function returning %qT\",\n \t       valtype);\n       /* Clear this, so finish_function won't say that we reach the\n \t end of a non-void function (which we don't, we gave a"}, {"sha": "a45119a647e4fa4220102a733bfa0426e767a194", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -2850,7 +2850,7 @@ output_operand_lossage (const char *msgid, ...)\n \n   va_start (ap, msgid);\n \n-  pfx_str = this_is_asm_operands ? _(\"invalid `asm': \") : \"output_operand: \";\n+  pfx_str = this_is_asm_operands ? _(\"invalid 'asm': \") : \"output_operand: \";\n   asprintf (&fmt_string, \"%s%s\", pfx_str, _(msgid));\n   vasprintf (&new_message, fmt_string, ap);\n \n@@ -3202,7 +3202,7 @@ output_asm_label (rtx x)\n \t  && NOTE_LINE_NUMBER (x) == NOTE_INSN_DELETED_LABEL))\n     ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (x));\n   else\n-    output_operand_lossage (\"`%%l' operand isn't a label\");\n+    output_operand_lossage (\"'%%l' operand isn't a label\");\n \n   assemble_name (asm_out_file, buf);\n }"}, {"sha": "eda9e5ecb26a672f7bdb8ad54ed98514c54138ff", "filename": "gcc/gcc.c", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1266,7 +1266,7 @@ translate_options (int *argcp, const char *const **argvp)\n \n \t\t  else if (strchr (arginfo, '*') != 0)\n \t\t    {\n-\t\t      error (\"incomplete `%s' option\", option_map[j].name);\n+\t\t      error (\"incomplete '%s' option\", option_map[j].name);\n \t\t      break;\n \t\t    }\n \n@@ -1277,7 +1277,7 @@ translate_options (int *argcp, const char *const **argvp)\n \t\t\t{\n \t\t\t  if (i + 1 == argc)\n \t\t\t    {\n-\t\t\t      error (\"missing argument to `%s' option\",\n+\t\t\t      error (\"missing argument to '%s' option\",\n \t\t\t\t     option_map[j].name);\n \t\t\t      break;\n \t\t\t    }\n@@ -1290,7 +1290,7 @@ translate_options (int *argcp, const char *const **argvp)\n \t\t  else if (strchr (arginfo, 'o') == 0)\n \t\t    {\n \t\t      if (arg != 0)\n-\t\t\terror (\"extraneous argument to `%s' option\",\n+\t\t\terror (\"extraneous argument to '%s' option\",\n \t\t\t       option_map[j].name);\n \t\t      arg = 0;\n \t\t    }\n@@ -2632,7 +2632,7 @@ add_sysrooted_prefix (struct path_prefix *pprefix, const char *prefix,\n \t\t      int require_machine_suffix, int os_multilib)\n {\n   if (!IS_ABSOLUTE_PATH (prefix))\n-    fatal (\"system path `%s' is not absolute\", prefix);\n+    fatal (\"system path '%s' is not absolute\", prefix);\n \n   if (target_system_root)\n     {\n@@ -3198,7 +3198,7 @@ process_command (int argc, const char **argv)\n \t      argv += 2;\n \t    }\n \t  else\n-\t    fatal (\"`-%c' option must have argument\", opt);\n+\t    fatal (\"'-%c' option must have argument\", opt);\n \t  if (opt == 'V')\n \t    new_version = arg;\n \t  else\n@@ -3220,7 +3220,7 @@ process_command (int argc, const char **argv)\n       new_argv[0] = new_argv0;\n \n       execvp (new_argv0, new_argv);\n-      fatal (\"couldn't run `%s': %s\", new_argv0, xstrerror (errno));\n+      fatal (\"couldn't run '%s': %s\", new_argv0, xstrerror (errno));\n     }\n \n   /* Set up the default search paths.  If there is no GCC_EXEC_PREFIX,\n@@ -3509,29 +3509,29 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n       else if (strcmp (argv[i], \"-Xlinker\") == 0)\n \t{\n \t  if (i + 1 == argc)\n-\t    fatal (\"argument to `-Xlinker' is missing\");\n+\t    fatal (\"argument to '-Xlinker' is missing\");\n \n \t  n_infiles++;\n \t  i++;\n \t}\n       else if (strcmp (argv[i], \"-Xpreprocessor\") == 0)\n \t{\n \t  if (i + 1 == argc)\n-\t    fatal (\"argument to `-Xpreprocessor' is missing\");\n+\t    fatal (\"argument to '-Xpreprocessor' is missing\");\n \n \t  add_preprocessor_option (argv[i+1], strlen (argv[i+1]));\n \t}\n       else if (strcmp (argv[i], \"-Xassembler\") == 0)\n \t{\n \t  if (i + 1 == argc)\n-\t    fatal (\"argument to `-Xassembler' is missing\");\n+\t    fatal (\"argument to '-Xassembler' is missing\");\n \n \t  add_assembler_option (argv[i+1], strlen (argv[i+1]));\n \t}\n       else if (strcmp (argv[i], \"-l\") == 0)\n \t{\n \t  if (i + 1 == argc)\n-\t    fatal (\"argument to `-l' is missing\");\n+\t    fatal (\"argument to '-l' is missing\");\n \n \t  n_infiles++;\n \t  i++;\n@@ -3552,7 +3552,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t{\n \t  struct user_specs *user = xmalloc (sizeof (struct user_specs));\n \t  if (++i >= argc)\n-\t    fatal (\"argument to `-specs' is missing\");\n+\t    fatal (\"argument to '-specs' is missing\");\n \n \t  user->next = (struct user_specs *) 0;\n \t  user->filename = argv[i];\n@@ -3566,7 +3566,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t{\n \t  struct user_specs *user = xmalloc (sizeof (struct user_specs));\n \t  if (strlen (argv[i]) == 7)\n-\t    fatal (\"argument to `-specs=' is missing\");\n+\t    fatal (\"argument to '-specs=' is missing\");\n \n \t  user->next = (struct user_specs *) 0;\n \t  user->filename = argv[i] + 7;\n@@ -3603,7 +3603,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t    {\n \t    case 'b':\n \t    case 'V':\n-\t      fatal (\"`-%c' must come at the start of the command line\", c);\n+\t      fatal (\"'-%c' must come at the start of the command line\", c);\n \t      break;\n \n \t    case 'B':\n@@ -3612,7 +3612,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t\tint len;\n \n \t\tif (p[1] == 0 && i + 1 == argc)\n-\t\t  fatal (\"argument to `-B' is missing\");\n+\t\t  fatal (\"argument to '-B' is missing\");\n \t\tif (p[1] == 0)\n \t\t  value = argv[++i];\n \t\telse\n@@ -4001,7 +4001,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t  if (c == 'x')\n \t    {\n \t      if (p[1] == 0 && i + 1 == argc)\n-\t\tfatal (\"argument to `-x' is missing\");\n+\t\tfatal (\"argument to '-x' is missing\");\n \t      if (p[1] == 0)\n \t\tspec_lang = argv[++i];\n \t      else\n@@ -4029,7 +4029,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t\t  n_args = SWITCH_TAKES_ARG (c) - (p[1] != 0);\n \t\t}\n \t      if (i + n_args >= argc)\n-\t\tfatal (\"argument to `-%s' is missing\", p);\n+\t\tfatal (\"argument to '-%s' is missing\", p);\n \t      switches[n_switches].args\n \t\t= xmalloc ((n_args + 1) * sizeof(const char *));\n \t      while (j < n_args)\n@@ -4090,7 +4090,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n     }\n \n   if (n_infiles == last_language_n_infiles && spec_lang != 0)\n-    error (\"warning: `-x %s' after last input file has no effect\", spec_lang);\n+    error (\"warning: '-x %s' after last input file has no effect\", spec_lang);\n \n   /* Ensure we only invoke each subprocess once.  */\n   if (target_help_flag || print_help_list)\n@@ -4733,7 +4733,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t    p += 2;\n \t\t    /* We don't support extra suffix characters after %O.  */\n \t\t    if (*p == '.' || ISALPHA ((unsigned char) *p))\n-\t\t      fatal (\"spec '%s' has invalid `%%0%c'\", spec, *p);\n+\t\t      fatal (\"spec '%s' has invalid '%%0%c'\", spec, *p);\n \t\t    if (suffix_length == 0)\n \t\t      suffix = TARGET_OBJECT_SUFFIX;\n \t\t    else\n@@ -4930,7 +4930,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t      int cur_index = argbuf_index;\n \t      /* Handle the {...} following the %W.  */\n \t      if (*p != '{')\n-\t\tfatal (\"spec `%s' has invalid `%%W%c\", spec, *p);\n+\t\tfatal (\"spec '%s' has invalid '%%W%c\", spec, *p);\n \t      p = handle_braces (p + 1);\n \t      if (p == 0)\n \t\treturn -1;\n@@ -4961,7 +4961,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \n \t      /* Skip past the option value and make a copy.  */\n \t      if (*p != '{')\n-\t\tfatal (\"spec `%s' has invalid `%%x%c'\", spec, *p);\n+\t\tfatal (\"spec '%s' has invalid '%%x%c'\", spec, *p);\n \t      while (*p++ != '}')\n \t\t;\n \t      string = save_string (p1 + 1, p - p1 - 2);\n@@ -5342,7 +5342,7 @@ eval_spec_function (const char *func, const char *args)\n \n   sf = lookup_spec_function (func);\n   if (sf == NULL)\n-    fatal (\"unknown spec function `%s'\", func);\n+    fatal (\"unknown spec function '%s'\", func);\n \n   /* Push the spec processing context.  */\n   save_argbuf_index = argbuf_index;\n@@ -5361,7 +5361,7 @@ eval_spec_function (const char *func, const char *args)\n \n   alloc_args ();\n   if (do_spec_2 (args) < 0)\n-    fatal (\"error in args to spec function `%s'\", func);\n+    fatal (\"error in args to spec function '%s'\", func);\n \n   /* argbuf_index is an index for the next argument to be inserted, and\n      so contains the count of the args already inserted.  */\n@@ -5654,7 +5654,7 @@ handle_braces (const char *p)\n   return p;\n   \n  invalid:\n-  fatal (\"braced spec `%s' is invalid at `%c'\", orig, *p);\n+  fatal (\"braced spec '%s' is invalid at '%c'\", orig, *p);\n   \n #undef SKIP_WHITE\n }\n@@ -5742,7 +5742,7 @@ process_brace_body (const char *p, const char *atom, const char *end_atom,\n   return p;\n \n  invalid:\n-  fatal (\"braced spec body `%s' is invalid\", body);\n+  fatal (\"braced spec body '%s' is invalid\", body);\n }\n \f\n /* Return 0 iff switch number SWITCHNUM is obsoleted by a later switch\n@@ -6271,7 +6271,7 @@ main (int argc, const char **argv)\n \n   for (i = 0; (int) i < n_switches; i++)\n     if (! switches[i].validated)\n-      error (\"unrecognized option `-%s'\", switches[i].part1);\n+      error (\"unrecognized option '-%s'\", switches[i].part1);\n \n   /* Obey some of the options.  */\n \n@@ -6467,7 +6467,7 @@ main (int argc, const char **argv)\n \t\t  value = do_spec (input_file_compiler->spec);\n \t\t  infiles[i].preprocessed = true;\n \t\t  if (!have_o_argbuf_index)\n-\t\t    fatal (\"spec `%s' is invalid\", input_file_compiler->spec);\n+\t\t    fatal (\"spec '%s' is invalid\", input_file_compiler->spec);\n \t\t  infiles[i].name = argbuf[have_o_argbuf_index];\n \t\t  infiles[i].incompiler\n \t\t    = lookup_compiler (infiles[i].name,\n@@ -6935,7 +6935,7 @@ used_arg (const char *p, int len)\n \t      if (*q == '\\0')\n \t\t{\n \t\tinvalid_matches:\n-\t\t  fatal (\"multilib spec `%s' is invalid\", multilib_matches);\n+\t\t  fatal (\"multilib spec '%s' is invalid\", multilib_matches);\n \t\t}\n \t      q++;\n \t    }\n@@ -7127,7 +7127,7 @@ set_multilib_dir (void)\n \t  if (*p == '\\0')\n \t    {\n \t    invalid_exclusions:\n-\t      fatal (\"multilib exclusions `%s' is invalid\",\n+\t      fatal (\"multilib exclusions '%s' is invalid\",\n \t\t     multilib_exclusions);\n \t    }\n \n@@ -7185,7 +7185,7 @@ set_multilib_dir (void)\n \t  if (*p == '\\0')\n \t    {\n \t    invalid_select:\n-\t      fatal (\"multilib select `%s' is invalid\",\n+\t      fatal (\"multilib select '%s' is invalid\",\n \t\t     multilib_select);\n \t    }\n \t  ++p;\n@@ -7326,7 +7326,7 @@ print_multilib_info (void)\n \t  if (*p == '\\0')\n \t    {\n \t    invalid_select:\n-\t      fatal (\"multilib select `%s' is invalid\", multilib_select);\n+\t      fatal (\"multilib select '%s' is invalid\", multilib_select);\n \t    }\n \t  \n \t  ++p;\n@@ -7364,7 +7364,7 @@ print_multilib_info (void)\n \t\tif (*e == '\\0')\n \t\t  {\n \t\t  invalid_exclusion:\n-\t\t    fatal (\"multilib exclusion `%s' is invalid\",\n+\t\t    fatal (\"multilib exclusion '%s' is invalid\",\n \t\t\t   multilib_exclusions);\n \t\t  }\n "}, {"sha": "ee4d6b9aa80e338457b2a1db3a090526489580ca", "filename": "gcc/gcov.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -537,16 +537,16 @@ process_file (const char *file_name)\n \n \t  if (gcov_file)\n \t    {\n-\t      fnotice (stdout, \"%s:creating `%s'\\n\",\n+\t      fnotice (stdout, \"%s:creating '%s'\\n\",\n \t\t       src->name, gcov_file_name);\n \t      output_lines (gcov_file, src);\n \t      if (ferror (gcov_file))\n-\t\t    fnotice (stderr, \"%s:error writing output file `%s'\\n\",\n+\t\t    fnotice (stderr, \"%s:error writing output file '%s'\\n\",\n \t\t\t     src->name, gcov_file_name);\n \t      fclose (gcov_file);\n \t    }\n \t  else\n-\t    fnotice (stderr, \"%s:could not open output file `%s'\\n\",\n+\t    fnotice (stderr, \"%s:could not open output file '%s'\\n\",\n \t\t     src->name, gcov_file_name);\n \t  free (gcov_file_name);\n \t}\n@@ -716,7 +716,7 @@ read_graph_file (void)\n       GCOV_UNSIGNED2STRING (v, version);\n       GCOV_UNSIGNED2STRING (e, GCOV_VERSION);\n \n-      fnotice (stderr, \"%s:version `%.4s', prefer `%.4s'\\n\",\n+      fnotice (stderr, \"%s:version '%.4s', prefer '%.4s'\\n\",\n \t       bbg_file_name, v, e);\n     }\n   bbg_stamp = gcov_read_unsigned ();\n@@ -768,7 +768,7 @@ read_graph_file (void)\n       else if (fn && tag == GCOV_TAG_BLOCKS)\n \t{\n \t  if (fn->blocks)\n-\t    fnotice (stderr, \"%s:already seen blocks for `%s'\\n\",\n+\t    fnotice (stderr, \"%s:already seen blocks for '%s'\\n\",\n \t\t     bbg_file_name, fn->name);\n \t  else\n \t    {\n@@ -978,7 +978,7 @@ read_count_file (void)\n       GCOV_UNSIGNED2STRING (v, version);\n       GCOV_UNSIGNED2STRING (e, GCOV_VERSION);\n       \n-      fnotice (stderr, \"%s:version `%.4s', prefer version `%.4s'\\n\",\n+      fnotice (stderr, \"%s:version '%.4s', prefer version '%.4s'\\n\",\n \t       da_file_name, v, e);\n     }\n   tag = gcov_read_unsigned ();\n@@ -1010,7 +1010,7 @@ read_count_file (void)\n \t\tfn_n = NULL;\n \t      else\n \t\t{\n-\t\t  fnotice (stderr, \"%s:unknown function `%u'\\n\",\n+\t\t  fnotice (stderr, \"%s:unknown function '%u'\\n\",\n \t\t\t   da_file_name, ident);\n \t\t  break;\n \t\t}\n@@ -1023,7 +1023,7 @@ read_count_file (void)\n \t  else if (gcov_read_unsigned () != fn->checksum)\n \t    {\n \t    mismatch:;\n-\t      fnotice (stderr, \"%s:profile mismatch for `%s'\\n\",\n+\t      fnotice (stderr, \"%s:profile mismatch for '%s'\\n\",\n \t\t       da_file_name, fn->name);\n \t      goto cleanup;\n \t    }\n@@ -1066,20 +1066,20 @@ solve_flow_graph (function_t *fn)\n   block_t *invalid_blocks = NULL;  /* invalid, but inferable blocks.  */\n \n   if (fn->num_blocks < 2)\n-    fnotice (stderr, \"%s:`%s' lacks entry and/or exit blocks\\n\",\n+    fnotice (stderr, \"%s:'%s' lacks entry and/or exit blocks\\n\",\n \t     bbg_file_name, fn->name);\n   else\n     {\n       if (fn->blocks[0].num_pred)\n-\tfnotice (stderr, \"%s:`%s' has arcs to entry block\\n\",\n+\tfnotice (stderr, \"%s:'%s' has arcs to entry block\\n\",\n \t\t bbg_file_name, fn->name);\n       else\n \t/* We can't deduce the entry block counts from the lack of\n \t   predecessors.  */\n \tfn->blocks[0].num_pred = ~(unsigned)0;\n \n       if (fn->blocks[fn->num_blocks - 1].num_succ)\n-\tfnotice (stderr, \"%s:`%s' has arcs from exit block\\n\",\n+\tfnotice (stderr, \"%s:'%s' has arcs from exit block\\n\",\n \t\t bbg_file_name, fn->name);\n       else\n \t/* Likewise, we can't deduce exit block counts from the lack\n@@ -1287,7 +1287,7 @@ solve_flow_graph (function_t *fn)\n   for (ix = 0; ix < fn->num_blocks; ix++)\n     if (!fn->blocks[ix].count_valid)\n       {\n-\tfnotice (stderr, \"%s:graph is unsolvable for `%s'\\n\",\n+\tfnotice (stderr, \"%s:graph is unsolvable for '%s'\\n\",\n \t\t bbg_file_name, fn->name);\n \tbreak;\n       }\n@@ -1367,7 +1367,7 @@ format_gcov (gcov_type top, gcov_type bottom, int dp)\n static void\n function_summary (const coverage_t *coverage, const char *title)\n {\n-  fnotice (stdout, \"%s `%s'\\n\", title, coverage->name);\n+  fnotice (stdout, \"%s '%s'\\n\", title, coverage->name);\n \n   if (coverage->lines)\n     fnotice (stdout, \"Lines executed:%s of %d\\n\",\n@@ -1537,7 +1537,7 @@ add_line_counts (coverage_t *coverage, function_t *fn)\n \t}\n     }\n   if (!line)\n-    fnotice (stderr, \"%s:no lines for `%s'\\n\", bbg_file_name, fn->name);\n+    fnotice (stderr, \"%s:no lines for '%s'\\n\", bbg_file_name, fn->name);\n }\n \n /* Accumulate the line counts of a file.  */\n@@ -1796,7 +1796,7 @@ output_lines (FILE *gcov_file, const source_t *src)\n       if (!fstat (fileno (source_file), &status)\n \t  && status.st_mtime > bbg_file_time)\n \t{\n-\t  fnotice (stderr, \"%s:source file is newer than graph file `%s'\\n\",\n+\t  fnotice (stderr, \"%s:source file is newer than graph file '%s'\\n\",\n \t\t   src->name, bbg_file_name);\n \t  fprintf (gcov_file, \"%9s:%5d:Source is newer than graph\\n\",\n \t\t   \"-\", 0);"}, {"sha": "bf9096c799b03b617d3860ee00607a4f1e5d572d", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1,3 +1,7 @@\n+2004-11-09  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* objc-act.c: Use %q, %< and %> for quoting in diagnostics.\n+\n 2004-11-08  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR objc/16546"}, {"sha": "9e289936f262661789d6e9e1877cd5ccd213c783", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -750,7 +750,7 @@ objc_finish_implementation (void)\n       objc_implementation_context = NULL_TREE;\n     }\n   else\n-    warning (\"`@end' must appear in an @implementation context\");\n+    warning (\"%<@end%> must appear in an @implementation context\");\n }\n \n void\n@@ -898,7 +898,7 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n \n \t\t      if (!rproto)\n \t\t\twarning\n-\t\t\t  (\"object does not conform to the `%s' protocol\",\n+\t\t\t  (\"object does not conform to the %qs protocol\",\n \t\t\t   IDENTIFIER_POINTER (PROTOCOL_NAME (p)));\n \t\t    }\n \t\t  return 1;\n@@ -988,7 +988,7 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n \t\t    }\n \n \t\t  if (!rproto)\n-\t\t    warning (\"class `%s' does not implement the `%s' protocol\",\n+\t\t    warning (\"class %qs does not implement the %qs protocol\",\n \t\t\t     IDENTIFIER_POINTER (OBJC_TYPE_NAME (TREE_TYPE (rhs))),\n \t\t\t     IDENTIFIER_POINTER (PROTOCOL_NAME (p)));\n \t\t}\n@@ -1065,7 +1065,7 @@ objc_comptypes (tree lhs, tree rhs, int reflexive)\n \t\t\t}\n \t\t\n \t\t      if (!lproto)\n-\t\t\twarning (\"class `%s' does not implement the `%s' protocol\",\n+\t\t\twarning (\"class %qs does not implement the %qs protocol\",\n \t\t\t\t IDENTIFIER_POINTER (OBJC_TYPE_NAME\n \t\t\t\t\t\t     (TREE_TYPE (lhs))),\n \t\t\t\t IDENTIFIER_POINTER (PROTOCOL_NAME (p)));\n@@ -1171,7 +1171,7 @@ objc_check_decl (tree decl)\n   if (TREE_CODE (type) != RECORD_TYPE)\n     return;\n   if (OBJC_TYPE_NAME (type) && (type = objc_is_class_name (OBJC_TYPE_NAME (type))))\n-    error (\"statically allocated instance of Objective-C class `%s'\",\n+    error (\"statically allocated instance of Objective-C class %qs\",\n \t   IDENTIFIER_POINTER (type));\n }\n \n@@ -1228,7 +1228,7 @@ check_protocol_recursively (tree proto, tree list)\n \tpp = lookup_protocol (pp);\n \n       if (pp == proto)\n-\tfatal_error (\"protocol `%s' has circular dependency\",\n+\tfatal_error (\"protocol %qs has circular dependency\",\n \t\t     IDENTIFIER_POINTER (PROTOCOL_NAME (pp)));\n       if (pp)\n \tcheck_protocol_recursively (proto, PROTOCOL_LIST (pp));\n@@ -1250,7 +1250,7 @@ lookup_and_install_protocols (tree protocols)\n       tree p = lookup_protocol (ident);\n \n       if (!p)\n-\terror (\"cannot find protocol declaration for `%s'\",\n+\terror (\"cannot find protocol declaration for %qs\",\n \t       IDENTIFIER_POINTER (ident));\n       else\n \treturn_value = chainon (return_value,\n@@ -1646,16 +1646,16 @@ objc_build_string_object (tree string)\n       if (!constant_string_class\n \t  || !(constant_string_type\n \t       = CLASS_STATIC_TEMPLATE (constant_string_class)))\n-\terror (\"cannot find interface declaration for `%s'\",\n+\terror (\"cannot find interface declaration for %qs\",\n \t       IDENTIFIER_POINTER (constant_string_id));\n       /* The NSConstantString/NXConstantString ivar layout is now known.  */\n       else if (!check_string_class_template ())\n-\terror (\"interface `%s' does not have valid constant string layout\",\n+\terror (\"interface %qs does not have valid constant string layout\",\n \t       IDENTIFIER_POINTER (constant_string_id));\n       /* For the NeXT runtime, we can generate a literal reference\n \t to the string class, don't need to run a constructor.  */\n       else if (flag_next_runtime && !setup_string_decl ())\n-\terror (\"cannot find reference tag for class `%s'\",\n+\terror (\"cannot find reference tag for class %qs\",\n \t       IDENTIFIER_POINTER (constant_string_id));\n       else\n \t{\n@@ -2515,7 +2515,7 @@ objc_get_class_reference (tree ident)\n \n   if (!(ident = objc_is_class_name (ident)))\n     {\n-      error (\"`%s' is not an Objective-C class name or alias\",\n+      error (\"%qs is not an Objective-C class name or alias\",\n \t     IDENTIFIER_POINTER (orig_ident));\n       return error_mark_node;\n     }\n@@ -2635,9 +2635,9 @@ objc_declare_alias (tree alias_ident, tree class_ident)\n #endif /* OBJCPLUS */\n \n   if (!(underlying_class = objc_is_class_name (class_ident)))\n-    warning (\"cannot find class `%s'\", IDENTIFIER_POINTER (class_ident));\n+    warning (\"cannot find class %qs\", IDENTIFIER_POINTER (class_ident));\n   else if (objc_is_class_name (alias_ident))\n-    warning (\"class `%s' already exists\", IDENTIFIER_POINTER (alias_ident));\n+    warning (\"class %qs already exists\", IDENTIFIER_POINTER (alias_ident));\n   else\n     alias_chain = tree_cons (underlying_class, alias_ident, alias_chain);\n }\n@@ -2662,7 +2662,7 @@ objc_declare_class (tree ident_list)\n \t\n \t  if (record && ! TREE_STATIC_TEMPLATE (record))\n \t    {\n-\t      error (\"`%s' redeclared as different kind of symbol\",\n+\t      error (\"%qs redeclared as different kind of symbol\",\n \t\t     IDENTIFIER_POINTER (ident));\n \t      error (\"%Jprevious declaration of '%D'\",\n \t\t     record, record);\n@@ -2780,7 +2780,7 @@ objc_get_class_ivars (tree class_name)\n   if (interface)\n     return get_class_ivars (interface);\n \n-  error (\"cannot find interface declaration for `%s'\",\n+  error (\"cannot find interface declaration for %qs\",\n \t IDENTIFIER_POINTER (class_name));\n \n   return error_mark_node;\n@@ -3290,7 +3290,7 @@ objc_finish_try_stmt (void)\n   tree stmt;\n \n   if (c->catch_list == NULL && c->finally_body == NULL)\n-    error (\"`@try' without `@catch' or `@finally'\");\n+    error (\"%<@try%> without %<@catch%> or %<@finally%>\");\n \n   /* If we're doing Darwin setjmp exceptions, build the big nasty.  */\n   if (flag_objc_sjlj_exceptions)\n@@ -4226,7 +4226,7 @@ synth_forward_declarations (void)\n static void\n error_with_ivar (const char *message, tree decl)\n {\n-  error (\"%J%s `%s'\", decl,\n+  error (\"%J%s %qs\", decl,\n          message, gen_declaration (decl));\n \n }\n@@ -5326,7 +5326,7 @@ check_duplicates (hash hsh, int methods, int is_class)\n \t     different types.  */\n \t  attr loop;\n \n-\t  warning (\"multiple %s named `%c%s' found\",\n+\t  warning (\"multiple %s named %<%c%s%> found\",\n \t\t   methods ? \"methods\" : \"selectors\",\n \t\t   (is_class ? '+' : '-'),\n \t\t   IDENTIFIER_POINTER (METHOD_SEL_NAME (meth)));\n@@ -5551,7 +5551,7 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t{\n \t  if (!CLASS_SUPER_NAME (implementation_template))\n \t    {\n-\t      error (\"no super class declared in @interface for `%s'\",\n+\t      error (\"no super class declared in @interface for %qs\",\n \t\t     IDENTIFIER_POINTER (CLASS_NAME (implementation_template)));\n \t      return error_mark_node;\n \t    }\n@@ -5592,7 +5592,7 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t\t= lookup_method_in_protocol_list (rprotos, sel_name, 0);\n \n \t      if (method_prototype)\n-\t\twarning (\"found `-%s' instead of `+%s' in protocol(s)\",\n+\t\twarning (\"found %<-%s%> instead of %<+%s%> in protocol(s)\",\n \t\t\t IDENTIFIER_POINTER (sel_name),\n \t\t\t IDENTIFIER_POINTER (sel_name));\n \t    }\n@@ -5651,7 +5651,7 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t}\n       else\n \t{\n-\t  warning (\"invalid receiver type `%s'\",\n+\t  warning (\"invalid receiver type %qs\",\n \t\t   gen_type_name (orig_rtype));\n \t  /* After issuing the \"invalid receiver\" warning, perform method\n \t     lookup as if we were messaging 'id'.  */\n@@ -5666,7 +5666,7 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n   if (!method_prototype)\n     {\n       if (rprotos)\n-\twarning (\"`%c%s' not found in protocol(s)\",\n+\twarning (\"%<%c%s%> not found in protocol(s)\",\n \t\t (class_tree ? '+' : '-'),\n \t\t IDENTIFIER_POINTER (sel_name));\n \n@@ -5680,23 +5680,23 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n       static bool warn_missing_methods = false;\n \n       if (rtype)\n-\twarning (\"`%s' may not respond to `%c%s'\",\n+\twarning (\"%qs may not respond to %<%c%s%>\",\n \t\t IDENTIFIER_POINTER (OBJC_TYPE_NAME (rtype)),\n \t\t (class_tree ? '+' : '-'),\n \t\t IDENTIFIER_POINTER (sel_name));\n       /* If we are messaging an 'id' or 'Class' object and made it here,\n \t then we have failed to find _any_ instance or class method,\n \t respectively.  */\n       else\n-\twarning (\"no `%c%s' method found\",\n+\twarning (\"no %<%c%s%> method found\",\n \t\t (class_tree ? '+' : '-'),\n \t\t IDENTIFIER_POINTER (sel_name));\n \n       if (!warn_missing_methods)\n \t{\n \t  warning (\"(Messages without a matching method signature\");\n-\t  warning (\"will be assumed to return `id' and accept\");\n-\t  warning (\"`...' as arguments.)\");\n+\t  warning (\"will be assumed to return %<id%> and accept\");\n+\t  warning (\"%<...%> as arguments.)\");\n \t  warn_missing_methods = true;\n \t}\n     }\n@@ -5828,7 +5828,7 @@ objc_build_protocol_expr (tree protoname)\n \n   if (!p)\n     {\n-      error (\"cannot find protocol declaration for `%s'\",\n+      error (\"cannot find protocol declaration for %qs\",\n \t     IDENTIFIER_POINTER (protoname));\n       return error_mark_node;\n     }\n@@ -5927,7 +5927,7 @@ objc_build_selector_expr (tree selnamelist)\n       /* If still not found, print out a warning.  */\n       if (!hsh)\n \t{\n-\t  warning (\"undeclared selector `%s'\", IDENTIFIER_POINTER (selname));\n+\t  warning (\"undeclared selector %qs\", IDENTIFIER_POINTER (selname));\n \t}\n     }\n \n@@ -5969,7 +5969,7 @@ build_ivar_reference (tree id)\n \t to an instance variable.  It's better to catch the cases\n \t where this is done unknowingly than to support the above\n \t paradigm.  */\n-      warning (\"instance variable `%s' accessed in class method\",\n+      warning (\"instance variable %qs accessed in class method\",\n \t       IDENTIFIER_POINTER (id));\n       self_decl = convert (objc_instance_type, self_decl); /* cast */\n     }\n@@ -6181,7 +6181,7 @@ objc_add_method (tree class, tree method, int is_class)\n       if ((TREE_CODE (class) == CLASS_INTERFACE_TYPE\n \t   || TREE_CODE (class) == CATEGORY_INTERFACE_TYPE)\n \t  && !comp_proto_with_proto (method, mth))\n-\terror (\"duplicate declaration of method `%c%s'\",\n+\terror (\"duplicate declaration of method %<%c%s%>\",\n \t\tis_class ? '+' : '-', \n \t\tIDENTIFIER_POINTER (METHOD_SEL_NAME (mth)));\n     }\n@@ -6226,7 +6226,7 @@ add_category (tree class, tree category)\n \n   if (cat)\n     {\n-      warning (\"duplicate interface declaration for category `%s(%s)'\",\n+      warning (\"duplicate interface declaration for category %<%s(%s)%>\",\n \t       IDENTIFIER_POINTER (CLASS_NAME (class)),\n \t       IDENTIFIER_POINTER (CLASS_SUPER_NAME (category)));\n     }\n@@ -6253,7 +6253,7 @@ add_instance_variable (tree class, int public, tree field_decl)\n #ifdef OBJCPLUS\n   if (TREE_CODE (field_type) == REFERENCE_TYPE)\n     {\n-      error (\"illegal reference type specified for instance variable `%s'\",\n+      error (\"illegal reference type specified for instance variable %qs\",\n \t     ivar_name);\n       /* Return class as is without adding this ivar.  */\n       return class;\n@@ -6264,7 +6264,7 @@ add_instance_variable (tree class, int public, tree field_decl)\n       || TYPE_SIZE (field_type) == error_mark_node)\n       /* 'type[0]' is allowed, but 'type[]' is not! */\n     {\n-      error (\"instance variable `%s' has unknown size\", ivar_name);\n+      error (\"instance variable %qs has unknown size\", ivar_name);\n       /* Return class as is without adding this ivar.  */\n       return class;\n     }\n@@ -6278,18 +6278,18 @@ add_instance_variable (tree class, int public, tree field_decl)\n       const char *type_name = IDENTIFIER_POINTER (OBJC_TYPE_NAME (field_type));\n       if(TYPE_POLYMORPHIC_P (field_type)) {\n         /* vtable pointers are Real Bad(tm), since Obj-C cannot initialize them */\n-        error (\"type `%s' has virtual member functions\", type_name);\n-        error (\"illegal aggregate type `%s' specified for instance variable `%s'\",\n+        error (\"type %qs has virtual member functions\", type_name);\n+        error (\"illegal aggregate type %qs specified for instance variable %qs\",\n   \t       type_name, ivar_name);\n         /* Return class as is without adding this ivar.  */\n         return class;\n       }\n       /* user-defined constructors and destructors are not known to Obj-C and\n          hence will not be called.  This may or may not be a problem. */\n       if (TYPE_NEEDS_CONSTRUCTING (field_type))\n-        warning (\"type `%s' has a user-defined constructor\", type_name);\n+        warning (\"type %qs has a user-defined constructor\", type_name);\n       if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (field_type))\n-        warning (\"type `%s' has a user-defined destructor\", type_name);\n+        warning (\"type %qs has a user-defined destructor\", type_name);\n       warning (\"C++ constructors and destructors will not be invoked for Objective-C fields\");\n     }\n #endif\n@@ -6356,7 +6356,7 @@ objc_is_public (tree expr, tree identifier)\n \t{\n \t  if (!lookup_interface (OBJC_TYPE_NAME (basetype)))\n \t    {\n-\t      error (\"cannot find interface declaration for `%s'\",\n+\t      error (\"cannot find interface declaration for %qs\",\n \t\t     IDENTIFIER_POINTER (OBJC_TYPE_NAME (basetype)));\n \t      return 0;\n \t    }\n@@ -6380,7 +6380,7 @@ objc_is_public (tree expr, tree identifier)\n \t\t  int private = is_private (decl);\n \n \t\t  if (private)\n-\t\t    error (\"instance variable `%s' is declared private\",\n+\t\t    error (\"instance variable %qs is declared private\",\n \t\t\t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n \t\t  return !private;\n \t\t}\n@@ -6389,14 +6389,14 @@ objc_is_public (tree expr, tree identifier)\n \t\t non-@public ivars.  We will let this slide for now...  */\n \t      if (!objc_method_context)\n \t      {\n-\t\twarning (\"instance variable `%s' is %s; \"\n+\t\twarning (\"instance variable %qs is %s; \"\n \t\t\t \"this will be a hard error in the future\",\n \t\t\t IDENTIFIER_POINTER (identifier),\n \t\t\t TREE_PRIVATE (decl) ? \"@private\" : \"@protected\");\n \t\treturn 1;\n \t      }\n \t\t\n-\t      error (\"instance variable `%s' is declared %s\",\n+\t      error (\"instance variable %qs is declared %s\",\n \t\t     IDENTIFIER_POINTER (identifier),\n \t\t     TREE_PRIVATE (decl) ? \"private\" : \"protected\");\n \t      return 0;\n@@ -6406,7 +6406,7 @@ objc_is_public (tree expr, tree identifier)\n       else if (objc_implementation_context && (basetype == objc_object_reference))\n \t{\n \t  expr = convert (uprivate_record, expr);\n-\t  warning (\"static access to object of type `id'\");\n+\t  warning (\"static access to object of type %<id%>\");\n \t}\n     }\n \n@@ -6428,16 +6428,16 @@ check_methods (tree chain, tree list, int mtype)\n \t    {\n \t      if (TREE_CODE (objc_implementation_context)\n \t\t  == CLASS_IMPLEMENTATION_TYPE)\n-\t\twarning (\"incomplete implementation of class `%s'\",\n+\t\twarning (\"incomplete implementation of class %qs\",\n \t\t\t IDENTIFIER_POINTER (CLASS_NAME (objc_implementation_context)));\n \t      else if (TREE_CODE (objc_implementation_context)\n \t\t       == CATEGORY_IMPLEMENTATION_TYPE)\n-\t\twarning (\"incomplete implementation of category `%s'\",\n+\t\twarning (\"incomplete implementation of category %qs\",\n \t\t\t IDENTIFIER_POINTER (CLASS_SUPER_NAME (objc_implementation_context)));\n \t      first = 0;\n \t    }\n \n-\t  warning (\"method definition for `%c%s' not found\",\n+\t  warning (\"method definition for %<%c%s%> not found\",\n \t\t   mtype, IDENTIFIER_POINTER (METHOD_SEL_NAME (chain)));\n \t}\n \n@@ -6516,17 +6516,17 @@ check_methods_accessible (tree chain, tree context, int mtype)\n \t    {\n \t      if (TREE_CODE (objc_implementation_context)\n \t\t  == CLASS_IMPLEMENTATION_TYPE)\n-\t\twarning (\"incomplete implementation of class `%s'\",\n+\t\twarning (\"incomplete implementation of class %qs\",\n \t\t\t IDENTIFIER_POINTER\n \t\t\t   (CLASS_NAME (objc_implementation_context)));\n \t      else if (TREE_CODE (objc_implementation_context)\n \t\t       == CATEGORY_IMPLEMENTATION_TYPE)\n-\t\twarning (\"incomplete implementation of category `%s'\",\n+\t\twarning (\"incomplete implementation of category %qs\",\n \t\t\t IDENTIFIER_POINTER\n \t\t\t   (CLASS_SUPER_NAME (objc_implementation_context)));\n \t      first = 0;\n \t    }\n-\t  warning (\"method definition for `%c%s' not found\",\n+\t  warning (\"method definition for %<%c%s%> not found\",\n \t\t   mtype, IDENTIFIER_POINTER (METHOD_SEL_NAME (chain)));\n \t}\n \n@@ -6567,7 +6567,7 @@ check_protocol (tree p, const char *type, const char *name)\n \t}\n \n       if (!f1 || !f2)\n-\twarning (\"%s `%s' does not fully implement the `%s' protocol\",\n+\twarning (\"%s %qs does not fully implement the %qs protocol\",\n \t\t type, name, IDENTIFIER_POINTER (PROTOCOL_NAME (p)));\n     }\n \n@@ -6625,7 +6625,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \n   if (objc_implementation_context)\n     {\n-      warning (\"`@end' missing in implementation context\");\n+      warning (\"%<@end%> missing in implementation context\");\n       finish_class (objc_implementation_context);\n       objc_ivar_chain = NULL_TREE;\n       objc_implementation_context = NULL_TREE;\n@@ -6638,7 +6638,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n   if ((code == CLASS_INTERFACE_TYPE || code == CLASS_IMPLEMENTATION_TYPE)\n       && super_name && !objc_is_class_name (super_name))\n     {\n-      error (\"cannot find interface declaration for `%s', superclass of `%s'\",\n+      error (\"cannot find interface declaration for %qs, superclass of %qs\",\n \t     IDENTIFIER_POINTER (super_name),\n \t     IDENTIFIER_POINTER (class_name));\n       super_name = NULL_TREE;\n@@ -6651,7 +6651,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n   if (! objc_is_class_name (class_name)\n       && (decl = lookup_name (class_name)))\n     {\n-      error (\"`%s' redeclared as different kind of symbol\",\n+      error (\"%qs redeclared as different kind of symbol\",\n \t     IDENTIFIER_POINTER (class_name));\n       error (\"%Jprevious declaration of '%D'\",\n \t     decl, decl);\n@@ -6665,7 +6665,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n         for (chain = implemented_classes; chain; chain = TREE_CHAIN (chain))\n            if (TREE_VALUE (chain) == class_name)\n \t     {\n-\t       error (\"reimplementation of class `%s'\",\n+\t       error (\"reimplementation of class %qs\",\n \t\t      IDENTIFIER_POINTER (class_name));\n \t       return error_mark_node;\n \t     }\n@@ -6682,7 +6682,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \n       if (!(implementation_template = lookup_interface (class_name)))\n         {\n-\t  warning (\"cannot find interface declaration for `%s'\",\n+\t  warning (\"cannot find interface declaration for %qs\",\n \t\t   IDENTIFIER_POINTER (class_name));\n \t  add_class (implementation_template = objc_implementation_context);\n         }\n@@ -6696,9 +6696,9 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \t  tree previous_name = CLASS_SUPER_NAME (implementation_template);\n           const char *const name =\n \t    previous_name ? IDENTIFIER_POINTER (previous_name) : \"\";\n-\t  error (\"conflicting super class name `%s'\",\n+\t  error (\"conflicting super class name %qs\",\n \t\t IDENTIFIER_POINTER (super_name));\n-\t  error (\"previous declaration of `%s'\", name);\n+\t  error (\"previous declaration of %qs\", name);\n         }\n \n       else if (! super_name)\n@@ -6712,9 +6712,9 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n     {\n       if (lookup_interface (class_name))\n #ifdef OBJCPLUS\n-\terror (\"duplicate interface declaration for class `%s'\",\n+\terror (\"duplicate interface declaration for class %qs\",\n #else\n-\twarning (\"duplicate interface declaration for class `%s'\",\n+\twarning (\"duplicate interface declaration for class %qs\",\n #endif\t\n         IDENTIFIER_POINTER (class_name));\n       else\n@@ -6735,7 +6735,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \n       if (!(class_category_is_assoc_with = lookup_interface (class_name)))\n \t{\n-\t  error (\"cannot find interface declaration for `%s'\",\n+\t  error (\"cannot find interface declaration for %qs\",\n \t\t IDENTIFIER_POINTER (class_name));\n \t  exit (FATAL_EXIT_CODE);\n \t}\n@@ -6760,7 +6760,7 @@ start_class (enum tree_code code, tree class_name, tree super_name,\n \n       if (!(implementation_template = lookup_interface (class_name)))\n         {\n-\t  error (\"cannot find interface declaration for `%s'\",\n+\t  error (\"cannot find interface declaration for %qs\",\n \t\t IDENTIFIER_POINTER (class_name));\n \t  exit (FATAL_EXIT_CODE);\n         }\n@@ -6974,7 +6974,7 @@ start_protocol (enum tree_code code, tree name, tree list)\n     }\n   else\n     {\n-      warning (\"duplicate declaration for protocol `%s'\",\n+      warning (\"duplicate declaration for protocol %qs\",\n \t       IDENTIFIER_POINTER (name));\n     }\n   return protocol;\n@@ -7490,7 +7490,7 @@ static void\n warn_with_method (const char *message, int mtype, tree method)\n {\n   /* Add a readable method name to the warning.  */\n-  warning (\"%J%s `%c%s'\", method,\n+  warning (\"%J%s %<%c%s%>\", method,\n            message, mtype, gen_method_decl (method));\n }\n \n@@ -7780,7 +7780,7 @@ get_super_receiver (void)\n \t  /* Barf if super used in a category of Object.  */\n \t  if (!super_name)\n \t    {\n-\t      error (\"no super class declared in interface for `%s'\",\n+\t      error (\"no super class declared in interface for %qs\",\n \t\t    IDENTIFIER_POINTER (CLASS_NAME (implementation_template)));\n \t      return error_mark_node;\n \t    }\n@@ -7874,7 +7874,7 @@ lang_report_error_function (tree decl)\n {\n   if (objc_method_context)\n     {\n-      fprintf (stderr, \"In method `%s'\\n\",\n+      fprintf (stderr, \"In method %qs\\n\",\n \t       IDENTIFIER_POINTER (METHOD_SEL_NAME (objc_method_context)));\n       return 1;\n     }\n@@ -8173,7 +8173,7 @@ finish_objc (void)\n   /* A missing @end may not be detected by the parser.  */\n   if (objc_implementation_context)\n     {\n-      warning (\"`@end' missing in implementation context\");\n+      warning (\"%<@end%> missing in implementation context\");\n       finish_class (objc_implementation_context);\n       objc_ivar_chain = NULL_TREE;\n       objc_implementation_context = NULL_TREE;"}, {"sha": "21b5b7bc0e397a81ca4d331de75a48ce9df53ab0", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1034,7 +1034,7 @@ handle_param (const char *carg)\n     {\n       value = integral_argument (equal + 1);\n       if (value == -1)\n-\terror (\"invalid --param value `%s'\", equal + 1);\n+\terror (\"invalid --param value %qs\", equal + 1);\n       else\n \t{\n \t  *equal = '\\0';"}, {"sha": "8a9b91c9bdbbf0a7198ef9bd57d9016595e57f42", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -231,7 +231,7 @@ struct pretty_print_info\n                  IDENTIFIER_POINTER (T) + IDENTIFIER_LENGTH (T))\n \n #define pp_unsupported_tree(PP, T)                         \\\n-  pp_verbatim (pp_base (PP), \"#`%s' not supported by %s#\", \\\n+  pp_verbatim (pp_base (PP), \"#%qs not supported by %s#\", \\\n                tree_code_name[(int) TREE_CODE (T)], __FUNCTION__)\n \n "}, {"sha": "093e4400817223498375b58a3982f710b5e78649", "filename": "gcc/protoize.c", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -579,7 +579,7 @@ safe_write (int desc, void *ptr, int len, const char *out_fname)\n \tif (errno_val == EINTR)\n \t  continue;\n #endif\n-\tnotice (\"%s: error writing file `%s': %s\\n\",\n+\tnotice (\"%s: error writing file '%s': %s\\n\",\n \t\tpname, shortpath (NULL, out_fname), xstrerror (errno_val));\n \treturn;\n       }\n@@ -732,23 +732,23 @@ file_normally_convertible (const char *path)\n   if (access (path, R_OK))\n     {\n       if (!quiet_flag)\n-\tnotice (\"%s: warning: no read access for file `%s'\\n\",\n+\tnotice (\"%s: warning: no read access for file '%s'\\n\",\n \t\tpname, shortpath (NULL, path));\n       return 0;\n     }\n \n   if (access (path, W_OK))\n     {\n       if (!quiet_flag)\n-\tnotice (\"%s: warning: no write access for file `%s'\\n\",\n+\tnotice (\"%s: warning: no write access for file '%s'\\n\",\n \t\tpname, shortpath (NULL, path));\n       return 0;\n     }\n \n   if (access (dir_name, W_OK))\n     {\n       if (!quiet_flag)\n-\tnotice (\"%s: warning: no write access for dir containing `%s'\\n\",\n+\tnotice (\"%s: warning: no write access for dir containing '%s'\\n\",\n \t\tpname, shortpath (NULL, path));\n       return 0;\n     }\n@@ -1633,7 +1633,7 @@ save_def_or_dec (const char *l, int is_syscalls)\n \t  {\n \t    if (strcmp (def_dec_p->ansi_decl, other->ansi_decl))\n \t      {\n-\t        notice (\"%s:%d: declaration of function `%s' takes different forms\\n\",\n+\t        notice (\"%s:%d: declaration of function '%s' takes different forms\\n\",\n \t\t\tdef_dec_p->file->hash_entry->symbol,\n \t\t\tdef_dec_p->line,\n \t\t\tdef_dec_p->hash_entry->symbol);\n@@ -1888,7 +1888,7 @@ gen_aux_info_file (const char *base_filename)\n     concat (compile_params[input_file_name_index], aux_info_suffix, NULL);\n \n   if (!quiet_flag)\n-    notice (\"%s: compiling `%s'\\n\",\n+    notice (\"%s: compiling '%s'\\n\",\n \t    pname, compile_params[input_file_name_index]);\n \n   {\n@@ -1973,7 +1973,7 @@ start_over: ;\n \t{\n \t  if (is_syscalls)\n \t    {\n-\t      notice (\"%s: warning: missing SYSCALLS file `%s'\\n\",\n+\t      notice (\"%s: warning: missing SYSCALLS file '%s'\\n\",\n \t\t      pname, aux_info_filename);\n \t      return;\n \t    }\n@@ -1982,7 +1982,7 @@ start_over: ;\n       else\n \t{\n \t  int errno_val = errno;\n-\t  notice (\"%s: can't read aux info file `%s': %s\\n\",\n+\t  notice (\"%s: can't read aux info file '%s': %s\\n\",\n \t\t  pname, shortpath (NULL, aux_info_filename),\n \t\t  xstrerror (errno_val));\n \t  errors++;\n@@ -2011,7 +2011,7 @@ start_over: ;\n       if (access (aux_info_filename, R_OK) == -1)\n \t{\n \t  int errno_val = errno;\n-\t  notice (\"%s: can't read aux info file `%s': %s\\n\",\n+\t  notice (\"%s: can't read aux info file '%s': %s\\n\",\n \t\t  pname, shortpath (NULL, aux_info_filename),\n \t\t  xstrerror (errno_val));\n \t  errors++;\n@@ -2027,7 +2027,7 @@ start_over: ;\n     if (stat (aux_info_filename, &stat_buf) == -1)\n       {\n \tint errno_val = errno;\n-\tnotice (\"%s: can't get status of aux info file `%s': %s\\n\",\n+\tnotice (\"%s: can't get status of aux info file '%s': %s\\n\",\n \t\tpname, shortpath (NULL, aux_info_filename),\n \t\txstrerror (errno_val));\n \terrors++;\n@@ -2055,7 +2055,7 @@ start_over: ;\n \tif (stat (base_source_filename, &stat_buf) == -1)\n \t  {\n \t    int errno_val = errno;\n-\t    notice (\"%s: can't get status of aux info file `%s': %s\\n\",\n+\t    notice (\"%s: can't get status of aux info file '%s': %s\\n\",\n \t\t    pname, shortpath (NULL, base_source_filename),\n \t\t    xstrerror (errno_val));\n \t    errors++;\n@@ -2083,7 +2083,7 @@ start_over: ;\n     if ((aux_info_file = open (aux_info_filename, fd_flags, 0444 )) == -1)\n       {\n \tint errno_val = errno;\n-\tnotice (\"%s: can't open aux info file `%s' for reading: %s\\n\",\n+\tnotice (\"%s: can't open aux info file '%s' for reading: %s\\n\",\n \t\tpname, shortpath (NULL, aux_info_filename),\n \t\txstrerror (errno_val));\n \treturn;\n@@ -2101,7 +2101,7 @@ start_over: ;\n \t(int) aux_info_size)\n       {\n \tint errno_val = errno;\n-\tnotice (\"%s: error reading aux info file `%s': %s\\n\",\n+\tnotice (\"%s: error reading aux info file '%s': %s\\n\",\n \t\tpname, shortpath (NULL, aux_info_filename),\n \t\txstrerror (errno_val));\n \tfree (aux_info_base);\n@@ -2114,7 +2114,7 @@ start_over: ;\n     if (close (aux_info_file))\n       {\n \tint errno_val = errno;\n-\tnotice (\"%s: error closing aux info file `%s': %s\\n\",\n+\tnotice (\"%s: error closing aux info file '%s': %s\\n\",\n \t\tpname, shortpath (NULL, aux_info_filename),\n \t\txstrerror (errno_val));\n \tfree (aux_info_base);\n@@ -2130,7 +2130,7 @@ start_over: ;\n     if (unlink (aux_info_filename) == -1)\n       {\n \tint errno_val = errno;\n-\tnotice (\"%s: can't delete aux info file `%s': %s\\n\",\n+\tnotice (\"%s: can't delete aux info file '%s': %s\\n\",\n \t\tpname, shortpath (NULL, aux_info_filename),\n \t\txstrerror (errno_val));\n       }\n@@ -2212,7 +2212,7 @@ start_over: ;\n \t\tif (keep_it && unlink (aux_info_filename) == -1)\n \t\t  {\n \t\t    int errno_val = errno;\n-\t            notice (\"%s: can't delete file `%s': %s\\n\",\n+\t            notice (\"%s: can't delete file '%s': %s\\n\",\n \t\t\t    pname, shortpath (NULL, aux_info_filename),\n \t\t\t    xstrerror (errno_val));\n \t            return;\n@@ -2290,7 +2290,7 @@ rename_c_file (const hash_table_entry *hp)\n   if (rename (filename, new_filename) == -1)\n     {\n       int errno_val = errno;\n-      notice (\"%s: warning: can't rename file `%s' to `%s': %s\\n\",\n+      notice (\"%s: warning: can't rename file '%s' to '%s': %s\\n\",\n \t      pname, shortpath (NULL, filename),\n \t      shortpath (NULL, new_filename), xstrerror (errno_val));\n       errors++;\n@@ -2451,7 +2451,7 @@ find_extern_def (const def_dec_info *head, const def_dec_info *user)\n \t  {\n \t    extern_def_p = dd_p;\t/* save a pointer to the definition */\n \t    if (!quiet_flag)\n-\t      notice (\"%s: warning: using formals list from %s(%d) for function `%s'\\n\",\n+\t      notice (\"%s: warning: using formals list from %s(%d) for function '%s'\\n\",\n \t\t      pname,\n \t\t      shortpath (NULL, dd_p->file->hash_entry->symbol),\n \t\t      dd_p->line, dd_p->hash_entry->symbol);\n@@ -2491,13 +2491,13 @@ find_extern_def (const def_dec_info *head, const def_dec_info *user)\n \t\t*p++ = '?';\n \t        strcpy (p, \");\");\n \n-\t        notice (\"%s: %d: `%s' used but missing from SYSCALLS\\n\",\n+\t        notice (\"%s: %d: '%s' used but missing from SYSCALLS\\n\",\n \t\t\tshortpath (NULL, file), user->line,\n \t\t\tneeded+7);\t/* Don't print \"extern \" */\n \t      }\n #if 0\n \t    else\n-\t      notice (\"%s: %d: warning: no extern definition for `%s'\\n\",\n+\t      notice (\"%s: %d: warning: no extern definition for '%s'\\n\",\n \t\t      shortpath (NULL, file), user->line,\n \t\t      user->hash_entry->symbol);\n #endif\n@@ -2527,13 +2527,13 @@ find_static_definition (const def_dec_info *user)\n   if (num_static_defs == 0)\n     {\n       if (!quiet_flag)\n-\tnotice (\"%s: warning: no static definition for `%s' in file `%s'\\n\",\n+\tnotice (\"%s: warning: no static definition for '%s' in file '%s'\\n\",\n \t\tpname, head->hash_entry->symbol,\n \t\tshortpath (NULL, user->file->hash_entry->symbol));\n     }\n   else if (num_static_defs > 1)\n     {\n-      notice (\"%s: multiple static defs of `%s' in file `%s'\\n\",\n+      notice (\"%s: multiple static defs of '%s' in file '%s'\\n\",\n \t      pname, head->hash_entry->symbol,\n \t      shortpath (NULL, user->file->hash_entry->symbol));\n       return NULL;\n@@ -2917,7 +2917,7 @@ edit_fn_declaration (const def_dec_info *def_dec_p,\n   if (setjmp (source_confusion_recovery))\n     {\n       restore_pointers ();\n-      notice (\"%s: declaration of function `%s' not converted\\n\",\n+      notice (\"%s: declaration of function '%s' not converted\\n\",\n \t      pname, function_to_edit);\n       return;\n     }\n@@ -3040,7 +3040,7 @@ edit_fn_declaration (const def_dec_info *def_dec_p,\n       else\n \t{\n \t  if (!quiet_flag)\n-\t    notice (\"%s: warning: too many parameter lists in declaration of `%s'\\n\",\n+\t    notice (\"%s: warning: too many parameter lists in declaration of '%s'\\n\",\n \t\t    pname, def_dec_p->hash_entry->symbol);\n \t  check_source (0, end_formals);  /* leave the declaration intact */\n \t}\n@@ -3061,7 +3061,7 @@ edit_fn_declaration (const def_dec_info *def_dec_p,\n \t    if (this_f_list_chain_item)\n \t      {\n \t\tif (!quiet_flag)\n-\t\t  notice (\"\\n%s: warning: too few parameter lists in declaration of `%s'\\n\",\n+\t\t  notice (\"\\n%s: warning: too few parameter lists in declaration of '%s'\\n\",\n \t\t\t  pname, def_dec_p->hash_entry->symbol);\n \t\tcheck_source (0, start_formals); /* leave the decl intact */\n \t      }\n@@ -3157,7 +3157,7 @@ edit_formals_lists (const char *end_formals, unsigned int f_list_count,\n       if (func_name_len != strlen (expected)\n \t  || strncmp (func_name_start, expected, func_name_len))\n \t{\n-\t  notice (\"%s: %d: warning: found `%s' but expected `%s'\\n\",\n+\t  notice (\"%s: %d: warning: found '%s' but expected '%s'\\n\",\n \t\t  shortpath (NULL, def_dec_p->file->hash_entry->symbol),\n \t\t  identify_lineno (func_name_start),\n \t\t  dupnstr (func_name_start, func_name_len),\n@@ -3332,7 +3332,7 @@ add_local_decl (const def_dec_info *def_dec_p, const char *clean_text_p)\n   if (setjmp (source_confusion_recovery))\n     {\n       restore_pointers ();\n-      notice (\"%s: local declaration for function `%s' not inserted\\n\",\n+      notice (\"%s: local declaration for function '%s' not inserted\\n\",\n \t      pname, function_to_edit);\n       return;\n     }\n@@ -3359,7 +3359,7 @@ add_local_decl (const def_dec_info *def_dec_p, const char *clean_text_p)\n   if (*start_of_block != '{')\n     {\n       if (!quiet_flag)\n-\tnotice (\"\\n%s: %d: warning: can't add declaration of `%s' into macro call\\n\",\n+\tnotice (\"\\n%s: %d: warning: can't add declaration of '%s' into macro call\\n\",\n \t  def_dec_p->file->hash_entry->symbol, def_dec_p->line,\n \t  def_dec_p->hash_entry->symbol);\n       return;\n@@ -3431,7 +3431,7 @@ add_global_decls (const file_info *file_p, const char *clean_text_p)\n   if (setjmp (source_confusion_recovery))\n     {\n       restore_pointers ();\n-      notice (\"%s: global declarations for file `%s' not inserted\\n\",\n+      notice (\"%s: global declarations for file '%s' not inserted\\n\",\n \t      pname, shortpath (NULL, file_p->hash_entry->symbol));\n       return;\n     }\n@@ -3520,7 +3520,7 @@ edit_fn_definition (const def_dec_info *def_dec_p, const char *clean_text_p)\n   if (setjmp (source_confusion_recovery))\n     {\n       restore_pointers ();\n-      notice (\"%s: definition of function `%s' not converted\\n\",\n+      notice (\"%s: definition of function '%s' not converted\\n\",\n \t      pname, function_to_edit);\n       return;\n     }\n@@ -3550,7 +3550,7 @@ edit_fn_definition (const def_dec_info *def_dec_p, const char *clean_text_p)\n   if (edit_formals_lists (end_formals, def_dec_p->f_list_count, def_dec_p))\n     {\n       restore_pointers ();\n-      notice (\"%s: definition of function `%s' not converted\\n\",\n+      notice (\"%s: definition of function '%s' not converted\\n\",\n \t      pname, function_to_edit);\n       return;\n     }\n@@ -3865,7 +3865,7 @@ scan_for_missed_items (const file_info *file_p)\n \t\t\tgoto not_missed;\n \n #if 0\n-\t\t    notice (\"%s: found definition of `%s' at %s(%d)\\n\",\n+\t\t    notice (\"%s: found definition of '%s' at %s(%d)\\n\",\n \t\t\t    pname,\n \t\t\t    func_name,\n \t\t\t    shortpath (NULL, file_p->hash_entry->symbol),\n@@ -3881,7 +3881,7 @@ scan_for_missed_items (const file_info *file_p)\n \t\t    /* If we make it here, then we did not know about this\n \t\t       function definition.  */\n \n-\t\t    notice (\"%s: %d: warning: `%s' excluded by preprocessing\\n\",\n+\t\t    notice (\"%s: %d: warning: '%s' excluded by preprocessing\\n\",\n \t\t\t    shortpath (NULL, file_p->hash_entry->symbol),\n \t\t\t    identify_lineno (id_start), func_name);\n \t\t    notice (\"%s: function definition not converted\\n\",\n@@ -3942,18 +3942,18 @@ edit_file (const hash_table_entry *hp)\n \t  && !in_system_include_dir (convert_filename)\n #endif /* defined (UNPROTOIZE) */\n \t  )\n-\tnotice (\"%s: `%s' not converted\\n\",\n+\tnotice (\"%s: '%s' not converted\\n\",\n \t\tpname, shortpath (NULL, convert_filename));\n       return;\n     }\n \n   /* Let the user know what we are up to.  */\n \n   if (nochange_flag)\n-    notice (\"%s: would convert file `%s'\\n\",\n+    notice (\"%s: would convert file '%s'\\n\",\n \t    pname, shortpath (NULL, convert_filename));\n   else\n-    notice (\"%s: converting file `%s'\\n\",\n+    notice (\"%s: converting file '%s'\\n\",\n \t    pname, shortpath (NULL, convert_filename));\n   fflush (stderr);\n \n@@ -3963,7 +3963,7 @@ edit_file (const hash_table_entry *hp)\n   if (stat (convert_filename, &stat_buf) == -1)\n     {\n       int errno_val = errno;\n-      notice (\"%s: can't get status for file `%s': %s\\n\",\n+      notice (\"%s: can't get status for file '%s': %s\\n\",\n \t      pname, shortpath (NULL, convert_filename),\n \t      xstrerror (errno_val));\n       return;\n@@ -4005,7 +4005,7 @@ edit_file (const hash_table_entry *hp)\n     if ((input_file = open (convert_filename, fd_flags, 0444)) == -1)\n       {\n \tint errno_val = errno;\n-\tnotice (\"%s: can't open file `%s' for reading: %s\\n\",\n+\tnotice (\"%s: can't open file '%s' for reading: %s\\n\",\n \t\tpname, shortpath (NULL, convert_filename),\n \t\txstrerror (errno_val));\n \treturn;\n@@ -4020,7 +4020,7 @@ edit_file (const hash_table_entry *hp)\n       {\n \tint errno_val = errno;\n \tclose (input_file);\n-\tnotice (\"\\n%s: error reading input file `%s': %s\\n\",\n+\tnotice (\"\\n%s: error reading input file '%s': %s\\n\",\n \t\tpname, shortpath (NULL, convert_filename),\n \t\txstrerror (errno_val));\n \treturn;\n@@ -4054,7 +4054,7 @@ edit_file (const hash_table_entry *hp)\n     if ((clean_file = creat (clean_filename, 0666)) == -1)\n       {\n \tint errno_val = errno;\n-\tnotice (\"%s: can't create/open clean file `%s': %s\\n\",\n+\tnotice (\"%s: can't create/open clean file '%s': %s\\n\",\n \t\tpname, shortpath (NULL, clean_filename),\n \t\txstrerror (errno_val));\n \treturn;\n@@ -4159,15 +4159,15 @@ edit_file (const hash_table_entry *hp)\n       if (access (new_filename, F_OK) == 0)\n \t{\n \t  if (!quiet_flag)\n-\t    notice (\"%s: warning: file `%s' already saved in `%s'\\n\",\n+\t    notice (\"%s: warning: file '%s' already saved in '%s'\\n\",\n \t\t    pname,\n \t\t    shortpath (NULL, convert_filename),\n \t\t    shortpath (NULL, new_filename));\n \t}\n       else if (rename (convert_filename, new_filename) == -1)\n \t{\n \t  int errno_val = errno;\n-\t  notice (\"%s: can't link file `%s' to `%s': %s\\n\",\n+\t  notice (\"%s: can't link file '%s' to '%s': %s\\n\",\n \t\t  pname,\n \t\t  shortpath (NULL, convert_filename),\n \t\t  shortpath (NULL, new_filename),\n@@ -4182,7 +4182,7 @@ edit_file (const hash_table_entry *hp)\n       /* The file may have already been renamed.  */\n       if (errno_val != ENOENT)\n \t{\n-\t  notice (\"%s: can't delete file `%s': %s\\n\",\n+\t  notice (\"%s: can't delete file '%s': %s\\n\",\n \t\t  pname, shortpath (NULL, convert_filename),\n \t\t  xstrerror (errno_val));\n \t  return;\n@@ -4197,7 +4197,7 @@ edit_file (const hash_table_entry *hp)\n     if ((output_file = creat (convert_filename, 0666)) == -1)\n       {\n \tint errno_val = errno;\n-\tnotice (\"%s: can't create/open output file `%s': %s\\n\",\n+\tnotice (\"%s: can't create/open output file '%s': %s\\n\",\n \t\tpname, shortpath (NULL, convert_filename),\n \t\txstrerror (errno_val));\n \treturn;\n@@ -4230,7 +4230,7 @@ edit_file (const hash_table_entry *hp)\n   if (chmod (convert_filename, stat_buf.st_mode) == -1)\n     {\n       int errno_val = errno;\n-      notice (\"%s: can't change mode of file `%s': %s\\n\",\n+      notice (\"%s: can't change mode of file '%s': %s\\n\",\n \t      pname, shortpath (NULL, convert_filename),\n \t      xstrerror (errno_val));\n     }"}, {"sha": "c09f76e48a402372c983900fa393b9646a553e2e", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -759,7 +759,7 @@ check_asm_stack_operands (rtx insn)\n \t  if (operands_match_p (recog_data.operand[j], recog_data.operand[i]))\n \t    {\n \t      error_for_asm (insn,\n-\t\t\t     \"output operand %d must use `&' constraint\", j);\n+\t\t\t     \"output operand %d must use %<&%> constraint\", j);\n \t      malformed_asm = 1;\n \t    }\n       }"}, {"sha": "8dbde144c19422e1e559297b81dfed2edd04b079", "filename": "gcc/rtl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -469,7 +469,7 @@ rtl_check_failed_bounds (rtx r, int n, const char *file, int line,\n \t\t\t const char *func)\n {\n   internal_error\n-    (\"RTL check: access of elt %d of `%s' with last elt %d in %s, at %s:%d\",\n+    (\"RTL check: access of elt %d of '%s' with last elt %d in %s, at %s:%d\",\n      n, GET_RTX_NAME (GET_CODE (r)), GET_RTX_LENGTH (GET_CODE (r)) - 1,\n      func, trim_filename (file), line);\n }\n@@ -498,7 +498,7 @@ void\n rtl_check_failed_code1 (rtx r, enum rtx_code code, const char *file,\n \t\t\tint line, const char *func)\n {\n-  internal_error (\"RTL check: expected code `%s', have `%s' in %s, at %s:%d\",\n+  internal_error (\"RTL check: expected code '%s', have '%s' in %s, at %s:%d\",\n \t\t  GET_RTX_NAME (code), GET_RTX_NAME (GET_CODE (r)), func,\n \t\t  trim_filename (file), line);\n }\n@@ -508,7 +508,7 @@ rtl_check_failed_code2 (rtx r, enum rtx_code code1, enum rtx_code code2,\n \t\t\tconst char *file, int line, const char *func)\n {\n   internal_error\n-    (\"RTL check: expected code `%s' or `%s', have `%s' in %s, at %s:%d\",\n+    (\"RTL check: expected code '%s' or '%s', have '%s' in %s, at %s:%d\",\n      GET_RTX_NAME (code1), GET_RTX_NAME (code2), GET_RTX_NAME (GET_CODE (r)),\n      func, trim_filename (file), line);\n }\n@@ -530,7 +530,7 @@ rtl_check_failed_flag (const char *name, rtx r, const char *file,\n \t\t       int line, const char *func)\n {\n   internal_error\n-    (\"RTL flag check: %s used with unexpected rtx code `%s' in %s, at %s:%d\",\n+    (\"RTL flag check: %s used with unexpected rtx code '%s' in %s, at %s:%d\",\n      name, GET_RTX_NAME (GET_CODE (r)), func, trim_filename (file), line);\n }\n #endif /* ENABLE_RTL_FLAG_CHECKING */"}, {"sha": "c87ed688da6819cdb7365a5f5027b11c2fda527f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -1,3 +1,7 @@\n+2004-11-09  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/builtin-prefetch-1.c: Adjust expected messages.\n+\n 2004-11-08  Steve Ellcey  <sje@cup.hp.com>\n \n \t* testsuite/gcc.dg/uninit-H.c: Add ifdefs for __hppa__ and __ia64__."}, {"sha": "f3429eed260adf536337de65974eb84b3b09310f", "filename": "gcc/testsuite/gcc.dg/builtin-prefetch-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-prefetch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-prefetch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-prefetch-1.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -28,12 +28,12 @@ good (int *p)\n void\n bad (int *p)\n {\n-  __builtin_prefetch (p, -1, 0);  /* { dg-warning \"invalid second arg to __builtin_prefetch; using zero\" } */\n-  __builtin_prefetch (p, 2, 0);   /* { dg-warning \"invalid second arg to __builtin_prefetch; using zero\" } */\n-  __builtin_prefetch (p, bogus, 0);   /* { dg-warning \"invalid second arg to __builtin_prefetch; using zero\" } */\n-  __builtin_prefetch (p, 0, -1);  /* { dg-warning \"invalid third arg to __builtin_prefetch; using zero\" } */\n-  __builtin_prefetch (p, 0, 4);   /* { dg-warning \"invalid third arg to __builtin_prefetch; using zero\" } */\n-  __builtin_prefetch (p, 0, bogus);   /* { dg-warning \"invalid third arg to __builtin_prefetch; using zero\" } */\n+  __builtin_prefetch (p, -1, 0);  /* { dg-warning \"invalid second arg to '__builtin_prefetch'; using zero\" } */\n+  __builtin_prefetch (p, 2, 0);   /* { dg-warning \"invalid second arg to '__builtin_prefetch'; using zero\" } */\n+  __builtin_prefetch (p, bogus, 0);   /* { dg-warning \"invalid second arg to '__builtin_prefetch'; using zero\" } */\n+  __builtin_prefetch (p, 0, -1);  /* { dg-warning \"invalid third arg to '__builtin_prefetch'; using zero\" } */\n+  __builtin_prefetch (p, 0, 4);   /* { dg-warning \"invalid third arg to '__builtin_prefetch'; using zero\" } */\n+  __builtin_prefetch (p, 0, bogus);   /* { dg-warning \"invalid third arg to '__builtin_prefetch'; using zero\" } */\n }\n \n int"}, {"sha": "f09a8652880622ff897d4c11ad4cf78635cd8db0", "filename": "gcc/tlink.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e637a26797c8ffa178974764874683f12b12d4d/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=9e637a26797c8ffa178974764874683f12b12d4d", "patch": "@@ -472,7 +472,7 @@ recompile_files (void)\n \n       if (!f->args)\n \t{\n-\t  error (\"repository file `%s' does not contain command-line \"\n+\t  error (\"repository file '%s' does not contain command-line \"\n \t\t \"arguments\", f->key);\n \t  return 0;\n \t}\n@@ -693,7 +693,7 @@ scan_linker_output (const char *fname)\n \n       if (sym && sym->tweaked)\n \t{\n-\t  error (\"`%s' was assigned to `%s', but was not defined \"\n+\t  error (\"'%s' was assigned to '%s', but was not defined \"\n \t\t \"during recompilation, or vice versa\", \n \t\t sym->key, sym->file->key);\n \t  fclose (stream);"}]}