{"sha": "43653c334ddade011be1670ccdeac12b9f47e26e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM2NTNjMzM0ZGRhZGUwMTFiZTE2NzBjY2RlYWMxMmI5ZjQ3ZTI2ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-05-28T17:27:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-05-28T17:27:01Z"}, "message": "acinclude.m4: Define GLIBCXX_CHECK_GET_NPROCS and GLIBCXX_CHECK_SC_NPROCESSORS_ONLN.\n\n2011-05-28  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* acinclude.m4: Define GLIBCXX_CHECK_GET_NPROCS and\n\tGLIBCXX_CHECK_SC_NPROCESSORS_ONLN.\n\t* configure.ac: Use them. Increase minor version.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\t* include/std/thread (thread::hardware_concurrency): Remove inline\n\tdefinition.\n\t* src/thread.cc (thread::hardware_concurrency): Define.\n\t* config/abi/pre/gnu.ver: Export new symbol @3.4.17\n\t* testsuite/util/testsuite_abi.cc: Add new version.\n\t* testsuite/lib/libstdc++.exp (check_v3_target_nprocs): Add.\n\t* testsuite/lib/dg-options.exp (dg-require-nprocs): Add.\n\t* testsuite/30_threads/thread/members/hardware_concurrency.cc: Use\n\tdg-require-nprocs and verify hardware_concurrency returns non-zero.\n\nFrom-SVN: r174383", "tree": {"sha": "0ed25a637a039c2d5d231df811fefc8e6ec64536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ed25a637a039c2d5d231df811fefc8e6ec64536"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43653c334ddade011be1670ccdeac12b9f47e26e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43653c334ddade011be1670ccdeac12b9f47e26e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43653c334ddade011be1670ccdeac12b9f47e26e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43653c334ddade011be1670ccdeac12b9f47e26e/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e092158b65e33fe9e8f28f72c761eabde894ba78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e092158b65e33fe9e8f28f72c761eabde894ba78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e092158b65e33fe9e8f28f72c761eabde894ba78"}], "stats": {"total": 381, "additions": 374, "deletions": 7}, "files": [{"sha": "393b728e470b314b5a8c0f4d6f5ad44262c5bd73", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -1,3 +1,20 @@\n+2011-05-28  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* acinclude.m4: Define GLIBCXX_CHECK_GET_NPROCS and\n+\tGLIBCXX_CHECK_SC_NPROCESSORS_ONLN.\n+\t* configure.ac: Use them. Increase minor version.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\t* include/std/thread (thread::hardware_concurrency): Remove inline\n+\tdefinition.\n+\t* src/thread.cc (thread::hardware_concurrency): Define.\n+\t* config/abi/pre/gnu.ver: Export new symbol @3.4.17\n+\t* testsuite/util/testsuite_abi.cc: Add new version.\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_nprocs): Add.\n+\t* testsuite/lib/dg-options.exp (dg-require-nprocs): Add.\n+\t* testsuite/30_threads/thread/members/hardware_concurrency.cc: Use\n+\tdg-require-nprocs and verify hardware_concurrency returns non-zero.\n+\n 2011-05-28  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* testsuite/20_util/pointer_traits/pointer_to.cc: New."}, {"sha": "bedb585f13f92c9008d125c722356aa8d148bb9f", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -3204,6 +3204,61 @@ AC_DEFUN([AC_LC_MESSAGES], [\n   ])\n ])\n \n+dnl\n+dnl Check whether get_nprocs is available in <sys/sysinfo.h>, and define _GLIBCXX_USE_GET_NPROCS.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_GET_NPROCS], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  AC_MSG_CHECKING([for get_nprocs])\n+  AC_CACHE_VAL(glibcxx_cv_GET_NPROCS, [\n+    GCC_TRY_COMPILE_OR_LINK(\n+      [#include <sys/sysinfo.h>],\n+      [int n = get_nprocs();],\n+      [glibcxx_cv_GET_NPROCS=yes],\n+      [glibcxx_cv_GET_NPROCS=no])\n+  ])\n+  if test $glibcxx_cv_GET_NPROCS = yes; then\n+    AC_DEFINE(_GLIBCXX_USE_GET_NPROCS, 1, [Define if get_nprocs is available in <sys/sysinfo.h>.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_GET_NPROCS)\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+])\n+\n+dnl\n+dnl Check whether sysconf(_SC_NPROCESSORS_ONLN) is available in <unistd.h>, and define _GLIBCXX_USE_SC_NPROCESSORS_ONLN.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_SC_NPROCESSORS_ONLN], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  AC_MSG_CHECKING([for _SC_NPROCESSORS_ONLN])\n+  AC_CACHE_VAL(glibcxx_cv_SC_NPROCESSORS_ONLN, [\n+    GCC_TRY_COMPILE_OR_LINK(\n+      [#include <unistd.h>],\n+      [int n = sysconf(_SC_NPROCESSORS_ONLN);],\n+      [glibcxx_cv_SC_NPROCESSORS_ONLN=yes],\n+      [glibcxx_cv_SC_NPROCESSORS_ONLN=no])\n+  ])\n+  if test $glibcxx_cv_SC_NPROCESSORS_ONLN = yes; then\n+    AC_DEFINE(_GLIBCXX_USE_SC_NPROCESSORS_ONLN, 1, [Define if _SC_NPROCESSORS_ONLN  is available in <unistd.h>.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_SC_NPROCESSORS_ONLN)\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+])\n+\n+\n # Macros from the top-level gcc directory.\n m4_include([../config/gc++filt.m4])\n m4_include([../config/tls.m4])"}, {"sha": "6137ba0282756255621d195df48f789a2e052798", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -380,6 +380,9 @@\n /* Define to 1 if you have the <sys/stat.h> header file. */\n #undef HAVE_SYS_STAT_H\n \n+/* Define to 1 if you have the <sys/sysinfo.h> header file. */\n+#undef HAVE_SYS_SYSINFO_H\n+\n /* Define to 1 if you have the <sys/time.h> header file. */\n #undef HAVE_SYS_TIME_H\n \n@@ -792,6 +795,9 @@\n /* Defined if gettimeofday is available. */\n #undef _GLIBCXX_USE_GETTIMEOFDAY\n \n+/* Define if get_nprocs is available in <sys/sysinfo.h>. */\n+#undef _GLIBCXX_USE_GET_NPROCS\n+\n /* Define if LFS support is available. */\n #undef _GLIBCXX_USE_LFS\n \n@@ -811,6 +817,9 @@\n /* Defined if sched_yield is available. */\n #undef _GLIBCXX_USE_SCHED_YIELD\n \n+/* Define if _SC_NPROCESSORS_ONLN is available in <unistd.h>. */\n+#undef _GLIBCXX_USE_SC_NPROCESSORS_ONLN\n+\n /* Define if code specialized for wchar_t should be used. */\n #undef _GLIBCXX_USE_WCHAR_T\n "}, {"sha": "427189c063d33b908b75f583298834d337a38966", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -1279,6 +1279,13 @@ GLIBCXX_3.4.16 {\n \n } GLIBCXX_3.4.15;\n \n+GLIBCXX_3.4.17 {\n+\n+    # std::thread::hardware_concurrency\n+    _ZNSt6thread20hardware_concurrencyEv;\n+\n+} GLIBCXX_3.4.16;\n+\n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.3 {\n "}, {"sha": "8f871114b67774c8b25661ec576a1aacc1c25b40", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 183, "deletions": 1, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -2825,7 +2825,7 @@ ac_config_headers=\"$ac_config_headers config.h\"\n ### am handles this now?  ORIGINAL_LD_FOR_MULTILIBS=$LD\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:16:0\n+libtool_VERSION=6:17:0\n \n \n # Find the rest of the source tree framework.\n@@ -19521,6 +19521,188 @@ fi\n \n \n \n+# For hardware_concurrency\n+for ac_header in sys/sysinfo.h\n+do :\n+  ac_fn_c_check_header_mongrel \"$LINENO\" \"sys/sysinfo.h\" \"ac_cv_header_sys_sysinfo_h\" \"$ac_includes_default\"\n+if test \"x$ac_cv_header_sys_sysinfo_h\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_SYS_SYSINFO_H 1\n+_ACEOF\n+\n+fi\n+\n+done\n+\n+\n+\n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for get_nprocs\" >&5\n+$as_echo_n \"checking for get_nprocs... \" >&6; }\n+  if test \"${glibcxx_cv_GET_NPROCS+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/sysinfo.h>\n+int\n+main ()\n+{\n+int n = get_nprocs();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_GET_NPROCS=yes\n+else\n+  glibcxx_cv_GET_NPROCS=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/sysinfo.h>\n+int\n+main ()\n+{\n+int n = get_nprocs();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_GET_NPROCS=yes\n+else\n+  glibcxx_cv_GET_NPROCS=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+  if test $glibcxx_cv_GET_NPROCS = yes; then\n+\n+$as_echo \"#define _GLIBCXX_USE_GET_NPROCS 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_GET_NPROCS\" >&5\n+$as_echo \"$glibcxx_cv_GET_NPROCS\" >&6; }\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+for ac_header in unistd.h\n+do :\n+  ac_fn_c_check_header_mongrel \"$LINENO\" \"unistd.h\" \"ac_cv_header_unistd_h\" \"$ac_includes_default\"\n+if test \"x$ac_cv_header_unistd_h\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_UNISTD_H 1\n+_ACEOF\n+\n+fi\n+\n+done\n+\n+\n+\n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for _SC_NPROCESSORS_ONLN\" >&5\n+$as_echo_n \"checking for _SC_NPROCESSORS_ONLN... \" >&6; }\n+  if test \"${glibcxx_cv_SC_NPROCESSORS_ONLN+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+int\n+main ()\n+{\n+int n = sysconf(_SC_NPROCESSORS_ONLN);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_SC_NPROCESSORS_ONLN=yes\n+else\n+  glibcxx_cv_SC_NPROCESSORS_ONLN=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+int\n+main ()\n+{\n+int n = sysconf(_SC_NPROCESSORS_ONLN);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_SC_NPROCESSORS_ONLN=yes\n+else\n+  glibcxx_cv_SC_NPROCESSORS_ONLN=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+  if test $glibcxx_cv_SC_NPROCESSORS_ONLN = yes; then\n+\n+$as_echo \"#define _GLIBCXX_USE_SC_NPROCESSORS_ONLN 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_SC_NPROCESSORS_ONLN\" >&5\n+$as_echo \"$glibcxx_cv_SC_NPROCESSORS_ONLN\" >&6; }\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n # Check for available headers.\n for ac_header in endian.h execinfo.h float.h fp.h ieeefp.h inttypes.h \\\n locale.h machine/endian.h machine/param.h nan.h stdint.h stdlib.h string.h \\"}, {"sha": "416c0d72d6840ff0c4a5a2f4803f653a32294b39", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -12,7 +12,7 @@ AC_CONFIG_HEADER(config.h)\n ### am handles this now?  ORIGINAL_LD_FOR_MULTILIBS=$LD\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:16:0\n+libtool_VERSION=6:17:0\n AC_SUBST(libtool_VERSION)\n \n # Find the rest of the source tree framework.\n@@ -170,6 +170,12 @@ GLIBCXX_CHECK_GTHREADS\n \n AC_LC_MESSAGES\n \n+# For hardware_concurrency\n+AC_CHECK_HEADERS(sys/sysinfo.h)\n+GLIBCXX_CHECK_GET_NPROCS\n+AC_CHECK_HEADERS(unistd.h)\n+GLIBCXX_CHECK_SC_NPROCESSORS_ONLN\n+\n # Check for available headers.\n AC_CHECK_HEADERS([endian.h execinfo.h float.h fp.h ieeefp.h inttypes.h \\\n locale.h machine/endian.h machine/param.h nan.h stdint.h stdlib.h string.h \\"}, {"sha": "ab85735154e7b798e9ed4b72fbf68c55cf69f132", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -179,8 +179,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     // Returns a value that hints at the number of hardware thread contexts.\n     static unsigned int\n-    hardware_concurrency() noexcept\n-    { return 0; }\n+    hardware_concurrency() noexcept;\n \n   private:\n     void"}, {"sha": "cc23c19768f421822cebba8d03ac6f9c0347718e", "filename": "libstdc++-v3/src/thread.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -26,6 +26,16 @@\n #include <thread>\n #include <cerrno>\n \n+#if defined(_GLIBCXX_USE_GET_NPROCS)\n+# include <sys/sysinfo.h>\n+# define _GLIBCXX_NPROCS get_nprocs()\n+#elif defined(_GLIBCXX_USE_SC_NPROCESSORS_ONLN)\n+# include <unistd.h>\n+# define _GLIBCXX_NPROCS sysconf(_SC_NPROCESSORS_ONLN)\n+#else\n+# define _GLIBCXX_NPROCS 0\n+#endif\n+\n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -98,6 +108,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n   }\n \n+  unsigned int\n+  thread::hardware_concurrency() noexcept\n+  {\n+    int __n = _GLIBCXX_NPROCS;\n+    if (__n < 0)\n+      __n = 0;\n+    return __n;\n+  }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "51d024dacdbeb342320bc76bc11faaf14e9b33b9", "filename": "libstdc++-v3/testsuite/30_threads/thread/members/hardware_concurrency.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2Fhardware_concurrency.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2Fhardware_concurrency.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmembers%2Fhardware_concurrency.cc?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -4,8 +4,9 @@\n // { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n+// { dg-require-nprocs \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,8 +30,7 @@ int main()\n {\n   bool test __attribute__((unused)) = true;\n \n-  // Current implementation punts on this.\n-  VERIFY( std::thread::hardware_concurrency() == 0 );\n+  VERIFY( std::thread::hardware_concurrency() >= 1 );\n \n   return 0;\n }"}, {"sha": "46d3ce9e71a439c76a5dfca18d859be19492231a", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -179,6 +179,15 @@ proc dg-require-binary-io { args } {\n     return\n }\n \n+proc dg-require-nprocs { args } {\n+    if { ![ check_v3_target_nprocs ] } {\n+        upvar dg-do-what dg-do-what\n+        set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+        return\n+    }\n+    return\n+}\n+\n proc add_options_for_no_pch { flags } {\n     # This forces any generated and possibly included PCH to be invalid.\n     return \"-D__GLIBCXX__=99999999\""}, {"sha": "d39e8ea182c97bb12533b71deae1931dd61861b0", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -1579,4 +1579,67 @@ proc check_v3_target_binary_io { } {\n     return $et_binary_io\n }\n \n+proc check_v3_target_nprocs { } {\n+    global cxxflags\n+    global DEFAULT_CXXFLAGS\n+    global et_nprocs\n+\n+    global tool\n+\n+    if { ![info exists et_nprocs_target_name] } {\n+\tset et_nprocs_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_nprocs_target_name } {\n+\tverbose \"check_v3_target_nprocs: `$et_nprocs_target_name'\" 2\n+\tset et_nprocs_target_name $current_target\n+\tif [info exists et_nprocs] {\n+\t    verbose \"check_v3_target_nprocs: removing cached result\" 2\n+\t    unset et_nprocs\n+\t}\n+    }\n+\n+    if [info exists et_nprocs] {\n+\tverbose \"check_v3_target_nprocs: using cached result\" 2\n+    } else {\n+\tset et_nprocs 0\n+\n+\t# Set up and preprocess a C++0x test program that depends\n+\t# on either get_nprocs or sysconf to be available.\n+\tset src nprocs[pid].cc\n+\n+\tset f [open $src \"w\"]\n+        puts $f \"#include <bits/c++config.h>\"\n+\tputs $f \"#if defined(_GLIBCXX_USE_GET_NPROCS)\"\n+\tputs $f \"#elif defined(_GLIBCXX_USE_SYSCONF)\"\n+        puts $f \"# include <unistd.h>\"\n+\tputs $f \"# if !defined(_SC_NPROCESSORS_ONLN)\"\n+\tputs $f \"#  error No sysconf option\"\n+\tputs $f \"# endif\"\n+\tputs $f \"#else\"\n+\tputs $f \"#  error No get_nprocs or sysconf\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tset cxxflags_saved $cxxflags\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\n+\tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n+\tset cxxflags $cxxflags_saved\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] {\n+\t    # No error message, preprocess succeeded.\n+\t    set et_nprocs 1\n+\t} else {\n+\t    verbose \"check_v3_target_nprocs: compilation failed\" 2\n+\t}\n+    }\n+    verbose \"check_v3_target_nprocs: $et_nprocs\" 2\n+    return $et_nprocs\n+}\n+\n+\n set additional_prunes \"\""}, {"sha": "f1f5ad6634733b83f0d4ef20d229f3c8ace6e66f", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43653c334ddade011be1670ccdeac12b9f47e26e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=43653c334ddade011be1670ccdeac12b9f47e26e", "patch": "@@ -194,6 +194,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.14\");\n       known_versions.push_back(\"GLIBCXX_3.4.15\");\n       known_versions.push_back(\"GLIBCXX_3.4.16\");\n+      known_versions.push_back(\"GLIBCXX_3.4.17\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.7\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.10\");"}]}