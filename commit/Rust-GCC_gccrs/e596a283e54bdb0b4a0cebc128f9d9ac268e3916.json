{"sha": "e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "node_id": "C_kwDOANBUbNoAKGU1OTZhMjgzZTU0YmRiMGI0YTBjZWJjMTI4ZjlkOWFjMjY4ZTM5MTY", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2021-08-31T03:42:26Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-10-25T09:06:40Z"}, "message": "RISC-V: Implement instruction patterns for ZBB extension.\n\n2021-10-25  Jim Wilson  <jimw@sifive.com>\n\t    Kito Cheng  <kito.cheng@sifive.com>\n\t    Jia-Wei Chen  <jiawei@iscas.ac.cn>\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md (bitmanip_bitwise): New.\n\t(bitmanip_minmax): New.\n\t(clz_ctz_pcnt): New.\n\t(bitmanip_optab): New.\n\t(bitmanip_insn): New.\n\t(*<optab>_not<mode>): New.\n\t(*xor_not<mode>): New.\n\t(<bitmanip_optab>si2): New.\n\t(*<bitmanip_optab>disi2): New.\n\t(<bitmanip_optab>di2): New.\n\t(*zero_extendhi<GPR:mode>2_bitmanip): New.\n\t(*extend<SHORT:mode><SUPERQI:mode>2_zbb): New.\n\t(*zero_extendhi<GPR:mode>2_zbb): New.\n\t(rotrsi3): New.\n\t(rotrdi3): New.\n\t(rotrsi3_sext): New.\n\t(rotlsi3): New.\n\t(rotldi3): New.\n\t(rotlsi3_sext): New.\n\t(bswap<mode>2): New.\n\t(<bitmanip_optab><mode>3): New.\n\t* config/riscv/riscv.md (type): Add rotate.\n\t(zero_extendhi<GPR:mode>2): Change to define_expand pattern.\n\t(*zero_extendhi<GPR:mode>2): New.\n\t(extend<SHORT:mode><SUPERQI:mode>2): Change to define_expand pattern.\n\t(*extend<SHORT:mode><SUPERQI:mode>2): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbb-andn-orn-xnor-01.c: New.\n\t* gcc.target/riscv/zbb-andn-orn-xnor-02.c: Ditto.\n\t* gcc.target/riscv/zbb-min-max.c: Ditto.\n\t* gcc.target/riscv/zbb-rol-ror-01.c: Ditto.\n\t* gcc.target/riscv/zbb-rol-ror-02.c: Ditto.\n\t* gcc.target/riscv/zbb-rol-ror-03.c: Ditto.\n\t* gcc.target/riscv/zbbw.c: Ditto.\n\nCo-authored-by: Kito Cheng <kito.cheng@sifive.com>\nCo-authored-by: Jia-Wei Chen <jiawei@iscas.ac.cn>", "tree": {"sha": "d5811d683ed11e0aa17520d8c36e8dd228a26fe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5811d683ed11e0aa17520d8c36e8dd228a26fe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/comments", "author": null, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a9b554ba1a71baae6f985905d92fe693acb437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a9b554ba1a71baae6f985905d92fe693acb437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a9b554ba1a71baae6f985905d92fe693acb437"}], "stats": {"total": 332, "additions": 327, "deletions": 5}, "files": [{"sha": "4d6245140495b0dec31ec7ba81c29b15aa07501c", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "patch": "@@ -17,6 +17,30 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n+(define_code_iterator bitmanip_bitwise [and ior])\n+\n+(define_code_iterator bitmanip_minmax [smin umin smax umax])\n+\n+(define_code_iterator clz_ctz_pcnt [clz ctz popcount])\n+\n+(define_code_attr bitmanip_optab [(smin \"smin\")\n+\t\t\t\t  (smax \"smax\")\n+\t\t\t\t  (umin \"umin\")\n+\t\t\t\t  (umax \"umax\")\n+\t\t\t\t  (clz \"clz\")\n+\t\t\t\t  (ctz \"ctz\")\n+\t\t\t\t  (popcount \"popcount\")])\n+\n+\n+(define_code_attr bitmanip_insn [(smin \"min\")\n+\t\t\t\t (smax \"max\")\n+\t\t\t\t (umin \"minu\")\n+\t\t\t\t (umax \"maxu\")\n+\t\t\t\t (clz \"clz\")\n+\t\t\t\t (ctz \"ctz\")\n+\t\t\t\t (popcount \"cpop\")])\n+\n+\n ;; ZBA extension.\n \n (define_insn \"*zero_extendsidi2_bitmanip\"\n@@ -74,3 +98,143 @@\n   \"slli.uw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"DI\")])\n+\n+;; ZBB extension.\n+\n+(define_insn \"*<optab>_not<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (bitmanip_bitwise:X (not:X (match_operand:X 1 \"register_operand\" \"r\"))\n+                            (match_operand:X 2 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBB\"\n+  \"<insn>n\\t%0,%2,%1\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<X:MODE>\")])\n+\n+(define_insn \"*xor_not<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (not:X (xor:X (match_operand:X 1 \"register_operand\" \"r\")\n+                      (match_operand:X 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_ZBB\"\n+  \"xnor\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<X:MODE>\")])\n+\n+(define_insn \"<bitmanip_optab>si2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (clz_ctz_pcnt:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBB\"\n+  { return TARGET_64BIT ? \"<bitmanip_insn>w\\t%0,%1\" : \"<bitmanip_insn>\\t%0,%1\"; }\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*<bitmanip_optab>disi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (sign_extend:DI\n+          (clz_ctz_pcnt:SI (match_operand:SI 1 \"register_operand\" \"r\"))))]\n+  \"TARGET_64BIT && TARGET_ZBB\"\n+  \"<bitmanip_insn>w\\t%0,%1\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"<bitmanip_optab>di2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (clz_ctz_pcnt:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_64BIT && TARGET_ZBB\"\n+  \"<bitmanip_insn>\\t%0,%1\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"*zero_extendhi<GPR:mode>2_bitmanip\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=r,r\")\n+        (zero_extend:GPR (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  \"TARGET_ZBB\"\n+  \"@\n+   zext.h\\t%0,%1\n+   lhu\\t%0,%1\"\n+  [(set_attr \"type\" \"bitmanip,load\")\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n+\n+(define_insn \"*extend<SHORT:mode><SUPERQI:mode>2_zbb\"\n+  [(set (match_operand:SUPERQI   0 \"register_operand\"     \"=r,r\")\n+\t(sign_extend:SUPERQI\n+\t    (match_operand:SHORT 1 \"nonimmediate_operand\" \" r,m\")))]\n+  \"TARGET_ZBB\"\n+  \"@\n+   sext.<SHORT:size>\\t%0,%1\n+   l<SHORT:size>\\t%0,%1\"\n+  [(set_attr \"type\" \"bitmanip,load\")\n+   (set_attr \"mode\" \"<SUPERQI:MODE>\")])\n+\n+(define_insn \"*zero_extendhi<GPR:mode>2_zbb\"\n+  [(set (match_operand:GPR    0 \"register_operand\"     \"=r,r\")\n+\t(zero_extend:GPR\n+\t    (match_operand:HI 1 \"nonimmediate_operand\" \" r,m\")))]\n+  \"TARGET_ZBB\"\n+  \"@\n+   zext.h\\t%0,%1\n+   lhu\\t%0,%1\"\n+  [(set_attr \"type\" \"bitmanip,load\")\n+   (set_attr \"mode\" \"HI\")])\n+\n+(define_insn \"rotrsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:QI 2 \"arith_operand\" \"rI\")))]\n+  \"TARGET_ZBB\"\n+  { return TARGET_64BIT ? \"ror%i2w\\t%0,%1,%2\" : \"ror%i2\\t%0,%1,%2\"; }\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"rotrdi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(rotatert:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:QI 2 \"arith_operand\" \"rI\")))]\n+  \"TARGET_64BIT && TARGET_ZBB\"\n+  \"ror%i2\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"rotrsi3_sext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI (rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t     (match_operand:QI 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_64BIT && TARGET_ZBB\"\n+  \"rorw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"rotlsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(rotate:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t   (match_operand:QI 2 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBB\"\n+  { return TARGET_64BIT ? \"rolw\\t%0,%1,%2\" : \"rol\\t%0,%1,%2\"; }\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"rotldi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(rotate:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t   (match_operand:QI 2 \"register_operand\" \"r\")))]\n+  \"TARGET_64BIT && TARGET_ZBB\"\n+  \"rol\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"rotlsi3_sext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI (rotate:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t   (match_operand:QI 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_64BIT && TARGET_ZBB\"\n+  \"rolw\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"bswap<mode>2\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (bswap:X (match_operand:X 1 \"register_operand\" \"r\")))]\n+  \"TARGET_64BIT && TARGET_ZBB\"\n+  \"rev8\\t%0,%1\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"<bitmanip_optab><mode>3\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+        (bitmanip_minmax:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t\t\t   (match_operand:X 2 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBB\"\n+  \"<bitmanip_insn>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])"}, {"sha": "dd4c24292f20d527e01466b92e5a8c99bd1700be", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "patch": "@@ -170,7 +170,7 @@\n (define_attr \"type\"\n   \"unknown,branch,jump,call,load,fpload,store,fpstore,\n    mtc,mfc,const,arith,logical,shift,slt,imul,idiv,move,fmove,fadd,fmul,\n-   fmadd,fdiv,fcmp,fcvt,fsqrt,multi,auipc,sfb_alu,nop,ghost,bitmanip\"\n+   fmadd,fdiv,fcmp,fcvt,fsqrt,multi,auipc,sfb_alu,nop,ghost,bitmanip,rotate\"\n   (cond [(eq_attr \"got\" \"load\") (const_string \"load\")\n \n \t ;; If a doubleword move uses these expensive instructions,\n@@ -1326,11 +1326,17 @@\n   [(set_attr \"move_type\" \"shift_shift,load\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn_and_split \"zero_extendhi<GPR:mode>2\"\n+(define_expand \"zero_extendhi<GPR:mode>2\"\n+  [(set (match_operand:GPR    0 \"register_operand\")\n+\t(zero_extend:GPR\n+\t    (match_operand:HI 1 \"nonimmediate_operand\")))]\n+  \"\")\n+\n+(define_insn_and_split \"*zero_extendhi<GPR:mode>2\"\n   [(set (match_operand:GPR    0 \"register_operand\"     \"=r,r\")\n \t(zero_extend:GPR\n \t    (match_operand:HI 1 \"nonimmediate_operand\" \" r,m\")))]\n-  \"\"\n+  \"!TARGET_ZBB\"\n   \"@\n    #\n    lhu\\t%0,%1\"\n@@ -1377,11 +1383,16 @@\n   [(set_attr \"move_type\" \"move,load\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn_and_split \"extend<SHORT:mode><SUPERQI:mode>2\"\n+(define_expand \"extend<SHORT:mode><SUPERQI:mode>2\"\n+  [(set (match_operand:SUPERQI 0 \"register_operand\")\n+\t(sign_extend:SUPERQI (match_operand:SHORT 1 \"nonimmediate_operand\")))]\n+  \"\")\n+\n+(define_insn_and_split \"*extend<SHORT:mode><SUPERQI:mode>2\"\n   [(set (match_operand:SUPERQI   0 \"register_operand\"     \"=r,r\")\n \t(sign_extend:SUPERQI\n \t    (match_operand:SHORT 1 \"nonimmediate_operand\" \" r,m\")))]\n-  \"\"\n+  \"!TARGET_ZBB\"\n   \"@\n    #\n    l<SHORT:size>\\t%0,%1\""}, {"sha": "0037dea5647aeb9e86cdbebe51bf59bf4c7a6a8b", "filename": "gcc/testsuite/gcc.target/riscv/zbb-andn-orn-xnor-01.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-andn-orn-xnor-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-andn-orn-xnor-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-andn-orn-xnor-01.c?ref=e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbb -mabi=lp64 -O2\" } */\n+\n+unsigned long long foo1(unsigned long long rs1, unsigned long long rs2)\n+{\n+return rs1 & ~rs2;\n+}\n+\n+unsigned long long foo2(unsigned long long rs1, unsigned long long rs2)\n+{\n+return rs1 | ~rs2;\n+}\n+\n+unsigned long long foo3(unsigned long long rs1, unsigned long long rs2)\n+{\n+return rs1 ^ ~rs2;\n+}\n+\n+/* { dg-final { scan-assembler-times \"andn\" 2 } } */\n+/* { dg-final { scan-assembler-times \"orn\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xnor\" 2 } } */\n\\ No newline at end of file"}, {"sha": "b0c1e40c554607022e805357dd3c25f1f78bf997", "filename": "gcc/testsuite/gcc.target/riscv/zbb-andn-orn-xnor-02.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-andn-orn-xnor-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-andn-orn-xnor-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-andn-orn-xnor-02.c?ref=e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_zbb -mabi=ilp32 -O2\" } */\n+\n+unsigned int foo1(unsigned int rs1, unsigned int rs2)\n+{\n+return rs1 & ~rs2;\n+}\n+\n+unsigned int foo2(unsigned  int rs1, unsigned  int rs2)\n+{\n+return rs1 | ~rs2;\n+}\n+\n+unsigned int foo3(unsigned int rs1, unsigned int rs2)\n+{\n+return rs1 ^ ~rs2;\n+}\n+\n+/* { dg-final { scan-assembler-times \"andn\" 2 } } */\n+/* { dg-final { scan-assembler-times \"orn\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xnor\" 2 } } */\n\\ No newline at end of file"}, {"sha": "f44c398ea080b95a3f466f71b5c427bfd0f89ca9", "filename": "gcc/testsuite/gcc.target/riscv/zbb-min-max.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-min-max.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-min-max.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-min-max.c?ref=e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbb -mabi=lp64 -O2\" } */\n+\n+long\n+foo1 (long i, long j)\n+{\n+  return i < j ? i : j;\n+}\n+\n+long\n+foo2 (long i, long j)\n+{\n+  return i > j ? i : j;\n+}\n+\n+unsigned long\n+foo3 (unsigned long i, unsigned long j)\n+{\n+  return i < j ? i : j;\n+}\n+\n+unsigned long\n+foo4 (unsigned long i, unsigned long j)\n+{\n+  return i > j ? i : j;\n+}\n+\n+/* { dg-final { scan-assembler-times \"min\" 3 } } */\n+/* { dg-final { scan-assembler-times \"max\" 3 } } */\n+/* { dg-final { scan-assembler-times \"minu\" 1 } } */\n+/* { dg-final { scan-assembler-times \"maxu\" 1 } } */"}, {"sha": "958966289df9cfa3f280f6f0276b3c4bcc32f800", "filename": "gcc/testsuite/gcc.target/riscv/zbb-rol-ror-01.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-rol-ror-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-rol-ror-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-rol-ror-01.c?ref=e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbb -mabi=lp64 -O2\" } */\n+\n+unsigned long foo1(unsigned long rs1, unsigned long rs2)\n+{\n+    long shamt = rs2 & (64 - 1);\n+    return (rs1 << shamt) | (rs1 >> ((64 - shamt) & (64 - 1)));\n+}\n+unsigned long foo2(unsigned long rs1, unsigned long rs2)\n+{\n+    unsigned long shamt = rs2 & (64 - 1);\n+    return (rs1 >> shamt) | (rs1 << ((64 - shamt) & (64 - 1)));\n+}\n+\n+/* { dg-final { scan-assembler-times \"rol\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ror\" 2 } } */\n\\ No newline at end of file"}, {"sha": "24b482f21453b815e89803f57cdd6947a436c447", "filename": "gcc/testsuite/gcc.target/riscv/zbb-rol-ror-02.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-rol-ror-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-rol-ror-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-rol-ror-02.c?ref=e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_zbb -mabi=ilp32 -O2\" } */\n+\n+unsigned int foo1(unsigned int rs1, unsigned int rs2)\n+{\n+    unsigned int shamt = rs2 & (32 - 1);\n+    return (rs1 << shamt) | (rs1 >> ((32 - shamt) & (32 - 1)));\n+}\n+unsigned int foo2(unsigned int rs1, unsigned int rs2)\n+{\n+    unsigned int shamt = rs2 & (32 - 1);\n+    return (rs1 >> shamt) | (rs1 << ((32 - shamt) & (32 - 1)));\n+}\n+\n+/* { dg-final { scan-assembler-times \"rol\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ror\" 2 } } */\n\\ No newline at end of file"}, {"sha": "ffde7c9cd5892a160c45da3b63ddee1f45bd03c4", "filename": "gcc/testsuite/gcc.target/riscv/zbb-rol-ror-03.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-rol-ror-03.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-rol-ror-03.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbb-rol-ror-03.c?ref=e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbb -mabi=lp64 -O2\" } */\n+\n+/* RV64 only*/\n+unsigned int rol(unsigned int rs1, unsigned int rs2)\n+{\n+    int shamt = rs2 & (32 - 1);\n+    return (rs1 << shamt) | (rs1 >> ((64 - shamt) & (32 - 1)));\n+}\n+unsigned int ror(unsigned int rs1, unsigned int rs2)\n+{\n+    int shamt = rs2 & (64 - 1);\n+    return (rs1 >> shamt) | (rs1 << ((32 - shamt) & (32 - 1)));\n+}\n+\n+/* { dg-final { scan-assembler-times \"rolw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rorw\" 1 } } */\n\\ No newline at end of file"}, {"sha": "236ddf7b58348f038c0fd1731652eae2945aab59", "filename": "gcc/testsuite/gcc.target/riscv/zbbw.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbbw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e596a283e54bdb0b4a0cebc128f9d9ac268e3916/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbbw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbbw.c?ref=e596a283e54bdb0b4a0cebc128f9d9ac268e3916", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbb -mabi=lp64 -O2\" } */\n+\n+int\n+clz (int i)\n+{\n+  return __builtin_clz (i);\n+}\n+\n+int\n+ctz (int i)\n+{\n+  return __builtin_ctz (i);\n+}\n+\n+int\n+popcount (int i)\n+{\n+  return __builtin_popcount (i);\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"clzw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ctzw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cpopw\" 1 } } */"}]}