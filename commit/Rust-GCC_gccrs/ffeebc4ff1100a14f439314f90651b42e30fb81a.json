{"sha": "ffeebc4ff1100a14f439314f90651b42e30fb81a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlZWJjNGZmMTEwMGExNGY0MzkzMTRmOTA2NTFiNDJlMzBmYjgxYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-05-29T14:08:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-05-29T14:08:57Z"}, "message": "re PR fortran/90329 (Incompatibility between gfortran and C lapack calls)\n\n\tPR fortran/90329\n\t* lang.opt (fbroken-callers): Remove.\n\t(ftail-call-workaround, ftail-call-workaround=): New options.\n\t* gfortran.h (struct gfc_namespace): Add implicit_interface_calls.\n\t* interface.c (gfc_procedure_use): Set implicit_interface_calls\n\tfor calls to implicit interface procedures.\n\t* trans-decl.c (create_function_arglist): Use flag_tail_call_workaround\n\tinstead of flag_broken_callers.  If it is not 2, also require\n\tsym->ns->implicit_interface_calls.\n\t* invoke.texi (fbroken-callers): Remove documentation.\n\t(ftail-call-workaround, ftail-call-workaround=): Document.\n\nFrom-SVN: r271738", "tree": {"sha": "f663fc322b17ac51f7fd85bda31b11ab0a116b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f663fc322b17ac51f7fd85bda31b11ab0a116b9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffeebc4ff1100a14f439314f90651b42e30fb81a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffeebc4ff1100a14f439314f90651b42e30fb81a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffeebc4ff1100a14f439314f90651b42e30fb81a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffeebc4ff1100a14f439314f90651b42e30fb81a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b54ecc769f598fcb7f88c6a7c9217ee7c32be789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54ecc769f598fcb7f88c6a7c9217ee7c32be789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54ecc769f598fcb7f88c6a7c9217ee7c32be789"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "07b485b5a50d4c85a58969df230b7c482185f9b6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ffeebc4ff1100a14f439314f90651b42e30fb81a", "patch": "@@ -1,3 +1,17 @@\n+2019-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/90329\n+\t* lang.opt (fbroken-callers): Remove.\n+\t(ftail-call-workaround, ftail-call-workaround=): New options.\n+\t* gfortran.h (struct gfc_namespace): Add implicit_interface_calls.\n+\t* interface.c (gfc_procedure_use): Set implicit_interface_calls\n+\tfor calls to implicit interface procedures.\n+\t* trans-decl.c (create_function_arglist): Use flag_tail_call_workaround\n+\tinstead of flag_broken_callers.  If it is not 2, also require\n+\tsym->ns->implicit_interface_calls.\n+\t* invoke.texi (fbroken-callers): Remove documentation.\n+\t(ftail-call-workaround, ftail-call-workaround=): Document.\n+\n 2019-05-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/90539"}, {"sha": "54987ac878b6446147cb01234c496e03b9502c46", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ffeebc4ff1100a14f439314f90651b42e30fb81a", "patch": "@@ -1866,6 +1866,9 @@ typedef struct gfc_namespace\n \n   /* Set to 1 for !$ACC ROUTINE namespaces.  */\n   unsigned oacc_routine:1;\n+\n+  /* Set to 1 if there are any calls to procedures with implicit interface.  */\n+  unsigned implicit_interface_calls:1;\n }\n gfc_namespace;\n "}, {"sha": "3f91f6b38fa22a7305f828e01bfbb2575c87e1bd", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=ffeebc4ff1100a14f439314f90651b42e30fb81a", "patch": "@@ -3686,6 +3686,7 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \tgfc_warning (OPT_Wimplicit_procedure,\n \t\t     \"Procedure %qs called at %L is not explicitly declared\",\n \t\t     sym->name, where);\n+      gfc_find_proc_namespace (sym->ns)->implicit_interface_calls = 1;\n     }\n \n   if (sym->attr.if_source == IFSRC_UNKNOWN)"}, {"sha": "2e2cb5b2728c02f3c71802a7a41888be210f8d89", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=ffeebc4ff1100a14f439314f90651b42e30fb81a", "patch": "@@ -181,7 +181,8 @@ and warnings}.\n @item Code Generation Options\n @xref{Code Gen Options,,Options for code generation conventions}.\n @gccoptlist{-faggressive-function-elimination -fblas-matmul-limit=@var{n} @gol\n--fbounds-check -fbroken-callers -fcheck-array-temporaries @gol\n+-fbounds-check -ftail-call-workaround -ftail-call-workaround=@var{n} @gol\n+-fcheck-array-temporaries @gol\n -fcheck=@var{<all|array-temps|bounds|do|mem|pointer|recursion>} @gol\n -fcoarray=@var{<none|single|lib>} -fexternal-blas -ff2c\n -ffrontend-loop-interchange @gol\n@@ -1622,16 +1623,21 @@ warnings for generated array temporaries.\n @c Note: This option is also referred in gcc's manpage\n Deprecated alias for @option{-fcheck=bounds}.\n \n-@item -fbroken-callers\n-@opindex @code{broken-callers}\n+@item -ftail-call-workaround\n+@itemx -ftail-call-workaround=@var{n}\n+@opindex @code{tail-call-workaround}\n Some C interfaces to Fortran codes violate the gfortran ABI by\n omitting the hidden character length arguments as described in\n @xref{Argument passing conventions}.  This can lead to crashes\n because pushing arguments for tail calls can overflow the stack.\n \n To provide a workaround for existing binary packages, this option\n disables tail call optimization for gfortran procedures with character\n-arguments.\n+arguments.  With @option{-ftail-call-workaround=2} tail call optimization\n+is disabled in all gfortran procedures with character arguments,\n+with @option{-ftail-call-workaround=1} or equivalent\n+@option{-ftail-call-workaround} only in gfortran procedures with character\n+arguments that call implicitly prototyped procedures.\n \n Using this option can lead to problems including crashes due to\n insufficient stack space.\n@@ -1644,10 +1650,10 @@ source code.\n Support for this option will likely be withdrawn in a future release\n of gfortran.\n \n-The negative form, @option{-fno-broken-callers}, can be used to\n-disable this option.\n+The negative form, @option{-fno-tail-call-workaround} or equivalent\n+@option{-ftail-call-workaround=0}, can be used to disable this option.\n \n-Default is currently @option{-fbroken-callers}, this will change\n+Default is currently @option{-ftail-call-workaround}, this will change\n in future releases.\n \n @item -fcheck-array-temporaries"}, {"sha": "8b2e1ad3424b04691b3a0480f8a9200342e4df9e", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=ffeebc4ff1100a14f439314f90651b42e30fb81a", "patch": "@@ -397,10 +397,6 @@ fblas-matmul-limit=\n Fortran RejectNegative Joined UInteger Var(flag_blas_matmul_limit) Init(30)\n -fblas-matmul-limit=<n>\tSize of the smallest matrix for which matmul will use BLAS.\n \n-fbroken-callers\n-Fortran Var(flag_broken_callers) Init(1)\n-Disallow tail call optimization when a calling routine may have omitted character lenghts.\n-\n fcheck-array-temporaries\n Fortran\n Produce a warning at runtime if a array temporary has been created for a procedure argument.\n@@ -766,6 +762,13 @@ fsign-zero\n Fortran Var(flag_sign_zero) Init(1)\n Apply negative sign to zero values.\n \n+ftail-call-workaround\n+Frotran Alias(ftail-call-workaround=,1,0)\n+\n+ftail-call-workaround=\n+Fortran RejectNegative Joined UInteger IntegerRange(0, 2) Var(flag_tail_call_workaround) Init(1)\n+Disallow tail call optimization when a calling routine may have omitted character lenghts.\n+\n funderscoring\n Fortran Var(flag_underscoring) Init(1)\n Append underscores to externally visible names."}, {"sha": "b8e07274febda7828c0d4376566298fa8d025176", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeebc4ff1100a14f439314f90651b42e30fb81a/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=ffeebc4ff1100a14f439314f90651b42e30fb81a", "patch": "@@ -2520,9 +2520,12 @@ create_function_arglist (gfc_symbol * sym)\n \t  /* Marking the length DECL_HIDDEN_STRING_LENGTH will lead\n \t     to tail calls being disabled.  Only do that if we\n \t     potentially have broken callers.  */\n-\t  if (flag_broken_callers && f->sym->ts.u.cl\n+\t  if (flag_tail_call_workaround\n+\t      && f->sym->ts.u.cl\n \t      && f->sym->ts.u.cl->length\n-\t      && f->sym->ts.u.cl->length->expr_type == EXPR_CONSTANT)\n+\t      && f->sym->ts.u.cl->length->expr_type == EXPR_CONSTANT\n+\t      && (flag_tail_call_workaround == 2\n+\t\t  || f->sym->ns->implicit_interface_calls))\n \t    DECL_HIDDEN_STRING_LENGTH (length) = 1;\n \n \t  /* Remember the passed value.  */"}]}