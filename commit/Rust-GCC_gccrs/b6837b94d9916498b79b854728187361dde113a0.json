{"sha": "b6837b94d9916498b79b854728187361dde113a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY4MzdiOTRkOTkxNjQ5OGI3OWI4NTQ3MjgxODczNjFkZGUxMTNhMA==", "commit": {"author": {"name": "Joey Ye", "email": "joey.ye@intel.com", "date": "2009-04-06T20:53:33Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-04-06T20:53:33Z"}, "message": "Atom pipeline model, tuning and insn selection.\n\n2009-04-06  Joey Ye  <joey.ye@intel.com>\n\t    Xuepeng Guo <xuepeng.guo@intel.com>\n\t    H.J. Lu  <hongjiu.lu@intel.com>\n\n\tAtom pipeline model, tuning and insn selection.\n\t* config.gcc (atom): Add atom config options and target.\n\n\t* config/i386/atom.md: New.\n\n\t* config/i386/i386.c (atom_cost): New cost.\n\t(m_ATOM): New macro flag.\n\t(initial_ix86_tune_features): Set m_ATOM.\n\t(x86_accumulate_outgoing_args): Likewise.\n\t(x86_arch_always_fancy_math_387): Likewise.\n\t(processor_target): Add Atom cost.\n\t(cpu_names): Add Atom cpu name.\n\t(override_options): Set Atom ISA.\n\t(ix86_issue_rate): New case PROCESSOR_ATOM.\n\t(ix86_adjust_cost): Likewise.\n\n\t* config/i386/i386.h (TARGET_ATOM): New target macro.\n\t(ix86_tune_indices): Add X86_TUNE_OPT_AGU.\n\t(TARGET_OPT_AGU): New target option.\n\t(target_cpu_default): Add TARGET_CPU_DEFAULT_atom.\n\t(processor_type): Add PROCESSOR_ATOM.\n\n\t* config/i386/i386.md (cpu): Add new value \"atom\".\n\t(use_carry, movu): New attr.\n\t(atom.md): Include atom.md.\n\t(adddi3_carry_rex64): Set attr \"use_carry\".\n\t(addqi3_carry): Likewise.\n\t(addhi3_carry): Likewise.\n\t(addsi3_carry): Likewise.\n\t(*addsi3_carry_zext): Likewise.\n\t(subdi3_carry_rex64): Likewise.\n\t(subqi3_carry): Likewise.\n\t(subhi3_carry): Likewise.\n\t(subsi3_carry): Likewise.\n\t(x86_movdicc_0_m1_rex64): Likewise.\n\t(*x86_movdicc_0_m1_se): Likewise.\n\t(x86_movsicc_0_m1): Likewise.\n\t(*x86_movsicc_0_m1_se): Likewise.\n\t(*adddi_1_rex64): Emit add insn as much as possible.\n\t(*addsi_1): Likewise.\n\t(return_internal): Set atom_unit.\n\t(return_internal_long): Likewise.\n\t(return_pop_internal): Likewise.\n\t(*rcpsf2_sse): Set atom_sse_attr attr.\n\t(*qrt<mode>2_sse): Likewise.\n\t(*prefetch_sse): Likewise.\n\n\t* config/i386/i386-c.c (ix86_target_macros_internal): New case\n\tPROCESSOR_ATOM.\n\t(ix86_target_macros_internal): Likewise.\n\n\t* config/i386/sse.md (cpu): Set attr \"atom_sse_attr\".\n\t(*prefetch_sse_rex): Likewise.\n\t(sse_rcpv4sf2): Likewise.\n\t(sse_vmrcpv4sf2): Likewise.\n\t(sse_sqrtv4sf2): Likewise.\n\t(<sse>_vmsqrt<mode>2): Likewise.\n\t(sse_ldmxcsr): Likewise.\n\t(sse_stmxcsr): Likewise.\n\t(*sse_sfence): Likewise.\n\t(sse2_clflush): Likewise.\n\t(*sse2_mfence): Likewise.\n\t(*sse2_lfence): Likewise.\n\t(avx_movup<avxmodesuffixf2c><avxmodesuffix>): Set attr \"movu\".\n\t(<sse>_movup<ssemodesuffixf2c>): Likewise.\n\t(avx_movdqu<avxmodesuffix>): Likewise.\n\t(avx_lddqu<avxmodesuffix>): Likewise.\n\t(sse2_movntv2di): Change attr \"type\" to \"ssemov\".\n\t(sse2_movntsi): Likewise.\n\t(rsqrtv8sf2): Change attr \"type\" to \"sseadd\".\n\t(sse3_addsubv2df3): Set attr \"atom_unit\".\n\t(sse3_h<plusminus_insn>v4sf3): Likewise.\n\t(*sse2_pmaddwd): Likewise.\n\t(*vec_extractv2di_1_rex64): Likewise.\n\t(*vec_extractv2di_1_avx): Likewise.\n\t(sse2_psadbw): Likewise.\n\t(ssse3_phaddwv8hi3): Likewise.\n\t(ssse3_phaddwv4hi3): Likewise.\n\t(ssse3_phadddv4si3): Likewise.\n\t(ssse3_phadddv2si3): Likewise.\n\t(ssse3_phaddswv8hi3): Likewise.\n\t(ssse3_phaddswv4hi3): Likewise.\n\t(ssse3_phsubwv8hi3): Likewise.\n\t(ssse3_phsubwv4hi3): Likewise.\n\t(ssse3_phsubdv4si3): Likewise.\n\t(ssse3_phsubdv2si3): Likewise.\n\t(ssse3_phsubswv8hi3): Likewise.\n\t(ssse3_phsubswv4hi3): Likewise.\n\t(ssse3_pmaddubsw128): Likewise.\n\t(sse3_pmaddubsw: Likewise.\n\t(ssse3_palignrti): Likewise.\n\t(ssse3_palignrdi): Likewise.\n\nCo-Authored-By: H.J. Lu <hongjiu.lu@intel.com>\nCo-Authored-By: Xuepeng Guo <xuepeng.guo@intel.com>\n\nFrom-SVN: r145624", "tree": {"sha": "463ec26dfaa89ac985b89c870603ef637eed0124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/463ec26dfaa89ac985b89c870603ef637eed0124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6837b94d9916498b79b854728187361dde113a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6837b94d9916498b79b854728187361dde113a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6837b94d9916498b79b854728187361dde113a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6837b94d9916498b79b854728187361dde113a0/comments", "author": {"login": "npg-joey", "id": 81339828, "node_id": "MDQ6VXNlcjgxMzM5ODI4", "avatar_url": "https://avatars.githubusercontent.com/u/81339828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npg-joey", "html_url": "https://github.com/npg-joey", "followers_url": "https://api.github.com/users/npg-joey/followers", "following_url": "https://api.github.com/users/npg-joey/following{/other_user}", "gists_url": "https://api.github.com/users/npg-joey/gists{/gist_id}", "starred_url": "https://api.github.com/users/npg-joey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npg-joey/subscriptions", "organizations_url": "https://api.github.com/users/npg-joey/orgs", "repos_url": "https://api.github.com/users/npg-joey/repos", "events_url": "https://api.github.com/users/npg-joey/events{/privacy}", "received_events_url": "https://api.github.com/users/npg-joey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d63ea7513c766c1d45e167fe827ac4bd680aac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d63ea7513c766c1d45e167fe827ac4bd680aac6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d63ea7513c766c1d45e167fe827ac4bd680aac6"}], "stats": {"total": 1164, "additions": 1108, "deletions": 56}, "files": [{"sha": "5c867473ddd5b25e6449ae2f3d6d94b50717a01d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6837b94d9916498b79b854728187361dde113a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6837b94d9916498b79b854728187361dde113a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6837b94d9916498b79b854728187361dde113a0", "patch": "@@ -1,3 +1,100 @@\n+2009-04-06  Joey Ye  <joey.ye@intel.com>\n+\t    Xuepeng Guo <xuepeng.guo@intel.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tAtom pipeline model, tuning and insn selection.\n+\t* config.gcc (atom): Add atom config options and target.\n+\n+\t* config/i386/atom.md: New.\n+\n+\t* config/i386/i386.c (atom_cost): New cost.\n+\t(m_ATOM): New macro flag.\n+\t(initial_ix86_tune_features): Set m_ATOM.\n+\t(x86_accumulate_outgoing_args): Likewise.\n+\t(x86_arch_always_fancy_math_387): Likewise.\n+\t(processor_target): Add Atom cost.\n+\t(cpu_names): Add Atom cpu name.\n+\t(override_options): Set Atom ISA.\n+\t(ix86_issue_rate): New case PROCESSOR_ATOM.\n+\t(ix86_adjust_cost): Likewise.\n+\n+\t* config/i386/i386.h (TARGET_ATOM): New target macro.\n+\t(ix86_tune_indices): Add X86_TUNE_OPT_AGU.\n+\t(TARGET_OPT_AGU): New target option.\n+\t(target_cpu_default): Add TARGET_CPU_DEFAULT_atom.\n+\t(processor_type): Add PROCESSOR_ATOM.\n+\n+\t* config/i386/i386.md (cpu): Add new value \"atom\".\n+\t(use_carry, movu): New attr.\n+\t(atom.md): Include atom.md.\n+\t(adddi3_carry_rex64): Set attr \"use_carry\".\n+\t(addqi3_carry): Likewise.\n+\t(addhi3_carry): Likewise.\n+\t(addsi3_carry): Likewise.\n+\t(*addsi3_carry_zext): Likewise.\n+\t(subdi3_carry_rex64): Likewise.\n+\t(subqi3_carry): Likewise.\n+\t(subhi3_carry): Likewise.\n+\t(subsi3_carry): Likewise.\n+\t(x86_movdicc_0_m1_rex64): Likewise.\n+\t(*x86_movdicc_0_m1_se): Likewise.\n+\t(x86_movsicc_0_m1): Likewise.\n+\t(*x86_movsicc_0_m1_se): Likewise.\n+\t(*adddi_1_rex64): Emit add insn as much as possible.\n+\t(*addsi_1): Likewise.\n+\t(return_internal): Set atom_unit.\n+\t(return_internal_long): Likewise.\n+\t(return_pop_internal): Likewise.\n+\t(*rcpsf2_sse): Set atom_sse_attr attr.\n+\t(*qrt<mode>2_sse): Likewise.\n+\t(*prefetch_sse): Likewise.\n+\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): New case\n+\tPROCESSOR_ATOM.\n+\t(ix86_target_macros_internal): Likewise.\n+\n+\t* config/i386/sse.md (cpu): Set attr \"atom_sse_attr\".\n+\t(*prefetch_sse_rex): Likewise.\n+\t(sse_rcpv4sf2): Likewise.\n+\t(sse_vmrcpv4sf2): Likewise.\n+\t(sse_sqrtv4sf2): Likewise.\n+\t(<sse>_vmsqrt<mode>2): Likewise.\n+\t(sse_ldmxcsr): Likewise.\n+\t(sse_stmxcsr): Likewise.\n+\t(*sse_sfence): Likewise.\n+\t(sse2_clflush): Likewise.\n+\t(*sse2_mfence): Likewise.\n+\t(*sse2_lfence): Likewise.\n+\t(avx_movup<avxmodesuffixf2c><avxmodesuffix>): Set attr \"movu\".\n+\t(<sse>_movup<ssemodesuffixf2c>): Likewise.\n+\t(avx_movdqu<avxmodesuffix>): Likewise.\n+\t(avx_lddqu<avxmodesuffix>): Likewise.\n+\t(sse2_movntv2di): Change attr \"type\" to \"ssemov\".\n+\t(sse2_movntsi): Likewise.\n+\t(rsqrtv8sf2): Change attr \"type\" to \"sseadd\".\n+\t(sse3_addsubv2df3): Set attr \"atom_unit\".\n+\t(sse3_h<plusminus_insn>v4sf3): Likewise.\n+\t(*sse2_pmaddwd): Likewise.\n+\t(*vec_extractv2di_1_rex64): Likewise.\n+\t(*vec_extractv2di_1_avx): Likewise.\n+\t(sse2_psadbw): Likewise.\n+\t(ssse3_phaddwv8hi3): Likewise.\n+\t(ssse3_phaddwv4hi3): Likewise.\n+\t(ssse3_phadddv4si3): Likewise.\n+\t(ssse3_phadddv2si3): Likewise.\n+\t(ssse3_phaddswv8hi3): Likewise.\n+\t(ssse3_phaddswv4hi3): Likewise.\n+\t(ssse3_phsubwv8hi3): Likewise.\n+\t(ssse3_phsubwv4hi3): Likewise.\n+\t(ssse3_phsubdv4si3): Likewise.\n+\t(ssse3_phsubdv2si3): Likewise.\n+\t(ssse3_phsubswv8hi3): Likewise.\n+\t(ssse3_phsubswv4hi3): Likewise.\n+\t(ssse3_pmaddubsw128): Likewise.\n+\t(sse3_pmaddubsw: Likewise.\n+\t(ssse3_palignrti): Likewise.\n+\t(ssse3_palignrdi): Likewise.\n+\n 2009-04-06  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (Specific): Fix two cross-references to MinGW."}, {"sha": "74e79fc4502052f1e310cb07068b7eefdfce5ac3", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b6837b94d9916498b79b854728187361dde113a0", "patch": "@@ -1074,7 +1074,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\ttmake_file=\"${tmake_file} i386/t-linux64\"\n \t\t\tneed_64bit_hwint=yes\n \t\t\tcase X\"${with_cpu}\" in\n-\t\t\tXgeneric|Xcore2|Xnocona|Xx86-64|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx)\n+\t\t\tXgeneric|Xatom|Xcore2|Xnocona|Xx86-64|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx)\n \t\t\t\t;;\n \t\t\tX)\n \t\t\t\tif test x$with_cpu_64 = x; then\n@@ -1083,7 +1083,7 @@ i[34567]86-*-linux* | i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-knetbsd*-gnu | i\n \t\t\t\t;;\n \t\t\t*)\n \t\t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\t\techo \"generic core2 nocona x86-64 amdfam10 barcelona k8 opteron athlon64 athlon-fx\" 1>&2\n+\t\t\t\techo \"generic atom core2 nocona x86-64 amdfam10 barcelona k8 opteron athlon64 athlon-fx\" 1>&2\n \t\t\t\texit 1\n \t\t\t\t;;\n \t\t\tesac\n@@ -1189,7 +1189,7 @@ i[34567]86-*-solaris2*)\n \t\tneed_64bit_hwint=yes\n \t\tuse_gcc_stdint=wrap\n \t\tcase X\"${with_cpu}\" in\n-\t\tXgeneric|Xcore2|Xnocona|Xx86-64|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx)\n+\t\tXgeneric|Xatom|Xcore2|Xnocona|Xx86-64|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx)\n \t\t\t;;\n \t\tX)\n \t\t\tif test x$with_cpu_64 = x; then\n@@ -1198,7 +1198,7 @@ i[34567]86-*-solaris2*)\n \t\t\t;;\n \t\t*)\n \t\t\techo \"Unsupported CPU used in --with-cpu=$with_cpu, supported values:\" 1>&2\n-\t\t\techo \"generic core2 nocona x86-64 amdfam10 barcelona k8 opteron athlon64 athlon-fx\" 1>&2\n+\t\t\techo \"generic atom core2 nocona x86-64 amdfam10 barcelona k8 opteron athlon64 athlon-fx\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n@@ -2801,7 +2801,7 @@ case \"${target}\" in\n \t\t\t\tesac\n \t\t\t\t# OK\n \t\t\t\t;;\n-\t\t\t\"\" | amdfam10 | barcelona | k8 | opteron | athlon64 | athlon-fx | nocona | core2 | generic)\n+\t\t\t\"\" | amdfam10 | barcelona | k8 | opteron | athlon64 | athlon-fx | nocona | core2 | atom | generic)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "9d5cbf24a196144faf3be7fb633138eaa320ef6b", "filename": "gcc/config/i386/atom.md", "status": "added", "additions": 770, "deletions": 0, "changes": 770, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fatom.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fatom.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatom.md?ref=b6837b94d9916498b79b854728187361dde113a0", "patch": "@@ -0,0 +1,770 @@\n+;; Atom Scheduling\n+;; Copyright (C) 2009 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+;; Atom is an in-order core with two integer pipelines.\n+\n+\n+(define_attr \"atom_unit\" \"sishuf,simul,jeu,complex,other\" \n+  (const_string \"other\"))\n+\n+(define_attr \"atom_sse_attr\" \"rcp,movdup,lfence,fence,prefetch,sqrt,mxcsr,other\"\n+  (const_string \"other\"))\n+\n+(define_automaton \"atom\")\n+\n+;;  Atom has two ports: port 0 and port 1 connecting to all execution units\n+(define_cpu_unit \"atom-port-0,atom-port-1\" \"atom\")\n+\n+;;  EU: Execution Unit\n+;;  Atom EUs are connected by port 0 or port 1. \n+\n+(define_cpu_unit \"atom-eu-0, atom-eu-1,\n+                  atom-imul-1, atom-imul-2, atom-imul-3, atom-imul-4\"\n+                  \"atom\")\n+\n+;; Some EUs have duplicated copied and can be accessed via either\n+;; port 0 or port 1\n+;; (define_reservation \"atom-port-either\" \"(atom-port-0 | atom-port-1)\")\n+\n+;;; Some instructions is dual-pipe execution, need both ports\n+;;; Complex multi-op macro-instructoins need both ports and all EUs\n+(define_reservation \"atom-port-dual\" \"(atom-port-0 + atom-port-1)\")\n+(define_reservation \"atom-all-eu\" \"(atom-eu-0 + atom-eu-1 + \n+                                    atom-imul-1 + atom-imul-2 + atom-imul-3 +\n+                                    atom-imul-4)\")\n+\n+;;; Most of simple instructions have 1 cycle latency. Some of them\n+;;; issue in port 0, some in port 0 and some in either port.\n+(define_reservation \"atom-simple-0\" \"(atom-port-0 + atom-eu-0)\")\n+(define_reservation \"atom-simple-1\" \"(atom-port-1 + atom-eu-1)\")\n+(define_reservation \"atom-simple-either\" \"(atom-simple-0 | atom-simple-1)\")\n+\n+;;; Some insn issues in port 0 with 3 cycle latency and 1 cycle tput\n+(define_reservation \"atom-eu-0-3-1\" \"(atom-port-0 + atom-eu-0, nothing*2)\")\n+\n+;;; fmul insn can have 4 or 5 cycles latency\n+(define_reservation \"atom-fmul-5c\" \"(atom-port-0 + atom-eu-0), nothing*4\")\n+(define_reservation \"atom-fmul-4c\" \"(atom-port-0 + atom-eu-0), nothing*3\")\n+\n+;;; fadd can has 5 cycles latency depends on instruction forms\n+(define_reservation \"atom-fadd-5c\" \"(atom-port-1 + atom-eu-1), nothing*5\")\n+\n+;;; imul insn has 5 cycles latency\n+(define_reservation \"atom-imul-32\" \n+                    \"atom-imul-1, atom-imul-2, atom-imul-3, atom-imul-4, \n+                     atom-port-0\")\n+;;; imul instruction excludes other non-FP instructions.\n+(exclusion_set \"atom-eu-0, atom-eu-1\" \n+               \"atom-imul-1, atom-imul-2, atom-imul-3, atom-imul-4\")\n+\n+;;; dual-execution instructions can have 1,2,4,5 cycles latency depends on \n+;;; instruction forms\n+(define_reservation \"atom-dual-1c\" \"(atom-port-dual + atom-eu-0 + atom-eu-1)\")\n+(define_reservation \"atom-dual-2c\"\n+                    \"(atom-port-dual + atom-eu-0 + atom-eu-1, nothing)\")\n+(define_reservation \"atom-dual-5c\"\n+                    \"(atom-port-dual + atom-eu-0 + atom-eu-1, nothing*4)\")\n+\n+;;; Complex macro-instruction has variants of latency, and uses both ports.\n+(define_reservation \"atom-complex\" \"(atom-port-dual + atom-all-eu)\")\n+\n+(define_insn_reservation  \"atom_other\" 9\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"other\")\n+            (eq_attr \"atom_unit\" \"!jeu\")))\n+  \"atom-complex, atom-all-eu*8\")\n+\n+;; return has type \"other\" with atom_unit \"jeu\"\n+(define_insn_reservation  \"atom_other_2\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"other\")\n+            (eq_attr \"atom_unit\" \"jeu\")))\n+  \"atom-dual-1c\")\n+\n+(define_insn_reservation  \"atom_multi\" 9\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (eq_attr \"type\" \"multi\"))\n+  \"atom-complex, atom-all-eu*8\")\n+\n+;; Normal alu insns without carry\n+(define_insn_reservation  \"atom_alu\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"alu\")\n+            (and (eq_attr \"memory\" \"none\")\n+                 (eq_attr \"use_carry\" \"0\"))))\n+  \"atom-simple-either\")\n+\n+;; Normal alu insns without carry\n+(define_insn_reservation  \"atom_alu_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"alu\")\n+            (and (eq_attr \"memory\" \"!none\")\n+                 (eq_attr \"use_carry\" \"0\"))))\n+  \"atom-simple-either\")\n+\n+;; Alu insn consuming CF, such as add/sbb\n+(define_insn_reservation  \"atom_alu_carry\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"alu\")\n+            (and (eq_attr \"memory\" \"none\")\n+                 (eq_attr \"use_carry\" \"1\"))))\n+  \"atom-simple-either\")\n+\n+;; Alu insn consuming CF, such as add/sbb\n+(define_insn_reservation  \"atom_alu_carry_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"alu\")\n+            (and (eq_attr \"memory\" \"!none\")\n+                (eq_attr \"use_carry\" \"1\"))))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_alu1\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"alu1\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_alu1_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"alu1\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_negnot\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"negnot\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_negnot_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"negnot\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_imov\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"imov\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_imov_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"imov\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-either\")\n+\n+;; 16<-16, 32<-32\n+(define_insn_reservation  \"atom_imovx\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"imovx\")\n+            (and (eq_attr \"memory\" \"none\")\n+                 (ior (and (match_operand:HI 0 \"register_operand\")\n+                           (match_operand:HI 1 \"general_operand\"))\n+                      (and (match_operand:SI 0 \"register_operand\")\n+                           (match_operand:SI 1 \"general_operand\"))))))\n+  \"atom-simple-either\")\n+\n+;; 16<-16, 32<-32, mem\n+(define_insn_reservation  \"atom_imovx_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"imovx\")\n+            (and (eq_attr \"memory\" \"!none\")\n+                 (ior (and (match_operand:HI 0 \"register_operand\")\n+                           (match_operand:HI 1 \"general_operand\"))\n+                      (and (match_operand:SI 0 \"register_operand\")\n+                           (match_operand:SI 1 \"general_operand\"))))))\n+  \"atom-simple-either\")\n+\n+;; 32<-16, 32<-8, 64<-16, 64<-8, 64<-32, 8<-8\n+(define_insn_reservation  \"atom_imovx_2\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"imovx\")\n+            (and (eq_attr \"memory\" \"none\")\n+                 (ior (match_operand:QI 0 \"register_operand\")\n+                      (ior (and (match_operand:SI 0 \"register_operand\")\n+                                (not (match_operand:SI 1 \"general_operand\")))\n+                           (match_operand:DI 0 \"register_operand\"))))))\n+  \"atom-simple-0\")\n+\n+;; 32<-16, 32<-8, 64<-16, 64<-8, 64<-32, 8<-8, mem\n+(define_insn_reservation  \"atom_imovx_2_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"imovx\")\n+            (and (eq_attr \"memory\" \"!none\")\n+                 (ior (match_operand:QI 0 \"register_operand\")\n+                      (ior (and (match_operand:SI 0 \"register_operand\")\n+                                (not (match_operand:SI 1 \"general_operand\")))\n+                           (match_operand:DI 0 \"register_operand\"))))))\n+  \"atom-simple-0\")\n+\n+;; 16<-8\n+(define_insn_reservation  \"atom_imovx_3\" 3\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"imovx\")\n+            (and (match_operand:HI 0 \"register_operand\")\n+                 (match_operand:QI 1 \"general_operand\"))))\n+  \"atom-complex, atom-all-eu*2\")\n+\n+(define_insn_reservation  \"atom_lea\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"lea\")\n+            (eq_attr \"mode\" \"!HI\")))\n+  \"atom-simple-either\")\n+\n+;; lea 16bit address is complex insn\n+(define_insn_reservation  \"atom_lea_2\" 2\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"lea\")\n+            (eq_attr \"mode\" \"HI\")))\n+  \"atom-complex, atom-all-eu\")\n+\n+(define_insn_reservation  \"atom_incdec\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"incdec\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_incdec_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"incdec\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-either\")\n+\n+;; simple shift instruction use SHIFT eu, none memory\n+(define_insn_reservation  \"atom_ishift\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ishift\")\n+            (and (eq_attr \"memory\" \"none\") (eq_attr \"prefix_0f\" \"0\"))))\n+  \"atom-simple-0\")\n+\n+;; simple shift instruction use SHIFT eu, memory\n+(define_insn_reservation  \"atom_ishift_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ishift\")\n+            (and (eq_attr \"memory\" \"!none\") (eq_attr \"prefix_0f\" \"0\"))))\n+  \"atom-simple-0\")\n+\n+;; DF shift (prefixed with 0f) is complex insn with latency of 7 cycles\n+(define_insn_reservation  \"atom_ishift_3\" 7\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ishift\")\n+            (eq_attr \"prefix_0f\" \"1\")))\n+  \"atom-complex, atom-all-eu*6\")\n+\n+(define_insn_reservation  \"atom_ishift1\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ishift1\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-0\")\n+\n+(define_insn_reservation  \"atom_ishift1_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ishift1\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-0\")\n+\n+(define_insn_reservation  \"atom_rotate\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"rotate\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-0\")\n+\n+(define_insn_reservation  \"atom_rotate_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"rotate\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-0\")\n+\n+(define_insn_reservation  \"atom_rotate1\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"rotate1\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-0\")\n+\n+(define_insn_reservation  \"atom_rotate1_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"rotate1\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-0\")\n+\n+(define_insn_reservation  \"atom_imul\" 5\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"imul\")\n+            (and (eq_attr \"memory\" \"none\") (eq_attr \"mode\" \"SI\"))))\n+  \"atom-imul-32\")\n+\n+(define_insn_reservation  \"atom_imul_mem\" 5\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"imul\")\n+            (and (eq_attr \"memory\" \"!none\") (eq_attr \"mode\" \"SI\"))))\n+  \"atom-imul-32\")\n+\n+;; latency set to 10 as common 64x64 imul\n+(define_insn_reservation  \"atom_imul_3\" 10\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"imul\")\n+            (eq_attr \"mode\" \"!SI\")))\n+  \"atom-complex, atom-all-eu*9\")\n+\n+(define_insn_reservation  \"atom_idiv\" 65\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (eq_attr \"type\" \"idiv\"))\n+  \"atom-complex, atom-all-eu*32, nothing*32\")\n+\n+(define_insn_reservation  \"atom_icmp\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"icmp\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_icmp_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"icmp\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_test\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"test\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_test_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"test\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_ibr\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ibr\")\n+            (eq_attr \"memory\" \"!load\")))\n+  \"atom-simple-1\")\n+\n+;; complex if jump target is from address\n+(define_insn_reservation  \"atom_ibr_2\" 2\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ibr\")\n+            (eq_attr \"memory\" \"load\")))\n+  \"atom-complex, atom-all-eu\")\n+\n+(define_insn_reservation  \"atom_setcc\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"setcc\")\n+            (eq_attr \"memory\" \"!store\")))\n+  \"atom-simple-either\")\n+\n+;; 2 cycles complex if target is in memory\n+(define_insn_reservation  \"atom_setcc_2\" 2\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"setcc\")\n+            (eq_attr \"memory\" \"store\")))\n+  \"atom-complex, atom-all-eu\")\n+\n+(define_insn_reservation  \"atom_icmov\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"icmov\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_icmov_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"icmov\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-either\")\n+\n+;; UCODE if segreg, ignored\n+(define_insn_reservation  \"atom_push\" 2\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (eq_attr \"type\" \"push\"))\n+  \"atom-dual-2c\")\n+\n+;; pop r64 is 1 cycle. UCODE if segreg, ignored\n+(define_insn_reservation  \"atom_pop\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"pop\")\n+            (eq_attr \"mode\" \"DI\")))\n+  \"atom-dual-1c\")\n+\n+;; pop non-r64 is 2 cycles. UCODE if segreg, ignored\n+(define_insn_reservation  \"atom_pop_2\" 2\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"pop\")\n+            (eq_attr \"mode\" \"!DI\")))\n+  \"atom-dual-2c\")\n+\n+;; UCODE if segreg, ignored\n+(define_insn_reservation  \"atom_call\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (eq_attr \"type\" \"call\"))\n+  \"atom-dual-1c\")\n+\n+(define_insn_reservation  \"atom_callv\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (eq_attr \"type\" \"callv\"))\n+  \"atom-dual-1c\")\n+\n+(define_insn_reservation  \"atom_leave\" 3\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (eq_attr \"type\" \"leave\"))\n+  \"atom-complex, atom-all-eu*2\")\n+\n+(define_insn_reservation  \"atom_str\" 3\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (eq_attr \"type\" \"str\"))\n+  \"atom-complex, atom-all-eu*2\")\n+\n+(define_insn_reservation  \"atom_sselog\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sselog\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_sselog_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sselog\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_sselog1\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sselog1\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-0\")\n+\n+(define_insn_reservation  \"atom_sselog1_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sselog1\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-0\")\n+\n+;; not pmad, not psad\n+(define_insn_reservation  \"atom_sseiadd\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseiadd\")\n+            (and (not (match_operand:V2DI 0 \"register_operand\"))\n+                 (and (eq_attr \"atom_unit\" \"!simul\")\n+                      (eq_attr \"atom_unit\" \"!complex\")))))\n+  \"atom-simple-either\")\n+\n+;; pmad, psad and 64\n+(define_insn_reservation  \"atom_sseiadd_2\" 4\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseiadd\")\n+            (and (not (match_operand:V2DI 0 \"register_operand\"))\n+                 (and (eq_attr \"atom_unit\" \"simul\" )\n+                      (eq_attr \"mode\" \"DI\")))))\n+  \"atom-fmul-4c\")\n+\n+;; pmad, psad and 128\n+(define_insn_reservation  \"atom_sseiadd_3\" 5\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseiadd\")\n+            (and (not (match_operand:V2DI 0 \"register_operand\"))\n+                 (and (eq_attr \"atom_unit\" \"simul\" )\n+                      (eq_attr \"mode\" \"TI\")))))\n+  \"atom-fmul-5c\")\n+\n+;; if paddq(64 bit op), phadd/phsub\n+(define_insn_reservation  \"atom_sseiadd_4\" 6\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseiadd\")\n+            (ior (match_operand:V2DI 0 \"register_operand\")\n+                 (eq_attr \"atom_unit\" \"complex\"))))\n+  \"atom-complex, atom-all-eu*5\")\n+\n+;; if immediate op. \n+(define_insn_reservation  \"atom_sseishft\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseishft\")\n+            (and (eq_attr \"atom_unit\" \"!sishuf\")\n+                 (match_operand 2 \"immediate_operand\"))))\n+  \"atom-simple-either\")\n+\n+;; if palignr or psrldq\n+(define_insn_reservation  \"atom_sseishft_2\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseishft\")\n+            (and (eq_attr \"atom_unit\" \"sishuf\")\n+                 (match_operand 2 \"immediate_operand\"))))\n+  \"atom-simple-0\")\n+\n+;; if reg/mem op\n+(define_insn_reservation  \"atom_sseishft_3\" 2\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseishft\")\n+            (not (match_operand 2 \"immediate_operand\"))))\n+  \"atom-complex, atom-all-eu\")\n+\n+(define_insn_reservation  \"atom_sseimul\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (eq_attr \"type\" \"sseimul\"))\n+  \"atom-simple-0\")\n+\n+;; rcpss or rsqrtss\n+(define_insn_reservation  \"atom_sse\" 4\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sse\")\n+            (and (eq_attr \"atom_sse_attr\" \"rcp\") (eq_attr \"mode\" \"SF\"))))\n+  \"atom-fmul-4c\")\n+\n+;; movshdup, movsldup. Suggest to type sseishft\n+(define_insn_reservation  \"atom_sse_2\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sse\")\n+            (eq_attr \"atom_sse_attr\" \"movdup\")))\n+  \"atom-simple-0\")\n+\n+;; lfence\n+(define_insn_reservation  \"atom_sse_3\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sse\")\n+            (eq_attr \"atom_sse_attr\" \"lfence\")))\n+  \"atom-simple-either\")\n+\n+;; sfence,clflush,mfence, prefetch\n+(define_insn_reservation  \"atom_sse_4\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sse\")\n+            (ior (eq_attr \"atom_sse_attr\" \"fence\")\n+                 (eq_attr \"atom_sse_attr\" \"prefetch\"))))\n+  \"atom-simple-0\")\n+\n+;; rcpps, rsqrtss, sqrt, ldmxcsr\n+(define_insn_reservation  \"atom_sse_5\" 7\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sse\")\n+            (ior (ior (eq_attr \"atom_sse_attr\" \"sqrt\")\n+                      (eq_attr \"atom_sse_attr\" \"mxcsr\"))\n+                 (and (eq_attr \"atom_sse_attr\" \"rcp\")\n+                      (eq_attr \"mode\" \"V4SF\")))))\n+  \"atom-complex, atom-all-eu*6\")\n+\n+;; xmm->xmm\n+(define_insn_reservation  \"atom_ssemov\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ssemov\")\n+            (and (match_operand 0 \"register_operand\" \"xy\") (match_operand 1 \"register_operand\" \"xy\"))))\n+  \"atom-simple-either\")\n+\n+;; reg->xmm\n+(define_insn_reservation  \"atom_ssemov_2\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ssemov\")\n+            (and (match_operand 0 \"register_operand\" \"xy\") (match_operand 1 \"register_operand\" \"r\"))))\n+  \"atom-simple-0\")\n+\n+;; xmm->reg\n+(define_insn_reservation  \"atom_ssemov_3\" 3\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ssemov\")\n+            (and (match_operand 0 \"register_operand\" \"r\") (match_operand 1 \"register_operand\" \"xy\"))))\n+  \"atom-eu-0-3-1\")\n+\n+;; mov mem\n+(define_insn_reservation  \"atom_ssemov_4\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ssemov\")\n+            (and (eq_attr \"movu\" \"0\") (eq_attr \"memory\" \"!none\"))))\n+  \"atom-simple-0\")\n+\n+;; movu mem\n+(define_insn_reservation  \"atom_ssemov_5\" 2\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ssemov\")\n+            (ior (eq_attr \"movu\" \"1\") (eq_attr \"memory\" \"!none\"))))\n+  \"atom-complex, atom-all-eu\")\n+\n+;; no memory simple\n+(define_insn_reservation  \"atom_sseadd\" 5\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseadd\")\n+            (and (eq_attr \"memory\" \"none\")\n+                 (and (eq_attr \"mode\" \"!V2DF\")\n+                      (eq_attr \"atom_unit\" \"!complex\")))))\n+  \"atom-fadd-5c\")\n+\n+;; memory simple\n+(define_insn_reservation  \"atom_sseadd_mem\" 5\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseadd\")\n+            (and (eq_attr \"memory\" \"!none\")\n+                 (and (eq_attr \"mode\" \"!V2DF\")\n+                      (eq_attr \"atom_unit\" \"!complex\")))))\n+  \"atom-dual-5c\")\n+\n+;; maxps, minps, *pd, hadd, hsub\n+(define_insn_reservation  \"atom_sseadd_3\" 8\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseadd\")\n+            (ior (eq_attr \"mode\" \"V2DF\") (eq_attr \"atom_unit\" \"complex\"))))\n+  \"atom-complex, atom-all-eu*7\")\n+\n+;; Except dppd/dpps\n+(define_insn_reservation  \"atom_ssemul\" 5\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ssemul\")\n+            (eq_attr \"mode\" \"!SF\")))\n+  \"atom-fmul-5c\")\n+\n+;; Except dppd/dpps, 4 cycle if mulss\n+(define_insn_reservation  \"atom_ssemul_2\" 4\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ssemul\")\n+            (eq_attr \"mode\" \"SF\")))\n+  \"atom-fmul-4c\")\n+\n+(define_insn_reservation  \"atom_ssecmp\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (eq_attr \"type\" \"ssecmp\"))\n+  \"atom-simple-either\")\n+\n+(define_insn_reservation  \"atom_ssecomi\" 10\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (eq_attr \"type\" \"ssecomi\"))\n+  \"atom-complex, atom-all-eu*9\")\n+\n+;; no memory and cvtpi2ps, cvtps2pi, cvttps2pi\n+(define_insn_reservation  \"atom_ssecvt\" 5\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ssecvt\")\n+            (ior (and (match_operand:V2SI 0 \"register_operand\")\n+                      (match_operand:V4SF 1 \"register_operand\"))\n+                 (and (match_operand:V4SF 0 \"register_operand\")\n+                      (match_operand:V2SI 1 \"register_operand\")))))\n+  \"atom-fadd-5c\")\n+\n+;; memory and cvtpi2ps, cvtps2pi, cvttps2pi\n+(define_insn_reservation  \"atom_ssecvt_2\" 5\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ssecvt\")\n+            (ior (and (match_operand:V2SI 0 \"register_operand\")\n+                      (match_operand:V4SF 1 \"memory_operand\"))\n+                 (and (match_operand:V4SF 0 \"register_operand\")\n+                      (match_operand:V2SI 1 \"memory_operand\")))))\n+  \"atom-dual-5c\")\n+\n+;; otherwise. 7 cycles average for cvtss2sd\n+(define_insn_reservation  \"atom_ssecvt_3\" 7\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"ssecvt\")\n+            (not (ior (and (match_operand:V2SI 0 \"register_operand\")\n+                           (match_operand:V4SF 1 \"nonimmediate_operand\"))\n+                      (and (match_operand:V4SF 0 \"register_operand\")\n+                           (match_operand:V2SI 1 \"nonimmediate_operand\"))))))\n+  \"atom-complex, atom-all-eu*6\")\n+\n+;; memory and cvtsi2sd\n+(define_insn_reservation  \"atom_sseicvt\" 5\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseicvt\")\n+            (and (match_operand:V2DF 0 \"register_operand\")\n+                 (match_operand:SI 1 \"memory_operand\"))))\n+  \"atom-dual-5c\")\n+\n+;; otherwise. 8 cycles average for cvtsd2si\n+(define_insn_reservation  \"atom_sseicvt_2\" 8\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"sseicvt\")\n+            (not (and (match_operand:V2DF 0 \"register_operand\")\n+                      (match_operand:SI 1 \"memory_operand\")))))\n+  \"atom-complex, atom-all-eu*7\")\n+\n+(define_insn_reservation  \"atom_ssediv\" 62\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (eq_attr \"type\" \"ssediv\"))\n+  \"atom-complex, atom-all-eu*12, nothing*49\")\n+\n+;; simple for fmov\n+(define_insn_reservation  \"atom_fmov\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"fmov\")\n+            (eq_attr \"memory\" \"none\")))\n+  \"atom-simple-either\")\n+\n+;; simple for fmov\n+(define_insn_reservation  \"atom_fmov_mem\" 1\n+  (and (eq_attr \"cpu\" \"atom\")\n+       (and (eq_attr \"type\" \"fmov\")\n+            (eq_attr \"memory\" \"!none\")))\n+  \"atom-simple-either\")\n+\n+;; Define bypass here\n+\n+;; There will be no stall from lea to non-mem EX insns\n+(define_bypass 0 \"atom_lea\"\n+                 \"atom_alu_carry,\n+                  atom_alu,atom_alu1,atom_negnot,atom_imov,atom_imovx,\n+                  atom_incdec, atom_setcc, atom_icmov, atom_pop\")\n+\n+(define_bypass 0 \"atom_lea\"\n+                 \"atom_alu_mem, atom_alu_carry_mem, atom_alu1_mem,\n+                  atom_imovx_mem, atom_imovx_2_mem,\n+                  atom_imov_mem, atom_icmov_mem, atom_fmov_mem\"\n+                 \"!ix86_agi_dependent\")\n+\n+;; There will be 3 cycles stall from EX insns to AGAN insns LEA\n+(define_bypass 4 \"atom_alu_carry,\n+                  atom_alu,atom_alu1,atom_negnot,atom_imov,atom_imovx,\n+                  atom_incdec,atom_ishift,atom_ishift1,atom_rotate,\n+                  atom_rotate1, atom_setcc, atom_icmov, atom_pop,\n+                  atom_alu_mem, atom_alu_carry_mem, atom_alu1_mem,\n+                  atom_imovx_mem, atom_imovx_2_mem,\n+                  atom_imov_mem, atom_icmov_mem, atom_fmov_mem\"\n+                 \"atom_lea\")\n+\n+;; There will be 3 cycles stall from EX insns to insns need addr calculation\n+(define_bypass 4 \"atom_alu_carry,\n+                  atom_alu,atom_alu1,atom_negnot,atom_imov,atom_imovx,\n+                  atom_incdec,atom_ishift,atom_ishift1,atom_rotate,\n+                  atom_rotate1, atom_setcc, atom_icmov, atom_pop,\n+                  atom_imovx_mem, atom_imovx_2_mem,\n+                  atom_alu_mem, atom_alu_carry_mem, atom_alu1_mem,\n+                  atom_imov_mem, atom_icmov_mem, atom_fmov_mem\"\n+                 \"atom_alu_mem, atom_alu_carry_mem, atom_alu1_mem,\n+                  atom_negnot_mem, atom_imov_mem, atom_incdec_mem,\n+                  atom_imovx_mem, atom_imovx_2_mem,\n+                  atom_imul_mem, atom_icmp_mem,\n+                  atom_test_mem, atom_icmov_mem, atom_sselog_mem,\n+                  atom_sselog1_mem, atom_fmov_mem, atom_sseadd_mem,\n+                  atom_ishift_mem, atom_ishift1_mem, \n+                  atom_rotate_mem, atom_rotate1_mem\"\n+                  \"ix86_agi_dependent\")\n+\n+;; Stall from imul to lea is 8 cycles.\n+(define_bypass 9 \"atom_imul, atom_imul_mem\" \"atom_lea\")\n+\n+;; Stall from imul to memory address is 8 cycles.\n+(define_bypass 9 \"atom_imul, atom_imul_mem\" \n+                 \"atom_alu_mem, atom_alu_carry_mem, atom_alu1_mem,\n+                  atom_negnot_mem, atom_imov_mem, atom_incdec_mem,\n+                  atom_ishift_mem, atom_ishift1_mem, atom_rotate_mem,\n+                  atom_rotate1_mem, atom_imul_mem, atom_icmp_mem,\n+                  atom_test_mem, atom_icmov_mem, atom_sselog_mem,\n+                  atom_sselog1_mem, atom_fmov_mem, atom_sseadd_mem\"\n+                  \"ix86_agi_dependent\")\n+\n+;; There will be 0 cycle stall from cmp/test to jcc\n+\n+;; There will be 1 cycle stall from flag producer to cmov and adc/sbb\n+(define_bypass 2 \"atom_icmp, atom_test, atom_alu, atom_alu_carry,\n+                  atom_alu1, atom_negnot, atom_incdec, atom_ishift,\n+                  atom_ishift1, atom_rotate, atom_rotate1\"\n+                 \"atom_icmov, atom_alu_carry\")"}, {"sha": "0c59b2fef6cd6c4ed46a3e9976312716986b31aa", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=b6837b94d9916498b79b854728187361dde113a0", "patch": "@@ -119,6 +119,10 @@ ix86_target_macros_internal (int isa_flag,\n       def_or_undef (parse_in, \"__core2\");\n       def_or_undef (parse_in, \"__core2__\");\n       break;\n+    case PROCESSOR_ATOM:\n+      def_or_undef (parse_in, \"__atom\");\n+      def_or_undef (parse_in, \"__atom__\");\n+      break;\n     /* use PROCESSOR_max to not set/unset the arch macro.  */\n     case PROCESSOR_max:\n       break;\n@@ -187,6 +191,9 @@ ix86_target_macros_internal (int isa_flag,\n     case PROCESSOR_CORE2:\n       def_or_undef (parse_in, \"__tune_core2__\");\n       break;\n+    case PROCESSOR_ATOM:\n+      def_or_undef (parse_in, \"__tune_atom__\");\n+      break;\n     case PROCESSOR_GENERIC32:\n     case PROCESSOR_GENERIC64:\n       break;"}, {"sha": "ea9d35efade9af2fa5774483bc8146a483b2214b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 120, "deletions": 27, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b6837b94d9916498b79b854728187361dde113a0", "patch": "@@ -1036,6 +1036,79 @@ struct processor_costs core2_cost = {\n   1,                                    /* cond_not_taken_branch_cost.  */\n };\n \n+static const\n+struct processor_costs atom_cost = {\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n+  COSTS_N_INSNS (1) + 1,\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n+  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_INSNS (4),\t\t\t/*                               HI */\n+   COSTS_N_INSNS (3),\t\t\t/*                               SI */\n+   COSTS_N_INSNS (4),\t\t\t/*                               DI */\n+   COSTS_N_INSNS (2)},\t\t\t/*                               other */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {COSTS_N_INSNS (18),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (26),\t\t\t/*                          HI */\n+   COSTS_N_INSNS (42),\t\t\t/*                          SI */\n+   COSTS_N_INSNS (74),\t\t\t/*                          DI */\n+   COSTS_N_INSNS (74)},\t\t\t/*                          other */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx */\n+  8,\t\t\t\t\t/* \"large\" insn */\n+  17,\t\t\t\t\t/* MOVE_RATIO */\n+  2,\t\t\t\t\t/* cost for loading QImode using movzbl */\n+  {4, 4, 4},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {4, 4, 4},\t\t\t\t/* cost of storing integer registers */\n+  4,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {12, 12, 12},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  {6, 6, 8},\t\t\t\t/* cost of storing fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  2,\t\t\t\t\t/* cost of moving MMX register */\n+  {8, 8},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {8, 8},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  2,\t\t\t\t\t/* cost of moving SSE register */\n+  {8, 8, 8},\t\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  {8, 8, 8},\t\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  5,\t\t\t\t\t/* MMX or SSE register to integer */\n+  32,\t\t\t\t\t/* size of l1 cache.  */\n+  256,\t\t\t\t\t/* size of l2 cache.  */\n+  64,\t\t\t\t\t/* size of prefetch block */\n+  6,\t\t\t\t\t/* number of parallel prefetches */\n+  3,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (20),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (8),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (40),\t\t\t/* cost of FSQRT instruction.  */\n+  {{libcall, {{11, loop}, {-1, rep_prefix_4_byte}}},\n+   {libcall, {{32, loop}, {64, rep_prefix_4_byte},\n+          {8192, rep_prefix_8_byte}, {-1, libcall}}}},\n+  {{libcall, {{8, loop}, {15, unrolled_loop},\n+          {2048, rep_prefix_4_byte}, {-1, libcall}}},\n+   {libcall, {{24, loop}, {32, unrolled_loop},\n+          {8192, rep_prefix_8_byte}, {-1, libcall}}}},\n+  1,                                    /* scalar_stmt_cost.  */\n+  1,                                    /* scalar load_cost.  */\n+  1,                                    /* scalar_store_cost.  */\n+  1,                                    /* vec_stmt_cost.  */\n+  1,                                    /* vec_to_scalar_cost.  */\n+  1,                                    /* scalar_to_vec_cost.  */\n+  1,                                    /* vec_align_load_cost.  */\n+  2,                                    /* vec_unalign_load_cost.  */\n+  1,                                    /* vec_store_cost.  */\n+  3,                                    /* cond_taken_branch_cost.  */\n+  1,                                    /* cond_not_taken_branch_cost.  */\n+};\n+\n /* Generic64 should produce code tuned for Nocona and K8.  */\n static const\n struct processor_costs generic64_cost = {\n@@ -1194,6 +1267,7 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_PENT4  (1<<PROCESSOR_PENTIUM4)\n #define m_NOCONA  (1<<PROCESSOR_NOCONA)\n #define m_CORE2  (1<<PROCESSOR_CORE2)\n+#define m_ATOM  (1<<PROCESSOR_ATOM)\n \n #define m_GEODE  (1<<PROCESSOR_GEODE)\n #define m_K6  (1<<PROCESSOR_K6)\n@@ -1231,10 +1305,11 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   m_486 | m_PENT,\n \n   /* X86_TUNE_UNROLL_STRLEN */\n-  m_486 | m_PENT | m_PPRO | m_AMD_MULTIPLE | m_K6 | m_CORE2 | m_GENERIC,\n+  m_486 | m_PENT | m_ATOM | m_PPRO | m_AMD_MULTIPLE | m_K6\n+  | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_DEEP_BRANCH_PREDICTION */\n-  m_PPRO | m_K6_GEODE | m_AMD_MULTIPLE | m_PENT4 | m_GENERIC,\n+  m_ATOM | m_PPRO | m_K6_GEODE | m_AMD_MULTIPLE | m_PENT4 | m_GENERIC,\n \n   /* X86_TUNE_BRANCH_PREDICTION_HINTS: Branch hints were put in P4 based\n      on simulation result. But after P4 was made, no performance benefit\n@@ -1246,12 +1321,12 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   ~m_386,\n \n   /* X86_TUNE_USE_SAHF */\n-  m_PPRO | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_PENT4\n+  m_ATOM | m_PPRO | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_PENT4\n   | m_NOCONA | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_MOVX: Enable to zero extend integer registers to avoid\n      partial dependencies.  */\n-  m_AMD_MULTIPLE | m_PPRO | m_PENT4 | m_NOCONA\n+  m_AMD_MULTIPLE | m_ATOM | m_PPRO | m_PENT4 | m_NOCONA\n   | m_CORE2 | m_GENERIC | m_GEODE /* m_386 | m_K6 */,\n \n   /* X86_TUNE_PARTIAL_REG_STALL: We probably ought to watch for partial\n@@ -1271,13 +1346,13 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   m_386 | m_486 | m_K6_GEODE,\n \n   /* X86_TUNE_USE_SIMODE_FIOP */\n-  ~(m_PPRO | m_AMD_MULTIPLE | m_PENT | m_CORE2 | m_GENERIC),\n+  ~(m_PPRO | m_AMD_MULTIPLE | m_PENT | m_ATOM | m_CORE2 | m_GENERIC),\n \n   /* X86_TUNE_USE_MOV0 */\n   m_K6,\n \n   /* X86_TUNE_USE_CLTD */\n-  ~(m_PENT | m_K6 | m_CORE2 | m_GENERIC),\n+  ~(m_PENT | m_ATOM | m_K6 | m_CORE2 | m_GENERIC),\n \n   /* X86_TUNE_USE_XCHGB: Use xchgb %rh,%rl instead of rolw/rorw $8,rx.  */\n   m_PENT4,\n@@ -1292,8 +1367,8 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   ~(m_PENT | m_PPRO),\n \n   /* X86_TUNE_PROMOTE_QIMODE */\n-  m_K6_GEODE | m_PENT | m_386 | m_486 | m_AMD_MULTIPLE | m_CORE2\n-  | m_GENERIC /* | m_PENT4 ? */,\n+  m_K6_GEODE | m_PENT | m_ATOM | m_386 | m_486 | m_AMD_MULTIPLE\n+  | m_CORE2 | m_GENERIC /* | m_PENT4 ? */,\n \n   /* X86_TUNE_FAST_PREFIX */\n   ~(m_PENT | m_486 | m_386),\n@@ -1317,26 +1392,28 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   m_PPRO,\n \n   /* X86_TUNE_ADD_ESP_4: Enable if add/sub is preferred over 1/2 push/pop.  */\n-  m_AMD_MULTIPLE | m_K6_GEODE | m_PENT4 | m_NOCONA | m_CORE2 | m_GENERIC,\n+  m_ATOM | m_AMD_MULTIPLE | m_K6_GEODE | m_PENT4 | m_NOCONA\n+  | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_ADD_ESP_8 */\n-  m_AMD_MULTIPLE | m_PPRO | m_K6_GEODE | m_386\n+  m_AMD_MULTIPLE | m_ATOM | m_PPRO | m_K6_GEODE | m_386\n   | m_486 | m_PENT4 | m_NOCONA | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_SUB_ESP_4 */\n-  m_AMD_MULTIPLE | m_PPRO | m_PENT4 | m_NOCONA | m_CORE2 | m_GENERIC,\n+  m_AMD_MULTIPLE | m_ATOM | m_PPRO | m_PENT4 | m_NOCONA | m_CORE2\n+  | m_GENERIC,\n \n   /* X86_TUNE_SUB_ESP_8 */\n-  m_AMD_MULTIPLE | m_PPRO | m_386 | m_486\n+  m_AMD_MULTIPLE | m_ATOM | m_PPRO | m_386 | m_486\n   | m_PENT4 | m_NOCONA | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_INTEGER_DFMODE_MOVES: Enable if integer moves are preferred\n      for DFmode copies */\n-  ~(m_AMD_MULTIPLE | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2\n+  ~(m_AMD_MULTIPLE | m_ATOM | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2\n     | m_GENERIC | m_GEODE),\n \n   /* X86_TUNE_PARTIAL_REG_DEPENDENCY */\n-  m_AMD_MULTIPLE | m_PENT4 | m_NOCONA | m_CORE2 | m_GENERIC,\n+  m_AMD_MULTIPLE | m_ATOM | m_PENT4 | m_NOCONA | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY: In the Generic model we have a\n      conflict here in between PPro/Pentium4 based chips that thread 128bit\n@@ -1347,7 +1424,8 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n      shows that disabling this option on P4 brings over 20% SPECfp regression,\n      while enabling it on K8 brings roughly 2.4% regression that can be partly\n      masked by careful scheduling of moves.  */\n-  m_PENT4 | m_NOCONA | m_PPRO | m_CORE2 | m_GENERIC | m_AMDFAM10,\n+  m_ATOM | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2 | m_GENERIC\n+  | m_AMDFAM10,\n \n   /* X86_TUNE_SSE_UNALIGNED_MOVE_OPTIMAL */\n   m_AMDFAM10,\n@@ -1365,13 +1443,13 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   m_PPRO | m_PENT4 | m_NOCONA,\n \n   /* X86_TUNE_MEMORY_MISMATCH_STALL */\n-  m_AMD_MULTIPLE | m_PENT4 | m_NOCONA | m_CORE2 | m_GENERIC,\n+  m_AMD_MULTIPLE | m_ATOM | m_PENT4 | m_NOCONA | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_PROLOGUE_USING_MOVE */\n-  m_ATHLON_K8 | m_PPRO | m_CORE2 | m_GENERIC,\n+  m_ATHLON_K8 | m_ATOM | m_PPRO | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_EPILOGUE_USING_MOVE */\n-  m_ATHLON_K8 | m_PPRO | m_CORE2 | m_GENERIC,\n+  m_ATHLON_K8 | m_ATOM | m_PPRO | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_SHIFT1 */\n   ~m_486,\n@@ -1380,29 +1458,32 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   m_AMD_MULTIPLE,\n \n   /* X86_TUNE_INTER_UNIT_MOVES */\n-  ~(m_AMD_MULTIPLE | m_GENERIC),\n+  ~(m_AMD_MULTIPLE | m_ATOM | m_GENERIC),\n \n   /* X86_TUNE_INTER_UNIT_CONVERSIONS */\n   ~(m_AMDFAM10),\n \n   /* X86_TUNE_FOUR_JUMP_LIMIT: Some CPU cores are not able to predict more\n      than 4 branch instructions in the 16 byte window.  */\n-  m_PPRO | m_AMD_MULTIPLE | m_PENT4 | m_NOCONA | m_CORE2 | m_GENERIC,\n+  m_ATOM | m_PPRO | m_AMD_MULTIPLE | m_PENT4 | m_NOCONA | m_CORE2\n+  | m_GENERIC,\n \n   /* X86_TUNE_SCHEDULE */\n-  m_PPRO | m_AMD_MULTIPLE | m_K6_GEODE | m_PENT | m_CORE2 | m_GENERIC,\n+  m_PPRO | m_AMD_MULTIPLE | m_K6_GEODE | m_PENT | m_ATOM | m_CORE2\n+  | m_GENERIC,\n \n   /* X86_TUNE_USE_BT */\n-  m_AMD_MULTIPLE | m_CORE2 | m_GENERIC,\n+  m_AMD_MULTIPLE | m_ATOM | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_USE_INCDEC */\n-  ~(m_PENT4 | m_NOCONA | m_GENERIC),\n+  ~(m_PENT4 | m_NOCONA | m_GENERIC | m_ATOM),\n \n   /* X86_TUNE_PAD_RETURNS */\n   m_AMD_MULTIPLE | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_EXT_80387_CONSTANTS */\n-  m_K6_GEODE | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2 | m_GENERIC,\n+  m_K6_GEODE | m_ATHLON_K8 | m_ATOM | m_PENT4 | m_NOCONA | m_PPRO\n+  | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_SHORTEN_X87_SSE */\n   ~m_K8,\n@@ -1447,6 +1528,10 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n      with a subsequent conditional jump instruction into a single\n      compare-and-branch uop.  */\n   m_CORE2,\n+\n+  /* X86_TUNE_OPT_AGU: Optimize for Address Generation Unit. This flag\n+     will impact LEA instruction selection. */\n+  m_ATOM,\n };\n \n /* Feature tests against the various architecture variations.  */\n@@ -1472,10 +1557,11 @@ static unsigned int initial_ix86_arch_features[X86_ARCH_LAST] = {\n };\n \n static const unsigned int x86_accumulate_outgoing_args\n-  = m_AMD_MULTIPLE | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2 | m_GENERIC;\n+  = m_AMD_MULTIPLE | m_ATOM | m_PENT4 | m_NOCONA | m_PPRO | m_CORE2\n+    | m_GENERIC;\n \n static const unsigned int x86_arch_always_fancy_math_387\n-  = m_PENT | m_PPRO | m_AMD_MULTIPLE | m_PENT4\n+  = m_PENT | m_ATOM | m_PPRO | m_AMD_MULTIPLE | m_PENT4\n     | m_NOCONA | m_CORE2 | m_GENERIC;\n \n static enum stringop_alg stringop_alg = no_stringop;\n@@ -1958,7 +2044,8 @@ static const struct ptt processor_target_table[PROCESSOR_max] =\n   {&core2_cost, 16, 10, 16, 10, 16},\n   {&generic32_cost, 16, 7, 16, 7, 16},\n   {&generic64_cost, 16, 10, 16, 10, 16},\n-  {&amdfam10_cost, 32, 24, 32, 7, 32}\n+  {&amdfam10_cost, 32, 24, 32, 7, 32},\n+  {&atom_cost, 16, 7, 16, 7, 16}\n };\n \n static const char *const cpu_names[TARGET_CPU_DEFAULT_max] =\n@@ -1976,6 +2063,7 @@ static const char *const cpu_names[TARGET_CPU_DEFAULT_max] =\n   \"prescott\",\n   \"nocona\",\n   \"core2\",\n+  \"atom\",\n   \"geode\",\n   \"k6\",\n   \"k6-2\",\n@@ -2534,6 +2622,9 @@ override_options (bool main_args_p)\n       {\"core2\", PROCESSOR_CORE2, CPU_CORE2,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_CX16},\n+      {\"atom\", PROCESSOR_ATOM, CPU_ATOM,\n+\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t| PTA_SSSE3 | PTA_CX16},\n       {\"geode\", PROCESSOR_GEODE, CPU_GEODE,\n \tPTA_MMX | PTA_3DNOW | PTA_3DNOW_A |PTA_PREFETCH_SSE},\n       {\"k6\", PROCESSOR_K6, CPU_K6, PTA_MMX},\n@@ -19026,6 +19117,7 @@ ix86_issue_rate (void)\n   switch (ix86_tune)\n     {\n     case PROCESSOR_PENTIUM:\n+    case PROCESSOR_ATOM:\n     case PROCESSOR_K6:\n       return 2;\n \n@@ -19226,6 +19318,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n     case PROCESSOR_ATHLON:\n     case PROCESSOR_K8:\n     case PROCESSOR_AMDFAM10:\n+    case PROCESSOR_ATOM:\n     case PROCESSOR_GENERIC32:\n     case PROCESSOR_GENERIC64:\n       memory = get_attr_memory (insn);"}, {"sha": "9746e158f5a9afa1be24e12aa1069c736e2cb8f9", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b6837b94d9916498b79b854728187361dde113a0", "patch": "@@ -231,6 +231,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_GENERIC64 (ix86_tune == PROCESSOR_GENERIC64)\n #define TARGET_GENERIC (TARGET_GENERIC32 || TARGET_GENERIC64)\n #define TARGET_AMDFAM10 (ix86_tune == PROCESSOR_AMDFAM10)\n+#define TARGET_ATOM (ix86_tune == PROCESSOR_ATOM)\n \n /* Feature tests against the various tunings.  */\n enum ix86_tune_indices {\n@@ -295,6 +296,7 @@ enum ix86_tune_indices {\n   X86_TUNE_USE_VECTOR_FP_CONVERTS,\n   X86_TUNE_USE_VECTOR_CONVERTS,\n   X86_TUNE_FUSE_CMP_AND_BRANCH,\n+  X86_TUNE_OPT_AGU,\n \n   X86_TUNE_LAST\n };\n@@ -382,6 +384,7 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_USE_VECTOR_CONVERTS]\n #define TARGET_FUSE_CMP_AND_BRANCH \\\n \tix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH]\n+#define TARGET_OPT_AGU ix86_tune_features[X86_TUNE_OPT_AGU]\n \n /* Feature tests against the various architecture variations.  */\n enum ix86_arch_indices {\n@@ -567,6 +570,7 @@ enum target_cpu_default\n   TARGET_CPU_DEFAULT_prescott,\n   TARGET_CPU_DEFAULT_nocona,\n   TARGET_CPU_DEFAULT_core2,\n+  TARGET_CPU_DEFAULT_atom,\n \n   TARGET_CPU_DEFAULT_geode,\n   TARGET_CPU_DEFAULT_k6,\n@@ -2272,6 +2276,7 @@ enum processor_type\n   PROCESSOR_GENERIC32,\n   PROCESSOR_GENERIC64,\n   PROCESSOR_AMDFAM10,\n+  PROCESSOR_ATOM,\n   PROCESSOR_max\n };\n "}, {"sha": "792d0f3374b42d44898c7354cfe4c5f821b30010", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b6837b94d9916498b79b854728187361dde113a0", "patch": "@@ -316,7 +316,7 @@\n \n \f\n ;; Processor type.\n-(define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,\n+(define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,atom,\n \t\t    generic64,amdfam10\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n@@ -612,6 +612,12 @@\n (define_attr \"i387_cw\" \"trunc,floor,ceil,mask_pm,uninitialized,any\"\n   (const_string \"any\"))\n \n+;; Define attribute to classify add/sub insns that consumes carry flag (CF)\n+(define_attr \"use_carry\" \"0,1\" (const_string \"0\"))\n+\n+;; Define attribute to indicate unaligned ssemov insns\n+(define_attr \"movu\" \"0,1\" (const_string \"0\"))\n+\n ;; Describe a user's asm statement.\n (define_asm_attributes\n   [(set_attr \"length\" \"128\")\n@@ -727,6 +733,7 @@\n (include \"k6.md\")\n (include \"athlon.md\")\n (include \"geode.md\")\n+(include \"atom.md\")\n \n \f\n ;; Operand and operator predicates and constraints\n@@ -5816,6 +5823,7 @@\n   \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, DImode, operands)\"\n   \"adc{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -5890,6 +5898,7 @@\n   \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n   \"adc{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"QI\")])\n \n@@ -5902,6 +5911,7 @@\n   \"ix86_binary_operator_ok (PLUS, HImode, operands)\"\n   \"adc{w}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"HI\")])\n \n@@ -5914,6 +5924,7 @@\n   \"ix86_binary_operator_ok (PLUS, SImode, operands)\"\n   \"adc{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -5927,6 +5938,7 @@\n   \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, SImode, operands)\"\n   \"adc{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -6156,9 +6168,9 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*adddi_1_rex64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r\")\n-\t(plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,r\")\n-\t\t (match_operand:DI 2 \"x86_64_general_operand\" \"rme,re,le\")))\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,rm,r,r\")\n+\t(plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,r,r\")\n+\t\t (match_operand:DI 2 \"x86_64_general_operand\" \"rme,re,0,le\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, DImode, operands)\"\n {\n@@ -6179,6 +6191,10 @@\n \t}\n \n     default:\n+      /* Use add as much as possible to replace lea for AGU optimization. */\n+      if (which_alternative == 2 && TARGET_OPT_AGU)\n+        return \"add{q}\\t{%1, %0|%0, %1}\";\n+        \n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n \n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -6197,8 +6213,11 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"2\")\n+     (cond [(and (eq_attr \"alternative\" \"2\") \n+                 (eq (symbol_ref \"TARGET_OPT_AGU\") (const_int 0)))\n \t      (const_string \"lea\")\n+            (eq_attr \"alternative\" \"3\")\n+              (const_string \"lea\")\n \t    ; Current assemblers are broken and do not allow @GOTOFF in\n \t    ; ought but a memory context.\n \t    (match_operand:DI 2 \"pic_symbolic_operand\" \"\")\n@@ -6215,8 +6234,7 @@\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t (match_operand:DI 2 \"x86_64_nonmemory_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:DI (match_dup 1)\n \t\t (match_dup 2)))]\n@@ -6420,9 +6438,9 @@\n \n \n (define_insn \"*addsi_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm,r\")\n-\t(plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,r\")\n-\t\t (match_operand:SI 2 \"general_operand\" \"g,ri,li\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm,r,r\")\n+\t(plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,r,r\")\n+\t\t (match_operand:SI 2 \"general_operand\" \"g,ri,0,li\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, SImode, operands)\"\n {\n@@ -6443,6 +6461,10 @@\n \t}\n \n     default:\n+      /* Use add as much as possible to replace lea for AGU optimization. */\n+      if (which_alternative == 2 && TARGET_OPT_AGU)\n+        return \"add{l}\\t{%1, %0|%0, %1}\";\n+\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n \n       /* Make things pretty and `subl $4,%eax' rather than `addl $-4, %eax'.\n@@ -6459,7 +6481,10 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"2\")\n+     (cond [(and (eq_attr \"alternative\" \"2\") \n+                 (eq (symbol_ref \"TARGET_OPT_AGU\") (const_int 0)))\n+               (const_string \"lea\")\n+            (eq_attr \"alternative\" \"3\")\n \t      (const_string \"lea\")\n \t    ; Current assemblers are broken and do not allow @GOTOFF in\n \t    ; ought but a memory context.\n@@ -6477,8 +6502,7 @@\n \t(plus (match_operand 1 \"register_operand\" \"\")\n               (match_operand 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"reload_completed\n-   && true_regnum (operands[0]) != true_regnum (operands[1])\"\n+  \"reload_completed\"\n   [(const_int 0)]\n {\n   rtx pat;\n@@ -7580,6 +7604,7 @@\n   \"TARGET_64BIT && ix86_binary_operator_ok (MINUS, DImode, operands)\"\n   \"sbb{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -7628,6 +7653,7 @@\n   \"ix86_binary_operator_ok (MINUS, QImode, operands)\"\n   \"sbb{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"QI\")])\n \n@@ -7640,6 +7666,7 @@\n   \"ix86_binary_operator_ok (MINUS, HImode, operands)\"\n   \"sbb{w}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"HI\")])\n \n@@ -7652,6 +7679,7 @@\n   \"ix86_binary_operator_ok (MINUS, SImode, operands)\"\n   \"sbb{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -15275,6 +15303,7 @@\n   \"reload_completed\"\n   \"ret\"\n   [(set_attr \"length\" \"1\")\n+   (set_attr \"atom_unit\" \"jeu\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"modrm\" \"0\")])\n \n@@ -15287,6 +15316,7 @@\n   \"reload_completed\"\n   \"rep\\;ret\"\n   [(set_attr \"length\" \"1\")\n+   (set_attr \"atom_unit\" \"jeu\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"modrm\" \"0\")])\n@@ -15297,6 +15327,7 @@\n   \"reload_completed\"\n   \"ret\\t%0\"\n   [(set_attr \"length\" \"3\")\n+   (set_attr \"atom_unit\" \"jeu\")\n    (set_attr \"length_immediate\" \"2\")\n    (set_attr \"modrm\" \"0\")])\n \n@@ -16418,6 +16449,7 @@\n   \"TARGET_SSE_MATH\"\n   \"%vrcpss\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"rcp\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SF\")])\n \n@@ -16777,6 +16809,7 @@\n   \"TARGET_SSE_MATH\"\n   \"%vrsqrtss\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"rcp\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SF\")])\n \n@@ -16797,6 +16830,7 @@\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"%vsqrts<ssemodefsuffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"sqrt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"athlon_decode\" \"*\")\n@@ -19850,6 +19884,7 @@\n   ; Since we don't have the proper number of operands for an alu insn,\n   ; fill in all the blanks.\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"memory\" \"none\")\n    (set_attr \"imm_disp\" \"false\")\n@@ -19865,6 +19900,7 @@\n   \"\"\n   \"sbb{q}\\t%0, %0\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"memory\" \"none\")\n    (set_attr \"imm_disp\" \"false\")\n@@ -19908,6 +19944,7 @@\n   ; Since we don't have the proper number of operands for an alu insn,\n   ; fill in all the blanks.\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"memory\" \"none\")\n    (set_attr \"imm_disp\" \"false\")\n@@ -19923,6 +19960,7 @@\n   \"\"\n   \"sbb{l}\\t%0, %0\"\n   [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"memory\" \"none\")\n    (set_attr \"imm_disp\" \"false\")\n@@ -20255,7 +20293,8 @@\n     }\n }\n   [(set (attr \"type\")\n-\t(cond [(eq_attr \"alternative\" \"0\")\n+\t(cond [(and (eq_attr \"alternative\" \"0\") \n+\t            (eq (symbol_ref \"TARGET_OPT_AGU\") (const_int 0)))\n \t\t (const_string \"alu\")\n \t       (match_operand:SI 2 \"const0_operand\" \"\")\n \t\t (const_string \"imov\")\n@@ -20298,7 +20337,8 @@\n     }\n }\n   [(set (attr \"type\")\n-\t(cond [(eq_attr \"alternative\" \"0\")\n+\t(cond [(and (eq_attr \"alternative\" \"0\")\n+\t            (eq (symbol_ref \"TARGET_OPT_AGU\") (const_int 0)))\n \t\t (const_string \"alu\")\n \t       (match_operand:DI 2 \"const0_operand\" \"\")\n \t\t (const_string \"imov\")\n@@ -21790,6 +21830,7 @@\n   return patterns[locality];\n }\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"prefetch\")\n    (set_attr \"memory\" \"none\")])\n \n (define_insn \"*prefetch_sse_rex\"\n@@ -21808,6 +21849,7 @@\n   return patterns[locality];\n }\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"prefetch\")\n    (set_attr \"memory\" \"none\")])\n \n (define_insn \"*prefetch_3dnow\""}, {"sha": "977a23c51a085abab43c769bb301bf2f61e1c7f2", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6837b94d9916498b79b854728187361dde113a0/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b6837b94d9916498b79b854728187361dde113a0", "patch": "@@ -338,6 +338,7 @@\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"vmovup<avxmodesuffixf2c>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"movu\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -363,6 +364,7 @@\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"movup<ssemodesuffixf2c>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"movu\" \"1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx_movdqu<avxmodesuffix>\"\n@@ -373,6 +375,7 @@\n   \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"vmovdqu\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"movu\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxvecmode>\")])\n \n@@ -383,6 +386,7 @@\n   \"TARGET_SSE2 && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"movdqu\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"movu\" \"1\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -424,7 +428,7 @@\n \t\t     UNSPEC_MOVNT))]\n   \"TARGET_SSE2\"\n   \"movntdq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -434,7 +438,7 @@\n \t\t   UNSPEC_MOVNT))]\n   \"TARGET_SSE2\"\n   \"movnti\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"V2DF\")])\n \n (define_insn \"avx_lddqu<avxmodesuffix>\"\n@@ -445,6 +449,7 @@\n   \"TARGET_AVX\"\n   \"vlddqu\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"movu\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<avxvecmode>\")])\n \n@@ -454,7 +459,8 @@\n \t\t      UNSPEC_LDDQU))]\n   \"TARGET_SSE3\"\n   \"lddqu\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"movu\" \"1\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -761,6 +767,7 @@\n   \"TARGET_SSE\"\n   \"%vrcpps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"rcp\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n@@ -787,6 +794,7 @@\n   \"TARGET_SSE\"\n   \"rcpss\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"rcp\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_expand \"sqrtv8sf2\"\n@@ -832,6 +840,7 @@\n   \"TARGET_SSE\"\n   \"%vsqrtps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"sqrt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n@@ -876,6 +885,7 @@\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n   \"sqrts<ssemodesuffixf2c>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"sqrt\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_expand \"rsqrtv8sf2\"\n@@ -1039,7 +1049,7 @@\n \t (const_int 1)))]\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n   \"<maxminfprefix>s<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sse\")\n+  [(set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n ;; These versions of the min/max patterns implement exactly the operations\n@@ -1175,6 +1185,7 @@\n   \"TARGET_SSE3\"\n   \"addsubpd\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"mode\" \"V2DF\")])\n \n (define_insn \"avx_h<plusminus_insn>v4df3\"\n@@ -1298,6 +1309,7 @@\n   \"TARGET_SSE3\"\n   \"h<plusminus_mnemonic>ps\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"mode\" \"V4SF\")])\n \n@@ -5066,6 +5078,7 @@\n   \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n   \"pmaddwd\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"simul\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -7025,6 +7038,7 @@\n    movq\\t{%H1, %0|%0, %H1}\n    mov{q}\\t{%H1, %0|%0, %H1}\"\n   [(set_attr \"type\" \"ssemov,sseishft,ssemov,imov\")\n+   (set_attr \"atom_unit\" \"*,sishuf,*,*\")\n    (set_attr \"memory\" \"*,none,*,*\")\n    (set_attr \"mode\" \"V2SF,TI,TI,DI\")])\n \n@@ -7057,6 +7071,7 @@\n    psrldq\\t{$8, %0|%0, 8}\n    movq\\t{%H1, %0|%0, %H1}\"\n   [(set_attr \"type\" \"ssemov,sseishft,ssemov\")\n+   (set_attr \"atom_unit\" \"*,sishuf,*\")\n    (set_attr \"memory\" \"*,none,*\")\n    (set_attr \"mode\" \"V2SF,TI,TI\")])\n \n@@ -7614,6 +7629,7 @@\n   \"TARGET_SSE2\"\n   \"psadbw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"simul\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -7635,7 +7651,7 @@\n \t  UNSPEC_MOVMSK))]\n   \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n   \"%vmovmskp<ssemodesuffixf2c>\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -7645,7 +7661,7 @@\n \t\t   UNSPEC_MOVMSK))]\n   \"TARGET_SSE2\"\n   \"%vpmovmskb\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SI\")])\n@@ -7668,7 +7684,7 @@\n   \"TARGET_SSE2 && !TARGET_64BIT\"\n   ;; @@@ check ordering of operands in intel/nonintel syntax\n   \"%vmaskmovdqu\\t{%2, %1|%1, %2}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -7682,7 +7698,7 @@\n   \"TARGET_SSE2 && TARGET_64BIT\"\n   ;; @@@ check ordering of operands in intel/nonintel syntax\n   \"%vmaskmovdqu\\t{%2, %1|%1, %2}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -7693,6 +7709,7 @@\n   \"TARGET_SSE\"\n   \"%vldmxcsr\\t%0\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"mxcsr\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"memory\" \"load\")])\n \n@@ -7702,6 +7719,7 @@\n   \"TARGET_SSE\"\n   \"%vstmxcsr\\t%0\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"mxcsr\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"memory\" \"store\")])\n \n@@ -7720,6 +7738,7 @@\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"sfence\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"fence\")\n    (set_attr \"memory\" \"unknown\")])\n \n (define_insn \"sse2_clflush\"\n@@ -7728,6 +7747,7 @@\n   \"TARGET_SSE2\"\n   \"clflush\\t%a0\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"fence\")\n    (set_attr \"memory\" \"unknown\")])\n \n (define_expand \"sse2_mfence\"\n@@ -7745,6 +7765,7 @@\n   \"TARGET_64BIT || TARGET_SSE2\"\n   \"mfence\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"fence\")\n    (set_attr \"memory\" \"unknown\")])\n \n (define_expand \"sse2_lfence\"\n@@ -7762,6 +7783,7 @@\n   \"TARGET_SSE2\"\n   \"lfence\"\n   [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"lfence\")\n    (set_attr \"memory\" \"unknown\")])\n \n (define_insn \"sse3_mwait\"\n@@ -7885,6 +7907,7 @@\n   \"TARGET_SSSE3\"\n   \"phaddw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -7913,6 +7936,7 @@\n   \"TARGET_SSSE3\"\n   \"phaddw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -7967,6 +7991,7 @@\n   \"TARGET_SSSE3\"\n   \"phaddd\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -7987,6 +8012,7 @@\n   \"TARGET_SSSE3\"\n   \"phaddd\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -8073,6 +8099,7 @@\n   \"TARGET_SSSE3\"\n   \"phaddsw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -8101,6 +8128,7 @@\n   \"TARGET_SSSE3\"\n   \"phaddsw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -8187,6 +8215,7 @@\n   \"TARGET_SSSE3\"\n   \"phsubw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -8215,6 +8244,7 @@\n   \"TARGET_SSSE3\"\n   \"phsubw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -8269,6 +8299,7 @@\n   \"TARGET_SSSE3\"\n   \"phsubd\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -8289,6 +8320,7 @@\n   \"TARGET_SSSE3\"\n   \"phsubd\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -8375,6 +8407,7 @@\n   \"TARGET_SSSE3\"\n   \"phsubsw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -8403,6 +8436,7 @@\n   \"TARGET_SSSE3\"\n   \"phsubsw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -8509,6 +8543,7 @@\n   \"TARGET_SSSE3\"\n   \"pmaddubsw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"simul\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -8547,6 +8582,7 @@\n   \"TARGET_SSSE3\"\n   \"pmaddubsw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n+   (set_attr \"atom_unit\" \"simul\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -8754,6 +8790,7 @@\n   return \"palignr\\t{%3, %2, %0|%0, %2, %3}\";\n }\n   [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"atom_unit\" \"sishuf\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -8770,6 +8807,7 @@\n   return \"palignr\\t{%3, %2, %0|%0, %2, %3}\";\n }\n   [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"atom_unit\" \"sishuf\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -8956,7 +8994,7 @@\n \t\t     UNSPEC_MOVNTDQA))]\n   \"TARGET_SSE4_1\"\n   \"%vmovntdqa\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+  [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])"}]}