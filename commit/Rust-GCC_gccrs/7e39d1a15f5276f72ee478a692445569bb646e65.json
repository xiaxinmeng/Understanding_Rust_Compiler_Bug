{"sha": "7e39d1a15f5276f72ee478a692445569bb646e65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UzOWQxYTE1ZjUyNzZmNzJlZTQ3OGE2OTI0NDU1NjliYjY0NmU2NQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-08-11T19:59:22Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-08-11T19:59:22Z"}, "message": "c++: recognize class-scope non-template dguides [PR79501]\n\nIt looks like we still don't recognize class-scope non-template\ndeduction guides even after r12-2260.   This is because deduction guides\nare tagged as such in cp_parser_init_declarator after calling\ncp_parser_declarator, but in cp_parser_member_declaration we call\ncp_parser_declarator directly.\n\nSo let's tag them in cp_parser_member_declaration as well.\n\n\tPR c++/79501\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (maybe_adjust_declarator_for_dguide): New, split\n\tout from ...\n\t(cp_parser_init_declarator): ... here.\n\t(cp_parser_member_declaration): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/class-deduction98.C: New test.", "tree": {"sha": "c3c5ef9f887c45f799a65b2f212ab848bcd110e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3c5ef9f887c45f799a65b2f212ab848bcd110e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e39d1a15f5276f72ee478a692445569bb646e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e39d1a15f5276f72ee478a692445569bb646e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e39d1a15f5276f72ee478a692445569bb646e65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e39d1a15f5276f72ee478a692445569bb646e65/comments", "author": null, "committer": null, "parents": [{"sha": "6186708312780bb2139da01946abdde39667e985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6186708312780bb2139da01946abdde39667e985", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6186708312780bb2139da01946abdde39667e985"}], "stats": {"total": 73, "additions": 54, "deletions": 19}, "files": [{"sha": "b5e117d5bda1329f51b8aa17fcdf09c4536760e8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 44, "deletions": 19, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e39d1a15f5276f72ee478a692445569bb646e65/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e39d1a15f5276f72ee478a692445569bb646e65/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7e39d1a15f5276f72ee478a692445569bb646e65", "patch": "@@ -22078,6 +22078,37 @@ warn_about_ambiguous_parse (const cp_decl_specifier_seq *decl_specifiers,\n     }\n }\n \n+/* If DECLARATOR with DECL_SPECS is a function declarator that has\n+   the form of a deduction guide, tag it as such.  CTOR_DTOR_OR_CONV_P\n+   has the same meaning as in cp_parser_declarator.  */\n+\n+static void\n+cp_parser_maybe_adjust_declarator_for_dguide (cp_parser *parser,\n+\t\t\t\t\t      cp_decl_specifier_seq *decl_specs,\n+\t\t\t\t\t      cp_declarator *declarator,\n+\t\t\t\t\t      int *ctor_dtor_or_conv_p)\n+{\n+  if (cxx_dialect >= cxx17\n+      && *ctor_dtor_or_conv_p <= 0\n+      && !decl_specs->type\n+      && !decl_specs->any_type_specifiers_p\n+      && function_declarator_p (declarator))\n+    {\n+      cp_declarator *id = get_id_declarator (declarator);\n+      tree name = id->u.id.unqualified_name;\n+      parser->scope = id->u.id.qualifying_scope;\n+      tree tmpl = cp_parser_lookup_name_simple (parser, name, id->id_loc);\n+      if (tmpl\n+\t  && (DECL_CLASS_TEMPLATE_P (tmpl)\n+\t      || DECL_TEMPLATE_TEMPLATE_PARM_P (tmpl)))\n+\t{\n+\t  id->u.id.unqualified_name = dguide_name (tmpl);\n+\t  id->u.id.sfk = sfk_deduction_guide;\n+\t  *ctor_dtor_or_conv_p = 1;\n+\t}\n+    }\n+}\n+\n /* Declarators [gram.dcl.decl] */\n \n /* Parse an init-declarator.\n@@ -22254,25 +22285,13 @@ cp_parser_init_declarator (cp_parser* parser,\n \n   if (function_declarator_p (declarator))\n     {\n-      /* Handle C++17 deduction guides.  */\n-      if (!decl_specifiers->type\n-\t  && !decl_specifiers->any_type_specifiers_p\n-\t  && ctor_dtor_or_conv_p <= 0\n-\t  && cxx_dialect >= cxx17)\n-\t{\n-\t  cp_declarator *id = get_id_declarator (declarator);\n-\t  tree name = id->u.id.unqualified_name;\n-\t  parser->scope = id->u.id.qualifying_scope;\n-\t  tree tmpl = cp_parser_lookup_name_simple (parser, name, id->id_loc);\n-\t  if (tmpl\n-\t      && (DECL_CLASS_TEMPLATE_P (tmpl)\n-\t\t  || DECL_TEMPLATE_TEMPLATE_PARM_P (tmpl)))\n-\t    {\n-\t      id->u.id.unqualified_name = dguide_name (tmpl);\n-\t      id->u.id.sfk = sfk_deduction_guide;\n-\t      ctor_dtor_or_conv_p = 1;\n-\t    }\n-\t}\n+      /* Handle C++17 deduction guides.  Note that class-scope\n+\t non-template deduction guides are instead handled in\n+\t cp_parser_member_declaration.  */\n+      cp_parser_maybe_adjust_declarator_for_dguide (parser,\n+\t\t\t\t\t\t    decl_specifiers,\n+\t\t\t\t\t\t    declarator,\n+\t\t\t\t\t\t    &ctor_dtor_or_conv_p);\n \n       if (!member_p && !cp_parser_error_occurred (parser))\n \twarn_about_ambiguous_parse (decl_specifiers, declarator);\n@@ -26956,6 +26975,12 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t  goto out;\n \t\t}\n \n+\t      /* Handle class-scope non-template C++17 deduction guides.  */\n+\t      cp_parser_maybe_adjust_declarator_for_dguide (parser,\n+\t\t\t\t\t\t\t    &decl_specifiers,\n+\t\t\t\t\t\t\t    declarator,\n+\t\t\t\t\t\t\t    &ctor_dtor_or_conv_p);\n+\n \t      if (declares_class_or_enum & 2)\n \t\tcp_parser_check_for_definition_in_return_type\n \t\t\t\t\t    (declarator, decl_specifiers.type,"}, {"sha": "bee0ce433ee0f6ebcb7cd4b4de51c8495a20d8f7", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction98.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e39d1a15f5276f72ee478a692445569bb646e65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e39d1a15f5276f72ee478a692445569bb646e65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction98.C?ref=7e39d1a15f5276f72ee478a692445569bb646e65", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/79501\n+// { dg-do compile { target c++17 } }\n+\n+template<class T>\n+struct A {\n+  template<class U> struct B { template<class V> B(V); };\n+  B(T) -> B<T>;\n+};\n+\n+A<int>::B b(0);"}]}