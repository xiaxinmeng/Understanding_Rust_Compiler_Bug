{"sha": "4d85d480272fb7331924f04534e0f5f14b60421e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ4NWQ0ODAyNzJmYjczMzE5MjRmMDQ1MzRlMGY1ZjE0YjYwNDIxZQ==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2017-11-13T19:26:54Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-11-13T19:26:54Z"}, "message": "rs6000-c.c (altivec_overloaded_builtins): Add support for builtins...\n\ngcc/ChangeLog:\n\n2017-11-13  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins):\n\tAdd support for builtins:\n\tunsigned int vec_first_{,miss}_match_{,or_eos}index,\n\tvector {un,}signed {char,int,short},\n\tvector {un,}signed {char,int,short}) arguments.\n\t* config/rs6000/rs6000-builtin.def (VFIRSTMATCHINDEX,\n\tVFIRSTMATCHOREOSINDEX, VFIRSTMISMATCHINDEX, VFIRSTMISMATCHOREOSINDEX):\n\tAdd BU_P9V_AV_2 expansions for the builtins.\n\t* config/rs6000/altivec.h (vec_first_match_index,\n\tvec_first_mismatch_index, vec_first_match_or_eos_index,\n\tvec_first_mismatch_or_eos_index): Add #defines for the builtins.\n\t* config/rs6000/rs6000-protos.h (bytes_in_mode): Add\n\tnew extern declaration.\n\t* config/rs6000/rs6000.c (bytes_in_mode): Add new function.\n\t* config/rs6000/vsx.md (first_match_index_<mode>,\n\tfirst_match_or_eos_index_<mode>, first_mismatch_index_<mode>,\n\tfirst_mismatch_or_eos_index_<mode>): Add define expand.\n\t(vctzlsbb_<mode>): Add mode field to define_insn for vctzlsbb.\n\t* doc/extend.texi: Update the built-in documenation file for the new\n\tbuilt-in functions.\n\ngcc/testsuite/ChangeLog:\n\n2017-11-13  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-6-p9-runnable.c: Add new runnable test.\n\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-2.c: Update expected error\n\tmessage.\n\nFrom-SVN: r254704", "tree": {"sha": "c3c740cbf79182bf1451b5f3b38473dc7984a6d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3c740cbf79182bf1451b5f3b38473dc7984a6d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d85d480272fb7331924f04534e0f5f14b60421e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d85d480272fb7331924f04534e0f5f14b60421e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d85d480272fb7331924f04534e0f5f14b60421e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d85d480272fb7331924f04534e0f5f14b60421e/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "846b84fba76e47260018d9f018b6491d53b96732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846b84fba76e47260018d9f018b6491d53b96732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846b84fba76e47260018d9f018b6491d53b96732"}], "stats": {"total": 1375, "additions": 1369, "deletions": 6}, "files": [{"sha": "b393e0d0c016582e584546d2098861147e0e6cfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d85d480272fb7331924f04534e0f5f14b60421e", "patch": "@@ -1,3 +1,26 @@\n+2017-11-13  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins):\n+\tAdd support for builtins:\n+\tunsigned int vec_first_{,miss}_match_{,or_eos}index,\n+\tvector {un,}signed {char,int,short},\n+\tvector {un,}signed {char,int,short}) arguments.\n+\t* config/rs6000/rs6000-builtin.def (VFIRSTMATCHINDEX,\n+\tVFIRSTMATCHOREOSINDEX, VFIRSTMISMATCHINDEX, VFIRSTMISMATCHOREOSINDEX):\n+\tAdd BU_P9V_AV_2 expansions for the builtins.\n+\t* config/rs6000/altivec.h (vec_first_match_index,\n+\tvec_first_mismatch_index, vec_first_match_or_eos_index,\n+\tvec_first_mismatch_or_eos_index): Add #defines for the builtins.\n+\t* config/rs6000/rs6000-protos.h (bytes_in_mode): Add\n+\tnew extern declaration.\n+\t* config/rs6000/rs6000.c (bytes_in_mode): Add new function.\n+\t* config/rs6000/vsx.md (first_match_index_<mode>,\n+\tfirst_match_or_eos_index_<mode>, first_mismatch_index_<mode>,\n+\tfirst_mismatch_or_eos_index_<mode>): Add define expand.\n+\t(vctzlsbb_<mode>): Add mode field to define_insn for vctzlsbb.\n+\t* doc/extend.texi: Update the built-in documenation file for the new\n+\tbuilt-in functions.\n+\n 2017-11-13  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* match.pd: Convert fminf<N>, fminf<N>x, fmax<N>, and fmax<N>x"}, {"sha": "646712d31f59440b5f7f65578ee39fd65c313320", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=4d85d480272fb7331924f04534e0f5f14b60421e", "patch": "@@ -420,6 +420,10 @@\n \n #ifdef __POWER9_VECTOR__\n /* Vector additions added in ISA 3.0.  */\n+#define vec_first_match_index __builtin_vec_first_match_index\n+#define vec_first_match_or_eos_index __builtin_vec_first_match_or_eos_index\n+#define vec_first_mismatch_index __builtin_vec_first_mismatch_index\n+#define vec_first_mismatch_or_eos_index __builtin_vec_first_mismatch_or_eos_index\n #define vec_pack_to_short_fp32 __builtin_vec_convert_4f32_8i16\n #define vec_parity_lsbb __builtin_vec_vparity_lsbb\n #define vec_vctz __builtin_vec_vctz"}, {"sha": "8eaa79783ff8b75efd6bf53389ccecdf406556c6", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=4d85d480272fb7331924f04534e0f5f14b60421e", "patch": "@@ -2006,6 +2006,31 @@ BU_P9V_AV_2 (VSLV,\t\t\"vslv\",\t\t\tCONST, vslv)\n BU_P9V_AV_2 (VSRV,\t\t\"vsrv\",\t\t\tCONST, vsrv)\n BU_P9V_AV_2 (CONVERT_4F32_8I16, \"convert_4f32_8i16\", CONST, convert_4f32_8i16)\n \n+BU_P9V_AV_2 (VFIRSTMATCHINDEX_V16QI, \"first_match_index_v16qi\",\n+\t     CONST, first_match_index_v16qi)\n+BU_P9V_AV_2 (VFIRSTMATCHINDEX_V8HI, \"first_match_index_v8hi\",\n+\t     CONST, first_match_index_v8hi)\n+BU_P9V_AV_2 (VFIRSTMATCHINDEX_V4SI, \"first_match_index_v4si\",\n+\t     CONST, first_match_index_v4si)\n+BU_P9V_AV_2 (VFIRSTMATCHOREOSINDEX_V16QI, \"first_match_or_eos_index_v16qi\",\n+\t     CONST, first_match_or_eos_index_v16qi)\n+BU_P9V_AV_2 (VFIRSTMATCHOREOSINDEX_V8HI, \"first_match_or_eos_index_v8hi\",\n+\t     CONST, first_match_or_eos_index_v8hi)\n+BU_P9V_AV_2 (VFIRSTMATCHOREOSINDEX_V4SI, \"first_match_or_eos_index_v4si\",\n+\t     CONST, first_match_or_eos_index_v4si)\n+BU_P9V_AV_2 (VFIRSTMISMATCHINDEX_V16QI, \"first_mismatch_index_v16qi\",\n+\t     CONST, first_mismatch_index_v16qi)\n+BU_P9V_AV_2 (VFIRSTMISMATCHINDEX_V8HI, \"first_mismatch_index_v8hi\",\n+\t     CONST, first_mismatch_index_v8hi)\n+BU_P9V_AV_2 (VFIRSTMISMATCHINDEX_V4SI, \"first_mismatch_index_v4si\",\n+\t     CONST, first_mismatch_index_v4si)\n+BU_P9V_AV_2 (VFIRSTMISMATCHOREOSINDEX_V16QI, \"first_mismatch_or_eos_index_v16qi\",\n+\t     CONST, first_mismatch_or_eos_index_v16qi)\n+BU_P9V_AV_2 (VFIRSTMISMATCHOREOSINDEX_V8HI, \"first_mismatch_or_eos_index_v8hi\",\n+\t     CONST, first_mismatch_or_eos_index_v8hi)\n+BU_P9V_AV_2 (VFIRSTMISMATCHOREOSINDEX_V4SI, \"first_mismatch_or_eos_index_v4si\",\n+\t     CONST, first_mismatch_or_eos_index_v4si)\n+\n /* ISA 3.0 vector overloaded 2-argument functions. */\n BU_P9V_OVERLOAD_2 (VSLV,\t\"vslv\")\n BU_P9V_OVERLOAD_2 (VSRV,\t\"vsrv\")\n@@ -2082,6 +2107,11 @@ BU_P9V_OVERLOAD_1 (VEXTRACT_FP_FROM_SHORTH, \"vextract_fp_from_shorth\")\n BU_P9V_OVERLOAD_1 (VEXTRACT_FP_FROM_SHORTL, \"vextract_fp_from_shortl\")\n \n /* ISA 3.0 vector scalar overloaded 2 argument functions.  */\n+BU_P9V_OVERLOAD_2 (VFIRSTMATCHINDEX,\t\"first_match_index\")\n+BU_P9V_OVERLOAD_2 (VFIRSTMISMATCHINDEX,\t\"first_mismatch_index\")\n+BU_P9V_OVERLOAD_2 (VFIRSTMATCHOREOSINDEX,\t\"first_match_or_eos_index\")\n+BU_P9V_OVERLOAD_2 (VFIRSTMISMATCHOREOSINDEX,\t\"first_mismatch_or_eos_index\")\n+\n BU_P9V_OVERLOAD_2 (VSIEDP,\t\"scalar_insert_exp\")\n \n BU_P9V_OVERLOAD_2 (VSTDC,\t\"scalar_test_data_class\")\n@@ -2149,7 +2179,9 @@ BU_P9V_64BIT_AV_X (XST_LEN_R,\t\"xst_len_r\",\tMISC)\n \n /* 1 argument vector functions added in ISA 3.0 (power9). */\n BU_P9V_AV_1 (VCLZLSBB, \"vclzlsbb\",\t\tCONST,\tvclzlsbb)\n-BU_P9V_AV_1 (VCTZLSBB, \"vctzlsbb\",\t\tCONST,\tvctzlsbb)\n+BU_P9V_AV_1 (VCTZLSBB_V16QI, \"vctzlsbb_v16qi\",\tCONST,\tvctzlsbb_v16qi)\n+BU_P9V_AV_1 (VCTZLSBB_V8HI, \"vctzlsbb_v8hi\",\tCONST,\tvctzlsbb_v8hi)\n+BU_P9V_AV_1 (VCTZLSBB_V4SI, \"vctzlsbb_v4si\",\tCONST,\tvctzlsbb_v4si)\n \n /* Built-in support for Power9 \"VSU option\" string operations includes\n    new awareness of the \"vector compare not equal\" (vcmpneb, vcmpneb.,"}, {"sha": "c397d2060f7384b9acbae9d7cd5b6f0585496604", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=4d85d480272fb7331924f04534e0f5f14b60421e", "patch": "@@ -2411,6 +2411,62 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P9V_BUILTIN_VEC_CONVERT_4F32_8I16, P9V_BUILTIN_CONVERT_4F32_8I16,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n \n+  { P9V_BUILTIN_VEC_VFIRSTMATCHINDEX, P9V_BUILTIN_VFIRSTMATCHINDEX_V16QI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMATCHINDEX, P9V_BUILTIN_VFIRSTMATCHINDEX_V16QI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMATCHINDEX, P9V_BUILTIN_VFIRSTMATCHINDEX_V8HI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMATCHINDEX, P9V_BUILTIN_VFIRSTMATCHINDEX_V8HI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMATCHINDEX, P9V_BUILTIN_VFIRSTMATCHINDEX_V4SI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMATCHINDEX, P9V_BUILTIN_VFIRSTMATCHINDEX_V4SI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMATCHOREOSINDEX, P9V_BUILTIN_VFIRSTMATCHOREOSINDEX_V16QI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMATCHOREOSINDEX, P9V_BUILTIN_VFIRSTMATCHOREOSINDEX_V16QI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMATCHOREOSINDEX, P9V_BUILTIN_VFIRSTMATCHOREOSINDEX_V8HI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMATCHOREOSINDEX, P9V_BUILTIN_VFIRSTMATCHOREOSINDEX_V8HI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMATCHOREOSINDEX, P9V_BUILTIN_VFIRSTMATCHOREOSINDEX_V4SI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMATCHOREOSINDEX, P9V_BUILTIN_VFIRSTMATCHOREOSINDEX_V4SI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHINDEX, P9V_BUILTIN_VFIRSTMISMATCHINDEX_V16QI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHINDEX, P9V_BUILTIN_VFIRSTMISMATCHINDEX_V16QI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHINDEX, P9V_BUILTIN_VFIRSTMISMATCHINDEX_V8HI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHINDEX, P9V_BUILTIN_VFIRSTMISMATCHINDEX_V8HI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHINDEX, P9V_BUILTIN_VFIRSTMISMATCHINDEX_V4SI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHINDEX, P9V_BUILTIN_VFIRSTMISMATCHINDEX_V4SI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHOREOSINDEX,\n+    P9V_BUILTIN_VFIRSTMISMATCHOREOSINDEX_V16QI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHOREOSINDEX,\n+    P9V_BUILTIN_VFIRSTMISMATCHOREOSINDEX_V16QI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHOREOSINDEX,\n+    P9V_BUILTIN_VFIRSTMISMATCHOREOSINDEX_V8HI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHOREOSINDEX,\n+    P9V_BUILTIN_VFIRSTMISMATCHOREOSINDEX_V8HI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHOREOSINDEX,\n+    P9V_BUILTIN_VFIRSTMISMATCHOREOSINDEX_V4SI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VFIRSTMISMATCHOREOSINDEX,\n+    P9V_BUILTIN_VFIRSTMISMATCHOREOSINDEX_V4SI,\n+    RS6000_BTI_UINTSI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+\n   { ALTIVEC_BUILTIN_VEC_VPKUWUM, ALTIVEC_BUILTIN_VPKUWUM,\n     RS6000_BTI_V8HI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_VPKUWUM, ALTIVEC_BUILTIN_VPKUWUM,\n@@ -5189,10 +5245,14 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P9V_BUILTIN_VEC_VCLZLSBB, P9V_BUILTIN_VCLZLSBB,\n     RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n \n-  { P9V_BUILTIN_VEC_VCTZLSBB, P9V_BUILTIN_VCTZLSBB,\n+  { P9V_BUILTIN_VEC_VCTZLSBB, P9V_BUILTIN_VCTZLSBB_V16QI,\n     RS6000_BTI_INTSI, RS6000_BTI_V16QI, 0, 0 },\n-  { P9V_BUILTIN_VEC_VCTZLSBB, P9V_BUILTIN_VCTZLSBB,\n+  { P9V_BUILTIN_VEC_VCTZLSBB, P9V_BUILTIN_VCTZLSBB_V16QI,\n     RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZLSBB, P9V_BUILTIN_VCTZLSBB_V8HI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V8HI, 0, 0 },\n+  { P9V_BUILTIN_VEC_VCTZLSBB, P9V_BUILTIN_VCTZLSBB_V4SI,\n+    RS6000_BTI_INTSI, RS6000_BTI_V4SI, 0, 0 },\n \n   { P9V_BUILTIN_VEC_VEXTRACT4B, P9V_BUILTIN_VEXTRACT4B,\n     RS6000_BTI_INTDI, RS6000_BTI_V16QI, RS6000_BTI_UINTSI, 0 },"}, {"sha": "335e5c1a670d743481172cad07cbf811057469a9", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 149, "deletions": 2, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=4d85d480272fb7331924f04534e0f5f14b60421e", "patch": "@@ -418,6 +418,10 @@\n    UNSPEC_VCMPNEZW\n    UNSPEC_XXEXTRACTUW\n    UNSPEC_XXINSERTW\n+   UNSPEC_VSX_FIRST_MATCH_INDEX\n+   UNSPEC_VSX_FIRST_MATCH_EOS_INDEX\n+   UNSPEC_VSX_FIRST_MISMATCH_INDEX\n+   UNSPEC_VSX_FIRST_MISMATCH_EOS_INDEX\n   ])\n \n ;; VSX moves\n@@ -4345,6 +4349,149 @@\n   \"vcmpnez<VSX_EXTRACT_WIDTH>. %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n+;; Return first position of match between vectors\n+(define_expand \"first_match_index_<mode>\"\n+  [(match_operand:SI 0 \"register_operand\")\n+   (unspec:SI [(match_operand:VSX_EXTRACT_I 1 \"register_operand\")\n+\t       (match_operand:VSX_EXTRACT_I 2 \"register_operand\")]\n+  UNSPEC_VSX_FIRST_MATCH_INDEX)]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  int sh;\n+\n+  rtx cmp_result = gen_reg_rtx (<MODE>mode);\n+  rtx not_result = gen_reg_rtx (<MODE>mode);\n+\n+  emit_insn (gen_vcmpnez<VSX_EXTRACT_WIDTH> (cmp_result, operands[1],\n+\t\t\t\t\t     operands[2]));\n+  emit_insn (gen_one_cmpl<mode>2 (not_result, cmp_result));\n+\n+  sh = GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) / 2;\n+\n+  if (<MODE>mode == V16QImode)\n+    emit_insn (gen_vctzlsbb_<mode> (operands[0], not_result));\n+  else\n+    {\n+      rtx tmp = gen_reg_rtx (SImode);\n+      emit_insn (gen_vctzlsbb_<mode> (tmp, not_result));\n+      emit_insn (gen_ashrsi3 (operands[0], tmp, GEN_INT (sh)));\n+    }\n+  DONE;\n+})\n+\n+;; Return first position of match between vectors or end of string (EOS)\n+(define_expand \"first_match_or_eos_index_<mode>\"\n+  [(match_operand:SI 0 \"register_operand\")\n+   (unspec: SI [(match_operand:VSX_EXTRACT_I 1 \"register_operand\")\n+   (match_operand:VSX_EXTRACT_I 2 \"register_operand\")]\n+  UNSPEC_VSX_FIRST_MATCH_EOS_INDEX)]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  int sh;\n+  rtx cmpz1_result = gen_reg_rtx (<MODE>mode);\n+  rtx cmpz2_result = gen_reg_rtx (<MODE>mode);\n+  rtx cmpz_result = gen_reg_rtx (<MODE>mode);\n+  rtx and_result = gen_reg_rtx (<MODE>mode);\n+  rtx result = gen_reg_rtx (<MODE>mode);\n+  rtx vzero = gen_reg_rtx (<MODE>mode);\n+\n+  /* Vector with zeros in elements that correspond to zeros in operands.  */\n+  emit_move_insn (vzero, CONST0_RTX (<MODE>mode));\n+  emit_insn (gen_vcmpne<VSX_EXTRACT_WIDTH> (cmpz1_result, operands[1], vzero));\n+  emit_insn (gen_vcmpne<VSX_EXTRACT_WIDTH> (cmpz2_result, operands[2], vzero));\n+  emit_insn (gen_and<mode>3 (and_result, cmpz1_result, cmpz2_result));\n+\n+  /* Vector with ones in elments that do not match.  */\n+  emit_insn (gen_vcmpnez<VSX_EXTRACT_WIDTH> (cmpz_result, operands[1],\n+                                             operands[2]));\n+\n+  /* Create vector with ones in elements where there was a zero in one of\n+     the source elements or the elements that match.  */\n+  emit_insn (gen_nand<mode>3 (result, and_result, cmpz_result));\n+  sh = GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) / 2;\n+\n+  if (<MODE>mode == V16QImode)\n+    emit_insn (gen_vctzlsbb_<mode> (operands[0], result));\n+  else\n+    {\n+      rtx tmp = gen_reg_rtx (SImode);\n+      emit_insn (gen_vctzlsbb_<mode> (tmp, result));\n+      emit_insn (gen_ashrsi3 (operands[0], tmp, GEN_INT (sh)));\n+    }\n+  DONE;\n+})\n+\n+;; Return first position of mismatch between vectors\n+(define_expand \"first_mismatch_index_<mode>\"\n+  [(match_operand:SI 0 \"register_operand\")\n+   (unspec: SI [(match_operand:VSX_EXTRACT_I 1 \"register_operand\")\n+   (match_operand:VSX_EXTRACT_I 2 \"register_operand\")]\n+  UNSPEC_VSX_FIRST_MISMATCH_INDEX)]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  int sh;\n+  rtx cmp_result = gen_reg_rtx (<MODE>mode);\n+\n+  emit_insn (gen_vcmpne<VSX_EXTRACT_WIDTH> (cmp_result, operands[1],\n+\t\t\t\t\t    operands[2]));\n+  sh = GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) / 2;\n+\n+  if (<MODE>mode == V16QImode)\n+    emit_insn (gen_vctzlsbb_<mode> (operands[0], cmp_result));\n+  else\n+    {\n+      rtx tmp = gen_reg_rtx (SImode);\n+      emit_insn (gen_vctzlsbb_<mode> (tmp, cmp_result));\n+      emit_insn (gen_ashrsi3 (operands[0], tmp, GEN_INT (sh)));\n+    }\n+  DONE;\n+})\n+\n+;; Return first position of mismatch between vectors or end of string (EOS)\n+(define_expand \"first_mismatch_or_eos_index_<mode>\"\n+  [(match_operand:SI 0 \"register_operand\")\n+   (unspec: SI [(match_operand:VSX_EXTRACT_I 1 \"register_operand\")\n+   (match_operand:VSX_EXTRACT_I 2 \"register_operand\")]\n+  UNSPEC_VSX_FIRST_MISMATCH_EOS_INDEX)]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  int sh;\n+  rtx cmpz1_result = gen_reg_rtx (<MODE>mode);\n+  rtx cmpz2_result = gen_reg_rtx (<MODE>mode);\n+  rtx cmpz_result = gen_reg_rtx (<MODE>mode);\n+  rtx not_cmpz_result = gen_reg_rtx (<MODE>mode);\n+  rtx and_result = gen_reg_rtx (<MODE>mode);\n+  rtx result = gen_reg_rtx (<MODE>mode);\n+  rtx vzero = gen_reg_rtx (<MODE>mode);\n+\n+  /* Vector with zeros in elements that correspond to zeros in operands.  */\n+  emit_move_insn (vzero, CONST0_RTX (<MODE>mode));\n+\n+  emit_insn (gen_vcmpne<VSX_EXTRACT_WIDTH> (cmpz1_result, operands[1], vzero));\n+  emit_insn (gen_vcmpne<VSX_EXTRACT_WIDTH> (cmpz2_result, operands[2], vzero));\n+  emit_insn (gen_and<mode>3 (and_result, cmpz1_result, cmpz2_result));\n+\n+  /* Vector with ones in elments that match.  */\n+  emit_insn (gen_vcmpnez<VSX_EXTRACT_WIDTH> (cmpz_result, operands[1],\n+                                             operands[2]));\n+  emit_insn (gen_one_cmpl<mode>2 (not_cmpz_result, cmpz_result));\n+\n+  /* Create vector with ones in elements where there was a zero in one of\n+     the source elements or the elements did not match.  */\n+  emit_insn (gen_nand<mode>3 (result, and_result, not_cmpz_result));\n+  sh = GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) / 2;\n+\n+  if (<MODE>mode == V16QImode)\n+    emit_insn (gen_vctzlsbb_<mode> (operands[0], result));\n+  else\n+    {\n+      rtx tmp = gen_reg_rtx (SImode);\n+      emit_insn (gen_vctzlsbb_<mode> (tmp, result));\n+      emit_insn (gen_ashrsi3 (operands[0], tmp, GEN_INT (sh)));\n+    }\n+  DONE;\n+})\n+\n ;; Load VSX Vector with Length\n (define_expand \"lxvl\"\n   [(set (match_dup 3)\n@@ -4524,10 +4671,10 @@\n   [(set_attr \"type\" \"vecsimple\")])\n \n ;; Vector Count Trailing Zero Least-Significant Bits Byte\n-(define_insn \"vctzlsbb\"\n+(define_insn \"vctzlsbb_<mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI\n-\t [(match_operand:V16QI 1 \"altivec_register_operand\" \"v\")]\n+\t [(match_operand:VSX_EXTRACT_I 1 \"altivec_register_operand\" \"v\")]\n \t UNSPEC_VCTZLSBB))]\n   \"TARGET_P9_VECTOR\"\n   \"vctzlsbb %0,%1\""}, {"sha": "c6bdb86a9eab234361ecb300d78f3e134b47f082", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4d85d480272fb7331924f04534e0f5f14b60421e", "patch": "@@ -15875,6 +15875,51 @@ signed int vec_cntlz_lsbb (vector unsigned char);\n signed int vec_cnttz_lsbb (vector signed char);\n signed int vec_cnttz_lsbb (vector unsigned char);\n \n+unsigned int vec_first_match_index (vector signed char, vector signed char);\n+unsigned int vec_first_match_index (vector unsigned char,\n+                                    vector unsigned char);\n+unsigned int vec_first_match_index (vector signed int, vector signed int);\n+unsigned int vec_first_match_index (vector unsigned int, vector unsigned int);\n+unsigned int vec_first_match_index (vector signed short, vector signed short);\n+unsigned int vec_first_match_index (vector unsigned short,\n+                                    vector unsigned short);\n+unsigned int vec_first_match_or_eos_index (vector signed char,\n+                                           vector signed char);\n+unsigned int vec_first_match_or_eos_index (vector unsigned char,\n+                                           vector unsigned char);\n+unsigned int vec_first_match_or_eos_index (vector signed int,\n+                                           vector signed int);\n+unsigned int vec_first_match_or_eos_index (vector unsigned int,\n+                                           vector unsigned int);\n+unsigned int vec_first_match_or_eos_index (vector signed short,\n+                                           vector signed short);\n+unsigned int vec_first_match_or_eos_index (vector unsigned short,\n+                                           vector unsigned short);\n+unsigned int vec_first_mismatch_index (vector signed char,\n+                                       vector signed char);\n+unsigned int vec_first_mismatch_index (vector unsigned char,\n+                                       vector unsigned char);\n+unsigned int vec_first_mismatch_index (vector signed int,\n+                                       vector signed int);\n+unsigned int vec_first_mismatch_index (vector unsigned int,\n+                                       vector unsigned int);\n+unsigned int vec_first_mismatch_index (vector signed short,\n+                                       vector signed short);\n+unsigned int vec_first_mismatch_index (vector unsigned short,\n+                                       vector unsigned short);\n+unsigned int vec_first_mismatch_or_eos_index (vector signed char,\n+                                              vector signed char);\n+unsigned int vec_first_mismatch_or_eos_index (vector unsigned char,\n+                                              vector unsigned char);\n+unsigned int vec_first_mismatch_or_eos_index (vector signed int,\n+                                              vector signed int);\n+unsigned int vec_first_mismatch_or_eos_index (vector unsigned int,\n+                                              vector unsigned int);\n+unsigned int vec_first_mismatch_or_eos_index (vector signed short,\n+                                              vector signed short);\n+unsigned int vec_first_mismatch_or_eos_index (vector unsigned short,\n+                                              vector unsigned short);\n+\n vector unsigned short vec_pack_to_short_fp32 (vector float, vector float);\n \n vector signed char vec_xl_be (signed long long, signed char *);"}, {"sha": "69633de1bea1cba9b78b44df4fc1beb218ee1104", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d85d480272fb7331924f04534e0f5f14b60421e", "patch": "@@ -1,3 +1,9 @@\n+2017-11-13  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-6-p9-runnable.c: Add new runnable test.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-2.c: Update expected error\n+\tmessage.\n+\n 2017-11-13  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/float128-minmax.c: New test."}, {"sha": "9319a37274806f1f27f63690456e0c3222c0cfbc", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-6-p9-runnable.c", "status": "added", "additions": 1046, "deletions": 0, "changes": 1046, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-6-p9-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-6-p9-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-6-p9-runnable.c?ref=4d85d480272fb7331924f04534e0f5f14b60421e", "patch": "@@ -0,0 +1,1046 @@\n+/* { dg-do run { target { powerpc*-*-* &&  p9vector_hw } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <inttypes.h>\n+#include <altivec.h> // vector\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+void abort (void);\n+\n+int main() {\n+   vector signed char char_src1, char_src2;\n+   vector unsigned char uchar_src1, uchar_src2;\n+   vector signed short int short_src1, short_src2;\n+   vector unsigned short int ushort_src1, ushort_src2;\n+   vector signed int int_src1, int_src2;\n+   vector unsigned int uint_src1, uint_src2;\n+   unsigned int result, expected_result;\n+\n+   /* Tests for: vec_first_match_index() */\n+   /* char */\n+   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 0;\n+\n+   result = vec_first_match_index (char_src1, char_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: char first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   char_src1 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   char_src2 = (vector signed char) {-1, -2, -3, -4, -5, -6, -7, -8,\n+\t\t\t\t     -9, -10, -11, -12, -13, -14, -15, -16};\n+   expected_result = 16;\n+\n+   result = vec_first_match_index (char_src1, char_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: char first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uchar_src1 = (vector unsigned char) {0, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n+   uchar_src2 = (vector unsigned char) {1, 0, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 2;\n+\n+   result = vec_first_match_index (uchar_src1, uchar_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uchar first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t10, 11, 12, 13, 14, 15, 16, 17};\n+   uchar_src2 = (vector unsigned char) {3, 4, 5, 6, 7, 8, 9, 10,\n+\t\t\t\t\t11, 12, 13, 14, 15, 16, 17, 18};\n+   expected_result = 16;\n+\n+   result = vec_first_match_index (uchar_src1, uchar_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uchar first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   /* short int */\n+   short_src1 = (vector short int) {10, -20, -30, 40, 50, 60, 70, 80};\n+   short_src2 = (vector short int) {-10, 20, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 3;\n+\n+   result = vec_first_match_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+\n+   short_src1 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n+   short_src2 = (vector short int) {0, 0, 0, 0, 0, 0, 0, 0};\n+\n+   expected_result = 8;\n+\n+   result = vec_first_match_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   ushort_src1 = (vector short unsigned int) {0, 0, 0, 0, 0, 60, 70, 0};\n+   ushort_src2 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 5;\n+\n+   result = vec_first_match_index (ushort_src1, ushort_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: ushort int first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   ushort_src1 = (vector short unsigned int) {-20, 30, -40, 50,\n+\t\t\t\t\t      60, -70, 80, -90};\n+   ushort_src2 = (vector short unsigned int) {20, -30, 40, -50,\n+\t\t\t\t\t      -60, 70, -80, 90};\n+\n+   expected_result = 8;\n+\n+   result = vec_first_match_index (ushort_src1, ushort_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: ushort int first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   /* int */\n+   int_src1 = (vector int) {1, 2, 3, 4};\n+   int_src2 = (vector int) {10, 20, 30, 4};\n+\n+   expected_result = 3;\n+\n+   result = vec_first_match_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   int_src1 = (vector int) {1, 2, 3, 4};\n+   int_src2 = (vector int) {4, 3, 2, 1};\n+\n+   expected_result = 4;\n+\n+   result = vec_first_match_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n+   uint_src2 = (vector unsigned int) {11, 2, 33, 4};\n+\n+   expected_result = 1;\n+\n+   result = vec_first_match_index (uint_src1, uint_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uint first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n+   uint_src2 = (vector unsigned int) {2, 3, 4, 5};\n+\n+   expected_result = 4;\n+\n+   result = vec_first_match_index (uint_src1, uint_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uint first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   /* Tests for: vec_first_mismatch_index() */\n+   /* char */\n+   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 3;\n+\n+   result = vec_first_mismatch_index (char_src1, char_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: char first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   char_src1 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   char_src2 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 16;\n+\n+   result = vec_first_mismatch_index (char_src1, char_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: char first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uchar_src1 = (vector unsigned char) {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n+   uchar_src2 = (vector unsigned char) {1, 0, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 1;\n+\n+   result = vec_first_mismatch_index (uchar_src1, uchar_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uchar first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t10, 11, 12, 13, 14, 15, 16};\n+   uchar_src2 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t0, 11, 12, 13, 14, 15, 16};\n+   expected_result = 8;\n+\n+   result = vec_first_mismatch_index (uchar_src1, uchar_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uchar first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t10, 11, 12, 13, 14, 15, 16};\n+   uchar_src2 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 16;\n+\n+   result = vec_first_mismatch_index (uchar_src1, uchar_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uchar first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   /* short int */\n+   short_src1 = (vector short int) {-10, -20, 30, 40, 50, 60, 70, 80};\n+   short_src2 = (vector short int) {-10, 20, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 1;\n+\n+   result = vec_first_mismatch_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   short_src1 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n+   short_src2 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 8;\n+\n+   result = vec_first_mismatch_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   ushort_src1 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 0};\n+   ushort_src2 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 7;\n+\n+   result = vec_first_mismatch_index (ushort_src1, ushort_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: ushort int first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   ushort_src1 = (vector short unsigned int) {20, 30, 40, 50, 60, 70, 80, 90};\n+   ushort_src2 = (vector short unsigned int) {20, 30, 40, 50, 60, 70, 80, 90};\n+\n+   expected_result = 8;\n+\n+   result = vec_first_mismatch_index (ushort_src1, ushort_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: ushort int first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   /* int */\n+   int_src1 = (vector int) {1, 2, 3, 4};\n+   int_src2 = (vector int) {1, 20, 3, 4};\n+\n+   expected_result = 1;\n+\n+   result = vec_first_mismatch_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   int_src1 = (vector int) {1, 2, 3, 4};\n+   int_src2 = (vector int) {1, 2, 3, 4};\n+\n+   expected_result = 4;\n+\n+   result = vec_first_mismatch_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   int_src1 = (vector int) {1, 0, 3, 4};\n+   int_src2 = (vector int) {1, 2, 3, 4};\n+\n+   expected_result = 1;\n+\n+   result = vec_first_mismatch_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n+   uint_src2 = (vector unsigned int) {11, 2, 33, 4};\n+\n+   expected_result = 0;\n+\n+   result = vec_first_mismatch_index (uint_src1, uint_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uint first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n+   uint_src2 = (vector unsigned int) {1, 2, 3, 4};\n+\n+   expected_result = 4;\n+\n+   result = vec_first_mismatch_index (uint_src1, uint_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uint first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   /* Tests for: vec_first_match_or_eos_index() */\n+   /* char */\n+   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 0;\n+\n+   result = vec_first_match_or_eos_index (char_src1, char_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: char first match result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   char_src1 = (vector signed char) {-1, 2, 3, 0, -5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   char_src2 = (vector signed char) {2, 3, 20, 0, -5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 3;\n+\n+   result = vec_first_match_or_eos_index (char_src1, char_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: char first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+  char_src1 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   char_src2 = (vector signed char) {-1, -2, -3, -4, -5, -6, -7, -8,\n+\t\t\t\t     -9, -10, -11, -12, -13, -14, -15, -16};\n+   expected_result = 16;\n+\n+   result = vec_first_match_or_eos_index (char_src1, char_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: char first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+#endif\n+\n+   uchar_src1 = (vector unsigned char) {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n+   uchar_src2 = (vector unsigned char) {-1, 0, -3, -4, -5, -6, -7, -8,\n+\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 1;\n+\n+   result = vec_first_match_or_eos_index (uchar_src1, uchar_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uchar first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t10, 11, 12, 13, 14, 15, 16, 17};\n+   uchar_src2 = (vector unsigned char) {3, 4, 5, 6, 7, 8, 9, 10,\n+\t\t\t\t\t11, 12, 13, 14, 15, 16, 17, 18};\n+   expected_result = 16;\n+\n+   result = vec_first_match_or_eos_index (uchar_src1, uchar_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uchar first match or EOS  result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   /* short int */\n+   short_src1 = (vector short int) {10, -20, -30, 40, 50, 60, 70, 80};\n+   short_src2 = (vector short int) {-10, 20, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 3;\n+\n+   result = vec_first_match_or_eos_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   short_src1 = (vector short int) {1, 20, 30, 40, 50, 60, 70, 80};\n+\n+   short_src2 = (vector short int) {10, 0, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 1;\n+\n+   result = vec_first_match_or_eos_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   short_src1 = (vector short int) {-10, -20, -30, -40, -50, -60, -70, -80};\n+\n+   short_src2 = (vector short int) {10, 20, 30, 40, 50, 0, 70, 80};\n+\n+   expected_result = 5;\n+\n+   result = vec_first_match_or_eos_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   short_src1 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n+   short_src2 = (vector short int) {0, 0, 0, 0, 0, 0, 0, 0};\n+\n+   expected_result = 0;\n+\n+   result = vec_first_match_or_eos_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   ushort_src1 = (vector short unsigned int) {1, 2, 0, 0, 60, 70, 0};\n+   ushort_src2 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 2;\n+\n+   result = vec_first_match_or_eos_index (ushort_src1, ushort_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: ushort int first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   ushort_src1 = (vector short unsigned int) {-20, 30, -40, 50,\n+\t\t\t\t\t      60, -70, 80, -90};\n+   ushort_src2 = (vector short unsigned int) {20, -30, 40, -50,\n+\t\t\t\t\t      -60, 70, -80, 90};\n+\n+   expected_result = 8;\n+\n+   result = vec_first_match_or_eos_index (ushort_src1, ushort_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: ushort int first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+   ushort_src1 = (vector short unsigned int) {-20, 30, -40, 50,\n+\t\t\t\t\t      60, -70, 80, 0};\n+\n+   ushort_src2 = (vector short unsigned int) {20, -30, 40, -50,\n+\t\t\t\t\t      -60, 70, -80, 90};\n+\n+   expected_result = 7;\n+\n+   result = vec_first_match_or_eos_index (ushort_src1, ushort_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: ushort int first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   /* int */\n+   int_src1 = (vector int) {1, 2, 3, 4};\n+   int_src2 = (vector int) {10, 20, 30, 4};\n+\n+   expected_result = 3;\n+\n+   result = vec_first_match_or_eos_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   int_src1 = (vector int) {0, 2, 3, 4};\n+   int_src2 = (vector int) {4, 3, 2, 1};\n+\n+   expected_result = 0;\n+\n+   result = vec_first_match_or_eos_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+\n+   int_src1 = (vector int) {1, 2, 3, 4};\n+   int_src2 = (vector int) {4, 3, 2, 1};\n+\n+   expected_result = 4;\n+\n+   result = vec_first_match_or_eos_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n+   uint_src2 = (vector unsigned int) {11, 2, 33, 4};\n+\n+   expected_result = 1;\n+\n+   result = vec_first_match_or_eos_index (uint_src1, uint_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uint first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uint_src1 = (vector unsigned int) {1, 2, 0, 4};\n+   uint_src2 = (vector unsigned int) {2, 3, 4, 5};\n+\n+   expected_result = 2;\n+\n+   result = vec_first_match_or_eos_index (uint_src1, uint_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uint first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n+   uint_src2 = (vector unsigned int) {2, 3, 4, 5};\n+\n+   expected_result = 4;\n+\n+   result = vec_first_match_or_eos_index (uint_src1, uint_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uint first match or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   /* Tests for: vec_first_mismatch_or_eos_index() */\n+   /* char */\n+   char_src1 = (vector signed char) {-1, 2, 3, 4, -5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   char_src2 = (vector signed char) {-1, 2, 3, 20, -5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 3;\n+\n+   result = vec_first_mismatch_or_eos_index (char_src1, char_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: char first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   char_src1 = (vector signed char) {1, 2, 0, 4, 5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   char_src2 = (vector signed char) {1, 2, 0, 4, 5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 2;\n+\n+   result = vec_first_mismatch_or_eos_index (char_src1, char_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: char first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   char_src1 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   char_src2 = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t     9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 16;\n+\n+   result = vec_first_mismatch_or_eos_index (char_src1, char_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: char first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uchar_src1 = (vector unsigned char) {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n+   uchar_src2 = (vector unsigned char) {1, 0, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t9, 10, 11, 12, 13, 14, 15, 16};\n+   expected_result = 1;\n+\n+   result = vec_first_mismatch_or_eos_index (uchar_src1, uchar_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uchar first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t0, 11, 12, 13, 14, 15, 16};\n+   uchar_src2 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t0, 11, 12, 13, 14, 15, 16};\n+   expected_result = 8;\n+\n+   result = vec_first_mismatch_or_eos_index (uchar_src1, uchar_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uchar first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t10, 11, 12, 13, 14, 15, 16, 17};\n+   uchar_src2 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t10, 11, 12, 13, 14, 0, 16, 17};\n+   expected_result = 13;\n+\n+   result = vec_first_mismatch_or_eos_index (uchar_src1, uchar_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uchar first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uchar_src1 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t10, 11, 12, 13, 14, 15, 16, 17};\n+   uchar_src2 = (vector unsigned char) {2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t10, 11, 12, 13, 14, 15, 16, 17};\n+   expected_result = 16;\n+\n+   result = vec_first_mismatch_or_eos_index (uchar_src1, uchar_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uchar first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   /* short int */\n+   short_src1 = (vector short int) {-10, -20, 30, 40, 50, 60, 70, 80};\n+   short_src2 = (vector short int) {-10, 20, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 1;\n+\n+   result = vec_first_mismatch_or_eos_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   short_src1 = (vector short int) {0, 20, 30, 40, 50, 60, 70, 80};\n+   short_src2 = (vector short int) {0, 20, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 0;\n+\n+   result = vec_first_mismatch_or_eos_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   short_src1 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n+   short_src2 = (vector short int) {10, 20, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 8;\n+\n+   result = vec_first_mismatch_or_eos_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   short_src1 = (vector short int) {10, 0, 30, 40, 50, 60, 70, 80};\n+   short_src2 = (vector short int) {10, 0, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 1;\n+\n+   result = vec_first_mismatch_or_eos_index (short_src1, short_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: short int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   ushort_src1 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 0};\n+   ushort_src2 = (vector short unsigned int) {10, 20, 30, 40, 50, 60, 70, 80};\n+\n+   expected_result = 7;\n+\n+   result = vec_first_mismatch_or_eos_index (ushort_src1, ushort_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: ushort int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   ushort_src1 = (vector short unsigned int) {20, 0, 40, 50, 60, 70, 80, 90};\n+   ushort_src2 = (vector short unsigned int) {20, 0, 40, 50, 60, 70, 80, 90};\n+\n+   expected_result = 1;\n+\n+   result = vec_first_mismatch_or_eos_index (ushort_src1, ushort_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: ushort int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   ushort_src1 = (vector short unsigned int) {20, 30, 40, 50, 60, 70, 80, 90};\n+   ushort_src2 = (vector short unsigned int) {20, 30, 40, 50, 60, 70, 80, 90};\n+\n+   expected_result = 8;\n+\n+   result = vec_first_mismatch_or_eos_index (ushort_src1, ushort_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: ushort int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   /* int */\n+   int_src1 = (vector int) {1, 2, 3, 4};\n+   int_src2 = (vector int) {1, 20, 3, 4};\n+\n+   expected_result = 1;\n+\n+   result = vec_first_mismatch_or_eos_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first mismatch or EOS result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   int_src1 = (vector int) {1, 2, 3, 4};\n+   int_src2 = (vector int) {1, 2, 3, 4};\n+\n+   expected_result = 4;\n+\n+   result = vec_first_mismatch_or_eos_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   int_src1 = (vector int) {1, 2, 0, 4};\n+   int_src2 = (vector int) {1, 2, 0, 4};\n+\n+   expected_result = 2;\n+\n+   result = vec_first_mismatch_or_eos_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   int_src1 = (vector int) {1, 0, 3, 4};\n+   int_src2 = (vector int) {1, 2, 3, 4};\n+\n+   expected_result = 1;\n+\n+   result = vec_first_mismatch_or_eos_index (int_src1, int_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: int first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n+   uint_src2 = (vector unsigned int) {11, 2, 33, 4};\n+\n+   expected_result = 0;\n+\n+   result = vec_first_mismatch_or_eos_index (uint_src1, uint_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uint first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uint_src1 = (vector unsigned int) {1, 2, 3, 0};\n+   uint_src2 = (vector unsigned int) {1, 2, 3, 0};\n+\n+   expected_result = 3;\n+\n+   result = vec_first_mismatch_or_eos_index (uint_src1, uint_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uint first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+   uint_src1 = (vector unsigned int) {1, 2, 3, 4};\n+   uint_src2 = (vector unsigned int) {1, 2, 3, 4};\n+\n+   expected_result = 4;\n+\n+   result = vec_first_mismatch_or_eos_index (uint_src1, uint_src2);\n+\n+   if (result != expected_result)\n+#ifdef DEBUG\n+      printf(\"Error: uint first mismatch result (%d) does not match expected result (%d)\\n\",\n+\t     result, expected_result);\n+#else\n+      abort();\n+#endif\n+\n+}"}, {"sha": "cd4bb9dc9f733567fda6641c53a835215f4afd2f", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cnttz-lsbb-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d85d480272fb7331924f04534e0f5f14b60421e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cnttz-lsbb-2.c?ref=4d85d480272fb7331924f04534e0f5f14b60421e", "patch": "@@ -10,5 +10,5 @@ count_trailing_zero_byte_bits (vector unsigned char *arg1_p)\n {\n   vector unsigned char arg_1 = *arg1_p;\n \n-  return __builtin_vec_vctzlsbb (arg_1);\t/* { dg-error \"builtin function '__builtin_altivec_vctzlsbb' requires the '-mcpu=power9' option\" } */\n+  return __builtin_vec_vctzlsbb (arg_1);\t/* { dg-error \"builtin function '__builtin_altivec_vctzlsbb_v16qi' requires the '-mcpu=power9' option\" } */\n }"}]}