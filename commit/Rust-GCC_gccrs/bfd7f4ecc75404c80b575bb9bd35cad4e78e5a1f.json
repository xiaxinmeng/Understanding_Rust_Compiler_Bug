{"sha": "bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZkN2Y0ZWNjNzU0MDRjODBiNTc1YmI5YmQzNWNhZDRlNzhlNWExZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-01-25T22:39:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-01-25T22:39:29Z"}, "message": "Makefile.am (sources): Add globals.cc.\n\n\t* src/Makefile.am (sources): Add globals.cc.\n\t* src/Makefile.in: Regenerated.\n\t* src/globals.cc: New file.\n\t* src/ios.cc (cin): Don't define here, just declare extern.\n\t(cout): Likewise.\n\t(cerr): Likewise.\n\t(clog): Likewise.\n\t(wcin): Likewise.\n\t(wcout): Likewise.\n\t(wcerr): Likewise.\n\t(wclog): Likewise.\n\nFrom-SVN: r39275", "tree": {"sha": "5aecc533f288687893f3fcb7e64de195efe5ae27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aecc533f288687893f3fcb7e64de195efe5ae27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f/comments", "author": null, "committer": null, "parents": [{"sha": "c4faeb92870c2e757702e491d4d22c00e5080905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4faeb92870c2e757702e491d4d22c00e5080905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4faeb92870c2e757702e491d4d22c00e5080905"}], "stats": {"total": 103, "additions": 90, "deletions": 13}, "files": [{"sha": "5031dbbb6a2c532d5dd1bd38364d845b0c5eec41", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f", "patch": "@@ -1,3 +1,17 @@\n+2001-01-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* src/Makefile.am (sources): Add globals.cc.\n+\t* src/Makefile.in: Regenerated.\n+\t* src/globals.cc: New file.\n+\t* src/ios.cc (cin): Don't define here, just declare extern.\n+\t(cout): Likewise.\n+\t(cerr): Likewise.\n+\t(clog): Likewise.\n+\t(wcin): Likewise.\n+\t(wcout): Likewise.\n+\t(wcerr): Likewise.\n+\t(wclog): Likewise.\n+\n 2001-01-25  Phil Edwards  <pme@sources.redhat.com>\n \n \t* include/bits/std_iterator.h:  Do not include stl_relops.h."}, {"sha": "945b9627b77ec846975b906cc050163ab484f8f9", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.63 2001/01/10 17:24:11 bkoz Exp $\n+## $Id: Makefile.am,v 1.64 2001/01/11 07:27:49 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -176,6 +176,7 @@ sources = \\\n \tlimitsMEMBERS.cc \\\n \tcomplex_io.cc \\\n \tstdexcept.cc bitset.cc \\\n+        globals.cc \\\n \tc++io.cc ios.cc strstream.cc \\\n \tlocale.cc localename.cc codecvt.cc \\\n \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc"}, {"sha": "a9f2aa71071838db5e87dcbec4be128f6a68ba22", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f", "patch": "@@ -170,7 +170,7 @@ std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios i\n build_headers =  \tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources =  \tlimitsMEMBERS.cc \tcomplex_io.cc \tstdexcept.cc bitset.cc \tc++io.cc ios.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources =  \tlimitsMEMBERS.cc \tcomplex_io.cc \tstdexcept.cc bitset.cc         globals.cc \tc++io.cc ios.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n wstring_sources =  \twstring-inst.cc\n@@ -259,9 +259,9 @@ libinst_wstring_la_LDFLAGS =\n libinst_wstring_la_LIBADD = \n libinst_wstring_la_OBJECTS =  wstring-inst.lo\n libstdc___la_OBJECTS =  limitsMEMBERS.lo complex_io.lo stdexcept.lo \\\n-bitset.lo c++io.lo ios.lo strstream.lo locale.lo localename.lo \\\n-codecvt.lo locale-inst.lo stl-inst.lo misc-inst.lo valarray-inst.lo \\\n-string-inst.lo\n+bitset.lo globals.lo c++io.lo ios.lo strstream.lo locale.lo \\\n+localename.lo codecvt.lo locale-inst.lo stl-inst.lo misc-inst.lo \\\n+valarray-inst.lo string-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n CXXLD = $(CXX)"}, {"sha": "bd24d8fa00dc17d0e8dcfc9cf5685cde6961a6cb", "filename": "libstdc++-v3/src/globals.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// On AIX, and perhaps other systems, library initialization order\n+// is not guaranteed.  For example, the static initializers for the \n+// main program might run before the static initializers for this\n+// library.  That means that we cannot rely on static initialization in \n+// the library; there is no guarantee that things will get initialized\n+// in time.  This file contains definitions of all global variables\n+// that require initialization as arrays of characters.\n+\n+#include <istream>\n+#include <ostream>\n+\n+namespace std {\n+  typedef char fake_istream[sizeof (istream)] \n+  __attribute__ ((aligned (__alignof__ (istream))));\n+  typedef char fake_ostream[sizeof (ostream)] \n+  __attribute__ ((aligned (__alignof__ (ostream))));\n+\n+  fake_istream cin;\n+  fake_ostream cout;\n+  fake_ostream cerr;\n+  fake_ostream clog;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  typedef char fake_wistream[sizeof (wistream)] \n+  __attribute__ ((aligned (__alignof__ (wistream))));\n+  typedef char fake_wostream[sizeof (wostream)] \n+  __attribute__ ((aligned (__alignof__ (wostream))));\n+\n+  fake_wistream wcin;\n+  fake_wostream wcout;\n+  fake_wostream wcerr;\n+  fake_wostream wclog;\n+#endif\n+}"}, {"sha": "fe5d63065f6b6616853918ddfeda5e8e311a3c60", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=bfd7f4ecc75404c80b575bb9bd35cad4e78e5a1f", "patch": "@@ -35,6 +35,7 @@\n #include <bits/std_ostream.h>\n #include <bits/std_istream.h>\n #include <bits/std_fstream.h>\n+#include <stdio.h>\n \n namespace std \n {\n@@ -109,15 +110,15 @@ namespace std\n   int ios_base::Init::_S_ios_base_init = 0;\n   bool ios_base::Init::_S_synced_with_stdio = true;\n \n-  istream cin(NULL);\n-  ostream cout(NULL);\n-  ostream cerr(NULL);\n-  ostream clog(NULL);\n+  extern istream cin;\n+  extern ostream cout;\n+  extern ostream cerr;\n+  extern ostream clog;\n #ifdef _GLIBCPP_USE_WCHAR_T\n-  wistream wcin(NULL);\n-  wostream wcout(NULL);\n-  wostream wcerr(NULL);\n-  wostream wclog(NULL);\n+  extern wistream wcin;\n+  extern wostream wcout;\n+  extern wostream wcerr;\n+  extern wostream wclog;\n #endif\n \n   ios_base::failure::failure(const string& __str) throw()"}]}