{"sha": "fec573408310139e1ffc42741fbe46b4f2947592", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVjNTczNDA4MzEwMTM5ZTFmZmM0Mjc0MWZiZTQ2YjRmMjk0NzU5Mg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-11-12T22:27:28Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-11-12T22:27:28Z"}, "message": "jit: fix string escaping\n\nThis patch fixes a bug in recording::string::make_debug_string in which\n'\\t' and '\\n' were \"escaped\" by simply prepending a '\\', thus emitting\n'\\' then '\\n', rather than '\\' then 'n'.  It also removes a hack that\ndetermined if a string is to be escaped by checking for a leading '\"',\nby instead adding a flag.\n\ngcc/jit/ChangeLog:\n\t* jit-recording.c (recording::context::new_string): Add \"escaped\"\n\tparam and use it when creating the new recording::string instance.\n\t(recording::string::string): Add \"escaped\" param and use it to\n\tinitialize m_escaped.\n\t(recording::string::make_debug_string): Replace check that first\n\tchar is double-quote with use of m_escaped.  Fix escaping of\n\t'\\t' and '\\n'.  Set \"escaped\" on the result.\n\t* jit-recording.h (recording::context::new_string): Add \"escaped\"\n\tparam.\n\t(recording::string::string): Add \"escaped\" param.\n\t(recording::string::m_escaped): New field.\n\ngcc/testsuite/ChangeLog:\n\t* jit.dg/test-debug-strings.c (create_code): Add tests of\n\tstring literal escaping.", "tree": {"sha": "ce6484550e5cb83a3abdf83e8a9817a5231d047d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce6484550e5cb83a3abdf83e8a9817a5231d047d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fec573408310139e1ffc42741fbe46b4f2947592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec573408310139e1ffc42741fbe46b4f2947592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fec573408310139e1ffc42741fbe46b4f2947592", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec573408310139e1ffc42741fbe46b4f2947592/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8948a5715b00fe36d20c03b6c4c4397b74cc6282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8948a5715b00fe36d20c03b6c4c4397b74cc6282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8948a5715b00fe36d20c03b6c4c4397b74cc6282"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "3a84c1fc5c0c3433b022a10be46e098a36d80d03", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec573408310139e1ffc42741fbe46b4f2947592/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec573408310139e1ffc42741fbe46b4f2947592/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=fec573408310139e1ffc42741fbe46b4f2947592", "patch": "@@ -724,12 +724,12 @@ recording::context::disassociate_from_playback ()\n    This creates a fresh copy of the given 0-terminated buffer.  */\n \n recording::string *\n-recording::context::new_string (const char *text)\n+recording::context::new_string (const char *text, bool escaped)\n {\n   if (!text)\n     return NULL;\n \n-  recording::string *result = new string (this, text);\n+  recording::string *result = new string (this, text, escaped);\n   record (result);\n   return result;\n }\n@@ -1954,8 +1954,9 @@ recording::memento::write_to_dump (dump &d)\n /* Constructor for gcc::jit::recording::string::string, allocating a\n    copy of the given text using new char[].  */\n \n-recording::string::string (context *ctxt, const char *text)\n-  : memento (ctxt)\n+recording::string::string (context *ctxt, const char *text, bool escaped)\n+: memento (ctxt),\n+  m_escaped (escaped)\n {\n   m_len = strlen (text);\n   m_buffer = new char[m_len + 1];\n@@ -2005,9 +2006,9 @@ recording::string::from_printf (context *ctxt, const char *fmt, ...)\n recording::string *\n recording::string::make_debug_string ()\n {\n-  /* Hack to avoid infinite recursion into strings when logging all\n-     mementos: don't re-escape strings:  */\n-  if (m_buffer[0] == '\"')\n+  /* Avoid infinite recursion into strings when logging all mementos:\n+     don't re-escape strings:  */\n+  if (m_escaped)\n     return this;\n \n   /* Wrap in quotes and do escaping etc */\n@@ -2024,15 +2025,31 @@ recording::string::make_debug_string ()\n   for (size_t i = 0; i < m_len ; i++)\n     {\n       char ch = m_buffer[i];\n-      if (ch == '\\t' || ch == '\\n' || ch == '\\\\' || ch == '\"')\n-\tAPPEND('\\\\');\n-      APPEND(ch);\n+      switch (ch)\n+\t{\n+\tdefault:\n+\t  APPEND(ch);\n+\t  break;\n+\tcase '\\t':\n+\t  APPEND('\\\\');\n+\t  APPEND('t');\n+\t  break;\n+\tcase '\\n':\n+\t  APPEND('\\\\');\n+\t  APPEND('n');\n+\t  break;\n+\tcase '\\\\':\n+\tcase '\"':\n+\t  APPEND('\\\\');\n+\t  APPEND(ch);\n+\t  break;\n+\t}\n     }\n   APPEND('\"'); /* closing quote */\n #undef APPEND\n   tmp[len] = '\\0'; /* nil termintator */\n \n-  string *result = m_ctxt->new_string (tmp);\n+  string *result = m_ctxt->new_string (tmp, true);\n \n   delete[] tmp;\n   return result;"}, {"sha": "9a43a7bf33a744f53e3d2f74de6f5e81aa36b2b2", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec573408310139e1ffc42741fbe46b4f2947592/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec573408310139e1ffc42741fbe46b4f2947592/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=fec573408310139e1ffc42741fbe46b4f2947592", "patch": "@@ -74,7 +74,7 @@ class context : public log_user\n   void disassociate_from_playback ();\n \n   string *\n-  new_string (const char *text);\n+  new_string (const char *text, bool escaped = false);\n \n   location *\n   new_location (const char *filename,\n@@ -414,7 +414,7 @@ class memento\n class string : public memento\n {\n public:\n-  string (context *ctxt, const char *text);\n+  string (context *ctxt, const char *text, bool escaped);\n   ~string ();\n \n   const char *c_str () { return m_buffer; }\n@@ -431,6 +431,11 @@ class string : public memento\n private:\n   size_t m_len;\n   char *m_buffer;\n+\n+  /* Flag to track if this string is the result of string::make_debug_string,\n+     to avoid infinite recursion when logging all mementos: don't re-escape\n+     such strings.  */\n+  bool m_escaped;\n };\n \n class location : public memento"}, {"sha": "03ef3370d94c85c871e981744422c96bb008a4b4", "filename": "gcc/testsuite/jit.dg/test-debug-strings.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec573408310139e1ffc42741fbe46b4f2947592/gcc%2Ftestsuite%2Fjit.dg%2Ftest-debug-strings.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec573408310139e1ffc42741fbe46b4f2947592/gcc%2Ftestsuite%2Fjit.dg%2Ftest-debug-strings.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-debug-strings.c?ref=fec573408310139e1ffc42741fbe46b4f2947592", "patch": "@@ -178,6 +178,26 @@ create_code (gcc_jit_context *ctxt, void *user_data)\n \t\t\t       \"((struct node *)ptr->next)->next\");\n   }\n \n+  /* Check string literal escaping.  */\n+  {\n+    CHECK_RVALUE_DEBUG_STRING\n+      (gcc_jit_context_new_string_literal (ctxt, \"\"),\n+       \"\\\"\\\"\");\n+    CHECK_RVALUE_DEBUG_STRING\n+      (gcc_jit_context_new_string_literal (ctxt, \"foo\"),\n+       \"\\\"foo\\\"\");\n+    CHECK_RVALUE_DEBUG_STRING\n+      (gcc_jit_context_new_string_literal (ctxt, \"\\\"\"),\n+       \"\\\"\\\\\\\"\\\"\");\n+    CHECK_RVALUE_DEBUG_STRING\n+      (gcc_jit_context_new_string_literal (ctxt, \"line 1\\nline 2\\n\"),\n+       \"\\\"line 1\\\\nline 2\\\\n\\\"\");\n+    CHECK_RVALUE_DEBUG_STRING\n+      (gcc_jit_context_new_string_literal (ctxt, \"foo\\tbar\"),\n+       \"\\\"foo\\\\tbar\\\"\");\n+  }\n+\n+#undef CHECK_RVALUE_DEBUG_STRING\n #undef CHECK_LVALUE_DEBUG_STRING\n }\n "}]}