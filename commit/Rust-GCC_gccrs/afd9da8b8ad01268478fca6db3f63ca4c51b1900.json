{"sha": "afd9da8b8ad01268478fca6db3f63ca4c51b1900", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZkOWRhOGI4YWQwMTI2ODQ3OGZjYTZkYjNmNjNjYTRjNTFiMTkwMA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-29T11:27:22Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-03-29T17:25:27Z"}, "message": "testsuite: Move C++ tests in gdc.test into own subdirectory.\n\nTests have been moved into runnable_cxx as part of upstream dmd 3e10e2dd2.\n\nThe extra flags required for tests that mix C++ and D are now limited to\nonly a small subset of tests, rather than applied to all tests across\ngdc.dg and gdc.test.\n\nReviewed-on: https://github.com/dlang/dmd/pull/10980\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.test/runnable_cxx/runnable_cxx.exp: New file.\n\t* lib/gdc-utils.exp (gdc-do-test): Add case for runnable_cxx.\n\t* lib/gdc.exp (gdc_include_flags): Only add flags for libstdc++-v3 if\n\tGDC_INCLUDE_CXX_FLAGS is true.\n\t(gdc_link_flags): Likewise.\n\t(gdc_init): Move setting of default gdc test flags to...\n\t(gdc_target_compile): ...here.", "tree": {"sha": "1a2c7f94756de4777e54d8bff22757d9a334e66b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a2c7f94756de4777e54d8bff22757d9a334e66b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afd9da8b8ad01268478fca6db3f63ca4c51b1900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd9da8b8ad01268478fca6db3f63ca4c51b1900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd9da8b8ad01268478fca6db3f63ca4c51b1900", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd9da8b8ad01268478fca6db3f63ca4c51b1900/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f6f317ec8c02beea0a8dcb9c9274ebcffc1da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85f6f317ec8c02beea0a8dcb9c9274ebcffc1da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85f6f317ec8c02beea0a8dcb9c9274ebcffc1da7"}], "stats": {"total": 165, "additions": 122, "deletions": 43}, "files": [{"sha": "7f0140708c6efbb79fbb02200a870c12664dc7fd", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "patch": "@@ -1,4 +1,4 @@\n-d1a606599e7c2bea8fda8bf5e3ddceb486ae69ac\n+3e10e2dd29e583f1d94d84de5e4bd858e0303669\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "498c2a9e0626fb4323eb9fd08a0fda73bcc3ffa5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "patch": "@@ -1,3 +1,13 @@\n+2020-03-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.test/runnable_cxx/runnable_cxx.exp: New file.\n+\t* lib/gdc-utils.exp (gdc-do-test): Add case for runnable_cxx.\n+\t* lib/gdc.exp (gdc_include_flags): Only add flags for libstdc++-v3 if\n+\tGDC_INCLUDE_CXX_FLAGS is true.\n+\t(gdc_link_flags): Likewise.\n+\t(gdc_init): Move setting of default gdc test flags to...\n+\t(gdc_target_compile): ...here.\n+\n 2020-03-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* gdc.test/compilable/compilable.exp: New file."}, {"sha": "3a914cd0e57d05fc5eb0cfe5b1df2fe2848e16d3", "filename": "gcc/testsuite/gdc.test/runnable_cxx/cabi1.d", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcabi1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcabi1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcabi1.d?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "previous_filename": "gcc/testsuite/gdc.test/runnable/cabi1.d"}, {"sha": "83e1cff10d91cb0a369cfc6a6e4ae8a9362bfd2d", "filename": "gcc/testsuite/gdc.test/runnable_cxx/cpp_abi_tests.d", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcpp_abi_tests.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcpp_abi_tests.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcpp_abi_tests.d?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "previous_filename": "gcc/testsuite/gdc.test/runnable/cpp_abi_tests.d"}, {"sha": "b9b4832991e879008de2cec9455e87baa38c6e01", "filename": "gcc/testsuite/gdc.test/runnable_cxx/cppa.d", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcppa.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcppa.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fcppa.d?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "previous_filename": "gcc/testsuite/gdc.test/runnable/cppa.d"}, {"sha": "9099f94f2d0aaa8e8cb8b50058c7ac45971aa688", "filename": "gcc/testsuite/gdc.test/runnable_cxx/externmangle.d", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fexternmangle.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fexternmangle.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fexternmangle.d?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "previous_filename": "gcc/testsuite/gdc.test/runnable/externmangle.d"}, {"sha": "74beb2581f0210bdc306e45be6215d55885aba82", "filename": "gcc/testsuite/gdc.test/runnable_cxx/externmangle2.d", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fexternmangle2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fexternmangle2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fexternmangle2.d?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "previous_filename": "gcc/testsuite/gdc.test/runnable/externmangle2.d"}, {"sha": "31e5286cbc4bbeee95743d33f420b999be0ae4f8", "filename": "gcc/testsuite/gdc.test/runnable_cxx/extra-files/cabi2.cpp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcabi2.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcabi2.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcabi2.cpp?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "previous_filename": "gcc/testsuite/gdc.test/runnable/extra-files/cabi2.cpp"}, {"sha": "63f74a280c175c749e43c68f07a008a4d6f43479", "filename": "gcc/testsuite/gdc.test/runnable_cxx/extra-files/cpp_abi_tests.cpp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcpp_abi_tests.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcpp_abi_tests.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcpp_abi_tests.cpp?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "previous_filename": "gcc/testsuite/gdc.test/runnable/extra-files/cpp_abi_tests.cpp"}, {"sha": "587145c61c30aa9ae9c1c9f9841a2c262dc70d77", "filename": "gcc/testsuite/gdc.test/runnable_cxx/extra-files/cppb.cpp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcppb.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcppb.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcppb.cpp?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "previous_filename": "gcc/testsuite/gdc.test/runnable/extra-files/cppb.cpp"}, {"sha": "da3e8449b2efa03790663c222321b0c51408f0c6", "filename": "gcc/testsuite/gdc.test/runnable_cxx/extra-files/externmangle.cpp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fexternmangle.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fexternmangle.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fexternmangle.cpp?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "previous_filename": "gcc/testsuite/gdc.test/runnable/extra-files/externmangle.cpp"}, {"sha": "b481348976a79e832a8163ec0edf40d95ae84d6a", "filename": "gcc/testsuite/gdc.test/runnable_cxx/extra-files/externmangle2.cpp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fexternmangle2.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fexternmangle2.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fexternmangle2.cpp?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "previous_filename": "gcc/testsuite/gdc.test/runnable/extra-files/externmangle2.cpp"}, {"sha": "a37376a4dc2124f00b585cd6c16fcf6300161b25", "filename": "gcc/testsuite/gdc.test/runnable_cxx/runnable_cxx.exp", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Frunnable_cxx.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Frunnable_cxx.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Frunnable_cxx.exp?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "patch": "@@ -0,0 +1,46 @@\n+# Copyright (C) 2012-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Runnable C++ tests for the D2 testsuite.\n+\n+# Load support procs.\n+load_lib gdc-dg.exp\n+load_lib gdc-utils.exp\n+\n+# If the D runtime library is missing, bail.\n+if { ![check_effective_target_d_runtime] } {\n+    return\n+}\n+\n+# We are mixing D and C++ code, need to pull in libstdc++\n+global GDC_INCLUDE_CXX_FLAGS\n+set GDC_INCLUDE_CXX_FLAGS 1\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+if [check_no_compiler_messages extern_c++_tests assembly {\n+   // C++\n+   int main() { return 0; }\n+}] {\n+    gdc-do-test [glob -nocomplain $srcdir/$subdir/*.d]\n+}\n+\n+set GDC_INCLUDE_CXX_FLAGS 0\n+\n+# All done.\n+dg-finish"}, {"sha": "ab8b9d5f8387446511e16e57d8c3a372908952c6", "filename": "gcc/testsuite/lib/gdc-utils.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "patch": "@@ -404,6 +404,7 @@ proc gdc-do-test { testcases } {\n \tset options [gdc-permute-options [lsort -unique $PERMUTE_ARGS]]\n \n \tswitch $dir {\n+\t    runnable_cxx -\n \t    runnable {\n \t\tfor { set i 0 } { $i<[llength $options] } { incr i } {\n \t\t    set flags [lindex $options $i]"}, {"sha": "ddc6d9026a2baaae4627c0949d49732529cb5381", "filename": "gcc/testsuite/lib/gdc.exp", "status": "modified", "additions": 64, "deletions": 42, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Flib%2Fgdc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd9da8b8ad01268478fca6db3f63ca4c51b1900/gcc%2Ftestsuite%2Flib%2Fgdc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgdc.exp?ref=afd9da8b8ad01268478fca6db3f63ca4c51b1900", "patch": "@@ -69,6 +69,7 @@ proc gdc_version { } {\n \n proc gdc_include_flags { paths } {\n     global srcdir\n+    global GDC_INCLUDE_CXX_FLAGS\n     global TESTING_IN_BUILD_TREE\n \n     set flags \"\"\n@@ -77,6 +78,12 @@ proc gdc_include_flags { paths } {\n \treturn \"${flags}\"\n     }\n \n+    if [info exists GDC_INCLUDE_CXX_FLAGS] {\n+\tset include_cxx_flags $GDC_INCLUDE_CXX_FLAGS\n+    } else {\n+\tset include_cxx_flags 0\n+    }\n+\n     set gccpath ${paths}\n \n     if { $gccpath != \"\" } {\n@@ -88,11 +95,13 @@ proc gdc_include_flags { paths } {\n     append flags \"-I${srcdir}/../../libphobos/src \"\n \n     # For the tests that mix C++ and D, need to know where headers are located.\n-    set odir [lookfor_file ${gccpath} libstdc++-v3]\n-    if { ${odir} != \"\" } {\n-\tset cxxflags [exec sh ${odir}/scripts/testsuite_flags --build-includes]\n-\tset idx [lsearch $cxxflags \"-nostdinc++\"]\n-\tappend flags [lreplace $cxxflags $idx $idx]\n+    if $include_cxx_flags {\n+\tset odir [lookfor_file ${gccpath} libstdc++-v3]\n+\tif { ${odir} != \"\" && [file exists ${odir}/scripts/testsuite_flags] } {\n+\t    set cxxflags [exec sh ${odir}/scripts/testsuite_flags --build-includes]\n+\t    set idx [lsearch $cxxflags \"-nostdinc++\"]\n+\t    append flags [lreplace $cxxflags $idx $idx]\n+\t}\n     }\n \n     return \"$flags\"\n@@ -106,6 +115,7 @@ proc gdc_link_flags { paths } {\n     global srcdir\n     global ld_library_path\n     global GDC_UNDER_TEST\n+    global GDC_INCLUDE_CXX_FLAGS\n     global shlib_ext\n     global SHARED_OPTION\n \n@@ -117,6 +127,12 @@ proc gdc_link_flags { paths } {\n     set SHARED_OPTION \"\"\n     verbose \"shared lib extension: $shlib_ext\"\n \n+    if [info exists GDC_INCLUDE_CXX_FLAGS] {\n+\tset include_cxx_flags $GDC_INCLUDE_CXX_FLAGS\n+    } else {\n+\tset include_cxx_flags 0\n+    }\n+\n     if { $gccpath != \"\" } {\n \t# Path to libgphobos.spec.\n \tappend flags \"-B${gccpath}/libphobos/src \"\n@@ -148,11 +164,13 @@ proc gdc_link_flags { paths } {\n \tif [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n \t    append flags \"-L${gccpath}/libiberty \"\n \t}\n-\t# For the tests that mix C++ and D, we should try and handle this better.\n-\tif { [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.a\"] \\\n-\t     || [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.${shlib_ext}\"] } {\n-\t    append flags \"-L${gccpath}/libstdc++-v3/src/.libs \"\n-\t    append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n+\t# For the tests that mix C++ and D, need to know where library is located.\n+\tif $include_cxx_flags {\n+\t    if { [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.a\"] \\\n+\t\t || [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.${shlib_ext}\"] } {\n+\t\tappend flags \"-L${gccpath}/libstdc++-v3/src/.libs \"\n+\t\tappend ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n+\t    }\n \t}\n \tappend ld_library_path [gcc-set-multilib-library-path $GDC_UNDER_TEST]\n     } else {\n@@ -172,6 +190,13 @@ proc gdc_link_flags { paths } {\n \tif { $libiberty != \"\" } {\n \t    append flags \"-L${libiberty} \"\n \t}\n+\tif $include_cxx_flags {\n+\t    set libstdcpp [lookfor_file ${tool_root_dir} libstdc++]\n+\t    if { $libstdcpp != \"\" } {\n+\t\tappend flags \"-L${libstdcpp} \"\n+\t\tappend ld_library_path \":${libstdcpp}\"\n+\t    }\n+\t}\n     }\n \n     set_ld_library_path_env_vars\n@@ -184,18 +209,14 @@ proc gdc_link_flags { paths } {\n #\n \n proc gdc_init { args } {\n-    global subdir\n     global gdc_initialized\n     global base_dir\n     global tmpdir\n     global libdir\n     global gluefile wrap_flags\n-    global objdir srcdir\n-    global ALWAYS_DFLAGS\n-    global TOOL_EXECUTABLE TOOL_OPTIONS\n+    global TOOL_EXECUTABLE\n     global GDC_UNDER_TEST\n     global TESTING_IN_BUILD_TREE\n-    global TEST_ALWAYS_FLAGS\n     global gcc_warning_prefix\n     global gcc_error_prefix\n \n@@ -231,31 +252,6 @@ proc gdc_init { args } {\n \n     gdc_maybe_build_wrapper \"${tmpdir}/d-testglue.o\"\n \n-    set ALWAYS_DFLAGS \"\"\n-\n-    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n-    # compilation.  They are passed first to allow individual\n-    # tests to override them.\n-    if [info exists TEST_ALWAYS_FLAGS] {\n-\tlappend ALWAYS_DFLAGS \"additional_flags=$TEST_ALWAYS_FLAGS\"\n-    }\n-\n-    if ![is_remote host] {\n-\tif [info exists TOOL_OPTIONS] {\n-\t    lappend ALWAYS_DFLAGS \"additional_flags=[gdc_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n-\t    lappend ALWAYS_DFLAGS \"ldflags=[gdc_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n-\t} else {\n-\t    lappend ALWAYS_DFLAGS \"additional_flags=[gdc_include_flags [get_multilibs] ]\"\n-\t    lappend ALWAYS_DFLAGS \"ldflags=[gdc_link_flags [get_multilibs] ]\"\n-\t}\n-    }\n-\n-    if [info exists TOOL_OPTIONS] {\n-\tlappend ALWAYS_DFLAGS \"additional_flags=$TOOL_OPTIONS\"\n-    }\n-\n-    verbose -log \"ALWAYS_DFLAGS set to $ALWAYS_DFLAGS\"\n-\n     set gcc_warning_prefix \"warning:\"\n     set gcc_error_prefix \"(fatal )?error:\"\n \n@@ -269,18 +265,44 @@ proc gdc_init { args } {\n proc gdc_target_compile { source dest type options } {\n     global tmpdir\n     global gluefile wrap_flags\n-    global ALWAYS_DFLAGS\n     global GDC_UNDER_TEST\n+    global TOOL_OPTIONS\n+    global TEST_ALWAYS_FLAGS\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n \tlappend options \"libs=${gluefile}\"\n \tlappend options \"ldflags=${wrap_flags}\"\n     }\n \n+    set always_dflags \"\"\n+\n+    # TEST_ALWAYS_FLAGS are flags that should be passed to every\n+    # compilation.  They are passed first to allow individual\n+    # tests to override them.\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tlappend always_dflags \"additional_flags=$TEST_ALWAYS_FLAGS\"\n+    }\n+\n+    if ![is_remote host] {\n+\tif [info exists TOOL_OPTIONS] {\n+\t    lappend always_dflags \"additional_flags=[gdc_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n+\t    lappend always_dflags \"ldflags=[gdc_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n+\t} else {\n+\t    lappend always_dflags \"additional_flags=[gdc_include_flags [get_multilibs] ]\"\n+\t    lappend always_dflags \"ldflags=[gdc_link_flags [get_multilibs] ]\"\n+\t}\n+    }\n+\n+    if [info exists TOOL_OPTIONS] {\n+\tlappend always_dflags \"additional_flags=$TOOL_OPTIONS\"\n+    }\n+\n+    verbose \"always_dflags set to: $always_dflags\"\n+\n     lappend options \"timeout=[timeout_value]\"\n     lappend options \"compiler=$GDC_UNDER_TEST\"\n \n-    set options [concat \"$ALWAYS_DFLAGS\" $options]\n+    set options [concat \"$always_dflags\" $options]\n     set options [dg-additional-files-options $options $source]\n     return [target_compile $source $dest $type $options]\n }"}]}