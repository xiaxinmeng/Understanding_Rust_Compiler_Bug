{"sha": "f45c9d956fb0a137a3ec8e48e38a617b0119db53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ1YzlkOTU2ZmIwYTEzN2EzZWM4ZTQ4ZTM4YTYxN2IwMTE5ZGI1Mw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-27T22:34:05Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-27T22:34:05Z"}, "message": "configure.in (stage1_warn_cflags): Add -Wstrict-prototypes -Wmissing-prototypes.\n\n\t* configure.in (stage1_warn_cflags): Add -Wstrict-prototypes\n\t-Wmissing-prototypes.\n\t* configure: Regenerate.\n\t* gcc.texi: Remove explanation of MD_CALL_PROTOTYPES.\n\n\t* builtins.c, calls.c: Change all instances of gen_call_* or\n\tgen_sibcall_* to GEN_CALL_* and GEN_SIBCALL_*.\n\t* calls.c (struct_value_size_rtx): Separate definition from\n\tinitialization to avoid unused variable warning.\n\n\t* genflags.c (gen_macro): New function.\n\t(gen_proto): Call it for gen_call_* and gen_sibcall_*.\n\t(gen_nonproto): Delete.\n\t(gen_insn): Put all insns on the same obstack.\n\t(main): Generate prototypes for everything unconditionally.\n\nFrom-SVN: r34213", "tree": {"sha": "035aabe4512417329e926b4fba53a53dc50da4a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/035aabe4512417329e926b4fba53a53dc50da4a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f45c9d956fb0a137a3ec8e48e38a617b0119db53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45c9d956fb0a137a3ec8e48e38a617b0119db53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45c9d956fb0a137a3ec8e48e38a617b0119db53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45c9d956fb0a137a3ec8e48e38a617b0119db53/comments", "author": null, "committer": null, "parents": [{"sha": "f12bc141e11b308701fe665cd3d9735c30366672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12bc141e11b308701fe665cd3d9735c30366672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f12bc141e11b308701fe665cd3d9735c30366672"}], "stats": {"total": 166, "additions": 92, "deletions": 74}, "files": [{"sha": "59e0b1ece54add01f6ee5ad9c5946a48ea2e648f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f45c9d956fb0a137a3ec8e48e38a617b0119db53", "patch": "@@ -1,5 +1,21 @@\n 2000-05-27  Zack Weinberg  <zack@wolery.cumb.org>\n \n+\t* configure.in (stage1_warn_cflags): Add -Wstrict-prototypes\n+\t-Wmissing-prototypes.\n+\t* configure: Regenerate.\n+\t* gcc.texi: Remove explanation of MD_CALL_PROTOTYPES.\n+\n+\t* builtins.c, calls.c: Change all instances of gen_call_* or\n+\tgen_sibcall_* to GEN_CALL_* and GEN_SIBCALL_*.\n+\t* calls.c (struct_value_size_rtx): Separate definition from\n+\tinitialization to avoid unused variable warning.\n+\n+\t* genflags.c (gen_macro): New function.\n+\t(gen_proto): Call it for gen_call_* and gen_sibcall_*.\n+\t(gen_nonproto): Delete.\n+\t(gen_insn): Put all insns on the same obstack.\n+\t(main): Generate prototypes for everything unconditionally.\n+\n \t* configure.in: Add AC_CHECK_TYPE(ssize_t).  Remove commented \n \tout check for wchar_t.\n \t* acconfig.h: Add template for ssize_t.  Remove @TOP@."}, {"sha": "1094e3018b6d1cda1b5ff449ed9b079d54381599", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f45c9d956fb0a137a3ec8e48e38a617b0119db53", "patch": "@@ -981,7 +981,7 @@ expand_builtin_apply (function, arguments, argsize)\n \t    valreg = gen_rtx_REG (mode, regno);\n \t  }\n \n-      emit_call_insn (gen_call_value (valreg,\n+      emit_call_insn (GEN_CALL_VALUE (valreg,\n \t\t\t\t      gen_rtx_MEM (FUNCTION_MODE, function),\n \t\t\t\t      const0_rtx, NULL_RTX, const0_rtx));\n "}, {"sha": "bf33ebdd8b5838d913aa718686ee738ce660e42a", "filename": "gcc/calls.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=f45c9d956fb0a137a3ec8e48e38a617b0119db53", "patch": "@@ -435,12 +435,13 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n      int ecf_flags;\n {\n   rtx rounded_stack_size_rtx = GEN_INT (rounded_stack_size);\n-#if defined (HAVE_call) && defined (HAVE_call_value)\n-  rtx struct_value_size_rtx = GEN_INT (struct_value_size);\n-#endif\n   rtx call_insn;\n   int already_popped = 0;\n   HOST_WIDE_INT n_popped = RETURN_POPS_ARGS (fndecl, funtype, stack_size);\n+#if defined (HAVE_call) && defined (HAVE_call_value)\n+  rtx struct_value_size_rtx;\n+  struct_value_size_rtx = GEN_INT (struct_value_size);\n+#endif\n \n   /* Ensure address is valid.  SYMBOL_REF is already valid, so no need,\n      and we don't want to load it into a register as an optimization,\n@@ -461,12 +462,12 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n \t if possible, for the sake of frame pointer elimination.  */\n \n       if (valreg)\n-\tpat = gen_sibcall_value_pop (valreg,\n+\tpat = GEN_SIBCALL_VALUE_POP (valreg,\n \t\t\t\t     gen_rtx_MEM (FUNCTION_MODE, funexp),\n \t\t\t\t     rounded_stack_size_rtx, next_arg_reg,\n \t\t\t\t     n_pop);\n       else\n-\tpat = gen_sibcall_pop (gen_rtx_MEM (FUNCTION_MODE, funexp),\n+\tpat = GEN_SIBCALL_POP (gen_rtx_MEM (FUNCTION_MODE, funexp),\n \t\t\t       rounded_stack_size_rtx, next_arg_reg, n_pop);\n \n       emit_call_insn (pat);\n@@ -494,11 +495,11 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n \t if possible, for the sake of frame pointer elimination.  */\n \n       if (valreg)\n-\tpat = gen_call_value_pop (valreg,\n+\tpat = GEN_CALL_VALUE_POP (valreg,\n \t\t\t\t  gen_rtx_MEM (FUNCTION_MODE, funexp),\n \t\t\t\t  rounded_stack_size_rtx, next_arg_reg, n_pop);\n       else\n-\tpat = gen_call_pop (gen_rtx_MEM (FUNCTION_MODE, funexp),\n+\tpat = GEN_CALL_POP (gen_rtx_MEM (FUNCTION_MODE, funexp),\n \t\t\t    rounded_stack_size_rtx, next_arg_reg, n_pop);\n \n       emit_call_insn (pat);\n@@ -512,12 +513,12 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n       && HAVE_sibcall && HAVE_sibcall_value)\n     {\n       if (valreg)\n-\temit_call_insn (gen_sibcall_value (valreg,\n+\temit_call_insn (GEN_SIBCALL_VALUE (valreg,\n \t\t\t\t\t   gen_rtx_MEM (FUNCTION_MODE, funexp),\n \t\t\t\t\t   rounded_stack_size_rtx,\n \t\t\t\t\t   next_arg_reg, NULL_RTX));\n       else\n-\temit_call_insn (gen_sibcall (gen_rtx_MEM (FUNCTION_MODE, funexp),\n+\temit_call_insn (GEN_SIBCALL (gen_rtx_MEM (FUNCTION_MODE, funexp),\n \t\t\t\t     rounded_stack_size_rtx, next_arg_reg,\n \t\t\t\t     struct_value_size_rtx));\n     }\n@@ -528,12 +529,12 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, rounded_stack_size,\n   if (HAVE_call && HAVE_call_value)\n     {\n       if (valreg)\n-\temit_call_insn (gen_call_value (valreg,\n+\temit_call_insn (GEN_CALL_VALUE (valreg,\n \t\t\t\t\tgen_rtx_MEM (FUNCTION_MODE, funexp),\n \t\t\t\t\trounded_stack_size_rtx, next_arg_reg,\n \t\t\t\t\tNULL_RTX));\n       else\n-\temit_call_insn (gen_call (gen_rtx_MEM (FUNCTION_MODE, funexp),\n+\temit_call_insn (GEN_CALL (gen_rtx_MEM (FUNCTION_MODE, funexp),\n \t\t\t\t  rounded_stack_size_rtx, next_arg_reg,\n \t\t\t\t  struct_value_size_rtx));\n     }"}, {"sha": "ffeed3a15dd2c9e15ab7bf74a119c8f4f8cda5b6", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f45c9d956fb0a137a3ec8e48e38a617b0119db53", "patch": "@@ -1362,7 +1362,7 @@ echo \"$ac_t\"$ac_cv_prog_cc_no_long_long 1>&6\n # If the native compiler is GCC, we can enable warnings even in stage1.  \n # That's useful for people building cross-compilers, or just running a\n # quick `make'.\n-stage1_warn_cflags=\" -W -Wall -Wtraditional -Wwrite-strings\"\n+stage1_warn_cflags=\" -W -Wall -Wtraditional -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes\"\n stage2_warn_cflags=\"$stage1_warn_cflags -pedantic -Wno-long-long\"\n if test \"x$GCC\" = \"xyes\"; then \n   if test $ac_cv_prog_cc_no_long_long = yes; then"}, {"sha": "f9393b9d17cbd585aca41f09df555168d382839d", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=f45c9d956fb0a137a3ec8e48e38a617b0119db53", "patch": "@@ -342,7 +342,7 @@ echo \"$ac_t\"$ac_cv_prog_cc_no_long_long 1>&6\n # If the native compiler is GCC, we can enable warnings even in stage1.  \n # That's useful for people building cross-compilers, or just running a\n # quick `make'.\n-stage1_warn_cflags=\" -W -Wall -Wtraditional -Wwrite-strings\"\n+stage1_warn_cflags=\" -W -Wall -Wtraditional -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes\"\n stage2_warn_cflags=\"$stage1_warn_cflags -pedantic -Wno-long-long\"\n if test \"x$GCC\" = \"xyes\"; then \n   if test $ac_cv_prog_cc_no_long_long = yes; then"}, {"sha": "9e43852911b4ba0f104d68950c5270f6bfa71f2a", "filename": "gcc/gcc.texi", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=f45c9d956fb0a137a3ec8e48e38a617b0119db53", "patch": "@@ -3911,15 +3911,6 @@ GCC.  If @samp{USE_PROTOTYPES} is not defined, it will be\n determined automatically whether your compiler supports\n prototypes by checking if @samp{__STDC__} is defined.\n \n-@findex MD_CALL_PROTOTYPES\n-@item MD_CALL_PROTOTYPES\n-Define this if you wish to generate prototypes for the @code{gen_call}\n-or @code{gen_call_value} functions generated from the machine\n-description file.  If @samp{USE_PROTOTYPES} is defined to be 0, or the\n-host compiler does not support prototypes, this macro has no effect.  As\n-soon as all of the machine descriptions are modified to have the\n-appropriate number of arguments, this macro will be removed.\n-\n @findex PATH_SEPARATOR\n @item PATH_SEPARATOR\n Define this macro to be a C character constant representing the"}, {"sha": "2e18585edbb81a0921a74d558d55761ba9efe3c8", "filename": "gcc/genflags.c", "status": "modified", "additions": 61, "deletions": 51, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45c9d956fb0a137a3ec8e48e38a617b0119db53/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=f45c9d956fb0a137a3ec8e48e38a617b0119db53", "patch": "@@ -33,8 +33,8 @@ Boston, MA 02111-1307, USA.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-/* Obstacks to remember normal, and call insns.  */\n-static struct obstack call_obstack, normal_obstack;\n+/* Obstack to remember insns with.  */\n+static struct obstack obstack;\n \n /* Max size of names encountered.  */\n static int max_id_len;\n@@ -45,7 +45,7 @@ static int max_opno;\n static void max_operand_1\tPARAMS ((rtx));\n static int num_operands\t\tPARAMS ((rtx));\n static void gen_proto\t\tPARAMS ((rtx));\n-static void gen_nonproto\tPARAMS ((rtx));\n+static void gen_macro\t\tPARAMS ((const char *, int, int));\n static void gen_insn\t\tPARAMS ((rtx));\n \n /* Count the number of match_operand's found.  */\n@@ -98,14 +98,65 @@ num_operands (insn)\n   return max_opno + 1;\n }\n \n+/* Print out a wrapper macro for a function which corrects the number\n+   of arguments it takes.  Any missing arguments are assumed to be at\n+   the end.  */\n+static void\n+gen_macro (name, real, expect)\n+     const char *name;\n+     int real, expect;\n+{\n+  int i;\n+\n+  if (real > expect)\n+    abort ();\n+  if (real == 0)\n+    abort ();\n+\n+  /* #define GEN_CALL(A, B, C, D) gen_call((A), (B)) */\n+  fputs (\"#define GEN_\", stdout);\n+  for (i = 0; name[i]; i++)\n+    putchar (TOUPPER (name[i]));\n+\n+  putchar('(');\n+  for (i = 0; i < expect - 1; i++)\n+    printf (\"%c, \", i + 'A');\n+  printf (\"%c) gen_%s (\", i + 'A', name);\n+\n+  for (i = 0; i < real - 1; i++)\n+    printf (\"(%c), \", i + 'A');\n+  printf (\"(%c))\\n\", i + 'A');\n+}\n+\n /* Print out prototype information for a function.  */\n \n static void\n gen_proto (insn)\n      rtx insn;\n {\n   int num = num_operands (insn);\n-  printf (\"extern rtx gen_%-*s PARAMS ((\", max_id_len, XSTR (insn, 0));\n+  const char *name = XSTR (insn, 0);\n+\n+  /* Many md files don't refer to the last two operands passed to the\n+     call patterns.  This means their generator functions will be two\n+     arguments too short.  Instead of changing every md file to touch\n+     those operands, we wrap the prototypes in macros that take the\n+     correct number of arguments.  */\n+  if (name[0] == 'c' || name[0] == 's')\n+    {\n+      if (!strcmp (name, \"call\")\n+\t  || !strcmp (name, \"call_pop\")\n+\t  || !strcmp (name, \"sibcall\")\n+\t  || !strcmp (name, \"sibcall_pop\"))\n+\tgen_macro (name, num, 4);\n+      else if (!strcmp (name, \"call_value\")\n+\t       || !strcmp (name, \"call_value_pop\")\n+\t       || !strcmp (name, \"sibcall_value\")\n+\t       || !strcmp (name, \"sibcall_value_pop\"))\n+\tgen_macro (name, num, 5);\n+    }\n+\n+  printf (\"extern rtx gen_%-*s PARAMS ((\", max_id_len, name);\n \n   if (num == 0)\n     printf (\"void\");\n@@ -118,15 +169,7 @@ gen_proto (insn)\n     }\n \n   printf (\"));\\n\");\n-}\n \n-/* Print out a function declaration without a prototype.  */\n-\n-static void\n-gen_nonproto (insn)\n-     rtx insn;\n-{\n-  printf (\"extern rtx gen_%s ();\\n\", XSTR (insn, 0));\n }\n \n static void\n@@ -135,7 +178,6 @@ gen_insn (insn)\n {\n   const char *name = XSTR (insn, 0);\n   const char *p;\n-  struct obstack *obstack_ptr;\n   int len;\n \n   /* Don't mention instructions whose names are the null string\n@@ -167,24 +209,7 @@ gen_insn (insn)\n       printf (\")\\n\");\n     }\n \n-  /* Save the current insn, so that we can later put out appropriate\n-     prototypes.  At present, most md files have the wrong number of\n-     arguments for the call insns (call, call_value, call_pop,\n-     call_value_pop) ignoring the extra arguments that are passed for\n-     some machines, so by default, turn off the prototype.  */\n-\n-  obstack_ptr = ((name[0] == 'c' || name[0] == 's')\n-\t\t && (!strcmp (name, \"call\")\n-\t\t     || !strcmp (name, \"call_value\")\n-\t\t     || !strcmp (name, \"call_pop\")\n-\t\t     || !strcmp (name, \"call_value_pop\")\n-\t\t     || !strcmp (name, \"sibcall\")\n-\t\t     || !strcmp (name, \"sibcall_value\")\n-\t\t     || !strcmp (name, \"sibcall_pop\")\n-\t\t     || !strcmp (name, \"sibcall_value_pop\")))\n-    ? &call_obstack : &normal_obstack;\n-\n-  obstack_grow (obstack_ptr, &insn, sizeof (rtx));\n+  obstack_grow (&obstack, &insn, sizeof (rtx));\n }\n \n extern int main PARAMS ((int, char **));\n@@ -196,13 +221,11 @@ main (argc, argv)\n {\n   rtx desc;\n   rtx dummy;\n-  rtx *call_insns;\n-  rtx *normal_insns;\n+  rtx *insns;\n   rtx *insn_ptr;\n \n   progname = \"genflags\";\n-  obstack_init (&call_obstack);\n-  obstack_init (&normal_obstack);\n+  obstack_init (&obstack);\n \n   if (argc <= 1)\n     fatal (\"No input file name.\");\n@@ -228,25 +251,12 @@ from the machine description file `md'.  */\\n\\n\");\n \n   /* Print out the prototypes now.  */\n   dummy = (rtx) 0;\n-  obstack_grow (&call_obstack, &dummy, sizeof (rtx));\n-  call_insns = (rtx *) obstack_finish (&call_obstack);\n-\n-  obstack_grow (&normal_obstack, &dummy, sizeof (rtx));\n-  normal_insns = (rtx *) obstack_finish (&normal_obstack);\n+  obstack_grow (&obstack, &dummy, sizeof (rtx));\n+  insns = (rtx *) obstack_finish (&obstack);\n \n-  for (insn_ptr = normal_insns; *insn_ptr; insn_ptr++)\n+  for (insn_ptr = insns; *insn_ptr; insn_ptr++)\n     gen_proto (*insn_ptr);\n \n-  printf (\"\\n#ifdef MD_CALL_PROTOTYPES\\n\");\n-  for (insn_ptr = call_insns; *insn_ptr; insn_ptr++)\n-    gen_proto (*insn_ptr);\n-\n-  printf (\"\\n#else /* !MD_CALL_PROTOTYPES */\\n\");\n-  for (insn_ptr = call_insns; *insn_ptr; insn_ptr++)\n-    gen_nonproto (*insn_ptr);\n-\n-  printf (\"#endif /* !MD_CALL_PROTOTYPES */\\n\");\n-\n   fflush (stdout);\n   return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);\n }"}]}