{"sha": "7981384fa76b1cb5033cc21e591f8dc2e952ca0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4MTM4NGZhNzZiMWNiNTAzM2NjMjFlNTkxZjhkYzJlOTUyY2EwZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-15T22:41:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-15T22:41:33Z"}, "message": "(ASM_SPEC): New macro.\n\n(TRAMPOLINE_{TEMPLATE,SIZE}, INITIALIZE_TRAMPOLINE): Make major\nchanges to fix numerous bugs.\n\nFrom-SVN: r2874", "tree": {"sha": "b7001a51e790d63293980135ce948592b1823429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7001a51e790d63293980135ce948592b1823429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7981384fa76b1cb5033cc21e591f8dc2e952ca0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7981384fa76b1cb5033cc21e591f8dc2e952ca0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7981384fa76b1cb5033cc21e591f8dc2e952ca0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7981384fa76b1cb5033cc21e591f8dc2e952ca0f/comments", "author": null, "committer": null, "parents": [{"sha": "9353d0a3fbf53e59b789af80b9567f9cd02b91fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9353d0a3fbf53e59b789af80b9567f9cd02b91fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9353d0a3fbf53e59b789af80b9567f9cd02b91fc"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "8d4eae29db34b22f31a520f0eeffb82c1a7f20ae", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7981384fa76b1cb5033cc21e591f8dc2e952ca0f/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7981384fa76b1cb5033cc21e591f8dc2e952ca0f/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=7981384fa76b1cb5033cc21e591f8dc2e952ca0f", "patch": "@@ -41,6 +41,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define SIGNED_CHAR_SPEC \"%{funsigned-char:-D__CHAR_UNSIGNED__}\"\n \n+/* No point in running CPP on our assembler output.  */\n+#define ASM_SPEC \"-nocpp\"\n+\n /* Right now Alpha OSF/1 doesn't seem to have debugging or profiled \n    libraries.  */\n \n@@ -808,52 +811,81 @@ extern char *alpha_function_name;\n    of a trampoline, leaving space for the variable parts.\n \n    The trampoline should set the static chain pointer to value placed\n-   into the trampoline and should branch to the specified routine.  We\n-   use $28 (at) as a temporary.  Note that $27 has been set to the\n-   address of the trampoline, so we can use it for addressability\n-   of the two data items.  Trampolines are always aligned to\n-   FUNCTION_BOUNDARY, which is 64 bits.  */\n+   into the trampoline and should branch to the specified routine.  \n+   Note that $27 has been set to the address of the trampoline, so we can\n+   use it for addressability of the two data items.  Trampolines are always\n+   aligned to FUNCTION_BOUNDARY, which is 64 bits.  */\n \n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\\\n {\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tbis $27,$27,$28\\n\");\t\\\n+  fprintf (FILE, \"\\tldq $1,24($27)\\n\");\t\t\\\n   fprintf (FILE, \"\\tldq $27,16($27)\\n\");\t\\\n-  fprintf (FILE, \"\\tldq $1,20($28)\\n\");\t\t\\\n-  fprintf (FILE, \"\\tjmp $31,0($27),0\\n\");\t\\\n+  fprintf (FILE, \"\\tjmp $31,($27),0\\n\");\t\\\n+  fprintf (FILE, \"\\tnop\\n\");\t\t\t\\\n   fprintf (FILE, \"\\t.quad 0,0\\n\");\t\t\\\n }\n \n /* Length in units of the trampoline for entering a nested function.  */\n \n-#define TRAMPOLINE_SIZE    24\n+#define TRAMPOLINE_SIZE    32\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  We assume\n    here that a function will be called many more times than its address\n    is taken (e.g., it might be passed to qsort), so we take the trouble \n-   to initialize the \"hint\" field in the JMP insn.  */\n+   to initialize the \"hint\" field in the JMP insn.  Note that the hint\n+   field is PC (new) + 4 * bits 13:0.  */\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   rtx _temp, _temp1, _addr;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   _addr = memory_address (Pmode, plus_constant ((TRAMP), 16));\t\t\\\n   emit_move_insn (gen_rtx (MEM, Pmode, _addr), (FNADDR));\t\t\\\n-  _addr = memory_address (Pmode, plus_constant ((TRAMP), 20));\t\t\\\n+  _addr = memory_address (Pmode, plus_constant ((TRAMP), 24));\t\t\\\n   emit_move_insn (gen_rtx (MEM, Pmode, _addr), (CXT));\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  _temp = expand_shift (RSHIFT_EXPR, Pmode, (FNADDR),\t\t\t\\\n+  _temp = force_operand (plus_constant ((TRAMP), 12), NULL_RTX);\t\\\n+  _temp = expand_binop (DImode, sub_optab, (FNADDR), _temp, _temp, 1,\t\\\n+\t\t\tOPTAB_WIDEN);\t\t\t\t\t\\\n+  _temp = expand_shift (RSHIFT_EXPR, Pmode, _temp,\t\t\t\\\n \t\t\tbuild_int_2 (2, 0), NULL_RTX, 1);\t\t\\\n-  _temp = expand_and (_temp, GEN_INT (0x1fff), 0); \t\t\t\\\n+  _temp = expand_and (gen_lowpart (SImode, _temp),\t\t\t\\\n+\t\t      GEN_INT (0x3fff), 0); \t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  _addr = memory_address (SImode, plus_constant ((TRAMP), 12));\t\t\\\n+  _addr = memory_address (SImode, plus_constant ((TRAMP), 8));\t\t\\\n   _temp1 = force_reg (SImode, gen_rtx (MEM, SImode, _addr));\t\t\\\n-  _temp1 = expand_and (_temp, GEN_INT (0xfffe000), NULL_RTX);\t\t\\\n+  _temp1 = expand_and (_temp1, GEN_INT (0xffffc000), NULL_RTX);\t\t\\\n   _temp1 = expand_binop (SImode, ior_optab, _temp1, _temp, _temp1, 1,\t\\\n \t\t\t OPTAB_WIDEN);\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   emit_move_insn (gen_rtx (MEM, SImode, _addr), _temp1);\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  emit_library_call (gen_rtx (SYMBOL_REF, Pmode,\t\t\t\\\n+\t\t\t      \"__enable_execute_stack\"),\t\t\\\n+\t\t     0, VOIDmode, 1,_addr, Pmode);\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  emit_insn (gen_rtx (UNSPEC_VOLATILE, VOIDmode,\t\t\t\\\n+\t\t      gen_rtvec (1, const0_rtx), 0));\t\t\t\\\n+}\n+\n+/* Attempt to turn on access permissions for the stack.  */\n+\n+#define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+__enable_execute_stack (addr)\t\t\t\t\t\t\\\n+     void *addr;\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  long size = getpagesize ();\t\t\t\t\t\t\\\n+  long mask = ~(size-1);\t\t\t\t\t\t\\\n+  char *page = (char *) (((long) addr) & mask);\t\t\t\t\\\n+  char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */\t\t\t\t\\\n+  if (mprotect (page, end - page, 7) < 0)\t\t\t\t\\\n+    perror (\"mprotect of trampoline code\");\t\t\t\t\\\n }\n \f\n /* Addressing modes, and classification of registers for them.  */"}]}