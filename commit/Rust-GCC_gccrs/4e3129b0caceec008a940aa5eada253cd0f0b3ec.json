{"sha": "4e3129b0caceec008a940aa5eada253cd0f0b3ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUzMTI5YjBjYWNlZWMwMDhhOTQwYWE1ZWFkYTI1M2NkMGYwYjNlYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2021-08-05T08:21:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2021-08-05T08:24:50Z"}, "message": "Fix oversight in handling of reverse SSO in SRA pass\n\nThe scalar storage order does not apply to pointer and vector components.\n\ngcc/\n\tPR tree-optimization/101626\n\t* tree-sra.c (propagate_subaccesses_from_rhs): Do not set the\n\treverse scalar storage order on a pointer or vector component.\n\ngcc/testsuite/\n\t* gcc.dg/sso-15.c: New test.", "tree": {"sha": "e69ff830c7b9b55901777ecd49a1dd3bab7c9021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e69ff830c7b9b55901777ecd49a1dd3bab7c9021"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e3129b0caceec008a940aa5eada253cd0f0b3ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3129b0caceec008a940aa5eada253cd0f0b3ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e3129b0caceec008a940aa5eada253cd0f0b3ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3129b0caceec008a940aa5eada253cd0f0b3ec/comments", "author": null, "committer": null, "parents": [{"sha": "ac8a2fbedf59eecda6d1c049952e10946ffc4a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8a2fbedf59eecda6d1c049952e10946ffc4a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8a2fbedf59eecda6d1c049952e10946ffc4a61"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "d8a711d65767f60ca3d7a1725457edc8ece51afb", "filename": "gcc/testsuite/gcc.dg/sso-15.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3129b0caceec008a940aa5eada253cd0f0b3ec/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3129b0caceec008a940aa5eada253cd0f0b3ec/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsso-15.c?ref=4e3129b0caceec008a940aa5eada253cd0f0b3ec", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+#define REV_ENDIANNESS __attribute__((scalar_storage_order(\"big-endian\")))\n+#else\n+#define REV_ENDIANNESS __attribute__((scalar_storage_order(\"little-endian\")))\n+#endif\n+\n+struct X { int *p; } REV_ENDIANNESS;\n+\n+struct X x;\n+\n+struct X __attribute__((noinline)) foo (int *p)\n+{\n+  struct X x;\n+  x.p = p;\n+  return x;\n+}\n+\n+void __attribute((noinline)) bar (void)\n+{\n+  *x.p = 1;\n+}\n+\n+extern void abort (void);\n+\n+int main (void)\n+{\n+  int i = 0;\n+  x = foo(&i);\n+  bar();\n+  if (i != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "3a9e14f50a08b6a36465dab604e5598ae5657065", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e3129b0caceec008a940aa5eada253cd0f0b3ec/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e3129b0caceec008a940aa5eada253cd0f0b3ec/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=4e3129b0caceec008a940aa5eada253cd0f0b3ec", "patch": "@@ -2790,7 +2790,10 @@ propagate_subaccesses_from_rhs (struct access *lacc, struct access *racc)\n \t{\n \t  /* We are about to change the access type from aggregate to scalar,\n \t     so we need to put the reverse flag onto the access, if any.  */\n-\t  const bool reverse = TYPE_REVERSE_STORAGE_ORDER (lacc->type);\n+\t  const bool reverse\n+\t    = TYPE_REVERSE_STORAGE_ORDER (lacc->type)\n+\t      && !POINTER_TYPE_P (racc->type)\n+\t      && !VECTOR_TYPE_P (racc->type);\n \t  tree t = lacc->base;\n \n \t  lacc->type = racc->type;"}]}