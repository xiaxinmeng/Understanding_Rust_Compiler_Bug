{"sha": "c0ace69ec677d1f85f6a433c8fae2d4df6f75714", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBhY2U2OWVjNjc3ZDFmODVmNmE0MzNjOGZhZTJkNGRmNmY3NTcxNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-18T19:57:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-18T19:57:25Z"}, "message": "PR libstdc++/87642 handle multibyte thousands separators from libc\n\nIf a locale's THOUSANDS_SEP or MON_THOUSANDS_SEP string is not a\nsingle character we either need to narrow it to a single char or\nignore it (and therefore disable digit grouping for that facet).\n\n\tPR libstdc++/87642\n\t* config/locale/gnu/monetary_members.cc\n\t(moneypunct<char, true>::_M_initialize_moneypunct): Use\n\t__narrow_multibyte_chars to convert multibyte thousands separators\n\tto a single char.\n\t* config/locale/gnu/numeric_members.cc\n\t(numpunct<char>::_M_initialize_numpunct): Likewise.\n\t(__narrow_multibyte_chars): New function.\n\nFrom-SVN: r265286", "tree": {"sha": "0a7d0563651b52790d3f60374000b3fd66907694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a7d0563651b52790d3f60374000b3fd66907694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0ace69ec677d1f85f6a433c8fae2d4df6f75714", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ace69ec677d1f85f6a433c8fae2d4df6f75714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ace69ec677d1f85f6a433c8fae2d4df6f75714", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ace69ec677d1f85f6a433c8fae2d4df6f75714/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ce849a483cacda23eb12989a1fb3d8a0e5b634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8ce849a483cacda23eb12989a1fb3d8a0e5b634"}], "stats": {"total": 80, "additions": 76, "deletions": 4}, "files": [{"sha": "b26e1fcfd299e5195ae729abeddd9c5e9eb26afb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ace69ec677d1f85f6a433c8fae2d4df6f75714/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ace69ec677d1f85f6a433c8fae2d4df6f75714/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c0ace69ec677d1f85f6a433c8fae2d4df6f75714", "patch": "@@ -1,5 +1,14 @@\n 2018-10-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/87642\n+\t* config/locale/gnu/monetary_members.cc\n+\t(moneypunct<char, true>::_M_initialize_moneypunct): Use\n+\t__narrow_multibyte_chars to convert multibyte thousands separators\n+\tto a single char.\n+\t* config/locale/gnu/numeric_members.cc\n+\t(numpunct<char>::_M_initialize_numpunct): Likewise.\n+\t(__narrow_multibyte_chars): New function.\n+\n \tPR libstdc++/87641\n \t* include/bits/valarray_array.h (__valarray_sum): Use first element\n \tto initialize accumulator instead of value-initializing it."}, {"sha": "212c68dd5018c1b6cc10de3ee5d78a38efb45c07", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ace69ec677d1f85f6a433c8fae2d4df6f75714/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ace69ec677d1f85f6a433c8fae2d4df6f75714/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=c0ace69ec677d1f85f6a433c8fae2d4df6f75714", "patch": "@@ -207,6 +207,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n #endif\n \n+  extern char __narrow_multibyte_chars(const char* s, __locale_t cloc);\n+\n   template<>\n     void\n     moneypunct<char, true>::_M_initialize_moneypunct(__c_locale __cloc,\n@@ -241,8 +243,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  // Named locale.\n \t  _M_data->_M_decimal_point = *(__nl_langinfo_l(__MON_DECIMAL_POINT,\n \t\t\t\t\t\t\t__cloc));\n-\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP,\n-\t\t\t\t\t\t\t__cloc));\n+\t  const char* thousands_sep = __nl_langinfo_l(__MON_THOUSANDS_SEP,\n+\t\t\t\t\t\t      __cloc);\n+\t  if (thousands_sep[0] != '\\0' && thousands_sep[1] != '\\0')\n+\t    _M_data->_M_thousands_sep = __narrow_multibyte_chars(thousands_sep,\n+\t\t\t\t\t\t\t\t __cloc);\n+\t  else\n+\t    _M_data->_M_thousands_sep = *thousands_sep;\n \n \t  // Check for NULL, which implies no fractional digits.\n \t  if (_M_data->_M_decimal_point == '\\0')"}, {"sha": "faa35777cf3319ba2756ff2ad2c325c7e6956e9d", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ace69ec677d1f85f6a433c8fae2d4df6f75714/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ace69ec677d1f85f6a433c8fae2d4df6f75714/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=c0ace69ec677d1f85f6a433c8fae2d4df6f75714", "patch": "@@ -30,11 +30,62 @@\n \n #include <locale>\n #include <bits/c++locale_internal.h>\n+#include <iconv.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  extern char __narrow_multibyte_chars(const char* s, __locale_t cloc);\n+\n+// This file might be compiled twice, but we only want to define this once.\n+#if ! _GLIBCXX_USE_CXX11_ABI\n+  char\n+  __narrow_multibyte_chars(const char* s, __locale_t cloc)\n+  {\n+    const char* codeset = __nl_langinfo_l(CODESET, cloc);\n+    if (!strcmp(codeset, \"UTF-8\"))\n+      {\n+\t// optimize for some known cases\n+\tif (!strcmp(s, \"\\u202F\")) // NARROW NO-BREAK SPACE\n+\t  return ' ';\n+\tif (!strcmp(s, \"\\u2019\")) // RIGHT SINGLE QUOTATION MARK\n+\t  return '\\'';\n+\tif (!strcmp(s, \"\\u066C\")) // ARABIC THOUSANDS SEPARATOR\n+\t  return '\\'';\n+      }\n+\n+    iconv_t cd = iconv_open(\"ASCII//TRANSLIT\", codeset);\n+    if (cd != (iconv_t)-1)\n+      {\n+\tchar c1;\n+\tsize_t inbytesleft = strlen(s);\n+\tsize_t outbytesleft = 1;\n+\tchar* inbuf = const_cast<char*>(s);\n+\tchar* outbuf = &c1;\n+\tsize_t n = iconv(cd, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n+\ticonv_close(cd);\n+\tif (n != (size_t)-1)\n+\t  {\n+\t    cd = iconv_open(codeset, \"ASCII\");\n+\t    if (cd != (iconv_t)-1)\n+\t      {\n+\t\tchar c2;\n+\t\tinbuf = &c1;\n+\t\tinbytesleft = 1;\n+\t\toutbuf = &c2;\n+\t\toutbytesleft = 1;\n+\t\tn = iconv(cd, &inbuf, &inbytesleft, &outbuf, &outbytesleft);\n+\t\ticonv_close(cd);\n+\t\tif (n != (size_t)-1)\n+\t\t  return c2;\n+\t      }\n+\t  }\n+      }\n+    return '\\0';\n+  }\n+#endif\n+\n   template<>\n     void\n     numpunct<char>::_M_initialize_numpunct(__c_locale __cloc)\n@@ -63,8 +114,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  // Named locale.\n \t  _M_data->_M_decimal_point = *(__nl_langinfo_l(DECIMAL_POINT,\n \t\t\t\t\t\t\t__cloc));\n-\t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(THOUSANDS_SEP,\n-\t\t\t\t\t\t\t__cloc));\n+\t  const char* thousands_sep = __nl_langinfo_l(THOUSANDS_SEP, __cloc);\n+\n+\t  if (thousands_sep[0] != '\\0' && thousands_sep[1] != '\\0')\n+\t    _M_data->_M_thousands_sep = __narrow_multibyte_chars(thousands_sep,\n+\t\t\t\t\t\t\t\t __cloc);\n+\t  else\n+\t    _M_data->_M_thousands_sep = *thousands_sep;\n \n \t  // Check for NULL, which implies no grouping.\n \t  if (_M_data->_M_thousands_sep == '\\0')"}]}