{"sha": "8c4ee6f5320012a33382597cba44e225046d7c4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM0ZWU2ZjUzMjAwMTJhMzMzODI1OTdjYmE0NGUyMjUwNDZkN2M0Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T14:28:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T14:28:32Z"}, "message": "[multiple changes]\n\n2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Chain_PPC): Implement AI04-0230: null procedures can\n\tonly have inheritable classwide pre/postconditions.\n\n2011-08-02  Javier Miranda  <miranda@adacore.com>\n\n\t* a-tags.ads, a-tags.adb (Check_TSD): New subprogram.\n\t* rtsfind.ads (RE_Check_TSD): New runtime entity.\n\t* exp_disp.adb (Make_DT): Generate call to the new runtime routine that\n\tchecks if the external tag of a type is the same as the external tag\n\tof some other declaration.\n\nFrom-SVN: r177159", "tree": {"sha": "686f12f7d9a2f85255134865a56ce0ba3076b688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/686f12f7d9a2f85255134865a56ce0ba3076b688"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c4ee6f5320012a33382597cba44e225046d7c4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c4ee6f5320012a33382597cba44e225046d7c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c4ee6f5320012a33382597cba44e225046d7c4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c4ee6f5320012a33382597cba44e225046d7c4f/comments", "author": null, "committer": null, "parents": [{"sha": "0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3d16c08a9b4082e5b3fbfb82e282f49fe7ac1e"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "f09f47d09eab2fae52b258d75b829575003a51d4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8c4ee6f5320012a33382597cba44e225046d7c4f", "patch": "@@ -1,3 +1,16 @@\n+2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Chain_PPC): Implement AI04-0230: null procedures can\n+\tonly have inheritable classwide pre/postconditions.\n+\n+2011-08-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* a-tags.ads, a-tags.adb (Check_TSD): New subprogram.\n+\t* rtsfind.ads (RE_Check_TSD): New runtime entity.\n+\t* exp_disp.adb (Make_DT): Generate call to the new runtime routine that\n+\tchecks if the external tag of a type is the same as the external tag\n+\tof some other declaration.\n+\n 2011-08-02  Thomas Quinot  <quinot@adacore.com>\n \n \t* s-taskin.ads: Minor reformatting."}, {"sha": "7a5f7bce071fb152450b032dff01c81de6f04d15", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=8c4ee6f5320012a33382597cba44e225046d7c4f", "patch": "@@ -303,6 +303,24 @@ package body Ada.Tags is\n       return This - Offset_To_Top (This);\n    end Base_Address;\n \n+   ---------------\n+   -- Check_TSD --\n+   ---------------\n+\n+   procedure Check_TSD (TSD : Type_Specific_Data_Ptr) is\n+      T : Tag;\n+\n+   begin\n+      --  Verify that the external tag of this TSD is not registered in the\n+      --  runtime hash table.\n+\n+      T := External_Tag_HTable.Get (To_Address (TSD.External_Tag));\n+\n+      if T /= null then\n+         raise Program_Error with \"duplicated external tag\";\n+      end if;\n+   end Check_TSD;\n+\n    --------------------\n    -- Descendant_Tag --\n    --------------------"}, {"sha": "e9ac33afa4c456baaddfe0f09726fc4390153e74", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=8c4ee6f5320012a33382597cba44e225046d7c4f", "patch": "@@ -421,6 +421,10 @@ private\n    --  Ada 2005 (AI-251): Displace \"This\" to point to the base address of\n    --  the object (that is, the address of the primary tag of the object).\n \n+   procedure Check_TSD (TSD : Type_Specific_Data_Ptr);\n+   --  Ada 2012 (AI-113): Raise Program_Error if the external tag of this TSD\n+   --  is the same as the external tag for some other tagged type declaration.\n+\n    function Displace (This : System.Address; T : Tag) return System.Address;\n    --  Ada 2005 (AI-251): Displace \"This\" to point to the secondary dispatch\n    --  table of T."}, {"sha": "cdc92a34b9ca59116afaf0eeb370921784413ca5", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=8c4ee6f5320012a33382597cba44e225046d7c4f", "patch": "@@ -5990,6 +5990,24 @@ package body Exp_Disp is\n          end if;\n       end if;\n \n+      --  Generate code to check if the external tag of this type is the same\n+      --  as the external tag of some other declaration.\n+\n+      --     Check_TSD (TSD'Unrestricted_Access);\n+\n+      if not No_Run_Time_Mode\n+        and then Ada_Version >= Ada_2012\n+        and then RTE_Available (RE_Check_TSD)\n+      then\n+         Append_To (Elab_Code,\n+           Make_Procedure_Call_Statement (Loc,\n+             Name => New_Reference_To (RTE (RE_Check_TSD), Loc),\n+             Parameter_Associations => New_List (\n+               Make_Attribute_Reference (Loc,\n+                 Prefix => New_Reference_To (TSD, Loc),\n+                 Attribute_Name => Name_Unchecked_Access))));\n+      end if;\n+\n       --  Generate code to register the Tag in the External_Tag hash table for\n       --  the pure Ada type only.\n "}, {"sha": "06e60660e6e520455a4729032c01fe4cc65438f3", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=8c4ee6f5320012a33382597cba44e225046d7c4f", "patch": "@@ -551,6 +551,7 @@ package Rtsfind is\n      RE_Address_Array,                   -- Ada.Tags\n      RE_Addr_Ptr,                        -- Ada.Tags\n      RE_Base_Address,                    -- Ada.Tags\n+     RE_Check_TSD,                       -- Ada.Tags\n      RE_Cstring_Ptr,                     -- Ada.Tags\n      RE_Descendant_Tag,                  -- Ada.Tags\n      RE_Dispatch_Table,                  -- Ada.Tags\n@@ -1729,6 +1730,7 @@ package Rtsfind is\n      RE_Address_Array                    => Ada_Tags,\n      RE_Addr_Ptr                         => Ada_Tags,\n      RE_Base_Address                     => Ada_Tags,\n+     RE_Check_TSD                        => Ada_Tags,\n      RE_Cstring_Ptr                      => Ada_Tags,\n      RE_Descendant_Tag                   => Ada_Tags,\n      RE_Dispatch_Table                   => Ada_Tags,"}, {"sha": "20e5191d9f2bfc3b49bf91ab1b7567d2b9ad62a7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c4ee6f5320012a33382597cba44e225046d7c4f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8c4ee6f5320012a33382597cba44e225046d7c4f", "patch": "@@ -1595,6 +1595,19 @@ package body Sem_Prag is\n                     (\"aspect % requires ''Class for abstract subprogram\");\n                end if;\n \n+            --  AI05-0230:  the same restriction applies to null procedures.\n+            --  For compatibility with earlier uses of the Ada pragma, apply\n+            --  this rule only to aspect specifications.\n+\n+            elsif Nkind (PO) = N_Subprogram_Declaration\n+              and then Nkind (Specification (PO)) = N_Procedure_Specification\n+              and then Null_Present (Specification (PO))\n+              and then From_Aspect_Specification (N)\n+              and then not Class_Present (N)\n+            then\n+               Error_Pragma\n+                 (\"aspect % requires ''Class for null procedure\");\n+\n             elsif not Nkind_In (PO, N_Subprogram_Declaration,\n                                     N_Generic_Subprogram_Declaration,\n                                     N_Entry_Declaration)"}]}