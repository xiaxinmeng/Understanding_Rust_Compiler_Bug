{"sha": "31cb596a6b572773d25e7196ff19e126a52ca1e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFjYjU5NmE2YjU3Mjc3M2QyNWU3MTk2ZmYxOWUxMjZhNTJjYTFlNA==", "commit": {"author": {"name": "Joey Ye", "email": "joey.ye@intel.com", "date": "2008-08-28T19:20:03Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-08-28T19:20:03Z"}, "message": "extend.texi: Document AVX built-in functions.\n\n2008-08-28  Joey Ye  <joey.ye@intel.com>\n\n\t* doc/extend.texi: Document AVX built-in functions.\n\t* doc/invoke.texi: Document -mavx.\n\nFrom-SVN: r139727", "tree": {"sha": "66504beb1202aa49882720584f8da13e799b6c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66504beb1202aa49882720584f8da13e799b6c0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31cb596a6b572773d25e7196ff19e126a52ca1e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31cb596a6b572773d25e7196ff19e126a52ca1e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31cb596a6b572773d25e7196ff19e126a52ca1e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31cb596a6b572773d25e7196ff19e126a52ca1e4/comments", "author": {"login": "npg-joey", "id": 81339828, "node_id": "MDQ6VXNlcjgxMzM5ODI4", "avatar_url": "https://avatars.githubusercontent.com/u/81339828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npg-joey", "html_url": "https://github.com/npg-joey", "followers_url": "https://api.github.com/users/npg-joey/followers", "following_url": "https://api.github.com/users/npg-joey/following{/other_user}", "gists_url": "https://api.github.com/users/npg-joey/gists{/gist_id}", "starred_url": "https://api.github.com/users/npg-joey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npg-joey/subscriptions", "organizations_url": "https://api.github.com/users/npg-joey/orgs", "repos_url": "https://api.github.com/users/npg-joey/repos", "events_url": "https://api.github.com/users/npg-joey/events{/privacy}", "received_events_url": "https://api.github.com/users/npg-joey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95879c728b9a59ae67db022ad370eb66374090f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95879c728b9a59ae67db022ad370eb66374090f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95879c728b9a59ae67db022ad370eb66374090f3"}], "stats": {"total": 150, "additions": 148, "deletions": 2}, "files": [{"sha": "5e93e9d96593d79b2d6f60f06ce0120253dd2efc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cb596a6b572773d25e7196ff19e126a52ca1e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cb596a6b572773d25e7196ff19e126a52ca1e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31cb596a6b572773d25e7196ff19e126a52ca1e4", "patch": "@@ -1,3 +1,8 @@\n+2008-08-28  Joey Ye  <joey.ye@intel.com>\n+\n+\t* doc/extend.texi: Document AVX built-in functions.\n+\t* doc/invoke.texi: Document -mavx.\n+\n 2008-08-28  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Joey Ye  <joey.ye@intel.com>\n \t    Xuepeng Guo  <xuepeng.guo@intel.com>"}, {"sha": "760c128829315bb2953e4c746543df50ce4e94a1", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cb596a6b572773d25e7196ff19e126a52ca1e4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cb596a6b572773d25e7196ff19e126a52ca1e4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=31cb596a6b572773d25e7196ff19e126a52ca1e4", "patch": "@@ -8271,6 +8271,141 @@ depending on the size of @code{unsigned long}.\n Generates the @code{popcntq} machine instruction.\n @end table\n \n+The following built-in functions are available when @option{-mavx} is\n+used. All of them generate the machine instruction that is part of the\n+name.\n+\n+@smallexample\n+v4df __builtin_ia32_addpd256 (v4df,v4df)\n+v8sf __builtin_ia32_addps256 (v8sf,v8sf)\n+v4df __builtin_ia32_addsubpd256 (v4df,v4df)\n+v8sf __builtin_ia32_addsubps256 (v8sf,v8sf)\n+v4df __builtin_ia32_andnpd256 (v4df,v4df)\n+v8sf __builtin_ia32_andnps256 (v8sf,v8sf)\n+v4df __builtin_ia32_andpd256 (v4df,v4df)\n+v8sf __builtin_ia32_andps256 (v8sf,v8sf)\n+v4df __builtin_ia32_blendpd256 (v4df,v4df,int)\n+v8sf __builtin_ia32_blendps256 (v8sf,v8sf,int)\n+v4df __builtin_ia32_blendvpd256 (v4df,v4df,v4df)\n+v8sf __builtin_ia32_blendvps256 (v8sf,v8sf,v8sf)\n+v2df __builtin_ia32_cmppd (v2df,v2df,int)\n+v4df __builtin_ia32_cmppd256 (v4df,v4df,int)\n+v4sf __builtin_ia32_cmpps (v4sf,v4sf,int)\n+v8sf __builtin_ia32_cmpps256 (v8sf,v8sf,int)\n+v2df __builtin_ia32_cmpsd (v2df,v2df,int)\n+v4sf __builtin_ia32_cmpss (v4sf,v4sf,int)\n+v4df __builtin_ia32_cvtdq2pd256 (v4si)\n+v8sf __builtin_ia32_cvtdq2ps256 (v8si)\n+v4si __builtin_ia32_cvtpd2dq256 (v4df)\n+v4sf __builtin_ia32_cvtpd2ps256 (v4df)\n+v8si __builtin_ia32_cvtps2dq256 (v8sf)\n+v4df __builtin_ia32_cvtps2pd256 (v4sf)\n+v4si __builtin_ia32_cvttpd2dq256 (v4df)\n+v8si __builtin_ia32_cvttps2dq256 (v8sf)\n+v4df __builtin_ia32_divpd256 (v4df,v4df)\n+v8sf __builtin_ia32_divps256 (v8sf,v8sf)\n+v8sf __builtin_ia32_dpps256 (v8sf,v8sf,int)\n+v4df __builtin_ia32_haddpd256 (v4df,v4df)\n+v8sf __builtin_ia32_haddps256 (v8sf,v8sf)\n+v4df __builtin_ia32_hsubpd256 (v4df,v4df)\n+v8sf __builtin_ia32_hsubps256 (v8sf,v8sf)\n+v32qi __builtin_ia32_lddqu256 (pcchar)\n+v32qi __builtin_ia32_loaddqu256 (pcchar)\n+v4df __builtin_ia32_loadupd256 (pcdouble)\n+v8sf __builtin_ia32_loadups256 (pcfloat)\n+v2df __builtin_ia32_maskloadpd (pcv2df,v2df)\n+v4df __builtin_ia32_maskloadpd256 (pcv4df,v4df)\n+v4sf __builtin_ia32_maskloadps (pcv4sf,v4sf)\n+v8sf __builtin_ia32_maskloadps256 (pcv8sf,v8sf)\n+void __builtin_ia32_maskstorepd (pv2df,v2df,v2df)\n+void __builtin_ia32_maskstorepd256 (pv4df,v4df,v4df)\n+void __builtin_ia32_maskstoreps (pv4sf,v4sf,v4sf)\n+void __builtin_ia32_maskstoreps256 (pv8sf,v8sf,v8sf)\n+v4df __builtin_ia32_maxpd256 (v4df,v4df)\n+v8sf __builtin_ia32_maxps256 (v8sf,v8sf)\n+v4df __builtin_ia32_minpd256 (v4df,v4df)\n+v8sf __builtin_ia32_minps256 (v8sf,v8sf)\n+v4df __builtin_ia32_movddup256 (v4df)\n+int __builtin_ia32_movmskpd256 (v4df)\n+int __builtin_ia32_movmskps256 (v8sf)\n+v8sf __builtin_ia32_movshdup256 (v8sf)\n+v8sf __builtin_ia32_movsldup256 (v8sf)\n+v4df __builtin_ia32_mulpd256 (v4df,v4df)\n+v8sf __builtin_ia32_mulps256 (v8sf,v8sf)\n+v4df __builtin_ia32_orpd256 (v4df,v4df)\n+v8sf __builtin_ia32_orps256 (v8sf,v8sf)\n+v2df __builtin_ia32_pd_pd256 (v4df)\n+v4df __builtin_ia32_pd256_pd (v2df)\n+v4sf __builtin_ia32_ps_ps256 (v8sf)\n+v8sf __builtin_ia32_ps256_ps (v4sf)\n+int __builtin_ia32_ptestc256 (v4di,v4di,ptest)\n+int __builtin_ia32_ptestnzc256 (v4di,v4di,ptest)\n+int __builtin_ia32_ptestz256 (v4di,v4di,ptest)\n+v8sf __builtin_ia32_rcpps256 (v8sf)\n+v4df __builtin_ia32_roundpd256 (v4df,int)\n+v8sf __builtin_ia32_roundps256 (v8sf,int)\n+v8sf __builtin_ia32_rsqrtps_nr256 (v8sf)\n+v8sf __builtin_ia32_rsqrtps256 (v8sf)\n+v4df __builtin_ia32_shufpd256 (v4df,v4df,int)\n+v8sf __builtin_ia32_shufps256 (v8sf,v8sf,int)\n+v4si __builtin_ia32_si_si256 (v8si)\n+v8si __builtin_ia32_si256_si (v4si)\n+v4df __builtin_ia32_sqrtpd256 (v4df)\n+v8sf __builtin_ia32_sqrtps_nr256 (v8sf)\n+v8sf __builtin_ia32_sqrtps256 (v8sf)\n+void __builtin_ia32_storedqu256 (pchar,v32qi)\n+void __builtin_ia32_storeupd256 (pdouble,v4df)\n+void __builtin_ia32_storeups256 (pfloat,v8sf)\n+v4df __builtin_ia32_subpd256 (v4df,v4df)\n+v8sf __builtin_ia32_subps256 (v8sf,v8sf)\n+v4df __builtin_ia32_unpckhpd256 (v4df,v4df)\n+v8sf __builtin_ia32_unpckhps256 (v8sf,v8sf)\n+v4df __builtin_ia32_unpcklpd256 (v4df,v4df)\n+v8sf __builtin_ia32_unpcklps256 (v8sf,v8sf)\n+v4df __builtin_ia32_vbroadcastf128_pd256 (pcv2df)\n+v8sf __builtin_ia32_vbroadcastf128_ps256 (pcv4sf)\n+v4df __builtin_ia32_vbroadcastsd256 (pcdouble)\n+v4sf __builtin_ia32_vbroadcastss (pcfloat)\n+v8sf __builtin_ia32_vbroadcastss256 (pcfloat)\n+v2df __builtin_ia32_vextractf128_pd256 (v4df,int)\n+v4sf __builtin_ia32_vextractf128_ps256 (v8sf,int)\n+v4si __builtin_ia32_vextractf128_si256 (v8si,int)\n+v4df __builtin_ia32_vinsertf128_pd256 (v4df,v2df,int)\n+v8sf __builtin_ia32_vinsertf128_ps256 (v8sf,v4sf,int)\n+v8si __builtin_ia32_vinsertf128_si256 (v8si,v4si,int)\n+v4df __builtin_ia32_vperm2f128_pd256 (v4df,v4df,int)\n+v8sf __builtin_ia32_vperm2f128_ps256 (v8sf,v8sf,int)\n+v8si __builtin_ia32_vperm2f128_si256 (v8si,v8si,int)\n+v2df __builtin_ia32_vpermil2pd (v2df,v2df,v2di,int)\n+v4df __builtin_ia32_vpermil2pd256 (v4df,v4df,v4di,int)\n+v4sf __builtin_ia32_vpermil2ps (v4sf,v4sf,v4si,int)\n+v8sf __builtin_ia32_vpermil2ps256 (v8sf,v8sf,v8si,int)\n+v2df __builtin_ia32_vpermilpd (v2df,int)\n+v4df __builtin_ia32_vpermilpd256 (v4df,int)\n+v4sf __builtin_ia32_vpermilps (v4sf,int)\n+v8sf __builtin_ia32_vpermilps256 (v8sf,int)\n+v2df __builtin_ia32_vpermilvarpd (v2df,v2di)\n+v4df __builtin_ia32_vpermilvarpd256 (v4df,v4di)\n+v4sf __builtin_ia32_vpermilvarps (v4sf,v4si)\n+v8sf __builtin_ia32_vpermilvarps256 (v8sf,v8si)\n+int __builtin_ia32_vtestcpd (v2df,v2df,ptest)\n+int __builtin_ia32_vtestcpd256 (v4df,v4df,ptest)\n+int __builtin_ia32_vtestcps (v4sf,v4sf,ptest)\n+int __builtin_ia32_vtestcps256 (v8sf,v8sf,ptest)\n+int __builtin_ia32_vtestnzcpd (v2df,v2df,ptest)\n+int __builtin_ia32_vtestnzcpd256 (v4df,v4df,ptest)\n+int __builtin_ia32_vtestnzcps (v4sf,v4sf,ptest)\n+int __builtin_ia32_vtestnzcps256 (v8sf,v8sf,ptest)\n+int __builtin_ia32_vtestzpd (v2df,v2df,ptest)\n+int __builtin_ia32_vtestzpd256 (v4df,v4df,ptest)\n+int __builtin_ia32_vtestzps (v4sf,v4sf,ptest)\n+int __builtin_ia32_vtestzps256 (v8sf,v8sf,ptest)\n+void __builtin_ia32_vzeroall (void)\n+void __builtin_ia32_vzeroupper (void)\n+v4df __builtin_ia32_xorpd256 (v4df,v4df)\n+v8sf __builtin_ia32_xorps256 (v8sf,v8sf)\n+@end smallexample\n+\n The following built-in functions are available when @option{-maes} is\n used.  All of them generate the machine instruction that is part of the\n name."}, {"sha": "e1e69699e20ceb33b6c094ecfa63d32cff7b8c68", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cb596a6b572773d25e7196ff19e126a52ca1e4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cb596a6b572773d25e7196ff19e126a52ca1e4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=31cb596a6b572773d25e7196ff19e126a52ca1e4", "patch": "@@ -563,7 +563,7 @@ Objective-C and Objective-C++ Dialects}.\n -mpreferred-stack-boundary=@var{num}\n -mincoming-stack-boundary=@var{num}\n -mcld -mcx16 -msahf -mrecip @gol\n--mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 @gol\n+-mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -maes -mpclmul @gol\n -msse4a -m3dnow -mpopcnt -mabm -msse5 @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n@@ -10865,6 +10865,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-sse4.2\n @itemx -msse4\n @itemx -mno-sse4\n+@itemx -mavx\n+@itemx -mno-avx\n @itemx -maes\n @itemx -mno-aes\n @itemx -mpclmul\n@@ -10886,7 +10888,7 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex m3dnow\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX,\n-SSE, SSE2, SSE3, SSSE3, SSE4.1, AES, PCLMUL, SSE4A, SSE5, ABM or\n+SSE, SSE2, SSE3, SSSE3, SSE4.1, AVX, AES, PCLMUL, SSE4A, SSE5, ABM or\n 3DNow!@: extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and\n@@ -10895,6 +10897,10 @@ disabled by these switches.\n To have SSE/SSE2 instructions generated automatically from floating-point\n code (as opposed to 387 instructions), see @option{-mfpmath=sse}.\n \n+GCC depresses SSEx instructions when @option{-mavx} is used. Instead, it\n+generates new AVX instructions or AVX equivalence for all SSEx instructions\n+when needed.\n+\n These options will enable GCC to use these extended instructions in\n generated code, even without @option{-mfpmath=sse}.  Applications which\n perform runtime CPU detection must compile separate files for each"}]}