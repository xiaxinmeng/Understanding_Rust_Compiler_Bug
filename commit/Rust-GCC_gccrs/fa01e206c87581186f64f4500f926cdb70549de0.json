{"sha": "fa01e206c87581186f64f4500f926cdb70549de0", "node_id": "C_kwDOANBUbNoAKGZhMDFlMjA2Yzg3NTgxMTg2ZjY0ZjQ1MDBmOTI2Y2RiNzA1NDlkZTA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-29T12:19:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-30T14:05:12Z"}, "message": "Remove more stray returns and gcc_unreachable ()s\n\nThis removes more cases that appear when bootstrap with\n-Wunreachable-code-return progresses.\n\n2021-11-29  Richard Biener  <rguenther@suse.de>\n\n\t* config/i386/i386.c (ix86_shift_rotate_cost): Remove\n\tunreachable return.\n\t* tree-chrec.c (evolution_function_is_invariant_rec_p):\n\tLikewise.\n\t* tree-if-conv.c (if_convertible_stmt_p): Likewise.\n\t* tree-ssa-pre.c (fully_constant_expression): Likewise.\n\t* tree-vrp.c (operand_less_p): Likewise.\n\t* reload.c (reg_overlap_mentioned_for_reload_p): Remove\n\tunreachable gcc_unreachable ().\n\t* sel-sched-ir.h (bb_next_bb): Likewise.\n\t* varasm.c (compare_constant): Likewise.\n\ngcc/cp/\n\t* logic.cc (cnf_size_r): Remove unreachable and inconsistently\n\tplaced gcc_unreachable ()s.\n\t* pt.c (iterative_hash_template_arg): Remove unreachable\n\tgcc_unreachable and return.\n\ngcc/fortran/\n\t* target-memory.c (gfc_element_size): Remove unreachable return.\n\ngcc/objc/\n\t* objc-act.c (objc_build_setter_call): Remove unreachable\n\treturn.\n\nlibcpp/\n\t* charset.c (convert_escape): Remove unreachable break.", "tree": {"sha": "1ca5e06b83180b7212f871d99686a4f2b666c55a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ca5e06b83180b7212f871d99686a4f2b666c55a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa01e206c87581186f64f4500f926cdb70549de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa01e206c87581186f64f4500f926cdb70549de0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa01e206c87581186f64f4500f926cdb70549de0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa01e206c87581186f64f4500f926cdb70549de0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0194d92c35ca8b3aa850b805d9becb4491cf6bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0194d92c35ca8b3aa850b805d9becb4491cf6bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0194d92c35ca8b3aa850b805d9becb4491cf6bec"}], "stats": {"total": 29, "additions": 3, "deletions": 26}, "files": [{"sha": "80fee627358881bec5749efaed12d7645631c6fd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -20366,7 +20366,6 @@ ix86_shift_rotate_cost (const struct processor_costs *cost,\n       else\n \treturn cost->shift_var;\n     }\n-  return cost->shift_const;\n }\n \n /* Compute a (partial) cost for rtx X.  Return true if the complete"}, {"sha": "f31ae8c58ae1b7db5642bf3f1e35d891bc144dbf", "filename": "gcc/cp/logic.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fcp%2Flogic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fcp%2Flogic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flogic.cc?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -495,7 +495,6 @@ cnf_size_r (tree t)\n \t  else\n \t    /* Neither LHS nor RHS is a conjunction.  */\n \t    return std::make_pair (0, false);\n-\t  gcc_unreachable ();\n \t}\n       if (conjunction_p (lhs))\n \t{\n@@ -536,7 +535,6 @@ cnf_size_r (tree t)\n \t  else\n \t    /* Neither LHS nor RHS is a conjunction.  */\n \t    return std::make_pair (2, false);\n-\t  gcc_unreachable ();\n \t}\n       if (conjunction_p (lhs))\n \t{"}, {"sha": "f4b9d9673fbedceba7be02af09784bd6906b376b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -1969,9 +1969,6 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n \tval = iterative_hash_template_arg (TREE_OPERAND (arg, i), val);\n       return val;\n     }\n-\n-  gcc_unreachable ();\n-  return 0;\n }\n \n /* Unregister the specialization SPEC as a specialization of TMPL."}, {"sha": "ab4665c6782051dab734f49b93465fc93a733828", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -138,7 +138,6 @@ gfc_element_size (gfc_expr *e, size_t *siz)\n       *siz = 0;\n       return false;\n     }\n-  return true;\n }\n \n "}, {"sha": "89f46294123b69bd1cb0bbb3672effe445584943", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -1904,9 +1904,6 @@ objc_build_setter_call (tree lhs, tree rhs)\n \t\t\t\t\t setter_argument, NULL);\n       return setter;\n     }\n-\n-  /* Unreachable, but the compiler may not realize.  */\n-  return error_mark_node;\n }\n \n /* This hook routine is called when a MODIFY_EXPR is being built.  We"}, {"sha": "9ee3439709b1dd5d718d18b36aca0d60bf594f4d", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -6602,11 +6602,10 @@ reg_overlap_mentioned_for_reload_p (rtx x, rtx in)\n \treturn (rtx_equal_p (x, in)\n \t\t|| reg_overlap_mentioned_for_reload_p (x, XEXP (in, 0))\n \t\t|| reg_overlap_mentioned_for_reload_p (x, XEXP (in, 1)));\n-      else return (reg_overlap_mentioned_for_reload_p (XEXP (x, 0), in)\n-\t\t   || reg_overlap_mentioned_for_reload_p (XEXP (x, 1), in));\n+      else\n+\treturn (reg_overlap_mentioned_for_reload_p (XEXP (x, 0), in)\n+\t\t|| reg_overlap_mentioned_for_reload_p (XEXP (x, 1), in));\n     }\n-\n-  gcc_unreachable ();\n }\n \n /* Return nonzero if anything in X contains a MEM.  Look also for pseudo"}, {"sha": "18e03c4cb9692420e3160b722c40a21d8173f888", "filename": "gcc/sel-sched-ir.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fsel-sched-ir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fsel-sched-ir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.h?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -1493,8 +1493,6 @@ bb_next_bb (basic_block bb)\n     default:\n       return bb->next_bb;\n     }\n-\n-  gcc_unreachable ();\n }\n \n \f"}, {"sha": "ad6f981191fba19e672c3251a87df9b1d33b5753", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -1148,8 +1148,6 @@ evolution_function_is_invariant_rec_p (tree chrec, int loopnum)\n     default:\n       return false;\n     }\n-\n-  return false;\n }\n \n /* Return true if CHREC is invariant in loop LOOPNUM, false otherwise. */"}, {"sha": "1cc2016076aeb887a3c05cd4b7cb9d6523647f8b", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -1110,8 +1110,6 @@ if_convertible_stmt_p (gimple *stmt, vec<data_reference_p> refs)\n \t}\n       return false;\n     }\n-\n-  return true;\n }\n \n /* Assumes that BB has more than 1 predecessors."}, {"sha": "a49f87fbe6b4b732015164c73845837afb9460be", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -1234,7 +1234,6 @@ fully_constant_expression (pre_expr e)\n     default:\n       return e;\n     }\n-  return e;\n }\n \n /* Translate the VUSE backwards through phi nodes in E->dest, so that"}, {"sha": "b3adc26a93328425ac15e22441164735b5df8c1d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -330,8 +330,6 @@ operand_less_p (tree val, tree val2)\n       else\n \treturn -2;\n     }\n-\n-  return 0;\n }\n \n /* Compare two values VAL1 and VAL2.  Return"}, {"sha": "d6031d6f1a298299f5ed92b32ad5131c5cd17a07", "filename": "gcc/varasm.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -3415,8 +3415,6 @@ compare_constant (const tree t1, const tree t2)\n     default:\n       return 0;\n     }\n-\n-  gcc_unreachable ();\n }\n \f\n /* Return the section into which constant EXP should be placed.  */"}, {"sha": "bcfd3ad44e12e066687bef3406e24470c8577254", "filename": "libcpp/charset.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01e206c87581186f64f4500f926cdb70549de0/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01e206c87581186f64f4500f926cdb70549de0/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=fa01e206c87581186f64f4500f926cdb70549de0", "patch": "@@ -1534,7 +1534,6 @@ convert_escape (cpp_reader *pfile, const uchar *from, const uchar *limit,\n     case 'x':\n       return convert_hex (pfile, from, limit, tbuf, cvt,\n \t\t\t  char_range, loc_reader, ranges);\n-      break;\n \n     case '0':  case '1':  case '2':  case '3':\n     case '4':  case '5':  case '6':  case '7':"}]}