{"sha": "03cb435c1905e03da44a6a0723f03c38e7f59b09", "node_id": "C_kwDOANBUbNoAKDAzY2I0MzVjMTkwNWUwM2RhNDRhNmEwNzIzZjAzYzM4ZTdmNTliMDk", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-12T15:43:58Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-13T07:04:26Z"}, "message": "visibility: Add create_private() static function\n\nWhen parsing a visibility in `parse_visibility`, it is not an error to\nnot have a pub token: It simply means we want to create a private\nvisibility. If we had C++14 or another language, we could instead\nrepresent all visibilities as an optional<AST::Visibility> where the\nVisibility class would not need to change. But I think the best course\nof action for our case is to instead keep visibilities even when they\nare private and have a special case in the `VisKind` enumeration.", "tree": {"sha": "4ab923ef97fe1c6ecd8de49529adf33ae2004ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ab923ef97fe1c6ecd8de49529adf33ae2004ce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03cb435c1905e03da44a6a0723f03c38e7f59b09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cb435c1905e03da44a6a0723f03c38e7f59b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03cb435c1905e03da44a6a0723f03c38e7f59b09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cb435c1905e03da44a6a0723f03c38e7f59b09/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7430791e0f71f1882a0f856c496071b76c61a6bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7430791e0f71f1882a0f856c496071b76c61a6bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7430791e0f71f1882a0f856c496071b76c61a6bc"}], "stats": {"total": 82, "additions": 45, "deletions": 37}, "files": [{"sha": "e6bad4bcbadb494ca796294449c40f7065f12030", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb435c1905e03da44a6a0723f03c38e7f59b09/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb435c1905e03da44a6a0723f03c38e7f59b09/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=03cb435c1905e03da44a6a0723f03c38e7f59b09", "patch": "@@ -306,17 +306,19 @@ SimplePath::as_string () const\n std::string\n Visibility::as_string () const\n {\n-  switch (public_vis_type)\n+  switch (vis_type)\n     {\n-    case NONE:\n+    case PRIV:\n+      return std::string (\"\");\n+    case PUB:\n       return std::string (\"pub\");\n-    case CRATE:\n+    case PUB_CRATE:\n       return std::string (\"pub(crate)\");\n-    case SELF:\n+    case PUB_SELF:\n       return std::string (\"pub(self)\");\n-    case SUPER:\n+    case PUB_SUPER:\n       return std::string (\"pub(super)\");\n-    case IN_PATH:\n+    case PUB_IN_PATH:\n       return std::string (\"pub(in \") + in_path.as_string () + std::string (\")\");\n     default:\n       gcc_unreachable ();"}, {"sha": "1b925c35b976914ccc889ec2048cbbb18d881c92", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb435c1905e03da44a6a0723f03c38e7f59b09/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb435c1905e03da44a6a0723f03c38e7f59b09/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=03cb435c1905e03da44a6a0723f03c38e7f59b09", "patch": "@@ -609,41 +609,44 @@ struct FunctionParam\n struct Visibility\n {\n public:\n-  enum PublicVisType\n-  {\n-    NONE,\n-    CRATE,\n-    SELF,\n-    SUPER,\n-    IN_PATH\n+  enum VisType\n+  {\n+    PRIV,\n+    PUB,\n+    PUB_CRATE,\n+    PUB_SELF,\n+    PUB_SUPER,\n+    PUB_IN_PATH\n   };\n \n private:\n-  // if vis is public, one of these\n-  PublicVisType public_vis_type;\n-  // Only assigned if public_vis_type is IN_PATH\n+  VisType vis_type;\n+  // Only assigned if vis_type is IN_PATH\n   SimplePath in_path;\n \n   // should this store location info?\n \n public:\n   // Creates a Visibility - TODO make constructor protected or private?\n-  Visibility (PublicVisType public_vis_type, SimplePath in_path)\n-    : public_vis_type (public_vis_type), in_path (std::move (in_path))\n+  Visibility (VisType vis_type, SimplePath in_path)\n+    : vis_type (vis_type), in_path (std::move (in_path))\n   {}\n \n-  PublicVisType get_public_vis_type () const { return public_vis_type; }\n+  VisType get_public_vis_type () const { return vis_type; }\n \n   // Returns whether visibility is in an error state.\n   bool is_error () const\n   {\n-    return public_vis_type == IN_PATH && in_path.is_empty ();\n+    return vis_type == PUB_IN_PATH && in_path.is_empty ();\n   }\n \n+  // Returns whether visibility is public or not.\n+  bool is_public () const { return vis_type != PRIV && !is_error (); }\n+\n   // Creates an error visibility.\n   static Visibility create_error ()\n   {\n-    return Visibility (IN_PATH, SimplePath::create_empty ());\n+    return Visibility (PUB_IN_PATH, SimplePath::create_empty ());\n   }\n \n   // Unique pointer custom clone function\n@@ -657,32 +660,38 @@ struct Visibility\n   // Creates a public visibility with no further features/arguments.\n   static Visibility create_public ()\n   {\n-    return Visibility (NONE, SimplePath::create_empty ());\n+    return Visibility (PUB, SimplePath::create_empty ());\n   }\n \n   // Creates a public visibility with crate-relative paths or whatever.\n   static Visibility create_crate ()\n   {\n-    return Visibility (CRATE, SimplePath::create_empty ());\n+    return Visibility (PUB_CRATE, SimplePath::create_empty ());\n   }\n \n   // Creates a public visibility with self-relative paths or whatever.\n   static Visibility create_self ()\n   {\n-    return Visibility (SELF, SimplePath::create_empty ());\n+    return Visibility (PUB_SELF, SimplePath::create_empty ());\n   }\n \n   // Creates a public visibility with parent module-relative paths or\n   // whatever.\n   static Visibility create_super ()\n   {\n-    return Visibility (SUPER, SimplePath::create_empty ());\n+    return Visibility (PUB_SUPER, SimplePath::create_empty ());\n+  }\n+\n+  // Creates a private visibility\n+  static Visibility create_private ()\n+  {\n+    return Visibility (PRIV, SimplePath::create_empty ());\n   }\n \n   // Creates a public visibility with a given path or whatever.\n   static Visibility create_in_path (SimplePath in_path)\n   {\n-    return Visibility (IN_PATH, std::move (in_path));\n+    return Visibility (PUB_IN_PATH, std::move (in_path));\n   }\n \n   std::string as_string () const;\n@@ -938,7 +947,7 @@ class VisItem : public Item\n public:\n   /* Does the item have some kind of public visibility (non-default\n    * visibility)? */\n-  bool has_visibility () const { return !visibility.is_error (); }\n+  bool has_visibility () const { return visibility.is_public (); }\n \n   std::string as_string () const override;\n "}, {"sha": "4a344c9f5ab9eebe6cb5a52f59af217909dd3420", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb435c1905e03da44a6a0723f03c38e7f59b09/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb435c1905e03da44a6a0723f03c38e7f59b09/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=03cb435c1905e03da44a6a0723f03c38e7f59b09", "patch": "@@ -36,24 +36,21 @@ translate_visibility (const AST::Visibility &vis)\n   if (vis.is_error ())\n     return Visibility::create_error ();\n \n-  // FIXME: ... And then use this?\n-  // if (vis.is_private ())\n-  //   return Visibility::create_private ();\n-\n   switch (vis.get_public_vis_type ())\n     {\n-    case AST::Visibility::NONE:\n+    case AST::Visibility::PUB:\n       return Visibility (Visibility::VisType::PUBLIC);\n-    case AST::Visibility::SELF:\n+    case AST::Visibility::PRIV:\n+    case AST::Visibility::PUB_SELF:\n       return Visibility (Visibility::VisType::PRIVATE);\n     // Desugar pub(crate) into pub(in crate) and so on\n-    case AST::Visibility::CRATE:\n+    case AST::Visibility::PUB_CRATE:\n       return Visibility (Visibility::PUBLIC,\n \t\t\t AST::SimplePath::from_str (\"crate\"));\n-    case AST::Visibility::SUPER:\n+    case AST::Visibility::PUB_SUPER:\n       return Visibility (Visibility::PUBLIC,\n \t\t\t AST::SimplePath::from_str (\"super\"));\n-    case AST::Visibility::IN_PATH:\n+    case AST::Visibility::PUB_IN_PATH:\n       return Visibility (Visibility::VisType::PUBLIC, vis.get_path ());\n       break;\n     }"}, {"sha": "d320f0b1ec5bc58b75dd3434f84f0596e24fd7d9", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cb435c1905e03da44a6a0723f03c38e7f59b09/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cb435c1905e03da44a6a0723f03c38e7f59b09/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=03cb435c1905e03da44a6a0723f03c38e7f59b09", "patch": "@@ -2121,7 +2121,7 @@ Parser<ManagedTokenSource>::parse_visibility ()\n   // check for no visibility\n   if (lexer.peek_token ()->get_id () != PUB)\n     {\n-      return AST::Visibility::create_error ();\n+      return AST::Visibility::create_private ();\n     }\n \n   lexer.skip_token ();"}]}