{"sha": "64aa33dd9c7353a00780a6c6a45c4f835adc2996", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhYTMzZGQ5YzczNTNhMDA3ODBhNmM2YTQ1YzRmODM1YWRjMjk5Ng==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-03-16T18:32:45Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-03-16T18:32:45Z"}, "message": "lang.c (flag_hash_synchronization): New global.\n\n\t* lang.c (flag_hash_synchronization): New global.\n\t(lang_f_options): Added `hash-synchronization'.\n\t* lang-options.h: Mention -fhash-synchronization.\n\t* java-tree.h (flag_hash_synchronization): Declare.\n\t* expr.c (java_lang_expand_expr): Only push `sync_info' value when\n\thash table synchronization is disabled.\n\t* decl.c (init_decl_processing): Only push `sync_info' value when\n\thash table synchronization is disabled.\n\t* class.c (make_class_data): Only push `sync_info' field when hash\n\ttable synchronization is disabled.  Removed dead code.\n\nFrom-SVN: r32593", "tree": {"sha": "a9a67b3bdebd8b47728643d12e9e3d6dffc0f055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9a67b3bdebd8b47728643d12e9e3d6dffc0f055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64aa33dd9c7353a00780a6c6a45c4f835adc2996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64aa33dd9c7353a00780a6c6a45c4f835adc2996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64aa33dd9c7353a00780a6c6a45c4f835adc2996", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64aa33dd9c7353a00780a6c6a45c4f835adc2996/comments", "author": null, "committer": null, "parents": [{"sha": "3c0fca12828829ee5a8c277c1792f59dfd868fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c0fca12828829ee5a8c277c1792f59dfd868fef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c0fca12828829ee5a8c277c1792f59dfd868fef"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "23575cf9d7f44c858c62ae6e9c90f7dc3007c6fc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=64aa33dd9c7353a00780a6c6a45c4f835adc2996", "patch": "@@ -1,3 +1,16 @@\n+2000-03-16  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* lang.c (flag_hash_synchronization): New global.\n+\t(lang_f_options): Added `hash-synchronization'.\n+\t* lang-options.h: Mention -fhash-synchronization.\n+\t* java-tree.h (flag_hash_synchronization): Declare.\n+\t* expr.c (java_lang_expand_expr): Only push `sync_info' value when\n+\thash table synchronization is disabled.\n+\t* decl.c (init_decl_processing): Only push `sync_info' value when\n+\thash table synchronization is disabled.\n+\t* class.c (make_class_data): Only push `sync_info' field when hash\n+\ttable synchronization is disabled.  Removed dead code.\n+\n 2000-03-16  Tom Tromey  <tromey@cygnus.com>\n \n \t* lang.c (lang_decode_option): Enable -Wunused when -Wall given."}, {"sha": "99d38e00942082f601f01fea00dbe723c061e2b1", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=64aa33dd9c7353a00780a6c6a45c4f835adc2996", "patch": "@@ -1373,7 +1373,8 @@ make_class_data (type)\n   START_RECORD_CONSTRUCTOR (temp, object_type_node);\n   PUSH_FIELD_VALUE (temp, \"vtable\",\n \t\t    build1 (ADDR_EXPR, dtable_ptr_type, class_dtable_decl));\n-  PUSH_FIELD_VALUE (temp, \"sync_info\", null_pointer_node);\n+  if (! flag_hash_synchronization)\n+    PUSH_FIELD_VALUE (temp, \"sync_info\", null_pointer_node);\n   FINISH_RECORD_CONSTRUCTOR (temp);\n   START_RECORD_CONSTRUCTOR (cons, class_type_node);\n   PUSH_SUPER_VALUE (cons, temp);"}, {"sha": "bd2514ad567eac19dd153521b55852ce1219ecd5", "filename": "gcc/java/decl.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=64aa33dd9c7353a00780a6c6a45c4f835adc2996", "patch": "@@ -349,7 +349,8 @@ tree double_zero_node;\n tree empty_stmt_node;\n \n /* Nodes for boolean constants TRUE and FALSE. */\n-tree boolean_true_node, boolean_false_node;\n+tree boolean_true_node;\n+tree boolean_false_node;\n \n tree TYPE_identifier_node;\n tree init_identifier_node;\n@@ -413,7 +414,8 @@ push_promoted_type (name, actual_type)\n }\n \n /* Nodes for integer constants.  */\n-tree integer_two_node, integer_four_node;\n+tree integer_two_node;\n+tree integer_four_node;\n tree integer_negative_one_node;\n \n /* Return a definition for a builtin function named NAME and whose data type\n@@ -629,8 +631,9 @@ init_decl_processing ()\n   /* This isn't exactly true, but it is what we have in the source.\n      There is an unresolved issue here, which is whether the vtable\n      should be marked by the GC.  */\n-  PUSH_FIELD (object_type_node, field, \"sync_info\",\n-\t      build_pointer_type (object_type_node));\n+  if (! flag_hash_synchronization)\n+    PUSH_FIELD (object_type_node, field, \"sync_info\",\n+\t\tbuild_pointer_type (object_type_node));\n   for (t = TYPE_FIELDS (object_type_node); t != NULL_TREE; t = TREE_CHAIN (t))\n     FIELD_PRIVATE (t) = 1;\n   FINISH_RECORD (object_type_node);\n@@ -1082,6 +1085,7 @@ pushdecl (x)\n \n   return x;\n }\n+\n void\n pushdecl_force_head (x)\n      tree x;\n@@ -1125,8 +1129,7 @@ getdecls ()\n \n /* Create a new `struct binding_level'.  */\n \n-static\n-struct binding_level *\n+static struct binding_level *\n make_binding_level ()\n {\n   /* NOSTRICT */"}, {"sha": "f92fc8dabb6458851a2b0d5fdc0062d167ab7d12", "filename": "gcc/java/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=64aa33dd9c7353a00780a6c6a45c4f835adc2996", "patch": "@@ -79,7 +79,7 @@ static tree build_java_throw_out_of_bounds_exception PARAMS ((tree));\n static tree build_java_check_indexed_type PARAMS ((tree, tree)); \n static tree java_array_data_offset PARAMS ((tree)); \n static tree case_identity PARAMS ((tree, tree)); \n- \n+\n static tree operand_type[59];\n extern struct obstack permanent_obstack;\n \n@@ -1996,7 +1996,8 @@ java_lang_expand_expr (exp, target, tmode, modifier)\n \t    PUSH_FIELD_VALUE (temp, \"vtable\",\n \t\t\t      null_pointer_node /* FIXME */\n \t\t\t      );\n-\t    PUSH_FIELD_VALUE (temp, \"sync_info\", null_pointer_node);\n+\t    if (! flag_hash_synchronization)\n+\t      PUSH_FIELD_VALUE (temp, \"sync_info\", null_pointer_node);\n \t    FINISH_RECORD_CONSTRUCTOR (temp);\n \t    START_RECORD_CONSTRUCTOR (value, array_type);\n \t    PUSH_SUPER_VALUE (value, temp);"}, {"sha": "96bfe4fde01a19be07b667c358e3499d86246694", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=64aa33dd9c7353a00780a6c6a45c4f835adc2996", "patch": "@@ -155,6 +155,10 @@ extern int flag_use_divide_subroutine;\n /* When non zero, generate code for the Boehm GC.  */\n extern int flag_use_boehm_gc;\n \n+/* When non zero, assume the runtime uses a hash table to map an\n+   object to its synchronization structure.  */\n+extern int flag_hash_synchronization;\n+\n /* The Java .class file that provides main_class;  the main input file. */\n extern struct JCF *current_jcf;\n "}, {"sha": "44f9ea4222b0286445c83dad957984db11d30405", "filename": "gcc/java/lang-options.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-options.h?ref=64aa33dd9c7353a00780a6c6a45c4f835adc2996", "patch": "@@ -1,5 +1,5 @@\n /* Switch definitions for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -34,6 +34,7 @@ DEFINE_LANG_NAME (\"Java\")\n   { \"-femit-class-file\", \"\" },\n   { \"-femit-class-files\", \"Dump class files to <name>.class\" },\n   { \"-fuse-boehm-gc\", \"Generate code for Boehm GC\" },\n+  { \"-fhash-synchronization\", \"Don't put synchronization structure in each object\" },\n #if ! USE_CPPLIB\n   { \"-MD\", \"Print dependencies to FILE.d\" },\n   { \"-MMD\", \"Print dependencies to FILE.d\" },"}, {"sha": "ad1b8261a1681f3d81b346bf2ba240ac47515821", "filename": "gcc/java/lang.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64aa33dd9c7353a00780a6c6a45c4f835adc2996/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=64aa33dd9c7353a00780a6c6a45c4f835adc2996", "patch": "@@ -113,6 +113,10 @@ int flag_use_divide_subroutine = 1;\n /* When non zero, generate code for the Boehm GC.  */\n int flag_use_boehm_gc = 0;\n \n+/* When non zero, assume the runtime uses a hash table to map an\n+   object to its synchronization structure.  */\n+int flag_hash_synchronization;\n+\n /* From gcc/flags.h, and indicates if exceptions are turned on or not.  */\n \n extern int flag_new_exceptions;\n@@ -130,7 +134,8 @@ lang_f_options[] =\n   {\"emit-class-file\", &flag_emit_class_files, 1},\n   {\"emit-class-files\", &flag_emit_class_files, 1},\n   {\"use-divide-subroutine\", &flag_use_divide_subroutine, 1},\n-  {\"use-boehm-gc\", &flag_use_boehm_gc, 1}\n+  {\"use-boehm-gc\", &flag_use_boehm_gc, 1},\n+  {\"hash-synchronization\", &flag_hash_synchronization, 1}\n };\n \n JCF *current_jcf;"}]}