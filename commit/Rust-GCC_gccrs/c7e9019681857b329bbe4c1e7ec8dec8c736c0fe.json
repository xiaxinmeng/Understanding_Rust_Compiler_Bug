{"sha": "c7e9019681857b329bbe4c1e7ec8dec8c736c0fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdlOTAxOTY4MTg1N2IzMjliYmU0YzFlN2VjOGRlYzhjNzM2YzBmZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-19T09:24:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-19T09:24:16Z"}, "message": "phiopt: Avoid -fcompare-debug bug in phiopt [PR94211]\n\nTwo years ago, I've added support for up to 2 simple preparation statements\nin value_replacement, but the\n-      && estimate_num_insns (assign, &eni_time_weights)\n+      && estimate_num_insns (bb_seq (middle_bb), &eni_time_weights)\nchange, meant that we compute the cost of all those statements rather than\njust the single assign that has been the single supported non-debug\nstatement in the bb before, doesn't do what I thought would do, gimple_seq\nis just gimple * and thus it can't be really overloaded depending on whether\nwe pass a single gimple * or a whole sequence.  Which means in the last\ntwo years it doesn't count all the statements, but only the first one.\nWith -g that happens to be a DEBUG_STMT, or it could be e.g. the first\npreparation statement which could be much cheaper than the actual assign.\n\n2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94211\n\t* tree-ssa-phiopt.c (value_replacement): Use estimate_num_insns_seq\n\tinstead of estimate_num_insns for bb_seq (middle_bb).  Rename\n\temtpy_or_with_defined_p variable to empty_or_with_defined_p, adjust\n\tall uses.\n\n\t* gcc.dg/pr94211.c: New test.", "tree": {"sha": "bb1e70608d6146d9b80733321b11e1d748864c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb1e70608d6146d9b80733321b11e1d748864c92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3280e4c0c98e103603bafc466ea49651fe0b7f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3280e4c0c98e103603bafc466ea49651fe0b7f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3280e4c0c98e103603bafc466ea49651fe0b7f2"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "259d4aed103915a105664f6b1defe975a7b92dba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7e9019681857b329bbe4c1e7ec8dec8c736c0fe", "patch": "@@ -1,3 +1,11 @@\n+2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94211\n+\t* tree-ssa-phiopt.c (value_replacement): Use estimate_num_insns_seq\n+\tinstead of estimate_num_insns for bb_seq (middle_bb).  Rename\n+\temtpy_or_with_defined_p variable to empty_or_with_defined_p, adjust\n+\tall uses.\n+\n 2020-03-19  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/94217"}, {"sha": "58f2e7e7c47b6e3095f18fde11f30050322f1170", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7e9019681857b329bbe4c1e7ec8dec8c736c0fe", "patch": "@@ -1,3 +1,8 @@\n+2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94211\n+\t* gcc.dg/pr94211.c: New test.\n+\n 2020-03-19  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/94216"}, {"sha": "3e160e457fe43bc8d9973668cc022071a615782b", "filename": "gcc/testsuite/gcc.dg/pr94211.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94211.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94211.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94211.c?ref=c7e9019681857b329bbe4c1e7ec8dec8c736c0fe", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/94211 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcompare-debug\" } */\n+\n+long\n+foo (long a, long b)\n+{\n+  if (__builtin_expect (b == 1, 1))\n+    return a;\n+  int e = a + 1;\n+  return a / b;\n+}"}, {"sha": "969311880a93519865c38fc47c2edd16162dad4f", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e9019681857b329bbe4c1e7ec8dec8c736c0fe/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=c7e9019681857b329bbe4c1e7ec8dec8c736c0fe", "patch": "@@ -1056,7 +1056,7 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n   gimple *cond;\n   edge true_edge, false_edge;\n   enum tree_code code;\n-  bool emtpy_or_with_defined_p = true;\n+  bool empty_or_with_defined_p = true;\n \n   /* If the type says honor signed zeros we cannot do this\n      optimization.  */\n@@ -1075,7 +1075,7 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t{\n \t  if (gimple_code (stmt) != GIMPLE_PREDICT\n \t      && gimple_code (stmt) != GIMPLE_NOP)\n-\t    emtpy_or_with_defined_p = false;\n+\t    empty_or_with_defined_p = false;\n \t  continue;\n \t}\n       /* Now try to adjust arg0 or arg1 according to the computation\n@@ -1085,7 +1085,7 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t     && jump_function_from_stmt (&arg0, stmt))\n \t    || (lhs == arg1\n \t\t&& jump_function_from_stmt (&arg1, stmt)))\n-\temtpy_or_with_defined_p = false;\n+\tempty_or_with_defined_p = false;\n     }\n \n   cond = last_stmt (cond_bb);\n@@ -1137,7 +1137,7 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n       /* If the middle basic block was empty or is defining the\n \t PHI arguments and this is a single phi where the args are different\n \t for the edges e0 and e1 then we can remove the middle basic block. */\n-      if (emtpy_or_with_defined_p\n+      if (empty_or_with_defined_p\n \t  && single_non_singleton_phi_for_edges (phi_nodes (gimple_bb (phi)),\n \t\t\t\t\t\t e0, e1) == phi)\n \t{\n@@ -1255,7 +1255,7 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n       && profile_status_for_fn (cfun) != PROFILE_ABSENT\n       && EDGE_PRED (middle_bb, 0)->probability < profile_probability::even ()\n       /* If assign is cheap, there is no point avoiding it.  */\n-      && estimate_num_insns (bb_seq (middle_bb), &eni_time_weights)\n+      && estimate_num_insns_seq (bb_seq (middle_bb), &eni_time_weights)\n \t >= 3 * estimate_num_insns (cond, &eni_time_weights))\n     return 0;\n "}]}