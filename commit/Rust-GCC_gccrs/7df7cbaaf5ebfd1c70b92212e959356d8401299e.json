{"sha": "7df7cbaaf5ebfd1c70b92212e959356d8401299e", "node_id": "C_kwDOANBUbNoAKDdkZjdjYmFhZjVlYmZkMWM3MGI5MjIxMmU5NTkzNTZkODQwMTI5OWU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-07T06:36:55Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T05:58:43Z"}, "message": "RISC-V: Add vwadd.w C API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vwadd_wv-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wv_tumu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vwadd_wx_tumu-3.c: New test.", "tree": {"sha": "99127f8094f782718d6e5cfd69c90bdc53b1f532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99127f8094f782718d6e5cfd69c90bdc53b1f532"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7df7cbaaf5ebfd1c70b92212e959356d8401299e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df7cbaaf5ebfd1c70b92212e959356d8401299e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7df7cbaaf5ebfd1c70b92212e959356d8401299e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df7cbaaf5ebfd1c70b92212e959356d8401299e/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2daeb10c609c9349734ca33ee980641ab73b5519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2daeb10c609c9349734ca33ee980641ab73b5519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2daeb10c609c9349734ca33ee980641ab73b5519"}], "stats": {"total": 3996, "additions": 3996, "deletions": 0}, "files": [{"sha": "4558fff96e7b0fa2ce32821be28209d336689fa8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4(vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2(vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1(vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2(vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4(vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8(vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2(vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1(vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2(vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4(vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8(vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1(vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2(vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4(vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8(vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "b96d779615374ceb3f1cc9cdb927393923e986a3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4(vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2(vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1(vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2(vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4(vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8(vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2(vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1(vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2(vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4(vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8(vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1(vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2(vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4(vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8(vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "d85197f199ef1b37330db07efc07136c3937167e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4(vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2(vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1(vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2(vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4(vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8(vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2(vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1(vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2(vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4(vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8(vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1(vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2(vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4(vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8(vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "c403cc722ed44fd4e89eaf71c4e805508fd073e0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_m-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_m-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_m(vbool64_t mask,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_m(vbool32_t mask,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_m(vbool16_t mask,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_m(vbool8_t mask,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_m(vbool4_t mask,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_m(vbool2_t mask,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_m(vbool64_t mask,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_m(vbool32_t mask,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_m(vbool16_t mask,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_m(vbool8_t mask,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_m(vbool4_t mask,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_m(vbool64_t mask,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_m(vbool32_t mask,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_m(vbool16_t mask,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_m(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_m(vbool8_t mask,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_m(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "495ae566ea96eeb3d62feae4c2ea0f931599b275", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_m-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_m-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_m(vbool64_t mask,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_m(vbool32_t mask,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_m(vbool16_t mask,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_m(vbool8_t mask,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_m(vbool4_t mask,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_m(vbool2_t mask,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_m(vbool64_t mask,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_m(vbool32_t mask,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_m(vbool16_t mask,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_m(vbool8_t mask,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_m(vbool4_t mask,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_m(vbool64_t mask,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_m(vbool32_t mask,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_m(vbool16_t mask,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_m(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_m(vbool8_t mask,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_m(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "184ddedb6b4b4fe64f3b966a641f989e17d2b62b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_m-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_m-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_m(vbool64_t mask,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_m(vbool32_t mask,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_m(vbool16_t mask,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_m(vbool8_t mask,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_m(vbool4_t mask,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_m(vbool2_t mask,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_m(vbool64_t mask,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_m(vbool32_t mask,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_m(vbool16_t mask,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_m(vbool8_t mask,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_m(vbool4_t mask,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_m(vbool64_t mask,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_m(vbool32_t mask,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_m(vbool16_t mask,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_m(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_m(vbool8_t mask,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_m(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "69b9f06a92a09747d03c4039a9bb487b9c2b4d4a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_mu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "58ba2f9db1b3114b27d09d62879726379677e205", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_mu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "59d559c438e8805aadd54999faa122a758d8911c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_mu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_mu-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "f178d78a0bc7dbcb274c60c9be554bdbcd8b1841", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_tu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_tu(vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_tu(vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_tu(vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_tu(vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_tu(vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_tu(vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_tu(vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_tu(vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_tu(vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_tu(vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_tu(vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_tu(vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "ad7928afe2b4b5cf40e427a2b625d883751c4217", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_tu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_tu(vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_tu(vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_tu(vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_tu(vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_tu(vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_tu(vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_tu(vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_tu(vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_tu(vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_tu(vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_tu(vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_tu(vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "0ad0a377932435cb82e305a7d372dc5c10f52aca", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_tu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tu-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_tu(vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_tu(vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_tu(vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_tu(vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_tu(vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_tu(vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_tu(vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_tu(vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_tu(vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_tu(vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_tu(vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_tu(vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 1 } } */"}, {"sha": "125a216cde669d20364b11ac8c1b54669d60877d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_tum-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "d983a7540e996689825f4caf566b8f980772fa5c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_tum-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "df5c2022e08eb24ab2d245de9971b3df6d4407f6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_tum-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tum-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "8cd2ee7d34a03af9bf4da9dc71f81cc31c1a8950", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_tumu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "047d149198db27724b4e14fca9938ccdcb5e4862", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_tumu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "a586d47a7b290efc97718f220299f60470a5a57c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wv_tumu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wv_tumu-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wv_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vint8mf8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wv_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vint8mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wv_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vint8mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wv_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vint8m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wv_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vint8m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wv_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vint8m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i16m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wv_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vint16mf4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32mf2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wv_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vint16mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wv_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vint16m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wv_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vint16m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wv_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vint16m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i32m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wv_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vint32mf2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m1_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wv_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vint32m1_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m2_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wv_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vint32m2_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m4_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wv_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vint32m4_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wv_i64m8_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "71f255366f4ebca1bd6bb0ed471caa7583e1cbba", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4(op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2(op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1(op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2(op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4(op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8(op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2(op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1(op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2(op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4(op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8(op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1(op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2(op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4(op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8(op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "18ea948a309fb183512bc23bb2a07e5f27e6af3e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4(op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2(op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1(op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2(op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4(op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8(op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2(op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1(op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2(op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4(op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8(op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1(op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2(op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4(op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8(op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "cb893556580cd98fe580d10d3828eb8480fbc264", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4(vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4(op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2(vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2(op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1(vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1(op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2(vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2(op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4(vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4(op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8(vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8(op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2(vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2(op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1(vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1(op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2(vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2(op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4(vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4(op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8(vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8(op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1(vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1(op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2(vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2(op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4(vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4(op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8(vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8(op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "7eed8b947245d731f9c5d01270bbb88a5e3a38c5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_m-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_m-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_m(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_m(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_m(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_m(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_m(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_m(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_m(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_m(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_m(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_m(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_m(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_m(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_m(mask,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "1c1517c9f095d7a6fef5db8dfba1a1cbc0f10f09", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_m-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_m-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_m(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_m(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_m(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_m(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_m(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_m(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_m(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_m(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_m(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_m(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_m(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_m(mask,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_m(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_m(mask,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "677454726e031f98c35073be0428750a1daa3fed", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_m-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_m-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_m(vbool64_t mask,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_m(vbool32_t mask,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_m(vbool16_t mask,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_m(vbool8_t mask,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_m(vbool4_t mask,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_m(vbool2_t mask,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_m(vbool64_t mask,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_m(vbool32_t mask,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_m(vbool16_t mask,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_m(vbool8_t mask,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_m(vbool4_t mask,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_m(vbool64_t mask,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_m(vbool32_t mask,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_m(vbool16_t mask,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_m(mask,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_m(vbool8_t mask,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_m(mask,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "9ba87c4ae7579b12f9aa47895dfac3e15f36c198", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_mu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_mu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "c2c2b1e8b4d0a143b4d188cae73a69075ed60e34", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_mu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_mu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "190eaf7dec6e7ba21648abb2b352e07ca66ee92e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_mu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_mu-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_mu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "10e09616b874a1b968047f763ace6e33479cc551", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_tu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_tu(merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "7ae651a0920517562ed7b013abaf8b27dbed7412", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_tu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_tu(merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "39348df8221bab088e306d18139cc00a70d2480c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_tu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tu-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_tu(vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_tu(vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_tu(vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_tu(vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_tu(vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_tu(vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_tu(vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_tu(vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_tu(vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_tu(vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_tu(vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_tu(vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_tu(vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_tu(vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_tu(vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_tu(merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+} 1 } } */"}, {"sha": "23d969a8d34281dafb2fe38374aa9dbef493a209", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_tum-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_tum(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "3f5378cea8c729d5660ff7ce6a9b8e884de6a0a9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_tum-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_tum(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "6998b8179b95e5b802a85730b49f62e57d63027e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_tum-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tum-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_tum(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "d7993a490fdfb251c0173d2f2b8b4669a2f84c0b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_tumu-1.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-1.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_tumu(mask,merge,op1,0xAA,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "46867b39f1e6a8308ffe35594917df236c2a82bb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_tumu-2.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-2.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_tumu(mask,merge,op1,0xAA,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}, {"sha": "57b6945772c8c516e0ed09e338eefa18748625b5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vwadd_wx_tumu-3.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df7cbaaf5ebfd1c70b92212e959356d8401299e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvwadd_wx_tumu-3.c?ref=7df7cbaaf5ebfd1c70b92212e959356d8401299e", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint16mf4_t test___riscv_vwadd_wx_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vwadd_wx_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16mf2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vwadd_wx_i16m1_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m1_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vwadd_wx_i16m2_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vwadd_wx_i16m4_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vwadd_wx_i16m8_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i16m8_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vwadd_wx_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32mf2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vwadd_wx_i32m1_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m1_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vwadd_wx_i32m2_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vwadd_wx_i32m4_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vwadd_wx_i32m8_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i32m8_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vwadd_wx_i64m1_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m1_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vwadd_wx_i64m2_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m2_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vwadd_wx_i64m4_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m4_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vwadd_wx_i64m8_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vwadd_wx_i64m8_tumu(mask,merge,op1,0xAA,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vwadd\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t} 1 } } */"}]}