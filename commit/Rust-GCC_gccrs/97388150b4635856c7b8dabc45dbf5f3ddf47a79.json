{"sha": "97388150b4635856c7b8dabc45dbf5f3ddf47a79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTczODgxNTBiNDYzNTg1NmM3YjhkYWJjNDVkYmY1ZjNkZGY0N2E3OQ==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2006-11-01T06:23:12Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2006-11-01T06:23:12Z"}, "message": "target.h (targetm.cxx.use_atexit_for_cxa_atexit): New target hook.\n\n\t* target.h (targetm.cxx.use_atexit_for_cxa_atexit): New target\n\thook.\n\t* target-def.h: (TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT): Define\n\tdefault.\n\t* config/i386/mingw32.h (TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT):\n\tOverride default.\n\t* doc/tm.texi (TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT): Document.\n\t* configure.ac (use_cxa_atexit): As a special case, don't test\n\tfor libc definition of __cxa_atexit on mingw32\n\t* configure: Regenerate.\n\t* config.gcc (i[34567]86-pc-mingw32): Default to\n\tenable__cxa_atexit=yes.\n\ncp\n\n\t* decl.c (get_atexit_node): Reference atexit, not __cxa_exit.\n\tif targetm.cxx.use_atexit_for cxa_atexit.\n\t(start_cleanup_fn): Likewise.\n\t(register_dtor_fn): Likewise.\n\nFrom-SVN: r118371", "tree": {"sha": "a6f02d60df84edc128eac9c800531bb6b5dc6bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6f02d60df84edc128eac9c800531bb6b5dc6bbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97388150b4635856c7b8dabc45dbf5f3ddf47a79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97388150b4635856c7b8dabc45dbf5f3ddf47a79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97388150b4635856c7b8dabc45dbf5f3ddf47a79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97388150b4635856c7b8dabc45dbf5f3ddf47a79/comments", "author": null, "committer": null, "parents": [{"sha": "d5523ce18d221e06e62cf2ef506fb5ffffa4fd2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5523ce18d221e06e62cf2ef506fb5ffffa4fd2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5523ce18d221e06e62cf2ef506fb5ffffa4fd2d"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "6332e06d05c597585dc48f1ccc95d84a3ef9139c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97388150b4635856c7b8dabc45dbf5f3ddf47a79", "patch": "@@ -1,3 +1,18 @@\n+2006-11-01  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* target.h (targetm.cxx.use_atexit_for_cxa_atexit): New target\n+\thook.\n+\t* target-def.h: (TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT): Define\n+\tdefault.\n+\t* config/i386/mingw32.h (TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT):\n+\tOverride default.\n+\t* doc/tm.texi (TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT): Document.\n+\t* configure.ac (use_cxa_atexit): As a special case, don't test\n+\tfor libc definition of __cxa_atexit on mingw32\n+\t* configure: Regenerate.\n+\t* config.gcc (i[34567]86-pc-mingw32): Default to\n+\tenable__cxa_atexit=yes.\n+\n 2006-11-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.def (gamma, lgamma): Use ATTR_MATHFN_FPROUNDING_STORE."}, {"sha": "9ab3a659c6cb5a65e0569d417090b0e1658681bf", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=97388150b4635856c7b8dabc45dbf5f3ddf47a79", "patch": "@@ -1310,6 +1310,7 @@ i[34567]86-*-mingw32*)\n \textra_options=\"${extra_options} i386/cygming.opt\"\n \textra_objs=\"winnt.o winnt-stubs.o\"\n \tcxx_target_objs=winnt-cxx.o\n+\tdefault_use_cxa_atexit=yes\n \tcase ${enable_threads} in\n \t  \"\" | yes | win32)\n \t  thread_file='win32'"}, {"sha": "28c2fb9fbb8e312d4f6d5d91cf768e1d31fe9b01", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=97388150b4635856c7b8dabc45dbf5f3ddf47a79", "patch": "@@ -112,3 +112,7 @@ do {\t\t\t\t\t\t         \\\n /* mingw32 uses the  -mthreads option to enable thread support.  */\n #undef GOMP_SELF_SPECS\n #define GOMP_SELF_SPECS \"%{fopenmp: -mthreads}\"\n+\n+/* mingw32 atexit function is safe to use in shared libraries.  Use it\n+   to register C++ static destructors.  */\n+#define TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT hook_bool_void_true"}, {"sha": "49535d590f7fd69fbef8561620fe46d4156f420b", "filename": "gcc/configure", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=97388150b4635856c7b8dabc45dbf5f3ddf47a79", "patch": "@@ -12428,7 +12428,14 @@ use_cxa_atexit=no\n if test x$enable___cxa_atexit = xyes || \\\n    test x$enable___cxa_atexit = x -a x$default_use_cxa_atexit = xyes; then\n   if test x$host = x$target; then\n-    echo \"$as_me:$LINENO: checking for __cxa_atexit\" >&5\n+    case $host in\n+      # mingw32 doesn't have __cxa_atexit but uses atexit registration\n+      # keyed to flag_use_cxa_atexit\n+      *-*-mingw32*)\n+\tuse_cxa_atexit=yes\n+\t;;\n+      *)\n+\techo \"$as_me:$LINENO: checking for __cxa_atexit\" >&5\n echo $ECHO_N \"checking for __cxa_atexit... $ECHO_C\" >&6\n if test \"${ac_cv_func___cxa_atexit+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n@@ -12524,6 +12531,8 @@ else\n   echo \"__cxa_atexit can't be enabled on this target\"\n fi\n \n+\t::\n+    esac\n   else\n     # We can't check for __cxa_atexit when building a cross, so assume\n     # it is available"}, {"sha": "7b571385ce4df9f11cadefbabe6610931e17555c", "filename": "gcc/configure.ac", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=97388150b4635856c7b8dabc45dbf5f3ddf47a79", "patch": "@@ -1429,8 +1429,17 @@ use_cxa_atexit=no\n if test x$enable___cxa_atexit = xyes || \\\n    test x$enable___cxa_atexit = x -a x$default_use_cxa_atexit = xyes; then\n   if test x$host = x$target; then\n-    AC_CHECK_FUNC(__cxa_atexit,[use_cxa_atexit=yes],\n-\t[echo \"__cxa_atexit can't be enabled on this target\"])\n+    case $host in\n+      # mingw32 doesn't have __cxa_atexit but uses atexit registration\n+      # keyed to flag_use_cxa_atexit\n+      *-*-mingw32*)\n+\tuse_cxa_atexit=yes\n+\t;;\n+      *)\n+\tAC_CHECK_FUNC(__cxa_atexit,[use_cxa_atexit=yes],\n+\t  [echo \"__cxa_atexit can't be enabled on this target\"])\n+\t::\n+    esac\n   else\n     # We can't check for __cxa_atexit when building a cross, so assume\n     # it is available "}, {"sha": "6e30ada48737594d57ceed29243d810996cbc6e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=97388150b4635856c7b8dabc45dbf5f3ddf47a79", "patch": "@@ -1,3 +1,10 @@\n+2006-11-01  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* decl.c (get_atexit_node): Reference atexit, not __cxa_exit.\n+\tif targetm.cxx.use_atexit_for cxa_atexit.\n+\t(start_cleanup_fn): Likewise.\n+\t(register_dtor_fn): Likewise.\n+\n 2006-09-25  Geoffrey Keating  <geoffk@apple.com>\n \n \t* decl2.c (cp_write_global_declarations): Rename from"}, {"sha": "cc74908c152c27acf073fa95454902e46b0d5edb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=97388150b4635856c7b8dabc45dbf5f3ddf47a79", "patch": "@@ -5348,7 +5348,7 @@ get_atexit_node (void)\n   if (atexit_node)\n     return atexit_node;\n \n-  if (flag_use_cxa_atexit)\n+  if (flag_use_cxa_atexit && !targetm.cxx.use_atexit_for_cxa_atexit ())\n     {\n       /* The declaration for `__cxa_atexit' is:\n \n@@ -5436,6 +5436,8 @@ start_cleanup_fn (void)\n   tree parmtypes;\n   tree fntype;\n   tree fndecl;\n+  bool use_cxa_atexit = flag_use_cxa_atexit\n+\t\t\t&& !targetm.cxx.use_atexit_for_cxa_atexit ();\n \n   push_to_top_level ();\n \n@@ -5448,7 +5450,7 @@ start_cleanup_fn (void)\n      We'll just ignore it.  After we implement the new calling\n      convention for destructors, we can eliminate the use of\n      additional cleanup functions entirely in the -fnew-abi case.  */\n-  if (flag_use_cxa_atexit)\n+  if (use_cxa_atexit)\n     parmtypes = tree_cons (NULL_TREE, ptr_type_node, parmtypes);\n   /* Build the function type itself.  */\n   fntype = build_function_type (void_type_node, parmtypes);\n@@ -5468,7 +5470,7 @@ start_cleanup_fn (void)\n   DECL_DECLARED_INLINE_P (fndecl) = 1;\n   DECL_INTERFACE_KNOWN (fndecl) = 1;\n   /* Build the parameter.  */\n-  if (flag_use_cxa_atexit)\n+  if (use_cxa_atexit)\n     {\n       tree parmdecl;\n \n@@ -5537,7 +5539,7 @@ register_dtor_fn (tree decl)\n   cxx_mark_addressable (cleanup);\n   mark_used (cleanup);\n   cleanup = build_unary_op (ADDR_EXPR, cleanup, 0);\n-  if (flag_use_cxa_atexit)\n+  if (flag_use_cxa_atexit && !targetm.cxx.use_atexit_for_cxa_atexit ())\n     {\n       args = tree_cons (NULL_TREE,\n \t\t\tbuild_unary_op (ADDR_EXPR, get_dso_handle_node (), 0),"}, {"sha": "c4dc052ddbe3f3fcc0969b6b5dc487d26784f55f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=97388150b4635856c7b8dabc45dbf5f3ddf47a79", "patch": "@@ -8971,6 +8971,14 @@ should be used to register static destructors when @option{-fuse-cxa-atexit}\n is in effect.  The default is to return false to use @code{__cxa_atexit}.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT (void)\n+This hook returns true if the target @code{atexit} function can be used\n+in the same manner as @code{__cxa_atexit} to register C++ static\n+destructors. This requires that @code{atexit}-registered functions in\n+shared libraries are run in the correct order when the libraries are\n+unloaded. The default is to return false.\n+@end deftypefn\n+\n @deftypefn {Target Hook} void TARGET_CXX_ADJUST_CLASS_AT_DEFINITION (tree @var{type})\n @var{type} is a C++ class (i.e., RECORD_TYPE or UNION_TYPE) that has just been\n defined.  Use this hook to make adjustments to the class (eg, tweak"}, {"sha": "82e711a79c7677f6adaa901ed1cbb2cf381ebeae", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=97388150b4635856c7b8dabc45dbf5f3ddf47a79", "patch": "@@ -583,6 +583,10 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_CXX_USE_AEABI_ATEXIT hook_bool_void_false\n #endif\n \n+#ifndef TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT\n+#define TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT hook_bool_void_false\n+#endif\n+\n #ifndef TARGET_CXX_ADJUST_CLASS_AT_DEFINITION\n #define TARGET_CXX_ADJUST_CLASS_AT_DEFINITION hook_void_tree\n #endif\n@@ -599,6 +603,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n     TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY,\t\\\n     TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT,        \\\n     TARGET_CXX_USE_AEABI_ATEXIT,\t\t\\\n+    TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT,\t\\\n     TARGET_CXX_ADJUST_CLASS_AT_DEFINITION\t\\\n   }\n "}, {"sha": "b193b624f39ee43488a221f500fe8b2ddbd040fb", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97388150b4635856c7b8dabc45dbf5f3ddf47a79/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=97388150b4635856c7b8dabc45dbf5f3ddf47a79", "patch": "@@ -776,6 +776,9 @@ struct gcc_target\n     /* Returns true if __aeabi_atexit should be used to register static\n        destructors.  */\n     bool (*use_aeabi_atexit) (void);\n+    /* Returns true if target may use atexit in the same manner as\n+    __cxa_atexit  to register static destructors.  */\n+    bool (*use_atexit_for_cxa_atexit) (void);\n     /* TYPE is a C++ class (i.e., RECORD_TYPE or UNION_TYPE) that\n        has just been defined.  Use this hook to make adjustments to the\n        class  (eg, tweak visibility or perform any other required"}]}