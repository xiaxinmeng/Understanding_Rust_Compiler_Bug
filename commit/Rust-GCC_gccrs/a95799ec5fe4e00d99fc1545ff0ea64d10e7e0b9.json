{"sha": "a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk1Nzk5ZWM1ZmU0ZTAwZDk5ZmMxNTQ1ZmYwZWE2NGQxMGU3ZTBiOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-06-16T02:09:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-06-16T02:09:10Z"}, "message": "re PR c++/27640 (segfault, related to constructor instantiation and virtual base case and templates and new operator)\n\n\tPR c++/27640\n\t* pt.c (instantiate_template): Set processing_template_decl to\n\tzero while performing substitutions.\n\tPR c++/27640\n\t* g++.dg/template/ctor7.C: New test.\n\nFrom-SVN: r114701", "tree": {"sha": "462bb323dcfbee6531d4cdcd154b78f02a6234de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/462bb323dcfbee6531d4cdcd154b78f02a6234de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9/comments", "author": null, "committer": null, "parents": [{"sha": "9f84b5ae284ca20b0e62d5d848e9f033471582db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f84b5ae284ca20b0e62d5d848e9f033471582db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f84b5ae284ca20b0e62d5d848e9f033471582db"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "f80d362db887253d2917f11dc1071f8a352228db", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9", "patch": "@@ -1,3 +1,9 @@\n+2006-06-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27640\n+\t* pt.c (instantiate_template): Set processing_template_decl to\n+\tzero while performing substitutions.\n+\n 2006-06-14  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/27665"}, {"sha": "d25ea79fae8c136e315ea989ceca52f3fb90f89a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9", "patch": "@@ -9233,6 +9233,7 @@ instantiate_template (tree tmpl, tree targ_ptr, tsubst_flags_t complain)\n   tree fndecl;\n   tree gen_tmpl;\n   tree spec;\n+  HOST_WIDE_INT saved_processing_template_decl;\n \n   if (tmpl == error_mark_node)\n     return error_mark_node;\n@@ -9292,9 +9293,17 @@ instantiate_template (tree tmpl, tree targ_ptr, tsubst_flags_t complain)\n      deferring all checks until we have the FUNCTION_DECL.  */\n   push_deferring_access_checks (dk_deferred);\n \n-  /* Substitute template parameters.  */\n+  /* Although PROCESSING_TEMPLATE_DECL may be true at this point\n+     (because, for example, we have encountered a non-dependent\n+     function call in the body of a template function must determine\n+     which of several overloaded functions will be called), within the\n+     instantiation itself we are not processing a template.  */  \n+  saved_processing_template_decl = processing_template_decl;\n+  processing_template_decl = 0;\n+  /* Substitute template parameters to obtain the specialization.  */\n   fndecl = tsubst (DECL_TEMPLATE_RESULT (gen_tmpl),\n \t\t   targ_ptr, complain, gen_tmpl);\n+  processing_template_decl = saved_processing_template_decl;\n   if (fndecl == error_mark_node)\n     return error_mark_node;\n "}, {"sha": "9f056c38cd5dbdc6cab5467ab197e2e9d24e8f42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9", "patch": "@@ -1,3 +1,8 @@\n+2006-06-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27640\n+\t* g++.dg/template/ctor7.C: New test.\n+\n 2006-06-15  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/vmx/pr27842.c: Remove dg-do directive; use default."}, {"sha": "ee65172fe75b2384e3ff51dde5946dba3075f3da", "filename": "gcc/testsuite/g++.dg/template/ctor7.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fctor7.C?ref=a95799ec5fe4e00d99fc1545ff0ea64d10e7e0b9", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/27640\n+\n+template < class T > struct refcounted : \n+virtual T\n+{\n+  template < class A1 > refcounted (const A1 & a1) : T () { }\n+};\n+struct nfsserv {};\n+template < class T >\n+void\n+sfsserver_cache_alloc (int *ns)\n+{\n+  new refcounted < nfsserv > (*ns);\n+}\n+void\n+usage ()\n+{\n+  sfsserver_cache_alloc < int > ( 0);\n+}"}]}