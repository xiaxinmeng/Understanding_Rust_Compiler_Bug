{"sha": "b79d521356bff7a7db09804fb97c666013760665", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc5ZDUyMTM1NmJmZjdhN2RiMDk4MDRmYjk3YzY2NjAxMzc2MDY2NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-12-24T08:45:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-24T08:45:59Z"}, "message": "re PR debug/5163 (Internal compiler error in add_abstract_origin_attribute, at dwarf2out.c:9296)\n\n        PR c/5163:\n        * c-decl.c (duplicate_decls): As needed, set DECL_INLINE when\n        we have a function body associated.  Minor cleanups.\n        (grokdeclarator): Do not set DECL_INLINE without a function body.\n\n        * gcc.dg/20011223-1.c: New.\n        * gcc.dg/inline-1.c: New.\n\nFrom-SVN: r48302", "tree": {"sha": "0760756073317f0da8196fdf280c98f1a6b41166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0760756073317f0da8196fdf280c98f1a6b41166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b79d521356bff7a7db09804fb97c666013760665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b79d521356bff7a7db09804fb97c666013760665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b79d521356bff7a7db09804fb97c666013760665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b79d521356bff7a7db09804fb97c666013760665/comments", "author": null, "committer": null, "parents": [{"sha": "6b98090114cf344b8859c0f07053abcad84e6761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b98090114cf344b8859c0f07053abcad84e6761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b98090114cf344b8859c0f07053abcad84e6761"}], "stats": {"total": 101, "additions": 86, "deletions": 15}, "files": [{"sha": "c526245a109b48960564bef70dfcb456cccda507", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79d521356bff7a7db09804fb97c666013760665/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79d521356bff7a7db09804fb97c666013760665/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b79d521356bff7a7db09804fb97c666013760665", "patch": "@@ -1,3 +1,10 @@\n+2001-12-23  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c/5163:\n+\t* c-decl.c (duplicate_decls): As needed, set DECL_INLINE when\n+\twe have a function body associated.  Minor cleanups.\n+\t(grokdeclarator): Do not set DECL_INLINE without a function body.\n+\n 2001-12-23  Richard Henderson  <rth@redhat.com>\n \n \t* stmt.c (resolve_operand_names): Handle operand modifiers."}, {"sha": "495425b2994a03a876c3c3c5cca53df57be98cbb", "filename": "gcc/c-decl.c", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79d521356bff7a7db09804fb97c666013760665/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79d521356bff7a7db09804fb97c666013760665/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b79d521356bff7a7db09804fb97c666013760665", "patch": "@@ -1974,10 +1974,8 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t  /* If either decl says `inline', this fn is inline,\n \t     unless its definition was passed already.  */\n \t  if (DECL_DECLARED_INLINE_P (newdecl)\n-\t      && DECL_DECLARED_INLINE_P (olddecl) == 0)\n-\t    DECL_DECLARED_INLINE_P (olddecl) = 1;\n-\n-\t  DECL_DECLARED_INLINE_P (newdecl) = DECL_DECLARED_INLINE_P (olddecl);\n+\t      || DECL_DECLARED_INLINE_P (olddecl))\n+\t    DECL_DECLARED_INLINE_P (newdecl) = 1;\n \n \t  DECL_UNINLINABLE (newdecl) = DECL_UNINLINABLE (olddecl)\n \t    = (DECL_UNINLINABLE (newdecl) || DECL_UNINLINABLE (olddecl));\n@@ -2003,9 +2001,8 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t      DECL_FUNCTION_CODE (newdecl) = DECL_FUNCTION_CODE (olddecl);\n \t    }\n \t}\n+\n       /* Also preserve various other info from the definition.  */\n-      else if (! new_is_definition)\n-\tDECL_NUM_STMTS (newdecl) = DECL_NUM_STMTS (olddecl);\n       if (! new_is_definition)\n \t{\n \t  DECL_RESULT (newdecl) = DECL_RESULT (olddecl);\n@@ -2016,12 +2013,27 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t    DECL_INITIAL (newdecl) = DECL_INITIAL (olddecl);\n \t  DECL_SAVED_INSNS (newdecl) = DECL_SAVED_INSNS (olddecl);\n \t  DECL_SAVED_TREE (newdecl) = DECL_SAVED_TREE (olddecl);\n+\t  DECL_NUM_STMTS (newdecl) = DECL_NUM_STMTS (olddecl);\n \t  DECL_ARGUMENTS (newdecl) = DECL_ARGUMENTS (olddecl);\n-\t  if (DECL_INLINE (newdecl))\n-\t    DECL_ABSTRACT_ORIGIN (newdecl)\n-\t      = (different_binding_level\n-\t\t ? DECL_ORIGIN (olddecl)\n-\t\t : DECL_ABSTRACT_ORIGIN (olddecl));\n+\n+\t  /* Set DECL_INLINE on the declaration if we've got a body\n+\t     from which to instantiate.  */\n+\t  if (DECL_INLINE (olddecl) && ! DECL_UNINLINABLE (newdecl))\n+\t    {\n+\t      DECL_INLINE (newdecl) = 1;\n+\t      DECL_ABSTRACT_ORIGIN (newdecl)\n+\t\t= (different_binding_level\n+\t\t   ? DECL_ORIGIN (olddecl)\n+\t\t   : DECL_ABSTRACT_ORIGIN (olddecl));\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  /* If a previous declaration said inline, mark the\n+\t     definition as inlinable.  */\n+\t  if (DECL_DECLARED_INLINE_P (newdecl)\n+\t      && ! DECL_UNINLINABLE (newdecl))\n+\t    DECL_INLINE (newdecl) = 1;\n \t}\n     }\n   if (different_binding_level)\n@@ -5049,16 +5061,23 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \telse if (inlinep)\n \t  {\n \t    /* Assume that otherwise the function can be inlined.  */\n-\t    DECL_INLINE (decl) = 1;\n \t    DECL_DECLARED_INLINE_P (decl) = 1;\n \n-\t    if (specbits & (1 << (int) RID_EXTERN))\n-\t      current_extern_inline = 1;\n+\t    /* Do not mark bare declarations as DECL_INLINE.  Doing so\n+\t       in the presence of multiple declarations can result in\n+\t       the abstract origin pointing between the declarations,\n+\t       which will confuse dwarf2out.  */\n+\t    if (initialized)\n+\t      {\n+\t\tDECL_INLINE (decl) = 1;\n+\t\tif (specbits & (1 << (int) RID_EXTERN))\n+\t\t  current_extern_inline = 1;\n+\t      }\n \t  }\n \t/* If -finline-functions, assume it can be inlined.  This does\n \t   two things: let the function be deferred until it is actually\n \t   needed, and let dwarf2 know that the function is inlinable.  */\n-\telse if (flag_inline_trees == 2)\n+\telse if (flag_inline_trees == 2 && initialized)\n \t  {\n \t    DECL_INLINE (decl) = 1;\n \t    DECL_DECLARED_INLINE_P (decl) = 0;"}, {"sha": "c2bb361570d8c3050b056fc12f06baa822f00e12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79d521356bff7a7db09804fb97c666013760665/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79d521356bff7a7db09804fb97c666013760665/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b79d521356bff7a7db09804fb97c666013760665", "patch": "@@ -1,3 +1,8 @@\n+2001-12-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/20011223-1.c: New.\n+\t* gcc.dg/inline-1.c: New.\n+\n 2001-12-23  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/asm-4.c: Test operand modifiers."}, {"sha": "53f7f208f5f4ae177d09483f5a2b34f0b194ec98", "filename": "gcc/testsuite/gcc.dg/20011223-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79d521356bff7a7db09804fb97c666013760665/gcc%2Ftestsuite%2Fgcc.dg%2F20011223-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79d521356bff7a7db09804fb97c666013760665/gcc%2Ftestsuite%2Fgcc.dg%2F20011223-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20011223-1.c?ref=b79d521356bff7a7db09804fb97c666013760665", "patch": "@@ -0,0 +1,12 @@\n+/* Origin: PR c/5163 from aj@suse.de.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -g\" } */\n+\n+extern int bar (int);\n+\n+int\n+foo (void)\n+{\n+  extern int bar (int);\n+  return bar (5);\n+}"}, {"sha": "17a9a2f7243dacb95c8ab03f039a75aecf7883f3", "filename": "gcc/testsuite/gcc.dg/inline-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b79d521356bff7a7db09804fb97c666013760665/gcc%2Ftestsuite%2Fgcc.dg%2Finline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b79d521356bff7a7db09804fb97c666013760665/gcc%2Ftestsuite%2Fgcc.dg%2Finline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-1.c?ref=b79d521356bff7a7db09804fb97c666013760665", "patch": "@@ -0,0 +1,28 @@\n+/* Verify that DECL_INLINE gets copied between DECLs properly.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-final { scan-assembler-not \"xyzzy\" } } */\n+\n+/* Test that declaration followed by definition inlines.  */\n+static inline int xyzzy0 (int);\n+static int xyzzy0 (int x) { return x; }\n+int test0 (void)\n+{\n+  return xyzzy0 (5);\n+}\n+\n+/* Test that definition following declaration inlines.  */\n+static int xyzzy1 (int);\n+static inline int xyzzy1 (int x) { return x; }\n+int test1 (void)\n+{\n+  return xyzzy1 (5);\n+}\n+\n+/* Test that redeclaration inside a function body inlines.  */\n+extern inline int xyzzy2 (int x) { return x; }\n+int test2 (void)\n+{\n+  extern int xyzzy2 (int);\n+  return xyzzy2 (5);\n+}"}]}