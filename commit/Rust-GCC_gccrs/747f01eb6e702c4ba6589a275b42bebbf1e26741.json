{"sha": "747f01eb6e702c4ba6589a275b42bebbf1e26741", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ3ZjAxZWI2ZTcwMmM0YmE2NTg5YTI3NWI0MmJlYmJmMWUyNjc0MQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-21T10:24:20Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-26T08:03:54Z"}, "message": "d: Move lowering of each tree node to separate functions\n\ngcc/d/ChangeLog:\n\n\t* d-gimplify.cc (d_gimplify_expr): Move lowering of each tree node to\n\tseparate functions.\n\t(d_gimplify_modify_expr): New function.\n\t(d_gimplify_addr_expr): New function.\n\t(d_gimplify_call_expr): New function.\n\t(d_gimplify_unsigned_rshift_expr): New function.", "tree": {"sha": "a1b023e6f4c5e97a32c7f79ba178f97100662f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1b023e6f4c5e97a32c7f79ba178f97100662f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/747f01eb6e702c4ba6589a275b42bebbf1e26741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747f01eb6e702c4ba6589a275b42bebbf1e26741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/747f01eb6e702c4ba6589a275b42bebbf1e26741", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747f01eb6e702c4ba6589a275b42bebbf1e26741/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e966361c8258d07ef78948d0110b27f2a5a4c69e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e966361c8258d07ef78948d0110b27f2a5a4c69e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e966361c8258d07ef78948d0110b27f2a5a4c69e"}], "stats": {"total": 210, "additions": 119, "deletions": 91}, "files": [{"sha": "569e82917f847f16a0865d5c26c8101c1a7ed0f3", "filename": "gcc/d/d-gimplify.cc", "status": "modified", "additions": 119, "deletions": 91, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747f01eb6e702c4ba6589a275b42bebbf1e26741/gcc%2Fd%2Fd-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747f01eb6e702c4ba6589a275b42bebbf1e26741/gcc%2Fd%2Fd-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-gimplify.cc?ref=747f01eb6e702c4ba6589a275b42bebbf1e26741", "patch": "@@ -62,119 +62,147 @@ empty_modify_p (tree type, tree op)\n   return empty_aggregate_p (type);\n }\n \n-/* Implements the lang_hooks.gimplify_expr routine for language D.\n-   Do gimplification of D specific expression trees in EXPR_P.  */\n+/* Gimplify assignment from an INIT_EXPR or MODIFY_EXPR.  */\n \n-int\n-d_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n-\t\t gimple_seq *post_p ATTRIBUTE_UNUSED)\n+static gimplify_status\n+d_gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n {\n-  tree_code code = TREE_CODE (*expr_p);\n-  enum gimplify_status ret = GS_UNHANDLED;\n-  tree op0, op1;\n-  tree type;\n+  tree op0 = TREE_OPERAND (*expr_p, 0);\n+  tree op1 = TREE_OPERAND (*expr_p, 1);\n \n-  switch (code)\n+  if (error_operand_p (op0) || error_operand_p (op1))\n+    return GS_UNHANDLED;\n+\n+  /* Remove any copies of empty aggregates.  */\n+  if (empty_modify_p (TREE_TYPE (op0), op1))\n     {\n-    case INIT_EXPR:\n-    case MODIFY_EXPR:\n-      op0 = TREE_OPERAND (*expr_p, 0);\n-      op1 = TREE_OPERAND (*expr_p, 1);\n+      gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n+\t\t     is_gimple_lvalue, fb_lvalue);\n \n-      if (!error_operand_p (op0) && !error_operand_p (op1)\n-\t  && (AGGREGATE_TYPE_P (TREE_TYPE (op0))\n-\t      || AGGREGATE_TYPE_P (TREE_TYPE (op1)))\n-\t  && !useless_type_conversion_p (TREE_TYPE (op1), TREE_TYPE (op0)))\n-\t{\n-\t  /* If the back end isn't clever enough to know that the lhs and rhs\n-\t     types are the same, add an explicit conversion.  */\n-\t  TREE_OPERAND (*expr_p, 1) = build1 (VIEW_CONVERT_EXPR,\n-\t\t\t\t\t      TREE_TYPE (op0), op1);\n-\t  ret = GS_OK;\n-\t}\n-      else if (empty_modify_p (TREE_TYPE (op0), op1))\n-\t{\n-\t  /* Remove any copies of empty aggregates.  */\n-\t  gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n-\t\t\t is_gimple_lvalue, fb_lvalue);\n+      if (TREE_SIDE_EFFECTS (op1))\n+\tgimplify_and_add (op1, pre_p);\n \n-\t  if (TREE_SIDE_EFFECTS (op1))\n-\t    gimplify_and_add (op1, pre_p);\n+      *expr_p = TREE_OPERAND (*expr_p, 0);\n+      return GS_OK;\n+    }\n \n-\t  *expr_p = TREE_OPERAND (*expr_p, 0);\n-\t  ret = GS_OK;\n-\t}\n-      break;\n+  /* If the back end isn't clever enough to know that the lhs and rhs\n+     types are the same, add an explicit conversion.  */\n+  if ((AGGREGATE_TYPE_P (TREE_TYPE (op0)) || AGGREGATE_TYPE_P (TREE_TYPE (op1)))\n+      && !useless_type_conversion_p (TREE_TYPE (op1), TREE_TYPE (op0)))\n+    {\n+      TREE_OPERAND (*expr_p, 1) = build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t  TREE_TYPE (op0), op1);\n+      return GS_OK;\n+    }\n \n-    case ADDR_EXPR:\n-      op0 = TREE_OPERAND (*expr_p, 0);\n-      /* Constructors are not lvalues, so make them one.  */\n-      if (TREE_CODE (op0) == CONSTRUCTOR)\n+  return GS_UNHANDLED;\n+}\n+\n+/* Gimplify an ADDR_EXPR node.  */\n+\n+static gimplify_status\n+d_gimplify_addr_expr (tree *expr_p)\n+{\n+  tree op0 = TREE_OPERAND (*expr_p, 0);\n+  /* Constructors are not lvalues, so make them one.  */\n+  if (TREE_CODE (op0) == CONSTRUCTOR)\n+    {\n+      TREE_OPERAND (*expr_p, 0) = force_target_expr (op0);\n+      return GS_OK;\n+    }\n+\n+  return GS_UNHANDLED;\n+}\n+\n+/* Gimplify a CALL_EXPR node.  */\n+\n+static gimplify_status\n+d_gimplify_call_expr (tree *expr_p, gimple_seq *pre_p)\n+{\n+  if (CALL_EXPR_ARGS_ORDERED (*expr_p))\n+    {\n+      /* Strictly evaluate all arguments from left to right.  */\n+      int nargs = call_expr_nargs (*expr_p);\n+      location_t loc = EXPR_LOC_OR_LOC (*expr_p, input_location);\n+\n+      /* No need to enforce evaluation order if only one argument.  */\n+      if (nargs < 2)\n+\treturn GS_UNHANDLED;\n+\n+      /* Or if all arguments are already free of side-effects.  */\n+      bool has_side_effects = false;\n+      for (int i = 0; i < nargs; i++)\n \t{\n-\t  TREE_OPERAND (*expr_p, 0) = force_target_expr (op0);\n-\t  ret = GS_OK;\n+\t  if (TREE_SIDE_EFFECTS (CALL_EXPR_ARG (*expr_p, i)))\n+\t    {\n+\t      has_side_effects = true;\n+\t      break;\n+\t    }\n \t}\n-      break;\n \n-    case CALL_EXPR:\n-      if (CALL_EXPR_ARGS_ORDERED (*expr_p))\n+      if (!has_side_effects)\n+\treturn GS_UNHANDLED;\n+\n+      /* Leave the last argument for gimplify_call_expr.  */\n+      for (int i = 0; i < nargs - 1; i++)\n \t{\n-\t  /* Strictly evaluate all arguments from left to right.  */\n-\t  int nargs = call_expr_nargs (*expr_p);\n-\t  location_t loc = EXPR_LOC_OR_LOC (*expr_p, input_location);\n+\t  tree new_arg = CALL_EXPR_ARG (*expr_p, i);\n \n-\t  /* No need to enforce evaluation order if only one argument.  */\n-\t  if (nargs < 2)\n-\t    break;\n+\t  /* If argument has a side-effect, gimplify_arg will handle it.  */\n+\t  if (gimplify_arg (&new_arg, pre_p, loc) == GS_ERROR)\n+\t    return GS_ERROR;\n \n-\t  /* Or if all arguments are already free of side-effects.  */\n-\t  bool has_side_effects = false;\n-\t  for (int i = 0; i < nargs; i++)\n-\t    {\n-\t      if (TREE_SIDE_EFFECTS (CALL_EXPR_ARG (*expr_p, i)))\n-\t\t{\n-\t\t  has_side_effects = true;\n-\t\t  break;\n-\t\t}\n-\t    }\n+\t  /* Even if an argument itself doesn't have any side-effects, it\n+\t     might be altered by another argument in the list.  */\n+\t  if (new_arg == CALL_EXPR_ARG (*expr_p, i)\n+\t      && !really_constant_p (new_arg))\n+\t    new_arg = get_formal_tmp_var (new_arg, pre_p);\n \n-\t  if (!has_side_effects)\n-\t    break;\n+\t  CALL_EXPR_ARG (*expr_p, i) = new_arg;\n+\t}\n \n-\t  /* Leave the last argument for gimplify_call_expr.  */\n-\t  for (int i = 0; i < nargs - 1; i++)\n-\t    {\n-\t      tree new_arg = CALL_EXPR_ARG (*expr_p, i);\n+      return GS_OK;\n+    }\n \n-\t      /* If argument has a side-effect, gimplify_arg will handle it.  */\n-\t      if (gimplify_arg (&new_arg, pre_p, loc) == GS_ERROR)\n-\t\tret = GS_ERROR;\n+  return GS_UNHANDLED;\n+}\n \n-\t      /* Even if an argument itself doesn't have any side-effects, it\n-\t\t might be altered by another argument in the list.  */\n-\t      if (new_arg == CALL_EXPR_ARG (*expr_p, i)\n-\t\t  && !really_constant_p (new_arg))\n-\t\tnew_arg = get_formal_tmp_var (new_arg, pre_p);\n+/* Gimplify an UNSIGNED_RSHIFT_EXPR node.  */\n \n-\t      CALL_EXPR_ARG (*expr_p, i) = new_arg;\n-\t    }\n+static gimplify_status\n+d_gimplify_unsigned_rshift_expr (tree *expr_p)\n+{\n+  /* Convert op0 to an unsigned type.  */\n+  tree op0 = TREE_OPERAND (*expr_p, 0);\n+  tree op1 = TREE_OPERAND (*expr_p, 1);\n+  tree type = d_unsigned_type (TREE_TYPE (op0));\n+\n+  *expr_p = convert (TREE_TYPE (*expr_p),\n+\t\t     build2 (RSHIFT_EXPR, type, convert (type, op0), op1));\n+  return GS_OK;\n+}\n \n-\t  if (ret != GS_ERROR)\n-\t    ret = GS_OK;\n-\t}\n-      break;\n+/* Implements the lang_hooks.gimplify_expr routine for language D.\n+   Do gimplification of D specific expression trees in EXPR_P.  */\n \n-    case UNSIGNED_RSHIFT_EXPR:\n-      /* Convert op0 to an unsigned type.  */\n-      op0 = TREE_OPERAND (*expr_p, 0);\n-      op1 = TREE_OPERAND (*expr_p, 1);\n+int\n+d_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n+{\n+  switch (TREE_CODE (*expr_p))\n+    {\n+    case INIT_EXPR:\n+    case MODIFY_EXPR:\n+      return d_gimplify_modify_expr (expr_p, pre_p, post_p);\n \n-      type = d_unsigned_type (TREE_TYPE (op0));\n+    case ADDR_EXPR:\n+      return d_gimplify_addr_expr (expr_p);\n \n-      *expr_p = convert (TREE_TYPE (*expr_p),\n-\t\t\t build2 (RSHIFT_EXPR, type, convert (type, op0), op1));\n-      ret = GS_OK;\n-      break;\n+    case CALL_EXPR:\n+      return d_gimplify_call_expr (expr_p, pre_p);\n+\n+    case UNSIGNED_RSHIFT_EXPR:\n+      return d_gimplify_unsigned_rshift_expr (expr_p);\n \n     case FLOAT_MOD_EXPR:\n       gcc_unreachable ();\n@@ -183,5 +211,5 @@ d_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n       break;\n     }\n \n-  return ret;\n+  return GS_UNHANDLED;\n }"}]}