{"sha": "e905ac8a1a7bfd88994095f0de82ac31cca99925", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwNWFjOGExYTdiZmQ4ODk5NDA5NWYwZGU4MmFjMzFjY2E5OTkyNQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@wrs.com", "date": "2000-01-27T23:15:38Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2000-01-27T23:15:38Z"}, "message": "decl.c (pushdecl): Fix up shadow warnings with respect to implicit for scopes.\n\n\t* decl.c (pushdecl): Fix up shadow warnings with respect to implicit\n\tfor scopes.\nFixes for3.C\n\nFrom-SVN: r31655", "tree": {"sha": "519b7e55a0831f77bbd3341557c5b6f64dc14b86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/519b7e55a0831f77bbd3341557c5b6f64dc14b86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e905ac8a1a7bfd88994095f0de82ac31cca99925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e905ac8a1a7bfd88994095f0de82ac31cca99925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e905ac8a1a7bfd88994095f0de82ac31cca99925", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e905ac8a1a7bfd88994095f0de82ac31cca99925/comments", "author": null, "committer": null, "parents": [{"sha": "75ec21db305f832534b2072c02a2a785c3cc0b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ec21db305f832534b2072c02a2a785c3cc0b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ec21db305f832534b2072c02a2a785c3cc0b4c"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "fbe15656410aa897739d0c550e33c591aafa7a8b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e905ac8a1a7bfd88994095f0de82ac31cca99925/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e905ac8a1a7bfd88994095f0de82ac31cca99925/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e905ac8a1a7bfd88994095f0de82ac31cca99925", "patch": "@@ -1,3 +1,8 @@\n+Thu Jan 27 13:54:12 2000  Mike Stump  <mrs@wrs.com>\n+\n+\t* decl.c (pushdecl): Fix up shadow warnings with respect to implicit\n+\tfor scopes.\n+\n 2000-01-26  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* pt.c (unify): Use fold, not maybe_fold_nontype_arg."}, {"sha": "1406d64e4d1042637ee18589270a0c8e9236dc03", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e905ac8a1a7bfd88994095f0de82ac31cca99925/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e905ac8a1a7bfd88994095f0de82ac31cca99925/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e905ac8a1a7bfd88994095f0de82ac31cca99925", "patch": "@@ -3935,6 +3935,17 @@ pushdecl (x)\n \t    set_identifier_type_value_with_scope (name, NULL_TREE,\n \t\t\t\t\t\t  current_binding_level);\n \n+\t  if (oldlocal)\n+\t    {\n+\t      tree d = oldlocal;\n+\t      while (oldlocal && DECL_DEAD_FOR_LOCAL (oldlocal))\n+\t\t{\n+\t\t  oldlocal = DECL_SHADOWED_FOR_VAR (oldlocal);\n+\t\t}\n+\t      if (oldlocal == NULL_TREE)\n+\t\toldlocal = IDENTIFIER_NAMESPACE_VALUE (DECL_NAME (d));\n+\t    }\n+\n \t  /* If this is an extern function declaration, see if we\n \t     have a global definition or declaration for the function.  */\n \t  if (oldlocal == NULL_TREE\n@@ -3961,15 +3972,14 @@ pushdecl (x)\n \t      && TREE_PUBLIC (x))\n \t    TREE_PUBLIC (name) = 1;\n \n-\t  if (DECL_FROM_INLINE (x))\n-\t    /* Inline decls shadow nothing.  */;\n-\n \t  /* Warn if shadowing an argument at the top level of the body.  */\n-\t  else if (oldlocal != NULL_TREE && !DECL_EXTERNAL (x)\n-\t\t   && TREE_CODE (oldlocal) == PARM_DECL\n-\t\t   /* Don't complain if it's from an enclosing function.  */\n-\t\t   && DECL_CONTEXT (oldlocal) == current_function_decl\n-\t\t   && TREE_CODE (x) != PARM_DECL)\n+\t  if (oldlocal != NULL_TREE && !DECL_EXTERNAL (x)\n+\t      /* Inline decls shadow nothing.  */\n+\t      && !DECL_FROM_INLINE (x)\n+\t      && TREE_CODE (oldlocal) == PARM_DECL\n+\t      /* Don't complain if it's from an enclosing function.  */\n+\t      && DECL_CONTEXT (oldlocal) == current_function_decl\n+\t      && TREE_CODE (x) != PARM_DECL)\n \t    {\n \t      /* Go to where the parms should be and see if we\n \t\t find them there.  */\n@@ -3982,20 +3992,15 @@ pushdecl (x)\n \t      if (b->parm_flag == 1)\n \t\tcp_error (\"declaration of `%#D' shadows a parameter\", name);\n \t    }\n-\t  else if (warn_shadow && oldlocal != NULL_TREE\n-\t\t   && current_binding_level->is_for_scope\n-\t\t   && !DECL_DEAD_FOR_LOCAL (oldlocal))\n-\t    {\n-\t      warning (\"variable `%s' shadows local\",\n-\t\t       IDENTIFIER_POINTER (name));\n-\t      cp_warning_at (\"  this is the shadowed declaration\", oldlocal);\n-\t    }\n+\n \t  /* Maybe warn if shadowing something else.  */\n-\t  else if (warn_shadow && !DECL_EXTERNAL (x)\n-\t\t   /* No shadow warnings for internally generated vars.  */\n-\t\t   && ! DECL_ARTIFICIAL (x)\n-\t\t   /* No shadow warnings for vars made for inlining.  */\n-\t\t   && ! DECL_FROM_INLINE (x))\n+\t  if (warn_shadow && !DECL_EXTERNAL (x)\n+\t      /* Inline decls shadow nothing.  */\n+\t      && !DECL_FROM_INLINE (x)\n+\t      /* No shadow warnings for internally generated vars.  */\n+\t      && ! DECL_ARTIFICIAL (x)\n+\t      /* No shadow warnings for vars made for inlining.  */\n+\t      && ! DECL_FROM_INLINE (x))\n \t    {\n \t      if (oldlocal != NULL_TREE && TREE_CODE (oldlocal) == PARM_DECL)\n \t\twarning (\"declaration of `%s' shadows a parameter\","}]}