{"sha": "6416f67273aaeafd6ad89c2c82076dabb50f8dbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQxNmY2NzI3M2FhZWFmZDZhZDg5YzJjODIwNzZkYWJiNTBmOGRiZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-12T15:06:13Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-12T15:06:13Z"}, "message": "i386: Add V2SFmode NEG, ABS and logic insn patterns [PR95046]\n\ngcc/ChangeLog:\n\n\tPR target/95046\n\t* config/i386/mmx.md (<code>v2sf2): New insn pattern.\n\t(*mmx_<code>v2sf2): New insn_and_split pattern.\n\t(*mmx_nabsv2sf2): Ditto.\n\t(*mmx_andnotv2sf3): New insn pattern.\n\t(*mmx_<code>v2sf3): Ditto.\n\t* config/i386/i386.md (absneg_op): New code attribute.\n\t* config/i386/i386.c (ix86_build_const_vector): Handle V2SFmode.\n\t(ix86_build_signbit_mask): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/95046\n\t* gcc.target/i386/pr95046-2.c: New test.", "tree": {"sha": "52978f48c8e49bf2c0617752511080a069ba56a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52978f48c8e49bf2c0617752511080a069ba56a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6416f67273aaeafd6ad89c2c82076dabb50f8dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6416f67273aaeafd6ad89c2c82076dabb50f8dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6416f67273aaeafd6ad89c2c82076dabb50f8dbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "998fbe9f1f7e5ef53ca79fbd28f8a3875a477baa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998fbe9f1f7e5ef53ca79fbd28f8a3875a477baa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/998fbe9f1f7e5ef53ca79fbd28f8a3875a477baa"}], "stats": {"total": 128, "additions": 121, "deletions": 7}, "files": [{"sha": "17883ffd13171d3243d8075aecb060919ebd85aa", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6416f67273aaeafd6ad89c2c82076dabb50f8dbe", "patch": "@@ -15091,6 +15091,7 @@ ix86_build_const_vector (machine_mode mode, bool vect, rtx value)\n     case E_V16SFmode:\n     case E_V8SFmode:\n     case E_V4SFmode:\n+    case E_V2SFmode:\n     case E_V8DFmode:\n     case E_V4DFmode:\n     case E_V2DFmode:\n@@ -15131,6 +15132,7 @@ ix86_build_signbit_mask (machine_mode mode, bool vect, bool invert)\n     case E_V4SImode:\n     case E_V8SFmode:\n     case E_V4SFmode:\n+    case E_V2SFmode:\n       vec_mode = mode;\n       imode = SImode;\n       break;"}, {"sha": "722eb9b5ec85a3e42bed0182635fb30e86458c0f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6416f67273aaeafd6ad89c2c82076dabb50f8dbe", "patch": "@@ -954,6 +954,9 @@\n ;; Mapping of abs neg operators\n (define_code_iterator absneg [abs neg])\n \n+;; Mapping of abs neg operators to logic operation\n+(define_code_attr absneg_op [(abs \"and\") (neg \"xor\")])\n+\n ;; Base name for x87 insn mnemonic.\n (define_code_attr absneg_mnemonic [(abs \"fabs\") (neg \"fchs\")])\n "}, {"sha": "0ec80c06d352f3e6f7878620adb5b0d3cf092d16", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=6416f67273aaeafd6ad89c2c82076dabb50f8dbe", "patch": "@@ -238,6 +238,40 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n+(define_expand \"<code>v2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(absneg:V2SF\n+\t  (match_operand:V2SF 1 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"ix86_expand_fp_absneg_operator (<CODE>, V2SFmode, operands); DONE;\")\n+\n+(define_insn_and_split \"*mmx_<code>v2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=x,x\")\n+\t(absneg:V2SF\n+\t  (match_operand:V2SF 1 \"register_operand\" \"%0,x\")))\n+   (use (match_operand:V2SF 2 \"nonimmediate_operand\" \"x,x\"))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(<absneg_op>:V2SF (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  [(set_attr \"isa\" \"noavx,avx\")])\n+\n+(define_insn_and_split \"*mmx_nabsv2sf2\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=x,x\")\n+\t(neg:V2SF\n+\t  (abs:V2SF\n+\t    (match_operand:V2SF 1 \"register_operand\" \"%0,x\"))))\n+   (use (match_operand:V2SF 2 \"nonimmediate_operand\" \"x,x\"))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(ior:V2SF (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  [(set_attr \"isa\" \"noavx,avx\")])\n+\n (define_expand \"mmx_addv2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\")\n \t(plus:V2SF\n@@ -591,6 +625,41 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"V2SF\")])\n \n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; Parallel single-precision floating point logical operations\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"*mmx_andnotv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=x,x\")\n+\t(and:V2SF\n+\t  (not:V2SF\n+\t    (match_operand:V2SF 1 \"register_operand\" \"0,x\"))\n+\t  (match_operand:V2SF 2 \"register_operand\" \"x,x\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"@\n+   andps\\t{%2, %0|%0, %2}\n+   vandps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"*mmx_<code>v2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=x,x\")\n+\t(any_logic:V2SF\n+\t  (match_operand:V2SF 1 \"register_operand\" \"%0,x\")\n+\t  (match_operand:V2SF 2 \"register_operand\" \"x,x\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n+  \"@\n+   <logic>ps\\t{%2, %0|%0, %2}\n+   v<logic>ps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel single-precision floating point conversion operations"}, {"sha": "795727424098c56e7dd538eb7a64964ef3c42b63", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6416f67273aaeafd6ad89c2c82076dabb50f8dbe", "patch": "@@ -1,3 +1,8 @@\n+2020-05-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/95046\n+\t* gcc.target/i386/pr95046-2.c: New test.\n+\n 2020-05-12  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc.c-torture/execute/noinit-attribute.c: Skip for msp430"}, {"sha": "bcc8bb5bfab40e4f78fc15a07ca677871c38f283", "filename": "gcc/testsuite/gcc.target/i386/pr95046-1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-1.c?ref=6416f67273aaeafd6ad89c2c82076dabb50f8dbe", "patch": "@@ -1,4 +1,4 @@\n-/* PR target/94942 */\n+/* PR target/95046 */\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O3 -ffast-math -msse2\" } */\n \n@@ -12,7 +12,7 @@ test_plus (void)\n     r[i] = a[i] + b[i];\n }\n \n-/* { dg-final { scan-assembler \"addps\" } } */\n+/* { dg-final { scan-assembler \"\\tv?addps\" } } */\n \n void\n test_minus (void)\n@@ -21,7 +21,7 @@ test_minus (void)\n     r[i] = a[i] - b[i];\n }\n \n-/* { dg-final { scan-assembler \"subps\" } } */\n+/* { dg-final { scan-assembler \"\\tv?subps\" } } */\n \n void\n test_mult (void)\n@@ -30,7 +30,7 @@ test_mult (void)\n     r[i] = a[i] * b[i];\n }\n \n-/* { dg-final { scan-assembler \"mulps\" } } */\n+/* { dg-final { scan-assembler \"\\tv?mulps\" } } */\n \n void\n test_min (void)\n@@ -39,7 +39,7 @@ test_min (void)\n     r[i] = a[i] < b[i] ? a[i] : b[i];\n }\n \n-/* { dg-final { scan-assembler \"minps\" } } */\n+/* { dg-final { scan-assembler \"\\tv?minps\" } } */\n \n void\n test_max (void)\n@@ -48,7 +48,7 @@ test_max (void)\n     r[i] = a[i] > b[i] ? a[i] : b[i];\n }\n \n-/* { dg-final { scan-assembler \"maxps\" } } */\n+/* { dg-final { scan-assembler \"\\tv?maxps\" } } */\n \n float sqrtf (float);\n \n@@ -59,4 +59,4 @@ test_sqrt (void)\n     r[i] = sqrtf (a[i]);\n }\n \n-/* { dg-final { scan-assembler \"sqrtps\" } } */\n+/* { dg-final { scan-assembler \"\\tv?sqrtps\" } } */"}, {"sha": "277cc2d2e58d80e01adf39425d61da6b08825c4b", "filename": "gcc/testsuite/gcc.target/i386/pr95046-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6416f67273aaeafd6ad89c2c82076dabb50f8dbe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95046-2.c?ref=6416f67273aaeafd6ad89c2c82076dabb50f8dbe", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/95046 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O3 -msse2\" } */\n+\n+\n+float r[2], a[2];\n+\n+float fabsf (float);\n+\n+void\n+test_abs (void)\n+{\n+  for (int i = 0; i < 2; i++)\n+    r[i] = fabsf (a[i]);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tv?andps\" } } */\n+\n+void\n+test_neg (void)\n+{\n+  for (int i = 0; i < 2; i++)\n+    r[i] = -a[i];\n+}\n+\n+/* { dg-final { scan-assembler \"\\tv?xorps\" } } */\n+\n+void\n+test_nabs (void)\n+{\n+  for (int i = 0; i < 2; i++)\n+    r[i] = -fabsf (a[i]);\n+}\n+\n+/* { dg-final { scan-assembler \"\\tv?orps\" } } */"}]}