{"sha": "6cfc03411c64d74e2e5d707b6635aed85620595f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNmYzAzNDExYzY0ZDc0ZTJlNWQ3MDdiNjYzNWFlZDg1NjIwNTk1Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-06-10T19:55:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-06-10T19:55:57Z"}, "message": "invoke.texi (Optimization Options): Document -fpeephole2.\n\n        * doc/invoke.texi (Optimization Options): Document -fpeephole2.\n        (Code Generation Options): Document -fnon-call-exceptions.\n\nFrom-SVN: r43151", "tree": {"sha": "fd02897b9f091f029472ba0bbdf985878ce2fc18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd02897b9f091f029472ba0bbdf985878ce2fc18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cfc03411c64d74e2e5d707b6635aed85620595f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cfc03411c64d74e2e5d707b6635aed85620595f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cfc03411c64d74e2e5d707b6635aed85620595f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cfc03411c64d74e2e5d707b6635aed85620595f/comments", "author": null, "committer": null, "parents": [{"sha": "0bdcca681d9bb477bf1288a1d0a9d06b2af02952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdcca681d9bb477bf1288a1d0a9d06b2af02952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bdcca681d9bb477bf1288a1d0a9d06b2af02952"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "fed2545f440be7e53e1663517c6f4c032f90b39c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cfc03411c64d74e2e5d707b6635aed85620595f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cfc03411c64d74e2e5d707b6635aed85620595f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cfc03411c64d74e2e5d707b6635aed85620595f", "patch": "@@ -1,3 +1,8 @@\n+2001-06-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* doc/invoke.texi (Optimization Options): Document -fpeephole2.\n+\t(Code Generation Options): Document -fnon-call-exceptions.\n+\n 2001-06-10  Mark Kettenis  <kettenis@gnu.org>\n \n \t* config/i386/gnu.h (MD_FALLBACK_FRAME_STATE_FOR): Undefine."}, {"sha": "ad4bbfe70dc7d10389f9f87962c883fed0d30187", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cfc03411c64d74e2e5d707b6635aed85620595f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cfc03411c64d74e2e5d707b6635aed85620595f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6cfc03411c64d74e2e5d707b6635aed85620595f", "patch": "@@ -263,7 +263,7 @@ in the following sections.\n -fkeep-static-consts  -fmove-all-movables @gol\n -fno-default-inline  -fno-defer-pop @gol\n -fno-function-cse  -fno-guess-branch-probability @gol\n--fno-inline  -fno-math-errno  -fno-peephole @gol\n+-fno-inline  -fno-math-errno  -fno-peephole  -fno-peephole2 @gol\n -funsafe-math-optimizations -fno-trapping-math @gol\n -fomit-frame-pointer  -foptimize-register-move @gol\n -foptimize-sibling-calls  -freduce-all-givs @gol\n@@ -582,7 +582,8 @@ in the following sections.\n @xref{Code Gen Options,,Options for Code Generation Conventions}.\n @gccoptlist{\n -fcall-saved-@var{reg}  -fcall-used-@var{reg} @gol\n--fexceptions  -funwind-tables  -ffixed-@var{reg} @gol\n+-ffixed-@var{reg} -fexceptions @gol\n+-fnon-call-exceptions  -funwind-tables @gol\n -finhibit-size-directive  -finstrument-functions @gol\n -fcheck-memory-usage  -fprefix-function-name @gol\n -fno-common  -fno-ident  -fno-gnu-linker @gol\n@@ -3587,8 +3588,13 @@ We're very interested in code that runs @emph{slower}\n when these options are @emph{enabled}.\n \n @item -fno-peephole\n+@itemx -fno-peephole2\n @opindex fno-peephole\n-Disable any machine-specific peephole optimizations.\n+@opindex fno-peephole2\n+Disable any machine-specific peephole optimizations.  The difference\n+between @samp{-fno-peephole} and @samp{-fno-peephole2} is in how they\n+are implemented in the compiler; some targets use one, some use the\n+other, a few use both.\n \n @item -fbranch-probabilities\n @opindex fbranch-probabilities\n@@ -8915,6 +8921,15 @@ properly with exception handlers written in C++.  You may also wish to\n disable this option if you are compiling older C++ programs that don't\n use exception handling.\n \n+@item -fnon-call-exceptions\n+@opindex fnon-call-exceptions\n+Generate code that allows trapping instructions to throw exceptions.\n+Note that this requires platform-specific runtime support that does\n+not exist everywhere.  Moreover, it only allows @emph{trapping}\n+instructions to throw exceptions, i.e. memory references or floating\n+point instructions.  It does not allow exceptions to be thrown from\n+arbitrary signal handlers such as @code{SIGALRM}.\n+\n @item -funwind-tables\n @opindex funwind-tables\n Similar to @option{-fexceptions}, except that it will just generate any needed"}]}