{"sha": "91539305a849cc8d8e8efb0d98e8c12541992916", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE1MzkzMDVhODQ5Y2M4ZDhlOGVmYjBkOThlOGMxMjU0MTk5MjkxNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-08-05T12:46:13Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-08-05T12:46:13Z"}, "message": "i386: Set cfun->machine->max_used_stack_alignment if needed\n\ncfun->machine->max_used_stack_alignment is used to decide how stack frame\nshould be aligned.  This is independent of any psABIs nor 32-bit vs 64-bit.\nIt is always safe to compute max_used_stack_alignment.  We compute it only\nif 128-bit aligned load/store may be generated on misaligned stack slot\nwhich will lead to segfault.\n\ngcc/\n\n\tPR target/86386\n\t* config/i386/i386.c (ix86_finalize_stack_frame_flags): Set\n\tcfun->machine->max_used_stack_alignment if needed.\n\ngcc/testsuite/\n\n\tPR target/86386\n\t* gcc.target/i386/pr86386.c: New file.\n\nFrom-SVN: r263317", "tree": {"sha": "6e9f8447a678e471c58e8c92a8b0d8778966d653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e9f8447a678e471c58e8c92a8b0d8778966d653"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91539305a849cc8d8e8efb0d98e8c12541992916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91539305a849cc8d8e8efb0d98e8c12541992916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91539305a849cc8d8e8efb0d98e8c12541992916", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91539305a849cc8d8e8efb0d98e8c12541992916/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ff1e4e9c0527252fd427ee751efad30d391c8be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff1e4e9c0527252fd427ee751efad30d391c8be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ff1e4e9c0527252fd427ee751efad30d391c8be"}], "stats": {"total": 51, "additions": 45, "deletions": 6}, "files": [{"sha": "720ce32a6ca4b76b209f8af6560574c8a6144f56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91539305a849cc8d8e8efb0d98e8c12541992916/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91539305a849cc8d8e8efb0d98e8c12541992916/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91539305a849cc8d8e8efb0d98e8c12541992916", "patch": "@@ -1,3 +1,9 @@\n+2018-08-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/86386\n+\t* config/i386/i386.c (ix86_finalize_stack_frame_flags): Set\n+\tcfun->machine->max_used_stack_alignment if needed.\n+\n 2018-08-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86571"}, {"sha": "7554fd1f65997fbaec8950d9683f5432a7bacb02", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91539305a849cc8d8e8efb0d98e8c12541992916/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91539305a849cc8d8e8efb0d98e8c12541992916/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=91539305a849cc8d8e8efb0d98e8c12541992916", "patch": "@@ -13281,12 +13281,14 @@ ix86_finalize_stack_frame_flags (void)\n \t  recompute_frame_layout_p = true;\n \t}\n     }\n-  else if (crtl->max_used_stack_slot_alignment\n-\t   > crtl->preferred_stack_boundary)\n-    {\n-      /* We don't need to realign stack.  But we still need to keep\n-\t stack frame properly aligned to satisfy the largest alignment\n-\t of stack slots.  */\n+  else if (crtl->max_used_stack_slot_alignment >= 128)\n+    {\n+      /* We don't need to realign stack.  max_used_stack_alignment is\n+\t used to decide how stack frame should be aligned.  This is\n+\t independent of any psABIs nor 32-bit vs 64-bit.  It is always\n+\t safe to compute max_used_stack_alignment.  We compute it only\n+\t if 128-bit aligned load/store may be generated on misaligned\n+\t stack slot which will lead to segfault.   */\n       if (ix86_find_max_used_stack_alignment (stack_alignment, true))\n \tcfun->machine->max_used_stack_alignment\n \t  = stack_alignment / BITS_PER_UNIT;"}, {"sha": "fb65bd04effa3ad96670e966280faca81b398e6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91539305a849cc8d8e8efb0d98e8c12541992916/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91539305a849cc8d8e8efb0d98e8c12541992916/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91539305a849cc8d8e8efb0d98e8c12541992916", "patch": "@@ -1,3 +1,8 @@\n+2018-08-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/86386\n+\t* gcc.target/i386/pr86386.c: New file.\n+\n 2018-08-04  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/gcc-gdb-test.exp: Use absolute line number in pass/fail line."}, {"sha": "a67cf45444ec8fd38904a26f991b3a7967a75fac", "filename": "gcc/testsuite/gcc.target/i386/pr86386.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91539305a849cc8d8e8efb0d98e8c12541992916/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91539305a849cc8d8e8efb0d98e8c12541992916/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86386.c?ref=91539305a849cc8d8e8efb0d98e8c12541992916", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/86386 */\n+/* { dg-do run { target { avx_runtime && int128 } } } */\n+/* { dg-options \"-Os -fno-tree-dce -mstringop-strategy=vector_loop -mavx\" } */\n+\n+unsigned c, d, e, f;\n+\n+unsigned __attribute__((noipa))\n+foo (unsigned char g, unsigned short h, unsigned i, unsigned long long j,\n+     unsigned char k, unsigned short l, unsigned m, unsigned __int128 n)\n+{\n+  __builtin_memset (&e, 0, 3);\n+  n <<= m;\n+  __builtin_memcpy (&m, 2 + (char *) &n, 1);\n+  m >>= 0;\n+  d ^= __builtin_mul_overflow (l, n, &m);\n+  return m;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned __int128 x = foo (0, 0, 0, 0, 0, 4, 1, 3);\n+  if (x != 24)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}