{"sha": "151fbaac5c78c4e9b749fc9e916f78b0ba63b153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUxZmJhYWM1Yzc4YzRlOWI3NDlmYzllOTE2Zjc4YjBiYTYzYjE1Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-05-27T11:18:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-05-27T11:18:44Z"}, "message": "stl_tree.h (_Rb_tree::_M_end()): Return _Base_ptr instead of downcasting.\n\n\t* include/bits/stl_tree.h (_Rb_tree::_M_end()): Return _Base_ptr\n\tinstead of downcasting.\n\t(_Rb_tree::_M_copy): Change second parameter to _Base_ptr.\n\t(_Rb_tree::_M_lower_bound, _Rb_tree:_M_upper_bound): Likewise.\n\t(_Rb_tree::_S_iter): Remove.\n\t(_Rb_tree::_S_lower_bound_tr, _Rb_tree::_S_upper_bound_tr): Remove.\n\t(_Rb_tree::_M_find_tr(const _Kt&) const): Call _M_lower_bound_tr\n\tinstead of _S_lower_bound_tr\n\t(_Rb_tree::_M_find_tr(const _Kt&)): Call const overload.\n\t(_Rb_tree::_M_lower_bound_tr(const _Kt&) const): Do the search here\n\tinstead of calling _S_lower_bound_tr.\n\t(_Rb_tree::_M_lower_bound_tr(const _Kt&)): Call const overload.\n\t(_Rb_tree::_M_upper_bound_tr(const _Kt&) const): Do the search here\n\tinstead of calling _S_upper_bound_tr.\n\t(_Rb_tree::_M_upper_bound_tr(const _Kt&)): Call const overload.\n\t(_Rb_tree::_M_equal_range_tr(const _Kt&)): Likewise.\n\t(_Rb_tree::equal_range): Use _Base_ptr for end pointer.\n\t(_Rb_tree::_M_get_insert_unique_pos): Likewise.\n\t(_Rb_tree::_M_get_insert_equal_pos): Likewise.\n\t(_Rb_tree::_M_insert_equal_lower_node): Likewise.\n\t(_Rb_tree::_M_insert_unique, _Rb_tree::_M_emplace_unique,\n\t_Rb_tree::_M_emplace_hint_unique): Remove static_cast.\n\nFrom-SVN: r223746", "tree": {"sha": "21ba4553e597d873f4bd7a0cf0bb337147febc99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21ba4553e597d873f4bd7a0cf0bb337147febc99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/151fbaac5c78c4e9b749fc9e916f78b0ba63b153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151fbaac5c78c4e9b749fc9e916f78b0ba63b153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/151fbaac5c78c4e9b749fc9e916f78b0ba63b153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151fbaac5c78c4e9b749fc9e916f78b0ba63b153/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2097b5b029851d531a1424a0092992d4c9f650e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2097b5b029851d531a1424a0092992d4c9f650e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2097b5b029851d531a1424a0092992d4c9f650e4"}], "stats": {"total": 164, "additions": 87, "deletions": 77}, "files": [{"sha": "cadee8312b4b7563adb72497f68292cf88a29722", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151fbaac5c78c4e9b749fc9e916f78b0ba63b153/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151fbaac5c78c4e9b749fc9e916f78b0ba63b153/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=151fbaac5c78c4e9b749fc9e916f78b0ba63b153", "patch": "@@ -1,5 +1,28 @@\n 2015-05-27  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/stl_tree.h (_Rb_tree::_M_end()): Return _Base_ptr\n+\tinstead of downcasting.\n+\t(_Rb_tree::_M_copy): Change second parameter to _Base_ptr.\n+\t(_Rb_tree::_M_lower_bound, _Rb_tree:_M_upper_bound): Likewise.\n+\t(_Rb_tree::_S_iter): Remove.\n+\t(_Rb_tree::_S_lower_bound_tr, _Rb_tree::_S_upper_bound_tr): Remove.\n+\t(_Rb_tree::_M_find_tr(const _Kt&) const): Call _M_lower_bound_tr\n+\tinstead of _S_lower_bound_tr\n+\t(_Rb_tree::_M_find_tr(const _Kt&)): Call const overload.\n+\t(_Rb_tree::_M_lower_bound_tr(const _Kt&) const): Do the search here\n+\tinstead of calling _S_lower_bound_tr.\n+\t(_Rb_tree::_M_lower_bound_tr(const _Kt&)): Call const overload.\n+\t(_Rb_tree::_M_upper_bound_tr(const _Kt&) const): Do the search here\n+\tinstead of calling _S_upper_bound_tr.\n+\t(_Rb_tree::_M_upper_bound_tr(const _Kt&)): Call const overload.\n+\t(_Rb_tree::_M_equal_range_tr(const _Kt&)): Likewise.\n+\t(_Rb_tree::equal_range): Use _Base_ptr for end pointer.\n+\t(_Rb_tree::_M_get_insert_unique_pos): Likewise.\n+\t(_Rb_tree::_M_get_insert_equal_pos): Likewise.\n+\t(_Rb_tree::_M_insert_equal_lower_node): Likewise.\n+\t(_Rb_tree::_M_insert_unique, _Rb_tree::_M_emplace_unique,\n+\t_Rb_tree::_M_emplace_hint_unique): Remove static_cast.\n+\n \tPR libstdc++/66017\n \t* include/bits/stl_tree.h (_Rb_tree_node): Use __aligned_membuf.\n \t(_Rb_tree_iterator, _Rb_tree_const_iterator): Support construction"}, {"sha": "240f52285300b4dacd981b8e17c5e40102633812", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 64, "deletions": 77, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151fbaac5c78c4e9b749fc9e916f78b0ba63b153/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151fbaac5c78c4e9b749fc9e916f78b0ba63b153/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=151fbaac5c78c4e9b749fc9e916f78b0ba63b153", "patch": "@@ -658,13 +658,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  (this->_M_impl._M_header._M_parent);\n       }\n \n-      _Link_type\n+      _Base_ptr\n       _M_end() _GLIBCXX_NOEXCEPT\n-      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }\n+      { return &this->_M_impl._M_header; }\n \n-      _Const_Link_type\n+      _Const_Base_ptr\n       _M_end() const _GLIBCXX_NOEXCEPT\n-      { return reinterpret_cast<_Const_Link_type>(&this->_M_impl._M_header); }\n+      { return &this->_M_impl._M_header; }\n \n       static const_reference\n       _S_value(_Const_Link_type __x)\n@@ -774,10 +774,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _NodeGen>\n \t_Link_type\n-\t_M_copy(_Const_Link_type __x, _Link_type __p, _NodeGen&);\n+\t_M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen&);\n \n       _Link_type\n-      _M_copy(_Const_Link_type __x, _Link_type __p)\n+      _M_copy(_Const_Link_type __x, _Base_ptr __p)\n       {\n \t_Alloc_node __an(*this);\n \treturn _M_copy(__x, __p, __an);\n@@ -787,19 +787,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_erase(_Link_type __x);\n \n       iterator\n-      _M_lower_bound(_Link_type __x, _Link_type __y,\n+      _M_lower_bound(_Link_type __x, _Base_ptr __y,\n \t\t     const _Key& __k);\n \n       const_iterator\n-      _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,\n+      _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,\n \t\t     const _Key& __k) const;\n \n       iterator\n-      _M_upper_bound(_Link_type __x, _Link_type __y,\n+      _M_upper_bound(_Link_type __x, _Base_ptr __y,\n \t\t     const _Key& __k);\n \n       const_iterator\n-      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,\n+      _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,\n \t\t     const _Key& __k) const;\n \n     public:\n@@ -1117,54 +1117,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__is_transparent<_Cmp, _Kt, __void_t<typename _Cmp::is_transparent>>\n \t{ typedef void type; };\n \n-      static auto _S_iter(_Link_type __x) { return iterator(__x); }\n-\n-      static auto _S_iter(_Const_Link_type __x) { return const_iterator(__x); }\n-\n-      template<typename _Cmp, typename _Link, typename _Kt>\n-\tstatic auto\n-\t_S_lower_bound_tr(_Cmp& __cmp, _Link __x, _Link __y, const _Kt& __k)\n-\t{\n-\t  while (__x != 0)\n-\t    if (!__cmp(_S_key(__x), __k))\n-\t      __y = __x, __x = _S_left(__x);\n-\t    else\n-\t      __x = _S_right(__x);\n-\t  return _S_iter(__y);\n-\t}\n-\n-      template<typename _Cmp, typename _Link, typename _Kt>\n-\tstatic auto\n-\t_S_upper_bound_tr(_Cmp& __cmp, _Link __x, _Link __y, const _Kt& __k)\n-\t{\n-\t  while (__x != 0)\n-\t    if (__cmp(__k, _S_key(__x)))\n-\t      __y = __x, __x = _S_left(__x);\n-\t    else\n-\t      __x = _S_right(__x);\n-\t  return _S_iter(__y);\n-\t}\n-\n       template<typename _Kt,\n \t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n \titerator\n \t_M_find_tr(const _Kt& __k)\n \t{\n-\t  auto& __cmp = _M_impl._M_key_compare;\n-\t  auto __j = _S_lower_bound_tr(__cmp, _M_begin(), _M_end(), __k);\n-\t  return (__j == end() || __cmp(__k, _S_key(__j._M_node)))\n-\t    ? end() : __j;\n+\t  const _Rb_tree* __const_this = this;\n+\t  return __const_this->_M_find_tr(__k)._M_const_cast();\n \t}\n \n       template<typename _Kt,\n \t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n \tconst_iterator\n \t_M_find_tr(const _Kt& __k) const\n \t{\n-\t  auto& __cmp = _M_impl._M_key_compare;\n-\t  auto __j = _S_lower_bound_tr(__cmp, _M_begin(), _M_end(), __k);\n-\t  return (__j == end() || __cmp(__k, _S_key(__j._M_node)))\n-\t    ? end() : __j;\n+\t  auto __j = _M_lower_bound_tr(__k);\n+\t  if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))\n+\t    __j = end();\n+\t  return __j;\n \t}\n \n       template<typename _Kt,\n@@ -1181,48 +1151,63 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \titerator\n \t_M_lower_bound_tr(const _Kt& __k)\n \t{\n-\t  auto& __cmp = _M_impl._M_key_compare;\n-\t  return _S_lower_bound_tr(__cmp, _M_begin(), _M_end(), __k);\n+\t  const _Rb_tree* __const_this = this;\n+\t  return __const_this->_M_lower_bound_tr(__k)._M_const_cast();\n \t}\n \n       template<typename _Kt,\n \t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n \tconst_iterator\n \t_M_lower_bound_tr(const _Kt& __k) const\n \t{\n-\t  auto& __cmp = _M_impl._M_key_compare;\n-\t  return _S_lower_bound_tr(__cmp, _M_begin(), _M_end(), __k);\n+\t  auto __x = _M_begin();\n+\t  auto __y = _M_end();\n+\t  while (__x != 0)\n+\t    if (!_M_impl._M_key_compare(_S_key(__x), __k))\n+\t      {\n+\t\t__y = __x;\n+\t\t__x = _S_left(__x);\n+\t      }\n+\t    else\n+\t      __x = _S_right(__x);\n+\t  return const_iterator(__y);\n \t}\n \n       template<typename _Kt,\n \t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n \titerator\n \t_M_upper_bound_tr(const _Kt& __k)\n \t{\n-\t  auto& __cmp = _M_impl._M_key_compare;\n-\t  return _S_upper_bound_tr(__cmp, _M_begin(), _M_end(), __k);\n+\t  const _Rb_tree* __const_this = this;\n+\t  return __const_this->_M_upper_bound_tr(__k)._M_const_cast();\n \t}\n \n       template<typename _Kt,\n \t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n \tconst_iterator\n \t_M_upper_bound_tr(const _Kt& __k) const\n \t{\n-\t  auto& __cmp = _M_impl._M_key_compare;\n-\t  return _S_upper_bound_tr(__cmp, _M_begin(), _M_end(), __k);\n+\t  auto __x = _M_begin();\n+\t  auto __y = _M_end();\n+\t  while (__x != 0)\n+\t    if (_M_impl._M_key_compare(__k, _S_key(__x)))\n+\t      {\n+\t\t__y = __x;\n+\t\t__x = _S_left(__x);\n+\t      }\n+\t    else\n+\t      __x = _S_right(__x);\n+\t  return const_iterator(__y);\n \t}\n \n       template<typename _Kt,\n \t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n \tpair<iterator, iterator>\n \t_M_equal_range_tr(const _Kt& __k)\n \t{\n-\t  auto __low = _M_lower_bound_tr(__k);\n-\t  auto __high = __low;\n-\t  auto& __cmp = _M_impl._M_key_compare;\n-\t  while (__high != end() && !__cmp(__k, _S_key(__high._M_node)))\n-\t    ++__high;\n-\t  return { __low, __high };\n+\t  const _Rb_tree* __const_this = this;\n+\t  auto __ret = __const_this->_M_equal_range_tr(__k);\n+\t  return { __ret.first._M_const_cast(), __ret.second._M_const_cast() };\n \t}\n \n       template<typename _Kt,\n@@ -1553,7 +1538,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n     {\n       _Link_type __x = _M_begin();\n-      _Link_type __y = _M_end();\n+      _Base_ptr __y = _M_end();\n       while (__x != 0)\n \t{\n \t  __y = __x;\n@@ -1568,7 +1553,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _NodeGen>\n       typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type\n       _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::\n-      _M_copy(_Const_Link_type __x, _Link_type __p, _NodeGen& __node_gen)\n+      _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)\n       {\n \t// Structural copy. __x and __p must be non-null.\n \t_Link_type __top = _M_clone_node(__x, __node_gen);\n@@ -1621,7 +1606,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t      _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    _M_lower_bound(_Link_type __x, _Link_type __y,\n+    _M_lower_bound(_Link_type __x, _Base_ptr __y,\n \t\t   const _Key& __k)\n     {\n       while (__x != 0)\n@@ -1637,7 +1622,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t      _Compare, _Alloc>::const_iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,\n+    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,\n \t\t   const _Key& __k) const\n     {\n       while (__x != 0)\n@@ -1653,7 +1638,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t      _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    _M_upper_bound(_Link_type __x, _Link_type __y,\n+    _M_upper_bound(_Link_type __x, _Base_ptr __y,\n \t\t   const _Key& __k)\n     {\n       while (__x != 0)\n@@ -1669,7 +1654,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t      _Compare, _Alloc>::const_iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,\n+    _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,\n \t\t   const _Key& __k) const\n     {\n       while (__x != 0)\n@@ -1690,7 +1675,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     equal_range(const _Key& __k)\n     {\n       _Link_type __x = _M_begin();\n-      _Link_type __y = _M_end();\n+      _Base_ptr __y = _M_end();\n       while (__x != 0)\n \t{\n \t  if (_M_impl._M_key_compare(_S_key(__x), __k))\n@@ -1699,7 +1684,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __y = __x, __x = _S_left(__x);\n \t  else\n \t    {\n-\t      _Link_type __xu(__x), __yu(__y);\n+\t      _Link_type __xu(__x);\n+\t      _Base_ptr __yu(__y);\n \t      __y = __x, __x = _S_left(__x);\n \t      __xu = _S_right(__xu);\n \t      return pair<iterator,\n@@ -1721,7 +1707,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     equal_range(const _Key& __k) const\n     {\n       _Const_Link_type __x = _M_begin();\n-      _Const_Link_type __y = _M_end();\n+      _Const_Base_ptr __y = _M_end();\n       while (__x != 0)\n \t{\n \t  if (_M_impl._M_key_compare(_S_key(__x), __k))\n@@ -1730,7 +1716,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __y = __x, __x = _S_left(__x);\n \t  else\n \t    {\n-\t      _Const_Link_type __xu(__x), __yu(__y);\n+\t      _Const_Link_type __xu(__x);\n+\t      _Const_Base_ptr __yu(__y);\n \t      __y = __x, __x = _S_left(__x);\n \t      __xu = _S_right(__xu);\n \t      return pair<const_iterator,\n@@ -1802,7 +1789,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef pair<_Base_ptr, _Base_ptr> _Res;\n       _Link_type __x = _M_begin();\n-      _Link_type __y = _M_end();\n+      _Base_ptr __y = _M_end();\n       bool __comp = true;\n       while (__x != 0)\n \t{\n@@ -1834,7 +1821,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef pair<_Base_ptr, _Base_ptr> _Res;\n       _Link_type __x = _M_begin();\n-      _Link_type __y = _M_end();\n+      _Base_ptr __y = _M_end();\n       while (__x != 0)\n \t{\n \t  __y = __x;\n@@ -1870,7 +1857,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      true);\n \t}\n \n-      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);\n+      return _Res(iterator(__res.first), false);\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n@@ -1976,7 +1963,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn _M_insert_(__res.first, __res.second,\n \t\t\t  _GLIBCXX_FORWARD(_Arg, __v),\n \t\t\t  __node_gen);\n-      return iterator(static_cast<_Link_type>(__res.first));\n+      return iterator(__res.first);\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n@@ -2102,7 +2089,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_insert_equal_lower_node(_Link_type __z)\n     {\n       _Link_type __x = _M_begin();\n-      _Link_type __y = _M_end();\n+      _Base_ptr __y = _M_end();\n       while (__x != 0)\n \t{\n \t  __y = __x;\n@@ -2130,7 +2117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      return _Res(_M_insert_node(__res.first, __res.second, __z), true);\n \t\n \t    _M_drop_node(__z);\n-\t    return _Res(iterator(static_cast<_Link_type>(__res.first)), false);\n+\t    return _Res(iterator(__res.first), false);\n \t  }\n \t__catch(...)\n \t  {\n@@ -2177,7 +2164,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      return _M_insert_node(__res.first, __res.second, __z);\n \n \t    _M_drop_node(__z);\n-\t    return iterator(static_cast<_Link_type>(__res.first));\n+\t    return iterator(__res.first);\n \t  }\n \t__catch(...)\n \t  {"}]}