{"sha": "b9f04a8461a67148848258f8e4b367a1b988038e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlmMDRhODQ2MWE2NzE0ODg0ODI1OGY4ZTRiMzY3YTFiOTg4MDM4ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-16T05:47:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-16T05:47:20Z"}, "message": "Fix defer when not calling recover in function with named results.\n\nFrom-SVN: r178905", "tree": {"sha": "03800353a564c0cdcf3c12bb8940b28389b243a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03800353a564c0cdcf3c12bb8940b28389b243a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9f04a8461a67148848258f8e4b367a1b988038e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f04a8461a67148848258f8e4b367a1b988038e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9f04a8461a67148848258f8e4b367a1b988038e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9f04a8461a67148848258f8e4b367a1b988038e/comments", "author": null, "committer": null, "parents": [{"sha": "fae3f4598af23b48fed264052e33d5516e31a56c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae3f4598af23b48fed264052e33d5516e31a56c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae3f4598af23b48fed264052e33d5516e31a56c"}], "stats": {"total": 84, "additions": 57, "deletions": 27}, "files": [{"sha": "49a0ba40bbd1863f69acaa5a5b7eb899fafadcb6", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f04a8461a67148848258f8e4b367a1b988038e/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f04a8461a67148848258f8e4b367a1b988038e/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=b9f04a8461a67148848258f8e4b367a1b988038e", "patch": "@@ -1592,15 +1592,25 @@ Function::build_defer_wrapper(Gogo* gogo, Named_object* named_function,\n       && !this->type_->results()->empty()\n       && !this->type_->results()->front().name().empty())\n     {\n-      // If the result variables are named, we need to return them\n-      // again, because they might have been changed by a defer\n-      // function.\n+      // If the result variables are named, and we are returning from\n+      // this function rather than panicing through it, we need to\n+      // return them again, because they might have been changed by a\n+      // defer function.  The runtime routines set the defer_stack\n+      // variable to true if we are returning from this function.\n       retval = this->return_value(gogo, named_function, end_loc,\n \t\t\t\t  &stmt_list);\n       set = fold_build2_loc(end_loc, MODIFY_EXPR, void_type_node,\n \t\t\t    DECL_RESULT(this->fndecl_), retval);\n       ret_stmt = fold_build1_loc(end_loc, RETURN_EXPR, void_type_node, set);\n-      append_to_statement_list(ret_stmt, &stmt_list);\n+\n+      Expression* ref =\n+\tExpression::make_temporary_reference(this->defer_stack_, end_loc);\n+      tree tref = ref->get_tree(&context);\n+      tree s = build3_loc(end_loc, COND_EXPR, void_type_node, tref,\n+\t\t\t  ret_stmt, NULL_TREE);\n+\n+      append_to_statement_list(s, &stmt_list);\n+\n     }\n   \n   go_assert(*fini == NULL_TREE);"}, {"sha": "4a89ca80ba531066cc9b5f39669610b2f265b2a4", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f04a8461a67148848258f8e4b367a1b988038e/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f04a8461a67148848258f8e4b367a1b988038e/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=b9f04a8461a67148848258f8e4b367a1b988038e", "patch": "@@ -2976,27 +2976,27 @@ Function::determine_types()\n     this->block_->determine_types();\n }\n \n-// Get a pointer to the variable holding the defer stack for this\n-// function, making it if necessary.  At least at present, the value\n-// of this variable is not used.  However, a pointer to this variable\n-// is used as a marker for the functions on the defer stack associated\n-// with this function.  Doing things this way permits inlining a\n+// Get a pointer to the variable representing the defer stack for this\n+// function, making it if necessary.  The value of the variable is set\n+// by the runtime routines to true if the function is returning,\n+// rather than panicing through.  A pointer to this variable is used\n+// as a marker for the functions on the defer stack associated with\n+// this function.  A function-specific variable permits inlining a\n // function which uses defer.\n \n Expression*\n Function::defer_stack(source_location location)\n {\n-  Type* t = Type::make_pointer_type(Type::make_void_type());\n   if (this->defer_stack_ == NULL)\n     {\n-      Expression* n = Expression::make_nil(location);\n+      Type* t = Type::lookup_bool_type();\n+      Expression* n = Expression::make_boolean(false, location);\n       this->defer_stack_ = Statement::make_temporary(t, n, location);\n       this->defer_stack_->set_is_address_taken();\n     }\n   Expression* ref = Expression::make_temporary_reference(this->defer_stack_,\n \t\t\t\t\t\t\t location);\n-  Expression* addr = Expression::make_unary(OPERATOR_AND, ref, location);\n-  return Expression::make_unsafe_cast(t, addr, location);\n+  return Expression::make_unary(OPERATOR_AND, ref, location);\n }\n \n // Export the function."}, {"sha": "a7828edeb2e09a9bf4332a65b8c776604c11fac2", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f04a8461a67148848258f8e4b367a1b988038e/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f04a8461a67148848258f8e4b367a1b988038e/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=b9f04a8461a67148848258f8e4b367a1b988038e", "patch": "@@ -165,10 +165,10 @@ DEF_GO_RUNTIME(SET_DEFER_RETADDR, \"__go_set_defer_retaddr\", P1(POINTER),\n \t       R1(BOOL))\n \n // Check for a deferred function in an exception handler.\n-DEF_GO_RUNTIME(CHECK_DEFER, \"__go_check_defer\", P1(POINTER), R0())\n+DEF_GO_RUNTIME(CHECK_DEFER, \"__go_check_defer\", P1(BOOLPTR), R0())\n \n // Run deferred functions.\n-DEF_GO_RUNTIME(UNDEFER, \"__go_undefer\", P1(POINTER), R0())\n+DEF_GO_RUNTIME(UNDEFER, \"__go_undefer\", P1(BOOLPTR), R0())\n \n // Panic with a runtime error.\n DEF_GO_RUNTIME(RUNTIME_ERROR, \"__go_runtime_error\", P1(INT), R0())\n@@ -207,7 +207,7 @@ DEF_GO_RUNTIME(GO, \"__go_go\", P2(FUNC_PTR, POINTER), R0())\n \n \n // Defer a function.\n-DEF_GO_RUNTIME(DEFER, \"__go_defer\", P3(POINTER, FUNC_PTR, POINTER), R0())\n+DEF_GO_RUNTIME(DEFER, \"__go_defer\", P3(BOOLPTR, FUNC_PTR, POINTER), R0())\n \n \n // Run a select statement."}, {"sha": "82be11290289070ec8f57d04a3e73806d69834a0", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f04a8461a67148848258f8e4b367a1b988038e/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f04a8461a67148848258f8e4b367a1b988038e/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=b9f04a8461a67148848258f8e4b367a1b988038e", "patch": "@@ -2539,11 +2539,10 @@ Return_statement::do_traverse_assignments(Traverse_assignments* tassign)\n \n // Lower a return statement.  If we are returning a function call\n // which returns multiple values which match the current function,\n-// split up the call's results.  If the function has named result\n-// variables, and the return statement lists explicit values, then\n-// implement it by assigning the values to the result variables and\n-// changing the statement to not list any values.  This lets\n-// panic/recover work correctly.\n+// split up the call's results.  If the return statement lists\n+// explicit values, implement this statement by assigning the values\n+// to the result variables and change this statement to a naked\n+// return.  This lets panic/recover work correctly.\n \n Statement*\n Return_statement::do_lower(Gogo*, Named_object* function, Block* enclosing,"}, {"sha": "1f116eb38c950fbac38cf30fc3eca2c303ca14f2", "filename": "libgo/runtime/go-defer.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f04a8461a67148848258f8e4b367a1b988038e/libgo%2Fruntime%2Fgo-defer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f04a8461a67148848258f8e4b367a1b988038e/libgo%2Fruntime%2Fgo-defer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-defer.c?ref=b9f04a8461a67148848258f8e4b367a1b988038e", "patch": "@@ -13,7 +13,7 @@\n /* This function is called each time we need to defer a call.  */\n \n void\n-__go_defer (void *frame, void (*pfn) (void *), void *arg)\n+__go_defer (_Bool *frame, void (*pfn) (void *), void *arg)\n {\n   struct __go_defer_stack *n;\n \n@@ -34,7 +34,7 @@ __go_defer (void *frame, void (*pfn) (void *), void *arg)\n /* This function is called when we want to undefer the stack.  */\n \n void\n-__go_undefer (void *frame)\n+__go_undefer (_Bool *frame)\n {\n   if (__go_panic_defer == NULL)\n     return;\n@@ -53,6 +53,12 @@ __go_undefer (void *frame)\n \n       __go_panic_defer->__defer = d->__next;\n       __go_free (d);\n+\n+      /* Since we are executing a defer function here, we know we are\n+\t returning from the calling function.  If the calling\n+\t function, or one of its callees, paniced, then the defer\n+\t functions would be executed by __go_panic.  */\n+      *frame = 1;\n     }\n }\n "}, {"sha": "0b20e8f6e7897dd5ef49ec9f4fd7796fd7504d15", "filename": "libgo/runtime/go-defer.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f04a8461a67148848258f8e4b367a1b988038e/libgo%2Fruntime%2Fgo-defer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f04a8461a67148848258f8e4b367a1b988038e/libgo%2Fruntime%2Fgo-defer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-defer.h?ref=b9f04a8461a67148848258f8e4b367a1b988038e", "patch": "@@ -13,9 +13,10 @@ struct __go_defer_stack\n   /* The next entry in the stack.  */\n   struct __go_defer_stack *__next;\n \n-  /* The frame pointer for the function which called this defer\n-     statement.  */\n-  void *__frame;\n+  /* The stack variable for the function which called this defer\n+     statement.  This is set to 1 if we are returning from that\n+     function, 0 if we are panicing through it.  */\n+  _Bool *__frame;\n \n   /* The value of the panic stack when this function is deferred.\n      This function can not recover this value from the panic stack."}, {"sha": "c39ea9f9303dcb3d783188349e90cfc9fc63a064", "filename": "libgo/runtime/go-panic.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f04a8461a67148848258f8e4b367a1b988038e/libgo%2Fruntime%2Fgo-panic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f04a8461a67148848258f8e4b367a1b988038e/libgo%2Fruntime%2Fgo-panic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-panic.c?ref=b9f04a8461a67148848258f8e4b367a1b988038e", "patch": "@@ -87,6 +87,12 @@ __go_panic (struct __go_empty_interface arg)\n \t      /* __go_unwind_stack should not return.  */\n \t      abort ();\n \t    }\n+\n+\t  /* Because we executed that defer function by a panic, and\n+\t     it did not call recover, we know that we are not\n+\t     returning from the calling function--we are panicing\n+\t     through it.  */\n+\t  *d->__frame = 0;\n \t}\n \n       __go_panic_defer->__defer = d->__next;"}, {"sha": "e64cf903d9f505dd38b05eea8d4c3cb1b26803b7", "filename": "libgo/runtime/go-unwind.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9f04a8461a67148848258f8e4b367a1b988038e/libgo%2Fruntime%2Fgo-unwind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9f04a8461a67148848258f8e4b367a1b988038e/libgo%2Fruntime%2Fgo-unwind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unwind.c?ref=b9f04a8461a67148848258f8e4b367a1b988038e", "patch": "@@ -44,7 +44,7 @@ static const _Unwind_Exception_Class __go_exception_class =\n    continue unwinding.  */\n \n void\n-__go_check_defer (void *frame)\n+__go_check_defer (_Bool *frame)\n {\n   struct _Unwind_Exception *hdr;\n \n@@ -103,8 +103,12 @@ __go_check_defer (void *frame)\n       if (was_recovered)\n \t{\n \t  /* Just return and continue executing Go code.  */\n+\t  *frame = 1;\n \t  return;\n \t}\n+\n+      /* We are panicing through this function.  */\n+      *frame = 0;\n     }\n   else if (__go_panic_defer->__defer != NULL\n \t   && __go_panic_defer->__defer->__pfn == NULL\n@@ -118,6 +122,10 @@ __go_check_defer (void *frame)\n       d = __go_panic_defer->__defer;\n       __go_panic_defer->__defer = d->__next;\n       __go_free (d);\n+\n+      /* We are returning from this function.  */\n+      *frame = 1;\n+\n       return;\n     }\n "}]}