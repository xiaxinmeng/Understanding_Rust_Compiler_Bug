{"sha": "c7f65aae9e5e6a0d0a82148278a9341e1769376e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmNjVhYWU5ZTVlNmEwZDBhODIxNDgyNzhhOTM0MWUxNzY5Mzc2ZQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-06-10T13:29:12Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-06-10T13:29:12Z"}, "message": "[AArch64] Fix layout of frame layout code.\n\nFrom-SVN: r211409", "tree": {"sha": "e00277efdfeffb647b5a73ce90754777106f53b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e00277efdfeffb647b5a73ce90754777106f53b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7f65aae9e5e6a0d0a82148278a9341e1769376e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f65aae9e5e6a0d0a82148278a9341e1769376e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f65aae9e5e6a0d0a82148278a9341e1769376e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f65aae9e5e6a0d0a82148278a9341e1769376e/comments", "author": null, "committer": null, "parents": [{"sha": "e29b8d5b7cdb94a9caf5ea29b163543297870851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29b8d5b7cdb94a9caf5ea29b163543297870851", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29b8d5b7cdb94a9caf5ea29b163543297870851"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "9fc32cc1cfac849d490cecc818fca142a5fb6f86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f65aae9e5e6a0d0a82148278a9341e1769376e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f65aae9e5e6a0d0a82148278a9341e1769376e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7f65aae9e5e6a0d0a82148278a9341e1769376e", "patch": "@@ -1,3 +1,8 @@\n+2014-06-10  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_save_or_restore_fprs)\n+\t(aarch64_save_or_restore_callee_save_registers): Fix layout.\n+\n 2014-06-10  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_save_or_restore_fprs): Fix"}, {"sha": "3eb18e969d7cb17c40bd4c895741f9448cda4d29", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f65aae9e5e6a0d0a82148278a9341e1769376e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f65aae9e5e6a0d0a82148278a9341e1769376e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c7f65aae9e5e6a0d0a82148278a9341e1769376e", "patch": "@@ -1917,7 +1917,6 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n   rtx (*gen_mem_ref)(enum machine_mode, rtx)\n     = (frame_pointer_needed)? gen_frame_mem : gen_rtx_MEM;\n \n-\n   for (regno = V0_REGNUM; regno <= V31_REGNUM; regno++)\n     {\n       if (aarch64_register_saved_on_entry (regno))\n@@ -1935,10 +1934,12 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n \t    {\n \t      /* Empty loop.  */\n \t    }\n+\n \t  if (regno2 <= V31_REGNUM &&\n \t      aarch64_register_saved_on_entry (regno2))\n \t    {\n \t      rtx mem2;\n+\n \t      /* Next highest register to be saved.  */\n \t      mem2 = gen_mem_ref (DFmode,\n \t\t\t\t  plus_constant\n@@ -1964,10 +1965,10 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n \t\t\t\tgen_rtx_REG (DFmode, regno2));\n \t\t}\n \n-\t\t  /* The first part of a frame-related parallel insn\n-\t\t     is always assumed to be relevant to the frame\n-\t\t     calculations; subsequent parts, are only\n-\t\t     frame-related if explicitly marked.  */\n+\t      /* The first part of a frame-related parallel insn is\n+\t\t always assumed to be relevant to the frame\n+\t\t calculations; subsequent parts, are only\n+\t\t frame-related if explicitly marked.  */\n \t      RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, 1)) = 1;\n \t      regno = regno2;\n \t      start_offset += increment * 2;\n@@ -1987,15 +1988,14 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n     }\n-\n }\n \n \n /* offset from the stack pointer of where the saves and\n    restore's have to happen.  */\n static void\n-aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT offset,\n-\t\t\t\t\t    bool restore)\n+aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT start_offset,\n+\t\t\t\t\t       bool restore)\n {\n   rtx insn;\n   rtx base_rtx = stack_pointer_rtx;\n@@ -2027,6 +2027,7 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT offset,\n \t      aarch64_register_saved_on_entry (regno2))\n \t    {\n \t      rtx mem2;\n+\n \t      /* Next highest register to be saved.  */\n \t      mem2 = gen_mem_ref (Pmode,\n \t\t\t\t  plus_constant\n@@ -2050,12 +2051,11 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT offset,\n \t\t  add_reg_note (insn, REG_CFA_RESTORE, gen_rtx_REG (DImode, regno2));\n \t\t}\n \n-\t\t  /* The first part of a frame-related parallel insn\n-\t\t     is always assumed to be relevant to the frame\n-\t\t     calculations; subsequent parts, are only\n-\t\t     frame-related if explicitly marked.  */\n-\t      RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0,\n-\t\t\t\t\t    1)) = 1;\n+\t      /* The first part of a frame-related parallel insn is\n+\t\t always assumed to be relevant to the frame\n+\t\t calculations; subsequent parts, are only\n+\t\t frame-related if explicitly marked.  */\n+\t      RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, 1)) = 1;\n \t      regno = regno2;\n \t      start_offset += increment * 2;\n \t    }\n@@ -2075,7 +2075,6 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT offset,\n     }\n \n   aarch64_save_or_restore_fprs (start_offset, increment, restore, base_rtx);\n-\n }\n \n /* AArch64 stack frames generated by this compiler look like:"}]}