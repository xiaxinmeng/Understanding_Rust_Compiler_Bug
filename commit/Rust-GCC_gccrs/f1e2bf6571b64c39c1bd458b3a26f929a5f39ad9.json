{"sha": "f1e2bf6571b64c39c1bd458b3a26f929a5f39ad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFlMmJmNjU3MWI2NGMzOWMxYmQ0NThiM2EyNmY5MjlhNWYzOWFkOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-11-14T11:42:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-11-14T11:42:37Z"}, "message": "[Ada] Fix small regression with others choice in array aggregate\n\nThis change is aimed at fixing a fallout of bumping the default value of\nthe Max_Others_Replicate parameter of the Convert_To_Positional routine.\nThis parameter is responsible for taming the duplication of the\nexpression of an others choice in an array aggregate so that it doesn't\nresult in a code size explosion.\n\nUnfortunately a fine-grained control based on the analysis of the\nexpression is not really possible because this analysis has not been\ndone yet by the time the decision is made in most cases, so the usual\nsyntactic ambiguities of the language come into play and make the\nprocess a bit cumbersome.  For example, it is not possible to\ndistinguish a simple reference to a static constant declared in another\nunit from a call to a parameterless function.\n\nTherefore the change errs on the side of caution and allows the\nduplication only if the expression is unambiguously static and\nsufficiently simple.\n\nFor the following three aggregates, the duplication must be blocked and\nthe elaboration of the aggregates must be done by means of a loop:\n\nwith Q; use Q;\n\nprocedure P is\n\n  A : Arr := (others => Get_Value);\n\n  B : Arr := (others => Get_Other_Value (0));\n\n  C : Arr := (others => Q.Get_Other_Value (1));\n\nbegin\n  null;\nend;\n\npackage Q is\n\n  type Arr is array (1 .. 32) of Integer;\n\n  function Get_Value return Integer;\n\n  function Get_Other_Value (I : integer) return Integer;\n\nend Q;\n\n2018-11-14  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Is_Static_Element): New predicate extracted\n\tfrom...\n\t(Check_Static_Components): ...here.  Call Is_Static_Element on\n\teach element of the component association list, if any.\n\t(Flatten): Duplicate the expression of an others choice only if\n\tit is static or is an aggregate which can itself be flattened.\n\nFrom-SVN: r266135", "tree": {"sha": "6ab1cbf581c5b8f03a381c594797f7bfda40dc05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ab1cbf581c5b8f03a381c594797f7bfda40dc05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1e2bf6571b64c39c1bd458b3a26f929a5f39ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e2bf6571b64c39c1bd458b3a26f929a5f39ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e2bf6571b64c39c1bd458b3a26f929a5f39ad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e2bf6571b64c39c1bd458b3a26f929a5f39ad9/comments", "author": null, "committer": null, "parents": [{"sha": "934d473689fe21e9a7ba0578d2c58da481badc67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934d473689fe21e9a7ba0578d2c58da481badc67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934d473689fe21e9a7ba0578d2c58da481badc67"}], "stats": {"total": 101, "additions": 69, "deletions": 32}, "files": [{"sha": "776d0d92d7fa38164a8149e585a75268681cab15", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e2bf6571b64c39c1bd458b3a26f929a5f39ad9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e2bf6571b64c39c1bd458b3a26f929a5f39ad9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f1e2bf6571b64c39c1bd458b3a26f929a5f39ad9", "patch": "@@ -1,3 +1,12 @@\n+2018-11-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Is_Static_Element): New predicate extracted\n+\tfrom...\n+\t(Check_Static_Components): ...here.  Call Is_Static_Element on\n+\teach element of the component association list, if any.\n+\t(Flatten): Duplicate the expression of an others choice only if\n+\tit is static or is an aggregate which can itself be flattened.\n+\n 2018-11-14  Olivier Hainque  <hainque@adacore.com>\n \n \t* sigtramp-vxworks-target.inc: Fix stack checking test errors in"}, {"sha": "2eff7512c76dcb2d5d716b7a9172c4a7d93945bb", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 60, "deletions": 32, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1e2bf6571b64c39c1bd458b3a26f929a5f39ad9/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1e2bf6571b64c39c1bd458b3a26f929a5f39ad9/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=f1e2bf6571b64c39c1bd458b3a26f929a5f39ad9", "patch": "@@ -4302,8 +4302,6 @@ package body Exp_Aggr is\n       --  Check whether all components of the aggregate are compile-time known\n       --  values, and can be passed as is to the back-end without further\n       --  expansion.\n-      --  An Iterated_Component_Association is treated as nonstatic, but there\n-      --  are possibilities for optimization here.\n \n       function Flatten\n         (N   : Node_Id;\n@@ -4317,14 +4315,23 @@ package body Exp_Aggr is\n       --  Return True iff the array N is flat (which is not trivial in the case\n       --  of multidimensional aggregates).\n \n+      function Is_Static_Element (N : Node_Id) return Boolean;\n+      --  Return True if N, an element of a component association list, i.e.\n+      --  N_Component_Association or N_Iterated_Component_Association, has a\n+      --  compile-time known value and can be passed as is to the back-end\n+      --  without further expansion.\n+      --  An Iterated_Component_Association is treated as nonstatic in most\n+      --  cases for now, so there are possibilities for optimization.\n+\n       -----------------------------\n       -- Check_Static_Components --\n       -----------------------------\n \n       --  Could use some comments in this body ???\n \n       procedure Check_Static_Components is\n-         Expr : Node_Id;\n+         Assoc : Node_Id;\n+         Expr  : Node_Id;\n \n       begin\n          Static_Components := True;\n@@ -4350,30 +4357,14 @@ package body Exp_Aggr is\n          if Nkind (N) = N_Aggregate\n            and then Present (Component_Associations (N))\n          then\n-            Expr := First (Component_Associations (N));\n-            while Present (Expr) loop\n-               if Nkind_In (Expression (Expr), N_Integer_Literal,\n-                                               N_Real_Literal)\n-               then\n-                  null;\n-\n-               elsif Is_Entity_Name (Expression (Expr))\n-                 and then Present (Entity (Expression (Expr)))\n-                 and then Ekind (Entity (Expression (Expr))) =\n-                                                       E_Enumeration_Literal\n-               then\n-                  null;\n-\n-               elsif Nkind (Expression (Expr)) /= N_Aggregate\n-                 or else not Compile_Time_Known_Aggregate (Expression (Expr))\n-                 or else Expansion_Delayed (Expression (Expr))\n-                 or else Nkind (Expr) = N_Iterated_Component_Association\n-               then\n+            Assoc := First (Component_Associations (N));\n+            while Present (Assoc) loop\n+               if not Is_Static_Element (Assoc) then\n                   Static_Components := False;\n                   exit;\n                end if;\n \n-               Next (Expr);\n+               Next (Assoc);\n             end loop;\n          end if;\n       end Check_Static_Components;\n@@ -4553,8 +4544,8 @@ package body Exp_Aggr is\n                                 Cunit_Entity (Current_Sem_Unit);\n \n                            begin\n-                              --  Check if duplication OK and if so continue\n-                              --  processing.\n+                              --  Check if duplication is always OK and, if so,\n+                              --  continue processing.\n \n                               if Restriction_Active (No_Elaboration_Code)\n                                 or else Restriction_Active (No_Implicit_Loops)\n@@ -4571,17 +4562,23 @@ package body Exp_Aggr is\n                               then\n                                  null;\n \n-                              --  If duplication not OK, then we return False\n-                              --  if the replication count is too high\n+                              --  If duplication is not always OK, continue\n+                              --  only if either the element is static or is\n+                              --  an aggregate which can itself be flattened,\n+                              --  and the replication count is not too high.\n \n-                              elsif Rep_Count > Max_Others_Replicate then\n-                                 return False;\n+                              elsif (Is_Static_Element (Elmt)\n+                                       or else\n+                                     (Nkind (Expression (Elmt)) = N_Aggregate\n+                                       and then Present (Next_Index (Ix))))\n+                                and then Rep_Count <= Max_Others_Replicate\n+                              then\n+                                 null;\n \n-                              --  Continue on if duplication not OK, but the\n-                              --  replication count is not excessive.\n+                              --  Return False in all the other cases\n \n                               else\n-                                 null;\n+                                 return False;\n                               end if;\n                            end;\n                         end if;\n@@ -4706,6 +4703,37 @@ package body Exp_Aggr is\n          end if;\n       end Is_Flat;\n \n+      -------------------------\n+      --  Is_Static_Element  --\n+      -------------------------\n+\n+      function Is_Static_Element (N : Node_Id) return Boolean is\n+         Expr : constant Node_Id := Expression (N);\n+\n+      begin\n+         if Nkind_In (Expr, N_Integer_Literal, N_Real_Literal) then\n+            return True;\n+\n+         elsif Is_Entity_Name (Expr)\n+           and then Present (Entity (Expr))\n+           and then Ekind (Entity (Expr)) = E_Enumeration_Literal\n+         then\n+            return True;\n+\n+         elsif Nkind (N) = N_Iterated_Component_Association then\n+            return False;\n+\n+         elsif Nkind (Expr) = N_Aggregate\n+           and then Compile_Time_Known_Aggregate (Expr)\n+           and then not Expansion_Delayed (Expr)\n+         then\n+            return True;\n+\n+         else\n+            return False;\n+         end if;\n+      end Is_Static_Element;\n+\n    --  Start of processing for Convert_To_Positional\n \n    begin"}]}