{"sha": "7932a3db217873015c39424cdad931e0234be710", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzMmEzZGIyMTc4NzMwMTVjMzk0MjRjZGFkOTMxZTAyMzRiZTcxMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-11-22T12:23:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-11-22T12:23:59Z"}, "message": "bitmap.h (struct bitmap_obstack): New obstack type.\n\n\t* bitmap.h (struct bitmap_obstack): New obstack type.\n\t(struct bitmap_head_def): Replace using_obstack with obstack\n\tpointer.\n\t(bitmap_default_obstack): New.\n\t(bitmap_initialize): Make inline, does not do allocation.\n\t(bitmap_release_memory): Remove.\n\t(bitmap_obstack_initialize, bitmap_obstack_release): Declare.\n\t(bitmap_obstack_alloc, bitmap_malloc_alloc, bitmap_gc_alloc,\n\tbitmap_obstack_free, bitmap_malloc_free): Declare.\n\t(BITMAP_OBSTACK_ALLOC, BITMAP_GGC_ALLOC, BITMAP_XMALLOC): Adjust.\n\t(BITMAP_FREE): Replace with ...\n\t(BITMAP_OBSTACK_FREE): ... this.\n\t(BITMAP_XFREE): Adjust.\n\t(BITMAP_INIT_ONCE): Remove.\n\t* bitmap.c (bitmap_obstack, bitmap_obstack_init, bitmap_free: Remove.\n\t(bitmap_default_obstack): New.\n\t(bitmap_elem_to_freelist): Adjust.\n\t(bitmap_element_allocate): Adjust. Break initialization into ...\n\t(bitmap_obstack_initialize): ... here.\n\t(bitmap_release_memory): Replace with ...\n\t(bitmap_obstack_release): ... this.\n\t(bitmap_obstack_alloc, bitmap_malloc_alloc, bitmap_gc_alloc,\n\tbitmap_obstack_free, bitmap_malloc_free): New.\n\t(bitmap_ior_and_compl, bitmap_ior_and_compl_into): Use\n\tbitmap_initialize.\n\t(bitmap_initialize): Move to bitmap.h.\n\t* gengtype.c (open_base_files): Add obstack.h to ifiles.\n\t* Makefile.in (BASIC_BLOCK_H, REGS_H): Add obstack.h.\n\t* basic-block.h (INIT_REG_SET): Allocate from reg_obstack.\n\t(INITIALIZE_REG_SET): Remove.\n\t(FREE_REG_SET): Use BITMAP_OBSTACK_FREE.\n\t(INIT_ONCE_REG_SET, MAX_REGNO_REG_SET): Remove.\n\t(flow_obstack): Do not declare.\n\t(reg_obstack): Declare.\n\t* regs.h: Include obstack.h.\n\t* tree-optimize.c (tree_rest_of_compilation): Initialize and\n\trelease bitmap obstack here.\n\t* bb-reorder.c: #include regs, not basic-block.\n\t(fix_crossing_conditional_branches): Allocate regsets from\n\treg_obstack.\n\t* bt-load.c: Do not inlude bitmap.h, sbitmap.h, basic-block.h or\n\tobstack.h.\n\t* caller-save.c: Include regs.h earlier.\n\t* cfg.c: Do not include basic-block.h or obstack.h.\n\t(reg_obstack): Define.\n\t* cfganal.c: Include obstack.h\n\t* cfgcleanyp.c: Do not include basic-block.h. Include regs.h\n\tearlier.\n\t* cfglayout.c: Do not include obstack.h.\n\t(flow_obstack): Remove declaration.\n\t(cfg_layout_duplicate_bb): Use reg_obstack.\n\t* cfgloop.c, cfgloopanal.c, cfgloopmanip.c: Include obstack.h.\n\t* cfgrtl.c (rtl_split_block): Use reg_obstack.\n\t(force_nonfallthru_and_redirect, rtl_split_edge): Likewise.\n\t(safe_insert_insn_on_edge): Use OBSTACK_ALLOC_REG_SET, adjust.\n\t(cfg_layout_split_edge): Use reg_obstack.\n\t* cse.c: Include regs.h earlier.\n\t* ddg.c: Do not include basic-block.h.\n\t* dominance.c: Inlude obstack.h.\n\t* flow.c (update_life_info): Use OBSTACK_ALLOC_REG_SET, adjust.\n\t(calculate_global_regs_live): Likewise.\n\t(allocate_bb_life_data): Use reg_obstack.\n\t(init_propagate_block_info): Use OBSTACK_ALLOC_REGSET.\n\t* global.c: Do not include basic-block.h.\n\t(build_insn_chain): Use OBSTACK_ALLOC_REG_SET, adjust.\n\t* graph.c: Include obstack.h.\n\t* haifa-sched.c: Do not include basic-block.h.\n\t* ifcvt.c: Use OBSTACK_ALLOC_REG_SET, adjust.\n\t* local-alloc.c: Do not include basic-block.h.\n\t* loop-init.c, loop-invariant.c: Include obstack.h.\n\t* loop-iv.c: Likewise.\n\t(simplify_using_initial_values): Use OBSTACK_ALLOC_REG_SET,\n\tadjust.\n\t* loop-unroll.c, loop-unswitch.c: Inlude obstack.h.\n\t* modulo-sched.c: Do not include basic-block.h.\n\t* passes.c (rest_of_handle_final): Do not call\n\tregset_release_memory.\n\t* ra-debug.c: Include regs.h earlier. Do not include\n\tbasic-block.h.\n\t* recog.c (peephole2_optimize): Use OBSTACK_ALLOC_REG_SET, adjust.\n\t* regclass.c (init_reg_sets): Do not call INIT_ONCE_REG_SET.\n\t(allocate_reg_info): Do not call MAX_REGNO_REG_SET.\n\t(regset_release_memory): Remove.\n\t* resource.c: Do not include basic-block.h.\n\t* rtlanal.c: Do not include basic-block.h.\n\t* sbitmap.c: Include obstack.h.\n\t* sched-deps.c: Do not include basic-block.h.\n\t(reg_pending_sets_head, reg_pending_clobbers_head,\n\treg_pending_uses_head): Remove.\n\t(init_deps_global): Use OBSTACK_ALLOC_REG_SET.\n\t* sched-ebb.c: Do not include basic-block.h.\n\t* sched-rgn.c: Likewise.\n\t* tree-if-conv.c (get_loop_body_in_if_conv_order): Use\n\tBITMAP_XFREE.\n\t* tree-outof-ssa.c (perform_edge_inserts): Use BITMAP_XFREE.\n\t* tree-sra.c (decide_instantiations): Adjust bitmap\n\tinitialization.\n\t* tree-ssa-dce.c: Include obstack.h.\n\t* tree-ssa-pre.c (grand_bitmap_obstack): Make a bitmap_obstack.\n\t(value_insert_into_set_bitmap): Remove useless bitmap_clear.\n\t(bitmap_set_new): Likewise.\n\t(init_pre): Initialize bitmap obstack.\n\t(fini_pre): Release bitmap obstack.\n\t* tree-ssanames.c (ssa_names_to_rewrite): Make static.\n\t(marked_for_rewrite_p): ssa_names_to_rewrite is never NULL.\n\t(mark_for_rewrite, unmark_for_rewrite): Likewise.\n\t(marked_ssa_names): Likewise.\n\t(init_ssanames): Use BITMAP_XMALLOC.\n\t(fini_ssanames): Use BITMAP_XFREE.\n\t* web.c: Include obstack.h\n\nFrom-SVN: r91009", "tree": {"sha": "bb82fde51c2f61d86523137794f8e94bac6c2fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb82fde51c2f61d86523137794f8e94bac6c2fb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7932a3db217873015c39424cdad931e0234be710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7932a3db217873015c39424cdad931e0234be710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7932a3db217873015c39424cdad931e0234be710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7932a3db217873015c39424cdad931e0234be710/comments", "author": null, "committer": null, "parents": [{"sha": "e99f332f05fbe3e18d628a91cb363dc67047e19f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99f332f05fbe3e18d628a91cb363dc67047e19f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e99f332f05fbe3e18d628a91cb363dc67047e19f"}], "stats": {"total": 666, "additions": 395, "deletions": 271}, "files": [{"sha": "6b8a2172c37e410796f604bfd5fbc83dfb7f663c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -1,3 +1,116 @@\n+2004-11-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* bitmap.h (struct bitmap_obstack): New obstack type.\n+\t(struct bitmap_head_def): Replace using_obstack with obstack\n+\tpointer.\n+\t(bitmap_default_obstack): New.\n+\t(bitmap_initialize): Make inline, does not do allocation.\n+\t(bitmap_release_memory): Remove.\n+\t(bitmap_obstack_initialize, bitmap_obstack_release): Declare.\n+\t(bitmap_obstack_alloc, bitmap_malloc_alloc, bitmap_gc_alloc,\n+\tbitmap_obstack_free, bitmap_malloc_free): Declare.\n+\t(BITMAP_OBSTACK_ALLOC, BITMAP_GGC_ALLOC, BITMAP_XMALLOC): Adjust.\n+\t(BITMAP_FREE): Replace with ...\n+\t(BITMAP_OBSTACK_FREE): ... this.\n+\t(BITMAP_XFREE): Adjust.\n+\t(BITMAP_INIT_ONCE): Remove.\n+\t* bitmap.c (bitmap_obstack, bitmap_obstack_init, bitmap_free: Remove.\n+\t(bitmap_default_obstack): New.\n+\t(bitmap_elem_to_freelist): Adjust.\n+\t(bitmap_element_allocate): Adjust. Break initialization into ...\n+\t(bitmap_obstack_initialize): ... here.\n+\t(bitmap_release_memory): Replace with ...\n+\t(bitmap_obstack_release): ... this.\n+\t(bitmap_obstack_alloc, bitmap_malloc_alloc, bitmap_gc_alloc,\n+\tbitmap_obstack_free, bitmap_malloc_free): New.\n+\t(bitmap_ior_and_compl, bitmap_ior_and_compl_into): Use\n+\tbitmap_initialize.\n+\t(bitmap_initialize): Move to bitmap.h.\n+\t* gengtype.c (open_base_files): Add obstack.h to ifiles.\n+\t* Makefile.in (BASIC_BLOCK_H, REGS_H): Add obstack.h.\n+\t* basic-block.h (INIT_REG_SET): Allocate from reg_obstack.\n+\t(INITIALIZE_REG_SET): Remove.\n+\t(FREE_REG_SET): Use BITMAP_OBSTACK_FREE.\n+\t(INIT_ONCE_REG_SET, MAX_REGNO_REG_SET): Remove.\n+\t(flow_obstack): Do not declare.\n+\t(reg_obstack): Declare.\n+\t* regs.h: Include obstack.h.\n+\t* tree-optimize.c (tree_rest_of_compilation): Initialize and\n+\trelease bitmap obstack here.\n+\t* bb-reorder.c: #include regs, not basic-block.\n+\t(fix_crossing_conditional_branches): Allocate regsets from\n+\treg_obstack.\n+\t* bt-load.c: Do not inlude bitmap.h, sbitmap.h, basic-block.h or\n+\tobstack.h.\n+\t* caller-save.c: Include regs.h earlier.\n+\t* cfg.c: Do not include basic-block.h or obstack.h.\n+\t(reg_obstack): Define.\n+\t* cfganal.c: Include obstack.h\n+\t* cfgcleanyp.c: Do not include basic-block.h. Include regs.h\n+\tearlier.\n+\t* cfglayout.c: Do not include obstack.h.\n+\t(flow_obstack): Remove declaration.\n+\t(cfg_layout_duplicate_bb): Use reg_obstack.\n+\t* cfgloop.c, cfgloopanal.c, cfgloopmanip.c: Include obstack.h.\n+\t* cfgrtl.c (rtl_split_block): Use reg_obstack.\n+\t(force_nonfallthru_and_redirect, rtl_split_edge): Likewise.\n+\t(safe_insert_insn_on_edge): Use OBSTACK_ALLOC_REG_SET, adjust.\n+\t(cfg_layout_split_edge): Use reg_obstack.\n+\t* cse.c: Include regs.h earlier.\n+\t* ddg.c: Do not include basic-block.h.\n+\t* dominance.c: Inlude obstack.h.\n+\t* flow.c (update_life_info): Use OBSTACK_ALLOC_REG_SET, adjust.\n+\t(calculate_global_regs_live): Likewise.\n+\t(allocate_bb_life_data): Use reg_obstack.\n+\t(init_propagate_block_info): Use OBSTACK_ALLOC_REGSET.\n+\t* global.c: Do not include basic-block.h.\n+\t(build_insn_chain): Use OBSTACK_ALLOC_REG_SET, adjust.\n+\t* graph.c: Include obstack.h.\n+\t* haifa-sched.c: Do not include basic-block.h.\n+\t* ifcvt.c: Use OBSTACK_ALLOC_REG_SET, adjust.\n+\t* local-alloc.c: Do not include basic-block.h.\n+\t* loop-init.c, loop-invariant.c: Include obstack.h.\n+\t* loop-iv.c: Likewise.\n+\t(simplify_using_initial_values): Use OBSTACK_ALLOC_REG_SET,\n+\tadjust.\n+\t* loop-unroll.c, loop-unswitch.c: Inlude obstack.h.\n+\t* modulo-sched.c: Do not include basic-block.h.\n+\t* passes.c (rest_of_handle_final): Do not call\n+\tregset_release_memory.\n+\t* ra-debug.c: Include regs.h earlier. Do not include\n+\tbasic-block.h.\n+\t* recog.c (peephole2_optimize): Use OBSTACK_ALLOC_REG_SET, adjust.\n+\t* regclass.c (init_reg_sets): Do not call INIT_ONCE_REG_SET.\n+\t(allocate_reg_info): Do not call MAX_REGNO_REG_SET.\n+\t(regset_release_memory): Remove.\n+\t* resource.c: Do not include basic-block.h.\n+\t* rtlanal.c: Do not include basic-block.h.\n+\t* sbitmap.c: Include obstack.h.\n+\t* sched-deps.c: Do not include basic-block.h.\n+\t(reg_pending_sets_head, reg_pending_clobbers_head,\n+\treg_pending_uses_head): Remove.\n+\t(init_deps_global): Use OBSTACK_ALLOC_REG_SET.\n+\t* sched-ebb.c: Do not include basic-block.h.\n+\t* sched-rgn.c: Likewise.\n+\t* tree-if-conv.c (get_loop_body_in_if_conv_order): Use\n+\tBITMAP_XFREE.\n+\t* tree-outof-ssa.c (perform_edge_inserts): Use BITMAP_XFREE.\n+\t* tree-sra.c (decide_instantiations): Adjust bitmap\n+\tinitialization.\n+\t* tree-ssa-dce.c: Include obstack.h.\n+\t* tree-ssa-pre.c (grand_bitmap_obstack): Make a bitmap_obstack.\n+\t(value_insert_into_set_bitmap): Remove useless bitmap_clear.\n+\t(bitmap_set_new): Likewise.\n+\t(init_pre): Initialize bitmap obstack.\n+\t(fini_pre): Release bitmap obstack.\n+\t* tree-ssanames.c (ssa_names_to_rewrite): Make static.\n+\t(marked_for_rewrite_p): ssa_names_to_rewrite is never NULL.\n+\t(mark_for_rewrite, unmark_for_rewrite): Likewise.\n+\t(marked_ssa_names): Likewise.\n+\t(init_ssanames): Use BITMAP_XMALLOC.\n+\t(fini_ssanames): Use BITMAP_XFREE.\n+\t* web.c: Include obstack.h\n+\n 2004-11-22  Nick Clifton  <nickc@redhat.com>\n \n \t* sbitmap.c (sbitmap_union_of_preds): Set 'e' to the next edge"}, {"sha": "879b0571abfd8b60940d5a29c4440efa763afa75", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -691,7 +691,7 @@ PARAMS_H = params.h params.def\n TREE_H = tree.h tree.def $(MACHMODE_H) tree-check.h builtins.def \\\n           input.h statistics.h vec.h\n BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h varray.h $(PARTITION_H) \\\n-          hard-reg-set.h cfghooks.h\n+          hard-reg-set.h cfghooks.h $(OBSTACK_H)\n COVERAGE_H = coverage.h gcov-io.h gcov-iov.h\n DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n@@ -700,7 +700,7 @@ EMIT_RTL_H = emit-rtl.h\n FLAGS_H = flags.h options.h\n EXPR_H = expr.h insn-config.h function.h $(RTL_H) $(FLAGS_H) $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n OPTABS_H = optabs.h insn-codes.h\n-REGS_H = regs.h varray.h $(MACHMODE_H)\n+REGS_H = regs.h varray.h $(MACHMODE_H) $(OBSTACK_H)\n RA_H = ra.h bitmap.h sbitmap.h hard-reg-set.h insn-modes.h\n RESOURCE_H = resource.h hard-reg-set.h\n SCHED_INT_H = sched-int.h $(INSN_ATTR_H) $(BASIC_BLOCK_H) $(RTL_H)"}, {"sha": "2b1294fc8ecdf5444113ccf81240cdf195a6af0c", "filename": "gcc/basic-block.h", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -38,7 +38,7 @@ typedef bitmap_head regset_head;\n typedef bitmap regset;\n \n /* Initialize a new regset.  */\n-#define INIT_REG_SET(HEAD) bitmap_initialize (HEAD, 1)\n+#define INIT_REG_SET(HEAD) bitmap_initialize (HEAD, &reg_obstack)\n \n /* Clear a register set by freeing up the linked list.  */\n #define CLEAR_REG_SET(HEAD) bitmap_clear (HEAD)\n@@ -104,26 +104,15 @@ typedef bitmap_iterator reg_set_iterator;\n /* Allocate a register set with oballoc.  */\n #define OBSTACK_ALLOC_REG_SET(OBSTACK) BITMAP_OBSTACK_ALLOC (OBSTACK)\n \n-/* Initialize a register set.  Returns the new register set.  */\n-#define INITIALIZE_REG_SET(HEAD) bitmap_initialize (&HEAD, 1)\n-\n /* Do any cleanup needed on a regset when it is no longer used.  */\n-#define FREE_REG_SET(REGSET) BITMAP_FREE(REGSET)\n+#define FREE_REG_SET(REGSET) BITMAP_OBSTACK_FREE(REGSET)\n \n /* Allocate a register set with xmalloc.  */\n #define XMALLOC_REG_SET() BITMAP_XMALLOC ()\n \n /* Free a register set.  */\n #define XFREE_REG_SET(REGSET) BITMAP_XFREE (REGSET)\n \n-/* Do any one-time initializations needed for regsets.  */\n-#define INIT_ONCE_REG_SET() BITMAP_INIT_ONCE ()\n-\n-/* Grow any tables needed when the number of registers is calculated\n-   or extended.  For the linked list allocation, nothing needs to\n-   be done, other than zero the statistics on the first allocation.  */\n-#define MAX_REGNO_REG_SET(NUM_REGS, NEW_P, RENUMBER_P)\n-\n /* Type we use to hold basic block counters.  Should be at least\n    64bit.  Although a counter cannot be negative, we use a signed\n    type, because erroneous negative counts can be generated when the\n@@ -388,7 +377,7 @@ extern regset regs_live_at_setjmp;\n \n extern GTY(()) rtx label_value_list;\n \n-extern struct obstack flow_obstack;\n+extern bitmap_obstack reg_obstack;\n \n /* Indexed by n, gives number of basic block that  (REG n) is used in.\n    If the value is REG_BLOCK_GLOBAL (-2),"}, {"sha": "7572e526fd28ab6397c673497f54cdf67fa66420", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -70,7 +70,7 @@\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"rtl.h\"\n-#include \"basic-block.h\"\n+#include \"regs.h\"\n #include \"flags.h\"\n #include \"timevar.h\"\n #include \"output.h\"\n@@ -81,7 +81,6 @@\n #include \"tm_p.h\"\n #include \"obstack.h\"\n #include \"expr.h\"\n-#include \"regs.h\"\n \n /* The number of rounds.  In most cases there will only be 4 rounds, but\n    when partitioning hot and cold basic blocks into separate sections of\n@@ -1692,9 +1691,9 @@ fix_crossing_conditional_branches (void)\n \t\t  /* Update register liveness information.  */\n \t\t  \n \t\t  new_bb->global_live_at_start = \n-\t\t    OBSTACK_ALLOC_REG_SET (&flow_obstack);\n+\t\t    OBSTACK_ALLOC_REG_SET (&reg_obstack);\n \t\t  new_bb->global_live_at_end = \n-\t\t    OBSTACK_ALLOC_REG_SET (&flow_obstack);\n+\t\t    OBSTACK_ALLOC_REG_SET (&reg_obstack);\n \t\t  COPY_REG_SET (new_bb->global_live_at_end,\n \t\t\t\tprev_bb->global_live_at_end);\n \t\t  COPY_REG_SET (new_bb->global_live_at_start,"}, {"sha": "68b8429e80124ebef9e04f4fc3e73e071fdd1df1", "filename": "gcc/bitmap.c", "status": "modified", "additions": 149, "deletions": 97, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -30,8 +30,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"bitmap.h\"\n \n /* Obstack to allocate bitmap elements from.  */\n-static struct obstack bitmap_obstack;\n-static int bitmap_obstack_init = FALSE;\n \f\n #ifndef INLINE\n #ifndef __GNUC__\n@@ -42,9 +40,10 @@ static int bitmap_obstack_init = FALSE;\n #endif\n \n /* Global data */\n-bitmap_element bitmap_zero_bits;\t/* An element of all zero bits.  */\n-static bitmap_element *bitmap_free;\t/* Freelist of bitmap elements.  */\n-static GTY((deletable)) bitmap_element *bitmap_ggc_free;\n+bitmap_element bitmap_zero_bits;  /* An element of all zero bits.  */\n+bitmap_obstack bitmap_default_obstack;    /* The default bitmap obstack.  */\n+static GTY((deletable)) bitmap_element *bitmap_ggc_free; /* Freelist of\n+\t\t\t\t\t\t\t    GC'd elements.  */\n \n static void bitmap_elem_to_freelist (bitmap, bitmap_element *);\n static void bitmap_element_free (bitmap, bitmap_element *);\n@@ -60,10 +59,12 @@ static bitmap_element *bitmap_find_bit (bitmap, unsigned int);\n static INLINE void\n bitmap_elem_to_freelist (bitmap head, bitmap_element *elt)\n {\n-  if (head->using_obstack)\n+  bitmap_obstack *bit_obstack = head->obstack;\n+  \n+  if (bit_obstack)\n     {\n-      elt->next = bitmap_free;\n-      bitmap_free = elt;\n+      elt->next = bit_obstack->elements;\n+      bit_obstack->elements = elt;\n     }\n   else\n     {\n@@ -107,43 +108,22 @@ static INLINE bitmap_element *\n bitmap_element_allocate (bitmap head)\n {\n   bitmap_element *element;\n-\n-  if (head->using_obstack)\n+  bitmap_obstack *bit_obstack = head->obstack;\n+      \n+  if (bit_obstack)\n     {\n-      if (bitmap_free != 0)\n-\t{\n-\t  element = bitmap_free;\n-\t  bitmap_free = element->next;\n-\t}\n+      element = bit_obstack->elements;\n+      \n+      if (element)\n+\tbit_obstack->elements = element->next;\n       else\n-\t{\n-\t  /* We can't use gcc_obstack_init to initialize the obstack since\n-\t     print-rtl.c now calls bitmap functions, and bitmap is linked\n-\t     into the gen* functions.  */\n-\t  if (!bitmap_obstack_init)\n-\t    {\n-\t      bitmap_obstack_init = TRUE;\n-\n-#if !defined(__GNUC__) || (__GNUC__ < 2)\n-#define __alignof__(type) 0\n-#endif\n-\n-\t      obstack_specify_allocation (&bitmap_obstack, OBSTACK_CHUNK_SIZE,\n-\t\t\t\t\t  __alignof__ (bitmap_element),\n-\t\t\t\t\t  obstack_chunk_alloc,\n-\t\t\t\t\t  obstack_chunk_free);\n-\t    }\n-\n-\t  element = XOBNEW (&bitmap_obstack, bitmap_element);\n-\t}\n+\telement = XOBNEW (&bit_obstack->obstack, bitmap_element);\n     }\n   else\n     {\n-      if (bitmap_ggc_free != NULL)\n-\t{\n-          element = bitmap_ggc_free;\n-          bitmap_ggc_free = element->next;\n-\t}\n+      element = bitmap_ggc_free;\n+      if (element)\n+\tbitmap_ggc_free = element->next;\n       else\n \telement = GGC_NEW (bitmap_element);\n     }\n@@ -153,19 +133,139 @@ bitmap_element_allocate (bitmap head)\n   return element;\n }\n \n-/* Release any memory allocated by bitmaps.  */\n+/* Remove ELT and all following elements from bitmap HEAD.  */\n \n void\n-bitmap_release_memory (void)\n+bitmap_elt_clear_from (bitmap head, bitmap_element *elt)\n+{\n+  bitmap_element *next;\n+\n+  while (elt)\n+    {\n+      next = elt->next;\n+      bitmap_element_free (head, elt);\n+      elt = next;\n+    }\n+}\n+\n+/* Clear a bitmap by freeing the linked list.  */\n+\n+INLINE void\n+bitmap_clear (bitmap head)\n {\n-  bitmap_free = 0;\n-  if (bitmap_obstack_init)\n+  bitmap_element *element, *next;\n+\n+  for (element = head->first; element != 0; element = next)\n     {\n-      bitmap_obstack_init = FALSE;\n-      obstack_free (&bitmap_obstack, NULL);\n+      next = element->next;\n+      bitmap_elem_to_freelist (head, element);\n     }\n+\n+  head->first = head->current = 0;\n+}\n+\f\n+/* Initialize a bitmap obstack.  If BIT_OBSTACK is NULL, initialize\n+   the default bitmap obstack.  */\n+\n+void\n+bitmap_obstack_initialize (bitmap_obstack *bit_obstack)\n+{\n+  if (!bit_obstack)\n+    bit_obstack = &bitmap_default_obstack;\n+\n+#if !defined(__GNUC__) || (__GNUC__ < 2)\n+#define __alignof__(type) 0\n+#endif\n+\n+  bit_obstack->elements = NULL;\n+  bit_obstack->heads = NULL;\n+  obstack_specify_allocation (&bit_obstack->obstack, OBSTACK_CHUNK_SIZE,\n+\t\t\t      __alignof__ (bitmap_element),\n+\t\t\t      obstack_chunk_alloc,\n+\t\t\t      obstack_chunk_free);\n }\n \n+/* Release the memory from a bitmap obstack.  If BIT_OBSTACK is NULL,\n+   release the default bitmap obstack.  */\n+\n+void\n+bitmap_obstack_release (bitmap_obstack *bit_obstack)\n+{\n+  if (!bit_obstack)\n+    bit_obstack = &bitmap_default_obstack;\n+  \n+  bit_obstack->elements = NULL;\n+  bit_obstack->heads = NULL;\n+  obstack_free (&bit_obstack->obstack, NULL);\n+}\n+\n+/* Create a new bitmap on an obstack.  If BIT_OBSTACK is NULL, create\n+   it on the default bitmap obstack.  */\n+\n+bitmap\n+bitmap_obstack_alloc (bitmap_obstack *bit_obstack)\n+{\n+  bitmap map;\n+\n+  if (!bit_obstack)\n+    bit_obstack = &bitmap_default_obstack;\n+  map = bit_obstack->heads;\n+  if (map)\n+    bit_obstack->heads = (void *)map->first;\n+  else\n+    map = XOBNEW (&bit_obstack->obstack, bitmap_head);\n+  bitmap_initialize (map, bit_obstack);\n+\n+  return map;\n+}\n+\n+/* Create a new GCd bitmap.  */\n+\n+bitmap\n+bitmap_gc_alloc (void)\n+{\n+  bitmap map;\n+\n+  map = GGC_NEW (struct bitmap_head_def);\n+  bitmap_initialize (map, NULL);\n+\n+  return map;\n+}\n+\n+/* Create a new malloced bitmap.  Elements will be allocated from the\n+   default bitmap obstack.  */\n+\n+bitmap\n+bitmap_malloc_alloc (void)\n+{\n+  bitmap map;\n+\n+  map = xmalloc (sizeof (bitmap_head));\n+  bitmap_initialize (map, &bitmap_default_obstack);\n+\n+  return map;\n+}\n+\n+/* Release an obstack allocated bitmap.  */\n+\n+void\n+bitmap_obstack_free (bitmap map)\n+{\n+  bitmap_clear (map);\n+  map->first = (void *)map->obstack->heads;\n+  map->obstack->heads = map;\n+}\n+\n+/* Release a malloc allocated bitmap.  */\n+\n+void\n+bitmap_malloc_free (bitmap map)\n+{\n+  bitmap_clear (map);\n+  free (map);\n+}\n+\n+\f\n /* Return nonzero if all bits in an element are zero.  */\n \n static INLINE int\n@@ -269,38 +369,6 @@ bitmap_elt_insert_after (bitmap head, bitmap_element *elt)\n     }\n   return node;\n }\n-\n-/* Remove ELT and all following elements from bitmap HEAD.  */\n-\n-void\n-bitmap_elt_clear_from (bitmap head, bitmap_element *elt)\n-{\n-  bitmap_element *next;\n-\n-  while (elt)\n-    {\n-      next = elt->next;\n-      bitmap_element_free (head, elt);\n-      elt = next;\n-    }\n-}\n-\n-\f\n-/* Clear a bitmap by freeing the linked list.  */\n-\n-INLINE void\n-bitmap_clear (bitmap head)\n-{\n-  bitmap_element *element, *next;\n-\n-  for (element = head->first; element != 0; element = next)\n-    {\n-      next = element->next;\n-      bitmap_elem_to_freelist (head, element);\n-    }\n-\n-  head->first = head->current = 0;\n-}\n \f\n /* Copy a bitmap to another bitmap.  */\n \n@@ -1065,9 +1133,8 @@ bitmap_ior_and_compl (bitmap dst, bitmap a, bitmap from1, bitmap from2)\n {\n   bitmap_head tmp;\n   bool changed;\n-  \n-  tmp.first = tmp.current = 0;\n-  tmp.using_obstack = 0;\n+\n+  bitmap_initialize (&tmp, &bitmap_default_obstack);\n   bitmap_and_compl (&tmp, from1, from2);\n   changed = bitmap_ior (dst, a, &tmp);\n   bitmap_clear (&tmp);\n@@ -1083,29 +1150,14 @@ bitmap_ior_and_compl_into (bitmap a, bitmap from1, bitmap from2)\n   bitmap_head tmp;\n   bool changed;\n   \n-  tmp.first = tmp.current = 0;\n-  tmp.using_obstack = 0;\n+  bitmap_initialize (&tmp, &bitmap_default_obstack);\n   bitmap_and_compl (&tmp, from1, from2);\n   changed = bitmap_ior_into (a, &tmp);\n   bitmap_clear (&tmp);\n \n   return changed;\n }\n \f\n-/* Initialize a bitmap header.  */\n-\n-bitmap\n-bitmap_initialize (bitmap head, int using_obstack)\n-{\n-  if (head == NULL && ! using_obstack)\n-    head = GGC_NEW (struct bitmap_head_def);\n-\n-  head->first = head->current = 0;\n-  head->using_obstack = using_obstack;\n-\n-  return head;\n-}\n-\f\n /* Debugging function to print out the contents of a bitmap.  */\n \n void"}, {"sha": "d6e316a3e89ce0de752bb8870b4661a02d5cf5e1", "filename": "gcc/bitmap.h", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -39,6 +39,14 @@ typedef unsigned long BITMAP_WORD;\n \n #define BITMAP_ELEMENT_ALL_BITS (BITMAP_ELEMENT_WORDS * BITMAP_WORD_BITS)\n \n+/* Obstack for allocating bitmaps and elements from.  */\n+typedef struct bitmap_obstack GTY (())\n+{\n+  struct bitmap_element_def *elements;\n+  struct bitmap_head_def *heads;\n+  struct obstack GTY ((skip)) obstack;\n+} bitmap_obstack;\n+\n /* Bitmap set element.  We use a linked list to hold only the bits that\n    are set.  This allows for use to grow the bitset dynamically without\n    having to realloc and copy a giant bit array.  The `prev' field is\n@@ -57,13 +65,16 @@ typedef struct bitmap_head_def GTY(()) {\n   bitmap_element *first;\t/* First element in linked list.  */\n   bitmap_element *current;\t/* Last element looked at.  */\n   unsigned int indx;\t\t/* Index of last element looked at.  */\n-  int using_obstack;\t\t/* Are we using an obstack or ggc for\n-                                   allocation?  */\n+  bitmap_obstack *obstack;\t/* Obstack to allocate elements from.\n+\t\t\t\t   If NULL, then use ggc_alloc.  */\n } bitmap_head;\n+\n+\n typedef struct bitmap_head_def *bitmap;\n \n /* Global data */\n extern bitmap_element bitmap_zero_bits;\t/* Zero bitmap element */\n+extern bitmap_obstack bitmap_default_obstack;   /* Default bitmap obstack */\n \n /* Clear a bitmap by freeing up the linked list.  */\n extern void bitmap_clear (bitmap);\n@@ -118,36 +129,47 @@ extern void debug_bitmap_file (FILE *, bitmap);\n /* Print a bitmap.  */\n extern void bitmap_print (FILE *, bitmap, const char *, const char *);\n \n-/* Initialize a bitmap header.  If HEAD is NULL, a new header will be\n-   allocated.  USING_OBSTACK indicates how elements should be allocated.  */\n-extern bitmap bitmap_initialize (bitmap head, int using_obstack);\n+/* Initialize and releas a bitmap obstack.  */\n+extern void bitmap_obstack_initialize (bitmap_obstack *);\n+extern void bitmap_obstack_release (bitmap_obstack *);\n+\n+/* Initialize a bitmap header.  OBSTACK indicates the bitmap obstack\n+   to allocate from, NULL for GC'd bitmap.  */\n \n-/* Release all memory used by the bitmap obstack.  */\n-extern void bitmap_release_memory (void);\n+static inline void\n+bitmap_initialize (bitmap head, bitmap_obstack *obstack)\n+{\n+  head->first = head->current = NULL;\n+  head->obstack = obstack;\n+}\n+\n+/* Allocate and free bitmaps from obstack, malloc and gc'd memory.  */\n+extern bitmap bitmap_obstack_alloc (bitmap_obstack *obstack);\n+extern bitmap bitmap_malloc_alloc (void);\n+extern bitmap bitmap_gc_alloc (void);\n+extern void bitmap_obstack_free (bitmap);\n+extern void bitmap_malloc_free (bitmap);\n \n /* A few compatibility/functions macros for compatibility with sbitmaps */\n #define dump_bitmap(file, bitmap) bitmap_print (file, bitmap, \"\", \"\\n\")\n #define bitmap_zero(a) bitmap_clear (a)\n extern unsigned bitmap_first_set_bit (bitmap);\n \n-/* Allocate a bitmap with oballoc.  */\n-#define BITMAP_OBSTACK_ALLOC(OBSTACK)\t\t\t\t\\\n-  bitmap_initialize (obstack_alloc (OBSTACK, sizeof (bitmap_head)), 1)\n+/* Allocate a bitmap from a bit obstack.  */\n+#define BITMAP_OBSTACK_ALLOC(OBSTACK) bitmap_obstack_alloc (OBSTACK)\n \n-/* Allocate a bitmap with ggc_alloc.  */\n-#define BITMAP_GGC_ALLOC()\t\t\t\\\n-  bitmap_initialize (NULL, 0)\n+/* Allocate a gc'd bitmap.  */\n+#define BITMAP_GGC_ALLOC() bitmap_gc_alloc ()\n \n /* Allocate a bitmap with xmalloc.  */\n-#define BITMAP_XMALLOC()                                        \\\n-  bitmap_initialize (xmalloc (sizeof (bitmap_head)), 1)\n+#define BITMAP_XMALLOC() bitmap_malloc_alloc ()\n \n /* Do any cleanup needed on a bitmap when it is no longer used.  */\n-#define BITMAP_FREE(BITMAP)\t\t\t\\\n+#define BITMAP_OBSTACK_FREE(BITMAP)\t\t\t\\\n do {\t\t\t\t\t\t\\\n   if (BITMAP)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      bitmap_clear (BITMAP);\t\t\t\\\n+      bitmap_obstack_free (BITMAP);\t\t\\\n       (BITMAP) = 0;\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n } while (0)\n@@ -157,15 +179,11 @@ do {\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\\\n   if (BITMAP)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n-      bitmap_clear (BITMAP);\t\t\t\\\n-      free (BITMAP);\t\t\t\t\\\n+      bitmap_malloc_free (BITMAP);\t\t\\\n       (BITMAP) = 0;\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n } while (0)\n \n-/* Do any one-time initializations needed for bitmaps.  */\n-#define BITMAP_INIT_ONCE()\n-\n /* Iterator for bitmaps.  */\n \n typedef struct"}, {"sha": "3457fac31e015de9c589ed59aa5bc952bf081405", "filename": "gcc/bt-load.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -22,13 +22,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-#include \"bitmap.h\"\n-#include \"sbitmap.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n-#include \"basic-block.h\"\n #include \"regs.h\"\n-#include \"obstack.h\"\n #include \"fibheap.h\"\n #include \"output.h\"\n #include \"target.h\""}, {"sha": "4fcff8e1cabd6eeb40cccf12b8a86fae85f57b3c", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -24,9 +24,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"rtl.h\"\n+#include \"regs.h\"\n #include \"insn-config.h\"\n #include \"flags.h\"\n-#include \"regs.h\"\n #include \"hard-reg-set.h\"\n #include \"recog.h\"\n #include \"basic-block.h\""}, {"sha": "85f6fac41255ff46791a5f99bfd9116b5971aa8d", "filename": "gcc/cfg.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -52,21 +52,20 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n-#include \"basic-block.h\"\n #include \"regs.h\"\n #include \"flags.h\"\n #include \"output.h\"\n #include \"function.h\"\n #include \"except.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n-#include \"obstack.h\"\n #include \"alloc-pool.h\"\n #include \"timevar.h\"\n #include \"ggc.h\"\n \n /* The obstack on which the flow graph components are allocated.  */\n \n+struct bitmap_obstack reg_obstack;\n struct obstack flow_obstack;\n static char *flow_firstobj;\n "}, {"sha": "7732efa979ef4ee8456442102bc8301c28681196", "filename": "gcc/cfganal.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -25,6 +25,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"rtl.h\"\n+#include \"obstack.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n #include \"insn-config.h\""}, {"sha": "373be911eb64e8c4cff7e21b79887f083155adcf", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -37,7 +37,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n-#include \"basic-block.h\"\n+#include \"regs.h\"\n #include \"timevar.h\"\n #include \"output.h\"\n #include \"insn-config.h\"\n@@ -48,7 +48,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"params.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n-#include \"regs.h\"\n #include \"cfglayout.h\"\n #include \"emit-rtl.h\"\n "}, {"sha": "287a139fda9d2e832ad4adaf3dffefb4b4de4737", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -25,22 +25,18 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"insn-config.h\"\n #include \"output.h\"\n #include \"function.h\"\n-#include \"obstack.h\"\n #include \"cfglayout.h\"\n #include \"cfgloop.h\"\n #include \"target.h\"\n #include \"ggc.h\"\n #include \"alloc-pool.h\"\n #include \"flags.h\"\n \n-/* The contents of the current function definition are allocated\n-   in this obstack, and all are freed at the end of the function.  */\n-extern struct obstack flow_obstack;\n-\n /* Holds the interesting trailing notes for the function.  */\n rtx cfg_layout_function_footer, cfg_layout_function_header;\n \n@@ -1120,8 +1116,8 @@ cfg_layout_duplicate_bb (basic_block bb)\n \n   if (bb->global_live_at_start)\n     {\n-      new_bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n-      new_bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n+      new_bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      new_bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n       COPY_REG_SET (new_bb->global_live_at_start, bb->global_live_at_start);\n       COPY_REG_SET (new_bb->global_live_at_end, bb->global_live_at_end);\n     }"}, {"sha": "d985a2caa952168232cf43b644140cfcb65969a8", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -24,6 +24,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"toplev.h\"\n #include \"cfgloop.h\""}, {"sha": "6c625d6a9741fec7fa916eef7ef45b27b34bde43", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -24,6 +24,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"expr.h\""}, {"sha": "a370e385d895768750a8afbe39ad03fc22d90278", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -24,6 +24,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"cfglayout.h\""}, {"sha": "8ac70879cc0daa0b900ea3323954325c6951d43e", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -489,8 +489,8 @@ rtl_split_block (basic_block bb, void *insnp)\n \n   if (bb->global_live_at_start)\n     {\n-      new_bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n-      new_bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n+      new_bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      new_bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n       COPY_REG_SET (new_bb->global_live_at_end, bb->global_live_at_end);\n \n       /* We now have to calculate which registers are live at the end\n@@ -1095,9 +1095,9 @@ force_nonfallthru_and_redirect (edge e, basic_block target)\n       if (target->global_live_at_start)\n \t{\n \t  jump_block->global_live_at_start\n-\t    = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n+\t    = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n \t  jump_block->global_live_at_end\n-\t    = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n+\t    = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n \t  COPY_REG_SET (jump_block->global_live_at_start,\n \t\t\ttarget->global_live_at_start);\n \t  COPY_REG_SET (jump_block->global_live_at_end,\n@@ -1383,8 +1383,8 @@ rtl_split_edge (edge edge_in)\n   /* ??? This info is likely going to be out of date very soon.  */\n   if (edge_in->dest->global_live_at_start)\n     {\n-      bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n-      bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n+      bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n       COPY_REG_SET (bb->global_live_at_start,\n \t\t    edge_in->dest->global_live_at_start);\n       COPY_REG_SET (bb->global_live_at_end,\n@@ -1459,8 +1459,7 @@ bool\n safe_insert_insn_on_edge (rtx insn, edge e)\n {\n   rtx x;\n-  regset_head killed_head;\n-  regset killed = INITIALIZE_REG_SET (killed_head);\n+  regset killed;\n   rtx save_regs = NULL_RTX;\n   unsigned regno;\n   int noccmode;\n@@ -1473,6 +1472,8 @@ safe_insert_insn_on_edge (rtx insn, edge e)\n   noccmode = false;\n #endif\n \n+  killed = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+\n   for (x = insn; x; x = NEXT_INSN (x))\n     if (INSN_P (x))\n       note_stores (PATTERN (x), mark_killed_regs, killed);\n@@ -2854,8 +2855,8 @@ cfg_layout_split_edge (edge e)\n      create it to avoid getting an ICE later.  */\n   if (e->dest->global_live_at_start)\n     {\n-      new_bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n-      new_bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n+      new_bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      new_bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n       COPY_REG_SET (new_bb->global_live_at_start,\n \t\t    e->dest->global_live_at_start);\n       COPY_REG_SET (new_bb->global_live_at_end,"}, {"sha": "4e35b34698748147032f5c59d1d9c7b2359bed1c", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -24,11 +24,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-\n #include \"rtl.h\"\n #include \"tm_p.h\"\n-#include \"regs.h\"\n #include \"hard-reg-set.h\"\n+#include \"regs.h\"\n #include \"basic-block.h\"\n #include \"flags.h\"\n #include \"real.h\""}, {"sha": "a54a87c074448f707d4bbff262e7502d0f4b479a", "filename": "gcc/ddg.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -29,7 +29,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"hard-reg-set.h\"\n-#include \"basic-block.h\"\n #include \"regs.h\"\n #include \"function.h\"\n #include \"flags.h\""}, {"sha": "7970e242526f6aec623eb64a2ecaa4c3758e5860", "filename": "gcc/dominance.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -39,6 +39,7 @@\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"errors.h\"\n #include \"et-forest.h\""}, {"sha": "e79773a6eb9c7d335134cb05862acdb3861c001b", "filename": "gcc/flow.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -567,15 +567,15 @@ verify_local_live_at_start (regset new_live_at_start, basic_block bb)\n    unless the caller resets it to zero.  */\n \n int\n-update_life_info (sbitmap blocks, enum update_life_extent extent, int prop_flags)\n+update_life_info (sbitmap blocks, enum update_life_extent extent,\n+\t\t  int prop_flags)\n {\n   regset tmp;\n-  regset_head tmp_head;\n   unsigned i;\n   int stabilized_prop_flags = prop_flags;\n   basic_block bb;\n \n-  tmp = INITIALIZE_REG_SET (tmp_head);\n+  tmp = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n   ndead = 0;\n \n   if ((prop_flags & PROP_REG_INFO) && !reg_deaths)\n@@ -1016,8 +1016,6 @@ calculate_global_regs_live (sbitmap blocks_in, sbitmap blocks_out, int flags)\n {\n   basic_block *queue, *qhead, *qtail, *qend, bb;\n   regset tmp, new_live_at_end, invalidated_by_call;\n-  regset_head tmp_head, invalidated_by_call_head;\n-  regset_head new_live_at_end_head;\n \n   /* The registers that are modified within this in block.  */\n   regset *local_sets;\n@@ -1035,9 +1033,9 @@ calculate_global_regs_live (sbitmap blocks_in, sbitmap blocks_out, int flags)\n     gcc_assert (!bb->aux);\n #endif\n \n-  tmp = INITIALIZE_REG_SET (tmp_head);\n-  new_live_at_end = INITIALIZE_REG_SET (new_live_at_end_head);\n-  invalidated_by_call = INITIALIZE_REG_SET (invalidated_by_call_head);\n+  tmp = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  new_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  invalidated_by_call = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n \n   /* Inconveniently, this is only readily available in hard reg set form.  */\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; ++i)\n@@ -1438,11 +1436,11 @@ allocate_bb_life_data (void)\n \n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n     {\n-      bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n-      bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n+      bb->global_live_at_start = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      bb->global_live_at_end = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n     }\n \n-  regs_live_at_setjmp = OBSTACK_ALLOC_REG_SET (&flow_obstack);\n+  regs_live_at_setjmp = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n }\n \n void\n@@ -1845,8 +1843,7 @@ init_propagate_block_info (basic_block bb, regset live, regset local_set,\n   if (JUMP_P (BB_END (bb))\n       && any_condjump_p (BB_END (bb)))\n     {\n-      regset_head diff_head;\n-      regset diff = INITIALIZE_REG_SET (diff_head);\n+      regset diff = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n       basic_block bb_true, bb_false;\n       unsigned i;\n "}, {"sha": "6ed8931c5e998e7610cb7414b6b812f3a7e97794", "filename": "gcc/gengtype.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -1081,13 +1081,11 @@ open_base_files (void)\n     /* The order of files here matters very much.  */\n     static const char *const ifiles [] = {\n       \"config.h\", \"system.h\", \"coretypes.h\", \"tm.h\", \"varray.h\", \n-      \"hashtab.h\", \"splay-tree.h\", \"bitmap.h\", \"input.h\", \"tree.h\", \"rtl.h\",\n-      \"function.h\", \"insn-config.h\", \"expr.h\", \"hard-reg-set.h\",\n-      \"basic-block.h\", \"cselib.h\", \"insn-addr.h\", \"optabs.h\",\n-      \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n-      \"tree-flow.h\", \"reload.h\",\n-      \"cpp-id-data.h\",\n-      \"tree-chrec.h\",\n+      \"hashtab.h\", \"splay-tree.h\",  \"obstack.h\", \"bitmap.h\", \"input.h\",\n+      \"tree.h\", \"rtl.h\", \"function.h\", \"insn-config.h\", \"expr.h\",\n+      \"hard-reg-set.h\", \"basic-block.h\", \"cselib.h\", \"insn-addr.h\",\n+      \"optabs.h\", \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n+      \"tree-flow.h\", \"reload.h\", \"cpp-id-data.h\", \"tree-chrec.h\",\n       NULL\n     };\n     const char *const *ifp;"}, {"sha": "e1b6f60de8f8b57fcc0d673ca49fd6d89f1197e5", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -24,13 +24,11 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-\n #include \"machmode.h\"\n #include \"hard-reg-set.h\"\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"flags.h\"\n-#include \"basic-block.h\"\n #include \"regs.h\"\n #include \"function.h\"\n #include \"insn-config.h\"\n@@ -1806,9 +1804,8 @@ build_insn_chain (rtx first)\n   struct insn_chain **p = &reload_insn_chain;\n   struct insn_chain *prev = 0;\n   basic_block b = ENTRY_BLOCK_PTR->next_bb;\n-  regset_head live_relevant_regs_head;\n \n-  live_relevant_regs = INITIALIZE_REG_SET (live_relevant_regs_head);\n+  live_relevant_regs = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n \n   for (; first; first = NEXT_INSN (first))\n     {"}, {"sha": "c0e9043fbe3a27d2fc67f28dd154ee105b8722fb", "filename": "gcc/graph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -24,12 +24,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"output.h\"\n #include \"function.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"toplev.h\"\n #include \"graph.h\""}, {"sha": "d413137db37d0ec68326a67cf48172dadb0c7b91", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -132,7 +132,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"hard-reg-set.h\"\n-#include \"basic-block.h\"\n #include \"regs.h\"\n #include \"function.h\"\n #include \"flags.h\""}, {"sha": "6cc6e6cfbae80e093ee3817c5d98f28243b90dfd", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -3124,7 +3124,6 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n \t that any registers modified are dead at the branch site.  */\n \n       rtx insn, cond, prev;\n-      regset_head merge_set_head, tmp_head, test_live_head, test_set_head;\n       regset merge_set, tmp, test_live, test_set;\n       struct propagate_block_info *pbi;\n       unsigned i, fail = 0;\n@@ -3166,10 +3165,10 @@ dead_or_predicable (basic_block test_bb, basic_block merge_bb,\n \t   TEST_SET  = set of registers set between EARLIEST and the\n \t\t       end of the block.  */\n \n-      tmp = INITIALIZE_REG_SET (tmp_head);\n-      merge_set = INITIALIZE_REG_SET (merge_set_head);\n-      test_live = INITIALIZE_REG_SET (test_live_head);\n-      test_set = INITIALIZE_REG_SET (test_set_head);\n+      tmp = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      merge_set = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      test_live = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+      test_set = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n \n       /* ??? bb->local_set is only valid during calculate_global_regs_live,\n \t so we must recompute usage for MERGE_BB.  Not so bad, I suppose,"}, {"sha": "a940ba435bc82b00a12fadb35b0de4c0a8baee58", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -67,7 +67,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"flags.h\"\n-#include \"basic-block.h\"\n #include \"regs.h\"\n #include \"function.h\"\n #include \"insn-config.h\""}, {"sha": "5aa0db11a9c26b805231fcbdd17606266f711995", "filename": "gcc/loop-init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -24,6 +24,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"cfglayout.h\""}, {"sha": "03f8c67a6c433801e2255ee4bfd607f0e962563e", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -41,6 +41,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"expr.h\""}, {"sha": "9eb0f2e8cd179d8c6c55895ace9728576f24dd0a", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -53,6 +53,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"expr.h\"\n@@ -1716,7 +1717,6 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n   rtx head, tail, insn;\n   rtx neutral, aggr;\n   regset altered;\n-  regset_head altered_head;\n   edge e;\n \n   if (!*expr)\n@@ -1778,7 +1778,7 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n   if (e->src == ENTRY_BLOCK_PTR)\n     return;\n \n-  altered = INITIALIZE_REG_SET (altered_head);\n+  altered = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n \n   while (1)\n     {"}, {"sha": "4c7f6e2efce380ca2115bd97d4bfb48edc4ced56", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -24,6 +24,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"cfglayout.h\""}, {"sha": "f307dc1a2996cf109b99cd66ed4aec29a8647291", "filename": "gcc/loop-unswitch.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Floop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Floop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unswitch.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -24,6 +24,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"cfglayout.h\""}, {"sha": "14f006a58ba07794e6ee5b654170ad9858047ae3", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -29,7 +29,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"hard-reg-set.h\"\n-#include \"basic-block.h\"\n #include \"regs.h\"\n #include \"function.h\"\n #include \"flags.h\""}, {"sha": "cb81eb7b5361129d55f29370c148f41abca30471", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -313,9 +313,6 @@ rest_of_handle_final (void)\n \n     /* Release all memory allocated by flow.  */\n     free_basic_block_vars ();\n-\n-    /* Release all memory held by regsets now.  */\n-    regset_release_memory ();\n   }\n \n   /* Write DBX symbols if requested.  */"}, {"sha": "84315343f195890d8bdb6ea500eb41f8033ff1fd", "filename": "gcc/ra-debug.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fra-debug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fra-debug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-debug.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -27,12 +27,11 @@\n #include \"recog.h\"\n #include \"function.h\"\n #include \"hard-reg-set.h\"\n-#include \"basic-block.h\"\n+#include \"regs.h\"\n #include \"df.h\"\n #include \"output.h\"\n #include \"ra.h\"\n #include \"tm_p.h\"\n-#include \"regs.h\"\n \n /* This file contains various dumping and debug functions for\n    the graph coloring register allocator.  */"}, {"sha": "d39bb849701edb1fe7dfbf5dc81fc1df197dfba4", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -2975,7 +2975,6 @@ peep2_find_free_register (int from, int to, const char *class_str,\n void\n peephole2_optimize (FILE *dump_file ATTRIBUTE_UNUSED)\n {\n-  regset_head rs_heads[MAX_INSNS_PER_PEEP2 + 2];\n   rtx insn, prev;\n   regset live;\n   int i;\n@@ -2989,8 +2988,8 @@ peephole2_optimize (FILE *dump_file ATTRIBUTE_UNUSED)\n \n   /* Initialize the regsets we're going to use.  */\n   for (i = 0; i < MAX_INSNS_PER_PEEP2 + 1; ++i)\n-    peep2_insn_data[i].live_before = INITIALIZE_REG_SET (rs_heads[i]);\n-  live = INITIALIZE_REG_SET (rs_heads[i]);\n+    peep2_insn_data[i].live_before = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  live = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n \n #ifdef HAVE_conditional_execution\n   blocks = sbitmap_alloc (last_basic_block);"}, {"sha": "3fd8281e3e50d8ed1da4832b71dfc9eefa566fc0", "filename": "gcc/regclass.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -293,9 +293,6 @@ init_reg_sets (void)\n   memcpy (call_used_regs, initial_call_used_regs, sizeof call_used_regs);\n   memset (global_regs, 0, sizeof global_regs);\n \n-  /* Do any additional initialization regsets may need.  */\n-  INIT_ONCE_REG_SET ();\n-\n #ifdef REG_ALLOC_ORDER\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     inv_reg_alloc_order[reg_alloc_order[i]] = i;\n@@ -2181,7 +2178,6 @@ allocate_reg_info (size_t num_regs, int new_p, int renumber_p)\n \t  reg_pref_buffer = xmalloc (regno_allocated\n \t\t\t\t     * sizeof (struct reg_pref));\n \t}\n-\n       else\n \t{\n \t  VARRAY_GROW (reg_n_info, regno_allocated);\n@@ -2257,9 +2253,6 @@ allocate_reg_info (size_t num_regs, int new_p, int renumber_p)\n \n   if (renumber_p)\n     reg_renumber = renumber;\n-\n-  /* Tell the regset code about the new number of registers.  */\n-  MAX_REGNO_REG_SET (num_regs, new_p, renumber_p);\n }\n \n /* Free up the space allocated by allocate_reg_info.  */\n@@ -2583,14 +2576,6 @@ reg_classes_intersect_p (enum reg_class c1, enum reg_class c2)\n   return 0;\n }\n \n-/* Release any memory allocated by register sets.  */\n-\n-void\n-regset_release_memory (void)\n-{\n-  bitmap_release_memory ();\n-}\n-\n #ifdef CANNOT_CHANGE_MODE_CLASS\n \n struct subregs_of_mode_node"}, {"sha": "3d5fec4aa1666e7a5989556c325d26d6bfff1124", "filename": "gcc/regs.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define GCC_REGS_H\n \n #include \"varray.h\"\n+#include \"obstack.h\"\n #include \"hard-reg-set.h\"\n #include \"basic-block.h\"\n "}, {"sha": "9881293b4198ec23eb2469d542b606ab8ce10826", "filename": "gcc/resource.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -27,7 +27,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"hard-reg-set.h\"\n-#include \"basic-block.h\"\n #include \"function.h\"\n #include \"regs.h\"\n #include \"flags.h\""}, {"sha": "3ffd063263893f36df1ae82ae12ca4f373d96f10", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -33,7 +33,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"output.h\"\n #include \"tm_p.h\"\n #include \"flags.h\"\n-#include \"basic-block.h\"\n #include \"real.h\"\n #include \"regs.h\"\n #include \"function.h\""}, {"sha": "fe7a9959ff803b2344c5adefaff587e2ec3e44bd", "filename": "gcc/sbitmap.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fsbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fsbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsbitmap.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -25,6 +25,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n \n /* Bitmap manipulation routines.  */"}, {"sha": "5e23a9304e021f0854e726da1ce4b22563946944", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -30,7 +30,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"hard-reg-set.h\"\n-#include \"basic-block.h\"\n #include \"regs.h\"\n #include \"function.h\"\n #include \"flags.h\"\n@@ -45,10 +44,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"df.h\"\n \n \n-static regset_head reg_pending_sets_head;\n-static regset_head reg_pending_clobbers_head;\n-static regset_head reg_pending_uses_head;\n-\n static regset reg_pending_sets;\n static regset reg_pending_clobbers;\n static regset reg_pending_uses;\n@@ -1596,9 +1591,9 @@ free_dependency_caches (void)\n void\n init_deps_global (void)\n {\n-  reg_pending_sets = INITIALIZE_REG_SET (reg_pending_sets_head);\n-  reg_pending_clobbers = INITIALIZE_REG_SET (reg_pending_clobbers_head);\n-  reg_pending_uses = INITIALIZE_REG_SET (reg_pending_uses_head);\n+  reg_pending_sets = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  reg_pending_clobbers = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n+  reg_pending_uses = OBSTACK_ALLOC_REG_SET (&reg_obstack);\n   reg_pending_barrier = NOT_A_BARRIER;\n }\n "}, {"sha": "4643478b3cb4dbc040c2e4999db10c8c47379098", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -29,7 +29,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"hard-reg-set.h\"\n-#include \"basic-block.h\"\n #include \"regs.h\"\n #include \"function.h\"\n #include \"flags.h\""}, {"sha": "c478b773b82bd8a019bc59a3f412d2eea43068d3", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -53,7 +53,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"hard-reg-set.h\"\n-#include \"basic-block.h\"\n #include \"regs.h\"\n #include \"function.h\"\n #include \"flags.h\""}, {"sha": "3c2a1d0cb69533324d74bce7858fd167b54f00e1", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -1014,7 +1014,7 @@ get_loop_body_in_if_conv_order (const struct loop *loop)\n       if (bb->flags & BB_IRREDUCIBLE_LOOP)\n \t{\n \t  free (blocks_in_bfs_order);\n-\t  BITMAP_FREE (visited);\n+\t  BITMAP_XFREE (visited);\n \t  free (blocks);\n \t  return NULL;\n \t}"}, {"sha": "87c73ad763b1158514ebdbd5224dd5da5555c28a", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -636,12 +636,21 @@ tree_rest_of_compilation (tree fndecl)\n   while (node->callees)\n     cgraph_remove_edge (node->callees);\n \n-  if (!vars_to_rename)\n-    vars_to_rename = BITMAP_XMALLOC ();\n \n+  /* Initialize the default bitmap obstack.  */\n+  bitmap_obstack_initialize (NULL);\n+  bitmap_obstack_initialize (&reg_obstack); /* FIXME, only at RTL generation*/\n+  \n+  vars_to_rename = BITMAP_XMALLOC ();\n+  \n   /* Perform all tree transforms and optimizations.  */\n   execute_pass_list (all_passes);\n+  \n+  bitmap_obstack_release (&reg_obstack);\n \n+  /* Release the default bitmap obstack.  */\n+  bitmap_obstack_release (NULL);\n+  \n   /* Restore original body if still needed.  */\n   if (cfun->saved_tree)\n     {"}, {"sha": "86ba5422794772c9649b2b24f2743f89ac72b040", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -2233,11 +2233,7 @@ perform_edge_inserts (FILE *dump_file)\n \n   /* Clear out any tables which were created.  */\n   edge_leader = NULL;\n-  if (leader_has_match != NULL)\n-    {\n-      free (leader_has_match);\n-      leader_has_match = NULL;\n-    }\n+  BITMAP_XFREE (leader_has_match);\n \n   if (changed)\n     {"}, {"sha": "26ecf2e3401624bb6d361d969c9fa827e72d7373", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -1361,12 +1361,12 @@ decide_instantiations (void)\n {\n   unsigned int i;\n   bool cleared_any;\n-  struct bitmap_head_def done_head;\n+  bitmap_head done_head;\n   bitmap_iterator bi;\n \n   /* We cannot clear bits from a bitmap we're iterating over,\n      so save up all the bits to clear until the end.  */\n-  bitmap_initialize (&done_head, 1);\n+  bitmap_initialize (&done_head, &bitmap_default_obstack);\n   cleared_any = false;\n \n   EXECUTE_IF_SET_IN_BITMAP (sra_candidates, 0, i, bi)"}, {"sha": "502117c2e1c98825baf8ae2b63019f3653a8ae06", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -54,6 +54,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"tm_p.h\"\n #include \"hard-reg-set.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n \n #include \"tree.h\""}, {"sha": "38d5d2b86320928dd95b4a5960e193bdcefd9a49", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -306,7 +306,7 @@ static alloc_pool value_set_node_pool;\n static alloc_pool binary_node_pool;\n static alloc_pool unary_node_pool;\n static alloc_pool reference_node_pool;\n-static struct obstack grand_bitmap_obstack;\n+static bitmap_obstack grand_bitmap_obstack;\n \n /* Set of blocks with statements that have had its EH information\n    cleaned up.  */\n@@ -462,10 +462,7 @@ value_insert_into_set_bitmap (value_set_t set, tree v)\n   gcc_assert (set->indexed);\n \n   if (set->values == NULL)\n-    {\n-      set->values = BITMAP_OBSTACK_ALLOC (&grand_bitmap_obstack);\n-      bitmap_clear (set->values);\n-    }\n+    set->values = BITMAP_OBSTACK_ALLOC (&grand_bitmap_obstack);\n \n   bitmap_set_bit (set->values, VALUE_HANDLE_ID (v));\n }\n@@ -479,8 +476,6 @@ bitmap_set_new (void)\n   bitmap_set_t ret = pool_alloc (bitmap_set_pool);\n   ret->expressions = BITMAP_OBSTACK_ALLOC (&grand_bitmap_obstack);\n   ret->values = BITMAP_OBSTACK_ALLOC (&grand_bitmap_obstack);\n-  bitmap_clear (ret->expressions);\n-  bitmap_clear (ret->values);\n   return ret;\n }\n \n@@ -1927,7 +1922,7 @@ init_pre (void)\n   FOR_ALL_BB (bb)\n     bb->aux = xcalloc (1, sizeof (struct bb_value_sets));\n \n-  gcc_obstack_init (&grand_bitmap_obstack);\n+  bitmap_obstack_initialize (&grand_bitmap_obstack);\n   phi_translate_table = htab_create (511, expr_pred_trans_hash,\n \t\t\t\t     expr_pred_trans_eq, free);\n   value_set_pool = create_alloc_pool (\"Value sets\",\n@@ -1966,7 +1961,7 @@ fini_pre (void)\n \n   bsi_commit_edge_inserts ();\n \n-  obstack_free (&grand_bitmap_obstack, NULL);\n+  bitmap_obstack_release (&grand_bitmap_obstack);\n   free_alloc_pool (value_set_pool);\n   free_alloc_pool (bitmap_set_pool);\n   free_alloc_pool (value_set_node_pool);"}, {"sha": "db6717cf3aedc8bb8598f49ccb28e4edd1190634", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -62,7 +62,7 @@ Boston, MA 02111-1307, USA.  */\n varray_type ssa_names;\n \n /* Bitmap of ssa names marked for rewriting.  */\n-bitmap ssa_names_to_rewrite;\n+static bitmap ssa_names_to_rewrite;\n \n /* Free list of SSA_NAMEs.  This list is wiped at the end of each function\n    after we leave SSA form.  */\n@@ -82,11 +82,7 @@ unsigned int ssa_name_nodes_created;\n bool\n marked_for_rewrite_p (tree var)\n {\n-  if (ssa_names_to_rewrite\n-      && bitmap_bit_p (ssa_names_to_rewrite, SSA_NAME_VERSION (var)))\n-    return true;\n-\n-  return false;\n+  return bitmap_bit_p (ssa_names_to_rewrite, SSA_NAME_VERSION (var));\n }\n \n /* Returns true if any ssa name is marked for rewrite.  */\n@@ -105,9 +101,6 @@ any_marked_for_rewrite_p (void)\n void\n mark_for_rewrite (tree var)\n {\n-  if (!ssa_names_to_rewrite)\n-    ssa_names_to_rewrite = BITMAP_XMALLOC ();\n-\n   bitmap_set_bit (ssa_names_to_rewrite, SSA_NAME_VERSION (var));\n }\n \n@@ -116,9 +109,6 @@ mark_for_rewrite (tree var)\n void\n unmark_all_for_rewrite (void)\n {\n-  if (!ssa_names_to_rewrite)\n-    return;\n-\n   bitmap_clear (ssa_names_to_rewrite);\n }\n \n@@ -129,8 +119,8 @@ bitmap\n marked_ssa_names (void)\n {\n   bitmap ret = BITMAP_XMALLOC ();\n-  if (ssa_names_to_rewrite)\n-    bitmap_copy (ret, ssa_names_to_rewrite);\n+\n+  bitmap_copy (ret, ssa_names_to_rewrite);\n \n   return ret;\n }\n@@ -148,13 +138,15 @@ init_ssanames (void)\n      large.  */\n   VARRAY_PUSH_TREE (ssa_names, NULL_TREE);\n   free_ssanames = NULL;\n+  ssa_names_to_rewrite = BITMAP_XMALLOC ();\n }\n \n /* Finalize management of SSA_NAMEs.  */\n \n void\n fini_ssanames (void)\n {\n+  BITMAP_XFREE (ssa_names_to_rewrite);\n   ggc_free (ssa_names);\n   ssa_names = NULL;\n   free_ssanames = NULL;"}, {"sha": "8025e4b7d447f4234828271d17b03e70d1c9dfa6", "filename": "gcc/web.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7932a3db217873015c39424cdad931e0234be710/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7932a3db217873015c39424cdad931e0234be710/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=7932a3db217873015c39424cdad931e0234be710", "patch": "@@ -51,6 +51,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n #include \"flags.h\"\n+#include \"obstack.h\"\n #include \"basic-block.h\"\n #include \"output.h\"\n #include \"df.h\""}]}