{"sha": "3a636414b2c73cb405796d4faf35640897258413", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E2MzY0MTRiMmM3M2NiNDA1Nzk2ZDRmYWYzNTY0MDg5NzI1ODQxMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-22T19:59:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-22T19:59:49Z"}, "message": "re PR c++/30112 (pragma redefine_extname fails when namespaces are involved)\n\n\tPR c++/30112\ngcc/c-family/\n\t* c-common.h: Declare c_linkage_bindings.\n\t* c-pragma.c (handle_pragma_redefine_extname): Use it.\ngcc/\n\t* c-decl.c (c_linkage_bindings): Define.\ngcc/cp/\n\t* decl.c (cp_finish_decl): Apply pragma redefine_extname in\n\tother namespaces as well.\n\t* name-lookup.c (c_linkage_bindings): Define.\n\t(lookup_extern_c_fun_in_all_ns): Rename from\n\tlookup_extern_c_fun_binding_in_all_ns.  Return tree.\n\t(pushdecl_maybe_friend_1): Adjust.  Copy DECL_ASSEMBLER_NAME.\n\nCo-Authored-By: Mark Glisse <marc.glisse@normalesup.org>\n\nFrom-SVN: r176650", "tree": {"sha": "316fb84969a5bd89637c30710f3f154a8baf6605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/316fb84969a5bd89637c30710f3f154a8baf6605"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a636414b2c73cb405796d4faf35640897258413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a636414b2c73cb405796d4faf35640897258413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a636414b2c73cb405796d4faf35640897258413", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a636414b2c73cb405796d4faf35640897258413/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b9b22755b5c98bfe292f3cf73bba6c53acc47c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9b22755b5c98bfe292f3cf73bba6c53acc47c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9b22755b5c98bfe292f3cf73bba6c53acc47c9"}], "stats": {"total": 186, "additions": 153, "deletions": 33}, "files": [{"sha": "36f4ea1d96831a3649edb8c4e2b38e28b16aa8af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a636414b2c73cb405796d4faf35640897258413/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a636414b2c73cb405796d4faf35640897258413/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a636414b2c73cb405796d4faf35640897258413", "patch": "@@ -1,3 +1,8 @@\n+2011-07-22  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/30112\n+\t* c-decl.c (c_linkage_bindings): Define.\n+\n 2011-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR debug/49815"}, {"sha": "33d2615bc229bdb0e8cbd251ce1f3cb64c95c9ca", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3a636414b2c73cb405796d4faf35640897258413", "patch": "@@ -8501,6 +8501,14 @@ identifier_global_value\t(tree t)\n   return 0;\n }\n \n+/* In C, the only C-linkage public declaration is at file scope.  */\n+\n+tree\n+c_linkage_bindings (tree name)\n+{\n+  return identifier_global_value (name);\n+}\n+\n /* Record a builtin type for C.  If NAME is non-NULL, it is the name used;\n    otherwise the name is found in ridpointers from RID_INDEX.  */\n "}, {"sha": "990302f17ce1ed7feabcd201ec7ec524b49e29b9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3a636414b2c73cb405796d4faf35640897258413", "patch": "@@ -1,5 +1,9 @@\n 2011-07-22  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/30112\n+\t* c-common.h: Declare c_linkage_bindings.\n+\t* c-pragma.c (handle_pragma_redefine_extname): Use it.\n+\n \tPR c++/49813\n \t* c-opts.c (set_std_cxx0x): Set flag_isoc94 and flag_isoc99.\n \t* c-pretty-print.c (pp_c_cv_qualifiers): Check c_dialect_cxx as well"}, {"sha": "202be02a0f3656f910678c3d8c2b3c409d4926d2", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=3a636414b2c73cb405796d4faf35640897258413", "patch": "@@ -710,6 +710,7 @@ extern void c_register_addr_space (const char *str, addr_space_t as);\n extern bool in_late_binary_op;\n extern const char *c_addr_space_name (addr_space_t as);\n extern tree identifier_global_value (tree);\n+extern tree c_linkage_bindings (tree);\n extern void record_builtin_type (enum rid, const char *, tree);\n extern tree build_void_list_node (void);\n extern void start_fname_decls (void);"}, {"sha": "5c8bc1f8ac786c3797c775ed276e166c05cf3303", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=3a636414b2c73cb405796d4faf35640897258413", "patch": "@@ -417,8 +417,9 @@ static void handle_pragma_redefine_extname (cpp_reader *);\n static void\n handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n {\n-  tree oldname, newname, decl, x;\n+  tree oldname, newname, decls, x;\n   enum cpp_ttype t;\n+  bool found;\n \n   if (pragma_lex (&oldname) != CPP_NAME)\n     GCC_BAD (\"malformed #pragma redefine_extname, ignored\");\n@@ -428,26 +429,42 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n   if (t != CPP_EOF)\n     warning (OPT_Wpragmas, \"junk at end of %<#pragma redefine_extname%>\");\n \n-  decl = identifier_global_value (oldname);\n-  if (decl\n-      && (TREE_PUBLIC (decl) || DECL_EXTERNAL (decl))\n-      && (TREE_CODE (decl) == FUNCTION_DECL\n-\t  || TREE_CODE (decl) == VAR_DECL)\n-      && has_c_linkage (decl))\n+  found = false;\n+  for (decls = c_linkage_bindings (oldname);\n+       decls; )\n     {\n-      if (DECL_ASSEMBLER_NAME_SET_P (decl))\n+      tree decl;\n+      if (TREE_CODE (decls) == TREE_LIST)\n \t{\n-\t  const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-\t  name = targetm.strip_name_encoding (name);\n-\n-\t  if (strcmp (name, IDENTIFIER_POINTER (newname)))\n-\t    warning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n-\t\t     \"conflict with previous rename\");\n+\t  decl = TREE_VALUE (decls);\n+\t  decls = TREE_CHAIN (decls);\n \t}\n       else\n-\tchange_decl_assembler_name (decl, newname);\n+\t{\n+\t  decl = decls;\n+\t  decls = NULL_TREE;\n+\t}\n+\n+      if ((TREE_PUBLIC (decl) || DECL_EXTERNAL (decl))\n+\t  && (TREE_CODE (decl) == FUNCTION_DECL\n+\t      || TREE_CODE (decl) == VAR_DECL))\n+\t{\n+\t  found = true;\n+\t  if (DECL_ASSEMBLER_NAME_SET_P (decl))\n+\t    {\n+\t      const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+\t      name = targetm.strip_name_encoding (name);\n+\n+\t      if (strcmp (name, IDENTIFIER_POINTER (newname)))\n+\t\twarning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n+\t\t\t \"conflict with previous rename\");\n+\t    }\n+\t  else\n+\t    change_decl_assembler_name (decl, newname);\n+\t}\n     }\n-  else\n+\n+  if (!found)\n     /* We have to add this to the rename list even if there's already\n        a global value that doesn't meet the above criteria, because in\n        C++ \"struct foo {...};\" puts \"foo\" in the current namespace but"}, {"sha": "49faf152ae3c8f16882421fa43fcf8a84d6fadbe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3a636414b2c73cb405796d4faf35640897258413", "patch": "@@ -1,3 +1,14 @@\n+2011-07-22  Jason Merrill  <jason@redhat.com>\n+\t    Mark Glisse  <marc.glisse@normalesup.org>\n+\n+\tPR c++/30112\n+\t* decl.c (cp_finish_decl): Apply pragma redefine_extname in\n+\tother namespaces as well.\n+\t* name-lookup.c (c_linkage_bindings): Define.\n+\t(lookup_extern_c_fun_in_all_ns): Rename from\n+\tlookup_extern_c_fun_binding_in_all_ns.  Return tree.\n+\t(pushdecl_maybe_friend_1): Adjust.  Copy DECL_ASSEMBLER_NAME.\n+\n 2011-07-20  Jason Merrill  <jason@redhat.com>\n \n \t* parser.c (cp_parser_initializer_list): Handle C99 .id= and [N]="}, {"sha": "2000bd4a79d632872cba12e29d5872747611c136", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3a636414b2c73cb405796d4faf35640897258413", "patch": "@@ -5919,7 +5919,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n   cleanup = NULL_TREE;\n \n   /* If a name was specified, get the string.  */\n-  if (global_scope_p (current_binding_level))\n+  if (at_namespace_scope_p ())\n     asmspec_tree = maybe_apply_renaming_pragma (decl, asmspec_tree);\n   if (asmspec_tree && asmspec_tree != error_mark_node)\n     asmspec = TREE_STRING_POINTER (asmspec_tree);"}, {"sha": "1afd9edffec795dd2248a742fc53fd3cabfde38b", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a636414b2c73cb405796d4faf35640897258413/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=3a636414b2c73cb405796d4faf35640897258413", "patch": "@@ -52,7 +52,7 @@ static bool qualified_lookup_using_namespace (tree, tree,\n \t\t\t\t\t      struct scope_binding *, int);\n static tree lookup_type_current_level (tree);\n static tree push_using_directive (tree);\n-static cxx_binding* lookup_extern_c_fun_binding_in_all_ns (tree);\n+static tree lookup_extern_c_fun_in_all_ns (tree);\n \n /* The :: namespace.  */\n \n@@ -768,18 +768,12 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t  && !DECL_ARTIFICIAL (x)\n \t  && !DECL_IN_SYSTEM_HEADER (x))\n \t{\n-\t  cxx_binding *function_binding =\n-\t      lookup_extern_c_fun_binding_in_all_ns (x);\n-\t  tree previous = (function_binding\n-\t\t\t   ? function_binding->value\n-\t\t\t   : NULL_TREE);\n+\t  tree previous = lookup_extern_c_fun_in_all_ns (x);\n \t  if (previous\n \t      && !DECL_ARTIFICIAL (previous)\n               && !DECL_IN_SYSTEM_HEADER (previous)\n \t      && DECL_CONTEXT (previous) != DECL_CONTEXT (x))\n \t    {\n-\t      tree previous = function_binding->value;\n-\n \t      /* In case either x or previous is declared to throw an exception,\n \t         make sure both exception specifications are equal.  */\n \t      if (decls_match (x, previous))\n@@ -805,6 +799,9 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n                                \"due to different exception specifications\");\n \t\t      return error_mark_node;\n \t\t    }\n+\t\t  if (DECL_ASSEMBLER_NAME_SET_P (previous))\n+\t\t    SET_DECL_ASSEMBLER_NAME (x,\n+\t\t\t\t\t     DECL_ASSEMBLER_NAME (previous));\n \t\t}\n \t      else\n \t\t{\n@@ -1996,14 +1993,14 @@ binding_for_name (cp_binding_level *scope, tree name)\n }\n \n /* Walk through the bindings associated to the name of FUNCTION,\n-   and return the first binding that declares a function with a\n+   and return the first declaration of a function with a\n    \"C\" linkage specification, a.k.a 'extern \"C\"'.\n    This function looks for the binding, regardless of which scope it\n    has been defined in. It basically looks in all the known scopes.\n    Note that this function does not lookup for bindings of builtin functions\n    or for functions declared in system headers.  */\n-static cxx_binding*\n-lookup_extern_c_fun_binding_in_all_ns (tree function)\n+static tree\n+lookup_extern_c_fun_in_all_ns (tree function)\n {\n   tree name;\n   cxx_binding *iter;\n@@ -2017,17 +2014,52 @@ lookup_extern_c_fun_binding_in_all_ns (tree function)\n        iter;\n        iter = iter->previous)\n     {\n-      if (iter->value\n-\t  && TREE_CODE (iter->value) == FUNCTION_DECL\n-\t  && DECL_EXTERN_C_P (iter->value)\n-\t  && !DECL_ARTIFICIAL (iter->value))\n+      tree ovl;\n+      for (ovl = iter->value; ovl; ovl = OVL_NEXT (ovl))\n \t{\n-\t  return iter;\n+\t  tree decl = OVL_CURRENT (ovl);\n+\t  if (decl\n+\t      && TREE_CODE (decl) == FUNCTION_DECL\n+\t      && DECL_EXTERN_C_P (decl)\n+\t      && !DECL_ARTIFICIAL (decl))\n+\t    {\n+\t      return decl;\n+\t    }\n \t}\n     }\n   return NULL;\n }\n \n+/* Returns a list of C-linkage decls with the name NAME.  */\n+\n+tree\n+c_linkage_bindings (tree name)\n+{\n+  tree decls = NULL_TREE;\n+  cxx_binding *iter;\n+\n+  for (iter = IDENTIFIER_NAMESPACE_BINDINGS (name);\n+       iter;\n+       iter = iter->previous)\n+    {\n+      tree ovl;\n+      for (ovl = iter->value; ovl; ovl = OVL_NEXT (ovl))\n+\t{\n+\t  tree decl = OVL_CURRENT (ovl);\n+\t  if (decl\n+\t      && DECL_EXTERN_C_P (decl)\n+\t      && !DECL_ARTIFICIAL (decl))\n+\t    {\n+\t      if (decls == NULL_TREE)\n+\t\tdecls = decl;\n+\t      else\n+\t\tdecls = tree_cons (NULL_TREE, decl, decls);\n+\t    }\n+\t}\n+    }\n+  return decls;\n+}\n+\n /* Insert another USING_DECL into the current binding level, returning\n    this declaration. If this is a redeclaration, do nothing, and\n    return NULL_TREE if this not in namespace scope (in namespace"}, {"sha": "5bf85f5b2e1d232472ce004a9e79bcb3a5915b51", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a636414b2c73cb405796d4faf35640897258413/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a636414b2c73cb405796d4faf35640897258413/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a636414b2c73cb405796d4faf35640897258413", "patch": "@@ -1,4 +1,8 @@\n 2011-07-22  Jason Merrill  <jason@redhat.com>\n+\t    Mark Glisse  <marc.glisse@normalesup.org>\n+\n+\tPR c++/30112\n+\t* g++.dg/other/pragma-re-1.C: Add namespace cases.\n \n \tPR c++/49813\n \t* g++.dg/opt/builtins2.C: New."}, {"sha": "6a94c5d68a7e77020c001a93fc1a42f57d6f57b6", "filename": "gcc/testsuite/g++.dg/other/pragma-re-1.C", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a636414b2c73cb405796d4faf35640897258413/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpragma-re-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a636414b2c73cb405796d4faf35640897258413/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpragma-re-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpragma-re-1.C?ref=3a636414b2c73cb405796d4faf35640897258413", "patch": "@@ -2,6 +2,12 @@\n /* { dg-final { scan-assembler-not \"foo\" } } */\n /* { dg-final { scan-assembler \"_Z3bazv\" } } */\n /* { dg-final { scan-assembler-not \"baq\" } } */\n+/* { dg-final { scan-assembler \"tut\" } } */\n+/* { dg-final { scan-assembler-not \"gee\" } } */\n+/* { dg-final { scan-assembler \"bang\" } } */\n+/* { dg-final { scan-assembler-not \"whiz\" } } */\n+/* { dg-final { scan-assembler \"eek\" } } */\n+/* { dg-final { scan-assembler-not \"boo\" } } */\n \n #ifndef __PRAGMA_REDEFINE_EXTNAME\n #error \n@@ -17,3 +23,35 @@ int (*p)(void) = foo;\n #pragma redefine_extname baz baq\n extern int baz(void);\n int (*q)(void) = baz;\n+\n+// PR c++/30112\n+// These are expected to work.\n+#pragma redefine_extname gee tut\n+namespace somewhere {\n+  extern \"C\" int gee(void);\n+  int (*r)(void) = gee;\n+\n+  extern \"C\" int whiz(void);\n+  int whiz(int);\n+}\n+#pragma redefine_extname whiz bang\n+int (*s)() = somewhere::whiz;\n+\n+namespace elsewhere {\n+  extern \"C\" int whiz(void);\n+}\n+int (*t)() = elsewhere::whiz;\n+\n+namespace A\n+{\n+  extern \"C\" int boo(void);\n+}\n+\n+namespace B\n+{\n+  extern \"C\" int boo(void);\n+}\n+#pragma redefine_extname boo eek\n+\n+int (*u)() = A::boo;\n+int (*v)() = B::boo;"}]}