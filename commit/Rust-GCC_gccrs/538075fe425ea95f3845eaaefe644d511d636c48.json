{"sha": "538075fe425ea95f3845eaaefe644d511d636c48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM4MDc1ZmU0MjVlYTk1ZjM4NDVlYWFlZmU2NDRkNTExZDYzNmM0OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-11T18:58:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-11T18:58:08Z"}, "message": "pod_char_traits.h (char_traits<>::move): Use __builtin_memmove.\n\n2007-05-11  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/pod_char_traits.h (char_traits<>::move):\n\tUse __builtin_memmove.\n\t* include/bits/locale_classes.h (locale::_Impl::_M_check_same_name,\n\tcollate_byname(const char*, size_t)): Use __builtin_strcmp.\n\t* include/bits/locale_facets.h: Use __builtin_mem* and\n\t__builtin_str* everywhere.\n\t* include/bits/codecvt.h (codecvt_byname(const char*, size_t)):\n\tUse __builtin_strcmp.\n\t* include/bits/char_traits.h: Use __builtin_mem* everywhere.\n\t* include/bits/fstream.tcc (basic_filebuf<>::underflow, imbue):\n\tUse __builtin_memcpy and __builtin_memmove.\n\t* include/bits/locale_facets_nonio.h (moneypunct_byname(const char*,\n\tsize_t __refs)): Use __builtin_strcmp.\n\t* include/std/bitset (bitset<>::_M_do_reset): Use __builtin_memset.\n\t* config/locale/gnu/c_locale.h: Use __builtin_strlen, __builtin_strcmp,\n\tand __builtin_memcpy.\n\t* config/locale/gnu/messages_members.h: Likewise.\n\t* config/locale/gnu/time_members.h: Likewise.\n\t* config/locale/generic/c_locale.h: Likewise.\n\t* config/locale/generic/messages_members.h: Likewise.\n\t* config/locale/generic/time_members.h: Likewise.\n\t* config/os/gnu-linux/ctype_noninline.h: Likewise, avoid strdup.\n\t* config/os/tpf/ctype_noninline.h: Likewise.\n\t* config/locale/generic/codecvt_members.cc: Include <cstring>. \n\t* config/locale/generic/ctype_members.cc: Likewise.\n\t* config/locale/generic/collate_members.cc: Likewise.\n\t* config/locale/gnu/c++locale_internal.h: Likewise.\n\t* config/locale/darwin/ctype_members.cc: Likewise.\n\t* src/ctype.cc: Likewise.\n\t* testsuite/19_diagnostics/logic_error/what-1.cc: Likewise.\n\t* testsuite/19_diagnostics/logic_error/what-2.cc: Likewise.\n\t* testsuite/19_diagnostics/runtime_error/what-1.cc: Likewise.\n\t* testsuite/19_diagnostics/runtime_error/what-2.cc: Likewise.\n\t* testsuite/19_diagnostics/runtime_error/what-3.cc: Likewise.\n\t* config/locale/gnu/messages_members.cc: Avoid strdup.\n\t* config/locale/gnu/monetary_members.cc: Likewise.\n\t* config/locale/gnu/time_members.cc: Likewise.\t\n\t* config/locale/gnu/time_members.cc: Likewise.\n\t* config/locale/generic/c_locale.cc: Likewise.\n\nFrom-SVN: r124623", "tree": {"sha": "e42cbc75bd6a7bf2b85115f2a9d27c274708b47f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e42cbc75bd6a7bf2b85115f2a9d27c274708b47f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/538075fe425ea95f3845eaaefe644d511d636c48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/538075fe425ea95f3845eaaefe644d511d636c48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/538075fe425ea95f3845eaaefe644d511d636c48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/538075fe425ea95f3845eaaefe644d511d636c48/comments", "author": null, "committer": null, "parents": [{"sha": "79bedddc8fed70d3ebbab016aae285bac9dbbfea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79bedddc8fed70d3ebbab016aae285bac9dbbfea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79bedddc8fed70d3ebbab016aae285bac9dbbfea"}], "stats": {"total": 396, "additions": 261, "deletions": 135}, "files": [{"sha": "ec198c0705a98f3ca4d22781fe724cf3cdee3c85", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 55, "deletions": 13, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,18 +1,60 @@\n+2007-05-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/pod_char_traits.h (char_traits<>::move):\n+\tUse __builtin_memmove.\n+\t* include/bits/locale_classes.h (locale::_Impl::_M_check_same_name,\n+\tcollate_byname(const char*, size_t)): Use __builtin_strcmp.\n+\t* include/bits/locale_facets.h: Use __builtin_mem* and\n+\t__builtin_str* everywhere.\n+\t* include/bits/codecvt.h (codecvt_byname(const char*, size_t)):\n+\tUse __builtin_strcmp.\n+\t* include/bits/char_traits.h: Use __builtin_mem* everywhere.\n+\t* include/bits/fstream.tcc (basic_filebuf<>::underflow, imbue):\n+\tUse __builtin_memcpy and __builtin_memmove.\n+\t* include/bits/locale_facets_nonio.h (moneypunct_byname(const char*,\n+\tsize_t __refs)): Use __builtin_strcmp.\n+\t* include/std/bitset (bitset<>::_M_do_reset): Use __builtin_memset.\n+\t* config/locale/gnu/c_locale.h: Use __builtin_strlen, __builtin_strcmp,\n+\tand __builtin_memcpy.\n+\t* config/locale/gnu/messages_members.h: Likewise.\n+\t* config/locale/gnu/time_members.h: Likewise.\n+\t* config/locale/generic/c_locale.h: Likewise.\n+\t* config/locale/generic/messages_members.h: Likewise.\n+\t* config/locale/generic/time_members.h: Likewise.\n+\t* config/os/gnu-linux/ctype_noninline.h: Likewise, avoid strdup.\n+\t* config/os/tpf/ctype_noninline.h: Likewise.\n+\t* config/locale/generic/codecvt_members.cc: Include <cstring>. \n+\t* config/locale/generic/ctype_members.cc: Likewise.\n+\t* config/locale/generic/collate_members.cc: Likewise.\n+\t* config/locale/gnu/c++locale_internal.h: Likewise.\n+\t* config/locale/darwin/ctype_members.cc: Likewise.\n+\t* src/ctype.cc: Likewise.\n+\t* testsuite/19_diagnostics/logic_error/what-1.cc: Likewise.\n+\t* testsuite/19_diagnostics/logic_error/what-2.cc: Likewise.\n+\t* testsuite/19_diagnostics/runtime_error/what-1.cc: Likewise.\n+\t* testsuite/19_diagnostics/runtime_error/what-2.cc: Likewise.\n+\t* testsuite/19_diagnostics/runtime_error/what-3.cc: Likewise.\n+\t* config/locale/gnu/messages_members.cc: Avoid strdup.\n+\t* config/locale/gnu/monetary_members.cc: Likewise.\n+\t* config/locale/gnu/time_members.cc: Likewise.\t\n+\t* config/locale/gnu/time_members.cc: Likewise.\n+\t* config/locale/generic/c_locale.cc: Likewise.\n+\n 2007-05-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n-       * include/std/stdexcept: Remove extra spacing.\n-\n-        * testsuite/19_diagnostics/stdexceptions.cc: Break into...\n-        * testsuite/19_diagnostics/bad_exception: ...this. Populate.\n-        * testsuite/19_diagnostics/logic_error: ... this.\n-        * testsuite/19_diagnostics/logic_error/what-1.cc: ...this.\n-        * testsuite/19_diagnostics/logic_error/what-2.cc: ...this.\n-        * testsuite/19_diagnostics/runtime_error: ...this.\n-        * testsuite/19_diagnostics/runtime_error/what-1.cc: ...this.\n-        * testsuite/19_diagnostics/runtime_error/what-2.cc: ...this.\n-        * testsuite/19_diagnostics/runtime_error/what-3.cc: ...this.\n-        * testsuite/19_diagnostics/23591_thread-1.c: Move...\n-        * testsuite/19_diagnostics/bad_exception/23591_thread-1.c: ...here.\n+\t* include/std/stdexcept: Remove extra spacing.\n+\n+\t* testsuite/19_diagnostics/stdexceptions.cc: Break into...\n+\t* testsuite/19_diagnostics/bad_exception: ...this. Populate.\n+\t* testsuite/19_diagnostics/logic_error: ... this.\n+\t* testsuite/19_diagnostics/logic_error/what-1.cc: ...this.\n+\t* testsuite/19_diagnostics/logic_error/what-2.cc: ...this.\n+\t* testsuite/19_diagnostics/runtime_error: ...this.\n+\t* testsuite/19_diagnostics/runtime_error/what-1.cc: ...this.\n+\t* testsuite/19_diagnostics/runtime_error/what-2.cc: ...this.\n+\t* testsuite/19_diagnostics/runtime_error/what-3.cc: ...this.\n+\t* testsuite/19_diagnostics/23591_thread-1.c: Move...\n+\t* testsuite/19_diagnostics/bad_exception/23591_thread-1.c: ...here.\n \n 2007-05-10  Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "ebd83219af3d1d79798d7d26a4830de358fb4228", "filename": "libstdc++-v3/config/locale/darwin/ctype_members.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fdarwin%2Fctype_members.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -37,6 +37,7 @@\n #include <locale>\n #include <bits/c++locale_internal.h>\n #include <cstdlib>\n+#include <cstring>\n \n namespace std\n {"}, {"sha": "732b60955f4a98abd82410edcea40e949df0b66d", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -37,8 +37,10 @@\n #include <cerrno>  // For errno\n #include <cmath>  // For isinf, finite, finitef, fabs\n #include <cstdlib>  // For strof, strtold\n+#include <cstring>\n #include <locale>\n #include <limits>\n+#include <cstddef>\n \n #ifdef _GLIBCXX_HAVE_IEEEFP_H\n #include <ieeefp.h>\n@@ -53,7 +55,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const __c_locale&) \t      \n     {\n       // Assumes __s formatted for \"C\" locale.\n-      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      char* __old = setlocale(LC_ALL, NULL);\n+      const size_t __len = strlen(__old) + 1;\n+      char* __sav = new char[__len];\n+      memcpy(__sav, __old, __len);\n       setlocale(LC_ALL, \"C\");\n       char* __sanity;\n \n@@ -91,8 +96,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       else\n \t__err |= ios_base::failbit;\n \n-      setlocale(LC_ALL, __old);\n-      free(__old);\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n     }\n \n   template<>\n@@ -101,7 +106,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   const __c_locale&) \n     {\n       // Assumes __s formatted for \"C\" locale.\n-      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      char* __old = setlocale(LC_ALL, NULL);\n+      const size_t __len = strlen(__old) + 1;\n+      char* __sav = new char[__len];\n+      memcpy(__sav, __old, __len);\n       setlocale(LC_ALL, \"C\");\n       char* __sanity;\n \n@@ -121,8 +129,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       else\n \t__err |= ios_base::failbit;\n \n-      setlocale(LC_ALL, __old);\n-      free(__old);\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n     }\n \n   template<>\n@@ -131,7 +139,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t   ios_base::iostate& __err, const __c_locale&) \n     {\n       // Assumes __s formatted for \"C\" locale.\n-      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      char* __old = setlocale(LC_ALL, NULL);\n+      const size_t __len = strlen(__old) + 1;\n+      char* __sav = new char[__len];\n+      memcpy(__sav, __old, __len);\n       setlocale(LC_ALL, \"C\");\n \n #if !__LDBL_HAS_INFINITY__\n@@ -167,8 +178,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       else\n \t__err |= ios_base::failbit;\n \n-      setlocale(LC_ALL, __old);\n-      free(__old);\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n     }\n \n   void"}, {"sha": "c5e3f25d8861b83ba7be1169b76a9861a5f4d24f", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -45,9 +45,9 @@\n #pragma GCC system_header\n \n #include <clocale>\n-#include <cstring>   // get std::strlen\n #include <cstdio>    // get std::vsnprintf or std::vsprintf\n #include <cstdarg>\n+#include <cstddef>\n \n #define _GLIBCXX_NUM_CATEGORIES 0\n \n@@ -66,10 +66,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   {\n     char* __old = std::setlocale(LC_NUMERIC, NULL);\n     char* __sav = NULL;\n-    if (std::strcmp(__old, \"C\"))\n+    if (__builtin_strcmp(__old, \"C\"))\n       {\n-\t__sav = new char[std::strlen(__old) + 1];\n-\tstd::strcpy(__sav, __old);\n+\tconst size_t __len = __builtin_strlen(__old) + 1;\n+\t__sav = new char[__len];\n+\t__builtin_memcpy(__sav, __old, __len);\n \tstd::setlocale(LC_NUMERIC, \"C\");\n       }\n "}, {"sha": "da4448d00e5a9a7524472931869b9a3a6ddf1adf", "filename": "libstdc++-v3/config/locale/generic/codecvt_members.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -37,6 +37,7 @@\n #include <locale>\n #include <cstdlib>  // For MB_CUR_MAX\n #include <climits>  // For MB_LEN_MAX\n+#include <cstring>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "6f3115d3637e500acdde4dcac1347035bfa361c0", "filename": "libstdc++-v3/config/locale/generic/collate_members.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcollate_members.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // std::collate implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,6 +35,7 @@\n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n #include <locale>\n+#include <cstring>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "ae1c7cf1d0fd59aa18f9fedcd31460f9e3cfce54", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -36,6 +36,7 @@\n \n #include <locale>\n #include <cstdlib>\n+#include <cstring>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "f82f2f2b6460429065ee1c51023af9ae1bae7f62", "filename": "libstdc++-v3/config/locale/generic/messages_members.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // std::messages implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -83,7 +84,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      messages_byname<_CharT>::messages_byname(const char* __s, size_t __refs)\n      : messages<_CharT>(__refs) \n      { \n-\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\tif (__builtin_strcmp(__s, \"C\") != 0\n+\t    && __builtin_strcmp(__s, \"POSIX\") != 0)\n \t  {\n \t    this->_S_destroy_c_locale(this->_M_c_locale_messages);\n \t    this->_S_create_c_locale(this->_M_c_locale_messages, __s); "}, {"sha": "08fd7a1be4f6ec385cadd8f169ae4ec771c648d8", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -37,6 +37,7 @@\n \n #include <locale>\n #include <cstdlib>\n+#include <cstring>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -46,11 +47,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _M_put(char* __s, size_t __maxlen, const char* __format, \n \t   const tm* __tm) const\n     {\n-      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      char* __old = setlocale(LC_ALL, NULL);\n+      const size_t __llen = strlen(__old) + 1;\n+      char* __sav = new char[__llen];\n+      memcpy(__sav, __old, __llen);\n       setlocale(LC_ALL, _M_name_timepunct);\n       const size_t __len = strftime(__s, __maxlen, __format, __tm);\n-      setlocale(LC_ALL, __old);\n-      free(__old);\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n       // Make sure __s is null terminated.\n       if (__len == 0)\n \t__s[0] = '\\0';\n@@ -128,11 +132,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _M_put(wchar_t* __s, size_t __maxlen, const wchar_t* __format, \n \t   const tm* __tm) const\n     {\n-      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      char* __old = setlocale(LC_ALL, NULL);\n+      const size_t __llen = strlen(__old) + 1;\n+      char* __sav = new char[__llen];\n+      memcpy(__sav, __old, __llen);\n       setlocale(LC_ALL, _M_name_timepunct);\n       const size_t __len = wcsftime(__s, __maxlen, __format, __tm);\n-      setlocale(LC_ALL, __old);\n-      free(__old);\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n       // Make sure __s is null terminated.\n       if (__len == 0)\n \t__s[0] = L'\\0';      "}, {"sha": "dc387691d9a99beca6bbc977fd3e63658f4b2437", "filename": "libstdc++-v3/config/locale/generic/time_members.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // std::time_get, std::time_put implementation, generic version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -62,9 +63,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t     size_t __refs) \n     : facet(__refs), _M_data(NULL)\n     { \n-      const size_t __len = std::strlen(__s) + 1;\n+      const size_t __len = __builtin_strlen(__s) + 1;\n       char* __tmp = new char[__len];\n-      std::memcpy(__tmp, __s, __len);\n+      __builtin_memcpy(__tmp, __s, __len);\n       _M_name_timepunct = __tmp;\n \n       try"}, {"sha": "80a1df92d9c4872e1ff34bf9b4b4e85e7a081cb3", "filename": "libstdc++-v3/config/locale/gnu/c++locale_internal.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc%2B%2Blocale_internal.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -38,6 +38,8 @@\n #include <bits/c++config.h>\n #include <clocale>\n #include <cstdlib>\n+#include <cstring>\n+#include <cstddef>\n #include <langinfo.h>\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)"}, {"sha": "0e1aa760f249f8cc35ca6c150bcd08aa33d40bff", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -44,11 +44,11 @@\n \n #pragma GCC system_header\n \n-#include <cstring>              // get std::strlen\n #include <cstdio>               // get std::vsnprintf or std::vsprintf\n #include <clocale>\n #include <libintl.h> \t\t// For messages\n #include <cstdarg>\n+#include <cstddef>\n \n #define _GLIBCXX_C_LOCALE_GNU 1\n \n@@ -80,8 +80,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __c_locale __old = __gnu_cxx::__uselocale(__cloc);\n #else\n     char* __old = std::setlocale(LC_ALL, NULL);\n-    char* __sav = new char[std::strlen(__old) + 1];\n-    std::strcpy(__sav, __old);\n+    const size_t __len = __builtin_strlen(__old) + 1;\n+    char* __sav = new char[__len];\n+    __builtin_memcpy(__sav, __old, __len);\n     std::setlocale(LC_ALL, \"C\");\n #endif\n "}, {"sha": "cbecc56225bb466606b3d472a1e17b3a1d9adb41", "filename": "libstdc++-v3/config/locale/gnu/messages_members.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -49,11 +49,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __uselocale(__old);\n       return string(__msg);\n #else\n-      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      char* __old = setlocale(LC_ALL, NULL);\n+      const size_t __len = strlen(__old) + 1;\n+      char* __sav = new char[__len];\n+      memcpy(__sav, __old, __len);\n       setlocale(LC_ALL, _M_name_messages);\n       const char* __msg = gettext(__dfault.c_str());\n-      setlocale(LC_ALL, __old);\n-      free(__old);\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n       return string(__msg);\n #endif\n     }\n@@ -69,11 +72,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __uselocale(__old);\n       return _M_convert_from_char(__msg);\n # else\n-      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      char* __old = setlocale(LC_ALL, NULL);\n+      const size_t __len = strlen(__old) + 1;\n+      char* __sav = new char[__len];\n+      memcpy(__sav, __old, __len);\n       setlocale(LC_ALL, _M_name_messages);\n       char* __msg = gettext(_M_convert_to_char(__dfault));\n-      setlocale(LC_ALL, __old);\n-      free(__old);\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n       return _M_convert_from_char(__msg);\n # endif\n     }"}, {"sha": "21e4ccb0626213c32d0262b33d638669fcc336f1", "filename": "libstdc++-v3/config/locale/gnu/messages_members.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // std::messages implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -52,9 +53,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\tsize_t __refs) \n      : facet(__refs), _M_c_locale_messages(NULL), _M_name_messages(NULL)\n      {\n-       const size_t __len = std::strlen(__s) + 1;\n+       const size_t __len = __builtin_strlen(__s) + 1;\n        char* __tmp = new char[__len];\n-       std::memcpy(__tmp, __s, __len);\n+       __builtin_memcpy(__tmp, __s, __len);\n        _M_name_messages = __tmp;\n \n        // Last to avoid leaking memory if new throws.\n@@ -102,11 +103,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      { \n        if (this->_M_name_messages != locale::facet::_S_get_c_name())\n \t delete [] this->_M_name_messages;\n-       char* __tmp = new char[std::strlen(__s) + 1];\n-       std::strcpy(__tmp, __s);\n+       const size_t __len = __builtin_strlen(__s) + 1;\n+       char* __tmp = new char[__len];\n+       __builtin_memcpy(__tmp, __s, __len);\n        this->_M_name_messages = __tmp;\n \n-       if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+       if (__builtin_strcmp(__s, \"C\") != 0\n+\t   && __builtin_strcmp(__s, \"POSIX\") != 0)\n \t {\n \t   this->_S_destroy_c_locale(this->_M_c_locale_messages);\n \t   this->_S_create_c_locale(this->_M_c_locale_messages, __s); "}, {"sha": "28683b5fae4cf1c756e7752d555df65a02f1874f", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -383,7 +383,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __c_locale __old = __uselocale(__cloc);\n #else\n \t  // Switch to named locale so that mbsrtowcs will work.\n-\t  char* __old = strdup(setlocale(LC_ALL, NULL));\n+\t  char* __old = setlocale(LC_ALL, NULL);\n+          const size_t __llen = strlen(__old) + 1;\n+          char* __sav = new char[__llen];\n+          memcpy(__sav, __old, __llen);\n \t  setlocale(LC_ALL, __name);\n #endif\n \n@@ -457,8 +460,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n \t      __uselocale(__old);\n #else\n-\t      setlocale(LC_ALL, __old);\n-\t      free(__old);\n+\t      setlocale(LC_ALL, __sav);\n+\t      delete [] __sav;\n #endif\n \t      __throw_exception_again;\n \t    } \n@@ -478,8 +481,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n \t  __uselocale(__old);\n #else\n-\t  setlocale(LC_ALL, __old);\n-\t  free(__old);\n+\t  setlocale(LC_ALL, __sav);\n+\t  delete [] __sav;\n #endif\n \t}\n     }\n@@ -525,7 +528,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __c_locale __old = __uselocale(__cloc);\n #else\n \t  // Switch to named locale so that mbsrtowcs will work.\n-\t  char* __old = strdup(setlocale(LC_ALL, NULL));\n+\t  char* __old = setlocale(LC_ALL, NULL);\n+          const size_t __llen = strlen(__old) + 1;\n+          char* __sav = new char[__llen];\n+          memcpy(__sav, __old, __llen);\n \t  setlocale(LC_ALL, __name);\n #endif\n \n@@ -600,8 +606,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n \t      __uselocale(__old);\n #else\n-\t      setlocale(LC_ALL, __old);\n-\t      free(__old);\n+\t      setlocale(LC_ALL, __sav);\n+\t      delete [] __sav;\n #endif\n               __throw_exception_again;\n \t    }\n@@ -620,8 +626,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n \t  __uselocale(__old);\n #else\n-\t  setlocale(LC_ALL, __old);\n-\t  free(__old);\n+\t  setlocale(LC_ALL, __sav);\n+\t  delete [] __sav;\n #endif\n \t}\n     }"}, {"sha": "3c9a61fabaa0b32f75ad2aeef673e8b765f33247", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,11 +50,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const size_t __len = __strftime_l(__s, __maxlen, __format, __tm,\n \t\t\t\t\t_M_c_locale_timepunct);\n #else\n-      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      char* __old = setlocale(LC_ALL, NULL);\n+      const size_t __llen = strlen(__old) + 1;  \n+      char* __sav = new char[__llen];\n+      memcpy(__sav, __old, __llen);\n       setlocale(LC_ALL, _M_name_timepunct);\n       const size_t __len = strftime(__s, __maxlen, __format, __tm);\n-      setlocale(LC_ALL, __old);\n-      free(__old);\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n #endif\n       // Make sure __s is null terminated.\n       if (__len == 0)\n@@ -202,11 +206,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const size_t __len = __wcsftime_l(__s, __maxlen, __format, __tm,\n \t\t\t\t\t_M_c_locale_timepunct);\n #else\n-      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      char* __old = setlocale(LC_ALL, NULL);\n+      const size_t __llen = strlen(__old) + 1;\n+      char* __sav = new char[__llen];\n+      memcpy(__sav, __old, __llen);\n       setlocale(LC_ALL, _M_name_timepunct);\n       const size_t __len = wcsftime(__s, __maxlen, __format, __tm);\n-      setlocale(LC_ALL, __old);\n-      free(__old);\n+      setlocale(LC_ALL, __sav);\n+      delete [] __sav;\n #endif\n       // Make sure __s is null terminated.\n       if (__len == 0)"}, {"sha": "7f97bcbbd7b45433d01e8c3b5945d1e52309b72b", "filename": "libstdc++-v3/config/locale/gnu/time_members.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -59,9 +60,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     : facet(__refs), _M_data(NULL), _M_c_locale_timepunct(NULL), \n       _M_name_timepunct(NULL)\n     { \n-      const size_t __len = std::strlen(__s) + 1;\n+      const size_t __len = __builtin_strlen(__s) + 1;\n       char* __tmp = new char[__len];\n-      std::memcpy(__tmp, __s, __len);\n+      __builtin_memcpy(__tmp, __s, __len);\n       _M_name_timepunct = __tmp;\n \n       try"}, {"sha": "779b26a0d492e368559781513798cc0fcd43e1dd", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_noninline.h", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -48,15 +49,18 @@\n   ctype<char>::classic_table() throw()\n   {\n     const ctype_base::mask* __ret;\n-    char* __old = strdup(setlocale(LC_CTYPE, NULL));\n+    char* __old = setlocale(LC_CTYPE, NULL);\n+    const size_t __len = __builtin_strlen(__old) + 1;\n+    char* __sav = new char[__len];\n+    __builtin_memcpy(__sav, __old, __len);\n     setlocale(LC_CTYPE, \"C\");\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __ret = *__ctype_b_loc();\n #else\n     __ret = __ctype_b;\n #endif\n-    setlocale(LC_CTYPE, __old);\n-    free(__old);\n+    setlocale(LC_CTYPE, __sav);\n+    delete [] __sav;\n     return __ret;\n   }\n #endif\n@@ -71,16 +75,19 @@\n   _M_table(__table ? __table : _M_c_locale_ctype->__ctype_b), \n   _M_widen_ok(0), _M_narrow_ok(0) \n   {\n-    memset(_M_widen, 0, sizeof(_M_widen));\n-    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    __builtin_memset(_M_widen, 0, sizeof(_M_widen));\n+    __builtin_memset(_M_narrow, 0, sizeof(_M_narrow));\n   }\n #else\n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n   : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n   _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n   {\n-    char* __old=strdup(setlocale(LC_CTYPE, NULL));\n+    char* __old = setlocale(LC_CTYPE, NULL);\n+    const size_t __len = __builtin_strlen(__old) + 1;\n+    char* __sav = new char[__len];\n+    __builtin_memcpy(__sav, __old, __len);    \n     setlocale(LC_CTYPE, \"C\");\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     _M_toupper = *__ctype_toupper_loc();\n@@ -91,10 +98,10 @@\n     _M_tolower = __ctype_tolower;\n     _M_table = __table ? __table : __ctype_b;\n #endif\n-    setlocale(LC_CTYPE, __old);\n-    free(__old);\n-    memset(_M_widen, 0, sizeof(_M_widen));\n-    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    setlocale(LC_CTYPE, __sav);\n+    delete [] __sav;\n+    __builtin_memset(_M_widen, 0, sizeof(_M_widen));\n+    __builtin_memset(_M_narrow, 0, sizeof(_M_narrow));\n   }\n #endif\n \n@@ -107,15 +114,18 @@\n   _M_table(__table ? __table : _M_c_locale_ctype->__ctype_b), \n   _M_widen_ok(0), _M_narrow_ok(0) \n   {\n-    memset(_M_widen, 0, sizeof(_M_widen));\n-    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    __builtin_memset(_M_widen, 0, sizeof(_M_widen));\n+    __builtin_memset(_M_narrow, 0, sizeof(_M_narrow));\n   }\n #else\n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n   : facet(__refs), _M_c_locale_ctype(_S_get_c_locale()), \n   _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n   {\n-    char* __old=strdup(setlocale(LC_CTYPE, NULL));\n+    char* __old = setlocale(LC_CTYPE, NULL);\n+    const size_t __len = __builtin_strlen(__old) + 1;\n+    char* __sav = new char[__len];\n+    __builtin_memcpy(__sav, __old, __len);\n     setlocale(LC_CTYPE, \"C\");\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     _M_toupper = *__ctype_toupper_loc();\n@@ -126,10 +136,10 @@\n     _M_tolower = __ctype_tolower;\n     _M_table = __table ? __table : __ctype_b;\n #endif\n-    setlocale(LC_CTYPE, __old);\n-    free(__old);\n-    memset(_M_widen, 0, sizeof(_M_widen));\n-    memset(_M_narrow, 0, sizeof(_M_narrow));\n+    setlocale(LC_CTYPE, __sav);\n+    delete [] __sav;\n+    __builtin_memset(_M_widen, 0, sizeof(_M_widen));\n+    __builtin_memset(_M_narrow, 0, sizeof(_M_narrow));\n   }\n #endif\n "}, {"sha": "e2136742456e3a478d5073b730fba9df255a4e41", "filename": "libstdc++-v3/config/os/tpf/ctype_noninline.h", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Ftpf%2Fctype_noninline.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,38 +42,47 @@\n   ctype<char>::classic_table() throw()\n   {\n     const ctype_base::mask* __ret;\n-    char* __old = strdup(setlocale(LC_CTYPE, NULL));\n+    char* __old = setlocale(LC_CTYPE, NULL);\n+    const size_t __len = __builtin_strlen(__old) + 1;\n+    char* __sav = new char[__len];\n+    __builtin_memcpy(__sav, __old, __len);\n     setlocale(LC_CTYPE, \"C\");\n     __ret = *__ctype_b_loc();\n-    setlocale(LC_CTYPE, __old);\n-    free(__old);\n+    setlocale(LC_CTYPE, __sav);\n+    delete [] __sav;\n     return __ret;\n   }\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n \t\t     size_t __refs) \n   : facet(__refs), _M_del(__table != 0 && __del)\n   {\n-    char* __old=strdup(setlocale(LC_CTYPE, NULL));\n+    char* __old = setlocale(LC_CTYPE, NULL);\n+    const size_t __len = __builtin_strlen(__old) + 1;\n+    char* __sav = new char[__len];\n+    __builtin_memcpy(__sav, __old, __len);\n     setlocale(LC_CTYPE, \"C\");\n     _M_toupper = *__ctype_toupper_loc();\n     _M_tolower = *__ctype_tolower_loc();\n     _M_table = __table ? __table : *__ctype_b_loc();\n-    setlocale(LC_CTYPE, __old);\n-    free(__old);\n+    setlocale(LC_CTYPE, __sav);\n+    delete [] __sav;\n     _M_c_locale_ctype = _S_get_c_locale();\n   }\n \n   ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)\n   : facet(__refs), _M_del(__table != 0 && __del)\n   {\n-    char* __old=strdup(setlocale(LC_CTYPE, NULL));\n+    char* __old = setlocale(LC_CTYPE, NULL);\n+    const size_t __len = __builtin_strlen(__old) + 1;\n+    char* __sav = new char[__len];\n+    __builtin_memcpy(__sav, __old, __len);\n     setlocale(LC_CTYPE, \"C\");\n     _M_toupper = *__ctype_toupper_loc();\n     _M_tolower = *__ctype_tolower_loc();\n     _M_table = __table ? __table : *__ctype_b_loc();\n-    setlocale(LC_CTYPE, __old);\n-    free(__old);\n+    setlocale(LC_CTYPE, __sav);\n+    delete [] __sav;\n     _M_c_locale_ctype = _S_get_c_locale();\n   }\n "}, {"sha": "a4b4e3a0d64791e84e8cacdfe2ed2f1295b4d6dd", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -43,7 +43,6 @@\n \n #pragma GCC system_header\n \n-#include <cstring>              // For memmove, memset, memchr\n #include <bits/stl_algobase.h>  // For copy, fill_n\n #include <bits/postypes.h>      // For streampos\n #include <cstdio>               // For EOF\n@@ -186,8 +185,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     char_traits<_CharT>::\n     move(char_type* __s1, const char_type* __s2, std::size_t __n)\n     {\n-      return static_cast<_CharT*>(std::memmove(__s1, __s2,\n-\t\t\t\t\t       __n * sizeof(char_type)));\n+      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,\n+\t\t\t\t\t\t    __n * sizeof(char_type)));\n     }\n \n   template<typename _CharT>\n@@ -254,27 +253,27 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       static int\n       compare(const char_type* __s1, const char_type* __s2, size_t __n)\n-      { return memcmp(__s1, __s2, __n); }\n+      { return __builtin_memcmp(__s1, __s2, __n); }\n \n       static size_t\n       length(const char_type* __s)\n-      { return strlen(__s); }\n+      { return __builtin_strlen(__s); }\n \n       static const char_type*\n       find(const char_type* __s, size_t __n, const char_type& __a)\n-      { return static_cast<const char_type*>(memchr(__s, __a, __n)); }\n+      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }\n \n       static char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return static_cast<char_type*>(memmove(__s1, __s2, __n)); }\n+      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }\n \n       static char_type*\n       copy(char_type* __s1, const char_type* __s2, size_t __n)\n-      { return static_cast<char_type*>(memcpy(__s1, __s2, __n)); }\n+      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }\n \n       static char_type*\n       assign(char_type* __s, size_t __n, char_type __a)\n-      { return static_cast<char_type*>(memset(__s, __a, __n)); }\n+      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }\n \n       static char_type\n       to_char_type(const int_type& __c)"}, {"sha": "d8d33070ff7fb93feaabe952d70e852c23a0f69f", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -457,7 +457,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       codecvt_byname(const char* __s, size_t __refs = 0)\n       : codecvt<_InternT, _ExternT, _StateT>(__refs)\n       {\n-\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\tif (__builtin_strcmp(__s, \"C\") != 0\n+\t    && __builtin_strcmp(__s, \"POSIX\") != 0)\n \t  {\n \t    this->_S_destroy_c_locale(this->_M_c_locale_codecvt);\n \t    this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);"}, {"sha": "28dde161490492bf94ec8b5fe75165481b7d6ee7", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -263,14 +263,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t{\n \t\t  char* __buf = new char[__blen];\n \t\t  if (__remainder)\n-\t\t    std::memcpy(__buf, _M_ext_next, __remainder);\n+\t\t    __builtin_memcpy(__buf, _M_ext_next, __remainder);\n \n \t\t  delete [] _M_ext_buf;\n \t\t  _M_ext_buf = __buf;\n \t\t  _M_ext_buf_size = __blen;\n \t\t}\n \t      else if (__remainder)\n-\t\tstd::memmove(_M_ext_buf, _M_ext_next, __remainder);\n+\t\t__builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);\n \n \t      _M_ext_next = _M_ext_buf;\n \t      _M_ext_end = _M_ext_buf + __remainder;\n@@ -888,7 +888,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t     this->gptr() - this->eback());\n \t\t      const streamsize __remainder = _M_ext_end - _M_ext_next;\n \t\t      if (__remainder)\n-\t\t\tstd::memmove(_M_ext_buf, _M_ext_next, __remainder);\n+\t\t\t__builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);\n \n \t\t      _M_ext_next = _M_ext_buf;\n \t\t      _M_ext_end = _M_ext_buf + __remainder;"}, {"sha": "60de269567701894cc7984807ddba0882535f1d3", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -44,7 +44,6 @@\n #pragma GCC system_header\n \n #include <bits/localefwd.h>\n-#include <cstring>\t\t// For strcmp.\n #include <string>\n #include <ext/atomicity.h>\n \n@@ -537,7 +536,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (_M_names[1])\n \t// We must actually compare all the _M_names: can be all equal!\n \tfor (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)\n-\t  __ret = std::strcmp(_M_names[__i], _M_names[__i + 1]) == 0;\n+\t  __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;\n       return __ret;\n     }\n \n@@ -810,7 +809,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       collate_byname(const char* __s, size_t __refs = 0)\n       : collate<_CharT>(__refs)\n       {\n-\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\tif (__builtin_strcmp(__s, \"C\") != 0\n+\t    && __builtin_strcmp(__s, \"POSIX\") != 0)\n \t  {\n \t    this->_S_destroy_c_locale(this->_M_c_locale_collate);\n \t    this->_S_create_c_locale(this->_M_c_locale_collate, __s);"}, {"sha": "7a89927faddc8b0d48c8bd03be7b8529d076d74c", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -899,7 +899,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n \tif (_M_widen_ok == 1)\n \t  {\n-\t    memcpy(__to, __lo, __hi - __lo);\n+\t    __builtin_memcpy(__to, __lo, __hi - __lo);\n \t    return __hi;\n \t  }\n \tif (!_M_widen_ok)\n@@ -964,7 +964,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n \tif (__builtin_expect(_M_narrow_ok == 1, true))\n \t  {\n-\t    memcpy(__to, __lo, __hi - __lo);\n+\t    __builtin_memcpy(__to, __lo, __hi - __lo);\n \t    return __hi;\n \t  }\n \tif (!_M_narrow_ok)\n@@ -1101,7 +1101,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       virtual const char*\n       do_widen(const char* __lo, const char* __hi, char_type* __dest) const\n       {\n-\tmemcpy(__dest, __lo, __hi - __lo);\n+\t__builtin_memcpy(__dest, __lo, __hi - __lo);\n \treturn __hi;\n       }\n \n@@ -1154,7 +1154,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       do_narrow(const char_type* __lo, const char_type* __hi,\n \t\tchar, char* __dest) const\n       {\n-\tmemcpy(__dest, __lo, __hi - __lo);\n+\t__builtin_memcpy(__dest, __lo, __hi - __lo);\n \treturn __hi;\n       }\n \n@@ -1169,7 +1169,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n \t_M_widen_ok = 1;\n \t// Set _M_widen_ok to 2 if memcpy can't be used.\n-\tif (memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n+\tif (__builtin_memcmp(__tmp, _M_widen, sizeof(_M_widen)))\n \t  _M_widen_ok = 2;\n       }\n \n@@ -1184,7 +1184,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \tdo_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n \n \t_M_narrow_ok = 1;\n-\tif (memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n+\tif (__builtin_memcmp(__tmp, _M_narrow, sizeof(_M_narrow)))\n \t  _M_narrow_ok = 2;\n \telse\n \t  {\n@@ -1922,7 +1922,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       numpunct_byname(const char* __s, size_t __refs = 0)\n       : numpunct<_CharT>(__refs)\n       {\n-\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\tif (__builtin_strcmp(__s, \"C\") != 0\n+\t    && __builtin_strcmp(__s, \"POSIX\") != 0)\n \t  {\n \t    __c_locale __tmp;\n \t    this->_S_create_c_locale(__tmp, __s);"}, {"sha": "31c90e3b43cb5e0b73393c4df833ec4c4e9c7f29", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1320,7 +1320,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       moneypunct_byname(const char* __s, size_t __refs = 0)\n       : moneypunct<_CharT, _Intl>(__refs)\n       {\n-\tif (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+\tif (__builtin_strcmp(__s, \"C\") != 0\n+\t    && __builtin_strcmp(__s, \"POSIX\") != 0)\n \t  {\n \t    __c_locale __tmp;\n \t    this->_S_create_c_locale(__tmp, __s);"}, {"sha": "64bd7df4b59939d7951992dabd023b29a62e4701", "filename": "libstdc++-v3/include/ext/pod_char_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpod_char_traits.h?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -140,8 +140,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       static char_type*\n       move(char_type* __s1, const char_type* __s2, size_t __n)\n       { \n-\treturn static_cast<char_type*>(std::memmove(__s1, __s2, \n-\t\t\t\t\t\t    __n * sizeof(char_type))); \n+\treturn static_cast<char_type*>\n+\t  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type)));\n       }\n \n       static char_type*"}, {"sha": "9ead05915dc81159a955a3a49b2a23dcd23bde40", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -51,7 +51,6 @@\n #pragma GCC system_header\n \n #include <cstddef>     // For size_t\n-#include <cstring>     // For memset\n #include <string>\n #include <bits/functexcept.h>   // For invalid_argument, out_of_range,\n                                 // overflow_error\n@@ -165,7 +164,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \n       void\n       _M_do_reset()\n-      { std::memset(_M_w, 0, _Nw * sizeof(_WordT)); }\n+      { __builtin_memset(_M_w, 0, _Nw * sizeof(_WordT)); }\n \n       bool\n       _M_is_equal(const _Base_bitset<_Nw>& __x) const"}, {"sha": "a77e8e5b010926941bb8032fb77aa4842b9220e5", "filename": "libstdc++-v3/src/ctype.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fctype.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -29,6 +29,7 @@\n \n #include <locale>\n #include <cstdlib>\n+#include <cstring>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "d5e36d2df84d2d07746f755cc8d6149245fa8cc3", "filename": "libstdc++-v3/testsuite/19_diagnostics/logic_error/what-1.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Flogic_error%2Fwhat-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Flogic_error%2Fwhat-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Flogic_error%2Fwhat-1.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // 2001-02-26 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +23,7 @@\n \n #include <string>\n #include <stdexcept>\n+#include <cstring>\n #include <testsuite_hooks.h>\n \n // libstdc++/1972"}, {"sha": "030b5e8f61f50571660cee0dd1e638e3d986c70c", "filename": "libstdc++-v3/testsuite/19_diagnostics/logic_error/what-2.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Flogic_error%2Fwhat-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Flogic_error%2Fwhat-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Flogic_error%2Fwhat-2.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // 2001-02-26 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +23,7 @@\n \n #include <string>\n #include <stdexcept>\n+#include <cstring>\n #include <testsuite_hooks.h>\n \n // libstdc++/2089"}, {"sha": "a46a421db2eaee86a7ecf70297c6edb55179b7ce", "filename": "libstdc++-v3/testsuite/19_diagnostics/runtime_error/what-1.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fruntime_error%2Fwhat-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fruntime_error%2Fwhat-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fruntime_error%2Fwhat-1.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // 2001-02-26 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +23,7 @@\n \n #include <string>\n #include <stdexcept>\n+#include <cstring>\n #include <testsuite_hooks.h>\n \n // libstdc++/1972"}, {"sha": "779c1f518067bec9e8e8d6c83ce975c3a86559e8", "filename": "libstdc++-v3/testsuite/19_diagnostics/runtime_error/what-2.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fruntime_error%2Fwhat-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fruntime_error%2Fwhat-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fruntime_error%2Fwhat-2.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // 2001-02-26 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +23,7 @@\n \n #include <string>\n #include <stdexcept>\n+#include <cstring>\n #include <testsuite_hooks.h>\n \n // libstdc++/2089"}, {"sha": "04b85c0c5fe9db00f5601bbfe357af5a2036105e", "filename": "libstdc++-v3/testsuite/19_diagnostics/runtime_error/what-3.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fruntime_error%2Fwhat-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538075fe425ea95f3845eaaefe644d511d636c48/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fruntime_error%2Fwhat-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fruntime_error%2Fwhat-3.cc?ref=538075fe425ea95f3845eaaefe644d511d636c48", "patch": "@@ -1,6 +1,7 @@\n // 2001-02-26 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +23,7 @@\n \n #include <string>\n #include <stdexcept>\n+#include <cstring>\n #include <testsuite_hooks.h>\n \n // test copy ctors and assignment operators"}]}