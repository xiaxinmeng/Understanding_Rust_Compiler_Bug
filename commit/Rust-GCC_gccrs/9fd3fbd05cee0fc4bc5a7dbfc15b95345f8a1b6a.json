{"sha": "9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZkM2ZiZDA1Y2VlMGZjNGJjNWE3ZGJmYzE1Yjk1MzQ1ZjhhMWI2YQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-31T09:05:45Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-31T09:05:45Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r645", "tree": {"sha": "ff067672957a9955419621d15325a0c3ae7e504a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff067672957a9955419621d15325a0c3ae7e504a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a/comments", "author": null, "committer": null, "parents": [{"sha": "ef58021bdb92d5a9cf2acabb1845ff9b70cc9541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef58021bdb92d5a9cf2acabb1845ff9b70cc9541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef58021bdb92d5a9cf2acabb1845ff9b70cc9541"}], "stats": {"total": 88, "additions": 31, "deletions": 57}, "files": [{"sha": "89f57729c188e9f7879e27f0d7634ae1c1c91299", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a", "patch": "@@ -912,23 +912,26 @@ extern enum reg_class regno_reg_class[];\n \n /* On the 68k, the trampoline looks like this:\n      mov  @#.,a0\n-     jsr  @#__trampoline\n-     jsr  @#__trampoline\n+     jsr  @#___trampoline\n+     jsr  @#___trampoline\n      .long STATIC\n      .long FUNCTION\n The reason for having three jsr insns is so that an entire line\n of the instruction cache is filled in a predictable way\n-that will always be the same.  */\n+that will always be the same.\n+\n+We always use the assembler label ___trampoline\n+regardless of whether the system adds underscores.  */\n \n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x207c));\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4ef9));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (SYMBOL_REF, SImode, \"__trampoline\"));\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4ef9));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (SYMBOL_REF, SImode, \"__trampoline\"));\t\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4eb9));\t\\\n+  ASM_OUTPUT_INT (FILE, gen_rtx (SYMBOL_REF, SImode, \"*___trampoline\"));\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4eb9));\t\\\n+  ASM_OUTPUT_INT (FILE, gen_rtx (SYMBOL_REF, SImode, \"*___trampoline\"));\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n   ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n@@ -969,6 +972,7 @@ void\t\t\t\t\t\t\t\t\\\n __transfer_from_trampoline ()\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   register char *a0 asm (\"%a0\");\t\t\t\t\\\n+  asm (GLOBAL_ASM_OP, \" ___trampoline\");\t\t\t\\\n   asm (\"___trampoline:\");\t\t\t\t\t\\\n   asm volatile (\"move%.l %0,%@\" : : \"m\" (a0[22]));\t\t\\\n   asm volatile (\"move%.l %1,%0\" : \"=a\" (a0) : \"m\" (a0[18]));\t\\\n@@ -1303,6 +1307,8 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    work properly in synth_mult on the 68020,\n    relative to an average of the time for add and the time for shift,\n    taking away a little more because sometimes move insns are needed.  */\n+#define MULL_COST (TARGET_68040 ? 5 : 13)\n+#define MULW_COST (TARGET_68040 ? 3 : 8)\n \n #define RTX_COSTS(X,CODE)\t\t\t\t\t\\\n   case PLUS:\t\t\t\t\t\t\t\\\n@@ -1345,9 +1351,9 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \tbreak;\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n     else if (GET_MODE (X) == QImode || GET_MODE (X) == HImode)\t\\\n-      return COSTS_N_INSNS (8); /* mul.w */\t\t\t\\\n+      return COSTS_N_INSNS (MULW_COST);\t\t\t\t\\\n     else\t\t\t\t\t\t\t\\\n-      return COSTS_N_INSNS (13);\t /* mul.l */\t\t\\\n+      return COSTS_N_INSNS (MULL_COST);\t\t\t\t\\\n     break;\t\t\t\t\t\t\t\\\n   case DIV:\t\t\t\t\t\t\t\\\n   case UDIV:\t\t\t\t\t\t\t\\\n@@ -1473,8 +1479,11 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n /* This is how to output a command to make the user-level label named NAME\n    defined for reference from other files.  */\n \n+#define GLOBAL_ASM_OP \".globl\"\n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n-  do { fputs (\".globl \", FILE); assemble_name (FILE, NAME); fputs (\"\\n\", FILE);} while (0)\n+  do { fprintf (FILE, \"%s \", GLOBAL_ASM_OP);\t\t\\\n+       assemble_name (FILE, NAME);\t\t\t\\\n+       fputs (\"\\n\", FILE);} while (0)\n \n /* This is how to output a reference to a user-level label named NAME.\n    `assemble_name' uses this.  */"}, {"sha": "55f315916c00cc7f95cc49e26dc0e55121374afb", "filename": "gcc/config/m68k/sgs.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a/gcc%2Fconfig%2Fm68k%2Fsgs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a/gcc%2Fconfig%2Fm68k%2Fsgs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsgs.h?ref=9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a", "patch": "@@ -38,6 +38,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define LONG_ASM_OP\t\t\".long\"\n #define SPACE_ASM_OP\t\t\".space\"\n #define ALIGN_ASM_OP\t\t\".align\"\n+#undef GLOBAL_ASM_OP\n #define GLOBAL_ASM_OP\t\t\".global\"\n #define SWBEG_ASM_OP\t\t\".swbeg\"\n #define SET_ASM_OP\t\t\".set\"\n@@ -199,17 +200,6 @@ do { union { float f; long l;} tem;\t\t\t\\\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (68k, SGS/AT&T syntax)\");\n \n-/* This is how to output a command to make the user-level label named NAME\n-   defined for reference from other files.  */\n-\n-#undef ASM_GLOBALIZE_LABEL\n-#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\\\n-\tfprintf ((FILE), \"\\t%s \", GLOBAL_ASM_OP);\t\t\\\n-\tassemble_name ((FILE), NAME);\t\t\t\t\\\n-\tfputs (\"\\n\", FILE);\t\t\t\t\t\\\n-    } while (0)\n-\n #undef PRINT_OPERAND_PRINT_FLOAT\n #define PRINT_OPERAND_PRINT_FLOAT(CODE,FILE)\t\t\t\\\n \tasm_fprintf ((FILE), \"%I0x%x\", u1.i);"}, {"sha": "c43882e12373fc8c177e7c2100a3b20bf3e9ab4e", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 11, "deletions": 36, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=9fd3fbd05cee0fc4bc5a7dbfc15b95345f8a1b6a", "patch": "@@ -159,10 +159,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n         fprintf (FILE, \"\\tlink %%a6,&%d\\n\", -fsize);\t\t\\\n       else\t\t\t\t\t\t\t\\\n \tfprintf (FILE, \"\\tlink %%a6,&0\\n\\tsub.l &%d,%%sp\\n\", fsize); }  \\\n-  for (regno = 24; regno < 56; regno++)                         \\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])       \\\n-      fprintf(FILE, \"\\tfpmoved %s,-(%%sp)\\n\",                   \\\n-\t      reg_names[regno]);                                \\\n   for (regno = 16; regno < 24; regno++)\t\t\t\t\\\n     if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n        mask |= 1 << (regno - 16);\t\t\t\t\\\n@@ -188,20 +184,15 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n { register int regno;\t\t\t\t\t\t\\\n   register int mask, fmask;\t\t\t\t\t\\\n   register int nregs;\t\t\t\t\t\t\\\n-  int offset, foffset, fpoffset;   \t                        \\\n+  int offset, foffset;\t\t   \t                        \\\n   extern char call_used_regs[];\t\t\t\t\t\\\n   int fsize = ((SIZE) + 3) & -4;\t\t\t\t\\\n   int big = 0;\t\t\t\t\t\t\t\\\n-  nregs = 0;  fmask = 0; fpoffset = 0;  \t\t\t\\\n-  for (regno = 24 ; regno < 56 ; regno++)\t\t\t\\\n-    if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n-      nregs++;\t\t\t\t\t\t\t\\\n-  fpoffset = nregs*8;\t\t\t\t\t\t\\\n-  nregs = 0;\t\t\t\t\t\t\t\\\n+  nregs = 0;  fmask = 0;\t\t  \t\t\t\\\n   for (regno = 16; regno < 24; regno++)\t\t\t\t\\\n     if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n       { nregs++; fmask |= 1 << (23 - regno); }\t\t\t\\\n-  foffset = fpoffset + nregs * 12;\t\t\t\t\\\n+  foffset = nregs * 12;\t\t\t\t\t\t\\\n   nregs = 0;  mask = 0;\t\t\t\t\t\t\\\n   if (frame_pointer_needed) regs_ever_live[FRAME_POINTER_REGNUM] = 0; \\\n   for (regno = 0; regno < 16; regno++)\t\t\t\t\\\n@@ -210,7 +201,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   offset = foffset + nregs * 4;\t\t\t\t\t\\\n   if (offset + fsize >= 0x8000 \t\t\t\t\t\\\n       && frame_pointer_needed \t\t\t\t\t\\\n-      && (mask || fmask || fpoffset)) \t\t\t\t\\\n+      && (mask || fmask))\t \t\t\t\t\\\n     { fprintf (FILE, \"\\tmov.l &%d,%%a0\\n\", -fsize);\t\t\\\n       fsize = 0, big = 1; }\t\t\t\t\t\\\n   if (exact_log2 (mask) >= 0) {\t\t\t\t\t\\\n@@ -241,20 +232,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n     else\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\tfmovm -%d(%%a6),&0x%x\\n\",\t\t\\\n \t       foffset + fsize, fmask); }\t\t\t\\\n-  if (fpoffset != 0)\t\t\t\t\t\t\\\n-    for (regno = 55; regno >= 24; regno--)\t\t\t\\\n-      if (regs_ever_live[regno] && ! call_used_regs[regno]) {\t\\\n-\tif (big)\t\t\t\t\t\t\\\n-\t  fprintf(FILE, \"\\tfpmoved -%d(%%a6,%%a0.l),%s\\n\",\t\\\n-\t\t  fpoffset + fsize, reg_names[regno]);\t\t\\\n-\telse if (! frame_pointer_needed)\t\t\t\\\n-\t  fprintf(FILE, \"\\tfpmoved (%%sp)+,%s\\n\",\t\t\\\n-\t\t  reg_names[regno]);\t\t\t\t\\\n-\telse\t\t\t\t\t\t\t\\\n-\t  fprintf(FILE, \"\\tfpmoved -%d(%%a6),%s\\n\",\t\t\\\n-\t\t  fpoffset + fsize, reg_names[regno]);\t\t\\\n-\tfpoffset -= 8;\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n   if (current_function_returns_pointer)                         \\\n     fprintf (FILE, \"\\tmov.l %%d0,%%a0\\n\");                      \\\n   if (frame_pointer_needed)\t\t\t\t\t\\\n@@ -314,16 +291,12 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define ASM_FORMAT_PRIVATE_NAME(OUTPUT, NAME, LABELNO)\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 11),\t\\\n   sprintf ((OUTPUT), \"%s%%%%%d\", (NAME), (LABELNO)))\n-\n-/* This is how to output a command to make the user-level label named NAME\n+ \n+/* This is the command to make the user-level label named NAME\n    defined for reference from other files.  */\n \n-#undef ASM_GLOBALIZE_LABEL\n-#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n-do { fputs (\"\\tglobal \", FILE);         \\\n-     assemble_name (FILE, NAME);        \\\n-     fputs (\"\\n\", FILE);                \\\n-   } while (0)\n+#undef GLOBAL_ASM_OP\n+#define GLOBAL_ASM_OP \"global\"\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL, PREFIX, NUM)\t\\\n@@ -577,7 +550,9 @@ do { fprintf (asm_out_file, \"\\tdef\\t\");\t\\\n #define PUT_SDB_ENDEF fputs(\"\\tendef\\n\", asm_out_file)\n #define PUT_SDB_TYPE(a) fprintf(asm_out_file, \"\\ttype\\t0%o;\", a)\n #define PUT_SDB_SIZE(a) fprintf(asm_out_file, \"\\tsize\\t%d;\", a)\n-#define PUT_SDB_DIM(a) fprintf(asm_out_file, \"\\tdim\\t%d;\", a)\n+#define PUT_SDB_START_DIM fprintf(asm_out_file, \"\\tdim\\t\")\n+#define PUT_SDB_NEXT_DIM(a) fprintf(asm_out_file, \"%d,\", a)\n+#define PUT_SDB_LAST_DIM(a) fprintf(asm_out_file, \"%d;\", a)\n \n #define PUT_SDB_TAG(a)\t\t\t\t\\\n do { fprintf (asm_out_file, \"\\ttag\\t\");\t\\"}]}