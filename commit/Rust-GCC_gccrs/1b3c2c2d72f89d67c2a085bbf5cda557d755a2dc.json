{"sha": "1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzYzJjMmQ3MmY4OWQ2N2MyYTA4NWJiZjVjZGE1NTdkNzU1YTJkYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-07-13T13:14:06Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-07-13T13:14:06Z"}, "message": "re PR target/13926 (GCC generates jumps that are too large to fit in word displacement field)\n\n\tPR target/13926\n\t* config/sparc/sparc-protos.h (output_ubranch): New prototype.\n\t* config/sparc/sparc.c (output_ubranch): New function.\n\t* config/sparc/sparc.md (jump pattern): Use it.\n\nFrom-SVN: r84621", "tree": {"sha": "9a7f67d12d03fd432de176c0261de308dc0a1cee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a7f67d12d03fd432de176c0261de308dc0a1cee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "883d9e0c3f8da4b06c0fdef2c4e0db8d1c7c7a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883d9e0c3f8da4b06c0fdef2c4e0db8d1c7c7a19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883d9e0c3f8da4b06c0fdef2c4e0db8d1c7c7a19"}], "stats": {"total": 94, "additions": 73, "deletions": 21}, "files": [{"sha": "0eb6facf719335e54c68c12fc2e3c0b76aecdbd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc", "patch": "@@ -1,3 +1,10 @@\n+2004-07-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/13926\n+\t* config/sparc/sparc-protos.h (output_ubranch): New prototype.\n+\t* config/sparc/sparc.c (output_ubranch): New function.\n+\t* config/sparc/sparc.md (jump pattern): Use it.\n+\n 2004-07-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/16494"}, {"sha": "c28c31817aeb2dc585cb87de023d67e146a49dc9", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc", "patch": "@@ -82,6 +82,7 @@ extern void sparc_emit_set_const64 (rtx, rtx);\n extern void sparc_emit_set_symbolic_const64 (rtx, rtx, rtx);\n extern int sparc_splitdi_legitimate (rtx, rtx);\n extern int sparc_absnegfloat_split_legitimate (rtx, rtx);\n+extern const char *output_ubranch (rtx, int, rtx);\n extern const char *output_cbranch (rtx, rtx, int, int, int, int, rtx);\n extern const char *output_return (rtx);\n extern const char *output_sibcall (rtx, rtx);"}, {"sha": "5c2188a623ed84691c9bd65d20e76e95bf35fc1b", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc", "patch": "@@ -6085,18 +6085,77 @@ sparc_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   return build_fold_indirect_ref (addr);\n }\n \f\n+/* Return the string to output an unconditional branch to LABEL, which is\n+   the operand number of the label.\n+\n+   DEST is the destination insn (i.e. the label), INSN is the source.  */\n+\n+const char *\n+output_ubranch (rtx dest, int label, rtx insn)\n+{\n+  static char string[64];\n+  bool noop = false;\n+  char *p;\n+\n+  /* TurboSPARC is reported to have problems with\n+     with\n+\tfoo: b,a foo\n+     i.e. an empty loop with the annul bit set.  The workaround is to use \n+        foo: b foo; nop\n+     instead.  */\n+\n+  if (! TARGET_V9 && flag_delayed_branch\n+      && (INSN_ADDRESSES (INSN_UID (dest))\n+\t  == INSN_ADDRESSES (INSN_UID (insn))))\n+    {\n+      strcpy (string, \"b\\t\");\n+      noop = true;\n+    }\n+  else\n+    {\n+      bool v9_form = false;\n+\n+      if (TARGET_V9 && INSN_ADDRESSES_SET_P ())\n+\t{\n+\t  int delta = (INSN_ADDRESSES (INSN_UID (dest))\n+\t\t       - INSN_ADDRESSES (INSN_UID (insn)));\n+\t  /* Leave some instructions for \"slop\".  */\n+\t  if (delta >= -260000 && delta < 260000)\n+\t    v9_form = true;\n+\t}\n+\n+      if (v9_form)\n+\tstrcpy (string, \"ba%*,pt\\t%%xcc, \");\n+      else\n+\tstrcpy (string, \"b%*\\t\");\n+    }\n+\n+  p = strchr (string, '\\0');\n+  *p++ = '%';\n+  *p++ = 'l';\n+  *p++ = '0' + label;\n+  *p++ = '%';\n+  if (noop)\n+    *p++ = '#';\n+  else\n+    *p++ = '(';\n+  *p = '\\0';\n+\n+  return string;\n+}\n+\n /* Return the string to output a conditional branch to LABEL, which is\n    the operand number of the label.  OP is the conditional expression.\n    XEXP (OP, 0) is assumed to be a condition code register (integer or\n    floating point) and its mode specifies what kind of comparison we made.\n \n+   DEST is the destination insn (i.e. the label), INSN is the source.\n+\n    REVERSED is nonzero if we should reverse the sense of the comparison.\n \n    ANNUL is nonzero if we should generate an annulling branch.\n \n-   NOOP is nonzero if we have to follow this branch by a noop.\n-\n-   INSN, if set, is the insn.  */\n+   NOOP is nonzero if we have to follow this branch by a noop.  */\n \n const char *\n output_cbranch (rtx op, rtx dest, int label, int reversed, int annul,\n@@ -6557,6 +6616,8 @@ sparc_emit_fixunsdi (rtx *operands, enum machine_mode mode)\n    operand number of the reg.  OP is the conditional expression.  The mode\n    of REG says what kind of comparison we made.\n \n+   DEST is the destination insn (i.e. the label), INSN is the source.\n+\n    REVERSED is nonzero if we should reverse the sense of the comparison.\n \n    ANNUL is nonzero if we should generate an annulling branch."}, {"sha": "9446cbef1685730dbb81236c535c0efbd45fd628", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=1b3c2c2d72f89d67c2a085bbf5cda557d755a2dc", "patch": "@@ -7278,27 +7278,10 @@\n   [(set_attr \"type\" \"shift\")])\n \f\n ;; Unconditional and other jump instructions\n-;; On the SPARC, by setting the annul bit on an unconditional branch, the\n-;; following insn is never executed.  This saves us a nop.  Dbx does not\n-;; handle such branches though, so we only use them when optimizing.\n (define_insn \"jump\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n-{\n-  /* TurboSPARC is reported to have problems with\n-     with\n-\tfoo: b,a foo\n-     i.e. an empty loop with the annul bit set.  The workaround is to use \n-        foo: b foo; nop\n-     instead.  */\n-\n-  if (! TARGET_V9 && flag_delayed_branch\n-      && (INSN_ADDRESSES (INSN_UID (operands[0]))\n-\t  == INSN_ADDRESSES (INSN_UID (insn))))\n-    return \"b\\t%l0%#\";\n-  else\n-    return TARGET_V9 ? \"ba%*,pt\\t%%xcc, %l0%(\" : \"b%*\\t%l0%(\";\n-}\n+  \"* return output_ubranch (operands[0], 0, insn);\"\n   [(set_attr \"type\" \"uncond_branch\")])\n \n (define_expand \"tablejump\""}]}