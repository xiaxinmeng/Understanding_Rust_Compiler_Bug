{"sha": "b886540796da5203802db467343fbd379233912d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg4NjU0MDc5NmRhNTIwMzgwMmRiNDY3MzQzZmJkMzc5MjMzOTEyZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-05-20T14:58:40Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-05-20T14:58:40Z"}, "message": "pt.c (for_each_template_parm): Rework to match documentation.\n\n \t* pt.c (for_each_template_parm): Rework to match documentation.\n\tDon't be fooled by a COMPONENT_REF with no TREE_TYPE.\n\nFrom-SVN: r27066", "tree": {"sha": "66dba41553d29c2a12093b3f74837a7783eb47c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66dba41553d29c2a12093b3f74837a7783eb47c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b886540796da5203802db467343fbd379233912d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b886540796da5203802db467343fbd379233912d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b886540796da5203802db467343fbd379233912d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b886540796da5203802db467343fbd379233912d/comments", "author": null, "committer": null, "parents": [{"sha": "6d813d4d850ce5b22d74f3479822dfe91c0fe35f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d813d4d850ce5b22d74f3479822dfe91c0fe35f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d813d4d850ce5b22d74f3479822dfe91c0fe35f"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "9ade541b37c9b6ac3ac6da157e883a56663c71f1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b886540796da5203802db467343fbd379233912d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b886540796da5203802db467343fbd379233912d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b886540796da5203802db467343fbd379233912d", "patch": "@@ -1,3 +1,8 @@\n+1999-05-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+ \t* pt.c (for_each_template_parm): Rework to match documentation.\n+\tDon't be fooled by a COMPONENT_REF with no TREE_TYPE.\n+\n 1999-05-20  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (finish_struct_1): Still check for ANON_AGGR_TYPE_P.\n@@ -18,6 +23,7 @@\n \t(cplus_expand_expr): Here.  Use cplus_expand_constant.\n \t(init_cplus_expand): Set lang_expand_constant.\n \t* pt.c (convert_nontype_argument): Use make_ptrmem_cst.\n+\n \t* tree.c (make_ptrmem_cst): Define.\n \t* typeck.c (unary_complex_lvalue): Use make_ptrmem_cst.\n \t* typeck2.c (initializer_constant_valid_p): Use make_ptrmem_cst."}, {"sha": "b26fecbfa2efe61dd51d3c67b80056be91e67042", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b886540796da5203802db467343fbd379233912d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b886540796da5203802db467343fbd379233912d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b886540796da5203802db467343fbd379233912d", "patch": "@@ -4019,13 +4019,6 @@ for_each_template_parm (t, fn, data)\n \n   switch (TREE_CODE (t))\n     {\n-    case INDIRECT_REF:\n-    case COMPONENT_REF:\n-      /* We assume that the object must be instantiated in order to build\n-\t the COMPONENT_REF, so we test only whether the type of the\n-\t COMPONENT_REF uses template parms.  */\n-      return for_each_template_parm (TREE_TYPE (t), fn, data);\n-\n     case ARRAY_REF:\n     case OFFSET_REF:\n       return (for_each_template_parm (TREE_OPERAND (t, 0), fn, data)\n@@ -4183,10 +4176,6 @@ for_each_template_parm (t, fn, data)\n       /* NOTREACHED */\n       return 0;\n \n-    case LOOKUP_EXPR:\n-    case TYPENAME_TYPE:\n-      return 1;\n-\n     case PTRMEM_CST:\n       return for_each_template_parm (TREE_TYPE (t), fn, data);\n \n@@ -4199,6 +4188,21 @@ for_each_template_parm (t, fn, data)\n \t\t\t\t       (TREE_TYPE (t)), fn, data);\n       return for_each_template_parm (TREE_OPERAND (t, 1), fn, data);\n \n+    case SIZEOF_EXPR:\n+    case ALIGNOF_EXPR:\n+      return for_each_template_parm (TREE_OPERAND (t, 0), fn, data);\n+\n+    case INDIRECT_REF:\n+    case COMPONENT_REF:\n+      /* We assume that the object must be instantiated in order to build\n+\t the COMPONENT_REF, so we test only whether the type of the\n+\t COMPONENT_REF uses template parms.  On the other hand, if\n+\t there's no type, then this thing must be some expression\n+\t involving template parameters.  */\n+      if (TREE_TYPE (t))\n+\treturn for_each_template_parm (TREE_TYPE (t), fn, data);\n+      /* Fall through.  */\n+\n     case MODOP_EXPR:\n     case CAST_EXPR:\n     case REINTERPRET_CAST_EXPR:\n@@ -4208,11 +4212,11 @@ for_each_template_parm (t, fn, data)\n     case ARROW_EXPR:\n     case DOTSTAR_EXPR:\n     case TYPEID_EXPR:\n-      return 1;\n-\n-    case SIZEOF_EXPR:\n-    case ALIGNOF_EXPR:\n-      return for_each_template_parm (TREE_OPERAND (t, 0), fn, data);\n+    case LOOKUP_EXPR:\n+    case TYPENAME_TYPE:\n+      if (!fn)\n+\treturn 1;\n+      /* Fall through.  */\n \n     default:\n       switch (TREE_CODE_CLASS (TREE_CODE (t)))"}, {"sha": "3ab7c15cd62a172fbe784acdf8fd2d0b061d6a74", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash41.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b886540796da5203802db467343fbd379233912d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b886540796da5203802db467343fbd379233912d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash41.C?ref=b886540796da5203802db467343fbd379233912d", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+template <int> struct S1{};\n+\n+struct S2 { int i; };\n+\n+template <class T>\n+void f(S2 s2) {\n+  S1<s2.i> s1;\n+}"}]}