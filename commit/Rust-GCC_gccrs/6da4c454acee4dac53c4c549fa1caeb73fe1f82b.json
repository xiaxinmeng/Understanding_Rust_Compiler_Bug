{"sha": "6da4c454acee4dac53c4c549fa1caeb73fe1f82b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRhNGM0NTRhY2VlNGRhYzUzYzRjNTQ5ZmExY2FlYjczZmUxZjgyYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-02T17:44:30Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-02T17:44:30Z"}, "message": "[AArch64] Run general SVE ACLE tests for C\n\nNow that the C frontend can cope with POLY_INT_CST-length initialisers,\nwe can make aarch64-sve-acle.exp run the full set of tests.  This will\nintroduce new failures for -mabi=ilp32; I'll make the testsuite ILP32\nclean separately.\n\n2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/aarch64-sve-acle.exp: Run the\n\tgeneral/* tests too.\n\nFrom-SVN: r278908", "tree": {"sha": "850d177f2001d83f9524bf8f60354e9b570e8922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/850d177f2001d83f9524bf8f60354e9b570e8922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6da4c454acee4dac53c4c549fa1caeb73fe1f82b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da4c454acee4dac53c4c549fa1caeb73fe1f82b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6da4c454acee4dac53c4c549fa1caeb73fe1f82b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da4c454acee4dac53c4c549fa1caeb73fe1f82b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0435b10db008e3019be0898270070eec4f3e318a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0435b10db008e3019be0898270070eec4f3e318a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0435b10db008e3019be0898270070eec4f3e318a"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "57db40d4e75887cdf2058c380a8b90891e2999f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da4c454acee4dac53c4c549fa1caeb73fe1f82b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da4c454acee4dac53c4c549fa1caeb73fe1f82b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6da4c454acee4dac53c4c549fa1caeb73fe1f82b", "patch": "@@ -1,3 +1,8 @@\n+2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/aarch64-sve-acle.exp: Run the\n+\tgeneral/* tests too.\n+\n 2019-12-02  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/acle/general/eqne_dup_1.c: New test."}, {"sha": "1672ddfef899154c0e36b3b7ec99bca149d334d3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/aarch64-sve-acle.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da4c454acee4dac53c4c549fa1caeb73fe1f82b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da4c454acee4dac53c4c549fa1caeb73fe1f82b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle.exp?ref=6da4c454acee4dac53c4c549fa1caeb73fe1f82b", "patch": "@@ -45,9 +45,9 @@ if { [check_effective_target_aarch64_sve] } {\n }\n \n # Main loop.\n-# FIXME: This should include general/*.c too, but leave that until the\n-# C frontend allows initialization of SVE vectors.\n-set files [glob -nocomplain $srcdir/$subdir/general-c/*.c]\n+set files [glob -nocomplain \\\n+\t       \"$srcdir/$subdir/general/*.c\" \\\n+\t       \"$srcdir/$subdir/general-c/*.c\"]\n dg-runtest [lsort $files] \"$sve_flags\" $DEFAULT_CFLAGS\n \n # All done."}]}