{"sha": "e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVmM2I3ODZlZDFhYjFkYWVhNDY3NTFlMjI1MzRjOWZlZTczY2Q4YQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-22T05:40:22Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-22T05:40:22Z"}, "message": "re PR preprocessor/6517 (gcc hangs on C compile with multiple \"-I-\")\n\n\tPR preprocessor/6517\n\t* Makefile.in: Update.\n\t* c-common.c (c_common_post_options): Add preprocessor\n\terrors to the error count.\n\t* c-lang.c (c_post_options): Kill.\n\t(LANG_HOOKS_POST_OPTIONS): Use c_common_post_options.\n\t* hooks.h: Add header guards.\n\t* langhooks-def.h: Include hooks.h.\n\t(LANG_HOOKS_POST_OPTIONS): Update.\n\t* langhooks.h (struct lang_hooks): Update post_options.\n\t* toplev.c (parse_options_and_default_flags): Update.\ncp:\n\t* cp-lang.c (LANG_HOOKS_POST_OPTIONS): Use c_common_post_options.\n\t* cp-tree.h (cxx_post_options): Kill.\n\t* cp-lex.c (cxx_post_options): Kill.\nobjc:\n\t* objc-lang.c (objc_post_options): Kill.\n\t(LANG_HOOKS_POST_OPTIONS): Use c_common_post_options.\n\nFrom-SVN: r53724", "tree": {"sha": "393799da65fb9425b665931be188539dc56ed666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/393799da65fb9425b665931be188539dc56ed666"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/comments", "author": null, "committer": null, "parents": [{"sha": "fd0a39154fe74a1ce787b3e3b9fb51f8f8f06b99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0a39154fe74a1ce787b3e3b9fb51f8f8f06b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd0a39154fe74a1ce787b3e3b9fb51f8f8f06b99"}], "stats": {"total": 102, "additions": 60, "deletions": 42}, "files": [{"sha": "22ebdba7ef4040a45875ebfe417fd7819abe8951", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -1,3 +1,20 @@\n+2002-05-22  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\tPR preprocessor/6517\n+\t* Makefile.in: Update.\n+\t* c-common.c (c_common_post_options): Add preprocessor\n+\terrors to the error count.\n+\t* c-lang.c (c_post_options): Kill.\n+\t(LANG_HOOKS_POST_OPTIONS): Use c_common_post_options.\n+\t* hooks.h: Add header guards.\n+\t* langhooks-def.h: Include hooks.h.\n+\t(LANG_HOOKS_POST_OPTIONS): Update.\n+\t* langhooks.h (struct lang_hooks): Update post_options.\n+\t* toplev.c (parse_options_and_default_flags): Update.\n+objc:\n+\t* objc-lang.c (objc_post_options): Kill.\n+\t(LANG_HOOKS_POST_OPTIONS): Use c_common_post_options.\n+\n 2002-05-21  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixinc/tests/base/pthread.h(THREAD_KEYWORD_CHECK): add fix check"}, {"sha": "910c4f6e9e3f9eaf27388f409a241cc2f82ef41d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -547,6 +547,7 @@ CONFIG_H = $(GCONFIG_H) insn-constants.h insn-flags.h\n TCONFIG_H = tconfig.h $(xm_file_list)\n TARGET_H = target.h\n HOOKS_H = hooks.h\n+LANGHOOKS_DEF_H = langhooks.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h $(HOOKS_H)\n TM_P_H = tm_p.h $(tm_p_file_list) tm-preds.h\n \n@@ -1161,7 +1162,7 @@ c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) $(C_TREE_H) \\\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     $(TARGET_H) flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H)\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n-    langhooks.h langhooks-def.h c-common.h\n+    langhooks.h $(LANGHOOKS_DEF_H) c-common.h\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) c-lex.h \\\n     debug.h $(C_TREE_H) c-common.h \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n@@ -1336,7 +1337,7 @@ convert.o: convert.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h convert.h \\\n \n langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) toplev.h \\\n    tree-inline.h $(RTL_H) insn-config.h integrate.h langhooks.h \\\n-   langhooks-def.h flags.h\n+   $(LANGHOOKS_DEF_H) flags.h\n tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h function.h toplev.h \\\n    $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) langhooks.h\n tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n@@ -1355,7 +1356,7 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h \\\n    toplev.h $(HASHTAB_H) $(EXPR_H) $(RTL_H) $(GGC_H) $(TM_P_H) langhooks.h\n diagnostic.o : diagnostic.c diagnostic.h real.h diagnostic.def \\\n    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TM_P_H) flags.h $(GGC_H) \\\n-   input.h toplev.h intl.h langhooks.h langhooks-def.h\n+   input.h toplev.h intl.h langhooks.h $(LANGHOOKS_DEF_H)\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n    flags.h xcoffout.h input.h $(INSN_ATTR_H) output.h diagnostic.h \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\"}, {"sha": "7d6707a6a897e0db1287cd7f64c940a0f2b1450d", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -4319,6 +4319,10 @@ c_common_post_options ()\n     warning (\"-Wformat-security ignored without -Wformat\");\n   if (warn_missing_format_attribute && !warn_format)\n     warning (\"-Wmissing-format-attribute ignored without -Wformat\");\n+\n+  /* If an error has occurred in cpplib, note it so we fail\n+     immediately.  */\n+  errorcount += cpp_errors (parse_in);\n }\n \n /* Hook that registers front end and target-specific built-ins.  */"}, {"sha": "07a60d0fb0f88b474efb210a043036f275d99aa4", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -30,7 +30,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n static const char *c_init PARAMS ((const char *));\n static void c_init_options PARAMS ((void));\n-static void c_post_options PARAMS ((void));\n \n /* ### When changing hooks, consider if ObjC needs changing too!! ### */\n \n@@ -45,7 +44,7 @@ static void c_post_options PARAMS ((void));\n #undef LANG_HOOKS_DECODE_OPTION\n #define LANG_HOOKS_DECODE_OPTION c_decode_option\n #undef LANG_HOOKS_POST_OPTIONS\n-#define LANG_HOOKS_POST_OPTIONS c_post_options\n+#define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET c_common_get_alias_set\n #undef LANG_HOOKS_SAFE_FROM_P\n@@ -155,13 +154,6 @@ const char *const tree_code_name[] = {\n };\n #undef DEFTREECODE\n \n-/* Post-switch processing.  */\n-static void\n-c_post_options ()\n-{\n-  c_common_post_options ();\n-}\n-\n static void\n c_init_options ()\n {"}, {"sha": "4048639af31b85d65ea108e2db961b5389400c86", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -1,3 +1,9 @@\n+2002-05-22  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_POST_OPTIONS): Use c_common_post_options.\n+\t* cp-tree.h (cxx_post_options): Kill.\n+\t* cp-lex.c (cxx_post_options): Kill.\n+\n 2002-05-21  Richard Henderson  <rth@redhat.com>\n \n \t* lex.c (rid_to_yy): Add RID_THREAD."}, {"sha": "56a98ba74c699c4056476e1328eae412d2b19d5a", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -251,7 +251,7 @@ cp/spew.o: cp/spew.c $(CXX_TREE_H) cp/parse.h flags.h cp/lex.h toplev.h\n cp/lex.o: cp/lex.c $(CXX_TREE_H) cp/parse.h flags.h cp/lex.h c-pragma.h \\\n   toplev.h output.h mbchar.h $(GGC_H) input.h diagnostic.h cp/operators.def \\\n   $(TM_P_H)\n-cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) toplev.h langhooks.h langhooks-def.h \\\n+cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) toplev.h langhooks.h $(LANGHOOKS_DEF_H) \\\n   c-common.h\n cp/decl.o: cp/decl.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h stack.h \\\n   output.h $(EXPR_H) except.h toplev.h hash.h $(GGC_H) $(RTL_H) \\\n@@ -283,7 +283,7 @@ cp/expr.o: cp/expr.c $(CXX_TREE_H) $(RTL_H) flags.h $(EXPR_H) toplev.h \\\n cp/pt.o: cp/pt.c $(CXX_TREE_H) cp/decl.h cp/parse.h cp/lex.h toplev.h \\\n   $(GGC_H) $(RTL_H) except.h tree-inline.h\n cp/error.o: cp/error.c $(CXX_TREE_H) toplev.h diagnostic.h flags.h real.h \\\n-  langhooks-def.h\n+  $(LANGHOOKS_DEF_H)\n cp/repo.o: cp/repo.c $(CXX_TREE_H) toplev.h $(GGC_H) diagnostic.h\n cp/semantics.o: cp/semantics.c $(CXX_TREE_H) cp/lex.h except.h toplev.h \\\n   flags.h $(GGC_H) debug.h output.h $(RTL_H) $(TIMEVAR_H) $(EXPR_H) \\"}, {"sha": "ce5165e9cd376ab08a04d84be926f018c229e5e8", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -1,5 +1,5 @@\n /* Language-dependent hooks for C++.\n-   Copyright 2001 Free Software Foundation, Inc.\n+   Copyright 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Alexandre Oliva  <aoliva@redhat.com>\n \n This file is part of GNU CC.\n@@ -45,7 +45,7 @@ static bool cxx_warn_unused_global_decl PARAMS ((tree));\n #undef LANG_HOOKS_DECODE_OPTION\n #define LANG_HOOKS_DECODE_OPTION cxx_decode_option\n #undef LANG_HOOKS_POST_OPTIONS\n-#define LANG_HOOKS_POST_OPTIONS cxx_post_options\n+#define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET\n #define LANG_HOOKS_GET_ALIAS_SET cxx_get_alias_set\n #undef LANG_HOOKS_EXPAND_CONSTANT"}, {"sha": "907bbd0515c01c2b9da10e297cc6a9453a36bdcc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -3974,7 +3974,6 @@ extern int cp_type_qual_from_rid                PARAMS ((tree));\n extern const char *cxx_init\t\t\tPARAMS ((const char *));\n extern void cxx_finish PARAMS ((void));\n extern void cxx_init_options PARAMS ((void));\n-extern void cxx_post_options PARAMS ((void));\n \n /* in method.c */\n extern void init_method\t\t\t\tPARAMS ((void));"}, {"sha": "91931d4c4cd8e2ee369ef7551c1c7d55e5d8ef7f", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -1,6 +1,6 @@\n /* Separate lexical analyzer for GNU C++.\n    Copyright (C) 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -203,13 +203,6 @@ int interface_unknown;\t\t/* whether or not we know this class\n \t\t\t\t   to behave according to #pragma interface.  */\n \n \f\n-/* Post-switch processing.  */\n-void\n-cxx_post_options ()\n-{\n-  c_common_post_options ();\n-}\n-\n /* Initialization before switch parsing.  */\n void\n cxx_init_options ()"}, {"sha": "508e29c3f005edc56f484625f86b66c97b008549", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -26,6 +26,12 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"system.h\"\n #include \"hooks.h\"\n \n+/* Generic hook that does absolutely zappo.  */\n+void\n+hook_void_void ()\n+{\n+}\n+\n /* Generic hook that takes no arguments and returns false.  */\n bool\n hook_void_bool_false ()"}, {"sha": "2bed2dd3760bee9061e4d08ab4079b77ab7bf5d2", "filename": "gcc/hooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -19,6 +19,12 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n  You are forbidden to forbid anyone else to use, share and improve\n  what you give them.   Help stamp out software-hoarding!  */\n \n+#ifndef GCC_HOOKS_H\n+#define GCC_HOOKS_H\n+\n bool hook_void_bool_false PARAMS ((void));\n bool hook_tree_bool_false PARAMS ((tree));\n void hook_tree_int_void PARAMS ((tree, int));\n+void hook_void_void PARAMS ((void));\n+\n+#endif"}, {"sha": "27ca72386fbbdcab2d26193dd46e251dc1453204", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -22,6 +22,8 @@ Boston, MA 02111-1307, USA.  */\n #ifndef GCC_LANG_HOOKS_DEF_H\n #define GCC_LANG_HOOKS_DEF_H\n \n+#include \"hooks.h\"\n+\n struct diagnostic_context;\n \n /* Provide a hook routine for alias sets that always returns 1.  This is\n@@ -86,7 +88,7 @@ tree lhd_tree_inlining_convert_parm_for_inlining PARAMS ((tree, tree, tree));\n #define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_clear_binding_stack\n #define LANG_HOOKS_INIT_OPTIONS\t\tlhd_do_nothing\n #define LANG_HOOKS_DECODE_OPTION\tlhd_decode_option\n-#define LANG_HOOKS_POST_OPTIONS\t\tlhd_do_nothing\n+#define LANG_HOOKS_POST_OPTIONS\t\thook_void_void\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n #define LANG_HOOKS_EXPAND_CONSTANT\tlhd_return_tree\n #define LANG_HOOKS_EXPAND_EXPR\t\tlhd_expand_expr"}, {"sha": "56b2966df4f40559b1554fa606780a4ff79fb2d8", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -199,7 +199,10 @@ struct lang_hooks\n   /* Called when all command line options have been parsed.  Should do\n      any required consistency checks, modifications etc.  Complex\n      initialization should be left to the \"init\" callback, since GC\n-     and the identifier hashes are set up between now and then.  */\n+     and the identifier hashes are set up between now and then.\n+\n+     If errorcount is non-zero after this call the compiler exits\n+     immediately and the finish hook is not called.  */\n   void (*post_options) PARAMS ((void));\n \n   /* Called after post_options, to initialize the front end.  The main"}, {"sha": "379a16cfdbb3c7918e07930121d8ff95d14594c5", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -93,7 +93,7 @@ objc-act.o : $(srcdir)/objc/objc-act.c \\\n    $(srcdir)/c-tree.h $(srcdir)/c-common.h $(srcdir)/c-lex.h \\\n    $(srcdir)/toplev.h $(srcdir)/flags.h $(srcdir)/objc/objc-act.h \\\n    $(srcdir)/input.h $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/debug.h \\\n-   $(srcdir)/langhooks.h $(srcdir)/langhooks-def.h\n+   $(srcdir)/langhooks.h $(LANGHOOKS_DEF_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \\\n \t-c $(srcdir)/objc/objc-act.c\n "}, {"sha": "647baf3e329dc53cd424e5d0246bc26e6fb22849", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -1,5 +1,5 @@\n /* Language-dependent hooks for Objective-C.\n-   Copyright 2001 Free Software Foundation, Inc.\n+   Copyright 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Ziemowit Laski  <zlaski@apple.com>\n \n This file is part of GNU CC.\n@@ -30,7 +30,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"langhooks-def.h\"\n \n static void objc_init_options                   PARAMS ((void));\n-static void objc_post_options                   PARAMS ((void));\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU Objective-C\"  \n@@ -43,7 +42,7 @@ static void objc_post_options                   PARAMS ((void));\n #undef LANG_HOOKS_DECODE_OPTION\n #define LANG_HOOKS_DECODE_OPTION objc_decode_option\n #undef LANG_HOOKS_POST_OPTIONS\n-#define LANG_HOOKS_POST_OPTIONS objc_post_options\n+#define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n #undef LANG_HOOKS_MARK_TREE\n@@ -165,13 +164,3 @@ objc_init_options ()\n {\n   c_common_init_options (clk_objective_c);\n } \n-\n-/* Post-switch processing.  */\n-\n-static void\n-objc_post_options ()\n-{\n-  c_common_post_options ();\n-}\n-\n-"}, {"sha": "f465adc1d447607a2440f0e4d955786e232d7f3e", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f3b786ed1ab1daea46751e22534c9fee73cd8a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e5f3b786ed1ab1daea46751e22534c9fee73cd8a", "patch": "@@ -5190,7 +5190,7 @@ toplev_main (argc, argv)\n   parse_options_and_default_flags (argc, argv);\n \n   /* Exit early if we can (e.g. -help).  */\n-  if (!exit_after_options)\n+  if (!errorcount && !exit_after_options)\n     do_compile ();\n \n   if (errorcount || sorrycount)"}]}