{"sha": "6c94a9fa1614eeca68f5820bcfb77431eb6d45e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM5NGE5ZmExNjE0ZWVjYTY4ZjU4MjBiY2ZiNzc0MzFlYjZkNDVlNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-03T21:27:06Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-03T21:27:06Z"}, "message": "Check for -pthread and -lpthread at configure time.\n\nFrom-SVN: r167445", "tree": {"sha": "742e9123b87c39465bc5b4207f6c85b2d02d6d04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/742e9123b87c39465bc5b4207f6c85b2d02d6d04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5/comments", "author": null, "committer": null, "parents": [{"sha": "9ad641882acc7d38876b8b494d9dc91488b2fd6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad641882acc7d38876b8b494d9dc91488b2fd6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad641882acc7d38876b8b494d9dc91488b2fd6a"}], "stats": {"total": 115, "additions": 106, "deletions": 9}, "files": [{"sha": "1e972648715c6675010b1067a09234c07a7b2ee1", "filename": "libgo/Makefile.am", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=6c94a9fa1614eeca68f5820bcfb77431eb6d45e5", "patch": "@@ -30,7 +30,7 @@ LIBFFIINCS = @LIBFFIINCS@\n WARN_CFLAGS = $(WARN_FLAGS) $(WERROR)\n \n # -I/-D flags to pass when compiling.\n-AM_CPPFLAGS = -I $(srcdir)/runtime $(LIBFFIINCS) -pthread\n+AM_CPPFLAGS = -I $(srcdir)/runtime $(LIBFFIINCS) $(PTHREAD_CFLAGS)\n \n ACLOCAL_AMFLAGS = -I ./config -I ../config\n \n@@ -1263,7 +1263,7 @@ libgo_go_objs = \\\n \n libgo_la_SOURCES = $(runtime_files)\n \n-libgo_la_LIBADD = $(libgo_go_objs) $(LIBFFI) -lpthread\n+libgo_la_LIBADD = $(libgo_go_objs) $(LIBFFI) $(PTHREAD_LIBS)\n \n libgobegin_a_SOURCES = \\\n \truntime/go-main.c\n@@ -1279,7 +1279,7 @@ LTGOCOMPILE = $(LIBTOOL) --tag GO --mode=compile $(GOC) $(INCLUDES) \\\n \n GOLINK = $(LIBTOOL) --tag GO --mode-link $(GOC) \\\n \t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_GOCFLAGS) $(LTLDFLAGS) \\\n-\t-lpthread -o $@\n+\t$(PTHREAD_LIBS) -o $@\n \n # Build a package.\n BUILDARCHIVE = \\"}, {"sha": "f3c7a8999dea5ee656cf2a6ec22966678ce14c7e", "filename": "libgo/Makefile.in", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=6c94a9fa1614eeca68f5820bcfb77431eb6d45e5", "patch": "@@ -120,7 +120,8 @@ am_libgobegin_a_OBJECTS = go-main.$(OBJEXT)\n libgobegin_a_OBJECTS = $(am_libgobegin_a_OBJECTS)\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__DEPENDENCIES_1 =\n-libgo_la_DEPENDENCIES = $(libgo_go_objs) $(am__DEPENDENCIES_1)\n+libgo_la_DEPENDENCIES = $(libgo_go_objs) $(am__DEPENDENCIES_1) \\\n+\t$(am__DEPENDENCIES_1)\n am__libgo_la_SOURCES_DIST = runtime/go-append.c runtime/go-assert.c \\\n \truntime/go-assert-interface.c \\\n \truntime/go-byte-array-to-string.c runtime/go-breakpoint.c \\\n@@ -340,6 +341,8 @@ PACKAGE_TARNAME = @PACKAGE_TARNAME@\n PACKAGE_URL = @PACKAGE_URL@\n PACKAGE_VERSION = @PACKAGE_VERSION@\n PATH_SEPARATOR = @PATH_SEPARATOR@\n+PTHREAD_CFLAGS = @PTHREAD_CFLAGS@\n+PTHREAD_LIBS = @PTHREAD_LIBS@\n RANLIB = @RANLIB@\n SED = @SED@\n SET_MAKE = @SET_MAKE@\n@@ -426,7 +429,7 @@ toolexeclibdir = $(glibgo_toolexeclibdir)\n WARN_CFLAGS = $(WARN_FLAGS) $(WERROR)\n \n # -I/-D flags to pass when compiling.\n-AM_CPPFLAGS = -I $(srcdir)/runtime $(LIBFFIINCS) -pthread\n+AM_CPPFLAGS = -I $(srcdir)/runtime $(LIBFFIINCS) $(PTHREAD_CFLAGS)\n ACLOCAL_AMFLAGS = -I ./config -I ../config\n AM_CFLAGS = -fexceptions -fplan9-extensions $(SPLIT_STACK) $(WARN_CFLAGS) \\\n \t$(STRINGOPS_FLAG) \\\n@@ -1559,7 +1562,7 @@ libgo_go_objs = \\\n \ttesting/libscript.la\n \n libgo_la_SOURCES = $(runtime_files)\n-libgo_la_LIBADD = $(libgo_go_objs) $(LIBFFI) -lpthread\n+libgo_la_LIBADD = $(libgo_go_objs) $(LIBFFI) $(PTHREAD_LIBS)\n libgobegin_a_SOURCES = \\\n \truntime/go-main.c\n \n@@ -1571,7 +1574,7 @@ LTGOCOMPILE = $(LIBTOOL) --tag GO --mode=compile $(GOC) $(INCLUDES) \\\n \n GOLINK = $(LIBTOOL) --tag GO --mode-link $(GOC) \\\n \t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_GOCFLAGS) $(LTLDFLAGS) \\\n-\t-lpthread -o $@\n+\t$(PTHREAD_LIBS) -o $@\n \n \n # Build a package."}, {"sha": "b8d7e573184dfdaf8863c704cafc09c1d3604335", "filename": "libgo/configure", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=6c94a9fa1614eeca68f5820bcfb77431eb6d45e5", "patch": "@@ -605,6 +605,8 @@ LIBOBJS\n STRINGOPS_FLAG\n HAVE_SYS_MMAN_H_FALSE\n HAVE_SYS_MMAN_H_TRUE\n+PTHREAD_LIBS\n+PTHREAD_CFLAGS\n USING_SPLIT_STACK_FALSE\n USING_SPLIT_STACK_TRUE\n SPLIT_STACK\n@@ -10866,7 +10868,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10869 \"configure\"\n+#line 10871 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10972,7 +10974,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10975 \"configure\"\n+#line 10977 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13326,6 +13328,76 @@ $as_echo \"#define LINKER_SUPPORTS_SPLIT_STACK 1\" >>confdefs.h\n \n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether -pthread is supported\" >&5\n+$as_echo_n \"checking whether -pthread is supported... \" >&6; }\n+if test \"${ac_cv_libgo_pthread_supported+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  CFLAGS_hold=$CFLAGS\n+CFLAGS=\"$CFLAGS -pthread\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+int i;\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_libgo_pthread_supported=yes\n+else\n+  ac_cv_libgo_pthread_supported=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+CFLAGS=$CFLAGS_hold\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_libgo_pthread_supported\" >&5\n+$as_echo \"$ac_cv_libgo_pthread_supported\" >&6; }\n+PTHREAD_CFLAGS=\n+if test \"$ac_cv_libgo_pthread_supported\" = yes; then\n+  PTHREAD_CFLAGS=-pthread\n+fi\n+\n+\n+PTHREAD_LIBS=\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for pthread_create in -lpthread\" >&5\n+$as_echo_n \"checking for pthread_create in -lpthread... \" >&6; }\n+if test \"${ac_cv_lib_pthread_pthread_create+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lpthread  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char pthread_create ();\n+int\n+main ()\n+{\n+return pthread_create ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_pthread_pthread_create=yes\n+else\n+  ac_cv_lib_pthread_pthread_create=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_pthread_pthread_create\" >&5\n+$as_echo \"$ac_cv_lib_pthread_pthread_create\" >&6; }\n+if test \"x$ac_cv_lib_pthread_pthread_create\" = x\"\"yes; then :\n+  PTHREAD_LIBS=-lpthread\n+fi\n+\n+\n+\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether byte ordering is bigendian\" >&5\n $as_echo_n \"checking whether byte ordering is bigendian... \" >&6; }\n if test \"${ac_cv_c_bigendian+set}\" = set; then :"}, {"sha": "db7497415c0e066d7486d99c9d9ab5dab5e7855c", "filename": "libgo/configure.ac", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=6c94a9fa1614eeca68f5820bcfb77431eb6d45e5", "patch": "@@ -187,6 +187,26 @@ if test \"$ac_cv_libgo_linker_supports_split_stack\" = yes; then\n \t    [Define if the linker support split stack adjustments])\n fi\n \n+dnl Test whether the compiler supports the -pthread option.\n+AC_CACHE_CHECK([whether -pthread is supported],\n+[ac_cv_libgo_pthread_supported],\n+[CFLAGS_hold=$CFLAGS\n+CFLAGS=\"$CFLAGS -pthread\"\n+AC_COMPILE_IFELSE([[int i;]],\n+[ac_cv_libgo_pthread_supported=yes],\n+[ac_cv_libgo_pthread_supported=no])\n+CFLAGS=$CFLAGS_hold])\n+PTHREAD_CFLAGS=\n+if test \"$ac_cv_libgo_pthread_supported\" = yes; then\n+  PTHREAD_CFLAGS=-pthread\n+fi\n+AC_SUBST(PTHREAD_CFLAGS)\n+\n+dnl Test for the -lpthread library.\n+PTHREAD_LIBS=\n+AC_CHECK_LIB([pthread], [pthread_create], PTHREAD_LIBS=-lpthread)\n+AC_SUBST(PTHREAD_LIBS)\n+\n AC_C_BIGENDIAN\n \n GCC_CHECK_UNWIND_GETIPINFO"}, {"sha": "e1dfbe8c3c263595deea242aceed253ee6c1bcce", "filename": "libgo/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5/libgo%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c94a9fa1614eeca68f5820bcfb77431eb6d45e5/libgo%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2FMakefile.in?ref=6c94a9fa1614eeca68f5820bcfb77431eb6d45e5", "patch": "@@ -117,6 +117,8 @@ PACKAGE_TARNAME = @PACKAGE_TARNAME@\n PACKAGE_URL = @PACKAGE_URL@\n PACKAGE_VERSION = @PACKAGE_VERSION@\n PATH_SEPARATOR = @PATH_SEPARATOR@\n+PTHREAD_CFLAGS = @PTHREAD_CFLAGS@\n+PTHREAD_LIBS = @PTHREAD_LIBS@\n RANLIB = @RANLIB@\n SED = @SED@\n SET_MAKE = @SET_MAKE@"}]}