{"sha": "9c5f89006fa4b64c77997f660554a12315f4ac1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM1Zjg5MDA2ZmE0YjY0Yzc3OTk3ZjY2MDU1NGExMjMxNWY0YWMxZA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2019-01-14T00:22:00Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2019-01-14T00:22:00Z"}, "message": "re PR libfortran/88776 (Namelist read from stdin: loss of data)\n\n2019-01-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/88776\n\t* io/open.c (newunit): Free format buffer if the unit specified is for\n\tstdin, stdout, or stderr.\n\n\t* gfortran.dg/namelist_96.f90: New test.\n\nFrom-SVN: r267910", "tree": {"sha": "f238d50e7438578fcb6c31df6f1ab0ff3285495b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f238d50e7438578fcb6c31df6f1ab0ff3285495b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c5f89006fa4b64c77997f660554a12315f4ac1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5f89006fa4b64c77997f660554a12315f4ac1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5f89006fa4b64c77997f660554a12315f4ac1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5f89006fa4b64c77997f660554a12315f4ac1d/comments", "author": null, "committer": null, "parents": [{"sha": "bff1a7315da774562db589a19a96ea522b47b900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff1a7315da774562db589a19a96ea522b47b900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bff1a7315da774562db589a19a96ea522b47b900"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "d0611e3bc37b7b39a50715762b7f1069eab0779b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,3 +1,8 @@\n+2019-01-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/88776\n+\t* gfortran.dg/namelist_96.f90: New test.\n+\n 2019-01-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/59345"}, {"sha": "5606e1f775408caf7b0cbeb048dcfb0d9eacfd91", "filename": "gcc/testsuite/gfortran.dg/namelist_96.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_96.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_96.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_96.f90?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -0,0 +1,38 @@\n+! ( dg-do run }\n+program pr88776\n+  implicit none\n+  character(*), parameter :: file = \"pr88776.dat\"\n+  type t_chan\n+     integer          :: ichan = -1\n+     character(len=8) :: flag  = ''\n+     integer          :: band  = -1\n+  end type t_chan\n+  type(t_chan) :: chan\n+  namelist /NML/ chan\n+  open (11,file=file)\n+  write(11,'(a)') trim(\"&nml chan = 1   '#1 '    10 /\")\n+  write(11,'(a)') trim(\"&nml chan = 2   '#2 '    42.36/\")\n+  write(11,'(a)') trim(\"&nml chan = 3   '#3 '    30 /\")\n+  close(11)\n+  call read (unit=10) ! No problem\n+  call read (unit=5)  ! problem, now fixed\n+  open (11,file=file)\n+  close (11, status=\"delete\")\n+contains\n+  subroutine read (unit)\n+    integer, intent(in) :: unit\n+    integer             :: stat\n+    open (unit, file=file, action=\"read\")\n+    chan = t_chan(-1,'',-1)\n+    stat = 0\n+    read (unit, nml=NML, iostat=stat)\n+    if (stat /= 0) stop 1\n+    chan = t_chan(-1,'',-1)\n+    read (unit, nml=NML, iostat=stat)\n+    if (stat == 0) stop 2\n+    if (chan% ichan /= 2) then\n+       stop 3\n+    end if\n+    close (unit)\n+  end subroutine read\n+end program pr88776"}, {"sha": "274160d4b9e6e240cfe38a12234a12e8c24f0e1e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -1,3 +1,9 @@\n+2019-01-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/88776\n+\t* io/open.c (newunit): Free format buffer if the unit specified is for\n+\tstdin, stdout, or stderr. \n+\n 2019-01-12  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/88776"}, {"sha": "b48afabf7a3daebc68efbe36679cefe91821d197", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c5f89006fa4b64c77997f660554a12315f4ac1d/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c5f89006fa4b64c77997f660554a12315f4ac1d/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=9c5f89006fa4b64c77997f660554a12315f4ac1d", "patch": "@@ -530,6 +530,14 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags *flags)\n   if (u2 != NULL)\n     unlock_unit (u2);\n \n+  /* If the unit specified is preconnected with a file specified to be open,\n+     then clear the format buffer.  */\n+  if ((opp->common.unit == options.stdin_unit ||\n+       opp->common.unit == options.stdout_unit ||\n+       opp->common.unit == options.stderr_unit)\n+      && (opp->common.flags & IOPARM_OPEN_HAS_FILE) != 0)\n+    fbuf_destroy (u);\n+\n   /* Open file.  */\n \n   s = open_external (opp, flags);\n@@ -705,12 +713,12 @@ already_open (st_parameter_open *opp, gfc_unit *u, unit_flags *flags)\n       if (u->filename && u->flags.status == STATUS_SCRATCH)\n \tremove (u->filename);\n #endif\n-     free (u->filename);\n-     u->filename = NULL;\n-\n+      free (u->filename);\n+      u->filename = NULL;\n+      \n       u = new_unit (opp, u, flags);\n       if (u != NULL)\n-\tunlock_unit (u);\n+      unlock_unit (u);\n       return;\n     }\n "}]}