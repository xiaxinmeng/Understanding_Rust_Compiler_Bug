{"sha": "90ff582fb1f05f7380adfab59d86065aae09a9a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmZjU4MmZiMWYwNWY3MzgwYWRmYWI1OWQ4NjA2NWFhZTA5YTlhNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-20T15:02:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-20T15:02:49Z"}, "message": "re PR tree-optimization/49079 (Bogus constant folding)\n\n2011-05-20  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49079\n\t* tree-dfa.c (get_ref_base_and_extent): Handle view-converting\n\tMEM_REFs correctly for the trailing array access detection.\n\tSpecial case constants the same way as decls for overall size\n\tconstraining.\n\n\t* gcc.dg/torture/pr49079.c: New testcase.\n\nFrom-SVN: r173954", "tree": {"sha": "0f88181acea8ab0fc265d45d99e9be13fd4739e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f88181acea8ab0fc265d45d99e9be13fd4739e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90ff582fb1f05f7380adfab59d86065aae09a9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ff582fb1f05f7380adfab59d86065aae09a9a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ff582fb1f05f7380adfab59d86065aae09a9a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ff582fb1f05f7380adfab59d86065aae09a9a7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cda91d8634805fcb1148cb856a6fc7605f6719f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cda91d8634805fcb1148cb856a6fc7605f6719f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cda91d8634805fcb1148cb856a6fc7605f6719f"}], "stats": {"total": 72, "additions": 64, "deletions": 8}, "files": [{"sha": "821c0dd18ce9b2a8f5249148eb80fc3e621eb584", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff582fb1f05f7380adfab59d86065aae09a9a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff582fb1f05f7380adfab59d86065aae09a9a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90ff582fb1f05f7380adfab59d86065aae09a9a7", "patch": "@@ -1,3 +1,11 @@\n+2011-05-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49079\n+\t* tree-dfa.c (get_ref_base_and_extent): Handle view-converting\n+\tMEM_REFs correctly for the trailing array access detection.\n+\tSpecial case constants the same way as decls for overall size\n+\tconstraining.\n+\n 2011-05-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/mingw32.h (OUTPUT_QUOTED_STRING): Fix macro"}, {"sha": "2bdb809c11f6796790484aacef3e2b358ee85208", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff582fb1f05f7380adfab59d86065aae09a9a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff582fb1f05f7380adfab59d86065aae09a9a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90ff582fb1f05f7380adfab59d86065aae09a9a7", "patch": "@@ -1,3 +1,8 @@\n+2011-05-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49079\n+\t* gcc.dg/torture/pr49079.c: New testcase.\n+\n 2011-05-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/49073"}, {"sha": "1b53d3c3126a8a69865402021cb689a5c1333a67", "filename": "gcc/testsuite/gcc.dg/torture/pr49079.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff582fb1f05f7380adfab59d86065aae09a9a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49079.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff582fb1f05f7380adfab59d86065aae09a9a7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49079.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49079.c?ref=90ff582fb1f05f7380adfab59d86065aae09a9a7", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+struct Ustr\n+{\n+  unsigned char data[1];\n+};\n+\n+static unsigned int\n+ustr_xi__embed_val_get(const unsigned char *data)\n+{\n+  return (unsigned int)data[0];\n+}\n+\n+int __attribute__((noinline)) zero(void) { return 0; }\n+\n+static unsigned int\n+ustr_len(const struct Ustr *s1)\n+{\n+  return ustr_xi__embed_val_get(s1->data + 1 + zero());\n+}\n+\n+int\n+main()\n+{\n+  if (ustr_len (((struct Ustr *) \"\\x01\" \"\\x0002\" \"s2\")) != 2)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "9791bccecae676aa4575bdce43bb9329b21d5257", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff582fb1f05f7380adfab59d86065aae09a9a7/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff582fb1f05f7380adfab59d86065aae09a9a7/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=90ff582fb1f05f7380adfab59d86065aae09a9a7", "patch": "@@ -714,6 +714,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n   tree size_tree = NULL_TREE;\n   HOST_WIDE_INT bit_offset = 0;\n   bool seen_variable_array_ref = false;\n+  tree base_type;\n \n   /* First get the final access size from just the outermost expression.  */\n   if (TREE_CODE (exp) == COMPONENT_REF)\n@@ -744,6 +745,8 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n      and find the ultimate containing object.  */\n   while (1)\n     {\n+      base_type = TREE_TYPE (exp);\n+\n       switch (TREE_CODE (exp))\n \t{\n \tcase BIT_FIELD_REF:\n@@ -931,9 +934,16 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n      the array.  The simplest way to conservatively deal with this\n      is to punt in the case that offset + maxsize reaches the\n      base type boundary.  This needs to include possible trailing padding\n-     that is there for alignment purposes.\n+     that is there for alignment purposes.  */\n+\n+  if (seen_variable_array_ref\n+      && maxsize != -1\n+      && (!host_integerp (TYPE_SIZE (base_type), 1)\n+\t  || (bit_offset + maxsize\n+\t      == (signed) TREE_INT_CST_LOW (TYPE_SIZE (base_type)))))\n+    maxsize = -1;\n \n-     That is of course only true if the base object is not a decl.  */\n+  /* In case of a decl or constant base object we can do better.  */\n \n   if (DECL_P (exp))\n     {\n@@ -943,12 +953,14 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t  && host_integerp (DECL_SIZE (exp), 1))\n \tmaxsize = TREE_INT_CST_LOW (DECL_SIZE (exp)) - bit_offset;\n     }\n-  else if (seen_variable_array_ref\n-\t   && maxsize != -1\n-\t   && (!host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1)\n-\t       || (bit_offset + maxsize\n-\t\t   == (signed) TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp))))))\n-    maxsize = -1;\n+  else if (CONSTANT_CLASS_P (exp))\n+    {\n+      /* If maxsize is unknown adjust it according to the size of the\n+         base type constant.  */\n+      if (maxsize == -1\n+\t  && host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1))\n+\tmaxsize = TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp))) - bit_offset;\n+    }\n \n   /* ???  Due to negative offsets in ARRAY_REF we can end up with\n      negative bit_offset here.  We might want to store a zero offset"}]}