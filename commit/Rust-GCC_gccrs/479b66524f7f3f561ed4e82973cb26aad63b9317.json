{"sha": "479b66524f7f3f561ed4e82973cb26aad63b9317", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5YjY2NTI0ZjdmM2Y1NjFlZDRlODI5NzNjYjI2YWFkNjNiOTMxNw==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2004-09-20T07:17:06Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2004-09-20T07:17:06Z"}, "message": "vect-13.c: Added xfail for non ppc platforms.\n\n2004-09-20  Ira Rosen  <irar@il.ibm.com>\n\n        * gcc.dg/vect/vect-13.c: Added xfail for non ppc platforms.\n        * gcc.dg/vect/vect-74.c: Split into 3 tests (vect-79.c, vect-80.c).\n        * gcc.dg/vect/vect-62.c: New testcase.\n        * gcc.dg/vect/vect-63.c: New testcase.\n        * gcc.dg/vect/vect-64.c: New testcase.\n        * gcc.dg/vect/vect-65.c: New testcase.\n        * gcc.dg/vect/vect-66.c: New testcase.\n        * gcc.dg/vect/vect-67.c: New testcase.\n        * gcc.dg/vect/vect-68.c: New testcase.\n        * gcc.dg/vect/vect-69.c: New testcase.\n        * gcc.dg/vect/vect-79.c: New testcase.\n        * gcc.dg/vect/vect-80.c: New testcase.\n\nFrom-SVN: r87745", "tree": {"sha": "1be1ed04be05fe68f095ed63ddafbe716768f96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1be1ed04be05fe68f095ed63ddafbe716768f96c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/479b66524f7f3f561ed4e82973cb26aad63b9317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479b66524f7f3f561ed4e82973cb26aad63b9317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/479b66524f7f3f561ed4e82973cb26aad63b9317", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479b66524f7f3f561ed4e82973cb26aad63b9317/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "073cbad3bb0ebe7a29e11acc51d08543f5b1dbd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/073cbad3bb0ebe7a29e11acc51d08543f5b1dbd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/073cbad3bb0ebe7a29e11acc51d08543f5b1dbd7"}], "stats": {"total": 786, "additions": 734, "deletions": 52}, "files": [{"sha": "422f3c99932a6ec817c7839c2028095ef9bb9c1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -1,3 +1,18 @@\n+2004-09-20  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* gcc.dg/vect/vect-13.c: Added xfail for non ppc platforms.\n+\t* gcc.dg/vect/vect-74.c: Split into 3 tests (vect-79.c, vect-80.c).\n+\t* gcc.dg/vect/vect-62.c: New testcase.\n+\t* gcc.dg/vect/vect-63.c: New testcase.\n+\t* gcc.dg/vect/vect-64.c: New testcase.\n+\t* gcc.dg/vect/vect-65.c: New testcase.\n+\t* gcc.dg/vect/vect-66.c: New testcase.\n+\t* gcc.dg/vect/vect-67.c: New testcase.\n+\t* gcc.dg/vect/vect-68.c: New testcase.\n+\t* gcc.dg/vect/vect-69.c: New testcase.\n+\t* gcc.dg/vect/vect-79.c: New testcase.\n+\t* gcc.dg/vect/vect-80.c: New testcase.\n+\n 2004-09-20  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.target/mips/asm-1.c: New test."}, {"sha": "21385b40ef846c9be9c14deb6063992391624338", "filename": "gcc/testsuite/gcc.dg/vect/vect-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-13.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -22,4 +22,4 @@ int main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail i?86-*-* x86_64-*-* } } } */"}, {"sha": "28154c1f2c3004cad28dc8a8885d1b23eab0311f", "filename": "gcc/testsuite/gcc.dg/vect/vect-62.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-62.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-62.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-62.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int main1 ()\n+{\n+  int i, j;\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ia[N][4][N+8];\n+\n+  /* Multidimensional array. Aligned. The \"inner\" dimensions\n+     are invariant in the inner loop. Store. */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ia[i][1][j+8] = ib[i];\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ia[i][1][j+8] != ib[i])\n+              abort();\n+        }\n+    }\n+\n+  /* Multidimensional array. Aligned. The \"inner\" dimensions\n+     are invariant in the inner loop. Store. */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ia[i][1][8] = ib[i];\n+        }\n+    }\n+\n+  /* check results: */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ia[i][1][8] != ib[i])\n+              abort();\n+        }\n+    }\n+\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */"}, {"sha": "b68a0597930ecb20187a69b692b39e0f9e6252e7", "filename": "gcc/testsuite/gcc.dg/vect/vect-63.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-63.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-63.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-63.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int main1 ()\n+{\n+  int i, j;\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ia[N*2][4][N];\n+\n+  /* Multidimensional array. Aligned. \n+     The first dimension depends on j: not vectorizable. */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ia[i + j][1][j] = ib[i];\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ia[i + j][1][j] != ib[i])\n+              abort();\n+        }\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "eaed89229f8e42e19a78379550a7b661ac345b24", "filename": "gcc/testsuite/gcc.dg/vect/vect-64.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-64.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int main1 ()\n+{\n+  int i, j;\n+  int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int ia[N][4][N+1];\n+  int ic[N][N][3][13];\n+  int id[N][N][N];\n+\n+  /* Multidimensional array. Not aligned: not vectorizable. */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ia[i][1][j] = ib[i];\n+        }\n+    }\n+\n+  /* Multidimensional array. Aligned: vectorizable. */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ic[i][1][1][j] = ib[i];\n+        }\n+    }\n+\n+  /* Multidimensional array. Not aligned: not vectorizable. */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           id[i][1][j+1] = ib[i];\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ia[i][1][j] != ib[i])\n+              abort();\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ic[i][1][1][j] != ib[i])\n+              abort();\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (id[i][1][j+1] != ib[i])\n+              abort();\n+        }\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */"}, {"sha": "0ec838d309b9fc45edbdb8d93375f5c85325a6a8", "filename": "gcc/testsuite/gcc.dg/vect/vect-65.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-65.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-65.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-65.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+#define M 4\n+\n+int main1 ()\n+{\n+  int i, j;\n+  int ib[M][M][N] = {{{0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+\t\t      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}},\n+                     {{0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}, \n+                      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}, \n+                      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}},\n+                     {{0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}, \n+                      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}, \n+                      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}},\n+                     {{0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}, \n+                      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}, \n+                      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45},\n+                      {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45}}};\n+  int ia[M][M][N];\n+  int ic[N];\t\n+\n+  /* Multidimensional array. Aligned. The \"inner\" dimensions\n+     are invariant in the inner loop. Load and store. */\n+  for (i = 0; i < M; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ia[i][1][j] = ib[2][i][j];\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < M; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ia[i][1][j] != ib[2][i][j])\n+              abort();\n+        }\n+    }\n+\n+  /* Multidimensional array. Aligned. The \"inner\" dimensions\n+     are invariant in the inner loop. Load. */\n+  for (i = 0; i < M; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ic[j] = ib[2][i][j];\n+        }\n+    }\n+\n+  /* check results: */\n+  for (i = 0; i < M; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ic[j] != ib[2][i][j])\n+              abort();\n+        }\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */"}, {"sha": "9773953043a660cb3d765ad27e520ad03c39e396", "filename": "gcc/testsuite/gcc.dg/vect/vect-66.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-66.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int main1 ()\n+{\n+  int i, j;\n+  int ib[6] = {0,3,6,9,12,15};\n+  int ia[8][5][6];\n+  int ic[16][16][5][6];\n+\n+  /* Multidimensional array. Aligned. */\n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+        {\n+           ia[2][6][j] = 5;\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+        {\n+           if (ia[2][6][j] != 5)\n+                abort();\n+        }\n+    }\n+  /* Multidimensional array. Aligned. */\n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+           ia[3][6][j+2] = 5;\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 2; j < 6; j++)\n+        {\n+           if (ia[3][6][j] != 5)\n+                abort();\n+        }\n+    }\n+\n+  /* Multidimensional array. Not aligned. */\n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+        {\n+           ic[2][1][6][j] = 5;\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < 16; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+        {\n+           if (ic[2][1][6][j] != 5)\n+                abort();\n+        }\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  return main1 ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */"}, {"sha": "ade2ace6e025399cdbf4ffd226589ffea9be4b6c", "filename": "gcc/testsuite/gcc.dg/vect/vect-67.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-67.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+int main1 (int a, int b)\n+{\n+  int i, j;\n+  int ia[N][4][N+8];\n+\n+  /* Multidimensional array. Aligned. The \"inner\" dimensions\n+     are invariant in the inner loop. Store. \n+     Not vectorizable: unsupported operation. */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           ia[i][1][j+8] = (a == b);\n+        }\n+    }\n+\n+  /* check results: */  \n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+        {\n+           if (ia[i][1][j+8] != (a == b))\n+              abort();\n+        }\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  return main1 (2 ,7);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { xfail *-*-* } } } */"}, {"sha": "3812cead7e9d17cd0604707b065fc72bafff8604", "filename": "gcc/testsuite/gcc.dg/vect/vect-68.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-68.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+struct s{\n+  int m;\n+  int n[N][N][N];\n+};\n+\n+struct test1{\n+  struct s a; /* array a.n is unaligned */\n+  int b;\n+  int c;\n+  struct s e; /* array e.n is aligned */\n+};\n+\n+int main1 ()\n+{  \n+  int i,j;\n+  struct test1 tmp1;\n+\n+  /* 1. unaligned */\n+  for (i = 0; i < N; i++)\n+    {\n+      tmp1.a.n[1][2][i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (tmp1.a.n[1][2][i] != 5)\n+        abort ();\n+    }\n+\n+  /* 2. aligned */\n+  for (i = 3; i < N-1; i++)\n+    {\n+      tmp1.a.n[1][2][i] = 6;\n+    }\n+\n+  /* check results:  */\n+  for (i = 3; i < N-1; i++)\n+    {\n+      if (tmp1.a.n[1][2][i] != 6)\n+        abort ();\n+    }\n+\n+  /* 3. aligned */\n+  for (i = 0; i < N; i++)\n+    {\n+      tmp1.e.n[1][2][i] = 7;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (tmp1.e.n[1][2][i] != 7)\n+        abort ();\n+    }\n+\n+  /* 4. unaligned */\n+  for (i = 3; i < N-3; i++)\n+    {\n+      tmp1.e.n[1][2][i] = 8;\n+    }\n+ \n+  /* check results:  */\n+  for (i = 3; i <N-3; i++)\n+    {\n+      if (tmp1.e.n[1][2][i] != 8)\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */"}, {"sha": "92b4ef298d52ad1f2dbc2c39d01d28253d242d5a", "filename": "gcc/testsuite/gcc.dg/vect/vect-69.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-69.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -0,0 +1,117 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+struct s{\n+  int m;\n+  int n[N][N][N];\n+};\n+\n+struct s2{\n+  int m;\n+  int n[N-1][N-1][N-1];\n+};\n+\n+struct test1{\n+  struct s a; /* array a.n is unaligned */\n+  int b;\n+  int c;\n+  struct s e; /* array e.n is aligned */\n+};\n+\n+struct test2{\n+  struct s2 a; /* array a.n is unaligned */\n+  int b;\n+  int c;\n+  struct s2 e; /* array e.n is aligned */\n+};\n+\n+\n+struct test1 tmp1[4];\n+struct test2 tmp2[4];\n+\n+int main1 ()\n+{  \n+  int i,j;\n+\n+  /* 1. unaligned */\n+  for (i = 0; i < N; i++)\n+    {\n+      tmp1[2].a.n[1][2][i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (tmp1[2].a.n[1][2][i] != 5)\n+        abort ();\n+    }\n+\n+  /* 2. aligned */\n+  for (i = 3; i < N-1; i++)\n+    {\n+      tmp1[2].a.n[1][2][i] = 6;\n+    }\n+\n+  /* check results:  */\n+  for (i = 3; i < N-1; i++)\n+    {\n+      if (tmp1[2].a.n[1][2][i] != 6)\n+        abort ();\n+    }\n+\n+  /* 3. aligned */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+\t{\n+          tmp1[2].e.n[1][i][j] = 8;\n+\t}\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+\t{\n+          if (tmp1[2].e.n[1][i][j] != 8)\n+\t    abort ();\n+\t}\n+    }\n+\n+  /* 4. unaligned */\n+  for (i = 0; i < N-4; i++)\n+    {\n+      for (j = 0; j < N-4; j++)\n+\t{\n+          tmp2[2].e.n[1][i][j] = 8;\n+\t}\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N-4; i++)\n+    {\n+      for (j = 0; j < N-4; j++)\n+\t{\n+          if (tmp2[2].e.n[1][i][j] != 8)\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */"}, {"sha": "66619dc82e60e851ec7fd9c5e82068d925ebf78f", "filename": "gcc/testsuite/gcc.dg/vect/vect-74.c", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -14,11 +14,6 @@ afloat a[N];\n afloat b[N+4] = {0.2, 1.3, 2.3, 3.4, 4.5, 5.6, 7.8, 9.0, 10.11, 11.12, 12.13, 13.14, 14.15, 15.16, 16.17, 17.18, 18.19, 19.20}; \n afloat c[N] = {0.2, 1.3, 2.3, 3.4, 4.5, 5.6, 7.8, 9.0, 10.11, 11.12, 12.13, 13.14, 14.15, 15.16};\n \n-float fa[N];\n-float fb[N+4] = {0.2, 1.3, 2.3, 3.4, 4.5, 5.6, 7.8, 9.0, 10.11, 11.12, 12.13, 13.14, 14.15, 15.16, \n-16.17, 17.18, 18.19, 19.20}; \n-float fc[N] = {0.2, 1.3, 2.3, 3.4, 4.5, 5.6, 7.8, 9.0, 10.11, 11.12, 12.13, 13.14, 14.15, 15.16};\n-\n int\n main1 (afloat *__restrict__  pa, afloat * __restrict__ pb, afloat * __restrict__ pc)\n {\n@@ -39,59 +34,13 @@ main1 (afloat *__restrict__  pa, afloat * __restrict__ pb, afloat * __restrict__\n   return 0;\n }\n \n-/* Not vectorizable. Alias. */\n-int\n-main2 (afloat *pa, afloat *pb, afloat *pc)\n-{\n-  int i;\n-  afloat *q = pb + 4;\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      pa[i] = q[i] * pc[i];\n-    }\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      if (pa[i] != q[i] * pc[i])\n-\tabort();\n-    }\n-  \n-  return 0;\n-}\n-\n-/* Not vectorizable: not aligned pointers. */\n-int\n-main3 (float * __restrict__ pa, float * __restrict__ pb, float *__restrict__ pc)\n-{\n-  int i;\n-  afloat *q = pb + 4;\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      pa[i] = q[i] * pc[i];\n-    }\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      if (pa[i] != q[i] * pc[i])\n-\tabort();\n-    }\n-  \n-  return 0;\n-}\n-\n-\n int main (void)\n { \n   check_vect ();\n \n   main1 (a, b, c);\n-  main2 (a, b, c);\n-  main3 (fa, fb, fc);\n \n   return 0;\t\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 2 \"vect\" } } */"}, {"sha": "639172425d41ca733636af9480bad10881802987", "filename": "gcc/testsuite/gcc.dg/vect/vect-79.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-79.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-79.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-79.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+afloat a[N];\n+afloat b[N+4] = {0.2, 1.3, 2.3, 3.4, 4.5, 5.6, 7.8, 9.0, 10.11, 11.12, 12.13, 13.14, 14.15, 15.16, 16.17, 17.18, 18.19, 19.20}; \n+afloat c[N] = {0.2, 1.3, 2.3, 3.4, 4.5, 5.6, 7.8, 9.0, 10.11, 11.12, 12.13, 13.14, 14.15, 15.16};\n+\n+/* Not vectorizable. Alias. */\n+int\n+main2 (afloat *pa, afloat *pb, afloat *pc)\n+{\n+  int i;\n+  afloat *q = pb + 4;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = q[i] * pc[i];\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != q[i] * pc[i])\n+\tabort();\n+    }\n+  \n+  return 0;\n+}\n+\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  main2 (a, b, c);\n+\n+  return 0;\t\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { xfail *-*-* } } } */"}, {"sha": "b1be712c9263d126591826636c1ba2ec0a1f4f91", "filename": "gcc/testsuite/gcc.dg/vect/vect-80.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/479b66524f7f3f561ed4e82973cb26aad63b9317/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c?ref=479b66524f7f3f561ed4e82973cb26aad63b9317", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run { target powerpc*-*-* } } */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -maltivec\" { target powerpc*-*-* } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -msse2\" { target i?86-*-* x86_64-*-* } } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+typedef float afloat __attribute__ ((__aligned__(16)));\n+\n+float fa[N];\n+float fb[N+4] = {0.2, 1.3, 2.3, 3.4, 4.5, 5.6, 7.8, 9.0, 10.11, 11.12, 12.13, 13.14, 14.15, 15.16, \n+16.17, 17.18, 18.19, 19.20}; \n+float fc[N] = {0.2, 1.3, 2.3, 3.4, 4.5, 5.6, 7.8, 9.0, 10.11, 11.12, 12.13, 13.14, 14.15, 15.16};\n+\n+/* Not vectorizable: not aligned pointers. */\n+int\n+main3 (float * __restrict__ pa, float * __restrict__ pb, float *__restrict__ pc)\n+{\n+  int i;\n+  afloat *q = pb + 4;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      pa[i] = q[i] * pc[i];\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != q[i] * pc[i])\n+\tabort();\n+    }\n+  \n+  return 0;\n+}\n+\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  main3 (fa, fb, fc);\n+\n+  return 0;\t\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */"}]}