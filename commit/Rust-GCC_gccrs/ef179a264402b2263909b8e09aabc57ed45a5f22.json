{"sha": "ef179a264402b2263909b8e09aabc57ed45a5f22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYxNzlhMjY0NDAyYjIyNjM5MDliOGUwOWFhYmM1N2VkNDVhNWYyMg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-05-07T10:02:49Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-05-07T10:02:49Z"}, "message": "Apply patch from Nick Burrett  <nick.burrett@btinternet.com>\nto implementn -mpoke-function-name\n\nFrom-SVN: r26817", "tree": {"sha": "b2df055698c7dd8c4527d0866b021b766ec877b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2df055698c7dd8c4527d0866b021b766ec877b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef179a264402b2263909b8e09aabc57ed45a5f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef179a264402b2263909b8e09aabc57ed45a5f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef179a264402b2263909b8e09aabc57ed45a5f22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef179a264402b2263909b8e09aabc57ed45a5f22/comments", "author": null, "committer": null, "parents": [{"sha": "6c9ef6d420830674a05693b1473e30f1292722bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9ef6d420830674a05693b1473e30f1292722bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c9ef6d420830674a05693b1473e30f1292722bd"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "edc1e721d2b139d94d34bea3be7b56bcbd11a3c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef179a264402b2263909b8e09aabc57ed45a5f22", "patch": "@@ -1,3 +1,15 @@\n+Fri May  7 09:54:11 1999  Nick Clifton  <nickc@cygnus.com>\n+\n+\tPatch from: Nick Burrett  <nick.burrett@btinternet.com>\n+\n+\t* arm.c (arm_poke_function_name): New function to implement\n+\t-mpoke-function-name.\n+\t* aof.h (ASM_DECLARE_FUNCTION_NAME): Call it.\n+\t* aout.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n+\t* elf.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n+\t* arm.h: Prototype it.\n+\t(TARGET_SWITCHES): Add `no-poke-function-name'.\n+\n Fri May  7 14:19:31 1999  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \t* fixinc/server.c (read_pipe_timeout): Declare volatile, modified\n \tin signal handler."}, {"sha": "d0bc692d640cd617120e93c4a634aeede9145ff6", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=ef179a264402b2263909b8e09aabc57ed45a5f22", "patch": "@@ -324,6 +324,8 @@ do {\t\t\t\t\t\\\n \n #define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL) \\\n {\t\t\t\t\t\t\\\n+  if (TARGET_POKE_FUNCTION_NAME)\t\t\\\n+    arm_poke_function_name ((STREAM), (NAME));\t\\\n   ASM_OUTPUT_LABEL (STREAM, NAME);\t\t\\\n   if (! TREE_PUBLIC (DECL))\t\t\t\\\n     {\t\t\t\t\t\t\\"}, {"sha": "2e341b768a64c4d952ac06aa2deb7a844fc5bedc", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=ef179a264402b2263909b8e09aabc57ed45a5f22", "patch": "@@ -129,7 +129,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n   \n /* Output a function label definition.  */\n #ifndef ASM_DECLARE_FUNCTION_NAME\n-#define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL) ASM_OUTPUT_LABEL (STREAM, NAME)\n+#define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL)\t\\\n+{\t\t\t\t\t\t\t\\\n+  if (TARGET_POKE_FUNCTION_NAME)\t\t\t\\\n+    arm_poke_function_name ((STREAM), (NAME));\t\t\\\n+  ASM_OUTPUT_LABEL (STREAM, NAME);\t\t\t\\\n+}\n #endif\n \n #ifndef ASM_OUTPUT_LABEL"}, {"sha": "03891cd0eb114fe6881020ea4aed1b6c26a736a2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ef179a264402b2263909b8e09aabc57ed45a5f22", "patch": "@@ -5398,6 +5398,51 @@ arm_volatile_func ()\n   return (optimize > 0 && TREE_THIS_VOLATILE (current_function_decl));\n }\n \n+/* Write the function name into the code section, directly preceding\n+   the function prologue.\n+\n+   Code will be output similar to this:\n+     t0\n+\t .ascii \"arm_poke_function_name\", 0\n+\t .align\n+     t1\n+\t .word 0xff000000 + (t1 - t0)\n+     arm_poke_function_name\n+\t mov     ip, sp\n+\t stmfd   sp!, {fp, ip, lr, pc}\n+\t sub     fp, ip, #4\n+\n+   When performing a stack backtrace, code can inspect the value\n+   of 'pc' stored at 'fp' + 0.  If the trace function then looks\n+   at location pc - 12 and the top 8 bits are set, then we know\n+   that there is a function name embedded immediately preceding this\n+   location and has length ((pc[-3]) & 0xff000000).\n+\n+   We assume that pc is declared as a pointer to an unsigned long.\n+\n+   It is of no benefit to output the function name if we are assembling\n+   a leaf function.  These function types will not contain a stack\n+   backtrace structure, therefore it is not possible to determine the\n+   function name.  */\n+\n+void\n+arm_poke_function_name (stream, name)\n+   FILE * stream;\n+   char * name;\n+{\n+  unsigned long alignlength;\n+  unsigned long length;\n+  rtx           x;\n+\n+  length = strlen (name);\n+  alignlength = (length + 1) + 3 & ~3;\n+  \n+  ASM_OUTPUT_ASCII (stream, name, length + 1);\n+  ASM_OUTPUT_ALIGN (stream, 2);\n+  x = GEN_INT (0xff000000UL + alignlength);\n+  ASM_OUTPUT_INT (stream, x);\n+}\n+\n /* The amount of stack adjustment that happens here, in output_return and in\n    output_epilogue must be exactly the same as was calculated during reload,\n    or things will point to the wrong place.  The only time we can safely"}, {"sha": "b15fe2178b640c45214d7074d7c0746f17c8d316", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ef179a264402b2263909b8e09aabc57ed45a5f22", "patch": "@@ -346,6 +346,7 @@ function tries to return. */\n   {\"no-apcs-frame\",\t       -ARM_FLAG_APCS_FRAME, \"\" }, \\\n   {\"poke-function-name\",\tARM_FLAG_POKE, \t\t\\\n      \"Store function names in object code\" },\t\t\\\n+  {\"no-poke-function-name\",    -ARM_FLAG_POKE, \"\" },\t\\\n   {\"fpe\",\t\t\tARM_FLAG_FPE,  \"\" },\t\\\n   {\"apcs-32\",\t\t\tARM_FLAG_APCS_32, \t\\\n      \"Use the 32bit version of the APCS\" },\t\t\\\n@@ -2190,6 +2191,7 @@ char * arithmetic_instr PROTO ((Rtx, int));\n void   output_ascii_pseudo_op STDIO_PROTO ((FILE *, unsigned char *, int));\n char * output_return_instruction PROTO ((Rtx, int, int));\n int    arm_volatile_func PROTO ((void));\n+void   arm_poke_function_name STDIO_PROTO ((FILE *, char *));\n void   output_func_prologue STDIO_PROTO ((FILE *, int));\n void   output_func_epilogue STDIO_PROTO ((FILE *, int));\n void   arm_expand_prologue PROTO ((void));"}, {"sha": "e6d8eb762309589ae5e40a21dea05a54b939bac4", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef179a264402b2263909b8e09aabc57ed45a5f22/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=ef179a264402b2263909b8e09aabc57ed45a5f22", "patch": "@@ -60,16 +60,20 @@ Boston, MA 02111-1307, USA.  */\n /* Write the extra assembler code needed to declare a function properly.\n    Some svr4 assemblers need to also have something extra said about the\n    function's return value.  We allow for that here.  */\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n-  } while (0)\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (TARGET_POKE_FUNCTION_NAME)\t\t\t\\\n+        arm_poke_function_name (FILE, NAME);\t\t\\\n+      fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\\\n+      putc (',', FILE);\t\t\t\t\t\\\n+      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\\\n+      putc ('\\n', FILE);\t\t\t\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\\\n+      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n \n /* Write the extra assembler code needed to declare an object properly.  */\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\"}]}