{"sha": "9d780cb2fbf609e85c00d037a570f53a3ea4773c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ3ODBjYjJmYmY2MDllODVjMDBkMDM3YTU3MGY1M2EzZWE0NzczYw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-11-27T18:17:14Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-27T18:17:14Z"}, "message": "In gcc/cp/: 2010-11-27 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/cp/:\n2010-11-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc++/46222\n\t* decl.c (grokdeclarator): Replaced an assert (for a case that can\n\tnever happen in C++, but could happen in ObjC++ for invalid code)\n\twith a check that prints an error message and returns\n\terror_mark_node.\n\nIn gcc/testsuite/:\n2010-11-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc++/46222\t\n\t* obj-c++.dg/property/at-property-2.mm: Uncommented testcase.\n\nFrom-SVN: r167202", "tree": {"sha": "19a4fcdc53c7001b27ccef3f130c8f27436a9ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a4fcdc53c7001b27ccef3f130c8f27436a9ba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d780cb2fbf609e85c00d037a570f53a3ea4773c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d780cb2fbf609e85c00d037a570f53a3ea4773c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d780cb2fbf609e85c00d037a570f53a3ea4773c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d780cb2fbf609e85c00d037a570f53a3ea4773c/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "559d60552c6006428fcdedac16209731ad7c917e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/559d60552c6006428fcdedac16209731ad7c917e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/559d60552c6006428fcdedac16209731ad7c917e"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "64224016eea475abc6bddf6217183a858d49bdbb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d780cb2fbf609e85c00d037a570f53a3ea4773c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d780cb2fbf609e85c00d037a570f53a3ea4773c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9d780cb2fbf609e85c00d037a570f53a3ea4773c", "patch": "@@ -1,3 +1,11 @@\n+2010-11-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc++/46222\n+\t* decl.c (grokdeclarator): Replaced an assert (for a case that can\n+\tnever happen in C++, but could happen in ObjC++ for invalid code)\n+\twith a check that prints an error message and returns\n+\terror_mark_node.\n+\n 2010-11-23  Jeffrey Yasskin <jyasskin@google.com>\n \n \tPR c++/46527"}, {"sha": "c494e1c0b92afb36a6819c8197ceee3aa22f7f63", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d780cb2fbf609e85c00d037a570f53a3ea4773c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d780cb2fbf609e85c00d037a570f53a3ea4773c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9d780cb2fbf609e85c00d037a570f53a3ea4773c", "patch": "@@ -9531,7 +9531,21 @@ grokdeclarator (const cp_declarator *declarator,\n \n \t    if (friendp == 0)\n \t      {\n-\t\tgcc_assert (ctype);\n+\t\t/* This should never happen in pure C++ (the check\n+\t\t   could be an assert).  It could happen in\n+\t\t   Objective-C++ if someone writes invalid code that\n+\t\t   uses a function declaration for an instance\n+\t\t   variable or property (instance variables and\n+\t\t   properties are parsed as FIELD_DECLs, but they are\n+\t\t   part of an Objective-C class, not a C++ class).\n+\t\t   That code is invalid and is caught by this\n+\t\t   check.  */\n+\t\tif (!ctype)\n+\t\t  {\n+\t\t    error (\"declaration of function %qD in invalid context\",\n+\t\t\t   unqualified_id);\n+\t\t    return error_mark_node;\n+\t\t  }\n \n \t\t/* ``A union may [ ... ] not [ have ] virtual functions.''\n \t\t   ARM 9.5 */"}, {"sha": "d7cb0449c0fe13914cac6973cf765fe21bdcaeb2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d780cb2fbf609e85c00d037a570f53a3ea4773c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d780cb2fbf609e85c00d037a570f53a3ea4773c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d780cb2fbf609e85c00d037a570f53a3ea4773c", "patch": "@@ -1,3 +1,8 @@\n+2010-11-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc++/46222\t\n+\t* obj-c++.dg/property/at-property-2.mm: Uncommented testcase.\n+\n 2010-11-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc.dg/property/at-property-24.m: New."}, {"sha": "d8433dffcd4f4386b51c5175e2e1009773748d49", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-2.mm", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d780cb2fbf609e85c00d037a570f53a3ea4773c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d780cb2fbf609e85c00d037a570f53a3ea4773c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-2.mm?ref=9d780cb2fbf609e85c00d037a570f53a3ea4773c", "patch": "@@ -8,7 +8,6 @@ @interface MyRootClass\n }\n @property int name __attribute__((deprecated));\n @property int table __attribute__((xxx));       /* { dg-warning \".xxx. attribute directive ignored\" } */\n-/* FIXME: the test below should not ICE.\n-@property void function (void);                  { dg-error \"can.t make .function. into a method\" } */\n+@property void function (void);                 /* { dg-error \"declaration of function .function. in invalid context\" } */\n @property typedef int j;                        /*  { dg-error \"invalid type for property\" } */\n @end"}]}