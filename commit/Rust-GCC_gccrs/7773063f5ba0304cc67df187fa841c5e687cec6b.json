{"sha": "7773063f5ba0304cc67df187fa841c5e687cec6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3MzA2M2Y1YmEwMzA0Y2M2N2RmMTg3ZmE4NDFjNWU2ODdjZWM2Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-06-09T16:21:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-06-09T16:21:47Z"}, "message": "* gcc-interface/ada-tree.h: Fix formatting nits.\n\nFrom-SVN: r160491", "tree": {"sha": "5e2668d8032d2649217d88a4e43f77344e38d10f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e2668d8032d2649217d88a4e43f77344e38d10f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7773063f5ba0304cc67df187fa841c5e687cec6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7773063f5ba0304cc67df187fa841c5e687cec6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7773063f5ba0304cc67df187fa841c5e687cec6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7773063f5ba0304cc67df187fa841c5e687cec6b/comments", "author": null, "committer": null, "parents": [{"sha": "0679526118b2b34120b7a1054245fe269d19e8ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0679526118b2b34120b7a1054245fe269d19e8ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0679526118b2b34120b7a1054245fe269d19e8ee"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "553702cba38e442a4bc1e63af25d6745db03d720", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7773063f5ba0304cc67df187fa841c5e687cec6b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7773063f5ba0304cc67df187fa841c5e687cec6b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7773063f5ba0304cc67df187fa841c5e687cec6b", "patch": "@@ -1,3 +1,7 @@\n+2010-06-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h: Fix formatting nits.\n+\n 2010-06-08  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \t* gcc-interface/utils.c (init_gnat_to_gnu): Use typed GC"}, {"sha": "5092ff31b788f4dade1137863d60cb1cbd09035c", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7773063f5ba0304cc67df187fa841c5e687cec6b/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7773063f5ba0304cc67df187fa841c5e687cec6b/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=7773063f5ba0304cc67df187fa841c5e687cec6b", "patch": "@@ -33,36 +33,37 @@ union GTY((desc (\"0\"),\n };\n \n /* Ada uses the lang_decl and lang_type fields to hold a tree.\n+\n    FIXME: the variable_size annotation here is needed because these types are\n-   variable-sized in some other frontends.  Due to gengtype deficiency the GTY\n-   options of such types have to agree across all frontends. */\n+   variable-sized in some other front-ends.  Due to gengtype deficiency, the\n+   GTY options of such types have to agree across all front-ends.  */\n struct GTY((variable_size)) lang_type { tree t; };\n struct GTY((variable_size)) lang_decl { tree t; };\n \n /* Macros to get and set the tree in TYPE_LANG_SPECIFIC.  */\n #define GET_TYPE_LANG_SPECIFIC(NODE) \\\n   (TYPE_LANG_SPECIFIC (NODE) ? TYPE_LANG_SPECIFIC (NODE)->t : NULL_TREE)\n \n-#define SET_TYPE_LANG_SPECIFIC(NODE, X)\t\t       \\\n-do {\t\t\t\t\t\t       \\\n-  tree tmp = (X);\t\t\t\t       \\\n-  if (!TYPE_LANG_SPECIFIC (NODE))\t\t       \\\n-    TYPE_LANG_SPECIFIC (NODE) = ggc_alloc_lang_type    \\\n-      (sizeof (struct lang_type));\t\t       \\\n-  TYPE_LANG_SPECIFIC (NODE)->t = tmp;\t\t       \\\n+#define SET_TYPE_LANG_SPECIFIC(NODE, X)\t\t\t \\\n+do {\t\t\t\t\t\t\t \\\n+  tree tmp = (X);\t\t\t\t\t \\\n+  if (!TYPE_LANG_SPECIFIC (NODE))\t\t\t \\\n+    TYPE_LANG_SPECIFIC (NODE)\t\t\t\t \\\n+      = ggc_alloc_lang_type (sizeof (struct lang_type)); \\\n+  TYPE_LANG_SPECIFIC (NODE)->t = tmp;\t\t\t \\\n } while (0)\n \n /* Macros to get and set the tree in DECL_LANG_SPECIFIC.  */\n #define GET_DECL_LANG_SPECIFIC(NODE) \\\n   (DECL_LANG_SPECIFIC (NODE) ? DECL_LANG_SPECIFIC (NODE)->t : NULL_TREE)\n \n-#define SET_DECL_LANG_SPECIFIC(NODE, X)\t\t       \\\n-do {\t\t\t\t\t\t       \\\n-  tree tmp = (X);\t\t\t\t       \\\n-  if (!DECL_LANG_SPECIFIC (NODE))\t\t       \\\n-    DECL_LANG_SPECIFIC (NODE) = ggc_alloc_lang_decl    \\\n-      (sizeof (struct lang_decl));\t\t       \\\n-  DECL_LANG_SPECIFIC (NODE)->t = tmp;\t\t       \\\n+#define SET_DECL_LANG_SPECIFIC(NODE, X)\t\t\t \\\n+do {\t\t\t\t\t\t\t \\\n+  tree tmp = (X);\t\t\t\t\t \\\n+  if (!DECL_LANG_SPECIFIC (NODE))\t\t\t \\\n+    DECL_LANG_SPECIFIC (NODE)\t\t\t\t \\\n+      = ggc_alloc_lang_decl (sizeof (struct lang_decl)); \\\n+  DECL_LANG_SPECIFIC (NODE)->t = tmp;\t\t\t \\\n } while (0)\n \n "}]}