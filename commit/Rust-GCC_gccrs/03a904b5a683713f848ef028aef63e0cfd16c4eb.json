{"sha": "03a904b5a683713f848ef028aef63e0cfd16c4eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhOTA0YjVhNjgzNzEzZjg0OGVmMDI4YWVmNjNlMGNmZDE2YzRlYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-05-06T06:52:30Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-05-06T06:52:30Z"}, "message": "C++ support for -Wunused-but-set-variable\n\ngcc/cp/ChangeLog:\n\tPR 18624\n\t* cp-tree.h (mark_exp_read, mark_rvalue_use, mark_lvalue_use,\n\tmark_type_use): Declare ...\n\t* expr.c (mark_exp_read, mark_rvalue_use, mark_lvalue_use,\n\tmark_type_use): ... new fns.\n\t* typeck.c (cxx_sizeof_expr, cxx_alignof_expr): Call mark_type_use.\n\t(perform_integral_promotions): Call mark_rvalue_use.\n\t(cp_build_unary_op): Call mark_lvalue_use.\n\t(decay_conversion): Update comment. Call mark_lvalue.\n\t* decl.c (unused_but_set_errorcount): New variable.\n\t(poplevel): Issue -Wunused-but-set-variable diagnostics.\n\t(duplicate_decls): Merge DECL_READ_P flags.\n\t(start_cleanup_fn): Set DECL_READ_P flag.\n\t(finish_function): Issue -Wunused-but-set-parameter diagnostics.\n\t* tree.c (rvalue): Call mark_rvalue_use.\n\t* pt.c (convert_nontype_argument): Likewise.\n\t* semantics.c (finish_typeof, finish_decltype_type): Call\n\tmark_type_use.\n\t(finish_asm_stmt): Call mark_lvalue_use.\n\t(finish_expr_stmt): Call mark_exp_read.\n\t* call.c (convert_like_real) <ck_identity, ck_user>: Call\n\tmark_rvalue_use.\n\t(build_x_va_arg): Call mark_lvalue_use.\n\t(build_over_call): Call mark_type_use.\n\t* init.c (build_new, build_delete): Call mark_value_use.\n\t* rtti.c (build_typeid): Call mark_lvalue_use or mark_type_use.\n\t(build_dynamic_cast_1): call mark_lvalue_use or mark_rvalue_use.\n\ngcc/testsuite/ChangeLog:\n\tPR 18624\n\t* g++.dg/warn/Wunused-7.C: Add dg-warning.\n\t* g++.dg/template/sfinae16.C: Likewise.\n\t* gcc.dg/Wunused-var-1.c: Moved to...\n\t* c-c++-common/Wunused-var-1.c: ...here. New test.\n\t* gcc.dg/Wunused-var-2.c: Moved to...\n\t* c-c++-common/Wunused-var-2.c: ...here. New test.\n\t* gcc.dg/Wunused-var-3.c: Moved to...\n\t* c-c++-common/Wunused-var-3.c: ...here. New test.\n\t* gcc.dg/Wunused-var-4.c: Moved to...\n\t* gcc.dg/Wunused-var-1.c: ... here.\n\t* gcc.dg/Wunused-var-5.c: Moved to...\n\t* c-c++-common/Wunused-var-4.c: ...here. New test.\n\t* gcc.dg/Wunused-var-7.c: Moved to...\n\t* c-c++-common/Wunused-var-5.c: ...here. New test.\n\t* gcc.dg/Wunused-var-6.c: Moved to...\n\t* gcc.dg/Wunused-var-2.c: ... here.\n\t* c-c++-common/Wunused-var-1.c: New test.\n\t* c-c++-common/Wunused-var-2.c: New test.\n\t* c-c++-common/Wunused-var-3.c: New test.\n\t* c-c++-common/Wunused-var-4.c: New test.\n\t* c-c++-common/Wunused-var-5.c: New test.\n\t* g++.dg/warn/Wunused-var-1.C: New test.\n\t* g++.dg/warn/Wunused-var-2.C: New test.\n\t* g++.dg/warn/Wunused-var-3.C: New test.\n\t* g++.dg/warn/Wunused-var-4.C: New test.\n\t* g++.dg/warn/Wunused-var-5.C: New test.\n\t* g++.dg/warn/Wunused-var-6.C: New test.\n\t* g++.dg/warn/Wunused-var-7.C: New test.\n\t* g++.dg/warn/Wunused-var-8.C: New test.\n\t* g++.dg/warn/Wunused-parm-1.C: New test.\n\t* g++.dg/warn/Wunused-parm-2.C: New test.\n\t* g++.dg/warn/Wunused-parm-3.C: New test.\n\nCo-Authored-By: Dodji Seketeli <dodji@redhat.com>\n\nFrom-SVN: r159096", "tree": {"sha": "98529df86d4f96b7809a5e235901996abf394d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98529df86d4f96b7809a5e235901996abf394d3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03a904b5a683713f848ef028aef63e0cfd16c4eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a904b5a683713f848ef028aef63e0cfd16c4eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a904b5a683713f848ef028aef63e0cfd16c4eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a904b5a683713f848ef028aef63e0cfd16c4eb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d8930a046c5d5c80f990eef73c278b4c124b6f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8930a046c5d5c80f990eef73c278b4c124b6f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8930a046c5d5c80f990eef73c278b4c124b6f4"}], "stats": {"total": 1508, "additions": 1274, "deletions": 234}, "files": [{"sha": "b9c0f8a65068df7e28380738a8b233f3de5c6f6a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -1,3 +1,28 @@\n+2010-04-22  Jakub Jelinek <jakub@redhat.com>\n+\t    Dodji Seketeli <dodji@redhat.com>\n+\n+\tPR c/18624\n+\t* cp-tree.h (mark_exp_read, rvalue_use, lvalue_use, type_use):\n+\tDeclare ...\n+\t* expr.c (mark_exp_read, rvalue_use, lvalue_use, type_use): ... new fns.\n+\t* typeck.c (cxx_sizeof_expr, cxx_alignof_expr): Call type_use.\n+\t(decay_conversion, perform_integral_promotions): Call rvalue_use.\n+\t(cp_build_unary_op): Call lvalue_use.\n+\t* decl.c (unused_but_set_errorcount): New variable.\n+\t(poplevel): Issue -Wunused-but-set-variable diagnostics.\n+\t(duplicate_decls): Merge DECL_READ_P flags.\n+\t(start_cleanup_fn): Set DECL_READ_P flag.\n+\t(finish_function): Issue -Wunused-but-set-parameter diagnostics.\n+\t* tree.c (rvalue): Call rvalue_use.\n+\t* pt.c (convert_nontype_argument): Likewise.\n+\t* semantics.c (finish_expr_stmt, finish_asm_stmt, finish_typeof,\n+\tfinish_decltype_type): Likewise.\n+\t* call.c (convert_like_real) <ck_identity, ck_user>: Call rvalue use.\n+\t(build_x_va_arg, build_new_method_call, build_over_call): Call lvalue_use\n+\tor rvalue_use depending on the expr.\n+\t* init.c (build_new, build_delete): Likewise.\n+\t* rtti.c (build_typeid, build_dynamic_cast_1): Likewise.\n+\n 2010-05-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43787"}, {"sha": "e8fcc94b284478e0c943c313010b8201eab4fe03", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -4888,6 +4888,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \ttree convfn = cand->fn;\n \tunsigned i;\n \n+\texpr = mark_rvalue_use (expr);\n+\n \t/* When converting from an init list we consider explicit\n \t   constructors, but actually trying to call one is an error.  */\n \tif (DECL_NONCONVERTING_P (convfn) && DECL_CONSTRUCTOR_P (convfn))\n@@ -4920,6 +4922,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \treturn expr;\n       }\n     case ck_identity:\n+      expr = mark_rvalue_use (expr);\n       if (BRACE_ENCLOSED_INITIALIZER_P (expr))\n \t{\n \t  int nelts = CONSTRUCTOR_NELTS (expr);\n@@ -5230,6 +5233,8 @@ build_x_va_arg (tree expr, tree type)\n   if (expr == error_mark_node || !type)\n     return error_mark_node;\n \n+  expr = mark_lvalue_use (expr);\n+\n   if (type_has_nontrivial_copy_init (type)\n       || TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type)\n       || TREE_CODE (type) == REFERENCE_TYPE)\n@@ -5698,7 +5703,8 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n     {\n       tree a = VEC_index (tree, args, arg_index);\n       if (magic_varargs_p (fn))\n-\t/* Do no conversions for magic varargs.  */;\n+\t/* Do no conversions for magic varargs.  */\n+\ta = mark_type_use (a);\n       else\n \ta = convert_arg_to_ellipsis (a);\n       argarray[j++] = a;"}, {"sha": "4fca633d20a56a8d64e784e8725edc2c67754b20", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -4815,6 +4815,10 @@ extern tree build_eh_type_type\t\t\t(tree);\n \n /* in expr.c */\n extern tree cplus_expand_constant\t\t(tree);\n+extern tree mark_rvalue_use\t\t\t(tree);\n+extern tree mark_lvalue_use\t\t\t(tree);\n+extern tree mark_type_use\t\t\t(tree);\n+extern void mark_exp_read\t\t\t(tree);\n \n /* friend.c */\n extern int is_friend\t\t\t\t(tree, tree);"}, {"sha": "f9114a968d793458c189952769c4b1794761d701", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -498,6 +498,10 @@ poplevel_named_label_1 (void **slot, void *data)\n   return 1;\n }\n \n+/* Saved errorcount to avoid -Wunused-but-set-{parameter,variable} warnings\n+   when errors were reported, except for -Werror-unused-but-set-*.  */\n+static int unused_but_set_errorcount;\n+\n /* Exit a binding level.\n    Pop the level off, and restore the state of the identifier-decl mappings\n    that were in effect when this level was entered.\n@@ -589,14 +593,28 @@ poplevel (int keep, int reverse, int functionbody)\n     = current_binding_level->kind == sk_for && flag_new_for_scope == 1;\n \n   /* Before we remove the declarations first check for unused variables.  */\n-  if (warn_unused_variable\n+  if ((warn_unused_variable || warn_unused_but_set_variable)\n       && !processing_template_decl)\n     for (decl = getdecls (); decl; decl = TREE_CHAIN (decl))\n       if (TREE_CODE (decl) == VAR_DECL\n-\t  && ! TREE_USED (decl)\n+\t  && (! TREE_USED (decl) || !DECL_READ_P (decl))\n \t  && ! DECL_IN_SYSTEM_HEADER (decl)\n \t  && DECL_NAME (decl) && ! DECL_ARTIFICIAL (decl))\n-\twarning (OPT_Wunused_variable, \"unused variable %q+D\", decl);\n+\t{\n+\t  if (! TREE_USED (decl))\n+\t    warning (OPT_Wunused_variable, \"unused variable %q+D\", decl);\n+\t  else if (DECL_CONTEXT (decl) == current_function_decl\n+\t\t   && TREE_TYPE (decl) != error_mark_node\n+\t\t   && TREE_CODE (TREE_TYPE (decl)) != REFERENCE_TYPE\n+\t\t   && errorcount == unused_but_set_errorcount\n+\t\t   && (!CLASS_TYPE_P (TREE_TYPE (decl))\n+\t\t       || !TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (decl))))\n+\t    {\n+\t      warning (OPT_Wunused_but_set_variable,\n+\t\t       \"variable %q+D set but not used\", decl); \n+\t      unused_but_set_errorcount = errorcount;\n+\t    }\n+\t}\n \n   /* Remove declarations for all the DECLs in this level.  */\n   for (link = decls; link; link = TREE_CHAIN (link))\n@@ -2096,6 +2114,13 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n     TREE_USED (newdecl) = 1;\n   else if (TREE_USED (newdecl))\n     TREE_USED (olddecl) = 1;\n+  if (TREE_CODE (newdecl) == VAR_DECL)\n+    {\n+      if (DECL_READ_P (olddecl))\n+\tDECL_READ_P (newdecl) = 1;\n+      else if (DECL_READ_P (newdecl))\n+\tDECL_READ_P (olddecl) = 1;\n+    }\n   if (DECL_PRESERVE_P (olddecl))\n     DECL_PRESERVE_P (newdecl) = 1;\n   else if (DECL_PRESERVE_P (newdecl))\n@@ -6181,6 +6206,7 @@ start_cleanup_fn (void)\n       parmdecl = cp_build_parm_decl (NULL_TREE, ptr_type_node);\n       DECL_CONTEXT (parmdecl) = fndecl;\n       TREE_USED (parmdecl) = 1;\n+      DECL_READ_P (parmdecl) = 1;\n       DECL_ARGUMENTS (fndecl) = parmdecl;\n     }\n \n@@ -12596,6 +12622,33 @@ finish_function (int flags)\n      info for the epilogue.  */\n   cfun->function_end_locus = input_location;\n \n+  /* Complain about parameters that are only set, but never otherwise used.  */\n+  if (warn_unused_but_set_parameter\n+      && !processing_template_decl\n+      && errorcount == unused_but_set_errorcount\n+      && !DECL_CLONED_FUNCTION_P (fndecl))\n+    {\n+      tree decl;\n+\n+      for (decl = DECL_ARGUMENTS (fndecl);\n+\t   decl;\n+\t   decl = TREE_CHAIN (decl))\n+\tif (TREE_USED (decl)\n+\t    && TREE_CODE (decl) == PARM_DECL\n+\t    && !DECL_READ_P (decl)\n+\t    && DECL_NAME (decl)\n+\t    && !DECL_ARTIFICIAL (decl)\n+\t    && !TREE_NO_WARNING (decl)\n+\t    && !DECL_IN_SYSTEM_HEADER (decl)\n+\t    && TREE_TYPE (decl) != error_mark_node\n+\t    && TREE_CODE (TREE_TYPE (decl)) != REFERENCE_TYPE\n+\t    && (!CLASS_TYPE_P (TREE_TYPE (decl))\n+\t        || !TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (decl))))\n+\t  warning (OPT_Wunused_but_set_parameter,\n+\t\t   \"parameter %q+D set but not used\", decl);\n+      unused_but_set_errorcount = errorcount;\n+    }\n+\n   /* Genericize before inlining.  */\n   if (!processing_template_decl)\n     {"}, {"sha": "86acc93d2551ca3331df79a105af39d959027ceb", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -369,6 +369,7 @@ initialize_handler_parm (tree decl, tree exp)\n   /* Make sure we mark the catch param as used, otherwise we'll get a\n      warning about an unused ((anonymous)).  */\n   TREE_USED (decl) = 1;\n+  DECL_READ_P (decl) = 1;\n \n   /* Figure out the type that the initializer is.  Pointers are returned\n      adjusted by value from __cxa_begin_catch.  Others are returned by"}, {"sha": "a42e06b04f0f1d9cfad15d049df395f693893900", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -82,3 +82,71 @@ cplus_expand_constant (tree cst)\n \n   return cst;\n }\n+\n+/* Called whenever an expression is used\n+   in a rvalue context.  */\n+\n+tree\n+mark_rvalue_use (tree expr)\n+{\n+  mark_exp_read (expr);\n+  return expr;\n+}\n+\n+/* Called whenever an expression is used\n+   in a lvalue context.  */\n+\n+tree\n+mark_lvalue_use (tree expr)\n+{\n+  mark_exp_read (expr);\n+  return expr;\n+}\n+\n+/* Called whenever an expression is used in a type use context.  */\n+\n+tree\n+mark_type_use (tree expr)\n+{\n+  mark_exp_read (expr);\n+  return expr;\n+}\n+\n+/* Mark EXP as read, not just set, for set but not used -Wunused\n+   warning purposes.  */\n+\n+void\n+mark_exp_read (tree exp)\n+{\n+  if (exp == NULL)\n+    return;\n+\n+  switch (TREE_CODE (exp))\n+    {\n+    case VAR_DECL:\n+    case PARM_DECL:\n+      DECL_READ_P (exp) = 1;\n+      break;\n+    case ARRAY_REF:\n+    case COMPONENT_REF:\n+    case MODIFY_EXPR:\n+    case REALPART_EXPR:\n+    case IMAGPART_EXPR:\n+    CASE_CONVERT:\n+    case ADDR_EXPR:\n+      mark_exp_read (TREE_OPERAND (exp, 0));\n+      break;\n+    case COMPOUND_EXPR:\n+      mark_exp_read (TREE_OPERAND (exp, 1));\n+      break;\n+    case COND_EXPR:\n+      if (TREE_OPERAND (exp, 1))\n+\tmark_exp_read (TREE_OPERAND (exp, 1));\n+      if (TREE_OPERAND (exp, 2))\n+\tmark_exp_read (TREE_OPERAND (exp, 2));\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+"}, {"sha": "a2d9837f66b1b856beedef5939f30a12b5b18152", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -2465,6 +2465,7 @@ build_new (VEC(tree,gc) **placement, tree type, tree nelts,\n           else\n             return error_mark_node;\n         }\n+      nelts = mark_rvalue_use (nelts);\n       nelts = cp_save_expr (cp_convert (sizetype, nelts));\n     }\n \n@@ -3120,6 +3121,8 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n \n   type = TYPE_MAIN_VARIANT (type);\n \n+  addr = mark_rvalue_use (addr);\n+\n   if (TREE_CODE (type) == POINTER_TYPE)\n     {\n       bool complete_p = true;"}, {"sha": "06f5d9f2313dd06f112c38e8b0e6ee462811554f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -4930,6 +4930,7 @@ convert_nontype_argument (tree type, tree expr)\n   if (error_operand_p (expr))\n     return error_mark_node;\n   expr_type = TREE_TYPE (expr);\n+  expr = mark_rvalue_use (expr);\n \n   /* HACK: Due to double coercion, we can get a\n      NOP_EXPR<REFERENCE_TYPE>(ADDR_EXPR<POINTER_TYPE> (arg)) here,"}, {"sha": "6f40653fefeaf3f95625c40556b9be0bbb77871c", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -318,7 +318,7 @@ typeid_ok_p (void)\n tree\n build_typeid (tree exp)\n {\n-  tree cond = NULL_TREE;\n+  tree cond = NULL_TREE, initial_expr = exp;\n   int nonnull = 0;\n \n   if (exp == error_mark_node || !typeid_ok_p ())\n@@ -333,6 +333,9 @@ build_typeid (tree exp)\n       && ! resolves_to_fixed_type_p (exp, &nonnull)\n       && ! nonnull)\n     {\n+      /* So we need to look into the vtable of the type of exp.\n+         This is an lvalue use of expr then.  */\n+      exp = mark_lvalue_use (exp);\n       exp = stabilize_reference (exp);\n       cond = cp_convert (boolean_type_node, TREE_OPERAND (exp, 0));\n     }\n@@ -348,6 +351,8 @@ build_typeid (tree exp)\n \n       exp = build3 (COND_EXPR, TREE_TYPE (exp), cond, exp, bad);\n     }\n+  else\n+    mark_type_use (initial_expr);\n \n   return exp;\n }\n@@ -546,6 +551,8 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n       /* If T is a pointer type, v shall be an rvalue of a pointer to\n \t complete class type, and the result is an rvalue of type T.  */\n \n+      expr = mark_rvalue_use (expr);\n+\n       if (TREE_CODE (exprtype) != POINTER_TYPE)\n \t{\n \t  errstr = _(\"source is not a pointer\");\n@@ -564,6 +571,8 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n     }\n   else\n     {\n+      expr = mark_lvalue_use (expr);\n+\n       exprtype = build_reference_type (exprtype);\n \n       /* T is a reference type, v shall be an lvalue of a complete class"}, {"sha": "f47a758191bd75c658ca259d230d6703faaa5ffb", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -610,6 +610,13 @@ finish_expr_stmt (tree expr)\n \t{\n \t  if (warn_sequence_point)\n \t    verify_sequence_points (expr);\n+\t  if (TREE_CODE (expr) != MODIFY_EXPR)\n+\t    /* Expr is not being 'used' here, otherwise we whould have\n+\t       called mark_{rl}value_use use here, which would have in turn\n+\t       called mark_exp_read. Rather, we call mark_exp_read directly\n+\t       to avoid some warnings when\n+\t        -Wunused-but-set-{variable,parameter} is in effect.  */\n+\t    mark_exp_read (expr);\n \t  expr = convert_to_void (expr, \"statement\", tf_warning_or_error);\n \t}\n       else if (!type_dependent_expression_p (expr))\n@@ -1238,6 +1245,8 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t     otherwise we'll get an error.  Gross, but ...  */\n \t  STRIP_NOPS (operand);\n \n+\t  operand = mark_lvalue_use (operand);\n+\n \t  if (!lvalue_or_else (operand, lv_asm, tf_warning_or_error))\n \t    operand = error_mark_node;\n \n@@ -3182,6 +3191,8 @@ finish_typeof (tree expr)\n       return type;\n     }\n \n+  expr = mark_type_use (expr);\n+\n   type = unlowered_expr_type (expr);\n \n   if (!type || type == unknown_type_node)\n@@ -4859,6 +4870,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n         case PARM_DECL:\n         case RESULT_DECL:\n         case TEMPLATE_PARM_INDEX:\n+\t  expr = mark_type_use (expr);\n           type = TREE_TYPE (expr);\n           break;\n \n@@ -4867,6 +4879,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n           break;\n \n         case COMPONENT_REF:\n+\t  mark_type_use (expr);\n           type = is_bitfield_expr_with_lowered_type (expr);\n           if (!type)\n             type = TREE_TYPE (TREE_OPERAND (expr, 1));"}, {"sha": "67bbd600af739554b9d77f2d0eb85bd7234a0b46", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -551,6 +551,8 @@ rvalue (tree expr)\n   if (error_operand_p (expr))\n     return expr;\n \n+  expr = mark_rvalue_use (expr);\n+\n   /* [basic.lval]\n \n      Non-class rvalues always have cv-unqualified types.  */"}, {"sha": "c601539636fd75497b8d18c6df52edb5c35252fe", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -1631,6 +1631,8 @@ cxx_sizeof_expr (tree e, tsubst_flags_t complain)\n       && DECL_TEMPLATE_INSTANTIATION (e))\n     instantiate_decl (e, /*defer_ok*/true, /*expl_inst_mem*/false);\n \n+  e = mark_type_use (e);\n+\n   if (TREE_CODE (e) == COMPONENT_REF\n       && TREE_CODE (TREE_OPERAND (e, 1)) == FIELD_DECL\n       && DECL_C_BIT_FIELD (TREE_OPERAND (e, 1)))\n@@ -1686,6 +1688,8 @@ cxx_alignof_expr (tree e, tsubst_flags_t complain)\n       return e;\n     }\n \n+  e = mark_type_use (e);\n+\n   if (TREE_CODE (e) == VAR_DECL)\n     t = size_int (DECL_ALIGN_UNIT (e));\n   else if (TREE_CODE (e) == COMPONENT_REF\n@@ -1835,7 +1839,9 @@ unlowered_expr_type (const_tree exp)\n    in an rvalue context: the lvalue-to-rvalue, array-to-pointer, and\n    function-to-pointer conversions.  In addition, manifest constants\n    are replaced by their values, and bitfield references are converted\n-   to their declared types.\n+   to their declared types. Note that this function does not perform the\n+   lvalue-to-rvalue conversion for class types. If you need that conversion\n+   to for class types, then you probably need to use force_rvalue.\n \n    Although the returned value is being used as an rvalue, this\n    function does not wrap the returned expression in a\n@@ -1852,6 +1858,8 @@ decay_conversion (tree exp)\n   if (type == error_mark_node)\n     return error_mark_node;\n \n+  exp = mark_rvalue_use (exp);\n+\n   exp = resolve_nondeduced_context (exp);\n   if (type_unknown_p (exp))\n     {\n@@ -1976,6 +1984,8 @@ perform_integral_promotions (tree expr)\n   tree type;\n   tree promoted_type;\n \n+  expr = mark_rvalue_use (expr);\n+\n   /* [conv.prom]\n \n      If the bitfield has an enumerated type, it is treated as any\n@@ -4807,6 +4817,8 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n       if (val != 0)\n \treturn val;\n \n+      arg = mark_lvalue_use (arg);\n+\n       /* Increment or decrement the real part of the value,\n \t and don't change the imaginary part.  */\n       if (TREE_CODE (TREE_TYPE (arg)) == COMPLEX_TYPE)\n@@ -4940,6 +4952,8 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \n       argtype = lvalue_type (arg);\n \n+      arg = mark_lvalue_use (arg);\n+\n       if (TREE_CODE (arg) == OFFSET_REF)\n \tgoto offset_ref;\n \n@@ -8042,3 +8056,4 @@ lvalue_or_else (tree ref, enum lvalue_use use, tsubst_flags_t complain)\n \n   return win;\n }\n+"}, {"sha": "36eea3df92cc7fa89b8032b4422665a4b1bb4a86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -1,3 +1,40 @@\n+2010-04-22  Jakub Jelinek <jakub@redhat.com>\n+\t    Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c/18624\n+\t* g++.dg/warn/Wunused-7.C: Add dg-warning.\n+\t* g++.dg/template/sfinae16.C: Likewise.\n+\t* gcc.dg/Wunused-var-1.c: Moved to...\n+\t* c-c++-common/Wunused-var-1.c: ...here. New test.\n+\t* gcc.dg/Wunused-var-2.c: Moved to...\n+\t* c-c++-common/Wunused-var-2.c: ...here. New test.\n+\t* gcc.dg/Wunused-var-3.c: Moved to...\n+\t* c-c++-common/Wunused-var-3.c: ...here. New test.\n+\t* gcc.dg/Wunused-var-4.c: Moved to...\n+\t* gcc.dg/Wunused-var-1.c: ... here.\n+\t* gcc.dg/Wunused-var-5.c: Moved to...\n+\t* c-c++-common/Wunused-var-4.c: ...here. New test.\n+\t* gcc.dg/Wunused-var-7.c: Moved to...\n+\t* c-c++-common/Wunused-var-5.c: ...here. New test.\n+\t* gcc.dg/Wunused-var-6.c: Moved to...\n+\t* gcc.dg/Wunused-var-2.c: ... here.\n+\t* c-c++-common/Wunused-var-1.c: New test.\n+\t* c-c++-common/Wunused-var-2.c: New test.\n+\t* c-c++-common/Wunused-var-3.c: New test.\n+\t* c-c++-common/Wunused-var-4.c: New test.\n+\t* c-c++-common/Wunused-var-5.c: New test.\n+\t* g++.dg/warn/Wunused-var-1.C: New test.\n+\t* g++.dg/warn/Wunused-var-2.C: New test.\n+\t* g++.dg/warn/Wunused-var-3.C: New test.\n+\t* g++.dg/warn/Wunused-var-4.C: New test.\n+\t* g++.dg/warn/Wunused-var-5.C: New test.\n+\t* g++.dg/warn/Wunused-var-6.C: New test.\n+\t* g++.dg/warn/Wunused-var-7.C: New test.\n+\t* g++.dg/warn/Wunused-var-8.C: New test.\n+\t* g++.dg/warn/Wunused-parm-1.C: New test.\n+\t* g++.dg/warn/Wunused-parm-2.C: New test.\n+\t* g++.dg/warn/Wunused-parm-3.C: New test.\n+\n 2010-05-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/43985"}, {"sha": "ef8f6d4546a0c0a848dbf519dc0ece1dc4436e08", "filename": "gcc/testsuite/c-c++-common/Wunused-var-1.c", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-1.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,179 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+void\n+f1 (void)\n+{\n+  int a;\t/* { dg-warning \"set but not used\" } */\n+  int b;\n+  int c;\n+  c = 1;\n+  a = b = c;\n+}\n+\n+void\n+f2 (int x)\n+{\n+  int a;\t/* { dg-warning \"set but not used\" } */\n+  int b;\n+  int c;\t/* { dg-warning \"set but not used\" } */\n+  c = (a = x, b = x);\n+}\n+\n+int\n+f3 (int x)\n+{\n+  int a;\n+  return a = x;\n+}\n+\n+int\n+f4 (int x)\n+{\n+  int a;\n+  a = x;\n+  return a;\n+}\n+\n+void\n+f5 (int x)\n+{\n+  int a[2];\t/* { dg-warning \"set but not used\" } */\n+  int b;\n+  int *c, d[2];\n+  c = d;\n+  b = x;\n+  a[b] = 1;\n+  c[b] = 1;\n+}\n+\n+int\n+f6 (int x)\n+{\n+  int a[2];\n+  int b;\n+  b = x;\n+  a[b] = 1;\n+  return a[b];\n+}\n+\n+void\n+f7 (int x, int *p)\n+{\n+  int *a[2];\n+  a[x] = p;\n+  a[x][x] = x;\n+}\n+\n+struct S { int i; };\n+\n+void\n+f8 (void)\n+{\n+  struct S s;\t/* { dg-warning \"set but not used\" } */\n+  s.i = 6;\n+}\n+\n+int\n+f9 (void)\n+{\n+  struct S s;\n+  s.i = 6;\n+  return s.i;\n+}\n+\n+struct S\n+f10 (void)\n+{\n+  struct S s;\n+  s.i = 6;\n+  return s;\n+}\n+\n+extern int foo11 (int *);\n+\n+void\n+f11 (void)\n+{\n+  int a[2];\n+  foo11 (a);\n+}\n+\n+void\n+f12 (void)\n+{\n+  int a;\n+  a = 1;\n+  a;\t/* { dg-warning \"no effect\" } */\n+}\n+\n+void\n+f13 (void (*x) (void))\n+{\n+  void (*a) (void);\n+  a = x;\n+  a ();\n+}\n+\n+void\n+f14 (void (*x) (void))\n+{\n+  void (*a) (void);\t/* { dg-warning \"set but not used\" } */\n+  a = x;\n+}\n+\n+extern void foo15 (int *);\n+\n+void\n+f15 (void)\n+{\n+  int a[10];\n+  int *b = a + 2;\n+  foo15 (b);\n+}\n+\n+extern void foo16 (int **);\n+\n+void\n+f16 (void)\n+{\n+  int a[10];\n+  int *b[] = { a, a + 2 };\n+  foo16 (b);\n+}\n+\n+void\n+f17 (int x)\n+{\n+  long a;\t/* { dg-warning \"set but not used\" } */\n+  int b;\n+  a = b = x;\n+}\n+\n+void\n+f18 (int x)\n+{\n+  int a;\t/* { dg-warning \"set but not used\" } */\n+  int b;\n+  a = (char) (b = x);\n+}\n+\n+int\n+f19 (int x, int y, int z)\n+{\n+  int a;\n+  int b;\n+  a = x;\n+  b = y;\n+  return z ? a : b;\n+}\n+\n+int *\n+f20 (int x)\n+{\n+  static int a[] = { 3, 4, 5, 6 };\n+  static int b[] = { 4, 5, 6, 7 };\n+  static int c[] = { 5, 6, 7, 8 };\t/* { dg-warning \"set but not used\" } */\n+  c[1] = 1;\n+  return x ? a : b;\n+}"}, {"sha": "281825900b521844a27d83afeaef74829d2b8027", "filename": "gcc/testsuite/c-c++-common/Wunused-var-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-2.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+int\n+f1 (void)\n+{\n+  int c = ({\n+    int a;\n+    a = 1;\n+    a; });\n+  return c;\n+}\n+\n+void\n+f2 (void)\n+{\n+  int f;\n+  f = 0;\n+  __asm__ __volatile__ (\"\" : \"+r\" (f));\n+}"}, {"sha": "9b1fce77ad3ad49410084dcc6dae487ef742442e", "filename": "gcc/testsuite/c-c++-common/Wunused-var-3.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-3.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "previous_filename": "gcc/testsuite/gcc.dg/Wunused-var-3.c"}, {"sha": "d60c476a4c6076eb026a20baedad9a7c4163ce3d", "filename": "gcc/testsuite/c-c++-common/Wunused-var-4.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-4.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -14,9 +14,9 @@ f2 (void)\n   struct S { int i; } a;\n   int b[1];\n   a.i = 1;\n-  a.i;\t\t\t\t/* { dg-warning \"with no effect\" } */\n+  a.i;\t\t\t\t/* { dg-warning \"no effect\" } */\n   b[0] = 1;\n-  b[0];\t\t\t\t/* { dg-warning \"with no effect\" } */\n+  b[0];\t\t\t\t/* { dg-warning \"no effect\" } */\n }\n \n void", "previous_filename": "gcc/testsuite/gcc.dg/Wunused-var-7.c"}, {"sha": "747f58d04c090b1a432d9907d0d825308e583f1e", "filename": "gcc/testsuite/c-c++-common/Wunused-var-5.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-var-5.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "previous_filename": "gcc/testsuite/gcc.dg/Wunused-var-5.c"}, {"sha": "28a06d280d33c87767d79c14b2d2429d4603e744", "filename": "gcc/testsuite/g++.dg/template/sfinae16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae16.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -29,6 +29,6 @@ template<typename Rep>\n int main()\n {\n   duration<int> d0;\n-  duration<int> d1 = d0;\n+  duration<int> d1 = d0;\t// { dg-warning \"set but not used\" }\n }\n "}, {"sha": "6f5c23e95fd2611653d30b43c1d5a295a53ea815", "filename": "gcc/testsuite/g++.dg/warn/Wunused-7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-7.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -6,7 +6,7 @@ void func()\n   struct mybitfields {\n     unsigned int s_field:8;\n   };\n-  struct mybitfields s;\n+  struct mybitfields s;\t// { dg-warning \"set but not used\" }\n   s.s_field = 255;\n };\n "}, {"sha": "08bfaa66bbbb8ae9a121416d8968f61249147980", "filename": "gcc/testsuite/g++.dg/warn/Wunused-parm-1.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-1.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunused -W\" }\n+\n+long\n+f1 (unsigned long long x)\n+{\n+  unsigned long long a = 1;\n+  const union { unsigned long long l; unsigned int p[2]; } b = { x };\n+  const union { unsigned long long l; unsigned int p[2]; } c = { a };\n+  return b.p[0] + c.p[0];\n+}\n+\n+int\n+f2 (int x, int y)\n+{\n+  int a = 1;\n+  int b[] = { 1, 2, x, a, 3, 4 };\n+  return b[y];\n+}\n+\n+int\n+f3 (int a)\t// { dg-warning \"unused parameter\" }\n+{\n+  return 0;\n+}\n+\n+int\n+f4 (int a)\t// { dg-warning \"set but not used\" }\n+{\n+  a = 1;\n+  return 0;\n+}\n+\n+int\n+f5 (int a)\n+{\n+  a = 1;\n+  return a;\n+}\n+\n+int\n+f6 (int &a)\n+{\n+  return a;\n+}\n+\n+void\n+f7 (int &a)\n+{\n+  a = 1;\n+}\n+\n+struct S\n+{\n+  S (int i) : j(i) {}\n+  S (long i) : j(i + 1) {}\n+  int j;\n+};"}, {"sha": "d4276c0a2cd6be94e5cc4d5e081d0ba5495adc0e", "filename": "gcc/testsuite/g++.dg/warn/Wunused-parm-2.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-2.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunused -W\" }\n+\n+template <int N>\n+long\n+f1 (unsigned long long x)\n+{\n+  unsigned long long a = 1;\n+  const union { unsigned long long l; unsigned int p[2]; } b = { x };\n+  const union { unsigned long long l; unsigned int p[2]; } c = { a };\n+  return b.p[0] + c.p[0];\n+}\n+\n+template <int N>\n+int\n+f2 (int x, int y)\n+{\n+  int a = 1;\n+  int b[] = { 1, 2, x, a, 3, 4 };\n+  return b[y];\n+}\n+\n+template <int N>\n+int\n+f3 (int a)\t// { dg-warning \"unused parameter\" }\n+{\n+  return 0;\n+}\n+\n+template <int N>\n+int\n+f4 (int a)\t// { dg-warning \"set but not used\" }\n+{\n+  a = 1;\n+  return 0;\n+}\n+\n+template <int N>\n+int\n+f5 (int a)\n+{\n+  a = 1;\n+  return a;\n+}\n+\n+void\n+test ()\n+{\n+  (void) f1<0> (0);\n+  (void) f2<0> (0, 0);\n+  (void) f3<0> (0);\n+  (void) f4<0> (0);\n+  (void) f5<0> (0);\n+}"}, {"sha": "4d293f3cb522399cf1b304bce93751304c4cd194", "filename": "gcc/testsuite/g++.dg/warn/Wunused-parm-3.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-parm-3.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,69 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunused -W\" }\n+\n+#include <stdarg.h>\n+\n+struct A\n+{\n+  long a;\n+  A () : a (0) { }\n+  A (long x) : a (x) { }\n+  operator long () const { return a; }\n+  long operator- (const A& x) const { return a - x.a; }\n+};\n+\n+long\n+fn1 (A a)\n+{\n+  return a - A (0);\n+}\n+\n+struct B\n+{\n+  bool operator() (const int x, const int y) const throw() { return x < y; }\n+};\n+\n+template <typename T>\n+bool \n+fn2 (int x, int y, T z)\n+{\n+  return z (x, y);\n+}\n+\n+bool\n+fn3 (void)\n+{\n+  return fn2 (1, 2, B ());\n+}\n+\n+int\n+fn4 (va_list ap)\n+{\n+  return va_arg (ap, int);\n+}\n+\n+template <typename T>\n+T\n+fn5 (va_list ap)\n+{\n+  return va_arg (ap, T);\n+}\n+\n+int\n+fn6 (va_list ap)\n+{\n+  return fn5 <int> (ap);\n+}\n+\n+template <typename T>\n+int\n+fn7 (T ap)\n+{\n+  return va_arg (ap, int);\n+}\n+\n+int\n+fn8 (va_list ap)\n+{\n+  return fn7 (ap);\n+}"}, {"sha": "89c110b0ef757769caf59928d605701921e6debd", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-1.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-Wunused\" }\n+template <int> struct X { static const int s = 2; };\n+template <typename T> int f() { const int v = 2; return X<v+1>::s; }\n+template <typename T> int g() { const int v = 2; return X<v>::s; }\n+template <typename T> int h() { const int v = 2; return X<1 ? v : 0>::s; }\n+template int f<int>();\n+template int g<int>();\n+template int h<int>();"}, {"sha": "0b21ef11625715e1b068b49267159a7740004914", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-2.C", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-2.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,104 @@\n+// { dg-options \"-Wunused -W\" }\n+\n+extern void foo ();\n+\n+void\n+f1 ()\n+{\n+  try\n+    {\n+      foo ();\n+    }\n+  catch (int i)\n+    {\n+    }\n+  catch (double d)\n+    {\n+    }\n+}\n+\n+void\n+f2 (int x)\n+{\n+  int a = 0;\n+  x++;\n+  ++a;\n+}\n+\n+struct A\n+{\n+  bool foo () const { return true; }\n+};\n+\n+int\n+f3 ()\n+{\n+  A a;\n+  bool b = a.foo ();\n+  return b;\n+}\n+\n+struct B\n+{\n+  int i;\n+  B (int j);\n+};\n+\n+void\n+f4 ()\n+{\n+  B b (6);\n+}\n+\n+struct C\n+{\n+  int i;\n+  C (int j) : i (j) {}\n+};\n+\n+void\n+f5 ()\n+{\n+  C c (6);\n+}\n+\n+struct D\n+{\n+  int i;\n+  D (int j) : i (j) {}\n+  ~D ();\n+};\n+\n+void\n+f6 ()\n+{\n+  D d (6);\n+}\n+\n+int *f7 (int s)\n+{\n+  return new int[s];\n+}\n+\n+template <typename T>\n+T *f8 (int s)\n+{\n+  return new T[s];\n+}\n+\n+template int *f8<int> (int);\n+\n+void\n+f9 (char *p)\n+{\n+  delete p;\n+}\n+\n+template <typename T>\n+void\n+f10 (T *p)\n+{\n+  delete p;\n+}\n+\n+template void f10<char> (char *);"}, {"sha": "cd8931d71c92207a1f0099f76fbe4f87064cf23d", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-3.C", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-3.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,110 @@\n+// { dg-options \"-Wunused -W\" }\n+\n+#include <typeinfo>\n+#include <stdarg.h>\n+\n+void\n+f1 (int a, ...)\n+{\n+  va_list ap;\n+  va_start (ap, a);\n+  va_end (ap);\n+}\n+\n+int\n+f2 (int a, ...)\n+{\n+  va_list ap;\n+  va_start (ap, a);\n+  int i = va_arg (ap, int);\n+  va_end (ap);\n+  return i;\n+}\n+\n+struct A { int a; A (); virtual ~A (); };\n+struct B : virtual A { int b; };\n+\n+struct B *\n+f3 (struct A *a)\n+{\n+  return dynamic_cast <B *> (a);\n+}\n+\n+struct A *\n+f4 (struct B *a)\n+{\n+  return static_cast <A *> (a);\n+}\n+\n+struct A *\n+f5 (struct B *a)\n+{\n+  return reinterpret_cast <A *> (a);\n+}\n+\n+struct A *\n+f6 (const struct A *a)\n+{\n+  return const_cast <A *> (a);\n+}\n+\n+int\n+f7 (long a)\n+{\n+  return (int) a;\n+}\n+\n+int\n+f8 (long a)\n+{\n+  return int (a);\n+}\n+\n+struct C\n+{\n+  operator unsigned int() { return 42; }\n+};\n+\n+unsigned int\n+f9 ()\n+{\n+  C u;\n+  return u;\n+}\n+\n+struct D\n+{\n+  operator int & ();\n+  operator const int & () const;\n+};\n+\n+void foo (int &);\n+void foo (const int &);\n+\n+void\n+f10 ()\n+{\n+  const D x = D ();\n+  foo (x);\n+}\n+\n+int\n+f11 (int a)\n+{\n+  return typeid (a) == typeid (int);\n+}\n+\n+struct E\n+{\n+  int e () {return 0;}\n+};\n+\n+template <typename T>\n+int\n+f12 (E a)\n+{\n+  __decltype (a.e()) i;\n+  return i;\n+}\n+\n+template <> int f12<int> (E);"}, {"sha": "11ed7afea55eb83506c89e050e3e108ae5fa813b", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-4.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-4.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+struct S { int e; };\n+\n+int\n+f1 (void)\n+{\n+  int a;\n+  int b;\n+  int c;\n+  int d;\n+  S s;\n+  a = 1;\n+  b = 2;\n+  c = 3;\n+  d = 4;\n+  s.e = 5;\n+  __typeof (c) e;\t// { dg-warning \"set but not used\" }\n+  __decltype (d) f;\t// { dg-warning \"set but not used\" }\n+  __decltype (s.e) g;\t// { dg-warning \"set but not used\" }\n+  e = 1;\n+  f = 1;\n+  g = 1;\n+  return sizeof (a) + __alignof__ (b);\n+}\n+\n+template <int N>\n+int f2 (void)\n+{\n+  int a;\n+  int b;\n+  int c;\n+  int d;\n+  a = 1;\n+  b = 2;\n+  c = 3;\n+  d = 4;\n+  __typeof (c) e;\t// { dg-warning \"set but not used\" }\n+  __decltype (d) f;\t// { dg-warning \"set but not used\" }\n+  e = 1;\n+  f = 1;\n+  return sizeof (a) + __alignof__ (b);\n+}\n+\n+void\n+test (void)\n+{\n+  (void) f2<0> ();\n+}"}, {"sha": "7fcaa955c599fca4e87cc09f61a8f9bb19fa06b8", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-5.C", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-5.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,227 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunused\" }\n+\n+template <int N>\n+void\n+f1 (void)\n+{\n+  int a;\t// { dg-warning \"set but not used\" }\n+  int b;\n+  int c;\n+  c = 1;\n+  a = b = c;\n+}\n+\n+template <int N>\n+void\n+f2 (int x)\n+{\n+  int a;\t// { dg-warning \"set but not used\" }\n+  int b;\n+  int c;\t// { dg-warning \"set but not used\" }\n+  c = (a = x, b = x);\n+}\n+\n+template <int N>\n+int\n+f3 (int x)\n+{\n+  int a;\n+  return a = x;\n+}\n+\n+template <int N>\n+int\n+f4 (int x)\n+{\n+  int a;\n+  a = x;\n+  return a;\n+}\n+\n+template <int N>\n+void\n+f5 (int x)\n+{\n+  int a[2];\t// { dg-warning \"set but not used\" }\n+  int b;\n+  int *c, d[2];\n+  c = d;\n+  b = x;\n+  a[b] = 1;\n+  c[b] = 1;\n+}\n+\n+template <int N>\n+int\n+f6 (int x)\n+{\n+  int a[2];\n+  int b;\n+  b = x;\n+  a[b] = 1;\n+  return a[b];\n+}\n+\n+template <int N>\n+void\n+f7 (int x, int *p)\n+{\n+  int *a[2];\n+  a[x] = p;\n+  a[x][x] = x;\n+}\n+\n+struct S { int i; };\n+\n+template <int N>\n+void\n+f8 (void)\n+{\n+  struct S s;\t// { dg-warning \"set but not used\" }\n+  s.i = 6;\n+}\n+\n+template <int N>\n+int\n+f9 (void)\n+{\n+  struct S s;\n+  s.i = 6;\n+  return s.i;\n+}\n+\n+template <int N>\n+struct S\n+f10 (void)\n+{\n+  struct S s;\n+  s.i = 6;\n+  return s;\n+}\n+\n+extern int foo11 (int *);\n+\n+template <int N>\n+void\n+f11 (void)\n+{\n+  int a[2];\n+  foo11 (a);\n+}\n+\n+template <int N>\n+void\n+f12 (void)\n+{\n+  int a;\n+  a = 1;\n+  a;\t// { dg-warning \"statement has no effect\" }\n+}\n+\n+template <int N>\n+void\n+f13 (void (*x) (void))\n+{\n+  void (*a) (void);\n+  a = x;\n+  a ();\n+}\n+\n+template <int N>\n+void\n+f14 (void (*x) (void))\n+{\n+  void (*a) (void);\t// { dg-warning \"set but not used\" }\n+  a = x;\n+}\n+\n+extern void foo15 (int *);\n+\n+template <int N>\n+void\n+f15 (void)\n+{\n+  int a[10];\n+  int *b = a + 2;\n+  foo15 (b);\n+}\n+\n+extern void foo16 (int **);\n+\n+template <int N>\n+void\n+f16 (void)\n+{\n+  int a[10];\n+  int *b[] = { a, a + 2 };\n+  foo16 (b);\n+}\n+\n+template <int N>\n+void\n+f17 (int x)\n+{\n+  long a;\t// { dg-warning \"set but not used\" }\n+  int b;\n+  a = b = x;\n+}\n+\n+template <int N>\n+void\n+f18 (int x)\n+{\n+  int a;\t// { dg-warning \"set but not used\" }\n+  int b;\n+  a = (char) (b = x);\n+}\n+\n+template <int N>\n+int\n+f19 (int x, int y, int z)\n+{\n+  int a;\n+  int b;\n+  a = x;\n+  b = y;\n+  return z ? a : b;\n+}\n+\n+template <int N>\n+int *\n+f20 (int x)\n+{\n+  static int a[] = { 3, 4, 5, 6 };\n+  static int b[] = { 4, 5, 6, 7 };\n+  static int c[] = { 5, 6, 7, 8 };\t// { dg-warning \"set but not used\" }\n+  c[1] = 1;\n+  return x ? a : b;\n+}\n+\n+S s;\n+\n+void\n+test ()\n+{\n+  int i = 0;\n+  f1<0> ();\n+  f2<0> (0);\n+  (void) f3<0> (0);\n+  (void) f4<0> (0);\n+  f5<0> (0);\n+  (void) f6<0> (0);\n+  f7<0> (0, &i);\n+  f8<0> ();\n+  (void) f9<0> ();\n+  s = f10<0> ();\n+  f11<0> ();\n+  f12<0> ();\n+  f13<0> (f1<0>);\n+  f14<0> (f1<0>);\n+  f15<0> ();\n+  f16<0> ();\n+  f17<0> (0);\n+  f18<0> (0);\n+  (void) f19<0> (0, 0, 0);\n+  (void) f20<0> (0);\n+}"}, {"sha": "0fb8e5cac38f060a6243dcf57f668d7390b97d53", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-6.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-6.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunused\" }\n+\n+template <int N>\n+int\n+f1 (void)\n+{\n+  int c = ({\n+    int a;\n+    a = 1;\n+    a; });\n+  return c;\n+}\n+\n+template <int N>\n+void\n+f2 (void)\n+{\n+  int f;\n+  f = 0;\n+  __asm__ __volatile__ (\"\" : \"+r\" (f));\n+}\n+\n+void\n+test ()\n+{\n+  (void) f1<0> ();\n+  f2<0> ();\n+}"}, {"sha": "cf1b605c9aea90e71bb909ea47f61e0cc8af5e81", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-7.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-7.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunused\" }\n+\n+template <int N>\n+void\n+f1 (void)\n+{\n+  _Complex int a;\t// { dg-warning \"set but not used\" }\n+  _Complex double b;\t// { dg-warning \"set but not used\" }\n+  __real__ a = 1;\n+  __imag__ a = 2;\n+  __real__ b = 3.0;\n+  __imag__ b = 4.0;\n+}\n+\n+template <int N>\n+int\n+f2 (void)\n+{\n+  _Complex int a;\n+  _Complex double b;\n+  __real__ a = 1;\n+  __imag__ a = 2;\n+  __real__ b = 3.0;\n+  __imag__ b = 4.0;\n+  return __real__ a + __imag__ b;\n+}\n+\n+template <int N>\n+_Complex double\n+f3 (void)\n+{\n+  _Complex int a;\n+  _Complex double b;\n+  __real__ a = 1;\n+  __imag__ a = 2;\n+  __real__ b = 3.0;\n+  __imag__ b = 4.0;\n+  return a + b;\n+}\n+\n+void\n+test ()\n+{\n+  f1<0> ();\n+  (void) f2<0> ();\n+  (void) f3<0> ();\n+}"}, {"sha": "69fc6fb7918c13d17de1cb929961e38c32ebe069", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-8.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-8.C?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunused\" }\n+\n+template <int N>\n+void\n+f1 (void)\n+{\n+  extern int extvari;\n+  extvari = 1;\n+}\n+\n+int extvarj;\n+\n+template <int N>\n+void\n+f2 (void)\n+{\n+  extern int extvarj;\n+  extvarj = 1;\n+}\n+\n+static int extvark;\n+\n+template <int N>\n+void\n+f3 (void)\n+{\n+  extern int extvark;\n+  extvark = 1;\n+}\n+\n+template <int N>\n+int\n+f4 (void)\n+{\n+  return extvark;\n+}\n+\n+void\n+test ()\n+{\n+  f1<0> ();\n+  f2<0> ();\n+  f3<0> ();\n+  (void) f4<0> ();\n+}"}, {"sha": "d60dd70e57345a78167703a9720fcf052466dc61", "filename": "gcc/testsuite/gcc.dg/Wunused-var-1.c", "status": "modified", "additions": 13, "deletions": 166, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-1.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -1,179 +1,26 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wunused\" } */\n \n-void\n-f1 (void)\n-{\n-  int a;\t/* { dg-warning \"set but not used\" } */\n-  int b;\n-  int c;\n-  c = 1;\n-  a = b = c;\n-}\n-\n-void\n-f2 (int x)\n-{\n-  int a;\t/* { dg-warning \"set but not used\" } */\n-  int b;\n-  int c;\t/* { dg-warning \"set but not used\" } */\n-  c = (a = x, b = x);\n-}\n-\n int\n-f3 (int x)\n-{\n-  int a;\n-  return a = x;\n-}\n-\n-int\n-f4 (int x)\n-{\n-  int a;\n-  a = x;\n-  return a;\n-}\n-\n-void\n-f5 (int x)\n-{\n-  int a[2];\t/* { dg-warning \"set but not used\" } */\n-  int b;\n-  int *c, d[2];\n-  c = d;\n-  b = x;\n-  a[b] = 1;\n-  c[b] = 1;\n-}\n-\n-int\n-f6 (int x)\n-{\n-  int a[2];\n-  int b;\n-  b = x;\n-  a[b] = 1;\n-  return a[b];\n-}\n-\n-void\n-f7 (int x, int *p)\n-{\n-  int *a[2];\n-  a[x] = p;\n-  a[x][x] = x;\n-}\n-\n-struct S { int i; };\n-\n-void\n-f8 (void)\n-{\n-  struct S s;\t/* { dg-warning \"set but not used\" } */\n-  s.i = 6;\n-}\n-\n-int\n-f9 (void)\n-{\n-  struct S s;\n-  s.i = 6;\n-  return s.i;\n-}\n-\n-struct S\n-f10 (void)\n-{\n-  struct S s;\n-  s.i = 6;\n-  return s;\n-}\n-\n-extern int foo11 (int *);\n-\n-void\n-f11 (void)\n-{\n-  int a[2];\n-  foo11 (a);\n-}\n-\n-void\n-f12 (void)\n+f1 (void)\n {\n   int a;\n+  int foo (void)\n+  {\n+    return a;\n+  }\n   a = 1;\n-  a;\t/* { dg-warning \"statement with no effect\" } */\n+  return foo ();\n }\n \n void\n-f13 (void (*x) (void))\n-{\n-  void (*a) (void);\n-  a = x;\n-  a ();\n-}\n-\n-void\n-f14 (void (*x) (void))\n-{\n-  void (*a) (void);\t/* { dg-warning \"set but not used\" } */\n-  a = x;\n-}\n-\n-extern void foo15 (int *);\n-\n-void\n-f15 (void)\n-{\n-  int a[10];\n-  int *b = a + 2;\n-  foo15 (b);\n-}\n-\n-extern void foo16 (int **);\n-\n-void\n-f16 (void)\n-{\n-  int a[10];\n-  int *b[] = { a, a + 2 };\n-  foo16 (b);\n-}\n-\n-void\n-f17 (int x)\n-{\n-  long a;\t/* { dg-warning \"set but not used\" } */\n-  int b;\n-  a = b = x;\n-}\n-\n-void\n-f18 (int x)\n+f2 (void)\n {\n   int a;\t/* { dg-warning \"set but not used\" } */\n-  int b;\n-  a = (char) (b = x);\n-}\n-\n-int\n-f19 (int x, int y, int z)\n-{\n-  int a;\n-  int b;\n-  a = x;\n-  b = y;\n-  return z ? a : b;\n-}\n-\n-int *\n-f20 (int x)\n-{\n-  static int a[] = { 3, 4, 5, 6 };\n-  static int b[] = { 4, 5, 6, 7 };\n-  static int c[] = { 5, 6, 7, 8 };\t/* { dg-warning \"set but not used\" } */\n-  c[1] = 1;\n-  return x ? a : b;\n+  void foo (void)\n+  {\n+    a = 2;\n+  }\n+  a = 1;\n+  foo ();\n }"}, {"sha": "b5a22f86545c44f4f62fb513fe565e5ad5f0914b", "filename": "gcc/testsuite/gcc.dg/Wunused-var-2.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03a904b5a683713f848ef028aef63e0cfd16c4eb/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-2.c?ref=03a904b5a683713f848ef028aef63e0cfd16c4eb", "patch": "@@ -4,17 +4,16 @@\n int\n f1 (void)\n {\n-  int c = ({\n-    int a;\n-    a = 1;\n-    a; });\n-  return c;\n-}\n-\n-void\n-f2 (void)\n-{\n-  int f;\n-  f = 0;\n-  __asm__ __volatile__ (\"\" : \"+r\" (f));\n+  int a;\n+  int b;\n+  int c;\n+  int d;\n+  int e;\n+  a = 1;\n+  b = 2;\n+  c = 3;\n+  d = 4;\n+  e = 5;\n+  return sizeof (a) + ((__typeof (b)) 1) + __alignof__ (c)\n+         + __builtin_choose_expr (1, d, e);\n }"}, {"sha": "d60dd70e57345a78167703a9720fcf052466dc61", "filename": "gcc/testsuite/gcc.dg/Wunused-var-4.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8930a046c5d5c80f990eef73c278b4c124b6f4/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8930a046c5d5c80f990eef73c278b4c124b6f4/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-4.c?ref=7d8930a046c5d5c80f990eef73c278b4c124b6f4", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-Wunused\" } */\n-\n-int\n-f1 (void)\n-{\n-  int a;\n-  int foo (void)\n-  {\n-    return a;\n-  }\n-  a = 1;\n-  return foo ();\n-}\n-\n-void\n-f2 (void)\n-{\n-  int a;\t/* { dg-warning \"set but not used\" } */\n-  void foo (void)\n-  {\n-    a = 2;\n-  }\n-  a = 1;\n-  foo ();\n-}"}, {"sha": "b5a22f86545c44f4f62fb513fe565e5ad5f0914b", "filename": "gcc/testsuite/gcc.dg/Wunused-var-6.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8930a046c5d5c80f990eef73c278b4c124b6f4/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8930a046c5d5c80f990eef73c278b4c124b6f4/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-6.c?ref=7d8930a046c5d5c80f990eef73c278b4c124b6f4", "patch": "@@ -1,19 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-Wunused\" } */\n-\n-int\n-f1 (void)\n-{\n-  int a;\n-  int b;\n-  int c;\n-  int d;\n-  int e;\n-  a = 1;\n-  b = 2;\n-  c = 3;\n-  d = 4;\n-  e = 5;\n-  return sizeof (a) + ((__typeof (b)) 1) + __alignof__ (c)\n-         + __builtin_choose_expr (1, d, e);\n-}"}]}