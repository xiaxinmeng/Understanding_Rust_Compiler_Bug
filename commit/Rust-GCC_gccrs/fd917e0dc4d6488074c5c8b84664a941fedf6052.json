{"sha": "fd917e0dc4d6488074c5c8b84664a941fedf6052", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5MTdlMGRjNGQ2NDg4MDc0YzVjOGI4NDY2NGE5NDFmZWRmNjA1Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2004-03-05T22:38:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-03-05T22:38:24Z"}, "message": "tree.h (TYPE_HASH): Use TYPE_UID.\n\n        * tree.h (TYPE_HASH): Use TYPE_UID.\n        (TREE_HASH): New macro with old definition of TYPE_HASH.\n        * tree.c (build_type_attribute_variant): Use iterative_hash_object.\n        (build_array_type, build_function_type): Likewise.\n        (build_method_type_directly): Likewise.\n        (build_offset_type, build_complex_type): Likewise.\n        (type_hash_list, attribute_hash_list): Likewise. Now static.\n        * except.c: s/TYPE_HASH/TREE_HASH/.\n        * cp/tree.c (list_hash_pieces): s/TYPE_HASH/TREE_HASH/.\n\nFrom-SVN: r78993", "tree": {"sha": "9d36ad37b0e9bce1412800770f06296f53a67ce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d36ad37b0e9bce1412800770f06296f53a67ce6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd917e0dc4d6488074c5c8b84664a941fedf6052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd917e0dc4d6488074c5c8b84664a941fedf6052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd917e0dc4d6488074c5c8b84664a941fedf6052", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd917e0dc4d6488074c5c8b84664a941fedf6052/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "822e895cafce43ff26bab0d4a0e5ed7166a10488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822e895cafce43ff26bab0d4a0e5ed7166a10488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822e895cafce43ff26bab0d4a0e5ed7166a10488"}], "stats": {"total": 121, "additions": 78, "deletions": 43}, "files": [{"sha": "95ac3d75af7fee507373309acdcbc57b715c2ba2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd917e0dc4d6488074c5c8b84664a941fedf6052", "patch": "@@ -1,3 +1,14 @@\n+2004-03-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.h (TYPE_HASH): Use TYPE_UID.\n+\t(TREE_HASH): New macro with old definition of TYPE_HASH.\n+\t* tree.c (build_type_attribute_variant): Use iterative_hash_object.\n+\t(build_array_type, build_function_type): Likewise.\n+\t(build_method_type_directly): Likewise.\n+\t(build_offset_type, build_complex_type): Likewise.\n+\t(type_hash_list, attribute_hash_list): Likewise. Now static.\n+\t* except.c: s/TYPE_HASH/TREE_HASH/.\n+\n 2004-03-05  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/xtensa.c (function_arg): Handle 16-byte aligned args."}, {"sha": "ae6da109e6b45df763aef3fad8c196b760293fec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd917e0dc4d6488074c5c8b84664a941fedf6052", "patch": "@@ -1,3 +1,7 @@\n+2004-03-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (list_hash_pieces): s/TYPE_HASH/TREE_HASH/.\n+\n 2004-03-04  Geoffrey Keating  <geoffk@apple.com>\n \n \t* decl.c (grokfndecl): Update old incorrect comment."}, {"sha": "290317ee3c662f5bc4517912da2a0780fedbe5bb", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=fd917e0dc4d6488074c5c8b84664a941fedf6052", "patch": "@@ -692,14 +692,14 @@ list_hash_pieces (tree purpose, tree value, tree chain)\n   hashval_t hashcode = 0;\n   \n   if (chain)\n-    hashcode += TYPE_HASH (chain);\n+    hashcode += TREE_HASH (chain);\n   \n   if (value)\n-    hashcode += TYPE_HASH (value);\n+    hashcode += TREE_HASH (value);\n   else\n     hashcode += 1007;\n   if (purpose)\n-    hashcode += TYPE_HASH (purpose);\n+    hashcode += TREE_HASH (purpose);\n   else\n     hashcode += 1009;\n   return hashcode;"}, {"sha": "d290a60ea5b7ade5fcd796084e82256918ce40a1", "filename": "gcc/except.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=fd917e0dc4d6488074c5c8b84664a941fedf6052", "patch": "@@ -1411,7 +1411,7 @@ static hashval_t\n t2r_hash (const void *pentry)\n {\n   tree entry = (tree) pentry;\n-  return TYPE_HASH (TREE_PURPOSE (entry));\n+  return TREE_HASH (TREE_PURPOSE (entry));\n }\n \n static void\n@@ -1420,7 +1420,7 @@ add_type_for_runtime (tree type)\n   tree *slot;\n \n   slot = (tree *) htab_find_slot_with_hash (type_to_runtime_map, type,\n-\t\t\t\t\t    TYPE_HASH (type), INSERT);\n+\t\t\t\t\t    TREE_HASH (type), INSERT);\n   if (*slot == NULL)\n     {\n       tree runtime = (*lang_eh_runtime_type) (type);\n@@ -1434,7 +1434,7 @@ lookup_type_for_runtime (tree type)\n   tree *slot;\n \n   slot = (tree *) htab_find_slot_with_hash (type_to_runtime_map, type,\n-\t\t\t\t\t    TYPE_HASH (type), NO_INSERT);\n+\t\t\t\t\t    TREE_HASH (type), NO_INSERT);\n \n   /* We should have always inserted the data earlier.  */\n   return TREE_VALUE (*slot);\n@@ -1465,7 +1465,7 @@ static hashval_t\n ttypes_filter_hash (const void *pentry)\n {\n   const struct ttypes_filter *entry = (const struct ttypes_filter *) pentry;\n-  return TYPE_HASH (entry->t);\n+  return TREE_HASH (entry->t);\n }\n \n /* Compare ENTRY with DATA (both struct ttypes_filter) for a @TTypes\n@@ -1492,20 +1492,20 @@ ehspec_filter_hash (const void *pentry)\n   tree list;\n \n   for (list = entry->t; list ; list = TREE_CHAIN (list))\n-    h = (h << 5) + (h >> 27) + TYPE_HASH (TREE_VALUE (list));\n+    h = (h << 5) + (h >> 27) + TREE_HASH (TREE_VALUE (list));\n   return h;\n }\n \n-/* Add TYPE to cfun->eh->ttype_data, using TYPES_HASH to speed\n-   up the search.  Return the filter value to be used.  */\n+/* Add TYPE (which may be NULL) to cfun->eh->ttype_data, using TYPES_HASH\n+   to speed up the search.  Return the filter value to be used.  */\n \n static int\n add_ttypes_entry (htab_t ttypes_hash, tree type)\n {\n   struct ttypes_filter **slot, *n;\n \n   slot = (struct ttypes_filter **)\n-    htab_find_slot_with_hash (ttypes_hash, type, TYPE_HASH (type), INSERT);\n+    htab_find_slot_with_hash (ttypes_hash, type, TREE_HASH (type), INSERT);\n \n   if ((n = *slot) == NULL)\n     {"}, {"sha": "9710ed25d6e38ade2eb4a8d27af9f9629cd87521", "filename": "gcc/tree.c", "status": "modified", "additions": 46, "deletions": 29, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fd917e0dc4d6488074c5c8b84664a941fedf6052", "patch": "@@ -107,6 +107,8 @@ static hashval_t type_hash_hash (const void *);\n static void print_type_hash_statistics (void);\n static void finish_vector_type (tree);\n static int type_hash_marked_p (const void *);\n+static unsigned int type_hash_list (tree, hashval_t);\n+static unsigned int attribute_hash_list (tree, hashval_t);\n \n tree global_trees[TI_MAX];\n tree integer_types[itk_none];\n@@ -2723,8 +2725,9 @@ build_type_attribute_variant (tree ttype, tree attribute)\n {\n   if (! attribute_list_equal (TYPE_ATTRIBUTES (ttype), attribute))\n     {\n-      unsigned int hashcode;\n+      hashval_t hashcode = 0;\n       tree ntype;\n+      enum tree_code code = TREE_CODE (ttype);\n \n       ntype = copy_node (ttype);\n \n@@ -2737,23 +2740,32 @@ build_type_attribute_variant (tree ttype, tree attribute)\n       TYPE_NEXT_VARIANT (ntype) = 0;\n       set_type_quals (ntype, TYPE_UNQUALIFIED);\n \n-      hashcode = (TYPE_HASH (TREE_CODE (ntype))\n-\t\t  + TYPE_HASH (TREE_TYPE (ntype))\n-\t\t  + attribute_hash_list (attribute));\n+      hashcode = iterative_hash_object (code, hashcode);\n+      if (TREE_TYPE (ntype))\n+\thashcode = iterative_hash_object (TYPE_HASH (TREE_TYPE (ntype)),\n+\t\t\t\t\t  hashcode);\n+      hashcode = attribute_hash_list (attribute, hashcode);\n \n       switch (TREE_CODE (ntype))\n \t{\n \tcase FUNCTION_TYPE:\n-\t  hashcode += TYPE_HASH (TYPE_ARG_TYPES (ntype));\n+\t  hashcode = type_hash_list (TYPE_ARG_TYPES (ntype), hashcode);\n \t  break;\n \tcase ARRAY_TYPE:\n-\t  hashcode += TYPE_HASH (TYPE_DOMAIN (ntype));\n+\t  hashcode = iterative_hash_object (TYPE_HASH (TYPE_DOMAIN (ntype)),\n+\t\t\t\t\t    hashcode);\n \t  break;\n \tcase INTEGER_TYPE:\n-\t  hashcode += TYPE_HASH (TYPE_MAX_VALUE (ntype));\n+\t  hashcode = iterative_hash_object\n+\t    (TREE_INT_CST_LOW (TYPE_MAX_VALUE (ntype)), hashcode);\n+\t  hashcode = iterative_hash_object\n+\t    (TREE_INT_CST_HIGH (TYPE_MAX_VALUE (ntype)), hashcode);\n \t  break;\n \tcase REAL_TYPE:\n-\t  hashcode += TYPE_HASH (TYPE_PRECISION (ntype));\n+\t  {\n+\t    unsigned int precision = TYPE_PRECISION (ntype);\n+\t    hashcode = iterative_hash_object (precision, hashcode);\n+\t  }\n \t  break;\n \tdefault:\n \t  break;\n@@ -3054,13 +3066,14 @@ build_type_copy (tree type)\n    of the individual types.  */\n \n unsigned int\n-type_hash_list (tree list)\n+type_hash_list (tree list, hashval_t hashcode)\n {\n-  unsigned int hashcode;\n   tree tail;\n \n-  for (hashcode = 0, tail = list; tail; tail = TREE_CHAIN (tail))\n-    hashcode += TYPE_HASH (TREE_VALUE (tail));\n+  for (tail = list; tail; tail = TREE_CHAIN (tail))\n+    if (TREE_VALUE (tail) != error_mark_node)\n+      hashcode = iterative_hash_object (TYPE_HASH (TREE_VALUE (tail)),\n+\t\t\t\t\thashcode);\n \n   return hashcode;\n }\n@@ -3109,7 +3122,7 @@ type_hash_hash (const void *item)\n    If one is found, return it.  Otherwise return 0.  */\n \n tree\n-type_hash_lookup (unsigned int hashcode, tree type)\n+type_hash_lookup (hashval_t hashcode, tree type)\n {\n   struct type_hash *h, in;\n \n@@ -3130,7 +3143,7 @@ type_hash_lookup (unsigned int hashcode, tree type)\n    for a type TYPE whose hash code is HASHCODE.  */\n \n void\n-type_hash_add (unsigned int hashcode, tree type)\n+type_hash_add (hashval_t hashcode, tree type)\n {\n   struct type_hash *h;\n   void **loc;\n@@ -3210,14 +3223,14 @@ print_type_hash_statistics (void)\n    by adding the hash codes of the individual attributes.  */\n \n unsigned int\n-attribute_hash_list (tree list)\n+attribute_hash_list (tree list, hashval_t hashcode)\n {\n-  unsigned int hashcode;\n   tree tail;\n \n-  for (hashcode = 0, tail = list; tail; tail = TREE_CHAIN (tail))\n+  for (tail = list; tail; tail = TREE_CHAIN (tail))\n     /* ??? Do we want to add in TREE_VALUE too? */\n-    hashcode += TYPE_HASH (TREE_PURPOSE (tail));\n+    hashcode = iterative_hash_object\n+      (IDENTIFIER_HASH_VALUE (TREE_PURPOSE (tail)), hashcode);\n   return hashcode;\n }\n \n@@ -3943,7 +3956,7 @@ tree\n build_array_type (tree elt_type, tree index_type)\n {\n   tree t;\n-  unsigned int hashcode;\n+  hashval_t hashcode = 0;\n \n   if (TREE_CODE (elt_type) == FUNCTION_TYPE)\n     {\n@@ -3965,7 +3978,8 @@ build_array_type (tree elt_type, tree index_type)\n       return t;\n     }\n \n-  hashcode = TYPE_HASH (elt_type) + TYPE_HASH (index_type);\n+  hashcode = iterative_hash_object (TYPE_HASH (elt_type), hashcode);\n+  hashcode = iterative_hash_object (TYPE_HASH (index_type), hashcode);\n   t = type_hash_canon (hashcode, t);\n \n   if (!COMPLETE_TYPE_P (t))\n@@ -3998,7 +4012,7 @@ tree\n build_function_type (tree value_type, tree arg_types)\n {\n   tree t;\n-  unsigned int hashcode;\n+  hashval_t hashcode = 0;\n \n   if (TREE_CODE (value_type) == FUNCTION_TYPE)\n     {\n@@ -4012,7 +4026,8 @@ build_function_type (tree value_type, tree arg_types)\n   TYPE_ARG_TYPES (t) = arg_types;\n \n   /* If we already have such a type, use the old one and free this one.  */\n-  hashcode = TYPE_HASH (value_type) + type_hash_list (arg_types);\n+  hashcode = iterative_hash_object (TYPE_HASH (value_type), hashcode);\n+  hashcode = type_hash_list (arg_types, hashcode);\n   t = type_hash_canon (hashcode, t);\n \n   if (!COMPLETE_TYPE_P (t))\n@@ -4058,7 +4073,7 @@ build_method_type_directly (tree basetype,\n {\n   tree t;\n   tree ptype;\n-  int hashcode;\n+  int hashcode = 0;\n \n   /* Make a node of the sort we want.  */\n   t = make_node (METHOD_TYPE);\n@@ -4074,8 +4089,9 @@ build_method_type_directly (tree basetype,\n \n   /* If we already have such a type, use the old one and free this one.\n      Note that it also frees up the above cons cell if found.  */\n-  hashcode = TYPE_HASH (basetype) + TYPE_HASH (rettype) +\n-    type_hash_list (argtypes);\n+  hashcode = iterative_hash_object (TYPE_HASH (basetype), hashcode);\n+  hashcode = iterative_hash_object (TYPE_HASH (rettype), hashcode);\n+  hashcode = type_hash_list (argtypes, hashcode);\n \n   t = type_hash_canon (hashcode, t);\n \n@@ -4109,7 +4125,7 @@ tree\n build_offset_type (tree basetype, tree type)\n {\n   tree t;\n-  unsigned int hashcode;\n+  hashval_t hashcode = 0;\n \n   /* Make a node of the sort we want.  */\n   t = make_node (OFFSET_TYPE);\n@@ -4118,7 +4134,8 @@ build_offset_type (tree basetype, tree type)\n   TREE_TYPE (t) = type;\n \n   /* If we already have such a type, use the old one and free this one.  */\n-  hashcode = TYPE_HASH (basetype) + TYPE_HASH (type);\n+  hashcode = iterative_hash_object (TYPE_HASH (basetype), hashcode);\n+  hashcode = iterative_hash_object (TYPE_HASH (type), hashcode);\n   t = type_hash_canon (hashcode, t);\n \n   if (!COMPLETE_TYPE_P (t))\n@@ -4133,7 +4150,7 @@ tree\n build_complex_type (tree component_type)\n {\n   tree t;\n-  unsigned int hashcode;\n+  hashval_t hashcode;\n \n   /* Make a node of the sort we want.  */\n   t = make_node (COMPLEX_TYPE);\n@@ -4142,7 +4159,7 @@ build_complex_type (tree component_type)\n   set_type_quals (t, TYPE_QUALS (component_type));\n \n   /* If we already have such a type, use the old one and free this one.  */\n-  hashcode = TYPE_HASH (component_type);\n+  hashcode = iterative_hash_object (TYPE_HASH (component_type), 0);\n   t = type_hash_canon (hashcode, t);\n \n   if (!COMPLETE_TYPE_P (t))"}, {"sha": "bb36c9263fe6b3e73899f05de5f3757759561f77", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd917e0dc4d6488074c5c8b84664a941fedf6052/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fd917e0dc4d6488074c5c8b84664a941fedf6052", "patch": "@@ -387,7 +387,11 @@ extern void tree_operand_check_failed (int, enum tree_code,\n \n /* Here is how primitive or already-canonicalized types' hash codes\n    are made.  */\n-#define TYPE_HASH(TYPE) ((size_t) (TYPE) & 0777777)\n+#define TYPE_HASH(TYPE) (TYPE_UID (TYPE))\n+\n+/* A simple hash function for an arbitrary tree node.  This must not be\n+   used in hash tables which are saved to a PCH.  */\n+#define TREE_HASH(NODE) ((size_t) (NODE) & 0777777)\n \n /* Nodes are chained together for many purposes.\n    Types are chained together to record them for being output to the debugger\n@@ -2179,7 +2183,7 @@ extern tree array_type_nelts (tree);\n extern tree value_member (tree, tree);\n extern tree purpose_member (tree, tree);\n extern tree binfo_member (tree, tree);\n-extern unsigned int attribute_hash_list (tree);\n+\n extern int attribute_list_equal (tree, tree);\n extern int attribute_list_contained (tree, tree);\n extern int tree_int_cst_equal (tree, tree);\n@@ -2881,7 +2885,6 @@ extern int type_list_equal (tree, tree);\n extern int chain_member (tree, tree);\n extern tree type_hash_lookup (unsigned int, tree);\n extern void type_hash_add (unsigned int, tree);\n-extern unsigned int type_hash_list (tree);\n extern int simple_cst_list_equal (tree, tree);\n extern void dump_tree_statistics (void);\n extern void expand_function_end (void);"}]}