{"sha": "a2cd7b455464e927c5bb7e0391d7fe9ed4d2f42d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJjZDdiNDU1NDY0ZTkyN2M1YmI3ZTAzOTFkN2ZlOWVkNGQyZjQyZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T22:32:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T22:32:17Z"}, "message": "(decl_attributes): Move the attribute recognition and rejection here from c-parse.in.\n\n(decl_attributes): Move the attribute recognition and rejection here from\nc-parse.in.\n(decl_attributes): Use VALID_MACHINE_ATTRIBUTE macro.\n\nFrom-SVN: r7256", "tree": {"sha": "19ff8050da6b2180fb1600e31bd883b25ae62674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19ff8050da6b2180fb1600e31bd883b25ae62674"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2cd7b455464e927c5bb7e0391d7fe9ed4d2f42d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2cd7b455464e927c5bb7e0391d7fe9ed4d2f42d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2cd7b455464e927c5bb7e0391d7fe9ed4d2f42d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2cd7b455464e927c5bb7e0391d7fe9ed4d2f42d/comments", "author": null, "committer": null, "parents": [{"sha": "0c7f6f66c40de5a9f948753aa278f340798b5784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7f6f66c40de5a9f948753aa278f340798b5784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c7f6f66c40de5a9f948753aa278f340798b5784"}], "stats": {"total": 94, "additions": 61, "deletions": 33}, "files": [{"sha": "a499f9766d92c813e899333005a5a12099f1f221", "filename": "gcc/c-common.c", "status": "modified", "additions": 61, "deletions": 33, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2cd7b455464e927c5bb7e0391d7fe9ed4d2f42d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2cd7b455464e927c5bb7e0391d7fe9ed4d2f42d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a2cd7b455464e927c5bb7e0391d7fe9ed4d2f42d", "patch": "@@ -206,10 +206,16 @@ void\n decl_attributes (decl, attributes)\n      tree decl, attributes;\n {\n-  tree a;\n+  tree a, name, args, type, new_attr;\n+\n+  type = TREE_TYPE (decl);\n+\n+  new_attr = TYPE_ATTRIBUTES (type);\n \n   for (a = attributes; a; a = TREE_CHAIN (a))\n-    if (TREE_VALUE (a) == get_identifier (\"packed\"))\n+    if (!(name = TREE_VALUE (a)))\n+\tcontinue;\n+    else if (name == get_identifier (\"packed\"))\n       {\n \tif (TREE_CODE (decl) == FIELD_DECL)\n \t  DECL_PACKED (decl) = 1;\n@@ -222,8 +228,6 @@ decl_attributes (decl, attributes)\n     else if (TREE_VALUE (a) == get_identifier (\"noreturn\")\n \t     || TREE_VALUE (a) == get_identifier (\"volatile\"))\n       {\n-\ttree type = TREE_TYPE (decl);\n-\n \tif (TREE_CODE (decl) == FUNCTION_DECL)\n \t  TREE_THIS_VOLATILE (decl) = 1;\n \telse if (TREE_CODE (type) == POINTER_TYPE\n@@ -238,8 +242,6 @@ decl_attributes (decl, attributes)\n       }\n     else if (TREE_VALUE (a) == get_identifier (\"const\"))\n       {\n-\ttree type = TREE_TYPE (decl);\n-\n \tif (TREE_CODE (decl) == FUNCTION_DECL)\n \t  TREE_READONLY (decl) = 1;\n \telse if (TREE_CODE (type) == POINTER_TYPE\n@@ -251,23 +253,43 @@ decl_attributes (decl, attributes)\n \telse\n \t  warning_with_decl (decl, \"`const' attribute ignored\");\n       }\n-    else if (TREE_VALUE (a) != 0\n-\t     && TREE_CODE (TREE_VALUE (a)) == TREE_LIST\n-\t     && TREE_PURPOSE (TREE_VALUE (a)) == get_identifier (\"mode\"))\n+    else if (TREE_CODE (name) != TREE_LIST)\n+     {\n+#ifdef VALID_MACHINE_ATTRIBUTE\n+\tif (VALID_MACHINE_ATTRIBUTE (type, new_attr, name))\n+\t  { \n+\t    register tree atlist;\n+\n+\t    for (atlist = new_attr; atlist; atlist = TREE_CHAIN (atlist))\n+\t       if (TREE_VALUE (atlist) == name)\n+\t\t  goto found_attr;\n+\n+\t    new_attr = tree_cons (NULL_TREE, name, new_attr);\n+found_attr:;\n+\t  }\n+\telse\n+#endif\n+\t  warning (\"`%s' attribute directive ignored\",\n+\t\t   IDENTIFIER_POINTER (name));\n+     }\n+    else if ( args = TREE_CHAIN(name),\n+\t      !strcmp (IDENTIFIER_POINTER (name = TREE_PURPOSE (name)), \"mode\")\n+\t      && list_length (args) == 1\n+\t      && TREE_CODE (TREE_VALUE (args)) == STRING_CST)\n       {\n \tint i;\n \tchar *specified_name\n-\t  = TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (a)));\n+\t  = TREE_STRING_POINTER (TREE_VALUE (args));\n \n \t/* Give this decl a type with the specified mode.  */\n \tfor (i = 0; i < NUM_MACHINE_MODES; i++)\n \t  if (!strcmp (specified_name, GET_MODE_NAME (i)))\n \t    {\n-\t      tree type\n-\t\t= type_for_mode (i, TREE_UNSIGNED (TREE_TYPE (decl)));\n-\t      if (type != 0)\n+\t      tree typefm\n+\t\t= type_for_mode (i, TREE_UNSIGNED (type));\n+\t      if (typefm != 0)\n \t\t{\n-\t\t  TREE_TYPE (decl) = type;\n+\t\t  TREE_TYPE (decl) = type = typefm;\n \t\t  DECL_SIZE (decl) = 0;\n \t\t  layout_decl (decl, 0);\n \t\t}\n@@ -278,9 +300,9 @@ decl_attributes (decl, attributes)\n \tif (i == NUM_MACHINE_MODES)\n \t  error_with_decl (decl, \"unknown machine mode `%s'\", specified_name);\n       }\n-    else if (TREE_VALUE (a) != 0\n-\t     && TREE_CODE (TREE_VALUE (a)) == TREE_LIST\n-\t     && TREE_PURPOSE (TREE_VALUE (a)) == get_identifier (\"section\"))\n+    else if (!strcmp (IDENTIFIER_POINTER (name), \"section\")\n+\t     && list_length (args) == 1\n+\t     && TREE_CODE (TREE_VALUE (args)) == STRING_CST)\n       {\n #ifdef ASM_OUTPUT_SECTION_NAME\n \tif (TREE_CODE (decl) == FUNCTION_DECL || TREE_CODE (decl) == VAR_DECL)\n@@ -292,11 +314,11 @@ decl_attributes (decl, attributes)\n \t       a previous declaration.  Ensure they match.  */\n \t    else if (DECL_SECTION_NAME (decl) != NULL_TREE\n \t\t     && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n-\t\t\t\tTREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (a)))) != 0)\n+\t\t\t\tTREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (args)))) != 0)\n \t      error_with_decl (decl,\n \t\t\t       \"section of `%s' conflicts with previous declaration\");\n \t    else\n-\t      DECL_SECTION_NAME (decl) = TREE_VALUE (TREE_VALUE (a));\n+\t      DECL_SECTION_NAME (decl) = TREE_VALUE (TREE_VALUE (args));\n \t  }\n \telse\n \t  error_with_decl (decl,\n@@ -305,11 +327,11 @@ decl_attributes (decl, attributes)\n \terror_with_decl (decl, \"section attributes are not supported for this target\");\n #endif\n       }\n-    else if (TREE_VALUE (a) != 0\n-\t     && TREE_CODE (TREE_VALUE (a)) == TREE_LIST\n-\t     && TREE_PURPOSE (TREE_VALUE (a)) == get_identifier (\"aligned\"))\n+    else if (!strcmp (IDENTIFIER_POINTER (name), \"aligned\")\n+\t     && list_length (args) == 1\n+\t     && TREE_CODE (TREE_VALUE (args)) == INTEGER_CST)\n       {\n-\ttree align_expr = TREE_VALUE (TREE_VALUE (a));\n+\ttree align_expr = TREE_VALUE (args);\n \tint align;\n \n \t/* Strip any NOPs of any kind.  */\n@@ -337,14 +359,15 @@ decl_attributes (decl, attributes)\n \telse\n \t  DECL_ALIGN (decl) = align;\n       }\n-    else if (TREE_VALUE (a) != 0\n-\t     && TREE_CODE (TREE_VALUE (a)) == TREE_LIST\n-\t     && TREE_PURPOSE (TREE_VALUE (a)) == get_identifier (\"format\"))\n+    else if (!strcmp (IDENTIFIER_POINTER (name), \"format\")\n+\t     && list_length (args) == 3\n+\t     && TREE_CODE (TREE_VALUE (args)) == IDENTIFIER_NODE\n+\t     && TREE_CODE (TREE_VALUE (TREE_CHAIN (args))) == INTEGER_CST\n+\t     && TREE_CODE (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (args)))) == INTEGER_CST )\n       {\n-        tree list = TREE_VALUE (TREE_VALUE (a));\n-        tree format_type = TREE_PURPOSE (list);\n-\ttree format_num_expr = TREE_PURPOSE (TREE_VALUE (list));\n-\ttree first_arg_num_expr = TREE_VALUE (TREE_VALUE (list));\n+        tree format_type = TREE_VALUE (args);\n+\ttree format_num_expr = TREE_VALUE (TREE_CHAIN (args));\n+\ttree first_arg_num_expr = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (args)));\n \tint format_num;\n \tint first_arg_num;\n \tint is_scan;\n@@ -358,9 +381,9 @@ decl_attributes (decl, attributes)\n \t    continue;\n \t  }\n \t\n-\tif (format_type == get_identifier (\"printf\"))\n+\tif (!strcmp (IDENTIFIER_POINTER (format_type), \"printf\"))\n \t  is_scan = 0;\n-\telse if (format_type == get_identifier (\"scanf\"))\n+\telse if (!strcmp (IDENTIFIER_POINTER (format_type), \"scanf\"))\n \t  is_scan = 1;\n \telse\n \t  {\n@@ -400,7 +423,7 @@ decl_attributes (decl, attributes)\n \t/* If a parameter list is specified, verify that the format_num\n \t   argument is actually a string, in case the format attribute\n \t   is in error.  */\n-\targument = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+\targument = TYPE_ARG_TYPES (type);\n \tif (argument)\n \t  {\n \t    for (arg_num = 1; ; ++arg_num)\n@@ -435,6 +458,11 @@ decl_attributes (decl, attributes)\n \trecord_function_format (DECL_NAME (decl), DECL_ASSEMBLER_NAME (decl),\n \t\t\t\tis_scan, format_num, first_arg_num);\n       }\n+    else\n+\twarning (\"`%s' attribute directive ignored\",\n+                       IDENTIFIER_POINTER (name));\n+\n+  TREE_TYPE (decl) = build_type_attribute_variant (type, new_attr);\n }\n \f\n /* Check a printf/fprintf/sprintf/scanf/fscanf/sscanf format against"}]}