{"sha": "561f7fc72cbe475f1661e457731bb7d3b99f82a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxZjdmYzcyY2JlNDc1ZjE2NjFlNDU3NzMxYmI3ZDNiOTlmODJhMQ==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-02-14T02:55:42Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-02-14T02:55:42Z"}, "message": "re PR c++/55582 ([C++11] Unable to define string user-defined literal without leading underscore.)\n\ngcc/libcpp/\n\n2013-02-13  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR c++/55582\n\t* libcpp/lex.c (lex_raw_string): Allow string literal with suffix\n\tbeginning with 's' to be parsed as a C++11 user-defined literal.\n\n\ngcc/testsuite/\n\n2013-02-13  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR c++/55582\n\t* g++.dg/cpp0x/udlit-string-literal.h: New.\n\t* g++.dg/cpp0x/udlit-string-literal.C: New.\n\nFrom-SVN: r196041", "tree": {"sha": "835d414e4efbc7f21d5a4f16cd4e2d5968134664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/835d414e4efbc7f21d5a4f16cd4e2d5968134664"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/561f7fc72cbe475f1661e457731bb7d3b99f82a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561f7fc72cbe475f1661e457731bb7d3b99f82a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561f7fc72cbe475f1661e457731bb7d3b99f82a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561f7fc72cbe475f1661e457731bb7d3b99f82a1/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94504fd4840c1d67e96d4cf4759d21de3398ef0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94504fd4840c1d67e96d4cf4759d21de3398ef0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94504fd4840c1d67e96d4cf4759d21de3398ef0c"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "e4f70ceeef0218ee73ed5ac5bdc482bb996b47ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561f7fc72cbe475f1661e457731bb7d3b99f82a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561f7fc72cbe475f1661e457731bb7d3b99f82a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=561f7fc72cbe475f1661e457731bb7d3b99f82a1", "patch": "@@ -1,3 +1,9 @@\n+2013-02-13  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/55582\n+\t* g++.dg/cpp0x/udlit-string-literal.h: New.\n+\t* g++.dg/cpp0x/udlit-string-literal.C: New.\n+\n 2013-02-13  Sriraman Tallam  <tmsriram@google.com>\n \n \t* g++.dg/ext/mv12-aux.C: Add directives to match mv12.C."}, {"sha": "f83bef68ad33f2114b5e3269cf3e338e7b99bba5", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-string-literal.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561f7fc72cbe475f1661e457731bb7d3b99f82a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561f7fc72cbe475f1661e457731bb7d3b99f82a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.C?ref=561f7fc72cbe475f1661e457731bb7d3b99f82a1", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-effective-target stdint_types }\n+// PR c++/55582\n+\n+#include \"udlit-string-literal.h\"\n+\n+using namespace my_string_literals;\n+\n+decltype(\"Hello, World!\"s) s;\n+decltype(u8\"Hello, World!\"s) s8;\n+decltype(L\"Hello, World!\"s) ws;\n+decltype(u\"Hello, World!\"s) s16;\n+decltype(U\"Hello, World!\"s) s32;"}, {"sha": "e61034ec4ef5e807f816ee2fa69b150b708253ec", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-string-literal.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561f7fc72cbe475f1661e457731bb7d3b99f82a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561f7fc72cbe475f1661e457731bb7d3b99f82a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-string-literal.h?ref=561f7fc72cbe475f1661e457731bb7d3b99f82a1", "patch": "@@ -0,0 +1,22 @@\n+#pragma GCC system_header\n+\n+#include <string>\n+\n+inline namespace my_string_literals\n+{\n+  std::string\n+  operator\"\" s(const char* str, std::size_t len)\n+  { return std::string{str, len}; }\n+\n+  std::wstring\n+  operator\"\" s(const wchar_t* str, std::size_t len)\n+  { return std::wstring{str, len}; }\n+\n+  std::u16string\n+  operator\"\" s(const char16_t* str, std::size_t len)\n+  { return std::u16string{str, len}; }\n+\n+  std::u32string\n+  operator\"\" s(const char32_t* str, std::size_t len)\n+  { return std::u32string{str, len}; }\n+}"}, {"sha": "22451a2103f71dbbf284c748b13f815304bdde90", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561f7fc72cbe475f1661e457731bb7d3b99f82a1/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561f7fc72cbe475f1661e457731bb7d3b99f82a1/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=561f7fc72cbe475f1661e457731bb7d3b99f82a1", "patch": "@@ -1,3 +1,9 @@\n+2013-02-13  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/55582\n+\t* libcpp/lex.c (lex_raw_string): Allow string literal with suffix\n+\tbeginning with 's' to be parsed as a C++11 user-defined literal.\n+\n 2013-01-14  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years."}, {"sha": "976d9e8b0eb72f761ee394112ecc9de704276ab6", "filename": "libcpp/lex.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561f7fc72cbe475f1661e457731bb7d3b99f82a1/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561f7fc72cbe475f1661e457731bb7d3b99f82a1/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=561f7fc72cbe475f1661e457731bb7d3b99f82a1", "patch": "@@ -1561,8 +1561,10 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \t from inttypes.h, we generate a warning and treat the ud-suffix as a\n \t separate preprocessing token.  This approach is under discussion by\n \t the standards committee, and has been adopted as a conforming\n-\t extension by other front ends such as clang. */\n-      if (ISALPHA (*cur))\n+\t extension by other front ends such as clang.\n+         A special exception is made for the suffix 's' which will be\n+\t standardized as a user-defined literal suffix for strings.  */\n+      if (ISALPHA (*cur) && *cur != 's')\n \t{\n \t  /* Raise a warning, but do not consume subsequent tokens.  */\n \t  if (CPP_OPTION (pfile, warn_literal_suffix))\n@@ -1572,7 +1574,7 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \t\t\t\t   \"a space between literal and identifier\");\n \t}\n       /* Grab user defined literal suffix.  */\n-      else if (*cur == '_')\n+      else if (ISIDST (*cur))\n \t{\n \t  type = cpp_userdef_string_add_type (type);\n \t  ++cur;\n@@ -1692,8 +1694,10 @@ lex_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n \t from inttypes.h, we generate a warning and treat the ud-suffix as a\n \t separate preprocessing token.  This approach is under discussion by\n \t the standards committee, and has been adopted as a conforming\n-\t extension by other front ends such as clang. */\n-      if (ISALPHA (*cur))\n+\t extension by other front ends such as clang.\n+         A special exception is made for the suffix 's' which will be\n+\t standardized as a user-defined literal suffix for strings.  */\n+      if (ISALPHA (*cur) && *cur != 's')\n \t{\n \t  /* Raise a warning, but do not consume subsequent tokens.  */\n \t  if (CPP_OPTION (pfile, warn_literal_suffix))\n@@ -1703,7 +1707,7 @@ lex_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n \t\t\t\t   \"a space between literal and identifier\");\n \t}\n       /* Grab user defined literal suffix.  */\n-      else if (*cur == '_')\n+      else if (ISIDST (*cur))\n \t{\n \t  type = cpp_userdef_char_add_type (type);\n \t  type = cpp_userdef_string_add_type (type);"}]}