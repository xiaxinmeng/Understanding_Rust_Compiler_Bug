{"sha": "8d3681f9148b7aca65cb6f654d288799fc3efccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQzNjgxZjkxNDhiN2FjYTY1Y2I2ZjY1NGQyODg3OTlmYzNlZmNjZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2009-07-11T00:03:07Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-07-11T00:03:07Z"}, "message": "re PR fortran/33197 (Fortran 2008: math functions)\n\n2009-07-09  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/33197\n        * check.c (gfc_check_fn_rc2008): New function.\n        * intrinsic.h (gfc_check_fn_rc2008): New prototype.\n        * intrinsic.c (add_functions): Add complex tan, cosh, sinh,\n        and tanh.\n\n2009-07-09  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/33197\n        * gfortran.dg/complex_intrinsic_3.f90: New test.\n        * gfortran.dg/complex_intrinsic_4.f90: New test.\n\nFrom-SVN: r149503", "tree": {"sha": "4746f04967a90fa0d6480825a4967b65d5b8a994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4746f04967a90fa0d6480825a4967b65d5b8a994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d3681f9148b7aca65cb6f654d288799fc3efccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3681f9148b7aca65cb6f654d288799fc3efccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3681f9148b7aca65cb6f654d288799fc3efccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3681f9148b7aca65cb6f654d288799fc3efccf/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98ac6510fa40424a33df9cd8fabb0cdc18e147e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ac6510fa40424a33df9cd8fabb0cdc18e147e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ac6510fa40424a33df9cd8fabb0cdc18e147e7"}], "stats": {"total": 136, "additions": 116, "deletions": 20}, "files": [{"sha": "ec4502fc0f4ab673662505569ac8cbf57058d0fd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8d3681f9148b7aca65cb6f654d288799fc3efccf", "patch": "@@ -1,3 +1,11 @@\n+2009-07-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/33197\n+\t* check.c (gfc_check_fn_rc2008): New function.\n+\t* intrinsic.h (gfc_check_fn_rc2008): New prototype.\n+\t* intrinsic.c (add_functions): Add complex tan, cosh, sinh,\n+\tand tanh.\n+\n 2009-07-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/39334"}, {"sha": "8f949d2c093fecb831eb55df9cac64fbc5ed5ff6", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=8d3681f9148b7aca65cb6f654d288799fc3efccf", "patch": "@@ -1211,6 +1211,23 @@ gfc_check_fn_rc (gfc_expr *a)\n }\n \n \n+gfc_try\n+gfc_check_fn_rc2008 (gfc_expr *a)\n+{\n+  if (real_or_complex_check (a, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (a->ts.type == BT_COMPLEX\n+      && gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: COMPLEX argument '%s' \"\n+\t\t\t \"argument of '%s' intrinsic at %L\",\n+\t\t\t gfc_current_intrinsic_arg[0], gfc_current_intrinsic,\n+\t\t\t &a->where) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n gfc_try\n gfc_check_fnum (gfc_expr *unit)\n {"}, {"sha": "a918ddf7d2311d5cd6a83c09485443c59d1cb502", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=8d3681f9148b7aca65cb6f654d288799fc3efccf", "patch": "@@ -1440,7 +1440,7 @@ add_functions (void)\n   make_generic (\"cos\", GFC_ISYM_COS, GFC_STD_F77);\n \n   add_sym_1 (\"cosh\", GFC_ISYM_COSH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n-\t     gfc_check_fn_r, gfc_simplify_cosh, gfc_resolve_cosh,\n+\t     gfc_check_fn_rc2008, gfc_simplify_cosh, gfc_resolve_cosh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dcosh\", GFC_ISYM_COSH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n@@ -2405,7 +2405,7 @@ add_functions (void)\n   make_generic (\"sin\", GFC_ISYM_SIN, GFC_STD_F77);\n \n   add_sym_1 (\"sinh\", GFC_ISYM_SINH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n-\t     gfc_check_fn_r, gfc_simplify_sinh, gfc_resolve_sinh,\n+\t     gfc_check_fn_rc2008, gfc_simplify_sinh, gfc_resolve_sinh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dsinh\", GFC_ISYM_SINH,CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n@@ -2488,7 +2488,7 @@ add_functions (void)\n   make_generic (\"system\", GFC_ISYM_SYSTEM, GFC_STD_GNU);\n \n   add_sym_1 (\"tan\", GFC_ISYM_TAN, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n-\t     gfc_check_fn_r, gfc_simplify_tan, gfc_resolve_tan,\n+\t     gfc_check_fn_rc2008, gfc_simplify_tan, gfc_resolve_tan,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dtan\", GFC_ISYM_TAN, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,\n@@ -2498,7 +2498,7 @@ add_functions (void)\n   make_generic (\"tan\", GFC_ISYM_TAN, GFC_STD_F77);\n \n   add_sym_1 (\"tanh\", GFC_ISYM_TANH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F77,\n-\t     gfc_check_fn_r, gfc_simplify_tanh, gfc_resolve_tanh,\n+\t     gfc_check_fn_rc2008, gfc_simplify_tanh, gfc_resolve_tanh,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dtanh\", GFC_ISYM_TANH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dd, GFC_STD_F77,"}, {"sha": "1e2fbd7a0277b988174705314d75bcc32a59ad0d", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=8d3681f9148b7aca65cb6f654d288799fc3efccf", "patch": "@@ -64,6 +64,7 @@ gfc_try gfc_check_fn_c (gfc_expr *);\n gfc_try gfc_check_fn_d (gfc_expr *);\n gfc_try gfc_check_fn_r (gfc_expr *);\n gfc_try gfc_check_fn_rc (gfc_expr *);\n+gfc_try gfc_check_fn_rc2008 (gfc_expr *);\n gfc_try gfc_check_fnum (gfc_expr *);\n gfc_try gfc_check_hostnm (gfc_expr *);\n gfc_try gfc_check_huge (gfc_expr *);"}, {"sha": "34783b4a5e04cf246e9d807c099c73595ac27aa6", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=8d3681f9148b7aca65cb6f654d288799fc3efccf", "patch": "@@ -2676,7 +2676,7 @@ Inverse function: @ref{ACOS}\n @code{COSH(X)} computes the hyperbolic cosine of @var{X}.\n \n @item @emph{Standard}:\n-Fortran 77 and later\n+Fortran 77 and later, for a complex argument Fortran 2008 or later\n \n @item @emph{Class}:\n Elemental function\n@@ -2686,14 +2686,14 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be @code{REAL}.\n+@item @var{X} @tab The type shall be @code{REAL} or @code{COMPLEX}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{REAL} and it is positive\n-(@math{ \\cosh (x) \\geq 0 }).  For a @code{REAL} argument @var{X},\n-@math{ \\cosh (x) \\geq 1 }.\n-The return value is of the same kind as @var{X}.\n+The return value has same type and kind as @var{X}. If @var{X} is\n+complex, the imaginary part of the result is in radians. If @var{X}\n+is @code{REAL}, the return value has a lower bound of one,\n+@math{\\cosh (x) \\geq 1}.\n \n @item @emph{Example}:\n @smallexample\n@@ -9820,7 +9820,7 @@ end program test_sin\n @code{SINH(X)} computes the hyperbolic sine of @var{X}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, for a complex argument Fortran 2008 or later\n \n @item @emph{Class}:\n Elemental function\n@@ -9830,11 +9830,11 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be @code{REAL}.\n+@item @var{X} @tab The type shall be @code{REAL} or @code{COMPLEX}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{REAL}.\n+The return value has same type and kind as @var{X}.\n \n @item @emph{Example}:\n @smallexample\n@@ -10508,7 +10508,7 @@ END PROGRAM\n @code{TAN(X)} computes the tangent of @var{X}.\n \n @item @emph{Standard}:\n-Fortran 77 and later\n+Fortran 77 and later, for a complex argument Fortran 2008 or later\n \n @item @emph{Class}:\n Elemental function\n@@ -10518,12 +10518,11 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be @code{REAL}.\n+@item @var{X} @tab The type shall be @code{REAL} or @code{COMPLEX}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{REAL}.  The kind type parameter is\n-the same as @var{X}.\n+The return value has same type and kind as @var{X}.\n \n @item @emph{Example}:\n @smallexample\n@@ -10558,7 +10557,7 @@ end program test_tan\n @code{TANH(X)} computes the hyperbolic tangent of @var{X}.\n \n @item @emph{Standard}:\n-Fortran 77 and later\n+Fortran 77 and later, for a complex argument Fortran 2008 or later\n \n @item @emph{Class}:\n Elemental function\n@@ -10568,11 +10567,13 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be @code{REAL}.\n+@item @var{X} @tab The type shall be @code{REAL} or @code{COMPLEX}.\n @end multitable\n \n @item @emph{Return value}:\n-The return value is of type @code{REAL} and lies in the range\n+The return value has same type and kind as @var{X}. If @var{X} is\n+complex, the imaginary part of the result is in radians. If @var{X}\n+is @code{REAL}, the return value lies in the range\n @math{ - 1 \\leq tanh(x) \\leq 1 }.\n \n @item @emph{Example}:"}, {"sha": "5cd90abb48f0b15f16ddcd92c0bd9d7439d91382", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d3681f9148b7aca65cb6f654d288799fc3efccf", "patch": "@@ -1,3 +1,9 @@\n+2009-07-11  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/33197\n+\t* gfortran.dg/complex_intrinsic_3.f90: New test.\n+\t* gfortran.dg/complex_intrinsic_4.f90: New test.\n+\n 2009-07-10  David Daney  <ddaney@caviumnetworks.com>\n \n \tPR target/39079"}, {"sha": "f0d12d6ef1488058fb97917a056eb96d203093c5", "filename": "gcc/testsuite/gfortran.dg/complex_intrinsic_3.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ftestsuite%2Fgfortran.dg%2Fcomplex_intrinsic_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ftestsuite%2Fgfortran.dg%2Fcomplex_intrinsic_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcomplex_intrinsic_3.f90?ref=8d3681f9148b7aca65cb6f654d288799fc3efccf", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+!\n+! PR fortran/33197\n+!\n+! Fortran 2008 complex trigonometric functions: tan, cosh, sinh, tanh\n+!\n+implicit none\n+real(4), parameter :: pi  = 2*acos(0.0_4)\n+real(8), parameter :: pi8 = 2*acos(0.0_8)\n+real(4), parameter :: eps  = 10*epsilon(0.0_4)\n+real(8), parameter :: eps8 = 10*epsilon(0.0_8)\n+complex(4), volatile :: z0_0  = cmplx(0.0_4, 0.0_4, kind=4)\n+complex(4), volatile :: z1_1  = cmplx(1.0_4, 1.0_4, kind=4)\n+complex(4), volatile :: zp_p  = cmplx(pi,    pi,    kind=4)\n+complex(8), volatile :: z80_0 = cmplx(0.0_8, 0.0_8, kind=8)\n+complex(8), volatile :: z81_1 = cmplx(1.0_8, 1.0_8, kind=8)\n+complex(8), volatile :: z8p_p = cmplx(pi8,   pi8,   kind=8)\n+\n+if (abs(tan(z0_0)  - cmplx(0.0,0.0,4)) > eps) call abort()\n+if (abs(tan(z1_1)  - cmplx(0.27175257,1.0839232,4)) > eps) call abort()\n+if (abs(tan(z80_0) - cmplx(0.0_8,0.0_8,8)) > eps8) call abort()\n+if (abs(tan(z81_1) - cmplx(0.27175258531951174_8,1.0839233273386946_8,8)) > eps8) call abort()\n+\n+if (abs(cosh(z0_0)  - cmplx(1.0,0.0,4)) > eps) call abort()\n+if (abs(cosh(z1_1)  - cmplx(0.83372992,0.98889768,4)) > eps) call abort()\n+if (abs(cosh(z80_0) - cmplx(1.0_8,0.0_8,8)) > eps8) call abort()\n+if (abs(cosh(z81_1) - cmplx(0.83373002513114913_8,0.98889770576286506_8,8)) > eps8) call abort()\n+\n+if (abs(sinh(z0_0)  - cmplx(0.0,0.0,4)) > eps) call abort()\n+if (abs(sinh(z1_1)  - cmplx(0.63496387,1.2984575,4)) > eps) call abort()\n+if (abs(sinh(z80_0) - cmplx(0.0_8,0.0_8,8)) > eps8) call abort()\n+if (abs(sinh(z81_1) - cmplx(0.63496391478473613_8,1.2984575814159773_8,8)) > eps8) call abort()\n+\n+if (abs(tanh(z0_0)  - cmplx(0.0,0.0,4)) > eps) call abort()\n+if (abs(tanh(z1_1)  - cmplx(1.0839232,0.27175257,4)) > eps) call abort()\n+if (abs(tanh(z80_0) - cmplx(0.0_8,0.0_8,8)) > eps8) call abort()\n+if (abs(tanh(z81_1) - cmplx(1.0839233273386946_8,0.27175258531951174_8,8)) > eps8) call abort()\n+\n+end"}, {"sha": "faef28f239894221d5a29a27eebc5b66a9bccdc7", "filename": "gcc/testsuite/gfortran.dg/complex_intrinsic_4.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ftestsuite%2Fgfortran.dg%2Fcomplex_intrinsic_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d3681f9148b7aca65cb6f654d288799fc3efccf/gcc%2Ftestsuite%2Fgfortran.dg%2Fcomplex_intrinsic_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcomplex_intrinsic_4.f90?ref=8d3681f9148b7aca65cb6f654d288799fc3efccf", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! PR fortran/33197\n+!\n+! Fortran 2008 complex trigonometric functions: tan, cosh, sinh, tanh\n+!\n+real :: r\n+complex :: z\n+r = -45.5\n+r = sin(r)\n+r = cos(r)\n+r = tan(r)\n+r = cosh(r)\n+r = sinh(r)\n+r = tanh(r)\n+z = 4.0\n+z = cos(z)\n+z = sin(z)\n+z = tan(z) ! { dg-error \"Fortran 2008: COMPLEX argument\" }\n+z = cosh(z)! { dg-error \"Fortran 2008: COMPLEX argument\" }\n+z = sinh(z)! { dg-error \"Fortran 2008: COMPLEX argument\" }\n+z = tanh(z)! { dg-error \"Fortran 2008: COMPLEX argument\" }\n+end"}]}