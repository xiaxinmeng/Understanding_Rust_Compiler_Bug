{"sha": "14ecca2eea820447afe3214ed635883fbc4244a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRlY2NhMmVlYTgyMDQ0N2FmZTMyMTRlZDYzNTg4M2ZiYzQyNDRhNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-30T11:25:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-30T11:25:24Z"}, "message": "ada-tree.h (TYPE_MAX_ALIGN): New macro.\n\n\t* gcc-interface/ada-tree.h (TYPE_MAX_ALIGN): New macro.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Do not set PACKED to -2.\n\tRemove obsolete code setting the alignment on some atomic types.\n\tWhen the type has no alignment but needs strict alignment and has a\n\tsize clause, compute a maximum alignment and set it on the type.\n\t(adjust_packed): Remove handling of -2 argument.  Deal with TYPE_ALIGN\n\tand TYPE_MAX_ALIGN directly.\n\t(gnat_to_gnu_field): Do not document -2 as argument.\n\t(components_to_record): Likewise.\n\t* gcc-interface/utils.c (finish_record_type): Do not bump alignment of\n\tthe record type beyond TYPE_MAX_ALIGN.  Reset the latter on exit.\n\n\t* gcc-interface/Makefile.in (PICFLAG_FOR_TARGET): Move around.\n\t(GNATLIBCFLAGS_FOR_C): Reformat.\n\t(GCC_CFLAGS): Delete.\n\nFrom-SVN: r231062", "tree": {"sha": "f39c21c5d4e4d43f3da54dd3ba8f3ce53a526182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f39c21c5d4e4d43f3da54dd3ba8f3ce53a526182"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14ecca2eea820447afe3214ed635883fbc4244a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ecca2eea820447afe3214ed635883fbc4244a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14ecca2eea820447afe3214ed635883fbc4244a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ecca2eea820447afe3214ed635883fbc4244a4/comments", "author": null, "committer": null, "parents": [{"sha": "6501d5fea036e5d7c4f5f8037f217b6e8d07a60d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6501d5fea036e5d7c4f5f8037f217b6e8d07a60d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6501d5fea036e5d7c4f5f8037f217b6e8d07a60d"}], "stats": {"total": 216, "additions": 150, "deletions": 66}, "files": [{"sha": "a90fa647b5f7c94019eb7480d1a248b05e5ed739", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=14ecca2eea820447afe3214ed635883fbc4244a4", "patch": "@@ -1,3 +1,21 @@\n+2015-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (TYPE_MAX_ALIGN): New macro.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Do not set PACKED to -2.\n+\tRemove obsolete code setting the alignment on some atomic types.\n+\tWhen the type has no alignment but needs strict alignment and has a\n+\tsize clause, compute a maximum alignment and set it on the type.\n+\t(adjust_packed): Remove handling of -2 argument.  Deal with TYPE_ALIGN\n+\tand TYPE_MAX_ALIGN directly.\n+\t(gnat_to_gnu_field): Do not document -2 as argument.\n+\t(components_to_record): Likewise.\n+\t* gcc-interface/utils.c (finish_record_type): Do not bump alignment of\n+\tthe record type beyond TYPE_MAX_ALIGN.  Reset the latter on exit.\n+\n+\t* gcc-interface/Makefile.in (PICFLAG_FOR_TARGET): Move around.\n+\t(GNATLIBCFLAGS_FOR_C): Reformat.\n+\t(GCC_CFLAGS): Delete.\n+\n 2015-11-29  Matthias Klose  <doko@ubuntu.com>\n \n \tPR ada/68564"}, {"sha": "3b27ae3659b6cadde6afdd2bedc6f0859bc6d099", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=14ecca2eea820447afe3214ed635883fbc4244a4", "patch": "@@ -111,13 +111,12 @@ NO_SIBLING_ADAFLAGS = -fno-optimize-sibling-calls\n NO_REORDER_ADAFLAGS = -fno-toplevel-reorder\n GNATLIBFLAGS = -W -Wall -gnatpg -nostdinc\n GNATLIBCFLAGS = -g -O2\n-PICFLAG_FOR_TARGET = @PICFLAG_FOR_TARGET@\n-\n # Pretend that _Unwind_GetIPInfo is available for the target by default.  This\n # should be autodetected during the configuration of libada and passed down to\n # here, but we need something for --disable-libada and hope for the best.\n-GNATLIBCFLAGS_FOR_C = -W -Wall $(GNATLIBCFLAGS) \\\n-\t-fexceptions -DIN_RTS -DHAVE_GETIPINFO\n+GNATLIBCFLAGS_FOR_C = \\\n+  -W -Wall $(GNATLIBCFLAGS) -fexceptions -DIN_RTS -DHAVE_GETIPINFO\n+PICFLAG_FOR_TARGET = @PICFLAG_FOR_TARGET@\n ALL_ADAFLAGS = $(CFLAGS) $(ADA_CFLAGS) $(ADAFLAGS)\n THREAD_KIND = native\n THREADSLIB =\n@@ -132,22 +131,6 @@ soext  = .so\n shext  =\n hyphen = -\n \n-# Define this as & to perform parallel make on a Sequent.\n-# Note that this has some bugs, and it seems currently necessary\n-# to compile all the gen* files first by hand to avoid erroneous results.\n-P =\n-\n-# This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n-# It specifies -B./.\n-# It also specifies -B$(tooldir)/ to find as and ld for a cross compiler.\n-GCC_CFLAGS = $(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS)\n-\n-# Tools to use when building a cross-compiler.\n-# These are used because `configure' appends `cross-make'\n-# to the makefile when making a cross-compiler.\n-\n-# We don't use cross-make.  Instead we use the tools from the build tree,\n-# if they are available.\n # program_transform_name and objdir are set by configure.ac.\n program_transform_name =\n objdir = ."}, {"sha": "5d93ea4bc5cb70ea1e79c6830ecdd175491c2e06", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=14ecca2eea820447afe3214ed635883fbc4244a4", "patch": "@@ -176,6 +176,10 @@ do {\t\t\t\t\t\t\t \\\n /* True if TYPE can alias any other types.  */\n #define TYPE_UNIVERSAL_ALIASING_P(NODE) TYPE_LANG_FLAG_6 (NODE)\n \n+/* For RECORD_TYPE, UNION_TYPE, and QUAL_UNION_TYPE, this holds the maximum\n+   alignment value the type ought to have.  */\n+#define TYPE_MAX_ALIGN(NODE) (TYPE_PRECISION (RECORD_OR_UNION_CHECK (NODE)))\n+\n /* For an UNCONSTRAINED_ARRAY_TYPE, this is the record containing both the\n    template and the object.\n "}, {"sha": "2450b5066b05759a8fcdd138b254c75ae6f610e2", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 38, "deletions": 44, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=14ecca2eea820447afe3214ed635883fbc4244a4", "patch": "@@ -2829,11 +2829,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    ? 1\n \t    : Component_Alignment (gnat_entity) == Calign_Storage_Unit\n \t      ? -1\n-\t      : (Known_Alignment (gnat_entity)\n-\t\t || (Strict_Alignment (gnat_entity)\n-\t\t     && Known_RM_Size (gnat_entity)))\n-\t\t? -2\n-\t\t: 0;\n+\t      : 0;\n+\tconst bool has_align = Known_Alignment (gnat_entity);\n \tconst bool has_discr = Has_Discriminants (gnat_entity);\n \tconst bool has_rep = Has_Specified_Layout (gnat_entity);\n \tconst bool is_extension\n@@ -2872,7 +2869,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   suppress expanding incomplete types.  */\n \tgnu_type = make_node (tree_code_for_record_type (gnat_entity));\n \tTYPE_NAME (gnu_type) = gnu_entity_name;\n-\tTYPE_PACKED (gnu_type) = (packed != 0) || has_rep;\n+\tTYPE_PACKED (gnu_type) = (packed != 0) || has_align || has_rep;\n \tTYPE_REVERSE_STORAGE_ORDER (gnu_type)\n \t  = Reverse_Storage_Order (gnat_entity);\n \tprocess_attributes (&gnu_type, &attr_list, true, gnat_entity);\n@@ -2883,38 +2880,32 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    this_deferred = true;\n \t  }\n \n-\t/* If both a size and rep clause was specified, put the size in\n-\t   the record type now so that it can get the proper mode.  */\n+\t/* If both a size and rep clause were specified, put the size on\n+\t   the record type now so that it can get the proper layout.  */\n \tif (has_rep && Known_RM_Size (gnat_entity))\n \t  TYPE_SIZE (gnu_type)\n \t    = UI_To_gnu (RM_Size (gnat_entity), bitsizetype);\n \n-\t/* Always set the alignment here so that it can be used to\n-\t   set the mode, if it is making the alignment stricter.  If\n-\t   it is invalid, it will be checked again below.  If this is to\n-\t   be Atomic, choose a default alignment of a word unless we know\n-\t   the size and it's smaller.  */\n-\tif (Known_Alignment (gnat_entity))\n+\t/* Always set the alignment on the record type here so that it can\n+\t   get the proper layout.  */\n+\tif (has_align)\n \t  TYPE_ALIGN (gnu_type)\n \t    = validate_alignment (Alignment (gnat_entity), gnat_entity, 0);\n-\telse if (Is_Atomic_Or_VFA (gnat_entity) && Known_Esize (gnat_entity))\n-\t  {\n-\t    unsigned int size = UI_To_Int (Esize (gnat_entity));\n-\t    TYPE_ALIGN (gnu_type)\n-\t      = size >= BITS_PER_WORD ? BITS_PER_WORD : ceil_pow2 (size);\n-\t  }\n-\t/* If a type needs strict alignment, the minimum size will be the\n-\t   type size instead of the RM size (see validate_size).  Cap the\n-\t   alignment, lest it causes this type size to become too large.  */\n-\telse if (Strict_Alignment (gnat_entity) && Known_RM_Size (gnat_entity))\n+\telse\n \t  {\n-\t    unsigned int raw_size = UI_To_Int (RM_Size (gnat_entity));\n-\t    unsigned int raw_align = raw_size & -raw_size;\n-\t    if (raw_align < BIGGEST_ALIGNMENT)\n-\t      TYPE_ALIGN (gnu_type) = raw_align;\n+\t    TYPE_ALIGN (gnu_type) = 0;\n+\n+\t    /* If a type needs strict alignment, the minimum size will be the\n+\t       type size instead of the RM size (see validate_size).  Cap the\n+\t       alignment lest it causes this type size to become too large.  */\n+\t    if (Strict_Alignment (gnat_entity) && Known_RM_Size (gnat_entity))\n+\t      {\n+\t\tunsigned int max_size = UI_To_Int (RM_Size (gnat_entity));\n+\t\tunsigned int max_align = max_size & -max_size;\n+\t\tif (max_align < BIGGEST_ALIGNMENT)\n+\t\t  TYPE_MAX_ALIGN (gnu_type) = max_align;\n+\t      }\n \t  }\n-\telse\n-\t  TYPE_ALIGN (gnu_type) = 0;\n \n \t/* If we have a Parent_Subtype, make a field for the parent.  If\n \t   this record has rep clauses, force the position to zero.  */\n@@ -6502,25 +6493,29 @@ adjust_packed (tree field_type, tree record_type, int packed)\n   if (type_has_variable_size (field_type))\n     return 0;\n \n+  /* In the other cases, we can honor the packing.  */\n+  if (packed)\n+    return packed;\n+\n   /* If the alignment of the record is specified and the field type\n      is over-aligned, request Storage_Unit alignment for the field.  */\n-  if (packed == -2)\n-    {\n-      if (TYPE_ALIGN (field_type) > TYPE_ALIGN (record_type))\n-\treturn -1;\n-      else\n-\treturn 0;\n-    }\n+  if (TYPE_ALIGN (record_type)\n+      && TYPE_ALIGN (field_type) > TYPE_ALIGN (record_type))\n+    return -1;\n+\n+  /* Likewise if the maximum alignment of the record is specified.  */\n+  if (TYPE_MAX_ALIGN (record_type)\n+      && TYPE_ALIGN (field_type) > TYPE_MAX_ALIGN (record_type))\n+    return -1;\n \n-  return packed;\n+  return 0;\n }\n \n /* Return a GCC tree for a field corresponding to GNAT_FIELD to be\n    placed in GNU_RECORD_TYPE.\n \n-   PACKED is 1 if the enclosing record is packed, -1 if the enclosing\n-   record has Component_Alignment of Storage_Unit, -2 if the enclosing\n-   record has a specified alignment.\n+   PACKED is 1 if the enclosing record is packed or -1 if the enclosing\n+   record has Component_Alignment of Storage_Unit.\n \n    DEFINITION is true if this field is for a record being defined.\n \n@@ -6989,9 +6984,8 @@ typedef struct vinfo\n    GNU_FIELD_LIST.  The other calls to this function are recursive calls for\n    the component list of a variant and, in this case, GNU_FIELD_LIST is empty.\n \n-   PACKED is 1 if this is for a packed record, -1 if this is for a record\n-   with Component_Alignment of Storage_Unit, -2 if this is for a record\n-   with a specified alignment.\n+   PACKED is 1 if this is for a packed record or -1 if this is for a record\n+   with Component_Alignment of Storage_Unit.\n \n    DEFINITION is true if we are defining this record type.\n "}, {"sha": "f236907fc2b2f672271064685af56b78c48dc2ba", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=14ecca2eea820447afe3214ed635883fbc4244a4", "patch": "@@ -1694,15 +1694,18 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n \t      /* The enclosing record type must be sufficiently aligned.\n \t\t Otherwise, if no alignment was specified for it and it\n \t\t has been laid out already, bump its alignment to the\n-\t\t desired one if this is compatible with its size.  */\n+\t\t desired one if this is compatible with its size and\n+\t\t maximum alignment, if any.  */\n \t      if (TYPE_ALIGN (record_type) >= align)\n \t\t{\n \t\t  DECL_ALIGN (field) = MAX (DECL_ALIGN (field), align);\n \t\t  DECL_BIT_FIELD (field) = 0;\n \t\t}\n \t      else if (!had_align\n \t\t       && rep_level == 0\n-\t\t       && value_factor_p (TYPE_SIZE (record_type), align))\n+\t\t       && value_factor_p (TYPE_SIZE (record_type), align)\n+\t\t       && (!TYPE_MAX_ALIGN (record_type)\n+\t\t\t   || TYPE_MAX_ALIGN (record_type) >= align))\n \t\t{\n \t\t  TYPE_ALIGN (record_type) = align;\n \t\t  DECL_ALIGN (field) = MAX (DECL_ALIGN (field), align);\n@@ -1800,6 +1803,9 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n \t}\n     }\n \n+  /* Reset the TYPE_MAX_ALIGN field since it's private to gigi.  */\n+  TYPE_MAX_ALIGN (record_type) = 0;\n+\n   if (debug_info_p)\n     rest_of_record_type_compilation (record_type);\n }"}, {"sha": "e7a3058c4b4e4252cf4ed392736aa307fd8243e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14ecca2eea820447afe3214ed635883fbc4244a4", "patch": "@@ -1,3 +1,7 @@\n+2015-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/rep_clause5.ads: New test.\n+\n 2015-11-29  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR c/67106"}, {"sha": "ffac17b3c29a5f28d2c1c59f2d11912805595fd8", "filename": "gcc/testsuite/gnat.dg/specs/rep_clause5.ads", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Frep_clause5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ecca2eea820447afe3214ed635883fbc4244a4/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Frep_clause5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Frep_clause5.ads?ref=14ecca2eea820447afe3214ed635883fbc4244a4", "patch": "@@ -0,0 +1,75 @@\n+-- { dg-do compile }\n+\n+pragma Implicit_Packing;\n+\n+package Rep_Clause5 is\n+\n+   type Modes_Type is (Mode_0, Mode_1);\n+   for  Modes_Type'size use 8;\n+\n+   type Mode_Record_Type is\n+      record\n+         Mode_1 : aliased Modes_Type;\n+         Mode_2 : aliased Modes_Type;\n+         Mode_3 : aliased Modes_Type;\n+         Mode_4 : aliased Modes_Type;\n+         Time   : aliased Float;\n+      end record;\n+\n+   for Mode_Record_Type use\n+      record\n+         Mode_1 at 00 range 00 .. 07;\n+         Mode_2 at 01 range 00 .. 07;\n+         Mode_3 at 02 range 00 .. 07;\n+         Mode_4 at 03 range 00 .. 07;\n+         Time   at 04 range 00 .. 31;\n+      end record;\n+\n+   for Mode_Record_Type'Size use 64;\n+   for Mode_Record_Type'Alignment use 4;\n+\n+   type Array_1_Type is array (0 .. 31) of Boolean;\n+   for  Array_1_Type'size use 32;\n+\n+   type Array_2_Type is array (0 .. 127) of Boolean;\n+   for  Array_2_Type'size use 128;\n+\n+   type Array_3_Type is array (0 .. 31) of Boolean;\n+   for  Array_3_Type'size use 32;\n+\n+   type Unsigned_Long is mod 2 ** 32;\n+   type Array_4_Type is array (1 .. 6) of unsigned_Long;\n+\n+   type Primary_Data_Type is\n+      record\n+         Array_1           : aliased Array_1_Type;\n+         Mode_Record       : aliased Mode_Record_Type;\n+         Array_2           : aliased Array_2_Type;\n+         Array_3           : Array_3_Type;\n+         Array_4           : Array_4_Type;\n+      end record;\n+\n+   for Primary_Data_Type use\n+      record\n+         Array_1           at  0 range  0 ..  31; -- WORD 1\n+         Mode_Record       at  4 range  0 ..  63; -- WORD 2 ..  3\n+         Array_2           at 12 range  0 .. 127; -- WORD 4 ..  7\n+         Array_3           at 28 range  0 ..  31; -- WORD 8\n+         Array_4           at 32 range  0 .. 191; -- WORD 9 .. 14\n+      end record;\n+\n+   for Primary_Data_Type'Size use 448;\n+\n+   type Results_Record_Type is\n+      record\n+        Thirty_Two_Bit_Pad : Float;\n+        Result             : Primary_Data_Type;\n+      end record;\n+\n+   for Results_Record_Type use\n+      record\n+         Thirty_Two_Bit_Pad at 0 range 0 ..  31;\n+         Result             at 4 range 0 .. 447;\n+      end record;\n+\n+end Rep_Clause5;"}]}