{"sha": "a594120bfe7f04c492899abd06b5a90ce14dafff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5NDEyMGJmZTdmMDRjNDkyODk5YWJkMDZiNWE5MGNlMTRkYWZmZg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-22T23:38:29Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-22T23:38:29Z"}, "message": "sh.h (TARGET_DYNSHIFT): New macro.\n\n\t* config/sh/sh.h (TARGET_DYNSHIFT): New macro.\n\t(SH_DYNAMIC_SHIFT_COST): Use it.\n\t* config/sh/sh.c (expand_ashiftrt, shl_sext_kind): Likewise.\n\t(sh_dynamicalize_shift_p): Add TARGET_DYNSHIFT condition.\n\tAdd sanity check for input value.  Add function description.\n\t* config/sh/sh.md (ashlsi3, ashlsi3_std, ashrsi3_d, lshrsi3,\n\tlshrsi3_d): Use TARGET_DYNSHIFT.\n\nFrom-SVN: r189760", "tree": {"sha": "db29671454e5483dc5e1ab9ce1ce4fef76504560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db29671454e5483dc5e1ab9ce1ce4fef76504560"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a594120bfe7f04c492899abd06b5a90ce14dafff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a594120bfe7f04c492899abd06b5a90ce14dafff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a594120bfe7f04c492899abd06b5a90ce14dafff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a594120bfe7f04c492899abd06b5a90ce14dafff/comments", "author": null, "committer": null, "parents": [{"sha": "7222fdd8306c11d740b32440eb5ad63a4f2b2194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7222fdd8306c11d740b32440eb5ad63a4f2b2194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7222fdd8306c11d740b32440eb5ad63a4f2b2194"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "ede99f6c68e2b0c3c4c91057a6a94ef4ed0c88c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a594120bfe7f04c492899abd06b5a90ce14dafff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a594120bfe7f04c492899abd06b5a90ce14dafff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a594120bfe7f04c492899abd06b5a90ce14dafff", "patch": "@@ -1,3 +1,13 @@\n+2012-07-22  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.h (TARGET_DYNSHIFT): New macro.\n+\t(SH_DYNAMIC_SHIFT_COST): Use it.\n+\t* config/sh/sh.c (expand_ashiftrt, shl_sext_kind): Likewise.\n+\t(sh_dynamicalize_shift_p): Add TARGET_DYNSHIFT condition.\n+\tAdd sanity check for input value.  Add function description.\n+\t* config/sh/sh.md (ashlsi3, ashlsi3_std, ashrsi3_d, lshrsi3,\n+\tlshrsi3_d): Use TARGET_DYNSHIFT.\n+\n 2012-07-22  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.md (negc): Delete expander."}, {"sha": "604e500b2514f793342e127f2f58d89e69a1398a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a594120bfe7f04c492899abd06b5a90ce14dafff/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a594120bfe7f04c492899abd06b5a90ce14dafff/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a594120bfe7f04c492899abd06b5a90ce14dafff", "patch": "@@ -3437,7 +3437,7 @@ expand_ashiftrt (rtx *operands)\n   char func[18];\n   int value;\n \n-  if (TARGET_SH3 || TARGET_SH2A)\n+  if (TARGET_DYNSHIFT)\n     {\n       if (!CONST_INT_P (operands[2]))\n \t{\n@@ -3507,10 +3507,16 @@ expand_ashiftrt (rtx *operands)\n   return true;\n }\n \n+/* Return true if it is potentially beneficial to use a dynamic shift\n+   instruction (shad / shar) instead of a combination of 1/2/8/16 \n+   shift instructions for the specified shift count.\n+   If dynamic shifts are not available, always return false.  */\n bool\n sh_dynamicalize_shift_p (rtx count)\n {\n-  return shift_insns[INTVAL (count) & 31] > 1 + SH_DYNAMIC_SHIFT_COST;\n+  gcc_assert (CONST_INT_P (count));\n+  return TARGET_DYNSHIFT\n+\t && (shift_insns[INTVAL (count) & 31] > 1 + SH_DYNAMIC_SHIFT_COST);\n }\n \n /* Try to find a good way to implement the combiner pattern\n@@ -3886,7 +3892,7 @@ shl_sext_kind (rtx left_rtx, rtx size_rtx, int *costp)\n \t    }\n \t}\n     }\n-  if (TARGET_SH3 || TARGET_SH2A)\n+  if (TARGET_DYNSHIFT)\n     {\n       /* Try to use a dynamic shift.  */\n       cost = shift_insns[32 - insize] + 1 + SH_DYNAMIC_SHIFT_COST;"}, {"sha": "af7fe0bf545eacf8aac660d0d07255cf77348ee5", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a594120bfe7f04c492899abd06b5a90ce14dafff/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a594120bfe7f04c492899abd06b5a90ce14dafff/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=a594120bfe7f04c492899abd06b5a90ce14dafff", "patch": "@@ -1928,6 +1928,13 @@ struct sh_args {\n /* Nonzero if access to memory by bytes is no faster than for words.  */\n #define SLOW_BYTE_ACCESS 1\n \n+/* Nonzero if the target supports dynamic shift instructions\n+   like shad and shld.  */\n+#define TARGET_DYNSHIFT (TARGET_SH3 || TARGET_SH2A)\n+\n+#define SH_DYNAMIC_SHIFT_COST \\\n+  (TARGET_HARD_SH4 ? 1 : TARGET_DYNSHIFT ? (optimize_size ? 1 : 2) : 20)\n+\n /* Immediate shift counts are truncated by the output routines (or was it\n    the assembler?).  Shift counts in a register are truncated by SH.  Note\n    that the native compiler puts too large (> 32) immediate shift counts\n@@ -2317,11 +2324,6 @@ extern int current_function_interrupt;\n    prologue rather than duplicate around each call.  */\n #define ACCUMULATE_OUTGOING_ARGS TARGET_ACCUMULATE_OUTGOING_ARGS\n \n-#define SH_DYNAMIC_SHIFT_COST \\\n-  (TARGET_HARD_SH4 ? 1\t\\\n-   : (TARGET_SH3 || TARGET_SH2A) ? (optimize_size ? 1 : 2) : 20)\n-\n-\n #define NUM_MODES_FOR_MODE_SWITCHING { FP_MODE_NONE }\n \n #define OPTIMIZE_MODE_SWITCHING(ENTITY) (TARGET_SH4 || TARGET_SH2A_DOUBLE)"}, {"sha": "35764f8ee0919273251bd1e48ce3e82c792803a7", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a594120bfe7f04c492899abd06b5a90ce14dafff/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a594120bfe7f04c492899abd06b5a90ce14dafff/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=a594120bfe7f04c492899abd06b5a90ce14dafff", "patch": "@@ -3514,7 +3514,7 @@ label:\n   if (CONST_INT_P (operands[2])\n       && sh_dynamicalize_shift_p (operands[2]))\n     operands[2] = force_reg (SImode, operands[2]);\n-  if (TARGET_SH3 || TARGET_SH2A)\n+  if (TARGET_DYNSHIFT)\n     {\n       emit_insn (gen_ashlsi3_std (operands[0], operands[1], operands[2]));\n       DONE;\n@@ -3530,14 +3530,13 @@ label:\n \t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0,0,0,0\")\n \t\t   (match_operand:SI 2 \"nonmemory_operand\" \"r,M,P27,?ri\")))\n    (clobber (match_scratch:SI 3 \"=X,X,X,&r\"))]\n-  \"(TARGET_SH3 || TARGET_SH2A)\n-   || (TARGET_SH1 && satisfies_constraint_P27 (operands[2]))\"\n+  \"TARGET_DYNSHIFT || (TARGET_SH1 && satisfies_constraint_P27 (operands[2]))\"\n   \"@\n    shld\t%2,%0\n    add\t%0,%0\n    shll%O2\t%0\n    #\"\n-  \"(TARGET_SH3 || TARGET_SH2A)\n+  \"TARGET_DYNSHIFT\n    && reload_completed\n    && CONST_INT_P (operands[2])\n    && ! satisfies_constraint_P27 (operands[2])\"\n@@ -3797,7 +3796,7 @@ label:\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n \t(ashiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t     (neg:SI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))]\n-  \"TARGET_SH3 || TARGET_SH2A\"\n+  \"TARGET_DYNSHIFT\"\n   \"shad\t%2,%0\"\n   [(set_attr \"type\" \"dyn_shift\")])\n \n@@ -3912,7 +3911,7 @@ label:\n   if (CONST_INT_P (operands[2])\n       && sh_dynamicalize_shift_p (operands[2]))\n     operands[2] = force_reg (SImode, operands[2]);\n-  if ((TARGET_SH3 || TARGET_SH2A)\n+  if (TARGET_DYNSHIFT\n       && arith_reg_operand (operands[2], GET_MODE (operands[2])))\n     {\n       rtx count = copy_to_mode_reg (SImode, operands[2]);\n@@ -3928,7 +3927,7 @@ label:\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t     (neg:SI (match_operand:SI 2 \"arith_reg_operand\" \"r\"))))]\n-  \"TARGET_SH3 || TARGET_SH2A\"\n+  \"TARGET_DYNSHIFT\"\n   \"shld\t%2,%0\"\n   [(set_attr \"type\" \"dyn_shift\")])\n "}]}