{"sha": "071e428c24ee8c1ed062597a093708bba29509c9", "node_id": "C_kwDOANBUbNoAKDA3MWU0MjhjMjRlZThjMWVkMDYyNTk3YTA5MzcwOGJiYTI5NTA5Yzk", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-09-08T08:52:02Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-11-14T05:38:06Z"}, "message": "Enable small loop unrolling for O2\n\nModern processors has multiple way instruction decoders\nFor x86, icelake/zen3 has 5 uops, so for small loop with <= 4\ninstructions (usually has 3 uops with a cmp/jmp pair that can be\nmacro-fused), the decoder would have 2 uops bubble for each iteration\nand the pipeline could not be fully utilized.\n\nTherefore, this patch enables loop unrolling for small size loop at O2\nto fullfill the decoder as much as possible. It turns on rtl loop\nunrolling when targetm.loop_unroll_adjust exists and O2 plus speed only.\nIn x86 backend the default behavior is to unroll small loops with less\nthan 4 insns by 1 time.\n\nThis improves 548.exchange2 by 9% on icelake and 7.4% on zen3 with\n0.9% codesize increment. For other benchmarks the variants are minor\nand overall codesize increased by 0.2%.\n\nThe kernel image size increased by 0.06%, and no impact on eembc.\n\ngcc/ChangeLog:\n\n\t* common/config/i386/i386-common.cc (ix86_optimization_table):\n\tEnable small loop unroll at O2 by default.\n\t* config/i386/i386.cc (ix86_loop_unroll_adjust): Adjust unroll\n\tfactor if -munroll-only-small-loops enabled and -funroll-loops/\n\t-funroll-all-loops are disabled.\n\t* config/i386/i386.h (struct processor_costs): Add 2 field\n\tsmall_unroll_ninsns and small_unroll_factor.\n\t* config/i386/i386.opt: Add -munroll-only-small-loops.\n\t* doc/gcc/gcc-command-options/machine-dependent-options/x86-options.rst:\n\tDocument -munroll-only-small-loops.\n\t* doc/gcc/gcc-command-options/option-summary.rst: Likewise.\n\t* loop-init.cc (pass_rtl_unroll_loops::gate): Enable rtl\n\tloop unrolling for -O2-speed and above if target hook\n\tloop_unroll_adjust exists.\n\t(pass_rtl_unroll_loops::execute): Set UAP_UNROLL flag\n\twhen target hook loop_unroll_adjust exists.\n\t* config/i386/x86-tune-costs.h: Update all processor costs\n\twith small_unroll_ninsns = 4 and small_unroll_factor = 2.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/guality/loop-1.c: Add additional option\n\t-mno-unroll-only-small-loops.\n\t* gcc.target/i386/pr86270.c: Add -mno-unroll-only-small-loops.\n\t* gcc.target/i386/pr93002.c: Likewise.", "tree": {"sha": "3a4eccc9a05e11746e0d9b14146c213fae270ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a4eccc9a05e11746e0d9b14146c213fae270ee6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/071e428c24ee8c1ed062597a093708bba29509c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071e428c24ee8c1ed062597a093708bba29509c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/071e428c24ee8c1ed062597a093708bba29509c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071e428c24ee8c1ed062597a093708bba29509c9/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f2ce01a214177460e566d85bf4d44aa18432ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2ce01a214177460e566d85bf4d44aa18432ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2ce01a214177460e566d85bf4d44aa18432ed9"}], "stats": {"total": 113, "additions": 107, "deletions": 6}, "files": [{"sha": "2f491b2f84bc770bfdb51b48d6800303b0db2895", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=071e428c24ee8c1ed062597a093708bba29509c9", "patch": "@@ -1803,6 +1803,7 @@ static const struct default_options ix86_option_optimization_table[] =\n     /* The STC algorithm produces the smallest code at -Os, for x86.  */\n     { OPT_LEVELS_2_PLUS, OPT_freorder_blocks_algorithm_, NULL,\n       REORDER_BLOCKS_ALGORITHM_STC },\n+    { OPT_LEVELS_2_PLUS_SPEED_ONLY, OPT_munroll_only_small_loops, NULL, 1 },\n     /* Turn off -fschedule-insns by default.  It tends to make the\n        problem with not enough registers even worse.  */\n     { OPT_LEVELS_ALL, OPT_fschedule_insns, NULL, 0 },"}, {"sha": "292b32c5e99a71314d97c008ba41ec52e42253dd", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=071e428c24ee8c1ed062597a093708bba29509c9", "patch": "@@ -23827,6 +23827,24 @@ ix86_loop_unroll_adjust (unsigned nunroll, class loop *loop)\n   unsigned i;\n   unsigned mem_count = 0;\n \n+  /* Unroll small size loop when unroll factor is not explicitly\n+     specified.  */\n+  if (!(flag_unroll_loops\n+\t|| flag_unroll_all_loops\n+\t|| loop->unroll))\n+    {\n+      nunroll = 1;\n+\n+      /* Any explicit -f{no-}unroll-{all-}loops turns off\n+\t -munroll-only-small-loops.  */\n+      if (ix86_unroll_only_small_loops\n+\t  && !OPTION_SET_P (flag_unroll_loops)\n+\t  && loop->ninsns <= ix86_cost->small_unroll_ninsns)\n+\tnunroll = ix86_cost->small_unroll_factor;\n+\n+      return nunroll;\n+    }\n+\n   if (!TARGET_ADJUST_UNROLL)\n      return nunroll;\n "}, {"sha": "3869db8f2d35754b732bc43266c9c7692e2e2222", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=071e428c24ee8c1ed062597a093708bba29509c9", "patch": "@@ -219,6 +219,11 @@ struct processor_costs {\n   const char *const align_jump;\t\t/* Jump alignment.  */\n   const char *const align_label;\t/* Label alignment.  */\n   const char *const align_func;\t\t/* Function alignment.  */\n+\n+  const unsigned small_unroll_ninsns;\t/* Insn count limit for small loop\n+\t\t\t\t\t   to be unrolled.  */\n+  const unsigned small_unroll_factor;   /* Unroll factor for small loop to\n+\t\t\t\t\t   be unrolled.  */\n };\n \n extern const struct processor_costs *ix86_cost;"}, {"sha": "d6b80efa04deba3a70e3787edb5da059b238b232", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=071e428c24ee8c1ed062597a093708bba29509c9", "patch": "@@ -1246,3 +1246,7 @@ Support PREFETCHI built-in functions and code generation.\n mraoint\n Target Mask(ISA2_RAOINT) Var(ix86_isa_flags2) Save\n Support RAOINT built-in functions and code generation.\n+\n+munroll-only-small-loops\n+Target Var(ix86_unroll_only_small_loops) Init(0) Save\n+Enable conservative small loop unrolling."}, {"sha": "f01b8ee9eef190852960d6bcfa37537f3bc01a27", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=071e428c24ee8c1ed062597a093708bba29509c9", "patch": "@@ -135,6 +135,8 @@ struct processor_costs ix86_size_cost = {/* costs for tuning for size */\n   NULL,\t\t\t\t\t/* Jump alignment.  */\n   NULL,\t\t\t\t\t/* Label alignment.  */\n   NULL,\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* Processor costs (relative to an add) */\n@@ -244,6 +246,8 @@ struct processor_costs i386_cost = {\t/* 386 specific costs */\n   \"4\",\t\t\t\t\t/* Jump alignment.  */\n   NULL,\t\t\t\t\t/* Label alignment.  */\n   \"4\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static stringop_algs i486_memcpy[2] = {\n@@ -354,6 +358,8 @@ struct processor_costs i486_cost = {\t/* 486 specific costs */\n   \"16\",\t\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static stringop_algs pentium_memcpy[2] = {\n@@ -462,6 +468,8 @@ struct processor_costs pentium_cost = {\n   \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static const\n@@ -563,6 +571,8 @@ struct processor_costs lakemont_cost = {\n   \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* PentiumPro has optimized rep instructions for blocks aligned by 8 bytes\n@@ -679,6 +689,8 @@ struct processor_costs pentiumpro_cost = {\n   \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static stringop_algs geode_memcpy[2] = {\n@@ -786,6 +798,8 @@ struct processor_costs geode_cost = {\n   NULL,\t\t\t\t\t/* Jump alignment.  */\n   NULL,\t\t\t\t\t/* Label alignment.  */\n   NULL,\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static stringop_algs k6_memcpy[2] = {\n@@ -896,6 +910,8 @@ struct processor_costs k6_cost = {\n   \"32:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"32\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* For some reason, Athlon deals better with REP prefix (relative to loops)\n@@ -1007,6 +1023,8 @@ struct processor_costs athlon_cost = {\n   \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* K8 has optimized REP instruction for medium sized blocks, but for very\n@@ -1127,6 +1145,8 @@ struct processor_costs k8_cost = {\n   \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* AMDFAM10 has optimized REP instruction for medium sized blocks, but for\n@@ -1255,6 +1275,8 @@ struct processor_costs amdfam10_cost = {\n   \"32:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"32\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /*  BDVER has optimized REP instruction for medium sized blocks, but for\n@@ -1376,6 +1398,8 @@ const struct processor_costs bdver_cost = {\n   \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"11\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n \n@@ -1529,6 +1553,8 @@ struct processor_costs znver1_cost = {\n   \"16\",\t\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /*  ZNVER2 has optimized REP instruction for medium sized blocks, but for\n@@ -1686,6 +1712,8 @@ struct processor_costs znver2_cost = {\n   \"16\",\t\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n struct processor_costs znver3_cost = {\n@@ -1818,6 +1846,8 @@ struct processor_costs znver3_cost = {\n   \"16\",\t\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* This table currently replicates znver3_cost table. */\n@@ -1951,6 +1981,8 @@ struct processor_costs znver4_cost = {\n   \"16\",\t\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* skylake_cost should produce code tuned for Skylake familly of CPUs.  */\n@@ -2075,6 +2107,8 @@ struct processor_costs skylake_cost = {\n   \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* icelake_cost should produce code tuned for Icelake family of CPUs.\n@@ -2201,6 +2235,8 @@ struct processor_costs icelake_cost = {\n   \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* alderlake_cost should produce code tuned for alderlake family of CPUs.  */\n@@ -2321,6 +2357,8 @@ struct processor_costs alderlake_cost = {\n   \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n   /* BTVER1 has optimized REP instruction for medium sized blocks, but for\n@@ -2434,6 +2472,8 @@ const struct processor_costs btver1_cost = {\n   \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"11\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static stringop_algs btver2_memcpy[2] = {\n@@ -2544,6 +2584,8 @@ const struct processor_costs btver2_cost = {\n   \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"11\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static stringop_algs pentium4_memcpy[2] = {\n@@ -2653,6 +2695,8 @@ struct processor_costs pentium4_cost = {\n   NULL,\t\t\t\t\t/* Jump alignment.  */\n   NULL,\t\t\t\t\t/* Label alignment.  */\n   NULL,\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static stringop_algs nocona_memcpy[2] = {\n@@ -2765,6 +2809,8 @@ struct processor_costs nocona_cost = {\n   NULL,\t\t\t\t\t/* Jump alignment.  */\n   NULL,\t\t\t\t\t/* Label alignment.  */\n   NULL,\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static stringop_algs atom_memcpy[2] = {\n@@ -2875,6 +2921,8 @@ struct processor_costs atom_cost = {\n   \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static stringop_algs slm_memcpy[2] = {\n@@ -2985,6 +3033,8 @@ struct processor_costs slm_cost = {\n   \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static stringop_algs tremont_memcpy[2] = {\n@@ -3109,6 +3159,8 @@ struct processor_costs tremont_cost = {\n   \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n static stringop_algs intel_memcpy[2] = {\n@@ -3219,6 +3271,8 @@ struct processor_costs intel_cost = {\n   \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* lujiazui_cost should produce code tuned for ZHAOXIN lujiazui CPU.  */\n@@ -3334,6 +3388,8 @@ struct processor_costs lujiazui_cost = {\n   \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* Generic should produce code tuned for Core-i7 (and newer chips)\n@@ -3453,6 +3509,8 @@ struct processor_costs generic_cost = {\n   \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n \n /* core_cost should produce code tuned for Core familly of CPUs.  */\n@@ -3579,5 +3637,7 @@ struct processor_costs core_cost = {\n   \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n   \"0:0:8\",\t\t\t\t/* Label alignment.  */\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n+  4,\t\t\t\t\t/* Small unroll limit.  */\n+  2,\t\t\t\t\t/* Small unroll factor.  */\n };\n "}, {"sha": "5e18fd77f870b8885d5cbc75437a89a7423ed60e", "filename": "gcc/doc/gcc/gcc-command-options/machine-dependent-options/x86-options.rst", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fx86-options.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fx86-options.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Fmachine-dependent-options%2Fx86-options.rst?ref=071e428c24ee8c1ed062597a093708bba29509c9", "patch": "@@ -1614,3 +1614,9 @@ on x86-64 processors in 64-bit environments.\n .. option:: -mdirect-extern-access\n \n   Default setting; overrides :option:`-mno-direct-extern-access`.\n+\n+.. option:: -munroll-only-small-loops\n+  Controls conservative small loop unrolling. It is default enbaled by\n+  O2, and unrolls loop with less than 4 insns by 1 time. Explicit\n+  -f[no-]unroll-[all-]loops would disable this flag to avoid any\n+  unintended unrolling behavior that user does not want."}, {"sha": "02898fb65cd57983e8bd8808b62464fd9a952c8e", "filename": "gcc/doc/gcc/gcc-command-options/option-summary.rst", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Foption-summary.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Foption-summary.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc%2Fgcc-command-options%2Foption-summary.rst?ref=071e428c24ee8c1ed062597a093708bba29509c9", "patch": "@@ -1490,7 +1490,8 @@ in the following sections.\n   :option:`-mgeneral-regs-only`  :option:`-mcall-ms2sysv-xlogues` :option:`-mrelax-cmpxchg-loop` |gol|\n   :option:`-mindirect-branch=choice`  :option:`-mfunction-return=choice` |gol|\n   :option:`-mindirect-branch-register` :option:`-mharden-sls=choice` |gol|\n-  :option:`-mindirect-branch-cs-prefix` :option:`-mneeded` :option:`-mno-direct-extern-access`\n+  :option:`-mindirect-branch-cs-prefix` :option:`-mneeded` :option:`-mno-direct-extern-access` |gol|\n+  :option:`-munroll-only-small-loops`\n \n   *x86 Windows Options*\n "}, {"sha": "9789efa1e11a740956ffa8e218d86262e31ece91", "filename": "gcc/loop-init.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Floop-init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Floop-init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.cc?ref=071e428c24ee8c1ed062597a093708bba29509c9", "patch": "@@ -565,9 +565,12 @@ class pass_rtl_unroll_loops : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  bool gate (function *) final override\n+  bool gate (function *fun) final override\n     {\n-      return (flag_unroll_loops || flag_unroll_all_loops || cfun->has_unroll);\n+      return (flag_unroll_loops || flag_unroll_all_loops || cfun->has_unroll\n+\t      || (targetm.loop_unroll_adjust\n+\t\t  && optimize >= 2\n+\t\t  && optimize_function_for_speed_p (fun)));\n     }\n \n   unsigned int execute (function *) final override;\n@@ -583,7 +586,8 @@ pass_rtl_unroll_loops::execute (function *fun)\n       if (dump_file)\n \tdf_dump (dump_file);\n \n-      if (flag_unroll_loops)\n+      if (flag_unroll_loops\n+\t  || targetm.loop_unroll_adjust)\n \tflags |= UAP_UNROLL;\n       if (flag_unroll_all_loops)\n \tflags |= UAP_UNROLL_ALL;"}, {"sha": "a32ea445a3f7feb0b2af9a364e7cc297d8a6e440", "filename": "gcc/testsuite/gcc.dg/guality/loop-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Floop-1.c?ref=071e428c24ee8c1ed062597a093708bba29509c9", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-fno-tree-scev-cprop -fno-tree-vectorize -g\" } */\n+/* { dg-additional-options \"-mno-unroll-only-small-loops\" { target ia32 } } */\n+\n \n #include \"../nop.h\"\n "}, {"sha": "cbc9fbb0450485a7409a82e97152fa6620f4c1cb", "filename": "gcc/testsuite/gcc.target/i386/pr86270.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86270.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86270.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86270.c?ref=071e428c24ee8c1ed062597a093708bba29509c9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -mno-unroll-only-small-loops\" } */\n \n int *a;\n long len;"}, {"sha": "f75a847f75dfab39f5171b126f8b82c405ee7137", "filename": "gcc/testsuite/gcc.target/i386/pr93002.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93002.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071e428c24ee8c1ed062597a093708bba29509c9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93002.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr93002.c?ref=071e428c24ee8c1ed062597a093708bba29509c9", "patch": "@@ -1,6 +1,6 @@\n /* PR target/93002 */\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -mno-unroll-only-small-loops\" } */\n /* { dg-final { scan-assembler-not \"cmp\\[^\\n\\r]*-1\" } } */\n \n volatile int sink;"}]}