{"sha": "db1405ddf566fe6129328229579b3f98a574b34c", "node_id": "C_kwDOANBUbNoAKGRiMTQwNWRkZjU2NmZlNjEyOTMyODIyOTU3OWIzZjk4YTU3NGIzNGM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-04T09:14:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-04T09:14:33Z"}, "message": "c-family: Account for integral promotions of left shifts for -Wshift-overflow warning [PR107846]\n\nThe r13-1100-gacb1e6f43dc2bbedd124 change added match.pd narrowing\nof left shifts, and while I believe the C++ FE calls the warning on unfolded\ntrees, the C FE folds them and so left shifts where integral promotion\nhappened and so were done in int type will be usually narrowed back to\nchar/signed char/unsigned char/short/unsigned short left shifts if the\nshift count is constant and fits into the precision of the var being\nshifted.\nOne possibility would be to restrict the match.pd optimization to GIMPLE\nonly, another don't fold in C FE before this warning (well, we need to\nfold the shift count operand to constant if possible), the following patch\njust takes integral promotion into account in the warning code.\n\n2023-03-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/107846\n\t* c-warn.cc: Include langhooks.h.\n\t(maybe_warn_shift_overflow): Set type0 to what TREE_TYPE (op0)\n\tpromotes to rather than TREE_TYPE (op0) itself, if TREE_TYPE (op0)\n\tis narrower than type0 and unsigned, use wi::min_precision with\n\tUNSIGNED and fold_convert op0 to type0 before emitting the warning.\n\n\t* gcc.dg/pr107846.c: New test.", "tree": {"sha": "76e6e6c95b14c13949c0a7324331bb319b2414b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76e6e6c95b14c13949c0a7324331bb319b2414b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db1405ddf566fe6129328229579b3f98a574b34c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1405ddf566fe6129328229579b3f98a574b34c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db1405ddf566fe6129328229579b3f98a574b34c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1405ddf566fe6129328229579b3f98a574b34c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d5730dee4f42e94004b38f8f4862c0b1f4d964c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5730dee4f42e94004b38f8f4862c0b1f4d964c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d5730dee4f42e94004b38f8f4862c0b1f4d964c"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "2941cf4c2f9d31f1704411d229273f26dae0f095", "filename": "gcc/c-family/c-warn.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1405ddf566fe6129328229579b3f98a574b34c/gcc%2Fc-family%2Fc-warn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1405ddf566fe6129328229579b3f98a574b34c/gcc%2Fc-family%2Fc-warn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.cc?ref=db1405ddf566fe6129328229579b3f98a574b34c", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"calls.h\"\n #include \"stor-layout.h\"\n #include \"tree-pretty-print.h\"\n+#include \"langhooks.h\"\n \n /* Print a warning if a constant expression had overflow in folding.\n    Invoke this function on every expression that the language\n@@ -2615,14 +2616,19 @@ maybe_warn_shift_overflow (location_t loc, tree op0, tree op1)\n       || TREE_CODE (op1) != INTEGER_CST)\n     return false;\n \n-  tree type0 = TREE_TYPE (op0);\n+  /* match.pd could have narrowed the left shift already,\n+     take type promotion into account.  */\n+  tree type0 = lang_hooks.types.type_promotes_to (TREE_TYPE (op0));\n   unsigned int prec0 = TYPE_PRECISION (type0);\n \n   /* Left-hand operand must be signed.  */\n   if (TYPE_OVERFLOW_WRAPS (type0) || cxx_dialect >= cxx20)\n     return false;\n \n-  unsigned int min_prec = (wi::min_precision (wi::to_wide (op0), SIGNED)\n+  signop sign = SIGNED;\n+  if (TYPE_PRECISION (TREE_TYPE (op0)) < TYPE_PRECISION (type0))\n+    sign = TYPE_SIGN (TREE_TYPE (op0));\n+  unsigned int min_prec = (wi::min_precision (wi::to_wide (op0), sign)\n \t\t\t   + TREE_INT_CST_LOW (op1));\n   /* Handle the case of left-shifting 1 into the sign bit.\n    * However, shifting 1 _out_ of the sign bit, as in\n@@ -2645,7 +2651,8 @@ maybe_warn_shift_overflow (location_t loc, tree op0, tree op1)\n     warning_at (loc, OPT_Wshift_overflow_,\n \t\t\"result of %qE requires %u bits to represent, \"\n \t\t\"but %qT only has %u bits\",\n-\t\tbuild2_loc (loc, LSHIFT_EXPR, type0, op0, op1),\n+\t\tbuild2_loc (loc, LSHIFT_EXPR, type0,\n+\t\t\t    fold_convert (type0, op0), op1),\n \t\tmin_prec, type0, prec0);\n \n   return overflowed;"}, {"sha": "15a661cdb03c3fe059b7236769200ecb28ea6379", "filename": "gcc/testsuite/gcc.dg/pr107846.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1405ddf566fe6129328229579b3f98a574b34c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107846.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1405ddf566fe6129328229579b3f98a574b34c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107846.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr107846.c?ref=db1405ddf566fe6129328229579b3f98a574b34c", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/107846 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -O2\" } */\n+\n+#define foo(x, b, n, m) ((unsigned short) (x) << (b - (n + 1) * 8) >> (b - 8) << (m * 8))\n+#define bar(x) ((unsigned short) (foo (x, 16, 0, 1) | foo (x, 16, 1, 0)))\n+#define baz(x)\tbar (x)\n+static const int v = 8000;\n+\n+unsigned short\n+qux (int t)\n+{\n+  return t != baz (v);\n+}"}]}