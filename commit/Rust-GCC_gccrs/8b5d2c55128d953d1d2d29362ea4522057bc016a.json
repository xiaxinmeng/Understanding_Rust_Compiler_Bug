{"sha": "8b5d2c55128d953d1d2d29362ea4522057bc016a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1ZDJjNTUxMjhkOTUzZDFkMmQyOTM2MmVhNDUyMjA1N2JjMDE2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-01-22T22:30:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-22T22:30:44Z"}, "message": "re PR target/88965 (powerpc64le vector builtin hits ICE in verify_gimple)\n\n\tPR target/88965\n\t* config/rs6000/rs6000.c: Include tree-vrp.h and tree-ssanames.h.\n\t(rs6000_gimple_fold_builtin): If MEM_REF address doesn't satisfy\n\tis_gimple_mem_ref_addr predicate, force it into a SSA_NAME first.\n\n\t* gcc.target/powerpc/pr88965.c: New test.\n\nFrom-SVN: r268166", "tree": {"sha": "44f617a4906758a7f1066d57e752701a14773ed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44f617a4906758a7f1066d57e752701a14773ed3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b5d2c55128d953d1d2d29362ea4522057bc016a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5d2c55128d953d1d2d29362ea4522057bc016a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5d2c55128d953d1d2d29362ea4522057bc016a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5d2c55128d953d1d2d29362ea4522057bc016a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18a23298d3a61bb387c5c67a3a867e11118408af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a23298d3a61bb387c5c67a3a867e11118408af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18a23298d3a61bb387c5c67a3a867e11118408af"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "215d47d97234243a3e9a2546f84948ce2862d3c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5d2c55128d953d1d2d29362ea4522057bc016a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5d2c55128d953d1d2d29362ea4522057bc016a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b5d2c55128d953d1d2d29362ea4522057bc016a", "patch": "@@ -1,5 +1,10 @@\n 2019-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/88965\n+\t* config/rs6000/rs6000.c: Include tree-vrp.h and tree-ssanames.h.\n+\t(rs6000_gimple_fold_builtin): If MEM_REF address doesn't satisfy\n+\tis_gimple_mem_ref_addr predicate, force it into a SSA_NAME first.\n+\n \tPR middle-end/88968\n \t* gimplify.c (gimplify_omp_atomic): Handle bitfield atomics with\n \tnon-integral DECL_BIT_FIELD_REPRESENTATIVEs."}, {"sha": "a7233462f94eaaef778ba7549604aaba5dd2d607", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5d2c55128d953d1d2d29362ea4522057bc016a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5d2c55128d953d1d2d29362ea4522057bc016a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8b5d2c55128d953d1d2d29362ea4522057bc016a", "patch": "@@ -81,6 +81,8 @@\n #include \"case-cfn-macros.h\"\n #include \"ppc-auxv.h\"\n #include \"tree-ssa-propagate.h\"\n+#include \"tree-vrp.h\"\n+#include \"tree-ssanames.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -15852,6 +15854,13 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t\t\t\t\t  arg1_type, temp_addr,\n \t\t\t\t\t  build_int_cst (arg1_type, -16));\n \tgsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\tif (!is_gimple_mem_ref_addr (aligned_addr))\n+\t  {\n+\t    tree t = make_ssa_name (TREE_TYPE (aligned_addr));\n+\t    gimple *g = gimple_build_assign (t, aligned_addr);\n+\t    gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t    aligned_addr = t;\n+\t  }\n \t/* Use the build2 helper to set up the mem_ref.  The MEM_REF could also\n \t   take an offset, but since we've already incorporated the offset\n \t   above, here we just pass in a zero.  */\n@@ -15897,6 +15906,13 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t\t\t\t\t  arg2_type, temp_addr,\n \t\t\t\t\t  build_int_cst (arg2_type, -16));\n \tgsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\tif (!is_gimple_mem_ref_addr (aligned_addr))\n+\t  {\n+\t    tree t = make_ssa_name (TREE_TYPE (aligned_addr));\n+\t    gimple *g = gimple_build_assign (t, aligned_addr);\n+\t    gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t    aligned_addr = t;\n+\t  }\n \t/* The desired gimple result should be similar to:\n \t   MEM[(__vector floatD.1407 *)_1] = vf1D.2697;  */\n \tgimple *g\n@@ -15934,6 +15950,13 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \ttree temp_addr = gimple_build (&stmts, loc, POINTER_PLUS_EXPR,\n \t\t\t\t       arg1_type, arg1, temp_offset);\n \tgsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\tif (!is_gimple_mem_ref_addr (temp_addr))\n+\t  {\n+\t    tree t = make_ssa_name (TREE_TYPE (temp_addr));\n+\t    gimple *g = gimple_build_assign (t, temp_addr);\n+\t    gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t    temp_addr = t;\n+\t  }\n \t/* Use the build2 helper to set up the mem_ref.  The MEM_REF could also\n \t   take an offset, but since we've already incorporated the offset\n \t   above, here we just pass in a zero.  */\n@@ -15970,6 +15993,13 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \ttree temp_addr = gimple_build (&stmts, loc, POINTER_PLUS_EXPR,\n \t\t\t\t       arg2_type, arg2, temp_offset);\n \tgsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\tif (!is_gimple_mem_ref_addr (temp_addr))\n+\t  {\n+\t    tree t = make_ssa_name (TREE_TYPE (temp_addr));\n+\t    gimple *g = gimple_build_assign (t, temp_addr);\n+\t    gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t    temp_addr = t;\n+\t  }\n \tgimple *g;\n \tg = gimple_build_assign (build2 (MEM_REF, align_stype, temp_addr,\n \t\t\t\t\t build_int_cst (arg2_type, 0)), arg0);"}, {"sha": "8bdc54a2c9d334b60551248236af3e6459b49f75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5d2c55128d953d1d2d29362ea4522057bc016a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5d2c55128d953d1d2d29362ea4522057bc016a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b5d2c55128d953d1d2d29362ea4522057bc016a", "patch": "@@ -1,5 +1,8 @@\n 2019-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/88965\n+\t* gcc.target/powerpc/pr88965.c: New test.\n+\n \tPR middle-end/88968\n \t* c-c++-common/gomp/atomic-23.c: New test.\n "}, {"sha": "e5ea0fab125262a34e5801935271f1a3a73db448", "filename": "gcc/testsuite/gcc.target/powerpc/pr88965.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5d2c55128d953d1d2d29362ea4522057bc016a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88965.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5d2c55128d953d1d2d29362ea4522057bc016a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88965.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88965.c?ref=8b5d2c55128d953d1d2d29362ea4522057bc016a", "patch": "@@ -0,0 +1,19 @@\n+/* PR target/88965 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+unsigned int a[16];\n+unsigned int __attribute__ ((vector_size (16))) b;\n+\n+void\n+foo (void)\n+{\n+  b = __builtin_vec_vsx_ld (0, &a[0]);\n+}\n+\n+void\n+bar (void)\n+{\n+  __builtin_vec_vsx_st (b, 0, &a[0]);\n+}"}]}