{"sha": "cbb734aa019ae7569549ba2cfa1887dd230f6d74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JiNzM0YWEwMTlhZTc1Njk1NDliYTJjZmExODg3ZGQyMzBmNmQ3NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-27T18:21:22Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-27T18:21:22Z"}, "message": "i386.md (ssemodesuffix): Merge with ssevecsize, ssemodefsuffix, ssescalarmodesuffix and avxmodesuffixp.\n\n\t* config/i386/i386.md (ssemodesuffix):  Merge with ssevecsize,\n\tssemodefsuffix, ssescalarmodesuffix and avxmodesuffixp.\n\tMove from sse.md.\n\t(ssemodefsuffix): Remove.\n\t(ssevecmodesuffix): New mode attribute.\n\t(fix_trunc<mode>di_sse, fix_trunc<mode>si_sse,\n\t*float<SSEMODEI24:mode><MODEF:mode>2_mixed_interunit,\n\t*float<SSEMODEI24:mode><MODEF:mode>2_mixed_nointerunit,\n\t*float<SSEMODEI24:mode><MODEF:mode>2_sse_interunit,\n\t*float<SSEMODEI24:mode><MODEF:mode>2_sse_nointerunit, setcc_<mode>_sse,\n\t*sqrt<mode>2_sse, sse4_1_round<mode>2, <smaxmin:code><mode>3,\n\t*ieee_smin<mode>3, *ieee_smax<mode>3): Adjust assembler templates for\n\tssemodesuffix mode attribute.\n\t(float splitters): Use ssevecmodesuffix mode attribute.\n\t* config/i386/sse.md (ssescalarmode): Merge with avxscalarmode.\n\t(sseinsmode): Rename from avxvecmode.\n\t(avxsizesuffix): Rename from avxmodesuffix.\n\t(sseintvecmode): Rename from avxpermvecmode.\n\t(ssedoublevecmode): Rename from ssedoublesizemode.\n\t(ssehalfvecmode): Rename from avxhalfvecmode.\n\t(ssescalarmode): Rename from avxscalarmode.\n\t(<sse>_comi, <sse>_ucomi, sse4a_movnt<mode>): Adjust assembler\n\ttemplates for ssemodesuffix mode attribute.\n\t(*andnot<mode>3, *<any_logic:code><mode>3): Use ssevecmodesuffix\n\tmode attribute.\n\n\tAdjust RTX patterns globally for renamed mode attributes.\n\nFrom-SVN: r173043", "tree": {"sha": "7bb09155d8a1e3d764c67e7ccb8c4c97da1c1e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bb09155d8a1e3d764c67e7ccb8c4c97da1c1e51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbb734aa019ae7569549ba2cfa1887dd230f6d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbb734aa019ae7569549ba2cfa1887dd230f6d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbb734aa019ae7569549ba2cfa1887dd230f6d74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbb734aa019ae7569549ba2cfa1887dd230f6d74/comments", "author": null, "committer": null, "parents": [{"sha": "991278ab90aa132805caaf3f2b6394348c850160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991278ab90aa132805caaf3f2b6394348c850160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991278ab90aa132805caaf3f2b6394348c850160"}], "stats": {"total": 410, "additions": 227, "deletions": 183}, "files": [{"sha": "3e9cb343c3334f353cb8a8b8349d06b84224a58b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb734aa019ae7569549ba2cfa1887dd230f6d74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb734aa019ae7569549ba2cfa1887dd230f6d74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbb734aa019ae7569549ba2cfa1887dd230f6d74", "patch": "@@ -1,3 +1,33 @@\n+2011-04-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (ssemodesuffix):  Merge with ssevecsize,\n+\tssemodefsuffix, ssescalarmodesuffix and avxmodesuffixp.\n+\tMove from sse.md.\n+\t(ssemodefsuffix): Remove.\n+\t(ssevecmodesuffix): New mode attribute.\n+\t(fix_trunc<mode>di_sse, fix_trunc<mode>si_sse,\n+\t*float<SSEMODEI24:mode><MODEF:mode>2_mixed_interunit,\n+\t*float<SSEMODEI24:mode><MODEF:mode>2_mixed_nointerunit,\n+\t*float<SSEMODEI24:mode><MODEF:mode>2_sse_interunit,\n+\t*float<SSEMODEI24:mode><MODEF:mode>2_sse_nointerunit, setcc_<mode>_sse,\n+\t*sqrt<mode>2_sse, sse4_1_round<mode>2, <smaxmin:code><mode>3,\n+\t*ieee_smin<mode>3, *ieee_smax<mode>3): Adjust assembler templates for\n+\tssemodesuffix mode attribute.\n+\t(float splitters): Use ssevecmodesuffix mode attribute.\n+\t* config/i386/sse.md (ssescalarmode): Merge with avxscalarmode.\n+\t(sseinsmode): Rename from avxvecmode.\n+\t(avxsizesuffix): Rename from avxmodesuffix.\n+\t(sseintvecmode): Rename from avxpermvecmode.\n+\t(ssedoublevecmode): Rename from ssedoublesizemode.\n+\t(ssehalfvecmode): Rename from avxhalfvecmode.\n+\t(ssescalarmode): Rename from avxscalarmode.\n+\t(<sse>_comi, <sse>_ucomi, sse4a_movnt<mode>): Adjust assembler\n+\ttemplates for ssemodesuffix mode attribute.\n+\t(*andnot<mode>3, *<any_logic:code><mode>3): Use ssevecmodesuffix\n+\tmode attribute.\n+\n+\tAdjust RTX patterns globally for renamed mode attributes.\n+\n 2011-04-27  Jan Hubcika  <jh@suse.cz>\n \n \t* ipa-inline.h (struct inline_edge_summary): Add predicate pointer.\n@@ -18,8 +48,7 @@\n \t(edge_set_predicate): New function.\n \t(inline_edge_duplication_hook): Duplicate edge predicates.\n \t(inline_edge_removal_hook): Free edge predicates.\n-\t(dump_inline_edge_summary): Add INFO parameter; dump\n-\tedge predicates.\n+\t(dump_inline_edge_summary): Add INFO parameter; dump edge predicates.\n \t(dump_inline_summary): Update.\n \t(estimate_function_body_sizes): Set edge predicates.\n \t(estimate_calls_size_and_time): Handle predicates."}, {"sha": "a3ad0f35bf52c01b6809aaa69f4265f504461feb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb734aa019ae7569549ba2cfa1887dd230f6d74/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb734aa019ae7569549ba2cfa1887dd230f6d74/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cbb734aa019ae7569549ba2cfa1887dd230f6d74", "patch": "@@ -934,8 +934,16 @@\n ;; All integer modes handled by SSE cvtts?2si* operators.\n (define_mode_iterator SSEMODEI24 [SI DI])\n \n-;; SSE asm suffix for floating point modes\n-(define_mode_attr ssemodefsuffix [(SF \"s\") (DF \"d\")])\n+;; SSE instruction suffix for various modes\n+(define_mode_attr ssemodesuffix\n+  [(SF \"ss\") (DF \"sd\")\n+   (V8SF \"ps\") (V4DF \"pd\")\n+   (V4SF \"ps\") (V2DF \"pd\")\n+   (V16QI \"b\") (V8HI \"w\") (V4SI \"d\") (V2DI \"q\")\n+   (V8SI \"si\")])\n+\n+;; SSE vector suffix for floating point modes\n+(define_mode_attr ssevecmodesuffix [(SF \"ps\") (DF \"pd\")])\n \n ;; SSE vector mode corresponding to a scalar mode\n (define_mode_attr ssevecmode\n@@ -4610,7 +4618,7 @@\n \t(fix:DI (match_operand:MODEF 1 \"nonimmediate_operand\" \"x,m\")))]\n   \"TARGET_64BIT && SSE_FLOAT_MODE_P (<MODE>mode)\n    && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n-  \"%vcvtts<ssemodefsuffix>2si{q}\\t{%1, %0|%0, %1}\"\n+  \"%vcvtt<ssemodesuffix>2si{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"prefix_rex\" \"1\")\n@@ -4624,7 +4632,7 @@\n \t(fix:SI (match_operand:MODEF 1 \"nonimmediate_operand\" \"x,m\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\n    && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n-  \"%vcvtts<ssemodefsuffix>2si\\t{%1, %0|%0, %1}\"\n+  \"%vcvtt<ssemodesuffix>2si\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")\n@@ -5124,8 +5132,8 @@\n    && (TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\"\n   \"@\n    fild%Z1\\t%1\n-   %vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\n-   %vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n+   %vcvtsi2<MODEF:ssemodesuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\n+   %vcvtsi2<MODEF:ssemodesuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"fmov,sseicvt,sseicvt\")\n    (set_attr \"prefix\" \"orig,maybe_vex,maybe_vex\")\n    (set_attr \"mode\" \"<MODEF:MODE>\")\n@@ -5150,7 +5158,7 @@\n    && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\"\n   \"@\n    fild%Z1\\t%1\n-   %vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n+   %vcvtsi2<MODEF:ssemodesuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"fmov,sseicvt\")\n    (set_attr \"prefix\" \"orig,maybe_vex\")\n    (set_attr \"mode\" \"<MODEF:MODE>\")\n@@ -5230,7 +5238,7 @@\n \t\t\t\t  CONST0_RTX (V4SImode), operands[2]));\n     }\n   emit_insn\n-    (gen_sse2_cvtdq2p<ssemodefsuffix> (operands[3], operands[4]));\n+    (gen_sse2_cvtdq2<ssevecmodesuffix> (operands[3], operands[4]));\n   DONE;\n })\n \n@@ -5253,7 +5261,7 @@\n   emit_insn (gen_sse2_loadld (operands[4],\n \t\t\t      CONST0_RTX (V4SImode), operands[1]));\n   emit_insn\n-    (gen_sse2_cvtdq2p<ssemodefsuffix> (operands[3], operands[4]));\n+    (gen_sse2_cvtdq2<ssevecmodesuffix> (operands[3], operands[4]));\n   DONE;\n })\n \n@@ -5288,7 +5296,7 @@\n   else\n     gcc_unreachable ();\n   emit_insn\n-    (gen_sse2_cvtdq2p<ssemodefsuffix> (operands[3], operands[4]));\n+    (gen_sse2_cvtdq2<ssevecmodesuffix> (operands[3], operands[4]));\n   DONE;\n })\n \n@@ -5310,7 +5318,7 @@\n   emit_insn (gen_sse2_loadld (operands[4],\n \t\t\t      CONST0_RTX (V4SImode), operands[1]));\n   emit_insn\n-    (gen_sse2_cvtdq2p<ssemodefsuffix> (operands[3], operands[4]));\n+    (gen_sse2_cvtdq2<ssevecmodesuffix> (operands[3], operands[4]));\n   DONE;\n })\n \n@@ -5336,7 +5344,7 @@\n   \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n    && (TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\"\n-  \"%vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n+  \"%vcvtsi2<MODEF:ssemodesuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODEF:MODE>\")\n@@ -5371,7 +5379,7 @@\n   \"(<SSEMODEI24:MODE>mode != DImode || TARGET_64BIT)\n    && SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n    && !(TARGET_INTER_UNIT_CONVERSIONS || optimize_function_for_size_p (cfun))\"\n-  \"%vcvtsi2s<MODEF:ssemodefsuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n+  \"%vcvtsi2<MODEF:ssemodesuffix><SSEMODEI24:rex64suffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODEF:MODE>\")\n@@ -10729,8 +10737,8 @@\n \t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm,xm\")]))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n   \"@\n-   cmp%D3s<ssemodefsuffix>\\t{%2, %0|%0, %2}\n-   vcmp%D3s<ssemodefsuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   cmp%D3<ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vcmp%D3<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"ssecmp\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -13324,7 +13332,7 @@\n \t(sqrt:MODEF\n \t  (match_operand:MODEF 1 \"nonimmediate_operand\" \"xm\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n-  \"%vsqrts<ssemodefsuffix>\\t{%1, %d0|%d0, %1}\"\n+  \"%vsqrt<ssemodesuffix>\\t{%1, %d0|%d0, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"sqrt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -14498,7 +14506,7 @@\n \t\t       (match_operand:SI 2 \"const_0_to_15_operand\" \"n\")]\n \t\t      UNSPEC_ROUND))]\n   \"TARGET_ROUND\"\n-  \"%vrounds<ssemodefsuffix>\\t{%2, %1, %d0|%d0, %1, %2}\"\n+  \"%vround<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -16413,8 +16421,8 @@\n \t  (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"@\n-   <maxmin_float>s<ssemodefsuffix>\\t{%2, %0|%0, %2}\n-   v<maxmin_float>s<ssemodefsuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   <maxmin_float><ssemodesuffix>\\t{%2, %0|%0, %2}\n+   v<maxmin_float><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"type\" \"sseadd\")\n@@ -16434,8 +16442,8 @@\n \t UNSPEC_IEEE_MIN))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"@\n-   mins<ssemodefsuffix>\\t{%2, %0|%0, %2}\n-   vmins<ssemodefsuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   min<ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vmin<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"type\" \"sseadd\")\n@@ -16449,8 +16457,8 @@\n \t UNSPEC_IEEE_MAX))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"@\n-   maxs<ssemodefsuffix>\\t{%2, %0|%0, %2}\n-   vmaxs<ssemodefsuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   max<ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vmax<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"type\" \"sseadd\")"}, {"sha": "02e02b4d6208d8df23c0ee78d7e2ff0536ad261e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 165, "deletions": 158, "changes": 323, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb734aa019ae7569549ba2cfa1887dd230f6d74/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb734aa019ae7569549ba2cfa1887dd230f6d74/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=cbb734aa019ae7569549ba2cfa1887dd230f6d74", "patch": "@@ -87,18 +87,81 @@\n   [(V4SF \"sse4_1\") (V2DF \"sse4_1\")\n    (V8SF \"avx\") (V4DF \"avx\")])\n \n+(define_mode_attr avxsizesuffix\n+  [(V32QI \"256\") (V8SI \"256\")\n+   (V16QI \"\")  (V4SI \"\")\n+   (V8SF \"256\") (V4DF \"256\")\n+   (V4SF \"\") (V2DF \"\")])\n+ \n+;; SSE instruction mode\n+(define_mode_attr sseinsnmode\n+  [(V32QI \"OI\") (V16HI \"OI\") (V8SI \"OI\") (V4DI \"OI\")\n+   (V16QI \"TI\") (V8HI \"TI\") (V4SI \"TI\") (V2DI \"TI\") (V1TI \"TI\")\n+   (V8SF \"V8SF\") (V4DF \"V4DF\")\n+   (V4SF \"V4SF\") (V2DF \"V2DF\")])\n+\n+;; Mapping of vector float modes to an integer mode of the same size\n+(define_mode_attr sseintvecmode\n+  [(V8SF \"V8SI\") (V4DF \"V4DI\")\n+   (V4SF \"V4SI\") (V2DF \"V2DI\")])\n+\n+;; Mapping of vector modes to a vector mode of double size\n+(define_mode_attr ssedoublevecmode\n+  [(V32QI \"V64QI\") (V16HI \"V32HI\") (V8SI \"V16SI\") (V4DI \"V8DI\")\n+   (V16QI \"V32QI\") (V8HI \"V16HI\") (V4SI \"V8SI\") (V2DI \"V4DI\")\n+   (V8SF \"V16SF\") (V4DF \"V8DF\")\n+   (V4SF \"V8SF\") (V2DF \"V4DF\")])\n+\n+;; Mapping of vector modes to a vector mode of half size\n+(define_mode_attr ssehalfvecmode\n+  [(V32QI \"V16QI\") (V16HI \"V8HI\") (V8SI \"V4SI\") (V4DI \"V2DI\")\n+   (V16QI  \"V8QI\") (V8HI  \"V4HI\") (V4SI \"V2SI\")\n+   (V8SF \"V4SF\") (V4DF \"V2DF\")\n+   (V4SF \"V2SF\")])\n+\n+;; Mapping of vector modes back to the scalar modes\n+(define_mode_attr ssescalarmode\n+  [(V32QI \"QI\") (V16HI \"HI\") (V8SI \"SI\") (V4DI \"DI\")\n+   (V16QI \"QI\") (V8HI \"HI\") (V4SI \"SI\") (V2DI \"DI\")\n+   (V8SF \"SF\") (V4DF \"DF\")\n+   (V4SF \"SF\") (V2DF \"DF\")])\n+\n+;; Number of scalar elements in each vector type\n+(define_mode_attr ssescalarnum\n+  [(V32QI \"32\") (V16HI \"16\") (V8SI \"8\") (V4DI \"4\")\n+   (V16QI \"16\") (V8HI \"8\") (V4SI \"4\") (V2DI \"2\")\n+   (V8SF \"8\") (V4DF \"4\")\n+   (V4SF \"4\") (V2DF \"2\")])\n+\n+;; SSE scalar suffix for vector modes\n+(define_mode_attr ssescalarmodesuffix\n+  [(SF \"ss\") (DF \"sd\")\n+   (V8SF \"ss\") (V4DF \"sd\")\n+   (V4SF \"ss\") (V2DF \"sd\")\n+   (V8SI \"ss\") (V4DI \"sd\")\n+   (V4SI \"d\")])\n+\n ;; Pack/unpack vector modes\n (define_mode_attr sseunpackmode\n   [(V16QI \"V8HI\") (V8HI \"V4SI\") (V4SI \"V2DI\")])\n \n (define_mode_attr ssepackmode\n   [(V8HI \"V16QI\") (V4SI \"V8HI\") (V2DI \"V4SI\")])\n \n+;; Mapping of the max integer size for xop rotate immediate constraint\n+(define_mode_attr sserotatemax\n+  [(V16QI \"7\") (V8HI \"15\") (V4SI \"31\") (V2DI \"63\")])\n \n+;; Mapping of immediate bits for blend instructions\n+(define_mode_attr blendbits\n+  [(V8SF \"255\") (V4SF \"15\") (V4DF \"15\") (V2DF \"3\")])\n \n ;; Instruction suffix for sign and zero extensions.\n (define_code_attr extsuffix [(sign_extend \"sx\") (zero_extend \"zx\")])\n \n+\n+\n+\n ;; All 16-byte vector modes handled by SSE\n (define_mode_iterator SSEMODE [V16QI V8HI V4SI V2DI V4SF V2DF])\n \n@@ -151,62 +214,6 @@\n    (V2DF \"TARGET_SSE\") (V4SF \"TARGET_SSE\")\n    (V4DF \"TARGET_AVX\") (V8SF \"TARGET_AVX\")])\n \n-;; Mapping from integer vector mode to mnemonic suffix\n-(define_mode_attr ssevecsize [(V16QI \"b\") (V8HI \"w\") (V4SI \"d\") (V2DI \"q\")])\n-\n-;; Mapping of the insn mnemonic suffix\n-(define_mode_attr ssemodesuffix\n-  [(SF \"ss\") (DF \"sd\") (V4SF \"ps\") (V2DF \"pd\") (V8SF \"ps\") (V4DF \"pd\")\n-   (V8SI \"ps\") (V4DI \"pd\")])\n-(define_mode_attr ssescalarmodesuffix \n-  [(SF \"ss\") (DF \"sd\") (V4SF \"ss\") (V2DF \"sd\") (V8SF \"ss\") (V8SI \"ss\")\n-   (V4DF \"sd\") (V4SI \"d\") (V4DI \"sd\")])\n-\n-;; Mapping of the max integer size for xop rotate immediate constraint\n-(define_mode_attr sserotatemax [(V16QI \"7\") (V8HI \"15\") (V4SI \"31\") (V2DI \"63\")])\n-\n-;; Mapping of vector modes back to the scalar modes\n-(define_mode_attr ssescalarmode [(V4SF \"SF\") (V2DF \"DF\")\n-\t\t\t\t (V16QI \"QI\") (V8HI \"HI\")\n-\t\t\t\t (V4SI \"SI\") (V2DI \"DI\")])\n-\n-;; Mapping of vector modes to a vector mode of double size\n-(define_mode_attr ssedoublesizemode\n-  [(V2DF \"V4DF\") (V2DI \"V4DI\") (V4SF \"V8SF\") (V4SI \"V8SI\")\n-   (V8HI \"V16HI\") (V16QI \"V32QI\")\n-   (V4DF \"V8DF\") (V8SF \"V16SF\")\n-   (V4DI \"V8DI\") (V8SI \"V16SI\") (V16HI \"V32HI\") (V32QI \"V64QI\")])\n-\n-;; Number of scalar elements in each vector type\n-(define_mode_attr ssescalarnum\n-  [(V4SF \"4\") (V2DF \"2\") (V16QI \"16\") (V8HI \"8\") (V4SI \"4\") (V2DI \"2\")\n-   (V8SF \"8\") (V4DF \"4\") (V32QI \"32\") (V16HI \"16\") (V8SI \"8\") (V4DI \"4\")])\n-\n-;; Mapping for AVX\n-(define_mode_attr avxvecmode\n-  [(V16QI \"TI\") (V8HI \"TI\") (V4SI \"TI\") (V2DI \"TI\") (V1TI \"TI\")\n-   (V4SF \"V4SF\") (V8SF \"V8SF\") (V2DF \"V2DF\") (V4DF \"V4DF\")\n-   (V32QI \"OI\") (V16HI \"OI\") (V8SI \"OI\") (V4DI \"OI\")])\n-(define_mode_attr avxhalfvecmode\n-  [(V32QI \"V16QI\") (V16HI \"V8HI\") (V8SI \"V4SI\") (V4DI \"V2DI\")\n-   (V8SF \"V4SF\") (V4DF \"V2DF\")\n-   (V16QI  \"V8QI\") (V8HI  \"V4HI\") (V4SI \"V2SI\") (V4SF \"V2SF\")])\n-(define_mode_attr avxscalarmode\n-  [(V16QI \"QI\") (V8HI  \"HI\") (V4SI \"SI\") (V2DI \"DI\") (V4SF \"SF\") (V2DF \"DF\")\n-   (V32QI \"QI\") (V16HI \"HI\") (V8SI \"SI\") (V4DI \"DI\") (V8SF \"SF\") (V4DF \"DF\")])\n-(define_mode_attr avxpermvecmode\n-  [(V2DF \"V2DI\") (V4SF \"V4SI\") (V4DF \"V4DI\") (V8SF \"V8SI\")])\n-(define_mode_attr avxmodesuffixp\n- [(V2DF \"pd\") (V4SI \"si\") (V4SF \"ps\") (V8SF \"ps\") (V8SI \"si\")\n-  (V4DF \"pd\")])\n-(define_mode_attr avxmodesuffix\n-  [(V16QI \"\") (V32QI \"256\") (V4SI \"\") (V4SF \"\") (V2DF \"\")\n-   (V8SI \"256\") (V8SF \"256\") (V4DF \"256\")])\n-\n-;; Mapping of immediate bits for blend instructions\n-(define_mode_attr blendbits\n-  [(V8SF \"255\") (V4SF \"15\") (V4DF \"15\") (V2DF \"3\")])\n-\n ;; Patterns whose name begins with \"sse{,2,3}_\" are invoked by intrinsics.\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -284,7 +291,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n \t(cond [(ne (symbol_ref \"TARGET_AVX\") (const_int 0))\n-\t         (const_string \"<avxvecmode>\")\n+\t         (const_string \"<sseinsnmode>\")\n \t       (ior (ior\n \t      \t      (ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n \t\t      \t  (const_int 0))\n@@ -391,7 +398,7 @@\n   DONE;\n })\n \n-(define_expand \"<sse>_movu<ssemodesuffix><avxmodesuffix>\"\n+(define_expand \"<sse>_movu<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF 0 \"nonimmediate_operand\" \"\")\n \t(unspec:VF\n \t  [(match_operand:VF 1 \"nonimmediate_operand\" \"\")]\n@@ -402,7 +409,7 @@\n     operands[1] = force_reg (<MODE>mode, operands[1]);\n })\n \n-(define_insn \"*<sse>_movu<ssemodesuffix><avxmodesuffix>\"\n+(define_insn \"*<sse>_movu<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF 0 \"nonimmediate_operand\" \"=x,m\")\n \t(unspec:VF\n \t  [(match_operand:VF 1 \"nonimmediate_operand\" \"xm,x\")]\n@@ -414,7 +421,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"<sse2>_movdqu<avxmodesuffix>\"\n+(define_expand \"<sse2>_movdqu<avxsizesuffix>\"\n   [(set (match_operand:VI1 0 \"nonimmediate_operand\" \"\")\n \t(unspec:VI1 [(match_operand:VI1 1 \"nonimmediate_operand\" \"\")]\n \t\t    UNSPEC_MOVU))]\n@@ -424,7 +431,7 @@\n     operands[1] = force_reg (<MODE>mode, operands[1]);\n })\n \n-(define_insn \"*<sse2>_movdqu<avxmodesuffix>\"\n+(define_insn \"*<sse2>_movdqu<avxsizesuffix>\"\n   [(set (match_operand:VI1 0 \"nonimmediate_operand\" \"=x,m\")\n \t(unspec:VI1 [(match_operand:VI1 1 \"nonimmediate_operand\" \"xm,x\")]\n \t\t    UNSPEC_MOVU))]\n@@ -438,9 +445,9 @@\n      (const_string \"*\")\n      (const_string \"1\")))\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"<avxvecmode>\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<sse3>_lddqu<avxmodesuffix>\"\n+(define_insn \"<sse3>_lddqu<avxsizesuffix>\"\n   [(set (match_operand:VI1 0 \"register_operand\" \"=x\")\n \t(unspec:VI1 [(match_operand:VI1 1 \"memory_operand\" \"m\")]\n \t\t    UNSPEC_LDDQU))]\n@@ -459,7 +466,7 @@\n      (const_string \"*\")\n      (const_string \"1\")))\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"<avxvecmode>\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"sse2_movntsi\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n@@ -494,7 +501,7 @@\n      (const_string \"*\")\n      (const_string \"1\")))\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"<avxvecmode>\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n ; Expand patterns for non-temporal stores.  At the moment, only those\n ; that directly map to insns are defined; it would be possible to\n@@ -1236,7 +1243,7 @@\n \t    (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)]))))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n-  \"%vcomis<ssemodefsuffix>\\t{%1, %0|%0, %1}\"\n+  \"%vcomi<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"prefix_rep\" \"0\")\n@@ -1256,7 +1263,7 @@\n \t    (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)]))))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n-  \"%vucomis<ssemodefsuffix>\\t{%1, %0|%0, %1}\"\n+  \"%vucomi<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"prefix_rep\" \"0\")\n@@ -1394,15 +1401,15 @@\n   static char buf[32];\n   const char *insn;\n   const char *suffix\n-    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"s\" : \"<ssemodefsuffix>\";\n+    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"ps\" : \"<ssevecmodesuffix>\";\n \n   switch (which_alternative)\n     {\n     case 0:\n-      insn = \"andnp%s\\t{%%2, %%0|%%0, %%2}\";\n+      insn = \"andn%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n-      insn = \"vandnp%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      insn = \"vandn%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n       break;\n     default:\n       gcc_unreachable ();\n@@ -1426,15 +1433,15 @@\n   static char buf[32];\n   const char *insn;\n   const char *suffix\n-    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"s\" : \"<ssemodefsuffix>\";\n+    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"ps\" : \"<ssevecmodesuffix>\";\n \n   switch (which_alternative)\n     {\n     case 0:\n-      insn = \"<logic>p%s\\t{%%2, %%0|%%0, %%2}\";\n+      insn = \"<logic>%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n-      insn = \"v<logic>p%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      insn = \"v<logic>%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n       break;\n     default:\n       gcc_unreachable ();\n@@ -3119,7 +3126,7 @@\n (define_insn \"sse_shufps_<mode>\"\n   [(set (match_operand:SSEMODE4S 0 \"register_operand\" \"=x,x\")\n \t(vec_select:SSEMODE4S\n-\t  (vec_concat:<ssedoublesizemode>\n+\t  (vec_concat:<ssedoublevecmode>\n \t    (match_operand:SSEMODE4S 1 \"register_operand\" \"0,x\")\n \t    (match_operand:SSEMODE4S 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (parallel [(match_operand 3 \"const_0_to_3_operand\" \"\")\n@@ -3557,7 +3564,7 @@\n })\n \n (define_expand \"avx_vextractf128<mode>\"\n-  [(match_operand:<avxhalfvecmode> 0 \"nonimmediate_operand\" \"\")\n+  [(match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"\")\n    (match_operand:AVX256MODE 1 \"register_operand\" \"\")\n    (match_operand:SI 2 \"const_0_to_1_operand\" \"\")]\n   \"TARGET_AVX\"\n@@ -3581,8 +3588,8 @@\n })\n \n (define_insn_and_split \"vec_extract_lo_<mode>\"\n-  [(set (match_operand:<avxhalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(vec_select:<avxhalfvecmode>\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(vec_select:<ssehalfvecmode>\n \t  (match_operand:AVX256MODE4P 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (parallel [(const_int 0) (const_int 1)])))]\n   \"TARGET_AVX\"\n@@ -3592,16 +3599,16 @@\n {\n   rtx op1 = operands[1];\n   if (REG_P (op1))\n-    op1 = gen_rtx_REG (<avxhalfvecmode>mode, REGNO (op1));\n+    op1 = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (op1));\n   else\n-    op1 = gen_lowpart (<avxhalfvecmode>mode, op1);\n+    op1 = gen_lowpart (<ssehalfvecmode>mode, op1);\n   emit_move_insn (operands[0], op1);\n   DONE;\n })\n \n (define_insn \"vec_extract_hi_<mode>\"\n-  [(set (match_operand:<avxhalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(vec_select:<avxhalfvecmode>\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(vec_select:<ssehalfvecmode>\n \t  (match_operand:AVX256MODE4P 1 \"register_operand\" \"x,x\")\n \t  (parallel [(const_int 2) (const_int 3)])))]\n   \"TARGET_AVX\"\n@@ -3614,8 +3621,8 @@\n    (set_attr \"mode\" \"V8SF\")])\n \n (define_insn_and_split \"vec_extract_lo_<mode>\"\n-  [(set (match_operand:<avxhalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(vec_select:<avxhalfvecmode>\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(vec_select:<ssehalfvecmode>\n \t  (match_operand:AVX256MODE8P 1 \"nonimmediate_operand\" \"xm,x\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)])))]\n@@ -3626,16 +3633,16 @@\n {\n   rtx op1 = operands[1];\n   if (REG_P (op1))\n-    op1 = gen_rtx_REG (<avxhalfvecmode>mode, REGNO (op1));\n+    op1 = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (op1));\n   else\n-    op1 = gen_lowpart (<avxhalfvecmode>mode, op1);\n+    op1 = gen_lowpart (<ssehalfvecmode>mode, op1);\n   emit_move_insn (operands[0], op1);\n   DONE;\n })\n \n (define_insn \"vec_extract_hi_<mode>\"\n-  [(set (match_operand:<avxhalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n-\t(vec_select:<avxhalfvecmode>\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(vec_select:<ssehalfvecmode>\n \t  (match_operand:AVX256MODE8P 1 \"register_operand\" \"x,x\")\n \t  (parallel [(const_int 4) (const_int 5)\n \t\t     (const_int 6) (const_int 7)])))]\n@@ -3765,7 +3772,7 @@\n })\n \n (define_expand \"vec_extract<mode>\"\n-  [(match_operand:<avxscalarmode> 0 \"register_operand\" \"\")\n+  [(match_operand:<ssescalarmode> 0 \"register_operand\" \"\")\n    (match_operand:VEC_EXTRACT_MODE 1 \"register_operand\" \"\")\n    (match_operand 2 \"const_int_operand\" \"\")]\n   \"TARGET_SSE\"\n@@ -4145,7 +4152,7 @@\n (define_insn \"sse2_shufpd_<mode>\"\n   [(set (match_operand:SSEMODE2D 0 \"register_operand\" \"=x,x\")\n \t(vec_select:SSEMODE2D\n-\t  (vec_concat:<ssedoublesizemode>\n+\t  (vec_concat:<ssedoublevecmode>\n \t    (match_operand:SSEMODE2D 1 \"register_operand\" \"0,x\")\n \t    (match_operand:SSEMODE2D 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (parallel [(match_operand 3 \"const_0_to_1_operand\" \"\")\n@@ -4501,8 +4508,8 @@\n \t  (match_operand:VI_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n-   p<plusminus_mnemonic><ssevecsize>\\t{%2, %0|%0, %2}\n-   vp<plusminus_mnemonic><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+   p<plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_data16\" \"1,*\")\n@@ -4524,8 +4531,8 @@\n \t  (match_operand:VI12_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n-   p<plusminus_mnemonic><ssevecsize>\\t{%2, %0|%0, %2}\n-   vp<plusminus_mnemonic><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+   p<plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_data16\" \"1,*\")\n@@ -5149,8 +5156,8 @@\n \t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,xN\")))]\n   \"TARGET_SSE2\"\n   \"@\n-   psra<ssevecsize>\\t{%2, %0|%0, %2}\n-   vpsra<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+   psra<ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vpsra<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseishft\")\n    (set (attr \"length_immediate\")\n@@ -5168,8 +5175,8 @@\n \t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,xN\")))]\n   \"TARGET_SSE2\"\n   \"@\n-   psrl<ssevecsize>\\t{%2, %0|%0, %2}\n-   vpsrl<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+   psrl<ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vpsrl<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseishft\")\n    (set (attr \"length_immediate\")\n@@ -5187,8 +5194,8 @@\n \t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,xN\")))]\n   \"TARGET_SSE2\"\n   \"@\n-   psll<ssevecsize>\\t{%2, %0|%0, %2}\n-   vpsll<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+   psll<ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vpsll<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseishft\")\n    (set (attr \"length_immediate\")\n@@ -5281,8 +5288,8 @@\n \t  (match_operand:VI14_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE4_1 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n-   p<maxmin_int><ssevecsize>\\t{%2, %0|%0, %2}\n-   vp<maxmin_int><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+   p<maxmin_int><ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_extra\" \"1,*\")\n@@ -5410,8 +5417,8 @@\n \t  (match_operand:VI24_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE4_1 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n-   p<maxmin_int><ssevecsize>\\t{%2, %0|%0, %2}\n-   vp<maxmin_int><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+   p<maxmin_int><ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_extra\" \"1,*\")\n@@ -5580,8 +5587,8 @@\n   \"TARGET_SSE2 && !TARGET_XOP\n    && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n   \"@\n-   pcmpeq<ssevecsize>\\t{%2, %0|%0, %2}\n-   vpcmpeq<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+   pcmpeq<ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vpcmpeq<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_data16\" \"1,*\")\n@@ -5626,8 +5633,8 @@\n \t  (match_operand:VI124_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE2 && !TARGET_XOP\"\n   \"@\n-   pcmpgt<ssevecsize>\\t{%2, %0|%0, %2}\n-   vpcmpgt<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+   pcmpgt<ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vpcmpgt<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_data16\" \"1,*\")\n@@ -6893,7 +6900,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"<sse>_movmsk<ssemodesuffix><avxmodesuffix>\"\n+(define_insn \"<sse>_movmsk<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI\n \t  [(match_operand:VF 1 \"register_operand\" \"x\")]\n@@ -7706,8 +7713,8 @@\n \t  UNSPEC_PSIGN))]\n   \"TARGET_SSSE3\"\n   \"@\n-   psign<ssevecsize>\\t{%2, %0|%0, %2}\n-   vpsign<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+   psign<ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vpsign<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_data16\" \"1,*\")\n@@ -7780,7 +7787,7 @@\n \t(abs:SSEMODE124\n \t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSSE3\"\n-  \"%vpabs<ssevecsize>\\t{%1, %0|%0, %1}\"\n+  \"%vpabs<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -7811,7 +7818,7 @@\n \t  [(match_operand:MODEF 1 \"register_operand\" \"x\")]\n           UNSPEC_MOVNT))]\n   \"TARGET_SSE4A\"\n-  \"movnts<ssemodefsuffix>\\t{%1, %0|%0, %1}\"\n+  \"movnt<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -7884,7 +7891,7 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"<sse4_1>_blend<ssemodesuffix><avxmodesuffix>\"\n+(define_insn \"<sse4_1>_blend<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:VF\n \t  (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")\n@@ -7902,7 +7909,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse4_1>_blendv<ssemodesuffix><avxmodesuffix>\"\n+(define_insn \"<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF 0 \"reg_not_xmm0_operand_maybe_avx\" \"=x,x\")\n \t(unspec:VF\n \t  [(match_operand:VF 1 \"reg_not_xmm0_operand_maybe_avx\" \"0,x\")\n@@ -7921,7 +7928,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse4_1>_dp<ssemodesuffix><avxmodesuffix>\"\n+(define_insn \"<sse4_1>_dp<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x,x\")\n \t(unspec:VF\n \t  [(match_operand:VF 1 \"nonimmediate_operand\" \"%0,x\")\n@@ -8127,7 +8134,7 @@\n \n ;; ptestps/ptestpd are very similar to comiss and ucomiss when\n ;; setting FLAGS_REG. But it is not a really compare instruction.\n-(define_insn \"avx_vtest<ssemodesuffix><avxmodesuffix>\"\n+(define_insn \"avx_vtest<ssemodesuffix><avxsizesuffix>\"\n   [(set (reg:CC FLAGS_REG)\n \t(unspec:CC [(match_operand:VF 0 \"register_operand\" \"x\")\n \t\t    (match_operand:VF 1 \"nonimmediate_operand\" \"xm\")]\n@@ -8165,7 +8172,7 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"<sse4_1>_round<ssemodesuffix><avxmodesuffix>\"\n+(define_insn \"<sse4_1>_round<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"=x\")\n \t(unspec:VF\n \t  [(match_operand:VF 1 \"nonimmediate_operand\" \"xm\")\n@@ -9397,7 +9404,7 @@\n \t (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"xm\")\n \t (match_operand:SI 2 \"const_0_to_<sserotatemax>_operand\" \"n\")))]\n   \"TARGET_XOP\"\n-  \"vprot<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vprot<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -9410,7 +9417,7 @@\n   \"TARGET_XOP\"\n {\n   operands[3] = GEN_INT ((<ssescalarnum> * 8) - INTVAL (operands[2]));\n-  return \\\"vprot<ssevecsize>\\t{%3, %1, %0|%0, %1, %3}\\\";\n+  return \\\"vprot<ssemodesuffix>\\t{%3, %1, %0|%0, %1, %3}\\\";\n }\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -9451,7 +9458,7 @@\n \t  (match_dup 1)\n \t  (neg:SSEMODE1248 (match_dup 2)))))]\n   \"TARGET_XOP && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-  \"vprot<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vprot<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix_extra\" \"2\")\n@@ -9506,7 +9513,7 @@\n \t  (match_dup 1)\n \t  (neg:SSEMODE1248 (match_dup 2)))))]\n   \"TARGET_XOP && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-  \"vpsha<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vpsha<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix_extra\" \"2\")\n@@ -9525,7 +9532,7 @@\n \t  (match_dup 1)\n \t  (neg:SSEMODE1248 (match_dup 2)))))]\n   \"TARGET_XOP && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-  \"vpshl<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vpshl<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n    (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix_extra\" \"2\")\n@@ -9676,7 +9683,7 @@\n \t [(match_operand:SSEMODE1248 2 \"register_operand\" \"x\")\n \t  (match_operand:SSEMODE1248 3 \"nonimmediate_operand\" \"xm\")]))]\n   \"TARGET_XOP\"\n-  \"vpcom%Y1<ssevecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n+  \"vpcom%Y1<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")\n    (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix_rep\" \"0\")\n@@ -9690,7 +9697,7 @@\n \t [(match_operand:SSEMODE1248 2 \"register_operand\" \"x\")\n \t  (match_operand:SSEMODE1248 3 \"nonimmediate_operand\" \"xm\")]))]\n   \"TARGET_XOP\"\n-  \"vpcom%Y1u<ssevecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n+  \"vpcom%Y1u<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix_rep\" \"0\")\n@@ -9709,7 +9716,7 @@\n \t   (match_operand:SSEMODE1248 3 \"nonimmediate_operand\" \"xm\")])]\n \t UNSPEC_XOP_UNSIGNED_CMP))]\n   \"TARGET_XOP\"\n-  \"vpcom%Y1u<ssevecsize>\\t{%3, %2, %0|%0, %2, %3}\"\n+  \"vpcom%Y1u<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_data16\" \"0\")\n    (set_attr \"prefix_extra\" \"2\")\n@@ -9728,8 +9735,8 @@\n   \"TARGET_XOP\"\n {\n   return ((INTVAL (operands[3]) != 0)\n-\t  ? \"vpcomtrue<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-\t  : \"vpcomfalse<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\");\n+\t  ? \"vpcomtrue<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+\t  : \"vpcomfalse<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\");\n }\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_data16\" \"0\")\n@@ -9742,7 +9749,7 @@\n \t(unspec:AVXMODEF2P\n \t  [(match_operand:AVXMODEF2P 1 \"register_operand\" \"x\")\n \t   (match_operand:AVXMODEF2P 2 \"nonimmediate_operand\" \"%x\")\n-\t   (match_operand:<avxpermvecmode> 3 \"nonimmediate_operand\" \"xm\")\n+\t   (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"xm\")\n \t   (match_operand:SI 4 \"const_0_to_3_operand\" \"n\")]\n \t  UNSPEC_VPERMIL2))]\n   \"TARGET_XOP\"\n@@ -9901,7 +9908,7 @@\n (define_insn \"vec_dup<mode>\"\n   [(set (match_operand:AVX256MODE24P 0 \"register_operand\" \"=x,x\")\n \t(vec_duplicate:AVX256MODE24P\n-\t  (match_operand:<avxscalarmode> 1 \"nonimmediate_operand\" \"m,?x\")))]\n+\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"m,?x\")))]\n   \"TARGET_AVX\"\n   \"@\n    vbroadcast<ssescalarmodesuffix>\\t{%1, %0|%0, %1}\n@@ -9914,16 +9921,16 @@\n (define_split\n   [(set (match_operand:AVX256MODE24P 0 \"register_operand\" \"\")\n \t(vec_duplicate:AVX256MODE24P\n-\t  (match_operand:<avxscalarmode> 1 \"register_operand\" \"\")))]\n+\t  (match_operand:<ssescalarmode> 1 \"register_operand\" \"\")))]\n   \"TARGET_AVX && reload_completed\"\n-  [(set (match_dup 2) (vec_duplicate:<avxhalfvecmode> (match_dup 1)))\n+  [(set (match_dup 2) (vec_duplicate:<ssehalfvecmode> (match_dup 1)))\n    (set (match_dup 0) (vec_concat:AVX256MODE24P (match_dup 2) (match_dup 2)))]\n-  \"operands[2] = gen_rtx_REG (<avxhalfvecmode>mode, REGNO (operands[0]));\")\n+  \"operands[2] = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (operands[0]));\")\n \n (define_insn \"avx_vbroadcastf128_<mode>\"\n   [(set (match_operand:AVX256MODE 0 \"register_operand\" \"=x,x,x\")\n \t(vec_concat:AVX256MODE\n-\t  (match_operand:<avxhalfvecmode> 1 \"nonimmediate_operand\" \"m,0,?x\")\n+\t  (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"m,0,?x\")\n \t  (match_dup 1)))]\n   \"TARGET_AVX\"\n   \"@\n@@ -9999,8 +10006,8 @@\n       DONE;\n     }\n \n-  operands[1] = adjust_address_nv (op1, <avxscalarmode>mode,\n-  \t      \t\t\t   elt * GET_MODE_SIZE (<avxscalarmode>mode));\n+  operands[1] = adjust_address_nv (op1, <ssescalarmode>mode,\n+  \t      \t\t\t   elt * GET_MODE_SIZE (<ssescalarmode>mode));\n })\n \n (define_expand \"avx_vpermil<mode>\"\n@@ -10074,7 +10081,7 @@\n   [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x\")\n \t(unspec:AVXMODEF2P\n \t  [(match_operand:AVXMODEF2P 1 \"register_operand\" \"x\")\n-\t   (match_operand:<avxpermvecmode> 2 \"nonimmediate_operand\" \"xm\")]\n+\t   (match_operand:<sseintvecmode> 2 \"nonimmediate_operand\" \"xm\")]\n \t  UNSPEC_VPERMIL))]\n   \"TARGET_AVX\"\n   \"vpermil<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -10106,7 +10113,7 @@\n       for (i = 0; i < nelt2; ++i)\n \tperm[i + nelt2] = GEN_INT (base + i);\n \n-      t2 = gen_rtx_VEC_CONCAT (<ssedoublesizemode>mode,\n+      t2 = gen_rtx_VEC_CONCAT (<ssedoublevecmode>mode,\n \t\t\t       operands[1], operands[2]);\n       t1 = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nelt, perm));\n       t2 = gen_rtx_VEC_SELECT (<MODE>mode, t2, t1);\n@@ -10138,7 +10145,7 @@\n (define_insn \"*avx_vperm2f128<mode>_nozero\"\n   [(set (match_operand:AVX256MODE2P 0 \"register_operand\" \"=x\")\n \t(vec_select:AVX256MODE2P\n-\t  (vec_concat:<ssedoublesizemode>\n+\t  (vec_concat:<ssedoublevecmode>\n \t    (match_operand:AVX256MODE2P 1 \"register_operand\" \"x\")\n \t    (match_operand:AVX256MODE2P 2 \"nonimmediate_operand\" \"xm\"))\n \t  (match_parallel 3 \"\"\n@@ -10159,7 +10166,7 @@\n (define_expand \"avx_vinsertf128<mode>\"\n   [(match_operand:AVX256MODE 0 \"register_operand\" \"\")\n    (match_operand:AVX256MODE 1 \"register_operand\" \"\")\n-   (match_operand:<avxhalfvecmode> 2 \"nonimmediate_operand\" \"\")\n+   (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"\")\n    (match_operand:SI 3 \"const_0_to_1_operand\" \"\")]\n   \"TARGET_AVX\"\n {\n@@ -10184,8 +10191,8 @@\n (define_insn \"vec_set_lo_<mode>\"\n   [(set (match_operand:AVX256MODE4P 0 \"register_operand\" \"=x\")\n \t(vec_concat:AVX256MODE4P\n-\t  (match_operand:<avxhalfvecmode> 2 \"nonimmediate_operand\" \"xm\")\n-\t  (vec_select:<avxhalfvecmode>\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")\n+\t  (vec_select:<ssehalfvecmode>\n \t    (match_operand:AVX256MODE4P 1 \"register_operand\" \"x\")\n \t    (parallel [(const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX\"\n@@ -10199,10 +10206,10 @@\n (define_insn \"vec_set_hi_<mode>\"\n   [(set (match_operand:AVX256MODE4P 0 \"register_operand\" \"=x\")\n \t(vec_concat:AVX256MODE4P\n-\t  (vec_select:<avxhalfvecmode>\n+\t  (vec_select:<ssehalfvecmode>\n \t    (match_operand:AVX256MODE4P 1 \"register_operand\" \"x\")\n \t    (parallel [(const_int 0) (const_int 1)]))\n-\t  (match_operand:<avxhalfvecmode> 2 \"nonimmediate_operand\" \"xm\")))]\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n   \"vinsertf128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n@@ -10214,8 +10221,8 @@\n (define_insn \"vec_set_lo_<mode>\"\n   [(set (match_operand:AVX256MODE8P 0 \"register_operand\" \"=x\")\n \t(vec_concat:AVX256MODE8P\n-\t  (match_operand:<avxhalfvecmode> 2 \"nonimmediate_operand\" \"xm\")\n-\t  (vec_select:<avxhalfvecmode>\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")\n+\t  (vec_select:<ssehalfvecmode>\n \t    (match_operand:AVX256MODE8P 1 \"register_operand\" \"x\")\n \t    (parallel [(const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n@@ -10230,11 +10237,11 @@\n (define_insn \"vec_set_hi_<mode>\"\n   [(set (match_operand:AVX256MODE8P 0 \"register_operand\" \"=x\")\n \t(vec_concat:AVX256MODE8P\n-\t  (vec_select:<avxhalfvecmode>\n+\t  (vec_select:<ssehalfvecmode>\n \t    (match_operand:AVX256MODE8P 1 \"register_operand\" \"x\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))\n-\t  (match_operand:<avxhalfvecmode> 2 \"nonimmediate_operand\" \"xm\")))]\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_AVX\"\n   \"vinsertf128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n@@ -10323,28 +10330,28 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_expand \"avx_maskload<ssemodesuffix><avxmodesuffix>\"\n+(define_expand \"avx_maskload<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF 0 \"register_operand\" \"\")\n \t(unspec:VF\n-\t  [(match_operand:<avxpermvecmode> 2 \"register_operand\" \"\")\n+\t  [(match_operand:<sseintvecmode> 2 \"register_operand\" \"\")\n \t   (match_operand:VF 1 \"memory_operand\" \"\")\n \t   (match_dup 0)]\n \t  UNSPEC_MASKMOV))]\n   \"TARGET_AVX\")\n \n-(define_expand \"avx_maskstore<ssemodesuffix><avxmodesuffix>\"\n+(define_expand \"avx_maskstore<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF 0 \"memory_operand\" \"\")\n \t(unspec:VF\n-\t  [(match_operand:<avxpermvecmode> 1 \"register_operand\" \"\")\n+\t  [(match_operand:<sseintvecmode> 1 \"register_operand\" \"\")\n \t   (match_operand:VF 2 \"register_operand\" \"\")\n \t   (match_dup 0)]\n \t  UNSPEC_MASKMOV))]\n   \"TARGET_AVX\")\n \n-(define_insn \"*avx_maskmov<ssemodesuffix><avxmodesuffix>\"\n+(define_insn \"*avx_maskmov<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF 0 \"nonimmediate_operand\" \"=x,m\")\n \t(unspec:VF\n-\t  [(match_operand:<avxpermvecmode> 1 \"register_operand\" \"x,x\")\n+\t  [(match_operand:<sseintvecmode> 1 \"register_operand\" \"x,x\")\n \t   (match_operand:VF 2 \"nonimmediate_operand\" \"m,x\")\n \t   (match_dup 0)]\n \t  UNSPEC_MASKMOV))]\n@@ -10356,10 +10363,10 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn_and_split \"avx_<avxmodesuffixp><avxmodesuffix>_<avxmodesuffixp>\"\n+(define_insn_and_split \"avx_<ssemodesuffix><avxsizesuffix>_<ssemodesuffix>\"\n   [(set (match_operand:AVX256MODE2P 0 \"nonimmediate_operand\" \"=x,m\")\n \t(unspec:AVX256MODE2P\n-\t  [(match_operand:<avxhalfvecmode> 1 \"nonimmediate_operand\" \"xm,x\")]\n+\t  [(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"xm,x\")]\n \t  UNSPEC_CAST))]\n   \"TARGET_AVX\"\n   \"#\"\n@@ -10387,8 +10394,8 @@\n (define_insn \"*vec_concat<mode>_avx\"\n   [(set (match_operand:AVX256MODE 0 \"register_operand\"   \"=x,x\")\n \t(vec_concat:AVX256MODE\n-\t  (match_operand:<avxhalfvecmode> 1 \"register_operand\" \"x,x\")\n-\t  (match_operand:<avxhalfvecmode> 2 \"vector_move_operand\" \"xm,C\")))]\n+\t  (match_operand:<ssehalfvecmode> 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:<ssehalfvecmode> 2 \"vector_move_operand\" \"xm,C\")))]\n   \"TARGET_AVX\"\n {\n   switch (which_alternative)\n@@ -10413,7 +10420,7 @@\n    (set_attr \"prefix_extra\" \"1,*\")\n    (set_attr \"length_immediate\" \"1,*\")\n    (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<avxvecmode>\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"vcvtph2ps\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")"}]}