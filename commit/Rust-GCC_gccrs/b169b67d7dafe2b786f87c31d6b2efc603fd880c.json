{"sha": "b169b67d7dafe2b786f87c31d6b2efc603fd880c", "node_id": "C_kwDOANBUbNoAKGIxNjliNjdkN2RhZmUyYjc4NmY4N2MzMWQ2YjJlZmM2MDNmZDg4MGM", "commit": {"author": {"name": "Chenghua Xu", "email": "xuchenghua@loongson.cn", "date": "2022-08-24T07:34:07Z"}, "committer": {"name": "Chenghua Xu", "email": "paul.hua.gm@gmail.com", "date": "2022-08-25T01:18:26Z"}, "message": "LoongArch: Fix pr106459 by use HWIT instead of 1UL.\n\ngcc/ChangeLog:\n\n\tPR target/106459\n\t* config/loongarch/loongarch.cc (loongarch_build_integer):\n\tUse HOST_WIDE_INT.\n\t* config/loongarch/loongarch.h (IMM_REACH): Likewise.\n\t(HWIT_1U): New Defined.\n\t(LU12I_OPERAND): Use HOST_WIDE_INT.\n\t(LU32I_OPERAND): Likewise.\n\t(LU52I_OPERAND): Likewise.\n\t(HWIT_UC_0xFFF): Likwise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/pr106459.c: New test.", "tree": {"sha": "81d2b612f1c13bfea61a4b5ea12f8855a1756a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81d2b612f1c13bfea61a4b5ea12f8855a1756a61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b169b67d7dafe2b786f87c31d6b2efc603fd880c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b169b67d7dafe2b786f87c31d6b2efc603fd880c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b169b67d7dafe2b786f87c31d6b2efc603fd880c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b169b67d7dafe2b786f87c31d6b2efc603fd880c/comments", "author": {"login": "ChenghuaXu", "id": 87753117, "node_id": "MDQ6VXNlcjg3NzUzMTE3", "avatar_url": "https://avatars.githubusercontent.com/u/87753117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChenghuaXu", "html_url": "https://github.com/ChenghuaXu", "followers_url": "https://api.github.com/users/ChenghuaXu/followers", "following_url": "https://api.github.com/users/ChenghuaXu/following{/other_user}", "gists_url": "https://api.github.com/users/ChenghuaXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChenghuaXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChenghuaXu/subscriptions", "organizations_url": "https://api.github.com/users/ChenghuaXu/orgs", "repos_url": "https://api.github.com/users/ChenghuaXu/repos", "events_url": "https://api.github.com/users/ChenghuaXu/events{/privacy}", "received_events_url": "https://api.github.com/users/ChenghuaXu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChenghuaXu", "id": 87753117, "node_id": "MDQ6VXNlcjg3NzUzMTE3", "avatar_url": "https://avatars.githubusercontent.com/u/87753117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChenghuaXu", "html_url": "https://github.com/ChenghuaXu", "followers_url": "https://api.github.com/users/ChenghuaXu/followers", "following_url": "https://api.github.com/users/ChenghuaXu/following{/other_user}", "gists_url": "https://api.github.com/users/ChenghuaXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChenghuaXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChenghuaXu/subscriptions", "organizations_url": "https://api.github.com/users/ChenghuaXu/orgs", "repos_url": "https://api.github.com/users/ChenghuaXu/repos", "events_url": "https://api.github.com/users/ChenghuaXu/events{/privacy}", "received_events_url": "https://api.github.com/users/ChenghuaXu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8fc33aabcfd8f4a4e384e022e4812caca556e0e"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "04c4ddaedce7ce9512a467fba40b5934bdbafcdb", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b169b67d7dafe2b786f87c31d6b2efc603fd880c/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b169b67d7dafe2b786f87c31d6b2efc603fd880c/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=b169b67d7dafe2b786f87c31d6b2efc603fd880c", "patch": "@@ -1500,8 +1500,8 @@ loongarch_build_integer (struct loongarch_integer_op *codes,\n       bool lu32i[2] = {(value & LU32I_B) == 0, (value & LU32I_B) == LU32I_B};\n       bool lu52i[2] = {(value & LU52I_B) == 0, (value & LU52I_B) == LU52I_B};\n \n-      int sign31 = (value & (1UL << 31)) >> 31;\n-      int sign51 = (value & (1UL << 51)) >> 51;\n+      int sign31 = (value & (HOST_WIDE_INT_1U << 31)) >> 31;\n+      int sign51 = (value & (HOST_WIDE_INT_1U << 51)) >> 51;\n       /* Determine whether the upper 32 bits are sign-extended from the lower\n \t 32 bits. If it is, the instructions to load the high order can be\n \t ommitted.  */\n@@ -1522,7 +1522,7 @@ loongarch_build_integer (struct loongarch_integer_op *codes,\n \n       /* Determine whether the 52-61 bits are sign-extended from the low order,\n \t and if not, load the 52-61 bits.  */\n-      if (!lu52i[(value & (1ULL << 51)) >> 51])\n+      if (!lu52i[(value & (HOST_WIDE_INT_1U << 51)) >> 51])\n \t{\n \t  codes[cost].method = METHOD_LU52I;\n \t  codes[cost].value = value & LU52I_B;"}, {"sha": "f4a9c329fefff492dda9d3d9bf37c5c151ae2956", "filename": "gcc/config/loongarch/loongarch.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b169b67d7dafe2b786f87c31d6b2efc603fd880c/gcc%2Fconfig%2Floongarch%2Floongarch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b169b67d7dafe2b786f87c31d6b2efc603fd880c/gcc%2Fconfig%2Floongarch%2Floongarch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.h?ref=b169b67d7dafe2b786f87c31d6b2efc603fd880c", "patch": "@@ -561,7 +561,8 @@ enum reg_class\n   64, 65, 66, 67, 68, 69, 70, 71, 72, 73}\n \n #define IMM_BITS 12\n-#define IMM_REACH (1LL << IMM_BITS)\n+#define IMM_REACH (HOST_WIDE_INT_1 << IMM_BITS)\n+#define HWIT_1U HOST_WIDE_INT_1U\n \n /* True if VALUE is an unsigned 6-bit number.  */\n \n@@ -589,18 +590,20 @@ enum reg_class\n /* True if VALUE can be loaded into a register using LU12I.  */\n \n #define LU12I_OPERAND(VALUE) \\\n-  (((VALUE) | ((1UL << 31) - IMM_REACH)) == ((1UL << 31) - IMM_REACH) \\\n-   || ((VALUE) | ((1UL << 31) - IMM_REACH)) + IMM_REACH == 0)\n+  (((VALUE) | ((HWIT_1U << 31) - IMM_REACH)) == ((HWIT_1U << 31) - IMM_REACH) \\\n+   || ((VALUE) | ((HWIT_1U << 31) - IMM_REACH)) + IMM_REACH == 0)\n \n /* True if VALUE can be loaded into a register using LU32I.  */\n \n #define LU32I_OPERAND(VALUE) \\\n-  (((VALUE) | (((1ULL << 19) - 1) << 32)) == (((1ULL << 19) - 1) << 32) \\\n-   || ((VALUE) | (((1ULL << 19) - 1) << 32)) + (1ULL << 32) == 0)\n+  (((VALUE) | (((HWIT_1U << 19) - 1) << 32)) == (((HWIT_1U << 19) - 1) << 32) \\\n+   || ((VALUE) | (((HWIT_1U << 19) - 1) << 32)) + (HWIT_1U << 32) == 0)\n \n /* True if VALUE can be loaded into a register using LU52I.  */\n \n-#define LU52I_OPERAND(VALUE) (((VALUE) | (0xfffULL << 52)) == (0xfffULL << 52))\n+#define HWIT_UC_0xFFF HOST_WIDE_INT_UC(0xfff)\n+#define LU52I_OPERAND(VALUE) \\\n+  (((VALUE) | (HWIT_UC_0xFFF << 52)) == (HWIT_UC_0xFFF << 52))\n \n /* Return a value X with the low 12 bits clear, and such that\n    VALUE - X is a signed 12-bit value.  */"}, {"sha": "eb737dc49c12a0bf953a8a958153819977e79312", "filename": "gcc/testsuite/gcc.target/loongarch/pr106459.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b169b67d7dafe2b786f87c31d6b2efc603fd880c/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr106459.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b169b67d7dafe2b786f87c31d6b2efc603fd880c/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr106459.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fpr106459.c?ref=b169b67d7dafe2b786f87c31d6b2efc603fd880c", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+/* https://gcc.gnu.org/bugzilla/show_bug.cgi?id=106459 */\n+\n+typedef unsigned int UDItype __attribute__((mode(DI)));\n+int foo(UDItype x) {\n+  x = x & (((UDItype)(((UDItype)(((UDItype)0x0F << 8) | 0x0F) << (2 * 8)) |\n+                      (((UDItype)0x0F << 8) | 0x0F))\n+            << (4 * 8)) |\n+           (((UDItype)(((UDItype)0x0F << 8) | 0x0F) << (2 * 8)) |\n+            (((UDItype)0x0F << 8) | 0x0F)));\n+  return x;\n+}"}]}