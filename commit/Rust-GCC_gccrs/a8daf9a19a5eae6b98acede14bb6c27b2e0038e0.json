{"sha": "a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThkYWY5YTE5YTVlYWU2Yjk4YWNlZGUxNGJiNmMyN2IyZTAwMzhlMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-19T00:16:45Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-19T00:16:45Z"}, "message": "Daily bump.", "tree": {"sha": "ad13fecb76856afecf54e61b3d0b1dbec20afc55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad13fecb76856afecf54e61b3d0b1dbec20afc55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/comments", "author": null, "committer": null, "parents": [{"sha": "17af39e1c0e590f4cb13d672c9ee850e871164ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17af39e1c0e590f4cb13d672c9ee850e871164ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17af39e1c0e590f4cb13d672c9ee850e871164ab"}], "stats": {"total": 450, "additions": 449, "deletions": 1}, "files": [{"sha": "a0cdf84e960fc75649eb794ff77516210335f93c", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,8 @@\n+2021-05-18  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* Makefile.def: Add configure-sim dependency on all-gnulib.\n+\t* Makefile.in: Regenerated.\n+\n 2021-05-17  Serge Belyshev  <belyshev@depni.sinp.msu.ru>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "311d80b96904fc6fd10dae37cff03faf6aca8abb", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,7 @@\n+2021-05-18  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* acinclude.m4 (CYG_AC_PATH_SIM, CYG_AC_PATH_DEVO): Delete.\n+\n 2021-05-03  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/99703"}, {"sha": "0b4cf14f46b60764ed5a2df46f98ee69548ea444", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,7 @@\n+2021-05-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* gcc-changelog/git_email.py: Remove use of non-strict mode.\n+\n 2021-05-17  Richard Biener  <rguenther@suse.de>\n \n \t* download_prerequisites: Update mpfr version to 3.1.6."}, {"sha": "19c87016ba7d735a01cd3acb889e33fd76d09d41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,205 @@\n+2021-05-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/freebsd64.h (ADJUST_FIELD_ALIGN): Remove call to\n+\trs6000_special_adjust_field_align_p.\n+\t* config/rs6000/linux64.h (ADJUST_FIELD_ALIGN): Likewise.\n+\t* config/rs6000/rs6000-call.c (rs6000_function_arg_boundary):\n+\tRemove ABI warning.\n+\t(rs6000_function_arg): Likewise.\n+\t* config/rs6000/rs6000-protos.h\n+\t(rs6000_special_adjust_field_align_p): Remove prototype.\n+\t* config/rs6000/rs6000.c (rs6000_special_adjust_field_align_p):\n+\tRemove.\n+\t* config/rs6000/sysv4.h (ADJUST_FIELD_ALIGN): Remove call to\n+\trs6000_special_adjust_field_align_p.\n+\n+2021-05-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* config/i386/i386.h (VALID_SSE2_REG_MODE):\n+\tAdd V4QI and V2HI modes.\n+\t(VALID_INT_MODE_P): Ditto.\n+\t* config/i386/mmx.md (VI_32): New mode iterator.\n+\t(mmxvecsize): Handle V4QI and V2HI.\n+\t(Yv_Yw): Ditto.\n+\t(mov<VI_32:mode>): New expander.\n+\t(*mov<mode>_internal): New insn pattern.\n+\t(movmisalign<VI_32:mode>): New expander.\n+\t(neg<VI_32:mode>): New expander.\n+\t(<plusminus:insn><VI_32:mode>3): New expander.\n+\t(*<plusminus:insn><VI_32:mode>3): New insn pattern.\n+\t(mulv2hi3): New expander.\n+\t(*mulv2hi3): New insn pattern.\n+\t(one_cmpl<VI_32:mode>2): New expander.\n+\t(*andnot<VI_32:mode>3): New insn pattern.\n+\t(<any_logic:code><VI_32:mode>3): New expander.\n+\t(*<any_logic:code><VI_32:mode>3): New insn pattern.\n+\n+2021-05-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (<any_extend:insn>v4qiv4di2):\n+\tFix a mode mismatch with operand 1.\n+\n+2021-05-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100626\n+\t* config/i386/i386-expand.c (split_double_mode): Return\n+\ttemporary register when simplify_gen_subreg fails with\n+\tthe high half od the paradoxical subreg.\n+\n+2021-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgexpand.c (expand_one_var): Pass in forced_stack_var\n+\tand honor it when expanding.\n+\t(expand_used_vars_for_block): Pass through forced_stack_var.\n+\t(expand_used_vars): Likewise.\n+\t(discover_nonconstant_array_refs_r): Set bits in\n+\tforced_stack_vars instead of marking vars TREE_ADDRESSABLE.\n+\t(avoid_type_punning_on_regs): Likewise.\n+\t(discover_nonconstant_array_refs): Likewise.\n+\t(pass_expand::execute): Create and pass down forced_stack_var\n+\tbitmap.  For parameters and returns temporarily set\n+\tTREE_ADDRESSABLE when expand_function_start.\n+\n+2021-05-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* doc/sourcebuild.texi: Document 'dg-note'.\n+\n+2021-05-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR other/100598\n+\t* configure: Regenerate.\n+\t* configure.ac (BUILD_CFLAG, BUILD_CXXFLAGS): Add $(CFLAGS-$@).\n+\n+2021-05-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gimple.h (is_gimple_omp_oacc): Tighten.\n+\t* omp-low.c (check_omp_nesting_restrictions): Adjust.\n+\n+2021-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-operands.c (mark_address_taken): Simplify.\n+\n+2021-05-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/gcn/mkoffload.c (STR): Redefine.\n+\t* config/i386/intelmic-mkoffload.c (STR): Likewise.\n+\t* config/nvptx/mkoffload.c (STR): Likewise.\n+\n+2021-05-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* common/config/aarch64/aarch64-common.c (aarch64_parse_extension):\n+\tUse startswith function instead of strncmp.\n+\t* common/config/bfin/bfin-common.c (bfin_handle_option): Likewise.\n+\t* common/config/riscv/riscv-common.c (riscv_subset_list::parse): Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-shapes.cc (parse_type): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_process_one_target_attr): Likewise.\n+\t* config/alpha/alpha.c (alpha_elf_section_type_flags): Likewise.\n+\t* config/arm/aarch-common.c (arm_md_asm_adjust): Likewise.\n+\t* config/arm/arm.c (arm_file_start): Likewise.\n+\t(arm_valid_target_attribute_rec): Likewise.\n+\t(thumb1_md_asm_adjust): Likewise.\n+\t* config/arm/driver-arm.c (host_detect_local_cpu): Likewise.\n+\t* config/avr/avr.c (STR_PREFIX_P): Likewise.\n+\t(avr_set_current_function): Likewise.\n+\t(avr_handle_addr_attribute): Likewise.\n+\t(avr_asm_output_aligned_decl_common): Likewise.\n+\t(avr_asm_named_section): Likewise.\n+\t(avr_section_type_flags): Likewise.\n+\t(avr_asm_select_section): Likewise.\n+\t* config/c6x/c6x.c (c6x_in_small_data_p): Likewise.\n+\t(c6x_section_type_flags): Likewise.\n+\t* config/darwin-c.c (darwin_cfstring_ref_p): Likewise.\n+\t(darwin_objc_declare_unresolved_class_reference): Likewise.\n+\t(darwin_objc_declare_class_definition): Likewise.\n+\t* config/darwin.c (indirect_data): Likewise.\n+\t(darwin_encode_section_info): Likewise.\n+\t(darwin_objc2_section): Likewise.\n+\t(darwin_objc1_section): Likewise.\n+\t(machopic_select_section): Likewise.\n+\t(darwin_globalize_label): Likewise.\n+\t(darwin_label_is_anonymous_local_objc_name): Likewise.\n+\t(darwin_asm_named_section): Likewise.\n+\t(darwin_asm_output_dwarf_offset): Likewise.\n+\t* config/frv/frv.c (frv_string_begins_with): Likewise.\n+\t(frv_in_small_data_p): Likewise.\n+\t* config/gcn/mkoffload.c (STR): Likewise.\n+\t(main): Likewise.\n+\t* config/i386/i386-builtins.c (get_builtin_code_for_version): Likewise.\n+\t* config/i386/i386-options.c (ix86_option_override_internal): Likewise.\n+\t* config/i386/i386.c (x86_64_elf_section_type_flags): Likewise.\n+\t(ix86_md_asm_adjust): Likewise.\n+\t* config/i386/intelmic-mkoffload.c (STR): Likewise.\n+\t* config/i386/winnt.c (i386_pe_asm_named_section): Likewise.\n+\t(i386_pe_file_end): Likewise.\n+\t* config/ia64/ia64.c (ia64_in_small_data_p): Likewise.\n+\t(ia64_section_type_flags): Likewise.\n+\t* config/mips/driver-native.c (host_detect_local_cpu): Likewise.\n+\t* config/mips/mips.c (mips_handle_interrupt_attr): Likewise.\n+\t(mips16_stub_function_p): Likewise.\n+\t(mips_function_rodata_section): Likewise.\n+\t* config/msp430/msp430.c (msp430_mcu_name): Likewise.\n+\t(msp430_function_section): Likewise.\n+\t(msp430_section_type_flags): Likewise.\n+\t(msp430_expand_helper): Likewise.\n+\t* config/nios2/nios2.c (nios2_small_section_name_p): Likewise.\n+\t(nios2_valid_target_attribute_rec): Likewise.\n+\t* config/nvptx/mkoffload.c (process): Likewise.\n+\t(STR): Likewise.\n+\t* config/pa/som.h: Likewise.\n+\t* config/pdp11/pdp11.c (pdp11_output_ident): Likewise.\n+\t* config/riscv/riscv.c (riscv_elf_select_rtx_section): Likewise.\n+\t* config/rs6000/rs6000.c (VTABLE_NAME_P): Likewise.\n+\t(rs6000_inner_target_options): Likewise.\n+\t* config/s390/driver-native.c (s390_host_detect_local_cpu): Likewise.\n+\t* config/sparc/driver-sparc.c (host_detect_local_cpu): Likewise.\n+\t* config/vax/vax.c (vax_output_int_move): Likewise.\n+\t* config/vms/vms-ld.c (startswith): Likewise.\n+\t(process_args): Likewise.\n+\t(main): Likewise.\n+\t* config/vms/vms.c: Likewise.\n+\n+2021-05-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/100590\n+\t* regcprop.c (copyprop_hardreg_forward_1): Only DCE dead sets if\n+\tthey are NONJUMP_INSN_P.\n+\n+2021-05-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100580\n+\t* function.c (push_dummy_function): Set DECL_ARTIFICIAL and\n+\tDECL_ASSEMBLER_NAME on the fn_decl.\n+\n+2021-05-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94589\n+\t* tree-ssa-phiopt.c (spaceship_replacement): Pattern match\n+\tphi result used in (res & ~1) == 0 comparison as res >= 0 as\n+\tres == 2 would be UB with -ffinite-math-only.\n+\n+2021-05-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: genversion.o should depend on DATESTAMP.\n+\n+2021-05-18  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/simdext.md (negv2si2): Remove round bracket.\n+\n+2021-05-18  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390-c.c (s390_cpu_cpp_builtins_internal): Define\n+\t_Bool as macro expanding to _Bool.\n+\n+2021-05-18  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR c++/100281\n+\t* tree.c (build_reference_type_for_mode)\n+\t(build_pointer_type_for_mode): Pick pointer mode if MODE argument\n+\tis VOIDmode.\n+\t(build_reference_type, build_pointer_type): Invoke\n+\tbuild_*_type_for_mode with VOIDmode.\n+\n 2021-05-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/100512"}, {"sha": "da5d88b61f70bd0c915058cbcddc58f6b3dd7277", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1 +1 @@\n-20210518\n+20210519"}, {"sha": "7396971d44cc022a180078077300e9e492d38157", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,11 @@\n+2021-05-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/100615\n+\t* sm-malloc.cc: Include \"analyzer/function-set.h\".\n+\t(malloc_state_machine::on_stmt): Call unaffected_by_call_p and\n+\tbail on the functions it recognizes.\n+\t(malloc_state_machine::unaffected_by_call_p): New.\n+\n 2021-05-10  Martin Liska  <mliska@suse.cz>\n \n \t* sm-file.cc (is_file_using_fn_p): Use startswith"}, {"sha": "ed45d292b4d3bc093e9ddc383a17842889e0470d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,9 @@\n+2021-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/100547\n+\t* c-attribs.c (type_valid_for_vector_size): Reject too large nunits.\n+\tReword existing nunit diagnostic.\n+\n 2021-05-17  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* c-common.c (braced_list_to_string): Return CTOR unchanged"}, {"sha": "8832602b77939c26fb55810ede184bcba33f3bd2", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,10 @@\n+2021-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/100522\n+\t* gimple-parser.c (c_parser_gimple_postfix_expression_after_primary):\n+\tDiagnose calls to non-functions.\n+\t(c_parser_gimple_statement): Diagnose unexpected assignment RHS.\n+\n 2021-05-17  Richard Biener  <rguenther@suse.de>\n \n \tPR c/100625"}, {"sha": "45588a827ecfa7a50b7ff2ca8f7b7332aeec6eb9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,42 @@\n+2021-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\t* class.c (classtype_has_non_deleted_copy_ctor): Remove.\n+\t* constraint.cc (contains_wildcard_p): Likewise.\n+\t(get_template_head_requirements): Likewise.\n+\t(check_constrained_friend): Likewise.\n+\t(subsumes_constraints): Likewise.\n+\t* cp-tree.h (classtype_has_non_deleted_copy_ctor): Likewise.\n+\t(push_void_library_fn): Likewise.\n+\t(get_pattern_parm): Likewise.\n+\t(get_template_parms_at_level): Likewise.\n+\t(lambda_return_type): Likewise.\n+\t(get_template_head_requirements): Likewise.\n+\t(check_constrained_friend): Likewise.\n+\t(subsumes_constraints): Likewise.\n+\t* decl.c (push_void_library_fn): Likewise.\n+\t* lambda.c (lambda_return_type): Likewise.\n+\t* pt.c (get_template_parms_at_level): Likewise.\n+\t(get_pattern_parm): Likewise.\n+\n+2021-05-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100644\n+\t* call.c (perfect_candidate_p): An implicitly deleted move\n+\tis not perfect.\n+\n+2021-05-18  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR c++/100281\n+\t* cvt.c (cp_convert_to_pointer): Use the size of the target\n+\tpointer type.\n+\t* tree.c (cp_build_reference_type): Call\n+\tcp_build_reference_type_for_mode with VOIDmode.\n+\t(cp_build_reference_type_for_mode): Rename from\n+\tcp_build_reference_type.  Add MODE argument and invoke\n+\tbuild_reference_type_for_mode.\n+\t(strip_typedefs): Use build_pointer_type_for_mode and\n+\tcp_build_reference_type_for_mode for pointers and references.\n+\n 2021-05-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/100635"}, {"sha": "85176b7cb09c6e5288a0dd5b7fb4ef5984f78846", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,19 @@\n+2021-05-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-incpath.cc (prefixed_path): Use filename_ncmp instead of strncmp.\n+\n+2021-05-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* types.cc (TypeVisitor::visit (TypeEnum *)): Use startswith function\n+\tinstead of strncmp.\n+\n+2021-05-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/dinterpret.c (evaluateIfBuiltin): Revert last change.\n+\t* dmd/dmangle.c: Likewise.\n+\t* dmd/hdrgen.c: Likewise.\n+\t* dmd/identifier.c (Identifier::toHChars2): Likewise.\n+\n 2021-05-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd b7d146c4c."}, {"sha": "aa8426f2330eeb1ab61bf464b24f52dca92634b3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,8 @@\n+2021-05-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/100642\n+\t* openmp.c (omp_code_to_statement): Add missing EXEC_OMP_DEPOBJ.\n+\n 2021-05-17  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/98411"}, {"sha": "e9a410e785f8dfe17671dd3a789dc88aeabf9784", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,97 @@\n+2021-05-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/ppc64-abi-warn-1.c: Remove.\n+\t* gcc.target/powerpc/ppc64-abi-warn-2.c: Remove.\n+\t* gcc.target/powerpc/ppc64-abi-warn-3.c: Remove.\n+\n+2021-05-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100205\n+\tPR c++/99314\n+\t* g++.dg/cpp0x/decltype-nonstatic1.C: New test.\n+\n+2021-05-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/implicit-delete1.C: New test.\n+\n+2021-05-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/100615\n+\t* gcc.dg/analyzer/pr100615.c: New test.\n+\n+2021-05-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* gcc.target/i386/pr100637-1b.c: New test.\n+\t* gcc.target/i386/pr100637-1w.c: Ditto.\n+\t* gcc.target/i386/pr92658-avx2-2.c: Do not XFAIL scan for pmovsxbq.\n+\t* gcc.target/i386/pr92658-avx2.c: Do not XFAIL scan for pmovzxbq.\n+\t* gcc.target/i386/pr92658-avx512vl.c: Do not XFAIL scan for vpmovdb.\n+\t* gcc.target/i386/pr92658-sse4-2.c: Do not XFAIL scan for\n+\tpmovsxbd and pmovsxwq.\n+\t* gcc.target/i386/pr92658-sse4.c: Do not XFAIL scan for\n+\tpmovzxbd and pmovzxwq.\n+\n+2021-05-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/100642\n+\t* gfortran.dg/goacc-gomp/depobj.f90: New test.\n+\n+2021-05-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* lib/gcc-dg.exp: Implement 'dg-note'.\n+\t* lib/prune.exp: Likewise.\n+\t* gcc.dg/vect/nodump-vect-opt-info-2.c: Use 'dg-note', and\n+\t'dg-prune-output \"note: \".\n+\t* gfortran.dg/goacc/routine-external-level-of-parallelism-2.f: Use\n+\t'dg-note', match up additional notes, one class of them with\n+\tXFAILed 'dg-bogus'.\n+\t* lib/lto.exp: Implement 'dg-lto-note'.\n+\t* g++.dg/lto/odr-1_0.C: Use 'dg-lto-note', match up additional\n+\tnotes.\n+\t* g++.dg/lto/odr-1_1.C: Likewise.\n+\t* g++.dg/lto/odr-2_1.C: Likewise.\n+\n+2021-05-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/100590\n+\t* gcc.dg/pr100590.c: New test.\n+\n+2021-05-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/100580\n+\t* g++.dg/other/pr100580.C: New test.\n+\n+2021-05-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94589\n+\t* g++.dg/opt/pr94589-2.C: Adjust scan-tree-dump count from 14 to 12.\n+\n+2021-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/pr100582.c: Adjust for AVX512.\n+\n+2021-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/100522\n+\t* gcc.dg/gimplefe-error-10.c: New testcase.\n+\n+2021-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/100547\n+\t* gcc.dg/pr100547.c: New testcase.\n+\t* gcc.dg/attr-vector_size.c: Adjust.\n+\n+2021-05-18  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/vec-_Bool.c: New test.\n+\n+2021-05-18  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR c++/100281\n+\t* g++.target/s390/pr100281-1.C: New test.\n+\t* g++.target/s390/pr100281-2.C: New test.\n+\n 2021-05-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/100512"}, {"sha": "149e5d7c133f4483bfb02ad151d6d251ca705bcd", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,20 @@\n+2021-05-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/lib/libgomp.exp\n+\t(check_effective_target_offload_target_nvptx): Don't shadow global\n+\t'offload_targets' variable.\n+\n+2021-05-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.c-c++-common/reduction-5.c: Restrict\n+\t'-latomic' to nvptx offloading compilation.\n+\t* testsuite/libgomp.c-c++-common/reduction-6.c: Likewise.\n+\n+2021-05-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.c/target-44.c: Restrict '-latomic' to nvptx\n+\toffloading compilation.\n+\n 2021-05-17  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* task.c (omp_fulfill_event): Call gomp_team_barrier_set_task_pending"}, {"sha": "48fa7ad83b1a50f3f9ff84691bbcd7c1d498cce2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8daf9a19a5eae6b98acede14bb6c27b2e0038e0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a8daf9a19a5eae6b98acede14bb6c27b2e0038e0", "patch": "@@ -1,3 +1,44 @@\n+2021-05-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100631\n+\t* include/std/ranges (elements_view::_Sentinel::operator-): Use\n+\t_M_distance_from in the other operator- overload too.\n+\t* testsuite/std/ranges/adaptors/elements.cc (test06): Augment test.\n+\n+2021-05-18  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/lib/prune.exp: Add note about 'dg-note'.\n+\n+2021-05-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100475\n+\t* include/std/ranges (__box::__box): Use non-list-initialization\n+\tin member initializer list of in-place constructor of the\n+\tpartial specialization for semiregular types.\n+\t(__box::operator->): Use std::__addressof.\n+\t* testsuite/std/ranges/adaptors/detail/semiregular_box.cc\n+\t(test02): New test.\n+\t* testsuite/std/ranges/single_view.cc (test04): New test.\n+\n+2021-05-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100621\n+\t* include/std/ranges (reverse_view::_S_needs_cached_begin):\n+\tSet to true if the underlying non-common random-access range\n+\tdoesn't have a sized sentinel.\n+\n+2021-05-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100631\n+\t* include/std/ranges (elements_view::_Iterator): Also befriend\n+\t_Sentinel<!_Const>.\n+\t(elements_view::_Sentinel::_M_equal): Templatize.\n+\t(elements_view::_Sentinel::_M_distance_from): Split out from ...\n+\t(elements_view::_Sentinel::operator-): ... here.  Depend on\n+\t_Base2 instead of _Base in the return type.\n+\t* testsuite/std/ranges/adaptors/elements.cc (test06, test07):\n+\tNew tests.\n+\n 2021-05-17  Thomas Rodgers  <rodgert@twrodgers.com>\n \n \t* include/bits/atomic_wait.h (__waiter::_M_do_wait_v): loop"}]}