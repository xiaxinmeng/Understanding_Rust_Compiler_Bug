{"sha": "46c705e70e078f6a1920d92e49042125d5e18495", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjNzA1ZTcwZTA3OGY2YTE5MjBkOTJlNDkwNDIxMjVkNWUxODQ5NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-11T11:42:46Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-11T11:42:46Z"}, "message": "aarch64: Support SVE comparisons for unpacked integers\n\nThis patch adds support for comparing unpacked SVE integer vectors,\nsuch as byte elements stored in the bottom bytes of halfword\ncontainers.  It also adds support for selects between unpacked\nSVE vectors (both integer and floating-point), since selects and\ncompares are closely tied via the vcond optab interface.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (@vcond_mask_<mode><vpred>): Extend\n\tfrom SVE_FULL to SVE_ALL.\n\t(*vcond_mask_<mode><vpred>): Likewise.\n\t(@aarch64_sel_dup<mode>): Likewise.\n\t(vcond<SVE_FULL:mode><v_int_equiv>): Extend to...\n\t(vcond<SVE_ALL:mode><SVE_I:mode>): ...this, but requiring the\n\tsizes of the container modes to match.\n\t(vcondu<SVE_FULL:mode><v_int_equiv>): Extend to...\n\t(vcondu<SVE_ALL:mode><SVE_I:mode>): ...this.\n\t(vec_cmp<SVE_FULL_I:mode><vpred>): Extend to...\n\t(vec_cmp<SVE_I:mode><vpred>): ...this.\n\t(vec_cmpu<SVE_FULL_I:mode><vpred>): Extend to...\n\t(vec_cmpu<SVE_I:mode><vpred>): ...this.\n\t(@aarch64_pred_cmp<cmp_op><SVE_FULL_I:mode>): Extend to...\n\t(@aarch64_pred_cmp<cmp_op><SVE_I:mode>): ...this.\n\t(*cmp<cmp_op><SVE_FULL_I:mode>_cc): Extend to...\n\t(*cmp<cmp_op><SVE_I:mode>_cc): ...this.\n\t(*cmp<cmp_op><SVE_FULL_I:mode>_ptest): Extend to...\n\t(*cmp<cmp_op><SVE_I:mode>_ptest): ...this.\n\t(*cmp<cmp_op><SVE_FULL_I:mode>_and): Extend to...\n\t(*cmp<cmp_op><SVE_I:mode>_and): ...this.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cmp_1.c: New test.\n\t* gcc.target/aarch64/sve/cmp_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_arith_1.c: Add --param\n\taarch64-sve-compare-costs=0\n\t* gcc.target/aarch64/sve/cond_arith_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_arith_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_arith_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_gather_load_7.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_load_slp_1.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_11.c: Likewise.\n\t* gcc.target/aarch64/sve/vcond_11_run.c: Likewise.", "tree": {"sha": "9b22d8160985c14baf881d68e981f7ee32c9497f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b22d8160985c14baf881d68e981f7ee32c9497f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46c705e70e078f6a1920d92e49042125d5e18495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c705e70e078f6a1920d92e49042125d5e18495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c705e70e078f6a1920d92e49042125d5e18495", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c705e70e078f6a1920d92e49042125d5e18495/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4"}], "stats": {"total": 266, "additions": 216, "deletions": 50}, "files": [{"sha": "455b025521f21f1cc1b0731ca612acfdb087de88", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 79, "deletions": 42, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=46c705e70e078f6a1920d92e49042125d5e18495", "patch": "@@ -7379,11 +7379,11 @@\n ;; UNSPEC_SEL operand order: mask, true, false (as for VEC_COND_EXPR)\n ;; SEL operand order:        mask, true, false\n (define_expand \"@vcond_mask_<mode><vpred>\"\n-  [(set (match_operand:SVE_FULL 0 \"register_operand\")\n-\t(unspec:SVE_FULL\n+  [(set (match_operand:SVE_ALL 0 \"register_operand\")\n+\t(unspec:SVE_ALL\n \t  [(match_operand:<VPRED> 3 \"register_operand\")\n-\t   (match_operand:SVE_FULL 1 \"aarch64_sve_reg_or_dup_imm\")\n-\t   (match_operand:SVE_FULL 2 \"aarch64_simd_reg_or_zero\")]\n+\t   (match_operand:SVE_ALL 1 \"aarch64_sve_reg_or_dup_imm\")\n+\t   (match_operand:SVE_ALL 2 \"aarch64_simd_reg_or_zero\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n   {\n@@ -7396,12 +7396,25 @@\n ;; - two registers\n ;; - a duplicated immediate and a register\n ;; - a duplicated immediate and zero\n+;;\n+;; For unpacked vectors, it doesn't really matter whether SEL uses the\n+;; the container size or the element size.  If SEL used the container size,\n+;; it would ignore undefined bits of the predicate but would copy the\n+;; upper (undefined) bits of each container along with the defined bits.\n+;; If SEL used the element size, it would use undefined bits of the predicate\n+;; to select between undefined elements in each input vector.  Thus the only\n+;; difference is whether the undefined bits in a container always come from\n+;; the same input as the defined bits, or whether the choice can vary\n+;; independently of the defined bits.\n+;;\n+;; For the other instructions, using the element size is more natural,\n+;; so we do that for SEL as well.\n (define_insn \"*vcond_mask_<mode><vpred>\"\n-  [(set (match_operand:SVE_FULL 0 \"register_operand\" \"=w, w, w, w, ?w, ?&w, ?&w\")\n-\t(unspec:SVE_FULL\n+  [(set (match_operand:SVE_ALL 0 \"register_operand\" \"=w, w, w, w, ?w, ?&w, ?&w\")\n+\t(unspec:SVE_ALL\n \t  [(match_operand:<VPRED> 3 \"register_operand\" \"Upa, Upa, Upa, Upa, Upl, Upl, Upl\")\n-\t   (match_operand:SVE_FULL 1 \"aarch64_sve_reg_or_dup_imm\" \"w, vss, vss, Ufc, Ufc, vss, Ufc\")\n-\t   (match_operand:SVE_FULL 2 \"aarch64_simd_reg_or_zero\" \"w, 0, Dz, 0, Dz, w, w\")]\n+\t   (match_operand:SVE_ALL 1 \"aarch64_sve_reg_or_dup_imm\" \"w, vss, vss, Ufc, Ufc, vss, Ufc\")\n+\t   (match_operand:SVE_ALL 2 \"aarch64_simd_reg_or_zero\" \"w, 0, Dz, 0, Dz, w, w\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\n    && (!register_operand (operands[1], <MODE>mode)\n@@ -7422,12 +7435,12 @@\n ;; of GPRs as being more expensive than duplicates of FPRs, since they\n ;; involve a cross-file move.\n (define_insn \"@aarch64_sel_dup<mode>\"\n-  [(set (match_operand:SVE_FULL 0 \"register_operand\" \"=?w, w, ??w, ?&w, ??&w, ?&w\")\n-\t(unspec:SVE_FULL\n+  [(set (match_operand:SVE_ALL 0 \"register_operand\" \"=?w, w, ??w, ?&w, ??&w, ?&w\")\n+\t(unspec:SVE_ALL\n \t  [(match_operand:<VPRED> 3 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl, Upl\")\n-\t   (vec_duplicate:SVE_FULL\n+\t   (vec_duplicate:SVE_ALL\n \t     (match_operand:<VEL> 1 \"register_operand\" \"r, w, r, w, r, w\"))\n-\t   (match_operand:SVE_FULL 2 \"aarch64_simd_reg_or_zero\" \"0, 0, Dz, Dz, w, w\")]\n+\t   (match_operand:SVE_ALL 2 \"aarch64_simd_reg_or_zero\" \"0, 0, Dz, Dz, w, w\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n   \"@\n@@ -7448,34 +7461,34 @@\n \n ;; Integer (signed) vcond.  Don't enforce an immediate range here, since it\n ;; depends on the comparison; leave it to aarch64_expand_sve_vcond instead.\n-(define_expand \"vcond<mode><v_int_equiv>\"\n-  [(set (match_operand:SVE_FULL 0 \"register_operand\")\n-\t(if_then_else:SVE_FULL\n+(define_expand \"vcond<SVE_ALL:mode><SVE_I:mode>\"\n+  [(set (match_operand:SVE_ALL 0 \"register_operand\")\n+\t(if_then_else:SVE_ALL\n \t  (match_operator 3 \"comparison_operator\"\n-\t    [(match_operand:<V_INT_EQUIV> 4 \"register_operand\")\n-\t     (match_operand:<V_INT_EQUIV> 5 \"nonmemory_operand\")])\n-\t  (match_operand:SVE_FULL 1 \"nonmemory_operand\")\n-\t  (match_operand:SVE_FULL 2 \"nonmemory_operand\")))]\n-  \"TARGET_SVE\"\n+\t    [(match_operand:SVE_I 4 \"register_operand\")\n+\t     (match_operand:SVE_I 5 \"nonmemory_operand\")])\n+\t  (match_operand:SVE_ALL 1 \"nonmemory_operand\")\n+\t  (match_operand:SVE_ALL 2 \"nonmemory_operand\")))]\n+  \"TARGET_SVE && <SVE_ALL:container_bits> == <SVE_I:container_bits>\"\n   {\n-    aarch64_expand_sve_vcond (<MODE>mode, <V_INT_EQUIV>mode, operands);\n+    aarch64_expand_sve_vcond (<SVE_ALL:MODE>mode, <SVE_I:MODE>mode, operands);\n     DONE;\n   }\n )\n \n ;; Integer vcondu.  Don't enforce an immediate range here, since it\n ;; depends on the comparison; leave it to aarch64_expand_sve_vcond instead.\n-(define_expand \"vcondu<mode><v_int_equiv>\"\n-  [(set (match_operand:SVE_FULL 0 \"register_operand\")\n-\t(if_then_else:SVE_FULL\n+(define_expand \"vcondu<SVE_ALL:mode><SVE_I:mode>\"\n+  [(set (match_operand:SVE_ALL 0 \"register_operand\")\n+\t(if_then_else:SVE_ALL\n \t  (match_operator 3 \"comparison_operator\"\n-\t    [(match_operand:<V_INT_EQUIV> 4 \"register_operand\")\n-\t     (match_operand:<V_INT_EQUIV> 5 \"nonmemory_operand\")])\n-\t  (match_operand:SVE_FULL 1 \"nonmemory_operand\")\n-\t  (match_operand:SVE_FULL 2 \"nonmemory_operand\")))]\n-  \"TARGET_SVE\"\n+\t    [(match_operand:SVE_I 4 \"register_operand\")\n+\t     (match_operand:SVE_I 5 \"nonmemory_operand\")])\n+\t  (match_operand:SVE_ALL 1 \"nonmemory_operand\")\n+\t  (match_operand:SVE_ALL 2 \"nonmemory_operand\")))]\n+  \"TARGET_SVE && <SVE_ALL:container_bits> == <SVE_I:container_bits>\"\n   {\n-    aarch64_expand_sve_vcond (<MODE>mode, <V_INT_EQUIV>mode, operands);\n+    aarch64_expand_sve_vcond (<SVE_ALL:MODE>mode, <SVE_I:MODE>mode, operands);\n     DONE;\n   }\n )\n@@ -7520,8 +7533,8 @@\n   [(parallel\n     [(set (match_operand:<VPRED> 0 \"register_operand\")\n \t  (match_operator:<VPRED> 1 \"comparison_operator\"\n-\t    [(match_operand:SVE_FULL_I 2 \"register_operand\")\n-\t     (match_operand:SVE_FULL_I 3 \"nonmemory_operand\")]))\n+\t    [(match_operand:SVE_I 2 \"register_operand\")\n+\t     (match_operand:SVE_I 3 \"nonmemory_operand\")]))\n      (clobber (reg:CC_NZC CC_REGNUM))])]\n   \"TARGET_SVE\"\n   {\n@@ -7538,8 +7551,8 @@\n   [(parallel\n     [(set (match_operand:<VPRED> 0 \"register_operand\")\n \t  (match_operator:<VPRED> 1 \"comparison_operator\"\n-\t    [(match_operand:SVE_FULL_I 2 \"register_operand\")\n-\t     (match_operand:SVE_FULL_I 3 \"nonmemory_operand\")]))\n+\t    [(match_operand:SVE_I 2 \"register_operand\")\n+\t     (match_operand:SVE_I 3 \"nonmemory_operand\")]))\n      (clobber (reg:CC_NZC CC_REGNUM))])]\n   \"TARGET_SVE\"\n   {\n@@ -7550,14 +7563,38 @@\n )\n \n ;; Predicated integer comparisons.\n+;;\n+;; For unpacked vectors, only the lowpart element in each input container\n+;; has a defined value, and only the predicate bits associated with\n+;; those elements are defined.  For example, when comparing two VNx2SIs:\n+;;\n+;; - The VNx2SIs can be seem as VNx2DIs in which the low halves of each\n+;;   DI container store an SI element.  The upper bits of each DI container\n+;;   are undefined.\n+;;\n+;; - Alternatively, the VNx2SIs can be seen as VNx4SIs in which the\n+;;   even elements are defined and the odd elements are undefined.\n+;;\n+;; - The associated predicate mode is VNx2BI.  This means that only the\n+;;   low bit in each predicate byte is defined (on input and on output).\n+;;\n+;; - We use a .s comparison to compare VNx2SIs, under the control of a\n+;;   VNx2BI governing predicate, to produce a VNx2BI result.  If we view\n+;;   the .s operation as operating on VNx4SIs then for odd lanes:\n+;;\n+;;   - the input governing predicate bit is undefined\n+;;   - the SI elements being compared are undefined\n+;;   - the predicate result bit is therefore undefined, but\n+;;   - the predicate result bit is in the undefined part of a VNx2BI,\n+;;     so its value doesn't matter anyway.\n (define_insn \"@aarch64_pred_cmp<cmp_op><mode>\"\n   [(set (match_operand:<VPRED> 0 \"register_operand\" \"=Upa, Upa\")\n \t(unspec:<VPRED>\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n \t   (match_operand:SI 2 \"aarch64_sve_ptrue_flag\")\n \t   (SVE_INT_CMP:<VPRED>\n-\t     (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\")\n-\t     (match_operand:SVE_FULL_I 4 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n+\t     (match_operand:SVE_I 3 \"register_operand\" \"w, w\")\n+\t     (match_operand:SVE_I 4 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n \t  UNSPEC_PRED_Z))\n    (clobber (reg:CC_NZC CC_REGNUM))]\n   \"TARGET_SVE\"\n@@ -7578,8 +7615,8 @@\n \t     [(match_operand 6)\n \t      (match_operand:SI 7 \"aarch64_sve_ptrue_flag\")\n \t      (SVE_INT_CMP:<VPRED>\n-\t\t(match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n-\t\t(match_operand:SVE_FULL_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n+\t\t(match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t\t(match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n \t     UNSPEC_PRED_Z)]\n \t  UNSPEC_PTEST))\n    (set (match_operand:<VPRED> 0 \"register_operand\" \"=Upa, Upa\")\n@@ -7614,8 +7651,8 @@\n \t     [(match_operand 6)\n \t      (match_operand:SI 7 \"aarch64_sve_ptrue_flag\")\n \t      (SVE_INT_CMP:<VPRED>\n-\t\t(match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n-\t\t(match_operand:SVE_FULL_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n+\t\t(match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t\t(match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n \t     UNSPEC_PRED_Z)]\n \t  UNSPEC_PTEST))\n    (clobber (match_scratch:<VPRED> 0 \"=Upa, Upa\"))]\n@@ -7642,8 +7679,8 @@\n \t    [(match_operand 4)\n \t     (const_int SVE_KNOWN_PTRUE)\n \t     (SVE_INT_CMP:<VPRED>\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n-\t       (match_operand:SVE_FULL_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t       (match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n \t    UNSPEC_PRED_Z)\n \t  (match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")))\n    (clobber (reg:CC_NZC CC_REGNUM))]"}, {"sha": "7cf66c571c0c9c4398965336c42b14f38d002b77", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cmp_1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcmp_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcmp_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcmp_1.c?ref=46c705e70e078f6a1920d92e49042125d5e18495", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_PAIR(TYPE1, TYPE2)\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict x,\t\t\\\n+\t\t       TYPE2 *restrict g, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      if (g[i] < 4)\t\t\t\t\t\\\n+\tx[i] += 1;\t\t\t\t\t\\\n+  }\n+\n+#define TEST_SINGLE(TYPE)\t\t\t\\\n+  TEST_PAIR (TYPE, int8_t)\t\t\t\\\n+  TEST_PAIR (TYPE, uint8_t)\t\t\t\\\n+  TEST_PAIR (TYPE, int16_t)\t\t\t\\\n+  TEST_PAIR (TYPE, uint16_t)\t\t\t\\\n+  TEST_PAIR (TYPE, int32_t)\t\t\t\\\n+  TEST_PAIR (TYPE, uint32_t)\t\t\t\\\n+  TEST_PAIR (TYPE, int64_t)\t\t\t\\\n+  TEST_PAIR (TYPE, uint64_t)\n+\n+TEST_SINGLE (int8_t)\n+TEST_SINGLE (uint8_t)\n+TEST_SINGLE (int16_t)\n+TEST_SINGLE (uint16_t)\n+TEST_SINGLE (int32_t)\n+TEST_SINGLE (uint32_t)\n+TEST_SINGLE (int64_t)\n+TEST_SINGLE (uint64_t)\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.b,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.h,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d,} 8 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.h,} 16 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d,} 8 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s,} 24 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 8 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d,} 32 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tcmpl[et]\\tp[0-9]+\\.b,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpl[so]\\tp[0-9]+\\.b,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpl[et]\\tp[0-9]+\\.h,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpl[so]\\tp[0-9]+\\.h,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpl[et]\\tp[0-9]+\\.s,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpl[so]\\tp[0-9]+\\.s,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpl[et]\\tp[0-9]+\\.d,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tcmpl[so]\\tp[0-9]+\\.d,} 8 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tpunpk} } } */"}, {"sha": "b22120695e164fe1a71c144b627b1c27e45a96a3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cmp_2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcmp_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcmp_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcmp_2.c?ref=46c705e70e078f6a1920d92e49042125d5e18495", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_PAIR(TYPE1, TYPE2)\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE1 *restrict x, TYPE1 y, TYPE1 z,\t\\\n+\t\t       TYPE2 *restrict g, TYPE2 h, int n)\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      x[i] = g[i] < h ? y : z;\t\t\t\t\t\\\n+  }\n+\n+#define TEST_SINGLE(TYPE)\t\t\t\\\n+  TEST_PAIR (TYPE, int8_t)\t\t\t\\\n+  TEST_PAIR (TYPE, uint8_t)\t\t\t\\\n+  TEST_PAIR (TYPE, int16_t)\t\t\t\\\n+  TEST_PAIR (TYPE, uint16_t)\t\t\t\\\n+  TEST_PAIR (TYPE, int32_t)\t\t\t\\\n+  TEST_PAIR (TYPE, uint32_t)\t\t\t\\\n+  TEST_PAIR (TYPE, int64_t)\t\t\t\\\n+  TEST_PAIR (TYPE, uint64_t)\n+\n+TEST_SINGLE (int8_t)\n+TEST_SINGLE (uint8_t)\n+TEST_SINGLE (int16_t)\n+TEST_SINGLE (uint16_t)\n+TEST_SINGLE (int32_t)\n+TEST_SINGLE (uint32_t)\n+TEST_SINGLE (float)\n+TEST_SINGLE (int64_t)\n+TEST_SINGLE (uint64_t)\n+TEST_SINGLE (double)\n+\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.b,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.h,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.s,} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tld1b\\tz[0-9]+\\.d,} 6 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.h,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.s,} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.d,} 6 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s,} 14 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.d,} 6 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d,} 20 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.b,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.h,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.d,} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.h,} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.d,} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s,} 18 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.d,} 6 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d,} 24 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tcmp(?:h[is]|l[os])\\tp[0-9]+\\.b,} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tcmp[lg][et]\\tp[0-9]+\\.b,} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tcmp(?:h[is]|l[os])\\tp[0-9]+\\.h,} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tcmp[lg][et]\\tp[0-9]+\\.h,} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tcmp(?:h[is]|l[os])\\tp[0-9]+\\.s,} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tcmp[lg][et]\\tp[0-9]+\\.s,} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tcmp(?:h[is]|l[os])\\tp[0-9]+\\.d,} 10 } } */\n+/* { dg-final { scan-assembler-times {\\tcmp[lg][et]\\tp[0-9]+\\.d,} 10 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tpunpk} } } */"}, {"sha": "d831e9c114251df41364e75bfb58a8d135958700", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_arith_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_1.c?ref=46c705e70e078f6a1920d92e49042125d5e18495", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "5808e0a966392a92fb6cfb9de4e1846e3dc4c58d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_arith_1_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_1_run.c?ref=46c705e70e078f6a1920d92e49042125d5e18495", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize --param aarch64-sve-compare-costs=0\" } */\n \n #include \"cond_arith_1.c\"\n "}, {"sha": "068e0b64793116c4b980dbdaebe0d67d07c19533", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_arith_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_3.c?ref=46c705e70e078f6a1920d92e49042125d5e18495", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "d2580046dab5b1b8a2351fddd31f3534df8cdae9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_arith_3_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_arith_3_run.c?ref=46c705e70e078f6a1920d92e49042125d5e18495", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize --param aarch64-sve-compare-costs=0\" } */\n \n #include \"cond_arith_3.c\"\n "}, {"sha": "687716e7176a3f2a2f82a6368d3df3d970dbf614", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_gather_load_7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_gather_load_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_gather_load_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_gather_load_7.c?ref=46c705e70e078f6a1920d92e49042125d5e18495", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --save-temps --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "a38b92dc53e7ce76b38d89a6d02bb4130ceb4a93", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_load_slp_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_load_slp_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_load_slp_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_load_slp_1.c?ref=46c705e70e078f6a1920d92e49042125d5e18495", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "4efcf3ab32aeddaeb6e860f72e7f4408af472414", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_11.c?ref=46c705e70e078f6a1920d92e49042125d5e18495", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -march=armv8-a+sve\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -march=armv8-a+sve --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "4cbe4a6f867074d2889f80f6eb55f538d48988bc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/vcond_11_run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_11_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c705e70e078f6a1920d92e49042125d5e18495/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_11_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fvcond_11_run.c?ref=46c705e70e078f6a1920d92e49042125d5e18495", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n-/* { dg-options \"-O2 -ftree-vectorize -march=armv8-a+sve\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -march=armv8-a+sve --param aarch64-sve-compare-costs=0\" } */\n \n #include \"vcond_11.c\"\n "}]}