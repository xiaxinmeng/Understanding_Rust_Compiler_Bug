{"sha": "970bb2de656b95612d485b735481160c446500d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwYmIyZGU2NTZiOTU2MTJkNDg1YjczNTQ4MTE2MGM0NDY1MDBkMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-07T07:59:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-07T07:59:40Z"}, "message": "tree-ssa-propagate.c (add_ssa_edge): Dump what edge list we add which use to.\n\n2015-07-07  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-propagate.c (add_ssa_edge): Dump what edge list we\n\tadd which use to.\n\t(add_control_edge): Remove excessive vertical space in dumping.\n\t(process_ssa_edge_worklist): Simulate at most one statement and\n\treturn whether we did.  Do not simulate PHIs if they are in a\n\tBB not yet simulated.\n\t(ssa_propagate): Adjust to always drain the BB worklist whenever\n\ta BB is available there, likewise the VARYING edges list before\n\tthe interesting edge list.\n\nFrom-SVN: r225504", "tree": {"sha": "bf324a789ecc6259c489a4b3f6f2673d7b26b964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf324a789ecc6259c489a4b3f6f2673d7b26b964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/970bb2de656b95612d485b735481160c446500d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970bb2de656b95612d485b735481160c446500d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/970bb2de656b95612d485b735481160c446500d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970bb2de656b95612d485b735481160c446500d2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1999a6643db296882aed956a3b6645550acd42d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1999a6643db296882aed956a3b6645550acd42d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1999a6643db296882aed956a3b6645550acd42d"}], "stats": {"total": 82, "additions": 63, "deletions": 19}, "files": [{"sha": "2cff379df60cc18470da5214a51ca0751f501cfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970bb2de656b95612d485b735481160c446500d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970bb2de656b95612d485b735481160c446500d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=970bb2de656b95612d485b735481160c446500d2", "patch": "@@ -1,3 +1,15 @@\n+2015-07-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-propagate.c (add_ssa_edge): Dump what edge list we\n+\tadd which use to.\n+\t(add_control_edge): Remove excessive vertical space in dumping.\n+\t(process_ssa_edge_worklist): Simulate at most one statement and\n+\treturn whether we did.  Do not simulate PHIs if they are in a\n+\tBB not yet simulated.\n+\t(ssa_propagate): Adjust to always drain the BB worklist whenever\n+\ta BB is available there, likewise the VARYING edges list before\n+\tthe interesting edge list.\n+\n 2015-07-07  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/52144"}, {"sha": "2f6736f5724271194a2aa8e6e609efa7e0ab9ab1", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 51, "deletions": 19, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970bb2de656b95612d485b735481160c446500d2/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970bb2de656b95612d485b735481160c446500d2/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=970bb2de656b95612d485b735481160c446500d2", "patch": "@@ -281,9 +281,23 @@ add_ssa_edge (tree var, bool is_varying)\n \t{\n \t  gimple_set_plf (use_stmt, STMT_IN_SSA_EDGE_WORKLIST, true);\n \t  if (is_varying)\n-\t    varying_ssa_edges.safe_push (use_stmt);\n+\t    {\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t{\n+\t\t  fprintf (dump_file, \"varying_ssa_edges: adding SSA use in \");\n+\t\t  print_gimple_stmt (dump_file, use_stmt, 0, TDF_SLIM);\n+\t\t}\n+\t      varying_ssa_edges.safe_push (use_stmt);\n+\t    }\n \t  else\n-\t    interesting_ssa_edges.safe_push (use_stmt);\n+\t    {\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t{\n+\t\t  fprintf (dump_file, \"interesting_ssa_edges: adding SSA use in \");\n+\t\t  print_gimple_stmt (dump_file, use_stmt, 0, TDF_SLIM);\n+\t\t}\n+\t      interesting_ssa_edges.safe_push (use_stmt);\n+\t    }\n \t}\n     }\n }\n@@ -311,7 +325,7 @@ add_control_edge (edge e)\n   cfg_blocks_add (bb);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \"\\nAdding Destination of edge (%d -> %d) to worklist\\n\",\n+    fprintf (dump_file, \"Adding destination of edge (%d -> %d) to worklist\\n\",\n \te->src->index, e->dest->index);\n }\n \n@@ -414,14 +428,15 @@ simulate_stmt (gimple stmt)\n \n /* Process an SSA edge worklist.  WORKLIST is the SSA edge worklist to\n    drain.  This pops statements off the given WORKLIST and processes\n-   them until there are no more statements on WORKLIST.\n-   We take a pointer to WORKLIST because it may be reallocated when an\n-   SSA edge is added to it in simulate_stmt.  */\n+   them until one statement was simulated or there are no more statements\n+   on WORKLIST.  We take a pointer to WORKLIST because it may be reallocated\n+   when an SSA edge is added to it in simulate_stmt.  Return true if a stmt\n+   was simulated.  */\n \n-static void\n-process_ssa_edge_worklist (vec<gimple> *worklist)\n+static bool \n+process_ssa_edge_worklist (vec<gimple> *worklist, const char *edge_list_name)\n {\n-  /* Drain the entire worklist.  */\n+  /* Process the next entry from the worklist.  */\n   while (worklist->length () > 0)\n     {\n       basic_block bb;\n@@ -437,21 +452,35 @@ process_ssa_edge_worklist (vec<gimple> *worklist)\n       /* STMT is no longer in a worklist.  */\n       gimple_set_plf (stmt, STMT_IN_SSA_EDGE_WORKLIST, false);\n \n+      bb = gimple_bb (stmt);\n+\n+      /* Visit the statement only if its block is marked executable.\n+         If it is not executable then it will be visited when we simulate\n+\t all statements in the block as soon as an incoming edge gets\n+\t marked executable.  */\n+      if (!bitmap_bit_p (executable_blocks, bb->index))\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"\\nDropping statement from SSA worklist: \");\n+\t      print_gimple_stmt (dump_file, stmt, 0, dump_flags);\n+\t    }\n+\t  continue;\n+\t}\n+\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n-\t  fprintf (dump_file, \"\\nSimulating statement (from ssa_edges): \");\n+\t  fprintf (dump_file, \"\\nSimulating statement (from %s): \",\n+\t\t   edge_list_name);\n \t  print_gimple_stmt (dump_file, stmt, 0, dump_flags);\n \t}\n \n-      bb = gimple_bb (stmt);\n+      simulate_stmt (stmt);\n \n-      /* PHI nodes are always visited, regardless of whether or not\n-\t the destination block is executable.  Otherwise, visit the\n-\t statement only if its block is marked executable.  */\n-      if (gimple_code (stmt) == GIMPLE_PHI\n-\t  || bitmap_bit_p (executable_blocks, bb->index))\n-\tsimulate_stmt (stmt);\n+      return true;\n     }\n+\n+  return false;\n }\n \n \n@@ -917,14 +946,17 @@ ssa_propagate (ssa_prop_visit_stmt_fn visit_stmt,\n \t  /* Pull the next block to simulate off the worklist.  */\n \t  basic_block dest_block = cfg_blocks_get ();\n \t  simulate_block (dest_block);\n+\t  continue;\n \t}\n \n       /* In order to move things to varying as quickly as\n \t possible,process the VARYING_SSA_EDGES worklist first.  */\n-      process_ssa_edge_worklist (&varying_ssa_edges);\n+      if (process_ssa_edge_worklist (&varying_ssa_edges, \"varying_ssa_edges\"))\n+\tcontinue;\n \n       /* Now process the INTERESTING_SSA_EDGES worklist.  */\n-      process_ssa_edge_worklist (&interesting_ssa_edges);\n+      process_ssa_edge_worklist (&interesting_ssa_edges,\n+\t\t\t\t \"interesting_ssa_edges\");\n     }\n \n   ssa_prop_fini ();"}]}