{"sha": "1eb3331e96ce4c7652004ef02da7ca9e72539555", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWViMzMzMWU5NmNlNGM3NjUyMDA0ZWYwMmRhN2NhOWU3MjUzOTU1NQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-01-04T01:54:26Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-01-04T01:54:26Z"}, "message": "Fix PR debug/17924 Fix PR debug/19191\n\n2005-01-03  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR debug/17924\n\tFix PR debug/19191\n\t* dwarf2out.c (block_ultimate_origin): Follow decl origin if origin\n\tis a decl.\n\t* gimple-low.c (mark_blocks_with_used_vars): New function.\n\t(mark_blocks_with_used_subblocks): Ditto.\n\t(mark_used_blocks): Ditto.\n\t(pass_mark_used_blocks): New pass.\n\t* tree-inline.c: Include debug.h.\n\t(expand_call_inline): Call outlining_inline_function here.\n\t* tree-optimize.c (init_tree_optimization_passes): Add\n\tpass_mark_used_blocks.\n\t* tree-pass.h (pass_mark_used_blocks): New.\n\t* Makefile.in (tree-inline.o): Add debug.h dependency.\n\nFrom-SVN: r92882", "tree": {"sha": "416968ea26b7983325a0c2ff0b9e690796ea0157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/416968ea26b7983325a0c2ff0b9e690796ea0157"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eb3331e96ce4c7652004ef02da7ca9e72539555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb3331e96ce4c7652004ef02da7ca9e72539555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eb3331e96ce4c7652004ef02da7ca9e72539555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb3331e96ce4c7652004ef02da7ca9e72539555/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35a91d76115048150dd7700a9606756dec2d8d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a91d76115048150dd7700a9606756dec2d8d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35a91d76115048150dd7700a9606756dec2d8d42"}], "stats": {"total": 121, "additions": 120, "deletions": 1}, "files": [{"sha": "d9439885c26fea192c7908f457eafa6b028f2d3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1eb3331e96ce4c7652004ef02da7ca9e72539555", "patch": "@@ -1,3 +1,20 @@\n+2005-01-03  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tFix PR debug/17924\n+\tFix PR debug/19191\n+\t* dwarf2out.c (block_ultimate_origin): Follow decl origin if origin\n+\tis a decl.\n+\t* gimple-low.c (mark_blocks_with_used_vars): New function.\n+\t(mark_blocks_with_used_subblocks): Ditto.\n+\t(mark_used_blocks): Ditto.\n+\t(pass_mark_used_blocks): New pass.\n+\t* tree-inline.c: Include debug.h.\n+\t(expand_call_inline): Call outlining_inline_function here.\n+\t* tree-optimize.c (init_tree_optimization_passes): Add\n+\tpass_mark_used_blocks. \n+\t* tree-pass.h (pass_mark_used_blocks): New.\n+\t* Makefile.in (tree-inline.o): Add debug.h dependency.\n+\n 2005-01-03  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/darwin.c (darwin_handle_weak_import_attribute): Permit"}, {"sha": "a772ccd048b488a9666ff0de7ec3c6905c19e100", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1eb3331e96ce4c7652004ef02da7ca9e72539555", "patch": "@@ -1594,7 +1594,7 @@ tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h insn-config.h \\\n    $(INTEGRATE_H) $(VARRAY_H) $(HASHTAB_H) $(SPLAY_TREE_H) toplev.h \\\n    langhooks.h $(C_COMMON_H) tree-inline.h $(CGRAPH_H) intl.h function.h \\\n-   pointer-set.h $(TREE_GIMPLE_H)\n+   pointer-set.h $(TREE_GIMPLE_H) debug.h\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(GGC_H) langhooks.h real.h\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\"}, {"sha": "0ad5ce3004650267a43e90485f39e4654f2508b2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1eb3331e96ce4c7652004ef02da7ca9e72539555", "patch": "@@ -4632,6 +4632,15 @@ block_ultimate_origin (tree block)\n \t\t       ? BLOCK_ABSTRACT_ORIGIN (ret_val) : NULL);\n \t}\n       while (lookahead != NULL && lookahead != ret_val);\n+      \n+      /* The block's abstract origin chain may not be the *ultimate* origin of\n+\t the block. It could lead to a DECL that has an abstract origin set.\n+\t If so, we want that DECL's abstract origin (which is what DECL_ORIGIN\n+\t will give us if it has one).  Note that DECL's abstract origins are\n+\t supposed to be the most distant ancestor (or so decl_ultimate_origin\n+\t claims), so we don't need to loop following the DECL origins.  */\n+      if (DECL_P (ret_val))\n+\treturn DECL_ORIGIN (ret_val);\n \n       return ret_val;\n     }"}, {"sha": "ee57d9beda0e8c82f012a6ef4f3d4e909d9a47d0", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=1eb3331e96ce4c7652004ef02da7ca9e72539555", "patch": "@@ -540,3 +540,87 @@ struct tree_opt_pass pass_remove_useless_vars =\n   TODO_dump_func,\t\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n+\n+/* Mark BLOCK used if it has a used variable in it, then recurse over it's\n+   subblocks.  */\n+\n+static void\n+mark_blocks_with_used_vars (tree block)\n+{\n+  tree var;\n+  tree subblock;\n+\n+  if (!TREE_USED (block))\n+    {\n+      for (var = BLOCK_VARS (block);\n+\t   var;\n+\t   var = TREE_CHAIN (var))\n+\t{\n+\t  if (TREE_USED (var))\n+\t    {\n+\t      TREE_USED (block) = true;\n+\t      break;\n+\t    }\n+\t}\n+    }\n+  for (subblock = BLOCK_SUBBLOCKS (block);\n+       subblock;\n+       subblock = BLOCK_CHAIN (subblock))\n+    mark_blocks_with_used_vars (subblock);\n+}\n+\n+/* Mark BLOCK used if any of it's subblocks have the USED bit set, or it's\n+   abstract origin is used.  */\n+\n+static bool\n+mark_blocks_with_used_subblocks (tree block)\n+{\n+  tree subblock;\n+ \n+  /* The block may have no variables, but still be used, if it's abstract\n+     origin is used.  This occurs when we inline functions with no parameters\n+     that call functions with no parameters or local vars (such as\n+     dwarf2/dwarf-die7.c).  You end up with a block that has an abstract\n+     origin, no variables, and nothing in the subblocks is used.  However, the\n+     block is really used, because it's abstract origin was used.  */\n+\n+  if (BLOCK_ABSTRACT_ORIGIN (block))\n+    {\n+      if (TREE_USED (BLOCK_ABSTRACT_ORIGIN (block)))\n+\tTREE_USED (block) = true;\n+    }\n+\n+  for (subblock = BLOCK_SUBBLOCKS (block);\n+       subblock;\n+       subblock = BLOCK_CHAIN (subblock))\n+    TREE_USED (block) |= mark_blocks_with_used_subblocks (subblock);\n+  return TREE_USED (block);\n+}\n+\n+/* Mark the used attribute on blocks correctly.  */\n+  \n+static void\n+mark_used_blocks (void)\n+{\n+  \n+  mark_blocks_with_used_vars (DECL_INITIAL (current_function_decl));\n+  mark_blocks_with_used_subblocks (DECL_INITIAL (current_function_decl));\n+}\n+\n+\n+struct tree_opt_pass pass_mark_used_blocks = \n+{\n+  \"blocks\",\t\t\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  mark_used_blocks,\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  0,\t\t\t\t\t/* tv_id */\n+  0,\t\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_dump_func,\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n+};"}, {"sha": "b6ad39940e051aea3fa71e2d86fedfbaf347725a", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1eb3331e96ce4c7652004ef02da7ca9e72539555", "patch": "@@ -43,6 +43,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree-mudflap.h\"\n #include \"function.h\"\n #include \"diagnostic.h\"\n+#include \"debug.h\"\n \n /* I'm not real happy about this, but we need to handle gimple and\n    non-gimple trees.  */\n@@ -1640,6 +1641,12 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n      The easiest solution is to simply recalculate TREE_SIDE_EFFECTS for\n      the toplevel expression.  */\n   recalculate_side_effects (expr);\n+  \n+  /* Output the inlining info for this abstract function, since it has been\n+     inlined.  If we don't do this now, we can lose the information about the\n+     variables in the function when the blocks get blown away as soon as we\n+     remove the cgraph node.  */\n+  (*debug_hooks->outlining_inline_function) (edge->callee->decl);\n \n   /* Update callgraph if needed.  */\n   cgraph_remove_node (edge->callee);"}, {"sha": "85cfb3a87df461d440f7e78fd2fa89adcf26426b", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=1eb3331e96ce4c7652004ef02da7ca9e72539555", "patch": "@@ -399,6 +399,7 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_del_ssa);\n   NEXT_PASS (pass_nrv);\n   NEXT_PASS (pass_remove_useless_vars);\n+  NEXT_PASS (pass_mark_used_blocks);\n   NEXT_PASS (pass_cleanup_cfg_post_optimizing);\n   *p = NULL;\n "}, {"sha": "4468fe5d6c5e4467d521072987fa2a17606c3fc1", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb3331e96ce4c7652004ef02da7ca9e72539555/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=1eb3331e96ce4c7652004ef02da7ca9e72539555", "patch": "@@ -158,6 +158,7 @@ extern struct tree_opt_pass pass_redundant_phi;\n extern struct tree_opt_pass pass_dse;\n extern struct tree_opt_pass pass_nrv;\n extern struct tree_opt_pass pass_remove_useless_vars;\n+extern struct tree_opt_pass pass_mark_used_blocks;\n extern struct tree_opt_pass pass_rename_ssa_copies;\n extern struct tree_opt_pass pass_expand;\n extern struct tree_opt_pass pass_rest_of_compilation;"}]}