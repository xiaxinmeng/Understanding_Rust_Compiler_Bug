{"sha": "d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlYTcwYTBkY2Y3Y2E2OTMyMWM2ZmE3YzU4M2JjOWEyY2EzZGZkMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-19T07:41:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-19T07:41:30Z"}, "message": "re PR ipa/82801 (Internal compiler error with Eigen and __attribute__((always_inline, flatten)))\n\n\tPR ipa/82801\n\tPR ipa/83346\n\t* ipa-inline.c (flatten_remove_node_hook): New function.\n\t(ipa_inline): Keep only nodes with flatten attribute at the end of\n\tthe array in the order from ipa_reverse_postorder, only walk that\n\tportion of array for flattening, if there is more than one such\n\tnode, temporarily register a removal hook and ignore removed nodes.\n\n\t* g++.dg/ipa/pr82801.C: New test.\n\nFrom-SVN: r255805", "tree": {"sha": "cc54cbe3f5dfa6131a8bf99d50066771936a7fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc54cbe3f5dfa6131a8bf99d50066771936a7fa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "497742efce59a3296461199c16bbc520154d0e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497742efce59a3296461199c16bbc520154d0e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/497742efce59a3296461199c16bbc520154d0e2e"}], "stats": {"total": 98, "additions": 87, "deletions": 11}, "files": [{"sha": "9d7875e3918633813c8d33c632544e4a281533fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0", "patch": "@@ -1,5 +1,13 @@\n 2017-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR ipa/82801\n+\tPR ipa/83346\n+\t* ipa-inline.c (flatten_remove_node_hook): New function.\n+\t(ipa_inline): Keep only nodes with flatten attribute at the end of\n+\tthe array in the order from ipa_reverse_postorder, only walk that\n+\tportion of array for flattening, if there is more than one such\n+\tnode, temporarily register a removal hook and ignore removed nodes.\n+\n \tPR tree-optimization/80631\n \t* tree-vect-loop.c (vect_create_epilog_for_reduction): Compare\n \tinduc_code against MAX_EXPR or MIN_EXPR instead of reduc_fn against"}, {"sha": "4af47b4d055057aa39dda64d933511032f139e81", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0", "patch": "@@ -2338,6 +2338,19 @@ dump_inline_stats (void)\n \t       (int) reason[i][1], reason_freq[i].to_double (), reason[i][0]);\n }\n \n+/* Called when node is removed.  */\n+\n+static void\n+flatten_remove_node_hook (struct cgraph_node *node, void *data)\n+{\n+  if (lookup_attribute (\"flatten\", DECL_ATTRIBUTES (node->decl)) == NULL)\n+    return;\n+\n+  hash_set<struct cgraph_node *> *removed\n+    = (hash_set<struct cgraph_node *> *) data;\n+  removed->add (node);\n+}\n+\n /* Decide on the inlining.  We do so in the topological order to avoid\n    expenses on updating data structures.  */\n \n@@ -2347,7 +2360,7 @@ ipa_inline (void)\n   struct cgraph_node *node;\n   int nnodes;\n   struct cgraph_node **order;\n-  int i;\n+  int i, j;\n   int cold;\n   bool remove_functions = false;\n \n@@ -2380,26 +2393,56 @@ ipa_inline (void)\n   if (dump_file)\n     fprintf (dump_file, \"\\nFlattening functions:\\n\");\n \n+  /* First shrink order array, so that it only contains nodes with\n+     flatten attribute.  */\n+  for (i = nnodes - 1, j = i; i >= 0; i--)\n+    {\n+      node = order[i];\n+      if (lookup_attribute (\"flatten\",\n+\t\t\t    DECL_ATTRIBUTES (node->decl)) != NULL)\n+\torder[j--] = order[i];\n+    }\n+\n+  /* After the above loop, order[j + 1] ... order[nnodes - 1] contain\n+     nodes with flatten attribute.  If there is more than one such\n+     node, we need to register a node removal hook, as flatten_function\n+     could remove other nodes with flatten attribute.  See PR82801.  */\n+  struct cgraph_node_hook_list *node_removal_hook_holder = NULL;\n+  hash_set<struct cgraph_node *> *flatten_removed_nodes = NULL;\n+  if (j < nnodes - 2)\n+    {\n+      flatten_removed_nodes = new hash_set<struct cgraph_node *>;\n+      node_removal_hook_holder\n+\t= symtab->add_cgraph_removal_hook (&flatten_remove_node_hook,\n+\t\t\t\t\t   flatten_removed_nodes);\n+    }\n+\n   /* In the first pass handle functions to be flattened.  Do this with\n      a priority so none of our later choices will make this impossible.  */\n-  for (i = nnodes - 1; i >= 0; i--)\n+  for (i = nnodes - 1; i > j; i--)\n     {\n       node = order[i];\n+      if (flatten_removed_nodes\n+\t  && flatten_removed_nodes->contains (node))\n+\tcontinue;\n \n       /* Handle nodes to be flattened.\n \t Ideally when processing callees we stop inlining at the\n \t entry of cycles, possibly cloning that entry point and\n \t try to flatten itself turning it into a self-recursive\n \t function.  */\n-      if (lookup_attribute (\"flatten\",\n-\t\t\t    DECL_ATTRIBUTES (node->decl)) != NULL)\n-\t{\n-\t  if (dump_file)\n-\t    fprintf (dump_file,\n-\t\t     \"Flattening %s\\n\", node->name ());\n-\t  flatten_function (node, false);\n-\t}\n+      if (dump_file)\n+\tfprintf (dump_file, \"Flattening %s\\n\", node->name ());\n+      flatten_function (node, false);\n+    }\n+\n+  if (j < nnodes - 2)\n+    {\n+      symtab->remove_cgraph_removal_hook (node_removal_hook_holder);\n+      delete flatten_removed_nodes;\n     }\n+  free (order);\n+\n   if (dump_file)\n     dump_overall_stats ();\n \n@@ -2411,7 +2454,6 @@ ipa_inline (void)\n      inline functions and virtual functions so we really know what is called\n      once.  */\n   symtab->remove_unreachable_nodes (dump_file);\n-  free (order);\n \n   /* Inline functions with a property that after inlining into all callers the\n      code size will shrink because the out-of-line copy is eliminated. "}, {"sha": "5c375c1b8b6d67b915a4129604a5697c39a1f99e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0", "patch": "@@ -1,3 +1,9 @@\n+2017-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR ipa/82801\n+\tPR ipa/83346\n+\t* g++.dg/ipa/pr82801.C: New test.\n+\n 2017-12-18  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/83373"}, {"sha": "d0c2756e47a412706e4d90c8488275d28c20520f", "filename": "gcc/testsuite/g++.dg/ipa/pr82801.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr82801.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr82801.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr82801.C?ref=d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0", "patch": "@@ -0,0 +1,20 @@\n+// PR ipa/82801\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wno-attributes\" }\n+\n+template<int>\n+struct A { A () {} };\n+struct B { double foo () const; };\n+\n+__attribute__((always_inline, flatten))\n+double B::foo () const\n+{\n+  A<1> v;\n+  return 0.0;\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"}]}