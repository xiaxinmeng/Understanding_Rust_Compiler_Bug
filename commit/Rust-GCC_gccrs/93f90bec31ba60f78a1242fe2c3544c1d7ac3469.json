{"sha": "93f90bec31ba60f78a1242fe2c3544c1d7ac3469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNmOTBiZWMzMWJhNjBmNzhhMTI0MmZlMmMzNTQ0YzFkN2FjMzQ2OQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-10-27T14:59:04Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-10-27T14:59:04Z"}, "message": "match.pd ((convert (op:s (convert@2 @0) (convert?@3 @1)))): Add support for constant operand for OP.\n\n\t* match.pd ((convert (op:s (convert@2 @0) (convert?@3 @1)))): Add\n\tsupport for constant operand for OP.\n\n\tgcc/testsuite\n\t* gcc.dg/fold-narrowbopcst-1.c: New test.\n\nFrom-SVN: r241624", "tree": {"sha": "d967b316fe6af130249a30a38dff681ae741f5f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d967b316fe6af130249a30a38dff681ae741f5f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93f90bec31ba60f78a1242fe2c3544c1d7ac3469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f90bec31ba60f78a1242fe2c3544c1d7ac3469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f90bec31ba60f78a1242fe2c3544c1d7ac3469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f90bec31ba60f78a1242fe2c3544c1d7ac3469/comments", "author": null, "committer": null, "parents": [{"sha": "9a6ac422ec269e12c88a852369bb3cc32c72c2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6ac422ec269e12c88a852369bb3cc32c72c2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a6ac422ec269e12c88a852369bb3cc32c72c2b9"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "73d3004b7cdd394aed50a40c8f03efa91c5bf411", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f90bec31ba60f78a1242fe2c3544c1d7ac3469/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f90bec31ba60f78a1242fe2c3544c1d7ac3469/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93f90bec31ba60f78a1242fe2c3544c1d7ac3469", "patch": "@@ -1,3 +1,8 @@\n+2016-10-27  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* match.pd ((convert (op:s (convert@2 @0) (convert?@3 @1)))): Add\n+\tsupport for constant operand for OP.\n+\n 2016-10-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2out.c (gen_member_die): Only reparent_child instead of"}, {"sha": "48f73514a3fa6bfef3e4af0b8cbdce6eed46470f", "filename": "gcc/match.pd", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f90bec31ba60f78a1242fe2c3544c1d7ac3469/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f90bec31ba60f78a1242fe2c3544c1d7ac3469/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=93f90bec31ba60f78a1242fe2c3544c1d7ac3469", "patch": "@@ -3277,7 +3277,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    operation and convert the result to the desired type.  */\n (for op (plus minus)\n   (simplify\n-    (convert (op:s (convert@2 @0) (convert@3 @1)))\n+    (convert (op:s (convert@2 @0) (convert?@3 @1)))\n     (if (INTEGRAL_TYPE_P (type)\n \t /* We check for type compatibility between @0 and @1 below,\n \t    so there's no need to check that @1/@3 are integral types.  */\n@@ -3293,12 +3293,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t && TYPE_PRECISION (type) == GET_MODE_PRECISION (TYPE_MODE (type))\n \t /* The inner conversion must be a widening conversion.  */\n \t && TYPE_PRECISION (TREE_TYPE (@2)) > TYPE_PRECISION (TREE_TYPE (@0))\n-\t && types_match (@0, @1)\n-\t && types_match (@0, type))\n+\t && types_match (@0, type)\n+\t && (types_match (@0, @1)\n+\t     /* Or the second operand is const integer or converted const\n+\t\tinteger from valueize.  */\n+\t     || TREE_CODE (@1) == INTEGER_CST))\n       (if (TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n-\t(convert (op @0 @1))\n+\t(op @0 (convert @1))\n \t(with { tree utype = unsigned_type_for (TREE_TYPE (@0)); }\n-\t (convert (op (convert:utype @0) (convert:utype @1))))))))\n+\t (convert (op (convert:utype @0)\n+\t\t      (convert:utype @1))))))))\n \n /* This is another case of narrowing, specifically when there's an outer\n    BIT_AND_EXPR which masks off bits outside the type of the innermost"}, {"sha": "72f669cfcf74d3975442d40a50fc95b32def95cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f90bec31ba60f78a1242fe2c3544c1d7ac3469/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f90bec31ba60f78a1242fe2c3544c1d7ac3469/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93f90bec31ba60f78a1242fe2c3544c1d7ac3469", "patch": "@@ -1,3 +1,7 @@\n+2016-10-27  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* gcc.dg/fold-narrowbopcst-1.c: New test.\n+\n 2016-10-27  Fritz Reese <fritzoreese@gmail.com>\n \n \t* gfortran.dg/dec_io_5.f90: Don't use \"test.txt\", and use"}, {"sha": "8a33677c274ddeb57a062da774b8b62358201f1d", "filename": "gcc/testsuite/gcc.dg/fold-narrowbopcst-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93f90bec31ba60f78a1242fe2c3544c1d7ac3469/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-narrowbopcst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93f90bec31ba60f78a1242fe2c3544c1d7ac3469/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-narrowbopcst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-narrowbopcst-1.c?ref=93f90bec31ba60f78a1242fe2c3544c1d7ac3469", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int foo1 (unsigned char a[], unsigned int x)\n+{\n+  unsigned int i;\n+  for (i = 0; i < 1000; i++)\n+    {\n+      x = a[i];\n+      a[i] = (unsigned char)(x >= 100 ? x - 100 : 0);\n+    }\n+  return x;\n+}\n+/* { dg-final { scan-tree-dump \" = _.* \\\\+ 156\" \"optimized\" } } */"}]}