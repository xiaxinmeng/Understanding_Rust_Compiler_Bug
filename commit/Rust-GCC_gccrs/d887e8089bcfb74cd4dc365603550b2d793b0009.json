{"sha": "d887e8089bcfb74cd4dc365603550b2d793b0009", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4N2U4MDg5YmNmYjc0Y2Q0ZGMzNjU2MDM1NTBiMmQ3OTNiMDAwOQ==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-08-14T22:51:05Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-08-14T22:51:05Z"}, "message": "(do_spec_1): Add %u.\n\n\t(default_compilers): For output of as when -c is not used, use %u\n\trather than %g so each object filename will be unique.\n\n(NULL_PTR): Use the same definition as\n\trtl.h and tree.h.\n\nFrom-SVN: r1845", "tree": {"sha": "b71eb837034668ce5cc658e6adcc4bed167d01d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b71eb837034668ce5cc658e6adcc4bed167d01d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d887e8089bcfb74cd4dc365603550b2d793b0009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d887e8089bcfb74cd4dc365603550b2d793b0009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d887e8089bcfb74cd4dc365603550b2d793b0009", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d887e8089bcfb74cd4dc365603550b2d793b0009/comments", "author": null, "committer": null, "parents": [{"sha": "b29d5f754357e681fdcee69142278cac30ce2aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29d5f754357e681fdcee69142278cac30ce2aba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b29d5f754357e681fdcee69142278cac30ce2aba"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "dbf72f42d4fe112f529ca2d84e82ad5c0dd2d762", "filename": "gcc/gcc.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d887e8089bcfb74cd4dc365603550b2d793b0009/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d887e8089bcfb74cd4dc365603550b2d793b0009/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=d887e8089bcfb74cd4dc365603550b2d793b0009", "patch": "@@ -194,6 +194,7 @@ or with constant text in a single argument.\n \tonce per compilation.  Different temporary file names are made by\n \tconcatenation of constant strings on the end, as in `%g.s'.\n \t%g also has the same effect of %d.\n+ %u\tlike %g, but make the temporary file name unique.\n  %d\tmarks the argument containing or following the %d as a\n \ttemporary file name, so that that file will be deleted if CC exits\n \tsuccessfully.  Unlike %g, this contributes no text to the argument.\n@@ -428,7 +429,7 @@ static struct compiler default_compilers[] =\n \t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n \t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n               %{!S:as %{R} %{j} %{J} %{h} %{d2} %a %Y\\\n-\t\t      %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%g.o}\\\n+\t\t      %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o}\\\n                       %{!pipe:%g.s} %A\\n }}}}\"},\n   {\"-\",\n    \"%{E:cpp -lang-c %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n@@ -461,7 +462,7 @@ static struct compiler default_compilers[] =\n \t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n \t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n               %{!S:as %{R} %{j} %{J} %{h} %{d2} %a %Y\\\n-\t\t      %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%g.o}\\\n+\t\t      %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o}\\\n                       %{!pipe:%g.s} %A\\n }}}}\"},\n   {\".h\", \"@c-header\"},\n   {\"@c-header\",\n@@ -496,7 +497,7 @@ static struct compiler default_compilers[] =\n \t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n \t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n               %{!S:as %{R} %{j} %{J} %{h} %{d2} %a %Y\\\n-\t\t      %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%g.o}\\\n+\t\t      %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o}\\\n                       %{!pipe:%g.s} %A\\n }}}}\"},\n   {\".i\", \"@cpp-output\"},\n   {\"@cpp-output\",\n@@ -507,7 +508,7 @@ static struct compiler default_compilers[] =\n \t%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n \t%{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n     %{!S:as %{R} %{j} %{J} %{h} %{d2} %a %Y\\\n-            %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%g.o} %{!pipe:%g.s} %A\\n }\"},\n+            %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o} %{!pipe:%g.s} %A\\n }\"},\n   {\".ii\", \"@c++-cpp-output\"},\n   {\"@c++-cpp-output\",\n    \"cc1plus %i %1 %2 %{!Q:-quiet} %{d*} %{m*} %{a}\\\n@@ -517,12 +518,12 @@ static struct compiler default_compilers[] =\n \t    %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n \t    %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n        %{!S:as %{R} %{j} %{J} %{h} %{d2} %a %Y\\\n-\t       %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%g.o}\\\n+\t       %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o}\\\n \t       %{!pipe:%g.s} %A\\n }\"},\n   {\".s\", \"@assembler\"},\n   {\"@assembler\",\n    \"%{!S:as %{R} %{j} %{J} %{h} %{d2} %a %Y\\\n-            %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%g.o} %i %A\\n }\"},\n+            %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o} %i %A\\n }\"},\n   {\".S\", \"@assembler-with-cpp\"},\n   {\"@assembler-with-cpp\",\n    \"cpp -lang-asm %{nostdinc*} %{C} %{v} %{A*} %{D*} %{U*} %{I*} %{i*} %{P} %I\\\n@@ -534,7 +535,7 @@ static struct compiler default_compilers[] =\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.s}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\\\n     %{!M:%{!MM:%{!E:%{!S:as %{R} %{j} %{J} %{h} %{d2} %a %Y\\\n-                    %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%g.o}\\\n+                    %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o}\\\n \t\t    %{!pipe:%g.s} %A\\n }}}}\"},\n   /* Mark end of table */\n   {0, 0}\n@@ -2477,11 +2478,19 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    break;\n \n \t  case 'g':\n+\t  case 'u':\n \t    if (save_temps_flag)\n \t      obstack_grow (&obstack, input_basename, basename_length);\n \t    else\n \t      {\n \t\tobstack_grow (&obstack, temp_filename, temp_filename_length);\n+\t\tif (c == 'u')\n+\t\t  {\n+\t\t    static int unique;\n+\t\t    char buff[9];\n+\t\t    sprintf (buff, \"%d\", ++unique);\n+\t\t    obstack_grow (&obstack, buff, strlen (buff));\n+\t\t  }\n \t\tdelete_this_arg = 1;\n \t      }\n \t    arg_going = 1;"}]}