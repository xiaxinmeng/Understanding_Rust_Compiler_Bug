{"sha": "33305b74b7b050a1a220c2d4d50fbb9ddccb7c58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMzMDViNzRiN2IwNTBhMWEyMjBjMmQ0ZDUwZmJiOWRkY2NiN2M1OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-18T21:55:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-18T21:55:46Z"}, "message": "re PR debug/78191 (ICE in calc_die_sizes)\n\n\t* dwarf2out.c (size_of_discr_list): Fix typo in function comment.\n\n\tPR debug/78191\n\t* dwarf2out.c (abbrev_opt_base_type_end): New variable.\n\t(die_abbrev_cmp): Sort dies with die_abbrev smaller than\n\tabbrev_opt_base_type_end only by increasing die_abbrev, before\n\tany other dies.\n\t(optimize_abbrev_table): Don't change abbrev numbers of\n\tbase types and CU or optimize implicit consts in them if\n\tcalc_base_type_die_sizes has been called during build_abbrev_table.\n\t(calc_base_type_die_sizes): If abbrev_opt_start, set\n\tabbrev_opt_base_type_end to one plus largest base type's\n\tdie_abbrev.\n\nFrom-SVN: r242606", "tree": {"sha": "5c140f9e911058b1c868e64be2ecd1936faacb35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c140f9e911058b1c868e64be2ecd1936faacb35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33305b74b7b050a1a220c2d4d50fbb9ddccb7c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33305b74b7b050a1a220c2d4d50fbb9ddccb7c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33305b74b7b050a1a220c2d4d50fbb9ddccb7c58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33305b74b7b050a1a220c2d4d50fbb9ddccb7c58/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57d7fe867cfc59db8481dfe0f8646f029889ef3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d7fe867cfc59db8481dfe0f8646f029889ef3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d7fe867cfc59db8481dfe0f8646f029889ef3f"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "9a793343da39b3a8dc881620c83a96fa0bc5c038", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33305b74b7b050a1a220c2d4d50fbb9ddccb7c58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33305b74b7b050a1a220c2d4d50fbb9ddccb7c58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33305b74b7b050a1a220c2d4d50fbb9ddccb7c58", "patch": "@@ -1,3 +1,19 @@\n+2016-11-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (size_of_discr_list): Fix typo in function comment.\n+\n+\tPR debug/78191\n+\t* dwarf2out.c (abbrev_opt_base_type_end): New variable.\n+\t(die_abbrev_cmp): Sort dies with die_abbrev smaller than\n+\tabbrev_opt_base_type_end only by increasing die_abbrev, before\n+\tany other dies.\n+\t(optimize_abbrev_table): Don't change abbrev numbers of\n+\tbase types and CU or optimize implicit consts in them if\n+\tcalc_base_type_die_sizes has been called during build_abbrev_table.\n+\t(calc_base_type_die_sizes): If abbrev_opt_start, set\n+\tabbrev_opt_base_type_end to one plus largest base type's\n+\tdie_abbrev.\n+\n 2016-11-18  Jeff Law  <law@redhat.com>\n \n \tPR target/25112"}, {"sha": "66a4919187db718954c995dcb6b21c3b28e6aa33", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33305b74b7b050a1a220c2d4d50fbb9ddccb7c58/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33305b74b7b050a1a220c2d4d50fbb9ddccb7c58/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=33305b74b7b050a1a220c2d4d50fbb9ddccb7c58", "patch": "@@ -1911,7 +1911,7 @@ size_of_discr_value (dw_discr_value *discr_value)\n     return size_of_sleb128 (discr_value->v.sval);\n }\n \n-/* Return the size of the value in a DW_discr_list attribute.  */\n+/* Return the size of the value in a DW_AT_discr_list attribute.  */\n \n static int\n size_of_discr_list (dw_discr_list_ref discr_list)\n@@ -8550,6 +8550,11 @@ optimize_external_refs (dw_die_ref die)\n /* First abbrev_id that can be optimized based on usage.  */\n static unsigned int abbrev_opt_start;\n \n+/* Maximum abbrev_id of a base type plus one (we can't optimize DIEs with\n+   abbrev_id smaller than this, because they must be already sized\n+   during build_abbrev_table).  */\n+static unsigned int abbrev_opt_base_type_end;\n+\n /* Vector of usage counts during build_abbrev_table.  Indexed by\n    abbrev_id - abbrev_opt_start.  */\n static vec<unsigned int> abbrev_usage_count;\n@@ -8648,12 +8653,16 @@ die_abbrev_cmp (const void *p1, const void *p2)\n   gcc_checking_assert (die1->die_abbrev >= abbrev_opt_start);\n   gcc_checking_assert (die2->die_abbrev >= abbrev_opt_start);\n \n-  if (abbrev_usage_count[die1->die_abbrev - abbrev_opt_start]\n-      > abbrev_usage_count[die2->die_abbrev - abbrev_opt_start])\n-    return -1;\n-  if (abbrev_usage_count[die1->die_abbrev - abbrev_opt_start]\n-      < abbrev_usage_count[die2->die_abbrev - abbrev_opt_start])\n-    return 1;\n+  if (die1->die_abbrev >= abbrev_opt_base_type_end\n+      && die2->die_abbrev >= abbrev_opt_base_type_end)\n+    {\n+      if (abbrev_usage_count[die1->die_abbrev - abbrev_opt_start]\n+\t  > abbrev_usage_count[die2->die_abbrev - abbrev_opt_start])\n+\treturn -1;\n+      if (abbrev_usage_count[die1->die_abbrev - abbrev_opt_start]\n+\t  < abbrev_usage_count[die2->die_abbrev - abbrev_opt_start])\n+\treturn 1;\n+    }\n \n   /* Stabilize the sort.  */\n   if (die1->die_abbrev < die2->die_abbrev)\n@@ -8731,21 +8740,28 @@ optimize_abbrev_table (void)\n       sorted_abbrev_dies.qsort (die_abbrev_cmp);\n \n       unsigned int abbrev_id = abbrev_opt_start - 1;\n-      unsigned int first_id = 0;\n+      unsigned int first_id = ~0U;\n       unsigned int last_abbrev_id = 0;\n       unsigned int i;\n       dw_die_ref die;\n+      if (abbrev_opt_base_type_end > abbrev_opt_start)\n+\tabbrev_id = abbrev_opt_base_type_end - 1;\n       /* Reassign abbreviation ids from abbrev_opt_start above, so that\n \t most commonly used abbreviations come first.  */\n       FOR_EACH_VEC_ELT (sorted_abbrev_dies, i, die)\n \t{\n \t  dw_attr_node *a;\n \t  unsigned ix;\n \n+\t  /* If calc_base_type_die_sizes has been called, the CU and\n+\t     base types after it can't be optimized, because we've already\n+\t     calculated their DIE offsets.  We've sorted them first.  */\n+\t  if (die->die_abbrev < abbrev_opt_base_type_end)\n+\t    continue;\n \t  if (die->die_abbrev != last_abbrev_id)\n \t    {\n \t      last_abbrev_id = die->die_abbrev;\n-\t      if (dwarf_version >= 5 && i)\n+\t      if (dwarf_version >= 5 && first_id != ~0U)\n \t\toptimize_implicit_const (first_id, i, implicit_consts);\n \t      abbrev_id++;\n \t      (*abbrev_die_table)[abbrev_id] = die;\n@@ -8785,11 +8801,12 @@ optimize_abbrev_table (void)\n \t  die->die_abbrev = abbrev_id;\n \t}\n       gcc_assert (abbrev_id == vec_safe_length (abbrev_die_table) - 1);\n-      if (dwarf_version >= 5)\n+      if (dwarf_version >= 5 && first_id != ~0U)\n \toptimize_implicit_const (first_id, i, implicit_consts);\n     }\n \n   abbrev_opt_start = 0;\n+  abbrev_opt_base_type_end = 0;\n   abbrev_usage_count.release ();\n   sorted_abbrev_dies.release ();\n }\n@@ -9043,6 +9060,9 @@ calc_base_type_die_sizes (void)\n \t\t  && base_type->die_abbrev);\n       prev = base_type;\n #endif\n+      if (abbrev_opt_start\n+\t  && base_type->die_abbrev >= abbrev_opt_base_type_end)\n+\tabbrev_opt_base_type_end = base_type->die_abbrev + 1;\n       base_type->die_offset = die_offset;\n       die_offset += size_of_die (base_type);\n     }"}]}