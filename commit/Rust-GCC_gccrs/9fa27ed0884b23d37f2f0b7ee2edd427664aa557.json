{"sha": "9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhMjdlZDA4ODRiMjNkMzdmMmYwYjdlZTJlZGQ0Mjc2NjRhYTU1Nw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-01-09T23:04:20Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-01-09T23:04:20Z"}, "message": "libphobos: Merge phobos upstream b022e552a\n\nThis removes updates the removal date of all deprecations in phobos.\nMany of the marked functions have passed their end dates, and are now\nabsent in upstream.\n\nReviewed-on: https://github.com/dlang/phobos/pull/6828\n\nFrom-SVN: r267788", "tree": {"sha": "febf873c1ebf0aa58a9bc85d097f4c2f68a83005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/febf873c1ebf0aa58a9bc85d097f4c2f68a83005"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/comments", "author": null, "committer": null, "parents": [{"sha": "9ed7e53d8e38694d76de50be2abaa42aa0ca92cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed7e53d8e38694d76de50be2abaa42aa0ca92cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed7e53d8e38694d76de50be2abaa42aa0ca92cd"}], "stats": {"total": 1586, "additions": 80, "deletions": 1506}, "files": [{"sha": "f32fc597d958692b0faac0ad1754e58bbb216d41", "filename": "libphobos/src/MERGE", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -0,0 +1,4 @@\n+b022e552aaca84810e3dda3a18179440943c7096\n+\n+The first line of this file holds the git revision number of the last\n+merge done from the dlang/phobos repository."}, {"sha": "b03f5e9d2d0fbedc3a14dd2f95186542968596c1", "filename": "libphobos/src/std/array.d", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Farray.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Farray.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Farray.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -76,7 +76,6 @@ Source: $(PHOBOSSRC std/_array.d)\n */\n module std.array;\n \n-static import std.algorithm.iteration; // FIXME, remove with alias of splitter\n import std.functional;\n import std.meta;\n import std.traits;\n@@ -1465,6 +1464,7 @@ if (isSomeString!S)\n {\n     import std.ascii : isWhite;\n     import std.algorithm.comparison : equal;\n+    import std.algorithm.iteration : splitter;\n \n     string str = \"Hello World!\";\n     assert(str.splitter!(isWhite).equal([\"Hello\", \"World!\"]));\n@@ -1524,10 +1524,6 @@ if (isSomeString!S)\n     assert(a == [[1], [4, 5, 1], [4, 5]]);\n }\n \n-// Explicitly undocumented. It will be removed in January 2018. @@@DEPRECATED_2018-01@@@\n-deprecated(\"Please use std.algorithm.iteration.splitter instead.\")\n-alias splitter = std.algorithm.iteration.splitter;\n-\n /++\n     Eagerly splits $(D range) into an array, using $(D sep) as the delimiter.\n "}, {"sha": "eaee62f241303da99944103542fa46e50e55c325", "filename": "libphobos/src/std/conv.d", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fconv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fconv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fconv.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -3865,20 +3865,10 @@ if (isInputRange!Source && isSomeChar!(ElementType!Source) &&\n string text(T...)(T args)\n if (T.length > 0) { return textImpl!string(args); }\n \n-// @@@DEPRECATED_2018-06@@@\n-deprecated(\"Calling `text` with 0 arguments is deprecated\")\n-string text(T...)(T args)\n-if (T.length == 0) { return textImpl!string(args); }\n-\n ///ditto\n wstring wtext(T...)(T args)\n if (T.length > 0) { return textImpl!wstring(args); }\n \n-// @@@DEPRECATED_2018-06@@@\n-deprecated(\"Calling `wtext` with 0 arguments is deprecated\")\n-wstring wtext(T...)(T args)\n-if (T.length == 0) { return textImpl!wstring(args); }\n-\n ///ditto\n dstring dtext(T...)(T args)\n if (T.length > 0) { return textImpl!dstring(args); }\n@@ -3891,10 +3881,24 @@ if (T.length > 0) { return textImpl!dstring(args); }\n     assert(dtext(42, ' ', 1.5, \": xyz\") == \"42 1.5: xyz\"d);\n }\n \n-// @@@DEPRECATED_2018-06@@@\n-deprecated(\"Calling `dtext` with 0 arguments is deprecated\")\n-dstring dtext(T...)(T args)\n-if (T.length == 0) { return textImpl!dstring(args); }\n+@safe unittest\n+{\n+    char  c = 'h';\n+    wchar w = '\u4f60';\n+    dchar d = '\u12a5';\n+\n+    assert( text(c, \"ello\", ' ', w, \"\u597d \", d, \"\u12cd \u1230\u120b\u121d \u1290\u12cd\") == \"hello \u4f60\u597d \u12a5\u12cd \u1230\u120b\u121d \u1290\u12cd\"c);\n+    assert(wtext(c, \"ello\", ' ', w, \"\u597d \", d, \"\u12cd \u1230\u120b\u121d \u1290\u12cd\") == \"hello \u4f60\u597d \u12a5\u12cd \u1230\u120b\u121d \u1290\u12cd\"w);\n+    assert(dtext(c, \"ello\", ' ', w, \"\u597d \", d, \"\u12cd \u1230\u120b\u121d \u1290\u12cd\") == \"hello \u4f60\u597d \u12a5\u12cd \u1230\u120b\u121d \u1290\u12cd\"d);\n+\n+    string  cs = \"\u4eca\u65e5\u306f\";\n+    wstring ws = \"\uc5ec\ubcf4\uc138\uc694\";\n+    dstring ds = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\";\n+\n+    assert( text(cs, ' ', ws, \" \", ds) == \"\u4eca\u65e5\u306f \uc5ec\ubcf4\uc138\uc694 \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\"c);\n+    assert(wtext(cs, ' ', ws, \" \", ds) == \"\u4eca\u65e5\u306f \uc5ec\ubcf4\uc138\uc694 \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\"w);\n+    assert(dtext(cs, ' ', ws, \" \", ds) == \"\u4eca\u65e5\u306f \uc5ec\ubcf4\uc138\uc694 \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\"d);\n+}\n \n private S textImpl(S, U...)(U args)\n {"}, {"sha": "d571f5fdd3348a878be2c92a6306a259fd6ce136", "filename": "libphobos/src/std/datetime/date.d", "status": "modified", "additions": 6, "deletions": 217, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fdate.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fdate.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fdate.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -2154,32 +2154,6 @@ public:\n         assert(idt - duration == DateTime(1999, 7, 6, 12, 30, 21));\n     }\n \n-    // Explicitly undocumented. It will be removed in January 2018. @@@DEPRECATED_2018-01@@@\n-    deprecated(\"Use Duration instead of TickDuration.\")\n-    DateTime opBinary(string op)(in TickDuration td) const @safe pure nothrow @nogc\n-        if (op == \"+\" || op == \"-\")\n-    {\n-        DateTime retval = this;\n-        immutable seconds = td.seconds;\n-        mixin(\"return retval._addSeconds(\" ~ op ~ \"seconds);\");\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        // This probably only runs in cases where gettimeofday() is used, but it's\n-        // hard to do this test correctly with variable ticksPerSec.\n-        if (TickDuration.ticksPerSec == 1_000_000)\n-        {\n-            auto dt = DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 33));\n-\n-            assert(dt + TickDuration.from!\"usecs\"(7_000_000) == DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 40)));\n-            assert(dt + TickDuration.from!\"usecs\"(-7_000_000) == DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 26)));\n-\n-            assert(dt - TickDuration.from!\"usecs\"(-7_000_000) == DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 40)));\n-            assert(dt - TickDuration.from!\"usecs\"(7_000_000) == DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 26)));\n-        }\n-    }\n-\n \n     /++\n         Gives the result of adding or subtracting a duration from this\n@@ -2198,19 +2172,14 @@ public:\n             duration = The duration to add to or subtract from this\n                        $(LREF DateTime).\n       +/\n-    ref DateTime opOpAssign(string op, D)(in D duration) @safe pure nothrow @nogc\n-        if ((op == \"+\" || op == \"-\") &&\n-           (is(Unqual!D == Duration) ||\n-            is(Unqual!D == TickDuration)))\n+    ref DateTime opOpAssign(string op)(Duration duration) @safe pure nothrow @nogc\n+        if (op == \"+\" || op == \"-\")\n     {\n+        import core.time : convert;\n         import std.format : format;\n \n         DateTime retval = this;\n-\n-        static if (is(Unqual!D == Duration))\n-            immutable hnsecs = duration.total!\"hnsecs\";\n-        else static if (is(Unqual!D == TickDuration))\n-            immutable hnsecs = duration.hnsecs;\n+        immutable hnsecs = duration.total!\"hnsecs\";\n \n         mixin(format(`return _addSeconds(convert!(\"hnsecs\", \"seconds\")(%shnsecs));`, op));\n     }\n@@ -2298,48 +2267,6 @@ public:\n         static assert(!__traits(compiles, idt -= duration));\n     }\n \n-    // Explicitly undocumented. It will be removed in January 2018. @@@DEPRECATED_2018-01@@@\n-    deprecated(\"Use Duration instead of TickDuration.\")\n-    ref DateTime opOpAssign(string op)(TickDuration td) @safe pure nothrow @nogc\n-        if (op == \"+\" || op == \"-\")\n-    {\n-        DateTime retval = this;\n-        immutable seconds = td.seconds;\n-        mixin(\"return _addSeconds(\" ~ op ~ \"seconds);\");\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        // This probably only runs in cases where gettimeofday() is used, but it's\n-        // hard to do this test correctly with variable ticksPerSec.\n-        if (TickDuration.ticksPerSec == 1_000_000)\n-        {\n-            {\n-                auto dt = DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 33));\n-                dt += TickDuration.from!\"usecs\"(7_000_000);\n-                assert(dt == DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 40)));\n-            }\n-\n-            {\n-                auto dt = DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 33));\n-                dt += TickDuration.from!\"usecs\"(-7_000_000);\n-                assert(dt == DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 26)));\n-            }\n-\n-            {\n-                auto dt = DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 33));\n-                dt -= TickDuration.from!\"usecs\"(-7_000_000);\n-                assert(dt == DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 40)));\n-            }\n-\n-            {\n-                auto dt = DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 33));\n-                dt -= TickDuration.from!\"usecs\"(7_000_000);\n-                assert(dt == DateTime(Date(1999, 7, 6), TimeOfDay(12, 30, 26)));\n-            }\n-        }\n-    }\n-\n \n     /++\n         Gives the difference between two $(LREF DateTime)s.\n@@ -6127,32 +6054,6 @@ public:\n         assert(idate - duration == Date(1999, 6, 24));\n     }\n \n-    // Explicitly undocumented. It will be removed in January 2018. @@@DEPRECATED_2018-01@@@\n-    deprecated(\"Use Duration instead of TickDuration.\")\n-    Date opBinary(string op)(TickDuration td) const @safe pure nothrow @nogc\n-        if (op == \"+\" || op == \"-\")\n-    {\n-        Date retval = this;\n-        immutable days = convert!(\"hnsecs\", \"days\")(td.hnsecs);\n-        mixin(\"return retval._addDays(\" ~ op ~ \"days);\");\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        // This probably only runs in cases where gettimeofday() is used, but it's\n-        // hard to do this test correctly with variable ticksPerSec.\n-        if (TickDuration.ticksPerSec == 1_000_000)\n-        {\n-            auto date = Date(1999, 7, 6);\n-\n-            assert(date + TickDuration.from!\"usecs\"(86_400_000_000) == Date(1999, 7, 7));\n-            assert(date + TickDuration.from!\"usecs\"(-86_400_000_000) == Date(1999, 7, 5));\n-\n-            assert(date - TickDuration.from!\"usecs\"(-86_400_000_000) == Date(1999, 7, 7));\n-            assert(date - TickDuration.from!\"usecs\"(86_400_000_000) == Date(1999, 7, 5));\n-        }\n-    }\n-\n \n     /++\n         Gives the result of adding or subtracting a $(REF Duration, core,time)\n@@ -6234,47 +6135,6 @@ public:\n         static assert(!__traits(compiles, idate -= duration));\n     }\n \n-    // Explicitly undocumented. It will be removed in January 2018. @@@DEPRECATED_2018-01@@@\n-    deprecated(\"Use Duration instead of TickDuration.\")\n-    ref Date opOpAssign(string op)(TickDuration td) @safe pure nothrow @nogc\n-        if (op == \"+\" || op == \"-\")\n-    {\n-        immutable days = convert!(\"seconds\", \"days\")(td.seconds);\n-        mixin(\"return _addDays(\" ~ op ~ \"days);\");\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        // This probably only runs in cases where gettimeofday() is used, but it's\n-        // hard to do this test correctly with variable ticksPerSec.\n-        if (TickDuration.ticksPerSec == 1_000_000)\n-        {\n-            {\n-                auto date = Date(1999, 7, 6);\n-                date += TickDuration.from!\"usecs\"(86_400_000_000);\n-                assert(date == Date(1999, 7, 7));\n-            }\n-\n-            {\n-                auto date = Date(1999, 7, 6);\n-                date += TickDuration.from!\"usecs\"(-86_400_000_000);\n-                assert(date == Date(1999, 7, 5));\n-            }\n-\n-            {\n-                auto date = Date(1999, 7, 6);\n-                date -= TickDuration.from!\"usecs\"(-86_400_000_000);\n-                assert(date == Date(1999, 7, 7));\n-            }\n-\n-            {\n-                auto date = Date(1999, 7, 6);\n-                date -= TickDuration.from!\"usecs\"(86_400_000_000);\n-                assert(date == Date(1999, 7, 5));\n-            }\n-        }\n-    }\n-\n \n     /++\n         Gives the difference between two $(LREF Date)s.\n@@ -8660,32 +8520,6 @@ public:\n         assert(itod - duration == TimeOfDay(1, 30, 33));\n     }\n \n-    // Explicitly undocumented. It will be removed in January 2018. @@@DEPRECATED_2018-01@@@\n-    deprecated(\"Use Duration instead of TickDuration.\")\n-    TimeOfDay opBinary(string op)(TickDuration td) const @safe pure nothrow @nogc\n-        if (op == \"+\" || op == \"-\")\n-    {\n-        TimeOfDay retval = this;\n-        immutable seconds = td.seconds;\n-        mixin(\"return retval._addSeconds(\" ~ op ~ \"seconds);\");\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        // This probably only runs in cases where gettimeofday() is used, but it's\n-        // hard to do this test correctly with variable ticksPerSec.\n-        if (TickDuration.ticksPerSec == 1_000_000)\n-        {\n-            auto tod = TimeOfDay(12, 30, 33);\n-\n-            assert(tod + TickDuration.from!\"usecs\"(7_000_000) == TimeOfDay(12, 30, 40));\n-            assert(tod + TickDuration.from!\"usecs\"(-7_000_000) == TimeOfDay(12, 30, 26));\n-\n-            assert(tod - TickDuration.from!\"usecs\"(-7_000_000) == TimeOfDay(12, 30, 40));\n-            assert(tod - TickDuration.from!\"usecs\"(7_000_000) == TimeOfDay(12, 30, 26));\n-        }\n-    }\n-\n \n     /++\n         Gives the result of adding or subtracting a $(REF Duration, core,time)\n@@ -8755,47 +8589,6 @@ public:\n         static assert(!__traits(compiles, itod -= duration));\n     }\n \n-    // Explicitly undocumented. It will be removed in January 2018. @@@DEPRECATED_2018-01@@@\n-    deprecated(\"Use Duration instead of TickDuration.\")\n-    ref TimeOfDay opOpAssign(string op)(TickDuration td) @safe pure nothrow @nogc\n-        if (op == \"+\" || op == \"-\")\n-    {\n-        immutable seconds = td.seconds;\n-        mixin(\"return _addSeconds(\" ~ op ~ \"seconds);\");\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        // This probably only runs in cases where gettimeofday() is used, but it's\n-        // hard to do this test correctly with variable ticksPerSec.\n-        if (TickDuration.ticksPerSec == 1_000_000)\n-        {\n-            {\n-                auto tod = TimeOfDay(12, 30, 33);\n-                tod += TickDuration.from!\"usecs\"(7_000_000);\n-                assert(tod == TimeOfDay(12, 30, 40));\n-            }\n-\n-            {\n-                auto tod = TimeOfDay(12, 30, 33);\n-                tod += TickDuration.from!\"usecs\"(-7_000_000);\n-                assert(tod == TimeOfDay(12, 30, 26));\n-            }\n-\n-            {\n-                auto tod = TimeOfDay(12, 30, 33);\n-                tod -= TickDuration.from!\"usecs\"(-7_000_000);\n-                assert(tod == TimeOfDay(12, 30, 40));\n-            }\n-\n-            {\n-                auto tod = TimeOfDay(12, 30, 33);\n-                tod -= TickDuration.from!\"usecs\"(7_000_000);\n-                assert(tod == TimeOfDay(12, 30, 26));\n-            }\n-        }\n-    }\n-\n \n     /++\n         Gives the difference between two $(LREF TimeOfDay)s.\n@@ -9771,12 +9564,8 @@ private:\n                                              is(typeof(U.init -= Duration.init) == U) &&\n                                              is(typeof(\n                                              {\n-                                                 // Until the overload with TickDuration is removed, this is ambiguous.\n-                                                 //alias add = U.opOpAssign!\"+\";\n-                                                 //alias sub = U.opOpAssign!\"-\";\n-                                                 U u;\n-                                                 auto ref add() { return u += Duration.init; }\n-                                                 auto ref sub() { return u -= Duration.init; }\n+                                                 alias add = U.opOpAssign!\"+\";\n+                                                 alias sub = U.opOpAssign!\"-\";\n                                                  alias FA = FunctionAttribute;\n                                                  static assert((functionAttributes!add & FA.ref_) != 0);\n                                                  static assert((functionAttributes!sub & FA.ref_) != 0);"}, {"sha": "5d2a980afaf3587ed5595795e05275c2570f06a4", "filename": "libphobos/src/std/datetime/stopwatch.d", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fstopwatch.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fstopwatch.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fstopwatch.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -403,10 +403,7 @@ Duration[fun.length] benchmark(fun...)(uint n)\n     void f0() nothrow {}\n     void f1() nothrow { auto b = to!string(a); }\n     auto r = benchmark!(f0, f1)(1000);\n-    version (GNU)\n-        assert(r[0] >= Duration.zero);\n-    else\n-        assert(r[0] > Duration.zero);\n+    assert(r[0] >= Duration.zero);\n     assert(r[1] > Duration.zero);\n     assert(r[1] > r[0]);\n     assert(r[0] < seconds(1));"}, {"sha": "b8ef2eee76075188cf8816b01efbfab93e5507e2", "filename": "libphobos/src/std/datetime/systime.d", "status": "modified", "additions": 0, "deletions": 259, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -262,34 +262,6 @@ public:\n     }\n \n \n-    // Explicitly undocumented. It will be removed in January 2018. @@@DEPRECATED_2018-01@@@\n-    deprecated(\"Use core.time.MonoTime.currTime instead\")\n-    static @property TickDuration currSystemTick() @safe nothrow\n-    {\n-        return TickDuration.currSystemTick;\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        assert(Clock.currSystemTick.length > 0);\n-    }\n-\n-    // Explicitly undocumented. It will be removed in January 2018. @@@DEPRECATED_2018-01@@@\n-    deprecated(\"Use core.time.MonoTime instead. See currAppTick's documentation for details.\")\n-    static @property TickDuration currAppTick() @safe\n-    {\n-        return currSystemTick - TickDuration.appOrigin;\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        auto a = Clock.currSystemTick;\n-        auto b = Clock.currAppTick;\n-        assert(a.length);\n-        assert(b.length);\n-        assert(a > b);\n-    }\n-\n private:\n \n     @disable this() {}\n@@ -448,51 +420,6 @@ public:\n         assertThrown!DateTimeException(SysTime(DateTime.init, seconds(1), UTC()));\n     }\n \n-    // Explicitly undocumented. It will be removed in August 2017. @@@DEPRECATED_2017-08@@@\n-    deprecated(\"Please use the overload which takes a Duration instead of a FracSec.\")\n-    this(in DateTime dateTime, in FracSec fracSec, immutable TimeZone tz = null) @safe\n-    {\n-        immutable fracHNSecs = fracSec.hnsecs;\n-        enforce(fracHNSecs >= 0, new DateTimeException(\"A SysTime cannot have negative fractional seconds.\"));\n-        _timezone = tz is null ? LocalTime() : tz;\n-\n-        try\n-        {\n-            immutable dateDiff = (dateTime.date - Date(1, 1, 1)).total!\"hnsecs\";\n-            immutable todDiff = (dateTime.timeOfDay - TimeOfDay(0, 0, 0)).total!\"hnsecs\";\n-\n-            immutable adjustedTime = dateDiff + todDiff + fracHNSecs;\n-            immutable standardTime = _timezone.tzToUTC(adjustedTime);\n-\n-            this(standardTime, _timezone);\n-        }\n-        catch (Exception e)\n-            assert(0, \"Date, TimeOfDay, or DateTime's constructor threw when it shouldn't have.\");\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        static void test(DateTime dt, FracSec fracSec, immutable TimeZone tz, long expected)\n-        {\n-            auto sysTime = SysTime(dt, fracSec, tz);\n-            assert(sysTime._stdTime == expected);\n-            assert(sysTime._timezone is (tz is null ? LocalTime() : tz),\n-                   format(\"Given DateTime: %s, Given FracSec: %s\", dt, fracSec));\n-        }\n-\n-        test(DateTime.init, FracSec.init, UTC(), 0);\n-        test(DateTime(1, 1, 1, 12, 30, 33), FracSec.init, UTC(), 450_330_000_000L);\n-        test(DateTime(0, 12, 31, 12, 30, 33), FracSec.init, UTC(), -413_670_000_000L);\n-        test(DateTime(1, 1, 1, 0, 0, 0), FracSec.from!\"msecs\"(1), UTC(), 10_000L);\n-        test(DateTime(0, 12, 31, 23, 59, 59), FracSec.from!\"msecs\"(999), UTC(), -10_000L);\n-\n-        test(DateTime(0, 12, 31, 23, 59, 59), FracSec.from!\"hnsecs\"(9_999_999), UTC(), -1);\n-        test(DateTime(0, 12, 31, 23, 59, 59), FracSec.from!\"hnsecs\"(1), UTC(), -9_999_999);\n-        test(DateTime(0, 12, 31, 23, 59, 59), FracSec.from!\"hnsecs\"(0), UTC(), -10_000_000);\n-\n-        assertThrown!DateTimeException(SysTime(DateTime.init, FracSec.from!\"hnsecs\"(-1), UTC()));\n-    }\n-\n     /++\n         Params:\n             date = The $(REF Date,std,datetime,date) to use to set this\n@@ -1890,125 +1817,6 @@ public:\n     }\n \n \n-    // Explicitly undocumented. It will be removed in August 2017. @@@DEPRECATED_2017-08@@@\n-    deprecated(\"Please use fracSecs (with an s) rather than fracSec (without an s). \" ~\n-               \"It returns a Duration instead of a FracSec, as FracSec is being deprecated.\")\n-    @property FracSec fracSec() @safe const nothrow\n-    {\n-        try\n-        {\n-            auto hnsecs = removeUnitsFromHNSecs!\"days\"(adjTime);\n-\n-            if (hnsecs < 0)\n-                hnsecs += convert!(\"hours\", \"hnsecs\")(24);\n-\n-            hnsecs = removeUnitsFromHNSecs!\"seconds\"(hnsecs);\n-\n-            return FracSec.from!\"hnsecs\"(cast(int) hnsecs);\n-        }\n-        catch (Exception e)\n-            assert(0, \"FracSec.from!\\\"hnsecs\\\"() threw.\");\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        import std.range;\n-\n-        static void test(SysTime sysTime, FracSec expected, size_t line = __LINE__)\n-        {\n-            if (sysTime.fracSec != expected)\n-                throw new AssertError(format(\"Value given: %s\", sysTime.fracSec), __FILE__, line);\n-        }\n-\n-        test(SysTime(0, UTC()), FracSec.from!\"hnsecs\"(0));\n-        test(SysTime(1, UTC()), FracSec.from!\"hnsecs\"(1));\n-        test(SysTime(-1, UTC()), FracSec.from!\"hnsecs\"(9_999_999));\n-\n-        foreach (tz; testTZs)\n-        {\n-            foreach (year; chain(testYearsBC, testYearsAD))\n-            {\n-                foreach (md; testMonthDays)\n-                {\n-                    foreach (hour; testHours)\n-                    {\n-                        foreach (minute; testMinSecs)\n-                        {\n-                            foreach (second; testMinSecs)\n-                            {\n-                                auto dt = DateTime(Date(year, md.month, md.day), TimeOfDay(hour, minute, second));\n-                                foreach (fs; testFracSecs)\n-                                    test(SysTime(dt, fs, tz), FracSec.from!\"hnsecs\"(fs.total!\"hnsecs\"));\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-        const cst = SysTime(DateTime(1999, 7, 6, 12, 30, 33));\n-        //immutable ist = SysTime(DateTime(1999, 7, 6, 12, 30, 33));\n-        assert(cst.fracSec == FracSec.zero);\n-        //assert(ist.fracSec == FracSec.zero);\n-    }\n-\n-\n-    // Explicitly undocumented. It will be removed in August 2017. @@@DEPRECATED_2017-08@@@\n-    deprecated(\"Please use fracSecs (with an s) rather than fracSec (without an s). \" ~\n-               \"It takes a Duration instead of a FracSec, as FracSec is being deprecated.\")\n-    @property void fracSec(FracSec fracSec) @safe\n-    {\n-        immutable fracHNSecs = fracSec.hnsecs;\n-        enforce(fracHNSecs >= 0, new DateTimeException(\"A SysTime cannot have negative fractional seconds.\"));\n-\n-        auto hnsecs = adjTime;\n-        auto days = splitUnitsFromHNSecs!\"days\"(hnsecs);\n-        immutable daysHNSecs = convert!(\"days\", \"hnsecs\")(days);\n-        immutable negative = hnsecs < 0;\n-\n-        if (negative)\n-            hnsecs += convert!(\"hours\", \"hnsecs\")(24);\n-\n-        immutable hour = splitUnitsFromHNSecs!\"hours\"(hnsecs);\n-        immutable minute = splitUnitsFromHNSecs!\"minutes\"(hnsecs);\n-        immutable second = getUnitsFromHNSecs!\"seconds\"(hnsecs);\n-\n-        hnsecs = fracHNSecs;\n-        hnsecs += convert!(\"hours\", \"hnsecs\")(hour);\n-        hnsecs += convert!(\"minutes\", \"hnsecs\")(minute);\n-        hnsecs += convert!(\"seconds\", \"hnsecs\")(second);\n-\n-        if (negative)\n-            hnsecs -= convert!(\"hours\", \"hnsecs\")(24);\n-\n-        adjTime = daysHNSecs + hnsecs;\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        import std.range;\n-\n-        foreach (fracSec; testFracSecs)\n-        {\n-            foreach (st; chain(testSysTimesBC, testSysTimesAD))\n-            {\n-                auto dt = cast(DateTime) st;\n-                auto expected = SysTime(dt, fracSec, st.timezone);\n-                st.fracSec = FracSec.from!\"hnsecs\"(fracSec.total!\"hnsecs\");\n-                assert(st == expected, format(\"[%s] [%s]\", st, expected));\n-            }\n-        }\n-\n-        auto st = testSysTimesAD[0];\n-        assertThrown!DateTimeException(st.fracSec = FracSec.from!\"hnsecs\"(-1));\n-\n-        const cst = SysTime(DateTime(1999, 7, 6, 12, 30, 33));\n-        //immutable ist = SysTime(DateTime(1999, 7, 6, 12, 30, 33));\n-        static assert(!__traits(compiles, cst.fracSec = FracSec.from!\"msecs\"(7)));\n-        //static assert(!__traits(compiles, ist.fracSec = FracSec.from!\"msecs\"(7)));\n-    }\n-\n-\n     /++\n         The total hnsecs from midnight, January 1st, 1 A.D. UTC. This is the\n         internal representation of $(LREF SysTime).\n@@ -6167,33 +5975,6 @@ public:\n         //assert(ist - duration == SysTime(DateTime(1999, 7, 6, 12, 30, 21)));\n     }\n \n-    // Explicitly undocumented. It will be removed in January 2018. @@@DEPRECATED_2018-01@@@\n-    deprecated(\"Use Duration instead of TickDuration.\")\n-    SysTime opBinary(string op)(TickDuration td) @safe const pure nothrow\n-        if (op == \"+\" || op == \"-\")\n-    {\n-        SysTime retval = SysTime(this._stdTime, this._timezone);\n-        immutable hnsecs = td.hnsecs;\n-        mixin(\"retval._stdTime \" ~ op ~ \"= hnsecs;\");\n-        return retval;\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        // This probably only runs in cases where gettimeofday() is used, but it's\n-        // hard to do this test correctly with variable ticksPerSec.\n-        if (TickDuration.ticksPerSec == 1_000_000)\n-        {\n-            auto st = SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_678));\n-\n-            assert(st + TickDuration.from!\"usecs\"(7) == SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_748)));\n-            assert(st + TickDuration.from!\"usecs\"(-7) == SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_608)));\n-\n-            assert(st - TickDuration.from!\"usecs\"(-7) == SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_748)));\n-            assert(st - TickDuration.from!\"usecs\"(7) == SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_608)));\n-        }\n-    }\n-\n \n     /++\n         Gives the result of adding or subtracting a $(REF Duration, core,time) from\n@@ -6397,46 +6178,6 @@ public:\n         //static assert(!__traits(compiles, ist -= duration));\n     }\n \n-    // Explicitly undocumented. It will be removed in January 2018. @@@DEPRECATED_2018-01@@@\n-    deprecated(\"Use Duration instead of TickDuration.\")\n-    ref SysTime opOpAssign(string op)(TickDuration td) @safe pure nothrow\n-        if (op == \"+\" || op == \"-\")\n-    {\n-        immutable hnsecs = td.hnsecs;\n-        mixin(\"_stdTime \" ~ op ~ \"= hnsecs;\");\n-        return this;\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        // This probably only runs in cases where gettimeofday() is used, but it's\n-        // hard to do this test correctly with variable ticksPerSec.\n-        if (TickDuration.ticksPerSec == 1_000_000)\n-        {\n-            {\n-                auto st = SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_678));\n-                st += TickDuration.from!\"usecs\"(7);\n-                assert(st == SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_748)));\n-            }\n-            {\n-                auto st = SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_678));\n-                st += TickDuration.from!\"usecs\"(-7);\n-                assert(st == SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_608)));\n-            }\n-\n-            {\n-                auto st = SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_678));\n-                st -= TickDuration.from!\"usecs\"(-7);\n-                assert(st == SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_748)));\n-            }\n-            {\n-                auto st = SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_678));\n-                st -= TickDuration.from!\"usecs\"(7);\n-                assert(st == SysTime(DateTime(1999, 7, 6, 12, 30, 33), hnsecs(2_345_608)));\n-            }\n-        }\n-    }\n-\n \n     /++\n         Gives the difference between two $(LREF SysTime)s."}, {"sha": "e923a34a98d6e7153cd635f0904c87a4e13d54cd", "filename": "libphobos/src/std/datetime/timezone.d", "status": "modified", "additions": 0, "deletions": 856, "changes": 856, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fdatetime%2Ftimezone.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fdatetime%2Ftimezone.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fdatetime%2Ftimezone.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -142,39 +142,6 @@ public:\n         return dur!\"hnsecs\"(utcToTZ(stdTime) - stdTime);\n     }\n \n-    // Explicitly undocumented. It will be removed in June 2018. @@@DEPRECATED_2018-07@@@\n-    deprecated(\"Use PosixTimeZone.getTimeZone or WindowsTimeZone.getTimeZone instead\")\n-    static immutable(TimeZone) getTimeZone(string name) @safe\n-    {\n-        version (Posix)\n-            return PosixTimeZone.getTimeZone(name);\n-        else version (Windows)\n-        {\n-            import std.format : format;\n-            auto windowsTZName = tzDatabaseNameToWindowsTZName(name);\n-            if (windowsTZName != null)\n-            {\n-                try\n-                    return WindowsTimeZone.getTimeZone(windowsTZName);\n-                catch (DateTimeException dte)\n-                {\n-                    auto oldName = _getOldName(windowsTZName);\n-                    if (oldName != null)\n-                        return WindowsTimeZone.getTimeZone(oldName);\n-                    throw dte;\n-                }\n-            }\n-            else\n-                throw new DateTimeException(format(\"%s does not have an equivalent Windows time zone.\", name));\n-        }\n-    }\n-\n-    ///\n-    deprecated @safe unittest\n-    {\n-        auto tz = TimeZone.getTimeZone(\"America/Los_Angeles\");\n-    }\n-\n     // The purpose of this is to handle the case where a Windows time zone is\n     // new and exists on an up-to-date Windows box but does not exist on Windows\n     // boxes which have not been properly updated. The \"date added\" is included\n@@ -488,53 +455,6 @@ public:\n     }\n \n \n-    // Explicitly undocumented. It will be removed in June 2018. @@@DEPRECATED_2018-07@@@\n-    deprecated(\"Use PosixTimeZone.getInstalledTZNames or WindowsTimeZone.getInstalledTZNames instead\")\n-    static string[] getInstalledTZNames(string subName = \"\") @safe\n-    {\n-        version (Posix)\n-            return PosixTimeZone.getInstalledTZNames(subName);\n-        else version (Windows)\n-        {\n-            import std.algorithm.searching : startsWith;\n-            import std.algorithm.sorting : sort;\n-            import std.array : appender;\n-\n-            auto windowsNames = WindowsTimeZone.getInstalledTZNames();\n-            auto retval = appender!(string[])();\n-\n-            foreach (winName; windowsNames)\n-            {\n-                auto tzName = windowsTZNameToTZDatabaseName(winName);\n-                if (tzName !is null && tzName.startsWith(subName))\n-                    retval.put(tzName);\n-            }\n-\n-            sort(retval.data);\n-            return retval.data;\n-        }\n-    }\n-\n-    deprecated @safe unittest\n-    {\n-        import std.exception : assertNotThrown;\n-        import std.stdio : writefln;\n-        static void testPZSuccess(string tzName)\n-        {\n-            scope(failure) writefln(\"TZName which threw: %s\", tzName);\n-            TimeZone.getTimeZone(tzName);\n-        }\n-\n-        auto tzNames = getInstalledTZNames();\n-        // This was not previously tested, and it's currently failing, so I'm\n-        // leaving it commented out until I can sort it out.\n-        //assert(equal(tzNames, tzNames.uniq()));\n-\n-        foreach (tzName; tzNames)\n-            assertNotThrown!DateTimeException(testPZSuccess(tzName));\n-    }\n-\n-\n protected:\n \n     /++\n@@ -3457,779 +3377,3 @@ For terms of use, see http://www.unicode.org/copyright.html\n         assert(equal(value.uniq(), value), key);\n     }\n }\n-\n-\n-// Explicitly undocumented. It will be removed in June 2018. @@@DEPRECATED_2018-07@@@\n-deprecated(\"Use parseTZConversions instead\")\n-string tzDatabaseNameToWindowsTZName(string tzName) @safe pure nothrow @nogc\n-{\n-    switch (tzName)\n-    {\n-        case \"Africa/Abidjan\": return \"Greenwich Standard Time\";\n-        case \"Africa/Accra\": return \"Greenwich Standard Time\";\n-        case \"Africa/Addis_Ababa\": return \"E. Africa Standard Time\";\n-        case \"Africa/Algiers\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Asmera\": return \"E. Africa Standard Time\";\n-        case \"Africa/Bamako\": return \"Greenwich Standard Time\";\n-        case \"Africa/Bangui\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Banjul\": return \"Greenwich Standard Time\";\n-        case \"Africa/Bissau\": return \"Greenwich Standard Time\";\n-        case \"Africa/Blantyre\": return \"South Africa Standard Time\";\n-        case \"Africa/Brazzaville\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Bujumbura\": return \"South Africa Standard Time\";\n-        case \"Africa/Cairo\": return \"Egypt Standard Time\";\n-        case \"Africa/Casablanca\": return \"Morocco Standard Time\";\n-        case \"Africa/Ceuta\": return \"Romance Standard Time\";\n-        case \"Africa/Conakry\": return \"Greenwich Standard Time\";\n-        case \"Africa/Dakar\": return \"Greenwich Standard Time\";\n-        case \"Africa/Dar_es_Salaam\": return \"E. Africa Standard Time\";\n-        case \"Africa/Djibouti\": return \"E. Africa Standard Time\";\n-        case \"Africa/Douala\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/El_Aaiun\": return \"Morocco Standard Time\";\n-        case \"Africa/Freetown\": return \"Greenwich Standard Time\";\n-        case \"Africa/Gaborone\": return \"South Africa Standard Time\";\n-        case \"Africa/Harare\": return \"South Africa Standard Time\";\n-        case \"Africa/Johannesburg\": return \"South Africa Standard Time\";\n-        case \"Africa/Juba\": return \"E. Africa Standard Time\";\n-        case \"Africa/Kampala\": return \"E. Africa Standard Time\";\n-        case \"Africa/Khartoum\": return \"E. Africa Standard Time\";\n-        case \"Africa/Kigali\": return \"South Africa Standard Time\";\n-        case \"Africa/Kinshasa\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Lagos\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Libreville\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Lome\": return \"Greenwich Standard Time\";\n-        case \"Africa/Luanda\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Lubumbashi\": return \"South Africa Standard Time\";\n-        case \"Africa/Lusaka\": return \"South Africa Standard Time\";\n-        case \"Africa/Malabo\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Maputo\": return \"South Africa Standard Time\";\n-        case \"Africa/Maseru\": return \"South Africa Standard Time\";\n-        case \"Africa/Mbabane\": return \"South Africa Standard Time\";\n-        case \"Africa/Mogadishu\": return \"E. Africa Standard Time\";\n-        case \"Africa/Monrovia\": return \"Greenwich Standard Time\";\n-        case \"Africa/Nairobi\": return \"E. Africa Standard Time\";\n-        case \"Africa/Ndjamena\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Niamey\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Nouakchott\": return \"Greenwich Standard Time\";\n-        case \"Africa/Ouagadougou\": return \"Greenwich Standard Time\";\n-        case \"Africa/Porto-Novo\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Sao_Tome\": return \"Greenwich Standard Time\";\n-        case \"Africa/Tripoli\": return \"Libya Standard Time\";\n-        case \"Africa/Tunis\": return \"W. Central Africa Standard Time\";\n-        case \"Africa/Windhoek\": return \"Namibia Standard Time\";\n-        case \"America/Adak\": return \"Aleutian Standard Time\";\n-        case \"America/Anchorage\": return \"Alaskan Standard Time\";\n-        case \"America/Anguilla\": return \"SA Western Standard Time\";\n-        case \"America/Antigua\": return \"SA Western Standard Time\";\n-        case \"America/Araguaina\": return \"SA Eastern Standard Time\";\n-        case \"America/Argentina/La_Rioja\": return \"Argentina Standard Time\";\n-        case \"America/Argentina/Rio_Gallegos\": return \"Argentina Standard Time\";\n-        case \"America/Argentina/Salta\": return \"Argentina Standard Time\";\n-        case \"America/Argentina/San_Juan\": return \"Argentina Standard Time\";\n-        case \"America/Argentina/San_Luis\": return \"Argentina Standard Time\";\n-        case \"America/Argentina/Tucuman\": return \"Argentina Standard Time\";\n-        case \"America/Argentina/Ushuaia\": return \"Argentina Standard Time\";\n-        case \"America/Arguaina\": return \"Tocantins Standard Time\";\n-        case \"America/Aruba\": return \"SA Western Standard Time\";\n-        case \"America/Asuncion\": return \"Paraguay Standard Time\";\n-        case \"America/Bahia\": return \"Bahia Standard Time\";\n-        case \"America/Bahia_Banderas\": return \"Central Standard Time (Mexico)\";\n-        case \"America/Barbados\": return \"SA Western Standard Time\";\n-        case \"America/Belem\": return \"SA Eastern Standard Time\";\n-        case \"America/Belize\": return \"Central America Standard Time\";\n-        case \"America/Blanc-Sablon\": return \"SA Western Standard Time\";\n-        case \"America/Boa_Vista\": return \"SA Western Standard Time\";\n-        case \"America/Bogota\": return \"SA Pacific Standard Time\";\n-        case \"America/Boise\": return \"Mountain Standard Time\";\n-        case \"America/Buenos_Aires\": return \"Argentina Standard Time\";\n-        case \"America/Cambridge_Bay\": return \"Mountain Standard Time\";\n-        case \"America/Campo_Grande\": return \"Central Brazilian Standard Time\";\n-        case \"America/Cancun\": return \"Eastern Standard Time (Mexico)\";\n-        case \"America/Caracas\": return \"Venezuela Standard Time\";\n-        case \"America/Catamarca\": return \"Argentina Standard Time\";\n-        case \"America/Cayenne\": return \"SA Eastern Standard Time\";\n-        case \"America/Cayman\": return \"SA Pacific Standard Time\";\n-        case \"America/Chicago\": return \"Central Standard Time\";\n-        case \"America/Chihuahua\": return \"Mountain Standard Time (Mexico)\";\n-        case \"America/Coral_Harbour\": return \"SA Pacific Standard Time\";\n-        case \"America/Cordoba\": return \"Argentina Standard Time\";\n-        case \"America/Costa_Rica\": return \"Central America Standard Time\";\n-        case \"America/Creston\": return \"US Mountain Standard Time\";\n-        case \"America/Cuiaba\": return \"Central Brazilian Standard Time\";\n-        case \"America/Curacao\": return \"SA Western Standard Time\";\n-        case \"America/Danmarkshavn\": return \"UTC\";\n-        case \"America/Dawson\": return \"Pacific Standard Time\";\n-        case \"America/Dawson_Creek\": return \"US Mountain Standard Time\";\n-        case \"America/Denver\": return \"Mountain Standard Time\";\n-        case \"America/Detroit\": return \"Eastern Standard Time\";\n-        case \"America/Dominica\": return \"SA Western Standard Time\";\n-        case \"America/Edmonton\": return \"Mountain Standard Time\";\n-        case \"America/Eirunepe\": return \"SA Pacific Standard Time\";\n-        case \"America/El_Salvador\": return \"Central America Standard Time\";\n-        case \"America/Fortaleza\": return \"SA Eastern Standard Time\";\n-        case \"America/Glace_Bay\": return \"Atlantic Standard Time\";\n-        case \"America/Godthab\": return \"Greenland Standard Time\";\n-        case \"America/Goose_Bay\": return \"Atlantic Standard Time\";\n-        case \"America/Grand_Turk\": return \"Turks And Caicos Standard Time\";\n-        case \"America/Grenada\": return \"SA Western Standard Time\";\n-        case \"America/Guadeloupe\": return \"SA Western Standard Time\";\n-        case \"America/Guatemala\": return \"Central America Standard Time\";\n-        case \"America/Guayaquil\": return \"SA Pacific Standard Time\";\n-        case \"America/Guyana\": return \"SA Western Standard Time\";\n-        case \"America/Halifax\": return \"Atlantic Standard Time\";\n-        case \"America/Havana\": return \"Cuba Standard Time\";\n-        case \"America/Hermosillo\": return \"US Mountain Standard Time\";\n-        case \"America/Indiana/Knox\": return \"Central Standard Time\";\n-        case \"America/Indiana/Marengo\": return \"US Eastern Standard Time\";\n-        case \"America/Indiana/Petersburg\": return \"Eastern Standard Time\";\n-        case \"America/Indiana/Tell_City\": return \"Central Standard Time\";\n-        case \"America/Indiana/Vevay\": return \"US Eastern Standard Time\";\n-        case \"America/Indiana/Vincennes\": return \"Eastern Standard Time\";\n-        case \"America/Indiana/Winamac\": return \"Eastern Standard Time\";\n-        case \"America/Indianapolis\": return \"US Eastern Standard Time\";\n-        case \"America/Inuvik\": return \"Mountain Standard Time\";\n-        case \"America/Iqaluit\": return \"Eastern Standard Time\";\n-        case \"America/Jamaica\": return \"SA Pacific Standard Time\";\n-        case \"America/Jujuy\": return \"Argentina Standard Time\";\n-        case \"America/Juneau\": return \"Alaskan Standard Time\";\n-        case \"America/Kentucky/Monticello\": return \"Eastern Standard Time\";\n-        case \"America/Kralendijk\": return \"SA Western Standard Time\";\n-        case \"America/La_Paz\": return \"SA Western Standard Time\";\n-        case \"America/Lima\": return \"SA Pacific Standard Time\";\n-        case \"America/Los_Angeles\": return \"Pacific Standard Time\";\n-        case \"America/Louisville\": return \"Eastern Standard Time\";\n-        case \"America/Lower_Princes\": return \"SA Western Standard Time\";\n-        case \"America/Maceio\": return \"SA Eastern Standard Time\";\n-        case \"America/Managua\": return \"Central America Standard Time\";\n-        case \"America/Manaus\": return \"SA Western Standard Time\";\n-        case \"America/Marigot\": return \"SA Western Standard Time\";\n-        case \"America/Martinique\": return \"SA Western Standard Time\";\n-        case \"America/Matamoros\": return \"Central Standard Time\";\n-        case \"America/Mazatlan\": return \"Mountain Standard Time (Mexico)\";\n-        case \"America/Mendoza\": return \"Argentina Standard Time\";\n-        case \"America/Menominee\": return \"Central Standard Time\";\n-        case \"America/Merida\": return \"Central Standard Time (Mexico)\";\n-        case \"America/Mexico_City\": return \"Central Standard Time (Mexico)\";\n-        case \"America/Miquelon\": return \"Saint Pierre Standard Time\";\n-        case \"America/Moncton\": return \"Atlantic Standard Time\";\n-        case \"America/Monterrey\": return \"Central Standard Time (Mexico)\";\n-        case \"America/Montevideo\": return \"Montevideo Standard Time\";\n-        case \"America/Montreal\": return \"Eastern Standard Time\";\n-        case \"America/Montserrat\": return \"SA Western Standard Time\";\n-        case \"America/Nassau\": return \"Eastern Standard Time\";\n-        case \"America/New_York\": return \"Eastern Standard Time\";\n-        case \"America/Nipigon\": return \"Eastern Standard Time\";\n-        case \"America/Nome\": return \"Alaskan Standard Time\";\n-        case \"America/Noronha\": return \"UTC-02\";\n-        case \"America/North_Dakota/Beulah\": return \"Central Standard Time\";\n-        case \"America/North_Dakota/Center\": return \"Central Standard Time\";\n-        case \"America/North_Dakota/New_Salem\": return \"Central Standard Time\";\n-        case \"America/Ojinaga\": return \"Mountain Standard Time\";\n-        case \"America/Panama\": return \"SA Pacific Standard Time\";\n-        case \"America/Pangnirtung\": return \"Eastern Standard Time\";\n-        case \"America/Paramaribo\": return \"SA Eastern Standard Time\";\n-        case \"America/Phoenix\": return \"US Mountain Standard Time\";\n-        case \"America/Port-au-Prince\": return \"Haiti Standard Time\";\n-        case \"America/Port_of_Spain\": return \"SA Western Standard Time\";\n-        case \"America/Porto_Velho\": return \"SA Western Standard Time\";\n-        case \"America/Puerto_Rico\": return \"SA Western Standard Time\";\n-        case \"America/Rainy_River\": return \"Central Standard Time\";\n-        case \"America/Rankin_Inlet\": return \"Central Standard Time\";\n-        case \"America/Recife\": return \"SA Eastern Standard Time\";\n-        case \"America/Regina\": return \"Canada Central Standard Time\";\n-        case \"America/Resolute\": return \"Central Standard Time\";\n-        case \"America/Rio_Branco\": return \"SA Pacific Standard Time\";\n-        case \"America/Santa_Isabel\": return \"Pacific Standard Time (Mexico)\";\n-        case \"America/Santarem\": return \"SA Eastern Standard Time\";\n-        case \"America/Santiago\": return \"Pacific SA Standard Time\";\n-        case \"America/Santo_Domingo\": return \"SA Western Standard Time\";\n-        case \"America/Sao_Paulo\": return \"E. South America Standard Time\";\n-        case \"America/Scoresbysund\": return \"Azores Standard Time\";\n-        case \"America/Sitka\": return \"Alaskan Standard Time\";\n-        case \"America/St_Barthelemy\": return \"SA Western Standard Time\";\n-        case \"America/St_Johns\": return \"Newfoundland Standard Time\";\n-        case \"America/St_Kitts\": return \"SA Western Standard Time\";\n-        case \"America/St_Lucia\": return \"SA Western Standard Time\";\n-        case \"America/St_Thomas\": return \"SA Western Standard Time\";\n-        case \"America/St_Vincent\": return \"SA Western Standard Time\";\n-        case \"America/Swift_Current\": return \"Canada Central Standard Time\";\n-        case \"America/Tegucigalpa\": return \"Central America Standard Time\";\n-        case \"America/Thule\": return \"Atlantic Standard Time\";\n-        case \"America/Thunder_Bay\": return \"Eastern Standard Time\";\n-        case \"America/Tijuana\": return \"Pacific Standard Time\";\n-        case \"America/Toronto\": return \"Eastern Standard Time\";\n-        case \"America/Tortola\": return \"SA Western Standard Time\";\n-        case \"America/Vancouver\": return \"Pacific Standard Time\";\n-        case \"America/Whitehorse\": return \"Pacific Standard Time\";\n-        case \"America/Winnipeg\": return \"Central Standard Time\";\n-        case \"America/Yakutat\": return \"Alaskan Standard Time\";\n-        case \"America/Yellowknife\": return \"Mountain Standard Time\";\n-        case \"Antarctica/Casey\": return \"W. Australia Standard Time\";\n-        case \"Antarctica/Davis\": return \"SE Asia Standard Time\";\n-        case \"Antarctica/DumontDUrville\": return \"West Pacific Standard Time\";\n-        case \"Antarctica/Macquarie\": return \"Central Pacific Standard Time\";\n-        case \"Antarctica/Mawson\": return \"West Asia Standard Time\";\n-        case \"Antarctica/McMurdo\": return \"New Zealand Standard Time\";\n-        case \"Antarctica/Palmer\": return \"Pacific SA Standard Time\";\n-        case \"Antarctica/Rothera\": return \"SA Eastern Standard Time\";\n-        case \"Antarctica/Syowa\": return \"E. Africa Standard Time\";\n-        case \"Antarctica/Vostok\": return \"Central Asia Standard Time\";\n-        case \"Arctic/Longyearbyen\": return \"W. Europe Standard Time\";\n-        case \"Asia/Aden\": return \"Arab Standard Time\";\n-        case \"Asia/Almaty\": return \"Central Asia Standard Time\";\n-        case \"Asia/Amman\": return \"Jordan Standard Time\";\n-        case \"Asia/Anadyr\": return \"Russia Time Zone 11\";\n-        case \"Asia/Aqtau\": return \"West Asia Standard Time\";\n-        case \"Asia/Aqtobe\": return \"West Asia Standard Time\";\n-        case \"Asia/Ashgabat\": return \"West Asia Standard Time\";\n-        case \"Asia/Baghdad\": return \"Arabic Standard Time\";\n-        case \"Asia/Bahrain\": return \"Arab Standard Time\";\n-        case \"Asia/Baku\": return \"Azerbaijan Standard Time\";\n-        case \"Asia/Bangkok\": return \"SE Asia Standard Time\";\n-        case \"Asia/Barnaul\": return \"Altai Standard Time\";\n-        case \"Asia/Beirut\": return \"Middle East Standard Time\";\n-        case \"Asia/Bishkek\": return \"Central Asia Standard Time\";\n-        case \"Asia/Brunei\": return \"Singapore Standard Time\";\n-        case \"Asia/Calcutta\": return \"India Standard Time\";\n-        case \"Asia/Chita\": return \"Transbaikal Standard Time\";\n-        case \"Asia/Choibalsan\": return \"Ulaanbaatar Standard Time\";\n-        case \"Asia/Colombo\": return \"Sri Lanka Standard Time\";\n-        case \"Asia/Damascus\": return \"Syria Standard Time\";\n-        case \"Asia/Dhaka\": return \"Bangladesh Standard Time\";\n-        case \"Asia/Dili\": return \"Tokyo Standard Time\";\n-        case \"Asia/Dubai\": return \"Arabian Standard Time\";\n-        case \"Asia/Dushanbe\": return \"West Asia Standard Time\";\n-        case \"Asia/Hebron\": return \"West Bank Standard Time\";\n-        case \"Asia/Hong_Kong\": return \"China Standard Time\";\n-        case \"Asia/Hovd\": return \"W. Mongolia Standard Time\";\n-        case \"Asia/Irkutsk\": return \"North Asia East Standard Time\";\n-        case \"Asia/Jakarta\": return \"SE Asia Standard Time\";\n-        case \"Asia/Jayapura\": return \"Tokyo Standard Time\";\n-        case \"Asia/Jerusalem\": return \"Israel Standard Time\";\n-        case \"Asia/Kabul\": return \"Afghanistan Standard Time\";\n-        case \"Asia/Kamchatka\": return \"Russia Time Zone 11\";\n-        case \"Asia/Karachi\": return \"Pakistan Standard Time\";\n-        case \"Asia/Katmandu\": return \"Nepal Standard Time\";\n-        case \"Asia/Khandyga\": return \"Yakutsk Standard Time\";\n-        case \"Asia/Krasnoyarsk\": return \"North Asia Standard Time\";\n-        case \"Asia/Kuala_Lumpur\": return \"Singapore Standard Time\";\n-        case \"Asia/Kuching\": return \"Singapore Standard Time\";\n-        case \"Asia/Kuwait\": return \"Arab Standard Time\";\n-        case \"Asia/Macau\": return \"China Standard Time\";\n-        case \"Asia/Magadan\": return \"Magadan Standard Time\";\n-        case \"Asia/Makassar\": return \"Singapore Standard Time\";\n-        case \"Asia/Manila\": return \"Singapore Standard Time\";\n-        case \"Asia/Muscat\": return \"Arabian Standard Time\";\n-        case \"Asia/Nicosia\": return \"GTB Standard Time\";\n-        case \"Asia/Novokuznetsk\": return \"North Asia Standard Time\";\n-        case \"Asia/Novosibirsk\": return \"N. Central Asia Standard Time\";\n-        case \"Asia/Omsk\": return \"N. Central Asia Standard Time\";\n-        case \"Asia/Oral\": return \"West Asia Standard Time\";\n-        case \"Asia/Phnom_Penh\": return \"SE Asia Standard Time\";\n-        case \"Asia/Pontianak\": return \"SE Asia Standard Time\";\n-        case \"Asia/Pyongyang\": return \"North Korea Standard Time\";\n-        case \"Asia/Qatar\": return \"Arab Standard Time\";\n-        case \"Asia/Qyzylorda\": return \"Central Asia Standard Time\";\n-        case \"Asia/Rangoon\": return \"Myanmar Standard Time\";\n-        case \"Asia/Riyadh\": return \"Arab Standard Time\";\n-        case \"Asia/Saigon\": return \"SE Asia Standard Time\";\n-        case \"Asia/Sakhalin\": return \"Sakhalin Standard Time\";\n-        case \"Asia/Samarkand\": return \"West Asia Standard Time\";\n-        case \"Asia/Seoul\": return \"Korea Standard Time\";\n-        case \"Asia/Shanghai\": return \"China Standard Time\";\n-        case \"Asia/Singapore\": return \"Singapore Standard Time\";\n-        case \"Asia/Srednekolymsk\": return \"Russia Time Zone 10\";\n-        case \"Asia/Taipei\": return \"Taipei Standard Time\";\n-        case \"Asia/Tashkent\": return \"West Asia Standard Time\";\n-        case \"Asia/Tbilisi\": return \"Georgian Standard Time\";\n-        case \"Asia/Tehran\": return \"Iran Standard Time\";\n-        case \"Asia/Thimphu\": return \"Bangladesh Standard Time\";\n-        case \"Asia/Tokyo\": return \"Tokyo Standard Time\";\n-        case \"Asia/Tomsk\": return \"Tomsk Standard Time\";\n-        case \"Asia/Ulaanbaatar\": return \"Ulaanbaatar Standard Time\";\n-        case \"Asia/Urumqi\": return \"Central Asia Standard Time\";\n-        case \"Asia/Ust-Nera\": return \"Vladivostok Standard Time\";\n-        case \"Asia/Vientiane\": return \"SE Asia Standard Time\";\n-        case \"Asia/Vladivostok\": return \"Vladivostok Standard Time\";\n-        case \"Asia/Yakutsk\": return \"Yakutsk Standard Time\";\n-        case \"Asia/Yekaterinburg\": return \"Ekaterinburg Standard Time\";\n-        case \"Asia/Yerevan\": return \"Caucasus Standard Time\";\n-        case \"Atlantic/Azores\": return \"Azores Standard Time\";\n-        case \"Atlantic/Bermuda\": return \"Atlantic Standard Time\";\n-        case \"Atlantic/Canary\": return \"GMT Standard Time\";\n-        case \"Atlantic/Cape_Verde\": return \"Cape Verde Standard Time\";\n-        case \"Atlantic/Faeroe\": return \"GMT Standard Time\";\n-        case \"Atlantic/Madeira\": return \"GMT Standard Time\";\n-        case \"Atlantic/Reykjavik\": return \"Greenwich Standard Time\";\n-        case \"Atlantic/South_Georgia\": return \"UTC-02\";\n-        case \"Atlantic/St_Helena\": return \"Greenwich Standard Time\";\n-        case \"Atlantic/Stanley\": return \"SA Eastern Standard Time\";\n-        case \"Australia/Adelaide\": return \"Cen. Australia Standard Time\";\n-        case \"Australia/Brisbane\": return \"E. Australia Standard Time\";\n-        case \"Australia/Broken_Hill\": return \"Cen. Australia Standard Time\";\n-        case \"Australia/Currie\": return \"Tasmania Standard Time\";\n-        case \"Australia/Darwin\": return \"AUS Central Standard Time\";\n-        case \"Australia/Eucla\": return \"Aus Central W. Standard Time\";\n-        case \"Australia/Hobart\": return \"Tasmania Standard Time\";\n-        case \"Australia/Lindeman\": return \"E. Australia Standard Time\";\n-        case \"Australia/Lord_Howe\": return \"Lord Howe Standard Time\";\n-        case \"Australia/Melbourne\": return \"AUS Eastern Standard Time\";\n-        case \"Australia/Perth\": return \"W. Australia Standard Time\";\n-        case \"Australia/Sydney\": return \"AUS Eastern Standard Time\";\n-        case \"CST6CDT\": return \"Central Standard Time\";\n-        case \"EST5EDT\": return \"Eastern Standard Time\";\n-        case \"Etc/GMT\": return \"UTC\";\n-        case \"Etc/GMT+1\": return \"Cape Verde Standard Time\";\n-        case \"Etc/GMT+10\": return \"Hawaiian Standard Time\";\n-        case \"Etc/GMT+11\": return \"UTC-11\";\n-        case \"Etc/GMT+12\": return \"Dateline Standard Time\";\n-        case \"Etc/GMT+2\": return \"UTC-02\";\n-        case \"Etc/GMT+3\": return \"SA Eastern Standard Time\";\n-        case \"Etc/GMT+4\": return \"SA Western Standard Time\";\n-        case \"Etc/GMT+5\": return \"SA Pacific Standard Time\";\n-        case \"Etc/GMT+6\": return \"Central America Standard Time\";\n-        case \"Etc/GMT+7\": return \"US Mountain Standard Time\";\n-        case \"Etc/GMT+8\": return \"UTC-08\";\n-        case \"Etc/GMT+9\": return \"UTC-09\";\n-        case \"Etc/GMT-1\": return \"W. Central Africa Standard Time\";\n-        case \"Etc/GMT-10\": return \"West Pacific Standard Time\";\n-        case \"Etc/GMT-11\": return \"Central Pacific Standard Time\";\n-        case \"Etc/GMT-12\": return \"UTC+12\";\n-        case \"Etc/GMT-13\": return \"Tonga Standard Time\";\n-        case \"Etc/GMT-14\": return \"Line Islands Standard Time\";\n-        case \"Etc/GMT-2\": return \"South Africa Standard Time\";\n-        case \"Etc/GMT-3\": return \"E. Africa Standard Time\";\n-        case \"Etc/GMT-4\": return \"Arabian Standard Time\";\n-        case \"Etc/GMT-5\": return \"West Asia Standard Time\";\n-        case \"Etc/GMT-6\": return \"Central Asia Standard Time\";\n-        case \"Etc/GMT-7\": return \"SE Asia Standard Time\";\n-        case \"Etc/GMT-8\": return \"Singapore Standard Time\";\n-        case \"Etc/GMT-9\": return \"Tokyo Standard Time\";\n-        case \"Europe/Amsterdam\": return \"W. Europe Standard Time\";\n-        case \"Europe/Andorra\": return \"W. Europe Standard Time\";\n-        case \"Europe/Astrakhan\": return \"Astrakhan Standard Time\";\n-        case \"Europe/Athens\": return \"GTB Standard Time\";\n-        case \"Europe/Belgrade\": return \"Central Europe Standard Time\";\n-        case \"Europe/Berlin\": return \"W. Europe Standard Time\";\n-        case \"Europe/Bratislava\": return \"Central Europe Standard Time\";\n-        case \"Europe/Brussels\": return \"Romance Standard Time\";\n-        case \"Europe/Bucharest\": return \"GTB Standard Time\";\n-        case \"Europe/Budapest\": return \"Central Europe Standard Time\";\n-        case \"Europe/Busingen\": return \"W. Europe Standard Time\";\n-        case \"Europe/Chisinau\": return \"GTB Standard Time\";\n-        case \"Europe/Copenhagen\": return \"Romance Standard Time\";\n-        case \"Europe/Dublin\": return \"GMT Standard Time\";\n-        case \"Europe/Gibraltar\": return \"W. Europe Standard Time\";\n-        case \"Europe/Guernsey\": return \"GMT Standard Time\";\n-        case \"Europe/Helsinki\": return \"FLE Standard Time\";\n-        case \"Europe/Isle_of_Man\": return \"GMT Standard Time\";\n-        case \"Europe/Istanbul\": return \"Turkey Standard Time\";\n-        case \"Europe/Jersey\": return \"GMT Standard Time\";\n-        case \"Europe/Kaliningrad\": return \"Kaliningrad Standard Time\";\n-        case \"Europe/Kiev\": return \"FLE Standard Time\";\n-        case \"Europe/Lisbon\": return \"GMT Standard Time\";\n-        case \"Europe/Ljubljana\": return \"Central Europe Standard Time\";\n-        case \"Europe/London\": return \"GMT Standard Time\";\n-        case \"Europe/Luxembourg\": return \"W. Europe Standard Time\";\n-        case \"Europe/Madrid\": return \"Romance Standard Time\";\n-        case \"Europe/Malta\": return \"W. Europe Standard Time\";\n-        case \"Europe/Mariehamn\": return \"FLE Standard Time\";\n-        case \"Europe/Minsk\": return \"Belarus Standard Time\";\n-        case \"Europe/Monaco\": return \"W. Europe Standard Time\";\n-        case \"Europe/Moscow\": return \"Russian Standard Time\";\n-        case \"Europe/Oslo\": return \"W. Europe Standard Time\";\n-        case \"Europe/Paris\": return \"Romance Standard Time\";\n-        case \"Europe/Podgorica\": return \"Central Europe Standard Time\";\n-        case \"Europe/Prague\": return \"Central Europe Standard Time\";\n-        case \"Europe/Riga\": return \"FLE Standard Time\";\n-        case \"Europe/Rome\": return \"W. Europe Standard Time\";\n-        case \"Europe/Samara\": return \"Russia Time Zone 3\";\n-        case \"Europe/San_Marino\": return \"W. Europe Standard Time\";\n-        case \"Europe/Sarajevo\": return \"Central European Standard Time\";\n-        case \"Europe/Simferopol\": return \"Russian Standard Time\";\n-        case \"Europe/Skopje\": return \"Central European Standard Time\";\n-        case \"Europe/Sofia\": return \"FLE Standard Time\";\n-        case \"Europe/Stockholm\": return \"W. Europe Standard Time\";\n-        case \"Europe/Tallinn\": return \"FLE Standard Time\";\n-        case \"Europe/Tirane\": return \"Central Europe Standard Time\";\n-        case \"Europe/Uzhgorod\": return \"FLE Standard Time\";\n-        case \"Europe/Vaduz\": return \"W. Europe Standard Time\";\n-        case \"Europe/Vatican\": return \"W. Europe Standard Time\";\n-        case \"Europe/Vienna\": return \"W. Europe Standard Time\";\n-        case \"Europe/Vilnius\": return \"FLE Standard Time\";\n-        case \"Europe/Volgograd\": return \"Russian Standard Time\";\n-        case \"Europe/Warsaw\": return \"Central European Standard Time\";\n-        case \"Europe/Zagreb\": return \"Central European Standard Time\";\n-        case \"Europe/Zaporozhye\": return \"FLE Standard Time\";\n-        case \"Europe/Zurich\": return \"W. Europe Standard Time\";\n-        case \"Indian/Antananarivo\": return \"E. Africa Standard Time\";\n-        case \"Indian/Chagos\": return \"Central Asia Standard Time\";\n-        case \"Indian/Christmas\": return \"SE Asia Standard Time\";\n-        case \"Indian/Cocos\": return \"Myanmar Standard Time\";\n-        case \"Indian/Comoro\": return \"E. Africa Standard Time\";\n-        case \"Indian/Kerguelen\": return \"West Asia Standard Time\";\n-        case \"Indian/Mahe\": return \"Mauritius Standard Time\";\n-        case \"Indian/Maldives\": return \"West Asia Standard Time\";\n-        case \"Indian/Mauritius\": return \"Mauritius Standard Time\";\n-        case \"Indian/Mayotte\": return \"E. Africa Standard Time\";\n-        case \"Indian/Reunion\": return \"Mauritius Standard Time\";\n-        case \"MST7MDT\": return \"Mountain Standard Time\";\n-        case \"PST8PDT\": return \"Pacific Standard Time\";\n-        case \"Pacific/Apia\": return \"Samoa Standard Time\";\n-        case \"Pacific/Auckland\": return \"New Zealand Standard Time\";\n-        case \"Pacific/Bougainville\": return \"Bougainville Standard Time\";\n-        case \"Pacific/Chatham\": return \"Chatham Islands Standard Time\";\n-        case \"Pacific/Easter\": return \"Easter Island Standard Time\";\n-        case \"Pacific/Efate\": return \"Central Pacific Standard Time\";\n-        case \"Pacific/Enderbury\": return \"Tonga Standard Time\";\n-        case \"Pacific/Fakaofo\": return \"Tonga Standard Time\";\n-        case \"Pacific/Fiji\": return \"Fiji Standard Time\";\n-        case \"Pacific/Funafuti\": return \"UTC+12\";\n-        case \"Pacific/Galapagos\": return \"Central America Standard Time\";\n-        case \"Pacific/Guadalcanal\": return \"Central Pacific Standard Time\";\n-        case \"Pacific/Guam\": return \"West Pacific Standard Time\";\n-        case \"Pacific/Honolulu\": return \"Hawaiian Standard Time\";\n-        case \"Pacific/Johnston\": return \"Hawaiian Standard Time\";\n-        case \"Pacific/Kiritimati\": return \"Line Islands Standard Time\";\n-        case \"Pacific/Kosrae\": return \"Central Pacific Standard Time\";\n-        case \"Pacific/Kwajalein\": return \"UTC+12\";\n-        case \"Pacific/Majuro\": return \"UTC+12\";\n-        case \"Pacific/Marquesas\": return \"Marquesas Standard Time\";\n-        case \"Pacific/Midway\": return \"UTC-11\";\n-        case \"Pacific/Nauru\": return \"UTC+12\";\n-        case \"Pacific/Niue\": return \"UTC-11\";\n-        case \"Pacific/Noumea\": return \"Central Pacific Standard Time\";\n-        case \"Pacific/Norfolk\": return \"Norfolk Standard Time\";\n-        case \"Pacific/Pago_Pago\": return \"UTC-11\";\n-        case \"Pacific/Palau\": return \"Tokyo Standard Time\";\n-        case \"Pacific/Ponape\": return \"Central Pacific Standard Time\";\n-        case \"Pacific/Port_Moresby\": return \"West Pacific Standard Time\";\n-        case \"Pacific/Rarotonga\": return \"Hawaiian Standard Time\";\n-        case \"Pacific/Saipan\": return \"West Pacific Standard Time\";\n-        case \"Pacific/Tahiti\": return \"Hawaiian Standard Time\";\n-        case \"Pacific/Tarawa\": return \"UTC+12\";\n-        case \"Pacific/Tongatapu\": return \"Tonga Standard Time\";\n-        case \"Pacific/Truk\": return \"West Pacific Standard Time\";\n-        case \"Pacific/Wake\": return \"UTC+12\";\n-        case \"Pacific/Wallis\": return \"UTC+12\";\n-        default: return null;\n-    }\n-}\n-\n-version (Windows) version (UpdateWindowsTZTranslations) deprecated @system unittest\n-{\n-    import std.stdio : stderr;\n-\n-    foreach (tzName; TimeZone.getInstalledTZNames())\n-    {\n-        if (tzDatabaseNameToWindowsTZName(tzName) is null)\n-            stderr.writeln(\"Missing TZName to Windows translation: \", tzName);\n-    }\n-}\n-\n-\n-// Explicitly undocumented. It will be removed in June 2018. @@@DEPRECATED_2018-07@@@\n-deprecated(\"Use parseTZConversions instead\")\n-string windowsTZNameToTZDatabaseName(string tzName) @safe pure nothrow @nogc\n-{\n-    switch (tzName)\n-    {\n-        case \"AUS Central Standard Time\": return \"Australia/Darwin\";\n-        case \"AUS Eastern Standard Time\": return \"Australia/Sydney\";\n-        case \"Aus Central W. Standard Time\": return \"Australia/Eucla\";\n-        case \"Afghanistan Standard Time\": return \"Asia/Kabul\";\n-        case \"Haiti Standard Time\": return \"America/Port-au-Prince\";\n-        case \"Alaskan Standard Time\": return \"America/Anchorage\";\n-        case \"Aleutian Standard Time\": return \"America/Adak\";\n-        case \"Altai Standard Time\": return \"Asia/Barnaul\";\n-        case \"Arab Standard Time\": return \"Asia/Riyadh\";\n-        case \"Arabian Standard Time\": return \"Asia/Dubai\";\n-        case \"Arabic Standard Time\": return \"Asia/Baghdad\";\n-        case \"Argentina Standard Time\": return \"America/Buenos_Aires\";\n-        case \"Astrakhan Standard Time\": return \"Europe/Astrakhan\";\n-        case \"Atlantic Standard Time\": return \"America/Halifax\";\n-        case \"Azerbaijan Standard Time\": return \"Asia/Baku\";\n-        case \"Azores Standard Time\": return \"Atlantic/Azores\";\n-        case \"Bahia Standard Time\": return \"America/Bahia\";\n-        case \"Bangladesh Standard Time\": return \"Asia/Dhaka\";\n-        case \"Belarus Standard Time\": return \"Europe/Minsk\";\n-        case \"Bougainville Standard Time\": return \"Pacific/Bougainville\";\n-        case \"Canada Central Standard Time\": return \"America/Regina\";\n-        case \"Cape Verde Standard Time\": return \"Atlantic/Cape_Verde\";\n-        case \"Caucasus Standard Time\": return \"Asia/Yerevan\";\n-        case \"Cen. Australia Standard Time\": return \"Australia/Adelaide\";\n-        case \"Central America Standard Time\": return \"America/Guatemala\";\n-        case \"Central Asia Standard Time\": return \"Asia/Almaty\";\n-        case \"Central Brazilian Standard Time\": return \"America/Cuiaba\";\n-        case \"Central Europe Standard Time\": return \"Europe/Budapest\";\n-        case \"Central European Standard Time\": return \"Europe/Warsaw\";\n-        case \"Central Pacific Standard Time\": return \"Pacific/Guadalcanal\";\n-        case \"Central Standard Time\": return \"America/Chicago\";\n-        case \"Central Standard Time (Mexico)\": return \"America/Mexico_City\";\n-        case \"Chatham Islands Standard Time\": return \"Pacific/Chatham\";\n-        case \"China Standard Time\": return \"Asia/Shanghai\";\n-        case \"Cuba Standard Time\": return \"America/Havana\";\n-        case \"Dateline Standard Time\": return \"Etc/GMT+12\";\n-        case \"E. Africa Standard Time\": return \"Africa/Nairobi\";\n-        case \"E. Australia Standard Time\": return \"Australia/Brisbane\";\n-        // This doesn't appear to be in the current stuff from MS, but the autotester\n-        // is failing without it (probably because its time zone data hasn't been\n-        // updated recently enough).\n-        case \"E. Europe Standard Time\": return \"Europe/Minsk\";\n-        case \"E. South America Standard Time\": return \"America/Sao_Paulo\";\n-        case \"Easter Island Standard Time\": return \"Pacific/Easter\";\n-        case \"Eastern Standard Time\": return \"America/New_York\";\n-        case \"Eastern Standard Time (Mexico)\": return \"America/Cancun\";\n-        case \"Egypt Standard Time\": return \"Africa/Cairo\";\n-        case \"Ekaterinburg Standard Time\": return \"Asia/Yekaterinburg\";\n-        case \"FLE Standard Time\": return \"Europe/Kiev\";\n-        case \"Fiji Standard Time\": return \"Pacific/Fiji\";\n-        case \"GMT Standard Time\": return \"Europe/London\";\n-        case \"GTB Standard Time\": return \"Europe/Athens\";\n-        case \"Georgian Standard Time\": return \"Asia/Tbilisi\";\n-        case \"Greenland Standard Time\": return \"America/Godthab\";\n-        case \"Greenwich Standard Time\": return \"Atlantic/Reykjavik\";\n-        case \"Hawaiian Standard Time\": return \"Pacific/Honolulu\";\n-        case \"India Standard Time\": return \"Asia/Calcutta\";\n-        case \"Iran Standard Time\": return \"Asia/Tehran\";\n-        case \"Israel Standard Time\": return \"Asia/Jerusalem\";\n-        case \"Jordan Standard Time\": return \"Asia/Amman\";\n-        case \"Kaliningrad Standard Time\": return \"Europe/Kaliningrad\";\n-        // Same as with E. Europe Standard Time.\n-        case \"Kamchatka Standard Time\": return \"Asia/Kamchatka\";\n-        case \"Korea Standard Time\": return \"Asia/Seoul\";\n-        case \"Libya Standard Time\": return \"Africa/Tripoli\";\n-        case \"Line Islands Standard Time\": return \"Pacific/Kiritimati\";\n-        case \"Lord Howe Standard Time\": return \"Australia/Lord_Howe\";\n-        case \"Magadan Standard Time\": return \"Asia/Magadan\";\n-        case \"Marquesas Standard Time\": return \"Pacific/Marquesas\";\n-        case \"Mauritius Standard Time\": return \"Indian/Mauritius\";\n-        // Same as with E. Europe Standard Time.\n-        case \"Mexico Standard Time\": return \"America/Mexico_City\";\n-        // Same as with E. Europe Standard Time.\n-        case \"Mexico Standard Time 2\": return \"America/Chihuahua\";\n-        // Same as with E. Europe Standard Time.\n-        case \"Mid-Atlantic Standard Time\": return \"Etc/GMT+2\";\n-        case \"Middle East Standard Time\": return \"Asia/Beirut\";\n-        case \"Montevideo Standard Time\": return \"America/Montevideo\";\n-        case \"Morocco Standard Time\": return \"Africa/Casablanca\";\n-        case \"Mountain Standard Time\": return \"America/Denver\";\n-        case \"Mountain Standard Time (Mexico)\": return \"America/Chihuahua\";\n-        case \"Myanmar Standard Time\": return \"Asia/Rangoon\";\n-        case \"N. Central Asia Standard Time\": return \"Asia/Novosibirsk\";\n-        case \"Namibia Standard Time\": return \"Africa/Windhoek\";\n-        case \"Nepal Standard Time\": return \"Asia/Katmandu\";\n-        case \"New Zealand Standard Time\": return \"Pacific/Auckland\";\n-        case \"Newfoundland Standard Time\": return \"America/St_Johns\";\n-        case \"Norfolk Standard Time\": return \"Pacific/Norfolk\";\n-        case \"North Asia East Standard Time\": return \"Asia/Irkutsk\";\n-        case \"North Asia Standard Time\": return \"Asia/Krasnoyarsk\";\n-        case \"North Korea Standard Time\": return \"Asia/Pyongyang\";\n-        case \"Pacific SA Standard Time\": return \"America/Santiago\";\n-        case \"Pacific Standard Time\": return \"America/Los_Angeles\";\n-        case \"Pacific Standard Time (Mexico)\": return \"America/Santa_Isabel\";\n-        case \"Pakistan Standard Time\": return \"Asia/Karachi\";\n-        case \"Paraguay Standard Time\": return \"America/Asuncion\";\n-        case \"Romance Standard Time\": return \"Europe/Paris\";\n-        case \"Russia Time Zone 10\": return \"Asia/Srednekolymsk\";\n-        case \"Russia Time Zone 11\": return \"Asia/Anadyr\";\n-        case \"Russia Time Zone 3\": return \"Europe/Samara\";\n-        case \"Russian Standard Time\": return \"Europe/Moscow\";\n-        case \"SA Eastern Standard Time\": return \"America/Cayenne\";\n-        case \"SA Pacific Standard Time\": return \"America/Bogota\";\n-        case \"SA Western Standard Time\": return \"America/La_Paz\";\n-        case \"SE Asia Standard Time\": return \"Asia/Bangkok\";\n-        case \"Sakhalin Standard Time\": return \"Asia/Sakhalin\";\n-        case \"Saint Pierre Standard Time\": return \"America/Miquelon\";\n-        case \"Samoa Standard Time\": return \"Pacific/Apia\";\n-        case \"Singapore Standard Time\": return \"Asia/Singapore\";\n-        case \"South Africa Standard Time\": return \"Africa/Johannesburg\";\n-        case \"Sri Lanka Standard Time\": return \"Asia/Colombo\";\n-        case \"Syria Standard Time\": return \"Asia/Damascus\";\n-        case \"Taipei Standard Time\": return \"Asia/Taipei\";\n-        case \"Tasmania Standard Time\": return \"Australia/Hobart\";\n-        case \"Tocantins Standard Time\": return \"America/Arguaina\";\n-        case \"Tokyo Standard Time\": return \"Asia/Tokyo\";\n-        case \"Tomsk Standard Time\": return \"Asia/Tomsk\";\n-        case \"Tonga Standard Time\": return \"Pacific/Tongatapu\";\n-        case \"Transbaikal Standard Time\": return \"Asia/Chita\";\n-        case \"Turkey Standard Time\": return \"Europe/Istanbul\";\n-        case \"Turks And Caicos Standard Time\": return \"America/Grand_Turk\";\n-        case \"US Eastern Standard Time\": return \"America/Indianapolis\";\n-        case \"US Mountain Standard Time\": return \"America/Phoenix\";\n-        case \"UTC\": return \"Etc/GMT\";\n-        case \"UTC+12\": return \"Etc/GMT-12\";\n-        case \"UTC-02\": return \"Etc/GMT+2\";\n-        case \"UTC-08\": return \"Etc/GMT+8\";\n-        case \"UTC-09\": return \"Etc/GMT+9\";\n-        case \"UTC-11\": return \"Etc/GMT+11\";\n-        case \"Ulaanbaatar Standard Time\": return \"Asia/Ulaanbaatar\";\n-        case \"Venezuela Standard Time\": return \"America/Caracas\";\n-        case \"Vladivostok Standard Time\": return \"Asia/Vladivostok\";\n-        case \"W. Australia Standard Time\": return \"Australia/Perth\";\n-        case \"W. Central Africa Standard Time\": return \"Africa/Lagos\";\n-        case \"W. Europe Standard Time\": return \"Europe/Berlin\";\n-        case \"W. Mongolia Standard Time\": return \"Asia/Hovd\";\n-        case \"West Asia Standard Time\": return \"Asia/Tashkent\";\n-        case \"West Bank Standard Time\": return \"Asia/Hebron\";\n-        case \"West Pacific Standard Time\": return \"Pacific/Port_Moresby\";\n-        case \"Yakutsk Standard Time\": return \"Asia/Yakutsk\";\n-        default: return null;\n-    }\n-}\n-\n-version (Windows) version (UpdateWindowsTZTranslations) deprecated @system unittest\n-{\n-    import std.stdio : stderr;\n-\n-    foreach (winName; WindowsTimeZone.getInstalledTZNames())\n-    {\n-        if (windowsTZNameToTZDatabaseName(winName) is null)\n-            stderr.writeln(\"Missing Windows to TZName translation: \", winName);\n-    }\n-}\n-\n-\n-// This script is for regenerating tzDatabaseNameToWindowsTZName and\n-// windowsTZNameToTZDatabaseName from\n-// http://unicode.org/cldr/data/common/supplemental/windowsZones.xml\n-\n-/+\n-#!/bin/rdmd\n-\n-import std.algorithm;\n-import std.array;\n-import std.conv;\n-import std.datetime;\n-import std.exception;\n-import std.path;\n-import std.stdio;\n-import std.string;\n-\n-int main(string[] args)\n-{\n-    if (args.length != 4 || args[1].baseName != \"windowsZones.xml\")\n-    {\n-        stderr.writeln(\"genTZs.d windowsZones.xml <nix2WinFile> <win2NixFile>\");\n-        return -1;\n-    }\n-\n-    string[][string] win2Nix;\n-    string[][string] nix2Win;\n-    immutable f1 = `<mapZone other=\"`;\n-    immutable f2 = `type=\"`;\n-\n-    auto file = File(args[1]);\n-    foreach (line; file.byLine())\n-    {\n-        line = line.find(f1);\n-        if (line.empty)\n-            continue;\n-        line = line[f1.length .. $];\n-        auto next = line.find('\"');\n-        auto win = to!string(line[0 .. $ - next.length]);\n-        line = next.find(f2);\n-        line = line[f2.length .. $];\n-        next = line.find('\"');\n-        auto nixes = to!string(line[0 .. $ - next.length]).split();\n-\n-        if (auto l = win in win2Nix)\n-            *l ~= nixes;\n-        else\n-            win2Nix[win] = nixes;\n-        foreach (nix; nixes)\n-        {\n-            if (auto w = nix in nix2Win)\n-                *w ~= win;\n-            else\n-                nix2Win[nix] = [win];\n-        }\n-    }\n-\n-    foreach (nix; nix2Win.byKey())\n-    {\n-        auto wins = nix2Win[nix];\n-        nix2Win[nix] = wins.sort().uniq().array();\n-    }\n-\n-    foreach (win; win2Nix.byKey())\n-    {\n-        auto nixes = win2Nix[win];\n-        win2Nix[win] = nixes.sort().uniq().array();\n-    }\n-\n-    // AFAIK, there should be no cases of a TZ Database time zone converting to\n-    // multiple windows time zones.\n-    foreach (nix, wins; nix2Win)\n-        enforce(wins.length == 1, format(\"%s -> %s\", nix, wins));\n-\n-    // We'll try to eliminate multiples by favoring a conversion if it's already\n-    // in Phobos, but if it's new, then the correct one will have to be chosen\n-    // manually from the results.\n-    string[] haveMultiple;\n-    foreach (win, nixes; win2Nix)\n-    {\n-        if (nixes.length > 1)\n-            haveMultiple ~= win;\n-    }\n-    bool[string] haveConflicts;\n-    foreach (win; haveMultiple)\n-    {\n-        if (auto curr = windowsTZNameToTZDatabaseName(win))\n-        {\n-            if (auto other = curr in nix2Win)\n-            {\n-                if ((*other)[0] == win)\n-                {\n-                    win2Nix[win] = [curr];\n-                    continue;\n-                }\n-            }\n-        }\n-        haveConflicts[win] = true;\n-        writefln(\"Warning: %s -> %s\", win, win2Nix[win]);\n-    }\n-\n-\n-    string[] nix2WinLines = [\n-        `string tzDatabaseNameToWindowsTZName(string tzName) @safe pure nothrow @nogc`,\n-        `{`,\n-        `    switch (tzName)`,\n-        `    {`];\n-\n-    foreach (nix; nix2Win.keys.sort())\n-        nix2WinLines ~= format(`        case \"%s\": return \"%s\";`, nix, nix2Win[nix][0]);\n-\n-    nix2WinLines ~= [\n-        `        default: return null;`,\n-        `    }`,\n-        `}`];\n-\n-\n-    string[] win2NixLines = [\n-        `string windowsTZNameToTZDatabaseName(string tzName) @safe pure nothrow @nogc`,\n-        `{`,\n-        `    switch (tzName)`,\n-        `    {`];\n-    foreach (win; win2Nix.keys.sort())\n-    {\n-        immutable hasMultiple = cast(bool)(win in haveConflicts);\n-        foreach (nix; win2Nix[win])\n-            win2NixLines ~= format(`        case \"%s\": return \"%s\";%s`, win, nix, hasMultiple ? \" FIXME\" : \"\");\n-    }\n-\n-    win2NixLines ~= [\n-        `        default: return null;`,\n-        `    }`,\n-        `}`];\n-\n-\n-    auto nix2WinFile = args[2];\n-    std.file.write(nix2WinFile, nix2WinLines.join(\"\\n\"));\n-\n-    auto win2NixFile = args[3];\n-    std.file.write(win2NixFile, win2NixLines.join(\"\\n\"));\n-\n-    return 0;\n-}\n-+/"}, {"sha": "9ed67629df099ea26c570476ae9c6ea9e5977f48", "filename": "libphobos/src/std/internal/windows/advapi32.d", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Finternal%2Fwindows%2Fadvapi32.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Finternal%2Fwindows%2Fadvapi32.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Finternal%2Fwindows%2Fadvapi32.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -14,8 +14,7 @@ version (Windows):\n \n import core.sys.windows.windows;\n \n-version (GNU) {}\n-else pragma(lib, \"advapi32.lib\");\n+pragma(lib, \"advapi32.lib\");\n \n immutable bool isWow64;\n "}, {"sha": "8ba0f05f7826661dfe8b795305aff94aa840dba3", "filename": "libphobos/src/std/json.d", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fjson.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fjson.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fjson.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -1123,14 +1123,6 @@ if (isInputRange!T && !isInfinite!T && isSomeChar!(ElementEncodingType!T))\n     return parseJSON!T(json, -1, options);\n }\n \n-deprecated(\n-    \"Please use the overload that takes a ref JSONValue rather than a pointer. This overload will \"\n-    ~ \"be removed in November 2017.\")\n-string toJSON(in JSONValue* root, in bool pretty = false, in JSONOptions options = JSONOptions.none) @safe\n-{\n-    return toJSON(*root, pretty, options);\n-}\n-\n /**\n Takes a tree of JSON values and returns the serialized string.\n "}, {"sha": "a1cac2c9fdf4b102cb3c5bcbcfa58e8f7d4eec82", "filename": "libphobos/src/std/process.d", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fprocess.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fprocess.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fprocess.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -3966,8 +3966,7 @@ version (Windows)\n {\n     import core.sys.windows.windows;\n \n-    version (GNU) {}\n-    else pragma(lib,\"shell32.lib\");\n+    pragma(lib,\"shell32.lib\");\n \n     void browse(const(char)[] url)\n     {"}, {"sha": "1a4e6fb2b9107054c0ecfa795cdd2e9189500a58", "filename": "libphobos/src/std/range/primitives.d", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Frange%2Fprimitives.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Frange%2Fprimitives.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Frange%2Fprimitives.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -1388,41 +1388,13 @@ This is because a narrow string's length does not reflect the number of\n characters, but instead the number of encoding units, and as such is not useful\n with range-oriented algorithms. To use strings as random-access ranges with\n length, use $(REF representation, std, string) or $(REF byCodeUnit, std, utf).\n-\n-Deprecation: Historically `hasLength!R` yielded `true` for types whereby\n-`R.length` returns other types convertible to `ulong`, such as `int`, `ushort`,\n-`const(size_t)`, user-defined types using `alias this`, or notably `ulong` on\n-32-bit systems. This behavior has  been deprecated. After December 2017,\n-`hasLength` will yield `true` only if `R.length` yields the exact type `size_t`.\n */\n template hasLength(R)\n {\n     static if (is(typeof(((R* r) => r.length)(null)) Length))\n-    {\n-        static if (is(Length == size_t))\n-        {\n-            enum bool hasLength = !isNarrowString!R;\n-        }\n-        else static if (is(Length : ulong))\n-        {\n-            // @@@DEPRECATED_2017-12@@@\n-            // Uncomment the deprecated(...) message and take the pragma(msg)\n-            // out once https://issues.dlang.org/show_bug.cgi?id=10181 is fixed.\n-            pragma(msg, __FILE__ ~ \"(\" ~ __LINE__.stringof ~\n-                \"): Note: length must have type size_t on all systems\" ~\n-                    \", please update your code by December 2017.\");\n-            //deprecated(\"length must have type size_t on all systems\")\n-            enum bool hasLength = true;\n-        }\n-        else\n-        {\n-            enum bool hasLength = false;\n-        }\n-    }\n+        enum bool hasLength = is(Length == size_t) && !isNarrowString!R;\n     else\n-    {\n         enum bool hasLength = false;\n-    }\n }\n \n ///\n@@ -1432,12 +1404,41 @@ template hasLength(R)\n     static assert( hasLength!(int[]));\n     static assert( hasLength!(inout(int)[]));\n \n-    struct A { ulong length; }\n-    struct B { size_t length() { return 0; } }\n-    struct C { @property size_t length() { return 0; } }\n+    struct A { size_t length() { return 0; } }\n+    struct B { @property size_t length() { return 0; } }\n     static assert( hasLength!(A));\n     static assert( hasLength!(B));\n-    static assert( hasLength!(C));\n+}\n+\n+// test combinations which are invalid on some platforms\n+unittest\n+{\n+    struct A { ulong length; }\n+    struct B { @property uint length() { return 0; } }\n+\n+    version (X86)\n+    {\n+        static assert(!hasLength!(A));\n+        static assert(hasLength!(B));\n+    }\n+    else version(X86_64)\n+    {\n+        static assert(hasLength!(A));\n+        static assert(!hasLength!(B));\n+    }\n+}\n+\n+// test combinations which are invalid on all platforms\n+unittest\n+{\n+    struct A { long length; }\n+    struct B { int length; }\n+    struct C { ubyte length; }\n+    struct D { char length; }\n+    static assert(!hasLength!(A));\n+    static assert(!hasLength!(B));\n+    static assert(!hasLength!(C));\n+    static assert(!hasLength!(D));\n }\n \n /**"}, {"sha": "78479c85b5861f50ac09bf83421cdc98f939317e", "filename": "libphobos/src/std/socket.d", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fsocket.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fsocket.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fsocket.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -57,12 +57,8 @@ import std.internal.cstring;\n \n version (Windows)\n {\n-    version (GNU) {}\n-    else\n-    {\n-        pragma (lib, \"ws2_32.lib\");\n-        pragma (lib, \"wsock32.lib\");\n-    }\n+    pragma (lib, \"ws2_32.lib\");\n+    pragma (lib, \"wsock32.lib\");\n \n     import core.sys.windows.windows, std.windows.syserror;\n     public import core.sys.windows.winsock2;"}, {"sha": "5b61cde4ac1169f3a6dfc0daef2fed0fbe7d1528", "filename": "libphobos/src/std/string.d", "status": "modified", "additions": 12, "deletions": 84, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Fstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fstring.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -5174,30 +5174,8 @@ body\n     assert(buffer.data == \"h5 rd\");\n }\n \n-//@@@DEPRECATED_2018-05@@@\n-/***********************************************\n- * $(RED This function is deprecated and will be removed May 2018.)\n- * Please use the functions in $(MREF std, regex) and $(MREF std, algorithm)\n- * instead. If you still need this function, it will be available in\n- * $(LINK2 https://github.com/dlang/undeaD, undeaD).\n- *\n- * See if character c is in the pattern.\n- * Patterns:\n- *\n- *  A $(I pattern) is an array of characters much like a $(I character\n- *  class) in regular expressions. A sequence of characters\n- *  can be given, such as \"abcde\". The '-' can represent a range\n- *  of characters, as \"a-e\" represents the same pattern as \"abcde\".\n- *  \"a-fA-F0-9\" represents all the hex characters.\n- *  If the first character of a pattern is '^', then the pattern\n- *  is negated, i.e. \"^0-9\" means any character except a digit.\n- *  The functions inPattern, $(B countchars), $(B removeschars),\n- *  and $(B squeeze) use patterns.\n- *\n- * Note: In the future, the pattern syntax may be improved\n- *  to be more like regular expression character classes.\n- */\n-deprecated(\"This function is obsolete and will be removed May 2018. See the docs for more details\")\n+//@@@DEPRECATED_2.086@@@\n+deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n bool inPattern(S)(dchar c, in S pattern) @safe pure @nogc\n if (isSomeString!S)\n {\n@@ -5262,16 +5240,8 @@ deprecated\n     });\n }\n \n-//@@@DEPRECATED_2018-05@@@\n-/***********************************************\n- * $(RED This function is deprecated and will be removed May 2018.)\n- * Please use the functions in $(MREF std, regex) and $(MREF std, algorithm)\n- * instead. If you still need this function, it will be available in\n- * $(LINK2 https://github.com/dlang/undeaD, undeaD).\n- *\n- * See if character c is in the intersection of the patterns.\n- */\n-deprecated(\"This function is obsolete and will be removed May 2018. See the docs for more details\")\n+//@@@DEPRECATED_2.086@@@\n+deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n bool inPattern(S)(dchar c, S[] patterns) @safe pure @nogc\n if (isSomeString!S)\n {\n@@ -5285,16 +5255,8 @@ if (isSomeString!S)\n     return true;\n }\n \n-//@@@DEPRECATED_2018-05@@@\n-/********************************************\n- * $(RED This function is deprecated and will be removed May 2018.)\n- * Please use the functions in $(MREF std, regex) and $(MREF std, algorithm)\n- * instead. If you still need this function, it will be available in\n- * $(LINK2 https://github.com/dlang/undeaD, undeaD).\n- *\n- * Count characters in s that match pattern.\n- */\n-deprecated(\"This function is obsolete and will be removed May 2018. See the docs for more details\")\n+//@@@DEPRECATED_2.086@@@\n+deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n size_t countchars(S, S1)(S s, in S1 pattern) @safe pure @nogc\n if (isSomeString!S && isSomeString!S1)\n {\n@@ -5319,16 +5281,8 @@ deprecated\n     });\n }\n \n-//@@@DEPRECATED_2018-05@@@\n-/********************************************\n- * $(RED This function is deprecated and will be removed May 2018.)\n- * Please use the functions in $(MREF std, regex) and $(MREF std, algorithm)\n- * instead. If you still need this function, it will be available in\n- * $(LINK2 https://github.com/dlang/undeaD, undeaD).\n- *\n- * Return string that is s with all characters removed that match pattern.\n- */\n-deprecated(\"This function is obsolete and will be removed May 2018. See the docs for more details\")\n+//@@@DEPRECATED_2.086@@@\n+deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n S removechars(S)(S s, in S pattern) @safe pure\n if (isSomeString!S)\n {\n@@ -5380,18 +5334,8 @@ deprecated\n     assert(removechars(\"abc\", \"x\") == \"abc\");\n }\n \n-//@@@DEPRECATED_2018-05@@@\n-/***************************************************\n- * $(RED This function is deprecated and will be removed May 2018.)\n- * Please use the functions in $(MREF std, regex) and $(MREF std, algorithm)\n- * instead. If you still need this function, it will be available in\n- * $(LINK2 https://github.com/dlang/undeaD, undeaD).\n- *\n- * Return string where sequences of a character in s[] from pattern[]\n- * are replaced with a single instance of that character.\n- * If pattern is null, it defaults to all characters.\n- */\n-deprecated(\"This function is obsolete and will be removed May 2018. See the docs for more details\")\n+//@@@DEPRECATED_2.086@@@\n+deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n S squeeze(S)(S s, in S pattern = null)\n {\n     import std.utf : encode, stride;\n@@ -5456,24 +5400,8 @@ deprecated\n     });\n }\n \n-//@@@DEPRECATED_2018-05@@@\n-/***************************************************************\n- $(RED This function is deprecated and will be removed May 2018.)\n- Please use the functions in $(MREF std, regex) and $(MREF std, algorithm)\n- instead. If you still need this function, it will be available in\n- $(LINK2 https://github.com/dlang/undeaD, undeaD).\n-\n- Finds the position $(D_PARAM pos) of the first character in $(D_PARAM\n- s) that does not match $(D_PARAM pattern) (in the terminology used by\n- $(REF inPattern, std,string)). Updates $(D_PARAM s =\n- s[pos..$]). Returns the slice from the beginning of the original\n- (before update) string up to, and excluding, $(D_PARAM pos).\n-\n-The $(D_PARAM munch) function is mostly convenient for skipping\n-certain category of characters (e.g. whitespace) when parsing\n-strings. (In such cases, the return value is not used.)\n- */\n-deprecated(\"This function is obsolete and will be removed May 2018. See the docs for more details\")\n+//@@@DEPRECATED_2.086@@@\n+deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n S1 munch(S1, S2)(ref S1 s, S2 pattern) @safe pure @nogc\n {\n     size_t j = s.length;"}, {"sha": "beb4d8fc4a3c676e0aabbfaa1507682c18142128", "filename": "libphobos/src/std/utf.d", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Futf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa27ed0884b23d37f2f0b7ee2edd427664aa557/libphobos%2Fsrc%2Fstd%2Futf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Futf.d?ref=9fa27ed0884b23d37f2f0b7ee2edd427664aa557", "patch": "@@ -2699,14 +2699,6 @@ if (isSomeString!S)\n     }());\n }\n \n-//@@@DEPRECATED_2017-10@@@\n-deprecated(\"To be removed November 2017. Please use std.utf.encode instead.\")\n-char[] toUTF8(return out char[4] buf, dchar c) nothrow @nogc @safe pure\n-{\n-    const sz = encode!(Yes.useReplacementDchar)(buf, c);\n-    return buf[0 .. sz];\n-}\n-\n /**\n  * Encodes the elements of `s` to UTF-8 and returns a newly allocated\n  * string of the elements.\n@@ -2748,14 +2740,6 @@ if (isInputRange!S && !isInfinite!S && isSomeChar!(ElementEncodingType!S))\n     assert(r2.toUTF8.equal([0xF0, 0x90, 0x90, 0xB7]));\n }\n \n-//@@@DEPRECATED_2017-10@@@\n-deprecated(\"To be removed November 2017. Please use std.utf.encode instead.\")\n-wchar[] toUTF16(return ref wchar[2] buf, dchar c) nothrow @nogc @safe pure\n-{\n-    const sz = encode!(Yes.useReplacementDchar)(buf, c);\n-    return buf[0 .. sz];\n-}\n-\n /**\n  * Encodes the elements of `s` to UTF-16 and returns a newly GC allocated\n  * `wstring` of the elements."}]}