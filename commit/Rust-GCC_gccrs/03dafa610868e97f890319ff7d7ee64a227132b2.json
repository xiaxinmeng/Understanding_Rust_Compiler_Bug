{"sha": "03dafa610868e97f890319ff7d7ee64a227132b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNkYWZhNjEwODY4ZTk3Zjg5MDMxOWZmN2Q3ZWU2NGEyMjcxMzJiMg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-10-06T22:16:29Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-10-06T22:16:29Z"}, "message": "c-typeck.c (convert_arguments): Take expression for called function rather than its name.\n\n\t* c-typeck.c (convert_arguments): Take expression for called\n\tfunction rather than its name.  Handle ObjC selectors directly\n\trather than relying on warn_for_assignment to do so.  Call warning\n\tdirectly rather than warn_for_assignment.  Use %qE in diagnostics.\n\tSay \"argument\" rather than \"arg\" in diagnostics.\n\t(build_function_call): Update call to convert_arguments.\n\ntestsuite:\n\t* gcc.dg/Wconversion-2.c, gcc.dg/func-args-1.c: New tests.\n\nFrom-SVN: r88630", "tree": {"sha": "ff95ee85f5ed2d17d86ce971abc3122aa4733e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff95ee85f5ed2d17d86ce971abc3122aa4733e9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03dafa610868e97f890319ff7d7ee64a227132b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03dafa610868e97f890319ff7d7ee64a227132b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03dafa610868e97f890319ff7d7ee64a227132b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03dafa610868e97f890319ff7d7ee64a227132b2/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75917fc03241362a4e81490273c6d4c445183817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75917fc03241362a4e81490273c6d4c445183817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75917fc03241362a4e81490273c6d4c445183817"}], "stats": {"total": 212, "additions": 185, "deletions": 27}, "files": [{"sha": "d05f93d0ab5c1bd965b9d1daffd1e911c61fe35d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03dafa610868e97f890319ff7d7ee64a227132b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03dafa610868e97f890319ff7d7ee64a227132b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03dafa610868e97f890319ff7d7ee64a227132b2", "patch": "@@ -1,3 +1,12 @@\n+2004-10-06  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-typeck.c (convert_arguments): Take expression for called\n+\tfunction rather than its name.  Handle ObjC selectors directly\n+\trather than relying on warn_for_assignment to do so.  Call warning\n+\tdirectly rather than warn_for_assignment.  Use %qE in diagnostics.\n+\tSay \"argument\" rather than \"arg\" in diagnostics.\n+\t(build_function_call): Update call to convert_arguments.\n+\n 2004-10-06  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR debug/17787"}, {"sha": "6d7723394c9215ceaf562ee3a0ca287666db65d8", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 55, "deletions": 27, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03dafa610868e97f890319ff7d7ee64a227132b2/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03dafa610868e97f890319ff7d7ee64a227132b2/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=03dafa610868e97f890319ff7d7ee64a227132b2", "patch": "@@ -1976,7 +1976,7 @@ build_function_call (tree function, tree params)\n      function prototype, or apply default promotions.  */\n \n   coerced_params\n-    = convert_arguments (TYPE_ARG_TYPES (fntype), params, name, fundecl);\n+    = convert_arguments (TYPE_ARG_TYPES (fntype), params, function, fundecl);\n \n   /* Check that the arguments to the function are valid.  */\n \n@@ -2014,19 +2014,34 @@ build_function_call (tree function, tree params)\n    It may be 0, if that info is not available.\n    It is used only for generating error messages.\n \n-   NAME is an IDENTIFIER_NODE or 0.  It is used only for error messages.\n+   FUNCTION is a tree for the called function.  It is used only for\n+   error messages, where it is formatted with %qE.\n \n    This is also where warnings about wrong number of args are generated.\n \n    Both VALUES and the returned value are chains of TREE_LIST nodes\n    with the elements of the list in the TREE_VALUE slots of those nodes.  */\n \n static tree\n-convert_arguments (tree typelist, tree values, tree name, tree fundecl)\n+convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n {\n   tree typetail, valtail;\n   tree result = NULL;\n   int parmnum;\n+  tree selector;\n+  tree name = NULL_TREE;\n+\n+  /* Determine the function name for the use of convert_for_assignment\n+     and warn_for_assignment called from there.  */\n+  if (TREE_CODE (function) == ADDR_EXPR\n+      && TREE_CODE (TREE_OPERAND (function, 0)) == FUNCTION_DECL)\n+    {\n+      function = TREE_OPERAND (function, 0);\n+      name = DECL_NAME (function);\n+    }\n+\n+  /* Handle an ObjC selector specially for diagnostics.  */\n+  selector = objc_message_selector ();\n \n   /* Scan the given expressions and types, producing individual\n      converted arguments and pushing them on RESULT in reverse order.  */\n@@ -2037,17 +2052,21 @@ convert_arguments (tree typelist, tree values, tree name, tree fundecl)\n     {\n       tree type = typetail ? TREE_VALUE (typetail) : 0;\n       tree val = TREE_VALUE (valtail);\n+      tree rname = function;\n+      int argnum = parmnum + 1;\n \n       if (type == void_type_node)\n \t{\n-\t  if (name)\n-\t    error (\"too many arguments to function %qs\",\n-\t\t   IDENTIFIER_POINTER (name));\n-\t  else\n-\t    error (\"too many arguments to function\");\n+\t  error (\"too many arguments to function %qE\", function);\n \t  break;\n \t}\n \n+      if (selector && argnum > 2)\n+\t{\n+\t  rname = selector;\n+\t  argnum -= 2;\n+\t}\n+\n       /* Strip NON_LVALUE_EXPRs since we aren't using as an lvalue.  */\n       /* Do not use STRIP_NOPS here!  We do not want an enumerator with value 0\n \t to convert automatically to a pointer.  */\n@@ -2078,22 +2097,34 @@ convert_arguments (tree typelist, tree values, tree name, tree fundecl)\n \n \t\t  if (INTEGRAL_TYPE_P (type)\n \t\t      && TREE_CODE (TREE_TYPE (val)) == REAL_TYPE)\n-\t\t    warn_for_assignment (\"%s as integer rather than floating due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t    warning (\"passing argument %d of %qE as integer \"\n+\t\t\t     \"rather than floating due to prototype\",\n+\t\t\t     argnum, rname);\n \t\t  if (INTEGRAL_TYPE_P (type)\n \t\t      && TREE_CODE (TREE_TYPE (val)) == COMPLEX_TYPE)\n-\t\t    warn_for_assignment (\"%s as integer rather than complex due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t    warning (\"passing argument %d of %qE as integer \"\n+\t\t\t     \"rather than complex due to prototype\",\n+\t\t\t     argnum, rname);\n \t\t  else if (TREE_CODE (type) == COMPLEX_TYPE\n \t\t\t   && TREE_CODE (TREE_TYPE (val)) == REAL_TYPE)\n-\t\t    warn_for_assignment (\"%s as complex rather than floating due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t    warning (\"passing argument %d of %qE as complex \"\n+\t\t\t     \"rather than floating due to prototype\",\n+\t\t\t     argnum, rname);\n \t\t  else if (TREE_CODE (type) == REAL_TYPE\n \t\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (val)))\n-\t\t    warn_for_assignment (\"%s as floating rather than integer due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t    warning (\"passing argument %d of %qE as floating \"\n+\t\t\t     \"rather than integer due to prototype\",\n+\t\t\t     argnum, rname);\n \t\t  else if (TREE_CODE (type) == COMPLEX_TYPE\n \t\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (val)))\n-\t\t    warn_for_assignment (\"%s as complex rather than integer due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t    warning (\"passing argument %d of %qE as complex \"\n+\t\t\t     \"rather than integer due to prototype\",\n+\t\t\t     argnum, rname);\n \t\t  else if (TREE_CODE (type) == REAL_TYPE\n \t\t\t   && TREE_CODE (TREE_TYPE (val)) == COMPLEX_TYPE)\n-\t\t    warn_for_assignment (\"%s as floating rather than complex due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t    warning (\"passing argument %d of %qE as floating \"\n+\t\t\t     \"rather than complex due to prototype\",\n+\t\t\t     argnum, rname);\n \t\t  /* ??? At some point, messages should be written about\n \t\t     conversions between complex types, but that's too messy\n \t\t     to do now.  */\n@@ -2103,9 +2134,9 @@ convert_arguments (tree typelist, tree values, tree name, tree fundecl)\n \t\t      /* Warn if any argument is passed as `float',\n \t\t\t since without a prototype it would be `double'.  */\n \t\t      if (formal_prec == TYPE_PRECISION (float_type_node))\n-\t\t\twarn_for_assignment (\"%s as %<float%> rather than \"\n-\t\t\t\t\t     \"%<double%> due to prototype\",\n-\t\t\t\t\t     (char *) 0, name, parmnum + 1);\n+\t\t\twarning (\"passing argument %d of %qE as %<float%> \"\n+\t\t\t\t \"rather than %<double%> due to prototype\",\n+\t\t\t\t argnum, rname);\n \t\t    }\n \t\t  /* Detect integer changing in width or signedness.\n \t\t     These warnings are only activated with\n@@ -2123,7 +2154,8 @@ convert_arguments (tree typelist, tree values, tree name, tree fundecl)\n \t\t\t   and the actual arg is that enum type.  */\n \t\t\t;\n \t\t      else if (formal_prec != TYPE_PRECISION (type1))\n-\t\t\twarn_for_assignment (\"%s with different width due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t\twarning (\"passing argument %d of %qE with different \"\n+\t\t\t\t \"width due to prototype\", argnum, rname);\n \t\t      else if (TYPE_UNSIGNED (type) == TYPE_UNSIGNED (type1))\n \t\t\t;\n \t\t      /* Don't complain if the formal parameter type\n@@ -2149,9 +2181,11 @@ convert_arguments (tree typelist, tree values, tree name, tree fundecl)\n \t\t\t       && TYPE_UNSIGNED (TREE_TYPE (val)))\n \t\t\t;\n \t\t      else if (TYPE_UNSIGNED (type))\n-\t\t\twarn_for_assignment (\"%s as unsigned due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t\twarning (\"passing argument %d of %qE as unsigned \"\n+\t\t\t\t \"due to prototype\", argnum, rname);\n \t\t      else\n-\t\t\twarn_for_assignment (\"%s as signed due to prototype\", (char *) 0, name, parmnum + 1);\n+\t\t\twarning (\"passing argument %d of %qE as signed \"\n+\t\t\t\t \"due to prototype\", argnum, rname);\n \t\t    }\n \t\t}\n \n@@ -2180,13 +2214,7 @@ convert_arguments (tree typelist, tree values, tree name, tree fundecl)\n     }\n \n   if (typetail != 0 && TREE_VALUE (typetail) != void_type_node)\n-    {\n-      if (name)\n-\terror (\"too few arguments to function %qs\",\n-\t       IDENTIFIER_POINTER (name));\n-      else\n-\terror (\"too few arguments to function\");\n-    }\n+    error (\"too few arguments to function %qE\", function);\n \n   return nreverse (result);\n }"}, {"sha": "b867e20e0f86c573c5b60c02a8912e15017bfae6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03dafa610868e97f890319ff7d7ee64a227132b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03dafa610868e97f890319ff7d7ee64a227132b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03dafa610868e97f890319ff7d7ee64a227132b2", "patch": "@@ -1,3 +1,7 @@\n+2004-10-06  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/Wconversion-2.c, gcc.dg/func-args-1.c: New tests.\n+\n 2004-10-06  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/17368"}, {"sha": "320f41f01201427b722703ff2ae3eda82916cc92", "filename": "gcc/testsuite/gcc.dg/Wconversion-2.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03dafa610868e97f890319ff7d7ee64a227132b2/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03dafa610868e97f890319ff7d7ee64a227132b2/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-2.c?ref=03dafa610868e97f890319ff7d7ee64a227132b2", "patch": "@@ -0,0 +1,64 @@\n+/* Test messages for -Wconversion, including that they are not\n+   pedwarns.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors -Wconversion\" } */\n+\n+void fsc(signed char);\n+void fsi(signed int);\n+void fsll(signed long long);\n+void fuc(unsigned char);\n+void fui(unsigned int);\n+void full(unsigned long long);\n+void ff(float);\n+void fld(long double);\n+void fcf(_Complex float);\n+\n+struct s {\n+  void (*fsc)(signed char);\n+  void (*fsi)(signed int);\n+  void (*fsll)(signed long long);\n+  void (*fuc)(unsigned char);\n+  void (*fui)(unsigned int);\n+  void (*full)(unsigned long long);\n+  void (*ff)(float);\n+  void (*fld)(long double);\n+  void (*fcf)(_Complex float);\n+} x;\n+\n+signed char sc;\n+signed int si;\n+signed long long sll;\n+unsigned char uc;\n+unsigned int ui;\n+unsigned long long ull;\n+float f;\n+long double ld;\n+_Complex float cf;\n+\n+void\n+g (void)\n+{\n+  fsi(f); /* { dg-warning \"warning: passing argument 1 of 'fsi' as integer rather than floating due to prototype\" } */\n+  x.fsi(f); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as integer rather than floating due to prototype\" } */\n+  fsi(cf); /* { dg-warning \"warning: passing argument 1 of 'fsi' as integer rather than complex due to prototype\" } */\n+  x.fsi(cf); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as integer rather than complex due to prototype\" } */\n+  fcf(f); /* { dg-warning \"warning: passing argument 1 of 'fcf' as complex rather than floating due to prototype\" } */\n+  x.fcf(f); /* { dg-warning \"warning: passing argument 1 of 'x.fcf' as complex rather than floating due to prototype\" } */\n+  fcf(si); /* { dg-warning \"warning: passing argument 1 of 'fcf' as complex rather than integer due to prototype\" } */\n+  x.fcf(si); /* { dg-warning \"warning: passing argument 1 of 'x.fcf' as complex rather than integer due to prototype\" } */\n+  ff(sc); /* { dg-warning \"warning: passing argument 1 of 'ff' as floating rather than integer due to prototype\" } */\n+  x.ff(sc); /* { dg-warning \"warning: passing argument 1 of 'x.ff' as floating rather than integer due to prototype\" } */\n+  ff(cf); /* { dg-warning \"warning: passing argument 1 of 'ff' as floating rather than complex due to prototype\" } */\n+  x.ff(cf); /* { dg-warning \"warning: passing argument 1 of 'x.ff' as floating rather than complex due to prototype\" } */\n+  ff(1.0); /* { dg-warning \"warning: passing argument 1 of 'ff' as 'float' rather than 'double' due to prototype\" } */\n+  x.ff(1.0); /* { dg-warning \"warning: passing argument 1 of 'x.ff' as 'float' rather than 'double' due to prototype\" } */\n+  fsll(sc); /* { dg-warning \"warning: passing argument 1 of 'fsll' with different width due to prototype\" } */\n+  x.fsll(sc); /* { dg-warning \"warning: passing argument 1 of 'x.fsll' with different width due to prototype\" } */\n+  fsc(sll); /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" } */\n+  x.fsc(sll); /* { dg-warning \"warning: passing argument 1 of 'x.fsc' with different width due to prototype\" } */\n+  fsi(ui); /* { dg-warning \"warning: passing argument 1 of 'fsi' as signed due to prototype\" } */\n+  x.fsi(ui); /* { dg-warning \"warning: passing argument 1 of 'x.fsi' as signed due to prototype\" } */\n+  full(sll); /* { dg-warning \"warning: passing argument 1 of 'full' as unsigned due to prototype\" } */\n+  x.full(sll); /* { dg-warning \"warning: passing argument 1 of 'x.full' as unsigned due to prototype\" } */\n+}"}, {"sha": "306a5dfa04dc66e96b0518cda7fe19f99d40f346", "filename": "gcc/testsuite/gcc.dg/func-args-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03dafa610868e97f890319ff7d7ee64a227132b2/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-args-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03dafa610868e97f890319ff7d7ee64a227132b2/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-args-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffunc-args-1.c?ref=03dafa610868e97f890319ff7d7ee64a227132b2", "patch": "@@ -0,0 +1,53 @@\n+/* Test messages for wrong number of arguments to function.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void f0(void);\n+void f1(int);\n+void f1v(int, ...);\n+void f2(int, int);\n+void f2v(int, int, ...);\n+\n+struct s {\n+  void (*f0)(void);\n+  void (*f1)(int);\n+  void (*f1v)(int, ...);\n+  void (*f2)(int, int);\n+  void (*f2v)(int, int, ...);\n+} x;\n+\n+void\n+g (int a)\n+{\n+  f0();\n+  x.f0();\n+  f0(a); /* { dg-error \"error: too many arguments to function 'f0'\" } */\n+  x.f0(a); /* { dg-error \"error: too many arguments to function 'x.f0'\" } */\n+  f0(a, a); /* { dg-error \"error: too many arguments to function 'f0'\" } */\n+  x.f0(a, a); /* { dg-error \"error: too many arguments to function 'x.f0'\" } */\n+  f1(); /* { dg-error \"error: too few arguments to function 'f1'\" } */\n+  x.f1(); /* { dg-error \"error: too few arguments to function 'x.f1'\" } */\n+  f1(a);\n+  x.f1(a);\n+  f1(a, a); /* { dg-error \"error: too many arguments to function 'f1'\" } */\n+  x.f1(a, a); /* { dg-error \"error: too many arguments to function 'x.f1'\" } */\n+  f1v(); /* { dg-error \"error: too few arguments to function 'f1v'\" } */\n+  x.f1v(); /* { dg-error \"error: too few arguments to function 'x.f1v'\" } */\n+  f1v(a);\n+  x.f1v(a);\n+  f1v(a, a);\n+  x.f1v(a, a);\n+  f2(a); /* { dg-error \"error: too few arguments to function 'f2'\" } */\n+  x.f2(a); /* { dg-error \"error: too few arguments to function 'x.f2'\" } */\n+  f2(a, a);\n+  x.f2(a, a);\n+  f2(a, a, a); /* { dg-error \"error: too many arguments to function 'f2'\" } */\n+  x.f2(a, a, a); /* { dg-error \"error: too many arguments to function 'x.f2'\" } */\n+  f2v(a); /* { dg-error \"error: too few arguments to function 'f2v'\" } */\n+  x.f2v(a); /* { dg-error \"error: too few arguments to function 'x.f2v'\" } */\n+  f2v(a, a);\n+  x.f2v(a, a);\n+  f2v(a, a, a);\n+  x.f2v(a, a, a);\n+}"}]}