{"sha": "2918ed3c3e043a75246fe6a2476f75d954a0ac2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkxOGVkM2MzZTA0M2E3NTI0NmZlNmEyNDc2Zjc1ZDk1NGEwYWMyZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-22T20:04:27Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-22T20:04:27Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r568", "tree": {"sha": "479eeb877f644e8dd6b83f485ce576d3bf1ec6d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/479eeb877f644e8dd6b83f485ce576d3bf1ec6d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2918ed3c3e043a75246fe6a2476f75d954a0ac2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2918ed3c3e043a75246fe6a2476f75d954a0ac2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2918ed3c3e043a75246fe6a2476f75d954a0ac2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2918ed3c3e043a75246fe6a2476f75d954a0ac2f/comments", "author": null, "committer": null, "parents": [{"sha": "bd0725f32ba21999f0d39cde6d35b6b9e7f881f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0725f32ba21999f0d39cde6d35b6b9e7f881f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd0725f32ba21999f0d39cde6d35b6b9e7f881f3"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "edacf2c51686874f0042987b99dc3cb524d69abe", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2918ed3c3e043a75246fe6a2476f75d954a0ac2f/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2918ed3c3e043a75246fe6a2476f75d954a0ac2f/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=2918ed3c3e043a75246fe6a2476f75d954a0ac2f", "patch": "@@ -3666,7 +3666,10 @@ build_c_cast (type, expr)\n \n       if (TREE_CODE (type) == POINTER_TYPE\n \t  && TREE_CODE (otype) == INTEGER_TYPE\n-\t  && TYPE_PRECISION (type) != TYPE_PRECISION (otype))\n+\t  && TYPE_PRECISION (type) != TYPE_PRECISION (otype)\n+\t  /* Don't warn about converting 0 to pointer,\n+\t     provided the 0 was explicit--not cast or made by folding.  */\n+\t  && !(TREE_CODE (value) == INTEGER_CST && integer_zerop (value)))\n \twarning (\"cast to pointer from integer of different size\");\n \n       value = convert (type, value);\n@@ -3953,7 +3956,9 @@ convert_for_assignment (type, rhs, errtype, funname, parmnum)\n     }\n   else if (codel == POINTER_TYPE && coder == INTEGER_TYPE)\n     {\n-      if (! integer_zerop (rhs))\n+      /* An explicit constant 0 can convert to a pointer,\n+\t but not a 0 that results from casting or folding.  */\n+      if (! (TREE_CODE (rhs) == INTEGER_CST && integer_zerop (rhs)))\n \t{\n \t  warn_for_assignment (\"%s makes pointer from integer without a cast\",\n \t\t\t       get_spelling (errtype), funname, parmnum);"}]}