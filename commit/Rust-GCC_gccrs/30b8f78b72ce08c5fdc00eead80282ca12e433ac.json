{"sha": "30b8f78b72ce08c5fdc00eead80282ca12e433ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBiOGY3OGI3MmNlMDhjNWZkYzAwZWVhZDgwMjgyY2ExMmU0MzNhYw==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2013-11-27T12:17:05Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2013-11-27T12:17:05Z"}, "message": "tm.texi.in (TARGET_HAS_NO_HW_DIVIDE): Define.\n\n2013-11-27  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tgcc/\n\t* doc/tm.texi.in (TARGET_HAS_NO_HW_DIVIDE): Define.\n\t* doc/tm.texi (TARGET_HAS_NO_HW_DIVIDE): Regenerate.\n\n\tlibgcc/\n\t* libgcc2.c (__udivmoddi4): Define new implementation when\n\tTARGET_HAS_NO_HW_DIVIDE is defined, for processors without any\n\tdivide instructions.\n\nFrom-SVN: r205444", "tree": {"sha": "2bce9a61019a73e1ac15aec945ce47ae5c2c3b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bce9a61019a73e1ac15aec945ce47ae5c2c3b72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30b8f78b72ce08c5fdc00eead80282ca12e433ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b8f78b72ce08c5fdc00eead80282ca12e433ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b8f78b72ce08c5fdc00eead80282ca12e433ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b8f78b72ce08c5fdc00eead80282ca12e433ac/comments", "author": null, "committer": null, "parents": [{"sha": "536da97c4eaa6ac7b8a65205dafd23c904395a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536da97c4eaa6ac7b8a65205dafd23c904395a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/536da97c4eaa6ac7b8a65205dafd23c904395a39"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "15ce5e698f26dc3eb2e1318805650f503bdf7cc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b8f78b72ce08c5fdc00eead80282ca12e433ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b8f78b72ce08c5fdc00eead80282ca12e433ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30b8f78b72ce08c5fdc00eead80282ca12e433ac", "patch": "@@ -1,3 +1,8 @@\n+2013-11-27  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* doc/tm.texi.in (TARGET_HAS_NO_HW_DIVIDE): Define.\n+\t* doc/tm.texi (TARGET_HAS_NO_HW_DIVIDE): Regenerate.\n+\n 2013-11-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/59306"}, {"sha": "68b59b9975b0bed4288cb014176f38db0ef1376f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b8f78b72ce08c5fdc00eead80282ca12e433ac/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b8f78b72ce08c5fdc00eead80282ca12e433ac/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=30b8f78b72ce08c5fdc00eead80282ca12e433ac", "patch": "@@ -5365,6 +5365,14 @@ If this macro evaluates to @code{false} the comparison functions return\n in @file{libgcc.a}, you do not need to define this macro.\n @end defmac\n \n+@defmac TARGET_HAS_NO_HW_DIVIDE\n+This macro should be defined if the target has no hardware divide\n+instructions.  If this macro is defined, GCC will use an algorithm which\n+make use of simple logical and arithmetic operations for 64-bit\n+division.  If the macro is not defined, GCC will use an algorithm which\n+make use of a 64-bit by 32-bit divide primitive.\n+@end defmac\n+\n @cindex @code{EDOM}, implicit usage\n @findex matherr\n @defmac TARGET_EDOM"}, {"sha": "1bb3806c5df4499a22c4be0154e568778425bf61", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b8f78b72ce08c5fdc00eead80282ca12e433ac/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b8f78b72ce08c5fdc00eead80282ca12e433ac/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=30b8f78b72ce08c5fdc00eead80282ca12e433ac", "patch": "@@ -4205,6 +4205,14 @@ If this macro evaluates to @code{false} the comparison functions return\n in @file{libgcc.a}, you do not need to define this macro.\n @end defmac\n \n+@defmac TARGET_HAS_NO_HW_DIVIDE\n+This macro should be defined if the target has no hardware divide\n+instructions.  If this macro is defined, GCC will use an algorithm which\n+make use of simple logical and arithmetic operations for 64-bit\n+division.  If the macro is not defined, GCC will use an algorithm which\n+make use of a 64-bit by 32-bit divide primitive.\n+@end defmac\n+\n @cindex @code{EDOM}, implicit usage\n @findex matherr\n @defmac TARGET_EDOM"}, {"sha": "7e7aa4a40d1a84fd2620d23a685a799191fb79ad", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b8f78b72ce08c5fdc00eead80282ca12e433ac/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b8f78b72ce08c5fdc00eead80282ca12e433ac/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=30b8f78b72ce08c5fdc00eead80282ca12e433ac", "patch": "@@ -1,3 +1,9 @@\n+2013-11-27  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* libgcc2.c (__udivmoddi4): Define new implementation when\n+\tTARGET_HAS_NO_HW_DIVIDE is defined, for processors without any\n+\tdivide instructions.\n+\n 2013-11-25  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/crt1.S (start): Don't do VBR_SETUP for SH2E."}, {"sha": "8c4cc6a316c7d1e95a113d6b5da5e6eaf73b053b", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b8f78b72ce08c5fdc00eead80282ca12e433ac/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b8f78b72ce08c5fdc00eead80282ca12e433ac/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=30b8f78b72ce08c5fdc00eead80282ca12e433ac", "patch": "@@ -934,6 +934,74 @@ __parityDI2 (UDWtype x)\n #endif\n \n #ifdef L_udivmoddi4\n+#ifdef TARGET_HAS_NO_HW_DIVIDE\n+\n+#if (defined (L_udivdi3) || defined (L_divdi3) || \\\n+     defined (L_umoddi3) || defined (L_moddi3))\n+static inline __attribute__ ((__always_inline__))\n+#endif\n+UDWtype\n+__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)\n+{\n+  UDWtype q = 0, r = n, y = d;\n+  UWtype lz1, lz2, i, k;\n+\n+  /* Implements align divisor shift dividend method. This algorithm\n+     aligns the divisor under the dividend and then perform number of\n+     test-subtract iterations which shift the dividend left. Number of\n+     iterations is k + 1 where k is the number of bit positions the\n+     divisor must be shifted left  to align it under the dividend.\n+     quotient bits can be saved in the rightmost positions of the dividend\n+     as it shifts left on each test-subtract iteration. */\n+\n+  if (y <= r)\n+    {\n+      lz1 = __builtin_clzll (d);\n+      lz2 = __builtin_clzll (n);\n+\n+      k = lz1 - lz2;\n+      y = (y << k);\n+\n+      /* Dividend can exceed 2 ^ (width \u2212 1) \u2212 1 but still be less than the\n+\t aligned divisor. Normal iteration can drops the high order bit\n+\t of the dividend. Therefore, first test-subtract iteration is a\n+\t special case, saving its quotient bit in a separate location and\n+\t not shifting the dividend. */\n+      if (r >= y)\n+\t{\n+\t  r = r - y;\n+\t  q =  (1ULL << k);\n+\t}\n+\n+      if (k > 0)\n+\t{\n+\t  y = y >> 1;\n+\n+\t  /* k additional iterations where k regular test subtract shift\n+\t    dividend iterations are done.  */\n+\t  i = k;\n+\t  do\n+\t    {\n+\t      if (r >= y)\n+\t\tr = ((r - y) << 1) + 1;\n+\t      else\n+\t\tr =  (r << 1);\n+\t      i = i - 1;\n+\t    } while (i != 0);\n+\n+\t  /* First quotient bit is combined with the quotient bits resulting\n+\t     from the k regular iterations.  */\n+\t  q = q + r;\n+\t  r = r >> k;\n+\t  q = q - (r << k);\n+\t}\n+    }\n+\n+  if (rp)\n+    *rp = r;\n+  return q;\n+}\n+#else\n \n #if (defined (L_udivdi3) || defined (L_divdi3) || \\\n      defined (L_umoddi3) || defined (L_moddi3))\n@@ -1152,6 +1220,7 @@ __udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)\n   return ww.ll;\n }\n #endif\n+#endif\n \n #ifdef L_divdi3\n DWtype"}]}