{"sha": "1ebecb64eb45321aaa2f0be64813509506972de8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWViZWNiNjRlYjQ1MzIxYWFhMmYwYmU2NDgxMzUwOTUwNjk3MmRlOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-11T07:02:42Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-11T07:02:42Z"}, "message": "(regno_last_note_uid): New vector.\n\n(reg_scan): Initialize regno_last_note_uid.\nCall reg_scan_mark_refs for the notes.  Pass its new arg.\n(reg_scan_mark_refs): New arg NOTE_FLAG.  Pass it recursively.\nSet regno_last_note_uid.\n\nFrom-SVN: r5729", "tree": {"sha": "2d6b689c52b46078d988aae8efc2d0c933ac1081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d6b689c52b46078d988aae8efc2d0c933ac1081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ebecb64eb45321aaa2f0be64813509506972de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebecb64eb45321aaa2f0be64813509506972de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ebecb64eb45321aaa2f0be64813509506972de8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebecb64eb45321aaa2f0be64813509506972de8/comments", "author": null, "committer": null, "parents": [{"sha": "2cb547d84fa3d23085631345ee852b1f60dea79b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb547d84fa3d23085631345ee852b1f60dea79b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cb547d84fa3d23085631345ee852b1f60dea79b"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "927c99a99d4ce59f7b08d958b01d36233ef9f698", "filename": "gcc/regclass.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebecb64eb45321aaa2f0be64813509506972de8/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebecb64eb45321aaa2f0be64813509506972de8/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=1ebecb64eb45321aaa2f0be64813509506972de8", "patch": "@@ -1482,6 +1482,11 @@ int *regno_first_uid;\n \n int *regno_last_uid;\n \n+/* Indexed by pseudo register number, gives uid of last insn using the reg\n+   or mentioning it in a note (as of the time reg_scan is called).  */\n+\n+int *regno_last_note_uid;\n+\n /* Record the number of registers we used when we allocated the above two\n    tables.  If we are called again with more than this, we must re-allocate\n    the tables.  */\n@@ -1512,12 +1517,15 @@ reg_scan (f, nregs, repeat)\n \t= (int *) oballoc (highest_regno_in_uid_map * sizeof (int));\n       regno_last_uid\n \t= (int *) oballoc (highest_regno_in_uid_map * sizeof (int));\n+      regno_last_note_uid\n+\t= (int *) oballoc (highest_regno_in_uid_map * sizeof (int));\n       reg_n_sets\n \t= (short *) oballoc (highest_regno_in_uid_map * sizeof (short));\n     }\n \n   bzero (regno_first_uid, highest_regno_in_uid_map * sizeof (int));\n   bzero (regno_last_uid, highest_regno_in_uid_map * sizeof (int));\n+  bzero (regno_last_note_uid, highest_regno_in_uid_map * sizeof (int));\n   bzero (reg_n_sets, highest_regno_in_uid_map * sizeof (short));\n \n   max_parallel = 3;\n@@ -1530,14 +1538,19 @@ reg_scan (f, nregs, repeat)\n \tif (GET_CODE (PATTERN (insn)) == PARALLEL\n \t    && XVECLEN (PATTERN (insn), 0) > max_parallel)\n \t  max_parallel = XVECLEN (PATTERN (insn), 0);\n-\treg_scan_mark_refs (PATTERN (insn), insn);\n+\treg_scan_mark_refs (PATTERN (insn), insn, 0);\n+\treg_scan_mark_refs (REG_NOTES (insn), insn, 1);\n       }\n }\n \n+/* X is the expression to scan.  INSN is the insn it appears in.\n+   NOTE_FLAG is nonzero if X is from INSN's notes rather than its body.  */\n+\n void\n-reg_scan_mark_refs (x, insn)\n+reg_scan_mark_refs (x, insn, note_flag)\n      rtx x;\n      rtx insn;\n+     int note_flag;\n {\n   register enum rtx_code code = GET_CODE (x);\n   register rtx dest;\n@@ -1560,7 +1573,9 @@ reg_scan_mark_refs (x, insn)\n       {\n \tregister int regno = REGNO (x);\n \n-\tregno_last_uid[regno] = INSN_UID (insn);\n+\tregno_last_note_uid[regno] = INSN_UID (insn);\n+\tif (!note_flag)\n+\t  regno_last_uid[regno] = INSN_UID (insn);\n \tif (regno_first_uid[regno] == 0)\n \t  regno_first_uid[regno] = INSN_UID (insn);\n       }\n@@ -1627,12 +1642,12 @@ reg_scan_mark_refs (x, insn)\n \tfor (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n \t  {\n \t    if (fmt[i] == 'e')\n-\t      reg_scan_mark_refs (XEXP (x, i), insn);\n+\t      reg_scan_mark_refs (XEXP (x, i), insn, note_flag);\n \t    else if (fmt[i] == 'E' && XVEC (x, i) != 0)\n \t      {\n \t\tregister int j;\n \t\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t\t  reg_scan_mark_refs (XVECEXP (x, i, j), insn);\n+\t\t  reg_scan_mark_refs (XVECEXP (x, i, j), insn, note_flag);\n \t      }\n \t  }\n       }"}]}