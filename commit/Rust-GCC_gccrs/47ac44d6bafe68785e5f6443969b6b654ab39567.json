{"sha": "47ac44d6bafe68785e5f6443969b6b654ab39567", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdhYzQ0ZDZiYWZlNjg3ODVlNWY2NDQzOTY5YjZiNjU0YWIzOTU2Nw==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2009-06-05T19:08:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-06-05T19:08:10Z"}, "message": "mips.c: Use REG_P and CONST_INT_P where applicable.\n\n2009-06-05  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\t* config/mips/mips.c: Use REG_P and CONST_INT_P where applicable.\n\t* config/mips/mips.md: Ditto.\n\nFrom-SVN: r148224", "tree": {"sha": "feb0f9a15a31137072334187c573068bf4b6d2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feb0f9a15a31137072334187c573068bf4b6d2c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47ac44d6bafe68785e5f6443969b6b654ab39567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ac44d6bafe68785e5f6443969b6b654ab39567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ac44d6bafe68785e5f6443969b6b654ab39567", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ac44d6bafe68785e5f6443969b6b654ab39567/comments", "author": null, "committer": null, "parents": [{"sha": "19b905ce29121de6335c9a90b3ef10c068ce0a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19b905ce29121de6335c9a90b3ef10c068ce0a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19b905ce29121de6335c9a90b3ef10c068ce0a66"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "7473556894996da236a43a8ab0f6c73fae0396bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ac44d6bafe68785e5f6443969b6b654ab39567/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ac44d6bafe68785e5f6443969b6b654ab39567/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47ac44d6bafe68785e5f6443969b6b654ab39567", "patch": "@@ -1,3 +1,8 @@\n+2009-06-05  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* config/mips/mips.c: Use REG_P and CONST_INT_P where applicable.\n+\t* config/mips/mips.md: Ditto.\n+\n 2009-06-05  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/rs6000/eabi.asm (__eabi_convert): Don't define if"}, {"sha": "44dd4508ca670f47d36932bbe9038fcc949f9cde", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ac44d6bafe68785e5f6443969b6b654ab39567/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ac44d6bafe68785e5f6443969b6b654ab39567/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=47ac44d6bafe68785e5f6443969b6b654ab39567", "patch": "@@ -1327,7 +1327,7 @@ mips_merge_decl_attributes (tree olddecl, tree newdecl)\n static void\n mips_split_plus (rtx x, rtx *base_ptr, HOST_WIDE_INT *offset_ptr)\n {\n-  if (GET_CODE (x) == PLUS && GET_CODE (XEXP (x, 1)) == CONST_INT)\n+  if (GET_CODE (x) == PLUS && CONST_INT_P (XEXP (x, 1)))\n     {\n       *base_ptr = XEXP (x, 0);\n       *offset_ptr = INTVAL (XEXP (x, 1));\n@@ -1921,7 +1921,7 @@ mips_cannot_force_const_mem (rtx x)\n      references, reload will consider forcing C into memory and using\n      one of the instruction's memory alternatives.  Returning false\n      here will force it to use an input reload instead.  */\n-  if (GET_CODE (x) == CONST_INT && LEGITIMATE_CONSTANT_P (x))\n+  if (CONST_INT_P (x) && LEGITIMATE_CONSTANT_P (x))\n     return true;\n \n   split_const (x, &base, &offset);\n@@ -2153,7 +2153,7 @@ mips_lwxs_address_p (rtx addr)\n       rtx offset = XEXP (addr, 0);\n       if (GET_CODE (offset) == MULT\n \t  && REG_P (XEXP (offset, 0))\n-\t  && GET_CODE (XEXP (offset, 1)) == CONST_INT\n+\t  && CONST_INT_P (XEXP (offset, 1))\n \t  && INTVAL (XEXP (offset, 1)) == 4)\n \treturn true;\n     }\n@@ -3068,7 +3068,7 @@ mips_rewrite_small_data (rtx pattern)\n static int\n m16_check_op (rtx op, int low, int high, int mask)\n {\n-  return (GET_CODE (op) == CONST_INT\n+  return (CONST_INT_P (op)\n \t  && IN_RANGE (INTVAL (op), low, high)\n \t  && (INTVAL (op) & mask) == 0);\n }\n@@ -4108,7 +4108,7 @@ mips_canonicalize_int_order_test (enum rtx_code *code, rtx *cmp1,\n   if (mips_int_order_operand_ok_p (*code, *cmp1))\n     return true;\n \n-  if (GET_CODE (*cmp1) == CONST_INT)\n+  if (CONST_INT_P (*cmp1))\n     switch (*code)\n       {\n       case LE:\n@@ -6439,7 +6439,7 @@ mips_block_move_loop (rtx dest, rtx src, HOST_WIDE_INT length,\n bool\n mips_expand_block_move (rtx dest, rtx src, rtx length)\n {\n-  if (GET_CODE (length) == CONST_INT)\n+  if (CONST_INT_P (length))\n     {\n       if (INTVAL (length) <= MIPS_MAX_MOVE_BYTES_STRAIGHT)\n \t{\n@@ -7194,28 +7194,28 @@ mips_print_operand (FILE *file, rtx op, int letter)\n   switch (letter)\n     {\n     case 'X':\n-      if (GET_CODE (op) == CONST_INT)\n+      if (CONST_INT_P (op))\n \tfprintf (file, HOST_WIDE_INT_PRINT_HEX, INTVAL (op));\n       else\n \toutput_operand_lossage (\"invalid use of '%%%c'\", letter);\n       break;\n \n     case 'x':\n-      if (GET_CODE (op) == CONST_INT)\n+      if (CONST_INT_P (op))\n \tfprintf (file, HOST_WIDE_INT_PRINT_HEX, INTVAL (op) & 0xffff);\n       else\n \toutput_operand_lossage (\"invalid use of '%%%c'\", letter);\n       break;\n \n     case 'd':\n-      if (GET_CODE (op) == CONST_INT)\n+      if (CONST_INT_P (op))\n \tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (op));\n       else\n \toutput_operand_lossage (\"invalid use of '%%%c'\", letter);\n       break;\n \n     case 'm':\n-      if (GET_CODE (op) == CONST_INT)\n+      if (CONST_INT_P (op))\n \tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (op) - 1);\n       else\n \toutput_operand_lossage (\"invalid use of '%%%c'\", letter);\n@@ -9398,7 +9398,7 @@ mips_emit_loadgp (void)\n static int\n mips_kernel_reg_p (rtx *x, void *data ATTRIBUTE_UNUSED)\n {\n-  return GET_CODE (*x) == REG && KERNEL_REG_P (REGNO (*x));\n+  return REG_P (*x) && KERNEL_REG_P (REGNO (*x));\n }\n \n /* Expand the \"prologue\" pattern.  */\n@@ -14710,7 +14710,7 @@ mips_epilogue_uses (unsigned int regno)\n static int\n mips_at_reg_p (rtx *x, void *data ATTRIBUTE_UNUSED)\n {\n-  return GET_CODE (*x) == REG && REGNO (*x) == AT_REGNUM;\n+  return REG_P (*x) && REGNO (*x) == AT_REGNUM;\n }\n \n "}, {"sha": "46e7afa9be5dd402379e5e7bbe310a55cc6296e2", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ac44d6bafe68785e5f6443969b6b654ab39567/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ac44d6bafe68785e5f6443969b6b654ab39567/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=47ac44d6bafe68785e5f6443969b6b654ab39567", "patch": "@@ -4837,7 +4837,7 @@\n      reload pass.  */\n   if (TARGET_MIPS16\n       && optimize\n-      && GET_CODE (operands[2]) == CONST_INT\n+      && CONST_INT_P (operands[2])\n       && INTVAL (operands[2]) > 8\n       && INTVAL (operands[2]) <= 16\n       && !reload_in_progress\n@@ -4858,7 +4858,7 @@\n \t\t       (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n   \"!TARGET_MIPS16\"\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     operands[2] = GEN_INT (INTVAL (operands[2])\n \t\t\t   & (GET_MODE_BITSIZE (<MODE>mode) - 1));\n \n@@ -4874,7 +4874,7 @@\n \t\t\t (match_operand:SI 2 \"arith_operand\" \"dI\"))))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n \n   return \"<insn>\\t%0,%1,%2\";\n@@ -4930,7 +4930,7 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n   \"TARGET_64BIT && TARGET_MIPS16\"\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x3f);\n \n   return \"dsra\\t%0,%2\";\n@@ -4949,7 +4949,7 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"d,I\")))]\n   \"TARGET_64BIT && TARGET_MIPS16\"\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x3f);\n \n   return \"dsrl\\t%0,%2\";\n@@ -5004,7 +5004,7 @@\n \t\t      (match_operand:SI 2 \"arith_operand\" \"dI\")))]\n   \"ISA_HAS_ROR\"\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     gcc_assert (INTVAL (operands[2]) >= 0\n \t\t&& INTVAL (operands[2]) < GET_MODE_BITSIZE (<MODE>mode));\n "}]}