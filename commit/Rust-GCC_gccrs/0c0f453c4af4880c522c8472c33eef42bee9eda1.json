{"sha": "0c0f453c4af4880c522c8472c33eef42bee9eda1", "node_id": "C_kwDOANBUbNoAKDBjMGY0NTNjNGFmNDg4MGM1MjJjODQ3MmMzM2VlZjQyYmVlOWVkYTE", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-01-26T22:29:19Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-01-27T13:18:43Z"}, "message": "c++: new-expr of array of deduced class tmpl [PR101988]\n\nIn r12-1933 I attempted to implement DR2397 aka allowing\n\n  int a[3];\n  auto (&r)[3] = a;\n\nby removing the type_uses_auto check in create_array_type_for_decl.\nThat may have gone too far, because it also allows arrays of\nCLASS_PLACEHOLDER_TEMPLATE and it looks like [dcl.type.class.deduct]\nprohibits that: \"...the declared type of the variable shall be cv T,\nwhere T is the placeholder.\"  However, in /2 it explicitly states that\n\"A placeholder for a deduced class type can also be used in the\ntype-specifier-seq in the new-type-id or type-id of a new-expression.\"\n\nIn this PR, it manifested by making us accept invalid\n\n  template<class T> struct A { A(T); };\n  auto p = new A[]{1};\n\n[expr.new]/2 says that such a construct is treated as an invented\ndeclaration of the form\n\n  A x[]{1};\n\nbut, I think, that ought to be ill-formed as per above.  So this patch\nsort of restores the create_array_type_for_decl check.  I should mention\nthat the difference between [] and [1] is due to cp_parser_new_type_id:\n\n      if (*nelts == NULL_TREE)\n        /* Leave [] in the declarator.  */;\n\nand groktypename returning different types based on that.\n\n\tPR c++/101988\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (create_array_type_for_decl): Reject forming an array of\n\tplaceholder for a deduced class type.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/class-deduction-new1.C: New test.\n\t* g++.dg/cpp23/auto-array2.C: New test.", "tree": {"sha": "c42601c3b1f5514fd17a1409d7238c6731a23ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c42601c3b1f5514fd17a1409d7238c6731a23ecb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c0f453c4af4880c522c8472c33eef42bee9eda1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0f453c4af4880c522c8472c33eef42bee9eda1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c0f453c4af4880c522c8472c33eef42bee9eda1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0f453c4af4880c522c8472c33eef42bee9eda1/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76ef38e3178a11e76a66b4d4c0e10e85fe186a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ef38e3178a11e76a66b4d4c0e10e85fe186a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ef38e3178a11e76a66b4d4c0e10e85fe186a45"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "10e6956117ec593419868213c42afee0a853b08f", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0f453c4af4880c522c8472c33eef42bee9eda1/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0f453c4af4880c522c8472c33eef42bee9eda1/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=0c0f453c4af4880c522c8472c33eef42bee9eda1", "patch": "@@ -11087,6 +11087,18 @@ create_array_type_for_decl (tree name, tree type, tree size, location_t loc)\n   if (type == error_mark_node || size == error_mark_node)\n     return error_mark_node;\n \n+  /* [dcl.type.class.deduct] prohibits forming an array of placeholder\n+     for a deduced class type.  */\n+  if (is_auto (type) && CLASS_PLACEHOLDER_TEMPLATE (type))\n+    {\n+      if (name)\n+\terror_at (loc, \"%qD declared as array of template placeholder \"\n+\t\t  \"type %qT\", name, type);\n+      else\n+\terror (\"creating array of template placeholder type %qT\", type);\n+      return error_mark_node;\n+    }\n+\n   /* If there are some types which cannot be array elements,\n      issue an error-message and return.  */\n   switch (TREE_CODE (type))"}, {"sha": "7028335361979624c7cc0daee02e5f71d5339bb8", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction-new1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0f453c4af4880c522c8472c33eef42bee9eda1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-new1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0f453c4af4880c522c8472c33eef42bee9eda1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-new1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-new1.C?ref=0c0f453c4af4880c522c8472c33eef42bee9eda1", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/101988\n+// { dg-do compile { target c++17 } }\n+\n+template<typename T>\n+struct A {\n+  A(T);\n+  A();\n+};\n+auto p1 = new A[]{1}; // { dg-error \"creating array of template placeholder type\" }\n+auto p2 = new A[1]{1}; // { dg-error \"invalid use of placeholder\" }\n+auto p3 = new A<int>[]{1};\n+auto p4 = new A<int>[1]{1};\n+auto p5 = new A[]{1, 2}; // { dg-error \"creating array of template placeholder type\" }\n+auto p6 = new A<int>[]{1, 2};\n+auto p7 = new A<int>[]{A(1), A(1)};\n+auto p8 = new A<int>[2]{A(1), A(1)};"}, {"sha": "06431685b30f218bedced34e44c5ec192f4547bc", "filename": "gcc/testsuite/g++.dg/cpp23/auto-array2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0f453c4af4880c522c8472c33eef42bee9eda1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0f453c4af4880c522c8472c33eef42bee9eda1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fauto-array2.C?ref=0c0f453c4af4880c522c8472c33eef42bee9eda1", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/101988\n+// { dg-do compile { target c++17 } }\n+\n+template<class T> struct A { A(); };\n+A<int> a[3];\n+auto (*p)[3] = &a;\n+A<int> (*p2)[3] = &a;\n+A (*p3)[3] = &a; // { dg-error \"template placeholder type\" }\n+auto (&r)[3] = a;\n+A<int> (&r2)[3] = a;\n+A (&r3)[3] = a; // { dg-error \"template placeholder type\" }"}]}