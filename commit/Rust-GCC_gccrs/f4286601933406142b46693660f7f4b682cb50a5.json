{"sha": "f4286601933406142b46693660f7f4b682cb50a5", "node_id": "C_kwDOANBUbNoAKGY0Mjg2NjAxOTMzNDA2MTQyYjQ2NjkzNjYwZjdmNGI2ODJjYjUwYTU", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-07-26T02:29:14Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-07-26T02:29:14Z"}, "message": "rs6000: Preserve REG_EH_REGION when replacing load/store [PR106091]\n\nAs test case in PR106091 shows, rs6000 specific pass swaps\ndoesn't preserve the reg_note REG_EH_REGION when replacing\nsome load insn at the end of basic block, it causes the\nflow info verification to fail unexpectedly.  Since memory\nreference rtx may trap, this patch is to ensure we copy\nREG_EH_REGION reg_note while replacing swapped aligned load\nor store.\n\n\tPR target/106091\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000-p8swap.cc (replace_swapped_aligned_store): Copy\n\tREG_EH_REGION when replacing one store insn having it.\n\t(replace_swapped_aligned_load): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr106091.c: New test.", "tree": {"sha": "d72e3b4c06d27daf6a8771b782bcbcb99b97964f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d72e3b4c06d27daf6a8771b782bcbcb99b97964f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4286601933406142b46693660f7f4b682cb50a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4286601933406142b46693660f7f4b682cb50a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4286601933406142b46693660f7f4b682cb50a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4286601933406142b46693660f7f4b682cb50a5/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5271b144985bd65b8fcbb14984deecd139e90ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5271b144985bd65b8fcbb14984deecd139e90ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5271b144985bd65b8fcbb14984deecd139e90ca"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "19fbbfb67dc82e776e6a5d492caf27ecb64481e3", "filename": "gcc/config/rs6000/rs6000-p8swap.cc", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4286601933406142b46693660f7f4b682cb50a5/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4286601933406142b46693660f7f4b682cb50a5/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.cc?ref=f4286601933406142b46693660f7f4b682cb50a5", "patch": "@@ -1690,7 +1690,15 @@ replace_swapped_aligned_store (swap_web_entry *insn_entry,\n   gcc_assert ((GET_CODE (new_body) == SET)\n \t      && MEM_P (SET_DEST (new_body)));\n \n-  set_block_for_insn (new_insn, BLOCK_FOR_INSN (store_insn));\n+  basic_block bb = BLOCK_FOR_INSN (store_insn);\n+  set_block_for_insn (new_insn, bb);\n+  /* Handle REG_EH_REGION note.  */\n+  if (cfun->can_throw_non_call_exceptions && BB_END (bb) == store_insn)\n+    {\n+      rtx note = find_reg_note (store_insn, REG_EH_REGION, NULL_RTX);\n+      if (note)\n+\tadd_reg_note (new_insn, REG_EH_REGION, XEXP (note, 0));\n+    }\n   df_insn_rescan (new_insn);\n \n   df_insn_delete (store_insn);\n@@ -1784,7 +1792,15 @@ replace_swapped_aligned_load (swap_web_entry *insn_entry, rtx swap_insn)\n   gcc_assert ((GET_CODE (new_body) == SET)\n \t      && MEM_P (SET_SRC (new_body)));\n \n-  set_block_for_insn (new_insn, BLOCK_FOR_INSN (def_insn));\n+  basic_block bb = BLOCK_FOR_INSN (def_insn);\n+  set_block_for_insn (new_insn, bb);\n+  /* Handle REG_EH_REGION note.  */\n+  if (cfun->can_throw_non_call_exceptions && BB_END (bb) == def_insn)\n+    {\n+      rtx note = find_reg_note (def_insn, REG_EH_REGION, NULL_RTX);\n+      if (note)\n+\tadd_reg_note (new_insn, REG_EH_REGION, XEXP (note, 0));\n+    }\n   df_insn_rescan (new_insn);\n \n   df_insn_delete (def_insn);"}, {"sha": "61ce8cf4733e27dda708b2b5c16138cb7f972ae2", "filename": "gcc/testsuite/gcc.target/powerpc/pr106091.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4286601933406142b46693660f7f4b682cb50a5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106091.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4286601933406142b46693660f7f4b682cb50a5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106091.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106091.c?ref=f4286601933406142b46693660f7f4b682cb50a5", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O -fnon-call-exceptions -fno-tree-dce -fno-tree-forwprop -w\" } */\n+\n+/* Verify there is no ICE.  */\n+\n+typedef short __attribute__ ((__vector_size__ (64))) V;\n+V v, w;\n+\n+inline V foo (V a, V b);\n+\n+V\n+foo (V a, V b)\n+{\n+  b &= v < b;\n+  return (V){foo (b, w)[3], (V){}[3]};\n+}"}]}