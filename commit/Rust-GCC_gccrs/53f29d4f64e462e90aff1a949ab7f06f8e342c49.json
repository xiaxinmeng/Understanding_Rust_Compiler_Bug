{"sha": "53f29d4f64e462e90aff1a949ab7f06f8e342c49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNmMjlkNGY2NGU0NjJlOTBhZmYxYTk0OWFiN2YwNmY4ZTM0MmM0OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T08:08:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T08:08:31Z"}, "message": "[multiple changes]\n\n2011-08-03  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, sem_res.adb, exp_ch13.adb, exp_disp.adb,\n\texp_aggr.adb: Minor reformatting.\n\n2011-08-03  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): Do not force inlining of\n\ttagged assignment when discriminant checks are suppressed. This is\n\tuseless and extremely costly in terms of static stack usage.\n\n2011-08-03  Bob Duff  <duff@adacore.com>\n\n\t* sem_prag.adb (Get_Base_Subprogram): Do not follow Alias for instances\n\tof generics, because this leads to the wrong entity in the wrong scope,\n\tcausing (e.g.) pragma Export_Procedure to get an error if the entity is\n\tan instance.\n\t(Process_Interface_Name): Follow Alias for instances of generics, to\n\tcorrect for the above change.\n\n2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Selected_Component): If the discriminant value\n\tis an integer literal it is always safe to replace the reference. In\n\taddition, if the reference appears in the generated code for an object\n\tdeclaration it is necessary to copy because otherwise the reference\n\tmight be to the uninitilized value of the discriminant of the object\n\titself.\n\n2011-08-03  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c (__gnat_is_executable_file_attr): Fix Win32 circuitry when no\n\tACL used, in this case we want to check for ending .exe, not .exe\n\tanywhere in the path.\n\n2011-08-03  Sergey Rybin  <rybin@adacore.com>\n\n\t* tree_io.ads (ASIS_Version_Number): Update because of the changes in\n\tthe tree structure (semantic decoration of references to record\n\tdiscriminants).\n\nFrom-SVN: r177237", "tree": {"sha": "bb4f13cfd5b8f50ab21047b09be02e43f7f6a8e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb4f13cfd5b8f50ab21047b09be02e43f7f6a8e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53f29d4f64e462e90aff1a949ab7f06f8e342c49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f29d4f64e462e90aff1a949ab7f06f8e342c49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f29d4f64e462e90aff1a949ab7f06f8e342c49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f29d4f64e462e90aff1a949ab7f06f8e342c49/comments", "author": null, "committer": null, "parents": [{"sha": "c0b118502029cede7f7fe9fa16bae5ff936ac461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b118502029cede7f7fe9fa16bae5ff936ac461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0b118502029cede7f7fe9fa16bae5ff936ac461"}], "stats": {"total": 207, "additions": 150, "deletions": 57}, "files": [{"sha": "251718fc136c30ff73fd93d79611098de380b03a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=53f29d4f64e462e90aff1a949ab7f06f8e342c49", "patch": "@@ -1,3 +1,44 @@\n+2011-08-03  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, sem_res.adb, exp_ch13.adb, exp_disp.adb,\n+\texp_aggr.adb: Minor reformatting.\n+\n+2011-08-03  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Do not force inlining of\n+\ttagged assignment when discriminant checks are suppressed. This is\n+\tuseless and extremely costly in terms of static stack usage.\n+\n+2011-08-03  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_prag.adb (Get_Base_Subprogram): Do not follow Alias for instances\n+\tof generics, because this leads to the wrong entity in the wrong scope,\n+\tcausing (e.g.) pragma Export_Procedure to get an error if the entity is\n+\tan instance.\n+\t(Process_Interface_Name): Follow Alias for instances of generics, to\n+\tcorrect for the above change.\n+\n+2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Selected_Component): If the discriminant value\n+\tis an integer literal it is always safe to replace the reference. In\n+\taddition, if the reference appears in the generated code for an object\n+\tdeclaration it is necessary to copy because otherwise the reference\n+\tmight be to the uninitilized value of the discriminant of the object\n+\titself.\n+\n+2011-08-03  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c (__gnat_is_executable_file_attr): Fix Win32 circuitry when no\n+\tACL used, in this case we want to check for ending .exe, not .exe\n+\tanywhere in the path.\n+\n+2011-08-03  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* tree_io.ads (ASIS_Version_Number): Update because of the changes in\n+\tthe tree structure (semantic decoration of references to record\n+\tdiscriminants).\n+\n 2011-08-03  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_aggr.adb (Analyze_Array_Aggregate): When checking the discrete"}, {"sha": "6845ff08ec11a78589f64eef8df8c316d2866ecc", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=53f29d4f64e462e90aff1a949ab7f06f8e342c49", "patch": "@@ -2145,8 +2145,15 @@ __gnat_is_executable_file_attr (char* name, struct file_attributes* attr)\n            __gnat_check_OWNER_ACL (wname, FILE_EXECUTE, GenericMapping);\n        }\n      else\n-       attr->executable = GetFileAttributes (wname) != INVALID_FILE_ATTRIBUTES\n-         && _tcsstr (wname, _T(\".exe\")) - wname == (int) (_tcslen (wname) - 4);\n+       {\n+\t TCHAR *l, *last = _tcsstr(wname, _T(\".exe\"));\n+\n+\t /* look for last .exe */\n+\t while (l = _tcsstr(last+1, _T(\".exe\"))) last = l;\n+\n+\t attr->executable = GetFileAttributes (wname) != INVALID_FILE_ATTRIBUTES\n+\t   && last - wname == (int) (_tcslen (wname) - 4);\n+       }\n #else\n      __gnat_stat_to_attr (-1, name, attr);\n #endif"}, {"sha": "f04a662a7fcea38bf28ebac89ebf23600acb7007", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=53f29d4f64e462e90aff1a949ab7f06f8e342c49", "patch": "@@ -5700,7 +5700,7 @@ package body Exp_Aggr is\n       elsif Has_Mutable_Components (Typ)\n         and then\n           (Nkind (Parent (N)) /= N_Object_Declaration\n-             or else not Constant_Present (Parent (N)))\n+            or else not Constant_Present (Parent (N)))\n       then\n          Convert_To_Assignments (N, Typ);\n "}, {"sha": "a0250ec1797ce91d64a7a853155d09cb864caf27", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=53f29d4f64e462e90aff1a949ab7f06f8e342c49", "patch": "@@ -311,7 +311,8 @@ package body Exp_Ch13 is\n          In_Other_Scope := False;\n          In_Outer_Scope := E_Scope /= Current_Scope;\n \n-      --  Otherwise it is a local package or a different compilation unit.\n+      --  Otherwise it is a local package or a different compilation unit\n+\n       else\n          In_Other_Scope := True;\n          In_Outer_Scope := False;"}, {"sha": "203795015c39363b2a6b0b49787d45e5a56886a6", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=53f29d4f64e462e90aff1a949ab7f06f8e342c49", "patch": "@@ -7594,6 +7594,18 @@ package body Exp_Ch4 is\n       --  unless the context of an assignment can provide size information.\n       --  Don't we have a general routine that does this???\n \n+      function Is_Subtype_Declaration return Boolean;\n+      --  The replacement of a discriminant reference by its value is required\n+      --  if this is part of the initialization of an temporary generated by\n+      --  a change of representation. This shows up as the construction of a\n+      --  discriminant constraint for a subtype declared at the same point as\n+      --  the entity in the prefix of the selected component.\n+      --  We recognize this case when the context of the reference is:\n+      --\n+      --   subtype ST is T(Obj.D);\n+      --\n+      --   The entity for Obj comes from source, and ST has the same sloc.\n+\n       -----------------------\n       -- In_Left_Hand_Side --\n       -----------------------\n@@ -7607,6 +7619,21 @@ package body Exp_Ch4 is\n                      and then In_Left_Hand_Side (Parent (Comp)));\n       end In_Left_Hand_Side;\n \n+      -----------------------------\n+      --  Is_Subtype_Declaration --\n+      -----------------------------\n+\n+      function Is_Subtype_Declaration return Boolean is\n+         Par : constant Node_Id := Parent (N);\n+\n+      begin\n+         return\n+           Nkind (Par) = N_Index_Or_Discriminant_Constraint\n+             and then Nkind (Parent (Parent (Par))) = N_Subtype_Declaration\n+             and then Comes_From_Source (Entity (Prefix (N)))\n+             and then Sloc (Par) = Sloc (Entity (Prefix (N)));\n+      end Is_Subtype_Declaration;\n+\n    --  Start of processing for Expand_N_Selected_Component\n \n    begin\n@@ -7730,9 +7757,19 @@ package body Exp_Ch4 is\n                   --  AND THEN was copied, causing problems for coverage\n                   --  analysis tools).\n \n+                  --  However, if the reference is part of the initialization\n+                  --  code generated for an object declaration, we must use\n+                  --  the discriminant value from the subtype constraint,\n+                  --  because the selected component may be a reference to the\n+                  --  object being initialized, whose discriminant is not yet\n+                  --  set. This only happens in complex cases involving changes\n+                  --  or representation.\n+\n                   if Disc = Entity (Selector_Name (N))\n                     and then (Is_Entity_Name (Dval)\n-                               or else Is_Static_Expression (Dval))\n+                              or else Nkind (Dval) = N_Integer_Literal\n+                              or else Is_Subtype_Declaration\n+                              or else Is_Static_Expression (Dval))\n                   then\n                      --  Here we have the matching discriminant. Check for\n                      --  the case of a discriminant of a component that is"}, {"sha": "dad94273afba3d96b30adcf8e8753a9327be2233", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=53f29d4f64e462e90aff1a949ab7f06f8e342c49", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1934,24 +1934,19 @@ package body Exp_Ch5 is\n \n                --  If the type is tagged, we may as well use the predefined\n                --  primitive assignment. This avoids inlining a lot of code\n-               --  and in the class-wide case, the assignment is replaced by\n-               --  dispatch call to _assign. Note that this cannot be done when\n-               --  discriminant checks are locally suppressed (as in extension\n-               --  aggregate expansions) because otherwise the discriminant\n-               --  check will be performed within the _assign call. It is also\n-               --  suppressed for assignments created by the expander that\n-               --  correspond to initializations, where we do want to copy the\n-               --  tag (No_Ctrl_Actions flag set True) by the expander and we\n-               --  do not need to mess with tags ever (Expand_Ctrl_Actions flag\n-               --  is set True in this case). Finally, it is suppressed if the\n-               --  restriction No_Dispatching_Calls is in force because in that\n-               --  case predefined primitives are not generated.\n+               --  and in the class-wide case, the assignment is replaced by a\n+               --  dispatching call to _assign. It is suppressed in the case of\n+               --  assignments created by the expander that correspond to\n+               --  initializations, where we do want to copy the tag\n+               --  (Expand_Ctrl_Actions flag is set True in this case).\n+               --  It is also suppressed if restriction No_Dispatching_Calls is\n+               --  in force because in that case predefined primitives are not\n+               --  generated.\n \n                or else (Is_Tagged_Type (Typ)\n                          and then not Is_Value_Type (Etype (Lhs))\n                          and then Chars (Current_Scope) /= Name_uAssign\n                          and then Expand_Ctrl_Actions\n-                         and then not Discriminant_Checks_Suppressed (Empty)\n                          and then\n                            not Restriction_Active (No_Dispatching_Calls))\n             then"}, {"sha": "47161e93e05ffa0122b2625d5c0d39a4588e9b7b", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=53f29d4f64e462e90aff1a949ab7f06f8e342c49", "patch": "@@ -3808,12 +3808,12 @@ package body Exp_Disp is\n       --  calls through interface types; the latter secondary table is\n       --  generated when Build_Thunks is False, and provides support for\n       --  Generic Dispatching Constructors that dispatch calls through\n-      --  interface types. When constructing this latter table the value\n-      --  of Suffix_Index is -1 to indicate that there is no need to export\n-      --  such table when building statically allocated dispatch tables; a\n-      --  positive value of Suffix_Index must match the Suffix_Index value\n-      --  assigned to this secondary dispatch table by Make_Tags when its\n-      --  unique external name was generated.\n+      --  interface types. When constructing this latter table the value of\n+      --  Suffix_Index is -1 to indicate that there is no need to export such\n+      --  table when building statically allocated dispatch tables; a positive\n+      --  value of Suffix_Index must match the Suffix_Index value assigned to\n+      --  this secondary dispatch table by Make_Tags when its unique external\n+      --  name was generated.\n \n       ------------------------------\n       -- Check_Premature_Freezing --\n@@ -3825,6 +3825,7 @@ package body Exp_Disp is\n          Typ         : Entity_Id)\n       is\n          Comp : Entity_Id;\n+\n       begin\n          if Present (N)\n            and then Is_Private_Type (Typ)"}, {"sha": "5de3b0ece703f07ffda586eb4a165086139509e3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=53f29d4f64e462e90aff1a949ab7f06f8e342c49", "patch": "@@ -3402,26 +3402,26 @@ package body Sem_Ch3 is\n \n          Remove_Side_Effects (E);\n \n+      --  If this is a constant declaration of an unconstrained type and\n+      --  the initialization is an aggregate, we can use the subtype of the\n+      --  aggregate for the declared entity because it is immutable.\n+\n       elsif not Is_Constrained (T)\n         and then Has_Discriminants (T)\n         and then Constant_Present (N)\n         and then not Has_Unchecked_Union (T)\n         and then Nkind (E) = N_Aggregate\n       then\n-         --  If this is a constant declaration of an unconstrained type and\n-         --  the initialization is an aggregate, we can use the subtype of the\n-         --  aggregate for the declared entity because it is immutable.\n-\n          Act_T := Etype (E);\n       end if;\n \n       --  Check No_Wide_Characters restriction\n \n       Check_Wide_Character_Restriction (T, Object_Definition (N));\n \n-      --  Indicate this is not set in source. Certainly true for constants,\n-      --  and true for variables so far (will be reset for a variable if and\n-      --  when we encounter a modification in the source).\n+      --  Indicate this is not set in source. Certainly true for constants, and\n+      --  true for variables so far (will be reset for a variable if and when\n+      --  we encounter a modification in the source).\n \n       Set_Never_Set_In_Source (Id, True);\n \n@@ -3435,9 +3435,9 @@ package body Sem_Ch3 is\n          Set_Ekind (Id, E_Variable);\n \n          --  A variable is set as shared passive if it appears in a shared\n-         --  passive package, and is at the outer level. This is not done\n-         --  for entities generated during expansion, because those are\n-         --  always manipulated locally.\n+         --  passive package, and is at the outer level. This is not done for\n+         --  entities generated during expansion, because those are always\n+         --  manipulated locally.\n \n          if Is_Shared_Passive (Current_Scope)\n            and then Is_Library_Level_Entity (Id)"}, {"sha": "4cab6b4f42924ae6720376755f1eea0b668c6b86", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=53f29d4f64e462e90aff1a949ab7f06f8e342c49", "patch": "@@ -4723,8 +4723,17 @@ package body Sem_Prag is\n                 Strval => End_String);\n          end if;\n \n-         Set_Encoded_Interface_Name\n-           (Get_Base_Subprogram (Subprogram_Def), Link_Nam);\n+         --  Set the interface name. If the entity is a generic instance, use\n+         --  its alias, which is the callable entity.\n+\n+         if Is_Generic_Instance (Subprogram_Def) then\n+            Set_Encoded_Interface_Name\n+              (Alias (Get_Base_Subprogram (Subprogram_Def)), Link_Nam);\n+\n+         else\n+            Set_Encoded_Interface_Name\n+              (Get_Base_Subprogram (Subprogram_Def), Link_Nam);\n+         end if;\n \n          --  We allow duplicated export names in CIL, as they are always\n          --  enclosed in a namespace that differentiates them, and overloaded\n@@ -13890,9 +13899,8 @@ package body Sem_Prag is\n       Result := Def_Id;\n       while Is_Subprogram (Result)\n         and then\n-          (Is_Generic_Instance (Result)\n-            or else Nkind (Parent (Declaration_Node (Result))) =\n-                                         N_Subprogram_Renaming_Declaration)\n+          Nkind (Parent (Declaration_Node (Result))) =\n+                                         N_Subprogram_Renaming_Declaration\n         and then Present (Alias (Result))\n       loop\n          Result := Alias (Result);"}, {"sha": "b99a94ad06c8364438dbd7ab11050768a6826761", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=53f29d4f64e462e90aff1a949ab7f06f8e342c49", "patch": "@@ -9881,21 +9881,24 @@ package body Sem_Res is\n          declare\n             Index_List    : constant List_Id    := New_List;\n             Index_Type    : constant Entity_Id := Etype (First_Index (Typ));\n-            High_Bound    : constant Node_Id :=\n-              Make_Attribute_Reference (Loc,\n-                Attribute_Name => Name_Val,\n-                Prefix => New_Occurrence_Of (Index_Type, Loc),\n-                Expressions =>\n-                New_List (\n-                  Make_Op_Add (Loc,\n-                    Left_Opnd =>\n-                      Make_Attribute_Reference (Loc,\n-                        Attribute_Name => Name_Pos,\n-                        Prefix => New_Occurrence_Of (Index_Type, Loc),\n-                        Expressions => New_List (New_Copy_Tree (Low_Bound))),\n-                      Right_Opnd =>\n-                            Make_Integer_Literal (Loc,\n-                              String_Length (Strval (N)) - 1))));\n+\n+            High_Bound : constant Node_Id :=\n+                           Make_Attribute_Reference (Loc,\n+                             Attribute_Name => Name_Val,\n+                             Prefix         =>\n+                               New_Occurrence_Of (Index_Type, Loc),\n+                             Expressions    => New_List (\n+                               Make_Op_Add (Loc,\n+                                 Left_Opnd  =>\n+                                   Make_Attribute_Reference (Loc,\n+                                     Attribute_Name => Name_Pos,\n+                                     Prefix         =>\n+                                       New_Occurrence_Of (Index_Type, Loc),\n+                                     Expressions    =>\n+                                       New_List (New_Copy_Tree (Low_Bound))),\n+                                 Right_Opnd =>\n+                                   Make_Integer_Literal (Loc,\n+                                     String_Length (Strval (N)) - 1))));\n \n             Array_Subtype : Entity_Id;\n             Index_Subtype : Entity_Id;"}, {"sha": "f2f6ad36735231fc866c00ae9709012f666d40b9", "filename": "gcc/ada/tree_io.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Ftree_io.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f29d4f64e462e90aff1a949ab7f06f8e342c49/gcc%2Fada%2Ftree_io.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_io.ads?ref=53f29d4f64e462e90aff1a949ab7f06f8e342c49", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,7 +47,7 @@ package Tree_IO is\n    Tree_Format_Error : exception;\n    --  Raised if a format error is detected in the input file\n \n-   ASIS_Version_Number : constant := 23;\n+   ASIS_Version_Number : constant := 24;\n    --  ASIS Version. This is used to check for consistency between the compiler\n    --  used to generate trees and an ASIS application that is reading the\n    --  trees. It must be incremented whenever a change is made to the tree"}]}