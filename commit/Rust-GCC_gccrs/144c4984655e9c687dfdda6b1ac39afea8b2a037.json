{"sha": "144c4984655e9c687dfdda6b1ac39afea8b2a037", "node_id": "C_kwDOANBUbNoAKDE0NGM0OTg0NjU1ZTljNjg3ZGZkZGE2YjFhYzM5YWZlYThiMmEwMzc", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-09-22T03:25:54Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-09-22T04:47:33Z"}, "message": "rs6000: Parameterize some const values for density test\n\nThis patch follows the discussion here[1], where Segher suggested\nparameterizing those exact magic constants for density heuristics,\nto make it easier to tweak if need.\n\nThe change here should be \"No Functional Change\".  But I verified\nit with SPEC2017 at option sets O2-vect and Ofast-unroll on Power8,\nthe result is neutral as expected.\n\n[1]https://gcc.gnu.org/pipermail/gcc-patches/2021-September/579121.html\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.opt (rs6000-density-pct-threshold,\n\trs6000-density-size-threshold, rs6000-density-penalty,\n\trs6000-density-load-pct-threshold,\n\trs6000-density-load-num-threshold): New parameter.\n\t* config/rs6000/rs6000.c (rs6000_density_test): Adjust with\n\tcorresponding parameters.", "tree": {"sha": "9ab6e1e1de670ebdb32745ef841a6a93374578f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ab6e1e1de670ebdb32745ef841a6a93374578f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/144c4984655e9c687dfdda6b1ac39afea8b2a037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144c4984655e9c687dfdda6b1ac39afea8b2a037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144c4984655e9c687dfdda6b1ac39afea8b2a037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144c4984655e9c687dfdda6b1ac39afea8b2a037/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72394d38d929c72cad6cf706a0e790b5934f2bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72394d38d929c72cad6cf706a0e790b5934f2bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72394d38d929c72cad6cf706a0e790b5934f2bf1"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "ad860728169d76fd4f63f7f44352606982643120", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144c4984655e9c687dfdda6b1ac39afea8b2a037/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144c4984655e9c687dfdda6b1ac39afea8b2a037/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=144c4984655e9c687dfdda6b1ac39afea8b2a037", "patch": "@@ -5289,9 +5289,6 @@ struct rs6000_cost_data\n static void\n rs6000_density_test (rs6000_cost_data *data)\n {\n-  const int DENSITY_PCT_THRESHOLD = 85;\n-  const int DENSITY_SIZE_THRESHOLD = 70;\n-  const int DENSITY_PENALTY = 10;\n   struct loop *loop = data->loop_info;\n   basic_block *bbs = get_loop_body (loop);\n   int nbbs = loop->num_nodes;\n@@ -5327,26 +5324,21 @@ rs6000_density_test (rs6000_cost_data *data)\n   free (bbs);\n   density_pct = (vec_cost * 100) / (vec_cost + not_vec_cost);\n \n-  if (density_pct > DENSITY_PCT_THRESHOLD\n-      && vec_cost + not_vec_cost > DENSITY_SIZE_THRESHOLD)\n+  if (density_pct > rs6000_density_pct_threshold\n+      && vec_cost + not_vec_cost > rs6000_density_size_threshold)\n     {\n-      data->cost[vect_body] = vec_cost * (100 + DENSITY_PENALTY) / 100;\n+      data->cost[vect_body] = vec_cost * (100 + rs6000_density_penalty) / 100;\n       if (dump_enabled_p ())\n \tdump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t \"density %d%%, cost %d exceeds threshold, penalizing \"\n-\t\t\t \"loop body cost by %d%%\\n\", density_pct,\n-\t\t\t vec_cost + not_vec_cost, DENSITY_PENALTY);\n+\t\t\t \"loop body cost by %u%%\\n\", density_pct,\n+\t\t\t vec_cost + not_vec_cost, rs6000_density_penalty);\n     }\n \n   /* Check whether we need to penalize the body cost to account\n      for excess strided or elementwise loads.  */\n   if (data->extra_ctor_cost > 0)\n     {\n-      /* Threshold for load stmts percentage in all vectorized stmts.  */\n-      const int DENSITY_LOAD_PCT_THRESHOLD = 45;\n-      /* Threshold for total number of load stmts.  */\n-      const int DENSITY_LOAD_NUM_THRESHOLD = 20;\n-\n       gcc_assert (data->nloads <= data->nstmts);\n       unsigned int load_pct = (data->nloads * 100) / data->nstmts;\n \n@@ -5360,8 +5352,8 @@ rs6000_density_test (rs6000_cost_data *data)\n \t      the loads.\n \t One typical case is the innermost loop of the hotspot of SPEC2017\n \t 503.bwaves_r without loop interchange.  */\n-      if (data->nloads > DENSITY_LOAD_NUM_THRESHOLD\n-\t  && load_pct > DENSITY_LOAD_PCT_THRESHOLD)\n+      if (data->nloads > (unsigned int) rs6000_density_load_num_threshold\n+\t  && load_pct > (unsigned int) rs6000_density_load_pct_threshold)\n \t{\n \t  data->cost[vect_body] += data->extra_ctor_cost;\n \t  if (dump_enabled_p ())"}, {"sha": "9d7878f144a91e8b16759645b0edac59cd94a2ed", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144c4984655e9c687dfdda6b1ac39afea8b2a037/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144c4984655e9c687dfdda6b1ac39afea8b2a037/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=144c4984655e9c687dfdda6b1ac39afea8b2a037", "patch": "@@ -639,3 +639,41 @@ Enable instructions that guard against return-oriented programming attacks.\n mprivileged\n Target Var(rs6000_privileged) Init(0)\n Generate code that will run in privileged state.\n+\n+-param=rs6000-density-pct-threshold=\n+Target Undocumented Joined UInteger Var(rs6000_density_pct_threshold) Init(85) IntegerRange(0, 100) Param\n+When costing for loop vectorization, we probably need to penalize the loop body\n+cost if the existing cost model may not adequately reflect delays from\n+unavailable vector resources.  We collect the cost for vectorized statements\n+and non-vectorized statements separately, check the proportion of vec_cost to\n+total cost of vec_cost and non vec_cost, and penalize only if the proportion\n+exceeds the threshold specified by this parameter.  The default value is 85.\n+\n+-param=rs6000-density-size-threshold=\n+Target Undocumented Joined UInteger Var(rs6000_density_size_threshold) Init(70) IntegerRange(0, 1000) Param\n+Like parameter rs6000-density-pct-threshold, we also check the total sum of\n+vec_cost and non vec_cost, and penalize only if the sum exceeds the threshold\n+specified by this parameter.  The default value is 70.\n+\n+-param=rs6000-density-penalty=\n+Target Undocumented Joined UInteger Var(rs6000_density_penalty) Init(10) IntegerRange(0, 1000) Param\n+When both heuristics with rs6000-density-pct-threshold and\n+rs6000-density-size-threshold are satisfied, we decide to penalize the loop\n+body cost by the value which is specified by this parameter.  The default\n+value is 10.\n+\n+-param=rs6000-density-load-pct-threshold=\n+Target Undocumented Joined UInteger Var(rs6000_density_load_pct_threshold) Init(45) IntegerRange(0, 100) Param\n+When costing for loop vectorization, we probably need to penalize the loop body\n+cost by accounting for excess strided or elementwise loads.  We collect the\n+numbers for general statements and load statements according to the information\n+for statements to be vectorized, check the proportion of load statements, and\n+penalize only if the proportion exceeds the threshold specified by this\n+parameter.  The default value is 45.\n+\n+-param=rs6000-density-load-num-threshold=\n+Target Undocumented Joined UInteger Var(rs6000_density_load_num_threshold) Init(20) IntegerRange(0, 1000) Param\n+Like parameter rs6000-density-load-pct-threshold, we also check if the total\n+number of load statements exceeds the threshold specified by this parameter,\n+and penalize only if it's satisfied.  The default value is 20.\n+"}]}