{"sha": "ead235f60139edc6eb408d8d083cbb15e417b447", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFkMjM1ZjYwMTM5ZWRjNmViNDA4ZDhkMDgzY2JiMTVlNDE3YjQ0Nw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-24T00:16:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-24T00:16:44Z"}, "message": "Daily bump.", "tree": {"sha": "5eb84b7907972a94c31c64f7047210e969720366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5eb84b7907972a94c31c64f7047210e969720366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ead235f60139edc6eb408d8d083cbb15e417b447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead235f60139edc6eb408d8d083cbb15e417b447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ead235f60139edc6eb408d8d083cbb15e417b447", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead235f60139edc6eb408d8d083cbb15e417b447/comments", "author": null, "committer": null, "parents": [{"sha": "e314cfc371d8b2405a1d81e51b90f9fb24b9061f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e314cfc371d8b2405a1d81e51b90f9fb24b9061f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e314cfc371d8b2405a1d81e51b90f9fb24b9061f"}], "stats": {"total": 430, "additions": 429, "deletions": 1}, "files": [{"sha": "b86653fcb0b7a455a46474bf92857e7d2e7e8013", "filename": "gcc/ChangeLog", "status": "modified", "additions": 288, "deletions": 0, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ead235f60139edc6eb408d8d083cbb15e417b447", "patch": "@@ -1,3 +1,291 @@\n+2021-07-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/101562\n+\t* expmed.c (store_integral_bit_field): Only use movstrict_optab\n+\tif the operand isn't paradoxical.\n+\n+2021-07-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-array-bounds.h (class array_bounds_checker): Change\n+\tranges type to range_query.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vst1_s64_x2): Use\n+\t__builtin_memcpy instead of constructing\n+\t__builtin_aarch64_simd_oi one vector at a time.\n+\t(vst1_u64_x2): Likewise.\n+\t(vst1_f64_x2): Likewise.\n+\t(vst1_s8_x2): Likewise.\n+\t(vst1_p8_x2): Likewise.\n+\t(vst1_s16_x2): Likewise.\n+\t(vst1_p16_x2): Likewise.\n+\t(vst1_s32_x2): Likewise.\n+\t(vst1_u8_x2): Likewise.\n+\t(vst1_u16_x2): Likewise.\n+\t(vst1_u32_x2): Likewise.\n+\t(vst1_f16_x2): Likewise.\n+\t(vst1_f32_x2): Likewise.\n+\t(vst1_p64_x2): Likewise.\n+\t(vst1q_s8_x2): Likewise.\n+\t(vst1q_p8_x2): Likewise.\n+\t(vst1q_s16_x2): Likewise.\n+\t(vst1q_p16_x2): Likewise.\n+\t(vst1q_s32_x2): Likewise.\n+\t(vst1q_s64_x2): Likewise.\n+\t(vst1q_u8_x2): Likewise.\n+\t(vst1q_u16_x2): Likewise.\n+\t(vst1q_u32_x2): Likewise.\n+\t(vst1q_u64_x2): Likewise.\n+\t(vst1q_f16_x2): Likewise.\n+\t(vst1q_f32_x2): Likewise.\n+\t(vst1q_f64_x2): Likewise.\n+\t(vst1q_p64_x2): Likewise.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vst1_s64_x3): Use\n+\t__builtin_memcpy instead of constructing\n+\t__builtin_aarch64_simd_ci one vector at a time.\n+\t(vst1_u64_x3): Likewise.\n+\t(vst1_f64_x3): Likewise.\n+\t(vst1_s8_x3): Likewise.\n+\t(vst1_p8_x3): Likewise.\n+\t(vst1_s16_x3): Likewise.\n+\t(vst1_p16_x3): Likewise.\n+\t(vst1_s32_x3): Likewise.\n+\t(vst1_u8_x3): Likewise.\n+\t(vst1_u16_x3): Likewise.\n+\t(vst1_u32_x3): Likewise.\n+\t(vst1_f16_x3): Likewise.\n+\t(vst1_f32_x3): Likewise.\n+\t(vst1_p64_x3): Likewise.\n+\t(vst1q_s8_x3): Likewise.\n+\t(vst1q_p8_x3): Likewise.\n+\t(vst1q_s16_x3): Likewise.\n+\t(vst1q_p16_x3): Likewise.\n+\t(vst1q_s32_x3): Likewise.\n+\t(vst1q_s64_x3): Likewise.\n+\t(vst1q_u8_x3): Likewise.\n+\t(vst1q_u16_x3): Likewise.\n+\t(vst1q_u32_x3): Likewise.\n+\t(vst1q_u64_x3): Likewise.\n+\t(vst1q_f16_x3): Likewise.\n+\t(vst1q_f32_x3): Likewise.\n+\t(vst1q_f64_x3): Likewise.\n+\t(vst1q_p64_x3): Likewise.\n+\n+2021-07-23  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101504\n+\t* config/i386/i386.c (ix86_gen_scratch_sse_rtx): Don't return\n+\thard register when LRA is in progress.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vst1_s8_x4): Use\n+\t__builtin_memcpy instead of using a union.\n+\t(vst1q_s8_x4): Likewise.\n+\t(vst1_s16_x4): Likewise.\n+\t(vst1q_s16_x4): Likewise.\n+\t(vst1_s32_x4): Likewise.\n+\t(vst1q_s32_x4): Likewise.\n+\t(vst1_u8_x4): Likewise.\n+\t(vst1q_u8_x4): Likewise.\n+\t(vst1_u16_x4): Likewise.\n+\t(vst1q_u16_x4): Likewise.\n+\t(vst1_u32_x4): Likewise.\n+\t(vst1q_u32_x4): Likewise.\n+\t(vst1_f16_x4): Likewise.\n+\t(vst1q_f16_x4): Likewise.\n+\t(vst1_f32_x4): Likewise.\n+\t(vst1q_f32_x4): Likewise.\n+\t(vst1_p8_x4): Likewise.\n+\t(vst1q_p8_x4): Likewise.\n+\t(vst1_p16_x4): Likewise.\n+\t(vst1q_p16_x4): Likewise.\n+\t(vst1_s64_x4): Likewise.\n+\t(vst1_u64_x4): Likewise.\n+\t(vst1_p64_x4): Likewise.\n+\t(vst1q_s64_x4): Likewise.\n+\t(vst1q_u64_x4): Likewise.\n+\t(vst1q_p64_x4): Likewise.\n+\t(vst1_f64_x4): Likewise.\n+\t(vst1q_f64_x4): Likewise.\n+\n+2021-07-23  Jonathan Wrightt  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vst2_s64): Use __builtin_memcpy\n+\tinstead of constructing __builtin_aarch64_simd_oi one vector\n+\tat a time.\n+\t(vst2_u64): Likewise.\n+\t(vst2_f64): Likewise.\n+\t(vst2_s8): Likewise.\n+\t(vst2_p8): Likewise.\n+\t(vst2_s16): Likewise.\n+\t(vst2_p16): Likewise.\n+\t(vst2_s32): Likewise.\n+\t(vst2_u8): Likewise.\n+\t(vst2_u16): Likewise.\n+\t(vst2_u32): Likewise.\n+\t(vst2_f16): Likewise.\n+\t(vst2_f32): Likewise.\n+\t(vst2_p64): Likewise.\n+\t(vst2q_s8): Likewise.\n+\t(vst2q_p8): Likewise.\n+\t(vst2q_s16): Likewise.\n+\t(vst2q_p16): Likewise.\n+\t(vst2q_s32): Likewise.\n+\t(vst2q_s64): Likewise.\n+\t(vst2q_u8): Likewise.\n+\t(vst2q_u16): Likewise.\n+\t(vst2q_u32): Likewise.\n+\t(vst2q_u64): Likewise.\n+\t(vst2q_f16): Likewise.\n+\t(vst2q_f32): Likewise.\n+\t(vst2q_f64): Likewise.\n+\t(vst2q_p64): Likewise.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vst3_s64): Use __builtin_memcpy\n+\tinstead of constructing __builtin_aarch64_simd_ci one vector\n+\tat a time.\n+\t(vst3_u64): Likewise.\n+\t(vst3_f64): Likewise.\n+\t(vst3_s8): Likewise.\n+\t(vst3_p8): Likewise.\n+\t(vst3_s16): Likewise.\n+\t(vst3_p16): Likewise.\n+\t(vst3_s32): Likewise.\n+\t(vst3_u8): Likewise.\n+\t(vst3_u16): Likewise.\n+\t(vst3_u32): Likewise.\n+\t(vst3_f16): Likewise.\n+\t(vst3_f32): Likewise.\n+\t(vst3_p64): Likewise.\n+\t(vst3q_s8): Likewise.\n+\t(vst3q_p8): Likewise.\n+\t(vst3q_s16): Likewise.\n+\t(vst3q_p16): Likewise.\n+\t(vst3q_s32): Likewise.\n+\t(vst3q_s64): Likewise.\n+\t(vst3q_u8): Likewise.\n+\t(vst3q_u16): Likewise.\n+\t(vst3q_u32): Likewise.\n+\t(vst3q_u64): Likewise.\n+\t(vst3q_f16): Likewise.\n+\t(vst3q_f32): Likewise.\n+\t(vst3q_f64): Likewise.\n+\t(vst3q_p64): Likewise.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vst4_s64): Use __builtin_memcpy\n+\tinstead of constructing __builtin_aarch64_simd_xi one vector\n+\tat a time.\n+\t(vst4_u64): Likewise.\n+\t(vst4_f64): Likewise.\n+\t(vst4_s8): Likewise.\n+\t(vst4_p8): Likewise.\n+\t(vst4_s16): Likewise.\n+\t(vst4_p16): Likewise.\n+\t(vst4_s32): Likewise.\n+\t(vst4_u8): Likewise.\n+\t(vst4_u16): Likewise.\n+\t(vst4_u32): Likewise.\n+\t(vst4_f16): Likewise.\n+\t(vst4_f32): Likewise.\n+\t(vst4_p64): Likewise.\n+\t(vst4q_s8): Likewise.\n+\t(vst4q_p8): Likewise.\n+\t(vst4q_s16): Likewise.\n+\t(vst4q_p16): Likewise.\n+\t(vst4q_s32): Likewise.\n+\t(vst4q_s64): Likewise.\n+\t(vst4q_u8): Likewise.\n+\t(vst4q_u16): Likewise.\n+\t(vst4q_u32): Likewise.\n+\t(vst4q_u64): Likewise.\n+\t(vst4q_f16): Likewise.\n+\t(vst4q_f32): Likewise.\n+\t(vst4q_f64): Likewise.\n+\t(vst4q_p64): Likewise.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vtbx4_s8): Use __builtin_memcpy\n+\tinstead of constructing __builtin_aarch64_simd_oi one vector\n+\tat a time.\n+\t(vtbx4_u8): Likewise.\n+\t(vtbx4_p8): Likewise.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vtbl3_s8): Use __builtin_memcpy\n+\tinstead of constructing __builtin_aarch64_simd_oi one vector\n+\tat a time.\n+\t(vtbl3_u8): Likewise.\n+\t(vtbl3_p8): Likewise.\n+\t(vtbl4_s8): Likewise.\n+\t(vtbl4_u8): Likewise.\n+\t(vtbl4_p8): Likewise.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vqtbx2_s8): Use __builtin_memcpy\n+\tinstead of constructing __builtin_aarch64_simd_oi one vector\n+\tat a time.\n+\t(vqtbx2_u8): Likewise.\n+\t(vqtbx2_p8): Likewise.\n+\t(vqtbx2q_s8): Likewise.\n+\t(vqtbx2q_u8): Likewise.\n+\t(vqtbx2q_p8): Likewise.\n+\t(vqtbx3_s8): Use __builtin_memcpy instead of constructing\n+\t__builtin_aarch64_simd_ci one vector at a time.\n+\t(vqtbx3_u8): Likewise.\n+\t(vqtbx3_p8): Likewise.\n+\t(vqtbx3q_s8): Likewise.\n+\t(vqtbx3q_u8): Likewise.\n+\t(vqtbx3q_p8): Likewise.\n+\t(vqtbx4_s8): Use __builtin_memcpy instead of constructing\n+\t__builtin_aarch64_simd_xi one vector at a time.\n+\t(vqtbx4_u8): Likewise.\n+\t(vqtbx4_p8): Likewise.\n+\t(vqtbx4q_s8): Likewise.\n+\t(vqtbx4q_u8): Likewise.\n+\t(vqtbx4q_p8): Likewise.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vqtbl2_s8): Use __builtin_memcpy\n+\tinstead of constructing __builtin_aarch64_simd_oi one vector\n+\tat a time.\n+\t(vqtbl2_u8): Likewise.\n+\t(vqtbl2_p8): Likewise.\n+\t(vqtbl2q_s8): Likewise.\n+\t(vqtbl2q_u8): Likewise.\n+\t(vqtbl2q_p8): Likewise.\n+\t(vqtbl3_s8): Use __builtin_memcpy instead of constructing\n+\t__builtin_aarch64_simd_ci one vector at a time.\n+\t(vqtbl3_u8): Likewise.\n+\t(vqtbl3_p8): Likewise.\n+\t(vqtbl3q_s8): Likewise.\n+\t(vqtbl3q_u8): Likewise.\n+\t(vqtbl3q_p8): Likewise.\n+\t(vqtbl4_s8): Use __builtin_memcpy instead of constructing\n+\t__builtin_aarch64_simd_xi one vector at a time.\n+\t(vqtbl4_u8): Likewise.\n+\t(vqtbl4_p8): Likewise.\n+\t(vqtbl4q_s8): Likewise.\n+\t(vqtbl4q_u8): Likewise.\n+\t(vqtbl4q_p8): Likewise.\n+\n+2021-07-23  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/100952\n+\t* config/rs6000/rs6000.md (cstore<mode>4): Fix wrong fall through.\n+\n 2021-07-22  Andrew Pinski  <apinski@marvell.com>\n \n \tPR tree-optimization/10153"}, {"sha": "3b58862b6ce6c5c486e77c26bc798c1ea8c4ec03", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ead235f60139edc6eb408d8d083cbb15e417b447", "patch": "@@ -1 +1 @@\n-20210723\n+20210724"}, {"sha": "fd799e3ea02d4f90ad16a3f9a8cde64343cd01ce", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=ead235f60139edc6eb408d8d083cbb15e417b447", "patch": "@@ -1,3 +1,19 @@\n+2021-07-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-manager.cc\n+\t(class auto_disable_complexity_checks): New.\n+\t(epath_finder::explore_feasible_paths): Use it to disable\n+\tcomplexity checks whilst processing the worklist.\n+\t* region-model-manager.cc\n+\t(region_model_manager::region_model_manager): Initialize\n+\tm_check_complexity.\n+\t(region_model_manager::reject_if_too_complex): Bail if\n+\tm_check_complexity is false.\n+\t* region-model.h\n+\t(region_model_manager::enable_complexity_check): New.\n+\t(region_model_manager::disable_complexity_check): New.\n+\t(region_model_manager::m_check_complexity): New.\n+\n 2021-07-21  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/101547"}, {"sha": "ce5d70dd45352b2e7bb9cf928ef36d2b7d301398", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ead235f60139edc6eb408d8d083cbb15e417b447", "patch": "@@ -1,3 +1,14 @@\n+2021-07-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-lex.c (c_common_has_attribute): Call canonicalize_attr_name also\n+\ton attr_id.  Return 1 for omp::directive or omp::sequence in C++11\n+\tand later.\n+\n+2021-07-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP__START_ and\n+\tPRAGMA_OMP__LAST_ enumerators.\n+\n 2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "293f620b498bcbd522a2f9a63b27b60478d66371", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ead235f60139edc6eb408d8d083cbb15e417b447", "patch": "@@ -1,3 +1,19 @@\n+2021-07-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.h (struct cp_parser): Add omp_attrs_forbidden_p member.\n+\t* parser.c (cp_parser_handle_statement_omp_attributes): Diagnose\n+\tmixing of attribute and pragma syntax directives when seeing\n+\tomp::directive if parser->omp_attrs_forbidden_p or if attribute syntax\n+\tdirectives are followed by OpenMP pragma.\n+\t(cp_parser_statement): Clear parser->omp_attrs_forbidden_p after\n+\tthe cp_parser_handle_statement_omp_attributes call.\n+\t(cp_parser_omp_structured_block): Add disallow_omp_attrs argument,\n+\tif true, set parser->omp_attrs_forbidden_p.\n+\t(cp_parser_omp_scan_loop_body, cp_parser_omp_sections_scope): Pass\n+\tfalse as disallow_omp_attrs to cp_parser_omp_structured_block.\n+\t(cp_parser_omp_parallel, cp_parser_omp_task): Set\n+\tparser->omp_attrs_forbidden_p.\n+\n 2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "e3bf9d685bbed342449582796daf9e7e8f9d578b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ead235f60139edc6eb408d8d083cbb15e417b447", "patch": "@@ -1,3 +1,9 @@\n+2021-07-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/101536\n+\t* check.c (array_check): Adjust check for the case of CLASS\n+\tarrays.\n+\n 2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "681aefc2e1359365df81d09ccfdb76a7f1850723", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead235f60139edc6eb408d8d083cbb15e417b447/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ead235f60139edc6eb408d8d083cbb15e417b447", "patch": "@@ -1,3 +1,85 @@\n+2021-07-23  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/101536\n+\t* gfortran.dg/pr101536.f90: New test.\n+\n+2021-07-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/101562\n+\t* gcc.c-torture/compile/pr101562.c: New test.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n+\ttests.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n+\ttests.\n+\n+2021-07-23  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/101504\n+\t* gcc.target/i386/pr101504.c: New test.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n+\ttests.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n+\ttests.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n+\ttests.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n+\ttests.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: New tests.\n+\n+2021-07-23  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: New test.\n+\n+2021-07-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/attrs-1.c: New test.\n+\t* c-c++-common/gomp/attrs-2.c: New test.\n+\t* c-c++-common/gomp/attrs-3.c: New test.\n+\n+2021-07-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/gomp/attrs-4.C: New test.\n+\t* g++.dg/gomp/attrs-5.C: New test.\n+\n+2021-07-23  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\t* gcc.target/mips/mips.exp (mips_option_groups): add\n+\t  -finline and -fno-inline.\n+\n+2021-07-23  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tRevert:\n+\t2021-07-09  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\t* gcc.target/mips/cfgcleanup-jalr2.c: Remove -fno-inline and add\n+\t  __attribute__((noinline)).\n+\t* gcc.target/mips/cfgcleanup-jalr3.c: Likewise.\n+\n+2021-07-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/feasibility-3.c: New test.\n+\n 2021-07-22  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/65178"}, {"sha": "01ca9394e879839cb2419de1e378b9c6f4b497bf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead235f60139edc6eb408d8d083cbb15e417b447/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead235f60139edc6eb408d8d083cbb15e417b447/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ead235f60139edc6eb408d8d083cbb15e417b447", "patch": "@@ -1,3 +1,12 @@\n+2021-07-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/future: Include <bits/atomic_base.h> instead of\n+\t<atomic>.\n+\n+2021-07-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_relops.h: Update documentation comments.\n+\n 2021-07-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/101583"}]}