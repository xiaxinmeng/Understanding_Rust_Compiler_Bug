{"sha": "aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFmODAwOGNlN2U5ODBiOGYwNGQ2ZGZhYWEyYzVlYzdmNGRhMWM2Nw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:04:14Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:04:14Z"}, "message": "[genmultilib] Update basic multilib configuration\n\n\nThe standard arm-eabi configuration comes with a basic set of multilibs that\nare suitable mostly for simple testing of the compiler in various\nconfigurations.  We try to keep the number of libraries build small so\nthat build times do not become too onerous.\n\nUsing the new auto-fp selection code we can now cover all supported\narchitectures except for those with single-precision only FP units with\njust 4 multilibs.  This is done with the rewrite of t-arm-elf.  Now that we\ncanonicalize -mcpu into suitable -march definitions we don't need to match\nCPU names to architectures any more; the driver will do this for us.\n\nI also noticed whilst writing this patch that the existing MULTILIB_DEFAULTS\nsetting in the compiler was causing more problems than it was worth; and\nfurthermore was simply wrong if the compiler is ever configured with\n--with-mode, --with-float or --with-endian.  The remaining options also\npertained to pre-eabi builds and aren't interesting today either.  It\nseemed best to just delete the definition entirely.\n\n\t* config/arm/elf.h (MULTILIB_DEFAULTS): Delete.\n\t* config/arm/t-arm-elf: Rewritten.\n\nFrom-SVN: r249294", "tree": {"sha": "e58642dfc80e498d157419e5aa21205ef1778d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e58642dfc80e498d157419e5aa21205ef1778d01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67/comments", "author": null, "committer": null, "parents": [{"sha": "2e17e319255996466564d0084d7d4cc35e129222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e17e319255996466564d0084d7d4cc35e129222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e17e319255996466564d0084d7d4cc35e129222"}], "stats": {"total": 182, "additions": 109, "deletions": 73}, "files": [{"sha": "1330539b1fd9b8092b0a256c1a025d05b71d9fa5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67", "patch": "@@ -1,3 +1,8 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/elf.h (MULTILIB_DEFAULTS): Delete.\n+\t* config/arm/t-arm-elf: Rewritten.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm.h (TARGET_HARD_FLOAT): Also check that we"}, {"sha": "85fdee61e6b7ece2518e43b54602a543f858eecf", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67", "patch": "@@ -107,10 +107,6 @@\n #define TARGET_DEFAULT (MASK_APCS_FRAME)\n #endif\n \n-#ifndef MULTILIB_DEFAULTS\n-#define MULTILIB_DEFAULTS \\\n-  { \"marm\", \"mlittle-endian\", \"mfloat-abi=soft\", \"mno-thumb-interwork\", \"fno-leading-underscore\" }\n-#endif\n \f\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \f"}, {"sha": "133784101176fd2b5298a5747b8601088d0a543e", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 104, "deletions": 69, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=aaf8008ce7e980b8f04d6dfaaa2c5ec7f4da1c67", "patch": "@@ -16,75 +16,110 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-MULTILIB_OPTIONS     = marm/mthumb\n-MULTILIB_DIRNAMES    = arm thumb\n+# Build a very basic set of libraries that should cater for most cases.\n+\n+# Single-precision floating-point is NOT supported; we don't build a\n+# suitable library for that.  Use the rm-profile config in that case.\n+\n+# PART 1 - Useful groups of options\n+\n+dp_fpus\t\t:= vfp vfpv2 vfpv3 vfpv3-fp16 vfpv3-d16 vfpv3-d16-fp16 \\\n+\t\t   neon neon-vfpv3 neon-fp16 vfpv4 neon-vfpv4 vfpv4-d16 \\\n+\t\t   fpv5-d16 fp-armv8 neon-fp-armv8 crypto-neon-fp-armv8 \\\n+\t\t   vfp3\n+\n+sp_fpus\t\t:= vfpv3xd vfpv3xd-fp16  fpv4-sp-d16 fpv5-sp-d16\n+\n+v7a_fps\t\t:= vfpv3 vfpv3-fp16 vfpv4 simd neon-fp16 neon-vfpv4\n+v7ve_fps\t:= vfpv3-d16 vfpv3 vfpv3-d16-fp16 vfpv3-fp16 vfpv4 neon \\\n+\t\t   neon-fp16 simd\n+\n+# Not all these permutations exist for all architecture variants, but\n+# it seems to work ok.\n+v8_fps\t\t:= simd fp16 crypto fp16+crypto\n+\n+# We don't do anything special with these.  Pre-v4t probably doesn't work.\n+all_early_nofp\t:= armv2 armv2a armv3 armv3m armv4 armv4t armv5 armv5t\n+\n+all_early_arch\t:= armv5e armv5tej armv6 armv6j armv6k armv6z armv6kz \\\n+\t\t   armv6zk armv6t2 iwmmxt iwmmxt2\n+\n+all_v7_a_r\t:= armv7-a armv7ve armv7-r\n+\n+all_v8_archs\t:= armv8-a armv8-a+crc armv8.1-a armv8.2-a\n+\n+# No floating point variants, require thumb1 softfp\n+all_nofp_t\t:= armv6-m armv6s-m armv8-m.base\n+\n+all_nofp_t2\t:= armv7-m\n+\n+all_sp_only\t:= armv7e-m armv8-m.main\n+\n+MULTILIB_OPTIONS     =\n+MULTILIB_DIRNAMES    =\n MULTILIB_EXCEPTIONS  = \n MULTILIB_MATCHES     =\n+MULTILIB_REUSE\t     =\n+\n+# PART 2 - multilib build rules\n+\n+MULTILIB_OPTIONS     += marm/mthumb\n+MULTILIB_DIRNAMES    += arm thumb\n+\n+MULTILIB_OPTIONS     += mfpu=auto\n+MULTILIB_DIRNAMES    += autofp\n+\n+MULTILIB_OPTIONS     += march=armv5te+fp/march=armv7+fp\n+MULTILIB_DIRNAMES    += v5te v7\n+\n+MULTILIB_OPTIONS     += mfloat-abi=hard\n+MULTILIB_DIRNAMES    += fpu\n+\n+# Build a total of 4 library variants (base options plus the following):\n+MULTILIB_REQUIRED    += mthumb\n+MULTILIB_REQUIRED    += marm/mfpu=auto/march=armv5te+fp/mfloat-abi=hard\n+MULTILIB_REQUIRED    += mthumb/mfpu=auto/march=armv7+fp/mfloat-abi=hard\n+\n+# PART 3 - Match rules\n+\n+# Map all supported FPUs onto mfpu=auto\n+MULTILIB_MATCHES     += $(foreach FPU, $(dp_fpus), \\\n+\t\t\t  mfpu?auto=mfpu?$(FPU))\n+\n+MULTILIB_MATCHES     += march?armv5te+fp=march?armv5te\n+\n+MULTILIB_MATCHES     += $(foreach ARCH, $(all_early_arch), \\\n+\t\t          march?armv5te+fp=march?$(ARCH) \\\n+\t\t\t  march?armv5te+fp=march?$(ARCH)+fp)\n+\n+MULTILIB_MATCHES     += march?armv7+fp=march?armv7\n+\n+MULTILIB_MATCHES     += $(foreach FPARCH, $(v7a_fps), \\\n+\t\t          march?armv7+fp=march?armv7-a+$(FPARCH))\n+\n+MULTILIB_MATCHES     += $(foreach FPARCH, $(v7ve_fps), \\\n+\t\t          march?armv7+fp=march?armv7ve+$(FPARCH))\n+\n+MULTILIB_MATCHES     += $(foreach ARCH, $(all_v7_a_r), \\\n+\t\t\t  march?armv7+fp=march?$(ARCH) \\\n+\t\t\t  march?armv7+fp=march?$(ARCH)+fp)\n+\n+MULTILIB_MATCHES     += $(foreach ARCH, $(all_v8_archs), \\\n+\t\t\t  march?armv7+fp=march?$(ARCH) \\\n+\t\t\t  $(foreach FPARCH, $(v8_fps), \\\n+\t\t\t    march?armv7+fp=march?$(ARCH)+$(FPARCH)))\n+\n+MULTILIB_MATCHES     += $(foreach ARCH, armv7e-m armv8-m.mainline, \\\n+\t\t\t  march?armv7+fp=march?$(ARCH)+fp.dp)\n+\n+# PART 4 - Reuse rules\n \n-#MULTILIB_OPTIONS     += mcpu=fa526/mcpu=fa626/mcpu=fa606te/mcpu=fa626te/mcpu=fmp626/mcpu=fa726te\n-#MULTILIB_DIRNAMES    += fa526 fa626 fa606te fa626te fmp626 fa726te\n-#MULTILIB_EXCEPTIONS  += *mthumb*/*mcpu=fa526 *mthumb*/*mcpu=fa626\n-\n-#MULTILIB_OPTIONS      += march=armv7\n-#MULTILIB_DIRNAMES     += thumb2\n-#MULTILIB_EXCEPTIONS   += march=armv7* marm/*march=armv7*\n-#MULTILIB_MATCHES      += march?armv7=march?armv7-a\n-#MULTILIB_MATCHES      += march?armv7=march?armv7-r\n-#MULTILIB_MATCHES      += march?armv7=march?armv7-m\n-#MULTILIB_MATCHES      += march?armv7=mcpu?cortex-a8\n-#MULTILIB_MATCHES      += march?armv7=mcpu?cortex-r4\n-#MULTILIB_MATCHES      += march?armv7=mcpu?cortex-m3\n-\n-# Not quite true.  We can support hard-vfp calling in Thumb2, but how do we\n-# express that here?  Also, we really need architecture v5e or later\n-# (mcrr etc).\n-MULTILIB_OPTIONS       += mfloat-abi=hard\n-MULTILIB_DIRNAMES      += fpu\n-MULTILIB_EXCEPTIONS    += *mthumb/*mfloat-abi=hard*\n-#MULTILIB_EXCEPTIONS    += *mcpu=fa526/*mfloat-abi=hard*\n-#MULTILIB_EXCEPTIONS    += *mcpu=fa626/*mfloat-abi=hard*\n-\n-# MULTILIB_OPTIONS    += mcpu=ep9312\n-# MULTILIB_DIRNAMES   += ep9312\n-# MULTILIB_EXCEPTIONS += *mthumb/*mcpu=ep9312*\n-# \t\n-# MULTILIB_OPTIONS     += mlittle-endian/mbig-endian\n-# MULTILIB_DIRNAMES    += le be\n-# MULTILIB_MATCHES     += mbig-endian=mbe mlittle-endian=mle\n-# \n-# MULTILIB_OPTIONS    += mfloat-abi=hard/mfloat-abi=soft\n-# MULTILIB_DIRNAMES   += fpu soft\n-# MULTILIB_EXCEPTIONS += *mthumb/*mfloat-abi=hard*\n-# \n-# MULTILIB_OPTIONS    += mno-thumb-interwork/mthumb-interwork\n-# MULTILIB_DIRNAMES   += normal interwork\n-# \n-# MULTILIB_OPTIONS    += fno-leading-underscore/fleading-underscore\n-# MULTILIB_DIRNAMES   += elf under\n-# \n-# MULTILIB_OPTIONS    += mcpu=arm7\n-# MULTILIB_DIRNAMES   += nofmult\n-# MULTILIB_EXCEPTIONS += *mthumb*/*mcpu=arm7*\n-# # Note: the multilib_exceptions matches both -mthumb and\n-# # -mthumb-interwork\n-# #\n-# # We have to match all the arm cpu variants which do not have the\n-# # multiply instruction and treat them as if the user had specified\n-# # -mcpu=arm7.  Note that in the following the ? is interpreted as\n-# # an = for the purposes of matching command line options.\n-# # FIXME: There ought to be a better way to do this.\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm7d\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm7di\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm70\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm700\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm700i\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm710\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm710c\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm7100\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm7500\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm7500fe\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm6\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm60\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm600\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm610\n-# MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm620\n+MULTILIB_REUSE\t     += mthumb=mthumb/mfpu.auto\n+MULTILIB_REUSE\t     += mthumb=mthumb/mfpu.auto/march.armv5te+fp\n+MULTILIB_REUSE\t     += mthumb=mthumb/march.armv5te+fp\n+MULTILIB_REUSE\t     += marm/mfpu.auto/march.armv5te+fp/mfloat-abi.hard=marm/march.armv5te+fp/mfloat-abi.hard\n+MULTILIB_REUSE\t     += marm/mfpu.auto/march.armv5te+fp/mfloat-abi.hard=march.armv5te+fp/mfloat-abi.hard\n+MULTILIB_REUSE\t     += marm/mfpu.auto/march.armv5te+fp/mfloat-abi.hard=mfpu.auto/march.armv5te+fp/mfloat-abi.hard\n+MULTILIB_REUSE\t     += mthumb/mfpu.auto/march.armv7+fp/mfloat-abi.hard=mthumb/march.armv7+fp/mfloat-abi.hard\n+MULTILIB_REUSE\t     += mthumb/mfpu.auto/march.armv7+fp/mfloat-abi.hard=mfpu.auto/march.armv7+fp/mfloat-abi.hard\n+MULTILIB_REUSE\t     += mthumb/mfpu.auto/march.armv7+fp/mfloat-abi.hard=march.armv7+fp/mfloat-abi.hard"}]}