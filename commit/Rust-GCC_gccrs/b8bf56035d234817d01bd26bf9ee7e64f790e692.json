{"sha": "b8bf56035d234817d01bd26bf9ee7e64f790e692", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhiZjU2MDM1ZDIzNDgxN2QwMWJkMjZiZjllZTdlNjRmNzkwZTY5Mg==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2018-02-16T17:30:45Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2018-02-16T17:30:45Z"}, "message": "altivec.h: Add builtin names vec_extract4b vec_insert4b.\n\ngcc/ChangeLog:\n\n2018-02-16  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/altivec.h: Add builtin names vec_extract4b\n\tvec_insert4b.\n\t* config/rs6000/rs6000-builtin.def: Add INSERT4B and EXTRACT4B\n\tdefinitions.\n\t* config/rs6000/rs6000-c.c: Add the definitions for\n\tP9V_BUILTIN_VEC_EXTRACT4B and P9V_BUILTIN_VEC_INSERT4B.\n\t* config/rs6000/rs6000.c (altivec_expand_builtin): Add\n\tP9V_BUILTIN_EXTRACT4B and P9V_BUILTIN_INSERT4B case statements.\n\t* config/rs6000/vsx.md: Add define_insn extract4b.  Add define_expand\n\tdefinition for insert4b and define insn *insert3b_internal.\n\t* doc/extend.texi: Add documentation for vec_extract4b.\n\ngcc/testsuite/ChangeLog:\n\n2018-02-16  Carl Love  <cel@us.ibm.com>\n\t* gcc.target/powerpc/builtins-7-p9-runnable.c: New runnable test file\n\tfor the ABI definitions for vec_extract4b and vec_insert4b.\n\nFrom-SVN: r257747", "tree": {"sha": "242cc394bf86720c7cc20fec865f85a945d1ab6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/242cc394bf86720c7cc20fec865f85a945d1ab6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8bf56035d234817d01bd26bf9ee7e64f790e692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bf56035d234817d01bd26bf9ee7e64f790e692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8bf56035d234817d01bd26bf9ee7e64f790e692", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bf56035d234817d01bd26bf9ee7e64f790e692/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "280fa93e667c21e5fd3f3c758939376d35e47223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280fa93e667c21e5fd3f3c758939376d35e47223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280fa93e667c21e5fd3f3c758939376d35e47223"}], "stats": {"total": 252, "additions": 252, "deletions": 0}, "files": [{"sha": "d1c94de2ef8643abb709f15a8ad54129eb2e3e51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8bf56035d234817d01bd26bf9ee7e64f790e692", "patch": "@@ -1,3 +1,17 @@\n+2018-02-16  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h: Add builtin names vec_extract4b\n+\tvec_insert4b.\n+\t* config/rs6000/rs6000-builtin.def: Add INSERT4B and EXTRACT4B\n+\tdefinitions.\n+\t* config/rs6000/rs6000-c.c: Add the definitions for\n+\tP9V_BUILTIN_VEC_EXTRACT4B and P9V_BUILTIN_VEC_INSERT4B.\n+\t* config/rs6000/rs6000.c (altivec_expand_builtin): Add\n+\tP9V_BUILTIN_EXTRACT4B and P9V_BUILTIN_INSERT4B case statements.\n+\t* config/rs6000/vsx.md: Add define_insn extract4b.  Add define_expand\n+\tdefinition for insert4b and define insn *insert3b_internal.\n+\t* doc/extend.texi: Add documentation for vec_extract4b.\n+\n 2018-02-16  Nathan Sidwell  <nathan@acm.org>\n \n \t* doc/extend.texi (Backwards Compatibility): Mention friend"}, {"sha": "3bce2ae396d2f4f759b5cb1d607256002ffea5f5", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=b8bf56035d234817d01bd26bf9ee7e64f790e692", "patch": "@@ -435,6 +435,8 @@\n #define vec_vctzw __builtin_vec_vctzw\n #define vec_vextract4b __builtin_vec_vextract4b\n #define vec_vinsert4b __builtin_vec_vinsert4b\n+#define vec_extract4b __builtin_vec_extract4b\n+#define vec_insert4b __builtin_vec_insert4b\n #define vec_vprtyb __builtin_vec_vprtyb\n #define vec_vprtybd __builtin_vec_vprtybd\n #define vec_vprtybw __builtin_vec_vprtybw"}, {"sha": "420d12e29010d87f053237e2a93dec1b11f7d582", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=b8bf56035d234817d01bd26bf9ee7e64f790e692", "patch": "@@ -2229,6 +2229,8 @@ BU_P9V_AV_2 (VEXTUWRX, \"vextuwrx\",\t\tCONST,\tvextuwrx)\n BU_P9V_VSX_2 (VEXTRACT4B,   \"vextract4b\",\tCONST,\tvextract4b)\n BU_P9V_VSX_3 (VINSERT4B,    \"vinsert4b\",\tCONST,\tvinsert4b)\n BU_P9V_VSX_3 (VINSERT4B_DI, \"vinsert4b_di\",\tCONST,\tvinsert4b_di)\n+BU_P9V_VSX_3 (INSERT4B,    \"insert4b\",\t\tCONST,  insert4b)\n+BU_P9V_VSX_2 (EXTRACT4B,   \"extract4b\", \tCONST,  extract4b)\n \n /* Hardware IEEE 128-bit floating point round to odd instrucitons added in ISA\n    3.0 (power9).  */\n@@ -2291,11 +2293,13 @@ BU_P9V_OVERLOAD_2 (XL_LEN_R,\t\"xl_len_r\")\n BU_P9V_OVERLOAD_2 (VEXTULX,\t\"vextulx\")\n BU_P9V_OVERLOAD_2 (VEXTURX,\t\"vexturx\")\n BU_P9V_OVERLOAD_2 (VEXTRACT4B,\t\"vextract4b\")\n+BU_P9V_OVERLOAD_2 (EXTRACT4B,  \"extract4b\")\n \n /* ISA 3.0 Vector scalar overloaded 3 argument functions */\n BU_P9V_OVERLOAD_3 (STXVL,\t\"stxvl\")\n BU_P9V_OVERLOAD_3 (XST_LEN_R,\t\"xst_len_r\")\n BU_P9V_OVERLOAD_3 (VINSERT4B,\t\"vinsert4b\")\n+BU_P9V_OVERLOAD_3 (INSERT4B,    \"insert4b\")\n \n /* Overloaded CMPNE support was implemented prior to Power 9,\n    so is not mentioned here.  */"}, {"sha": "e4eab59ca4770da9d080253ac95dd91d149cf867", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=b8bf56035d234817d01bd26bf9ee7e64f790e692", "patch": "@@ -5435,6 +5435,8 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_INTDI, RS6000_BTI_V16QI, RS6000_BTI_UINTSI, 0 },\n   { P9V_BUILTIN_VEC_VEXTRACT4B, P9V_BUILTIN_VEXTRACT4B,\n     RS6000_BTI_INTDI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTSI, 0 },\n+  { P9V_BUILTIN_VEC_EXTRACT4B, P9V_BUILTIN_EXTRACT4B,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, 0 },\n \n   { P9V_BUILTIN_VEC_VEXTRACT_FP_FROM_SHORTH, P9V_BUILTIN_VEXTRACT_FP_FROM_SHORTH,\n     RS6000_BTI_V4SF, RS6000_BTI_unsigned_V8HI, 0, 0 },\n@@ -5494,6 +5496,12 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_VGBBD, P8V_BUILTIN_VGBBD,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n \n+  { P9V_BUILTIN_VEC_INSERT4B, P9V_BUILTIN_INSERT4B,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_V4SI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n+  { P9V_BUILTIN_VEC_INSERT4B, P9V_BUILTIN_INSERT4B,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n   { P9V_BUILTIN_VEC_VINSERT4B, P9V_BUILTIN_VINSERT4B,\n     RS6000_BTI_V16QI, RS6000_BTI_V4SI,\n     RS6000_BTI_V16QI, RS6000_BTI_UINTSI },"}, {"sha": "5eca053a25d4894bc1d55cb3e8c044efe4dc6d1f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b8bf56035d234817d01bd26bf9ee7e64f790e692", "patch": "@@ -15743,6 +15743,7 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n \n     case P9V_BUILTIN_VEXTRACT4B:\n     case P9V_BUILTIN_VEC_VEXTRACT4B:\n+    case P9V_BUILTIN_VEC_EXTRACT4B:\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       STRIP_NOPS (arg1);\n \n@@ -15760,6 +15761,7 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n     case P9V_BUILTIN_VINSERT4B:\n     case P9V_BUILTIN_VINSERT4B_DI:\n     case P9V_BUILTIN_VEC_VINSERT4B:\n+    case P9V_BUILTIN_VEC_INSERT4B:\n       arg2 = CALL_EXPR_ARG (exp, 2);\n       STRIP_NOPS (arg2);\n "}, {"sha": "2d36f05e464d3360e2b9df56de2dd58a010f6338", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=b8bf56035d234817d01bd26bf9ee7e64f790e692", "patch": "@@ -5204,6 +5204,47 @@\n ;; Vector insert/extract word at arbitrary byte values.  Note, the little\n ;; endian version needs to adjust the byte number, and the V4SI element in\n ;; vinsert4b.\n+(define_insn \"extract4b\"\n+  [(set (match_operand:V2DI 0 \"vsx_register_operand\")\n+       (unspec:V2DI [(match_operand:V16QI 1 \"vsx_register_operand\" \"wa\")\n+                     (match_operand:QI 2 \"const_0_to_12_operand\" \"n\")]\n+                    UNSPEC_XXEXTRACTUW))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  if (!VECTOR_ELT_ORDER_BIG)\n+    operands[2] = GEN_INT (12 - INTVAL (operands[2]));\n+\n+  return \"xxextractuw %x0,%x1,%2\";\n+})\n+\n+(define_expand \"insert4b\"\n+  [(set (match_operand:V16QI 0 \"vsx_register_operand\")\n+\t(unspec:V16QI [(match_operand:V4SI 1 \"vsx_register_operand\")\n+\t\t       (match_operand:V16QI 2 \"vsx_register_operand\")\n+\t\t       (match_operand:QI 3 \"const_0_to_12_operand\")]\n+\t\t   UNSPEC_XXINSERTW))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  if (!VECTOR_ELT_ORDER_BIG)\n+    {\n+      rtx op1 = operands[1];\n+      rtx v4si_tmp = gen_reg_rtx (V4SImode);\n+      emit_insn (gen_vsx_xxpermdi_v4si_be (v4si_tmp, op1, op1, const1_rtx));\n+      operands[1] = v4si_tmp;\n+      operands[3] = GEN_INT (12 - INTVAL (operands[3]));\n+    }\n+})\n+\n+(define_insn \"*insert4b_internal\"\n+  [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n+\t(unspec:V16QI [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")\n+\t\t       (match_operand:V16QI 2 \"vsx_register_operand\" \"0\")\n+\t\t       (match_operand:QI 3 \"const_0_to_12_operand\" \"n\")]\n+\t\t   UNSPEC_XXINSERTW))]\n+  \"TARGET_P9_VECTOR\"\n+  \"xxinsertw %x0,%x1,%3\"\n+  [(set_attr \"type\" \"vecperm\")])\n+\n (define_expand \"vextract4b\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\")\n \t(unspec:DI [(match_operand:V16QI 1 \"vsx_register_operand\")"}, {"sha": "b7effef17745f3a3ce9afd2889f590d4e99d368b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b8bf56035d234817d01bd26bf9ee7e64f790e692", "patch": "@@ -19056,8 +19056,15 @@ vector int vec_vctzw (vector int);\n vector unsigned int vec_vctzw (vector int);\n \n long long vec_vextract4b (const vector signed char, const int);\n+vector unsigned long long vec_extract4b (vector unsigned char,\n+                                         const int);\n+long long vec_extract4b (const vector signed char, const int);\n long long vec_vextract4b (const vector unsigned char, const int);\n \n+vector unsigned char vec_insert4b (vector signed int, vector unsigned char,\n+                                   const int);\n+vector unsigned char vec_insert4b (vector unsigned int, vector unsigned char,\n+                                   const int);\n vector signed char vec_insert4b (vector int, vector signed char, const int);\n vector unsigned char vec_insert4b (vector unsigned int, vector unsigned char,\n                                    const int);"}, {"sha": "e6f1331d20f3f9261063d7878108ee8344d2b841", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8bf56035d234817d01bd26bf9ee7e64f790e692", "patch": "@@ -1,3 +1,8 @@\n+2018-02-16  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-7-p9-runnable.c: New runnable test file\n+\tfor the ABI definitions for vec_extract4b and vec_insert4b.\n+\n 2018-02-16  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.old-deja/g++.jason/scoping15.C: Expect warnings."}, {"sha": "137b46b052ae4e7ecfa12a353186001a56d897bb", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-7-p9-runnable.c", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-7-p9-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8bf56035d234817d01bd26bf9ee7e64f790e692/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-7-p9-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-7-p9-runnable.c?ref=b8bf56035d234817d01bd26bf9ee7e64f790e692", "patch": "@@ -0,0 +1,169 @@\n+/* { dg-do run { target { powerpc*-*-* && p9vector_hw } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+\n+#include <altivec.h>\n+#define TRUE 1\n+#define FALSE 0\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define EXTRACT 0\n+\n+void abort (void);\n+\n+int result_wrong_ull (vector unsigned long long vec_expected,\n+\t\t      vector unsigned long long vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+int result_wrong_uc (vector unsigned char vec_expected,\n+\t\t     vector unsigned char vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+#ifdef DEBUG\n+void print_ull (vector unsigned long long vec_expected,\n+\t\tvector unsigned long long vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected unsigned long long data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %lld,\", vec_expected[i]);\n+\n+  printf(\"\\nactual signed char data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %lld,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+void print_uc (vector unsigned char vec_expected,\n+\t       vector unsigned char vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected unsigned char data\\n\");\n+  for (i = 0; i < 16; i++)\n+    printf(\" %d,\", vec_expected[i]);\n+\n+  printf(\"\\nactual unsigned char data\\n\");\n+  for (i = 0; i < 16; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+#endif\n+\n+#if EXTRACT\n+vector unsigned long long\n+vext (vector unsigned char *vc)\n+{\n+  return vextract_si_vchar (*vc, 5);\n+}\n+#endif\n+\n+int main()\n+{\n+   vector signed int vsi_arg;\n+   vector unsigned char vec_uc_arg, vec_uc_result, vec_uc_expected;\n+   vector unsigned long long vec_ull_result, vec_ull_expected;\n+   unsigned long long ull_result, ull_expected;\n+\n+   vec_uc_arg = (vector unsigned char){1, 2, 3, 4,\n+\t\t\t\t       5, 6, 7, 8,\n+\t\t\t\t       9, 10, 11, 12,\n+\t\t\t\t       13, 14, 15, 16};\n+\n+   vsi_arg = (vector signed int){0xA, 0xB, 0xC, 0xD};\n+\n+   vec_uc_expected = (vector unsigned char){0xC, 0, 0, 0,\n+\t\t\t\t\t    5, 6, 7, 8,\n+\t\t\t\t\t    9, 10, 11, 12,\n+\t\t\t\t\t    13, 14, 15, 16};\n+   /* Test vec_insert4b() */\n+   /* Insert into char 0 location */\n+   vec_uc_result = vec_insert4b (vsi_arg, vec_uc_arg, 0);\n+\n+   if (result_wrong_uc(vec_uc_expected, vec_uc_result))\n+     {\n+#ifdef DEBUG\n+        printf(\"Error: vec_insert4b pos 0, result does not match expected result\\n\");\n+\tprint_uc (vec_uc_expected, vec_uc_result);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+   /* insert into char 4 location */\n+   vec_uc_expected = (vector unsigned char){1, 2, 3, 4,\n+\t\t\t\t\t    0xC, 0, 0, 0,\n+\t\t\t\t\t    9, 10, 11, 12,\n+\t\t\t\t\t    13, 14, 15, 16};\n+   vec_uc_result = vec_insert4b (vsi_arg, vec_uc_arg, 4);\n+\n+   if (result_wrong_uc(vec_uc_expected, vec_uc_result))\n+     {\n+#ifdef DEBUG\n+        printf(\"Error: vec_insert4b pos 4, result does not match expected result\\n\");\n+\tprint_uc (vec_uc_expected, vec_uc_result);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+   /* Test vec_extract4b() */\n+   /* Extract 4b, from char 0 location */\n+   vec_uc_arg = (vector unsigned char){10, 0, 0, 0,\n+\t\t\t\t       20, 0, 0, 0,\n+\t\t\t\t       30, 0, 0, 0,\n+\t\t\t\t       40, 0, 0, 0};\n+\n+   vec_ull_expected = (vector unsigned long long){0, 10};\n+   vec_ull_result = vec_extract4b(vec_uc_arg, 0);\n+\n+   if (result_wrong_ull(vec_ull_expected, vec_ull_result))\n+     {\n+#ifdef DEBUG\n+        printf(\"Error: vec_extract4b pos 0, result does not match expected result\\n\");\n+\tprint_ull (vec_ull_expected, vec_ull_result);\n+#else\n+        abort();\n+#endif\n+      }\n+\n+   /* Extract 4b, from char 12 location */\n+   vec_uc_arg = (vector unsigned char){10, 0, 0, 0,\n+\t\t\t\t       20, 0, 0, 0,\n+\t\t\t\t       30, 0, 0, 0,\n+\t\t\t\t       40, 0, 0, 0};\n+\n+   vec_ull_expected = (vector unsigned long long){0, 40};\n+   vec_ull_result = vec_extract4b(vec_uc_arg, 12);\n+\n+   if (result_wrong_ull(vec_ull_expected, vec_ull_result))\n+     {\n+#ifdef DEBUG\n+        printf(\"Error: vec_extract4b pos 12, result does not match expected result\\n\");\n+\tprint_ull (vec_ull_expected, vec_ull_result);\n+#else\n+        abort();\n+#endif\n+      }\n+}"}]}