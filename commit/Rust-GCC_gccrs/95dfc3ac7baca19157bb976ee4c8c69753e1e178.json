{"sha": "95dfc3ac7baca19157bb976ee4c8c69753e1e178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVkZmMzYWM3YmFjYTE5MTU3YmI5NzZlZTRjOGM2OTc1M2UxZTE3OA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-04-21T18:07:19Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-04-21T18:07:19Z"}, "message": "libgomp/testsuite: Fix checks for dg-excess-errors\n\nFor the tests modified below, the effective target line has to be effective\nwhen compiling for an offload target, except that variable-not-offloaded.c\nwould compile with unified-share memory and pr86416-*.c if long double/float128\nis supported.\nThe previous check used a run-time device ability check. This new variant\nnow enables those dg- lines when _compiling_ for nvptx or gcn.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/lib/libgomp.exp (offload_target_to_openacc_device_type):\n\tNew, based on check_effective_target_offload_target_nvptx.\n\t(check_effective_target_offload_target_nvptx): Call it.\n\t(check_effective_target_offload_target_amdgcn): New.\n\t* testsuite/libgomp.c-c++-common/function-not-offloaded.c:\n\tRequire target offload_target_nvptx || offload_target_amdgcn.\n\t* testsuite/libgomp.c-c++-common/variable-not-offloaded.c: Likewise.\n\t* testsuite/libgomp.c/pr86416-1.c: Likewise.\n\t* testsuite/libgomp.c/pr86416-2.c: Likewise.", "tree": {"sha": "e06cd260038bdf1f7379edbdefae5c1cf8c74a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e06cd260038bdf1f7379edbdefae5c1cf8c74a80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95dfc3ac7baca19157bb976ee4c8c69753e1e178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95dfc3ac7baca19157bb976ee4c8c69753e1e178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95dfc3ac7baca19157bb976ee4c8c69753e1e178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95dfc3ac7baca19157bb976ee4c8c69753e1e178/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2fc1702cb3a3d5cc9c40de47f63b4c8f3f1d09c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2fc1702cb3a3d5cc9c40de47f63b4c8f3f1d09c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2fc1702cb3a3d5cc9c40de47f63b4c8f3f1d09c"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "46cce9b8445e5760c850e4cabc888f162fd353ad", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dfc3ac7baca19157bb976ee4c8c69753e1e178/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dfc3ac7baca19157bb976ee4c8c69753e1e178/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=95dfc3ac7baca19157bb976ee4c8c69753e1e178", "patch": "@@ -340,8 +340,10 @@ proc offload_target_to_openacc_device_type { offload_target } {\n     }\n }\n \n-# Return 1 if compiling for offload target nvptx.\n-proc check_effective_target_offload_target_nvptx { } {\n+# Return 1 if compiling for the specified offload target\n+# Takes -foffload=... into account by checking OFFLOAD_TARGET_NAMES=\n+# in the -v compiler output.\n+proc libgomp_check_effective_target_offload_target { target_name } {\n     # Consider all actual options, including the flags passed to\n     # 'gcc-dg-runtest', or 'gfortran-dg-runtest' (see the 'libgomp.*/*.exp'\n     # files; in particular, '-foffload', 'libgomp.oacc-*/*.exp'), which don't\n@@ -354,13 +356,23 @@ proc check_effective_target_offload_target_nvptx { } {\n     set gcc_output [libgomp_target_compile \"\" \"\" \"none\" $options]\n     if [regexp \"(?n)^OFFLOAD_TARGET_NAMES=(.*)\" $gcc_output dummy offload_targets] {\n \tverbose \"compiling for offload targets: $offload_targets\"\n-\treturn [string match \"*:nvptx*:*\" \":$offload_targets:\"]\n+\treturn [string match \"*:$target_name*:*\" \":$offload_targets:\"]\n     }\n \n-    verbose \"not compiling for any offload targets\"\n+    verbose \"not compiling for $target_name offload target\"\n     return 0\n }\n \n+# Return 1 if compiling for offload target nvptx.\n+proc check_effective_target_offload_target_nvptx { } {\n+    return [libgomp_check_effective_target_offload_target \"nvptx\"]\n+}\n+\n+# Return 1 if compiling for offload target amdgcn\n+proc check_effective_target_offload_target_amdgcn { } {\n+    return [libgomp_check_effective_target_offload_target \"amdgcn\"]\n+}\n+\n # Return 1 if offload device is available.\n proc check_effective_target_offload_device { } {\n     return [check_runtime_nocache offload_device_available_ {"}, {"sha": "bc1ae68941a0394c4a60086fbd958545cb4af284", "filename": "libgomp/testsuite/libgomp.c-c++-common/function-not-offloaded.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dfc3ac7baca19157bb976ee4c8c69753e1e178/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffunction-not-offloaded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dfc3ac7baca19157bb976ee4c8c69753e1e178/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffunction-not-offloaded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffunction-not-offloaded.c?ref=95dfc3ac7baca19157bb976ee4c8c69753e1e178", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do link } */\n-/* { dg-excess-errors \"unresolved symbol foo, lto1, mkoffload and lto-wrapper fatal errors\" { target offload_device_nonshared_as } } */\n+/* { dg-excess-errors \"unresolved symbol foo, lto1, mkoffload and lto-wrapper fatal errors\" { target { offload_target_nvptx || offload_target_amdgcn } } } */\n /* { dg-additional-sources \"function-not-offloaded-aux.c\" } */\n \n #pragma omp declare target"}, {"sha": "fe2a8b26242707d28bed8ec155397e9b928e7b6c", "filename": "libgomp/testsuite/libgomp.c-c++-common/variable-not-offloaded.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dfc3ac7baca19157bb976ee4c8c69753e1e178/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fvariable-not-offloaded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dfc3ac7baca19157bb976ee4c8c69753e1e178/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fvariable-not-offloaded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fvariable-not-offloaded.c?ref=95dfc3ac7baca19157bb976ee4c8c69753e1e178", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do link } */\n-/* { dg-excess-errors \"lto1, mkoffload and lto-wrapper fatal errors\" { target offload_device_nonshared_as } } */\n+/* { dg-excess-errors \"lto1, mkoffload and lto-wrapper fatal errors\" { target { offload_target_nvptx || offload_target_amdgcn } } } */\n \n-int var; /* { dg-error \"variable 'var' has been referenced in offloaded code but hasn't been marked to be included in the offloaded code\" \"\" { target offload_device_nonshared_as } } */\n+int var; /* { dg-error \"variable 'var' has been referenced in offloaded code but hasn't been marked to be included in the offloaded code\" \"\" { target { offload_target_nvptx || offload_target_amdgcn } } } */\n \n #pragma omp declare target\n void  __attribute__((noinline, noclone))"}, {"sha": "6d3869264fdef1da53bce3bc3cafaa8260168139", "filename": "libgomp/testsuite/libgomp.c/pr86416-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dfc3ac7baca19157bb976ee4c8c69753e1e178/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dfc3ac7baca19157bb976ee4c8c69753e1e178/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-1.c?ref=95dfc3ac7baca19157bb976ee4c8c69753e1e178", "patch": "@@ -2,8 +2,8 @@\n /* { dg-require-effective-target large_long_double } */\n \n /* PR middle-end/86416  */\n-/* { dg-error \"bit-precision floating-point numbers unsupported .mode '.F'.\" \"\" { target offload_device } 0 }  */\n-/* { dg-excess-errors \"Follow-up errors from mkoffload and lto-wrapper\" { target offload_device } }  */\n+/* { dg-error \"bit-precision floating-point numbers unsupported .mode '.F'.\" \"\" { target { offload_target_nvptx || offload_target_amdgcn } } 0 }  */\n+/* { dg-excess-errors \"Follow-up errors from mkoffload and lto-wrapper\" { target { offload_target_nvptx || offload_target_amdgcn } } }  */\n \n #include <stdlib.h>  /* For abort. */\n "}, {"sha": "cffeb3f7107ce394ed42c3171c4ecf7fe94f30e0", "filename": "libgomp/testsuite/libgomp.c/pr86416-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95dfc3ac7baca19157bb976ee4c8c69753e1e178/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95dfc3ac7baca19157bb976ee4c8c69753e1e178/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr86416-2.c?ref=95dfc3ac7baca19157bb976ee4c8c69753e1e178", "patch": "@@ -2,8 +2,8 @@\n /* { dg-add-options __float128 } */\n \n /* PR middle-end/86416  */\n-/* { dg-error \"bit-precision floating-point numbers unsupported .mode '.F'.\" \"\" { target offload_device } 0 }  */\n-/* { dg-excess-errors \"Follow-up errors from mkoffload and lto-wrapper\" { target offload_device } }  */\n+/* { dg-error \"bit-precision floating-point numbers unsupported .mode '.F'.\" \"\" { target { offload_target_nvptx || offload_target_amdgcn } } 0 }  */\n+/* { dg-excess-errors \"Follow-up errors from mkoffload and lto-wrapper\" { target { offload_target_nvptx || offload_target_amdgcn } } }  */\n \n #include <stdlib.h>  /* For abort. */\n "}]}