{"sha": "2f7c50b7091c09d665aaf27173aacf34c9904e4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3YzUwYjcwOTFjMDlkNjY1YWFmMjcxNzNhYWNmMzRjOTkwNGU0Yw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-06T21:59:07Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-10-07T13:39:37Z"}, "message": "analyzer: handle C++ argument numbers and \"this\" [PR97116]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/97116\n\t* sm-malloc.cc (method_p): New.\n\t(describe_argument_index): New.\n\t(inform_nonnull_attribute): Use describe_argument_index.\n\t(possible_null_arg::describe_final_event): Likewise.\n\t(null_arg::describe_final_event): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/97116\n\t* g++.dg/analyzer/pr97116.C: New test.", "tree": {"sha": "c6b83159151e44279b7b1c6c41d2d2deef7e252a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6b83159151e44279b7b1c6c41d2d2deef7e252a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f7c50b7091c09d665aaf27173aacf34c9904e4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7c50b7091c09d665aaf27173aacf34c9904e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7c50b7091c09d665aaf27173aacf34c9904e4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7c50b7091c09d665aaf27173aacf34c9904e4c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7345c89ecb1a31ce96c6789bffc7183268a040b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7345c89ecb1a31ce96c6789bffc7183268a040b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7345c89ecb1a31ce96c6789bffc7183268a040b3"}], "stats": {"total": 100, "additions": 86, "deletions": 14}, "files": [{"sha": "fd12a358176ee656a779f95b47d8a5e03d1c1ffd", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7c50b7091c09d665aaf27173aacf34c9904e4c/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7c50b7091c09d665aaf27173aacf34c9904e4c/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=2f7c50b7091c09d665aaf27173aacf34c9904e4c", "patch": "@@ -562,15 +562,40 @@ class possible_null_deref : public possible_null\n \n };\n \n+/* Return true if FNDECL is a C++ method.  */\n+\n+static bool\n+method_p (tree fndecl)\n+{\n+  return TREE_CODE (TREE_TYPE (fndecl)) == METHOD_TYPE;\n+}\n+\n+/* Return a 1-based description of ARG_IDX (0-based) of FNDECL.\n+   Compare with %P in the C++ FE  (implemented in cp/error.c: parm_to_string\n+   as called from cp_printer).  */\n+\n+static label_text\n+describe_argument_index (tree fndecl, int arg_idx)\n+{\n+  if (method_p (fndecl))\n+    if (arg_idx == 0)\n+      return label_text::borrow (\"'this'\");\n+  pretty_printer pp;\n+  pp_printf (&pp, \"%u\", arg_idx + 1 - method_p (fndecl));\n+  return label_text::take (xstrdup (pp_formatted_text (&pp)));\n+}\n+\n /* Subroutine for use by possible_null_arg::emit and null_arg::emit.\n    Issue a note informing that the pertinent argument must be non-NULL.  */\n \n static void\n inform_nonnull_attribute (tree fndecl, int arg_idx)\n {\n+  label_text arg_desc = describe_argument_index (fndecl, arg_idx);\n   inform (DECL_SOURCE_LOCATION (fndecl),\n-\t  \"argument %u of %qD must be non-null\",\n-\t  arg_idx + 1, fndecl);\n+\t  \"argument %s of %qD must be non-null\",\n+\t  arg_desc.m_buffer, fndecl);\n+  arg_desc.maybe_free ();\n   /* Ideally we would use the location of the parm and underline the\n      attribute also - but we don't have the location_t values at this point\n      in the middle-end.\n@@ -618,15 +643,19 @@ class possible_null_arg : public possible_null\n \n   label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n   {\n+    label_text arg_desc = describe_argument_index (m_fndecl, m_arg_idx);\n+    label_text result;\n     if (m_origin_of_unchecked_event.known_p ())\n-      return ev.formatted_print (\"argument %u (%qE) from %@ could be NULL\"\n-\t\t\t\t \" where non-null expected\",\n-\t\t\t\t m_arg_idx + 1, ev.m_expr,\n-\t\t\t\t &m_origin_of_unchecked_event);\n+      result = ev.formatted_print (\"argument %s (%qE) from %@ could be NULL\"\n+\t\t\t\t   \" where non-null expected\",\n+\t\t\t\t   arg_desc.m_buffer, ev.m_expr,\n+\t\t\t\t   &m_origin_of_unchecked_event);\n     else\n-      return ev.formatted_print (\"argument %u (%qE) could be NULL\"\n-\t\t\t\t \" where non-null expected\",\n-\t\t\t\t m_arg_idx + 1, ev.m_expr);\n+      result = ev.formatted_print (\"argument %s (%qE) could be NULL\"\n+\t\t\t\t   \" where non-null expected\",\n+\t\t\t\t   arg_desc.m_buffer, ev.m_expr);\n+    arg_desc.maybe_free ();\n+    return result;\n   }\n \n private:\n@@ -714,13 +743,17 @@ class null_arg : public malloc_diagnostic\n \n   label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n   {\n+    label_text arg_desc = describe_argument_index (m_fndecl, m_arg_idx);\n+    label_text result;\n     if (zerop (ev.m_expr))\n-      return ev.formatted_print (\"argument %u NULL where non-null expected\",\n-\t\t\t\t m_arg_idx + 1);\n+      result = ev.formatted_print (\"argument %s NULL where non-null expected\",\n+\t\t\t\t   arg_desc.m_buffer);\n     else\n-      return ev.formatted_print (\"argument %u (%qE) NULL\"\n-\t\t\t\t \" where non-null expected\",\n-\t\t\t\t m_arg_idx + 1, ev.m_expr);\n+      result = ev.formatted_print (\"argument %s (%qE) NULL\"\n+\t\t\t\t   \" where non-null expected\",\n+\t\t\t\t   arg_desc.m_buffer, ev.m_expr);\n+    arg_desc.maybe_free ();\n+    return result;\n   }\n \n private:"}, {"sha": "d8e08a73172df7304e7f4af982061f68b0db6e7e", "filename": "gcc/testsuite/g++.dg/analyzer/pr97116.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7c50b7091c09d665aaf27173aacf34c9904e4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr97116.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7c50b7091c09d665aaf27173aacf34c9904e4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr97116.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr97116.C?ref=2f7c50b7091c09d665aaf27173aacf34c9904e4c", "patch": "@@ -0,0 +1,39 @@\n+#include <new>\n+#include <cstddef>\n+\n+struct foo\n+{\n+  foo (int i) : m_i (i) {} // { dg-message \"argument 'this' of 'foo::foo\\\\(int\\\\)' must be non-null\" \"note\" }\n+\n+  int get () const { return m_i; } // { dg-message \"argument 'this' of '\\[^\\n\\]*' must be non-null\" \"note\" }\n+  \n+  int meth_1 (int, void *ptr) __attribute__((nonnull)); // { dg-message \"argument 2 of '\\[^\\n\\]*' must be non-null\" \"note\" }\n+  int meth_2 (int, void *ptr) __attribute__((nonnull(3))); // { dg-message \"argument 2 of '\\[^\\n\\]*' must be non-null\" \"note\" }\n+\n+  int m_i;\n+};\n+\n+void test_1 (void)\n+{\n+  foo *p = new(NULL) foo (42); // { dg-warning \"non-null expected\" \"warning\" }\n+  // { dg-message \"argument 'this' \\\\(\\[^\\n\\]*\\\\) NULL where non-null expected\" \"final event\" { target *-*-* } .-1 }\n+}\n+\n+int test_2 (void)\n+{\n+  foo *p = NULL;\n+  return p->get (); // { dg-warning \"non-null expected\" \"warning\" }\n+  // { dg-message \"argument 'this' \\\\('p'\\\\) NULL where non-null expected\" \"final event\" { target *-*-* } .-1 }\n+}\n+\n+int test_meth_1 (foo *f)\n+{\n+  return f->meth_1 (42, NULL); // { dg-warning \"non-null expected\" \"warning\" }\n+  // { dg-message \"argument 2 NULL where non-null expected\" \"final event\" { target *-*-* } .-1 }\n+}\n+\n+int test_meth_2 (foo *f)\n+{\n+  return f->meth_2 (42, NULL); // { dg-warning \"non-null expected\" \"warning\" }\n+  // { dg-message \"argument 2 NULL where non-null expected\" \"final event\" { target *-*-* } .-1 }\n+}"}]}