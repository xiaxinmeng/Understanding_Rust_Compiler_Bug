{"sha": "8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU2OTMyOWE4MmM0NWEzMWU4NGVmMzY5OGFkM2U3Y2JmY2ExYzNhOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-09-01T20:07:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-01T20:07:22Z"}, "message": "* call.c (null_ptr_cst_p): Remove support for (void*)0.\n\nFrom-SVN: r15022", "tree": {"sha": "5f10735c6c9f875199a83565eda7caabeac21d8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f10735c6c9f875199a83565eda7caabeac21d8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9/comments", "author": null, "committer": null, "parents": [{"sha": "f3e0ca6c2dd19b89e3a6a8ea654abb06ac05770a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3e0ca6c2dd19b89e3a6a8ea654abb06ac05770a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3e0ca6c2dd19b89e3a6a8ea654abb06ac05770a"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "472affb2e375cf33fbb391f1f09d910d44a0d8e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9", "patch": "@@ -1,3 +1,7 @@\n+Thu Aug 28 09:45:23 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* call.c (null_ptr_cst_p): Remove support for (void*)0.\n+\n Wed Aug 27 02:03:34 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* typeck.c (expand_target_expr): Make definition match declaration."}, {"sha": "ecfa34ff378f7faf69f2f2b35da8ebc12af9d8ce", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9", "patch": "@@ -7,7 +7,9 @@\n \n   for more information.\n \n-* New flags -Wsign-promo, -Wno-pmf-conversion.\n+* New flags -Wsign-promo (warn about potentially confusing promotions in\n+  overload resolution), -Wno-pmf-conversion (don't warn about converting\n+  from a bound member function pointer to function pointer).\n \n * local static variables in extern inline functions will be shared between\n   translation units.\n@@ -65,7 +67,7 @@\n   already has virtual functions, only if they override a virtual destructor\n   in a base class.  The compiler will warn if this affects your code.\n \n-* The g++ driver no longer links with libg++ by default; it is now\n+* The g++ driver now only links against libstdc++, not libg++; it is\n   functionally identical to the c++ driver.\n \n * (void *)0 is no longer considered a null pointer constant; NULL in\n@@ -102,6 +104,11 @@\n      + Syntax errors in templates that are never instantiated will now be\n        diagnosed.\n \n+  Still not supported:\n+\n+     + Member templates.\n+     + Template template parameters.\n+\n * Synthesized methods are now emitted in any translation units that need\n   an out-of-line copy. They are no longer affected by #pragma interface\n   or #pragma implementation."}, {"sha": "26319f61d6d8d984fc52c0164f75cb5c6ecf7ce8", "filename": "gcc/cp/call.c", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8e69329a82c45a31e84ef3698ad3e7cbfca1c3a9", "patch": "@@ -2998,9 +2998,6 @@ null_ptr_cst_p (t)\n   if (t == null_node\n       || integer_zerop (t) && INTEGRAL_TYPE_P (TREE_TYPE (t)))\n     return 1;\n-  /* Remove this eventually.  */\n-  if (! pedantic && TREE_TYPE (t) == ptr_type_node && integer_zerop (t))\n-    return 1;\n   return 0;\n }\n \n@@ -3697,7 +3694,7 @@ add_builtin_candidate (candidates, code, code2, fnname, type1, type2,\n \t{\n \t  tree c1 = TREE_TYPE (type1);\n \t  tree c2 = (TYPE_PTRMEMFUNC_P (type2)\n-\t\t     ? TYPE_METHOD_BASETYPE (TYPE_PTRMEMFUNC_FN_TYPE (type2))\n+\t\t     ? TYPE_METHOD_BASETYPE (TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (type2)))\n \t\t     : TYPE_OFFSET_BASETYPE (TREE_TYPE (type2)));\n \n \t  if (IS_AGGR_TYPE (c1) && DERIVED_FROM_P (c2, c1)\n@@ -5658,8 +5655,8 @@ compare_ics (ics1, ics2)\n \t\n       if (TYPE_PTRMEMFUNC_P (to1))\n \t{\n-\t  to1 = TYPE_METHOD_BASETYPE (TYPE_PTRMEMFUNC_FN_TYPE (to1));\n-\t  from1 = TYPE_METHOD_BASETYPE (TYPE_PTRMEMFUNC_FN_TYPE (from1));\n+\t  to1 = TYPE_METHOD_BASETYPE (TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (to1)));\n+\t  from1 = TYPE_METHOD_BASETYPE (TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (from1)));\n \t}\n       else if (TREE_CODE (main1) != BASE_CONV)\n \t{\n@@ -5676,8 +5673,8 @@ compare_ics (ics1, ics2)\n \n       if (TYPE_PTRMEMFUNC_P (to2))\n \t{\n-\t  to2 = TYPE_METHOD_BASETYPE (TYPE_PTRMEMFUNC_FN_TYPE (to2));\n-\t  from2 = TYPE_METHOD_BASETYPE (TYPE_PTRMEMFUNC_FN_TYPE (from2));\n+\t  to2 = TYPE_METHOD_BASETYPE (TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (to2)));\n+\t  from2 = TYPE_METHOD_BASETYPE (TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE (from2)));\n \t}\n       else if (TREE_CODE (main1) != BASE_CONV)\n \t{\n@@ -5778,6 +5775,20 @@ compare_ics (ics1, ics2)\n   return 0;\n }\n \n+static tree\n+source_type (t)\n+     tree t;\n+{\n+  for (;; t = TREE_OPERAND (t, 0))\n+    {\n+      if (TREE_CODE (t) == USER_CONV\n+\t  || TREE_CODE (t) == AMBIG_CONV\n+\t  || TREE_CODE (t) == IDENTITY_CONV)\n+\treturn TREE_TYPE (t);\n+    }\n+  my_friendly_abort (1823);\n+}\n+\n /* Compare two candidates for overloading as described in\n    [over.match.best].  Return values:\n \n@@ -5868,6 +5879,27 @@ joust (cand1, cand2)\n \t}\n     }\n \n+  /* warn about confusing overload resolution */\n+  if (winner && cand1->second_conv\n+      && ! DECL_CONSTRUCTOR_P (cand1->fn)\n+      && ! DECL_CONSTRUCTOR_P (cand2->fn))\n+    {\n+      int comp = compare_ics (cand1->second_conv, cand2->second_conv);\n+      if (comp && comp != winner)\n+\t{\n+\t  struct z_candidate *w, *l;\n+\t  if (winner == 1)\n+\t    w = cand1, l = cand2;\n+\t  else\n+\t    w = cand2, l = cand1;\n+\t  cp_warning (\"choosing `%D' over `%D'\", w->fn, l->fn);\n+\t  cp_warning (\"  for conversion from `%T' to `%T'\",\n+\t\t      TREE_TYPE (source_type (TREE_VEC_ELT (w->convs, 0))),\n+\t\t      TREE_TYPE (w->second_conv));\n+\t  cp_warning (\"  because conversion sequence for `this' argument is better\");\n+\t}\n+    }\n+\n   if (winner)\n     return winner;\n "}]}