{"sha": "fb5bc08bb353a574a011eaf5b7ae874672e4b289", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1YmMwOGJiMzUzYTU3NGEwMTFlYWY1YjdhZTg3NDY3MmU0YjI4OQ==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2008-12-18T10:05:54Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2008-12-18T10:05:54Z"}, "message": "re PR fortran/31822 (Missing run-time bound checks for character pointer => target)\n\n2008-12-18  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/31822\n\t* gfortran.h (gfc_check_same_strlen): Made public.\n\t* trans.h (gfc_trans_same_strlen_check): Made public.\n\t* check.c (gfc_check_same_strlen): Made public and adapted error\n\tmessage output to be useful not only for intrinsics.\n\t(gfc_check_merge): Adapt to gfc_check_same_strlen change.\n\t* expr.c (gfc_check_pointer_assign): Use gfc_check_same_strlen for\n\tstring length compile-time check.\n\t* trans-expr.c (gfc_trans_pointer_assignment): Add runtime-check for\n\tequal string lengths using gfc_trans_same_strlen_check.\n\t* trans-intrinsic.c (gfc_trans_same_strlen_check): Renamed and made\n\tpublic from conv_same_strlen_check.\n\t(gfc_conv_intrinsic_merge): Adapted accordingly.\n\n2008-12-18  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/31822\n\t* gfortran.dg/char_pointer_assign_2.f90: Updated expected error message\n\tto be more detailed.\n\t* gfortran.dg/char_pointer_assign_4.f90: New test.\n\t* gfortran.dg/char_pointer_assign_5.f90: New test.\n\nFrom-SVN: r142808", "tree": {"sha": "c4d520f172c9b4f97852d08d4e5fc12e76b2adde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4d520f172c9b4f97852d08d4e5fc12e76b2adde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb5bc08bb353a574a011eaf5b7ae874672e4b289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5bc08bb353a574a011eaf5b7ae874672e4b289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5bc08bb353a574a011eaf5b7ae874672e4b289", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5bc08bb353a574a011eaf5b7ae874672e4b289/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec81df7d4e83ddd28014e07e0eec7fe0e3559deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb"}], "stats": {"total": 151, "additions": 125, "deletions": 26}, "files": [{"sha": "c33c58c6d940708e7ef5265d55dd2566aa17d0dd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fb5bc08bb353a574a011eaf5b7ae874672e4b289", "patch": "@@ -1,3 +1,19 @@\n+2008-12-18  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/31822\n+\t* gfortran.h (gfc_check_same_strlen): Made public.\n+\t* trans.h (gfc_trans_same_strlen_check): Made public.\n+\t* check.c (gfc_check_same_strlen): Made public and adapted error\n+\tmessage output to be useful not only for intrinsics.\n+\t(gfc_check_merge): Adapt to gfc_check_same_strlen change.\n+\t* expr.c (gfc_check_pointer_assign): Use gfc_check_same_strlen for\n+\tstring length compile-time check.\n+\t* trans-expr.c (gfc_trans_pointer_assignment): Add runtime-check for\n+\tequal string lengths using gfc_trans_same_strlen_check.\n+\t* trans-intrinsic.c (gfc_trans_same_strlen_check): Renamed and made\n+\tpublic from conv_same_strlen_check.\n+\t(gfc_conv_intrinsic_merge): Adapted accordingly.\n+\n 2008-12-17  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/38137"}, {"sha": "8b2732bce1e06de758fac198b340b154e20706b8", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=fb5bc08bb353a574a011eaf5b7ae874672e4b289", "patch": "@@ -396,8 +396,8 @@ identical_dimen_shape (gfc_expr *a, int ai, gfc_expr *b, int bi)\n /* Check whether two character expressions have the same length;\n    returns SUCCESS if they have or if the length cannot be determined.  */\n \n-static gfc_try\n-check_same_strlen (const gfc_expr *a, const gfc_expr *b, const char *name)\n+gfc_try\n+gfc_check_same_strlen (const gfc_expr *a, const gfc_expr *b, const char *name)\n {\n    long len_a, len_b;\n    len_a = len_b = -1;\n@@ -423,8 +423,8 @@ check_same_strlen (const gfc_expr *a, const gfc_expr *b, const char *name)\n    if (len_a == len_b)\n      return SUCCESS;\n \n-   gfc_error (\"Unequal character lengths (%ld and %ld) in %s intrinsic \"\n-\t      \"at %L\", len_a, len_b, name, &a->where);\n+   gfc_error (\"Unequal character lengths (%ld/%ld) in %s at %L\",\n+\t      len_a, len_b, name, &a->where);\n    return FAILURE;\n }\n \n@@ -2011,7 +2011,7 @@ gfc_check_merge (gfc_expr *tsource, gfc_expr *fsource, gfc_expr *mask)\n     return FAILURE;\n \n   if (tsource->ts.type == BT_CHARACTER)\n-    return check_same_strlen (tsource, fsource, \"MERGE\");\n+    return gfc_check_same_strlen (tsource, fsource, \"MERGE intrinsic\");\n \n   return SUCCESS;\n }"}, {"sha": "8a992ca9e8f0e75f554633805a0dced056c54e27", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=fb5bc08bb353a574a011eaf5b7ae874672e4b289", "patch": "@@ -3179,15 +3179,11 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n   if (rvalue->expr_type == EXPR_NULL)\n     return SUCCESS;\n \n-  if (lvalue->ts.type == BT_CHARACTER\n-      && lvalue->ts.cl && rvalue->ts.cl\n-      && lvalue->ts.cl->length && rvalue->ts.cl->length\n-      && abs (gfc_dep_compare_expr (lvalue->ts.cl->length,\n-\t\t\t\t    rvalue->ts.cl->length)) == 1)\n+  if (lvalue->ts.type == BT_CHARACTER)\n     {\n-      gfc_error (\"Different character lengths in pointer \"\n-\t\t \"assignment at %L\", &lvalue->where);\n-      return FAILURE;\n+      gfc_try t = gfc_check_same_strlen (lvalue, rvalue, \"pointer assignment\");\n+      if (t == FAILURE)\n+\treturn FAILURE;\n     }\n \n   if (rvalue->expr_type == EXPR_VARIABLE && is_subref_array (rvalue))"}, {"sha": "c05fb889db89fc412dd70f3c347518d058341970", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=fb5bc08bb353a574a011eaf5b7ae874672e4b289", "patch": "@@ -2580,4 +2580,7 @@ void gfc_global_used (gfc_gsymbol *, locus *);\n /* dependency.c */\n int gfc_dep_compare_expr (gfc_expr *, gfc_expr *);\n \n+/* check.c */\n+gfc_try gfc_check_same_strlen (const gfc_expr*, const gfc_expr*, const char*);\n+\n #endif /* GCC_GFORTRAN_H  */"}, {"sha": "5d41145df06808afaa9aae42b0a084325e1989c9", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=fb5bc08bb353a574a011eaf5b7ae874672e4b289", "patch": "@@ -4016,7 +4016,6 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n   tree tmp;\n   tree decl;\n \n-\n   gfc_start_block (&block);\n \n   gfc_init_se (&lse, NULL);\n@@ -4039,15 +4038,32 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \n       gfc_add_block_to_block (&block, &lse.pre);\n       gfc_add_block_to_block (&block, &rse.pre);\n+\n+      /* Check character lengths if character expression.  The test is only\n+\t really added if -fbounds-check is enabled.  */\n+      if (expr1->ts.type == BT_CHARACTER && expr2->expr_type != EXPR_NULL)\n+\t{\n+\t  gcc_assert (expr2->ts.type == BT_CHARACTER);\n+\t  gcc_assert (lse.string_length && rse.string_length);\n+\t  gfc_trans_same_strlen_check (\"pointer assignment\", &expr1->where,\n+\t\t\t\t       lse.string_length, rse.string_length,\n+\t\t\t\t       &block);\n+\t}\n+\n       gfc_add_modify (&block, lse.expr,\n \t\t\t   fold_convert (TREE_TYPE (lse.expr), rse.expr));\n+\n       gfc_add_block_to_block (&block, &rse.post);\n       gfc_add_block_to_block (&block, &lse.post);\n     }\n   else\n     {\n+      tree strlen_lhs;\n+      tree strlen_rhs = NULL_TREE;\n+\n       /* Array pointer.  */\n       gfc_conv_expr_descriptor (&lse, expr1, lss);\n+      strlen_lhs = lse.string_length;\n       switch (expr2->expr_type)\n \t{\n \tcase EXPR_NULL:\n@@ -4057,8 +4073,9 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \n \tcase EXPR_VARIABLE:\n \t  /* Assign directly to the pointer's descriptor.  */\n-          lse.direct_byref = 1;\n+\t  lse.direct_byref = 1;\n \t  gfc_conv_expr_descriptor (&lse, expr2, rss);\n+\t  strlen_rhs = lse.string_length;\n \n \t  /* If this is a subreference array pointer assignment, use the rhs\n \t     descriptor element size for the lhs span.  */\n@@ -4071,7 +4088,7 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \t      tmp = gfc_get_element_type (TREE_TYPE (rse.expr));\n \t      tmp = fold_convert (gfc_array_index_type, size_in_bytes (tmp));\n \t      if (!INTEGER_CST_P (tmp))\n-\t        gfc_add_block_to_block (&lse.post, &rse.pre);\n+\t\tgfc_add_block_to_block (&lse.post, &rse.pre);\n \t      gfc_add_modify (&lse.post, GFC_DECL_SPAN(decl), tmp);\n \t    }\n \n@@ -4086,10 +4103,23 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \t  lse.expr = tmp;\n \t  lse.direct_byref = 1;\n \t  gfc_conv_expr_descriptor (&lse, expr2, rss);\n+\t  strlen_rhs = lse.string_length;\n \t  gfc_add_modify (&lse.pre, desc, tmp);\n \t  break;\n-        }\n+\t}\n+\n       gfc_add_block_to_block (&block, &lse.pre);\n+\n+      /* Check string lengths if applicable.  The check is only really added\n+\t to the output code if -fbounds-check is enabled.  */\n+      if (expr1->ts.type == BT_CHARACTER && expr2->expr_type != EXPR_NULL)\n+\t{\n+\t  gcc_assert (expr2->ts.type == BT_CHARACTER);\n+\t  gcc_assert (strlen_lhs && strlen_rhs);\n+\t  gfc_trans_same_strlen_check (\"pointer assignment\", &expr1->where,\n+\t\t\t\t       strlen_lhs, strlen_rhs, &block);\n+\t}\n+\n       gfc_add_block_to_block (&block, &lse.post);\n     }\n   return gfc_finish_block (&block);"}, {"sha": "e006ea718a8dfbe58fe12270d94b52178c62249e", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=fb5bc08bb353a574a011eaf5b7ae874672e4b289", "patch": "@@ -751,9 +751,9 @@ gfc_conv_intrinsic_lib_function (gfc_se * se, gfc_expr * expr)\n    string lengths for both expressions are the same (needed for e.g. MERGE).\n    If bounds-checking is not enabled, does nothing.  */\n \n-static void\n-conv_same_strlen_check (const char* intr_name, locus* where, tree a, tree b,\n-\t\t\tstmtblock_t* target)\n+void\n+gfc_trans_same_strlen_check (const char* intr_name, locus* where,\n+\t\t\t     tree a, tree b, stmtblock_t* target)\n {\n   tree cond;\n   tree name;\n@@ -769,8 +769,7 @@ conv_same_strlen_check (const char* intr_name, locus* where, tree a, tree b,\n   name = gfc_build_cstring_const (intr_name);\n   name = gfc_build_addr_expr (pchar_type_node, name);\n   gfc_trans_runtime_check (true, false, cond, target, where,\n-\t\t\t   \"Unequal character lengths (%ld/%ld) for arguments\"\n-\t\t\t   \" to %s\",\n+\t\t\t   \"Unequal character lengths (%ld/%ld) in %s\",\n \t\t\t   fold_convert (long_integer_type_node, a),\n \t\t\t   fold_convert (long_integer_type_node, b), name);\n }\n@@ -3081,8 +3080,8 @@ gfc_conv_intrinsic_merge (gfc_se * se, gfc_expr * expr)\n       fsource = args[3];\n       mask = args[4];\n \n-      conv_same_strlen_check (\"MERGE\", &expr->where, len, len2, &se->post);\n-\n+      gfc_trans_same_strlen_check (\"MERGE intrinsic\", &expr->where, len, len2,\n+\t\t\t\t   &se->pre);\n       se->string_length = len;\n     }\n   type = TREE_TYPE (tsource);"}, {"sha": "aa217751a33b92be9816dbb45542b34987b6bdda", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=fb5bc08bb353a574a011eaf5b7ae874672e4b289", "patch": "@@ -458,6 +458,10 @@ tree gfc_trans_runtime_error_vararg (bool, locus*, const char*, va_list);\n void gfc_trans_runtime_check (bool, bool, tree, stmtblock_t *, locus *,\n \t\t\t      const char *, ...);\n \n+/* Generate a runtime check for same string length.  */\n+void gfc_trans_same_strlen_check (const char*, locus*, tree, tree,\n+\t\t\t\t  stmtblock_t*);\n+\n /* Generate a call to free() after checking that its arg is non-NULL.  */\n tree gfc_call_free (tree);\n "}, {"sha": "a6fec3bb0b263c5376e121ace219b135bb3aff54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb5bc08bb353a574a011eaf5b7ae874672e4b289", "patch": "@@ -1,3 +1,11 @@\n+2008-12-18  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/31822\n+\t* gfortran.dg/char_pointer_assign_2.f90: Updated expected error message\n+\tto be more detailed.\n+\t* gfortran.dg/char_pointer_assign_4.f90: New test.\n+\t* gfortran.dg/char_pointer_assign_5.f90: New test.\n+\n 2008-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/38533"}, {"sha": "c67bbb4af898a3b6c97c97fd1adf136121a17ef2", "filename": "gcc/testsuite/gfortran.dg/char_pointer_assign_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_2.f90?ref=fb5bc08bb353a574a011eaf5b7ae874672e4b289", "patch": "@@ -6,6 +6,6 @@\n   character(5), pointer :: ch3(:)\n \n   ch2 => ch1  ! Check correct is OK\n-  ch3 => ch1  ! { dg-error \"Different character lengths\" }\n+  ch3 => ch1  ! { dg-error \"Unequal character lengths \\\\(5/4\\\\)\" }\n \n-end\n\\ No newline at end of file\n+end"}, {"sha": "7dfc39b946c870ede7221ce3d6aae8879589d5c9", "filename": "gcc/testsuite/gfortran.dg/char_pointer_assign_4.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_4.f90?ref=fb5bc08bb353a574a011eaf5b7ae874672e4b289", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Unequal character length\" }\n+\n+! PR fortran/31822\n+! Verify that runtime checks for matching character length\n+! in pointer assignment work.\n+\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+program ptr\n+  implicit none\n+  character(len=10), target :: s1\n+  character(len=5), pointer :: p1\n+  integer, volatile :: i\n+  i = 8\n+  p1 => s1(1:i) \n+end program ptr\n+\n+! { dg-output \"Unequal character lengths \\\\(5/8\\\\)\" }"}, {"sha": "471f6e6b1620c2e150850f3bb47a48ffeff7c70c", "filename": "gcc/testsuite/gfortran.dg/char_pointer_assign_5.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5bc08bb353a574a011eaf5b7ae874672e4b289/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_pointer_assign_5.f90?ref=fb5bc08bb353a574a011eaf5b7ae874672e4b289", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Unequal character length\" }\n+\n+! PR fortran/31822\n+! Verify that runtime checks for matching character length\n+! in pointer assignment work.\n+\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+program ptr\n+  implicit none\n+  character(len=10), target :: s1\n+  call bar((/ s1, s1 /))\n+contains\n+  subroutine bar(s)\n+    character(len=*),target  :: s(2)\n+    character(len=17),pointer :: p(:)\n+    p => s\n+  end subroutine bar\n+end program ptr\n+\n+! { dg-output \"Unequal character lengths \\\\(17/10\\\\)\" }"}]}