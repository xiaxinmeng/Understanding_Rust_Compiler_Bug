{"sha": "821b75770b84b7d9b2566804a85b70f606a50d36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIxYjc1NzcwYjg0YjdkOWIyNTY2ODA0YTg1YjcwZjYwNmE1MGQzNg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2012-11-09T15:33:19Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2012-11-09T15:33:19Z"}, "message": "re PR rtl-optimization/55154 (ICE: in curr_insn_transform, at lra-constraints.c:2702 with custom flags)\n\n2012-11-09  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR tree-optimization/55154\n\t* lra-int.h (LRA_LOSER_COST_FACTOR, LRA_MAX_REJECT): New macros.\n\t* lra.c (setup_operand_alternative): Use them.\n\t* lra-constraints.c (LOSER_COST_FACTOR, MAX_OVERALL_COST_BOUND):\n\tRemove.\n\t(process_alt_operands): Use LRA_LOSER_COST_FACTOR and\n\tLRA_MAX_REJECT.  Accumulate reject instead of setting for\n\tnon-const.\n\t(curr_insn_transform): Initialize best_losers and best_overall by\n\tINT_MAX.\n\n2012-11-09  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/55154\n\t* gcc.target/i386/pr55154.c: New test.\n\nFrom-SVN: r193364", "tree": {"sha": "f14e41b290294aa5a04024274f1bf3d8c67bf745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f14e41b290294aa5a04024274f1bf3d8c67bf745"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/821b75770b84b7d9b2566804a85b70f606a50d36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821b75770b84b7d9b2566804a85b70f606a50d36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821b75770b84b7d9b2566804a85b70f606a50d36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821b75770b84b7d9b2566804a85b70f606a50d36/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad7bac31307f16060dbb7ce4a36d44698ca2be76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7bac31307f16060dbb7ce4a36d44698ca2be76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad7bac31307f16060dbb7ce4a36d44698ca2be76"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "cd980895d8063b0f70f4a72c7fab8ec4c2217c61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=821b75770b84b7d9b2566804a85b70f606a50d36", "patch": "@@ -1,3 +1,16 @@\n+2012-11-09  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR tree-optimization/55154\n+\t* lra-int.h (LRA_LOSER_COST_FACTOR, LRA_MAX_REJECT): New macros.\n+\t* lra.c (setup_operand_alternative): Use them.\n+\t* lra-constraints.c (LOSER_COST_FACTOR, MAX_OVERALL_COST_BOUND):\n+\tRemove.\n+\t(process_alt_operands): Use LRA_LOSER_COST_FACTOR and\n+\tLRA_MAX_REJECT.  Accumulate reject instead of setting for\n+\tnon-const.\n+\t(curr_insn_transform): Initialize best_losers and best_overall by\n+\tINT_MAX.\n+\n 2012-11-09  Christian Bruel  <christian.bruel@st.com>\n \n \t* config/sh/sh.c (sh_can_use_simple_return_p): Enable with\n@@ -44,7 +57,6 @@\n \t* config/i386/i386.c (release_scratch_register_on_entry): Also adjust\n \tsp_offset manually.\n \n->>>>>>> .r193360\n 2012-11-08  Christian Bruel  <christian.bruel@st.com>\n \n \t* tree-ssa-tail-merge.c (replace_block_by): Update bb2 profile count."}, {"sha": "b4e3218f10e85e8e529798c51e152f447f892421", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=821b75770b84b7d9b2566804a85b70f606a50d36", "patch": "@@ -1282,12 +1282,6 @@ general_constant_p (rtx x)\n   return CONSTANT_P (x) && (! flag_pic || LEGITIMATE_PIC_OPERAND_P (x));\n }\n \n-/* Cost factor for each additional reload and maximal cost bound for\n-   insn reloads.  One might ask about such strange numbers.  Their\n-   values occurred historically from former reload pass.  */\n-#define LOSER_COST_FACTOR 6\n-#define MAX_OVERALL_COST_BOUND 600\n-\n /* Major function to choose the current insn alternative and what\n    operands should be reloaded and how.\t If ONLY_ALTERNATIVE is not\n    negative we should consider only this alternative.  Return false if\n@@ -1576,6 +1570,7 @@ process_alt_operands (int only_alternative)\n \t\t    badop = false;\n \t\t    this_alternative = curr_alt[m];\n \t\t    COPY_HARD_REG_SET (this_alternative_set, curr_alt_set[m]);\n+\t\t    winreg = this_alternative != NO_REGS;\n \t\t    break;\n \t\t  }\n \n@@ -1828,7 +1823,7 @@ process_alt_operands (int only_alternative)\n \t\t     might cost something but probably less than old\n \t\t     reload pass believes.  */\n \t\t  if (lra_former_scratch_p (REGNO (operand_reg[nop])))\n-\t\t    reject += LOSER_COST_FACTOR;\n+\t\t    reject += LRA_LOSER_COST_FACTOR;\n \t\t}\n \t    }\n \t  else if (did_match)\n@@ -1912,20 +1907,15 @@ process_alt_operands (int only_alternative)\n \t\t      && no_input_reloads_p && ! const_to_mem))\n \t\tgoto fail;\n \n-\t      /* If we can't reload this value at all, reject this\n-\t\t alternative.  Note that we could also lose due to\n-\t\t LIMIT_RELOAD_CLASS, but we don't check that here.  */\n-\t      if (! CONSTANT_P (op) && ! no_regs_p)\n-\t\t{\n-\t\t  if (targetm.preferred_reload_class\n-\t\t      (op, this_alternative) == NO_REGS)\n-\t\t    reject = MAX_OVERALL_COST_BOUND;\n-\n-\t\t  if (curr_static_id->operand[nop].type == OP_OUT\n-\t\t      && (targetm.preferred_output_reload_class\n-\t\t\t  (op, this_alternative) == NO_REGS))\n-\t\t    reject = MAX_OVERALL_COST_BOUND;\n-\t\t}\n+\t      /* Check strong discouragement of reload of non-constant\n+\t\t into class THIS_ALTERNATIVE.  */\n+\t      if (! CONSTANT_P (op) && ! no_regs_p\n+\t\t  && (targetm.preferred_reload_class\n+\t\t      (op, this_alternative) == NO_REGS\n+\t\t      || (curr_static_id->operand[nop].type == OP_OUT\n+\t\t\t  && (targetm.preferred_output_reload_class\n+\t\t\t      (op, this_alternative) == NO_REGS))))\n+\t\treject += LRA_MAX_REJECT;\n \n \t      if (! ((const_to_mem && constmemok)\n \t\t     || (MEM_P (op) && offmemok)))\n@@ -1966,7 +1956,7 @@ process_alt_operands (int only_alternative)\n \t     Should we update the cost (may be approximately) here\n \t     because of early clobber register reloads or it is a rare\n \t     or non-important thing to be worth to do it.  */\n-\t  overall = losers * LOSER_COST_FACTOR + reject;\n+\t  overall = losers * LRA_LOSER_COST_FACTOR + reject;\n \t  if ((best_losers == 0 || losers != 0) && best_overall < overall)\n \t    goto fail;\n \n@@ -2019,7 +2009,7 @@ process_alt_operands (int only_alternative)\n \t      {\n \t\tcurr_alt_match_win[j] = false;\n \t\tlosers++;\n-\t\toverall += LOSER_COST_FACTOR;\n+\t\toverall += LRA_LOSER_COST_FACTOR;\n \t      }\n \t  if (! curr_alt_match_win[i])\n \t    curr_alt_dont_inherit_ops[curr_alt_dont_inherit_ops_num++] = i;\n@@ -2032,7 +2022,7 @@ process_alt_operands (int only_alternative)\n \t    }\n \t  curr_alt_win[i] = curr_alt_match_win[i] = false;\n \t  losers++;\n-\t  overall += LOSER_COST_FACTOR;\n+\t  overall += LRA_LOSER_COST_FACTOR;\n \t}\n       small_class_operands_num = 0;\n       for (nop = 0; nop < n_operands; nop++)\n@@ -2635,7 +2625,7 @@ curr_insn_transform (void)\n      the wrong kind of hard reg.  For this, we must consider all the\n      operands together against the register constraints.  */\n \n-  best_losers = best_overall = MAX_RECOG_OPERANDS * 2 + MAX_OVERALL_COST_BOUND;\n+  best_losers = best_overall = INT_MAX;\n   best_small_class_operands_num = best_reload_sum = 0;\n \n   curr_swapped = false;"}, {"sha": "04d55287d75be23563c3092e405c9cc0dcc98743", "filename": "gcc/lra-int.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=821b75770b84b7d9b2566804a85b70f606a50d36", "patch": "@@ -243,6 +243,12 @@ typedef struct lra_insn_recog_data *lra_insn_recog_data_t;\n #define LRA_TEMP_CLOBBER_P(x) \\\n   (RTL_FLAG_CHECK1 (\"TEMP_CLOBBER_P\", (x), CLOBBER)->unchanging)\n \n+/* Cost factor for each additional reload and maximal cost reject for\n+   insn reloads.  One might ask about such strange numbers.  Their\n+   values occurred historically from former reload pass.  */\n+#define LRA_LOSER_COST_FACTOR 6\n+#define LRA_MAX_REJECT 600\n+\n /* lra.c: */\n \n extern FILE *lra_dump_file;"}, {"sha": "b75f4178efb8bf2b9f43d2a106a4d262cdce31fd", "filename": "gcc/lra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=821b75770b84b7d9b2566804a85b70f606a50d36", "patch": "@@ -784,10 +784,10 @@ setup_operand_alternative (lra_insn_recog_data_t data)\n \t\t  break;\n \n \t\tcase '?':\n-\t\t  op_alt->reject += 6;\n+\t\t  op_alt->reject += LRA_LOSER_COST_FACTOR;\n \t\t  break;\n \t\tcase '!':\n-\t\t  op_alt->reject += 600;\n+\t\t  op_alt->reject += LRA_MAX_REJECT;\n \t\t  break;\n \t\tcase '&':\n \t\t  op_alt->earlyclobber = 1;"}, {"sha": "73ad2528523c28f4201f35a541a5d224be064aeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=821b75770b84b7d9b2566804a85b70f606a50d36", "patch": "@@ -1,3 +1,8 @@\n+2012-11-09  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/55154\n+\t* gcc.target/i386/pr55154.c: New test.\n+\n 2012-11-09  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/55151"}, {"sha": "2ed3f00edd356166b0fe150baec7b04f0bed4990", "filename": "gcc/testsuite/gcc.target/i386/pr55154.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55154.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821b75770b84b7d9b2566804a85b70f606a50d36/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55154.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55154.c?ref=821b75770b84b7d9b2566804a85b70f606a50d36", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-O2 -mcx16 -fpic -mcmodel=large -fno-split-wide-types\" } */\n+\n+__int128 i;\n+\n+void test ()\n+{\n+  __sync_val_compare_and_swap (&i, i, i);\n+}"}]}