{"sha": "ed904fefddddf35f5f13d18157e48fae3818794f", "node_id": "C_kwDOANBUbNoAKGVkOTA0ZmVmZGRkZGYzNWY1ZjEzZDE4MTU3ZTQ4ZmFlMzgxODc5NGY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-12T14:34:22Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-13T11:15:30Z"}, "message": "privacy: reachability: Add base visitor for items with generic params\n\nCo-authored-by: philberty <philip.herron@embecosm.com>", "tree": {"sha": "416a510e6c5e6c9b5cf9347b84dcf577ec02e646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/416a510e6c5e6c9b5cf9347b84dcf577ec02e646"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed904fefddddf35f5f13d18157e48fae3818794f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed904fefddddf35f5f13d18157e48fae3818794f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed904fefddddf35f5f13d18157e48fae3818794f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed904fefddddf35f5f13d18157e48fae3818794f/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f"}], "stats": {"total": 80, "additions": 58, "deletions": 22}, "files": [{"sha": "c5bfce1e2984cb894fda060084b6b0f1b9114e73", "filename": "gcc/rust/privacy/rust-reachability.cc", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed904fefddddf35f5f13d18157e48fae3818794f/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed904fefddddf35f5f13d18157e48fae3818794f/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.cc?ref=ed904fefddddf35f5f13d18157e48fae3818794f", "patch": "@@ -31,6 +31,13 @@ maybe_get_vis_item (std::unique_ptr<HIR::Item> &item)\n   return static_cast<HIR::VisItem *> (item.get ());\n }\n \n+ReachLevel\n+ReachabilityVisitor::get_reachability_level (\n+  const HIR::Visibility &item_visibility)\n+{\n+  return item_visibility.is_public () ? current_level : ReachLevel::Unreachable;\n+}\n+\n void\n ReachabilityVisitor::visit_generic_predicates (\n   const std::vector<std::unique_ptr<HIR::GenericParam>> &generics,\n@@ -39,25 +46,21 @@ ReachabilityVisitor::visit_generic_predicates (\n   if (item_reach == ReachLevel::Unreachable)\n     return;\n \n-  for (auto &generic : generics)\n+  for (const auto &generic : generics)\n     {\n       if (generic->get_kind () == HIR::GenericParam::TYPE)\n \t{\n \t  TyTy::BaseType *generic_ty = nullptr;\n-\t  rust_assert (\n-\t    ty_ctx.lookup_type (generic->get_mappings ().get_hirid (),\n-\t\t\t\t&generic_ty));\n+\t  auto ok = ty_ctx.lookup_type (generic->get_mappings ().get_hirid (),\n+\t\t\t\t\t&generic_ty);\n+\t  rust_assert (ok);\n+\t  rust_assert (generic_ty->get_kind () == TyTy::PARAM);\n \n-\t  // FIXME: Can we really get anything else than a TyTy::PARAM here?\n-\t  // Should we change this to an assertion instead?\n-\t  if (generic_ty->get_kind () == TyTy::PARAM)\n+\t  auto generic_param = static_cast<TyTy::ParamType *> (generic_ty);\n+\t  for (const auto &bound : generic_param->get_specified_bounds ())\n \t    {\n-\t      auto generic_param = static_cast<TyTy::ParamType *> (generic_ty);\n-\t      for (const auto &bound : generic_param->get_specified_bounds ())\n-\t\t{\n-\t\t  const auto trait = bound.get ()->get_hir_trait_ref ();\n-\t\t  ctx.update_reachability (trait->get_mappings (), item_reach);\n-\t\t}\n+\t      const auto trait = bound.get ()->get_hir_trait_ref ();\n+\t      ctx.update_reachability (trait->get_mappings (), item_reach);\n \t    }\n \t}\n     }\n@@ -88,18 +91,25 @@ ReachabilityVisitor::visit (HIR::UseDeclaration &use_decl)\n \n void\n ReachabilityVisitor::visit (HIR::Function &func)\n-{}\n+{\n+  auto fn_reach = get_reachability_level (func.get_visibility ());\n+\n+  fn_reach = ctx.update_reachability (func.get_mappings (), fn_reach);\n+  visit_generic_predicates (func.get_generic_params (), fn_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::TypeAlias &type_alias)\n-{}\n+{\n+  auto type_reach = get_reachability_level (type_alias.get_visibility ());\n+\n+  visit_generic_predicates (type_alias.get_generic_params (), type_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::StructStruct &struct_item)\n {\n-  auto struct_reach = ReachLevel::Unreachable;\n-  if (struct_item.get_visibility ().is_public ())\n-    struct_reach = current_level;\n+  auto struct_reach = get_reachability_level (struct_item.get_visibility ());\n \n   struct_reach\n     = ctx.update_reachability (struct_item.get_mappings (), struct_reach);\n@@ -126,11 +136,22 @@ ReachabilityVisitor::visit (HIR::TupleStruct &tuple_struct)\n \n void\n ReachabilityVisitor::visit (HIR::Enum &enum_item)\n-{}\n+{\n+  auto enum_reach = get_reachability_level (enum_item.get_visibility ());\n+\n+  enum_reach = ctx.update_reachability (enum_item.get_mappings (), enum_reach);\n+  visit_generic_predicates (enum_item.get_generic_params (), enum_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::Union &union_item)\n-{}\n+{\n+  auto union_reach = get_reachability_level (union_item.get_visibility ());\n+\n+  union_reach\n+    = ctx.update_reachability (union_item.get_mappings (), union_reach);\n+  visit_generic_predicates (union_item.get_generic_params (), union_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::ConstantItem &const_item)\n@@ -142,11 +163,21 @@ ReachabilityVisitor::visit (HIR::StaticItem &static_item)\n \n void\n ReachabilityVisitor::visit (HIR::Trait &trait)\n-{}\n+{\n+  auto trait_reach = get_reachability_level (trait.get_visibility ());\n+\n+  trait_reach = ctx.update_reachability (trait.get_mappings (), trait_reach);\n+  visit_generic_predicates (trait.get_generic_params (), trait_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::ImplBlock &impl)\n-{}\n+{\n+  auto impl_reach = get_reachability_level (impl.get_visibility ());\n+\n+  impl_reach = ctx.update_reachability (impl.get_mappings (), impl_reach);\n+  visit_generic_predicates (impl.get_generic_params (), impl_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::ExternBlock &block)"}, {"sha": "e61fbdfa8b376e460fb066637ad0de41bbf1a6eb", "filename": "gcc/rust/privacy/rust-reachability.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed904fefddddf35f5f13d18157e48fae3818794f/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed904fefddddf35f5f13d18157e48fae3818794f/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.h?ref=ed904fefddddf35f5f13d18157e48fae3818794f", "patch": "@@ -54,6 +54,11 @@ class ReachabilityVisitor : public HIR::HIRVisItemVisitor\n     const std::vector<std::unique_ptr<HIR::GenericParam>> &generics,\n     ReachLevel item_reach);\n \n+  /**\n+   * Get the initial reach level for an item based on its visibility.\n+   */\n+  ReachLevel get_reachability_level (const HIR::Visibility &item_visibility);\n+\n   virtual void visit (HIR::Module &mod);\n   virtual void visit (HIR::ExternCrate &crate);\n   virtual void visit (HIR::UseDeclaration &use_decl);"}]}