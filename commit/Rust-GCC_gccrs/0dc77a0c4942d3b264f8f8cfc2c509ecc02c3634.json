{"sha": "0dc77a0c4942d3b264f8f8cfc2c509ecc02c3634", "node_id": "C_kwDOANBUbNoAKDBkYzc3YTBjNDk0MmQzYjI2NGY4ZjhjZmMyYzUwOWVjYzAyYzM2MzQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-12-06T14:13:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-12-06T15:17:05Z"}, "message": "tree-optimization/103581 - fix masked gather on x86\n\nThe recent fix to PR103527 exposed an issue with how the various\nspecial casing for AVX512 masks in vect_build_gather_load_calls\nare handled.  The following makes that more obvious, fixing the\nmiscompile of 403.gcc.\n\n2021-12-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/103581\n\t* tree-vect-stmts.c (vect_build_gather_load_calls): Properly\n\tguard all the AVX512 mask cases.\n\n\t* gcc.dg/vect/pr103581.c: New testcase.", "tree": {"sha": "180fb22336c100bf0c4cbd867458eb68a461a26d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/180fb22336c100bf0c4cbd867458eb68a461a26d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dc77a0c4942d3b264f8f8cfc2c509ecc02c3634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc77a0c4942d3b264f8f8cfc2c509ecc02c3634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc77a0c4942d3b264f8f8cfc2c509ecc02c3634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc77a0c4942d3b264f8f8cfc2c509ecc02c3634/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11013814fc83b62a8a367d550b2b6ea0ab9ef8c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11013814fc83b62a8a367d550b2b6ea0ab9ef8c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11013814fc83b62a8a367d550b2b6ea0ab9ef8c6"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "d072748de31d2c6beb5d6dd86bf762ee1f4d0182", "filename": "gcc/testsuite/gcc.dg/vect/pr103581.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc77a0c4942d3b264f8f8cfc2c509ecc02c3634/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103581.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc77a0c4942d3b264f8f8cfc2c509ecc02c3634/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103581.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103581.c?ref=0dc77a0c4942d3b264f8f8cfc2c509ecc02c3634", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-additional-options \"-mavx2 -mtune-ctrl=use_gather\" { target avx2_runtime } } */\n+\n+#include \"tree-vect.h\"\n+\n+#define MASKGATHER(SUFF, TYPE1, TYPE2) \\\n+TYPE1 * __attribute__((noipa)) \\\n+maskgather ## SUFF (int n, TYPE2 *indices, TYPE1 *data) \\\n+{ \\\n+  TYPE1 *out = __builtin_malloc (sizeof (TYPE1) * n); \\\n+  for (int i = 0; i < n; ++i) \\\n+    { \\\n+      TYPE2 d = indices[i]; \\\n+      if (d > 1) \\\n+        out[i] = data[d]; \\\n+    } \\\n+  return out; \\\n+}\n+\n+MASKGATHER(udiusi, unsigned long long, unsigned int)\n+MASKGATHER(usiusi, unsigned int, unsigned int)\n+MASKGATHER(udiudi, unsigned long long, unsigned long long)\n+MASKGATHER(usiudi, unsigned int, unsigned long long)\n+\n+int\n+main()\n+{\n+  check_vect ();\n+\n+    unsigned int idx4[32], data4[32];\n+  unsigned long long idx8[32], data8[32];\n+  for (int i = 0; i < 32; ++i)\n+    {\n+      idx4[i] = i;\n+      idx8[i] = i;\n+      data4[i] = i;\n+      data8[i] = i;\n+    }\n+  unsigned long long *resudiusi = maskgatherudiusi (16, idx4, data8);\n+  unsigned int *resusiusi = maskgatherusiusi (16, idx4, data4);\n+  unsigned long long *resudiudi = maskgatherudiudi (16, idx8, data8);\n+  unsigned int *resusiudi = maskgatherusiudi (16, idx8, data4);\n+  for (int i = 0; i < 16; ++i)\n+    {\n+      unsigned int d = idx4[i];\n+      if (d > 1)\n+        {\n+          if (resudiusi[i] != data4[d])\n+            __builtin_abort ();\n+          if (resudiudi[i] != data4[d])\n+            __builtin_abort ();\n+          if (resusiudi[i] != data4[d])\n+            __builtin_abort ();\n+          if (resusiusi[i] != data4[d])\n+            __builtin_abort ();\n+        }\n+    }\n+  return 0;\n+}\n+"}, {"sha": "8c427174b37e6c03c2f914c90332bcc4eac54130", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dc77a0c4942d3b264f8f8cfc2c509ecc02c3634/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dc77a0c4942d3b264f8f8cfc2c509ecc02c3634/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=0dc77a0c4942d3b264f8f8cfc2c509ecc02c3634", "patch": "@@ -2785,7 +2785,7 @@ vect_build_gather_load_calls (vec_info *vinfo, stmt_vec_info stmt_info,\n \n       ncopies *= 2;\n \n-      if (mask && masktype == real_masktype)\n+      if (mask && VECTOR_TYPE_P (real_masktype))\n \t{\n \t  for (int i = 0; i < count; ++i)\n \t    sel[i] = i | (count / 2);\n@@ -2882,7 +2882,7 @@ vect_build_gather_load_calls (vec_info *vinfo, stmt_vec_info stmt_info,\n \t\t  mask_op = var;\n \t\t}\n \t    }\n-\t  if (modifier == NARROW && masktype != real_masktype)\n+\t  if (modifier == NARROW && !VECTOR_TYPE_P (real_masktype))\n \t    {\n \t      var = vect_get_new_ssa_name (mask_halftype, vect_simple_var);\n \t      gassign *new_stmt"}]}