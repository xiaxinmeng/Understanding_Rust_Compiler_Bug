{"sha": "e253d36214015ed10ffd335e3628ccaac22dd5c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1M2QzNjIxNDAxNWVkMTBmZmQzMzVlMzYyOGNjYWFjMjJkZDVjNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-24T12:29:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-24T14:59:40Z"}, "message": "libstdc++: Use __libc_single_threaded for locale initialization\n\nMost initialization of locales and facets happens before main() during\nstartup, when the program is likely to only have one thread. By using\nthe new __gnu_cxx::__is_single_threaded() function instead of checking\n__gthread_active_p() we can avoid using pthread_once or atomics for the\ncommon case.\n\nThat said, I'm not sure why we don't just use a local static variable\ninstead, as __cxa_guard_acquire() already optimizes for the\nsingle-threaded case:\n\n  static const bool init = (_S_initialize_once(), true);\n\nI'll revisit that for GCC 12.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++98/locale.cc (locale::facet::_S_get_c_locale())\n\t(locale::id::_M_id() const): Use __is_single_threaded.\n\t* src/c++98/locale_init.cc (locale::_S_initialize()):\n\tLikewise.", "tree": {"sha": "92f4310a31283e95f47fdb77b241ad79641518af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92f4310a31283e95f47fdb77b241ad79641518af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e253d36214015ed10ffd335e3628ccaac22dd5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e253d36214015ed10ffd335e3628ccaac22dd5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e253d36214015ed10ffd335e3628ccaac22dd5c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e253d36214015ed10ffd335e3628ccaac22dd5c7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97981e13b7f7b1ffd1c9ccf3d96d574b7b3caada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97981e13b7f7b1ffd1c9ccf3d96d574b7b3caada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97981e13b7f7b1ffd1c9ccf3d96d574b7b3caada"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "9b3fc3515152318ba99783e433132f12d4ac5956", "filename": "libstdc++-v3/src/c++98/locale.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e253d36214015ed10ffd335e3628ccaac22dd5c7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e253d36214015ed10ffd335e3628ccaac22dd5c7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale.cc?ref=e253d36214015ed10ffd335e3628ccaac22dd5c7", "patch": "@@ -214,7 +214,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   locale::facet::_S_get_c_locale()\n   {\n #ifdef __GTHREADS\n-    if (__gthread_active_p())\n+    if (!__gnu_cxx::__is_single_threaded())\n       __gthread_once(&_S_once, _S_initialize_once);\n     else\n #endif\n@@ -515,7 +515,7 @@ namespace {\n #endif\n \n #ifdef __GTHREADS\n-\tif (__gthread_active_p())\n+\tif (!__gnu_cxx::__is_single_threaded())\n \t  {\n \t    if (__atomic_always_lock_free(sizeof(_M_index), &_M_index))\n \t      {"}, {"sha": "fc8416ba01a62377718b7a3004973b909fba307b", "filename": "libstdc++-v3/src/c++98/locale_init.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e253d36214015ed10ffd335e3628ccaac22dd5c7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e253d36214015ed10ffd335e3628ccaac22dd5c7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc?ref=e253d36214015ed10ffd335e3628ccaac22dd5c7", "patch": "@@ -320,7 +320,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   locale::_S_initialize()\n   {\n #ifdef __GTHREADS\n-    if (__gthread_active_p())\n+    if (!__gnu_cxx::__is_single_threaded())\n       __gthread_once(&_S_once, _S_initialize_once);\n #endif\n     if (!_S_classic)"}]}