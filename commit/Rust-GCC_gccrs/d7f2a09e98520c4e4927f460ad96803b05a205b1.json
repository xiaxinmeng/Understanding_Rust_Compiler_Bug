{"sha": "d7f2a09e98520c4e4927f460ad96803b05a205b1", "node_id": "C_kwDOANBUbNoAKGQ3ZjJhMDllOTg1MjBjNGU0OTI3ZjQ2MGFkOTY4MDNiMDVhMjA1YjE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-17T14:43:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-18T16:31:02Z"}, "message": "libstdc++: Define <stdatomic.h> for C++23\n\nThis adds the C++23 <stdatomic.h> header, as proposed by P0943R6, for\ncompatibility with C code.\n\nThere are still some ABI differences between atomic_xxx in C and C++\nstd::atomic_xxx in C++, so this only provides source compatibility, not\nbinary compatibility.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/Makefile.am: Install new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/c_compatibility/stdatomic.h: New file.\n\t* testsuite/29_atomics/headers/stdatomic.h/c_compat.cc: New test.", "tree": {"sha": "bd809c3eaedb69416489e908b63c008ccafec443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd809c3eaedb69416489e908b63c008ccafec443"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7f2a09e98520c4e4927f460ad96803b05a205b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f2a09e98520c4e4927f460ad96803b05a205b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f2a09e98520c4e4927f460ad96803b05a205b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f2a09e98520c4e4927f460ad96803b05a205b1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58385f6ace42d17da5a73cb9b68ce6173295840f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58385f6ace42d17da5a73cb9b68ce6173295840f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58385f6ace42d17da5a73cb9b68ce6173295840f"}], "stats": {"total": 256, "additions": 256, "deletions": 0}, "files": [{"sha": "43f7f9f240d8dbc1fb2ac8f930cc526d85d84969", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f2a09e98520c4e4927f460ad96803b05a205b1/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f2a09e98520c4e4927f460ad96803b05a205b1/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=d7f2a09e98520c4e4927f460ad96803b05a205b1", "patch": "@@ -850,6 +850,7 @@ c_compatibility_headers = \\\n \t${c_compatibility_srcdir}/fenv.h \\\n \t${c_compatibility_srcdir}/tgmath.h \\\n \t${c_compatibility_srcdir}/math.h \\\n+\t${c_compatibility_srcdir}/stdatomic.h \\\n \t${c_compatibility_srcdir}/stdlib.h\n endif\n "}, {"sha": "88391a44d33b0cb8ac1eb5c214f6f4ec30a66ff8", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f2a09e98520c4e4927f460ad96803b05a205b1/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f2a09e98520c4e4927f460ad96803b05a205b1/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=d7f2a09e98520c4e4927f460ad96803b05a205b1", "patch": "@@ -1202,6 +1202,7 @@ c_compatibility_builddir = .\n @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/fenv.h \\\n @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/tgmath.h \\\n @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/math.h \\\n+@GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/stdatomic.h \\\n @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/stdlib.h\n \n @GLIBCXX_C_HEADERS_C_STD_TRUE@c_compatibility_headers = "}, {"sha": "852574bd87c336bf56038e126653b115bb8823c4", "filename": "libstdc++-v3/include/c_compatibility/stdatomic.h", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f2a09e98520c4e4927f460ad96803b05a205b1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f2a09e98520c4e4927f460ad96803b05a205b1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h?ref=d7f2a09e98520c4e4927f460ad96803b05a205b1", "patch": "@@ -0,0 +1,124 @@\n+// C compatibility header <stdatomic.h> -*- C++ -*-\n+\n+// Copyright (C) 2022 The GCC developers\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/stdatomic.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_STDATOMIC_H\n+#define _GLIBCXX_STDATOMIC_H\n+\n+#if __cplusplus > 202002L\n+#include <atomic>\n+\n+#define _Atomic(_Tp) std::atomic<_Tp>\n+\n+using std::memory_order;\n+using std::memory_order_relaxed;\n+using std::memory_order_consume;\n+using std::memory_order_acquire;\n+using std::memory_order_release;\n+using std::memory_order_acq_rel;\n+using std::memory_order_seq_cst;\n+using std::atomic_flag;\n+using std::atomic_bool;\n+using std::atomic_char;\n+using std::atomic_schar;\n+using std::atomic_uchar;\n+using std::atomic_short;\n+using std::atomic_ushort;\n+using std::atomic_int;\n+using std::atomic_uint;\n+using std::atomic_long;\n+using std::atomic_ulong;\n+using std::atomic_llong;\n+using std::atomic_ullong;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+using std::atomic_char8_t;\n+#endif\n+using std::atomic_char16_t;\n+using std::atomic_char32_t;\n+using std::atomic_wchar_t;\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+using std::atomic_int8_t;\n+using std::atomic_uint8_t;\n+using std::atomic_int16_t;\n+using std::atomic_uint16_t;\n+using std::atomic_int32_t;\n+using std::atomic_uint32_t;\n+using std::atomic_int64_t;\n+using std::atomic_uint64_t;\n+using std::atomic_int_least8_t;\n+using std::atomic_uint_least8_t;\n+using std::atomic_int_least16_t;\n+using std::atomic_uint_least16_t;\n+using std::atomic_int_least32_t;\n+using std::atomic_uint_least32_t;\n+using std::atomic_int_least64_t;\n+using std::atomic_uint_least64_t;\n+using std::atomic_int_fast8_t;\n+using std::atomic_uint_fast8_t;\n+using std::atomic_int_fast16_t;\n+using std::atomic_uint_fast16_t;\n+using std::atomic_int_fast32_t;\n+using std::atomic_uint_fast32_t;\n+using std::atomic_int_fast64_t;\n+using std::atomic_uint_fast64_t;\n+#endif\n+using std::atomic_intptr_t;\n+using std::atomic_uintptr_t;\n+using std::atomic_size_t;\n+using std::atomic_ptrdiff_t;\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+using std::atomic_intmax_t;\n+using std::atomic_uintmax_t;\n+#endif\n+using std::atomic_is_lock_free;\n+using std::atomic_load;\n+using std::atomic_load_explicit;\n+using std::atomic_store;\n+using std::atomic_store_explicit;\n+using std::atomic_exchange;\n+using std::atomic_exchange_explicit;\n+using std::atomic_compare_exchange_strong;\n+using std::atomic_compare_exchange_strong_explicit;\n+using std::atomic_compare_exchange_weak;\n+using std::atomic_compare_exchange_weak_explicit;\n+using std::atomic_fetch_add;\n+using std::atomic_fetch_add_explicit;\n+using std::atomic_fetch_sub;\n+using std::atomic_fetch_sub_explicit;\n+using std::atomic_fetch_or;\n+using std::atomic_fetch_or_explicit;\n+using std::atomic_fetch_and;\n+using std::atomic_fetch_and_explicit;\n+using std::atomic_flag_test_and_set;\n+using std::atomic_flag_test_and_set_explicit;\n+using std::atomic_flag_clear;\n+using std::atomic_flag_clear_explicit;\n+using std::atomic_thread_fence;\n+using std::atomic_signal_fence;\n+\n+#endif // C++23\n+#endif // _GLIBCXX_STDATOMIC_H"}, {"sha": "98c1102a974a8c4f6d3feadfc9361ed99cf5d7d8", "filename": "libstdc++-v3/testsuite/29_atomics/headers/stdatomic.h/c_compat.cc", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f2a09e98520c4e4927f460ad96803b05a205b1/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Fc_compat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f2a09e98520c4e4927f460ad96803b05a205b1/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Fc_compat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Fc_compat.cc?ref=d7f2a09e98520c4e4927f460ad96803b05a205b1", "patch": "@@ -0,0 +1,130 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <stdatomic.h>\n+\n+#ifndef ATOMIC_BOOL_LOCK_FREE\n+#error ATOMIC_BOOL_LOCK_FREE is not defined in <stdatomic.h>\n+#endif\n+#ifndef ATOMIC_CHAR_LOCK_FREE\n+#error ATOMIC_CHAR_LOCK_FREE is not defined in <stdatomic.h>\n+#endif\n+#ifndef ATOMIC_CHAR16_T_LOCK_FREE\n+#error ATOMIC_CHAR16_T_LOCK_FREE is not defined in <stdatomic.h>\n+#endif\n+#ifndef ATOMIC_CHAR32_T_LOCK_FREE\n+#error ATOMIC_CHAR32_T_LOCK_FREE is not defined in <stdatomic.h>\n+#endif\n+#ifndef ATOMIC_WCHAR_T_LOCK_FREE\n+#error ATOMIC_WCHAR_T_LOCK_FREE is not defined in <stdatomic.h>\n+#endif\n+#ifndef ATOMIC_SHORT_LOCK_FREE\n+#error ATOMIC_SHORT_LOCK_FREE is not defined in <stdatomic.h>\n+#endif\n+#ifndef ATOMIC_INT_LOCK_FREE\n+#error ATOMIC_INT_LOCK_FREE is not defined in <stdatomic.h>\n+#endif\n+#ifndef ATOMIC_LONG_LOCK_FREE\n+#error ATOMIC_LONG_LOCK_FREE is not defined in <stdatomic.h>\n+#endif\n+#ifndef ATOMIC_LLONG_LOCK_FREE\n+#error ATOMIC_LLONG_LOCK_FREE is not defined in <stdatomic.h>\n+#endif\n+#ifndef ATOMIC_POINTER_LOCK_FREE\n+#error ATOMIC_POINTER_LOCK_FREE is not defined in <stdatomic.h>\n+#endif\n+\n+constexpr const memory_order* orders[] = {\n+  &memory_order_relaxed, &memory_order_consume, &memory_order_acquire,\n+  &memory_order_release, &memory_order_acq_rel, &memory_order_seq_cst\n+};\n+\n+constexpr atomic_flag flag{};\n+\n+template<typename A, typename B> constexpr bool is_same = false;\n+template<typename A> constexpr bool is_same<A, A> = true;\n+\n+static_assert(is_same<atomic_bool,     _Atomic(bool)>);\n+static_assert(is_same<atomic_char,     _Atomic(char)>);\n+static_assert(is_same<atomic_schar,    _Atomic(signed char)>);\n+static_assert(is_same<atomic_uchar,    _Atomic(unsigned char)>);\n+static_assert(is_same<atomic_short,    _Atomic(short)>);\n+static_assert(is_same<atomic_ushort,   _Atomic(unsigned short)>);\n+static_assert(is_same<atomic_int,      _Atomic(int)>);\n+static_assert(is_same<atomic_uint,     _Atomic(unsigned int)>);\n+static_assert(is_same<atomic_long,     _Atomic(long)>);\n+static_assert(is_same<atomic_ulong,    _Atomic(unsigned long)>);\n+static_assert(is_same<atomic_llong,    _Atomic(long long)>);\n+static_assert(is_same<atomic_ullong,   _Atomic(unsigned long long)>);\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+static_assert(is_same<atomic_char8_t,  _Atomic(char8_t)>);\n+#endif\n+static_assert(is_same<atomic_char16_t, _Atomic(char16_t)>);\n+static_assert(is_same<atomic_char32_t, _Atomic(char32_t)>);\n+static_assert(is_same<atomic_wchar_t,  _Atomic(wchar_t)>);\n+\n+#include <stdint.h>\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+static_assert(is_same<atomic_int8_t,   _Atomic(int8_t)>);\n+static_assert(is_same<atomic_uint8_t,  _Atomic(uint8_t)>);\n+static_assert(is_same<atomic_int16_t,  _Atomic(int16_t)>);\n+static_assert(is_same<atomic_uint16_t, _Atomic(uint16_t)>);\n+static_assert(is_same<atomic_int32_t,  _Atomic(int32_t)>);\n+static_assert(is_same<atomic_uint32_t, _Atomic(uint32_t)>);\n+static_assert(is_same<atomic_int64_t,  _Atomic(int64_t)>);\n+static_assert(is_same<atomic_uint64_t, _Atomic(uint64_t)>);\n+static_assert(is_same<atomic_int_least8_t,   _Atomic(int_least8_t)>);\n+static_assert(is_same<atomic_uint_least8_t,  _Atomic(uint_least8_t)>);\n+static_assert(is_same<atomic_int_least16_t,  _Atomic(int_least16_t)>);\n+static_assert(is_same<atomic_uint_least16_t, _Atomic(uint_least16_t)>);\n+static_assert(is_same<atomic_int_least32_t,  _Atomic(int_least32_t)>);\n+static_assert(is_same<atomic_uint_least32_t, _Atomic(uint_least32_t)>);\n+static_assert(is_same<atomic_int_least64_t,  _Atomic(int_least64_t)>);\n+static_assert(is_same<atomic_uint_least64_t, _Atomic(uint_least64_t)>);\n+static_assert(is_same<atomic_int_fast8_t,   _Atomic(int_fast8_t)>);\n+static_assert(is_same<atomic_uint_fast8_t,  _Atomic(uint_fast8_t)>);\n+static_assert(is_same<atomic_int_fast16_t,  _Atomic(int_fast16_t)>);\n+static_assert(is_same<atomic_uint_fast16_t, _Atomic(uint_fast16_t)>);\n+static_assert(is_same<atomic_int_fast32_t,  _Atomic(int_fast32_t)>);\n+static_assert(is_same<atomic_uint_fast32_t, _Atomic(uint_fast32_t)>);\n+static_assert(is_same<atomic_int_fast64_t,  _Atomic(int_fast64_t)>);\n+static_assert(is_same<atomic_uint_fast64_t, _Atomic(uint_fast64_t)>);\n+#endif\n+static_assert(is_same<atomic_intptr_t,  _Atomic(intptr_t)>);\n+static_assert(is_same<atomic_uintptr_t, _Atomic(uintptr_t)>);\n+static_assert(is_same<atomic_size_t,    _Atomic(size_t)>);\n+static_assert(is_same<atomic_ptrdiff_t, _Atomic(ptrdiff_t)>);\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+static_assert(is_same<atomic_intmax_t,  _Atomic(intmax_t)>);\n+static_assert(is_same<atomic_uintmax_t, _Atomic(uintmax_t)>);\n+#endif\n+\n+static_assert( requires (::atomic_int* i, int* e) {\n+  ::atomic_is_lock_free(i);\n+  ::atomic_load(i);\n+  ::atomic_load_explicit(i, memory_order_relaxed);\n+  ::atomic_store(i, 2);\n+  ::atomic_store_explicit(i, 3, memory_order_release);\n+  ::atomic_exchange(i, 2);\n+  ::atomic_exchange_explicit(i, 3, memory_order_acq_rel);\n+  ::atomic_compare_exchange_strong(i, e, 2);\n+  ::atomic_compare_exchange_strong_explicit(i, e, 3,\n+\t\t\t\t\t    memory_order_acq_rel,\n+\t\t\t\t\t    memory_order_relaxed);\n+  ::atomic_compare_exchange_weak(i, e, 2);\n+  ::atomic_compare_exchange_weak_explicit(i, e, 3,\n+\t\t\t\t\t  memory_order_acq_rel,\n+\t\t\t\t\t  memory_order_relaxed);\n+} );\n+\n+static_assert( requires (::atomic_flag* f) {\n+  ::atomic_flag_test_and_set(f);\n+  ::atomic_flag_test_and_set_explicit(f, memory_order_relaxed);\n+  ::atomic_flag_clear(f);\n+  ::atomic_flag_clear_explicit(f, memory_order_acq_rel);\n+} );\n+\n+static_assert( requires (::memory_order o) {\n+  ::atomic_thread_fence(o);\n+  ::atomic_signal_fence(o);\n+} );"}]}