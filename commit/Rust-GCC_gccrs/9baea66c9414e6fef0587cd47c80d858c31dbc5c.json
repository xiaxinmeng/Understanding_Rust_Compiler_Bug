{"sha": "9baea66c9414e6fef0587cd47c80d858c31dbc5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhZWE2NmM5NDE0ZTZmZWYwNTg3Y2Q0N2M4MGQ4NThjMzFkYmM1Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-10-05T17:48:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-10-05T17:48:09Z"}, "message": "re PR rtl-optimization/41511 (combine behaves differently with/without -g)\n\n\tPR rtl-optimization/41511\n\t* combine.c (record_value_for_reg): Pass explicit values as argument\n\tto get_last_value_validate.\n\t(get_last_value_validate): Document INSN parameter.\n\tFor non-readonly MEMs, assume they might have been modified if INSN\n\twas in another basic block.\n\t(get_last_value): Minor reformatting.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r152459", "tree": {"sha": "4b4f102b554c227bdf564242638a20d03b2008d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b4f102b554c227bdf564242638a20d03b2008d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9baea66c9414e6fef0587cd47c80d858c31dbc5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9baea66c9414e6fef0587cd47c80d858c31dbc5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9baea66c9414e6fef0587cd47c80d858c31dbc5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9baea66c9414e6fef0587cd47c80d858c31dbc5c/comments", "author": null, "committer": null, "parents": [{"sha": "2bd1d2c8d2d026168111295dc53d604856b74deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd1d2c8d2d026168111295dc53d604856b74deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd1d2c8d2d026168111295dc53d604856b74deb"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "938b336229fac24ba8aeb7661995c09e3e8f975c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9baea66c9414e6fef0587cd47c80d858c31dbc5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9baea66c9414e6fef0587cd47c80d858c31dbc5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9baea66c9414e6fef0587cd47c80d858c31dbc5c", "patch": "@@ -1,3 +1,14 @@\n+2009-10-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/41511\n+\t* combine.c (record_value_for_reg): Pass explicit values as argument\n+\tto get_last_value_validate.\n+\t(get_last_value_validate): Document INSN parameter.\n+\tFor non-readonly MEMs, assume they might have been modified if INSN\n+\twas in another basic block.\n+\t(get_last_value): Minor reformatting.\n+\n 2009-10-05  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/40992"}, {"sha": "60c4059cecb47859ee1507f5f3d811f2691a2c33", "filename": "gcc/combine.c", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9baea66c9414e6fef0587cd47c80d858c31dbc5c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9baea66c9414e6fef0587cd47c80d858c31dbc5c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=9baea66c9414e6fef0587cd47c80d858c31dbc5c", "patch": "@@ -11758,12 +11758,10 @@ record_value_for_reg (rtx reg, rtx insn, rtx value)\n      case, we must replace it with (clobber (const_int 0)) to prevent\n      infinite loops.  */\n   rsp = VEC_index (reg_stat_type, reg_stat, regno);\n-  if (value && ! get_last_value_validate (&value, insn,\n-\t\t\t\t\t  rsp->last_set_label, 0))\n+  if (value && !get_last_value_validate (&value, insn, label_tick, 0))\n     {\n       value = copy_rtx (value);\n-      if (! get_last_value_validate (&value, insn,\n-\t\t\t\t     rsp->last_set_label, 1))\n+      if (!get_last_value_validate (&value, insn, label_tick, 1))\n \tvalue = 0;\n     }\n \n@@ -12055,15 +12053,14 @@ check_promoted_subreg (rtx insn, rtx x)\n     }\n }\n \f\n-/* Utility routine for the following function.  Verify that all the registers\n-   mentioned in *LOC are valid when *LOC was part of a value set when\n-   label_tick == TICK.  Return 0 if some are not.\n-\n-   If REPLACE is nonzero, replace the invalid reference with\n-   (clobber (const_int 0)) and return 1.  This replacement is useful because\n-   we often can get useful information about the form of a value (e.g., if\n-   it was produced by a shift that always produces -1 or 0) even though\n-   we don't know exactly what registers it was produced from.  */\n+/* Verify that all the registers and memory references mentioned in *LOC are\n+   still valid.  *LOC was part of a value set in INSN when label_tick was\n+   equal to TICK.  Return 0 if some are not.  If REPLACE is nonzero, replace\n+   the invalid references with (clobber (const_int 0)) and return 1.  This\n+   replacement is useful because we often can get useful information about\n+   the form of a value (e.g., if it was produced by a shift that always\n+   produces -1 or 0) even though we don't know exactly what registers it\n+   was produced from.  */\n \n static int\n get_last_value_validate (rtx *loc, rtx insn, int tick, int replace)\n@@ -12099,11 +12096,12 @@ get_last_value_validate (rtx *loc, rtx insn, int tick, int replace)\n \n       return 1;\n     }\n-  /* If this is a memory reference, make sure that there were\n-     no stores after it that might have clobbered the value.  We don't\n-     have alias info, so we assume any store invalidates it.  */\n+  /* If this is a memory reference, make sure that there were no stores after\n+     it that might have clobbered the value.  We don't have alias info, so we\n+     assume any store invalidates it.  Moreover, we only have local UIDs, so\n+     we also assume that there were stores in the intervening basic blocks.  */\n   else if (MEM_P (x) && !MEM_READONLY_P (x)\n-\t   && DF_INSN_LUID (insn) <= mem_last_set)\n+\t   && (tick != label_tick || DF_INSN_LUID (insn) <= mem_last_set))\n     {\n       if (replace)\n \t*loc = gen_rtx_CLOBBER (GET_MODE (x), const0_rtx);\n@@ -12213,16 +12211,14 @@ get_last_value (const_rtx x)\n     return 0;\n \n   /* If the value has all its registers valid, return it.  */\n-  if (get_last_value_validate (&value, rsp->last_set,\n-\t\t\t       rsp->last_set_label, 0))\n+  if (get_last_value_validate (&value, rsp->last_set, rsp->last_set_label, 0))\n     return value;\n \n   /* Otherwise, make a copy and replace any invalid register with\n      (clobber (const_int 0)).  If that fails for some reason, return 0.  */\n \n   value = copy_rtx (value);\n-  if (get_last_value_validate (&value, rsp->last_set,\n-\t\t\t       rsp->last_set_label, 1))\n+  if (get_last_value_validate (&value, rsp->last_set, rsp->last_set_label, 1))\n     return value;\n \n   return 0;"}]}