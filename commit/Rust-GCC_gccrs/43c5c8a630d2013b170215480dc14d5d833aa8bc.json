{"sha": "43c5c8a630d2013b170215480dc14d5d833aa8bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNjNWM4YTYzMGQyMDEzYjE3MDIxNTQ4MGRjMTRkNWQ4MzNhYThiYw==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cygnus.com", "date": "2000-02-04T16:59:35Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2000-02-04T16:59:35Z"}, "message": "Throwable.java (CPlusPlusDemangler): New class.\n\n2000-02-04  Andrew Haley  <aph@cygnus.com>\n\n        * java/lang/Throwable.java (CPlusPlusDemangler): New class.\n        (printStackTrace): Use a CPlusPlusDemangler to demangle names.\n        * java/lang/natThrowable.cc (printRawStackTrace): Rename\n        printStackTrace to printRawStackTrace.\n\nFrom-SVN: r31785", "tree": {"sha": "9730aa76749e0192dde76a1efdcd1b9731ef2de4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9730aa76749e0192dde76a1efdcd1b9731ef2de4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43c5c8a630d2013b170215480dc14d5d833aa8bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c5c8a630d2013b170215480dc14d5d833aa8bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43c5c8a630d2013b170215480dc14d5d833aa8bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c5c8a630d2013b170215480dc14d5d833aa8bc/comments", "author": null, "committer": null, "parents": [{"sha": "8760eaae3c4596dc5156c898a8a33a3ab01b6671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8760eaae3c4596dc5156c898a8a33a3ab01b6671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8760eaae3c4596dc5156c898a8a33a3ab01b6671"}], "stats": {"total": 103, "additions": 97, "deletions": 6}, "files": [{"sha": "a8361a918972979d928e83e3796e1897b3799e4c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c5c8a630d2013b170215480dc14d5d833aa8bc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c5c8a630d2013b170215480dc14d5d833aa8bc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=43c5c8a630d2013b170215480dc14d5d833aa8bc", "patch": "@@ -1,3 +1,10 @@\n+2000-02-04  Andrew Haley  <aph@cygnus.com>\n+\n+\t* java/lang/Throwable.java (CPlusPlusDemangler): New class.\n+\t(printStackTrace): Use a CPlusPlusDemangler to demangle names.\n+\t* java/lang/natThrowable.cc (printRawStackTrace): Rename\n+\tprintStackTrace to printRawStackTrace.\n+\n 2000-02-03  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/util/Calendar.java (toString): New method."}, {"sha": "9a64597c2a677465e22abcdb8fe959fc07bab27d", "filename": "libjava/java/lang/Throwable.java", "status": "modified", "additions": 88, "deletions": 4, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c5c8a630d2013b170215480dc14d5d833aa8bc/libjava%2Fjava%2Flang%2FThrowable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c5c8a630d2013b170215480dc14d5d833aa8bc/libjava%2Fjava%2Flang%2FThrowable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThrowable.java?ref=43c5c8a630d2013b170215480dc14d5d833aa8bc", "patch": "@@ -13,6 +13,9 @@\n import java.io.PrintWriter;\n import java.io.Serializable;\n import java.io.OutputStreamWriter;\n+import java.io.OutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n \n /**\n  * @author Tom Tromey <tromey@cygnus.com>\n@@ -25,6 +28,69 @@\n  * bytecode not implemented.  JDK 1.1.\n  */\n \n+/* A CPlusPlusDemangler sits on top of a PrintWriter.  All input is\n+ * passed through the \"c++filt\" program (part of GNU binutils) which\n+ * demangles internal symbols to their C++ source form.\n+ *\n+ * Closing a CPlusPlusDemangler doesn't close the underlying\n+ * PrintWriter; it does, however close underlying process and flush\n+ * all its buffers, so it's possible to guarantee that after a\n+ * CPlusPlusDemangler has been closed no more will ever be written to\n+ * the underlying PrintWriter.\n+ *\n+ * FIXME: This implictly converts data from the input stream, which is\n+ * a stream of characters, to a stream of bytes.  We need a way of\n+ * handling Unicode characters in demangled identifiers.  */\n+\n+class CPlusPlusDemangler extends OutputStream\n+{\n+  java.io.OutputStream procOut;\n+  java.io.InputStream procIn;\n+  java.lang.Process proc;\n+  PrintWriter p;\n+\n+  /* The number of bytes written to the underlying PrintWriter.  This\n+     provides a crude but fairly portable way to determine whether or\n+     not the attempt to exec c++filt worked. */  \n+  public int written = 0;\n+\n+  CPlusPlusDemangler (PrintWriter writer) throws IOException\n+  {\n+    p = writer;\n+    proc = Runtime.getRuntime ().exec (\"c++filt\");\n+    procOut = proc.getOutputStream ();\n+    procIn = proc.getInputStream ();\n+  }\n+\n+  public void write (int b) throws IOException\n+  {\n+    procOut.write (b);\n+    while (procIn.available () != 0)\n+      {\n+\tint c = procIn.read ();\n+\tif (c == -1)\n+\t  break;\n+\telse\n+\t  {\n+\t    p.write (c);\n+\t    written++;\n+\t  }\n+      }\n+  }\n+  \n+  public void close () throws IOException\n+  {\n+    procOut.close ();\n+    int c;\n+    while ((c = procIn.read ()) != -1)\n+      {\n+\tp.write (c);\n+\twritten++;\n+      }\n+    p.flush ();\n+  }    \n+}\n+\n public class Throwable implements Serializable\n {\n   public native Throwable fillInStackTrace ();\n@@ -46,11 +112,27 @@ public void printStackTrace ()\n \n   public void printStackTrace (PrintStream ps)\n   {\n-    printStackTrace (new PrintWriter(new OutputStreamWriter(ps)));\n+    PrintWriter writer = new PrintWriter (ps);\n+    printStackTrace (writer);\n   }\n-  \n-  public native void printStackTrace (PrintWriter wr);\n-  \n+\n+  public void printStackTrace (PrintWriter wr)\n+  {\n+    try\n+      {\n+\tCPlusPlusDemangler cPlusPlusFilter = new CPlusPlusDemangler (wr);\n+\tPrintWriter writer = new PrintWriter (cPlusPlusFilter);\n+\tprintRawStackTrace (writer);\t\n+\twriter.close ();\n+\tif (cPlusPlusFilter.written == 0) // The demangler has failed...\n+\t  printRawStackTrace (wr);\n+      }\n+    catch (Exception e1)\n+      {\n+\tprintRawStackTrace (wr);\n+      }\n+  }\n+\n   public Throwable ()\n   {\n     detailMessage = null;\n@@ -70,6 +152,8 @@ public String toString ()\n \t    : getClass().getName() + \": \" + getMessage ());\n   }\n \n+  private native final void printRawStackTrace (PrintWriter wr);\n+  \n   // Name of this field comes from serialization spec.\n   private String detailMessage;\n "}, {"sha": "bbe18c20ca382727688754d20410a4ce9dd332e5", "filename": "libjava/java/lang/natThrowable.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43c5c8a630d2013b170215480dc14d5d833aa8bc/libjava%2Fjava%2Flang%2FnatThrowable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43c5c8a630d2013b170215480dc14d5d833aa8bc/libjava%2Fjava%2Flang%2FnatThrowable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThrowable.cc?ref=43c5c8a630d2013b170215480dc14d5d833aa8bc", "patch": "@@ -24,6 +24,7 @@ details.  */\n #include <java/lang/Throwable.h>\n #include <java/io/PrintStream.h>\n #include <java/io/PrintWriter.h>\n+#include <java/io/IOException.h>\n \n #include <sys/types.h>\n \n@@ -61,7 +62,7 @@ java::lang::Throwable::fillInStackTrace (void)\n }\n \n void \n-java::lang::Throwable::printStackTrace (java::io::PrintWriter *wr)\n+java::lang::Throwable::printRawStackTrace (java::io::PrintWriter *wr)\n {\n   wr->println (toString ());\n #ifdef HAVE_BACKTRACE\n@@ -90,4 +91,3 @@ java::lang::Throwable::printStackTrace (java::io::PrintWriter *wr)\n     }\n #endif /* HAVE_BACKTRACE */\n }\n-"}]}