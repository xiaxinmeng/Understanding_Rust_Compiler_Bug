{"sha": "e0ea5d16a80b1216387ba00c27ee2ea0e808ac42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBlYTVkMTZhODBiMTIxNjM4N2JhMDBjMjdlZTJlYTBlODA4YWM0Mg==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2019-08-20T09:49:46Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-20T09:49:46Z"}, "message": "[Ada] Illegal limited function call accepted in a type conversion\n\nIt's illegal to call a function with a result of an immutably limited\ntype inside a type conversion that's used in one of the special contexts\nthat allow such a function call by itself (see RM 7.5 (2.1-2.10)), such\nas in the initialization expression of an object declaration. The\ncompiler was recursively applying OK_For_Limited_Init_In_05 to the\nexpression inside of a rewritten type conversion, rather than directly\nto the Original_Node itself (which is what was cased on to get to the\ntype conversion case alternative), which allowed such illegal\ninitialization, and that's corrected by this fix. However, when the\nexpression is not a rewriting of a user-written conversion, the\nrecursive call to OK_For_Limited_Init_In_05 must be applied to the\nExpression of the conversion.\n\n2019-08-20  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (OK_For_Limited_Init_In_05): In the case of type\n\tconversions, apply the recursive call to the Original_Node of\n\tthe expression Exp rather than the Expression of the\n\tOriginal_Node, in the case where Exp has been rewritten;\n\totherwise, when Original_Node is the same as Exp, apply the\n\trecursive call to the Expression.\n\t(Check_Initialization): Revise condition for special check on\n\ttype conversions of limited function calls to test Original_Node\n\t(avoiding spurious errors on expanded unchecked conversions\n\tapplied to build-in-place dispatching calls).\n\ngcc/testsuite/\n\n\t* gnat.dg/type_conv2.adb, gnat.dg/type_conv2.ads: New testcase.\n\nFrom-SVN: r274731", "tree": {"sha": "efa89048a24e83d59b1769b2e0507a1214159465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efa89048a24e83d59b1769b2e0507a1214159465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc00a8893ffcce505f92e0cb8c540ee1766f8fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc00a8893ffcce505f92e0cb8c540ee1766f8fb"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "ecda7b8695a86a08945d2a6d760b3f938dd6c08a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e0ea5d16a80b1216387ba00c27ee2ea0e808ac42", "patch": "@@ -1,3 +1,16 @@\n+2019-08-20  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb (OK_For_Limited_Init_In_05): In the case of type\n+\tconversions, apply the recursive call to the Original_Node of\n+\tthe expression Exp rather than the Expression of the\n+\tOriginal_Node, in the case where Exp has been rewritten;\n+\totherwise, when Original_Node is the same as Exp, apply the\n+\trecursive call to the Expression.\n+\t(Check_Initialization): Revise condition for special check on\n+\ttype conversions of limited function calls to test Original_Node\n+\t(avoiding spurious errors on expanded unchecked conversions\n+\tapplied to build-in-place dispatching calls).\n+\n 2019-08-20  Patrick Bernardi  <bernardi@adacore.com>\n \n \t* exp_aggr.adb (Expand_Record_Aggregate): Always convert a"}, {"sha": "4afa3a69083260f556943b5048448e8cea1ca0b3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e0ea5d16a80b1216387ba00c27ee2ea0e808ac42", "patch": "@@ -11870,10 +11870,14 @@ package body Sem_Ch3 is\n \n             else\n                --  Specialize error message according to kind of illegal\n-               --  initial expression.\n+               --  initial expression. We check the Original_Node to cover\n+               --  cases where the initialization expression of an object\n+               --  declaration generated by the compiler has been rewritten\n+               --  (such as for dispatching calls).\n \n-               if Nkind (Exp) = N_Type_Conversion\n-                 and then Nkind (Expression (Exp)) = N_Function_Call\n+               if Nkind (Original_Node (Exp)) = N_Type_Conversion\n+                 and then\n+                   Nkind (Expression (Original_Node (Exp))) = N_Function_Call\n                then\n                   --  No error for internally-generated object declarations,\n                   --  which can come from build-in-place assignment statements.\n@@ -19648,8 +19652,20 @@ package body Sem_Ch3 is\n          =>\n             return not Comes_From_Source (Exp)\n               and then\n-                OK_For_Limited_Init_In_05\n-                  (Typ, Expression (Original_Node (Exp)));\n+                --  If the conversion has been rewritten, check Original_Node\n+\n+                ((Original_Node (Exp) /= Exp\n+                   and then\n+                     OK_For_Limited_Init_In_05 (Typ, Original_Node (Exp)))\n+\n+                  --  Otherwise, check the expression of the compiler-generated\n+                  --  conversion (which is a conversion that we want to ignore\n+                  --  for purposes of the limited-initialization restrictions).\n+\n+                  or else\n+                    (Original_Node (Exp) = Exp\n+                      and then\n+                        OK_For_Limited_Init_In_05 (Typ, Expression (Exp))));\n \n          when N_Explicit_Dereference\n             | N_Indexed_Component"}, {"sha": "e53afce4540c9129678210278d876aeb12cb4301", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0ea5d16a80b1216387ba00c27ee2ea0e808ac42", "patch": "@@ -1,3 +1,7 @@\n+2019-08-20  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat.dg/type_conv2.adb, gnat.dg/type_conv2.ads: New testcase.\n+\n 2019-08-20  Bob Duff  <duff@adacore.com>\n \n \t* gnat.dg/unchecked_convert14.adb: New testcase."}, {"sha": "d1818c6bc745b491b729d601eb168f4588df1f91", "filename": "gcc/testsuite/gnat.dg/type_conv2.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42/gcc%2Ftestsuite%2Fgnat.dg%2Ftype_conv2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42/gcc%2Ftestsuite%2Fgnat.dg%2Ftype_conv2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftype_conv2.adb?ref=e0ea5d16a80b1216387ba00c27ee2ea0e808ac42", "patch": "@@ -0,0 +1,16 @@\n+--  { dg-do compile }\n+\n+package body Type_Conv2 is\n+\n+   function Wrap (X : Integer) return Root'Class is\n+   begin\n+      return Der_I'(X => X);\n+   end Wrap;\n+\n+   procedure Proc_Static is\n+      D : constant Der_I := Der_I (Wrap (0));  --  { dg-error \"initialization of limited object requires aggregate or function call\" }\n+   begin\n+      null;\n+   end Proc_Static;\n+\n+end Type_Conv2;"}, {"sha": "b9ddeb2c57ff73407eba197798f74a6ee9898d2f", "filename": "gcc/testsuite/gnat.dg/type_conv2.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42/gcc%2Ftestsuite%2Fgnat.dg%2Ftype_conv2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea5d16a80b1216387ba00c27ee2ea0e808ac42/gcc%2Ftestsuite%2Fgnat.dg%2Ftype_conv2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftype_conv2.ads?ref=e0ea5d16a80b1216387ba00c27ee2ea0e808ac42", "patch": "@@ -0,0 +1,13 @@\n+package Type_Conv2 is\n+\n+   type Root is abstract tagged limited null record;\n+\n+   type Der_I is new Root with record\n+      X : Integer;\n+   end record;\n+\n+   function Wrap (X : Integer) return Root'Class;\n+\n+   procedure Proc_Static;\n+\n+end Type_Conv2;"}]}