{"sha": "516edfdd8a1bffdfe73a09f4813c50c6a22cba39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE2ZWRmZGQ4YTFiZmZkZmU3M2EwOWY0ODEzYzUwYzZhMjJjYmEzOQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-04-20T13:38:05Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-04-20T13:38:05Z"}, "message": "re PR target/18145 (Do not emit __do_copy_data or __do_clear_bss if .data or .bss is empty.)\n\n\tPR target/18145\n\n\t* config/avr/avr.h (TARGET_ASM_INIT_SECTIONS): Delete.\n\t(ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Delete.\n\t(ASM_OUTPUT_ALIGNED_DECL_COMMON): Define.\n\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Define.\n\t(TARGET_ASM_NAMED_SECTION): Change to avr_asm_named_section.\n\n\t* config/avr/avr-protos.h (avr_asm_output_aligned_common):\n\tNew prototype.\n\n\t* config/avr/avr.c (TARGET_ASM_INIT_SECTIONS): Define.\n\t(avr_asm_named_section,\tavr_asm_output_aligned_common,\n\tavr_output_data_section_asm_op,\tavr_output_bss_section_asm_op):\n\tNew functions to update...\n\t(avr_need_clear_bss_p, avr_need_copy_data_p): ...these new variables.\n\t(avr_asm_init_sections): Overwrite section callbacks for\n\tdata_section, bss_section.\n\t(avr_file_start): Move output of __do_copy_data, __do_clear_bss\n\tfrom here to...\n\t(avr_file_end): ...here.\n\nFrom-SVN: r172769", "tree": {"sha": "d1fda4119531599d7c23c167b87af9714d02240d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1fda4119531599d7c23c167b87af9714d02240d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/516edfdd8a1bffdfe73a09f4813c50c6a22cba39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516edfdd8a1bffdfe73a09f4813c50c6a22cba39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516edfdd8a1bffdfe73a09f4813c50c6a22cba39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516edfdd8a1bffdfe73a09f4813c50c6a22cba39/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dafc951101fe6d8feeffecee7ac2e41cad1b7fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dafc951101fe6d8feeffecee7ac2e41cad1b7fe2"}], "stats": {"total": 152, "additions": 131, "deletions": 21}, "files": [{"sha": "ca18ffa018c77643c5c54fa252f954f99cfeab09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516edfdd8a1bffdfe73a09f4813c50c6a22cba39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516edfdd8a1bffdfe73a09f4813c50c6a22cba39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=516edfdd8a1bffdfe73a09f4813c50c6a22cba39", "patch": "@@ -1,3 +1,27 @@\n+2011-04-20  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/18145\n+\n+\t* config/avr/avr.h (TARGET_ASM_INIT_SECTIONS): Delete.\n+\t(ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Delete.\n+\t(ASM_OUTPUT_ALIGNED_DECL_COMMON): Define.\n+\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Define.\n+\t(TARGET_ASM_NAMED_SECTION): Change to avr_asm_named_section.\n+\n+\t* config/avr/avr-protos.h (avr_asm_output_aligned_common):\n+\tNew prototype.\n+\n+\t* config/avr/avr.c (TARGET_ASM_INIT_SECTIONS): Define.\n+\t(avr_asm_named_section,\tavr_asm_output_aligned_common,\n+\tavr_output_data_section_asm_op,\tavr_output_bss_section_asm_op):\n+\tNew functions to update...\n+\t(avr_need_clear_bss_p, avr_need_copy_data_p): ...these new variables.\n+\t(avr_asm_init_sections): Overwrite section callbacks for\n+\tdata_section, bss_section.\n+\t(avr_file_start): Move output of __do_copy_data, __do_clear_bss\n+\tfrom here to...\n+\t(avr_file_end): ...here.\n+\n 2011-04-20  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/48695"}, {"sha": "2f3e93d883c01619261aa06880aaf3de65a2043d", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516edfdd8a1bffdfe73a09f4813c50c6a22cba39/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516edfdd8a1bffdfe73a09f4813c50c6a22cba39/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=516edfdd8a1bffdfe73a09f4813c50c6a22cba39", "patch": "@@ -36,6 +36,7 @@ extern int avr_hard_regno_rename_ok (unsigned int, unsigned int);\n extern rtx avr_return_addr_rtx (int count, rtx tem);\n \n #ifdef TREE_CODE\n+extern void avr_asm_output_aligned_decl_common (FILE*, const_tree, const char*, unsigned HOST_WIDE_INT, unsigned int, bool);\n extern void asm_output_external (FILE *file, tree decl, char *name);\n extern int avr_progmem_p (tree decl, tree attributes);\n "}, {"sha": "9184d6cd963751bede59437427893e6cf11d8010", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 101, "deletions": 7, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516edfdd8a1bffdfe73a09f4813c50c6a22cba39/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516edfdd8a1bffdfe73a09f4813c50c6a22cba39/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=516edfdd8a1bffdfe73a09f4813c50c6a22cba39", "patch": "@@ -108,6 +108,7 @@ static void avr_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t      const_tree, bool);\n static void avr_help (void);\n static bool avr_function_ok_for_sibcall (tree, tree);\n+static void avr_asm_named_section (const char *name, unsigned int flags, tree decl);\n \n /* Allocate registers from r25 to r8 for parameters for function calls.  */\n #define FIRST_CUM_REG 26\n@@ -132,6 +133,10 @@ const struct mcu_type_s *avr_current_device;\n \n section *progmem_section;\n \n+/* To track if code will use .bss and/or .data.  */\n+bool avr_need_clear_bss_p = false;\n+bool avr_need_copy_data_p = false;\n+\n /* AVR attributes.  */\n static const struct attribute_spec avr_attribute_table[] =\n {\n@@ -197,6 +202,12 @@ static const struct default_options avr_option_optimization_table[] =\n #define TARGET_INSERT_ATTRIBUTES avr_insert_attributes\n #undef TARGET_SECTION_TYPE_FLAGS\n #define TARGET_SECTION_TYPE_FLAGS avr_section_type_flags\n+\n+/* `TARGET_ASM_NAMED_SECTION' must be defined in avr.h.  */\n+\n+#undef TARGET_ASM_INIT_SECTIONS\n+#define TARGET_ASM_INIT_SECTIONS avr_asm_init_sections\n+\n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST avr_register_move_cost\n #undef TARGET_MEMORY_MOVE_COST\n@@ -5190,7 +5201,60 @@ avr_output_progmem_section_asm_op (const void *arg ATTRIBUTE_UNUSED)\n   fprintf (asm_out_file, \"\\t.p2align 1\\n\");\n }\n \n-/* Implement TARGET_ASM_INIT_SECTIONS.  */\n+\n+/* Implement `ASM_OUTPUT_ALIGNED_DECL_LOCAL'.  */\n+/* Implement `ASM_OUTPUT_ALIGNED_DECL_COMMON'.  */\n+/* Track need of __do_clear_bss.  */\n+\n+void\n+avr_asm_output_aligned_decl_common (FILE * stream, const_tree decl ATTRIBUTE_UNUSED,\n+                                    const char *name, unsigned HOST_WIDE_INT size,\n+                                    unsigned int align, bool local_p)\n+{\n+  avr_need_clear_bss_p = true;\n+\n+  if (local_p)\n+    {\n+      fputs (\"\\t.local\\t\", stream);\n+      assemble_name (stream, name);\n+      fputs (\"\\n\", stream);\n+    }\n+  \n+  fputs (\"\\t.comm\\t\", stream);\n+  assemble_name (stream, name);\n+  fprintf (stream,\n+           \",\" HOST_WIDE_INT_PRINT_UNSIGNED \",%u\\n\",\n+           size, align / BITS_PER_UNIT);\n+}\n+\n+\n+/* Unnamed section callback for data_section\n+   to track need of __do_copy_data.  */\n+\n+static void\n+avr_output_data_section_asm_op (const void *data)\n+{\n+  avr_need_copy_data_p = true;\n+  \n+  /* Dispatch to default.  */\n+  output_section_asm_op (data);\n+}\n+\n+\n+/* Unnamed section callback for bss_section\n+   to track need of __do_clear_bss.  */\n+\n+static void\n+avr_output_bss_section_asm_op (const void *data)\n+{\n+  avr_need_clear_bss_p = true;\n+  \n+  /* Dispatch to default.  */\n+  output_section_asm_op (data);\n+}\n+\n+\n+/* Implement `TARGET_ASM_INIT_SECTIONS'.  */\n \n static void\n avr_asm_init_sections (void)\n@@ -5199,6 +5263,27 @@ avr_asm_init_sections (void)\n \t\t\t\t\t avr_output_progmem_section_asm_op,\n \t\t\t\t\t NULL);\n   readonly_data_section = data_section;\n+\n+  data_section->unnamed.callback = avr_output_data_section_asm_op;\n+  bss_section->unnamed.callback = avr_output_bss_section_asm_op;\n+}\n+\n+\n+/* Implement `TARGET_ASM_NAMED_SECTION'.  */\n+/* Track need of __do_clear_bss, __do_copy_data for named sections.  */\n+\n+void\n+avr_asm_named_section (const char *name, unsigned int flags, tree decl)\n+{\n+  if (!avr_need_copy_data_p)\n+    avr_need_copy_data_p = (0 == strncmp (name, \".data\", 5)\n+                            || 0 == strncmp (name, \".rodata\", 7)\n+                            || 0 == strncmp (name, \".gnu.linkonce.d\", 15));\n+  \n+  if (!avr_need_clear_bss_p)\n+    avr_need_clear_bss_p = (0 == strncmp (name, \".bss\", 4));\n+  \n+  default_elf_asm_named_section (name, flags, decl);\n }\n \n static unsigned int\n@@ -5219,6 +5304,8 @@ avr_section_type_flags (tree decl, const char *name, int reloc)\n   return flags;\n }\n \n+\n+/* Implement `TARGET_ASM_FILE_START'.  */\n /* Outputs some appropriate text to go at the start of an assembler\n    file.  */\n \n@@ -5237,20 +5324,27 @@ avr_file_start (void)\n   \n   fputs (\"__tmp_reg__ = 0\\n\" \n          \"__zero_reg__ = 1\\n\", asm_out_file);\n-\n-  /* FIXME: output these only if there is anything in the .data / .bss\n-     sections - some code size could be saved by not linking in the\n-     initialization code from libgcc if one or both sections are empty.  */\n-  fputs (\"\\t.global __do_copy_data\\n\", asm_out_file);\n-  fputs (\"\\t.global __do_clear_bss\\n\", asm_out_file);\n }\n \n+\n+/* Implement `TARGET_ASM_FILE_END'.  */\n /* Outputs to the stdio stream FILE some\n    appropriate text to go at the end of an assembler file.  */\n \n static void\n avr_file_end (void)\n {\n+  /* Output these only if there is anything in the\n+     .data* / .rodata* / .gnu.linkonce.* resp. .bss*\n+     input section(s) - some code size can be saved by not\n+     linking in the initialization code from libgcc if resp.\n+     sections are empty.  */\n+\n+  if (avr_need_copy_data_p)\n+    fputs (\".global __do_copy_data\\n\", asm_out_file);\n+\n+  if (avr_need_clear_bss_p)\n+    fputs (\".global __do_clear_bss\\n\", asm_out_file);\n }\n \n /* Choose the order in which to allocate hard registers for"}, {"sha": "b0c1b49486ec28ebd577a2bcdab7e3d42063bdf9", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516edfdd8a1bffdfe73a09f4813c50c6a22cba39/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516edfdd8a1bffdfe73a09f4813c50c6a22cba39/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=516edfdd8a1bffdfe73a09f4813c50c6a22cba39", "patch": "@@ -460,29 +460,20 @@ do {\t\t\t\t\t\t\t\t\t    \\\n #define ASM_APP_OFF \"/* #NOAPP */\\n\"\n \n /* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION default_elf_asm_named_section\n-#define TARGET_ASM_INIT_SECTIONS avr_asm_init_sections\n+#define TARGET_ASM_NAMED_SECTION avr_asm_named_section\n \n #define ASM_OUTPUT_ASCII(FILE, P, SIZE)\t gas_output_ascii (FILE,P,SIZE)\n \n #define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR) ((C) == '\\n' || ((C) == '$'))\n \n-#define ASM_OUTPUT_COMMON(STREAM, NAME, SIZE, ROUNDED)\t\t\t   \\\n-do {\t\t\t\t\t\t\t\t\t   \\\n-     fputs (\"\\t.comm \", (STREAM));\t\t\t\t\t   \\\n-     assemble_name ((STREAM), (NAME));\t\t\t\t\t   \\\n-     fprintf ((STREAM), \",%lu,1\\n\", (unsigned long)(SIZE));\t\t   \\\n-} while (0)\n+#define ASM_OUTPUT_ALIGNED_DECL_COMMON(STREAM, DECL, NAME, SIZE, ALIGN) \\\n+  avr_asm_output_aligned_decl_common (STREAM, DECL, NAME, SIZE, ALIGN, false)\n \n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n \n-#define ASM_OUTPUT_LOCAL(STREAM, NAME, SIZE, ROUNDED)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-     fputs (\"\\t.lcomm \", (STREAM));\t\t\t\t\t\\\n-     assemble_name ((STREAM), (NAME));\t\t\t\t\t\\\n-     fprintf ((STREAM), \",%d\\n\", (int)(SIZE));\t\t\t\t\\\n-} while (0)\n+#define ASM_OUTPUT_ALIGNED_DECL_LOCAL(STREAM, DECL, NAME, SIZE, ALIGN)  \\\n+  avr_asm_output_aligned_decl_common (STREAM, DECL, NAME, SIZE, ALIGN, true)\n \n #undef TYPE_ASM_OP\n #undef SIZE_ASM_OP"}]}