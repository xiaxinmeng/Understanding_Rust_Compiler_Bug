{"sha": "3fc786a446fd8888598c0a4537c5ba7b39fe039b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjNzg2YTQ0NmZkODg4ODU5OGMwYTQ1MzdjNWJhN2IzOWZlMDM5Yg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-11-21T18:27:49Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-11-21T18:27:49Z"}, "message": "* do_includes: Revert to using cpp_read_file.\n\nFrom-SVN: r37620", "tree": {"sha": "2ee6e22cbd1c413796d31b84acf380f9bbcb04ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ee6e22cbd1c413796d31b84acf380f9bbcb04ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fc786a446fd8888598c0a4537c5ba7b39fe039b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc786a446fd8888598c0a4537c5ba7b39fe039b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc786a446fd8888598c0a4537c5ba7b39fe039b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc786a446fd8888598c0a4537c5ba7b39fe039b/comments", "author": null, "committer": null, "parents": [{"sha": "847dde9555b9dc852d1de2678c99496b498446cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847dde9555b9dc852d1de2678c99496b498446cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847dde9555b9dc852d1de2678c99496b498446cc"}], "stats": {"total": 11, "additions": 3, "deletions": 8}, "files": [{"sha": "62428406ee2ad0d8447da4b1bef682b1512da50d", "filename": "gcc/cppinit.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc786a446fd8888598c0a4537c5ba7b39fe039b/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc786a446fd8888598c0a4537c5ba7b39fe039b/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=3fc786a446fd8888598c0a4537c5ba7b39fe039b", "patch": "@@ -937,16 +937,11 @@ do_includes (pfile, p, scan)\n {\n   while (p)\n     {\n-      cpp_token header;\n       struct pending_option *q;\n \n-      header.type = CPP_STRING;\n-      header.val.str.text = (unsigned char *) p->arg;\n-      header.val.str.len = strlen (p->arg);\n-\n-      /* Use the #include \"\" search path.  */\n-      _cpp_execute_include (pfile, &header, 0, 0);\n-      if (scan)\n+      /* Later: maybe update this to use the #include \"\" search path\n+\t if cpp_read_file fails.  */\n+      if (cpp_read_file (pfile, p->arg) && scan)\n \tcpp_scan_buffer_nooutput (pfile);\n       q = p->next;\n       free (p);"}]}