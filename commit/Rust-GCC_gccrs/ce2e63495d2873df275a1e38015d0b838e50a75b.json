{"sha": "ce2e63495d2873df275a1e38015d0b838e50a75b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UyZTYzNDk1ZDI4NzNkZjI3NWExZTM4MDE1ZDBiODM4ZTUwYTc1Yg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-05-07T15:29:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-05-07T15:29:57Z"}, "message": "type_traits: (make_signed, make_unsigned): Adjust for enum sizes.\n\n2007-05-07  Benjamin Kosnik  <bkoz@redhat.com>\n            Howard Hinnant  <hhinnant@apple.com>\n\n\t* include/std/type_traits: (make_signed, make_unsigned): Adjust\n\tfor enum sizes.\t\n\t* testsuite/20_util/make_unsigned/requirements/typedefs.cc: Move to...\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc: ...here.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Add,\n\tcompile with -funsigned-char -fshort-enums.\n\t* testsuite/20_util/make_signed/requirements/typedefs.cc: Move to...\n\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc: ...here.\n\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc: Add,\n\tcompile with -funsigned-char -fshort-enums.\n\n\t* testsuite/20_util/headers/type_traits/types_std_c++0x_neg.cc:\n\tAdd a temporary xfail to this test for all platforms.\n\n\nCo-Authored-By: Howard Hinnant <hhinnant@apple.com>\n\nFrom-SVN: r124500", "tree": {"sha": "9518d4e7a62dfc1fc031eb8b35ad814f47f5a435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9518d4e7a62dfc1fc031eb8b35ad814f47f5a435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce2e63495d2873df275a1e38015d0b838e50a75b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2e63495d2873df275a1e38015d0b838e50a75b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2e63495d2873df275a1e38015d0b838e50a75b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2e63495d2873df275a1e38015d0b838e50a75b/comments", "author": null, "committer": null, "parents": [{"sha": "4be1caf900da7480142d0c027a251b28d2af49a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be1caf900da7480142d0c027a251b28d2af49a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be1caf900da7480142d0c027a251b28d2af49a0"}], "stats": {"total": 185, "additions": 169, "deletions": 16}, "files": [{"sha": "7a0a27cd685abd7624f83c4fd391590edc3240ce", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ce2e63495d2873df275a1e38015d0b838e50a75b", "patch": "@@ -1,3 +1,20 @@\n+2007-05-07  Benjamin Kosnik  <bkoz@redhat.com>\n+            Howard Hinnant  <hhinnant@apple.com>\n+\n+\t* include/std/type_traits: (make_signed, make_unsigned): Adjust\n+\tfor enum sizes.\t\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs.cc: Move to...\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-1.cc: ...here.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-2.cc: Add,\n+\tcompile with -funsigned-char -fshort-enums.\n+\t* testsuite/20_util/make_signed/requirements/typedefs.cc: Move to...\n+\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc: ...here.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-2.cc: Add,\n+\tcompile with -funsigned-char -fshort-enums.\n+\n+\t* testsuite/20_util/headers/type_traits/types_std_c++0x_neg.cc:\n+\tAdd a temporary xfail to this test for all platforms.\n+\t\n 2007-05-06  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/std/complex: Add missing extern template declarations."}, {"sha": "40191887d4956e7f0b39366cd25e933b1bc32bdf", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=ce2e63495d2873df275a1e38015d0b838e50a75b", "patch": "@@ -204,15 +204,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     struct __make_unsigned_selector<_Tp, false, false, true>\n     {\n     private:\n-      // GNU enums start with sizeof int.\n-      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned int);\n-      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned long);\n-      typedef conditional<__b2, unsigned long, unsigned long long> __cond;\n+      // GNU enums start with sizeof short.\n+      typedef unsigned short __smallest;\n+      static const bool __b1 = sizeof(_Tp) <= sizeof(__smallest);\n+      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);\n+      typedef conditional<__b2, unsigned int, unsigned long> __cond;\n       typedef typename __cond::type __cond_type;\n-      typedef unsigned int __ui_type;\n \n     public:\n-      typedef typename conditional<__b1, __ui_type, __cond_type>::type __type;\n+      typedef typename conditional<__b1, __smallest, __cond_type>::type __type;\n     };\n \n   // Primary class template.\n@@ -301,15 +301,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     struct __make_signed_selector<_Tp, false, false, true>\n     {\n     private:\n-      // GNU enums start with sizeof int.\n-      static const bool __b1 = sizeof(_Tp) <= sizeof(signed int);\n-      static const bool __b2 = sizeof(_Tp) <= sizeof(signed long);\n-      typedef conditional<__b2, signed long, signed long long> __cond;\n+      // GNU enums start with sizeof short.\n+      typedef signed short __smallest;\n+      static const bool __b1 = sizeof(_Tp) <= sizeof(__smallest);\n+      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);\n+      typedef conditional<__b2, signed int, signed long> __cond;\n       typedef typename __cond::type __cond_type;\n-      typedef int __i_type;\n \n     public:\n-      typedef typename conditional<__b1, __i_type, __cond_type>::type __type;\n+      typedef typename conditional<__b1, __smallest, __cond_type>::type __type;\n     };\n \n   // Primary class template."}, {"sha": "baeb71e0072fdf4a6c657cc874e58ed582ae678a", "filename": "libstdc++-v3/testsuite/20_util/headers/type_traits/types_std_c++0x_neg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Ftypes_std_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Ftypes_std_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Ftypes_std_c%2B%2B0x_neg.cc?ref=ce2e63495d2873df275a1e38015d0b838e50a75b", "patch": "@@ -30,8 +30,8 @@ namespace gnu\n   using std::has_nothrow_copy;\n }\n \n-// { dg-error \"has not been declared\" \"\" { target *-*-* } 27 } \n-// { dg-error \"has not been declared\" \"\" { target *-*-* } 28 } \n-// { dg-error \"has not been declared\" \"\" { target *-*-* } 29 } \n-// { dg-error \"has not been declared\" \"\" { target *-*-* } 30 } \n+// { dg-error \"has not been declared\" \"\" { xfail *-*-* } 27 } \n+// { dg-error \"has not been declared\" \"\" { xfail *-*-* } 28 } \n+// { dg-error \"has not been declared\" \"\" { xfail *-*-* } 29 } \n+// { dg-error \"has not been declared\" \"\" { xfail *-*-* } 30 } \n "}, {"sha": "826e47ed3e84ad42ab12174d06504708b3601e55", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc?ref=ce2e63495d2873df275a1e38015d0b838e50a75b", "previous_filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs.cc"}, {"sha": "3a820ace9eba0a73cd99c9801437ff8c9fc0d700", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-2.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-2.cc?ref=ce2e63495d2873df275a1e38015d0b838e50a75b", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums\" }\n+\n+// 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+enum test_enum { first_selection };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::make_signed;\n+  using std::is_same;\n+\n+  // Positive tests.\n+  typedef make_signed<const int>::type  \ttest2_type;\n+  VERIFY( (is_same<test2_type, const int>::value) );\n+\n+  typedef make_signed<const unsigned int>::type  \ttest21c_type;\n+  VERIFY( (is_same<test21c_type, const signed int>::value) );\n+\n+  typedef make_signed<volatile unsigned int>::type  \ttest21v_type;\n+  VERIFY( (is_same<test21v_type, volatile signed int>::value) );\n+\n+  typedef make_signed<const volatile unsigned int>::type  \ttest21cv_type;\n+  VERIFY( (is_same<test21cv_type, const volatile signed int>::value) );\n+\n+  typedef make_signed<const char>::type  \ttest22_type;\n+  VERIFY( (is_same<test22_type, const signed char>::value) );\n+\n+  typedef make_signed<volatile wchar_t>::type  \ttest23_type;\n+  VERIFY( (is_same<test23_type, volatile signed wchar_t>::value) );\n+\n+#if 0\n+  // XXX \n+  // When is_signed works for floating points types this should pass\n+  typedef make_signed<volatile float>::type  \ttest24_type;\n+  VERIFY( (is_same<test24_type, volatile int>::value) );\n+#endif\n+\n+  typedef make_signed<test_enum>::type  \ttest25_type;\n+  VERIFY( (is_same<test25_type, short>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b09d3e93aa4f416a2ebc15ae7bc6c0fcaf1f35d1", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-1.cc?ref=ce2e63495d2873df275a1e38015d0b838e50a75b", "previous_filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs.cc"}, {"sha": "9e5c64aff2c8d5b1ea9778daacfca31da76e21fe", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-2.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce2e63495d2873df275a1e38015d0b838e50a75b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-2.cc?ref=ce2e63495d2873df275a1e38015d0b838e50a75b", "patch": "@@ -0,0 +1,68 @@\n+// { dg-options \"-std=gnu++0x -funsigned-char -fshort-enums\" }\n+\n+// 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n+//\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+enum test_enum { first_selection };\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::make_unsigned;\n+  using std::is_same;\n+\n+  // Positive tests.\n+  typedef make_unsigned<const unsigned int>::type  \ttest2_type;\n+  VERIFY( (is_same<test2_type, const unsigned int>::value) );\n+\n+  typedef make_unsigned<const signed int>::type  \ttest21c_type;\n+  VERIFY( (is_same<test21c_type, const unsigned int>::value) );\n+\n+  typedef make_unsigned<volatile signed int>::type  \ttest21v_type;\n+  VERIFY( (is_same<test21v_type, volatile unsigned int>::value) );\n+\n+  typedef make_unsigned<const volatile signed int>::type  \ttest21cv_type;\n+  VERIFY( (is_same<test21cv_type, const volatile unsigned int>::value) );\n+\n+  typedef make_unsigned<const char>::type  \ttest22_type;\n+  VERIFY( (is_same<test22_type, const unsigned char>::value) );\n+\n+  typedef make_unsigned<volatile wchar_t>::type  \ttest23_type;\n+  VERIFY( (is_same<test23_type, volatile unsigned wchar_t>::value) );\n+\n+#if 0\n+  // XXX \n+  // When is_unsigned works for floating points types this should pass\n+  typedef make_unsigned<volatile float>::type  \ttest24_type;\n+  VERIFY( (is_same<test24_type, volatile unsigned int>::value) );\n+#endif\n+\n+  typedef make_unsigned<test_enum>::type  \ttest25_type;\n+  VERIFY( (is_same<test25_type, unsigned short>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}