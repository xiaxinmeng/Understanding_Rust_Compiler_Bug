{"sha": "73250c4c059842a9564294131a6639c595ee88d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMyNTBjNGMwNTk4NDJhOTU2NDI5NDEzMWE2NjM5YzU5NWVlODhkOQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-11-14T09:22:51Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-11-14T09:22:51Z"}, "message": "aarch64.c: Include aarch-cost-tables.h.\n\n\n\t* config/aarch64/aarch64.c: Include aarch-cost-tables.h.\n\t(generic_rtx_cost_table): Remove.\n\t(aarch64_rtx_costs): Use fields from cpu_cost_table.\n\t* config/aarch64/aarch64-protos.h (tune_params): Use cpu_cost_table for\n\tinsn_extra_cost.\n\t(cpu_rtx_cost_table): Remove.\n\nFrom-SVN: r204779", "tree": {"sha": "b0a6aa09c793f10d0f1d50ceed08e75387ea55ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0a6aa09c793f10d0f1d50ceed08e75387ea55ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73250c4c059842a9564294131a6639c595ee88d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73250c4c059842a9564294131a6639c595ee88d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73250c4c059842a9564294131a6639c595ee88d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73250c4c059842a9564294131a6639c595ee88d9/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "571880a0a4c512195aa7d41929ba6795190887b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/571880a0a4c512195aa7d41929ba6795190887b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/571880a0a4c512195aa7d41929ba6795190887b2"}], "stats": {"total": 87, "additions": 32, "deletions": 55}, "files": [{"sha": "27783c7aab0c571c63f9871021d84ebe79681aab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73250c4c059842a9564294131a6639c595ee88d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73250c4c059842a9564294131a6639c595ee88d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73250c4c059842a9564294131a6639c595ee88d9", "patch": "@@ -1,3 +1,12 @@\n+2013-11-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c: Include aarch-cost-tables.h.\n+\t(generic_rtx_cost_table): Remove.\n+\t(aarch64_rtx_costs): Use fields from cpu_cost_table.\n+\t* config/aarch64/aarch64-protos.h (tune_params): Use cpu_cost_table for\n+\tinsn_extra_cost.\n+\t(cpu_rtx_cost_table): Remove.\n+\n 2013-11-14  Julian Brown  <julian@codesourcery.com>\n \tJoey Ye  <joey.ye@arm.com>\n "}, {"sha": "489fd1cd7b598184066b51133774e0433f11f647", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73250c4c059842a9564294131a6639c595ee88d9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73250c4c059842a9564294131a6639c595ee88d9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=73250c4c059842a9564294131a6639c595ee88d9", "patch": "@@ -108,25 +108,6 @@ enum aarch64_symbol_type\n    cost models and vectors for address cost calculations, register\n    move costs and memory move costs.  */\n \n-/* Extra costs for specific insns.  Only records the cost above a\n-   single insn.  */\n-\n-struct cpu_rtx_cost_table\n-{\n-  const int memory_load;\n-  const int memory_store;\n-  const int register_shift;\n-  const int int_divide;\n-  const int float_divide;\n-  const int double_divide;\n-  const int int_multiply;\n-  const int int_multiply_extend;\n-  const int int_multiply_add;\n-  const int int_multiply_extend_add;\n-  const int float_multiply;\n-  const int double_multiply;\n-};\n-\n /* Additional cost for addresses.  */\n struct cpu_addrcost_table\n {\n@@ -170,7 +151,7 @@ struct cpu_vector_cost\n \n struct tune_params\n {\n-  const struct cpu_rtx_cost_table *const insn_extra_cost;\n+  const struct cpu_cost_table *const insn_extra_cost;\n   const struct cpu_addrcost_table *const addr_cost;\n   const struct cpu_regmove_cost *const regmove_cost;\n   const struct cpu_vector_cost *const vec_costs;"}, {"sha": "4866563d4cee45c6a887ce4f9344f8f516ff9caf", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 22, "deletions": 35, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73250c4c059842a9564294131a6639c595ee88d9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73250c4c059842a9564294131a6639c595ee88d9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=73250c4c059842a9564294131a6639c595ee88d9", "patch": "@@ -47,6 +47,7 @@\n #include \"dwarf2.h\"\n #include \"cfgloop.h\"\n #include \"tree-vectorizer.h\"\n+#include \"config/arm/aarch-cost-tables.h\"\n \n /* Defined for convenience.  */\n #define POINTER_BYTES (POINTER_SIZE / BITS_PER_UNIT)\n@@ -149,21 +150,6 @@ unsigned long aarch64_tune_flags = 0;\n #if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n __extension__\n #endif\n-static const struct cpu_rtx_cost_table generic_rtx_cost_table =\n-{\n-  NAMED_PARAM (memory_load, COSTS_N_INSNS (1)),\n-  NAMED_PARAM (memory_store, COSTS_N_INSNS (0)),\n-  NAMED_PARAM (register_shift, COSTS_N_INSNS (1)),\n-  NAMED_PARAM (int_divide, COSTS_N_INSNS (6)),\n-  NAMED_PARAM (float_divide, COSTS_N_INSNS (2)),\n-  NAMED_PARAM (double_divide, COSTS_N_INSNS (6)),\n-  NAMED_PARAM (int_multiply, COSTS_N_INSNS (1)),\n-  NAMED_PARAM (int_multiply_extend, COSTS_N_INSNS (1)),\n-  NAMED_PARAM (int_multiply_add, COSTS_N_INSNS (1)),\n-  NAMED_PARAM (int_multiply_extend_add, COSTS_N_INSNS (1)),\n-  NAMED_PARAM (float_multiply, COSTS_N_INSNS (0)),\n-  NAMED_PARAM (double_multiply, COSTS_N_INSNS (1))\n-};\n \n #if HAVE_DESIGNATED_INITIALIZERS && GCC_VERSION >= 2007\n __extension__\n@@ -216,7 +202,7 @@ __extension__\n #endif\n static const struct tune_params generic_tunings =\n {\n-  &generic_rtx_cost_table,\n+  &generic_extra_costs,\n   &generic_addrcost_table,\n   &generic_regmove_cost,\n   &generic_vector_cost,\n@@ -4491,7 +4477,7 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t\t   int param ATTRIBUTE_UNUSED, int *cost, bool speed)\n {\n   rtx op0, op1;\n-  const struct cpu_rtx_cost_table *extra_cost\n+  const struct cpu_cost_table *extra_cost\n     = aarch64_tune_params->insn_extra_cost;\n \n   switch (code)\n@@ -4504,7 +4490,7 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t{\n \tcase MEM:\n \t  if (speed)\n-\t    *cost += extra_cost->memory_store;\n+\t    *cost += extra_cost->ldst.store;\n \n \t  if (op1 != const0_rtx)\n \t    *cost += rtx_cost (op1, SET, 1, speed);\n@@ -4541,7 +4527,7 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \n     case MEM:\n       if (speed)\n-\t*cost += extra_cost->memory_load;\n+\t*cost += extra_cost->ldst.load;\n \n       return true;\n \n@@ -4627,15 +4613,16 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t\t\t\t\t    speed)\n \t\t\t\t+ rtx_cost (op1, PLUS, 1, speed));\n \t\t      if (speed)\n-\t\t\t*cost += extra_cost->int_multiply_extend_add;\n+\t\t\t*cost +=\n+\t\t\t  extra_cost->mult[GET_MODE (x) == DImode].extend_add;\n \t\t      return true;\n \t\t    }\n \t\t  *cost += (rtx_cost (XEXP (op0, 0), MULT, 0, speed)\n \t\t\t    + rtx_cost (XEXP (op0, 1), MULT, 1, speed)\n \t\t\t    + rtx_cost (op1, PLUS, 1, speed));\n \n \t\t  if (speed)\n-\t\t    *cost += extra_cost->int_multiply_add;\n+\t\t    *cost += extra_cost->mult[GET_MODE (x) == DImode].add;\n \t\t}\n \n \t      *cost += (rtx_cost (new_op0, PLUS, 0, speed)\n@@ -4701,7 +4688,7 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \n       /* Shifting by a register often takes an extra cycle.  */\n       if (speed && !CONST_INT_P (XEXP (x, 1)))\n-\t*cost += extra_cost->register_shift;\n+\t*cost += extra_cost->alu.arith_shift_reg;\n \n       *cost += rtx_cost (XEXP (x, 0), ASHIFT, 0, speed);\n       return true;\n@@ -4744,19 +4731,19 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t      *cost += (rtx_cost (XEXP (op0, 0), MULT, 0, speed)\n \t\t\t+ rtx_cost (XEXP (op1, 0), MULT, 1, speed));\n \t      if (speed)\n-\t\t*cost += extra_cost->int_multiply_extend;\n+\t\t*cost += extra_cost->mult[GET_MODE (x) == DImode].extend;\n \t      return true;\n \t    }\n \n \t  if (speed)\n-\t    *cost += extra_cost->int_multiply;\n+\t    *cost += extra_cost->mult[GET_MODE (x) == DImode].simple;\n \t}\n       else if (speed)\n \t{\n \t  if (GET_MODE (x) == DFmode)\n-\t    *cost += extra_cost->double_multiply;\n+\t    *cost += extra_cost->fp[1].mult;\n \t  else if (GET_MODE (x) == SFmode)\n-\t    *cost += extra_cost->float_multiply;\n+\t    *cost += extra_cost->fp[0].mult;\n \t}\n \n       return false;  /* All arguments need to be in registers.  */\n@@ -4767,14 +4754,14 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n       if (speed)\n \t{\n \t  if (GET_MODE_CLASS (GET_MODE (x)) == MODE_INT)\n-\t    *cost += (extra_cost->int_multiply_add\n-\t\t      + extra_cost->int_divide);\n+\t    *cost += (extra_cost->mult[GET_MODE (x) == DImode].add\n+\t\t      + extra_cost->mult[GET_MODE (x) == DImode].idiv);\n \t  else if (GET_MODE (x) == DFmode)\n-\t    *cost += (extra_cost->double_multiply\n-\t\t      + extra_cost->double_divide);\n+\t    *cost += (extra_cost->fp[1].mult\n+\t\t      + extra_cost->fp[1].div);\n \t  else if (GET_MODE (x) == SFmode)\n-\t    *cost += (extra_cost->float_multiply\n-\t\t      + extra_cost->float_divide);\n+\t    *cost += (extra_cost->fp[0].mult\n+\t\t      + extra_cost->fp[0].div);\n \t}\n       return false;  /* All arguments need to be in registers.  */\n \n@@ -4784,11 +4771,11 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n       if (speed)\n \t{\n \t  if (GET_MODE_CLASS (GET_MODE (x)) == MODE_INT)\n-\t    *cost += extra_cost->int_divide;\n+\t    *cost += extra_cost->mult[GET_MODE (x) == DImode].idiv;\n \t  else if (GET_MODE (x) == DFmode)\n-\t    *cost += extra_cost->double_divide;\n+\t    *cost += extra_cost->fp[1].div;\n \t  else if (GET_MODE (x) == SFmode)\n-\t    *cost += extra_cost->float_divide;\n+\t    *cost += extra_cost->fp[0].div;\n \t}\n       return false;  /* All arguments need to be in registers.  */\n "}]}