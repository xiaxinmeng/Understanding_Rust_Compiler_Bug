{"sha": "2bf54d93f159210d0c05a07c655eb847c069365c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmNTRkOTNmMTU5MjEwZDBjMDVhMDdjNjU1ZWI4NDdjMDY5MzY1Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-05-02T12:43:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-05-02T12:43:47Z"}, "message": "common.opt (fstrict-overflow): Alias negative to fwrapv.\n\n2017-05-02  Richard Biener  <rguenther@suse.de>\n\n\t* common.opt (fstrict-overflow): Alias negative to fwrapv.\n\t* doc/invoke.texi (fstrict-overflow): Remove all traces of\n\t-fstrict-overflow documentation.\n\t* tree.h (TYPE_OVERFLOW_UNDEFINED): Do not test flag_strict_overflow.\n\t(POINTER_TYPE_OVERFLOW_UNDEFINED): Test !flag_wrapv instead of\n\tflag_strict_overflow.\n\t* ipa-inline.c (can_inline_edge_p): Do not test flag_strict_overflow.\n\t* lto-opts.c (lto_write_options): Do not stream it.\n\t* lto-wrapper.c (merge_and_complain): Do not handle it.\n\t* opts.c (default_options_table): Do not set -fstrict-overflow.\n\t(finish_options): Likewise do not clear it when sanitizing.\n\t* simplify-rtx.c (simplify_const_relational_operation): Do not\n\ttest flag_strict_overflow.\n\n\tada/\n\t* gcc-interface/misc.c (gnat_post_options): Do not set\n\t-fstrict-overflow.\n\n\t* c-c++-common/Wlogical-op-1.c: Add -fwrapv to restore previous\n\tbehavior.\n\t* gcc.target/i386/pr46253.c: Make i unsigned to avoid warning.\n\nFrom-SVN: r247495", "tree": {"sha": "ddcdc5b7297fd81372eb0759c3151dac988eb799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddcdc5b7297fd81372eb0759c3151dac988eb799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bf54d93f159210d0c05a07c655eb847c069365c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf54d93f159210d0c05a07c655eb847c069365c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bf54d93f159210d0c05a07c655eb847c069365c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf54d93f159210d0c05a07c655eb847c069365c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03dc1f5f90a13c84967f8c2e684b076983f11d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03dc1f5f90a13c84967f8c2e684b076983f11d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03dc1f5f90a13c84967f8c2e684b076983f11d55"}], "stats": {"total": 115, "additions": 44, "deletions": 71}, "files": [{"sha": "194dbe22b12a2f08fd8dea9d55f2fbe694651ba4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -1,3 +1,19 @@\n+2017-05-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* common.opt (fstrict-overflow): Alias negative to fwrapv.\n+\t* doc/invoke.texi (fstrict-overflow): Remove all traces of\n+\t-fstrict-overflow documentation.\n+\t* tree.h (TYPE_OVERFLOW_UNDEFINED): Do not test flag_strict_overflow.\n+\t(POINTER_TYPE_OVERFLOW_UNDEFINED): Test !flag_wrapv instead of\n+\tflag_strict_overflow.\n+\t* ipa-inline.c (can_inline_edge_p): Do not test flag_strict_overflow.\n+\t* lto-opts.c (lto_write_options): Do not stream it.\n+\t* lto-wrapper.c (merge_and_complain): Do not handle it.\n+\t* opts.c (default_options_table): Do not set -fstrict-overflow.\n+\t(finish_options): Likewise do not clear it when sanitizing.\n+\t* simplify-rtx.c (simplify_const_relational_operation): Do not\n+\ttest flag_strict_overflow.\n+\n 2017-05-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.md (*add<mode>3_ieee): Merge to add<mode>3"}, {"sha": "a99a53beafc74b755a32f0c11365cfc16f764984", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -1,3 +1,8 @@\n+2017-05-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc-interface/misc.c (gnat_post_options): Do not set\n+\t-fstrict-overflow.\n+\n 2017-05-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (assoc_to_constructor): Make sure"}, {"sha": "18c825ca13e200fdff70cddeab95f9dc63634a8f", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -266,10 +266,6 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n   if (!global_options_set.x_flag_diagnostics_show_caret)\n     global_dc->show_caret = false;\n \n-  /* Set strict overflow by default for Ada.  */\n-  if (!global_options_set.x_flag_strict_overflow)\n-    global_options.x_flag_strict_overflow = true;\n-\n   /* Warn only if STABS is not the default: we don't want to emit a warning if\n      the user did not use a -gstabs option.  */\n   if (PREFERRED_DEBUGGING_TYPE != DBX_DEBUG && write_symbols == DBX_DEBUG)"}, {"sha": "b7ece0c73e110f8f4863ae1471fa21a663acc991", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -2342,8 +2342,8 @@ Common Report Var(flag_strict_aliasing) Optimization\n Assume strict aliasing rules apply.\n \n fstrict-overflow\n-Common Report Var(flag_strict_overflow) Optimization\n-Treat signed overflow as undefined.\n+Common NegativeAlias Alias(fwrapv)\n+Treat signed overflow as undefined.  Negated as -fwrapv.\n \n fsync-libcalls\n Common Report Var(flag_sync_libcalls) Init(1)"}, {"sha": "65308c9d9330f7cb7426f05b1838c02748e47e88", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 40, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -420,7 +420,7 @@ Objective-C and Objective-C++ Dialects}.\n -fsplit-paths @gol\n -fsplit-wide-types  -fssa-backprop  -fssa-phiopt @gol\n -fstdarg-opt  -fstore-merging  -fstrict-aliasing @gol\n--fstrict-overflow  -fthread-jumps  -ftracer  -ftree-bit-ccp @gol\n+-fthread-jumps  -ftracer  -ftree-bit-ccp @gol\n -ftree-builtin-call-dce  -ftree-ccp  -ftree-ch @gol\n -ftree-coalesce-vars  -ftree-copy-prop  -ftree-dce  -ftree-dominator-opts @gol\n -ftree-dse  -ftree-forwprop  -ftree-fre  -fcode-hoisting @gol\n@@ -4937,7 +4937,7 @@ Does not warn about incomplete types.\n @itemx -Wstrict-overflow=@var{n}\n @opindex Wstrict-overflow\n @opindex Wno-strict-overflow\n-This option is only active when @option{-fstrict-overflow} is active.\n+This option is only active when signed overflow is undefined.\n It warns about cases where the compiler optimizes based on the\n assumption that signed overflow does not occur.  Note that it does not\n warn about all cases where the code might overflow: it only warns\n@@ -4957,15 +4957,15 @@ executed at all.\n @table @gcctabopt\n @item -Wstrict-overflow=1\n Warn about cases that are both questionable and easy to avoid.  For\n-example,  with @option{-fstrict-overflow}, the compiler simplifies\n+example the compiler simplifies\n @code{x + 1 > x} to @code{1}.  This level of\n @option{-Wstrict-overflow} is enabled by @option{-Wall}; higher levels\n are not, and must be explicitly requested.\n \n @item -Wstrict-overflow=2\n Also warn about other cases where a comparison is simplified to a\n constant.  For example: @code{abs (x) >= 0}.  This can only be\n-simplified when @option{-fstrict-overflow} is in effect, because\n+simplified when signed integer overflow is undefined, because\n @code{abs (INT_MIN)} overflows to @code{INT_MIN}, which is less than\n zero.  @option{-Wstrict-overflow} (with no level) is the same as\n @option{-Wstrict-overflow=2}.\n@@ -7113,7 +7113,7 @@ also turns on the following optimization flags:\n -fsched-interblock  -fsched-spec @gol\n -fschedule-insns  -fschedule-insns2 @gol\n -fstore-merging @gol\n--fstrict-aliasing -fstrict-overflow @gol\n+-fstrict-aliasing @gol\n -ftree-builtin-call-dce @gol\n -ftree-switch-conversion -ftree-tail-merge @gol\n -fcode-hoisting @gol\n@@ -8649,41 +8649,6 @@ int f() @{\n The @option{-fstrict-aliasing} option is enabled at levels\n @option{-O2}, @option{-O3}, @option{-Os}.\n \n-@item -fstrict-overflow\n-@opindex fstrict-overflow\n-Allow the compiler to assume strict signed overflow rules, depending\n-on the language being compiled.  For C (and C++) this means that\n-overflow when doing arithmetic with signed numbers is undefined, which\n-means that the compiler may assume that it does not happen.  This\n-permits various optimizations.  For example, the compiler assumes\n-that an expression like @code{i + 10 > i} is always true for\n-signed @code{i}.  This assumption is only valid if signed overflow is\n-undefined, as the expression is false if @code{i + 10} overflows when\n-using twos complement arithmetic.  When this option is in effect any\n-attempt to determine whether an operation on signed numbers \n-overflows must be written carefully to not actually involve overflow.\n-\n-This option also allows the compiler to assume strict pointer\n-semantics: given a pointer to an object, if adding an offset to that\n-pointer does not produce a pointer to the same object, the addition is\n-undefined.  This permits the compiler to conclude that @code{p + u >\n-p} is always true for a pointer @code{p} and unsigned integer\n-@code{u}.  This assumption is only valid because pointer wraparound is\n-undefined, as the expression is false if @code{p + u} overflows using\n-twos complement arithmetic.\n-\n-See also the @option{-fwrapv} option.  Using @option{-fwrapv} means\n-that integer signed overflow is fully defined: it wraps.  When\n-@option{-fwrapv} is used, there is no difference between\n-@option{-fstrict-overflow} and @option{-fno-strict-overflow} for\n-integers.  With @option{-fwrapv} certain types of overflow are\n-permitted.  For example, if the compiler gets an overflow when doing\n-arithmetic on constants, the overflowed value can still be used with\n-@option{-fwrapv}, but not otherwise.\n-\n-The @option{-fstrict-overflow} option is enabled at levels\n-@option{-O2}, @option{-O3}, @option{-Os}.\n-\n @item -falign-functions\n @itemx -falign-functions=@var{n}\n @opindex falign-functions"}, {"sha": "2be02b627c2c8089dae69da64b882e67554749d5", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -404,14 +404,7 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n       /* There are some options that change IL semantics which means\n          we cannot inline in these cases for correctness reason.\n \t Not even for always_inline declared functions.  */\n-      /* Strictly speaking only when the callee contains signed integer\n-         math where overflow is undefined.  */\n-     else if ((check_maybe_up (flag_strict_overflow)\n-\t       /* this flag is set by optimize.  Allow inlining across\n-\t\t  optimize boundary.  */\n-\t       && (!opt_for_fn (caller->decl, optimize)\n-\t\t   == !opt_for_fn (callee->decl, optimize) || !always_inline))\n-\t      || check_match (flag_wrapv)\n+     else if (check_match (flag_wrapv)\n \t      || check_match (flag_trapv)\n \t      /* When caller or callee does FP math, be sure FP codegen flags\n \t\t compatible.  */"}, {"sha": "9618bfb318f68a5fae0f02d71201aca353c9de49", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -133,10 +133,6 @@ lto_write_options (void)\n   if (!global_options_set.x_flag_trapv\n       && !global_options.x_flag_trapv)\n     append_to_collect_gcc_options (&temporary_obstack, &first_p, \"-fno-trapv\");\n-  if (!global_options_set.x_flag_strict_overflow\n-      && !global_options.x_flag_strict_overflow)\n-    append_to_collect_gcc_options (&temporary_obstack, &first_p,\n-\t\t\t       \"-fno-strict-overflow\");\n \n   if (!global_options_set.x_flag_openmp\n       && !global_options.x_flag_openmp)"}, {"sha": "4b86f939ca23512b417834bc275e6465334ba815", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -258,7 +258,6 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t  break;\n \n \tcase OPT_ftrapv:\n-\tcase OPT_fstrict_overflow:\n \tcase OPT_ffp_contract_:\n \t  /* For selected options we can merge conservatively.  */\n \t  for (j = 0; j < *decoded_options_count; ++j)\n@@ -522,7 +521,6 @@ append_compiler_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n \tcase OPT_fopenacc_dim_:\n \tcase OPT_fcilkplus:\n \tcase OPT_ftrapv:\n-\tcase OPT_fstrict_overflow:\n \tcase OPT_foffload_abi_:\n \tcase OPT_O:\n \tcase OPT_Ofast:"}, {"sha": "ffedb10f18fee785a4af4267cc17ec4ad27ddfe7", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -496,7 +496,6 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_2_PLUS, OPT_fschedule_insns2, NULL, 1 },\n #endif\n     { OPT_LEVELS_2_PLUS, OPT_fstrict_aliasing, NULL, 1 },\n-    { OPT_LEVELS_2_PLUS, OPT_fstrict_overflow, NULL, 1 },\n     { OPT_LEVELS_2_PLUS_SPEED_ONLY, OPT_freorder_blocks_algorithm_, NULL,\n       REORDER_BLOCKS_ALGORITHM_STC },\n     { OPT_LEVELS_2_PLUS, OPT_freorder_functions, NULL, 1 },\n@@ -984,10 +983,7 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   /* Aggressive compiler optimizations may cause false negatives.  */\n   if (opts->x_flag_sanitize & ~(SANITIZE_LEAK | SANITIZE_UNREACHABLE))\n-    {\n-      opts->x_flag_aggressive_loop_optimizations = 0;\n-      opts->x_flag_strict_overflow = 0;\n-    }\n+    opts->x_flag_aggressive_loop_optimizations = 0;\n \n   /* Enable -fsanitize-address-use-after-scope if address sanitizer is\n      enabled.  */"}, {"sha": "b45341973176408d7297a7ddb6e048549478b170", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -5316,7 +5316,7 @@ simplify_const_relational_operation (enum rtx_code code,\n \t  /* Optimize abs(x) < 0.0.  */\n \t  if (!HONOR_SNANS (mode)\n \t      && (!INTEGRAL_MODE_P (mode)\n-\t\t  || (!flag_wrapv && !flag_trapv && flag_strict_overflow)))\n+\t\t  || (!flag_wrapv && !flag_trapv)))\n \t    {\n \t      if (INTEGRAL_MODE_P (mode)\n \t\t  && (issue_strict_overflow_warning\n@@ -5332,7 +5332,7 @@ simplify_const_relational_operation (enum rtx_code code,\n \t  /* Optimize abs(x) >= 0.0.  */\n \t  if (!HONOR_NANS (mode)\n \t      && (!INTEGRAL_MODE_P (mode)\n-\t\t  || (!flag_wrapv && !flag_trapv && flag_strict_overflow)))\n+\t\t  || (!flag_wrapv && !flag_trapv)))\n \t    {\n \t      if (INTEGRAL_MODE_P (mode)\n \t          && (issue_strict_overflow_warning"}, {"sha": "31020af78bf6bd9590f159d7166c60f54da847b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -1,3 +1,9 @@\n+2017-05-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* c-c++-common/Wlogical-op-1.c: Add -fwrapv to restore previous\n+\tbehavior.\n+\t* gcc.target/i386/pr46253.c: Make i unsigned to avoid warning.\n+\n 2017-05-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80591"}, {"sha": "e89a35a5e8f0709459b676be43e066ba9ce80aa1", "filename": "gcc/testsuite/c-c++-common/Wlogical-op-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWlogical-op-1.c?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -1,6 +1,8 @@\n /* PR c/63357 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wlogical-op\" } */\n+/* For -fwrapv see PR80525, xfailing the subtest isn't possible as it passes\n+   with the C++ FE which doesn't have maybe_const_expr.  */\n+/* { dg-options \"-fwrapv -Wlogical-op\" } */\n \n #ifndef __cplusplus\n # define bool _Bool"}, {"sha": "4606c671fe625f426c40375314e9dc0824387f26", "filename": "gcc/testsuite/gcc.target/i386/pr46253.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46253.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46253.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46253.c?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -6,7 +6,7 @@ typedef int __m256i __attribute__ ((__vector_size__ (32)));\n __m256i bar (void);\n void foo (void)\n {\n-  int i = 0;\n+  unsigned int i = 0;\n   bar ();\n   __builtin_ia32_vzeroupper ();\n   while (++i);"}, {"sha": "5d02dc7a7d43ebe3077ee5897dac169761b09d67", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bf54d93f159210d0c05a07c655eb847c069365c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2bf54d93f159210d0c05a07c655eb847c069365c", "patch": "@@ -846,7 +846,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n    caller decide whether a warning is appropriate or not.  */\n #define TYPE_OVERFLOW_UNDEFINED(TYPE)\t\t\t\t\\\n   (!ANY_INTEGRAL_TYPE_CHECK(TYPE)->base.u.bits.unsigned_flag\t\\\n-   && !flag_wrapv && !flag_trapv && flag_strict_overflow)\n+   && !flag_wrapv && !flag_trapv)\n \n /* True if overflow for the given integral type should issue a\n    trap.  */\n@@ -860,7 +860,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n    && (flag_sanitize & SANITIZE_SI_OVERFLOW))\n \n /* True if pointer types have undefined overflow.  */\n-#define POINTER_TYPE_OVERFLOW_UNDEFINED (flag_strict_overflow)\n+#define POINTER_TYPE_OVERFLOW_UNDEFINED (!flag_wrapv)\n \n /* Nonzero in a VAR_DECL or STRING_CST means assembler code has been written.\n    Nonzero in a FUNCTION_DECL means that the function has been compiled."}]}