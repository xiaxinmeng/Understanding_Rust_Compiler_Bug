{"sha": "03160cc9d6a54017ced6e3f8566649b63f42a040", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMxNjBjYzlkNmE1NDAxN2NlZDZlM2Y4NTY2NjQ5YjYzZjQyYTA0MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-01-26T11:34:39Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-01-26T11:34:39Z"}, "message": "decl.c (annotate_value): Use test on the sign bit instead of on the sign of the value.\n\n\t* gcc-interface/decl.c (annotate_value) <INTEGER_CST>: Use test on\n\tthe sign bit instead of on the sign of the value.\n\t<PLUS_EXPR>: Turn addition of negative constant into subtraction.\n\t<MULT_EXPR>: Add test for degenerate case.\n\t<BIT_AND_EXPR>: Simplify.\n\nFrom-SVN: r268286", "tree": {"sha": "23f7d23da445eb1212e1d218d8371c970fd44c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23f7d23da445eb1212e1d218d8371c970fd44c9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03160cc9d6a54017ced6e3f8566649b63f42a040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03160cc9d6a54017ced6e3f8566649b63f42a040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03160cc9d6a54017ced6e3f8566649b63f42a040", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03160cc9d6a54017ced6e3f8566649b63f42a040/comments", "author": null, "committer": null, "parents": [{"sha": "18f5df94df9a8abcbf9410c79c180de6f7b85f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f5df94df9a8abcbf9410c79c180de6f7b85f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f5df94df9a8abcbf9410c79c180de6f7b85f51"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "83e651f72688b27b3ee14153ff18e9e6db9608b8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03160cc9d6a54017ced6e3f8566649b63f42a040/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03160cc9d6a54017ced6e3f8566649b63f42a040/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=03160cc9d6a54017ced6e3f8566649b63f42a040", "patch": "@@ -1,3 +1,11 @@\n+2019-01-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (annotate_value) <INTEGER_CST>: Use test on\n+\tthe sign bit instead of on the sign of the value.\n+\t<PLUS_EXPR>: Turn addition of negative constant into subtraction.\n+\t<MULT_EXPR>: Add test for degenerate case.\n+\t<BIT_AND_EXPR>: Simplify.\n+\n 2019-01-18  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* s-oscons-tmplt.c (AF_INET6): Do not undefine for RTEMS."}, {"sha": "4a2f6a6177a9a57f889f4bb9f2e9e7cb9afab73a", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03160cc9d6a54017ced6e3f8566649b63f42a040/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03160cc9d6a54017ced6e3f8566649b63f42a040/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=03160cc9d6a54017ced6e3f8566649b63f42a040", "patch": "@@ -8250,8 +8250,9 @@ annotate_value (tree gnu_size)\n     {\n     case INTEGER_CST:\n       /* For negative values, build NEGATE_EXPR of the opposite.  Such values\n-\t can appear for discriminants in expressions for variants.  */\n-      if (tree_int_cst_sgn (gnu_size) < 0)\n+\t can appear for discriminants in expressions for variants.  Note that,\n+\t sizetype being unsigned, we don't directly use tree_int_cst_sgn.  */\n+      if (tree_int_cst_sign_bit (gnu_size))\n \t{\n \t  tree t = wide_int_to_tree (sizetype, -wi::to_wide (gnu_size));\n \t  tcode = Negate_Expr;\n@@ -8323,8 +8324,21 @@ annotate_value (tree gnu_size)\n     case EQ_EXPR:\t\ttcode = Eq_Expr; break;\n     case NE_EXPR:\t\ttcode = Ne_Expr; break;\n \n-    case MULT_EXPR:\n     case PLUS_EXPR:\n+      /* Turn addition of negative constant into subtraction.  */\n+      if (TREE_CODE (TREE_OPERAND (gnu_size, 1)) == INTEGER_CST\n+\t  && tree_int_cst_sign_bit (TREE_OPERAND (gnu_size, 1)))\n+\t{\n+\t  tcode = Minus_Expr;\n+\t  ops[0] = annotate_value (TREE_OPERAND (gnu_size, 0));\n+\t  wide_int op1 = -wi::to_wide (TREE_OPERAND (gnu_size, 1));\n+\t  ops[1] = annotate_value (wide_int_to_tree (sizetype, op1));\n+\t  break;\n+\t}\n+\n+      /* ... fall through ... */\n+\n+    case MULT_EXPR:\n       tcode = (TREE_CODE (gnu_size) == MULT_EXPR ? Mult_Expr : Plus_Expr);\n       /* Fold conversions from bytes to bits into inner operations.  */\n       if (TREE_CODE (TREE_OPERAND (gnu_size, 1)) == INTEGER_CST\n@@ -8334,36 +8348,34 @@ annotate_value (tree gnu_size)\n \t  if (TREE_CODE (inner_op) == TREE_CODE (gnu_size)\n \t      && TREE_CODE (TREE_OPERAND (inner_op, 1)) == INTEGER_CST)\n \t    {\n+\t      ops[0] = annotate_value (TREE_OPERAND (inner_op, 0));\n \t      tree inner_op_op1 = TREE_OPERAND (inner_op, 1);\n \t      tree gnu_size_op1 = TREE_OPERAND (gnu_size, 1);\n \t      widest_int op1;\n \t      if (TREE_CODE (gnu_size) == MULT_EXPR)\n \t\top1 = (wi::to_widest (inner_op_op1)\n \t\t       * wi::to_widest (gnu_size_op1));\n \t      else\n-\t\top1 = (wi::to_widest (inner_op_op1)\n-\t\t       + wi::to_widest (gnu_size_op1));\n-\t      ops[1] = UI_From_gnu (wide_int_to_tree (sizetype, op1));\n-\t      ops[0] = annotate_value (TREE_OPERAND (inner_op, 0));\n+\t\t{\n+\t\t  op1 = (wi::to_widest (inner_op_op1)\n+\t\t\t + wi::to_widest (gnu_size_op1));\n+\t\t  if (wi::zext (op1, TYPE_PRECISION (sizetype)) == 0)\n+\t\t    return ops[0];\n+\t\t}\n+\t      ops[1] = annotate_value (wide_int_to_tree (sizetype, op1));\n \t    }\n \t}\n       break;\n \n     case BIT_AND_EXPR:\n       tcode = Bit_And_Expr;\n       /* For negative values in sizetype, build NEGATE_EXPR of the opposite.\n-\t Such values appear in expressions with aligning patterns.  Note that,\n-\t since sizetype is unsigned, we have to jump through some hoops.   */\n+\t Such values can appear in expressions with aligning patterns.  */\n       if (TREE_CODE (TREE_OPERAND (gnu_size, 1)) == INTEGER_CST)\n \t{\n-\t  tree op1 = TREE_OPERAND (gnu_size, 1);\n-\t  wide_int signed_op1 = wi::sext (wi::to_wide (op1),\n-\t\t\t\t\t  TYPE_PRECISION (sizetype));\n-\t  if (wi::neg_p (signed_op1))\n-\t    {\n-\t      op1 = wide_int_to_tree (sizetype, wi::neg (signed_op1));\n-\t      ops[1] = annotate_value (build1 (NEGATE_EXPR, sizetype, op1));\n-\t    }\n+\t  wide_int op1 = wi::sext (wi::to_wide (TREE_OPERAND (gnu_size, 1)),\n+\t\t\t\t   TYPE_PRECISION (sizetype));\n+\t  ops[1] = annotate_value (wide_int_to_tree (sizetype, op1));\n \t}\n       break;\n "}]}