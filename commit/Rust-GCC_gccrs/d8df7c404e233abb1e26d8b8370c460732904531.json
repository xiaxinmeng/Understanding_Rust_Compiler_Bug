{"sha": "d8df7c404e233abb1e26d8b8370c460732904531", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkZjdjNDA0ZTIzM2FiYjFlMjZkOGI4MzcwYzQ2MDczMjkwNDUzMQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-04-27T21:49:36Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-04-27T21:49:36Z"}, "message": "Revert r10-7920-g06eca1acafa27e19e82dc73927394a7a4d0bdbc5 .\n\n2020-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/93956\n\tPR fortran/94788\n\t* expr.c (gfc_check_pointer_assign): Revert patch for PR 93956.\n\t* interface.c: Likewise.\n\n2020-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/93956\n\tPR fortran/94788\n\t* gfortran.dg/pointer_assign_13.f90: Remove.", "tree": {"sha": "00c6677e3e90394939b2d392cf8c7d2a16544c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00c6677e3e90394939b2d392cf8c7d2a16544c1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8df7c404e233abb1e26d8b8370c460732904531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8df7c404e233abb1e26d8b8370c460732904531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8df7c404e233abb1e26d8b8370c460732904531", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8df7c404e233abb1e26d8b8370c460732904531/comments", "author": null, "committer": null, "parents": [{"sha": "6dffa67b46dc2d4deb25951f8b17e823f559cf3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dffa67b46dc2d4deb25951f8b17e823f559cf3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dffa67b46dc2d4deb25951f8b17e823f559cf3a"}], "stats": {"total": 101, "additions": 15, "deletions": 86}, "files": [{"sha": "1e6b593163d521ad35761917a753f36d93352c29", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8df7c404e233abb1e26d8b8370c460732904531/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8df7c404e233abb1e26d8b8370c460732904531/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d8df7c404e233abb1e26d8b8370c460732904531", "patch": "@@ -1,3 +1,10 @@\n+2020-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/93956\n+\tPR fortran/94788\n+\t* expr.c (gfc_check_pointer_assign): Revert patch for PR 93956.\n+\t* interface.c: Likewise.\n+\n 2020-04-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/94578"}, {"sha": "a9fa03ad153ff8d1bd6f51bfba991548c1cfa002", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8df7c404e233abb1e26d8b8370c460732904531/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8df7c404e233abb1e26d8b8370c460732904531/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=d8df7c404e233abb1e26d8b8370c460732904531", "patch": "@@ -4242,11 +4242,8 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,\n   if (rvalue->expr_type == EXPR_NULL)\n     return true;\n \n-  /* A function may also return subref arrray pointer.  */\n-\n-  if ((rvalue->expr_type == EXPR_VARIABLE && is_subref_array (rvalue))\n-      || rvalue->expr_type == EXPR_FUNCTION)\n-      lvalue->symtree->n.sym->attr.subref_array_pointer = 1;\n+  if (rvalue->expr_type == EXPR_VARIABLE && is_subref_array (rvalue))\n+    lvalue->symtree->n.sym->attr.subref_array_pointer = 1;\n \n   attr = gfc_expr_attr (rvalue);\n "}, {"sha": "ba1c8bc322eade13caf726aae58b242e375bb02a", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8df7c404e233abb1e26d8b8370c460732904531/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8df7c404e233abb1e26d8b8370c460732904531/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=d8df7c404e233abb1e26d8b8370c460732904531", "patch": "@@ -3788,36 +3788,6 @@ check_intents (gfc_formal_arglist *f, gfc_actual_arglist *a)\n   return true;\n }\n \n-/* Go through the argument list of a procedure and look for\n-   pointers which may be set, possibly introducing a span.  */\n-\n-static void\n-gfc_set_subref_array_pointer_arg (gfc_formal_arglist *dummy_args,\n-\t\t\t\t  gfc_actual_arglist *actual_args)\n-{\n-  gfc_formal_arglist *f;\n-  gfc_actual_arglist *a;\n-  gfc_symbol *a_sym;\n-  for (f = dummy_args, a = actual_args; f && a ; f = f->next, a = a->next)\n-    {\n-\n-      if (f->sym == NULL)\n-\tcontinue;\n-\n-      if (!f->sym->attr.pointer || f->sym->attr.intent == INTENT_IN)\n-\tcontinue;\n-\n-      if (a->expr == NULL || a->expr->expr_type != EXPR_VARIABLE)\n-\tcontinue;\n-      a_sym = a->expr->symtree->n.sym;\n-\n-      if (!a_sym->attr.pointer)\n-\tcontinue;\n-\n-      a_sym->attr.subref_array_pointer = 1;\n-    }\n-  return;\n-}\n \n /* Check how a procedure is used against its interface.  If all goes\n    well, the actual argument list will also end up being properly\n@@ -3998,10 +3968,6 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n   if (warn_aliasing)\n     check_some_aliasing (dummy_args, *ap);\n \n-  /* Set the subref_array_pointer_arg if needed.  */\n-  if (dummy_args)\n-    gfc_set_subref_array_pointer_arg (dummy_args, *ap);\n-\n   return true;\n }\n "}, {"sha": "bc4d09b204807a401a37dcc4e0254ee371e2b7ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8df7c404e233abb1e26d8b8370c460732904531/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8df7c404e233abb1e26d8b8370c460732904531/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8df7c404e233abb1e26d8b8370c460732904531", "patch": "@@ -1,3 +1,9 @@\n+2020-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/93956\n+\tPR fortran/94788\n+\t* gfortran.dg/pointer_assign_13.f90: Remove.\n+\n 2020-04-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94780"}, {"sha": "b3f2cd9dab7af0dbb2f97991030dca14d9cfa48e", "filename": "gcc/testsuite/gfortran.dg/pointer_assign_13.f90", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dffa67b46dc2d4deb25951f8b17e823f559cf3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dffa67b46dc2d4deb25951f8b17e823f559cf3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_13.f90?ref=6dffa67b46dc2d4deb25951f8b17e823f559cf3a", "patch": "@@ -1,47 +0,0 @@\n-! { dg-do run }\n-! PR 93956 - span was set incorrectly, leading to wrong code.\n-! Original test case by \"martin\".\n-program array_temps\n-  implicit none\n-  \n-  type :: tt\n-     integer :: u = 1\n-     integer :: v = 2\n-  end type tt\n-\n-  type(tt), dimension(:), pointer :: r\n-  integer :: n\n-  integer, dimension(:), pointer :: p, q, u\n-\n-  n = 10\n-  allocate(r(1:n))\n-  call foo(r%v,n)\n-  p => get(r(:))\n-  call foo(p, n)\n-  call get2(r,u)\n-  call foo(u,n)\n-  q => r%v\n-  call foo(q, n)\n-\n-deallocate(r)\n-\n-contains\n-\n-   subroutine foo(a, n)\n-      integer, dimension(:), intent(in) :: a\n-      integer, intent(in) :: n\n-      if (sum(a(1:n)) /= 2*n) stop 1\n-   end subroutine foo\n-\n-   function get(x) result(q)\n-      type(tt), dimension(:), target, intent(in) :: x\n-      integer, dimension(:), pointer :: q\n-      q => x(:)%v\n-   end function get\n-\n-   subroutine get2(x,q)\n-      type(tt), dimension(:), target, intent(in) :: x\n-      integer, dimension(:), pointer, intent(out) :: q\n-      q => x(:)%v\n-    end subroutine get2\n-end program array_temps"}]}