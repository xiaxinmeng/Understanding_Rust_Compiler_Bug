{"sha": "50bee766bc9f4020cf1f814178155d16e80dccaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiZWU3NjZiYzlmNDAyMGNmMWY4MTQxNzgxNTVkMTZlODBkY2NhYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-07-16T13:15:37Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-08-03T21:43:05Z"}, "message": "c++: Variable template and template parameter pack [PR96218]\n\nThis is DR 2032 which says that the restrictions regarding template\nparameter packs and default arguments apply to variable templates as\nwell, but we weren't detecting that.\n\ngcc/cp/ChangeLog:\n\n\tDR 2032\n\tPR c++/96218\n\t* pt.c (check_default_tmpl_args): Also consider variable\n\ttemplates.\n\ngcc/testsuite/ChangeLog:\n\n\tDR 2032\n\tPR c++/96218\n\t* g++.dg/cpp1y/var-templ67.C: New test.", "tree": {"sha": "da6017acebc2d48197ef88ff2254c624160cb003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da6017acebc2d48197ef88ff2254c624160cb003"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50bee766bc9f4020cf1f814178155d16e80dccaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50bee766bc9f4020cf1f814178155d16e80dccaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50bee766bc9f4020cf1f814178155d16e80dccaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50bee766bc9f4020cf1f814178155d16e80dccaa/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90b43856fdff7d96d93d22970eca8a86c56e0ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b43856fdff7d96d93d22970eca8a86c56e0ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b43856fdff7d96d93d22970eca8a86c56e0ddc"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "bd2af8b6679f81b603774dbdc76cbffeb97ffec9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bee766bc9f4020cf1f814178155d16e80dccaa/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bee766bc9f4020cf1f814178155d16e80dccaa/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=50bee766bc9f4020cf1f814178155d16e80dccaa", "patch": "@@ -5482,14 +5482,15 @@ check_default_tmpl_args (tree decl, tree parms, bool is_primary,\n \t\t       /* Don't complain about an enclosing partial\n \t\t\t  specialization.  */\n \t\t       && parm_level == parms\n-\t\t       && TREE_CODE (decl) == TYPE_DECL\n+\t\t       && (TREE_CODE (decl) == TYPE_DECL || VAR_P (decl))\n \t\t       && i < ntparms - 1\n \t\t       && template_parameter_pack_p (TREE_VALUE (parm))\n \t\t       /* A fixed parameter pack will be partially\n \t\t\t  instantiated into a fixed length list.  */\n \t\t       && !fixed_parameter_pack_p (TREE_VALUE (parm)))\n \t\t{\n-\t\t  /* A primary class template can only have one\n+\t\t  /* A primary class template, primary variable template\n+\t\t     (DR 2032), or alias template can only have one\n \t\t     parameter pack, at the end of the template\n \t\t     parameter list.  */\n "}, {"sha": "f36af39bc197dfeef225779605ea89f96defd1cd", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ67.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50bee766bc9f4020cf1f814178155d16e80dccaa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50bee766bc9f4020cf1f814178155d16e80dccaa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ67.C?ref=50bee766bc9f4020cf1f814178155d16e80dccaa", "patch": "@@ -0,0 +1,16 @@\n+// DR 2032 - Default template-arguments of variable templates\n+// PR c++/96218\n+// { dg-do compile { target c++14 } }\n+\n+// [temp.param]/14: If a template-parameter of a class template, variable\n+// template, or alias template has a default template-argument, each subsequent\n+// template-parameter shall either have a default template-argument supplied or\n+// be a template parameter pack.\n+template<typename T = int, typename U>\n+T vt; // { dg-error \"no default argument\" }\n+\n+// [temp.param]/14: If a template-parameter of a primary class template,\n+// primary variable template, or alias template is a template parameter pack,\n+// it shall be the last template-parameter.\n+template<typename... Ts, typename U> // { dg-error \"must be at the end\" }\n+int vt2;"}]}