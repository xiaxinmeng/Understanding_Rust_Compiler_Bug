{"sha": "c1e9f663099abd31015872fe845ef203781b33a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFlOWY2NjMwOTlhYmQzMTAxNTg3MmZlODQ1ZWYyMDM3ODFiMzNhMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-28T04:18:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-28T04:18:13Z"}, "message": "bb-reorder.c, [...]: Rename asynchronous_exceptions to flag_non_call_exceptions.\n\n        * bb-reorder.c, dwarf2out.c, except.c, except.h, flow.c,\n        jump.c, toplev.c:\n        Rename asynchronous_exceptions to flag_non_call_exceptions.\n\n        * java/decl.c (end_java_method): Rename asynchronous_exceptions to\n        flag_non_call_exceptions.\n\nFrom-SVN: r40902", "tree": {"sha": "2f6e5455f652d0634d9b03984d996e977ffda1cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f6e5455f652d0634d9b03984d996e977ffda1cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1e9f663099abd31015872fe845ef203781b33a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e9f663099abd31015872fe845ef203781b33a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1e9f663099abd31015872fe845ef203781b33a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e9f663099abd31015872fe845ef203781b33a3/comments", "author": null, "committer": null, "parents": [{"sha": "27f66c0bcbe5f793b652c2aab3ff87bcf01e82a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f66c0bcbe5f793b652c2aab3ff87bcf01e82a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f66c0bcbe5f793b652c2aab3ff87bcf01e82a6"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "bd68d3fcc31a0339e50e2af637637e728461a4fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1e9f663099abd31015872fe845ef203781b33a3", "patch": "@@ -1,3 +1,9 @@\n+2001-03-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* bb-reorder.c, dwarf2out.c, except.c, except.h, flow.c,\n+\tjump.c, toplev.c:\n+\tRename asynchronous_exceptions to flag_non_call_exceptions.\n+\n 2001-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* configure.in: Don't check for bcopy."}, {"sha": "93b2034963cf562c0156fc80aec055002d55944a", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=c1e9f663099abd31015872fe845ef203781b33a3", "patch": "@@ -396,7 +396,7 @@ make_reorder_chain_1 (bb, prev)\n \n       /* Find the normal taken edge and the normal fallthru edge.\n          Note that there may in fact be other edges due to\n-\t asynchronous_exceptions. \n+\t flag_non_call_exceptions. \n \n \t Note, conditional jumps with other side effects may not\n \t be fully optimized.  In this case it is possible for"}, {"sha": "67ac7e2afca25a6425b22d938adc36643a504432", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c1e9f663099abd31015872fe845ef203781b33a3", "patch": "@@ -951,7 +951,7 @@ dwarf2out_stack_adjust (insn)\n   long offset;\n   const char *label;\n \n-  if (! asynchronous_exceptions && GET_CODE (insn) == CALL_INSN)\n+  if (! flag_non_call_exceptions && GET_CODE (insn) == CALL_INSN)\n     {\n       /* Extract the size of the args from the CALL rtx itself.  */\n \n@@ -968,7 +968,7 @@ dwarf2out_stack_adjust (insn)\n \n   /* If only calls can throw, and we have a frame pointer,\n      save up adjustments until we see the CALL_INSN.  */\n-  else if (! asynchronous_exceptions\n+  else if (! flag_non_call_exceptions\n \t   && cfa.reg != STACK_POINTER_REGNUM)\n     return;\n "}, {"sha": "c432eaa801d08b9e146fad6a61185cdc249f9806", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=c1e9f663099abd31015872fe845ef203781b33a3", "patch": "@@ -416,7 +416,7 @@ int exceptions_via_longjmp = 2;\n \n /* One to enable asynchronous exception support.  */\n \n-int asynchronous_exceptions = 0;\n+int flag_non_call_exceptions = 0;\n \n /* One to protect cleanup actions with a handler that calls\n    __terminate, zero otherwise.  */\n@@ -2704,7 +2704,7 @@ can_throw (insn)\n \treturn 1;\n     }\n \n-  if (asynchronous_exceptions)\n+  if (flag_non_call_exceptions)\n     {\n       /* If we wanted asynchronous exceptions, then everything but NOTEs\n \t and CODE_LABELs could throw.  */"}, {"sha": "f4eda909f75959a472d6c676007c4375e7b0b5af", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=c1e9f663099abd31015872fe845ef203781b33a3", "patch": "@@ -478,7 +478,7 @@ extern int exceptions_via_longjmp;\n \n /* One to enable asynchronous exception support.  */\n \n-extern int asynchronous_exceptions;\n+extern int flag_non_call_exceptions;\n \n /* One to protect cleanup actions with a handler that calls\n    __terminate, zero otherwise.  */"}, {"sha": "bf5043a5e7b757f30ac51f3a66f0f0332a097fb6", "filename": "gcc/flow.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=c1e9f663099abd31015872fe845ef203781b33a3", "patch": "@@ -1324,7 +1324,7 @@ make_edges (label_value_list)\n \n \t Also mark the CALL_INSN as reaching any nonlocal goto handler.  */\n \n-      else if (code == CALL_INSN || asynchronous_exceptions)\n+      else if (code == CALL_INSN || flag_non_call_exceptions)\n \t{\n \t  /* Add any appropriate EH edges.  We do this unconditionally\n \t     since there may be a REG_EH_REGION or REG_EH_RETHROW note\n@@ -1333,7 +1333,7 @@ make_edges (label_value_list)\n \n \t  /* If we have asynchronous exceptions, do the same for *all*\n \t     exception regions active in the block.  */\n-\t  if (asynchronous_exceptions\n+\t  if (flag_non_call_exceptions\n \t      && bb->eh_beg != bb->eh_end)\n \t    {\n \t      if (bb->eh_beg >= 0)"}, {"sha": "17bd9d5a42a82b218b651982da98cd978dc84f67", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c1e9f663099abd31015872fe845ef203781b33a3", "patch": "@@ -1,3 +1,8 @@\n+2001-03-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* decl.c (end_java_method): Rename asynchronous_exceptions to\n+\tflag_non_call_exceptions.\n+\n 2001-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Make-lang.in: Depend on $(SYSTEM_H), not system.h."}, {"sha": "a5b423bfa05a1c057af16ff6a4c0b76673744f35", "filename": "gcc/java/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=c1e9f663099abd31015872fe845ef203781b33a3", "patch": "@@ -1827,7 +1827,7 @@ void\n end_java_method ()\n {\n   tree fndecl = current_function_decl;\n-  int flag_asynchronous_exceptions = asynchronous_exceptions;\n+  int flag_flag_non_call_exceptions = flag_non_call_exceptions;\n \n   expand_end_bindings (getdecls (), 1, 0);\n   /* pop out of function */\n@@ -1844,17 +1844,17 @@ end_java_method ()\n   expand_function_end (input_filename, lineno, 0);\n \n   /* FIXME: If the current method contains any exception handlers,\n-     force asynchronous_exceptions: this is necessary because signal\n+     force flag_non_call_exceptions: this is necessary because signal\n      handlers in libjava may throw exceptions.  This is far from being\n      a perfect solution, but it's better than doing nothing at all.*/\n   if (catch_clauses)\n-    asynchronous_exceptions = 1;\n+    flag_non_call_exceptions = 1;\n \n   /* Run the optimizers and output assembler code for this function. */\n   rest_of_compilation (fndecl);\n \n   current_function_decl = NULL_TREE;\n-  asynchronous_exceptions = flag_asynchronous_exceptions;\n+  flag_non_call_exceptions = flag_flag_non_call_exceptions;\n }\n \n /* Mark language-specific parts of T for garbage-collection.  */"}, {"sha": "958f85824000b98ed7921208ad3aceb9539bce8d", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=c1e9f663099abd31015872fe845ef203781b33a3", "patch": "@@ -1447,7 +1447,7 @@ find_cross_jump (e1, e2, minimum, f1, f2)\n       /* Avoid moving insns across EH regions if either of the insns\n \t can throw.  */\n       if (flag_exceptions\n-\t  && (asynchronous_exceptions || GET_CODE (i1) == CALL_INSN)\n+\t  && (flag_non_call_exceptions || GET_CODE (i1) == CALL_INSN)\n \t  && !in_same_eh_region (i1, i2))\n \tbreak;\n "}, {"sha": "1263e216bbf5cf4e599bbbbbf3893443328b4b4f", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1e9f663099abd31015872fe845ef203781b33a3/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c1e9f663099abd31015872fe845ef203781b33a3", "patch": "@@ -1083,8 +1083,8 @@ lang_independent_options f_options[] =\n     \"Just generate unwind tables for exception handling\" },\n   {\"sjlj-exceptions\", &exceptions_via_longjmp, 1,\n    \"Use setjmp/longjmp to handle exceptions\" },\n-  {\"asynchronous-exceptions\", &asynchronous_exceptions, 1,\n-   \"Support asynchronous exceptions\" },\n+  {\"non-call-exceptions\", &flag_non_call_exceptions, 1,\n+   \"Support synchronous non-call exceptions\" },\n   {\"profile-arcs\", &profile_arc_flag, 1,\n    \"Insert arc based program profiling code\" },\n   {\"test-coverage\", &flag_test_coverage, 1,"}]}