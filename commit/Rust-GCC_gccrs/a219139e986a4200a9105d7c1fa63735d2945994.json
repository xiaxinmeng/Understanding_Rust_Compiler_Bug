{"sha": "a219139e986a4200a9105d7c1fa63735d2945994", "node_id": "C_kwDOANBUbNoAKGEyMTkxMzllOTg2YTQyMDBhOTEwNWQ3YzFmYTYzNzM1ZDI5NDU5OTQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-08T20:58:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-09T22:59:48Z"}, "message": "libstdc++: Implement std::ios_base::noreplace for C++23 [PR59769]\n\nThis implements my P2467R0 proposal to support opening an fstream in\nexclusive mode. The new constant is also supported pre-C++23 as\nstd::ios_base::__noreplace.\n\nThis proposal hasn't been approved for C++23 yet, but I am confident it\nwill be, as this is restoring a feture found in pre-ISO C++ iostreams\nimplementations (and still present in the MSVC library as _Noreplace).\nIf the proposal fails for C++23 we can remove the ios::noreplace\nname and just keep ios::__noreplace as an extension.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/59769\n\t* config/io/basic_file_stdio.cc (fopen_mode): Add support for\n\texclusive mode.\n\t* include/bits/ios_base.h (_S_noreplace): Define new enumerator.\n\t(ios_base::__noreplace): Define.\n\t(ios_base::noreplace): Define for C++23.\n\t* include/std/version (__cpp_lib_ios_noreplace): Define.\n\t* testsuite/27_io/basic_ofstream/open/char/noreplace.cc: New test.\n\t* testsuite/27_io/basic_ofstream/open/wchar_t/noreplace.cc: New test.", "tree": {"sha": "1bfb9d1319b884d30ee81a8547539dbcad43db76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bfb9d1319b884d30ee81a8547539dbcad43db76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a219139e986a4200a9105d7c1fa63735d2945994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a219139e986a4200a9105d7c1fa63735d2945994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a219139e986a4200a9105d7c1fa63735d2945994", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a219139e986a4200a9105d7c1fa63735d2945994/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e18a25331fa25c3907249fede65a02c6817b06e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e18a25331fa25c3907249fede65a02c6817b06e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e18a25331fa25c3907249fede65a02c6817b06e"}], "stats": {"total": 116, "additions": 95, "deletions": 21}, "files": [{"sha": "06ee016d016f6b5b8d05c036a6a624ddad2b5f2c", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a219139e986a4200a9105d7c1fa63735d2945994/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a219139e986a4200a9105d7c1fa63735d2945994/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=a219139e986a4200a9105d7c1fa63735d2945994", "patch": "@@ -78,32 +78,38 @@ namespace\n \tout    = std::ios_base::out,\n \ttrunc  = std::ios_base::trunc,\n \tapp    = std::ios_base::app,\n-\tbinary = std::ios_base::binary\n+\tbinary = std::ios_base::binary,\n+\tnoreplace = std::_S_noreplace\n       };\n \n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // 596. 27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes.\n-    switch (mode & (in|out|trunc|app|binary))\n+    switch (mode & (in|out|trunc|app|binary|noreplace))\n       {\n-      case (   out                 ): return \"w\";\n-      case (   out      |app       ): return \"a\";\n-      case (             app       ): return \"a\";\n-      case (   out|trunc           ): return \"w\";\n-      case (in                     ): return \"r\";\n-      case (in|out                 ): return \"r+\";\n-      case (in|out|trunc           ): return \"w+\";\n-      case (in|out      |app       ): return \"a+\";\n-      case (in          |app       ): return \"a+\";\n-\n-      case (   out          |binary): return \"wb\";\n-      case (   out      |app|binary): return \"ab\";\n-      case (             app|binary): return \"ab\";\n-      case (   out|trunc    |binary): return \"wb\";\n-      case (in              |binary): return \"rb\";\n-      case (in|out          |binary): return \"r+b\";\n-      case (in|out|trunc    |binary): return \"w+b\";\n-      case (in|out      |app|binary): return \"a+b\";\n-      case (in          |app|binary): return \"a+b\";\n+      case (   out                           ): return \"w\";\n+      case (   out                 |noreplace): return \"wx\";\n+      case (   out|trunc                     ): return \"w\";\n+      case (   out|trunc           |noreplace): return \"wx\";\n+      case (   out      |app                 ): return \"a\";\n+      case (             app                 ): return \"a\";\n+      case (in                               ): return \"r\";\n+      case (in|out                           ): return \"r+\";\n+      case (in|out|trunc                     ): return \"w+\";\n+      case (in|out|trunc           |noreplace): return \"w+x\";\n+      case (in|out      |app                 ): return \"a+\";\n+      case (in          |app                 ): return \"a+\";\n+\n+      case (   out          |binary          ): return \"wb\";\n+      case (   out          |binary|noreplace): return \"wbx\";\n+      case (   out      |app|binary          ): return \"ab\";\n+      case (             app|binary          ): return \"ab\";\n+      case (   out|trunc    |binary          ): return \"wb\";\n+      case (in              |binary          ): return \"rb\";\n+      case (in|out          |binary          ): return \"r+b\";\n+      case (in|out|trunc    |binary          ): return \"w+b\";\n+      case (in|out|trunc    |binary|noreplace): return \"w+bx\";\n+      case (in|out      |app|binary          ): return \"a+b\";\n+      case (in          |app|binary          ): return \"a+b\";\n \n       default: return 0; // invalid\n       }"}, {"sha": "5db05524e1c089b9e10d60ff216dad962c3c44f0", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a219139e986a4200a9105d7c1fa63735d2945994/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a219139e986a4200a9105d7c1fa63735d2945994/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=a219139e986a4200a9105d7c1fa63735d2945994", "patch": "@@ -116,6 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_in \t\t= 1L << 3,\n       _S_out \t\t= 1L << 4,\n       _S_trunc \t\t= 1L << 5,\n+      _S_noreplace \t= 1L << 6,\n       _S_ios_openmode_end = 1L << 16,\n       _S_ios_openmode_max = __INT_MAX__,\n       _S_ios_openmode_min = ~__INT_MAX__\n@@ -466,6 +467,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /// Truncate an existing stream when opening.  Default for @c ofstream.\n     static const openmode trunc =\t_S_trunc;\n \n+    static const openmode __noreplace =\t_S_noreplace;\n+\n+#if __cplusplus >= 202100L\n+#define __cpp_lib_ios_noreplace 202200L\n+    /// Open a file in exclusive mode.\n+    static const openmode noreplace =\t_S_noreplace;\n+#endif\n+\n     // 27.4.2.1.5  Type ios_base::seekdir\n     /**\n      *  @brief This is an enumerated type."}, {"sha": "23890037b6b52973226ea36d8b0f0674a66c4cf0", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a219139e986a4200a9105d7c1fa63735d2945994/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a219139e986a4200a9105d7c1fa63735d2945994/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=a219139e986a4200a9105d7c1fa63735d2945994", "patch": "@@ -296,6 +296,7 @@\n #define __cpp_lib_adaptor_iterator_pair_constructor 202106L\n #define __cpp_lib_byteswap 202110L\n #define __cpp_lib_invoke_r 202106L\n+#define __cpp_lib_ios_noreplace 202200L\n #define __cpp_lib_is_scoped_enum 202011L\n #if __cpp_lib_concepts\n # define __cpp_lib_monadic_optional 202110L"}, {"sha": "e39f5928a1fdc4ae9b638d12964fd3bca705f8c5", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/open/char/noreplace.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a219139e986a4200a9105d7c1fa63735d2945994/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2Fnoreplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a219139e986a4200a9105d7c1fa63735d2945994/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2Fnoreplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fchar%2Fnoreplace.cc?ref=a219139e986a4200a9105d7c1fa63735d2945994", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do run }\n+\n+#include <ios>\n+\n+#if __cplusplus >= 202200L\n+#ifndef __cpp_lib_ios_noreplace\n+# error \"Feature-test macro for ios::noreplace missing in <ios>\"\n+#elif __cpp_lib_ios_noreplace < 202200L\n+# error \"Feature-test macro for ios::noreplace has wrong value in <ios>\"\n+#endif\n+#endif\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+#if __cpp_lib_ios_noreplace\n+  std::ios::openmode noreplace = std::ios::noreplace;\n+#else\n+  std::ios::openmode noreplace = std::ios::__noreplace;\n+#endif\n+\n+  std::ofstream of(\"noreplace\");\n+  VERIFY( of.is_open() );\n+  of.close();\n+  of.open(\"noreplace\", noreplace);\n+  VERIFY( ! of.is_open() );\n+}"}, {"sha": "77f11865ac4c94b53d59a68fbce9174fc055aa81", "filename": "libstdc++-v3/testsuite/27_io/basic_ofstream/open/wchar_t/noreplace.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a219139e986a4200a9105d7c1fa63735d2945994/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fwchar_t%2Fnoreplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a219139e986a4200a9105d7c1fa63735d2945994/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fwchar_t%2Fnoreplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ofstream%2Fopen%2Fwchar_t%2Fnoreplace.cc?ref=a219139e986a4200a9105d7c1fa63735d2945994", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do run }\n+\n+#include <version>\n+\n+#if __cplusplus >= 202200L\n+#ifndef __cpp_lib_ios_noreplace\n+# error \"Feature-test macro for ios::noreplace missing in <version>\"\n+#elif __cpp_lib_ios_noreplace < 202200L\n+# error \"Feature-test macro for ios::noreplace has wrong value in <version>\"\n+#endif\n+#endif\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+#if __cpp_lib_ios_noreplace\n+  std::wios::openmode noreplace = std::wios::noreplace;\n+#else\n+  std::wios::openmode noreplace = std::wios::__noreplace;\n+#endif\n+\n+  std::wofstream of(\"noreplace\");\n+  VERIFY( of.is_open() );\n+  of.close();\n+  of.open(\"noreplace\", noreplace);\n+  VERIFY( ! of.is_open() );\n+}"}]}