{"sha": "06ed4795b4b6941ef389a747a517310e6d161a60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZlZDQ3OTViNGI2OTQxZWYzODlhNzQ3YTUxNzMxMGU2ZDE2MWE2MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-04T07:44:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-04T07:44:33Z"}, "message": "* config/pdp11/pdp11.h (target_flags, TARGET_SWITCHES, TARGET_DEFAULT)\n\t(TARGET_FPU, TARGET_SOFT_FLOAT, TARGET_AC0, TARGET_NO_AC0, TARGET_45)\n\t(TARGET_BCOPY_BUILTIN, TARGET_INT16, TARGET_INT32, TARGET_FLOAT32)\n\t(TARGET_FLOAT64, TARGET_ABSHI_BUILTIN, TARGET_BRANCH_EXPENSIVE)\n\t(TARGET_BRANCH_CHEAP, TARGET_SPLIT, TARGET_NOSPLIT)\n\t(TARGET_UNIX_ASM): Delete.\n\t(TARGET_40_PLUS): Redefine in terms of TARGET_40 and TARGET_45.\n\t* config/pdp11/2bsd.h (TARGET_UNIX_ASM_DEFAULT): Use MASK_UNIX_ASM.\n\t* config/pdp11/pdp11.c (pdp11_handle_option): New function.\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n\t* config/pdp11/pdp11.opt: New file.\n\nFrom-SVN: r97525", "tree": {"sha": "75ecd626acd03323c27d662f064484348860982c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75ecd626acd03323c27d662f064484348860982c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06ed4795b4b6941ef389a747a517310e6d161a60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ed4795b4b6941ef389a747a517310e6d161a60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ed4795b4b6941ef389a747a517310e6d161a60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ed4795b4b6941ef389a747a517310e6d161a60/comments", "author": null, "committer": null, "parents": [{"sha": "283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283da5df2d76ce3909d70ea9dd6b77143eb7c04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283da5df2d76ce3909d70ea9dd6b77143eb7c04a"}], "stats": {"total": 216, "additions": 132, "deletions": 84}, "files": [{"sha": "4f7d6777955d7a7b7ede527e6a774e9113215653", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ed4795b4b6941ef389a747a517310e6d161a60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ed4795b4b6941ef389a747a517310e6d161a60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06ed4795b4b6941ef389a747a517310e6d161a60", "patch": "@@ -1,3 +1,17 @@\n+2005-04-04  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/pdp11/pdp11.h (target_flags, TARGET_SWITCHES, TARGET_DEFAULT)\n+\t(TARGET_FPU, TARGET_SOFT_FLOAT, TARGET_AC0, TARGET_NO_AC0, TARGET_45)\n+\t(TARGET_BCOPY_BUILTIN, TARGET_INT16, TARGET_INT32, TARGET_FLOAT32)\n+\t(TARGET_FLOAT64, TARGET_ABSHI_BUILTIN, TARGET_BRANCH_EXPENSIVE)\n+\t(TARGET_BRANCH_CHEAP, TARGET_SPLIT, TARGET_NOSPLIT)\n+\t(TARGET_UNIX_ASM): Delete.\n+\t(TARGET_40_PLUS): Redefine in terms of TARGET_40 and TARGET_45.\n+\t* config/pdp11/2bsd.h (TARGET_UNIX_ASM_DEFAULT): Use MASK_UNIX_ASM.\n+\t* config/pdp11/pdp11.c (pdp11_handle_option): New function.\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n+\t* config/pdp11/pdp11.opt: New file.\n+\n 2005-04-03  Roger Sayle  <roger@eyesopen.com>\n \t    Alexandre Oliva  <aoliva@redhat.com>\n "}, {"sha": "4952d9488fd43a6993fbf9eb233ca24969d8fa19", "filename": "gcc/config/pdp11/2bsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ed4795b4b6941ef389a747a517310e6d161a60/gcc%2Fconfig%2Fpdp11%2F2bsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ed4795b4b6941ef389a747a517310e6d161a60/gcc%2Fconfig%2Fpdp11%2F2bsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2F2bsd.h?ref=06ed4795b4b6941ef389a747a517310e6d161a60", "patch": "@@ -63,4 +63,4 @@ fprintf (STREAM, \"~~%s:\\n\", NAME); \t\t\t\\\n } while (0)\n \n #undef TARGET_UNIX_ASM_DEFAULT\n-#define TARGET_UNIX_ASM_DEFAULT 2048\n+#define TARGET_UNIX_ASM_DEFAULT MASK_UNIX_ASM"}, {"sha": "9f37d58991227fe7a16ead3c31e9fa9bfab8b24e", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ed4795b4b6941ef389a747a517310e6d161a60/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ed4795b4b6941ef389a747a517310e6d161a60/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=06ed4795b4b6941ef389a747a517310e6d161a60", "patch": "@@ -138,6 +138,7 @@ decode_pdp11_d (const struct real_format *fmt ATTRIBUTE_UNUSED,\n /* This is where the condition code register lives.  */\n /* rtx cc0_reg_rtx; - no longer needed? */\n \n+static bool pdp11_handle_option (size_t, const char *, int);\n static rtx find_addr_reg (rtx); \n static const char *singlemove_string (rtx *);\n static bool pdp11_assemble_integer (rtx, unsigned int, int);\n@@ -166,6 +167,12 @@ static bool pdp11_return_in_memory (tree, tree);\n #undef TARGET_ASM_CLOSE_PAREN\n #define TARGET_ASM_CLOSE_PAREN \"]\"\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS \\\n+  (MASK_FPU | MASK_45 | MASK_ABSHI_BUILTIN | TARGET_UNIX_ASM_DEFAULT)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION pdp11_handle_option\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS pdp11_rtx_costs\n \n@@ -174,6 +181,23 @@ static bool pdp11_return_in_memory (tree, tree);\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+pdp11_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED,\n+\t\t     int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    case OPT_m10:\n+      target_flags &= ~(MASK_40 | MASK_45);\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n /* Nonzero if OP is a valid second operand for an arithmetic insn.  */\n \n int"}, {"sha": "216ede6883562c2fcc24a41381fdad13ef10cce0", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 83, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ed4795b4b6941ef389a747a517310e6d161a60/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ed4795b4b6941ef389a747a517310e6d161a60/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=06ed4795b4b6941ef389a747a517310e6d161a60", "patch": "@@ -45,91 +45,9 @@ Boston, MA 02111-1307, USA.  */\n \n /* #define DBX_DEBUGGING_INFO */\n \n-/* Run-time compilation parameters selecting different hardware subsets.\n-*/\n-\n-extern int target_flags;\n-\n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of triplets in braces,\n-   each triplet being { \"NAME\", VALUE, DOC }\n-   where VALUE is the bits to set or minus the bits to clear and DOC\n-   is the documentation for --help (NULL if intentionally undocumented).\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n-#define TARGET_SWITCHES  \\\n-{   { \"fpu\", 1, N_(\"Use hardware floating point\") },\t\t\t\\\n-    { \"soft-float\", -1, N_(\"Do not use hardware floating point\") },\t\\\n-/* return float result in ac0 */\t\t\t\t\t\\\n-    { \"ac0\", 2, N_(\"Return floating point results in ac0\") },\t\t\\\n-    { \"no-ac0\", -2, N_(\"Return floating point results in memory\") },\t\\\n-/* is 11/40 */\t\t\t\t\t\t\t\t\\\n-    { \"40\", 4, N_(\"Generate code for an 11/40\") },\t\t\t\\\n-    { \"no-40\", -4, \"\" },\t\t\t\t\t\t\\\n-/* is 11/45 */\t\t\t\t\t\t\t\t\\\n-    { \"45\", 8, N_(\"Generate code for an 11/45\") },\t\t\t\\\n-    { \"no-45\", -8, \"\" },\t\t\t\t\t\t\\\n-/* is 11/10 */\t\t\t\t\t\t\t\t\\\n-    { \"10\", -12, N_(\"Generate code for an 11/10\") },\t\t\t\\\n-/* use movmemhi for bcopy */\t\t\t\t\t\t\\\n-    { \"bcopy\", 16, NULL },\t\t\t\t\t\t\\\n-    { \"bcopy-builtin\", -16, NULL },\t\t\t\t\t\\\n-/* use 32 bit for int */\t\t\t\t\t\t\\\n-    { \"int32\", 32, N_(\"Use 32 bit int\") },\t\t\t\t\\\n-    { \"no-int16\", 32, N_(\"Use 32 bit int\") },\t\t\t\t\\\n-    { \"int16\", -32, N_(\"Use 16 bit int\") },\t\t\t\t\\\n-    { \"no-int32\", -32, N_(\"Use 16 bit int\") },\t\t\t\t\\\n-/* use 32 bit for float */\t\t\t\t\t\t\\\n-    { \"float32\", 64, N_(\"Use 32 bit float\") },\t\t\t\t\\\n-    { \"no-float64\", 64, N_(\"Use 32 bit float\") },\t\t\t\\\n-    { \"float64\", -64, N_(\"Use 64 bit float\") },\t\t\t\t\\\n-    { \"no-float32\", -64, N_(\"Use 64 bit float\") },\t\t\t\\\n-/* allow abshi pattern? - can trigger \"optimizations\" which make code SLOW! */\\\n-    { \"abshi\", 128, NULL },\t\t\t\t\t\t\\\n-    { \"no-abshi\", -128, NULL },\t\t\t\t\t\t\\\n-/* is branching expensive - on a PDP, it's actually really cheap */ \\\n-/* this is just to play around and check what code gcc generates */ \\\n-    { \"branch-expensive\", 256, NULL }, \t\t\t\t\t\\\n-    { \"branch-cheap\", -256, NULL },\t\t\t\t\t\\\n-/* split instruction and data memory? */ \t\t\t\t\\\n-    { \"split\", 1024, N_(\"Target has split I&D\") },\t\t\t\\\n-    { \"no-split\", -1024, N_(\"Target does not have split I&D\") },\t\\\n-/* UNIX assembler syntax?  */\t\t\t\t\t\t\\\n-    { \"unix-asm\", 2048, N_(\"Use UNIX assembler syntax\") },\t\t\\\n-    { \"dec-asm\", -2048, N_(\"Use DEC assembler syntax\") },\t\t\\\n-/* default */\t\t\t\\\n-    { \"\", TARGET_DEFAULT, NULL}\t\\\n-}\n-\n-#define TARGET_DEFAULT (1 | 8 | 128 | TARGET_UNIX_ASM_DEFAULT)\n-\n-#define TARGET_FPU \t\t(target_flags & 1)\n-#define TARGET_SOFT_FLOAT \t(!TARGET_FPU)\n-\n-#define TARGET_AC0\t\t((target_flags & 2) && TARGET_FPU)\n-#define TARGET_NO_AC0\t\t(! TARGET_AC0)\n-\n-#define TARGET_45\t\t(target_flags & 8)\n-#define TARGET_40_PLUS\t\t((target_flags & 4) || (target_flags & 8))\n+#define TARGET_40_PLUS\t\t(TARGET_40 || TARGET_45)\n #define TARGET_10\t\t(! TARGET_40_PLUS)\n \n-#define TARGET_BCOPY_BUILTIN\t(! (target_flags & 16))\n-\n-#define TARGET_INT16\t\t(! TARGET_INT32)\n-#define TARGET_INT32\t\t(target_flags & 32)\n-\n-#define TARGET_FLOAT32\t\t(target_flags & 64)\n-#define TARGET_FLOAT64\t\t(! TARGET_FLOAT32)\n-\n-#define TARGET_ABSHI_BUILTIN\t(target_flags & 128)\n-\n-#define TARGET_BRANCH_EXPENSIVE\t(target_flags & 256)\n-#define TARGET_BRANCH_CHEAP \t(!TARGET_BRANCH_EXPENSIVE)\n-\n-#define TARGET_SPLIT\t\t(target_flags & 1024)\n-#define TARGET_NOSPLIT\t\t(! TARGET_SPLIT)\n-\n-#define TARGET_UNIX_ASM\t\t(target_flags & 2048)\n #define TARGET_UNIX_ASM_DEFAULT\t0\n \n #define ASSEMBLER_DIALECT\t(TARGET_UNIX_ASM ? 1 : 0)"}, {"sha": "9211098a4028736aa08cd692e8b34165ae5be9f3", "filename": "gcc/config/pdp11/pdp11.opt", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ed4795b4b6941ef389a747a517310e6d161a60/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ed4795b4b6941ef389a747a517310e6d161a60/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.opt?ref=06ed4795b4b6941ef389a747a517310e6d161a60", "patch": "@@ -0,0 +1,92 @@\n+; Options for the PDP11 port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+m10\n+Target RejectNegative\n+Generate code for an 11/10\n+\n+m40\n+Target Report Mask(40)\n+Generate code for an 11/40\n+\n+m45\n+Target Report Mask(45)\n+Generate code for an 11/45\n+\n+mabshi\n+Target Report Mask(ABSHI_BUILTIN)\n+Use 16-bit abs patterns\n+\n+mac0\n+Target Report Mask(AC0)\n+Return floating-point results in ac0 (fr0 in Unix assembler syntax)\n+\n+mbcopy\n+Target RejectNegative Report Mask(BCOPY)\n+Do not use inline patterns for copying memory\n+\n+mbcopy-builtin\n+Target RejectNegative Report InverseMask(BCOPY, BCOPY_BUILTIN)\n+Use inline patterns for copying memory\n+\n+mbranch-cheap\n+Target RejectNegative Report InverseMask(BRANCH_EXPENSIVE, BRANCH_CHEAP)\n+Do not pretend that branches are expensive\n+\n+mbranch-expensive\n+Target RejectNegative Report Mask(BRANCH_EXPENSIVE)\n+Pretend that branches are expensive\n+\n+mdec-asm\n+Target RejectNegative Report InverseMask(UNIX_ASM)\n+Use the DEC assembler syntax\n+\n+mfloat32\n+Target Report Mask(FLOAT32)\n+Use 32 bit float\n+\n+mfloat64\n+Target Report InverseMask(FLOAT32, FLOAT64)\n+Use 64 bit float\n+\n+mfpu\n+Target RejectNegative Report Mask(FPU)\n+Use hardware floating point\n+\n+mint16\n+Target Report InverseMask(INT32, INT16)\n+Use 16 bit int\n+\n+mint32\n+Target Report Mask(INT32)\n+Use 32 bit int\n+\n+msoft-float\n+Target RejectNegative Report InverseMask(FPU, SOFT_FLOAT)\n+Do not use hardware floating point\n+\n+msplit\n+Target Report Mask(SPLIT)\n+Target has split I&D\n+\n+munix-asm\n+Target RejectNegative Report Mask(UNIX_ASM)\n+Use UNIX assembler syntax"}]}