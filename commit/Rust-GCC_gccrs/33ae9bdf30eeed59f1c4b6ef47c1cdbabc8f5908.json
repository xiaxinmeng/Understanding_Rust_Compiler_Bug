{"sha": "33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNhZTliZGYzMGVlZWQ1OWYxYzRiNmVmNDdjMWNkYmFiYzhmNTkwOA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-02-17T04:19:34Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-02-17T04:19:34Z"}, "message": "Makefile.in (PARSE_C, [...]): Move dependencies on lex.c, lex.h, and PARSE_H to...\n\n\t* Makefile.in (PARSE_C, PARSE_SCAN_C): Move dependencies on\n\tlex.c, lex.h, and PARSE_H to...\n\t(parse.o, parse-scan.o): ...here, respectively.\n\n\t* lex.c: Split out code that may trigger SIGFPE from yylex()\n\tto its own function.\n\t* lex.h (JAVA_FLOAT_RANGE_ERROR): Don't set value.\n\nFrom-SVN: r32025", "tree": {"sha": "de72c2c117e9bee1396bd1c7459447c78d5141c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de72c2c117e9bee1396bd1c7459447c78d5141c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908/comments", "author": null, "committer": null, "parents": [{"sha": "b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ba4d8dfa5e7fcb14a920bc26c83e6768e6e05d"}], "stats": {"total": 99, "additions": 67, "deletions": 32}, "files": [{"sha": "7047b9d006819313883b59a7d746bd506e3a8eb0", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908", "patch": "@@ -1,3 +1,13 @@\n+2000-02-16  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* Makefile.in (PARSE_C, PARSE_SCAN_C): Move dependencies on\n+\tlex.c, lex.h, and PARSE_H to...                            \n+\t(parse.o, parse-scan.o): ...here, respectively.\n+\n+\t* lex.c: Split out code that may trigger SIGFPE from yylex()\n+\tto its own function.\n+\t* lex.h (JAVA_FLOAT_RANGE_ERROR): Don't set value.\n+\n 2000-02-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Make-lang.in (jvspec.o): Depend on $(GCC_H), not gcc.h."}, {"sha": "633a13f11fbb6a312cf4ba9001058b662e9f3d97", "filename": "gcc/java/Makefile.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908/gcc%2Fjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908/gcc%2Fjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMakefile.in?ref=33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908", "patch": "@@ -217,12 +217,11 @@ PARSE_C = $(PARSE_DIR)/parse.c\n PARSE_SCAN_C = $(PARSE_DIR)/parse-scan.c\n PARSE_H = $(srcdir)/parse.h\n \n-$(PARSE_C):  $(srcdir)/parse.y $(srcdir)/lex.c $(PARSE_H) $(srcdir)/lex.h\n+$(PARSE_C):  $(srcdir)/parse.y\n \t$(SET_BISON); \\\n \tcd $(PARSE_DIR) && $$bison -t $(BISONFLAGS) $(JAVABISONFLAGS) \\\n \t    -o parse.c $(PARSE_RELDIR)/parse.y\n-$(PARSE_SCAN_C):  $(srcdir)/parse-scan.y $(srcdir)/lex.c $(PARSE_H) \\\n-\t  $(srcdir)/lex.h\n+$(PARSE_SCAN_C):  $(srcdir)/parse-scan.y\n \t$(SET_BISON); \\\n \tcd $(PARSE_DIR) && $$bison -t $(BISONFLAGS) -o parse-scan.c \\\n \t    $(PARSE_RELDIR)/parse-scan.y\n@@ -262,7 +261,8 @@ clean:  mostlyclean\n force:\n \n parse.o : $(PARSE_C) jcf-reader.c $(CONFIG_H) $(srcdir)/../system.h \\\n-  $(srcdir)/../function.h $(JAVA_TREE_H)\n+  $(srcdir)/../function.h $(JAVA_TREE_H) $(srcdir)/lex.c $(PARSE_H) \\\n+  $(srcdir)/lex.h\n jcf-dump.o : $(CONFIG_H) $(srcdir)/../system.h $(JAVA_TREE_H) jcf-dump.c \\\n   jcf-reader.c jcf.h javaop.h javaop.def $(srcdir)/../version.h\n gjavah.o : $(CONFIG_H) $(srcdir)/../system.h $(JAVA_TREE_H) gjavah.c \\\n@@ -300,7 +300,8 @@ lang.o : lang.c $(CONFIG_H) $(JAVA_TREE_H) jcf.h $(srcdir)/../input.h \\\n   $(srcdir)/../toplev.h $(srcdir)/../system.h $(RTL_H) $(EXPR_H)\n mangle.o : mangle.c $(CONFIG_H) jcf.h $(JAVA_TREE_H) $(srcdir)/../system.h \\\n   $(srcdir)/../toplev.h\n-parse-scan.o : $(CONFIG_H) $(srcdir)/../system.h $(srcdir)/../toplev.h\n+parse-scan.o : $(CONFIG_H) $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n+  $(srcdir)/lex.c $(PARSE_H) $(srcdir)/lex.h\n typeck.o : typeck.c $(CONFIG_H) $(JAVA_TREE_H) jcf.h convert.h \\\n   $(srcdir)/../toplev.h $(srcdir)/../system.h\n verify.o : verify.c $(CONFIG_H) $(JAVA_TREE_H) jcf.h javaop.h java-opcodes.h \\"}, {"sha": "58df299f1a5f007add2d5c6eb439221214782916", "filename": "gcc/java/lex.c", "status": "modified", "additions": 51, "deletions": 26, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908", "patch": "@@ -517,6 +517,44 @@ java_parse_escape_sequence ()\n     }\n }\n \n+/* Isolate the code which may raise an arithmetic exception in its\n+   own function.  */\n+\n+#ifndef JC1_LITE\n+struct jpa_args\n+{\n+  YYSTYPE *java_lval;\n+  char *literal_token;\n+  int fflag;\n+  int number_beginning;\n+};\n+\n+static void java_perform_atof\tPARAMS ((PTR));\n+\n+static void\n+java_perform_atof (av)\n+     PTR av;\n+{\n+  struct jpa_args *a = (struct jpa_args *)av;\n+  YYSTYPE *java_lval = a->java_lval;\n+  int number_beginning = a->number_beginning;\n+  REAL_VALUE_TYPE value;\n+  tree type = (a->fflag ? FLOAT_TYPE_NODE : DOUBLE_TYPE_NODE);\n+\n+  SET_REAL_VALUE_ATOF (value,\n+\t\t       REAL_VALUE_ATOF (a->literal_token, TYPE_MODE (type)));\n+\n+  if (REAL_VALUE_ISINF (value)\n+      || REAL_VALUE_ISNAN (value))\n+    {\n+      JAVA_FLOAT_RANGE_ERROR ((a->fflag ? \"float\" : \"double\"));\n+      value = DCONST0;\n+    }\n+\n+  SET_LVAL_NODE_TYPE (build_real (type, value), type);\n+}\n+#endif\n+\n static int yylex\t\tPARAMS ((YYSTYPE *));\n \n static int\n@@ -762,12 +800,9 @@ java_lex (java_lval)\n \t\t}\n \t      else\n \t\t{\n-\t\t  jmp_buf handler;\n-\t\t  REAL_VALUE_TYPE value;\n #ifndef JC1_LITE\n-\t\t  tree type = (fflag ? FLOAT_TYPE_NODE : DOUBLE_TYPE_NODE);\n+\t\t  struct jpa_args a;\n #endif\n-\n \t\t  if (stage != 4) /* Don't push back fF/dD */\n \t\t    java_unget_unicode ();\n \t\t  \n@@ -778,28 +813,18 @@ java_lex (java_lval)\n \t\t  literal_token [literal_index] = '\\0';\n \t\t  JAVA_LEX_LIT (literal_token, radix);\n \n-\t\t  if (setjmp (handler))\n-\t\t    {\n-\t\t      JAVA_FLOAT_RANGE_ERROR ((fflag ? \"float\" : \"double\"));\n-\t\t      value = DCONST0;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      SET_FLOAT_HANDLER (handler);\n-\t\t      SET_REAL_VALUE_ATOF \n-\t\t        (value, REAL_VALUE_ATOF (literal_token, \n-\t\t\t\t\t\t TYPE_MODE (type)));\n-\n-\t\t      if (REAL_VALUE_ISINF (value))\n-\t\t\tJAVA_FLOAT_RANGE_ERROR ((fflag ? \"float\" : \"double\"));\n-\n-\t\t      if (REAL_VALUE_ISNAN (value))\n-\t\t\tJAVA_FLOAT_RANGE_ERROR ((fflag ? \"float\" : \"double\"));\n-\n-\t\t      SET_LVAL_NODE_TYPE (build_real (type, value), type);\n-\t\t      SET_FLOAT_HANDLER (NULL_PTR);\n-\t\t      return FP_LIT_TK;\n-\t\t    }\n+#ifndef JC1_LITE\n+\t\t  a.literal_token = literal_token;\n+\t\t  a.fflag = fflag;\n+\t\t  a.java_lval = java_lval;\n+\t\t  a.number_beginning = number_beginning;\n+\t\t  if (do_float_handler (java_perform_atof, (PTR) &a))\n+\t\t    return FP_LIT_TK;\n+\n+\t\t  JAVA_FLOAT_RANGE_ERROR ((fflag ? \"float\" : \"double\"));\n+#else\n+\t\t  return FP_LIT_TK;\n+#endif\n \t\t}\n \t    }\n \t} /* JAVA_ASCCI_FPCHAR (c) */"}, {"sha": "d4754aba67ff62dd1685e08954cde73b50094624", "filename": "gcc/java/lex.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908/gcc%2Fjava%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908/gcc%2Fjava%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.h?ref=33ae9bdf30eeed59f1c4b6ef47c1cdbabc8f5908", "patch": "@@ -180,7 +180,6 @@ extern void set_float_handler PARAMS ((jmp_buf));\n     sprintf (msg, \"Floating pointer literal exceeds range of `%s'\", (m)); \\\n     java_lex_error (msg, 0);\t\t\t\t\t\t  \\\n     ctxp->c_line->current = i;\t\t\t\t\t\t  \\\n-    value = dconst0;\t\t\t\t\t\t\t  \\\n   }\n #define JAVA_INTEGRAL_RANGE_ERROR(m)\t\t\\\n   {\t\t\t\t\t\t\\"}]}