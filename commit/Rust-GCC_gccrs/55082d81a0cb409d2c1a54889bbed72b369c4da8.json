{"sha": "55082d81a0cb409d2c1a54889bbed72b369c4da8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUwODJkODFhMGNiNDA5ZDJjMWE1NDg4OWJiZWQ3MmIzNjljNGRhOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-08-21T15:49:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-08-21T15:49:58Z"}, "message": "decl.c (check_static_variable_definition): Change to return void.\n\n2018-08-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (check_static_variable_definition): Change to return void.\n\nFrom-SVN: r263742", "tree": {"sha": "c55bd595fe892e9ca52de59d841aba402d0abf89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c55bd595fe892e9ca52de59d841aba402d0abf89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55082d81a0cb409d2c1a54889bbed72b369c4da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55082d81a0cb409d2c1a54889bbed72b369c4da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55082d81a0cb409d2c1a54889bbed72b369c4da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55082d81a0cb409d2c1a54889bbed72b369c4da8/comments", "author": null, "committer": null, "parents": [{"sha": "79ca9c3596a2de77d953cc84e31150051f4d2441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ca9c3596a2de77d953cc84e31150051f4d2441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ca9c3596a2de77d953cc84e31150051f4d2441"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "29f3fd86466d86ccdacea33124d83b7164f2b0a6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55082d81a0cb409d2c1a54889bbed72b369c4da8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55082d81a0cb409d2c1a54889bbed72b369c4da8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=55082d81a0cb409d2c1a54889bbed72b369c4da8", "patch": "@@ -1,3 +1,7 @@\n+2018-08-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (check_static_variable_definition): Change to return void.\n+\n 2018-08-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/86981, Implement -Wpessimizing-move."}, {"sha": "82ec4af87be9e87136d0a6bbcb9355f230a57d3b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55082d81a0cb409d2c1a54889bbed72b369c4da8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55082d81a0cb409d2c1a54889bbed72b369c4da8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=55082d81a0cb409d2c1a54889bbed72b369c4da8", "patch": "@@ -70,7 +70,7 @@ static void push_local_name (tree);\n static tree grok_reference_init (tree, tree, tree, int);\n static tree grokvardecl (tree, tree, tree, const cp_decl_specifier_seq *,\n \t\t\t int, int, int, bool, int, tree);\n-static int check_static_variable_definition (tree, tree);\n+static void check_static_variable_definition (tree, tree);\n static void record_unknown_type (tree, const char *);\n static tree builtin_function_1 (tree, tree, bool);\n static int member_function_or_else (tree, tree, enum overload_flags);\n@@ -9531,25 +9531,24 @@ build_ptrmem_type (tree class_type, tree member_type)\n \n /* DECL is a VAR_DECL defined in-class, whose TYPE is also given.\n    Check to see that the definition is valid.  Issue appropriate error\n-   messages.  Return 1 if the definition is particularly bad, or 0\n-   otherwise.  */\n+   messages.  */\n \n-static int\n+static void\n check_static_variable_definition (tree decl, tree type)\n {\n   /* Avoid redundant diagnostics on out-of-class definitions.  */\n   if (!current_class_type || !TYPE_BEING_DEFINED (current_class_type))\n-    return 0;\n+    ;\n   /* Can't check yet if we don't know the type.  */\n-  if (dependent_type_p (type))\n-    return 0;\n+  else if (dependent_type_p (type))\n+    ;\n   /* If DECL is declared constexpr, we'll do the appropriate checks\n      in check_initializer.  Similarly for inline static data members.  */\n-  if (DECL_P (decl)\n+  else if (DECL_P (decl)\n       && (DECL_DECLARED_CONSTEXPR_P (decl)\n \t  || undeduced_auto_decl (decl)\n \t  || DECL_VAR_DECLARED_INLINE_P (decl)))\n-    return 0;\n+    ;\n   else if (cxx_dialect >= cxx11 && !INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n     {\n       if (!COMPLETE_TYPE_P (type))\n@@ -9564,23 +9563,18 @@ check_static_variable_definition (tree decl, tree type)\n \terror_at (DECL_SOURCE_LOCATION (decl),\n \t\t  \"in-class initialization of static data member %q#D of \"\n \t\t  \"non-literal type\", decl);\n-      return 1;\n     }\n-\n   /* Motion 10 at San Diego: If a static const integral data member is\n      initialized with an integral constant expression, the initializer\n      may appear either in the declaration (within the class), or in\n      the definition, but not both.  If it appears in the class, the\n      member is a member constant.  The file-scope definition is always\n      required.  */\n-  if (!ARITHMETIC_TYPE_P (type) && TREE_CODE (type) != ENUMERAL_TYPE)\n-    {\n-      error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t\"invalid in-class initialization of static data member \"\n-\t\t\"of non-integral type %qT\",\n-\t\ttype);\n-      return 1;\n-    }\n+  else if (!ARITHMETIC_TYPE_P (type) && TREE_CODE (type) != ENUMERAL_TYPE)\n+    error_at (DECL_SOURCE_LOCATION (decl),\n+\t      \"invalid in-class initialization of static data member \"\n+\t      \"of non-integral type %qT\",\n+\t      type);\n   else if (!CP_TYPE_CONST_P (type))\n     error_at (DECL_SOURCE_LOCATION (decl),\n \t      \"ISO C++ forbids in-class initialization of non-const \"\n@@ -9590,8 +9584,6 @@ check_static_variable_definition (tree decl, tree type)\n     pedwarn (DECL_SOURCE_LOCATION (decl), OPT_Wpedantic,\n \t     \"ISO C++ forbids initialization of member constant \"\n \t     \"%qD of non-integral type %qT\", decl, type);\n-\n-  return 0;\n }\n \n /* *expr_p is part of the TYPE_SIZE of a variably-sized array.  If any"}]}