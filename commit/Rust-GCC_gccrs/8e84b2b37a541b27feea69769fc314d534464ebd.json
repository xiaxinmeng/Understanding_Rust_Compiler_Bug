{"sha": "8e84b2b37a541b27feea69769fc314d534464ebd", "node_id": "C_kwDOANBUbNoAKDhlODRiMmIzN2E1NDFiMjdmZWVhNjk3NjlmYzMxNGQ1MzQ0NjRlYmQ", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-02-15T18:09:35Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-02-15T18:09:35Z"}, "message": "aarch64: Fix subs_compare_2.c regression [PR100874]\n\nsubs_compare_2.c tests that we can use a SUBS+CSEL sequence for:\n\nunsigned int\nfoo (unsigned int a, unsigned int b)\n{\n  unsigned int x = a - 4;\n  if (a < 4)\n    return x;\n  else\n    return 0;\n}\n\nAs Andrew notes in the PR, this is effectively MIN (x, 4) - 4,\nand it is now recognised as such by phiopt.  Previously it was\nif-converted in RTL instead.\n\nI tried to look for ways to generalise this to other situations\nand to other ?:-style operations, not just max and min.  However,\nfor general ?: we tend to push an outer \u201c- CST\u201d into the arms of\nthe ?: -- at least if one of them simplifies -- so I didn't find\nany useful abstraction.\n\nThis patch therefore adds a pattern specifically for\nmax/min(a,cst)-cst.  I'm not thrilled at having to do this,\nbut it seems like the least worst fix in the circumstances.\nAlso, max(a,cst)-cst for unsigned a is a useful saturating\nsubtraction idiom and so is arguably worth its own code\nfor that reason.\n\ngcc/\n\tPR target/100874\n\t* config/aarch64/aarch64-protos.h (aarch64_maxmin_plus_const):\n\tDeclare.\n\t* config/aarch64/aarch64.cc (aarch64_maxmin_plus_const): New function.\n\t* config/aarch64/aarch64.md (*aarch64_minmax_plus): New pattern.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/max_plus_1.c: New test.\n\t* gcc.target/aarch64/max_plus_2.c: Likewise.\n\t* gcc.target/aarch64/max_plus_3.c: Likewise.\n\t* gcc.target/aarch64/max_plus_4.c: Likewise.\n\t* gcc.target/aarch64/max_plus_5.c: Likewise.\n\t* gcc.target/aarch64/max_plus_6.c: Likewise.\n\t* gcc.target/aarch64/max_plus_7.c: Likewise.\n\t* gcc.target/aarch64/min_plus_1.c: Likewise.\n\t* gcc.target/aarch64/min_plus_2.c: Likewise.\n\t* gcc.target/aarch64/min_plus_3.c: Likewise.\n\t* gcc.target/aarch64/min_plus_4.c: Likewise.\n\t* gcc.target/aarch64/min_plus_5.c: Likewise.\n\t* gcc.target/aarch64/min_plus_6.c: Likewise.\n\t* gcc.target/aarch64/min_plus_7.c: Likewise.", "tree": {"sha": "9a14883947209d80f42453ac8c91ccfdce5090be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a14883947209d80f42453ac8c91ccfdce5090be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e84b2b37a541b27feea69769fc314d534464ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e84b2b37a541b27feea69769fc314d534464ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e84b2b37a541b27feea69769fc314d534464ebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e84b2b37a541b27feea69769fc314d534464ebd/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65df3aefaa6c0735bd46ffdc7b5018a8b4020ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65df3aefaa6c0735bd46ffdc7b5018a8b4020ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65df3aefaa6c0735bd46ffdc7b5018a8b4020ab8"}], "stats": {"total": 788, "additions": 788, "deletions": 0}, "files": [{"sha": "d0e78d6a559a7c310b7f8c7877081a0e2baf6a05", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -939,6 +939,7 @@ bool aarch64_legitimate_address_p (machine_mode, rtx, bool,\n \t\t\t\t   aarch64_addr_query_type = ADDR_QUERY_M);\n machine_mode aarch64_select_cc_mode (RTX_CODE, rtx, rtx);\n rtx aarch64_gen_compare_reg (RTX_CODE, rtx, rtx);\n+bool aarch64_maxmin_plus_const (rtx_code, rtx *, bool);\n rtx aarch64_load_tp (rtx);\n \n void aarch64_expand_compare_and_swap (rtx op[]);"}, {"sha": "37ed22bcc945c35cd0eea6ca2dc1c9220b6cb2fc", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -3781,6 +3781,110 @@ aarch64_gen_compare_reg_maybe_ze (RTX_CODE code, rtx x, rtx y,\n   return aarch64_gen_compare_reg (code, x, y);\n }\n \n+/* Consider the operation:\n+\n+     OPERANDS[0] = CODE (OPERANDS[1], OPERANDS[2]) + OPERANDS[3]\n+\n+   where:\n+\n+   - CODE is [SU]MAX or [SU]MIN\n+   - OPERANDS[2] and OPERANDS[3] are constant integers\n+   - OPERANDS[3] is a positive or negative shifted 12-bit immediate\n+   - all operands have mode MODE\n+\n+   Decide whether it is possible to implement the operation using:\n+\n+     SUBS <tmp>, OPERANDS[1], -OPERANDS[3]\n+     or\n+     ADDS <tmp>, OPERANDS[1], OPERANDS[3]\n+\n+   followed by:\n+\n+     <insn> OPERANDS[0], <tmp>, [wx]zr, <cond>\n+\n+   where <insn> is one of CSEL, CSINV or CSINC.  Return true if so.\n+   If GENERATE_P is true, also update OPERANDS as follows:\n+\n+     OPERANDS[4] = -OPERANDS[3]\n+     OPERANDS[5] = the rtl condition representing <cond>\n+     OPERANDS[6] = <tmp>\n+     OPERANDS[7] = 0 for CSEL, -1 for CSINV or 1 for CSINC.  */\n+bool\n+aarch64_maxmin_plus_const (rtx_code code, rtx *operands, bool generate_p)\n+{\n+  signop sgn = (code == UMAX || code == UMIN ? UNSIGNED : SIGNED);\n+  rtx dst = operands[0];\n+  rtx maxmin_op = operands[2];\n+  rtx add_op = operands[3];\n+  machine_mode mode = GET_MODE (dst);\n+\n+  /* max (x, y) - z == (x >= y + 1 ? x : y) - z\n+\t\t    == (x >= y ? x : y) - z\n+\t\t    == (x > y ? x : y) - z\n+\t\t    == (x > y - 1 ? x : y) - z\n+\n+     min (x, y) - z == (x <= y - 1 ? x : y) - z\n+\t\t    == (x <= y ? x : y) - z\n+\t\t    == (x < y ? x : y) - z\n+\t\t    == (x < y + 1 ? x : y) - z\n+\n+     Check whether z is in { y - 1, y, y + 1 } and pick the form(s) for\n+     which x is compared with z.  Set DIFF to y - z.  Thus the supported\n+     combinations are as follows, with DIFF being the value after the \":\":\n+\n+     max (x, y) - z == x >= y + 1 ? x - (y + 1) : -1   [z == y + 1]\n+\t\t    == x >= y ? x - y : 0              [z == y]\n+\t\t    == x > y ? x - y : 0               [z == y]\n+\t\t    == x > y - 1 ? x - (y - 1) : 1     [z == y - 1]\n+\n+     min (x, y) - z == x <= y - 1 ? x - (y - 1) : 1    [z == y - 1]\n+\t\t    == x <= y ? x - y : 0              [z == y]\n+\t\t    == x < y ? x - y : 0               [z == y]\n+\t\t    == x < y + 1 ? x - (y + 1) : -1    [z == y + 1].  */\n+  auto maxmin_val = rtx_mode_t (maxmin_op, mode);\n+  auto add_val = rtx_mode_t (add_op, mode);\n+  auto sub_val = wi::neg (add_val);\n+  auto diff = wi::sub (maxmin_val, sub_val);\n+  if (!(diff == 0\n+\t|| (diff == 1 && wi::gt_p (maxmin_val, sub_val, sgn))\n+\t|| (diff == -1 && wi::lt_p (maxmin_val, sub_val, sgn))))\n+    return false;\n+\n+  if (!generate_p)\n+    return true;\n+\n+  rtx_code cmp;\n+  switch (code)\n+    {\n+    case SMAX:\n+      cmp = diff == 1 ? GT : GE;\n+      break;\n+    case UMAX:\n+      cmp = diff == 1 ? GTU : GEU;\n+      break;\n+    case SMIN:\n+      cmp = diff == -1 ? LT : LE;\n+      break;\n+    case UMIN:\n+      cmp = diff == -1 ? LTU : LEU;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  rtx cc = gen_rtx_REG (CCmode, CC_REGNUM);\n+\n+  operands[4] = immed_wide_int_const (sub_val, mode);\n+  operands[5] = gen_rtx_fmt_ee (cmp, VOIDmode, cc, const0_rtx);\n+  if (can_create_pseudo_p ())\n+    operands[6] = gen_reg_rtx (mode);\n+  else\n+    operands[6] = dst;\n+  operands[7] = immed_wide_int_const (diff, mode);\n+\n+  return true;\n+}\n+\n+\n /* Build the SYMBOL_REF for __tls_get_addr.  */\n \n static GTY(()) rtx tls_get_addr_libfunc;"}, {"sha": "64cc21d58021900c8d71d4e273fe3441118d0d14", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -4405,6 +4405,33 @@\n   }\n )\n \n+;; Implement MAX/MIN (A, B) - C using SUBS/ADDS followed by CSEL/CSINV/CSINC.\n+;; See aarch64_maxmin_plus_const for details about the supported cases.\n+(define_insn_and_split \"*aarch64_minmax_plus\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(plus:GPI\n+\t  (MAXMIN:GPI\n+\t    (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t    (match_operand:GPI 2 \"const_int_operand\"))\n+\t  (match_operand:GPI 3 \"aarch64_plus_immediate\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"aarch64_maxmin_plus_const (<CODE>, operands, false)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (reg:CC CC_REGNUM)\n+\t   (compare:CC (match_dup 1) (match_dup 4)))\n+      (set (match_dup 6)\n+\t   (plus:GPI (match_dup 1) (match_dup 3)))])\n+   (set (match_dup 0)\n+\t(if_then_else:GPI (match_dup 5) (match_dup 6) (match_dup 7)))]\n+  {\n+    if (!aarch64_maxmin_plus_const (<CODE>, operands, true))\n+      gcc_unreachable ();\n+  }\n+  [(set_attr \"length\" \"8\")]\n+)\n+\n ;; -------------------------------------------------------------------\n ;; Logical operations\n ;; -------------------------------------------------------------------"}, {"sha": "ef336aeec4f870a39a0fd3336c36ea868a7e575f", "filename": "gcc/testsuite/gcc.target/aarch64/max_plus_1.c", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_1.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,149 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tadds\t(w[0-9]+), w0, #4\n+**\tcsel\tw0, \\1, wzr, g[te]\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tadds\t(w[0-9]+), w0, #4\n+**\tcsel\tw0, \\1, wzr, g[te]\n+**\tret\n+*/\n+/*\n+** f3:\n+**\tadds\t(w[0-9]+), w0, #5\n+**\tcsinc\tw0, \\1, wzr, gt\n+**\tret\n+*/\n+/*\n+** f4:\n+**\tadds\t(w[0-9]+), w0, #3\n+**\tcsinv\tw0, \\1, wzr, ge\n+**\tret\n+*/\n+\n+#ifndef TYPE\n+#define TYPE int32_t\n+#define TYPE_MIN INT32_MIN\n+#define TYPE_MAX INT32_MAX\n+#define VALUE -4\n+#endif\n+\n+#include <stdint.h>\n+\n+TYPE __attribute__((noipa))\n+f1 (TYPE x)\n+{\n+  return (x > VALUE ? x - VALUE : 0);\n+}\n+\n+TYPE __attribute__((noipa))\n+f2 (TYPE x)\n+{\n+  return (x > VALUE ? x : VALUE) - VALUE;\n+}\n+\n+TYPE __attribute__((noipa))\n+f3 (TYPE x)\n+{\n+  return (x > VALUE ? x : VALUE) - (VALUE - 1);\n+}\n+\n+TYPE __attribute__((noipa))\n+f4 (TYPE x)\n+{\n+  return (x > VALUE ? x : VALUE) - (VALUE + 1);\n+}\n+\n+TYPE __attribute__((noipa))\n+f5 (TYPE x)\n+{\n+  return (x > VALUE ? x : VALUE) - (VALUE + 2);\n+}\n+\n+TYPE __attribute__((noipa))\n+f6 (TYPE x)\n+{\n+  return (x > VALUE ? x : VALUE) - (VALUE - 2);\n+}\n+\n+int\n+main (void)\n+{\n+  TYPE max_test = TYPE_MAX;\n+  if (TYPE_MIN < 0 && VALUE < 0)\n+    max_test += VALUE;\n+\n+  if (f1 (TYPE_MIN) != 0)\n+    __builtin_abort ();\n+  if (f1 (VALUE - 1) != 0)\n+    __builtin_abort ();\n+  if (f1 (VALUE) != 0)\n+    __builtin_abort ();\n+  if (f1 (VALUE + 1) != 1)\n+    __builtin_abort ();\n+  if (f1 (max_test) != max_test - VALUE)\n+    __builtin_abort ();\n+\n+  if (f2 (TYPE_MIN) != 0)\n+    __builtin_abort ();\n+  if (f2 (VALUE - 1) != 0)\n+    __builtin_abort ();\n+  if (f2 (VALUE) != 0)\n+    __builtin_abort ();\n+  if (f2 (VALUE + 1) != 1)\n+    __builtin_abort ();\n+  if (f2 (max_test) != max_test - VALUE)\n+    __builtin_abort ();\n+\n+  if (f3 (TYPE_MIN) != 1)\n+    __builtin_abort ();\n+  if (f3 (VALUE - 1) != 1)\n+    __builtin_abort ();\n+  if (f3 (VALUE) != 1)\n+    __builtin_abort ();\n+  if (f3 (VALUE + 1) != 2)\n+    __builtin_abort ();\n+  if (f3 (max_test - 1) != max_test - VALUE)\n+    __builtin_abort ();\n+\n+  if (f4 (TYPE_MIN) != -1)\n+    __builtin_abort ();\n+  if (f4 (VALUE - 1) != -1)\n+    __builtin_abort ();\n+  if (f4 (VALUE) != -1)\n+    __builtin_abort ();\n+  if (f4 (VALUE + 1) != 0)\n+    __builtin_abort ();\n+  if (f4 (max_test) != max_test - VALUE - 1)\n+    __builtin_abort ();\n+\n+  if (f5 (TYPE_MIN) != -2)\n+    __builtin_abort ();\n+  if (f5 (VALUE - 1) != -2)\n+    __builtin_abort ();\n+  if (f5 (VALUE) != -2)\n+    __builtin_abort ();\n+  if (f5 (VALUE + 1) != -1)\n+    __builtin_abort ();\n+  if (f5 (max_test) != max_test - VALUE - 2)\n+    __builtin_abort ();\n+\n+  if (f6 (TYPE_MIN) != 2)\n+    __builtin_abort ();\n+  if (f6 (VALUE - 1) != 2)\n+    __builtin_abort ();\n+  if (f6 (VALUE) != 2)\n+    __builtin_abort ();\n+  if (f6 (VALUE + 1) != 3)\n+    __builtin_abort ();\n+  if (VALUE <= max_test - 2 && f6 (max_test - 2) != max_test - VALUE)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "a2a1295d91856d27043a613354d7a22dd42ff792", "filename": "gcc/testsuite/gcc.target/aarch64/max_plus_2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_2.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tadds\t(x[0-9]+), x0, #4094\n+**\tcsel\tx0, \\1, xzr, g[te]\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tadds\t(x[0-9]+), x0, #4094\n+**\tcsel\tx0, \\1, xzr, g[te]\n+**\tret\n+*/\n+/*\n+** f3:\n+**\tadds\t(x[0-9]+), x0, #4095\n+**\tcsinc\tx0, \\1, xzr, gt\n+**\tret\n+*/\n+/*\n+** f4:\n+**\tadds\t(x[0-9]+), x0, #4093\n+**\tcsinv\tx0, \\1, xzr, ge\n+**\tret\n+*/\n+\n+#define TYPE int64_t\n+#define TYPE_MIN INT64_MIN\n+#define TYPE_MAX INT64_MAX\n+#define VALUE -4094\n+\n+#include \"max_plus_1.c\""}, {"sha": "a9792ecc94d991513588618ed30889c733850ddd", "filename": "gcc/testsuite/gcc.target/aarch64/max_plus_3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_3.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tadds\t(w[0-9]+), w0, #4095\n+**\tcsel\tw0, \\1, wzr, g[te]\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tadds\t(w[0-9]+), w0, #4095\n+**\tcsel\tw0, \\1, wzr, g[te]\n+**\tret\n+*/\n+/*\n+** f3:\n+**\tadds\t(w[0-9]+), w0, #4096\n+**\tcsinc\tw0, \\1, wzr, gt\n+**\tret\n+*/\n+/*\n+** f4:\n+**\tadds\t(w[0-9]+), w0, #4094\n+**\tcsinv\tw0, \\1, wzr, ge\n+**\tret\n+*/\n+\n+#define TYPE int32_t\n+#define TYPE_MIN INT32_MIN\n+#define TYPE_MAX INT32_MAX\n+#define VALUE -4095\n+\n+#include \"max_plus_1.c\""}, {"sha": "5090fa101921f2d2c717cb027c4e724552e4c376", "filename": "gcc/testsuite/gcc.target/aarch64/max_plus_4.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_4.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tadds\t(x[0-9]+), x0, #4096\n+**\tcsel\tx0, \\1, xzr, g[te]\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tadds\t(x[0-9]+), x0, #4096\n+**\tcsel\tx0, \\1, xzr, g[te]\n+**\tret\n+*/\n+/* f3 out of range */\n+/*\n+** f4:\n+**\tadds\t(x[0-9]+), x0, #4095\n+**\tcsinv\tx0, \\1, xzr, ge\n+**\tret\n+*/\n+\n+#define TYPE int64_t\n+#define TYPE_MIN INT64_MIN\n+#define TYPE_MAX INT64_MAX\n+#define VALUE -4096\n+\n+#include \"max_plus_1.c\""}, {"sha": "63f3b34424e378363ec0a5be7522babdd6169039", "filename": "gcc/testsuite/gcc.target/aarch64/max_plus_5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_5.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tadds\t(w[0-9]+), w0, #4095\n+**\tcsel\tw0, \\1, wzr, (cs|hi)\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tadds\t(w[0-9]+), w0, #4095\n+**\tcsel\tw0, \\1, wzr, (cs|hi)\n+**\tret\n+*/\n+/*\n+** f3:\n+**\tadds\t(w[0-9]+), w0, #4096\n+**\tcsinc\tw0, \\1, wzr, hi\n+**\tret\n+*/\n+/*\n+** f4:\n+**\tadds\t(w[0-9]+), w0, #4094\n+**\tcsinv\tw0, \\1, wzr, cs\n+**\tret\n+*/\n+\n+#define TYPE uint32_t\n+#define TYPE_MIN 0\n+#define TYPE_MAX UINT32_MAX\n+#define VALUE (uint32_t)-4095\n+\n+#include \"max_plus_1.c\""}, {"sha": "ad592c69052f6d088cffb055c296ae5f6665ac14", "filename": "gcc/testsuite/gcc.target/aarch64/max_plus_6.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_6.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+#define TYPE uint64_t\n+#define TYPE_MIN 0\n+#define TYPE_MAX UINT64_MAX\n+#define VALUE (uint64_t)-2\n+\n+#include \"max_plus_1.c\""}, {"sha": "ac9f27dec61c69d174dd55b41a79f33716c8b108", "filename": "gcc/testsuite/gcc.target/aarch64/max_plus_7.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmax_plus_7.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tadds\t(x[0-9]+), x0, #3\n+**\tcsel\tx0, \\1, xzr, (cs|hi)\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tadds\t(x[0-9]+), x0, #3\n+**\tcsel\tx0, \\1, xzr, (cs|hi)\n+**\tret\n+*/\n+/*\n+** f3:\n+**\tadds\t(x[0-9]+), x0, #4\n+**\tcsinc\tx0, \\1, xzr, hi\n+**\tret\n+*/\n+/*\n+** f4:\n+**\tadds\t(x[0-9]+), x0, #2\n+**\tcsinv\tx0, \\1, xzr, cs\n+**\tret\n+*/\n+\n+#define TYPE uint64_t\n+#define TYPE_MIN 0\n+#define TYPE_MAX UINT64_MAX\n+#define VALUE (uint64_t)-3\n+\n+#include \"max_plus_1.c\""}, {"sha": "f4c9106dfcabf46b1f35d49cba2184f8cd80da9b", "filename": "gcc/testsuite/gcc.target/aarch64/min_plus_1.c", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_1.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,149 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tsubs\t(w[0-9]+), w0, #?4\n+**\tcsel\tw0, \\1, wzr, l[te]\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tsubs\t(w[0-9]+), w0, #?4\n+**\tcsel\tw0, \\1, wzr, l[te]\n+**\tret\n+*/\n+/*\n+** f3:\n+**\tsubs\t(w[0-9]+), w0, #?3\n+**\tcsinc\tw0, \\1, wzr, le\n+**\tret\n+*/\n+/*\n+** f4:\n+**\tsubs\t(w[0-9]+), w0, #?5\n+**\tcsinv\tw0, \\1, wzr, lt\n+**\tret\n+*/\n+\n+#ifndef TYPE\n+#define TYPE int32_t\n+#define TYPE_MIN INT32_MIN\n+#define TYPE_MAX INT32_MAX\n+#define VALUE 4\n+#endif\n+\n+#include <stdint.h>\n+\n+TYPE __attribute__((noipa))\n+f1 (TYPE x)\n+{\n+  return (x < VALUE ? x - VALUE : 0);\n+}\n+\n+TYPE __attribute__((noipa))\n+f2 (TYPE x)\n+{\n+  return (x < VALUE ? x : VALUE) - VALUE;\n+}\n+\n+TYPE __attribute__((noipa))\n+f3 (TYPE x)\n+{\n+  return (x < VALUE ? x : VALUE) - (VALUE - 1);\n+}\n+\n+TYPE __attribute__((noipa))\n+f4 (TYPE x)\n+{\n+  return (x < VALUE ? x : VALUE) - (VALUE + 1);\n+}\n+\n+TYPE __attribute__((noipa))\n+f5 (TYPE x)\n+{\n+  return (x < VALUE ? x : VALUE) - (VALUE + 2);\n+}\n+\n+TYPE __attribute__((noipa))\n+f6 (TYPE x)\n+{\n+  return (x < VALUE ? x : VALUE) - (VALUE - 2);\n+}\n+\n+int\n+main (void)\n+{\n+  TYPE min_test = TYPE_MIN;\n+  if (TYPE_MIN < 0 && VALUE > 0)\n+    min_test += VALUE;\n+\n+  if (f1 (min_test) != min_test - VALUE)\n+    __builtin_abort ();\n+  if (f1 (VALUE - 1) != -1)\n+    __builtin_abort ();\n+  if (f1 (VALUE) != 0)\n+    __builtin_abort ();\n+  if (f1 (VALUE + 1) != 0)\n+    __builtin_abort ();\n+  if (f1 (TYPE_MAX) != 0)\n+    __builtin_abort ();\n+\n+  if (f2 (min_test) != min_test - VALUE)\n+    __builtin_abort ();\n+  if (f2 (VALUE - 1) != -1)\n+    __builtin_abort ();\n+  if (f2 (VALUE) != 0)\n+    __builtin_abort ();\n+  if (f2 (VALUE + 1) != 0)\n+    __builtin_abort ();\n+  if (f2 (TYPE_MAX) != 0)\n+    __builtin_abort ();\n+\n+  if (f3 (min_test) != min_test - VALUE + 1)\n+    __builtin_abort ();\n+  if (f3 (VALUE - 1) != 0)\n+    __builtin_abort ();\n+  if (f3 (VALUE) != 1)\n+    __builtin_abort ();\n+  if (f3 (VALUE + 1) != 1)\n+    __builtin_abort ();\n+  if (f3 (TYPE_MAX) != 1)\n+    __builtin_abort ();\n+\n+  if (f4 (min_test + 1) != min_test - VALUE)\n+    __builtin_abort ();\n+  if (f4 (VALUE - 1) != -2)\n+    __builtin_abort ();\n+  if (f4 (VALUE) != -1)\n+    __builtin_abort ();\n+  if (f4 (VALUE + 1) != -1)\n+    __builtin_abort ();\n+  if (f4 (TYPE_MAX) != -1)\n+    __builtin_abort ();\n+\n+  if (VALUE >= min_test + 2 && f5 (min_test + 2) != min_test - VALUE)\n+    __builtin_abort ();\n+  if (f5 (VALUE - 1) != -3)\n+    __builtin_abort ();\n+  if (f5 (VALUE) != -2)\n+    __builtin_abort ();\n+  if (f5 (VALUE + 1) != -2)\n+    __builtin_abort ();\n+  if (f5 (TYPE_MAX) != -2)\n+    __builtin_abort ();\n+\n+  if (f6 (min_test) != min_test - VALUE + 2)\n+    __builtin_abort ();\n+  if (f6 (VALUE - 1) != 1)\n+    __builtin_abort ();\n+  if (f6 (VALUE) != 2)\n+    __builtin_abort ();\n+  if (f6 (VALUE + 1) != 2)\n+    __builtin_abort ();\n+  if (f6 (TYPE_MAX) != 2)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "bc0141b726448ec245775a0555813c380053ebbe", "filename": "gcc/testsuite/gcc.target/aarch64/min_plus_2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_2.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tsubs\t(x[0-9]+), x0, #?4094\n+**\tcsel\tx0, \\1, xzr, l[te]\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tsubs\t(x[0-9]+), x0, #?4094\n+**\tcsel\tx0, \\1, xzr, l[te]\n+**\tret\n+*/\n+/*\n+** f3:\n+**\tsubs\t(x[0-9]+), x0, #?4093\n+**\tcsinc\tx0, \\1, xzr, le\n+**\tret\n+*/\n+/*\n+** f4:\n+**\tsubs\t(x[0-9]+), x0, #?4095\n+**\tcsinv\tx0, \\1, xzr, lt\n+**\tret\n+*/\n+\n+#define TYPE int64_t\n+#define TYPE_MIN INT64_MIN\n+#define TYPE_MAX INT64_MAX\n+#define VALUE 4094\n+\n+#include \"min_plus_1.c\""}, {"sha": "1808e4b0cbf372c40f0354cd5bf9bb4d9fadbfc3", "filename": "gcc/testsuite/gcc.target/aarch64/min_plus_3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_3.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tsubs\t(w[0-9]+), w0, #?4095\n+**\tcsel\tw0, \\1, wzr, l[te]\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tsubs\t(w[0-9]+), w0, #?4095\n+**\tcsel\tw0, \\1, wzr, l[te]\n+**\tret\n+*/\n+/*\n+** f3:\n+**\tsubs\t(w[0-9]+), w0, #?4094\n+**\tcsinc\tw0, \\1, wzr, le\n+**\tret\n+*/\n+/*\n+** f4:\n+**\tsubs\t(w[0-9]+), w0, #?4096\n+**\tcsinv\tw0, \\1, wzr, lt\n+**\tret\n+*/\n+\n+#define TYPE int32_t\n+#define TYPE_MIN INT32_MIN\n+#define TYPE_MAX INT32_MAX\n+#define VALUE 4095\n+\n+#include \"min_plus_1.c\""}, {"sha": "6c581fed61d7a67b72dde12609304f5b01c03f31", "filename": "gcc/testsuite/gcc.target/aarch64/min_plus_4.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_4.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tsubs\t(x[0-9]+), x0, #?4096\n+**\tcsel\tx0, \\1, xzr, l[te]\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tsubs\t(x[0-9]+), x0, #?4096\n+**\tcsel\tx0, \\1, xzr, l[te]\n+**\tret\n+*/\n+/*\n+** f3:\n+**\tsubs\t(x[0-9]+), x0, #?4095\n+**\tcsinc\tx0, \\1, xzr, le\n+**\tret\n+*/\n+/* f4 out of range */\n+\n+#define TYPE int64_t\n+#define TYPE_MIN INT64_MIN\n+#define TYPE_MAX INT64_MAX\n+#define VALUE 4096\n+\n+#include \"min_plus_1.c\""}, {"sha": "97542d507658e0aaa885ba8e583eb049c358c4eb", "filename": "gcc/testsuite/gcc.target/aarch64/min_plus_5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_5.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tsubs\t(w[0-9]+), w0, #?4095\n+**\tcsel\tw0, \\1, wzr, (cc|ls)\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tsubs\t(w[0-9]+), w0, #?4095\n+**\tcsel\tw0, \\1, wzr, (cc|ls)\n+**\tret\n+*/\n+/*\n+** f3:\n+**\tsubs\t(w[0-9]+), w0, #?4094\n+**\tcsinc\tw0, \\1, wzr, ls\n+**\tret\n+*/\n+/*\n+** f4:\n+**\tsubs\t(w[0-9]+), w0, #?4096\n+**\tcsinv\tw0, \\1, wzr, cc\n+**\tret\n+*/\n+\n+#define TYPE uint32_t\n+#define TYPE_MIN 0\n+#define TYPE_MAX UINT32_MAX\n+#define VALUE 4095\n+\n+#include \"min_plus_1.c\""}, {"sha": "176533cb2e1f2bdff6d29eafa5cda0456964e381", "filename": "gcc/testsuite/gcc.target/aarch64/min_plus_6.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_6.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+#define TYPE uint64_t\n+#define TYPE_MIN 0\n+#define TYPE_MAX UINT64_MAX\n+#define VALUE 1\n+\n+#include \"min_plus_1.c\""}, {"sha": "d6a217a51680bee88fb2902786b606d2b9af9dbb", "filename": "gcc/testsuite/gcc.target/aarch64/min_plus_7.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e84b2b37a541b27feea69769fc314d534464ebd/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmin_plus_7.c?ref=8e84b2b37a541b27feea69769fc314d534464ebd", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+\n+/*\n+** f1:\n+**\tsubs\t(x[0-9]+), x0, #?2\n+**\tcsel\tx0, \\1, xzr, (cc|ls)\n+**\tret\n+*/\n+/*\n+** f2:\n+**\tsubs\t(x[0-9]+), x0, #?2\n+**\tcsel\tx0, \\1, xzr, (cc|ls)\n+**\tret\n+*/\n+/*\n+** f3:\n+**\tsubs\t(x[0-9]+), x0, #?1\n+**\tcsinc\tx0, \\1, xzr, ls\n+**\tret\n+*/\n+/*\n+** f4:\n+**\tsubs\t(x[0-9]+), x0, #?3\n+**\tcsinv\tx0, \\1, xzr, cc\n+**\tret\n+*/\n+\n+#define TYPE uint64_t\n+#define TYPE_MIN 0\n+#define TYPE_MAX UINT64_MAX\n+#define VALUE 2\n+\n+#include \"min_plus_1.c\""}]}