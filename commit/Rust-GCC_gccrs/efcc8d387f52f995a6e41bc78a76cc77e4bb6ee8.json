{"sha": "efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjYzhkMzg3ZjUyZjk5NWE2ZTQxYmM3OGE3NmNjNzdlNGJiNmVlOA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-01-08T23:42:09Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-01-08T23:42:09Z"}, "message": "PR tree-optimization/78913 - Probably misleading error reported by -Wformat-length\n\nPR tree-optimization/78913 - Probably misleading error reported by -Wformat-length\nPR middle-end/77708 - -Wformat-length %s warns for snprintf\n\ngcc/ChangeLog:\n\n\tPR middle-end/77708\n\t* doc/invoke.texi (Warning Options): Document -Wformat-truncation.\n\t* gimple-ssa-sprintf.c (call_info::reval_used, call_info::warnopt):\n\tNew member functions.\n\t(format_directive): Used them.\n\t(add_bytes): Same.\n\t(pass_sprintf_length::handle_gimple_call): Same.\n\t* graphite-sese-to-poly.c (tree_int_to_gmp): Increase buffer size\n\tto avoid truncation for any argument.\n\t(extract_affine_mul): Same.\n\t* tree.c (get_file_function_name): Same.\n\ngcc/c-family/ChangeLog:\n\n\tPR middle-end/77708\n\t* c.opt (-Wformat-truncation): New option.\n\ngcc/fortran/ChangeLog:\n\n\tPR tree-optimization/78913\n\tPR middle-end/77708\n\t* trans-common.c (build_equiv_decl): Increase buffer size to avoid\n\ttruncation for any argument.\n\t* trans-types.c (gfc_build_logical_type): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/77708\n\t* gcc.dg/tree-ssa/builtin-snprintf-warn-1.c: New test.\n\t* gcc.dg/tree-ssa/builtin-snprintf-warn-2.c: New test.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-6.c: XFAIL test cases failing\n\tdue to bug 78969.\n\t* gcc.dg/format/pr78569.c: Adjust.\n\nFrom-SVN: r244210", "tree": {"sha": "f91cdc7136d16f3e039d0ea98daf535a9c7c6f30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f91cdc7136d16f3e039d0ea98daf535a9c7c6f30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1243c42d6457fd2b09917b5789c8c42dd13437ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1243c42d6457fd2b09917b5789c8c42dd13437ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1243c42d6457fd2b09917b5789c8c42dd13437ec"}], "stats": {"total": 377, "additions": 304, "deletions": 73}, "files": [{"sha": "9c2661ba58b8fa6b30f6b3d7d45b690137ef92ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -1,3 +1,17 @@\n+2017-01-08  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/77708\n+\t* doc/invoke.texi (Warning Options): Document -Wformat-truncation.\n+\t* gimple-ssa-sprintf.c (call_info::reval_used, call_info::warnopt):\n+\tNew member functions.\n+\t(format_directive): Used them.\n+\t(add_bytes): Same.\n+\t(pass_sprintf_length::handle_gimple_call): Same.\n+\t* graphite-sese-to-poly.c (tree_int_to_gmp): Increase buffer size\n+\tto avoid truncation for any argument.\n+\t(extract_affine_mul): Same.\n+\t* tree.c (get_file_function_name): Same.\n+\n 2017-01-01  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/77484"}, {"sha": "3bd2c7ce88e9e5c3e9464433e62307fa612bf4cf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -1,3 +1,8 @@\n+2017-01-08  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/77708\n+\t* c.opt (-Wformat-truncation): New option.\n+\n 2017-01-06  Alexandre Oliva <aoliva@redhat.com>\n \n \t* c-pretty-print.c (pp_c_tree_decl_identifier): Convert 16-bit"}, {"sha": "8b2fc79f8ab29d317d0651699784843615dc350c", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -537,6 +537,11 @@ Wformat-signedness\n C ObjC C++ ObjC++ Var(warn_format_signedness) Warning\n Warn about sign differences with format functions.\n \n+Wformat-truncation\n+C ObjC C++ ObjC++ Warning Alias(Wformat-truncation=, 1, 0)\n+Warn about calls to snprintf and similar functions that truncate output.\n+Same as -Wformat-truncation=1.\n+\n Wformat-y2k\n C ObjC C++ ObjC++ Var(warn_format_y2k) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=,warn_format >= 2, 0)\n Warn about strftime formats yielding 2-digit years.\n@@ -554,6 +559,10 @@ C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_format_length) Warning\n Warn about function calls with format strings that write past the end\n of the destination region.\n \n+Wformat-truncation=\n+C ObjC C++ ObjC++ Joined RejectNegative UInteger Var(warn_format_trunc) Warning LangEnabledBy(C ObjC C++ ObjC++,Wformat=, warn_format >= 1, 0)\n+Warn about calls to snprintf and similar functions that truncate output.\n+\n Wignored-qualifiers\n C C++ Var(warn_ignored_qualifiers) Warning EnabledBy(Wextra)\n Warn whenever type qualifiers are ignored."}, {"sha": "6cf03ef95e42c866e9c94b5858dae62b9f7f3ef7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 51, "deletions": 24, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -276,7 +276,8 @@ Objective-C and Objective-C++ Dialects}.\n -Werror  -Werror=* -Wfatal-errors -Wfloat-equal  -Wformat  -Wformat=2 @gol\n -Wno-format-contains-nul -Wno-format-extra-args -Wformat-length=@var{n} @gol\n -Wformat-nonliteral @gol\n--Wformat-security  -Wformat-signedness  -Wformat-y2k -Wframe-address @gol\n+-Wformat-security  -Wformat-signedness -Wformat-truncation=@var{n} @gol\n+-Wformat-y2k -Wframe-address @gol\n -Wframe-larger-than=@var{len} -Wno-free-nonheap-object -Wjump-misses-init @gol\n -Wignored-qualifiers  -Wignored-attributes  -Wincompatible-pointer-types @gol\n -Wimplicit  -Wimplicit-fallthrough  -Wimplicit-fallthrough=@var{n} @gol\n@@ -3959,10 +3960,9 @@ Unix Specification says that such unused arguments are allowed.\n @opindex Wformat-length\n @opindex Wno-format-length\n Warn about calls to formatted input/output functions such as @code{sprintf}\n-that might overflow the destination buffer, or about bounded functions such\n-as @code{snprintf} that might result in output truncation.  When the exact\n-number of bytes written by a format directive cannot be determined at\n-compile-time it is estimated based on heuristics that depend on the\n+and @code{vsprintf} that might overflow the destination buffer.  When the\n+exact number of bytes written by a format directive cannot be determined\n+at compile-time it is estimated based on heuristics that depend on the\n @var{level} argument and on optimization.  While enabling optimization\n will in most cases improve the accuracy of the warning, it may also\n result in false positives.\n@@ -3974,15 +3974,14 @@ result in false positives.\n @opindex Wno-format-length\n Level @var{1} of @option{-Wformat-length} enabled by @option{-Wformat}\n employs a conservative approach that warns only about calls that most\n-likely overflow the buffer or result in output truncation.  At this\n-level, numeric arguments to format directives with unknown values are\n-assumed to have the value of one, and strings of unknown length to be\n-empty.  Numeric arguments that are known to be bounded to a subrange\n-of their type, or string arguments whose output is bounded either by\n-their directive's precision or by a finite set of string literals, are\n-assumed to take on the value within the range that results in the most\n-bytes on output.  For example, the call to @code{sprintf} below is\n-diagnosed because even with both @var{a} and @var{b} equal to zero,\n+likely overflow the buffer.  At this level, numeric arguments to format\n+directives with unknown values are assumed to have the value of one, and\n+strings of unknown length to be empty.  Numeric arguments that are known\n+to be bounded to a subrange of their type, or string arguments whose output\n+is bounded either by their directive's precision or by a finite set of\n+string literals, are assumed to take on the value within the range that\n+results in the most bytes on output.  For example, the call to @code{sprintf}\n+below is diagnosed because even with both @var{a} and @var{b} equal to zero,\n the terminating NUL character (@code{'\\0'}) appended by the function\n to the destination buffer will be written past its end.  Increasing\n the size of the buffer by a single byte is sufficient to avoid the\n@@ -3998,14 +3997,13 @@ void f (int a, int b)\n \n @item -Wformat-length=2\n Level @var{2} warns also about calls that might overflow the destination\n-buffer or result in truncation given an argument of sufficient length\n-or magnitude.  At level @var{2}, unknown numeric arguments are assumed\n-to have the minimum representable value for signed types with a precision\n-greater than 1, and the maximum representable value otherwise.  Unknown\n-string arguments whose length cannot be assumed to be bounded either by\n-the directive's precision, or by a finite set of string literals they\n-may evaluate to, or the character array they may point to, are assumed\n-to be 1 character long.\n+buffer given an argument of sufficient length or magnitude.  At level\n+@var{2}, unknown numeric arguments are assumed to have the minimum\n+representable value for signed types with a precision greater than 1, and\n+the maximum representable value otherwise.  Unknown string arguments whose\n+length cannot be assumed to be bounded either by the directive's precision,\n+or by a finite set of string literals they may evaluate to, or the character\n+array they may point to, are assumed to be 1 character long.\n \n At level @var{2}, the call in the example above is again diagnosed, but\n this time because with @var{a} equal to a 32-bit @code{INT_MIN} the first\n@@ -4075,6 +4073,35 @@ included in @option{-Wformat-nonliteral}.)\n If @option{-Wformat} is specified, also warn if the format string\n requires an unsigned argument and the argument is signed and vice versa.\n \n+@item -Wformat-truncation\n+@itemx -Wformat-truncation=@var{level}\n+@opindex Wformat-truncation\n+@opindex Wno-format-truncation\n+Warn about calls to formatted input/output functions such as @code{snprintf}\n+and @code{vsnprintf} that might result in output truncation.  When the exact\n+number of bytes written by a format directive cannot be determined at\n+compile-time it is estimated based on heuristics that depend on\n+the @var{level} argument and on optimization.  While enabling optimization\n+will in most cases improve the accuracy of the warning, it may also result\n+in false positives.  Except as noted otherwise, the option uses the same\n+logic @option{-Wformat-length}.\n+\n+@table @gcctabopt\n+@item -Wformat-truncation\n+@item -Wformat-truncation=1\n+@opindex Wformat-truncation\n+@opindex Wno-format-length\n+Level @var{1} of @option{-Wformat-truncation} enabled by @option{-Wformat}\n+employs a conservative approach that warns only about calls to bounded\n+functions whose return value is unused and that will most likely result\n+in output truncatation.\n+\n+@item -Wformat-truncation=2\n+Level @var{2} warns also about calls to bounded functions whose return\n+value is used and that might result in truncation given an argument of\n+sufficient length or magnitude.\n+@end table\n+\n @item -Wformat-y2k\n @opindex Wformat-y2k\n @opindex Wno-format-y2k\n@@ -8429,8 +8456,8 @@ if (snprintf (buf, \"%08x\", i) >= sizeof buf)\n \n The @option{-fprintf-return-value} option relies on other optimizations\n and yields best results with @option{-O2}.  It works in tandem with the\n-@option{-Wformat-length} option.  The @option{-fprintf-return-value}\n-option is enabled by default.\n+@option{-Wformat-length} and @option{-Wformat-truncation} options.\n+The @option{-fprintf-return-value} option is enabled by default.\n \n @item -fno-peephole\n @itemx -fno-peephole2"}, {"sha": "36e45555c5a4b7ec3d95c833771436d843436bfc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -1,3 +1,11 @@\n+2017-01-08  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/78913\n+\tPR middle-end/77708\n+\t* trans-common.c (build_equiv_decl): Increase buffer size to avoid\n+\ttruncation for any argument.\n+\t* trans-types.c (gfc_build_logical_type): Same.\n+\n 2017-01-07  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/78781"}, {"sha": "36370ebc22b324122fba9a6f67e45e3850db560c", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -342,7 +342,7 @@ static tree\n build_equiv_decl (tree union_type, bool is_init, bool is_saved)\n {\n   tree decl;\n-  char name[15];\n+  char name[18];\n   static int serial = 0;\n \n   if (is_init)"}, {"sha": "759b80eecaa044daf2f77d14d96e591c007dbe4d", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -861,7 +861,7 @@ gfc_build_logical_type (gfc_logical_info *info)\n void\n gfc_init_types (void)\n {\n-  char name_buf[18];\n+  char name_buf[26];\n   int index;\n   tree type;\n   unsigned n;"}, {"sha": "166b34ba37e1dc0da3e6c46c04c12df5db0e88c8", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 50, "deletions": 31, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -718,6 +718,18 @@ struct pass_sprintf_length::call_info\n      writing any.  NOWRITE is cleared in response to the %n directive\n      which has side-effects similar to writing output.  */\n   bool nowrite;\n+\n+  /* Return true if the called function's return value is used.  */\n+  bool retval_used () const\n+  {\n+    return gimple_get_lhs (callstmt);\n+  }\n+\n+  /* Return the warning option corresponding to the called function.  */\n+  int warnopt () const\n+  {\n+    return bounded ? OPT_Wformat_truncation_ : OPT_Wformat_length_;\n+  }\n };\n \n /* Return the result of formatting the '%%' directive.  */\n@@ -1950,8 +1962,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \n   if (fmtres.nullp)\n     {\n-      fmtwarn (dirloc, pargrange, NULL,\n-\t       OPT_Wformat_length_,\n+      fmtwarn (dirloc, pargrange, NULL, info.warnopt (),\n \t       \"%<%.*s%> directive argument is null\",\n \t       (int)cvtlen, cvtbeg);\n \n@@ -1986,8 +1997,8 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t\t\t    \"%wu bytes into a region of size %wu\")\n \t\t       : G_(\"%<%.*s%> directive writing %wu bytes \"\n \t\t\t    \"into a region of size %wu\"));\n-\t\t  warned = fmtwarn (dirloc, pargrange, NULL,\n-\t\t\t\t    OPT_Wformat_length_, fmtstr,\n+\t\t  warned = fmtwarn (dirloc, pargrange, NULL, info.warnopt (),\n+\t\t\t\t    fmtstr,\n \t\t\t\t    (int)cvtlen, cvtbeg, fmtres.range.min,\n \t\t\t\t    navail);\n \t\t}\n@@ -2001,7 +2012,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t\t       : G_(\"%<%.*s%> directive writing between %wu and \"\n \t\t\t    \"%wu bytes into a region of size %wu\"));\n \t\t  warned = fmtwarn (dirloc, pargrange, NULL,\n-\t\t\t\t    OPT_Wformat_length_, fmtstr,\n+\t\t\t\t    info.warnopt (), fmtstr,\n \t\t\t\t    (int)cvtlen, cvtbeg,\n \t\t\t\t    fmtres.range.min, fmtres.range.max, navail);\n \t\t}\n@@ -2014,16 +2025,20 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t\t       : G_(\"%<%.*s%> directive writing %wu or more bytes \"\n \t\t\t    \"into a region of size %wu\"));\n \t\t  warned = fmtwarn (dirloc, pargrange, NULL,\n-\t\t\t\t    OPT_Wformat_length_, fmtstr,\n+\t\t\t\t    info.warnopt (), fmtstr,\n \t\t\t\t    (int)cvtlen, cvtbeg,\n \t\t\t\t    fmtres.range.min, navail);\n \t\t}\n \t    }\n \t  else if (navail < fmtres.range.max\n-\t\t   && (((spec.specifier == 's'\n-\t\t\t && fmtres.range.max < HOST_WIDE_INT_MAX)\n-\t\t\t/* && (spec.precision || spec.star_precision) */)\n-\t\t       || 1 < warn_format_length))\n+\t\t   && (spec.specifier != 's'\n+\t\t       || fmtres.range.max < HOST_WIDE_INT_MAX)\n+\t\t   && ((info.bounded\n+\t\t\t&& (!info.retval_used ()\n+\t\t\t    || warn_format_trunc > 1))\n+\t\t       || (!info.bounded\n+\t\t\t   && (spec.specifier == 's'\n+\t\t\t       || 1 < warn_format_length))))\n \t    {\n \t      /* The maximum directive output is longer than there is\n \t\t room in the destination and the output length is either\n@@ -2038,7 +2053,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t\t       : G_(\"%<%.*s%> directive writing %wu or more bytes \"\n \t\t\t    \"into a region of size %wu\"));\n \t\t  warned = fmtwarn (dirloc, pargrange, NULL,\n-\t\t\t\t    OPT_Wformat_length_, fmtstr,\n+\t\t\t\t    info.warnopt (), fmtstr,\n \t\t\t\t    (int)cvtlen, cvtbeg,\n \t\t\t\t    fmtres.range.min, navail);\n \t\t}\n@@ -2052,7 +2067,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t\t       : G_(\"%<%.*s%> directive writing between %wu and %wu \"\n \t\t\t    \"bytes into a region of size %wu\"));\n \t\t  warned = fmtwarn (dirloc, pargrange, NULL,\n-\t\t\t\t    OPT_Wformat_length_, fmtstr,\n+\t\t\t\t    info.warnopt (), fmtstr,\n \t\t\t\t    (int)cvtlen, cvtbeg,\n \t\t\t\t    fmtres.range.min, fmtres.range.max,\n \t\t\t\t    navail);\n@@ -2086,7 +2101,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t\t       \"into a region of size %wu\")));\n \n \t  warned = fmtwarn (dirloc, pargrange, NULL,\n-\t\t\t    OPT_Wformat_length_, fmtstr,\n+\t\t\t    info.warnopt (), fmtstr,\n \t\t\t    (int)cvtlen, cvtbeg, fmtres.range.min,\n \t\t\t    navail);\n \t}\n@@ -2111,7 +2126,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \n       if (fmtres.range.min == fmtres.range.max)\n \twarned = fmtwarn (dirloc, pargrange, NULL,\n-\t\t\t  OPT_Wformat_length_,\n+\t\t\t  info.warnopt (),\n \t\t\t  \"%<%.*s%> directive output of %wu bytes exceeds \"\n \t\t\t  \"minimum required size of 4095\",\n \t\t\t  (int)cvtlen, cvtbeg, fmtres.range.min);\n@@ -2125,7 +2140,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t\t    \"bytes exceeds minimum required size of 4095\"));\n \n \t  warned = fmtwarn (dirloc, pargrange, NULL,\n-\t\t\t    OPT_Wformat_length_, fmtstr,\n+\t\t\t    info.warnopt (), fmtstr,\n \t\t\t    (int)cvtlen, cvtbeg,\n \t\t\t    fmtres.range.min, fmtres.range.max);\n \t}\n@@ -2143,8 +2158,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t to exceed INT_MAX bytes.  */\n \n       if (fmtres.range.min == fmtres.range.max)\n-\twarned = fmtwarn (dirloc, pargrange, NULL,\n-\t\t\t  OPT_Wformat_length_,\n+\twarned = fmtwarn (dirloc, pargrange, NULL, info.warnopt (),\n \t\t\t  \"%<%.*s%> directive output of %wu bytes causes \"\n \t\t\t  \"result to exceed %<INT_MAX%>\",\n \t\t\t  (int)cvtlen, cvtbeg, fmtres.range.min);\n@@ -2157,7 +2171,7 @@ format_directive (const pass_sprintf_length::call_info &info,\n \t       : G_ (\"%<%.*s%> directive output between %wu and %wu \"\n \t\t     \"bytes may cause result to exceed %<INT_MAX%>\"));\n \t  warned = fmtwarn (dirloc, pargrange, NULL,\n-\t\t\t    OPT_Wformat_length_, fmtstr,\n+\t\t\t    info.warnopt (), fmtstr,\n \t\t\t    (int)cvtlen, cvtbeg,\n \t\t\t    fmtres.range.min, fmtres.range.max);\n \t}\n@@ -2265,7 +2279,11 @@ add_bytes (const pass_sprintf_length::call_info &info,\n \t\t  : G_(\"writing a terminating nul past the end \"\n \t\t       \"of the destination\")));\n \n-\t  res->warned = fmtwarn (loc, NULL, NULL, OPT_Wformat_length_, text);\n+\t  if (!info.bounded\n+\t      || !boundrange\n+\t      || !info.retval_used ()\n+\t      || warn_format_trunc > 1)\n+\t    res->warned = fmtwarn (loc, NULL, NULL, info.warnopt (), text);\n \t}\n       else\n \t{\n@@ -2283,8 +2301,12 @@ add_bytes (const pass_sprintf_length::call_info &info,\n \t\t  : G_(\"writing format character %#qc at offset %wu past \"\n \t\t       \"the end of the destination\")));\n \n-\t  res->warned = fmtwarn (loc, NULL, NULL, OPT_Wformat_length_,\n-\t\t\t\t text, info.fmtstr[off], off);\n+\t  if (!info.bounded\n+\t      || !boundrange\n+\t      || !info.retval_used ()\n+\t      || warn_format_trunc > 1)\n+\t    res->warned = fmtwarn (loc, NULL, NULL, info.warnopt (),\n+\t\t\t\t   text, info.fmtstr[off], off);\n \t}\n     }\n \n@@ -2351,8 +2373,7 @@ add_bytes (const pass_sprintf_length::call_info &info,\n \t off + len - !!len);\n \n       if (res->number_chars_min == res->number_chars_max)\n-\tres->warned = fmtwarn (loc, NULL, NULL,\n-\t\t\t       OPT_Wformat_length_,\n+\tres->warned = fmtwarn (loc, NULL, NULL, info.warnopt (),\n \t\t\t       \"output of %wu bytes causes \"\n \t\t\t       \"result to exceed %<INT_MAX%>\",\n \t\t\t       res->number_chars_min - !end);\n@@ -2364,8 +2385,7 @@ add_bytes (const pass_sprintf_length::call_info &info,\n \t\t     \"result to exceed %<INT_MAX%>\")\n \t       : G_ (\"output between %wu and %wu bytes may cause \"\n \t\t     \"result to exceed %<INT_MAX%>\"));\n-\t  res->warned = fmtwarn (loc, NULL, NULL, OPT_Wformat_length_,\n-\t\t\t\t text,\n+\t  res->warned = fmtwarn (loc, NULL, NULL, info.warnopt (), text,\n \t\t\t\t res->number_chars_min - !end,\n \t\t\t\t res->number_chars_max - !end);\n \t}\n@@ -2970,14 +2990,13 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n \t\t checking built-ins.  */\n \t      if ((idx_objsize == HOST_WIDE_INT_M1U\n \t\t   || !warn_stringop_overflow))\n-\t\twarning_at (gimple_location (info.callstmt),\n-\t\t\t    OPT_Wformat_length_,\n+\t\twarning_at (gimple_location (info.callstmt), info.warnopt (),\n \t\t\t    \"specified bound %wu exceeds maximum object size \"\n \t\t\t    \"%wu\",\n \t\t\t    dstsize, target_size_max () / 2);\n \t    }\n \t  else if (dstsize > target_int_max ())\n-\t    warning_at (gimple_location (info.callstmt), OPT_Wformat_length_,\n+\t    warning_at (gimple_location (info.callstmt), info.warnopt (),\n \t\t\t\"specified bound %wu exceeds %<INT_MAX %>\",\n \t\t\tdstsize);\n \t}\n@@ -3028,7 +3047,7 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n \t     is not constant.  */\n \t  location_t loc = gimple_location (info.callstmt);\n \t  warning_at (EXPR_LOC_OR_LOC (dstptr, loc),\n-\t\t      OPT_Wformat_length_, \"null destination pointer\");\n+\t\t      info.warnopt (), \"null destination pointer\");\n \t  return;\n \t}\n \n@@ -3044,7 +3063,7 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n \t  && (idx_objsize == HOST_WIDE_INT_M1U\n \t      || !warn_stringop_overflow))\n \t{\n-\t  warning_at (gimple_location (info.callstmt), OPT_Wformat_length_,\n+\t  warning_at (gimple_location (info.callstmt), info.warnopt (),\n \t\t      \"specified bound %wu exceeds the size %wu \"\n \t\t      \"of the destination object\", dstsize, objsize);\n \t}\n@@ -3057,7 +3076,7 @@ pass_sprintf_length::handle_gimple_call (gimple_stmt_iterator *gsi)\n \t is not constant.  */\n       location_t loc = gimple_location (info.callstmt);\n       warning_at (EXPR_LOC_OR_LOC (info.format, loc),\n-\t\t  OPT_Wformat_length_, \"null format string\");\n+\t\t  info.warnopt (), \"null format string\");\n       return;\n     }\n "}, {"sha": "fa224edff94fee3cb589f0c599313aba35f8b960", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -72,7 +72,7 @@ tree_int_to_gmp (tree t, mpz_t res)\n static isl_id *\n isl_id_for_pbb (scop_p s, poly_bb_p pbb)\n {\n-  char name[10];\n+  char name[14];\n   snprintf (name, sizeof (name), \"S_%d\", pbb_index (pbb));\n   return isl_id_alloc (s->isl_context, name, pbb);\n }\n@@ -271,7 +271,7 @@ extract_affine_mul (scop_p s, tree e, __isl_take isl_space *space)\n static isl_id *\n isl_id_for_ssa_name (scop_p s, tree e)\n {\n-  char name1[10];\n+  char name1[14];\n   snprintf (name1, sizeof (name1), \"P_%d\", SSA_NAME_VERSION (e));\n   return isl_id_alloc (s->isl_context, name1, e);\n }"}, {"sha": "fc3873578f686f1aeeaa60280001af36306d3924", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -1,3 +1,12 @@\n+2017-01-08  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/77708\n+\t* gcc.dg/tree-ssa/builtin-snprintf-warn-1.c: New test.\n+\t* gcc.dg/tree-ssa/builtin-snprintf-warn-2.c: New test.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-6.c: XFAIL test cases failing\n+\tdue to bug 78969.\n+\t* gcc.dg/format/pr78569.c: Adjust.\n+\n 2017-01-07  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/72803"}, {"sha": "c2b239b579b14486a1d99e6b7e35718c6a2b2f0a", "filename": "gcc/testsuite/gcc.dg/format/pr78569.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78569.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78569.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78569.c?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Wformat-length\" } */\n+/* { dg-options \"-Wformat-truncation\" } */\n \n /* A run of blank lines, so that we would fail the assertion in input.c:1388:\n    gcc_assert (line_width >= (start.column - 1 + literal_length));  */"}, {"sha": "cc226caad5f888c2cbfaa76cdbe20238a0622b01", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-warn-1.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-1.c?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wformat -Wformat-truncation=1 -ftrack-macro-expansion=0\" } */\n+\n+typedef struct\n+{\n+  char a0[0];\n+  char a1[1];\n+  char a2[2];\n+  char a3[3];\n+  char a4[4];\n+  char ax[];\n+} Arrays;\n+\n+char buffer[1024];\n+#define buffer(size) (buffer + sizeof buffer - size)\n+\n+int value_range (int min, int max)\n+{\n+  extern int value (void);\n+  int val = value ();\n+  return val < min || max < val ? min : val;\n+}\n+\n+#define R(min, max)  value_range (min, max)\n+\n+/* Verify that calls to snprintf whose return value is unused are\n+   diagnosed if certain or possible truncation is detected.  */\n+\n+#define T(size, ...) \\\n+  __builtin_snprintf (buffer (size), size, __VA_ARGS__)\n+\n+void test_int_retval_unused (void)\n+{\n+  T (2, \"%i\", 123);          /* { dg-warning \"output truncated\" } */\n+  T (2, \"%i\", R (1, 99));    /* { dg-warning \"output may be truncated\" } */\n+  T (2, \"%i\", R (10, 99));   /* { dg-warning \"output truncated\" } */\n+  T (3, \"%i%i\", R (1, 99), R (1, 99));   /* { dg-warning \"output may be truncated\" } */\n+}\n+\n+void test_string_retval_unused (const Arrays *ar)\n+{\n+  T (1, \"%-s\", ar->a0);\n+  T (1, \"%-s\", ar->a1);\n+  T (1, \"%-s\", ar->a2);   /* { dg-warning \"output may be truncated\" } */\n+}\n+\n+\n+/* Verify that calls to snprintf whose return value is used are\n+   diagnosed only if certain truncation is detected but not when\n+   truncation is only possible but not certain.  */\n+\n+volatile int retval;\n+\n+#undef T\n+#define T(size, ...) \\\n+  retval = __builtin_snprintf (buffer (size), size, __VA_ARGS__)\n+\n+void test_int_retval_used (void)\n+{\n+  T (2, \"%i\", 123);          /* { dg-warning \"output truncated\" } */\n+  T (2, \"%i\", R (1, 99));\n+  T (2, \"%i\", R (10, 99));   /* { dg-warning \"output truncated\" } */\n+  T (3, \"%i%i\", R (1, 99), R (1, 99));\n+}\n+\n+void test_string_retval_used (const Arrays *ar)\n+{\n+  T (1, \"%-s\", ar->a0);\n+  T (1, \"%-s\", ar->a1);\n+  T (1, \"%-s\", ar->a2);\n+  T (1, \"%-s\", ar->a4);\n+  T (1, \"%-s\", \"123\");   /* { dg-warning \"output truncated\" } */\n+}"}, {"sha": "93c9f1bebfe3e87839ed706e8d4e19da7b2bedfc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-warn-2.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-2.c?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wformat -Wformat-truncation=2 -ftrack-macro-expansion=0\" } */\n+\n+typedef struct\n+{\n+  char a0[0];\n+  char a1[1];\n+  char a2[2];\n+  char a3[3];\n+  char a4[4];\n+  char ax[];\n+} Arrays;\n+\n+char buffer[1024];\n+#define buffer(size) (buffer + sizeof buffer - size)\n+\n+int value_range (int min, int max)\n+{\n+  extern int value (void);\n+  int val = value ();\n+  return val < min || max < val ? min : val;\n+}\n+\n+#define R(min, max)  value_range (min, max)\n+\n+/* Verify that calls to snprintf whose return value is unused are\n+   diagnosed if certain or possible truncation is detected.  */\n+\n+#define T(size, ...) \\\n+  __builtin_snprintf (buffer (size), size, __VA_ARGS__)\n+\n+void test_int_retval_unused (void)\n+{\n+  T (2, \"%i\", 123);          /* { dg-warning \"output truncated\" } */\n+  T (2, \"%i\", R (1, 99));    /* { dg-warning \"output may be truncated\" } */\n+  T (2, \"%i\", R (10, 99));   /* { dg-warning \"output truncated\" } */\n+  T (3, \"%i%i\", R (1, 99), R (1, 99));   /* { dg-warning \"output may be truncated\" } */\n+}\n+\n+void test_string_retval_unused (const Arrays *ar)\n+{\n+  T (1, \"%-s\", ar->a0);\n+  T (1, \"%-s\", ar->a1);\n+  T (1, \"%-s\", ar->a2);   /* { dg-warning \"output may be truncated\" } */\n+}\n+\n+\n+/* Verify that (at -Wformat-trunc=2) calls to snprintf whose return value\n+   is used are diagnosed the same way as those whose value is unused.  */\n+\n+volatile int retval;\n+\n+#undef T\n+#define T(size, ...) \\\n+  retval = __builtin_snprintf (buffer (size), size, __VA_ARGS__)\n+\n+void test_int_retval_used (void)\n+{\n+  T (2, \"%i\", 123);          /* { dg-warning \"output truncated\" } */\n+  T (2, \"%i\", R (1, 99));    /* { dg-warning \"output may be truncated\" } */\n+  T (2, \"%i\", R (10, 99));   /* { dg-warning \"output truncated\" } */\n+  T (3, \"%i%i\", R (1, 99), R (1, 99));   /* { dg-warning \"output may be truncated\" } */\n+}\n+\n+void test_string_retval_used (const Arrays *ar)\n+{\n+  T (1, \"%-s\", ar->a0);\n+  T (1, \"%-s\", ar->a1);\n+  T (1, \"%-s\", ar->a2);   /* { dg-warning \"output may be truncated\" } */\n+}"}, {"sha": "93c53a409fc0c95518e97c5651c4c91b7bdc79bf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-6.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-6.c?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -51,7 +51,8 @@ void fuint (unsigned j, char *p)\n {\n   if (j > 999)\n     return;\n-  snprintf (p, 4, \"%3u\", j);\n+\n+  snprintf (p, 4, \"%3u\", j);   /* { dg-bogus \"may be truncated\" \"unsigned int\" { xfail *-*-* } } */\n }\n \n void fint (int j, char *p)\n@@ -61,17 +62,15 @@ void fint (int j, char *p)\n   if (k > 999)\n     return;\n \n-  /* Range info isn't available here.  */\n-  snprintf (p, 4, \"%3u\", k);\n+  snprintf (p, 4, \"%3u\", k);   /* { dg-bogus \"may be truncated\" \"signed int\" { xfail *-*-* } } */\n }\n \n void fulong (unsigned long j, char *p)\n {\n   if (j > 999)\n     return;\n \n-  /* Range info isn't available here.  */\n-  snprintf (p, 4, \"%3lu\", j);\n+  snprintf (p, 4, \"%3lu\", j);   /* { dg-bogus \"may be truncated\" \"unsigned long\" { xfail *-*-* } } */\n }\n \n void flong (long j, char *p)\n@@ -81,27 +80,25 @@ void flong (long j, char *p)\n   if (k > 999)\n     return;\n \n-  /* Range info isn't available here.  */\n-  snprintf (p, 4, \"%3lu\", k);\n+  snprintf (p, 4, \"%3lu\", k);   /* { dg-bogus \"may be truncated\" \"signed long\" { xfail *-*-* } } */\n }\n \n void fullong (unsigned long long j, char *p)\n {\n   if (j > 999)\n     return;\n \n-  /* Range info isn't available here.  */\n-  snprintf (p, 4, \"%3llu\", j);\n+  snprintf (p, 4, \"%3llu\", j);   /* { dg-bogus \"may be truncated\" \"signed long\" { xfail *-*-* } } */\n }\n \n-void fllong (long j, char *p)\n+void fllong (long long j, char *p)\n {\n   const unsigned long long k = (unsigned long long) j;\n \n   if (k > 999)\n     return;\n \n-  snprintf (p, 4, \"%3llu\", k);\n+  snprintf (p, 4, \"%3llu\", k);   /* { dg-bogus \"may be truncated\" \"unsigned long long\" { xfail *-*-* } } */\n }\n \n /* { dg-final { scan-tree-dump-not \"abort\" \"optimized\" } } */"}, {"sha": "7c030fa85a4ac2872cfb71ff4d0570106858c8aa", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=efcc8d387f52f995a6e41bc78a76cc77e4bb6ee8", "patch": "@@ -9746,10 +9746,10 @@ get_file_function_name (const char *type)\n \tfile = LOCATION_FILE (input_location);\n \n       len = strlen (file);\n-      q = (char *) alloca (9 + 17 + len + 1);\n+      q = (char *) alloca (9 + 19 + len + 1);\n       memcpy (q, file, len + 1);\n \n-      snprintf (q + len, 9 + 17 + 1, \"_%08X_\" HOST_WIDE_INT_PRINT_HEX, \n+      snprintf (q + len, 9 + 19 + 1, \"_%08X_\" HOST_WIDE_INT_PRINT_HEX,\n \t\tcrc32_string (0, name), get_random_seed (false));\n \n       p = q;"}]}