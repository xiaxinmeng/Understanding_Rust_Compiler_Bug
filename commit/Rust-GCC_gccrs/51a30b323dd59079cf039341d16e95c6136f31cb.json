{"sha": "51a30b323dd59079cf039341d16e95c6136f31cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFhMzBiMzIzZGQ1OTA3OWNmMDM5MzQxZDE2ZTk1YzYxMzZmMzFjYg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-04-08T21:46:08Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-04-08T21:46:08Z"}, "message": "re PR fortran/48448 (Implement -f(no-)frontend-optimization)\n\n2011-04-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/48448\n\t* gfortran.h (gfc_option_t):  Add warn_function_elimination and\n\tflag_frontend_optimize.\n\t* lang.opt (Wfunction-elimination):  Add.\n\t(ffrontend-optimize):  Add.\n\t* invoke.texi:  Add documentation for -Wfunction-elimination\n\tand -ffrontend-optimize.  Add -faggressive-function-elimination\n\tto list of code generation options.\n\t* frontend-passes.c (gfc_run_passes):  Run optimizations if\n\tflag_frontend_optimize is set.\n\t(warn_function_elimination):  New function.\n\t(cfe_expr_0):  Call it if requested to do so.\n\t* options.c (gfc_init_options):  Initiate warn_function_elimination\n\tand flag_frontend_optimize.\n\t(gfc_post_options):  Set flag_frontend_optimize if not specified\n\tby user, depending on the optimization level.\n\t(gfc_handle_option):  Handle -Wfunction-elimination and\n\t-ffrontend-optimize.\n\n2011-04-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/48448\n\t* gfortran.dg/function_optimize_5.f90:  New test.\n\nFrom-SVN: r172215", "tree": {"sha": "dead53cd1d4f1c204f3597d9701bfc77638335b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dead53cd1d4f1c204f3597d9701bfc77638335b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51a30b323dd59079cf039341d16e95c6136f31cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a30b323dd59079cf039341d16e95c6136f31cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a30b323dd59079cf039341d16e95c6136f31cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a30b323dd59079cf039341d16e95c6136f31cb/comments", "author": null, "committer": null, "parents": [{"sha": "041e059f264744313dc38f2223098409f8d86c29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041e059f264744313dc38f2223098409f8d86c29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/041e059f264744313dc38f2223098409f8d86c29"}], "stats": {"total": 141, "additions": 136, "deletions": 5}, "files": [{"sha": "0a4872c55c0f393841c2c0ea8a7d95290548204f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=51a30b323dd59079cf039341d16e95c6136f31cb", "patch": "@@ -1,3 +1,24 @@\n+2011-04-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/48448\n+\t* gfortran.h (gfc_option_t):  Add warn_function_elimination and\n+\tflag_frontend_optimize.\n+\t* lang.opt (Wfunction-elimination):  Add.\n+\t(ffrontend-optimize):  Add.\n+\t* invoke.texi:  Add documentation for -Wfunction-elimination\n+\tand -ffrontend-optimize.  Add -faggressive-function-elimination\n+\tto list of code generation options.\n+\t* frontend-passes.c (gfc_run_passes):  Run optimizations if\n+\tflag_frontend_optimize is set.\n+\t(warn_function_elimination):  New function.\n+\t(cfe_expr_0):  Call it if requested to do so.\n+\t* options.c (gfc_init_options):  Initiate warn_function_elimination\n+\tand flag_frontend_optimize.\n+\t(gfc_post_options):  Set flag_frontend_optimize if not specified\n+\tby user, depending on the optimization level.\n+\t(gfc_handle_option):  Handle -Wfunction-elimination and\n+\t-ffrontend-optimize.\n+\n 2011-04-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "cabfd28558650953e5a08dee9d1218a7afe6ed0f", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=51a30b323dd59079cf039341d16e95c6136f31cb", "patch": "@@ -62,7 +62,7 @@ gfc_namespace *current_ns;\n void\n gfc_run_passes (gfc_namespace *ns)\n {\n-  if (optimize)\n+  if (gfc_option.flag_frontend_optimize)\n     {\n       expr_size = 20;\n       expr_array = XNEWVEC(gfc_expr **, expr_size);\n@@ -283,6 +283,20 @@ create_var (gfc_expr * e)\n   return result;\n }\n \n+/* Warn about function elimination.  */\n+\n+static void\n+warn_function_elimination (gfc_expr *e)\n+{\n+  if (e->expr_type != EXPR_FUNCTION)\n+    return;\n+  if (e->value.function.esym)\n+    gfc_warning (\"Removing call to function '%s' at %L\",\n+\t\t e->value.function.esym->name, &(e->where));\n+  else if (e->value.function.isym)\n+    gfc_warning (\"Removing call to function '%s' at %L\",\n+\t\t e->value.function.isym->name, &(e->where));\n+}\n /* Callback function for the code walker for doing common function\n    elimination.  This builds up the list of functions in the expression\n    and goes through them to detect duplicates, which it then replaces\n@@ -315,6 +329,10 @@ cfe_expr_0 (gfc_expr **e, int *walk_subtrees,\n \t    {\n \t      if (newvar == NULL)\n \t\tnewvar = create_var (*(expr_array[i]));\n+\n+\t      if (gfc_option.warn_function_elimination)\n+\t\twarn_function_elimination (*(expr_array[j]));\n+\n \t      gfc_free (*(expr_array[j]));\n \t      *(expr_array[j]) = gfc_copy_expr (newvar);\n \t    }"}, {"sha": "73c39669c4ca3bc8e42c7a9e5193fde6130bbdf1", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=51a30b323dd59079cf039341d16e95c6136f31cb", "patch": "@@ -2180,6 +2180,7 @@ typedef struct\n   int warn_ampersand;\n   int gfc_warn_conversion;\n   int warn_conversion_extra;\n+  int warn_function_elimination;\n   int warn_implicit_interface;\n   int warn_implicit_procedure;\n   int warn_line_truncation;\n@@ -2234,6 +2235,7 @@ typedef struct\n   int flag_protect_parens;\n   int flag_realloc_lhs;\n   int flag_aggressive_function_elimination;\n+  int flag_frontend_optimize;\n \n   int fpe;\n   int rtcheck;"}, {"sha": "96beff58215bb9dfb5b434fb12d945d7d6403207", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=51a30b323dd59079cf039341d16e95c6136f31cb", "patch": "@@ -139,7 +139,7 @@ and warnings}.\n -Wall  -Waliasing  -Wampersand  -Warray-bounds -Wcharacter-truncation @gol\n -Wconversion -Wimplicit-interface  -Wimplicit-procedure  -Wline-truncation @gol\n -Wintrinsics-std  -Wsurprising  -Wno-tabs  -Wunderflow  -Wunused-parameter @gol\n--Wintrinsic-shadow  -Wno-align-commons}\n+-Wintrinsic-shadow  -Wno-align-commons -Wfunction-elimination}\n \n @item Debugging Options\n @xref{Debugging Options,,Options for debugging your program or GNU Fortran}.\n@@ -171,7 +171,8 @@ and warnings}.\n -fblas-matmul-limit=@var{n} -frecursive -finit-local-zero @gol\n -finit-integer=@var{n} -finit-real=@var{<zero|inf|-inf|nan|snan>} @gol\n -finit-logical=@var{<true|false>} -finit-character=@var{n} @gol\n--fno-align-commons -fno-protect-parens -frealloc-lhs}\n+-fno-align-commons -fno-protect-parens -frealloc-lhs @gol\n+-faggressive-function-elimination -ffrontend-optimize}\n @end table\n \n @menu\n@@ -859,6 +860,14 @@ By default, @command{gfortran} warns about any occasion of variables being\n padded for proper alignment inside a @code{COMMON} block. This warning can be turned\n off via @option{-Wno-align-commons}. See also @option{-falign-commons}.\n \n+@item -Wfunction-elimination\n+@opindex @code{Wfunction-elimination}\n+@cindex function elimination\n+@cindex warnings, function elimination\n+Warn if any calls to functions are eliminated by the optimizations\n+enabled by the @option{-ffrontend-optimize} option.\n+\n+\n @item -Werror\n @opindex @code{Werror}\n @cindex warnings, to errors\n@@ -1482,8 +1491,19 @@ statements, regardless of whether these functions are marked\n @smallexample\n   a = f(b,c) + f(b,c)\n @end smallexample\n-there will only be a single call to @code{f}.\n-\n+there will only be a single call to @code{f}.  This option only works\n+if @option{-ffrontend-optimize} is in effect.\n+\n+@item -ffrontend-optimize\n+@opindex @code{frontend-optimize}\n+@cindex Front-end optimization\n+This option performs front-end optimization, based on manipulating\n+parts the Fortran parse tree.  Enabled by default by any @option{-O}\n+option.  Optimizations enabled by this option include elimination of\n+identical function calls within expressions, removing unnecessary\n+calls to @code{TRIM} in comparisons and assignments and replacing\n+@code{TRIM(a)} with @code{a(1:LEN_TRIM(a))}. \n+It can be deselected by specifying @option{-fno-frontend-optimize}.\n @end table\n \n @xref{Code Gen Options,,Options for Code Generation Conventions,"}, {"sha": "adc6dce6d1e4e8f50ff900348f324500c5d5b251", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=51a30b323dd59079cf039341d16e95c6136f31cb", "patch": "@@ -222,6 +222,10 @@ Wconversion-extra\n Fortran Warning\n Warn about most implicit conversions\n \n+Wfunction-elimination\n+Fortran Warning\n+Warn about function call elimination\n+\n Wimplicit-interface\n Fortran Warning\n Warn about calls with implicit interface\n@@ -414,6 +418,10 @@ ffree-line-length-\n Fortran RejectNegative Joined UInteger\n -ffree-line-length-<n>\tUse n as character line width in free mode\n \n+ffrontend-optimize\n+Fortran\n+Enable front end optimization\n+\n fimplicit-none\n Fortran\n Specify that no implicit typing is allowed, unless overridden by explicit IMPLICIT statements"}, {"sha": "008346056a74aa9bf5a0adf7b3c6ea77d845f0eb", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=51a30b323dd59079cf039341d16e95c6136f31cb", "patch": "@@ -99,6 +99,7 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.warn_array_temp = 0;\n   gfc_option.gfc_warn_conversion = 0;\n   gfc_option.warn_conversion_extra = 0;\n+  gfc_option.warn_function_elimination = 0;\n   gfc_option.warn_implicit_interface = 0;\n   gfc_option.warn_line_truncation = 0;\n   gfc_option.warn_surprising = 0;\n@@ -151,6 +152,7 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.flag_protect_parens = 1;\n   gfc_option.flag_realloc_lhs = -1;\n   gfc_option.flag_aggressive_function_elimination = 0;\n+  gfc_option.flag_frontend_optimize = -1;\n   \n   gfc_option.fpe = 0;\n   gfc_option.rtcheck = 0;\n@@ -418,6 +420,12 @@ gfc_post_options (const char **pfilename)\n   if (pedantic && gfc_option.flag_whole_file)\n     gfc_option.flag_whole_file = 2;\n \n+  /* Optimization implies front end optimization, unless the user\n+     specified it directly.  */\n+\n+  if (gfc_option.flag_frontend_optimize == -1)\n+    gfc_option.flag_frontend_optimize = optimize;\n+\n   gfc_cpp_post_options ();\n \n /* FIXME: return gfc_cpp_preprocess_only ();\n@@ -610,6 +618,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_conversion_extra = value;\n       break;\n \n+    case OPT_Wfunction_elimination:\n+      gfc_option.warn_function_elimination = value;\n+      break;\n+\n     case OPT_Wimplicit_interface:\n       gfc_option.warn_implicit_interface = value;\n       break;\n@@ -979,6 +991,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.flag_aggressive_function_elimination = value;\n       break;\n \n+    case OPT_ffrontend_optimize:\n+      gfc_option.flag_frontend_optimize = value;\n+      break;\n+\n     case OPT_fprotect_parens:\n       gfc_option.flag_protect_parens = value;\n       break;"}, {"sha": "4ba7d150c6c589cca56f68c8b9ac39e313dab328", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51a30b323dd59079cf039341d16e95c6136f31cb", "patch": "@@ -1,3 +1,8 @@\n+2011-04-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/48448\n+\t* gfortran.dg/function_optimize_5.f90:  New test.\n+\n 2011-04-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/aggr17.adb: New test."}, {"sha": "427b12684dc87914d1531ef952dd73618409489a", "filename": "gcc/testsuite/gfortran.dg/function_optimize_5.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a30b323dd59079cf039341d16e95c6136f31cb/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_5.f90?ref=51a30b323dd59079cf039341d16e95c6136f31cb", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do compile }\n+! { dg-options \"-ffrontend-optimize -Wfunction-elimination\" }\n+! Check the -ffrontend-optimize (in the absence of -O) and\n+! -Wfunction-elimination options.\n+program main\n+  implicit none\n+  real, dimension(2,2) :: a, b, c, d\n+  integer :: i\n+  real :: x, z\n+  character(60) :: line\n+  real, external :: ext_func\n+  interface\n+     elemental function element(x)\n+       real, intent(in) :: x\n+       real :: elem\n+     end function element\n+     pure function mypure(x)\n+       real, intent(in) :: x\n+       integer :: mypure\n+     end function mypure\n+     elemental impure function elem_impure(x)\n+       real, intent(in) :: x\n+       real :: elem_impure\n+     end function elem_impure\n+  end interface\n+\n+  data a /2., 3., 5., 7./\n+  data b /11., 13., 17., 23./\n+  write (unit=line, fmt='(4F7.2)') matmul(a,b)  & ! { dg-warning \"Removing call to function 'matmul'\" } \n+       & + matmul(a,b)\n+  z = sin(x) + 2.0 + sin(x)  ! { dg-warning \"Removing call to function 'sin'\" }\n+  print *,z\n+  x = ext_func(a) + 23 + ext_func(a)\n+  print *,d,x\n+  z = element(x) + element(x) ! { dg-warning \"Removing call to function 'element'\" }\n+  print *,z\n+  i = mypure(x) - mypure(x) ! { dg-warning \"Removing call to function 'mypure'\" }\n+  print *,i\n+  z = elem_impure(x) - elem_impure(x)\n+  print *,z\n+end program main"}]}