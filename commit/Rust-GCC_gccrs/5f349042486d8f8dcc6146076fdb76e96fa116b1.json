{"sha": "5f349042486d8f8dcc6146076fdb76e96fa116b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzNDkwNDI0ODZkOGY4ZGNjNjE0NjA3NmZkYjc2ZTk2ZmExMTZiMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-22T17:27:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-22T17:27:57Z"}, "message": "[multiple changes]\n\n\n2000-06-22  Anthony Williams  <anthony@anthonyw.cjb.net>\n\n\t* testsuite/21_strings/find.cc: Patch.\n\n2000-06-22  Benjamin Kosnik  <bkoz@soma.redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_CHEC_LINKER_FEATURES): Use gcc + -x c++ as\n\tan easy way to get at g++ without having to link in libstdc++.\n\nFrom-SVN: r34649", "tree": {"sha": "26798198f7b204c3c1ff2ba26fd699e18cf3d055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26798198f7b204c3c1ff2ba26fd699e18cf3d055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f349042486d8f8dcc6146076fdb76e96fa116b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f349042486d8f8dcc6146076fdb76e96fa116b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f349042486d8f8dcc6146076fdb76e96fa116b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f349042486d8f8dcc6146076fdb76e96fa116b1/comments", "author": null, "committer": null, "parents": [{"sha": "568037521033909f571099f62397926b7424b0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568037521033909f571099f62397926b7424b0ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568037521033909f571099f62397926b7424b0ac"}], "stats": {"total": 2104, "additions": 1047, "deletions": 1057}, "files": [{"sha": "f382a5f95b27096ca38a33faed0c3ae72d1a33ed", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f349042486d8f8dcc6146076fdb76e96fa116b1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f349042486d8f8dcc6146076fdb76e96fa116b1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5f349042486d8f8dcc6146076fdb76e96fa116b1", "patch": "@@ -1,3 +1,12 @@\n+2000-06-22  Anthony Williams  <anthony@anthonyw.cjb.net>\n+\n+\t* testsuite/21_strings/find.cc: Patch.\n+\n+2000-06-22  Benjamin Kosnik  <bkoz@soma.redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHEC_LINKER_FEATURES): Use gcc + -x c++ as\n+\tan easy way to get at g++ without having to link in libstdc++.\n+\n 2000-06-21  Benjamin Kosnik  <bkoz@soma.redhat.com>\n \n \tFix alpha, powerpc build failures."}, {"sha": "565ae4c9b63516322312cb13956c1cdacbef3e81", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f349042486d8f8dcc6146076fdb76e96fa116b1/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f349042486d8f8dcc6146076fdb76e96fa116b1/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=5f349042486d8f8dcc6146076fdb76e96fa116b1", "patch": "@@ -255,34 +255,32 @@ dnl Define SECTION_LDFLAGS='-Wl,--gc-sections' if possible\n dnl GLIBCPP_CHECK_LINKER_FEATURES\n AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   # All these tests are for C++; save the language and the compiler flags.\n-  # The CXXFLAGS thing is suspicious, but based on similar bits \n-  # found in GLIBCPP_CONFIGURE.\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n+  # Need to do this so that g++ won't try to link in libstdc++\n+  ac_test_CFLAGS=\"${CFLAGS+set}\"\n+  ac_save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS='-x c++  -Wl,--gc-sections'\n \n   # Check for -Wl,--gc-sections\n   AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n-  CXXFLAGS='-Wl,--gc-sections'\n   AC_TRY_RUN([\n-   int main() \n+   int main(void) \n    {\n      try { throw 1; }\n      catch (...) { };\n      return 0;\n    }\n   ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n-  if test \"$ac_test_CXXFLAGS\" = set; then\n-    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  if test \"$ac_test_CFLAGS\" = set; then\n+    CFLAGS=\"$ac_save_CFLAGS\"\n   else\n     # this is the suspicious part\n-    CXXFLAGS=''\n+    CFLAGS=''\n   fi\n   if test \"$ac_sectionLDflags\" = \"yes\"; then\n     SECTION_LDFLAGS='-Wl,--gc-sections'\n   fi\n   AC_MSG_RESULT($ac_sectionLDflags)\n \n-  AC_LANG_RESTORE\n   AC_SUBST(SECTION_LDFLAGS)\n ])\n "}, {"sha": "8d743fe7e01281de043a033db8f5ad044d008b2c", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f349042486d8f8dcc6146076fdb76e96fa116b1/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f349042486d8f8dcc6146076fdb76e96fa116b1/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=5f349042486d8f8dcc6146076fdb76e96fa116b1", "patch": "@@ -267,34 +267,32 @@ dnl Define SECTION_LDFLAGS='-Wl,--gc-sections' if possible\n dnl GLIBCPP_CHECK_LINKER_FEATURES\n AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   # All these tests are for C++; save the language and the compiler flags.\n-  # The CXXFLAGS thing is suspicious, but based on similar bits \n-  # found in GLIBCPP_CONFIGURE.\n-  AC_LANG_SAVE\n-  AC_LANG_CPLUSPLUS\n+  # Need to do this so that g++ won't try to link in libstdc++\n+  ac_test_CFLAGS=\"${CFLAGS+set}\"\n+  ac_save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS='-x c++  -Wl,--gc-sections'\n \n   # Check for -Wl,--gc-sections\n   AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n-  CXXFLAGS='-Wl,--gc-sections'\n   AC_TRY_RUN([\n-   int main() \n+   int main(void) \n    {\n      try { throw 1; }\n      catch (...) { };\n      return 0;\n    }\n   ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n-  if test \"$ac_test_CXXFLAGS\" = set; then\n-    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  if test \"$ac_test_CFLAGS\" = set; then\n+    CFLAGS=\"$ac_save_CFLAGS\"\n   else\n     # this is the suspicious part\n-    CXXFLAGS=''\n+    CFLAGS=''\n   fi\n   if test \"$ac_sectionLDflags\" = \"yes\"; then\n     SECTION_LDFLAGS='-Wl,--gc-sections'\n   fi\n   AC_MSG_RESULT($ac_sectionLDflags)\n \n-  AC_LANG_RESTORE\n   AC_SUBST(SECTION_LDFLAGS)\n ])\n "}, {"sha": "d6776971696f39b482ed68834accef0dc4bd0a68", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1019, "deletions": 1036, "changes": 2055, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f349042486d8f8dcc6146076fdb76e96fa116b1/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f349042486d8f8dcc6146076fdb76e96fa116b1/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5f349042486d8f8dcc6146076fdb76e96fa116b1"}, {"sha": "1d63ac515b3297efdecf843a7258a303f415392c", "filename": "libstdc++-v3/testsuite/21_strings/find.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f349042486d8f8dcc6146076fdb76e96fa116b1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Ffind.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f349042486d8f8dcc6146076fdb76e96fa116b1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Ffind.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Ffind.cc?ref=5f349042486d8f8dcc6146076fdb76e96fa116b1", "patch": "@@ -65,6 +65,8 @@ bool test01(void)\n   csz01 = str01.find(str04, 5);\n   test &= csz01 == 5;\n   csz01 = str01.find(str04, str01.size());\n+  test &= csz01 == str01.size(); \n+  csz01 = str01.find(str04, str01.size()+1);\n   test &= csz01 == npos; \n   \n   // size_type find(const char* s, size_type pos, size_type n) const;\n@@ -77,7 +79,7 @@ bool test01(void)\n   csz01 = str01.find(str_lit01);\n   test &= csz01 == 0;\n   csz01 = str01.find(str_lit01, 3);\n-  test &= csz01 == 3; // zero length string should be found at pos\n+  test &= csz01 == npos;\n \n   // size_type find(char c, size_type pos = 0) const;\n   csz01 = str01.find('z');"}]}