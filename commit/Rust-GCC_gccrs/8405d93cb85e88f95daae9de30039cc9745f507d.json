{"sha": "8405d93cb85e88f95daae9de30039cc9745f507d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQwNWQ5M2NiODVlODhmOTVkYWFlOWRlMzAwMzljYzk3NDVmNTA3ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:41:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-04-06T09:41:46Z"}, "message": "gnatvsn.ads, [...] (Get_Gnat_build_Type): Renamed Build_Type and made constant.\n\n2007-04-06  Arnaud Charlet  <charlet@adacore.com>\n\t    Eric Botcazou <botcazou@adacore.com>\n\n\t* gnatvsn.ads, comperr.adb (Get_Gnat_build_Type): Renamed Build_Type\n\tand made constant.\n\n\t* comperr.ads, comperr.adb (Compiler_Abort): Add third parameter\n\tFallback_Loc. Use it as the sloc info when Current_Error_Node doesn't\n\tcarry any.\n\n\t* fe.h (Compiler_Abort): Add third parameter.\n\n\t* misc.c (internal_error_function): Build third argument from current\n\tinput location and pass it to Compiler_Abort.\n\nFrom-SVN: r123610", "tree": {"sha": "c6f6dd10e9c3e6978354a61ce48fdb5c9e6a3be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6f6dd10e9c3e6978354a61ce48fdb5c9e6a3be9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8405d93cb85e88f95daae9de30039cc9745f507d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8405d93cb85e88f95daae9de30039cc9745f507d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8405d93cb85e88f95daae9de30039cc9745f507d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8405d93cb85e88f95daae9de30039cc9745f507d/comments", "author": null, "committer": null, "parents": [{"sha": "737053d61e42154666df468ddc9caacfd173eaab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737053d61e42154666df468ddc9caacfd173eaab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737053d61e42154666df468ddc9caacfd173eaab"}], "stats": {"total": 98, "additions": 58, "deletions": 40}, "files": [{"sha": "e8a502c3fe72a20b3626771b8e99e7235f7fc44a", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8405d93cb85e88f95daae9de30039cc9745f507d/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8405d93cb85e88f95daae9de30039cc9745f507d/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=8405d93cb85e88f95daae9de30039cc9745f507d", "patch": "@@ -71,8 +71,9 @@ package body Comperr is\n    --------------------\n \n    procedure Compiler_Abort\n-     (X    : String;\n-      Code : Integer := 0)\n+     (X            : String;\n+      Code         : Integer := 0;\n+      Fallback_Loc : String := \"\")\n    is\n       --  The procedures below output a \"bug box\" with information about\n       --  the cause of the compiler abort and about the preferred method\n@@ -96,8 +97,8 @@ package body Comperr is\n          Write_Eol;\n       end End_Line;\n \n-      Is_GPL_Version : constant Boolean := Get_Gnat_Build_Type = GPL;\n-      Is_FSF_Version : constant Boolean := Get_Gnat_Build_Type = FSF;\n+      Is_GPL_Version : constant Boolean := Gnatvsn.Build_Type = GPL;\n+      Is_FSF_Version : constant Boolean := Gnatvsn.Build_Type = FSF;\n \n    --  Start of processing for Compiler_Abort\n \n@@ -213,10 +214,14 @@ package body Comperr is\n \n          --  Output source location information\n \n-         if Sloc (Current_Error_Node) <= Standard_Location\n-           or else Sloc (Current_Error_Node) = No_Location\n-         then\n-            Write_Str (\"| No source file position information available\");\n+         if Sloc (Current_Error_Node) <= No_Location then\n+            if Fallback_Loc'Length > 0 then\n+               Write_Str (\"| Error detected around \");\n+               Write_Str (Fallback_Loc);\n+            else\n+               Write_Str (\"| No source file position information available\");\n+            end if;\n+\n             End_Line;\n          else\n             Write_Str (\"| Error detected at \");"}, {"sha": "04917f2ffef0d26d64357fa46b4fa7ade3117470", "filename": "gcc/ada/comperr.ads", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8405d93cb85e88f95daae9de30039cc9745f507d/gcc%2Fada%2Fcomperr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8405d93cb85e88f95daae9de30039cc9745f507d/gcc%2Fada%2Fcomperr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.ads?ref=8405d93cb85e88f95daae9de30039cc9745f507d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,14 +31,18 @@\n package Comperr is\n \n    procedure Compiler_Abort\n-     (X    : String;\n-      Code : Integer := 0);\n-   --  Signals an internal compiler error. Never returns control. Depending\n-   --  on processing may end up raising Unrecoverable_Error, or exiting\n-   --  directly. The message output is a \"bug box\" containing the\n-   --  string passed as an argument. The node in Current_Error_Node is used\n-   --  to provide the location where the error should be signalled. The\n-   --  message includes the node id, and the code parameter if it is positive.\n+     (X            : String;\n+      Code         : Integer := 0;\n+      Fallback_Loc : String := \"\");\n+   --  Signals an internal compiler error. Never returns control. Depending on\n+   --  processing may end up raising Unrecoverable_Error, or exiting directly.\n+   --  The message output is a \"bug box\" containing the first string passed as\n+   --  an argument. The Sloc field of the node in Current_Error_Node is used to\n+   --  provide the location where the error should be signalled. If this Sloc\n+   --  value is set to No_Location or any of the other special location values,\n+   --  then the Fallback_Loc argument string is used instead. The message text\n+   --  includes the node id, and the code parameter if it is positive.\n+   --\n    --  Note that this is only used at the outer level (to handle constraint\n    --  errors or assert errors etc.) In the normal logic of the compiler we\n    --  always use pragma Assert to check for errors, and if necessary an\n@@ -64,10 +68,10 @@ package Comperr is\n    --  Most typically this file, if present, will be in the directory\n    --  containing the run-time sources.\n \n-   --  If this file is present, then it is a plain ASCII file, whose\n-   --  contents replace the remaining text. The lines in this file should be\n-   --  72 characters or less to avoid misformatting the right boundary of the\n-   --  box. Note that the file does not contain the vertical bar characters or\n-   --  any leading spaces in lines.\n+   --  If this file is present, then it is a plain ASCII file, whose contents\n+   --  replace the remaining text. The lines in this file should be seventy-two\n+   --  characters or less to avoid misformatting the right boundary of the box.\n+   --  Note that the file does not contain the vertical bar characters or any\n+   --  leading spaces in lines.\n \n end Comperr;"}, {"sha": "f734d069a09995e53989a79a5465bb29f5aa5429", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8405d93cb85e88f95daae9de30039cc9745f507d/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8405d93cb85e88f95daae9de30039cc9745f507d/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=8405d93cb85e88f95daae9de30039cc9745f507d", "patch": "@@ -36,7 +36,7 @@\n /* comperr:  */\n \n #define Compiler_Abort comperr__compiler_abort\n-extern int Compiler_Abort (Fat_Pointer, int) ATTRIBUTE_NORETURN;\n+extern int Compiler_Abort (Fat_Pointer, int, Fat_Pointer) ATTRIBUTE_NORETURN;\n \n /* csets: */\n "}, {"sha": "2cfa3b09146ebac3b2b65b5b6641593d4a130178", "filename": "gcc/ada/gnatvsn.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8405d93cb85e88f95daae9de30039cc9745f507d/gcc%2Fada%2Fgnatvsn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8405d93cb85e88f95daae9de30039cc9745f507d/gcc%2Fada%2Fgnatvsn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatvsn.ads?ref=8405d93cb85e88f95daae9de30039cc9745f507d", "patch": "@@ -46,10 +46,10 @@ package Gnatvsn is\n    --  to e.g. pragma Ident.\n \n    type Gnat_Build_Type is (FSF, GPL);\n-   --  See Get_Gnat_Build_Type below for the meaning of these values.\n+   --  See Build_Type below for the meaning of these values.\n \n-   function Get_Gnat_Build_Type return Gnat_Build_Type;\n-   --  This function returns one of the following values of Gnat_Build_Type:\n+   Build_Type : constant Gnat_Build_Type := FSF;\n+   --  Kind of GNAT build:\n    --\n    --    FSF\n    --       GNAT FSF version. This version of GNAT is part of a Free Software"}, {"sha": "8c5396143600eccf6fef82bbe52e96331410591b", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8405d93cb85e88f95daae9de30039cc9745f507d/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8405d93cb85e88f95daae9de30039cc9745f507d/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=8405d93cb85e88f95daae9de30039cc9745f507d", "patch": "@@ -378,10 +378,10 @@ static void\n internal_error_function (const char *msgid, va_list *ap)\n {\n   text_info tinfo;\n-  char *buffer;\n-  char *p;\n-  String_Template temp;\n-  Fat_Pointer fp;\n+  char *buffer, *p, *loc;\n+  String_Template temp, temp_loc;\n+  Fat_Pointer fp, fp_loc;\n+  expanded_location s;\n \n   /* Reset the pretty-printer.  */\n   pp_clear_output_area (global_dc->printer);\n@@ -408,8 +408,20 @@ internal_error_function (const char *msgid, va_list *ap)\n   fp.Bounds = &temp;\n   fp.Array = buffer;\n \n+  s = expand_location (input_location);\n+#ifdef USE_MAPPED_LOCATION\n+  if (flag_show_column && s.column != 0)\n+    asprintf (&loc, \"%s:%d:%d\", s.file, s.line, s.column);\n+  else\n+#endif\n+    asprintf (&loc, \"%s:%d\", s.file, s.line);\n+  temp_loc.Low_Bound = 1;\n+  temp_loc.High_Bound = strlen (loc);\n+  fp_loc.Bounds = &temp_loc;\n+  fp_loc.Array = loc;\n+\n   Current_Error_Node = error_gnat_node;\n-  Compiler_Abort (fp, -1);\n+  Compiler_Abort (fp, -1, fp_loc);\n }\n \n /* Perform all the initialization steps that are language-specific.  */\n@@ -751,21 +763,19 @@ gnat_get_alias_set (tree type)\n   return -1;\n }\n \n-/* GNU_TYPE is a type.  Return its maxium size in bytes, if known,\n+/* GNU_TYPE is a type.  Return its maximum size in bytes, if known,\n    as a constant when possible.  */\n \n static tree\n gnat_type_max_size (tree gnu_type)\n {\n-  /* First see what we can get from TYPE_SIZE_UNIT, which might not be\n-     constant even for simple expressions if it has already been gimplified\n-     and replaced by a VAR_DECL.  */\n-\n+  /* First see what we can get from TYPE_SIZE_UNIT, which might not\n+     be constant even for simple expressions if it has already been\n+     elaborated and possibly replaced by a VAR_DECL.  */\n   tree max_unitsize = max_size (TYPE_SIZE_UNIT (gnu_type), true);\n \n   /* If we don't have a constant, see what we can get from TYPE_ADA_SIZE,\n-     typically not gimplified.  */\n-\n+     which should stay untouched.  */\n   if (!host_integerp (max_unitsize, 1)\n       && (TREE_CODE (gnu_type) == RECORD_TYPE\n \t  || TREE_CODE (gnu_type) == UNION_TYPE\n@@ -775,8 +785,7 @@ gnat_type_max_size (tree gnu_type)\n       tree max_adasize = max_size (TYPE_ADA_SIZE (gnu_type), true);\n \n       /* If we have succeeded in finding a constant, round it up to the\n-\t type's alignment and return the result in byte units.  */\n-\n+\t type's alignment and return the result in units.  */\n       if (host_integerp (max_adasize, 1))\n \tmax_unitsize\n \t  = size_binop (CEIL_DIV_EXPR,"}]}