{"sha": "1c50eadaae42490efff780b9b68123a952d34f57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1MGVhZGFhZTQyNDkwZWZmZjc4MGI5YjY4MTIzYTk1MmQzNGY1Nw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-04-15T10:43:43Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-04-15T10:43:43Z"}, "message": "arm.c (const_ok_for_dimode_op): Handle AND case.\n\n2013-04-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/arm.c (const_ok_for_dimode_op): Handle AND case.\n\t* config/arm/arm.md (*anddi3_insn): Change to insn_and_split.\n\t* config/arm/constraints.md (De): New constraint.\n\t* config/arm/neon.md (anddi3_neon): Delete.\n\t(neon_vand<mode>): Expand to standard anddi3 pattern.\n\t* config/arm/predicates.md (imm_for_neon_inv_logic_operand):\n\tMove earlier in the file.\n\t(neon_inv_logic_op2): Likewise.\n\t(arm_anddi_operand_neon): New predicate.\n\ntestsuite:\n\t* gcc.target/arm/anddi3-opt.c: New test.\n\t* gcc.target/arm/anddi3-opt2.c: Likewise.\n\nFrom-SVN: r197965", "tree": {"sha": "5d5c0f95ead98d820847ebc2339f133fefbd14ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d5c0f95ead98d820847ebc2339f133fefbd14ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c50eadaae42490efff780b9b68123a952d34f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c50eadaae42490efff780b9b68123a952d34f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c50eadaae42490efff780b9b68123a952d34f57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c50eadaae42490efff780b9b68123a952d34f57/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e927b6ad355c068ce2030bdec5a23db8d7a41496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e927b6ad355c068ce2030bdec5a23db8d7a41496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e927b6ad355c068ce2030bdec5a23db8d7a41496"}], "stats": {"total": 158, "additions": 116, "deletions": 42}, "files": [{"sha": "f6d63f21db71c4806db9b22216f47808c1a19837", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c50eadaae42490efff780b9b68123a952d34f57", "patch": "@@ -1,3 +1,15 @@\n+2013-04-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.c (const_ok_for_dimode_op): Handle AND case.\n+\t* config/arm/arm.md (*anddi3_insn): Change to insn_and_split.\n+\t* config/arm/constraints.md (De): New constraint.\n+\t* config/arm/neon.md (anddi3_neon): Delete.\n+\t(neon_vand<mode>): Expand to standard anddi3 pattern.\n+\t* config/arm/predicates.md (imm_for_neon_inv_logic_operand):\n+\tMove earlier in the file.\n+\t(neon_inv_logic_op2): Likewise.\n+\t(arm_anddi_operand_neon): New predicate.\n+\n 2013-04-15  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac (gcc_cv_ld_as_needed): Set"}, {"sha": "89affa7c8bdd1bd5ac55fa9d080969895851fdd3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1c50eadaae42490efff780b9b68123a952d34f57", "patch": "@@ -2646,6 +2646,9 @@ const_ok_for_dimode_op (HOST_WIDE_INT i, enum rtx_code code)\n \n   switch (code)\n     {\n+    case AND:\n+      return (const_ok_for_op (hi_val, code) || hi_val == 0xFFFFFFFF)\n+              && (const_ok_for_op (lo_val, code) || lo_val == 0xFFFFFFFF);\n     case PLUS:\n       return arm_not_operand (hi, SImode) && arm_add_operand (lo, SImode);\n "}, {"sha": "913dc5f50c6698213d260972dcee3416cb91e788", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 52, "deletions": 7, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=1c50eadaae42490efff780b9b68123a952d34f57", "patch": "@@ -2162,13 +2162,58 @@\n   \"\"\n )\n \n-(define_insn \"*anddi3_insn\"\n-  [(set (match_operand:DI         0 \"s_register_operand\" \"=&r,&r\")\n-\t(and:DI (match_operand:DI 1 \"s_register_operand\"  \"%0,r\")\n-\t\t(match_operand:DI 2 \"s_register_operand\"   \"r,r\")))]\n-  \"TARGET_32BIT && !TARGET_IWMMXT && !TARGET_NEON\"\n-  \"#\"\n-  [(set_attr \"length\" \"8\")]\n+(define_insn_and_split \"*anddi3_insn\"\n+  [(set (match_operand:DI         0 \"s_register_operand\"     \"=&r,&r,&r,&r,w,w ,?&r,?&r,?w,?w\")\n+\t(and:DI (match_operand:DI 1 \"s_register_operand\"     \"%0 ,r ,0,r ,w,0 ,0  ,r  ,w ,0\")\n+\t\t(match_operand:DI 2 \"arm_anddi_operand_neon\" \"r  ,r ,De,De,w,DL,r  ,r  ,w ,DL\")))]\n+  \"TARGET_32BIT && !TARGET_IWMMXT\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+    case 1:\n+    case 2:\n+    case 3: /* fall through */\n+      return \"#\";\n+    case 4: /* fall through */\n+    case 8: return \"vand\\t%P0, %P1, %P2\";\n+    case 5: /* fall through */\n+    case 9: return neon_output_logic_immediate (\"vand\", &operands[2],\n+                    DImode, 1, VALID_NEON_QREG_MODE (DImode));\n+    case 6: return \"#\";\n+    case 7: return \"#\";\n+    default: gcc_unreachable ();\n+    }\n+}\n+  \"TARGET_32BIT && !TARGET_IWMMXT\"\n+  [(set (match_dup 3) (match_dup 4))\n+   (set (match_dup 5) (match_dup 6))]\n+  \"\n+  {\n+    operands[3] = gen_lowpart (SImode, operands[0]);\n+    operands[5] = gen_highpart (SImode, operands[0]);\n+\n+    operands[4] = simplify_gen_binary (AND, SImode,\n+                                           gen_lowpart (SImode, operands[1]),\n+                                           gen_lowpart (SImode, operands[2]));\n+    operands[6] = simplify_gen_binary (AND, SImode,\n+                                           gen_highpart (SImode, operands[1]),\n+                                           gen_highpart_mode (SImode, DImode, operands[2]));\n+\n+  }\"\n+  [(set_attr \"neon_type\" \"*,*,*,*,neon_int_1,neon_int_1,*,*,neon_int_1,neon_int_1\")\n+   (set_attr \"arch\" \"*,*,*,*,neon_for_64bits,neon_for_64bits,*,*,\n+                     avoid_neon_for_64bits,avoid_neon_for_64bits\")\n+   (set_attr \"length\" \"8,8,8,8,*,*,8,8,*,*\")\n+   (set (attr \"insn_enabled\") (if_then_else\n+                                (lt (symbol_ref \"which_alternative\")\n+                                    (const_int 4))\n+                                (if_then_else (match_test \"!TARGET_NEON\")\n+                                              (const_string \"yes\")\n+                                              (const_string \"no\"))\n+                                (if_then_else (match_test \"TARGET_NEON\")\n+                                              (const_string \"yes\")\n+                                              (const_string \"no\"))))]\n )\n \n (define_insn_and_split \"*anddi_zesidi_di\""}, {"sha": "767ebfb6080491fb3f5038fb5b8b029d01bd8c88", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=1c50eadaae42490efff780b9b68123a952d34f57", "patch": "@@ -251,6 +251,12 @@\n  (and (match_code \"const_int\")\n       (match_test \"TARGET_32BIT && const_ok_for_dimode_op (ival, PLUS)\")))\n \n+(define_constraint \"De\"\n+ \"@internal\n+  In ARM/Thumb-2 state a const_int that can be used by insn anddi.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_32BIT && const_ok_for_dimode_op (ival, AND)\")))\n+\n (define_constraint \"Di\"\n  \"@internal\n   In ARM/Thumb-2 state a const_int or const_double where both the high"}, {"sha": "67f89b2fb03cd9e37baa88622699eb893838b137", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=1c50eadaae42490efff780b9b68123a952d34f57", "patch": "@@ -724,29 +724,6 @@\n   [(set_attr \"neon_type\" \"neon_int_1\")]\n )\n \n-(define_insn \"anddi3_neon\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w,w,?&r,?&r,?w,?w\")\n-        (and:DI (match_operand:DI 1 \"s_register_operand\" \"%w,0,0,r,w,0\")\n-\t\t(match_operand:DI 2 \"neon_inv_logic_op2\" \"w,DL,r,r,w,DL\")))]\n-  \"TARGET_NEON\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0: /* fall through */\n-    case 4: return \"vand\\t%P0, %P1, %P2\";\n-    case 1: /* fall through */\n-    case 5: return neon_output_logic_immediate (\"vand\", &operands[2],\n-    \t\t     DImode, 1, VALID_NEON_QREG_MODE (DImode));\n-    case 2: return \"#\";\n-    case 3: return \"#\";\n-    default: gcc_unreachable ();\n-    }\n-}\n-  [(set_attr \"neon_type\" \"neon_int_1,neon_int_1,*,*,neon_int_1,neon_int_1\")\n-   (set_attr \"length\" \"*,*,8,8,*,*\")\n-   (set_attr \"arch\" \"neon_for_64bits,neon_for_64bits,*,*,avoid_neon_for_64bits,avoid_neon_for_64bits\")]\n-)\n-\n (define_insn \"orn<mode>3_neon\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n \t(ior:VDQ (not:VDQ (match_operand:VDQ 2 \"s_register_operand\" \"w\"))\n@@ -5611,7 +5588,7 @@\n    (match_operand:SI 3 \"immediate_operand\" \"\")]\n   \"TARGET_NEON\"\n {\n-  emit_insn (gen_and<mode>3<V_suf64> (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_and<mode>3 (operands[0], operands[1], operands[2]));\n   DONE;\n })\n "}, {"sha": "2e0de08a8d022aae3a1d4b8d3ad037d32e2fdb7a", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=1c50eadaae42490efff780b9b68123a952d34f57", "patch": "@@ -31,6 +31,17 @@\n \t      || REGNO_REG_CLASS (REGNO (op)) != NO_REGS));\n })\n \n+(define_predicate \"imm_for_neon_inv_logic_operand\"\n+  (match_code \"const_vector\")\n+{\n+  return (TARGET_NEON\n+          && neon_immediate_valid_for_logic (op, mode, 1, NULL, NULL));\n+})\n+\n+(define_predicate \"neon_inv_logic_op2\"\n+  (ior (match_operand 0 \"imm_for_neon_inv_logic_operand\")\n+       (match_operand 0 \"s_register_operand\")))\n+\n ;; Any hard register.\n (define_predicate \"arm_hard_register_operand\"\n   (match_code \"reg\")\n@@ -145,6 +156,12 @@\n   (ior (match_operand 0 \"arm_rhs_operand\")\n        (match_operand 0 \"arm_neg_immediate_operand\")))\n \n+(define_predicate \"arm_anddi_operand_neon\"\n+  (ior (match_operand 0 \"s_register_operand\")\n+       (and (match_code \"const_int\")\n+\t    (match_test \"const_ok_for_dimode_op (INTVAL (op), AND)\"))\n+       (match_operand 0 \"neon_inv_logic_op2\")))\n+\n (define_predicate \"arm_adddi_operand\"\n   (ior (match_operand 0 \"s_register_operand\")\n        (and (match_code \"const_int\")\n@@ -525,21 +542,10 @@\n           && neon_immediate_valid_for_logic (op, mode, 0, NULL, NULL));\n })\n \n-(define_predicate \"imm_for_neon_inv_logic_operand\"\n-  (match_code \"const_vector\")\n-{\n-  return (TARGET_NEON\n-          && neon_immediate_valid_for_logic (op, mode, 1, NULL, NULL));\n-})\n-\n (define_predicate \"neon_logic_op2\"\n   (ior (match_operand 0 \"imm_for_neon_logic_operand\")\n        (match_operand 0 \"s_register_operand\")))\n \n-(define_predicate \"neon_inv_logic_op2\"\n-  (ior (match_operand 0 \"imm_for_neon_inv_logic_operand\")\n-       (match_operand 0 \"s_register_operand\")))\n-\n ;; Predicates for named expanders that overlap multiple ISAs.\n \n (define_predicate \"cmpdi_operand\""}, {"sha": "efc3ded90990603f11b7686ae32e3c1180b716b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c50eadaae42490efff780b9b68123a952d34f57", "patch": "@@ -1,3 +1,8 @@\n+2013-04-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/anddi3-opt.c: New test.\n+\t* gcc.target/arm/anddi3-opt2.c: Likewise.\n+\n 2013-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/pr56890-1.c: New test."}, {"sha": "cd0d08386322c4ae995d271df13122ff20bfe32e", "filename": "gcc/testsuite/gcc.target/arm/anddi3-opt.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fanddi3-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fanddi3-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fanddi3-opt.c?ref=1c50eadaae42490efff780b9b68123a952d34f57", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+unsigned long long\n+muld (unsigned long long X, unsigned long long Y)\n+{\n+  unsigned long long mask = 0xffffffffull;\n+  return (X & mask) * (Y & mask);\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\[\\\\t \\]+.+,\\[\\\\t \\]*.+,\\[\\\\t \\]*.+\" } } */"}, {"sha": "efe71f42ed5ad7b7b38cd5a5f9ce2f743ad59e0b", "filename": "gcc/testsuite/gcc.target/arm/anddi3-opt2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fanddi3-opt2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c50eadaae42490efff780b9b68123a952d34f57/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fanddi3-opt2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fanddi3-opt2.c?ref=1c50eadaae42490efff780b9b68123a952d34f57", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+long long muld(long long X, long long Y)\n+{\n+  return X & ~1;\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\[\\\\t \\]+.+,\\[\\\\t \\]*.+,\\[\\\\t \\]*.+\" } } */"}]}