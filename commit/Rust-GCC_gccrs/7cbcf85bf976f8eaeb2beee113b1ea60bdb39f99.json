{"sha": "7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NiY2Y4NWJmOTc2ZjhlYWViMmJlZWUxMTNiMWVhNjBiZGIzOWY5OQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-25T21:03:53Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-25T21:03:53Z"}, "message": "Generate 'fone' and 'fones' sparc instructions when possible.\n\n\t* config/sparc/constraints.md (C, P, Z): New constraints for\n\tconst_doube, const_int, and const_vector \"all ones\" values.\n\tMake unused constraint letters comment match reality.\n\t* config/sparc/predicates.md (const_all_ones_operand,\n\tregister_or_zero_or_all_ones_operand): New predicates.\n\t* config/sparc/sparc.c (sparc_expand_move): Allow all ones\n\tas well as zero constants when VIS.\n\t(sparc_legitimate_constant_p): Likewise.\n\t* config/sparc/sparc.md (movsi_insn): Add fones alternative.\n\t(movsf_insn): Likewise\n\t(movdi_insn_sp64): Add fone alternative.\n\t(movdf_insn_sp32_v9): Likewise.\n\t(movdf_insn_sp64): Likewise.\n\nFrom-SVN: r179173", "tree": {"sha": "1ed185ca35b27d21246d6298bb3f375233d93b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed185ca35b27d21246d6298bb3f375233d93b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0ce4616fbfc372de08a3b0d73ce96bb6ac40549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ce4616fbfc372de08a3b0d73ce96bb6ac40549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0ce4616fbfc372de08a3b0d73ce96bb6ac40549"}], "stats": {"total": 158, "additions": 116, "deletions": 42}, "files": [{"sha": "4c286fcda83466240487b53d935d9db41cb5a213", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99", "patch": "@@ -1,3 +1,19 @@\n+2011-09-25  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/constraints.md (C, P, Z): New constraints for\n+\tconst_doube, const_int, and const_vector \"all ones\" values.\n+\tMake unused constraint letters comment match reality.\n+\t* config/sparc/predicates.md (const_all_ones_operand,\n+\tregister_or_zero_or_all_ones_operand): New predicates.\n+\t* config/sparc/sparc.c (sparc_expand_move): Allow all ones\n+\tas well as zero constants when VIS.\n+\t(sparc_legitimate_constant_p): Likewise.\n+\t* config/sparc/sparc.md (movsi_insn): Add fones alternative.\n+\t(movsf_insn): Likewise\n+\t(movdi_insn_sp64): Add fone alternative.\n+\t(movdf_insn_sp32_v9): Likewise.\n+\t(movdf_insn_sp64): Likewise.\n+\n 2011-09-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-ssa-structalias.c (intra_create_variable_infos): Treat"}, {"sha": "317602c6e9548f2e1e5ed1fdf66c7f303240c6d8", "filename": "gcc/config/sparc/constraints.md", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fconstraints.md?ref=7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99", "patch": "@@ -18,7 +18,7 @@\n ;; <http://www.gnu.org/licenses/>.\n \n ;;; Unused letters:\n-;;;    ABCD           P         Z\n+;;;    AB                       \n ;;;    a        jkl    q  tuvwxyz\n \n \n@@ -52,6 +52,10 @@\n  (and (match_code \"const_double\")\n       (match_test \"const_zero_operand (op, mode)\")))\n \n+(define_constraint \"C\"\n+ \"The floating-point all-ones constant\"\n+ (and (match_code \"const_double\")\n+      (match_test \"const_all_ones_operand (op, mode)\")))\n \n ;; Integer constant constraints\n \n@@ -95,6 +99,10 @@\n  (and (match_code \"const_int\")\n       (match_test \"ival == 4096\")))\n \n+(define_constraint \"P\"\n+ \"The integer constant -1\"\n+ (and (match_code \"const_int\")\n+      (match_test \"ival == -1\")))\n \n ;; Extra constraints\n ;; Our memory extra constraints have to emulate the behavior of 'm' and 'o',\n@@ -146,3 +154,8 @@\n  \"The vector zero constant\"\n  (and (match_code \"const_vector\")\n       (match_test \"const_zero_operand (op, mode)\")))\n+\n+(define_constraint \"Z\"\n+ \"The vector all ones constant\"\n+ (and (match_code \"const_vector\")\n+      (match_test \"const_all_ones_operand (op, mode)\")))"}, {"sha": "21399b5902a50966e0548a4f1c6e3be2a93e4dd4", "filename": "gcc/config/sparc/predicates.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpredicates.md?ref=7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99", "patch": "@@ -29,6 +29,35 @@\n   (and (match_code \"const_int,const_double,const_vector\")\n        (match_test \"op == CONST1_RTX (mode)\")))\n \n+;; Return true if the integer representation of OP is\n+;; all-ones.\n+(define_predicate \"const_all_ones_operand\"\n+  (match_code \"const_int,const_double,const_vector\")\n+{\n+  if (GET_CODE (op) == CONST_INT && INTVAL (op) == -1)\n+    return true;\n+#if HOST_BITS_PER_WIDE_INT == 32\n+  if (GET_CODE (op) == CONST_DOUBLE\n+      && GET_MODE (op) == VOIDmode\n+      && CONST_DOUBLE_HIGH (op) == ~(HOST_WIDE_INT)0\n+      && CONST_DOUBLE_LOW (op) == ~(HOST_WIDE_INT)0)\n+    return true;\n+#endif\n+  if (GET_CODE (op) == CONST_VECTOR)\n+    {\n+      int i, num_elem = CONST_VECTOR_NUNITS (op);\n+\n+      for (i = 0; i < num_elem; i++)\n+        {\n+          rtx n = CONST_VECTOR_ELT (op, i);\n+          if (! const_all_ones_operand (n, mode))\n+            return false;\n+        }\n+      return true;\n+    }\n+  return false;\n+})\n+\n ;; Return true if OP is the integer constant 4096.\n (define_predicate \"const_4096_operand\"\n   (and (match_code \"const_int\")\n@@ -211,6 +240,12 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"const_zero_operand\")))\n \n+;; Return true if OP is either the zero constant, the all-ones\n+;; constant, or a register.\n+(define_predicate \"register_or_zero_or_all_ones_operand\"\n+  (ior (match_operand 0 \"register_or_zero_operand\")\n+       (match_operand 0 \"const_all_ones_operand\")))\n+\n ;; Return true if OP is a register operand in a floating point register.\n (define_predicate \"fp_register_operand\"\n   (match_operand 0 \"register_operand\")"}, {"sha": "344637935d505f83d6fe687f5e2bdbf6b9cf005c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99", "patch": "@@ -1170,9 +1170,11 @@ sparc_expand_move (enum machine_mode mode, rtx *operands)\n       if (operands [1] == const0_rtx)\n \toperands[1] = CONST0_RTX (mode);\n \n-      /* We can clear FP registers if TARGET_VIS, and always other regs.  */\n+      /* We can clear or set to all-ones FP registers if TARGET_VIS, and\n+\t always other regs.  */\n       if ((TARGET_VIS || REGNO (operands[0]) < SPARC_FIRST_FP_REG)\n-\t  && const_zero_operand (operands[1], mode))\n+\t  && (const_zero_operand (operands[1], mode)\n+\t      || const_all_ones_operand (operands[1], mode)))\n \treturn false;\n \n       if (REGNO (operands[0]) < SPARC_FIRST_FP_REG\n@@ -3096,19 +3098,21 @@ sparc_legitimate_constant_p (enum machine_mode mode, rtx x)\n         return true;\n \n       /* Floating point constants are generally not ok.\n-\t The only exception is 0.0 in VIS.  */\n+\t The only exception is 0.0 and all-ones in VIS.  */\n       if (TARGET_VIS\n \t  && SCALAR_FLOAT_MODE_P (mode)\n-\t  && const_zero_operand (x, mode))\n+\t  && (const_zero_operand (x, mode)\n+\t      || const_all_ones_operand (x, mode)))\n \treturn true;\n \n       return false;\n \n     case CONST_VECTOR:\n       /* Vector constants are generally not ok.\n-\t The only exception is 0 in VIS.  */\n+\t The only exception is 0 or -1 in VIS.  */\n       if (TARGET_VIS\n-\t  && const_zero_operand (x, mode))\n+\t  && (const_zero_operand (x, mode)\n+\t      || const_all_ones_operand (x, mode)))\n \treturn true;\n \n       return false;"}, {"sha": "f830a3936eef26def38e791312bc6606aa52f0a7", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=7cbcf85bf976f8eaeb2beee113b1ea60bdb39f99", "patch": "@@ -1303,10 +1303,10 @@\n })\n \n (define_insn \"*movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,m,!f,!f,!m,d\")\n-\t(match_operand:SI 1 \"input_operand\"   \"rI,K,m,rJ,f,m,f,J\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,m,!f,!f,!m,d,d\")\n+\t(match_operand:SI 1 \"input_operand\"   \"rI,K,m,rJ,f,m,f,J,P\"))]\n   \"(register_operand (operands[0], SImode)\n-    || register_or_zero_operand (operands[1], SImode))\"\n+    || register_or_zero_or_all_ones_operand (operands[1], SImode))\"\n   \"@\n    mov\\t%1, %0\n    sethi\\t%%hi(%a1), %0\n@@ -1315,8 +1315,9 @@\n    fmovs\\t%1, %0\n    ld\\t%1, %0\n    st\\t%1, %0\n-   fzeros\\t%0\"\n-  [(set_attr \"type\" \"*,*,load,store,fpmove,fpload,fpstore,fga\")])\n+   fzeros\\t%0\n+   fones\\t%0\"\n+  [(set_attr \"type\" \"*,*,load,store,fpmove,fpload,fpstore,fga,fga\")])\n \n (define_insn \"*movsi_lo_sum\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -1505,11 +1506,11 @@\n    (set_attr \"fptype\" \"*,*,*,*,*,*,*,*,*,*,*,*,double,*,*\")])\n \n (define_insn \"*movdi_insn_sp64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,m,?e,?e,?W,b\")\n-        (match_operand:DI 1 \"input_operand\"   \"rI,N,m,rJ,e,W,e,J\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,m,?e,?e,?W,b,b\")\n+        (match_operand:DI 1 \"input_operand\"   \"rI,N,m,rJ,e,W,e,J,P\"))]\n   \"TARGET_ARCH64\n    && (register_operand (operands[0], DImode)\n-       || register_or_zero_operand (operands[1], DImode))\"\n+       || register_or_zero_or_all_ones_operand (operands[1], DImode))\"\n   \"@\n    mov\\t%1, %0\n    sethi\\t%%hi(%a1), %0\n@@ -1518,9 +1519,10 @@\n    fmovd\\t%1, %0\n    ldd\\t%1, %0\n    std\\t%1, %0\n-   fzero\\t%0\"\n-  [(set_attr \"type\" \"*,*,load,store,fpmove,fpload,fpstore,fga\")\n-   (set_attr \"fptype\" \"*,*,*,*,double,*,*,double\")])\n+   fzero\\t%0\n+   fone\\t%0\"\n+  [(set_attr \"type\" \"*,*,load,store,fpmove,fpload,fpstore,fga,fga\")\n+   (set_attr \"fptype\" \"*,*,*,*,double,*,*,double,double\")])\n \n (define_expand \"movdi_pic_label_ref\"\n   [(set (match_dup 3) (high:DI\n@@ -1918,16 +1920,16 @@\n })\n \n (define_insn \"*movsf_insn\"\n-  [(set (match_operand:V32 0 \"nonimmediate_operand\" \"=d,f,*r,*r,*r,f,*r,m,m\")\n-\t(match_operand:V32 1 \"input_operand\"        \"GY,f,*rRY,Q,S,m,m,f,*rGY\"))]\n+  [(set (match_operand:V32 0 \"nonimmediate_operand\" \"=d,d,f,*r,*r,*r,f,*r,m,m\")\n+\t(match_operand:V32 1 \"input_operand\"        \"GY,ZC,f,*rRY,Q,S,m,m,f,*rGY\"))]\n   \"TARGET_FPU\n    && (register_operand (operands[0], <V32:MODE>mode)\n-       || register_or_zero_operand (operands[1], <V32:MODE>mode))\"\n+       || register_or_zero_or_all_ones_operand (operands[1], <V32:MODE>mode))\"\n {\n   if (GET_CODE (operands[1]) == CONST_DOUBLE\n-      && (which_alternative == 2\n-          || which_alternative == 3\n-          || which_alternative == 4))\n+      && (which_alternative == 3\n+          || which_alternative == 4\n+          || which_alternative == 5))\n     {\n       REAL_VALUE_TYPE r;\n       long i;\n@@ -1942,24 +1944,26 @@\n     case 0:\n       return \"fzeros\\t%0\";\n     case 1:\n-      return \"fmovs\\t%1, %0\";\n+      return \"fones\\t%0\";\n     case 2:\n-      return \"mov\\t%1, %0\";\n+      return \"fmovs\\t%1, %0\";\n     case 3:\n-      return \"sethi\\t%%hi(%a1), %0\";\n+      return \"mov\\t%1, %0\";\n     case 4:\n-      return \"#\";\n+      return \"sethi\\t%%hi(%a1), %0\";\n     case 5:\n+      return \"#\";\n     case 6:\n-      return \"ld\\t%1, %0\";\n     case 7:\n+      return \"ld\\t%1, %0\";\n     case 8:\n+    case 9:\n       return \"st\\t%r1, %0\";\n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"fga,fpmove,*,*,*,fpload,load,fpstore,store\")])\n+  [(set_attr \"type\" \"fga,fga,fpmove,*,*,*,fpload,load,fpstore,store\")])\n \n ;; Exactly the same as above, except that all `f' cases are deleted.\n ;; This is necessary to prevent reload from ever trying to use a `f' reg\n@@ -2091,15 +2095,16 @@\n \n ;; We have available v9 double floats but not 64-bit integer registers.\n (define_insn \"*movdf_insn_sp32_v9\"\n-  [(set (match_operand:V64 0 \"nonimmediate_operand\" \"=b,e,e,T,W,U,T,f,*r,o\")\n-        (match_operand:V64 1 \"input_operand\" \"GY,e,W#F,GY,e,T,U,o#F,*roGYDF,*rGYf\"))]\n+  [(set (match_operand:V64 0 \"nonimmediate_operand\" \"=b,b,e,e,T,W,U,T,f,*r,o\")\n+        (match_operand:V64 1 \"input_operand\" \"GY,ZC,e,W#F,GY,e,T,U,o#F,*roGYDF,*rGYf\"))]\n   \"TARGET_FPU\n    && TARGET_V9\n    && ! TARGET_ARCH64\n    && (register_operand (operands[0], <V64:MODE>mode)\n-       || register_or_zero_operand (operands[1], <V64:MODE>mode))\"\n+       || register_or_zero_or_all_ones_operand (operands[1], <V64:MODE>mode))\"\n   \"@\n   fzero\\t%0\n+  fone\\t%0\n   fmovd\\t%1, %0\n   ldd\\t%1, %0\n   stx\\t%r1, %0\n@@ -2109,9 +2114,9 @@\n   #\n   #\n   #\"\n-  [(set_attr \"type\" \"fga,fpmove,load,store,store,load,store,*,*,*\")\n-   (set_attr \"length\" \"*,*,*,*,*,*,*,2,2,2\")\n-   (set_attr \"fptype\" \"double,double,*,*,*,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"fga,fga,fpmove,load,store,store,load,store,*,*,*\")\n+   (set_attr \"length\" \"*,*,*,*,*,*,*,*,2,2,2\")\n+   (set_attr \"fptype\" \"double,double,double,*,*,*,*,*,*,*,*\")])\n \n (define_insn \"*movdf_insn_sp32_v9_no_fpu\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=U,T,T,r,o\")\n@@ -2132,24 +2137,25 @@\n \n ;; We have available both v9 double floats and 64-bit integer registers.\n (define_insn \"*movdf_insn_sp64\"\n-  [(set (match_operand:V64 0 \"nonimmediate_operand\" \"=b,e,e,W,*r,*r,m,*r\")\n-        (match_operand:V64 1 \"input_operand\"    \"GY,e,W#F,e,*rGY,m,*rGY,DF\"))]\n+  [(set (match_operand:V64 0 \"nonimmediate_operand\" \"=b,b,e,e,W,*r,*r,m,*r\")\n+        (match_operand:V64 1 \"input_operand\"    \"GY,ZC,e,W#F,e,*rGY,m,*rGY,DF\"))]\n   \"TARGET_FPU\n    && TARGET_ARCH64\n    && (register_operand (operands[0], <V64:MODE>mode)\n-       || register_or_zero_operand (operands[1], <V64:MODE>mode))\"\n+       || register_or_zero_or_all_ones_operand (operands[1], <V64:MODE>mode))\"\n   \"@\n   fzero\\t%0\n+  fone\\t%0\n   fmovd\\t%1, %0\n   ldd\\t%1, %0\n   std\\t%1, %0\n   mov\\t%r1, %0\n   ldx\\t%1, %0\n   stx\\t%r1, %0\n   #\"\n-  [(set_attr \"type\" \"fga,fpmove,load,store,*,load,store,*\")\n-   (set_attr \"length\" \"*,*,*,*,*,*,*,2\")\n-   (set_attr \"fptype\" \"double,double,*,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"fga,fga,fpmove,load,store,*,load,store,*\")\n+   (set_attr \"length\" \"*,*,*,*,*,*,*,*,2\")\n+   (set_attr \"fptype\" \"double,double,double,*,*,*,*,*,*\")])\n \n (define_insn \"*movdf_insn_sp64_no_fpu\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,m\")"}]}