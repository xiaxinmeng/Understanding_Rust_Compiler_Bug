{"sha": "db7134353447921136a321b8fd78cea78f2c344e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3MTM0MzUzNDQ3OTIxMTM2YTMyMWI4ZmQ3OGNlYTc4ZjJjMzQ0ZQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-05T13:46:41Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-06T18:03:42Z"}, "message": "Fix overloaded virtual and unused parameters warnings", "tree": {"sha": "2ff1f7f59038e51c3083a86d338395717742df17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ff1f7f59038e51c3083a86d338395717742df17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db7134353447921136a321b8fd78cea78f2c344e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7134353447921136a321b8fd78cea78f2c344e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7134353447921136a321b8fd78cea78f2c344e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7134353447921136a321b8fd78cea78f2c344e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34a39466b2adb9684a1737c6ea4915e0194c26bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a39466b2adb9684a1737c6ea4915e0194c26bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a39466b2adb9684a1737c6ea4915e0194c26bf"}], "stats": {"total": 828, "additions": 386, "deletions": 442}, "files": [{"sha": "25c9b89495382664b41c8d28fdf9ec2e7a54f99c", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=db7134353447921136a321b8fd78cea78f2c344e", "patch": "@@ -227,11 +227,11 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \n   virtual ~TyTyResolveCompile () {}\n \n-  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &) override { gcc_unreachable (); }\n \n   void visit (TyTy::FnType &type) override\n   {\n@@ -266,7 +266,7 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n       ctx->get_mappings ()->lookup_location (type.get_ref ()));\n   }\n \n-  void visit (TyTy::UnitType &type) override\n+  void visit (TyTy::UnitType &) override\n   {\n     translated = ctx->get_backend ()->void_type ();\n   }"}, {"sha": "0629cbed186bc6ad462a1f237e802e4a6eebb467", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=db7134353447921136a321b8fd78cea78f2c344e", "patch": "@@ -44,22 +44,19 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   ~TyTyCompile () {}\n \n-  void visit (TyTy::ErrorType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::InferType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::InferType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::StructFieldType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::StructFieldType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::ADTType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ADTType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::TupleType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::TupleType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::ArrayType &type) override { gcc_unreachable (); }\n+  void visit (TyTy::ArrayType &) override { gcc_unreachable (); }\n \n-  void visit (TyTy::UnitType &type) override\n-  {\n-    translated = backend->void_type ();\n-  }\n+  void visit (TyTy::UnitType &) override { translated = backend->void_type (); }\n \n   void visit (TyTy::FnType &type) override\n   {\n@@ -93,7 +90,7 @@ class TyTyCompile : public TyTy::TyVisitor\n \t\t\t\tmappings->lookup_location (type.get_ref ()));\n   }\n \n-  void visit (TyTy::BoolType &type) override\n+  void visit (TyTy::BoolType &) override\n   {\n     translated = backend->named_type (\"bool\", backend->bool_type (),\n \t\t\t\t      Linemap::predeclared_location ());\n@@ -190,14 +187,14 @@ class TyTyCompile : public TyTy::TyVisitor\n     gcc_unreachable ();\n   }\n \n-  void visit (TyTy::USizeType &type) override\n+  void visit (TyTy::USizeType &) override\n   {\n     translated = backend->named_type (\n       \"usize\", backend->integer_type (true, backend->get_pointer_size ()),\n       Linemap::predeclared_location ());\n   }\n \n-  void visit (TyTy::ISizeType &type) override\n+  void visit (TyTy::ISizeType &) override\n   {\n     translated = backend->named_type (\n       \"isize\", backend->integer_type (false, backend->get_pointer_size ()),"}, {"sha": "16334bdfbd2f18c47a9fd72821486154e3e2d6de", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 175, "deletions": 205, "changes": 380, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=db7134353447921136a321b8fd78cea78f2c344e", "patch": "@@ -21,7 +21,6 @@\n \n #include \"rust-ast-visitor.h\"\n #include \"rust-name-resolver.h\"\n-\n #include \"rust-diagnostics.h\"\n #include \"rust-location.h\"\n \n@@ -33,210 +32,181 @@ class ResolverBase : public AST::ASTVisitor\n public:\n   virtual ~ResolverBase () {}\n \n-  // visitor impl\n-  // rust-ast.h\n-  //  virtual void visit(AttrInput& attr_input);\n-  //  virtual void visit(TokenTree& token_tree);\n-  //  virtual void visit(MacroMatch& macro_match);\n-  virtual void visit (AST::Token &tok) {}\n-  virtual void visit (AST::DelimTokenTree &delim_tok_tree) {}\n-  virtual void visit (AST::AttrInputMetaItemContainer &input) {}\n-  //  virtual void visit(MetaItem& meta_item) {}\n-  //  void vsit(Stmt& stmt) {}\n-  //  virtual void visit(Expr& expr) {}\n-  virtual void visit (AST::IdentifierExpr &ident_expr) {}\n-  //  virtual void visit(Pattern& pattern) {}\n-  //  virtual void visit(Type& type) {}\n-  //  virtual void visit(TypeParamBound& type_param_bound) {}\n-  virtual void visit (AST::Lifetime &lifetime) {}\n-  //  virtual void visit(GenericParam& generic_param) {}\n-  virtual void visit (AST::LifetimeParam &lifetime_param) {}\n-  //  virtual void visit(TraitItem& trait_item) {}\n-  //  virtual void visit(InherentImplItem& inherent_impl_item) {}\n-  //  virtual void visit(TraitImplItem& trait_impl_item) {}\n-  virtual void visit (AST::MacroInvocationSemi &macro) {}\n-\n-  // rust-path.h\n-  virtual void visit (AST::PathInExpression &path) {}\n-  virtual void visit (AST::TypePathSegment &segment) {}\n-  virtual void visit (AST::TypePathSegmentGeneric &segment) {}\n-  virtual void visit (AST::TypePathSegmentFunction &segment) {}\n-  virtual void visit (AST::TypePath &path) {}\n-  virtual void visit (AST::QualifiedPathInExpression &path) {}\n-  virtual void visit (AST::QualifiedPathInType &path) {}\n-\n-  // rust-expr.h\n-  virtual void visit (AST::LiteralExpr &expr) {}\n-  virtual void visit (AST::AttrInputLiteral &attr_input) {}\n-  virtual void visit (AST::MetaItemLitExpr &meta_item) {}\n-  virtual void visit (AST::MetaItemPathLit &meta_item) {}\n-  virtual void visit (AST::BorrowExpr &expr) {}\n-  virtual void visit (AST::DereferenceExpr &expr) {}\n-  virtual void visit (AST::ErrorPropagationExpr &expr) {}\n-  virtual void visit (AST::NegationExpr &expr) {}\n-  virtual void visit (AST::ArithmeticOrLogicalExpr &expr) {}\n-  virtual void visit (AST::ComparisonExpr &expr) {}\n-  virtual void visit (AST::LazyBooleanExpr &expr) {}\n-  virtual void visit (AST::TypeCastExpr &expr) {}\n-  virtual void visit (AST::AssignmentExpr &expr) {}\n-  virtual void visit (AST::CompoundAssignmentExpr &expr) {}\n-  virtual void visit (AST::GroupedExpr &expr) {}\n-  //  virtual void visit(ArrayElems& elems) {}\n-  virtual void visit (AST::ArrayElemsValues &elems) {}\n-  virtual void visit (AST::ArrayElemsCopied &elems) {}\n-  virtual void visit (AST::ArrayExpr &expr) {}\n-  virtual void visit (AST::ArrayIndexExpr &expr) {}\n-  virtual void visit (AST::TupleExpr &expr) {}\n-  virtual void visit (AST::TupleIndexExpr &expr) {}\n-  virtual void visit (AST::StructExprStruct &expr) {}\n-  //  virtual void visit(StructExprField& field) {}\n-  virtual void visit (AST::StructExprFieldIdentifier &field) {}\n-  virtual void visit (AST::StructExprFieldIdentifierValue &field) {}\n-  virtual void visit (AST::StructExprFieldIndexValue &field) {}\n-  virtual void visit (AST::StructExprStructFields &expr) {}\n-  virtual void visit (AST::StructExprStructBase &expr) {}\n-  virtual void visit (AST::StructExprTuple &expr) {}\n-  virtual void visit (AST::StructExprUnit &expr) {}\n-  //  virtual void visit(EnumExprField& field) {}\n-  virtual void visit (AST::EnumExprFieldIdentifier &field) {}\n-  virtual void visit (AST::EnumExprFieldIdentifierValue &field) {}\n-  virtual void visit (AST::EnumExprFieldIndexValue &field) {}\n-  virtual void visit (AST::EnumExprStruct &expr) {}\n-  virtual void visit (AST::EnumExprTuple &expr) {}\n-  virtual void visit (AST::EnumExprFieldless &expr) {}\n-  virtual void visit (AST::CallExpr &expr) {}\n-  virtual void visit (AST::MethodCallExpr &expr) {}\n-  virtual void visit (AST::FieldAccessExpr &expr) {}\n-  virtual void visit (AST::ClosureExprInner &expr) {}\n-  virtual void visit (AST::BlockExpr &expr) {}\n-  virtual void visit (AST::ClosureExprInnerTyped &expr) {}\n-  virtual void visit (AST::ContinueExpr &expr) {}\n-  virtual void visit (AST::BreakExpr &expr) {}\n-  virtual void visit (AST::RangeFromToExpr &expr) {}\n-  virtual void visit (AST::RangeFromExpr &expr) {}\n-  virtual void visit (AST::RangeToExpr &expr) {}\n-  virtual void visit (AST::RangeFullExpr &expr) {}\n-  virtual void visit (AST::RangeFromToInclExpr &expr) {}\n-  virtual void visit (AST::RangeToInclExpr &expr) {}\n-  virtual void visit (AST::ReturnExpr &expr) {}\n-  virtual void visit (AST::UnsafeBlockExpr &expr) {}\n-  virtual void visit (AST::LoopExpr &expr) {}\n-  virtual void visit (AST::WhileLoopExpr &expr) {}\n-  virtual void visit (AST::WhileLetLoopExpr &expr) {}\n-  virtual void visit (AST::ForLoopExpr &expr) {}\n-  virtual void visit (AST::IfExpr &expr) {}\n-  virtual void visit (AST::IfExprConseqElse &expr) {}\n-  virtual void visit (AST::IfExprConseqIf &expr) {}\n-  virtual void visit (AST::IfExprConseqIfLet &expr) {}\n-  virtual void visit (AST::IfLetExpr &expr) {}\n-  virtual void visit (AST::IfLetExprConseqElse &expr) {}\n-  virtual void visit (AST::IfLetExprConseqIf &expr) {}\n-  virtual void visit (AST::IfLetExprConseqIfLet &expr) {}\n-  //  virtual void visit(MatchCase& match_case) {}\n-  // virtual void visit (AST::MatchCaseBlockExpr &match_case) {}\n-  // virtual void visit (AST::MatchCaseExpr &match_case) {}\n-  virtual void visit (AST::MatchExpr &expr) {}\n-  virtual void visit (AST::AwaitExpr &expr) {}\n-  virtual void visit (AST::AsyncBlockExpr &expr) {}\n-\n-  // rust-item.h\n-  virtual void visit (AST::TypeParam &param) {}\n-  //  virtual void visit(WhereClauseItem& item) {}\n-  virtual void visit (AST::LifetimeWhereClauseItem &item) {}\n-  virtual void visit (AST::TypeBoundWhereClauseItem &item) {}\n-  virtual void visit (AST::Method &method) {}\n-  virtual void visit (AST::ModuleBodied &module) {}\n-  virtual void visit (AST::ModuleNoBody &module) {}\n-  virtual void visit (AST::ExternCrate &crate) {}\n-  //  virtual void visit(UseTree& use_tree) {}\n-  virtual void visit (AST::UseTreeGlob &use_tree) {}\n-  virtual void visit (AST::UseTreeList &use_tree) {}\n-  virtual void visit (AST::UseTreeRebind &use_tree) {}\n-  virtual void visit (AST::UseDeclaration &use_decl) {}\n-  virtual void visit (AST::Function &function) {}\n-  virtual void visit (AST::TypeAlias &type_alias) {}\n-  virtual void visit (AST::StructStruct &struct_item) {}\n-  virtual void visit (AST::TupleStruct &tuple_struct) {}\n-  virtual void visit (AST::EnumItem &item) {}\n-  virtual void visit (AST::EnumItemTuple &item) {}\n-  virtual void visit (AST::EnumItemStruct &item) {}\n-  virtual void visit (AST::EnumItemDiscriminant &item) {}\n-  virtual void visit (AST::Enum &enum_item) {}\n-  virtual void visit (AST::Union &union_item) {}\n-  virtual void visit (AST::ConstantItem &const_item) {}\n-  virtual void visit (AST::StaticItem &static_item) {}\n-  virtual void visit (AST::TraitItemFunc &item) {}\n-  virtual void visit (AST::TraitItemMethod &item) {}\n-  virtual void visit (AST::TraitItemConst &item) {}\n-  virtual void visit (AST::TraitItemType &item) {}\n-  virtual void visit (AST::Trait &trait) {}\n-  virtual void visit (AST::InherentImpl &impl) {}\n-  virtual void visit (AST::TraitImpl &impl) {}\n-  //  virtual void visit(ExternalItem& item) {}\n-  virtual void visit (AST::ExternalStaticItem &item) {}\n-  virtual void visit (AST::ExternalFunctionItem &item) {}\n-  virtual void visit (AST::ExternBlock &block) {}\n-\n-  // rust-macro.h\n-  virtual void visit (AST::MacroMatchFragment &match) {}\n-  virtual void visit (AST::MacroMatchRepetition &match) {}\n-  virtual void visit (AST::MacroMatcher &matcher) {}\n-  virtual void visit (AST::MacroRulesDefinition &rules_def) {}\n-  virtual void visit (AST::MacroInvocation &macro_invoc) {}\n-  virtual void visit (AST::MetaItemPath &meta_item) {}\n-  virtual void visit (AST::MetaItemSeq &meta_item) {}\n-  virtual void visit (AST::MetaWord &meta_item) {}\n-  virtual void visit (AST::MetaNameValueStr &meta_item) {}\n-  virtual void visit (AST::MetaListPaths &meta_item) {}\n-  virtual void visit (AST::MetaListNameValueStr &meta_item) {}\n-\n-  // rust-pattern.h\n-  virtual void visit (AST::LiteralPattern &pattern) {}\n-  virtual void visit (AST::IdentifierPattern &pattern) {}\n-  virtual void visit (AST::WildcardPattern &pattern) {}\n-  //  virtual void visit(RangePatternBound& bound) {}\n-  virtual void visit (AST::RangePatternBoundLiteral &bound) {}\n-  virtual void visit (AST::RangePatternBoundPath &bound) {}\n-  virtual void visit (AST::RangePatternBoundQualPath &bound) {}\n-  virtual void visit (AST::RangePattern &pattern) {}\n-  virtual void visit (AST::ReferencePattern &pattern) {}\n-  //  virtual void visit(StructPatternField& field) {}\n-  virtual void visit (AST::StructPatternFieldTuplePat &field) {}\n-  virtual void visit (AST::StructPatternFieldIdentPat &field) {}\n-  virtual void visit (AST::StructPatternFieldIdent &field) {}\n-  virtual void visit (AST::StructPattern &pattern) {}\n-  //  virtual void visit(TupleStructItems& tuple_items) {}\n-  virtual void visit (AST::TupleStructItemsNoRange &tuple_items) {}\n-  virtual void visit (AST::TupleStructItemsRange &tuple_items) {}\n-  virtual void visit (AST::TupleStructPattern &pattern) {}\n-  //  virtual void visit(TuplePatternItems& tuple_items) {}\n-  virtual void visit (AST::TuplePatternItemsMultiple &tuple_items) {}\n-  virtual void visit (AST::TuplePatternItemsRanged &tuple_items) {}\n-  virtual void visit (AST::TuplePattern &pattern) {}\n-  virtual void visit (AST::GroupedPattern &pattern) {}\n-  virtual void visit (AST::SlicePattern &pattern) {}\n-\n-  // rust-stmt.h\n-  virtual void visit (AST::EmptyStmt &stmt) {}\n-  virtual void visit (AST::LetStmt &stmt) {}\n-  virtual void visit (AST::ExprStmtWithoutBlock &stmt) {}\n-  virtual void visit (AST::ExprStmtWithBlock &stmt) {}\n-\n-  // rust-type.h\n-  virtual void visit (AST::TraitBound &bound) {}\n-  virtual void visit (AST::ImplTraitType &type) {}\n-  virtual void visit (AST::TraitObjectType &type) {}\n-  virtual void visit (AST::ParenthesisedType &type) {}\n-  virtual void visit (AST::ImplTraitTypeOneBound &type) {}\n-  virtual void visit (AST::TraitObjectTypeOneBound &type) {}\n-  virtual void visit (AST::TupleType &type) {}\n-  virtual void visit (AST::NeverType &type) {}\n-  virtual void visit (AST::RawPointerType &type) {}\n-  virtual void visit (AST::ReferenceType &type) {}\n-  virtual void visit (AST::ArrayType &type) {}\n-  virtual void visit (AST::SliceType &type) {}\n-  virtual void visit (AST::InferredType &type) {}\n-  virtual void visit (AST::BareFunctionType &type) {}\n+  void visit (AST::Token &) {}\n+  void visit (AST::DelimTokenTree &) {}\n+  void visit (AST::AttrInputMetaItemContainer &) {}\n+  void visit (AST::IdentifierExpr &) {}\n+  void visit (AST::Lifetime &) {}\n+  void visit (AST::LifetimeParam &) {}\n+  void visit (AST::MacroInvocationSemi &) {}\n+  void visit (AST::PathInExpression &) {}\n+  void visit (AST::TypePathSegment &) {}\n+  void visit (AST::TypePathSegmentGeneric &) {}\n+  void visit (AST::TypePathSegmentFunction &) {}\n+  void visit (AST::TypePath &) {}\n+  void visit (AST::QualifiedPathInExpression &) {}\n+  void visit (AST::QualifiedPathInType &) {}\n+  void visit (AST::LiteralExpr &) {}\n+  void visit (AST::AttrInputLiteral &) {}\n+  void visit (AST::MetaItemLitExpr &) {}\n+  void visit (AST::MetaItemPathLit &) {}\n+  void visit (AST::BorrowExpr &) {}\n+  void visit (AST::DereferenceExpr &) {}\n+  void visit (AST::ErrorPropagationExpr &) {}\n+  void visit (AST::NegationExpr &) {}\n+  void visit (AST::ArithmeticOrLogicalExpr &) {}\n+  void visit (AST::ComparisonExpr &) {}\n+  void visit (AST::LazyBooleanExpr &) {}\n+  void visit (AST::TypeCastExpr &) {}\n+  void visit (AST::AssignmentExpr &) {}\n+  void visit (AST::CompoundAssignmentExpr &) {}\n+  void visit (AST::GroupedExpr &) {}\n+  void visit (AST::ArrayElemsValues &) {}\n+  void visit (AST::ArrayElemsCopied &) {}\n+  void visit (AST::ArrayExpr &) {}\n+  void visit (AST::ArrayIndexExpr &) {}\n+  void visit (AST::TupleExpr &) {}\n+  void visit (AST::TupleIndexExpr &) {}\n+  void visit (AST::StructExprStruct &) {}\n+  void visit (AST::StructExprFieldIdentifier &) {}\n+  void visit (AST::StructExprFieldIdentifierValue &) {}\n+  void visit (AST::StructExprFieldIndexValue &) {}\n+  void visit (AST::StructExprStructFields &) {}\n+  void visit (AST::StructExprStructBase &) {}\n+  void visit (AST::StructExprTuple &) {}\n+  void visit (AST::StructExprUnit &) {}\n+  void visit (AST::EnumExprFieldIdentifier &) {}\n+  void visit (AST::EnumExprFieldIdentifierValue &) {}\n+  void visit (AST::EnumExprFieldIndexValue &) {}\n+  void visit (AST::EnumExprStruct &) {}\n+  void visit (AST::EnumExprTuple &) {}\n+  void visit (AST::EnumExprFieldless &) {}\n+  void visit (AST::CallExpr &) {}\n+  void visit (AST::MethodCallExpr &) {}\n+  void visit (AST::FieldAccessExpr &) {}\n+  void visit (AST::ClosureExprInner &) {}\n+  void visit (AST::BlockExpr &) {}\n+  void visit (AST::ClosureExprInnerTyped &) {}\n+  void visit (AST::ContinueExpr &) {}\n+  void visit (AST::BreakExpr &) {}\n+  void visit (AST::RangeFromToExpr &) {}\n+  void visit (AST::RangeFromExpr &) {}\n+  void visit (AST::RangeToExpr &) {}\n+  void visit (AST::RangeFullExpr &) {}\n+  void visit (AST::RangeFromToInclExpr &) {}\n+  void visit (AST::RangeToInclExpr &) {}\n+  void visit (AST::ReturnExpr &) {}\n+  void visit (AST::UnsafeBlockExpr &) {}\n+  void visit (AST::LoopExpr &) {}\n+  void visit (AST::WhileLoopExpr &) {}\n+  void visit (AST::WhileLetLoopExpr &) {}\n+  void visit (AST::ForLoopExpr &) {}\n+  void visit (AST::IfExpr &) {}\n+  void visit (AST::IfExprConseqElse &) {}\n+  void visit (AST::IfExprConseqIf &) {}\n+  void visit (AST::IfExprConseqIfLet &) {}\n+  void visit (AST::IfLetExpr &) {}\n+  void visit (AST::IfLetExprConseqElse &) {}\n+  void visit (AST::IfLetExprConseqIf &) {}\n+  void visit (AST::IfLetExprConseqIfLet &) {}\n+\n+  void visit (AST::MatchExpr &) {}\n+  void visit (AST::AwaitExpr &) {}\n+  void visit (AST::AsyncBlockExpr &) {}\n+\n+  void visit (AST::TypeParam &) {}\n+\n+  void visit (AST::LifetimeWhereClauseItem &) {}\n+  void visit (AST::TypeBoundWhereClauseItem &) {}\n+  void visit (AST::Method &) {}\n+  void visit (AST::ModuleBodied &) {}\n+  void visit (AST::ModuleNoBody &) {}\n+  void visit (AST::ExternCrate &) {}\n+\n+  void visit (AST::UseTreeGlob &) {}\n+  void visit (AST::UseTreeList &) {}\n+  void visit (AST::UseTreeRebind &) {}\n+  void visit (AST::UseDeclaration &) {}\n+  void visit (AST::Function &) {}\n+  void visit (AST::TypeAlias &) {}\n+  void visit (AST::StructStruct &) {}\n+  void visit (AST::TupleStruct &) {}\n+  void visit (AST::EnumItem &) {}\n+  void visit (AST::EnumItemTuple &) {}\n+  void visit (AST::EnumItemStruct &) {}\n+  void visit (AST::EnumItemDiscriminant &) {}\n+  void visit (AST::Enum &) {}\n+  void visit (AST::Union &) {}\n+  void visit (AST::ConstantItem &) {}\n+  void visit (AST::StaticItem &) {}\n+  void visit (AST::TraitItemFunc &) {}\n+  void visit (AST::TraitItemMethod &) {}\n+  void visit (AST::TraitItemConst &) {}\n+  void visit (AST::TraitItemType &) {}\n+  void visit (AST::Trait &) {}\n+  void visit (AST::InherentImpl &) {}\n+  void visit (AST::TraitImpl &) {}\n+\n+  void visit (AST::ExternalStaticItem &) {}\n+  void visit (AST::ExternalFunctionItem &) {}\n+  void visit (AST::ExternBlock &) {}\n+\n+  void visit (AST::MacroMatchFragment &) {}\n+  void visit (AST::MacroMatchRepetition &) {}\n+  void visit (AST::MacroMatcher &) {}\n+  void visit (AST::MacroRulesDefinition &) {}\n+  void visit (AST::MacroInvocation &) {}\n+  void visit (AST::MetaItemPath &) {}\n+  void visit (AST::MetaItemSeq &) {}\n+  void visit (AST::MetaWord &) {}\n+  void visit (AST::MetaNameValueStr &) {}\n+  void visit (AST::MetaListPaths &) {}\n+  void visit (AST::MetaListNameValueStr &) {}\n+\n+  void visit (AST::LiteralPattern &) {}\n+  void visit (AST::IdentifierPattern &) {}\n+  void visit (AST::WildcardPattern &) {}\n+\n+  void visit (AST::RangePatternBoundLiteral &) {}\n+  void visit (AST::RangePatternBoundPath &) {}\n+  void visit (AST::RangePatternBoundQualPath &) {}\n+  void visit (AST::RangePattern &) {}\n+  void visit (AST::ReferencePattern &) {}\n+\n+  void visit (AST::StructPatternFieldTuplePat &) {}\n+  void visit (AST::StructPatternFieldIdentPat &) {}\n+  void visit (AST::StructPatternFieldIdent &) {}\n+  void visit (AST::StructPattern &) {}\n+\n+  void visit (AST::TupleStructItemsNoRange &) {}\n+  void visit (AST::TupleStructItemsRange &) {}\n+  void visit (AST::TupleStructPattern &) {}\n+\n+  void visit (AST::TuplePatternItemsMultiple &) {}\n+  void visit (AST::TuplePatternItemsRanged &) {}\n+  void visit (AST::TuplePattern &) {}\n+  void visit (AST::GroupedPattern &) {}\n+  void visit (AST::SlicePattern &) {}\n+\n+  void visit (AST::EmptyStmt &) {}\n+  void visit (AST::LetStmt &) {}\n+  void visit (AST::ExprStmtWithoutBlock &) {}\n+  void visit (AST::ExprStmtWithBlock &) {}\n+\n+  void visit (AST::TraitBound &) {}\n+  void visit (AST::ImplTraitType &) {}\n+  void visit (AST::TraitObjectType &) {}\n+  void visit (AST::ParenthesisedType &) {}\n+  void visit (AST::ImplTraitTypeOneBound &) {}\n+  void visit (AST::TraitObjectTypeOneBound &) {}\n+  void visit (AST::TupleType &) {}\n+  void visit (AST::NeverType &) {}\n+  void visit (AST::RawPointerType &) {}\n+  void visit (AST::ReferenceType &) {}\n+  void visit (AST::ArrayType &) {}\n+  void visit (AST::SliceType &) {}\n+  void visit (AST::InferredType &) {}\n+  void visit (AST::BareFunctionType &) {}\n \n protected:\n   ResolverBase (NodeId parent)"}, {"sha": "6906878ada7bbef393d5cbe68cfda7a6995f5531", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 180, "deletions": 203, "changes": 383, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=db7134353447921136a321b8fd78cea78f2c344e", "patch": "@@ -34,209 +34,186 @@ class TypeCheckBase : public HIR::HIRVisitor\n public:\n   virtual ~TypeCheckBase () {}\n \n-  // visitor impl\n-  // rust-ast.h\n-  //  virtual void visit(AttrInput& attr_input);\n-  //  virtual void visit(TokenTree& token_tree);\n-  //  virtual void visit(MacroMatch& macro_match);\n-  virtual void visit (HIR::Token &tok) {}\n-  virtual void visit (HIR::DelimTokenTree &delim_tok_tree) {}\n-  virtual void visit (HIR::AttrInputMetaItemContainer &input) {}\n-  //  virtual void visit(MetaItem& meta_item) {}\n-  //  void vsit(Stmt& stmt) {}\n-  //  virtual void visit(Expr& expr) {}\n-  virtual void visit (HIR::IdentifierExpr &ident_expr) {}\n-  //  virtual void visit(Pattern& pattern) {}\n-  //  virtual void visit(Type& type) {}\n-  //  virtual void visit(TypeParamBound& type_param_bound) {}\n-  virtual void visit (HIR::Lifetime &lifetime) {}\n-  //  virtual void visit(GenericParam& generic_param) {}\n-  virtual void visit (HIR::LifetimeParam &lifetime_param) {}\n-  //  virtual void visit(TraitItem& trait_item) {}\n-  //  virtual void visit(InherentImplItem& inherent_impl_item) {}\n-  //  virtual void visit(TraitImplItem& trait_impl_item) {}\n-\n-  // rust-path.h\n-  virtual void visit (HIR::PathInExpression &path) {}\n-  virtual void visit (HIR::TypePathSegment &segment) {}\n-  virtual void visit (HIR::TypePathSegmentGeneric &segment) {}\n-  virtual void visit (HIR::TypePathSegmentFunction &segment) {}\n-  virtual void visit (HIR::TypePath &path) {}\n-  virtual void visit (HIR::QualifiedPathInExpression &path) {}\n-  virtual void visit (HIR::QualifiedPathInType &path) {}\n-\n-  // rust-expr.h\n-  virtual void visit (HIR::LiteralExpr &expr) {}\n-  virtual void visit (HIR::AttrInputLiteral &attr_input) {}\n-  virtual void visit (HIR::MetaItemLitExpr &meta_item) {}\n-  virtual void visit (HIR::MetaItemPathLit &meta_item) {}\n-  virtual void visit (HIR::BorrowExpr &expr) {}\n-  virtual void visit (HIR::DereferenceExpr &expr) {}\n-  virtual void visit (HIR::ErrorPropagationExpr &expr) {}\n-  virtual void visit (HIR::NegationExpr &expr) {}\n-  virtual void visit (HIR::ArithmeticOrLogicalExpr &expr) {}\n-  virtual void visit (HIR::ComparisonExpr &expr) {}\n-  virtual void visit (HIR::LazyBooleanExpr &expr) {}\n-  virtual void visit (HIR::TypeCastExpr &expr) {}\n-  virtual void visit (HIR::AssignmentExpr &expr) {}\n-  virtual void visit (HIR::CompoundAssignmentExpr &expr) {}\n-  virtual void visit (HIR::GroupedExpr &expr) {}\n-  //  virtual void visit(ArrayElems& elems) {}\n-  virtual void visit (HIR::ArrayElemsValues &elems) {}\n-  virtual void visit (HIR::ArrayElemsCopied &elems) {}\n-  virtual void visit (HIR::ArrayExpr &expr) {}\n-  virtual void visit (HIR::ArrayIndexExpr &expr) {}\n-  virtual void visit (HIR::TupleExpr &expr) {}\n-  virtual void visit (HIR::TupleIndexExpr &expr) {}\n-  virtual void visit (HIR::StructExprStruct &expr) {}\n-  //  virtual void visit(StructExprField& field) {}\n-  virtual void visit (HIR::StructExprFieldIdentifier &field) {}\n-  virtual void visit (HIR::StructExprFieldIdentifierValue &field) {}\n-  virtual void visit (HIR::StructExprFieldIndexValue &field) {}\n-  virtual void visit (HIR::StructExprStructFields &expr) {}\n-  virtual void visit (HIR::StructExprStructBase &expr) {}\n-  virtual void visit (HIR::StructExprTuple &expr) {}\n-  virtual void visit (HIR::StructExprUnit &expr) {}\n-  //  virtual void visit(EnumExprField& field) {}\n-  virtual void visit (HIR::EnumExprFieldIdentifier &field) {}\n-  virtual void visit (HIR::EnumExprFieldIdentifierValue &field) {}\n-  virtual void visit (HIR::EnumExprFieldIndexValue &field) {}\n-  virtual void visit (HIR::EnumExprStruct &expr) {}\n-  virtual void visit (HIR::EnumExprTuple &expr) {}\n-  virtual void visit (HIR::EnumExprFieldless &expr) {}\n-  virtual void visit (HIR::CallExpr &expr) {}\n-  virtual void visit (HIR::MethodCallExpr &expr) {}\n-  virtual void visit (HIR::FieldAccessExpr &expr) {}\n-  virtual void visit (HIR::ClosureExprInner &expr) {}\n-  virtual void visit (HIR::BlockExpr &expr) {}\n-  virtual void visit (HIR::ClosureExprInnerTyped &expr) {}\n-  virtual void visit (HIR::ContinueExpr &expr) {}\n-  virtual void visit (HIR::BreakExpr &expr) {}\n-  virtual void visit (HIR::RangeFromToExpr &expr) {}\n-  virtual void visit (HIR::RangeFromExpr &expr) {}\n-  virtual void visit (HIR::RangeToExpr &expr) {}\n-  virtual void visit (HIR::RangeFullExpr &expr) {}\n-  virtual void visit (HIR::RangeFromToInclExpr &expr) {}\n-  virtual void visit (HIR::RangeToInclExpr &expr) {}\n-  virtual void visit (HIR::ReturnExpr &expr) {}\n-  virtual void visit (HIR::UnsafeBlockExpr &expr) {}\n-  virtual void visit (HIR::LoopExpr &expr) {}\n-  virtual void visit (HIR::WhileLoopExpr &expr) {}\n-  virtual void visit (HIR::WhileLetLoopExpr &expr) {}\n-  virtual void visit (HIR::ForLoopExpr &expr) {}\n-  virtual void visit (HIR::IfExpr &expr) {}\n-  virtual void visit (HIR::IfExprConseqElse &expr) {}\n-  virtual void visit (HIR::IfExprConseqIf &expr) {}\n-  virtual void visit (HIR::IfExprConseqIfLet &expr) {}\n-  virtual void visit (HIR::IfLetExpr &expr) {}\n-  virtual void visit (HIR::IfLetExprConseqElse &expr) {}\n-  virtual void visit (HIR::IfLetExprConseqIf &expr) {}\n-  virtual void visit (HIR::IfLetExprConseqIfLet &expr) {}\n-  //  virtual void visit(MatchCase& match_case) {}\n-  // virtual void visit (HIR::MatchCaseBlockExpr &match_case) {}\n-  // virtual void visit (HIR::MatchCaseExpr &match_case) {}\n-  virtual void visit (HIR::MatchExpr &expr) {}\n-  virtual void visit (HIR::AwaitExpr &expr) {}\n-  virtual void visit (HIR::AsyncBlockExpr &expr) {}\n-\n-  // rust-item.h\n-  virtual void visit (HIR::TypeParam &param) {}\n-  //  virtual void visit(WhereClauseItem& item) {}\n-  virtual void visit (HIR::LifetimeWhereClauseItem &item) {}\n-  virtual void visit (HIR::TypeBoundWhereClauseItem &item) {}\n-  virtual void visit (HIR::Method &method) {}\n-  virtual void visit (HIR::ModuleBodied &module) {}\n-  virtual void visit (HIR::ModuleNoBody &module) {}\n-  virtual void visit (HIR::ExternCrate &crate) {}\n-  //  virtual void visit(UseTree& use_tree) {}\n-  virtual void visit (HIR::UseTreeGlob &use_tree) {}\n-  virtual void visit (HIR::UseTreeList &use_tree) {}\n-  virtual void visit (HIR::UseTreeRebind &use_tree) {}\n-  virtual void visit (HIR::UseDeclaration &use_decl) {}\n-  virtual void visit (HIR::Function &function) {}\n-  virtual void visit (HIR::TypeAlias &type_alias) {}\n-  virtual void visit (HIR::StructStruct &struct_item) {}\n-  virtual void visit (HIR::TupleStruct &tuple_struct) {}\n-  virtual void visit (HIR::EnumItem &item) {}\n-  virtual void visit (HIR::EnumItemTuple &item) {}\n-  virtual void visit (HIR::EnumItemStruct &item) {}\n-  virtual void visit (HIR::EnumItemDiscriminant &item) {}\n-  virtual void visit (HIR::Enum &enum_item) {}\n-  virtual void visit (HIR::Union &union_item) {}\n-  virtual void visit (HIR::ConstantItem &const_item) {}\n-  virtual void visit (HIR::StaticItem &static_item) {}\n-  virtual void visit (HIR::TraitItemFunc &item) {}\n-  virtual void visit (HIR::TraitItemMethod &item) {}\n-  virtual void visit (HIR::TraitItemConst &item) {}\n-  virtual void visit (HIR::TraitItemType &item) {}\n-  virtual void visit (HIR::Trait &trait) {}\n-  virtual void visit (HIR::InherentImpl &impl) {}\n-  virtual void visit (HIR::TraitImpl &impl) {}\n-  //  virtual void visit(ExternalItem& item) {}\n-  virtual void visit (HIR::ExternalStaticItem &item) {}\n-  virtual void visit (HIR::ExternalFunctionItem &item) {}\n-  virtual void visit (HIR::ExternBlock &block) {}\n-\n-  // rust-macro.h\n-  virtual void visit (HIR::MacroMatchFragment &match) {}\n-  virtual void visit (HIR::MacroMatchRepetition &match) {}\n-  virtual void visit (HIR::MacroMatcher &matcher) {}\n-  virtual void visit (HIR::MacroRulesDefinition &rules_def) {}\n-  virtual void visit (HIR::MacroInvocation &macro_invoc) {}\n-  virtual void visit (HIR::MetaItemPath &meta_item) {}\n-  virtual void visit (HIR::MetaItemSeq &meta_item) {}\n-  virtual void visit (HIR::MetaWord &meta_item) {}\n-  virtual void visit (HIR::MetaNameValueStr &meta_item) {}\n-  virtual void visit (HIR::MetaListPaths &meta_item) {}\n-  virtual void visit (HIR::MetaListNameValueStr &meta_item) {}\n-\n-  // rust-pattern.h\n-  virtual void visit (HIR::LiteralPattern &pattern) {}\n-  virtual void visit (HIR::IdentifierPattern &pattern) {}\n-  virtual void visit (HIR::WildcardPattern &pattern) {}\n-  //  virtual void visit(RangePatternBound& bound) {}\n-  virtual void visit (HIR::RangePatternBoundLiteral &bound) {}\n-  virtual void visit (HIR::RangePatternBoundPath &bound) {}\n-  virtual void visit (HIR::RangePatternBoundQualPath &bound) {}\n-  virtual void visit (HIR::RangePattern &pattern) {}\n-  virtual void visit (HIR::ReferencePattern &pattern) {}\n-  //  virtual void visit(StructPatternField& field) {}\n-  virtual void visit (HIR::StructPatternFieldTuplePat &field) {}\n-  virtual void visit (HIR::StructPatternFieldIdentPat &field) {}\n-  virtual void visit (HIR::StructPatternFieldIdent &field) {}\n-  virtual void visit (HIR::StructPattern &pattern) {}\n-  //  virtual void visit(TupleStructItems& tuple_items) {}\n-  virtual void visit (HIR::TupleStructItemsNoRange &tuple_items) {}\n-  virtual void visit (HIR::TupleStructItemsRange &tuple_items) {}\n-  virtual void visit (HIR::TupleStructPattern &pattern) {}\n-  //  virtual void visit(TuplePatternItems& tuple_items) {}\n-  virtual void visit (HIR::TuplePatternItemsMultiple &tuple_items) {}\n-  virtual void visit (HIR::TuplePatternItemsRanged &tuple_items) {}\n-  virtual void visit (HIR::TuplePattern &pattern) {}\n-  virtual void visit (HIR::GroupedPattern &pattern) {}\n-  virtual void visit (HIR::SlicePattern &pattern) {}\n-\n-  // rust-stmt.h\n-  virtual void visit (HIR::EmptyStmt &stmt) {}\n-  virtual void visit (HIR::LetStmt &stmt) {}\n-  virtual void visit (HIR::ExprStmtWithoutBlock &stmt) {}\n-  virtual void visit (HIR::ExprStmtWithBlock &stmt) {}\n-\n-  // rust-type.h\n-  virtual void visit (HIR::TraitBound &bound) {}\n-  virtual void visit (HIR::ImplTraitType &type) {}\n-  virtual void visit (HIR::TraitObjectType &type) {}\n-  virtual void visit (HIR::ParenthesisedType &type) {}\n-  virtual void visit (HIR::ImplTraitTypeOneBound &type) {}\n-  virtual void visit (HIR::TraitObjectTypeOneBound &type) {}\n-  virtual void visit (HIR::TupleType &type) {}\n-  virtual void visit (HIR::NeverType &type) {}\n-  virtual void visit (HIR::RawPointerType &type) {}\n-  virtual void visit (HIR::ReferenceType &type) {}\n-  virtual void visit (HIR::ArrayType &type) {}\n-  virtual void visit (HIR::SliceType &type) {}\n-  virtual void visit (HIR::InferredType &type) {}\n-  virtual void visit (HIR::BareFunctionType &type) {}\n+  virtual void visit (HIR::Token &) override {}\n+  virtual void visit (HIR::DelimTokenTree &) override {}\n+  virtual void visit (HIR::AttrInputMetaItemContainer &) override {}\n+  virtual void visit (HIR::IdentifierExpr &) override {}\n+  virtual void visit (HIR::Lifetime &) override {}\n+  virtual void visit (HIR::LifetimeParam &) override {}\n+  virtual void visit (HIR::PathInExpression &) override {}\n+  virtual void visit (HIR::TypePathSegment &) override {}\n+  virtual void visit (HIR::TypePathSegmentGeneric &) override {}\n+  virtual void visit (HIR::TypePathSegmentFunction &) override {}\n+  virtual void visit (HIR::TypePath &) override {}\n+  virtual void visit (HIR::QualifiedPathInExpression &) override {}\n+  virtual void visit (HIR::QualifiedPathInType &) override {}\n+\n+  virtual void visit (HIR::LiteralExpr &) override {}\n+  virtual void visit (HIR::AttrInputLiteral &) override {}\n+  virtual void visit (HIR::MetaItemLitExpr &) override {}\n+  virtual void visit (HIR::MetaItemPathLit &) override {}\n+  virtual void visit (HIR::BorrowExpr &) override {}\n+  virtual void visit (HIR::DereferenceExpr &) override {}\n+  virtual void visit (HIR::ErrorPropagationExpr &) override {}\n+  virtual void visit (HIR::NegationExpr &) override {}\n+  virtual void visit (HIR::ArithmeticOrLogicalExpr &) override {}\n+  virtual void visit (HIR::ComparisonExpr &) override {}\n+  virtual void visit (HIR::LazyBooleanExpr &) override {}\n+  virtual void visit (HIR::TypeCastExpr &) override {}\n+  virtual void visit (HIR::AssignmentExpr &) override {}\n+\n+  virtual void visit (HIR::GroupedExpr &) override {}\n+\n+  virtual void visit (HIR::ArrayElemsValues &) override {}\n+  virtual void visit (HIR::ArrayElemsCopied &) override {}\n+  virtual void visit (HIR::ArrayExpr &) override {}\n+  virtual void visit (HIR::ArrayIndexExpr &) override {}\n+  virtual void visit (HIR::TupleExpr &) override {}\n+  virtual void visit (HIR::TupleIndexExpr &) override {}\n+  virtual void visit (HIR::StructExprStruct &) override {}\n+\n+  virtual void visit (HIR::StructExprFieldIdentifier &) override {}\n+  virtual void visit (HIR::StructExprFieldIdentifierValue &) override {}\n+\n+  virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n+  virtual void visit (HIR::StructExprStructFields &) override {}\n+  virtual void visit (HIR::StructExprStructBase &) override {}\n+  virtual void visit (HIR::StructExprTuple &) override {}\n+  virtual void visit (HIR::StructExprUnit &) override {}\n+\n+  virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n+  virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}\n+\n+  virtual void visit (HIR::EnumExprFieldIndexValue &) override {}\n+  virtual void visit (HIR::EnumExprStruct &) override {}\n+  virtual void visit (HIR::EnumExprTuple &) override {}\n+  virtual void visit (HIR::EnumExprFieldless &) override {}\n+  virtual void visit (HIR::CallExpr &) override {}\n+  virtual void visit (HIR::MethodCallExpr &) override {}\n+  virtual void visit (HIR::FieldAccessExpr &) override {}\n+  virtual void visit (HIR::ClosureExprInner &) override {}\n+  virtual void visit (HIR::BlockExpr &) override {}\n+  virtual void visit (HIR::ClosureExprInnerTyped &) override {}\n+  virtual void visit (HIR::ContinueExpr &) override {}\n+  virtual void visit (HIR::BreakExpr &) override {}\n+  virtual void visit (HIR::RangeFromToExpr &) override {}\n+  virtual void visit (HIR::RangeFromExpr &) override {}\n+  virtual void visit (HIR::RangeToExpr &) override {}\n+  virtual void visit (HIR::RangeFullExpr &) override {}\n+  virtual void visit (HIR::RangeFromToInclExpr &) override {}\n+  virtual void visit (HIR::RangeToInclExpr &) override {}\n+  virtual void visit (HIR::ReturnExpr &) override {}\n+  virtual void visit (HIR::UnsafeBlockExpr &) override {}\n+  virtual void visit (HIR::LoopExpr &) override {}\n+  virtual void visit (HIR::WhileLoopExpr &) override {}\n+  virtual void visit (HIR::WhileLetLoopExpr &) override {}\n+  virtual void visit (HIR::ForLoopExpr &) override {}\n+  virtual void visit (HIR::IfExpr &) override {}\n+  virtual void visit (HIR::IfExprConseqElse &) override {}\n+  virtual void visit (HIR::IfExprConseqIf &) override {}\n+  virtual void visit (HIR::IfExprConseqIfLet &) override {}\n+  virtual void visit (HIR::IfLetExpr &) override {}\n+  virtual void visit (HIR::IfLetExprConseqElse &) override {}\n+  virtual void visit (HIR::IfLetExprConseqIf &) override {}\n+  virtual void visit (HIR::IfLetExprConseqIfLet &) override {}\n+\n+  virtual void visit (HIR::MatchExpr &) override {}\n+  virtual void visit (HIR::AwaitExpr &) override {}\n+  virtual void visit (HIR::AsyncBlockExpr &) override {}\n+\n+  virtual void visit (HIR::TypeParam &) override {}\n+\n+  virtual void visit (HIR::LifetimeWhereClauseItem &) override {}\n+  virtual void visit (HIR::TypeBoundWhereClauseItem &) override {}\n+  virtual void visit (HIR::Method &) override {}\n+  virtual void visit (HIR::ModuleBodied &) override {}\n+  virtual void visit (HIR::ModuleNoBody &) override {}\n+  virtual void visit (HIR::ExternCrate &) override {}\n+\n+  virtual void visit (HIR::UseTreeGlob &) override {}\n+  virtual void visit (HIR::UseTreeList &) override {}\n+  virtual void visit (HIR::UseTreeRebind &) override {}\n+  virtual void visit (HIR::UseDeclaration &) override {}\n+  virtual void visit (HIR::Function &) override {}\n+  virtual void visit (HIR::TypeAlias &) override {}\n+  virtual void visit (HIR::StructStruct &) override {}\n+  virtual void visit (HIR::TupleStruct &) override {}\n+  virtual void visit (HIR::EnumItem &) override {}\n+  virtual void visit (HIR::EnumItemTuple &) override {}\n+  virtual void visit (HIR::EnumItemStruct &) override {}\n+  virtual void visit (HIR::EnumItemDiscriminant &) override {}\n+  virtual void visit (HIR::Enum &) override {}\n+  virtual void visit (HIR::Union &) override {}\n+  virtual void visit (HIR::ConstantItem &) override {}\n+  virtual void visit (HIR::StaticItem &) override {}\n+  virtual void visit (HIR::TraitItemFunc &) override {}\n+  virtual void visit (HIR::TraitItemMethod &) override {}\n+  virtual void visit (HIR::TraitItemConst &) override {}\n+  virtual void visit (HIR::TraitItemType &) override {}\n+  virtual void visit (HIR::Trait &) override {}\n+  virtual void visit (HIR::InherentImpl &) override {}\n+  virtual void visit (HIR::TraitImpl &) override {}\n+\n+  virtual void visit (HIR::ExternalStaticItem &) override {}\n+  virtual void visit (HIR::ExternalFunctionItem &) override {}\n+  virtual void visit (HIR::ExternBlock &) override {}\n+\n+  virtual void visit (HIR::MacroMatchFragment &) override {}\n+  virtual void visit (HIR::MacroMatchRepetition &) override {}\n+  virtual void visit (HIR::MacroMatcher &) override {}\n+  virtual void visit (HIR::MacroRulesDefinition &) override {}\n+  virtual void visit (HIR::MacroInvocation &) override {}\n+  virtual void visit (HIR::MetaItemPath &) override {}\n+  virtual void visit (HIR::MetaItemSeq &) override {}\n+  virtual void visit (HIR::MetaWord &) override {}\n+  virtual void visit (HIR::MetaNameValueStr &) override {}\n+  virtual void visit (HIR::MetaListPaths &) override {}\n+  virtual void visit (HIR::MetaListNameValueStr &) override {}\n+\n+  virtual void visit (HIR::LiteralPattern &) override {}\n+  virtual void visit (HIR::IdentifierPattern &) override {}\n+  virtual void visit (HIR::WildcardPattern &) override {}\n+\n+  virtual void visit (HIR::RangePatternBoundLiteral &) override {}\n+  virtual void visit (HIR::RangePatternBoundPath &) override {}\n+  virtual void visit (HIR::RangePatternBoundQualPath &) override {}\n+  virtual void visit (HIR::RangePattern &) override {}\n+  virtual void visit (HIR::ReferencePattern &) override {}\n+\n+  virtual void visit (HIR::StructPatternFieldTuplePat &) override {}\n+  virtual void visit (HIR::StructPatternFieldIdentPat &) override {}\n+  virtual void visit (HIR::StructPatternFieldIdent &) override {}\n+  virtual void visit (HIR::StructPattern &) override {}\n+\n+  virtual void visit (HIR::TupleStructItemsNoRange &) override {}\n+  virtual void visit (HIR::TupleStructItemsRange &) override {}\n+  virtual void visit (HIR::TupleStructPattern &) override {}\n+\n+  virtual void visit (HIR::TuplePatternItemsMultiple &) override {}\n+  virtual void visit (HIR::TuplePatternItemsRanged &) override {}\n+  virtual void visit (HIR::TuplePattern &) override {}\n+  virtual void visit (HIR::GroupedPattern &) override {}\n+  virtual void visit (HIR::SlicePattern &) override {}\n+\n+  virtual void visit (HIR::EmptyStmt &) override {}\n+  virtual void visit (HIR::LetStmt &) override {}\n+  virtual void visit (HIR::ExprStmtWithoutBlock &) override {}\n+  virtual void visit (HIR::ExprStmtWithBlock &) override {}\n+\n+  virtual void visit (HIR::TraitBound &) override {}\n+  virtual void visit (HIR::ImplTraitType &) override {}\n+  virtual void visit (HIR::TraitObjectType &) override {}\n+  virtual void visit (HIR::ParenthesisedType &) override {}\n+  virtual void visit (HIR::ImplTraitTypeOneBound &) override {}\n+  virtual void visit (HIR::TraitObjectTypeOneBound &) override {}\n+  virtual void visit (HIR::TupleType &) override {}\n+  virtual void visit (HIR::NeverType &) override {}\n+  virtual void visit (HIR::RawPointerType &) override {}\n+  virtual void visit (HIR::ReferenceType &) override {}\n+  virtual void visit (HIR::ArrayType &) override {}\n+  virtual void visit (HIR::SliceType &) override {}\n+  virtual void visit (HIR::InferredType &) override {}\n+  virtual void visit (HIR::BareFunctionType &) override {}\n \n protected:\n   TypeCheckBase ()"}, {"sha": "06be1ac95beed185851bea790d18d9b59035e89b", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=db7134353447921136a321b8fd78cea78f2c344e", "patch": "@@ -38,7 +38,7 @@ class TypeCheckItem : public TypeCheckBase\n     item->accept_vis (resolver);\n   }\n \n-  void visit (HIR::InherentImpl &impl_block)\n+  void visit (HIR::InherentImpl &impl_block) override\n   {\n     TyTy::TyBase *self = nullptr;\n     if (!context->lookup_type (\n@@ -53,7 +53,7 @@ class TypeCheckItem : public TypeCheckBase\n       TypeCheckImplItem::Resolve (impl_item.get (), self);\n   }\n \n-  void visit (HIR::Function &function)\n+  void visit (HIR::Function &function) override\n   {\n     TyTy::TyBase *lookup;\n     if (!context->lookup_type (function.get_mappings ().get_hirid (), &lookup))"}, {"sha": "9d882fb2689538e2e3a38d489a6a0756b89dd309", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7134353447921136a321b8fd78cea78f2c344e/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=db7134353447921136a321b8fd78cea78f2c344e", "patch": "@@ -37,7 +37,7 @@ class TypeResolverDump : public TypeCheckBase\n     return dumper.dump;\n   }\n \n-  void visit (HIR::InherentImpl &impl_block)\n+  void visit (HIR::InherentImpl &impl_block) override\n   {\n     dump += indent () + \"impl \"\n \t    + type_string (impl_block.get_type ()->get_mappings ()) + \" {\\n\";\n@@ -53,15 +53,15 @@ class TypeResolverDump : public TypeCheckBase\n     dump += indent () + \"}\\n\";\n   }\n \n-  void visit (HIR::ConstantItem &constant)\n+  void visit (HIR::ConstantItem &constant) override\n   {\n     dump += indent () + \"constant \" + constant.get_identifier () + \":\"\n \t    + type_string (constant.get_mappings ()) + \" = \";\n     constant.get_expr ()->accept_vis (*this);\n     dump += \";\\n\";\n   }\n \n-  void visit (HIR::Function &function)\n+  void visit (HIR::Function &function) override\n   {\n     dump += indent () + \"fn \" + function.function_name + \" \"\n \t    + type_string (function.get_mappings ()) + \"\\n\";\n@@ -73,7 +73,7 @@ class TypeResolverDump : public TypeCheckBase\n     dump += indent () + \"}\\n\";\n   }\n \n-  void visit (HIR::Method &method)\n+  void visit (HIR::Method &method) override\n   {\n     dump += indent () + \"fn \" + method.get_method_name () + \" \"\n \t    + type_string (method.get_mappings ()) + \"\\n\";\n@@ -85,7 +85,7 @@ class TypeResolverDump : public TypeCheckBase\n     dump += indent () + \"}\\n\";\n   }\n \n-  void visit (HIR::BlockExpr &expr)\n+  void visit (HIR::BlockExpr &expr) override\n   {\n     indentation_level++;\n \n@@ -106,7 +106,7 @@ class TypeResolverDump : public TypeCheckBase\n     indentation_level--;\n   }\n \n-  void visit (HIR::LetStmt &stmt)\n+  void visit (HIR::LetStmt &stmt) override\n   {\n     dump += \"let \" + stmt.get_pattern ()->as_string () + \":\"\n \t    + type_string (stmt.get_mappings ());\n@@ -117,35 +117,35 @@ class TypeResolverDump : public TypeCheckBase\n       }\n   }\n \n-  void visit (HIR::ExprStmtWithBlock &stmt)\n+  void visit (HIR::ExprStmtWithBlock &stmt) override\n   {\n     stmt.get_expr ()->accept_vis (*this);\n   }\n \n-  void visit (HIR::ExprStmtWithoutBlock &stmt)\n+  void visit (HIR::ExprStmtWithoutBlock &stmt) override\n   {\n     stmt.get_expr ()->accept_vis (*this);\n   }\n \n-  void visit (HIR::AssignmentExpr &expr)\n+  void visit (HIR::AssignmentExpr &expr) override\n   {\n     expr.get_lhs ()->accept_vis (*this);\n     dump += \" = \";\n     expr.get_rhs ()->accept_vis (*this);\n   }\n \n-  void visit (HIR::LiteralExpr &expr)\n+  void visit (HIR::LiteralExpr &expr) override\n   {\n     dump += expr.get_literal ()->as_string () + \":\"\n \t    + type_string (expr.get_mappings ());\n   }\n \n-  void visit (HIR::IdentifierExpr &expr)\n+  void visit (HIR::IdentifierExpr &expr) override\n   {\n     dump += expr.get_identifier () + \":\" + type_string (expr.get_mappings ());\n   }\n \n-  void visit (HIR::ArrayExpr &expr)\n+  void visit (HIR::ArrayExpr &expr) override\n   {\n     dump += type_string (expr.get_mappings ()) + \":[\";\n \n@@ -155,7 +155,7 @@ class TypeResolverDump : public TypeCheckBase\n     dump += \"]\";\n   }\n \n-  void visit (HIR::ArrayElemsValues &elems)\n+  void visit (HIR::ArrayElemsValues &elems) override\n   {\n     elems.iterate ([&] (HIR::Expr *e) mutable -> bool {\n       e->accept_vis (*this);\n@@ -164,15 +164,15 @@ class TypeResolverDump : public TypeCheckBase\n     });\n   }\n \n-  void visit (HIR::GroupedExpr &expr)\n+  void visit (HIR::GroupedExpr &expr) override\n   {\n     HIR::Expr *paren_expr = expr.get_expr_in_parens ().get ();\n     dump += \"(\";\n     paren_expr->accept_vis (*this);\n     dump += \")\";\n   }\n \n-  void visit (HIR::PathInExpression &expr)\n+  void visit (HIR::PathInExpression &expr) override\n   {\n     dump += type_string (expr.get_mappings ());\n   }"}]}