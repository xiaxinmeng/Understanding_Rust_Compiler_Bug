{"sha": "0af711e1914ab6d88538f1fcf0146757b5608b1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFmNzExZTE5MTRhYjZkODg1MzhmMWZjZjAxNDY3NTdiNTYwOGIxZA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-05-06T21:34:11Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-05-06T21:56:24Z"}, "message": "d: Fix ICE in verify_gimple_stmt, at tree-cfg.c:4959\n\nBoth array concat and array new expressions wrapped any temporaries\ncreated into a BIND_EXPR.  This does not work if an expression used to\nconstruct the result requires scope destruction, which is represented by\na TARGET_EXPR with a clean-up, and a CLEANUP_POINT_EXPR at the\nlocation where the temporaries logically go out of scope.  The reason\nfor this not working is because the lowering of cleanup point\nexpressions does not traverse inside BIND_EXPRs to expand any gimple\ncleanup expressions within.\n\nThe use of creating BIND_EXPR has been removed at both locations, and\nreplaced with a normal temporary variable that has initialization\ndelayed until its address is taken.\n\ngcc/d/ChangeLog:\n\n\tPR d/94970\n\t* d-codegen.cc (force_target_expr): Move create_temporary_var\n\timplementation inline here.\n\t(create_temporary_var): Remove.\n\t(maybe_temporary_var): Remove.\n\t(bind_expr): Remove.\n\t* d-convert.cc (d_array_convert): Use build_local_temp to generate\n\ttemporaries, and generate its assignment.\n\t* d-tree.h (create_temporary_var): Remove.\n\t(maybe_temporary_var): Remove.\n\t(d_array_convert): Remove vars argument.\n\t* expr.cc (ExprVisitor::visit (CatExp *)): Use build_local_temp to\n\tgenerate temporaries, don't wrap them in a BIND_EXPR.\n\t(ExprVisitor::visit (NewExp *)): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/94970\n\t* gdc.dg/pr94970.d: New test.", "tree": {"sha": "df70951ad00460851908ea8166de5c247d59cc32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df70951ad00460851908ea8166de5c247d59cc32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0af711e1914ab6d88538f1fcf0146757b5608b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af711e1914ab6d88538f1fcf0146757b5608b1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0af711e1914ab6d88538f1fcf0146757b5608b1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af711e1914ab6d88538f1fcf0146757b5608b1d/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fcef99f49cc2d9f28d98f8ecdbf8263e9e0a87"}], "stats": {"total": 160, "additions": 71, "deletions": 89}, "files": [{"sha": "fc11daf0dee97da1657d510121472e9914085271", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=0af711e1914ab6d88538f1fcf0146757b5608b1d", "patch": "@@ -1,3 +1,20 @@\n+2020-05-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/94970\n+\t* d-codegen.cc (force_target_expr): Move create_temporary_var\n+\timplementation inline here.\n+\t(create_temporary_var): Remove.\n+\t(maybe_temporary_var): Remove.\n+\t(bind_expr): Remove.\n+\t* d-convert.cc (d_array_convert): Use build_local_temp to generate\n+\ttemporaries, and generate its assignment.\n+\t* d-tree.h (create_temporary_var): Remove.\n+\t(maybe_temporary_var): Remove.\n+\t(d_array_convert): Remove vars argument.\n+\t* expr.cc (ExprVisitor::visit (CatExp *)): Use build_local_temp to\n+\tgenerate temporaries, don't wrap them in a BIND_EXPR.\n+\t(ExprVisitor::visit (NewExp *)): Likewise.\n+\n 2020-04-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* gdc.texi (Options for Linking): Clarify usage of -defaultlib= and"}, {"sha": "5efd4b9c43cafa91ecac209401df3a8ac53ce731", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 6, "deletions": 61, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=0af711e1914ab6d88538f1fcf0146757b5608b1d", "patch": "@@ -619,7 +619,12 @@ build_target_expr (tree decl, tree exp)\n tree\n force_target_expr (tree exp)\n {\n-  tree decl = create_temporary_var (TREE_TYPE (exp));\n+  tree decl = build_decl (input_location, VAR_DECL, NULL_TREE,\n+\t\t\t  TREE_TYPE (exp));\n+  DECL_CONTEXT (decl) = current_function_decl;\n+  DECL_ARTIFICIAL (decl) = 1;\n+  DECL_IGNORED_P (decl) = 1;\n+  layout_decl (decl, 0);\n \n   return build_target_expr (decl, exp);\n }\n@@ -1766,66 +1771,6 @@ array_bounds_check (void)\n     }\n }\n \n-/* Return an undeclared local temporary of type TYPE\n-   for use with BIND_EXPR.  */\n-\n-tree\n-create_temporary_var (tree type)\n-{\n-  tree decl = build_decl (input_location, VAR_DECL, NULL_TREE, type);\n-\n-  DECL_CONTEXT (decl) = current_function_decl;\n-  DECL_ARTIFICIAL (decl) = 1;\n-  DECL_IGNORED_P (decl) = 1;\n-  layout_decl (decl, 0);\n-\n-  return decl;\n-}\n-\n-/* Return an undeclared local temporary OUT_VAR initialized\n-   with result of expression EXP.  */\n-\n-tree\n-maybe_temporary_var (tree exp, tree *out_var)\n-{\n-  tree t = exp;\n-\n-  /* Get the base component.  */\n-  while (TREE_CODE (t) == COMPONENT_REF)\n-    t = TREE_OPERAND (t, 0);\n-\n-  if (!DECL_P (t) && !REFERENCE_CLASS_P (t))\n-    {\n-      *out_var = create_temporary_var (TREE_TYPE (exp));\n-      DECL_INITIAL (*out_var) = exp;\n-      return *out_var;\n-    }\n-  else\n-    {\n-      *out_var = NULL_TREE;\n-      return exp;\n-    }\n-}\n-\n-/* Builds a BIND_EXPR around BODY for the variables VAR_CHAIN.  */\n-\n-tree\n-bind_expr (tree var_chain, tree body)\n-{\n-  /* Only handles one var.  */\n-  gcc_assert (TREE_CHAIN (var_chain) == NULL_TREE);\n-\n-  if (DECL_INITIAL (var_chain))\n-    {\n-      tree ini = build_assign (INIT_EXPR, var_chain, DECL_INITIAL (var_chain));\n-      DECL_INITIAL (var_chain) = NULL_TREE;\n-      body = compound_expr (ini, body);\n-    }\n-\n-  return d_save_expr (build3 (BIND_EXPR, TREE_TYPE (body),\n-\t\t\t      var_chain, body, NULL_TREE));\n-}\n-\n /* Returns the TypeFunction class for Type T.\n    Assumes T is already ->toBasetype().  */\n "}, {"sha": "f93405ed95666f7ea873dfed3a992d08282122f6", "filename": "gcc/d/d-convert.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Fd%2Fd-convert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Fd%2Fd-convert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-convert.cc?ref=0af711e1914ab6d88538f1fcf0146757b5608b1d", "patch": "@@ -774,21 +774,23 @@ d_array_convert (Expression *exp)\n \n /* Convert EXP to a dynamic array, where ETYPE is the element type.\n    Similar to above, except that EXP is allowed to be an element of an array.\n-   Temporary variables that need some kind of BIND_EXPR are pushed to VARS.  */\n+   Temporary variables are created inline if EXP is not an lvalue.  */\n \n tree\n-d_array_convert (Type *etype, Expression *exp, vec<tree, va_gc> **vars)\n+d_array_convert (Type *etype, Expression *exp)\n {\n   Type *tb = exp->type->toBasetype ();\n \n   if ((tb->ty != Tarray && tb->ty != Tsarray) || same_type_p (tb, etype))\n     {\n       /* Convert single element to an array.  */\n-      tree var = NULL_TREE;\n-      tree expr = maybe_temporary_var (build_expr (exp), &var);\n+      tree expr = build_expr (exp);\n \n-      if (var != NULL_TREE)\n-\tvec_safe_push (*vars, var);\n+      if (!exp->isLvalue ())\n+\t{\n+\t  tree var = build_local_temp (TREE_TYPE (expr));\n+\t  expr = compound_expr (modify_expr (var, expr), var);\n+\t}\n \n       return d_array_value (build_ctype (exp->type->arrayOf ()),\n \t\t\t    size_int (1), build_address (expr));"}, {"sha": "33022055e3e286eb87e9a9c99e7bb1f8bcc3b77e", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=0af711e1914ab6d88538f1fcf0146757b5608b1d", "patch": "@@ -561,8 +561,6 @@ extern tree build_array_from_val (Type *, tree);\n extern tree void_okay_p (tree);\n extern tree build_bounds_condition (const Loc &, tree, tree, bool);\n extern bool array_bounds_check (void);\n-extern tree create_temporary_var (tree);\n-extern tree maybe_temporary_var (tree, tree *);\n extern tree bind_expr (tree, tree);\n extern TypeFunction *get_function_type (Type *);\n extern bool call_by_alias_p (FuncDeclaration *, FuncDeclaration *);\n@@ -586,7 +584,7 @@ extern tree convert_for_assignment (tree, Type *, Type *);\n extern tree convert_for_argument (tree, Parameter *);\n extern tree convert_for_condition (tree, Type *);\n extern tree d_array_convert (Expression *);\n-extern tree d_array_convert (Type *, Expression *, vec<tree, va_gc> **);\n+extern tree d_array_convert (Type *, Expression *);\n \n /* In d-incpath.cc.  */\n extern void add_import_paths (const char *, const char *, bool);"}, {"sha": "d1e71f987f7e997f476df875d0bc55f36a54e3ea", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=0af711e1914ab6d88538f1fcf0146757b5608b1d", "patch": "@@ -691,7 +691,6 @@ class ExprVisitor : public Visitor\n     else\n       etype = tb2->nextOf ();\n \n-    vec<tree, va_gc> *elemvars = NULL;\n     tree result;\n \n     if (e->e1->op == TOKcat)\n@@ -711,9 +710,7 @@ class ExprVisitor : public Visitor\n \n \t/* Store all concatenation args to a temporary byte[][ndims] array.  */\n \tType *targselem = Type::tint8->arrayOf ();\n-\ttree var = create_temporary_var (make_array_type (targselem, ndims));\n-\ttree init = build_constructor (TREE_TYPE (var), NULL);\n-\tvec_safe_push (elemvars, var);\n+\ttree var = build_local_temp (make_array_type (targselem, ndims));\n \n \t/* Loop through each concatenation from right to left.  */\n \tvec<constructor_elt, va_gc> *elms = NULL;\n@@ -725,7 +722,7 @@ class ExprVisitor : public Visitor\n \t      ? (oe = ce->e1)\n \t      : (ce = (CatExp *)ce->e1, oe = ce->e2)))\n \t  {\n-\t    tree arg = d_array_convert (etype, oe, &elemvars);\n+\t    tree arg = d_array_convert (etype, oe);\n \t    tree index = size_int (dim);\n \t    CONSTRUCTOR_APPEND_ELT (elms, index, d_save_expr (arg));\n \n@@ -738,8 +735,8 @@ class ExprVisitor : public Visitor\n \n \t/* Check there is no logic bug in constructing byte[][] of arrays.  */\n \tgcc_assert (dim == 0);\n-\tCONSTRUCTOR_ELTS (init) = elms;\n-\tDECL_INITIAL (var) = init;\n+\ttree init = build_constructor (TREE_TYPE (var), elms);\n+\tvar = compound_expr (modify_expr (var, init), var);\n \n \ttree arrs = d_array_value (build_ctype (targselem->arrayOf ()),\n \t\t\t\t   size_int (ndims), build_address (var));\n@@ -752,13 +749,10 @@ class ExprVisitor : public Visitor\n \t/* Handle single concatenation (a ~ b).  */\n \tresult = build_libcall (LIBCALL_ARRAYCATT, e->type, 3,\n \t\t\t\tbuild_typeinfo (e->loc, e->type),\n-\t\t\t\td_array_convert (etype, e->e1, &elemvars),\n-\t\t\t\td_array_convert (etype, e->e2, &elemvars));\n+\t\t\t\td_array_convert (etype, e->e1),\n+\t\t\t\td_array_convert (etype, e->e2));\n       }\n \n-    for (size_t i = 0; i < vec_safe_length (elemvars); ++i)\n-      result = bind_expr ((*elemvars)[i], result);\n-\n     this->result_ = result;\n   }\n \n@@ -2494,12 +2488,13 @@ class ExprVisitor : public Visitor\n \telse\n \t  {\n \t    /* Multidimensional array allocations.  */\n-\t    vec<constructor_elt, va_gc> *elms = NULL;\n-\t    Type *telem = e->newtype->toBasetype ();\n \t    tree tarray = make_array_type (Type::tsize_t, e->arguments->dim);\n-\t    tree var = create_temporary_var (tarray);\n-\t    tree init = build_constructor (TREE_TYPE (var), NULL);\n+\t    tree var = build_local_temp (tarray);\n+\t    vec<constructor_elt, va_gc> *elms = NULL;\n \n+\t    /* Get the base element type for the array, generating the\n+\t       initializer for the dims parameter along the way.  */\n+\t    Type *telem = e->newtype->toBasetype ();\n \t    for (size_t i = 0; i < e->arguments->dim; i++)\n \t      {\n \t\tExpression *arg = (*e->arguments)[i];\n@@ -2510,8 +2505,9 @@ class ExprVisitor : public Visitor\n \t\tgcc_assert (telem);\n \t      }\n \n-\t    CONSTRUCTOR_ELTS (init) = elms;\n-\t    DECL_INITIAL (var) = init;\n+\t    /* Initialize the temporary.  */\n+\t    tree init = modify_expr (var, build_constructor (tarray, elms));\n+\t    var = compound_expr (init, var);\n \n \t    /* Generate: _d_newarraymTX(ti, dims)\n \t\t     or: _d_newarraymiTX(ti, dims)  */\n@@ -2524,7 +2520,6 @@ class ExprVisitor : public Visitor\n \t\t\t\t       build_address (var));\n \n \t    result = build_libcall (libcall, tb, 2, tinfo, dims);\n-\t    result = bind_expr (var, result);\n \t  }\n \n \tif (e->argprefix)"}, {"sha": "7e28d9a783df9f17a7df769ec3557a937883ba53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0af711e1914ab6d88538f1fcf0146757b5608b1d", "patch": "@@ -1,3 +1,8 @@\n+2020-05-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/94970\n+\t* gdc.dg/pr94970.d: New test.\n+\n 2020-05-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/94951"}, {"sha": "4c3387e3d4b5869f2989417ea4caccc96396fab5", "filename": "gcc/testsuite/gdc.dg/pr94970.d", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Ftestsuite%2Fgdc.dg%2Fpr94970.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af711e1914ab6d88538f1fcf0146757b5608b1d/gcc%2Ftestsuite%2Fgdc.dg%2Fpr94970.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr94970.d?ref=0af711e1914ab6d88538f1fcf0146757b5608b1d", "patch": "@@ -0,0 +1,20 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94970\n+// { dg-do compile }\n+\n+struct S94970\n+{\n+    string index() { return null; }\n+    ~this() { }\n+}\n+\n+static m() { return S94970(); }\n+\n+auto concat()\n+{\n+    return m.index ~ ' ';\n+}\n+\n+auto newarray()\n+{\n+    return new int[][](m.index.length, 1);\n+}"}]}