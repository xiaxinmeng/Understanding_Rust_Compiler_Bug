{"sha": "24241bd0388ec6f730788540b289da12c13a34cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQyNDFiZDAzODhlYzZmNzMwNzg4NTQwYjI4OWRhMTJjMTNhMzRjYw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-08-21T14:48:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-08-21T14:48:03Z"}, "message": "[Ada] Spurious error on overriding protected function in instance\n\nThe conformance between an overriding protected operation with\nprogenitors and the overridden interface operation requires subtype\nconformance; requiring equality of return types in the case of a\nfunction is too restrictive and leads to spurious errors when the return\ntype is a generic actual.\n\n2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch6.adb (Check_Synchronized_Overriding): The conformance\n\tbetween an overriding protected operation and the overridden\n\tabstract progenitor operation requires subtype conformance;\n\trequiring equality of return types in the case of a function is\n\ttoo restrictive and leads to spurious errors when the return\n\ttype is a generic actual.\n\ngcc/testsuite/\n\n\t* gnat.dg/prot6.adb, gnat.dg/prot6.ads: New testcase.\n\nFrom-SVN: r263731", "tree": {"sha": "5be71cb8445185298b7e449e1402055a6380fb2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5be71cb8445185298b7e449e1402055a6380fb2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24241bd0388ec6f730788540b289da12c13a34cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24241bd0388ec6f730788540b289da12c13a34cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24241bd0388ec6f730788540b289da12c13a34cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24241bd0388ec6f730788540b289da12c13a34cc/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bb9ebcbc8270bcc08f955d196ad8c1bba003ec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bb9ebcbc8270bcc08f955d196ad8c1bba003ec1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bb9ebcbc8270bcc08f955d196ad8c1bba003ec1"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "ff886ebd7893a76a1109f2943f6ad14bc0b3588d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24241bd0388ec6f730788540b289da12c13a34cc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24241bd0388ec6f730788540b289da12c13a34cc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=24241bd0388ec6f730788540b289da12c13a34cc", "patch": "@@ -1,3 +1,12 @@\n+2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Synchronized_Overriding): The conformance\n+\tbetween an overriding protected operation and the overridden\n+\tabstract progenitor operation requires subtype conformance;\n+\trequiring equality of return types in the case of a function is\n+\ttoo restrictive and leads to spurious errors when the return\n+\ttype is a generic actual.\n+\n 2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_ch9.adb (Expand_N_Timed_Entry_Call,"}, {"sha": "2ddd3d35767f69470dc2e4050ec428613d4e352b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24241bd0388ec6f730788540b289da12c13a34cc/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24241bd0388ec6f730788540b289da12c13a34cc/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=24241bd0388ec6f730788540b289da12c13a34cc", "patch": "@@ -7440,13 +7440,15 @@ package body Sem_Ch6 is\n                end;\n \n             --  Functions can override abstract interface functions\n+            --  Return types must be subtype conformant.\n \n             elsif Ekind (Def_Id) = E_Function\n               and then Ekind (Subp) = E_Function\n               and then Matches_Prefixed_View_Profile\n                          (Parameter_Specifications (Parent (Def_Id)),\n                           Parameter_Specifications (Parent (Subp)))\n-              and then Etype (Def_Id) = Etype (Subp)\n+              and then Conforming_Types (Etype (Def_Id), Etype (Subp),\n+                Subtype_Conformant)\n             then\n                Candidate := Subp;\n "}, {"sha": "ddc6e0dc13bd30ed0f941bb9d285b76988659598", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24241bd0388ec6f730788540b289da12c13a34cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24241bd0388ec6f730788540b289da12c13a34cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24241bd0388ec6f730788540b289da12c13a34cc", "patch": "@@ -1,3 +1,7 @@\n+2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/prot6.adb, gnat.dg/prot6.ads: New testcase.\n+\n 2018-08-21  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/access5.adb, gnat.dg/access5.ads: New testcase."}, {"sha": "f33b0a2429df7c85f2d0f3247a3d8f6990fbfb73", "filename": "gcc/testsuite/gnat.dg/prot6.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24241bd0388ec6f730788540b289da12c13a34cc/gcc%2Ftestsuite%2Fgnat.dg%2Fprot6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24241bd0388ec6f730788540b289da12c13a34cc/gcc%2Ftestsuite%2Fgnat.dg%2Fprot6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fprot6.adb?ref=24241bd0388ec6f730788540b289da12c13a34cc", "patch": "@@ -0,0 +1,20 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnatc\" }\n+\n+package body Prot6 is\n+\n+   protected body My_Type is\n+\n+      procedure Set (D : Integer) is\n+      begin\n+         I := D;\n+      end Set;\n+\n+      function Get return Integer is\n+      begin\n+         return I;\n+      end Get;\n+   end My_Type;\n+\n+   procedure Dummy is null;\n+end Prot6;"}, {"sha": "d8e27e0a73b74155774e035912c78496fbefae28", "filename": "gcc/testsuite/gnat.dg/prot6.ads", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24241bd0388ec6f730788540b289da12c13a34cc/gcc%2Ftestsuite%2Fgnat.dg%2Fprot6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24241bd0388ec6f730788540b289da12c13a34cc/gcc%2Ftestsuite%2Fgnat.dg%2Fprot6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fprot6.ads?ref=24241bd0388ec6f730788540b289da12c13a34cc", "patch": "@@ -0,0 +1,31 @@\n+package Prot6 is\n+\n+   generic\n+      type TD is private;\n+      type TI is synchronized interface;\n+   package Set_Get is\n+      type T is synchronized interface and TI;\n+\n+      procedure Set (E : in out T; D : TD) is abstract;\n+      function Get (E : T) return TD is abstract;\n+   end Set_Get;\n+\n+   type My_Type_Interface is synchronized interface;\n+\n+   package Set_Get_Integer is\n+     new Set_Get (TD => Integer,\n+                  TI => My_Type_Interface);\n+   use Set_Get_Integer;\n+\n+   protected type My_Type is\n+        new Set_Get_Integer.T with\n+\n+      overriding procedure Set (D : Integer);\n+      overriding function Get return Integer;\n+   private\n+      I : Integer;\n+   end My_Type;\n+\n+   procedure Dummy;\n+\n+end Prot6;"}]}