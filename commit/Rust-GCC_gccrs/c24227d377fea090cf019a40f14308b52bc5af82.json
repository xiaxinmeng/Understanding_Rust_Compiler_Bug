{"sha": "c24227d377fea090cf019a40f14308b52bc5af82", "node_id": "C_kwDOANBUbNoAKGMyNDIyN2QzNzdmZWEwOTBjZjAxOWE0MGYxNDMwOGI1MmJjNWFmODI", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-03T08:42:36Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-05-11T07:38:21Z"}, "message": "converter: Add from_tokentree function\n\nAdd the from_tokentree function which converts a tokentree to it's\ntoken representation. This function was previously inlined in the\nfrom_tokenstream function but I wanted to keep things clear and\ncoherent.\n\ngcc/rust/ChangeLog:\n\n\t* util/rust-token-converter.cc (from_tokenstream): Add call to\n\tfrom_tokentree.\n\t(from_tokentree): Add implementation, from the from_tokenstream\n\tfunction.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "3cea17d64864a7d64febeb407c116352e764d3a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cea17d64864a7d64febeb407c116352e764d3a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c24227d377fea090cf019a40f14308b52bc5af82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24227d377fea090cf019a40f14308b52bc5af82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c24227d377fea090cf019a40f14308b52bc5af82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24227d377fea090cf019a40f14308b52bc5af82/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87dfca85c99477d442d62373bd477b87f95857fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87dfca85c99477d442d62373bd477b87f95857fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87dfca85c99477d442d62373bd477b87f95857fe"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "54c9cb7c3feeb4cc7453ed0eea7bde045abdf868", "filename": "gcc/rust/util/rust-token-converter.cc", "status": "modified", "additions": 40, "deletions": 21, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c24227d377fea090cf019a40f14308b52bc5af82/gcc%2Frust%2Futil%2Frust-token-converter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c24227d377fea090cf019a40f14308b52bc5af82/gcc%2Frust%2Futil%2Frust-token-converter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-token-converter.cc?ref=c24227d377fea090cf019a40f14308b52bc5af82", "patch": "@@ -298,7 +298,8 @@ convert (std::vector<TokenPtr> tokens)\n }\n \n static void\n-from_tokenstream (ProcMacro::TokenStream ts, std::vector<TokenPtr> &result);\n+from_tokenstream (const ProcMacro::TokenStream &ts,\n+\t\t  std::vector<TokenPtr> &result);\n \n static void\n from_ident (ProcMacro::Ident ident, std::vector<TokenPtr> &result)\n@@ -313,7 +314,7 @@ from_punct (ProcMacro::Punct punct, std::vector<TokenPtr> &result)\n {}\n \n /**\n- * Iterate over a Group and append all inner tokens to a vector enclosed by it's\n+ * Iterate over a Group and append all inner tokens to a vector enclosed by its\n  * delimiters.\n  *\n  * @param g Reference to the Group to convert.\n@@ -347,29 +348,47 @@ from_group (const ProcMacro::Group &g, std::vector<TokenPtr> &result)\n     }\n }\n \n+/**\n+ * Dispatch TokenTree's conversion to its inner type depending on its tag.\n+ *\n+ * @param tt Reference to the TokenTree.\n+ * @param result Reference to the vector tokens should be appended to.\n+ */\n+static void\n+from_tokentree (const ProcMacro::TokenTree &tt, std::vector<TokenPtr> &result)\n+{\n+  switch (tt.tag)\n+    {\n+    case ProcMacro::GROUP:\n+      from_group (tt.payload.group, result);\n+      break;\n+    case ProcMacro::IDENT:\n+      from_ident (tt.payload.ident, result);\n+      break;\n+    case ProcMacro::PUNCT:\n+      from_punct (tt.payload.punct, result);\n+      break;\n+    case ProcMacro::LITERAL:\n+      from_literal (tt.payload.literal, result);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+/**\n+ * Iterate over a TokenStream and append all inner tokens to a vector.\n+ *\n+ * @param ts Reference to the TokenStream.\n+ * @param result Reference to the vector tokens should be appended to.\n+ */\n static void\n-from_tokenstream (ProcMacro::TokenStream ts, std::vector<TokenPtr> &result)\n+from_tokenstream (const ProcMacro::TokenStream &ts,\n+\t\t  std::vector<TokenPtr> &result)\n {\n   for (std::uint64_t i = 0; i < ts.size; i++)\n     {\n-      ProcMacro::TokenTree &tt = ts.data[i];\n-      switch (tt.tag)\n-\t{\n-\tcase ProcMacro::GROUP:\n-\t  from_group (tt.payload.group, result);\n-\t  break;\n-\tcase ProcMacro::IDENT:\n-\t  from_ident (tt.payload.ident, result);\n-\t  break;\n-\tcase ProcMacro::PUNCT:\n-\t  from_punct (tt.payload.punct, result);\n-\t  break;\n-\tcase ProcMacro::LITERAL:\n-\t  from_literal (tt.payload.literal, result);\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n+      from_tokentree (ts.data[i], result);\n     }\n }\n "}]}