{"sha": "ea60dd34cd352452eeab30aba4b84a204f2caef5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE2MGRkMzRjZDM1MjQ1MmVlYWIzMGFiYTRiODRhMjA0ZjJjYWVmNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-09-29T07:16:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-09-29T07:16:10Z"}, "message": "tree-vect-stmts.c (vectorizable_load): Avoid emitting vector constructors with vector elements.\n\n2016-09-29  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-stmts.c (vectorizable_load): Avoid emitting vector\n\tconstructors with vector elements.\n\nFrom-SVN: r240611", "tree": {"sha": "e30ecb562876ab20fab51104cf717d611ff43429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e30ecb562876ab20fab51104cf717d611ff43429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea60dd34cd352452eeab30aba4b84a204f2caef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea60dd34cd352452eeab30aba4b84a204f2caef5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea60dd34cd352452eeab30aba4b84a204f2caef5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea60dd34cd352452eeab30aba4b84a204f2caef5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca0e1607e9f7a185b9c0e29509b2ab84727d9041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0e1607e9f7a185b9c0e29509b2ab84727d9041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca0e1607e9f7a185b9c0e29509b2ab84727d9041"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "56f7255a2b0bc23db0366242a3a826e38d2a9d38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60dd34cd352452eeab30aba4b84a204f2caef5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60dd34cd352452eeab30aba4b84a204f2caef5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea60dd34cd352452eeab30aba4b84a204f2caef5", "patch": "@@ -1,3 +1,8 @@\n+2016-09-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_load): Avoid emitting vector\n+\tconstructors with vector elements.\n+\n 2016-09-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77768"}, {"sha": "d698785a547cf82fb642415e98982f217e58b6e3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea60dd34cd352452eeab30aba4b84a204f2caef5/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea60dd34cd352452eeab30aba4b84a204f2caef5/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=ea60dd34cd352452eeab30aba4b84a204f2caef5", "patch": "@@ -6862,17 +6862,40 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n       int nloads = nunits;\n       int lnel = 1;\n       tree ltype = TREE_TYPE (vectype);\n+      tree lvectype = vectype;\n       auto_vec<tree> dr_chain;\n       if (memory_access_type == VMAT_STRIDED_SLP)\n \t{\n-\t  nloads = nunits / group_size;\n \t  if (group_size < nunits)\n \t    {\n-\t      lnel = group_size;\n-\t      ltype = build_vector_type (TREE_TYPE (vectype), group_size);\n+\t      /* Avoid emitting a constructor of vector elements by performing\n+\t\t the loads using an integer type of the same size,\n+\t\t constructing a vector of those and then re-interpreting it\n+\t\t as the original vector type.  This works around the fact\n+\t\t that the vec_init optab was only designed for scalar\n+\t\t element modes and thus expansion goes through memory.\n+\t\t This avoids a huge runtime penalty due to the general\n+\t\t inability to perform store forwarding from smaller stores\n+\t\t to a larger load.  */\n+\t      unsigned lsize\n+\t\t= group_size * TYPE_PRECISION (TREE_TYPE (vectype));\n+\t      enum machine_mode elmode = mode_for_size (lsize, MODE_INT, 0);\n+\t      enum machine_mode vmode = mode_for_vector (elmode,\n+\t\t\t\t\t\t\t nunits / group_size);\n+\t      /* If we can't construct such a vector fall back to\n+\t\t element loads of the original vector type.  */\n+\t      if (VECTOR_MODE_P (vmode)\n+\t\t  && optab_handler (vec_init_optab, vmode) != CODE_FOR_nothing)\n+\t\t{\n+\t\t  nloads = nunits / group_size;\n+\t\t  lnel = group_size;\n+\t\t  ltype = build_nonstandard_integer_type (lsize, 1);\n+\t\t  lvectype = build_vector_type (ltype, nloads);\n+\t\t}\n \t    }\n \t  else\n \t    {\n+\t      nloads = 1;\n \t      lnel = nunits;\n \t      ltype = vectype;\n \t    }\n@@ -6925,9 +6948,17 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t    }\n \t  if (nloads > 1)\n \t    {\n-\t      tree vec_inv = build_constructor (vectype, v);\n-\t      new_temp = vect_init_vector (stmt, vec_inv, vectype, gsi);\n+\t      tree vec_inv = build_constructor (lvectype, v);\n+\t      new_temp = vect_init_vector (stmt, vec_inv, lvectype, gsi);\n \t      new_stmt = SSA_NAME_DEF_STMT (new_temp);\n+\t      if (lvectype != vectype)\n+\t\t{\n+\t\t  new_stmt = gimple_build_assign (make_ssa_name (vectype),\n+\t\t\t\t\t\t  VIEW_CONVERT_EXPR,\n+\t\t\t\t\t\t  build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t\t\t  vectype, new_temp));\n+\t\t  vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+\t\t}\n \t    }\n \n \t  if (slp)"}]}