{"sha": "0cc218d42c241ed286cc5af9fb7d2e45386f7a24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNjMjE4ZDQyYzI0MWVkMjg2Y2M1YWY5ZmI3ZDJlNDUzODZmN2EyNA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-02-26T10:21:02Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-03-18T11:47:27Z"}, "message": "Objective-C++ : Fix handling of unnamed message parms [PR49070].\n\nWhen we are parsing an Objective-C++ message, a colon is a valid\nterminator for a assignment-expression.  That is:\n\n[receiver meth:x:x:x:x];\n\nIs a valid, if somewhat unreadable, construction; corresponding\nto a method declaration like:\n\n- (id) meth:(id)arg0 :(id)arg1 :(id)arg2 :(id)arg3;\n\nWhere three of the message params have no selector name.\n\nIf fact, although it might be unintentional, Objective-C/C++ can\naccept message selectors with all the parms unnamed (this applies\nto the clang implementation too, which is taken as the reference\nfor the language).\n\nFor regular C++, the pattern x:x is not valid in that position an\nan error is emitted with a fixit for the expected scope token.\n\nIf we simply made that error conditional on !c_dialect_objc()\nthat would regress Objective-C++ diagnostics for cases outside a\nmessage selector, so we add a state flag for this.\n\ngcc/cp/ChangeLog:\n\n\tPR objc++/49070\n\t* parser.c (cp_debug_parser): Add Objective-C++ message\n\tstate flag.\n\t(cp_parser_nested_name_specifier_opt): Allow colon to\n\tterminate an assignment-expression when parsing Objective-\n\tC++ messages.\n\t(cp_parser_objc_message_expression): Set and clear message\n\tparsing state on entry and exit.\n\t* parser.h (struct cp_parser): Add a context flag for\n\tObjective-C++ message state.\n\ngcc/testsuite/ChangeLog:\n\n\tPR objc++/49070\n\t* obj-c++.dg/pr49070.mm: New test.\n\t* objc.dg/unnamed-parms.m: New test.", "tree": {"sha": "c678573b7b4061649f125fcc6568d4b8827e6dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c678573b7b4061649f125fcc6568d4b8827e6dcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cc218d42c241ed286cc5af9fb7d2e45386f7a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cc218d42c241ed286cc5af9fb7d2e45386f7a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cc218d42c241ed286cc5af9fb7d2e45386f7a24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cc218d42c241ed286cc5af9fb7d2e45386f7a24/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "d4e485930a4f0f5cc1457c4dc55ded873ac4a8a0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cc218d42c241ed286cc5af9fb7d2e45386f7a24/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cc218d42c241ed286cc5af9fb7d2e45386f7a24/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0cc218d42c241ed286cc5af9fb7d2e45386f7a24", "patch": "@@ -572,6 +572,8 @@ cp_debug_parser (FILE *file, cp_parser *parser)\n \t\t\t      parser->colon_corrects_to_scope_p);\n   cp_debug_print_flag (file, \"Colon doesn't start a class definition\",\n \t\t\t      parser->colon_doesnt_start_class_def_p);\n+  cp_debug_print_flag (file, \"Parsing an Objective-C++ message context\",\n+\t\t\t      parser->objective_c_message_context_p);\n   if (parser->type_definition_forbidden_message)\n     fprintf (file, \"Error message for forbidden type definitions: %s %s\\n\",\n \t     parser->type_definition_forbidden_message,\n@@ -6626,7 +6628,9 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \n \t  if (token->type == CPP_COLON\n \t      && parser->colon_corrects_to_scope_p\n-\t      && cp_lexer_peek_nth_token (parser->lexer, 3)->type == CPP_NAME)\n+\t      && cp_lexer_peek_nth_token (parser->lexer, 3)->type == CPP_NAME\n+\t      /* name:name is a valid sequence in an Objective C message.  */\n+\t      && !parser->objective_c_message_context_p)\n \t    {\n \t      gcc_rich_location richloc (token->location);\n \t      richloc.add_fixit_replace (\"::\");\n@@ -33034,6 +33038,7 @@ cp_parser_objc_message_expression (cp_parser* parser)\n {\n   tree receiver, messageargs;\n \n+  parser->objective_c_message_context_p = true;\n   location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;\n   cp_lexer_consume_token (parser->lexer);  /* Eat '['.  */\n   receiver = cp_parser_objc_message_receiver (parser);\n@@ -33050,6 +33055,7 @@ cp_parser_objc_message_expression (cp_parser* parser)\n   location_t combined_loc = make_location (start_loc, start_loc, end_loc);\n   protected_set_expr_location (result, combined_loc);\n \n+  parser->objective_c_message_context_p = false;\n   return result;\n }\n "}, {"sha": "a468b6992ada7bf3435282ce71c113c55bd8b176", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cc218d42c241ed286cc5af9fb7d2e45386f7a24/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cc218d42c241ed286cc5af9fb7d2e45386f7a24/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=0cc218d42c241ed286cc5af9fb7d2e45386f7a24", "patch": "@@ -350,6 +350,10 @@ struct GTY(()) cp_parser {\n      is terminated by colon.  */\n   bool colon_doesnt_start_class_def_p;\n \n+  /* TRUE if we are parsing an objective c message, and ':' is permitted\n+     to terminate an assignment-expression.  */\n+  bool objective_c_message_context_p;\n+\n   /* If non-NULL, then we are parsing a construct where new type\n      definitions are not permitted.  The string stored here will be\n      issued as an error message if a type is defined.  */"}, {"sha": "d67c72137ccf24201274bbc8a76644ec9e08286e", "filename": "gcc/testsuite/obj-c++.dg/pr49070.mm", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cc218d42c241ed286cc5af9fb7d2e45386f7a24/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr49070.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cc218d42c241ed286cc5af9fb7d2e45386f7a24/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr49070.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fpr49070.mm?ref=0cc218d42c241ed286cc5af9fb7d2e45386f7a24", "patch": "@@ -0,0 +1,52 @@\n+/* Only needs to compile.  */\n+/* { dg-additional-options \"-std=c++11\" } */\n+\n+#ifdef __cplusplus\n+enum X {\n+  x = 5,\n+  y\n+};\n+#endif\n+\n+__attribute__((__objc_root_class__))\n+@interface A\n+- (id) :(id)arg0 :(id)arg1;\n+- (id) m:(id)arg0 :(id)arg1 :(id)arg2 :(id)arg3;\n+#ifdef __cplusplus\n+- (id) n:(X)arg0 :(X)arg1 :(id)arg2 :(id)arg3;\n+#endif\n+@end\n+\n+@implementation A\n+- (id) :(id)arg0 :(id)arg1\n+{\n+  return arg1;\n+}\n+- (id) m:(id)arg0 :(id)arg1 :(id)arg2 :(id)arg3\n+{\n+  return arg2;\n+}\n+#ifdef __cplusplus\n+- (id) n:(X)arg0 :(X)arg1 :(id)arg2 :(id)arg3\n+{\n+  return arg2;\n+}\n+#endif\n+@end\n+\n+id f1 (A *x)\n+{\n+  return [x:x:x];\n+}\n+\n+id f2 (A *x)\n+{\n+  return [x m:x:x:x:x];\n+}\n+\n+#ifdef __cplusplus\n+id f3 (A *x)\n+{\n+  return [x n:X::x:X::y:x:x];\n+}\n+#endif"}, {"sha": "22426cfed5f6e908fc439d6f31db19a552cb1ff4", "filename": "gcc/testsuite/objc.dg/unnamed-parms.m", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cc218d42c241ed286cc5af9fb7d2e45386f7a24/gcc%2Ftestsuite%2Fobjc.dg%2Funnamed-parms.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cc218d42c241ed286cc5af9fb7d2e45386f7a24/gcc%2Ftestsuite%2Fobjc.dg%2Funnamed-parms.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Funnamed-parms.m?ref=0cc218d42c241ed286cc5af9fb7d2e45386f7a24", "patch": "@@ -0,0 +1,28 @@\n+/* Only needs to compile [see PR 49070 for C++ issue].  */\n+\n+__attribute__((__objc_root_class__))\n+@interface A\n+- (id) :(id)arg0 :(id)arg1;\n+- (id) m:(id)arg0 :(id)arg1 :(id)arg2 :(id)arg3;\n+@end\n+\n+@implementation A\n+- (id) :(id)arg0 :(id)arg1\n+{\n+  return arg1;\n+}\n+- (id) m:(id)arg0 :(id)arg1 :(id)arg2 :(id)arg3\n+{\n+  return arg2;\n+}\n+@end\n+\n+id f1 (A *x)\n+{\n+  return [x:x:x];\n+}\n+\n+id f2 (A *x)\n+{\n+  return [x m:x:x:x:x];\n+}"}]}