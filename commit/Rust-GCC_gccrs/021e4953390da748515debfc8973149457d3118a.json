{"sha": "021e4953390da748515debfc8973149457d3118a", "node_id": "C_kwDOANBUbNoAKDAyMWU0OTUzMzkwZGE3NDg1MTVkZWJmYzg5NzMxNDk0NTdkMzExOGE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-08-12T12:11:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-12T12:11:26Z"}, "message": "Merge #1465 #1467\n\n1465: intrinsics: Add wrapping_{add, sub, mul} r=CohenArthur a=CohenArthur\n\nSince wrapping arithmetics are guaranteed in Rust, we turn on the -fwrapv and simply desugar wrapping_{add, sub, mul} to their non-checked inner operations. This is the only difference between a wrapping add and a regular addition: The regular addition will gain some checks for overflows, which are simply not used for the wrapping version.\r\n\r\nFixes #1449 \r\n\r\n`@bjorn3` if you want to have a look :)\n\n1467: Desugar HIR::IdentifierExpr into HIR::PathInExpression r=philberty a=philberty\n\nThis completly removes the HIR::IdentifierExpr and unifies how we handle\r\ngenerics in general. There was a hack from last year that did not infer\r\ngeneric arguments on IdentifierExpr's which leads to a type inferencing\r\nbehvaiour mismatch which was becoming difficult to debug. This simplifies\r\neverything.\r\n\r\nThe changes to the test case reflect making our code more compliant to\r\nreal rustc apart from compile/traits3.rs which will be fixed as part of the\r\nrefactoring effort going on in the type system.\r\n\r\nFixes #1456\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "73573cba94d37ba75ad953f201fb15195bfeb027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73573cba94d37ba75ad953f201fb15195bfeb027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/021e4953390da748515debfc8973149457d3118a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9kNvCRBK7hj4Ov3rIwAAlQoIAKwMBVkBX2slWawK7PPFfMpl\nUlb983BAdWuDjEbYnikyjwDrs6rrVWlZiNGuiW5Jcb+/U6P9S06qifIaRmr+qWyr\n+uJQLizAUFQxkiCOf/ec1IO8ei3gsMqcxvjqjs3A2DfXy5MpCERoRarD79oVJN7H\nt0COZYBEMRlAm64aKK9ixk4Kab0Y+VVpKD4gQScjrH/4hTR36BDqPHqeZSvfMqbM\nHGZ++5oWHOnmXJUceU3dWZ4RbK85aaE7EiJVtCh8yy4aFFJ4S3wFPf+0+gwW4g1K\nkxu/M2CB82YOli4wteqCwJQkWm5YYw2abX+nYeSHLbAcMMkEVdjJcpdrKPNZ6fI=\n=7SEb\n-----END PGP SIGNATURE-----\n", "payload": "tree 73573cba94d37ba75ad953f201fb15195bfeb027\nparent fadc70475147768a68ccc9e0011bd3fe85d90096\nparent 8899dc9bf70b193dc59dbc8e81400de22c203e8f\nparent d4ddd73b0b8ddd44204844a4d650424539335899\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1660306286 +0000\ncommitter GitHub <noreply@github.com> 1660306286 +0000\n\nMerge #1465 #1467\n\n1465: intrinsics: Add wrapping_{add, sub, mul} r=CohenArthur a=CohenArthur\n\nSince wrapping arithmetics are guaranteed in Rust, we turn on the -fwrapv and simply desugar wrapping_{add, sub, mul} to their non-checked inner operations. This is the only difference between a wrapping add and a regular addition: The regular addition will gain some checks for overflows, which are simply not used for the wrapping version.\r\n\r\nFixes #1449 \r\n\r\n`@bjorn3` if you want to have a look :)\n\n1467: Desugar HIR::IdentifierExpr into HIR::PathInExpression r=philberty a=philberty\n\nThis completly removes the HIR::IdentifierExpr and unifies how we handle\r\ngenerics in general. There was a hack from last year that did not infer\r\ngeneric arguments on IdentifierExpr's which leads to a type inferencing\r\nbehvaiour mismatch which was becoming difficult to debug. This simplifies\r\neverything.\r\n\r\nThe changes to the test case reflect making our code more compliant to\r\nreal rustc apart from compile/traits3.rs which will be fixed as part of the\r\nrefactoring effort going on in the type system.\r\n\r\nFixes #1456\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021e4953390da748515debfc8973149457d3118a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021e4953390da748515debfc8973149457d3118a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021e4953390da748515debfc8973149457d3118a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fadc70475147768a68ccc9e0011bd3fe85d90096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fadc70475147768a68ccc9e0011bd3fe85d90096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fadc70475147768a68ccc9e0011bd3fe85d90096"}, {"sha": "8899dc9bf70b193dc59dbc8e81400de22c203e8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8899dc9bf70b193dc59dbc8e81400de22c203e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8899dc9bf70b193dc59dbc8e81400de22c203e8f"}, {"sha": "d4ddd73b0b8ddd44204844a4d650424539335899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ddd73b0b8ddd44204844a4d650424539335899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4ddd73b0b8ddd44204844a4d650424539335899"}], "stats": {"total": 502, "additions": 164, "deletions": 338}, "files": [{"sha": "e3c7399c39d011f714fd9065ba01abf96f946b83", "filename": "gcc/rust/backend/rust-compile-block.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-block.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -46,7 +46,6 @@ class CompileBlock : public HIRCompileBase, public HIR::HIRExpressionVisitor\n   void visit (HIR::StructExprFieldIndexValue &) override {}\n   void visit (HIR::StructExprStruct &) override {}\n   void visit (HIR::StructExprStructFields &) override {}\n-  void visit (HIR::IdentifierExpr &) override {}\n   void visit (HIR::LiteralExpr &) override {}\n   void visit (HIR::BorrowExpr &) override {}\n   void visit (HIR::DereferenceExpr &) override {}\n@@ -126,7 +125,6 @@ class CompileConditionalBlocks : public HIRCompileBase,\n   void visit (HIR::StructExprFieldIndexValue &) override {}\n   void visit (HIR::StructExprStruct &) override {}\n   void visit (HIR::StructExprStructFields &) override {}\n-  void visit (HIR::IdentifierExpr &) override {}\n   void visit (HIR::LiteralExpr &) override {}\n   void visit (HIR::BorrowExpr &) override {}\n   void visit (HIR::DereferenceExpr &) override {}\n@@ -216,7 +214,6 @@ class CompileExprWithBlock : public HIRCompileBase,\n   void visit (HIR::StructExprFieldIndexValue &) override {}\n   void visit (HIR::StructExprStruct &) override {}\n   void visit (HIR::StructExprStructFields &) override {}\n-  void visit (HIR::IdentifierExpr &) override {}\n   void visit (HIR::LiteralExpr &) override {}\n   void visit (HIR::BorrowExpr &) override {}\n   void visit (HIR::DereferenceExpr &) override {}"}, {"sha": "bfaa7fc05b34da37a88050f5b9723108b10fe764", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -692,12 +692,6 @@ CompileExpr::visit (HIR::MatchExpr &expr)\n \t  }\n \t  break;\n \n-\t  case HIR::Expr::ExprType::Ident: {\n-\t    // FIXME\n-\t    gcc_unreachable ();\n-\t  }\n-\t  break;\n-\n \t  case HIR::Expr::ExprType::Path: {\n \t    // FIXME\n \t    gcc_unreachable ();\n@@ -1808,120 +1802,6 @@ HIRCompileBase::resolve_unsized_adjustment (Resolver::Adjustment &adjustment,\n \t\t\t\t\t\t      {data, size}, -1, locus);\n }\n \n-void\n-CompileExpr::visit (HIR::IdentifierExpr &expr)\n-{\n-  NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n-\n-  bool is_value = false;\n-  NodeId ref_node_id = UNKNOWN_NODEID;\n-  if (ctx->get_resolver ()->lookup_resolved_name (ast_node_id, &ref_node_id))\n-    {\n-      is_value = true;\n-    }\n-  else if (!ctx->get_resolver ()->lookup_resolved_type (ast_node_id,\n-\t\t\t\t\t\t\t&ref_node_id))\n-    {\n-      rust_error_at (expr.get_locus (),\n-\t\t     \"Failed to lookup type reference for node: %s\",\n-\t\t     expr.as_string ().c_str ());\n-      return;\n-    }\n-\n-  if (ref_node_id == UNKNOWN_NODEID)\n-    {\n-      rust_fatal_error (expr.get_locus (), \"unresolved IdentifierExpr: %s\",\n-\t\t\texpr.as_string ().c_str ());\n-      return;\n-    }\n-\n-  // node back to HIR\n-  HirId ref;\n-  if (!ctx->get_mappings ()->lookup_node_to_hir (ref_node_id, &ref))\n-    {\n-      rust_error_at (expr.get_locus (), \"reverse lookup failure\");\n-      return;\n-    }\n-\n-  TyTy::BaseType *lookup = nullptr;\n-  if (!ctx->get_tyctx ()->lookup_type (ref, &lookup))\n-    {\n-      rust_fatal_error (expr.get_locus (),\n-\t\t\t\"failed to find type relevant to this context: %s\",\n-\t\t\texpr.get_mappings ().as_string ().c_str ());\n-      return;\n-    }\n-\n-  bool is_type_ref = !is_value;\n-  if (is_type_ref)\n-    {\n-      // this might be a case for\n-      //\n-      // struct S;\n-      //\n-      // fn main() {\n-      //    let s = S;\n-      // }\n-\n-      if (lookup->is_unit ())\n-\t{\n-\t  translated = ctx->get_backend ()->unit_expression ();\n-\t  return;\n-\t}\n-\n-      // rust actually treats like this an fn call or structs with fields but\n-      // unit structs are just the struct name lets catch it with an is-unit\n-      // check\n-      gcc_unreachable ();\n-    }\n-\n-  tree fn = NULL_TREE;\n-  Bvariable *var = nullptr;\n-  if (ctx->lookup_const_decl (ref, &translated))\n-    {\n-      TREE_USED (translated) = 1;\n-      return;\n-    }\n-  else if (ctx->lookup_function_decl (ref, &fn))\n-    {\n-      TREE_USED (fn) = 1;\n-      translated = address_expression (fn, expr.get_locus ());\n-    }\n-  else if (ctx->lookup_var_decl (ref, &var))\n-    {\n-      // TREE_USED is setup in the gcc abstraction here\n-      translated = ctx->get_backend ()->var_expression (var, expr.get_locus ());\n-    }\n-  else if (ctx->lookup_pattern_binding (ref, &translated))\n-    {\n-      TREE_USED (translated) = 1;\n-      return;\n-    }\n-  else\n-    {\n-      // lets try and query compile it to an item/impl item\n-      HIR::Item *resolved_item = ctx->get_mappings ()->lookup_hir_item (ref);\n-      bool is_hir_item = resolved_item != nullptr;\n-      if (!is_hir_item)\n-\t{\n-\t  translated = error_mark_node;\n-\t  return;\n-\t}\n-\n-      if (!lookup->has_subsititions_defined ())\n-\ttranslated = CompileItem::compile (resolved_item, ctx, nullptr, true,\n-\t\t\t\t\t   expr.get_locus ());\n-      else\n-\ttranslated = CompileItem::compile (resolved_item, ctx, lookup, true,\n-\t\t\t\t\t   expr.get_locus ());\n-\n-      if (translated != error_mark_node)\n-\t{\n-\t  TREE_USED (translated) = 1;\n-\t}\n-    }\n-}\n-\n void\n CompileExpr::visit (HIR::RangeFromToExpr &expr)\n {"}, {"sha": "69f9492b97ce6036ea46cef1846aef7fb39758ff", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -118,8 +118,6 @@ class CompileExpr : public HIRCompileBase, public HIR::HIRExpressionVisitor\n \n   void visit (HIR::MethodCallExpr &expr) override;\n \n-  void visit (HIR::IdentifierExpr &expr) override;\n-\n   void visit (HIR::LiteralExpr &expr) override\n   {\n     TyTy::BaseType *tyty = nullptr;"}, {"sha": "06dc45797e9a39868fd2533048f5c4eca8762fd7", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -37,6 +37,8 @@ static tree\n transmute_handler (Context *ctx, TyTy::FnType *fntype);\n static tree\n rotate_handler (Context *ctx, TyTy::FnType *fntype, tree_code op);\n+static tree\n+wrapping_op_handler (Context *ctx, TyTy::FnType *fntype, tree_code op);\n \n static inline tree\n rotate_left_handler (Context *ctx, TyTy::FnType *fntype)\n@@ -49,13 +51,32 @@ rotate_right_handler (Context *ctx, TyTy::FnType *fntype)\n   return rotate_handler (ctx, fntype, RROTATE_EXPR);\n }\n \n+static inline tree\n+wrapping_add_handler (Context *ctx, TyTy::FnType *fntype)\n+{\n+  return wrapping_op_handler (ctx, fntype, PLUS_EXPR);\n+}\n+static inline tree\n+wrapping_sub_handler (Context *ctx, TyTy::FnType *fntype)\n+{\n+  return wrapping_op_handler (ctx, fntype, MINUS_EXPR);\n+}\n+static inline tree\n+wrapping_mul_handler (Context *ctx, TyTy::FnType *fntype)\n+{\n+  return wrapping_op_handler (ctx, fntype, MULT_EXPR);\n+}\n+\n static const std::map<std::string,\n \t\t      std::function<tree (Context *, TyTy::FnType *)>>\n   generic_intrinsics = {{\"offset\", &offset_handler},\n \t\t\t{\"size_of\", &sizeof_handler},\n \t\t\t{\"transmute\", &transmute_handler},\n \t\t\t{\"rotate_left\", &rotate_left_handler},\n-\t\t\t{\"rotate_right\", &rotate_right_handler}};\n+\t\t\t{\"rotate_right\", &rotate_right_handler},\n+\t\t\t{\"wrapping_add\", &wrapping_add_handler},\n+\t\t\t{\"wrapping_sub\", &wrapping_sub_handler},\n+\t\t\t{\"wrapping_mul\", &wrapping_mul_handler}};\n \n Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}\n \n@@ -373,5 +394,51 @@ rotate_handler (Context *ctx, TyTy::FnType *fntype, tree_code op)\n   return fndecl;\n }\n \n+/**\n+ * pub fn wrapping_{add, sub, mul}<T>(lhs: T, rhs: T) -> T;\n+ */\n+static tree\n+wrapping_op_handler (Context *ctx, TyTy::FnType *fntype, tree_code op)\n+{\n+  // wrapping_<op> intrinsics have two parameter\n+  rust_assert (fntype->get_params ().size () == 2);\n+\n+  tree lookup = NULL_TREE;\n+  if (check_for_cached_intrinsic (ctx, fntype, &lookup))\n+    return lookup;\n+\n+  auto fndecl = compile_intrinsic_function (ctx, fntype);\n+\n+  // setup the params\n+  std::vector<Bvariable *> param_vars;\n+  compile_fn_params (ctx, fntype, fndecl, &param_vars);\n+\n+  auto &lhs_param = param_vars.at (0);\n+  auto &rhs_param = param_vars.at (1);\n+  if (!ctx->get_backend ()->function_set_parameters (fndecl, param_vars))\n+    return error_mark_node;\n+\n+  enter_intrinsic_block (ctx, fndecl);\n+\n+  // BUILTIN wrapping_<op> FN BODY BEGIN\n+  auto lhs = ctx->get_backend ()->var_expression (lhs_param, Location ());\n+  auto rhs = ctx->get_backend ()->var_expression (rhs_param, Location ());\n+\n+  // Operations are always wrapping in Rust, as we have -fwrapv enabled by\n+  // default. The difference between a wrapping_{add, sub, mul} and a regular\n+  // arithmetic operation is that these intrinsics do not panic - they always\n+  // carry over.\n+  auto wrap_expr = build2 (op, TREE_TYPE (lhs), lhs, rhs);\n+\n+  auto return_statement\n+    = ctx->get_backend ()->return_statement (fndecl, {wrap_expr}, Location ());\n+  ctx->add_statement (return_statement);\n+  // BUILTIN wrapping_<op> FN BODY END\n+\n+  finalize_intrinsic_block (ctx, fndecl);\n+\n+  return fndecl;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "f799445e131789e5f3e8c946d60fc82ba1c40436", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -64,6 +64,13 @@ ResolvePathRef::resolve (const HIR::PathIdentSegment &final_segment,\n \treturn error_mark_node;\n \n       TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (lookup);\n+\n+      // it might be a unit-struct\n+      if (adt->is_unit ())\n+\t{\n+\t  return ctx->get_backend ()->unit_expression ();\n+\t}\n+\n       if (!adt->is_enum ())\n \treturn error_mark_node;\n \n@@ -121,6 +128,14 @@ ResolvePathRef::resolve (const HIR::PathIdentSegment &final_segment,\n       return ctx->get_backend ()->var_expression (var, expr_locus);\n     }\n \n+  // might be a match pattern binding\n+  tree binding = error_mark_node;\n+  if (ctx->lookup_pattern_binding (ref, &binding))\n+    {\n+      TREE_USED (binding) = 1;\n+      return binding;\n+    }\n+\n   // it might be a function call\n   if (lookup->get_kind () == TyTy::TypeKind::FNDEF)\n     {"}, {"sha": "90c3140bf992b71bdebfb09793681dab0de2c5da", "filename": "gcc/rust/backend/rust-compile-struct-field-expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-struct-field-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile-struct-field-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-struct-field-expr.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -47,7 +47,6 @@ class CompileStructExprField : public HIRCompileBase,\n   void visit (HIR::ClosureExprInnerTyped &) override {}\n   void visit (HIR::StructExprStruct &) override {}\n   void visit (HIR::StructExprStructFields &) override {}\n-  void visit (HIR::IdentifierExpr &) override {}\n   void visit (HIR::LiteralExpr &) override {}\n   void visit (HIR::BorrowExpr &) override {}\n   void visit (HIR::DereferenceExpr &) override {}"}, {"sha": "c4100c4ef1b32a2ea3b233f4f1765bea548ac813", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -188,10 +188,17 @@ CompileStructExprField::visit (HIR::StructExprFieldIndexValue &field)\n void\n CompileStructExprField::visit (HIR::StructExprFieldIdentifier &field)\n {\n-  // we can make the field look like an identifier expr to take advantage of\n-  // existing code\n-  HIR::IdentifierExpr expr (field.get_mappings (), field.get_field_name (),\n-\t\t\t    field.get_locus ());\n+  // we can make the field look like a path expr to take advantage of existing\n+  // code\n+\n+  Analysis::NodeMapping mappings_copy1 = field.get_mappings ();\n+  Analysis::NodeMapping mappings_copy2 = field.get_mappings ();\n+\n+  HIR::PathIdentSegment ident_seg (field.get_field_name ());\n+  HIR::PathExprSegment seg (mappings_copy1, ident_seg, field.get_locus (),\n+\t\t\t    HIR::GenericArgs::create_empty ());\n+  HIR::PathInExpression expr (mappings_copy2, {seg}, field.get_locus (), false,\n+\t\t\t      {});\n   translated = CompileExpr::Compile (&expr, ctx);\n }\n "}, {"sha": "35fde40782e0b73b9264a76ad6bac314b766fe93", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -200,10 +200,6 @@ PrivacyReporter::check_type_privacy (const HIR::Type *type)\n   return check_base_type_privacy (node_mappings, lookup, type->get_locus ());\n }\n \n-void\n-PrivacyReporter::visit (HIR::IdentifierExpr &ident_expr)\n-{}\n-\n void\n PrivacyReporter::visit (HIR::PathInExpression &path)\n {"}, {"sha": "546b108f36d800c9c4a328c5dd3cfda0ce9609b0", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -87,7 +87,6 @@ types\n   virtual void visit (HIR::ClosureExprInner &expr);\n   virtual void visit (HIR::StructExprStructFields &);\n   virtual void visit (HIR::StructExprStruct &);\n-  virtual void visit (HIR::IdentifierExpr &ident_expr);\n   virtual void visit (HIR::LiteralExpr &expr);\n   virtual void visit (HIR::BorrowExpr &expr);\n   virtual void visit (HIR::DereferenceExpr &expr);"}, {"sha": "35c61fe03f025e15fe79a48cb1a2f3178a0ef581", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -52,10 +52,6 @@ ConstChecker::is_const_extern_fn (HIR::ExternalFunctionItem &fn)\n     });\n }\n \n-void\n-ConstChecker::visit (IdentifierExpr &ident_expr)\n-{}\n-\n void\n ConstChecker::visit (Lifetime &lifetime)\n {}"}, {"sha": "50838d18996298207747ce433b7244b0e03d2101", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -50,7 +50,6 @@ class ConstChecker : public HIRFullVisitor\n   Resolver::Resolver &resolver;\n   Analysis::Mappings &mappings;\n \n-  virtual void visit (IdentifierExpr &ident_expr) override;\n   virtual void visit (Lifetime &lifetime) override;\n   virtual void visit (LifetimeParam &lifetime_param) override;\n   virtual void visit (PathInExpression &path) override;"}, {"sha": "d9ef551f5e10b700b9a697d5c16d564fd45340db", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -128,21 +128,6 @@ UnsafeChecker::check_function_call (HirId node_id, Location locus)\n \t\t       locus);\n }\n \n-void\n-UnsafeChecker::visit (IdentifierExpr &ident_expr)\n-{\n-  NodeId ast_node_id = ident_expr.get_mappings ().get_nodeid ();\n-  NodeId ref_node_id;\n-  HirId definition_id;\n-\n-  if (!resolver.lookup_resolved_name (ast_node_id, &ref_node_id))\n-    return;\n-\n-  rust_assert (mappings.lookup_node_to_hir (ref_node_id, &definition_id));\n-\n-  check_use_of_static (definition_id, ident_expr.get_locus ());\n-}\n-\n void\n UnsafeChecker::visit (Lifetime &lifetime)\n {}"}, {"sha": "ae1eb509d781a2154b94bb706b5d0a67cf8ea3f4", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -52,7 +52,6 @@ class UnsafeChecker : public HIRFullVisitor\n   Resolver::Resolver &resolver;\n   Analysis::Mappings &mappings;\n \n-  virtual void visit (IdentifierExpr &ident_expr) override;\n   virtual void visit (Lifetime &lifetime) override;\n   virtual void visit (LifetimeParam &lifetime_param) override;\n   virtual void visit (PathInExpression &path) override;"}, {"sha": "245632b4b4c507d5c4acdb4511e9aec4d1554c15", "filename": "gcc/rust/checks/lints/rust-lint-marklive.cc", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -246,20 +246,6 @@ MarkLive::visit (HIR::TupleIndexExpr &expr)\n   expr.get_tuple_expr ()->accept_vis (*this);\n }\n \n-void\n-MarkLive::visit (HIR::IdentifierExpr &expr)\n-{\n-  NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n-  NodeId ref_node_id = UNKNOWN_NODEID;\n-  find_ref_node_id (ast_node_id, ref_node_id);\n-\n-  // node back to HIR\n-  HirId ref;\n-  bool ok = mappings->lookup_node_to_hir (ref_node_id, &ref);\n-  rust_assert (ok);\n-  mark_hir_id (ref);\n-}\n-\n void\n MarkLive::visit (HIR::TypeAlias &alias)\n {"}, {"sha": "119af8b8c9545d4cd26a3c199a4cdbb5913ff455", "filename": "gcc/rust/checks/lints/rust-lint-marklive.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -36,7 +36,6 @@ class MarkLive : public MarkLiveBase\n   void go (HIR::Crate &crate);\n \n   void visit (HIR::PathInExpression &expr) override;\n-  void visit (HIR::IdentifierExpr &expr) override;\n   void visit (HIR::FieldAccessExpr &expr) override;\n   void visit (HIR::TupleIndexExpr &expr) override;\n   void visit (HIR::MethodCallExpr &expr) override;"}, {"sha": "4f7f40f27e45f981ff575ed712833c449fa71683", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -255,11 +255,16 @@ class ASTLoweringExpr : public ASTLoweringBase\n   void visit (AST::IdentifierExpr &expr) override\n   {\n     auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-    translated\n-      = new HIR::IdentifierExpr (mapping, expr.as_string (), expr.get_locus ());\n+    Analysis::NodeMapping mapping1 (crate_num, expr.get_node_id (),\n+\t\t\t\t    mappings->get_next_hir_id (crate_num),\n+\t\t\t\t    UNKNOWN_LOCAL_DEFID);\n+    Analysis::NodeMapping mapping2 (mapping1);\n+\n+    HIR::PathIdentSegment ident_seg (expr.get_ident ());\n+    HIR::PathExprSegment seg (mapping1, ident_seg, expr.get_locus (),\n+\t\t\t      HIR::GenericArgs::create_empty ());\n+    translated = new HIR::PathInExpression (mapping2, {seg}, expr.get_locus (),\n+\t\t\t\t\t    false, expr.get_outer_attrs ());\n   }\n \n   void visit (AST::ArrayExpr &expr) override"}, {"sha": "bb139a7c1b7abf80d461e8621664d2b6caae0fcc", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -77,9 +77,6 @@ Dump::go (HIR::Crate &crate)\n   stream << \"}\" << std::endl;\n }\n \n-void\n-Dump::visit (IdentifierExpr &)\n-{}\n void\n Dump::visit (Lifetime &)\n {}"}, {"sha": "8b9e8939a282648bbb9ce76de1cb3fd2fd7ecdb8", "filename": "gcc/rust/hir/rust-hir-dump.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -37,7 +37,6 @@ class Dump : public HIRFullVisitor\n   std::size_t indent; // current indentation level\n   char indent_char = '\\t';\n \n-  virtual void visit (IdentifierExpr &) override;\n   virtual void visit (Lifetime &) override;\n   virtual void visit (LifetimeParam &) override;\n   virtual void visit (PathInExpression &) override;"}, {"sha": "2798ba9fd8483d46580dd087bc55ef40e598611b", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -27,7 +27,6 @@ class Stmt;\n class Item;\n class Expr;\n class ExprWithoutBlock;\n-class IdentifierExpr;\n class Pattern;\n class Type;\n class TypeNoBounds;"}, {"sha": "4e255320e2dd62bf6527987c388eed6bad38bf95", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -3751,18 +3751,6 @@ Module::add_crate_name (std::vector<std::string> &names) const\n \n /* All accept_vis method below */\n \n-void\n-IdentifierExpr::accept_vis (HIRFullVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-IdentifierExpr::accept_vis (HIRExpressionVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n Lifetime::accept_vis (HIRFullVisitor &vis)\n {"}, {"sha": "b3c0b9359cc422b2dc6720c956e85bd4e3df3850", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -27,7 +27,6 @@ namespace HIR {\n class HIRFullVisitor\n {\n public:\n-  virtual void visit (IdentifierExpr &ident_expr) = 0;\n   virtual void visit (Lifetime &lifetime) = 0;\n   virtual void visit (LifetimeParam &lifetime_param) = 0;\n   virtual void visit (PathInExpression &path) = 0;\n@@ -166,7 +165,6 @@ class HIRFullVisitorBase : public HIRFullVisitor\n public:\n   virtual ~HIRFullVisitorBase () {}\n \n-  virtual void visit (IdentifierExpr &) override {}\n   virtual void visit (Lifetime &) override {}\n   virtual void visit (LifetimeParam &) override {}\n   virtual void visit (PathInExpression &) override {}\n@@ -425,7 +423,6 @@ class HIRExpressionVisitor\n   virtual void visit (ClosureExprInner &expr) = 0;\n   virtual void visit (StructExprStructFields &) = 0;\n   virtual void visit (StructExprStruct &) = 0;\n-  virtual void visit (IdentifierExpr &ident_expr) = 0;\n   virtual void visit (LiteralExpr &expr) = 0;\n   virtual void visit (BorrowExpr &expr) = 0;\n   virtual void visit (DereferenceExpr &expr) = 0;"}, {"sha": "927ac06fc4a30c473a7aa3f86468cfbfd21594c2", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -274,7 +274,6 @@ class Expr : public Node\n     Match,\n     Await,\n     AsyncBlock,\n-    Ident,\n     Path,\n   };\n \n@@ -367,63 +366,6 @@ class ExprWithoutBlock : public Expr\n   };\n };\n \n-/* HACK: IdentifierExpr, delete when figure out identifier vs expr problem in\n- * Pratt parser */\n-/* Alternatively, identifiers could just be represented as single-segment paths\n- */\n-class IdentifierExpr : public ExprWithoutBlock\n-{\n-  Identifier ident;\n-\n-public:\n-  Location locus;\n-\n-  IdentifierExpr (Analysis::NodeMapping mappings, Identifier ident,\n-\t\t  Location locus = Location (),\n-\t\t  AST::AttrVec outer_attrs = AST::AttrVec ())\n-    : ExprWithoutBlock (std::move (mappings), std::move (outer_attrs)),\n-      ident (std::move (ident)), locus (locus)\n-  {}\n-\n-  std::string as_string () const override\n-  {\n-    return \"( \" + ident + \" (\" + get_mappings ().as_string () + \"))\";\n-  }\n-\n-  Location get_locus () const override final { return locus; }\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-  void accept_vis (HIRExpressionVisitor &vis) override;\n-\n-  // Clones this object.\n-  std::unique_ptr<IdentifierExpr> clone_identifier_expr () const\n-  {\n-    return std::unique_ptr<IdentifierExpr> (clone_identifier_expr_impl ());\n-  }\n-\n-  Identifier get_identifier () const { return ident; }\n-\n-  ExprType get_expression_type () const final override\n-  {\n-    return ExprType::Ident;\n-  }\n-\n-protected:\n-  // Clone method implementation\n-  IdentifierExpr *clone_expr_without_block_impl () const override\n-  {\n-    return clone_identifier_expr_impl ();\n-  }\n-\n-  IdentifierExpr *clone_identifier_expr_impl () const\n-  {\n-    return new IdentifierExpr (*this);\n-  }\n-\n-  IdentifierExpr (IdentifierExpr const &other) = default;\n-  IdentifierExpr &operator= (IdentifierExpr const &other) = default;\n-};\n-\n // Pattern base HIR node\n class Pattern : public Node\n {"}, {"sha": "ed822cc4f139fdac00d4e32d233a35c253f3f933", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -152,8 +152,14 @@ grs_langhook_option_lang_mask (void)\n \n /* Initialize the options structure. */\n static void\n-grs_langhook_init_options_struct (struct gcc_options * /* opts */)\n+grs_langhook_init_options_struct (struct gcc_options *opts)\n {\n+  /* Operations are always wrapping in Rust, even on signed integer. This is\n+   * useful for the low level wrapping_{add, sub, mul} intrinsics, not for\n+   * regular arithmetic operations which are checked for overflow anyway using\n+   * builtins */\n+  opts->x_flag_wrapv = 1;\n+\n   // nothing yet - used by frontends to change specific options for the language\n   Rust::Session::get_instance ().init_options ();\n }"}, {"sha": "6d8bbda428c0b4f574e2f3282e9b02dcd987aa0e", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -262,62 +262,6 @@ TypeCheckExpr::visit (HIR::CompoundAssignmentExpr &expr)\n     }\n }\n \n-void\n-TypeCheckExpr::visit (HIR::IdentifierExpr &expr)\n-{\n-  NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n-\n-  // then lookup the reference_node_id\n-  NodeId ref_node_id = UNKNOWN_NODEID;\n-  if (!resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n-    {\n-      resolver->lookup_resolved_type (ast_node_id, &ref_node_id);\n-    }\n-\n-  if (ref_node_id == UNKNOWN_NODEID)\n-    {\n-      // FIXME this needs to go away and just return error node\n-      rust_error_at (expr.get_locus (), \"unresolved node: %s\",\n-\t\t     expr.as_string ().c_str ());\n-      return;\n-    }\n-\n-  // node back to HIR\n-  HirId ref;\n-  if (!mappings->lookup_node_to_hir (ref_node_id, &ref))\n-    {\n-      // FIXME\n-      // this is an internal error\n-      rust_error_at (expr.get_locus (), \"123 reverse lookup failure\");\n-      return;\n-    }\n-\n-  // the base reference for this name _must_ have a type set\n-  TyTy::BaseType *lookup;\n-  if (!context->lookup_type (ref, &lookup))\n-    {\n-      // FIXME\n-      // this is an internal error\n-      rust_error_at (mappings->lookup_location (ref),\n-\t\t     \"Failed to resolve IdentifierExpr type: %s\",\n-\t\t     expr.as_string ().c_str ());\n-      return;\n-    }\n-\n-  infered = lookup->clone ();\n-\n-  // Generic unit structs look like an identifier but they actually need be\n-  // handled as a path-in-expression so this gives us a chance to infer the\n-  // generic parameters.\n-  // see https://github.com/Rust-GCC/gccrs/issues/1447\n-  bool is_unit_struct\n-    = infered->get_kind () == TyTy::TypeKind::ADT && infered->is_unit ();\n-  if (is_unit_struct && infered->needs_generic_substitutions ())\n-    {\n-      infered = SubstMapper::InferSubst (infered, expr.get_locus ());\n-    }\n-}\n-\n void\n TypeCheckExpr::visit (HIR::LiteralExpr &expr)\n {"}, {"sha": "19a6c791a9d764ca93d3a0d6ddb83f463a9110ff", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -37,7 +37,6 @@ class TypeCheckExpr : public TypeCheckBase, private HIR::HIRExpressionVisitor\n   void visit (HIR::MethodCallExpr &expr) override;\n   void visit (HIR::AssignmentExpr &expr) override;\n   void visit (HIR::CompoundAssignmentExpr &expr) override;\n-  void visit (HIR::IdentifierExpr &expr) override;\n   void visit (HIR::LiteralExpr &expr) override;\n   void visit (HIR::ArithmeticOrLogicalExpr &expr) override;\n   void visit (HIR::ComparisonExpr &expr) override;"}, {"sha": "f22b35d7942cb172296a8e2040a07763f3848369", "filename": "gcc/rust/typecheck/rust-hir-type-check-struct.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -313,10 +313,16 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifier &field)\n       return;\n     }\n \n-  // we can make the field look like an identifier expr to take advantage of\n-  // existing code to figure out the type\n-  HIR::IdentifierExpr expr (field.get_mappings (), field.get_field_name (),\n-\t\t\t    field.get_locus ());\n+  // we can make the field look like a path expr to take advantage of existing\n+  // code\n+  Analysis::NodeMapping mappings_copy1 = field.get_mappings ();\n+  Analysis::NodeMapping mappings_copy2 = field.get_mappings ();\n+\n+  HIR::PathIdentSegment ident_seg (field.get_field_name ());\n+  HIR::PathExprSegment seg (mappings_copy1, ident_seg, field.get_locus (),\n+\t\t\t    HIR::GenericArgs::create_empty ());\n+  HIR::PathInExpression expr (mappings_copy2, {seg}, field.get_locus (), false,\n+\t\t\t      {});\n   TyTy::BaseType *value = TypeCheckExpr::Resolve (&expr);\n \n   resolved_field_value_expr"}, {"sha": "ccf0f625e4b19f1f55ee02bf8df1a423936ec025", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -159,11 +159,6 @@ class TypeResolverDump : private TypeCheckBase, private HIR::HIRFullVisitorBase\n \t    + type_string (expr.get_mappings ());\n   }\n \n-  void visit (HIR::IdentifierExpr &expr) override\n-  {\n-    dump += expr.get_identifier () + \":\" + type_string (expr.get_mappings ());\n-  }\n-\n   void visit (HIR::ArrayExpr &expr) override\n   {\n     dump += type_string (expr.get_mappings ()) + \":[\";"}, {"sha": "7c0a04342621084ff0ce00d0aa41f442278c86a3", "filename": "gcc/testsuite/rust/compile/torture/issue-1075.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1075.rs?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -19,8 +19,7 @@ impl<T> *const [T] {\n     pub const fn len(self) -> usize {\n         // SAFETY: this is safe because `*const [T]` and `FatPtr<T>` have the same layout.\n         // Only `std` can make this guarantee.\n-        let a = unsafe { Repr { rust: self }.raw };\n-        a.len\n+        unsafe { Repr { rust: self }.raw.len }\n     }\n \n     pub const fn as_ptr(self) -> *const T {"}, {"sha": "fd3fa457cc8789b4d9ffc0539bbb428174517a14", "filename": "gcc/testsuite/rust/compile/traits3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits3.rs?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -10,9 +10,9 @@ impl<T> Foo for Bar<T> {\n     type A = i32;\n \n     fn baz(a: f32) -> f32 {\n-        // { dg-error \"expected .i32. got .f32.\" \"\" { target *-*-* } .-1 }\n-        // { dg-error \"method .baz. has an incompatible type for trait .Foo.\" \"\" { target *-*-* } .-2 }\n+        // { dg-error \"method .baz. has an incompatible type for trait .Foo.\" \"\" { target *-*-* } .-1 }\n         a\n+        // { dg-error \"expected .i32. got .f32.\" \"\" { target *-*-* } .-1 }\n     }\n }\n "}, {"sha": "242c94b5cb63384300692311c8c1e396539b1743", "filename": "gcc/testsuite/rust/execute/torture/issue-1120.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1120.rs?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -29,8 +29,7 @@ pub struct Range<Idx> {\n #[lang = \"const_slice_ptr\"]\n impl<T> *const [T] {\n     pub const fn len(self) -> usize {\n-        let a = unsafe { Repr { rust: self }.raw };\n-        a.len\n+        unsafe { Repr { rust: self }.raw.len }\n     }\n \n     pub const fn as_ptr(self) -> *const T {"}, {"sha": "f2080a6e072ac4cf6705071fc88f36589ae8a8bf", "filename": "gcc/testsuite/rust/execute/torture/issue-1133.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1133.rs?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -29,8 +29,7 @@ pub struct Range<Idx> {\n #[lang = \"const_slice_ptr\"]\n impl<T> *const [T] {\n     pub const fn len(self) -> usize {\n-        let a = unsafe { Repr { rust: self }.raw };\n-        a.len\n+        unsafe { Repr { rust: self }.raw.len }\n     }\n \n     pub const fn as_ptr(self) -> *const T {"}, {"sha": "c56d5c186956ba326f8c3fff7b0c043f68c38539", "filename": "gcc/testsuite/rust/execute/torture/issue-1232.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1232.rs?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -34,8 +34,7 @@ pub struct Range<Idx> {\n #[lang = \"const_slice_ptr\"]\n impl<T> *const [T] {\n     pub const fn len(self) -> usize {\n-        let a = unsafe { Repr { rust: self }.raw };\n-        a.len\n+        unsafe { Repr { rust: self }.raw.len }\n     }\n \n     pub const fn as_ptr(self) -> *const T {"}, {"sha": "5c079a61f07eb469db1de122740fdbb7686997cd", "filename": "gcc/testsuite/rust/execute/torture/issue-1436.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-1436.rs?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -42,8 +42,7 @@ pub struct Range<Idx> {\n #[lang = \"const_slice_ptr\"]\n impl<T> *const [T] {\n     pub const fn len(self) -> usize {\n-        let a = unsafe { Repr { rust: self }.raw };\n-        a.len\n+        unsafe { Repr { rust: self }.raw.len }\n     }\n \n     pub const fn as_ptr(self) -> *const T {"}, {"sha": "d1132989ddbd5477412146594fde69bb5724188b", "filename": "gcc/testsuite/rust/execute/torture/slice-magic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic.rs?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -24,8 +24,7 @@ pub struct Range<Idx> {\n #[lang = \"const_slice_ptr\"]\n impl<A> *const [A] {\n     pub const fn len(self) -> usize {\n-        let a = unsafe { Repr { rust: self }.raw };\n-        a.len\n+        unsafe { Repr { rust: self }.raw.len }\n     }\n \n     pub const fn as_ptr(self) -> *const A {"}, {"sha": "64a566185fac57055a4f7d9722cf906bbd28129a", "filename": "gcc/testsuite/rust/execute/torture/slice-magic2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fslice-magic2.rs?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -24,8 +24,7 @@ pub struct Range<Idx> {\n #[lang = \"const_slice_ptr\"]\n impl<T> *const [T] {\n     pub const fn len(self) -> usize {\n-        let a = unsafe { Repr { rust: self }.raw };\n-        a.len\n+        unsafe { Repr { rust: self }.raw.len }\n     }\n \n     pub const fn as_ptr(self) -> *const T {"}, {"sha": "64b37085ab75d51c1c144315643d8016d2ff2b03", "filename": "gcc/testsuite/rust/execute/torture/wrapping_op1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op1.rs?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -0,0 +1,14 @@\n+extern \"rust-intrinsic\" {\n+    pub fn wrapping_add<T>(l: T, r: T) -> T;\n+}\n+\n+fn five() -> u8 {\n+    5\n+}\n+\n+fn main() -> u8 {\n+    let l = 255;\n+    let r = five();\n+\n+    unsafe { wrapping_add(l, r) - 4 }\n+}"}, {"sha": "f9990157894d19996665b96e97171a390a49bafd", "filename": "gcc/testsuite/rust/execute/torture/wrapping_op2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/021e4953390da748515debfc8973149457d3118a/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fwrapping_op2.rs?ref=021e4953390da748515debfc8973149457d3118a", "patch": "@@ -0,0 +1,20 @@\n+extern \"rust-intrinsic\" {\n+    pub fn wrapping_add<T>(l: T, r: T) -> T;\n+    pub fn wrapping_sub<T>(l: T, r: T) -> T;\n+    pub fn wrapping_mul<T>(l: T, r: T) -> T;\n+}\n+\n+fn five() -> u8 {\n+    5\n+}\n+\n+fn main() -> u8 {\n+    let l = 255;\n+    let r = five();\n+\n+    let ret0 = unsafe { wrapping_add(l, r) - 4 }; // 4\n+    let ret1 = unsafe { wrapping_sub(r, l) - 6 }; // 6\n+    let ret2 = unsafe { wrapping_mul(r, l) - 251 }; // 251\n+\n+    ret0 + ret1 + ret2\n+}"}]}