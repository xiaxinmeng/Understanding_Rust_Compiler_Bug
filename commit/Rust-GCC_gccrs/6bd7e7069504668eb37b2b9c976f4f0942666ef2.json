{"sha": "6bd7e7069504668eb37b2b9c976f4f0942666ef2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJkN2U3MDY5NTA0NjY4ZWIzN2IyYjljOTc2ZjRmMDk0MjY2NmVmMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-23T10:29:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-23T10:29:36Z"}, "message": "re PR tree-optimization/92179 (r277288 causes ICEs compiling several test cases)\n\n2019-10-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92179\n\t* tree-vect-stmts.c (vectorizable_shift): For shift args\n\tthat are all the same remove type restriction in the SLP case.\n\tAdjust SLP code to handle converting of the shift arg to\n\tonly apply in case the modes are different.\n\nFrom-SVN: r277310", "tree": {"sha": "32d1d7e59a612e540cdbee9640fa2f1dbf43aae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32d1d7e59a612e540cdbee9640fa2f1dbf43aae2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bd7e7069504668eb37b2b9c976f4f0942666ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd7e7069504668eb37b2b9c976f4f0942666ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd7e7069504668eb37b2b9c976f4f0942666ef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd7e7069504668eb37b2b9c976f4f0942666ef2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae94bb0ee262e43ee391513210311594abf84e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae94bb0ee262e43ee391513210311594abf84e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae94bb0ee262e43ee391513210311594abf84e07"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "cfc1bdceab99965fb8cb96d2281f99fd85b2ca6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd7e7069504668eb37b2b9c976f4f0942666ef2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd7e7069504668eb37b2b9c976f4f0942666ef2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bd7e7069504668eb37b2b9c976f4f0942666ef2", "patch": "@@ -1,3 +1,11 @@\n+2019-10-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92179\n+\t* tree-vect-stmts.c (vectorizable_shift): For shift args\n+\tthat are all the same remove type restriction in the SLP case.\n+\tAdjust SLP code to handle converting of the shift arg to\n+\tonly apply in case the modes are different.\n+\n 2019-10-23  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/91969"}, {"sha": "02b95f51abbe66a10d13658a480f2580a3372c25", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd7e7069504668eb37b2b9c976f4f0942666ef2/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd7e7069504668eb37b2b9c976f4f0942666ef2/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=6bd7e7069504668eb37b2b9c976f4f0942666ef2", "patch": "@@ -5661,6 +5661,7 @@ vectorizable_shift (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     }\n \n   /* Vector shifted by vector.  */\n+  bool was_scalar_shift_arg = scalar_shift_arg;\n   if (!scalar_shift_arg)\n     {\n       optab = optab_for_tree_code (code, vectype, optab_vector);\n@@ -5720,16 +5721,6 @@ vectorizable_shift (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t      else if (!useless_type_conversion_p (TREE_TYPE (vectype),\n \t\t\t\t\t\t   TREE_TYPE (op1)))\n \t\t{\n-\t\t  if (slp_node\n-\t\t      && TYPE_MODE (TREE_TYPE (vectype))\n-\t\t\t != TYPE_MODE (TREE_TYPE (op1)))\n-\t\t    {\n-                      if (dump_enabled_p ())\n-                        dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-                                         \"unusable type for last operand in\"\n-                                         \" vector/vector shift/rotate.\\n\");\n-\t\t      return false;\n-\t\t    }\n \t\t  if (vec_stmt && !slp_node)\n \t\t    {\n \t\t      op1 = fold_convert (TREE_TYPE (vectype), op1);\n@@ -5831,18 +5822,36 @@ vectorizable_shift (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t   && !useless_type_conversion_p (TREE_TYPE (vectype),\n \t\t\t\t\t\t  TREE_TYPE (op1)))\n \t    {\n-\t      /* Convert the scalar constant shift amounts in-place.  */\n-\t      slp_tree shift = SLP_TREE_CHILDREN (slp_node)[1];\n-\t      gcc_assert (SLP_TREE_DEF_TYPE (shift) == vect_constant_def);\n-\t      for (unsigned i = 0;\n-\t\t   i < SLP_TREE_SCALAR_OPS (shift).length (); ++i)\n+\t      if (was_scalar_shift_arg)\n \t\t{\n-\t\t  SLP_TREE_SCALAR_OPS (shift)[i]\n-\t\t    = fold_convert (TREE_TYPE (vectype),\n-\t\t\t\t    SLP_TREE_SCALAR_OPS (shift)[i]);\n-\t\t  gcc_assert ((TREE_CODE (SLP_TREE_SCALAR_OPS (shift)[i])\n-\t\t\t       == INTEGER_CST));\n+\t\t  /* If the argument was the same in all lanes create\n+\t\t     the correctly typed vector shift amount directly.  */\n+\t\t  op1 = fold_convert (TREE_TYPE (vectype), op1);\n+\t\t  op1 = vect_init_vector (stmt_info, op1, TREE_TYPE (vectype),\n+\t\t\t\t\t  !loop_vinfo ? gsi : NULL);\n+\t\t  vec_oprnd1 = vect_init_vector (stmt_info, op1, vectype,\n+\t\t\t\t\t\t !loop_vinfo ? gsi : NULL);\n+                  vec_oprnds1.create (slp_node->vec_stmts_size);\n+\t\t  for (k = 0; k < slp_node->vec_stmts_size; k++)\n+\t\t    vec_oprnds1.quick_push (vec_oprnd1);\n \t\t}\n+\t      else if (dt[1] == vect_constant_def)\n+\t\t{\n+\t\t  /* Convert the scalar constant shift amounts in-place.  */\n+\t\t  slp_tree shift = SLP_TREE_CHILDREN (slp_node)[1];\n+\t\t  gcc_assert (SLP_TREE_DEF_TYPE (shift) == vect_constant_def);\n+\t\t  for (unsigned i = 0;\n+\t\t       i < SLP_TREE_SCALAR_OPS (shift).length (); ++i)\n+\t\t    {\n+\t\t      SLP_TREE_SCALAR_OPS (shift)[i]\n+\t\t\t  = fold_convert (TREE_TYPE (vectype),\n+\t\t\t\t\t  SLP_TREE_SCALAR_OPS (shift)[i]);\n+\t\t      gcc_assert ((TREE_CODE (SLP_TREE_SCALAR_OPS (shift)[i])\n+\t\t\t\t   == INTEGER_CST));\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\tgcc_assert (TYPE_MODE (op1_vectype) == TYPE_MODE (vectype));\n \t    }\n \n           /* vec_oprnd1 is available if operand 1 should be of a scalar-type"}]}