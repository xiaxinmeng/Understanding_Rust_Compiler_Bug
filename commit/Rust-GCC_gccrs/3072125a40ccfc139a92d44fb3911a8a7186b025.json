{"sha": "3072125a40ccfc139a92d44fb3911a8a7186b025", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3MjEyNWE0MGNjZmMxMzlhOTJkNDRmYjM5MTFhOGE3MTg2YjAyNQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-11-17T03:01:10Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-11-17T03:01:10Z"}, "message": "PR middle-end/97840 - Bogus -Wmaybe-uninitialized passing an empty object to a function\n\ngcc/ChangeLog:\n\t* tree-ssa-uninit.c (maybe_warn_operand): Call is_empty_type.\n\t* tree.c (default_is_empty_type): Rename...\n\t(is_empty_type): ...to this.\n\t* tree.h (is_empty_type): Declare.", "tree": {"sha": "f8d3b5964d6e4b7f39f1ec0f197cf23179297f23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8d3b5964d6e4b7f39f1ec0f197cf23179297f23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3072125a40ccfc139a92d44fb3911a8a7186b025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3072125a40ccfc139a92d44fb3911a8a7186b025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3072125a40ccfc139a92d44fb3911a8a7186b025", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3072125a40ccfc139a92d44fb3911a8a7186b025/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1ecb86569f63f897f6a95049c4ccf400bddeaad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ecb86569f63f897f6a95049c4ccf400bddeaad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1ecb86569f63f897f6a95049c4ccf400bddeaad"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "516a7bd2c992f0fb0ad3cec119ee04e5a8348794", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3072125a40ccfc139a92d44fb3911a8a7186b025/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3072125a40ccfc139a92d44fb3911a8a7186b025/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=3072125a40ccfc139a92d44fb3911a8a7186b025", "patch": "@@ -404,10 +404,7 @@ maybe_warn_operand (ao_ref &ref, gimple *stmt, tree lhs, tree rhs,\n   tree rhstype = TREE_TYPE (rhs);\n   if (POINTER_TYPE_P (rhstype))\n     rhstype = TREE_TYPE (rhstype);\n-  if (TYPE_EMPTY_P (rhstype)\n-      || (RECORD_OR_UNION_TYPE_P (rhstype)\n-\t  && (!first_field (rhstype)\n-\t      || default_is_empty_record (rhstype))))\n+  if (is_empty_type (rhstype))\n     return NULL_TREE;\n \n   bool warned = false;"}, {"sha": "0fe9097bbbcbc220f2bf371002092dc897b3385b", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3072125a40ccfc139a92d44fb3911a8a7186b025/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3072125a40ccfc139a92d44fb3911a8a7186b025/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3072125a40ccfc139a92d44fb3911a8a7186b025", "patch": "@@ -15136,22 +15136,22 @@ get_nonnull_args (const_tree fntype)\n /* Returns true if TYPE is a type where it and all of its subobjects\n    (recursively) are of structure, union, or array type.  */\n \n-static bool\n-default_is_empty_type (tree type)\n+bool\n+is_empty_type (const_tree type)\n {\n   if (RECORD_OR_UNION_TYPE_P (type))\n     {\n       for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n \tif (TREE_CODE (field) == FIELD_DECL\n \t    && !DECL_PADDING_P (field)\n-\t    && !default_is_empty_type (TREE_TYPE (field)))\n+\t    && !is_empty_type (TREE_TYPE (field)))\n \t  return false;\n       return true;\n     }\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n     return (integer_minus_onep (array_type_nelts (type))\n \t    || TYPE_DOMAIN (type) == NULL_TREE\n-\t    || default_is_empty_type (TREE_TYPE (type)));\n+\t    || is_empty_type (TREE_TYPE (type)));\n   return false;\n }\n \n@@ -15170,7 +15170,7 @@ default_is_empty_record (const_tree type)\n   if (TREE_ADDRESSABLE (type))\n     return false;\n \n-  return default_is_empty_type (TYPE_MAIN_VARIANT (type));\n+  return is_empty_type (TYPE_MAIN_VARIANT (type));\n }\n \n /* Determine whether TYPE is a structure with a flexible array member,"}, {"sha": "5c0e3cc2e5a80d2aeca916f40ac830421d31a48f", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3072125a40ccfc139a92d44fb3911a8a7186b025/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3072125a40ccfc139a92d44fb3911a8a7186b025/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3072125a40ccfc139a92d44fb3911a8a7186b025", "patch": "@@ -6233,6 +6233,7 @@ extern void gt_pch_nx (tree &);\n extern void gt_pch_nx (tree &, gt_pointer_operator, void *);\n \n extern bool nonnull_arg_p (const_tree);\n+extern bool is_empty_type (const_tree);\n extern bool default_is_empty_record (const_tree);\n extern bool flexible_array_type_p (const_tree);\n extern HOST_WIDE_INT arg_int_size_in_bytes (const_tree);"}]}