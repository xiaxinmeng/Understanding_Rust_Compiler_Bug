{"sha": "d4391a62cb9a00b8aed02b0328f38ada26848897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQzOTFhNjJjYjlhMDBiOGFlZDAyYjAzMjhmMzhhZGEyNjg0ODg5Nw==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2017-07-07T21:08:42Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2017-07-07T21:08:42Z"}, "message": "float128-ifunc.c: Don't include auxv.h.\n\n\tlibgcc/\n\t* config/rs6000/float128-ifunc.c: Don't include auxv.h.\n\t(have_ieee_hw_p): Delete function.\n\t(SW_OR_HW) Use __builtin_cpu_supports().\n\nFrom-SVN: r250061", "tree": {"sha": "f6d6acb0ae1c4a7299f7763343a64d30153e7dee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6d6acb0ae1c4a7299f7763343a64d30153e7dee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4391a62cb9a00b8aed02b0328f38ada26848897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4391a62cb9a00b8aed02b0328f38ada26848897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4391a62cb9a00b8aed02b0328f38ada26848897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4391a62cb9a00b8aed02b0328f38ada26848897/comments", "author": null, "committer": null, "parents": [{"sha": "738f7c2e12de922b91024717429a048b877492ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/738f7c2e12de922b91024717429a048b877492ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/738f7c2e12de922b91024717429a048b877492ee"}], "stats": {"total": 50, "additions": 8, "deletions": 42}, "files": [{"sha": "ff226417bc3032aa0bcfc475d49a22c41c1a9d23", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4391a62cb9a00b8aed02b0328f38ada26848897/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4391a62cb9a00b8aed02b0328f38ada26848897/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d4391a62cb9a00b8aed02b0328f38ada26848897", "patch": "@@ -1,10 +1,16 @@\n+2017-07-07  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\t* config/rs6000/float128-ifunc.c: Don't include auxv.h.\n+\t(have_ieee_hw_p): Delete function.\n+\t(SW_OR_HW) Use __builtin_cpu_supports().\n+\n 2017-07-06  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/lib1funcs.S: Defined __ARM_ARCH__ to 8 for ARMv8-R.\n \n 2017-07-03  Olivier Hainque  <hainque@adacore.com>\n \n-        * config/t-vxworks7: New file, really.\n+\t* config/t-vxworks7: New file, really.\n \n 2017-06-28  Joseph Myers  <joseph@codesourcery.com>\n "}, {"sha": "882c56ef21e4c09754dbf53de26606019e8703ef", "filename": "libgcc/config/rs6000/float128-ifunc.c", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4391a62cb9a00b8aed02b0328f38ada26848897/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4391a62cb9a00b8aed02b0328f38ada26848897/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c?ref=d4391a62cb9a00b8aed02b0328f38ada26848897", "patch": "@@ -45,47 +45,7 @@\n #error \"This module must not be compiled with IEEE 128-bit hardware support\"\n #endif\n \n-#include <sys/auxv.h>\n-\n-/* Use the namespace clean version of getauxval.  However, not all versions of\n-   sys/auxv.h declare it, so declare it here.  This code is intended to be\n-   temporary until a suitable version of __builtin_cpu_supports is added that\n-   allows us to tell quickly if the machine supports IEEE 128-bit hardware.  */\n-extern unsigned long __getauxval (unsigned long);\n-\n-static int\n-have_ieee_hw_p (void)\n-{\n-  static int ieee_hw_p = -1;\n-\n-  if (ieee_hw_p < 0)\n-    {\n-      char *p = (char *) __getauxval (AT_PLATFORM);\n-\n-      ieee_hw_p = 0;\n-\n-      /* Don't use atoi/strtol/strncmp/etc.  These may require the normal\n-\t environment to be setup to set errno to 0, and the ifunc resolvers run\n-\t before the whole glibc environment is initialized.  */\n-      if (p && p[0] == 'p' && p[1] == 'o' && p[2] == 'w' && p[3] == 'e'\n-\t  && p[4] == 'r')\n-\t{\n-\t  long n = 0;\n-\t  char ch;\n-\n-\t  p += 5;\n-\t  while ((ch = *p++) >= '0' && (ch <= '9'))\n-\t    n = (n * 10) + (ch - '0');\n-\n-\t  if (n >= 9)\n-\t    ieee_hw_p = 1;\n-\t}\n-    }\n-\n-  return ieee_hw_p;\n-}\n-\n-#define SW_OR_HW(SW, HW) (have_ieee_hw_p () ? HW : SW)\n+#define SW_OR_HW(SW, HW) (__builtin_cpu_supports (\"ieee128\") ? HW : SW)\n \n /* Resolvers.  */\n "}]}