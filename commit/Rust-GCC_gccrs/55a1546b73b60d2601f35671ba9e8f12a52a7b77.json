{"sha": "55a1546b73b60d2601f35671ba9e8f12a52a7b77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVhMTU0NmI3M2I2MGQyNjAxZjM1NjcxYmE5ZThmMTJhNTJhN2I3Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-25T07:20:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-06-25T10:03:23Z"}, "message": "tree-optimization/101202 - fix ICE with failed backedge SLP nodes\n\nThis fixes an ICE with failed backedge SLP nodes still in the graph\nwhile doing permute optimization by explicitely handling those.\n\n2021-06-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101202\n\t* tree-vect-slp.c (vect_optimize_slp): Explicitely handle\n\tfailed nodes.\n\n\t* gcc.dg/torture/pr101202.c: New testcase.", "tree": {"sha": "2791ffb3fe38afe97eca6b15207a6f193389af8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2791ffb3fe38afe97eca6b15207a6f193389af8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55a1546b73b60d2601f35671ba9e8f12a52a7b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a1546b73b60d2601f35671ba9e8f12a52a7b77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a1546b73b60d2601f35671ba9e8f12a52a7b77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a1546b73b60d2601f35671ba9e8f12a52a7b77/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05516402f8eb8ec282a13fa1e38d9f9c5b3dd3e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05516402f8eb8ec282a13fa1e38d9f9c5b3dd3e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05516402f8eb8ec282a13fa1e38d9f9c5b3dd3e5"}], "stats": {"total": 82, "additions": 62, "deletions": 20}, "files": [{"sha": "e76c908f4937affa4d6441abaf1296b821922795", "filename": "gcc/testsuite/gcc.dg/torture/pr101202.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a1546b73b60d2601f35671ba9e8f12a52a7b77/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101202.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a1546b73b60d2601f35671ba9e8f12a52a7b77/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101202.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr101202.c?ref=55a1546b73b60d2601f35671ba9e8f12a52a7b77", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-vectorize\" } */\n+\n+int printf(const char *, ...);\n+unsigned a, b, d;\n+int c, e, f;\n+int main()\n+{\n+  while (a)\n+    if (b)\n+      {\n+\tf = a;\n+\twhile (e)\n+\t  {\n+\t    int h, i;\n+\t    if (d)\n+\t      {\n+\t\th = a;\n+\t\ti = d;\n+L:\n+\t\td = a | d && c;\n+\t\tif (a)\n+\t\t  {\n+\t\t    printf(\"%d\", a);\n+\t\t    goto L;\n+\t\t  }\n+\t      }\n+\t    a = h;\n+\t    d = i;\n+\t  }\n+      }\n+  return 0;\n+}"}, {"sha": "17fe5f23c0982a137ed9a274c75d4a5ac735e832", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a1546b73b60d2601f35671ba9e8f12a52a7b77/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a1546b73b60d2601f35671ba9e8f12a52a7b77/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=55a1546b73b60d2601f35671ba9e8f12a52a7b77", "patch": "@@ -3689,26 +3689,33 @@ vect_optimize_slp (vec_info *vinfo)\n \n \t  vertices[idx].visited = 1;\n \n-\t  /* We do not handle stores with a permutation.  */\n-\t  stmt_vec_info rep = SLP_TREE_REPRESENTATIVE (node);\n-\t  if (STMT_VINFO_DATA_REF (rep)\n-\t      && DR_IS_WRITE (STMT_VINFO_DATA_REF (rep)))\n-\t    continue;\n-\t  /* We cannot move a permute across an operation that is\n-\t     not independent on lanes.  Note this is an explicit\n-\t     negative list since that's much shorter than the respective\n-\t     positive one but it's critical to keep maintaining it.  */\n-\t  if (is_gimple_call (STMT_VINFO_STMT (rep)))\n-\t    switch (gimple_call_combined_fn (STMT_VINFO_STMT (rep)))\n-\t      {\n-\t      case CFN_COMPLEX_ADD_ROT90:\n-\t      case CFN_COMPLEX_ADD_ROT270:\n-\t      case CFN_COMPLEX_MUL:\n-\t      case CFN_COMPLEX_MUL_CONJ:\n-\t      case CFN_VEC_ADDSUB:\n+\t  /* We still eventually have failed backedge SLP nodes in the\n+\t     graph, those are only cancelled when analyzing operations.\n+\t     Simply treat them as transparent ops, propagating permutes\n+\t     through them.  */\n+\t  if (SLP_TREE_DEF_TYPE (node) == vect_internal_def)\n+\t    {\n+\t      /* We do not handle stores with a permutation.  */\n+\t      stmt_vec_info rep = SLP_TREE_REPRESENTATIVE (node);\n+\t      if (STMT_VINFO_DATA_REF (rep)\n+\t\t  && DR_IS_WRITE (STMT_VINFO_DATA_REF (rep)))\n \t\tcontinue;\n-\t      default:;\n-\t      }\n+\t      /* We cannot move a permute across an operation that is\n+\t\t not independent on lanes.  Note this is an explicit\n+\t\t negative list since that's much shorter than the respective\n+\t\t positive one but it's critical to keep maintaining it.  */\n+\t      if (is_gimple_call (STMT_VINFO_STMT (rep)))\n+\t\tswitch (gimple_call_combined_fn (STMT_VINFO_STMT (rep)))\n+\t\t  {\n+\t\t  case CFN_COMPLEX_ADD_ROT90:\n+\t\t  case CFN_COMPLEX_ADD_ROT270:\n+\t\t  case CFN_COMPLEX_MUL:\n+\t\t  case CFN_COMPLEX_MUL_CONJ:\n+\t\t  case CFN_VEC_ADDSUB:\n+\t\t    continue;\n+\t\t  default:;\n+\t\t  }\n+\t    }\n \n \t  int perm = -1;\n \t  for (graph_edge *succ = slpg->vertices[idx].succ;\n@@ -3812,7 +3819,9 @@ vect_optimize_slp (vec_info *vinfo)\n       slp_tree child;\n       FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n \t{\n-\t  if (!child || SLP_TREE_DEF_TYPE (child) == vect_internal_def)\n+\t  if (!child\n+\t      || (SLP_TREE_DEF_TYPE (child) != vect_constant_def\n+\t\t  && SLP_TREE_DEF_TYPE (child) != vect_external_def))\n \t    continue;\n \n \t  /* If the vector is uniform there's nothing to do.  */"}]}