{"sha": "582554e3bc1509b6ddc407004f97e3f756bcedf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyNTU0ZTNiYzE1MDliNmRkYzQwNzAwNGY5N2UzZjc1NmJjZWRmNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-30T08:52:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-30T08:52:48Z"}, "message": "target-insns.def (canonicalize_funcptr_for_compare): Add.\n\n2015-06-30  Richard Biener  <rguenther@suse.de>\n\n\t* target-insns.def (canonicalize_funcptr_for_compare): Add.\n\t* fold-const.c (build_range_check): Replace uses of\n\tHAVE_canonicalize_funcptr_for_compare.\n\t(fold_widened_comparison): Likewise.\n\t(fold_sign_changed_comparison): Likewise.\n\t* dojump.c: Include \"target.h\".\n\t(do_compare_and_jump): Replace uses of\n\tHAVE_canonicalize_funcptr_for_compare and\n\tgen_canonicalize_funcptr_for_compare.\n\t* expr.c (do_store_flag): Likewise.\n\nFrom-SVN: r225163", "tree": {"sha": "b1ed01f79f0cbb1722548c3388771b77be0e8607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1ed01f79f0cbb1722548c3388771b77be0e8607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/582554e3bc1509b6ddc407004f97e3f756bcedf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582554e3bc1509b6ddc407004f97e3f756bcedf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582554e3bc1509b6ddc407004f97e3f756bcedf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582554e3bc1509b6ddc407004f97e3f756bcedf5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f75d60893e092cffcbe422825ce4dc092d3fb9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f75d60893e092cffcbe422825ce4dc092d3fb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f75d60893e092cffcbe422825ce4dc092d3fb9e"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "836b69cb8d62852e266574418509b5434acdeab8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582554e3bc1509b6ddc407004f97e3f756bcedf5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582554e3bc1509b6ddc407004f97e3f756bcedf5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=582554e3bc1509b6ddc407004f97e3f756bcedf5", "patch": "@@ -1,3 +1,16 @@\n+2015-06-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* target-insns.def (canonicalize_funcptr_for_compare): Add.\n+\t* fold-const.c (build_range_check): Replace uses of\n+\tHAVE_canonicalize_funcptr_for_compare.\n+\t(fold_widened_comparison): Likewise.\n+\t(fold_sign_changed_comparison): Likewise.\n+\t* dojump.c: Include \"target.h\".\n+\t(do_compare_and_jump): Replace uses of\n+\tHAVE_canonicalize_funcptr_for_compare and\n+\tgen_canonicalize_funcptr_for_compare.\n+\t* expr.c (do_store_flag): Likewise.\n+\n 2015-06-30  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/66652"}, {"sha": "15b1ebf93cbe8519119efe8a06cb87508af865b1", "filename": "gcc/dojump.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582554e3bc1509b6ddc407004f97e3f756bcedf5/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582554e3bc1509b6ddc407004f97e3f756bcedf5/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=582554e3bc1509b6ddc407004f97e3f756bcedf5", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"predict.h\"\n #include \"basic-block.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n \n static bool prefer_and_bit_test (machine_mode, int);\n static void do_jump_by_parts_greater (tree, tree, int,\n@@ -1204,13 +1205,12 @@ do_compare_and_jump (tree treeop0, tree treeop1, enum rtx_code signed_code,\n   unsignedp = TYPE_UNSIGNED (type);\n   code = unsignedp ? unsigned_code : signed_code;\n \n-#ifdef HAVE_canonicalize_funcptr_for_compare\n   /* If function pointers need to be \"canonicalized\" before they can\n      be reliably compared, then canonicalize them.\n      Only do this if *both* sides of the comparison are function pointers.\n      If one side isn't, we want a noncanonicalized comparison.  See PR\n      middle-end/17564.  */\n-  if (HAVE_canonicalize_funcptr_for_compare\n+  if (targetm.have_canonicalize_funcptr_for_compare ()\n       && TREE_CODE (TREE_TYPE (treeop0)) == POINTER_TYPE\n       && TREE_CODE (TREE_TYPE (TREE_TYPE (treeop0)))\n           == FUNCTION_TYPE\n@@ -1221,13 +1221,12 @@ do_compare_and_jump (tree treeop0, tree treeop1, enum rtx_code signed_code,\n       rtx new_op0 = gen_reg_rtx (mode);\n       rtx new_op1 = gen_reg_rtx (mode);\n \n-      emit_insn (gen_canonicalize_funcptr_for_compare (new_op0, op0));\n+      emit_insn (targetm.gen_canonicalize_funcptr_for_compare (new_op0, op0));\n       op0 = new_op0;\n \n-      emit_insn (gen_canonicalize_funcptr_for_compare (new_op1, op1));\n+      emit_insn (targetm.gen_canonicalize_funcptr_for_compare (new_op1, op1));\n       op1 = new_op1;\n     }\n-#endif\n \n   do_compare_rtx_and_jump (op0, op1, code, unsignedp, mode,\n                            ((mode == BLKmode)"}, {"sha": "1b4a37c114c195f3e91da4cae2e7bfea7e4f1c51", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582554e3bc1509b6ddc407004f97e3f756bcedf5/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582554e3bc1509b6ddc407004f97e3f756bcedf5/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=582554e3bc1509b6ddc407004f97e3f756bcedf5", "patch": "@@ -8916,7 +8916,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t  return temp;\n \n \t/* Use a compare and a jump for BLKmode comparisons, or for function\n-\t   type comparisons is HAVE_canonicalize_funcptr_for_compare.  */\n+\t   type comparisons is have_canonicalize_funcptr_for_compare.  */\n \n \tif ((target == 0\n \t     || modifier == EXPAND_STACK_PARM\n@@ -10920,16 +10920,14 @@ do_store_flag (sepops ops, rtx target, machine_mode mode)\n \n   /* We won't bother with store-flag operations involving function pointers\n      when function pointers must be canonicalized before comparisons.  */\n-#ifdef HAVE_canonicalize_funcptr_for_compare\n-  if (HAVE_canonicalize_funcptr_for_compare\n+  if (targetm.have_canonicalize_funcptr_for_compare ()\n       && ((TREE_CODE (TREE_TYPE (arg0)) == POINTER_TYPE\n \t   && (TREE_CODE (TREE_TYPE (TREE_TYPE (arg0)))\n \t       == FUNCTION_TYPE))\n \t  || (TREE_CODE (TREE_TYPE (arg1)) == POINTER_TYPE\n \t      && (TREE_CODE (TREE_TYPE (TREE_TYPE (arg1)))\n \t\t  == FUNCTION_TYPE))))\n     return 0;\n-#endif\n \n   STRIP_NOPS (arg0);\n   STRIP_NOPS (arg1);"}, {"sha": "5cdb6d1e13d143f0b0342e352fd4554cf55fbe4f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582554e3bc1509b6ddc407004f97e3f756bcedf5/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582554e3bc1509b6ddc407004f97e3f756bcedf5/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=582554e3bc1509b6ddc407004f97e3f756bcedf5", "patch": "@@ -4488,14 +4488,12 @@ build_range_check (location_t loc, tree type, tree exp, int in_p,\n {\n   tree etype = TREE_TYPE (exp), value;\n \n-#ifdef HAVE_canonicalize_funcptr_for_compare\n   /* Disable this optimization for function pointer expressions\n      on targets that require function pointer canonicalization.  */\n-  if (HAVE_canonicalize_funcptr_for_compare\n+  if (targetm.have_canonicalize_funcptr_for_compare ()\n       && TREE_CODE (etype) == POINTER_TYPE\n       && TREE_CODE (TREE_TYPE (etype)) == FUNCTION_TYPE)\n     return NULL_TREE;\n-#endif\n \n   if (! in_p)\n     {\n@@ -6964,14 +6962,12 @@ fold_widened_comparison (location_t loc, enum tree_code code,\n     return NULL_TREE;\n   shorter_type = TREE_TYPE (arg0_unw);\n \n-#ifdef HAVE_canonicalize_funcptr_for_compare\n   /* Disable this optimization if we're casting a function pointer\n      type on targets that require function pointer canonicalization.  */\n-  if (HAVE_canonicalize_funcptr_for_compare\n+  if (targetm.have_canonicalize_funcptr_for_compare ()\n       && TREE_CODE (shorter_type) == POINTER_TYPE\n       && TREE_CODE (TREE_TYPE (shorter_type)) == FUNCTION_TYPE)\n     return NULL_TREE;\n-#endif\n \n   if (TYPE_PRECISION (TREE_TYPE (arg0)) <= TYPE_PRECISION (shorter_type))\n     return NULL_TREE;\n@@ -7059,14 +7055,12 @@ fold_sign_changed_comparison (location_t loc, enum tree_code code, tree type,\n   arg0_inner = TREE_OPERAND (arg0, 0);\n   inner_type = TREE_TYPE (arg0_inner);\n \n-#ifdef HAVE_canonicalize_funcptr_for_compare\n   /* Disable this optimization if we're casting a function pointer\n      type on targets that require function pointer canonicalization.  */\n-  if (HAVE_canonicalize_funcptr_for_compare\n+  if (targetm.have_canonicalize_funcptr_for_compare ()\n       && TREE_CODE (inner_type) == POINTER_TYPE\n       && TREE_CODE (TREE_TYPE (inner_type)) == FUNCTION_TYPE)\n     return NULL_TREE;\n-#endif\n \n   if (TYPE_PRECISION (inner_type) != TYPE_PRECISION (outer_type))\n     return NULL_TREE;"}, {"sha": "d8ca63f5d4bf616657688fe22d6b75e1019400a5", "filename": "gcc/target-insns.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582554e3bc1509b6ddc407004f97e3f756bcedf5/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582554e3bc1509b6ddc407004f97e3f756bcedf5/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=582554e3bc1509b6ddc407004f97e3f756bcedf5", "patch": "@@ -32,3 +32,4 @@\n    Instructions should be documented in md.texi rather than here.  */\n DEF_TARGET_INSN (return, (void))\n DEF_TARGET_INSN (simple_return, (void))\n+DEF_TARGET_INSN (canonicalize_funcptr_for_compare, (rtx x0, rtx x1))"}]}