{"sha": "b155cfd9288996f3a1044fb2463c7ac7e757a0df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1NWNmZDkyODg5OTZmM2ExMDQ0ZmIyNDYzYzdhYzdlNzU3YTBkZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-06-29T13:12:44Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-06-29T13:12:44Z"}, "message": "re PR c/66322 (Linus Torvalds: -Wswitch-bool produces dubious warnings, fails to notice really bad things)\n\n\tPR c/66322\n\t* c-common.c (check_case_bounds): Add bool * parameter.  Set\n\tOUTSIDE_RANGE_P.\n\t(c_add_case_label): Add bool * parameter.  Pass it down to\n\tcheck_case_bounds.\n\t(c_do_switch_warnings): Add bool parameters.  Implement -Wswitch-bool\n\twarning here.\n\t* c-common.h (c_add_case_label, c_do_switch_warnings): Update\n\tdeclarations.\n\n\t* c-typeck.c (struct c_switch): Add BOOL_COND_P and OUTSIDE_RANGE_P.\n\t(c_start_case): Set BOOL_COND_P and OUTSIDE_RANGE_P.  Don't warn\n\tabout -Wswitch-bool here.\n\t(do_case): Update c_add_case_label call.\n\t(c_finish_case): Update c_do_switch_warnings call.\n\n\t* decl.c (struct cp_switch): Add OUTSIDE_RANGE_P.\n\t(push_switch): Set OUTSIDE_RANGE_P.\n\t(pop_switch): Update c_do_switch_warnings call.\n\t(finish_case_label): Update c_add_case_label call.\n\t* semantics.c (finish_switch_cond): Don't warn about -Wswitch-bool\n\there.\n\n\t* function.c (stack_protect_epilogue): Remove a cast to int.\n\t* doc/invoke.texi: Update -Wswitch-bool description.\n\n\t* c-c++-common/pr60439.c: Add dg-prune-output and add switch cases.\n\t* c-c++-common/pr66322.c: New test.\n\t* g++.dg/eh/scope1.C: Remove dg-warning.\n\nFrom-SVN: r225116", "tree": {"sha": "8bc44969367937690b20314e2432d485c707678f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bc44969367937690b20314e2432d485c707678f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b155cfd9288996f3a1044fb2463c7ac7e757a0df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b155cfd9288996f3a1044fb2463c7ac7e757a0df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b155cfd9288996f3a1044fb2463c7ac7e757a0df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b155cfd9288996f3a1044fb2463c7ac7e757a0df/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99e943a2be4bb7ec0d51b5a68e44d0d42dd9347a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e943a2be4bb7ec0d51b5a68e44d0d42dd9347a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e943a2be4bb7ec0d51b5a68e44d0d42dd9347a"}], "stats": {"total": 414, "additions": 368, "deletions": 46}, "files": [{"sha": "c33eff9c29a79c4e7f0e1074c4b1dc55eee70e11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -1,3 +1,9 @@\n+2015-06-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/66322\n+\t* function.c (stack_protect_epilogue): Remove a cast to int.\n+\t* doc/invoke.texi: Update -Wswitch-bool description.\n+\n 2015-06-29  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (add_operator): Treat ADDR_EXPR as atom."}, {"sha": "2d6e3c5ec2a029e9dd8fd3dc8c018a2c58c51a43", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -1,3 +1,15 @@\n+2015-06-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/66322\n+\t* c-common.c (check_case_bounds): Add bool * parameter.  Set\n+\tOUTSIDE_RANGE_P.\n+\t(c_add_case_label): Add bool * parameter.  Pass it down to\n+\tcheck_case_bounds.\n+\t(c_do_switch_warnings): Add bool parameters.  Implement -Wswitch-bool\n+\twarning here.\n+\t* c-common.h (c_add_case_label, c_do_switch_warnings): Update\n+\tdeclarations.\n+\n 2015-06-27  Marek Polacek  <polacek@redhat.com>\n \n \t* c-common.c (check_main_parameter_types): Use VECTOR_TYPE_P"}, {"sha": "8156d6a1e2a56fc009c25daf56abe09d0dc50854", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -306,7 +306,8 @@ struct visibility_flags visibility_options;\n \n static tree c_fully_fold_internal (tree expr, bool, bool *, bool *, bool);\n static tree check_case_value (location_t, tree);\n-static bool check_case_bounds (location_t, tree, tree, tree *, tree *);\n+static bool check_case_bounds (location_t, tree, tree, tree *, tree *,\n+\t\t\t       bool *);\n \n static tree handle_packed_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nocommon_attribute (tree *, tree, tree, int, bool *);\n@@ -3633,13 +3634,15 @@ check_case_value (location_t loc, tree value)\n    bound of the case label, and CASE_HIGH_P is the upper bound or NULL\n    if the case is not a case range.\n    The caller has to make sure that we are not called with NULL for\n-   CASE_LOW_P (i.e. the default case).\n+   CASE_LOW_P (i.e. the default case).  OUTSIDE_RANGE_P says whether there\n+   was a case value that doesn't fit into the range of the ORIG_TYPE.\n    Returns true if the case label is in range of ORIG_TYPE (saturated or\n    untouched) or false if the label is out of range.  */\n \n static bool\n check_case_bounds (location_t loc, tree type, tree orig_type,\n-\t\t   tree *case_low_p, tree *case_high_p)\n+\t\t   tree *case_low_p, tree *case_high_p,\n+\t\t   bool *outside_range_p)\n {\n   tree min_value, max_value;\n   tree case_low = *case_low_p;\n@@ -3658,6 +3661,7 @@ check_case_bounds (location_t loc, tree type, tree orig_type,\n     {\n       warning_at (loc, 0, \"case label value is less than minimum value \"\n \t\t  \"for type\");\n+      *outside_range_p = true;\n       return false;\n     }\n \n@@ -3666,6 +3670,7 @@ check_case_bounds (location_t loc, tree type, tree orig_type,\n       && tree_int_cst_compare (case_high, max_value) > 0)\n     {\n       warning_at (loc, 0, \"case label value exceeds maximum value for type\");\n+      *outside_range_p = true;\n       return false;\n     }\n \n@@ -3675,6 +3680,7 @@ check_case_bounds (location_t loc, tree type, tree orig_type,\n     {\n       warning_at (loc, 0, \"lower value in case label range\"\n \t\t  \" less than minimum value for type\");\n+      *outside_range_p = true;\n       case_low = min_value;\n     }\n \n@@ -3684,6 +3690,7 @@ check_case_bounds (location_t loc, tree type, tree orig_type,\n     {\n       warning_at (loc, 0, \"upper value in case label range\"\n \t\t  \" exceeds maximum value for type\");\n+      *outside_range_p = true;\n       case_high = max_value;\n     }\n \n@@ -6391,13 +6398,14 @@ case_compare (splay_tree_key k1, splay_tree_key k2)\n    HIGH_VALUE is NULL_TREE, then case label was declared using the\n    usual C/C++ syntax, rather than the GNU case range extension.\n    CASES is a tree containing all the case ranges processed so far;\n-   COND is the condition for the switch-statement itself.  Returns the\n-   CASE_LABEL_EXPR created, or ERROR_MARK_NODE if no CASE_LABEL_EXPR\n-   is created.  */\n+   COND is the condition for the switch-statement itself.\n+   OUTSIDE_RANGE_P says whether there was a case value that doesn't\n+   fit into the range of the ORIG_TYPE.  Returns the CASE_LABEL_EXPR\n+   created, or ERROR_MARK_NODE if no CASE_LABEL_EXPR is created.  */\n \n tree\n c_add_case_label (location_t loc, splay_tree cases, tree cond, tree orig_type,\n-\t\t  tree low_value, tree high_value)\n+\t\t  tree low_value, tree high_value, bool *outside_range_p)\n {\n   tree type;\n   tree label;\n@@ -6458,7 +6466,8 @@ c_add_case_label (location_t loc, splay_tree cases, tree cond, tree orig_type,\n      don't insert the case label and return NULL_TREE.  */\n   if (low_value\n       && !check_case_bounds (loc, type, orig_type,\n-\t\t\t     &low_value, high_value ? &high_value : NULL))\n+\t\t\t     &low_value, high_value ? &high_value : NULL,\n+\t\t\t     outside_range_p))\n     return NULL_TREE;\n \n   /* Look up the LOW_VALUE in the table of case labels we already\n@@ -6619,20 +6628,68 @@ match_case_to_enum (splay_tree_node node, void *data)\n \n void\n c_do_switch_warnings (splay_tree cases, location_t switch_location,\n-\t\t      tree type, tree cond)\n+\t\t      tree type, tree cond, bool bool_cond_p,\n+\t\t      bool outside_range_p)\n {\n   splay_tree_node default_node;\n   splay_tree_node node;\n   tree chain;\n \n-  if (!warn_switch && !warn_switch_enum && !warn_switch_default)\n+  if (!warn_switch && !warn_switch_enum && !warn_switch_default\n+      && !warn_switch_bool)\n     return;\n \n   default_node = splay_tree_lookup (cases, (splay_tree_key) NULL);\n   if (!default_node)\n     warning_at (switch_location, OPT_Wswitch_default,\n \t\t\"switch missing default case\");\n \n+  /* There are certain cases where -Wswitch-bool warnings aren't\n+     desirable, such as\n+     switch (boolean)\n+       {\n+       case true: ...\n+       case false: ...\n+       }\n+     so be careful here.  */\n+  if (warn_switch_bool && bool_cond_p)\n+    {\n+      splay_tree_node min_node;\n+      /* If there's a default node, it's also the value with the minimal\n+\t key.  So look at the penultimate key (if any).  */\n+      if (default_node)\n+\tmin_node = splay_tree_successor (cases, (splay_tree_key) NULL);\n+      else\n+\tmin_node = splay_tree_min (cases);\n+      tree min = min_node ? (tree) min_node->key : NULL_TREE;\n+\n+      splay_tree_node max_node = splay_tree_max (cases);\n+      /* This might be a case range, so look at the value with the\n+\t maximal key and then check CASE_HIGH.  */\n+      tree max = max_node ? (tree) max_node->value : NULL_TREE;\n+      if (max)\n+\tmax = CASE_HIGH (max) ? CASE_HIGH (max) : CASE_LOW (max);\n+\n+      /* If there's a case value > 1 or < 0, that is outside bool\n+\t range, warn.  */\n+      if (outside_range_p\n+\t  || (max && wi::gts_p (max, 1))\n+\t  || (min && wi::lts_p (min, 0))\n+\t  /* And handle the\n+\t     switch (boolean)\n+\t       {\n+\t       case true: ...\n+\t       case false: ...\n+\t       default: ...\n+\t       }\n+\t     case, where we want to warn.  */\n+\t  || (default_node\n+\t      && max && wi::eq_p (max, 1)\n+\t      && min && wi::eq_p (min, 0)))\n+\twarning_at (switch_location, OPT_Wswitch_bool,\n+\t\t    \"switch condition has boolean value\");\n+    }\n+\n   /* From here on, we only care about about enumerated types.  */\n   if (!type || TREE_CODE (type) != ENUMERAL_TYPE)\n     return;"}, {"sha": "2b03703af86a57ef6b5446faa90fb054b80b088f", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -946,9 +946,11 @@ extern tree boolean_increment (enum tree_code, tree);\n \n extern int case_compare (splay_tree_key, splay_tree_key);\n \n-extern tree c_add_case_label (location_t, splay_tree, tree, tree, tree, tree);\n+extern tree c_add_case_label (location_t, splay_tree, tree, tree, tree, tree,\n+\t\t\t      bool *);\n \n-extern void c_do_switch_warnings (splay_tree, location_t, tree, tree);\n+extern void c_do_switch_warnings (splay_tree, location_t, tree, tree, bool,\n+\t\t\t\t  bool);\n \n extern tree build_function_call (location_t, tree, tree);\n "}, {"sha": "2c5ba6db6a4eae5777d1a89f1a037e37e82fd408", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -1,3 +1,12 @@\n+2015-06-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/66322\n+\t* c-typeck.c (struct c_switch): Add BOOL_COND_P and OUTSIDE_RANGE_P.\n+\t(c_start_case): Set BOOL_COND_P and OUTSIDE_RANGE_P.  Don't warn\n+\tabout -Wswitch-bool here.\n+\t(do_case): Update c_add_case_label call.\n+\t(c_finish_case): Update c_do_switch_warnings call.\n+\n 2015-06-27  Marek Polacek  <polacek@redhat.com>\n \n \t* c-typeck.c: Use VECTOR_TYPE_P throughout."}, {"sha": "6ea35137d50ec62aad2d155c9d1937cd6ffc9c64", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -9525,6 +9525,14 @@ struct c_switch {\n \n   /* The next node on the stack.  */\n   struct c_switch *next;\n+\n+  /* Remember whether the controlling expression had boolean type\n+     before integer promotions for the sake of -Wswitch-bool.  */\n+  bool bool_cond_p;\n+\n+  /* Remember whether there was a case value that is outside the\n+     range of the ORIG_TYPE.  */\n+  bool outside_range_p;\n };\n \n /* A stack of the currently active switch statements.  The innermost\n@@ -9538,14 +9546,15 @@ struct c_switch *c_switch_stack;\n /* Start a C switch statement, testing expression EXP.  Return the new\n    SWITCH_EXPR.  SWITCH_LOC is the location of the `switch'.\n    SWITCH_COND_LOC is the location of the switch's condition.\n-   EXPLICIT_CAST_P is true if the expression EXP has explicit cast.  */\n+   EXPLICIT_CAST_P is true if the expression EXP has an explicit cast.  */\n \n tree\n c_start_case (location_t switch_loc,\n \t      location_t switch_cond_loc,\n \t      tree exp, bool explicit_cast_p)\n {\n   tree orig_type = error_mark_node;\n+  bool bool_cond_p = false;\n   struct c_switch *cs;\n \n   if (exp != error_mark_node)\n@@ -9575,8 +9584,7 @@ c_start_case (location_t switch_loc,\n \t      /* Explicit cast to int suppresses this warning.  */\n \t      && !(TREE_CODE (type) == INTEGER_TYPE\n \t\t   && explicit_cast_p))\n-\t    warning_at (switch_cond_loc, OPT_Wswitch_bool,\n-\t\t\t\"switch condition has boolean value\");\n+\t    bool_cond_p = true;\n \n \t  if (!in_system_header_at (input_location)\n \t      && (type == long_integer_type_node\n@@ -9600,6 +9608,8 @@ c_start_case (location_t switch_loc,\n   cs->orig_type = orig_type;\n   cs->cases = splay_tree_new (case_compare, NULL, NULL);\n   cs->bindings = c_get_switch_bindings ();\n+  cs->bool_cond_p = bool_cond_p;\n+  cs->outside_range_p = false;\n   cs->next = c_switch_stack;\n   c_switch_stack = cs;\n \n@@ -9646,7 +9656,8 @@ do_case (location_t loc, tree low_value, tree high_value)\n   label = c_add_case_label (loc, c_switch_stack->cases,\n \t\t\t    SWITCH_COND (c_switch_stack->switch_expr),\n \t\t\t    c_switch_stack->orig_type,\n-\t\t\t    low_value, high_value);\n+\t\t\t    low_value, high_value,\n+\t\t\t    &c_switch_stack->outside_range_p);\n   if (label == error_mark_node)\n     label = NULL_TREE;\n   return label;\n@@ -9667,7 +9678,8 @@ c_finish_case (tree body, tree type)\n   switch_location = EXPR_LOCATION (cs->switch_expr);\n   c_do_switch_warnings (cs->cases, switch_location,\n \t\t\ttype ? type : TREE_TYPE (cs->switch_expr),\n-\t\t\tSWITCH_COND (cs->switch_expr));\n+\t\t\tSWITCH_COND (cs->switch_expr),\n+\t\t\tcs->bool_cond_p, cs->outside_range_p);\n \n   /* Pop the stack.  */\n   c_switch_stack = cs->next;"}, {"sha": "c16b068f8f23fe1b0498feab8afc81f066ef6a84", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -1,3 +1,13 @@\n+2015-06-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/66322\n+\t* decl.c (struct cp_switch): Add OUTSIDE_RANGE_P.\n+\t(push_switch): Set OUTSIDE_RANGE_P.\n+\t(pop_switch): Update c_do_switch_warnings call.\n+\t(finish_case_label): Update c_add_case_label call.\n+\t* semantics.c (finish_switch_cond): Don't warn about -Wswitch-bool\n+\there.\n+\n 2015-06-27  Marek Polacek  <polacek@redhat.com>\n \n \t* call.c: Use VECTOR_TYPE_P."}, {"sha": "498ed71bcf92e9430e093cd17cd12a81ae79b518", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -3208,6 +3208,9 @@ struct cp_switch\n      label.  We need a tree, rather than simply a hash table, because\n      of the GNU case range extension.  */\n   splay_tree cases;\n+  /* Remember whether there was a case value that is outside the\n+     range of the original type of the controlling expression.  */\n+  bool outside_range_p;\n };\n \n /* A stack of the currently active switch statements.  The innermost\n@@ -3229,6 +3232,7 @@ push_switch (tree switch_stmt)\n   p->next = switch_stack;\n   p->switch_stmt = switch_stmt;\n   p->cases = splay_tree_new (case_compare, NULL, NULL);\n+  p->outside_range_p = false;\n   switch_stack = p;\n }\n \n@@ -3240,10 +3244,14 @@ pop_switch (void)\n \n   /* Emit warnings as needed.  */\n   switch_location = EXPR_LOC_OR_LOC (cs->switch_stmt, input_location);\n+  const bool bool_cond_p\n+    = (SWITCH_STMT_TYPE (cs->switch_stmt)\n+       && TREE_CODE (SWITCH_STMT_TYPE (cs->switch_stmt)) == BOOLEAN_TYPE);\n   if (!processing_template_decl)\n     c_do_switch_warnings (cs->cases, switch_location,\n \t\t\t  SWITCH_STMT_TYPE (cs->switch_stmt),\n-\t\t\t  SWITCH_STMT_COND (cs->switch_stmt));\n+\t\t\t  SWITCH_STMT_COND (cs->switch_stmt),\n+\t\t\t  bool_cond_p, cs->outside_range_p);\n \n   splay_tree_delete (cs->cases);\n   switch_stack = switch_stack->next;\n@@ -3308,7 +3316,8 @@ finish_case_label (location_t loc, tree low_value, tree high_value)\n   high_value = case_conversion (type, high_value);\n \n   r = c_add_case_label (loc, switch_stack->cases, cond, type,\n-\t\t\tlow_value, high_value);\n+\t\t\tlow_value, high_value,\n+\t\t\t&switch_stack->outside_range_p);\n \n   /* After labels, make any new cleanups in the function go into their\n      own new (temporary) binding contour.  */"}, {"sha": "c23d9bef0c27f17c7a277d5013ae82dfca2ec4c4", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -1156,11 +1156,6 @@ finish_switch_cond (tree cond, tree switch_stmt)\n \torig_type = TREE_TYPE (cond);\n       if (cond != error_mark_node)\n \t{\n-\t  /* Warn if the condition has boolean value.  */\n-\t  if (TREE_CODE (orig_type) == BOOLEAN_TYPE)\n-\t    warning_at (input_location, OPT_Wswitch_bool,\n-\t\t\t\"switch condition has type bool\");\n-\n \t  /* [stmt.switch]\n \n \t     Integral promotions are performed.  */"}, {"sha": "a765df5936bfecdcac38f3c3db3d5288b80f4bab", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -4012,7 +4012,8 @@ warning about an omitted enumeration code even if there is a\n @item -Wswitch-bool\n @opindex Wswitch-bool\n @opindex Wno-switch-bool\n-Warn whenever a @code{switch} statement has an index of boolean type.\n+Warn whenever a @code{switch} statement has an index of boolean type\n+and the case values are outside the range of a boolean type.\n It is possible to suppress this warning by casting the controlling\n expression to a type other than @code{bool}.  For example:\n @smallexample"}, {"sha": "4389bbd1aba6ef60bff632370c54cfdda26c05ee", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -4891,7 +4891,7 @@ stack_protect_epilogue (void)\n \n   /* Allow the target to compare Y with X without leaking either into\n      a register.  */\n-  switch ((int) (HAVE_stack_protect_test != 0))\n+  switch (HAVE_stack_protect_test != 0)\n     {\n     case 1:\n       tmp = gen_stack_protect_test (x, y, label);"}, {"sha": "fc2b9bc0d7689bcbdbb2fad5f62901934292dd6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -1,3 +1,10 @@\n+2015-06-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/66322\n+\t* c-c++-common/pr60439.c: Add dg-prune-output and add switch cases.\n+\t* c-c++-common/pr66322.c: New test.\n+\t* g++.dg/eh/scope1.C: Remove dg-warning.\n+\n 2015-06-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66677"}, {"sha": "68bd33c22cb3b7898ead0cf8e78c61ea5fac02fd", "filename": "gcc/testsuite/c-c++-common/pr60439.c", "status": "modified", "additions": 77, "deletions": 19, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60439.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60439.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60439.c?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -1,5 +1,6 @@\n /* PR c/60439 */\n /* { dg-do compile } */\n+/* { dg-prune-output \"case label value exceeds\" } */\n \n #ifndef __cplusplus\n # define bool _Bool\n@@ -11,18 +12,30 @@ void\n f1 (bool b)\n {\n   switch (b) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n }\n \n void\n f2 (int a, int b)\n {\n   switch (a && b) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch ((bool) (a && b)) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch ((a && b) || a) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   /* No warnings on following.  */\n   switch ((int) (a && b))\n     break;\n@@ -38,35 +51,65 @@ void\n f3 (int a)\n {\n   switch (!!a) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch (!a) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n }\n \n void\n f4 (void)\n {\n   switch (foo ()) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n }\n \n void\n f5 (int a)\n {\n   switch (a == 3) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch (a != 3) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch (a > 3) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch (a < 3) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch (a <= 3) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch (a >= 3) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch (foo (), foo (), a >= 42) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch (a == 3, a & 4, a ^ 5, a)\n     break;\n   switch ((int) (a == 3))\n@@ -79,19 +122,31 @@ void\n f6 (bool b)\n {\n   switch (b) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch (!b) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n   switch (b++) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n }\n \n void\n f7 (void)\n {\n   bool b;\n   switch (b = 1) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 3:\n+      break;\n+    }\n }\n \n void\n@@ -104,5 +159,8 @@ f8 (int i)\n   switch ((unsigned int) i)\n     break;\n   switch ((bool) i) /* { dg-warning \"switch condition has\" } */\n-    break;\n+    {\n+    case 11:\n+      break;\n+    }\n }"}, {"sha": "eb1e9e4a2ed1f8dab730cd9c79e890b9cd2ae6f8", "filename": "gcc/testsuite/c-c++-common/pr66322.c", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr66322.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr66322.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr66322.c?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -0,0 +1,144 @@\n+/* PR c/66322 */\n+/* { dg-do compile } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+# define true 1\n+# define false 0\n+#endif\n+\n+void\n+nowarn (bool b)\n+{\n+  switch (b)\n+    ;\n+\n+  switch (b)\n+    {\n+    case true:\n+    case false:\n+      break;\n+    }\n+\n+  switch (b)\n+    {\n+    case true:\n+      break;\n+    }\n+\n+  switch (b)\n+    {\n+    case true:\n+    default:\n+      break;\n+    }\n+\n+  switch (b)\n+    {\n+    case false:\n+      break;\n+    }\n+\n+  switch (b)\n+    {\n+    case false:\n+    default:\n+      break;\n+    }\n+\n+  switch (b)\n+    {\n+    default:\n+      break;\n+    }\n+\n+  switch (b)\n+    {\n+    case false ... true:\n+      break;\n+    }\n+\n+  switch (b)\n+    {\n+    case 1:\n+      switch (b)\n+\t{\n+\tcase true:\n+\tdefault:\n+\t  break;\n+\t}\n+      default:\n+\tbreak;\n+    }\n+}\n+\n+void\n+warn (bool b)\n+{\n+  switch (b)  /* { dg-warning \"switch condition has\" } */\n+    {\n+    case true:\n+    case false:\n+    default:\n+      break;\n+    }\n+\n+  switch (b)  /* { dg-warning \"switch condition has\" } */\n+    {\n+    case false ... true:\n+    default:\n+      break;\n+    }\n+}\n+\n+void\n+warn2 (int n)\n+{\n+  switch (n == 2)  /* { dg-warning \"switch condition has\" } */\n+    {\n+    case 0 ... 2: /* { dg-warning \"upper value\" \"\" { target c++ } } */\n+    default:\n+      break;\n+    }\n+\n+  switch (n == 2)  /* { dg-warning \"switch condition has\" } */\n+    {\n+    case 1 ... 10: /* { dg-warning \"upper value\" \"\" { target c++ } } */\n+    default:\n+      break;\n+    }\n+\n+  switch (n == 2) /* { dg-warning \"switch condition has\" } */\n+    {\n+      case 2: /* { dg-warning \"case label\" \"\" { target c++ } } */\n+\tbreak;\n+    }\n+\n+  switch (n == 2) /* { dg-warning \"switch condition has\" } */\n+    {\n+      case 0:\n+      case 1:\n+      case -1: /* { dg-warning \"case label\" \"\" { target c++ } } */\n+\tbreak;\n+    }\n+\n+  switch (n == 2) /* { dg-warning \"switch condition has\" } */\n+    {\n+      case -1 ... 1: /* { dg-warning \"lower value\" \"\" { target c++ } } */\n+\tbreak;\n+    }\n+\n+  switch (n == 2) /* { dg-warning \"switch condition has\" } */\n+    {\n+      case -1 ... 0: /* { dg-warning \"lower value\" \"\" { target c++ } } */\n+      default:\n+\tbreak;\n+    }\n+\n+  switch (n == 2) /* { dg-warning \"switch condition has\" } */\n+    {\n+      case -10 ... -1: /* { dg-warning \"case label\" \"\" { target c++ } } */\n+      default:\n+\tbreak;\n+    }\n+}"}, {"sha": "276e0d6e588e8badb4aff5b9f137347adc05ddb9", "filename": "gcc/testsuite/g++.dg/eh/scope1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fscope1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b155cfd9288996f3a1044fb2463c7ac7e757a0df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fscope1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fscope1.C?ref=b155cfd9288996f3a1044fb2463c7ac7e757a0df", "patch": "@@ -31,7 +31,7 @@ void f3 ()\n \n void f4 ()\n {\n-  switch (C br = C()) /* { dg-warning \"switch condition has\" } */\n+  switch (C br = C())\n     {\n     default:\n       abort ();"}]}