{"sha": "c98c243078c380ad4c9a1ef08869d3b64abb128f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk4YzI0MzA3OGMzODBhZDRjOWExZWYwODg2OWQzYjY0YWJiMTI4Zg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-09-03T08:16:27Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-09-03T08:16:27Z"}, "message": "Come up with TARGET_GET_VALID_OPTION_VALUES option hook (PR driver/83193).\n\n2018-09-03  Martin Liska  <mliska@suse.cz>\n\n        PR driver/83193\n\t* common/common-target.def: Add TARGET_GET_VALID_OPTION_VALUES.\n\t* common/common-targhooks.c (default_get_valid_option_values):\n        New function.\n\t* common/common-targhooks.h (default_get_valid_option_values):\n        Likewise.\n\t* common/config/i386/i386-common.c: Move processor_target_table\n        from i386.c.\n\t(ix86_get_valid_option_values): New function.\n\t(TARGET_GET_VALID_OPTION_VALUES): New macro.\n\t* config/i386/i386.c (struct ptt): Move to i386-common.c.\n\t(PTA_*): Move all defined masks into i386-common.c.\n\t(ix86_function_specific_restore): Use new processor_cost_table.\n\t* config/i386/i386.h (struct ptt): Moved from i386.c.\n\t(struct pta): Likewise.\n\t* doc/tm.texi: Document new TARGET_GET_VALID_OPTION_VALUES.\n\t* doc/tm.texi.in: Likewise.\n\t* opt-suggestions.c (option_proposer::suggest_option):\n        Pass prefix to build_option_suggestions.\n\t(option_proposer::get_completions): Likewise.\n\t(option_proposer::build_option_suggestions): Use the new target\n        hook.\n\t* opts.c (struct option_help_tuple): New struct.\n\t(print_filtered_help): Use the new target hook.\n2018-09-03  Martin Liska  <mliska@suse.cz>\n\n        PR driver/83193\n\t* gcc.dg/completion-4.c: New test.\n\nFrom-SVN: r264052", "tree": {"sha": "f170c789ad3b3928dd6a9c1052207da98693895c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f170c789ad3b3928dd6a9c1052207da98693895c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c98c243078c380ad4c9a1ef08869d3b64abb128f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98c243078c380ad4c9a1ef08869d3b64abb128f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98c243078c380ad4c9a1ef08869d3b64abb128f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98c243078c380ad4c9a1ef08869d3b64abb128f/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1dfeff07917739fd5ae157be0825a757c576bef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1dfeff07917739fd5ae157be0825a757c576bef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1dfeff07917739fd5ae157be0825a757c576bef"}], "stats": {"total": 964, "additions": 587, "deletions": 377}, "files": [{"sha": "1fb40e8336fad18d27fdc2352d93a5ee77d7f2e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -1,3 +1,30 @@\n+2018-09-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR driver/83193\n+\t* common/common-target.def: Add TARGET_GET_VALID_OPTION_VALUES.\n+\t* common/common-targhooks.c (default_get_valid_option_values):\n+\tNew function.\n+\t* common/common-targhooks.h (default_get_valid_option_values):\n+\tLikewise.\n+\t* common/config/i386/i386-common.c: Move processor_target_table\n+\tfrom i386.c.\n+\t(ix86_get_valid_option_values): New function.\n+\t(TARGET_GET_VALID_OPTION_VALUES): New macro.\n+\t* config/i386/i386.c (struct ptt): Move to i386-common.c.\n+\t(PTA_*): Move all defined masks into i386-common.c.\n+\t(ix86_function_specific_restore): Use new processor_cost_table.\n+\t* config/i386/i386.h (struct ptt): Moved from i386.c.\n+\t(struct pta): Likewise.\n+\t* doc/tm.texi: Document new TARGET_GET_VALID_OPTION_VALUES.\n+\t* doc/tm.texi.in: Likewise.\n+\t* opt-suggestions.c (option_proposer::suggest_option):\n+\tPass prefix to build_option_suggestions.\n+\t(option_proposer::get_completions): Likewise.\n+\t(option_proposer::build_option_suggestions): Use the new target\n+\thook.\n+\t* opts.c (struct option_help_tuple): New struct.\n+\t(print_filtered_help): Use the new target hook.\n+\n 2018-09-03  Martin Liska  <mliska@suse.cz>\n \n \tPR middle-end/59521"}, {"sha": "019b1e752a9d50664d301033e6284674f907230b", "filename": "gcc/common/common-target.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fcommon%2Fcommon-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fcommon%2Fcommon-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-target.def?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -80,6 +80,17 @@ DEFHOOK\n  bool, (bool report, struct gcc_options *opts),\n  hook_bool_bool_gcc_optionsp_false)\n \n+DEFHOOK\n+(get_valid_option_values,\n+\"The hook is used for options that have a non-trivial list of\\\n+ possible option values.  OPTION_CODE is option code of opt_code\\\n+ enum type.  PREFIX is used for bash completion and allows an implementation\\\n+ to return more specific completion based on the prefix.  All string values\\\n+ should be allocated from heap memory and consumers should release them. \\\n+ The result will be pruned to cases with PREFIX if not NULL.\",\n+ vec<const char *>, (int option_code, const char *prefix),\n+ default_get_valid_option_values)\n+\n /* Leave the boolean fields at the end.  */\n \n /* True if unwinding tables should be generated by default.  */"}, {"sha": "1b1a015381d5fd46c900cd6a1ab747446451466d", "filename": "gcc/common/common-targhooks.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fcommon%2Fcommon-targhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fcommon%2Fcommon-targhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-targhooks.c?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"common/common-target.h\"\n #include \"common/common-targhooks.h\"\n+#include \"opts.h\"\n \n /* Determine the exception handling mechanism for the target.  */\n \n@@ -77,6 +78,14 @@ default_target_handle_option (struct gcc_options *opts ATTRIBUTE_UNUSED,\n   return true;\n }\n \n+/* Default version of TARGET_GET_VALID_OPTION_VALUES.  */\n+\n+vec<const char *>\n+default_get_valid_option_values (int, const char *)\n+{\n+  return vec<const char *> ();\n+}\n+\n const struct default_options empty_optimization_table[] =\n   {\n     { OPT_LEVELS_NONE, 0, NULL, 0 }"}, {"sha": "4bdf8efdbe6b8afc183e051c6daaa044e3cc73fa", "filename": "gcc/common/common-targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fcommon%2Fcommon-targhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fcommon%2Fcommon-targhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fcommon-targhooks.h?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -28,6 +28,7 @@ extern bool default_target_handle_option (struct gcc_options *,\n \t\t\t\t\t  struct gcc_options *,\n \t\t\t\t\t  const struct cl_decoded_option *,\n \t\t\t\t\t  location_t);\n+extern vec<const char *> default_get_valid_option_values (int, const char *);\n \n extern const struct default_options empty_optimization_table[];\n "}, {"sha": "1013f82b23dbcddf1e8ab0b0194333e2996e2de2", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 267, "deletions": 0, "changes": 267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -1459,4 +1459,271 @@ i386_except_unwind_info (struct gcc_options *opts)\n #undef TARGET_SUPPORTS_SPLIT_STACK\n #define TARGET_SUPPORTS_SPLIT_STACK ix86_supports_split_stack\n \n+/* This table must be in sync with enum processor_type in i386.h.  */\n+const struct ptt processor_target_table[PROCESSOR_max] =\n+{\n+  /* The \"0:0:8\" label alignment specified for some processors generates\n+     secondary 8-byte alignment only for those label/jump/loop targets\n+     which have primary alignment.  */\n+\n+  {\"generic\",        \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"i386\",           \"4\",       \"4\",       NULL,    \"4\" },\n+  {\"i486\",           \"16\",      \"16\",      \"0:0:8\", \"16\"},\n+  {\"pentium\",        \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"lakemont\",       \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"pentiumpro\",     \"16\",      \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"pentium4\",       NULL,      NULL,      NULL,    NULL},\n+  {\"nocona\",         NULL,      NULL,      NULL,    NULL},\n+  {\"core2\",          \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"nehalem\",        \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"sandybridge\",    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"haswell\",        \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"bonnell\",        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"silvermont\",     \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"goldmont\",       \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"goldmont-plus\",  \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"tremont\",        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"knl\",            \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"knm\",            \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"skylake\",        \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"skylake-avx512\", \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"cannonlake\",     \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"icelake-client\", \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"icelake-server\", \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n+  {\"intel\",          \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"geode\",          NULL,      NULL,      NULL,    NULL},\n+  {\"k6\",             \"32:8:8\",  \"32:8:8\",  \"0:0:8\", \"32\"},\n+  {\"athlon\",         \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"k8\",             \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n+  {\"amdfam10\",       \"32:25:8\", \"32:8:8\",  \"0:0:8\", \"32\"},\n+  {\"bdver1\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"bdver2\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"bdver3\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"bdver4\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"btver1\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"btver2\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n+  {\"znver1\",         \"16\",      \"16\",      \"0:0:8\", \"16\"}\n+};\n+\n+const pta processor_alias_table[] =\n+{\n+  {\"i386\", PROCESSOR_I386, CPU_NONE, 0},\n+  {\"i486\", PROCESSOR_I486, CPU_NONE, 0},\n+  {\"i586\", PROCESSOR_PENTIUM, CPU_PENTIUM, 0},\n+  {\"pentium\", PROCESSOR_PENTIUM, CPU_PENTIUM, 0},\n+  {\"lakemont\", PROCESSOR_LAKEMONT, CPU_PENTIUM, PTA_NO_80387},\n+  {\"pentium-mmx\", PROCESSOR_PENTIUM, CPU_PENTIUM, PTA_MMX},\n+  {\"winchip-c6\", PROCESSOR_I486, CPU_NONE, PTA_MMX},\n+  {\"winchip2\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW},\n+  {\"c3\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW},\n+  {\"samuel-2\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW},\n+  {\"c3-2\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n+    PTA_MMX | PTA_SSE | PTA_FXSR},\n+  {\"nehemiah\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n+    PTA_MMX | PTA_SSE | PTA_FXSR},\n+  {\"c7\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n+    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n+  {\"esther\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n+    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n+  {\"i686\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, 0},\n+  {\"pentiumpro\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, 0},\n+  {\"pentium2\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, PTA_MMX | PTA_FXSR},\n+  {\"pentium3\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n+    PTA_MMX | PTA_SSE | PTA_FXSR},\n+  {\"pentium3m\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n+    PTA_MMX | PTA_SSE | PTA_FXSR},\n+  {\"pentium-m\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n+    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR},\n+  {\"pentium4\", PROCESSOR_PENTIUM4, CPU_NONE,\n+    PTA_MMX |PTA_SSE | PTA_SSE2 | PTA_FXSR},\n+  {\"pentium4m\", PROCESSOR_PENTIUM4, CPU_NONE,\n+    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR},\n+  {\"prescott\", PROCESSOR_NOCONA, CPU_NONE,\n+    PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n+  {\"nocona\", PROCESSOR_NOCONA, CPU_NONE,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_CX16 | PTA_NO_SAHF | PTA_FXSR},\n+  {\"core2\", PROCESSOR_CORE2, CPU_CORE2, PTA_CORE2},\n+  {\"nehalem\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_NEHALEM},\n+  {\"corei7\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_NEHALEM},\n+  {\"westmere\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_WESTMERE},\n+  {\"sandybridge\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n+    PTA_SANDYBRIDGE},\n+  {\"corei7-avx\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n+    PTA_SANDYBRIDGE},\n+  {\"ivybridge\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n+    PTA_IVYBRIDGE},\n+  {\"core-avx-i\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n+    PTA_IVYBRIDGE},\n+  {\"haswell\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_HASWELL},\n+  {\"core-avx2\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_HASWELL},\n+  {\"broadwell\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_BROADWELL},\n+  {\"skylake\", PROCESSOR_SKYLAKE, CPU_HASWELL, PTA_SKYLAKE},\n+  {\"skylake-avx512\", PROCESSOR_SKYLAKE_AVX512, CPU_HASWELL,\n+    PTA_SKYLAKE_AVX512},\n+  {\"cannonlake\", PROCESSOR_CANNONLAKE, CPU_HASWELL, PTA_CANNONLAKE},\n+  {\"icelake-client\", PROCESSOR_ICELAKE_CLIENT, CPU_HASWELL,\n+    PTA_ICELAKE_CLIENT},\n+  {\"icelake-server\", PROCESSOR_ICELAKE_SERVER, CPU_HASWELL,\n+    PTA_ICELAKE_SERVER},\n+  {\"bonnell\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n+  {\"atom\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n+  {\"silvermont\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n+  {\"slm\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n+  {\"goldmont\", PROCESSOR_GOLDMONT, CPU_GLM, PTA_GOLDMONT},\n+  {\"goldmont-plus\", PROCESSOR_GOLDMONT_PLUS, CPU_GLM, PTA_GOLDMONT_PLUS},\n+  {\"tremont\", PROCESSOR_TREMONT, CPU_GLM, PTA_TREMONT},\n+  {\"knl\", PROCESSOR_KNL, CPU_SLM, PTA_KNL},\n+  {\"knm\", PROCESSOR_KNM, CPU_SLM, PTA_KNM},\n+  {\"intel\", PROCESSOR_INTEL, CPU_SLM, PTA_NEHALEM},\n+  {\"geode\", PROCESSOR_GEODE, CPU_GEODE,\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE},\n+  {\"k6\", PROCESSOR_K6, CPU_K6, PTA_MMX},\n+  {\"k6-2\", PROCESSOR_K6, CPU_K6, PTA_MMX | PTA_3DNOW},\n+  {\"k6-3\", PROCESSOR_K6, CPU_K6, PTA_MMX | PTA_3DNOW},\n+  {\"athlon\", PROCESSOR_ATHLON, CPU_ATHLON,\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE},\n+  {\"athlon-tbird\", PROCESSOR_ATHLON, CPU_ATHLON,\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE},\n+  {\"athlon-4\", PROCESSOR_ATHLON, CPU_ATHLON,\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR},\n+  {\"athlon-xp\", PROCESSOR_ATHLON, CPU_ATHLON,\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR},\n+  {\"athlon-mp\", PROCESSOR_ATHLON, CPU_ATHLON,\n+    PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR},\n+  {\"x86-64\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n+  {\"eden-x2\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n+  {\"nano\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSSE3 | PTA_FXSR},\n+  {\"nano-1000\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSSE3 | PTA_FXSR},\n+  {\"nano-2000\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSSE3 | PTA_FXSR},\n+  {\"nano-3000\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n+  {\"nano-x2\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n+  {\"eden-x4\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n+  {\"nano-x4\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n+  {\"k8\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n+      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n+  {\"k8-sse3\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n+      | PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR},\n+  {\"opteron\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n+      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n+  {\"opteron-sse3\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n+      | PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR},\n+  {\"athlon64\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n+      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n+  {\"athlon64-sse3\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n+      | PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR},\n+  {\"athlon-fx\", PROCESSOR_K8, CPU_K8,\n+    PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n+      | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n+  {\"amdfam10\", PROCESSOR_AMDFAM10, CPU_AMDFAM10,\n+    PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_SSE2\n+      | PTA_SSE3 | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_PRFCHW | PTA_FXSR},\n+  {\"barcelona\", PROCESSOR_AMDFAM10, CPU_AMDFAM10,\n+    PTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_SSE2\n+      | PTA_SSE3 | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_PRFCHW | PTA_FXSR},\n+  {\"bdver1\", PROCESSOR_BDVER1, CPU_BDVER1,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n+      | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n+      | PTA_XOP | PTA_LWP | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE},\n+  {\"bdver2\", PROCESSOR_BDVER2, CPU_BDVER2,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n+      | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n+      | PTA_XOP | PTA_LWP | PTA_BMI | PTA_TBM | PTA_F16C\n+      | PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE},\n+  {\"bdver3\", PROCESSOR_BDVER3, CPU_BDVER3,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n+      | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n+      | PTA_XOP | PTA_LWP | PTA_BMI | PTA_TBM | PTA_F16C\n+      | PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE\n+      | PTA_XSAVEOPT | PTA_FSGSBASE},\n+  {\"bdver4\", PROCESSOR_BDVER4, CPU_BDVER4,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n+      | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_AVX2\n+      | PTA_FMA4 | PTA_XOP | PTA_LWP | PTA_BMI | PTA_BMI2\n+      | PTA_TBM | PTA_F16C | PTA_FMA | PTA_PRFCHW | PTA_FXSR\n+      | PTA_XSAVE | PTA_XSAVEOPT | PTA_FSGSBASE | PTA_RDRND\n+      | PTA_MOVBE | PTA_MWAITX},\n+  {\"znver1\", PROCESSOR_ZNVER1, CPU_ZNVER1,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n+      | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_AVX2\n+      | PTA_BMI | PTA_BMI2 | PTA_F16C | PTA_FMA | PTA_PRFCHW\n+      | PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT | PTA_FSGSBASE\n+      | PTA_RDRND | PTA_MOVBE | PTA_MWAITX | PTA_ADX | PTA_RDSEED\n+      | PTA_CLZERO | PTA_CLFLUSHOPT | PTA_XSAVEC | PTA_XSAVES\n+      | PTA_SHA | PTA_LZCNT | PTA_POPCNT},\n+  {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC,\n+    PTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_PRFCHW\n+      | PTA_FXSR | PTA_XSAVE},\n+  {\"btver2\", PROCESSOR_BTVER2, CPU_BTVER2,\n+    PTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_SSE4_1\n+      | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX\n+      | PTA_BMI | PTA_F16C | PTA_MOVBE | PTA_PRFCHW\n+      | PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n+\n+  {\"generic\", PROCESSOR_GENERIC, CPU_GENERIC,\n+    PTA_64BIT\n+      | PTA_HLE /* flags are only used for -march switch.  */ },\n+};\n+\n+int const pta_size = ARRAY_SIZE (processor_alias_table);\n+\n+/* Provide valid option values for -march and -mtune options.  */\n+\n+vec<const char *>\n+ix86_get_valid_option_values (int option_code,\n+\t\t\t      const char *prefix ATTRIBUTE_UNUSED)\n+{\n+  vec<const char *> v;\n+  v.create (0);\n+  opt_code opt = (opt_code) option_code;\n+\n+  switch (opt)\n+    {\n+    case OPT_march_:\n+      for (unsigned i = 0; i < pta_size; i++)\n+\tv.safe_push (processor_alias_table[i].name);\n+      break;\n+    case OPT_mtune_:\n+      for (unsigned i = 0; i < PROCESSOR_max; i++)\n+\tv.safe_push (processor_target_table[i].name);\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  return v;\n+}\n+\n+#undef  TARGET_GET_VALID_OPTION_VALUES\n+#define TARGET_GET_VALID_OPTION_VALUES ix86_get_valid_option_values\n+\n struct gcc_targetm_common targetm_common = TARGETM_COMMON_INITIALIZER;"}, {"sha": "48e484b3d620177b3d604e4010f1f7038f6067a4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 43, "deletions": 370, "changes": 413, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -828,63 +828,46 @@ static tree (*ix86_veclib_handler) (combined_fn, tree, tree);\n static tree ix86_veclibabi_svml (combined_fn, tree, tree);\n static tree ix86_veclibabi_acml (combined_fn, tree, tree);\n \n-/* Processor target table, indexed by processor number */\n-struct ptt\n-{\n-  const char *const name;\t\t\t/* processor name  */\n-  const struct processor_costs *cost;\t\t/* Processor costs */\n-\n-  /* Default alignments.  */\n-  const char *const align_loop;\n-  const char *const align_jump;\n-  const char *const align_label;\n-  const char *const align_func;\n-};\n-\n /* This table must be in sync with enum processor_type in i386.h.  */ \n-static const struct ptt processor_target_table[PROCESSOR_max] =\n-{\n-/* The \"0:0:8\" label alignment specified for some processors generates\n-   secondary 8-byte alignment only for those label/jump/loop targets\n-   which have primary alignment.  */\n-\n-  {\"generic\",        &generic_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"i386\",           &i386_cost,       \"4\",       \"4\",       NULL,    \"4\" },\n-  {\"i486\",           &i486_cost,       \"16\",      \"16\",      \"0:0:8\", \"16\"},\n-  {\"pentium\",        &pentium_cost,    \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"lakemont\",       &lakemont_cost,   \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"pentiumpro\",     &pentiumpro_cost, \"16\",      \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"pentium4\",       &pentium4_cost,   NULL,      NULL,      NULL,    NULL},\n-  {\"nocona\",         &nocona_cost,     NULL,      NULL,      NULL,    NULL},\n-  {\"core2\",          &core_cost,       \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"nehalem\",        &core_cost,       \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"sandybridge\",    &core_cost,       \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"haswell\",        &core_cost,       \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"bonnell\",        &atom_cost,       \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"silvermont\",     &slm_cost,        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"goldmont\",       &slm_cost,        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"goldmont-plus\",  &slm_cost,        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"tremont\",\t     &slm_cost,\t       \"16\",\t  \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"knl\",            &slm_cost,        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"knm\",            &slm_cost,        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"skylake\",        &skylake_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"skylake-avx512\", &skylake_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"cannonlake\",     &skylake_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"icelake-client\", &skylake_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"icelake-server\", &skylake_cost,    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"intel\",          &intel_cost,      \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"geode\",          &geode_cost,      NULL,      NULL,      NULL,    NULL},\n-  {\"k6\",             &k6_cost,         \"32:8:8\",  \"32:8:8\",  \"0:0:8\", \"32\"},\n-  {\"athlon\",         &athlon_cost,     \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"k8\",             &k8_cost,         \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"amdfam10\",       &amdfam10_cost,   \"32:25:8\", \"32:8:8\",  \"0:0:8\", \"32\"},\n-  {\"bdver1\",         &bdver1_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"bdver2\",         &bdver2_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"bdver3\",         &bdver3_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"bdver4\",         &bdver4_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"btver1\",         &btver1_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"btver2\",         &btver2_cost,     \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"znver1\",         &znver1_cost,     \"16\",      \"16\",      \"0:0:8\", \"16\"}\n+static const struct processor_costs *processor_cost_table[PROCESSOR_max] =\n+{\n+  &generic_cost,\n+  &i386_cost,\n+  &i486_cost,\n+  &pentium_cost,\n+  &lakemont_cost,\n+  &pentiumpro_cost,\n+  &pentium4_cost,\n+  &nocona_cost,\n+  &core_cost,\n+  &core_cost,\n+  &core_cost,\n+  &core_cost,\n+  &atom_cost,\n+  &slm_cost,\n+  &slm_cost,\n+  &slm_cost,\n+  &slm_cost,\n+  &slm_cost,\n+  &slm_cost,\n+  &skylake_cost,\n+  &skylake_cost,\n+  &skylake_cost,\n+  &skylake_cost,\n+  &skylake_cost,\n+  &intel_cost,\n+  &geode_cost,\n+  &k6_cost,\n+  &athlon_cost,\n+  &k8_cost,\n+  &amdfam10_cost,\n+  &bdver1_cost,\n+  &bdver2_cost,\n+  &bdver3_cost,\n+  &bdver4_cost,\n+  &btver1_cost,\n+  &btver2_cost,\n+  &znver1_cost,\n };\n \f\n static unsigned int\n@@ -3386,6 +3369,8 @@ ix86_override_options_after_change (void)\n   ix86_default_align (&global_options);\n }\n \n+\n+\n /* Override various settings based on options.  If MAIN_ARGS_P, the\n    options are from the command line, otherwise they are from\n    attributes.  Return true if there's an error related to march\n@@ -3400,317 +3385,6 @@ ix86_option_override_internal (bool main_args_p,\n   unsigned HOST_WIDE_INT ix86_arch_mask;\n   const bool ix86_tune_specified = (opts->x_ix86_tune_string != NULL);\n \n-  const wide_int_bitmask PTA_3DNOW (HOST_WIDE_INT_1U << 0);\n-  const wide_int_bitmask PTA_3DNOW_A (HOST_WIDE_INT_1U << 1);\n-  const wide_int_bitmask PTA_64BIT (HOST_WIDE_INT_1U << 2);\n-  const wide_int_bitmask PTA_ABM (HOST_WIDE_INT_1U << 3);\n-  const wide_int_bitmask PTA_AES (HOST_WIDE_INT_1U << 4);\n-  const wide_int_bitmask PTA_AVX (HOST_WIDE_INT_1U << 5);\n-  const wide_int_bitmask PTA_BMI (HOST_WIDE_INT_1U << 6);\n-  const wide_int_bitmask PTA_CX16 (HOST_WIDE_INT_1U << 7);\n-  const wide_int_bitmask PTA_F16C (HOST_WIDE_INT_1U << 8);\n-  const wide_int_bitmask PTA_FMA (HOST_WIDE_INT_1U << 9);\n-  const wide_int_bitmask PTA_FMA4 (HOST_WIDE_INT_1U << 10);\n-  const wide_int_bitmask PTA_FSGSBASE (HOST_WIDE_INT_1U << 11);\n-  const wide_int_bitmask PTA_LWP (HOST_WIDE_INT_1U << 12);\n-  const wide_int_bitmask PTA_LZCNT (HOST_WIDE_INT_1U << 13);\n-  const wide_int_bitmask PTA_MMX (HOST_WIDE_INT_1U << 14);\n-  const wide_int_bitmask PTA_MOVBE (HOST_WIDE_INT_1U << 15);\n-  const wide_int_bitmask PTA_NO_SAHF (HOST_WIDE_INT_1U << 16);\n-  const wide_int_bitmask PTA_PCLMUL (HOST_WIDE_INT_1U << 17);\n-  const wide_int_bitmask PTA_POPCNT (HOST_WIDE_INT_1U << 18);\n-  const wide_int_bitmask PTA_PREFETCH_SSE (HOST_WIDE_INT_1U << 19);\n-  const wide_int_bitmask PTA_RDRND (HOST_WIDE_INT_1U << 20);\n-  const wide_int_bitmask PTA_SSE (HOST_WIDE_INT_1U << 21);\n-  const wide_int_bitmask PTA_SSE2 (HOST_WIDE_INT_1U << 22);\n-  const wide_int_bitmask PTA_SSE3 (HOST_WIDE_INT_1U << 23);\n-  const wide_int_bitmask PTA_SSE4_1 (HOST_WIDE_INT_1U << 24);\n-  const wide_int_bitmask PTA_SSE4_2 (HOST_WIDE_INT_1U << 25);\n-  const wide_int_bitmask PTA_SSE4A (HOST_WIDE_INT_1U << 26);\n-  const wide_int_bitmask PTA_SSSE3 (HOST_WIDE_INT_1U << 27);\n-  const wide_int_bitmask PTA_TBM (HOST_WIDE_INT_1U << 28);\n-  const wide_int_bitmask PTA_XOP (HOST_WIDE_INT_1U << 29);\n-  const wide_int_bitmask PTA_AVX2 (HOST_WIDE_INT_1U << 30);\n-  const wide_int_bitmask PTA_BMI2 (HOST_WIDE_INT_1U << 31);\n-  const wide_int_bitmask PTA_RTM (HOST_WIDE_INT_1U << 32);\n-  const wide_int_bitmask PTA_HLE (HOST_WIDE_INT_1U << 33);\n-  const wide_int_bitmask PTA_PRFCHW (HOST_WIDE_INT_1U << 34);\n-  const wide_int_bitmask PTA_RDSEED (HOST_WIDE_INT_1U << 35);\n-  const wide_int_bitmask PTA_ADX (HOST_WIDE_INT_1U << 36);\n-  const wide_int_bitmask PTA_FXSR (HOST_WIDE_INT_1U << 37);\n-  const wide_int_bitmask PTA_XSAVE (HOST_WIDE_INT_1U << 38);\n-  const wide_int_bitmask PTA_XSAVEOPT (HOST_WIDE_INT_1U << 39);\n-  const wide_int_bitmask PTA_AVX512F (HOST_WIDE_INT_1U << 40);\n-  const wide_int_bitmask PTA_AVX512ER (HOST_WIDE_INT_1U << 41);\n-  const wide_int_bitmask PTA_AVX512PF (HOST_WIDE_INT_1U << 42);\n-  const wide_int_bitmask PTA_AVX512CD (HOST_WIDE_INT_1U << 43);\n-  /* Hole after PTA_MPX was removed.  */\n-  const wide_int_bitmask PTA_SHA (HOST_WIDE_INT_1U << 45);\n-  const wide_int_bitmask PTA_PREFETCHWT1 (HOST_WIDE_INT_1U << 46);\n-  const wide_int_bitmask PTA_CLFLUSHOPT (HOST_WIDE_INT_1U << 47);\n-  const wide_int_bitmask PTA_XSAVEC (HOST_WIDE_INT_1U << 48);\n-  const wide_int_bitmask PTA_XSAVES (HOST_WIDE_INT_1U << 49);\n-  const wide_int_bitmask PTA_AVX512DQ (HOST_WIDE_INT_1U << 50);\n-  const wide_int_bitmask PTA_AVX512BW (HOST_WIDE_INT_1U << 51);\n-  const wide_int_bitmask PTA_AVX512VL (HOST_WIDE_INT_1U << 52);\n-  const wide_int_bitmask PTA_AVX512IFMA (HOST_WIDE_INT_1U << 53);\n-  const wide_int_bitmask PTA_AVX512VBMI (HOST_WIDE_INT_1U << 54);\n-  const wide_int_bitmask PTA_CLWB (HOST_WIDE_INT_1U << 55);\n-  const wide_int_bitmask PTA_MWAITX (HOST_WIDE_INT_1U << 56);\n-  const wide_int_bitmask PTA_CLZERO (HOST_WIDE_INT_1U << 57);\n-  const wide_int_bitmask PTA_NO_80387 (HOST_WIDE_INT_1U << 58);\n-  const wide_int_bitmask PTA_PKU (HOST_WIDE_INT_1U << 59);\n-  const wide_int_bitmask PTA_AVX5124VNNIW (HOST_WIDE_INT_1U << 60);\n-  const wide_int_bitmask PTA_AVX5124FMAPS (HOST_WIDE_INT_1U << 61);\n-  const wide_int_bitmask PTA_AVX512VPOPCNTDQ (HOST_WIDE_INT_1U << 62);\n-  const wide_int_bitmask PTA_SGX (HOST_WIDE_INT_1U << 63);\n-  const wide_int_bitmask PTA_AVX512VNNI (0, HOST_WIDE_INT_1U);\n-  const wide_int_bitmask PTA_GFNI (0, HOST_WIDE_INT_1U << 1);\n-  const wide_int_bitmask PTA_VAES (0, HOST_WIDE_INT_1U << 2);\n-  const wide_int_bitmask PTA_AVX512VBMI2 (0, HOST_WIDE_INT_1U << 3);\n-  const wide_int_bitmask PTA_VPCLMULQDQ (0, HOST_WIDE_INT_1U << 4);\n-  const wide_int_bitmask PTA_AVX512BITALG (0, HOST_WIDE_INT_1U << 5);\n-  const wide_int_bitmask PTA_RDPID (0, HOST_WIDE_INT_1U << 6);\n-  const wide_int_bitmask PTA_PCONFIG (0, HOST_WIDE_INT_1U << 7);\n-  const wide_int_bitmask PTA_WBNOINVD (0, HOST_WIDE_INT_1U << 8);\n-  const wide_int_bitmask PTA_WAITPKG (0, HOST_WIDE_INT_1U << 9);\n-\n-  const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2\n-    | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;\n-  const wide_int_bitmask PTA_NEHALEM = PTA_CORE2 | PTA_SSE4_1 | PTA_SSE4_2\n-    | PTA_POPCNT;\n-  const wide_int_bitmask PTA_WESTMERE = PTA_NEHALEM | PTA_PCLMUL;\n-  const wide_int_bitmask PTA_SANDYBRIDGE = PTA_WESTMERE | PTA_AVX | PTA_XSAVE\n-    | PTA_XSAVEOPT;\n-  const wide_int_bitmask PTA_IVYBRIDGE = PTA_SANDYBRIDGE | PTA_FSGSBASE\n-    | PTA_RDRND | PTA_F16C;\n-  const wide_int_bitmask PTA_HASWELL = PTA_IVYBRIDGE | PTA_AVX2 | PTA_BMI\n-    | PTA_BMI2 | PTA_LZCNT | PTA_FMA | PTA_MOVBE | PTA_HLE;\n-  const wide_int_bitmask PTA_BROADWELL = PTA_HASWELL | PTA_ADX | PTA_PRFCHW\n-    | PTA_RDSEED;\n-  const wide_int_bitmask PTA_SKYLAKE = PTA_BROADWELL | PTA_AES | PTA_CLFLUSHOPT\n-    | PTA_XSAVEC | PTA_XSAVES | PTA_SGX;\n-  const wide_int_bitmask PTA_SKYLAKE_AVX512 = PTA_SKYLAKE | PTA_AVX512F\n-    | PTA_AVX512CD | PTA_AVX512VL | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU\n-    | PTA_CLWB;\n-  const wide_int_bitmask PTA_CANNONLAKE = PTA_SKYLAKE | PTA_AVX512F\n-    | PTA_AVX512CD | PTA_AVX512VL | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU\n-    | PTA_AVX512VBMI | PTA_AVX512IFMA | PTA_SHA;\n-  const wide_int_bitmask PTA_ICELAKE_CLIENT = PTA_CANNONLAKE | PTA_AVX512VNNI\n-    | PTA_GFNI | PTA_VAES | PTA_AVX512VBMI2 | PTA_VPCLMULQDQ | PTA_AVX512BITALG\n-    | PTA_RDPID | PTA_CLWB;\n-  const wide_int_bitmask PTA_ICELAKE_SERVER = PTA_ICELAKE_CLIENT | PTA_PCONFIG\n-    | PTA_WBNOINVD;\n-  const wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER\n-    | PTA_AVX512F | PTA_AVX512CD;\n-  const wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;\n-  const wide_int_bitmask PTA_SILVERMONT = PTA_WESTMERE | PTA_MOVBE | PTA_RDRND;\n-  const wide_int_bitmask PTA_GOLDMONT = PTA_SILVERMONT | PTA_AES | PTA_SHA | PTA_XSAVE\n-    | PTA_RDSEED | PTA_XSAVEC | PTA_XSAVES | PTA_CLFLUSHOPT | PTA_XSAVEOPT\n-    | PTA_FSGSBASE;\n-  const wide_int_bitmask PTA_GOLDMONT_PLUS = PTA_GOLDMONT | PTA_RDPID\n-    | PTA_SGX;\n-  const wide_int_bitmask PTA_TREMONT = PTA_GOLDMONT_PLUS | PTA_CLWB\n-    | PTA_GFNI;\n-  const wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW\n-    | PTA_AVX5124FMAPS | PTA_AVX512VPOPCNTDQ;\n-\n-  static struct pta\n-    {\n-      const char *const name;\t\t/* processor name or nickname.  */\n-      const enum processor_type processor;\n-      const enum attr_cpu schedule;\n-      const wide_int_bitmask flags;\n-    }\n-  const processor_alias_table[] =\n-    {\n-      {\"i386\", PROCESSOR_I386, CPU_NONE, 0},\n-      {\"i486\", PROCESSOR_I486, CPU_NONE, 0},\n-      {\"i586\", PROCESSOR_PENTIUM, CPU_PENTIUM, 0},\n-      {\"pentium\", PROCESSOR_PENTIUM, CPU_PENTIUM, 0},\n-      {\"lakemont\", PROCESSOR_LAKEMONT, CPU_PENTIUM, PTA_NO_80387},\n-      {\"pentium-mmx\", PROCESSOR_PENTIUM, CPU_PENTIUM, PTA_MMX},\n-      {\"winchip-c6\", PROCESSOR_I486, CPU_NONE, PTA_MMX},\n-      {\"winchip2\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW},\n-      {\"c3\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW},\n-      {\"samuel-2\", PROCESSOR_I486, CPU_NONE, PTA_MMX | PTA_3DNOW},\n-      {\"c3-2\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-\tPTA_MMX | PTA_SSE | PTA_FXSR},\n-      {\"nehemiah\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-        PTA_MMX | PTA_SSE | PTA_FXSR},\n-      {\"c7\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-        PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n-      {\"esther\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-        PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n-      {\"i686\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, 0},\n-      {\"pentiumpro\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, 0},\n-      {\"pentium2\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, PTA_MMX | PTA_FXSR},\n-      {\"pentium3\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-\tPTA_MMX | PTA_SSE | PTA_FXSR},\n-      {\"pentium3m\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-\tPTA_MMX | PTA_SSE | PTA_FXSR},\n-      {\"pentium-m\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-\tPTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR},\n-      {\"pentium4\", PROCESSOR_PENTIUM4, CPU_NONE,\n-\tPTA_MMX |PTA_SSE | PTA_SSE2 | PTA_FXSR},\n-      {\"pentium4m\", PROCESSOR_PENTIUM4, CPU_NONE,\n-\tPTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR},\n-      {\"prescott\", PROCESSOR_NOCONA, CPU_NONE,\n-\tPTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n-      {\"nocona\", PROCESSOR_NOCONA, CPU_NONE,\n-\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t| PTA_CX16 | PTA_NO_SAHF | PTA_FXSR},\n-      {\"core2\", PROCESSOR_CORE2, CPU_CORE2, PTA_CORE2},\n-      {\"nehalem\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_NEHALEM},\n-      {\"corei7\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_NEHALEM},\n-      {\"westmere\", PROCESSOR_NEHALEM, CPU_NEHALEM, PTA_WESTMERE},\n-      {\"sandybridge\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n-\tPTA_SANDYBRIDGE},\n-      {\"corei7-avx\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n-\tPTA_SANDYBRIDGE},\n-      {\"ivybridge\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n-\tPTA_IVYBRIDGE},\n-      {\"core-avx-i\", PROCESSOR_SANDYBRIDGE, CPU_NEHALEM,\n-\tPTA_IVYBRIDGE},\n-      {\"haswell\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_HASWELL},\n-      {\"core-avx2\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_HASWELL},\n-      {\"broadwell\", PROCESSOR_HASWELL, CPU_HASWELL, PTA_BROADWELL},\n-      {\"skylake\", PROCESSOR_SKYLAKE, CPU_HASWELL, PTA_SKYLAKE},\n-      {\"skylake-avx512\", PROCESSOR_SKYLAKE_AVX512, CPU_HASWELL,\n-        PTA_SKYLAKE_AVX512},\n-      {\"cannonlake\", PROCESSOR_CANNONLAKE, CPU_HASWELL, PTA_CANNONLAKE},\n-      {\"icelake-client\", PROCESSOR_ICELAKE_CLIENT, CPU_HASWELL,\n-\tPTA_ICELAKE_CLIENT},\n-      {\"icelake-server\", PROCESSOR_ICELAKE_SERVER, CPU_HASWELL,\n-\tPTA_ICELAKE_SERVER},\n-      {\"bonnell\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n-      {\"atom\", PROCESSOR_BONNELL, CPU_ATOM, PTA_BONNELL},\n-      {\"silvermont\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n-      {\"slm\", PROCESSOR_SILVERMONT, CPU_SLM, PTA_SILVERMONT},\n-      {\"goldmont\", PROCESSOR_GOLDMONT, CPU_GLM, PTA_GOLDMONT},\n-      {\"goldmont-plus\", PROCESSOR_GOLDMONT_PLUS, CPU_GLM, PTA_GOLDMONT_PLUS},\n-      {\"tremont\", PROCESSOR_TREMONT, CPU_GLM, PTA_TREMONT},\n-      {\"knl\", PROCESSOR_KNL, CPU_SLM, PTA_KNL},\n-      {\"knm\", PROCESSOR_KNM, CPU_SLM, PTA_KNM},\n-      {\"intel\", PROCESSOR_INTEL, CPU_SLM, PTA_NEHALEM},\n-      {\"geode\", PROCESSOR_GEODE, CPU_GEODE,\n-\tPTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE},\n-      {\"k6\", PROCESSOR_K6, CPU_K6, PTA_MMX},\n-      {\"k6-2\", PROCESSOR_K6, CPU_K6, PTA_MMX | PTA_3DNOW},\n-      {\"k6-3\", PROCESSOR_K6, CPU_K6, PTA_MMX | PTA_3DNOW},\n-      {\"athlon\", PROCESSOR_ATHLON, CPU_ATHLON,\n-\tPTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE},\n-      {\"athlon-tbird\", PROCESSOR_ATHLON, CPU_ATHLON,\n-\tPTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE},\n-      {\"athlon-4\", PROCESSOR_ATHLON, CPU_ATHLON,\n-\tPTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR},\n-      {\"athlon-xp\", PROCESSOR_ATHLON, CPU_ATHLON,\n-\tPTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR},\n-      {\"athlon-mp\", PROCESSOR_ATHLON, CPU_ATHLON,\n-\tPTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_FXSR},\n-      {\"x86-64\", PROCESSOR_K8, CPU_K8,\n-\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n-      {\"eden-x2\", PROCESSOR_K8, CPU_K8,\n-        PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n-      {\"nano\", PROCESSOR_K8, CPU_K8,\n-        PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-        | PTA_SSSE3 | PTA_FXSR},\n-      {\"nano-1000\", PROCESSOR_K8, CPU_K8,\n-        PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-        | PTA_SSSE3 | PTA_FXSR},\n-      {\"nano-2000\", PROCESSOR_K8, CPU_K8,\n-        PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-        | PTA_SSSE3 | PTA_FXSR},\n-      {\"nano-3000\", PROCESSOR_K8, CPU_K8,\n-        PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-        | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n-      {\"nano-x2\", PROCESSOR_K8, CPU_K8,\n-        PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-        | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n-      {\"eden-x4\", PROCESSOR_K8, CPU_K8,\n-        PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-        | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n-      {\"nano-x4\", PROCESSOR_K8, CPU_K8,\n-        PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-        | PTA_SSSE3 | PTA_SSE4_1 | PTA_FXSR},\n-      {\"k8\", PROCESSOR_K8, CPU_K8,\n-\tPTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-\t| PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n-      {\"k8-sse3\", PROCESSOR_K8, CPU_K8,\n-\tPTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-\t| PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR},\n-      {\"opteron\", PROCESSOR_K8, CPU_K8,\n-\tPTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-\t| PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n-      {\"opteron-sse3\", PROCESSOR_K8, CPU_K8,\n-\tPTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-\t| PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR},\n-      {\"athlon64\", PROCESSOR_K8, CPU_K8,\n-\tPTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-\t| PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n-      {\"athlon64-sse3\", PROCESSOR_K8, CPU_K8,\n-\tPTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-\t| PTA_SSE2 | PTA_SSE3 | PTA_NO_SAHF | PTA_FXSR},\n-      {\"athlon-fx\", PROCESSOR_K8, CPU_K8,\n-\tPTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-\t| PTA_SSE2 | PTA_NO_SAHF | PTA_FXSR},\n-      {\"amdfam10\", PROCESSOR_AMDFAM10, CPU_AMDFAM10,\n-\tPTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_SSE2\n-\t| PTA_SSE3 | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_PRFCHW | PTA_FXSR},\n-      {\"barcelona\", PROCESSOR_AMDFAM10, CPU_AMDFAM10,\n-\tPTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE | PTA_SSE2\n-\t| PTA_SSE3 | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_PRFCHW | PTA_FXSR},\n-      {\"bdver1\", PROCESSOR_BDVER1, CPU_BDVER1,\n-\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n-\t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n-\t| PTA_XOP | PTA_LWP | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE},\n-      {\"bdver2\", PROCESSOR_BDVER2, CPU_BDVER2,\n-\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n-\t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n-\t| PTA_XOP | PTA_LWP | PTA_BMI | PTA_TBM | PTA_F16C\n-\t| PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE},\n-      {\"bdver3\", PROCESSOR_BDVER3, CPU_BDVER3,\n-\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n-\t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n-\t| PTA_XOP | PTA_LWP | PTA_BMI | PTA_TBM | PTA_F16C\n-\t| PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE \n-\t| PTA_XSAVEOPT | PTA_FSGSBASE},\n-      {\"bdver4\", PROCESSOR_BDVER4, CPU_BDVER4,\n-\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n-\t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_AVX2 \n-\t| PTA_FMA4 | PTA_XOP | PTA_LWP | PTA_BMI | PTA_BMI2 \n-\t| PTA_TBM | PTA_F16C | PTA_FMA | PTA_PRFCHW | PTA_FXSR \n-\t| PTA_XSAVE | PTA_XSAVEOPT | PTA_FSGSBASE | PTA_RDRND\n-\t| PTA_MOVBE | PTA_MWAITX},\n-      {\"znver1\", PROCESSOR_ZNVER1, CPU_ZNVER1,\n-\tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n-\t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_AVX2\n-\t| PTA_BMI | PTA_BMI2 | PTA_F16C | PTA_FMA | PTA_PRFCHW\n-\t| PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT | PTA_FSGSBASE\n-\t| PTA_RDRND | PTA_MOVBE | PTA_MWAITX | PTA_ADX | PTA_RDSEED\n-\t| PTA_CLZERO | PTA_CLFLUSHOPT | PTA_XSAVEC | PTA_XSAVES\n-\t| PTA_SHA | PTA_LZCNT | PTA_POPCNT},\n-      {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC,\n-\tPTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_PRFCHW\n-\t| PTA_FXSR | PTA_XSAVE},\n-      {\"btver2\", PROCESSOR_BTVER2, CPU_BTVER2,\n-\tPTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_SSE4_1\n-\t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX\n-\t| PTA_BMI | PTA_F16C | PTA_MOVBE | PTA_PRFCHW\n-\t| PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n-\n-      {\"generic\", PROCESSOR_GENERIC, CPU_GENERIC,\n-\tPTA_64BIT\n-\t| PTA_HLE /* flags are only used for -march switch.  */ },\n-    };\n-\n   /* -mrecip options.  */\n   static struct\n     {\n@@ -3727,7 +3401,6 @@ ix86_option_override_internal (bool main_args_p,\n       { \"vec-sqrt\",  RECIP_MASK_VEC_SQRT },\n     };\n \n-  int const pta_size = ARRAY_SIZE (processor_alias_table);\n \n   /* Turn off both OPTION_MASK_ABI_64 and OPTION_MASK_ABI_X32 if\n      TARGET_64BIT_DEFAULT is true and TARGET_64BIT is false.  */\n@@ -4383,7 +4056,7 @@ ix86_option_override_internal (bool main_args_p,\n \t}\n     }\n \n-  ix86_tune_cost = processor_target_table[ix86_tune].cost;\n+  ix86_tune_cost = processor_cost_table[ix86_tune];\n   /* TODO: ix86_cost should be chosen at instruction or function granuality\n      so for cold code we use size_cost even in !optimize_size compilation.  */\n   if (opts->x_optimize_size)\n@@ -5180,7 +4853,7 @@ ix86_function_specific_restore (struct gcc_options *opts,\n   opts->x_ix86_tune_memset_strategy = ptr->x_ix86_tune_memset_strategy;\n   opts->x_ix86_tune_no_default = ptr->x_ix86_tune_no_default;\n   opts->x_ix86_veclibabi_type = ptr->x_ix86_veclibabi_type;\n-  ix86_tune_cost = processor_target_table[ix86_tune].cost;\n+  ix86_tune_cost = processor_cost_table[ix86_tune];\n   /* TODO: ix86_cost should be chosen at instruction or function granuality\n      so for cold code we use size_cost even in !optimize_size compilation.  */\n   if (opts->x_optimize_size)"}, {"sha": "382323d385b62ad46c86547e312fcaa778031aeb", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -2277,6 +2277,156 @@ enum processor_type\n   PROCESSOR_max\n };\n \n+#if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS) && !defined(IN_RTS)\n+/* Processor target table, indexed by processor number */\n+struct ptt\n+{\n+  const char *const name;\t\t\t/* processor name  */\n+\n+  /* Default alignments.  */\n+  const char *const align_loop;\n+  const char *const align_jump;\n+  const char *const align_label;\n+  const char *const align_func;\n+};\n+\n+extern const struct ptt processor_target_table[PROCESSOR_max];\n+\n+#include \"wide-int-bitmask.h\"\n+\n+const wide_int_bitmask PTA_3DNOW (HOST_WIDE_INT_1U << 0);\n+const wide_int_bitmask PTA_3DNOW_A (HOST_WIDE_INT_1U << 1);\n+const wide_int_bitmask PTA_64BIT (HOST_WIDE_INT_1U << 2);\n+const wide_int_bitmask PTA_ABM (HOST_WIDE_INT_1U << 3);\n+const wide_int_bitmask PTA_AES (HOST_WIDE_INT_1U << 4);\n+const wide_int_bitmask PTA_AVX (HOST_WIDE_INT_1U << 5);\n+const wide_int_bitmask PTA_BMI (HOST_WIDE_INT_1U << 6);\n+const wide_int_bitmask PTA_CX16 (HOST_WIDE_INT_1U << 7);\n+const wide_int_bitmask PTA_F16C (HOST_WIDE_INT_1U << 8);\n+const wide_int_bitmask PTA_FMA (HOST_WIDE_INT_1U << 9);\n+const wide_int_bitmask PTA_FMA4 (HOST_WIDE_INT_1U << 10);\n+const wide_int_bitmask PTA_FSGSBASE (HOST_WIDE_INT_1U << 11);\n+const wide_int_bitmask PTA_LWP (HOST_WIDE_INT_1U << 12);\n+const wide_int_bitmask PTA_LZCNT (HOST_WIDE_INT_1U << 13);\n+const wide_int_bitmask PTA_MMX (HOST_WIDE_INT_1U << 14);\n+const wide_int_bitmask PTA_MOVBE (HOST_WIDE_INT_1U << 15);\n+const wide_int_bitmask PTA_NO_SAHF (HOST_WIDE_INT_1U << 16);\n+const wide_int_bitmask PTA_PCLMUL (HOST_WIDE_INT_1U << 17);\n+const wide_int_bitmask PTA_POPCNT (HOST_WIDE_INT_1U << 18);\n+const wide_int_bitmask PTA_PREFETCH_SSE (HOST_WIDE_INT_1U << 19);\n+const wide_int_bitmask PTA_RDRND (HOST_WIDE_INT_1U << 20);\n+const wide_int_bitmask PTA_SSE (HOST_WIDE_INT_1U << 21);\n+const wide_int_bitmask PTA_SSE2 (HOST_WIDE_INT_1U << 22);\n+const wide_int_bitmask PTA_SSE3 (HOST_WIDE_INT_1U << 23);\n+const wide_int_bitmask PTA_SSE4_1 (HOST_WIDE_INT_1U << 24);\n+const wide_int_bitmask PTA_SSE4_2 (HOST_WIDE_INT_1U << 25);\n+const wide_int_bitmask PTA_SSE4A (HOST_WIDE_INT_1U << 26);\n+const wide_int_bitmask PTA_SSSE3 (HOST_WIDE_INT_1U << 27);\n+const wide_int_bitmask PTA_TBM (HOST_WIDE_INT_1U << 28);\n+const wide_int_bitmask PTA_XOP (HOST_WIDE_INT_1U << 29);\n+const wide_int_bitmask PTA_AVX2 (HOST_WIDE_INT_1U << 30);\n+const wide_int_bitmask PTA_BMI2 (HOST_WIDE_INT_1U << 31);\n+const wide_int_bitmask PTA_RTM (HOST_WIDE_INT_1U << 32);\n+const wide_int_bitmask PTA_HLE (HOST_WIDE_INT_1U << 33);\n+const wide_int_bitmask PTA_PRFCHW (HOST_WIDE_INT_1U << 34);\n+const wide_int_bitmask PTA_RDSEED (HOST_WIDE_INT_1U << 35);\n+const wide_int_bitmask PTA_ADX (HOST_WIDE_INT_1U << 36);\n+const wide_int_bitmask PTA_FXSR (HOST_WIDE_INT_1U << 37);\n+const wide_int_bitmask PTA_XSAVE (HOST_WIDE_INT_1U << 38);\n+const wide_int_bitmask PTA_XSAVEOPT (HOST_WIDE_INT_1U << 39);\n+const wide_int_bitmask PTA_AVX512F (HOST_WIDE_INT_1U << 40);\n+const wide_int_bitmask PTA_AVX512ER (HOST_WIDE_INT_1U << 41);\n+const wide_int_bitmask PTA_AVX512PF (HOST_WIDE_INT_1U << 42);\n+const wide_int_bitmask PTA_AVX512CD (HOST_WIDE_INT_1U << 43);\n+/* Hole after PTA_MPX was removed.  */\n+const wide_int_bitmask PTA_SHA (HOST_WIDE_INT_1U << 45);\n+const wide_int_bitmask PTA_PREFETCHWT1 (HOST_WIDE_INT_1U << 46);\n+const wide_int_bitmask PTA_CLFLUSHOPT (HOST_WIDE_INT_1U << 47);\n+const wide_int_bitmask PTA_XSAVEC (HOST_WIDE_INT_1U << 48);\n+const wide_int_bitmask PTA_XSAVES (HOST_WIDE_INT_1U << 49);\n+const wide_int_bitmask PTA_AVX512DQ (HOST_WIDE_INT_1U << 50);\n+const wide_int_bitmask PTA_AVX512BW (HOST_WIDE_INT_1U << 51);\n+const wide_int_bitmask PTA_AVX512VL (HOST_WIDE_INT_1U << 52);\n+const wide_int_bitmask PTA_AVX512IFMA (HOST_WIDE_INT_1U << 53);\n+const wide_int_bitmask PTA_AVX512VBMI (HOST_WIDE_INT_1U << 54);\n+const wide_int_bitmask PTA_CLWB (HOST_WIDE_INT_1U << 55);\n+const wide_int_bitmask PTA_MWAITX (HOST_WIDE_INT_1U << 56);\n+const wide_int_bitmask PTA_CLZERO (HOST_WIDE_INT_1U << 57);\n+const wide_int_bitmask PTA_NO_80387 (HOST_WIDE_INT_1U << 58);\n+const wide_int_bitmask PTA_PKU (HOST_WIDE_INT_1U << 59);\n+const wide_int_bitmask PTA_AVX5124VNNIW (HOST_WIDE_INT_1U << 60);\n+const wide_int_bitmask PTA_AVX5124FMAPS (HOST_WIDE_INT_1U << 61);\n+const wide_int_bitmask PTA_AVX512VPOPCNTDQ (HOST_WIDE_INT_1U << 62);\n+const wide_int_bitmask PTA_SGX (HOST_WIDE_INT_1U << 63);\n+const wide_int_bitmask PTA_AVX512VNNI (0, HOST_WIDE_INT_1U);\n+const wide_int_bitmask PTA_GFNI (0, HOST_WIDE_INT_1U << 1);\n+const wide_int_bitmask PTA_VAES (0, HOST_WIDE_INT_1U << 2);\n+const wide_int_bitmask PTA_AVX512VBMI2 (0, HOST_WIDE_INT_1U << 3);\n+const wide_int_bitmask PTA_VPCLMULQDQ (0, HOST_WIDE_INT_1U << 4);\n+const wide_int_bitmask PTA_AVX512BITALG (0, HOST_WIDE_INT_1U << 5);\n+const wide_int_bitmask PTA_RDPID (0, HOST_WIDE_INT_1U << 6);\n+const wide_int_bitmask PTA_PCONFIG (0, HOST_WIDE_INT_1U << 7);\n+const wide_int_bitmask PTA_WBNOINVD (0, HOST_WIDE_INT_1U << 8);\n+const wide_int_bitmask PTA_WAITPKG (0, HOST_WIDE_INT_1U << 9);\n+\n+const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2\n+  | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;\n+const wide_int_bitmask PTA_NEHALEM = PTA_CORE2 | PTA_SSE4_1 | PTA_SSE4_2\n+  | PTA_POPCNT;\n+const wide_int_bitmask PTA_WESTMERE = PTA_NEHALEM | PTA_AES | PTA_PCLMUL;\n+const wide_int_bitmask PTA_SANDYBRIDGE = PTA_WESTMERE | PTA_AVX | PTA_XSAVE\n+  | PTA_XSAVEOPT;\n+const wide_int_bitmask PTA_IVYBRIDGE = PTA_SANDYBRIDGE | PTA_FSGSBASE\n+  | PTA_RDRND | PTA_F16C;\n+const wide_int_bitmask PTA_HASWELL = PTA_IVYBRIDGE | PTA_AVX2 | PTA_BMI\n+  | PTA_BMI2 | PTA_LZCNT | PTA_FMA | PTA_MOVBE | PTA_HLE;\n+const wide_int_bitmask PTA_BROADWELL = PTA_HASWELL | PTA_ADX | PTA_PRFCHW\n+  | PTA_RDSEED;\n+const wide_int_bitmask PTA_SKYLAKE = PTA_BROADWELL | PTA_CLFLUSHOPT\n+  | PTA_XSAVEC | PTA_XSAVES | PTA_SGX;\n+const wide_int_bitmask PTA_SKYLAKE_AVX512 = PTA_SKYLAKE | PTA_AVX512F\n+  | PTA_AVX512CD | PTA_AVX512VL | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU\n+  | PTA_CLWB;\n+const wide_int_bitmask PTA_CANNONLAKE = PTA_SKYLAKE | PTA_AVX512F\n+  | PTA_AVX512CD | PTA_AVX512VL | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU\n+  | PTA_AVX512VBMI | PTA_AVX512IFMA | PTA_SHA;\n+const wide_int_bitmask PTA_ICELAKE_CLIENT = PTA_CANNONLAKE | PTA_AVX512VNNI\n+  | PTA_GFNI | PTA_VAES | PTA_AVX512VBMI2 | PTA_VPCLMULQDQ | PTA_AVX512BITALG\n+  | PTA_RDPID | PTA_CLWB;\n+const wide_int_bitmask PTA_ICELAKE_SERVER = PTA_ICELAKE_CLIENT | PTA_PCONFIG\n+  | PTA_WBNOINVD;\n+const wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER\n+  | PTA_AVX512F | PTA_AVX512CD;\n+const wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;\n+const wide_int_bitmask PTA_SILVERMONT = PTA_WESTMERE | PTA_MOVBE | PTA_RDRND;\n+const wide_int_bitmask PTA_GOLDMONT = PTA_SILVERMONT | PTA_SHA | PTA_XSAVE\n+  | PTA_RDSEED | PTA_XSAVEC | PTA_XSAVES | PTA_CLFLUSHOPT | PTA_XSAVEOPT\n+  | PTA_FSGSBASE;\n+const wide_int_bitmask PTA_GOLDMONT_PLUS = PTA_GOLDMONT | PTA_RDPID\n+  | PTA_SGX;\n+const wide_int_bitmask PTA_TREMONT = PTA_GOLDMONT_PLUS | PTA_CLWB\n+  | PTA_GFNI;\n+const wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW\n+  | PTA_AVX5124FMAPS | PTA_AVX512VPOPCNTDQ;\n+\n+#ifndef GENERATOR_FILE\n+\n+#include \"insn-attr-common.h\"\n+\n+struct pta\n+{\n+  const char *const name;\t\t/* processor name or nickname.  */\n+  const enum processor_type processor;\n+  const enum attr_cpu schedule;\n+  const wide_int_bitmask flags;\n+};\n+\n+extern const pta processor_alias_table[];\n+extern int const pta_size;\n+#endif\n+\n+#endif\n+\n extern enum processor_type ix86_tune;\n extern enum processor_type ix86_arch;\n "}, {"sha": "561bda38899d76566993a3b2e2e2a9c6bc9441ce", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -5057,6 +5057,10 @@ Returns true if the target wants GCC's default stack protect runtime support, ot\n Whether this target supports splitting the stack when the options described in @var{opts} have been passed.  This is called after options have been parsed, so the target may reject splitting the stack in some configurations.  The default version of this hook returns false.  If @var{report} is true, this function may issue a warning or error; if @var{report} is false, it must simply return a value\n @end deftypefn\n \n+@deftypefn {Common Target Hook} {vec<const char *>} TARGET_GET_VALID_OPTION_VALUES (int @var{option_code}, const char *@var{prefix})\n+The hook is used for options that have a non-trivial list of possible option values.  OPTION_CODE is option code of opt_code enum type.  PREFIX is used for bash completion and allows an implementation to return more specific completion based on the prefix.  All string values should be allocated from heap memory and consumers should release them.  The result will be pruned to cases with PREFIX if not NULL.\n+@end deftypefn\n+\n @node Miscellaneous Register Hooks\n @subsection Miscellaneous register hooks\n @cindex miscellaneous register hooks"}, {"sha": "c509a9b4be66edac3482f59afaf19605da90821e", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -3669,6 +3669,8 @@ generic code.\n \n @hook TARGET_SUPPORTS_SPLIT_STACK\n \n+@hook TARGET_GET_VALID_OPTION_VALUES\n+\n @node Miscellaneous Register Hooks\n @subsection Miscellaneous register hooks\n @cindex miscellaneous register hooks"}, {"sha": "c68c9eedaf6c59c5a890e17daff2bbce63c047e3", "filename": "gcc/opt-suggestions.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fopt-suggestions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fopt-suggestions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-suggestions.c?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"spellcheck.h\"\n #include \"opt-suggestions.h\"\n+#include \"common/common-target.h\"\n #include \"selftest.h\"\n \n option_proposer::~option_proposer ()\n@@ -38,7 +39,7 @@ option_proposer::suggest_option (const char *bad_opt)\n {\n   /* Lazily populate m_option_suggestions.  */\n   if (!m_option_suggestions)\n-    build_option_suggestions ();\n+    build_option_suggestions (NULL);\n   gcc_assert (m_option_suggestions);\n \n   /* \"m_option_suggestions\" is now populated.  Use it.  */\n@@ -80,7 +81,7 @@ option_proposer::get_completions (const char *option_prefix,\n     {\n       /* Lazily populate m_option_suggestions.  */\n       if (!m_option_suggestions)\n-\tbuild_option_suggestions ();\n+\tbuild_option_suggestions (option_prefix);\n       gcc_assert (m_option_suggestions);\n \n       for (unsigned i = 0; i < m_option_suggestions->length (); i++)\n@@ -108,7 +109,7 @@ option_proposer::suggest_completion (const char *option_prefix)\n }\n \n void\n-option_proposer::build_option_suggestions (void)\n+option_proposer::build_option_suggestions (const char *prefix)\n {\n   gcc_assert (m_option_suggestions == NULL);\n   m_option_suggestions = new auto_string_vec ();\n@@ -135,8 +136,27 @@ option_proposer::build_option_suggestions (void)\n \t\t}\n \t    }\n \t  else\n-\t    add_misspelling_candidates (m_option_suggestions, option,\n-\t\t\t\t\topt_text);\n+\t    {\n+\t      if (option->flags & CL_TARGET)\n+\t\t{\n+\t\t  vec<const char *> option_values\n+\t\t    = targetm_common.get_valid_option_values (i, prefix);\n+\t\t  if (!option_values.is_empty ())\n+\t\t    {\n+\t\t      for (unsigned j = 0; j < option_values.length (); j++)\n+\t\t\t{\n+\t\t\t  char *with_arg = concat (opt_text, option_values[j],\n+\t\t\t\t\t\t   NULL);\n+\t\t\t  add_misspelling_candidates (m_option_suggestions, option,\n+\t\t\t\t\t\t      with_arg);\n+\t\t\t  free (with_arg);\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\tadd_misspelling_candidates (m_option_suggestions, option,\n+\t\t\t\t\t    opt_text);\n+\t    }\n \t  break;\n \n \tcase OPT_fsanitize_:"}, {"sha": "eb932779939375083935751f5adf3b4cc35cc86c", "filename": "gcc/opt-suggestions.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fopt-suggestions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fopt-suggestions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-suggestions.h?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -58,8 +58,10 @@ class option_proposer\n private:\n   /* Helper function for option_proposer::suggest_option.  Populate\n      m_option_suggestions with candidate strings for misspelled options.\n-     The strings will be freed by the option_proposer's dtor.  */\n-  void build_option_suggestions ();\n+     The strings will be freed by the option_proposer's dtor.\n+     PREFIX is used for bash completion suggestions, otherwise\n+     it's set to NULL.  */\n+  void build_option_suggestions (const char *prefix);\n \n   /* Find parameter completions for --param format with SEPARATOR.\n      Again, save the completions into results.  */"}, {"sha": "dc12c2ecefd074db13fd830f255344493bdae9d9", "filename": "gcc/opts.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -1090,6 +1090,21 @@ wrap_help (const char *help,\n   while (remaining);\n }\n \n+/* Data structure used to print list of valid option values.  */\n+\n+struct option_help_tuple\n+{\n+  option_help_tuple (int code, vec<const char *> values):\n+    m_code (code), m_values (values)\n+  {}\n+\n+  /* Code of an option.  */\n+  int m_code;\n+\n+  /* List of possible values.  */\n+  vec<const char *> m_values;\n+};\n+\n /* Print help for a specific front-end, etc.  */\n static void\n print_filtered_help (unsigned int include_flags,\n@@ -1143,6 +1158,8 @@ print_filtered_help (unsigned int include_flags,\n   if (!opts->x_help_enum_printed)\n     opts->x_help_enum_printed = XCNEWVAR (char, cl_enums_count);\n \n+  auto_vec<option_help_tuple> help_tuples;\n+\n   for (i = 0; i < cl_options_count; i++)\n     {\n       const struct cl_option *option = cl_options + i;\n@@ -1303,6 +1320,13 @@ print_filtered_help (unsigned int include_flags,\n       if (option->var_type == CLVC_ENUM\n \t  && opts->x_help_enum_printed[option->var_enum] != 2)\n \topts->x_help_enum_printed[option->var_enum] = 1;\n+      else\n+\t{\n+\t  vec<const char *> option_values\n+\t    = targetm_common.get_valid_option_values (i, NULL);\n+\t  if (!option_values.is_empty ())\n+\t    help_tuples.safe_push (option_help_tuple (i, option_values));\n+\t}\n     }\n \n   if (! found)\n@@ -1366,6 +1390,15 @@ print_filtered_help (unsigned int include_flags,\n       printf (\"\\n\\n\");\n       opts->x_help_enum_printed[i] = 2;\n     }\n+\n+  for (unsigned i = 0; i < help_tuples.length (); i++)\n+    {\n+      const struct cl_option *option = cl_options + help_tuples[i].m_code;\n+      printf (\"  Known valid arguments for %s option:\\n   \", option->opt_text);\n+      for (unsigned j = 0; j < help_tuples[i].m_values.length (); j++)\n+\tprintf (\" %s\", help_tuples[i].m_values[j]);\n+      printf (\"\\n\\n\");\n+    }\n }\n \n /* Display help for a specified type of option."}, {"sha": "89dc37721bf4f1d53334e618ffa60c575911a989", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -1,3 +1,8 @@\n+2018-09-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR driver/83193\n+\t* gcc.dg/completion-4.c: New test.\n+\n 2018-09-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84980"}, {"sha": "8116811998ab3bc9d804bac5b7d4411339184880", "filename": "gcc/testsuite/gcc.dg/completion-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Ftestsuite%2Fgcc.dg%2Fcompletion-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c98c243078c380ad4c9a1ef08869d3b64abb128f/gcc%2Ftestsuite%2Fgcc.dg%2Fcompletion-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompletion-4.c?ref=c98c243078c380ad4c9a1ef08869d3b64abb128f", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-options \"--completion=-march=geo\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+-march=geode\n+   { dg-end-multiline-output \"\" } */"}]}