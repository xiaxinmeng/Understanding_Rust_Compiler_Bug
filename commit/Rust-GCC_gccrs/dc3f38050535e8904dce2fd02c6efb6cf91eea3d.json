{"sha": "dc3f38050535e8904dce2fd02c6efb6cf91eea3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMzZjM4MDUwNTM1ZTg5MDRkY2UyZmQwMmM2ZWZiNmNmOTFlZWEzZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-20T12:51:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-20T12:51:57Z"}, "message": "poly_int: dump routines\n\n2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* dumpfile.h (dump_dec): Declare.\n\t* dumpfile.c (dump_dec): New function.\n\t* pretty-print.h (pp_wide_integer): Turn into a function and\n\tdeclare a poly_int version.\n\t* pretty-print.c (pp_wide_integer): New function for poly_ints.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255864", "tree": {"sha": "07db92271531d8b8b511202edb0dfe43cec24bc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07db92271531d8b8b511202edb0dfe43cec24bc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc3f38050535e8904dce2fd02c6efb6cf91eea3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3f38050535e8904dce2fd02c6efb6cf91eea3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3f38050535e8904dce2fd02c6efb6cf91eea3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3f38050535e8904dce2fd02c6efb6cf91eea3d/comments", "author": null, "committer": null, "parents": [{"sha": "36fd64086542ed734aded849304723218fa4d6fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fd64086542ed734aded849304723218fa4d6fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36fd64086542ed734aded849304723218fa4d6fd"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "482206640eae42048c8c9e1a91f922a20309cf86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3f38050535e8904dce2fd02c6efb6cf91eea3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3f38050535e8904dce2fd02c6efb6cf91eea3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc3f38050535e8904dce2fd02c6efb6cf91eea3d", "patch": "@@ -1,3 +1,13 @@\n+2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* dumpfile.h (dump_dec): Declare.\n+\t* dumpfile.c (dump_dec): New function.\n+\t* pretty-print.h (pp_wide_integer): Turn into a function and\n+\tdeclare a poly_int version.\n+\t* pretty-print.c (pp_wide_integer): New function for poly_ints.\n+\n 2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "a49ff997ea4804cb3b5f9cc9a5919f0c91523118", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3f38050535e8904dce2fd02c6efb6cf91eea3d/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3f38050535e8904dce2fd02c6efb6cf91eea3d/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=dc3f38050535e8904dce2fd02c6efb6cf91eea3d", "patch": "@@ -473,6 +473,27 @@ dump_printf_loc (dump_flags_t dump_kind, source_location loc,\n     }\n }\n \n+/* Output VALUE in decimal to appropriate dump streams.  */\n+\n+template<unsigned int N, typename C>\n+void\n+dump_dec (int dump_kind, const poly_int<N, C> &value)\n+{\n+  STATIC_ASSERT (poly_coeff_traits<C>::signedness >= 0);\n+  signop sgn = poly_coeff_traits<C>::signedness ? SIGNED : UNSIGNED;\n+  if (dump_file && (dump_kind & pflags))\n+    print_dec (value, dump_file, sgn);\n+\n+  if (alt_dump_file && (dump_kind & alt_flags))\n+    print_dec (value, alt_dump_file, sgn);\n+}\n+\n+template void dump_dec (int, const poly_uint16 &);\n+template void dump_dec (int, const poly_int64 &);\n+template void dump_dec (int, const poly_uint64 &);\n+template void dump_dec (int, const poly_offset_int &);\n+template void dump_dec (int, const poly_widest_int &);\n+\n /* Start a dump for PHASE. Store user-supplied dump flags in\n    *FLAG_PTR.  Return the number of streams opened.  Set globals\n    DUMP_FILE, and ALT_DUMP_FILE to point to the opened streams, and"}, {"sha": "910452b83707cc0c92129a410fd6d3df70909a20", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3f38050535e8904dce2fd02c6efb6cf91eea3d/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3f38050535e8904dce2fd02c6efb6cf91eea3d/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=dc3f38050535e8904dce2fd02c6efb6cf91eea3d", "patch": "@@ -175,6 +175,9 @@ extern void dump_gimple_stmt (dump_flags_t, dump_flags_t, gimple *, int);\n extern void print_combine_total_stats (void);\n extern bool enable_rtl_dump_file (void);\n \n+template<unsigned int N, typename C>\n+void dump_dec (int, const poly_int<N, C> &);\n+\n /* In tree-dump.c  */\n extern void dump_node (const_tree, dump_flags_t, FILE *);\n "}, {"sha": "0c328d0c250fad9ea4af1eb0d86b6e0576969fb3", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3f38050535e8904dce2fd02c6efb6cf91eea3d/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3f38050535e8904dce2fd02c6efb6cf91eea3d/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=dc3f38050535e8904dce2fd02c6efb6cf91eea3d", "patch": "@@ -795,6 +795,30 @@ pp_clear_state (pretty_printer *pp)\n   pp_indentation (pp) = 0;\n }\n \n+/* Print X to PP in decimal.  */\n+template<unsigned int N, typename T>\n+void\n+pp_wide_integer (pretty_printer *pp, const poly_int_pod<N, T> &x)\n+{\n+  if (x.is_constant ())\n+    pp_wide_integer (pp, x.coeffs[0]);\n+  else\n+    {\n+      pp_left_bracket (pp);\n+      for (unsigned int i = 0; i < N; ++i)\n+\t{\n+\t  if (i != 0)\n+\t    pp_comma (pp);\n+\t  pp_wide_integer (pp, x.coeffs[i]);\n+\t}\n+      pp_right_bracket (pp);\n+    }\n+}\n+\n+template void pp_wide_integer (pretty_printer *, const poly_uint16_pod &);\n+template void pp_wide_integer (pretty_printer *, const poly_int64_pod &);\n+template void pp_wide_integer (pretty_printer *, const poly_uint64_pod &);\n+\n /* Flush the formatted text of PRETTY-PRINTER onto the attached stream.  */\n void\n pp_write_text_to_stream (pretty_printer *pp)"}, {"sha": "92d1d8e08d219b3bdd096d58b0756c53661d24f6", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3f38050535e8904dce2fd02c6efb6cf91eea3d/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3f38050535e8904dce2fd02c6efb6cf91eea3d/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=dc3f38050535e8904dce2fd02c6efb6cf91eea3d", "patch": "@@ -328,8 +328,6 @@ pp_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n       pp_string (PP, pp_buffer (PP)->digit_buffer);\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n-#define pp_wide_integer(PP, I) \\\n-   pp_scalar (PP, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) I)\n #define pp_pointer(PP, P)      pp_scalar (PP, \"%p\", P)\n \n #define pp_identifier(PP, ID)  pp_string (PP, (pp_translate_identifiers (PP) \\\n@@ -404,4 +402,15 @@ extern const char *identifier_to_locale (const char *);\n extern void *(*identifier_to_locale_alloc) (size_t);\n extern void (*identifier_to_locale_free) (void *);\n \n+/* Print I to PP in decimal.  */\n+\n+inline void\n+pp_wide_integer (pretty_printer *pp, HOST_WIDE_INT i)\n+{\n+  pp_scalar (pp, HOST_WIDE_INT_PRINT_DEC, i);\n+}\n+\n+template<unsigned int N, typename T>\n+void pp_wide_integer (pretty_printer *pp, const poly_int_pod<N, T> &);\n+\n #endif /* GCC_PRETTY_PRINT_H */"}]}