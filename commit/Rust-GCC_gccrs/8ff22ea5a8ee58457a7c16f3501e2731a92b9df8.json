{"sha": "8ff22ea5a8ee58457a7c16f3501e2731a92b9df8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZmMjJlYTVhOGVlNTg0NTdhN2MxNmYzNTAxZTI3MzFhOTJiOWRmOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-29T15:17:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-29T15:17:20Z"}, "message": "misc/cgo/testcarchive: fix test to work for gccgo\n    \n    This test is not yet run, but it will be soon.\n    \n    Reviewed-on: https://go-review.googlesource.com/47038\n\nFrom-SVN: r249795", "tree": {"sha": "670e7a6423083672b8dc0142e429da3302db46da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/670e7a6423083672b8dc0142e429da3302db46da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ff22ea5a8ee58457a7c16f3501e2731a92b9df8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff22ea5a8ee58457a7c16f3501e2731a92b9df8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff22ea5a8ee58457a7c16f3501e2731a92b9df8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff22ea5a8ee58457a7c16f3501e2731a92b9df8/comments", "author": null, "committer": null, "parents": [{"sha": "1a7ad6ad6683c2254bdf705697a56d578e72e5c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7ad6ad6683c2254bdf705697a56d578e72e5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7ad6ad6683c2254bdf705697a56d578e72e5c7"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "289383f929aadd93e916cede0fc4e47672dba4fa", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff22ea5a8ee58457a7c16f3501e2731a92b9df8/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff22ea5a8ee58457a7c16f3501e2731a92b9df8/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=8ff22ea5a8ee58457a7c16f3501e2731a92b9df8", "patch": "@@ -1,4 +1,4 @@\n-8c4d6fd19f6d5dc9b41be384c60507f2236f05ec\n+12c65e8310956eb3cc412d9dc9f9e88cbd928c8e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a2ad9c5641897bbcfb36afd28a56ef89ac31ff67", "filename": "libgo/misc/cgo/testcarchive/carchive_test.go", "status": "modified", "additions": 56, "deletions": 9, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff22ea5a8ee58457a7c16f3501e2731a92b9df8/libgo%2Fmisc%2Fcgo%2Ftestcarchive%2Fcarchive_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff22ea5a8ee58457a7c16f3501e2731a92b9df8/libgo%2Fmisc%2Fcgo%2Ftestcarchive%2Fcarchive_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestcarchive%2Fcarchive_test.go?ref=8ff22ea5a8ee58457a7c16f3501e2731a92b9df8", "patch": "@@ -12,6 +12,7 @@ import (\n \t\"os\"\n \t\"os/exec\"\n \t\"path/filepath\"\n+\t\"runtime\"\n \t\"strings\"\n \t\"syscall\"\n \t\"testing\"\n@@ -81,13 +82,17 @@ func init() {\n \t\tcc = append(cc, []string{\"-framework\", \"CoreFoundation\", \"-framework\", \"Foundation\"}...)\n \t}\n \tlibgodir = GOOS + \"_\" + GOARCH\n-\tswitch GOOS {\n-\tcase \"darwin\":\n-\t\tif GOARCH == \"arm\" || GOARCH == \"arm64\" {\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tlibgodir = \"gccgo_\" + libgodir + \"_fPIC\"\n+\t} else {\n+\t\tswitch GOOS {\n+\t\tcase \"darwin\":\n+\t\t\tif GOARCH == \"arm\" || GOARCH == \"arm64\" {\n+\t\t\t\tlibgodir += \"_shared\"\n+\t\t\t}\n+\t\tcase \"dragonfly\", \"freebsd\", \"linux\", \"netbsd\", \"openbsd\", \"solaris\":\n \t\t\tlibgodir += \"_shared\"\n \t\t}\n-\tcase \"dragonfly\", \"freebsd\", \"linux\", \"netbsd\", \"openbsd\", \"solaris\":\n-\t\tlibgodir += \"_shared\"\n \t}\n \tcc = append(cc, \"-I\", filepath.Join(\"pkg\", libgodir))\n \n@@ -149,6 +154,9 @@ func testInstall(t *testing.T, exe, libgoa, libgoh string, buildcmd ...string) {\n \t} else {\n \t\tccArgs = append(ccArgs, \"main_unix.c\", libgoa)\n \t}\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tccArgs = append(ccArgs, \"-lgo\")\n+\t}\n \tt.Log(ccArgs)\n \tif out, err := exec.Command(ccArgs[0], ccArgs[1:]...).CombinedOutput(); err != nil {\n \t\tt.Logf(\"%s\", out)\n@@ -157,7 +165,11 @@ func testInstall(t *testing.T, exe, libgoa, libgoh string, buildcmd ...string) {\n \tdefer os.Remove(exe)\n \n \tbinArgs := append(cmdToRun(exe), \"arg1\", \"arg2\")\n-\tif out, err := exec.Command(binArgs[0], binArgs[1:]...).CombinedOutput(); err != nil {\n+\tcmd = exec.Command(binArgs[0], binArgs[1:]...)\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tcmd.Env = append(os.Environ(), \"GCCGO=1\")\n+\t}\n+\tif out, err := cmd.CombinedOutput(); err != nil {\n \t\tt.Logf(\"%s\", out)\n \t\tt.Fatal(err)\n \t}\n@@ -166,8 +178,13 @@ func testInstall(t *testing.T, exe, libgoa, libgoh string, buildcmd ...string) {\n func TestInstall(t *testing.T) {\n \tdefer os.RemoveAll(\"pkg\")\n \n+\tlibgoa := \"libgo.a\"\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tlibgoa = \"liblibgo.a\"\n+\t}\n+\n \ttestInstall(t, \"./testp1\"+exeSuffix,\n-\t\tfilepath.Join(\"pkg\", libgodir, \"libgo.a\"),\n+\t\tfilepath.Join(\"pkg\", libgodir, libgoa),\n \t\tfilepath.Join(\"pkg\", libgodir, \"libgo.h\"),\n \t\t\"go\", \"install\", \"-buildmode=c-archive\", \"libgo\")\n \n@@ -206,6 +223,9 @@ func TestEarlySignalHandler(t *testing.T) {\n \t}\n \n \tccArgs := append(cc, \"-o\", \"testp\"+exeSuffix, \"main2.c\", \"libgo2.a\")\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tccArgs = append(ccArgs, \"-lgo\")\n+\t}\n \tif out, err := exec.Command(ccArgs[0], ccArgs[1:]...).CombinedOutput(); err != nil {\n \t\tt.Logf(\"%s\", out)\n \t\tt.Fatal(err)\n@@ -243,6 +263,9 @@ func TestSignalForwarding(t *testing.T) {\n \t}\n \n \tccArgs := append(cc, \"-o\", \"testp\"+exeSuffix, \"main5.c\", \"libgo2.a\")\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tccArgs = append(ccArgs, \"-lgo\")\n+\t}\n \tif out, err := exec.Command(ccArgs[0], ccArgs[1:]...).CombinedOutput(); err != nil {\n \t\tt.Logf(\"%s\", out)\n \t\tt.Fatal(err)\n@@ -293,6 +316,9 @@ func TestSignalForwardingExternal(t *testing.T) {\n \t}\n \n \tccArgs := append(cc, \"-o\", \"testp\"+exeSuffix, \"main5.c\", \"libgo2.a\")\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tccArgs = append(ccArgs, \"-lgo\")\n+\t}\n \tif out, err := exec.Command(ccArgs[0], ccArgs[1:]...).CombinedOutput(); err != nil {\n \t\tt.Logf(\"%s\", out)\n \t\tt.Fatal(err)\n@@ -380,6 +406,9 @@ func TestOsSignal(t *testing.T) {\n \t}\n \n \tccArgs := append(cc, \"-o\", \"testp\"+exeSuffix, \"main3.c\", \"libgo3.a\")\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tccArgs = append(ccArgs, \"-lgo\")\n+\t}\n \tif out, err := exec.Command(ccArgs[0], ccArgs[1:]...).CombinedOutput(); err != nil {\n \t\tt.Logf(\"%s\", out)\n \t\tt.Fatal(err)\n@@ -412,6 +441,9 @@ func TestSigaltstack(t *testing.T) {\n \t}\n \n \tccArgs := append(cc, \"-o\", \"testp\"+exeSuffix, \"main4.c\", \"libgo4.a\")\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tccArgs = append(ccArgs, \"-lgo\")\n+\t}\n \tif out, err := exec.Command(ccArgs[0], ccArgs[1:]...).CombinedOutput(); err != nil {\n \t\tt.Logf(\"%s\", out)\n \t\tt.Fatal(err)\n@@ -436,6 +468,9 @@ func TestExtar(t *testing.T) {\n \tcase \"windows\":\n \t\tt.Skip(\"skipping signal test on Windows\")\n \t}\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tt.Skip(\"skipping -extar test when using gccgo\")\n+\t}\n \n \tdefer func() {\n \t\tos.Remove(\"libgo4.a\")\n@@ -489,14 +524,26 @@ func TestPIE(t *testing.T) {\n \t\tt.Fatal(err)\n \t}\n \n-\tccArgs := append(cc, \"-fPIE\", \"-pie\", \"-o\", \"testp\"+exeSuffix, \"main.c\", \"main_unix.c\", filepath.Join(\"pkg\", libgodir, \"libgo.a\"))\n+\tlibgoa := \"libgo.a\"\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tlibgoa = \"liblibgo.a\"\n+\t}\n+\n+\tccArgs := append(cc, \"-fPIE\", \"-pie\", \"-o\", \"testp\"+exeSuffix, \"main.c\", \"main_unix.c\", filepath.Join(\"pkg\", libgodir, libgoa))\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tccArgs = append(ccArgs, \"-lgo\")\n+\t}\n \tif out, err := exec.Command(ccArgs[0], ccArgs[1:]...).CombinedOutput(); err != nil {\n \t\tt.Logf(\"%s\", out)\n \t\tt.Fatal(err)\n \t}\n \n \tbinArgs := append(bin, \"arg1\", \"arg2\")\n-\tif out, err := exec.Command(binArgs[0], binArgs[1:]...).CombinedOutput(); err != nil {\n+\tcmd = exec.Command(binArgs[0], binArgs[1:]...)\n+\tif runtime.Compiler == \"gccgo\" {\n+\t\tcmd.Env = append(os.Environ(), \"GCCGO=1\")\n+\t}\n+\tif out, err := cmd.CombinedOutput(); err != nil {\n \t\tt.Logf(\"%s\", out)\n \t\tt.Fatal(err)\n \t}"}, {"sha": "b23ac1c2428bac3abcf1d242c44b3c42e19abcd8", "filename": "libgo/misc/cgo/testcarchive/main_unix.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff22ea5a8ee58457a7c16f3501e2731a92b9df8/libgo%2Fmisc%2Fcgo%2Ftestcarchive%2Fmain_unix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff22ea5a8ee58457a7c16f3501e2731a92b9df8/libgo%2Fmisc%2Fcgo%2Ftestcarchive%2Fmain_unix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftestcarchive%2Fmain_unix.c?ref=8ff22ea5a8ee58457a7c16f3501e2731a92b9df8", "patch": "@@ -5,6 +5,7 @@\n #include <signal.h>\n #include <stdint.h>\n #include <stdio.h>\n+#include <stdlib.h>\n #include <string.h>\n \n struct sigaction sa;\n@@ -30,7 +31,12 @@ int install_handler() {\n \t\tperror(\"sigaction\");\n \t\treturn 2;\n \t}\n-\tif (osa.sa_handler == SIG_DFL || (osa.sa_flags&SA_ONSTACK) == 0) {\n+\tif (osa.sa_handler == SIG_DFL) {\n+\t\tfprintf(stderr, \"Go runtime did not install signal handler\\n\");\n+\t\treturn 2;\n+\t}\n+\t// gccgo does not set SA_ONSTACK for SIGSEGV.\n+\tif (getenv(\"GCCGO\") == \"\" && (osa.sa_flags&SA_ONSTACK) == 0) {\n \t\tfprintf(stderr, \"Go runtime did not install signal handler\\n\");\n \t\treturn 2;\n \t}"}]}