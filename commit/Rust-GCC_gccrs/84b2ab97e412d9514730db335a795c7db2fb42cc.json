{"sha": "84b2ab97e412d9514730db335a795c7db2fb42cc", "node_id": "C_kwDOANBUbNoAKDg0YjJhYjk3ZTQxMmQ5NTE0NzMwZGIzMzVhNzk1YzdkYjJmYjQyY2M", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-20T14:19:30Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-20T14:19:30Z"}, "message": "c++: stream PACK_EXPANSION_EXTRA_ARGS [PR106761]\n\nIt looks like after the libstdc++ commit r13-2158-g02f6b405f0e9dc\nsome xtreme-header-* tests are failing with \"conflicting global module\ndeclaration\" errors ultimately because we're neglecting to stream\nPACK_EXPANSION_EXTRA_ARGS, which leads to wrong equivalences of\ndifferent partial instantiations of _TupleConstraints::__constructible.\n\n\tPR c++/106761\n\ngcc/cp/ChangeLog:\n\n\t* module.cc (trees_out::type_node) <case TYPE_PACK_EXPANSION>:\n\tStream PACK_EXPANSION_EXTRA_ARGS.\n\t(trees_in::tree_node) <case TYPE_PACK_EXPANSION>: Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/modules/pr106761.h: New test.\n\t* g++.dg/modules/pr106761_a.H: New test.\n\t* g++.dg/modules/pr106761_b.C: New test.", "tree": {"sha": "379055cd7af4fee6cdf3c8a726d32de3e8261b52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/379055cd7af4fee6cdf3c8a726d32de3e8261b52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84b2ab97e412d9514730db335a795c7db2fb42cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b2ab97e412d9514730db335a795c7db2fb42cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84b2ab97e412d9514730db335a795c7db2fb42cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84b2ab97e412d9514730db335a795c7db2fb42cc/comments", "author": null, "committer": null, "parents": [{"sha": "a8bb495a5627bba44407dedbe38653bb0432d811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8bb495a5627bba44407dedbe38653bb0432d811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8bb495a5627bba44407dedbe38653bb0432d811"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "9a9ef4e33324da3c988f378fc483749da66d2181", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b2ab97e412d9514730db335a795c7db2fb42cc/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b2ab97e412d9514730db335a795c7db2fb42cc/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=84b2ab97e412d9514730db335a795c7db2fb42cc", "patch": "@@ -8922,6 +8922,7 @@ trees_out::type_node (tree type)\n       if (streaming_p ())\n \tu (PACK_EXPANSION_LOCAL_P (type));\n       tree_node (PACK_EXPANSION_PARAMETER_PACKS (type));\n+      tree_node (PACK_EXPANSION_EXTRA_ARGS (type));\n       break;\n \n     case TYPENAME_TYPE:\n@@ -9455,12 +9456,14 @@ trees_in::tree_node (bool is_use)\n \t    {\n \t      bool local = u ();\n \t      tree param_packs = tree_node ();\n+\t      tree extra_args = tree_node ();\n \t      if (!get_overrun ())\n \t\t{\n \t\t  tree expn = cxx_make_type (TYPE_PACK_EXPANSION);\n \t\t  SET_TYPE_STRUCTURAL_EQUALITY (expn);\n \t\t  PACK_EXPANSION_PATTERN (expn) = res;\n \t\t  PACK_EXPANSION_PARAMETER_PACKS (expn) = param_packs;\n+\t\t  PACK_EXPANSION_EXTRA_ARGS (expn) = extra_args;\n \t\t  PACK_EXPANSION_LOCAL_P (expn) = local;\n \t\t  res = expn;\n \t\t}"}, {"sha": "9f22a22a45d3060a2cb38f27778a892eb3c59ed3", "filename": "gcc/testsuite/g++.dg/modules/pr106761.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b2ab97e412d9514730db335a795c7db2fb42cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106761.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b2ab97e412d9514730db335a795c7db2fb42cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106761.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106761.h?ref=84b2ab97e412d9514730db335a795c7db2fb42cc", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/106761\n+\n+template<class...>\n+struct __and_;\n+\n+template<class, class>\n+struct is_convertible;\n+\n+template<class... Ts>\n+struct _TupleConstraints {\n+  template<class... Us>\n+  using __constructible = __and_<is_convertible<Ts, Us>...>;\n+};\n+\n+template<class... Ts>\n+struct tuple {\n+  template<class... Us>\n+  using __constructible\n+    = typename _TupleConstraints<Ts...>::template __constructible<Us...>;\n+};\n+\n+tuple<int, int> t;"}, {"sha": "8ad116412af2a9f8f83f3f3132d0e25e5f9b69f3", "filename": "gcc/testsuite/g++.dg/modules/pr106761_a.H", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b2ab97e412d9514730db335a795c7db2fb42cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106761_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b2ab97e412d9514730db335a795c7db2fb42cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106761_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106761_a.H?ref=84b2ab97e412d9514730db335a795c7db2fb42cc", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/106761\n+// { dg-additional-options -fmodule-header }\n+\n+// { dg-module-cmi {} }\n+#include \"pr106761.h\""}, {"sha": "418991b1874234dc2eeac643f902efe233f25b86", "filename": "gcc/testsuite/g++.dg/modules/pr106761_b.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84b2ab97e412d9514730db335a795c7db2fb42cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106761_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84b2ab97e412d9514730db335a795c7db2fb42cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106761_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr106761_b.C?ref=84b2ab97e412d9514730db335a795c7db2fb42cc", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/106761\n+// { dg-additional-options -fmodules-ts }\n+\n+#include \"pr106761.h\"\n+import \"pr106761_a.H\";\n+\n+tuple<int, int> u = t;"}]}