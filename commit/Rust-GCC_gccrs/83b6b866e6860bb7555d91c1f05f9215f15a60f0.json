{"sha": "83b6b866e6860bb7555d91c1f05f9215f15a60f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNiNmI4NjZlNjg2MGJiNzU1NWQ5MWMxZjA1ZjkyMTVmMTVhNjBmMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-04-28T09:21:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-04-28T09:21:23Z"}, "message": "re PR c++/48771 ([C++0x] is_literal_type incorrect for references to non-literal types)\n\n/cp\n2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/48771\n\t* semantics.c (literal_type_p): Reference types are literal types,\n\tper the FDIS.\n\t(valid_type_in_constexpr_fundecl_p): Remove.\n\t(is_valid_constexpr_fn): Adjust.\n\n/testsuite\n2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/48771\n\t* g++.dg/ext/is_literal_type1.C: New.\n\nFrom-SVN: r173062", "tree": {"sha": "b445fe20c14867fb8e479fb47f81ec43981c9619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b445fe20c14867fb8e479fb47f81ec43981c9619"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83b6b866e6860bb7555d91c1f05f9215f15a60f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b6b866e6860bb7555d91c1f05f9215f15a60f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83b6b866e6860bb7555d91c1f05f9215f15a60f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b6b866e6860bb7555d91c1f05f9215f15a60f0/comments", "author": null, "committer": null, "parents": [{"sha": "8576f20aedfbbdc1b82ce89be28fbf4a14d9a857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8576f20aedfbbdc1b82ce89be28fbf4a14d9a857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8576f20aedfbbdc1b82ce89be28fbf4a14d9a857"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "64cb011561a8cdcfa38409919d70af58d5fd3674", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b6b866e6860bb7555d91c1f05f9215f15a60f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b6b866e6860bb7555d91c1f05f9215f15a60f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=83b6b866e6860bb7555d91c1f05f9215f15a60f0", "patch": "@@ -1,3 +1,11 @@\n+2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/48771\n+\t* semantics.c (literal_type_p): Reference types are literal types,\n+\tper the FDIS.\n+\t(valid_type_in_constexpr_fundecl_p): Remove.\n+\t(is_valid_constexpr_fn): Adjust.\n+\n 2011-04-27  Jason Merrill  <jason@redhat.com>\n \n \tPR libstdc++/48760"}, {"sha": "c6364120fe52ae6ce7b3e7f8cdfc469fa8902cc2", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b6b866e6860bb7555d91c1f05f9215f15a60f0/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b6b866e6860bb7555d91c1f05f9215f15a60f0/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=83b6b866e6860bb7555d91c1f05f9215f15a60f0", "patch": "@@ -5331,7 +5331,8 @@ float_const_decimal64_p (void)\n bool\n literal_type_p (tree t)\n {\n-  if (SCALAR_TYPE_P (t))\n+  if (SCALAR_TYPE_P (t)\n+      || TREE_CODE (t) == REFERENCE_TYPE)\n     return true;\n   if (CLASS_TYPE_P (t))\n     return CLASSTYPE_LITERAL_P (t);\n@@ -5406,18 +5407,6 @@ retrieve_constexpr_fundef (tree fun)\n   return (constexpr_fundef *) htab_find (constexpr_fundef_table, &fundef);\n }\n \n-/* Return true if type expression T is a valid parameter type, or\n-   a valid return type, of a constexpr function.  */\n-\n-static bool\n-valid_type_in_constexpr_fundecl_p (tree t)\n-{\n-  return (literal_type_p (t)\n-\t  /* FIXME we allow ref to non-literal; should change standard to\n-\t     match, or change back if not.  */\n-\t  || TREE_CODE (t) == REFERENCE_TYPE);\n-}\n-\n /* Check whether the parameter and return types of FUN are valid for a\n    constexpr function, and complain if COMPLAIN.  */\n \n@@ -5427,7 +5416,7 @@ is_valid_constexpr_fn (tree fun, bool complain)\n   tree parm = FUNCTION_FIRST_USER_PARM (fun);\n   bool ret = true;\n   for (; parm != NULL; parm = TREE_CHAIN (parm))\n-    if (!valid_type_in_constexpr_fundecl_p (TREE_TYPE (parm)))\n+    if (!literal_type_p (TREE_TYPE (parm)))\n       {\n \tret = false;\n \tif (complain)\n@@ -5438,7 +5427,7 @@ is_valid_constexpr_fn (tree fun, bool complain)\n   if (!DECL_CONSTRUCTOR_P (fun))\n     {\n       tree rettype = TREE_TYPE (TREE_TYPE (fun));\n-      if (!valid_type_in_constexpr_fundecl_p (rettype))\n+      if (!literal_type_p (rettype))\n \t{\n \t  ret = false;\n \t  if (complain)"}, {"sha": "904848c1e61ea40e9ce72972221af1fee3ee86fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b6b866e6860bb7555d91c1f05f9215f15a60f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b6b866e6860bb7555d91c1f05f9215f15a60f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83b6b866e6860bb7555d91c1f05f9215f15a60f0", "patch": "@@ -1,3 +1,8 @@\n+2011-04-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/48771\n+\t* g++.dg/ext/is_literal_type1.C: New.\n+\n 2011-04-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48112"}, {"sha": "21570d2d6ec2be621f037aa8c6d47fa395f9e463", "filename": "gcc/testsuite/g++.dg/ext/is_literal_type1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b6b866e6860bb7555d91c1f05f9215f15a60f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_literal_type1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b6b866e6860bb7555d91c1f05f9215f15a60f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_literal_type1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_literal_type1.C?ref=83b6b866e6860bb7555d91c1f05f9215f15a60f0", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/48771\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+\n+struct NonLiteral {\n+  NonLiteral();\n+  ~NonLiteral();\n+};\n+\n+static_assert(__is_literal_type(NonLiteral&), \"Error\");\n+static_assert(__is_literal_type(NonLiteral&&), \"Error\");"}]}