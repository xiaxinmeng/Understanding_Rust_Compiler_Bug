{"sha": "af7c3fe7aac03b20dd1b759eb1372ffd555d99b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY3YzNmZTdhYWMwM2IyMGRkMWI3NTllYjEzNzJmZmQ1NTVkOTliMQ==", "commit": {"author": {"name": "Yuri Rumyantsev", "email": "ysrumyan@gmail.com", "date": "2012-08-16T19:58:11Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-08-16T19:58:11Z"}, "message": "i386-protos.h (ix86_split_lea_for_addr): Add additional argument.\n\n2012-08-16  Yuri Rumyantsev  <ysrumyan@gmail.com>\n\n\t* config/i386/i386-protos.h (ix86_split_lea_for_addr) : Add\n\tadditional argument.\n\t* config/i386/i386.md (ix86_split_lea_for_addr) : Add\n\tadditional argument curr_insn.\n\t* config/i386/i386.c (ix86_split_lea_for_addr): Load base or index\n\tregister first, depending on their defintion distances.\n\t(ix86_lea_outperforms): Prefer LEA only if split cost exceeds\n\tAGU stall.\n\t(find_nearest_reg-def): New function. Find register with\n\tnearest definition.\n\nFrom-SVN: r190452", "tree": {"sha": "f5c3f42395f6a34ab000955bbebe2eb5f5a7317d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5c3f42395f6a34ab000955bbebe2eb5f5a7317d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1/comments", "author": {"login": "ysrumyan", "id": 44425612, "node_id": "MDQ6VXNlcjQ0NDI1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/44425612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysrumyan", "html_url": "https://github.com/ysrumyan", "followers_url": "https://api.github.com/users/ysrumyan/followers", "following_url": "https://api.github.com/users/ysrumyan/following{/other_user}", "gists_url": "https://api.github.com/users/ysrumyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysrumyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysrumyan/subscriptions", "organizations_url": "https://api.github.com/users/ysrumyan/orgs", "repos_url": "https://api.github.com/users/ysrumyan/repos", "events_url": "https://api.github.com/users/ysrumyan/events{/privacy}", "received_events_url": "https://api.github.com/users/ysrumyan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd1994918443858038c8cf5a0dafacae5b99df76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1994918443858038c8cf5a0dafacae5b99df76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd1994918443858038c8cf5a0dafacae5b99df76"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "5c50794cbdc6184df2cd7d1162022ccae07ede18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af7c3fe7aac03b20dd1b759eb1372ffd555d99b1", "patch": "@@ -1,3 +1,16 @@\n+2012-08-16  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\t* config/i386/i386-protos.h (ix86_split_lea_for_addr) : Add\n+\tadditional argument.\n+\t* config/i386/i386.md (ix86_split_lea_for_addr) : Add\n+\tadditional argument curr_insn.\n+\t* config/i386/i386.c (ix86_split_lea_for_addr): Load base or index\n+\tregister first, depending on their defintion distances.\n+\t(ix86_lea_outperforms): Prefer LEA only if split cost exceeds\n+\tAGU stall.\n+\t(find_nearest_reg-def): New function. Find register with\n+\tnearest definition.\n+\n 2012-08-16  Walter Lee  <walt@tilera.com>\n \n \t* config.gcc (tilegx-*-linux*): Add feedback.h.\n@@ -74,7 +87,7 @@\n \t* config/avr/t-avr: Replace occurrences of $(CC) with $(COMPILER).\n \t* config/avr/avr.c (avr_legitimize_reload_address): Add casts\n \tfor reload_type enums.\n-        (DEF_BUILTIN): Cast the icode to enum insn_code.\n+\t(DEF_BUILTIN): Cast the icode to enum insn_code.\n \n 2012-08-15  Segher Boessenkool  <segher@kernel.crashing.org>\n "}, {"sha": "29bd69a4715706dee0a70c32f78e6c180cdc3cc4", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=af7c3fe7aac03b20dd1b759eb1372ffd555d99b1", "patch": "@@ -95,7 +95,7 @@ extern bool ix86_binary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);\n extern bool ix86_avoid_lea_for_add (rtx, rtx[]);\n extern bool ix86_use_lea_for_mov (rtx, rtx[]);\n extern bool ix86_avoid_lea_for_addr (rtx, rtx[]);\n-extern void ix86_split_lea_for_addr (rtx[], enum machine_mode);\n+extern void ix86_split_lea_for_addr (rtx, rtx[], enum machine_mode);\n extern bool ix86_lea_for_add_ok (rtx, rtx[]);\n extern bool ix86_vec_interleave_v2df_operator_ok (rtx operands[3], bool high);\n extern bool ix86_dep_by_shift_count (const_rtx set_insn, const_rtx use_insn);"}, {"sha": "976bbb4514c5db4462e4e26d98d79e273952a499", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=af7c3fe7aac03b20dd1b759eb1372ffd555d99b1", "patch": "@@ -16942,9 +16942,9 @@ ix86_lea_outperforms (rtx insn, unsigned int regno0, unsigned int regno1,\n   dist_define += split_cost + IX86_LEA_PRIORITY;\n \n   /* If there is no use in memory addess then we just check\n-     that split cost does not exceed AGU stall.  */\n+     that split cost exceeds AGU stall.  */\n   if (dist_use < 0)\n-    return dist_define >= LEA_MAX_STALL;\n+    return dist_define > LEA_MAX_STALL;\n \n   /* If this insn has both backward non-agu dependence and forward\n      agu dependence, the one with short distance takes effect.  */\n@@ -17127,13 +17127,41 @@ ix86_emit_binop (enum rtx_code code, enum machine_mode mode,\n   emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, op, clob)));\n }\n \n+/* Return true if regno1 def is nearest to the insn.  */\n+\n+static bool\n+find_nearest_reg_def (rtx insn, int regno1, int regno2)\n+{\n+  rtx prev = insn;\n+  rtx start = BB_HEAD (BLOCK_FOR_INSN (insn));\n+\n+  if (insn == start)\n+    return false;\n+  while (prev && prev != start)\n+    {\n+      if (!INSN_P (prev) || !NONDEBUG_INSN_P (prev))\n+\t{\n+\t  prev = PREV_INSN (prev);\n+\t  continue;\n+\t}\n+      if (insn_defines_reg (regno1, INVALID_REGNUM, prev))\n+\treturn true;\n+      else if (insn_defines_reg (regno2, INVALID_REGNUM, prev))\n+\treturn false;\n+      prev = PREV_INSN (prev);\n+    }\n+\n+  /* None of the regs is defined in the bb.  */\n+  return false;\n+}\n+\n /* Split lea instructions into a sequence of instructions\n    which are executed on ALU to avoid AGU stalls.\n    It is assumed that it is allowed to clobber flags register\n    at lea position.  */\n \n void\n-ix86_split_lea_for_addr (rtx operands[], enum machine_mode mode)\n+ix86_split_lea_for_addr (rtx insn, rtx operands[], enum machine_mode mode)\n {\n   unsigned int regno0, regno1, regno2;\n   struct ix86_address parts;\n@@ -17220,8 +17248,22 @@ ix86_split_lea_for_addr (rtx operands[], enum machine_mode mode)\n \t    tmp = parts.base;\n \t  else\n \t    {\n-\t      emit_insn (gen_rtx_SET (VOIDmode, target, parts.base));\n-\t      tmp = parts.index;\n+\t      rtx tmp1;\n+\n+\t      /* Find better operand for SET instruction, depending\n+\t\t on which definition is farther from the insn.  */\n+\t      if (find_nearest_reg_def (insn, regno1, regno2))\n+\t\ttmp = parts.index, tmp1 = parts.base;\n+\t      else\n+\t\ttmp = parts.base, tmp1 = parts.index;\n+\n+\t      emit_insn (gen_rtx_SET (VOIDmode, target, tmp));\n+\n+\t      if (parts.disp && parts.disp != const0_rtx)\n+\t\tix86_emit_binop (PLUS, mode, target, parts.disp);\n+\n+\t      ix86_emit_binop (PLUS, mode, target, tmp1);\n+\t      return;\n \t    }\n \n \t  ix86_emit_binop (PLUS, mode, target, tmp);"}, {"sha": "7756832f2ebf5ef1bc7ad37d1fdbb13dfa83a471", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7c3fe7aac03b20dd1b759eb1372ffd555d99b1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=af7c3fe7aac03b20dd1b759eb1372ffd555d99b1", "patch": "@@ -5520,7 +5520,7 @@\n       || GET_CODE (operands[1]) == AND)\n     mode = SImode;\n \n-  ix86_split_lea_for_addr (operands, mode);\n+  ix86_split_lea_for_addr (curr_insn, operands, mode);\n   DONE;\n }\n   [(set_attr \"type\" \"lea\")"}]}