{"sha": "cb2446831a3f7a589aef485676004e33853dfcfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IyNDQ2ODMxYTNmN2E1ODlhZWY0ODU2NzYwMDRlMzM4NTNkZmNmYg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-11T18:38:12Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-11T18:38:12Z"}, "message": "Externalizable.java, [...]: Removed redundant modifiers.\n\n2003-10-11  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/Externalizable.java,\n\tjava/io/FileFilter.java,\n\tjava/io/FilePermission.java,\n\tjava/io/ObjectInput.java,\n\tjava/io/ObjectInputValidation.java,\n\tjava/io/ObjectOutput.java,\n\tjava/io/ObjectStreamClass.java,\n\tjava/io/ObjectStreamConstants.java,\n\tjava/io/Serializable.java:\n\tRemoved redundant modifiers.\n\nFrom-SVN: r72352", "tree": {"sha": "119115e7d7924c649aded11d02c0c80462db8bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/119115e7d7924c649aded11d02c0c80462db8bae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb2446831a3f7a589aef485676004e33853dfcfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2446831a3f7a589aef485676004e33853dfcfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb2446831a3f7a589aef485676004e33853dfcfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2446831a3f7a589aef485676004e33853dfcfb/comments", "author": null, "committer": null, "parents": [{"sha": "6a12e65c11749cb0d8c0b39402f09ac7f18a22cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a12e65c11749cb0d8c0b39402f09ac7f18a22cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a12e65c11749cb0d8c0b39402f09ac7f18a22cc"}], "stats": {"total": 142, "additions": 74, "deletions": 68}, "files": [{"sha": "20902409beff3c4fc66bfa0109ddd25d1a037323", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cb2446831a3f7a589aef485676004e33853dfcfb", "patch": "@@ -1,3 +1,16 @@\n+2003-10-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/Externalizable.java,\n+\tjava/io/FileFilter.java,\n+\tjava/io/FilePermission.java,\n+\tjava/io/ObjectInput.java,\n+\tjava/io/ObjectInputValidation.java,\n+\tjava/io/ObjectOutput.java,\n+\tjava/io/ObjectStreamClass.java,\n+\tjava/io/ObjectStreamConstants.java,\n+\tjava/io/Serializable.java:\n+\tRemoved redundant modifiers.\n+\n 2003-10-11  Ingo Proetel  <proetel@aicas.com>\n \n \t* java/rmi/server/RMIClassLoader.java: Identify cached classloaders by "}, {"sha": "09080a0583178fd20e58290cfb0bda8724b89578", "filename": "libjava/java/io/Externalizable.java", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FExternalizable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FExternalizable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FExternalizable.java?ref=cb2446831a3f7a589aef485676004e33853dfcfb", "patch": "@@ -60,7 +60,7 @@\n  */\n public interface Externalizable extends Serializable\n {\n-  static final long serialVersionUID = -282491828744381764L;\n+  long serialVersionUID = -282491828744381764L;\n \n   /**\n    * This method restores an object's state by reading in the instance data\n@@ -86,7 +86,7 @@ public interface Externalizable extends Serializable\n    * restored cannot be found\n    * @exception IOException If any other error occurs\n    */\n-  public abstract void readExternal(ObjectInput in) \n+  void readExternal(ObjectInput in) \n     throws ClassNotFoundException, IOException;\n \n   /**\n@@ -105,7 +105,5 @@ public abstract void readExternal(ObjectInput in)\n    *\n    * @exception IOException If an error occurs\n    */\n-  public abstract void writeExternal(ObjectOutput out) throws IOException;\n-\n-} // interface Externalizable\n-\n+  void writeExternal(ObjectOutput out) throws IOException;\n+}"}, {"sha": "916a31f2ee67f1d685cfde67bec8b94303bf5beb", "filename": "libjava/java/io/FileFilter.java", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FFileFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FFileFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileFilter.java?ref=cb2446831a3f7a589aef485676004e33853dfcfb", "patch": "@@ -52,7 +52,6 @@\n  */\n public interface FileFilter\n {\n-\n   /**\n    * This method determines whether or not a given pathname should be included\n    * in a pathname listing.\n@@ -62,7 +61,5 @@\n    * @return <code>true</code> if the path should be included in the list, \n    * <code>false</code> otherwise.\n    */\n-  public abstract boolean accept(File pathname);\n-\n-} // interface FileFilter\n-\n+  boolean accept(File pathname);\n+}"}, {"sha": "07b42e149a0aec75558d1ead622f54c6f25b6f2f", "filename": "libjava/java/io/FilePermission.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FFilePermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FFilePermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilePermission.java?ref=cb2446831a3f7a589aef485676004e33853dfcfb", "patch": "@@ -189,12 +189,15 @@ public boolean equals(Object o)\n   public boolean implies(Permission p) \n   {\n     FilePermission fp;\n+    \n     if(!(p instanceof FilePermission))\n       return false;\n+    \n     fp = (FilePermission)p;\n     \n     String f1 = getName();\n     String f2 = fp.getName();\n+    \n     if(f1.charAt(0) != File.separatorChar) \n       {\n         f1 = CURRENT_DIRECTORY + f1;\n@@ -204,7 +207,8 @@ public boolean implies(Permission p)\n         f2 = CURRENT_DIRECTORY + f2;\n       }\n     \n-    String sub1, sub2a, sub2b;\n+    String sub1;\n+    \n     switch(f1.charAt(f1.length() - 1)) \n       {\n         case '*':"}, {"sha": "f53294dce478c6f548cbc91049f2670a7fbe303b", "filename": "libjava/java/io/ObjectInput.java", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FObjectInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FObjectInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInput.java?ref=cb2446831a3f7a589aef485676004e33853dfcfb", "patch": "@@ -58,7 +58,7 @@ public interface ObjectInput extends DataInput\n     *\n     * @exception IOException If an error occurs\n     */\n-  public abstract int available() throws IOException;\n+  int available() throws IOException;\n \n   /**\n     * This method reading a byte of data from a stream.  It returns that byte\n@@ -69,7 +69,7 @@ public interface ObjectInput extends DataInput\n     *\n     * @exception IOException If an error occurs\n     */\n-  public abstract int read() throws IOException;\n+  int read() throws IOException;\n \n   /**\n     * This method reads raw bytes and stores them them a byte array buffer.\n@@ -83,7 +83,7 @@ public interface ObjectInput extends DataInput\n     *\n     * @exception IOException If an error occurs\n     */\n-  public abstract int read(byte[] buf) throws IOException;\n+  int read(byte[] buf) throws IOException;\n \n   /**\n     * This method reads raw bytes and stores them in a byte array buffer\n@@ -102,7 +102,7 @@ public interface ObjectInput extends DataInput\n     *\n     * @exception IOException If an error occurs\n     */\n-  public abstract int read(byte[] buf, int offset, int len) throws IOException;\n+  int read(byte[] buf, int offset, int len) throws IOException;\n \n   /**\n     * Reads an object instance and returns it.  If the class for the object\n@@ -115,7 +115,7 @@ public interface ObjectInput extends DataInput\n     * found\n     * @exception IOException If any other error occurs\n     */\n-  public abstract Object readObject() \n+  Object readObject() \n     throws ClassNotFoundException, IOException;\n \n   /**\n@@ -129,14 +129,12 @@ public abstract Object readObject()\n     *\n     * @exception IOException If an error occurs\n     */\n-  public abstract long skip(long numBytes) throws IOException;\n+  long skip(long numBytes) throws IOException;\n \n   /**\n     * This method closes the input source\n     *\n     * @exception IOException If an error occurs\n     */\n-  public abstract void close() throws IOException;\n-\n-} // interface ObjectInput\n-\n+  void close() throws IOException;\n+}"}, {"sha": "79fa13fab272110ccd398d5861f1a852ecb587d6", "filename": "libjava/java/io/ObjectInputValidation.java", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FObjectInputValidation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FObjectInputValidation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputValidation.java?ref=cb2446831a3f7a589aef485676004e33853dfcfb", "patch": "@@ -63,7 +63,5 @@\n     *\n     * @exception InvalidObjectException If the object is invalid\n     */\n-  public abstract void validateObject() throws InvalidObjectException;\n-\n-} // interface ObjectInputValidation\n-\n+  void validateObject() throws InvalidObjectException;\n+}"}, {"sha": "8c58334437a121023281d4111cb6183bc57178f4", "filename": "libjava/java/io/ObjectOutput.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FObjectOutput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FObjectOutput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutput.java?ref=cb2446831a3f7a589aef485676004e33853dfcfb", "patch": "@@ -57,7 +57,7 @@ public interface ObjectOutput extends DataOutput\n     *\n     * @exception IOException If an error occurs.\n     */\n-  public abstract void write(int b) throws IOException;\n+  void write(int b) throws IOException;\n \n   /**\n     * This method writes all the bytes in the specified byte array to the\n@@ -67,7 +67,7 @@ public interface ObjectOutput extends DataOutput\n     * \n     * @exception IOException If an error occurs.\n     */\n-  public abstract void write(byte[] buf) throws IOException;\n+  void write(byte[] buf) throws IOException;\n \n   /**\n     * This method writes <code>len</code> bytes from the specified array\n@@ -79,7 +79,7 @@ public interface ObjectOutput extends DataOutput\n     *\n     * @exception IOException If an error occurs.\n     */\n-  public abstract void write(byte[] buf, int offset, int len) \n+  void write(byte[] buf, int offset, int len) \n     throws IOException;\n \n   /**\n@@ -90,22 +90,22 @@ public abstract void write(byte[] buf, int offset, int len)\n     *\n     * @exception IOException If an error occurs\n     */\n-  public abstract void writeObject(Object obj) throws IOException;\n+  void writeObject(Object obj) throws IOException;\n \n   /**\n     * This method causes any buffered data to be flushed out to the underlying\n     * stream\n     *\n     * @exception IOException If an error occurs\n     */\n-  public abstract void flush() throws IOException;\n+  void flush() throws IOException;\n \n   /**\n     * This method closes the underlying stream.\n     *\n     * @exception IOException If an error occurs\n     */\n-  public abstract void close() throws IOException;\n+  void close() throws IOException;\n \n } // interface ObjectOutput\n "}, {"sha": "3a2ccfb8e9963653cf03c58aa8cf1e8275d08e9d", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=cb2446831a3f7a589aef485676004e33853dfcfb", "patch": "@@ -249,8 +249,6 @@ static ObjectStreamClass[] getObjectStreamClasses (Class clazz)\n   {\n     ObjectStreamClass osc = ObjectStreamClass.lookup (clazz);\n \n-    ObjectStreamClass[] ret_val;\n-\n     if (osc == null)\n       return new ObjectStreamClass[0];\n     else"}, {"sha": "f7cd597fa77d2bd8dc5e4085ed192aa0a6a37d51", "filename": "libjava/java/io/ObjectStreamConstants.java", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FObjectStreamConstants.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FObjectStreamConstants.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamConstants.java?ref=cb2446831a3f7a589aef485676004e33853dfcfb", "patch": "@@ -49,41 +49,41 @@\n public interface ObjectStreamConstants\n {\n   // FIXME: Javadoc comment these values.\n-  public final static int PROTOCOL_VERSION_1 = 1;\n-  public final static int PROTOCOL_VERSION_2 = 2;\n-\n-  final static short STREAM_MAGIC = (short)0xaced;\n-  final static short STREAM_VERSION = 5;\n-\n-  final static byte TC_NULL = (byte)112;            //0x70\n-  final static byte TC_REFERENCE = (byte)113;       //0x71\n-  final static byte TC_CLASSDESC = (byte)114;       //0x72\n-  final static byte TC_OBJECT = (byte)115;          //0x73\n-  final static byte TC_STRING = (byte)116;          //0x74\n-  final static byte TC_ARRAY = (byte)117;           //0x75\n-  final static byte TC_CLASS = (byte)118;           //0x76\n-  final static byte TC_BLOCKDATA = (byte)119;       //0x77\n-  final static byte TC_ENDBLOCKDATA = (byte)120;    //0x78\n-  final static byte TC_RESET = (byte)121;           //0x79\n-  final static byte TC_BLOCKDATALONG = (byte)122;   //0x7A\n-  final static byte TC_EXCEPTION = (byte)123;       //0x7B\n-  final static byte TC_LONGSTRING = (byte)124;      //0x7C\n-  final static byte TC_PROXYCLASSDESC = (byte)125;  //0x7D\n-\n-  final static byte TC_BASE = TC_NULL;\n-  final static byte TC_MAX = TC_PROXYCLASSDESC;\n-\n-  final static int baseWireHandle = 0x7e0000;\n-\n-  final static byte SC_WRITE_METHOD = 0x01;\n-  final static byte SC_SERIALIZABLE = 0x02;\n-  final static byte SC_EXTERNALIZABLE = 0x04;\n-  final static byte SC_BLOCK_DATA = 0x08;\n-\n-  final static SerializablePermission SUBSTITUTION_PERMISSION\n+  int PROTOCOL_VERSION_1 = 1;\n+  int PROTOCOL_VERSION_2 = 2;\n+\n+  short STREAM_MAGIC = (short)0xaced;\n+  short STREAM_VERSION = 5;\n+\n+  byte TC_NULL = (byte)112;            //0x70\n+  byte TC_REFERENCE = (byte)113;       //0x71\n+  byte TC_CLASSDESC = (byte)114;       //0x72\n+  byte TC_OBJECT = (byte)115;          //0x73\n+  byte TC_STRING = (byte)116;          //0x74\n+  byte TC_ARRAY = (byte)117;           //0x75\n+  byte TC_CLASS = (byte)118;           //0x76\n+  byte TC_BLOCKDATA = (byte)119;       //0x77\n+  byte TC_ENDBLOCKDATA = (byte)120;    //0x78\n+  byte TC_RESET = (byte)121;           //0x79\n+  byte TC_BLOCKDATALONG = (byte)122;   //0x7A\n+  byte TC_EXCEPTION = (byte)123;       //0x7B\n+  byte TC_LONGSTRING = (byte)124;      //0x7C\n+  byte TC_PROXYCLASSDESC = (byte)125;  //0x7D\n+\n+  byte TC_BASE = TC_NULL;\n+  byte TC_MAX = TC_PROXYCLASSDESC;\n+\n+  int baseWireHandle = 0x7e0000;\n+\n+  byte SC_WRITE_METHOD = 0x01;\n+  byte SC_SERIALIZABLE = 0x02;\n+  byte SC_EXTERNALIZABLE = 0x04;\n+  byte SC_BLOCK_DATA = 0x08;\n+\n+  SerializablePermission SUBSTITUTION_PERMISSION\n     = new SerializablePermission(\"enableSubstitution\");\n \n-  final static SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION\n+  SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION\n     = new SerializablePermission(\"enableSubclassImplementation\");\n }\n "}, {"sha": "b6c47c4ccbd4bb10dccbae4f74e72ce8b6ece09c", "filename": "libjava/java/io/Serializable.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FSerializable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb2446831a3f7a589aef485676004e33853dfcfb/libjava%2Fjava%2Fio%2FSerializable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FSerializable.java?ref=cb2446831a3f7a589aef485676004e33853dfcfb", "patch": "@@ -51,5 +51,5 @@\n   */\n public interface Serializable\n {\n-  static final long serialVersionUID = 1196656838076753133L;\n+  long serialVersionUID = 1196656838076753133L;\n } // interface Serializable"}]}