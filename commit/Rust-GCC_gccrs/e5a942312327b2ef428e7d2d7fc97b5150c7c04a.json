{"sha": "e5a942312327b2ef428e7d2d7fc97b5150c7c04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVhOTQyMzEyMzI3YjJlZjQyOGU3ZDJkN2ZjOTdiNTE1MGM3YzA0YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-10-08T00:32:51Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-10-08T00:32:51Z"}, "message": "re PR c/41182 (Revision 145254 caused ICE: tree check: expected integer_cst, have nop_expr in tree_int_cst_lt, at tree.c:5259)\n\n\tPR c/41182\n\t* c-common.c (c_fully_fold_internal): Strip nops from the result\n\tof recursive calls to c_fully_fold_internal.\n\t(c_wrap_maybe_const): New.\n\t(c_save_expr): Use c_wrap_maybe_const.\n\t* c-common.h (c_wrap_maybe_const): Declare.\n\t* c-typeck.c (build_conditional_expr, c_finish_stmt_expr,\n\tbuild_binary_op): Use c_wrap_maybe_const.\n\ntestsuite:\n\t* gcc.c-torture/compile/pr41182-1.c: New.\n\nFrom-SVN: r152548", "tree": {"sha": "fd81fa90e7923181957eb30dcbb964a2a29c5e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd81fa90e7923181957eb30dcbb964a2a29c5e9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5a942312327b2ef428e7d2d7fc97b5150c7c04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a942312327b2ef428e7d2d7fc97b5150c7c04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5a942312327b2ef428e7d2d7fc97b5150c7c04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1afab7bdc313af774b7bf5bf61872c6416e48ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1afab7bdc313af774b7bf5bf61872c6416e48ee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1afab7bdc313af774b7bf5bf61872c6416e48ee9"}], "stats": {"total": 91, "additions": 65, "deletions": 26}, "files": [{"sha": "885532b2fd8f2a21aed926276897391eb7e09873", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5a942312327b2ef428e7d2d7fc97b5150c7c04a", "patch": "@@ -1,3 +1,14 @@\n+2009-10-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/41182\n+\t* c-common.c (c_fully_fold_internal): Strip nops from the result\n+\tof recursive calls to c_fully_fold_internal.\n+\t(c_wrap_maybe_const): New.\n+\t(c_save_expr): Use c_wrap_maybe_const.\n+\t* c-common.h (c_wrap_maybe_const): Declare.\n+\t* c-typeck.c (build_conditional_expr, c_finish_stmt_expr,\n+\tbuild_binary_op): Use c_wrap_maybe_const.\n+\n 2009-10-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* real.c: Fix comment to reflect actual exponent size."}, {"sha": "fb2a84ebbf4666fb0ecdb52eb0984ecb8d658d94", "filename": "gcc/c-common.c", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=e5a942312327b2ef428e7d2d7fc97b5150c7c04a", "patch": "@@ -1219,6 +1219,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       op2 = TREE_OPERAND (expr, 2);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n \t\t\t\t   maybe_const_itself);\n+      STRIP_TYPE_NOPS (op0);\n       if (op0 != orig_op0)\n \tret = build3 (COMPONENT_REF, TREE_TYPE (expr), op0, op1, op2);\n       if (ret != expr)\n@@ -1235,8 +1236,10 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       op3 = TREE_OPERAND (expr, 3);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n \t\t\t\t   maybe_const_itself);\n+      STRIP_TYPE_NOPS (op0);\n       op1 = c_fully_fold_internal (op1, in_init, maybe_const_operands,\n \t\t\t\t   maybe_const_itself);\n+      STRIP_TYPE_NOPS (op1);\n       op1 = decl_constant_value_for_optimization (op1);\n       if (op0 != orig_op0 || op1 != orig_op1)\n \tret = build4 (ARRAY_REF, TREE_TYPE (expr), op0, op1, op2, op3);\n@@ -1293,6 +1296,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op1 = op1 = TREE_OPERAND (expr, 1);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n \t\t\t\t   maybe_const_itself);\n+      STRIP_TYPE_NOPS (op0);\n       if (code != MODIFY_EXPR\n \t  && code != PREDECREMENT_EXPR\n \t  && code != PREINCREMENT_EXPR\n@@ -1304,6 +1308,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       if (code != MODIFY_EXPR)\n \top1 = c_fully_fold_internal (op1, in_init, maybe_const_operands,\n \t\t\t\t     maybe_const_itself);\n+      STRIP_TYPE_NOPS (op1);\n       op1 = decl_constant_value_for_optimization (op1);\n       if (op0 != orig_op0 || op1 != orig_op1 || in_init)\n \tret = in_init\n@@ -1333,6 +1338,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op0 = op0 = TREE_OPERAND (expr, 0);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n \t\t\t\t   maybe_const_itself);\n+      STRIP_TYPE_NOPS (op0);\n       if (code != ADDR_EXPR && code != REALPART_EXPR && code != IMAGPART_EXPR)\n \top0 = decl_constant_value_for_optimization (op0);\n       if (op0 != orig_op0 || in_init)\n@@ -1372,12 +1378,14 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op0 = op0 = TREE_OPERAND (expr, 0);\n       orig_op1 = op1 = TREE_OPERAND (expr, 1);\n       op0 = c_fully_fold_internal (op0, in_init, &op0_const, &op0_const_self);\n+      STRIP_TYPE_NOPS (op0);\n \n       unused_p = (op0 == (code == TRUTH_ANDIF_EXPR\n \t\t\t  ? truthvalue_false_node\n \t\t\t  : truthvalue_true_node));\n       c_inhibit_evaluation_warnings += unused_p;\n       op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self);\n+      STRIP_TYPE_NOPS (op1);\n       c_inhibit_evaluation_warnings -= unused_p;\n \n       if (op0 != orig_op0 || op1 != orig_op1 || in_init)\n@@ -1409,12 +1417,15 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op2 = op2 = TREE_OPERAND (expr, 2);\n       op0 = c_fully_fold_internal (op0, in_init, &op0_const, &op0_const_self);\n \n+      STRIP_TYPE_NOPS (op0);\n       c_inhibit_evaluation_warnings += (op0 == truthvalue_false_node);\n       op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self);\n+      STRIP_TYPE_NOPS (op1);\n       c_inhibit_evaluation_warnings -= (op0 == truthvalue_false_node);\n \n       c_inhibit_evaluation_warnings += (op0 == truthvalue_true_node);\n       op2 = c_fully_fold_internal (op2, in_init, &op2_const, &op2_const_self);\n+      STRIP_TYPE_NOPS (op2);\n       c_inhibit_evaluation_warnings -= (op0 == truthvalue_true_node);\n \n       if (op0 != orig_op0 || op1 != orig_op1 || op2 != orig_op2)\n@@ -3790,6 +3801,31 @@ pointer_int_sum (location_t loc, enum tree_code resultcode,\n   return ret;\n }\n \f\n+/* Wrap a C_MAYBE_CONST_EXPR around an expression that is fully folded\n+   and if NON_CONST is known not to be permitted in an evaluated part\n+   of a constant expression.  */\n+\n+tree\n+c_wrap_maybe_const (tree expr, bool non_const)\n+{\n+  bool nowarning = TREE_NO_WARNING (expr);\n+  location_t loc = EXPR_LOCATION (expr);\n+\n+  /* This should never be called for C++.  */\n+  if (c_dialect_cxx ())\n+    gcc_unreachable ();\n+\n+  /* The result of folding may have a NOP_EXPR to set TREE_NO_WARNING.  */\n+  STRIP_TYPE_NOPS (expr);\n+  expr = build2 (C_MAYBE_CONST_EXPR, TREE_TYPE (expr), NULL, expr);\n+  C_MAYBE_CONST_EXPR_NON_CONST (expr) = non_const;\n+  if (nowarning)\n+    TREE_NO_WARNING (expr) = 1;\n+  protected_set_expr_location (expr, loc);\n+\n+  return expr;\n+}\n+\n /* Wrap a SAVE_EXPR around EXPR, if appropriate.  Like save_expr, but\n    for C folds the inside expression and wraps a C_MAYBE_CONST_EXPR\n    around the SAVE_EXPR if needed so that c_fully_fold does not need\n@@ -3804,10 +3840,7 @@ c_save_expr (tree expr)\n   expr = c_fully_fold (expr, false, &maybe_const);\n   expr = save_expr (expr);\n   if (!maybe_const)\n-    {\n-      expr = build2 (C_MAYBE_CONST_EXPR, TREE_TYPE (expr), NULL, expr);\n-      C_MAYBE_CONST_EXPR_NON_CONST (expr) = 1;\n-    }\n+    expr = c_wrap_maybe_const (expr, true);\n   return expr;\n }\n "}, {"sha": "61d52c870fb0ea118719f9432917d1f6a54c7f6c", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=e5a942312327b2ef428e7d2d7fc97b5150c7c04a", "patch": "@@ -792,6 +792,7 @@ extern tree c_build_bitfield_integer_type (unsigned HOST_WIDE_INT, int);\n extern bool decl_with_nonnull_addr_p (const_tree);\n extern tree c_fully_fold (tree, bool, bool *);\n extern tree decl_constant_value_for_optimization (tree);\n+extern tree c_wrap_maybe_const (tree, bool);\n extern tree c_save_expr (tree);\n extern tree c_common_truthvalue_conversion (location_t, tree);\n extern void c_apply_type_quals_to_decl (int, tree);"}, {"sha": "e7425a77d65e42727dbd4c303806bc77379a9129", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e5a942312327b2ef428e7d2d7fc97b5150c7c04a", "patch": "@@ -3940,17 +3940,9 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n \t\t\t\t     \"conditional expression\"));\n \t\t    }\n \t\t  if (!op1_maybe_const || TREE_CODE (op1) != INTEGER_CST)\n-\t\t    {\n-\t\t      op1 = build2 (C_MAYBE_CONST_EXPR, TREE_TYPE (op1),\n-\t\t\t\t    NULL, op1);\n-\t\t      C_MAYBE_CONST_EXPR_NON_CONST (op1) = !op1_maybe_const;\n-\t\t    }\n+\t\t    op1 = c_wrap_maybe_const (op1, !op1_maybe_const);\n \t\t  if (!op2_maybe_const || TREE_CODE (op2) != INTEGER_CST)\n-\t\t    {\n-\t\t      op2 = build2 (C_MAYBE_CONST_EXPR, TREE_TYPE (op2),\n-\t\t\t\t    NULL, op2);\n-\t\t      C_MAYBE_CONST_EXPR_NON_CONST (op2) = !op2_maybe_const;\n-\t\t    }\n+\t\t    op2 = c_wrap_maybe_const (op2, !op2_maybe_const);\n \t\t}\n \t    }\n \t}\n@@ -8669,8 +8661,7 @@ c_finish_stmt_expr (location_t loc, tree body)\n     {\n       /* Even if this looks constant, do not allow it in a constant\n \t expression.  */\n-      last = build2 (C_MAYBE_CONST_EXPR, TREE_TYPE (last), NULL_TREE, last);\n-      C_MAYBE_CONST_EXPR_NON_CONST (last) = 1;\n+      last = c_wrap_maybe_const (last, true);\n       /* Do not warn if the return value of a statement expression is\n \t unused.  */\n       TREE_NO_WARNING (last) = 1;\n@@ -9545,17 +9536,9 @@ build_binary_op (location_t location, enum tree_code code,\n \t      if (!in_late_binary_op)\n \t\t{\n \t\t  if (!op0_maybe_const || TREE_CODE (op0) != INTEGER_CST)\n-\t\t    {\n-\t\t      op0 = build2 (C_MAYBE_CONST_EXPR, TREE_TYPE (op0),\n-\t\t\t\t    NULL, op0);\n-\t\t      C_MAYBE_CONST_EXPR_NON_CONST (op0) = !op0_maybe_const;\n-\t\t    }\n+\t\t    op0 = c_wrap_maybe_const (op0, !op0_maybe_const);\n \t\t  if (!op1_maybe_const || TREE_CODE (op1) != INTEGER_CST)\n-\t\t    {\n-\t\t      op1 = build2 (C_MAYBE_CONST_EXPR, TREE_TYPE (op1),\n-\t\t\t\t    NULL, op1);\n-\t\t      C_MAYBE_CONST_EXPR_NON_CONST (op1) = !op1_maybe_const;\n-\t\t    }\n+\t\t    op1 = c_wrap_maybe_const (op1, !op1_maybe_const);\n \t\t}\n \t    }\n \t}"}, {"sha": "9b9b141b9f3066e8f03e3f25dbb43bb90627fc33", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5a942312327b2ef428e7d2d7fc97b5150c7c04a", "patch": "@@ -1,3 +1,8 @@\n+2009-10-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/41182\n+\t* gcc.c-torture/compile/pr41182-1.c: New.\n+\n 2009-10-07  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/variadic95.C: New."}, {"sha": "017174938b3bf0a8ebbafd4cb680c83e6ec258b7", "filename": "gcc/testsuite/gcc.c-torture/compile/pr41182-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41182-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a942312327b2ef428e7d2d7fc97b5150c7c04a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41182-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr41182-1.c?ref=e5a942312327b2ef428e7d2d7fc97b5150c7c04a", "patch": "@@ -0,0 +1,6 @@\n+typedef long unsigned int size_t;\n+int _lae_process_opts(char *pr, char *pe)\n+{ \n+  return (strlen (\"on\") < ((size_t) ((pe-&pr[2])>(strlen(\"on\"))                \n+                                     ? (pe-&pr[2]) : (strlen(\"on\")))));\n+}"}]}