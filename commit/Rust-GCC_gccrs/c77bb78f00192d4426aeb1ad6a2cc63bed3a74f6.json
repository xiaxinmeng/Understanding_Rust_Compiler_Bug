{"sha": "c77bb78f00192d4426aeb1ad6a2cc63bed3a74f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3YmI3OGYwMDE5MmQ0NDI2YWViMWFkNmEyY2M2M2JlZDNhNzRmNg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-01-15T23:23:48Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-01-15T23:23:48Z"}, "message": "graphite.c (scan_tree_for_params): On substractions negate all the coefficients of the term.\n\n2009-01-15  Sebastian Pop  <sebastian.pop@amd.com>\n\t    Tobias Grosser  <tobi.grosser@amd.com>\n\t    Jan Sjodin  <jan.sjodin@amd.com>\n\n\t* graphite.c (scan_tree_for_params): On substractions negate\n\tall the coefficients of the term.\n\t(clast_to_gcc_expression_red): New.  Handle reduction expressions\n\tof more than two operands.\n\t(clast_to_gcc_expression): Call clast_to_gcc_expression_red.\n\t(get_vdef_before_scop): Handle also the case of default definitions.\n\n\n\nCo-Authored-By: Jan Sjodin <jan.sjodin@amd.com>\nCo-Authored-By: Tobias Grosser <tobi.grosser@amd.com>\n\nFrom-SVN: r143415", "tree": {"sha": "4ae7a8138de8c5eab0a6c3a8742a3f4b93a75b29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ae7a8138de8c5eab0a6c3a8742a3f4b93a75b29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77bb78f00192d4426aeb1ad6a2cc63bed3a74f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77bb78f00192d4426aeb1ad6a2cc63bed3a74f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77bb78f00192d4426aeb1ad6a2cc63bed3a74f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77bb78f00192d4426aeb1ad6a2cc63bed3a74f6/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2712544dcf3e154674455f0143c3a5974011b61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2712544dcf3e154674455f0143c3a5974011b61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2712544dcf3e154674455f0143c3a5974011b61"}], "stats": {"total": 98, "additions": 47, "deletions": 51}, "files": [{"sha": "ffdd2e05381adcb21c646bfd5cd0adf9cb283d52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77bb78f00192d4426aeb1ad6a2cc63bed3a74f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77bb78f00192d4426aeb1ad6a2cc63bed3a74f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c77bb78f00192d4426aeb1ad6a2cc63bed3a74f6", "patch": "@@ -1,3 +1,14 @@\n+2009-01-15  Sebastian Pop  <sebastian.pop@amd.com>\n+\t    Tobias Grosser  <tobi.grosser@amd.com>\n+\t    Jan Sjodin  <jan.sjodin@amd.com>\n+\n+\t* graphite.c (scan_tree_for_params): On substractions negate\n+\tall the coefficients of the term.\n+\t(clast_to_gcc_expression_red): New.  Handle reduction expressions\n+\tof more than two operands.\n+\t(clast_to_gcc_expression): Call clast_to_gcc_expression_red.\n+\t(get_vdef_before_scop): Handle also the case of default definitions.\n+\n 2009-01-15  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* caller-save.c (add_used_regs_1, add_used_regs): New functions."}, {"sha": "08911290879486251565e744949c4b0d24e0ab66", "filename": "gcc/graphite.c", "status": "modified", "additions": 36, "deletions": 51, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77bb78f00192d4426aeb1ad6a2cc63bed3a74f6/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77bb78f00192d4426aeb1ad6a2cc63bed3a74f6/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=c77bb78f00192d4426aeb1ad6a2cc63bed3a74f6", "patch": "@@ -2698,13 +2698,11 @@ scan_tree_for_params (scop_p s, tree e, CloogMatrix *c, int r, Value k,\n \n     case MINUS_EXPR:\n       scan_tree_for_params (s, TREE_OPERAND (e, 0), c, r, k, subtract);\n-      value_oppose (k, k);\n-      scan_tree_for_params (s, TREE_OPERAND (e, 1), c, r, k, subtract);\n+      scan_tree_for_params (s, TREE_OPERAND (e, 1), c, r, k, !subtract);\n       break;\n \n     case NEGATE_EXPR:\n-      value_oppose (k, k);\n-      scan_tree_for_params (s, TREE_OPERAND (e, 0), c, r, k, subtract);\n+      scan_tree_for_params (s, TREE_OPERAND (e, 0), c, r, k, !subtract);\n       break;\n \n     case SSA_NAME:\n@@ -3717,8 +3715,35 @@ max_precision_type (tree e1, tree e2)\n   return TYPE_PRECISION (type1) > TYPE_PRECISION (type2) ? type1 : type2;\n }\n \n-/* Converts a Cloog AST expression E back to a GCC expression tree\n-   of type TYPE.  */\n+static tree\n+clast_to_gcc_expression (tree, struct clast_expr *, VEC (name_tree, heap) *,\n+\t\t\t loop_iv_stack);\n+\n+/* Converts a Cloog reduction expression R with reduction operation OP\n+   to a GCC expression tree of type TYPE.  PARAMS is a vector of\n+   parameters of the scop, and IVSTACK contains the stack of induction\n+   variables.  */\n+\n+static tree\n+clast_to_gcc_expression_red (tree type, enum tree_code op,\n+\t\t\t     struct clast_reduction *r,\n+\t\t\t     VEC (name_tree, heap) *params,\n+\t\t\t     loop_iv_stack ivstack)\n+{\n+  int i;\n+  tree res = clast_to_gcc_expression (type, r->elts[0], params, ivstack);\n+\n+  for (i = 1; i < r->n; i++)\n+    {\n+      tree t = clast_to_gcc_expression (type, r->elts[i], params, ivstack);\n+      res = fold_build2 (op, type, res, t);\n+    }\n+  return res;\n+}\n+\n+/* Converts a Cloog AST expression E back to a GCC expression tree of\n+   type TYPE.  PARAMS is a vector of parameters of the scop, and\n+   IVSTACK contains the stack of induction variables.  */\n \n static tree\n clast_to_gcc_expression (tree type, struct clast_expr *e,\n@@ -3764,54 +3789,13 @@ clast_to_gcc_expression (tree type, struct clast_expr *e,\n         switch (r->type)\n           {\n \t  case clast_red_sum:\n-\t    if (r->n == 1)\n-\t      return clast_to_gcc_expression (type, r->elts[0], params, ivstack);\n-\n-\t    else \n-\t      {\n-\t\ttree tl = clast_to_gcc_expression (type, r->elts[0], params, ivstack);\n-\t\ttree tr = clast_to_gcc_expression (type, r->elts[1], params, ivstack);\n-\n-\t\tgcc_assert (r->n >= 1\n-\t\t\t    && r->elts[0]->type == expr_term\n-\t\t\t    && r->elts[1]->type == expr_term);\n-\n-\t\treturn fold_build2 (PLUS_EXPR, type, tl, tr);\n-\t      }\n-\n-\t    break;\n+\t    return clast_to_gcc_expression_red (type, PLUS_EXPR, r, params, ivstack);\n \n \t  case clast_red_min:\n-\t    if (r->n == 1)\n-\t      return clast_to_gcc_expression (type, r->elts[0], params, ivstack);\n-\n-\t    else if (r->n == 2)\n-\t      {\n-\t\ttree tl = clast_to_gcc_expression (type, r->elts[0], params, ivstack);\n-\t\ttree tr = clast_to_gcc_expression (type, r->elts[1], params, ivstack);\n-\t\treturn fold_build2 (MIN_EXPR, type, tl, tr);\n-\t      }\n-\n-\t    else\n-\t      gcc_unreachable();\n-\n-\t    break;\n+\t    return clast_to_gcc_expression_red (type, MIN_EXPR, r, params, ivstack);\n \n \t  case clast_red_max:\n-\t    if (r->n == 1)\n-\t      return clast_to_gcc_expression (type, r->elts[0], params, ivstack);\n-\n-\t    else if (r->n == 2)\n-\t      {\n-\t\ttree tl = clast_to_gcc_expression (type, r->elts[0], params, ivstack);\n-\t\ttree tr = clast_to_gcc_expression (type, r->elts[1], params, ivstack);\n-\t\treturn fold_build2 (MAX_EXPR, type, tl, tr);\n-\t      }\n-\n-\t    else\n-\t      gcc_unreachable();\n-\n-\t    break;\n+\t    return clast_to_gcc_expression_red (type, MAX_EXPR, r, params, ivstack);\n \n \t  default:\n \t    gcc_unreachable ();\n@@ -5182,7 +5166,8 @@ get_vdef_before_scop (scop_p scop, tree name, sbitmap visited)\n   gimple def_stmt = SSA_NAME_DEF_STMT (name);\n   basic_block def_bb = gimple_bb (def_stmt);\n \n-  if (!bb_in_scop_p (def_bb, scop))\n+  if (!def_bb\n+      || !bb_in_scop_p (def_bb, scop))\n     return name;\n \n   if (TEST_BIT (visited, def_bb->index))"}]}