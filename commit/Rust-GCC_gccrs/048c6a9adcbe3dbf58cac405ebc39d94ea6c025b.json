{"sha": "048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ4YzZhOWFkY2JlM2RiZjU4Y2FjNDA1ZWJjMzlkOTRlYTZjMDI1Yg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-01-26T11:34:00Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-01-26T11:34:00Z"}, "message": "[ARC] Add support for reduced register file set\n\ngcc/\n2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * config/arc/arc-arches.def: Option mrf16 valid for all\n        architectures.\n        * config/arc/arc-c.def (__ARC_RF16__): New predefined macro.\n        * config/arc/arc-cpus.def (em_mini): New cpu with rf16 on.\n        * config/arc/arc-options.def (FL_RF16): Add mrf16 option.\n        * config/arc/arc-tables.opt: Regenerate.\n        * config/arc/arc.c (arc_conditional_register_usage): Handle\n        reduced register file case.\n        (arc_file_start): Set must have build attributes.\n        * config/arc/arc.h (MAX_ARC_PARM_REGS): Conditional define using\n        mrf16 option value.\n        * config/arc/arc.opt (mrf16): Add new option.\n        * config/arc/elf.h (ATTRIBUTE_PCS): Define.\n        * config/arc/genmultilib.awk: Handle new mrf16 option.\n        * config/arc/linux.h (ATTRIBUTE_PCS): Define.\n        * config/arc/t-multilib: Regenerate.\n        * doc/invoke.texi (ARC Options): Document mrf16 option.\n\nlibgcc/\n2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * config/arc/lib1funcs.S (__udivmodsi4): Use safe version for RF16\n        option.\n        (__divsi3): Use RF16 safe registers.\n        (__modsi3): Likewise.\n\nFrom-SVN: r257083", "tree": {"sha": "a293830dce49d551376add81e58f0ef3074906b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a293830dce49d551376add81e58f0ef3074906b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7778a1ad1fa10f5202ec65838d1d91a0261ce95c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7778a1ad1fa10f5202ec65838d1d91a0261ce95c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7778a1ad1fa10f5202ec65838d1d91a0261ce95c"}], "stats": {"total": 128, "additions": 108, "deletions": 20}, "files": [{"sha": "f4f61feaca0c30b8ef1586557122956df2116bc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -1,3 +1,23 @@\n+2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-arches.def: Option mrf16 valid for all\n+\tarchitectures.\n+\t* config/arc/arc-c.def (__ARC_RF16__): New predefined macro.\n+\t* config/arc/arc-cpus.def (em_mini): New cpu with rf16 on.\n+\t* config/arc/arc-options.def (FL_RF16): Add mrf16 option.\n+\t* config/arc/arc-tables.opt: Regenerate.\n+\t* config/arc/arc.c (arc_conditional_register_usage): Handle\n+\treduced register file case.\n+\t(arc_file_start): Set must have build attributes.\n+\t* config/arc/arc.h (MAX_ARC_PARM_REGS): Conditional define using\n+\tmrf16 option value.\n+\t* config/arc/arc.opt (mrf16): Add new option.\n+\t* config/arc/elf.h (ATTRIBUTE_PCS): Define.\n+\t* config/arc/genmultilib.awk: Handle new mrf16 option.\n+\t* config/arc/linux.h (ATTRIBUTE_PCS): Define.\n+\t* config/arc/t-multilib: Regenerate.\n+\t* doc/invoke.texi (ARC Options): Document mrf16 option.\n+\n 2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc-protos.h: Add arc_is_secure_call_p proto."}, {"sha": "67dcb23c385d13ef38fa04fd83c5a2788dffa01f", "filename": "gcc/config/arc/arc-arches.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-arches.def?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -40,15 +40,15 @@\n \n ARC_ARCH (\"arcem\", em, FL_MPYOPT_1_6 | FL_DIVREM | FL_CD | FL_NORM\t\\\n \t  | FL_BS | FL_SWAP | FL_FPUS | FL_SPFP | FL_DPFP\t\t\\\n-\t  | FL_SIMD | FL_FPUDA | FL_QUARK, 0)\n+\t  | FL_SIMD | FL_FPUDA | FL_QUARK | FL_RF16, 0)\n ARC_ARCH (\"archs\", hs, FL_MPYOPT_7_9 | FL_DIVREM | FL_NORM | FL_CD\t\\\n \t  | FL_ATOMIC | FL_LL64 | FL_BS | FL_SWAP\t\t\t\\\n-\t  | FL_FPUS | FL_FPUD,\t\t\t\t\t\t\\\n+\t  | FL_FPUS | FL_FPUD | FL_RF16,\t\t\t\t\\\n \t  FL_CD | FL_ATOMIC | FL_BS | FL_NORM | FL_SWAP)\n ARC_ARCH (\"arc6xx\", 6xx, FL_BS | FL_NORM | FL_SWAP | FL_MUL64 | FL_MUL32x16 \\\n-\t  | FL_SPFP | FL_ARGONAUT | FL_DPFP, 0)\n+\t  | FL_SPFP | FL_ARGONAUT | FL_DPFP | FL_RF16, 0)\n ARC_ARCH (\"arc700\", 700, FL_ATOMIC | FL_BS | FL_NORM | FL_SWAP | FL_EA \\\n-\t  | FL_SIMD | FL_SPFP | FL_ARGONAUT | FL_DPFP,\t\t       \\\n+\t  | FL_SIMD | FL_SPFP | FL_ARGONAUT | FL_DPFP | FL_RF16,       \\\n \t  FL_BS | FL_NORM | FL_SWAP)\n \n /* Local Variables: */"}, {"sha": "04cce68fe8aeb6aaae788c5c1058be4c276b49e2", "filename": "gcc/config/arc/arc-c.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc-c.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc-c.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-c.def?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -28,6 +28,7 @@ ARC_C_DEF (\"__ARC_NORM__\",\tTARGET_NORM)\n ARC_C_DEF (\"__ARC_MUL64__\",\tTARGET_MUL64_SET)\n ARC_C_DEF (\"__ARC_MUL32BY16__\", TARGET_MULMAC_32BY16_SET)\n ARC_C_DEF (\"__ARC_SIMD__\",\tTARGET_SIMD_SET)\n+ARC_C_DEF (\"__ARC_RF16__\",\tTARGET_RF16)\n ARC_C_DEF (\"__ARC_UNALIGNED__\", !STRICT_ALIGNMENT)\n \n ARC_C_DEF (\"__ARC_BARREL_SHIFTER__\", TARGET_BARREL_SHIFTER)"}, {"sha": "1fce81f6933b7cb73500528a2de36cd3400dea27", "filename": "gcc/config/arc/arc-cpus.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-cpus.def?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -46,6 +46,7 @@\n    TUNE\t  Tune value for the given configuration, otherwise NONE.  */\n \n ARC_CPU (em,\t    em, 0, NONE)\n+ARC_CPU (em_mini,   em, FL_RF16, NONE)\n ARC_CPU (arcem,\t    em, FL_MPYOPT_2|FL_CD|FL_BS, NONE)\n ARC_CPU (em4,\t    em, FL_CD, NONE)\n ARC_CPU (em4_dmips, em, FL_MPYOPT_2|FL_CD|FL_DIVREM|FL_NORM|FL_SWAP|FL_BS, NONE)"}, {"sha": "61ecd1de1504395d14d762e75c10ec93bb3a99e0", "filename": "gcc/config/arc/arc-options.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc-options.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc-options.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-options.def?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -60,7 +60,7 @@\n ARC_OPT (FL_CD,\t      (1ULL << 0), MASK_CODE_DENSITY,\t   \"code density\")\n ARC_OPT (FL_DIVREM,   (1ULL << 1), MASK_DIVREM,\t\t   \"div/rem\")\n ARC_OPT (FL_NORM,     (1ULL << 2), MASK_NORM_SET,\t   \"norm\")\n-\n+ARC_OPT (FL_RF16,     (1ULL << 3), MASK_RF16,              \"rf16\")\n ARC_OPT (FL_ATOMIC,   (1ULL << 4), MASK_ATOMIC,\t\t   \"atomic\")\n ARC_OPT (FL_LL64,     (1ULL << 5), MASK_LL64,\t\t   \"double load/store\")\n ARC_OPT (FL_BS,\t      (1ULL << 6), MASK_BARREL_SHIFTER,\t   \"barrel shifter\")"}, {"sha": "3b17b3de7d5f2cb94851bf2df504d49599fc41a4", "filename": "gcc/config/arc/arc-tables.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-tables.opt?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -27,6 +27,9 @@ Known ARC CPUs (for use with the -mcpu= option):\n EnumValue\n Enum(processor_type) String(em) Value(PROCESSOR_em)\n \n+EnumValue\n+Enum(processor_type) String(em_mini) Value(PROCESSOR_em_mini)\n+\n EnumValue\n Enum(processor_type) String(arcem) Value(PROCESSOR_arcem)\n "}, {"sha": "fd10d0146a55d08fce1274e5a85afa31188d3e37", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -1781,6 +1781,19 @@ arc_conditional_register_usage (void)\n \treg_alloc_order [i] = i;\n     }\n \n+  /* Reduced configuration: don't use r4-r9, r16-r25.  */\n+  if (TARGET_RF16)\n+    {\n+      for (i = 4; i <= 9; i++)\n+\t{\n+\t  fixed_regs[i] = call_used_regs[i] = 1;\n+\t}\n+      for (i = 16; i <= 25; i++)\n+\t{\n+\t  fixed_regs[i] = call_used_regs[i] = 1;\n+\t}\n+    }\n+\n   for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n     if (!call_used_regs[regno])\n       CLEAR_HARD_REG_BIT (reg_class_contents[SIBCALL_REGS], regno);\n@@ -5183,6 +5196,20 @@ static void arc_file_start (void)\n {\n   default_file_start ();\n   fprintf (asm_out_file, \"\\t.cpu %s\\n\", arc_cpu_string);\n+\n+  /* Set some want to have build attributes.  */\n+  asm_fprintf (asm_out_file, \"\\t.arc_attribute Tag_ARC_PCS_config, %d\\n\",\n+\t       ATTRIBUTE_PCS);\n+  asm_fprintf (asm_out_file, \"\\t.arc_attribute Tag_ARC_ABI_rf16, %d\\n\",\n+\t       TARGET_RF16 ? 1 : 0);\n+  asm_fprintf (asm_out_file, \"\\t.arc_attribute Tag_ARC_ABI_pic, %d\\n\",\n+\t       flag_pic ? 2 : 0);\n+  asm_fprintf (asm_out_file, \"\\t.arc_attribute Tag_ARC_ABI_tls, %d\\n\",\n+\t       (arc_tp_regno != -1) ? 1 : 0);\n+  asm_fprintf (asm_out_file, \"\\t.arc_attribute Tag_ARC_ABI_sda, %d\\n\",\n+\t       TARGET_NO_SDATA_SET ? 0 : 2);\n+  asm_fprintf (asm_out_file, \"\\t.arc_attribute Tag_ARC_ABI_exceptions, %d\\n\",\n+\t       TARGET_OPTFPE ? 1 : 0);\n }\n \n /* Implement `TARGET_ASM_FILE_END'.  */"}, {"sha": "38021123c0d6c8414fbb4b0549ba064cc57bbc6c", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -727,7 +727,7 @@ arc_return_addr_rtx(COUNT,FRAME)\n   ((CUM) = 0)\n \n /* The number of registers used for parameter passing.  Local to this file.  */\n-#define MAX_ARC_PARM_REGS 8\n+#define MAX_ARC_PARM_REGS (TARGET_RF16 ? 4 : 8)\n \n /* 1 if N is a possible register number for function argument passing.  */\n #define FUNCTION_ARG_REGNO_P(N) \\"}, {"sha": "bc11ca1ffe619d5ec90664c9727f7a25c3213617", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -523,3 +523,7 @@ Enum(arc_lpc) String(28) Value(28)\n \n EnumValue\n Enum(arc_lpc) String(32) Value(32)\n+\n+mrf16\n+Target Report Mask(RF16)\n+Enable 16-entry register file."}, {"sha": "43ced3b720f1d622bafa1e060627088d58dede58", "filename": "gcc/config/arc/elf.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Felf.h?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -67,5 +67,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_AUTO_MODIFY_REG_DEFAULT\n #define TARGET_AUTO_MODIFY_REG_DEFAULT 1\n \n+/* Build attribute: procedure call standard.  */\n+#undef ATTRIBUTE_PCS\n+#define ATTRIBUTE_PCS 2\n+\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END arc_file_end"}, {"sha": "785007e7efa995b890ec320fde38bcf16d50be8b", "filename": "gcc/config/arc/genmultilib.awk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Fgenmultilib.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Fgenmultilib.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fgenmultilib.awk?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -130,6 +130,8 @@ BEGIN {\n \t    line = line \"/spfp\"\n \t  else if (cpu_flg[i] == \"FL_DPFP\")\n \t    line = line \"/dpfp\"\n+\t  else if (cpu_flg[i] == \"FL_RF16\")\n+\t    line = line \"/mrf16\"\n \t  else\n \t    {\n \t      print \"Don't know the flag \" cpu_flg[i] > \"/dev/stderr\""}, {"sha": "4e87dfe3ac131da703666d205ac74ef8850022e3", "filename": "gcc/config/arc/linux.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Flinux.h?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -100,3 +100,12 @@ along with GCC; see the file COPYING3.  If not see\n #undef LINK_EH_SPEC\n #define LINK_EH_SPEC \"--eh-frame-hdr\"\n #endif\n+\n+#undef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC \"\\\n+   %{pthread:-D_REENTRANT} \\\n+\"\n+\n+/* Build attribute: procedure call standard.  */\n+#undef ATTRIBUTE_PCS\n+#define ATTRIBUTE_PCS 3"}, {"sha": "d9ab0ca1da3cfdd1c96cc28a9f4ecddacedeee9b", "filename": "gcc/config/arc/t-multilib", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Ft-multilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fconfig%2Farc%2Ft-multilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-multilib?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -21,9 +21,9 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-MULTILIB_OPTIONS = mcpu=em/mcpu=arcem/mcpu=em4/mcpu=em4_dmips/mcpu=em4_fpus/mcpu=em4_fpuda/mcpu=quarkse_em/mcpu=hs/mcpu=archs/mcpu=hs34/mcpu=hs38/mcpu=hs38_linux/mcpu=arc600/mcpu=arc600_norm/mcpu=arc600_mul64/mcpu=arc600_mul32x16/mcpu=arc601/mcpu=arc601_norm/mcpu=arc601_mul64/mcpu=arc601_mul32x16/mcpu=arc700/mcpu=nps400\n+MULTILIB_OPTIONS = mcpu=em/mcpu=em_mini/mcpu=arcem/mcpu=em4/mcpu=em4_dmips/mcpu=em4_fpus/mcpu=em4_fpuda/mcpu=quarkse_em/mcpu=hs/mcpu=archs/mcpu=hs34/mcpu=hs38/mcpu=hs38_linux/mcpu=hs4x/mcpu=hs4xd/mcpu=arc600/mcpu=arc600_norm/mcpu=arc600_mul64/mcpu=arc600_mul32x16/mcpu=arc601/mcpu=arc601_norm/mcpu=arc601_mul64/mcpu=arc601_mul32x16/mcpu=arc700/mcpu=nps400\n \n-MULTILIB_DIRNAMES = em arcem em4 em4_dmips em4_fpus em4_fpuda quarkse_em hs archs hs34 hs38 hs38_linux arc600 arc600_norm arc600_mul64 arc600_mul32x16 arc601 arc601_norm arc601_mul64 arc601_mul32x16 arc700 nps400\n+MULTILIB_DIRNAMES = em em_mini arcem em4 em4_dmips em4_fpus em4_fpuda quarkse_em hs archs hs34 hs38 hs38_linux hs4x hs4xd arc600 arc600_norm arc600_mul64 arc600_mul32x16 arc601 arc601_norm arc601_mul64 arc601_mul32x16 arc700 nps400\n \n # Aliases:\n MULTILIB_MATCHES  = mcpu?arc600=mcpu?ARC600"}, {"sha": "c07dd062490824582619160d479da777c3d8fc6b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -628,7 +628,7 @@ Objective-C and Objective-C++ Dialects}.\n -mmixed-code  -mq-class  -mRcq  -mRcw  -msize-level=@var{level} @gol\n -mtune=@var{cpu}  -mmultcost=@var{num} @gol\n -munalign-prob-threshold=@var{probability}  -mmpy-option=@var{multo} @gol\n--mdiv-rem  -mcode-density  -mll64  -mfpu=@var{fpu}}\n+-mdiv-rem  -mcode-density  -mll64  -mfpu=@var{fpu} -mrf16}\n \n @emph{ARM Options}\n @gccoptlist{-mapcs-frame  -mno-apcs-frame @gol\n@@ -14963,6 +14963,10 @@ instructions enabled.\n @item nps400\n Compile for ARC 700 on NPS400 chip.\n \n+@item em_mini\n+Compile for ARC EM minimalist configuration featuring reduced register\n+set.\n+\n @end table\n \n @item -mdpfp\n@@ -15221,6 +15225,12 @@ specified, the compiler and run-time library might continue to use the\n loop mechanism for various needs.  This option defines macro\n @code{__ARC_LPC_WIDTH__} with the value of @var{width}.\n \n+@item -mrf16\n+@opindex mrf16\n+This option instructs the compiler to generate code for a 16-entry\n+register file.  This option defines the @code{__ARC_RF16__}\n+preprocessor macro.\n+\n @end table\n \n The following options are passed through to the assembler, and also"}, {"sha": "79c79e8c31c52d1b207b0b2a52334f6e7ff5de38", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -1,3 +1,10 @@\n+2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/lib1funcs.S (__udivmodsi4): Use safe version for RF16\n+\toption.\n+\t(__divsi3): Use RF16 safe registers.\n+\t(__modsi3): Likewise.\n+\n 2018-01-23  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/ieee754-df.S (__addsf3, __subsf3, __mulsf3)"}, {"sha": "9a62602261205ff93a971156fe84d98b1f8cd7e7", "filename": "libgcc/config/arc/lib1funcs.S", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/libgcc%2Fconfig%2Farc%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/048c6a9adcbe3dbf58cac405ebc39d94ea6c025b/libgcc%2Fconfig%2Farc%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Flib1funcs.S?ref=048c6a9adcbe3dbf58cac405ebc39d94ea6c025b", "patch": "@@ -370,7 +370,7 @@ SYM(__udivmodsi4):\n \tmov_s\tr0,1\n \tj_s.d\t[blink]\n \tmov.c\tr0,0\n-#elif !defined (__OPTIMIZE_SIZE__)\n+#elif !defined (__OPTIMIZE_SIZE__) && !defined (__ARC_RF16__)\n #if defined (__ARC_NORM__) && defined (__ARC_BARREL_SHIFTER__)\n \tlsr_s r2,r0\n \tbrhs.d r1,r2,.Lret0_3\n@@ -509,14 +509,14 @@ SYM(__udivsi3):\n #ifndef __ARC_EA__\n SYM(__divsi3):\n \t/* A5 / ARC60? */\n-\tmov r7,blink\n-\txor r6,r0,r1\n+\tmov r12,blink\n+\txor r11,r0,r1\n \tabs_s r0,r0\n \tbl.d @SYM(__udivmodsi4)\n-\t abs_s r1,r1\n-\ttst r6,r6\n-\tj.d [r7]\n-\t neg.mi r0,r0\n+\tabs_s r1,r1\n+\ttst r11,r11\n+\tj.d [r12]\n+\tneg.mi r0,r0\n #else \t/* !ifndef __ARC_EA__ */\n \t;; We can use the abs, norm, divaw and mpy instructions for ARC700\n #define MULDIV\n@@ -913,14 +913,14 @@ SYM(__modsi3):\n #ifndef __ARC_EA__\n \t/* A5 / ARC60? */\n \tmov_s r12,blink\n-\tmov_s r6,r0\n+\tmov_s r11,r0\n \tabs_s r0,r0\n \tbl.d @SYM(__udivmodsi4)\n-\t abs_s r1,r1\n-\ttst r6,r6\n+\tabs_s r1,r1\n+\ttst r11,r11\n \tneg_s r0,r1\n \tj_s.d [r12]\n-\t mov.pl r0,r1\n+\tmov.pl r0,r1\n #else /* __ARC_EA__ */\n \tabs_s\tr2,r1\n \tnorm.f\tr4,r0"}]}