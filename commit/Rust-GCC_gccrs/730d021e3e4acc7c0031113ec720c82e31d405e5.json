{"sha": "730d021e3e4acc7c0031113ec720c82e31d405e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMwZDAyMWUzZTRhY2M3YzAwMzExMTNlYzcyMGM4MmUzMWQ0MDVlNQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-06-30T18:54:48Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-06-30T18:54:48Z"}, "message": "Fix IEEE 128-bit min/max test.\n\nThis patch fixes the float128-minmax.c test so that it can accommodate the\ngeneration of xsmincqp and xsmaxcqp instructions on power10.  I changed the\neffective target from 'float128' to 'ppc_float128_hw', since this needs the\nIEEE 128-bit float hardware support.  Changing to use 'ppc_float128_hw' allows\nthe 'lp64' test to be dropped.  The 'lp64' test originally was needed because\nbig endian 32-bit code cannot enable the IEEE 128-bit floating point\ninstructions.\n\ngcc/testsuite/\n2021-06-30  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* gcc.target/powerpc/float128-minmax.c: Adjust expected code for\n\tpower10.\n\t* lib/target-supports.exp (check_effective_target_has_arch_pwr10):\n\tNew.", "tree": {"sha": "b77b835c7e872bfdcc537a4c36c84114bb1e42da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b77b835c7e872bfdcc537a4c36c84114bb1e42da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/730d021e3e4acc7c0031113ec720c82e31d405e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730d021e3e4acc7c0031113ec720c82e31d405e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730d021e3e4acc7c0031113ec720c82e31d405e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730d021e3e4acc7c0031113ec720c82e31d405e5/comments", "author": null, "committer": null, "parents": [{"sha": "c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c28e1d288ab727de6eb493e1aa2eadf5d5eef3ab"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "ef8f729d9c288f5c1c9c7172756f2530b91c4580", "filename": "gcc/testsuite/gcc.target/powerpc/float128-minmax.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730d021e3e4acc7c0031113ec720c82e31d405e5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-minmax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730d021e3e4acc7c0031113ec720c82e31d405e5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-minmax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-minmax.c?ref=730d021e3e4acc7c0031113ec720c82e31d405e5", "patch": "@@ -1,6 +1,4 @@\n-/* { dg-do compile { target lp64 } } */\n-/* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-require-effective-target float128 } */\n+/* { dg-require-effective-target ppc_float128_hw } */\n /* { dg-options \"-mpower9-vector -O2 -ffast-math\" } */\n \n #ifndef TYPE\n@@ -12,5 +10,8 @@\n TYPE f128_min (TYPE a, TYPE b) { return __builtin_fminf128 (a, b); }\n TYPE f128_max (TYPE a, TYPE b) { return __builtin_fmaxf128 (a, b); }\n \n-/* { dg-final { scan-assembler     {\\mxscmpuqp\\M} } } */\n-/* { dg-final { scan-assembler-not {\\mbl\\M}       } } */\n+/* Adjust code power10 which has native min/max instructions.  */\n+/* { dg-final { scan-assembler-times {\\mxscmpuqp\\M} 2 { target { ! has_arch_pwr10 } } } } */\n+/* { dg-final { scan-assembler-times {\\mxsmincqp\\M} 1 { target has_arch_pwr10 } } } */\n+/* { dg-final { scan-assembler-times {\\mxsmaxcqp\\M} 1 { target has_arch_pwr10 } } } */\n+/* { dg-final { scan-assembler-not {\\mbl\\M} } } */"}, {"sha": "789723fb287e1529896936ed8b9efbec00e00fe6", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730d021e3e4acc7c0031113ec720c82e31d405e5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730d021e3e4acc7c0031113ec720c82e31d405e5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=730d021e3e4acc7c0031113ec720c82e31d405e5", "patch": "@@ -6127,6 +6127,16 @@ proc check_effective_target_has_arch_pwr9 { } {\n \t}]\n }\n \n+proc check_effective_target_has_arch_pwr10 { } {\n+\treturn [check_no_compiler_messages arch_pwr10 assembly {\n+\t\t#ifndef _ARCH_PWR10\n+\t\t#error does not have power10 support.\n+\t\t#else\n+\t\t/* \"has power10 support\" */\n+\t\t#endif\n+\t}]\n+}\n+\n # Return 1 if this is a PowerPC target supporting -mcpu=power10.\n # Limit this to 64-bit linux systems for now until other targets support\n # power10."}]}