{"sha": "a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTliNDM3ODFkYmMwYzM4ZWEzMzA2MmNkOTY4MjVkZWZiY2IxY2EyZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-05-08T11:58:25Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-05-08T11:58:25Z"}, "message": "re PR fortran/29397 (Constant logical expression with parameter array)\n\n2007-05-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/29397\n\tPR fortran/29400\n\t* decl.c (add_init_expr_to_sym): Expand a scalar initializer\n\tfor a parameter array into an array expression with the right\n\tshape.\n\t* array.c (spec_dimen_size): Remove static attribute.\n\t* gfortran.h : Prototype for spec_dimen_size.\n\n2007-05-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/29397\n\t* gfortran.dg/parameter_array_init_1.f90: New test.\n\n\tPR fortran/29400\n\t* gfortran.dg/parameter_array_init_2.f90: New test.\n\nFrom-SVN: r124541", "tree": {"sha": "51128533ef6fb2920b355241338a655d8bf897aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51128533ef6fb2920b355241338a655d8bf897aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/comments", "author": null, "committer": null, "parents": [{"sha": "a6d99bb44a3fd7c3bcfb402dc89ae7b3979073c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d99bb44a3fd7c3bcfb402dc89ae7b3979073c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6d99bb44a3fd7c3bcfb402dc89ae7b3979073c0"}], "stats": {"total": 97, "additions": 95, "deletions": 2}, "files": [{"sha": "7a145fa2d4947163fd201b44bfe193332090584f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "patch": "@@ -1,3 +1,13 @@\n+2007-05-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29397\n+\tPR fortran/29400\n+\t* decl.c (add_init_expr_to_sym): Expand a scalar initializer\n+\tfor a parameter array into an array expression with the right\n+\tshape.\n+\t* array.c (spec_dimen_size): Remove static attribute.\n+\t* gfortran.h : Prototype for spec_dimen_size.\n+\n 2007-05-07  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31399"}, {"sha": "9359624efec4c9dce7dda2fceba34be5dd19ddb5", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "patch": "@@ -1714,7 +1714,7 @@ gfc_get_array_element (gfc_expr *array, int element)\n /* Get the size of single dimension of an array specification.  The\n    array is guaranteed to be one dimensional.  */\n \n-static try\n+try\n spec_dimen_size (gfc_array_spec *as, int dimen, mpz_t *result)\n {\n   if (as == NULL)"}, {"sha": "0071f9056111ad7547e2825b2ec496d072a9cda2", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "patch": "@@ -974,7 +974,44 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp,\n \n       /* Add initializer.  Make sure we keep the ranks sane.  */\n       if (sym->attr.dimension && init->rank == 0)\n-\tinit->rank = sym->as->rank;\n+\t{\n+\t  mpz_t size;\n+\t  gfc_expr *array;\n+\t  gfc_constructor *c;\n+\t  int n;\n+\t  if (sym->attr.flavor == FL_PARAMETER\n+\t\t&& init->expr_type == EXPR_CONSTANT\n+\t\t&& spec_size (sym->as, &size) == SUCCESS\n+\t\t&& mpz_cmp_si (size, 0) > 0)\n+\t    {\n+\t      array = gfc_start_constructor (init->ts.type, init->ts.kind,\n+\t\t\t\t\t     &init->where);\n+\n+\t      array->value.constructor = c = NULL;\n+\t      for (n = 0; n < (int)mpz_get_si (size); n++)\n+\t\t{\n+\t\t  if (array->value.constructor == NULL)\n+\t\t    {\n+\t\t      array->value.constructor = c = gfc_get_constructor ();\n+\t\t      c->expr = init;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      c->next = gfc_get_constructor ();\n+\t\t      c = c->next;\n+\t\t      c->expr = gfc_copy_expr (init);\n+\t\t    }\n+\t\t}\n+\n+\t      array->shape = gfc_get_shape (sym->as->rank);\n+\t      for (n = 0; n < sym->as->rank; n++)\n+\t\tspec_dimen_size (sym->as, n, &array->shape[n]);\n+\n+\t      init = array;\n+\t      mpz_clear (size);\n+\t    }\n+\t  init->rank = sym->as->rank;\n+\t}\n \n       sym->value = init;\n       *initp = NULL;"}, {"sha": "2030ec29bb286d7752a90c0e5cfbbe4f85ecbd3d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "patch": "@@ -2121,6 +2121,7 @@ void gfc_insert_constructor (gfc_expr *, gfc_constructor *);\n gfc_constructor *gfc_get_constructor (void);\n tree gfc_conv_array_initializer (tree type, gfc_expr * expr);\n try spec_size (gfc_array_spec *, mpz_t *);\n+try spec_dimen_size (gfc_array_spec *, int, mpz_t *);\n int gfc_is_compile_time_shape (gfc_array_spec *);\n \n /* interface.c -- FIXME: some of these should be in symbol.c */"}, {"sha": "3c6d9c49bd9a48fe1f8a646508c2c51681e47a23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "patch": "@@ -1,3 +1,11 @@\n+2007-05-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29397\n+\t* gfortran.dg/parameter_array_init_1.f90: New test.\n+\n+\tPR fortran/29400\n+\t* gfortran.dg/parameter_array_init_2.f90: New test.\n+\n 2007-05-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/31854"}, {"sha": "bb029a5b0803e045a3e355d8d48c82170bf30bd3", "filename": "gcc/testsuite/gfortran.dg/parameter_array_init_1.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_1.f90?ref=a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! tests the fix for PR29397, in which the initializer for the parameter\n+! 'J' was not expanded into an array.\n+!\n+! Contributed by Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n+!\n+  INTEGER :: K(3) = 1\n+  INTEGER, PARAMETER :: J(3) = 2\n+  IF (ANY (MAXLOC (K, J<3) .NE. 1)) CALL ABORT ()\n+  IF (ANY (J .NE. 2)) CALL ABORT ()\n+END"}, {"sha": "bf238e5ee32a4439fd8789a948a690b61f64c6b7", "filename": "gcc/testsuite/gfortran.dg/parameter_array_init_2.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9b43781dbc0c38ea33062cd96825defbcb1ca2d/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparameter_array_init_2.f90?ref=a9b43781dbc0c38ea33062cd96825defbcb1ca2d", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu\" } ! suppress the warning about line 15\n+! Thrashes the fix for PR29400, where the scalar initializers\n+! were not expanded to arrays with the appropriate shape.\n+!\n+! Contributed by Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n+!\n+  integer,parameter :: i(1,1) = 0, j(2) = 42\r\n+\r\n+  if (any (maxloc(j+j,mask=(j==2)) .ne. 0)) call abort ()\r\n+  if (size(j+j) .ne. 2) call abort ()\r\n+  if (minval(j+j) .ne. 84) call abort ()\r\n+  if (minval(j,mask=(j==2)) .ne. huge (j)) call abort ()\r\n+  if (maxval(j+j) .ne. 84) call abort ()\r\n+  if (maxval(j,mask=(j==2)) .ne. -huge (j)-1) call abort ()\r\n+  if (sum(j,mask=j==2) .ne. 0) call abort ()\r\n+  if (sum(j+j) .ne. 168) call abort ()\r\n+  if (product(j+j) .ne. 7056) call abort ()\r\n+  if (any(ubound(j+j) .ne. 2)) call abort ()\r\n+  if (any(lbound(j+j) .ne. 1)) call abort ()\r\n+  if (dot_product(j+j,j) .ne. 7056) call abort ()\r\n+  if (dot_product(j,j+j) .ne. 7056) call abort ()\r\n+  if (count(i==1) .ne. 0) call abort ()\r\n+  if (any(i==1)) call abort ()\r\n+  if (all(i==1)) call abort ()\r\n+  end\r"}]}