{"sha": "768da0da28b451fc642198087b4d0d44dc85e2a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY4ZGEwZGEyOGI0NTFmYzY0MjE5ODA4N2I0ZDBkNDRkYzg1ZTJhMw==", "commit": {"author": {"name": "Razya Ladelsky", "email": "razya@il.ibm.com", "date": "2012-05-20T11:41:45Z"}, "committer": {"name": "Razya Ladelsky", "email": "razya@gcc.gnu.org", "date": "2012-05-20T11:41:45Z"}, "message": "tree-parloops.c (gen_parallel_loop): Change many_iterations_cond for outer loops.\n\n2012-05-20  Razya Ladelsky  <razya@il.ibm.com>\n        \n                 * tree-parloops.c (gen_parallel_loop): Change many_iterations_cond for outer loops.\n\nFrom-SVN: r187694", "tree": {"sha": "074f75e508df4716021009df0a39012dbaa1431a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/074f75e508df4716021009df0a39012dbaa1431a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/768da0da28b451fc642198087b4d0d44dc85e2a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768da0da28b451fc642198087b4d0d44dc85e2a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/768da0da28b451fc642198087b4d0d44dc85e2a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/768da0da28b451fc642198087b4d0d44dc85e2a3/comments", "author": null, "committer": null, "parents": [{"sha": "d3c268abbda900e9fd2202fb19154a186183a8e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c268abbda900e9fd2202fb19154a186183a8e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3c268abbda900e9fd2202fb19154a186183a8e8"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "a9f74afcc1a956f5ae7ce3a422f4f3d3dfba8bcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768da0da28b451fc642198087b4d0d44dc85e2a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768da0da28b451fc642198087b4d0d44dc85e2a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=768da0da28b451fc642198087b4d0d44dc85e2a3", "patch": "@@ -1,3 +1,7 @@\n+2012-05-20  Razya Ladelsky  <razya@il.ibm.com>\n+\t\n+\t* tree-parloops.c (gen_parallel_loop): Change many_iterations_cond for outer loops.\n+\n 2012-05-18  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphunit.c (handle_alias_pairs): Declare; free alias_pairs"}, {"sha": "7c1e462a0fbd8fa9e02e06a9095739d6e3aa036f", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/768da0da28b451fc642198087b4d0d44dc85e2a3/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/768da0da28b451fc642198087b4d0d44dc85e2a3/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=768da0da28b451fc642198087b4d0d44dc85e2a3", "patch": "@@ -1732,6 +1732,7 @@ gen_parallel_loop (struct loop *loop, htab_t reduction_list,\n   unsigned prob;\n   location_t loc;\n   gimple cond_stmt;\n+  unsigned int m_p_thread=2;\n \n   /* From\n \n@@ -1786,15 +1787,31 @@ gen_parallel_loop (struct loop *loop, htab_t reduction_list,\n      loop that will be split to loop_fn, the new one will be used for the\n      remaining iterations.  */\n \n+  /* We should compute a better number-of-iterations value for outer loops.\n+     That is, if we have\n+ \n+    for (i = 0; i < n; ++i)\n+      for (j = 0; j < m; ++j)\n+        ...\n+\n+    we should compute nit = n * m, not nit = n.  \n+    Also may_be_zero handling would need to be adjusted.  */\n+\n   type = TREE_TYPE (niter->niter);\n   nit = force_gimple_operand (unshare_expr (niter->niter), &stmts, true,\n \t\t\t      NULL_TREE);\n   if (stmts)\n     gsi_insert_seq_on_edge_immediate (loop_preheader_edge (loop), stmts);\n \n-  many_iterations_cond =\n-    fold_build2 (GE_EXPR, boolean_type_node,\n-\t\t nit, build_int_cst (type, MIN_PER_THREAD * n_threads));\n+  if (loop->inner)\n+    m_p_thread=2;\n+  else\n+    m_p_thread=MIN_PER_THREAD;\n+\n+   many_iterations_cond =\n+     fold_build2 (GE_EXPR, boolean_type_node,\n+                nit, build_int_cst (type, m_p_thread * n_threads));\n+\n   many_iterations_cond\n     = fold_build2 (TRUTH_AND_EXPR, boolean_type_node,\n \t\t   invert_truthvalue (unshare_expr (niter->may_be_zero)),"}]}