{"sha": "a6a54b6fd1c70a193f64203cdf00120ae2caa580", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZhNTRiNmZkMWM3MGExOTNmNjQyMDNjZGYwMDEyMGFlMmNhYTU4MA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-28T20:02:25Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-28T20:02:25Z"}, "message": "crx-protos.h (crx_function_arg): Delete.\n\n\t* config/crx/crx-protos.h (crx_function_arg): Delete.\n\t(crx_function_arg_advance): Delete.\n\t* config/crx/crx.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\t* config/crx/crx.c (crx_function_arg): Make static.  Take a\n\tconst_tree and a bool.\n\t(crx_function_arg_advance): Make static.  Take a const_tree and\n\ta bool.\n\t(enough_regs_for_param): Take a const_tree.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r166040", "tree": {"sha": "b8f24a08e9b8637555bf29b1a0bad4c396c0b4ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8f24a08e9b8637555bf29b1a0bad4c396c0b4ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6a54b6fd1c70a193f64203cdf00120ae2caa580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a54b6fd1c70a193f64203cdf00120ae2caa580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6a54b6fd1c70a193f64203cdf00120ae2caa580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a54b6fd1c70a193f64203cdf00120ae2caa580/comments", "author": null, "committer": null, "parents": [{"sha": "da15f931e57b8783d9fa6c4e5f18e62eadc16ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da15f931e57b8783d9fa6c4e5f18e62eadc16ff7"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "b413735c0ba53110a4db0c671a86359403c9eab5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a54b6fd1c70a193f64203cdf00120ae2caa580/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a54b6fd1c70a193f64203cdf00120ae2caa580/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6a54b6fd1c70a193f64203cdf00120ae2caa580", "patch": "@@ -1,3 +1,15 @@\n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/crx/crx-protos.h (crx_function_arg): Delete.\n+\t(crx_function_arg_advance): Delete.\n+\t* config/crx/crx.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\t* config/crx/crx.c (crx_function_arg): Make static.  Take a\n+\tconst_tree and a bool.\n+\t(crx_function_arg_advance): Make static.  Take a const_tree and\n+\ta bool.\n+\t(enough_regs_for_param): Take a const_tree.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/m68hc11/m68hc11-protos.h (m68hc11_function_arg): Delete."}, {"sha": "208616d40142dc455e0cd79f2f3fc502240d8796", "filename": "gcc/config/crx/crx-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a54b6fd1c70a193f64203cdf00120ae2caa580/gcc%2Fconfig%2Fcrx%2Fcrx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a54b6fd1c70a193f64203cdf00120ae2caa580/gcc%2Fconfig%2Fcrx%2Fcrx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx-protos.h?ref=a6a54b6fd1c70a193f64203cdf00120ae2caa580", "patch": "@@ -32,10 +32,8 @@ extern enum reg_class crx_secondary_reload_class (enum reg_class, enum machine_m\n /* Passing function arguments.  */\n extern int crx_function_arg_regno_p (int);\n #ifdef TREE_CODE\n-extern void crx_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n #ifdef RTX_CODE\n extern void crx_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx);\n-extern rtx crx_function_arg (struct cumulative_args *, enum machine_mode, tree, int);\n #endif /* RTX_CODE */\n #endif /* TREE_CODE */\n "}, {"sha": "5fc963a6ce0022b03a032305c4ccde3a1efd084c", "filename": "gcc/config/crx/crx.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a54b6fd1c70a193f64203cdf00120ae2caa580/gcc%2Fconfig%2Fcrx%2Fcrx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a54b6fd1c70a193f64203cdf00120ae2caa580/gcc%2Fconfig%2Fcrx%2Fcrx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.c?ref=a6a54b6fd1c70a193f64203cdf00120ae2caa580", "patch": "@@ -130,6 +130,10 @@ static bool crx_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_U\n static int crx_address_cost (rtx, bool);\n static bool crx_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool crx_can_eliminate (const int, const int);\n+static rtx crx_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t     const_tree, bool);\n+static void crx_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t      const_tree, bool);\n \n /*****************************************************************************/\n /* RTL VALIDITY\t\t\t\t\t\t\t\t     */\n@@ -154,6 +158,16 @@ static bool crx_can_eliminate (const int, const int);\n #undef\tTARGET_RETURN_IN_MEMORY\n #define\tTARGET_RETURN_IN_MEMORY\t\tcrx_return_in_memory\n \n+/*****************************************************************************/\n+/* PASSING FUNCTION ARGUMENTS\t\t\t\t\t\t     */\n+/*****************************************************************************/\n+\n+#undef  TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG\t\tcrx_function_arg\n+\n+#undef  TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE\tcrx_function_arg_advance\n+\n /*****************************************************************************/\n /* RELATIVE COSTS OF OPERATIONS\t\t\t\t\t\t     */\n /*****************************************************************************/\n@@ -429,7 +443,7 @@ crx_hard_regno_mode_ok (int regno, enum machine_mode mode)\n  * the number of registers needed else 0.  */\n \n static int\n-enough_regs_for_param (CUMULATIVE_ARGS * cum, tree type,\n+enough_regs_for_param (CUMULATIVE_ARGS * cum, const_tree type,\n \t\t       enum machine_mode mode)\n {\n   int type_size;\n@@ -452,11 +466,11 @@ enough_regs_for_param (CUMULATIVE_ARGS * cum, tree type,\n   return 0;\n }\n \n-/* Implements the macro FUNCTION_ARG defined in crx.h.  */\n+/* Implements TARGET_FUNCTION_ARG.  */\n \n-rtx\n-crx_function_arg (CUMULATIVE_ARGS * cum, enum machine_mode mode, tree type,\n-\t      int named ATTRIBUTE_UNUSED)\n+static rtx\n+crx_function_arg (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n+\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   last_parm_in_reg = 0;\n \n@@ -520,11 +534,11 @@ crx_init_cumulative_args (CUMULATIVE_ARGS * cum, tree fntype,\n     }\n }\n \n-/* Implements the macro FUNCTION_ARG_ADVANCE defined in crx.h.  */\n+/* Implements TARGET_FUNCTION_ARG_ADVANCE.  */\n \n-void\n+static void\n crx_function_arg_advance (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n-\t\t      tree type, int named ATTRIBUTE_UNUSED)\n+\t\t\t  const_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   /* l holds the number of registers required */\n   int l = GET_MODE_BITSIZE (mode) / BITS_PER_WORD;"}, {"sha": "eac1594c03628344dba46421a8e1a4a66ec29eca", "filename": "gcc/config/crx/crx.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a54b6fd1c70a193f64203cdf00120ae2caa580/gcc%2Fconfig%2Fcrx%2Fcrx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a54b6fd1c70a193f64203cdf00120ae2caa580/gcc%2Fconfig%2Fcrx%2Fcrx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcrx%2Fcrx.h?ref=a6a54b6fd1c70a193f64203cdf00120ae2caa580", "patch": "@@ -300,9 +300,6 @@ enum reg_class\n \n #define PUSH_ROUNDING(BYTES) (((BYTES) + 3) & ~3)\n \n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  ((rtx) crx_function_arg(&(CUM), (MODE), (TYPE), (NAMED)))\n-\n #ifndef CUMULATIVE_ARGS\n struct cumulative_args\n {\n@@ -318,9 +315,6 @@ struct cumulative_args\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, FNDECL, N_NAMED_ARGS) \\\n   crx_init_cumulative_args(&(CUM), (FNTYPE), (LIBNAME))\n \n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED) \\\n-  crx_function_arg_advance(&(CUM), (MODE), (TYPE), (NAMED))\n-\n #define FUNCTION_ARG_REGNO_P(REGNO)  crx_function_arg_regno_p(REGNO)\n \n /*****************************************************************************/"}]}