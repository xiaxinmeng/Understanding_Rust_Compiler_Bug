{"sha": "21e6dd8f0b9b7b183ca20daa3488a68cb43da04a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFlNmRkOGYwYjliN2IxODNjYTIwZGFhMzQ4OGE2OGNiNDNkYTA0YQ==", "commit": {"author": {"name": "Victor Kaplansky", "email": "victork@il.ibm.com", "date": "2008-07-27T21:44:25Z"}, "committer": {"name": "Victor Kaplansky", "email": "victork@gcc.gnu.org", "date": "2008-07-27T21:44:25Z"}, "message": "re PR tree-optimization/35252 (No vectorization for complex arrays)\n\n2008-07-27  Victor Kaplansky  <victork@il.ibm.com>\n\n        PR tree-optimization/35252\n        * tree-vect-analyze.c (vect_build_slp_tree): Make IMAGPART_EXPR and\n        REALPART_EXPR to be considered as same load operation.\n\ntestsuite\n\n        PR tree-optimization/35252\n        * gcc.dg/vect/vect-complex-1.c, gcc.dg/vect/vect-complex-2.c,\n        gcc.dg/vect/fast-math-vect-complex-3.c,\n        gcc.dg/vect/vect-complex-4.c: New tests.\n\nFrom-SVN: r138198", "tree": {"sha": "569c7016bc9e0b836fb1cddf6a0c2af4a39256b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/569c7016bc9e0b836fb1cddf6a0c2af4a39256b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/comments", "author": null, "committer": null, "parents": [{"sha": "ff60c6685c150b8371d35fb471aebf628e2c1b94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff60c6685c150b8371d35fb471aebf628e2c1b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff60c6685c150b8371d35fb471aebf628e2c1b94"}], "stats": {"total": 299, "additions": 298, "deletions": 1}, "files": [{"sha": "0c271d28b58fa7df0ca573408f91e5812da8c331", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21e6dd8f0b9b7b183ca20daa3488a68cb43da04a", "patch": "@@ -1,3 +1,9 @@\n+2008-07-27  Victor Kaplansky  <victork@il.ibm.com>\n+\n+\tPR tree-optimization/35252\n+\t* tree-vect-analyze.c (vect_build_slp_tree): Make IMAGPART_EXPR and\n+\tREALPART_EXPR to be considered as same load operation.\n+\n 2008-07-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR tree-optimization/36830"}, {"sha": "b5ee93b713eac1649f4875dd026692fbbae8a914", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21e6dd8f0b9b7b183ca20daa3488a68cb43da04a", "patch": "@@ -1,3 +1,10 @@\n+2008-07-27  Victor Kaplansky  <victork@il.ibm.com>\n+\n+\tPR tree-optimization/35252\n+\t* gcc.dg/vect/vect-complex-1.c, gcc.dg/vect/vect-complex-2.c,\n+\tgcc.dg/vect/fast-math-vect-complex-3.c,\n+\tgcc.dg/vect/vect-complex-4.c: New tests.\n+\n 2008-07-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c++/36944"}, {"sha": "1dff116dd5ade757280488fe2521bf8b33048cc2", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-vect-complex-3.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-complex-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-complex-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-complex-3.c?ref=21e6dd8f0b9b7b183ca20daa3488a68cb43da04a", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdio.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+_Complex float a[N] =\n+    { 10.0F + 20.0iF, 11.0F + 21.0iF, 12.0F + 22.0iF, 13.0F + 23.0iF,\n+      14.0F + 24.0iF, 15.0F + 25.0iF, 16.0F + 26.0iF, 17.0F + 27.0iF,\n+      18.0F + 28.0iF, 19.0F + 29.0iF, 20.0F + 30.0iF, 21.0F + 31.0iF,\n+      22.0F + 32.0iF, 23.0F + 33.0iF, 24.0F + 34.0iF, 25.0F + 35.0iF };\n+_Complex float b[N] =\n+    { 30.0F + 40.0iF, 31.0F + 41.0iF, 32.0F + 42.0iF, 33.0F + 43.0iF,\n+      34.0F + 44.0iF, 35.0F + 45.0iF, 36.0F + 46.0iF, 37.0F + 47.0iF,\n+      38.0F + 48.0iF, 39.0F + 49.0iF, 40.0F + 50.0iF, 41.0F + 51.0iF,\n+      42.0F + 52.0iF, 43.0F + 53.0iF, 44.0F + 54.0iF, 45.0F + 55.0iF };\n+\n+_Complex float c[N];\n+_Complex float res[N] =\n+    { -500.0F + 1000.0iF, -520.0F + 1102.0iF,\n+      -540.0F + 1208.0iF, -560.0F + 1318.0iF,\n+      -580.0F + 1432.0iF, -600.0F + 1550.0iF,\n+      -620.0F + 1672.0iF, -640.0F + 1798.0iF,\n+      -660.0F + 1928.0iF, -680.0F + 2062.0iF,\n+      -700.0F + 2200.0iF, -720.0F + 2342.0iF,\n+      -740.0F + 2488.0iF, -760.0F + 2638.0iF,\n+      -780.0F + 2792.0iF, -800.0F + 2950.0iF };\n+\n+\n+__attribute__ ((noinline)) void\n+foo (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    c[i] = a[i] * b[i];\n+\n+}\n+\n+int\n+main (void)\n+{ \n+  int i;\n+  check_vect ();\n+  \n+  foo ();\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+  {\n+    if (c[i] != res[i])\n+      abort ();\n+  }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_interleave  && vect_extract_even_odd } } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "9be88644b637ea75dced44880b589ca83b5f666e", "filename": "gcc/testsuite/gcc.dg/vect/vect-complex-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-1.c?ref=21e6dd8f0b9b7b183ca20daa3488a68cb43da04a", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-require-effective-target vect_float } */\n+\n+#include <stdio.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+_Complex float a[N] =\n+    { 10.0F + 20.0iF, 11.0F + 21.0iF, 12.0F + 22.0iF, 13.0F + 23.0iF,\n+      14.0F + 24.0iF, 15.0F + 25.0iF, 16.0F + 26.0iF, 17.0F + 27.0iF,\n+      18.0F + 28.0iF, 19.0F + 29.0iF, 20.0F + 30.0iF, 21.0F + 31.0iF,\n+      22.0F + 32.0iF, 23.0F + 33.0iF, 24.0F + 34.0iF, 25.0F + 35.0iF };\n+_Complex float b[N] =\n+    { 30.0F + 40.0iF, 31.0F + 41.0iF, 32.0F + 42.0iF, 33.0F + 43.0iF,\n+      34.0F + 44.0iF, 35.0F + 45.0iF, 36.0F + 46.0iF, 37.0F + 47.0iF,\n+      38.0F + 48.0iF, 39.0F + 49.0iF, 40.0F + 50.0iF, 41.0F + 51.0iF,\n+      42.0F + 52.0iF, 43.0F + 53.0iF, 44.0F + 54.0iF, 45.0F + 55.0iF };\n+\n+_Complex float c[N];\n+_Complex float res[N] =\n+    { 40.0F + 60.0iF, 42.0F + 62.0iF, 44.0F + 64.0iF, 46.0F + 66.0iF,\n+      48.0F + 68.0iF, 50.0F + 70.0iF, 52.0F + 72.0iF, 54.0F + 74.0iF,\n+      56.0F + 76.0iF, 58.0F + 78.0iF, 60.0F + 80.0iF, 62.0F + 82.0iF,\n+      64.0F + 84.0iF, 66.0F + 86.0iF, 68.0F + 88.0iF, 70.0F + 90.0iF };\n+\n+\n+__attribute__ ((noinline)) void\n+foo (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    c[i] = a[i] + b[i];\n+\n+}\n+\n+int\n+main (void)\n+{ \n+  int i;\n+  check_vect ();\n+  \n+  foo ();\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    if (c[i] != res[i])\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a034082cd4d6f11118cf89597a1659daea98c5e4", "filename": "gcc/testsuite/gcc.dg/vect/vect-complex-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-2.c?ref=21e6dd8f0b9b7b183ca20daa3488a68cb43da04a", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-require-effective-target vect_double } */\n+\n+#include <stdio.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+_Complex double a[N] =\n+    { 10.0F + 20.0iF, 11.0F + 21.0iF, 12.0F + 22.0iF, 13.0F + 23.0iF,\n+      14.0F + 24.0iF, 15.0F + 25.0iF, 16.0F + 26.0iF, 17.0F + 27.0iF,\n+      18.0F + 28.0iF, 19.0F + 29.0iF, 20.0F + 30.0iF, 21.0F + 31.0iF,\n+      22.0F + 32.0iF, 23.0F + 33.0iF, 24.0F + 34.0iF, 25.0F + 35.0iF };\n+_Complex double b[N] =\n+    { 30.0F + 40.0iF, 31.0F + 41.0iF, 32.0F + 42.0iF, 33.0F + 43.0iF,\n+      34.0F + 44.0iF, 35.0F + 45.0iF, 36.0F + 46.0iF, 37.0F + 47.0iF,\n+      38.0F + 48.0iF, 39.0F + 49.0iF, 40.0F + 50.0iF, 41.0F + 51.0iF,\n+      42.0F + 52.0iF, 43.0F + 53.0iF, 44.0F + 54.0iF, 45.0F + 55.0iF };\n+\n+_Complex double c[N];\n+_Complex double res[N] =\n+    { 40.0F + 60.0iF, 42.0F + 62.0iF, 44.0F + 64.0iF, 46.0F + 66.0iF,\n+      48.0F + 68.0iF, 50.0F + 70.0iF, 52.0F + 72.0iF, 54.0F + 74.0iF,\n+      56.0F + 76.0iF, 58.0F + 78.0iF, 60.0F + 80.0iF, 62.0F + 82.0iF,\n+      64.0F + 84.0iF, 66.0F + 86.0iF, 68.0F + 88.0iF, 70.0F + 90.0iF };\n+\n+\n+__attribute__ ((noinline)) void\n+foo (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    c[i] = a[i] + b[i];\n+\n+}\n+\n+int\n+main (void)\n+{ \n+  int i;\n+  check_vect ();\n+  \n+  foo ();\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    if (c[i] != res[i])\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "85c416597f6d312ddc0d97c1bc07518cefeeec64", "filename": "gcc/testsuite/gcc.dg/vect/vect-complex-4.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-4.c?ref=21e6dd8f0b9b7b183ca20daa3488a68cb43da04a", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdio.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 16\n+\n+struct foostr {\n+  _Complex short f1;\n+  _Complex short f2;\n+};\n+\n+struct foostr a[16] __attribute__ ((__aligned__(16))) =\n+  {\n+    11 + 23i, 24 + 22i,\n+    11 + 26i, 24 + 35i,\n+    19 + 20i, 29 + 14i,\n+    23 + 31i, 26 + 30i,\n+    29 + 39i, 24 + 18i,\n+    20 + 32i, 16 + 23i,\n+    13 + 26i, 37 + 34i,\n+    12 + 23i, 26 + 14i,\n+    36 + 14i, 31 + 17i,\n+    35 + 17i, 17 + 36i,\n+    13 + 34i, 19 + 12i,\n+    27 + 34i, 36 + 19i,\n+    21 + 39i, 16 + 33i,\n+    28 + 18i, 39 + 26i,\n+    32 + 27i, 13 + 38i,\n+    35 + 36i, 34 + 28i,\n+  };\n+\n+struct foostr b[16] __attribute__ ((__aligned__(16))) =\n+  {\n+    37 + 12i, 23 + 15i,\n+    14 + 11i, 13 + 25i,\n+    35 + 29i, 22 + 34i,\n+    24 + 34i, 16 + 39i,\n+    34 + 32i, 26 + 21i,\n+    34 + 36i, 11 + 37i,\n+    25 + 21i, 10 + 39i,\n+    10 + 36i, 35 + 22i,\n+    39 + 29i, 23 + 21i,\n+    34 + 33i, 39 + 14i,\n+    16 + 31i, 32 + 33i,\n+    20 + 14i, 35 + 30i,\n+    26 + 24i, 36 + 37i,\n+    31 + 20i, 32 + 28i,\n+    25 + 27i, 15 + 30i,\n+    10 + 31i, 37 + 37i,\n+  };\n+struct foostr c[16] __attribute__ ((__aligned__(16)));\n+struct foostr res[N] =\n+  {\n+    48 + 35i, 47 + 37i,\n+    25 + 37i, 37 + 60i,\n+    54 + 49i, 51 + 48i,\n+    47 + 65i, 42 + 69i,\n+    63 + 71i, 50 + 39i,\n+    54 + 68i, 27 + 60i,\n+    38 + 47i, 47 + 73i,\n+    22 + 59i, 61 + 36i,\n+    75 + 43i, 54 + 38i,\n+    69 + 50i, 56 + 50i,\n+    29 + 65i, 51 + 45i,\n+    47 + 48i, 71 + 49i,\n+    47 + 63i, 52 + 70i,\n+    59 + 38i, 71 + 54i,\n+    57 + 54i, 28 + 68i,\n+    45 + 67i, 71 + 65i,\n+  };\n+\n+__attribute__ ((noinline)) void\n+foo (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      c[i].f1 = a[i].f1 + b[i].f1;\n+      c[i].f2 = a[i].f2 + b[i].f2;\n+    }\n+\n+}\n+\n+int\n+main (void)\n+{ \n+  int i;\n+  check_vect ();\n+  \n+  foo ();\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (c[i].f1 != res[i].f1)\n+\tabort ();\n+      if (c[i].f2 != res[i].f2)\n+\tabort ();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "818ae7ce53fa82aea3bb3dc33901290d90fde0ae", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e6dd8f0b9b7b183ca20daa3488a68cb43da04a/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=21e6dd8f0b9b7b183ca20daa3488a68cb43da04a", "patch": "@@ -2751,7 +2751,9 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, slp_tree *node,\n \t}\n       else\n \t{\n-\t  if (first_stmt_code != TREE_CODE (rhs))\n+\t  if ((first_stmt_code != TREE_CODE (rhs))\n+\t      && ((first_stmt_code != IMAGPART_EXPR) || (TREE_CODE (rhs) != REALPART_EXPR))\n+\t      && ((first_stmt_code != REALPART_EXPR) || (TREE_CODE (rhs) != IMAGPART_EXPR)))\n \t    {\n \t      if (vect_print_dump_info (REPORT_SLP)) \n \t\t{"}]}