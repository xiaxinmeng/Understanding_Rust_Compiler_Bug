{"sha": "c7518e6f52aad178875818666fcfc92ff4e08e8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1MThlNmY1MmFhZDE3ODg3NTgxODY2NmZjZmM5MmZmNGUwOGU4Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:30:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:30:49Z"}, "message": "[multiple changes]\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Export_Import): Signal that there is no\n\tcorresponding pragma.\n\n2016-04-27  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch3.adb: Minor comment improvement.\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration): If the\n\treturn type is an untagged limited record with only access\n\tdiscriminants and no controlled components, the return value does not\n\tneed to use the secondary stack.\n\n2016-04-27  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_util.adb (Remove_Side_Effects): When\n\tgenerating C code handle object declarations that have\n\tdiscriminants and are initialized by means of a call to a\n\tfunction.\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-textio.adb (Get_Line function): Handle properly the case of\n\ta line that has the same length as the buffer (or a multiple\n\tthereof) and there is no line terminator.\n\t* a-tigeli.adb (Get_Line procedure): Do not store an end_of_file\n\tin the string when there is no previous line terminator and we\n\tneed at most one additional character.\n\nFrom-SVN: r235492", "tree": {"sha": "75a285b790fa7fb8952f2b4d0c1f98d397bf4615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75a285b790fa7fb8952f2b4d0c1f98d397bf4615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7518e6f52aad178875818666fcfc92ff4e08e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7518e6f52aad178875818666fcfc92ff4e08e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7518e6f52aad178875818666fcfc92ff4e08e8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7518e6f52aad178875818666fcfc92ff4e08e8f/comments", "author": null, "committer": null, "parents": [{"sha": "814cc240b86e6eaf192ea958fa4eb08e87683840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814cc240b86e6eaf192ea958fa4eb08e87683840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/814cc240b86e6eaf192ea958fa4eb08e87683840"}], "stats": {"total": 162, "additions": 142, "deletions": 20}, "files": [{"sha": "4b39a4d8542c892b16c03da5e792c2fd3922d76e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c7518e6f52aad178875818666fcfc92ff4e08e8f", "patch": "@@ -1,3 +1,35 @@\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Export_Import): Signal that there is no\n+\tcorresponding pragma.\n+\n+2016-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch3.adb: Minor comment improvement.\n+\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration): If the\n+\treturn type is an untagged limited record with only access\n+\tdiscriminants and no controlled components, the return value does not\n+\tneed to use the secondary stack.\n+\n+2016-04-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_util.adb (Remove_Side_Effects): When\n+\tgenerating C code handle object declarations that have\n+\tdiscriminants and are initialized by means of a call to a\n+\tfunction.\n+\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-textio.adb (Get_Line function): Handle properly the case of\n+\ta line that has the same length as the buffer (or a multiple\n+\tthereof) and there is no line terminator.\n+\t* a-tigeli.adb (Get_Line procedure): Do not store an end_of_file\n+\tin the string when there is no previous line terminator and we\n+\tneed at most one additional character.\n+\n 2016-04-27  Arnaud Charlet  <charlet@adacore.com>\n \n \t* s-rident.ads: Make No_Implicit_Loops non partition wide."}, {"sha": "61d6accc078aec4dfd3902ea2f28e934709df482", "filename": "gcc/ada/a-textio.adb", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fa-textio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fa-textio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-textio.adb?ref=c7518e6f52aad178875818666fcfc92ff4e08e8f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -704,9 +704,6 @@ package body Ada.Text_IO is\n    end Get_Line;\n \n    function Get_Line (File : File_Type) return String is\n-      Buffer : String (1 .. 500);\n-      Last   : Natural;\n-\n       function Get_Rest (S : String) return String;\n       --  This is a recursive function that reads the rest of the line and\n       --  returns it. S is the part read so far.\n@@ -732,19 +729,42 @@ package body Ada.Text_IO is\n          begin\n             if Last < Buffer'Last then\n                return R;\n+\n             else\n                return Get_Rest (R);\n             end if;\n          end;\n       end Get_Rest;\n \n+      --  Local variables\n+\n+      Buffer : String (1 .. 500);\n+      ch     : int;\n+      Last   : Natural;\n+\n    --  Start of processing for Get_Line\n \n    begin\n       Get_Line (File, Buffer, Last);\n \n       if Last < Buffer'Last then\n          return Buffer (1 .. Last);\n+\n+      --  If the String has the same length as the buffer, and there is no end\n+      --  of line, check whether we are at the end of file, in which case we\n+      --  have the full String in the buffer.\n+\n+      elsif Last = Buffer'Last then\n+         ch := Getc (File);\n+\n+         if ch = EOF then\n+            return Buffer;\n+\n+         else\n+            Ungetc (ch, File);\n+            return Get_Rest (Buffer (1 .. Last));\n+         end if;\n+\n       else\n          return Get_Rest (Buffer (1 .. Last));\n       end if;"}, {"sha": "d4aedcdd7d167b351e2c345365e4bb0dd428c5e3", "filename": "gcc/ada/a-tigeli.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fa-tigeli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fa-tigeli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tigeli.adb?ref=c7518e6f52aad178875818666fcfc92ff4e08e8f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -187,8 +187,13 @@ begin\n          --  If we get EOF after already reading data, this is an incomplete\n          --  last line, in which case no End_Error should be raised.\n \n-         if ch = EOF and then Last < Item'First then\n-            raise End_Error;\n+         if ch = EOF then\n+            if  Last < Item'First then\n+               raise End_Error;\n+\n+            else  --  All done\n+               return;\n+            end if;\n \n          elsif ch /= LM then\n "}, {"sha": "e76db7eeeb7c4f7d567decc1099ef7c229de429c", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=c7518e6f52aad178875818666fcfc92ff4e08e8f", "patch": "@@ -7108,8 +7108,10 @@ package body Exp_Ch3 is\n          end;\n       end if;\n \n-      --  Final transformation - turn the object declaration into a renaming if\n-      --  appropriate.\n+      --  Final transformation - turn the object declaration into a renaming\n+      --  if appropriate. If this is the completion of a deferred constant\n+      --  declaration, then this transformation generates what would be\n+      --  illegal code if written by hand, but that's OK.\n \n       if Present (Expr) then\n          if Rewrite_As_Renaming then"}, {"sha": "60c2ce034ea7e3219e31daa22d4733fef4fe9048", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c7518e6f52aad178875818666fcfc92ff4e08e8f", "patch": "@@ -7783,7 +7783,12 @@ package body Exp_Ch6 is\n       Result_Subt     : Entity_Id;\n \n       Definite : Boolean;\n-      --  True for definite function result subtype\n+      --  True if result subtype is definite, or has a size that does not\n+      --  require secondary stack usage (i.e. no variant part or components\n+      --  whose type depends on discriminants). In particular, untagged types\n+      --  with only access discriminants do not require secondary stack use.\n+      --  Note that if the return type is tagged we must always use the sec.\n+      --  stack because the call may dispatch on result.\n \n    begin\n       --  Step past qualification or unchecked conversion (the latter can occur\n@@ -7818,7 +7823,10 @@ package body Exp_Ch6 is\n       end if;\n \n       Result_Subt := Etype (Function_Id);\n-      Definite    := Is_Definite_Subtype (Underlying_Type (Result_Subt));\n+      Definite :=\n+        (Is_Definite_Subtype (Underlying_Type (Result_Subt))\n+             and then not Is_Tagged_Type (Result_Subt))\n+          or else not Requires_Transient_Scope (Underlying_Type (Result_Subt));\n \n       --  Create an access type designating the function's result subtype. We\n       --  use the type of the original call because it may be a call to an"}, {"sha": "7591c3afd273af719466c5f1b0e6c981d222e3c1", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 58, "deletions": 9, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c7518e6f52aad178875818666fcfc92ff4e08e8f", "patch": "@@ -7944,13 +7944,35 @@ package body Exp_Util is\n       else\n          --  An expression which is in SPARK mode is considered side effect\n          --  free if the resulting value is captured by a variable or a\n-         --  constant. Same reasoning when generating C code.\n-         --  Why can't we apply this test in general???\n+         --  constant.\n \n-         if (GNATprove_Mode or Generate_C_Code)\n+         if GNATprove_Mode\n            and then Nkind (Parent (Exp)) = N_Object_Declaration\n          then\n             goto Leave;\n+\n+         --  When generating C code we cannot consider side effect free object\n+         --  declarations that have discriminants and are initialized by means\n+         --  of a function call since on this target there is no secondary\n+         --  stack to store the return value and the expander may generate an\n+         --  extra call to the function to compute the discriminant value. In\n+         --  addition, for targets that have secondary stack, the expansion of\n+         --  functions with side effects involves the generation of an access\n+         --  type to capture the return value stored in the secondary stack;\n+         --  by contrast when generating C code such expansion generates an\n+         --  internal object declaration (no access type involved) which must\n+         --  be identified here to avoid entering into a never-ending loop\n+         --  generating internal object declarations.\n+\n+         elsif Generate_C_Code\n+           and then Nkind (Parent (Exp)) = N_Object_Declaration\n+           and then\n+             (Nkind (Exp) /= N_Function_Call\n+                or else not Has_Discriminants (Exp_Type)\n+                or else Is_Internal_Name\n+                          (Chars (Defining_Identifier (Parent (Exp)))))\n+         then\n+            goto Leave;\n          end if;\n \n          --  Special processing for function calls that return a limited type.\n@@ -8063,12 +8085,39 @@ package body Exp_Util is\n             Set_Analyzed (E, False);\n          end if;\n \n-         Insert_Action (Exp,\n-           Make_Object_Declaration (Loc,\n-             Defining_Identifier => Def_Id,\n-             Object_Definition   => New_Occurrence_Of (Ref_Type, Loc),\n-             Constant_Present    => True,\n-             Expression          => New_Exp));\n+         --  Generating C code of object declarations that have discriminants\n+         --  and are initialized by means of a function call we propagate the\n+         --  discriminants of the parent type to the internally built object.\n+         --  This is needed to avoid generating an extra call to the called\n+         --  function.\n+\n+         --  For example, if we generate here the following declaration, it\n+         --  will be expanded later adding an extra call to evaluate the value\n+         --  of the discriminant (needed to compute the size of the object).\n+         --\n+         --     type Rec (D : Integer) is ...\n+         --     Obj : constant Rec := SomeFunc;\n+\n+         if Generate_C_Code\n+           and then Nkind (Parent (Exp)) = N_Object_Declaration\n+           and then Has_Discriminants (Exp_Type)\n+           and then Nkind (Exp) = N_Function_Call\n+         then\n+            Insert_Action (Exp,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Def_Id,\n+                Object_Definition   => New_Copy_Tree\n+                                         (Object_Definition (Parent (Exp))),\n+                Constant_Present    => True,\n+                Expression          => New_Exp));\n+         else\n+            Insert_Action (Exp,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Def_Id,\n+                Object_Definition   => New_Occurrence_Of (Ref_Type, Loc),\n+                Constant_Present    => True,\n+                Expression          => New_Exp));\n+         end if;\n       end if;\n \n       --  Preserve the Assignment_OK flag in all copies, since at least one"}, {"sha": "d42b7cad79e3f9e71fe17989dad037630cc7885a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7518e6f52aad178875818666fcfc92ff4e08e8f/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c7518e6f52aad178875818666fcfc92ff4e08e8f", "patch": "@@ -1691,6 +1691,12 @@ package body Sem_Ch13 is\n                   --  into account Conversion, External_Name, and Link_Name.\n \n                   Aitem := Build_Export_Import_Pragma (Aspect, E);\n+\n+               --  Otherwise the expression is either False or erroneous. There\n+               --  is no corresponding pragma.\n+\n+               else\n+                  Aitem := Empty;\n                end if;\n             end Analyze_Aspect_Export_Import;\n "}]}