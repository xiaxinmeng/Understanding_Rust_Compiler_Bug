{"sha": "d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5", "node_id": "C_kwDOANBUbNoAKGQ4YjZkYThkZDE1MjQwODQ5ZTAwZDQ2ZjNhZWY0MGNiOGVlYjFkYzU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-15T08:40:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-15T10:41:42Z"}, "message": "tree-optimization/104519 - adjust PR100499 niter fix\n\nThe following adjusts the PR100499 niter fix to use the appropriate\ntypes when checking whether the difference between the final and base\nvalues of the IV are a multiple of the step.  It also gets rid of\nan always false condition in multiple_of_p which lead me to a\nwrong solution first.\n\n2022-02-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104519\n\t* fold-const.cc (multiple_of_p): Remove never true condition.\n\t* tree-ssa-loop-niter.cc (number_of_iterations_ne): Use\n\tthe appropriate types for determining whether the difference\n\tof final and base is a multiple of the step.\n\n\t* gcc.dg/torture/pr104519.c: New testcase.", "tree": {"sha": "b52cc3fed9af2204bd2b9ba931c73f610cf9499f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b52cc3fed9af2204bd2b9ba931c73f610cf9499f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4c0aa60891daeb4ea5a7c265bd681038f6d8271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c0aa60891daeb4ea5a7c265bd681038f6d8271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c0aa60891daeb4ea5a7c265bd681038f6d8271"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "9d9939642f693bb4e9c87fc44496f2be4e9ef7ce", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5", "patch": "@@ -14208,11 +14208,7 @@ multiple_of_p (tree type, const_tree top, const_tree bottom, bool nowrap)\n \t      && multiple_of_p (type, TREE_OPERAND (top, 2), bottom, nowrap));\n \n     case INTEGER_CST:\n-      if (TREE_CODE (bottom) != INTEGER_CST\n-\t  || integer_zerop (bottom)\n-\t  || (TYPE_UNSIGNED (type)\n-\t      && (tree_int_cst_sgn (top) < 0\n-\t\t  || tree_int_cst_sgn (bottom) < 0)))\n+      if (TREE_CODE (bottom) != INTEGER_CST || integer_zerop (bottom))\n \treturn 0;\n       return wi::multiple_of_p (wi::to_widest (top), wi::to_widest (bottom),\n \t\t\t\tSIGNED);"}, {"sha": "389c7bb6880a20683d5350100ed32749e40571f7", "filename": "gcc/testsuite/gcc.dg/torture/pr104519.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104519.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104519.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104519.c?ref=d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do run } */\n+\n+signed char a, b;\n+int main()\n+{\n+  for (b = -7; b; b += 3)\n+    if (a)\n+      __builtin_abort();\n+  return 0;\n+}"}, {"sha": "9bb5097379b61c8706c16659fc0779245802a38b", "filename": "gcc/tree-ssa-loop-niter.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5/gcc%2Ftree-ssa-loop-niter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5/gcc%2Ftree-ssa-loop-niter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.cc?ref=d8b6da8dd15240849e00d46f3aef40cb8eeb1dc5", "patch": "@@ -1048,13 +1048,19 @@ number_of_iterations_ne (class loop *loop, tree type, affine_iv *iv,\n      which the loop exits immediately, and the iv does not overflow.\n \n      Also note, we prove condition 2) by checking base and final seperately\n-     along with condition 1) or 1').  */\n+     along with condition 1) or 1').  Since we ensure the difference\n+     computation of c does not wrap with cond below and the adjusted s\n+     will fit a signed type as well as an unsigned we can safely do\n+     this using the type of the IV if it is not pointer typed.  */\n+  tree mtype = type;\n+  if (POINTER_TYPE_P (type))\n+    mtype = niter_type;\n   if (!niter->control.no_overflow\n       && (integer_onep (s)\n-\t  || (multiple_of_p (type, fold_convert (niter_type, iv->base), s,\n-\t\t\t     false)\n-\t      && multiple_of_p (type, fold_convert (niter_type, final), s,\n-\t\t\t\tfalse))))\n+\t  || (multiple_of_p (mtype, fold_convert (mtype, iv->base),\n+\t\t\t     fold_convert (mtype, s), false)\n+\t      && multiple_of_p (mtype, fold_convert (mtype, final),\n+\t\t\t\tfold_convert (mtype, s), false))))\n     {\n       tree t, cond, relaxed_cond = boolean_false_node;\n "}]}