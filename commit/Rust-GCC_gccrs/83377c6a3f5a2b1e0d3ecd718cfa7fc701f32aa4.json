{"sha": "83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzNzdjNmEzZjVhMmIxZTBkM2VjZDcxOGNmYTdmYzcwMWYzMmFhNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-06-28T20:04:40Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-06-28T20:04:40Z"}, "message": "re PR libfortran/43298 (fortran library does not read in NaN -Inf or Inf)\n\n2010-06-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43298\n        * list_read.c (parse_real, read_real): Support NAN(alphanum).\n\n2010-06-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43298\n        * gfortran.dg/nan_6.f90: New.\n\nFrom-SVN: r161510", "tree": {"sha": "6c019cf873b129f993fd59f070c6f6e47c3df1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c019cf873b129f993fd59f070c6f6e47c3df1ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9589f23ea556ef4d3b083a83e49156780b6b9cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9589f23ea556ef4d3b083a83e49156780b6b9cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9589f23ea556ef4d3b083a83e49156780b6b9cde"}], "stats": {"total": 138, "additions": 138, "deletions": 0}, "files": [{"sha": "5f0ea3fbd1e170bee383747a91adf75f05991b4d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4", "patch": "@@ -1,3 +1,8 @@\n+2010-06-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43298\n+\t* gfortran.dg/nan_6.f90: New.\n+\n 2010-06-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR tree-optimization/43781"}, {"sha": "8f0af294420974b09a3f1708712a9bf5b51163b6", "filename": "gcc/testsuite/gfortran.dg/nan_6.f90", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnan_6.f90?ref=83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4", "patch": "@@ -0,0 +1,99 @@\n+! { dg-do run }\n+! { dg-add-options ieee }\n+! { dg-skip-if \"NaN not supported\" { spu-*-* } { \"*\" } { \"\" } }\n+!\n+! List-directed part of PR fortran/43298\n+! and follow up to PR fortran/34319.\n+!\n+! Check handling of \"NAN(alphanum)\"\n+!\n+character(len=200) :: str\n+real :: r\n+complex :: z\n+\n+! read_real:\n+\n+r = 1.0\n+str = 'INfinity' ; read(str,*) r\n+if (r < 0 .or. r /= r*1.1) call abort()\n+\n+r = 1.0\n+str = '-INF' ; read(str,*) r\n+if (r > 0 .or. r /= r*1.1) call abort()\n+\n+r = 1.0\n+str = '+INF' ; read(str,*) r\n+if (r < 0 .or. r /= r*1.1) call abort()\n+\n+r = 1.0\n+str = '-inFiniTY' ; read(str,*) r\n+if (r > 0 .or. r /= r*1.1) call abort()\n+\n+r = 1.0\n+str = 'NAN' ; read(str,*) r\n+if (.not. isnan(r)) call abort()\n+\n+r = 1.0\n+str = '-NAN' ; read(str,*) r\n+if (.not. isnan(r)) call abort()\n+\n+r = 1.0\n+str = '+NAN' ; read(str,*) r\n+if (.not. isnan(r)) call abort()\n+\n+r = 1.0\n+str = 'NAN(0x111)' ; read(str,*) r\n+if (.not. isnan(r)) call abort()\n+\n+r = 1.0\n+str = '-NAN(123)' ; read(str,*) r\n+if (.not. isnan(r)) call abort()\n+\n+r = 1.0\n+str = '+NAN(0xFFE)' ; read(str,*) r\n+if (.not. isnan(r)) call abort()\n+\n+\n+! parse_real\n+\n+z = cmplx(-2.0,-4.0)\n+str = '(0.0,INfinity)' ; read(str,*) z\n+if (aimag(z) < 0 .or. aimag(z) /= aimag(z)*1.1) call abort()\n+\n+z = cmplx(-2.0,-4.0)\n+str = '(-INF,0.0)' ; read(str,*) z\n+if (real(z) > 0 .or. real(z) /= real(z)*1.1) call abort()\n+\n+z = cmplx(-2.0,-4.0)\n+str = '(0.0,+INF)' ; read(str,*) z\n+if (aimag(z) < 0 .or. aimag(z) /= aimag(z)*1.1) call abort()\n+\n+z = cmplx(-2.0,-4.0)\n+str = '(-inFiniTY,0.0)' ; read(str,*) z\n+if (real(z) > 0 .or. real(z) /= real(z)*1.1) call abort()\n+\n+z = cmplx(-2.0,-4.0)\n+str = '(NAN,0.0)' ; read(str,*) z\n+if (.not. isnan(real(z))) call abort()\n+\n+z = cmplx(-2.0,-4.0)\n+str = '(0.0,-NAN)' ; read(str,*) z\n+if (.not. isnan(aimag(z))) call abort()\n+\n+z = cmplx(-2.0,-4.0)\n+str = '(+NAN,0.0)' ; read(str,*) z\n+if (.not. isnan(real(z))) call abort()\n+\n+z = cmplx(-2.0,-4.0)\n+str = '(NAN(0x111),0.0)' ; read(str,*) z\n+if (.not. isnan(real(z))) call abort()\n+\n+z = cmplx(-2.0,-4.0)\n+str = '(0.0,-NaN(123))' ; read(str,*) z\n+if (.not. isnan(aimag(z))) call abort()\n+\n+z = cmplx(-2.0,-4.0)\n+str = '(+nan(0xFFE),0.0)' ; read(str,*) z\n+if (.not. isnan(real(z))) call abort()\n+\n+end"}, {"sha": "33a312cebdc6641d6d041589415c1fab685cead7", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4", "patch": "@@ -1,3 +1,8 @@\n+2010-06-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43298\n+\t* list_read.c (parse_real, read_real): Support NAN(alphanum).\n+\n 2010-06-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* intrinsics/selected_real_kind.f90"}, {"sha": "72016b73e297df1c20acd1ce90708f37648bc79e", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=83377c6a3f5a2b1e0d3ecd718cfa7fc701f32aa4", "patch": "@@ -1199,6 +1199,21 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n       push_char (dtp, 'n');\n       push_char (dtp, 'a');\n       push_char (dtp, 'n');\n+      \n+      /* Match \"NAN(alphanum)\".  */\n+      if (c == '(')\n+\t{\n+\t  for ( ; c != ')'; c = next_char (dtp))\n+\t    if (is_separator (c))\n+\t      goto bad;\n+\t    else\n+\t      push_char (dtp, c);\n+\n+\t  push_char (dtp, ')');\n+\t  c = next_char (dtp);\n+\t  if (is_separator (c))\n+\t    unget_char (dtp, c);\n+\t}\n       goto done;\n     }\n \n@@ -1576,6 +1591,20 @@ read_real (st_parameter_dt *dtp, void * dest, int length)\n \tgoto unwind;\n       c = next_char (dtp);\n       l_push_char (dtp, c);\n+\n+      /* Match NAN(alphanum).  */\n+      if (c == '(')\n+\t{\n+\t  for (c = next_char (dtp); c != ')'; c = next_char (dtp))\n+\t    if (is_separator (c))\n+\t      goto unwind;\n+\t    else\n+\t      l_push_char (dtp, c);\n+\n+\t  l_push_char (dtp, ')');\n+\t  c = next_char (dtp);\n+\t  l_push_char (dtp, c);\n+\t}\n     }\n \n   if (!is_separator (c))"}]}