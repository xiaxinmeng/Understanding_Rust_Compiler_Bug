{"sha": "6668eb4593253eab2677d844c95b3be64487e4cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2OGViNDU5MzI1M2VhYjI2NzdkODQ0Yzk1YjNiZTY0NDg3ZTRjYg==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2016-11-02T22:10:02Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2016-11-02T22:10:02Z"}, "message": "nvptx.c (PTX_GANG_DEFAULT): Set to zero.\n\n\tgcc/\n\t* config/nvptx/nvptx.c (PTX_GANG_DEFAULT): Set to zero.\n\n\tlibgomp/\n\t* plugin/plugin-nvptx.c (nvptx_exec): Interrogate board attributes\n\tto determine default geometry.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c: Set gang\n\tdimension.\n\n\nCo-Authored-By: Nathan Sidwell <nathan@acm.org>\n\nFrom-SVN: r241803", "tree": {"sha": "4b6752f6e52b937b8a95a6f6e537ef42923f160b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b6752f6e52b937b8a95a6f6e537ef42923f160b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6668eb4593253eab2677d844c95b3be64487e4cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6668eb4593253eab2677d844c95b3be64487e4cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6668eb4593253eab2677d844c95b3be64487e4cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6668eb4593253eab2677d844c95b3be64487e4cb/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd17a9dfab9ac07061cc3abdbfe2ab6cfa68f4d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd17a9dfab9ac07061cc3abdbfe2ab6cfa68f4d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd17a9dfab9ac07061cc3abdbfe2ab6cfa68f4d8"}], "stats": {"total": 105, "additions": 100, "deletions": 5}, "files": [{"sha": "2debfb68d8a5d198376488bcb9285fc1d8e44e8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6668eb4593253eab2677d844c95b3be64487e4cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6668eb4593253eab2677d844c95b3be64487e4cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6668eb4593253eab2677d844c95b3be64487e4cb", "patch": "@@ -1,3 +1,8 @@\n+2016-11-02  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.c (PTX_GANG_DEFAULT): Set to zero.\n+\n 2016-11-02  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/xtensa.c (xtensa_output_integer_literal_parts):"}, {"sha": "782bbdecb37d648b717d53450ba8dc8c276c7207", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6668eb4593253eab2677d844c95b3be64487e4cb/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6668eb4593253eab2677d844c95b3be64487e4cb/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=6668eb4593253eab2677d844c95b3be64487e4cb", "patch": "@@ -4174,7 +4174,7 @@ nvptx_expand_builtin (tree exp, rtx target, rtx ARG_UNUSED (subtarget),\n /* Define dimension sizes for known hardware.  */\n #define PTX_VECTOR_LENGTH 32\n #define PTX_WORKER_LENGTH 32\n-#define PTX_GANG_DEFAULT  32\n+#define PTX_GANG_DEFAULT  0 /* Defer to runtime.  */\n \n /* Validate compute dimensions of an OpenACC offload or routine, fill\n    in non-unity defaults.  FN_LEVEL indicates the level at which a"}, {"sha": "a7a52f82f0cbd2b15c402638fcf7b75e81ff0a99", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6668eb4593253eab2677d844c95b3be64487e4cb/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6668eb4593253eab2677d844c95b3be64487e4cb/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6668eb4593253eab2677d844c95b3be64487e4cb", "patch": "@@ -1,3 +1,11 @@\n+2016-11-02  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@acm.org>\n+\n+\t* plugin/plugin-nvptx.c (nvptx_exec): Interrogate board attributes\n+\tto determine default geometry.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c: Set gang\n+\tdimension.\n+\n 2016-11-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* hashtab.h: Use standard GPLv3 with runtime exception"}, {"sha": "5ee350d4c1d1d8cbc287dd39c9ffc28b741b035c", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 84, "deletions": 4, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6668eb4593253eab2677d844c95b3be64487e4cb/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6668eb4593253eab2677d844c95b3be64487e4cb/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=6668eb4593253eab2677d844c95b3be64487e4cb", "patch": "@@ -45,6 +45,7 @@\n #include <stdio.h>\n #include <unistd.h>\n #include <assert.h>\n+#include <errno.h>\n \n static const char *\n cuda_error (CUresult r)\n@@ -932,9 +933,88 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n \n   if (seen_zero)\n     {\n+      /* See if the user provided GOMP_OPENACC_DIM environment\n+\t variable to specify runtime defaults. */\n+      static int default_dims[GOMP_DIM_MAX];\n+\n+      pthread_mutex_lock (&ptx_dev_lock);\n+      if (!default_dims[0])\n+\t{\n+\t  /* We only read the environment variable once.  You can't\n+\t     change it in the middle of execution.  The syntax  is\n+\t     the same as for the -fopenacc-dim compilation option.  */\n+\t  const char *env_var = getenv (\"GOMP_OPENACC_DIM\");\n+\t  if (env_var)\n+\t    {\n+\t      const char *pos = env_var;\n+\n+\t      for (i = 0; *pos && i != GOMP_DIM_MAX; i++)\n+\t\t{\n+\t\t  if (i && *pos++ != ':')\n+\t\t    break;\n+\t\t  if (*pos != ':')\n+\t\t    {\n+\t\t      const char *eptr;\n+\n+\t\t      errno = 0;\n+\t\t      long val = strtol (pos, (char **)&eptr, 10);\n+\t\t      if (errno || val < 0 || (unsigned)val != val)\n+\t\t\tbreak;\n+\t\t      default_dims[i] = (int)val;\n+\t\t      pos = eptr;\n+\t\t    }\n+\t\t}\n+\t    }\n+\n+\t  int warp_size, block_size, dev_size, cpu_size;\n+\t  CUdevice dev = nvptx_thread()->ptx_dev->dev;\n+\t  /* 32 is the default for known hardware.  */\n+\t  int gang = 0, worker = 32, vector = 32;\n+\t  CUdevice_attribute cu_tpb, cu_ws, cu_mpc, cu_tpm;\n+\n+\t  cu_tpb = CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK;\n+\t  cu_ws = CU_DEVICE_ATTRIBUTE_WARP_SIZE;\n+\t  cu_mpc = CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT;\n+\t  cu_tpm  = CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR;\n+\n+\t  if (cuDeviceGetAttribute (&block_size, cu_tpb, dev) == CUDA_SUCCESS\n+\t      && cuDeviceGetAttribute (&warp_size, cu_ws, dev) == CUDA_SUCCESS\n+\t      && cuDeviceGetAttribute (&dev_size, cu_mpc, dev) == CUDA_SUCCESS\n+\t      && cuDeviceGetAttribute (&cpu_size, cu_tpm, dev)  == CUDA_SUCCESS)\n+\t    {\n+\t      GOMP_PLUGIN_debug (0, \" warp_size=%d, block_size=%d,\"\n+\t\t\t\t \" dev_size=%d, cpu_size=%d\\n\",\n+\t\t\t\t warp_size, block_size, dev_size, cpu_size);\n+\t      gang = (cpu_size / block_size) * dev_size;\n+\t      worker = block_size / warp_size;\n+\t      vector = warp_size;\n+\t    }\n+\n+\t  /* There is no upper bound on the gang size.  The best size\n+\t     matches the hardware configuration.  Logical gangs are\n+\t     scheduled onto physical hardware.  To maximize usage, we\n+\t     should guess a large number.  */\n+\t  if (default_dims[GOMP_DIM_GANG] < 1)\n+\t    default_dims[GOMP_DIM_GANG] = gang ? gang : 1024;\n+\t  /* The worker size must not exceed the hardware.  */\n+\t  if (default_dims[GOMP_DIM_WORKER] < 1\n+\t      || (default_dims[GOMP_DIM_WORKER] > worker && gang))\n+\t    default_dims[GOMP_DIM_WORKER] = worker;\n+\t  /* The vector size must exactly match the hardware.  */\n+\t  if (default_dims[GOMP_DIM_VECTOR] < 1\n+\t      || (default_dims[GOMP_DIM_VECTOR] != vector && gang))\n+\t    default_dims[GOMP_DIM_VECTOR] = vector;\n+\n+\t  GOMP_PLUGIN_debug (0, \" default dimensions [%d,%d,%d]\\n\",\n+\t\t\t     default_dims[GOMP_DIM_GANG],\n+\t\t\t     default_dims[GOMP_DIM_WORKER],\n+\t\t\t     default_dims[GOMP_DIM_VECTOR]);\n+\t}\n+      pthread_mutex_unlock (&ptx_dev_lock);\n+\n       for (i = 0; i != GOMP_DIM_MAX; i++)\n-       if (!dims[i])\n-         dims[i] = /* TODO */ 32;\n+\tif (!dims[i])\n+\t  dims[i] = default_dims[i];\n     }\n \n   /* This reserves a chunk of a pre-allocated page of memory mapped on both\n@@ -954,8 +1034,8 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n \t\t    mapnum * sizeof (void *));\n   GOMP_PLUGIN_debug (0, \"  %s: kernel %s: launch\"\n \t\t     \" gangs=%u, workers=%u, vectors=%u\\n\",\n-\t\t     __FUNCTION__, targ_fn->launch->fn,\n-\t\t     dims[0], dims[1], dims[2]);\n+\t\t     __FUNCTION__, targ_fn->launch->fn, dims[GOMP_DIM_GANG],\n+\t\t     dims[GOMP_DIM_WORKER], dims[GOMP_DIM_VECTOR]);\n \n   // OpenACC\t\tCUDA\n   //"}, {"sha": "3ca9388d405181c191319ccbd8099710c2151437", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6668eb4593253eab2677d844c95b3be64487e4cb/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6668eb4593253eab2677d844c95b3be64487e4cb/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c?ref=6668eb4593253eab2677d844c95b3be64487e4cb", "patch": "@@ -2,6 +2,8 @@\n    not optimized away at -O0, and then confuses the target assembler.\n    { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n \n+/* { dg-additional-options \"-fopenacc-dim=32\" } */\n+\n #include <stdio.h>\n #include <openacc.h>\n "}]}