{"sha": "75eb64433edb2a48c471c50e729612a326d1b1e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVlYjY0NDMzZWRiMmE0OGM0NzFjNTBlNzI5NjEyYTMyNmQxYjFlOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-05-29T13:44:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-05-29T13:44:52Z"}, "message": "future (__async_result_of): New alias template.\n\n\t* include/std/future (__async_result_of): New alias template.\n\t(async): Use __async_result_of to pass decayed types to result_of.\n\t* testsuite/30_threads/async/lwg2021.cc: New.\n\t* doc/xml/manual/intro.xml: Document LWG 2021 status.\n\nFrom-SVN: r223866", "tree": {"sha": "81b349f28374a2ce6771d504093908e7f43c803e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81b349f28374a2ce6771d504093908e7f43c803e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75eb64433edb2a48c471c50e729612a326d1b1e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75eb64433edb2a48c471c50e729612a326d1b1e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75eb64433edb2a48c471c50e729612a326d1b1e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75eb64433edb2a48c471c50e729612a326d1b1e9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6759eddee476abdfb5e847a7de3765309f4f1e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6759eddee476abdfb5e847a7de3765309f4f1e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6759eddee476abdfb5e847a7de3765309f4f1e2d"}], "stats": {"total": 81, "additions": 70, "deletions": 11}, "files": [{"sha": "9b53161ac4cbcabf0e44f45aa494312db3ebc353", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eb64433edb2a48c471c50e729612a326d1b1e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eb64433edb2a48c471c50e729612a326d1b1e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=75eb64433edb2a48c471c50e729612a326d1b1e9", "patch": "@@ -1,5 +1,10 @@\n 2015-05-29  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/future (__async_result_of): New alias template.\n+\t(async): Use __async_result_of to pass decayed types to result_of.\n+\t* testsuite/30_threads/async/lwg2021.cc: New.\n+\t* doc/xml/manual/intro.xml: Document LWG 2021 status.\n+\n \tPR libstdc++/66327\n \t* include/bits/stl_algobase.h (__equal<true>::equal): Do not call\n \tmemcmp with null pointers."}, {"sha": "f0c66a222662c7fcd1f22359d6b515b91ab80aba", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eb64433edb2a48c471c50e729612a326d1b1e9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eb64433edb2a48c471c50e729612a326d1b1e9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=75eb64433edb2a48c471c50e729612a326d1b1e9", "patch": "@@ -814,6 +814,12 @@ requirements of the license of GCC.\n     <listitem><para>Return the end of the filled range.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2021\">2021</link>:\n+       <emphasis>Further incorrect uses of <code>result_of</code></emphasis>\n+    </term>\n+    <listitem><para>Correctly decay types in signature of <code>std::async</code>.\n+    </para></listitem></varlistentry>\n+\n   </variablelist>\n \n  </section>"}, {"sha": "216a921796af4e2f99ffc4a43d6ba58f5eff95d0", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eb64433edb2a48c471c50e729612a326d1b1e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eb64433edb2a48c471c50e729612a326d1b1e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=75eb64433edb2a48c471c50e729612a326d1b1e9", "patch": "@@ -168,12 +168,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     deferred\n   };\n \n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2021. Further incorrect usages of result_of\n   template<typename _Fn, typename... _Args>\n-    future<typename result_of<_Fn(_Args...)>::type>\n+    using __async_result_of = typename result_of<\n+      typename decay<_Fn>::type(typename decay<_Args>::type...)>::type;\n+\n+  template<typename _Fn, typename... _Args>\n+    future<__async_result_of<_Fn, _Args...>>\n     async(launch __policy, _Fn&& __fn, _Args&&... __args);\n \n   template<typename _Fn, typename... _Args>\n-    future<typename result_of<_Fn(_Args...)>::type>\n+    future<__async_result_of<_Fn, _Args...>>\n     async(_Fn&& __fn, _Args&&... __args);\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1) \\\n@@ -727,7 +733,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend class promise<_Res>;\n       template<typename> friend class packaged_task;\n       template<typename _Fn, typename... _Args>\n-        friend future<typename result_of<_Fn(_Args...)>::type>\n+        friend future<__async_result_of<_Fn, _Args...>>\n         async(launch, _Fn&&, _Args&&...);\n \n       typedef __basic_future<_Res> _Base_type;\n@@ -770,7 +776,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend class promise<_Res&>;\n       template<typename> friend class packaged_task;\n       template<typename _Fn, typename... _Args>\n-        friend future<typename result_of<_Fn(_Args...)>::type>\n+        friend future<__async_result_of<_Fn, _Args...>>\n         async(launch, _Fn&&, _Args&&...);\n \n       typedef __basic_future<_Res&> _Base_type;\n@@ -813,7 +819,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend class promise<void>;\n       template<typename> friend class packaged_task;\n       template<typename _Fn, typename... _Args>\n-        friend future<typename result_of<_Fn(_Args...)>::type>\n+        friend future<__async_result_of<_Fn, _Args...>>\n         async(launch, _Fn&&, _Args&&...);\n \n       typedef __basic_future<void> _Base_type;\n@@ -1699,10 +1705,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// async\n   template<typename _Fn, typename... _Args>\n-    future<typename result_of<_Fn(_Args...)>::type>\n+    future<__async_result_of<_Fn, _Args...>>\n     async(launch __policy, _Fn&& __fn, _Args&&... __args)\n     {\n-      typedef typename result_of<_Fn(_Args...)>::type result_type;\n       std::shared_ptr<__future_base::_State_base> __state;\n       if ((__policy & launch::async) == launch::async)\n \t{\n@@ -1714,16 +1719,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __state = __future_base::_S_make_deferred_state(std::__bind_simple(\n               std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));\n \t}\n-      return future<result_type>(__state);\n+      return future<__async_result_of<_Fn, _Args...>>(__state);\n     }\n \n   /// async, potential overload\n   template<typename _Fn, typename... _Args>\n-    inline future<typename result_of<_Fn(_Args...)>::type>\n+    inline future<__async_result_of<_Fn, _Args...>>\n     async(_Fn&& __fn, _Args&&... __args)\n     {\n-      return async(launch::async|launch::deferred, std::forward<_Fn>(__fn),\n-\t\t   std::forward<_Args>(__args)...);\n+      return std::async(launch::async|launch::deferred,\n+\t\t\tstd::forward<_Fn>(__fn),\n+\t\t\tstd::forward<_Args>(__args)...);\n     }\n \n #endif // _GLIBCXX_ASYNC_ABI_COMPAT"}, {"sha": "0c0ac3b9e566a4126e241267415e4f9ab98b5e30", "filename": "libstdc++-v3/testsuite/30_threads/async/lwg2021.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75eb64433edb2a48c471c50e729612a326d1b1e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Flwg2021.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75eb64433edb2a48c471c50e729612a326d1b1e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Flwg2021.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Flwg2021.cc?ref=75eb64433edb2a48c471c50e729612a326d1b1e9", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target *-*-freebsd* *-*-dragonfly* *-*-netbsd* *-*-linux* *-*-gnu* *-*-solaris* *-*-cygwin *-*-darwin* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++11 -pthread\" { target *-*-freebsd* *-*-dragonfly* *-*-netbsd* *-*-linux* *-*-gnu* powerpc-ibm-aix* } }\n+// { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// LWG 2021. Further incorrect usages of result_of\n+// Arguments to result_of should use decay.\n+\n+#include <future>\n+\n+struct A\n+{\n+  int operator()(int&&)&& { return 0; }\n+  void operator()(int&)& { }\n+};\n+\n+int main()\n+{\n+  A a;\n+  int i = 0;\n+  std::future<int> f = std::async(a, i);\n+}"}]}