{"sha": "ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQzZmQzNmY3MzAxMmFhNDRlZTdmNTVkMDlhMmEyYjg3Y2U5ZGQ2ZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-09-19T18:19:44Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-09-19T18:19:44Z"}, "message": "builtins.c (is_valid_printf_arglist, [...]): New functions.\n\n\t* builtins.c (is_valid_printf_arglist, expand_builtin_printf): New\n\tfunctions.\n\t(expand_builtin_fputs): Set `target' parameter for `expand_expr'.\n\t(expand_builtin): Handle BUILT_IN_PUTCHAR, BUILT_IN_PUTS and\n\tBUILT_IN_PRINTF.\n\n\t* builtins.def (BUILT_IN_PUTCHAR, BUILT_IN_PUTS, BUILT_IN_PRINTF):\n\tNew entries.\n\n\t* c-common.c (init_function_format_info): Handle __builtin_printf.\n\tSet `check_function_format_ptr'.\n\t(c_common_nodes_and_builtins): Set `puts_ftype' and\n\t`printf_ftype'.  Declare __builtin_putchar, __builtin_puts,\n\t__builtin_printf and printf.\n\n\t* tree.c, tree.h (check_function_format_ptr): Declare.\n\ntestsuite:\n\t* g++.old-deja/g++.other/virtual8.C: Declare printf correctly.\n\nFrom-SVN: r36540", "tree": {"sha": "61dfe2eae6401356a44aaf263dd08431cc930e4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61dfe2eae6401356a44aaf263dd08431cc930e4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/comments", "author": null, "committer": null, "parents": [{"sha": "6f3d20a02285d63fa46862f6fffda3153956f246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f3d20a02285d63fa46862f6fffda3153956f246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f3d20a02285d63fa46862f6fffda3153956f246"}], "stats": {"total": 194, "additions": 190, "deletions": 4}, "files": [{"sha": "35b182249f0c57dce1efdd1d9c846193e65072f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "patch": "@@ -1,3 +1,22 @@\n+2000-09-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (is_valid_printf_arglist, expand_builtin_printf): New\n+\tfunctions.\n+\t(expand_builtin_fputs): Set `target' parameter for `expand_expr'.\n+\t(expand_builtin): Handle BUILT_IN_PUTCHAR, BUILT_IN_PUTS and\n+\tBUILT_IN_PRINTF.\n+\n+\t* builtins.def (BUILT_IN_PUTCHAR, BUILT_IN_PUTS, BUILT_IN_PRINTF):\n+\tNew entries.\n+\n+\t* c-common.c (init_function_format_info): Handle __builtin_printf.\n+\tSet `check_function_format_ptr'.\n+\t(c_common_nodes_and_builtins): Set `puts_ftype' and\n+\t`printf_ftype'.  Declare __builtin_putchar, __builtin_puts,\n+\t__builtin_printf and printf.\n+\n+\t* tree.c, tree.h (check_function_format_ptr): Declare.\n+\n Tue 19-Sep-2000 18:26:57 BST  Neil Booth  <NeilB@earthling.net>\n \n         * cppfiles.c (read_include_file): Take no special action for"}, {"sha": "052972308255f0c2a6aa130cbb89067e22ca8b95", "filename": "gcc/builtins.c", "status": "modified", "additions": 129, "deletions": 2, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "patch": "@@ -111,6 +111,8 @@ static rtx expand_builtin_strlen\tPARAMS ((tree, rtx,\n static rtx expand_builtin_alloca\tPARAMS ((tree, rtx));\n static rtx expand_builtin_ffs\t\tPARAMS ((tree, rtx, rtx));\n static rtx expand_builtin_frame_address\tPARAMS ((tree));\n+static int is_valid_printf_arglist\tPARAMS ((tree));\n+static rtx expand_builtin_printf\tPARAMS ((tree, int));\n static rtx expand_builtin_fputs\t\tPARAMS ((tree, int));\n static tree stabilize_va_list\t\tPARAMS ((tree, int));\n static rtx expand_builtin_expect\tPARAMS ((tree, rtx));\n@@ -2367,7 +2369,122 @@ expand_builtin_fputs (arglist, ignore)\n   call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n \t\t     call_expr, newarglist, NULL_TREE);\n   TREE_SIDE_EFFECTS (call_expr) = 1;\n-  return expand_expr (call_expr, NULL_RTX, VOIDmode, 0);\n+  return expand_expr (call_expr, (ignore ? const0_rtx : NULL_RTX),\n+\t\t      VOIDmode, EXPAND_NORMAL);\n+}\n+\n+/* Check an arglist to *printf for problems.  The arglist should start\n+   at the format specifier, with the remaining arguments immediately\n+   following it. */\n+static int\n+is_valid_printf_arglist (arglist)\n+  tree arglist;\n+{\n+  /* Save this value so we can restore it later. */\n+  const int SAVE_pedantic = pedantic;\n+  int diagnostic_occurred = 0;\n+\n+  /* If we can't check the format, be safe and return false. */\n+  if (!check_function_format_ptr)\n+    return 0;\n+  \n+  /* Set this to a known value so the user setting won't affect code\n+     generation.  */\n+  pedantic = 1;\n+  /* Check to make sure there are no format specifier errors. */\n+  check_function_format_ptr (&diagnostic_occurred,\n+\t\t\t     maybe_get_identifier(\"printf\"),\n+\t\t\t     NULL_TREE, arglist);\n+\n+  /* Restore the value of `pedantic'. */\n+  pedantic = SAVE_pedantic;\n+\n+  /* If calling `check_function_format_ptr' produces a warning, we\n+     return false, otherwise we return true. */\n+  return ! diagnostic_occurred;\n+}\n+\n+/* If the arguments passed to printf are suitable for optimizations,\n+   we attempt to transform the call. */\n+static rtx\n+expand_builtin_printf (arglist, ignore)\n+     tree arglist;\n+     int ignore;\n+{\n+  tree fn_putchar = built_in_decls[BUILT_IN_PUTCHAR],\n+    fn_puts = built_in_decls[BUILT_IN_PUTS];\n+  tree call_expr, fn;\n+  tree format_arg, stripped_string;\n+\n+  /* If the return value is used, or the replacement _DECL isn't\n+     initialized, don't do the transformation. */\n+  if (!ignore || !fn_putchar || !fn_puts)\n+    return 0;\n+\n+  /* Verify the required arguments in the original call. */\n+  if (arglist == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE))\n+    return 0;\n+  \n+  /* Check the specifier vs. the parameters. */\n+  if (!is_valid_printf_arglist (arglist))\n+    return 0;\n+  \n+  format_arg = TREE_VALUE (arglist);\n+  stripped_string = format_arg;\n+  STRIP_NOPS (stripped_string);\n+  if (stripped_string && TREE_CODE (stripped_string) == ADDR_EXPR)\n+    stripped_string = TREE_OPERAND (stripped_string, 0);\n+\n+  /* If the format specifier isn't a STRING_CST, punt.  */\n+  if (TREE_CODE (stripped_string) != STRING_CST)\n+    return 0;\n+  \n+  /* OK!  We can attempt optimization.  */\n+\n+  /* If the format specifier was \"%s\\n\", call __builtin_puts(arg2). */\n+  if (strcmp (TREE_STRING_POINTER (stripped_string), \"%s\\n\") == 0)\n+    {\n+      arglist = TREE_CHAIN (arglist);\n+      fn = fn_puts;\n+    }\n+  /* If the format specifier was \"%c\", call __builtin_putchar (arg2). */\n+  else if (strcmp (TREE_STRING_POINTER (stripped_string), \"%c\") == 0)\n+    {\n+      arglist = TREE_CHAIN (arglist);\n+      fn = fn_putchar;\n+    }\n+  else\n+    {\n+     /* We can't handle anything else with % args or %% ... yet. */\n+      if (strchr (TREE_STRING_POINTER (stripped_string), '%'))\n+\treturn 0;\n+      \n+      /* If the resulting constant string has a length of 1, call\n+         putchar.  Note, TREE_STRING_LENGTH includes the terminating\n+         NULL in its count.  */\n+      if (TREE_STRING_LENGTH (stripped_string) == 2)\n+        {\n+\t  /* Given printf(\"c\"), (where c is any one character,)\n+             convert \"c\"[0] to an int and pass that to the replacement\n+             function. */\n+\t  arglist = build_int_2 (TREE_STRING_POINTER (stripped_string)[0], 0);\n+\t  arglist = build_tree_list (NULL_TREE, arglist);\n+\t  \n+\t  fn = fn_putchar;\n+        }\n+      else\n+\t/* We'd like to arrange to call fputs(string) here, but we\n+           need stdout and don't have a way to get it ... yet.  */\n+\treturn 0;\n+    }\n+  \n+  call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n+  call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n+\t\t     call_expr, arglist, NULL_TREE);\n+  TREE_SIDE_EFFECTS (call_expr) = 1;\n+  return expand_expr (call_expr, (ignore ? const0_rtx : NULL_RTX),\n+\t\t      VOIDmode, EXPAND_NORMAL);\n }\n \n /* Expand a call to __builtin_expect.  We return our argument and\n@@ -2444,7 +2561,9 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || fcode == BUILT_IN_BCMP || fcode == BUILT_IN_BZERO\n \t  || fcode == BUILT_IN_STRLEN || fcode == BUILT_IN_STRCPY\n \t  || fcode == BUILT_IN_STRCMP || fcode == BUILT_IN_FFS\n-\t  || fcode == BUILT_IN_FPUTC || fcode == BUILT_IN_FPUTS))\n+\t  || fcode == BUILT_IN_PUTCHAR || fcode == BUILT_IN_PUTS\n+\t  || fcode == BUILT_IN_PRINTF || fcode == BUILT_IN_FPUTC\n+\t  || fcode == BUILT_IN_FPUTS))\n     return expand_call (exp, target, ignore);\n \n   switch (fcode)\n@@ -2657,6 +2776,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       emit_barrier ();\n       return const0_rtx;\n \n+    case BUILT_IN_PUTCHAR:\n+    case BUILT_IN_PUTS:\n     case BUILT_IN_FPUTC:\n       break;\n       \n@@ -2666,6 +2787,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn target;\n       break;\n       \n+    case BUILT_IN_PRINTF:\n+      target = expand_builtin_printf (arglist, ignore);\n+      if (target)\n+\treturn target;\n+      break;\n+      \n       /* Various hooks for the DWARF 2 __throw routine.  */\n     case BUILT_IN_UNWIND_INIT:\n       expand_builtin_unwind_init ();"}, {"sha": "7220cf9124c185c14d533edcc63f314a089f9341", "filename": "gcc/builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "patch": "@@ -59,6 +59,9 @@ DEF_BUILTIN(BUILT_IN_LONGJMP)\n DEF_BUILTIN(BUILT_IN_TRAP)\n \n   /* Stdio builtins.  */\n+DEF_BUILTIN(BUILT_IN_PUTCHAR)\n+DEF_BUILTIN(BUILT_IN_PUTS)\n+DEF_BUILTIN(BUILT_IN_PRINTF)\n DEF_BUILTIN(BUILT_IN_FPUTC)\n DEF_BUILTIN(BUILT_IN_FPUTS)\n "}, {"sha": "fec74eb69ef0462361786788f943eb4d5d8d396c", "filename": "gcc/c-common.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "patch": "@@ -1566,6 +1566,8 @@ init_function_format_info ()\n       /* Functions from ISO/IEC 9899:1990.  */\n       record_function_format (get_identifier (\"printf\"), NULL_TREE,\n \t\t\t      printf_format_type, 1, 2);\n+      record_function_format (get_identifier (\"__builtin_printf\"), NULL_TREE,\n+\t\t\t      printf_format_type, 1, 2);\n       record_function_format (get_identifier (\"fprintf\"), NULL_TREE,\n \t\t\t      printf_format_type, 2, 3);\n       record_function_format (get_identifier (\"sprintf\"), NULL_TREE,\n@@ -1608,6 +1610,8 @@ init_function_format_info ()\n       record_international_format (get_identifier (\"dgettext\"), NULL_TREE, 2);\n       record_international_format (get_identifier (\"dcgettext\"), NULL_TREE, 2);\n     }\n+\n+  check_function_format_ptr = check_function_format;\n }\n \n /* Record information for argument format checking.  FUNCTION_IDENT is\n@@ -4006,7 +4010,7 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n {\n   tree temp;\n   tree memcpy_ftype, memset_ftype, strlen_ftype;\n-  tree bzero_ftype, bcmp_ftype;\n+  tree bzero_ftype, bcmp_ftype, puts_ftype, printf_ftype;\n   tree endlink, int_endlink, double_endlink, unsigned_endlink;\n   tree sizetype_endlink;\n   tree ptr_ftype, ptr_ftype_unsigned;\n@@ -4162,6 +4166,18 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t\t\t\t\t traditional_cptr_type_node,\n \t\t\t\t\t\t traditional_len_endlink)));\n \n+  /* Prototype for puts.  */\n+  puts_ftype\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n+\t\t\t\t      endlink));\n+\n+  /* Prototype for printf.  */\n+  printf_ftype\n+    = build_function_type (integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n+\t\t\t\t      NULL_TREE));\n+\n   builtin_function (\"__builtin_constant_p\", default_function_type,\n \t\t    BUILT_IN_CONSTANT_P, BUILT_IN_NORMAL, NULL_PTR);\n \n@@ -4348,6 +4364,14 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t    BUILT_IN_COS, BUILT_IN_NORMAL, \"cos\");\n   builtin_function (\"__builtin_cosl\", ldouble_ftype_ldouble,\n \t\t    BUILT_IN_COS, BUILT_IN_NORMAL, \"cosl\");\n+  built_in_decls[BUILT_IN_PUTCHAR] =\n+    builtin_function (\"__builtin_putchar\", int_ftype_int,\n+\t\t      BUILT_IN_PUTCHAR, BUILT_IN_NORMAL, \"putchar\");\n+  built_in_decls[BUILT_IN_PUTS] =\n+    builtin_function (\"__builtin_puts\", puts_ftype,\n+\t\t      BUILT_IN_PUTS, BUILT_IN_NORMAL, \"puts\");\n+  builtin_function (\"__builtin_printf\", printf_ftype,\n+\t\t    BUILT_IN_PRINTF, BUILT_IN_NORMAL, \"printf\");\n   /* We declare these without argument so that the initial declaration\n      for these identifiers is a builtin.  That allows us to redeclare\n      them later with argument without worrying about the explicit\n@@ -4402,6 +4426,8 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"cosl\", ldouble_ftype_ldouble, BUILT_IN_COS,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n+      builtin_function (\"printf\", printf_ftype, BUILT_IN_PRINTF,\n+\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       /* We declare these without argument so that the initial\n          declaration for these identifiers is a builtin.  That allows\n          us to redeclare them later with argument without worrying"}, {"sha": "d32659ba8985cc499eee9f59b0c193428ac3f5c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "patch": "@@ -1,3 +1,7 @@\n+2000-09-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* g++.old-deja/g++.other/virtual8.C: Declare printf correctly.\n+\n 2000-09-19  Richard Henderson  <rth@cygnus.com>\n \n \t* gcc.dg/compare2.c (case 10): XFAIL."}, {"sha": "32c8e54cc2804f5cc2dbbc1f73095e94ef11dbd2", "filename": "gcc/testsuite/g++.old-deja/g++.other/virtual8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual8.C?ref=ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "patch": "@@ -1,4 +1,4 @@\n-extern \"C\" void printf (const char*, ...);\n+extern \"C\" int printf (const char*, ...);\n \n struct A\n {"}, {"sha": "ef27a78a17f441d8cbda3d5e006e36c7aef46c8c", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "patch": "@@ -246,6 +246,10 @@ static int next_decl_uid;\n /* Unique id for next type created.  */\n static int next_type_uid = 1;\n \n+/* Pointer to function to check the format of printf, etc.  This is\n+   used by the backend, e.g. builtins.c.  */\n+void (*check_function_format_ptr) PARAMS ((int *, tree, tree, tree)) = 0;\n+\n /* Here is how primitive or already-canonicalized types' hash\n    codes are made.  */\n #define TYPE_HASH(TYPE) ((unsigned long) (TYPE) & 0777777)"}, {"sha": "f55b4b640e3b57ee77256c7f4057f8917790662d", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ad3fd36f73012aa44ee7f55d09a2a2b87ce9dd6e", "patch": "@@ -2441,6 +2441,9 @@ extern const char * const language_string;\n extern tree builtin_function\t\t\tPARAMS ((const char *, tree, int,\n \t\t\t\t\t\t       enum built_in_class,\n \t\t\t\t\t\t       const char *));\n+/* Pointer to function to check the format of printf, etc.  This is\n+   used by the backend, e.g. builtins.c.  */\n+extern void (*check_function_format_ptr) PARAMS ((int *, tree, tree, tree));\n \f\n /* In tree.c */\n extern char *perm_calloc\t\t\tPARAMS ((int, long));"}]}