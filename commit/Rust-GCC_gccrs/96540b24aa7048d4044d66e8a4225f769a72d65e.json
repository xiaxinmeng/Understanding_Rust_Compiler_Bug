{"sha": "96540b24aa7048d4044d66e8a4225f769a72d65e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY1NDBiMjRhYTcwNDhkNDA0NGQ2NmU4YTQyMjVmNzY5YTcyZDY1ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-11-18T10:09:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-11-18T10:09:10Z"}, "message": "trans.c (Call_to_gnu): For an Out parameter passed by copy and that don't need to be copied in...\n\n\t* gcc-interface/trans.c (Call_to_gnu): For an Out parameter passed by\n\tcopy and that don't need to be  copied in, only evaluate its address.\n\nFrom-SVN: r204943", "tree": {"sha": "63dace76d2dab828da63661f1b501a26fced05ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63dace76d2dab828da63661f1b501a26fced05ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96540b24aa7048d4044d66e8a4225f769a72d65e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96540b24aa7048d4044d66e8a4225f769a72d65e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96540b24aa7048d4044d66e8a4225f769a72d65e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96540b24aa7048d4044d66e8a4225f769a72d65e/comments", "author": null, "committer": null, "parents": [{"sha": "9adcf5b40abb931351d356213eee9e6f79865128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adcf5b40abb931351d356213eee9e6f79865128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adcf5b40abb931351d356213eee9e6f79865128"}], "stats": {"total": 113, "additions": 108, "deletions": 5}, "files": [{"sha": "411eac6fe1826cec621e9b4e0beb940390bccd12", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=96540b24aa7048d4044d66e8a4225f769a72d65e", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Call_to_gnu): For an Out parameter passed by\n+\tcopy and that don't need to be  copied in, only evaluate its address.\n+\n 2013-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Deal with an"}, {"sha": "cbfb7e7fe0df8084a0f23478109673617680268a", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=96540b24aa7048d4044d66e8a4225f769a72d65e", "patch": "@@ -4130,9 +4130,7 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \tgnu_name\n \t  = convert (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (gnu_name))), gnu_name);\n \n-      /* If we have not saved a GCC object for the formal, it means it is an\n-\t Out parameter not passed by reference and that need not be copied in.\n-\t Otherwise, first see if the parameter is passed by reference.  */\n+      /* First see if the parameter is passed by reference.  */\n       if (is_true_formal_parm && DECL_BY_REF_P (gnu_formal))\n \t{\n \t  if (Ekind (gnat_formal) != E_In_Parameter)\n@@ -4178,6 +4176,9 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t  gnu_formal_type = TREE_TYPE (gnu_formal);\n \t  gnu_actual = build_unary_op (ADDR_EXPR, gnu_formal_type, gnu_actual);\n \t}\n+\n+      /* Then see if the parameter is an array passed to a foreign convention\n+\t subprogram.  */\n       else if (is_true_formal_parm && DECL_BY_COMPONENT_PTR_P (gnu_formal))\n \t{\n \t  gnu_formal_type = TREE_TYPE (gnu_formal);\n@@ -4198,6 +4199,8 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t     but this is the most likely to work in all cases.  */\n \t  gnu_actual = build_unary_op (ADDR_EXPR, gnu_formal_type, gnu_actual);\n \t}\n+\n+      /* Then see if the parameter is passed by descriptor.  */\n       else if (is_true_formal_parm && DECL_BY_DESCRIPTOR_P (gnu_formal))\n \t{\n \t  gnu_actual = convert (gnu_formal_type, gnu_actual);\n@@ -4214,18 +4217,27 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t\t\t\t\t (TREE_TYPE (TREE_TYPE (gnu_formal)),\n \t\t\t\t\t  gnu_actual, gnat_actual));\n \t}\n+\n+      /* Otherwise the parameter is passed by copy.  */\n       else\n \t{\n \t  tree gnu_size;\n \n \t  if (Ekind (gnat_formal) != E_In_Parameter)\n \t    gnu_name_list = tree_cons (NULL_TREE, gnu_name, gnu_name_list);\n \n+\t  /* If we didn't create a PARM_DECL for the formal, this means that\n+\t     it is an Out parameter not passed by reference and that need not\n+\t     be copied in.  In this case, the value of the actual need not be\n+\t     read.  However, we still need to make sure that its side-effects\n+\t     are evaluated before the call, so we evaluate its address.  */\n \t  if (!is_true_formal_parm)\n \t    {\n-\t      /* Make sure side-effects are evaluated before the call.  */\n \t      if (TREE_SIDE_EFFECTS (gnu_name))\n-\t\tappend_to_statement_list (gnu_name, &gnu_stmt_list);\n+\t\t{\n+\t\t  tree addr = build_unary_op (ADDR_EXPR, NULL_TREE, gnu_name);\n+\t\t  append_to_statement_list (addr, &gnu_stmt_list);\n+\t\t}\n \t      continue;\n \t    }\n "}, {"sha": "e5e9ecbe46afdcb689ebb57fd0ec6c1dd2c37adf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96540b24aa7048d4044d66e8a4225f769a72d65e", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/volatile11.adb: New test.\n+\t* gnat.dg/volatile11_pkg.ad[sb]: New helper.\n+\n 2013-11-18  Yury Gribov  <y.gribov@samsung.com>\n \n \tPR sanitizer/59106"}, {"sha": "54031d975af0bbb3315a6d60be4443683b13d6d2", "filename": "gcc/testsuite/gnat.dg/volatile11.adb", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile11.adb?ref=96540b24aa7048d4044d66e8a4225f769a72d65e", "patch": "@@ -0,0 +1,41 @@\n+-- { dg-do run }\n+-- { dg-options \"-O -gnatp\" }\n+\n+with Volatile11_Pkg; use Volatile11_Pkg;\n+\n+procedure Volatile11 is\n+\n+      Value : Integer := 1;\n+      Bit1 : Boolean := false;\n+      pragma Volatile (Bit1);\n+      Bit2 : Boolean := false;\n+      pragma Volatile (Bit2);\n+      Bit3 : Boolean := false;\n+      pragma Volatile (Bit3);\n+      Bit4 : Boolean := false;\n+      pragma Volatile (Bit4);\n+      Bit5 : Boolean := false;\n+      pragma Volatile (Bit5);\n+      Bit6 : Boolean := false;\n+      pragma Volatile (Bit6);\n+      Bit7 : Boolean := false;\n+      pragma Volatile (Bit7);\n+      Bit8 : Boolean := false;\n+      pragma Volatile (Bit8);\n+\n+begin\n+      Bit_Test(Input   => Value,\n+               Output1 => Bit1,\n+               Output2 => Bit2,\n+               Output3 => Bit3,\n+               Output4 => Bit4,\n+               Output5 => Bit5,\n+               Output6 => Bit6,\n+               Output7 => Bit7,\n+               Output8 => F.all);\n+\n+      -- Check that F is invoked before Bit_Test\n+      if B /= True then\n+        raise Program_Error;\n+      end if;\n+end;"}, {"sha": "f82484036c2753bcc142f6ce3bc105b8101b7a58", "filename": "gcc/testsuite/gnat.dg/volatile11_pkg.adb", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile11_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile11_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile11_pkg.adb?ref=96540b24aa7048d4044d66e8a4225f769a72d65e", "patch": "@@ -0,0 +1,25 @@\n+package body Volatile11_Pkg is\r\n+\r\n+   procedure Bit_Test(Input : in Integer;\r\n+                      Output1 : out Boolean; Output2 : out Boolean;\r\n+                      Output3 : out Boolean; Output4 : out Boolean;\r\n+                      Output5 : out Boolean; Output6 : out Boolean;\r\n+                      Output7 : out Boolean; Output8 : out Boolean)  is\r\n+  begin\r\n+    Output8 := B;\r\n+    Output7 := Input = 7;\r\n+    Output6 := Input = 6;\r\n+    Output5 := Input = 5;\r\n+    Output4 := Input = 4;\r\n+    Output3 := Input = 3;\r\n+    Output2 := Input = 2;\r\n+    Output1 := Input = 1;\r\n+  end Bit_Test;\r\n+\r\n+  function F return Ptr is\r\n+  begin\r\n+    B := True;\r\n+    return B'Access;\r\n+  end;\r\n+\r\n+end Volatile11_Pkg;\r"}, {"sha": "af6822d97ec3d67cfffb81031c84c2d6c61e6235", "filename": "gcc/testsuite/gnat.dg/volatile11_pkg.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile11_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96540b24aa7048d4044d66e8a4225f769a72d65e/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile11_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvolatile11_pkg.ads?ref=96540b24aa7048d4044d66e8a4225f769a72d65e", "patch": "@@ -0,0 +1,15 @@\n+package Volatile11_Pkg is\r\n+\r\n+   procedure Bit_Test(Input : in Integer;\r\n+                      Output1 : out Boolean; Output2 : out Boolean;\r\n+                      Output3 : out Boolean; Output4 : out Boolean;\r\n+                      Output5 : out Boolean; Output6 : out Boolean;\r\n+                      Output7 : out Boolean; Output8 : out Boolean);\r\n+\r\n+   type Ptr is access all Boolean;\r\n+\r\n+   B : aliased Boolean := False;\r\n+\r\n+   function F return Ptr;\r\n+\r\n+end Volatile11_Pkg;\r"}]}