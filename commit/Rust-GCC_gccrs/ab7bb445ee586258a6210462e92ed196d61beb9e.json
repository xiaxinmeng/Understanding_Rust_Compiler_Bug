{"sha": "ab7bb445ee586258a6210462e92ed196d61beb9e", "node_id": "C_kwDOANBUbNoAKGFiN2JiNDQ1ZWU1ODYyNThhNjIxMDQ2MmU5MmVkMTk2ZDYxYmViOWU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-03-08T03:18:56Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-10T08:24:23Z"}, "message": "RISC-V: Fine tune merge operand constraint for integer/load/store\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins-bases.cc: Split indexed load\n\tpatterns according to RVV ISA.\n\t* config/riscv/vector-iterators.md: New iterators.\n\t* config/riscv/vector.md\n\t(@pred_indexed_<order>load<VNX1_QHSD:mode><VNX1_QHSDI:mode>): Remove.\n\t(@pred_indexed_<order>load<mode>_same_eew): New pattern.\n\t(@pred_indexed_<order>load<mode>_x2_greater_eew): Ditto.\n\t(@pred_indexed_<order>load<mode>_x4_greater_eew): Ditto.\n\t(@pred_indexed_<order>load<mode>_x8_greater_eew): Ditto.\n\t(@pred_indexed_<order>load<mode>_x2_smaller_eew): Ditto.\n\t(@pred_indexed_<order>load<mode>_x4_smaller_eew): Ditto.\n\t(@pred_indexed_<order>load<mode>_x8_smaller_eew): Ditto.\n\t(@pred_indexed_<order>load<VNX2_QHSD:mode><VNX2_QHSDI:mode>): Remove.\n\t(@pred_indexed_<order>load<VNX4_QHSD:mode><VNX4_QHSDI:mode>): Ditto.\n\t(@pred_indexed_<order>load<VNX8_QHSD:mode><VNX8_QHSDI:mode>): Ditto.\n\t(@pred_indexed_<order>load<VNX16_QHS:mode><VNX16_QHSI:mode>): Ditto.\n\t(@pred_indexed_<order>load<VNX32_QH:mode><VNX32_QHI:mode>): Ditto.\n\t(@pred_indexed_<order>load<VNX64_Q:mode><VNX64_Q:mode>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/merge_constraint-1.c: New test.", "tree": {"sha": "24b7ac55b1b5f6d0d2c9aeceec6f4fb056f96392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24b7ac55b1b5f6d0d2c9aeceec6f4fb056f96392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab7bb445ee586258a6210462e92ed196d61beb9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab7bb445ee586258a6210462e92ed196d61beb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab7bb445ee586258a6210462e92ed196d61beb9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab7bb445ee586258a6210462e92ed196d61beb9e/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc73876fc9a0df4c3af2766319402d14d39db33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc73876fc9a0df4c3af2766319402d14d39db33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc73876fc9a0df4c3af2766319402d14d39db33"}], "stats": {"total": 1715, "additions": 1065, "deletions": 650}, "files": [{"sha": "a041a9a1f2909728e6b4cce40c7fd7bfa0194503", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7bb445ee586258a6210462e92ed196d61beb9e/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7bb445ee586258a6210462e92ed196d61beb9e/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=ab7bb445ee586258a6210462e92ed196d61beb9e", "patch": "@@ -129,9 +129,57 @@ class loadstore : public function_base\n \t    code_for_pred_indexed_store (unspec, e.vector_mode (),\n \t\t\t\t\t e.index_mode ()));\n \telse\n-\t  return e.use_exact_insn (\n-\t    code_for_pred_indexed_load (unspec, e.vector_mode (),\n-\t\t\t\t\te.index_mode ()));\n+\t  {\n+\t    unsigned src_eew_bitsize\n+\t      = GET_MODE_BITSIZE (GET_MODE_INNER (e.index_mode ()));\n+\t    unsigned dst_eew_bitsize\n+\t      = GET_MODE_BITSIZE (GET_MODE_INNER (e.vector_mode ()));\n+\t    if (dst_eew_bitsize == src_eew_bitsize)\n+\t      return e.use_exact_insn (\n+\t\tcode_for_pred_indexed_load_same_eew (unspec, e.vector_mode ()));\n+\t    else if (dst_eew_bitsize > src_eew_bitsize)\n+\t      {\n+\t\tunsigned factor = dst_eew_bitsize / src_eew_bitsize;\n+\t\tswitch (factor)\n+\t\t  {\n+\t\t  case 2:\n+\t\t    return e.use_exact_insn (\n+\t\t      code_for_pred_indexed_load_x2_greater_eew (\n+\t\t\tunspec, e.vector_mode ()));\n+\t\t  case 4:\n+\t\t    return e.use_exact_insn (\n+\t\t      code_for_pred_indexed_load_x4_greater_eew (\n+\t\t\tunspec, e.vector_mode ()));\n+\t\t  case 8:\n+\t\t    return e.use_exact_insn (\n+\t\t      code_for_pred_indexed_load_x8_greater_eew (\n+\t\t\tunspec, e.vector_mode ()));\n+\t\t  default:\n+\t\t    gcc_unreachable ();\n+\t\t  }\n+\t      }\n+\t    else\n+\t      {\n+\t\tunsigned factor = src_eew_bitsize / dst_eew_bitsize;\n+\t\tswitch (factor)\n+\t\t  {\n+\t\t  case 2:\n+\t\t    return e.use_exact_insn (\n+\t\t      code_for_pred_indexed_load_x2_smaller_eew (\n+\t\t\tunspec, e.vector_mode ()));\n+\t\t  case 4:\n+\t\t    return e.use_exact_insn (\n+\t\t      code_for_pred_indexed_load_x4_smaller_eew (\n+\t\t\tunspec, e.vector_mode ()));\n+\t\t  case 8:\n+\t\t    return e.use_exact_insn (\n+\t\t      code_for_pred_indexed_load_x8_smaller_eew (\n+\t\t\tunspec, e.vector_mode ()));\n+\t\t  default:\n+\t\t    gcc_unreachable ();\n+\t\t  }\n+\t      }\n+\t  }\n       }\n     else if (LST_TYPE == LST_STRIDED)\n       {"}, {"sha": "7dbbadec37cc08563b15fcf4ed6fc59c0085c102", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 176, "deletions": 38, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7bb445ee586258a6210462e92ed196d61beb9e/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7bb445ee586258a6210462e92ed196d61beb9e/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=ab7bb445ee586258a6210462e92ed196d61beb9e", "patch": "@@ -98,6 +98,65 @@\n   (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n ])\n \n+(define_mode_iterator VEEWEXT2 [\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n+  VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx8SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx16SF \"TARGET_VECTOR_ELEN_FP_32 && TARGET_MIN_VLEN > 32\")\n+  (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx2DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx4DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n+])\n+\n+(define_mode_iterator VEEWEXT4 [\n+  VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx8SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx16SF \"TARGET_VECTOR_ELEN_FP_32 && TARGET_MIN_VLEN > 32\")\n+  (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx2DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx4DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n+])\n+\n+(define_mode_iterator VEEWEXT8 [\n+  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx1DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx2DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx4DF \"TARGET_VECTOR_ELEN_FP_64\")\n+  (VNx8DF \"TARGET_VECTOR_ELEN_FP_64\")\n+])\n+\n+(define_mode_iterator VEEWTRUNC2 [\n+  VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI\n+  VNx1SI VNx2SI VNx4SI VNx8SI\n+  (VNx1SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx2SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx4SF \"TARGET_VECTOR_ELEN_FP_32\")\n+  (VNx8SF \"TARGET_VECTOR_ELEN_FP_32\")\n+])\n+\n+(define_mode_iterator VEEWTRUNC4 [\n+  VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI\n+  VNx1HI VNx2HI VNx4HI VNx8HI\n+])\n+\n+(define_mode_iterator VEEWTRUNC8 [\n+  VNx1QI VNx2QI VNx4QI VNx8QI\n+])\n+\n (define_mode_iterator VLMULEXT2 [\n   VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI\n   VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI\n@@ -483,6 +542,42 @@\n   (VNx1DF \"64\") (VNx2DF \"64\") (VNx4DF \"64\") (VNx8DF \"64\")\n ])\n \n+(define_mode_attr double_trunc_sew [\n+  (VNx1HI \"8\") (VNx2HI \"8\") (VNx4HI \"8\") (VNx8HI \"8\") (VNx16HI \"8\") (VNx32HI \"8\")\n+  (VNx1SI \"16\") (VNx2SI \"16\") (VNx4SI \"16\") (VNx8SI \"16\") (VNx16SI \"16\")\n+  (VNx1DI \"32\") (VNx2DI \"32\") (VNx4DI \"32\") (VNx8DI \"32\")\n+  (VNx1SF \"16\") (VNx2SF \"16\") (VNx4SF \"16\") (VNx8SF \"16\") (VNx16SF \"16\")\n+  (VNx1DF \"32\") (VNx2DF \"32\") (VNx4DF \"32\") (VNx8DF \"32\")\n+])\n+\n+(define_mode_attr quad_trunc_sew [\n+  (VNx1SI \"8\") (VNx2SI \"8\") (VNx4SI \"8\") (VNx8SI \"8\") (VNx16SI \"8\")\n+  (VNx1DI \"16\") (VNx2DI \"16\") (VNx4DI \"16\") (VNx8DI \"16\")\n+  (VNx1SF \"8\") (VNx2SF \"8\") (VNx4SF \"8\") (VNx8SF \"8\") (VNx16SF \"8\")\n+  (VNx1DF \"16\") (VNx2DF \"16\") (VNx4DF \"16\") (VNx8DF \"16\")\n+])\n+\n+(define_mode_attr oct_trunc_sew [\n+  (VNx1DI \"8\") (VNx2DI \"8\") (VNx4DI \"8\") (VNx8DI \"8\")\n+  (VNx1DF \"8\") (VNx2DF \"8\") (VNx4DF \"8\") (VNx8DF \"8\")\n+])\n+\n+(define_mode_attr double_ext_sew [\n+  (VNx1QI \"16\") (VNx2QI \"16\") (VNx4QI \"16\") (VNx8QI \"16\") (VNx16QI \"16\") (VNx32QI \"16\")\n+  (VNx1HI \"32\") (VNx2HI \"32\") (VNx4HI \"32\") (VNx8HI \"32\") (VNx16HI \"32\")\n+  (VNx1SI \"64\") (VNx2SI \"64\") (VNx4SI \"64\") (VNx8SI \"64\")\n+  (VNx1SF \"64\") (VNx2SF \"64\") (VNx4SF \"64\") (VNx8SF \"64\")\n+])\n+\n+(define_mode_attr quad_ext_sew [\n+  (VNx1QI \"32\") (VNx2QI \"32\") (VNx4QI \"32\") (VNx8QI \"32\") (VNx16QI \"32\")\n+  (VNx1HI \"64\") (VNx2HI \"64\") (VNx4HI \"64\") (VNx8HI \"64\")\n+])\n+\n+(define_mode_attr oct_ext_sew [\n+  (VNx1QI \"64\") (VNx2QI \"64\") (VNx4QI \"64\") (VNx8QI \"64\")\n+])\n+\n (define_mode_attr V_DOUBLE_TRUNC [\n   (VNx1HI \"VNx1QI\") (VNx2HI \"VNx2QI\")  (VNx4HI \"VNx4QI\")  (VNx8HI \"VNx8QI\")\n   (VNx16HI \"VNx16QI\") (VNx32HI \"VNx32QI\")\n@@ -503,6 +598,49 @@\n   (VNx1DI \"VNx1QI\") (VNx2DI \"VNx2QI\") (VNx4DI \"VNx4QI\") (VNx8DI \"VNx8QI\")\n ])\n \n+(define_mode_attr VINDEX_DOUBLE_TRUNC [\n+  (VNx1HI \"VNx1QI\") (VNx2HI \"VNx2QI\")  (VNx4HI \"VNx4QI\")  (VNx8HI \"VNx8QI\")\n+  (VNx16HI \"VNx16QI\") (VNx32HI \"VNx32QI\")\n+  (VNx1SI \"VNx1HI\") (VNx2SI \"VNx2HI\") (VNx4SI \"VNx4HI\") (VNx8SI \"VNx8HI\")\n+  (VNx16SI \"VNx16HI\")\n+  (VNx1SF \"VNx1HI\") (VNx2SF \"VNx2HI\") (VNx4SF \"VNx4HI\") (VNx8SF \"VNx8HI\")\n+  (VNx16SF \"VNx16HI\")\n+  (VNx1DI \"VNx1SI\") (VNx2DI \"VNx2SI\") (VNx4DI \"VNx4SI\") (VNx8DI \"VNx8SI\")\n+  (VNx1DF \"VNx1SI\") (VNx2DF \"VNx2SI\") (VNx4DF \"VNx4SI\") (VNx8DF \"VNx8SI\")\n+])\n+\n+(define_mode_attr VINDEX_QUAD_TRUNC [\n+  (VNx1SI \"VNx1QI\") (VNx2SI \"VNx2QI\") (VNx4SI \"VNx4QI\") (VNx8SI \"VNx8QI\")\n+  (VNx16SI \"VNx16QI\")\n+  (VNx1DI \"VNx1HI\") (VNx2DI \"VNx2HI\")\n+  (VNx4DI \"VNx4HI\") (VNx8DI \"VNx8HI\")\n+  (VNx1SF \"VNx1QI\") (VNx2SF \"VNx2QI\") (VNx4SF \"VNx4QI\") (VNx8SF \"VNx8QI\")\n+  (VNx16SF \"VNx16QI\")\n+  (VNx1DF \"VNx1HI\") (VNx2DF \"VNx2HI\")\n+  (VNx4DF \"VNx4HI\") (VNx8DF \"VNx8HI\")\n+])\n+\n+(define_mode_attr VINDEX_OCT_TRUNC [\n+  (VNx1DI \"VNx1QI\") (VNx2DI \"VNx2QI\") (VNx4DI \"VNx4QI\") (VNx8DI \"VNx8QI\")\n+  (VNx1DF \"VNx1QI\") (VNx2DF \"VNx2QI\") (VNx4DF \"VNx4QI\") (VNx8DF \"VNx8QI\")\n+])\n+\n+(define_mode_attr VINDEX_DOUBLE_EXT [\n+  (VNx1QI \"VNx1HI\") (VNx2QI \"VNx2HI\") (VNx4QI \"VNx4HI\") (VNx8QI \"VNx8HI\") (VNx16QI \"VNx16HI\") (VNx32QI \"VNx32HI\")\n+  (VNx1HI \"VNx1SI\") (VNx2HI \"VNx2SI\") (VNx4HI \"VNx4SI\") (VNx8HI \"VNx8SI\") (VNx16HI \"VNx16SI\")\n+  (VNx1SI \"VNx1DI\") (VNx2SI \"VNx2DI\") (VNx4SI \"VNx4DI\") (VNx8SI \"VNx8DI\")\n+  (VNx1SF \"VNx1DI\") (VNx2SF \"VNx2DI\") (VNx4SF \"VNx4DI\") (VNx8SF \"VNx8DI\")\n+])\n+\n+(define_mode_attr VINDEX_QUAD_EXT [\n+  (VNx1QI \"VNx1SI\") (VNx2QI \"VNx2SI\") (VNx4QI \"VNx4SI\") (VNx8QI \"VNx8SI\") (VNx16QI \"VNx16SI\")\n+  (VNx1HI \"VNx1DI\") (VNx2HI \"VNx2DI\") (VNx4HI \"VNx4DI\") (VNx8HI \"VNx8DI\")\n+])\n+\n+(define_mode_attr VINDEX_OCT_EXT [\n+  (VNx1QI \"VNx1DI\") (VNx2QI \"VNx2DI\") (VNx4QI \"VNx4DI\") (VNx8QI \"VNx8DI\")\n+])\n+\n (define_mode_attr VCONVERT [\n   (VNx1SF \"VNx1SI\") (VNx2SF \"VNx2SI\") (VNx4SF \"VNx4SI\") (VNx8SF \"VNx8SI\") (VNx16SF \"VNx16SI\")\n   (VNx1DF \"VNx1DI\") (VNx2DF \"VNx2DI\") (VNx4DF \"VNx4DI\") (VNx8DF \"VNx8DI\")\n@@ -771,46 +909,46 @@\n \t\t\t(us_minus \"register_operand\")])\n \n (define_code_attr binop_rhs1_constraint [\n-\t\t\t(plus \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(minus \"vr,vr,vr,vr,vi,vi\")\n-\t\t\t(ior \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(xor \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(and \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(ashift \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(ashiftrt \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(lshiftrt \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(smin \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(smax \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(umin \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(umax \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(mult \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(div \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(mod \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(udiv \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(umod \"vr,vr,vr,vr,vr,vr\")])\n+\t\t\t(plus \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(minus \"vr,vr,vr,vr,vr,vr,vr,vr,vi,vi,vi,vi\")\n+\t\t\t(ior \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(xor \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(and \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(ashift \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(ashiftrt \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(lshiftrt \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(smin \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(smax \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(umin \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(umax \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(mult \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(div \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(mod \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(udiv \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(umod \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")])\n \n (define_code_attr binop_rhs2_constraint [\n-\t\t\t(plus \"vr,vr,vi,vi,vr,vr\")\n-\t\t\t(minus \"vr,vr,vj,vj,vr,vr\")\n-\t\t\t(ior \"vr,vr,vi,vi,vr,vr\")\n-\t\t\t(xor \"vr,vr,vi,vi,vr,vr\")\n-\t\t\t(and \"vr,vr,vi,vi,vr,vr\")\n-\t\t\t(ashift \"vr,vr,vk,vk,vr,vr\")\n-\t\t\t(ashiftrt \"vr,vr,vk,vk,vr,vr\")\n-\t\t\t(lshiftrt \"vr,vr,vk,vk,vr,vr\")\n-\t\t\t(smin \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(smax \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(umin \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(umax \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(mult \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(div \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(mod \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(udiv \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(umod \"vr,vr,vr,vr,vr,vr\")\n-\t\t\t(ss_plus \"vr,vr,vi,vi\")\n-\t\t\t(us_plus \"vr,vr,vi,vi\")\n-\t\t\t(ss_minus \"vr,vr,vj,vj\")\n-\t\t\t(us_minus \"vr,vr,vr,vr\")])\n+\t\t\t(plus \"vr,vr,vr,vr,vi,vi,vi,vi,vr,vr,vr,vr\")\n+\t\t\t(minus \"vr,vr,vr,vr,vj,vj,vj,vj,vr,vr,vr,vr\")\n+\t\t\t(ior \"vr,vr,vr,vr,vi,vi,vi,vi,vr,vr,vr,vr\")\n+\t\t\t(xor \"vr,vr,vr,vr,vi,vi,vi,vi,vr,vr,vr,vr\")\n+\t\t\t(and \"vr,vr,vr,vr,vi,vi,vi,vi,vr,vr,vr,vr\")\n+\t\t\t(ashift \"vr,vr,vr,vr,vk,vk,vk,vk,vr,vr,vr,vr\")\n+\t\t\t(ashiftrt \"vr,vr,vr,vr,vk,vk,vk,vk,vr,vr,vr,vr\")\n+\t\t\t(lshiftrt \"vr,vr,vr,vr,vk,vk,vk,vk,vr,vr,vr,vr\")\n+\t\t\t(smin \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(smax \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(umin \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(umax \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(mult \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(div \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(mod \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(udiv \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(umod \"vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr,vr\")\n+\t\t\t(ss_plus \"vr,vr,vr,vr,vi,vi,vi,vi\")\n+\t\t\t(us_plus \"vr,vr,vr,vr,vi,vi,vi,vi\")\n+\t\t\t(ss_minus \"vr,vr,vr,vr,vj,vj,vj,vj\")\n+\t\t\t(us_minus \"vr,vr,vr,vr,vr,vr,vr,vr\")])\n \n (define_code_attr int_binop_insn_type [\n \t\t\t(plus \"vialu\")"}, {"sha": "d5669656914ce68be0220516f2fcdc3e98640c63", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 634, "deletions": 609, "changes": 1243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7bb445ee586258a6210462e92ed196d61beb9e/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7bb445ee586258a6210462e92ed196d61beb9e/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=ab7bb445ee586258a6210462e92ed196d61beb9e"}, {"sha": "380d67fab53203372eed007600e0c6dce0770ff2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/merge_constraint-1.c", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab7bb445ee586258a6210462e92ed196d61beb9e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmerge_constraint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab7bb445ee586258a6210462e92ed196d61beb9e/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmerge_constraint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fmerge_constraint-1.c?ref=ab7bb445ee586258a6210462e92ed196d61beb9e", "patch": "@@ -0,0 +1,204 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vmv_v_v_i8mf4 (v, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f2 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vmv_v_x_i8mf4_tu (v, 3, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f3 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  vint8mf4_t v2 = __riscv_vle8_v_i8mf4 (base1 + 100, 32);\n+  vbool32_t m = __riscv_vlm_v_b32 (base1 + 200, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vmerge_vvm_i8mf4 (v, v2, m, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f4 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  vbool32_t m = __riscv_vlm_v_b32 (base1 + 200, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vmerge_vxm_i8mf4 (v, 3, m, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f5 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  vbool32_t m = __riscv_vlm_v_b32 (base1 + 200, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vmerge_vxm_i8mf4 (v, 100, m, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f6 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vuint8mf4_t v = __riscv_vle8_v_u8mf4 (base1 + 100, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vluxei8_v_u8mf4 (base2, v, 32);\n+    v = __riscv_vle8_v_u8mf4_tu (v, base2 + 200, 32);\n+  }\n+  __riscv_vse8_v_u8mf4 (out, v, 32);\n+}\n+\n+void f7 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vadd_vv_i8mf4 (v, v, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f8 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vadd_vv_i8mf4 (v, v, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f9 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vsll_vx_i8mf4 (v, 101, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f10 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vor_vx_i8mf4 (v, 101, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f11 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  vbool32_t m = __riscv_vlm_v_b32 (base1 + 200, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vadc_vvm_i8mf4 (v, v, m, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f12 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  vbool32_t m = __riscv_vlm_v_b32 (base1 + 200, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vsbc_vvm_i8mf4 (v, v, m, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f13 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  vbool32_t m = __riscv_vlm_v_b32 (base1 + 200, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vadc_vxm_i8mf4 (v, 100, m, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f14 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  vbool32_t m = __riscv_vlm_v_b32 (base1 + 200, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vsbc_vxm_i8mf4 (v, 100, m, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f15 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vneg_v_i8mf4 (v, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f16 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vsadd_vv_i8mf4 (v, v, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f17 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vsadd_vx_i8mf4 (v, 100, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f18 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vaadd_vv_i8mf4 (v, v, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+void f19 (int8_t* base1,int8_t* base2,int8_t* out,int n)\n+{\n+  vint8mf4_t v = __riscv_vle8_v_i8mf4 (base1, 32);\n+  for (int i = 0; i < n; i++){\n+    v = __riscv_vaadd_vx_i8mf4 (v, 100, 32);\n+    v = __riscv_vle8_v_i8mf4_tu (v, base2, 32);\n+  }\n+  __riscv_vse8_v_i8mf4 (out, v, 32);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv1r} } } */"}]}