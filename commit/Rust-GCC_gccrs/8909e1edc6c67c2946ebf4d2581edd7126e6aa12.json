{"sha": "8909e1edc6c67c2946ebf4d2581edd7126e6aa12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkwOWUxZWRjNmM2N2MyOTQ2ZWJmNGQyNTgxZWRkNzEyNmU2YWExMg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2007-06-06T10:42:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:42:51Z"}, "message": "sem_ch11.adb (Analyze_Exception_Handlers): Add barrier to avoid the use of entity Exception_Occurrence if...\n\n2007-04-20  Javier Miranda  <miranda@adacore.com>\n\t    Hristian Kirtchev  <kirtchev@adacore.com>\n\t    Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch11.adb (Analyze_Exception_Handlers): Add barrier to avoid the\n\tuse of entity Exception_Occurrence if it is not available in the\n\ttarget run-time.\n\n\t* sem_ch9.adb (Analyze_Protected_Type, Analyze_Task_Type): When\n\tconcurrent types are declared within an Ada 2005 generic, build their\n\tcorresponding record types since they are needed for overriding-related\n\tsemantic checks.\n\t(Analyze_Protected_Type): Rearrange and simplify code for testing that a\n\tprotected type does not implement a task interface or a nonlimited\n\tinterface.\n\t(Analyze_Task_Type): Rearrange and simplify code for testing that a task\n\ttype does not implement a protected interface or a nonlimited interface.\n\t(Single_Task_Declaration, Single_Protected_Declaration): use original\n\tentity for variable declaration, to ensure that debugging information\n\tis correcty generated.\n\t(Analyze_Protected_Type, Analyze_Task_Type): Do not call expander\n\troutines if the expander is not active.\n\t(Analyze_Task_Body): Mark all handlers to stop optimization of local\n\traise, since special things happen for task exception handlers.\n\n\t* sem_disp.adb (Check_Controlling_Formals): Add type retrieval for\n\tconcurrent types declared within a generic.\n\t(Check_Dispatching_Operation): Do not emit warning about late interface\n\toperations in the context of an instance.\n\t(Check_Dispatching_Call): Remove restriction against calling a\n\tdispatching operation with a limited controlling result.\n\t(Check_Dispatching_Operation): Replace calls to Fill_DT_Entry and\n\tRegister_Interface_DT_Entry by calls to Register_Primitive.\n\t(Check_Dispatching_Formals): Handle properly a function with a\n\tcontrolling access result.\n\nFrom-SVN: r125448", "tree": {"sha": "95320bf40d77c808dfc41813047ea6378aa5413e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95320bf40d77c808dfc41813047ea6378aa5413e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8909e1edc6c67c2946ebf4d2581edd7126e6aa12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8909e1edc6c67c2946ebf4d2581edd7126e6aa12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8909e1edc6c67c2946ebf4d2581edd7126e6aa12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8909e1edc6c67c2946ebf4d2581edd7126e6aa12/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcd1d957e582cc441534acf540ba66870abdf30a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd1d957e582cc441534acf540ba66870abdf30a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcd1d957e582cc441534acf540ba66870abdf30a"}], "stats": {"total": 212, "additions": 136, "deletions": 76}, "files": [{"sha": "10916febfcae4cb0f599eb5db2a4020ec3a7d899", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8909e1edc6c67c2946ebf4d2581edd7126e6aa12/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8909e1edc6c67c2946ebf4d2581edd7126e6aa12/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=8909e1edc6c67c2946ebf4d2581edd7126e6aa12", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,6 +30,7 @@ with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Lib;      use Lib;\n with Lib.Xref; use Lib.Xref;\n+with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n@@ -203,7 +204,7 @@ package body Sem_Ch11 is\n                      (E_Block, Current_Scope, Sloc (Choice), 'E');\n                end if;\n \n-               New_Scope (H_Scope);\n+               Push_Scope (H_Scope);\n                Set_Etype (H_Scope, Standard_Void_Type);\n \n                --  Set the Finalization Chain entity to Error means that it\n@@ -217,7 +218,11 @@ package body Sem_Ch11 is\n \n                Enter_Name (Choice);\n                Set_Ekind (Choice, E_Variable);\n-               Set_Etype (Choice, RTE (RE_Exception_Occurrence));\n+\n+               if RTE_Available (RE_Exception_Occurrence) then\n+                  Set_Etype (Choice, RTE (RE_Exception_Occurrence));\n+               end if;\n+\n                Generate_Definition (Choice);\n \n                --  Set source assigned flag, since in effect this field is"}, {"sha": "65d0e8206ce6f9926ce42ced06708d60df5d80a3", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 88, "deletions": 38, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8909e1edc6c67c2946ebf4d2581edd7126e6aa12/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8909e1edc6c67c2946ebf4d2581edd7126e6aa12/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=8909e1edc6c67c2946ebf4d2581edd7126e6aa12", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,6 +33,7 @@ with Elists;   use Elists;\n with Freeze;   use Freeze;\n with Itypes;   use Itypes;\n with Lib.Xref; use Lib.Xref;\n+with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n@@ -53,6 +54,7 @@ with Snames;   use Snames;\n with Stand;    use Stand;\n with Sinfo;    use Sinfo;\n with Style;\n+with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n \n@@ -259,7 +261,7 @@ package body Sem_Ch9 is\n       Set_Accept_Address (Accept_Id, New_Elmt_List);\n \n       if Present (Formals) then\n-         New_Scope (Accept_Id);\n+         Push_Scope (Accept_Id);\n          Process_Formals (Formals, N);\n          Create_Extra_Formals (Accept_Id);\n          End_Scope;\n@@ -418,7 +420,7 @@ package body Sem_Ch9 is\n       --  Analyze statements if present\n \n       if Present (Stats) then\n-         New_Scope (Entry_Nam);\n+         Push_Scope (Entry_Nam);\n          Install_Declarations (Entry_Nam);\n \n          Set_Actual_Subtypes (N, Current_Scope);\n@@ -571,7 +573,6 @@ package body Sem_Ch9 is\n \n    procedure Analyze_Delay_Relative (N : Node_Id) is\n       E : constant Node_Id := Expression (N);\n-\n    begin\n       Check_Restriction (No_Relative_Delay, N);\n       Tasking_Used := True;\n@@ -730,7 +731,7 @@ package body Sem_Ch9 is\n       end if;\n \n       Exp_Ch9.Expand_Entry_Barrier (N, Entry_Name);\n-      New_Scope (Entry_Name);\n+      Push_Scope (Entry_Name);\n \n       Exp_Ch9.Expand_Entry_Body_Declarations (N);\n       Install_Declarations (Entry_Name);\n@@ -847,7 +848,7 @@ package body Sem_Ch9 is\n \n       if Present (Formals) then\n          Set_Scope (Id, Current_Scope);\n-         New_Scope (Id);\n+         Push_Scope (Id);\n          Process_Formals (Formals, Parent (N));\n          End_Scope;\n       end if;\n@@ -912,7 +913,7 @@ package body Sem_Ch9 is\n \n       if Present (Formals) then\n          Set_Scope (Id, Current_Scope);\n-         New_Scope (Id);\n+         Push_Scope (Id);\n          Process_Formals (Formals, N);\n          Create_Extra_Formals (Id);\n          End_Scope;\n@@ -961,7 +962,7 @@ package body Sem_Ch9 is\n \n       Set_Ekind (Loop_Id, E_Loop);\n       Set_Scope (Loop_Id, Current_Scope);\n-      New_Scope (Loop_Id);\n+      Push_Scope (Loop_Id);\n       Enter_Name (Iden);\n       Set_Ekind (Iden, E_Entry_Index_Parameter);\n       Set_Etype (Iden, Etype (Def));\n@@ -1018,7 +1019,7 @@ package body Sem_Ch9 is\n          Spec_Id := Etype (Spec_Id);\n       end if;\n \n-      New_Scope (Spec_Id);\n+      Push_Scope (Spec_Id);\n       Set_Corresponding_Spec (N, Spec_Id);\n       Set_Corresponding_Body (Parent (Spec_Id), Body_Id);\n       Set_Has_Completion (Spec_Id);\n@@ -1127,7 +1128,7 @@ package body Sem_Ch9 is\n       Set_Etype              (T, T);\n       Set_Has_Delayed_Freeze (T, True);\n       Set_Stored_Constraint  (T, No_Elist);\n-      New_Scope (T);\n+      Push_Scope (T);\n \n       --  Ada 2005 (AI-345)\n \n@@ -1149,19 +1150,15 @@ package body Sem_Ch9 is\n                Freeze_Before (N, Etype (Iface));\n \n                --  Ada 2005 (AI-345): Protected types can only implement\n-               --  limited, synchronized or protected interfaces.\n-\n-               if Is_Limited_Interface (Iface_Typ)\n-                 or else Is_Protected_Interface (Iface_Typ)\n-                 or else Is_Synchronized_Interface (Iface_Typ)\n-               then\n-                  null;\n+               --  limited, synchronized, or protected interfaces (note that\n+               --  the predicate Is_Limited_Interface includes synchronized\n+               --  and protected interfaces).\n \n-               elsif Is_Task_Interface (Iface_Typ) then\n+               if Is_Task_Interface (Iface_Typ) then\n                   Error_Msg_N (\"(Ada 2005) protected type cannot implement a \"\n                     & \"task interface\", Iface);\n \n-               else\n+               elsif not Is_Limited_Interface (Iface_Typ) then\n                   Error_Msg_N (\"(Ada 2005) protected type cannot implement a \"\n                     & \"non-limited interface\", Iface);\n                end if;\n@@ -1214,6 +1211,17 @@ package body Sem_Ch9 is\n \n       Set_Is_Constrained (T, not Has_Discriminants (T));\n \n+      --  Perform minimal expansion of the protected type while inside of a\n+      --  generic. The corresponding record is needed for various semantic\n+      --  checks.\n+\n+      if Ada_Version >= Ada_05\n+        and then Inside_A_Generic\n+      then\n+         Insert_After_And_Analyze (N,\n+           Build_Corresponding_Record (N, T, Sloc (T)));\n+      end if;\n+\n       Analyze (Protected_Definition (N));\n \n       --  Protected types with entries are controlled (because of the\n@@ -1264,8 +1272,10 @@ package body Sem_Ch9 is\n          --  may be subtypes of the partial view. Skip if errors are present,\n          --  to prevent cascaded messages.\n \n-         if Serious_Errors_Detected = 0 then\n-            Exp_Ch9.Expand_N_Protected_Type_Declaration (N);\n+         if Serious_Errors_Detected = 0\n+           and then Expander_Active\n+         then\n+            Expand_N_Protected_Type_Declaration (N);\n             Process_Full_View (N, T, Def_Id);\n          end if;\n       end if;\n@@ -1444,6 +1454,13 @@ package body Sem_Ch9 is\n          Generate_Reference (Entry_Id, Entry_Name);\n \n          if Present (First_Formal (Entry_Id)) then\n+            if VM_Target = JVM_Target then\n+               Error_Msg_N\n+                 (\"arguments unsupported in requeue statement\",\n+                  First_Formal (Entry_Id));\n+               return;\n+            end if;\n+\n             Check_Subtype_Conformant (Enclosing, Entry_Id, Name (N));\n \n             --  Processing for parameters accessed by the requeue\n@@ -1613,7 +1630,7 @@ package body Sem_Ch9 is\n       T      : Entity_Id;\n       T_Decl : Node_Id;\n       O_Decl : Node_Id;\n-      O_Name : constant Entity_Id := New_Copy (Id);\n+      O_Name : constant Entity_Id := Id;\n \n    begin\n       Generate_Definition (Id);\n@@ -1669,7 +1686,7 @@ package body Sem_Ch9 is\n       T      : Entity_Id;\n       T_Decl : Node_Id;\n       O_Decl : Node_Id;\n-      O_Name : constant Entity_Id := New_Copy (Id);\n+      O_Name : constant Entity_Id := Id;\n \n    begin\n       Generate_Definition (Id);\n@@ -1688,6 +1705,14 @@ package body Sem_Ch9 is\n           Task_Definition     => Relocate_Node (Task_Definition (N)),\n           Interface_List      => Interface_List (N));\n \n+      --  We use the original defining identifier of the single task in the\n+      --  generated object declaration, so that debugging information can\n+      --  be attached to it when compiling with -gnatD. The parent of the\n+      --  entity is the new object declaration. The single_task_declaration\n+      --  is not used further in semantics or code generation, but is scanned\n+      --  when generating debug information, and therefore needs the updated\n+      --  Sloc information for the entity (see Sprint).\n+\n       O_Decl :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => O_Name,\n@@ -1721,6 +1746,7 @@ package body Sem_Ch9 is\n \n    procedure Analyze_Task_Body (N : Node_Id) is\n       Body_Id : constant Entity_Id := Defining_Identifier (N);\n+      HSS     : constant Node_Id   := Handled_Statement_Sequence (N);\n       Last_E  : Entity_Id;\n \n       Spec_Id : Entity_Id;\n@@ -1779,7 +1805,7 @@ package body Sem_Ch9 is\n          Spec_Id := Etype (Spec_Id);\n       end if;\n \n-      New_Scope (Spec_Id);\n+      Push_Scope (Spec_Id);\n       Set_Corresponding_Spec (N, Spec_Id);\n       Set_Corresponding_Body (Parent (Spec_Id), Body_Id);\n       Set_Has_Completion (Spec_Id);\n@@ -1800,7 +1826,24 @@ package body Sem_Ch9 is\n          end if;\n       end if;\n \n-      Analyze (Handled_Statement_Sequence (N));\n+      --  Mark all handlers as not suitable for local raise optimization,\n+      --  since this optimization causes difficulties in a task context.\n+\n+      if Present (Exception_Handlers (HSS)) then\n+         declare\n+            Handlr : Node_Id;\n+         begin\n+            Handlr := First (Exception_Handlers (HSS));\n+            while Present (Handlr) loop\n+               Set_Local_Raise_Not_OK (Handlr);\n+               Next (Handlr);\n+            end loop;\n+         end;\n+      end if;\n+\n+      --  Now go ahead and complete analysis of the task body\n+\n+      Analyze (HSS);\n       Check_Completion (Body_Id);\n       Check_References (Body_Id);\n       Check_References (Spec_Id);\n@@ -1824,7 +1867,7 @@ package body Sem_Ch9 is\n          end loop;\n       end;\n \n-      Process_End_Label (Handled_Statement_Sequence (N), 't', Ref_Id);\n+      Process_End_Label (HSS, 't', Ref_Id);\n       End_Scope;\n    end Analyze_Task_Body;\n \n@@ -1887,7 +1930,7 @@ package body Sem_Ch9 is\n       Set_Etype              (T, T);\n       Set_Has_Delayed_Freeze (T, True);\n       Set_Stored_Constraint  (T, No_Elist);\n-      New_Scope (T);\n+      Push_Scope (T);\n \n       --  Ada 2005 (AI-345)\n \n@@ -1909,19 +1952,15 @@ package body Sem_Ch9 is\n                Freeze_Before (N, Etype (Iface));\n \n                --  Ada 2005 (AI-345): Task types can only implement limited,\n-               --  synchronized or task interfaces.\n-\n-               if Is_Limited_Interface (Iface_Typ)\n-                 or else Is_Synchronized_Interface (Iface_Typ)\n-                 or else Is_Task_Interface (Iface_Typ)\n-               then\n-                  null;\n+               --  synchronized, or task interfaces (note that the predicate\n+               --  Is_Limited_Interface includes synchronized and task\n+               --  interfaces).\n \n-               elsif Is_Protected_Interface (Iface_Typ) then\n+               if Is_Protected_Interface (Iface_Typ) then\n                   Error_Msg_N (\"(Ada 2005) task type cannot implement a \" &\n                     \"protected interface\", Iface);\n \n-               else\n+               elsif not Is_Limited_Interface (Iface_Typ) then\n                   Error_Msg_N (\"(Ada 2005) task type cannot implement a \" &\n                     \"non-limited interface\", Iface);\n                end if;\n@@ -1978,6 +2017,15 @@ package body Sem_Ch9 is\n \n       Set_Is_Constrained (T, not Has_Discriminants (T));\n \n+      --  Perform minimal expansion of the task type while inside a generic\n+      --  context. The corresponding record is needed for various semantic\n+      --  checks.\n+\n+      if Inside_A_Generic then\n+         Insert_After_And_Analyze (N,\n+           Build_Corresponding_Record (N, T, Sloc (T)));\n+      end if;\n+\n       if Present (Task_Definition (N)) then\n          Analyze_Task_Definition (Task_Definition (N));\n       end if;\n@@ -2006,8 +2054,10 @@ package body Sem_Ch9 is\n          --  may be subtypes of the partial view. Skip if errors are present,\n          --  to prevent cascaded messages.\n \n-         if Serious_Errors_Detected = 0 then\n-            Exp_Ch9.Expand_N_Task_Type_Declaration (N);\n+         if Serious_Errors_Detected = 0\n+           and then Expander_Active\n+         then\n+            Expand_N_Task_Type_Declaration (N);\n             Process_Full_View (N, T, Def_Id);\n          end if;\n       end if;"}, {"sha": "3b2a18ad3b122c79df3fcff48b39cf115e3fbc34", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8909e1edc6c67c2946ebf4d2581edd7126e6aa12/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8909e1edc6c67c2946ebf4d2581edd7126e6aa12/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=8909e1edc6c67c2946ebf4d2581edd7126e6aa12", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,11 +29,10 @@ with Debug;    use Debug;\n with Elists;   use Elists;\n with Einfo;    use Einfo;\n with Exp_Disp; use Exp_Disp;\n-with Exp_Ch6;  use Exp_Ch6;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_Tss;  use Exp_Tss;\n with Errout;   use Errout;\n-with Hostparm; use Hostparm;\n+with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n@@ -48,6 +47,7 @@ with Sem_Util; use Sem_Util;\n with Snames;   use Snames;\n with Stand;    use Stand;\n with Sinfo;    use Sinfo;\n+with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Uintp;    use Uintp;\n \n@@ -102,6 +102,17 @@ package body Sem_Disp is\n          Ctrl_Type := Check_Controlling_Type (Etype (Formal), Subp);\n \n          if Present (Ctrl_Type) then\n+\n+            --  When the controlling type is concurrent and declared within a\n+            --  generic or inside an instance, use its corresponding record\n+            --  type.\n+\n+            if Is_Concurrent_Type (Ctrl_Type)\n+              and then Present (Corresponding_Record_Type (Ctrl_Type))\n+            then\n+               Ctrl_Type := Corresponding_Record_Type (Ctrl_Type);\n+            end if;\n+\n             if Ctrl_Type = Typ then\n                Set_Is_Controlling_Formal (Formal);\n \n@@ -162,8 +173,17 @@ package body Sem_Disp is\n                Set_Has_Controlling_Result (Subp);\n \n                --  Check that result subtype statically matches first subtype\n+               --  (Ada 2005) : Subp may have a controlling access result.\n \n-               if not Subtypes_Statically_Match (Typ, Etype (Subp)) then\n+               if Subtypes_Statically_Match (Typ, Etype (Subp))\n+                 or else (Ekind (Etype (Subp)) = E_Anonymous_Access_Type\n+                            and then\n+                              Subtypes_Statically_Match\n+                                (Typ, Designated_Type (Etype (Subp))))\n+               then\n+                  null;\n+\n+               else\n                   Error_Msg_N\n                     (\"result subtype does not match controlling type\", Subp);\n                end if;\n@@ -257,12 +277,12 @@ package body Sem_Disp is\n    ----------------------------\n \n    procedure Check_Dispatching_Call (N : Node_Id) is\n+      Loc                    : constant Source_Ptr := Sloc (N);\n       Actual                 : Node_Id;\n       Formal                 : Entity_Id;\n       Control                : Node_Id := Empty;\n       Func                   : Entity_Id;\n       Subp_Entity            : Entity_Id;\n-      Loc                    : constant Source_Ptr := Sloc (N);\n       Indeterm_Ancestor_Call : Boolean := False;\n       Indeterm_Ctrl_Type     : Entity_Id;\n \n@@ -436,25 +456,6 @@ package body Sem_Disp is\n             Set_Controlling_Argument (N, Control);\n             Check_Restriction (No_Dispatching_Calls, N);\n \n-            --  Ada 2005 (AI-318-02): Check current implementation restriction\n-            --  that a dispatching call cannot be made to a primitive function\n-            --  with a limited result type. This restriction can be removed\n-            --  once calls to limited functions with class-wide results are\n-            --  supported. ???\n-\n-            if Ada_Version = Ada_05\n-              and then Nkind (N) = N_Function_Call\n-            then\n-               Func := Entity (Name (N));\n-\n-               if Has_Controlling_Result (Func)\n-                 and then Is_Limited_Type (Etype (Func))\n-               then\n-                  Error_Msg_N (\"(Ada 2005) limited function call in this\" &\n-                    \" context is not yet implemented\", N);\n-               end if;\n-            end if;\n-\n          else\n             --  The call is not dispatching, so check that there aren't any\n             --  tag-indeterminate abstract calls left.\n@@ -479,7 +480,7 @@ package body Sem_Disp is\n                      Func := Empty;\n \n                   --  Only other possibility is a qualified expression whose\n-                  --  consituent expression is itself a call.\n+                  --  constituent expression is itself a call.\n \n                   else\n                      Func :=\n@@ -596,6 +597,7 @@ package body Sem_Disp is\n                  and then Is_Interface (Typ)\n                  and then not Is_Derived_Type (Typ)\n                  and then not Is_Generic_Type (Typ)\n+                 and then not In_Instance\n                then\n                   Error_Msg_N (\"?declaration of& is too late!\", Subp);\n                   Error_Msg_NE\n@@ -738,8 +740,9 @@ package body Sem_Disp is\n                         Set_DT_Position (Subp, DT_Position (Old_Subp));\n \n                         if not Restriction_Active (No_Dispatching_Calls) then\n-                           Insert_After (Subp_Body,\n-                             Fill_DT_Entry (Sloc (Subp_Body), Subp));\n+                           Register_Primitive (Sloc (Subp_Body),\n+                             Prim    => Subp,\n+                             Ins_Nod => Subp_Body);\n                         end if;\n                      end if;\n                   end if;\n@@ -752,7 +755,7 @@ package body Sem_Disp is\n                   Subp);\n             end if;\n \n-         --  If the type is not frozen yet and we are not in the overridding\n+         --  If the type is not frozen yet and we are not in the overriding\n          --  case it looks suspiciously like an attempt to define a primitive\n          --  operation.\n \n@@ -769,7 +772,7 @@ package body Sem_Disp is\n          end if;\n \n       --  Now, we are sure that the scope is a package spec. If the subprogram\n-      --  is declared after the freezing point ot the type that's an error\n+      --  is declared after the freezing point of the type that's an error\n \n       elsif Is_Frozen (Tagged_Type) and then not Has_Dispatching_Parent then\n          Error_Msg_N (\"this primitive operation is declared too late\", Subp);\n@@ -819,13 +822,15 @@ package body Sem_Disp is\n                        and then Present (Abstract_Interface_Alias (Prim))\n                        and then Alias (Prim) = Subp\n                      then\n-                        Register_Interface_DT_Entry (Subp_Body, Prim);\n+                        Register_Primitive (Sloc (Prim),\n+                          Prim    => Prim,\n+                          Ins_Nod => Subp_Body);\n                      end if;\n \n                      Next_Elmt (Elmt);\n                   end loop;\n \n-                  --  Redisplay the contents of the updated dispatch table.\n+                  --  Redisplay the contents of the updated dispatch table\n \n                   if Debug_Flag_ZZ then\n                      Write_Str (\"Late overriding: \");\n@@ -1322,7 +1327,7 @@ package body Sem_Disp is\n         and then Has_Abstract_Interfaces (Tagged_Type)\n       then\n          --  Ada 2005 (AI-251): Update the attribute alias of all the aliased\n-         --  entities of the overriden primitive to reference New_Op, and also\n+         --  entities of the overridden primitive to reference New_Op, and also\n          --  propagate them the new value of the attribute\n          --  Is_Abstract_Subprogram.\n \n@@ -1429,11 +1434,11 @@ package body Sem_Disp is\n          Next_Actual (Arg);\n       end loop;\n \n-      --  Expansion of dispatching calls is suppressed when Java_VM, because\n-      --  the JVM back end directly handles the generation of dispatching\n+      --  Expansion of dispatching calls is suppressed when VM_Target, because\n+      --  the VM back-ends directly handle the generation of dispatching\n       --  calls and would have to undo any expansion to an indirect call.\n \n-      if not Java_VM then\n+      if VM_Target = No_VM then\n          Expand_Dispatching_Call (Call_Node);\n       end if;\n    end Propagate_Tag;"}]}