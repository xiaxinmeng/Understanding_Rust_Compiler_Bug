{"sha": "05a30af3f237984b4dcf1dbbc17fdac583c46506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhMzBhZjNmMjM3OTg0YjRkY2YxZGJiYzE3ZmRhYzU4M2M0NjUwNg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-01-01T16:35:56Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-01-14T18:23:54Z"}, "message": "libstdc++: Implement N3644 for _GLIBCXX_DEBUG iterators\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/98466\n\t* include/bits/hashtable_policy.h (_Node_iterator_base()): Set _M_cur to nullptr.\n\t(_Node_iterator()): Make default.\n\t(_Node_const_iterator()): Make default.\n\t* include/debug/macros.h (__glibcxx_check_erae_range_after): Add _M_singular\n\titerator checks.\n\t* include/debug/safe_iterator.h\n\t(_GLIBCXX_DEBUG_VERIFY_OPERANDS): Accept if both iterator are value initialized.\n\t* include/debug/safe_local_iterator.h (_GLIBCXX_DEBUG_VERIFY_OPERANDS):\n\tLikewise.\n\t* include/debug/safe_iterator.tcc (_Safe_iterator<>::_M_valid_range): Add\n\t_M_singular checks on input iterators.\n\t* src/c++11/debug.cc (_Safe_iterator_base::_M_can_compare): Remove _M_singular\n\tchecks.\n\t* testsuite/23_containers/deque/debug/98466.cc: New test.\n\t* testsuite/23_containers/unordered_map/debug/98466.cc: New test.", "tree": {"sha": "7554ad58545e10650c83e3cb096095c057580c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7554ad58545e10650c83e3cb096095c057580c3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05a30af3f237984b4dcf1dbbc17fdac583c46506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a30af3f237984b4dcf1dbbc17fdac583c46506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a30af3f237984b4dcf1dbbc17fdac583c46506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a30af3f237984b4dcf1dbbc17fdac583c46506/comments", "author": null, "committer": null, "parents": [{"sha": "9e1e6e631045c7eed2c72738b7084986d39ca09f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1e6e631045c7eed2c72738b7084986d39ca09f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1e6e631045c7eed2c72738b7084986d39ca09f"}], "stats": {"total": 113, "additions": 100, "deletions": 13}, "files": [{"sha": "999147a68d4eed67b22b6f28cc4133f2edc1eaa4", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=05a30af3f237984b4dcf1dbbc17fdac583c46506", "patch": "@@ -290,7 +290,7 @@ namespace __detail\n \n       __node_type* _M_cur;\n \n-      _Node_iterator_base() = default;\n+      _Node_iterator_base() : _M_cur(nullptr) { }\n       _Node_iterator_base(__node_type* __p) noexcept\n       : _M_cur(__p) { }\n \n@@ -331,8 +331,7 @@ namespace __detail\n       using reference = typename std::conditional<__constant_iterators,\n \t\t\t\t  const value_type&, value_type&>::type;\n \n-      _Node_iterator() noexcept\n-      : __base_type(nullptr) { }\n+      _Node_iterator() = default;\n \n       explicit\n       _Node_iterator(__node_type* __p) noexcept\n@@ -379,8 +378,7 @@ namespace __detail\n       typedef const value_type*\t\t\t\tpointer;\n       typedef const value_type&\t\t\t\treference;\n \n-      _Node_const_iterator() noexcept\n-      : __base_type(nullptr) { }\n+      _Node_const_iterator() = default;\n \n       explicit\n       _Node_const_iterator(__node_type* __p) noexcept"}, {"sha": "0988437046f640ae5d8932107b0b69ff7bbef939", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=05a30af3f237984b4dcf1dbbc17fdac583c46506", "patch": "@@ -244,6 +244,11 @@ _GLIBCXX_DEBUG_VERIFY(_First._M_attached_to(this),\t\t\t\\\n  *  valid iterator range within this sequence.\n */\n #define __glibcxx_check_erase_range_after(_First,_Last)\t\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(!_First._M_singular() && !_Last._M_singular(),\t\\\n+\t\t      _M_message(__gnu_debug::__msg_erase_different)\t\\\n+\t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      ._M_iterator(_Last, #_Last));\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_First._M_can_compare(_Last),\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_erase_different)\t\\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\"}, {"sha": "a10df190969ff2de93a567b057358956a8fafb8c", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=05a30af3f237984b4dcf1dbbc17fdac583c46506", "patch": "@@ -40,7 +40,9 @@\n #endif\n \n #define _GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs, _Rhs, _BadMsgId, _DiffMsgId) \\\n-  _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular(),\t\\\n+  _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular()\t\\\n+\t\t\t|| (_Lhs.base() == _Iterator()\t\t\t\\\n+\t\t\t    && _Rhs.base() == _Iterator()),\t\t\\\n \t\t\t_M_message(_BadMsgId)\t\t\t\t\\\n \t\t\t._M_iterator(_Lhs, #_Lhs)\t\t\t\\\n \t\t\t._M_iterator(_Rhs, #_Rhs));\t\t\t\\"}, {"sha": "81deb10125b81df197f94b45c9749dec2b92fe79", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=05a30af3f237984b4dcf1dbbc17fdac583c46506", "patch": "@@ -186,7 +186,7 @@ namespace __gnu_debug\n \t\t   std::pair<difference_type, _Distance_precision>& __dist,\n \t\t   bool __check_dereferenceable) const\n     {\n-      if (!_M_can_compare(__rhs))\n+      if (_M_singular() || __rhs._M_singular() || !_M_can_compare(__rhs))\n \treturn false;\n \n       /* Determine iterators order */\n@@ -217,7 +217,8 @@ namespace __gnu_debug\n \t\t   std::pair<difference_type,\n \t\t\t     _Distance_precision>& __dist) const\n     {\n-      if (!this->_M_can_compare(__rhs))\n+      if (this->_M_singular() || __rhs._M_singular()\n+\t  || !this->_M_can_compare(__rhs))\n \treturn false;\n \n       /* Determine iterators order */"}, {"sha": "31c48e65a249dc508b760100f382896169109aa4", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=05a30af3f237984b4dcf1dbbc17fdac583c46506", "patch": "@@ -32,7 +32,9 @@\n #include <debug/safe_unordered_base.h>\n \n #define _GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs, _Rhs) \\\n-  _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular(),\t\\\n+  _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular()\t\\\n+\t\t\t|| (_Lhs.base() == _Iterator{}\t\t\t\\\n+\t\t\t    && _Rhs.base() == _Iterator{}),\t\t\\\n \t\t\t_M_message(__msg_iter_compare_bad)\t\t\\\n \t\t\t._M_iterator(_Lhs, \"lhs\")\t\t\t\\\n \t\t\t._M_iterator(_Rhs, \"rhs\"));\t\t\t\\"}, {"sha": "5a642097d179cd1654a12ef5f907d3aae2cac960", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=05a30af3f237984b4dcf1dbbc17fdac583c46506", "patch": "@@ -424,10 +424,7 @@ namespace __gnu_debug\n   bool\n   _Safe_iterator_base::\n   _M_can_compare(const _Safe_iterator_base& __x) const throw ()\n-  {\n-    return (!_M_singular()\n-\t    && !__x._M_singular() && _M_sequence == __x._M_sequence);\n-  }\n+  { return _M_sequence == __x._M_sequence; }\n \n   __gnu_cxx::__mutex&\n   _Safe_iterator_base::"}, {"sha": "720977e56222c2a4111977c7e2e04b58ba3e62b0", "filename": "libstdc++-v3/testsuite/23_containers/deque/debug/98466.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2F98466.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2F98466.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2F98466.cc?ref=05a30af3f237984b4dcf1dbbc17fdac583c46506", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <debug/deque>\n+#include <testsuite_hooks.h>\n+\n+// PR libstdc++/98466\n+\n+void test01()\n+{\n+  __gnu_debug::deque<int>::iterator it{};\n+  VERIFY( it == it );\n+\n+  __gnu_debug::deque<int>::const_iterator cit{};\n+  VERIFY( cit == cit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cc22b9ff80ae4d4b0eb8421e837abf7857a7b64d", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/debug/98466.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2F98466.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05a30af3f237984b4dcf1dbbc17fdac583c46506/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2F98466.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2F98466.cc?ref=05a30af3f237984b4dcf1dbbc17fdac583c46506", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <debug/unordered_map>\n+#include <testsuite_hooks.h>\n+\n+// PR libstdc++/98466\n+\n+void test01()\n+{\n+  __gnu_debug::unordered_map<int, int>::iterator it{};\n+  VERIFY( it == it );\n+\n+  __gnu_debug::unordered_map<int, int>::const_iterator cit{};\n+  VERIFY( cit == cit );\n+\n+  __gnu_debug::unordered_map<int, int>::local_iterator lit{};\n+  VERIFY( lit == lit );\n+\n+  __gnu_debug::unordered_map<int, int>::const_local_iterator clit{};\n+  VERIFY( clit == clit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}