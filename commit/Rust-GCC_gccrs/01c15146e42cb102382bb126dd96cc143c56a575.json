{"sha": "01c15146e42cb102382bb126dd96cc143c56a575", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFjMTUxNDZlNDJjYjEwMjM4MmJiMTI2ZGQ5NmNjMTQzYzU2YTU3NQ==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-12-01T21:35:25Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-12-01T21:35:25Z"}, "message": "re PR c++/30022 (ICE on vector operand in division)\n\n\tPR c++/30022\n\t* typeck.c (type_after_usual_arithmetic_conversions):\n\tFix assertion for vector types.\n\t(build_binary_op): Use temporary for inner type of vector types.\n\n\t* g++.dg/ext/vector5.C: New test.\n\nFrom-SVN: r119416", "tree": {"sha": "3e50492fa180f9146d98cd3dc30d88e9263c3edf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e50492fa180f9146d98cd3dc30d88e9263c3edf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01c15146e42cb102382bb126dd96cc143c56a575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c15146e42cb102382bb126dd96cc143c56a575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01c15146e42cb102382bb126dd96cc143c56a575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01c15146e42cb102382bb126dd96cc143c56a575/comments", "author": null, "committer": null, "parents": [{"sha": "d8e1d61976e33667ed0d9f8ae6f9619076ecad8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e1d61976e33667ed0d9f8ae6f9619076ecad8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e1d61976e33667ed0d9f8ae6f9619076ecad8a"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "1ecb96d1542dabd44be6b5659b01bb567a5fe087", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c15146e42cb102382bb126dd96cc143c56a575/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c15146e42cb102382bb126dd96cc143c56a575/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=01c15146e42cb102382bb126dd96cc143c56a575", "patch": "@@ -1,3 +1,10 @@\n+2006-12-01  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/30022\n+\t* typeck.c (type_after_usual_arithmetic_conversions):\n+\tFix assertion for vector types.\n+\t(build_binary_op): Use temporary for inner type of vector types.\n+\n 2006-12-01  Ryan Mansfield  <rmansfield@qnx.com>\n \n         PR c++/29066"}, {"sha": "1acd1ffdecfd0554d666e1c6dc4107866319dd08", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c15146e42cb102382bb126dd96cc143c56a575/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c15146e42cb102382bb126dd96cc143c56a575/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=01c15146e42cb102382bb126dd96cc143c56a575", "patch": "@@ -262,7 +262,7 @@ type_after_usual_arithmetic_conversions (tree t1, tree t2)\n \t      || TREE_CODE (t1) == ENUMERAL_TYPE);\n   gcc_assert (ARITHMETIC_TYPE_P (t2)\n \t      || TREE_CODE (t2) == COMPLEX_TYPE\n-\t      || TREE_CODE (t1) == VECTOR_TYPE\n+\t      || TREE_CODE (t2) == VECTOR_TYPE\n \t      || TREE_CODE (t2) == ENUMERAL_TYPE);\n \n   /* In what follows, we slightly generalize the rules given in [expr] so\n@@ -3093,17 +3093,19 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t  && (code1 == INTEGER_TYPE || code1 == REAL_TYPE\n \t      || code1 == COMPLEX_TYPE || code1 == VECTOR_TYPE))\n \t{\n+\t  enum tree_code tcode0 = code0, tcode1 = code1;\n+\n \t  if (TREE_CODE (op1) == INTEGER_CST && integer_zerop (op1))\n \t    warning (OPT_Wdiv_by_zero, \"division by zero in %<%E / 0%>\", op0);\n \t  else if (TREE_CODE (op1) == REAL_CST && real_zerop (op1))\n \t    warning (OPT_Wdiv_by_zero, \"division by zero in %<%E / 0.%>\", op0);\n \n-\t  if (code0 == COMPLEX_TYPE || code0 == VECTOR_TYPE)\n-\t    code0 = TREE_CODE (TREE_TYPE (TREE_TYPE (op0)));\n-\t  if (code1 == COMPLEX_TYPE || code1 == VECTOR_TYPE)\n-\t    code1 = TREE_CODE (TREE_TYPE (TREE_TYPE (op1)));\n+\t  if (tcode0 == COMPLEX_TYPE || tcode0 == VECTOR_TYPE)\n+\t    tcode0 = TREE_CODE (TREE_TYPE (TREE_TYPE (op0)));\n+\t  if (tcode1 == COMPLEX_TYPE || tcode1 == VECTOR_TYPE)\n+\t    tcode1 = TREE_CODE (TREE_TYPE (TREE_TYPE (op1)));\n \n-\t  if (!(code0 == INTEGER_TYPE && code1 == INTEGER_TYPE))\n+\t  if (!(tcode0 == INTEGER_TYPE && tcode1 == INTEGER_TYPE))\n \t    resultcode = RDIV_EXPR;\n \t  else\n \t    /* When dividing two signed integers, we have to promote to int."}, {"sha": "df43234265c374f1a740d4e6dc5064544f9cfb5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c15146e42cb102382bb126dd96cc143c56a575/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c15146e42cb102382bb126dd96cc143c56a575/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01c15146e42cb102382bb126dd96cc143c56a575", "patch": "@@ -1,5 +1,8 @@\n 2006-12-01  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n+\tPR c++/30022\n+\t* g++.dg/ext/vector5.C: New test.\n+\n \tPR c++/30021\n \t* g++.dg/other/main1.C: New test.\n "}, {"sha": "e5304bcb12dec692ebfe3dcc3b4e2da3298cdb6d", "filename": "gcc/testsuite/g++.dg/ext/vector5.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01c15146e42cb102382bb126dd96cc143c56a575/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01c15146e42cb102382bb126dd96cc143c56a575/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector5.C?ref=01c15146e42cb102382bb126dd96cc143c56a575", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/30022\n+// { dg-do compile }\n+\n+void foo()\n+{\n+  int __attribute__((vector_size(8))) v;\n+  v = 1/v;  // { dg-error \"invalid operands of types\" }\n+}"}]}