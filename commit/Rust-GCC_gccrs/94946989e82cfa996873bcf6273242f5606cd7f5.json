{"sha": "94946989e82cfa996873bcf6273242f5606cd7f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ5NDY5ODllODJjZmE5OTY4NzNiY2Y2MjczMjQyZjU2MDZjZDdmNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-03T13:55:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-15T01:50:38Z"}, "message": "analyzer: delete checker_event::clone\n\nchecker_event has a clone vfunc implemented by all the concrete\nsubclasses, but this is never used (a holdover from a very early\nimplementation).  This patch deletes it.\n\ngcc/analyzer/ChangeLog:\n\t* checker-path.h (checker_event::clone): Delete vfunc decl.\n\t(debug_event::clone): Delete vfunc impl.\n\t(custom_event::clone): Delete vfunc impl.\n\t(statement_event::clone): Delete vfunc impl.\n\t(function_entry_event::clone): Delete vfunc impl.\n\t(state_change_event::clone): Delete vfunc impl.\n\t(start_cfg_edge_event::clone): Delete vfunc impl.\n\t(end_cfg_edge_event::clone): Delete vfunc impl.\n\t(call_event::clone): Delete vfunc impl.\n\t(return_event::clone): Delete vfunc impl.\n\t(setjmp_event::clone): Delete vfunc impl.\n\t(rewind_from_longjmp_event::clone): Delete vfunc impl.\n\t(rewind_to_setjmp_event::clone): Delete vfunc impl.\n\t(warning_event::clone): Delete vfunc impl.", "tree": {"sha": "090abc8c78a4db9aa80a1e059857f2890b8f9cb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/090abc8c78a4db9aa80a1e059857f2890b8f9cb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94946989e82cfa996873bcf6273242f5606cd7f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94946989e82cfa996873bcf6273242f5606cd7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94946989e82cfa996873bcf6273242f5606cd7f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94946989e82cfa996873bcf6273242f5606cd7f5/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "718930c0c8f8d25d185cb65e38c79a19458b6628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718930c0c8f8d25d185cb65e38c79a19458b6628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/718930c0c8f8d25d185cb65e38c79a19458b6628"}], "stats": {"total": 89, "additions": 17, "deletions": 72}, "files": [{"sha": "863bf3fe510f6de22388d8d8ee68c092e2a959d6", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94946989e82cfa996873bcf6273242f5606cd7f5/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94946989e82cfa996873bcf6273242f5606cd7f5/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=94946989e82cfa996873bcf6273242f5606cd7f5", "patch": "@@ -1,3 +1,20 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.h (checker_event::clone): Delete vfunc decl.\n+\t(debug_event::clone): Delete vfunc impl.\n+\t(custom_event::clone): Delete vfunc impl.\n+\t(statement_event::clone): Delete vfunc impl.\n+\t(function_entry_event::clone): Delete vfunc impl.\n+\t(state_change_event::clone): Delete vfunc impl.\n+\t(start_cfg_edge_event::clone): Delete vfunc impl.\n+\t(end_cfg_edge_event::clone): Delete vfunc impl.\n+\t(call_event::clone): Delete vfunc impl.\n+\t(return_event::clone): Delete vfunc impl.\n+\t(setjmp_event::clone): Delete vfunc impl.\n+\t(rewind_from_longjmp_event::clone): Delete vfunc impl.\n+\t(rewind_to_setjmp_event::clone): Delete vfunc impl.\n+\t(warning_event::clone): Delete vfunc impl.\n+\n 2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* supergraph.cc (supernode::dump_dot): Ensure that the TABLE"}, {"sha": "31d4004227de48adb5d5bf6925a416367e5715f2", "filename": "gcc/analyzer/checker-path.h", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94946989e82cfa996873bcf6273242f5606cd7f5/gcc%2Fanalyzer%2Fchecker-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94946989e82cfa996873bcf6273242f5606cd7f5/gcc%2Fanalyzer%2Fchecker-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.h?ref=94946989e82cfa996873bcf6273242f5606cd7f5", "patch": "@@ -88,8 +88,6 @@ class checker_event : public diagnostic_event\n \n   /* Additional functionality.  */\n \n-  virtual checker_event *clone () const = 0;\n-\n   virtual void prepare_for_emission (checker_path *,\n \t\t\t\t     pending_diagnostic *pd,\n \t\t\t\t     diagnostic_event_id_t emission_id);\n@@ -128,11 +126,6 @@ class debug_event : public checker_event\n \n   label_text get_desc (bool) const FINAL OVERRIDE;\n \n-  checker_event *clone () const FINAL OVERRIDE\n-  {\n-    return new debug_event (m_loc, m_fndecl, m_depth, m_desc);\n-  }\n-\n private:\n   char *m_desc;\n };\n@@ -156,11 +149,6 @@ class custom_event : public checker_event\n \n   label_text get_desc (bool) const FINAL OVERRIDE;\n \n-  checker_event *clone () const FINAL OVERRIDE\n-  {\n-    return new custom_event (m_loc, m_fndecl, m_depth, m_desc);\n-  }\n-\n private:\n   char *m_desc;\n };\n@@ -176,11 +164,6 @@ class statement_event : public checker_event\n \n   label_text get_desc (bool) const FINAL OVERRIDE;\n \n-  checker_event *clone () const FINAL OVERRIDE\n-  {\n-    return new statement_event (m_stmt, m_fndecl, m_depth, m_dst_state);\n-  }\n-\n   const gimple * const m_stmt;\n   const program_state m_dst_state;\n };\n@@ -197,11 +180,6 @@ class function_entry_event : public checker_event\n \n   label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n \n-  checker_event *clone () const FINAL OVERRIDE\n-  {\n-    return new function_entry_event (m_loc, m_fndecl, m_depth);\n-  }\n-\n   bool is_function_entry_p () const FINAL OVERRIDE { return true; }\n };\n \n@@ -221,13 +199,6 @@ class state_change_event : public checker_event\n \n   label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n \n-  checker_event *clone () const FINAL OVERRIDE\n-  {\n-    return new state_change_event (m_node, m_stmt, m_depth,\n-\t\t\t\t   m_sm, m_var, m_from, m_to, m_origin,\n-\t\t\t\t   m_dst_state);\n-  }\n-\n   region_id get_lvalue (tree expr) const\n   {\n     return m_dst_state.m_region_model->get_lvalue (expr, NULL);\n@@ -302,11 +273,6 @@ class start_cfg_edge_event : public cfg_edge_event\n \n   label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n \n-  checker_event *clone () const FINAL OVERRIDE\n-  {\n-    return new start_cfg_edge_event (m_eedge, m_loc, m_fndecl, m_depth);\n-  }\n-\n  private:\n   label_text maybe_describe_condition (bool can_colorize) const;\n \n@@ -333,11 +299,6 @@ class end_cfg_edge_event : public cfg_edge_event\n   {\n     return label_text::borrow (\"...to here\");\n   }\n-\n-  checker_event *clone () const FINAL OVERRIDE\n-  {\n-    return new end_cfg_edge_event (m_eedge, m_loc, m_fndecl, m_depth);\n-  }\n };\n \n /* A concrete event subclass for an interprocedural call.  */\n@@ -350,11 +311,6 @@ class call_event : public superedge_event\n \n   label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n \n-  checker_event *clone () const FINAL OVERRIDE\n-  {\n-    return new call_event (m_eedge, m_loc, m_fndecl, m_depth);\n-  }\n-\n   bool is_call_p () const FINAL OVERRIDE;\n };\n \n@@ -368,11 +324,6 @@ class return_event : public superedge_event\n \n   label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n \n-  checker_event *clone () const FINAL OVERRIDE\n-  {\n-    return new return_event (m_eedge, m_loc, m_fndecl, m_depth);\n-  }\n-\n   bool is_return_p () const FINAL OVERRIDE;\n };\n \n@@ -388,11 +339,6 @@ class setjmp_event : public checker_event\n   {\n   }\n \n-  setjmp_event *clone () const FINAL OVERRIDE\n-  {\n-    return new setjmp_event (m_loc, m_enode, m_fndecl, m_depth);\n-  }\n-\n   label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n \n   void prepare_for_emission (checker_path *path,\n@@ -436,12 +382,6 @@ class rewind_from_longjmp_event : public rewind_event\n   }\n \n   label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n-\n-  rewind_from_longjmp_event *clone () const FINAL OVERRIDE\n-  {\n-    return new rewind_from_longjmp_event (get_eedge (),\n-\t\t\t\t\t  m_loc, m_fndecl, m_depth);\n-  }\n };\n \n /* A concrete event subclass for rewinding from a longjmp to a setjmp,\n@@ -460,13 +400,6 @@ class rewind_to_setjmp_event : public rewind_event\n \n   label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n \n-  rewind_to_setjmp_event *clone () const FINAL OVERRIDE\n-  {\n-    return new rewind_to_setjmp_event (get_eedge (),\n-\t\t\t\t       m_loc, m_fndecl, m_depth,\n-\t\t\t\t       m_rewind_info);\n-  }\n-\n   void prepare_for_emission (checker_path *path,\n \t\t\t     pending_diagnostic *pd,\n \t\t\t     diagnostic_event_id_t emission_id) FINAL OVERRIDE;\n@@ -494,11 +427,6 @@ class warning_event : public checker_event\n \n   label_text get_desc (bool can_colorize) const FINAL OVERRIDE;\n \n-  warning_event *clone () const FINAL OVERRIDE\n-  {\n-    return new warning_event (m_loc, m_fndecl, m_depth, m_sm, m_var, m_state);\n-  }\n-\n private:\n   const state_machine *m_sm;\n   tree m_var;"}]}