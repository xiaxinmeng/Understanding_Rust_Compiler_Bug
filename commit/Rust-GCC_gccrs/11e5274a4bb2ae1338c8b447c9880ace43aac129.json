{"sha": "11e5274a4bb2ae1338c8b447c9880ace43aac129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFlNTI3NGE0YmIyYWUxMzM4YzhiNDQ3Yzk4ODBhY2U0M2FhYzEyOQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-08-09T19:26:07Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-08-09T19:26:07Z"}, "message": "gfortran.h (gfc_get_code): Modified prototype.\n\n2013-08-09  Janus Weil  <janus@gcc.gnu.org>\n\n\t* gfortran.h (gfc_get_code): Modified prototype.\n\t* class.c (finalize_component, finalization_scalarizer,\n\tfinalization_get_offset, finalizer_insert_packed_call,\n\tgenerate_finalization_wrapper, gfc_find_derived_vtab,\n\tgfc_find_intrinsic_vtab): Use 'gfc_get_code'.\n\t* io.c (match_io_iterator, match_io_element, terminate_io, get_io_list,\n\tgfc_match_inquire): Call 'gfc_get_code' with argument.\n\t* match.c (match_simple_forall, gfc_match_forall, gfc_match_goto,\n\tgfc_match_nullify, gfc_match_call, match_simple_where, gfc_match_where):\n\tDitto.\n\t* parse.c (new_level): Ditto.\n\t(add_statement): Use XCNEW.\n\t* resolve.c (resolve_entries, resolve_allocate_expr,\n\tresolve_select_type, build_assignment, build_init_assign): Call\n\t'gfc_get_code' with argument.\n\t* st.c (gfc_get_code): Add argument 'op'.\n\t* trans-expr.c (gfc_trans_class_array_init_assign): Call 'gfc_get_code'\n\twith argument.\n\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n\nFrom-SVN: r201635", "tree": {"sha": "0ac9c4560a8ad95d76c1854f90668bda6feda0ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ac9c4560a8ad95d76c1854f90668bda6feda0ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11e5274a4bb2ae1338c8b447c9880ace43aac129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e5274a4bb2ae1338c8b447c9880ace43aac129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e5274a4bb2ae1338c8b447c9880ace43aac129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e5274a4bb2ae1338c8b447c9880ace43aac129/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa3d31bd6bb9274abaa3a7d59cc88e9a6112194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa3d31bd6bb9274abaa3a7d59cc88e9a6112194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fa3d31bd6bb9274abaa3a7d59cc88e9a6112194"}], "stats": {"total": 326, "additions": 118, "deletions": 208}, "files": [{"sha": "c1adb88d1bc02c171201f26b96cd3af04fc47fe7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=11e5274a4bb2ae1338c8b447c9880ace43aac129", "patch": "@@ -1,3 +1,25 @@\n+2013-08-09  Janus Weil  <janus@gcc.gnu.org>\n+\n+\t* gfortran.h (gfc_get_code): Modified prototype.\n+\t* class.c (finalize_component, finalization_scalarizer,\n+\tfinalization_get_offset, finalizer_insert_packed_call,\n+\tgenerate_finalization_wrapper, gfc_find_derived_vtab,\n+\tgfc_find_intrinsic_vtab): Use 'gfc_get_code'.\n+\t* io.c (match_io_iterator, match_io_element, terminate_io, get_io_list,\n+\tgfc_match_inquire): Call 'gfc_get_code' with argument.\n+\t* match.c (match_simple_forall, gfc_match_forall, gfc_match_goto,\n+\tgfc_match_nullify, gfc_match_call, match_simple_where, gfc_match_where):\n+\tDitto.\n+\t* parse.c (new_level): Ditto.\n+\t(add_statement): Use XCNEW.\n+\t* resolve.c (resolve_entries, resolve_allocate_expr,\n+\tresolve_select_type, build_assignment, build_init_assign): Call\n+\t'gfc_get_code' with argument.\n+\t* st.c (gfc_get_code): Add argument 'op'.\n+\t* trans-expr.c (gfc_trans_class_array_init_assign): Call 'gfc_get_code'\n+\twith argument.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n+\n 2013-08-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/58058"}, {"sha": "629b052fb32dddc9cd0601cfe7238d868178a11f", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 48, "deletions": 132, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=11e5274a4bb2ae1338c8b447c9880ace43aac129", "patch": "@@ -863,7 +863,7 @@ finalize_component (gfc_expr *expr, gfc_symbol *derived, gfc_component *comp,\n \t  || (comp->ts.type == BT_CLASS && CLASS_DATA (comp)\n \t      && CLASS_DATA (comp)->attr.allocatable))\n \t{\n-\t  block = XCNEW (gfc_code);\n+\t  block = gfc_get_code (EXEC_IF);\n \t  if (*code)\n \t    {\n \t      (*code)->next = block;\n@@ -872,19 +872,12 @@ finalize_component (gfc_expr *expr, gfc_symbol *derived, gfc_component *comp,\n \t  else\n \t      (*code) = block;\n \n-\t  block->loc = gfc_current_locus;\n-\t  block->op = EXEC_IF;\n-\n-\t  block->block = XCNEW (gfc_code);\n+\t  block->block = gfc_get_code (EXEC_IF);\n \t  block = block->block;\n-\t  block->loc = gfc_current_locus;\n-\t  block->op = EXEC_IF;\n \t  block->expr1 = gfc_lval_expr_from_sym (fini_coarray);\n \t}\n \n-      dealloc = XCNEW (gfc_code);\n-      dealloc->op = EXEC_DEALLOCATE;\n-      dealloc->loc = gfc_current_locus;\n+      dealloc = gfc_get_code (EXEC_DEALLOCATE);\n \n       dealloc->ext.alloc.list = gfc_get_alloc ();\n       dealloc->ext.alloc.list->expr = e;\n@@ -915,10 +908,7 @@ finalize_component (gfc_expr *expr, gfc_symbol *derived, gfc_component *comp,\n \t  break;\n \n       gcc_assert (c);\n-      final_wrap = XCNEW (gfc_code);\n-      final_wrap->op = EXEC_CALL;\n-      final_wrap->loc = gfc_current_locus;\n-      final_wrap->loc = gfc_current_locus;\n+      final_wrap = gfc_get_code (EXEC_CALL);\n       final_wrap->symtree = c->initializer->symtree;\n       final_wrap->resolved_sym = c->initializer->symtree->n.sym;\n       final_wrap->ext.actual = gfc_get_actual_arglist ();\n@@ -955,9 +945,7 @@ finalization_scalarizer (gfc_symbol *array, gfc_symbol *ptr,\n   gfc_expr *expr, *expr2;\n \n   /* C_F_POINTER().  */\n-  block = XCNEW (gfc_code);\n-  block->op = EXEC_CALL;\n-  block->loc = gfc_current_locus;\n+  block = gfc_get_code (EXEC_CALL);\n   gfc_get_sym_tree (\"c_f_pointer\", sub_ns, &block->symtree, true);\n   block->resolved_sym = block->symtree->n.sym;\n   block->resolved_sym->attr.flavor = FL_PROCEDURE;\n@@ -1037,10 +1025,8 @@ finalization_get_offset (gfc_symbol *idx, gfc_symbol *idx2, gfc_symbol *offset,\n   gfc_expr *expr, *expr2;\n \n   /* offset = 0.  */\n-  block->next = XCNEW (gfc_code);\n+  block->next = gfc_get_code (EXEC_ASSIGN);\n   block = block->next;\n-  block->op = EXEC_ASSIGN;\n-  block->loc = gfc_current_locus;\n   block->expr1 = gfc_lval_expr_from_sym (offset);\n   block->expr2 = gfc_get_int_expr (gfc_index_integer_kind, NULL, 0);\n \n@@ -1050,13 +1036,10 @@ finalization_get_offset (gfc_symbol *idx, gfc_symbol *idx2, gfc_symbol *offset,\n   iter->start = gfc_get_int_expr (gfc_index_integer_kind, NULL, 1);\n   iter->end = gfc_copy_expr (rank);\n   iter->step = gfc_get_int_expr (gfc_index_integer_kind, NULL, 1);\n-  block->next = XCNEW (gfc_code);\n+  block->next = gfc_get_code (EXEC_DO);\n   block = block->next;\n-  block->op = EXEC_DO;\n-  block->loc = gfc_current_locus;\n   block->ext.iterator = iter;\n-  block->block = gfc_get_code ();\n-  block->block->op = EXEC_DO;\n+  block->block = gfc_get_code (EXEC_DO);\n \n   /* Loop body: offset = offset + mod (idx, sizes(idx2)) / sizes(idx2-1)\n \t\t\t\t  * strides(idx2).  */\n@@ -1115,9 +1098,7 @@ finalization_get_offset (gfc_symbol *idx, gfc_symbol *idx2, gfc_symbol *offset,\n   expr->ts = idx->ts;\n \n   /* offset = offset + ...  */\n-  block->block->next = XCNEW (gfc_code);\n-  block->block->next->op = EXEC_ASSIGN;\n-  block->block->next->loc = gfc_current_locus;\n+  block->block->next = gfc_get_code (EXEC_ASSIGN);\n   block->block->next->expr1 = gfc_lval_expr_from_sym (offset);\n   block->block->next->expr2 = gfc_get_expr ();\n   block->block->next->expr2->expr_type = EXPR_OP;\n@@ -1127,10 +1108,8 @@ finalization_get_offset (gfc_symbol *idx, gfc_symbol *idx2, gfc_symbol *offset,\n   block->block->next->expr2->ts = idx->ts;\n \n   /* After the loop:  offset = offset * byte_stride.  */\n-  block->next = XCNEW (gfc_code);\n+  block->next = gfc_get_code (EXEC_ASSIGN);\n   block = block->next;\n-  block->op = EXEC_ASSIGN;\n-  block->loc = gfc_current_locus;\n   block->expr1 = gfc_lval_expr_from_sym (offset);\n   block->expr2 = gfc_get_expr ();\n   block->expr2->expr_type = EXPR_OP;\n@@ -1189,15 +1168,11 @@ finalizer_insert_packed_call (gfc_code *block, gfc_finalizer *fini,\n   gfc_code *block2;\n   int i;\n \n-  block->next = XCNEW (gfc_code);\n+  block->next = gfc_get_code (EXEC_IF);\n   block = block->next;\n-  block->loc = gfc_current_locus;\n-  block->op = EXEC_IF;\n \n-  block->block = XCNEW (gfc_code);\n+  block->block = gfc_get_code (EXEC_IF);\n   block = block->block;\n-  block->loc = gfc_current_locus;\n-  block->op = EXEC_IF;\n \n   /* size_expr = STORAGE_SIZE (...) / NUMERIC_STORAGE_SIZE.  */\n   size_expr = gfc_get_expr ();\n@@ -1274,27 +1249,21 @@ finalizer_insert_packed_call (gfc_code *block, gfc_finalizer *fini,\n   block->expr1->value.op.op2->value.op.op2 = gfc_copy_expr (size_expr);\n \n   /* IF body: call final subroutine.  */\n-  block->next = XCNEW (gfc_code);\n-  block->next->op = EXEC_CALL;\n-  block->next->loc = gfc_current_locus;\n+  block->next = gfc_get_code (EXEC_CALL);\n   block->next->symtree = fini->proc_tree;\n   block->next->resolved_sym = fini->proc_tree->n.sym;\n   block->next->ext.actual = gfc_get_actual_arglist ();\n   block->next->ext.actual->expr = gfc_lval_expr_from_sym (array);\n \n   /* ELSE.  */\n \n-  block->block = XCNEW (gfc_code);\n+  block->block = gfc_get_code (EXEC_IF);\n   block = block->block;\n-  block->loc = gfc_current_locus;\n-  block->op = EXEC_IF;\n \n-  block->next = XCNEW (gfc_code);\n+  /* BLOCK ... END BLOCK.  */\n+  block->next = gfc_get_code (EXEC_BLOCK);\n   block = block->next;\n \n-  /* BLOCK ... END BLOCK.  */\n-  block->op = EXEC_BLOCK;\n-  block->loc = gfc_current_locus;\n   ns = gfc_build_block_ns (sub_ns);\n   block->ext.block.ns = ns;\n   block->ext.block.assoc = NULL;\n@@ -1347,13 +1316,10 @@ finalizer_insert_packed_call (gfc_code *block, gfc_finalizer *fini,\n   iter->end = gfc_lval_expr_from_sym (nelem);\n   iter->step = gfc_get_int_expr (gfc_index_integer_kind, NULL, 1);\n \n-  block = XCNEW (gfc_code);\n+  block = gfc_get_code (EXEC_DO);\n   ns->code = block;\n-  block->op = EXEC_DO;\n-  block->loc = gfc_current_locus;\n   block->ext.iterator = iter;\n-  block->block = gfc_get_code ();\n-  block->block->op = EXEC_DO;\n+  block->block = gfc_get_code (EXEC_DO);\n \n   /* Offset calculation for the new array: idx * size of type (in bytes).  */\n   offset2 = gfc_get_expr ();\n@@ -1378,18 +1344,14 @@ finalizer_insert_packed_call (gfc_code *block, gfc_finalizer *fini,\n   block2 = block2->next;\n \n   /* ptr2 = ptr.  */\n-  block2->next = XCNEW (gfc_code);\n+  block2->next = gfc_get_code (EXEC_ASSIGN);\n   block2 = block2->next;\n-  block2->op = EXEC_ASSIGN;\n-  block2->loc = gfc_current_locus;\n   block2->expr1 = gfc_lval_expr_from_sym (ptr2);\n   block2->expr2 = gfc_lval_expr_from_sym (ptr);\n \n   /* Call now the user's final subroutine. */\n-  block->next  = XCNEW (gfc_code);\n+  block->next  = gfc_get_code (EXEC_CALL);\n   block = block->next;\n-  block->op = EXEC_CALL;\n-  block->loc = gfc_current_locus;\n   block->symtree = fini->proc_tree;\n   block->resolved_sym = fini->proc_tree->n.sym;\n   block->ext.actual = gfc_get_actual_arglist ();\n@@ -1407,13 +1369,10 @@ finalizer_insert_packed_call (gfc_code *block, gfc_finalizer *fini,\n   iter->end = gfc_lval_expr_from_sym (nelem);\n   iter->step = gfc_get_int_expr (gfc_index_integer_kind, NULL, 1);\n \n-  block->next = XCNEW (gfc_code);\n+  block->next = gfc_get_code (EXEC_DO);\n   block = block->next;\n-  block->op = EXEC_DO;\n-  block->loc = gfc_current_locus;\n   block->ext.iterator = iter;\n-  block->block = gfc_get_code ();\n-  block->block->op = EXEC_DO;\n+  block->block = gfc_get_code (EXEC_DO);\n \n   /* Offset calculation of \"array\".  */\n   block2 = finalization_get_offset (idx, idx2, offset, strides, sizes,\n@@ -1431,9 +1390,7 @@ finalizer_insert_packed_call (gfc_code *block, gfc_finalizer *fini,\n   block2 = block2->next;\n \n   /* ptr = ptr2.  */\n-  block2->next = XCNEW (gfc_code);\n-  block2->next->op = EXEC_ASSIGN;\n-  block2->next->loc = gfc_current_locus;\n+  block2->next = gfc_get_code (EXEC_ASSIGN);\n   block2->next->expr1 = gfc_lval_expr_from_sym (ptr);\n   block2->next->expr2 = gfc_lval_expr_from_sym (ptr2);\n }\n@@ -1695,27 +1652,21 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \n \n   /* Set return value to 0.  */\n-  last_code = XCNEW (gfc_code);\n-  last_code->op = EXEC_ASSIGN;\n-  last_code->loc = gfc_current_locus;\n+  last_code = gfc_get_code (EXEC_ASSIGN);\n   last_code->expr1 = gfc_lval_expr_from_sym (final);\n   last_code->expr2 = gfc_get_int_expr (4, NULL, 0);\n   sub_ns->code = last_code;\n \n   /* Set:  is_contiguous = .true.  */\n-  last_code->next = XCNEW (gfc_code);\n+  last_code->next = gfc_get_code (EXEC_ASSIGN);\n   last_code = last_code->next;\n-  last_code->op = EXEC_ASSIGN;\n-  last_code->loc = gfc_current_locus;\n   last_code->expr1 = gfc_lval_expr_from_sym (is_contiguous);\n   last_code->expr2 = gfc_get_logical_expr (gfc_default_logical_kind,\n \t\t\t\t\t   &gfc_current_locus, true);\n \n   /* Set:  sizes(0) = 1.  */\n-  last_code->next = XCNEW (gfc_code);\n+  last_code->next = gfc_get_code (EXEC_ASSIGN);\n   last_code = last_code->next;\n-  last_code->op = EXEC_ASSIGN;\n-  last_code->loc = gfc_current_locus;\n   last_code->expr1 = gfc_lval_expr_from_sym (sizes);\n   last_code->expr1->ref = gfc_get_ref ();\n   last_code->expr1->ref->type = REF_ARRAY;\n@@ -1740,19 +1691,14 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   iter->start = gfc_get_int_expr (gfc_index_integer_kind, NULL, 1);\n   iter->end = gfc_copy_expr (rank);\n   iter->step = gfc_get_int_expr (gfc_index_integer_kind, NULL, 1);\n-  last_code->next = XCNEW (gfc_code);\n+  last_code->next = gfc_get_code (EXEC_DO);\n   last_code = last_code->next;\n-  last_code->op = EXEC_DO;\n-  last_code->loc = gfc_current_locus;\n   last_code->ext.iterator = iter;\n-  last_code->block = gfc_get_code ();\n-  last_code->block->op = EXEC_DO;\n+  last_code->block = gfc_get_code (EXEC_DO);\n \n   /* strides(idx) = _F._stride(array,dim=idx). */\n-  last_code->block->next = XCNEW (gfc_code);\n+  last_code->block->next = gfc_get_code (EXEC_ASSIGN);\n   block = last_code->block->next;\n-  block->op = EXEC_ASSIGN;\n-  block->loc = gfc_current_locus;\n \n   block->expr1 = gfc_lval_expr_from_sym (strides);\n   block->expr1->ref = gfc_get_ref ();\n@@ -1769,10 +1715,8 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \t\t\t\t\t   gfc_lval_expr_from_sym (idx));\n \n   /* sizes(idx) = sizes(idx-1) * size(array,dim=idx, kind=index_kind). */\n-  block->next = XCNEW (gfc_code);\n+  block->next = gfc_get_code (EXEC_ASSIGN);\n   block = block->next;\n-  block->op = EXEC_ASSIGN;\n-  block->loc = gfc_current_locus;\n \n   /* sizes(idx) = ... */\n   block->expr1 = gfc_lval_expr_from_sym (sizes);\n@@ -1819,15 +1763,11 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   block->expr2->ts = idx->ts;\n \n   /* if (strides (idx) /= sizes(idx-1)) is_contiguous = .false.  */\n-  block->next = XCNEW (gfc_code);\n+  block->next = gfc_get_code (EXEC_IF);\n   block = block->next;\n-  block->loc = gfc_current_locus;\n-  block->op = EXEC_IF;\n \n-  block->block = XCNEW (gfc_code);\n+  block->block = gfc_get_code (EXEC_IF);\n   block = block->block;\n-  block->loc = gfc_current_locus;\n-  block->op = EXEC_IF;\n \n   /* if condition: strides(idx) /= sizes(idx-1).  */\n   block->expr1 = gfc_get_expr ();\n@@ -1864,10 +1804,8 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \t= block->expr1->value.op.op2->ref->u.ar.start[0]->value.op.op1->ts;\n \n   /* if body: is_contiguous = .false.  */\n-  block->next = XCNEW (gfc_code);\n+  block->next = gfc_get_code (EXEC_ASSIGN);\n   block = block->next;\n-  block->op = EXEC_ASSIGN;\n-  block->loc = gfc_current_locus;\n   block->expr1 = gfc_lval_expr_from_sym (is_contiguous);\n   block->expr2 = gfc_get_logical_expr (gfc_default_logical_kind,\n \t\t\t\t       &gfc_current_locus, false);\n@@ -1883,10 +1821,8 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   gfc_commit_symbol (nelem);\n \n   /* nelem = sizes (rank) - 1.  */\n-  last_code->next = XCNEW (gfc_code);\n+  last_code->next = gfc_get_code (EXEC_ASSIGN);\n   last_code = last_code->next;\n-  last_code->op = EXEC_ASSIGN;\n-  last_code->loc = gfc_current_locus;\n \n   last_code->expr1 = gfc_lval_expr_from_sym (nelem);\n \n@@ -1938,10 +1874,8 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n       gfc_commit_symbol (ptr);\n \n       /* SELECT CASE (RANK (array)).  */\n-      last_code->next = XCNEW (gfc_code);\n+      last_code->next = gfc_get_code (EXEC_SELECT);\n       last_code = last_code->next;\n-      last_code->op = EXEC_SELECT;\n-      last_code->loc = gfc_current_locus;\n       last_code->expr1 = gfc_copy_expr (rank);\n       block = NULL;\n \n@@ -1956,16 +1890,14 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \t  /* CASE (fini_rank).  */\n \t  if (block)\n \t    {\n-\t      block->block = XCNEW (gfc_code);\n+\t      block->block = gfc_get_code (EXEC_SELECT);\n \t      block = block->block;\n \t    }\n \t  else\n \t    {\n-\t      block = XCNEW (gfc_code);\n+\t      block = gfc_get_code (EXEC_SELECT);\n \t      last_code->block = block;\n \t    }\n-\t  block->loc = gfc_current_locus;\n-\t  block->op = EXEC_SELECT;\n \t  block->ext.block.case_list = gfc_get_case ();\n \t  block->ext.block.case_list->where = gfc_current_locus;\n \t  if (fini->proc_tree->n.sym->formal->sym->attr.dimension)\n@@ -1986,9 +1918,7 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \t\t\t\t\t  rank, sub_ns);\n \t  else\n \t    {\n-\t      block->next = XCNEW (gfc_code);\n-\t      block->next->op = EXEC_CALL;\n-\t      block->next->loc = gfc_current_locus;\n+\t      block->next = gfc_get_code (EXEC_CALL);\n \t      block->next->symtree = fini->proc_tree;\n \t      block->next->resolved_sym = fini->proc_tree->n.sym;\n \t      block->next->ext.actual = gfc_get_actual_arglist ();\n@@ -2002,16 +1932,14 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \t  /* CASE DEFAULT.  */\n \t  if (block)\n \t    {\n-\t      block->block = XCNEW (gfc_code);\n+\t      block->block = gfc_get_code (EXEC_SELECT);\n \t      block = block->block;\n \t    }\n \t  else\n \t    {\n-\t      block = XCNEW (gfc_code);\n+\t      block = gfc_get_code (EXEC_SELECT);\n \t      last_code->block = block;\n \t    }\n-\t  block->loc = gfc_current_locus;\n-\t  block->op = EXEC_SELECT;\n \t  block->ext.block.case_list = gfc_get_case ();\n \n \t  /* Create loop.  */\n@@ -2020,13 +1948,10 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \t  iter->start = gfc_get_int_expr (gfc_index_integer_kind, NULL, 0);\n \t  iter->end = gfc_lval_expr_from_sym (nelem);\n \t  iter->step = gfc_get_int_expr (gfc_index_integer_kind, NULL, 1);\n-\t  block->next = XCNEW (gfc_code);\n+\t  block->next = gfc_get_code (EXEC_DO);\n \t  block = block->next;\n-\t  block->op = EXEC_DO;\n-\t  block->loc = gfc_current_locus;\n \t  block->ext.iterator = iter;\n-\t  block->block = gfc_get_code ();\n-\t  block->block->op = EXEC_DO;\n+\t  block->block = gfc_get_code (EXEC_DO);\n \n \t  /* Offset calculation.  */\n \t  block = finalization_get_offset (idx, idx2, offset, strides, sizes,\n@@ -2043,10 +1968,8 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n \t  block = block->next;\n \n \t  /* CALL final_elemental (array).  */\n-\t  block->next = XCNEW (gfc_code);\n+\t  block->next = gfc_get_code (EXEC_CALL);\n \t  block = block->next;\n-\t  block->op = EXEC_CALL;\n-\t  block->loc = gfc_current_locus;\n \t  block->symtree = fini_elem->proc_tree;\n \t  block->resolved_sym = fini_elem->proc_sym;\n \t  block->ext.actual = gfc_get_actual_arglist ();\n@@ -2088,13 +2011,10 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n       iter->start = gfc_get_int_expr (gfc_index_integer_kind, NULL, 0);\n       iter->end = gfc_lval_expr_from_sym (nelem);\n       iter->step = gfc_get_int_expr (gfc_index_integer_kind, NULL, 1);\n-      last_code->next = XCNEW (gfc_code);\n+      last_code->next = gfc_get_code (EXEC_DO);\n       last_code = last_code->next;\n-      last_code->op = EXEC_DO;\n-      last_code->loc = gfc_current_locus;\n       last_code->ext.iterator = iter;\n-      last_code->block = gfc_get_code ();\n-      last_code->block->op = EXEC_DO;\n+      last_code->block = gfc_get_code (EXEC_DO);\n \n       /* Offset calculation.  */\n       block = finalization_get_offset (idx, idx2, offset, strides, sizes,\n@@ -2126,10 +2046,8 @@ generate_finalization_wrapper (gfc_symbol *derived, gfc_namespace *ns,\n   /* Call the finalizer of the ancestor.  */\n   if (ancestor_wrapper && ancestor_wrapper->expr_type != EXPR_NULL)\n     {\n-      last_code->next = XCNEW (gfc_code);\n+      last_code->next = gfc_get_code (EXEC_CALL);\n       last_code = last_code->next;\n-      last_code->op = EXEC_CALL;\n-      last_code->loc = gfc_current_locus;\n       last_code->symtree = ancestor_wrapper->symtree;\n       last_code->resolved_sym = ancestor_wrapper->symtree->n.sym;\n \n@@ -2375,8 +2293,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t  copy->formal->next = gfc_get_formal_arglist ();\n \t\t  copy->formal->next->sym = dst;\n \t\t  /* Set up code.  */\n-\t\t  sub_ns->code = gfc_get_code ();\n-\t\t  sub_ns->code->op = EXEC_INIT_ASSIGN;\n+\t\t  sub_ns->code = gfc_get_code (EXEC_INIT_ASSIGN);\n \t\t  sub_ns->code->expr1 = gfc_lval_expr_from_sym (dst);\n \t\t  sub_ns->code->expr2 = gfc_lval_expr_from_sym (src);\n \t\t  /* Set initializer.  */\n@@ -2659,8 +2576,7 @@ gfc_find_intrinsic_vtab (gfc_typespec *ts)\n \t      copy->formal->next = gfc_get_formal_arglist ();\n \t      copy->formal->next->sym = dst;\n \t      /* Set up code.  */\n-\t      sub_ns->code = gfc_get_code ();\n-\t      sub_ns->code->op = EXEC_INIT_ASSIGN;\n+\t      sub_ns->code = gfc_get_code (EXEC_INIT_ASSIGN);\n \t      sub_ns->code->expr1 = gfc_lval_expr_from_sym (dst);\n \t      sub_ns->code->expr2 = gfc_lval_expr_from_sym (src);\n \t    got_char_copy:"}, {"sha": "5c617cad4f29cd28075af2f237cd9e3f1d073209", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=11e5274a4bb2ae1338c8b447c9880ace43aac129", "patch": "@@ -2820,7 +2820,7 @@ bool gfc_check_vardef_context (gfc_expr*, bool, bool, bool, const char*);\n extern gfc_code new_st;\n \n void gfc_clear_new_st (void);\n-gfc_code *gfc_get_code (void);\n+gfc_code *gfc_get_code (gfc_exec_op);\n gfc_code *gfc_append_code (gfc_code *, gfc_code *);\n void gfc_free_statement (gfc_code *);\n void gfc_free_statements (gfc_code *);"}, {"sha": "cc5ce12781ea79a79b331575bd114110a72b8efa", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=11e5274a4bb2ae1338c8b447c9880ace43aac129", "patch": "@@ -3055,12 +3055,10 @@ match_io_iterator (io_kind k, gfc_code **result)\n   if (gfc_match_char (')') != MATCH_YES)\n     goto syntax;\n \n-  new_code = gfc_get_code ();\n-  new_code->op = EXEC_DO;\n+  new_code = gfc_get_code (EXEC_DO);\n   new_code->ext.iterator = iter;\n \n-  new_code->block = gfc_get_code ();\n-  new_code->block->op = EXEC_DO;\n+  new_code->block = gfc_get_code (EXEC_DO);\n   new_code->block->next = head;\n \n   *result = new_code;\n@@ -3117,8 +3115,7 @@ match_io_element (io_kind k, gfc_code **cpp)\n       return MATCH_ERROR;\n     }\n \n-  cp = gfc_get_code ();\n-  cp->op = EXEC_TRANSFER;\n+  cp = gfc_get_code (EXEC_TRANSFER);\n   cp->expr1 = expr;\n   if (k != M_INQUIRE)\n     cp->ext.dt = current_dt;\n@@ -3180,8 +3177,7 @@ terminate_io (gfc_code *io_code)\n   if (io_code == NULL)\n     io_code = new_st.block;\n \n-  c = gfc_get_code ();\n-  c->op = EXEC_DT_END;\n+  c = gfc_get_code (EXEC_DT_END);\n \n   /* Point to structure that is already there */\n   c->ext.dt = new_st.ext.dt;\n@@ -3751,8 +3747,7 @@ match_io (io_kind k)\n \n   new_st.op = (k == M_READ) ? EXEC_READ : EXEC_WRITE;\n   new_st.ext.dt = dt;\n-  new_st.block = gfc_get_code ();\n-  new_st.block->op = new_st.op;\n+  new_st.block = gfc_get_code (new_st.op);\n   new_st.block->next = io_code;\n \n   terminate_io (io_code);\n@@ -3961,8 +3956,7 @@ gfc_match_inquire (void)\n       if (gfc_implicit_pure (NULL))\n \tgfc_current_ns->proc_name->attr.implicit_pure = 0;\n \n-      new_st.block = gfc_get_code ();\n-      new_st.block->op = EXEC_IOLENGTH;\n+      new_st.block = gfc_get_code (EXEC_IOLENGTH);\n       terminate_io (code);\n       new_st.block->next = code;\n       return MATCH_YES;"}, {"sha": "213a5a2effbcd1ba747ae1ed2315fee13c9dc528", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 23, "deletions": 35, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=11e5274a4bb2ae1338c8b447c9880ace43aac129", "patch": "@@ -1608,13 +1608,12 @@ gfc_match_if (gfc_statement *if_type)\n      is in new_st.  Rearrange things so that the IF statement appears\n      in new_st.  */\n \n-  p = gfc_get_code ();\n-  p->next = gfc_get_code ();\n+  p = gfc_get_code (EXEC_IF);\n+  p->next = XCNEW (gfc_code);\n   *p->next = new_st;\n   p->next->loc = gfc_current_locus;\n \n   p->expr1 = expr;\n-  p->op = EXEC_IF;\n \n   gfc_clear_new_st ();\n \n@@ -2224,7 +2223,7 @@ match_simple_forall (void)\n \tgoto syntax;\n     }\n \n-  c = gfc_get_code ();\n+  c = XCNEW (gfc_code);\n   *c = new_st;\n   c->loc = gfc_current_locus;\n \n@@ -2235,9 +2234,7 @@ match_simple_forall (void)\n   new_st.op = EXEC_FORALL;\n   new_st.expr1 = mask;\n   new_st.ext.forall_iterator = head;\n-  new_st.block = gfc_get_code ();\n-\n-  new_st.block->op = EXEC_FORALL;\n+  new_st.block = gfc_get_code (EXEC_FORALL);\n   new_st.block->next = c;\n \n   return MATCH_YES;\n@@ -2302,16 +2299,15 @@ gfc_match_forall (gfc_statement *st)\n \tgoto syntax;\n     }\n \n-  c = gfc_get_code ();\n+  c = XCNEW (gfc_code);\n   *c = new_st;\n   c->loc = gfc_current_locus;\n \n   gfc_clear_new_st ();\n   new_st.op = EXEC_FORALL;\n   new_st.expr1 = mask;\n   new_st.ext.forall_iterator = head;\n-  new_st.block = gfc_get_code ();\n-  new_st.block->op = EXEC_FORALL;\n+  new_st.block = gfc_get_code (EXEC_FORALL);\n   new_st.block->next = c;\n \n   *st = ST_FORALL;\n@@ -3283,15 +3279,14 @@ gfc_match_goto (void)\n \t    goto cleanup;\n \n \t  if (head == NULL)\n-\t    head = tail = gfc_get_code ();\n+\t    head = tail = gfc_get_code (EXEC_GOTO);\n \t  else\n \t    {\n-\t      tail->block = gfc_get_code ();\n+\t      tail->block = gfc_get_code (EXEC_GOTO);\n \t      tail = tail->block;\n \t    }\n \n \t  tail->label1 = label;\n-\t  tail->op = EXEC_GOTO;\n \t}\n       while (gfc_match_char (',') == MATCH_YES);\n \n@@ -3328,22 +3323,20 @@ gfc_match_goto (void)\n \tgoto cleanup;\n \n       if (head == NULL)\n-\thead = tail = gfc_get_code ();\n+\thead = tail = gfc_get_code (EXEC_SELECT);\n       else\n \t{\n-\t  tail->block = gfc_get_code ();\n+\t  tail->block = gfc_get_code (EXEC_SELECT);\n \t  tail = tail->block;\n \t}\n \n       cp = gfc_get_case ();\n       cp->low = cp->high = gfc_get_int_expr (gfc_default_integer_kind,\n \t\t\t\t\t     NULL, i++);\n \n-      tail->op = EXEC_SELECT;\n       tail->ext.block.case_list = cp;\n \n-      tail->next = gfc_get_code ();\n-      tail->next->op = EXEC_GOTO;\n+      tail->next = gfc_get_code (EXEC_GOTO);\n       tail->next->label1 = label;\n     }\n   while (gfc_match_char (',') == MATCH_YES);\n@@ -3800,14 +3793,16 @@ gfc_match_nullify (void)\n \n       /* Chain to list.  */\n       if (tail == NULL)\n-\ttail = &new_st;\n+\t{\n+\t  tail = &new_st;\n+\t  tail->op = EXEC_POINTER_ASSIGN;\n+\t}\n       else\n \t{\n-\t  tail->next = gfc_get_code ();\n+\t  tail->next = gfc_get_code (EXEC_POINTER_ASSIGN);\n \t  tail = tail->next;\n \t}\n \n-      tail->op = EXEC_POINTER_ASSIGN;\n       tail->expr1 = p;\n       tail->expr2 = e;\n \n@@ -4199,8 +4194,7 @@ gfc_match_call (void)\n       gfc_symbol *select_sym;\n       char name[GFC_MAX_SYMBOL_LEN + 1];\n \n-      new_st.next = c = gfc_get_code ();\n-      c->op = EXEC_SELECT;\n+      new_st.next = c = gfc_get_code (EXEC_SELECT);\n       sprintf (name, \"_result_%s\", sym->name);\n       gfc_get_ha_sym_tree (name, &select_st);   /* Can't fail.  */\n \n@@ -4225,17 +4219,15 @@ gfc_match_call (void)\n \n \t  i++;\n \n-\t  c->block = gfc_get_code ();\n+\t  c->block = gfc_get_code (EXEC_SELECT);\n \t  c = c->block;\n-\t  c->op = EXEC_SELECT;\n \n \t  new_case = gfc_get_case ();\n \t  new_case->high = gfc_get_int_expr (gfc_default_integer_kind, NULL, i);\n \t  new_case->low = new_case->high;\n \t  c->ext.block.case_list = new_case;\n \n-\t  c->next = gfc_get_code ();\n-\t  c->next->op = EXEC_GOTO;\n+\t  c->next = gfc_get_code (EXEC_GOTO);\n \t  c->next->label1 = a->label;\n \t}\n     }\n@@ -5639,12 +5631,10 @@ match_simple_where (void)\n   if (gfc_match_eos () != MATCH_YES)\n     goto syntax;\n \n-  c = gfc_get_code ();\n-\n-  c->op = EXEC_WHERE;\n+  c = gfc_get_code (EXEC_WHERE);\n   c->expr1 = expr;\n-  c->next = gfc_get_code ();\n \n+  c->next = XCNEW (gfc_code);\n   *c->next = new_st;\n   gfc_clear_new_st ();\n \n@@ -5699,12 +5689,10 @@ gfc_match_where (gfc_statement *st)\n \n   /* We've got a simple WHERE statement.  */\n   *st = ST_WHERE;\n-  c = gfc_get_code ();\n-\n-  c->op = EXEC_WHERE;\n+  c = gfc_get_code (EXEC_WHERE);\n   c->expr1 = expr;\n-  c->next = gfc_get_code ();\n \n+  c->next = XCNEW (gfc_code);\n   *c->next = new_st;\n   gfc_clear_new_st ();\n "}, {"sha": "512babfd45041df20ccb74aa86938743f330aac9", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=11e5274a4bb2ae1338c8b447c9880ace43aac129", "patch": "@@ -1095,7 +1095,7 @@ new_level (gfc_code *q)\n {\n   gfc_code *p;\n \n-  p = q->block = gfc_get_code ();\n+  p = q->block = gfc_get_code (EXEC_NOP);\n \n   gfc_state_stack->head = gfc_state_stack->tail = p;\n \n@@ -1111,7 +1111,7 @@ add_statement (void)\n {\n   gfc_code *p;\n \n-  p = gfc_get_code ();\n+  p = XCNEW (gfc_code);\n   *p = new_st;\n \n   p->loc = gfc_current_locus;"}, {"sha": "837bf1512bfd167b53d0955e6f17929f118efd5a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=11e5274a4bb2ae1338c8b447c9880ace43aac129", "patch": "@@ -723,8 +723,7 @@ resolve_entries (gfc_namespace *ns)\n   el = ns->entries;\n \n   /* Add an entry statement for it.  */\n-  c = gfc_get_code ();\n-  c->op = EXEC_ENTRY;\n+  c = gfc_get_code (EXEC_ENTRY);\n   c->ext.entry = el;\n   c->next = ns->code;\n   ns->code = c;\n@@ -6880,9 +6879,8 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \n       if (ts.type == BT_DERIVED && (init_e = gfc_default_initializer (&ts)))\n \t{\n-\t  gfc_code *init_st = gfc_get_code ();\n+\t  gfc_code *init_st = gfc_get_code (EXEC_INIT_ASSIGN);\n \t  init_st->loc = code->loc;\n-\t  init_st->op = EXEC_INIT_ASSIGN;\n \t  init_st->expr1 = gfc_expr_to_initialize (e);\n \t  init_st->expr2 = init_e;\n \t  init_st->next = code->next;\n@@ -8020,8 +8018,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n     code->ext.block.assoc = NULL;\n \n   /* Add EXEC_SELECT to switch on type.  */\n-  new_st = gfc_get_code ();\n-  new_st->op = code->op;\n+  new_st = gfc_get_code (code->op);\n   new_st->expr1 = code->expr1;\n   new_st->expr2 = code->expr2;\n   new_st->block = code->block;\n@@ -8087,8 +8084,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n       if (c->ts.type != BT_CLASS && c->ts.type != BT_UNKNOWN)\n \tgfc_add_data_component (st->n.sym->assoc->target);\n \n-      new_st = gfc_get_code ();\n-      new_st->op = EXEC_BLOCK;\n+      new_st = gfc_get_code (EXEC_BLOCK);\n       new_st->ext.block.ns = gfc_build_block_ns (ns);\n       new_st->ext.block.ns->code = body->next;\n       body->next = new_st;\n@@ -8139,9 +8135,8 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t{\n \t  /* Add a default case to hold the CLASS IS cases.  */\n \t  for (tail = code; tail->block; tail = tail->block) ;\n-\t  tail->block = gfc_get_code ();\n+\t  tail->block = gfc_get_code (EXEC_SELECT_TYPE);\n \t  tail = tail->block;\n-\t  tail->op = EXEC_SELECT_TYPE;\n \t  tail->ext.block.case_list = gfc_get_case ();\n \t  tail->ext.block.case_list->ts.type = BT_UNKNOWN;\n \t  tail->next = NULL;\n@@ -8184,14 +8179,12 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t}\n \n       /* Generate IF chain.  */\n-      if_st = gfc_get_code ();\n-      if_st->op = EXEC_IF;\n+      if_st = gfc_get_code (EXEC_IF);\n       new_st = if_st;\n       for (body = class_is; body; body = body->block)\n \t{\n-\t  new_st->block = gfc_get_code ();\n+\t  new_st->block = gfc_get_code (EXEC_IF);\n \t  new_st = new_st->block;\n-\t  new_st->op = EXEC_IF;\n \t  /* Set up IF condition: Call _gfortran_is_extension_of.  */\n \t  new_st->expr1 = gfc_get_expr ();\n \t  new_st->expr1->expr_type = EXPR_FUNCTION;\n@@ -8213,9 +8206,8 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t}\n \tif (default_case->next)\n \t  {\n-\t    new_st->block = gfc_get_code ();\n+\t    new_st->block = gfc_get_code (EXEC_IF);\n \t    new_st = new_st->block;\n-\t    new_st->op = EXEC_IF;\n \t    new_st->next = default_case->next;\n \t  }\n \n@@ -9241,8 +9233,7 @@ build_assignment (gfc_exec_op op, gfc_expr *expr1, gfc_expr *expr2,\n {\n   gfc_code *this_code;\n \n-  this_code = gfc_get_code ();\n-  this_code->op = op;\n+  this_code = gfc_get_code (op);\n   this_code->next = NULL;\n   this_code->expr1 = gfc_copy_expr (expr1);\n   this_code->expr2 = gfc_copy_expr (expr2);\n@@ -10281,13 +10272,12 @@ build_init_assign (gfc_symbol *sym, gfc_expr *init)\n   lval = gfc_lval_expr_from_sym (sym);\n \n   /* Add the code at scope entry.  */\n-  init_st = gfc_get_code ();\n+  init_st = gfc_get_code (EXEC_INIT_ASSIGN);\n   init_st->next = ns->code;\n   ns->code = init_st;\n \n   /* Assign the default initializer to the l-value.  */\n   init_st->loc = sym->declared_at;\n-  init_st->op = EXEC_INIT_ASSIGN;\n   init_st->expr1 = lval;\n   init_st->expr2 = init;\n }"}, {"sha": "f8b341c0b6c0f593c097c315dc48af1a2dbc662d", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=11e5274a4bb2ae1338c8b447c9880ace43aac129", "patch": "@@ -41,14 +41,16 @@ gfc_clear_new_st (void)\n }\n \n \n-/* Get a gfc_code structure.  */\n+/* Get a gfc_code structure, initialized with the current locus\n+   and a statement code 'op'.  */\n \n gfc_code *\n-gfc_get_code (void)\n+gfc_get_code (gfc_exec_op op)\n {\n   gfc_code *c;\n \n   c = XCNEW (gfc_code);\n+  c->op = op;\n   c->loc = gfc_current_locus;\n   return c;\n }"}, {"sha": "dd4c8fc62c1fa83d397d64becebb35411ae91f1f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=11e5274a4bb2ae1338c8b447c9880ace43aac129", "patch": "@@ -895,14 +895,13 @@ gfc_trans_class_array_init_assign (gfc_expr *rhs, gfc_expr *lhs, gfc_expr *obj)\n   ppc = gfc_copy_expr (obj);\n   gfc_add_vptr_component (ppc);\n   gfc_add_component_ref (ppc, \"_copy\");\n-  ppc_code = gfc_get_code ();\n+  ppc_code = gfc_get_code (EXEC_CALL);\n   ppc_code->resolved_sym = ppc->symtree->n.sym;\n   /* Although '_copy' is set to be elemental in class.c, it is\n      not staying that way.  Find out why, sometime....  */\n   ppc_code->resolved_sym->attr.elemental = 1;\n   ppc_code->ext.actual = actual;\n   ppc_code->expr1 = ppc;\n-  ppc_code->op = EXEC_CALL;\n   /* Since '_copy' is elemental, the scalarizer will take care\n      of arrays in gfc_trans_call.  */\n   res = gfc_trans_call (ppc_code, false, NULL, NULL, false);"}, {"sha": "edd2dacf579f0e7630ff4300c903128f68fc52ca", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11e5274a4bb2ae1338c8b447c9880ace43aac129/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=11e5274a4bb2ae1338c8b447c9880ace43aac129", "patch": "@@ -5232,14 +5232,13 @@ gfc_trans_allocate (gfc_code * code)\n \t\t\t\t(gfc_find_intrinsic_vtab (&rhs->ts));\n \t      gfc_add_component_ref (ppc, \"_copy\");\n \n-\t      ppc_code = gfc_get_code ();\n+\t      ppc_code = gfc_get_code (EXEC_CALL);\n \t      ppc_code->resolved_sym = ppc->symtree->n.sym;\n \t      /* Although '_copy' is set to be elemental in class.c, it is\n \t\t not staying that way.  Find out why, sometime....  */\n \t      ppc_code->resolved_sym->attr.elemental = 1;\n \t      ppc_code->ext.actual = actual;\n \t      ppc_code->expr1 = ppc;\n-\t      ppc_code->op = EXEC_CALL;\n \t      /* Since '_copy' is elemental, the scalarizer will take care\n \t\t of arrays in gfc_trans_call.  */\n \t      tmp = gfc_trans_call (ppc_code, true, NULL, NULL, false);"}]}