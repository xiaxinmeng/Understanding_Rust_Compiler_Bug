{"sha": "e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE0ZWExMDhmYWE2ZWJhNmE2MGE0NWZmMGNhMzA5OWNlNmFlNDVjMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-09T11:32:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-09T11:32:43Z"}, "message": "string: Add a workaround for -Wstringop-overread false positives [PR98465]\n\nIn the PR there are several possibilities how to improve _M_disjunct at\nleast in certain cases so that the compiler can figure out at least in some\ncases where __s is provably disjunct from _M_data() ... _M_data() + this->size()\nbut it is probably GCC 12 material.\n\nThe false positive warning is on this particular copy, which is done for\nnon-disjunct pointers when __len2 > __len1 and the __s >= __p + __len1,\ni.e. __s used to point to the characters moved through _S_move a few lines earlier\nby __len2 - __len1 characters up to make space.  That is why the\n_S_copy source is __s + __len2 - __len1.  Unfortunately, when the compiler\ncan't prove objects are disjunct, that copying from __s + __len2 - __len1\nof __len2 characters can very well mean accessing characters the source\nobject (if it is not disjunct) provably can't have.\n\nThe following patch works around that by making the _S_copy be a __p based\npointer instead of __s based pointer.\n__s + __len2 - __len1\nand\n__p + (__s - __p) + (__len2 - __len1)\nhave the same value and the latter may seem to be uselessly longer,\nbut it seems at least currently in GIMPLE we keep it that way and so that is\nwhat the warning code during expansion will see, and only actually\noptimize it to __s + __len2 - __len1 during RTL when we lose information\non what is a pointer and what is a mere offset with the same mode.\n\nSo, in the end we emit exactly the same assembly, just without the false\npositive warning.\n\n2021-02-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/98465\n\t* include/bits/basic_string.tcc (basic_string::_M_replace): When __s\n\tpoints to the characters moved by earlier _S_move, compute the source\n\taddress using expression based on the __p pointer rather than __s\n\tpointer.\n\n\t* g++.dg/warn/Wstringop-overread-1.C: New test.", "tree": {"sha": "d4db4d6eb0ccfa4830b757b17b3bdfc1dd83048d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4db4d6eb0ccfa4830b757b17b3bdfc1dd83048d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5304598f1481886f9871cc024cb65ba34aa4be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5304598f1481886f9871cc024cb65ba34aa4be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5304598f1481886f9871cc024cb65ba34aa4be3"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "f7ba61783da94b993371cedc29f702821efa08b3", "filename": "gcc/testsuite/g++.dg/warn/Wstringop-overread-1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overread-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overread-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstringop-overread-1.C?ref=e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2", "patch": "@@ -0,0 +1,12 @@\n+// PR middle-end/98994\n+// { dg-do compile }\n+// { dg-additional-options \"-Wstringop-overread -O2\" }\n+\n+#include <string>\n+\n+const char constantString[] = {42, 53};\n+\n+void f(std::string& s)\n+{\n+  s.insert(0, static_cast<const char*>(constantString), 2);\n+}"}, {"sha": "35b60865f5827a756c75887dec321728c9fab7a5", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2", "patch": "@@ -478,7 +478,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  if (__s + __len2 <= __p + __len1)\n \t\t    this->_S_move(__p, __s, __len2);\n \t\t  else if (__s >= __p + __len1)\n-\t\t    this->_S_copy(__p, __s + __len2 - __len1, __len2);\n+\t\t    {\n+\t\t      // Hint to middle end that __p and __s overlap\n+\t\t      // (PR 98465).\n+\t\t      const size_type __poff = (__s - __p) + (__len2 - __len1);\n+\t\t      this->_S_copy(__p, __p + __poff, __len2);\n+\t\t    }\n \t\t  else\n \t\t    {\n \t\t      const size_type __nleft = (__p + __len1) - __s;"}]}