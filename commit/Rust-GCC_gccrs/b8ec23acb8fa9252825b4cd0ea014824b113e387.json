{"sha": "b8ec23acb8fa9252825b4cd0ea014824b113e387", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlYzIzYWNiOGZhOTI1MjgyNWI0Y2QwZWEwMTQ4MjRiMTEzZTM4Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:21:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:21:50Z"}, "message": "bt-load.c: Include rtl-iter.h.\n\ngcc/\n\t* bt-load.c: Include rtl-iter.h.\n\t(btr_reference_found, find_btr_reference, btr_referenced_p): Delete.\n\t(find_btr_use): Move further up file.  Use FOR_EACH_SUBRTX_PTR\n\tto iterate over subrtxes.\n\t(insn_sets_btr_p, new_btr_user, compute_defs_uses_and_gen): Use\n\tfind_btr_use rather than btr_referenced_p.\n\nFrom-SVN: r214620", "tree": {"sha": "abe7f6d282b50b09308c71d71386facaadc5e743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abe7f6d282b50b09308c71d71386facaadc5e743"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8ec23acb8fa9252825b4cd0ea014824b113e387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ec23acb8fa9252825b4cd0ea014824b113e387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ec23acb8fa9252825b4cd0ea014824b113e387", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ec23acb8fa9252825b4cd0ea014824b113e387/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "403837b4cb714be6d248daa44a369b3a8bf7607a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/403837b4cb714be6d248daa44a369b3a8bf7607a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/403837b4cb714be6d248daa44a369b3a8bf7607a"}], "stats": {"total": 72, "additions": 31, "deletions": 41}, "files": [{"sha": "f174c76feecf32547af91e4a0b682d23a4d4cebb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec23acb8fa9252825b4cd0ea014824b113e387/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec23acb8fa9252825b4cd0ea014824b113e387/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8ec23acb8fa9252825b4cd0ea014824b113e387", "patch": "@@ -1,3 +1,12 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* bt-load.c: Include rtl-iter.h.\n+\t(btr_reference_found, find_btr_reference, btr_referenced_p): Delete.\n+\t(find_btr_use): Move further up file.  Use FOR_EACH_SUBRTX_PTR\n+\tto iterate over subrtxes.\n+\t(insn_sets_btr_p, new_btr_user, compute_defs_uses_and_gen): Use\n+\tfind_btr_use rather than btr_referenced_p.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* alias.c: Include rtl-iter.h."}, {"sha": "2e21f86bc456914dbed141a2166fbf8579f349cf", "filename": "gcc/bt-load.c", "status": "modified", "additions": 22, "deletions": 41, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec23acb8fa9252825b4cd0ea014824b113e387/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec23acb8fa9252825b4cd0ea014824b113e387/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=b8ec23acb8fa9252825b4cd0ea014824b113e387", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"df.h\"\n #include \"cfgloop.h\"\n+#include \"rtl-iter.h\"\n \n /* Target register optimizations - these are performed after reload.  */\n \n@@ -113,9 +114,6 @@ static int issue_rate;\n \n static int basic_block_freq (const_basic_block);\n static int insn_sets_btr_p (const rtx_insn *, int, int *);\n-static rtx *find_btr_use (rtx);\n-static int btr_referenced_p (rtx, rtx *);\n-static int find_btr_reference (rtx *, void *);\n static void find_btr_def_group (btr_def_group *, btr_def);\n static btr_def add_btr_def (fibheap_t, basic_block, int, rtx_insn *,\n \t\t\t    unsigned int, int, btr_def_group *);\n@@ -184,37 +182,27 @@ basic_block_freq (const_basic_block bb)\n   return bb->frequency;\n }\n \n-static rtx *btr_reference_found;\n-\n-/* A subroutine of btr_referenced_p, called through for_each_rtx.\n-   PREG is a pointer to an rtx that is to be excluded from the\n-   traversal.  If we find a reference to a target register anywhere\n-   else, return 1, and put a pointer to it into btr_reference_found.  */\n-static int\n-find_btr_reference (rtx *px, void *preg)\n+/* If X references (sets or reads) any branch target register, return one\n+   such register.  If EXCLUDEP is set, disregard any references within\n+   that location.  */\n+static rtx *\n+find_btr_use (rtx x, rtx *excludep = 0)\n {\n-  rtx x;\n-\n-  if (px == preg)\n-    return -1;\n-  x = *px;\n-  if (!REG_P (x))\n-    return 0;\n-  if (overlaps_hard_reg_set_p (all_btrs, GET_MODE (x), REGNO (x)))\n+  subrtx_ptr_iterator::array_type array;\n+  FOR_EACH_SUBRTX_PTR (iter, array, &x, NONCONST)\n     {\n-      btr_reference_found = px;\n-      return 1;\n+      rtx *loc = *iter;\n+      if (loc == excludep)\n+\titer.skip_subrtxes ();\n+      else\n+\t{\n+\t  const_rtx x = *loc;\n+\t  if (REG_P (x)\n+\t      && overlaps_hard_reg_set_p (all_btrs, GET_MODE (x), REGNO (x)))\n+\t    return loc;\n+\t}\n     }\n-  return -1;\n-}\n-\n-/* Return nonzero if X references (sets or reads) any branch target register.\n-   If EXCLUDEP is set, disregard any references within the rtx pointed to\n-   by it.  If returning nonzero, also set btr_reference_found as above.  */\n-static int\n-btr_referenced_p (rtx x, rtx *excludep)\n-{\n-  return for_each_rtx (&x, find_btr_reference, excludep);\n+  return 0;\n }\n \n /* Return true if insn is an instruction that sets a target register.\n@@ -238,7 +226,7 @@ insn_sets_btr_p (const rtx_insn *insn, int check_const, int *regno)\n       if (REG_P (dest)\n \t  && TEST_HARD_REG_BIT (all_btrs, REGNO (dest)))\n \t{\n-\t  gcc_assert (!btr_referenced_p (src, NULL));\n+\t  gcc_assert (!find_btr_use (src));\n \n \t  if (!check_const || CONSTANT_P (src))\n \t    {\n@@ -251,13 +239,6 @@ insn_sets_btr_p (const rtx_insn *insn, int check_const, int *regno)\n   return 0;\n }\n \n-/* Find and return a use of a target register within an instruction INSN.  */\n-static rtx *\n-find_btr_use (rtx insn)\n-{\n-  return btr_referenced_p (insn, NULL) ? btr_reference_found : NULL;\n-}\n-\n /* Find the group that the target register definition DEF belongs\n    to in the list starting with *ALL_BTR_DEF_GROUPS.  If no such\n    group exists, create one.  Add def to the group.  */\n@@ -348,7 +329,7 @@ new_btr_user (basic_block bb, int insn_luid, rtx_insn *insn)\n       /* We want to ensure that USE is the only use of a target\n \t register in INSN, so that we know that to rewrite INSN to use\n \t a different target register, all we have to do is replace USE.  */\n-      unambiguous_single_use = !btr_referenced_p (PATTERN (insn), usep);\n+      unambiguous_single_use = !find_btr_use (PATTERN (insn), usep);\n       if (!unambiguous_single_use)\n \tusep = NULL;\n     }\n@@ -524,7 +505,7 @@ compute_defs_uses_and_gen (fibheap_t all_btr_defs, btr_def *def_array,\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (btr_referenced_p (PATTERN (insn), NULL))\n+\t\t  if (find_btr_use (PATTERN (insn)))\n \t\t    {\n \t\t      btr_user user = new_btr_user (bb, insn_luid, insn);\n "}]}