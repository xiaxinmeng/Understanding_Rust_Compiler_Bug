{"sha": "7cd6e9f14f058fdac9ca87e19ff9c85907f3625c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NkNmU5ZjE0ZjA1OGZkYWM5Y2E4N2UxOWZmOWM4NTkwN2YzNjI1Yw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@act-europe.fr", "date": "2004-10-27T12:28:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-10-27T12:28:44Z"}, "message": "expect.c, [...] (unix sections): Guard with \"__unix__\" instead of \"unix\".\n\n2004-10-26  Olivier Hainque  <hainque@act-europe.fr>\n\t    Nicolas Setton  <setton@act-europe.fr>\n\n\t* expect.c, adaint.c, link.c, sysdep.c (unix sections): Guard with\n\t\"__unix__\" instead of \"unix\".\n\tThe latter is implicitly defined by gcc3.2 but not by gcc >= 3.4, so the\n\tsections were just mistakenly ignored. The former is\n\timplicitely defined by gcc2.8, gcc3.2 and gcc3.4.\n\tUpdate #ifdef preprocessor macro to detect the symbol __hpux__ instead\n\tof hpux. This prevents an unwanted definition of the symbol\n\tconvert_addresses in adaint.o.\n\nFrom-SVN: r89642", "tree": {"sha": "4c0a0fe12318fd865a2d1e8b8dc93de0f4d3acf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c0a0fe12318fd865a2d1e8b8dc93de0f4d3acf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c/comments", "author": null, "committer": null, "parents": [{"sha": "cc35610031fca77a8294a5c0e19dcb7fb8eb9888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc35610031fca77a8294a5c0e19dcb7fb8eb9888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc35610031fca77a8294a5c0e19dcb7fb8eb9888"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "c1b85a07616e77d48283a9ed7be322aa90b6b569", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=7cd6e9f14f058fdac9ca87e19ff9c85907f3625c", "patch": "@@ -1512,7 +1512,7 @@ __gnat_is_symbolic_link (char *name ATTRIBUTE_UNUSED)\n #if defined (__vxworks)\n   return 0;\n \n-#elif defined (_AIX) || defined (unix)\n+#elif defined (_AIX) || defined (__unix__)\n   int ret;\n   struct stat statbuf;\n \n@@ -2441,7 +2441,7 @@ _flush_cache()\n   || (! (defined (sparc) && defined (sun) && defined (__SVR4)) \\\n       && ! (defined (linux) && defined (i386)) \\\n       && ! defined (__FreeBSD__) \\\n-      && ! defined (hpux) \\\n+      && ! defined (__hpux__) \\\n       && ! defined (_AIX) \\\n       && ! (defined (__alpha__)  && defined (__osf__)) \\\n       && ! defined (__MINGW32__) \\"}, {"sha": "9c76ba5c363c6f847568bc5fc437a9248bee6a93", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=7cd6e9f14f058fdac9ca87e19ff9c85907f3625c", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *           Copyright (C) 2001-2003 Ada Core Technologies, Inc.            *\n+ *           Copyright (C) 2001-2004 Ada Core Technologies, Inc.            *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -49,8 +49,8 @@\n    Dummy stubs are also provided for other systems. */\n \n #ifdef _AIX\n-/* Work around the fact that gcc/cpp does not define \"unix\" under AiX.  */\n-#define unix\n+/* Work around the fact that gcc/cpp does not define \"__unix__\" under AiX.  */\n+#define __unix__\n #endif\n \n #ifdef _WIN32\n@@ -265,9 +265,9 @@ __gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n   return ready;\n }\n \n-#elif defined (unix)\n+#elif defined (__unix__)\n \n-#ifdef hpux\n+#ifdef __hpux__\n #include <sys/ptyio.h>\n #endif\n \n@@ -359,7 +359,7 @@ __gnat_expect_poll (int *fd, int num_fd, int timeout, int *is_set)\n \t      is_set[i] = 0;\n \t  }\n \n-#ifdef hpux\n+#ifdef __hpux__\n         for (i = 0; i < num_fd; i++)\n \t  {\n \t    if (FD_ISSET (fd[i], &eset))"}, {"sha": "cc415ad0f0df6408ffda4c5f74dabcdf769478e1", "filename": "gcc/ada/link.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c/gcc%2Fada%2Flink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c/gcc%2Fada%2Flink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flink.c?ref=7cd6e9f14f058fdac9ca87e19ff9c85907f3625c", "patch": "@@ -117,7 +117,7 @@ char __gnat_shared_libgnat_default = STATIC;\n unsigned char __gnat_using_gnu_linker = 1;\n const char *__gnat_object_library_extension = \".a\";\n \n-#elif defined (hpux)\n+#elif defined (__hpux__)\n const char *__gnat_object_file_option = \"-Wl,-c,\";\n const char *__gnat_run_path_option = \"-Wl,+b,\";\n int __gnat_link_max = 5000;"}, {"sha": "e18fb2276e127e96f89b8c97a602745d105cafda", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd6e9f14f058fdac9ca87e19ff9c85907f3625c/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=7cd6e9f14f058fdac9ca87e19ff9c85907f3625c", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2003 Free Software Foundation, Inc.          *\n+ *          Copyright (C) 1992-2004 Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -289,7 +289,7 @@ __gnat_ttyname (int filedes)\n \f\n #if defined (linux) || defined (sun) || defined (sgi) || defined (__EMX__) \\\n   || (defined (__osf__) && ! defined (__alpha_vxworks)) || defined (WINNT) \\\n-  || defined (__MACHTEN__) || defined (hpux) || defined (_AIX) \\\n+  || defined (__MACHTEN__) || defined (__hpux__) || defined (_AIX) \\\n   || (defined (__svr4__) && defined (i386)) || defined (__Lynx__) \\\n   || defined (__CYGWIN__) || defined (__FreeBSD__)\n \n@@ -346,7 +346,7 @@ getc_immediate_common (FILE *stream,\n {\n #if defined (linux) || defined (sun) || defined (sgi) || defined (__EMX__) \\\n     || (defined (__osf__) && ! defined (__alpha_vxworks)) \\\n-    || defined (__CYGWIN32__) || defined (__MACHTEN__) || defined (hpux) \\\n+    || defined (__CYGWIN32__) || defined (__MACHTEN__) || defined (__hpux__) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n     || defined (__Lynx__) || defined (__FreeBSD__)\n   char c;\n@@ -365,7 +365,7 @@ getc_immediate_common (FILE *stream,\n       termios_rec.c_lflag = termios_rec.c_lflag & ~ICANON & ~ECHO;\n \n #if defined(linux) || defined (sun) || defined (sgi) || defined (__EMX__) \\\n-    || defined (__osf__) || defined (__MACHTEN__) || defined (hpux) \\\n+    || defined (__osf__) || defined (__MACHTEN__) || defined (__hpux__) \\\n     || defined (_AIX) || (defined (__svr4__) && defined (i386)) \\\n     || defined (__Lynx__) || defined (__FreeBSD__)\n       eof_ch = termios_rec.c_cc[VEOF];"}]}