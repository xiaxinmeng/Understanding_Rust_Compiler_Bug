{"sha": "af5e4ada32e9166e7a9b6853c3060382186e8749", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY1ZTRhZGEzMmU5MTY2ZTdhOWI2ODUzYzMwNjAzODIxODZlODc0OQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-07-19T02:22:30Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-07-19T02:22:30Z"}, "message": "configure.in: Don't loop trying to configure language subdirs.\n\n\t* configure.in: Don't loop trying to configure language subdirs.\n\tDon't pass to configure.lang variables it doesn't use.\n\nFrom-SVN: r14482", "tree": {"sha": "5f063b1b76d12286d13764aaa9214306ecc510dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f063b1b76d12286d13764aaa9214306ecc510dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af5e4ada32e9166e7a9b6853c3060382186e8749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5e4ada32e9166e7a9b6853c3060382186e8749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af5e4ada32e9166e7a9b6853c3060382186e8749", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af5e4ada32e9166e7a9b6853c3060382186e8749/comments", "author": null, "committer": null, "parents": [{"sha": "4a7d05dcfb07e9d6e6dca3bd5cb9df6be6153af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a7d05dcfb07e9d6e6dca3bd5cb9df6be6153af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a7d05dcfb07e9d6e6dca3bd5cb9df6be6153af5"}], "stats": {"total": 410, "additions": 153, "deletions": 257}, "files": [{"sha": "d7a53d579f84b2367451c6a59fd667f25ee086ee", "filename": "gcc/configure.in", "status": "modified", "additions": 153, "deletions": 257, "changes": 410, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af5e4ada32e9166e7a9b6853c3060382186e8749/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af5e4ada32e9166e7a9b6853c3060382186e8749/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=af5e4ada32e9166e7a9b6853c3060382186e8749", "patch": "@@ -2778,256 +2778,140 @@ build_overrides=\"/dev/null\"\n language_fragments=\"Make-lang\"\n language_hooks=\"Make-hooks\"\n \n-savesrcdir=$srcdir\n-for subdir in . $subdirs\n+rm -f Make-host Make-target Make-hooks\n+touch Make-host\n+touch Make-target\n+touch Make-hooks\n+\n+# Conditionalize the makefile for this host machine.\n+dep_host_xmake_file=\n+for f in .. ${host_xmake_file}\n do\n-\toldsrcdir=$savesrcdir\n-\n-\t# Re-adjust the path\n-\tcase $oldsrcdir in\n-\t/*)\n-\t\tcase $subdir in\n-\t\t.)\n-\t\t\tsrcdir=$oldsrcdir\n-\t\t\t;;\n-\t\t*)\n-\t\t\tsrcdir=$oldsrcdir/$subdir\n-\t\t\t;;\n-\t\tesac\n-\t\t;;\n-\t*)\n-\t\tcase $subdir in\n-\t\t.)\n-\t\t\t;;\n-\t\t*)\n-\t\t\toldsrcdir=../${oldsrcdir}\n-\t\t\tsrcdir=$oldsrcdir/$subdir\n-\t\t\t;;\n-\t\tesac\n-\t\t;;\n-\tesac\n-\tmainsrcdir=$oldsrcdir\n-\tSTARTDIR=`pwd`\n-\ttest -d $subdir || mkdir $subdir\n-\tcd $subdir\n-\n-\trm -f Make-host Make-target Make-hooks\n-\ttouch Make-host\n-\ttouch Make-target\n-\ttouch Make-hooks\n-\t# Conditionalize the makefile for this host machine.\n-\tdep_host_xmake_file=\n-\tfor f in .. ${host_xmake_file}\n-\tdo\n-\t\tif [[ -f ${mainsrcdir}/config/$f ]]\n-\t\tthen\n-\t\t\tcat ${mainsrcdir}/config/$f >> Make-host\n-\t\t\tdep_host_xmake_file=\"${dep_host_xmake_file} \\$(srcdir)/config/$f\"\n-\t\tfi\n-\tdone\n-\n-\t# Add a definition of USE_COLLECT2 if system wants one.\n-\t# Also tell toplev.c what to do.\n-\t# This substitutes for lots of t-* files.\n-\tif [[ x$use_collect2 = x ]]\n+\tif [[ -f ${srcdir}/config/$f ]]\n \tthen\n-\t\twill_use_collect2=\n-\t\tmaybe_use_collect2=\n-\telse\n-\t\twill_use_collect2=\"ld\"\n-\t\tmaybe_use_collect2=\"-DUSE_COLLECT2\"\n+\t\tcat ${srcdir}/config/$f >> Make-host\n+\t\tdep_host_xmake_file=\"${dep_host_xmake_file} \\$(srcdir)/config/$f\"\n \tfi\n+done\n \n-\t# NEED TO CONVERT\n-\t# Set MD_DEPS if the real md file is in md.pre-cpp.\n-\t# Set MD_CPP to the cpp to pass the md file through.  Md files use ';'\n-\t# for line oriented comments, so we must always use a GNU cpp.  If\n-\t# building gcc with a cross compiler, use the cross compiler just\n-\t# built.  Otherwise, we can use the cpp just built.\n-\tmd_file_sub=\n-\tif [[ \"x$md_cppflags\" = x ]]\n+# Conditionalize the makefile for this target machine.\n+dep_tmake_file=\n+for f in .. ${tmake_file}\n+do\n+\tif [[ -f ${srcdir}/config/$f ]]\n \tthen\n-\t\tmd_file_sub=$srcdir/config/$md_file\n-\telse\n-\t\tmd_file=md\n-\tfi\n-\n-\t# If we have gas in the build tree, make a link to it.\n-\tif [[ -f ../gas/Makefile ]]; then\n-\t\trm -f as; $symbolic_link ../gas/as.new as 2>/dev/null\n+\t\tcat ${srcdir}/config/$f >> Make-target\n+\t\tdep_tmake_file=\"${dep_tmake_file} \\$(srcdir)/config/$f\"\n \tfi\n+done\n \n-\t# If we have ld in the build tree, make a link to it.\n-\tif [[ -f ../ld/Makefile ]]; then\n-\t\tif [[ x$use_collect2 = x ]]; then\n-\t\t\trm -f ld; $symbolic_link ../ld/ld.new ld 2>/dev/null\n-\t\telse\n-\t\t\trm -f collect-ld; $symbolic_link ../ld/ld.new collect-ld 2>/dev/null\n-\t\tfi\n-\tfi\n+# Add the language fragments.\n+# Languages are added via two mechanisms.  Some information must be\n+# recorded in makefile variables, these are defined in config-lang.in.\n+# We accumulate them and plug them into the main Makefile.\n+# The other mechanism is a set of hooks for each of the main targets\n+# like `clean', `install', etc.\n \n-\t# Conditionalize the makefile for this target machine.\n-\tdep_tmake_file=\n-\tfor f in .. ${tmake_file}\n-\tdo\n-\t\tif [[ -f ${mainsrcdir}/config/$f ]]\n-\t\tthen\n-\t\t\tcat ${mainsrcdir}/config/$f >> Make-target\n-\t\t\tdep_tmake_file=\"${dep_tmake_file} \\$(srcdir)/config/$f\"\n-\t\tfi\n-\tdone\n-\n-\t# If this is the top level Makefile, add the language fragments.\n-\t# Languages are added via two mechanisms.  Some information must be\n-\t# recorded in makefile variables, these are defined in config-lang.in.\n-\t# We accumulate them and plug them into the main Makefile.\n-\t# The other mechanism is a set of hooks for each of the main targets\n-\t# like `clean', `install', etc.\n-\tif [[ $subdir = . ]]\n+for s in .. $subdirs\n+do\n+\tif [[ $s != \"..\" ]]\n \tthen\n-\t\tfor s in .. $subdirs\n-\t\tdo\n-\t\t\tif [[ $s != \"..\" ]]\n-\t\t\tthen\n-\t\t\t\tlanguage=\n-\t\t\t\tboot_language=\n-\t\t\t\tcompilers=\n-\t\t\t\tstagestuff=\n-\t\t\t\tdiff_excludes=\n-\t\t\t\theaders=\n-\t\t\t\tlib2funcs=\n-\t\t\t\t. ${mainsrcdir}/$s/config-lang.in\n-\t\t\t\tif [[ \"x$language\" = x ]]\n-\t\t\t\tthen\n-\t\t\t\t\techo \"${mainsrcdir}/$s/config-lang.in doesn't set \\$language.\" 1>&2\n-\t\t\t\t\texit 1\n-\t\t\t\tfi\n-\t\t\t\tall_lang_makefiles=\"$all_lang_makefiles ${mainsrcdir}/$s/Make-lang.in ${mainsrcdir}/$s/Makefile.in\"\n-\t\t\t\tall_languages=\"$all_languages $language\"\n-\t\t\t\tif [[ \"x$boot_language\" = xyes ]]\n-\t\t\t\tthen\n-\t\t\t\t\tall_boot_languages=\"$all_boot_languages $language\"\n-\t\t\t\tfi\n-\t\t\t\tall_compilers=\"$all_compilers $compilers\"\n-\t\t\t\tall_stagestuff=\"$all_stagestuff $stagestuff\"\n-\t\t\t\tall_diff_excludes=\"$all_diff_excludes $diff_excludes\"\n-\t\t\t\tall_headers=\"$all_headers $headers\"\n-\t\t\t\tall_lib2funcs=\"$all_lib2funcs $lib2funcs\"\n-\t\t\tfi\n-\t\tdone\n-\n-\t\t# Since we can't use `::' targets, we link each language in\n-\t\t# with a set of hooks, reached indirectly via lang.${target}.\n-\n-\t\ttarget_list=\"all.build all.cross start.encap rest.encap \\\n-\t\t\tinfo dvi \\\n-\t\t\tinstall-normal install-common install-info install-man \\\n-\t\t\tuninstall distdir \\\n-\t\t\tmostlyclean clean distclean extraclean maintainer-clean \\\n-\t\t\tstage1 stage2 stage3 stage4\"\n-\t\tfor t in $target_list\n-\t\tdo\n-\t\t\tx=\n-\t\t\tfor l in .. $all_languages\n-\t\t\tdo\n-\t\t\t\tif [[ $l != \"..\" ]]; then\n-\t\t\t\t\tx=\"$x $l.$t\"\n-\t\t\t\tfi\n-\t\t\tdone\n-\t\t\techo \"lang.$t: $x\" >> Make-hooks\n-\t\tdone\n-\n-\t\t# If the host doesn't support symlinks, modify CC in\n-\t\t# FLAGS_TO_PASS so CC=\"stage1/xgcc -Bstage1/\" works.\n-\t\t# Otherwise, we can use \"CC=$(CC)\".\n-\t\trm -f symtest.tem\n-\t\tif $symbolic_link symtest1.tem symtest.tem 2>/dev/null\n+\t\tlanguage=\n+\t\tboot_language=\n+\t\tcompilers=\n+\t\tstagestuff=\n+\t\tdiff_excludes=\n+\t\theaders=\n+\t\tlib2funcs=\n+\t\t. ${srcdir}/$s/config-lang.in\n+\t\tif [[ \"x$language\" = x ]]\n+\t\tthen\n+\t\t\techo \"${srcdir}/$s/config-lang.in doesn't set \\$language.\" 1>&2\n+\t\t\texit 1\n+\t\tfi\n+\t\tall_lang_makefiles=\"$all_lang_makefiles ${srcdir}/$s/Make-lang.in ${srcdir}/$s/Makefile.in\"\n+\t\tall_languages=\"$all_languages $language\"\n+\t\tif [[ \"x$boot_language\" = xyes ]]\n \t\tthen\n-\t\t\tcc_set_by_configure=\"\\$(CC)\"\n-\t\t\tstage_prefix_set_by_configure=\"\\$(STAGE_PREFIX)\"\n-\t\telse\n-\t\t\tcc_set_by_configure=\"\\`case '\\$(CC)' in stage*) echo '\\$(CC)' | sed -e 's|stage|../stage|g';; *) echo '\\$(CC)';; esac\\`\"\n-\n-\t\t\tstage_prefix_set_by_configure=\"\\`case '\\$(STAGE_PREFIX)' in stage*) echo '\\$(STAGE_PREFIX)' | sed -e 's|stage|../stage|g';; *) echo '\\$(STAGE_PREFIX)';; esac\\`\"\n+\t\t\tall_boot_languages=\"$all_boot_languages $language\"\n \t\tfi\n-\n-\t# Otherwise, this is a language subdirectory.  If the host supports\n-\t# symlinks, point stage[123] at ../stage[123] so bootstrapping and the\n-\t# installation procedure can still use CC=\"stage1/xgcc -Bstage1/\".\n-\t# If the host doesn't support symlinks, FLAGS_TO_PASS has been\n-\t# modified to solve the problem there.\n-\telse\n-\t\tfor t in stage1 stage2 stage3 stage4 include\n-\t\tdo\n-\t\t\trm -f $t\n-\t\t\t$symbolic_link ../$t $t 2>/dev/null\n-\t\tdone\n-\tfi\n-\n-\tout_object_file=`basename $out_file .c`.o\n-\n-\tif [[ $subdir = . ]]\n-\tthen\n-\t\ttm_file_list=\n-\t\tfor f in $tm_file; do\n-\t\t\ttm_file_list=\"${tm_file_sub} \\$(srcdir)/config/$f\"\n-\t\tdone\n-\n-\t\thost_xm_file_list=\n-\t\tfor f in $host_xm_file; do\n-\t\t\thost_xm_file_list=\"${host_xm_file_sub} \\$(srcdir)/config/$f\"\n-\t\tdone\n-\n-\t\tbuild_xm_file_list=\n-\t\tfor f in $build_xm_file; do\n-\t\t\tbuild_xm_file_list=\"${build_xm_file_sub} \\$(srcdir)/config/$f\"\n-\t\tdone\n+\t\tall_compilers=\"$all_compilers $compilers\"\n+\t\tall_stagestuff=\"$all_stagestuff $stagestuff\"\n+\t\tall_diff_excludes=\"$all_diff_excludes $diff_excludes\"\n+\t\tall_headers=\"$all_headers $headers\"\n+\t\tall_lib2funcs=\"$all_lib2funcs $lib2funcs\"\n \tfi\n+done\n \n-\t# Remove all formfeeds, since some Makes get confused by them.\n-\t# Also arrange to give the variables `target', `host_xmake_file',\n-\t# `tmake_file', `prefix', `local_prefix', `exec_prefix', `FIXINCLUDES'\n-\t# `out_file', `out_object', `md_file', `lang_specs_files',\n-\t# `lang_options_files', `INSTALL_HEADERS_DIR', and `CROSS_FLOAT_H'\n-\t# values in the Makefile from the values they have in this script.\n+# Since we can't use `::' targets, we link each language in\n+# with a set of hooks, reached indirectly via lang.${target}.\n \n-\ttm_file_sub=\n-\tfor f in $tm_file; do\n-\t\ttm_file_sub=\"${tm_file_sub} ${srcdir}/config/$f\"\n+target_list=\"all.build all.cross start.encap rest.encap \\\n+\tinfo dvi \\\n+\tinstall-normal install-common install-info install-man \\\n+\tuninstall distdir \\\n+\tmostlyclean clean distclean extraclean maintainer-clean \\\n+\tstage1 stage2 stage3 stage4\"\n+for t in $target_list\n+do\n+\tx=\n+\tfor l in .. $all_languages\n+\tdo\n+\t\tif [[ $l != \"..\" ]]; then\n+\t\t\tx=\"$x $l.$t\"\n+\t\tfi\n \tdone\n+\techo \"lang.$t: $x\" >> Make-hooks\n+done\n \n-\thost_xm_file_sub=\n-\tfor f in $host_xm_file; do\n-\t\thost_xm_file_sub=\"${host_xm_file_sub} ${srcdir}/config/$f\"\n-\tdone\n+# If the host doesn't support symlinks, modify CC in\n+# FLAGS_TO_PASS so CC=\"stage1/xgcc -Bstage1/\" works.\n+# Otherwise, we can use \"CC=$(CC)\".\n+rm -f symtest.tem\n+if $symbolic_link symtest1.tem symtest.tem 2>/dev/null\n+then\n+\tcc_set_by_configure=\"\\$(CC)\"\n+\tstage_prefix_set_by_configure=\"\\$(STAGE_PREFIX)\"\n+else\n+\tcc_set_by_configure=\"\\`case '\\$(CC)' in stage*) echo '\\$(CC)' | sed -e 's|stage|../stage|g';; *) echo '\\$(CC)';; esac\\`\"\n+\tstage_prefix_set_by_configure=\"\\`case '\\$(STAGE_PREFIX)' in stage*) echo '\\$(STAGE_PREFIX)' | sed -e 's|stage|../stage|g';; *) echo '\\$(STAGE_PREFIX)';; esac\\`\"\n+fi\n+rm -f symtest.tem\n \n-\tbuild_xm_file_sub=\n-\tfor f in $build_xm_file; do\n-\t\tbuild_xm_file_sub=\"${build_xm_file_sub} ${srcdir}/config/$f\"\n-\tdone\n+out_object_file=`basename $out_file .c`.o\n \n-\t# Define macro CROSS_COMPILE in compilation\n-\t# if this is a cross-compiler.\n-\t# Also use all.cross instead of all.internal\n-\t# and add cross-make to Makefile.\n-\tif [[ x$host != x$target ]]\n-\tthen\n-\t\tcross_defines=\"CROSS=-DCROSS_COMPILE\"\n-\t\tcross_overrides=\"${topdir}/cross-make\"\n-\tfi\n+tm_file_list=\n+for f in $tm_file; do\n+\ttm_file_list=\"${tm_file_list} \\$(srcdir)/config/$f\"\n+done\n \n-\t# When building gcc with a cross-compiler, we need to fix a few things.\n-\t# This must come after cross-make as we want all.build to override\n-\t# all.cross.\n-  \tif [[ x$build != x$host ]]\n-\tthen\n-\t\tbuild_overrides=\"${topdir}/build-make\"\n-\tfi\n+host_xm_file_list=\n+for f in $host_xm_file; do\n+\thost_xm_file_list=\"${host_xm_file_list} \\$(srcdir)/config/$f\"\n+done\n+\n+build_xm_file_list=\n+for f in $build_xm_file; do\n+\tbuild_xm_file_list=\"${build_xm_file_list} \\$(srcdir)/config/$f\"\n+done\n \n-\tcd $STARTDIR\n-done   # end of current-dir SUBDIRS loop\n+# Define macro CROSS_COMPILE in compilation\n+# if this is a cross-compiler.\n+# Also use all.cross instead of all.internal\n+# and add cross-make to Makefile.\n+if [[ x$host != x$target ]]\n+then\n+\tcross_defines=\"CROSS=-DCROSS_COMPILE\"\n+\tcross_overrides=\"${topdir}/cross-make\"\n+fi\n \n-srcdir=$savesrcdir\n+# When building gcc with a cross-compiler, we need to fix a few things.\n+# This must come after cross-make as we want all.build to override\n+# all.cross.\n+if [[ x$build != x$host ]]\n+then\n+\tbuild_overrides=\"${topdir}/build-make\"\n+fi\n \n # Expand extra_headers to include complete path.\n # This substitutes for lots of t-* files.\n@@ -3042,6 +2926,46 @@ else\n \tdone\n fi\n \n+# Add a definition of USE_COLLECT2 if system wants one.\n+# Also tell toplev.c what to do.\n+# This substitutes for lots of t-* files.\n+if [[ x$use_collect2 = x ]]\n+then\n+\twill_use_collect2=\n+\tmaybe_use_collect2=\n+else\n+\twill_use_collect2=\"ld\"\n+\tmaybe_use_collect2=\"-DUSE_COLLECT2\"\n+fi\n+\n+# NEED TO CONVERT\n+# Set MD_DEPS if the real md file is in md.pre-cpp.\n+# Set MD_CPP to the cpp to pass the md file through.  Md files use ';'\n+# for line oriented comments, so we must always use a GNU cpp.  If\n+# building gcc with a cross compiler, use the cross compiler just\n+# built.  Otherwise, we can use the cpp just built.\n+md_file_sub=\n+if [[ \"x$md_cppflags\" = x ]]\n+then\n+\tmd_file_sub=$srcdir/config/$md_file\n+else\n+\tmd_file=md\n+fi\n+\n+# If we have gas in the build tree, make a link to it.\n+if [[ -f ../gas/Makefile ]]; then\n+\trm -f as; $symbolic_link ../gas/as.new as 2>/dev/null\n+fi\n+\n+# If we have ld in the build tree, make a link to it.\n+if [[ -f ../ld/Makefile ]]; then\n+\tif [[ x$use_collect2 = x ]]; then\n+\t\trm -f ld; $symbolic_link ../ld/ld.new ld 2>/dev/null\n+\telse\n+\t\trm -f collect-ld; $symbolic_link ../ld/ld.new collect-ld 2>/dev/null\n+\tfi\n+fi\n+\n # Process the language fragments\n ${CONFIG_SHELL-/bin/sh} $srcdir/configure.frag $srcdir \"$subdirs\"\n \n@@ -3134,50 +3058,22 @@ subdirs='${subdirs}'\n symbolic_link='${symbolic_link}'\n program_transform_set='${program_transform_set}'\n program_transform_name='${program_transform_name}'\n-all_languages='${all_languages}'\n-all_boot_languages='${all_boot_languages}'\n-all_compilers='${all_compilers}'\n-all_lang_makefiles='${all_lang_makefiles}'\n-all_stagestuff='${all_stagestuff}'\n-all_diff_excludes='${all_diff_excludes}'\n-all_lib2funcs='${all_lib2funcs}'\n-all_headers='${all_headers}'\n dep_host_xmake_file='${dep_host_xmake_file}'\n host_xmake_file='${host_xmake_file}'\n dep_tmake_file='${dep_tmake_file}'\n tmake_file='${tmake_file}'\n-out_file='${out_file}'\n-out_object_file='${out_object_file}'\n-md_file='${md_file}'\n-md_file_sub='${md_file_sub}'\n-tm_file_list='${tm_file_list}'\n-tm_file_sub='${tm_file_sub}'\n-build_xm_file_list='${build_xm_file_list}'\n-build_xm_file_sub='${build_xm_file_sub}'\n-host_xm_file_list='${host_xm_file_list}'\n-host_xm_file_sub='${host_xm_file_sub}'\n-lang_specs_files='${lang_specs_files}'\n-lang_options_files='${lang_options_files}'\n thread_file='${thread_file}'\n version='${version}'\n local_prefix='${local_prefix}'\n-fixincludes='${fixincludes}'\n build_install_headers_dir='${build_install_headers_dir}'\n build_exeext='${build_exeext}'\n-float_format='${float_format}'\n-use_collect2='${use_collect2}'\n-will_use_collect2='${will_use_collect2}'\n-maybe_use_collect2='${maybe_use_collect2}'\n gdb_needs_out_file_path='${gdb_needs_out_file_path}'\n SET_MAKE='${SET_MAKE}'\n build_broken_install='${build_broken_install}'\n target_list='${target_list}'\n-\n target_overrides='${target_overrides}'\n host_overrides='${host_overrides}'\n cross_defines='${cross_defines}'\n cross_overrides='${cross_overrides}'\n build_overrides='${build_overrides}'\n-language_fragments='${language_fragments}'\n-language_hooks='${language_hooks}'\n )"}]}