{"sha": "301dc6011cbceb7ea9debd86aaec7cadb37213c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAxZGM2MDExY2JjZWI3ZWE5ZGViZDg2YWFlYzdjYWRiMzcyMTNjOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-19T09:00:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-19T09:00:27Z"}, "message": "expand: Add new clrsb fallback expansion [PR101950]\n\nAs suggested in the PR, the following patch adds two new clrsb\nexpansion possibilities if target doesn't have clrsb_optab for the\nrequested nor wider modes, but does have clz_optab for the requested\nmode.\nOne expansion is\nclrsb (op0)\nexpands as\nclz (op0 ^ (((stype)op0) >> (prec-1))) - 1\nwhich is usable if CLZ_DEFINED_VALUE_AT_ZERO is 2 with value\nof prec, because the clz argument can be 0 and clrsb should give\nprec-1 in that case.\nThe other expansion is\nclz (((op0 << 1) ^ (((stype)op0) >> (prec-1))) | 1)\nwhere the clz argument is never 0, but it is one operation longer.\nE.g. on x86_64-linux with -O2 -mno-lzcnt, this results for\nint foo (int x) { return __builtin_clrsb (x); }\nin\n-       subq    $8, %rsp\n-       movslq  %edi, %rdi\n-       call    __clrsbdi2\n-       addq    $8, %rsp\n-       subl    $32, %eax\n+       leal    (%rdi,%rdi), %eax\n+       sarl    $31, %edi\n+       xorl    %edi, %eax\n+       orl     $1, %eax\n+       bsrl    %eax, %eax\n+       xorl    $31, %eax\nand with -O2 -mlzcnt:\n+       movl    %edi, %eax\n+       sarl    $31, %eax\n+       xorl    %edi, %eax\n+       lzcntl  %eax, %eax\n+       subl    $1, %eax\nOn armv7hl-linux-gnueabi with -O2:\n-       push    {r4, lr}\n-       bl      __clrsbsi2\n-       pop     {r4, pc}\n+       @ link register save eliminated.\n+       eor     r0, r0, r0, asr #31\n+       clz     r0, r0\n+       sub     r0, r0, #1\n+       bx      lr\nAs it (at least usually) will make code larger, it is\ndisabled for -Os or cold instructions.\n\n2021-08-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/101950\n\t* optabs.c (expand_clrsb_using_clz): New function.\n\t(expand_unop): Use it as another clrsb expansion fallback.\n\n\t* gcc.target/i386/pr101950-1.c: New test.\n\t* gcc.target/i386/pr101950-2.c: New test.", "tree": {"sha": "64deb3729286524a5084978d7acc28d1cd339585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64deb3729286524a5084978d7acc28d1cd339585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/301dc6011cbceb7ea9debd86aaec7cadb37213c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301dc6011cbceb7ea9debd86aaec7cadb37213c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/301dc6011cbceb7ea9debd86aaec7cadb37213c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301dc6011cbceb7ea9debd86aaec7cadb37213c8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04d766942274da89b236c4cb7e954b26da397c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04d766942274da89b236c4cb7e954b26da397c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04d766942274da89b236c4cb7e954b26da397c7"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "ebed78fda3fb9f60485ef2bd513ad8d053e3754c", "filename": "gcc/optabs.c", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301dc6011cbceb7ea9debd86aaec7cadb37213c8/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301dc6011cbceb7ea9debd86aaec7cadb37213c8/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=301dc6011cbceb7ea9debd86aaec7cadb37213c8", "patch": "@@ -2600,6 +2600,82 @@ widen_leading (scalar_int_mode mode, rtx op0, rtx target, optab unoptab)\n   return 0;\n }\n \n+/* Attempt to emit (clrsb:mode op0) as\n+   (plus:mode (clz:mode (xor:mode op0 (ashr:mode op0 (const_int prec-1))))\n+\t      (const_int -1))\n+   if CLZ_DEFINED_VALUE_AT_ZERO (mode, val) is 2 and val is prec,\n+   or as\n+   (clz:mode (ior:mode (xor:mode (ashl:mode op0 (const_int 1))\n+\t\t\t\t (ashr:mode op0 (const_int prec-1)))\n+\t\t       (const_int 1)))\n+   otherwise.  */\n+\n+static rtx\n+expand_clrsb_using_clz (scalar_int_mode mode, rtx op0, rtx target)\n+{\n+  if (optimize_insn_for_size_p ()\n+      || optab_handler (clz_optab, mode) == CODE_FOR_nothing)\n+    return NULL_RTX;\n+\n+  start_sequence ();\n+  HOST_WIDE_INT val = 0;\n+  if (CLZ_DEFINED_VALUE_AT_ZERO (mode, val) != 2\n+      || val != GET_MODE_PRECISION (mode))\n+    val = 0;\n+  else\n+    val = 1;\n+\n+  rtx temp2 = op0;\n+  if (!val)\n+    {\n+      temp2 = expand_binop (mode, ashl_optab, op0, const1_rtx,\n+\t\t\t    NULL_RTX, 0, OPTAB_DIRECT);\n+      if (!temp2)\n+\t{\n+\tfail:\n+\t  end_sequence ();\n+\t  return NULL_RTX;\n+\t}\n+    }\n+\n+  rtx temp = expand_binop (mode, ashr_optab, op0,\n+\t\t\t   GEN_INT (GET_MODE_PRECISION (mode) - 1),\n+\t\t\t   NULL_RTX, 0, OPTAB_DIRECT);\n+  if (!temp)\n+    goto fail;\n+\n+  temp = expand_binop (mode, xor_optab, temp2, temp, NULL_RTX, 0,\n+\t\t       OPTAB_DIRECT);\n+  if (!temp)\n+    goto fail;\n+\n+  if (!val)\n+    {\n+      temp = expand_binop (mode, ior_optab, temp, const1_rtx,\n+\t\t\t   NULL_RTX, 0, OPTAB_DIRECT);\n+      if (!temp)\n+\tgoto fail;\n+    }\n+  temp = expand_unop_direct (mode, clz_optab, temp, val ? NULL_RTX : target,\n+\t\t\t     true);\n+  if (!temp)\n+    goto fail;\n+  if (val)\n+    {\n+      temp = expand_binop (mode, add_optab, temp, constm1_rtx,\n+\t\t\t   target, 0, OPTAB_DIRECT);\n+      if (!temp)\n+\tgoto fail;\n+    }\n+\n+  rtx_insn *seq = get_insns ();\n+  end_sequence ();\n+\n+  add_equal_note (seq, temp, CLRSB, op0, NULL_RTX, mode);\n+  emit_insn (seq);\n+  return temp;\n+}\n+\n /* Try calculating clz of a double-word quantity as two clz's of word-sized\n    quantities, choosing which based on whether the high word is nonzero.  */\n static rtx\n@@ -3171,6 +3247,9 @@ expand_unop (machine_mode mode, optab unoptab, rtx op0, rtx target,\n \t  temp = widen_leading (int_mode, op0, target, unoptab);\n \t  if (temp)\n \t    return temp;\n+\t  temp = expand_clrsb_using_clz (int_mode, op0, target);\n+\t  if (temp)\n+\t    return temp;\n \t}\n       goto try_libcall;\n     }"}, {"sha": "cc980646f6c8f57c8a99616b1b6340cae5231b9c", "filename": "gcc/testsuite/gcc.target/i386/pr101950-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301dc6011cbceb7ea9debd86aaec7cadb37213c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101950-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301dc6011cbceb7ea9debd86aaec7cadb37213c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101950-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101950-1.c?ref=301dc6011cbceb7ea9debd86aaec7cadb37213c8", "patch": "@@ -0,0 +1,20 @@\n+/* PR middle-end/101950 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-lzcnt\" } */\n+/* { dg-final { scan-assembler-not \"call\\[^\\n\\r]*__clrsb.i2\" } } */\n+/* { dg-final { scan-assembler-times \"\\tbsr\\[ql]\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\txor\\[ql]\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\tor\\[ql]\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tsar\\[ql]\\t|\\tcltd\" 2 } } */\n+\n+int\n+foo (long x)\n+{\n+  return __builtin_clrsbl (x);\n+}\n+\n+int\n+bar (int x)\n+{\n+  return __builtin_clrsb (x);\n+}"}, {"sha": "896f1b464146bdaee643fc5f737744c88305c3d9", "filename": "gcc/testsuite/gcc.target/i386/pr101950-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301dc6011cbceb7ea9debd86aaec7cadb37213c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101950-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301dc6011cbceb7ea9debd86aaec7cadb37213c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101950-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101950-2.c?ref=301dc6011cbceb7ea9debd86aaec7cadb37213c8", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/101950 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlzcnt\" } */\n+/* { dg-final { scan-assembler-not \"call\\[^\\n\\r]*__clrsb.i2\" } } */\n+/* { dg-final { scan-assembler-times \"\\tlzcnt\\[ql]\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\txor\\[ql]\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tsar\\[ql]\\t|\\tcltd\" 2 } } */\n+\n+int\n+foo (long x)\n+{\n+  return __builtin_clrsbl (x);\n+}\n+\n+int\n+bar (int x)\n+{\n+  return __builtin_clrsb (x);\n+}"}]}