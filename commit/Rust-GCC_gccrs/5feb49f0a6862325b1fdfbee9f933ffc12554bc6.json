{"sha": "5feb49f0a6862325b1fdfbee9f933ffc12554bc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZlYjQ5ZjBhNjg2MjMyNWIxZmRmYmVlOWY5MzNmZmMxMjU1NGJjNg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-05-17T12:48:34Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-05-17T12:48:34Z"}, "message": "re PR middle-end/44133 (Uninit warning regression with new SRA)\n\n2010-05-17  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/44133\n\t* tree-sra.c (create_access_replacement): New parameter rename, mark\n\tthe replaement for renaming only when it is true.\n\t(get_access_replacement): Pass true in the rename parameter of\n\tcreate_access_replacement.\n\t(get_unrenamed_access_replacement): New function.\n\t(replace_uses_with_default_def_ssa_name): New parameter racc, get the\n\treplacement declaration from it.\n\n\t* testsuite/gcc.dg/tree-ssa/pr44133.c: New test.\n\t* testsuite/gcc.dg/tree-ssa/sra-9.c: Make the scan regular\n\texpression more precise.\n\nFrom-SVN: r159482", "tree": {"sha": "8d0de3c22d9593556b7abc330aea9d882e97e545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d0de3c22d9593556b7abc330aea9d882e97e545"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5feb49f0a6862325b1fdfbee9f933ffc12554bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5feb49f0a6862325b1fdfbee9f933ffc12554bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5feb49f0a6862325b1fdfbee9f933ffc12554bc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5feb49f0a6862325b1fdfbee9f933ffc12554bc6/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56731d645e826bc7524c85bef3d32d75772f72cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56731d645e826bc7524c85bef3d32d75772f72cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56731d645e826bc7524c85bef3d32d75772f72cb"}], "stats": {"total": 82, "additions": 59, "deletions": 23}, "files": [{"sha": "a5c7d4b10c2746eea2898c32d6839b26b708403f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5feb49f0a6862325b1fdfbee9f933ffc12554bc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5feb49f0a6862325b1fdfbee9f933ffc12554bc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5feb49f0a6862325b1fdfbee9f933ffc12554bc6", "patch": "@@ -1,3 +1,14 @@\n+2010-05-17  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/44133\n+\t* tree-sra.c (create_access_replacement): New parameter rename, mark\n+\tthe replaement for renaming only when it is true.\n+\t(get_access_replacement): Pass true in the rename parameter of\n+\tcreate_access_replacement.\n+\t(get_unrenamed_access_replacement): New function.\n+\t(replace_uses_with_default_def_ssa_name): New parameter racc, get the\n+\treplacement declaration from it.\n+\n 2010-05-17  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* function.c (try_fit_stack_local, add_frame_space): New static"}, {"sha": "ba78c98a39df9301d535c14a254496bea901d9bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5feb49f0a6862325b1fdfbee9f933ffc12554bc6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5feb49f0a6862325b1fdfbee9f933ffc12554bc6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5feb49f0a6862325b1fdfbee9f933ffc12554bc6", "patch": "@@ -1,3 +1,10 @@\n+2010-05-17  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/44133\n+\t* gcc.dg/tree-ssa/pr44133.c: New test.\n+\t* gcc.dg/tree-ssa/sra-9.c: Make the scan regular expression more\n+\tprecise.\n+\n 2010-05-17  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44044"}, {"sha": "dfa9ccfef3907eee9cf5dbbb000011f732a6d339", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr44133.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5feb49f0a6862325b1fdfbee9f933ffc12554bc6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr44133.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5feb49f0a6862325b1fdfbee9f933ffc12554bc6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr44133.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr44133.c?ref=5feb49f0a6862325b1fdfbee9f933ffc12554bc6", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+struct S { int i, j; };\n+\n+int foo (int l)\n+{\n+  struct S s;\n+  s.j = l - 22;   /* { dg-warning \".s\\.i. is used uninitialized\" } */\n+  return s.i + s.j;\n+}"}, {"sha": "54f42179e683ea7aadc23d29b57fe4863d9efee7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/sra-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5feb49f0a6862325b1fdfbee9f933ffc12554bc6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5feb49f0a6862325b1fdfbee9f933ffc12554bc6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsra-9.c?ref=5feb49f0a6862325b1fdfbee9f933ffc12554bc6", "patch": "@@ -16,5 +16,5 @@ int foo (int d)\n }\n \n /* There should be no reference to s.b.  */\n-/* { dg-final { scan-tree-dump-times \"s\\.b\" 0 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"= s\\.b\" 0 \"optimized\"} } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "08c03e17781b93023dd0e99254b476dfa3900cac", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5feb49f0a6862325b1fdfbee9f933ffc12554bc6/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5feb49f0a6862325b1fdfbee9f933ffc12554bc6/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=5feb49f0a6862325b1fdfbee9f933ffc12554bc6", "patch": "@@ -1586,14 +1586,15 @@ sort_and_splice_var_accesses (tree var)\n    ACCESS->replacement.  */\n \n static tree\n-create_access_replacement (struct access *access)\n+create_access_replacement (struct access *access, bool rename)\n {\n   tree repl;\n \n   repl = create_tmp_var (access->type, \"SR\");\n   get_var_ann (repl);\n   add_referenced_var (repl);\n-  mark_sym_for_renaming (repl);\n+  if (rename)\n+    mark_sym_for_renaming (repl);\n \n   if (!access->grp_partial_lhs\n       && (TREE_CODE (access->type) == COMPLEX_TYPE\n@@ -1669,10 +1670,24 @@ get_access_replacement (struct access *access)\n   gcc_assert (access->grp_to_be_replaced);\n \n   if (!access->replacement_decl)\n-    access->replacement_decl = create_access_replacement (access);\n+    access->replacement_decl = create_access_replacement (access, true);\n   return access->replacement_decl;\n }\n \n+/* Return ACCESS scalar replacement, create it if it does not exist yet but do\n+   not mark it for renaming.  */\n+\n+static inline tree\n+get_unrenamed_access_replacement (struct access *access)\n+{\n+  gcc_assert (!access->grp_to_be_replaced);\n+\n+  if (!access->replacement_decl)\n+    access->replacement_decl = create_access_replacement (access, false);\n+  return access->replacement_decl;\n+}\n+\n+\n /* Build a subtree of accesses rooted in *ACCESS, and move the pointer in the\n    linked list along the way.  Stop when *ACCESS is NULL or the access pointed\n    to it is not \"within\" the root.  */\n@@ -2507,29 +2522,21 @@ sra_modify_constructor_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n }\n \n /* Create a new suitable default definition SSA_NAME and replace all uses of\n-   SSA with it.  */\n+   SSA with it, RACC is access describing the uninitialized part of an\n+   aggregate that is being loaded.  */\n \n static void\n-replace_uses_with_default_def_ssa_name (tree ssa)\n+replace_uses_with_default_def_ssa_name (tree ssa, struct access *racc)\n {\n-  tree repl, decl = SSA_NAME_VAR (ssa);\n-  if (TREE_CODE (decl) == PARM_DECL)\n-    {\n-      tree tmp = create_tmp_reg (TREE_TYPE (decl), \"SR\");\n+  tree repl, decl;\n \n-      get_var_ann (tmp);\n-      add_referenced_var (tmp);\n-      repl = make_ssa_name (tmp, gimple_build_nop ());\n-      set_default_def (tmp, repl);\n-    }\n-  else\n+  decl = get_unrenamed_access_replacement (racc);\n+\n+  repl = gimple_default_def (cfun, decl);\n+  if (!repl)\n     {\n-      repl = gimple_default_def (cfun, decl);\n-      if (!repl)\n-\t{\n-\t  repl = make_ssa_name (decl, gimple_build_nop ());\n-\t  set_default_def (decl, repl);\n-\t}\n+      repl = make_ssa_name (decl, gimple_build_nop ());\n+      set_default_def (decl, repl);\n     }\n \n   replace_uses_by (ssa, repl);\n@@ -2717,7 +2724,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t\t\t\t\t     false, false);\n \t\t  gcc_assert (*stmt == gsi_stmt (*gsi));\n \t\t  if (TREE_CODE (lhs) == SSA_NAME)\n-\t\t    replace_uses_with_default_def_ssa_name (lhs);\n+\t\t    replace_uses_with_default_def_ssa_name (lhs, racc);\n \n \t\t  unlink_stmt_vdef (*stmt);\n \t\t  gsi_remove (gsi, true);"}]}