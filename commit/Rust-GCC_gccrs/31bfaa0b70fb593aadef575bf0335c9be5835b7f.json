{"sha": "31bfaa0b70fb593aadef575bf0335c9be5835b7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFiZmFhMGI3MGZiNTkzYWFkZWY1NzViZjAzMzVjOWJlNTgzNWI3Zg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "1999-06-25T10:44:37Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-06-25T10:44:37Z"}, "message": "rs6000.c (output_toc): Always use hex values for floating-point constants.\n\n        * rs6000.c (output_toc): Always use hex values for floating-point\n        constants.  Store single-precision values in upper-half of TOC\n        entry in 64-bit mode.\n        * rs6000.md (floatsidf2, floatunssidf2): Add !TARGET_POWERPC64\n        to final constraints.\n        (fix_truncdfsi2 splitter): Change pattern matching fctiwz.\n        (fctiwz): Improve accuracy of RTL for pattern.\n\nFrom-SVN: r27769", "tree": {"sha": "3e4be3d62d73985fcc5ba4c892aabcff964eeca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e4be3d62d73985fcc5ba4c892aabcff964eeca4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31bfaa0b70fb593aadef575bf0335c9be5835b7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31bfaa0b70fb593aadef575bf0335c9be5835b7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31bfaa0b70fb593aadef575bf0335c9be5835b7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31bfaa0b70fb593aadef575bf0335c9be5835b7f/comments", "author": null, "committer": null, "parents": [{"sha": "6ab46dffd61e0f91e459c0e540e7c27dadf769a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab46dffd61e0f91e459c0e540e7c27dadf769a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab46dffd61e0f91e459c0e540e7c27dadf769a1"}], "stats": {"total": 58, "additions": 40, "deletions": 18}, "files": [{"sha": "c9e23ddc6308e06d27edf42d74bef5a82927a225", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfaa0b70fb593aadef575bf0335c9be5835b7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfaa0b70fb593aadef575bf0335c9be5835b7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31bfaa0b70fb593aadef575bf0335c9be5835b7f", "patch": "@@ -1,3 +1,13 @@\n+Fri Jun 25 13:41:25 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.c (output_toc): Always use hex values for floating-point\n+\tconstants.  Store single-precision values in upper-half of TOC\n+\tentry in 64-bit mode.\n+\t* rs6000.md (floatsidf2, floatunssidf2): Add !TARGET_POWERPC64\n+\tto final constraints.\n+\t(fix_truncdfsi2 splitter): Change pattern matching fctiwz.\n+\t(fctiwz): Improve accuracy of RTL for pattern.\n+\n Fri Jun 25 11:26:38 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n \n \t* expr.c (expand_expr): Allow RTL_EXPR's through the "}, {"sha": "ee3c2f761a0b5011dcb259538f84b286b0e1c87d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfaa0b70fb593aadef575bf0335c9be5835b7f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfaa0b70fb593aadef575bf0335c9be5835b7f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=31bfaa0b70fb593aadef575bf0335c9be5835b7f", "patch": "@@ -4729,6 +4729,7 @@ output_toc (file, x, labelno)\n \n       REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n       REAL_VALUE_TO_TARGET_DOUBLE (rv, k);\n+\n       if (TARGET_64BIT)\n \t{\n \t  if (TARGET_MINIMAL_TOC)\n@@ -4741,9 +4742,9 @@ output_toc (file, x, labelno)\n       else\n \t{\n \t  if (TARGET_MINIMAL_TOC)\n-\t    fprintf (file, \"\\t.long %ld\\n\\t.long %ld\\n\", k[0], k[1]);\n+\t    fprintf (file, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\", k[0], k[1]);\n \t  else\n-\t    fprintf (file, \"\\t.tc FD_%lx_%lx[TC],%ld,%ld\\n\",\n+\t    fprintf (file, \"\\t.tc FD_%lx_%lx[TC],0x%lx,0x%lx\\n\",\n \t\t     k[0], k[1], k[0], k[1]);\n \t  return;\n \t}\n@@ -4757,11 +4758,22 @@ output_toc (file, x, labelno)\n       REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n       REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n \n-      if (TARGET_MINIMAL_TOC)\n-\tfprintf (file, TARGET_32BIT ? \"\\t.long %ld\\n\" : \"\\t.llong %ld\\n\", l);\n+      if (TARGET_64BIT)\n+\t{\n+\t  if (TARGET_MINIMAL_TOC)\n+\t    fprintf (file, \"\\t.llong 0x%lx00000000\\n\", l);\n+\t  else\n+\t    fprintf (file, \"\\t.tc FS_%lx[TC],0x%lx00000000\\n\", l, l);\n+\t  return;\n+\t}\n       else\n-\tfprintf (file, \"\\t.tc FS_%lx[TC],%ld\\n\", l, l);\n-      return;\n+\t{\n+\t  if (TARGET_MINIMAL_TOC)\n+\t    fprintf (file, \"\\t.long 0x%lx\\n\", l);\n+\t  else\n+\t    fprintf (file, \"\\t.tc FS_%lx[TC],0x%lx\\n\", l, l);\n+\t  return;\n+\t}\n     }\n   else if (GET_MODE (x) == DImode\n \t   && (GET_CODE (x) == CONST_INT || GET_CODE (x) == CONST_DOUBLE)"}, {"sha": "c2749f8222faf8ce56eef56a353a066b2e22600a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31bfaa0b70fb593aadef575bf0335c9be5835b7f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31bfaa0b70fb593aadef575bf0335c9be5835b7f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=31bfaa0b70fb593aadef575bf0335c9be5835b7f", "patch": "@@ -4079,7 +4079,7 @@\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))\n \t      (clobber (reg:DF 76))])]\n-  \"TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   \"\n {\n   operands[2] = force_reg (SImode, GEN_INT (0x43300000));\n@@ -4096,7 +4096,7 @@\n    (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=r\"))\n    (clobber (match_operand 5 \"gpc_reg_operand\" \"=b\"))\n    (clobber (reg:DF 76))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   \"#\"\n   [(set_attr \"length\" \"24\")])\n \n@@ -4108,7 +4108,7 @@\n    (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"\"))\n    (clobber (match_operand 5 \"gpc_reg_operand\" \"\"))\n    (clobber (reg:DF 76))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   [(set (match_dup 4)\n \t(xor:SI (match_dup 1)\n \t\t(match_dup 6)))\n@@ -4140,7 +4140,7 @@\n \t      (use (match_dup 3))\n \t      (clobber (match_dup 4))\n \t      (clobber (reg:DF 76))])]\n-  \"TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   \"\n {\n   operands[2] = force_reg (SImode, GEN_INT (0x43300000));\n@@ -4155,7 +4155,7 @@\n    (use (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))\n    (clobber (match_operand 4 \"gpc_reg_operand\" \"=b\"))\n    (clobber (reg:DF 76))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   \"#\"\n   [(set_attr \"length\" \"20\")])\n \n@@ -4166,7 +4166,7 @@\n    (use (match_operand:DF 3 \"gpc_reg_operand\" \"\"))\n    (clobber (match_operand 4 \"gpc_reg_operand\" \"\"))\n    (clobber (reg:DF 76))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   [(set (match_dup 4)\n \t(unspec [(const_int 0)] 11))\n    (set (match_dup 5)\n@@ -4294,7 +4294,7 @@\n   \"TARGET_HARD_FLOAT\"\n   \"\n {\n-  if (!TARGET_POWER2 && !TARGET_POWERPC)\n+  if (! TARGET_POWER2 && ! TARGET_POWERPC)\n     {\n       emit_insn (gen_trunc_call (operands[0], operands[1],\n \t\t\t\t gen_rtx_SYMBOL_REF (Pmode, RS6000_ITRUNC)));\n@@ -4323,8 +4323,8 @@\n    (clobber (match_operand 3 \"gpc_reg_operand\" \"\"))\n    (clobber (reg:DI 76))]\n   \"TARGET_HARD_FLOAT\"\n-  [(set (match_dup 2)\n-\t(sign_extend:DI (fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\"))))\n+  [(set (subreg:SI (match_dup 2) 0)\n+\t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\")))\n    (set (match_dup 3)\n \t(unspec [(const_int 0)] 11))\n    (set (match_dup 4)\n@@ -4433,8 +4433,8 @@\n }\")\n \n (define_insn \"*fctiwz\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n-\t(sign_extend:DI (fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))))]\n+  [(set (subreg:SI (match_operand:DI 0 \"gpc_reg_operand\" \"=f\") 0)\n+\t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n   \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT\"\n   \"{fcirz|fctiwz} %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n@@ -9151,7 +9151,7 @@\n \t(lshiftrt:SI (neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n \t\t     (const_int 31)))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n-  \"!TARGET_POWER\"\n+  \"! TARGET_POWER\"\n   \"{ai|addic} %2,%1,-1\\;{sfe|subfe} %0,%2,%1\"\n   [(set_attr \"length\" \"8\")])\n "}]}