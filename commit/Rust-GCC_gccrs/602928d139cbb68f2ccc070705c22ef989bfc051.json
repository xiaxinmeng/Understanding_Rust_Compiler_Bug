{"sha": "602928d139cbb68f2ccc070705c22ef989bfc051", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAyOTI4ZDEzOWNiYjY4ZjJjY2MwNzA3MDVjMjJlZjk4OWJmYzA1MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-14T01:07:38Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-14T01:07:38Z"}, "message": "Switch over to new harness.\n\n\n2001-05-13   Benjamin Kosnik  <bkoz@redhat.com>\n\n\tSwitch over to new harness.\n\t* testsuite_flags.in: Tweaks via Gaby.\n\t* testsuite/Makefile.am: Change tool to libstdc++-v3.\n\t(EXPECT): Quote directly.\n\t(RUNTEST): Same.\n\t* configure.in: Output testsuite_flags.\n\t* acinclude.m4: Substitute src, bld, and prefix dirs.\n\tRemove glibcpp_expect, glibcpp_runtestflags.\n\t* Makefile.am (RUNTESTFLAGS): Pass this down to subdirs.\n\t* mkcheck.in: Port to new interface.\n\n\t* aclocal.m4: Regerate.\n\t* configure: Regnerate.\n\t* Makefile.in: Regnerate.\n\t* */Makefile.in: Regenerate.\n\n\t* tests_flags.in: Remove.\n\t* testsuite/lib/libstdc++.exp: Remove.\n\nFrom-SVN: r42054", "tree": {"sha": "415bdc7654aa725756c148cf3a04e7902b5b6f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/415bdc7654aa725756c148cf3a04e7902b5b6f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/602928d139cbb68f2ccc070705c22ef989bfc051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602928d139cbb68f2ccc070705c22ef989bfc051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/602928d139cbb68f2ccc070705c22ef989bfc051", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602928d139cbb68f2ccc070705c22ef989bfc051/comments", "author": null, "committer": null, "parents": [{"sha": "0fd91e0afb4dfd01825ba1e9392c9759b86c1a91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd91e0afb4dfd01825ba1e9392c9759b86c1a91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd91e0afb4dfd01825ba1e9392c9759b86c1a91"}], "stats": {"total": 784, "additions": 0, "deletions": 784}, "files": [{"sha": "93778445266465627d2f58fd7ce0852d95f8a098", "filename": "libstdc++-v3/tests_flags.in", "status": "removed", "additions": 0, "deletions": 168, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd91e0afb4dfd01825ba1e9392c9759b86c1a91/libstdc%2B%2B-v3%2Ftests_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd91e0afb4dfd01825ba1e9392c9759b86c1a91/libstdc%2B%2B-v3%2Ftests_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftests_flags.in?ref=0fd91e0afb4dfd01825ba1e9392c9759b86c1a91", "patch": "@@ -1,168 +0,0 @@\n-#!/bin/sh\n-\n-#\n-# This script computes the various flags needed to run GNU C++ testsuites\n-# (compiler specific as well as library specific).  It is based on \n-# the file ./mkcheck.in, which in the long will be removed in favor of a\n-# DejaGnu-based framework.\n-#\n-# Written by Gabriel Dos Reis <gdr@codesourcery.com>\n-#\n-\n-#\n-# Synopsis\n-#   * tests_flags --compiler build-dir src-dir\n-#\n-#      Returns a space-separated list of flags needed to run front-end\n-#      specific tests.\n-# \n-#   * tests_flags --built-library build-dir src-dir\n-#   * tests_flags --installed-library build-dir src-dir install-dir\n-#     \n-#      Returns a colon-separated list of space-separated list of flags,\n-#      needed to run library specific tests,\n-#      BUILD_DIR:SRC_DIR:PREFIX_DIR:CXX:CXXFLAGS:INCLUDES:LIBS \n-#      the meaning of which is as follows:\n-#        BUILD_DIR   libstdc++-v3 build-dir\n-#        SRC_DIR     libstdc++-v3 src-dir\n-#        PREFIX_DIR  install-dir (meaningful only with --installed-library)\n-#        CXX         which C++ compiler is being used\n-#        CXXFLAGS    special flags to pass to g++\n-#        INCLUDES    paths to headers\n-#        LIBS        flags to pass to the linker\n-#\n-\n-##\n-## Utility functions\n-##\n-\n-# Print a message saying how this script is intended to be invoked\n-print_usage() {\n-    cat <<EOF\n-Usage: \n-  tests_flags --compiler <build-dir> <src-dir>\n-             --built-library <build-dir>  <src-dir>\n-             --installed-library <build-dir> <src-dir> <install-dir>\n-EOF\n-    exit 1\n-}\n-\n-# Check for command line option\n-check_options() {\n-    # First, check for number of command line arguments\n-    if [ \\( $1 -ne 3 \\) -a \\( $1 -ne 4 \\) ]; then\n-\tprint_usage;\n-    fi\n-    \n-    # Then, see if we understand the job we're asked for\n-    case $2 in\n-\t--compiler | --built-library | --installed-library)\n-\t# OK\n-\t;;\n-\t*) \n-\tprint_usage\n-\t;;\n-    esac\n-}\n-\n-# Directory sanity check\n-check_directory() {\n-    if [ ! -d $2 ]; then\n-\techo \"$1 '$2' directory not found, exiting.\"\n-\texit 1\n-    fi\n-}\n-\n-##\n-## Main processing\n-##\n-\n-# Command line options sanity check\n-check_options $# $1\n-\n-query=$1\n-\n-# Check for build, source and install directories\n-BUILD_DIR=$2; SRC_DIR=$3\n-check_directory 'Build' ${BUILD_DIR}\n-check_directory 'Source' ${SRC_DIR}\n-case ${query} in\n-    --installed-library)\n-      PREFIX_DIR=$4\n-      check_directory 'Install' ${PREFIX_DIR}\n-      ;;\n-    *)\n-      PREFIX_DIR=\n-      ;;\n-esac\n-\n-# Compute include paths\n-# INCLUDES == include path to new headers for use on gcc command-line\n-C_DIR=\"`basename  @C_INCLUDE_DIR@`\"\n-case ${query} in\n-    --installed-library)\n-      INCLUDES=\"-I${SRC_DIR}/testsuite\"\n-      ;;\n-    *)\n-      INCLUDES=\"-nostdinc++ -I${BUILD_DIR}/include -I${SRC_DIR}/include\n-                -I${SRC_DIR}/include/std  -I${SRC_DIR}/include/$C_DIR\n-\t        -I${SRC_DIR}/libsupc++ -I${SRC_DIR}/libio \n-\t\t-I${SRC_DIR}/testsuite\"\n-      if test x@xcompiling@ = x1; then\n-        INCLUDES=\"${INCLUDES} -I${SRC_DIR}/../newlib/libc/include\"\n-      fi\n-      ;;\n-esac\n-\n-# If called for compiler tests, just output appropriate include paths\n-case ${query} in\n-    --compiler)\n-      echo ${INCLUDES} -I${SRC_DIR}/include/backward -I${SRC_DIR}/include/ext\n-      exit 0\n-      ;;\n-esac\n-\n-# For built or installed libraries, we need to get right OS-specific bits.\n-. ${SRC_DIR}/configure.target\n-\n-# LIB_PATH == where to find the C++ build libraries for libtool's use\n-# GCC_LIB_PATH == where to find the gcc build libraries for libtool's use\n-# CXX == how to invoke the compiler\n-case ${query} in\n-    --built-library)\n-      LIB_PATH=${BUILD_DIR}/src\n-      GCC_LIB_PATH=${BUILD_DIR}/../../gcc\n-      CXX='@glibcpp_CXX@'\n-      ;;\n-    --installed-library)\n-      LIB_PATH=${PREFIX_DIR}/lib\n-      GCC_LIB_PATH=\n-      CXX=${PREFIX_DIR}/bin/g++\n-      ;;\n-esac\n-\n-# CXXFLAGS == run the testsuite with any special configuration\n-# flags from the library build.\n-CXXFLAGS=\"-ggdb3 -DDEBUG_ASSERT @SECTION_FLAGS@ @SECTION_LDFLAGS@\"\n-\n-# LIBS == any extra may needed -L switches\n-case ${query} in\n-    --built-library)\n-      LIBS=\"${LIB_PATH}/libstdc++.la -no-install -rpath ${GCC_LIB_PATH}\"\n-    case @target_os@ in\n-        *cygwin*)  \n-\t  LIBS=\"${LIBS} -nodefaultlibs -lgcc -lcygwin -luser32\n-                -lkernel32 -ladvapi32 -lshell32\" \n-\t  ;;\n-        *)         \n-\t  LIBS=\"${LIBS} -nodefaultlibs -lgcc -lc -lgcc\" \n-\t  ;;\n-    esac\n-    ;;\n-    --installed-library)\n-\tLIBS=\"${LIB_PATH}/libstdc++.la -no-install -rpath ${LIB_PATH}\"\n-\t;;\n-esac\n-\n-echo ${BUILD_DIR}:${SRC_DIR}:${PREFIX_DIR}:${CXX}:${CXXFLAGS}:${INCLUDES}:${LIBS}\n-exit 0"}, {"sha": "a2dd89a3dd887acf97f810254d324356d902bc72", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "removed", "additions": 0, "deletions": 616, "changes": 616, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd91e0afb4dfd01825ba1e9392c9759b86c1a91/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd91e0afb4dfd01825ba1e9392c9759b86c1a91/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=0fd91e0afb4dfd01825ba1e9392c9759b86c1a91", "patch": "@@ -1,616 +0,0 @@\n-# Copyright (C) 2001 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-# \n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-# \n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n-\n-# Please email any bugs, comments, and/or additions to this file to:\n-# libstdc++@gcc.gnu.org\n-#\n-# This file is contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n-\n-## This file contains support routines for dg.exp based testsuite\n-## framework.\n-\n-## The global associative array lib_env contains the totality\n-## of options necessary to run testcases; the meanings of which are\n-## as follows:\n-##    lib_env(CXX)       \tThe compiler used to run testcases.\n-##    lib_env(CXXFLAGS)  \tSpecial flags passed to the compiler.\n-##    lib_env(LIBGLOSSFLAGS)  \tFlags for finding libgloss-using xcompilers.\n-##    lib_env(INCLUDES)  \tIncludes options to pass to the compiler.\n-##    lib_env(LIBS)   \t\tLibraries to link, and dditional library flags.\n-##    lib_env(LIBTOOL)   \tPath to the `libtool' script.\n-##    lib_env(SRC_DIR)   \tWhere V3 master source lives.\n-##    lib_env(BUILD_DIR) \tWhere V3 is built.\n-##    lib_env(static)    \tFlags to pass to the linker to build a \n-##                       \tstatically linked executable.\n-##    lib_env(shared)    \tFlags to pass to the linker to build a \n-##                       \tdynamically linked executable.\n-##    lib_env(testcase_options) Options specified by current testcase.\n-##                       \tThese are specified through the @xxx@-keywords.\n-\n-\n-load_lib dg.exp\n-load_lib libgloss.exp\n-\n-## Initialization routine.\n-proc libstdc++-dg-init { args } {\n-    global lib_env\n-    global srcdir\n-    global outdir\n-    global dg-do-what-default\n-\n-    # By default, we assume we want to run program images.\n-    set dg-do-what-default run\n-\n-    # Get the source and the build directories.\n-    set src-dir [lookfor_file $srcdir libstdc++-v3]\n-    set build-dir [lookfor_file $outdir libstdc++-v3]\n-\n-    # Set proper environment variables for the framework.\n-    libstdc++-setup-flags ${src-dir} ${build-dir}\n-    \n-    # mkcheck.in used to output this information.\n-    set output [remote_exec host $lib_env(CXX) -v]\n-# XXX don't try clever formatting hacks at the moment\n-#    if { [lindex $output 0] == 0 } {\n-#\tset output [lindex $output 1]\n-#\tregexp \"gcc version.*$\" $output version\n-#\tregsub \"\\n+\" $version \"\" version\n-#\tclone_output \"Compiler: $version\"\n-#\tclone_output \"Compiler flags: $lib_env(CXXFLAGS)\"\n-#    } else {\n-#\tperror \"Cannot determine compiler version: [lindex $output 1]\"\n-#    }\n-}\n-\n-## dg.exp callback.  Called from dg-test to run PROGRAM.\n-##\n-## This is the heart of the framework.  For the time being, it is\n-## pretty much baroque, but it will improve as time goes.\n-proc libstdc++-load { prog } {\n-    global lib_env\n-    set opts $lib_env(testcase_options)\n-    set results [remote_load target $prog]\n-\n-    if { [lindex $results 0] == \"pass\" && [info exists opts(diff)] } {\n-\t# FIXME: We should first test for any mentioned @output@ file here\n-\t#        before taking any other action.\n-\n-\tset firsts [glob -nocomplain [lindex $opts(diff) 0]]\n-\tset seconds [glob -nocomplain [lindex $opts(diff) 1]]\n-\tforeach f $firsts s $seconds {\n-\t    if { [diff $f $s] == 0 } {\n-\t\t# FIXME: Well we should report a message.  But for the time\n-\t\t#        being, just pretend there is nothing much to say.\n-\t\t#        Yes, that is silly, I know.  But we need, first, to\n-\t\t#        to have a working framework.\n-\t\tbreak\n-\t    }\n-\t}\n-    }\n-    return $results\n-}\n-\n-## Nothing particular to do.\n-proc libstdc++-exit { } {\n-}\n-\n-## Output the version of the libs tested.\n-proc libstdc++-version { } {\n-    global lib_env\n-    set version \"undeterminated\" \n-\n-    # This file contains the library configuration, built at configure time.\n-    set config-file $lib_env(BUILD_DIR)/include/bits/c++config.h\n-    \n-    set version_pattern \"__GLIBCPP__\\[ \\t\\]\\+\\[0-9\\]\\+\"\n-    if [file exists ${config-file}] {\n-\tset version [grep ${config-file} $version_pattern]\n-\tregexp \"\\[0-9\\]\\+\" $version version\n-    }\n-    clone_output \"$lib_env(SRC_DIR) version $version\"\n-    return 0\n-}\n-\n-## Main loop.  Loop over TEST-DIRECTORIES and run each testcase\n-## found therein.\n-proc libstdc++-runtest { testdirs } {\n-    global runtests\n-    global srcdir\n-    global outdir\n-\n-    set top-tests-dir [pwd]\n-    foreach d $testdirs {\n-\tset testfiles [glob -nocomplain $d/*.C $d/*.cc]\n-\tif { [llength $testfiles] == 0 } {\n-\t    continue\n-\t}\n-\t\n-\t# Make the appropriate test-dirs with related .libs/ subdir\n-\t# to keep libtool happy.\n-\tset td \"$outdir/[dg-trim-dirname $srcdir $d]\"\n-\tmaybe-make-directory $td\n-\tmaybe-make-directory $td/.libs\n-\n-\tcd $td;\n-\tforeach testfile $testfiles {\n-\t    # If we're not supposed to test this file, just skip it.\n-\t    if ![runtest_file_p $runtests $testfile] {\n-\t\tcontinue\n-\t    }\n-\t    \n-#\t    verbose \"Testing [dg-trim-dirname $srcdir $testfile]\"\n-\t    libstdc++-do-test $testfile static\n-\t    libstdc++-do-test $testfile shared\n-\t}\n-\tcd ${top-tests-dir}\n-    }\n-}\n-\n-## dg.exp callback.  Main test-running routine.  Called from\n-## dg-test.\n-##\n-## TESTCASE is the file-name of the program to test;\n-## COMPILE_TYPE is the kind of compilation to apply to TESTCASE; \n-##              current compilation kinds are: preprocess, compile,\n-##              assemble, link, run.\n-proc libstdc++-dg-test { testfile compile_type additional-options } {\n-    global srcdir; global outdir\n-    global lib_env\n-    global which_library\n-    \n-    # Prepare for compilation output\n-    set comp_output \"\"\n-\n-    # By default, we want to use libtool to compile and run tests.\n-    set lt $lib_env(LIBTOOL)\n-    set lt_args \"--tag=CXX\"\n-    \n-    libstdc++-process-options $testfile\n-    set output_file [file rootname [file tail $testfile]]\n-    set output_file \"./$output_file\"\n-    switch $compile_type {\n-\t\"preprocess\" {\n-\t    set lt $lib_env(CXX)\n-\t    set lt_args \"-E $lib_env(INCLUDES) $testfile -o $output_file.ii\"\n-\t}\n-\t\"compile\" {\n-\t    set lt $lib_env(CXX)\n-\t    set lt_args \"-S $lib_env(INCLUDES) $testfile -o $output_file.s\"\n-\t}\n-\t\"assemble\" {\n-\t    append lt_args \" --mode=compile $lib_env(FLAGS) $testfile\"\n-\t}\n-\t\"run\" -\n-\t\"link\" {\n-\t    # If we're asked to run a testcase, then just do a `link'.\n-\t    # Later, the framework will load the program image through\n-\t    # libstdc++-load callback.\n-\t    if { $which_library == \"static\" } {\n-\t\tappend output_file \".st-exe\"\n-\t    } else {\n-\t\tappend output_file \".sh-exe\"\n-\t    }\n-\t    append lt_args \" --mode=link $lib_env(FLAGS) \\\n-\t\t    $lib_env(LIBGLOSSFLAGS) $lib_env($which_library) \\\n-\t\t    $testfile -o $output_file $lib_env(LIBS)\"\n-\t}\n-\tdefault {\n-\t    perror \"$compile_type: option not recognized\"\n-\t}\n-    }\n-\n-    set results [remote_exec host $lt \"$lt_args ${additional-options}\"]\n-    if { [lindex $results 0] != 0 } {\n-\tset comp_output [lindex $results 1];\n-    }\n-    return [list $comp_output $output_file]\n-}\n-\n-## Get options necessary to properly run testcases. \n-## SRC-DIR is the library top source directory e.g. something like\n-##         /codesourcery/egcs/libstdc++\n-## BUILD-DIR is top build directory e.g. something like\n-##           /tmp/egcs/i686-pc-linux-gnu/libstdc++\n-proc libstdc++-setup-flags {src-dir build-dir} {\n-    global lib_env\n-    \n-    set tmp [remote_exec host ${build-dir}/tests_flags \"--built-library ${build-dir} ${src-dir}\"]\n-    set status [lindex $tmp 0]\n-    set output [lindex $tmp 1]\n-    if { $status == 0 } {\n-\tset flags [split $output :]\n-\tset lib_env(BUILD_DIR) [lindex $flags 0]\n-\tset lib_env(SRC_DIR) [lindex $flags 1]\n-\tset lib_env(CXX) [lindex $flags 3]\n-\tset lib_env(CXXFLAGS) [lindex $flags 4]\n-\tset lib_env(INCLUDES) [lindex $flags 5]\n-\tset lib_env(LIBS) [lindex $flags 6]\n-\tset lib_env(LIBGLOSSFLAGS) [libgloss_link_flags]\n-\n-\t# This is really really fragile.  We should find a better away to\n-\t# tell the framework which flags to use for static/shared libraries.\n-\tset lib_env(static) \"-static\"\n-\tset lib_env(shared) \"\"\n-\n-\tset lib_env(LIBTOOL) \"$lib_env(BUILD_DIR)/libtool\"\n-\tset lib_env(FLAGS) \"$lib_env(CXX) \\\n-\t\t$lib_env(INCLUDES) $lib_env(CXXFLAGS)\"\n-    } else {\n-\tperror \"$output\"\n-    }\n-}\n-\n-proc maybe-make-directory {dir} {\n-    if {![file isdirectory $dir]} {\n-\tfile mkdir $dir\n-    }\n-}\n-\n-proc libstdc++-do-test { testfile lib } {\n-    global which_library; set which_library $lib\n-    ## Is it planed to handle -keep-output throught @xxx@-option\n-    dg-test -keep-output $testfile \"\" \"\"\n-}\n-\n-## Process @xxx@ options.\n-proc libstdc++-process-options { testfile } {\n-    global lib_env\n-\n-    array set opts { diff {} output {} require {} }\n-    set percent [file rootname [file tail $testfile]]\n-    set option-pattern \"@.*@.*\"\n-    set results [grep $testfile ${option-pattern}]\n-\n-    if ![string match \"\" $results] {\n-\tforeach o $results {\n-\t    regexp \"@(.*)@(.*)\" $o o key value\n-\t    regsub -all \"%\" $value \"$percent\" value\n-\n-\t    # Not yet supported: keep-output, output, link-against\n-\t    switch $key {\n-\t\t\"diff\" -\n-\t\t\"keep-output\" -\n-\t\t\"link-against\" -\n-\t\t\"output\" -\n-\t\t\"require\" { }\n-\t\tdefault {\n-\t\t    perror \"libstdc++: Invalid option-specification `$o'\"\n-\t\t}\n-\t    }\n-\t    set opts($key) $value \n-\t    unset key value\n-\t}\n-    }\n-    set lib_env(testcase_options) [array get opts]\n-    \n-    # copy any required data files.\n-    if ![string match \"\" $opts(require)] {\n-\tset src [file dirname $testfile]\n-\tset dst [pwd]\n-\tforeach f $opts(require) {\n-\t    foreach t [glob -nocomplain \"$src/$f\"] {\n-\t\tfile copy -force $t $dst\n-\t    }\n-\t}\n-    }\n-}\n-\n-###\n-### The following is an abominable hack, non-commendable software practice.\n-### This is supposed to be a very-very short term solution.\n-### Please, do not add any piece of code without my approval.\n-### -- Gaby\n-###\n-\n-# dg-test -- runs a new style DejaGnu test\n-#\n-# Syntax: dg-test [-keep-output] prog tool_flags default_extra_tool_flags\n-#\n-# PROG is the full path name of the file to pass to the tool (eg: compiler).\n-# TOOL_FLAGS is a set of options to always pass.\n-# DEFAULT_EXTRA_TOOL_FLAGS are additional options if the testcase has none.\n-\n-#proc dg-test { prog tool_flags default_extra_tool_flags } {\n-proc dg-test { args } {\n-    global dg-do-what-default dg-interpreter-batch-mode dg-linenum-format\n-    global errorCode errorInfo\n-    global tool\n-    global srcdir\t\t;# eg: /calvin/dje/devo/gcc/./testsuite/\n-    global host_triplet target_triplet\n-    global which_library\n-\n-    set keep 0\n-    set i 0\n-\n-    if { [string index [lindex $args 0] 0] == \"-\" } {\n-\tfor { set i 0 } { $i < [llength $args] } { incr i } {\n-\t    if { [lindex $args $i] == \"--\" } {\n-\t\tincr i\n-\t\tbreak\n-\t    } elseif { [lindex $args $i] == \"-keep-output\" } {\n-\t\tset keep 1\n-\t    } elseif { [string index [lindex $args $i] 0] == \"-\" } {\n-\t\tclone_output \"ERROR: dg-test: illegal argument: [lindex $args $i]\"\n-\t\treturn\n-\t    } else {\n-\t\tbreak\n-\t    }\n-\t}\n-    }\n-\n-    if { $i + 3 != [llength $args] } {\n-\tclone_output \"ERROR: dg-test: missing arguments in call\"\n-\treturn\n-    }\n-    set prog [lindex $args $i]\n-    set tool_flags [lindex $args [expr $i + 1]]\n-    set default_extra_tool_flags [lindex $args [expr $i + 2]]\n-\n-    set text \"\\[- A-Za-z0-9\\.\\;\\\"\\_\\:\\'\\`\\(\\)\\!\\#\\=\\+\\?\\&\\*]*\"\n-\n-    set name [dg-trim-dirname $srcdir $prog]\n-    # If we couldn't rip $srcdir out of `prog' then just do the best we can.\n-    # The point is to reduce the unnecessary noise in the logs.  Don't strip\n-    # out too much because different testcases with the same name can confuse\n-    # `test-tool'.\n-    if [string match \"/*\" $name] {\n-\tset name \"[file tail [file dirname $prog]]/[file tail $prog]\"\n-    }\n-\n-    # Process any embedded dg options in the testcase.\n-\n-    # Use \"\" for the second element of dg-do-what so we can tell if it's been\n-    # explicitly set to \"S\".\n-    set dg-do-what [list ${dg-do-what-default} \"\" P]\n-    set dg-excess-errors-flag 0\n-    set dg-messages \"\"\n-    set dg-extra-tool-flags $default_extra_tool_flags\n-    set dg-final-code \"\"\n-\n-    # `dg-output-text' is a list of two elements: pass/fail and text.\n-    # Leave second element off for now (indicates \"don't perform test\")\n-    set dg-output-text \"P\"\n-\n-    # Define our own \"special function\" `unknown' so we catch spelling errors.\n-    # But first rename the existing one so we can restore it afterwards.\n-    catch {rename dg-save-unknown \"\"}\n-    rename unknown dg-save-unknown\n-    proc unknown { args } {\n-\treturn -code error \"unknown dg option: $args\"\n-    }\n-\n-    set tmp [dg-get-options $prog]\n-    foreach op $tmp {\n-\tverbose \"Processing option: $op\" 3\n-\tset status [catch \"$op\" errmsg]\n-\tif { $status != 0 } {\n-\t    if { 0 && [info exists errorInfo] } {\n-\t\t# This also prints a backtrace which will just confuse\n-\t\t# testcase writers, so it's disabled.\n-\t\tperror \"$name: $errorInfo\\n\"\n-\t    } else {\n-\t\tperror \"$name: $errmsg for \\\"$op\\\"\\n\"\n-\t    }\n-\t    # ??? The call to unresolved here is necessary to clear `errcnt'.\n-\t    # What is needed is a proc like perror that doesn't set errcnt.\n-\t    # It should also set exit_status to 1.\n-\t    unresolved \"$name: $errmsg for \\\"$op\\\"\"\n-\t    return\n-\t}\n-    }\n-\n-    # Restore normal error handling.\n-    rename unknown \"\"\n-    rename dg-save-unknown unknown\n-\n-    # Record the final set of flags, to tag log entries with.\n-    set label \"$which_library $tool_flags ${dg-extra-tool-flags}\"\n-\n-    # If we're not supposed to try this test on this target, we're done.\n-    if { [lindex ${dg-do-what} 1] == \"N\" } {\n-\tunsupported \"$name\"\n-\tverbose \"$name not supported on this target, skipping it\" 3\n-\treturn\n-    }\n-\n-    # Run the tool and analyze the results.\n-    # The result of ${tool}-dg-test is in a bit of flux.\n-    # Currently it is the name of the output file (or \"\" if none).\n-    # If we need more than this it will grow into a list of things.\n-    # No intention is made (at this point) to preserve upward compatibility\n-    # (though at some point we'll have to).\n-\n-    set results [${tool}-dg-test $prog [lindex ${dg-do-what} 0] \"$tool_flags ${dg-extra-tool-flags}\"];\n-\n-    set comp_output [lindex $results 0];\n-    set output_file [lindex $results 1];\n-\n-    #send_user \"\\nold_dejagnu.exp: comp_output1 = :$comp_output:\\n\\n\"\n-    #send_user \"\\nold_dejagnu.exp: message = :$message:\\n\\n\"\n-    #send_user \"\\nold_dejagnu.exp: message length = [llength $message]\\n\\n\"\n-\n-    foreach i ${dg-messages} {\n-\tverbose \"Scanning for message: $i\" 4\n-\n-\t# Remove all error messages for the line [lindex $i 0]\n-\t# in the source file.  If we find any, success!\n-\tset line [lindex $i 0]\n-\tset pattern [lindex $i 2]\n-\tset comment [lindex $i 3]\n-\t#send_user \"Before:\\n$comp_output\\n\"\n-\tif [regsub -all \"(^|\\n)(\\[^\\n\\]+$line\\[^\\n\\]*($pattern)\\[^\\n\\]*\\n?)+\" $comp_output \"\\n\" comp_output] {\n-            set comp_output [string trimleft $comp_output]\n-\t    set ok pass\n-\t    set uhoh fail\n-\t} else {\n-\t    set ok fail\n-\t    set uhoh pass\n-\t}\n-\t#send_user \"After:\\n$comp_output\\n\"\n-\n-\t# $line will either be a formatted line number or a number all by\n-\t# itself.  Delete the formatting.\n-\tscan $line ${dg-linenum-format} line\n-\tswitch [lindex $i 1] {\n-\t    \"ERROR\" {\n-\t\t$ok \"$name $comment (test for errors, line $line), $label\"\n-\t    }\n-\t    \"XERROR\" {\n-\t\tx$ok \"$name $comment (test for errors, line $line), $label\"\n-\t    }\n-\t    \"WARNING\" {\n-\t\t$ok \"$name $comment (test for warnings, line $line), $label\"\n-\t    }\n-\t    \"XWARNING\" {\n-\t\tx$ok \"$name $comment (test for warnings, line $line), $label\"\n-\t    }\n-\t    \"BOGUS\" {\n-\t\t$uhoh \"$name $comment (test for bogus messages, line $line), $label\"\n-\t    }\n-\t    \"XBOGUS\" {\n-\t\tx$uhoh \"$name $comment (test for bogus messages, line $line), $label\"\n-\t    }\n-\t    \"BUILD\" {\n-\t\t$uhoh \"$name $comment (test for build failure, line $line), $label\"\n-\t    }\n-\t    \"XBUILD\" {\n-\t\tx$uhoh \"$name $comment (test for build failure, line $line), $label\"\n-\t    }\n-\t    \"EXEC\" { }\n-\t    \"XEXEC\" { }\n-\t}\n-\t#send_user \"\\nold_dejagnu.exp: comp_output2= :$comp_output:\\n\\n\"\n-    }\n-    #send_user \"\\nold_dejagnu.exp: comp_output3 = :$comp_output:\\n\\n\"\n-\n-    # Remove messages from the tool that we can ignore.\n-    #send_user \"comp_output: $comp_output\\n\"\n-    set comp_output [prune_warnings $comp_output]\n-\n-    if { [info proc ${tool}-dg-prune] != \"\" } {\n-\tset comp_output [${tool}-dg-prune $target_triplet $comp_output]\n-\tswitch -glob $comp_output {\n-\t    \"::untested::*\" {\n-\t\tregsub \"::untested::\" $comp_output \"\" message\n-\t\tuntested \"$name: $message\"\n-\t\treturn\n-\t    }\n-\t    \"::unresolved::*\" {\n-\t\tregsub \"::unresolved::\" $comp_output \"\" message\n-\t\tunresolved \"$name: $message\"\n-\t\treturn\n-\t    }\n-\t    \"::unsupported::*\" {\n-\t\tregsub \"::unsupported::\" $comp_output \"\" message\n-\t\tunsupported \"$name: $message\"\n-\t\treturn\n-\t    }\n-\t}\n-    }\n-\n-    # See if someone forgot to delete the extra lines.\n-    regsub -all \"\\n+\" $comp_output \"\\n\" comp_output\n-    regsub \"^\\n+\" $comp_output \"\" comp_output\n-    #send_user \"comp_output: $comp_output\\n\"\n-\n-    # Don't do this if we're testing an interpreter.\n-    # FIXME: why?\n-    if { ${dg-interpreter-batch-mode} == 0 } {\n-\t# Catch excess errors (new bugs or incomplete testcases).\n-\tif ${dg-excess-errors-flag} {\n-\t    setup_xfail \"*-*-*\"\n-\t}\n-\tif ![string match \"\" $comp_output] {\n-\t    fail \"$name (test for excess errors), $label\"\n-\t    send_log \"Excess errors:\\n$comp_output\\n\"\n-\t} else {\n-\t    pass \"$name (test for excess errors), $label\"\n-\t}\n-    }\n-\n-    # Run the executable image if asked to do so.\n-    # FIXME: This is the only place where we assume a standard meaning to\n-    # the `keyword' argument of dg-do.  This could be cleaned up.\n-    if { [lindex ${dg-do-what} 0] == \"run\" } {\n-\tif ![file exists $output_file] {\n-\t    warning \"$name compilation failed to produce executable\"\n-\t} else {\n-\t    set status -1\n-\t    set result [libstdc++-load $output_file]\n-\t    set status [lindex $result 0];\n-\t    set output [lindex $result 1];\n-\t    #send_user \"After exec, status: $status\\n\"\n-\t    if { [lindex ${dg-do-what} 2] == \"F\" } {\n-\t\tsetup_xfail \"*-*-*\"\n-\t    }\n-\t    if { \"$status\" == \"pass\" } {\n-\t\tpass \"$name (execution test), $label\"\n-\t\tverbose \"Exec succeeded.\" 3\n-\t\tif { [llength ${dg-output-text}] > 1 } {\n-\t\t    #send_user \"${dg-output-text}\\n\"\n-\t\t    if { [lindex ${dg-output-text} 0] == \"F\" } {\n-\t\t\tsetup_xfail \"*-*-*\"\n-\t\t    }\n-\t\t    set texttmp [lindex ${dg-output-text} 1]\n-\t\t    if { ![regexp $texttmp ${output}] } {\n-\t\t\tfail \"$name output pattern test, is ${output}, should match $texttmp\"\n-\t\t\tverbose \"Failed test for output pattern $texttmp\" 3\n-\t\t    } else {\n-\t\t\tpass \"$name output pattern test, $texttmp\"\n-\t\t\tverbose \"Passed test for output pattern $texttmp\" 3\n-\t\t    }\n-\t\t    unset texttmp\n-\t\t}\n-\t    } elseif { \"$status\" == \"fail\" } {\n-\t\t# It would be nice to get some info out of errorCode.\n-\t\tif [info exists errorCode] {\n-\t\t    verbose \"Exec failed, errorCode: $errorCode\" 3\n-\t\t} else {\n-\t\t    verbose \"Exec failed, errorCode not defined!\" 3\n-\t\t}\n-\t\tfail \"$name (execution test), $label\"\n-\t    } else {\n-\t\t$status \"$name (execution test), $label\"\n-\t    }\n-\t}\n-    }\n-\n-    # Are there any further tests to perform?\n-    # Note that if the program has special run-time requirements, running\n-    # of the program can be delayed until here.  Ditto for other situations.\n-    # It would be a bit cumbersome though.\n-    if ![string match ${dg-final-code} \"\"] {\n-\tregsub -all \"\\\\\\\\(\\[{}\\])\" ${dg-final-code} \"\\\\1\" dg-final-code\n-\t# Note that the use of `args' here makes this a varargs proc.\n-\tproc dg-final-proc { args } ${dg-final-code}\n-\tverbose \"Running dg-final tests.\" 3\n-\tverbose \"dg-final-proc:\\n[info body dg-final-proc]\" 4\n-\tif [catch \"dg-final-proc $prog\" errmsg] {\n-\t    perror \"$name: error executing dg-final: $errmsg\"\n-\t    # ??? The call to unresolved here is necessary to clear `errcnt'.\n-\t    # What is needed is a proc like perror that doesn't set errcnt.\n-\t    # It should also set exit_status to 1.\n-\t    unresolved \"$name: error executing dg-final: $errmsg\"\n-\t}\n-    }\n-\n-    # Do some final clean up.\n-    # When testing an interpreter, we don't compile something and leave an\n-    # output file.\n-    if { ! ${keep} && ${dg-interpreter-batch-mode} == 0 } {\n-\tcatch \"exec rm -f $output_file\"\n-    }\n-}"}]}