{"sha": "15b28697de9a1f3ca0cbfb7cfb7fba09e13c8bec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTViMjg2OTdkZTlhMWYzY2EwY2JmYjdjZmI3ZmJhMDllMTNjOGJlYw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-02-15T05:53:29Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-02-15T05:53:29Z"}, "message": "Makefile.in: Rebuilt with Eric's change below.\n\n\t* Makefile.in: Rebuilt with Eric's change below.\n\n\t* java/lang/natMath.cc (abs(jdouble), abs(jfloat), round(jfloat),\n\tround(jdouble), min(jfloat), max(jfloat), min(jdouble), min(jfloat)):\n\tRemoved functions which are now implemented in Math.java.\n\nFrom-SVN: r49782", "tree": {"sha": "a355ada9dc8bbf6435c3cbc6f0d523b7655a99ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a355ada9dc8bbf6435c3cbc6f0d523b7655a99ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15b28697de9a1f3ca0cbfb7cfb7fba09e13c8bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b28697de9a1f3ca0cbfb7cfb7fba09e13c8bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15b28697de9a1f3ca0cbfb7cfb7fba09e13c8bec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15b28697de9a1f3ca0cbfb7cfb7fba09e13c8bec/comments", "author": null, "committer": null, "parents": [{"sha": "2f999d0fe7641fe5c77fcfe90c65c3a6edbce6a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f999d0fe7641fe5c77fcfe90c65c3a6edbce6a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f999d0fe7641fe5c77fcfe90c65c3a6edbce6a7"}], "stats": {"total": 131, "additions": 9, "deletions": 122}, "files": [{"sha": "02ded31b2670221bb4b71ecad8c49aef4a8bc89b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b28697de9a1f3ca0cbfb7cfb7fba09e13c8bec/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b28697de9a1f3ca0cbfb7cfb7fba09e13c8bec/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=15b28697de9a1f3ca0cbfb7cfb7fba09e13c8bec", "patch": "@@ -1,3 +1,11 @@\n+2002-02-15  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* Makefile.in: Rebuilt with Eric's change below.\n+\n+\t* java/lang/natMath.cc (abs(jdouble), abs(jfloat), round(jfloat),\n+\tround(jdouble), min(jfloat), max(jfloat), min(jdouble), min(jfloat)):\n+\tRemoved functions which are now implemented in Math.java.\n+\n 2002-02-14  Eric Blake  <ebb9@email.byu.edu>\n \n \t* gcj/javaprims.h (java::lang): Add java::lang::StrictMath."}, {"sha": "1903e27b38fcbb0edd7df2a0f5ec137c436ec827", "filename": "libjava/java/lang/natMath.cc", "status": "modified", "additions": 1, "deletions": 122, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15b28697de9a1f3ca0cbfb7cfb7fba09e13c8bec/libjava%2Fjava%2Flang%2FnatMath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15b28697de9a1f3ca0cbfb7cfb7fba09e13c8bec/libjava%2Fjava%2Flang%2FnatMath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatMath.cc?ref=15b28697de9a1f3ca0cbfb7cfb7fba09e13c8bec", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -27,8 +27,6 @@ details.  */\n \n #include \"fdlibm.h\"\n \n-extern \"C\" float fabsf (float);\n-\n jdouble java::lang::Math::cos(jdouble x)\n {\n   return (jdouble)::cos((double)x);\n@@ -89,45 +87,11 @@ jdouble java::lang::Math::IEEEremainder(jdouble y, jdouble x)\n   return (jdouble)::__ieee754_remainder((double)y, (double)x);\n }  \n \n-jdouble java::lang::Math::abs(jdouble x)\n-{\n-  return (jdouble)::fabs((double)x);\n-}  \n-\n-jfloat java::lang::Math::abs(jfloat x)\n-{\n-  return (jfloat)::fabsf((float)x);\n-}  \n-\n jdouble java::lang::Math::rint(jdouble x)\n {\n   return (jdouble)::rint((double)x);\n }  \n \n-jint java::lang::Math::round(jfloat x)\n-{\n-  if (x != x)\n-    return 0;\n-  if (x <= (jfloat)java::lang::Integer::MIN_VALUE)\n-    return java::lang::Integer::MIN_VALUE;\n-  if (x >= (jfloat)java::lang::Integer::MAX_VALUE)\n-    return java::lang::Integer::MAX_VALUE;\n-\n-  return (jint)::rintf((float)x);\n-}  \n-\n-jlong java::lang::Math::round(jdouble x)\n-{\n-  if (x != x)\n-    return 0;\n-  if (x <= (jdouble)java::lang::Long::MIN_VALUE)\n-    return java::lang::Long::MIN_VALUE;\n-  if (x >= (jdouble)java::lang::Long::MAX_VALUE)\n-    return java::lang::Long::MAX_VALUE;\n-\n-  return (jlong)::rint((double)x);\n-}  \n-\n jdouble java::lang::Math::floor(jdouble x)\n {\n   return (jdouble)::floor((double)x);\n@@ -158,48 +122,6 @@ isNaN (jint bits)\n   return e == 0x7f800000 && f != 0;\n }\n \n-jfloat\n-java::lang::Math::min(jfloat a, jfloat b)\n-{\n-  jint abits = floatToIntBits (a);\n-  jint bbits = floatToIntBits (b);\n-  \n-  if (isNaN (abits) || isNaN (bbits))\n-    return java::lang::Float::NaN;\n-  \n-  if (abits >= 0) // a is +ve\n-    return bbits < 0 ? b  // a is +ve, b is -ve.\n-      // a and b are both +ve, so compare magnitudes: the number with\n-      // the smallest magnitude is the smallest\n-      : (abits < bbits ? a : b);\n-  else // a is -ve\n-    return bbits >= 0 ? a  // a is -ve, b is +ve.\n-      // a and b are both -ve, so compare magnitudes: the number with\n-      // the biggest magnitude is the smallest\n-      : (abits > bbits ? a : b);\n-}\n-\n-jfloat \n-java::lang::Math::max(jfloat a, jfloat b)\n-{\n-  jint abits = floatToIntBits (a);\n-  jint bbits = floatToIntBits (b);\n-  \n-  if (isNaN (abits) || isNaN (bbits))\n-    return java::lang::Float::NaN;\n-  \n-  if (abits >= 0) // a is +ve\n-    return bbits < 0 ? a  // a is +ve, b is -ve.\n-      // a and b are both +ve, so compare magnitudes: the number with\n-      // the smallest magnitude is the smallest\n-      : (abits > bbits ? a : b);\n-  else // a is -ve\n-    return bbits >= 0 ? b  // a is -ve, b is +ve.\n-      // a and b are both -ve, so compare magnitudes: the number with\n-      // the biggest magnitude is the smallest\n-      : (abits < bbits ? a : b);\n-}\n-\n static inline jlong\n doubleToLongBits (jdouble value)\n {\n@@ -220,46 +142,3 @@ isNaN (jlong bits)\n   return e == 0x7ff0000000000000LL && f != 0LL;\n }\n \n-\n-jdouble\n-java::lang::Math::min(jdouble a, jdouble b)\n-{\n-  jlong abits = doubleToLongBits (a);\n-  jlong bbits = doubleToLongBits (b);\n-  \n-  if (isNaN (abits) || isNaN (bbits))\n-    return java::lang::Double::NaN;\n-\n-  if (abits >= 0LL) // a is +ve\n-    return bbits < 0LL ? b  // a is +ve, b is -ve.\n-      // a and b are both +ve, so compare magnitudes: the number with\n-      // the smallest magnitude is the smallest\n-      : (abits < bbits ? a : b);\n-  else // a is -ve\n-    return bbits >= 0LL ? a  // a is -ve, b is +ve.\n-      // a and b are both -ve, so compare magnitudes: the number with\n-      // the biggest magnitude is the smallest\n-      : (abits > bbits ? a : b);\n-}\n-\n-jdouble\n-java::lang::Math::max(jdouble a, jdouble b)\n-{\n-  jlong abits = doubleToLongBits (a);\n-  jlong bbits = doubleToLongBits (b);\n-  \n-  if (isNaN (abits) || isNaN (bbits))\n-    return java::lang::Double::NaN;\n-\n-  if (abits >= 0LL) // a is +ve\n-    return bbits < 0LL ? a  // a is +ve, b is -ve.\n-      // a and b are both +ve, so compare magnitudes: the number with\n-      // the smallest magnitude is the smallest\n-      : (abits > bbits ? a : b);\n-  else // a is -ve\n-    return bbits >= 0LL ? b  // a is -ve, b is +ve.\n-      // a and b are both -ve, so compare magnitudes: the number with\n-      // the biggest magnitude is the smallest\n-      : (abits < bbits ? a : b);\n-}\n-"}]}