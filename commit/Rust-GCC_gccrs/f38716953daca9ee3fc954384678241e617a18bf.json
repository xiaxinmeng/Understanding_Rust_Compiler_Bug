{"sha": "f38716953daca9ee3fc954384678241e617a18bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM4NzE2OTUzZGFjYTllZTNmYzk1NDM4NDY3ODI0MWU2MTdhMThiZg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "francois.cppdevs@free.fr", "date": "2010-12-08T01:23:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-12-08T01:23:41Z"}, "message": "stl_iterator.h: Add move_iterator operators overloads to make it robust to template abuses.\n\n2010-12-07  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n\n\t* include/bits/stl_iterator.h: Add move_iterator operators overloads\n\tto make it robust to template abuses.\n\t* testsuite/util/testsuite_greedy_ops.h: New.\n\t* testsuite/23_containers/vector/types/1.cc: Use latter.\n\t* testsuite/23_containers/deque/types/1.cc: Likewise.\n\t* testsuite/24_iterators/move_iterator/greedy_ops.cc: New.\n\t* testsuite/24_iterators/normal_iterator/greedy_ops.cc: New.\n\t* testsuite/24_iterators/reverse_iterator/greedy_ops.cc: New.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-error\n\tline numbers.\n\nFrom-SVN: r167580", "tree": {"sha": "ac8a43e1c1fd71f771edded23b172af763d98a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac8a43e1c1fd71f771edded23b172af763d98a8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f38716953daca9ee3fc954384678241e617a18bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38716953daca9ee3fc954384678241e617a18bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38716953daca9ee3fc954384678241e617a18bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38716953daca9ee3fc954384678241e617a18bf/comments", "author": null, "committer": null, "parents": [{"sha": "2b843fad50847f9a9fee935282022500657578fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b843fad50847f9a9fee935282022500657578fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b843fad50847f9a9fee935282022500657578fc"}], "stats": {"total": 317, "additions": 280, "deletions": 37}, "files": [{"sha": "14479272f27c87b86b1c9050b0be0cac42ee85a9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f38716953daca9ee3fc954384678241e617a18bf", "patch": "@@ -1,3 +1,16 @@\n+2010-12-07  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n+\n+\t* include/bits/stl_iterator.h: Add move_iterator operators overloads\n+\tto make it robust to template abuses.\n+\t* testsuite/util/testsuite_greedy_ops.h: New.\n+\t* testsuite/23_containers/vector/types/1.cc: Use latter.\n+\t* testsuite/23_containers/deque/types/1.cc: Likewise.\n+\t* testsuite/24_iterators/move_iterator/greedy_ops.cc: New.\n+\t* testsuite/24_iterators/normal_iterator/greedy_ops.cc: New.\n+\t* testsuite/24_iterators/reverse_iterator/greedy_ops.cc: New.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-error\n+\tline numbers.\n+\n 2010-12-06  Paul Pluzhnikov  <ppluzhnikov@google.com>\n \n \tPR libstdc++/46830"}, {"sha": "e930ddbd219b494106896423d2d2e67bcf088a3d", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=f38716953daca9ee3fc954384678241e617a18bf", "patch": "@@ -1009,42 +1009,81 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return std::move(_M_current[__n]); }\n     };\n \n+  // Note: See __normal_iterator operators note from Gaby to understand\n+  // why there are always 2 versions for most of the move_iterator\n+  // operators.\n   template<typename _IteratorL, typename _IteratorR>\n     inline bool\n     operator==(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n     { return __x.base() == __y.base(); }\n \n+  template<typename _Iterator>\n+    inline bool\n+    operator==(const move_iterator<_Iterator>& __x,\n+\t       const move_iterator<_Iterator>& __y)\n+    { return __x.base() == __y.base(); }\n+\n   template<typename _IteratorL, typename _IteratorR>\n     inline bool\n     operator!=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n     { return !(__x == __y); }\n \n+  template<typename _Iterator>\n+    inline bool\n+    operator!=(const move_iterator<_Iterator>& __x,\n+\t       const move_iterator<_Iterator>& __y)\n+    { return !(__x == __y); }\n+\n   template<typename _IteratorL, typename _IteratorR>\n     inline bool\n     operator<(const move_iterator<_IteratorL>& __x,\n \t      const move_iterator<_IteratorR>& __y)\n     { return __x.base() < __y.base(); }\n \n+  template<typename _Iterator>\n+    inline bool\n+    operator<(const move_iterator<_Iterator>& __x,\n+\t      const move_iterator<_Iterator>& __y)\n+    { return __x.base() < __y.base(); }\n+\n   template<typename _IteratorL, typename _IteratorR>\n     inline bool\n     operator<=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n     { return !(__y < __x); }\n \n+  template<typename _Iterator>\n+    inline bool\n+    operator<=(const move_iterator<_Iterator>& __x,\n+\t       const move_iterator<_Iterator>& __y)\n+    { return !(__y < __x); }\n+\n   template<typename _IteratorL, typename _IteratorR>\n     inline bool\n     operator>(const move_iterator<_IteratorL>& __x,\n \t      const move_iterator<_IteratorR>& __y)\n     { return __y < __x; }\n \n+  template<typename _Iterator>\n+    inline bool\n+    operator>(const move_iterator<_Iterator>& __x,\n+\t      const move_iterator<_Iterator>& __y)\n+    { return __y < __x; }\n+\n   template<typename _IteratorL, typename _IteratorR>\n     inline bool\n     operator>=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n     { return !(__x < __y); }\n \n+  template<typename _Iterator>\n+    inline bool\n+    operator>=(const move_iterator<_Iterator>& __x,\n+\t       const move_iterator<_Iterator>& __y)\n+    { return !(__x < __y); }\n+\n   // DR 685.\n   template<typename _IteratorL, typename _IteratorR>\n     inline auto\n@@ -1053,6 +1092,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     -> decltype(__x.base() - __y.base())\n     { return __x.base() - __y.base(); }\n \n+  template<typename _Iterator>\n+    inline auto\n+    operator-(const move_iterator<_Iterator>& __x,\n+\t      const move_iterator<_Iterator>& __y)\n+    -> decltype(__x.base() - __y.base())\n+    { return __x.base() - __y.base(); }\n+\n   template<typename _Iterator>\n     inline move_iterator<_Iterator>\n     operator+(typename move_iterator<_Iterator>::difference_type __n,"}, {"sha": "019f5f7f592e377f50fa4f927ba752abd75cc70e", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=f38716953daca9ee3fc954384678241e617a18bf", "patch": "@@ -45,7 +45,8 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 1085 }\n // { dg-warning \"note\" \"\" { target *-*-* } 465 }\n // { dg-warning \"note\" \"\" { target *-*-* } 585 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 1027 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 1048 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 1042 }\n // { dg-warning \"note\" \"\" { target *-*-* } 340 }\n // { dg-warning \"note\" \"\" { target *-*-* } 290 }\n // { dg-warning \"note\" \"\" { target *-*-* } 205 }"}, {"sha": "eed7f873549e708275641d65eeaeb8f181967e9d", "filename": "libstdc++-v3/testsuite/23_containers/deque/types/1.cc", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Ftypes%2F1.cc?ref=f38716953daca9ee3fc954384678241e617a18bf", "patch": "@@ -20,35 +20,33 @@\n // { dg-do compile }\n \n #include <deque>\n-\n-namespace N\n-{\n-  struct X { };\n-\n-  template<typename T>\n-    X operator+(T, std::size_t)\n-    { return X(); }\n-\n-  template<typename T>\n-    X operator-(T, T)\n-    { return X(); }\n-}\n+#include <testsuite_greedy_ops.h>\n \n int main()\n {\n-  std::deque<N::X> d(5);\n-  const std::deque<N::X> e(1);\n+  std::deque<greedy_ops::X> d(5);\n+  const std::deque<greedy_ops::X> e(1);\n \n   d[0];\n   e[0];\n   d.size();\n   d.erase(d.begin());\n   d.resize(1);\n-  d.assign(1, N::X());\n-  d.insert(d.begin(), N::X());\n-  d.insert(d.begin(), 1, N::X());\n+  d.assign(1, greedy_ops::X());\n+  d.insert(d.begin(), greedy_ops::X());\n+  d.insert(d.begin(), 1, greedy_ops::X());\n   d.insert(d.begin(), e.begin(), e.end());\n   d = e;\n \n+  std::deque<greedy_ops::X>::iterator it;\n+  it == it;\n+  it != it;\n+  it < it;\n+  it <= it;\n+  it > it;\n+  it >= it;\n+  it - it;\n+  it + 1;\n+\n   return 0;\n }"}, {"sha": "dd2f8f6466883207e478fbab58909d54c63c7b9b", "filename": "libstdc++-v3/testsuite/23_containers/vector/types/1.cc", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ftypes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ftypes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Ftypes%2F1.cc?ref=f38716953daca9ee3fc954384678241e617a18bf", "patch": "@@ -1,6 +1,6 @@\n // 2005-12-01  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,32 +20,20 @@\n // { dg-do compile }\n \n #include <vector>\n-\n-namespace N\n-{\n-  struct X { };\n-\n-  template<typename T>\n-    X operator+(T, std::size_t)\n-    { return X(); }\n-\n-  template<typename T>\n-    X operator-(T, T)\n-    { return X(); }\n-}\n+#include <testsuite_greedy_ops.h>\n \n int main()\n {\n-  std::vector<N::X> v(5);\n-  const std::vector<N::X> w(1);\n+  std::vector<greedy_ops::X> v(5);\n+  const std::vector<greedy_ops::X> w(1);\n \n   v[0];\n   w[0];\n   v.size();\n   v.capacity();\n   v.resize(1);\n-  v.insert(v.begin(), N::X());\n-  v.insert(v.begin(), 1, N::X());\n+  v.insert(v.begin(), greedy_ops::X());\n+  v.insert(v.begin(), 1, greedy_ops::X());\n   v.insert(v.begin(), w.begin(), w.end());\n   v = w;\n "}, {"sha": "474a795abda8edd9a2b8c4ed8dbe7dbde872a31b", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/greedy_ops.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc?ref=f38716953daca9ee3fc954384678241e617a18bf", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iterator>\n+#include <testsuite_greedy_ops.h>\n+\n+void test01()\n+{\n+  typedef std::move_iterator<greedy_ops::X*> iterator_type;\n+\n+  iterator_type it(nullptr);\n+  \n+  it == it;\n+  it != it;\n+  it < it;\n+  it <= it;\n+  it > it;\n+  it >= it;\n+  it - it;\n+  1 + it;\n+  it + 1;\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "23ad57b9789e5c46af846e391414e767f30cb4f5", "filename": "libstdc++-v3/testsuite/24_iterators/normal_iterator/greedy_ops.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fgreedy_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fgreedy_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fnormal_iterator%2Fgreedy_ops.cc?ref=f38716953daca9ee3fc954384678241e617a18bf", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iterator>\n+#include <testsuite_greedy_ops.h>\n+\n+namespace greedy_ops\n+{\n+  struct C\n+  {\n+    typedef X* pointer;\n+  };\n+}\n+\n+void test01()\n+{\n+  typedef __gnu_cxx::__normal_iterator<greedy_ops::X*,\n+\t\t\t\t       greedy_ops::C> iterator_type;\n+\n+  iterator_type it(0);\n+  \n+  it == it;\n+  it != it;\n+  it < it;\n+  it <= it;\n+  it > it;\n+  it >= it;\n+  it - it;\n+  it + 1;\n+  1 + it;\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "3c7c46fdef9826d0469da2a6a5e088abffb1a711", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/greedy_ops.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc?ref=f38716953daca9ee3fc954384678241e617a18bf", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iterator>\n+#include <testsuite_greedy_ops.h>\n+\n+void test01()\n+{\n+  typedef std::reverse_iterator<greedy_ops::X*> iterator_type;\n+\n+  iterator_type it;\n+  \n+  it == it;\n+  it != it;\n+  it < it;\n+  it <= it;\n+  it > it;\n+  it >= it;\n+  it - it;\n+  1 + it;\n+  it + 1;\n+}\n+\n+int main() \n+{ \n+  test01();\n+  return 0;\n+}"}, {"sha": "8dcbfdb84eacdac5e637b5e2e725988e234f8f83", "filename": "libstdc++-v3/testsuite/util/testsuite_greedy_ops.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_greedy_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38716953daca9ee3fc954384678241e617a18bf/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_greedy_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_greedy_ops.h?ref=f38716953daca9ee3fc954384678241e617a18bf", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+namespace greedy_ops\n+{\n+  struct X\n+  { };\n+\n+  template<typename T>\n+  X operator==(T, T)\n+  { return X(); }\n+\n+  template<typename T>\n+  X operator!=(T, T)\n+  { return X(); }\n+\n+  template<typename T>\n+  X operator<(T, T)\n+  { return X(); }\n+\n+  template<typename T>\n+  X operator<=(T, T)\n+  { return X(); }\n+\n+  template<typename T>\n+    X operator>(T, T)\n+  { return X(); }\n+\n+  template<typename T>\n+  X operator>=(T, T)\n+  { return X(); }\n+\n+  template<typename T>\n+  X operator-(T, T)\n+  { return X(); }\n+  /*\n+  template<typename T>\n+  T operator+(std::size_t, T)\n+  { return T(); }\n+  */\n+  template<typename T>\n+  T operator+(T, std::size_t)\n+  { return T(); }\n+}"}]}