{"sha": "9acc9cbeb8570573b8d73053453d65becc2d386a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFjYzljYmViODU3MDU3M2I4ZDczMDUzNDUzZDY1YmVjYzJkMzg2YQ==", "commit": {"author": {"name": "Evandro Menezes", "email": "evandro@gcc.gnu.org", "date": "2016-06-13T19:02:52Z"}, "committer": {"name": "Evandro Menezes", "email": "evandro@gcc.gnu.org", "date": "2016-06-13T19:02:52Z"}, "message": "[AArch64] Add more choices for the reciprocal square root approximation\n\nAllow a target to prefer such operation depending on the operation mode.\n\ngcc/\n\t* config/aarch64/aarch64-protos.h\n\t(AARCH64_APPROX_MODE): New macro.\n\t(AARCH64_APPROX_{NONE,ALL}): Likewise.\n\t(cpu_approx_modes): New structure.\n\t(tune_params): New member \"approx_modes\".\n\t* config/aarch64/aarch64-tuning-flags.def\n\t(AARCH64_EXTRA_TUNE_APPROX_RSQRT): Remove macro.\n\t* config/aarch64/aarch64.c\n\t({generic,exynosm1,xgene1}_approx_modes): New core\n\t\"cpu_approx_modes\" structures.\n\t(generic_tunings): New member \"approx_modes\".\n\t(cortexa35_tunings): Likewise.\n\t(cortexa53_tunings): Likewise.\n\t(cortexa57_tunings): Likewise.\n\t(cortexa72_tunings): Likewise.\n\t(exynosm1_tunings): Likewise.\n\t(thunderx_tunings): Likewise.\n\t(xgene1_tunings): Likewise.\n\t(use_rsqrt_p): New argument for the mode and use new member from\n\t\"tune_params\".\n\t(aarch64_builtin_reciprocal): Devise mode from builtin.\n\t(aarch64_optab_supported_p): New argument for the mode.\n\t* doc/invoke.texi (-mlow-precision-recip-sqrt): Reword description.\n\nFrom-SVN: r237395", "tree": {"sha": "83b24b59e7b7a16a7bcfa358cd38d75be76f2d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83b24b59e7b7a16a7bcfa358cd38d75be76f2d6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9acc9cbeb8570573b8d73053453d65becc2d386a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acc9cbeb8570573b8d73053453d65becc2d386a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9acc9cbeb8570573b8d73053453d65becc2d386a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acc9cbeb8570573b8d73053453d65becc2d386a/comments", "author": null, "committer": null, "parents": [{"sha": "d4f076c9b8f4288d748c871b5849146a518dee7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f076c9b8f4288d748c871b5849146a518dee7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f076c9b8f4288d748c871b5849146a518dee7b"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "1c56a1dc5e8d1b5812bc33184a42887e9f4d398f", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acc9cbeb8570573b8d73053453d65becc2d386a/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acc9cbeb8570573b8d73053453d65becc2d386a/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=9acc9cbeb8570573b8d73053453d65becc2d386a", "patch": "@@ -178,13 +178,31 @@ struct cpu_branch_cost\n   const int unpredictable;  /* Unpredictable branch or optimizing for speed.  */\n };\n \n+/* Control approximate alternatives to certain FP operators.  */\n+#define AARCH64_APPROX_MODE(MODE) \\\n+  ((MIN_MODE_FLOAT <= (MODE) && (MODE) <= MAX_MODE_FLOAT) \\\n+   ? (1 << ((MODE) - MIN_MODE_FLOAT)) \\\n+   : (MIN_MODE_VECTOR_FLOAT <= (MODE) && (MODE) <= MAX_MODE_VECTOR_FLOAT) \\\n+     ? (1 << ((MODE) - MIN_MODE_VECTOR_FLOAT \\\n+\t      + MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1)) \\\n+     : (0))\n+#define AARCH64_APPROX_NONE (0)\n+#define AARCH64_APPROX_ALL (-1)\n+\n+/* Allowed modes for approximations.  */\n+struct cpu_approx_modes\n+{\n+  const unsigned int recip_sqrt; /* Reciprocal square root.  */\n+};\n+\n struct tune_params\n {\n   const struct cpu_cost_table *insn_extra_cost;\n   const struct cpu_addrcost_table *addr_cost;\n   const struct cpu_regmove_cost *regmove_cost;\n   const struct cpu_vector_cost *vec_costs;\n   const struct cpu_branch_cost *branch_costs;\n+  const struct cpu_approx_modes *approx_modes;\n   int memmov_cost;\n   int issue_rate;\n   unsigned int fusible_ops;"}, {"sha": "048c2a3e3f74beeaa9ff0bf0fd4c49c9a883e158", "filename": "gcc/config/aarch64/aarch64-tuning-flags.def", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acc9cbeb8570573b8d73053453d65becc2d386a/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acc9cbeb8570573b8d73053453d65becc2d386a/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def?ref=9acc9cbeb8570573b8d73053453d65becc2d386a", "patch": "@@ -29,5 +29,3 @@\n      AARCH64_TUNE_ to give an enum name. */\n \n AARCH64_EXTRA_TUNING_OPTION (\"rename_fma_regs\", RENAME_FMA_REGS)\n-AARCH64_EXTRA_TUNING_OPTION (\"approx_rsqrt\", APPROX_RSQRT)\n-"}, {"sha": "6bc99101c908930ca3a12557c38d8a5998e0cad8", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acc9cbeb8570573b8d73053453d65becc2d386a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acc9cbeb8570573b8d73053453d65becc2d386a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9acc9cbeb8570573b8d73053453d65becc2d386a", "patch": "@@ -393,13 +393,32 @@ static const struct cpu_branch_cost cortexa57_branch_cost =\n   3   /* Unpredictable.  */\n };\n \n+/* Generic approximation modes.  */\n+static const cpu_approx_modes generic_approx_modes =\n+{\n+  AARCH64_APPROX_NONE\t/* recip_sqrt  */\n+};\n+\n+/* Approximation modes for Exynos M1.  */\n+static const cpu_approx_modes exynosm1_approx_modes =\n+{\n+  AARCH64_APPROX_ALL\t/* recip_sqrt  */\n+};\n+\n+/* Approximation modes for X-Gene 1.  */\n+static const cpu_approx_modes xgene1_approx_modes =\n+{\n+  AARCH64_APPROX_ALL\t/* recip_sqrt  */\n+};\n+\n static const struct tune_params generic_tunings =\n {\n   &cortexa57_extra_costs,\n   &generic_addrcost_table,\n   &generic_regmove_cost,\n   &generic_vector_cost,\n   &generic_branch_cost,\n+  &generic_approx_modes,\n   4, /* memmov_cost  */\n   2, /* issue_rate  */\n   AARCH64_FUSE_NOTHING, /* fusible_ops  */\n@@ -424,6 +443,7 @@ static const struct tune_params cortexa35_tunings =\n   &cortexa53_regmove_cost,\n   &generic_vector_cost,\n   &generic_branch_cost,\n+  &generic_approx_modes,\n   4, /* memmov_cost  */\n   1, /* issue_rate  */\n   (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n@@ -449,6 +469,7 @@ static const struct tune_params cortexa53_tunings =\n   &cortexa53_regmove_cost,\n   &generic_vector_cost,\n   &generic_branch_cost,\n+  &generic_approx_modes,\n   4, /* memmov_cost  */\n   2, /* issue_rate  */\n   (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n@@ -474,6 +495,7 @@ static const struct tune_params cortexa57_tunings =\n   &cortexa57_regmove_cost,\n   &cortexa57_vector_cost,\n   &cortexa57_branch_cost,\n+  &generic_approx_modes,\n   4, /* memmov_cost  */\n   3, /* issue_rate  */\n   (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n@@ -499,6 +521,7 @@ static const struct tune_params cortexa72_tunings =\n   &cortexa57_regmove_cost,\n   &cortexa57_vector_cost,\n   &generic_branch_cost,\n+  &generic_approx_modes,\n   4, /* memmov_cost  */\n   3, /* issue_rate  */\n   (AARCH64_FUSE_AES_AESMC | AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n@@ -524,6 +547,7 @@ static const struct tune_params exynosm1_tunings =\n   &exynosm1_regmove_cost,\n   &exynosm1_vector_cost,\n   &generic_branch_cost,\n+  &exynosm1_approx_modes,\n   4,\t/* memmov_cost  */\n   3,\t/* issue_rate  */\n   (AARCH64_FUSE_AES_AESMC), /* fusible_ops  */\n@@ -538,7 +562,7 @@ static const struct tune_params exynosm1_tunings =\n   48,\t/* max_case_values.  */\n   64,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_WEAK, /* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_APPROX_RSQRT) /* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NONE) /* tune_flags.  */\n };\n \n static const struct tune_params thunderx_tunings =\n@@ -548,6 +572,7 @@ static const struct tune_params thunderx_tunings =\n   &thunderx_regmove_cost,\n   &generic_vector_cost,\n   &generic_branch_cost,\n+  &generic_approx_modes,\n   6, /* memmov_cost  */\n   2, /* issue_rate  */\n   AARCH64_FUSE_CMP_BRANCH, /* fusible_ops  */\n@@ -572,6 +597,7 @@ static const struct tune_params xgene1_tunings =\n   &xgene1_regmove_cost,\n   &xgene1_vector_cost,\n   &generic_branch_cost,\n+  &xgene1_approx_modes,\n   6, /* memmov_cost  */\n   4, /* issue_rate  */\n   AARCH64_FUSE_NOTHING, /* fusible_ops  */\n@@ -586,7 +612,7 @@ static const struct tune_params xgene1_tunings =\n   0,\t/* max_case_values.  */\n   0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_APPROX_RSQRT)\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n \n /* Support for fine-grained override of the tuning structures.  */\n@@ -7320,12 +7346,12 @@ aarch64_memory_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n    to optimize 1.0/sqrt.  */\n \n static bool\n-use_rsqrt_p (void)\n+use_rsqrt_p (machine_mode mode)\n {\n   return (!flag_trapping_math\n \t  && flag_unsafe_math_optimizations\n-\t  && ((aarch64_tune_params.extra_tuning_flags\n-\t       & AARCH64_EXTRA_TUNE_APPROX_RSQRT)\n+\t  && ((aarch64_tune_params.approx_modes->recip_sqrt\n+\t       & AARCH64_APPROX_MODE (mode))\n \t      || flag_mrecip_low_precision_sqrt));\n }\n \n@@ -7335,7 +7361,9 @@ use_rsqrt_p (void)\n static tree\n aarch64_builtin_reciprocal (tree fndecl)\n {\n-  if (!use_rsqrt_p ())\n+  machine_mode mode = TYPE_MODE (TREE_TYPE (fndecl));\n+\n+  if (!use_rsqrt_p (mode))\n     return NULL_TREE;\n   return aarch64_builtin_rsqrt (DECL_FUNCTION_CODE (fndecl));\n }\n@@ -13731,13 +13759,13 @@ aarch64_promoted_type (const_tree t)\n /* Implement the TARGET_OPTAB_SUPPORTED_P hook.  */\n \n static bool\n-aarch64_optab_supported_p (int op, machine_mode, machine_mode,\n+aarch64_optab_supported_p (int op, machine_mode mode1, machine_mode,\n \t\t\t   optimization_type opt_type)\n {\n   switch (op)\n     {\n     case rsqrt_optab:\n-      return opt_type == OPTIMIZE_FOR_SPEED && use_rsqrt_p ();\n+      return opt_type == OPTIMIZE_FOR_SPEED && use_rsqrt_p (mode1);\n \n     default:\n       return true;"}, {"sha": "e107da9aeff149d612c326b01c979267e4e54069", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acc9cbeb8570573b8d73053453d65becc2d386a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acc9cbeb8570573b8d73053453d65becc2d386a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9acc9cbeb8570573b8d73053453d65becc2d386a", "patch": "@@ -13022,7 +13022,7 @@ corresponding flag to the linker.\n @item -mno-low-precision-recip-sqrt\n @opindex mlow-precision-recip-sqrt\n @opindex mno-low-precision-recip-sqrt\n-Enable or disable reciprocal square root approximation.\n+Enable or disable the reciprocal square root approximation.\n This option only has an effect if @option{-ffast-math} or\n @option{-funsafe-math-optimizations} is used as well.  Enabling this reduces\n precision of reciprocal square root results to about 16 bits for"}]}