{"sha": "ce0bead308a024b906092bb0395b7ed67c53b56e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UwYmVhZDMwOGEwMjRiOTA2MDkyYmIwMzk1YjdlZDY3YzUzYjU2ZQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2007-12-13T10:23:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:23:40Z"}, "message": "einfo.ads, einfo.adb: Flag 232 is now Implemented_By_Entry.\n\n2007-12-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.ads, einfo.adb: Flag 232 is now Implemented_By_Entry.\n\t(Implemented_By_Entry, Set_Implemented_By_Entry): New routines.\n\t(Write_Entry_Flags): Add an entry for Implemented_By_Entry.\n\t(Renamed_In_Spec): New flag\n\t(Has_Pragma_Inline_Always): New flag\n\tAdd missing doc for pragma Obsolescent_Warning\n\tAdd missing doc for 17 additional unused flags (230-247)\n\t(Is_Derived_Type): Remove condition \"not Is_Generic_Type\".\n\tAlphabetize with clauses.\n\tSeparate Is_Thunk and Has_Thunks flags\n\t(Write_Entity_Flags): Add forgotten entry for Has_Thunks\n\t(Related_Interface): Renamed to Related_Type.\n\t(Has_Thunks/Set_Has_Thunks): Subprograms of new attribute.\n\t(Set_Is_Flag): Restrict the assertion.\n\nFrom-SVN: r130825", "tree": {"sha": "bc395c039c81c24bafe4bd29d7c27949c0c9de9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc395c039c81c24bafe4bd29d7c27949c0c9de9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce0bead308a024b906092bb0395b7ed67c53b56e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0bead308a024b906092bb0395b7ed67c53b56e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce0bead308a024b906092bb0395b7ed67c53b56e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0bead308a024b906092bb0395b7ed67c53b56e/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a1cb33a404025cb4d97876dd47e55c6800c6942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1cb33a404025cb4d97876dd47e55c6800c6942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a1cb33a404025cb4d97876dd47e55c6800c6942"}], "stats": {"total": 598, "additions": 409, "deletions": 189}, "files": [{"sha": "3648741848b09ae9e7db90f142bec2787ff5e62c", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 132, "deletions": 40, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0bead308a024b906092bb0395b7ed67c53b56e/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0bead308a024b906092bb0395b7ed67c53b56e/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=ce0bead308a024b906092bb0395b7ed67c53b56e", "patch": "@@ -36,9 +36,9 @@ pragma Style_Checks (All_Checks);\n \n with Atree;  use Atree;\n with Nlists; use Nlists;\n+with Output; use Output;\n with Sinfo;  use Sinfo;\n with Stand;  use Stand;\n-with Output; use Output;\n \n package body Einfo is\n \n@@ -209,6 +209,8 @@ package body Einfo is\n    --    Privals_Chain                   Elist23\n    --    Protected_Operation             Node23\n \n+   --    Obsolescent_Warning             Node24\n+\n    --    Abstract_Interface_Alias        Node25\n    --    Abstract_Interfaces             Elist25\n    --    Current_Use_Clause              Node25\n@@ -220,7 +222,7 @@ package body Einfo is\n    --    Last_Assignment                 Node26\n    --    Overridden_Operation            Node26\n    --    Package_Instantiation           Node26\n-   --    Related_Interface               Node26\n+   --    Related_Type                    Node26\n    --    Static_Initialization           Node26\n \n    --    Wrapped_Entity                  Node27\n@@ -484,20 +486,39 @@ package body Einfo is\n    --    Is_Descendent_Of_Address        Flag223\n    --    Is_Raised                       Flag224\n    --    Is_Thunk                        Flag225\n-   --\n-   --    (unused)                        Flag226\n-   --    (unused)                        Flag227\n-   --    (unused)                        Flag228\n-   --    (unused)                        Flag229\n-   --    (unused)                        Flag230\n+   --    Is_Only_Out_Parameter           Flag226\n+   --    Referenced_As_Out_Parameter     Flag227\n+   --    Has_Thunks                      Flag228\n+   --    Can_Use_Internal_Rep            Flag229\n+   --    Has_Pragma_Inline_Always        Flag230\n+\n+   --    Renamed_In_Spec                 Flag231\n+   --    Implemented_By_Entry            Flag232\n+\n+   --    (unused)                        Flag233\n+   --    (unused)                        Flag234\n+   --    (unused)                        Flag235\n+   --    (unused)                        Flag236\n+   --    (unused)                        Flag237\n+   --    (unused)                        Flag238\n+   --    (unused)                        Flag239\n+\n+   --    (unused)                        Flag240\n+   --    (unused)                        Flag241\n+   --    (unused)                        Flag242\n+   --    (unused)                        Flag243\n+   --    (unused)                        Flag244\n+   --    (unused)                        Flag245\n+   --    (unused)                        Flag246\n+   --    (unused)                        Flag247\n \n    -----------------------\n    -- Local subprograms --\n    -----------------------\n \n    function Rep_Clause (Id : E; Rep_Name : Name_Id) return N;\n-   --  Returns the attribute definition clause whose name is Rep_Name. Returns\n-   --  Empty if not found.\n+   --  Returns the attribute definition clause for Id whose name is Rep_Name.\n+   --  Returns Empty if no matching attribute definition clause found for Id.\n \n    ----------------\n    -- Rep_Clause --\n@@ -1021,6 +1042,12 @@ package body Einfo is\n       return Node28 (Id);\n    end Extra_Formals;\n \n+   function Can_Use_Internal_Rep (Id : E) return B is\n+   begin\n+      pragma Assert (Ekind (Id) in Access_Subprogram_Type_Kind);\n+      return Flag229 (Id);\n+   end Can_Use_Internal_Rep;\n+\n    function Finalization_Chain_Entity (Id : E) return E is\n    begin\n       return Node19 (Id);\n@@ -1309,6 +1336,11 @@ package body Einfo is\n       return Flag157 (Id);\n    end Has_Pragma_Inline;\n \n+   function Has_Pragma_Inline_Always (Id : E) return B is\n+   begin\n+      return Flag230 (Id);\n+   end Has_Pragma_Inline_Always;\n+\n    function Has_Pragma_Pack (Id : E) return B is\n    begin\n       pragma Assert (Is_Record_Type (Id) or else Is_Array_Type (Id));\n@@ -1442,6 +1474,12 @@ package body Einfo is\n       return Flag30 (Base_Type (Id));\n    end Has_Task;\n \n+   function Has_Thunks (Id : E) return B is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Constant);\n+      return Flag228 (Id);\n+   end Has_Thunks;\n+\n    function Has_Unchecked_Union (Id : E) return B is\n    begin\n       return Flag123 (Base_Type (Id));\n@@ -1483,6 +1521,14 @@ package body Einfo is\n       return Node4 (Id);\n    end Homonym;\n \n+   function Implemented_By_Entry (Id : E) return B is\n+   begin\n+      pragma Assert\n+        (Ekind (Id) = E_Function\n+           or else Ekind (Id) = E_Procedure);\n+      return Flag232 (Id);\n+   end Implemented_By_Entry;\n+\n    function In_Package_Body (Id : E) return B is\n    begin\n       return Flag48 (Id);\n@@ -1821,6 +1867,12 @@ package body Einfo is\n       return Flag153 (Id);\n    end Is_Obsolescent;\n \n+   function Is_Only_Out_Parameter (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Formal (Id));\n+      return Flag226 (Id);\n+   end Is_Only_Out_Parameter;\n+\n    function Is_Optional_Parameter (Id : E) return B is\n    begin\n       pragma Assert (Is_Formal (Id));\n@@ -2320,6 +2372,11 @@ package body Einfo is\n       return Flag36 (Id);\n    end Referenced_As_LHS;\n \n+   function Referenced_As_Out_Parameter (Id : E) return B is\n+   begin\n+      return Flag227 (Id);\n+   end Referenced_As_Out_Parameter;\n+\n    function Referenced_Object (Id : E) return N is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -2345,18 +2402,24 @@ package body Einfo is\n       return Node15 (Id);\n    end Related_Instance;\n \n-   function Related_Interface (Id : E) return E is\n+   function Related_Type (Id : E) return E is\n    begin\n       pragma Assert\n         (Ekind (Id) = E_Component or else Ekind (Id) = E_Constant);\n       return Node26 (Id);\n-   end Related_Interface;\n+   end Related_Type;\n \n    function Renamed_Entity (Id : E) return N is\n    begin\n       return Node18 (Id);\n    end Renamed_Entity;\n \n+   function Renamed_In_Spec (Id : E) return B is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Package);\n+      return Flag231 (Id);\n+   end Renamed_In_Spec;\n+\n    function Renamed_Object (Id : E) return N is\n    begin\n       return Node18 (Id);\n@@ -3310,6 +3373,12 @@ package body Einfo is\n       Set_Node28 (Id, V);\n    end Set_Extra_Formals;\n \n+   procedure Set_Can_Use_Internal_Rep (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind (Id) in Access_Subprogram_Type_Kind);\n+      Set_Flag229 (Id, V);\n+   end Set_Can_Use_Internal_Rep;\n+\n    procedure Set_Finalization_Chain_Entity (Id : E; V : E) is\n    begin\n       Set_Node19 (Id, V);\n@@ -3616,6 +3685,11 @@ package body Einfo is\n       Set_Flag157 (Id, V);\n    end Set_Has_Pragma_Inline;\n \n+   procedure Set_Has_Pragma_Inline_Always (Id : E; V : B := True) is\n+   begin\n+      Set_Flag230 (Id, V);\n+   end Set_Has_Pragma_Inline_Always;\n+\n    procedure Set_Has_Pragma_Pack (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Array_Type (Id) or else Is_Record_Type (Id));\n@@ -3752,6 +3826,13 @@ package body Einfo is\n       Set_Flag30 (Id, V);\n    end Set_Has_Task;\n \n+   procedure Set_Has_Thunks (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Tag (Id)\n+        and then Ekind (Id) = E_Constant);\n+      Set_Flag228 (Id, V);\n+   end Set_Has_Thunks;\n+\n    procedure Set_Has_Unchecked_Union (Id : E; V : B := True) is\n    begin\n       pragma Assert (Base_Type (Id) = Id);\n@@ -3787,6 +3868,14 @@ package body Einfo is\n       Set_Node4 (Id, V);\n    end Set_Homonym;\n \n+   procedure Set_Implemented_By_Entry (Id : E; V : B := True) is\n+   begin\n+      pragma Assert\n+        (Ekind (Id) = E_Function\n+           or else Ekind (Id) = E_Procedure);\n+      Set_Flag232 (Id, V);\n+   end Set_Implemented_By_Entry;\n+\n    procedure Set_In_Package_Body (Id : E; V : B := True) is\n    begin\n       Set_Flag48 (Id, V);\n@@ -4150,6 +4239,12 @@ package body Einfo is\n       Set_Flag153 (Id, V);\n    end Set_Is_Obsolescent;\n \n+   procedure Set_Is_Only_Out_Parameter (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Out_Parameter);\n+      Set_Flag226 (Id, V);\n+   end Set_Is_Only_Out_Parameter;\n+\n    procedure Set_Is_Optional_Parameter (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Formal (Id));\n@@ -4288,7 +4383,9 @@ package body Einfo is\n \n    procedure Set_Is_Tag (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Nkind (Id) in N_Entity);\n+      pragma Assert\n+        (Ekind (Id) = E_Component\n+          or else Ekind (Id) = E_Constant);\n       Set_Flag78 (Id, V);\n    end Set_Is_Tag;\n \n@@ -4659,6 +4756,11 @@ package body Einfo is\n       Set_Flag36 (Id, V);\n    end Set_Referenced_As_LHS;\n \n+   procedure Set_Referenced_As_Out_Parameter (Id : E; V : B := True) is\n+   begin\n+      Set_Flag227 (Id, V);\n+   end Set_Referenced_As_Out_Parameter;\n+\n    procedure Set_Referenced_Object (Id : E; V : N) is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -4684,18 +4786,24 @@ package body Einfo is\n       Set_Node15 (Id, V);\n    end Set_Related_Instance;\n \n-   procedure Set_Related_Interface (Id : E; V : E) is\n+   procedure Set_Related_Type (Id : E; V : E) is\n    begin\n       pragma Assert\n         (Ekind (Id) = E_Component or else Ekind (Id) = E_Constant);\n       Set_Node26 (Id, V);\n-   end Set_Related_Interface;\n+   end Set_Related_Type;\n \n    procedure Set_Renamed_Entity (Id : E; V : N) is\n    begin\n       Set_Node18 (Id, V);\n    end Set_Renamed_Entity;\n \n+   procedure Set_Renamed_In_Spec (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Package);\n+      Set_Flag231 (Id, V);\n+   end Set_Renamed_In_Spec;\n+\n    procedure Set_Renamed_Object (Id : E; V : N) is\n    begin\n       Set_Node18 (Id, V);\n@@ -5927,7 +6035,7 @@ package body Einfo is\n \n    function Has_Foreign_Convention (Id : E) return B is\n    begin\n-      return Convention (Id) >= Foreign_Convention'First;\n+      return Convention (Id) in Foreign_Convention;\n    end Has_Foreign_Convention;\n \n    ---------------------------\n@@ -6014,28 +6122,6 @@ package body Einfo is\n       end if;\n    end Implementation_Base_Type;\n \n-   -----------------------\n-   -- Is_Always_Inlined --\n-   -----------------------\n-\n-   function Is_Always_Inlined (Id : E) return B is\n-      Item : Node_Id;\n-\n-   begin\n-      Item := First_Rep_Item (Id);\n-      while Present (Item) loop\n-         if Nkind (Item) = N_Pragma\n-           and then Get_Pragma_Id (Chars (Item)) = Pragma_Inline_Always\n-         then\n-            return True;\n-         end if;\n-\n-         Next_Rep_Item (Item);\n-      end loop;\n-\n-      return False;\n-   end Is_Always_Inlined;\n-\n    ---------------------\n    -- Is_Boolean_Type --\n    ---------------------\n@@ -6153,7 +6239,6 @@ package body Einfo is\n    begin\n       if Is_Type (Id)\n         and then Base_Type (Id) /= Root_Type (Id)\n-        and then not Is_Generic_Type (Id)\n         and then not Is_Class_Wide_Type (Id)\n       then\n          if not Is_Numeric_Type (Root_Type (Id)) then\n@@ -7146,6 +7231,7 @@ package body Einfo is\n       W (\"Elaboration_Entity_Required\",     Flag174 (Id));\n       W (\"Elaborate_Body_Desirable\",        Flag210 (Id));\n       W (\"Entry_Accepted\",                  Flag152 (Id));\n+      W (\"Can_Use_Internal_Rep\",            Flag229 (Id));\n       W (\"Finalize_Storage_Only\",           Flag158 (Id));\n       W (\"From_With_Type\",                  Flag159 (Id));\n       W (\"Function_Returns_With_DSP\",       Flag169 (Id));\n@@ -7184,6 +7270,7 @@ package body Einfo is\n       W (\"Has_Pragma_Controlled\",           Flag27  (Id));\n       W (\"Has_Pragma_Elaborate_Body\",       Flag150 (Id));\n       W (\"Has_Pragma_Inline\",               Flag157 (Id));\n+      W (\"Has_Pragma_Inline_Always\",        Flag230 (Id));\n       W (\"Has_Pragma_Pack\",                 Flag121 (Id));\n       W (\"Has_Pragma_Preelab_Init\",         Flag221 (Id));\n       W (\"Has_Pragma_Pure\",                 Flag203 (Id));\n@@ -7208,11 +7295,13 @@ package body Einfo is\n       W (\"Has_Stream_Size_Clause\",          Flag184 (Id));\n       W (\"Has_Subprogram_Descriptor\",       Flag93  (Id));\n       W (\"Has_Task\",                        Flag30  (Id));\n+      W (\"Has_Thunks\",                      Flag228 (Id));\n       W (\"Has_Unchecked_Union\",             Flag123 (Id));\n       W (\"Has_Unknown_Discriminants\",       Flag72  (Id));\n       W (\"Has_Up_Level_Access\",             Flag215 (Id));\n       W (\"Has_Volatile_Components\",         Flag87  (Id));\n       W (\"Has_Xref_Entry\",                  Flag182 (Id));\n+      W (\"Implemented_By_Entry\",            Flag232 (Id));\n       W (\"In_Package_Body\",                 Flag48  (Id));\n       W (\"In_Private_Part\",                 Flag45  (Id));\n       W (\"In_Use\",                          Flag8   (Id));\n@@ -7274,6 +7363,7 @@ package body Einfo is\n       W (\"Is_Non_Static_Subtype\",           Flag109 (Id));\n       W (\"Is_Null_Init_Proc\",               Flag178 (Id));\n       W (\"Is_Obsolescent\",                  Flag153 (Id));\n+      W (\"Is_Only_Out_Parameter\",           Flag226 (Id));\n       W (\"Is_Optional_Parameter\",           Flag134 (Id));\n       W (\"Is_Overriding_Operation\",         Flag39  (Id));\n       W (\"Is_Package_Body_Entity\",          Flag160 (Id));\n@@ -7329,6 +7419,8 @@ package body Einfo is\n       W (\"Reachable\",                       Flag49  (Id));\n       W (\"Referenced\",                      Flag156 (Id));\n       W (\"Referenced_As_LHS\",               Flag36  (Id));\n+      W (\"Referenced_As_Out_Parameter\",     Flag227 (Id));\n+      W (\"Renamed_In_Spec\",                 Flag231 (Id));\n       W (\"Requires_Overriding\",             Flag213 (Id));\n       W (\"Return_Present\",                  Flag54  (Id));\n       W (\"Returns_By_Ref\",                  Flag90  (Id));\n@@ -8284,7 +8376,7 @@ package body Einfo is\n       case Ekind (Id) is\n          when E_Component                                  |\n               E_Constant                                   =>\n-            Write_Str (\"Related_Interface\");\n+            Write_Str (\"Related_Type\");\n \n          when E_Generic_Package                            |\n               E_Package                                    =>"}, {"sha": "5b43e1f38eac4966f5d01a687eedf82ec24b82ba", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 277, "deletions": 149, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce0bead308a024b906092bb0395b7ed67c53b56e/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce0bead308a024b906092bb0395b7ed67c53b56e/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ce0bead308a024b906092bb0395b7ed67c53b56e", "patch": "@@ -1031,49 +1031,76 @@ package Einfo is\n \n --    Extra_Formal (Node15)\n --       Present in formal parameters in the non-generic case. Certain\n---       parameters require extra implicit information to be passed\n---       (e.g. the flag indicating if an unconstrained variant record\n---       argument is constrained, and the accessibility level for\n---       access parameters. See description of Extra_Constrained,\n---       Extra_Accessibility fields for further details. Extra formal\n---       parameters are constructed to represent these values, and\n---       chained to the end of the list of formals using the\n---       Extra_Formal field (i.e. the Extra_Formal field of the last\n---       \"real\" formal points to the first extra formal, and the\n---       Extra_Formal field of each extra formal points to the next\n---       one, with Empty indicating the end of the list of extra\n---       formals.\n+--       parameters require extra implicit information to be passed (e.g. the\n+--       flag indicating if an unconstrained variant record argument is\n+--       constrained, and the accessibility level for access parameters. See\n+--       description of Extra_Constrained, Extra_Accessibility fields for\n+--       further details. Extra formal parameters are constructed to represent\n+--       these values, and chained to the end of the list of formals using the\n+--       Extra_Formal field (i.e. the Extra_Formal field of the last \"real\"\n+--       formal points to the first extra formal, and the Extra_Formal field of\n+--       each extra formal points to the next one, with Empty indicating the\n+--       end of the list of extra formals.\n \n --    Extra_Formals (Node28)\n --       Applies to subprograms and subprogram types, and also in entries\n --       and entry families. Returns first extra formal of the subprogram\n --       or entry. Returns Empty if there are no extra formals.\n \n --    Extra_Accessibility (Node13)\n---       Present in formal parameters in the non-generic case if\n---       expansion is active. Normally Empty, but if a parameter is\n---       one for which a dynamic accessibility check is required, then\n---       an extra formal of type Natural is created (see description\n---       of field Extra_Formal), and the Extra_Accessibility field of\n---       the formal parameter points to the entity for this extra\n---       formal. Also present in variables when compiling receiving\n---       stubs. In this case, a non Empty value means that this\n---       variable's accessibility depth has been transmitted by the\n---       caller and must be retrieved through the entity designed by\n---       this field instead of being computed.\n+--       Present in formal parameters in the non-generic case if expansion is\n+--       active. Normally Empty, but if a parameter is one for which a dynamic\n+--       accessibility check is required, then an extra formal of type\n+--       Natural is created (see description of field Extra_Formal), and the\n+--       Extra_Accessibility field of the formal parameter points to the entity\n+--       for this extra formal. Also present in variables when compiling\n+--       receiving stubs. In this case, a non Empty value means that this\n+--       variable's accessibility depth has been transmitted by the caller and\n+--       must be retrieved through the entity designed by this field instead of\n+--       being computed.\n \n --    Extra_Constrained (Node23)\n---       Present in formal parameters in the non-generic case if\n---       expansion is active. Normally Empty, but if a parameter is\n---       one for which a dynamic indication of its constrained status\n---       is required, then an extra formal of type Boolean is created\n---       (see description of field Extra_Formal), and the\n---       Extra_Constrained field of the formal parameter points to the\n---       entity for this extra formal. Also present in variables when\n---       compiling receiving stubs. In this case, a non empty value\n---       means that this variable's constrained status has been\n---       transmitted by the caller and must be retrieved through the\n---       entity designed by this field instead of being computed.\n+--       Present in formal parameters in the non-generic case if expansion is\n+--       active. Normally Empty, but if a parameter is one for which a dynamic\n+--       indication of its constrained status is required, then an extra formal\n+--       of type Boolean is created (see description of field Extra_Formal),\n+--       and the Extra_Constrained field of the formal parameter points to the\n+--       entity for this extra formal. Also present in variables when compiling\n+--       receiving stubs. In this case, a non empty value means that this\n+--       variable's constrained status has been transmitted by the caller and\n+--       must be retrieved through the entity designed by this field instead of\n+--       being computed.\n+\n+--    Can_Use_Internal_Rep (Flag229)\n+--       Present in Access_Subprogram_Type_Kind nodes. This flag is set by\n+--       the front end and used by the back end. False means that the back end\n+--       must represent the type in the same way as Convention-C types (and\n+--       other foreign-convention types). On many targets, this means that the\n+--       back end will use dynamically generated trampolines for nested\n+--       subprograms. True means that the back end can represent the type in\n+--       some internal way. On the aforementioned targets, this means that the\n+--       back end will not use dynamically generated trampolines. This flag\n+--       must be False if Has_Foreign_Convention is True; otherwise, the front\n+--       end is free to set the policy.\n+--\n+--       Setting this False in all cases corresponds to the traditional back\n+--       end strategy, where all access-to-subprogram types are represented the\n+--       same way, independent of the Convention. See also\n+--       Always_Compatible_Rep in Targparm.\n+--\n+--       Efficiency note: On targets that use dynamically generated\n+--       trampolines, False generally favors efficiency of top-level\n+--       subprograms, whereas True generally favors efficiency of nested\n+--       ones. On other targets, this flag has little or no effect on\n+--       efficiency. The front end should take this into account. In\n+--       particular, pragma Favor_Top_Level gives a hint that the flag should\n+--       be False.\n+--\n+--       Note: We considered using Convention-C for this purpose, but we need\n+--       this separate flag, because Convention-C implies that for\n+--       P'[Unrestricted_]Access, P also have convention C. Sometimes we want\n+--       to have Can_Use_Internal_Rep False for an access type, but allow P to\n+--       have convention Ada.\n \n --    Finalization_Chain_Entity (Node19)\n --       Present in scopes that can have finalizable entities (blocks,\n@@ -1162,13 +1189,12 @@ package Einfo is\n --       corresponding to the specified parameter.\n \n --    First_Private_Entity (Node16)\n---       Present in all entities containing private parts (packages,\n---       protected types and subtypes, task types and subtypes). The\n---       entities on the entity chain are in order of declaration, so the\n---       entries for private entities are at the end of the chain. This\n---       field points to the first entity for the private part. It is\n---       Empty if there are no entities declared in the private part or\n---       if there is no private part.\n+--       Present in all entities containing private parts (packages, protected\n+--       types and subtypes, task types and subtypes). The entities on the\n+--       entity chain are in order of declaration, so the entries for private\n+--       entities are at the end of the chain. This field points to the first\n+--       entity for the private part. It is Empty if there are no entities\n+--       declared in the private part or if there is no private part.\n \n --    First_Rep_Item (Node6)\n --       Present in all entities. If non-empty, points to a linked list of\n@@ -1180,11 +1206,17 @@ package Einfo is\n --       kind of rep item on the chain, in which case it is the first one\n --       that applies to the entity.\n --\n+--       Note: pragmas that can apply to more than one overloadable entity,\n+--       (Convention, Interface, Inline, Inline_Always, Import, Export,\n+--       External) are never present on this chain when they apply to\n+--       overloadable entities, since it is impossible for a given pragma\n+--       to be on more than one chain at a time.\n+--\n --       For most representation items, the representation information is\n---       reflected in other fields and flags in the entity. For example if\n---       a record representation clause is present, the component entities\n---       reflect the specified information. However, there are some items\n---       that are only reflected in the chain. These include:\n+--       reflected in other fields and flags in the entity. For example if a\n+--       record representation clause is present, the component entities\n+--       reflect the specified information. However, there are some items that\n+--       are only reflected in the chain. These include:\n --\n --          Alignment attribute definition clause\n --          Machine_Attribute pragma\n@@ -1226,9 +1258,9 @@ package Einfo is\n --       stored in actual objects of the type.\n \n --    First_Subtype (synthesized)\n---       Applies to all types and subtypes. For types, yields the first\n---       subtype of the type. For subtypes, yields the first subtype of\n---       the base type of the subtype.\n+--       Applies to all types and subtypes. For types, yields the first subtype\n+--       of the type. For subtypes, yields the first subtype of the base type\n+--       of the subtype.\n \n --    First_Tag_Component (synthesized)\n --       Applies to tagged record types, returns the entity for the first\n@@ -1337,10 +1369,10 @@ package Einfo is\n --       reduce the required size. For example, a type with a range of 1..2\n --       takes one bit, using 0 to represent 1 and 1 to represent 2.\n --\n---       Note that in the object and component cases, the flag is only set\n---       if the type is unbiased, but the object specifies a smaller size\n---       than the size of the type, forcing biased representation for the\n---       object, but the subtype is still an unbiased type.\n+--       Note that in the object and component cases, the flag is only set if\n+--       the type is unbiased, but the object specifies a smaller size than the\n+--       size of the type, forcing biased representation for the object, but\n+--       the subtype is still an unbiased type.\n \n --    Has_Completion (Flag26)\n --       Present in all entities that require a completion (functions,\n@@ -1440,10 +1472,10 @@ package Einfo is\n --       linear elaboration of front-end inlining.\n \n --    Has_Fully_Qualified_Name (Flag173)\n---       Present in all entities. Set True if the name in the Chars field\n---       has been replaced by the fully qualified name, as used for debug\n---       output. See Exp_Dbug for a full description of the use of this\n---       flag and also the related flag Has_Qualified_Name.\n+--       Present in all entities. Set True if the name in the Chars field has\n+--       been replaced by the fully qualified name, as used for debug output.\n+--       See Exp_Dbug for a full description of the use of this flag and also\n+--       the related flag Has_Qualified_Name.\n \n --    Has_Gigi_Rep_Item (Flag82)\n --       Present in all entities. Set if the rep item chain (referenced by\n@@ -1555,14 +1587,18 @@ package Einfo is\n --       pragma Elaborate_Body applies to the compilation unit.\n \n --    Has_Pragma_Inline (Flag157)\n---       Present in all entities. Set for functions and procedures for which\n---       a pragma Inline or Inline_Always applies to the subprogram. Note\n---       that this flag can be set even if Is_Inlined is not set. This\n---       happens for pragma Inline (if Inline_Active is False). In other\n---       words, the flag Has_Pragma_Inline represents the formal semantic\n---       status, and is used for checking semantic correctness.\n---       The flag Is_Inlined indicates whether inlining is actually active\n---       for the entity.\n+--       Present in all entities. Set for functions and procedures for which a\n+--       pragma Inline or Inline_Always applies to the subprogram. Note that\n+--       this flag can be set even if Is_Inlined is not set. This happens for\n+--       pragma Inline (if Inline_Active is False). In other words, the flag\n+--       Has_Pragma_Inline represents the formal semantic status, and is used\n+--       for checking semantic correctness. The flag Is_Inlined indicates\n+--       whether inlining is actually active for the entity.\n+\n+--    Has_Pragma_Inline_Always (Flag230)\n+--       Present in all entities. Set for functions and procedures for which a\n+--       pragma Inline_Always applies. Note that if this flag is set, the flag\n+--       Has_Pragma_Inline is also set.\n \n --    Has_Pragma_Pack (Flag121) [implementation base type only]\n --       Present in all entities. If set, indicates that a valid pragma Pack\n@@ -1707,6 +1743,10 @@ package Einfo is\n --       such an object must create the required tasks. Note: the flag is not\n --       set on access types, even if they designate an object that Has_Task.\n \n+--    Has_Thunks (Flag228)\n+--       Applies to E_Constant entities marked Is_Tag. True for secondary tag\n+--       referencing a dispatch table whose contents are pointers to thunks.\n+\n --    Has_Unchecked_Union (Flag123) [base type only]\n --       Present in all type entities. Set on unchecked unions themselves\n --       and (recursively) on any composite type which has a component for\n@@ -1729,15 +1769,15 @@ package Einfo is\n --       inherited in certain contexts.\n \n --    Has_Volatile_Components (Flag87) [implementation base type only]\n---       Present in all types and objects. Set only for an array type or\n---       array object if a valid pragma Volatile_Components or a valid\n---       pragma Atomic_Components applies to the type or object. Note that\n---       in the case of an object, this flag is only set on the object if\n---       there was an explicit pragma for the object. In other words, the\n---       proper test for whether an object has volatile components is to\n---       see if either the object or its base type has this flag set. Note\n---       that in the case of a type the pragma will be chained to the rep\n---       item chain of the first subtype in the usual manner.\n+--       Present in all types and objects. Set only for an array type or array\n+--       object if a valid pragma Volatile_Components or a valid pragma\n+--       Atomic_Components applies to the type or object. Note that in the case\n+--       of an object, this flag is only set on the object if there was an\n+--       explicit pragma for the object. In other words, the proper test for\n+--       whether an object has volatile components is to see if either the\n+--       object or its base type has this flag set. Note that in the case of a\n+--       type the pragma will be chained to the rep item chain of the first\n+--       subtype in the usual manner.\n \n --    Has_Xref_Entry (Flag182)\n --       Present in all entities. Set if an entity has an entry in the Xref\n@@ -1763,13 +1803,16 @@ package Einfo is\n --       resolution and for the generation of debugging information.\n \n --    Implementation_Base_Type (synthesized)\n---       Applies to all types. Similar to Base_Type, but never returns a\n---       private type when applied to a non-private type. Instead in this case,\n---       it always returns the Underlying_Type of the base type, so that we\n---       still have a concrete type. Note: it is allowed to apply\n---       Implementation_Base_Type to other than a type, in which case it simply\n+--       Applies to all entities. For types, similar to Base_Type, but never\n+--       returns a private type when applied to a non-private type. Instead in\n+--       this case, it always returns the Underlying_Type of the base type, so\n+--       that we still have a concrete type. For entities other than types,\n --       returns the entity unchanged.\n \n+--    Implemented_By_Entry (Flag232)\n+--       Applies to functions and procedures. Set if pragma Implemented_By_\n+--       Entry is applied on the subprogram entity.\n+\n --    In_Package_Body (Flag48)\n --       Present in package entities. Set on the entity that denotes the\n --       package (the defining occurrence of the package declaration) while\n@@ -1802,15 +1845,14 @@ package Einfo is\n --       is present (since it is meaningless in this case).\n --\n --       An additional special case usage of this field is in JGNAT for\n---       E_Component and E_Discriminant. JGNAT allows these entities to\n---       be imported by specifying pragma Import within a component's\n---       containing record definition. This supports interfacing to\n---       object fields defined within Java classes, and such pragmas\n---       are generated by the jvm2ada binding generator tool whenever\n---       it processes classes with public object fields. A pragma Import\n---       for a component can define the External_Name of the imported\n---       Java field (which is generally needed, because Java names are\n---       case sensitive).\n+--       E_Component and E_Discriminant. JGNAT allows these entities to be\n+--       imported by specifying pragma Import within a component's containing\n+--       record definition. This supports interfacing to object fields defined\n+--       within Java classes, and such pragmas are generated by the jvm2ada\n+--       binding generator tool whenever it processes classes with public\n+--       object fields. A pragma Import for a component can define the\n+--       External_Name of the imported Java field (which is generally needed,\n+--       because Java names are case sensitive).\n --\n --    In_Use (Flag8)\n --       Present in packages and types. Set when analyzing a use clause for\n@@ -1826,14 +1868,6 @@ package Einfo is\n --    Is_Abstract_Type (Flag146)\n --       Present in all types. Set for abstract types.\n \n---    Is_Local_Anonymous_Access (Flag194)\n---       Present in access types. Set for an anonymous access type to indicate\n---       that the type is created for a record component with an access\n---       definition, an array component, or a stand-alone object. Such\n---       anonymous types have an accessibility level equal to that of the\n---       declaration in which they appear, unlike the anonymous access types\n---       that are created for access parameters and access discriminants.\n-\n --    Is_Access_Constant (Flag69)\n --       Present in access types and subtypes. Indicates that the keyword\n --       constant was present in the access type definition.\n@@ -1855,10 +1889,6 @@ package Einfo is\n --       Present in objects whose declarations carry the keyword aliased,\n --       and on record components that have the keyword.\n \n---    Is_Always_Inlined (synthesized)\n---       Present in subprograms. True if there is a pragma Inline_Always for\n---       the subprogram.\n-\n --    Is_AST_Entry (Flag132)\n --       Present in entry entities. Set if a valid pragma AST_Entry applies\n --       to the entry. This flag can only be set in OpenVMS versions of GNAT.\n@@ -1880,13 +1910,13 @@ package Einfo is\n --       if a pragma Asynchronous applies to the entity.\n \n --    Is_Bit_Packed_Array (Flag122) [implementation base type only]\n---       Present in all entities. This flag is set for a packed array\n---       type that is bit packed (i.e. the component size is known by the\n---       front end and is in the range 1-7, 9-15, 17-31, or 33-63). Is_Packed\n---       is always set if Is_Bit_Packed_Array is set, but it is possible for\n---       Is_Packed to be set without Is_Bit_Packed_Array for the case of an\n---       array having one or more index types that are enumeration types\n---       with non-standard enumeration representations.\n+--       Present in all entities. This flag is set for a packed array type that\n+--       is bit packed (i.e. the component size is known by the front end and\n+--       is in the range 1-7, 9-15, 17-31, or 33-63). Is_Packed is always set\n+--       if Is_Bit_Packed_Array is set, but it is possible for Is_Packed to be\n+--       set without Is_Bit_Packed_Array for the case of an array having one or\n+--       more index types that are enumeration types with non-standard\n+--       enumeration representations.\n \n --    Is_Boolean_Type (synthesized)\n --       Applies to all entities, true for boolean types and subtypes,\n@@ -1951,8 +1981,8 @@ package Einfo is\n --       for further details.\n \n --    Is_Concurrent_Type (synthesized)\n---       Applies to all entities, true for task types and subtypes and\n---       for protected types and subtypes.\n+--       Applies to all entities, true for task types and subtypes and for\n+--       protected types and subtypes.\n \n --    Is_Constrained (Flag12)\n --       Present in types or subtypes which may have index, discriminant\n@@ -2077,10 +2107,10 @@ package Einfo is\n --       Present in all entities. Set for generic formal subprograms.\n \n --    Is_For_Access_Subtype (Flag118)\n---       Present in E_Private_Subtype and E_Record_Subtype entities.\n---       Means the sole purpose of the type is to be designated by an\n---       Access_Subtype and hence should not be expanded into components\n---       because the type may not have been found or frozen yet.\n+--       Present in E_Private_Subtype and E_Record_Subtype entities. Means the\n+--       sole purpose of the type is to be designated by an Access_Subtype and\n+--       hence should not be expanded into components because the type may not\n+--       have been found or frozen yet.\n \n --    Is_Frozen (Flag4)\n --       Present in all type and subtype entities. Set if type or subtype has\n@@ -2176,14 +2206,23 @@ package Einfo is\n --    Is_Internal (Flag17)\n --       Present in all entities. Set to indicate an entity created during\n --       semantic processing (e.g. an implicit type, or a temporary). The\n---       current uses of this flag are: 1) to indicate that internal entities\n---       (such as temporaries generated for the result of an inlined function\n---       call or dummy variables generated for the debugger) need not be\n---       initialized, even when scalars are initialized or normalized, and 2)\n---       to indicate object declarations generated by the expander that are\n---       implicitly imported or exported, so that they can be appropriately\n---       marked in Sprint output.\n-\n+--       current uses of this flag are:\n+--\n+--         1) Internal entities (such as temporaries generated for the result\n+--         of an inlined function call or dummy variables generated for the\n+--         debugger). Set to indicate that they need not be initialized, even\n+--         when scalars are initialized or normalized;\n+--\n+--         2) Predefined primitives of tagged types. Set to mark that they\n+--         have specific properties: first they are primitives even if they\n+--         are not defined in the type scope (the freezing point is not\n+--         necessarily in the same scope), and second the predefined equality\n+--         can be overridden by a user-defined equality, no body will be\n+--         generated in this case.\n+--\n+--         3) Object declarations generated by the expander that are implicitly\n+--         imported or exported so that they can be marked in Sprint output.\n+--\n --    Is_Interrupt_Handler (Flag89)\n --       Present in procedures. Set if a pragma Interrupt_Handler applies\n --       to the procedure. The procedure must be parameterless, and on all\n@@ -2297,6 +2336,14 @@ package Einfo is\n --       composite containing a limited component, or a subtype of any of\n --       these types).\n \n+--    Is_Local_Anonymous_Access (Flag194)\n+--       Present in access types. Set for an anonymous access type to indicate\n+--       that the type is created for a record component with an access\n+--       definition, an array component, or a stand-alone object. Such\n+--       anonymous types have an accessibility level equal to that of the\n+--       declaration in which they appear, unlike the anonymous access types\n+--       that are created for access parameters and access discriminants.\n+\n --    Is_Machine_Code_Subprogram (Flag137)\n --       Present in subprogram entities. Set to indicate that the subprogram\n --       is a machine code subprogram (i.e. its body includes at least one\n@@ -2343,6 +2390,12 @@ package Einfo is\n --       Present in all entities. Set for any entity for which a valid pragma\n --       Obsolescent applies.\n \n+--    Is_Only_Out_Parameter (Flag226)\n+--       Present in formal parameter entities. Set if this parameter is the\n+--       only OUT parameter for this formal part. If there is more than one\n+--       out parameter, or if there is some other IN OUT parameter then this\n+--       flag is not set in any of them. Used in generation of warnings.\n+\n --    Is_Optional_Parameter (Flag134)\n --       Present in parameter entities. Set if the parameter is specified as\n --       optional by use of a First_Optional_Parameter argument to one of the\n@@ -2568,10 +2621,10 @@ package Einfo is\n --       interface.\n \n --    Is_Tag (Flag78)\n---       Present in E_Component entities. For regular tagged type this flag is\n---       set on the tag component (whose name is Name_uTag) and for CPP_Class\n---       tagged types, this flag marks the pointer to the main vtable (i.e. the\n---       one to be extended by derivation)\n+--       Present in E_Component and E_Constant entities. For regular tagged\n+--       type this flag is set on the tag component (whose name is Name_uTag)\n+--       and for CPP_Class tagged types, this flag marks the pointer to the\n+--       main vtable (i.e. the one to be extended by derivation).\n \n --    Is_Tagged_Type (Flag55)\n --       Present in all entities. Set for an entity for a tagged type.\n@@ -2593,8 +2646,8 @@ package Einfo is\n --       at run-time thunks displace the pointer to the object (pointer named\n --       \"this\" in the C++ terminology) from a secondary dispatch table to the\n --       primary dispatch table associated with a given tagged type. Set by\n---       Expand_Interface_Thunk and used by Expand_Call to handle extra\n---       actuals associated with accessibility level.\n+--       Expand_Interface Thunk and used by Expand_Call to handle extra actuals\n+--       associated with accessibility level.\n \n --    Is_True_Constant (Flag163)\n --       This flag applies to all entities for constants and variables. Set\n@@ -3163,10 +3216,11 @@ package Einfo is\n --       which a goto to that label is legal.\n \n --    Referenced (Flag156)\n---       Present in all entities. Set if the entity is referenced, except\n---       for the case of an appearence of a simple variable, that is not a\n---       renaming, as the left side of an assignment in which case the flag\n---       Referenced_As_LHS is set instead.\n+--       Present in all entities. Set if the entity is referenced, except for\n+--       the case of an appearence of a simple variable that is not a renaming\n+--       as the left side of an assignment in which case Referenced_As_LHS is\n+--       set instead, or a similar appearence as an out parameter actual, in\n+--       which case As_Out_Parameter_Parameter is set.\n \n --    Referenced_As_LHS (Flag36):\n --       Present in all entities. This flag is set instead of Referenced if a\n@@ -3175,6 +3229,13 @@ package Einfo is\n --       we have a separate warning for variables that are only assigned and\n --       never read.\n \n+--    Referenced_As_Out_Parameter (Flag227):\n+--       Present in all entities. This flag is set instead of Referenced if a\n+--       simple variable that is not a renaming appears as an actual for an out\n+--       formal. The reason we distinguish this kind of reference is that\n+--       we have a separate warning for variables that are only assigned and\n+--       never read, and out parameters are a special case.\n+\n --    Referenced_Object (Node10)\n --       Present in all type entities. Set non-Empty only for type entities\n --       constructed for unconstrained objects, or objects that depend on\n@@ -3201,16 +3262,25 @@ package Einfo is\n --       wrapper package, but for debugging purposes its external symbol\n --       must correspond to the name and scope of the related instance.\n \n---    Related_Interface (Node26)\n+--    Related_Type (Node26)\n --       Present in components and constants associated with dispatch tables.\n---       Set to point to the entity of the associated interface type.\n+--       Set to point to the entity of the associated tagged type or interface\n+--       type.\n \n --    Renamed_Entity (Node18)\n --       Present in exceptions, packages, subprograms and generic units. Set\n --       for entities that are defined by a renaming declaration. Denotes the\n --       renamed entity, or transititively the ultimate renamed entity if\n --       there is a chain of renaming declarations. Empty if no renaming.\n \n+--    Renamed_In_Spec (Flag231)\n+\n+--       Present in package entities. If a package renaming occurs within\n+--       a package spec, then this flag is set on the renamed package. The\n+--       purpose is to prevent a warning about unused entities in the renamed\n+--       package. Such a warning would be inappropriate since clients of the\n+--       package can see the entities in the package via the renaming.\n+\n --    Renamed_Object (Node18)\n --       Present in all objects (constants, variables, components, formal\n --       parameters, generic formal parameters, and loop parameters).\n@@ -3575,15 +3645,20 @@ package Einfo is\n    -- Access Kinds --\n    ------------------\n \n-   --  The following five entity kinds are introduced by the corresponding\n-   --  type definitions:\n+   --  The following entity kinds are introduced by the corresponding type\n+   --  definitions:\n \n    --    E_Access_Type,\n    --    E_General_Access_Type,\n+   --    E_Access_Subprogram_Type,\n    --    E_Anonymous_Access_Subprogram_Type,\n+   --    E_Access_Protected_Subprogram_Type,\n    --    E_Anonymous_Access_Protected_Subprogram_Type\n    --    E_Anonymous_Access_Type.\n \n+   --  E_Access_Subtype is for an access subtype created by a subtype\n+   --  declaration.\n+\n    --  In addition, we define the kind E_Allocator_Type to label\n    --  allocators. This is because special resolution rules apply to this\n    --  construct. Eventually the constructs are labeled with the access\n@@ -4038,6 +4113,12 @@ package Einfo is\n    --  E_Anonymous_Access_Protected_Subprogram_Type\n        E_Anonymous_Access_Type;\n \n+   subtype Access_Subprogram_Type_Kind is Entity_Kind range\n+       E_Access_Subprogram_Type ..\n+   --  E_Anonymous_Access_Subprogram_Type\n+   --  E_Access_Protected_Subprogram_Type\n+       E_Anonymous_Access_Protected_Subprogram_Type;\n+\n    subtype Access_Protected_Kind       is Entity_Kind range\n       E_Access_Protected_Subprogram_Type ..\n       E_Anonymous_Access_Protected_Subprogram_Type;\n@@ -4388,6 +4469,7 @@ package Einfo is\n    --    Has_Persistent_BSS                  (Flag188)\n    --    Has_Pragma_Elaborate_Body           (Flag150)\n    --    Has_Pragma_Inline                   (Flag157)\n+   --    Has_Pragma_Inline_Always            (Flag230)\n    --    Has_Pragma_Pack                     (Flag121)  (base type only)\n    --    Has_Pragma_Pure                     (Flag203)\n    --    Has_Pragma_Pure_Function            (Flag179)\n@@ -4450,6 +4532,7 @@ package Einfo is\n    --    No_Return                           (Flag113)\n    --    Referenced                          (Flag156)\n    --    Referenced_As_LHS                   (Flag36)\n+   --    Referenced_As_Out_Parameter         (Flag227)\n    --    Suppress_Elaboration_Warnings       (Flag148)\n    --    Suppress_Style_Checks               (Flag165)\n    --    Suppress_Value_Tracking_On_Call     (Flag217)\n@@ -4554,12 +4637,14 @@ package Einfo is\n    --    Equivalent_Type                     (Node18)\n    --    Directly_Designated_Type            (Node20)\n    --    Needs_No_Actuals                    (Flag22)\n+   --    Can_Use_Internal_Rep                (Flag229)\n    --        (plus type attributes)\n \n    --  E_Access_Subprogram_Type\n    --    Equivalent_Type                     (Node18)   (remote types only)\n    --    Directly_Designated_Type            (Node20)\n    --    Needs_No_Actuals                    (Flag22)\n+   --    Can_Use_Internal_Rep                (Flag229)\n    --        (plus type attributes)\n \n    --  E_Access_Type\n@@ -4571,8 +4656,8 @@ package Einfo is\n    --    Associated_Final_Chain              (Node23)\n    --    Has_Pragma_Controlled               (Flag27)   (base type only)\n    --    Has_Storage_Size_Clause             (Flag23)   (base type only)\n-   --    Is_Local_Anonymous_Access           (Flag194)\n    --    Is_Access_Constant                  (Flag69)\n+   --    Is_Local_Anonymous_Access           (Flag194)\n    --    Is_Pure_Unit_Access_Type            (Flag189)\n    --    No_Pool_Assigned                    (Flag131)  (base type only)\n    --    No_Strict_Aliasing                  (Flag136)  (base type only)\n@@ -4588,6 +4673,11 @@ package Einfo is\n \n    --  E_Anonymous_Access_Subprogram_Type\n    --  E_Anonymous_Access_Protected_Subprogram_Type\n+   --    Storage_Size_Variable               (Node15)   ??? is this needed ???\n+   --    Directly_Designated_Type            (Node20)\n+   --    Can_Use_Internal_Rep                (Flag229)\n+   --    (plus type attributes)\n+\n    --  E_Anonymous_Access_Type\n    --    Storage_Size_Variable               (Node15)   ??? is this needed ???\n    --    Directly_Designated_Type            (Node20)\n@@ -4652,7 +4742,7 @@ package Einfo is\n    --    Original_Record_Component           (Node22)\n    --    Protected_Operation                 (Node23)\n    --    DT_Offset_To_Top_Func               (Node25)\n-   --    Related_Interface                   (Node26)\n+   --    Related_Type                        (Node26)\n    --    Has_Biased_Representation           (Flag139)\n    --    Has_Per_Object_Constraint           (Flag154)\n    --    Is_Atomic                           (Flag85)\n@@ -4676,11 +4766,12 @@ package Einfo is\n    --    Renamed_Object                      (Node18)\n    --    Size_Check_Code                     (Node19)   (constants only)\n    --    Interface_Name                      (Node21)\n-   --    Related_Interface                   (Node26)   (constants only)\n+   --    Related_Type                        (Node26)   (constants only)\n    --    Has_Alignment_Clause                (Flag46)\n    --    Has_Atomic_Components               (Flag86)\n    --    Has_Biased_Representation           (Flag139)\n    --    Has_Completion                      (Flag26)   (constants only)\n+   --    Has_Thunks                          (Flag228)  (constants only)\n    --    Has_Size_Clause                     (Flag29)\n    --    Has_Up_Level_Access                 (Flag215)\n    --    Has_Volatile_Components             (Flag87)\n@@ -4841,6 +4932,7 @@ package Einfo is\n    --    Has_Nested_Block_With_Handler       (Flag101)\n    --    Has_Recursive_Call                  (Flag143)\n    --    Has_Subprogram_Descriptor           (Flag93)\n+   --    Implemented_By_Entry                (Flag232)  (non-generic case only)\n    --    Is_Abstract_Subprogram              (Flag19)   (non-generic case only)\n    --    Is_Called                           (Flag102)  (non-generic case only)\n    --    Is_Constructor                      (Flag76)\n@@ -4920,6 +5012,7 @@ package Einfo is\n    --    Last_Assignment                     (Node26)   (OUT, IN-OUT only)\n    --    Has_Initial_Value                   (Flag219)\n    --    Is_Controlling_Formal               (Flag97)\n+   --    Is_Only_Out_Parameter               (Flag226)\n    --    Is_Optional_Parameter               (Flag134)\n    --    Low_Bound_Known                     (Flag205)\n    --    Is_Return_Object                    (Flag209)\n@@ -5027,6 +5120,7 @@ package Einfo is\n    --    Is_Private_Descendant               (Flag53)\n    --    Is_Visible_Child_Unit               (Flag116)\n    --    Is_Wrapper_Package                  (synth)    (non-generic case only)\n+   --    Renamed_In_Spec                     (Flag231)  (non-generic case only)\n    --    Scope_Depth                         (synth)\n    --    Static_Elaboration_Desired          (Flag77)   (non-generic case only)\n \n@@ -5096,6 +5190,7 @@ package Einfo is\n    --    Has_Master_Entity                   (Flag21)\n    --    Has_Nested_Block_With_Handler       (Flag101)\n    --    Has_Subprogram_Descriptor           (Flag93)\n+   --    Implemented_By_Entry                (Flag232)  (non-generic case only)\n    --    Is_Visible_Child_Unit               (Flag116)\n    --    Is_Abstract_Subprogram              (Flag19)   (non-generic case only)\n    --    Is_Asynchronous                     (Flag81)\n@@ -5626,6 +5721,7 @@ package Einfo is\n    function Extra_Constrained                   (Id : E) return E;\n    function Extra_Formal                        (Id : E) return E;\n    function Extra_Formals                       (Id : E) return E;\n+   function Can_Use_Internal_Rep                (Id : E) return B;\n    function Finalization_Chain_Entity           (Id : E) return E;\n    function Finalize_Storage_Only               (Id : E) return B;\n    function First_Entity                        (Id : E) return E;\n@@ -5680,6 +5776,7 @@ package Einfo is\n    function Has_Pragma_Controlled               (Id : E) return B;\n    function Has_Pragma_Elaborate_Body           (Id : E) return B;\n    function Has_Pragma_Inline                   (Id : E) return B;\n+   function Has_Pragma_Inline_Always            (Id : E) return B;\n    function Has_Pragma_Pack                     (Id : E) return B;\n    function Has_Pragma_Preelab_Init             (Id : E) return B;\n    function Has_Pragma_Pure                     (Id : E) return B;\n@@ -5703,12 +5800,14 @@ package Einfo is\n    function Has_Stream_Size_Clause              (Id : E) return B;\n    function Has_Subprogram_Descriptor           (Id : E) return B;\n    function Has_Task                            (Id : E) return B;\n+   function Has_Thunks                          (Id : E) return B;\n    function Has_Unchecked_Union                 (Id : E) return B;\n    function Has_Unknown_Discriminants           (Id : E) return B;\n    function Has_Volatile_Components             (Id : E) return B;\n    function Has_Xref_Entry                      (Id : E) return B;\n    function Hiding_Loop_Variable                (Id : E) return E;\n    function Homonym                             (Id : E) return E;\n+   function Implemented_By_Entry                (Id : E) return B;\n    function In_Package_Body                     (Id : E) return B;\n    function In_Private_Part                     (Id : E) return B;\n    function In_Use                              (Id : E) return B;\n@@ -5717,7 +5816,6 @@ package Einfo is\n    function Is_AST_Entry                        (Id : E) return B;\n    function Is_Abstract_Subprogram              (Id : E) return B;\n    function Is_Abstract_Type                    (Id : E) return B;\n-   function Is_Local_Anonymous_Access           (Id : E) return B;\n    function Is_Access_Constant                  (Id : E) return B;\n    function Is_Ada_2005_Only                    (Id : E) return B;\n    function Is_Aliased                          (Id : E) return B;\n@@ -5762,10 +5860,12 @@ package Einfo is\n    function Is_Known_Valid                      (Id : E) return B;\n    function Is_Limited_Composite                (Id : E) return B;\n    function Is_Limited_Interface                (Id : E) return B;\n+   function Is_Local_Anonymous_Access           (Id : E) return B;\n    function Is_Machine_Code_Subprogram          (Id : E) return B;\n    function Is_Non_Static_Subtype               (Id : E) return B;\n    function Is_Null_Init_Proc                   (Id : E) return B;\n    function Is_Obsolescent                      (Id : E) return B;\n+   function Is_Only_Out_Parameter               (Id : E) return B;\n    function Is_Optional_Parameter               (Id : E) return B;\n    function Is_Package_Body_Entity              (Id : E) return B;\n    function Is_Packed                           (Id : E) return B;\n@@ -5791,6 +5891,7 @@ package Einfo is\n    function Is_Tag                              (Id : E) return B;\n    function Is_Tagged_Type                      (Id : E) return B;\n    function Is_Task_Interface                   (Id : E) return B;\n+   function Is_Thunk                            (Id : E) return B;\n    function Is_True_Constant                    (Id : E) return B;\n    function Is_Unchecked_Union                  (Id : E) return B;\n    function Is_Unsigned_Type                    (Id : E) return B;\n@@ -5850,12 +5951,14 @@ package Einfo is\n    function Reachable                           (Id : E) return B;\n    function Referenced                          (Id : E) return B;\n    function Referenced_As_LHS                   (Id : E) return B;\n+   function Referenced_As_Out_Parameter         (Id : E) return B;\n    function Referenced_Object                   (Id : E) return N;\n    function Register_Exception_Call             (Id : E) return N;\n    function Related_Array_Object                (Id : E) return E;\n    function Related_Instance                    (Id : E) return E;\n-   function Related_Interface                   (Id : E) return E;\n+   function Related_Type                        (Id : E) return E;\n    function Renamed_Entity                      (Id : E) return N;\n+   function Renamed_In_Spec                     (Id : E) return B;\n    function Renamed_Object                      (Id : E) return N;\n    function Renaming_Map                        (Id : E) return U;\n    function Requires_Overriding                 (Id : E) return B;\n@@ -5953,7 +6056,6 @@ package Einfo is\n    function Is_Signed_Integer_Type              (Id : E) return B;\n    function Is_Subprogram                       (Id : E) return B;\n    function Is_Task_Type                        (Id : E) return B;\n-   function Is_Thunk                            (Id : E) return B;\n    function Is_Type                             (Id : E) return B;\n \n    -------------------------------------\n@@ -5985,7 +6087,6 @@ package Einfo is\n    function Has_Private_Ancestor                (Id : E) return B;\n    function Has_Private_Declaration             (Id : E) return B;\n    function Implementation_Base_Type            (Id : E) return E;\n-   function Is_Always_Inlined                   (Id : E) return B;\n    function Is_Boolean_Type                     (Id : E) return B;\n    function Is_By_Copy_Type                     (Id : E) return B;\n    function Is_By_Reference_Type                (Id : E) return B;\n@@ -6162,6 +6263,7 @@ package Einfo is\n    procedure Set_Extra_Constrained               (Id : E; V : E);\n    procedure Set_Extra_Formal                    (Id : E; V : E);\n    procedure Set_Extra_Formals                   (Id : E; V : E);\n+   procedure Set_Can_Use_Internal_Rep            (Id : E; V : B := True);\n    procedure Set_Finalization_Chain_Entity       (Id : E; V : E);\n    procedure Set_Finalize_Storage_Only           (Id : E; V : B := True);\n    procedure Set_First_Entity                    (Id : E; V : E);\n@@ -6215,6 +6317,7 @@ package Einfo is\n    procedure Set_Has_Pragma_Controlled           (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Elaborate_Body       (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Inline               (Id : E; V : B := True);\n+   procedure Set_Has_Pragma_Inline_Always        (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Pack                 (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Preelab_Init         (Id : E; V : B := True);\n    procedure Set_Has_Pragma_Pure                 (Id : E; V : B := True);\n@@ -6239,12 +6342,14 @@ package Einfo is\n    procedure Set_Has_Stream_Size_Clause          (Id : E; V : B := True);\n    procedure Set_Has_Subprogram_Descriptor       (Id : E; V : B := True);\n    procedure Set_Has_Task                        (Id : E; V : B := True);\n+   procedure Set_Has_Thunks                      (Id : E; V : B := True);\n    procedure Set_Has_Unchecked_Union             (Id : E; V : B := True);\n    procedure Set_Has_Unknown_Discriminants       (Id : E; V : B := True);\n    procedure Set_Has_Volatile_Components         (Id : E; V : B := True);\n    procedure Set_Has_Xref_Entry                  (Id : E; V : B := True);\n    procedure Set_Hiding_Loop_Variable            (Id : E; V : E);\n    procedure Set_Homonym                         (Id : E; V : E);\n+   procedure Set_Implemented_By_Entry            (Id : E; V : B := True);\n    procedure Set_In_Package_Body                 (Id : E; V : B := True);\n    procedure Set_In_Private_Part                 (Id : E; V : B := True);\n    procedure Set_In_Use                          (Id : E; V : B := True);\n@@ -6253,7 +6358,6 @@ package Einfo is\n    procedure Set_Is_AST_Entry                    (Id : E; V : B := True);\n    procedure Set_Is_Abstract_Subprogram          (Id : E; V : B := True);\n    procedure Set_Is_Abstract_Type                (Id : E; V : B := True);\n-   procedure Set_Is_Local_Anonymous_Access       (Id : E; V : B := True);\n    procedure Set_Is_Access_Constant              (Id : E; V : B := True);\n    procedure Set_Is_Ada_2005_Only                (Id : E; V : B := True);\n    procedure Set_Is_Aliased                      (Id : E; V : B := True);\n@@ -6304,10 +6408,12 @@ package Einfo is\n    procedure Set_Is_Limited_Composite            (Id : E; V : B := True);\n    procedure Set_Is_Limited_Interface            (Id : E; V : B := True);\n    procedure Set_Is_Limited_Record               (Id : E; V : B := True);\n+   procedure Set_Is_Local_Anonymous_Access       (Id : E; V : B := True);\n    procedure Set_Is_Machine_Code_Subprogram      (Id : E; V : B := True);\n    procedure Set_Is_Non_Static_Subtype           (Id : E; V : B := True);\n    procedure Set_Is_Null_Init_Proc               (Id : E; V : B := True);\n    procedure Set_Is_Obsolescent                  (Id : E; V : B := True);\n+   procedure Set_Is_Only_Out_Parameter           (Id : E; V : B := True);\n    procedure Set_Is_Optional_Parameter           (Id : E; V : B := True);\n    procedure Set_Is_Overriding_Operation         (Id : E; V : B := True);\n    procedure Set_Is_Package_Body_Entity          (Id : E; V : B := True);\n@@ -6394,12 +6500,14 @@ package Einfo is\n    procedure Set_Reachable                       (Id : E; V : B := True);\n    procedure Set_Referenced                      (Id : E; V : B := True);\n    procedure Set_Referenced_As_LHS               (Id : E; V : B := True);\n+   procedure Set_Referenced_As_Out_Parameter     (Id : E; V : B := True);\n    procedure Set_Referenced_Object               (Id : E; V : N);\n    procedure Set_Register_Exception_Call         (Id : E; V : N);\n    procedure Set_Related_Array_Object            (Id : E; V : E);\n    procedure Set_Related_Instance                (Id : E; V : E);\n-   procedure Set_Related_Interface               (Id : E; V : E);\n+   procedure Set_Related_Type                    (Id : E; V : E);\n    procedure Set_Renamed_Entity                  (Id : E; V : N);\n+   procedure Set_Renamed_In_Spec                 (Id : E; V : B := True);\n    procedure Set_Renamed_Object                  (Id : E; V : N);\n    procedure Set_Renaming_Map                    (Id : E; V : U);\n    procedure Set_Requires_Overriding             (Id : E; V : B := True);\n@@ -6598,8 +6706,14 @@ package Einfo is\n \n    procedure Record_Rep_Item (E : Entity_Id; N : Node_Id);\n    --  N is the node for either a representation pragma or an attribute\n-   --  definition clause that applies to entity E. This procedure links\n-   --  the node N onto the Rep_Item chain for entity E.\n+   --  definition clause that applies to entity E. This procedure links the\n+   --  node N onto the Rep_Item chain for entity E. Note that it is an error to\n+   --  call this procedure with E being overloadable, and N being a pragma that\n+   --  can apply to multiple overloadable entities (i.e. Convention, Interface,\n+   --  Inline, Inline_Always, Import, Export, External). This is not allowed\n+   --  even if in fact the entity is not overloaded, since we can't rely on\n+   --  it being present in the overloaded case, it is not useful to have it\n+   --  present in the non-overloaded case.\n \n    -------------------------------\n    -- Miscellaneous Subprograms --\n@@ -6760,6 +6874,7 @@ package Einfo is\n    pragma Inline (Extra_Constrained);\n    pragma Inline (Extra_Formal);\n    pragma Inline (Extra_Formals);\n+   pragma Inline (Can_Use_Internal_Rep);\n    pragma Inline (Finalization_Chain_Entity);\n    pragma Inline (First_Entity);\n    pragma Inline (First_Index);\n@@ -6811,6 +6926,7 @@ package Einfo is\n    pragma Inline (Has_Pragma_Controlled);\n    pragma Inline (Has_Pragma_Elaborate_Body);\n    pragma Inline (Has_Pragma_Inline);\n+   pragma Inline (Has_Pragma_Inline_Always);\n    pragma Inline (Has_Pragma_Pack);\n    pragma Inline (Has_Pragma_Preelab_Init);\n    pragma Inline (Has_Pragma_Pure);\n@@ -6835,13 +6951,15 @@ package Einfo is\n    pragma Inline (Has_Stream_Size_Clause);\n    pragma Inline (Has_Subprogram_Descriptor);\n    pragma Inline (Has_Task);\n+   pragma Inline (Has_Thunks);\n    pragma Inline (Has_Unchecked_Union);\n    pragma Inline (Has_Unknown_Discriminants);\n    pragma Inline (Has_Up_Level_Access);\n    pragma Inline (Has_Volatile_Components);\n    pragma Inline (Has_Xref_Entry);\n    pragma Inline (Hiding_Loop_Variable);\n    pragma Inline (Homonym);\n+   pragma Inline (Implemented_By_Entry);\n    pragma Inline (In_Package_Body);\n    pragma Inline (In_Private_Part);\n    pragma Inline (In_Use);\n@@ -6850,7 +6968,6 @@ package Einfo is\n    pragma Inline (Is_AST_Entry);\n    pragma Inline (Is_Abstract_Subprogram);\n    pragma Inline (Is_Abstract_Type);\n-   pragma Inline (Is_Local_Anonymous_Access);\n    pragma Inline (Is_Access_Constant);\n    pragma Inline (Is_Ada_2005_Only);\n    pragma Inline (Is_Access_Type);\n@@ -6925,12 +7042,14 @@ package Einfo is\n    pragma Inline (Is_Limited_Composite);\n    pragma Inline (Is_Limited_Interface);\n    pragma Inline (Is_Limited_Record);\n+   pragma Inline (Is_Local_Anonymous_Access);\n    pragma Inline (Is_Machine_Code_Subprogram);\n    pragma Inline (Is_Modular_Integer_Type);\n    pragma Inline (Is_Named_Number);\n    pragma Inline (Is_Non_Static_Subtype);\n    pragma Inline (Is_Null_Init_Proc);\n    pragma Inline (Is_Obsolescent);\n+   pragma Inline (Is_Only_Out_Parameter);\n    pragma Inline (Is_Numeric_Type);\n    pragma Inline (Is_Object);\n    pragma Inline (Is_Optional_Parameter);\n@@ -7032,12 +7151,14 @@ package Einfo is\n    pragma Inline (Reachable);\n    pragma Inline (Referenced);\n    pragma Inline (Referenced_As_LHS);\n+   pragma Inline (Referenced_As_Out_Parameter);\n    pragma Inline (Referenced_Object);\n    pragma Inline (Register_Exception_Call);\n    pragma Inline (Related_Array_Object);\n    pragma Inline (Related_Instance);\n-   pragma Inline (Related_Interface);\n+   pragma Inline (Related_Type);\n    pragma Inline (Renamed_Entity);\n+   pragma Inline (Renamed_In_Spec);\n    pragma Inline (Renamed_Object);\n    pragma Inline (Renaming_Map);\n    pragma Inline (Requires_Overriding);\n@@ -7165,6 +7286,7 @@ package Einfo is\n    pragma Inline (Set_Extra_Constrained);\n    pragma Inline (Set_Extra_Formal);\n    pragma Inline (Set_Extra_Formals);\n+   pragma Inline (Set_Can_Use_Internal_Rep);\n    pragma Inline (Set_Finalization_Chain_Entity);\n    pragma Inline (Set_First_Entity);\n    pragma Inline (Set_First_Index);\n@@ -7216,6 +7338,7 @@ package Einfo is\n    pragma Inline (Set_Has_Pragma_Controlled);\n    pragma Inline (Set_Has_Pragma_Elaborate_Body);\n    pragma Inline (Set_Has_Pragma_Inline);\n+   pragma Inline (Set_Has_Pragma_Inline_Always);\n    pragma Inline (Set_Has_Pragma_Pack);\n    pragma Inline (Set_Has_Pragma_Preelab_Init);\n    pragma Inline (Set_Has_Pragma_Pure);\n@@ -7240,13 +7363,15 @@ package Einfo is\n    pragma Inline (Set_Has_Stream_Size_Clause);\n    pragma Inline (Set_Has_Subprogram_Descriptor);\n    pragma Inline (Set_Has_Task);\n+   pragma Inline (Set_Has_Thunks);\n    pragma Inline (Set_Has_Unchecked_Union);\n    pragma Inline (Set_Has_Unknown_Discriminants);\n    pragma Inline (Set_Has_Up_Level_Access);\n    pragma Inline (Set_Has_Volatile_Components);\n    pragma Inline (Set_Has_Xref_Entry);\n    pragma Inline (Set_Hiding_Loop_Variable);\n    pragma Inline (Set_Homonym);\n+   pragma Inline (Set_Implemented_By_Entry);\n    pragma Inline (Set_In_Package_Body);\n    pragma Inline (Set_In_Private_Part);\n    pragma Inline (Set_In_Use);\n@@ -7255,7 +7380,6 @@ package Einfo is\n    pragma Inline (Set_Is_AST_Entry);\n    pragma Inline (Set_Is_Abstract_Subprogram);\n    pragma Inline (Set_Is_Abstract_Type);\n-   pragma Inline (Set_Is_Local_Anonymous_Access);\n    pragma Inline (Set_Is_Access_Constant);\n    pragma Inline (Set_Is_Ada_2005_Only);\n    pragma Inline (Set_Is_Aliased);\n@@ -7306,10 +7430,12 @@ package Einfo is\n    pragma Inline (Set_Is_Limited_Composite);\n    pragma Inline (Set_Is_Limited_Interface);\n    pragma Inline (Set_Is_Limited_Record);\n+   pragma Inline (Set_Is_Local_Anonymous_Access);\n    pragma Inline (Set_Is_Machine_Code_Subprogram);\n    pragma Inline (Set_Is_Non_Static_Subtype);\n    pragma Inline (Set_Is_Null_Init_Proc);\n    pragma Inline (Set_Is_Obsolescent);\n+   pragma Inline (Set_Is_Only_Out_Parameter);\n    pragma Inline (Set_Is_Optional_Parameter);\n    pragma Inline (Set_Is_Overriding_Operation);\n    pragma Inline (Set_Is_Package_Body_Entity);\n@@ -7396,12 +7522,14 @@ package Einfo is\n    pragma Inline (Set_Reachable);\n    pragma Inline (Set_Referenced);\n    pragma Inline (Set_Referenced_As_LHS);\n+   pragma Inline (Set_Referenced_As_Out_Parameter);\n    pragma Inline (Set_Referenced_Object);\n    pragma Inline (Set_Register_Exception_Call);\n    pragma Inline (Set_Related_Array_Object);\n    pragma Inline (Set_Related_Instance);\n-   pragma Inline (Set_Related_Interface);\n+   pragma Inline (Set_Related_Type);\n    pragma Inline (Set_Renamed_Entity);\n+   pragma Inline (Set_Renamed_In_Spec);\n    pragma Inline (Set_Renamed_Object);\n    pragma Inline (Set_Renaming_Map);\n    pragma Inline (Set_Requires_Overriding);"}]}