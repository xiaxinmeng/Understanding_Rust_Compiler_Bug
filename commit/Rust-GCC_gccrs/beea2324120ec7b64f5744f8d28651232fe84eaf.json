{"sha": "beea2324120ec7b64f5744f8d28651232fe84eaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVlYTIzMjQxMjBlYzdiNjRmNTc0NGY4ZDI4NjUxMjMyZmU4NGVhZg==", "commit": {"author": {"name": "Franz Sirl", "email": "Franz.Sirl-kernel@lauterbach.com", "date": "2003-06-17T15:56:09Z"}, "committer": {"name": "Franz Sirl", "email": "sirl@gcc.gnu.org", "date": "2003-06-17T15:56:09Z"}, "message": "powerpc-signal.h: New File.\n\n2003-06-17  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n\n\t* include/powerpc-signal.h: New File.\n\t* configure.in: Use it.\n\t* configure: Regenerated.\n\nFrom-SVN: r68088", "tree": {"sha": "719f7d4c0586ddc43a5c9520cfbf5cca8d9c292a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/719f7d4c0586ddc43a5c9520cfbf5cca8d9c292a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beea2324120ec7b64f5744f8d28651232fe84eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beea2324120ec7b64f5744f8d28651232fe84eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beea2324120ec7b64f5744f8d28651232fe84eaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beea2324120ec7b64f5744f8d28651232fe84eaf/comments", "author": {"login": "jinkama-san", "id": 1462162, "node_id": "MDQ6VXNlcjE0NjIxNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinkama-san", "html_url": "https://github.com/jinkama-san", "followers_url": "https://api.github.com/users/jinkama-san/followers", "following_url": "https://api.github.com/users/jinkama-san/following{/other_user}", "gists_url": "https://api.github.com/users/jinkama-san/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinkama-san/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinkama-san/subscriptions", "organizations_url": "https://api.github.com/users/jinkama-san/orgs", "repos_url": "https://api.github.com/users/jinkama-san/repos", "events_url": "https://api.github.com/users/jinkama-san/events{/privacy}", "received_events_url": "https://api.github.com/users/jinkama-san/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cf6c9279ee253d2f90acf981b671e3a8b29486a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf6c9279ee253d2f90acf981b671e3a8b29486a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf6c9279ee253d2f90acf981b671e3a8b29486a"}], "stats": {"total": 97, "additions": 95, "deletions": 2}, "files": [{"sha": "252e6dadef54cf167334db80e7253bce1f28559d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beea2324120ec7b64f5744f8d28651232fe84eaf/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beea2324120ec7b64f5744f8d28651232fe84eaf/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=beea2324120ec7b64f5744f8d28651232fe84eaf", "patch": "@@ -1,3 +1,9 @@\n+2003-06-17  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\t* include/powerpc-signal.h: New File.\n+\t* configure.in: Use it.\n+\t* configure: Regenerated.\n+\n 2003-06-17  Michael Koch  <konqueror@gmx.de>\n \n \t* java/util/Locale.java"}, {"sha": "8eba4cb110ff60ccd008629bee0611c72d61416a", "filename": "libjava/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beea2324120ec7b64f5744f8d28651232fe84eaf/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beea2324120ec7b64f5744f8d28651232fe84eaf/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=beea2324120ec7b64f5744f8d28651232fe84eaf", "patch": "@@ -8618,7 +8618,7 @@ case \"${host}\" in\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n     ;;\n  powerpc-*-linux*)\n-    SIGNAL_HANDLER=include/dwarf2-signal.h\n+    SIGNAL_HANDLER=include/powerpc-signal.h\n     ;;\n  alpha*-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h"}, {"sha": "dcdf4c16872ace0480e441f2637d7479472824a7", "filename": "libjava/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beea2324120ec7b64f5744f8d28651232fe84eaf/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beea2324120ec7b64f5744f8d28651232fe84eaf/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=beea2324120ec7b64f5744f8d28651232fe84eaf", "patch": "@@ -1004,7 +1004,7 @@ case \"${host}\" in\n     SIGNAL_HANDLER=include/dwarf2-signal.h\n     ;;\n  powerpc-*-linux*)\n-    SIGNAL_HANDLER=include/dwarf2-signal.h\n+    SIGNAL_HANDLER=include/powerpc-signal.h\n     ;;\n  alpha*-*-linux*)\n     SIGNAL_HANDLER=include/dwarf2-signal.h"}, {"sha": "00a5a6dfb8f5a7366de8fe0d4ace03ea64b9dba4", "filename": "libjava/include/powerpc-signal.h", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beea2324120ec7b64f5744f8d28651232fe84eaf/libjava%2Finclude%2Fpowerpc-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beea2324120ec7b64f5744f8d28651232fe84eaf/libjava%2Finclude%2Fpowerpc-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fpowerpc-signal.h?ref=beea2324120ec7b64f5744f8d28651232fe84eaf", "patch": "@@ -0,0 +1,87 @@\n+// powerpc-signal.h - Catch runtime signals and turn them into exceptions\n+// on a powerpc based Linux system.\n+\n+/* Copyright (C) 2003  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+\n+#ifndef JAVA_SIGNAL_H\n+# define JAVA_SIGNAL_H 1\n+\n+# include <signal.h>\n+# include <sys/syscall.h>\n+\n+# define HANDLE_SEGV 1\n+# undef HANDLE_FPE\n+\n+# define SIGNAL_HANDLER(_name)\t\t\t\t\t\t\\\n+  static void _name (int /* _signal */, struct sigcontext *_sc)\n+\n+/* PPC either leaves PC pointing at a faulting instruction or the\n+   following instruction, depending on the signal.  SEGV always does\n+   the former, so we adjust the saved PC to point to the following\n+   instruction. This is what the handler in libgcc expects.  */\n+\n+# define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    _sc->regs->nip += 4;\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+  \n+/* For an explanation why we cannot simply use sigaction to\n+   install the handlers, see i386-signal.h.  */\n+\n+/* We use kernel_old_sigaction here because we're calling the kernel\n+   directly rather than via glibc. The sigaction structure that the\n+   syscall uses is a different shape from the one in userland and not\n+   visible to us in a header file so we define it here.\n+   Additionally we want a proper prototype for the handler function\n+   with the struct sigcontext pointer passed by the kernel as the 2nd\n+   argument, which isn't there in userland headers.\n+\n+   Note that we explicitly avoid the SA_SIGINFO flag in INIT_SEGV and\n+   INIT_FPE below. Using the ucontext pointer passed as 3rd argument\n+   of a SA_SIGINFO type handler would need complicated backwards\n+   compatibility hacks in MAKE_THROW_FRAME, as the ucontext layout\n+   on PPC changed during the 2.5 kernel series.  */\n+\n+struct kernel_old_sigaction {\n+  void (*k_sa_handler) (int, struct sigcontext *);\n+  unsigned long k_sa_mask;\n+  unsigned long k_sa_flags;\n+  void (*k_sa_restorer) (void);\n+};\n+\n+# define INIT_SEGV\t\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    nullp = new java::lang::NullPointerException ();\t\t\t\\\n+    struct kernel_old_sigaction kact;\t\t\t\t\t\\\n+    kact.k_sa_handler = catch_segv;\t\t\t\t\t\\\n+    kact.k_sa_mask = 0;\t\t\t\t\t\t\t\\\n+    kact.k_sa_flags = 0;\t\t\t\t\t\t\\\n+    syscall (SYS_sigaction, SIGSEGV, &kact, NULL);\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)  \n+\n+# define INIT_FPE\t\t\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    arithexception = new java::lang::ArithmeticException\t\t\\\n+      (JvNewStringLatin1 (\"/ by zero\"));\t\t\t\t\\\n+    struct kernel_old_sigaction kact;\t\t\t\t\t\\\n+    kact.k_sa_handler = catch_fpe;\t\t\t\t\t\\\n+    kact.k_sa_mask = 0;\t\t\t\t\t\t\t\\\n+    kact.k_sa_flags = 0;\t\t\t\t\t\t\\\n+    syscall (SYS_sigaction, SIGFPE, &kact, NULL);\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)  \n+\n+#endif /* JAVA_SIGNAL_H */\n+"}]}