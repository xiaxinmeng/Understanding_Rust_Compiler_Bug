{"sha": "843068149ec8fcaaaec12751f5b70221a1153857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzMDY4MTQ5ZWM4ZmNhYWFlYzEyNzUxZjViNzAyMjFhMTE1Mzg1Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-07T09:46:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-07T11:10:37Z"}, "message": "tree-optimization/102226 - fix epilogue vector re-use\n\nThis fixes re-use of the reduction value in epilogue vectorization\nwhen a conversion from/to variable lenght vectors is required.\n\n2021-09-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/102226\n\t* tree-vect-loop.c (vect_transform_cycle_phi): Record\n\tthe converted value for the epilogue PHI use.\n\n\t* g++.dg/vect/pr102226.cc: New testcase.", "tree": {"sha": "2da52fef02eac80cbd874dfcb58d9d4fd7b2026c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2da52fef02eac80cbd874dfcb58d9d4fd7b2026c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/843068149ec8fcaaaec12751f5b70221a1153857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843068149ec8fcaaaec12751f5b70221a1153857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/843068149ec8fcaaaec12751f5b70221a1153857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843068149ec8fcaaaec12751f5b70221a1153857/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba1cc6956b956eb5b92c45af79a8b1fe426ec4d3"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "ddf5e460c28e6c462c8526a924421b5ec7788413", "filename": "gcc/testsuite/g++.dg/vect/pr102226.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843068149ec8fcaaaec12751f5b70221a1153857/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr102226.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843068149ec8fcaaaec12751f5b70221a1153857/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr102226.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr102226.cc?ref=843068149ec8fcaaaec12751f5b70221a1153857", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-additional-options \"-msve-vector-bits=128\" { target aarch64_sve } }\n+\n+template <typename a> struct b { using c = a; };\n+template <typename a, template <typename> class> using f = b<a>;\n+template <typename a, template <typename> class g>\n+using h = typename f<a, g>::c;\n+struct i {\n+  template <typename j> using k = typename j::l;\n+};\n+struct m : i {\n+  using l = h<char *, k>;\n+};\n+class n {\n+public:\n+  char operator[](long o) {\n+    m::l s;\n+    return s[o];\n+  }\n+} p;\n+n r;\n+int q() {\n+  long d;\n+  for (long e; e; e++)\n+    if (p[e] == r[e])\n+      d++;\n+  return d;\n+}"}, {"sha": "c9dcc647d2c325a1ab2a64151faa6b4fe25f2dc9", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843068149ec8fcaaaec12751f5b70221a1153857/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843068149ec8fcaaaec12751f5b70221a1153857/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=843068149ec8fcaaaec12751f5b70221a1153857", "patch": "@@ -7755,11 +7755,11 @@ vect_transform_cycle_phi (loop_vec_info loop_vinfo,\n \t\t\t\t\t\t  (reduc_info),\n \t\t\t\t\t\t&stmts);\n \t    }\n+\t  if (!useless_type_conversion_p (vectype_out, TREE_TYPE (def)))\n+\t    def = gimple_convert (&stmts, vectype_out, def);\n \t  /* Adjust the input so we pick up the partially reduced value\n \t     for the skip edge in vect_create_epilog_for_reduction.  */\n \t  accumulator->reduc_input = def;\n-\t  if (!useless_type_conversion_p (vectype_out, TREE_TYPE (def)))\n-\t    def = gimple_convert (&stmts, vectype_out, def);\n \t  if (loop_vinfo->main_loop_edge)\n \t    {\n \t      /* While we'd like to insert on the edge this will split"}]}