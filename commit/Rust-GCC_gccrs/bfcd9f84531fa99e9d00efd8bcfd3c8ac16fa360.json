{"sha": "bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360", "node_id": "C_kwDOANBUbNoAKGJmY2Q5Zjg0NTMxZmE5OWU5ZDAwZWZkOGJjZmQzYzhhYzE2ZmEzNjA", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-12T15:14:11Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-12T15:14:11Z"}, "message": "libstdc++: Implement ranges::repeat_view from P2474R2\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (repeat_view): Define.\n\t(repeat_view::_Iterator): Define.\n\t(views::__detail::__can_repeat_view): Define.\n\t(views::__detail::__can_bounded_repeat_view): Define.\n\t(views::_Repeat, views::repeat): Define.\n\t* testsuite/std/ranges/repeat/1.cc: New test.", "tree": {"sha": "46a78efd572379901fefd61f470d5d908be435b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46a78efd572379901fefd61f470d5d908be435b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360/comments", "author": null, "committer": null, "parents": [{"sha": "fbf423309e103b54f7c9d39b2f7870b9bedfe9d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf423309e103b54f7c9d39b2f7870b9bedfe9d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf423309e103b54f7c9d39b2f7870b9bedfe9d2"}], "stats": {"total": 303, "additions": 303, "deletions": 0}, "files": [{"sha": "5857d426a66fd41f5c6d8471a71fe1afe9ae5c59", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360", "patch": "@@ -7356,6 +7356,216 @@ namespace views::__adaptor\n \n     inline constexpr _JoinWith join_with;\n   } // namespace views\n+\n+  template<copy_constructible _Tp, semiregular _Bound = unreachable_sentinel_t>\n+    requires (is_object_v<_Tp> && same_as<_Tp, remove_cv_t<_Tp>>\n+      && (__detail::__is_integer_like<_Bound> || same_as<_Bound, unreachable_sentinel_t>))\n+  class repeat_view : public view_interface<repeat_view<_Tp, _Bound>>\n+  {\n+    __detail::__box<_Tp> _M_value = _Tp();\n+    [[no_unique_address]] _Bound _M_bound = _Bound();\n+\n+    struct _Iterator;\n+\n+  public:\n+    repeat_view() requires default_initializable<_Tp> = default;\n+\n+    constexpr explicit\n+    repeat_view(const _Tp& __value, _Bound __bound = _Bound())\n+    : _M_value(__value), _M_bound(__bound)\n+    {\n+      if constexpr (!same_as<_Bound, unreachable_sentinel_t>)\n+\t__glibcxx_assert(__bound >= 0);\n+    }\n+\n+    constexpr explicit\n+    repeat_view(_Tp&& __value, _Bound __bound = _Bound())\n+    : _M_value(std::move(__value)), _M_bound(__bound)\n+    { }\n+\n+    template<typename... _Args, typename... _BoundArgs>\n+      requires constructible_from<_Tp, _Args...>\n+        && constructible_from<_Bound, _BoundArgs...>\n+    constexpr explicit\n+    repeat_view(piecewise_construct_t,\n+\t\ttuple<_Args...> __args,\n+\t\ttuple<_BoundArgs...> __bound_args = tuple<>{})\n+    : _M_value(std::make_from_tuple<_Tp>(std::move(__args))),\n+      _M_bound(std::make_from_tuple<_Bound>(std::move(__bound_args)))\n+    { }\n+\n+    constexpr _Iterator\n+    begin() const\n+    { return _Iterator(std::__addressof(*_M_value)); }\n+\n+    constexpr _Iterator\n+    end() const requires (!same_as<_Bound, unreachable_sentinel_t>)\n+    { return _Iterator(std::__addressof(*_M_value), _M_bound); }\n+\n+    constexpr unreachable_sentinel_t\n+    end() const noexcept\n+    { return unreachable_sentinel; }\n+\n+    constexpr auto\n+    size() const requires (!same_as<_Bound, unreachable_sentinel_t>)\n+    { return __detail::__to_unsigned_like(_M_bound); }\n+  };\n+\n+  template<typename _Tp, typename _Bound>\n+    repeat_view(_Tp, _Bound) -> repeat_view<_Tp, _Bound>;\n+\n+  template<copy_constructible _Tp, semiregular _Bound>\n+    requires __detail::__is_integer_like<_Bound> || same_as<_Bound, unreachable_sentinel_t>\n+  class repeat_view<_Tp, _Bound>::_Iterator\n+  {\n+    using __index_type\n+      = __conditional_t<same_as<_Bound, unreachable_sentinel_t>, ptrdiff_t, _Bound>;\n+\n+    const _Tp* _M_value = nullptr;\n+    __index_type _M_current = __index_type();\n+\n+    constexpr explicit\n+    _Iterator(const _Tp* __value, __index_type __bound = __index_type())\n+    : _M_value(__value), _M_current(__bound)\n+    {\n+      if constexpr (!same_as<_Bound, unreachable_sentinel_t>)\n+\t__glibcxx_assert(__bound >= 0);\n+    }\n+\n+    friend repeat_view;\n+\n+  public:\n+    using iterator_concept = random_access_iterator_tag;\n+    using iterator_category = random_access_iterator_tag;\n+    using value_type = _Tp;\n+    using difference_type = __conditional_t<__detail::__is_signed_integer_like<__index_type>,\n+\t\t\t\t\t    __index_type,\n+\t\t\t\t\t    __detail::__iota_diff_t<__index_type>>;\n+\n+    _Iterator() = default;\n+\n+    constexpr const _Tp&\n+    operator*() const noexcept\n+    { return *_M_value; }\n+\n+    constexpr _Iterator&\n+    operator++()\n+    {\n+      ++_M_current;\n+      return *this;\n+    }\n+\n+    constexpr _Iterator\n+    operator++(int)\n+    {\n+      auto __tmp = *this;\n+      ++*this;\n+      return __tmp;\n+    }\n+\n+    constexpr _Iterator&\n+    operator--()\n+    {\n+      if constexpr (!same_as<_Bound, unreachable_sentinel_t>)\n+\t__glibcxx_assert(_M_current > 0);\n+      --_M_current;\n+      return *this;\n+    }\n+\n+    constexpr _Iterator\n+    operator--(int)\n+    {\n+      auto __tmp = *this;\n+      --*this;\n+      return __tmp;\n+    }\n+\n+    constexpr _Iterator&\n+    operator+=(difference_type __n)\n+    {\n+      if constexpr (!same_as<_Bound, unreachable_sentinel_t>)\n+\t__glibcxx_assert(_M_current + __n >= 0);\n+      _M_current += __n;\n+      return *this;\n+    }\n+\n+    constexpr _Iterator&\n+    operator-=(difference_type __n)\n+    {\n+      if constexpr (!same_as<_Bound, unreachable_sentinel_t>)\n+\t__glibcxx_assert(_M_current - __n >= 0);\n+      _M_current -= __n;\n+      return *this;\n+    }\n+\n+    constexpr const _Tp&\n+    operator[](difference_type __n) const noexcept\n+    { return *(*this + __n); }\n+\n+    friend constexpr bool\n+    operator==(const _Iterator& __x, const _Iterator& __y)\n+    { return __x._M_current == __y._M_current; }\n+\n+    friend constexpr auto\n+    operator<=>(const _Iterator& __x, const _Iterator& __y)\n+    { return __x._M_current <=> __y._M_current; }\n+\n+    friend constexpr _Iterator\n+    operator+(_Iterator __i, difference_type __n)\n+    {\n+      __i += __n;\n+      return __i;\n+    }\n+\n+    friend constexpr _Iterator\n+    operator+(difference_type __n, _Iterator __i)\n+    { return __i + __n; }\n+\n+    friend constexpr _Iterator\n+    operator-(_Iterator __i, difference_type __n)\n+    {\n+      __i -= __n;\n+      return __i;\n+    }\n+\n+    friend constexpr difference_type\n+    operator-(const _Iterator& __x, const _Iterator& __y)\n+    {\n+      return (static_cast<difference_type>(__x._M_current)\n+\t      - static_cast<difference_type>(__y._M_current));\n+    }\n+  };\n+\n+  namespace views\n+  {\n+    namespace __detail\n+    {\n+      template<typename _Tp>\n+\tconcept __can_repeat_view\n+\t  = requires { repeat_view(std::declval<_Tp>()); };\n+\n+      template<typename _Tp, typename _Bound>\n+\tconcept __can_bounded_repeat_view\n+\t  = requires { repeat_view(std::declval<_Tp>(), std::declval<_Bound>()); };\n+    }\n+\n+    struct _Repeat\n+    {\n+      template<typename _Tp>\n+\trequires __detail::__can_repeat_view<_Tp>\n+      constexpr auto\n+      operator() [[nodiscard]] (_Tp&& __value) const\n+      { return repeat_view(std::forward<_Tp>(__value)); }\n+\n+      template<typename _Tp, typename _Bound>\n+\trequires __detail::__can_bounded_repeat_view<_Tp, _Bound>\n+      constexpr auto\n+      operator() [[nodiscard]] (_Tp&& __value, _Bound __bound) const\n+      { return repeat_view(std::forward<_Tp>(__value), __bound); }\n+    };\n+\n+    inline constexpr _Repeat repeat;\n+  }\n #endif // C++23\n } // namespace ranges\n "}, {"sha": "3698ed12c14ad8a511e169a12c545fc2a0ddfb3a", "filename": "libstdc++-v3/testsuite/std/ranges/repeat/1.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frepeat%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frepeat%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Frepeat%2F1.cc?ref=bfcd9f84531fa99e9d00efd8bcfd3c8ac16fa360", "patch": "@@ -0,0 +1,93 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <ranges>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+constexpr bool\n+test01()\n+{\n+  auto v = views::repeat(42);\n+  static_assert(ranges::random_access_range<decltype(v)>\n+\t\t&& !ranges::sized_range<decltype(v)>);\n+  auto i = ranges::begin(v);\n+  auto s = ranges::end(v);\n+  VERIFY( *i == 42 );\n+  VERIFY( i[0] == 42 );\n+  VERIFY( &i[0] == &i[1] );\n+  VERIFY( &*i == &*(i+1) );\n+  VERIFY( i != s );\n+  auto j = i + 5, k = i + 12;\n+  VERIFY( k - i == 12 );\n+  VERIFY( k - j == 7 );\n+  VERIFY( i - j == -5 );\n+  VERIFY( k > j );\n+  VERIFY( j < k );\n+  VERIFY( i + 5 == j );\n+  VERIFY( i != j );\n+  VERIFY( i + 5 <= j );\n+  VERIFY( j - 5 >= i );\n+\n+  return true;\n+}\n+\n+constexpr bool\n+test02()\n+{\n+  constexpr int bound = 20;\n+  auto v = views::repeat(42, bound);\n+  static_assert(ranges::random_access_range<decltype(v)>\n+\t\t&& ranges::sized_range<decltype(v)>);\n+  VERIFY( ranges::equal(v, views::repeat(42) | views::take(bound)) );\n+  auto i = ranges::begin(v);\n+  auto s = ranges::end(v);\n+  VERIFY( *i == 42 );\n+  VERIFY( i[0] == 42 );\n+  VERIFY( &i[0] == &i[1] );\n+  VERIFY( &*i == &*(i+1) );\n+  VERIFY( i != s );\n+  auto j = i + 5, k = i + 12;\n+  VERIFY( k - i == 12 );\n+  VERIFY( k - j == 7 );\n+  VERIFY( i - j == -5 );\n+  VERIFY( k > j );\n+  VERIFY( j < k );\n+  VERIFY( i + 5 == j );\n+  VERIFY( i != j );\n+  VERIFY( i + 5 <= j );\n+  VERIFY( j - 5 >= i );\n+\n+  VERIFY( ranges::size(v) == bound );\n+  VERIFY( s - i == bound );\n+  VERIFY( s - j == bound - (j - i) );\n+  VERIFY( i + bound == s );\n+  VERIFY( bound + i == s );\n+\n+  return true;\n+}\n+\n+constexpr bool\n+test03()\n+{\n+  struct A { int n, m; };\n+  auto v = ranges::repeat_view<A, unsigned>(std::piecewise_construct,\n+\t\t\t\t\t    std::tuple{1, 2},\n+\t\t\t\t\t    std::tuple{3});\n+  VERIFY( v[0].n == 1 );\n+  VERIFY( v[0].m == 2 );\n+  VERIFY( ranges::size(v) == 3 );\n+\n+  return true;\n+}\n+\n+int\n+main()\n+{\n+  static_assert(test01());\n+  static_assert(test02());\n+  static_assert(test03());\n+}"}]}