{"sha": "451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxZThkYWU1ZGFjOTFkNmUzYzRkODM1NjMwZDlhOGZiNGE1MmNjOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-11-05T15:46:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-05T15:46:59Z"}, "message": "gimple-fold.c: Include omp-low.h.\n\n\t* gimple-fold.c: Include omp-low.h.\n\t(fold_internal_goacc_dim): New.\n\t(gimple_fold_call): Call it.\n\nFrom-SVN: r229816", "tree": {"sha": "7cccd64204c12aace7a7403d94e327f7ade47e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cccd64204c12aace7a7403d94e327f7ade47e95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9/comments", "author": null, "committer": null, "parents": [{"sha": "e01d41e553aae24572da3a067347a5f2c02cd620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01d41e553aae24572da3a067347a5f2c02cd620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e01d41e553aae24572da3a067347a5f2c02cd620"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "5c567f662d2e0c93966e91221bac0ceaff0c0469", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9", "patch": "@@ -1,3 +1,9 @@\n+2015-11-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gimple-fold.c: Include omp-low.h.\n+\t(fold_internal_goacc_dim): New.\n+\t(gimple_fold_call): Call it.\n+\n 2015-11-05  Jakub Jelinek  <jakub@redhat.com>\n \t    Ilya Verbin  <ilya.verbin@intel.com>\n "}, {"sha": "45840af22d90935756dc972af9f680c0654f06eb", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=451e8dae5dac91d6e3c4d835630d9a8fb4a52cc9", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-match.h\"\n #include \"gomp-constants.h\"\n #include \"optabs-query.h\"\n+#include \"omp-low.h\"\n \n \n /* Return true when DECL can be referenced from current unit.\n@@ -2906,6 +2907,28 @@ gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   return false;\n }\n \n+/* Transform IFN_GOACC_DIM_SIZE and IFN_GOACC_DIM_POS internal\n+   function calls to constants, where possible.  */\n+\n+static tree\n+fold_internal_goacc_dim (const gimple *call)\n+{\n+  int axis = get_oacc_ifn_dim_arg (call);\n+  int size = get_oacc_fn_dim_size (current_function_decl, axis);\n+  bool is_pos = gimple_call_internal_fn (call) == IFN_GOACC_DIM_POS;\n+  tree result = NULL_TREE;\n+\n+  /* If the size is 1, or we only want the size and it is not dynamic,\n+     we know the answer.  */\n+  if (size == 1 || (!is_pos && size))\n+    {\n+      tree type = TREE_TYPE (gimple_call_lhs (call));\n+      result = build_int_cst (type, size - is_pos);\n+    }\n+\n+  return result;\n+}\n+\n /* Return true if ARG0 CODE ARG1 in infinite signed precision operation\n    doesn't fit into TYPE.  The test for overflow should be regardless of\n    -fwrapv, and even for unsigned types.  */\n@@ -3106,6 +3129,10 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t      return true;\n \t    }\n \t  break;\n+\tcase IFN_GOACC_DIM_SIZE:\n+\tcase IFN_GOACC_DIM_POS:\n+\t  result = fold_internal_goacc_dim (stmt);\n+\t  break;\n \tcase IFN_UBSAN_CHECK_ADD:\n \t  subcode = PLUS_EXPR;\n \t  break;"}]}