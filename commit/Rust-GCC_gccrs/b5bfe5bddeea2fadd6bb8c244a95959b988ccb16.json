{"sha": "b5bfe5bddeea2fadd6bb8c244a95959b988ccb16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjViZmU1YmRkZWVhMmZhZGQ2YmI4YzI0NGE5NTk1OWI5ODhjY2IxNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-11-18T16:17:28Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-11-18T16:17:28Z"}, "message": "bt-load is ported to fibonacci_heap.\n\n\t* bt-load.c (add_btr_def): New fibonacci_heap is used.\n\t(migrate_btr_defs): Likewise.\n\nFrom-SVN: r217723", "tree": {"sha": "65b3357acf1d04bd50cfe821d18558f005683fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65b3357acf1d04bd50cfe821d18558f005683fa6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5bfe5bddeea2fadd6bb8c244a95959b988ccb16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bfe5bddeea2fadd6bb8c244a95959b988ccb16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5bfe5bddeea2fadd6bb8c244a95959b988ccb16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bfe5bddeea2fadd6bb8c244a95959b988ccb16/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd7bda5eb2998b92beb0c821ccb9b76cf54d24b5"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "60e64a2208528f23730fef89ec4be2ba24cd952f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bfe5bddeea2fadd6bb8c244a95959b988ccb16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bfe5bddeea2fadd6bb8c244a95959b988ccb16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5bfe5bddeea2fadd6bb8c244a95959b988ccb16", "patch": "@@ -1,3 +1,8 @@\n+2014-11-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* bt-load.c (add_btr_def): New fibonacci_heap is used.\n+\t(migrate_btr_defs): Likewise.\n+\n 2014-11-18  Martin Liska  <mliska@suse.cz>\n \n \t* tracer.c (tail_duplicate): New fibonacci_heap class is used."}, {"sha": "3002b62e8e139f45bb0ccca8404b43e62cb0d28b", "filename": "gcc/bt-load.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5bfe5bddeea2fadd6bb8c244a95959b988ccb16/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5bfe5bddeea2fadd6bb8c244a95959b988ccb16/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=b5bfe5bddeea2fadd6bb8c244a95959b988ccb16", "patch": "@@ -25,7 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n #include \"regs.h\"\n-#include \"fibheap.h\"\n #include \"target.h\"\n #include \"expr.h\"\n #include \"flags.h\"\n@@ -51,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"cfgloop.h\"\n #include \"rtl-iter.h\"\n+#include \"fibonacci_heap.h\"\n \n /* Target register optimizations - these are performed after reload.  */\n \n@@ -122,23 +122,26 @@ typedef struct btr_def_s\n   bitmap live_range;\n } *btr_def;\n \n+typedef fibonacci_heap <long, btr_def_s> btr_heap_t;\n+typedef fibonacci_node <long, btr_def_s> btr_heap_node_t;\n+\n static int issue_rate;\n \n static int basic_block_freq (const_basic_block);\n static int insn_sets_btr_p (const rtx_insn *, int, int *);\n static void find_btr_def_group (btr_def_group *, btr_def);\n-static btr_def add_btr_def (fibheap_t, basic_block, int, rtx_insn *,\n+static btr_def add_btr_def (btr_heap_t *, basic_block, int, rtx_insn *,\n \t\t\t    unsigned int, int, btr_def_group *);\n static btr_user new_btr_user (basic_block, int, rtx_insn *);\n static void dump_hard_reg_set (HARD_REG_SET);\n static void dump_btrs_live (int);\n static void note_other_use_this_block (unsigned int, btr_user);\n-static void compute_defs_uses_and_gen (fibheap_t, btr_def *,btr_user *,\n+static void compute_defs_uses_and_gen (btr_heap_t *, btr_def *,btr_user *,\n \t\t\t\t       sbitmap *, sbitmap *, HARD_REG_SET *);\n static void compute_kill (sbitmap *, sbitmap *, HARD_REG_SET *);\n static void compute_out (sbitmap *bb_out, sbitmap *, sbitmap *, int);\n static void link_btr_uses (btr_def *, btr_user *, sbitmap *, sbitmap *, int);\n-static void build_btr_def_use_webs (fibheap_t);\n+static void build_btr_def_use_webs (btr_heap_t *);\n static int block_at_edge_of_live_range_p (int, btr_def);\n static void clear_btr_from_live_range (btr_def def);\n static void add_btr_to_live_range (btr_def, int);\n@@ -290,7 +293,7 @@ find_btr_def_group (btr_def_group *all_btr_def_groups, btr_def def)\n    block BB, instruction INSN, and insert it into ALL_BTR_DEFS.  Return\n    the new definition.  */\n static btr_def\n-add_btr_def (fibheap_t all_btr_defs, basic_block bb, int insn_luid,\n+add_btr_def (btr_heap_t *all_btr_defs, basic_block bb, int insn_luid,\n \t     rtx_insn *insn,\n \t     unsigned int dest_reg, int other_btr_uses_before_def,\n \t     btr_def_group *all_btr_def_groups)\n@@ -310,7 +313,7 @@ add_btr_def (fibheap_t all_btr_defs, basic_block bb, int insn_luid,\n   this_def->live_range = NULL;\n   find_btr_def_group (all_btr_def_groups, this_def);\n \n-  fibheap_insert (all_btr_defs, -this_def->cost, this_def);\n+  all_btr_defs->insert (-this_def->cost, this_def);\n \n   if (dump_file)\n     fprintf (dump_file,\n@@ -436,7 +439,7 @@ note_btr_set (rtx dest, const_rtx set ATTRIBUTE_UNUSED, void *data)\n }\n \n static void\n-compute_defs_uses_and_gen (fibheap_t all_btr_defs, btr_def *def_array,\n+compute_defs_uses_and_gen (btr_heap_t *all_btr_defs, btr_def *def_array,\n \t\t\t   btr_user *use_array, sbitmap *btr_defset,\n \t\t\t   sbitmap *bb_gen, HARD_REG_SET *btrs_written)\n {\n@@ -767,7 +770,7 @@ link_btr_uses (btr_def *def_array, btr_user *use_array, sbitmap *bb_out,\n }\n \n static void\n-build_btr_def_use_webs (fibheap_t all_btr_defs)\n+build_btr_def_use_webs (btr_heap_t *all_btr_defs)\n {\n   const int max_uid = get_max_uid ();\n   btr_def  *def_array   = XCNEWVEC (btr_def, max_uid);\n@@ -1393,7 +1396,7 @@ migrate_btr_def (btr_def def, int min_cost)\n static void\n migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n {\n-  fibheap_t all_btr_defs = fibheap_new ();\n+  btr_heap_t all_btr_defs (LONG_MIN);\n   int reg;\n \n   gcc_obstack_init (&migrate_btrl_obstack);\n@@ -1427,15 +1430,15 @@ migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n   btrs_live = XCNEWVEC (HARD_REG_SET, last_basic_block_for_fn (cfun));\n   btrs_live_at_end = XCNEWVEC (HARD_REG_SET, last_basic_block_for_fn (cfun));\n \n-  build_btr_def_use_webs (all_btr_defs);\n+  build_btr_def_use_webs (&all_btr_defs);\n \n-  while (!fibheap_empty (all_btr_defs))\n+  while (!all_btr_defs.empty ())\n     {\n-      btr_def def = (btr_def) fibheap_extract_min (all_btr_defs);\n-      int min_cost = -fibheap_min_key (all_btr_defs);\n+      btr_def def = all_btr_defs.extract_min ();\n+      int min_cost = -all_btr_defs.min_key ();\n       if (migrate_btr_def (def, min_cost))\n \t{\n-\t  fibheap_insert (all_btr_defs, -def->cost, (void *) def);\n+\t  all_btr_defs.insert (-def->cost, def);\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file,\n@@ -1450,7 +1453,6 @@ migrate_btr_defs (enum reg_class btr_class, int allow_callee_save)\n   free (btrs_live);\n   free (btrs_live_at_end);\n   obstack_free (&migrate_btrl_obstack, NULL);\n-  fibheap_delete (all_btr_defs);\n }\n \n static void"}]}