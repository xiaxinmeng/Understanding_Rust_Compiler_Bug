{"sha": "bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ3MmNiYzgyMmI2ZWJjNDQ0NTUyYmZkMjIxZjJhYjdmYWI3YWE3Mg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-11-23T19:25:42Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2008-11-23T19:25:42Z"}, "message": "re PR libfortran/38234 (In Reshape, SOURCE can be bigger than result)\n\n2008-11-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/38234\n\t* intrinsics/reshape_generic.c (reshape_internal):\n\tSource can be larger than shape.\n\t* m4/reshape.m4:  Likewise.\n\t* generated/reshape_c10.c Regenerated.\n\t* generated/reshape_c16.c Regenerated.\n\t* generated/reshape_c4.c Regenerated.\n\t* generated/reshape_c8.c Regenerated.\n\t* generated/reshape_i16.c Regenerated.\n\t* generated/reshape_i4.c Regenerated.\n\t* generated/reshape_i8.c Regenerated.\n\t* generated/reshape_r10.c Regenerated.\n\t* generated/reshape_r16.c Regenerated.\n\t* generated/reshape_r4.c Regenerated.\n\t* generated/reshape_r8.c Regenerated.\n\n2008-11-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/38234\n\t* gfortran.dg/reshape_4.f90:  New test.\n\nFrom-SVN: r142137", "tree": {"sha": "8e04046feccd988d44cf864147388e601a376d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e04046feccd988d44cf864147388e601a376d4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/comments", "author": null, "committer": null, "parents": [{"sha": "786a13d0d45ee319ca86ce8235d529478d70c568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786a13d0d45ee319ca86ce8235d529478d70c568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786a13d0d45ee319ca86ce8235d529478d70c568"}], "stats": {"total": 870, "additions": 454, "deletions": 416}, "files": [{"sha": "a83c305a3936b893a4e2ca6b90474f3ddaeff124", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -1,3 +1,8 @@\n+2008-11-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/38234\n+\t* gfortran.dg/reshape_4.f90:  New test.\n+\n 2008-11-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/38225"}, {"sha": "92208e57da59ee4152d9cba6281b7901701ecfca", "filename": "gcc/testsuite/gfortran.dg/reshape_4.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freshape_4.f90?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+program main\n+  real, dimension(2,2) :: result\n+  real, dimension(6) :: source\n+  real, dimension(2) :: pad\n+\n+  call random_number (source)\n+  call random_number (pad)\n+\n+  result = reshape(source, shape(result),pad=pad(1:0))\n+  result = reshape(source, shape(result))\n+  result = reshape(source, shape(result),pad=pad)\n+\n+end program main"}, {"sha": "36c0098cab28c66193214a6e46b285588f06e20e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -1,3 +1,21 @@\n+2008-11-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/38234\n+\t* intrinsics/reshape_generic.c (reshape_internal):\n+\tSource can be larger than shape.\n+\t* m4/reshape.m4:  Likewise.\n+\t* generated/reshape_c10.c Regenerated.\n+\t* generated/reshape_c16.c Regenerated.\n+\t* generated/reshape_c4.c Regenerated.\n+\t* generated/reshape_c8.c Regenerated.\n+\t* generated/reshape_i16.c Regenerated.\n+\t* generated/reshape_i4.c Regenerated.\n+\t* generated/reshape_i8.c Regenerated.\n+\t* generated/reshape_r10.c Regenerated.\n+\t* generated/reshape_r16.c Regenerated.\n+\t* generated/reshape_r4.c Regenerated.\n+\t* generated/reshape_r8.c Regenerated.\n+\n 2008-11-22  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* libgfortran.h (__mingw_snprintf): Declare with gnu_printf"}, {"sha": "53e59dbda844b3d4a1ffb542c054135f88ded5d9", "filename": "libgfortran/generated/reshape_c10.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c10.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -119,6 +119,37 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -144,7 +175,7 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -219,37 +250,6 @@ reshape_c10 (gfc_array_c10 * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof (GFC_COMPLEX_10);"}, {"sha": "19cfdfcc31c4ad21bb7dbbbd18b59a125b396b29", "filename": "libgfortran/generated/reshape_c16.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c16.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -119,6 +119,37 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -144,7 +175,7 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -219,37 +250,6 @@ reshape_c16 (gfc_array_c16 * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof (GFC_COMPLEX_16);"}, {"sha": "64156d938ea866062d3025c65713cc634648da05", "filename": "libgfortran/generated/reshape_c4.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c4.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -119,6 +119,37 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -144,7 +175,7 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -219,37 +250,6 @@ reshape_c4 (gfc_array_c4 * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof (GFC_COMPLEX_4);"}, {"sha": "5ba646ce112b39b9ef0032601850678a2ac786bb", "filename": "libgfortran/generated/reshape_c8.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_c8.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -119,6 +119,37 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -144,7 +175,7 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -219,37 +250,6 @@ reshape_c8 (gfc_array_c8 * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof (GFC_COMPLEX_8);"}, {"sha": "81223eae6706094dddc5dab99ad3f526d13c10b9", "filename": "libgfortran/generated/reshape_i16.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i16.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -119,6 +119,37 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -144,7 +175,7 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -219,37 +250,6 @@ reshape_16 (gfc_array_i16 * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof (GFC_INTEGER_16);"}, {"sha": "911f2d7a902f4ac6dd8c6a23a40c2b5bcc613709", "filename": "libgfortran/generated/reshape_i4.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i4.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -119,6 +119,37 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -144,7 +175,7 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -219,37 +250,6 @@ reshape_4 (gfc_array_i4 * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof (GFC_INTEGER_4);"}, {"sha": "b5f9c1e19fc32df4044a1b9c58b6f1c1226f0a37", "filename": "libgfortran/generated/reshape_i8.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_i8.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -119,6 +119,37 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -144,7 +175,7 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -219,37 +250,6 @@ reshape_8 (gfc_array_i8 * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof (GFC_INTEGER_8);"}, {"sha": "57dca1aa88816a10232c0ee01b33099b083bfee0", "filename": "libgfortran/generated/reshape_r10.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r10.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -119,6 +119,37 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -144,7 +175,7 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -219,37 +250,6 @@ reshape_r10 (gfc_array_r10 * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof (GFC_REAL_10);"}, {"sha": "4509df5b2bb841d17fda9c64bdbb5285cd601b99", "filename": "libgfortran/generated/reshape_r16.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r16.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -119,6 +119,37 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -144,7 +175,7 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -219,37 +250,6 @@ reshape_r16 (gfc_array_r16 * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof (GFC_REAL_16);"}, {"sha": "c9135577cbd0f1845ad308148eae71dbd01c2c92", "filename": "libgfortran/generated/reshape_r4.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r4.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -119,6 +119,37 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -144,7 +175,7 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -219,37 +250,6 @@ reshape_r4 (gfc_array_r4 * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof (GFC_REAL_4);"}, {"sha": "33ce1f0bfbb0aa36c98c2ec6641824a7f7e9a229", "filename": "libgfortran/generated/reshape_r8.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fgenerated%2Freshape_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Freshape_r8.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -119,6 +119,37 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -144,7 +175,7 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -219,37 +250,6 @@ reshape_r8 (gfc_array_r8 * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof (GFC_REAL_8);"}, {"sha": "e1cc92abaf1b88635145e2d0dfb3844b7aa0b63e", "filename": "libgfortran/intrinsics/reshape_generic.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fintrinsics%2Freshape_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fintrinsics%2Freshape_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Freshape_generic.c?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -108,6 +108,37 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+              pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -133,7 +164,7 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -206,37 +237,6 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-              pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= size;"}, {"sha": "53a626e1cee45dc13703d1770254c9e97aab701a", "filename": "libgfortran/m4/reshape.m4", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fm4%2Freshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd72cbc822b6ebc444552bfd221f2ab7fab7aa72/libgfortran%2Fm4%2Freshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Freshape.m4?ref=bd72cbc822b6ebc444552bfd221f2ab7fab7aa72", "patch": "@@ -123,6 +123,37 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n   if (shape_empty)\n     return;\n \n+  if (pad)\n+    {\n+      pdim = GFC_DESCRIPTOR_RANK (pad);\n+      psize = 1;\n+      pempty = 0;\n+      for (n = 0; n < pdim; n++)\n+        {\n+          pcount[n] = 0;\n+          pstride[n] = pad->dim[n].stride;\n+          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n+          if (pextent[n] <= 0)\n+\t    {\n+\t      pempty = 1;\n+\t      pextent[n] = 0;\n+\t    }\n+\n+          if (psize == pstride[n])\n+            psize *= pextent[n];\n+          else\n+            psize = 0;\n+        }\n+      pptr = pad->data;\n+    }\n+  else\n+    {\n+      pdim = 0;\n+      psize = 1;\n+      pempty = 1;\n+      pptr = NULL;\n+    }\n+\n   if (unlikely (compile_options.bounds_check))\n     {\n       index_type ret_extent, source_extent;\n@@ -148,7 +179,7 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n \t  source_extent *= se > 0 ? se : 0;\n \t}\n \n-      if (rs < source_extent || (rs > source_extent && !pad))\n+      if (rs > source_extent && (!pad || pempty))\n \truntime_error(\"Incorrect size in SOURCE argument to RESHAPE\"\n \t\t      \" intrinsic: is %ld, should be %ld\",\n \t\t      (long int) source_extent, (long int) rs);\n@@ -223,37 +254,6 @@ reshape_'rtype_ccode` ('rtype` * const restrict ret,\n         ssize = 0;\n     }\n \n-  if (pad)\n-    {\n-      pdim = GFC_DESCRIPTOR_RANK (pad);\n-      psize = 1;\n-      pempty = 0;\n-      for (n = 0; n < pdim; n++)\n-        {\n-          pcount[n] = 0;\n-          pstride[n] = pad->dim[n].stride;\n-          pextent[n] = pad->dim[n].ubound + 1 - pad->dim[n].lbound;\n-          if (pextent[n] <= 0)\n-\t    {\n-\t      pempty = 1;\n-\t      pextent[n] = 0;\n-\t    }\n-\n-          if (psize == pstride[n])\n-            psize *= pextent[n];\n-          else\n-            psize = 0;\n-        }\n-      pptr = pad->data;\n-    }\n-  else\n-    {\n-      pdim = 0;\n-      psize = 1;\n-      pempty = 1;\n-      pptr = NULL;\n-    }\n-\n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n       rsize *= sizeof ('rtype_name`);"}]}