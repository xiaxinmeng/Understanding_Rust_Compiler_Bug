{"sha": "a13d6ec867e750169af95649235a6681f410464a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEzZDZlYzg2N2U3NTAxNjlhZjk1NjQ5MjM1YTY2ODFmNDEwNDY0YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-03T18:33:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-03T18:33:17Z"}, "message": "i386: Fix up handling of OPTION_MASK_ISA_MMX builtins [PR94461]\n\nIn https://gcc.gnu.org/ml/gcc-patches/2017-10/msg00576.html the builtin\nhandling was changed so that OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE\netc. in i386-builtin.def means we require both mmx and sse, not just one of\nthose, and later on for other option combinations very similar rule has\nbeen clarified, with a few exceptions that ix86_expand_builtin lists\n(SSE | 3DNOW_A, SSE4_2 | CRC32 and FMA | FMA4 are one or the other).\nThe above mentioned patch also added OPTION_MASK_ISA_MMX to a few insns\nthat in the ISA documents are documented e.g. only requiring SSE2 or SSSE3\netc. CPUID, but because those builtins take or return V2SI or similar\nMMX-ish arguments, we can't really support those builtins in functions that\nhave MMX disabled.\nNow, during the TARGET_MMX_WITH_SSE changes,\nhttps://gcc.gnu.org/ml/gcc-patches/2019-02/msg01479.html\nand\nhttps://gcc.gnu.org/ml/gcc-patches/2019-05/msg01084.html\nactually changed this; it added | OPTION_MASK_ISA_SSE2 to builtins\nthat were formerly OPTION_MASK_ISA_MMX only, but didn't touch the builtins\nthat were already using OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_MMX\nfor something different (both options must be enabled).\nThis causes e.g. ICE on the following testcase, because the builtins are\nnow enabled even with just -mmmx -mno-sse2, even when they (those changed in\n2017) require SSE2.\nThe following patch instead reverts the above two 2019-ish changes (except\nfor header/testsuite changes), and instead treats OPTION_MASK_ISA_MMX\nrequirement in bdesc/.isa specially, as being satisfied by either\nTARGET_MMX (no changes really needed for that), or by TARGET_MMX_WITH_SSE.\nThis achieves what the two 2019-ish patches want to do, that the\nOPTION_MASK_ISA_MMX only builtins are enabled not just with -mmmx, but also\nwith -m64 -msse2, and for the other builtins that require MMX and something\nelse will either require -mmmx and that some other ISA, or -m64 -msse2 and\nthat other ISA, but -mmmx will not enable builtins that need something more\nthan OPTION_MASK_ISA_MMX only.\nThe i386-builtins.c changes that aren't reversion of the two patches try to\nmake sure that in .isa we still record OPTION_MASK_ISA_MMX for builtins that\nhave that requirement, so that it is in the end only ix86_expand_builtin\nthat decides if the builtin is ok or not and the rest of code just decides\nif it is the right time to declare the builtin already or if it should be\ndeferred.\n\n2020-04-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94461\n\t* config/i386/i386-expand.c (ix86_expand_builtin): If\n\tTARGET_MMX_WITH_SSE without TARGET_MMX and bisa contains\n\tOPTION_MASK_ISA_MMX, clear OPTION_MASK_ISA_MMX and set\n\tOPTION_MASK_ISA_SSE2 in bisa.  Revert 2019-05-17 and 2019-05-15\n\tchanges.\n\t* config/i386/i386-builtins.c (def_builtin): If mask includes\n\tOPTION_MASK_ISA_MMX and TARGET_MMX_WITH_SSE, consider it satisfied.\n\t(ix86_add_new_builtins): For TARGET_64BIT, consider\n\tOPTION_MASK_ISA_SSE2 enabled in isa as satisfying OPTION_MASK_ISA_MMX\n\trequirement.\n\t(ix86_init_tm_builtins): If TARGET_MMX_WITH_SSE consider\n\tOPTION_MASK_ISA_MMX as satisfied.\n\t(bdesc_tm): Revert 2019-05-15 changes.\n\t(ix86_init_mmx_sse_builtins): Likewise.\n\t* config/i386/i386-builtin.def: Likewise.\n\n\t* gcc.target/i386/pr94461.c: New test.", "tree": {"sha": "28507d0ee09fdd4c8999d0f274671a42c98efd24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28507d0ee09fdd4c8999d0f274671a42c98efd24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a13d6ec867e750169af95649235a6681f410464a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13d6ec867e750169af95649235a6681f410464a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a13d6ec867e750169af95649235a6681f410464a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13d6ec867e750169af95649235a6681f410464a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcafd8748cf9eb83a9e71bf67c4e2a7c5c8f513c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcafd8748cf9eb83a9e71bf67c4e2a7c5c8f513c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcafd8748cf9eb83a9e71bf67c4e2a7c5c8f513c"}], "stats": {"total": 202, "additions": 105, "deletions": 97}, "files": [{"sha": "bae561bc7f4fc2e9ab3c728c53af60b6e8282cce", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13d6ec867e750169af95649235a6681f410464a/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13d6ec867e750169af95649235a6681f410464a/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=a13d6ec867e750169af95649235a6681f410464a", "patch": "@@ -100,7 +100,7 @@ BDESC (0, 0, CODE_FOR_fnstsw, \"__builtin_ia32_fnstsw\", IX86_BUILTIN_FNSTSW, UNKN\n BDESC (0, 0, CODE_FOR_fnclex, \"__builtin_ia32_fnclex\", IX86_BUILTIN_FNCLEX, UNKNOWN, (int) VOID_FTYPE_VOID)\n \n /* MMX */\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_emms, \"__builtin_ia32_emms\", IX86_BUILTIN_EMMS, UNKNOWN, (int) VOID_FTYPE_VOID)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_emms, \"__builtin_ia32_emms\", IX86_BUILTIN_EMMS, UNKNOWN, (int) VOID_FTYPE_VOID)\n \n /* 3DNow! */\n BDESC (OPTION_MASK_ISA_3DNOW, 0, CODE_FOR_mmx_femms, \"__builtin_ia32_femms\", IX86_BUILTIN_FEMMS, UNKNOWN, (int) VOID_FTYPE_VOID)\n@@ -458,68 +458,68 @@ BDESC (0, 0, CODE_FOR_rotrqi3, \"__builtin_ia32_rorqi\", IX86_BUILTIN_RORQI, UNKNO\n BDESC (0, 0, CODE_FOR_rotrhi3, \"__builtin_ia32_rorhi\", IX86_BUILTIN_RORHI, UNKNOWN, (int) UINT16_FTYPE_UINT16_INT)\n \n /* MMX */\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_addv8qi3, \"__builtin_ia32_paddb\", IX86_BUILTIN_PADDB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_addv4hi3, \"__builtin_ia32_paddw\", IX86_BUILTIN_PADDW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_addv2si3, \"__builtin_ia32_paddd\", IX86_BUILTIN_PADDD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_subv8qi3, \"__builtin_ia32_psubb\", IX86_BUILTIN_PSUBB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_subv4hi3, \"__builtin_ia32_psubw\", IX86_BUILTIN_PSUBW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_subv2si3, \"__builtin_ia32_psubd\", IX86_BUILTIN_PSUBD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n-\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ssaddv8qi3, \"__builtin_ia32_paddsb\", IX86_BUILTIN_PADDSB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ssaddv4hi3, \"__builtin_ia32_paddsw\", IX86_BUILTIN_PADDSW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_sssubv8qi3, \"__builtin_ia32_psubsb\", IX86_BUILTIN_PSUBSB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_sssubv4hi3, \"__builtin_ia32_psubsw\", IX86_BUILTIN_PSUBSW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_usaddv8qi3, \"__builtin_ia32_paddusb\", IX86_BUILTIN_PADDUSB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_usaddv4hi3, \"__builtin_ia32_paddusw\", IX86_BUILTIN_PADDUSW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ussubv8qi3, \"__builtin_ia32_psubusb\", IX86_BUILTIN_PSUBUSB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ussubv4hi3, \"__builtin_ia32_psubusw\", IX86_BUILTIN_PSUBUSW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_mulv4hi3, \"__builtin_ia32_pmullw\", IX86_BUILTIN_PMULLW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_smulv4hi3_highpart, \"__builtin_ia32_pmulhw\", IX86_BUILTIN_PMULHW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_andv2si3, \"__builtin_ia32_pand\", IX86_BUILTIN_PAND, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_andnotv2si3, \"__builtin_ia32_pandn\", IX86_BUILTIN_PANDN, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_iorv2si3, \"__builtin_ia32_por\", IX86_BUILTIN_POR, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_xorv2si3, \"__builtin_ia32_pxor\", IX86_BUILTIN_PXOR, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n-\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_eqv8qi3, \"__builtin_ia32_pcmpeqb\", IX86_BUILTIN_PCMPEQB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_eqv4hi3, \"__builtin_ia32_pcmpeqw\", IX86_BUILTIN_PCMPEQW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_eqv2si3, \"__builtin_ia32_pcmpeqd\", IX86_BUILTIN_PCMPEQD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_gtv8qi3, \"__builtin_ia32_pcmpgtb\", IX86_BUILTIN_PCMPGTB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_gtv4hi3, \"__builtin_ia32_pcmpgtw\", IX86_BUILTIN_PCMPGTW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_gtv2si3, \"__builtin_ia32_pcmpgtd\", IX86_BUILTIN_PCMPGTD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n-\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_punpckhbw, \"__builtin_ia32_punpckhbw\", IX86_BUILTIN_PUNPCKHBW, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_punpckhwd, \"__builtin_ia32_punpckhwd\", IX86_BUILTIN_PUNPCKHWD, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_punpckhdq, \"__builtin_ia32_punpckhdq\", IX86_BUILTIN_PUNPCKHDQ, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_punpcklbw, \"__builtin_ia32_punpcklbw\", IX86_BUILTIN_PUNPCKLBW, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_punpcklwd, \"__builtin_ia32_punpcklwd\", IX86_BUILTIN_PUNPCKLWD, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_punpckldq, \"__builtin_ia32_punpckldq\", IX86_BUILTIN_PUNPCKLDQ, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n-\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_packsswb, \"__builtin_ia32_packsswb\", IX86_BUILTIN_PACKSSWB, UNKNOWN, (int) V8QI_FTYPE_V4HI_V4HI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_packssdw, \"__builtin_ia32_packssdw\", IX86_BUILTIN_PACKSSDW, UNKNOWN, (int) V4HI_FTYPE_V2SI_V2SI)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_packuswb, \"__builtin_ia32_packuswb\", IX86_BUILTIN_PACKUSWB, UNKNOWN, (int) V8QI_FTYPE_V4HI_V4HI)\n-\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_pmaddwd, \"__builtin_ia32_pmaddwd\", IX86_BUILTIN_PMADDWD, UNKNOWN, (int) V2SI_FTYPE_V4HI_V4HI)\n-\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ashlv4hi3, \"__builtin_ia32_psllwi\", IX86_BUILTIN_PSLLWI, UNKNOWN, (int) V4HI_FTYPE_V4HI_SI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ashlv2si3, \"__builtin_ia32_pslldi\", IX86_BUILTIN_PSLLDI, UNKNOWN, (int) V2SI_FTYPE_V2SI_SI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ashlv1di3, \"__builtin_ia32_psllqi\", IX86_BUILTIN_PSLLQI, UNKNOWN, (int) V1DI_FTYPE_V1DI_SI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ashlv4hi3, \"__builtin_ia32_psllw\", IX86_BUILTIN_PSLLW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ashlv2si3, \"__builtin_ia32_pslld\", IX86_BUILTIN_PSLLD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ashlv1di3, \"__builtin_ia32_psllq\", IX86_BUILTIN_PSLLQ, UNKNOWN, (int) V1DI_FTYPE_V1DI_V1DI_COUNT)\n-\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_lshrv4hi3, \"__builtin_ia32_psrlwi\", IX86_BUILTIN_PSRLWI, UNKNOWN, (int) V4HI_FTYPE_V4HI_SI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_lshrv2si3, \"__builtin_ia32_psrldi\", IX86_BUILTIN_PSRLDI, UNKNOWN, (int) V2SI_FTYPE_V2SI_SI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_lshrv1di3, \"__builtin_ia32_psrlqi\", IX86_BUILTIN_PSRLQI, UNKNOWN, (int) V1DI_FTYPE_V1DI_SI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_lshrv4hi3, \"__builtin_ia32_psrlw\", IX86_BUILTIN_PSRLW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_lshrv2si3, \"__builtin_ia32_psrld\", IX86_BUILTIN_PSRLD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_lshrv1di3, \"__builtin_ia32_psrlq\", IX86_BUILTIN_PSRLQ, UNKNOWN, (int) V1DI_FTYPE_V1DI_V1DI_COUNT)\n-\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ashrv4hi3, \"__builtin_ia32_psrawi\", IX86_BUILTIN_PSRAWI, UNKNOWN, (int) V4HI_FTYPE_V4HI_SI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ashrv2si3, \"__builtin_ia32_psradi\", IX86_BUILTIN_PSRADI, UNKNOWN, (int) V2SI_FTYPE_V2SI_SI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ashrv4hi3, \"__builtin_ia32_psraw\", IX86_BUILTIN_PSRAW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI_COUNT)\n-BDESC (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_mmx_ashrv2si3, \"__builtin_ia32_psrad\", IX86_BUILTIN_PSRAD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_addv8qi3, \"__builtin_ia32_paddb\", IX86_BUILTIN_PADDB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_addv4hi3, \"__builtin_ia32_paddw\", IX86_BUILTIN_PADDW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_addv2si3, \"__builtin_ia32_paddd\", IX86_BUILTIN_PADDD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_subv8qi3, \"__builtin_ia32_psubb\", IX86_BUILTIN_PSUBB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_subv4hi3, \"__builtin_ia32_psubw\", IX86_BUILTIN_PSUBW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_subv2si3, \"__builtin_ia32_psubd\", IX86_BUILTIN_PSUBD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n+\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ssaddv8qi3, \"__builtin_ia32_paddsb\", IX86_BUILTIN_PADDSB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ssaddv4hi3, \"__builtin_ia32_paddsw\", IX86_BUILTIN_PADDSW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_sssubv8qi3, \"__builtin_ia32_psubsb\", IX86_BUILTIN_PSUBSB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_sssubv4hi3, \"__builtin_ia32_psubsw\", IX86_BUILTIN_PSUBSW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_usaddv8qi3, \"__builtin_ia32_paddusb\", IX86_BUILTIN_PADDUSB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_usaddv4hi3, \"__builtin_ia32_paddusw\", IX86_BUILTIN_PADDUSW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ussubv8qi3, \"__builtin_ia32_psubusb\", IX86_BUILTIN_PSUBUSB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ussubv4hi3, \"__builtin_ia32_psubusw\", IX86_BUILTIN_PSUBUSW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_mulv4hi3, \"__builtin_ia32_pmullw\", IX86_BUILTIN_PMULLW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_smulv4hi3_highpart, \"__builtin_ia32_pmulhw\", IX86_BUILTIN_PMULHW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_andv2si3, \"__builtin_ia32_pand\", IX86_BUILTIN_PAND, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_andnotv2si3, \"__builtin_ia32_pandn\", IX86_BUILTIN_PANDN, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_iorv2si3, \"__builtin_ia32_por\", IX86_BUILTIN_POR, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_xorv2si3, \"__builtin_ia32_pxor\", IX86_BUILTIN_PXOR, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n+\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_eqv8qi3, \"__builtin_ia32_pcmpeqb\", IX86_BUILTIN_PCMPEQB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_eqv4hi3, \"__builtin_ia32_pcmpeqw\", IX86_BUILTIN_PCMPEQW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_eqv2si3, \"__builtin_ia32_pcmpeqd\", IX86_BUILTIN_PCMPEQD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_gtv8qi3, \"__builtin_ia32_pcmpgtb\", IX86_BUILTIN_PCMPGTB, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_gtv4hi3, \"__builtin_ia32_pcmpgtw\", IX86_BUILTIN_PCMPGTW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_gtv2si3, \"__builtin_ia32_pcmpgtd\", IX86_BUILTIN_PCMPGTD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n+\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_punpckhbw, \"__builtin_ia32_punpckhbw\", IX86_BUILTIN_PUNPCKHBW, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_punpckhwd, \"__builtin_ia32_punpckhwd\", IX86_BUILTIN_PUNPCKHWD, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_punpckhdq, \"__builtin_ia32_punpckhdq\", IX86_BUILTIN_PUNPCKHDQ, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_punpcklbw, \"__builtin_ia32_punpcklbw\", IX86_BUILTIN_PUNPCKLBW, UNKNOWN, (int) V8QI_FTYPE_V8QI_V8QI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_punpcklwd, \"__builtin_ia32_punpcklwd\", IX86_BUILTIN_PUNPCKLWD, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_punpckldq, \"__builtin_ia32_punpckldq\", IX86_BUILTIN_PUNPCKLDQ, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI)\n+\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_packsswb, \"__builtin_ia32_packsswb\", IX86_BUILTIN_PACKSSWB, UNKNOWN, (int) V8QI_FTYPE_V4HI_V4HI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_packssdw, \"__builtin_ia32_packssdw\", IX86_BUILTIN_PACKSSDW, UNKNOWN, (int) V4HI_FTYPE_V2SI_V2SI)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_packuswb, \"__builtin_ia32_packuswb\", IX86_BUILTIN_PACKUSWB, UNKNOWN, (int) V8QI_FTYPE_V4HI_V4HI)\n+\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_pmaddwd, \"__builtin_ia32_pmaddwd\", IX86_BUILTIN_PMADDWD, UNKNOWN, (int) V2SI_FTYPE_V4HI_V4HI)\n+\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ashlv4hi3, \"__builtin_ia32_psllwi\", IX86_BUILTIN_PSLLWI, UNKNOWN, (int) V4HI_FTYPE_V4HI_SI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ashlv2si3, \"__builtin_ia32_pslldi\", IX86_BUILTIN_PSLLDI, UNKNOWN, (int) V2SI_FTYPE_V2SI_SI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ashlv1di3, \"__builtin_ia32_psllqi\", IX86_BUILTIN_PSLLQI, UNKNOWN, (int) V1DI_FTYPE_V1DI_SI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ashlv4hi3, \"__builtin_ia32_psllw\", IX86_BUILTIN_PSLLW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ashlv2si3, \"__builtin_ia32_pslld\", IX86_BUILTIN_PSLLD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ashlv1di3, \"__builtin_ia32_psllq\", IX86_BUILTIN_PSLLQ, UNKNOWN, (int) V1DI_FTYPE_V1DI_V1DI_COUNT)\n+\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_lshrv4hi3, \"__builtin_ia32_psrlwi\", IX86_BUILTIN_PSRLWI, UNKNOWN, (int) V4HI_FTYPE_V4HI_SI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_lshrv2si3, \"__builtin_ia32_psrldi\", IX86_BUILTIN_PSRLDI, UNKNOWN, (int) V2SI_FTYPE_V2SI_SI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_lshrv1di3, \"__builtin_ia32_psrlqi\", IX86_BUILTIN_PSRLQI, UNKNOWN, (int) V1DI_FTYPE_V1DI_SI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_lshrv4hi3, \"__builtin_ia32_psrlw\", IX86_BUILTIN_PSRLW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_lshrv2si3, \"__builtin_ia32_psrld\", IX86_BUILTIN_PSRLD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_lshrv1di3, \"__builtin_ia32_psrlq\", IX86_BUILTIN_PSRLQ, UNKNOWN, (int) V1DI_FTYPE_V1DI_V1DI_COUNT)\n+\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ashrv4hi3, \"__builtin_ia32_psrawi\", IX86_BUILTIN_PSRAWI, UNKNOWN, (int) V4HI_FTYPE_V4HI_SI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ashrv2si3, \"__builtin_ia32_psradi\", IX86_BUILTIN_PSRADI, UNKNOWN, (int) V2SI_FTYPE_V2SI_SI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ashrv4hi3, \"__builtin_ia32_psraw\", IX86_BUILTIN_PSRAW, UNKNOWN, (int) V4HI_FTYPE_V4HI_V4HI_COUNT)\n+BDESC (OPTION_MASK_ISA_MMX, 0, CODE_FOR_mmx_ashrv2si3, \"__builtin_ia32_psrad\", IX86_BUILTIN_PSRAD, UNKNOWN, (int) V2SI_FTYPE_V2SI_V2SI_COUNT)\n \n /* 3DNow! */\n BDESC (OPTION_MASK_ISA_3DNOW, 0, CODE_FOR_mmx_pf2id, \"__builtin_ia32_pf2id\", IX86_BUILTIN_PF2ID, UNKNOWN, (int) V2SI_FTYPE_V2SF)"}, {"sha": "4b20363542860b74aa9dbe64d5f7efbe1ff6c54a", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13d6ec867e750169af95649235a6681f410464a/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13d6ec867e750169af95649235a6681f410464a/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=a13d6ec867e750169af95649235a6681f410464a", "patch": "@@ -274,6 +274,7 @@ def_builtin (HOST_WIDE_INT mask, HOST_WIDE_INT mask2,\n \n       if (((mask2 == 0 || (mask2 & ix86_isa_flags2) != 0)\n \t   && (mask == 0 || (mask & ix86_isa_flags) != 0))\n+\t  || ((mask & OPTION_MASK_ISA_MMX) != 0 && TARGET_MMX_WITH_SSE)\n \t  || (lang_hooks.builtin_function\n \t      == lang_hooks.builtin_function_ext_scope))\n \t{\n@@ -341,12 +342,16 @@ ix86_add_new_builtins (HOST_WIDE_INT isa, HOST_WIDE_INT isa2)\n   isa &= ~OPTION_MASK_ISA_64BIT;\n \n   if ((isa & deferred_isa_values) == 0\n-      && (isa2 & deferred_isa_values2) == 0)\n+      && (isa2 & deferred_isa_values2) == 0\n+      && ((deferred_isa_values & OPTION_MASK_ISA_MMX) == 0\n+\t  || !(TARGET_64BIT && (isa & OPTION_MASK_ISA_SSE2) != 0)))\n     return;\n \n   /* Bits in ISA value can be removed from potential isa values.  */\n   deferred_isa_values &= ~isa;\n   deferred_isa_values2 &= ~isa2;\n+  if (TARGET_64BIT && (isa & OPTION_MASK_ISA_SSE2) != 0)\n+    deferred_isa_values &= ~OPTION_MASK_ISA_MMX;\n \n   int i;\n   tree saved_current_target_pragma = current_target_pragma;\n@@ -355,7 +360,10 @@ ix86_add_new_builtins (HOST_WIDE_INT isa, HOST_WIDE_INT isa2)\n   for (i = 0; i < (int)IX86_BUILTIN_MAX; i++)\n     {\n       if (((ix86_builtins_isa[i].isa & isa) != 0\n-\t   || (ix86_builtins_isa[i].isa2 & isa2) != 0)\n+\t   || (ix86_builtins_isa[i].isa2 & isa2) != 0\n+\t   || ((ix86_builtins_isa[i].isa & OPTION_MASK_ISA_MMX) != 0\n+\t       && TARGET_64BIT\n+\t       && (isa & OPTION_MASK_ISA_SSE2) != 0))\n \t  && ix86_builtins_isa[i].set_and_not_built_p)\n \t{\n \t  tree decl, type;\n@@ -383,13 +391,13 @@ ix86_add_new_builtins (HOST_WIDE_INT isa, HOST_WIDE_INT isa2)\n    we're lazy.  Add casts to make them fit.  */\n static const struct builtin_description bdesc_tm[] =\n {\n-  { OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin__ITM_WM64\", (enum ix86_builtins) BUILT_IN_TM_STORE_M64, UNKNOWN, VOID_FTYPE_PV2SI_V2SI },\n-  { OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin__ITM_WaRM64\", (enum ix86_builtins) BUILT_IN_TM_STORE_WAR_M64, UNKNOWN, VOID_FTYPE_PV2SI_V2SI },\n-  { OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin__ITM_WaWM64\", (enum ix86_builtins) BUILT_IN_TM_STORE_WAW_M64, UNKNOWN, VOID_FTYPE_PV2SI_V2SI },\n-  { OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin__ITM_RM64\", (enum ix86_builtins) BUILT_IN_TM_LOAD_M64, UNKNOWN, V2SI_FTYPE_PCV2SI },\n-  { OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin__ITM_RaRM64\", (enum ix86_builtins) BUILT_IN_TM_LOAD_RAR_M64, UNKNOWN, V2SI_FTYPE_PCV2SI },\n-  { OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin__ITM_RaWM64\", (enum ix86_builtins) BUILT_IN_TM_LOAD_RAW_M64, UNKNOWN, V2SI_FTYPE_PCV2SI },\n-  { OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin__ITM_RfWM64\", (enum ix86_builtins) BUILT_IN_TM_LOAD_RFW_M64, UNKNOWN, V2SI_FTYPE_PCV2SI },\n+  { OPTION_MASK_ISA_MMX, 0, CODE_FOR_nothing, \"__builtin__ITM_WM64\", (enum ix86_builtins) BUILT_IN_TM_STORE_M64, UNKNOWN, VOID_FTYPE_PV2SI_V2SI },\n+  { OPTION_MASK_ISA_MMX, 0, CODE_FOR_nothing, \"__builtin__ITM_WaRM64\", (enum ix86_builtins) BUILT_IN_TM_STORE_WAR_M64, UNKNOWN, VOID_FTYPE_PV2SI_V2SI },\n+  { OPTION_MASK_ISA_MMX, 0, CODE_FOR_nothing, \"__builtin__ITM_WaWM64\", (enum ix86_builtins) BUILT_IN_TM_STORE_WAW_M64, UNKNOWN, VOID_FTYPE_PV2SI_V2SI },\n+  { OPTION_MASK_ISA_MMX, 0, CODE_FOR_nothing, \"__builtin__ITM_RM64\", (enum ix86_builtins) BUILT_IN_TM_LOAD_M64, UNKNOWN, V2SI_FTYPE_PCV2SI },\n+  { OPTION_MASK_ISA_MMX, 0, CODE_FOR_nothing, \"__builtin__ITM_RaRM64\", (enum ix86_builtins) BUILT_IN_TM_LOAD_RAR_M64, UNKNOWN, V2SI_FTYPE_PCV2SI },\n+  { OPTION_MASK_ISA_MMX, 0, CODE_FOR_nothing, \"__builtin__ITM_RaWM64\", (enum ix86_builtins) BUILT_IN_TM_LOAD_RAW_M64, UNKNOWN, V2SI_FTYPE_PCV2SI },\n+  { OPTION_MASK_ISA_MMX, 0, CODE_FOR_nothing, \"__builtin__ITM_RfWM64\", (enum ix86_builtins) BUILT_IN_TM_LOAD_RFW_M64, UNKNOWN, V2SI_FTYPE_PCV2SI },\n \n   { OPTION_MASK_ISA_SSE, 0, CODE_FOR_nothing, \"__builtin__ITM_WM128\", (enum ix86_builtins) BUILT_IN_TM_STORE_M128, UNKNOWN, VOID_FTYPE_PV4SF_V4SF },\n   { OPTION_MASK_ISA_SSE, 0, CODE_FOR_nothing, \"__builtin__ITM_WaRM128\", (enum ix86_builtins) BUILT_IN_TM_STORE_WAR_M128, UNKNOWN, VOID_FTYPE_PV4SF_V4SF },\n@@ -407,7 +415,7 @@ static const struct builtin_description bdesc_tm[] =\n   { OPTION_MASK_ISA_AVX, 0, CODE_FOR_nothing, \"__builtin__ITM_RaWM256\", (enum ix86_builtins) BUILT_IN_TM_LOAD_RAW_M256, UNKNOWN, V8SF_FTYPE_PCV8SF },\n   { OPTION_MASK_ISA_AVX, 0, CODE_FOR_nothing, \"__builtin__ITM_RfWM256\", (enum ix86_builtins) BUILT_IN_TM_LOAD_RFW_M256, UNKNOWN, V8SF_FTYPE_PCV8SF },\n \n-  { OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0, CODE_FOR_nothing, \"__builtin__ITM_LM64\", (enum ix86_builtins) BUILT_IN_TM_LOG_M64, UNKNOWN, VOID_FTYPE_PCVOID },\n+  { OPTION_MASK_ISA_MMX, 0, CODE_FOR_nothing, \"__builtin__ITM_LM64\", (enum ix86_builtins) BUILT_IN_TM_LOG_M64, UNKNOWN, VOID_FTYPE_PCVOID },\n   { OPTION_MASK_ISA_SSE, 0, CODE_FOR_nothing, \"__builtin__ITM_LM128\", (enum ix86_builtins) BUILT_IN_TM_LOG_M128, UNKNOWN, VOID_FTYPE_PCVOID },\n   { OPTION_MASK_ISA_AVX, 0, CODE_FOR_nothing, \"__builtin__ITM_LM256\", (enum ix86_builtins) BUILT_IN_TM_LOG_M256, UNKNOWN, VOID_FTYPE_PCVOID },\n };\n@@ -450,6 +458,7 @@ ix86_init_tm_builtins (void)\n        i++, d++)\n     {\n       if ((d->mask & ix86_isa_flags) != 0\n+\t  || ((d->mask & OPTION_MASK_ISA_MMX) != 0 && TARGET_MMX_WITH_SSE)\n \t  || (lang_hooks.builtin_function\n \t      == lang_hooks.builtin_function_ext_scope))\n \t{\n@@ -1057,16 +1066,16 @@ ix86_init_mmx_sse_builtins (void)\n \t       VOID_FTYPE_UNSIGNED, IX86_BUILTIN_XABORT);\n \n   /* MMX access to the vec_init patterns.  */\n-  def_builtin_const (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0,\n+  def_builtin_const (OPTION_MASK_ISA_MMX, 0,\n \t\t     \"__builtin_ia32_vec_init_v2si\",\n \t\t     V2SI_FTYPE_INT_INT, IX86_BUILTIN_VEC_INIT_V2SI);\n \n-  def_builtin_const (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0,\n+  def_builtin_const (OPTION_MASK_ISA_MMX, 0,\n \t\t     \"__builtin_ia32_vec_init_v4hi\",\n \t\t     V4HI_FTYPE_HI_HI_HI_HI,\n \t\t     IX86_BUILTIN_VEC_INIT_V4HI);\n \n-  def_builtin_const (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0,\n+  def_builtin_const (OPTION_MASK_ISA_MMX, 0,\n \t\t     \"__builtin_ia32_vec_init_v8qi\",\n \t\t     V8QI_FTYPE_QI_QI_QI_QI_QI_QI_QI_QI,\n \t\t     IX86_BUILTIN_VEC_INIT_V8QI);\n@@ -1089,7 +1098,7 @@ ix86_init_mmx_sse_builtins (void)\n \t\t     \"__builtin_ia32_vec_ext_v4hi\",\n \t\t     HI_FTYPE_V4HI_INT, IX86_BUILTIN_VEC_EXT_V4HI);\n \n-  def_builtin_const (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE2, 0,\n+  def_builtin_const (OPTION_MASK_ISA_MMX, 0,\n \t\t     \"__builtin_ia32_vec_ext_v2si\",\n \t\t     SI_FTYPE_V2SI_INT, IX86_BUILTIN_VEC_EXT_V2SI);\n "}, {"sha": "8e623b3707fbf11c4d63017d07ef9d38cb288646", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13d6ec867e750169af95649235a6681f410464a/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13d6ec867e750169af95649235a6681f410464a/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=a13d6ec867e750169af95649235a6681f410464a", "patch": "@@ -10968,8 +10968,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n      OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A\n      OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32\n      OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4\n-     where for each this pair it is sufficient if either of the ISAs is\n-     enabled, plus if it is ored with other options also those others.  */\n+     where for each such pair it is sufficient if either of the ISAs is\n+     enabled, plus if it is ored with other options also those others.\n+     OPTION_MASK_ISA_MMX in bisa is satisfied also if TARGET_MMX_WITH_SSE.  */\n   if (((bisa & (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A))\n        == (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A))\n       && (isa & (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_3DNOW_A)) != 0)\n@@ -10982,24 +10983,10 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n        == (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4))\n       && (isa & (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4)) != 0)\n     isa |= (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4);\n-  /* Use SSE/SSE2/SSSE3 to emulate MMX intrinsics in 64-bit mode when\n-     MMX is disabled.  NB: Since MMX intrinsics are marked with\n-     SSE/SSE2/SSSE3, enable them without SSE/SSE2/SSSE3 if MMX is\n-     enabled.  */\n-  if (TARGET_MMX || TARGET_MMX_WITH_SSE)\n-    {\n-      if (((bisa & (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_MMX))\n-\t   == (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_MMX))\n-\t  && (isa & (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_MMX)) != 0)\n-\tisa |= (OPTION_MASK_ISA_SSE | OPTION_MASK_ISA_MMX);\n-      if (((bisa & (OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_MMX))\n-\t   == (OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_MMX))\n-\t  && (isa & (OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_MMX)) != 0)\n-\tisa |= (OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_MMX);\n-      if (((bisa & (OPTION_MASK_ISA_SSSE3 | OPTION_MASK_ISA_MMX))\n-\t   == (OPTION_MASK_ISA_SSSE3 | OPTION_MASK_ISA_MMX))\n-\t  && (isa & (OPTION_MASK_ISA_SSSE3 | OPTION_MASK_ISA_MMX)) != 0)\n-\tisa |= (OPTION_MASK_ISA_SSSE3 | OPTION_MASK_ISA_MMX);\n+  if ((bisa & OPTION_MASK_ISA_MMX) && !TARGET_MMX && TARGET_MMX_WITH_SSE)\n+    {\n+      bisa &= ~OPTION_MASK_ISA_MMX;\n+      bisa |= OPTION_MASK_ISA_SSE2;\n     }\n   if ((bisa & isa) != bisa || (bisa2 & isa2) != bisa2)\n     {"}, {"sha": "1046fac1b026e5d2f597abceb213bd8c64a90a26", "filename": "gcc/testsuite/gcc.target/i386/pr94461.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a13d6ec867e750169af95649235a6681f410464a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94461.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a13d6ec867e750169af95649235a6681f410464a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94461.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94461.c?ref=a13d6ec867e750169af95649235a6681f410464a", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/94461 */\n+/* { dg-do compile } */\n+/* { dg-options \"-mmmx -mno-sse2\" } */\n+\n+typedef int __v2si __attribute__ ((__vector_size__ (8)));\n+\n+void\n+foo (__v2si *a, __v2si *b)\n+{\n+  __v2si c = *a;\n+  *b = (__v2si) __builtin_ia32_pmuludq (c, c);\t/* { dg-error \"needs isa option\" } */\n+}"}]}