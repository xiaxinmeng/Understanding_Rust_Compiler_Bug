{"sha": "401f66999f930fde26fe1d5602371b319ddd9f25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAxZjY2OTk5ZjkzMGZkZTI2ZmUxZDU2MDIzNzFiMzE5ZGRkOWYyNQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2011-04-22T03:58:15Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2011-04-22T03:58:15Z"}, "message": "rs6000.c (rs6000_function_arg): Remove CALL_LIBCALL when returning call_cookie.\n\ngcc/\n\t* config/rs6000/rs6000.c (rs6000_function_arg): Remove CALL_LIBCALL\n\twhen returning call_cookie.\n\t(rs6000_function_ok_for_sibcall): Allow sibcalls via function\n\tpointers, to functions with no more vector args than the current\n\tfunction, and some non-local calls for ABI_V4.\n\t* config/rs6000/rs6000.md (sibcall_nonlocal_aix32,\n\tsibcall_nonlocal_aix64): Combine to ..\n\t(sibcall_nonlocal_aix<mode>): ..this.  Handle function pointer calls.\n\t(sibcall_value_nonlocal_aix32, sibcall_value_nonlocal_aix64): Combine..\n\t(sibcall_value_nonlocal_aix<mode>): ..likewise.\n\t(*sibcall_nonlocal_sysv<mode>): Handle function pointer calls.\n\t(sibcall_value_nonlocal_sysv<mode>): Likewise.  Correct call cookie\n\toperand.\n\t* config/rs6000/darwin.md (sibcall_nonlocal_darwin64,\n\tsibcall_value_nonlocal_darwin64, sibcall_symbolic_64,\n\tsibcall_value_symbolic_64): Delete.\ngcc/testsuite/\n\t* gcc.target/powerpc/ppc-pow.c: Allow for tail calls.\n\nFrom-SVN: r172855", "tree": {"sha": "d6860081e6a2a506b137d064f1efde41a7f0e3cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6860081e6a2a506b137d064f1efde41a7f0e3cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/401f66999f930fde26fe1d5602371b319ddd9f25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401f66999f930fde26fe1d5602371b319ddd9f25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/401f66999f930fde26fe1d5602371b319ddd9f25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401f66999f930fde26fe1d5602371b319ddd9f25/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98e2d9343649af6f9e1d164fe04b3cb3706dc75e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e2d9343649af6f9e1d164fe04b3cb3706dc75e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e2d9343649af6f9e1d164fe04b3cb3706dc75e"}], "stats": {"total": 273, "additions": 118, "deletions": 155}, "files": [{"sha": "ec3b8d1ba8badb9dc8be9cd2c8749d889b9d992a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=401f66999f930fde26fe1d5602371b319ddd9f25", "patch": "@@ -1,3 +1,22 @@\n+2011-04-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_function_arg): Remove CALL_LIBCALL\n+\twhen returning call_cookie.\n+\t(rs6000_function_ok_for_sibcall): Allow sibcalls via function\n+\tpointers, to functions with no more vector args than the current\n+\tfunction, and some non-local calls for ABI_V4.\n+\t* config/rs6000/rs6000.md (sibcall_nonlocal_aix32,\n+\tsibcall_nonlocal_aix64): Combine to ..\n+\t(sibcall_nonlocal_aix<mode>): ..this.  Handle function pointer calls.\n+\t(sibcall_value_nonlocal_aix32, sibcall_value_nonlocal_aix64): Combine..\n+\t(sibcall_value_nonlocal_aix<mode>): ..likewise.\n+\t(*sibcall_nonlocal_sysv<mode>): Handle function pointer calls.\n+\t(sibcall_value_nonlocal_sysv<mode>): Likewise.  Correct call cookie\n+\toperand.\n+\t* config/rs6000/darwin.md (sibcall_nonlocal_darwin64,\n+\tsibcall_value_nonlocal_darwin64, sibcall_symbolic_64,\n+\tsibcall_value_symbolic_64): Delete.\n+\n 2011-04-21  Xinliang David Li  <davidxl@google.com>\n \n \t* cgraph.h: Remove pid."}, {"sha": "e811822223a6f08ea7a5fda48c82ac2d32902689", "filename": "gcc/config/rs6000/darwin.md", "status": "modified", "additions": 1, "deletions": 71, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=401f66999f930fde26fe1d5602371b319ddd9f25", "patch": "@@ -1,5 +1,5 @@\n /* Machine description patterns for PowerPC running Darwin (Mac OS X).\n-   Copyright (C) 2004, 2005, 2007, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Apple Computer Inc.\n \n This file is part of GCC.\n@@ -370,73 +370,3 @@ You should have received a copy of the GNU General Public License\n }\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*sibcall_nonlocal_darwin64\"\n-  [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s,s\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (use (match_operand 2 \"immediate_operand\" \"O,n\"))\n-   (use (reg:SI 65))\n-   (return)]\n-  \"(DEFAULT_ABI == ABI_DARWIN)\n-   && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n-{\n-  return \"b %z0\";\n-}\n-  [(set_attr \"type\" \"branch,branch\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_insn \"*sibcall_value_nonlocal_darwin64\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s,s\"))\n-\t      (match_operand 2 \"\" \"\")))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n-   (use (reg:SI 65))\n-   (return)]\n-  \"(DEFAULT_ABI == ABI_DARWIN)\n-   && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n-  \"*\n-{\n-  return \\\"b %z1\\\";\n-}\"\n-  [(set_attr \"type\" \"branch,branch\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-\n-(define_insn \"*sibcall_symbolic_64\"\n-  [(call (mem:SI (match_operand:DI 0 \"call_operand\" \"s,c\")) ; 64\n-\t (match_operand 1 \"\" \"\"))\n-   (use (match_operand 2 \"\" \"\"))\n-   (use (reg:SI 65))\n-   (return)]\n-  \"TARGET_64BIT && DEFAULT_ABI == ABI_DARWIN\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-      case 0:  return \\\"b %z0\\\";\n-      case 1:  return \\\"b%T0\\\";\n-      default:  gcc_unreachable ();\n-    }\n-}\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"*sibcall_value_symbolic_64\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:DI 1 \"call_operand\" \"s,c\"))\n-\t      (match_operand 2 \"\" \"\")))\n-   (use (match_operand:SI 3 \"\" \"\"))\n-   (use (reg:SI 65))\n-   (return)]\n-  \"TARGET_64BIT && DEFAULT_ABI == ABI_DARWIN\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-      case 0:  return \\\"b %z1\\\";\n-      case 1:  return \\\"b%T1\\\";\n-      default:  gcc_unreachable ();\n-    }\n-}\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4\")])"}, {"sha": "e98b5f39b599cdd0922302e7165932967aaff1fd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 58, "deletions": 27, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=401f66999f930fde26fe1d5602371b319ddd9f25", "patch": "@@ -19307,39 +19307,70 @@ rs6000_return_addr (int count, rtx frame)\n   return get_hard_reg_initial_val (Pmode, LR_REGNO);\n }\n \n-/* Say whether a function is a candidate for sibcall handling or not.\n-   We do not allow indirect calls to be optimized into sibling calls.\n-   Also, we can't do it if there are any vector parameters; there's\n-   nowhere to put the VRsave code so it works; note that functions with\n-   vector parameters are required to have a prototype, so the argument\n-   type info must be available here.  (The tail recursion case can work\n-   with vector parameters, but there's no way to distinguish here.) */\n+/* Say whether a function is a candidate for sibcall handling or not.  */\n+\n static bool\n-rs6000_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n+rs6000_function_ok_for_sibcall (tree decl, tree exp)\n {\n-  tree type;\n+  tree fntype;\n+\n   if (decl)\n+    fntype = TREE_TYPE (decl);\n+  else\n+    fntype = TREE_TYPE (TREE_TYPE (CALL_EXPR_FN (exp)));\n+\n+  /* We can't do it if the called function has more vector parameters\n+     than the current function; there's nowhere to put the VRsave code.  */\n+  if (TARGET_ALTIVEC_ABI\n+      && TARGET_ALTIVEC_VRSAVE\n+      && !(decl && decl == current_function_decl))\n     {\n-      if (TARGET_ALTIVEC_VRSAVE)\n-\t{\n-\t  for (type = TYPE_ARG_TYPES (TREE_TYPE (decl));\n-\t       type; type = TREE_CHAIN (type))\n-\t    {\n-\t      if (TREE_CODE (TREE_VALUE (type)) == VECTOR_TYPE)\n-\t\treturn false;\n-\t    }\n-\t}\n-      if (DEFAULT_ABI == ABI_DARWIN\n-\t  || ((*targetm.binds_local_p) (decl)\n-\t      && (DEFAULT_ABI != ABI_AIX || !DECL_EXTERNAL (decl))))\n-\t{\n-\t  tree attr_list = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n+      function_args_iterator args_iter;\n+      tree type;\n+      int nvreg = 0;\n+\n+      /* Functions with vector parameters are required to have a\n+\t prototype, so the argument type info must be available\n+\t here.  */\n+      FOREACH_FUNCTION_ARGS(fntype, type, args_iter)\n+\tif (TREE_CODE (type) == VECTOR_TYPE\n+\t    && (ALTIVEC_VECTOR_MODE (TYPE_MODE (type))\n+\t\t|| VSX_VECTOR_MODE (TYPE_MODE (type))))\n+\t  nvreg++;\n+\n+      FOREACH_FUNCTION_ARGS(TREE_TYPE (current_function_decl), type, args_iter)\n+\tif (TREE_CODE (type) == VECTOR_TYPE\n+\t    && (ALTIVEC_VECTOR_MODE (TYPE_MODE (type))\n+\t\t|| VSX_VECTOR_MODE (TYPE_MODE (type))))\n+\t  nvreg--;\n+\n+      if (nvreg > 0)\n+\treturn false;\n+    }\n \n-\t  if (!lookup_attribute (\"longcall\", attr_list)\n-\t      || lookup_attribute (\"shortcall\", attr_list))\n-\t    return true;\n-\t}\n+  /* Under the AIX ABI we can't allow calls to non-local functions,\n+     because the callee may have a different TOC pointer to the\n+     caller and there's no way to ensure we restore the TOC when we\n+     return.  With the secure-plt SYSV ABI we can't make non-local\n+     calls when -fpic/PIC because the plt call stubs use r30.  */\n+  if (DEFAULT_ABI == ABI_DARWIN\n+      || (DEFAULT_ABI == ABI_AIX\n+\t  && decl\n+\t  && !DECL_EXTERNAL (decl)\n+\t  && (*targetm.binds_local_p) (decl))\n+      || (DEFAULT_ABI == ABI_V4\n+\t  && (!TARGET_SECURE_PLT\n+\t      || !flag_pic\n+\t      || (decl\n+\t\t  && (*targetm.binds_local_p) (decl)))))\n+    {\n+      tree attr_list = TYPE_ATTRIBUTES (fntype);\n+\n+      if (!lookup_attribute (\"longcall\", attr_list)\n+\t  || lookup_attribute (\"shortcall\", attr_list))\n+\treturn true;\n     }\n+\n   return false;\n }\n "}, {"sha": "586e9e4a83b29d9d67468a43b296d3d0a5fbe3db", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 34, "deletions": 55, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=401f66999f930fde26fe1d5602371b319ddd9f25", "patch": "@@ -12963,68 +12963,43 @@\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4,8\")])\n \n-(define_insn \"*sibcall_nonlocal_aix32\"\n-  [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"s\"))\n-\t (match_operand 1 \"\" \"g\"))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n-   (use (reg:SI LR_REGNO))\n-   (return)]\n-  \"TARGET_32BIT\n-   && DEFAULT_ABI == ABI_AIX\n-   && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n-  \"b %z0\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"*sibcall_nonlocal_aix64\"\n-  [(call (mem:SI (match_operand:DI 0 \"symbol_ref_operand\" \"s\"))\n-\t (match_operand 1 \"\" \"g\"))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"O\"))\n+(define_insn \"*sibcall_nonlocal_aix<mode>\"\n+  [(call (mem:SI (match_operand:P 0 \"call_operand\" \"s,c\"))\n+\t (match_operand 1 \"\" \"g,g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O,O\"))\n    (use (reg:SI LR_REGNO))\n    (return)]\n-  \"TARGET_64BIT\n-   && DEFAULT_ABI == ABI_AIX\n+  \"DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n-  \"b %z0\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"*sibcall_value_nonlocal_aix32\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"s\"))\n-\t      (match_operand 2 \"\" \"g\")))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n-   (use (reg:SI LR_REGNO))\n-   (return)]\n-  \"TARGET_32BIT\n-   && DEFAULT_ABI == ABI_AIX\n-   && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n-  \"b %z1\"\n+  \"@\n+   b %z0\n+   b%T0\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"*sibcall_value_nonlocal_aix64\"\n+(define_insn \"*sibcall_value_nonlocal_aix<mode>\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:DI 1 \"symbol_ref_operand\" \"s\"))\n-\t      (match_operand 2 \"\" \"g\")))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"O\"))\n+\t(call (mem:SI (match_operand:P 1 \"call_operand\" \"s,c\"))\n+\t      (match_operand 2 \"\" \"g,g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,O\"))\n    (use (reg:SI LR_REGNO))\n    (return)]\n-  \"TARGET_64BIT\n-   && DEFAULT_ABI == ABI_AIX\n+  \"DEFAULT_ABI == ABI_AIX\n    && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n-  \"b %z1\"\n+  \"@\n+   b %z1\n+   b%T1\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"*sibcall_nonlocal_sysv<mode>\"\n-  [(call (mem:SI (match_operand:P 0 \"symbol_ref_operand\" \"s,s\"))\n+  [(call (mem:SI (match_operand:P 0 \"call_operand\" \"s,s,c,c\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (match_operand 2 \"immediate_operand\" \"O,n\"))\n+   (use (match_operand 2 \"immediate_operand\" \"O,n,O,n\"))\n    (use (reg:SI LR_REGNO))\n    (return)]\n   \"(DEFAULT_ABI == ABI_DARWIN\n-     || DEFAULT_ABI == ABI_V4)\n+    || DEFAULT_ABI == ABI_V4)\n    && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n   \"*\n {\n@@ -13034,16 +13009,18 @@\n   else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n-  if (DEFAULT_ABI == ABI_V4 && flag_pic)\n+  if (which_alternative >= 2)\n+    return \\\"b%T0\\\";\n+  else if (DEFAULT_ABI == ABI_V4 && flag_pic)\n     {\n       gcc_assert (!TARGET_SECURE_PLT);\n       return \\\"b %z0@plt\\\";\n     }\n   else\n     return \\\"b %z0\\\";\n }\"\n-  [(set_attr \"type\" \"branch,branch\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4,8,4,8\")])\n \n (define_expand \"sibcall_value\"\n   [(parallel [(set (match_operand 0 \"register_operand\" \"\")\n@@ -13068,32 +13045,34 @@\n \n (define_insn \"*sibcall_value_nonlocal_sysv<mode>\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:P 1 \"symbol_ref_operand\" \"s,s\"))\n+\t(call (mem:SI (match_operand:P 1 \"call_operand\" \"s,s,c,c\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,n,O,n\"))\n    (use (reg:SI LR_REGNO))\n    (return)]\n   \"(DEFAULT_ABI == ABI_DARWIN\n-       || DEFAULT_ABI == ABI_V4)\n+    || DEFAULT_ABI == ABI_V4)\n    && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n   \"*\n {\n-  if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n+  if (INTVAL (operands[3]) & CALL_V4_SET_FP_ARGS)\n     output_asm_insn (\\\"crxor 6,6,6\\\", operands);\n \n-  else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n+  else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n     output_asm_insn (\\\"creqv 6,6,6\\\", operands);\n \n-  if (DEFAULT_ABI == ABI_V4 && flag_pic)\n+  if (which_alternative >= 2)\n+    return \\\"b%T1\\\";\n+  else if (DEFAULT_ABI == ABI_V4 && flag_pic)\n     {\n       gcc_assert (!TARGET_SECURE_PLT);\n       return \\\"b %z1@plt\\\";\n     }\n   else\n     return \\\"b %z1\\\";\n }\"\n-  [(set_attr \"type\" \"branch,branch\")\n-   (set_attr \"length\" \"4,8\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4,8,4,8\")])\n \n (define_expand \"sibcall_epilogue\"\n   [(use (const_int 0))]"}, {"sha": "da59b77a5dbd561fdc9417867db60d54fbd83e17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=401f66999f930fde26fe1d5602371b319ddd9f25", "patch": "@@ -1,3 +1,7 @@\n+2011-04-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/ppc-pow.c: Allow for tail calls.\n+\n 2011-04-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/48405"}, {"sha": "e88125c1d98a96db97db6d7b25d1049f4220d795", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-pow.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-pow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/401f66999f930fde26fe1d5602371b319ddd9f25/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-pow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-pow.c?ref=401f66999f930fde26fe1d5602371b319ddd9f25", "patch": "@@ -2,8 +2,8 @@\n /* { dg-options \"-O2 -ffast-math -mcpu=power6\" } */\n /* { dg-final { scan-assembler-times \"fsqrt\" 3 } } */\n /* { dg-final { scan-assembler-times \"fmul\" 1 } } */\n-/* { dg-final { scan-assembler-times \"bl pow\" 1 } } */\n-/* { dg-final { scan-assembler-times \"bl sqrt\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bl? pow\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bl? sqrt\" 1 } } */\n \n double\n do_pow_0_75_default (double a)"}]}