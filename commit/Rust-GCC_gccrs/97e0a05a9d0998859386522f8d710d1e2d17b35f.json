{"sha": "97e0a05a9d0998859386522f8d710d1e2d17b35f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdlMGEwNWE5ZDA5OTg4NTkzODY1MjJmOGQ3MTBkMWUyZDE3YjM1Zg==", "commit": {"author": {"name": "Anthony Williams", "email": "anthony@anthonyw.cjb.net", "date": "2000-06-13T23:48:29Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-13T23:48:29Z"}, "message": "bitset_ctor.cc: Qualify reverse wth std::.\n\n\n2000-06-13  Anthony Williams  <anthony@anthonyw.cjb.net>\n\n\t* testsuite/23_containers/bitset_ctor.cc: Qualify reverse wth std::.\n\n\t* testsuite/27_io/filebuf.cc: Changed calls to\n\tfpos<>._M_position() to implicit calls to operator streamoff().\n\t* testsuite/27_io/iostream_objects.cc: Removed #include <ciso646>,\n\tas not needed. Revert, as part of standard.\n\t* testsuite/27_io/ostream_inserter_arith.cc: Replaced explicit\n\tcall to numpunct<>._M_init() with overrides of the appropriate\n\tvirtual functions.\n\n\t* testsuite/27_io/stringstream.cc: Removed unnecessary char *\n\tpointers from test01, so no need to call base(), which isn't\n\tguaranteed to be implemented as iterators may themselves be pointers\n\t* testsuite/27_io/stringbuf.cc: Removed unnecessary calls to\n\t_M_position() - use implicit conversion to streamoff instead\n\nFrom-SVN: r34535", "tree": {"sha": "6fb8a991fb2006ef1ee09e836a2001d588afecd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fb8a991fb2006ef1ee09e836a2001d588afecd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97e0a05a9d0998859386522f8d710d1e2d17b35f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e0a05a9d0998859386522f8d710d1e2d17b35f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e0a05a9d0998859386522f8d710d1e2d17b35f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e0a05a9d0998859386522f8d710d1e2d17b35f/comments", "author": null, "committer": null, "parents": [{"sha": "8173b2d78a179d12405438b4c9135cb20e8af68c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8173b2d78a179d12405438b4c9135cb20e8af68c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8173b2d78a179d12405438b4c9135cb20e8af68c"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "d044777a71015416a3043388dea839281d99bb6e", "filename": "libstdc++-v3/testsuite/23_containers/bitset_ctor.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e0a05a9d0998859386522f8d710d1e2d17b35f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_ctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e0a05a9d0998859386522f8d710d1e2d17b35f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_ctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_ctor.cc?ref=97e0a05a9d0998859386522f8d710d1e2d17b35f", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-08 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -65,7 +65,7 @@ bool test01(void)\n     std::string str03;\n     for (int i = 0; i < sz; ++i)\n       str03 += (bit03.test(i) ? '1' : '0');\n-    reverse(str03.begin(), str03.end());\n+    std::reverse(str03.begin(), str03.end());\n     test &= str03 == str02;\n   }\n   catch(std::invalid_argument& fail) {"}, {"sha": "a04215e7d22a5b858c2f52f6919c0e40a6a40690", "filename": "libstdc++-v3/testsuite/27_io/filebuf.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e0a05a9d0998859386522f8d710d1e2d17b35f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e0a05a9d0998859386522f8d710d1e2d17b35f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc?ref=97e0a05a9d0998859386522f8d710d1e2d17b35f", "patch": "@@ -409,7 +409,7 @@ bool test03() {\n   strmsz_1 = fb_03.in_avail(); \n   pt_1 = fb_03.pubseekoff(2, std::ios_base::beg);\n   strmsz_2 = fb_03.in_avail(); \n-  off_1 = pt_1._M_position();\n+  off_1 = pt_1;\n   test &= off_1 > 0;\n   c1 = fb_03.snextc(); //current in pointer +1\n   test &= c1 == '3';\n@@ -423,7 +423,7 @@ bool test03() {\n   //cur\n   // 27filebuf-3.txt = bd2\\n456789:;<=>?...\n   pt_2 = fb_03.pubseekoff(2, std::ios_base::cur);\n-  off_2 = pt_2._M_position();\n+  off_2 = pt_2;\n   test &= (off_2 == (off_1 + 2 + 1 + 1));\n   c1 = fb_03.snextc(); //current in pointer +1\n   test &= c1 == '7';\n@@ -437,7 +437,7 @@ bool test03() {\n   // 27filebuf-3.txt = \"bd2\\n456x\\n9\" \n   pt_2 = fb_03.pubseekoff(0, std::ios_base::end, \n \t\t\t  std::ios_base::in|std::ios_base::out);\n-  off_1 = pt_2._M_position();\n+  off_1 = pt_2;\n   test &= off_1 > off_2; //weak, but don't know exactly where it ends\n   c3 = fb_03.sputc('\\n');\n   strmsz_1 = fb_03.sputn(\"because because because. . .\", 28);  \n@@ -456,20 +456,20 @@ bool test03() {\n   //IN|OUT\n   //beg\n   pt_1 = fb_03.pubseekoff(78, std::ios_base::beg);\n-  off_1 = pt_1._M_position();\n+  off_1 = pt_1;\n   test &= off_1 > 0;\n   c1 = fb_03.snextc(); \t\t//current in pointer +1\n   test &= c1 == ' ';\n   c2 = fb_03.sputc('\\n');  \t//test current out pointer\n   c3 = fb_03.sgetc();\n   fb_03.pubsync(); \t\t//resets pointers\n   pt_2 = fb_03.pubseekpos(pt_1);\n-  off_2 = pt_2._M_position();\n+  off_2 = pt_2;\n   test &= off_1 == off_2;\n   c3 = fb_03.snextc(); \t\t//current in pointer +1\n   test &= c2 == c3;\n   pt_1 = fb_03.pubseekoff(0, std::ios_base::end);\n-  off_1 = pt_1._M_position();\n+  off_1 = pt_1;\n   test &= off_1 > off_2;\n   fb_03.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n   fb_03.pubsync();"}, {"sha": "519c89cb4c916c169d65846c003a870fba0b8408", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_arith.cc", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e0a05a9d0998859386522f8d710d1e2d17b35f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e0a05a9d0998859386522f8d710d1e2d17b35f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc?ref=97e0a05a9d0998859386522f8d710d1e2d17b35f", "patch": "@@ -141,12 +141,24 @@ class testpunct : public numpunct<_CharT>\n {\n public:\n   typedef _CharT  char_type;\n+  const char_type dchar;\n \n   explicit\n-  testpunct(char_type decimal_char) : numpunct<_CharT>() \n-    { \n-      _M_init(decimal_char, ',', \"\");\n-    }\n+  testpunct(char_type decimal_char) : numpunct<_CharT>(), dchar(decimal_char)\n+  { }\n+\n+protected:\n+  char_type \n+  do_decimal_point() const\n+  { return dchar; }\n+    \n+  char_type \n+  do_thousands_sep() const\n+  { return ','; }\n+\n+  string \n+  do_grouping() const\n+  { return string(); }\n };\n  \n template<typename _CharT>  "}, {"sha": "20deda41ea62b01d2d4070d86d5d357ec1893baf", "filename": "libstdc++-v3/testsuite/27_io/stringbuf.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e0a05a9d0998859386522f8d710d1e2d17b35f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e0a05a9d0998859386522f8d710d1e2d17b35f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc?ref=97e0a05a9d0998859386522f8d710d1e2d17b35f", "patch": "@@ -1,6 +1,6 @@\n // 981208 bkoz test functionality of basic_stringbuf for char_type == char\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -338,7 +338,7 @@ bool test04() {\n   //IN|OUT\n   //beg\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::beg);\n-  off_1 = pt_1._M_position();\n+  off_1 = pt_1;\n   test &= off_1 >= 0;\n   c1 = strb_01.snextc(); //current in pointer +1\n   test &= c1 == 'o';\n@@ -347,12 +347,12 @@ bool test04() {\n   test &= strb_01.str() == str_tmp;\n   //cur\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::cur);\n-  off_1 = pt_1._M_position();\n+  off_1 = pt_1;\n   test &= off_1 == -1; // can't seekoff for in and out + cur in sstreams\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::cur, std::ios_base::in);\n-  off_1 = pt_1._M_position();\n+  off_1 = pt_1;\n   pt_2 = strb_01.pubseekoff(2, std::ios_base::cur, std::ios_base::in);\n-  off_2 = pt_2._M_position();\n+  off_2 = pt_2;\n   test &= off_2 == off_1 + 2;\n   c1 = strb_01.snextc(); //current in pointer + 1\n   test &= c1 == ' ';\n@@ -361,7 +361,7 @@ bool test04() {\n   test &= strb_01.str() == str_tmp;\n   //end\n   pt_2 = strb_01.pubseekoff(2, std::ios_base::end);\n-  off_1 = pt_2._M_position();\n+  off_1 = pt_2;\n   test &= off_1 == -1; // not a valid position\n   test &= strb_01.str() == str_tmp;\n   // end part two (from the filebuf tests)\n@@ -393,18 +393,18 @@ bool test04() {\n   //IN|OUT\n   //beg\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::beg);\n-  off_1 = pt_1._M_position();\n+  off_1 = pt_1;\n   test &= off_1 >= 0;\n   pt_1 = strb_01.pubseekoff(0, std::ios_base::cur, std::ios_base::out);\n-  off_1 = pt_1._M_position();\n+  off_1 = pt_1;\n   c1 = strb_01.snextc(); //current in pointer +1\n   test &= c1 == 'o';\n   c2 = strb_01.sputc('x');  //test current out pointer\n   str_tmp = std::string(\"myxonos. . . or what?\");\n   test &= strb_01.str() == str_tmp;\n   strb_01.pubsync(); //resets pointers\n   pt_2 = strb_01.pubseekpos(pt_1, std::ios_base::in|std::ios_base::out);\n-  off_2 = pt_2._M_position();\n+  off_2 = pt_2;\n   test &= off_1 == off_2;\n   c3 = strb_01.snextc(); //current in pointer +1\n   test &= c1 == c3;"}, {"sha": "fc72e95f51e0f157e511fa01be5647e891a18173", "filename": "libstdc++-v3/testsuite/27_io/stringstream.cc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e0a05a9d0998859386522f8d710d1e2d17b35f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e0a05a9d0998859386522f8d710d1e2d17b35f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringstream.cc?ref=97e0a05a9d0998859386522f8d710d1e2d17b35f", "patch": "@@ -44,33 +44,27 @@ std::string test01()\n   // Empty string sanity check.\n   std::string str01;\n   std::string::iterator __i_start = str01.begin();\n-  char* __p_start = __i_start.base();\n   std::string::iterator __i_end = str01.end();\n-  char* __p_end = __i_end.base();\n   std::string::size_type len = str01.size();\n-  test = __p_start == __p_end;\n+  test = __i_start == __i_end;\n   test &= len == 0;\n \n   // Full string sanity check.\n   std::string str02(\"these golden days, i spend waiting for you:\\n \n               Betty Carter on Verve with I'm Yours and You're Mine.\");\n   __i_start = str02.begin();\n-  __p_start = __i_start.base();\n   __i_end = str02.end();\n-  __p_end = __i_end.base();\n   len = str02.size();\n-  test &= __p_start != __p_end;\n+  test &= __i_start != __i_end;\n   test &= len != 0;\n  \n   // Test an empty ostring stream for sanity.\n   std::ostringstream ostrstream0;\n   std::string str03 = ostrstream0.str();\n   __i_start = str03.begin();\n-  __p_start = __i_start.base();\n   __i_end = str03.end();\n-  __p_end = __i_end.base();\n   len = str03.size();\n-  test &= __p_start == __p_end;\n+  test &= __i_start == __i_end;\n   test &= len == 0;\n   test &= str01 == str03;\n "}]}