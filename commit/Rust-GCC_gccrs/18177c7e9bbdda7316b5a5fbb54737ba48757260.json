{"sha": "18177c7e9bbdda7316b5a5fbb54737ba48757260", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgxNzdjN2U5YmJkZGE3MzE2YjVhNWZiYjU0NzM3YmE0ODc1NzI2MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-08-24T09:44:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-08-24T09:44:04Z"}, "message": "Makefile.in (tree-inline.o): Add $(TARGET_H) and $(INTEGRATE_H) dependencies.\n\n2007-08-24  Richard Guenther  <rguenther@suse.de>\n\n\t* Makefile.in (tree-inline.o): Add $(TARGET_H) and $(INTEGRATE_H)\n\tdependencies.\n\t* c-objc-common.c (c_cannot_inline_tree_fn): Remove.\n\t* langhooks.c (lhd_tree_inlining_cannot_inline_tree_fn): Likewise.\n\t* tree-inline.c (inlinable_function_p): Fold in common parts of\n\tthe cannot_inline_tree_fn langhook.\n\t* langhooks-def.h (lhd_tree_inlining_cannot_inline_tree_fn): Remove.\n\t(LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN): Likewise.\n\t(LANG_HOOKS_TREE_INLINING_INITIALIZER): Remove initializer for\n\tcannot_inline_tree_fn langhook.\n\t* langhooks.h (struct lang_hooks_for_tree_inlining): Remove\n\tcannot_inline_tree_fn member.\n\n\tcp/\n\t* tree.c (cp_cannot_inline_tree_fn): Remove.\n\t* cp-tree.h (cp_cannot_inline_tree_fn): Likewise.\n\t* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN):\n\tRemove define.\n\nFrom-SVN: r127763", "tree": {"sha": "5270dcc8ebfd36c501d57a40ccebba1e3b65b19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5270dcc8ebfd36c501d57a40ccebba1e3b65b19e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18177c7e9bbdda7316b5a5fbb54737ba48757260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18177c7e9bbdda7316b5a5fbb54737ba48757260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18177c7e9bbdda7316b5a5fbb54737ba48757260", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18177c7e9bbdda7316b5a5fbb54737ba48757260/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c219b9bb34eafa7d9f42e3ffc5e73f77e397a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c219b9bb34eafa7d9f42e3ffc5e73f77e397a75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c219b9bb34eafa7d9f42e3ffc5e73f77e397a75"}], "stats": {"total": 192, "additions": 58, "deletions": 134}, "files": [{"sha": "43baaaa36a5d658ee4b280e415f5f19a4ef0796b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18177c7e9bbdda7316b5a5fbb54737ba48757260", "patch": "@@ -1,3 +1,18 @@\n+2007-08-24  Richard Guenther  <rguenther@suse.de>\n+\n+\t* Makefile.in (tree-inline.o): Add $(TARGET_H) and $(INTEGRATE_H)\n+\tdependencies.\n+\t* c-objc-common.c (c_cannot_inline_tree_fn): Remove.\n+\t* langhooks.c (lhd_tree_inlining_cannot_inline_tree_fn): Likewise.\n+\t* tree-inline.c (inlinable_function_p): Fold in common parts of\n+\tthe cannot_inline_tree_fn langhook.\n+\t* langhooks-def.h (lhd_tree_inlining_cannot_inline_tree_fn): Remove.\n+\t(LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN): Likewise.\n+\t(LANG_HOOKS_TREE_INLINING_INITIALIZER): Remove initializer for\n+\tcannot_inline_tree_fn langhook.\n+\t* langhooks.h (struct lang_hooks_for_tree_inlining): Remove\n+\tcannot_inline_tree_fn member.\n+\n 2007-08-24  Richard Guenther  <rguenther@suse.de>\n \n \t* expr.c (get_inner_reference): Do computation of bitoffset"}, {"sha": "746e1196923b06410d345bb7a8a3e99ff91d00dc", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=18177c7e9bbdda7316b5a5fbb54737ba48757260", "patch": "@@ -50,51 +50,6 @@ c_missing_noreturn_ok_p (tree decl)\n   return flag_hosted && MAIN_NAME_P (DECL_ASSEMBLER_NAME (decl));\n }\n \n-int\n-c_cannot_inline_tree_fn (tree *fnp)\n-{\n-  tree fn = *fnp;\n-  bool do_warning = (warn_inline\n-\t\t     && DECL_INLINE (fn)\n-\t\t     && DECL_DECLARED_INLINE_P (fn)\n-\t\t     && !DECL_IN_SYSTEM_HEADER (fn));\n-  tree always_inline = lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn));\n-\n-  if (flag_really_no_inline && always_inline == NULL)\n-    {\n-      if (do_warning)\n-\twarning (OPT_Winline, \"function %q+F can never be inlined because it \"\n-\t\t \"is suppressed using -fno-inline\", fn);\n-      goto cannot_inline;\n-    }\n-\n-  /* Don't auto-inline anything that might not be bound within\n-     this unit of translation.  */\n-  if (always_inline == NULL\n-      && !DECL_DECLARED_INLINE_P (fn)\n-      && !targetm.binds_local_p (fn))\n-    {\n-      if (do_warning)\n-\twarning (OPT_Winline, \"function %q+F can never be inlined because it \"\n-\t\t \"might not be bound within this unit of translation\", fn);\n-      goto cannot_inline;\n-    }\n-\n-  if (!function_attribute_inlinable_p (fn))\n-    {\n-      if (do_warning)\n-\twarning (OPT_Winline, \"function %q+F can never be inlined because it \"\n-\t\t \"uses attributes conflicting with inlining\", fn);\n-      goto cannot_inline;\n-    }\n-\n-  return 0;\n-\n- cannot_inline:\n-  DECL_UNINLINABLE (fn) = 1;\n-  return 1;\n-}\n-\n /* Called from check_global_declarations.  */\n \n bool"}, {"sha": "5bc2266397ccfd4ee1547526c90983598462f7e3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=18177c7e9bbdda7316b5a5fbb54737ba48757260", "patch": "@@ -1,3 +1,10 @@\n+2007-08-24  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (cp_cannot_inline_tree_fn): Remove.\n+\t* cp-tree.h (cp_cannot_inline_tree_fn): Likewise.\n+\t* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN):\n+\tRemove define.\n+\n 2007-08-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/32567"}, {"sha": "8c8f93377de800d77d81f10a94f29a5dc674720d", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=18177c7e9bbdda7316b5a5fbb54737ba48757260", "patch": "@@ -104,9 +104,6 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #undef LANG_HOOKS_ATTRIBUTE_TABLE\n #define LANG_HOOKS_ATTRIBUTE_TABLE cxx_attribute_table\n \n-#undef LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN\n-#define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n-  cp_cannot_inline_tree_fn\n #undef LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P\n #define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P cp_var_mod_type_p\n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN"}, {"sha": "6d5f81ba1cbe61a65a27d71cfdd3ac1fea6484a3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=18177c7e9bbdda7316b5a5fbb54737ba48757260", "patch": "@@ -4741,7 +4741,6 @@ extern tree cp_walk_subtrees (tree*, int*, walk_tree_fn,\n \twalk_tree_1 (a, b, c, d, cp_walk_subtrees)\n #define cp_walk_tree_without_duplicates(a,b,c) \\\n \twalk_tree_without_duplicates_1 (a, b, c, cp_walk_subtrees)\n-extern int cp_cannot_inline_tree_fn\t\t(tree*);\n extern tree fold_if_not_in_template\t\t(tree);\n extern tree rvalue\t\t\t\t(tree);\n extern tree convert_bitfield_to_declared_type   (tree);"}, {"sha": "c77cc871c63488746246025ce103760f695456ff", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=18177c7e9bbdda7316b5a5fbb54737ba48757260", "patch": "@@ -2398,58 +2398,6 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n #undef WALK_SUBTREE\n }\n \n-/* Decide whether there are language-specific reasons to not inline a\n-   function as a tree.  */\n-\n-int\n-cp_cannot_inline_tree_fn (tree* fnp)\n-{\n-  tree fn = *fnp;\n-\n-  /* We can inline a template instantiation only if it's fully\n-     instantiated.  */\n-  if (DECL_TEMPLATE_INFO (fn)\n-      && TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (fn)))\n-    {\n-      /* Don't instantiate functions that are not going to be\n-\t inlined.  */\n-      if (!DECL_INLINE (DECL_TEMPLATE_RESULT\n-\t\t\t(template_for_substitution (fn))))\n-\treturn 1;\n-\n-      fn = *fnp = instantiate_decl (fn, /*defer_ok=*/0, /*undefined_ok=*/0);\n-\n-      if (TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (fn)))\n-\treturn 1;\n-    }\n-\n-  if (flag_really_no_inline\n-      && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) == NULL)\n-    return 1;\n-\n-  /* Don't auto-inline functions that might be replaced at link-time\n-     with an alternative definition.  */ \n-  if (!DECL_DECLARED_INLINE_P (fn) && DECL_REPLACEABLE_P (fn))\n-    {\n-      DECL_UNINLINABLE (fn) = 1;\n-      return 1;\n-    }\n-\n-  if (varargs_function_p (fn))\n-    {\n-      DECL_UNINLINABLE (fn) = 1;\n-      return 1;\n-    }\n-\n-  if (! function_attribute_inlinable_p (fn))\n-    {\n-      DECL_UNINLINABLE (fn) = 1;\n-      return 1;\n-    }\n-\n-  return 0;\n-}\n-\n /* Like save_expr, but for C++.  */\n \n tree"}, {"sha": "66a65a6c21e716ef0f1bcf7b2157de0ac2fd6aa3", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=18177c7e9bbdda7316b5a5fbb54737ba48757260", "patch": "@@ -68,7 +68,6 @@ extern tree lhd_expr_to_decl (tree, bool *, bool *, bool *);\n extern tree lhd_builtin_function (tree decl);\n \n /* Declarations of default tree inlining hooks.  */\n-extern int lhd_tree_inlining_cannot_inline_tree_fn (tree *);\n extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n extern tree lhd_callgraph_analyze_expr (tree *, int *, tree);\n \n@@ -131,13 +130,10 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE\tNULL\n \n /* Tree inlining hooks.  */\n-#define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n-  lhd_tree_inlining_cannot_inline_tree_fn\n #define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P \\\n   hook_bool_tree_tree_false\n \n #define LANG_HOOKS_TREE_INLINING_INITIALIZER { \\\n-  LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN, \\\n   LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P, \\\n }\n "}, {"sha": "8653e3abff3fff8a55a9cfd89fd670ab9fc22c55", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=18177c7e9bbdda7316b5a5fbb54737ba48757260", "patch": "@@ -276,20 +276,6 @@ lhd_types_compatible_p (tree x, tree y)\n   return TYPE_MAIN_VARIANT (x) == TYPE_MAIN_VARIANT (y);\n }\n \n-/* lang_hooks.tree_inlining.cannot_inline_tree_fn is called to\n-   determine whether there are language-specific reasons for not\n-   inlining a given function.  */\n-\n-int\n-lhd_tree_inlining_cannot_inline_tree_fn (tree *fnp)\n-{\n-  if (flag_really_no_inline\n-      && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (*fnp)) == NULL)\n-    return 1;\n-\n-  return 0;\n-}\n-\n /* lang_hooks.tree_dump.dump_tree:  Dump language-specific parts of tree\n    nodes.  Returns nonzero if it does not want the usual dumping of the\n    second argument.  */"}, {"sha": "338e931c6bc787ac7613c206fc0b934028f961ce", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=18177c7e9bbdda7316b5a5fbb54737ba48757260", "patch": "@@ -35,7 +35,6 @@ typedef void (*lang_print_tree_hook) (FILE *, tree, int indent);\n \n struct lang_hooks_for_tree_inlining\n {\n-  int (*cannot_inline_tree_fn) (tree *);\n   bool (*var_mod_type_p) (tree, tree);\n };\n "}, {"sha": "2b7ab9e39ac111a54751c0b26dbd11787bc17712", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18177c7e9bbdda7316b5a5fbb54737ba48757260/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=18177c7e9bbdda7316b5a5fbb54737ba48757260", "patch": "@@ -51,6 +51,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-prop.h\"\n #include \"value-prof.h\"\n #include \"tree-pass.h\"\n+#include \"target.h\"\n+#include \"integrate.h\"\n \n /* I'm not real happy about this, but we need to handle gimple and\n    non-gimple trees.  */\n@@ -1848,18 +1850,44 @@ static bool\n inlinable_function_p (tree fn)\n {\n   bool inlinable = true;\n+  bool do_warning;\n+  tree always_inline;\n \n   /* If we've already decided this function shouldn't be inlined,\n      there's no need to check again.  */\n   if (DECL_UNINLINABLE (fn))\n     return false;\n \n-  /* See if there is any language-specific reason it cannot be\n-     inlined.  (It is important that this hook be called early because\n-     in C++ it may result in template instantiation.)\n-     If the function is not inlinable for language-specific reasons,\n-     it is left up to the langhook to explain why.  */\n-  inlinable = !lang_hooks.tree_inlining.cannot_inline_tree_fn (&fn);\n+  /* We only warn for functions declared `inline' by the user.  */\n+  do_warning = (warn_inline\n+\t\t&& DECL_INLINE (fn)\n+\t\t&& DECL_DECLARED_INLINE_P (fn)\n+\t\t&& !DECL_IN_SYSTEM_HEADER (fn));\n+\n+  always_inline = lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn));\n+\n+  if (flag_really_no_inline\n+      && always_inline == NULL)\n+    {\n+      if (do_warning)\n+        warning (OPT_Winline, \"function %q+F can never be inlined because it \"\n+                 \"is suppressed using -fno-inline\", fn);\n+      inlinable = false;\n+    }\n+\n+  /* Don't auto-inline anything that might not be bound within\n+     this unit of translation.  */\n+  else if (!DECL_DECLARED_INLINE_P (fn)\n+\t   && DECL_REPLACEABLE_P (fn))\n+    inlinable = false;\n+\n+  else if (!function_attribute_inlinable_p (fn))\n+    {\n+      if (do_warning)\n+        warning (OPT_Winline, \"function %q+F can never be inlined because it \"\n+                 \"uses attributes conflicting with inlining\", fn);\n+      inlinable = false;\n+    }\n \n   /* If we don't have the function body available, we can't inline it.\n      However, this should not be recorded since we also get here for\n@@ -1893,14 +1921,8 @@ inlinable_function_p (tree fn)\n \t about functions that would for example call alloca.  But since\n \t this a property of the function, just one warning is enough.\n \t As a bonus we can now give more details about the reason why a\n-\t function is not inlinable.\n-\t We only warn for functions declared `inline' by the user.  */\n-      bool do_warning = (warn_inline\n-\t\t\t && DECL_INLINE (fn)\n-\t\t\t && DECL_DECLARED_INLINE_P (fn)\n-\t\t\t && !DECL_IN_SYSTEM_HEADER (fn));\n-\n-      if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)))\n+\t function is not inlinable.  */\n+      if (always_inline)\n \tsorry (inline_forbidden_reason, fn);\n       else if (do_warning)\n \twarning (OPT_Winline, inline_forbidden_reason, fn);"}]}