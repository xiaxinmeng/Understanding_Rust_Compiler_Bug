{"sha": "481755378d5632997e4f91b284a4eef52001b79c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxNzU1Mzc4ZDU2MzI5OTdlNGY5MWIyODRhNGVlZjUyMDAxYjc5Yw==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2012-08-02T22:39:57Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2012-08-02T22:39:57Z"}, "message": "cfgexpand.c (expand_debug_locations): Encapsulate test for CONST_DOUBLE in macro.\n\n2012-08-02  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* cfgexpand.c (expand_debug_locations):  Encapsulate test for\n\tCONST_DOUBLE in macro.\n\t* combine.c (try_combine, gen_lowpart_for_combine): Ditto.\n\t* cprop.c (implicit_set_cond_p): Ditto.\n\t* cselib.c (rtx_equal_for_cselib_1): Ditto.\n\t* expmed.c (expand_mult): Ditto.\n\t* expr.c (convert_modes): Ditto.\n\t* ira-costs.c (record_reg_classes): Ditto.\n\t* ira-lives.c (single_reg_class): Ditto.\n\t* optabs.c (expand_copysign_absneg, expand_copysign): Ditto.\n\t* print-rtl.c (print_rtx): Ditto.\n\t* recog.c (simplify_while_replacing, const_double_operand)\n\t(asm_operand_ok, constrain_operands): Ditto.\n\t* reg-stack.c (subst_stack_regs_pat): Ditto.\n\t* reload.c (find_reloads, find_equiv_reg): Ditto.\n\t* rtlanal.c (replace_rtx): Remove test.\n\t* rtlanal.c (constant_pool_constant_p, split_double): Encapsulate test for\n\tCONST_DOUBLE in macro.\n\t* simplify-rtx.c (mode_signbit_p, avoid_constant_pool_reference)\n\t(simplify_unary_operation_1, simplify_const_unary_operation)\n\t(simplify_binary_operation_1, simplify_const_binary_operation)\n\t(simplify_relational_operation_1)\n\t(simplify_const_relational_operations)\n\t(implify_subreg): Ditto.\n\t* varasm.c (output_constant_pool_2): Ditto.\n\t* rtl.h (CONST_DOUBLE_AS_INT_P, CONST_DOUBLE_AS_FLOAT_P): New\n\tmacros.\n\t* rtl.def (CONST_DOUBLE):  Updated comments.\n\nFrom-SVN: r190105", "tree": {"sha": "7cdb1d401796f97fad83229f9a66eb5bc7f2177e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cdb1d401796f97fad83229f9a66eb5bc7f2177e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/481755378d5632997e4f91b284a4eef52001b79c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481755378d5632997e4f91b284a4eef52001b79c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481755378d5632997e4f91b284a4eef52001b79c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481755378d5632997e4f91b284a4eef52001b79c/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36be1dee1d8f88f1da9a27a9ce6d20f8976f210c"}], "stats": {"total": 272, "additions": 136, "deletions": 136}, "files": [{"sha": "6763f95db082449dca2c4150395ec96d52f17544", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -1,3 +1,34 @@\n+2012-08-02  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* cfgexpand.c (expand_debug_locations):  Encapsulate test for\n+\tCONST_DOUBLE in macro.\n+\t* combine.c (try_combine, gen_lowpart_for_combine): Ditto.\n+\t* cprop.c (implicit_set_cond_p): Ditto.\n+\t* cselib.c (rtx_equal_for_cselib_1): Ditto.\n+\t* expmed.c (expand_mult): Ditto.\n+\t* expr.c (convert_modes): Ditto.\n+\t* ira-costs.c (record_reg_classes): Ditto.\n+\t* ira-lives.c (single_reg_class): Ditto.\n+\t* optabs.c (expand_copysign_absneg, expand_copysign): Ditto.\n+\t* print-rtl.c (print_rtx): Ditto.\n+\t* recog.c (simplify_while_replacing, const_double_operand)\n+\t(asm_operand_ok, constrain_operands): Ditto.\n+\t* reg-stack.c (subst_stack_regs_pat): Ditto.\n+\t* reload.c (find_reloads, find_equiv_reg): Ditto.\n+\t* rtlanal.c (replace_rtx): Remove test.\n+\t* rtlanal.c (constant_pool_constant_p, split_double): Encapsulate test for\n+\tCONST_DOUBLE in macro.\n+\t* simplify-rtx.c (mode_signbit_p, avoid_constant_pool_reference)\n+\t(simplify_unary_operation_1, simplify_const_unary_operation)\n+\t(simplify_binary_operation_1, simplify_const_binary_operation)\n+\t(simplify_relational_operation_1)\n+\t(simplify_const_relational_operations)\n+\t(implify_subreg): Ditto.\n+\t* varasm.c (output_constant_pool_2): Ditto.\n+\t* rtl.h (CONST_DOUBLE_AS_INT_P, CONST_DOUBLE_AS_FLOAT_P): New\n+\tmacros.\n+\t* rtl.def (CONST_DOUBLE):  Updated comments.\n+\n 2012-08-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR target/51931"}, {"sha": "00e5e4d99df0153502d2bdf01554c7171254f3cb", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -3627,7 +3627,7 @@ expand_debug_locations (void)\n \t\t\t|| (GET_MODE (val) == VOIDmode\n \t\t\t    && (CONST_INT_P (val)\n \t\t\t\t|| GET_CODE (val) == CONST_FIXED\n-\t\t\t\t|| GET_CODE (val) == CONST_DOUBLE\n+\t\t\t\t|| CONST_DOUBLE_AS_INT_P (val) \n \t\t\t\t|| GET_CODE (val) == LABEL_REF)));\n \t  }\n "}, {"sha": "495e1297e9316381fd37d470e1fe7d3e3f57f077", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -2620,10 +2620,10 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p,\n   if (i1 == 0\n       && (temp = single_set (i2)) != 0\n       && (CONST_INT_P (SET_SRC (temp))\n-\t  || GET_CODE (SET_SRC (temp)) == CONST_DOUBLE)\n+\t  || CONST_DOUBLE_AS_INT_P (SET_SRC (temp)))\n       && GET_CODE (PATTERN (i3)) == SET\n       && (CONST_INT_P (SET_SRC (PATTERN (i3)))\n-\t  || GET_CODE (SET_SRC (PATTERN (i3))) == CONST_DOUBLE)\n+\t  || CONST_DOUBLE_AS_INT_P (SET_SRC (PATTERN (i3))))\n       && reg_subword_p (SET_DEST (PATTERN (i3)), SET_DEST (temp)))\n     {\n       rtx dest = SET_DEST (PATTERN (i3));\n@@ -5105,8 +5105,7 @@ subst (rtx x, rtx from, rtx to, int in_dest, int in_cond, int unique_copy)\n \t\treturn new_rtx;\n \n \t      if (GET_CODE (x) == SUBREG\n-\t\t  && (CONST_INT_P (new_rtx)\n-\t\t      || GET_CODE (new_rtx) == CONST_DOUBLE))\n+\t\t  && (CONST_INT_P (new_rtx) || CONST_DOUBLE_AS_INT_P (new_rtx)))\n \t\t{\n \t\t  enum machine_mode mode = GET_MODE (x);\n \n@@ -7134,8 +7133,7 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n       if (mode == tmode)\n \treturn new_rtx;\n \n-      if (CONST_INT_P (new_rtx)\n-\t  || GET_CODE (new_rtx) == CONST_DOUBLE)\n+      if (CONST_INT_P (new_rtx) || CONST_DOUBLE_AS_INT_P (new_rtx))\n \treturn simplify_unary_operation (unsignedp ? ZERO_EXTEND : SIGN_EXTEND,\n \t\t\t\t\t mode, new_rtx, tmode);\n \n@@ -10646,9 +10644,7 @@ gen_lowpart_for_combine (enum machine_mode omode, rtx x)\n   /* We can only support MODE being wider than a word if X is a\n      constant integer or has a mode the same size.  */\n   if (GET_MODE_SIZE (omode) > UNITS_PER_WORD\n-      && ! ((imode == VOIDmode\n-\t     && (CONST_INT_P (x)\n-\t\t || GET_CODE (x) == CONST_DOUBLE))\n+      && ! ((CONST_INT_P (x) || CONST_DOUBLE_AS_INT_P (x))\n \t    || isize == osize))\n     goto fail;\n "}, {"sha": "0d3e1f9e09c1b00b322b3ed3fcbbfbf0426e45bf", "filename": "gcc/cprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -1327,7 +1327,7 @@ implicit_set_cond_p (const_rtx cond)\n \t the optimization can't be performed.  */\n       /* ??? The complex and vector checks are not implemented yet.  We just\n \t always return zero for them.  */\n-      if (GET_CODE (cst) == CONST_DOUBLE)\n+      if (CONST_DOUBLE_AS_FLOAT_P (cst))\n \t{\n \t  REAL_VALUE_TYPE d;\n \t  REAL_VALUE_FROM_CONST_DOUBLE (d, cst);"}, {"sha": "33a0666b0ead1d5184f57828a70ba5e8c0213602", "filename": "gcc/cselib.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -1009,8 +1009,9 @@ rtx_equal_for_cselib_1 (rtx x, rtx y, enum machine_mode memmode)\n static rtx\n wrap_constant (enum machine_mode mode, rtx x)\n {\n-  if (!CONST_INT_P (x) && GET_CODE (x) != CONST_FIXED\n-      && (GET_CODE (x) != CONST_DOUBLE || GET_MODE (x) != VOIDmode))\n+  if (!CONST_INT_P (x) \n+      && GET_CODE (x) != CONST_FIXED\n+      && !CONST_DOUBLE_AS_INT_P (x))\n     return x;\n   gcc_assert (mode != VOIDmode);\n   return gen_rtx_CONST (mode, x);"}, {"sha": "ebd49b36adb54a7600b82d86ca1bb4f524f6ec2b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -491,7 +491,7 @@ rtx_to_double_int (const_rtx cst)\n \n   if (CONST_INT_P (cst))\n       r = shwi_to_double_int (INTVAL (cst));\n-  else if (CONST_DOUBLE_P (cst) && GET_MODE (cst) == VOIDmode)\n+  else if (CONST_DOUBLE_AS_INT_P (cst))\n     {\n       r.low = CONST_DOUBLE_LOW (cst);\n       r.high = CONST_DOUBLE_HIGH (cst);\n@@ -1244,7 +1244,7 @@ gen_lowpart_common (enum machine_mode mode, rtx x)\n     }\n   else if (GET_CODE (x) == SUBREG || REG_P (x)\n \t   || GET_CODE (x) == CONCAT || GET_CODE (x) == CONST_VECTOR\n-\t   || GET_CODE (x) == CONST_DOUBLE || CONST_INT_P (x))\n+\t   || CONST_DOUBLE_P (x) || CONST_INT_P (x))\n     return simplify_gen_subreg (mode, x, innermode, offset);\n \n   /* Otherwise, we can't do this.  */"}, {"sha": "ac944f159bdd311d75663e5f815acd7984e451c8", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -3217,7 +3217,7 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n \t  coeff = INTVAL (scalar_op1);\n \t  is_neg = coeff < 0;\n \t}\n-      else if (CONST_DOUBLE_P (scalar_op1))\n+      else if (CONST_DOUBLE_AS_INT_P (scalar_op1))\n \t{\n \t  /* If we are multiplying in DImode, it may still be a win\n \t     to try to work with shifts and adds.  */\n@@ -3290,7 +3290,7 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n  skip_synth:\n \n   /* Expand x*2.0 as x+x.  */\n-  if (GET_CODE (scalar_op1) == CONST_DOUBLE && FLOAT_MODE_P (mode))\n+  if (CONST_DOUBLE_AS_FLOAT_P (scalar_op1))\n     {\n       REAL_VALUE_TYPE d;\n       REAL_VALUE_FROM_CONST_DOUBLE (d, scalar_op1);"}, {"sha": "f7c4419fcee2771087c7f0bf1599b868cf69e11d", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -745,7 +745,7 @@ convert_modes (enum machine_mode mode, enum machine_mode oldmode, rtx x, int uns\n        && GET_MODE_PRECISION (mode) <= HOST_BITS_PER_WIDE_INT)\n       || (GET_MODE_CLASS (mode) == MODE_INT\n \t  && GET_MODE_CLASS (oldmode) == MODE_INT\n-\t  && (GET_CODE (x) == CONST_DOUBLE\n+\t  && (CONST_DOUBLE_AS_INT_P (x) \n \t      || (GET_MODE_PRECISION (mode) <= GET_MODE_PRECISION (oldmode)\n \t\t  && ((MEM_P (x) && ! MEM_VOLATILE_P (x)\n \t\t       && direct_load[(int) mode])"}, {"sha": "0c59b03ded225cc878ffa79ce615684303e88408", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -652,7 +652,7 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \n \t\tcase 'E':\n \t\tcase 'F':\n-\t\t  if (GET_CODE (op) == CONST_DOUBLE\n+\t\t  if (CONST_DOUBLE_AS_FLOAT_P (op) \n \t\t      || (GET_CODE (op) == CONST_VECTOR\n \t\t\t  && (GET_MODE_CLASS (GET_MODE (op))\n \t\t\t      == MODE_VECTOR_FLOAT)))\n@@ -661,15 +661,13 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \n \t\tcase 'G':\n \t\tcase 'H':\n-\t\t  if (GET_CODE (op) == CONST_DOUBLE\n+\t\t  if (CONST_DOUBLE_AS_FLOAT_P (op) \n \t\t      && CONST_DOUBLE_OK_FOR_CONSTRAINT_P (op, c, p))\n \t\t    win = 1;\n \t\t  break;\n \n \t\tcase 's':\n-\t\t  if (CONST_INT_P (op)\n-\t\t      || (GET_CODE (op) == CONST_DOUBLE\n-\t\t\t  && GET_MODE (op) == VOIDmode))\n+\t\t  if (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op)) \n \t\t    break;\n \n \t\tcase 'i':\n@@ -679,9 +677,7 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t  break;\n \n \t\tcase 'n':\n-\t\t  if (CONST_INT_P (op)\n-\t\t      || (GET_CODE (op) == CONST_DOUBLE\n-\t\t\t  && GET_MODE (op) == VOIDmode))\n+\t\t  if (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op)) \n \t\t    win = 1;\n \t\t  break;\n "}, {"sha": "0de1b81b73faf73211d7b0c7d1aa95e401c05d5a", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -780,22 +780,21 @@ single_reg_class (const char *constraints, rtx op, rtx equiv_const)\n \n \tcase 'n':\n \t  if (CONST_INT_P (op)\n-\t      || (GET_CODE (op) == CONST_DOUBLE && GET_MODE (op) == VOIDmode)\n+\t      || CONST_DOUBLE_AS_INT_P (op)\n \t      || (equiv_const != NULL_RTX\n \t\t  && (CONST_INT_P (equiv_const)\n-\t\t      || (GET_CODE (equiv_const) == CONST_DOUBLE\n-\t\t\t  && GET_MODE (equiv_const) == VOIDmode))))\n+\t\t      || CONST_DOUBLE_AS_INT_P (equiv_const))))\n \t    return NO_REGS;\n \t  break;\n \n \tcase 's':\n-\t  if ((CONSTANT_P (op) && !CONST_INT_P (op)\n-\t       && (GET_CODE (op) != CONST_DOUBLE || GET_MODE (op) != VOIDmode))\n+\t  if ((CONSTANT_P (op) \n+\t       && !CONST_INT_P (op) \n+\t       && !CONST_DOUBLE_AS_INT_P (op))\n \t      || (equiv_const != NULL_RTX\n \t\t  && CONSTANT_P (equiv_const)\n \t\t  && !CONST_INT_P (equiv_const)\n-\t\t  && (GET_CODE (equiv_const) != CONST_DOUBLE\n-\t\t      || GET_MODE (equiv_const) != VOIDmode)))\n+\t\t  && !CONST_DOUBLE_AS_INT_P (equiv_const)))\n \t    return NO_REGS;\n \t  break;\n \n@@ -818,11 +817,11 @@ single_reg_class (const char *constraints, rtx op, rtx equiv_const)\n \n \tcase 'E':\n \tcase 'F':\n-\t  if (GET_CODE (op) == CONST_DOUBLE\n+\t  if (CONST_DOUBLE_AS_FLOAT_P (op) \n \t      || (GET_CODE (op) == CONST_VECTOR\n \t\t  && GET_MODE_CLASS (GET_MODE (op)) == MODE_VECTOR_FLOAT)\n \t      || (equiv_const != NULL_RTX\n-\t\t  && (GET_CODE (equiv_const) == CONST_DOUBLE\n+\t\t  && (CONST_DOUBLE_AS_FLOAT_P (equiv_const)\n \t\t      || (GET_CODE (equiv_const) == CONST_VECTOR\n \t\t\t  && (GET_MODE_CLASS (GET_MODE (equiv_const))\n \t\t\t      == MODE_VECTOR_FLOAT)))))\n@@ -831,10 +830,10 @@ single_reg_class (const char *constraints, rtx op, rtx equiv_const)\n \n \tcase 'G':\n \tcase 'H':\n-\t  if ((GET_CODE (op) == CONST_DOUBLE\n+\t  if ((CONST_DOUBLE_AS_FLOAT_P (op) \n \t       && CONST_DOUBLE_OK_FOR_CONSTRAINT_P (op, c, constraints))\n \t      || (equiv_const != NULL_RTX\n-\t\t  && GET_CODE (equiv_const) == CONST_DOUBLE\n+\t\t  && CONST_DOUBLE_AS_FLOAT_P (equiv_const) \n \t\t  && CONST_DOUBLE_OK_FOR_CONSTRAINT_P (equiv_const,\n \t\t\t\t\t\t       c, constraints)))\n \t    return NO_REGS;"}, {"sha": "b2f873f11c39f5729b5e10addc7bdee73eae8ed4", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -3594,7 +3594,7 @@ expand_copysign_absneg (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n   label = gen_label_rtx ();\n   emit_cmp_and_jump_insns (sign, const0_rtx, EQ, NULL_RTX, imode, 1, label);\n \n-  if (GET_CODE (op0) == CONST_DOUBLE)\n+  if (CONST_DOUBLE_AS_FLOAT_P (op0))\n     op0 = simplify_unary_operation (NEG, mode, op0, mode);\n   else\n     op0 = expand_unop (mode, neg_optab, op0, target, 0);\n@@ -3732,15 +3732,15 @@ expand_copysign (rtx op0, rtx op1, rtx target)\n     return NULL_RTX;\n \n   op0_is_abs = false;\n-  if (GET_CODE (op0) == CONST_DOUBLE)\n+  if (CONST_DOUBLE_AS_FLOAT_P (op0))\n     {\n       if (real_isneg (CONST_DOUBLE_REAL_VALUE (op0)))\n \top0 = simplify_unary_operation (ABS, mode, op0, mode);\n       op0_is_abs = true;\n     }\n \n   if (fmt->signbit_ro >= 0\n-      && (GET_CODE (op0) == CONST_DOUBLE\n+      && (CONST_DOUBLE_AS_FLOAT_P (op0) \n \t  || (optab_handler (neg_optab, mode) != CODE_FOR_nothing\n \t      && optab_handler (abs_optab, mode) != CODE_FOR_nothing)))\n     {"}, {"sha": "526b2f296977f25a4f08340e07de445613bbc051", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -195,7 +195,7 @@ print_rtx (const_rtx in_rtx)\n     }\n \n #ifndef GENERATOR_FILE\n-  if (GET_CODE (in_rtx) == CONST_DOUBLE && FLOAT_MODE_P (GET_MODE (in_rtx)))\n+  if (CONST_DOUBLE_AS_FLOAT_P (in_rtx))\n     i = 5;\n #endif\n "}, {"sha": "555bd75cd37c034e042c50090fdc8e77a8203d27", "filename": "gcc/recog.c", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -587,7 +587,7 @@ simplify_while_replacing (rtx *loc, rtx to, rtx object,\n       break;\n     case MINUS:\n       if (CONST_INT_P (XEXP (x, 1))\n-\t  || GET_CODE (XEXP (x, 1)) == CONST_DOUBLE)\n+\t  || CONST_DOUBLE_AS_INT_P (XEXP (x, 1)))\n \tvalidate_change (object, loc,\n \t\t\t simplify_gen_binary\n \t\t\t (PLUS, GET_MODE (x), XEXP (x, 0),\n@@ -1158,7 +1158,7 @@ const_double_operand (rtx op, enum machine_mode mode)\n       && GET_MODE_CLASS (mode) != MODE_PARTIAL_INT)\n     return 0;\n \n-  return ((GET_CODE (op) == CONST_DOUBLE || CONST_INT_P (op))\n+  return ((CONST_DOUBLE_P (op) || CONST_INT_P (op))\n \t  && (mode == VOIDmode || GET_MODE (op) == mode\n \t      || GET_MODE (op) == VOIDmode));\n }\n@@ -1707,27 +1707,25 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \n \tcase 'E':\n \tcase 'F':\n-\t  if (GET_CODE (op) == CONST_DOUBLE\n+\t  if (CONST_DOUBLE_AS_FLOAT_P (op) \n \t      || (GET_CODE (op) == CONST_VECTOR\n \t\t  && GET_MODE_CLASS (GET_MODE (op)) == MODE_VECTOR_FLOAT))\n \t    result = 1;\n \t  break;\n \n \tcase 'G':\n-\t  if (GET_CODE (op) == CONST_DOUBLE\n+\t  if (CONST_DOUBLE_AS_FLOAT_P (op)\n \t      && CONST_DOUBLE_OK_FOR_CONSTRAINT_P (op, 'G', constraint))\n \t    result = 1;\n \t  break;\n \tcase 'H':\n-\t  if (GET_CODE (op) == CONST_DOUBLE\n+\t  if (CONST_DOUBLE_AS_FLOAT_P (op)\n \t      && CONST_DOUBLE_OK_FOR_CONSTRAINT_P (op, 'H', constraint))\n \t    result = 1;\n \t  break;\n \n \tcase 's':\n-\t  if (CONST_INT_P (op)\n-\t      || (GET_CODE (op) == CONST_DOUBLE\n-\t\t  && GET_MODE (op) == VOIDmode))\n+\t  if (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op))\n \t    break;\n \t  /* Fall through.  */\n \n@@ -1737,9 +1735,7 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \t  break;\n \n \tcase 'n':\n-\t  if (CONST_INT_P (op)\n-\t      || (GET_CODE (op) == CONST_DOUBLE\n-\t\t  && GET_MODE (op) == VOIDmode))\n+\t  if (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op))\n \t    result = 1;\n \t  break;\n \n@@ -2578,33 +2574,29 @@ constrain_operands (int strict)\n \n \t      case 'E':\n \t      case 'F':\n-\t\tif (GET_CODE (op) == CONST_DOUBLE\n+\t\tif (CONST_DOUBLE_AS_FLOAT_P (op)\n \t\t    || (GET_CODE (op) == CONST_VECTOR\n \t\t\t&& GET_MODE_CLASS (GET_MODE (op)) == MODE_VECTOR_FLOAT))\n \t\t  win = 1;\n \t\tbreak;\n \n \t      case 'G':\n \t      case 'H':\n-\t\tif (GET_CODE (op) == CONST_DOUBLE\n+\t\tif (CONST_DOUBLE_AS_FLOAT_P (op)\n \t\t    && CONST_DOUBLE_OK_FOR_CONSTRAINT_P (op, c, p))\n \t\t  win = 1;\n \t\tbreak;\n \n \t      case 's':\n-\t\tif (CONST_INT_P (op)\n-\t\t    || (GET_CODE (op) == CONST_DOUBLE\n-\t\t\t&& GET_MODE (op) == VOIDmode))\n+\t\tif (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op))\n \t\t  break;\n \t      case 'i':\n \t\tif (CONSTANT_P (op))\n \t\t  win = 1;\n \t\tbreak;\n \n \t      case 'n':\n-\t\tif (CONST_INT_P (op)\n-\t\t    || (GET_CODE (op) == CONST_DOUBLE\n-\t\t\t&& GET_MODE (op) == VOIDmode))\n+\t\tif (CONST_INT_P (op) || CONST_DOUBLE_AS_INT_P (op))\n \t\t  win = 1;\n \t\tbreak;\n "}, {"sha": "d1e195dad3d56840fd582e3ee5fac24db01c18ac", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -1466,7 +1466,7 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \tif (STACK_REG_P (*src)\n \t    || (STACK_REG_P (*dest)\n \t\t&& (REG_P (*src) || MEM_P (*src)\n-\t\t    || GET_CODE (*src) == CONST_DOUBLE)))\n+\t\t    || CONST_DOUBLE_P (*src))))\n \t  {\n \t    control_flow_insn_deleted |= move_for_stack_reg (insn, regstack, pat);\n \t    break;"}, {"sha": "39178d857d1c76e155e8a1ac3a0d267d7c81bf0c", "filename": "gcc/reload.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -3363,7 +3363,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \n \t\t  case 'E':\n \t\t  case 'F':\n-\t\t    if (GET_CODE (operand) == CONST_DOUBLE\n+\t\t    if (CONST_DOUBLE_AS_FLOAT_P (operand)\n \t\t\t|| (GET_CODE (operand) == CONST_VECTOR\n \t\t\t    && (GET_MODE_CLASS (GET_MODE (operand))\n \t\t\t\t== MODE_VECTOR_FLOAT)))\n@@ -3372,15 +3372,13 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \n \t\t  case 'G':\n \t\t  case 'H':\n-\t\t    if (GET_CODE (operand) == CONST_DOUBLE\n+\t\t    if (CONST_DOUBLE_AS_FLOAT_P (operand)\n \t\t\t&& CONST_DOUBLE_OK_FOR_CONSTRAINT_P (operand, c, p))\n \t\t      win = 1;\n \t\t    break;\n \n \t\t  case 's':\n-\t\t    if (CONST_INT_P (operand)\n-\t\t\t|| (GET_CODE (operand) == CONST_DOUBLE\n-\t\t\t    && GET_MODE (operand) == VOIDmode))\n+\t\t    if (CONST_INT_P (operand) || CONST_DOUBLE_AS_INT_P (operand))\n \t\t      break;\n \t\t  case 'i':\n \t\t    if (CONSTANT_P (operand)\n@@ -3389,9 +3387,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t    break;\n \n \t\t  case 'n':\n-\t\t    if (CONST_INT_P (operand)\n-\t\t\t|| (GET_CODE (operand) == CONST_DOUBLE\n-\t\t\t    && GET_MODE (operand) == VOIDmode))\n+\t\t    if (CONST_INT_P (operand) || CONST_DOUBLE_AS_INT_P (operand))\n \t\t      win = 1;\n \t\t    break;\n \n@@ -6810,7 +6806,7 @@ find_equiv_reg (rtx goal, rtx insn, enum reg_class rclass, int other,\n \t\t\t   && (valueno\n \t\t\t       = true_regnum (valtry = SET_DEST (pat))) >= 0)\n \t\t\t  || (REG_P (SET_DEST (pat))\n-\t\t\t      && GET_CODE (XEXP (tem, 0)) == CONST_DOUBLE\n+\t\t\t      && CONST_DOUBLE_AS_FLOAT_P (XEXP (tem, 0))\n \t\t\t      && SCALAR_FLOAT_MODE_P (GET_MODE (XEXP (tem, 0)))\n \t\t\t      && CONST_INT_P (goal)\n \t\t\t      && 0 != (goaltry\n@@ -6824,7 +6820,7 @@ find_equiv_reg (rtx goal, rtx insn, enum reg_class rclass, int other,\n \t\t  || (goal_const && (tem = find_reg_note (p, REG_EQUIV,\n \t\t\t\t\t\t\t  NULL_RTX))\n \t\t      && REG_P (SET_DEST (pat))\n-\t\t      && GET_CODE (XEXP (tem, 0)) == CONST_DOUBLE\n+\t\t      && CONST_DOUBLE_AS_FLOAT_P (XEXP (tem, 0))\n \t\t      && SCALAR_FLOAT_MODE_P (GET_MODE (XEXP (tem, 0)))\n \t\t      && CONST_INT_P (goal)\n \t\t      && 0 != (goaltry = operand_subword (XEXP (tem, 0), 1, 0,"}, {"sha": "e8a6adfd0990b869cedb222293d01f7af77aed1f", "filename": "gcc/rtl.def", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -322,9 +322,10 @@ DEF_RTL_EXPR(CONST_INT, \"const_int\", \"w\", RTX_CONST_OBJ)\n /* fixed-point constant */\n DEF_RTL_EXPR(CONST_FIXED, \"const_fixed\", \"www\", RTX_CONST_OBJ)\n \n-/* numeric floating point constant.\n-   Operands hold the value.  They are all 'w' and there may be from 2 to 6;\n-   see real.h.  */\n+/* numeric floating point or integer constant.  If the mode is\n+   VOIDmode it is an int otherwise it has a floating point mode and a\n+   floating point value.  Operands hold the value.  They are all 'w'\n+   and there may be from 2 to 6; see real.h.  */\n DEF_RTL_EXPR(CONST_DOUBLE, \"const_double\", CONST_DOUBLE_FORMAT, RTX_CONST_OBJ)\n \n /* Describes a vector constant.  */"}, {"sha": "8ecd4bd27d8e29748558678b8989276edd645ffe", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -410,6 +410,14 @@ struct GTY((variable_size)) rtvec_def {\n    or floating point constant.  */\n #define CONST_DOUBLE_P(X) (GET_CODE (X) == CONST_DOUBLE)\n \n+/* Predicate yielding true iff X is an rtx for a double-int.  */\n+#define CONST_DOUBLE_AS_INT_P(X) \\\n+  (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == VOIDmode)\n+\n+/* Predicate yielding true iff X is an rtx for a double-int.  */\n+#define CONST_DOUBLE_AS_FLOAT_P(X) \\\n+  (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != VOIDmode)\n+\n /* Predicate yielding nonzero iff X is a label insn.  */\n #define LABEL_P(X) (GET_CODE (X) == CODE_LABEL)\n "}, {"sha": "eeb012dfa840b6a58e6d7ecf82af26ff937acf93", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -2571,11 +2571,6 @@ replace_rtx (rtx x, rtx from, rtx to)\n   int i, j;\n   const char *fmt;\n \n-  /* The following prevents loops occurrence when we change MEM in\n-     CONST_DOUBLE onto the same CONST_DOUBLE.  */\n-  if (x != 0 && GET_CODE (x) == CONST_DOUBLE)\n-    return x;\n-\n   if (x == from)\n     return to;\n \n@@ -5277,7 +5272,7 @@ bool\n constant_pool_constant_p (rtx x)\n {\n   x = avoid_constant_pool_reference (x);\n-  return GET_CODE (x) == CONST_DOUBLE;\n+  return CONST_DOUBLE_P (x);\n }\n \f\n /* If M is a bitmask that selects a field of low-order bits within an item but\n@@ -5391,7 +5386,7 @@ split_double (rtx value, rtx *first, rtx *second)\n \t    }\n \t}\n     }\n-  else if (GET_CODE (value) != CONST_DOUBLE)\n+  else if (!CONST_DOUBLE_P (value))\n     {\n       if (WORDS_BIG_ENDIAN)\n \t{"}, {"sha": "0eed715ccfb053b197c22e1d6e934ac802b860e6", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 39, "deletions": 54, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -89,7 +89,7 @@ mode_signbit_p (enum machine_mode mode, const_rtx x)\n       && CONST_INT_P (x))\n     val = INTVAL (x);\n   else if (width <= HOST_BITS_PER_DOUBLE_INT\n-\t   && GET_CODE (x) == CONST_DOUBLE\n+\t   && CONST_DOUBLE_AS_INT_P (x)\n \t   && CONST_DOUBLE_LOW (x) == 0)\n     {\n       val = CONST_DOUBLE_HIGH (x);\n@@ -200,7 +200,7 @@ avoid_constant_pool_reference (rtx x)\n       /* Handle float extensions of constant pool references.  */\n       tmp = XEXP (x, 0);\n       c = avoid_constant_pool_reference (tmp);\n-      if (c != tmp && GET_CODE (c) == CONST_DOUBLE)\n+      if (c != tmp && CONST_DOUBLE_AS_FLOAT_P (c))\n \t{\n \t  REAL_VALUE_TYPE d;\n \n@@ -730,7 +730,7 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t{\n \t  /* (neg (plus A C)) is simplified to (minus -C A).  */\n \t  if (CONST_INT_P (XEXP (op, 1))\n-\t      || GET_CODE (XEXP (op, 1)) == CONST_DOUBLE)\n+\t      || CONST_DOUBLE_P (XEXP (op, 1)))\n \t    {\n \t      temp = simplify_unary_operation (NEG, mode, XEXP (op, 1), mode);\n \t      if (temp)\n@@ -1275,7 +1275,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  gcc_assert (GET_MODE_INNER (mode) == GET_MODE_INNER\n \t\t\t\t\t\t(GET_MODE (op)));\n       }\n-      if (CONST_INT_P (op) || GET_CODE (op) == CONST_DOUBLE\n+      if (CONST_INT_P (op) || CONST_DOUBLE_P (op)\n \t  || GET_CODE (op) == CONST_VECTOR)\n \t{\n           int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n@@ -1328,8 +1328,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n      check the wrong mode (input vs. output) for a conversion operation,\n      such as FIX.  At some point, this should be simplified.  */\n \n-  if (code == FLOAT && GET_MODE (op) == VOIDmode\n-      && (GET_CODE (op) == CONST_DOUBLE || CONST_INT_P (op)))\n+  if (code == FLOAT && (CONST_DOUBLE_AS_INT_P (op) || CONST_INT_P (op)))\n     {\n       HOST_WIDE_INT hv, lv;\n       REAL_VALUE_TYPE d;\n@@ -1343,9 +1342,8 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n       d = real_value_truncate (mode, d);\n       return CONST_DOUBLE_FROM_REAL_VALUE (d, mode);\n     }\n-  else if (code == UNSIGNED_FLOAT && GET_MODE (op) == VOIDmode\n-\t   && (GET_CODE (op) == CONST_DOUBLE\n-\t       || CONST_INT_P (op)))\n+  else if (code == UNSIGNED_FLOAT\n+\t   && (CONST_DOUBLE_AS_INT_P (op) || CONST_INT_P (op)))\n     {\n       HOST_WIDE_INT hv, lv;\n       REAL_VALUE_TYPE d;\n@@ -1516,15 +1514,13 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \n   /* We can do some operations on integer CONST_DOUBLEs.  Also allow\n      for a DImode operation on a CONST_INT.  */\n-  else if (GET_MODE (op) == VOIDmode\n-\t   && width <= HOST_BITS_PER_DOUBLE_INT\n-\t   && (GET_CODE (op) == CONST_DOUBLE\n-\t       || CONST_INT_P (op)))\n+  else if (width <= HOST_BITS_PER_DOUBLE_INT\n+\t   && (CONST_DOUBLE_AS_INT_P (op) || CONST_INT_P (op)))\n     {\n       unsigned HOST_WIDE_INT l1, lv;\n       HOST_WIDE_INT h1, hv;\n \n-      if (GET_CODE (op) == CONST_DOUBLE)\n+      if (CONST_DOUBLE_AS_INT_P (op))\n \tl1 = CONST_DOUBLE_LOW (op), h1 = CONST_DOUBLE_HIGH (op);\n       else\n \tl1 = INTVAL (op), h1 = HWI_SIGN_EXTEND (l1);\n@@ -1660,7 +1656,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n       return immed_double_const (lv, hv, mode);\n     }\n \n-  else if (GET_CODE (op) == CONST_DOUBLE\n+  else if (CONST_DOUBLE_AS_FLOAT_P (op) \n \t   && SCALAR_FLOAT_MODE_P (mode)\n \t   && SCALAR_FLOAT_MODE_P (GET_MODE (op)))\n     {\n@@ -1710,7 +1706,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n       return CONST_DOUBLE_FROM_REAL_VALUE (d, mode);\n     }\n \n-  else if (GET_CODE (op) == CONST_DOUBLE\n+  else if (CONST_DOUBLE_AS_FLOAT_P (op)\n \t   && SCALAR_FLOAT_MODE_P (GET_MODE (op))\n \t   && GET_MODE_CLASS (mode) == MODE_INT\n \t   && width <= HOST_BITS_PER_DOUBLE_INT && width > 0)\n@@ -2033,11 +2029,10 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t}\n \n       /* (plus (xor X C1) C2) is (xor X (C1^C2)) if C2 is signbit.  */\n-      if ((CONST_INT_P (op1)\n-\t   || GET_CODE (op1) == CONST_DOUBLE)\n+      if ((CONST_INT_P (op1) || CONST_DOUBLE_AS_INT_P (op1))\n \t  && GET_CODE (op0) == XOR\n \t  && (CONST_INT_P (XEXP (op0, 1))\n-\t      || GET_CODE (XEXP (op0, 1)) == CONST_DOUBLE)\n+\t      || CONST_DOUBLE_AS_INT_P (XEXP (op0, 1)))\n \t  && mode_signbit_p (mode, op1))\n \treturn simplify_gen_binary (XOR, mode, XEXP (op0, 0),\n \t\t\t\t    simplify_gen_binary (XOR, mode, op1,\n@@ -2219,8 +2214,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \n       /* (-x - c) may be simplified as (-c - x).  */\n       if (GET_CODE (op0) == NEG\n-\t  && (CONST_INT_P (op1)\n-\t      || GET_CODE (op1) == CONST_DOUBLE))\n+\t  && (CONST_INT_P (op1) || CONST_DOUBLE_P (op1)))\n \t{\n \t  tem = simplify_unary_operation (NEG, mode, op1, mode);\n \t  if (tem)\n@@ -2370,9 +2364,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \treturn simplify_gen_binary (ASHIFT, mode, op0, GEN_INT (val));\n \n       /* Likewise for multipliers wider than a word.  */\n-      if (GET_CODE (trueop1) == CONST_DOUBLE\n-\t  && (GET_MODE (trueop1) == VOIDmode\n-\t      || GET_MODE_CLASS (GET_MODE (trueop1)) == MODE_INT)\n+      if (CONST_DOUBLE_AS_INT_P (trueop1)\n \t  && GET_MODE (op0) == mode\n \t  && CONST_DOUBLE_LOW (trueop1) == 0\n \t  && (val = exact_log2 (CONST_DOUBLE_HIGH (trueop1))) >= 0\n@@ -2382,7 +2374,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t\t\t\t    GEN_INT (val + HOST_BITS_PER_WIDE_INT));\n \n       /* x*2 is x+x and x*(-1) is -x */\n-      if (GET_CODE (trueop1) == CONST_DOUBLE\n+      if (CONST_DOUBLE_AS_FLOAT_P (trueop1)\n \t  && SCALAR_FLOAT_MODE_P (GET_MODE (trueop1))\n \t  && !DECIMAL_FLOAT_MODE_P (GET_MODE (trueop1))\n \t  && GET_MODE (op0) == mode)\n@@ -2577,16 +2569,14 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t return CONST0_RTX (mode);\n \n       /* Canonicalize XOR of the most significant bit to PLUS.  */\n-      if ((CONST_INT_P (op1)\n-\t   || GET_CODE (op1) == CONST_DOUBLE)\n+      if ((CONST_INT_P (op1) || CONST_DOUBLE_AS_INT_P (op1))\n \t  && mode_signbit_p (mode, op1))\n \treturn simplify_gen_binary (PLUS, mode, op0, op1);\n       /* (xor (plus X C1) C2) is (xor X (C1^C2)) if C1 is signbit.  */\n-      if ((CONST_INT_P (op1)\n-\t   || GET_CODE (op1) == CONST_DOUBLE)\n+      if ((CONST_INT_P (op1) || CONST_DOUBLE_AS_INT_P (op1))\n \t  && GET_CODE (op0) == PLUS\n \t  && (CONST_INT_P (XEXP (op0, 1))\n-\t      || GET_CODE (XEXP (op0, 1)) == CONST_DOUBLE)\n+\t      || CONST_DOUBLE_AS_INT_P (XEXP (op0, 1)))\n \t  && mode_signbit_p (mode, XEXP (op0, 1)))\n \treturn simplify_gen_binary (XOR, mode, XEXP (op0, 0),\n \t\t\t\t    simplify_gen_binary (XOR, mode, op1,\n@@ -2929,7 +2919,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t      && !HONOR_SNANS (mode))\n \t    return op0;\n \n-\t  if (GET_CODE (trueop1) == CONST_DOUBLE\n+\t  if (CONST_DOUBLE_AS_FLOAT_P (trueop1)\n \t      && trueop1 != CONST0_RTX (mode))\n \t    {\n \t      REAL_VALUE_TYPE d;\n@@ -3317,11 +3307,9 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t  gcc_assert (GET_MODE_INNER (mode) == op1_mode);\n \n \tif ((GET_CODE (trueop0) == CONST_VECTOR\n-\t     || CONST_INT_P (trueop0)\n-\t     || GET_CODE (trueop0) == CONST_DOUBLE)\n+\t     || CONST_INT_P (trueop0) || CONST_DOUBLE_P (trueop0))\n \t    && (GET_CODE (trueop1) == CONST_VECTOR\n-\t\t|| CONST_INT_P (trueop1)\n-\t\t|| GET_CODE (trueop1) == CONST_DOUBLE))\n+\t\t|| CONST_INT_P (trueop1) || CONST_DOUBLE_P (trueop1)))\n \t  {\n \t    int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n \t    unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n@@ -3401,10 +3389,10 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n   if (VECTOR_MODE_P (mode)\n       && code == VEC_CONCAT\n       && (CONST_INT_P (op0)\n-\t  || GET_CODE (op0) == CONST_DOUBLE\n-\t  || GET_CODE (op0) == CONST_FIXED)\n+\t  || GET_CODE (op0) == CONST_FIXED\n+\t  || CONST_DOUBLE_P (op0))\n       && (CONST_INT_P (op1)\n-\t  || GET_CODE (op1) == CONST_DOUBLE\n+\t  || CONST_DOUBLE_P (op1)\n \t  || GET_CODE (op1) == CONST_FIXED))\n     {\n       unsigned n_elts = GET_MODE_NUNITS (mode);\n@@ -3439,8 +3427,8 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n     }\n \n   if (SCALAR_FLOAT_MODE_P (mode)\n-      && GET_CODE (op0) == CONST_DOUBLE\n-      && GET_CODE (op1) == CONST_DOUBLE\n+      && CONST_DOUBLE_AS_FLOAT_P (op0) \n+      && CONST_DOUBLE_AS_FLOAT_P (op1)\n       && mode == GET_MODE (op0) && mode == GET_MODE (op1))\n     {\n       if (code == AND\n@@ -3562,8 +3550,8 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n   /* We can fold some multi-word operations.  */\n   if (GET_MODE_CLASS (mode) == MODE_INT\n       && width == HOST_BITS_PER_DOUBLE_INT\n-      && (CONST_DOUBLE_P (op0) || CONST_INT_P (op0))\n-      && (CONST_DOUBLE_P (op1) || CONST_INT_P (op1)))\n+      && (CONST_DOUBLE_AS_INT_P (op0) || CONST_INT_P (op0))\n+      && (CONST_DOUBLE_AS_INT_P (op1) || CONST_INT_P (op1)))\n     {\n       double_int o0, o1, res, tmp;\n \n@@ -4432,10 +4420,9 @@ simplify_relational_operation_1 (enum rtx_code code, enum machine_mode mode,\n   /* (eq/ne (xor x C1) C2) simplifies to (eq/ne x (C1^C2)).  */\n   if ((code == EQ || code == NE)\n       && op0code == XOR\n-      && (CONST_INT_P (op1)\n-\t  || GET_CODE (op1) == CONST_DOUBLE)\n+      && (CONST_INT_P (op1) || CONST_DOUBLE_AS_INT_P (op1))\n       && (CONST_INT_P (XEXP (op0, 1))\n-\t  || GET_CODE (XEXP (op0, 1)) == CONST_DOUBLE))\n+\t  || CONST_DOUBLE_AS_INT_P (XEXP (op0, 1))))\n     return simplify_gen_relational (code, mode, cmp_mode, XEXP (op0, 0),\n \t\t\t\t    simplify_gen_binary (XOR, cmp_mode,\n \t\t\t\t\t\t\t XEXP (op0, 1), op1));\n@@ -4612,8 +4599,8 @@ simplify_const_relational_operation (enum rtx_code code,\n \n   /* If the operands are floating-point constants, see if we can fold\n      the result.  */\n-  if (GET_CODE (trueop0) == CONST_DOUBLE\n-      && GET_CODE (trueop1) == CONST_DOUBLE\n+  if (CONST_DOUBLE_AS_FLOAT_P (trueop0)\n+      && CONST_DOUBLE_AS_FLOAT_P (trueop1)\n       && SCALAR_FLOAT_MODE_P (GET_MODE (trueop0)))\n     {\n       REAL_VALUE_TYPE d0, d1;\n@@ -4652,17 +4639,15 @@ simplify_const_relational_operation (enum rtx_code code,\n \n   /* Otherwise, see if the operands are both integers.  */\n   if ((GET_MODE_CLASS (mode) == MODE_INT || mode == VOIDmode)\n-       && (GET_CODE (trueop0) == CONST_DOUBLE\n-\t   || CONST_INT_P (trueop0))\n-       && (GET_CODE (trueop1) == CONST_DOUBLE\n-\t   || CONST_INT_P (trueop1)))\n+       && (CONST_DOUBLE_AS_INT_P (trueop0) || CONST_INT_P (trueop0))\n+       && (CONST_DOUBLE_AS_INT_P (trueop1) || CONST_INT_P (trueop1)))\n     {\n       int width = GET_MODE_PRECISION (mode);\n       HOST_WIDE_INT l0s, h0s, l1s, h1s;\n       unsigned HOST_WIDE_INT l0u, h0u, l1u, h1u;\n \n       /* Get the two words comprising each integer constant.  */\n-      if (GET_CODE (trueop0) == CONST_DOUBLE)\n+      if (CONST_DOUBLE_AS_INT_P (trueop0))\n \t{\n \t  l0u = l0s = CONST_DOUBLE_LOW (trueop0);\n \t  h0u = h0s = CONST_DOUBLE_HIGH (trueop0);\n@@ -4673,7 +4658,7 @@ simplify_const_relational_operation (enum rtx_code code,\n \t  h0u = h0s = HWI_SIGN_EXTEND (l0s);\n \t}\n \n-      if (GET_CODE (trueop1) == CONST_DOUBLE)\n+      if (CONST_DOUBLE_AS_INT_P (trueop1))\n \t{\n \t  l1u = l1s = CONST_DOUBLE_LOW (trueop1);\n \t  h1u = h1s = CONST_DOUBLE_HIGH (trueop1);\n@@ -5455,7 +5440,7 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n     return op;\n \n   if (CONST_INT_P (op)\n-      || GET_CODE (op) == CONST_DOUBLE\n+      || CONST_DOUBLE_P (op)\n       || GET_CODE (op) == CONST_FIXED\n       || GET_CODE (op) == CONST_VECTOR)\n     return simplify_immed_subreg (outermode, op, innermode, byte);"}, {"sha": "a1f0a231595b8101d945e18161bd033510829521", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481755378d5632997e4f91b284a4eef52001b79c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=481755378d5632997e4f91b284a4eef52001b79c", "patch": "@@ -3626,7 +3626,7 @@ output_constant_pool_2 (enum machine_mode mode, rtx x, unsigned int align)\n       {\n \tREAL_VALUE_TYPE r;\n \n-\tgcc_assert (GET_CODE (x) == CONST_DOUBLE);\n+\tgcc_assert (CONST_DOUBLE_AS_FLOAT_P (x));\n \tREAL_VALUE_FROM_CONST_DOUBLE (r, x);\n \tassemble_real (r, mode, align);\n \tbreak;"}]}