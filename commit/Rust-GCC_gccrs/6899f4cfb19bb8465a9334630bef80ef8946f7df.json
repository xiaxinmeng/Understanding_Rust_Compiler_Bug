{"sha": "6899f4cfb19bb8465a9334630bef80ef8946f7df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg5OWY0Y2ZiMTliYjg0NjVhOTMzNDYzMGJlZjgwZWY4OTQ2ZjdkZg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-09-22T17:14:05Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-09-22T17:14:05Z"}, "message": "Fix size_t, ptrdiff_t and wchar_t like fixincludes does.\n\n Fix size_t, ptrdiff_t and wchar_t like fixincludes\n        does.  Use extern inline rather than static inline in byteorder.h.\n\nFrom-SVN: r8121", "tree": {"sha": "ba54db0e7bd40a4e1cc23d9851ce869b4c874e25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba54db0e7bd40a4e1cc23d9851ce869b4c874e25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6899f4cfb19bb8465a9334630bef80ef8946f7df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6899f4cfb19bb8465a9334630bef80ef8946f7df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6899f4cfb19bb8465a9334630bef80ef8946f7df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6899f4cfb19bb8465a9334630bef80ef8946f7df/comments", "author": null, "committer": null, "parents": [{"sha": "26dac81079a08fc0b7f404921002e9573594a9e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26dac81079a08fc0b7f404921002e9573594a9e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26dac81079a08fc0b7f404921002e9573594a9e3"}], "stats": {"total": 71, "additions": 50, "deletions": 21}, "files": [{"sha": "ac7bdb15f8a9d31b7dbe89ba1afc4c33627097c8", "filename": "gcc/fixinc.svr4", "status": "modified", "additions": 50, "deletions": 21, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6899f4cfb19bb8465a9334630bef80ef8946f7df/gcc%2Ffixinc.svr4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6899f4cfb19bb8465a9334630bef80ef8946f7df/gcc%2Ffixinc.svr4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc.svr4?ref=6899f4cfb19bb8465a9334630bef80ef8946f7df", "patch": "@@ -200,6 +200,44 @@ while [ $# != 0 ]; do\n   shift; shift\n done\n \n+# Install the proper definition of the three standard types in header files\n+# that they come from.\n+for file in sys/types.h stdlib.h sys/stdtypes.h stddef.h memory.h unistd.h; do\n+  if [ -r $file ] && [ ! -r ${LIB}/$file ]; then\n+    cp $file ${LIB}/$file >/dev/null 2>&1 || echo \"Can't copy $file\"\n+    chmod +w ${LIB}/$file 2>/dev/null\n+    chmod a+r ${LIB}/$file 2>/dev/null\n+  fi\n+\n+  if [ -r ${LIB}/$file ]; then\n+    echo Fixing size_t, ptrdiff_t and wchar_t in $file\n+    sed \\\n+      -e '/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]size_t/i\\\n+#ifndef __SIZE_TYPE__\\\n+#define __SIZE_TYPE__ long unsigned int\\\n+#endif\n+' \\\n+      -e 's/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]size_t/typedef __SIZE_TYPE__ size_t/' \\\n+      -e '/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]ptrdiff_t/i\\\n+#ifndef __PTRDIFF_TYPE__\\\n+#define __PTRDIFF_TYPE__ long int\\\n+#endif\n+' \\\n+      -e 's/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]ptrdiff_t/typedef __PTRDIFF_TYPE__ ptrdiff_t/' \\\n+      -e '/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]wchar_t/i\\\n+#ifndef __WCHAR_TYPE__\\\n+#define __WCHAR_TYPE__ int\\\n+#endif\n+' \\\n+      -e 's/typedef[ \t][ \t]*[a-z_][ \ta-z_]*[ \t]wchar_t/typedef __WCHAR_TYPE__ wchar_t/' \\\n+      ${LIB}/$file > ${LIB}/${file}.sed\n+    rm -f ${LIB}/$file; mv ${LIB}/${file}.sed ${LIB}/$file\n+    if cmp $file ${LIB}/$file >/dev/null 2>&1; then\n+      rm ${LIB}/$file\n+    fi\n+  fi\n+done\n+\n # Fix first broken decl of getcwd present on some svr4 systems.\n \n file=stdlib.h\n@@ -1470,17 +1508,11 @@ cat <<'__EOF__' >${LIB}/sys/byteorder.h\n #define __PDP_ENDIAN__      3412\n #endif\n \n-#ifdef __GNUC__\n-#define __STATIC static\n-#else\n-#define __STATIC\n-#endif\n-\n #ifdef __STDC__\n-__STATIC __inline__ unsigned long htonl (unsigned long);\n-__STATIC __inline__ unsigned short htons (unsigned int);\n-__STATIC __inline__ unsigned long ntohl (unsigned long);\n-__STATIC __inline__ unsigned short ntohs (unsigned int);\n+extern __inline__ unsigned long htonl (unsigned long);\n+extern __inline__ unsigned short htons (unsigned int);\n+extern __inline__ unsigned long ntohl (unsigned long);\n+extern __inline__ unsigned short ntohs (unsigned int);\n #endif /* defined (__STDC__) */\n \n #if defined (__i386__)\n@@ -1493,7 +1525,7 @@ __STATIC __inline__ unsigned short ntohs (unsigned int);\n \n /* We must use a new-style function definition, so that this will also\n    be valid for C++.  */\n-__STATIC __inline__ unsigned long\n+extern __inline__ unsigned long\n htonl (unsigned long __arg)\n {\n   register unsigned long __result;\n@@ -1506,7 +1538,7 @@ htonl (unsigned long __arg)\n \n /* Convert a host short to a network short.  */\n \n-__STATIC __inline__ unsigned short\n+extern __inline__ unsigned short\n htons (unsigned int __arg)\n {\n   register unsigned short __result;\n@@ -1528,7 +1560,7 @@ htons (unsigned int __arg)\n \n /* Convert a host long to a network long.  */\n \n-__STATIC __inline__ unsigned long\n+extern __inline__ unsigned long\n htonl (unsigned long __arg)\n {\n   register unsigned long __result;\n@@ -1542,7 +1574,7 @@ htonl (unsigned long __arg)\n \n /* Convert a host short to a network short.  */\n \n-__STATIC __inline__ unsigned short\n+extern __inline__ unsigned short\n htons (unsigned int __arg)\n {\n   register unsigned short __result;\n@@ -1560,15 +1592,15 @@ htons (unsigned int __arg)\n \n /* Convert a host long to a network long.  */\n \n-__STATIC __inline__ unsigned long\n+extern __inline__ unsigned long\n htonl (unsigned long __arg)\n {\n   return __arg;\n }\n \n /* Convert a host short to a network short.  */\n \n-__STATIC __inline__ unsigned short\n+extern __inline__ unsigned short\n htons (unsigned int __arg)\n {\n   return __arg;\n@@ -1578,23 +1610,20 @@ htons (unsigned int __arg)\n \n /* Convert a network long to a host long.  */\n \n-__STATIC __inline__ unsigned long\n+extern __inline__ unsigned long\n ntohl (unsigned long __arg)\n {\n   return htonl (__arg);\n }\n \n /* Convert a network short to a host short.  */\n \n-__STATIC __inline__ unsigned short\n+extern __inline__ unsigned short\n ntohs (unsigned int __arg)\n {\n   return htons (__arg);\n }\n \n-\n-#undef __STATIC\n-\n __EOF__\n \n if [ -r ${INPUT}/sys/byteorder.h ]; then"}]}