{"sha": "79a2e690b4654e88437aa40627f24068dc5216f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlhMmU2OTBiNDY1NGU4ODQzN2FhNDA2MjdmMjQwNjhkYzUyMTZmNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-29T14:28:24Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-29T14:28:24Z"}, "message": "class.c (finish_struct): Use OVL_P.\n\n\t* class.c (finish_struct): Use OVL_P.\n\t(get_vfield_name): Measure constructor_name length.\n\t* cp-tree.h (SET_CLASS_TYPE_P): Add RECORD_OR_UNION_CHECK.\n\t(NON_UNION_CLASS_TYPE_P): Check RECORD_TYPE up front.\n\t* cxx-pretty-print.c (is_destructor_name): Delete.\n\t(pp_cxx_unqualified_id): Remove bogus destructor name checking.\n\t* decl.c (grokfndecl): Move cheap checks first when looking for\n\timplicit extern cness.\n\nFrom-SVN: r249788", "tree": {"sha": "7f3c0688b56f3b43464c3d6023a94fcb4c03812d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f3c0688b56f3b43464c3d6023a94fcb4c03812d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79a2e690b4654e88437aa40627f24068dc5216f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a2e690b4654e88437aa40627f24068dc5216f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a2e690b4654e88437aa40627f24068dc5216f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a2e690b4654e88437aa40627f24068dc5216f5/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a82bd058df19d15cfbd0c16a09a6ba0c5c5cfa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a82bd058df19d15cfbd0c16a09a6ba0c5c5cfa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a82bd058df19d15cfbd0c16a09a6ba0c5c5cfa7"}], "stats": {"total": 63, "additions": 28, "deletions": 35}, "files": [{"sha": "b91a6e072ae463879663160bb34c893c9a576743", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a2e690b4654e88437aa40627f24068dc5216f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a2e690b4654e88437aa40627f24068dc5216f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=79a2e690b4654e88437aa40627f24068dc5216f5", "patch": "@@ -1,5 +1,14 @@\n 2017-06-29  Nathan Sidwell  <nathan@acm.org>\n \n+\t* class.c (finish_struct): Use OVL_P.\n+\t(get_vfield_name): Measure constructor_name length.\n+\t* cp-tree.h (SET_CLASS_TYPE_P): Add RECORD_OR_UNION_CHECK.\n+\t(NON_UNION_CLASS_TYPE_P): Check RECORD_TYPE up front.\n+\t* cxx-pretty-print.c (is_destructor_name): Delete.\n+\t(pp_cxx_unqualified_id): Remove bogus destructor name checking.\n+\t* decl.c (grokfndecl): Move cheap checks first when looking for\n+\timplicit extern cness.\n+\n \t* parser.c (cp_parser_direct_declarator): Reorder if to avoid\n \tindentation. Remove unnecessary assignment of constructor name.\n "}, {"sha": "2caf6fc374bd30f8612230a9fd23d2a3f0e40d1a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a2e690b4654e88437aa40627f24068dc5216f5/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a2e690b4654e88437aa40627f24068dc5216f5/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=79a2e690b4654e88437aa40627f24068dc5216f5", "patch": "@@ -7443,7 +7443,7 @@ finish_struct (tree t, tree attributes)\n \tif (TREE_CODE (x) == USING_DECL)\n \t  {\n \t    tree fn = strip_using_decl (x);\n-\t    if (is_overloaded_fn (fn))\n+  \t    if (OVL_P (fn))\n \t      for (lkp_iterator iter (fn); iter; ++iter)\n \t\tadd_method (t, *iter, true);\n \t  }\n@@ -8504,7 +8504,6 @@ static tree\n get_vfield_name (tree type)\n {\n   tree binfo, base_binfo;\n-  char *buf;\n \n   for (binfo = TYPE_BINFO (type);\n        BINFO_N_BASE_BINFOS (binfo);\n@@ -8518,10 +8517,10 @@ get_vfield_name (tree type)\n     }\n \n   type = BINFO_TYPE (binfo);\n-  buf = (char *) alloca (sizeof (VFIELD_NAME_FORMAT)\n-\t\t\t + TYPE_NAME_LENGTH (type) + 2);\n-  sprintf (buf, VFIELD_NAME_FORMAT,\n-\t   IDENTIFIER_POINTER (constructor_name (type)));\n+  tree ctor_name = constructor_name (type);\n+  char *buf = (char *) alloca (sizeof (VFIELD_NAME_FORMAT)\n+\t\t\t       + IDENTIFIER_LENGTH (ctor_name) + 2);\n+  sprintf (buf, VFIELD_NAME_FORMAT, IDENTIFIER_POINTER (ctor_name));\n   return get_identifier (buf);\n }\n "}, {"sha": "6717bcb1a27426a8e1a5a2b547fd646527569165", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a2e690b4654e88437aa40627f24068dc5216f5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a2e690b4654e88437aa40627f24068dc5216f5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=79a2e690b4654e88437aa40627f24068dc5216f5", "patch": "@@ -1814,7 +1814,7 @@ enum languages { lang_c, lang_cplusplus };\n /* Set CLASS_TYPE_P for T to VAL.  T must be a class, struct, or\n    union type.  */\n #define SET_CLASS_TYPE_P(T, VAL) \\\n-  (TYPE_LANG_FLAG_5 (T) = (VAL))\n+  (TYPE_LANG_FLAG_5 (RECORD_OR_UNION_CHECK (T)) = (VAL))\n \n /* Nonzero if T is a class type.  Zero for template type parameters,\n    typename types, and so forth.  */\n@@ -1823,7 +1823,7 @@ enum languages { lang_c, lang_cplusplus };\n \n /* Nonzero if T is a class type but not an union.  */\n #define NON_UNION_CLASS_TYPE_P(T) \\\n-  (CLASS_TYPE_P (T) && TREE_CODE (T) != UNION_TYPE)\n+  (TREE_CODE (T) == RECORD_TYPE && TYPE_LANG_FLAG_5 (T))\n \n /* Keep these checks in ascending code order.  */\n #define RECORD_OR_UNION_CODE_P(T)\t\\"}, {"sha": "edaee04d7fb19e7ebd0efcc725491f2196579578", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a2e690b4654e88437aa40627f24068dc5216f5/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a2e690b4654e88437aa40627f24068dc5216f5/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=79a2e690b4654e88437aa40627f24068dc5216f5", "patch": "@@ -88,14 +88,6 @@ pp_cxx_separate_with (cxx_pretty_printer *pp, int c)\n \n /* Expressions.  */\n \n-static inline bool\n-is_destructor_name (tree name)\n-{\n-  return name == complete_dtor_identifier\n-    || name == base_dtor_identifier\n-    || name == deleting_dtor_identifier;\n-}\n-\n /* conversion-function-id:\n       operator conversion-type-id\n \n@@ -162,16 +154,7 @@ pp_cxx_unqualified_id (cxx_pretty_printer *pp, tree t)\n       else if (IDENTIFIER_CONV_OP_P (t))\n \tpp_cxx_conversion_function_id (pp, t);\n       else\n-\t{\n-\t  if (is_destructor_name (t))\n-\t    {\n-\t      pp_complement (pp);\n-\t      /* FIXME: Why is this necessary? */\n-\t      if (TREE_TYPE (t))\n-\t\tt = constructor_name (TREE_TYPE (t));\n-\t    }\n-\t  pp_cxx_tree_identifier (pp, t);\n-\t}\n+\tpp_cxx_tree_identifier (pp, t);\n       break;\n \n     case TEMPLATE_ID_EXPR:"}, {"sha": "c6b1f07eeef5b9be2f48db2ad77fb78099e80ccf", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a2e690b4654e88437aa40627f24068dc5216f5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a2e690b4654e88437aa40627f24068dc5216f5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=79a2e690b4654e88437aa40627f24068dc5216f5", "patch": "@@ -8580,16 +8580,18 @@ grokfndecl (tree ctype,\n     DECL_CONTEXT (decl) = FROB_CONTEXT (current_decl_namespace ());\n \n   /* `main' and builtins have implicit 'C' linkage.  */\n-  if ((MAIN_NAME_P (declarator)\n-       || (IDENTIFIER_LENGTH (declarator) > 10\n-\t   && IDENTIFIER_POINTER (declarator)[0] == '_'\n-\t   && IDENTIFIER_POINTER (declarator)[1] == '_'\n-\t   && strncmp (IDENTIFIER_POINTER (declarator)+2, \"builtin_\", 8) == 0)\n-       || (targetcm.cxx_implicit_extern_c\n-\t   && targetcm.cxx_implicit_extern_c(IDENTIFIER_POINTER (declarator))))\n+  if (ctype == NULL_TREE\n+      && DECL_FILE_SCOPE_P (decl)\n       && current_lang_name == lang_name_cplusplus\n-      && ctype == NULL_TREE\n-      && DECL_FILE_SCOPE_P (decl))\n+      && (MAIN_NAME_P (declarator)\n+\t  || (IDENTIFIER_LENGTH (declarator) > 10\n+\t      && IDENTIFIER_POINTER (declarator)[0] == '_'\n+\t      && IDENTIFIER_POINTER (declarator)[1] == '_'\n+\t      && strncmp (IDENTIFIER_POINTER (declarator)+2,\n+\t\t\t  \"builtin_\", 8) == 0)\n+\t  || (targetcm.cxx_implicit_extern_c\n+\t      && (targetcm.cxx_implicit_extern_c\n+\t\t  (IDENTIFIER_POINTER (declarator))))))\n     SET_DECL_LANGUAGE (decl, lang_c);\n \n   /* Should probably propagate const out from type to decl I bet (mrs).  */"}]}