{"sha": "d909ead68214042e9876a8df136d0835273d4b86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkwOWVhZDY4MjE0MDQyZTk4NzZhOGRmMTM2ZDA4MzUyNzNkNGI4Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-02-19T02:27:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-02-19T04:01:03Z"}, "message": "c++: Tweak PR969626 patch\n\nIt occurred to me that other types of conversions use rvaluedness_matches_p,\nbut those uses don't affect overload resolution, so we shouldn't look at the\nflag for them.  Fixing that made decltype64.C compile successfully, because\nthe non-template candidate was a perfect match, so we now wouldn't consider\nthe broken template.  Changing the argument to const& makes it no longer a\nperfect match (because of the added const), so we again get the infinite\nrecursion.\n\nThis illustrates the limited nature of this optimization/recursion break; it\nworks for most copy/move constructors because the constructor we're looking\nfor is almost always a perfect match.  If it happens to help improve compile\ntime for other calls, that's just a bonus.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96926\n\t* call.c (perfect_conversion_p): Limit rvalueness\n\ttest to reference bindings.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/decltype64.C: Change argument to const&.", "tree": {"sha": "0608841f5780518ad27c2301f2f9374fb9b11760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0608841f5780518ad27c2301f2f9374fb9b11760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d909ead68214042e9876a8df136d0835273d4b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d909ead68214042e9876a8df136d0835273d4b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d909ead68214042e9876a8df136d0835273d4b86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d909ead68214042e9876a8df136d0835273d4b86/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b258e263e0d74ca1f76aeaac5f4d1abef6b13707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b258e263e0d74ca1f76aeaac5f4d1abef6b13707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b258e263e0d74ca1f76aeaac5f4d1abef6b13707"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "0ba0e19ae0849b70bea2cb02b03622dcc1e3a5ce", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d909ead68214042e9876a8df136d0835273d4b86/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d909ead68214042e9876a8df136d0835273d4b86/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d909ead68214042e9876a8df136d0835273d4b86", "patch": "@@ -5864,12 +5864,14 @@ perfect_conversion_p (conversion *conv)\n {\n   if (CONVERSION_RANK (conv) != cr_identity)\n     return false;\n-  if (!conv->rvaluedness_matches_p)\n-    return false;\n-  if (conv->kind == ck_ref_bind\n-      && !same_type_p (TREE_TYPE (conv->type),\n-\t\t       next_conversion (conv)->type))\n-    return false;\n+  if (conv->kind == ck_ref_bind)\n+    {\n+      if (!conv->rvaluedness_matches_p)\n+\treturn false;\n+      if (!same_type_p (TREE_TYPE (conv->type),\n+\t\t\tnext_conversion (conv)->type))\n+\treturn false;\n+    }\n   return true;\n }\n "}, {"sha": "0cd614cceeb0f0ced0f2891fb51ef387e173a806", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype64.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d909ead68214042e9876a8df136d0835273d4b86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d909ead68214042e9876a8df136d0835273d4b86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype64.C?ref=d909ead68214042e9876a8df136d0835273d4b86", "patch": "@@ -5,7 +5,7 @@ template<int I>\n struct index\n {};\n \n-constexpr int recursive_impl(index<0u>)\n+constexpr int recursive_impl(const index<0u>&)\n {\n   return 0;\n }"}]}