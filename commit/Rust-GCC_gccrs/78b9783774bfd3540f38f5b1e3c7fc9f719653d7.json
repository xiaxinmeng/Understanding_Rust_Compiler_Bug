{"sha": "78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhiOTc4Mzc3NGJmZDM1NDBmMzhmNWIxZTNjN2ZjOWY3MTk2NTNkNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-04-24T01:31:22Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-04-28T13:25:52Z"}, "message": "analyzer: remove -Wanalyzer-use-of-uninitialized-value for GCC 10\n\nFrom what I can tell -Wanalyzer-use-of-uninitialized-value has not\nyet found a true diagnostic in real-world code, and seems to be\nparticularly susceptible to false positives.  These relate to bugs in\nthe region_model code.\n\nFor GCC 10 it seems best to remove this warning, which this patch does.\nInternally it also removes POISON_KIND_UNINIT.\n\nI'm working on a rewrite of the region_model code for GCC 11 that I\nhope will fix these issues, and allow this warning to be reintroduced.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/94447\n\tPR analyzer/94639\n\tPR analyzer/94732\n\tPR analyzer/94754\n\t* analyzer.opt (Wanalyzer-use-of-uninitialized-value): Delete.\n\t* program-state.cc (selftest::test_program_state_dumping): Update\n\texpected dump result for removal of \"uninit\".\n\t* region-model.cc (poison_kind_to_str): Delete POISON_KIND_UNINIT\n\tcase.\n\t(root_region::ensure_stack_region): Initialize stack with null\n\tsvalue_id rather than with a typeless POISON_KIND_UNINIT value.\n\t(root_region::ensure_heap_region): Likewise for the heap.\n\t(region_model::dump_summary_of_rep_path_vars): Remove\n\tsummarization of uninit values.\n\t(region_model::validate): Remove check that the stack has a\n\tPOISON_KIND_UNINIT value.\n\t(poisoned_value_diagnostic::emit): Remove POISON_KIND_UNINIT\n\tcase.\n\t(poisoned_value_diagnostic::describe_final_event): Likewise.\n\t(selftest::test_dump): Update expected dump result for removal of\n\t\"uninit\".\n\t(selftest::test_svalue_equality): Remove \"uninit\" and \"freed\".\n\t* region-model.h (enum poison_kind): Remove POISON_KIND_UNINIT.\n\ngcc/ChangeLog:\n\tPR analyzer/94447\n\tPR analyzer/94639\n\tPR analyzer/94732\n\tPR analyzer/94754\n\t* doc/invoke.texi (Static Analyzer Options): Remove\n\t-Wanalyzer-use-of-uninitialized-value.\n\t(-Wno-analyzer-use-of-uninitialized-value): Remove item.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/94447\n\tPR analyzer/94639\n\tPR analyzer/94732\n\tPR analyzer/94754\n\t* gcc.dg/analyzer/data-model-1.c: Mark \"use of uninitialized\n\tvalue\" warnings as xfail for now.\n\t* gcc.dg/analyzer/data-model-5b.c: Remove uninitialized warning.\n\t* gcc.dg/analyzer/pr94099.c: Mark \"uninitialized\" warning as xfail\n\tfor now.\n\t* gcc.dg/analyzer/pr94447.c: New test.\n\t* gcc.dg/analyzer/pr94639.c: New test.\n\t* gcc.dg/analyzer/pr94732.c: New test.\n\t* gcc.dg/analyzer/pr94754.c: New test.\n\t* gcc.dg/analyzer/zlib-6.c: Mark \"uninitialized\" warning as xfail\n\tfor now.", "tree": {"sha": "822252395c1ca8b0ecea2af088ad509737e1931a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/822252395c1ca8b0ecea2af088ad509737e1931a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cbf892543e126362d0f2ec665378f9118ef2f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cbf892543e126362d0f2ec665378f9118ef2f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cbf892543e126362d0f2ec665378f9118ef2f9e"}], "stats": {"total": 228, "additions": 129, "deletions": 99}, "files": [{"sha": "dc64c76be4896788f91004e03fd6ab48fb9d2fbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -1,3 +1,13 @@\n+2020-04-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94447\n+\tPR analyzer/94639\n+\tPR analyzer/94732\n+\tPR analyzer/94754\n+\t* doc/invoke.texi (Static Analyzer Options): Remove\n+\t-Wanalyzer-use-of-uninitialized-value.\n+\t(-Wno-analyzer-use-of-uninitialized-value): Remove item.\n+\n 2020-04-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/94809"}, {"sha": "3c8f45883a4870042ccb99c5eb163bb121e3ebf2", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -1,3 +1,29 @@\n+2020-04-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94447\n+\tPR analyzer/94639\n+\tPR analyzer/94732\n+\tPR analyzer/94754\n+\t* analyzer.opt (Wanalyzer-use-of-uninitialized-value): Delete.\n+\t* program-state.cc (selftest::test_program_state_dumping): Update\n+\texpected dump result for removal of \"uninit\".\n+\t* region-model.cc (poison_kind_to_str): Delete POISON_KIND_UNINIT\n+\tcase.\n+\t(root_region::ensure_stack_region): Initialize stack with null\n+\tsvalue_id rather than with a typeless POISON_KIND_UNINIT value.\n+\t(root_region::ensure_heap_region): Likewise for the heap.\n+\t(region_model::dump_summary_of_rep_path_vars): Remove\n+\tsummarization of uninit values.\n+\t(region_model::validate): Remove check that the stack has a\n+\tPOISON_KIND_UNINIT value.\n+\t(poisoned_value_diagnostic::emit): Remove POISON_KIND_UNINIT\n+\tcase.\n+\t(poisoned_value_diagnostic::describe_final_event): Likewise.\n+\t(selftest::test_dump): Update expected dump result for removal of\n+\t\"uninit\".\n+\t(selftest::test_svalue_equality): Remove \"uninit\" and \"freed\".\n+\t* region-model.h (enum poison_kind): Remove POISON_KIND_UNINIT.\n+\n 2020-04-01  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/94378"}, {"sha": "3133cdd41061f79ad14ab8b2c151e4df306d179f", "filename": "gcc/analyzer/analyzer.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fanalyzer%2Fanalyzer.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fanalyzer%2Fanalyzer.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.opt?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -98,10 +98,6 @@ Wanalyzer-use-of-pointer-in-stale-stack-frame\n Common Var(warn_analyzer_use_of_pointer_in_stale_stack_frame) Init(1) Warning\n Warn about code paths in which a pointer to a stale stack frame is used.\n \n-Wanalyzer-use-of-uninitialized-value\n-Common Var(warn_analyzer_use_of_uninitialized_value) Init(1) Warning\n-Warn about code paths in which an uninitialized value is used.\n-\n Wanalyzer-too-complex\n Common Var(warn_analyzer_too_complex) Init(0) Warning\n Warn if the code is too complicated for the analyzer to fully explore."}, {"sha": "1a5843be16db42ecfeddc3b91f122b601db4f7cc", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -1449,23 +1449,21 @@ test_program_state_dumping ()\n   ASSERT_DUMP_EQ\n     (s, ext_state, false,\n      \"rmodel: r0: {kind: `root', parent: null, sval: null}\\n\"\n-     \"|-heap: r1: {kind: `heap', parent: r0, sval: sv0}\\n\"\n-     \"|  |: sval: sv0: {poisoned: uninit}\\n\"\n+     \"|-heap: r1: {kind: `heap', parent: r0, sval: null}\\n\"\n      \"|  `-r2: {kind: `symbolic', parent: r1, sval: null, possibly_null: true}\\n\"\n      \"`-globals: r3: {kind: `globals', parent: r0, sval: null, map: {`p': r4}}\\n\"\n-     \"  `-`p': r4: {kind: `primitive', parent: r3, sval: sv1, type: `void *'}\\n\"\n-     \"    |: sval: sv1: {type: `void *', &r2}\\n\"\n+     \"  `-`p': r4: {kind: `primitive', parent: r3, sval: sv0, type: `void *'}\\n\"\n+     \"    |: sval: sv0: {type: `void *', &r2}\\n\"\n      \"    |: type: `void *'\\n\"\n      \"svalues:\\n\"\n-     \"  sv0: {poisoned: uninit}\\n\"\n-     \"  sv1: {type: `void *', &r2}\\n\"\n+     \"  sv0: {type: `void *', &r2}\\n\"\n      \"constraint manager:\\n\"\n      \"  equiv classes:\\n\"\n      \"  constraints:\\n\"\n-     \"malloc: {sv1: unchecked (`p')}\\n\");\n+     \"malloc: {sv0: unchecked (`p')}\\n\");\n \n   ASSERT_DUMP_EQ (s, ext_state, true,\n-\t\t  \"rmodel: p: &r2 malloc: {sv1: unchecked (`p')}\");\n+\t\t  \"rmodel: p: &r2 malloc: {sv0: unchecked (`p')}\");\n }\n \n /* Verify that program_state::dump_to_pp works for string literals.  */"}, {"sha": "22049a34d29fc36f0b84dde12d2fc49ba7cea816", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 7, "deletions": 68, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -788,8 +788,6 @@ poison_kind_to_str (enum poison_kind kind)\n     {\n     default:\n       gcc_unreachable ();\n-    case POISON_KIND_UNINIT:\n-      return \"uninit\";\n     case POISON_KIND_FREED:\n       return \"freed\";\n     case POISON_KIND_POPPED_STACK:\n@@ -3204,12 +3202,9 @@ root_region::ensure_stack_region (region_model *model)\n {\n   if (m_stack_rid.null_p ())\n     {\n-      svalue_id uninit_sid\n-\t= model->add_svalue (new poisoned_svalue (POISON_KIND_UNINIT,\n-\t\t\t\t\t\t  NULL_TREE));\n       m_stack_rid\n \t= model->add_region (new stack_region (model->get_root_rid (),\n-\t\t\t\t\t       uninit_sid));\n+\t\t\t\t\t       svalue_id::null ()));\n     }\n   return m_stack_rid;\n }\n@@ -3270,12 +3265,9 @@ root_region::ensure_heap_region (region_model *model)\n {\n   if (m_heap_rid.null_p ())\n     {\n-      svalue_id uninit_sid\n-\t= model->add_svalue (new poisoned_svalue (POISON_KIND_UNINIT,\n-\t\t\t\t\t\t  NULL_TREE));\n       m_heap_rid\n \t= model->add_region (new heap_region (model->get_root_rid (),\n-\t\t\t\t\t      uninit_sid));\n+\t\t\t\t\t      svalue_id::null ()));\n     }\n   return m_heap_rid;\n }\n@@ -3859,7 +3851,6 @@ region_model::dump_summary_of_rep_path_vars (pretty_printer *pp,\n   unsigned i;\n   path_var *pv;\n   auto_vec<tree> unknown_trees;\n-  auto_vec<tree> uninit_trees;\n   FOR_EACH_VEC_ELT (*rep_path_vars, i, pv)\n     {\n       if (TREE_CODE (pv->m_tree) == STRING_CST)\n@@ -3908,14 +3899,9 @@ region_model::dump_summary_of_rep_path_vars (pretty_printer *pp,\n \t  {\n \t    poisoned_svalue *poisoned_sval = as_a <poisoned_svalue *> (sval);\n \t    enum poison_kind pkind = poisoned_sval->get_poison_kind ();\n-\t    if (pkind == POISON_KIND_UNINIT)\n-\t      uninit_trees.safe_push (pv->m_tree);\n-\t    else\n-\t      {\n-\t\tdump_separator (pp, is_first);\n-\t\tdump_tree (pp, pv->m_tree);\n-\t\tpp_printf (pp, \": %s\", poison_kind_to_str (pkind));\n-\t      }\n+\t    dump_separator (pp, is_first);\n+\t    dump_tree (pp, pv->m_tree);\n+\t    pp_printf (pp, \": %s\", poison_kind_to_str (pkind));\n \t  }\n \t  break;\n \tcase SK_SETJMP:\n@@ -3928,7 +3914,6 @@ region_model::dump_summary_of_rep_path_vars (pretty_printer *pp,\n \n   /* Print unknown and uninitialized values in consolidated form.  */\n   dump_vec_of_tree (pp, is_first, unknown_trees, \"unknown\");\n-  dump_vec_of_tree (pp, is_first, uninit_trees, \"uninit\");\n }\n \n /* Assert that this object is valid.  */\n@@ -3949,18 +3934,6 @@ region_model::validate () const\n     r->validate (*this);\n \n   // TODO: anything else?\n-\n-  /* Verify that the stack region (if any) has an \"uninitialized\" value.  */\n-  region *stack_region = get_root_region ()->get_stack_region (this);\n-  if (stack_region)\n-    {\n-      svalue_id stack_value_sid = stack_region->get_value_direct ();\n-      svalue *stack_value = get_svalue (stack_value_sid);\n-      gcc_assert (stack_value->get_kind () == SK_POISONED);\n-      poisoned_svalue *subclass = stack_value->dyn_cast_poisoned_svalue ();\n-      gcc_assert (subclass);\n-      gcc_assert (subclass->get_poison_kind () == POISON_KIND_UNINIT);\n-    }\n }\n \n /* Global data for use by svalue_id_cmp_by_constant_svalue.  */\n@@ -4087,16 +4060,6 @@ class poisoned_value_diagnostic\n       {\n       default:\n \tgcc_unreachable ();\n-      case POISON_KIND_UNINIT:\n-\t{\n-\t  diagnostic_metadata m;\n-\t  m.add_cwe (457); /* \"CWE-457: Use of Uninitialized Variable\".  */\n-\t  return warning_meta (rich_loc, m,\n-\t\t\t       OPT_Wanalyzer_use_of_uninitialized_value,\n-\t\t\t       \"use of uninitialized value %qE\",\n-\t\t\t       m_expr);\n-\t}\n-\tbreak;\n       case POISON_KIND_FREED:\n \t{\n \t  diagnostic_metadata m;\n@@ -4125,9 +4088,6 @@ class poisoned_value_diagnostic\n       {\n       default:\n \tgcc_unreachable ();\n-      case POISON_KIND_UNINIT:\n-\treturn ev.formatted_print (\"use of uninitialized value %qE here\",\n-\t\t\t\t   m_expr);\n       case POISON_KIND_FREED:\n \treturn ev.formatted_print (\"use after %<free%> of %qE here\",\n \t\t\t\t   m_expr);\n@@ -7578,14 +7538,10 @@ test_dump ()\n \n   ASSERT_DUMP_EQ (model, false,\n \t\t  \"r0: {kind: `root', parent: null, sval: null}\\n\"\n-\t\t  \"|-stack: r1: {kind: `stack', parent: r0, sval: sv0}\\n\"\n-\t\t  \"|  |: sval: sv0: {poisoned: uninit}\\n\"\n+\t\t  \"|-stack: r1: {kind: `stack', parent: r0, sval: null}\\n\"\n \t\t  \"|-globals: r2: {kind: `globals', parent: r0, sval: null, map: {}}\\n\"\n-\t\t  \"`-heap: r3: {kind: `heap', parent: r0, sval: sv1}\\n\"\n-\t\t  \"  |: sval: sv1: {poisoned: uninit}\\n\"\n+\t\t  \"`-heap: r3: {kind: `heap', parent: r0, sval: null}\\n\"\n \t\t  \"svalues:\\n\"\n-\t\t  \"  sv0: {poisoned: uninit}\\n\"\n-\t\t  \"  sv1: {poisoned: uninit}\\n\"\n \t\t  \"constraint manager:\\n\"\n \t\t  \"  equiv classes:\\n\"\n \t\t  \"  constraints:\\n\");\n@@ -7798,15 +7754,6 @@ test_svalue_equality ()\n   ASSERT_NE (cst_int_42->hash (), cst_int_0->hash ());\n   ASSERT_NE (*cst_int_42, *cst_int_0);\n \n-  svalue *uninit = new poisoned_svalue (POISON_KIND_UNINIT, NULL_TREE);\n-  svalue *freed = new poisoned_svalue (POISON_KIND_FREED, NULL_TREE);\n-\n-  ASSERT_EQ (uninit->hash (), uninit->hash ());\n-  ASSERT_EQ (*uninit, *uninit);\n-\n-  ASSERT_NE (uninit->hash (), freed->hash ());\n-  ASSERT_NE (*uninit, *freed);\n-\n   svalue *unknown_0 = new unknown_svalue (ptr_type_node);\n   svalue *unknown_1 = new unknown_svalue (ptr_type_node);\n   ASSERT_EQ (unknown_0->hash (), unknown_0->hash ());\n@@ -7815,24 +7762,16 @@ test_svalue_equality ()\n \n   /* Comparisons between different kinds of svalue.  */\n   ASSERT_NE (*ptr_to_r0, *cst_int_42);\n-  ASSERT_NE (*ptr_to_r0, *uninit);\n   ASSERT_NE (*ptr_to_r0, *unknown_0);\n   ASSERT_NE (*cst_int_42, *ptr_to_r0);\n-  ASSERT_NE (*cst_int_42, *uninit);\n   ASSERT_NE (*cst_int_42, *unknown_0);\n-  ASSERT_NE (*uninit, *ptr_to_r0);\n-  ASSERT_NE (*uninit, *cst_int_42);\n-  ASSERT_NE (*uninit, *unknown_0);\n   ASSERT_NE (*unknown_0, *ptr_to_r0);\n   ASSERT_NE (*unknown_0, *cst_int_42);\n-  ASSERT_NE (*unknown_0, *uninit);\n \n   delete ptr_to_r0;\n   delete ptr_to_r1;\n   delete cst_int_42;\n   delete cst_int_0;\n-  delete uninit;\n-  delete freed;\n   delete unknown_0;\n   delete unknown_1;\n }"}, {"sha": "ad3dd1d13ef160025516338e277ec6f27aabd3a6", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -684,9 +684,6 @@ class unknown_svalue : public svalue\n \n enum poison_kind\n {\n-  /* For use to describe uninitialized memory.  */\n-  POISON_KIND_UNINIT,\n-\n   /* For use to describe freed memory.  */\n   POISON_KIND_FREED,\n "}, {"sha": "04b84e3a10e759b40aaafb790e2ac58b7b4c70ce", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -8256,7 +8256,6 @@ Enabling this option effectively enables the following warnings:\n -Wanalyzer-tainted-array-index @gol\n -Wanalyzer-unsafe-call-within-signal-handler @gol\n -Wanalyzer-use-after-free @gol\n--Wanalyzer-use-of-uninitialized-value @gol\n -Wanalyzer-use-of-pointer-in-stale-stack-frame @gol\n }\n \n@@ -8429,15 +8428,6 @@ to disable it.\n This diagnostic warns for paths through the code in which a pointer\n is dereferenced that points to a variable in a stale stack frame.\n \n-@item -Wno-analyzer-use-of-uninitialized-value\n-@opindex Wanalyzer-use-of-uninitialized-value\n-@opindex Wno-analyzer-use-of-uninitialized-value\n-This warning requires @option{-fanalyzer}, which enables it; use\n-@option{-Wno-analyzer-use-of-uninitialized-value} to disable it.\n-\n-This diagnostic warns for paths through the code in which an uninitialized\n-value is used.\n-\n @end table\n \n Pertinent parameters for controlling the exploration are:"}, {"sha": "a1ee87e45232174886c98b8159710fafdee72023", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -1,3 +1,21 @@\n+2020-04-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94447\n+\tPR analyzer/94639\n+\tPR analyzer/94732\n+\tPR analyzer/94754\n+\t* gcc.dg/analyzer/data-model-1.c: Mark \"use of uninitialized\n+\tvalue\" warnings as xfail for now.\n+\t* gcc.dg/analyzer/data-model-5b.c: Remove uninitialized warning.\n+\t* gcc.dg/analyzer/pr94099.c: Mark \"uninitialized\" warning as xfail\n+\tfor now.\n+\t* gcc.dg/analyzer/pr94447.c: New test.\n+\t* gcc.dg/analyzer/pr94639.c: New test.\n+\t* gcc.dg/analyzer/pr94732.c: New test.\n+\t* gcc.dg/analyzer/pr94754.c: New test.\n+\t* gcc.dg/analyzer/zlib-6.c: Mark \"uninitialized\" warning as xfail\n+\tfor now.\n+\n 2020-04-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/94809"}, {"sha": "1db99133d50e5110633b204a5fdad7b61591329f", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-1.c?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -849,15 +849,15 @@ void test_36 (int i)\n int test_37 (void)\n {\n   int *ptr;\n-  return *ptr; /* { dg-warning \"use of uninitialized value 'ptr'\" } */\n+  return *ptr; /* { dg-warning \"use of uninitialized value 'ptr'\" \"uninit-warning-removed\" { xfail *-*-* } } */\n }\n \n /* Write through uninitialized pointer.  */\n \n void test_37a (int i)\n {\n   int *ptr;\n-  *ptr = i; /* { dg-warning \"use of uninitialized value 'ptr'\" } */\n+  *ptr = i; /* { dg-warning \"use of uninitialized value 'ptr'\" \"uninit-warning-removed\" { xfail *-*-* } } */\n }\n \n // TODO: the various other ptr deref poisonings"}, {"sha": "76e351d86cbaf6d956b6ce674d50e48150a1829c", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-5b.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-5b.c?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -76,8 +76,7 @@ void unref (string_obj *obj)\n   if (--obj->str_base.ob_refcnt == 0)\n     {\n       //__analyzer_dump();\n-      obj->str_base.ob_type->tp_dealloc ((base_obj *)obj); /* { dg-bogus \"use of uninitialized value '<unknown>'\" \"\" { xfail *-*-* } } */\n-      // TODO (xfail): not sure what's going on here\n+      obj->str_base.ob_type->tp_dealloc ((base_obj *)obj);\n     }\n }\n "}, {"sha": "a116c49f10512d61cdf371d77db7b57d7b0da66d", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94099.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94099.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94099.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94099.c?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -21,7 +21,7 @@ pl (void)\n   for (sc = 0; sc < 1; ++sc)\n     {\n       th.gk.hk = 0;\n-      th.gk.bg[sc] = 0; /* { dg-warning \"uninitialized\" } */\n+      th.gk.bg[sc] = 0; /* { dg-warning \"uninitialized\" \"uninit-warning-removed\" { xfail *-*-* } } */\n       l3 (&th);\n     }\n }"}, {"sha": "1aecebba4efda2b420c07dca8bd891cd42a86999", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94447.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94447.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94447.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94447.c?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -0,0 +1,10 @@\n+struct foo\n+{\n+  int *v;\n+};\n+\n+int test (void)\n+{\n+  struct foo f = {};\n+  return *f.v;\n+}"}, {"sha": "2dbb57e39ec309c74d900ffafd5422d74f3de794", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94639.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94639.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94639.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94639.c?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -0,0 +1,14 @@\n+#include <string.h>\n+\n+void validatedatetime(const char *str)\n+{\n+  const char *templates[] = {\"dddd-dd-dd dd:dd\", \"dddd-dd-dd\"};\n+\n+  size_t len = strlen(str);\n+\n+  for (unsigned t = 0; t < 2; t++) {\n+    if (len != strlen(templates[t])) {\n+      continue;\n+    }\n+  }\n+}"}, {"sha": "1aa154fc7394cd2d76cc5576cf80322211ced781", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94732.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94732.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94732.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94732.c?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -0,0 +1,13 @@\n+typedef struct { int *a; } S;\n+int *f (void);\n+static void g (S *x)\n+{\n+  int *p = x->a;\n+  p[0] = 0;\n+}\n+void h (void)\n+{\n+  S x[1];\n+  x->a = f ();\n+  g (x);\n+}"}, {"sha": "3fae20c33d03a658fe0bd39deabfd0459ea039de", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94754.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94754.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94754.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94754.c?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -0,0 +1,20 @@\n+[[gnu::nonnull]]\n+static\n+void init_x(int cond, int **x, int *y)\n+{\n+  if (!cond)\n+    return;\n+  *x = y;\n+}\n+\n+int foo(int cond)\n+{\n+  int *x;\n+  int y = 7;\n+\n+  if (cond < 2)\n+    return -1;\n+  init_x(cond, &x, &y);\n+\n+  return *x;\n+}"}, {"sha": "0d814c0c096fec78396a494e0a113c91fce9ded8", "filename": "gcc/testsuite/gcc.dg/analyzer/zlib-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78b9783774bfd3540f38f5b1e3c7fc9f719653d7/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fzlib-6.c?ref=78b9783774bfd3540f38f5b1e3c7fc9f719653d7", "patch": "@@ -41,7 +41,7 @@ int inflate_blocks(inflate_blocks_statef *s, z_stream *z, int r) {\n         return inflate_flush(s, z, r);\n       }\n     };\n-    b |= ((uLong)(n--, *p++)) << k; /* { dg-warning \"use of uninitialized value\" } */\n+    b |= ((uLong)(n--, *p++)) << k; /* { dg-warning \"use of uninitialized value\" \"uninit-warning-removed\" { xfail *-*-* } } */\n     k += 8;\n   }\n }"}]}