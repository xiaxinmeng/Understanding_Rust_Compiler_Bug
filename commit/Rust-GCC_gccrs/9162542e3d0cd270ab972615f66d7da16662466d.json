{"sha": "9162542e3d0cd270ab972615f66d7da16662466d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE2MjU0MmUzZDBjZDI3MGFiOTcyNjE1ZjY2ZDdkYTE2NjYyNDY2ZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-10-18T18:29:02Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-10-18T18:29:02Z"}, "message": "attribs.c (handle_noinline_attribute): New function.\n\n* attribs.c (handle_noinline_attribute): New function.\n(handle_used_attribute): Likewise.\n(c_common_attribute_table): Added noinline and used.\n* doc/extend.texi (Function Attributes): Document them.\n* c-decl.c (duplicate_decls): Propagate DECL_UNINLINABLE.\nWarn when merging inline with attribute noinline.\n(start_decl, start_function): Warn if inline and attribute\nnoinline appear in the same declaration.\n\nFrom-SVN: r46334", "tree": {"sha": "ba59c40e9652d1cafe3687880cd7a3e173e06791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba59c40e9652d1cafe3687880cd7a3e173e06791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9162542e3d0cd270ab972615f66d7da16662466d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9162542e3d0cd270ab972615f66d7da16662466d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9162542e3d0cd270ab972615f66d7da16662466d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9162542e3d0cd270ab972615f66d7da16662466d/comments", "author": null, "committer": null, "parents": [{"sha": "97055d5c4e5ce6792523800bbd326313f81a48ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97055d5c4e5ce6792523800bbd326313f81a48ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97055d5c4e5ce6792523800bbd326313f81a48ef"}], "stats": {"total": 147, "additions": 138, "deletions": 9}, "files": [{"sha": "a85d7ddd449f310cededeb0d1542938515e8f007", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9162542e3d0cd270ab972615f66d7da16662466d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9162542e3d0cd270ab972615f66d7da16662466d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9162542e3d0cd270ab972615f66d7da16662466d", "patch": "@@ -1,3 +1,14 @@\n+2001-10-18  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* attribs.c (handle_noinline_attribute): New function.\n+\t(handle_used_attribute): Likewise.\n+\t(c_common_attribute_table): Added noinline and used.\n+\t* doc/extend.texi (Function Attributes): Document them.\n+\t* c-decl.c (duplicate_decls): Propagate DECL_UNINLINABLE.\n+\tWarn when merging inline with attribute noinline.\n+\t(start_decl, start_function): Warn if inline and attribute\n+\tnoinline appear in the same declaration.\n+\n 2001-10-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* config.gcc: Update c4x and i370 for C front end-specific"}, {"sha": "3f8edcebd51f17a2dd3f97e642c09957189b353d", "filename": "gcc/attribs.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9162542e3d0cd270ab972615f66d7da16662466d/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9162542e3d0cd270ab972615f66d7da16662466d/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=9162542e3d0cd270ab972615f66d7da16662466d", "patch": "@@ -49,6 +49,10 @@ static tree handle_common_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n static tree handle_noreturn_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n+static tree handle_noinline_attribute\tPARAMS ((tree *, tree, tree, int,\n+\t\t\t\t\t\t bool *));\n+static tree handle_used_attribute\tPARAMS ((tree *, tree, tree, int,\n+\t\t\t\t\t\t bool *));\n static tree handle_unused_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n static tree handle_const_attribute\tPARAMS ((tree *, tree, tree, int,\n@@ -100,6 +104,10 @@ static const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_noreturn_attribute },\n   { \"volatile\",               0, 0, true,  false, false,\n \t\t\t      handle_noreturn_attribute },\n+  { \"noinline\",               0, 0, true,  false, false,\n+\t\t\t      handle_noinline_attribute },\n+  { \"used\",                   0, 0, true,  false, false,\n+\t\t\t      handle_used_attribute },\n   { \"unused\",                 0, 0, false, false, false,\n \t\t\t      handle_unused_attribute },\n   /* The same comments as for noreturn attributes apply to const ones.  */\n@@ -509,6 +517,51 @@ handle_noreturn_attribute (node, name, args, flags, no_add_attrs)\n   return NULL_TREE;\n }\n \n+/* Handle a \"noinline\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_noinline_attribute (node, name, args, flags, no_add_attrs)\n+     tree *node;\n+     tree name;\n+     tree args ATTRIBUTE_UNUSED;\n+     int flags ATTRIBUTE_UNUSED;\n+     bool *no_add_attrs;\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    DECL_UNINLINABLE (*node) = 1;\n+  else\n+    {\n+      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Handle a \"used\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_used_attribute (node, name, args, flags, no_add_attrs)\n+     tree *node;\n+     tree name;\n+     tree args ATTRIBUTE_UNUSED;\n+     int flags ATTRIBUTE_UNUSED;\n+     bool *no_add_attrs;\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (*node))\n+      = TREE_USED (*node) = 1;\n+  else\n+    {\n+      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"unused\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "de553b185440a1f2a49a77fdb412500235aff840", "filename": "gcc/c-decl.c", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9162542e3d0cd270ab972615f66d7da16662466d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9162542e3d0cd270ab972615f66d7da16662466d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9162542e3d0cd270ab972615f66d7da16662466d", "patch": "@@ -1405,8 +1405,43 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n   int errmsg = 0;\n \n   if (DECL_P (olddecl))\n-    DECL_ATTRIBUTES (newdecl)\n-      = (*targetm.merge_decl_attributes) (olddecl, newdecl);\n+    {\n+      if (TREE_CODE (newdecl) == FUNCTION_DECL\n+\t  && TREE_CODE (olddecl) == FUNCTION_DECL\n+\t  && (DECL_UNINLINABLE (newdecl) || DECL_UNINLINABLE (olddecl)))\n+\t{\n+\t  if (DECL_DECLARED_INLINE_P (newdecl)\n+\t      && DECL_UNINLINABLE (newdecl)\n+\t      && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n+\t    /* Already warned elsewhere.  */;\n+\t  else if (DECL_DECLARED_INLINE_P (olddecl)\n+\t\t   && DECL_UNINLINABLE (olddecl)\n+\t\t   && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n+\t    /* Already warned.  */;\n+\t  else if (DECL_DECLARED_INLINE_P (newdecl)\n+\t\t   && ! DECL_DECLARED_INLINE_P (olddecl)\n+\t\t   && DECL_UNINLINABLE (olddecl)\n+\t\t   && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n+\t    {\n+\t      warning_with_decl (newdecl,\n+\t\t\t\t \"function `%s' redeclared as inline\");\n+\t      warning_with_decl (olddecl,\n+\t\t\t\t \"previous declaration of function `%s' with attribute noinline\");\n+\t    }\n+\t  else if (DECL_DECLARED_INLINE_P (olddecl)\n+\t\t   && DECL_UNINLINABLE (newdecl)\n+\t\t   && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n+\t    {\n+\t      warning_with_decl (newdecl,\n+\t\t\t\t \"function `%s' redeclared with attribute noinline\");\n+\t      warning_with_decl (olddecl,\n+\t\t\t\t \"previous declaration of function `%s' was inline\");\n+\t    }\n+\t}\n+\n+      DECL_ATTRIBUTES (newdecl)\n+\t= (*targetm.merge_decl_attributes) (olddecl, newdecl);\n+    }\n \n   if (TREE_CODE (newtype) == ERROR_MARK\n       || TREE_CODE (oldtype) == ERROR_MARK)\n@@ -1983,6 +2018,9 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t    DECL_DECLARED_INLINE_P (olddecl) = 1;\n \n \t  DECL_DECLARED_INLINE_P (newdecl) = DECL_DECLARED_INLINE_P (olddecl);\n+\n+\t  DECL_UNINLINABLE (newdecl) = DECL_UNINLINABLE (olddecl)\n+\t    = (DECL_UNINLINABLE (newdecl) || DECL_UNINLINABLE (olddecl));\n \t}\n \n       if (DECL_BUILT_IN (olddecl))\n@@ -3483,6 +3521,13 @@ start_decl (declarator, declspecs, initialized, attributes)\n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n   decl_attributes (&decl, attributes, 0);\n \n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && DECL_DECLARED_INLINE_P (decl)\n+      && DECL_UNINLINABLE (decl)\n+      && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl)))\n+    warning_with_decl (decl,\n+\t\t       \"inline function `%s' given attribute noinline\");\n+\n   /* Add this decl to the current binding level.\n      TEM may equal DECL or it may be a previous decl of the same name.  */\n   tem = pushdecl (decl);\n@@ -6022,6 +6067,12 @@ start_function (declspecs, declarator, attributes)\n \n   decl_attributes (&decl1, attributes, 0);\n \n+  if (DECL_DECLARED_INLINE_P (decl1)\n+      && DECL_UNINLINABLE (decl1)\n+      && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl1)))\n+    warning_with_decl (decl1,\n+\t\t       \"inline function `%s' given attribute noinline\");\n+\n   announce_function (decl1);\n \n   if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl1))))"}, {"sha": "f94950b21023a879e27652c1cc539eaedd8603db", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9162542e3d0cd270ab972615f66d7da16662466d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9162542e3d0cd270ab972615f66d7da16662466d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=9162542e3d0cd270ab972615f66d7da16662466d", "patch": "@@ -1925,13 +1925,14 @@ carefully.\n \n The keyword @code{__attribute__} allows you to specify special\n attributes when making a declaration.  This keyword is followed by an\n-attribute specification inside double parentheses.  Fourteen attributes,\n-@code{noreturn}, @code{pure}, @code{const}, @code{format},\n-@code{format_arg}, @code{no_instrument_function}, @code{section},\n-@code{constructor}, @code{destructor}, @code{unused}, @code{weak},\n-@code{malloc}, @code{alias} and @code{no_check_memory_usage} are\n-currently defined for functions.  Several other attributes are defined\n-for functions on particular target systems.  Other attributes, including\n+attribute specification inside double parentheses.  The following\n+attributs are currently defined for functions on all targets:\n+@code{noreturn}, @code{noinline}, @code{pure}, @code{const},\n+@code{format}, @code{format_arg}, @code{no_instrument_function},\n+@code{section}, @code{constructor}, @code{destructor}, @code{used},\n+@code{unused}, @code{weak}, @code{malloc}, @code{alias} and\n+@code{no_check_memory_usage}.  Several other attributes are defined for\n+functions on particular target systems.  Other attributes, including\n @code{section} are supported for variables declarations (@pxref{Variable\n Attributes}) and for types (@pxref{Type Attributes}).\n \n@@ -1987,6 +1988,11 @@ typedef void voidfn ();\n volatile voidfn fatal;\n @end smallexample\n \n+@cindex @code{noinline} function attribute\n+@item noinline\n+This function attribute prevents a function from being considered for\n+inlining.\n+\n @cindex @code{pure} function attribute\n @item pure\n Many functions have no effects except the return value and their\n@@ -2174,12 +2180,20 @@ the program.\n \n These attributes are not currently implemented for Objective-C@.\n \n+@cindex @code{unused} attribute.\n @item unused\n This attribute, attached to a function, means that the function is meant\n to be possibly unused.  GCC will not produce a warning for this\n function.  GNU C++ does not currently support this attribute as\n definitions without parameters are valid in C++.\n \n+@cindex @code{used} attribute.\n+@item used\n+This attribute, attached to a function, means that code must be emitted\n+for the function even if it appears that the function is not referenced.\n+This is useful, for example, when the function is referenced only in\n+inline assembly.\n+\n @item weak\n @cindex @code{weak} attribute\n The @code{weak} attribute causes the declaration to be emitted as a weak"}]}