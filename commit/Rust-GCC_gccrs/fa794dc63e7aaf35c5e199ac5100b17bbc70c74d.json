{"sha": "fa794dc63e7aaf35c5e199ac5100b17bbc70c74d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE3OTRkYzYzZTdhYWYzNWM1ZTE5OWFjNTEwMGIxN2JiYzcwYzc0ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-08-29T16:28:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-08-29T16:28:19Z"}, "message": "complex (complex): Define copy constructor and assignment operator as defaulted.\n\n\t* include/std/complex (complex): Define copy constructor and\n\tassignment operator as defaulted. Improve Doxygen comments.\n\nFrom-SVN: r214736", "tree": {"sha": "4fd1334cf972596054373224ea909f5e7f663976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fd1334cf972596054373224ea909f5e7f663976"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa794dc63e7aaf35c5e199ac5100b17bbc70c74d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa794dc63e7aaf35c5e199ac5100b17bbc70c74d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa794dc63e7aaf35c5e199ac5100b17bbc70c74d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa794dc63e7aaf35c5e199ac5100b17bbc70c74d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81b5d104e944fd473032ab9c6ea588cdb0a02065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b5d104e944fd473032ab9c6ea588cdb0a02065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b5d104e944fd473032ab9c6ea588cdb0a02065"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "cc6659539d508f43d16d0c1c4b7dcc1cfc70d532", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa794dc63e7aaf35c5e199ac5100b17bbc70c74d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa794dc63e7aaf35c5e199ac5100b17bbc70c74d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fa794dc63e7aaf35c5e199ac5100b17bbc70c74d", "patch": "@@ -1,3 +1,8 @@\n+2014-08-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/complex (complex): Define copy constructor and\n+\tassignment operator as defaulted. Improve Doxygen comments.\n+\n 2014-08-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/ext/random/*: Fix incorrect standard references in"}, {"sha": "f6d1de5d47e6bd184de3f0b3a2f45700fad3b074", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa794dc63e7aaf35c5e199ac5100b17bbc70c74d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa794dc63e7aaf35c5e199ac5100b17bbc70c74d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=fa794dc63e7aaf35c5e199ac5100b17bbc70c74d", "patch": "@@ -129,9 +129,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_CONSTEXPR complex(const _Tp& __r = _Tp(), const _Tp& __i = _Tp())\n       : _M_real(__r), _M_imag(__i) { }\n \n-      // Lets the compiler synthesize the copy constructor   \n-      // complex (const complex<_Tp>&);\n-      ///  Copy constructor.\n+      // Let the compiler synthesize the copy constructor\n+#if __cplusplus >= 201103L\n+      constexpr complex(const complex&) = default;\n+#endif\n+\n+      ///  Converting constructor.\n       template<typename _Up>\n         _GLIBCXX_CONSTEXPR complex(const complex<_Up>& __z)\n \t: _M_real(__z.real()), _M_imag(__z.imag()) { }\n@@ -172,10 +175,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void \n       imag(_Tp __val) { _M_imag = __val; }\n \n-      /// Assign this complex number to scalar @a t.\n+      /// Assign a scalar to this complex number.\n       complex<_Tp>& operator=(const _Tp&);\n       \n-      /// Add @a t to this complex number.\n+      /// Add a scalar to this complex number.\n       // 26.2.5/1\n       complex<_Tp>&\n       operator+=(const _Tp& __t)\n@@ -184,7 +187,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-      /// Subtract @a t from this complex number.\n+      /// Subtract a scalar from this complex number.\n       // 26.2.5/3\n       complex<_Tp>&\n       operator-=(const _Tp& __t)\n@@ -193,27 +196,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-      /// Multiply this complex number by @a t.\n+      /// Multiply this complex number by a scalar.\n       complex<_Tp>& operator*=(const _Tp&);\n-      /// Divide this complex number by @a t.\n+      /// Divide this complex number by a scalar.\n       complex<_Tp>& operator/=(const _Tp&);\n \n-      // Lets the compiler synthesize the\n-      // copy and assignment operator\n-      // complex<_Tp>& operator= (const complex<_Tp>&);\n-      /// Assign this complex number to complex @a z.\n+      // Let the compiler synthesize the copy assignment operator\n+#if __cplusplus >= 201103L\n+      complex& operator=(const complex&) = default;\n+#endif\n+\n+      /// Assign another complex number to this one.\n       template<typename _Up>\n         complex<_Tp>& operator=(const complex<_Up>&);\n-      /// Add @a z to this complex number.\n+      /// Add another complex number to this one.\n       template<typename _Up>\n         complex<_Tp>& operator+=(const complex<_Up>&);\n-      /// Subtract @a z from this complex number.\n+      /// Subtract another complex number from this one.\n       template<typename _Up>\n         complex<_Tp>& operator-=(const complex<_Up>&);\n-      /// Multiply this complex number by @a z.\n+      /// Multiply this complex number by another.\n       template<typename _Up>\n         complex<_Tp>& operator*=(const complex<_Up>&);\n-      /// Divide this complex number by @a z.\n+      /// Divide this complex number by another.\n       template<typename _Up>\n         complex<_Tp>& operator/=(const complex<_Up>&);\n \n@@ -625,7 +630,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 26.2.7/5: norm(__z) returns the squared magnitude of __z.\n   //     As defined, norm() is -not- a norm is the common mathematical\n-  //     sens used in numerics.  The helper class _Norm_helper<> tries to\n+  //     sense used in numerics.  The helper class _Norm_helper<> tries to\n   //     distinguish between builtin floating point and the rest, so as\n   //     to deliver an answer as close as possible to the real value.\n   template<bool>"}]}