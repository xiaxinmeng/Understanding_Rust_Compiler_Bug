{"sha": "9355110f96f64237672a85f677f9876f979ab9bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM1NTExMGY5NmY2NDIzNzY3MmE4NWY2NzdmOTg3NmY5NzlhYjliZg==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-06-07T23:59:53Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-06-07T23:59:53Z"}, "message": "re PR fortran/36420 (Fortran 2008: g0 edit descriptor)\n\n2008-06-07  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/36420\n\tPR libfortran/36421\n\tPR libfortran/36422\n\t* io/io.h: Add prototype for write_real.\n\t* io/transfer.c (formatted_transfer_scalar): For FMT_G and width zero,\n\tuse write_real.\n\t* io/format.c: Add zero width error message. (parse_format_list): Use\n\terror message for FMT_A if followed by FMT_ZERO. Use zero width error\n\tmessage\tfor FMT_G if mode is READ or if -std=f95 or f2003. (fmormat0):\n\tFix typo in comment.\n\t* io/write.c (write_a): Set wlen to len if FMT_G and length is zero.\n\t(write_l): Add wlen variable and use it if FMT_G and width is zero.\n\t(write_decimal): If FMT_G, set m to -1 to flag processor dependent\n\tformatting. (write_real): Remove static declaration.\n\nFrom-SVN: r136545", "tree": {"sha": "487800676128abb382d449fe3bde8cb9bd059db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/487800676128abb382d449fe3bde8cb9bd059db8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9355110f96f64237672a85f677f9876f979ab9bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9355110f96f64237672a85f677f9876f979ab9bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9355110f96f64237672a85f677f9876f979ab9bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9355110f96f64237672a85f677f9876f979ab9bf/comments", "author": null, "committer": null, "parents": [{"sha": "8955a00563959780a959086f6c79173d80fbfab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8955a00563959780a959086f6c79173d80fbfab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8955a00563959780a959086f6c79173d80fbfab8"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "dff8dc8a78348d136735a38e466a4eb9c0559ae4", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9355110f96f64237672a85f677f9876f979ab9bf/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9355110f96f64237672a85f677f9876f979ab9bf/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9355110f96f64237672a85f677f9876f979ab9bf", "patch": "@@ -1,3 +1,20 @@\n+2008-06-07  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/36420\n+\tPR libfortran/36421\n+\tPR libfortran/36422\n+\t* io/io.h: Add prototype for write_real.\n+\t* io/transfer.c (formatted_transfer_scalar): For FMT_G and width zero,\n+\tuse write_real.\n+\t* io/format.c: Add zero width error message. (parse_format_list): Use\n+\terror message for FMT_A if followed by FMT_ZERO. Use zero width error\n+\tmessage\tfor FMT_G if mode is READ or if -std=f95 or f2003. (fmormat0):\n+\tFix typo in comment.\n+\t* io/write.c(write_a): Set wlen to len if FMT_G\tand length is zero.\n+\t(write_l): Add wlen variable and use it if FMT_G and width is zero.\n+\t(write_decimal): If FMT_G, set m to -1 to flag processor dependent\n+\tformatting. (write_real): Remove static declaration.\n+\n 2008-05-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/36319"}, {"sha": "cf299c161a4032a482973fe50191e4ab1c0bcc77", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9355110f96f64237672a85f677f9876f979ab9bf/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9355110f96f64237672a85f677f9876f979ab9bf/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=9355110f96f64237672a85f677f9876f979ab9bf", "patch": "@@ -71,8 +71,8 @@ static const char posint_required[] = \"Positive width required in format\",\n   unexpected_end[] = \"Unexpected end of format string\",\n   bad_string[] = \"Unterminated character constant in format\",\n   bad_hollerith[] = \"Hollerith constant extends past the end of the format\",\n-  reversion_error[] = \"Exhausted data descriptors in format\";\n-\n+  reversion_error[] = \"Exhausted data descriptors in format\",\n+  zero_width[] = \"Zero width in format descriptor\";\n \n /* next_char()-- Return the next character in the format string.\n  * Returns -1 when the string is done.  If the literal flag is set,\n@@ -698,6 +698,12 @@ parse_format_list (st_parameter_dt *dtp)\n \n     case FMT_A:\n       t = format_lex (fmt);\n+      if (t == FMT_ZERO)\n+\t{\n+\t  fmt->error = zero_width;\n+\t  goto finished;\n+\t}\n+\n       if (t != FMT_POSINT)\n \t{\n \t  fmt->saved_token = t;\n@@ -719,6 +725,17 @@ parse_format_list (st_parameter_dt *dtp)\n       tail->repeat = repeat;\n \n       u = format_lex (fmt);\n+      if (t == FMT_G && u == FMT_ZERO)\n+\t{\n+\t  if (notification_std (GFC_STD_F2008) == ERROR\n+\t      || dtp->u.p.mode == READING)\n+\t    {\n+\t      fmt->error = zero_width;\n+\t      goto finished;\n+\t    }\n+\t  tail->u.real.w = 0;\n+\t  break;\n+\t}\n       if (t == FMT_F || dtp->u.p.mode == WRITING)\n \t{\n \t  if (u != FMT_POSINT && u != FMT_ZERO)\n@@ -1079,7 +1096,7 @@ next_format0 (fnode * f)\n \n /* next_format()-- Return the next format node.  If the format list\n  * ends up being exhausted, we do reversion.  Reversion is only\n- * allowed if the we've seen a data descriptor since the\n+ * allowed if we've seen a data descriptor since the\n  * initialization or the last reversion.  We return NULL if there\n  * are no more data descriptors to return (which is an error\n  * condition). */"}, {"sha": "ea75bdbc405ff203aa01cdead0adaddb368a325e", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9355110f96f64237672a85f677f9876f979ab9bf/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9355110f96f64237672a85f677f9876f979ab9bf/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=9355110f96f64237672a85f677f9876f979ab9bf", "patch": "@@ -931,6 +931,9 @@ internal_proto(write_l);\n extern void write_o (st_parameter_dt *, const fnode *, const char *, int);\n internal_proto(write_o);\n \n+extern void write_real (st_parameter_dt *, const char *, int);\n+internal_proto(write_real);\n+\n extern void write_x (st_parameter_dt *, int, int);\n internal_proto(write_x);\n "}, {"sha": "36181f6fc0593ddc048d4ecdfaa5136b89d2f756", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9355110f96f64237672a85f677f9876f979ab9bf/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9355110f96f64237672a85f677f9876f979ab9bf/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=9355110f96f64237672a85f677f9876f979ab9bf", "patch": "@@ -1175,7 +1175,10 @@ formatted_transfer_scalar (st_parameter_dt *dtp, bt type, void *p, int len,\n \t\twrite_a (dtp, f, p, len);\n \t\tbreak;\n \t      case BT_REAL:\n-\t\twrite_d (dtp, f, p, len);\n+\t\tif (f->u.real.w == 0)\n+\t\t  write_real (dtp, p, len);\n+\t\telse\n+\t\t  write_d (dtp, f, p, len);\n \t\tbreak;\n \t      default:\n \t      bad_type:"}, {"sha": "6135d60fe5d40866efdd90613ff41d09dc98a4cd", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9355110f96f64237672a85f677f9876f979ab9bf/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9355110f96f64237672a85f677f9876f979ab9bf/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=9355110f96f64237672a85f677f9876f979ab9bf", "patch": "@@ -46,7 +46,9 @@ write_a (st_parameter_dt *dtp, const fnode *f, const char *source, int len)\n   int wlen;\n   char *p;\n \n-  wlen = f->u.string.length < 0 ? len : f->u.string.length;\n+  wlen = f->u.string.length < 0\n+\t || (f->format == FMT_G && f->u.string.length == 0)\n+\t ? len : f->u.string.length;\n \n #ifdef HAVE_CRLF\n   /* If this is formatted STREAM IO convert any embedded line feed characters\n@@ -235,15 +237,18 @@ void\n write_l (st_parameter_dt *dtp, const fnode *f, char *source, int len)\n {\n   char *p;\n+  int wlen;\n   GFC_INTEGER_LARGEST n;\n \n-  p = write_block (dtp, f->u.w);\n+  wlen = (f->format == FMT_G && f->u.w == 0) ? 1 : f->u.w;\n+  \n+  p = write_block (dtp, wlen);\n   if (p == NULL)\n     return;\n \n-  memset (p, ' ', f->u.w - 1);\n+  memset (p, ' ', wlen - 1);\n   n = extract_int (source, len);\n-  p[f->u.w - 1] = (n) ? 'T' : 'F';\n+  p[wlen - 1] = (n) ? 'T' : 'F';\n }\n \n \n@@ -340,12 +345,11 @@ write_decimal (st_parameter_dt *dtp, const fnode *f, const char *source,\n   char itoa_buf[GFC_BTOA_BUF_SIZE];\n \n   w = f->u.integer.w;\n-  m = f->u.integer.m;\n+  m = f->format == FMT_G ? -1 : f->u.integer.m;\n \n   n = extract_int (source, len);\n \n   /* Special case:  */\n-\n   if (m == 0 && n == 0)\n     {\n       if (w == 0)\n@@ -690,7 +694,7 @@ write_character (st_parameter_dt *dtp, const char *source, int length)\n    This is 1PG14.7E2 for REAL(4), 1PG23.15E3 for REAL(8),\n    1PG28.19E4 for REAL(10) and 1PG43.34E4 for REAL(16).  */\n \n-static void\n+void\n write_real (st_parameter_dt *dtp, const char *source, int length)\n {\n   fnode f ;"}]}